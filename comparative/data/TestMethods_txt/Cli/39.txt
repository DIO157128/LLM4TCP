@Test public void testGetOptionProperties()throws Exception {final String[]args=new String[]{"-Dparam1=value1","-Dparam2=value2","-Dparam3","-Dparam4=value4","-D","--property","foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt("property").create());final Parser parser=new GnuParser();final CommandLine cl=parser.parse(options,args);final Properties props=cl.getOptionProperties("D");assertNotNull("null properties",props);assertEquals("number of properties in " + props,4,props.size());assertEquals("property 1","value1",props.getProperty("param1"));assertEquals("property 2","value2",props.getProperty("param2"));assertEquals("property 3","true",props.getProperty("param3"));assertEquals("property 4","value4",props.getProperty("param4"));assertEquals("property with long format","bar",cl.getOptionProperties("property").getProperty("foo"));}
@Test public void testGetOptionPropertiesWithOption()throws Exception {final String[]args=new String[]{"-Dparam1=value1","-Dparam2=value2","-Dparam3","-Dparam4=value4","-D","--property","foo=bar"};final Options options=new Options();final Option option_D=OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D');final Option option_property=OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt("property").create();options.addOption(option_D);options.addOption(option_property);final Parser parser=new GnuParser();final CommandLine cl=parser.parse(options,args);final Properties props=cl.getOptionProperties(option_D);assertNotNull("null properties",props);assertEquals("number of properties in " + props,4,props.size());assertEquals("property 1","value1",props.getProperty("param1"));assertEquals("property 2","value2",props.getProperty("param2"));assertEquals("property 3","true",props.getProperty("param3"));assertEquals("property 4","value4",props.getProperty("param4"));assertEquals("property with long format","bar",cl.getOptionProperties(option_property).getProperty("foo"));}
@Test public void testGetOptions(){final CommandLine cmd=new CommandLine();assertNotNull(cmd.getOptions());assertEquals(0,cmd.getOptions().length);cmd.addOption(new Option("a",null));cmd.addOption(new Option("b",null));cmd.addOption(new Option("c",null));assertEquals(3,cmd.getOptions().length);}
@Test public void testGetParsedOptionValue()throws Exception {final Options options=new Options();options.addOption(OptionBuilder.hasArg().withType(Number.class).create("i"));options.addOption(OptionBuilder.hasArg().create("f"));final CommandLineParser parser=new DefaultParser();final CommandLine cmd=parser.parse(options,new String[]{"-i","123","-f","foo"});assertEquals(123,((Number)cmd.getParsedOptionValue("i")).intValue());assertEquals("foo",cmd.getParsedOptionValue("f"));}
@Test public void testGetParsedOptionValueWithChar()throws Exception {final Options options=new Options();options.addOption(Option.builder("i").hasArg().type(Number.class).build());options.addOption(Option.builder("f").hasArg().build());final CommandLineParser parser=new DefaultParser();final CommandLine cmd=parser.parse(options,new String[]{"-i","123","-f","foo"});assertEquals(123,((Number)cmd.getParsedOptionValue('i')).intValue());assertEquals("foo",cmd.getParsedOptionValue('f'));}
@Test public void testGetParsedOptionValueWithOption()throws Exception {final Options options=new Options();final Option opt_i=Option.builder("i").hasArg().type(Number.class).build();final Option opt_f=Option.builder("f").hasArg().build();options.addOption(opt_i);options.addOption(opt_f);final CommandLineParser parser=new DefaultParser();final CommandLine cmd=parser.parse(options,new String[]{"-i","123","-f","foo"});assertEquals(123,((Number)cmd.getParsedOptionValue(opt_i)).intValue());assertEquals("foo",cmd.getParsedOptionValue(opt_f));}
@Test public void testNullhOption()throws Exception {final Options options=new Options();final Option opt_i=Option.builder("i").hasArg().type(Number.class).build();final Option opt_f=Option.builder("f").hasArg().build();options.addOption(opt_i);options.addOption(opt_f);final CommandLineParser parser=new DefaultParser();final CommandLine cmd=parser.parse(options,new String[]{"-i","123","-f","foo"});assertNull(cmd.getOptionValue((Option)null));assertNull(cmd.getParsedOptionValue((Option)null));}
@Test public void testBuilder()throws Exception {final CommandLine.Builder builder=new CommandLine.Builder();builder.addArg("foo").addArg("bar");builder.addOption(Option.builder("T").build());final CommandLine cmd=builder.build();assertEquals("foo",cmd.getArgs()[0]);assertEquals("bar",cmd.getArgList().get(1));assertEquals("T",cmd.getOptions()[0].getOpt());}
@Test public void testClear(){final TestOption option=new TestOption("x",true,"");assertEquals(0,option.getValuesList().size());option.addValue("a");assertEquals(1,option.getValuesList().size());option.clearValues();assertEquals(0,option.getValuesList().size());}
@Test public void testClone(){final TestOption a=new TestOption("a",true,"");final TestOption b=(TestOption)a.clone();assertEquals(a,b);assertNotSame(a,b);a.setDescription("a");assertEquals("",b.getDescription());b.setArgs(2);b.addValue("b1");b.addValue("b2");assertEquals(1,a.getArgs());assertEquals(0,a.getValuesList().size());assertEquals(2,b.getValues().length);}
@Test public void testHashCode(){assertNotEquals(Option.builder("test").build().hashCode(),Option.builder("test2").build().hashCode());assertNotEquals(Option.builder("test").build().hashCode(),Option.builder().longOpt("test").build().hashCode());assertNotEquals(Option.builder("test").build().hashCode(),Option.builder("test").longOpt("long test").build().hashCode());}
@Test public void testSubclass(){final Option option=new DefaultOption("f","file","myfile.txt");final Option clone=(Option)option.clone();assertEquals("myfile.txt",clone.getValue());assertEquals(DefaultOption.class,clone.getClass());}
@Test public void testHasArgName(){final Option option=new Option("f",null);option.setArgName(null);assertFalse(option.hasArgName());option.setArgName("");assertFalse(option.hasArgName());option.setArgName("file");assertTrue(option.hasArgName());}
@Test public void testHasArgs(){final Option option=new Option("f",null);option.setArgs(0);assertFalse(option.hasArgs());option.setArgs(1);assertFalse(option.hasArgs());option.setArgs(10);assertTrue(option.hasArgs());option.setArgs(Option.UNLIMITED_VALUES);assertTrue(option.hasArgs());option.setArgs(Option.UNINITIALIZED);assertFalse(option.hasArgs());}
@Test public void testGetValue(){final Option option=new Option("f",null);option.setArgs(Option.UNLIMITED_VALUES);assertEquals("default",option.getValue("default"));assertEquals(null,option.getValue(0));option.addValueForProcessing("foo");assertEquals("foo",option.getValue());assertEquals("foo",option.getValue(0));assertEquals("foo",option.getValue("default"));}
@Test public void testBuilderMethods(){final char defaultSeparator=(char)0;checkOption(Option.builder("a").desc("desc").build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").longOpt("aaa").build(),"a","desc","aaa",Option.UNINITIALIZED,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").hasArg(true).build(),"a","desc",null,1,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").hasArg(false).build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").hasArg(true).build(),"a","desc",null,1,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").numberOfArgs(3).build(),"a","desc",null,3,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").required(true).build(),"a","desc",null,Option.UNINITIALIZED,null,true,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").required(false).build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").argName("arg1").build(),"a","desc",null,Option.UNINITIALIZED,"arg1",false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").optionalArg(false).build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").optionalArg(true).build(),"a","desc",null,Option.UNINITIALIZED,null,false,true,defaultSeparator,String.class);checkOption(Option.builder("a").desc("desc").valueSeparator(':').build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,':',String.class);checkOption(Option.builder("a").desc("desc").type(Integer.class).build(),"a","desc",null,Option.UNINITIALIZED,null,false,false,defaultSeparator,Integer.class);}
@Test(expected=IllegalArgumentException.class)public void testBuilderInsufficientParams1(){Option.builder().desc("desc").build();}
@Test(expected=IllegalArgumentException.class)public void testBuilderInsufficientParams2(){Option.builder(null).desc("desc").build();}
@Override @Test @Ignore("not supported by the BasicParser")public void testDoubleDash2()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testLongWithoutEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser (CLI-184)")public void testNegativeOption()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testPropertiesOption1()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testPropertiesOption2()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testShortWithEqual()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testShortWithoutEqual()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testLongWithEqualDoubleDash()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testLongWithEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testUnambiguousPartialLongOption1()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testUnambiguousPartialLongOption2()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testUnambiguousPartialLongOption3()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testUnambiguousPartialLongOption4()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testAmbiguousPartialLongOption1()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testAmbiguousPartialLongOption2()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testAmbiguousPartialLongOption3()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testAmbiguousPartialLongOption4()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testPartialLongOptionSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testBursting()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testUnrecognizedOptionWithBursting()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testMissingArgWithBursting()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testStopBursting()throws Exception {}
@Override @Test @Ignore("not supported by the BasicParser")public void testStopBursting2()throws Exception {}
@Test public void testSimpleShort()throws Exception {final String[]args=new String[]{"-a","-b","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testSimpleLong()throws Exception {final String[]args=new String[]{"--enable-a","--bfile","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm arg of --bfile",cl.getOptionValue("bfile").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testMultiple()throws Exception {final String[]args=new String[]{"-c","foobar","-b","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testMultipleWithLong()throws Exception {final String[]args=new String[]{"--copt","foobar","--bfile","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testUnrecognizedOption()throws Exception {final String[]args=new String[]{"-a","-d","-b","toast","foo","bar"};try {parser.parse(options,args);fail("UnrecognizedOptionException wasn't thrown");}catch(final UnrecognizedOptionException e){assertEquals("-d",e.getOption());}}
@Test public void testMissingArg()throws Exception {final String[]args=new String[]{"-b"};boolean caught=false;try {parser.parse(options,args);}catch(final MissingArgumentException e){caught=true;assertEquals("option missing an argument","b",e.getOption().getOpt());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testDoubleDash1()throws Exception {final String[]args=new String[]{"--copt","--","-b","toast"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm -b is not set",!cl.hasOption("b"));assertTrue("Confirm 2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}
@Test public void testSingleDash()throws Exception {final String[]args=new String[]{"--copt","-b","-","-a","-"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("-"));assertTrue("Confirm 1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("-"));}
@Test public void testStopAtUnexpectedArg()throws Exception {final String[]args=new String[]{"-c","foober","-b","toast"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtExpectedArg()throws Exception {final String[]args=new String[]{"-b","foo"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -b is set",cl.hasOption('b'));assertEquals("Confirm -b is set","foo",cl.getOptionValue('b'));assertTrue("Confirm no extra args: " + cl.getArgList().size(),cl.getArgList().size()== 0);}
@Test public void testStopAtNonOptionShort()throws Exception {final String[]args=new String[]{"-z","-a","-btoast"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtNonOptionLong()throws Exception {final String[]args=new String[]{"--zop==1","-abtoast","--b=bar"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertFalse("Confirm -b is not set",cl.hasOption("b"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testNegativeArgument()throws Exception {final String[]args=new String[]{"-b","-1"};final CommandLine cl=parser.parse(options,args);assertEquals("-1",cl.getOptionValue("b"));}
@Test public void testArgumentStartingWithHyphen()throws Exception {final String[]args=new String[]{"-b","-foo"};final CommandLine cl=parser.parse(options,args);assertEquals("-foo",cl.getOptionValue("b"));}
@Test public void testLongWithoutEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption("foo"));}
@Test public void testLongWithUnexpectedArgument1()throws Exception {final String[]args=new String[]{"--foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("--foo=bar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testLongWithUnexpectedArgument2()throws Exception {final String[]args=new String[]{"-foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("-foobar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testShortWithUnexpectedArgument()throws Exception {final String[]args=new String[]{"-f=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("-f=bar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testWithRequiredOption()throws Exception {final String[]args=new String[]{"-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is NOT set",!cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testOptionAndRequiredOption()throws Exception {final String[]args=new String[]{"-a","-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testMissingRequiredOption(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required option: b",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredOptions(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt("cfile").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required options: b,c",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));assertTrue(e.getMissingOptions().contains("c"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));group.setRequired(true);final Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create("c"));try {parser.parse(options,new String[]{"-c"});fail("MissingOptionException not thrown");}catch(final MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(final ParseException e){fail("Expected to catch MissingOptionException");}}
@Test public void testOptionGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));final Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{"-b"});assertEquals("selected option","b",group.getSelected());}
@Test public void testOptionGroupLong()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt("foo").create());group.addOption(OptionBuilder.withLongOpt("bar").create());final Options options=new Options();options.addOptionGroup(group);final CommandLine cl=parser.parse(options,new String[]{"--bar"});assertTrue(cl.hasOption("bar"));assertEquals("selected option","bar",group.getSelected());}
@Test public void testReuseOptionsTwice()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{"-v"});try {parser.parse(opts,new String[0]);fail("MissingOptionException not thrown");}catch(final MissingOptionException e){}}
@Test public void testUnlimitedArgs()throws Exception {final String[]args=new String[]{"-e","one","two","-f","alpha"};final Options options=new Options();options.addOption(OptionBuilder.hasArgs().create("e"));options.addOption(OptionBuilder.hasArgs().create("f"));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -e is set",cl.hasOption("e"));assertEquals("number of arg for -e",2,cl.getOptionValues("e").length);assertTrue("Confirm -f is set",cl.hasOption("f"));assertEquals("number of arg for -f",1,cl.getOptionValues("f").length);}
@Test public void testPropertyOptionSingularValue()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt("hide").create());final Properties properties=new Properties();properties.setProperty("hide","seek");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("hide"));assertEquals("seek",cmd.getOptionValue("hide"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionFlags()throws Exception {final Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("c","c",false,"toggle -c");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty("a","true");properties.setProperty("c","yes");properties.setProperty("e","1");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","false");properties.setProperty("c","no");properties.setProperty("e","0");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","TRUE");properties.setProperty("c","nO");properties.setProperty("e","TrUe");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","just a string");properties.setProperty("e","");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","0");properties.setProperty("c","1");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));}
@Test public void testPropertyOptionMultipleValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));final Properties properties=new Properties();properties.setProperty("k","one,two");final String[]values=new String[]{"one","two"};final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("k"));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}
@Test public void testPropertyOverrideValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));final String[]args=new String[]{"-j","found","-i","ink"};final Properties properties=new Properties();properties.setProperty("j","seek");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("j"));assertEquals("found",cmd.getOptionValue("j"));assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionRequired()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create("f"));final Properties properties=new Properties();properties.setProperty("f","true");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("f"));}
@Test public void testPropertyOptionUnexpected()throws Exception {final Options opts=new Options();final Properties properties=new Properties();properties.setProperty("f","true");try {parse(parser,opts,null,properties);fail("UnrecognizedOptionException expected");}catch(final UnrecognizedOptionException e){}}
@Test public void testPropertyOptionGroup()throws Exception {final Options opts=new Options();final OptionGroup group1=new OptionGroup();group1.addOption(new Option("a",null));group1.addOption(new Option("b",null));opts.addOptionGroup(group1);final OptionGroup group2=new OptionGroup();group2.addOption(new Option("x",null));group2.addOption(new Option("y",null));opts.addOptionGroup(group2);final String[]args=new String[]{"-a"};final Properties properties=new Properties();properties.put("b","true");properties.put("x","true");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("a"));assertFalse(cmd.hasOption("b"));assertTrue(cmd.hasOption("x"));assertFalse(cmd.hasOption("y"));}
@Override @Test @Ignore("not supported by the PosixParser")public void testDoubleDash2()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testLongWithoutEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser (CLI-184)")public void testNegativeOption()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testLongWithUnexpectedArgument1()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testLongWithEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testShortWithEqual()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testUnambiguousPartialLongOption4()throws Exception {}
@Override @Test @Ignore("not supported by the PosixParser")public void testAmbiguousPartialLongOption4()throws Exception {}
@Test public void testSimpleShort()throws Exception {final String[]args=new String[]{"-a","-b","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testSimpleLong()throws Exception {final String[]args=new String[]{"--enable-a","--bfile","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm arg of --bfile",cl.getOptionValue("bfile").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testMultiple()throws Exception {final String[]args=new String[]{"-c","foobar","-b","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testMultipleWithLong()throws Exception {final String[]args=new String[]{"--copt","foobar","--bfile","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testUnrecognizedOption()throws Exception {final String[]args=new String[]{"-a","-d","-b","toast","foo","bar"};try {parser.parse(options,args);fail("UnrecognizedOptionException wasn't thrown");}catch(final UnrecognizedOptionException e){assertEquals("-d",e.getOption());}}
@Test public void testMissingArg()throws Exception {final String[]args=new String[]{"-b"};boolean caught=false;try {parser.parse(options,args);}catch(final MissingArgumentException e){caught=true;assertEquals("option missing an argument","b",e.getOption().getOpt());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testDoubleDash1()throws Exception {final String[]args=new String[]{"--copt","--","-b","toast"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm -b is not set",!cl.hasOption("b"));assertTrue("Confirm 2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}
@Test public void testSingleDash()throws Exception {final String[]args=new String[]{"--copt","-b","-","-a","-"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("-"));assertTrue("Confirm 1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("-"));}
@Test public void testStopAtUnexpectedArg()throws Exception {final String[]args=new String[]{"-c","foober","-b","toast"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtExpectedArg()throws Exception {final String[]args=new String[]{"-b","foo"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -b is set",cl.hasOption('b'));assertEquals("Confirm -b is set","foo",cl.getOptionValue('b'));assertTrue("Confirm no extra args: " + cl.getArgList().size(),cl.getArgList().size()== 0);}
@Test public void testStopAtNonOptionShort()throws Exception {final String[]args=new String[]{"-z","-a","-btoast"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtNonOptionLong()throws Exception {final String[]args=new String[]{"--zop==1","-abtoast","--b=bar"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertFalse("Confirm -b is not set",cl.hasOption("b"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testNegativeArgument()throws Exception {final String[]args=new String[]{"-b","-1"};final CommandLine cl=parser.parse(options,args);assertEquals("-1",cl.getOptionValue("b"));}
@Test public void testArgumentStartingWithHyphen()throws Exception {final String[]args=new String[]{"-b","-foo"};final CommandLine cl=parser.parse(options,args);assertEquals("-foo",cl.getOptionValue("b"));}
@Test public void testShortWithoutEqual()throws Exception {final String[]args=new String[]{"-fbar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithoutEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption("foo"));}
@Test public void testLongWithUnexpectedArgument2()throws Exception {final String[]args=new String[]{"-foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("-foobar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testShortWithUnexpectedArgument()throws Exception {final String[]args=new String[]{"-f=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("-f=bar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testPropertiesOption1()throws Exception {final String[]args=new String[]{"-Jsource=1.5","-J","target","1.5","foo"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));final CommandLine cl=parser.parse(options,args);final List<String> values=Arrays.asList(cl.getOptionValues("J"));assertNotNull("null values",values);assertEquals("number of values",4,values.size());assertEquals("value 1","source",values.get(0));assertEquals("value 2","1.5",values.get(1));assertEquals("value 3","target",values.get(2));assertEquals("value 4","1.5",values.get(3));final List<?> argsleft=cl.getArgList();assertEquals("Should be 1 arg left",1,argsleft.size());assertEquals("Expecting foo","foo",argsleft.get(0));}
@Test public void testPropertiesOption2()throws Exception {final String[]args=new String[]{"-Dparam1","-Dparam2=value2","-D"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));final CommandLine cl=parser.parse(options,args);final Properties props=cl.getOptionProperties("D");assertNotNull("null properties",props);assertEquals("number of properties in " + props,2,props.size());assertEquals("property 1","true",props.getProperty("param1"));assertEquals("property 2","value2",props.getProperty("param2"));final List<?> argsleft=cl.getArgList();assertEquals("Should be no arg left",0,argsleft.size());}
@Test public void testUnambiguousPartialLongOption1()throws Exception {final String[]args=new String[]{"--ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --version is set",cl.hasOption("version"));}
@Test public void testUnambiguousPartialLongOption2()throws Exception {final String[]args=new String[]{"-ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --version is set",cl.hasOption("version"));}
@Test public void testUnambiguousPartialLongOption3()throws Exception {final String[]args=new String[]{"--ver=1"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("verbose").hasOptionalArg().create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --verbose is set",cl.hasOption("verbose"));assertEquals("1",cl.getOptionValue("verbose"));}
@Test public void testAmbiguousPartialLongOption1()throws Exception {final String[]args=new String[]{"--ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","--ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testAmbiguousPartialLongOption2()throws Exception {final String[]args=new String[]{"-ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","-ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testAmbiguousPartialLongOption3()throws Exception {final String[]args=new String[]{"--ver=1"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").hasOptionalArg().create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","--ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testPartialLongOptionSingleDash()throws Exception {final String[]args=new String[]{"-ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.hasArg().create('v'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --version is set",cl.hasOption("version"));assertTrue("Confirm -v is not set",!cl.hasOption("v"));}
@Test public void testWithRequiredOption()throws Exception {final String[]args=new String[]{"-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is NOT set",!cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testOptionAndRequiredOption()throws Exception {final String[]args=new String[]{"-a","-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testMissingRequiredOption(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required option: b",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredOptions(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt("cfile").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required options: b,c",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));assertTrue(e.getMissingOptions().contains("c"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));group.setRequired(true);final Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create("c"));try {parser.parse(options,new String[]{"-c"});fail("MissingOptionException not thrown");}catch(final MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(final ParseException e){fail("Expected to catch MissingOptionException");}}
@Test public void testOptionGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));final Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{"-b"});assertEquals("selected option","b",group.getSelected());}
@Test public void testOptionGroupLong()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt("foo").create());group.addOption(OptionBuilder.withLongOpt("bar").create());final Options options=new Options();options.addOptionGroup(group);final CommandLine cl=parser.parse(options,new String[]{"--bar"});assertTrue(cl.hasOption("bar"));assertEquals("selected option","bar",group.getSelected());}
@Test public void testReuseOptionsTwice()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{"-v"});try {parser.parse(opts,new String[0]);fail("MissingOptionException not thrown");}catch(final MissingOptionException e){}}
@Test public void testBursting()throws Exception {final String[]args=new String[]{"-acbtoast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testUnrecognizedOptionWithBursting()throws Exception {final String[]args=new String[]{"-adbtoast","foo","bar"};try {parser.parse(options,args);fail("UnrecognizedOptionException wasn't thrown");}catch(final UnrecognizedOptionException e){assertEquals("-adbtoast",e.getOption());}}
@Test public void testMissingArgWithBursting()throws Exception {final String[]args=new String[]{"-acb"};boolean caught=false;try {parser.parse(options,args);}catch(final MissingArgumentException e){caught=true;assertEquals("option missing an argument","b",e.getOption().getOpt());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testStopBursting()throws Exception {final String[]args=new String[]{"-azc"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -a is set",cl.hasOption("a"));assertFalse("Confirm -c is not set",cl.hasOption("c"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(cl.getArgList().contains("zc"));}
@Test public void testStopBursting2()throws Exception {final String[]args=new String[]{"-c","foobar","-btoast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testUnlimitedArgs()throws Exception {final String[]args=new String[]{"-e","one","two","-f","alpha"};final Options options=new Options();options.addOption(OptionBuilder.hasArgs().create("e"));options.addOption(OptionBuilder.hasArgs().create("f"));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -e is set",cl.hasOption("e"));assertEquals("number of arg for -e",2,cl.getOptionValues("e").length);assertTrue("Confirm -f is set",cl.hasOption("f"));assertEquals("number of arg for -f",1,cl.getOptionValues("f").length);}
@Test public void testPropertyOptionSingularValue()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt("hide").create());final Properties properties=new Properties();properties.setProperty("hide","seek");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("hide"));assertEquals("seek",cmd.getOptionValue("hide"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionFlags()throws Exception {final Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("c","c",false,"toggle -c");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty("a","true");properties.setProperty("c","yes");properties.setProperty("e","1");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","false");properties.setProperty("c","no");properties.setProperty("e","0");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","TRUE");properties.setProperty("c","nO");properties.setProperty("e","TrUe");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","just a string");properties.setProperty("e","");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","0");properties.setProperty("c","1");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));}
@Test public void testPropertyOptionMultipleValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));final Properties properties=new Properties();properties.setProperty("k","one,two");final String[]values=new String[]{"one","two"};final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("k"));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}
@Test public void testPropertyOverrideValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));final String[]args=new String[]{"-j","found","-i","ink"};final Properties properties=new Properties();properties.setProperty("j","seek");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("j"));assertEquals("found",cmd.getOptionValue("j"));assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionRequired()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create("f"));final Properties properties=new Properties();properties.setProperty("f","true");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("f"));}
@Test public void testPropertyOptionUnexpected()throws Exception {final Options opts=new Options();final Properties properties=new Properties();properties.setProperty("f","true");try {parse(parser,opts,null,properties);fail("UnrecognizedOptionException expected");}catch(final UnrecognizedOptionException e){}}
@Test public void testPropertyOptionGroup()throws Exception {final Options opts=new Options();final OptionGroup group1=new OptionGroup();group1.addOption(new Option("a",null));group1.addOption(new Option("b",null));opts.addOptionGroup(group1);final OptionGroup group2=new OptionGroup();group2.addOption(new Option("x",null));group2.addOption(new Option("y",null));opts.addOptionGroup(group2);final String[]args=new String[]{"-a"};final Properties properties=new Properties();properties.put("b","true");properties.put("x","true");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("a"));assertFalse(cmd.hasOption("b"));assertTrue(cmd.hasOption("x"));assertFalse(cmd.hasOption("y"));}
@Test public void testLs()throws Exception {final CommandLineParser parser=new PosixParser();final Options options=new Options();options.addOption("a","all",false,"do not hide entries starting with .");options.addOption("A","almost-all",false,"do not list implied . and ..");options.addOption("b","escape",false,"print octal escapes for nongraphic characters");options.addOption(OptionBuilder.withLongOpt("block-size").withDescription("use SIZE-byte blocks").hasArg().withArgName("SIZE").create());options.addOption("B","ignore-backups",false,"do not list implied entried ending with ~");options.addOption("c",false,"with -lt: sort by,and show,ctime (time of last modification of file status information)with -l:show ctime and sort by name otherwise: sort by ctime");options.addOption("C",false,"list entries by columns");final String[]args=new String[]{"--block-size=10"};final CommandLine line=parser.parse(options,args);assertTrue(line.hasOption("block-size"));assertEquals(line.getOptionValue("block-size"),"10");}
/** * Ant test*/@Test public void testAnt()throws Exception {final CommandLineParser parser=new GnuParser();final Options options=new Options();options.addOption("help",false,"print this message");options.addOption("projecthelp",false,"print project help information");options.addOption("version",false,"print the version information and exit");options.addOption("quiet",false,"be extra quiet");options.addOption("verbose",false,"be extra verbose");options.addOption("debug",false,"print debug information");options.addOption("logfile",true,"use given file for log");options.addOption("logger",true,"the class which is to perform the logging");options.addOption("listener",true,"add an instance of a class as a project listener");options.addOption("buildfile",true,"use given buildfile");options.addOption(OptionBuilder.withDescription("use value for given property").hasArgs().withValueSeparator().create('D'));options.addOption("find",true,"search for buildfile towards the root of the filesystem and use it");final String[]args=new String[]{"-buildfile","mybuild.xml","-Dproperty=value","-Dproperty1=value1","-projecthelp"};final CommandLine line=parser.parse(options,args);final String[]opts=line.getOptionValues("D");assertEquals("property",opts[0]);assertEquals("value",opts[1]);assertEquals("property1",opts[2]);assertEquals("value1",opts[3]);assertEquals(line.getOptionValue("buildfile"),"mybuild.xml");assertTrue(line.hasOption("projecthelp"));}
@Test public void testGroovy()throws Exception {final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("define").withDescription("define a system property").hasArg(true).withArgName("name=value").create('D'));options.addOption(OptionBuilder.hasArg(false).withDescription("usage information").withLongOpt("help").create('h'));options.addOption(OptionBuilder.hasArg(false).withDescription("debug mode will print out full stack traces").withLongOpt("debug").create('d'));options.addOption(OptionBuilder.hasArg(false).withDescription("display the Groovy and JVM versions").withLongOpt("version").create('v'));options.addOption(OptionBuilder.withArgName("charset").hasArg().withDescription("specify the encoding of the files").withLongOpt("encoding").create('c'));options.addOption(OptionBuilder.withArgName("script").hasArg().withDescription("specify a command line script").create('e'));options.addOption(OptionBuilder.withArgName("extension").hasOptionalArg().withDescription("modify files in place;create backup if extension is given (e.g. \'.bak\')").create('i'));options.addOption(OptionBuilder.hasArg(false).withDescription("process files line by line using implicit 'line' variable").create('n'));options.addOption(OptionBuilder.hasArg(false).withDescription("process files line by line and print result (see also -n)").create('p'));options.addOption(OptionBuilder.withArgName("port").hasOptionalArg().withDescription("listen on a port and process inbound lines").create('l'));options.addOption(OptionBuilder.withArgName("splitPattern").hasOptionalArg().withDescription("split lines using splitPattern (default '\\s')using implicit 'split' variable").withLongOpt("autosplit").create('a'));final Parser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-e","println 'hello'"},true);assertTrue(line.hasOption('e'));assertEquals("println 'hello'",line.getOptionValue('e'));}
/** * author Slawek Zachcial*/@Test public void testMan(){final String cmdLine="man [-c|-f|-k|-w|-tZT device][-adlhu7V][-Mpath][-Ppager][-Slist]" + "[-msystem][-pstring][-Llocale][-eextension][section]page ...";final Options options=new Options().addOption("a","all",false,"find all matching manual pages.").addOption("d","debug",false,"emit debugging messages.").addOption("e","extension",false,"limit search to extension type 'extension'.").addOption("f","whatis",false,"equivalent to whatis.").addOption("k","apropos",false,"equivalent to apropos.").addOption("w","location",false,"print physical location of man page(s).").addOption("l","local-file",false,"interpret 'page' argument(s)as local filename(s)").addOption("u","update",false,"force a cache consistency check.").addOption("r","prompt",true,"provide 'less' pager with prompt.").addOption("c","catman",false,"used by catman to reformat out of date cat pages.").addOption("7","ascii",false,"display ASCII translation or certain latin1 chars.").addOption("t","troff",false,"use troff format pages.").addOption("T","troff-device",true,"use groff with selected device.").addOption("Z","ditroff",false,"use groff with selected device.").addOption("D","default",false,"reset all options to their default values.").addOption("M","manpath",true,"set search path for manual pages to 'path'.").addOption("P","pager",true,"use program 'pager' to display output.").addOption("S","sections",true,"use colon separated section list.").addOption("m","systems",true,"search for man pages from other unix system(s).").addOption("L","locale",true,"define the locale for this particular man search.").addOption("p","preprocessor",true,"string indicates which preprocessor to run.\n" + " e - [n]eqn  p - pic     t - tbl\n" + " g - grap    r - refer   v - vgrind").addOption("V","version",false,"show version.").addOption("h","help",false,"show this usage message.");final HelpFormatter hf=new HelpFormatter();final String EOL=System.getProperty("line.separator");final StringWriter out=new StringWriter();hf.printHelp(new PrintWriter(out),60,cmdLine,null,options,HelpFormatter.DEFAULT_LEFT_PAD,HelpFormatter.DEFAULT_DESC_PAD,null,false);assertEquals("usage: man [-c|-f|-k|-w|-tZT device][-adlhu7V][-Mpath]" + EOL + "           [-Ppager][-Slist][-msystem][-pstring]"+ EOL+ "           [-Llocale][-eextension][section]page ..."+ EOL+ " -7,--ascii                display ASCII translation or"+ EOL+ "                           certain latin1 chars."+ EOL+ " -a,--all                  find all matching manual pages."+ EOL+ " -c,--catman               used by catman to reformat out of"+ EOL+ "                           date cat pages."+ EOL+ " -d,--debug                emit debugging messages."+ EOL+ " -D,--default              reset all options to their"+ EOL+ "                           default values."+ EOL+ " -e,--extension            limit search to extension type"+ EOL+ "                           'extension'."+ EOL+ " -f,--whatis               equivalent to whatis."+ EOL+ " -h,--help                 show this usage message."+ EOL+ " -k,--apropos              equivalent to apropos."+ EOL+ " -l,--local-file           interpret 'page' argument(s)as"+ EOL+ "                           local filename(s)"+ EOL+ " -L,--locale <arg>         define the locale for this"+ EOL+ "                           particular man search."+ EOL+ " -M,--manpath <arg>        set search path for manual pages"+ EOL+ "                           to 'path'."+ EOL+ " -m,--systems <arg>        search for man pages from other"+ EOL+ "                           unix system(s)."+ EOL+ " -P,--pager <arg>          use program 'pager' to display"+ EOL+ "                           output."+ EOL+ " -p,--preprocessor <arg>   string indicates which"+ EOL+ "                           preprocessor to run."+ EOL+ "                           e - [n]eqn  p - pic     t - tbl"+ EOL+ "                           g - grap    r - refer   v -"+ EOL+ "                           vgrind"+ EOL+ " -r,--prompt <arg>         provide 'less' pager with prompt."+ EOL+ " -S,--sections <arg>       use colon separated section list."+ EOL+ " -t,--troff                use troff format pages."+ EOL+ " -T,--troff-device <arg>   use groff with selected device."+ EOL+ " -u,--update               force a cache consistency check."+ EOL+ " -V,--version              show version."+ EOL+ " -w,--location             print physical location of man"+ EOL+ "                           page(s)."+ EOL+ " -Z,--ditroff              use groff with selected device."+ EOL,out.toString());}
/** * Real world test with long and short options.*/@Test public void testNLT()throws Exception {final Option help=new Option("h","help",false,"print this message");final Option version=new Option("v","version",false,"print version information");final Option newRun=new Option("n","new",false,"Create NLT cache entries only for new items");final Option trackerRun=new Option("t","tracker",false,"Create NLT cache entries only for tracker items");final Option timeLimit=OptionBuilder.withLongOpt("limit").hasArg().withValueSeparator().withDescription("Set time limit for execution,in minutes").create("l");final Option age=OptionBuilder.withLongOpt("age").hasArg().withValueSeparator().withDescription("Age (in days)of cache item before being recomputed").create("a");final Option server=OptionBuilder.withLongOpt("server").hasArg().withValueSeparator().withDescription("The NLT server address").create("s");final Option numResults=OptionBuilder.withLongOpt("results").hasArg().withValueSeparator().withDescription("Number of results per item").create("r");final Option configFile=OptionBuilder.withLongOpt("file").hasArg().withValueSeparator().withDescription("Use the specified configuration file").create();final Options options=new Options();options.addOption(help);options.addOption(version);options.addOption(newRun);options.addOption(trackerRun);options.addOption(timeLimit);options.addOption(age);options.addOption(server);options.addOption(numResults);options.addOption(configFile);final CommandLineParser parser=new PosixParser();final String[]args=new String[]{"-v","-l","10","-age","5","-file","filename"};final CommandLine line=parser.parse(options,args);assertTrue(line.hasOption("v"));assertEquals(line.getOptionValue("l"),"10");assertEquals(line.getOptionValue("limit"),"10");assertEquals(line.getOptionValue("a"),"5");assertEquals(line.getOptionValue("age"),"5");assertEquals(line.getOptionValue("file"),"filename");}
@Test public void testDisablePartialMatching()throws Exception {CommandLineParser parser=new DefaultParser(false);final Options options=new Options();options.addOption(new Option("d","debug",false,"Turn on debug."));options.addOption(new Option("e","extract",false,"Turn on extract."));options.addOption(new Option("o","option",true,"Turn on option with argument."));CommandLine line=parser.parse(options,new String[]{"-de","--option=foobar"});assertTrue("There should be an option debug in any case...",line.hasOption("debug"));assertTrue("There should be an extract option because partial matching is off",line.hasOption("extract"));assertTrue("There should be an option option with a argument value",line.hasOption("option"));}
@Test public void testRegularPartialMatching()throws Exception {CommandLineParser parser=new DefaultParser();final Options options=new Options();options.addOption(new Option("d","debug",false,"Turn on debug."));options.addOption(new Option("e","extract",false,"Turn on extract."));options.addOption(new Option("o","option",true,"Turn on option with argument."));CommandLine line=parser.parse(options,new String[]{"-de","--option=foobar"});assertTrue("There should be an option debug in any case...",line.hasOption("debug"));assertFalse("There should not be an extract option because partial matching only selects debug",line.hasOption("extract"));assertTrue("There should be an option option with a argument value",line.hasOption("option"));}
@Test public void testShortNoArg(){assertTrue(_cl.hasOption("a"));assertNull(_cl.getOptionValue("a"));}
@Test public void testShortNoArgWithOption(){assertTrue(_cl.hasOption(opts.getOption("a")));assertNull(_cl.getOptionValue(opts.getOption("a")));}
@Test public void testShortWithArg(){assertTrue(_cl.hasOption("b"));assertNotNull(_cl.getOptionValue("b"));assertEquals(_cl.getOptionValue("b"),"foo");}
@Test public void testShortWithArgWithOption(){assertTrue(_cl.hasOption(opts.getOption("b")));assertNotNull(_cl.getOptionValue(opts.getOption("b")));assertEquals(_cl.getOptionValue(opts.getOption("b")),"foo");}
@Test public void testLongNoArg(){assertTrue(_cl.hasOption("c"));assertNull(_cl.getOptionValue("c"));}
@Test public void testLongNoArgWithOption(){assertTrue(_cl.hasOption(opts.getOption("c")));assertNull(_cl.getOptionValue(opts.getOption("c")));}
@Test public void testLongWithArg(){assertTrue(_cl.hasOption("d"));assertNotNull(_cl.getOptionValue("d"));assertEquals(_cl.getOptionValue("d"),"bar");}
@Test public void testLongWithArgWithOption(){assertTrue(_cl.hasOption(opts.getOption("d")));assertNotNull(_cl.getOptionValue(opts.getOption("d")));assertEquals(_cl.getOptionValue(opts.getOption("d")),"bar");}
@Test public void testShortOptionalArgNoValue()throws Exception {final String[]args=new String[]{"-e"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("e"));assertNull(cmd.getOptionValue("e"));}
@Test public void testShortOptionalArgNoValueWithOption()throws Exception {final String[]args=new String[]{"-e"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("e")));assertNull(cmd.getOptionValue(opts.getOption("e")));}
@Test public void testShortOptionalArgValue()throws Exception {final String[]args=new String[]{"-e","everything"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("e"));assertEquals("everything",cmd.getOptionValue("e"));}
@Test public void testShortOptionalArgValueWithOption()throws Exception {final String[]args=new String[]{"-e","everything"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("e")));assertEquals("everything",cmd.getOptionValue(opts.getOption("e")));}
@Test public void testLongOptionalNoValue()throws Exception {final String[]args=new String[]{"--fish"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("fish"));assertNull(cmd.getOptionValue("fish"));}
@Test public void testLongOptionalNoValueWithOption()throws Exception {final String[]args=new String[]{"--fish"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("fish")));assertNull(cmd.getOptionValue(opts.getOption("fish")));}
@Test public void testLongOptionalArgValue()throws Exception {final String[]args=new String[]{"--fish","face"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("fish"));assertEquals("face",cmd.getOptionValue("fish"));}
@Test public void testLongOptionalArgValueWithOption()throws Exception {final String[]args=new String[]{"--fish","face"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("fish")));assertEquals("face",cmd.getOptionValue(opts.getOption("fish")));}
@Test public void testShortOptionalArgValues()throws Exception {final String[]args=new String[]{"-j","ink","idea"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("j"));assertEquals("ink",cmd.getOptionValue("j"));assertEquals("ink",cmd.getOptionValues("j")[0]);assertEquals("idea",cmd.getOptionValues("j")[1]);assertEquals(cmd.getArgs().length,0);}
@Test public void testShortOptionalArgValuesWithOption()throws Exception {final String[]args=new String[]{"-j","ink","idea"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("j")));assertEquals("ink",cmd.getOptionValue(opts.getOption("j")));assertEquals("ink",cmd.getOptionValues(opts.getOption("j"))[0]);assertEquals("idea",cmd.getOptionValues(opts.getOption("j"))[1]);assertEquals(cmd.getArgs().length,0);}
@Test public void testLongOptionalArgValues()throws Exception {final String[]args=new String[]{"--gravy","gold","garden"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("gravy"));assertEquals("gold",cmd.getOptionValue("gravy"));assertEquals("gold",cmd.getOptionValues("gravy")[0]);assertEquals("garden",cmd.getOptionValues("gravy")[1]);assertEquals(cmd.getArgs().length,0);}
@Test public void testLongOptionalArgValuesWithOption()throws Exception {final String[]args=new String[]{"--gravy","gold","garden"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("gravy")));assertEquals("gold",cmd.getOptionValue(opts.getOption("gravy")));assertEquals("gold",cmd.getOptionValues(opts.getOption("gravy"))[0]);assertEquals("garden",cmd.getOptionValues(opts.getOption("gravy"))[1]);assertEquals(cmd.getArgs().length,0);}
@Test public void testShortOptionalNArgValues()throws Exception {final String[]args=new String[]{"-i","ink","idea","isotope","ice"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertEquals("ink",cmd.getOptionValues("i")[0]);assertEquals("idea",cmd.getOptionValues("i")[1]);assertEquals(cmd.getArgs().length,2);assertEquals("isotope",cmd.getArgs()[0]);assertEquals("ice",cmd.getArgs()[1]);}
@Test public void testShortOptionalNArgValuesWithOption()throws Exception {final String[]args=new String[]{"-i","ink","idea","isotope","ice"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue(opts.getOption("i")));assertEquals("ink",cmd.getOptionValues(opts.getOption("i"))[0]);assertEquals("idea",cmd.getOptionValues(opts.getOption("i"))[1]);assertEquals(cmd.getArgs().length,2);assertEquals("isotope",cmd.getArgs()[0]);assertEquals("ice",cmd.getArgs()[1]);}
@Test public void testLongOptionalNArgValues()throws Exception {final String[]args=new String[]{"--hide","house","hair","head"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("hide"));assertEquals("house",cmd.getOptionValue("hide"));assertEquals("house",cmd.getOptionValues("hide")[0]);assertEquals("hair",cmd.getOptionValues("hide")[1]);assertEquals(cmd.getArgs().length,1);assertEquals("head",cmd.getArgs()[0]);}
@Test public void testLongOptionalNArgValuesWithOption()throws Exception {final String[]args=new String[]{"--hide","house","hair","head"};final Parser parser=new PosixParser();final CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption(opts.getOption("hide")));assertEquals("house",cmd.getOptionValue(opts.getOption("hide")));assertEquals("house",cmd.getOptionValues(opts.getOption("hide"))[0]);assertEquals("hair",cmd.getOptionValues(opts.getOption("hide"))[1]);assertEquals(cmd.getArgs().length,1);assertEquals("head",cmd.getArgs()[0]);}
@Test public void testOrder()throws ParseException {final Option optionA=new Option("a","first");final Options opts=new Options();opts.addOption(optionA);final PosixParser posixParser=new PosixParser();final CommandLine line=posixParser.parse(opts,null);assertFalse(line.hasOption((String)null));}
@Test public void testWorkaround1()throws Exception {final CommandLineParser parser=new PosixParser();final String[]args=new String[]{"-t-something"};final CommandLine commandLine=parser.parse(options,args);assertEquals("-something",commandLine.getOptionValue('t'));}
@Test public void testWorkaround2()throws Exception {final CommandLineParser parser=new PosixParser();final String[]args=new String[]{"-t","\"-something\""};final CommandLine commandLine=parser.parse(options,args);assertEquals("-something",commandLine.getOptionValue('t'));}
@Test public void testBasic()throws Exception {final String[]args=new String[]{"-a","Caesar","-k","A"};final CommandLine line=parser.parse(options,args);assertEquals("Caesar",line.getOptionValue("a"));assertEquals("A",line.getOptionValue("k"));}
@Test public void testMistakenArgument()throws Exception {String[]args=new String[]{"-a","Caesar","-k","A"};CommandLine line=parser.parse(options,args);args=new String[]{"-a","Caesar","-k","a"};line=parser.parse(options,args);assertEquals("Caesar",line.getOptionValue("a"));assertEquals("a",line.getOptionValue("k"));}
@Test public void testLackOfError()throws Exception {final String[]args=new String[]{"-k","-a","Caesar"};try {parser.parse(options,args);fail("MissingArgumentException expected");}catch(final MissingArgumentException e){assertEquals("option missing an argument","k",e.getOption().getOpt());}}
@Test public void testGetsDefaultIfOptional()throws Exception {final String[]args=new String[]{"-k","-a","Caesar"};options.getOption("k").setOptionalArg(true);final CommandLine line=parser.parse(options,args);assertEquals("Caesar",line.getOptionValue("a"));assertEquals("a",line.getOptionValue('k',"a"));}
@Test public void testShortArgs(){assertTrue("Option a is not set",cmd.hasOption("a"));assertTrue("Option c is not set",cmd.hasOption("c"));assertNull(cmd.getOptionValues("a"));assertNull(cmd.getOptionValues("c"));}
@Test public void testShortArgsWithValue(){assertTrue("Option b is not set",cmd.hasOption("b"));assertTrue(cmd.getOptionValue("b").equals("foo"));assertEquals(1,cmd.getOptionValues("b").length);assertTrue("Option d is not set",cmd.hasOption("d"));assertTrue(cmd.getOptionValue("d").equals("bar"));assertEquals(1,cmd.getOptionValues("d").length);}
@Test public void testMultipleArgValues(){assertTrue("Option e is not set",cmd.hasOption("e"));assertArrayEquals(new String[]{"one","two"},cmd.getOptionValues("e"));}
@Test public void testTwoArgValues(){assertTrue("Option g is not set",cmd.hasOption("g"));assertArrayEquals(new String[]{"val1","val2"},cmd.getOptionValues("g"));}
@Test public void testComplexValues(){assertTrue("Option i is not set",cmd.hasOption("i"));assertTrue("Option h is not set",cmd.hasOption("h"));assertArrayEquals(new String[]{"val1","val2"},cmd.getOptionValues("h"));}
@Test public void testExtraArgs(){assertArrayEquals("Extra args",new String[]{"arg1","arg2","arg3"},cmd.getArgs());}
@Test public void testCharSeparator(){assertTrue("Option j is not set",cmd.hasOption("j"));assertTrue("Option j is not set",cmd.hasOption('j'));assertArrayEquals(new String[]{"key","value","key","value"},cmd.getOptionValues("j"));assertArrayEquals(new String[]{"key","value","key","value"},cmd.getOptionValues('j'));assertTrue("Option k is not set",cmd.hasOption("k"));assertTrue("Option k is not set",cmd.hasOption('k'));assertArrayEquals(new String[]{"key1","value1","key2","value2"},cmd.getOptionValues("k"));assertArrayEquals(new String[]{"key1","value1","key2","value2"},cmd.getOptionValues('k'));assertTrue("Option m is not set",cmd.hasOption("m"));assertTrue("Option m is not set",cmd.hasOption('m'));assertArrayEquals(new String[]{"key","value"},cmd.getOptionValues("m"));assertArrayEquals(new String[]{"key","value"},cmd.getOptionValues('m'));}
@Test public void shouldParseShortOptionWithValue()throws Exception {final String[]shortOptionWithValue=new String[]{"-t1","path/to/my/db"};final CommandLine commandLine=parser.parse(options,shortOptionWithValue);assertEquals("path/to/my/db",commandLine.getOptionValue("t1"));assertFalse(commandLine.hasOption("last"));}
@Test public void shouldParseShortOptionWithoutValue()throws Exception {final String[]twoShortOptions=new String[]{"-t1","-last"};final CommandLine commandLine=parser.parse(options,twoShortOptions);assertTrue(commandLine.hasOption("t1"));assertNotEquals("Second option has been used as value for first option","-last",commandLine.getOptionValue("t1"));assertTrue("Second option has not been detected",commandLine.hasOption("last"));}
@Test public void shouldParseConcatenatedShortOptions()throws Exception {final String[]concatenatedShortOptions=new String[]{"-t1","-ab"};final CommandLine commandLine=parser.parse(options,concatenatedShortOptions);assertTrue(commandLine.hasOption("t1"));assertNull(commandLine.getOptionValue("t1"));assertTrue(commandLine.hasOption("a"));assertTrue(commandLine.hasOption("b"));assertFalse(commandLine.hasOption("last"));}
@Test public void testFindWrapPos()throws Exception {final HelpFormatter hf=new HelpFormatter();String text="This is a test.";assertEquals("wrap position",7,hf.findWrapPos(text,8,0));assertEquals("wrap position 2",-1,hf.findWrapPos(text,8,8));text="aaaa aa";assertEquals("wrap position 3",3,hf.findWrapPos(text,3,0));text="aaaaaa aaaaaa";assertEquals("wrap position 4",6,hf.findWrapPos(text,6,0));assertEquals("wrap position 4",-1,hf.findWrapPos(text,6,7));text="aaaaaa\n aaaaaa";assertEquals("wrap position 5",7,hf.findWrapPos(text,6,0));text="aaaaaa\t aaaaaa";assertEquals("wrap position 6",7,hf.findWrapPos(text,6,0));}
@Test public void testRenderWrappedTextWordCut(){final int width=7;final int padding=0;final String text="Thisisatest.";final String expected="Thisisa" + EOL + "test.";final StringBuffer sb=new StringBuffer();new HelpFormatter().renderWrappedText(sb,width,padding,text);assertEquals("cut and wrap",expected,sb.toString());}
@Test public void testRenderWrappedTextSingleLine(){final int width=12;final int padding=0;final String text="This is a test.";final String expected="This is a" + EOL + "test.";final StringBuffer sb=new StringBuffer();new HelpFormatter().renderWrappedText(sb,width,padding,text);assertEquals("single line text",expected,sb.toString());}
@Test public void testRenderWrappedTextSingleLinePadded(){final int width=12;final int padding=4;final String text="This is a test.";final String expected="This is a" + EOL + "    test.";final StringBuffer sb=new StringBuffer();new HelpFormatter().renderWrappedText(sb,width,padding,text);assertEquals("single line padded text",expected,sb.toString());}
@Test public void testRenderWrappedTextSingleLinePadded2(){final int width=53;final int padding=24;final String text="  -p,--period <PERIOD>  PERIOD is time duration of form " + "DATE[-DATE]where DATE has form YYYY[MM[DD]]";final String expected="  -p,--period <PERIOD>  PERIOD is time duration of" + EOL + "                        form DATE[-DATE]where DATE"+ EOL+ "                        has form YYYY[MM[DD]]";final StringBuffer sb=new StringBuffer();new HelpFormatter().renderWrappedText(sb,width,padding,text);assertEquals("single line padded text 2",expected,sb.toString());}
@Test public void testRenderWrappedTextMultiLine(){final int width=16;final int padding=0;final String expected="aaaa aaaa aaaa" + EOL + "aaaaaa"+ EOL+ "aaaaa";final StringBuffer sb=new StringBuffer();new HelpFormatter().renderWrappedText(sb,width,padding,expected);assertEquals("multi line text",expected,sb.toString());}
@Test public void testRenderWrappedTextMultiLinePadded(){final int width=16;final int padding=4;final String text="aaaa aaaa aaaa" + EOL + "aaaaaa"+ EOL+ "aaaaa";final String expected="aaaa aaaa aaaa" + EOL + "    aaaaaa"+ EOL+ "    aaaaa";final StringBuffer sb=new StringBuffer();new HelpFormatter().renderWrappedText(sb,width,padding,text);assertEquals("multi-line padded text",expected,sb.toString());}
@Test public void testPrintOptions()throws Exception {final StringBuffer sb=new StringBuffer();final HelpFormatter hf=new HelpFormatter();final int leftPad=1;final int descPad=3;final String lpad=hf.createPadding(leftPad);final String dpad=hf.createPadding(descPad);Options options=null;String expected=null;options=new Options().addOption("a",false,"aaaa aaaa aaaa aaaa aaaa");expected=lpad + "-a" + dpad+ "aaaa aaaa aaaa aaaa aaaa";hf.renderOptions(sb,60,options,leftPad,descPad);assertEquals("simple non-wrapped option",expected,sb.toString());int nextLineTabStop=leftPad + descPad + "-a".length();expected=lpad + "-a" + dpad+ "aaaa aaaa aaaa"+ EOL+ hf.createPadding(nextLineTabStop)+ "aaaa aaaa";sb.setLength(0);hf.renderOptions(sb,nextLineTabStop + 17,options,leftPad,descPad);assertEquals("simple wrapped option",expected,sb.toString());options=new Options().addOption("a","aaa",false,"dddd dddd dddd dddd");expected=lpad + "-a,--aaa" + dpad+ "dddd dddd dddd dddd";sb.setLength(0);hf.renderOptions(sb,60,options,leftPad,descPad);assertEquals("long non-wrapped option",expected,sb.toString());nextLineTabStop=leftPad + descPad + "-a,--aaa".length();expected=lpad + "-a,--aaa" + dpad+ "dddd dddd"+ EOL+ hf.createPadding(nextLineTabStop)+ "dddd dddd";sb.setLength(0);hf.renderOptions(sb,25,options,leftPad,descPad);assertEquals("long wrapped option",expected,sb.toString());options=new Options().addOption("a","aaa",false,"dddd dddd dddd dddd").addOption("b",false,"feeee eeee eeee eeee");expected=lpad + "-a,--aaa" + dpad+ "dddd dddd"+ EOL+ hf.createPadding(nextLineTabStop)+ "dddd dddd"+ EOL+ lpad+ "-b      "+ dpad+ "feeee eeee"+ EOL+ hf.createPadding(nextLineTabStop)+ "eeee eeee";sb.setLength(0);hf.renderOptions(sb,25,options,leftPad,descPad);assertEquals("multiple wrapped options",expected,sb.toString());}
@Test public void testPrintHelpWithEmptySyntax(){final HelpFormatter formatter=new HelpFormatter();try {formatter.printHelp(null,new Options());fail("null command line syntax should be rejected");}catch(final IllegalArgumentException e){}try {formatter.printHelp("",new Options());fail("empty command line syntax should be rejected");}catch(final IllegalArgumentException e){}}
@Test public void testAutomaticUsage()throws Exception {final HelpFormatter hf=new HelpFormatter();Options options=null;String expected="usage: app [-a]";final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintWriter pw=new PrintWriter(out);options=new Options().addOption("a",false,"aaaa aaaa aaaa aaaa aaaa");hf.printUsage(pw,60,"app",options);pw.flush();assertEquals("simple auto usage",expected,out.toString().trim());out.reset();expected="usage: app [-a][-b]";options=new Options().addOption("a",false,"aaaa aaaa aaaa aaaa aaaa").addOption("b",false,"bbb");hf.printUsage(pw,60,"app",options);pw.flush();assertEquals("simple auto usage",expected,out.toString().trim());out.reset();}
@Test public void testPrintUsage(){final Option optionA=new Option("a","first");final Option optionB=new Option("b","second");final Option optionC=new Option("c","third");final Options opts=new Options();opts.addOption(optionA);opts.addOption(optionB);opts.addOption(optionC);final HelpFormatter helpFormatter=new HelpFormatter();final ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();final PrintWriter printWriter=new PrintWriter(bytesOut);helpFormatter.printUsage(printWriter,80,"app",opts);printWriter.close();assertEquals("usage: app [-a][-b][-c]" + EOL,bytesOut.toString());}
@Test public void testPrintSortedUsage(){final Options opts=new Options();opts.addOption(new Option("a","first"));opts.addOption(new Option("b","second"));opts.addOption(new Option("c","third"));final HelpFormatter helpFormatter=new HelpFormatter();helpFormatter.setOptionComparator(new Comparator<Option>(){public int compare(final Option opt1,final Option opt2){return opt2.getKey().compareToIgnoreCase(opt1.getKey());}});final StringWriter out=new StringWriter();helpFormatter.printUsage(new PrintWriter(out),80,"app",opts);assertEquals("usage: app [-c][-b][-a]" + EOL,out.toString());}
@Test public void testPrintSortedUsageWithNullComparator(){final Options opts=new Options();opts.addOption(new Option("c","first"));opts.addOption(new Option("b","second"));opts.addOption(new Option("a","third"));final HelpFormatter helpFormatter=new HelpFormatter();helpFormatter.setOptionComparator(null);final StringWriter out=new StringWriter();helpFormatter.printUsage(new PrintWriter(out),80,"app",opts);assertEquals("usage: app [-c][-b][-a]" + EOL,out.toString());}
@Test public void testPrintOptionGroupUsage(){final OptionGroup group=new OptionGroup();group.addOption(Option.builder("a").build());group.addOption(Option.builder("b").build());group.addOption(Option.builder("c").build());final Options options=new Options();options.addOptionGroup(group);final StringWriter out=new StringWriter();final HelpFormatter formatter=new HelpFormatter();formatter.printUsage(new PrintWriter(out),80,"app",options);assertEquals("usage: app [-a | -b | -c]" + EOL,out.toString());}
@Test public void testPrintRequiredOptionGroupUsage(){final OptionGroup group=new OptionGroup();group.addOption(Option.builder("a").build());group.addOption(Option.builder("b").build());group.addOption(Option.builder("c").build());group.setRequired(true);final Options options=new Options();options.addOptionGroup(group);final StringWriter out=new StringWriter();final HelpFormatter formatter=new HelpFormatter();formatter.printUsage(new PrintWriter(out),80,"app",options);assertEquals("usage: app -a | -b | -c" + EOL,out.toString());}
@Test public void testPrintOptionWithEmptyArgNameUsage(){final Option option=new Option("f",true,null);option.setArgName("");option.setRequired(true);final Options options=new Options();options.addOption(option);final StringWriter out=new StringWriter();final HelpFormatter formatter=new HelpFormatter();formatter.printUsage(new PrintWriter(out),80,"app",options);assertEquals("usage: app -f" + EOL,out.toString());}
@Test public void testDefaultArgName(){final Option option=Option.builder("f").hasArg().required(true).build();final Options options=new Options();options.addOption(option);final StringWriter out=new StringWriter();final HelpFormatter formatter=new HelpFormatter();formatter.setArgName("argument");formatter.printUsage(new PrintWriter(out),80,"app",options);assertEquals("usage: app -f <argument>" + EOL,out.toString());}
@Test public void testRtrim(){final HelpFormatter formatter=new HelpFormatter();assertEquals(null,formatter.rtrim(null));assertEquals("",formatter.rtrim(""));assertEquals("  foo",formatter.rtrim("  foo  "));}
@Test public void testAccessors(){final HelpFormatter formatter=new HelpFormatter();formatter.setArgName("argname");assertEquals("arg name","argname",formatter.getArgName());formatter.setDescPadding(3);assertEquals("desc padding",3,formatter.getDescPadding());formatter.setLeftPadding(7);assertEquals("left padding",7,formatter.getLeftPadding());formatter.setLongOptPrefix("~~");assertEquals("long opt prefix","~~",formatter.getLongOptPrefix());formatter.setNewLine("\n");assertEquals("new line","\n",formatter.getNewLine());formatter.setOptPrefix("~");assertEquals("opt prefix","~",formatter.getOptPrefix());formatter.setSyntaxPrefix("-> ");assertEquals("syntax prefix","-> ",formatter.getSyntaxPrefix());formatter.setWidth(80);assertEquals("width",80,formatter.getWidth());}
@Test public void testHeaderStartingWithLineSeparator(){final Options options=new Options();final HelpFormatter formatter=new HelpFormatter();final String header=EOL + "Header";final String footer="Footer";final StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"foobar",header,options,2,2,footer,true);assertEquals("usage: foobar" + EOL + ""+ EOL+ "Header"+ EOL+ ""+ EOL+ "Footer"+ EOL,out.toString());}
@Test public void testIndentedHeaderAndFooter(){final Options options=new Options();final HelpFormatter formatter=new HelpFormatter();final String header="  Header1\n  Header2";final String footer="  Footer1\n  Footer2";final StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"foobar",header,options,2,2,footer,true);assertEquals("usage: foobar" + EOL + "  Header1"+ EOL+ "  Header2"+ EOL+ ""+ EOL+ "  Footer1"+ EOL+ "  Footer2"+ EOL,out.toString());}
@Test public void testOptionWithoutShortFormat(){final Options options=new Options();options.addOption(new Option("a","aaa",false,"aaaaaaa"));options.addOption(new Option(null,"bbb",false,"bbbbbbb"));options.addOption(new Option("c",null,false,"ccccccc"));final HelpFormatter formatter=new HelpFormatter();final StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"foobar","",options,2,2,"",true);assertEquals("usage: foobar [-a][--bbb][-c]" + EOL + "  -a,--aaa  aaaaaaa"+ EOL+ "     --bbb  bbbbbbb"+ EOL+ "  -c        ccccccc"+ EOL,out.toString());}
@Test public void testOptionWithoutShortFormat2(){final Option help=new Option("h","help",false,"print this message");final Option version=new Option("v","version",false,"print version information");final Option newRun=new Option("n","new",false,"Create NLT cache entries only for new items");final Option trackerRun=new Option("t","tracker",false,"Create NLT cache entries only for tracker items");final Option timeLimit=Option.builder("l").longOpt("limit").hasArg().valueSeparator().desc("Set time limit for execution,in mintues").build();final Option age=Option.builder("a").longOpt("age").hasArg().valueSeparator().desc("Age (in days)of cache item before being recomputed").build();final Option server=Option.builder("s").longOpt("server").hasArg().valueSeparator().desc("The NLT server address").build();final Option numResults=Option.builder("r").longOpt("results").hasArg().valueSeparator().desc("Number of results per item").build();final Option configFile=Option.builder().longOpt("config").hasArg().valueSeparator().desc("Use the specified configuration file").build();final Options mOptions=new Options();mOptions.addOption(help);mOptions.addOption(version);mOptions.addOption(newRun);mOptions.addOption(trackerRun);mOptions.addOption(timeLimit);mOptions.addOption(age);mOptions.addOption(server);mOptions.addOption(numResults);mOptions.addOption(configFile);final HelpFormatter formatter=new HelpFormatter();final String EOL=System.getProperty("line.separator");final StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"commandline","header",mOptions,2,2,"footer",true);assertEquals("usage: commandline [-a <arg>][--config <arg>][-h][-l <arg>][-n][-r <arg>]" + EOL + "       [-s <arg>][-t][-v]"+ EOL+ "header"+ EOL+ "  -a,--age <arg>      Age (in days)of cache item before being recomputed"+ EOL+ "     --config <arg>   Use the specified configuration file"+ EOL+ "  -h,--help           print this message"+ EOL+ "  -l,--limit <arg>    Set time limit for execution,in mintues"+ EOL+ "  -n,--new            Create NLT cache entries only for new items"+ EOL+ "  -r,--results <arg>  Number of results per item"+ EOL+ "  -s,--server <arg>   The NLT server address"+ EOL+ "  -t,--tracker        Create NLT cache entries only for tracker items"+ EOL+ "  -v,--version        print version information"+ EOL+ "footer"+ EOL,out.toString());}
@Test public void testHelpWithLongOptSeparator()throws Exception {final Options options=new Options();options.addOption("f",true,"the file");options.addOption(Option.builder("s").longOpt("size").desc("the size").hasArg().argName("SIZE").build());options.addOption(Option.builder().longOpt("age").desc("the age").hasArg().build());final HelpFormatter formatter=new HelpFormatter();assertEquals(HelpFormatter.DEFAULT_LONG_OPT_SEPARATOR,formatter.getLongOptSeparator());formatter.setLongOptSeparator("=");assertEquals("=",formatter.getLongOptSeparator());final StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"create","header",options,2,2,"footer");assertEquals("usage: create" + EOL + "header"+ EOL+ "     --age=<arg>    the age"+ EOL+ "  -f <arg>          the file"+ EOL+ "  -s,--size=<SIZE>  the size"+ EOL+ "footer"+ EOL,out.toString());}
@Test public void testUsageWithLongOptSeparator()throws Exception {final Options options=new Options();options.addOption("f",true,"the file");options.addOption(Option.builder("s").longOpt("size").desc("the size").hasArg().argName("SIZE").build());options.addOption(Option.builder().longOpt("age").desc("the age").hasArg().build());final HelpFormatter formatter=new HelpFormatter();formatter.setLongOptSeparator("=");final StringWriter out=new StringWriter();formatter.printUsage(new PrintWriter(out),80,"create",options);assertEquals("usage: create [--age=<arg>][-f <arg>][-s <SIZE>]",out.toString().trim());}
@Test public void testSimpleShort()throws Exception {final String[]args=new String[]{"-a","-b","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testSimpleLong()throws Exception {final String[]args=new String[]{"--enable-a","--bfile","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm arg of --bfile",cl.getOptionValue("bfile").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testMultiple()throws Exception {final String[]args=new String[]{"-c","foobar","-b","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testMultipleWithLong()throws Exception {final String[]args=new String[]{"--copt","foobar","--bfile","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testUnrecognizedOption()throws Exception {final String[]args=new String[]{"-a","-d","-b","toast","foo","bar"};try {parser.parse(options,args);fail("UnrecognizedOptionException wasn't thrown");}catch(final UnrecognizedOptionException e){assertEquals("-d",e.getOption());}}
@Test public void testMissingArg()throws Exception {final String[]args=new String[]{"-b"};boolean caught=false;try {parser.parse(options,args);}catch(final MissingArgumentException e){caught=true;assertEquals("option missing an argument","b",e.getOption().getOpt());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testDoubleDash1()throws Exception {final String[]args=new String[]{"--copt","--","-b","toast"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm -b is not set",!cl.hasOption("b"));assertTrue("Confirm 2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}
@Test public void testDoubleDash2()throws Exception {final Options options=new Options();options.addOption(OptionBuilder.hasArg().create('n'));options.addOption(OptionBuilder.create('m'));try {parser.parse(options,new String[]{"-n","--","-m"});fail("MissingArgumentException not thrown for option -n");}catch(final MissingArgumentException e){assertNotNull("option null",e.getOption());assertEquals("n",e.getOption().getOpt());}}
@Test public void testSingleDash()throws Exception {final String[]args=new String[]{"--copt","-b","-","-a","-"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("-"));assertTrue("Confirm 1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("-"));}
@Test public void testStopAtUnexpectedArg()throws Exception {final String[]args=new String[]{"-c","foober","-b","toast"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtExpectedArg()throws Exception {final String[]args=new String[]{"-b","foo"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -b is set",cl.hasOption('b'));assertEquals("Confirm -b is set","foo",cl.getOptionValue('b'));assertTrue("Confirm no extra args: " + cl.getArgList().size(),cl.getArgList().size()== 0);}
@Test public void testStopAtNonOptionShort()throws Exception {final String[]args=new String[]{"-z","-a","-btoast"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtNonOptionLong()throws Exception {final String[]args=new String[]{"--zop==1","-abtoast","--b=bar"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertFalse("Confirm -b is not set",cl.hasOption("b"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testNegativeArgument()throws Exception {final String[]args=new String[]{"-b","-1"};final CommandLine cl=parser.parse(options,args);assertEquals("-1",cl.getOptionValue("b"));}
@Test public void testNegativeOption()throws Exception {final String[]args=new String[]{"-b","-1"};options.addOption("1",false,null);final CommandLine cl=parser.parse(options,args);assertEquals("-1",cl.getOptionValue("b"));}
@Test public void testArgumentStartingWithHyphen()throws Exception {final String[]args=new String[]{"-b","-foo"};final CommandLine cl=parser.parse(options,args);assertEquals("-foo",cl.getOptionValue("b"));}
@Test public void testShortWithEqual()throws Exception {final String[]args=new String[]{"-f=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testShortWithoutEqual()throws Exception {final String[]args=new String[]{"-fbar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithEqualSingleDash()throws Exception {final String[]args=new String[]{"-foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithoutEqualSingleDash()throws Exception {final String[]args=new String[]{"-foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {final String[]args=new String[]{"-b","-foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasOptionalArg().create('f'));options.addOption(OptionBuilder.withLongOpt("bar").hasOptionalArg().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue(cl.hasOption("b"));assertTrue(cl.hasOption("f"));assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithoutEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption("foo"));}
@Test public void testLongWithUnexpectedArgument1()throws Exception {final String[]args=new String[]{"--foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("--foo=bar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testLongWithUnexpectedArgument2()throws Exception {final String[]args=new String[]{"-foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("-foobar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testShortWithUnexpectedArgument()throws Exception {final String[]args=new String[]{"-f=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").create('f'));try {parser.parse(options,args);}catch(final UnrecognizedOptionException e){assertEquals("-f=bar",e.getOption());return;}fail("UnrecognizedOptionException not thrown");}
@Test public void testPropertiesOption1()throws Exception {final String[]args=new String[]{"-Jsource=1.5","-J","target","1.5","foo"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));final CommandLine cl=parser.parse(options,args);final List<String> values=Arrays.asList(cl.getOptionValues("J"));assertNotNull("null values",values);assertEquals("number of values",4,values.size());assertEquals("value 1","source",values.get(0));assertEquals("value 2","1.5",values.get(1));assertEquals("value 3","target",values.get(2));assertEquals("value 4","1.5",values.get(3));final List<?> argsleft=cl.getArgList();assertEquals("Should be 1 arg left",1,argsleft.size());assertEquals("Expecting foo","foo",argsleft.get(0));}
@Test public void testPropertiesOption2()throws Exception {final String[]args=new String[]{"-Dparam1","-Dparam2=value2","-D"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));final CommandLine cl=parser.parse(options,args);final Properties props=cl.getOptionProperties("D");assertNotNull("null properties",props);assertEquals("number of properties in " + props,2,props.size());assertEquals("property 1","true",props.getProperty("param1"));assertEquals("property 2","value2",props.getProperty("param2"));final List<?> argsleft=cl.getArgList();assertEquals("Should be no arg left",0,argsleft.size());}
@Test public void testUnambiguousPartialLongOption1()throws Exception {final String[]args=new String[]{"--ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --version is set",cl.hasOption("version"));}
@Test public void testUnambiguousPartialLongOption2()throws Exception {final String[]args=new String[]{"-ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --version is set",cl.hasOption("version"));}
@Test public void testUnambiguousPartialLongOption3()throws Exception {final String[]args=new String[]{"--ver=1"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("verbose").hasOptionalArg().create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --verbose is set",cl.hasOption("verbose"));assertEquals("1",cl.getOptionValue("verbose"));}
@Test public void testUnambiguousPartialLongOption4()throws Exception {final String[]args=new String[]{"-ver=1"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("verbose").hasOptionalArg().create());options.addOption(OptionBuilder.withLongOpt("help").create());final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --verbose is set",cl.hasOption("verbose"));assertEquals("1",cl.getOptionValue("verbose"));}
@Test public void testAmbiguousPartialLongOption1()throws Exception {final String[]args=new String[]{"--ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","--ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testAmbiguousPartialLongOption2()throws Exception {final String[]args=new String[]{"-ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","-ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testAmbiguousPartialLongOption3()throws Exception {final String[]args=new String[]{"--ver=1"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").hasOptionalArg().create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","--ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testAmbiguousPartialLongOption4()throws Exception {final String[]args=new String[]{"-ver=1"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").hasOptionalArg().create());boolean caught=false;try {parser.parse(options,args);}catch(final AmbiguousOptionException e){caught=true;assertEquals("Partial option","-ver",e.getOption());assertNotNull("Matching options null",e.getMatchingOptions());assertEquals("Matching options size",2,e.getMatchingOptions().size());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testPartialLongOptionSingleDash()throws Exception {final String[]args=new String[]{"-ver"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.hasArg().create('v'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm --version is set",cl.hasOption("version"));assertTrue("Confirm -v is not set",!cl.hasOption("v"));}
@Test public void testWithRequiredOption()throws Exception {final String[]args=new String[]{"-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is NOT set",!cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testOptionAndRequiredOption()throws Exception {final String[]args=new String[]{"-a","-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testMissingRequiredOption(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required option: b",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredOptions(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt("cfile").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required options: b,c",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));assertTrue(e.getMissingOptions().contains("c"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));group.setRequired(true);final Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create("c"));try {parser.parse(options,new String[]{"-c"});fail("MissingOptionException not thrown");}catch(final MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(final ParseException e){fail("Expected to catch MissingOptionException");}}
@Test public void testOptionGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));final Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{"-b"});assertEquals("selected option","b",group.getSelected());}
@Test public void testOptionGroupLong()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt("foo").create());group.addOption(OptionBuilder.withLongOpt("bar").create());final Options options=new Options();options.addOptionGroup(group);final CommandLine cl=parser.parse(options,new String[]{"--bar"});assertTrue(cl.hasOption("bar"));assertEquals("selected option","bar",group.getSelected());}
@Test public void testReuseOptionsTwice()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{"-v"});try {parser.parse(opts,new String[0]);fail("MissingOptionException not thrown");}catch(final MissingOptionException e){}}
@Test public void testBursting()throws Exception {final String[]args=new String[]{"-acbtoast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testUnrecognizedOptionWithBursting()throws Exception {final String[]args=new String[]{"-adbtoast","foo","bar"};try {parser.parse(options,args);fail("UnrecognizedOptionException wasn't thrown");}catch(final UnrecognizedOptionException e){assertEquals("-adbtoast",e.getOption());}}
@Test public void testMissingArgWithBursting()throws Exception {final String[]args=new String[]{"-acb"};boolean caught=false;try {parser.parse(options,args);}catch(final MissingArgumentException e){caught=true;assertEquals("option missing an argument","b",e.getOption().getOpt());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testStopBursting()throws Exception {final String[]args=new String[]{"-azc"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -a is set",cl.hasOption("a"));assertFalse("Confirm -c is not set",cl.hasOption("c"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue(cl.getArgList().contains("zc"));}
@Test public void testStopBursting2()throws Exception {final String[]args=new String[]{"-c","foobar","-btoast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testUnlimitedArgs()throws Exception {final String[]args=new String[]{"-e","one","two","-f","alpha"};final Options options=new Options();options.addOption(OptionBuilder.hasArgs().create("e"));options.addOption(OptionBuilder.hasArgs().create("f"));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -e is set",cl.hasOption("e"));assertEquals("number of arg for -e",2,cl.getOptionValues("e").length);assertTrue("Confirm -f is set",cl.hasOption("f"));assertEquals("number of arg for -f",1,cl.getOptionValues("f").length);}
@Test public void testPropertyOptionSingularValue()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt("hide").create());final Properties properties=new Properties();properties.setProperty("hide","seek");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("hide"));assertEquals("seek",cmd.getOptionValue("hide"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionFlags()throws Exception {final Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("c","c",false,"toggle -c");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty("a","true");properties.setProperty("c","yes");properties.setProperty("e","1");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","false");properties.setProperty("c","no");properties.setProperty("e","0");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","TRUE");properties.setProperty("c","nO");properties.setProperty("e","TrUe");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","just a string");properties.setProperty("e","");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","0");properties.setProperty("c","1");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));}
@Test public void testPropertyOptionMultipleValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));final Properties properties=new Properties();properties.setProperty("k","one,two");final String[]values=new String[]{"one","two"};final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("k"));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}
@Test public void testPropertyOverrideValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));final String[]args=new String[]{"-j","found","-i","ink"};final Properties properties=new Properties();properties.setProperty("j","seek");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("j"));assertEquals("found",cmd.getOptionValue("j"));assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionRequired()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create("f"));final Properties properties=new Properties();properties.setProperty("f","true");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("f"));}
@Test public void testPropertyOptionUnexpected()throws Exception {final Options opts=new Options();final Properties properties=new Properties();properties.setProperty("f","true");try {parse(parser,opts,null,properties);fail("UnrecognizedOptionException expected");}catch(final UnrecognizedOptionException e){}}
@Test public void testPropertyOptionGroup()throws Exception {final Options opts=new Options();final OptionGroup group1=new OptionGroup();group1.addOption(new Option("a",null));group1.addOption(new Option("b",null));opts.addOptionGroup(group1);final OptionGroup group2=new OptionGroup();group2.addOption(new Option("x",null));group2.addOption(new Option("y",null));opts.addOptionGroup(group2);final String[]args=new String[]{"-a"};final Properties properties=new Properties();properties.put("b","true");properties.put("x","true");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("a"));assertFalse(cmd.hasOption("b"));assertTrue(cmd.hasOption("x"));assertFalse(cmd.hasOption("y"));}
@Test public void testSimple(){final Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("b",true,"toggle -b");assertTrue(opts.hasOption("a"));assertTrue(opts.hasOption("b"));}
@Test public void testDuplicateSimple(){final Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("a",true,"toggle -a*");assertEquals("last one in wins","toggle -a*",opts.getOption("a").getDescription());}
@Test public void testLong(){final Options opts=new Options();opts.addOption("a","--a",false,"toggle -a");opts.addOption("b","--b",true,"set -b");assertTrue(opts.hasOption("a"));assertTrue(opts.hasOption("b"));}
@Test public void testDuplicateLong(){final Options opts=new Options();opts.addOption("a","--a",false,"toggle -a");opts.addOption("a","--a",false,"toggle -a*");assertEquals("last one in wins","toggle -a*",opts.getOption("a").getDescription());}
@Test public void testHelpOptions(){final Option longOnly1=OptionBuilder.withLongOpt("long-only1").create();final Option longOnly2=OptionBuilder.withLongOpt("long-only2").create();final Option shortOnly1=OptionBuilder.create("1");final Option shortOnly2=OptionBuilder.create("2");final Option bothA=OptionBuilder.withLongOpt("bothA").create("a");final Option bothB=OptionBuilder.withLongOpt("bothB").create("b");final Options options=new Options();options.addOption(longOnly1);options.addOption(longOnly2);options.addOption(shortOnly1);options.addOption(shortOnly2);options.addOption(bothA);options.addOption(bothB);final Collection<Option> allOptions=new ArrayList<Option>();allOptions.add(longOnly1);allOptions.add(longOnly2);allOptions.add(shortOnly1);allOptions.add(shortOnly2);allOptions.add(bothA);allOptions.add(bothB);final Collection<Option> helpOptions=options.helpOptions();assertTrue("Everything in all should be in help",helpOptions.containsAll(allOptions));assertTrue("Everything in help should be in all",allOptions.containsAll(helpOptions));}
@Test public void testMissingOptionException()throws ParseException {final Options options=new Options();options.addOption(OptionBuilder.isRequired().create("f"));try {new PosixParser().parse(options,new String[0]);fail("Expected MissingOptionException to be thrown");}catch(final MissingOptionException e){assertEquals("Missing required option: f",e.getMessage());}}
@Test public void testMissingOptionsException()throws ParseException {final Options options=new Options();options.addOption(OptionBuilder.isRequired().create("f"));options.addOption(OptionBuilder.isRequired().create("x"));try {new PosixParser().parse(options,new String[0]);fail("Expected MissingOptionException to be thrown");}catch(final MissingOptionException e){assertEquals("Missing required options: f,x",e.getMessage());}}
@Test public void testToString(){final Options options=new Options();options.addOption("f","foo",true,"Foo");options.addOption("b","bar",false,"Bar");final String s=options.toString();assertNotNull("null string returned",s);assertTrue("foo option missing",s.toLowerCase().contains("foo"));assertTrue("bar option missing",s.toLowerCase().contains("bar"));}
@Test public void testGetOptionsGroups(){final Options options=new Options();final OptionGroup group1=new OptionGroup();group1.addOption(OptionBuilder.create('a'));group1.addOption(OptionBuilder.create('b'));final OptionGroup group2=new OptionGroup();group2.addOption(OptionBuilder.create('x'));group2.addOption(OptionBuilder.create('y'));options.addOptionGroup(group1);options.addOptionGroup(group2);assertNotNull(options.getOptionGroups());assertEquals(2,options.getOptionGroups().size());}
@Test public void testGetMatchingOpts(){final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("version").create());options.addOption(OptionBuilder.withLongOpt("verbose").create());assertTrue(options.getMatchingOptions("foo").isEmpty());assertEquals(1,options.getMatchingOptions("version").size());assertEquals(2,options.getMatchingOptions("ver").size());}
@Test public void test11457()throws Exception {final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("verbose").create());final String[]args=new String[]{"--verbose"};final CommandLineParser parser=new PosixParser();final CommandLine cmd=parser.parse(options,args);assertTrue(cmd.hasOption("verbose"));}
@Test public void test11458()throws Exception {final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));final String[]args=new String[]{"-DJAVA_HOME=/opt/java","-pfile1:file2:file3"};final CommandLineParser parser=new PosixParser();final CommandLine cmd=parser.parse(options,args);String[]values=cmd.getOptionValues('D');assertEquals(values[0],"JAVA_HOME");assertEquals(values[1],"/opt/java");values=cmd.getOptionValues('p');assertEquals(values[0],"file1");assertEquals(values[1],"file2");assertEquals(values[2],"file3");final Iterator<Option> iter=cmd.iterator();while (iter.hasNext()){final Option opt=iter.next();switch (opt.getId()){case 'D':      assertEquals(opt.getValue(0),"JAVA_HOME");assertEquals(opt.getValue(1),"/opt/java");break;case 'p':assertEquals(opt.getValue(0),"file1");assertEquals(opt.getValue(1),"file2");assertEquals(opt.getValue(2),"file3");break;default:fail("-D option not found");}}}
@Test public void test11680()throws Exception {final Options options=new Options();options.addOption("f",true,"foobar");options.addOption("m",true,"missing");final String[]args=new String[]{"-f","foo"};final CommandLineParser parser=new PosixParser();final CommandLine cmd=parser.parse(options,args);cmd.getOptionValue("f","default f");cmd.getOptionValue("m","default m");}
@Test public void test11456()throws Exception {Options options=new Options();options.addOption(OptionBuilder.hasOptionalArg().create('a'));options.addOption(OptionBuilder.hasArg().create('b'));String[]args=new String[]{"-a","-bvalue"};CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(options,args);assertEquals(cmd.getOptionValue('b'),"value");options=new Options();options.addOption(OptionBuilder.hasOptionalArg().create('a'));options.addOption(OptionBuilder.hasArg().create('b'));args=new String[]{"-a","-b","value"};parser=new GnuParser();cmd=parser.parse(options,args);assertEquals(cmd.getOptionValue('b'),"value");}
@Test public void test12210()throws Exception {final Options mainOptions=new Options();String[]argv=new String[]{"-exec","-exec_opt1","-exec_opt2"};final OptionGroup grp=new OptionGroup();grp.addOption(new Option("exec",false,"description for this option"));grp.addOption(new Option("rep",false,"description for this option"));mainOptions.addOptionGroup(grp);final Options execOptions=new Options();execOptions.addOption("exec_opt1",false," desc");execOptions.addOption("exec_opt2",false," desc");final Options repOptions=new Options();repOptions.addOption("repopto",false,"desc");repOptions.addOption("repoptt",false,"desc");final GnuParser parser=new GnuParser();CommandLine cmd=parser.parse(mainOptions,argv,true);argv=cmd.getArgs();if (cmd.hasOption("exec")){cmd=parser.parse(execOptions,argv,false);assertTrue(cmd.hasOption("exec_opt1"));assertTrue(cmd.hasOption("exec_opt2"));}else   if (cmd.hasOption("rep")){cmd=parser.parse(repOptions,argv,false);}else {fail("exec option not found");}}
@Test public void test13425()throws Exception {final Options options=new Options();final Option oldpass=OptionBuilder.withLongOpt("old-password").withDescription("Use this option to specify the old password").hasArg().create('o');final Option newpass=OptionBuilder.withLongOpt("new-password").withDescription("Use this option to specify the new password").hasArg().create('n');final String[]args={"-o","-n","newpassword"};options.addOption(oldpass);options.addOption(newpass);final Parser parser=new PosixParser();try {parser.parse(options,args);fail("MissingArgumentException not caught.");}catch(final MissingArgumentException expected){}}
@Test public void test13666()throws Exception {final Options options=new Options();final Option dir=OptionBuilder.withDescription("dir").hasArg().create('d');options.addOption(dir);final PrintStream oldSystemOut=System.out;try {final ByteArrayOutputStream bytes=new ByteArrayOutputStream();final PrintStream print=new PrintStream(bytes);print.println();final String eol=bytes.toString();bytes.reset();System.setOut(new PrintStream(bytes));final HelpFormatter formatter=new HelpFormatter();formatter.printHelp("dir",options);assertEquals("usage: dir" + eol + " -d <arg>   dir"+ eol,bytes.toString());}finally {System.setOut(oldSystemOut);}}
@Test public void test13935()throws Exception {final OptionGroup directions=new OptionGroup();final Option left=new Option("l","left",false,"go left");final Option right=new Option("r","right",false,"go right");final Option straight=new Option("s","straight",false,"go straight");final Option forward=new Option("f","forward",false,"go forward");forward.setRequired(true);directions.addOption(left);directions.addOption(right);directions.setRequired(true);final Options opts=new Options();opts.addOptionGroup(directions);opts.addOption(straight);final CommandLineParser parser=new PosixParser();String[]args=new String[]{};try {parser.parse(opts,args);fail("Expected ParseException");}catch(final ParseException expected){}args=new String[]{"-s"};try {parser.parse(opts,args);fail("Expected ParseException");}catch(final ParseException expected){}args=new String[]{"-s","-l"};CommandLine line=parser.parse(opts,args);assertNotNull(line);opts.addOption(forward);args=new String[]{"-s","-l","-f"};line=parser.parse(opts,args);assertNotNull(line);}
@Test public void test14786()throws Exception {final Option o=OptionBuilder.isRequired().withDescription("test").create("test");final Options opts=new Options();opts.addOption(o);opts.addOption(o);final CommandLineParser parser=new GnuParser();final String[]args=new String[]{"-test"};final CommandLine line=parser.parse(opts,args);assertTrue(line.hasOption("test"));}
@Test public void test15046()throws Exception {final CommandLineParser parser=new PosixParser();final String[]CLI_ARGS=new String[]{"-z","c"};final Options options=new Options();options.addOption(new Option("z","timezone",true,"affected option"));parser.parse(options,CLI_ARGS);options.addOption("c","conflict",true,"conflict option");final CommandLine line=parser.parse(options,CLI_ARGS);assertEquals(line.getOptionValue('z'),"c");assertTrue(!line.hasOption("c"));}
@Test public void test15648()throws Exception {final CommandLineParser parser=new PosixParser();final String[]args=new String[]{"-m","\"Two Words\""};final Option m=OptionBuilder.hasArgs().create("m");final Options options=new Options();options.addOption(m);final CommandLine line=parser.parse(options,args);assertEquals("Two Words",line.getOptionValue("m"));}
@Test public void test31148()throws ParseException {final Option multiArgOption=new Option("o","option with multiple args");multiArgOption.setArgs(1);final Options options=new Options();options.addOption(multiArgOption);final Parser parser=new PosixParser();final String[]args=new String[]{};final Properties props=new Properties();props.setProperty("o","ovalue");final CommandLine cl=parser.parse(options,args,props);assertTrue(cl.hasOption('o'));assertEquals("ovalue",cl.getOptionValue('o'));}
@Test public void testSingleOptionFromGroup()throws Exception {final String[]args=new String[]{"-f"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}
@Test public void testSingleOption()throws Exception {final String[]args=new String[]{"-r"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is set",cl.hasOption("r"));assertTrue("Confirm -f is NOT set",!cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}
@Test public void testTwoValidOptions()throws Exception {final String[]args=new String[]{"-r","-f"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is set",cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}
@Test public void testSingleLongOption()throws Exception {final String[]args=new String[]{"--file"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}
@Test public void testTwoValidLongOptions()throws Exception {final String[]args=new String[]{"--revision","--file"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is set",cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}
@Test public void testNoOptionsExtraArgs()throws Exception {final String[]args=new String[]{"arg1","arg2"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is NOT set",!cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm TWO extra args",cl.getArgList().size()== 2);}
@Test public void testTwoOptionsFromGroup()throws Exception {final String[]args=new String[]{"-f","-d"};try {parser.parse(_options,args);fail("two arguments from group not allowed");}catch(final AlreadySelectedException e){assertNotNull("null option group",e.getOptionGroup());assertEquals("selected option","f",e.getOptionGroup().getSelected());assertEquals("option","d",e.getOption().getOpt());}}
@Test public void testTwoLongOptionsFromGroup()throws Exception {final String[]args=new String[]{"--file","--directory"};try {parser.parse(_options,args);fail("two arguments from group not allowed");}catch(final AlreadySelectedException e){assertNotNull("null option group",e.getOptionGroup());assertEquals("selected option","f",e.getOptionGroup().getSelected());assertEquals("option","d",e.getOption().getOpt());}}
@Test public void testTwoOptionsFromDifferentGroup()throws Exception {final String[]args=new String[]{"-f","-s"};final CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is set",cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm NO extra args",cl.getArgList().size()== 0);}
@Test public void testTwoOptionsFromGroupWithProperties()throws Exception {final String[]args=new String[]{"-f"};final Properties properties=new Properties();properties.put("d","true");final CommandLine cl=parser.parse(_options,args,properties);assertTrue(cl.hasOption("f"));assertTrue(!cl.hasOption("d"));}
@Test public void testValidLongOnlyOptions()throws Exception {final CommandLine cl1=parser.parse(_options,new String[]{"--export"});assertTrue("Confirm --export is set",cl1.hasOption("export"));final CommandLine cl2=parser.parse(_options,new String[]{"--import"});assertTrue("Confirm --import is set",cl2.hasOption("import"));}
@Test public void testToString(){final OptionGroup group1=new OptionGroup();group1.addOption(new Option(null,"foo",false,"Foo"));group1.addOption(new Option(null,"bar",false,"Bar"));if (!"[--bar Bar,--foo Foo]".equals(group1.toString())){assertEquals("[--foo Foo,--bar Bar]",group1.toString());}final OptionGroup group2=new OptionGroup();group2.addOption(new Option("f","foo",false,"Foo"));group2.addOption(new Option("b","bar",false,"Bar"));if (!"[-b Bar,-f Foo]".equals(group2.toString())){assertEquals("[-f Foo,-b Bar]",group2.toString());}}
@Test public void testGetNames(){final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create('a'));group.addOption(OptionBuilder.create('b'));assertNotNull("null names",group.getNames());assertEquals(2,group.getNames().size());assertTrue(group.getNames().contains("a"));assertTrue(group.getNames().contains("b"));}
@Test public void testCreateValueString()throws Exception {assertEquals("String",TypeHandler.createValue("String",PatternOptionBuilder.STRING_VALUE));}
@Test(expected=ParseException.class)public void testCreateValueObject_unknownClass()throws Exception {TypeHandler.createValue("unknown",PatternOptionBuilder.OBJECT_VALUE);}
@Test(expected=ParseException.class)public void testCreateValueObject_notInstantiableClass()throws Exception {TypeHandler.createValue(NotInstantiable.class.getName(),PatternOptionBuilder.OBJECT_VALUE);}
@Test public void testCreateValueObject_InstantiableClass()throws Exception {Object result=TypeHandler.createValue(Instantiable.class.getName(),PatternOptionBuilder.OBJECT_VALUE);assertTrue(result instanceof Instantiable);}
@Test(expected=ParseException.class)public void testCreateValueNumber_noNumber()throws Exception {TypeHandler.createValue("not a number",PatternOptionBuilder.NUMBER_VALUE);}
@Test public void testCreateValueNumber_Double()throws Exception {assertEquals(1.5d,TypeHandler.createValue("1.5",PatternOptionBuilder.NUMBER_VALUE));}
@Test public void testCreateValueNumber_Long()throws Exception {assertEquals(Long.valueOf(15),TypeHandler.createValue("15",PatternOptionBuilder.NUMBER_VALUE));}
@Test(expected=UnsupportedOperationException.class)public void testCreateValueDate()throws Exception {TypeHandler.createValue("what ever",PatternOptionBuilder.DATE_VALUE);}
@Test(expected=ParseException.class)public void testCreateValueClass_notFound()throws Exception {TypeHandler.createValue("what ever",PatternOptionBuilder.CLASS_VALUE);}
@Test public void testCreateValueClass()throws Exception {Object clazz=TypeHandler.createValue(Instantiable.class.getName(),PatternOptionBuilder.CLASS_VALUE);assertEquals(Instantiable.class,clazz);}
@Test public void testCreateValueFile()throws Exception {File result=TypeHandler.createValue("some-file.txt",PatternOptionBuilder.FILE_VALUE);assertEquals("some-file.txt",result.getName());}
@Test public void testCreateValueExistingFile()throws Exception {FileInputStream result=TypeHandler.createValue("src/test/resources/existing-readable.file",PatternOptionBuilder.EXISTING_FILE_VALUE);assertNotNull(result);}
@Test(expected=ParseException.class)public void testCreateValueExistingFile_nonExistingFile()throws Exception {TypeHandler.createValue("non-existing.file",PatternOptionBuilder.EXISTING_FILE_VALUE);}
@Test(expected=UnsupportedOperationException.class)public void testCreateValueFiles()throws Exception {TypeHandler.createValue("some.files",PatternOptionBuilder.FILES_VALUE);}
@Test public void testCreateValueURL()throws Exception {String urlString="http://commons.apache.org";URL result=TypeHandler.createValue(urlString,PatternOptionBuilder.URL_VALUE);assertEquals(urlString,result.toString());}
@Test(expected=ParseException.class)public void testCreateValueURL_malformed()throws Exception {TypeHandler.createValue("malformed-url",PatternOptionBuilder.URL_VALUE);}
@Test(expected=ParseException.class)public void testCreateValueInteger_failure()throws Exception {TypeHandler.createValue("just-a-string",Integer.class);}
@Override @Test @Ignore("not supported by the GnuParser")public void testDoubleDash2()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testLongWithoutEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testAmbiguousLongWithoutEqualSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser (CLI-184)")public void testNegativeOption()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testLongWithUnexpectedArgument1()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testLongWithUnexpectedArgument2()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testShortWithUnexpectedArgument()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testUnambiguousPartialLongOption1()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testUnambiguousPartialLongOption2()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testUnambiguousPartialLongOption3()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testUnambiguousPartialLongOption4()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testAmbiguousPartialLongOption1()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testAmbiguousPartialLongOption2()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testAmbiguousPartialLongOption3()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testAmbiguousPartialLongOption4()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testPartialLongOptionSingleDash()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testBursting()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testUnrecognizedOptionWithBursting()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testMissingArgWithBursting()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testStopBursting()throws Exception {}
@Override @Test @Ignore("not supported by the GnuParser")public void testStopBursting2()throws Exception {}
@Test public void testSimpleShort()throws Exception {final String[]args=new String[]{"-a","-b","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testSimpleLong()throws Exception {final String[]args=new String[]{"--enable-a","--bfile","toast","foo","bar"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm arg of --bfile",cl.getOptionValue("bfile").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}
@Test public void testMultiple()throws Exception {final String[]args=new String[]{"-c","foobar","-b","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testMultipleWithLong()throws Exception {final String[]args=new String[]{"--copt","foobar","--bfile","toast"};CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=parser.parse(options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}
@Test public void testUnrecognizedOption()throws Exception {final String[]args=new String[]{"-a","-d","-b","toast","foo","bar"};try {parser.parse(options,args);fail("UnrecognizedOptionException wasn't thrown");}catch(final UnrecognizedOptionException e){assertEquals("-d",e.getOption());}}
@Test public void testMissingArg()throws Exception {final String[]args=new String[]{"-b"};boolean caught=false;try {parser.parse(options,args);}catch(final MissingArgumentException e){caught=true;assertEquals("option missing an argument","b",e.getOption().getOpt());}assertTrue("Confirm MissingArgumentException caught",caught);}
@Test public void testDoubleDash1()throws Exception {final String[]args=new String[]{"--copt","--","-b","toast"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm -b is not set",!cl.hasOption("b"));assertTrue("Confirm 2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}
@Test public void testSingleDash()throws Exception {final String[]args=new String[]{"--copt","-b","-","-a","-"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("-"));assertTrue("Confirm 1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("-"));}
@Test public void testStopAtUnexpectedArg()throws Exception {final String[]args=new String[]{"-c","foober","-b","toast"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtExpectedArg()throws Exception {final String[]args=new String[]{"-b","foo"};final CommandLine cl=parser.parse(options,args,true);assertTrue("Confirm -b is set",cl.hasOption('b'));assertEquals("Confirm -b is set","foo",cl.getOptionValue('b'));assertTrue("Confirm no extra args: " + cl.getArgList().size(),cl.getArgList().size()== 0);}
@Test public void testStopAtNonOptionShort()throws Exception {final String[]args=new String[]{"-z","-a","-btoast"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testStopAtNonOptionLong()throws Exception {final String[]args=new String[]{"--zop==1","-abtoast","--b=bar"};final CommandLine cl=parser.parse(options,args,true);assertFalse("Confirm -a is not set",cl.hasOption("a"));assertFalse("Confirm -b is not set",cl.hasOption("b"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}
@Test public void testNegativeArgument()throws Exception {final String[]args=new String[]{"-b","-1"};final CommandLine cl=parser.parse(options,args);assertEquals("-1",cl.getOptionValue("b"));}
@Test public void testArgumentStartingWithHyphen()throws Exception {final String[]args=new String[]{"-b","-foo"};final CommandLine cl=parser.parse(options,args);assertEquals("-foo",cl.getOptionValue("b"));}
@Test public void testShortWithEqual()throws Exception {final String[]args=new String[]{"-f=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testShortWithoutEqual()throws Exception {final String[]args=new String[]{"-fbar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithEqualSingleDash()throws Exception {final String[]args=new String[]{"-foo=bar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args);assertEquals("bar",cl.getOptionValue("foo"));}
@Test public void testLongWithoutEqualDoubleDash()throws Exception {final String[]args=new String[]{"--foobar"};final Options options=new Options();options.addOption(OptionBuilder.withLongOpt("foo").hasArg().create('f'));final CommandLine cl=parser.parse(options,args,true);assertFalse(cl.hasOption("foo"));}
@Test public void testPropertiesOption1()throws Exception {final String[]args=new String[]{"-Jsource=1.5","-J","target","1.5","foo"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).create('J'));final CommandLine cl=parser.parse(options,args);final List<String> values=Arrays.asList(cl.getOptionValues("J"));assertNotNull("null values",values);assertEquals("number of values",4,values.size());assertEquals("value 1","source",values.get(0));assertEquals("value 2","1.5",values.get(1));assertEquals("value 3","target",values.get(2));assertEquals("value 4","1.5",values.get(3));final List<?> argsleft=cl.getArgList();assertEquals("Should be 1 arg left",1,argsleft.size());assertEquals("Expecting foo","foo",argsleft.get(0));}
@Test public void testPropertiesOption2()throws Exception {final String[]args=new String[]{"-Dparam1","-Dparam2=value2","-D"};final Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));final CommandLine cl=parser.parse(options,args);final Properties props=cl.getOptionProperties("D");assertNotNull("null properties",props);assertEquals("number of properties in " + props,2,props.size());assertEquals("property 1","true",props.getProperty("param1"));assertEquals("property 2","value2",props.getProperty("param2"));final List<?> argsleft=cl.getArgList();assertEquals("Should be no arg left",0,argsleft.size());}
@Test public void testWithRequiredOption()throws Exception {final String[]args=new String[]{"-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is NOT set",!cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testOptionAndRequiredOption()throws Exception {final String[]args=new String[]{"-a","-b","file"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}
@Test public void testMissingRequiredOption(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required option: b",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredOptions(){final String[]args=new String[]{"-a"};final Options options=new Options();options.addOption("a","enable-a",false,null);options.addOption(OptionBuilder.withLongOpt("bfile").hasArg().isRequired().create('b'));options.addOption(OptionBuilder.withLongOpt("cfile").hasArg().isRequired().create('c'));try {parser.parse(options,args);fail("exception should have been thrown");}catch(final MissingOptionException e){assertEquals("Incorrect exception message","Missing required options: b,c",e.getMessage());assertTrue(e.getMissingOptions().contains("b"));assertTrue(e.getMissingOptions().contains("c"));}catch(final ParseException e){fail("expected to catch MissingOptionException");}}
@Test public void testMissingRequiredGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));group.setRequired(true);final Options options=new Options();options.addOptionGroup(group);options.addOption(OptionBuilder.isRequired().create("c"));try {parser.parse(options,new String[]{"-c"});fail("MissingOptionException not thrown");}catch(final MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().get(0)instanceof OptionGroup);}catch(final ParseException e){fail("Expected to catch MissingOptionException");}}
@Test public void testOptionGroup()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.create("a"));group.addOption(OptionBuilder.create("b"));final Options options=new Options();options.addOptionGroup(group);parser.parse(options,new String[]{"-b"});assertEquals("selected option","b",group.getSelected());}
@Test public void testOptionGroupLong()throws Exception {final OptionGroup group=new OptionGroup();group.addOption(OptionBuilder.withLongOpt("foo").create());group.addOption(OptionBuilder.withLongOpt("bar").create());final Options options=new Options();options.addOptionGroup(group);final CommandLine cl=parser.parse(options,new String[]{"--bar"});assertTrue(cl.hasOption("bar"));assertEquals("selected option","bar",group.getSelected());}
@Test public void testReuseOptionsTwice()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create('v'));parser.parse(opts,new String[]{"-v"});try {parser.parse(opts,new String[0]);fail("MissingOptionException not thrown");}catch(final MissingOptionException e){}}
@Test public void testUnlimitedArgs()throws Exception {final String[]args=new String[]{"-e","one","two","-f","alpha"};final Options options=new Options();options.addOption(OptionBuilder.hasArgs().create("e"));options.addOption(OptionBuilder.hasArgs().create("f"));final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -e is set",cl.hasOption("e"));assertEquals("number of arg for -e",2,cl.getOptionValues("e").length);assertTrue("Confirm -f is set",cl.hasOption("f"));assertEquals("number of arg for -f",1,cl.getOptionValues("f").length);}
@Test public void testPropertyOptionSingularValue()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt("hide").create());final Properties properties=new Properties();properties.setProperty("hide","seek");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("hide"));assertEquals("seek",cmd.getOptionValue("hide"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionFlags()throws Exception {final Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("c","c",false,"toggle -c");opts.addOption(OptionBuilder.hasOptionalArg().create('e'));Properties properties=new Properties();properties.setProperty("a","true");properties.setProperty("c","yes");properties.setProperty("e","1");CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","false");properties.setProperty("c","no");properties.setProperty("e","0");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","TRUE");properties.setProperty("c","nO");properties.setProperty("e","TrUe");cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","just a string");properties.setProperty("e","");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));properties=new Properties();properties.setProperty("a","0");properties.setProperty("c","1");cmd=parse(parser,opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));}
@Test public void testPropertyOptionMultipleValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));final Properties properties=new Properties();properties.setProperty("k","one,two");final String[]values=new String[]{"one","two"};final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("k"));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}
@Test public void testPropertyOverrideValues()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));final String[]args=new String[]{"-j","found","-i","ink"};final Properties properties=new Properties();properties.setProperty("j","seek");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("j"));assertEquals("found",cmd.getOptionValue("j"));assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertTrue(!cmd.hasOption("fake"));}
@Test public void testPropertyOptionRequired()throws Exception {final Options opts=new Options();opts.addOption(OptionBuilder.isRequired().create("f"));final Properties properties=new Properties();properties.setProperty("f","true");final CommandLine cmd=parse(parser,opts,null,properties);assertTrue(cmd.hasOption("f"));}
@Test public void testPropertyOptionUnexpected()throws Exception {final Options opts=new Options();final Properties properties=new Properties();properties.setProperty("f","true");try {parse(parser,opts,null,properties);fail("UnrecognizedOptionException expected");}catch(final UnrecognizedOptionException e){}}
@Test public void testPropertyOptionGroup()throws Exception {final Options opts=new Options();final OptionGroup group1=new OptionGroup();group1.addOption(new Option("a",null));group1.addOption(new Option("b",null));opts.addOptionGroup(group1);final OptionGroup group2=new OptionGroup();group2.addOption(new Option("x",null));group2.addOption(new Option("y",null));opts.addOptionGroup(group2);final String[]args=new String[]{"-a"};final Properties properties=new Properties();properties.put("b","true");properties.put("x","true");final CommandLine cmd=parse(parser,opts,args,properties);assertTrue(cmd.hasOption("a"));assertFalse(cmd.hasOption("b"));assertTrue(cmd.hasOption("x"));assertFalse(cmd.hasOption("y"));}
@Test public void testStripLeadingHyphens(){assertEquals("f",Util.stripLeadingHyphens("-f"));assertEquals("foo",Util.stripLeadingHyphens("--foo"));assertEquals("-foo",Util.stripLeadingHyphens("---foo"));assertNull(Util.stripLeadingHyphens(null));}
@Test public void testStripLeadingAndTrailingQuotes(){assertEquals("foo",Util.stripLeadingAndTrailingQuotes("\"foo\""));assertEquals("foo \"bar\"",Util.stripLeadingAndTrailingQuotes("foo \"bar\""));assertEquals("\"foo\" bar",Util.stripLeadingAndTrailingQuotes("\"foo\" bar"));assertEquals("\"foo\" and \"bar\"",Util.stripLeadingAndTrailingQuotes("\"foo\" and \"bar\""));assertEquals("\"",Util.stripLeadingAndTrailingQuotes("\""));}
@Test public void testOptionAndOptionWithArgument()throws Exception {final String[]args=new String[]{"-p","-attr","p"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -p is set",cl.hasOption("p"));assertTrue("Confirm -attr is set",cl.hasOption("attr"));assertTrue("Confirm arg of -attr",cl.getOptionValue("attr").equals("p"));assertTrue("Confirm all arguments recognized",cl.getArgs().length == 0);}
@Test public void testOptionWithArgument()throws Exception {final String[]args=new String[]{"-attr","p"};final CommandLine cl=parser.parse(options,args);assertFalse("Confirm -p is set",cl.hasOption("p"));assertTrue("Confirm -attr is set",cl.hasOption("attr"));assertTrue("Confirm arg of -attr",cl.getOptionValue("attr").equals("p"));assertTrue("Confirm all arguments recognized",cl.getArgs().length == 0);}
@Test public void testOption()throws Exception {final String[]args=new String[]{"-p"};final CommandLine cl=parser.parse(options,args);assertTrue("Confirm -p is set",cl.hasOption("p"));assertFalse("Confirm -attr is not set",cl.hasOption("attr"));assertTrue("Confirm all arguments recognized",cl.getArgs().length == 0);}
@Test public void testSimplePattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/m*z#");final String[]args=new String[]{"-c","-a","foo","-b","java.util.Vector","-e","build.xml","-f","java.util.Calendar","-n","4.5","-t","http://commons.apache.org","-z","Thu Jun 06 17:48:57 EDT 2002","-m","test*"};final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,args);assertEquals("flag a","foo",line.getOptionValue("a"));assertEquals("string flag a","foo",line.getOptionObject("a"));assertEquals("object flag b",new Vector<Object>(),line.getOptionObject("b"));assertTrue("boolean true flag c",line.hasOption("c"));assertFalse("boolean false flag d",line.hasOption("d"));assertEquals("file flag e",new File("build.xml"),line.getOptionObject("e"));assertEquals("class flag f",Calendar.class,line.getOptionObject("f"));assertEquals("number flag n",new Double(4.5),line.getOptionObject("n"));assertEquals("url flag t",new URL("http://commons.apache.org"),line.getOptionObject("t"));assertEquals("flag a","foo",line.getOptionValue('a'));assertEquals("string flag a","foo",line.getOptionObject('a'));assertEquals("object flag b",new Vector<Object>(),line.getOptionObject('b'));assertTrue("boolean true flag c",line.hasOption('c'));assertFalse("boolean false flag d",line.hasOption('d'));assertEquals("file flag e",new File("build.xml"),line.getOptionObject('e'));assertEquals("class flag f",Calendar.class,line.getOptionObject('f'));assertEquals("number flag n",new Double(4.5),line.getOptionObject('n'));assertEquals("url flag t",new URL("http://commons.apache.org"),line.getOptionObject('t'));try {assertEquals("files flag m",new File[0],line.getOptionObject('m'));fail("Multiple files are not supported yet,should have failed");}catch(final UnsupportedOperationException uoe){}try {assertEquals("date flag z",new Date(1023400137276L),line.getOptionObject('z'));fail("Date is not supported yet,should have failed");}catch(final UnsupportedOperationException uoe){}}
@Test public void testEmptyPattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("");assertTrue(options.getOptions().isEmpty());}
@Test public void testUntypedPattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("abc");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-abc"});assertTrue(line.hasOption('a'));assertNull("value a",line.getOptionObject('a'));assertTrue(line.hasOption('b'));assertNull("value b",line.getOptionObject('b'));assertTrue(line.hasOption('c'));assertNull("value c",line.getOptionObject('c'));}
@Test public void testNumberPattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("n%d%x%");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-n","1","-d","2.1","-x","3,5"});assertEquals("n object class",Long.class,line.getOptionObject("n").getClass());assertEquals("n value",new Long(1),line.getOptionObject("n"));assertEquals("d object class",Double.class,line.getOptionObject("d").getClass());assertEquals("d value",new Double(2.1),line.getOptionObject("d"));assertNull("x object",line.getOptionObject("x"));}
@Test public void testClassPattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("c+d+");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-c","java.util.Calendar","-d","System.DateTime"});assertEquals("c value",Calendar.class,line.getOptionObject("c"));assertNull("d value",line.getOptionObject("d"));}
@Test public void testObjectPattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("o@i@n@");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-o","java.lang.String","-i","java.util.Calendar","-n","System.DateTime"});assertEquals("o value","",line.getOptionObject("o"));assertNull("i value",line.getOptionObject("i"));assertNull("n value",line.getOptionObject("n"));}
@Test public void testURLPattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("u/v/");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-u","http://commons.apache.org","-v","foo://commons.apache.org"});assertEquals("u value",new URL("http://commons.apache.org"),line.getOptionObject("u"));assertNull("v value",line.getOptionObject("v"));}
@Test public void testExistingFilePattern()throws Exception {final Options options=PatternOptionBuilder.parsePattern("g<");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-g","src/test/resources/existing-readable.file"});final Object parsedReadableFileStream=line.getOptionObject("g");assertNotNull("option g not parsed",parsedReadableFileStream);assertTrue("option g not FileInputStream",parsedReadableFileStream instanceof FileInputStream);}
@Test public void testExistingFilePatternFileNotExist()throws Exception {final Options options=PatternOptionBuilder.parsePattern("f<");final CommandLineParser parser=new PosixParser();final CommandLine line=parser.parse(options,new String[]{"-f","non-existing.file"});assertNull("option f parsed",line.getOptionObject("f"));}
@Test public void testRequiredOption()throws Exception {final Options options=PatternOptionBuilder.parsePattern("!n%m%");final CommandLineParser parser=new PosixParser();try {parser.parse(options,new String[]{""});fail("MissingOptionException wasn't thrown");}catch(final MissingOptionException e){assertEquals(1,e.getMissingOptions().size());assertTrue(e.getMissingOptions().contains("n"));}}
@Test public void testCLI18(){final Options options=new Options();options.addOption(new Option("a","aaa",false,"aaaaaaa"));options.addOption(new Option(null,"bbb",false,"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f"));options.addOption(new Option("c",null,false,"ccccccc"));final HelpFormatter formatter=new HelpFormatter();final StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"foobar","dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s",options,2,2,"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh" + '\r' + '\n'+ "rarrr",true);}
@Test public void testCLI13()throws ParseException {final String debugOpt="debug";@SuppressWarnings("static-access")final Option debug=OptionBuilder.withArgName(debugOpt).withDescription("turn on debugging").withLongOpt(debugOpt).hasArg().create('d');final Options options=new Options();options.addOption(debug);final CommandLine commandLine=new PosixParser().parse(options,new String[]{"-d","true"});assertEquals("true",commandLine.getOptionValue(debugOpt));assertEquals("true",commandLine.getOptionValue('d'));assertTrue(commandLine.hasOption('d'));assertTrue(commandLine.hasOption(debugOpt));}
@Test public void testInfiniteLoop(){final Options options=new Options();options.addOption("h","help",false,"This is a looooong description");formatter.printHelp(new PrintWriter(sw),20,"app",null,options,HelpFormatter.DEFAULT_LEFT_PAD,HelpFormatter.DEFAULT_DESC_PAD,null);final String expected="usage: app" + CR + " -h,--help   This is"+ CR+ "             a"+ CR+ "             looooon"+ CR+ "             g"+ CR+ "             descrip"+ CR+ "             tion"+ CR;assertEquals(expected,sw.toString());}
@Test public void testPrintHelpLongLines(){final String OPT="-";final String OPT_COLUMN_NAMES="l";final String OPT_CONNECTION="c";final String OPT_DESCRIPTION="e";final String OPT_DRIVER="d";final String OPT_DRIVER_INFO="n";final String OPT_FILE_BINDING="b";final String OPT_FILE_JDBC="j";final String OPT_FILE_SFMD="f";final String OPT_HELP="h";final String OPT_HELP_="help";final String OPT_INTERACTIVE="i";final String OPT_JDBC_TO_SFMD="2";final String OPT_JDBC_TO_SFMD_L="jdbc2sfmd";final String OPT_METADATA="m";final String OPT_PARAM_MODES_INT="o";final String OPT_PARAM_MODES_NAME="O";final String OPT_PARAM_NAMES="a";final String OPT_PARAM_TYPES_INT="y";final String OPT_PARAM_TYPES_NAME="Y";final String OPT_PASSWORD="p";final String OPT_PASSWORD_L="password";final String OPT_SQL="s";final String OPT_SQL_L="sql";final String OPT_SQL_SPLIT_DEFAULT="###";final String OPT_SQL_SPLIT_L="splitSql";final String OPT_STACK_TRACE="t";final String OPT_TIMING="g";final String OPT_TRIM_L="trim";final String OPT_USER="u";final String OPT_WRITE_TO_FILE="w";final String _PMODE_IN="IN";final String _PMODE_INOUT="INOUT";final String _PMODE_OUT="OUT";final String _PMODE_UNK="Unknown";final String PMODES=_PMODE_IN + "," + _PMODE_INOUT+ ","+ _PMODE_OUT+ ","+ _PMODE_UNK;Options commandLineOptions;commandLineOptions=new Options();commandLineOptions.addOption(OPT_HELP,OPT_HELP_,false,"Prints help and quits");commandLineOptions.addOption(OPT_DRIVER,"driver",true,"JDBC driver class name");commandLineOptions.addOption(OPT_DRIVER_INFO,"info",false,"Prints driver information and properties. If " + OPT + OPT_CONNECTION+ " is not specified,all drivers on the classpath are displayed.");commandLineOptions.addOption(OPT_CONNECTION,"url",true,"Connection URL");commandLineOptions.addOption(OPT_USER,"user",true,"A database user name");commandLineOptions.addOption(OPT_PASSWORD,OPT_PASSWORD_L,true,"The database password for the user specified with the " + OPT + OPT_USER+ " option. You can obfuscate the password with org.mortbay.jetty.security.Password,see http://docs.codehaus.org/display/JETTY/Securing+Passwords");commandLineOptions.addOption(OPT_SQL,OPT_SQL_L,true,"Runs SQL or {call stored_procedure(?,?)}or {?=call function(?,?)}");commandLineOptions.addOption(OPT_FILE_SFMD,"sfmd",true,"Writes a SFMD file for the given SQL");commandLineOptions.addOption(OPT_FILE_BINDING,"jdbc",true,"Writes a JDBC binding node file for the given SQL");commandLineOptions.addOption(OPT_FILE_JDBC,"node",true,"Writes a JDBC node file for the given SQL (internal debugging)");commandLineOptions.addOption(OPT_WRITE_TO_FILE,"outfile",true,"Writes the SQL output to the given file");commandLineOptions.addOption(OPT_DESCRIPTION,"description",true,"SFMD description. A default description is used if omited. Example: " + OPT + OPT_DESCRIPTION+ " \"Runs such and such\"");commandLineOptions.addOption(OPT_INTERACTIVE,"interactive",false,"Runs in interactive mode,reading and writing from the console,'go' or '/' sends a statement");commandLineOptions.addOption(OPT_TIMING,"printTiming",false,"Prints timing information");commandLineOptions.addOption(OPT_METADATA,"printMetaData",false,"Prints metadata information");commandLineOptions.addOption(OPT_STACK_TRACE,"printStack",false,"Prints stack traces on errors");Option option=new Option(OPT_COLUMN_NAMES,"columnNames",true,"Column XML names;default names column labels. Example: " + OPT + OPT_COLUMN_NAMES+ " \"cname1 cname2\"");commandLineOptions.addOption(option);option=new Option(OPT_PARAM_NAMES,"paramNames",true,"Parameter XML names;default names are param1,param2,etc. Example: " + OPT + OPT_PARAM_NAMES+ " \"pname1 pname2\"");commandLineOptions.addOption(option);final OptionGroup pOutTypesOptionGroup=new OptionGroup();final String pOutTypesOptionGroupDoc=OPT + OPT_PARAM_TYPES_INT + " and "+ OPT+ OPT_PARAM_TYPES_NAME+ " are mutually exclusive.";final String typesClassName=Types.class.getName();option=new Option(OPT_PARAM_TYPES_INT,"paramTypes",true,"Parameter types from " + typesClassName + ". "+ pOutTypesOptionGroupDoc+ " Example: "+ OPT+ OPT_PARAM_TYPES_INT+ " \"-10 12\"");commandLineOptions.addOption(option);option=new Option(OPT_PARAM_TYPES_NAME,"paramTypeNames",true,"Parameter " + typesClassName + " names. "+ pOutTypesOptionGroupDoc+ " Example: "+ OPT+ OPT_PARAM_TYPES_NAME+ " \"CURSOR VARCHAR\"");commandLineOptions.addOption(option);commandLineOptions.addOptionGroup(pOutTypesOptionGroup);final OptionGroup modesOptionGroup=new OptionGroup();final String modesOptionGroupDoc=OPT + OPT_PARAM_MODES_INT + " and "+ OPT+ OPT_PARAM_MODES_NAME+ " are mutually exclusive.";option=new Option(OPT_PARAM_MODES_INT,"paramModes",true,"Parameters modes (" + ParameterMetaData.parameterModeIn + "=IN,"+ ParameterMetaData.parameterModeInOut+ "=INOUT,"+ ParameterMetaData.parameterModeOut+ "=OUT,"+ ParameterMetaData.parameterModeUnknown+ "=Unknown"+ "). "+ modesOptionGroupDoc+ " Example for 2 parameters,OUT and IN: "+ OPT+ OPT_PARAM_MODES_INT+ " \""+ ParameterMetaData.parameterModeOut+ " "+ ParameterMetaData.parameterModeIn+ "\"");modesOptionGroup.addOption(option);option=new Option(OPT_PARAM_MODES_NAME,"paramModeNames",true,"Parameters mode names (" + PMODES + "). "+ modesOptionGroupDoc+ " Example for 2 parameters,OUT and IN: "+ OPT+ OPT_PARAM_MODES_NAME+ " \""+ _PMODE_OUT+ " "+ _PMODE_IN+ "\"");modesOptionGroup.addOption(option);commandLineOptions.addOptionGroup(modesOptionGroup);option=new Option(null,OPT_TRIM_L,true,"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.");option.setOptionalArg(true);commandLineOptions.addOption(option);option=new Option(OPT_JDBC_TO_SFMD,OPT_JDBC_TO_SFMD_L,true,"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.");option.setArgs(2);commandLineOptions.addOption(option);formatter.printHelp(new PrintWriter(sw),HelpFormatter.DEFAULT_WIDTH,this.getClass().getName(),null,commandLineOptions,HelpFormatter.DEFAULT_LEFT_PAD,HelpFormatter.DEFAULT_DESC_PAD,null);final String expected="usage: org.apache.commons.cli.bug.BugCLI162Test" + CR + " -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument"+ CR+ "                             to an SMFD file specified in the second"+ CR+ "                             argument."+ CR+ " -a,--paramNames <arg>       Parameter XML names;default names are"+ CR+ "                             param1,param2,etc. Example: -a \"pname1"+ CR+ "                             pname2\""+ CR+ " -b,--jdbc <arg>             Writes a JDBC binding node file for the given"+ CR+ "                             SQL"+ CR+ " -c,--url <arg>              Connection URL"+ CR+ " -d,--driver <arg>           JDBC driver class name"+ CR+ " -e,--description <arg>      SFMD description. A default description is"+ CR+ "                             used if omited. Example: -e \"Runs such and"+ CR+ "                             such\""+ CR+ " -f,--sfmd <arg>             Writes a SFMD file for the given SQL"+ CR+ " -g,--printTiming            Prints timing information"+ CR+ " -h,--help                   Prints help and quits"+ CR+ " -i,--interactive            Runs in interactive mode,reading and writing"+ CR+ "                             from the console,'go' or '/' sends a"+ CR+ "                             statement"+ CR+ " -j,--node <arg>             Writes a JDBC node file for the given SQL"+ CR+ "                             (internal debugging)"+ CR+ " -l,--columnNames <arg>      Column XML names;default names column"+ CR+ "                             labels. Example: -l \"cname1 cname2\""+ CR+ " -m,--printMetaData          Prints metadata information"+ CR+ " -n,--info                   Prints driver information and properties. If"+ CR+ "                             -c is not specified,all drivers on the"+ CR+ "                             classpath are displayed."+ CR+ " -o,--paramModes <arg>       Parameters modes (1=IN,2=INOUT,4=OUT,"+ CR+ "                             0=Unknown). -o and -O are mutually exclusive."+ CR+ "                             Example for 2 parameters,OUT and IN: -o \"4"+ CR+ "                             1\""+ CR+ " -O,--paramModeNames <arg>   Parameters mode names (IN,INOUT,OUT,"+ CR+ "                             Unknown). -o and -O are mutually exclusive."+ CR+ "                             Example for 2 parameters,OUT and IN: -O \"OUT"+ CR+ "                             IN\""+ CR+ " -p,--password <arg>         The database password for the user specified"+ CR+ "                             with the -u option. You can obfuscate the"+ CR+ "                             password with"+ CR+ "                             org.mortbay.jetty.security.Password,see"+ CR+ "                             http://docs.codehaus.org/display/JETTY/Securi"+ CR+ "                             ng+Passwords"+ CR+ " -s,--sql <arg>              Runs SQL or {call stored_procedure(?,?)}or"+ CR+ "                             {?=call function(?,?)}"+ CR+ " -t,--printStack             Prints stack traces on errors"+ CR+ "    --trim <arg>             Trims leading and trailing spaces from all"+ CR+ "                             column values. Column XML names can be"+ CR+ "                             optionally specified to set which columns to"+ CR+ "                             trim."+ CR+ " -u,--user <arg>             A database user name"+ CR+ " -w,--outfile <arg>          Writes the SQL output to the given file"+ CR+ " -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and"+ CR+ "                             -Y are mutually exclusive. Example: -y \"-10"+ CR+ "                             12\""+ CR+ " -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are"+ CR+ "                             mutually exclusive. Example: -Y \"CURSOR"+ CR+ "                             VARCHAR\""+ CR;assertEquals(expected,sw.toString());}
@Test public void testLongLineChunking(){final Options options=new Options();options.addOption("x","extralongarg",false,"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns " + "and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob," + "yes. ");formatter.printHelp(new PrintWriter(sw),35,this.getClass().getName(),"Header",options,0,5,"Footer");final String expected="usage:" + CR + "       org.apache.commons.cli.bug.B"+ CR+ "       ugCLI162Test"+ CR+ "Header"+ CR+ "-x,--extralongarg     This"+ CR+ "                      description"+ CR+ "                      has"+ CR+ "                      ReallyLongVal"+ CR+ "                      uesThatAreLon"+ CR+ "                      gerThanTheWid"+ CR+ "                      thOfTheColumn"+ CR+ "                      s and also"+ CR+ "                      other"+ CR+ "                      ReallyLongVal"+ CR+ "                      uesThatAreHug"+ CR+ "                      erAndBiggerTh"+ CR+ "                      anTheWidthOfT"+ CR+ "                      heColumnsBob,"+ CR+ "                      yes."+ CR+ "Footer"+ CR;assertEquals("Long arguments did not split as expected",expected,sw.toString());}
@Test public void testLongLineChunkingIndentIgnored(){final Options options=new Options();options.addOption("x","extralongarg",false,"This description is Long.");formatter.printHelp(new PrintWriter(sw),22,this.getClass().getName(),"Header",options,0,5,"Footer");final String expected="usage:" + CR + "       org.apache.comm"+ CR+ "       ons.cli.bug.Bug"+ CR+ "       CLI162Test"+ CR+ "Header"+ CR+ "-x,--extralongarg"+ CR+ " This description is"+ CR+ " Long."+ CR+ "Footer"+ CR;assertEquals("Long arguments did not split as expected",expected,sw.toString());}
@Test public void testCompleteOption(){final Option simple=OptionBuilder.withLongOpt("simple option").hasArg().isRequired().hasArgs().withType(Float.class).withDescription("this is a simple option").create('s');assertEquals("s",simple.getOpt());assertEquals("simple option",simple.getLongOpt());assertEquals("this is a simple option",simple.getDescription());assertEquals(simple.getType(),Float.class);assertTrue(simple.hasArg());assertTrue(simple.isRequired());assertTrue(simple.hasArgs());}
@Test public void testTwoCompleteOptions(){Option simple=OptionBuilder.withLongOpt("simple option").hasArg().isRequired().hasArgs().withType(Float.class).withDescription("this is a simple option").create('s');assertEquals("s",simple.getOpt());assertEquals("simple option",simple.getLongOpt());assertEquals("this is a simple option",simple.getDescription());assertEquals(simple.getType(),Float.class);assertTrue(simple.hasArg());assertTrue(simple.isRequired());assertTrue(simple.hasArgs());simple=OptionBuilder.withLongOpt("dimple option").hasArg().withDescription("this is a dimple option").create('d');assertEquals("d",simple.getOpt());assertEquals("dimple option",simple.getLongOpt());assertEquals("this is a dimple option",simple.getDescription());assertEquals(String.class,simple.getType());assertTrue(simple.hasArg());assertTrue(!simple.isRequired());assertTrue(!simple.hasArgs());}
@Test public void testBaseOptionCharOpt(){final Option base=OptionBuilder.withDescription("option description").create('o');assertEquals("o",base.getOpt());assertEquals("option description",base.getDescription());assertTrue(!base.hasArg());}
@Test public void testBaseOptionStringOpt(){final Option base=OptionBuilder.withDescription("option description").create("o");assertEquals("o",base.getOpt());assertEquals("option description",base.getDescription());assertTrue(!base.hasArg());}
@Test public void testSpecialOptChars()throws Exception {final Option opt1=OptionBuilder.withDescription("help options").create('?');assertEquals("?",opt1.getOpt());final Option opt2=OptionBuilder.withDescription("read from stdin").create('@');assertEquals("@",opt2.getOpt());try {OptionBuilder.create(' ');fail("IllegalArgumentException not caught");}catch(final IllegalArgumentException e){}}
@Test public void testOptionArgNumbers(){final Option opt=OptionBuilder.withDescription("option description").hasArgs(2).create('o');assertEquals(2,opt.getArgs());}
@Test public void testIllegalOptions(){try {OptionBuilder.withDescription("option description").create('"');fail("IllegalArgumentException not caught");}catch(final IllegalArgumentException exp){}try {OptionBuilder.create("opt`");fail("IllegalArgumentException not caught");}catch(final IllegalArgumentException exp){}try {OptionBuilder.create("opt");}catch(final IllegalArgumentException exp){fail("IllegalArgumentException caught");}}
@Test public void testCreateIncompleteOption(){try {OptionBuilder.hasArg().create();fail("Incomplete option should be rejected");}catch(final IllegalArgumentException e){OptionBuilder.create("opt");}}
@Test public void testBuilderIsResettedAlways(){try {OptionBuilder.withDescription("JUnit").create('"');fail("IllegalArgumentException expected");}catch(final IllegalArgumentException e){}assertNull("we inherited a description",OptionBuilder.create('x').getDescription());try {OptionBuilder.withDescription("JUnit").create();fail("IllegalArgumentException expected");}catch(final IllegalArgumentException e){}assertNull("we inherited a description",OptionBuilder.create('x').getDescription());}
@Test public void testOptionComparatorDefaultOrder()throws ParseException {final HelpFormatter formatter=new HelpFormatter();final List<Option> options=new ArrayList<Option>(getOptions().getOptions());Collections.sort(options,formatter.getOptionComparator());int i=0;for(final Option o : options){Assert.assertEquals(o.getOpt(),sortOrder.get(i));i++;}}
@Test public void testOptionComparatorInsertedOrder()throws ParseException {final Collection<Option> options=getOptions().getOptions();int i=0;for(final Option o : options){Assert.assertEquals(o.getOpt(),insertedOrder.get(i));i++;}}
@Test public void testExactOptionNameMatch()throws ParseException {new DefaultParser().parse(getOptions(),new String[]{"--prefix"});}
@Test(expected=AmbiguousOptionException.class)public void testAmbiquousOptionName()throws ParseException {new DefaultParser().parse(getOptions(),new String[]{"--pref"});}
