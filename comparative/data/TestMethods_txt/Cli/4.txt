public void testClear(){Option option=new Option("x",true,"");assertEquals(0,option.getValuesList().size());option.addValue("a");assertEquals(1,option.getValuesList().size());option.clearValues();assertEquals(0,option.getValuesList().size());}
/** */public void testLs(){CommandLineParser parser=new PosixParser();Options options=new Options();options.addOption("a","all",false,"do not hide entries starting with .");options.addOption("A","almost-all",false,"do not list implied . and ..");options.addOption("b","escape",false,"print octal escapes for nongraphic characters");options.addOption(OptionBuilder.withLongOpt("block-size").withDescription("use SIZE-byte blocks").withValueSeparator('=').hasArg().create());options.addOption("B","ignore-backups",false,"do not list implied entried ending with ~");options.addOption("c",false,"with -lt: sort by,and show,ctime (time of last modification of file status information)with -l:show ctime and sort by name otherwise: sort by ctime");options.addOption("C",false,"list entries by columns");String[]args=new String[]{"--block-size=10"};try {CommandLine line=parser.parse(options,args);assertTrue(line.hasOption("block-size"));assertEquals(line.getOptionValue("block-size"),"10");}catch(ParseException exp){fail("Unexpected exception:" + exp.getMessage());}}
/** * Ant test*/public void testAnt(){CommandLineParser parser=new GnuParser();Options options=new Options();options.addOption("help",false,"print this message");options.addOption("projecthelp",false,"print project help information");options.addOption("version",false,"print the version information and exit");options.addOption("quiet",false,"be extra quiet");options.addOption("verbose",false,"be extra verbose");options.addOption("debug",false,"print debug information");options.addOption("version",false,"produce logging information without adornments");options.addOption("logfile",true,"use given file for log");options.addOption("logger",true,"the class which is to perform the logging");options.addOption("listener",true,"add an instance of a class as a project listener");options.addOption("buildfile",true,"use given buildfile");options.addOption(OptionBuilder.withDescription("use value for given property").hasArgs().withValueSeparator().create('D'));options.addOption("find",true,"search for buildfile towards the root of the filesystem and use it");String[]args=new String[]{"-buildfile","mybuild.xml","-Dproperty=value","-Dproperty1=value1","-projecthelp"};try {CommandLine line=parser.parse(options,args);String[]opts=line.getOptionValues("D");assertEquals("property",opts[0]);assertEquals("value",opts[1]);assertEquals("property1",opts[2]);assertEquals("value1",opts[3]);assertEquals(line.getOptionValue("buildfile"),"mybuild.xml");assertTrue(line.hasOption("projecthelp"));}catch(ParseException exp){fail("Unexpected exception:" + exp.getMessage());}}
public void testSimpleShort(){String[]args=new String[]{"-a","-b","toast","foo","bar"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testSimpleLong(){String[]args=new String[]{"--enable-a","--bfile","toast","foo","bar"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm arg of --bfile",cl.getOptionValue("bfile").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testComplexShort(){String[]args=new String[]{"-acbtoast","foo","bar"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testExtraOption(){String[]args=new String[]{"-adbtoast","foo","bar"};boolean caught=false;try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 3);}catch(UnrecognizedOptionException e){caught=true;}catch(ParseException e){fail(e.toString());}assertTrue("Confirm UnrecognizedOptionException caught",caught);}
public void testMissingArg(){String[]args=new String[]{"-acb"};boolean caught=false;try {CommandLine cl=_parser.parse(_options,args);}catch(MissingArgumentException e){caught=true;}catch(ParseException e){fail(e.toString());}assertTrue("Confirm MissingArgumentException caught",caught);}
public void testStop(){String[]args=new String[]{"-c","foober","-btoast"};try {CommandLine cl=_parser.parse(_options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testMultiple(){String[]args=new String[]{"-c","foobar","-btoast"};try {CommandLine cl=_parser.parse(_options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);cl=_parser.parse(_options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}catch(ParseException e){fail(e.toString());}}
public void testMultipleWithLong(){String[]args=new String[]{"--copt","foobar","--bfile","toast"};try {CommandLine cl=_parser.parse(_options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=_parser.parse(_options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}catch(ParseException e){fail(e.toString());}}
public void testDoubleDash(){String[]args=new String[]{"--copt","--","-b","toast"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm -b is not set",!cl.hasOption("b"));assertTrue("Confirm 2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testSingleDash(){String[]args=new String[]{"--copt","-b","-","-a","-"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("-"));assertTrue("Confirm 1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("-"));}catch(ParseException e){fail(e.toString());}}
public void testShortNoArg(){assertTrue(_cl.hasOption("a"));assertNull(_cl.getOptionValue("a"));}
public void testShortWithArg(){assertTrue(_cl.hasOption("b"));assertNotNull(_cl.getOptionValue("b"));assertEquals(_cl.getOptionValue("b"),"foo");}
public void testLongNoArg(){assertTrue(_cl.hasOption("c"));assertNull(_cl.getOptionValue("c"));}
public void testLongWithArg(){assertTrue(_cl.hasOption("d"));assertNotNull(_cl.getOptionValue("d"));assertEquals(_cl.getOptionValue("d"),"bar");}
public void testShortOptionalArgNoValue(){String[]args=new String[]{"-e"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("e"));assertNull(cmd.getOptionValue("e"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testShortOptionalArgValue(){String[]args=new String[]{"-e","everything"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("e"));assertEquals("everything",cmd.getOptionValue("e"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testLongOptionalNoValue(){String[]args=new String[]{"--fish"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("fish"));assertNull(cmd.getOptionValue("fish"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testLongOptionalArgValue(){String[]args=new String[]{"--fish","face"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("fish"));assertEquals("face",cmd.getOptionValue("fish"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testShortOptionalArgValues(){String[]args=new String[]{"-j","ink","idea"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("j"));assertEquals("ink",cmd.getOptionValue("j"));assertEquals("ink",cmd.getOptionValues("j")[0]);assertEquals("idea",cmd.getOptionValues("j")[1]);assertEquals(cmd.getArgs().length,0);}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testLongOptionalArgValues(){String[]args=new String[]{"--gravy","gold","garden"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("gravy"));assertEquals("gold",cmd.getOptionValue("gravy"));assertEquals("gold",cmd.getOptionValues("gravy")[0]);assertEquals("garden",cmd.getOptionValues("gravy")[1]);assertEquals(cmd.getArgs().length,0);}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testShortOptionalNArgValues(){String[]args=new String[]{"-i","ink","idea","isotope","ice"};try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertEquals("ink",cmd.getOptionValues("i")[0]);assertEquals("idea",cmd.getOptionValues("i")[1]);assertEquals(cmd.getArgs().length,2);assertEquals("isotope",cmd.getArgs()[0]);assertEquals("ice",cmd.getArgs()[1]);}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testLongOptionalNArgValues(){String[]args=new String[]{"--hide","house","hair","head"};CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(opts,args);assertTrue(cmd.hasOption("hide"));assertEquals("house",cmd.getOptionValue("hide"));assertEquals("house",cmd.getOptionValues("hide")[0]);assertEquals("hair",cmd.getOptionValues("hide")[1]);assertEquals(cmd.getArgs().length,1);assertEquals("head",cmd.getArgs()[0]);}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testPropertyOptionSingularValue(){Properties properties=new Properties();properties.setProperty("hide","seek");CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(opts,null,properties);assertTrue(cmd.hasOption("hide"));assertEquals("seek",cmd.getOptionValue("hide"));assertTrue(!cmd.hasOption("fake"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testPropertyOptionFlags(){Properties properties=new Properties();properties.setProperty("a","true");properties.setProperty("c","yes");properties.setProperty("e","1");CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}properties=new Properties();properties.setProperty("a","false");properties.setProperty("c","no");properties.setProperty("e","0");try {CommandLine cmd=parser.parse(opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(!cmd.hasOption("e"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}properties=new Properties();properties.setProperty("a","TRUE");properties.setProperty("c","nO");properties.setProperty("e","TrUe");try {CommandLine cmd=parser.parse(opts,null,properties);assertTrue(cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(cmd.hasOption("e"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}properties=new Properties();properties.setProperty("a","just a string");properties.setProperty("e","");try {CommandLine cmd=parser.parse(opts,null,properties);assertTrue(!cmd.hasOption("a"));assertTrue(!cmd.hasOption("c"));assertTrue(!cmd.hasOption("e"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testPropertyOptionMultipleValues(){Properties properties=new Properties();properties.setProperty("k","one,two");CommandLineParser parser=new PosixParser();String[]values=new String[]{"one","two"};try {CommandLine cmd=parser.parse(opts,null,properties);assertTrue(cmd.hasOption("k"));assertTrue(Arrays.equals(values,cmd.getOptionValues('k')));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testPropertyOverrideValues(){String[]args=new String[]{"-j","found","-i","ink"};Properties properties=new Properties();properties.setProperty("j","seek");try {CommandLineParser parser=new PosixParser();CommandLine cmd=parser.parse(opts,args,properties);assertTrue(cmd.hasOption("j"));assertEquals("found",cmd.getOptionValue("j"));assertTrue(cmd.hasOption("i"));assertEquals("ink",cmd.getOptionValue("i"));assertTrue(!cmd.hasOption("fake"));}catch(ParseException e){fail("Cannot setUp()CommandLine: " + e.toString());}}
public void testBasic()throws Exception {String[]args=new String[]{"-a","Caesar","-k","A"};CommandLine line=parser.parse(options,args);assertEquals("Caesar",line.getOptionValue("a"));assertEquals("A",line.getOptionValue("k"));}
public void testMistakenArgument()throws Exception {String[]args=new String[]{"-a","Caesar","-k","A"};CommandLine line=parser.parse(options,args);args=new String[]{"-a","Caesar","-k","a"};line=parser.parse(options,args);assertEquals("Caesar",line.getOptionValue("a"));assertEquals("a",line.getOptionValue("k"));}
public void testLackOfError()throws Exception {String[]args=new String[]{"-k","-a","Caesar"};try {CommandLine line=parser.parse(options,args);fail("MissingArgumentException expected");}catch(MissingArgumentException mae){}}
public void testGetsDefaultIfOptional()throws Exception {String[]args=new String[]{"-k","-a","Caesar"};options.getOption("k").setOptionalArg(true);CommandLine line=parser.parse(options,args);assertEquals("Caesar",line.getOptionValue("a"));assertEquals("a",line.getOptionValue("k","a"));}
public void testShortArgs(){assertTrue(_cmdline.hasOption("a"));assertTrue(_cmdline.hasOption("c"));assertNull(_cmdline.getOptionValues("a"));assertNull(_cmdline.getOptionValues("c"));}
public void testShortArgsWithValue(){assertTrue(_cmdline.hasOption("b"));assertTrue(_cmdline.getOptionValue("b").equals("foo"));assertTrue(_cmdline.getOptionValues("b").length == 1);assertTrue(_cmdline.hasOption("d"));assertTrue(_cmdline.getOptionValue("d").equals("bar"));assertTrue(_cmdline.getOptionValues("d").length == 1);}
public void testMultipleArgValues(){String[]result=_cmdline.getOptionValues("e");String[]values=new String[]{"one","two"};assertTrue(_cmdline.hasOption("e"));assertTrue(_cmdline.getOptionValues("e").length == 2);assertTrue(Arrays.equals(values,_cmdline.getOptionValues("e")));}
public void testTwoArgValues(){String[]result=_cmdline.getOptionValues("g");String[]values=new String[]{"val1","val2"};assertTrue(_cmdline.hasOption("g"));assertTrue(_cmdline.getOptionValues("g").length == 2);assertTrue(Arrays.equals(values,_cmdline.getOptionValues("g")));}
public void testComplexValues(){String[]result=_cmdline.getOptionValues("h");String[]values=new String[]{"val1","val2"};assertTrue(_cmdline.hasOption("i"));assertTrue(_cmdline.hasOption("h"));assertTrue(_cmdline.getOptionValues("h").length == 2);assertTrue(Arrays.equals(values,_cmdline.getOptionValues("h")));}
public void testExtraArgs(){String[]args=new String[]{"arg1","arg2","arg3"};assertTrue(_cmdline.getArgs().length == 3);assertTrue(Arrays.equals(args,_cmdline.getArgs()));}
public void testCharSeparator(){String[]values=new String[]{"key","value","key","value"};assertTrue(_cmdline.hasOption("j"));assertTrue(_cmdline.hasOption('j'));assertEquals(4,_cmdline.getOptionValues("j").length);assertEquals(4,_cmdline.getOptionValues('j').length);assertTrue(Arrays.equals(values,_cmdline.getOptionValues("j")));assertTrue(Arrays.equals(values,_cmdline.getOptionValues('j')));values=new String[]{"key1","value1","key2","value2"};assertTrue(_cmdline.hasOption("k"));assertTrue(_cmdline.hasOption('k'));assertTrue(_cmdline.getOptionValues("k").length == 4);assertTrue(_cmdline.getOptionValues('k').length == 4);assertTrue(Arrays.equals(values,_cmdline.getOptionValues("k")));assertTrue(Arrays.equals(values,_cmdline.getOptionValues('k')));values=new String[]{"key","value"};assertTrue(_cmdline.hasOption("m"));assertTrue(_cmdline.hasOption('m'));assertTrue(_cmdline.getOptionValues("m").length == 2);assertTrue(_cmdline.getOptionValues('m').length == 2);assertTrue(Arrays.equals(values,_cmdline.getOptionValues("m")));assertTrue(Arrays.equals(values,_cmdline.getOptionValues('m')));}
public void test11457(){Options options=new Options();options.addOption(OptionBuilder.withLongOpt("verbose").create());String[]args=new String[]{"--verbose"};CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(options,args);assertTrue(cmd.hasOption("verbose"));}catch(ParseException exp){exp.printStackTrace();fail("Unexpected Exception: " + exp.getMessage());}}
public void test11458(){Options options=new Options();options.addOption(OptionBuilder.withValueSeparator('=').hasArgs().create('D'));options.addOption(OptionBuilder.withValueSeparator(':').hasArgs().create('p'));String[]args=new String[]{"-DJAVA_HOME=/opt/java","-pfile1:file2:file3"};CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(options,args);String[]values=cmd.getOptionValues('D');assertEquals(values[0],"JAVA_HOME");assertEquals(values[1],"/opt/java");values=cmd.getOptionValues('p');assertEquals(values[0],"file1");assertEquals(values[1],"file2");assertEquals(values[2],"file3");java.util.Iterator iter=cmd.iterator();while (iter.hasNext()){Option opt=(Option)iter.next();switch (opt.getId()){case 'D':        assertEquals(opt.getValue(0),"JAVA_HOME");assertEquals(opt.getValue(1),"/opt/java");break;case 'p':  assertEquals(opt.getValue(0),"file1");assertEquals(opt.getValue(1),"file2");assertEquals(opt.getValue(2),"file3");break;default:fail("-D option not found");}}}catch (ParseException exp){fail("Unexpected Exception:\nMessage:" + exp.getMessage()+ "Type: "+ exp.getClass().getName());}}
public void test11680(){Options options=new Options();options.addOption("f",true,"foobar");options.addOption("m",true,"missing");String[]args=new String[]{"-f","foo"};CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(options,args);try {cmd.getOptionValue("f","default f");cmd.getOptionValue("m","default m");}catch(NullPointerException exp){fail("NullPointer caught: " + exp.getMessage());}}catch(ParseException exp){fail("Unexpected Exception: " + exp.getMessage());}}
public void test11456(){Options options=new Options();options.addOption(OptionBuilder.hasOptionalArg().create('a'));options.addOption(OptionBuilder.hasArg().create('b'));String[]args=new String[]{"-a","-bvalue"};CommandLineParser parser=new PosixParser();try {CommandLine cmd=parser.parse(options,args);assertEquals(cmd.getOptionValue('b'),"value");}catch(ParseException exp){fail("Unexpected Exception: " + exp.getMessage());}options=new Options();options.addOption(OptionBuilder.hasOptionalArg().create('a'));options.addOption(OptionBuilder.hasArg().create('b'));args=new String[]{"-a","-b","value"};parser=new GnuParser();try {CommandLine cmd=parser.parse(options,args);assertEquals(cmd.getOptionValue('b'),"value");}catch(ParseException exp){fail("Unexpected Exception: " + exp.getMessage());}}
public void test12210(){Options mainOptions=new Options();String[]argv=new String[]{"-exec","-exec_opt1","-exec_opt2"};OptionGroup grp=new OptionGroup();grp.addOption(new Option("exec",false,"description for this option"));grp.addOption(new Option("rep",false,"description for this option"));mainOptions.addOptionGroup(grp);Options execOptions=new Options();execOptions.addOption("exec_opt1",false," desc");execOptions.addOption("exec_opt2",false," desc");Options repOptions=new Options();repOptions.addOption("repopto",false,"desc");repOptions.addOption("repoptt",false,"desc");GnuParser parser=new GnuParser();try {CommandLine cmd=parser.parse(mainOptions,argv,true);argv=cmd.getArgs();if (cmd.hasOption("exec")){cmd=parser.parse(execOptions,argv,false);assertTrue(cmd.hasOption("exec_opt1"));assertTrue(cmd.hasOption("exec_opt2"));}else     if (cmd.hasOption("rep")){cmd=parser.parse(repOptions,argv,false);}else {fail("exec option not found");}}catch(ParseException exp){fail("Unexpected exception: " + exp.getMessage());}}
public void test13425(){Options options=new Options();Option oldpass=OptionBuilder.withLongOpt("old-password").withDescription("Use this option to specify the old password").hasArg().create('o');Option newpass=OptionBuilder.withLongOpt("new-password").withDescription("Use this option to specify the new password").hasArg().create('n');String[]args={"-o","-n","newpassword"};options.addOption(oldpass);options.addOption(newpass);Parser parser=new PosixParser();try {CommandLine line=parser.parse(options,args);}catch(Exception exp){assertTrue(exp != null);return;}fail("MissingArgumentException not caught.");}
public void test13666(){Options options=new Options();Option dir=OptionBuilder.withDescription("dir").hasArg().create('d');options.addOption(dir);final PrintStream oldSystemOut=System.out;try {final ByteArrayOutputStream bytes=new ByteArrayOutputStream();final PrintStream print=new PrintStream(bytes);print.println();final String eol=bytes.toString();bytes.reset();System.setOut(new PrintStream(bytes));try {HelpFormatter formatter=new HelpFormatter();formatter.printHelp("dir",options);}catch(Exception exp){fail("Unexpected Exception: " + exp.getMessage());}assertEquals("usage: dir" + eol + " -d <arg>   dir"+ eol,bytes.toString());}finally {System.setOut(oldSystemOut);}}
public void test13935(){OptionGroup directions=new OptionGroup();Option left=new Option("l","left",false,"go left");Option right=new Option("r","right",false,"go right");Option straight=new Option("s","straight",false,"go straight");Option forward=new Option("f","forward",false,"go forward");forward.setRequired(true);directions.addOption(left);directions.addOption(right);directions.setRequired(true);Options opts=new Options();opts.addOptionGroup(directions);opts.addOption(straight);CommandLineParser parser=new PosixParser();boolean exception=false;String[]args=new String[]{};try {CommandLine line=parser.parse(opts,args);}catch(ParseException exp){exception=true;}if (!exception){fail("Expected exception not caught.");}exception=false;args=new String[]{"-s"};try {CommandLine line=parser.parse(opts,args);}catch(ParseException exp){exception=true;}if (!exception){fail("Expected exception not caught.");}exception=false;args=new String[]{"-s","-l"};try {CommandLine line=parser.parse(opts,args);}catch(ParseException exp){fail("Unexpected exception: " + exp.getClass().getName()+ ":"+ exp.getMessage());}opts.addOption(forward);args=new String[]{"-s","-l","-f"};try {CommandLine line=parser.parse(opts,args);}catch(ParseException exp){fail("Unexpected exception: " + exp.getClass().getName()+ ":"+ exp.getMessage());}}
public void test14786()throws Exception {Option o=OptionBuilder.isRequired().withDescription("test").create("test");Options opts=new Options();opts.addOption(o);opts.addOption(o);CommandLineParser parser=new GnuParser();String[]args=new String[]{"-test"};CommandLine line=parser.parse(opts,args);assertTrue(line.hasOption("test"));}
public void test15046()throws Exception {CommandLineParser parser=new PosixParser();final String[]CLI_ARGS=new String[]{"-z","c"};Option option=new Option("z","timezone",true,"affected option");Options cliOptions=new Options();cliOptions.addOption(option);parser.parse(cliOptions,CLI_ARGS);cliOptions.addOption("c","conflict",true,"conflict option");CommandLine line=parser.parse(cliOptions,CLI_ARGS);assertEquals(option.getValue(),"c");assertTrue(!line.hasOption("c"));}
public void test15648()throws Exception {CommandLineParser parser=new PosixParser();final String[]args=new String[]{"-m","\"Two Words\""};Option m=OptionBuilder.hasArgs().create("m");Options options=new Options();options.addOption(m);CommandLine line=parser.parse(options,args);assertEquals("Two Words",line.getOptionValue("m"));}
public void test27635(){}
public void test31148()throws ParseException {Option multiArgOption=new Option("o","option with multiple args");multiArgOption.setArgs(1);Options options=new Options();options.addOption(multiArgOption);Parser parser=new PosixParser();String[]args=new String[]{};Properties props=new Properties();props.setProperty("o","ovalue");CommandLine cl=parser.parse(options,args,props);assertTrue(cl.hasOption('o'));assertEquals("ovalue",cl.getOptionValue('o'));}
public void test21215(){Options options=new Options();HelpFormatter formatter=new HelpFormatter();String SEP=System.getProperty("line.separator");String header=SEP + "Header";String footer="Footer";StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"foobar",header,options,2,2,footer,true);assertEquals("usage: foobar" + SEP + ""+ SEP+ "Header"+ SEP+ ""+ SEP+ "Footer"+ SEP,out.toString());}
public void test19383(){}
public void testHelpOptions(){Option longOnly1=OptionBuilder.withLongOpt("long-only1").create();Option longOnly2=OptionBuilder.withLongOpt("long-only2").create();Option shortOnly1=OptionBuilder.create("1");Option shortOnly2=OptionBuilder.create("2");Option bothA=OptionBuilder.withLongOpt("bothA").create("a");Option bothB=OptionBuilder.withLongOpt("bothB").create("b");Options options=new Options();options.addOption(longOnly1);options.addOption(longOnly2);options.addOption(shortOnly1);options.addOption(shortOnly2);options.addOption(bothA);options.addOption(bothB);Collection allOptions=new ArrayList();allOptions.add(longOnly1);allOptions.add(longOnly2);allOptions.add(shortOnly1);allOptions.add(shortOnly2);allOptions.add(bothA);allOptions.add(bothB);Collection helpOptions=options.helpOptions();assertTrue("Everything in all should be in help",helpOptions.containsAll(allOptions));assertTrue("Everything in help should be in all",allOptions.containsAll(helpOptions));}
public void testMissingOptionException()throws ParseException {Options options=new Options();options.addOption(OptionBuilder.isRequired().create("f"));try {new PosixParser().parse(options,new String[0]);fail("Expected MissingOptionException to be thrown");}catch(MissingOptionException e){assertEquals("Missing required option: f",e.getMessage());}}
public void testMissingOptionsException()throws ParseException {Options options=new Options();options.addOption(OptionBuilder.isRequired().create("f"));options.addOption(OptionBuilder.isRequired().create("x"));try {new PosixParser().parse(options,new String[0]);fail("Expected MissingOptionException to be thrown");}catch(MissingOptionException e){assertEquals("Missing required options: fx",e.getMessage());}}
public void testSingleOptionFromGroup(){String[]args=new String[]{"-f"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testSingleOption(){String[]args=new String[]{"-r"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is set",cl.hasOption("r"));assertTrue("Confirm -f is NOT set",!cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testTwoValidOptions(){String[]args=new String[]{"-r","-f"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is set",cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testSingleLongOption(){String[]args=new String[]{"--file"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testTwoValidLongOptions(){String[]args=new String[]{"--revision","--file"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is set",cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm no extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testNoOptionsExtraArgs(){String[]args=new String[]{"arg1","arg2"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is NOT set",!cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is NOT set",!cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm TWO extra args",cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testTwoOptionsFromGroup(){String[]args=new String[]{"-f","-d"};try {CommandLine cl=parser.parse(_options,args);fail("two arguments from group not allowed");}catch(ParseException e){if (!(e instanceof AlreadySelectedException)){fail("incorrect exception caught:" + e.getMessage());}}}
public void testTwoLongOptionsFromGroup(){String[]args=new String[]{"--file","--directory"};try {CommandLine cl=parser.parse(_options,args);fail("two arguments from group not allowed");}catch(ParseException e){if (!(e instanceof AlreadySelectedException)){fail("incorrect exception caught:" + e.getMessage());}}}
public void testTwoOptionsFromDifferentGroup(){String[]args=new String[]{"-f","-s"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -r is NOT set",!cl.hasOption("r"));assertTrue("Confirm -f is set",cl.hasOption("f"));assertTrue("Confirm -d is NOT set",!cl.hasOption("d"));assertTrue("Confirm -s is set",cl.hasOption("s"));assertTrue("Confirm -c is NOT set",!cl.hasOption("c"));assertTrue("Confirm NO extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testValidLongOnlyOptions(){try {CommandLine cl=parser.parse(_options,new String[]{"--export"});assertTrue("Confirm --export is set",cl.hasOption("export"));}catch(ParseException e){fail(e.toString());}try {CommandLine cl=parser.parse(_options,new String[]{"--import"});assertTrue("Confirm --import is set",cl.hasOption("import"));}catch(ParseException e){fail(e.toString());}}
public void testWithRequiredOption(){String[]args=new String[]{"-b","file"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -a is NOT set",!cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testOptionAndRequiredOption(){String[]args=new String[]{"-a","-b","file"};try {CommandLine cl=parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("file"));assertTrue("Confirm NO of extra args",cl.getArgList().size()== 0);}catch(ParseException e){fail(e.toString());}}
public void testMissingRequiredOption(){String[]args=new String[]{"-a"};try {CommandLine cl=parser.parse(_options,args);fail("exception should have been thrown");}catch(ParseException e){if (!(e instanceof MissingOptionException)){fail("expected to catch MissingOptionException");}}}
public void testOptionAndOptionWithArgument(){String[]args=new String[]{"-p","-attr","p"};try {CommandLine cl=parser.parse(options,args);assertTrue("Confirm -p is set",cl.hasOption("p"));assertTrue("Confirm -attr is set",cl.hasOption("attr"));assertTrue("Confirm arg of -attr",cl.getOptionValue("attr").equals("p"));assertTrue("Confirm all arguments recognized",cl.getArgs().length == 0);}catch(ParseException e){fail(e.toString());}}
public void testOptionWithArgument(){String[]args=new String[]{"-attr","p"};try {CommandLine cl=parser.parse(options,args);assertFalse("Confirm -p is set",cl.hasOption("p"));assertTrue("Confirm -attr is set",cl.hasOption("attr"));assertTrue("Confirm arg of -attr",cl.getOptionValue("attr").equals("p"));assertTrue("Confirm all arguments recognized",cl.getArgs().length == 0);}catch(ParseException e){fail(e.toString());}}
public void testOption(){String[]args=new String[]{"-p"};try {CommandLine cl=parser.parse(options,args);assertTrue("Confirm -p is set",cl.hasOption("p"));assertFalse("Confirm -attr is not set",cl.hasOption("attr"));assertTrue("Confirm all arguments recognized",cl.getArgs().length == 0);}catch(ParseException e){fail(e.toString());}}
public void testSimpleShort(){String[]args=new String[]{"-a","-b","toast","foo","bar"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testSimpleLong(){String[]args=new String[]{"--enable-a","--bfile","toast","foo","bar"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testExtraOption(){String[]args=new String[]{"-a","-d","-b","toast","foo","bar"};boolean caught=false;try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm size of extra args",cl.getArgList().size()== 3);}catch(UnrecognizedOptionException e){caught=true;}catch(ParseException e){fail(e.toString());}assertTrue("Confirm UnrecognizedOptionException caught",caught);}
public void testMissingArg(){String[]args=new String[]{"-b"};boolean caught=false;try {CommandLine cl=_parser.parse(_options,args);}catch(MissingArgumentException e){caught=true;}catch(ParseException e){fail(e.toString());}assertTrue("Confirm MissingArgumentException caught",caught);}
public void testStop(){String[]args=new String[]{"-c","foober","-b","toast"};try {CommandLine cl=_parser.parse(_options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);}catch(ParseException e){fail(e.toString());}}
public void testMultiple(){String[]args=new String[]{"-c","foobar","-b","toast"};try {CommandLine cl=_parser.parse(_options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=_parser.parse(_options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}catch(ParseException e){fail(e.toString());}}
public void testMultipleWithLong(){String[]args=new String[]{"--copt","foobar","--bfile","toast"};try {CommandLine cl=_parser.parse(_options,args,true);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm  3 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 3);cl=_parser.parse(_options,cl.getArgs());assertTrue("Confirm -c is not set",!cl.hasOption("c"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("toast"));assertTrue("Confirm  1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm  value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("foobar"));}catch(ParseException e){fail(e.toString());}}
public void testDoubleDash(){String[]args=new String[]{"--copt","--","-b","toast"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -c is set",cl.hasOption("c"));assertTrue("Confirm -b is not set",!cl.hasOption("b"));assertTrue("Confirm 2 extra args: " + cl.getArgList().size(),cl.getArgList().size()== 2);}catch(ParseException e){fail(e.toString());}}
public void testSingleDash(){String[]args=new String[]{"--copt","-b","-","-a","-"};try {CommandLine cl=_parser.parse(_options,args);assertTrue("Confirm -a is set",cl.hasOption("a"));assertTrue("Confirm -b is set",cl.hasOption("b"));assertTrue("Confirm arg of -b",cl.getOptionValue("b").equals("-"));assertTrue("Confirm 1 extra arg: " + cl.getArgList().size(),cl.getArgList().size()== 1);assertTrue("Confirm value of extra arg: " + cl.getArgList().get(0),cl.getArgList().get(0).equals("-"));}catch(ParseException e){fail(e.toString());}}
public void test()throws Exception {Options options=buildCommandLineOptions();CommandLineParser parser=new PosixParser();String[]args=new String[]{"-t","-something"};CommandLine commandLine;commandLine=parser.parse(options,args);assertEquals("-something",commandLine.getOptionValue('t'));}
public void testSimplePattern(){try {Options options=PatternOptionBuilder.parsePattern("a:b@cde>f+n%t/");String[]args=new String[]{"-c","-a","foo","-b","java.util.Vector","-e","build.xml","-f","java.util.Calendar","-n","4.5","-t","http://jakarta.apache.org/"};CommandLineParser parser=new PosixParser();CommandLine line=parser.parse(options,args);assertEquals("flag a","foo",line.getOptionValue("a"));assertEquals("string flag a","foo",line.getOptionObject("a"));assertEquals("object flag b",new java.util.Vector(),line.getOptionObject("b"));assertTrue("boolean true flag c",line.hasOption("c"));assertFalse("boolean false flag d",line.hasOption("d"));assertEquals("file flag e",new java.io.File("build.xml"),line.getOptionObject("e"));assertEquals("class flag f",java.util.Calendar.class,line.getOptionObject("f"));assertEquals("number flag n",new Double(4.5),line.getOptionObject("n"));assertEquals("url flag t",new java.net.URL("http://jakarta.apache.org/"),line.getOptionObject("t"));assertEquals("flag a","foo",line.getOptionValue('a'));assertEquals("string flag a","foo",line.getOptionObject('a'));assertEquals("object flag b",new java.util.Vector(),line.getOptionObject('b'));assertTrue("boolean true flag c",line.hasOption('c'));assertFalse("boolean false flag d",line.hasOption('d'));assertEquals("file flag e",new java.io.File("build.xml"),line.getOptionObject('e'));assertEquals("class flag f",java.util.Calendar.class,line.getOptionObject('f'));assertEquals("number flag n",new Double(4.5),line.getOptionObject('n'));assertEquals("url flag t",new java.net.URL("http://jakarta.apache.org/"),line.getOptionObject('t'));}catch(ParseException exp){fail(exp.getMessage());}catch(java.net.MalformedURLException exp){fail(exp.getMessage());}}
public void testCLI18(){Options options=new Options();options.addOption(new Option("a","aaa",false,"aaaaaaa"));options.addOption(new Option(null,"bbb",false,"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f"));options.addOption(new Option("c",null,false,"ccccccc"));HelpFormatter formatter=new HelpFormatter();StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,"foobar","dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s",options,2,2,"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh" + '\r' + '\n'+ "rarrr",true);}
public void testCLI13()throws ParseException {final String debugOpt="debug";Option debug=OptionBuilder.withArgName(debugOpt).withDescription("turn on debugging").withLongOpt(debugOpt).hasArg().create('d');Options options=new Options();options.addOption(debug);CommandLine commandLine=new PosixParser().parse(options,new String[]{"-d","true"});assertEquals("true",commandLine.getOptionValue(debugOpt));assertEquals("true",commandLine.getOptionValue('d'));assertTrue(commandLine.hasOption('d'));assertTrue(commandLine.hasOption(debugOpt));}
public void testFindWrapPos()throws Exception {HelpFormatter hf=new HelpFormatter();String text="This is a test.";assertEquals("wrap position",7,hf.findWrapPos(text,8,0));assertEquals("wrap position 2",-1,hf.findWrapPos(text,8,8));text="aaaa aa";assertEquals("wrap position 3",4,hf.findWrapPos(text,3,0));}
public void testPrintWrapped()throws Exception {StringBuffer sb=new StringBuffer();HelpFormatter hf=new HelpFormatter();String text="This is a test.";String expected;expected="This is a" + hf.getNewLine()+ "test.";hf.renderWrappedText(sb,12,0,text);assertEquals("single line text",expected,sb.toString());sb.setLength(0);expected="This is a" + hf.getNewLine()+ "    test.";hf.renderWrappedText(sb,12,4,text);assertEquals("single line padded text",expected,sb.toString());text="aaaa aaaa aaaa" + hf.getNewLine()+ "aaaaaa"+ hf.getNewLine()+ "aaaaa";expected=text;sb.setLength(0);hf.renderWrappedText(sb,16,0,text);assertEquals("multi line text",expected,sb.toString());expected="aaaa aaaa aaaa" + hf.getNewLine()+ "    aaaaaa"+ hf.getNewLine()+ "    aaaaa";sb.setLength(0);hf.renderWrappedText(sb,16,4,text);assertEquals("multi-line padded text",expected,sb.toString());}
public void testPrintOptions()throws Exception {StringBuffer sb=new StringBuffer();HelpFormatter hf=new HelpFormatter();final int leftPad=1;final int descPad=3;final String lpad=hf.createPadding(leftPad);final String dpad=hf.createPadding(descPad);Options options=null;String expected=null;options=new Options().addOption("a",false,"aaaa aaaa aaaa aaaa aaaa");expected=lpad + "-a" + dpad+ "aaaa aaaa aaaa aaaa aaaa";hf.renderOptions(sb,60,options,leftPad,descPad);assertEquals("simple non-wrapped option",expected,sb.toString());int nextLineTabStop=leftPad + descPad + "-a".length();expected=lpad + "-a" + dpad+ "aaaa aaaa aaaa"+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ "aaaa aaaa";sb.setLength(0);hf.renderOptions(sb,nextLineTabStop + 17,options,leftPad,descPad);assertEquals("simple wrapped option",expected,sb.toString());options=new Options().addOption("a","aaa",false,"dddd dddd dddd dddd");expected=lpad + "-a,--aaa" + dpad+ "dddd dddd dddd dddd";sb.setLength(0);hf.renderOptions(sb,60,options,leftPad,descPad);assertEquals("long non-wrapped option",expected,sb.toString());nextLineTabStop=leftPad + descPad + "-a,--aaa".length();expected=lpad + "-a,--aaa" + dpad+ "dddd dddd"+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ "dddd dddd";sb.setLength(0);hf.renderOptions(sb,25,options,leftPad,descPad);assertEquals("long wrapped option",expected,sb.toString());options=new Options().addOption("a","aaa",false,"dddd dddd dddd dddd").addOption("b",false,"feeee eeee eeee eeee");expected=lpad + "-a,--aaa" + dpad+ "dddd dddd"+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ "dddd dddd"+ hf.getNewLine()+ lpad+ "-b      "+ dpad+ "feeee eeee"+ hf.getNewLine()+ hf.createPadding(nextLineTabStop)+ "eeee eeee";sb.setLength(0);hf.renderOptions(sb,25,options,leftPad,descPad);assertEquals("multiple wrapped options",expected,sb.toString());}
public void testAutomaticUsage(){}
public void testSimple(){Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("b",true,"toggle -b");}
public void testDuplicateSimple(){Options opts=new Options();opts.addOption("a",false,"toggle -a");opts.addOption("a",true,"toggle -a*");assertEquals("last one in wins","toggle -a*",opts.getOption("a").getDescription());}
public void testLong(){Options opts=new Options();opts.addOption("a","--a",false,"toggle -a");opts.addOption("b","--b",true,"set -b");}
public void testDuplicateLong(){Options opts=new Options();opts.addOption("a","--a",false,"toggle -a");opts.addOption("a","--a",false,"toggle -a*");assertEquals("last one in wins","toggle -a*",opts.getOption("a").getDescription());}
public void testCompleteOption(){Option simple=OptionBuilder.withLongOpt("simple option").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription("this is a simple option").create('s');assertEquals("s",simple.getOpt());assertEquals("simple option",simple.getLongOpt());assertEquals("this is a simple option",simple.getDescription());assertEquals(simple.getType().getClass(),Float.class);assertTrue(simple.hasArg());assertTrue(simple.isRequired());assertTrue(simple.hasArgs());}
public void testTwoCompleteOptions(){Option simple=OptionBuilder.withLongOpt("simple option").hasArg().isRequired().hasArgs().withType(new Float(10)).withDescription("this is a simple option").create('s');assertEquals("s",simple.getOpt());assertEquals("simple option",simple.getLongOpt());assertEquals("this is a simple option",simple.getDescription());assertEquals(simple.getType().getClass(),Float.class);assertTrue(simple.hasArg());assertTrue(simple.isRequired());assertTrue(simple.hasArgs());simple=OptionBuilder.withLongOpt("dimple option").hasArg().withDescription("this is a dimple option").create('d');assertEquals("d",simple.getOpt());assertEquals("dimple option",simple.getLongOpt());assertEquals("this is a dimple option",simple.getDescription());assertNull(simple.getType());assertTrue(simple.hasArg());assertTrue(!simple.isRequired());assertTrue(!simple.hasArgs());}
public void testBaseOptionCharOpt(){Option base=OptionBuilder.withDescription("option description").create('o');assertEquals("o",base.getOpt());assertEquals("option description",base.getDescription());assertTrue(!base.hasArg());}
public void testBaseOptionStringOpt(){Option base=OptionBuilder.withDescription("option description").create("o");assertEquals("o",base.getOpt());assertEquals("option description",base.getDescription());assertTrue(!base.hasArg());}
public void testSpecialOptChars(){try {Option opt=OptionBuilder.withDescription("help options").create('?');assertEquals("?",opt.getOpt());}catch(IllegalArgumentException arg){fail("IllegalArgumentException caught");}try {Option opt=OptionBuilder.withDescription("read from stdin").create('@');assertEquals("@",opt.getOpt());}catch(IllegalArgumentException arg){fail("IllegalArgumentException caught");}}
public void testOptionArgNumbers(){Option opt=OptionBuilder.withDescription("option description").hasArgs(2).create('o');assertEquals(2,opt.getArgs());}
public void testIllegalOptions(){try {Option opt=OptionBuilder.withDescription("option description").create('"');fail("IllegalArgumentException not caught");}catch(IllegalArgumentException exp){}try {Option opt=OptionBuilder.create("opt`");fail("IllegalArgumentException not caught");}catch(IllegalArgumentException exp){}try {Option opt=OptionBuilder.create("opt");}catch(IllegalArgumentException exp){fail("IllegalArgumentException caught");}}
