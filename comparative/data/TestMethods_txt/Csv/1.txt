@Test public void testImmutalibity(){CSVFormat format=new CSVFormat('!','!','!','!',true,true,"\r\n",null);format.withDelimiter('?');format.withEncapsulator('?');format.withCommentStart('?');format.withLineSeparator("?");format.withEscape('?');format.withSurroundingSpacesIgnored(false);format.withEmptyLinesIgnored(false);assertEquals('!',format.getDelimiter());assertEquals('!',format.getEncapsulator());assertEquals('!',format.getCommentStart());assertEquals('!',format.getEscape());assertEquals("\r\n",format.getLineSeparator());assertTrue(format.isSurroundingSpacesIgnored());assertTrue(format.isEmptyLinesIgnored());}
@Test public void testMutators(){CSVFormat format=new CSVFormat('!','!','!','!',true,true,"\r\n",null);assertEquals('?',format.withDelimiter('?').getDelimiter());assertEquals('?',format.withEncapsulator('?').getEncapsulator());assertEquals('?',format.withCommentStart('?').getCommentStart());assertEquals("?",format.withLineSeparator("?").getLineSeparator());assertEquals('?',format.withEscape('?').getEscape());assertFalse(format.withSurroundingSpacesIgnored(false).isSurroundingSpacesIgnored());assertFalse(format.withEmptyLinesIgnored(false).isEmptyLinesIgnored());}
@Test public void testFormat(){CSVFormat format=CSVFormat.DEFAULT;assertEquals("",format.format());assertEquals("a,b,c",format.format("a","b","c"));assertEquals("\"x,y\",z",format.format("x,y","z"));}
@Test public void testValidation(){CSVFormat format=CSVFormat.DEFAULT;try {format.withDelimiter('\n');fail();}catch(IllegalArgumentException e){}try {format.withEscape('\r');fail();}catch(IllegalArgumentException e){}try {format.withEncapsulator('\n');fail();}catch(IllegalArgumentException e){}try {format.withCommentStart('\r');fail();}catch(IllegalArgumentException e){}try {format.withDelimiter('!').withEscape('!').validate();fail();}catch(IllegalArgumentException e){}try {format.withDelimiter('!').withCommentStart('!').validate();fail();}catch(IllegalArgumentException e){}try {format.withEncapsulator('!').withCommentStart('!').validate();fail();}catch(IllegalArgumentException e){}format.withEncapsulator(CSVFormat.DISABLED).withCommentStart(CSVFormat.DISABLED).validate();try {format.withEscape('!').withCommentStart('!').validate();fail();}catch(IllegalArgumentException e){}format.withEscape(CSVFormat.DISABLED).withCommentStart(CSVFormat.DISABLED).validate();try {format.withEncapsulator('!').withDelimiter('!').validate();fail();}catch(IllegalArgumentException e){}}
@SuppressWarnings("boxing")@Test public void testSerialization()throws Exception {ByteArrayOutputStream out=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(out);oos.writeObject(CSVFormat.DEFAULT);oos.flush();oos.close();ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));CSVFormat format=(CSVFormat)in.readObject();assertNotNull(format);assertEquals("delimiter",CSVFormat.DEFAULT.getDelimiter(),format.getDelimiter());assertEquals("encapsulator",CSVFormat.DEFAULT.getEncapsulator(),format.getEncapsulator());assertEquals("comment start",CSVFormat.DEFAULT.getCommentStart(),format.getCommentStart());assertEquals("line separator",CSVFormat.DEFAULT.getLineSeparator(),format.getLineSeparator());assertEquals("escape",CSVFormat.DEFAULT.getEscape(),format.getEscape());assertEquals("trim",CSVFormat.DEFAULT.isSurroundingSpacesIgnored(),format.isSurroundingSpacesIgnored());assertEquals("empty lines",CSVFormat.DEFAULT.isEmptyLinesIgnored(),format.isEmptyLinesIgnored());}
@Test public void testEmptyInput()throws Exception {ExtendedBufferedReader br=getBufferedReader("");assertEquals(ExtendedBufferedReader.END_OF_STREAM,br.read());assertEquals(ExtendedBufferedReader.END_OF_STREAM,br.lookAhead());assertEquals(ExtendedBufferedReader.END_OF_STREAM,br.readAgain());assertNull(br.readLine());assertEquals(0,br.read(new char[10],0,0));}
@Test public void testReadLookahead1(){}
@Test public void testReadLookahead2()throws Exception {char[]ref=new char[5];char[]res=new char[5];ExtendedBufferedReader br=getBufferedReader("abcdefg");ref[0]='a';ref[1]='b';ref[2]='c';assertEquals(3,br.read(res,0,3));assertArrayEquals(ref,res);assertEquals('c',br.readAgain());assertEquals('d',br.lookAhead());ref[4]='d';assertEquals(1,br.read(res,4,1));assertArrayEquals(ref,res);assertEquals('d',br.readAgain());}
@Test public void testReadLine()throws Exception {ExtendedBufferedReader br=getBufferedReader("");assertNull(br.readLine());br=getBufferedReader("\n");assertEquals("",br.readLine());assertNull(br.readLine());br=getBufferedReader("foo\n\nhello");assertEquals(0,br.getLineNumber());assertEquals("foo",br.readLine());assertEquals(1,br.getLineNumber());assertEquals("",br.readLine());assertEquals(2,br.getLineNumber());assertEquals("hello",br.readLine());assertEquals(3,br.getLineNumber());assertNull(br.readLine());assertEquals(3,br.getLineNumber());br=getBufferedReader("foo\n\nhello");assertEquals('f',br.read());assertEquals('o',br.lookAhead());assertEquals("oo",br.readLine());assertEquals(1,br.getLineNumber());assertEquals('\n',br.lookAhead());assertEquals("",br.readLine());assertEquals(2,br.getLineNumber());assertEquals('h',br.lookAhead());assertEquals("hello",br.readLine());assertNull(br.readLine());assertEquals(3,br.getLineNumber());br=getBufferedReader("foo\rbaar\r\nfoo");assertEquals("foo",br.readLine());assertEquals('b',br.lookAhead());assertEquals("baar",br.readLine());assertEquals('f',br.lookAhead());assertEquals("foo",br.readLine());assertNull(br.readLine());}
@Test public void testReadChar(){}
@Test public void testGetLine()throws IOException {CSVParser parser=new CSVParser(new StringReader(code),CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true));for(String[]re : res){assertArrayEquals(re,parser.getRecord().values());}assertNull(parser.getRecord());}
@Test public void testGetRecords()throws IOException {CSVParser parser=new CSVParser(new StringReader(code),CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true));List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}
@Test public void testExcelFormat1()throws IOException {String code="value1,value2,value3,value4\r\na,b,c,d\r\n  x,,," + "\r\n\r\n\"\"\"hello\"\"\",\"  \"\"world\"\"\",\"abc\ndef\",\r\n";String[][]res={{"value1","value2","value3","value4"},{"a","b","c","d"},{"  x","","",""},{""},{"\"hello\"","  \"world\"","abc\ndef",""}};CSVParser parser=new CSVParser(code,CSVFormat.EXCEL);List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}
@Test public void testExcelFormat2()throws Exception {String code="foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n";String[][]res={{"foo","baar"},{""},{"hello",""},{""},{"world",""}};CSVParser parser=new CSVParser(code,CSVFormat.EXCEL);List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}
@Test public void testEndOfFileBehaviourExcel()throws Exception {String[]codes={"hello,\r\n\r\nworld,\r\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\r\n","hello,\r\n\r\nworld,\"\"","hello,\r\n\r\nworld,\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\n","hello,\r\n\r\nworld,\"\""};String[][]res={{"hello",""},{""},{"world",""}};for(String code : codes){CSVParser parser=new CSVParser(code,CSVFormat.EXCEL);List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
@Test public void testEndOfFileBehaviorCSV()throws Exception {String[]codes={"hello,\r\n\r\nworld,\r\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\r\n","hello,\r\n\r\nworld,\"\"","hello,\r\n\r\nworld,\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\n","hello,\r\n\r\nworld,\"\""};String[][]res={{"hello",""},{"world",""}};for(String code : codes){CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
@Test public void testEmptyLineBehaviourExcel()throws Exception {String[]codes={"hello,\r\n\r\n\r\n","hello,\n\n\n","hello,\"\"\r\n\r\n\r\n","hello,\"\"\n\n\n"};String[][]res={{"hello",""},{""},{""}};for(String code : codes){CSVParser parser=new CSVParser(code,CSVFormat.EXCEL);List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
@Test public void testEmptyLineBehaviourCSV()throws Exception {String[]codes={"hello,\r\n\r\n\r\n","hello,\n\n\n","hello,\"\"\r\n\r\n\r\n","hello,\"\"\n\n\n"};String[][]res={{"hello",""}};for(String code : codes){CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
@Test public void testEmptyFile()throws Exception {CSVParser parser=new CSVParser("",CSVFormat.DEFAULT);assertNull(parser.getRecord());}
@Test @Ignore public void testBackslashEscapingOld()throws IOException {String code="one,two,three\n" + "on\\\"e,two\n" + "on\"e,two\n"+ "one,\"tw\\\"o\"\n"+ "one,\"t\\,wo\"\n"+ "one,two,\"th,ree\"\n"+ "\"a\\\\\"\n"+ "a\\,b\n"+ "\"a\\\\,b\"";String[][]res={{"one","two","three"},{"on\\\"e","two"},{"on\"e","two"},{"one","tw\"o"},{"one","t\\,wo"},{"one","two","th,ree"},{"a\\\\"},{"a\\","b"},{"a\\\\,b"}};CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}
@Test public void testBackslashEscaping()throws IOException {String code="one,two,three\n" + "'',''\n" + "/',/'\n"+ "'/'','/''\n"+ "'''',''''\n"+ "/,,/,\n"+ "//,//\n"+ "'//','//'\n"+ "   8,\"quoted \"\" /\" // string\"   \n"+ "9,/\n   \n"+ "";String[][]res={{"one","two","three"},{"",""},{"'","'"},{"'","'"},{"'","'"},{",",","},{"/","/"},{"/","/"},{"   8   ","   \"quoted \"\" \" / string\"   "},{"9","   \n   "}};CSVFormat format=new CSVFormat(',','\'',CSVFormat.DISABLED,'/',false,true,"\r\n",null);CSVParser parser=new CSVParser(code,format);List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}
@Test public void testBackslashEscaping2()throws IOException {String code="" + ",,\n" + " \t,,\n"+ " //,/,,/,\n"+ "";String[][]res={{" "," "," "},{" \t ","  "," "},{" / ",","," ,"}};CSVFormat format=new CSVFormat(',',CSVFormat.DISABLED,CSVFormat.DISABLED,'/',false,true,"\r\n",null);CSVParser parser=new CSVParser(code,format);List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);assertTrue(CSVPrinterTest.equals(res,records));}
@Test public void testDefaultFormat()throws IOException {String code="" + "a,b\n" + "\"\n\",\" \"\n"+ "\"\",#\n";String[][]res={{"a","b"},{"\n"," "},{"","#"}};CSVFormat format=CSVFormat.DEFAULT;assertEquals(CSVFormat.DISABLED,format.getCommentStart());CSVParser parser=new CSVParser(code,format);List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);assertTrue(CSVPrinterTest.equals(res,records));String[][]res_comments={{"a","b"},{"\n"," "},{""}};format=CSVFormat.DEFAULT.withCommentStart('#');parser=new CSVParser(code,format);records=parser.getRecords();assertTrue(CSVPrinterTest.equals(res_comments,records));}
@Test public void testCarriageReturnLineFeedEndings()throws IOException {String code="foo\r\nbaar,\r\nhello,world\r\n,kanu";CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());}
@Test public void testCarriageReturnEndings()throws IOException {String code="foo\rbaar,\rhello,world\r,kanu";CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());}
@Test public void testLineFeedEndings()throws IOException {String code="foo\nbaar,\nhello,world\n,kanu";CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());}
@Test public void testIgnoreEmptyLines()throws IOException {String code="\nfoo,baar\n\r\n,\n\n,world\r\n\n";CSVParser parser=new CSVParser(new StringReader(code));List<CSVRecord> records=parser.getRecords();assertEquals(3,records.size());}
@Test public void testForEach()throws Exception {List<CSVRecord> records=new ArrayList<CSVRecord>();Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");for(CSVRecord record : CSVFormat.DEFAULT.parse(in)){records.add(record);}assertEquals(3,records.size());assertArrayEquals(new String[]{"a","b","c"},records.get(0).values());assertArrayEquals(new String[]{"1","2","3"},records.get(1).values());assertArrayEquals(new String[]{"x","y","z"},records.get(2).values());}
@Test public void testIterator()throws Exception {Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");Iterator<CSVRecord> iterator=CSVFormat.DEFAULT.parse(in).iterator();assertTrue(iterator.hasNext());try {iterator.remove();fail("expected UnsupportedOperationException");}catch(UnsupportedOperationException expected){}assertArrayEquals(new String[]{"a","b","c"},iterator.next().values());assertArrayEquals(new String[]{"1","2","3"},iterator.next().values());assertTrue(iterator.hasNext());assertTrue(iterator.hasNext());assertTrue(iterator.hasNext());assertArrayEquals(new String[]{"x","y","z"},iterator.next().values());assertFalse(iterator.hasNext());try {iterator.next();fail("NoSuchElementException expected");}catch(NoSuchElementException e){}}
@Test public void testHeader()throws Exception {Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());CSVRecord record=records.next();assertEquals(record.get(0),record.get("a"));assertEquals(record.get(1),record.get("b"));assertEquals(record.get(2),record.get("c"));}assertFalse(records.hasNext());}
@Test public void testProvidedHeader()throws Exception {Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("A","B","C").parse(in).iterator();for (int i=0;i < 3;i++){assertTrue(records.hasNext());CSVRecord record=records.next();assertEquals(record.get(0),record.get("A"));assertEquals(record.get(1),record.get("B"));assertEquals(record.get(2),record.get("C"));}assertFalse(records.hasNext());}
@Test public void testGetLineNumberWithLF()throws Exception {CSVParser parser=new CSVParser("a\nb\nc",CSVFormat.DEFAULT.withLineSeparator("\n"));assertEquals(0,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(1,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(2,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(2,parser.getLineNumber());assertNull(parser.getRecord());}
@Test public void testGetLineNumberWithCRLF()throws Exception {CSVParser parser=new CSVParser("a\r\nb\r\nc",CSVFormat.DEFAULT.withLineSeparator("\r\n"));assertEquals(0,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(1,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(2,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(2,parser.getLineNumber());assertNull(parser.getRecord());}
@Test public void testGetLineNumberWithCR()throws Exception {CSVParser parser=new CSVParser("a\rb\rc",CSVFormat.DEFAULT.withLineSeparator("\r"));assertEquals(0,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(1,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(2,parser.getLineNumber());assertNotNull(parser.getRecord());assertEquals(2,parser.getLineNumber());assertNull(parser.getRecord());}
@Test public void testNextToken1()throws IOException {String code="abc,def,hijk,lmnop,qrst,uv ,wxy   ,z,,";CSVLexer parser=getLexer(code,CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true));assertTokenEquals(TOKEN,"abc",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"def",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"hijk",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"lmnop",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"qrst",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"uv",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"wxy",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"z",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"",parser.nextToken(new Token()));assertTokenEquals(EOF,"",parser.nextToken(new Token()));}
@Test public void testNextToken2()throws IOException {String code="1,2,3,\na,b x,c\n#foo\n\nd,e,\n\n";CSVFormat format=CSVFormat.DEFAULT.withCommentStart('#');CSVLexer parser=getLexer(code,format);assertTokenEquals(TOKEN,"1",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"2",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"3",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"b x",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"c",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"d",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"e",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"",parser.nextToken(new Token()));assertTokenEquals(EOF,"",parser.nextToken(new Token()));assertTokenEquals(EOF,"",parser.nextToken(new Token()));}
@Test public void testNextToken3()throws IOException {String code="a,\\,,b\n\\,,";CSVFormat format=CSVFormat.DEFAULT.withCommentStart('#');CSVLexer parser=getLexer(code,format);assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"\\",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"b",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"\\",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"",parser.nextToken(new Token()));assertTokenEquals(EOF,"",parser.nextToken(new Token()));}
@Test public void testNextToken4()throws IOException {String code="a,\"foo\",b\na,\" foo\",b\na,\"foo \"  ,b\na,\" foo \"  ,b";CSVLexer parser=getLexer(code,CSVFormat.DEFAULT.withSurroundingSpacesIgnored(true));assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"foo",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"b",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN," foo",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"b",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"foo ",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"b",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN," foo ",parser.nextToken(new Token()));assertTokenEquals(EOF,"b",parser.nextToken(new Token()));}
@Test public void testNextToken5()throws IOException {String code="a,\"foo\n\",b\n\"foo\n  baar ,,,\"\n\"\n\t \n\"";CSVLexer parser=getLexer(code,CSVFormat.DEFAULT);assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"foo\n",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"b",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"foo\n  baar ,,,",parser.nextToken(new Token()));assertTokenEquals(EOF,"\n\t \n",parser.nextToken(new Token()));}
@Test public void testNextToken6()throws IOException {String code="a;'b and '' more\n'\n!comment;;;;\n;;";CSVFormat format=CSVFormat.DEFAULT.withDelimiter(';').withEncapsulator('\'').withCommentStart('!');CSVLexer parser=getLexer(code,format);assertTokenEquals(TOKEN,"a",parser.nextToken(new Token()));assertTokenEquals(EORECORD,"b and ' more\n",parser.nextToken(new Token()));}
@Test public void testDelimiterIsWhitespace()throws IOException {String code="one\ttwo\t\tfour \t five\t six";CSVLexer parser=getLexer(code,CSVFormat.TDF);assertTokenEquals(TOKEN,"one",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"two",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"four",parser.nextToken(new Token()));assertTokenEquals(TOKEN,"five",parser.nextToken(new Token()));assertTokenEquals(EOF,"six",parser.nextToken(new Token()));}
@Test public void testPrinter1()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a","b");assertEquals("a,b" + lineSeparator,sw.toString());}
@Test public void testPrinter2()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a,b","b");assertEquals("\"a,b\",b" + lineSeparator,sw.toString());}
@Test public void testPrinter3()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a,b","b ");assertEquals("\"a,b\",\"b \"" + lineSeparator,sw.toString());}
@Test public void testPrinter4()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a","b\"c");assertEquals("a,\"b\"\"c\"" + lineSeparator,sw.toString());}
@Test public void testPrinter5()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a","b\nc");assertEquals("a,\"b\nc\"" + lineSeparator,sw.toString());}
@Test public void testPrinter6()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a","b\r\nc");assertEquals("a,\"b\r\nc\"" + lineSeparator,sw.toString());}
@Test public void testPrinter7()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a","b\\c");assertEquals("a,b\\c" + lineSeparator,sw.toString());}
@Test public void testExcelPrinter1()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.println("a","b");assertEquals("a,b" + lineSeparator,sw.toString());}
@Test public void testExcelPrinter2()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.println("a,b","b");assertEquals("\"a,b\",b" + lineSeparator,sw.toString());}
@Test public void testPrintNullValues()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.println("a",null,"b");assertEquals("a,,b" + lineSeparator,sw.toString());}
@Test public void testDisabledComment()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printComment("This is a comment");assertEquals("",sw.toString());}
@Test public void testSingleLineComment()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withCommentStart('#'));printer.printComment("This is a comment");assertEquals("# This is a comment" + lineSeparator,sw.toString());}
@Test public void testMultiLineComment()throws IOException {StringWriter sw=new StringWriter();CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withCommentStart('#'));printer.printComment("This is a comment\non multiple lines");assertEquals("# This is a comment" + lineSeparator + "# on multiple lines"+ lineSeparator,sw.toString());}
@Test public void testRandom()throws Exception {int iter=10000;doRandom(CSVFormat.DEFAULT,iter);doRandom(CSVFormat.EXCEL,iter);doRandom(CSVFormat.MYSQL,iter);}
