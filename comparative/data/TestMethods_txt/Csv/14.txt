@Test public void testCSVFile()throws Exception {String line=readTestData();assertNotNull("file must contain config line",line);final String[]split=line.split(" ");assertTrue(testName + " require 1 param",split.length >= 1);CSVFormat format=CSVFormat.newFormat(',').withQuote('"');boolean checkComments=false;for (int i=1;i < split.length;i++){final String option=split[i];final String[]option_parts=option.split("=",2);if ("IgnoreEmpty".equalsIgnoreCase(option_parts[0])){format=format.withIgnoreEmptyLines(Boolean.parseBoolean(option_parts[1]));}else     if ("IgnoreSpaces".equalsIgnoreCase(option_parts[0])){format=format.withIgnoreSurroundingSpaces(Boolean.parseBoolean(option_parts[1]));}else     if ("CommentStart".equalsIgnoreCase(option_parts[0])){format=format.withCommentMarker(option_parts[1].charAt(0));}else     if ("CheckComments".equalsIgnoreCase(option_parts[0])){checkComments=true;}else {fail(testName + " unexpected option: " + option);}}line=readTestData();assertEquals(testName + " Expected format ",line,format.toString());try (final CSVParser parser=CSVParser.parse(new File(BASE,split[0]),Charset.defaultCharset(),format)){for(final CSVRecord record : parser){String parsed=Arrays.toString(record.values());if (checkComments){final String comment=record.getComment().replace("\n","\\n");if (comment != null){parsed+="#" + comment;}}final int count=record.size();assertEquals(testName,readTestData(),count + ":" + parsed);}}}
@Test public void testCSVUrl(){}
@Test public void testSurroundingSpacesAreDeleted()throws IOException {final String code="noSpaces,leadingSpaces,trailingSpaces,surroundingSpaces,,,";try (final Lexer parser=createLexer(code,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces())){assertThat(parser.nextToken(new Token()),matches(TOKEN,"noSpaces"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"leadingSpaces"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"trailingSpaces"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"surroundingSpaces"));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(EOF,""));}}
@Test public void testSurroundingTabsAreDeleted()throws IOException {final String code="noTabs,\tleadingTab,trailingTab\t,\tsurroundingTabs\t,\t\t,,";try (final Lexer parser=createLexer(code,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces())){assertThat(parser.nextToken(new Token()),matches(TOKEN,"noTabs"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"leadingTab"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"trailingTab"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"surroundingTabs"));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(EOF,""));}}
@Test public void testIgnoreEmptyLines()throws IOException {final String code="first,line,\n" + "\n" + "\n"+ "second,line\n"+ "\n"+ "\n"+ "third line \n"+ "\n"+ "\n"+ "last,line \n"+ "\n"+ "\n"+ "\n";final CSVFormat format=CSVFormat.DEFAULT.withIgnoreEmptyLines();try (final Lexer parser=createLexer(code,format)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"first"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"line"));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"second"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"line"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"third line "));assertThat(parser.nextToken(new Token()),matches(TOKEN,"last"));assertThat(parser.nextToken(new Token()),matches(EORECORD," line "));assertThat(parser.nextToken(new Token()),matches(EOF,""));assertThat(parser.nextToken(new Token()),matches(EOF,""));}}
@Test public void testComments()throws IOException {final String code="first,line,\n" + "second,line,tokenWith#no-comment\n" + "# comment line \n"+ "third,line,#no-comment\n"+ "# penultimate comment\n"+ "# Final comment\n";final CSVFormat format=CSVFormat.DEFAULT.withCommentMarker('#');try (final Lexer parser=createLexer(code,format)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"first"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"line"));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"second"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"line"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"tokenWith#no-comment"));assertThat(parser.nextToken(new Token()),matches(COMMENT,"comment line"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"third"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"line"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"#no-comment"));assertThat(parser.nextToken(new Token()),matches(COMMENT,"penultimate comment"));assertThat(parser.nextToken(new Token()),matches(COMMENT,"Final comment"));assertThat(parser.nextToken(new Token()),matches(EOF,""));assertThat(parser.nextToken(new Token()),matches(EOF,""));}}
@Test public void testCommentsAndEmptyLines()throws IOException {final String code="1,2,3,\n" + "\n" + "\n"+ "a,b x,c#no-comment\n"+ "#foo\n"+ "\n"+ "\n"+ "d,e,#no-comment\n"+ "\n"+ "\n"+ "# penultimate comment\n"+ "\n"+ "\n"+ "# Final comment\n";final CSVFormat format=CSVFormat.DEFAULT.withCommentMarker('#').withIgnoreEmptyLines(false);assertFalse("Should not ignore empty lines",format.getIgnoreEmptyLines());try (final Lexer parser=createLexer(code,format)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"1"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"2"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"3"));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"b x"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"c#no-comment"));assertThat(parser.nextToken(new Token()),matches(COMMENT,"foo"));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"d"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"e"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"#no-comment"));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(COMMENT,"penultimate comment"));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""));assertThat(parser.nextToken(new Token()),matches(COMMENT,"Final comment"));assertThat(parser.nextToken(new Token()),matches(EOF,""));assertThat(parser.nextToken(new Token()),matches(EOF,""));}}
@Test public void testBackslashWithoutEscaping()throws IOException {final String code="a,\\,,b\\\n\\,,";final CSVFormat format=CSVFormat.DEFAULT;assertFalse(format.isEscapeCharacterSet());try (final Lexer parser=createLexer(code,format)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"\\"));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b\\"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"\\"));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(EOF,""));}}
@Test public void testBackslashWithEscaping()throws IOException {final String code="a,\\,,b\\\\\n\\,,\\\nc,d\\\r\ne";final CSVFormat format=formatWithEscaping.withIgnoreEmptyLines(false);assertTrue(format.isEscapeCharacterSet());try (final Lexer parser=createLexer(code,format)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN,","));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b\\"));assertThat(parser.nextToken(new Token()),matches(TOKEN,","));assertThat(parser.nextToken(new Token()),matches(TOKEN,"\nc"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"d\r"));assertThat(parser.nextToken(new Token()),matches(EOF,"e"));}}
@Test public void testNextToken4()throws IOException {final String code="a,\"foo\",b\na,\" foo\",b\na,\"foo \"  ,b\na,\" foo \"  ,b";try (final Lexer parser=createLexer(code,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces())){assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"foo"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN," foo"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"foo "));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN," foo "));assertThat(parser.nextToken(new Token()),matches(EOF,"b"));}}
@Test public void testNextToken5()throws IOException {final String code="a,\"foo\n\",b\n\"foo\n  baar ,,,\"\n\"\n\t \n\"";try (final Lexer parser=createLexer(code,CSVFormat.DEFAULT)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"foo\n"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"foo\n  baar ,,,"));assertThat(parser.nextToken(new Token()),matches(EOF,"\n\t \n"));}}
@Test public void testNextToken6()throws IOException {final String code="a;'b and '' more\n'\n!comment;;;;\n;;";final CSVFormat format=CSVFormat.DEFAULT.withQuote('\'').withCommentMarker('!').withDelimiter(';');try (final Lexer parser=createLexer(code,format)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"a"));assertThat(parser.nextToken(new Token()),matches(EORECORD,"b and ' more\n"));}}
@Test public void testDelimiterIsWhitespace()throws IOException {final String code="one\ttwo\t\tfour \t five\t six";try (final Lexer parser=createLexer(code,CSVFormat.TDF)){assertThat(parser.nextToken(new Token()),matches(TOKEN,"one"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"two"));assertThat(parser.nextToken(new Token()),matches(TOKEN,""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"four"));assertThat(parser.nextToken(new Token()),matches(TOKEN,"five"));assertThat(parser.nextToken(new Token()),matches(EOF,"six"));}}
@Test public void testEscapedCR()throws Exception {try (final Lexer lexer=createLexer("character\\" + CR + "Escaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + CR + "Escaped"));}}
@Test public void testCR()throws Exception {try (final Lexer lexer=createLexer("character" + CR + "NotEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character"));assertThat(lexer.nextToken(new Token()),hasContent("NotEscaped"));}}
@Test public void testEscapedLF()throws Exception {try (final Lexer lexer=createLexer("character\\" + LF + "Escaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + LF + "Escaped"));}}
@Test public void testLF()throws Exception {try (final Lexer lexer=createLexer("character" + LF + "NotEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character"));assertThat(lexer.nextToken(new Token()),hasContent("NotEscaped"));}}
@Test public void testEscapedTab()throws Exception {try (final Lexer lexer=createLexer("character\\" + TAB + "Escaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + TAB + "Escaped"));}}
@Test public void testTab()throws Exception {try (final Lexer lexer=createLexer("character" + TAB + "NotEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + TAB + "NotEscaped"));}}
@Test public void testEscapedBackspace()throws Exception {try (final Lexer lexer=createLexer("character\\" + BACKSPACE + "Escaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + BACKSPACE + "Escaped"));}}
@Test public void testBackspace()throws Exception {try (final Lexer lexer=createLexer("character" + BACKSPACE + "NotEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + BACKSPACE + "NotEscaped"));}}
@Test public void testEscapedFF()throws Exception {try (final Lexer lexer=createLexer("character\\" + FF + "Escaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + FF + "Escaped"));}}
@Test public void testFF()throws Exception {try (final Lexer lexer=createLexer("character" + FF + "NotEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character" + FF + "NotEscaped"));}}
@Test public void testEscapedMySqlNullValue()throws Exception {try (final Lexer lexer=createLexer("character\\NEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character\\NEscaped"));}}
@Test public void testEscapedCharacter()throws Exception {try (final Lexer lexer=createLexer("character\\aEscaped",formatWithEscaping)){assertThat(lexer.nextToken(new Token()),hasContent("character\\aEscaped"));}}
@Test public void testEscapedControlCharacter()throws Exception {try (final Lexer lexer=createLexer("character!rEscaped",CSVFormat.DEFAULT.withEscape('!'))){assertThat(lexer.nextToken(new Token()),hasContent("character" + CR + "Escaped"));}}
@Test public void testEscapedControlCharacter2()throws Exception {try (final Lexer lexer=createLexer("character\\rEscaped",CSVFormat.DEFAULT.withEscape('\\'))){assertThat(lexer.nextToken(new Token()),hasContent("character" + CR + "Escaped"));}}
@Test(expected=IOException.class)public void testEscapingAtEOF()throws Exception {final String code="escaping at EOF is evil\\";try (final Lexer lexer=createLexer(code,formatWithEscaping)){lexer.nextToken(new Token());}}
@Test public void parse(){}
@Test public void testDefault(){test(CSVFormat.DEFAULT,"Default");}
@Test public void testExcel(){test(CSVFormat.EXCEL,"Excel");}
@Test public void testMySQL(){test(CSVFormat.MYSQL,"MySQL");}
@Test public void testRFC4180(){test(CSVFormat.RFC4180,"RFC4180");}
@Test public void testTDF(){test(CSVFormat.TDF,"TDF");}
@Test public void testGetInt(){assertEquals(values[0],record.get(0));assertEquals(values[1],record.get(1));assertEquals(values[2],record.get(2));}
@Test public void testGetString(){assertEquals(values[0],recordWithHeader.get("first"));assertEquals(values[1],recordWithHeader.get("second"));assertEquals(values[2],recordWithHeader.get("third"));}
@Test(expected=IllegalArgumentException.class)public void testGetStringInconsistentRecord(){header.put("fourth",Integer.valueOf(4));recordWithHeader.get("fourth");}
@Test(expected=IllegalStateException.class)public void testGetStringNoHeader(){record.get("first");}
@Test(expected=IllegalArgumentException.class)public void testGetUnmappedEnum(){assertNull(recordWithHeader.get(EnumFixture.UNKNOWN_COLUMN));}
@Test(expected=IllegalArgumentException.class)public void testGetUnmappedName(){assertNull(recordWithHeader.get("fourth"));}
@Test(expected=ArrayIndexOutOfBoundsException.class)public void testGetUnmappedNegativeInt(){assertNull(recordWithHeader.get(Integer.MIN_VALUE));}
@Test(expected=ArrayIndexOutOfBoundsException.class)public void testGetUnmappedPositiveInt(){assertNull(recordWithHeader.get(Integer.MAX_VALUE));}
@Test public void testIsConsistent(){assertTrue(record.isConsistent());assertTrue(recordWithHeader.isConsistent());header.put("fourth",Integer.valueOf(4));assertFalse(recordWithHeader.isConsistent());}
@Test public void testIsMapped(){assertFalse(record.isMapped("first"));assertTrue(recordWithHeader.isMapped("first"));assertFalse(recordWithHeader.isMapped("fourth"));}
@Test public void testIsSet(){assertFalse(record.isSet("first"));assertTrue(recordWithHeader.isSet("first"));assertFalse(recordWithHeader.isSet("fourth"));}
@Test public void testIterator(){int i=0;for(final String value : record){assertEquals(values[i],value);i++;}}
@Test public void testPutInMap(){final Map<String,String> map=new ConcurrentHashMap<>();this.recordWithHeader.putIn(map);this.validateMap(map,false);final TreeMap<String,String> map2=recordWithHeader.putIn(new TreeMap<String,String>());this.validateMap(map2,false);}
@Test public void testRemoveAndAddColumns()throws IOException {try (final CSVPrinter printer=new CSVPrinter(new StringBuilder(),CSVFormat.DEFAULT)){final Map<String,String> map=recordWithHeader.toMap();map.remove("OldColumn");map.put("ZColumn","NewValue");final ArrayList<String> list=new ArrayList<>(map.values());Collections.sort(list);printer.printRecord(list);Assert.assertEquals("A,B,C,NewValue" + CSVFormat.DEFAULT.getRecordSeparator(),printer.getOut().toString());}}
@Test public void testToMap(){final Map<String,String> map=this.recordWithHeader.toMap();this.validateMap(map,true);}
@Test public void testToMapWithShortRecord()throws Exception {try (final CSVParser parser=CSVParser.parse("a,b",CSVFormat.DEFAULT.withHeader("A","B","C"))){final CSVRecord shortRec=parser.iterator().next();shortRec.toMap();}}
@Test public void testToMapWithNoHeader()throws Exception {try (final CSVParser parser=CSVParser.parse("a,b",CSVFormat.newFormat(','))){final CSVRecord shortRec=parser.iterator().next();final Map<String,String> map=shortRec.toMap();assertNotNull("Map is not null.",map);assertTrue("Map is empty.",map.isEmpty());}}
@Test(expected=IllegalArgumentException.class)public void testDelimiterSameAsCommentStartThrowsException(){CSVFormat.DEFAULT.withDelimiter('!').withCommentMarker('!');}
@Test(expected=IllegalArgumentException.class)public void testDelimiterSameAsEscapeThrowsException(){CSVFormat.DEFAULT.withDelimiter('!').withEscape('!');}
@Test(expected=IllegalArgumentException.class)public void testDuplicateHeaderElements(){CSVFormat.DEFAULT.withHeader("A","A");}
@Test public void testEquals(){final CSVFormat right=CSVFormat.DEFAULT;final CSVFormat left=copy(right);assertFalse(right.equals(null));assertFalse(right.equals("A String Instance"));assertEquals(right,right);assertEquals(right,left);assertEquals(left,right);assertEquals(right.hashCode(),right.hashCode());assertEquals(right.hashCode(),left.hashCode());}
@Test public void testEqualsCommentStart(){final CSVFormat right=CSVFormat.newFormat('\'').withQuote('"').withCommentMarker('#').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withCommentMarker('!');assertNotEquals(right,left);}
@Test public void testEqualsDelimiter(){final CSVFormat right=CSVFormat.newFormat('!');final CSVFormat left=CSVFormat.newFormat('?');assertNotEquals(right,left);}
@Test public void testEqualsEscape(){final CSVFormat right=CSVFormat.newFormat('\'').withQuote('"').withCommentMarker('#').withEscape('+').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withEscape('!');assertNotEquals(right,left);}
@Test public void testEqualsHeader(){final CSVFormat right=CSVFormat.newFormat('\'').withRecordSeparator(CR).withCommentMarker('#').withEscape('+').withHeader("One","Two","Three").withIgnoreEmptyLines().withIgnoreSurroundingSpaces().withQuote('"').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withHeader("Three","Two","One");assertNotEquals(right,left);}
@Test public void testEqualsIgnoreEmptyLines(){final CSVFormat right=CSVFormat.newFormat('\'').withCommentMarker('#').withEscape('+').withIgnoreEmptyLines().withIgnoreSurroundingSpaces().withQuote('"').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withIgnoreEmptyLines(false);assertNotEquals(right,left);}
@Test public void testEqualsIgnoreSurroundingSpaces(){final CSVFormat right=CSVFormat.newFormat('\'').withCommentMarker('#').withEscape('+').withIgnoreSurroundingSpaces().withQuote('"').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withIgnoreSurroundingSpaces(false);assertNotEquals(right,left);}
@Test public void testEqualsQuoteChar(){final CSVFormat right=CSVFormat.newFormat('\'').withQuote('"');final CSVFormat left=right.withQuote('!');assertNotEquals(right,left);}
@Test public void testEqualsLeftNoQuoteRightQuote(){final CSVFormat left=CSVFormat.newFormat(',').withQuote(null);final CSVFormat right=left.withQuote('#');assertNotEquals(left,right);}
@Test public void testEqualsNoQuotes(){final CSVFormat left=CSVFormat.newFormat(',').withQuote(null);final CSVFormat right=left.withQuote(null);assertEquals(left,right);}
@Test public void testEqualsQuotePolicy(){final CSVFormat right=CSVFormat.newFormat('\'').withQuote('"').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withQuoteMode(QuoteMode.MINIMAL);assertNotEquals(right,left);}
@Test public void testEqualsRecordSeparator(){final CSVFormat right=CSVFormat.newFormat('\'').withRecordSeparator(CR).withCommentMarker('#').withEscape('+').withIgnoreEmptyLines().withIgnoreSurroundingSpaces().withQuote('"').withQuoteMode(QuoteMode.ALL);final CSVFormat left=right.withRecordSeparator(LF);assertNotEquals(right,left);}
@Test public void testEqualsNullString(){final CSVFormat right=CSVFormat.newFormat('\'').withRecordSeparator(CR).withCommentMarker('#').withEscape('+').withIgnoreEmptyLines().withIgnoreSurroundingSpaces().withQuote('"').withQuoteMode(QuoteMode.ALL).withNullString("null");final CSVFormat left=right.withNullString("---");assertNotEquals(right,left);}
@Test public void testEqualsSkipHeaderRecord(){final CSVFormat right=CSVFormat.newFormat('\'').withRecordSeparator(CR).withCommentMarker('#').withEscape('+').withIgnoreEmptyLines().withIgnoreSurroundingSpaces().withQuote('"').withQuoteMode(QuoteMode.ALL).withNullString("null").withSkipHeaderRecord();final CSVFormat left=right.withSkipHeaderRecord(false);assertNotEquals(right,left);}
@Test(expected=IllegalArgumentException.class)public void testEscapeSameAsCommentStartThrowsException(){CSVFormat.DEFAULT.withEscape('!').withCommentMarker('!');}
@Test(expected=IllegalArgumentException.class)public void testEscapeSameAsCommentStartThrowsExceptionForWrapperType(){CSVFormat.DEFAULT.withEscape(new Character('!')).withCommentMarker(new Character('!'));}
@Test public void testFormat(){final CSVFormat format=CSVFormat.DEFAULT;assertEquals("",format.format());assertEquals("a,b,c",format.format("a","b","c"));assertEquals("\"x,y\",z",format.format("x,y","z"));}
@Test public void testGetHeader()throws Exception {final String[]header=new String[]{"one","two","three"};final CSVFormat formatWithHeader=CSVFormat.DEFAULT.withHeader(header);final String[]headerCopy=formatWithHeader.getHeader();headerCopy[0]="A";headerCopy[1]="B";headerCopy[2]="C";assertFalse(Arrays.equals(formatWithHeader.getHeader(),headerCopy));assertNotSame(formatWithHeader.getHeader(),headerCopy);}
@Test public void testNullRecordSeparatorCsv106(){final CSVFormat format=CSVFormat.newFormat(';').withSkipHeaderRecord().withHeader("H1","H2");final String formatStr=format.format("A","B");assertNotNull(formatStr);assertFalse(formatStr.endsWith("null"));}
@Test(expected=IllegalArgumentException.class)public void testQuoteCharSameAsCommentStartThrowsException(){CSVFormat.DEFAULT.withQuote('!').withCommentMarker('!');}
@Test(expected=IllegalArgumentException.class)public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType(){CSVFormat.DEFAULT.withQuote(new Character('!')).withCommentMarker('!');}
@Test(expected=IllegalArgumentException.class)public void testQuoteCharSameAsDelimiterThrowsException(){CSVFormat.DEFAULT.withQuote('!').withDelimiter('!');}
@Test(expected=IllegalArgumentException.class)public void testQuotePolicyNoneWithoutEscapeThrowsException(){CSVFormat.newFormat('!').withQuoteMode(QuoteMode.NONE);}
@Test public void testRFC4180(){assertEquals(null,RFC4180.getCommentMarker());assertEquals(',',RFC4180.getDelimiter());assertEquals(null,RFC4180.getEscapeCharacter());assertFalse(RFC4180.getIgnoreEmptyLines());assertEquals(Character.valueOf('"'),RFC4180.getQuoteCharacter());assertEquals(null,RFC4180.getQuoteMode());assertEquals("\r\n",RFC4180.getRecordSeparator());}
@SuppressWarnings("boxing")@Test public void testSerialization()throws Exception {final ByteArrayOutputStream out=new ByteArrayOutputStream();try (final ObjectOutputStream oos=new ObjectOutputStream(out)){oos.writeObject(CSVFormat.DEFAULT);oos.flush();}final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));final CSVFormat format=(CSVFormat)in.readObject();assertNotNull(format);assertEquals("delimiter",CSVFormat.DEFAULT.getDelimiter(),format.getDelimiter());assertEquals("encapsulator",CSVFormat.DEFAULT.getQuoteCharacter(),format.getQuoteCharacter());assertEquals("comment start",CSVFormat.DEFAULT.getCommentMarker(),format.getCommentMarker());assertEquals("record separator",CSVFormat.DEFAULT.getRecordSeparator(),format.getRecordSeparator());assertEquals("escape",CSVFormat.DEFAULT.getEscapeCharacter(),format.getEscapeCharacter());assertEquals("trim",CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(),format.getIgnoreSurroundingSpaces());assertEquals("empty lines",CSVFormat.DEFAULT.getIgnoreEmptyLines(),format.getIgnoreEmptyLines());}
@Test public void testWithCommentStart()throws Exception {final CSVFormat formatWithCommentStart=CSVFormat.DEFAULT.withCommentMarker('#');assertEquals(Character.valueOf('#'),formatWithCommentStart.getCommentMarker());}
@Test(expected=IllegalArgumentException.class)public void testWithCommentStartCRThrowsException(){CSVFormat.DEFAULT.withCommentMarker(CR);}
@Test public void testWithDelimiter()throws Exception {final CSVFormat formatWithDelimiter=CSVFormat.DEFAULT.withDelimiter('!');assertEquals('!',formatWithDelimiter.getDelimiter());}
@Test(expected=IllegalArgumentException.class)public void testWithDelimiterLFThrowsException(){CSVFormat.DEFAULT.withDelimiter(LF);}
@Test public void testWithEscape()throws Exception {final CSVFormat formatWithEscape=CSVFormat.DEFAULT.withEscape('&');assertEquals(Character.valueOf('&'),formatWithEscape.getEscapeCharacter());}
@Test(expected=IllegalArgumentException.class)public void testWithEscapeCRThrowsExceptions(){CSVFormat.DEFAULT.withEscape(CR);}
@Test public void testWithHeader()throws Exception {final String[]header=new String[]{"one","two","three"};final CSVFormat formatWithHeader=CSVFormat.DEFAULT.withHeader(header);assertArrayEquals(header,formatWithHeader.getHeader());assertNotSame(header,formatWithHeader.getHeader());}
@Test public void testWithHeaderEnum()throws Exception {final CSVFormat formatWithHeader=CSVFormat.DEFAULT.withHeader(Header.class);assertArrayEquals(new String[]{"Name","Email","Phone"},formatWithHeader.getHeader());}
@Test public void testWithEmptyEnum()throws Exception {final CSVFormat formatWithHeader=CSVFormat.DEFAULT.withHeader(EmptyEnum.class);Assert.assertTrue(formatWithHeader.getHeader().length == 0);}
@Test public void testWithIgnoreEmptyLines()throws Exception {assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines().getIgnoreEmptyLines());}
@Test public void testWithIgnoreSurround()throws Exception {assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces());assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces().getIgnoreSurroundingSpaces());}
@Test public void testWithNullString()throws Exception {final CSVFormat formatWithNullString=CSVFormat.DEFAULT.withNullString("null");assertEquals("null",formatWithNullString.getNullString());}
@Test public void testWithQuoteChar()throws Exception {final CSVFormat formatWithQuoteChar=CSVFormat.DEFAULT.withQuote('"');assertEquals(Character.valueOf('"'),formatWithQuoteChar.getQuoteCharacter());}
@Test(expected=IllegalArgumentException.class)public void testWithQuoteLFThrowsException(){CSVFormat.DEFAULT.withQuote(LF);}
@Test public void testWithQuotePolicy()throws Exception {final CSVFormat formatWithQuotePolicy=CSVFormat.DEFAULT.withQuoteMode(QuoteMode.ALL);assertEquals(QuoteMode.ALL,formatWithQuotePolicy.getQuoteMode());}
@Test public void testWithRecordSeparatorCR()throws Exception {final CSVFormat formatWithRecordSeparator=CSVFormat.DEFAULT.withRecordSeparator(CR);assertEquals(String.valueOf(CR),formatWithRecordSeparator.getRecordSeparator());}
@Test public void testWithRecordSeparatorLF()throws Exception {final CSVFormat formatWithRecordSeparator=CSVFormat.DEFAULT.withRecordSeparator(LF);assertEquals(String.valueOf(LF),formatWithRecordSeparator.getRecordSeparator());}
@Test public void testWithRecordSeparatorCRLF()throws Exception {final CSVFormat formatWithRecordSeparator=CSVFormat.DEFAULT.withRecordSeparator(CRLF);assertEquals(CRLF,formatWithRecordSeparator.getRecordSeparator());}
@Test public void testWithFirstRecordAsHeader()throws Exception {final CSVFormat formatWithFirstRecordAsHeader=CSVFormat.DEFAULT.withFirstRecordAsHeader();assertTrue(formatWithFirstRecordAsHeader.getSkipHeaderRecord());assertTrue(formatWithFirstRecordAsHeader.getHeader().length == 0);}
@Test public void testNotNull()throws Exception {Assertions.notNull(new Object(),"object");}
@Test(expected=IllegalArgumentException.class)public void testNotNullNull()throws Exception {Assertions.notNull(null,"object");}
@Test public void testJiraCsv154_withCommentMarker()throws IOException {final String comment="This is a header comment";final CSVFormat format=CSVFormat.EXCEL.withHeader("H1","H2").withCommentMarker('#').withHeaderComments(comment);final StringBuilder out=new StringBuilder();try (final CSVPrinter printer=format.print(out)){printer.print("A");printer.print("B");}final String s=out.toString();assertTrue(s,s.contains(comment));}
@Test public void testJiraCsv154_withHeaderComments()throws IOException {final String comment="This is a header comment";final CSVFormat format=CSVFormat.EXCEL.withHeader("H1","H2").withHeaderComments(comment).withCommentMarker('#');final StringBuilder out=new StringBuilder();try (final CSVPrinter printer=format.print(out)){printer.print("A");printer.print("B");}final String s=out.toString();assertTrue(s,s.contains(comment));}
@Test public void testEmptyInput()throws Exception {try (final ExtendedBufferedReader br=createBufferedReader("")){assertEquals(END_OF_STREAM,br.read());assertEquals(END_OF_STREAM,br.lookAhead());assertEquals(END_OF_STREAM,br.getLastChar());assertNull(br.readLine());assertEquals(0,br.read(new char[10],0,0));}}
@Test public void testReadLookahead1()throws Exception {try (final ExtendedBufferedReader br=createBufferedReader("1\n2\r3\n")){assertEquals(0,br.getCurrentLineNumber());assertEquals('1',br.lookAhead());assertEquals(UNDEFINED,br.getLastChar());assertEquals(0,br.getCurrentLineNumber());assertEquals('1',br.read());assertEquals('1',br.getLastChar());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.lookAhead());assertEquals(1,br.getCurrentLineNumber());assertEquals('1',br.getLastChar());assertEquals('\n',br.read());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.getLastChar());assertEquals(1,br.getCurrentLineNumber());assertEquals('2',br.lookAhead());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.getLastChar());assertEquals(1,br.getCurrentLineNumber());assertEquals('2',br.read());assertEquals(2,br.getCurrentLineNumber());assertEquals('2',br.getLastChar());assertEquals('\r',br.lookAhead());assertEquals(2,br.getCurrentLineNumber());assertEquals('2',br.getLastChar());assertEquals('\r',br.read());assertEquals('\r',br.getLastChar());assertEquals(2,br.getCurrentLineNumber());assertEquals('3',br.lookAhead());assertEquals('\r',br.getLastChar());assertEquals('3',br.read());assertEquals('3',br.getLastChar());assertEquals(3,br.getCurrentLineNumber());assertEquals('\n',br.lookAhead());assertEquals(3,br.getCurrentLineNumber());assertEquals('3',br.getLastChar());assertEquals('\n',br.read());assertEquals(3,br.getCurrentLineNumber());assertEquals('\n',br.getLastChar());assertEquals(3,br.getCurrentLineNumber());assertEquals(END_OF_STREAM,br.lookAhead());assertEquals('\n',br.getLastChar());assertEquals(END_OF_STREAM,br.read());assertEquals(END_OF_STREAM,br.getLastChar());assertEquals(END_OF_STREAM,br.read());assertEquals(END_OF_STREAM,br.lookAhead());assertEquals(3,br.getCurrentLineNumber());}}
@Test public void testReadLookahead2()throws Exception {final char[]ref=new char[5];final char[]res=new char[5];try (final ExtendedBufferedReader br=createBufferedReader("abcdefg")){ref[0]='a';ref[1]='b';ref[2]='c';assertEquals(3,br.read(res,0,3));assertArrayEquals(ref,res);assertEquals('c',br.getLastChar());assertEquals('d',br.lookAhead());ref[4]='d';assertEquals(1,br.read(res,4,1));assertArrayEquals(ref,res);assertEquals('d',br.getLastChar());}}
@Test public void testReadLine()throws Exception {try (final ExtendedBufferedReader br=createBufferedReader("")){assertNull(br.readLine());}try (final ExtendedBufferedReader br=createBufferedReader("\n")){assertEquals("",br.readLine());assertNull(br.readLine());}try (final ExtendedBufferedReader br=createBufferedReader("foo\n\nhello")){assertEquals(0,br.getCurrentLineNumber());assertEquals("foo",br.readLine());assertEquals(1,br.getCurrentLineNumber());assertEquals("",br.readLine());assertEquals(2,br.getCurrentLineNumber());assertEquals("hello",br.readLine());assertEquals(3,br.getCurrentLineNumber());assertNull(br.readLine());assertEquals(3,br.getCurrentLineNumber());}try (final ExtendedBufferedReader br=createBufferedReader("foo\n\nhello")){assertEquals('f',br.read());assertEquals('o',br.lookAhead());assertEquals("oo",br.readLine());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.lookAhead());assertEquals("",br.readLine());assertEquals(2,br.getCurrentLineNumber());assertEquals('h',br.lookAhead());assertEquals("hello",br.readLine());assertNull(br.readLine());assertEquals(3,br.getCurrentLineNumber());}try (final ExtendedBufferedReader br=createBufferedReader("foo\rbaar\r\nfoo")){assertEquals("foo",br.readLine());assertEquals('b',br.lookAhead());assertEquals("baar",br.readLine());assertEquals('f',br.lookAhead());assertEquals("foo",br.readLine());assertNull(br.readLine());}}
@Test public void testReadChar()throws Exception {final String LF="\n";final String CR="\r";final String CRLF=CR + LF;final String LFCR=LF + CR;final String test="a" + LF + "b"+ CR+ "c"+ LF+ LF+ "d"+ CR+ CR+ "e"+ LFCR+ "f "+ CRLF;final int EOLeolct=9;try (final ExtendedBufferedReader br=createBufferedReader(test)){assertEquals(0,br.getCurrentLineNumber());while (br.readLine()!= null){}assertEquals(EOLeolct,br.getCurrentLineNumber());}try (final ExtendedBufferedReader br=createBufferedReader(test)){assertEquals(0,br.getCurrentLineNumber());while (br.read()!= -1){}assertEquals(EOLeolct,br.getCurrentLineNumber());}try (final ExtendedBufferedReader br=createBufferedReader(test)){assertEquals(0,br.getCurrentLineNumber());final char[]buff=new char[10];while (br.read(buff,0,3)!= -1){}assertEquals(EOLeolct,br.getCurrentLineNumber());}}
@Test public void testBackslashEscaping()throws IOException {final String code="one,two,three\n" + "'',''\n" + "/',/'\n"+ "'/'','/''\n"+ "'''',''''\n"+ "/,,/,\n"+ "//,//\n"+ "'//','//'\n"+ "   8,\"quoted \"\" /\" // string\"   \n"+ "9,/\n   \n"+ "";final String[][]res={{"one","two","three"},{"",""},{"'","'"},{"'","'"},{"'","'"},{",",","},{"/","/"},{"/","/"},{"   8   ","   \"quoted \"\" /\" / string\"   "},{"9","   \n   "}};final CSVFormat format=CSVFormat.newFormat(',').withQuote('\'').withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines();try (final CSVParser parser=CSVParser.parse(code,format)){final List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);Utils.compare("Records do not match expected result",res,records);}}
@Test public void testBackslashEscaping2()throws IOException {final String code="" + ",,\n" + " \t,,\n"+ " //,/,,/,\n"+ "";final String[][]res={{" "," "," "},{" \t ","  "," "},{" / ",","," ,"}};final CSVFormat format=CSVFormat.newFormat(',').withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines();try (final CSVParser parser=CSVParser.parse(code,format)){final List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);Utils.compare("",res,records);}}
@Test @Ignore public void testBackslashEscapingOld()throws IOException {final String code="one,two,three\n" + "on\\\"e,two\n" + "on\"e,two\n"+ "one,\"tw\\\"o\"\n"+ "one,\"t\\,wo\"\n"+ "one,two,\"th,ree\"\n"+ "\"a\\\\\"\n"+ "a\\,b\n"+ "\"a\\\\,b\"";final String[][]res={{"one","two","three"},{"on\\\"e","two"},{"on\"e","two"},{"one","tw\"o"},{"one","t\\,wo"},{"one","two","th,ree"},{"a\\\\"},{"a\\","b"},{"a\\\\,b"}};try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
@Test @Ignore("CSV-107")public void testBOM()throws IOException {final URL url=ClassLoader.getSystemClassLoader().getResource("CSVFileParser/bom.csv");try (final CSVParser parser=CSVParser.parse(url,Charset.forName(UTF_8_NAME),CSVFormat.EXCEL.withHeader())){for(final CSVRecord record : parser){final String string=record.get("Date");Assert.assertNotNull(string);}}}
@Test public void testBOMInputStream_ParserWithReader(){}
@Test public void testBOMInputStream_parseWithReader(){}
@Test public void testBOMInputStream_ParserWithInputStream(){}
@Test public void testCarriageReturnEndings()throws IOException {final String code="foo\rbaar,\rhello,world\r,kanu";try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());}}
@Test public void testCarriageReturnLineFeedEndings()throws IOException {final String code="foo\r\nbaar,\r\nhello,world\r\n,kanu";try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());}}
@Test(expected=NoSuchElementException.class)public void testClose()throws Exception {final Reader in=new StringReader("# comment\na,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records;try (final CSVParser parser=CSVFormat.DEFAULT.withCommentMarker('#').withHeader().parse(in)){records=parser.iterator();assertTrue(records.hasNext());}assertFalse(records.hasNext());records.next();}
@Test public void testCSV57()throws Exception {try (final CSVParser parser=CSVParser.parse("",CSVFormat.DEFAULT)){final List<CSVRecord> list=parser.getRecords();assertNotNull(list);assertEquals(0,list.size());}}
@Test public void testDefaultFormat()throws IOException {final String code="" + "a,b#\n" + "\"\n\",\" \",#\n"+ "#,\"\"\n"+ "# Final comment\n";final String[][]res={{"a","b#"},{"\n"," ","#"},{"#",""},{"# Final comment"}};CSVFormat format=CSVFormat.DEFAULT;assertFalse(format.isCommentMarkerSet());final String[][]res_comments={{"a","b#"},{"\n"," ","#"}};try (final CSVParser parser=CSVParser.parse(code,format)){final List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);Utils.compare("Failed to parse without comments",res,records);format=CSVFormat.DEFAULT.withCommentMarker('#');}try (final CSVParser parser=CSVParser.parse(code,format)){final List<CSVRecord> records=parser.getRecords();Utils.compare("Failed to parse with comments",res_comments,records);}}
@Test(expected=IllegalArgumentException.class)public void testDuplicateHeaders()throws Exception {CSVParser.parse("a,b,a\n1,2,3\nx,y,z",CSVFormat.DEFAULT.withHeader(new String[]{}));}
@Test public void testEmptyFile()throws Exception {try (final CSVParser parser=CSVParser.parse("",CSVFormat.DEFAULT)){assertNull(parser.nextRecord());}}
@Test public void testEmptyLineBehaviourCSV()throws Exception {final String[]codes={"hello,\r\n\r\n\r\n","hello,\n\n\n","hello,\"\"\r\n\r\n\r\n","hello,\"\"\n\n\n"};final String[][]res={{"hello",""}};for(final String code : codes){try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}}
@Test public void testEmptyLineBehaviourExcel()throws Exception {final String[]codes={"hello,\r\n\r\n\r\n","hello,\n\n\n","hello,\"\"\r\n\r\n\r\n","hello,\"\"\n\n\n"};final String[][]res={{"hello",""},{""},{""}};for(final String code : codes){try (final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}}
@Test public void testEndOfFileBehaviorCSV()throws Exception {final String[]codes={"hello,\r\n\r\nworld,\r\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\r\n","hello,\r\n\r\nworld,\"\"","hello,\r\n\r\nworld,\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\n","hello,\r\n\r\nworld,\"\""};final String[][]res={{"hello",""},{"world",""}};for(final String code : codes){try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}}
@Test public void testEndOfFileBehaviourExcel()throws Exception {final String[]codes={"hello,\r\n\r\nworld,\r\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\r\n","hello,\r\n\r\nworld,\"\"","hello,\r\n\r\nworld,\n","hello,\r\n\r\nworld,","hello,\r\n\r\nworld,\"\"\n","hello,\r\n\r\nworld,\"\""};final String[][]res={{"hello",""},{""},{"world",""}};for(final String code : codes){try (final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}}
@Test public void testExcelFormat1()throws IOException {final String code="value1,value2,value3,value4\r\na,b,c,d\r\n  x,,," + "\r\n\r\n\"\"\"hello\"\"\",\"  \"\"world\"\"\",\"abc\ndef\",\r\n";final String[][]res={{"value1","value2","value3","value4"},{"a","b","c","d"},{"  x","","",""},{""},{"\"hello\"","  \"world\"","abc\ndef",""}};try (final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
@Test public void testExcelFormat2()throws Exception {final String code="foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n";final String[][]res={{"foo","baar"},{""},{"hello",""},{""},{"world",""}};try (final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}
/** * Tests an exported Excel worksheet with a header row and rows that have more columns than the headers*/@Test public void testExcelHeaderCountLessThanData()throws Exception {final String code="A,B,C,,\r\na,b,c,d,e\r\n";try (final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL.withHeader())){for(final CSVRecord record : parser.getRecords()){Assert.assertEquals("a",record.get("A"));Assert.assertEquals("b",record.get("B"));Assert.assertEquals("c",record.get("C"));}}}
@Test public void testForEach()throws Exception {final List<CSVRecord> records=new ArrayList<>();try (final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z")){for(final CSVRecord record : CSVFormat.DEFAULT.parse(in)){records.add(record);}assertEquals(3,records.size());assertArrayEquals(new String[]{"a","b","c"},records.get(0).values());assertArrayEquals(new String[]{"1","2","3"},records.get(1).values());assertArrayEquals(new String[]{"x","y","z"},records.get(2).values());}}
@Test public void testGetHeaderMap()throws Exception {try (final CSVParser parser=CSVParser.parse("a,b,c\n1,2,3\nx,y,z",CSVFormat.DEFAULT.withHeader("A","B","C"))){final Map<String,Integer> headerMap=parser.getHeaderMap();final Iterator<String> columnNames=headerMap.keySet().iterator();Assert.assertEquals("A",columnNames.next());Assert.assertEquals("B",columnNames.next());Assert.assertEquals("C",columnNames.next());final Iterator<CSVRecord> records=parser.iterator();for (int i=0;i < 3;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get("A"));assertEquals(record.get(1),record.get("B"));assertEquals(record.get(2),record.get("C"));}assertFalse(records.hasNext());}}
@Test public void testGetLine()throws IOException {try (final CSVParser parser=CSVParser.parse(CSV_INPUT,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces())){for(final String[]re : RESULT){assertArrayEquals(re,parser.nextRecord().values());}assertNull(parser.nextRecord());}}
@Test public void testGetLineNumberWithCR()throws Exception {this.validateLineNumbers(String.valueOf(CR));}
@Test public void testGetLineNumberWithCRLF()throws Exception {this.validateLineNumbers(CRLF);}
@Test public void testGetLineNumberWithLF()throws Exception {this.validateLineNumbers(String.valueOf(LF));}
@Test public void testGetOneLine()throws IOException {try (final CSVParser parser=CSVParser.parse(CSV_INPUT_1,CSVFormat.DEFAULT)){final CSVRecord record=parser.getRecords().get(0);assertArrayEquals(RESULT[0],record.values());}}
/** * Tests reusing a parser to process new string records one at a time as they are being discovered. See [CSV-110].* @throws IOException*/@Test public void testGetOneLineOneParser()throws IOException {final CSVFormat format=CSVFormat.DEFAULT;try (final PipedWriter writer=new PipedWriter();final CSVParser parser=new CSVParser(new PipedReader(writer),format)){writer.append(CSV_INPUT_1);writer.append(format.getRecordSeparator());final CSVRecord record1=parser.nextRecord();assertArrayEquals(RESULT[0],record1.values());writer.append(CSV_INPUT_2);writer.append(format.getRecordSeparator());final CSVRecord record2=parser.nextRecord();assertArrayEquals(RESULT[1],record2.values());}}
@Test public void testGetRecordNumberWithCR()throws Exception {this.validateRecordNumbers(String.valueOf(CR));}
@Test public void testGetRecordNumberWithCRLF()throws Exception {this.validateRecordNumbers(CRLF);}
@Test public void testGetRecordNumberWithLF()throws Exception {this.validateRecordNumbers(String.valueOf(LF));}
@Test public void testGetRecordPositionWithCRLF()throws Exception {this.validateRecordPosition(CRLF);}
@Test public void testGetRecordPositionWithLF()throws Exception {this.validateRecordPosition(String.valueOf(LF));}
@Test public void testGetRecords()throws IOException {try (final CSVParser parser=CSVParser.parse(CSV_INPUT,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces())){final List<CSVRecord> records=parser.getRecords();assertEquals(RESULT.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < RESULT.length;i++){assertArrayEquals(RESULT[i],records.get(i).values());}}}
@Test public void testGetRecordWithMultiLineValues()throws Exception {try (final CSVParser parser=CSVParser.parse("\"a\r\n1\",\"a\r\n2\"" + CRLF + "\"b\r\n1\",\"b\r\n2\""+ CRLF+ "\"c\r\n1\",\"c\r\n2\"",CSVFormat.DEFAULT.withRecordSeparator(CRLF))){CSVRecord record;assertEquals(0,parser.getRecordNumber());assertEquals(0,parser.getCurrentLineNumber());assertNotNull(record=parser.nextRecord());assertEquals(3,parser.getCurrentLineNumber());assertEquals(1,record.getRecordNumber());assertEquals(1,parser.getRecordNumber());assertNotNull(record=parser.nextRecord());assertEquals(6,parser.getCurrentLineNumber());assertEquals(2,record.getRecordNumber());assertEquals(2,parser.getRecordNumber());assertNotNull(record=parser.nextRecord());assertEquals(8,parser.getCurrentLineNumber());assertEquals(3,record.getRecordNumber());assertEquals(3,parser.getRecordNumber());assertNull(record=parser.nextRecord());assertEquals(8,parser.getCurrentLineNumber());assertEquals(3,parser.getRecordNumber());}}
@Test public void testHeader()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get("a"));assertEquals(record.get(1),record.get("b"));assertEquals(record.get(2),record.get("c"));}assertFalse(records.hasNext());}
@Test public void testHeaderComment()throws Exception {final Reader in=new StringReader("# comment\na,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withCommentMarker('#').withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get("a"));assertEquals(record.get(1),record.get("b"));assertEquals(record.get(2),record.get("c"));}assertFalse(records.hasNext());}
@Test public void testHeaderMissing()throws Exception {final Reader in=new StringReader("a,,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get("a"));assertEquals(record.get(2),record.get("c"));}assertFalse(records.hasNext());}
@Test public void testHeaderMissingWithNull()throws Exception {final Reader in=new StringReader("a,,c,,d\n1,2,3,4\nx,y,z,zz");CSVFormat.DEFAULT.withHeader().withNullString("").withAllowMissingColumnNames().parse(in).iterator();}
@Test public void testHeadersMissing()throws Exception {final Reader in=new StringReader("a,,c,,d\n1,2,3,4\nx,y,z,zz");CSVFormat.DEFAULT.withHeader().withAllowMissingColumnNames().parse(in).iterator();}
@Test(expected=IllegalArgumentException.class)public void testHeadersMissingException()throws Exception {final Reader in=new StringReader("a,,c,,d\n1,2,3,4\nx,y,z,zz");CSVFormat.DEFAULT.withHeader().parse(in).iterator();}
@Test public void testIgnoreCaseHeaderMapping()throws Exception {final Reader in=new StringReader("1,2,3");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("One","TWO","three").withIgnoreHeaderCase().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("one"));assertEquals("2",record.get("two"));assertEquals("3",record.get("THREE"));}
@Test public void testIgnoreEmptyLines()throws IOException {final String code="\nfoo,baar\n\r\n,\n\n,world\r\n\n";try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(3,records.size());}}
@Test(expected=IllegalArgumentException.class)public void testInvalidFormat()throws Exception {final CSVFormat invalidFormat=CSVFormat.DEFAULT.withDelimiter(CR);try (final CSVParser parser=new CSVParser(null,invalidFormat)){Assert.fail("This test should have thrown an exception.");}}
@Test public void testIterator()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> iterator=CSVFormat.DEFAULT.parse(in).iterator();assertTrue(iterator.hasNext());try {iterator.remove();fail("expected UnsupportedOperationException");}catch(final UnsupportedOperationException expected){}assertArrayEquals(new String[]{"a","b","c"},iterator.next().values());assertArrayEquals(new String[]{"1","2","3"},iterator.next().values());assertTrue(iterator.hasNext());assertTrue(iterator.hasNext());assertTrue(iterator.hasNext());assertArrayEquals(new String[]{"x","y","z"},iterator.next().values());assertFalse(iterator.hasNext());try {iterator.next();fail("NoSuchElementException expected");}catch(final NoSuchElementException e){}}
@Test public void testLineFeedEndings()throws IOException {final String code="foo\nbaar,\nhello,world\n,kanu";try (final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT)){final List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());}}
@Test public void testMappedButNotSetAsOutlook2007ContactExport()throws Exception {final Reader in=new StringReader("a,b,c\n1,2\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("A","B","C").withSkipHeaderRecord().parse(in).iterator();CSVRecord record;record=records.next();assertTrue(record.isMapped("A"));assertTrue(record.isMapped("B"));assertTrue(record.isMapped("C"));assertTrue(record.isSet("A"));assertTrue(record.isSet("B"));assertFalse(record.isSet("C"));assertEquals("1",record.get("A"));assertEquals("2",record.get("B"));assertFalse(record.isConsistent());record=records.next();assertTrue(record.isMapped("A"));assertTrue(record.isMapped("B"));assertTrue(record.isMapped("C"));assertTrue(record.isSet("A"));assertTrue(record.isSet("B"));assertTrue(record.isSet("C"));assertEquals("x",record.get("A"));assertEquals("y",record.get("B"));assertEquals("z",record.get("C"));assertTrue(record.isConsistent());assertFalse(records.hasNext());}
@Test public void testMultipleIterators()throws Exception {try (final CSVParser parser=CSVParser.parse("a,b,c" + CR + "d,e,f",CSVFormat.DEFAULT)){final Iterator<CSVRecord> itr1=parser.iterator();final Iterator<CSVRecord> itr2=parser.iterator();final CSVRecord first=itr1.next();assertEquals("a",first.get(0));assertEquals("b",first.get(1));assertEquals("c",first.get(2));final CSVRecord second=itr2.next();assertEquals("d",second.get(0));assertEquals("e",second.get(1));assertEquals("f",second.get(2));}}
@Test(expected=IllegalArgumentException.class)public void testNewCSVParserNullReaderFormat()throws Exception {try (final CSVParser parser=new CSVParser(null,CSVFormat.DEFAULT)){Assert.fail("This test should have thrown an exception.");}}
@Test(expected=IllegalArgumentException.class)public void testNewCSVParserReaderNullFormat()throws Exception {try (final CSVParser parser=new CSVParser(new StringReader(""),null)){Assert.fail("This test should have thrown an exception.");}}
@Test public void testNoHeaderMap()throws Exception {try (final CSVParser parser=CSVParser.parse("a,b,c\n1,2,3\nx,y,z",CSVFormat.DEFAULT)){Assert.assertNull(parser.getHeaderMap());}}
@Test(expected=IllegalArgumentException.class)public void testParseFileNullFormat()throws Exception {CSVParser.parse(new File(""),Charset.defaultCharset(),null);}
@Test(expected=IllegalArgumentException.class)public void testParseNullFileFormat()throws Exception {CSVParser.parse((File)null,Charset.defaultCharset(),CSVFormat.DEFAULT);}
@Test(expected=IllegalArgumentException.class)public void testParseNullStringFormat()throws Exception {CSVParser.parse((String)null,CSVFormat.DEFAULT);}
@Test(expected=IllegalArgumentException.class)public void testParseNullUrlCharsetFormat()throws Exception {CSVParser.parse((File)null,Charset.defaultCharset(),CSVFormat.DEFAULT);}
@Test(expected=IllegalArgumentException.class)public void testParserUrlNullCharsetFormat()throws Exception {try (final CSVParser parser=CSVParser.parse(new URL("http://commons.apache.org"),null,CSVFormat.DEFAULT)){Assert.fail("This test should have thrown an exception.");}}
@Test(expected=IllegalArgumentException.class)public void testParseStringNullFormat()throws Exception {CSVParser.parse("csv data",null);}
@Test(expected=IllegalArgumentException.class)public void testParseUrlCharsetNullFormat()throws Exception {try (final CSVParser parser=CSVParser.parse(new URL("http://commons.apache.org"),Charset.defaultCharset(),null)){Assert.fail("This test should have thrown an exception.");}}
@Test public void testProvidedHeader()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("A","B","C").parse(in).iterator();for (int i=0;i < 3;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertTrue(record.isMapped("A"));assertTrue(record.isMapped("B"));assertTrue(record.isMapped("C"));assertFalse(record.isMapped("NOT MAPPED"));assertEquals(record.get(0),record.get("A"));assertEquals(record.get(1),record.get("B"));assertEquals(record.get(2),record.get("C"));}assertFalse(records.hasNext());}
@Test public void testProvidedHeaderAuto()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertTrue(record.isMapped("a"));assertTrue(record.isMapped("b"));assertTrue(record.isMapped("c"));assertFalse(record.isMapped("NOT MAPPED"));assertEquals(record.get(0),record.get("a"));assertEquals(record.get(1),record.get("b"));assertEquals(record.get(2),record.get("c"));}assertFalse(records.hasNext());}
@Test public void testRoundtrip()throws Exception {final StringWriter out=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(out,CSVFormat.DEFAULT)){final String input="a,b,c\r\n1,2,3\r\nx,y,z\r\n";for(final CSVRecord record : CSVParser.parse(input,CSVFormat.DEFAULT)){printer.printRecord(record);}assertEquals(input,out.toString());}}
@Test public void testSkipAutoHeader()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("a"));assertEquals("2",record.get("b"));assertEquals("3",record.get("c"));}
@Test public void testSkipHeaderOverrideDuplicateHeaders()throws Exception {final Reader in=new StringReader("a,a,a\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("X","Y","Z").withSkipHeaderRecord().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("X"));assertEquals("2",record.get("Y"));assertEquals("3",record.get("Z"));}
@Test public void testSkipSetAltHeaders()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("X","Y","Z").withSkipHeaderRecord().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("X"));assertEquals("2",record.get("Y"));assertEquals("3",record.get("Z"));}
@Test public void testSkipSetHeader()throws Exception {final Reader in=new StringReader("a,b,c\n1,2,3\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("a","b","c").withSkipHeaderRecord().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("a"));assertEquals("2",record.get("b"));assertEquals("3",record.get("c"));}
@Test @Ignore public void testStartWithEmptyLinesThenHeaders()throws Exception {final String[]codes={"\r\n\r\n\r\nhello,\r\n\r\n\r\n","hello,\n\n\n","hello,\"\"\r\n\r\n\r\n","hello,\"\"\n\n\n"};final String[][]res={{"hello",""},{""},{""}};for(final String code : codes){try (final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL)){final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}}}}
@Test public void testTrailingDelimiter()throws Exception {final Reader in=new StringReader("a,a,a,\n\"1\",\"2\",\"3\",\nx,y,z,");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("X","Y","Z").withSkipHeaderRecord().withTrailingDelimiter().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("X"));assertEquals("2",record.get("Y"));assertEquals("3",record.get("Z"));Assert.assertEquals(3,record.size());}
@Test public void testTrim()throws Exception {final Reader in=new StringReader("a,a,a\n\" 1 \",\" 2 \",\" 3 \"\nx,y,z");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader("X","Y","Z").withSkipHeaderRecord().withTrim().parse(in).iterator();final CSVRecord record=records.next();assertEquals("1",record.get("X"));assertEquals("2",record.get("Y"));assertEquals("3",record.get("Z"));Assert.assertEquals(3,record.size());}
@Test public void testHasType(){assertFalse(hasType(Token.Type.COMMENT).matches(token));assertFalse(hasType(Token.Type.EOF).matches(token));assertFalse(hasType(Token.Type.EORECORD).matches(token));assertTrue(hasType(Token.Type.TOKEN).matches(token));}
@Test public void testHasContent(){assertFalse(hasContent("This is not the token's content").matches(token));assertTrue(hasContent("content").matches(token));}
@Test public void testIsReady(){assertTrue(isReady().matches(token));token.isReady=false;assertFalse(isReady().matches(token));}
@Test public void testMatches(){assertTrue(matches(Token.Type.TOKEN,"content").matches(token));assertFalse(matches(Token.Type.EOF,"content").matches(token));assertFalse(matches(Token.Type.TOKEN,"not the content").matches(token));assertFalse(matches(Token.Type.EORECORD,"not the content").matches(token));}
@Test public void testDelimeterQuoted()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote('\''))){printer.print("a,b,c");printer.print("xyz");assertEquals("'a,b,c',xyz",sw.toString());}}
@Test public void testDelimeterQuoteNONE()throws IOException {final StringWriter sw=new StringWriter();final CSVFormat format=CSVFormat.DEFAULT.withEscape('!').withQuoteMode(QuoteMode.NONE);try (final CSVPrinter printer=new CSVPrinter(sw,format)){printer.print("a,b,c");printer.print("xyz");assertEquals("a!,b!,c,xyz",sw.toString());}}
@Test public void testDelimiterEscaped()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape('!').withQuote(null))){printer.print("a,b,c");printer.print("xyz");assertEquals("a!,b!,c,xyz",sw.toString());}}
@Test public void testDelimiterPlain()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null))){printer.print("a,b,c");printer.print("xyz");assertEquals("a,b,c,xyz",sw.toString());}}
@Test public void testDisabledComment()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printComment("This is a comment");assertEquals("",sw.toString());}}
@Test public void testEOLEscaped()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null).withEscape('!'))){printer.print("a\rb\nc");printer.print("x\fy\bz");assertEquals("a!rb!nc,x\fy\bz",sw.toString());}}
@Test public void testEOLPlain()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null))){printer.print("a\rb\nc");printer.print("x\fy\bz");assertEquals("a\rb\nc,x\fy\bz",sw.toString());}}
@Test public void testEOLQuoted()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote('\''))){printer.print("a\rb\nc");printer.print("x\by\fz");assertEquals("'a\rb\nc',x\by\fz",sw.toString());}}
@Test public void testEscapeBackslash1()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(QUOTE_CH))){printer.print("\\");}assertEquals("\\",sw.toString());}
@Test public void testEscapeBackslash2()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(QUOTE_CH))){printer.print("\\\r");}assertEquals("'\\\r'",sw.toString());}
@Test public void testEscapeBackslash3()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(QUOTE_CH))){printer.print("X\\\r");}assertEquals("'X\\\r'",sw.toString());}
@Test public void testEscapeBackslash4()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(QUOTE_CH))){printer.print("\\\\");}assertEquals("\\\\",sw.toString());}
@Test public void testEscapeBackslash5()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(QUOTE_CH))){printer.print("\\\\");}assertEquals("\\\\",sw.toString());}
@Test public void testEscapeNull1()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape(null))){printer.print("\\");}assertEquals("\\",sw.toString());}
@Test public void testEscapeNull2()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape(null))){printer.print("\\\r");}assertEquals("\"\\\r\"",sw.toString());}
@Test public void testEscapeNull3()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape(null))){printer.print("X\\\r");}assertEquals("\"X\\\r\"",sw.toString());}
@Test public void testEscapeNull4()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape(null))){printer.print("\\\\");}assertEquals("\\\\",sw.toString());}
@Test public void testEscapeNull5()throws IOException {StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape(null))){printer.print("\\\\");}assertEquals("\\\\",sw.toString());}
@Test public void testExcelPrintAllArrayOfArrays()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL)){printer.printRecords((Object[])new String[][]{{"r1c1","r1c2"},{"r2c1","r2c2"}});assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2"+ recordSeparator,sw.toString());}}
@Test public void testExcelPrintAllArrayOfLists()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL)){printer.printRecords((Object[])new List[]{Arrays.asList("r1c1","r1c2"),Arrays.asList("r2c1","r2c2")});assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2"+ recordSeparator,sw.toString());}}
@Test public void testExcelPrintAllIterableOfArrays()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL)){printer.printRecords(Arrays.asList(new String[][]{{"r1c1","r1c2"},{"r2c1","r2c2"}}));assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2"+ recordSeparator,sw.toString());}}
@Test public void testExcelPrintAllIterableOfLists()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL)){printer.printRecords(Arrays.asList(new List[]{Arrays.asList("r1c1","r1c2"),Arrays.asList("r2c1","r2c2")}));assertEquals("r1c1,r1c2" + recordSeparator + "r2c1,r2c2"+ recordSeparator,sw.toString());}}
@Test public void testExcelPrinter1()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL)){printer.printRecord("a","b");assertEquals("a,b" + recordSeparator,sw.toString());}}
@Test public void testExcelPrinter2()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL)){printer.printRecord("a,b","b");assertEquals("\"a,b\",b" + recordSeparator,sw.toString());}}
@Test public void testHeader()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null).withHeader("C1","C2","C3"))){printer.printRecord("a","b","c");printer.printRecord("x","y","z");assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n",sw.toString());}}
@Test public void testHeaderCommentExcel()throws IOException {final StringWriter sw=new StringWriter();final Date now=new Date();final CSVFormat format=CSVFormat.EXCEL;try (final CSVPrinter csvPrinter=printWithHeaderComments(sw,now,format)){assertEquals("# Generated by Apache Commons CSV 1.1\r\n# " + now + "\r\nCol1,Col2\r\nA,B\r\nC,D\r\n",sw.toString());}}
@Test public void testHeaderCommentTdf()throws IOException {final StringWriter sw=new StringWriter();final Date now=new Date();final CSVFormat format=CSVFormat.TDF;try (final CSVPrinter csvPrinter=printWithHeaderComments(sw,now,format)){assertEquals("# Generated by Apache Commons CSV 1.1\r\n# " + now + "\r\nCol1\tCol2\r\nA\tB\r\nC\tD\r\n",sw.toString());}}
@Test public void testHeaderNotSet()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null))){printer.printRecord("a","b","c");printer.printRecord("x","y","z");assertEquals("a,b,c\r\nx,y,z\r\n",sw.toString());}}
@Test(expected=IllegalArgumentException.class)public void testInvalidFormat()throws Exception {final CSVFormat invalidFormat=CSVFormat.DEFAULT.withDelimiter(CR);try (final CSVPrinter printer=new CSVPrinter(new StringWriter(),invalidFormat)){Assert.fail("This test should have thrown an exception.");}}
@Test public void testJdbcPrinter()throws IOException,ClassNotFoundException,SQLException {final StringWriter sw=new StringWriter();try (final Connection connection=geH2Connection()){setUpTable(connection);try (final Statement stmt=connection.createStatement();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecords(stmt.executeQuery("select ID,NAME from TEST"));}}assertEquals("1,r1" + recordSeparator + "2,r2"+ recordSeparator,sw.toString());}
@Test public void testJdbcPrinterWithResultSet()throws IOException,ClassNotFoundException,SQLException {final StringWriter sw=new StringWriter();Class.forName("org.h2.Driver");try (final Connection connection=geH2Connection()){setUpTable(connection);try (final Statement stmt=connection.createStatement();final ResultSet resultSet=stmt.executeQuery("select ID,NAME from TEST");final CSVPrinter printer=CSVFormat.DEFAULT.withHeader(resultSet).print(sw)){printer.printRecords(resultSet);}}assertEquals("ID,NAME" + recordSeparator + "1,r1"+ recordSeparator+ "2,r2"+ recordSeparator,sw.toString());}
@Test public void testJdbcPrinterWithResultSetMetaData()throws IOException,ClassNotFoundException,SQLException {final StringWriter sw=new StringWriter();Class.forName("org.h2.Driver");try (final Connection connection=geH2Connection()){setUpTable(connection);try (final Statement stmt=connection.createStatement();final ResultSet resultSet=stmt.executeQuery("select ID,NAME from TEST");final CSVPrinter printer=CSVFormat.DEFAULT.withHeader(resultSet.getMetaData()).print(sw)){printer.printRecords(resultSet);assertEquals("ID,NAME" + recordSeparator + "1,r1"+ recordSeparator+ "2,r2"+ recordSeparator,sw.toString());}}}
@Test @Ignore public void testJira135_part1()throws IOException {final CSVFormat format=CSVFormat.DEFAULT.withRecordSeparator('\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);final StringWriter sw=new StringWriter();final List<String> list=new LinkedList<>();try (final CSVPrinter printer=new CSVPrinter(sw,format)){list.add("\"");printer.printRecord(list);}final String expected="\"\\\"\"" + format.getRecordSeparator();assertEquals(expected,sw.toString());final String[]record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(list.toArray(),format),record0);}
@Test @Ignore public void testJira135_part2()throws IOException {final CSVFormat format=CSVFormat.DEFAULT.withRecordSeparator('\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);final StringWriter sw=new StringWriter();final List<String> list=new LinkedList<>();try (final CSVPrinter printer=new CSVPrinter(sw,format)){list.add("\n");printer.printRecord(list);}final String expected="\"\\n\"" + format.getRecordSeparator();assertEquals(expected,sw.toString());final String[]record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(list.toArray(),format),record0);}
@Test @Ignore public void testJira135_part3()throws IOException {final CSVFormat format=CSVFormat.DEFAULT.withRecordSeparator('\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);final StringWriter sw=new StringWriter();final List<String> list=new LinkedList<>();try (final CSVPrinter printer=new CSVPrinter(sw,format)){list.add("\\");printer.printRecord(list);}final String expected="\"\\\\\"" + format.getRecordSeparator();assertEquals(expected,sw.toString());final String[]record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(list.toArray(),format),record0);}
@Test @Ignore public void testJira135All()throws IOException {final CSVFormat format=CSVFormat.DEFAULT.withRecordSeparator('\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);final StringWriter sw=new StringWriter();final List<String> list=new LinkedList<>();try (final CSVPrinter printer=new CSVPrinter(sw,format)){list.add("\"");list.add("\n");list.add("\\");printer.printRecord(list);}final String expected="\"\\\"\",\"\\n\",\"\\\"" + format.getRecordSeparator();assertEquals(expected,sw.toString());final String[]record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(list.toArray(),format),record0);}
@Test public void testMultiLineComment()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withCommentMarker('#'))){printer.printComment("This is a comment\non multiple lines");assertEquals("# This is a comment" + recordSeparator + "# on multiple lines"+ recordSeparator,sw.toString());}}
@Test public void testMySqlNullOutput()throws IOException {Object[]s=new String[]{"NULL",null};CSVFormat format=CSVFormat.MYSQL.withQuote(DQUOTE_CHAR).withNullString("NULL").withQuoteMode(QuoteMode.NON_NUMERIC);StringWriter writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}String expected="\"NULL\"\tNULL\n";assertEquals(expected,writer.toString());String[]record0=toFirstRecordValues(expected,format);assertArrayEquals(new Object[2],record0);s=new String[]{"\\N",null};format=CSVFormat.MYSQL.withNullString("\\N");writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\\\\N\t\\N\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"\\N","A"};format=CSVFormat.MYSQL.withNullString("\\N");writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\\\\N\tA\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"\n","A"};format=CSVFormat.MYSQL.withNullString("\\N");writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\\n\tA\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"",null};format=CSVFormat.MYSQL.withNullString("NULL");writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\tNULL\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"",null};format=CSVFormat.MYSQL;writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\t\\N\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"\\N","","\u000e,\\\r"};format=CSVFormat.MYSQL;writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\\\\N\t\t\u000e,\\\\\\r\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"NULL","\\\r"};format=CSVFormat.MYSQL;writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="NULL\t\\\\\\r\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);s=new String[]{"\\\r"};format=CSVFormat.MYSQL;writer=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(writer,format)){printer.printRecord(s);}expected="\\\\\\r\n";assertEquals(expected,writer.toString());record0=toFirstRecordValues(expected,format);assertArrayEquals(expectNulls(s,format),record0);}
@Test public void testMySqlNullStringDefault(){assertEquals("\\N",CSVFormat.MYSQL.getNullString());}
@Test(expected=IllegalArgumentException.class)public void testNewCsvPrinterAppendableNullFormat()throws Exception {try (final CSVPrinter printer=new CSVPrinter(new StringWriter(),null)){Assert.fail("This test should have thrown an exception.");}}
@Test(expected=IllegalArgumentException.class)public void testNewCSVPrinterNullAppendableFormat()throws Exception {try (final CSVPrinter printer=new CSVPrinter(null,CSVFormat.DEFAULT)){Assert.fail("This test should have thrown an exception.");}}
@Test public void testParseCustomNullValues()throws IOException {final StringWriter sw=new StringWriter();final CSVFormat format=CSVFormat.DEFAULT.withNullString("NULL");try (final CSVPrinter printer=new CSVPrinter(sw,format)){printer.printRecord("a",null,"b");}final String csvString=sw.toString();assertEquals("a,NULL,b" + recordSeparator,csvString);try (final CSVParser iterable=format.parse(new StringReader(csvString))){final Iterator<CSVRecord> iterator=iterable.iterator();final CSVRecord record=iterator.next();assertEquals("a",record.get(0));assertEquals(null,record.get(1));assertEquals("b",record.get(2));assertFalse(iterator.hasNext());}}
@Test public void testPlainEscaped()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null).withEscape('!'))){printer.print("abc");printer.print("xyz");assertEquals("abc,xyz",sw.toString());}}
@Test public void testPlainPlain()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null))){printer.print("abc");printer.print("xyz");assertEquals("abc,xyz",sw.toString());}}
@Test public void testPlainQuoted()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote('\''))){printer.print("abc");assertEquals("abc",sw.toString());}}
@Test public void testPrint()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=CSVFormat.DEFAULT.print(sw)){printer.printRecord("a","b\\c");assertEquals("a,b\\c" + recordSeparator,sw.toString());}}
@Test public void testPrintCustomNullValues()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withNullString("NULL"))){printer.printRecord("a",null,"b");assertEquals("a,NULL,b" + recordSeparator,sw.toString());}}
@Test public void testPrinter1()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a","b");assertEquals("a,b" + recordSeparator,sw.toString());}}
@Test public void testPrinter2()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a,b","b");assertEquals("\"a,b\",b" + recordSeparator,sw.toString());}}
@Test public void testPrinter3()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a,b","b ");assertEquals("\"a,b\",\"b \"" + recordSeparator,sw.toString());}}
@Test public void testPrinter4()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a","b\"c");assertEquals("a,\"b\"\"c\"" + recordSeparator,sw.toString());}}
@Test public void testPrinter5()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a","b\nc");assertEquals("a,\"b\nc\"" + recordSeparator,sw.toString());}}
@Test public void testPrinter6()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a","b\r\nc");assertEquals("a,\"b\r\nc\"" + recordSeparator,sw.toString());}}
@Test public void testPrinter7()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a","b\\c");assertEquals("a,b\\c" + recordSeparator,sw.toString());}}
@Test public void testPrintNullValues()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT)){printer.printRecord("a",null,"b");assertEquals("a,,b" + recordSeparator,sw.toString());}}
@Test public void testPrintOnePositiveInteger()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteMode(QuoteMode.MINIMAL))){printer.print(Integer.MAX_VALUE);assertEquals(String.valueOf(Integer.MAX_VALUE),sw.toString());}}
@Test public void testPrintToFileWithCharsetUtf16Be()throws IOException {File file=File.createTempFile(getClass().getName(),".csv");try (final CSVPrinter printer=CSVFormat.DEFAULT.print(file,StandardCharsets.UTF_16BE)){printer.printRecord("a","b\\c");}assertEquals("a,b\\c" + recordSeparator,FileUtils.readFileToString(file,StandardCharsets.UTF_16BE));}
@Test public void testPrintToFileWithDefaultCharset()throws IOException {File file=File.createTempFile(getClass().getName(),".csv");try (final CSVPrinter printer=CSVFormat.DEFAULT.print(file,Charset.defaultCharset())){printer.printRecord("a","b\\c");}assertEquals("a,b\\c" + recordSeparator,FileUtils.readFileToString(file,Charset.defaultCharset()));}
@Test public void testPrintToPathWithDefaultCharset()throws IOException {File file=File.createTempFile(getClass().getName(),".csv");try (final CSVPrinter printer=CSVFormat.DEFAULT.print(file.toPath(),Charset.defaultCharset())){printer.printRecord("a","b\\c");}assertEquals("a,b\\c" + recordSeparator,FileUtils.readFileToString(file,Charset.defaultCharset()));}
@Test public void testQuoteAll()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteMode(QuoteMode.ALL))){printer.printRecord("a","b\nc","d");assertEquals("\"a\",\"b\nc\",\"d\"" + recordSeparator,sw.toString());}}
@Test public void testQuoteNonNumeric()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC))){printer.printRecord("a","b\nc",Integer.valueOf(1));assertEquals("\"a\",\"b\nc\",1" + recordSeparator,sw.toString());}}
@Test public void testRandomDefault()throws Exception {doRandom(CSVFormat.DEFAULT,ITERATIONS_FOR_RANDOM_TEST);}
@Test public void testRandomExcel()throws Exception {doRandom(CSVFormat.EXCEL,ITERATIONS_FOR_RANDOM_TEST);}
@Test public void testRandomMySql()throws Exception {doRandom(CSVFormat.MYSQL,ITERATIONS_FOR_RANDOM_TEST);}
@Test public void testRandomRfc4180()throws Exception {doRandom(CSVFormat.RFC4180,ITERATIONS_FOR_RANDOM_TEST);}
@Test public void testRandomTdf()throws Exception {doRandom(CSVFormat.TDF,ITERATIONS_FOR_RANDOM_TEST);}
@Test public void testSingleLineComment()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withCommentMarker('#'))){printer.printComment("This is a comment");assertEquals("# This is a comment" + recordSeparator,sw.toString());}}
@Test public void testSingleQuoteQuoted()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote('\''))){printer.print("a'b'c");printer.print("xyz");assertEquals("'a''b''c',xyz",sw.toString());}}
@Test public void testSkipHeaderRecordFalse()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null).withHeader("C1","C2","C3").withSkipHeaderRecord(false))){printer.printRecord("a","b","c");printer.printRecord("x","y","z");assertEquals("C1,C2,C3\r\na,b,c\r\nx,y,z\r\n",sw.toString());}}
@Test public void testSkipHeaderRecordTrue()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuote(null).withHeader("C1","C2","C3").withSkipHeaderRecord(true))){printer.printRecord("a","b","c");printer.printRecord("x","y","z");assertEquals("a,b,c\r\nx,y,z\r\n",sw.toString());}}
@Test public void testTrailingDelimiterOnTwoColumns()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withTrailingDelimiter())){printer.printRecord("A","B");assertEquals("A,B,\r\n",sw.toString());}}
@Test public void testTrimOffOneColumn()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withTrim(false))){printer.print(" A ");assertEquals("\" A \"",sw.toString());}}
@Test public void testTrimOnOneColumn()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withTrim())){printer.print(" A ");assertEquals("A",sw.toString());}}
@Test public void testTrimOnTwoColumns()throws IOException {final StringWriter sw=new StringWriter();try (final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withTrim())){printer.print(" A ");printer.print(" B ");assertEquals("A,B",sw.toString());}}
