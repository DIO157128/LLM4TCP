@Test(expected=IllegalArgumentException.class)public void shouldNotAllowReadingOfANegativeAmountOfBits()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);bis.readBits(-1);bis.close();}
@Test(expected=IllegalArgumentException.class)public void shouldNotAllowReadingOfMoreThan63BitsAtATime()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);bis.readBits(64);bis.close();}
@Test public void testReading24BitsInLittleEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);assertEquals(0x000140f8,bis.readBits(24));bis.close();}
@Test public void testReading24BitsInBigEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.BIG_ENDIAN);assertEquals(0x00f84001,bis.readBits(24));bis.close();}
@Test public void testReading17BitsInLittleEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);assertEquals(0x000140f8,bis.readBits(17));bis.close();}
@Test public void testReading17BitsInBigEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.BIG_ENDIAN);assertEquals(0x0001f080,bis.readBits(17));bis.close();}
@Test public void testReading30BitsInLittleEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);assertEquals(0x2f0140f8,bis.readBits(30));bis.close();}
@Test public void testReading30BitsInBigEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.BIG_ENDIAN);assertEquals(0x3e10004b,bis.readBits(30));bis.close();}
@Test public void testReading31BitsInLittleEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);assertEquals(0x2f0140f8,bis.readBits(31));bis.close();}
@Test public void testReading31BitsInBigEndian()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.BIG_ENDIAN);assertEquals(0x7c200097,bis.readBits(31));bis.close();}
@Test public void testClearBitCache()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);assertEquals(0x08,bis.readBits(4));bis.clearBitCache();assertEquals(0,bis.readBits(1));bis.close();}
@Test public void testEOF()throws IOException {final BitInputStream bis=new BitInputStream(getStream(),ByteOrder.LITTLE_ENDIAN);assertEquals(0x2f0140f8,bis.readBits(30));assertEquals(-1,bis.readBits(3));bis.close();}
@Test public void testCDOrder()throws Exception {readOrderTest();final ArrayList<ZipArchiveEntry> l=Collections.list(zf.getEntries());assertEntryName(l,0,"AbstractUnicodeExtraField");assertEntryName(l,1,"AsiExtraField");assertEntryName(l,2,"ExtraFieldUtils");assertEntryName(l,3,"FallbackZipEncoding");assertEntryName(l,4,"GeneralPurposeBit");assertEntryName(l,5,"JarMarker");assertEntryName(l,6,"NioZipEncoding");assertEntryName(l,7,"Simple8BitZipEncoding");assertEntryName(l,8,"UnicodeCommentExtraField");assertEntryName(l,9,"UnicodePathExtraField");assertEntryName(l,10,"UnixStat");assertEntryName(l,11,"UnparseableExtraFieldData");assertEntryName(l,12,"UnrecognizedExtraField");assertEntryName(l,13,"ZipArchiveEntry");assertEntryName(l,14,"ZipArchiveInputStream");assertEntryName(l,15,"ZipArchiveOutputStream");assertEntryName(l,16,"ZipEncoding");assertEntryName(l,17,"ZipEncodingHelper");assertEntryName(l,18,"ZipExtraField");assertEntryName(l,19,"ZipUtil");assertEntryName(l,20,"ZipLong");assertEntryName(l,21,"ZipShort");assertEntryName(l,22,"ZipFile");}
@Test public void testPhysicalOrder()throws Exception {readOrderTest();final ArrayList<ZipArchiveEntry> l=Collections.list(zf.getEntriesInPhysicalOrder());assertEntryName(l,0,"AbstractUnicodeExtraField");assertEntryName(l,1,"AsiExtraField");assertEntryName(l,2,"ExtraFieldUtils");assertEntryName(l,3,"FallbackZipEncoding");assertEntryName(l,4,"GeneralPurposeBit");assertEntryName(l,5,"JarMarker");assertEntryName(l,6,"NioZipEncoding");assertEntryName(l,7,"Simple8BitZipEncoding");assertEntryName(l,8,"UnicodeCommentExtraField");assertEntryName(l,9,"UnicodePathExtraField");assertEntryName(l,10,"UnixStat");assertEntryName(l,11,"UnparseableExtraFieldData");assertEntryName(l,12,"UnrecognizedExtraField");assertEntryName(l,13,"ZipArchiveEntry");assertEntryName(l,14,"ZipArchiveInputStream");assertEntryName(l,15,"ZipArchiveOutputStream");assertEntryName(l,16,"ZipEncoding");assertEntryName(l,17,"ZipEncodingHelper");assertEntryName(l,18,"ZipExtraField");assertEntryName(l,19,"ZipFile");assertEntryName(l,20,"ZipLong");assertEntryName(l,21,"ZipShort");assertEntryName(l,22,"ZipUtil");}
@Test public void testDoubleClose()throws Exception {readOrderTest();zf.close();try {zf.close();}catch(final Exception ex){fail("Caught exception of second close");}}
@Test public void testReadingOfStoredEntry()throws Exception {final File f=File.createTempFile("commons-compress-zipfiletest",".zip");f.deleteOnExit();OutputStream o=null;InputStream i=null;try {o=new FileOutputStream(f);final ZipArchiveOutputStream zo=new ZipArchiveOutputStream(o);ZipArchiveEntry ze=new ZipArchiveEntry("foo");ze.setMethod(ZipEntry.STORED);ze.setSize(4);ze.setCrc(0xb63cfbcdl);zo.putArchiveEntry(ze);zo.write(new byte[]{1,2,3,4});zo.closeArchiveEntry();zo.close();o.close();o=null;zf=new ZipFile(f);ze=zf.getEntry("foo");assertNotNull(ze);i=zf.getInputStream(ze);final byte[]b=new byte[4];assertEquals(4,i.read(b));assertEquals(-1,i.read());}finally {if (o != null){o.close();}if (i != null){i.close();}f.delete();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-176"*/@Test public void testWinzipBackSlashWorkaround()throws Exception {final File archive=getFile("test-winzip.zip");zf=new ZipFile(archive);assertNull(zf.getEntry("\u00e4\\\u00fc.txt"));assertNotNull(zf.getEntry("\u00e4/\u00fc.txt"));}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-208" >COMPRESS-208</a>.*/@Test public void testSkipsPK00Prefix()throws Exception {final File archive=getFile("COMPRESS-208.zip");zf=new ZipFile(archive);assertNotNull(zf.getEntry("test1.xml"));assertNotNull(zf.getEntry("test2.xml"));}
@Test public void testUnixSymlinkSampleFile()throws Exception {final String entryPrefix="COMPRESS-214_unix_symlinks/";final TreeMap<String,String> expectedVals=new TreeMap<String,String>();expectedVals.put(entryPrefix + "link1","../COMPRESS-214_unix_symlinks/./a/b/c/../../../\uF999");expectedVals.put(entryPrefix + "link2","../COMPRESS-214_unix_symlinks/./a/b/c/../../../g");expectedVals.put(entryPrefix + "link3","../COMPRESS-214_unix_symlinks/././a/b/c/../../../\u76F4\u6A39");expectedVals.put(entryPrefix + "link4","\u82B1\u5B50/\u745B\u5B50");expectedVals.put(entryPrefix + "\uF999","./\u82B1\u5B50/\u745B\u5B50/\u5897\u8C37/\uF999");expectedVals.put(entryPrefix + "g","./a/b/c/d/e/f/g");expectedVals.put(entryPrefix + "\u76F4\u6A39","./g");expectedVals.put(entryPrefix + "link5","../COMPRESS-214_unix_symlinks/././a/b");expectedVals.put(entryPrefix + "link6","../COMPRESS-214_unix_symlinks/././a/b/");final File archive=getFile("COMPRESS-214_unix_symlinks.zip");zf=new ZipFile(archive);final Enumeration<ZipArchiveEntry> en=zf.getEntries();while (en.hasMoreElements()){final ZipArchiveEntry zae=en.nextElement();final String link=zf.getUnixSymlink(zae);if (zae.isUnixSymlink()){final String name=zae.getName();final String expected=expectedVals.get(name);assertEquals(expected,link);}else {assertNull(link);}}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-227"*/@Test public void testDuplicateEntry()throws Exception {final File archive=getFile("COMPRESS-227.zip");zf=new ZipFile(archive);final ZipArchiveEntry ze=zf.getEntry("test1.txt");assertNotNull(ze);assertNotNull(zf.getInputStream(ze));int numberOfEntries=0;for(final ZipArchiveEntry entry : zf.getEntries("test1.txt")){numberOfEntries++;assertNotNull(zf.getInputStream(entry));}assertEquals(2,numberOfEntries);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-228"*/@Test public void testExcessDataInZip64ExtraField()throws Exception {final File archive=getFile("COMPRESS-228.zip");zf=new ZipFile(archive);final ZipArchiveEntry ze=zf.getEntry("src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java");assertEquals(26101,ze.getSize());}
@Test public void testUnshrinking()throws Exception {zf=new ZipFile(getFile("SHRUNK.ZIP"));ZipArchiveEntry test=zf.getEntry("TEST1.XML");FileInputStream original=new FileInputStream(getFile("test1.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(zf.getInputStream(test)));}finally {original.close();}test=zf.getEntry("TEST2.XML");original=new FileInputStream(getFile("test2.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(zf.getInputStream(test)));}finally {original.close();}}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-264" >COMPRESS-264</a>.*/@Test public void testReadingOfFirstStoredEntry()throws Exception {final File archive=getFile("COMPRESS-264.zip");zf=new ZipFile(archive);final ZipArchiveEntry ze=zf.getEntry("test.txt");assertEquals(5,ze.getSize());assertArrayEquals(new byte[]{'d','a','t','a','\n'},IOUtils.toByteArray(zf.getInputStream(ze)));}
@Test public void testUnzipBZip2CompressedEntry()throws Exception {final File archive=getFile("bzip2-zip.zip");zf=new ZipFile(archive);final ZipArchiveEntry ze=zf.getEntry("lots-of-as");assertEquals(42,ze.getSize());final byte[]expected=new byte[42];Arrays.fill(expected,(byte)'a');assertArrayEquals(expected,IOUtils.toByteArray(zf.getInputStream(ze)));}
@Test public void testLZMAUnarchive()throws Exception {final File input=getFile("bla.tar.lzma");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new LZMACompressorInputStream(is);copy(in,output);}finally {is.close();}}
@Test public void testLZMAUnarchiveWithAutodetection()throws Exception {final File input=getFile("bla.tar.lzma");final File output=new File(dir,"bla.tar");final InputStream is=new BufferedInputStream(new FileInputStream(input));try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream(is);copy(in,output);}finally {is.close();}}
@Test public void testArchive(){}
@Test public void testArchiveWithImplodeCompression4K2Trees()throws IOException {testArchiveWithImplodeCompression("target/test-classes/imploding-4Kdict-2trees.zip","HEADER.TXT");}
@Test public void testArchiveWithImplodeCompression8K3Trees()throws IOException {testArchiveWithImplodeCompression("target/test-classes/imploding-8Kdict-3trees.zip","LICENSE.TXT");}
@Test public void testTikaTestArchive()throws IOException {testArchiveWithImplodeCompression("target/test-classes/moby-imploded.zip","README");}
@Test public void testZipStreamWithImplodeCompression4K2Trees()throws IOException {testZipStreamWithImplodeCompression("target/test-classes/imploding-4Kdict-2trees.zip","HEADER.TXT");}
@Test public void testZipStreamWithImplodeCompression8K3Trees()throws IOException {testZipStreamWithImplodeCompression("target/test-classes/imploding-8Kdict-3trees.zip","LICENSE.TXT");}
@Test public void testTikaTestStream()throws IOException {testZipStreamWithImplodeCompression("target/test-classes/moby-imploded.zip","README");}
@Test public void testSimpleCp437Encoding()throws IOException {doSimpleEncodingTest("Cp437",null);}
@Test public void testSimpleCp850Encoding()throws IOException {doSimpleEncodingTest("Cp850",null);}
@Test public void testNioCp1252Encoding()throws IOException {final byte[]b=new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,(byte)0x80,(byte)0x82,(byte)0x83,(byte)0x84,(byte)0x85,(byte)0x86,(byte)0x87,(byte)0x88,(byte)0x89,(byte)0x8A,(byte)0x8B,(byte)0x8C,(byte)0x8E,(byte)0x91,(byte)0x92,(byte)0x93,(byte)0x94,(byte)0x95,(byte)0x96,(byte)0x97,(byte)0x98,(byte)0x99,(byte)0x9A,(byte)0x9B,(byte)0x9C,(byte)0x9E,(byte)0x9F,(byte)0xA0,(byte)0xA1,(byte)0xA2,(byte)0xA3,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0xA7,(byte)0xA8,(byte)0xA9,(byte)0xAA,(byte)0xAB,(byte)0xAC,(byte)0xAD,(byte)0xAE,(byte)0xAF,(byte)0xB0,(byte)0xB1,(byte)0xB2,(byte)0xB3,(byte)0xB4,(byte)0xB5,(byte)0xB6,(byte)0xB7,(byte)0xB8,(byte)0xB9,(byte)0xBA,(byte)0xBB,(byte)0xBC,(byte)0xBD,(byte)0xBE,(byte)0xBF,(byte)0xC0,(byte)0xC1,(byte)0xC2,(byte)0xC3,(byte)0xC4,(byte)0xC5,(byte)0xC6,(byte)0xC7,(byte)0xC8,(byte)0xC9,(byte)0xCA,(byte)0xCB,(byte)0xCC,(byte)0xCD,(byte)0xCE,(byte)0xCF,(byte)0xD0,(byte)0xD1,(byte)0xD2,(byte)0xD3,(byte)0xD4,(byte)0xD5,(byte)0xD6,(byte)0xD7,(byte)0xD8,(byte)0xD9,(byte)0xDA,(byte)0xDB,(byte)0xDC,(byte)0xDD,(byte)0xDE,(byte)0xDF,(byte)0xE0,(byte)0xE1,(byte)0xE2,(byte)0xE3,(byte)0xE4,(byte)0xE5,(byte)0xE6,(byte)0xE7,(byte)0xE8,(byte)0xE9,(byte)0xEA,(byte)0xEB,(byte)0xEC,(byte)0xED,(byte)0xEE,(byte)0xEF,(byte)0xF0,(byte)0xF1,(byte)0xF2,(byte)0xF3,(byte)0xF4,(byte)0xF5,(byte)0xF6,(byte)0xF7,(byte)0xF8,(byte)0xF9,(byte)0xFA,(byte)0xFB,(byte)0xFC,(byte)0xFD,(byte)0xFE,(byte)0xFF};doSimpleEncodingTest("Cp1252",b);}
@Test public void availableShouldReturnNonZero()throws IOException {final File input=AbstractTestCase.getFile("bla.tar.deflatez");final InputStream is=new FileInputStream(input);try {final DeflateCompressorInputStream in=new DeflateCompressorInputStream(is);Assert.assertTrue(in.available()> 0);in.close();}finally {is.close();}}
@Test public void shouldBeAbleToSkipAByte()throws IOException {final File input=AbstractTestCase.getFile("bla.tar.deflatez");final InputStream is=new FileInputStream(input);try {final DeflateCompressorInputStream in=new DeflateCompressorInputStream(is);Assert.assertEquals(1,in.skip(1));in.close();}finally {is.close();}}
@Test public void singleByteReadWorksAsExpected()throws IOException {final File input=AbstractTestCase.getFile("bla.tar.deflatez");final InputStream is=new FileInputStream(input);try {final DeflateCompressorInputStream in=new DeflateCompressorInputStream(is);Assert.assertEquals('t',in.read());in.close();}finally {is.close();}}
@Test public void singleByteReadReturnsMinusOneAtEof()throws IOException {final File input=AbstractTestCase.getFile("bla.tar.deflatez");final InputStream is=new FileInputStream(input);try {final DeflateCompressorInputStream in=new DeflateCompressorInputStream(is);IOUtils.toByteArray(in);Assert.assertEquals(-1,in.read());in.close();}finally {is.close();}}
@Test public void testIsCompressedFilename(){assertFalse(XZUtils.isCompressedFilename(""));assertFalse(XZUtils.isCompressedFilename(".xz"));assertTrue(XZUtils.isCompressedFilename("x.txz"));assertTrue(XZUtils.isCompressedFilename("x.xz"));assertTrue(XZUtils.isCompressedFilename("x-xz"));assertFalse(XZUtils.isCompressedFilename("xxgz"));assertFalse(XZUtils.isCompressedFilename("xzz"));assertFalse(XZUtils.isCompressedFilename("xaz"));assertFalse(XZUtils.isCompressedFilename("x.txz "));assertFalse(XZUtils.isCompressedFilename("x.txz\n"));assertFalse(XZUtils.isCompressedFilename("x.txz.y"));}
@Test public void testGetUncompressedFilename(){assertEquals("",XZUtils.getUncompressedFilename(""));assertEquals(".xz",XZUtils.getUncompressedFilename(".xz"));assertEquals("x.tar",XZUtils.getUncompressedFilename("x.txz"));assertEquals("x",XZUtils.getUncompressedFilename("x.xz"));assertEquals("x",XZUtils.getUncompressedFilename("x-xz"));assertEquals("x.txz ",XZUtils.getUncompressedFilename("x.txz "));assertEquals("x.txz\n",XZUtils.getUncompressedFilename("x.txz\n"));assertEquals("x.txz.y",XZUtils.getUncompressedFilename("x.txz.y"));}
@Test public void testGetCompressedFilename(){assertEquals(".xz",XZUtils.getCompressedFilename(""));assertEquals("x.xz",XZUtils.getCompressedFilename("x"));assertEquals("x.txz",XZUtils.getCompressedFilename("x.tar"));assertEquals("x.wmf .xz",XZUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.xz",XZUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.xz",XZUtils.getCompressedFilename("x.wmf.y"));}
@Test public void testMatches(){final byte[]data={(byte)0xFD,'7','z','X','Z','\0'};assertFalse(XZUtils.matches(data,5));assertTrue(XZUtils.matches(data,6));assertTrue(XZUtils.matches(data,7));data[5]='0';assertFalse(XZUtils.matches(data,6));}
@Test public void testCachingIsEnabledByDefaultAndXZIsPresent(){assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE,XZUtils.getCachedXZAvailability());assertTrue(XZUtils.isXZCompressionAvailable());}
@Test public void testCanTurnOffCaching(){try {XZUtils.setCacheXZAvailablity(false);assertEquals(XZUtils.CachedAvailability.DONT_CACHE,XZUtils.getCachedXZAvailability());assertTrue(XZUtils.isXZCompressionAvailable());}finally {XZUtils.setCacheXZAvailablity(true);}}
@Test public void testTurningOnCachingReEvaluatesAvailability(){try {XZUtils.setCacheXZAvailablity(false);assertEquals(XZUtils.CachedAvailability.DONT_CACHE,XZUtils.getCachedXZAvailability());XZUtils.setCacheXZAvailablity(true);assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE,XZUtils.getCachedXZAvailability());}finally {XZUtils.setCacheXZAvailablity(true);}}
@Test public void testMatches()throws IOException {assertFalse(FramedSnappyCompressorInputStream.matches(new byte[10],10));final byte[]b=new byte[12];final File input=getFile("bla.tar.sz");final FileInputStream in=new FileInputStream(input);try {IOUtils.readFully(in,b);}finally {in.close();}assertFalse(FramedSnappyCompressorInputStream.matches(b,9));assertTrue(FramedSnappyCompressorInputStream.matches(b,10));assertTrue(FramedSnappyCompressorInputStream.matches(b,12));}
/** * Something big enough to make buffers slide.*/@Test public void testLoremIpsum()throws Exception {final FileInputStream isSz=new FileInputStream(getFile("lorem-ipsum.txt.sz"));final File outputSz=new File(dir,"lorem-ipsum.1");final File outputGz=new File(dir,"lorem-ipsum.2");try {InputStream in=new FramedSnappyCompressorInputStream(isSz);FileOutputStream out=null;try {out=new FileOutputStream(outputSz);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}final FileInputStream isGz=new FileInputStream(getFile("lorem-ipsum.txt.gz"));try {in=new GzipCompressorInputStream(isGz);try {out=new FileOutputStream(outputGz);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {isGz.close();}}finally {isSz.close();}final FileInputStream sz=new FileInputStream(outputSz);try {final FileInputStream gz=new FileInputStream(outputGz);try {assertArrayEquals(IOUtils.toByteArray(sz),IOUtils.toByteArray(gz));}finally {gz.close();}}finally {sz.close();}}
@Test public void testRemainingChunkTypes()throws Exception {final FileInputStream isSz=new FileInputStream(getFile("mixed.txt.sz"));final ByteArrayOutputStream out=new ByteArrayOutputStream();try {final FramedSnappyCompressorInputStream in=new FramedSnappyCompressorInputStream(isSz);IOUtils.copy(in,out);out.close();}finally {isSz.close();}assertArrayEquals(new byte[]{'1','2','3','4','5','6','7','8','9','5','6','7','8','9','5','6','7','8','9','5','6','7','8','9','5','6','7','8','9',10,'1','2','3','4','1','2','3','4'},out.toByteArray());}
@Test public void testAvailable()throws Exception {final FileInputStream isSz=new FileInputStream(getFile("mixed.txt.sz"));try {final FramedSnappyCompressorInputStream in=new FramedSnappyCompressorInputStream(isSz);assertEquals(0,in.available());assertEquals('1',in.read());assertEquals(3,in.available());assertEquals(3,in.read(new byte[5],0,3));assertEquals('5',in.read());assertEquals(4,in.available());assertEquals(4,in.read(new byte[5],0,4));assertEquals('5',in.read());assertEquals(19,in.available());in.close();}finally {isSz.close();}}
@Test public void testUnskippableChunk(){final byte[]input=new byte[]{(byte)0xff,6,0,0,'s','N','a','P','p','Y',2,2,0,0,1,1};try {final FramedSnappyCompressorInputStream in=new FramedSnappyCompressorInputStream(new ByteArrayInputStream(input));in.read();fail("expected an exception");in.close();}catch(final IOException ex){assertTrue(ex.getMessage().contains("unskippable chunk"));}}
@Test public void testChecksumUnmasking(){testChecksumUnmasking(0xc757l);testChecksumUnmasking(0xffffc757l);}
@Test public void testArArchiveCreation()throws Exception {final File output=new File(dir,"bla.ar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}
@Test public void testArUnarchive()throws Exception {final File output=new File(dir,"bla.ar");{final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));final ArArchiveEntry entry=(ArArchiveEntry)in.getNextEntry();final File target=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(target);IOUtils.copy(in,out);out.close();in.close();is.close();}
@Test public void testArDelete()throws Exception {final File output=new File(dir,"bla.ar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}assertEquals(8 + 60 + file1.length()+ (file1.length()% 2)+ 60+ file2.length()+ (file2.length()% 2),output.length());final File output2=new File(dir,"bla2.ar");int copied=0;int deleted=0;{final InputStream is=new FileInputStream(output);final OutputStream os=new FileOutputStream(output2);final ArchiveOutputStream aos=new ArchiveStreamFactory().createArchiveOutputStream("ar",os);final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));while (true){final ArArchiveEntry entry=(ArArchiveEntry)ais.getNextEntry();if (entry == null){break;}if ("test1.xml".equals(entry.getName())){aos.putArchiveEntry(entry);IOUtils.copy(ais,aos);aos.closeArchiveEntry();copied++;}else {IOUtils.copy(ais,new ByteArrayOutputStream());deleted++;}}ais.close();aos.close();is.close();os.close();}assertEquals(1,copied);assertEquals(1,deleted);assertEquals(8 + 60 + file1.length()+ (file1.length()% 2),output2.length());long files=0;long sum=0;{final InputStream is=new FileInputStream(output2);final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));while (true){final ArArchiveEntry entry=(ArArchiveEntry)ais.getNextEntry();if (entry == null){break;}IOUtils.copy(ais,new ByteArrayOutputStream());sum+=entry.getLength();files++;}ais.close();is.close();}assertEquals(1,files);assertEquals(file1.length(),sum);}
@Ignore @Test public void XtestDirectoryEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));final long beforeArchiveWrite=tmp[0].lastModified();final ArArchiveEntry in=new ArArchiveEntry(tmp[0],"foo");aos.putArchiveEntry(in);aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));final ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Ignore @Test public void XtestExplicitDirectoryEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));final long beforeArchiveWrite=tmp[0].lastModified();final ArArchiveEntry in=new ArArchiveEntry("foo",0,0,0,0,tmp[1].lastModified()/ 1000);aos.putArchiveEntry(in);aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));final ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testFileEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));final ArArchiveEntry in=new ArArchiveEntry(tmp[1],"foo");aos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){aos.write(b);}fis.close();fis=null;aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));final ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitFileEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));final ArArchiveEntry in=new ArArchiveEntry("foo",tmp[1].length(),0,0,0,tmp[1].lastModified()/ 1000);aos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){aos.write(b);}fis.close();fis=null;aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));final ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testDumpUnarchiveAll()throws Exception {unarchiveAll(getFile("bla.dump"));}
@Test public void testCompressedDumpUnarchiveAll()throws Exception {unarchiveAll(getFile("bla.z.dump"));}
@Test public void testArchiveDetection()throws Exception {archiveDetection(getFile("bla.dump"));}
@Test public void testCompressedArchiveDetection()throws Exception {archiveDetection(getFile("bla.z.dump"));}
@Test public void testCheckArchive()throws Exception {checkDumpArchive(getFile("bla.dump"));}
@Test public void testCheckCompressedArchive()throws Exception {checkDumpArchive(getFile("bla.z.dump"));}
/** * Adds an ArchiveEntry with the same name two times. Only the latest addition should be found in the ChangeSet,the first add should be replaced.* @throws Exception*/@Test public void testAddChangeTwice()throws Exception {InputStream in=null;InputStream in2=null;try {in=new FileInputStream(getFile("test.txt"));in2=new FileInputStream(getFile("test2.xml"));final ArchiveEntry e=new ZipArchiveEntry("test.txt");final ArchiveEntry e2=new ZipArchiveEntry("test.txt");final ChangeSet changes=new ChangeSet();changes.add(e,in);changes.add(e2,in2);assertEquals(1,changes.getChanges().size());final Change c=changes.getChanges().iterator().next();assertEquals(in2,c.getInput());}finally {if (in != null){in.close();}if (in2 != null){in2.close();}}}
/** * Adds an ArchiveEntry with the same name two times. Only the first addition should be found in the ChangeSet,the second add should never be added since replace = false* @throws Exception*/@Test public void testAddChangeTwiceWithoutReplace()throws Exception {InputStream in=null;InputStream in2=null;try {in=new FileInputStream(getFile("test.txt"));in2=new FileInputStream(getFile("test2.xml"));final ArchiveEntry e=new ZipArchiveEntry("test.txt");final ArchiveEntry e2=new ZipArchiveEntry("test.txt");final ChangeSet changes=new ChangeSet();changes.add(e,in,true);changes.add(e2,in2,false);assertEquals(1,changes.getChanges().size());final Change c=changes.getChanges().iterator().next();assertEquals(in,c.getInput());}finally {if (in != null){in.close();}if (in2 != null){in2.close();}}}
/** * Tries to delete the folder "bla" from an archive file. This should result in the deletion of bla/*,which actually means bla/test4.xml should be removed from the archive. The file something/bla (without ending,named like the folder)should not be deleted.* @throws Exception*/@Test public void testDeleteDir()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the folder "la" from an archive file. This should result in the deletion of la/*,which should not match any files/folders.* @throws Exception*/@Test public void testDeleteDir2()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.deleteDir("la");archiveListDeleteDir("la");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the folder "test.txt" from an archive file. This should not match any files/folders.* @throws Exception*/@Test public void testDeleteDir3()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.deleteDir("test.txt");archiveListDeleteDir("test.txt");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the file "bla/test5.xml" from an archive. This should result in the deletion of "bla/test5.xml".* @throws Exception*/@Test public void testDeleteFile()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.delete("bla/test5.xml");archiveListDelete("bla/test5.xml");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the file "bla" from an archive. This should result in the deletion of nothing.* @throws Exception*/@Test public void testDeleteFile2()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.delete("bla");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete and then add a file with the same name. Should delete test/test3.xml and adds test.txt with the name test/test3.xml* @throws Exception*/@Test public void testDeletePlusAddSame()throws Exception {final String archivename="zip";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();File testtxt=null;try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.delete("test/test3.xml");archiveListDelete("test/test3.xml");testtxt=getFile("test.txt");final ArchiveEntry entry=out.createArchiveEntry(testtxt,"test/test3.xml");changes.add(entry,new FileInputStream(testtxt));archiveList.add("test/test3.xml");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}ArchiveInputStream in=null;File check=null;try {final InputStream is=new FileInputStream(result);final BufferedInputStream buf=new BufferedInputStream(is);in=factory.createArchiveInputStream(buf);check=this.checkArchiveContent(in,archiveList,false);final File test3xml=new File(check,"result/test/test3.xml");assertEquals(testtxt.length(),test3xml.length());final BufferedReader reader=new BufferedReader(new FileReader(test3xml));String str;while ((str=reader.readLine())!= null){"111111111111111111111111111000101011".equals(str);}reader.close();}finally {if (in != null){in.close();}rmdir(check);}}
/** * Checks for the correct ChangeSetResults* @throws Exception*/@Test public void testChangeSetResults()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final File file1=getFile("test.txt");final ArchiveEntry entry=out.createArchiveEntry(file1,"bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);final ChangeSetResults results=performer.perform(ais,out);is.close();assertEquals(1,results.getAddedFromChangeSet().size());assertEquals("bla/test.txt",results.getAddedFromChangeSet().iterator().next());assertEquals(3,results.getDeleted().size());assertTrue(results.getDeleted().contains("bla/test4.xml"));assertTrue(results.getDeleted().contains("bla/test5.xml"));assertTrue(results.getDeleted().contains("bla/blubber/test6.xml"));assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));assertTrue(results.getAddedFromStream().contains("testdata/test2.xml"));assertTrue(results.getAddedFromStream().contains("test/test3.xml"));assertTrue(results.getAddedFromStream().contains("test.txt"));assertTrue(results.getAddedFromStream().contains("something/bla"));assertTrue(results.getAddedFromStream().contains("test with spaces.txt"));assertEquals(6,results.getAddedFromStream().size());}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete a directory with a file and adds a new directory with a new file and with the same name. Should delete dir1/* and add dir1/test.txt at the end* @throws Exception*/@Test public void testDeletePlusAdd()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final File file1=getFile("test.txt");final ArchiveEntry entry=out.createArchiveEntry(file1,"bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file to a zip archive. Deletes an other file.* @throws Exception*/@Test public void testDeleteFromAndAddToZip()throws Exception {final String archivename="zip";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");final ArchiveEntry entry=new ZipArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.delete("testdata/test1.xml");archiveListDelete("testdata/test1.xml");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file to a zip archive. Deletes an other file.* @throws Exception*/@Test public void testDeleteFromAndAddToZipUsingZipFilePerform()throws Exception {final String archivename="zip";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ZipFile ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {ais=new ZipFile(input);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");final ArchiveEntry entry=new ZipArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.delete("testdata/test1.xml");archiveListDelete("testdata/test1.xml");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * add blub/test.txt + delete blub Should add blub/test.txt and delete it afterwards. In this example,the archive should stay untouched.* @throws Exception*/@Test public void testAddDeleteAdd()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");final ArchiveEntry entry=new CpioArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.deleteDir("blub");archiveListDeleteDir("blub");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * delete bla + add bla/test.txt + delete bla Deletes dir1/* first,then suppresses the add of bla.txt because there is a delete operation later.* @throws Exception*/@Test public void testDeleteAddDelete()throws Exception {final String archivename="cpio";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();changes.deleteDir("bla");final File file1=getFile("test.txt");final ArchiveEntry entry=new CpioArchiveEntry("bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");changes.deleteDir("bla");archiveListDeleteDir("bla");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Simple Delete from a zip file.* @throws Exception*/@Test public void testDeleteFromZip()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.zip");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("zip",is);temp=File.createTempFile("test",".zip");temp.deleteOnExit();out=factory.createArchiveOutputStream("zip",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Simple delete from a tar file* @throws Exception*/@Test public void testDeleteFromTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("tar",is);temp=new File(dir,"bla.tar");out=factory.createArchiveOutputStream("tar",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Simple delete from a jar file* @throws Exception*/@Test public void testDeleteFromJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");changes.deleteDir("META-INF");changes.delete(".classpath");changes.delete(".project");final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("jar",is);temp=new File(dir,"bla.jar");out=factory.createArchiveOutputStream("jar",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
@Test public void testDeleteFromAndAddToTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File file1=getFile("test.txt");final TarArchiveEntry entry=new TarArchiveEntry("testdata/test.txt");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("tar",is);temp=new File(dir,"bla.tar");out=factory.createArchiveOutputStream("tar",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("testdata/test.txt");final ArchiveInputStream in=factory.createArchiveInputStream("tar",new FileInputStream(temp));this.checkArchiveContent(in,expected);}
/** * Delete from a jar file and add another file* @throws Exception*/@Test public void testDeleteFromAndAddToJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");changes.deleteDir("META-INF");changes.delete(".classpath");changes.delete(".project");final File file1=getFile("test.txt");final JarArchiveEntry entry=new JarArchiveEntry("testdata/test.txt");changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("jar",is);temp=new File(dir,"bla.jar");out=factory.createArchiveOutputStream("jar",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("testdata/test.txt");this.checkArchiveContent(temp,expected);}
/** * Simple delete from an ar file* @throws Exception*/@Test public void testDeleteFromAr()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.ar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("ar",is);temp=new File(dir,"bla.ar");out=factory.createArchiveOutputStream("ar",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Deletes a file from an AR-archive and adds another* @throws Exception*/@Test public void testDeleteFromAndAddToAr()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {final ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File file1=getFile("test.txt");final ArArchiveEntry entry=new ArArchiveEntry("test.txt",file1.length());changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.ar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("ar",is);temp=new File(dir,"bla.ar");out=factory.createArchiveOutputStream("ar",new FileOutputStream(temp));final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}final List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("test.txt");this.checkArchiveContent(temp,expected);}
/** * TODO: Move operations are not supported currently mv dir1/test.text dir2/test.txt + delete dir1 Moves the file to dir2 and deletes everything in dir1* @throws Exception*/@Test public void testRenameAndDelete()throws Exception {}
/** * TODO: Move operations are not supported currently add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1 Add dir1/bla.txt should be surpressed. All other dir1 files will be deleted,except dir1/test.text will be moved* @throws Exception*/@Test public void testAddMoveDelete()throws Exception {}
/** * Check can add a file to an empty archive.* @throws Exception*/@Test public void testAddToEmptyArchive()throws Exception {final String archivename="zip";final File input=this.createEmptyArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();final ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final File file1=getFile("test.txt");final ArchiveEntry entry=new ZipArchiveEntry("bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Check can delete and add a file to an archive with a single file* @throws Exception*/@Test public void testDeleteAddToOneFileArchive()throws Exception {final String archivename="zip";final File input=this.createSingleEntryArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();final ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));changes.delete("test1.xml");archiveListDelete("test1.xml");final File file=getFile("test.txt");final ArchiveEntry entry=out.createArchiveEntry(file,"bla/test.txt");changes.add(entry,new FileInputStream(file));archiveList.add("bla/test.txt");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Check can add and delete a file to an archive with a single file* @throws Exception*/@Test public void testAddDeleteToOneFileArchive()throws Exception {final String archivename="cpio";final File input=this.createSingleEntryArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();final ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final File file=getFile("test.txt");final ArchiveEntry entry=out.createArchiveEntry(file,"bla/test.txt");changes.add(entry,new FileInputStream(file));archiveList.add("bla/test.txt");changes.delete("test1.xml");archiveListDelete("test1.xml");final ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file with the same filename as an existing file from the stream. Should lead to a replacement.* @throws Exception*/@Test public void testAddAllreadyExistingWithReplaceTrue()throws Exception {final String archivename="zip";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");final ArchiveEntry entry=new ZipArchiveEntry("testdata/test1.xml");changes.add(entry,new FileInputStream(file1),true);final ChangeSetPerformer performer=new ChangeSetPerformer(changes);final ChangeSetResults results=performer.perform(ais,out);assertTrue(results.getAddedFromChangeSet().contains("testdata/test1.xml"));is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file with the same filename as an existing file from the stream. Should lead to a replacement.* @throws Exception*/@Test public void testAddAllreadyExistingWithReplaceFalse()throws Exception {final String archivename="zip";final File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;final File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");final ArchiveEntry entry=new ZipArchiveEntry("testdata/test1.xml");changes.add(entry,new FileInputStream(file1),false);final ChangeSetPerformer performer=new ChangeSetPerformer(changes);final ChangeSetResults results=performer.perform(ais,out);assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));assertTrue(results.getAddedFromChangeSet().isEmpty());assertTrue(results.getDeleted().isEmpty());is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
@Test public void testGzipCreation()throws Exception {final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.gz");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("gz",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
@Test public void testGzipUnarchive()throws Exception {final File input=getFile("bla.tgz");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("gz",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
@Test public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.gz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("gz",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
@Test public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.gz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new GzipCompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-84"*/@Test public void testCorruptedInput()throws Exception {InputStream in=null;OutputStream out=null;CompressorInputStream cin=null;try {in=new FileInputStream(getFile("bla.tgz"));out=new ByteArrayOutputStream();IOUtils.copy(in,out);in.close();out.close();final byte[]data=((ByteArrayOutputStream)out).toByteArray();in=new ByteArrayInputStream(data,0,data.length - 1);cin=new CompressorStreamFactory().createCompressorInputStream("gz",in);out=new ByteArrayOutputStream();try {IOUtils.copy(cin,out);fail("Expected an exception");}catch(final IOException ioex){}}finally {if (out != null){out.close();}if (cin != null){cin.close();}if (in != null){in.close();}}}
@Test public void testInteroperabilityWithGzipCompressorInputStream()throws Exception {final FileInputStream fis=new FileInputStream(getFile("test3.xml"));byte[]content;try {content=IOUtils.toByteArray(fis);}finally {fis.close();}final ByteArrayOutputStream bout=new ByteArrayOutputStream();final GzipParameters parameters=new GzipParameters();parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);parameters.setOperatingSystem(3);parameters.setFilename("test3.xml");parameters.setComment("Test file");parameters.setModificationTime(System.currentTimeMillis());final GzipCompressorOutputStream out=new GzipCompressorOutputStream(bout,parameters);out.write(content);out.flush();out.close();final GzipCompressorInputStream in=new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));final byte[]content2=IOUtils.toByteArray(in);Assert.assertArrayEquals("uncompressed content",content,content2);}
@Test public void testInteroperabilityWithGZIPInputStream()throws Exception {final FileInputStream fis=new FileInputStream(getFile("test3.xml"));byte[]content;try {content=IOUtils.toByteArray(fis);}finally {fis.close();}final ByteArrayOutputStream bout=new ByteArrayOutputStream();final GzipParameters parameters=new GzipParameters();parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);parameters.setOperatingSystem(3);parameters.setFilename("test3.xml");parameters.setComment("Test file");parameters.setModificationTime(System.currentTimeMillis());final GzipCompressorOutputStream out=new GzipCompressorOutputStream(bout,parameters);out.write(content);out.flush();out.close();final GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(bout.toByteArray()));final byte[]content2=IOUtils.toByteArray(in);Assert.assertArrayEquals("uncompressed content",content,content2);}
@Test public void testInvalidCompressionLevel(){final GzipParameters parameters=new GzipParameters();try {parameters.setCompressionLevel(10);fail("IllegalArgumentException not thrown");}catch(final IllegalArgumentException e){}try {parameters.setCompressionLevel(-5);fail("IllegalArgumentException not thrown");}catch(final IllegalArgumentException e){}}
@Test public void testExtraFlagsFastestCompression()throws Exception {testExtraFlags(Deflater.BEST_SPEED,4);}
@Test public void testExtraFlagsBestCompression()throws Exception {testExtraFlags(Deflater.BEST_COMPRESSION,2);}
@Test public void testExtraFlagsDefaultCompression()throws Exception {testExtraFlags(Deflater.DEFAULT_COMPRESSION,0);}
@Test public void testOverWrite()throws Exception {final GzipCompressorOutputStream out=new GzipCompressorOutputStream(new ByteArrayOutputStream());out.close();try {out.write(0);fail("IOException expected");}catch(final IOException e){}}
@Test public void testMetadataRoundTrip()throws Exception {final ByteArrayOutputStream bout=new ByteArrayOutputStream();final GzipParameters parameters=new GzipParameters();parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);parameters.setModificationTime(123456000);parameters.setOperatingSystem(13);parameters.setFilename("test3.xml");parameters.setComment("Umlaute möglich?");final GzipCompressorOutputStream out=new GzipCompressorOutputStream(bout,parameters);final FileInputStream fis=new FileInputStream(getFile("test3.xml"));try {IOUtils.copy(fis,out);}finally {fis.close();out.close();}final GzipCompressorInputStream input=new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));input.close();final GzipParameters readParams=input.getMetaData();assertEquals(Deflater.BEST_COMPRESSION,readParams.getCompressionLevel());assertEquals(123456000,readParams.getModificationTime());assertEquals(13,readParams.getOperatingSystem());assertEquals("test3.xml",readParams.getFilename());assertEquals("Umlaute möglich?",readParams.getComment());}
@Test public void testWriteAr()throws Exception {final ArchiveEntry entry=new ArArchiveEntry("dummy",bytesToTest);compareWrites("ar",entry);}
@Test public void testWriteCpio()throws Exception {final ArchiveEntry entry=new CpioArchiveEntry("dummy",bytesToTest);compareWrites("cpio",entry);}
@Test public void testWriteJar()throws Exception {final ArchiveEntry entry=new JarArchiveEntry("dummy");compareWrites("jar",entry);}
@Test public void testWriteTar()throws Exception {final TarArchiveEntry entry=new TarArchiveEntry("dummy");entry.setSize(bytesToTest);compareWrites("tar",entry);}
@Test public void testWriteZip()throws Exception {final ArchiveEntry entry=new ZipArchiveEntry("dummy");compareWrites("zip",entry);}
@Test public void testReadAr()throws Exception {compareReads("ar");}
@Test public void testReadCpio()throws Exception {compareReads("cpio");}
@Test public void testReadJar()throws Exception {compareReads("jar");}
@Test public void testReadTar()throws Exception {compareReads("tar");}
@Test public void testReadZip()throws Exception {compareReads("zip");}
@Test public void testFinish()throws Exception {final OutputStream out1=new ByteArrayOutputStream();ArchiveOutputStream aos1=factory.createArchiveOutputStream("zip",out1);aos1.putArchiveEntry(new ZipArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(final IOException io){}aos1=factory.createArchiveOutputStream("jar",out1);aos1.putArchiveEntry(new JarArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(final IOException io){}aos1=factory.createArchiveOutputStream("ar",out1);aos1.putArchiveEntry(new ArArchiveEntry("dummy",100));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(final IOException io){}aos1=factory.createArchiveOutputStream("cpio",out1);aos1.putArchiveEntry(new CpioArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(final IOException io){}aos1=factory.createArchiveOutputStream("tar",out1);aos1.putArchiveEntry(new TarArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(final IOException io){}}
@Test public void testOptionalFinish()throws Exception {final OutputStream out1=new ByteArrayOutputStream();ArchiveOutputStream aos1=factory.createArchiveOutputStream("zip",out1);aos1.putArchiveEntry(new ZipArchiveEntry("dummy"));aos1.closeArchiveEntry();aos1.close();aos1=factory.createArchiveOutputStream("jar",out1);aos1.putArchiveEntry(new JarArchiveEntry("dummy"));aos1.closeArchiveEntry();aos1.close();try {aos1.finish();fail("finish()cannot follow close()");}catch(final IOException io){}}
@Test public void testCallSequenceAr()throws Exception {doCallSequence("Ar");}
@Test public void testCallSequenceCpio()throws Exception {doCallSequence("Cpio");}
@Test public void testCallSequenceJar()throws Exception {doCallSequence("Jar");}
@Test public void testCallSequenceTar()throws Exception {doCallSequence("Tar");}
@Test public void testCallSequenceZip()throws Exception {doCallSequence("Zip");}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-176"*/@Test public void winzipBackSlashWorkaround()throws Exception {ZipArchiveInputStream in=null;try {in=new ZipArchiveInputStream(new FileInputStream(getFile("test-winzip.zip")));ZipArchiveEntry zae=in.getNextZipEntry();zae=in.getNextZipEntry();zae=in.getNextZipEntry();assertEquals("\u00e4/",zae.getName());}finally {if (in != null){in.close();}}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-189"*/@Test public void properUseOfInflater()throws Exception {ZipFile zf=null;ZipArchiveInputStream in=null;try {zf=new ZipFile(getFile("COMPRESS-189.zip"));final ZipArchiveEntry zae=zf.getEntry("USD0558682-20080101.ZIP");in=new ZipArchiveInputStream(new BufferedInputStream(zf.getInputStream(zae)));ZipArchiveEntry innerEntry;while ((innerEntry=in.getNextZipEntry())!= null){if (innerEntry.getName().endsWith("XML")){assertTrue(0 < in.read());}}}finally {if (zf != null){zf.close();}if (in != null){in.close();}}}
@Test public void shouldConsumeArchiveCompletely()throws Exception {final InputStream is=ZipArchiveInputStreamTest.class.getResourceAsStream("/archive_with_trailer.zip");final ZipArchiveInputStream zip=new ZipArchiveInputStream(is);while (zip.getNextZipEntry()!= null){}final byte[]expected=new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'};final byte[]actual=new byte[expected.length];is.read(actual);assertArrayEquals(expected,actual);zip.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-219"*/@Test public void shouldReadNestedZip()throws IOException {ZipArchiveInputStream in=null;try {in=new ZipArchiveInputStream(new FileInputStream(getFile("COMPRESS-219.zip")));extractZipInputStream(in);}finally {if (in != null){in.close();}}}
@Test public void testUnshrinkEntry()throws Exception {final ZipArchiveInputStream in=new ZipArchiveInputStream(new FileInputStream(getFile("SHRUNK.ZIP")));ZipArchiveEntry entry=in.getNextZipEntry();assertEquals("method",ZipMethod.UNSHRINKING.getCode(),entry.getMethod());assertTrue(in.canReadEntryData(entry));FileInputStream original=new FileInputStream(getFile("test1.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(in));}finally {original.close();}entry=in.getNextZipEntry();assertEquals("method",ZipMethod.UNSHRINKING.getCode(),entry.getMethod());assertTrue(in.canReadEntryData(entry));original=new FileInputStream(getFile("test2.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(in));}finally {original.close();}}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-264" >COMPRESS-264</a>.*/@Test public void testReadingOfFirstStoredEntry()throws Exception {final ZipArchiveInputStream in=new ZipArchiveInputStream(new FileInputStream(getFile("COMPRESS-264.zip")));try {final ZipArchiveEntry ze=in.getNextZipEntry();assertEquals(5,ze.getSize());assertArrayEquals(new byte[]{'d','a','t','a','\n'},IOUtils.toByteArray(in));}finally {in.close();}}
@Test public void testUnzipBZip2CompressedEntry()throws Exception {final ZipArchiveInputStream in=new ZipArchiveInputStream(new FileInputStream(getFile("bzip2-zip.zip")));try {final ZipArchiveEntry ze=in.getNextZipEntry();assertEquals(42,ze.getSize());final byte[]expected=new byte[42];Arrays.fill(expected,(byte)'a');assertArrayEquals(expected,IOUtils.toByteArray(in));}finally {in.close();}}
@Test public void testArjUnarchive()throws Exception {final StringBuilder expected=new StringBuilder();expected.append("test1.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>test2.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>\n");final ArjArchiveInputStream in=new ArjArchiveInputStream(new FileInputStream(getFile("bla.arj")));ArjArchiveEntry entry;final StringBuilder result=new StringBuilder();while ((entry=in.getNextEntry())!= null){result.append(entry.getName());int tmp;while ((tmp=in.read())!= -1){result.append((char)tmp);}assertFalse(entry.isDirectory());}in.close();assertEquals(result.toString(),expected.toString());}
@Test public void testReadingOfAttributesDosVersion()throws Exception {final ArjArchiveInputStream in=new ArjArchiveInputStream(new FileInputStream(getFile("bla.arj")));final ArjArchiveEntry entry=in.getNextEntry();assertEquals("test1.xml",entry.getName());assertEquals(30,entry.getSize());assertEquals(0,entry.getUnixMode());final Calendar cal=Calendar.getInstance();cal.set(2008,9,6,23,50,52);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),entry.getLastModifiedDate());in.close();}
@Test public void testReadingOfAttributesUnixVersion()throws Exception {final ArjArchiveInputStream in=new ArjArchiveInputStream(new FileInputStream(getFile("bla.unix.arj")));final ArjArchiveEntry entry=in.getNextEntry();assertEquals("test1.xml",entry.getName());assertEquals(30,entry.getSize());assertEquals(0664,entry.getUnixMode()& 07777);final Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT+0000"));cal.set(2008,9,6,21,50,52);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),entry.getLastModifiedDate());in.close();}
@Test public void testJarArchiveCreation()throws Exception {final File output=new File(dir,"bla.jar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("jar",out);os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}
@Test public void testJarUnarchive()throws Exception {final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();File o=new File(dir,entry.getName());o.getParentFile().mkdirs();OutputStream out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();in.close();is.close();}
@Test public void testJarUnarchiveAll()throws Exception {final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){final File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}final OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();is.close();}
@Test public void readSimplePaxHeader()throws Exception {final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);final Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream("30 atime=1321711775.972059463\n".getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals("1321711775.972059463",headers.get("atime"));tais.close();}
@Test public void secondEntryWinsWhenPaxHeaderContainsDuplicateKey()throws Exception {final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);final Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream("11 foo=bar\n11 foo=baz\n".getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals("baz",headers.get("foo"));tais.close();}
@Test public void paxHeaderEntryWithEmptyValueRemovesKey()throws Exception {final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);final Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream("11 foo=bar\n7 foo=\n".getBytes(CharsetNames.UTF_8)));assertEquals(0,headers.size());tais.close();}
@Test public void readPaxHeaderWithEmbeddedNewline()throws Exception {final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);final Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream("28 comment=line1\nline2\nand3\n".getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals("line1\nline2\nand3",headers.get("comment"));tais.close();}
@Test public void readNonAsciiPaxHeader()throws Exception {final String ae="\u00e4";final String line="11 path=" + ae + "\n";assertEquals(11,line.getBytes(CharsetNames.UTF_8).length);final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);final Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream(line.getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals(ae,headers.get("path"));tais.close();}
@Test public void workaroundForBrokenTimeHeader()throws Exception {TarArchiveInputStream in=null;try {in=new TarArchiveInputStream(new FileInputStream(getFile("simple-aix-native-tar.tar")));TarArchiveEntry tae=in.getNextTarEntry();tae=in.getNextTarEntry();assertEquals("sample/link-to-txt-file.lnk",tae.getName());assertEquals(new Date(0),tae.getLastModifiedDate());assertTrue(tae.isSymbolicLink());assertTrue(tae.isCheckSumOK());}finally {if (in != null){in.close();}}}
@Test public void datePriorToEpochInGNUFormat()throws Exception {datePriorToEpoch("preepoch-star.tar");}
@Test public void datePriorToEpochInPAXFormat()throws Exception {datePriorToEpoch("preepoch-posix.tar");}
@Test public void testCompress197()throws Exception {final TarArchiveInputStream tar=getTestStream("/COMPRESS-197.tar");try {TarArchiveEntry entry=tar.getNextTarEntry();while (entry != null){entry=tar.getNextTarEntry();}}catch(final IOException e){fail("COMPRESS-197: " + e.getMessage());}finally {tar.close();}}
@Test public void shouldUseSpecifiedEncodingWhenReadingGNULongNames()throws Exception {final ByteArrayOutputStream bos=new ByteArrayOutputStream();final String encoding=CharsetNames.UTF_16;final String name="1234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890\u00e4";final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,encoding);tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);TarArchiveEntry t=new TarArchiveEntry(name);t.setSize(1);tos.putArchiveEntry(t);tos.write(30);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();final ByteArrayInputStream bis=new ByteArrayInputStream(data);final TarArchiveInputStream tis=new TarArchiveInputStream(bis,encoding);t=tis.getNextTarEntry();assertEquals(name,t.getName());tis.close();}
@Test public void shouldConsumeArchiveCompletely()throws Exception {final InputStream is=TarArchiveInputStreamTest.class.getResourceAsStream("/archive_with_trailer.tar");final TarArchiveInputStream tar=new TarArchiveInputStream(is);while (tar.getNextTarEntry()!= null){}final byte[]expected=new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'};final byte[]actual=new byte[expected.length];is.read(actual);assertArrayEquals(expected,actual);tar.close();}
@Test public void readsArchiveCompletely_COMPRESS245()throws Exception {final InputStream is=TarArchiveInputStreamTest.class.getResourceAsStream("/COMPRESS-245.tar.gz");try {final InputStream gin=new GZIPInputStream(is);final TarArchiveInputStream tar=new TarArchiveInputStream(gin);int count=0;TarArchiveEntry entry=tar.getNextTarEntry();while (entry != null){count++;entry=tar.getNextTarEntry();}assertEquals(31,count);tar.close();}catch(final IOException e){fail("COMPRESS-245: " + e.getMessage());}finally {is.close();}}
@Test(expected=IOException.class)public void shouldThrowAnExceptionOnTruncatedEntries()throws Exception {final File dir=mkdir("COMPRESS-279");final TarArchiveInputStream is=getTestStream("/COMPRESS-279.tar");FileOutputStream out=null;try {TarArchiveEntry entry=is.getNextTarEntry();int count=0;while (entry != null){out=new FileOutputStream(new File(dir,String.valueOf(count)));IOUtils.copy(is,out);out.close();out=null;count++;entry=is.getNextTarEntry();}}finally {is.close();if (out != null){out.close();}rmdir(dir);}}
@Test public void shouldReadBigGid()throws Exception {final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);TarArchiveEntry t=new TarArchiveEntry("name");t.setGroupId(4294967294l);t.setSize(1);tos.putArchiveEntry(t);tos.write(30);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();final ByteArrayInputStream bis=new ByteArrayInputStream(data);final TarArchiveInputStream tis=new TarArchiveInputStream(bis);t=tis.getNextTarEntry();assertEquals(4294967294l,t.getLongGroupId());tis.close();}
/** * @link "https://issues.apache.org/jira/browse/COMPRESS-324"*/@Test public void shouldReadGNULongNameEntryWithWrongName()throws Exception {final TarArchiveInputStream is=getTestStream("/COMPRESS-324.tar");try {final TarArchiveEntry entry=is.getNextTarEntry();assertEquals("1234567890123456789012345678901234567890123456789012345678901234567890" + "1234567890123456789012345678901234567890123456789012345678901234567890" + "1234567890123456789012345678901234567890123456789012345678901234567890"+ "1234567890123456789012345678901234567890.txt",entry.getName());}finally {is.close();}}
@Test public void testJarMarker()throws IOException {final File testArchive=File.createTempFile("jar-aostest",".jar");testArchive.deleteOnExit();JarArchiveOutputStream out=null;ZipFile zf=null;try {out=new JarArchiveOutputStream(new FileOutputStream(testArchive));out.putArchiveEntry(new ZipArchiveEntry("foo/"));out.closeArchiveEntry();out.putArchiveEntry(new ZipArchiveEntry("bar/"));out.closeArchiveEntry();out.finish();out.close();out=null;zf=new ZipFile(testArchive);ZipArchiveEntry ze=zf.getEntry("foo/");assertNotNull(ze);ZipExtraField[]fes=ze.getExtraFields();assertEquals(1,fes.length);assertTrue(fes[0]instanceof JarMarker);ze=zf.getEntry("bar/");assertNotNull(ze);fes=ze.getExtraFields();assertEquals(0,fes.length);}finally {if (out != null){try {out.close();}catch(final IOException e){}}ZipFile.closeQuietly(zf);AbstractTestCase.tryHardToDelete(testArchive);}}
@Test public void simpleRountrip()throws Exception {final X000A_NTFS xf=new X000A_NTFS();xf.setModifyJavaTime(new Date(0));xf.setAccessJavaTime(new Date(-11644473601000l));xf.setCreateJavaTime(null);final byte[]b=xf.getLocalFileDataData();final X000A_NTFS xf2=new X000A_NTFS();xf2.parseFromLocalFileData(b,0,b.length);assertEquals(new Date(0),xf2.getModifyJavaTime());assertEquals(new Date(-11644473601000l),xf2.getAccessJavaTime());assertEquals(null,xf2.getCreateJavaTime());}
@Test public void testSample()throws Exception {final File result=File.createTempFile("testSample","fe");createFile(result);checkFile(result);}
@Test public void testSevenZArchiveCreationUsingCopy()throws Exception {testSevenZArchiveCreation(SevenZMethod.COPY);}
@Test public void testSevenZArchiveCreationUsingLZMA2()throws Exception {testSevenZArchiveCreation(SevenZMethod.LZMA2);}
@Test public void testSevenZArchiveCreationUsingBZIP2()throws Exception {testSevenZArchiveCreation(SevenZMethod.BZIP2);}
@Test public void testSevenZArchiveCreationUsingDeflate()throws Exception {testSevenZArchiveCreation(SevenZMethod.DEFLATE);}
@Test public void testCpioUnarchive()throws Exception {final StringBuilder expected=new StringBuilder();expected.append("./test1.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>./test2.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>\n");final CpioArchiveInputStream in=new CpioArchiveInputStream(new FileInputStream(getFile("bla.cpio")));CpioArchiveEntry entry;final StringBuilder result=new StringBuilder();while ((entry=(CpioArchiveEntry)in.getNextEntry())!= null){result.append(entry.getName());int tmp;while ((tmp=in.read())!= -1){result.append((char)tmp);}}in.close();assertEquals(result.toString(),expected.toString());}
@Test public void testCpioUnarchiveCreatedByRedlineRpm()throws Exception {final CpioArchiveInputStream in=new CpioArchiveInputStream(new FileInputStream(getFile("redline.cpio")));CpioArchiveEntry entry=null;int count=0;while ((entry=(CpioArchiveEntry)in.getNextEntry())!= null){count++;assertNotNull(entry);}in.close();assertEquals(count,1);}
@Test public void testDefaultExtraction()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){@Override public CompressorInputStream wrap(final InputStream is)throws IOException {return new FramedSnappyCompressorInputStream(is);}});}
@Test public void testDefaultExtractionViaFactory()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){@Override public CompressorInputStream wrap(final InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(CompressorStreamFactory.SNAPPY_FRAMED,is);}});}
@Test public void testDefaultExtractionViaFactoryAutodetection()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){@Override public CompressorInputStream wrap(final InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(is);}});}
@Test public void testReadLongNamesGNU()throws Exception {checkLongNameEntry("longfile_gnu.ar");}
@Test public void testReadLongNamesBSD()throws Exception {checkLongNameEntry("longfile_bsd.ar");}
@Test public void testDetection()throws Exception {final CompressorInputStream bzip2=getStreamFor("bla.txt.bz2");assertNotNull(bzip2);assertTrue(bzip2 instanceof BZip2CompressorInputStream);final CompressorInputStream gzip=getStreamFor("bla.tgz");assertNotNull(gzip);assertTrue(gzip instanceof GzipCompressorInputStream);final CompressorInputStream pack200=getStreamFor("bla.pack");assertNotNull(pack200);assertTrue(pack200 instanceof Pack200CompressorInputStream);final CompressorInputStream xz=getStreamFor("bla.tar.xz");assertNotNull(xz);assertTrue(xz instanceof XZCompressorInputStream);final CompressorInputStream zlib=getStreamFor("bla.tar.deflatez");assertNotNull(zlib);assertTrue(zlib instanceof DeflateCompressorInputStream);try {factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));fail("No exception thrown for an empty input stream");}catch(final CompressorException e){}}
@Test public void testOverride(){CompressorStreamFactory fac=new CompressorStreamFactory();assertFalse(fac.getDecompressConcatenated());fac.setDecompressConcatenated(true);assertTrue(fac.getDecompressConcatenated());fac=new CompressorStreamFactory(false);assertFalse(fac.getDecompressConcatenated());try {fac.setDecompressConcatenated(true);fail("Expected IllegalStateException");}catch(final IllegalStateException ise){}fac=new CompressorStreamFactory(true);assertTrue(fac.getDecompressConcatenated());try {fac.setDecompressConcatenated(true);fail("Expected IllegalStateException");}catch(final IllegalStateException ise){}}
@Test public void testMutiples()throws Exception {for (int i=0;i < tests.length;i++){final TestData test=tests[i];final CompressorStreamFactory fac=test.factory;assertNotNull("Test entry " + i,fac);assertEquals("Test entry " + i,test.concat,fac.getDecompressConcatenated());final CompressorInputStream in=getStreamFor(test.fileName,fac);assertNotNull("Test entry " + i,in);for(final char entry : test.entryNames){assertEquals("Test entry" + i,entry,in.read());}assertEquals(0,in.available());assertEquals(-1,in.read());}}
@Test public void shouldBeAbleToSetCompressionLevel(){final DeflateParameters p=new DeflateParameters();p.setCompressionLevel(5);Assert.assertEquals(5,p.getCompressionLevel());}
@Test(expected=IllegalArgumentException.class)public void shouldNotBeAbleToSetCompressionLevelToANegativeValue(){final DeflateParameters p=new DeflateParameters();p.setCompressionLevel(-2);}
@Test(expected=IllegalArgumentException.class)public void shouldNotBeAbleToSetCompressionLevelToADoubleDigitValue(){final DeflateParameters p=new DeflateParameters();p.setCompressionLevel(12);}
/** * Test file mode magic.*/@Test public void testModes(){final AsiExtraField a=new AsiExtraField();a.setMode(0123);assertEquals("plain file",0100123,a.getMode());a.setDirectory(true);assertEquals("directory",040123,a.getMode());a.setLinkedFile("test");assertEquals("symbolic link",0120123,a.getMode());}
/** * Test content.*/@Test public void testContent(){final AsiExtraField a=new AsiExtraField();a.setMode(0123);a.setUserId(5);a.setGroupId(6);byte[]b=a.getLocalFileDataData();byte[]expect={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};assertEquals("no link",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals("no link,byte " + i,expect[i],b[i]);}a.setLinkedFile("test");expect=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};b=a.getLocalFileDataData();assertEquals("no link",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals("no link,byte " + i,expect[i],b[i]);}}
/** * Test reparse*/@Test public void testReparse()throws Exception {byte[]data={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};AsiExtraField a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length plain file",data.length,a.getLocalFileDataLength().getValue());assertTrue("plain file,no link",!a.isLink());assertTrue("plain file,no dir",!a.isDirectory());assertEquals("mode plain file",FILE_FLAG | 0123,a.getMode());assertEquals("uid plain file",5,a.getUserId());assertEquals("gid plain file",6,a.getGroupId());data=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length link",data.length,a.getLocalFileDataLength().getValue());assertTrue("link,is link",a.isLink());assertTrue("link,no dir",!a.isDirectory());assertEquals("mode link",LINK_FLAG | 0123,a.getMode());assertEquals("uid link",5,a.getUserId());assertEquals("gid link",6,a.getGroupId());assertEquals("test",a.getLinkedFile());data=new byte[]{(byte)0x8E,0x01,(byte)0xBF,(byte)0x0E,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length dir",data.length,a.getLocalFileDataLength().getValue());assertTrue("dir,no link",!a.isLink());assertTrue("dir,is dir",a.isDirectory());assertEquals("mode dir",DIR_FLAG | 0123,a.getMode());assertEquals("uid dir",5,a.getUserId());assertEquals("gid dir",6,a.getGroupId());data=new byte[]{0,0,0,0,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();try {a.parseFromLocalFileData(data,0,data.length);fail("should raise bad CRC exception");}catch(final Exception e){assertEquals("bad CRC checksum 0 instead of ebf018e",e.getMessage());}}
@Test public void testClone(){final AsiExtraField s1=new AsiExtraField();s1.setUserId(42);s1.setGroupId(12);s1.setLinkedFile("foo");s1.setMode(0644);s1.setDirectory(true);final AsiExtraField s2=(AsiExtraField)s1.clone();assertNotSame(s1,s2);assertEquals(s1.getUserId(),s2.getUserId());assertEquals(s1.getGroupId(),s2.getGroupId());assertEquals(s1.getLinkedFile(),s2.getLinkedFile());assertEquals(s1.getMode(),s2.getMode());assertEquals(s1.isDirectory(),s2.isDirectory());}
/** * test handling of extra fields*/@Test public void testExtraFields(){final AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);final UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);final ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});final byte[]data1=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals("first pass",2,result.length);assertSame(a,result[0]);assertSame(u,result[1]);final UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u2.setLocalFileDataData(new byte[]{1});ze.addExtraField(u2);final byte[]data2=ze.getExtra();result=ze.getExtraFields();assertEquals("second pass",2,result.length);assertSame(a,result[0]);assertSame(u2,result[1]);assertEquals("length second pass",data1.length + 1,data2.length);final UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addExtraField(u3);result=ze.getExtraFields();assertEquals("third pass",3,result.length);ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);final byte[]data3=ze.getExtra();result=ze.getExtraFields();assertEquals("fourth pass",2,result.length);assertSame(a,result[0]);assertSame(u3,result[1]);assertEquals("length fourth pass",data2.length,data3.length);try {ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);fail("should be no such element");}catch(final java.util.NoSuchElementException nse){}}
/** * test handling of extra fields via central directory*/@Test public void testExtraFieldMerging(){final AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);final UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);final ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});final byte[]b=ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes();ze.setCentralDirectoryExtra(new byte[]{b[0],b[1],1,0,127});ZipExtraField[]result=ze.getExtraFields();assertEquals("first pass",2,result.length);assertSame(a,result[0]);assertEquals(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER,result[1].getHeaderId());assertEquals(new ZipShort(0),result[1].getLocalFileDataLength());assertEquals(new ZipShort(1),result[1].getCentralDirectoryLength());ze.setCentralDirectoryExtra(new byte[]{2,0,0,0});result=ze.getExtraFields();assertEquals("second pass",3,result.length);ze.setExtra(new byte[]{2,0,1,0,127});result=ze.getExtraFields();assertEquals("third pass",3,result.length);assertSame(a,result[0]);assertEquals(new ZipShort(2),result[2].getHeaderId());assertEquals(new ZipShort(1),result[2].getLocalFileDataLength());assertEquals(new ZipShort(0),result[2].getCentralDirectoryLength());}
/** * test handling of extra fields*/@Test public void testAddAsFirstExtraField(){final AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);final UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);final ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});final byte[]data1=ze.getExtra();final UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u2.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u2);final byte[]data2=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals("second pass",2,result.length);assertSame(u2,result[0]);assertSame(a,result[1]);assertEquals("length second pass",data1.length + 1,data2.length);final UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u3);result=ze.getExtraFields();assertEquals("third pass",3,result.length);assertSame(u3,result[0]);assertSame(u2,result[1]);assertSame(a,result[2]);}
@Test public void testUnixMode(){ZipArchiveEntry ze=new ZipArchiveEntry("foo");assertEquals(0,ze.getPlatform());ze.setUnixMode(0755);assertEquals(3,ze.getPlatform());assertEquals(0755,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0444);assertEquals(3,ze.getPlatform());assertEquals(0444,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(1,ze.getExternalAttributes()& 0xFFFF);ze=new ZipArchiveEntry("foo/");assertEquals(0,ze.getPlatform());ze.setUnixMode(0777);assertEquals(3,ze.getPlatform());assertEquals(0777,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x10,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0577);assertEquals(3,ze.getPlatform());assertEquals(0577,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x11,ze.getExternalAttributes()& 0xFFFF);}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-93" >COMPRESS-93</a>.*/@Test public void testCompressionMethod()throws Exception {final ZipArchiveOutputStream zos=new ZipArchiveOutputStream(new ByteArrayOutputStream());final ZipArchiveEntry entry=new ZipArchiveEntry("foo");assertEquals(-1,entry.getMethod());assertFalse(zos.canWriteEntryData(entry));entry.setMethod(ZipEntry.STORED);assertEquals(ZipEntry.STORED,entry.getMethod());assertTrue(zos.canWriteEntryData(entry));entry.setMethod(ZipEntry.DEFLATED);assertEquals(ZipEntry.DEFLATED,entry.getMethod());assertTrue(zos.canWriteEntryData(entry));entry.setMethod(6);assertEquals(6,entry.getMethod());assertFalse(zos.canWriteEntryData(entry));zos.close();}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-94" >COMPRESS-94</a>.*/@Test public void testNotEquals(){final ZipArchiveEntry entry1=new ZipArchiveEntry("foo");final ZipArchiveEntry entry2=new ZipArchiveEntry("bar");assertFalse(entry1.equals(entry2));}
/** * Tests comment's influence on equals comparisons.* @see "https://issues.apache.org/jira/browse/COMPRESS-187"*/@Test public void testNullCommentEqualsEmptyComment(){final ZipArchiveEntry entry1=new ZipArchiveEntry("foo");final ZipArchiveEntry entry2=new ZipArchiveEntry("foo");final ZipArchiveEntry entry3=new ZipArchiveEntry("foo");entry1.setComment(null);entry2.setComment("");entry3.setComment("bar");assertEquals(entry1,entry2);assertFalse(entry1.equals(entry3));assertFalse(entry2.equals(entry3));}
@Test public void testCopyConstructor()throws Exception {final ZipArchiveEntry archiveEntry=new ZipArchiveEntry("fred");archiveEntry.setUnixMode(0664);archiveEntry.setMethod(ZipEntry.DEFLATED);archiveEntry.getGeneralPurposeBit().useStrongEncryption(true);final ZipArchiveEntry copy=new ZipArchiveEntry(archiveEntry);assertEquals(archiveEntry,copy);}
@Test public void testName(){byte[]buff=new byte[20];final String sb1="abcdefghijklmnopqrstuvwxyz";int off=TarUtils.formatNameBytes(sb1,buff,1,buff.length - 1);assertEquals(off,20);String sb2=TarUtils.parseName(buff,1,10);assertEquals(sb2,sb1.substring(0,10));sb2=TarUtils.parseName(buff,1,19);assertEquals(sb2,sb1.substring(0,19));buff=new byte[30];off=TarUtils.formatNameBytes(sb1,buff,1,buff.length - 1);assertEquals(off,30);sb2=TarUtils.parseName(buff,1,buff.length - 1);assertEquals(sb1,sb2);}
@Test public void testParseOctal()throws Exception {long value;byte[]buffer;final long MAX_OCTAL=077777777777L;final long MAX_OCTAL_OVERFLOW=0777777777777L;final String maxOctal="777777777777";buffer=maxOctal.getBytes(CharsetNames.UTF_8);value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL_OVERFLOW,value);buffer[buffer.length - 1]=' ';value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL,value);buffer[buffer.length - 1]=0;value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL,value);buffer=new byte[]{0,0};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);buffer=new byte[]{0,' '};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);buffer=new byte[]{' ',0};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);}
@Test public void testParseOctalInvalid()throws Exception {byte[]buffer;buffer=new byte[0];try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - should be at least 2 bytes long");}catch(final IllegalArgumentException expected){}buffer=new byte[]{0};try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - should be at least 2 bytes long");}catch(final IllegalArgumentException expected){}buffer="abcdef ".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException");}catch(final IllegalArgumentException expected){}buffer=" 0 07 ".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - embedded space");}catch(final IllegalArgumentException expected){}buffer=" 0\00007 ".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - embedded NUL");}catch(final IllegalArgumentException expected){}}
@Test public void testRoundTripOctal(){checkRoundTripOctal(0);checkRoundTripOctal(1);checkRoundTripOctal(TarConstants.MAXSIZE);checkRoundTripOctal(0,TarConstants.UIDLEN);checkRoundTripOctal(1,TarConstants.UIDLEN);checkRoundTripOctal(TarConstants.MAXID,8);}
@Test public void testRoundTripOctalOrBinary8(){testRoundTripOctalOrBinary(8);}
@Test public void testRoundTripOctalOrBinary12(){testRoundTripOctalOrBinary(12);checkRoundTripOctalOrBinary(Long.MAX_VALUE,12);checkRoundTripOctalOrBinary(Long.MIN_VALUE + 1,12);}
@Test public void testTrailers(){final byte[]buffer=new byte[12];TarUtils.formatLongOctalBytes(123,buffer,0,buffer.length);assertEquals(' ',buffer[buffer.length - 1]);assertEquals('3',buffer[buffer.length - 2]);TarUtils.formatOctalBytes(123,buffer,0,buffer.length);assertEquals(0,buffer[buffer.length - 1]);assertEquals(' ',buffer[buffer.length - 2]);assertEquals('3',buffer[buffer.length - 3]);TarUtils.formatCheckSumOctalBytes(123,buffer,0,buffer.length);assertEquals(' ',buffer[buffer.length - 1]);assertEquals(0,buffer[buffer.length - 2]);assertEquals('3',buffer[buffer.length - 3]);}
@Test public void testNegative()throws Exception {final byte[]buffer=new byte[22];TarUtils.formatUnsignedOctalString(-1,buffer,0,buffer.length);assertEquals("1777777777777777777777",new String(buffer,CharsetNames.UTF_8));}
@Test public void testOverflow()throws Exception {final byte[]buffer=new byte[8 - 1];TarUtils.formatUnsignedOctalString(07777777L,buffer,0,buffer.length);assertEquals("7777777",new String(buffer,CharsetNames.UTF_8));try {TarUtils.formatUnsignedOctalString(017777777L,buffer,0,buffer.length);fail("Should have cause IllegalArgumentException");}catch(final IllegalArgumentException expected){}}
@Test public void testRoundTripNames(){checkName("");checkName("The quick brown fox\n");checkName("\177");}
@Test public void testRoundEncoding()throws Exception {final ZipEncoding enc=ZipEncodingHelper.getZipEncoding(CharsetNames.ISO_8859_1);final String s="0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1MOE.model";final byte buff[]=new byte[100];final int len=TarUtils.formatNameBytes(s,buff,0,buff.length,enc);assertEquals(s,TarUtils.parseName(buff,0,len,enc));}
@Test public void testReadNegativeBinary8Byte(){final byte[]b=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xf1,(byte)0xef};assertEquals(-3601l,TarUtils.parseOctalOrBinary(b,0,8));}
@Test public void testReadNegativeBinary12Byte(){final byte[]b=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xf1,(byte)0xef};assertEquals(-3601l,TarUtils.parseOctalOrBinary(b,0,12));}
@Test public void testWriteNegativeBinary8Byte(){final byte[]b=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xf1,(byte)0xef};assertEquals(-3601l,TarUtils.parseOctalOrBinary(b,0,8));}
@Test public void testVerifyHeaderCheckSum(){final byte[]valid={116,101,115,116,49,46,120,109,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,48,48,54,52,52,0,48,48,48,48,55,54,53,0,48,48,48,48,55,54,53,0,48,48,48,48,48,48,48,49,49,52,50,0,49,48,55,49,54,53,52,53,54,50,54,0,48,49,50,50,54,48,0,32,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,115,116,97,114,32,32,0,116,99,117,114,100,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,99,117,114,100,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};assertTrue(TarUtils.verifyCheckSum(valid));final byte[]compress117={(byte)0x37,(byte)0x7a,(byte)0x43,(byte)0x2e,(byte)0x74,(byte)0x78,(byte)0x74,(byte)0x00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,(byte)0x31,(byte)0x30,(byte)0x30,(byte)0x37,(byte)0x37,(byte)0x37,(byte)0x20,(byte)0x00,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x30,(byte)0x20,(byte)0x00,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x30,(byte)0x20,(byte)0x00,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x31,(byte)0x33,(byte)0x30,(byte)0x33,(byte)0x33,(byte)0x20,(byte)0x31,(byte)0x31,(byte)0x31,(byte)0x31,(byte)0x35,(byte)0x31,(byte)0x36,(byte)0x36,(byte)0x30,(byte)0x31,(byte)0x36,(byte)0x20,(byte)0x20,(byte)0x20,(byte)0x35,(byte)0x34,(byte)0x31,(byte)0x37,(byte)0x20,(byte)0x00,(byte)0x30,(byte)0x00,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};assertTrue(TarUtils.verifyCheckSum(compress117));final byte[]invalid={70,79,82,77,0,0,15,46,65,73,70,70,67,79,77,77,0,0,0,18,0,2,0,0,3,-64,0,16,64,14,-84,68,0,0,0,0,0,0,83,83,78,68,0,0,15,8,0,0,0,0,0,0,0,0,0,1,-1,-1,0,1,-1,-1,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,0,0,-1,-1,0,2,-1,-2,0,2,-1,-1,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,-1,-1,0,1,0,0,0,0,0,0,0,1,-1,-1,0,1,-1,-2,0,1,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,2,-1,-2,0,2,-1,-1,0,0,0,1,-1,-1,0,1,-1,-1,0,0,0,0,0,0,0,0,0,1,-1,-2,0,2,-1,-2,0,1,0,0,0,1,-1,-1,0,0,0,1,-1,-1,0,0,0,1,-1,-2,0,2,-1,-1,0,0,0,0,0,0,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,1,-1,-1,0,2,-1,-2,0,2,-1,-2,0,2,-1,-2,0,1,0,0,0,0,0,0,0,1,-1,-2,0,2,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,1,0,0,-1,-1,0,2,-1,-2,0,2,-1,-1,0,0,0,0,0,0,-1,-1,0,1,-1,-1,0,1,-1,-1,0,2,-1,-2,0,1,0,0,-1,-1,0,2,-1,-2,0,2,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,-1,-1,0,1,0,0,0,0,0,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-2,0,2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,-1,-1,0,2,-1,-2,0,2,-1,-2,0,2,-1,-1,0,0,0,0,-1,-1,0,1,-1,-1,0,1,-1,-1,0,1,-1,-1,0,1,-1,-1,0,1,0,0,0,0,-1,-1,0,2,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1};assertFalse(TarUtils.verifyCheckSum(invalid));}
@Test public void testParseOctalCompress330()throws Exception {final long expected=0100000;final byte[]buffer=new byte[]{32,32,32,32,32,49,48,48,48,48,48,32};assertEquals(expected,TarUtils.parseOctalOrBinary(buffer,0,buffer.length));}
@Test public void testCpioArchiveCreation()throws Exception {final File output=new File(dir,"bla.cpio");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("cpio",out);os.putArchiveEntry(new CpioArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new CpioArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}
@Test public void testCpioUnarchive()throws Exception {final File output=new File(dir,"bla.cpio");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final long file1Length=file1.length();final long file2Length=file2.length();{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("cpio",out);CpioArchiveEntry entry=new CpioArchiveEntry("test1.xml",file1Length);entry.setMode(CpioConstants.C_ISREG);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();entry=new CpioArchiveEntry("test2.xml",file2Length);entry.setMode(CpioConstants.C_ISREG);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.finish();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("cpio",is);final Map<String,File> result=new HashMap<String,File>();ArchiveEntry entry=null;while ((entry=in.getNextEntry())!= null){final File cpioget=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(cpioget);IOUtils.copy(in,out);out.close();result.put(entry.getName(),cpioget);}in.close();is.close();File t=result.get("test1.xml");assertTrue("Expected " + t.getAbsolutePath()+ " to exist",t.exists());assertEquals("length of " + t.getAbsolutePath(),file1Length,t.length());t=result.get("test2.xml");assertTrue("Expected " + t.getAbsolutePath()+ " to exist",t.exists());assertEquals("length of " + t.getAbsolutePath(),file2Length,t.length());}
@Test public void testDirectoryEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));final long beforeArchiveWrite=tmp[0].lastModified();final CpioArchiveEntry in=new CpioArchiveEntry(tmp[0],"foo");tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));final CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitDirectoryEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));final long beforeArchiveWrite=tmp[0].lastModified();final CpioArchiveEntry in=new CpioArchiveEntry("foo/");in.setTime(beforeArchiveWrite / 1000);in.setMode(CpioConstants.C_ISDIR);tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));final CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testFileEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));final CpioArchiveEntry in=new CpioArchiveEntry(tmp[1],"foo");tos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));final CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitFileEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));final CpioArchiveEntry in=new CpioArchiveEntry("foo");in.setTime(tmp[1].lastModified()/ 1000);in.setSize(tmp[1].length());in.setMode(CpioConstants.C_ISREG);tos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));final CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testXZCreation()throws Exception {final long max=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();System.out.println("XZTestCase: HeapMax=" + max + " bytes "+ (double)max / (1024 * 1024)+ " MB");final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.xz");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("xz",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
@Test public void testXZUnarchive()throws Exception {final File input=getFile("bla.tar.xz");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("xz",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
@Test public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.xz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("xz",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
@Test public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.xz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new XZCompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
@Test public void testMessageWhenArchiverNameIsNull_1(){try {new ArchiveStreamFactory().createArchiveInputStream(null,System.in);fail("Should raise an IllegalArgumentException.");}catch(final IllegalArgumentException e){assertEquals(ARCHIVER_NULL_MESSAGE,e.getMessage());}catch(final ArchiveException e){fail("ArchiveException not expected");}}
@Test public void testMessageWhenInputStreamIsNull(){try {new ArchiveStreamFactory().createArchiveInputStream("zip",null);fail("Should raise an IllegalArgumentException.");}catch(final IllegalArgumentException e){assertEquals(INPUTSTREAM_NULL_MESSAGE,e.getMessage());}catch(final ArchiveException e){fail("ArchiveException not expected");}}
@Test public void testMessageWhenArchiverNameIsNull_2(){try {new ArchiveStreamFactory().createArchiveOutputStream(null,System.out);fail("Should raise an IllegalArgumentException.");}catch(final IllegalArgumentException e){assertEquals(ARCHIVER_NULL_MESSAGE,e.getMessage());}catch(final ArchiveException e){fail("ArchiveException not expected");}}
@Test public void testMessageWhenOutputStreamIsNull(){try {new ArchiveStreamFactory().createArchiveOutputStream("zip",null);fail("Should raise an IllegalArgumentException.");}catch(final IllegalArgumentException e){assertEquals(OUTPUTSTREAM_NULL_MESSAGE,e.getMessage());}catch(final ArchiveException e){fail("ArchiveException not expected");}}
/** * Test conversion to bytes.*/@Test public void testToBytes(){final ZipShort zs=new ZipShort(0x1234);final byte[]result=zs.getBytes();assertEquals("length getBytes",2,result.length);assertEquals("first byte getBytes",0x34,result[0]);assertEquals("second byte getBytes",0x12,result[1]);}
/** * Test conversion to bytes.*/@Test public void testPut(){final byte[]arr=new byte[3];ZipShort.putShort(0x1234,arr,1);assertEquals("first byte getBytes",0x34,arr[1]);assertEquals("second byte getBytes",0x12,arr[2]);}
/** * Test conversion from bytes.*/@Test public void testFromBytes(){final byte[]val=new byte[]{0x34,0x12};final ZipShort zs=new ZipShort(val);assertEquals("value from bytes",0x1234,zs.getValue());}
/** * Test the contract of the equals method.*/@Test public void testEquals(){final ZipShort zs=new ZipShort(0x1234);final ZipShort zs2=new ZipShort(0x1234);final ZipShort zs3=new ZipShort(0x5678);assertTrue("reflexive",zs.equals(zs));assertTrue("works",zs.equals(zs2));assertTrue("works,part two",!zs.equals(zs3));assertTrue("symmetric",zs2.equals(zs));assertTrue("null handling",!zs.equals(null));assertTrue("non ZipShort handling",!zs.equals(new Integer(0x1234)));}
/** * Test sign handling.*/@Test public void testSign(){final ZipShort zs=new ZipShort(new byte[]{(byte)0xFF,(byte)0xFF});assertEquals(0x0000FFFF,zs.getValue());}
@Test public void testClone(){final ZipShort s1=new ZipShort(42);final ZipShort s2=(ZipShort)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}
@Test(expected=UnsupportedOperationException.class)public void shouldThrowIfNoLastModifiedDateIsSet(){new SevenZArchiveEntry().getLastModifiedDate();}
@Test(expected=UnsupportedOperationException.class)public void shouldThrowIfNoCreationDateIsSet(){new SevenZArchiveEntry().getCreationDate();}
@Test(expected=UnsupportedOperationException.class)public void shouldThrowIfNoAccessDateIsSet(){new SevenZArchiveEntry().getAccessDate();}
/** * see https://issues.apache.org/jira/browse/COMPRESS-171*/@Test public void shortTextFilesAreNoTARs()throws Exception {try {new ArchiveStreamFactory().createArchiveInputStream(new ByteArrayInputStream("This certainly is not a tar archive,really,no kidding".getBytes()));fail("created an input stream for a non-archive");}catch(final ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}}
/** * see https://issues.apache.org/jira/browse/COMPRESS-191*/@Test public void aiffFilesAreNoTARs()throws Exception {final FileInputStream fis=new FileInputStream("src/test/resources/testAIFF.aif");try {final InputStream is=new BufferedInputStream(fis);try {new ArchiveStreamFactory().createArchiveInputStream(is);fail("created an input stream for a non-archive");}catch(final ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}finally {is.close();}}finally {fis.close();}}
@Test public void testCOMPRESS209()throws Exception {final FileInputStream fis=new FileInputStream("src/test/resources/testCompress209.doc");try {final InputStream bis=new BufferedInputStream(fis);try {new ArchiveStreamFactory().createArchiveInputStream(bis);fail("created an input stream for a non-archive");}catch(final ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}finally {bis.close();}}finally {fis.close();}}
@Test(expected=StreamingNotSupportedException.class)public void cantRead7zFromStream()throws Exception {new ArchiveStreamFactory().createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(new byte[0]));}
@Test(expected=StreamingNotSupportedException.class)public void cantWrite7zToStream()throws Exception {new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream());}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-267" >COMPRESS-267</a>.*/@Test public void detectsAndThrowsFor7z()throws Exception {final FileInputStream fis=new FileInputStream("src/test/resources/bla.7z");try {final InputStream bis=new BufferedInputStream(fis);try {new ArchiveStreamFactory().createArchiveInputStream(bis);fail("Expected a StreamingNotSupportedException");}catch(final StreamingNotSupportedException ex){assertEquals(ArchiveStreamFactory.SEVEN_Z,ex.getFormat());}finally {bis.close();}}finally {fis.close();}}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-208" >COMPRESS-208</a>.*/@Test public void skipsPK00Prefix()throws Exception {final FileInputStream fis=new FileInputStream("src/test/resources/COMPRESS-208.zip");try {final InputStream bis=new BufferedInputStream(fis);try {final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(bis);try {assertTrue(ais instanceof ZipArchiveInputStream);}finally {ais.close();}}finally {bis.close();}}finally {fis.close();}}
@Test public void testEncodingCtor(){ArchiveStreamFactory fac=new ArchiveStreamFactory();assertNull(fac.getEntryEncoding());fac=new ArchiveStreamFactory(null);assertNull(fac.getEntryEncoding());fac=new ArchiveStreamFactory("UTF-8");assertEquals("UTF-8",fac.getEntryEncoding());}
@Test @SuppressWarnings("deprecation")public void testEncodingDeprecated(){ArchiveStreamFactory fac=new ArchiveStreamFactory();assertNull(fac.getEntryEncoding());fac.setEntryEncoding("UTF-8");assertEquals("UTF-8",fac.getEntryEncoding());fac.setEntryEncoding("US_ASCII");assertEquals("US_ASCII",fac.getEntryEncoding());fac=new ArchiveStreamFactory("UTF-8");assertEquals("UTF-8",fac.getEntryEncoding());try {fac.setEntryEncoding("US_ASCII");fail("Expected IllegalStateException");}catch(final IllegalStateException ise){}}
@Test public void testEncodingInputStreamAutodetect()throws Exception {int failed=0;for (int i=1;i <= TESTS.length;i++){final TestData test=TESTS[i - 1];final ArchiveInputStream ais=getInputStreamFor(test.testFile,test.fac);final String field=getField(ais,test.fieldName);if (!eq(test.expectedEncoding,field)){System.out.println("Failed test " + i + ". expected: "+ test.expectedEncoding+ " actual: "+ field+ " type: "+ test.type);failed++;}}if (failed > 0){fail("Tests failed: " + failed);}}
@Test public void testEncodingInputStream()throws Exception {int failed=0;for (int i=1;i <= TESTS.length;i++){final TestData test=TESTS[i - 1];final ArchiveInputStream ais=getInputStreamFor(test.type,test.testFile,test.fac);final String field=getField(ais,test.fieldName);if (!eq(test.expectedEncoding,field)){System.out.println("Failed test " + i + ". expected: "+ test.expectedEncoding+ " actual: "+ field+ " type: "+ test.type);failed++;}}if (failed > 0){fail("Tests failed: " + failed);}}
@Test public void testEncodingOutputStream()throws Exception {int failed=0;for (int i=1;i <= TESTS.length;i++){final TestData test=TESTS[i - 1];if (test.hasOutputStream){final ArchiveOutputStream ais=getOutputStreamFor(test.type,test.fac);final String field=getField(ais,test.fieldName);if (!eq(test.expectedEncoding,field)){System.out.println("Failed test " + i + ". expected: "+ test.expectedEncoding+ " actual: "+ field+ " type: "+ test.type);failed++;}}}if (failed > 0){fail("Tests failed: " + failed);}}
@Test public void shouldAllowNullOptions(){Assert.assertNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2,null).getOptions());}
@Test public void shouldAllowLZMA2OptionsForLZMA2(){Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2,new LZMA2Options()).getOptions());}
@Test public void shouldAllowNumberForLZMA2(){Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2,42).getOptions());}
@Test public void shouldAllowNumberForBzip2(){Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.BZIP2,42).getOptions());}
@Test public void shouldAllowNumberForDeflate(){Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.DEFLATE,42).getOptions());}
@Test(expected=IllegalArgumentException.class)public void shouldNotAllowStringOptionsForLZMA2(){new SevenZMethodConfiguration(SevenZMethod.LZMA2,"");}
@Test public void testPutAndGet()throws Exception {final int size=16;final CircularBuffer buffer=new CircularBuffer(size);for (int i=0;i < size / 2;i++){buffer.put(i);}assertTrue("available",buffer.available());for (int i=0;i < size / 2;i++){assertEquals("buffer[" + i + "]",i,buffer.get());}assertEquals(-1,buffer.get());assertFalse("available",buffer.available());}
@Test public void testCopy()throws Exception {final CircularBuffer buffer=new CircularBuffer(16);buffer.put(1);buffer.put(2);buffer.get();buffer.get();buffer.copy(6,8);for (int i=2;i < 6;i++){assertEquals("buffer[" + i + "]",0,buffer.get());}assertEquals("buffer[" + 6 + "]",1,buffer.get());assertEquals("buffer[" + 7 + "]",2,buffer.get());assertEquals("buffer[" + 8 + "]",0,buffer.get());assertEquals("buffer[" + 9 + "]",0,buffer.get());for (int i=10;i < 14;i++){buffer.put(i);buffer.get();}assertFalse("available",buffer.available());buffer.copy(2,8);for (int i=14;i < 18;i++){assertEquals("buffer[" + i + "]",i % 2 == 0 ? 12 : 13,buffer.get());}}
@Test public void testZipLong()throws Exception {final ZipLong test=ZipUtil.toDosTime(time);assertEquals(test.getValue(),zl.getValue());}
@Test public void testAdjustToLong(){assertEquals(Integer.MAX_VALUE,ZipUtil.adjustToLong(Integer.MAX_VALUE));assertEquals(((long)Integer.MAX_VALUE)+ 1,ZipUtil.adjustToLong(Integer.MAX_VALUE + 1));assertEquals(2 * ((long)Integer.MAX_VALUE),ZipUtil.adjustToLong(2 * Integer.MAX_VALUE));}
@Test public void testMinTime(){final byte[]b1=ZipUtil.toDosTime(0);final byte b10=b1[0];b1[0]++;final byte[]b2=ZipUtil.toDosTime(0);assertEquals(b10,b2[0]);}
@Test public void testOutsideCalendar(){final byte[]b1=ZipUtil.toDosTime(160441200000L);assertEquals(0,b1[0]);assertEquals(33,b1[1]);assertEquals(0,b1[2]);assertEquals(0,b1[3]);}
@Test public void testInsideCalendar(){final TimeZone tz=TimeZone.getDefault();final long date=476096400000L;final byte[]b1=ZipUtil.toDosTime(date - tz.getOffset(date));assertEquals(0,b1[0]);assertEquals(72,b1[1]);assertEquals(65,b1[2]);assertEquals(10,b1[3]);}
@Test public void testReverse(){final byte[][]bTest=new byte[6][];bTest[0]=new byte[]{};bTest[1]=new byte[]{1};bTest[2]=new byte[]{1,2};bTest[3]=new byte[]{1,2,3};bTest[4]=new byte[]{1,2,3,4};bTest[5]=new byte[]{1,2,3,4,5};final byte[][]rTest=new byte[6][];rTest[0]=new byte[]{};rTest[1]=new byte[]{1};rTest[2]=new byte[]{2,1};rTest[3]=new byte[]{3,2,1};rTest[4]=new byte[]{4,3,2,1};rTest[5]=new byte[]{5,4,3,2,1};assertEquals("test and result arrays are same length",bTest.length,rTest.length);for (int i=0;i < bTest.length;i++){final byte[]result=ZipUtil.reverse(bTest[i]);assertTrue("reverse mutates in-place",bTest[i]== result);assertTrue("reverse actually reverses",Arrays.equals(rTest[i],result));}}
@Test public void testBigToLong(){final BigInteger big1=BigInteger.valueOf(1);final BigInteger big2=BigInteger.valueOf(Long.MAX_VALUE);final BigInteger big3=BigInteger.valueOf(Long.MIN_VALUE);assertEquals(1L,ZipUtil.bigToLong(big1));assertEquals(Long.MAX_VALUE,ZipUtil.bigToLong(big2));assertEquals(Long.MIN_VALUE,ZipUtil.bigToLong(big3));final BigInteger big4=big2.add(big1);try {ZipUtil.bigToLong(big4);fail("Should have thrown IllegalArgumentException");}catch(final IllegalArgumentException iae){}final BigInteger big5=big3.subtract(big1);try {ZipUtil.bigToLong(big5);fail("ZipUtil.bigToLong(BigInteger)should have thrown IllegalArgumentException");}catch(final IllegalArgumentException iae){}}
@Test public void testLongToBig(){final long l0=0;final long l1=1;final long l2=-1;final long l3=Integer.MIN_VALUE;final long l4=Long.MAX_VALUE;final long l5=Long.MIN_VALUE;final BigInteger big0=ZipUtil.longToBig(l0);final BigInteger big1=ZipUtil.longToBig(l1);final BigInteger big2=ZipUtil.longToBig(l2);final BigInteger big3=ZipUtil.longToBig(l3);final BigInteger big4=ZipUtil.longToBig(l4);assertEquals(0,big0.longValue());assertEquals(1,big1.longValue());assertEquals(0xFFFFFFFFL,big2.longValue());assertEquals(0x80000000L,big3.longValue());assertEquals(Long.MAX_VALUE,big4.longValue());try {ZipUtil.longToBig(l5);fail("ZipUtil.longToBig(long)should have thrown IllegalArgumentException");}catch(final IllegalArgumentException iae){}}
@Test public void testSignedByteToUnsignedInt(){int expectedVal=128;for (int i=Byte.MIN_VALUE;i <= Byte.MAX_VALUE;i++){final byte b=(byte)i;assertEquals(expectedVal,ZipUtil.signedByteToUnsignedInt(b));expectedVal++;if (expectedVal == 256){expectedVal=0;}}}
@Test public void testUnsignedIntToSignedByte(){int unsignedVal=128;for (int i=Byte.MIN_VALUE;i <= Byte.MAX_VALUE;i++){final byte expectedVal=(byte)i;assertEquals(expectedVal,ZipUtil.unsignedIntToSignedByte(unsignedVal));unsignedVal++;if (unsignedVal == 256){unsignedVal=0;}}try {ZipUtil.unsignedIntToSignedByte(-1);fail("ZipUtil.unsignedIntToSignedByte(-1)should have thrown IllegalArgumentException");}catch(final IllegalArgumentException iae){}try {ZipUtil.unsignedIntToSignedByte(256);fail("ZipUtil.unsignedIntToSignedByte(256)should have thrown IllegalArgumentException");}catch(final IllegalArgumentException iae){}}
/** * Test conversion to bytes.*/@Test public void testToBytes(){final ZipLong zl=new ZipLong(0x12345678);final byte[]result=zl.getBytes();assertEquals("length getBytes",4,result.length);assertEquals("first byte getBytes",0x78,result[0]);assertEquals("second byte getBytes",0x56,result[1]);assertEquals("third byte getBytes",0x34,result[2]);assertEquals("fourth byte getBytes",0x12,result[3]);}
/** * Test conversion to bytes.*/@Test public void testPut(){final byte[]arr=new byte[5];ZipLong.putLong(0x12345678,arr,1);assertEquals("first byte getBytes",0x78,arr[1]);assertEquals("second byte getBytes",0x56,arr[2]);assertEquals("third byte getBytes",0x34,arr[3]);assertEquals("fourth byte getBytes",0x12,arr[4]);}
/** * Test conversion from bytes.*/@Test public void testFromBytes(){final byte[]val=new byte[]{0x78,0x56,0x34,0x12};final ZipLong zl=new ZipLong(val);assertEquals("value from bytes",0x12345678,zl.getValue());}
/** * Test the contract of the equals method.*/@Test public void testEquals(){final ZipLong zl=new ZipLong(0x12345678);final ZipLong zl2=new ZipLong(0x12345678);final ZipLong zl3=new ZipLong(0x87654321);assertTrue("reflexive",zl.equals(zl));assertTrue("works",zl.equals(zl2));assertTrue("works,part two",!zl.equals(zl3));assertTrue("symmetric",zl2.equals(zl));assertTrue("null handling",!zl.equals(null));assertTrue("non ZipLong handling",!zl.equals(new Integer(0x1234)));}
/** * Test sign handling.*/@Test public void testSign(){final ZipLong zl=new ZipLong(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(0x00000000FFFFFFFFl,zl.getValue());}
@Test public void testClone(){final ZipLong s1=new ZipLong(42);final ZipLong s2=(ZipLong)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}
@Test public void testRead7ZipMultiVolumeArchiveForStream()throws IOException {final FileInputStream archive=new FileInputStream(getFile("apache-maven-2.2.1.zip.001"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,null,false);for(final String element : ENTRIES){assertEquals(element,zi.getNextEntry().getName());}final ArchiveEntry lastEntry=zi.getNextEntry();assertEquals(LAST_ENTRY_NAME,lastEntry.getName());final byte[]buffer=new byte[4096];try {while (zi.read(buffer)> 0){}fail("shouldn't be able to read from truncated entry");}catch(final IOException e){assertEquals("Truncated ZIP file",e.getMessage());}try {zi.getNextEntry();fail("shouldn't be able to read another entry from truncated" + " file");}catch(final IOException e){}}finally {if (zi != null){zi.close();}}}
@Test(expected=IOException.class)public void testRead7ZipMultiVolumeArchiveForFile()throws IOException {final File file=getFile("apache-maven-2.2.1.zip.001");new ZipFile(file);}
@Test public void publicNameAddsTrailingSlashForDirectories(){final DumpArchiveEntry ent=new DumpArchiveEntry("foo","bar",-1,DumpArchiveEntry.TYPE.DIRECTORY);assertEquals("bar",ent.getSimpleName());assertEquals("foo",ent.getOriginalName());assertEquals("foo/",ent.getName());}
@Test public void publicNameRemovesLeadingDotSlash(){final DumpArchiveEntry ent=new DumpArchiveEntry("./foo","bar");assertEquals("bar",ent.getSimpleName());assertEquals("./foo",ent.getOriginalName());assertEquals("foo",ent.getName());}
@Test public void testDirectoriesAndEmptyFiles()throws Exception {output=new File(dir,"empties.7z");final Date accessDate=new Date();final Calendar cal=Calendar.getInstance();cal.add(Calendar.HOUR,-1);final Date creationDate=cal.getTime();final SevenZOutputFile outArchive=new SevenZOutputFile(output);try {SevenZArchiveEntry entry=outArchive.createArchiveEntry(dir,"foo/");outArchive.putArchiveEntry(entry);outArchive.closeArchiveEntry();entry=new SevenZArchiveEntry();entry.setName("foo/bar");entry.setCreationDate(creationDate);entry.setAccessDate(accessDate);outArchive.putArchiveEntry(entry);outArchive.write(new byte[0]);outArchive.closeArchiveEntry();entry=new SevenZArchiveEntry();entry.setName("xyzzy");outArchive.putArchiveEntry(entry);outArchive.write(0);outArchive.closeArchiveEntry();entry=outArchive.createArchiveEntry(dir,"baz/");entry.setAntiItem(true);outArchive.putArchiveEntry(entry);outArchive.closeArchiveEntry();entry=new SevenZArchiveEntry();entry.setName("dada");entry.setHasWindowsAttributes(true);entry.setWindowsAttributes(17);outArchive.putArchiveEntry(entry);outArchive.write(5);outArchive.write(42);outArchive.closeArchiveEntry();outArchive.finish();}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {SevenZArchiveEntry entry=archive.getNextEntry();assert(entry != null);assertEquals("foo/",entry.getName());assertTrue(entry.isDirectory());assertFalse(entry.isAntiItem());entry=archive.getNextEntry();assert(entry != null);assertEquals("foo/bar",entry.getName());assertFalse(entry.isDirectory());assertFalse(entry.isAntiItem());assertEquals(0,entry.getSize());assertFalse(entry.getHasLastModifiedDate());assertEquals(accessDate,entry.getAccessDate());assertEquals(creationDate,entry.getCreationDate());entry=archive.getNextEntry();assert(entry != null);assertEquals("xyzzy",entry.getName());assertEquals(1,entry.getSize());assertFalse(entry.getHasAccessDate());assertFalse(entry.getHasCreationDate());assertEquals(0,archive.read());entry=archive.getNextEntry();assert(entry != null);assertEquals("baz/",entry.getName());assertTrue(entry.isDirectory());assertTrue(entry.isAntiItem());entry=archive.getNextEntry();assert(entry != null);assertEquals("dada",entry.getName());assertEquals(2,entry.getSize());final byte[]content=new byte[2];assertEquals(2,archive.read(content));assertEquals(5,content[0]);assertEquals(42,content[1]);assertEquals(17,entry.getWindowsAttributes());assert(archive.getNextEntry()== null);}finally {archive.close();}}
@Test public void testDirectoriesOnly()throws Exception {output=new File(dir,"dirs.7z");final SevenZOutputFile outArchive=new SevenZOutputFile(output);try {final SevenZArchiveEntry entry=new SevenZArchiveEntry();entry.setName("foo/");entry.setDirectory(true);outArchive.putArchiveEntry(entry);outArchive.closeArchiveEntry();}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {final SevenZArchiveEntry entry=archive.getNextEntry();assert(entry != null);assertEquals("foo/",entry.getName());assertTrue(entry.isDirectory());assertFalse(entry.isAntiItem());assert(archive.getNextEntry()== null);}finally {archive.close();}}
@Test public void testCantFinishTwice()throws Exception {output=new File(dir,"finish.7z");final SevenZOutputFile outArchive=new SevenZOutputFile(output);try {outArchive.finish();outArchive.finish();fail("shouldn't be able to call finish twice");}catch(final IOException ex){assertEquals("This archive has already been finished",ex.getMessage());}finally {outArchive.close();}}
@Test public void testSixEmptyFiles()throws Exception {testCompress252(6,0);}
@Test public void testSixFilesSomeNotEmpty()throws Exception {testCompress252(6,2);}
@Test public void testSevenEmptyFiles()throws Exception {testCompress252(7,0);}
@Test public void testSevenFilesSomeNotEmpty()throws Exception {testCompress252(7,2);}
@Test public void testEightEmptyFiles()throws Exception {testCompress252(8,0);}
@Test public void testEightFilesSomeNotEmpty()throws Exception {testCompress252(8,2);}
@Test public void testNineEmptyFiles()throws Exception {testCompress252(9,0);}
@Test public void testNineFilesSomeNotEmpty()throws Exception {testCompress252(9,2);}
@Test public void testTwentyNineEmptyFiles()throws Exception {testCompress252(29,0);}
@Test public void testTwentyNineFilesSomeNotEmpty()throws Exception {testCompress252(29,7);}
@Test public void testCopyRoundtrip()throws Exception {testRoundTrip(SevenZMethod.COPY);}
@Test public void testBzip2Roundtrip()throws Exception {testRoundTrip(SevenZMethod.BZIP2);}
@Test public void testLzma2Roundtrip()throws Exception {testRoundTrip(SevenZMethod.LZMA2);}
@Test public void testDeflateRoundtrip()throws Exception {testRoundTrip(SevenZMethod.DEFLATE);}
@Test public void testBCJX86Roundtrip()throws Exception {if (XZ_BCJ_IS_BUGGY){return;}testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_X86_FILTER));}
@Test public void testBCJARMRoundtrip()throws Exception {if (XZ_BCJ_IS_BUGGY){return;}testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_FILTER));}
@Test public void testBCJARMThumbRoundtrip()throws Exception {if (XZ_BCJ_IS_BUGGY){return;}testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_THUMB_FILTER));}
@Test public void testBCJIA64Roundtrip()throws Exception {if (XZ_BCJ_IS_BUGGY){return;}testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_IA64_FILTER));}
@Test public void testBCJPPCRoundtrip()throws Exception {if (XZ_BCJ_IS_BUGGY){return;}testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_PPC_FILTER));}
@Test public void testBCJSparcRoundtrip()throws Exception {if (XZ_BCJ_IS_BUGGY){return;}testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_SPARC_FILTER));}
@Test public void testDeltaRoundtrip()throws Exception {testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER));}
@Test public void testStackOfContentCompressions()throws Exception {output=new File(dir,"multiple-methods.7z");final ArrayList<SevenZMethodConfiguration> methods=new ArrayList<SevenZMethodConfiguration>();methods.add(new SevenZMethodConfiguration(SevenZMethod.LZMA2));methods.add(new SevenZMethodConfiguration(SevenZMethod.COPY));methods.add(new SevenZMethodConfiguration(SevenZMethod.DEFLATE));methods.add(new SevenZMethodConfiguration(SevenZMethod.BZIP2));createAndReadBack(output,methods);}
@Test public void testDeflateWithConfiguration()throws Exception {output=new File(dir,"deflate-options.7z");createAndReadBack(output,Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.DEFLATE,1)));}
@Test public void testBzip2WithConfiguration()throws Exception {output=new File(dir,"bzip2-options.7z");createAndReadBack(output,Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.BZIP2,4)));}
@Test public void testLzma2WithIntConfiguration()throws Exception {output=new File(dir,"lzma2-options.7z");createAndReadBack(output,Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2,1 << 20)));}
@Test public void testLzma2WithOptionsConfiguration()throws Exception {output=new File(dir,"lzma2-options2.7z");final LZMA2Options opts=new LZMA2Options(1);createAndReadBack(output,Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2,opts)));}
@Test public void testArchiveWithMixedMethods()throws Exception {output=new File(dir,"mixed-methods.7z");final SevenZOutputFile outArchive=new SevenZOutputFile(output);try {addFile(outArchive,0,true);addFile(outArchive,1,true,Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2)));}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {assertEquals(Boolean.TRUE,verifyFile(archive,0,Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2))));assertEquals(Boolean.TRUE,verifyFile(archive,1,Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2))));}finally {archive.close();}}
@Test public void testArchive()throws Exception {@SuppressWarnings("unchecked")final ArrayList<String> expected=(ArrayList<String>)FILELIST.clone();try {checkArchiveContent(file,expected);}catch(final ArchiveException e){fail("Problem checking " + file);}catch(final AssertionError e){fail("Problem checking " + file + " "+ e);}}
@Test public void testDecode()throws IOException {final InputStream in=new ByteArrayInputStream(new byte[]{0x02,0x42,0x01,0x13});final BinaryTree tree=BinaryTree.decode(in,8);assertNotNull(tree);final BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0x8D,(byte)0xC5,(byte)0x11,0x00}));assertEquals(0,tree.read(stream));assertEquals(1,tree.read(stream));assertEquals(2,tree.read(stream));assertEquals(3,tree.read(stream));assertEquals(4,tree.read(stream));assertEquals(5,tree.read(stream));assertEquals(6,tree.read(stream));assertEquals(7,tree.read(stream));}
@Test public void testBzipCreation()throws Exception {File output=null;final File input=getFile("test.txt");{output=new File(dir,"test.txt.bz2");final OutputStream out=new FileOutputStream(output);final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("bzip2",out);final FileInputStream in=new FileInputStream(input);IOUtils.copy(in,cos);cos.close();in.close();}final File decompressed=new File(dir,"decompressed.txt");{final File toDecompress=output;final InputStream is=new FileInputStream(toDecompress);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);final FileOutputStream os=new FileOutputStream(decompressed);IOUtils.copy(in,os);is.close();os.close();}assertEquals(input.length(),decompressed.length());}
@Test public void testBzip2Unarchive()throws Exception {final File input=getFile("bla.txt.bz2");final File output=new File(dir,"bla.txt");final InputStream is=new FileInputStream(input);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);final FileOutputStream os=new FileOutputStream(output);IOUtils.copy(in,os);is.close();os.close();}
@Test public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
@Test public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new BZip2CompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
@Test public void testCOMPRESS131()throws Exception {final File input=getFile("COMPRESS-131.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new BZip2CompressorInputStream(is,true);try {int l=0;while (in.read()!= -1){l++;}assertEquals(539,l);}finally {in.close();}}finally {is.close();}}
@Test public void testWriteOldBinary()throws Exception {final File f=getFile("test1.xml");final File output=new File(dir,"test.cpio");final FileOutputStream out=new FileOutputStream(output);InputStream in=null;try {final CpioArchiveOutputStream os=new CpioArchiveOutputStream(out,CpioConstants.FORMAT_OLD_BINARY);os.putArchiveEntry(new CpioArchiveEntry(CpioConstants.FORMAT_OLD_BINARY,f,"test1.xml"));IOUtils.copy(in=new FileInputStream(f),os);in.close();in=null;os.closeArchiveEntry();os.close();}finally {if (in != null){in.close();}out.close();}try {in=new CpioArchiveInputStream(new FileInputStream(output));final CpioArchiveEntry e=((CpioArchiveInputStream)in).getNextCPIOEntry();assertEquals("test1.xml",e.getName());assertNull(((CpioArchiveInputStream)in).getNextEntry());}finally {if (in != null){in.close();}}}
@Test public void storedEntries()throws Exception {final ByteArrayOutputStream baos=new ByteArrayOutputStream();final StreamCompressor sc=StreamCompressor.create(baos);sc.deflate(new ByteArrayInputStream("A".getBytes()),ZipEntry.STORED);sc.deflate(new ByteArrayInputStream("BAD".getBytes()),ZipEntry.STORED);assertEquals(3,sc.getBytesRead());assertEquals(3,sc.getBytesWrittenForLastEntry());assertEquals(344750961,sc.getCrc32());sc.deflate(new ByteArrayInputStream("CAFE".getBytes()),ZipEntry.STORED);assertEquals("ABADCAFE",baos.toString());}
@Test public void deflatedEntries()throws Exception {final ByteArrayOutputStream baos=new ByteArrayOutputStream();final StreamCompressor sc=StreamCompressor.create(baos);sc.deflate(new ByteArrayInputStream("AAAAAABBBBBB".getBytes()),ZipEntry.DEFLATED);assertEquals(12,sc.getBytesRead());assertEquals(8,sc.getBytesWrittenForLastEntry());assertEquals(3299542,sc.getCrc32());final byte[]actuals=baos.toByteArray();final byte[]expected=new byte[]{115,116,4,1,39,48,0,0};assertArrayEquals(expected,actuals);}
@Test public void putArchiveEntry()throws Exception {scatterFile=File.createTempFile("scattertest",".notzip");final ScatterZipOutputStream scatterZipOutputStream=ScatterZipOutputStream.fileBased(scatterFile);final byte[]B_PAYLOAD="RBBBBBBS".getBytes();final byte[]A_PAYLOAD="XAAY".getBytes();final ZipArchiveEntry zab=new ZipArchiveEntry("b.txt");zab.setMethod(ZipEntry.DEFLATED);final ByteArrayInputStream payload=new ByteArrayInputStream(B_PAYLOAD);scatterZipOutputStream.addArchiveEntry(createZipArchiveEntryRequest(zab,createPayloadSupplier(payload)));final ZipArchiveEntry zae=new ZipArchiveEntry("a.txt");zae.setMethod(ZipEntry.DEFLATED);final ByteArrayInputStream payload1=new ByteArrayInputStream(A_PAYLOAD);scatterZipOutputStream.addArchiveEntry(createZipArchiveEntryRequest(zae,createPayloadSupplier(payload1)));target=File.createTempFile("scattertest",".zip");final ZipArchiveOutputStream outputStream=new ZipArchiveOutputStream(target);scatterZipOutputStream.writeTo(outputStream);outputStream.close();scatterZipOutputStream.close();final ZipFile zf=new ZipFile(target);final ZipArchiveEntry b_entry=zf.getEntries("b.txt").iterator().next();assertEquals(8,b_entry.getSize());assertArrayEquals(B_PAYLOAD,IOUtils.toByteArray(zf.getInputStream(b_entry)));final ZipArchiveEntry a_entry=zf.getEntries("a.txt").iterator().next();assertEquals(4,a_entry.getSize());assertArrayEquals(A_PAYLOAD,IOUtils.toByteArray(zf.getInputStream(a_entry)));zf.close();}
/** * Tests the creation of a DEFLATE archive with zlib header* @throws Exception*/@Test public void testDeflateCreation()throws Exception {final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.deflatez");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("deflate",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
/** * Tests the creation of a "raw" DEFLATE archive (without zlib header)* @throws Exception*/@Test public void testRawDeflateCreation()throws Exception {final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.deflate");final OutputStream out=new FileOutputStream(output);try {final DeflateParameters params=new DeflateParameters();params.setWithZlibHeader(false);final CompressorOutputStream cos=new DeflateCompressorOutputStream(out,params);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
/** * Tests the extraction of a DEFLATE archive with zlib header* @throws Exception*/@Test public void testDeflateUnarchive()throws Exception {final File input=getFile("bla.tar.deflatez");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("deflate",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
/** * Tests the extraction of a "raw" DEFLATE archive (without zlib header)* @throws Exception*/@Test public void testRawDeflateUnarchive()throws Exception {final File input=getFile("bla.tar.deflate");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final DeflateParameters params=new DeflateParameters();params.setWithZlibHeader(false);final CompressorInputStream in=new DeflateCompressorInputStream(is,params);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
@Test public void testCount()throws Exception {final File f=File.createTempFile("commons-compress-tarcount",".tar");f.deleteOnExit();final FileOutputStream fos=new FileOutputStream(f);final ArchiveOutputStream tarOut=new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR,fos);final File file1=getFile("test1.xml");final TarArchiveEntry sEntry=new TarArchiveEntry(file1,file1.getName());tarOut.putArchiveEntry(sEntry);final FileInputStream in=new FileInputStream(file1);final byte[]buf=new byte[8192];int read=0;while ((read=in.read(buf))> 0){tarOut.write(buf,0,read);}in.close();tarOut.closeArchiveEntry();tarOut.close();assertEquals(f.length(),tarOut.getBytesWritten());}
@Test public void testMaxFileSizeError()throws Exception {final TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(077777777777L);TarArchiveOutputStream tos=new TarArchiveOutputStream(new ByteArrayOutputStream());tos.putArchiveEntry(t);t.setSize(0100000000000L);tos=new TarArchiveOutputStream(new ByteArrayOutputStream());try {tos.putArchiveEntry(t);fail("Should have generated RuntimeException");}catch(final RuntimeException expected){}}
@Test public void testBigNumberStarMode()throws Exception {final TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(0100000000000L);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);final byte[]data=bos.toByteArray();assertEquals(0x80,data[TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN]& 0x80);final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(0100000000000L,e.getSize());tin.close();closeQuietly(tos);}
@Test public void testBigNumberPosixMode()throws Exception {final TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(0100000000000L);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);final byte[]data=bos.toByteArray();assertEquals("00000000000 ",new String(data,1024 + TarConstants.NAMELEN + TarConstants.MODELEN+ TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(0100000000000L,e.getSize());tin.close();closeQuietly(tos);}
@Test public void testWriteSimplePaxHeaders()throws Exception {final Map<String,String> m=new HashMap<String,String>();m.put("a","b");final byte[]data=writePaxHeader(m);assertEquals("00000000006 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));assertEquals("6 a=b\n",new String(data,512,6,CharsetNames.UTF_8));}
@Test public void testPaxHeadersWithLength99()throws Exception {final Map<String,String> m=new HashMap<String,String>();m.put("a","0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "012");final byte[]data=writePaxHeader(m);assertEquals("00000000143 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));assertEquals("99 a=0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "012\n",new String(data,512,99,CharsetNames.UTF_8));}
@Test public void testPaxHeadersWithLength101()throws Exception {final Map<String,String> m=new HashMap<String,String>();m.put("a","0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "0123");final byte[]data=writePaxHeader(m);assertEquals("00000000145 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));assertEquals("101 a=0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "0123\n",new String(data,512,101,CharsetNames.UTF_8));}
@Test public void testWriteLongFileNamePosixMode()throws Exception {final String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789";final TarArchiveEntry t=new TarArchiveEntry(n);t.setSize(10 * 1024);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();final byte[]data=bos.toByteArray();assertEquals("160 path=" + n + "\n",new String(data,512,160,CharsetNames.UTF_8));final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());tin.close();tos.close();}
@Test public void testOldEntryStarMode()throws Exception {final TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(Integer.MAX_VALUE);t.setModTime(-1000);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);final byte[]data=bos.toByteArray();assertEquals((byte)0xff,data[TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN+ TarConstants.SIZELEN]);final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();final Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));cal.set(1969,11,31,23,59,59);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),e.getLastModifiedDate());tin.close();closeQuietly(tos);}
@Test public void testOldEntryPosixMode()throws Exception {final TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(Integer.MAX_VALUE);t.setModTime(-1000);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);final byte[]data=bos.toByteArray();assertEquals("00000000000 ",new String(data,1024 + TarConstants.NAMELEN + TarConstants.MODELEN+ TarConstants.UIDLEN+ TarConstants.GIDLEN+ TarConstants.SIZELEN,12,CharsetNames.UTF_8));final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();final Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));cal.set(1969,11,31,23,59,59);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),e.getLastModifiedDate());tin.close();closeQuietly(tos);}
@Test public void testOldEntryError()throws Exception {final TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(Integer.MAX_VALUE);t.setModTime(-1000);final TarArchiveOutputStream tos=new TarArchiveOutputStream(new ByteArrayOutputStream());try {tos.putArchiveEntry(t);fail("Should have generated RuntimeException");}catch(final RuntimeException expected){}tos.close();}
@Test public void testWriteNonAsciiPathNamePaxHeader()throws Exception {final String n="\u00e4";final TarArchiveEntry t=new TarArchiveEntry(n);t.setSize(10 * 1024);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();assertEquals("11 path=" + n + "\n",new String(data,512,11,CharsetNames.UTF_8));final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());tin.close();}
@Test public void testWriteNonAsciiLinkPathNamePaxHeader()throws Exception {final String n="\u00e4";final TarArchiveEntry t=new TarArchiveEntry("a",TarConstants.LF_LINK);t.setSize(10 * 1024);t.setLinkName(n);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();assertEquals("15 linkpath=" + n + "\n",new String(data,512,15,CharsetNames.UTF_8));final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getLinkName());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-200"*/@Test public void testRoundtripWith67CharFileNameGnu()throws Exception {testRoundtripWith67CharFileName(TarArchiveOutputStream.LONGFILE_GNU);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-200"*/@Test public void testRoundtripWith67CharFileNamePosix()throws Exception {testRoundtripWith67CharFileName(TarArchiveOutputStream.LONGFILE_POSIX);}
@Test public void testWriteLongDirectoryNameErrorMode()throws Exception {final String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/";try {final TarArchiveEntry t=new TarArchiveEntry(n);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();fail("Truncated name didn't throw an exception");}catch(final RuntimeException e){}}
@Test public void testWriteLongDirectoryNameTruncateMode()throws Exception {final String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/";final TarArchiveEntry t=new TarArchiveEntry(n);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_TRUNCATE);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals("Entry name",n.substring(0,TarConstants.NAMELEN)+ "/",e.getName());assertTrue("The entry is not a directory",e.isDirectory());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-203"*/@Test public void testWriteLongDirectoryNameGnuMode()throws Exception {testWriteLongDirectoryName(TarArchiveOutputStream.LONGFILE_GNU);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-203"*/@Test public void testWriteLongDirectoryNamePosixMode()throws Exception {testWriteLongDirectoryName(TarArchiveOutputStream.LONGFILE_POSIX);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-203"*/@Test public void testWriteNonAsciiDirectoryNamePosixMode()throws Exception {final String n="f\u00f6\u00f6/";final TarArchiveEntry t=new TarArchiveEntry(n);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());assertTrue(e.isDirectory());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-265"*/@Test public void testWriteNonAsciiNameWithUnfortunateNamePosixMode()throws Exception {final String n="f\u00f6\u00f6\u00dc";final TarArchiveEntry t=new TarArchiveEntry(n);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());assertFalse(e.isDirectory());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/@Test public void testWriteLongLinkNameErrorMode()throws Exception {final String linkname="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/test";final TarArchiveEntry entry=new TarArchiveEntry("test",TarConstants.LF_SYMLINK);entry.setLinkName(linkname);try {final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR);tos.putArchiveEntry(entry);tos.closeArchiveEntry();tos.close();fail("Truncated link name didn't throw an exception");}catch(final RuntimeException e){}}
@Test public void testWriteLongLinkNameTruncateMode()throws Exception {final String linkname="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/";final TarArchiveEntry entry=new TarArchiveEntry("test",TarConstants.LF_SYMLINK);entry.setLinkName(linkname);final ByteArrayOutputStream bos=new ByteArrayOutputStream();final TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_TRUNCATE);tos.putArchiveEntry(entry);tos.closeArchiveEntry();tos.close();final byte[]data=bos.toByteArray();final TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));final TarArchiveEntry e=tin.getNextTarEntry();assertEquals("Link name",linkname.substring(0,TarConstants.NAMELEN),e.getLinkName());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/@Test public void testWriteLongLinkNameGnuMode()throws Exception {testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_GNU);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/@Test public void testWriteLongLinkNamePosixMode()throws Exception {testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_POSIX);}
@Test public void testPadsOutputToFullBlockLength()throws Exception {final File f=File.createTempFile("commons-compress-padding",".tar");f.deleteOnExit();final FileOutputStream fos=new FileOutputStream(f);final TarArchiveOutputStream tos=new TarArchiveOutputStream(fos);final File file1=getFile("test1.xml");final TarArchiveEntry sEntry=new TarArchiveEntry(file1,file1.getName());tos.putArchiveEntry(sEntry);final FileInputStream in=new FileInputStream(file1);IOUtils.copy(in,tos);in.close();tos.closeArchiveEntry();tos.close();assertEquals(TarConstants.DEFAULT_BLKSIZE,f.length());}
/** * When using long file names the longLinkEntry included the current timestamp as the Entry modification date. This was never exposed to the client but it caused identical archives to have different MD5 hashes.* @throws Exception*/@Test public void testLongNameMd5Hash()throws Exception {final String longFileName="a/considerably/longer/file/name/which/forces/use/of/the/long/link/header/which/appears/to/always/use/the/current/time/as/modification/date";final String fname=longFileName;final Date modificationDate=new Date();final byte[]archive1=createTarArchiveContainingOneDirectory(fname,modificationDate);final byte[]digest1=MessageDigest.getInstance("MD5").digest(archive1);Thread.sleep(1000L);final byte[]archive2=createTarArchiveContainingOneDirectory(fname,modificationDate);final byte[]digest2=MessageDigest.getInstance("MD5").digest(archive2);Assert.assertArrayEquals(digest1,digest2);Thread.sleep(1000);final TarArchiveInputStream tarIn=new TarArchiveInputStream(new ByteArrayInputStream(archive2));final ArchiveEntry nextEntry=tarIn.getNextEntry();assertEquals(longFileName,nextEntry.getName());assertEquals(modificationDate.getTime()/ 1000,nextEntry.getLastModifiedDate().getTime()/ 1000);tarIn.close();}
@Test(expected=IOException.class)public void shouldThrowAnIOExceptionWhenAppliedToAZipFile()throws Exception {final FileInputStream in=new FileInputStream(getFile("bla.zip"));try {new BZip2CompressorInputStream(in);}finally {in.close();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-309"*/@Test public void readOfLength0ShouldReturn0()throws Exception {final byte[]rawData=new byte[1048576];for (int i=0;i < rawData.length;++i){rawData[i]=(byte)Math.floor(Math.random()* 256);}final ByteArrayOutputStream baos=new ByteArrayOutputStream();final BZip2CompressorOutputStream bzipOut=new BZip2CompressorOutputStream(baos);bzipOut.write(rawData);bzipOut.flush();bzipOut.close();baos.flush();baos.close();final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());final BZip2CompressorInputStream bzipIn=new BZip2CompressorInputStream(bais);final byte[]buffer=new byte[1024];Assert.assertEquals(1024,bzipIn.read(buffer,0,1024));Assert.assertEquals(0,bzipIn.read(buffer,1024,0));Assert.assertEquals(1024,bzipIn.read(buffer,0,1024));bzipIn.close();}
/** * Test conversion to bytes.*/@Test public void testLongToBytes(){final ZipEightByteInteger zl=new ZipEightByteInteger(0xAB12345678l);final byte[]result=zl.getBytes();assertEquals("length getBytes",8,result.length);assertEquals("first byte getBytes",0x78,result[0]);assertEquals("second byte getBytes",0x56,result[1]);assertEquals("third byte getBytes",0x34,result[2]);assertEquals("fourth byte getBytes",0x12,result[3]);assertEquals("fifth byte getBytes",(byte)0xAB,result[4]);assertEquals("sixth byte getBytes",0,result[5]);assertEquals("seventh byte getBytes",0,result[6]);assertEquals("eighth byte getBytes",0,result[7]);}
/** * Test conversion from bytes.*/@Test public void testLongFromBytes(){final byte[]val=new byte[]{0x78,0x56,0x34,0x12,(byte)0xAB,0x00,0x00,0x00};final ZipEightByteInteger zl=new ZipEightByteInteger(val);assertEquals("longValue from bytes",0xAB12345678l,zl.getLongValue());}
/** * Test conversion to bytes.*/@Test public void testBIToBytes(){final ZipEightByteInteger zl=new ZipEightByteInteger(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1));final byte[]result=zl.getBytes();assertEquals("length getBytes",8,result.length);assertEquals("first byte getBytes",(byte)0xFE,result[0]);assertEquals("second byte getBytes",(byte)0xFF,result[1]);assertEquals("third byte getBytes",(byte)0xFF,result[2]);assertEquals("fourth byte getBytes",(byte)0xFF,result[3]);assertEquals("fifth byte getBytes",(byte)0xFF,result[4]);assertEquals("sixth byte getBytes",(byte)0xFF,result[5]);assertEquals("seventh byte getBytes",(byte)0xFF,result[6]);assertEquals("eighth byte getBytes",(byte)0xFF,result[7]);}
/** * Test conversion from bytes.*/@Test public void testBIFromBytes(){final byte[]val=new byte[]{(byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};final ZipEightByteInteger zl=new ZipEightByteInteger(val);assertEquals("value from bytes",BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1),zl.getValue());}
/** * Test the contract of the equals method.*/@Test public void testEquals(){final ZipEightByteInteger zl=new ZipEightByteInteger(0x12345678);final ZipEightByteInteger zl2=new ZipEightByteInteger(0x12345678);final ZipEightByteInteger zl3=new ZipEightByteInteger(0x87654321);assertTrue("reflexive",zl.equals(zl));assertTrue("works",zl.equals(zl2));assertTrue("works,part two",!zl.equals(zl3));assertTrue("symmetric",zl2.equals(zl));assertTrue("null handling",!zl.equals(null));assertTrue("non ZipEightByteInteger handling",!zl.equals(new Integer(0x1234)));}
/** * Test sign handling.*/@Test public void testSign(){final ZipEightByteInteger zl=new ZipEightByteInteger(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1).setBit(0),zl.getValue());}
@Test public void testSortFixture(){final DS ds=setUpFixture();ds.s.blockSort(ds.data,FIXTURE.length - 1);assertFixtureSorted(ds.data);assertEquals(0,ds.data.origPtr);}
@Test public void testSortFixtureMainSort(){final DS ds=setUpFixture();ds.s.mainSort(ds.data,FIXTURE.length - 1);assertFixtureSorted(ds.data);}
@Test public void testSortFixtureFallbackSort(){final DS ds=setUpFixture();ds.s.fallbackSort(ds.data,FIXTURE.length - 1);assertFixtureSorted(ds.data);}
@Test public void testSortFixture2(){final DS ds=setUpFixture2();ds.s.blockSort(ds.data,FIXTURE2.length - 1);assertFixture2Sorted(ds.data);assertEquals(1,ds.data.origPtr);}
@Test public void testSortFixture2MainSort(){final DS ds=setUpFixture2();ds.s.mainSort(ds.data,FIXTURE2.length - 1);assertFixture2Sorted(ds.data);}
@Test public void testSortFixture2FallbackSort(){final DS ds=setUpFixture2();ds.s.fallbackSort(ds.data,FIXTURE2.length - 1);assertFixture2Sorted(ds.data);}
@Test public void testFallbackSort(){final BZip2CompressorOutputStream.Data data=new BZip2CompressorOutputStream.Data(1);final BlockSort s=new BlockSort(data);final int[]fmap=new int[FIXTURE.length];s.fallbackSort(fmap,FIXTURE,FIXTURE.length);assertArrayEquals(FIXTURE_SORTED,fmap);}
@Test public void testIsCompressedFilename(){assertFalse(GzipUtils.isCompressedFilename(""));assertFalse(GzipUtils.isCompressedFilename(".gz"));assertTrue(GzipUtils.isCompressedFilename("x.tgz"));assertTrue(GzipUtils.isCompressedFilename("x.taz"));assertTrue(GzipUtils.isCompressedFilename("x.svgz"));assertTrue(GzipUtils.isCompressedFilename("x.cpgz"));assertTrue(GzipUtils.isCompressedFilename("x.wmz"));assertTrue(GzipUtils.isCompressedFilename("x.emz"));assertTrue(GzipUtils.isCompressedFilename("x.gz"));assertTrue(GzipUtils.isCompressedFilename("x.z"));assertTrue(GzipUtils.isCompressedFilename("x-gz"));assertTrue(GzipUtils.isCompressedFilename("x-z"));assertTrue(GzipUtils.isCompressedFilename("x_z"));assertFalse(GzipUtils.isCompressedFilename("xxgz"));assertFalse(GzipUtils.isCompressedFilename("xzz"));assertFalse(GzipUtils.isCompressedFilename("xaz"));assertTrue(GzipUtils.isCompressedFilename("x.SVGZ"));assertTrue(GzipUtils.isCompressedFilename("x.Svgz"));assertTrue(GzipUtils.isCompressedFilename("x.svGZ"));assertFalse(GzipUtils.isCompressedFilename("x.wmz "));assertFalse(GzipUtils.isCompressedFilename("x.wmz\n"));assertFalse(GzipUtils.isCompressedFilename("x.wmz.y"));}
@Test public void testGetUncompressedFilename(){assertEquals("",GzipUtils.getUncompressedFilename(""));assertEquals(".gz",GzipUtils.getUncompressedFilename(".gz"));assertEquals("x.tar",GzipUtils.getUncompressedFilename("x.tgz"));assertEquals("x.tar",GzipUtils.getUncompressedFilename("x.taz"));assertEquals("x.svg",GzipUtils.getUncompressedFilename("x.svgz"));assertEquals("x.cpio",GzipUtils.getUncompressedFilename("x.cpgz"));assertEquals("x.wmf",GzipUtils.getUncompressedFilename("x.wmz"));assertEquals("x.emf",GzipUtils.getUncompressedFilename("x.emz"));assertEquals("x",GzipUtils.getUncompressedFilename("x.gz"));assertEquals("x",GzipUtils.getUncompressedFilename("x.z"));assertEquals("x",GzipUtils.getUncompressedFilename("x-gz"));assertEquals("x",GzipUtils.getUncompressedFilename("x-z"));assertEquals("x",GzipUtils.getUncompressedFilename("x_z"));assertEquals("x.svg",GzipUtils.getUncompressedFilename("x.SVGZ"));assertEquals("X.svg",GzipUtils.getUncompressedFilename("X.SVGZ"));assertEquals("X.svg",GzipUtils.getUncompressedFilename("X.svGZ"));assertEquals("x.wmz ",GzipUtils.getUncompressedFilename("x.wmz "));assertEquals("x.wmz\n",GzipUtils.getUncompressedFilename("x.wmz\n"));assertEquals("x.wmz.y",GzipUtils.getUncompressedFilename("x.wmz.y"));}
@Test public void testGetCompressedFilename(){assertEquals(".gz",GzipUtils.getCompressedFilename(""));assertEquals("x.gz",GzipUtils.getCompressedFilename("x"));assertEquals("x.tgz",GzipUtils.getCompressedFilename("x.tar"));assertEquals("x.svgz",GzipUtils.getCompressedFilename("x.svg"));assertEquals("x.cpgz",GzipUtils.getCompressedFilename("x.cpio"));assertEquals("x.wmz",GzipUtils.getCompressedFilename("x.wmf"));assertEquals("x.emz",GzipUtils.getCompressedFilename("x.emf"));assertEquals("x.svgz",GzipUtils.getCompressedFilename("x.SVG"));assertEquals("X.svgz",GzipUtils.getCompressedFilename("X.SVG"));assertEquals("X.svgz",GzipUtils.getCompressedFilename("X.svG"));assertEquals("x.wmf .gz",GzipUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.gz",GzipUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.gz",GzipUtils.getCompressedFilename("x.wmf.y"));}
@Test public void testSampleFile()throws Exception {final File archive=getFile("COMPRESS-211_uid_gid_zip_test.zip");ZipFile zf=null;try {zf=new ZipFile(archive);final Enumeration<ZipArchiveEntry> en=zf.getEntries();while (en.hasMoreElements()){final ZipArchiveEntry zae=en.nextElement();final String name=zae.getName();final X7875_NewUnix xf=(X7875_NewUnix)zae.getExtraField(X7875);long expected=1000;if (name.contains("uid555_gid555")){expected=555;}else       if (name.contains("uid5555_gid5555")){expected=5555;}else       if (name.contains("uid55555_gid55555")){expected=55555;}else       if (name.contains("uid555555_gid555555")){expected=555555;}else       if (name.contains("min_unix")){expected=0;}else       if (name.contains("max_unix")){expected=0x100000000L - 2;}assertEquals(expected,xf.getUID());assertEquals(expected,xf.getGID());}}finally {if (zf != null){zf.close();}}}
@Test public void testGetHeaderId(){assertEquals(X7875,xf.getHeaderId());}
@Test public void testMisc()throws Exception {assertFalse(xf.equals(new Object()));assertTrue(xf.toString().startsWith("0x7875 Zip Extra Field"));final Object o=xf.clone();assertEquals(o.hashCode(),xf.hashCode());assertTrue(xf.equals(o));xf.setUID(12345);assertFalse(xf.equals(o));}
@Test public void testTrimLeadingZeroesForceMinLength4(){final byte[]NULL=null;final byte[]EMPTY=new byte[0];final byte[]ONE_ZERO={0};final byte[]TWO_ZEROES={0,0};final byte[]FOUR_ZEROES={0,0,0,0};final byte[]SEQUENCE={1,2,3};final byte[]SEQUENCE_LEADING_ZERO={0,1,2,3};final byte[]SEQUENCE_LEADING_ZEROES={0,0,0,0,0,0,0,1,2,3};final byte[]TRAILING_ZERO={1,2,3,0};final byte[]PADDING_ZERO={0,1,2,3,0};final byte[]SEQUENCE6={1,2,3,4,5,6};final byte[]SEQUENCE6_LEADING_ZERO={0,1,2,3,4,5,6};assertTrue(NULL == trimTest(NULL));assertTrue(Arrays.equals(ONE_ZERO,trimTest(EMPTY)));assertTrue(Arrays.equals(ONE_ZERO,trimTest(ONE_ZERO)));assertTrue(Arrays.equals(ONE_ZERO,trimTest(TWO_ZEROES)));assertTrue(Arrays.equals(ONE_ZERO,trimTest(FOUR_ZEROES)));assertTrue(Arrays.equals(SEQUENCE,trimTest(SEQUENCE)));assertTrue(Arrays.equals(SEQUENCE,trimTest(SEQUENCE_LEADING_ZERO)));assertTrue(Arrays.equals(SEQUENCE,trimTest(SEQUENCE_LEADING_ZEROES)));assertTrue(Arrays.equals(TRAILING_ZERO,trimTest(TRAILING_ZERO)));assertTrue(Arrays.equals(TRAILING_ZERO,trimTest(PADDING_ZERO)));assertTrue(Arrays.equals(SEQUENCE6,trimTest(SEQUENCE6)));assertTrue(Arrays.equals(SEQUENCE6,trimTest(SEQUENCE6_LEADING_ZERO)));}
@Test public void testParseReparse()throws ZipException {final byte[]ZERO_LEN={1,0,0};final byte[]ZERO_UID_GID={1,1,0,1,0};final byte[]ONE_UID_GID={1,1,1,1,1};final byte[]ONE_THOUSAND_UID_GID={1,2,-24,3,2,-24,3};final byte[]UNIX_MAX_UID_GID={1,4,-2,-1,-1,-1,4,-2,-1,-1,-1};final byte[]LENGTH_5={1,5,0,0,0,0,1,5,1,0,0,0,1};final byte[]LENGTH_8={1,8,-2,-1,-1,-1,-1,-1,-1,127,8,-1,-1,-1,-1,-1,-1,-1,127};final long TWO_TO_32=0x100000000L;final long MAX=TWO_TO_32 - 2;parseReparse(0,0,ZERO_LEN,0,0);parseReparse(0,0,ZERO_UID_GID,0,0);parseReparse(1,1,ONE_UID_GID,1,1);parseReparse(1000,1000,ONE_THOUSAND_UID_GID,1000,1000);parseReparse(MAX,MAX,UNIX_MAX_UID_GID,MAX,MAX);parseReparse(-2,-2,UNIX_MAX_UID_GID,MAX,MAX);parseReparse(TWO_TO_32,TWO_TO_32 + 1,LENGTH_5,TWO_TO_32,TWO_TO_32 + 1);parseReparse(Long.MAX_VALUE - 1,Long.MAX_VALUE,LENGTH_8,Long.MAX_VALUE - 1,Long.MAX_VALUE);final byte[]SPURIOUS_ZEROES_1={1,4,-1,0,0,0,4,-128,0,0,0};final byte[]EXPECTED_1={1,1,-1,1,-128};xf.parseFromLocalFileData(SPURIOUS_ZEROES_1,0,SPURIOUS_ZEROES_1.length);assertEquals(255,xf.getUID());assertEquals(128,xf.getGID());assertTrue(Arrays.equals(EXPECTED_1,xf.getLocalFileDataData()));final byte[]SPURIOUS_ZEROES_2={1,4,-1,-1,0,0,4,1,2,0,0};final byte[]EXPECTED_2={1,2,-1,-1,2,1,2};xf.parseFromLocalFileData(SPURIOUS_ZEROES_2,0,SPURIOUS_ZEROES_2.length);assertEquals(65535,xf.getUID());assertEquals(513,xf.getGID());assertTrue(Arrays.equals(EXPECTED_2,xf.getLocalFileDataData()));}
@Test public void testArchive()throws Exception {@SuppressWarnings("unchecked")final ArrayList<String> expected=(ArrayList<String>)FILELIST.clone();final String name=file.getName();if ("minotaur.jar".equals(name)|| "minotaur-0.jar".equals(name)){expected.add("META-INF/");expected.add("META-INF/MANIFEST.MF");}final ArchiveInputStream ais=factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(file)));if (name.endsWith(".tar")){assertTrue(ais instanceof TarArchiveInputStream);}else   if (name.endsWith(".jar")|| name.endsWith(".zip")){assertTrue(ais instanceof ZipArchiveInputStream);}else   if (name.endsWith(".cpio")){assertTrue(ais instanceof CpioArchiveInputStream);for (int i=0;i < expected.size();i++){final String ent=expected.get(i);if (ent.endsWith("/")){expected.set(i,ent.substring(0,ent.length()- 1));}}}else   if (name.endsWith(".ar")){assertTrue(ais instanceof ArArchiveInputStream);expected.clear();for(final String ent : FILELIST){if (!ent.endsWith("/")){final int lastSlash=ent.lastIndexOf('/');if (lastSlash >= 0){expected.add(ent.substring(lastSlash + 1,ent.length()));}else {expected.add(ent);}}}}else {fail("Unexpected file type: " + name);}try {checkArchiveContent(ais,expected);}catch(final AssertionFailedError e){fail("Error processing " + file.getName()+ " "+ e);}finally {ais.close();}}
@Test public void testIsCompressedFilename(){assertFalse(BZip2Utils.isCompressedFilename(""));assertFalse(BZip2Utils.isCompressedFilename(".gz"));assertTrue(BZip2Utils.isCompressedFilename("x.tbz2"));assertTrue(BZip2Utils.isCompressedFilename("x.tbz"));assertTrue(BZip2Utils.isCompressedFilename("x.bz2"));assertTrue(BZip2Utils.isCompressedFilename("x.bz"));assertFalse(BZip2Utils.isCompressedFilename("xbz2"));assertFalse(BZip2Utils.isCompressedFilename("xbz"));assertTrue(BZip2Utils.isCompressedFilename("x.TBZ2"));assertTrue(BZip2Utils.isCompressedFilename("x.Tbz2"));assertTrue(BZip2Utils.isCompressedFilename("x.tbZ2"));assertFalse(BZip2Utils.isCompressedFilename("x.bz "));assertFalse(BZip2Utils.isCompressedFilename("x.tbz\n"));assertFalse(BZip2Utils.isCompressedFilename("x.tbz2.y"));}
@Test public void testGetUncompressedFilename(){assertEquals("",BZip2Utils.getUncompressedFilename(""));assertEquals(".bz2",BZip2Utils.getUncompressedFilename(".bz2"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.tbz2"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.tbz"));assertEquals("x",BZip2Utils.getUncompressedFilename("x.bz2"));assertEquals("x",BZip2Utils.getUncompressedFilename("x.bz"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.TBZ2"));assertEquals("X.tar",BZip2Utils.getUncompressedFilename("X.Tbz2"));assertEquals("X.tar",BZip2Utils.getUncompressedFilename("X.tbZ2"));assertEquals("x.bz ",BZip2Utils.getUncompressedFilename("x.bz "));assertEquals("x.tbz\n",BZip2Utils.getUncompressedFilename("x.tbz\n"));assertEquals("x.tbz2.y",BZip2Utils.getUncompressedFilename("x.tbz2.y"));}
@Test public void testGetCompressedFilename(){assertEquals(".bz2",BZip2Utils.getCompressedFilename(""));assertEquals(" .bz2",BZip2Utils.getCompressedFilename(" "));assertEquals("x.bz2",BZip2Utils.getCompressedFilename("x"));assertEquals("X.bz2",BZip2Utils.getCompressedFilename("X"));assertEquals("x.tar.bz2",BZip2Utils.getCompressedFilename("x.tar"));assertEquals("x.tar.bz2",BZip2Utils.getCompressedFilename("x.TAR"));}
@Test public void testUtf8FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,true,true);}
@Test public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,false,true);}
@Test public void testCP437FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,true);}
@Test public void testASCIIFileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.US_ASCII,false,true);}
@Test public void testUtf8FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,true,false);}
@Test public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,false,false);}
@Test public void testCP437FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,false);}
@Test public void testASCIIFileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.US_ASCII,false,false);}
@Test public void testRead7ZipArchive()throws IOException {final File archive=getFile("utf8-7zip-test.zip");ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);}}
@Test public void testRead7ZipArchiveForStream()throws IOException {final FileInputStream archive=new FileInputStream(getFile("utf8-7zip-test.zip"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,CP437,false);assertEquals(ASCII_TXT,zi.getNextEntry().getName());assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}}}
@Test public void testReadWinZipArchive()throws IOException {final File archive=getFile("utf8-winzip-test.zip");ZipFile zf=null;try {zf=new ZipFile(archive,null,true);assertCanRead(zf,ASCII_TXT);assertCanRead(zf,EURO_FOR_DOLLAR_TXT);assertCanRead(zf,OIL_BARREL_TXT);}finally {ZipFile.closeQuietly(zf);}}
@Test public void testReadWinZipArchiveForStream()throws IOException {final FileInputStream archive=new FileInputStream(getFile("utf8-winzip-test.zip"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,null,true);assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(ASCII_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}}}
@Test public void testZipFileReadsUnicodeFields()throws IOException {final File file=File.createTempFile("unicode-test",".zip");file.deleteOnExit();ZipArchiveInputStream zi=null;try {createTestFile(file,CharsetNames.US_ASCII,false,true);final FileInputStream archive=new FileInputStream(file);zi=new ZipArchiveInputStream(archive,CharsetNames.US_ASCII,true);assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());assertEquals(ASCII_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}tryHardToDelete(file);}}
@Test public void testZipArchiveInputStreamReadsUnicodeFields()throws IOException {final File file=File.createTempFile("unicode-test",".zip");file.deleteOnExit();ZipFile zf=null;try {createTestFile(file,CharsetNames.US_ASCII,false,true);zf=new ZipFile(file,CharsetNames.US_ASCII,true);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);tryHardToDelete(file);}}
@Test public void testRawNameReadFromZipFile()throws IOException {final File archive=getFile("utf8-7zip-test.zip");ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertRawNameOfAcsiiTxt(zf.getEntry(ASCII_TXT));}finally {ZipFile.closeQuietly(zf);}}
@Test public void testRawNameReadFromStream()throws IOException {final FileInputStream archive=new FileInputStream(getFile("utf8-7zip-test.zip"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,CP437,false);assertRawNameOfAcsiiTxt((ZipArchiveEntry)zi.getNextEntry());}finally {if (zi != null){zi.close();}}}
@Test public void testUtf8Interoperability()throws IOException {final File file1=getFile("utf8-7zip-test.zip");final File file2=getFile("utf8-winzip-test.zip");testFile(file1,CP437);testFile(file2,CP437);}
@Test public void oldBinMagic2ByteArrayNotSwapped(){assertArrayEquals(new byte[]{(byte)0xc7,0x71},CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,2,false));}
@Test public void oldBinMagic2ByteArraySwapped(){assertArrayEquals(new byte[]{0x71,(byte)0xc7},CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,2,true));}
@Test public void oldBinMagicFromByteArrayNotSwapped(){assertEquals(CpioConstants.MAGIC_OLD_BINARY,CpioUtil.byteArray2long(new byte[]{(byte)0xc7,0x71},false));}
@Test public void oldBinMagicFromByteArraySwapped(){assertEquals(CpioConstants.MAGIC_OLD_BINARY,CpioUtil.byteArray2long(new byte[]{0x71,(byte)0xc7},true));}
@Test public void testTarArchiveCreation()throws Exception {final File output=new File(dir,"bla.tar");final File file1=getFile("test1.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("tar",out);final TarArchiveEntry entry=new TarArchiveEntry("testdata/test1.xml");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.close();}
@Test public void testTarArchiveLongNameCreation()throws Exception {final String name="testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml";final byte[]bytes=name.getBytes(CharsetNames.UTF_8);assertEquals(bytes.length,99);final File output=new File(dir,"bla.tar");final File file1=getFile("test1.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("tar",out);final TarArchiveEntry entry=new TarArchiveEntry(name);entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);os.putArchiveEntry(entry);final FileInputStream in=new FileInputStream(file1);IOUtils.copy(in,os);os.closeArchiveEntry();os.close();out.close();in.close();ArchiveOutputStream os2=null;try {final String toLongName="testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml";final File output2=new File(dir,"bla.tar");final OutputStream out2=new FileOutputStream(output2);os2=new ArchiveStreamFactory().createArchiveOutputStream("tar",out2);final TarArchiveEntry entry2=new TarArchiveEntry(toLongName);entry2.setModTime(0);entry2.setSize(file1.length());entry2.setUserId(0);entry2.setGroupId(0);entry2.setUserName("avalon");entry2.setGroupName("excalibur");entry2.setMode(0100000);os2.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os2);os2.closeArchiveEntry();}catch(final IOException e){assertTrue(true);}finally {if (os2 != null){os2.close();}}}
@Test public void testTarUnarchive()throws Exception {final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("tar",is);final TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);in.close();out.close();}
@Test public void testCOMPRESS114()throws Exception {final File input=getFile("COMPRESS-114.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new TarArchiveInputStream(is,CharsetNames.ISO_8859_1);TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();assertEquals("3\u00b1\u00b1\u00b1F06\u00b1W2345\u00b1ZB\u00b1la\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1BLA",entry.getName());entry=(TarArchiveEntry)in.getNextEntry();assertEquals("0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W2345\u00b1ZB\u00b1la\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1BLA",entry.getName());in.close();}
@Test public void testDirectoryEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));final long beforeArchiveWrite=tmp[0].lastModified();final TarArchiveEntry in=new TarArchiveEntry(tmp[0],"foo");tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));final TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitDirectoryEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));final long beforeArchiveWrite=tmp[0].lastModified();final TarArchiveEntry in=new TarArchiveEntry("foo/");in.setModTime(beforeArchiveWrite);tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));final TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testFileEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));final TarArchiveEntry in=new TarArchiveEntry(tmp[1],"foo");tos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));final TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitFileEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));final TarArchiveEntry in=new TarArchiveEntry("foo");in.setModTime(tmp[1].lastModified());in.setSize(tmp[1].length());tos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));final TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testCOMPRESS178()throws Exception {final File input=getFile("COMPRESS-178.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("tar",is);try {in.getNextEntry();fail("Expected IOException");}catch(final IOException e){final Throwable t=e.getCause();assertTrue("Expected cause = IllegalArgumentException",t instanceof IllegalArgumentException);}in.close();}
@Test public void testZUnarchive()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){@Override public CompressorInputStream wrap(final InputStream is)throws IOException {return new ZCompressorInputStream(is);}});}
@Test public void testZUnarchiveViaFactory()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){@Override public CompressorInputStream wrap(final InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(CompressorStreamFactory.Z,is);}});}
@Test public void testZUnarchiveViaAutoDetection()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){@Override public CompressorInputStream wrap(final InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(new BufferedInputStream(is));}});}
@Test public void testMatches()throws Exception {assertFalse(ZCompressorInputStream.matches(new byte[]{1,2,3,4},4));assertFalse(ZCompressorInputStream.matches(new byte[]{0x1f,2,3,4},4));assertFalse(ZCompressorInputStream.matches(new byte[]{1,(byte)0x9d,3,4},4));assertFalse(ZCompressorInputStream.matches(new byte[]{0x1f,(byte)0x9d,3,4},3));assertTrue(ZCompressorInputStream.matches(new byte[]{0x1f,(byte)0x9d,3,4},4));}
@Test public void testCompareBA(){final byte[]buffer1={1,2,3};final byte[]buffer2={1,2,3,0};final byte[]buffer3={1,2,3};assertTrue(ArchiveUtils.isEqual(buffer1,buffer2,true));assertFalse(ArchiveUtils.isEqual(buffer1,buffer2,false));assertFalse(ArchiveUtils.isEqual(buffer1,buffer2));assertTrue(ArchiveUtils.isEqual(buffer2,buffer1,true));assertFalse(ArchiveUtils.isEqual(buffer2,buffer1,false));assertFalse(ArchiveUtils.isEqual(buffer2,buffer1));assertTrue(ArchiveUtils.isEqual(buffer1,buffer3));assertTrue(ArchiveUtils.isEqual(buffer3,buffer1));}
@Test public void testCompareAscii(){final byte[]buffer1={'a','b','c'};final byte[]buffer2={'d','e','f',0};assertTrue(ArchiveUtils.matchAsciiBuffer("abc",buffer1));assertFalse(ArchiveUtils.matchAsciiBuffer("abc\0",buffer1));assertTrue(ArchiveUtils.matchAsciiBuffer("def\0",buffer2));assertFalse(ArchiveUtils.matchAsciiBuffer("def",buffer2));}
@Test public void testAsciiConversions(){asciiToByteAndBackOK("");asciiToByteAndBackOK("abcd");asciiToByteAndBackFail("\u8025");}
@Test public void testDefaults(){assertFalse(new GeneralPurposeBit().usesDataDescriptor());assertFalse(new GeneralPurposeBit().usesUTF8ForNames());assertFalse(new GeneralPurposeBit().usesEncryption());assertFalse(new GeneralPurposeBit().usesStrongEncryption());final byte[]b=new byte[2];assertTrue(Arrays.equals(b,new GeneralPurposeBit().encode()));}
@Test public void testParseEdgeCases(){assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesDataDescriptor());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesUTF8ForNames());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesEncryption());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesStrongEncryption());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesDataDescriptor());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesUTF8ForNames());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesEncryption());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesStrongEncryption());}
@Test public void testDataDescriptor(){final byte[]flags=new byte[]{(byte)8,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesDataDescriptor());final GeneralPurposeBit b=new GeneralPurposeBit();b.useDataDescriptor(true);assertTrue(Arrays.equals(flags,b.encode()));}
@Test public void testLanguageEncodingFlag(){final byte[]flags=new byte[]{(byte)0,(byte)8};assertTrue(GeneralPurposeBit.parse(flags,0).usesUTF8ForNames());final GeneralPurposeBit b=new GeneralPurposeBit();b.useUTF8ForNames(true);assertTrue(Arrays.equals(flags,b.encode()));}
@Test public void testEncryption(){final byte[]flags=new byte[]{(byte)1,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesEncryption());final GeneralPurposeBit b=new GeneralPurposeBit();b.useEncryption(true);assertTrue(Arrays.equals(flags,b.encode()));}
@Test public void testStrongEncryption(){byte[]flags=new byte[]{(byte)65,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesStrongEncryption());final GeneralPurposeBit b=new GeneralPurposeBit();b.useStrongEncryption(true);assertTrue(b.usesEncryption());assertTrue(Arrays.equals(flags,b.encode()));flags=new byte[]{(byte)64,(byte)0};assertFalse(GeneralPurposeBit.parse(flags,0).usesStrongEncryption());}
@Test public void testClone(){final GeneralPurposeBit b=new GeneralPurposeBit();b.useStrongEncryption(true);b.useUTF8ForNames(true);assertEquals(b,b.clone());assertNotSame(b,b.clone());}
@Test public void testRandomlySkippingEntries()throws Exception {final Map<String,byte[]> entriesByName=new HashMap<String,byte[]>();SevenZFile archive=new SevenZFile(getFile("COMPRESS-320/Copy.7z"));SevenZArchiveEntry entry;while ((entry=archive.getNextEntry())!= null){if (entry.hasStream()){entriesByName.put(entry.getName(),readFully(archive));}}archive.close();final String[]variants={"BZip2-solid.7z","BZip2.7z","Copy-solid.7z","Copy.7z","Deflate-solid.7z","Deflate.7z","LZMA-solid.7z","LZMA.7z","LZMA2-solid.7z","LZMA2.7z"};final Random rnd=new Random(0xdeadbeef);for(final String fileName : variants){archive=new SevenZFile(getFile("COMPRESS-320/" + fileName));while ((entry=archive.getNextEntry())!= null){if (rnd.nextBoolean()){continue;}if (entry.hasStream()){assertTrue(entriesByName.containsKey(entry.getName()));final byte[]content=readFully(archive);assertTrue("Content mismatch on: " + fileName + "!"+ entry.getName(),Arrays.equals(content,entriesByName.get(entry.getName())));}}archive.close();}}
@Test public void testAllEmptyFilesArchive()throws Exception {final SevenZFile archive=new SevenZFile(getFile("7z-empty-mhc-off.7z"));try {assertNotNull(archive.getNextEntry());}finally {archive.close();}}
@Test public void testHelloWorldHeaderCompressionOffCopy()throws Exception {checkHelloWorld("7z-hello-mhc-off-copy.7z");}
@Test public void testHelloWorldHeaderCompressionOffLZMA2()throws Exception {checkHelloWorld("7z-hello-mhc-off-lzma2.7z");}
@Test public void test7zUnarchive()throws Exception {test7zUnarchive(getFile("bla.7z"),SevenZMethod.LZMA);}
@Test public void test7zDeflateUnarchive()throws Exception {test7zUnarchive(getFile("bla.deflate.7z"),SevenZMethod.DEFLATE);}
@Test public void test7zDecryptUnarchive()throws Exception {if (isStrongCryptoAvailable()){test7zUnarchive(getFile("bla.encrypted.7z"),SevenZMethod.LZMA,"foo".getBytes("UTF-16LE"));}}
@Test public void testEncryptedArchiveRequiresPassword()throws Exception {try {new SevenZFile(getFile("bla.encrypted.7z"));fail("shouldn't decrypt without a password");}catch(final PasswordRequiredException ex){final String msg=ex.getMessage();assertTrue("Should start with whining about being unable to decrypt",msg.startsWith("Cannot read encrypted content from "));assertTrue("Should finish the sentence properly",msg.endsWith(" without a password."));assertTrue("Should contain archive's name",msg.contains("bla.encrypted.7z"));}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-256"*/@Test public void testCompressedHeaderWithNonDefaultDictionarySize()throws Exception {final SevenZFile sevenZFile=new SevenZFile(getFile("COMPRESS-256.7z"));try {int count=0;while (sevenZFile.getNextEntry()!= null){count++;}assertEquals(446,count);}finally {sevenZFile.close();}}
@Test public void testSignatureCheck(){assertTrue(SevenZFile.matches(SevenZFile.sevenZSignature,SevenZFile.sevenZSignature.length));assertTrue(SevenZFile.matches(SevenZFile.sevenZSignature,SevenZFile.sevenZSignature.length + 1));assertFalse(SevenZFile.matches(SevenZFile.sevenZSignature,SevenZFile.sevenZSignature.length - 1));assertFalse(SevenZFile.matches(new byte[]{1,2,3,4,5,6},6));assertTrue(SevenZFile.matches(new byte[]{'7','z',(byte)0xBC,(byte)0xAF,0x27,0x1C},6));assertFalse(SevenZFile.matches(new byte[]{'7','z',(byte)0xBC,(byte)0xAF,0x27,0x1D},6));}
@Test public void testReadingBackLZMA2DictSize()throws Exception {final File output=new File(dir,"lzma2-dictsize.7z");final SevenZOutputFile outArchive=new SevenZOutputFile(output);try {outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2,1 << 20)));final SevenZArchiveEntry entry=new SevenZArchiveEntry();entry.setName("foo.txt");outArchive.putArchiveEntry(entry);outArchive.write(new byte[]{'A'});outArchive.closeArchiveEntry();}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {final SevenZArchiveEntry entry=archive.getNextEntry();final SevenZMethodConfiguration m=entry.getContentMethods().iterator().next();assertEquals(SevenZMethod.LZMA2,m.getMethod());assertEquals(1 << 20,m.getOptions());}finally {archive.close();}}
@Test public void testReadingBackDeltaDistance()throws Exception {final File output=new File(dir,"delta-distance.7z");final SevenZOutputFile outArchive=new SevenZOutputFile(output);try {outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER,32),new SevenZMethodConfiguration(SevenZMethod.LZMA2)));final SevenZArchiveEntry entry=new SevenZArchiveEntry();entry.setName("foo.txt");outArchive.putArchiveEntry(entry);outArchive.write(new byte[]{'A'});outArchive.closeArchiveEntry();}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {final SevenZArchiveEntry entry=archive.getNextEntry();final SevenZMethodConfiguration m=entry.getContentMethods().iterator().next();assertEquals(SevenZMethod.DELTA_FILTER,m.getMethod());assertEquals(32,m.getOptions());}finally {archive.close();}}
@Test public void getEntriesOfUnarchiveTest()throws IOException {final SevenZFile sevenZFile=new SevenZFile(getFile("bla.7z"));try {final Iterable<SevenZArchiveEntry> entries=sevenZFile.getEntries();final Iterator<SevenZArchiveEntry> iter=entries.iterator();SevenZArchiveEntry entry=iter.next();assertEquals("test1.xml",entry.getName());entry=iter.next();assertEquals("test2.xml",entry.getName());assertFalse(iter.hasNext());}finally {sevenZFile.close();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-348"*/@Test public void readEntriesOfSize0()throws IOException {final SevenZFile sevenZFile=new SevenZFile(getFile("COMPRESS-348.7z"));try {int entries=0;SevenZArchiveEntry entry=sevenZFile.getNextEntry();while (entry != null){entries++;int b=sevenZFile.read();if ("2.txt".equals(entry.getName())|| "5.txt".equals(entry.getName())){assertEquals(-1,b);}else {assertNotEquals(-1,b);}entry=sevenZFile.getNextEntry();}assertEquals(5,entries);}finally {sevenZFile.close();}}
/** * Archives 2 files and unarchives it again. If the file length of result and source is the same,it looks like the operations have worked* @throws Exception*/@Test public void testZipArchiveCreation()throws Exception {final File output=new File(dir,"bla.zip");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);ArchiveOutputStream os=null;try {os=new ArchiveStreamFactory().createArchiveOutputStream("zip",out);os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();}finally {if (os != null){os.close();}}out.close();final List<File> results=new ArrayList<File>();final InputStream is=new FileInputStream(output);ArchiveInputStream in=null;try {in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){final File outfile=new File(resultDir.getCanonicalPath()+ "/result/" + entry.getName());outfile.getParentFile().mkdirs();final OutputStream o=new FileOutputStream(outfile);try {IOUtils.copy(in,o);}finally {o.close();}results.add(outfile);}}finally {if (in != null){in.close();}}is.close();assertEquals(results.size(),2);File result=results.get(0);assertEquals(file1.length(),result.length());result=results.get(1);assertEquals(file2.length(),result.length());}
/** * Simple unarchive test. Asserts nothing.* @throws Exception*/@Test public void testZipUnarchive()throws Exception {final File input=getFile("bla.zip");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);final ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);out.close();in.close();}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-208" >COMPRESS-208</a>.*/@Test public void testSkipsPK00Prefix()throws Exception {final File input=getFile("COMPRESS-208.zip");final InputStream is=new FileInputStream(input);final ArrayList<String> al=new ArrayList<String>();al.add("test1.xml");al.add("test2.xml");try {checkArchiveContent(new ZipArchiveInputStream(is),al);}finally {is.close();}}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-93" >COMPRESS-93</a>.*/@Test public void testSupportedCompressionMethod()throws IOException {final ZipFile moby=new ZipFile(getFile("moby.zip"));final ZipArchiveEntry entry=moby.getEntry("README");assertEquals("method",ZipMethod.TOKENIZATION.getCode(),entry.getMethod());assertFalse(moby.canReadEntryData(entry));moby.close();}
/** * Test case for being able to skip an entry in an  {@link ZipArchiveInputStream}even if the compression method of thatentry is unsupported.* @see <a href="https://issues.apache.org/jira/browse/COMPRESS-93"*        >COMPRESS-93</a>*/@Test public void testSkipEntryWithUnsupportedCompressionMethod()throws IOException {final ZipArchiveInputStream zip=new ZipArchiveInputStream(new FileInputStream(getFile("moby.zip")));try {final ZipArchiveEntry entry=zip.getNextZipEntry();assertEquals("method",ZipMethod.TOKENIZATION.getCode(),entry.getMethod());assertEquals("README",entry.getName());assertFalse(zip.canReadEntryData(entry));try {assertNull(zip.getNextZipEntry());}catch(final IOException e){e.printStackTrace();fail("COMPRESS-93: Unable to skip an unsupported zip entry");}}finally {zip.close();}}
/** * Checks if all entries from a nested archive can be read. The archive: OSX_ArchiveWithNestedArchive.zip contains: NestedArchiv.zip and test.xml3. The nested archive:  NestedArchive.zip contains test1.xml and test2.xml* @throws Exception*/@Test public void testListAllFilesWithNestedArchive()throws Exception {final File input=getFile("OSX_ArchiveWithNestedArchive.zip");final List<String> results=new ArrayList<String>();final InputStream is=new FileInputStream(input);ArchiveInputStream in=null;try {in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){results.add(entry.getName());final ArchiveInputStream nestedIn=new ArchiveStreamFactory().createArchiveInputStream("zip",in);ZipArchiveEntry nestedEntry=null;while ((nestedEntry=(ZipArchiveEntry)nestedIn.getNextEntry())!= null){results.add(nestedEntry.getName());}}}finally {if (in != null){in.close();}}is.close();results.contains("NestedArchiv.zip");results.contains("test1.xml");results.contains("test2.xml");results.contains("test3.xml");}
@Test public void testDirectoryEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);final long beforeArchiveWrite=tmp[0].lastModified();final ZipArchiveEntry in=new ZipArchiveEntry(tmp[0],"foo");zos.putArchiveEntry(in);zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);final ZipArchiveEntry out=zf.getEntry("foo/");assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 2000,out.getLastModifiedDate().getTime()/ 2000);assertTrue(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitDirectoryEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);final long beforeArchiveWrite=tmp[0].lastModified();final ZipArchiveEntry in=new ZipArchiveEntry("foo/");in.setTime(beforeArchiveWrite);zos.putArchiveEntry(in);zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);final ZipArchiveEntry out=zf.getEntry("foo/");assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 2000,out.getLastModifiedDate().getTime()/ 2000);assertTrue(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Override public boolean test(final ZipArchiveEntry zipArchiveEntry){return true;}
@Test public void testCopyRawEntriesFromFile()throws IOException {final File[]tmp=createTempDirAndFile();final File reference=createReferenceFile(tmp[0],Zip64Mode.Never,"expected.");final File a1=File.createTempFile("src1.",".zip",tmp[0]);final ZipArchiveOutputStream zos=new ZipArchiveOutputStream(a1);zos.setUseZip64(Zip64Mode.Never);createFirstEntry(zos).close();final File a2=File.createTempFile("src2.",".zip",tmp[0]);final ZipArchiveOutputStream zos1=new ZipArchiveOutputStream(a2);zos1.setUseZip64(Zip64Mode.Never);createSecondEntry(zos1).close();final ZipFile zf1=new ZipFile(a1);final ZipFile zf2=new ZipFile(a2);final File fileResult=File.createTempFile("file-actual.",".zip",tmp[0]);final ZipArchiveOutputStream zos2=new ZipArchiveOutputStream(fileResult);zf1.copyRawEntries(zos2,allFilesPredicate);zf2.copyRawEntries(zos2,allFilesPredicate);zos2.close();assertSameFileContents(reference,fileResult);zf1.close();zf2.close();}
@Test public void testCopyRawZip64EntryFromFile()throws IOException {final File[]tmp=createTempDirAndFile();final File reference=File.createTempFile("z64reference.",".zip",tmp[0]);final ZipArchiveOutputStream zos1=new ZipArchiveOutputStream(reference);zos1.setUseZip64(Zip64Mode.Always);createFirstEntry(zos1);zos1.close();final File a1=File.createTempFile("zip64src.",".zip",tmp[0]);final ZipArchiveOutputStream zos=new ZipArchiveOutputStream(a1);zos.setUseZip64(Zip64Mode.Always);createFirstEntry(zos).close();final ZipFile zf1=new ZipFile(a1);final File fileResult=File.createTempFile("file-actual.",".zip",tmp[0]);final ZipArchiveOutputStream zos2=new ZipArchiveOutputStream(fileResult);zos2.setUseZip64(Zip64Mode.Always);zf1.copyRawEntries(zos2,allFilesPredicate);zos2.close();assertSameFileContents(reference,fileResult);zf1.close();}
@Test public void testUnixModeInAddRaw()throws IOException {final File[]tmp=createTempDirAndFile();final File a1=File.createTempFile("unixModeBits.",".zip",tmp[0]);final ZipArchiveOutputStream zos=new ZipArchiveOutputStream(a1);final ZipArchiveEntry archiveEntry=new ZipArchiveEntry("fred");archiveEntry.setUnixMode(0664);archiveEntry.setMethod(ZipEntry.DEFLATED);zos.addRawArchiveEntry(archiveEntry,new ByteArrayInputStream("fud".getBytes()));zos.close();final ZipFile zf1=new ZipFile(a1);final ZipArchiveEntry fred=zf1.getEntry("fred");assertEquals(0664,fred.getUnixMode());zf1.close();}
@Test public void testFileEntryFromFile()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);final ZipArchiveEntry in=new ZipArchiveEntry(tmp[1],"foo");zos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){zos.write(b);}fis.close();fis=null;zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);final ZipArchiveEntry out=zf.getEntry("foo");assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 2000,out.getLastModifiedDate().getTime()/ 2000);assertFalse(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void testExplicitFileEntry()throws Exception {final File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);final ZipArchiveEntry in=new ZipArchiveEntry("foo");in.setTime(tmp[1].lastModified());in.setSize(tmp[1].length());zos.putArchiveEntry(in);final byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){zos.write(b);}fis.close();fis=null;zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);final ZipArchiveEntry out=zf.getEntry("foo");assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 2000,out.getLastModifiedDate().getTime()/ 2000);assertFalse(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void convert64(){assertEquals(0xABCDEF0123456780L,DumpArchiveUtil.convert64(new byte[]{(byte)0x80,0x67,0x45,0x23,1,(byte)0xEF,(byte)0xCD,(byte)0xAB},0));}
@Test public void convert32(){assertEquals(0xABCDEF01,DumpArchiveUtil.convert32(new byte[]{1,(byte)0xEF,(byte)0xCD,(byte)0xAB},0));}
@Test public void convert16(){assertEquals(0xABCD,DumpArchiveUtil.convert16(new byte[]{(byte)0xCD,(byte)0xAB},0));}
@Test public void testEndDeflaterOnCloseStream()throws Exception {final Deflater deflater=PowerMockito.spy(new Deflater());PowerMockito.whenNew(Deflater.class).withAnyArguments().thenReturn(deflater);final OutputStream outputStream=deflateDecoder.encode(new ByteArrayOutputStream(),9);outputStream.close();Mockito.verify(deflater).end();}
@Test public void testEndInflaterOnCloseStream()throws Exception {final Inflater inflater=PowerMockito.spy(new Inflater());PowerMockito.whenNew(Inflater.class).withAnyArguments().thenReturn(inflater);final InputStream inputStream=deflateDecoder.decode("dummy",new ByteArrayInputStream(new byte[0]),0,null,null);inputStream.close();Mockito.verify(inflater).end();}
@Test public void testWriteCDOnlySizes(){final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE);assertEquals(new ZipShort(16),f.getCentralDirectoryLength());final byte[]b=f.getCentralDirectoryData();assertEquals(16,b.length);checkSizes(b);}
@Test public void testWriteCDSizeAndOffset(){final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,OFF,null);assertEquals(new ZipShort(24),f.getCentralDirectoryLength());final byte[]b=f.getCentralDirectoryData();assertEquals(24,b.length);checkSizes(b);checkOffset(b,16);}
@Test public void testWriteCDSizeOffsetAndDisk(){final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,OFF,DISK);assertEquals(new ZipShort(28),f.getCentralDirectoryLength());final byte[]b=f.getCentralDirectoryData();assertEquals(28,b.length);checkSizes(b);checkOffset(b,16);checkDisk(b,24);}
@Test public void testWriteCDSizeAndDisk(){final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,null,DISK);assertEquals(new ZipShort(20),f.getCentralDirectoryLength());final byte[]b=f.getCentralDirectoryData();assertEquals(20,b.length);checkSizes(b);checkDisk(b,16);}
@Test public void testReadLFHSizesOnly()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[16];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
@Test public void testReadLFHSizesAndOffset()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[24];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
@Test public void testReadLFHSizesOffsetAndDisk()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[28];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);System.arraycopy(DISK.getBytes(),0,b,24,4);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
@Test public void testReadLFHSizesAndDisk()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[20];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(DISK.getBytes(),0,b,16,4);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
@Test public void testReadCDSizesOffsetAndDisk()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[28];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);System.arraycopy(DISK.getBytes(),0,b,24,4);f.parseFromCentralDirectoryData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
@Test public void testReadCDSizesAndOffset()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[24];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);f.parseFromCentralDirectoryData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
@Test public void testReadCDSomethingAndDisk()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[12];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(DISK.getBytes(),0,b,8,4);f.parseFromCentralDirectoryData(b,0,b.length);assertNull(f.getSize());assertNull(f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
@Test public void testReparseCDSingleEightByteData()throws ZipException {final Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();final byte[]b=new byte[8];System.arraycopy(SIZE.getBytes(),0,b,0,8);f.parseFromCentralDirectoryData(b,0,b.length);f.reparseCentralDirectoryData(true,false,false,false);assertEquals(SIZE,f.getSize());assertNull(f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());f.setSize(null);f.reparseCentralDirectoryData(false,true,false,false);assertNull(f.getSize());assertEquals(SIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());f.setCompressedSize(null);f.reparseCentralDirectoryData(false,false,true,false);assertNull(f.getSize());assertNull(f.getCompressedSize());assertEquals(SIZE,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
@Test public void testIsCompressedFilename(){assertFalse(LZMAUtils.isCompressedFilename(""));assertFalse(LZMAUtils.isCompressedFilename(".lzma"));assertTrue(LZMAUtils.isCompressedFilename("x.lzma"));assertTrue(LZMAUtils.isCompressedFilename("x-lzma"));assertFalse(LZMAUtils.isCompressedFilename("xxgz"));assertFalse(LZMAUtils.isCompressedFilename("lzmaz"));assertFalse(LZMAUtils.isCompressedFilename("xaz"));assertFalse(LZMAUtils.isCompressedFilename("x.lzma "));assertFalse(LZMAUtils.isCompressedFilename("x.lzma\n"));assertFalse(LZMAUtils.isCompressedFilename("x.lzma.y"));}
@Test public void testGetUncompressedFilename(){assertEquals("",LZMAUtils.getUncompressedFilename(""));assertEquals(".lzma",LZMAUtils.getUncompressedFilename(".lzma"));assertEquals("x",LZMAUtils.getUncompressedFilename("x.lzma"));assertEquals("x",LZMAUtils.getUncompressedFilename("x-lzma"));assertEquals("x.lzma ",LZMAUtils.getUncompressedFilename("x.lzma "));assertEquals("x.lzma\n",LZMAUtils.getUncompressedFilename("x.lzma\n"));assertEquals("x.lzma.y",LZMAUtils.getUncompressedFilename("x.lzma.y"));}
@Test public void testGetCompressedFilename(){assertEquals(".lzma",LZMAUtils.getCompressedFilename(""));assertEquals("x.lzma",LZMAUtils.getCompressedFilename("x"));assertEquals("x.wmf .lzma",LZMAUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.lzma",LZMAUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.lzma",LZMAUtils.getCompressedFilename("x.wmf.y"));}
@Test public void testMatches(){final byte[]data={(byte)0x5D,0,0};assertFalse(LZMAUtils.matches(data,2));assertTrue(LZMAUtils.matches(data,3));assertTrue(LZMAUtils.matches(data,4));data[2]='0';assertFalse(LZMAUtils.matches(data,3));}
@Test public void testCachingIsEnabledByDefaultAndLZMAIsPresent(){assertEquals(LZMAUtils.CachedAvailability.CACHED_AVAILABLE,LZMAUtils.getCachedLZMAAvailability());assertTrue(LZMAUtils.isLZMACompressionAvailable());}
@Test public void testCanTurnOffCaching(){try {LZMAUtils.setCacheLZMAAvailablity(false);assertEquals(LZMAUtils.CachedAvailability.DONT_CACHE,LZMAUtils.getCachedLZMAAvailability());assertTrue(LZMAUtils.isLZMACompressionAvailable());}finally {LZMAUtils.setCacheLZMAAvailablity(true);}}
@Test public void testTurningOnCachingReEvaluatesAvailability(){try {LZMAUtils.setCacheLZMAAvailablity(false);assertEquals(LZMAUtils.CachedAvailability.DONT_CACHE,LZMAUtils.getCachedLZMAAvailability());LZMAUtils.setCacheLZMAAvailablity(true);assertEquals(LZMAUtils.CachedAvailability.CACHED_AVAILABLE,LZMAUtils.getCachedLZMAAvailability());}finally {LZMAUtils.setCacheLZMAAvailablity(true);}}
@Test public void testEmptyStream()throws Exception {final BitStream stream=new BitStream(new ByteArrayInputStream(new byte[0]));assertEquals("next bit",-1,stream.nextBit());assertEquals("next bit",-1,stream.nextBit());assertEquals("next bit",-1,stream.nextBit());stream.close();}
@Test public void testStream()throws Exception {final BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0xEA,0x03}));assertEquals("bit 0",0,stream.nextBit());assertEquals("bit 1",1,stream.nextBit());assertEquals("bit 2",0,stream.nextBit());assertEquals("bit 3",1,stream.nextBit());assertEquals("bit 4",0,stream.nextBit());assertEquals("bit 5",1,stream.nextBit());assertEquals("bit 6",1,stream.nextBit());assertEquals("bit 7",1,stream.nextBit());assertEquals("bit 8",1,stream.nextBit());assertEquals("bit 9",1,stream.nextBit());assertEquals("bit 10",0,stream.nextBit());assertEquals("bit 11",0,stream.nextBit());assertEquals("bit 12",0,stream.nextBit());assertEquals("bit 13",0,stream.nextBit());assertEquals("bit 14",0,stream.nextBit());assertEquals("bit 15",0,stream.nextBit());assertEquals("next bit",-1,stream.nextBit());stream.close();}
@Test public void testNextByteFromEmptyStream()throws Exception {final BitStream stream=new BitStream(new ByteArrayInputStream(new byte[0]));assertEquals("next byte",-1,stream.nextByte());assertEquals("next byte",-1,stream.nextByte());stream.close();}
@Test public void testReadAlignedBytes()throws Exception {final BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0xEA,0x35}));assertEquals("next byte",0xEA,stream.nextByte());assertEquals("next byte",0x35,stream.nextByte());assertEquals("next byte",-1,stream.nextByte());stream.close();}
@Test public void testNextByte()throws Exception {final BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0xEA,0x35}));assertEquals("bit 0",0,stream.nextBit());assertEquals("bit 1",1,stream.nextBit());assertEquals("bit 2",0,stream.nextBit());assertEquals("bit 3",1,stream.nextBit());assertEquals("next byte",0x5E,stream.nextByte());assertEquals("next byte",-1,stream.nextByte());stream.close();}
@Test public void testToCharset(){Assert.assertEquals(Charset.defaultCharset(),Charsets.toCharset((String)null));Assert.assertEquals(Charset.defaultCharset(),Charsets.toCharset((Charset)null));Assert.assertEquals(Charset.defaultCharset(),Charsets.toCharset(Charset.defaultCharset()));Assert.assertEquals(Charset.forName("UTF-8"),Charsets.toCharset(Charset.forName("UTF-8")));}
@Test public void testIso8859_1(){Assert.assertEquals("ISO-8859-1",Charsets.ISO_8859_1.name());}
@Test public void testUsAscii(){Assert.assertEquals("US-ASCII",Charsets.US_ASCII.name());}
@Test public void testUtf16(){Assert.assertEquals("UTF-16",Charsets.UTF_16.name());}
@Test public void testUtf16Be(){Assert.assertEquals("UTF-16BE",Charsets.UTF_16BE.name());}
@Test public void testUtf16Le(){Assert.assertEquals("UTF-16LE",Charsets.UTF_16LE.name());}
@Test public void testUtf8(){Assert.assertEquals("UTF-8",Charsets.UTF_8.name());}
@Test public void testDetectionNotArchive()throws IOException {try {getStreamFor("test.txt");fail("Expected ArchiveException");}catch(final ArchiveException e){}}
@Test public void testCOMPRESS117()throws Exception {final ArchiveInputStream tar=getStreamFor("COMPRESS-117.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);}
@Test public void testCOMPRESS335()throws Exception {final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);}
@Test public void testDetection()throws Exception {final ArchiveInputStream ar=getStreamFor("bla.ar");assertNotNull(ar);assertTrue(ar instanceof ArArchiveInputStream);final ArchiveInputStream tar=getStreamFor("bla.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);final ArchiveInputStream zip=getStreamFor("bla.zip");assertNotNull(zip);assertTrue(zip instanceof ZipArchiveInputStream);final ArchiveInputStream jar=getStreamFor("bla.jar");assertNotNull(jar);assertTrue(jar instanceof ZipArchiveInputStream);final ArchiveInputStream cpio=getStreamFor("bla.cpio");assertNotNull(cpio);assertTrue(cpio instanceof CpioArchiveInputStream);final ArchiveInputStream arj=getStreamFor("bla.arj");assertNotNull(arj);assertTrue(arj instanceof ArjArchiveInputStream);}
@Test public void testEmptyCpioArchive()throws Exception {checkEmptyArchive("cpio");}
@Test public void testEmptyJarArchive()throws Exception {checkEmptyArchive("jar");}
@Test public void testEmptyZipArchive()throws Exception {checkEmptyArchive("zip");}
@Test public void testNotADumpArchive()throws Exception {final FileInputStream is=new FileInputStream(getFile("bla.zip"));try {new DumpArchiveInputStream(is);fail("expected an exception");}catch(final ArchiveException ex){assertTrue(ex.getCause()instanceof ShortFileException);}finally {is.close();}}
@Test public void testNotADumpArchiveButBigEnough()throws Exception {final FileInputStream is=new FileInputStream(getFile("zip64support.tar.bz2"));try {new DumpArchiveInputStream(is);fail("expected an exception");}catch(final ArchiveException ex){assertTrue(ex.getCause()instanceof UnrecognizedFormatException);}finally {is.close();}}
@Test public void testConsumesArchiveCompletely()throws Exception {final InputStream is=DumpArchiveInputStreamTest.class.getResourceAsStream("/archive_with_trailer.dump");final DumpArchiveInputStream dump=new DumpArchiveInputStream(is);while (dump.getNextDumpEntry()!= null){}final byte[]expected=new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'};final byte[]actual=new byte[expected.length];is.read(actual);assertArrayEquals(expected,actual);dump.close();}
/** * test parser.*/@Test public void testParse()throws Exception {final ZipExtraField[]ze=ExtraFieldUtils.parse(data);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());final byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);try {ExtraFieldUtils.parse(data2);fail("data should be invalid");}catch(final Exception e){assertEquals("message","bad extra field starting at " + (4 + aLocal.length)+ ".  Block length of 1 bytes exceeds remaining data of 0 bytes.",e.getMessage());}}
@Test public void testParseWithRead()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());final byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);ze=ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnparseableExtraFieldData);assertEquals("data length field 2",4,ze[1].getLocalFileDataLength().getValue());for (int i=0;i < 4;i++){assertEquals("byte number " + i,data2[data.length - 5 + i],ze[1].getLocalFileDataData()[i]);}}
@Test public void testParseWithSkip()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());final byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);ze=ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP);assertEquals("number of fields",1,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());}
/** * Test merge methods*/@Test public void testMerge(){final byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,dummy});assertEquals("local length",data.length,local.length);for (int i=0;i < local.length;i++){assertEquals("local byte " + i,data[i],local[i]);}final byte[]dummyCentral=dummy.getCentralDirectoryData();final byte[]data2=new byte[4 + aLocal.length + 4+ dummyCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dummy.getCentralDirectoryLength().getBytes(),0,data2,4 + aLocal.length + 2,2);System.arraycopy(dummyCentral,0,data2,4 + aLocal.length + 4,dummyCentral.length);final byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,dummy});assertEquals("central length",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals("central byte " + i,data2[i],central[i]);}}
@Test public void testMergeWithUnparseableData()throws Exception {final ZipExtraField d=new UnparseableExtraFieldData();final byte[]b=UNRECOGNIZED_HEADER.getBytes();d.parseFromLocalFileData(new byte[]{b[0],b[1],1,0},0,4);final byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,d});assertEquals("local length",data.length - 1,local.length);for (int i=0;i < local.length;i++){assertEquals("local byte " + i,data[i],local[i]);}final byte[]dCentral=d.getCentralDirectoryData();final byte[]data2=new byte[4 + aLocal.length + dCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dCentral,0,data2,4 + aLocal.length,dCentral.length);final byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,d});assertEquals("central length",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals("central byte " + i,data2[i],central[i]);}}
@Test public void testOldGNU()throws Throwable {final File file=getFile("oldgnu_sparse.tar");TarArchiveInputStream tin=null;try {tin=new TarArchiveInputStream(new FileInputStream(file));final TarArchiveEntry ae=tin.getNextTarEntry();assertEquals("sparsefile",ae.getName());assertTrue(ae.isOldGNUSparse());assertTrue(ae.isGNUSparse());assertFalse(ae.isPaxGNUSparse());assertFalse(tin.canReadEntryData(ae));}finally {if (tin != null){tin.close();}}}
@Test public void testPaxGNU()throws Throwable {final File file=getFile("pax_gnu_sparse.tar");TarArchiveInputStream tin=null;try {tin=new TarArchiveInputStream(new FileInputStream(file));assertPaxGNUEntry(tin,"0.0");assertPaxGNUEntry(tin,"0.1");assertPaxGNUEntry(tin,"1.0");}finally {if (tin != null){tin.close();}}}
@Test public void testReadPasswordEncryptedEntryViaZipFile()throws IOException {final File file=getFile("password-encrypted.zip");ZipFile zf=null;try {zf=new ZipFile(file);final ZipArchiveEntry zae=zf.getEntry("LICENSE.txt");assertTrue(zae.getGeneralPurposeBit().usesEncryption());assertFalse(zae.getGeneralPurposeBit().usesStrongEncryption());assertFalse(zf.canReadEntryData(zae));try {zf.getInputStream(zae);fail("expected an exception");}catch(final UnsupportedZipFeatureException ex){assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,ex.getFeature());}}finally {ZipFile.closeQuietly(zf);}}
@Test public void testReadPasswordEncryptedEntryViaStream()throws IOException {final File file=getFile("password-encrypted.zip");ZipArchiveInputStream zin=null;try {zin=new ZipArchiveInputStream(new FileInputStream(file));final ZipArchiveEntry zae=zin.getNextZipEntry();assertEquals("LICENSE.txt",zae.getName());assertTrue(zae.getGeneralPurposeBit().usesEncryption());assertFalse(zae.getGeneralPurposeBit().usesStrongEncryption());assertFalse(zin.canReadEntryData(zae));try {final byte[]buf=new byte[1024];zin.read(buf,0,buf.length);fail("expected an exception");}catch(final UnsupportedZipFeatureException ex){assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,ex.getFeature());}}finally {if (zin != null){zin.close();}}}
/** * JIRA issue SANDBOX-284* @see "https://issues.apache.org/jira/browse/SANDBOX-284"*/@Test public void testFileSystemRoot(){final TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));assertEquals("/",t.getName());}
@Test public void testTarFileWithFSRoot()throws IOException {final File f=File.createTempFile("taetest",".tar");f.deleteOnExit();TarArchiveOutputStream tout=null;TarArchiveInputStream tin=null;try {tout=new TarArchiveOutputStream(new FileOutputStream(f));TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));tout.putArchiveEntry(t);tout.closeArchiveEntry();t=new TarArchiveEntry(new File(new File(ROOT),"foo.txt"));t.setSize(6);tout.putArchiveEntry(t);tout.write(new byte[]{'h','e','l','l','o',' '});tout.closeArchiveEntry();t=new TarArchiveEntry(new File(new File(ROOT),"bar.txt").getAbsolutePath());t.setSize(5);tout.putArchiveEntry(t);tout.write(new byte[]{'w','o','r','l','d'});tout.closeArchiveEntry();t=new TarArchiveEntry("dummy");t.setName(new File(new File(ROOT),"baz.txt").getAbsolutePath());t.setSize(1);tout.putArchiveEntry(t);tout.write(new byte[]{'!'});tout.closeArchiveEntry();tout.close();tout=null;tin=new TarArchiveInputStream(new FileInputStream(f));t=tin.getNextTarEntry();assertNotNull(t);assertEquals("/",t.getName());assertTrue(t.isCheckSumOK());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("foo.txt",t.getName());assertTrue(t.isCheckSumOK());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("bar.txt",t.getName());assertTrue(t.isCheckSumOK());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("baz.txt",t.getName());assertTrue(t.isCheckSumOK());}finally {if (tin != null){tin.close();}if (tout != null){tout.close();}AbstractTestCase.tryHardToDelete(f);}}
@Test public void testMaxFileSize(){final TarArchiveEntry t=new TarArchiveEntry("");t.setSize(0);t.setSize(1);try {t.setSize(-1);fail("Should have generated IllegalArgumentException");}catch(final IllegalArgumentException expected){}t.setSize(077777777777L);t.setSize(0100000000000L);}
@Test public void testLinkFlagConstructor(){final TarArchiveEntry t=new TarArchiveEntry("/foo",LF_GNUTYPE_LONGNAME);assertGnuMagic(t);assertEquals("foo",t.getName());}
@Test public void testLinkFlagConstructorWithFileFlag(){final TarArchiveEntry t=new TarArchiveEntry("/foo",LF_NORMAL);assertPosixMagic(t);assertEquals("foo",t.getName());}
@Test public void testLinkFlagConstructorWithPreserve(){final TarArchiveEntry t=new TarArchiveEntry("/foo",LF_GNUTYPE_LONGNAME,true);assertGnuMagic(t);assertEquals("/foo",t.getName());}
@Test public void redundantTestOfAlmostDeprecatedMatchesMethod(){final byte[]data={(byte)0xFD,'7','z','X','Z','\0'};Assert.assertFalse(XZCompressorInputStream.matches(data,5));Assert.assertTrue(XZCompressorInputStream.matches(data,6));Assert.assertTrue(XZCompressorInputStream.matches(data,7));data[5]='0';Assert.assertFalse(XZCompressorInputStream.matches(data,6));}
@Test public void testNormalize()throws Throwable {final File input=getFile("bla.jar");final File[]output=createTempDirAndFile();try {Pack200Utils.normalize(input,output[1],new HashMap<String,String>());final FileInputStream is=new FileInputStream(output[1]);try {final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){final File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}final OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}finally {is.close();}}finally {output[1].delete();output[0].delete();}}
@Test public void testNormalizeInPlace()throws Throwable {final File input=getFile("bla.jar");final File[]output=createTempDirAndFile();try {FileInputStream is=new FileInputStream(input);OutputStream os=null;try {os=new FileOutputStream(output[1]);IOUtils.copy(is,os);}finally {is.close();if (os != null){os.close();}}Pack200Utils.normalize(output[1]);is=new FileInputStream(output[1]);try {final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){final File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}final OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}finally {is.close();}}finally {output[1].delete();output[0].delete();}}
@Test public void testSampleFile()throws Exception {final File archive=getFile("COMPRESS-210_unix_time_zip_test.zip");ZipFile zf=null;try {zf=new ZipFile(archive);final Enumeration<ZipArchiveEntry> en=zf.getEntries();while (en.hasMoreElements()){final ZipArchiveEntry zae=en.nextElement();final String name=zae.getName();final X5455_ExtendedTimestamp xf=(X5455_ExtendedTimestamp)zae.getExtraField(X5455);final Date rawZ=zae.getLastModifiedDate();final Date m=xf.getModifyJavaTime();final boolean zipTimeUsesExtendedTimestamp=rawZ.equals(m);final Date z=zipTimeUsesExtendedTimestamp ? rawZ : adjustFromGMTToExpectedOffset(rawZ);final Date a=xf.getAccessJavaTime();final String zipTime=DATE_FORMAT.format(z);final String modTime=DATE_FORMAT.format(m);final String accTime=DATE_FORMAT.format(a);if (!zae.isDirectory()){final int x=name.lastIndexOf('/');final String yearString=name.substring(x + 1);int year;try {year=Integer.parseInt(yearString);}catch(final NumberFormatException nfe){year=-1;}if (year >= 0){switch (year){case 2107:            if (!zipTimeUsesExtendedTimestamp){assertEquals(year + "-01-01/00:00:02 +0000",zipTime);}assertEquals("1970-11-24/17:31:45 +0000",modTime);assertEquals("1970-11-24/17:31:47 +0000",accTime);break;case 2108:    if (!zipTimeUsesExtendedTimestamp){assertEquals(year + "-01-01/00:00:02 +0000",zipTime);}assertEquals("1971-11-24/17:31:45 +0000",modTime);assertEquals("1971-11-24/17:31:47 +0000",accTime);break;case 2109:if (!zipTimeUsesExtendedTimestamp){assertEquals("1981-01-01/00:00:02 +0000",zipTime);}assertEquals("1972-11-24/17:31:45 +0000",modTime);assertEquals("1972-11-24/17:31:47 +0000",accTime);break;default:if (!zipTimeUsesExtendedTimestamp){if (year < 1980){assertEquals("1980-01-01/08:00:00 +0000",zipTime);}else {assertEquals(year + "-01-01/00:00:02 +0000",zipTime);}}assertEquals(year + "-01-01/00:00:01 +0000",modTime);assertEquals(year + "-01-01/00:00:03 +0000",accTime);break;}}}}}finally {if (zf != null){zf.close();}}}
@Test public void testMisc()throws Exception {assertFalse(xf.equals(new Object()));assertTrue(xf.toString().startsWith("0x5455 Zip Extra Field"));assertTrue(!xf.toString().contains(" Modify:"));assertTrue(!xf.toString().contains(" Access:"));assertTrue(!xf.toString().contains(" Create:"));Object o=xf.clone();assertEquals(o.hashCode(),xf.hashCode());assertTrue(xf.equals(o));xf.setModifyJavaTime(new Date(1111));xf.setAccessJavaTime(new Date(2222));xf.setCreateJavaTime(new Date(3333));xf.setFlags((byte)7);assertFalse(xf.equals(o));assertTrue(xf.toString().startsWith("0x5455 Zip Extra Field"));assertTrue(xf.toString().contains(" Modify:"));assertTrue(xf.toString().contains(" Access:"));assertTrue(xf.toString().contains(" Create:"));o=xf.clone();assertEquals(o.hashCode(),xf.hashCode());assertTrue(xf.equals(o));}
@Test public void testGettersSetters(){final Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("UTC"));cal.set(Calendar.YEAR,2000);cal.set(Calendar.MONTH,Calendar.JANUARY);cal.set(Calendar.DATE,1);cal.set(Calendar.HOUR_OF_DAY,0);cal.set(Calendar.MINUTE,0);cal.set(Calendar.MILLISECOND,0);final Date timeMillis=cal.getTime();final ZipLong time=new ZipLong(timeMillis.getTime()/ 1000);try {xf.setModifyJavaTime(new Date(1000L * (MAX_TIME_SECONDS.getValue()+ 1L)));fail("Time too big for 32 bits!");}catch(final IllegalArgumentException iae){}xf.setModifyTime(time);assertEquals(time,xf.getModifyTime());assertEquals(timeMillis,xf.getModifyJavaTime());xf.setModifyJavaTime(timeMillis);assertEquals(time,xf.getModifyTime());assertEquals(timeMillis,xf.getModifyJavaTime());xf.setModifyJavaTime(new Date(timeMillis.getTime()+ 123));assertEquals(time,xf.getModifyTime());assertEquals(timeMillis,xf.getModifyJavaTime());xf.setModifyTime(null);assertNull(xf.getModifyJavaTime());xf.setModifyJavaTime(null);assertNull(xf.getModifyTime());xf.setAccessTime(time);assertEquals(time,xf.getAccessTime());assertEquals(timeMillis,xf.getAccessJavaTime());xf.setAccessJavaTime(timeMillis);assertEquals(time,xf.getAccessTime());assertEquals(timeMillis,xf.getAccessJavaTime());xf.setAccessJavaTime(new Date(timeMillis.getTime()+ 123));assertEquals(time,xf.getAccessTime());assertEquals(timeMillis,xf.getAccessJavaTime());xf.setAccessTime(null);assertNull(xf.getAccessJavaTime());xf.setAccessJavaTime(null);assertNull(xf.getAccessTime());xf.setCreateTime(time);assertEquals(time,xf.getCreateTime());assertEquals(timeMillis,xf.getCreateJavaTime());xf.setCreateJavaTime(timeMillis);assertEquals(time,xf.getCreateTime());assertEquals(timeMillis,xf.getCreateJavaTime());xf.setCreateJavaTime(new Date(timeMillis.getTime()+ 123));assertEquals(time,xf.getCreateTime());assertEquals(timeMillis,xf.getCreateJavaTime());xf.setCreateTime(null);assertNull(xf.getCreateJavaTime());xf.setCreateJavaTime(null);assertNull(xf.getCreateTime());xf.setModifyTime(time);xf.setAccessTime(time);xf.setCreateTime(time);xf.setFlags((byte)0);assertEquals(0,xf.getFlags());assertFalse(xf.isBit0_modifyTimePresent());assertFalse(xf.isBit1_accessTimePresent());assertFalse(xf.isBit2_createTimePresent());assertEquals(1,xf.getLocalFileDataLength().getValue());assertEquals(1,xf.getCentralDirectoryLength().getValue());xf.setFlags((byte)1);assertEquals(1,xf.getFlags());assertTrue(xf.isBit0_modifyTimePresent());assertFalse(xf.isBit1_accessTimePresent());assertFalse(xf.isBit2_createTimePresent());assertEquals(5,xf.getLocalFileDataLength().getValue());assertEquals(5,xf.getCentralDirectoryLength().getValue());xf.setFlags((byte)2);assertEquals(2,xf.getFlags());assertFalse(xf.isBit0_modifyTimePresent());assertTrue(xf.isBit1_accessTimePresent());assertFalse(xf.isBit2_createTimePresent());assertEquals(5,xf.getLocalFileDataLength().getValue());assertEquals(1,xf.getCentralDirectoryLength().getValue());xf.setFlags((byte)4);assertEquals(4,xf.getFlags());assertFalse(xf.isBit0_modifyTimePresent());assertFalse(xf.isBit1_accessTimePresent());assertTrue(xf.isBit2_createTimePresent());assertEquals(5,xf.getLocalFileDataLength().getValue());assertEquals(1,xf.getCentralDirectoryLength().getValue());xf.setFlags((byte)7);assertEquals(7,xf.getFlags());assertTrue(xf.isBit0_modifyTimePresent());assertTrue(xf.isBit1_accessTimePresent());assertTrue(xf.isBit2_createTimePresent());assertEquals(13,xf.getLocalFileDataLength().getValue());assertEquals(5,xf.getCentralDirectoryLength().getValue());xf.setFlags((byte)-1);assertEquals(-1,xf.getFlags());assertTrue(xf.isBit0_modifyTimePresent());assertTrue(xf.isBit1_accessTimePresent());assertTrue(xf.isBit2_createTimePresent());assertEquals(13,xf.getLocalFileDataLength().getValue());assertEquals(5,xf.getCentralDirectoryLength().getValue());}
@Test public void testGetHeaderId(){assertEquals(X5455,xf.getHeaderId());}
@Test public void testParseReparse()throws ZipException {final byte[]NULL_FLAGS={0};final byte[]AC_CENTRAL={2};final byte[]CR_CENTRAL={4};final byte[]MOD_ZERO={1,0,0,0,0};final byte[]MOD_MAX={1,-1,-1,-1,-1};final byte[]AC_ZERO={2,0,0,0,0};final byte[]AC_MAX={2,-1,-1,-1,-1};final byte[]CR_ZERO={4,0,0,0,0};final byte[]CR_MAX={4,-1,-1,-1,-1};final byte[]MOD_AC_ZERO={3,0,0,0,0,0,0,0,0};final byte[]MOD_AC_MAX={3,-1,-1,-1,-1,-1,-1,-1,-1};final byte[]MOD_AC_CR_ZERO={7,0,0,0,0,0,0,0,0,0,0,0,0};final byte[]MOD_AC_CR_MAX={7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};parseReparse(null,NULL_FLAGS,NULL_FLAGS);parseReparse(ZERO_TIME,MOD_ZERO,MOD_ZERO);parseReparse(MAX_TIME_SECONDS,MOD_MAX,MOD_MAX);parseReparse(ZERO_TIME,AC_ZERO,AC_CENTRAL);parseReparse(MAX_TIME_SECONDS,AC_MAX,AC_CENTRAL);parseReparse(ZERO_TIME,CR_ZERO,CR_CENTRAL);parseReparse(MAX_TIME_SECONDS,CR_MAX,CR_CENTRAL);parseReparse(ZERO_TIME,MOD_AC_ZERO,MOD_ZERO);parseReparse(MAX_TIME_SECONDS,MOD_AC_MAX,MOD_MAX);parseReparse(ZERO_TIME,MOD_AC_CR_ZERO,MOD_ZERO);parseReparse(MAX_TIME_SECONDS,MOD_AC_CR_MAX,MOD_MAX);parseReparse((byte)15,MAX_TIME_SECONDS,(byte)7,MOD_AC_CR_MAX,MOD_MAX);parseReparse((byte)31,MAX_TIME_SECONDS,(byte)7,MOD_AC_CR_MAX,MOD_MAX);parseReparse((byte)63,MAX_TIME_SECONDS,(byte)7,MOD_AC_CR_MAX,MOD_MAX);parseReparse((byte)71,MAX_TIME_SECONDS,(byte)7,MOD_AC_CR_MAX,MOD_MAX);parseReparse((byte)127,MAX_TIME_SECONDS,(byte)7,MOD_AC_CR_MAX,MOD_MAX);parseReparse((byte)-1,MAX_TIME_SECONDS,(byte)7,MOD_AC_CR_MAX,MOD_MAX);}
@Test public void testWriteReadRoundtrip()throws IOException {tmpDir=mkdir("X5455");final File output=new File(tmpDir,"write_rewrite.zip");final OutputStream out=new FileOutputStream(output);final Date d=new Date(97,8,24,15,10,2);ZipArchiveOutputStream os=null;try {os=new ZipArchiveOutputStream(out);final ZipArchiveEntry ze=new ZipArchiveEntry("foo");xf.setModifyJavaTime(d);xf.setFlags((byte)1);ze.addExtraField(xf);os.putArchiveEntry(ze);os.closeArchiveEntry();}finally {if (os != null){os.close();}}out.close();final ZipFile zf=new ZipFile(output);final ZipArchiveEntry ze=zf.getEntry("foo");final X5455_ExtendedTimestamp ext=(X5455_ExtendedTimestamp)ze.getExtraField(X5455);assertNotNull(ext);assertTrue(ext.isBit0_modifyTimePresent());assertEquals(d,ext.getModifyJavaTime());zf.close();}
@Test public void testBitsAreSetWithTime(){xf.setModifyJavaTime(new Date(1111));assertTrue(xf.isBit0_modifyTimePresent());assertEquals(1,xf.getFlags());xf.setAccessJavaTime(new Date(2222));assertTrue(xf.isBit1_accessTimePresent());assertEquals(3,xf.getFlags());xf.setCreateJavaTime(new Date(3333));assertTrue(xf.isBit2_createTimePresent());assertEquals(7,xf.getFlags());xf.setModifyJavaTime(null);assertFalse(xf.isBit0_modifyTimePresent());assertEquals(6,xf.getFlags());xf.setAccessJavaTime(null);assertFalse(xf.isBit1_accessTimePresent());assertEquals(4,xf.getFlags());xf.setCreateJavaTime(null);assertFalse(xf.isBit2_createTimePresent());assertEquals(0,xf.getFlags());}
@Test public void concurrent()throws Exception {result=File.createTempFile("parallelScatterGather1","");final ZipArchiveOutputStream zos=new ZipArchiveOutputStream(result);zos.setEncoding("UTF-8");final ParallelScatterZipCreator zipCreator=new ParallelScatterZipCreator();final Map<String,byte[]> entries=writeEntries(zipCreator);zipCreator.writeTo(zos);zos.close();removeEntriesFoundInZipFile(result,entries);assertTrue(entries.size()== 0);assertNotNull(zipCreator.getStatisticsMessage());}
@Test public void callableApi()throws Exception {result=File.createTempFile("parallelScatterGather2","");final ZipArchiveOutputStream zos=new ZipArchiveOutputStream(result);zos.setEncoding("UTF-8");final ExecutorService es=Executors.newFixedThreadPool(1);final ScatterGatherBackingStoreSupplier supp=new ScatterGatherBackingStoreSupplier(){@Override public ScatterGatherBackingStore get()throws IOException {return new FileBasedScatterGatherBackingStore(tmp=File.createTempFile("parallelscatter","n1"));}};final ParallelScatterZipCreator zipCreator=new ParallelScatterZipCreator(es,supp);final Map<String,byte[]> entries=writeEntriesAsCallable(zipCreator);zipCreator.writeTo(zos);zos.close();removeEntriesFoundInZipFile(result,entries);assertTrue(entries.size()== 0);assertNotNull(zipCreator.getStatisticsMessage());}
@Test public void testLongFileNamesCauseExceptionByDefault(){ArArchiveOutputStream os=null;try {os=new ArArchiveOutputStream(new ByteArrayOutputStream());final ArArchiveEntry ae=new ArArchiveEntry("this_is_a_long_name.txt",0);os.putArchiveEntry(ae);fail("Expected an exception");}catch(final IOException ex){assertTrue(ex.getMessage().startsWith("filename too long"));}finally {closeQuietly(os);}}
@Test public void testLongFileNamesWorkUsingBSDDialect()throws Exception {FileOutputStream fos=null;ArArchiveOutputStream os=null;final File[]df=createTempDirAndFile();try {fos=new FileOutputStream(df[1]);os=new ArArchiveOutputStream(fos);os.setLongFileMode(ArArchiveOutputStream.LONGFILE_BSD);final ArArchiveEntry ae=new ArArchiveEntry("this_is_a_long_name.txt",14);os.putArchiveEntry(ae);os.write(new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'});os.closeArchiveEntry();os.close();os=null;fos=null;final List<String> expected=new ArrayList<String>();expected.add("this_is_a_long_name.txt");checkArchiveContent(df[1],expected);}finally {if (os != null){os.close();}if (fos != null){fos.close();}rmdir(df[0]);}}
@Test public void testTarGzip()throws Exception {final File file=getFile("bla.tgz");final TarArchiveInputStream is=new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(file)));final TarArchiveEntry entry=(TarArchiveEntry)is.getNextEntry();assertNotNull(entry);assertEquals("test1.xml",entry.getName());is.close();}
@Test public void testTarBzip2()throws Exception {final File file=getFile("bla.tar.bz2");final TarArchiveInputStream is=new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));final TarArchiveEntry entry=(TarArchiveEntry)is.getNextEntry();assertNotNull(entry);assertEquals("test1.xml",entry.getName());is.close();}
@Test public void output()throws Exception {final ByteArrayOutputStream bos=new ByteArrayOutputStream();final CountingOutputStream o=new CountingOutputStream(bos);o.write(1);assertEquals(1,o.getBytesWritten());o.write(new byte[]{2,3});assertEquals(3,o.getBytesWritten());o.write(new byte[]{2,3,4,5},2,1);assertEquals(4,o.getBytesWritten());o.count(-1);assertEquals(4,o.getBytesWritten());o.count(-2);assertEquals(2,o.getBytesWritten());o.close();assertArrayEquals(new byte[]{1,2,3,4},bos.toByteArray());}
@Test public void input()throws Exception {final ByteArrayInputStream bis=new ByteArrayInputStream(new byte[]{1,2,3,4});final CountingInputStream i=new CountingInputStream(bis);assertEquals(1,i.read());assertEquals(1,i.getBytesRead());byte[]b=new byte[2];i.read(b);assertEquals(3,i.getBytesRead());assertArrayEquals(new byte[]{2,3},b);b=new byte[3];i.read(b,1,1);assertArrayEquals(new byte[]{0,4,0},b);assertEquals(4,i.getBytesRead());i.count(-1);assertEquals(4,i.getBytesRead());i.count(-2);assertEquals(2,i.getBytesRead());i.close();}
@Test public void testJarUnarchiveAllInMemory()throws Exception {jarUnarchiveAll(false,Pack200Strategy.IN_MEMORY);}
@Test public void testJarUnarchiveAllFileArgInMemory()throws Exception {jarUnarchiveAll(true,Pack200Strategy.IN_MEMORY);}
@Test public void testJarUnarchiveAllTempFile()throws Exception {jarUnarchiveAll(false,Pack200Strategy.TEMP_FILE);}
@Test public void testJarUnarchiveAllFileTempFile()throws Exception {jarUnarchiveAll(true,Pack200Strategy.TEMP_FILE);}
@Test public void testJarArchiveCreationInMemory()throws Exception {jarArchiveCreation(Pack200Strategy.IN_MEMORY);}
@Test public void testJarArchiveCreationTempFile()throws Exception {jarArchiveCreation(Pack200Strategy.TEMP_FILE);}
@Test public void testGoodSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.pack"));try {final byte[]sig=new byte[4];is.read(sig);assertTrue(Pack200CompressorInputStream.matches(sig,4));}finally {is.close();}}
@Test public void testBadSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.jar"));try {final byte[]sig=new byte[4];is.read(sig);assertFalse(Pack200CompressorInputStream.matches(sig,4));}finally {is.close();}}
@Test public void testShortSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.pack"));try {final byte[]sig=new byte[2];is.read(sig);assertFalse(Pack200CompressorInputStream.matches(sig,2));}finally {is.close();}}
@Test public void testInputStreamMethods()throws Exception {final Map<String,String> m=new HashMap<String,String>();m.put("foo","bar");final InputStream is=new Pack200CompressorInputStream(new FileInputStream(getFile("bla.jar")),m);try {assertTrue(is.markSupported());is.mark(5);assertEquals(0x50,is.read());final byte[]rest=new byte[3];assertEquals(3,is.read(rest));assertEquals(0x4b,rest[0]);assertEquals(3,rest[1]);assertEquals(4,rest[2]);assertEquals(1,is.skip(1));is.reset();assertEquals(0x50,is.read());assertTrue(is.available()> 0);}finally {is.close();}}
@Test public void testOutputStreamMethods()throws Exception {final File output=new File(dir,"bla.pack");final Map<String,String> m=new HashMap<String,String>();m.put("foo","bar");final OutputStream out=new FileOutputStream(output);try {final OutputStream os=new Pack200CompressorOutputStream(out,m);os.write(1);os.write(new byte[]{2,3});os.close();}finally {out.close();}}
@Test public void skipUsingSkip()throws Exception {skip(new StreamWrapper(){@Override public InputStream wrap(final InputStream toWrap){return toWrap;}});}
@Test public void skipUsingRead()throws Exception {skip(new StreamWrapper(){@Override public InputStream wrap(final InputStream toWrap){return new FilterInputStream(toWrap){@Override public long skip(final long s){return 0;}};}});}
@Test public void skipUsingSkipAndRead()throws Exception {skip(new StreamWrapper(){@Override public InputStream wrap(final InputStream toWrap){return new FilterInputStream(toWrap){boolean skipped;@Override public long skip(final long s)throws IOException {if (!skipped){toWrap.skip(5);skipped=true;return 5;}return 0;}};}});}
@Test public void testReading()throws IOException {final MemoryArchiveInputStream is=new MemoryArchiveInputStream(new String[][]{{"test1","content1"},{"test2","content2"}});final ArchiveEntry entry1=is.getNextEntry();assertNotNull(entry1);assertEquals("test1",entry1.getName());final String content1=is.readString();assertEquals("content1",content1);final ArchiveEntry entry2=is.getNextEntry();assertNotNull(entry2);assertEquals("test2",entry2.getName());final String content2=is.readString();assertEquals("content2",content2);final ArchiveEntry entry3=is.getNextEntry();assertNull(entry3);is.close();}
@Test(expected=IOException.class)public void testTruncatedData()throws IOException {System.out.println("Attempt to read the whole thing in,should throw ...");final ByteBuffer buffer=ByteBuffer.allocate(8192);bz2Channel.read(buffer);}
@Test public void testPartialReadTruncatedData()throws IOException {final int length=TEXT.length();ByteBuffer buffer=ByteBuffer.allocate(length);bz2Channel.read(buffer);assertArrayEquals(copyOfRange(TEXT.getBytes(),0,length),buffer.array());buffer=ByteBuffer.allocate(1);try {bz2Channel.read(buffer);Assert.fail("The read should have thrown.");}catch(final IOException e){}}
@Test public void canReadASingleByteFlushAndFinish()throws IOException {final ByteArrayOutputStream bos=new ByteArrayOutputStream();final DeflateCompressorOutputStream cos=new DeflateCompressorOutputStream(bos);cos.write(99);cos.flush();cos.finish();Assert.assertTrue(bos.toByteArray().length > 0);cos.close();}
