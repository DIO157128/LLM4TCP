public void testCDOrder()throws Exception {readOrderTest();ArrayList<ZipArchiveEntry> l=Collections.list(zf.getEntries());assertEntryName(l,0,"AbstractUnicodeExtraField");assertEntryName(l,1,"AsiExtraField");assertEntryName(l,2,"ExtraFieldUtils");assertEntryName(l,3,"FallbackZipEncoding");assertEntryName(l,4,"GeneralPurposeBit");assertEntryName(l,5,"JarMarker");assertEntryName(l,6,"NioZipEncoding");assertEntryName(l,7,"Simple8BitZipEncoding");assertEntryName(l,8,"UnicodeCommentExtraField");assertEntryName(l,9,"UnicodePathExtraField");assertEntryName(l,10,"UnixStat");assertEntryName(l,11,"UnparseableExtraFieldData");assertEntryName(l,12,"UnrecognizedExtraField");assertEntryName(l,13,"ZipArchiveEntry");assertEntryName(l,14,"ZipArchiveInputStream");assertEntryName(l,15,"ZipArchiveOutputStream");assertEntryName(l,16,"ZipEncoding");assertEntryName(l,17,"ZipEncodingHelper");assertEntryName(l,18,"ZipExtraField");assertEntryName(l,19,"ZipUtil");assertEntryName(l,20,"ZipLong");assertEntryName(l,21,"ZipShort");assertEntryName(l,22,"ZipFile");}
public void testPhysicalOrder()throws Exception {readOrderTest();ArrayList<ZipArchiveEntry> l=Collections.list(zf.getEntriesInPhysicalOrder());assertEntryName(l,0,"AbstractUnicodeExtraField");assertEntryName(l,1,"AsiExtraField");assertEntryName(l,2,"ExtraFieldUtils");assertEntryName(l,3,"FallbackZipEncoding");assertEntryName(l,4,"GeneralPurposeBit");assertEntryName(l,5,"JarMarker");assertEntryName(l,6,"NioZipEncoding");assertEntryName(l,7,"Simple8BitZipEncoding");assertEntryName(l,8,"UnicodeCommentExtraField");assertEntryName(l,9,"UnicodePathExtraField");assertEntryName(l,10,"UnixStat");assertEntryName(l,11,"UnparseableExtraFieldData");assertEntryName(l,12,"UnrecognizedExtraField");assertEntryName(l,13,"ZipArchiveEntry");assertEntryName(l,14,"ZipArchiveInputStream");assertEntryName(l,15,"ZipArchiveOutputStream");assertEntryName(l,16,"ZipEncoding");assertEntryName(l,17,"ZipEncodingHelper");assertEntryName(l,18,"ZipExtraField");assertEntryName(l,19,"ZipFile");assertEntryName(l,20,"ZipLong");assertEntryName(l,21,"ZipShort");assertEntryName(l,22,"ZipUtil");}
public void testDoubleClose()throws Exception {readOrderTest();zf.close();try {zf.close();}catch(Exception ex){fail("Caught exception of second close");}}
public void testReadingOfStoredEntry()throws Exception {File f=File.createTempFile("commons-compress-zipfiletest",".zip");f.deleteOnExit();OutputStream o=null;InputStream i=null;try {o=new FileOutputStream(f);ZipArchiveOutputStream zo=new ZipArchiveOutputStream(o);ZipArchiveEntry ze=new ZipArchiveEntry("foo");ze.setMethod(ZipArchiveEntry.STORED);ze.setSize(4);ze.setCrc(0xb63cfbcdl);zo.putArchiveEntry(ze);zo.write(new byte[]{1,2,3,4});zo.closeArchiveEntry();zo.close();o.close();o=null;zf=new ZipFile(f);ze=zf.getEntry("foo");assertNotNull(ze);i=zf.getInputStream(ze);byte[]b=new byte[4];assertEquals(4,i.read(b));assertEquals(-1,i.read());}finally {if (o != null){o.close();}if (i != null){i.close();}f.delete();}}
public void testArchive(){}
public void testIsCompressedFilename(){assertFalse(XZUtils.isCompressedFilename(""));assertFalse(XZUtils.isCompressedFilename(".xz"));assertTrue(XZUtils.isCompressedFilename("x.txz"));assertTrue(XZUtils.isCompressedFilename("x.xz"));assertTrue(XZUtils.isCompressedFilename("x-xz"));assertFalse(XZUtils.isCompressedFilename("xxgz"));assertFalse(XZUtils.isCompressedFilename("xzz"));assertFalse(XZUtils.isCompressedFilename("xaz"));assertFalse(XZUtils.isCompressedFilename("x.txz "));assertFalse(XZUtils.isCompressedFilename("x.txz\n"));assertFalse(XZUtils.isCompressedFilename("x.txz.y"));}
public void testGetUncompressedFilename(){assertEquals("",XZUtils.getUncompressedFilename(""));assertEquals(".xz",XZUtils.getUncompressedFilename(".xz"));assertEquals("x.tar",XZUtils.getUncompressedFilename("x.txz"));assertEquals("x",XZUtils.getUncompressedFilename("x.xz"));assertEquals("x",XZUtils.getUncompressedFilename("x-xz"));assertEquals("x.txz ",XZUtils.getUncompressedFilename("x.txz "));assertEquals("x.txz\n",XZUtils.getUncompressedFilename("x.txz\n"));assertEquals("x.txz.y",XZUtils.getUncompressedFilename("x.txz.y"));}
public void testGetCompressedFilename(){assertEquals(".xz",XZUtils.getCompressedFilename(""));assertEquals("x.xz",XZUtils.getCompressedFilename("x"));assertEquals("x.txz",XZUtils.getCompressedFilename("x.tar"));assertEquals("x.wmf .xz",XZUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.xz",XZUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.xz",XZUtils.getCompressedFilename("x.wmf.y"));}
public void testArArchiveCreation()throws Exception {final File output=new File(dir,"bla.ar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}
public void testArUnarchive()throws Exception {final File output=new File(dir,"bla.ar");{final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));final ArArchiveEntry entry=(ArArchiveEntry)in.getNextEntry();File target=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(target);IOUtils.copy(in,out);out.close();in.close();is.close();}
public void testArDelete()throws Exception {final File output=new File(dir,"bla.ar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}assertEquals(8 + 60 + file1.length()+ (file1.length()% 2)+ 60+ file2.length()+ (file2.length()% 2),output.length());final File output2=new File(dir,"bla2.ar");int copied=0;int deleted=0;{final InputStream is=new FileInputStream(output);final OutputStream os=new FileOutputStream(output2);final ArchiveOutputStream aos=new ArchiveStreamFactory().createArchiveOutputStream("ar",os);final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));while (true){final ArArchiveEntry entry=(ArArchiveEntry)ais.getNextEntry();if (entry == null){break;}if ("test1.xml".equals(entry.getName())){aos.putArchiveEntry(entry);IOUtils.copy(ais,aos);aos.closeArchiveEntry();copied++;}else {IOUtils.copy(ais,new ByteArrayOutputStream());deleted++;}}ais.close();aos.close();is.close();os.close();}assertEquals(1,copied);assertEquals(1,deleted);assertEquals(8 + 60 + file1.length()+ (file1.length()% 2),output2.length());long files=0;long sum=0;{final InputStream is=new FileInputStream(output2);final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));while (true){final ArArchiveEntry entry=(ArArchiveEntry)ais.getNextEntry();if (entry == null){break;}IOUtils.copy(ais,new ByteArrayOutputStream());sum+=entry.getLength();files++;}ais.close();is.close();}assertEquals(1,files);assertEquals(file1.length(),sum);}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));ArArchiveEntry in=new ArArchiveEntry(tmp[1],"foo");aos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){aos.write(b);}fis.close();fis=null;aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));ArArchiveEntry in=new ArArchiveEntry("foo",tmp[1].length(),0,0,0,tmp[1].lastModified()/ 1000);aos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){aos.write(b);}fis.close();fis=null;aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testDumpUnarchiveAll()throws Exception {unarchiveAll(getFile("bla.dump"));}
public void testCompressedDumpUnarchiveAll()throws Exception {unarchiveAll(getFile("bla.z.dump"));}
public void testArchiveDetection()throws Exception {archiveDetection(getFile("bla.dump"));}
public void testCompressedArchiveDetection()throws Exception {archiveDetection(getFile("bla.z.dump"));}
public void testCheckArchive()throws Exception {checkDumpArchive(getFile("bla.dump"));}
public void testCheckCompressedArchive()throws Exception {checkDumpArchive(getFile("bla.z.dump"));}
/** * Adds an ArchiveEntry with the same name two times. Only the latest addition should be found in the ChangeSet,the first add should be replaced.* @throws Exception*/public void testAddChangeTwice()throws Exception {InputStream in=null;InputStream in2=null;try {in=new FileInputStream(getFile("test.txt"));in2=new FileInputStream(getFile("test2.xml"));ArchiveEntry e=new ZipArchiveEntry("test.txt");ArchiveEntry e2=new ZipArchiveEntry("test.txt");ChangeSet changes=new ChangeSet();changes.add(e,in);changes.add(e2,in2);assertEquals(1,changes.getChanges().size());Change c=changes.getChanges().iterator().next();assertEquals(in2,c.getInput());}finally {if (in != null)in.close();if (in2 != null)in2.close();}}
/** * Adds an ArchiveEntry with the same name two times. Only the first addition should be found in the ChangeSet,the second add should never be added since replace = false* @throws Exception*/public void testAddChangeTwiceWithoutReplace()throws Exception {InputStream in=null;InputStream in2=null;try {in=new FileInputStream(getFile("test.txt"));in2=new FileInputStream(getFile("test2.xml"));ArchiveEntry e=new ZipArchiveEntry("test.txt");ArchiveEntry e2=new ZipArchiveEntry("test.txt");ChangeSet changes=new ChangeSet();changes.add(e,in,true);changes.add(e2,in2,false);assertEquals(1,changes.getChanges().size());Change c=changes.getChanges().iterator().next();assertEquals(in,c.getInput());}finally {if (in != null)in.close();if (in2 != null)in2.close();}}
/** * Tries to delete the folder "bla" from an archive file. This should result in the deletion of bla/*,which actually means bla/test4.xml should be removed from the archive. The file something/bla (without ending,named like the folder)should not be deleted.* @throws Exception*/public void testDeleteDir()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the folder "la" from an archive file. This should result in the deletion of la/*,which should not match any files/folders.* @throws Exception*/public void testDeleteDir2()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("la");archiveListDeleteDir("la");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the folder "test.txt" from an archive file. This should not match any files/folders.* @throws Exception*/public void testDeleteDir3()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("test.txt");archiveListDeleteDir("test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the file "bla/test5.xml" from an archive. This should result in the deletion of "bla/test5.xml".* @throws Exception*/public void testDeleteFile()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete("bla/test5.xml");archiveListDelete("bla/test5.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the file "bla" from an archive. This should result in the deletion of nothing.* @throws Exception*/public void testDeleteFile2()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete("bla");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete and then add a file with the same name. Should delete test/test3.xml and adds test.txt with the name test/test3.xml* @throws Exception*/public void testDeletePlusAddSame()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();File testtxt=null;try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete("test/test3.xml");archiveListDelete("test/test3.xml");testtxt=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(testtxt,"test/test3.xml");changes.add(entry,new FileInputStream(testtxt));archiveList.add("test/test3.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}ArchiveInputStream in=null;File check=null;try {final InputStream is=new FileInputStream(result);final BufferedInputStream buf=new BufferedInputStream(is);in=factory.createArchiveInputStream(buf);check=this.checkArchiveContent(in,archiveList,false);File test3xml=new File(check,"result/test/test3.xml");assertEquals(testtxt.length(),test3xml.length());BufferedReader reader=new BufferedReader(new FileReader(test3xml));String str;while ((str=reader.readLine())!= null){"111111111111111111111111111000101011".equals(str);}reader.close();}finally {if (in != null){in.close();}rmdir(check);}}
/** * Checks for the correct ChangeSetResults* @throws Exception*/public void testChangeSetResults()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final File file1=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file1,"bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);ChangeSetResults results=performer.perform(ais,out);is.close();assertEquals(1,results.getAddedFromChangeSet().size());assertEquals("bla/test.txt",results.getAddedFromChangeSet().iterator().next());assertEquals(3,results.getDeleted().size());assertTrue(results.getDeleted().contains("bla/test4.xml"));assertTrue(results.getDeleted().contains("bla/test5.xml"));assertTrue(results.getDeleted().contains("bla/blubber/test6.xml"));assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));assertTrue(results.getAddedFromStream().contains("testdata/test2.xml"));assertTrue(results.getAddedFromStream().contains("test/test3.xml"));assertTrue(results.getAddedFromStream().contains("test.txt"));assertTrue(results.getAddedFromStream().contains("something/bla"));assertTrue(results.getAddedFromStream().contains("test with spaces.txt"));assertEquals(6,results.getAddedFromStream().size());}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete a directory with a file and adds a new directory with a new file and with the same name. Should delete dir1/* and add dir1/test.txt at the end* @throws Exception*/public void testDeletePlusAdd()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final File file1=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file1,"bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Adds a file to a zip archive. Deletes an other file.* @throws Exception*/public void testDeleteFromAndAddToZip()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.delete("testdata/test1.xml");archiveListDelete("testdata/test1.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * add blub/test.txt + delete blub Should add blub/test.txt and delete it afterwards. In this example,the archive should stay untouched.* @throws Exception*/public void testAddDeleteAdd()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new CpioArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.deleteDir("blub");archiveListDeleteDir("blub");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * delete bla + add bla/test.txt + delete bla Deletes dir1/* first,then suppresses the add of bla.txt because there is a delete operation later.* @throws Exception*/public void testDeleteAddDelete()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");final File file1=getFile("test.txt");ArchiveEntry entry=new CpioArchiveEntry("bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");changes.deleteDir("bla");archiveListDeleteDir("bla");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Simple Delete from a zip file.* @throws Exception*/public void testDeleteFromZip()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.zip");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("zip",is);temp=File.createTempFile("test",".zip");temp.deleteOnExit();out=factory.createArchiveOutputStream("zip",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Simple delete from a tar file* @throws Exception*/public void testDeleteFromTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("tar",is);temp=new File(dir,"bla.tar");out=factory.createArchiveOutputStream("tar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Simple delete from a jar file* @throws Exception*/public void testDeleteFromJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");changes.deleteDir("META-INF");changes.delete(".classpath");changes.delete(".project");final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("jar",is);temp=new File(dir,"bla.jar");out=factory.createArchiveOutputStream("jar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
public void testDeleteFromAndAddToTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File file1=getFile("test.txt");final TarArchiveEntry entry=new TarArchiveEntry("testdata/test.txt");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("tar",is);temp=new File(dir,"bla.tar");out=factory.createArchiveOutputStream("tar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("testdata/test.txt");final ArchiveInputStream in=factory.createArchiveInputStream("tar",new FileInputStream(temp));this.checkArchiveContent(in,expected);}
/** * Delete from a jar file and add another file* @throws Exception*/public void testDeleteFromAndAddToJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");changes.deleteDir("META-INF");changes.delete(".classpath");changes.delete(".project");final File file1=getFile("test.txt");JarArchiveEntry entry=new JarArchiveEntry("testdata/test.txt");changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("jar",is);temp=new File(dir,"bla.jar");out=factory.createArchiveOutputStream("jar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("testdata/test.txt");this.checkArchiveContent(temp,expected);}
/** * Simple delete from an ar file* @throws Exception*/public void testDeleteFromAr()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.ar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("ar",is);temp=new File(dir,"bla.ar");out=factory.createArchiveOutputStream("ar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Deletes a file from an AR-archive and adds another* @throws Exception*/public void testDeleteFromAndAddToAr()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File file1=getFile("test.txt");final ArArchiveEntry entry=new ArArchiveEntry("test.txt",file1.length());changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.ar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("ar",is);temp=new File(dir,"bla.ar");out=factory.createArchiveOutputStream("ar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("test.txt");this.checkArchiveContent(temp,expected);}
/** * TODO: Move operations are not supported currently mv dir1/test.text dir2/test.txt + delete dir1 Moves the file to dir2 and deletes everything in dir1* @throws Exception*/public void testRenameAndDelete()throws Exception {}
/** * TODO: Move operations are not supported currently add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1 Add dir1/bla.txt should be surpressed. All other dir1 files will be deleted,except dir1/test.text will be moved* @throws Exception*/public void testAddMoveDelete()throws Exception {}
/** * Check can add a file to an empty archive.* @throws Exception*/public void testAddToEmptyArchive()throws Exception {final String archivename="zip";File input=this.createEmptyArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Check can delete and add a file to an archive with a single file* @throws Exception*/public void testDeleteAddToOneFileArchive()throws Exception {final String archivename="zip";File input=this.createSingleEntryArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));changes.delete("test1.xml");archiveListDelete("test1.xml");final File file=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file,"bla/test.txt");changes.add(entry,new FileInputStream(file));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Check can add and delete a file to an archive with a single file* @throws Exception*/public void testAddDeleteToOneFileArchive()throws Exception {final String archivename="cpio";File input=this.createSingleEntryArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final File file=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file,"bla/test.txt");changes.add(entry,new FileInputStream(file));archiveList.add("bla/test.txt");changes.delete("test1.xml");archiveListDelete("test1.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file with the same filename as an existing file from the stream. Should lead to a replacement.* @throws Exception*/public void testAddAllreadyExistingWithReplaceTrue()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("testdata/test1.xml");changes.add(entry,new FileInputStream(file1),true);ChangeSetPerformer performer=new ChangeSetPerformer(changes);ChangeSetResults results=performer.perform(ais,out);assertTrue(results.getAddedFromChangeSet().contains("testdata/test1.xml"));is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
/** * Adds a file with the same filename as an existing file from the stream. Should lead to a replacement.* @throws Exception*/public void testAddAllreadyExistingWithReplaceFalse()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("testdata/test1.xml");changes.add(entry,new FileInputStream(file1),false);ChangeSetPerformer performer=new ChangeSetPerformer(changes);ChangeSetResults results=performer.perform(ais,out);assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));assertTrue(results.getAddedFromChangeSet().isEmpty());assertTrue(results.getDeleted().isEmpty());is.close();}finally {if (out != null)out.close();if (ais != null)ais.close();}this.checkArchiveContent(result,archiveList);}
public void testGzipCreation()throws Exception {final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.gz");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("gz",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
public void testGzipUnarchive()throws Exception {final File input=getFile("bla.tgz");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("gz",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.gz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("gz",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.gz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new GzipCompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-84"*/public void testCorruptedInput()throws Exception {InputStream in=null;OutputStream out=null;CompressorInputStream cin=null;try {in=new FileInputStream(getFile("bla.tgz"));out=new ByteArrayOutputStream();IOUtils.copy(in,out);in.close();out.close();byte[]data=((ByteArrayOutputStream)out).toByteArray();in=new ByteArrayInputStream(data,0,data.length - 1);cin=new CompressorStreamFactory().createCompressorInputStream("gz",in);out=new ByteArrayOutputStream();try {IOUtils.copy(cin,out);fail("Expected an exception");}catch(IOException ioex){}}finally {if (out != null){out.close();}if (cin != null){cin.close();}if (in != null){in.close();}}}
public void testWriteAr()throws Exception {ArchiveEntry entry=new ArArchiveEntry("dummy",bytesToTest);compareWrites("ar",entry);}
public void testWriteCpio()throws Exception {ArchiveEntry entry=new CpioArchiveEntry("dummy",bytesToTest);compareWrites("cpio",entry);}
public void testWriteJar()throws Exception {ArchiveEntry entry=new JarArchiveEntry("dummy");compareWrites("jar",entry);}
public void testWriteTar()throws Exception {TarArchiveEntry entry=new TarArchiveEntry("dummy");entry.setSize(bytesToTest);compareWrites("tar",entry);}
public void testWriteZip()throws Exception {ArchiveEntry entry=new ZipArchiveEntry("dummy");compareWrites("zip",entry);}
public void testReadAr()throws Exception {compareReads("ar");}
public void testReadCpio()throws Exception {compareReads("cpio");}
public void testReadJar()throws Exception {compareReads("jar");}
public void testReadTar()throws Exception {compareReads("tar");}
public void testReadZip()throws Exception {compareReads("zip");}
public void testFinish()throws Exception {OutputStream out1=new ByteArrayOutputStream();ArchiveOutputStream aos1=factory.createArchiveOutputStream("zip",out1);aos1.putArchiveEntry(new ZipArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("jar",out1);aos1.putArchiveEntry(new JarArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("ar",out1);aos1.putArchiveEntry(new ArArchiveEntry("dummy",100));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("cpio",out1);aos1.putArchiveEntry(new CpioArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("tar",out1);aos1.putArchiveEntry(new TarArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}}
public void testOptionalFinish()throws Exception {OutputStream out1=new ByteArrayOutputStream();ArchiveOutputStream aos1=factory.createArchiveOutputStream("zip",out1);aos1.putArchiveEntry(new ZipArchiveEntry("dummy"));aos1.closeArchiveEntry();aos1.close();aos1=factory.createArchiveOutputStream("jar",out1);aos1.putArchiveEntry(new JarArchiveEntry("dummy"));aos1.closeArchiveEntry();aos1.close();try {aos1.finish();fail("finish()cannot follow close()");}catch(IOException io){}}
public void testCallSequenceAr()throws Exception {doCallSequence("Ar");}
public void testCallSequenceCpio()throws Exception {doCallSequence("Cpio");}
public void testCallSequenceJar()throws Exception {doCallSequence("Jar");}
public void testCallSequenceTar()throws Exception {doCallSequence("Tar");}
public void testCallSequenceZip()throws Exception {doCallSequence("Zip");}
public void testDetection()throws Exception {final CompressorInputStream bzip2=getStreamFor("bla.txt.bz2");assertNotNull(bzip2);assertTrue(bzip2 instanceof BZip2CompressorInputStream);final CompressorInputStream gzip=getStreamFor("bla.tgz");assertNotNull(gzip);assertTrue(gzip instanceof GzipCompressorInputStream);}
public void testJarArchiveCreation()throws Exception {final File output=new File(dir,"bla.jar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("jar",out);os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}
public void testJarUnarchive()throws Exception {final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();File o=new File(dir,entry.getName());o.getParentFile().mkdirs();OutputStream out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();in.close();is.close();}
public void testJarUnarchiveAll()throws Exception {final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();is.close();}
@Test public void readSimplePaxHeader()throws Exception {Map<String,String> headers=new TarArchiveInputStream(null).parsePaxHeaders(new StringReader("30 atime=1321711775.972059463\n"));assertEquals(1,headers.size());assertEquals("1321711775.972059463",headers.get("atime"));}
@Test public void readPaxHeaderWithEmbeddedNewline()throws Exception {Map<String,String> headers=new TarArchiveInputStream(null).parsePaxHeaders(new StringReader("28 comment=line1\nline2\nand3\n"));assertEquals(1,headers.size());assertEquals("line1\nline2\nand3",headers.get("comment"));}
public void testJarMarker()throws IOException {File testArchive=File.createTempFile("jar-aostest",".jar");testArchive.deleteOnExit();JarArchiveOutputStream out=null;ZipFile zf=null;try {out=new JarArchiveOutputStream(new FileOutputStream(testArchive));out.putArchiveEntry(new ZipArchiveEntry("foo/"));out.closeArchiveEntry();out.putArchiveEntry(new ZipArchiveEntry("bar/"));out.closeArchiveEntry();out.finish();out.close();out=null;zf=new ZipFile(testArchive);ZipArchiveEntry ze=zf.getEntry("foo/");assertNotNull(ze);ZipExtraField[]fes=ze.getExtraFields();assertEquals(1,fes.length);assertTrue(fes[0]instanceof JarMarker);ze=zf.getEntry("bar/");assertNotNull(ze);fes=ze.getExtraFields();assertEquals(0,fes.length);}finally {if (out != null){try {out.close();}catch(IOException e){}}ZipFile.closeQuietly(zf);AbstractTestCase.tryHardToDelete(testArchive);}}
public void testCpioUnarchive()throws Exception {StringBuffer expected=new StringBuffer();expected.append("./test1.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>./test2.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>\n");CpioArchiveInputStream in=new CpioArchiveInputStream(new FileInputStream(getFile("bla.cpio")));CpioArchiveEntry entry=null;StringBuffer result=new StringBuffer();while ((entry=(CpioArchiveEntry)in.getNextEntry())!= null){result.append(entry.getName());int tmp;while ((tmp=in.read())!= -1){result.append((char)tmp);}}in.close();assertEquals(result.toString(),expected.toString());}
public void testReadLongNamesGNU()throws Exception {checkLongNameEntry("longfile_gnu.ar");}
public void testReadLongNamesBSD()throws Exception {checkLongNameEntry("longfile_bsd.ar");}
/** * Test file mode magic.*/public void testModes(){AsiExtraField a=new AsiExtraField();a.setMode(0123);assertEquals("plain file",0100123,a.getMode());a.setDirectory(true);assertEquals("directory",040123,a.getMode());a.setLinkedFile("test");assertEquals("symbolic link",0120123,a.getMode());}
/** * Test content.*/public void testContent(){AsiExtraField a=new AsiExtraField();a.setMode(0123);a.setUserId(5);a.setGroupId(6);byte[]b=a.getLocalFileDataData();byte[]expect={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};assertEquals("no link",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals("no link,byte " + i,expect[i],b[i]);}a.setLinkedFile("test");expect=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};b=a.getLocalFileDataData();assertEquals("no link",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals("no link,byte " + i,expect[i],b[i]);}}
/** * Test reparse*/public void testReparse()throws Exception {byte[]data={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};AsiExtraField a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length plain file",data.length,a.getLocalFileDataLength().getValue());assertTrue("plain file,no link",!a.isLink());assertTrue("plain file,no dir",!a.isDirectory());assertEquals("mode plain file",FILE_FLAG | 0123,a.getMode());assertEquals("uid plain file",5,a.getUserId());assertEquals("gid plain file",6,a.getGroupId());data=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length link",data.length,a.getLocalFileDataLength().getValue());assertTrue("link,is link",a.isLink());assertTrue("link,no dir",!a.isDirectory());assertEquals("mode link",LINK_FLAG | 0123,a.getMode());assertEquals("uid link",5,a.getUserId());assertEquals("gid link",6,a.getGroupId());assertEquals("test",a.getLinkedFile());data=new byte[]{(byte)0x8E,0x01,(byte)0xBF,(byte)0x0E,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length dir",data.length,a.getLocalFileDataLength().getValue());assertTrue("dir,no link",!a.isLink());assertTrue("dir,is dir",a.isDirectory());assertEquals("mode dir",DIR_FLAG | 0123,a.getMode());assertEquals("uid dir",5,a.getUserId());assertEquals("gid dir",6,a.getGroupId());data=new byte[]{0,0,0,0,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();try {a.parseFromLocalFileData(data,0,data.length);fail("should raise bad CRC exception");}catch(Exception e){assertEquals("bad CRC checksum 0 instead of ebf018e",e.getMessage());}}
public void testClone(){AsiExtraField s1=new AsiExtraField();s1.setUserId(42);s1.setGroupId(12);s1.setLinkedFile("foo");s1.setMode(0644);s1.setDirectory(true);AsiExtraField s2=(AsiExtraField)s1.clone();assertNotSame(s1,s2);assertEquals(s1.getUserId(),s2.getUserId());assertEquals(s1.getGroupId(),s2.getGroupId());assertEquals(s1.getLinkedFile(),s2.getLinkedFile());assertEquals(s1.getMode(),s2.getMode());assertEquals(s1.isDirectory(),s2.isDirectory());}
/** * test handling of extra fields*/public void testExtraFields(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]data1=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals("first pass",2,result.length);assertSame(a,result[0]);assertSame(u,result[1]);UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u2.setLocalFileDataData(new byte[]{1});ze.addExtraField(u2);byte[]data2=ze.getExtra();result=ze.getExtraFields();assertEquals("second pass",2,result.length);assertSame(a,result[0]);assertSame(u2,result[1]);assertEquals("length second pass",data1.length + 1,data2.length);UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addExtraField(u3);result=ze.getExtraFields();assertEquals("third pass",3,result.length);ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);byte[]data3=ze.getExtra();result=ze.getExtraFields();assertEquals("fourth pass",2,result.length);assertSame(a,result[0]);assertSame(u3,result[1]);assertEquals("length fourth pass",data2.length,data3.length);try {ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);fail("should be no such element");}catch(java.util.NoSuchElementException nse){}}
/** * test handling of extra fields via central directory*/public void testExtraFieldMerging(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]b=ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes();ze.setCentralDirectoryExtra(new byte[]{b[0],b[1],1,0,127});ZipExtraField[]result=ze.getExtraFields();assertEquals("first pass",2,result.length);assertSame(a,result[0]);assertEquals(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER,result[1].getHeaderId());assertEquals(new ZipShort(0),result[1].getLocalFileDataLength());assertEquals(new ZipShort(1),result[1].getCentralDirectoryLength());ze.setCentralDirectoryExtra(new byte[]{2,0,0,0});result=ze.getExtraFields();assertEquals("second pass",3,result.length);ze.setExtra(new byte[]{2,0,1,0,127});result=ze.getExtraFields();assertEquals("third pass",3,result.length);assertSame(a,result[0]);assertEquals(new ZipShort(2),result[2].getHeaderId());assertEquals(new ZipShort(1),result[2].getLocalFileDataLength());assertEquals(new ZipShort(0),result[2].getCentralDirectoryLength());}
/** * test handling of extra fields*/public void testAddAsFirstExtraField(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]data1=ze.getExtra();UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u2.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u2);byte[]data2=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals("second pass",2,result.length);assertSame(u2,result[0]);assertSame(a,result[1]);assertEquals("length second pass",data1.length + 1,data2.length);UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u3);result=ze.getExtraFields();assertEquals("third pass",3,result.length);assertSame(u3,result[0]);assertSame(u2,result[1]);assertSame(a,result[2]);}
public void testUnixMode(){ZipArchiveEntry ze=new ZipArchiveEntry("foo");assertEquals(0,ze.getPlatform());ze.setUnixMode(0755);assertEquals(3,ze.getPlatform());assertEquals(0755,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0444);assertEquals(3,ze.getPlatform());assertEquals(0444,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(1,ze.getExternalAttributes()& 0xFFFF);ze=new ZipArchiveEntry("foo/");assertEquals(0,ze.getPlatform());ze.setUnixMode(0777);assertEquals(3,ze.getPlatform());assertEquals(0777,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x10,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0577);assertEquals(3,ze.getPlatform());assertEquals(0577,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x11,ze.getExternalAttributes()& 0xFFFF);}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-93" >COMPRESS-93</a>.*/public void testCompressionMethod(){ZipArchiveOutputStream zos=new ZipArchiveOutputStream((java.io.OutputStream)null);ZipArchiveEntry entry=new ZipArchiveEntry("foo");assertEquals(-1,entry.getMethod());assertFalse(zos.canWriteEntryData(entry));entry.setMethod(ZipArchiveEntry.STORED);assertEquals(ZipArchiveEntry.STORED,entry.getMethod());assertTrue(zos.canWriteEntryData(entry));entry.setMethod(ZipArchiveEntry.DEFLATED);assertEquals(ZipArchiveEntry.DEFLATED,entry.getMethod());assertTrue(zos.canWriteEntryData(entry));entry.setMethod(6);assertEquals(6,entry.getMethod());assertFalse(zos.canWriteEntryData(entry));}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-94" >COMPRESS-94</a>.*/public void testNotEquals(){ZipArchiveEntry entry1=new ZipArchiveEntry("foo");ZipArchiveEntry entry2=new ZipArchiveEntry("bar");assertFalse(entry1.equals(entry2));}
public void testName(){byte[]buff=new byte[20];String sb1="abcdefghijklmnopqrstuvwxyz";int off=TarUtils.formatNameBytes(sb1,buff,1,buff.length - 1);assertEquals(off,20);String sb2=TarUtils.parseName(buff,1,10);assertEquals(sb2,sb1.substring(0,10));sb2=TarUtils.parseName(buff,1,19);assertEquals(sb2,sb1.substring(0,19));buff=new byte[30];off=TarUtils.formatNameBytes(sb1,buff,1,buff.length - 1);assertEquals(off,30);sb2=TarUtils.parseName(buff,1,buff.length - 1);assertEquals(sb1,sb2);}
public void testParseOctal()throws Exception {long value;byte[]buffer;final long MAX_OCTAL=077777777777L;final String maxOctal="77777777777 ";buffer=maxOctal.getBytes("UTF-8");value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL,value);buffer[buffer.length - 1]=0;value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL,value);buffer=new byte[]{0,0};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);buffer=new byte[]{0,' '};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);}
public void testParseOctalInvalid()throws Exception {byte[]buffer;buffer=new byte[0];try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - should be at least 2 bytes long");}catch(IllegalArgumentException expected){}buffer=new byte[]{0};try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - should be at least 2 bytes long");}catch(IllegalArgumentException expected){}buffer=new byte[]{0,0,' '};try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - not all NULs");}catch(IllegalArgumentException expected){}buffer=new byte[]{' ',0,0,0};try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - not all NULs");}catch(IllegalArgumentException expected){}buffer="abcdef ".getBytes("UTF-8");try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException");}catch(IllegalArgumentException expected){}buffer="77777777777".getBytes("UTF-8");try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - no trailer");}catch(IllegalArgumentException expected){}buffer=" 0 07 ".getBytes("UTF-8");try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - embedded space");}catch(IllegalArgumentException expected){}buffer=" 0\00007 ".getBytes("UTF-8");try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - embedded NUL");}catch(IllegalArgumentException expected){}}
public void testRoundTripOctal(){checkRoundTripOctal(0);checkRoundTripOctal(1);checkRoundTripOctal(077777777777L);}
public void testTrailers(){byte[]buffer=new byte[12];TarUtils.formatLongOctalBytes(123,buffer,0,buffer.length);assertEquals(' ',buffer[buffer.length - 1]);assertEquals('3',buffer[buffer.length - 2]);TarUtils.formatOctalBytes(123,buffer,0,buffer.length);assertEquals(0,buffer[buffer.length - 1]);assertEquals(' ',buffer[buffer.length - 2]);assertEquals('3',buffer[buffer.length - 3]);TarUtils.formatCheckSumOctalBytes(123,buffer,0,buffer.length);assertEquals(' ',buffer[buffer.length - 1]);assertEquals(0,buffer[buffer.length - 2]);assertEquals('3',buffer[buffer.length - 3]);}
public void testNegative(){byte[]buffer=new byte[22];TarUtils.formatUnsignedOctalString(-1,buffer,0,buffer.length);assertEquals("1777777777777777777777",new String(buffer));}
public void testOverflow(){byte[]buffer=new byte[8 - 1];TarUtils.formatUnsignedOctalString(07777777L,buffer,0,buffer.length);assertEquals("7777777",new String(buffer));try {TarUtils.formatUnsignedOctalString(017777777L,buffer,0,buffer.length);fail("Should have cause IllegalArgumentException");}catch(IllegalArgumentException expected){}}
public void testRoundTripNames(){checkName("");checkName("The quick brown fox\n");checkName("\177");checkName("0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1MOE.model");}
public void testCpioArchiveCreation()throws Exception {final File output=new File(dir,"bla.cpio");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("cpio",out);os.putArchiveEntry(new CpioArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new CpioArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}
public void testCpioUnarchive()throws Exception {final File output=new File(dir,"bla.cpio");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final long file1Length=file1.length();final long file2Length=file2.length();{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("cpio",out);CpioArchiveEntry entry=new CpioArchiveEntry("test1.xml",file1Length);entry.setMode(CpioConstants.C_ISREG);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();entry=new CpioArchiveEntry("test2.xml",file2Length);entry.setMode(CpioConstants.C_ISREG);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.finish();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("cpio",is);Map<String,File> result=new HashMap<String,File>();ArchiveEntry entry=null;while ((entry=in.getNextEntry())!= null){File cpioget=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(cpioget);IOUtils.copy(in,out);out.close();result.put(entry.getName(),cpioget);}in.close();is.close();File t=result.get("test1.xml");assertTrue("Expected " + t.getAbsolutePath()+ " to exist",t.exists());assertEquals("length of " + t.getAbsolutePath(),file1Length,t.length());t=result.get("test2.xml");assertTrue("Expected " + t.getAbsolutePath()+ " to exist",t.exists());assertEquals("length of " + t.getAbsolutePath(),file2Length,t.length());}
public void testDirectoryEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();CpioArchiveEntry in=new CpioArchiveEntry(tmp[0],"foo");tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitDirectoryEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();CpioArchiveEntry in=new CpioArchiveEntry("foo/");in.setTime(beforeArchiveWrite / 1000);in.setMode(CpioConstants.C_ISDIR);tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));CpioArchiveEntry in=new CpioArchiveEntry(tmp[1],"foo");tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));CpioArchiveEntry in=new CpioArchiveEntry("foo");in.setTime(tmp[1].lastModified()/ 1000);in.setSize(tmp[1].length());in.setMode(CpioConstants.C_ISREG);tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testXZCreation()throws Exception {final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.xz");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("xz",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
public void testXZUnarchive()throws Exception {final File input=getFile("bla.tar.xz");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("xz",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.xz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("xz",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.xz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new XZCompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testMessageWhenArchiverNameIsNull_1(){try {new ArchiveStreamFactory().createArchiveInputStream(null,System.in);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(ARCHIVER_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
public void testMessageWhenInputStreamIsNull(){try {new ArchiveStreamFactory().createArchiveInputStream("zip",null);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(INPUTSTREAM_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
public void testMessageWhenArchiverNameIsNull_2(){try {new ArchiveStreamFactory().createArchiveOutputStream(null,System.out);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(ARCHIVER_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
public void testMessageWhenOutputStreamIsNull(){try {new ArchiveStreamFactory().createArchiveOutputStream("zip",null);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
/** * Test conversion to bytes.*/public void testToBytes(){ZipShort zs=new ZipShort(0x1234);byte[]result=zs.getBytes();assertEquals("length getBytes",2,result.length);assertEquals("first byte getBytes",0x34,result[0]);assertEquals("second byte getBytes",0x12,result[1]);}
/** * Test conversion from bytes.*/public void testFromBytes(){byte[]val=new byte[]{0x34,0x12};ZipShort zs=new ZipShort(val);assertEquals("value from bytes",0x1234,zs.getValue());}
/** * Test the contract of the equals method.*/public void testEquals(){ZipShort zs=new ZipShort(0x1234);ZipShort zs2=new ZipShort(0x1234);ZipShort zs3=new ZipShort(0x5678);assertTrue("reflexive",zs.equals(zs));assertTrue("works",zs.equals(zs2));assertTrue("works,part two",!zs.equals(zs3));assertTrue("symmetric",zs2.equals(zs));assertTrue("null handling",!zs.equals(null));assertTrue("non ZipShort handling",!zs.equals(new Integer(0x1234)));}
/** * Test sign handling.*/public void testSign(){ZipShort zs=new ZipShort(new byte[]{(byte)0xFF,(byte)0xFF});assertEquals(0x0000FFFF,zs.getValue());}
public void testClone(){ZipShort s1=new ZipShort(42);ZipShort s2=(ZipShort)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}
/** * see https://issues.apache.org/jira/browse/COMPRESS-171*/@Test public void shortTextFilesAreNoTARs()throws Exception {try {new ArchiveStreamFactory().createArchiveInputStream(new ByteArrayInputStream("This certainly is not a tar archive,really,no kidding".getBytes()));fail("created an input stream for a non-archive");}catch(ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}}
public void testZipLong()throws Exception {ZipLong test=ZipUtil.toDosTime(time);assertEquals(test.getValue(),zl.getValue());}
public void testAdjustToLong(){assertEquals(Integer.MAX_VALUE,ZipUtil.adjustToLong(Integer.MAX_VALUE));assertEquals(((long)Integer.MAX_VALUE)+ 1,ZipUtil.adjustToLong(Integer.MAX_VALUE + 1));assertEquals(2 * ((long)Integer.MAX_VALUE),ZipUtil.adjustToLong(2 * Integer.MAX_VALUE));}
public void testMinTime(){byte[]b1=ZipUtil.toDosTime(0);byte b10=b1[0];b1[0]++;byte[]b2=ZipUtil.toDosTime(0);assertEquals(b10,b2[0]);}
/** * Test conversion to bytes.*/public void testToBytes(){ZipLong zl=new ZipLong(0x12345678);byte[]result=zl.getBytes();assertEquals("length getBytes",4,result.length);assertEquals("first byte getBytes",0x78,result[0]);assertEquals("second byte getBytes",0x56,result[1]);assertEquals("third byte getBytes",0x34,result[2]);assertEquals("fourth byte getBytes",0x12,result[3]);}
/** * Test conversion from bytes.*/public void testFromBytes(){byte[]val=new byte[]{0x78,0x56,0x34,0x12};ZipLong zl=new ZipLong(val);assertEquals("value from bytes",0x12345678,zl.getValue());}
/** * Test the contract of the equals method.*/public void testEquals(){ZipLong zl=new ZipLong(0x12345678);ZipLong zl2=new ZipLong(0x12345678);ZipLong zl3=new ZipLong(0x87654321);assertTrue("reflexive",zl.equals(zl));assertTrue("works",zl.equals(zl2));assertTrue("works,part two",!zl.equals(zl3));assertTrue("symmetric",zl2.equals(zl));assertTrue("null handling",!zl.equals(null));assertTrue("non ZipLong handling",!zl.equals(new Integer(0x1234)));}
/** * Test sign handling.*/public void testSign(){ZipLong zl=new ZipLong(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(0x00000000FFFFFFFFl,zl.getValue());}
public void testClone(){ZipLong s1=new ZipLong(42);ZipLong s2=(ZipLong)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}
public void testRead7ZipMultiVolumeArchiveForStream()throws IOException,URISyntaxException {URL zip=getClass().getResource("/apache-maven-2.2.1.zip.001");FileInputStream archive=new FileInputStream(new File(new URI(zip.toString())));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,null,false);for (int i=0;i < ENTRIES.length;i++){assertEquals(ENTRIES[i],zi.getNextEntry().getName());}ArchiveEntry lastEntry=zi.getNextEntry();assertEquals(LAST_ENTRY_NAME,lastEntry.getName());byte[]buffer=new byte[4096];try {while (zi.read(buffer)> 0){}fail("shouldn't be able to read from truncated entry");}catch(IOException e){assertEquals("Truncated ZIP file",e.getMessage());}try {zi.getNextEntry();fail("shouldn't be able to read another entry from truncated" + " file");}catch(IOException e){}}finally {if (zi != null){zi.close();}}}
public void testRead7ZipMultiVolumeArchiveForFile()throws URISyntaxException {URL zip=getClass().getResource("/apache-maven-2.2.1.zip.001");File file=new File(new URI(zip.toString()));try {new ZipFile(file);fail("Expected ZipFile to fail");}catch(IOException ex){}}
@Test public void publicNameAddsTrailingSlashForDirectories(){DumpArchiveEntry ent=new DumpArchiveEntry("foo","bar",-1,DumpArchiveEntry.TYPE.DIRECTORY);assertEquals("bar",ent.getSimpleName());assertEquals("foo",ent.getOriginalName());assertEquals("foo/",ent.getName());}
@Test public void publicNameRemovesLeadingDotSlash(){DumpArchiveEntry ent=new DumpArchiveEntry("./foo","bar");assertEquals("bar",ent.getSimpleName());assertEquals("./foo",ent.getOriginalName());assertEquals("foo",ent.getName());}
public void testBzipCreation()throws Exception {File output=null;final File input=getFile("test.txt");{output=new File(dir,"test.txt.bz2");final OutputStream out=new FileOutputStream(output);final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("bzip2",out);FileInputStream in=new FileInputStream(input);IOUtils.copy(in,cos);cos.close();in.close();}final File decompressed=new File(dir,"decompressed.txt");{final File toDecompress=output;final InputStream is=new FileInputStream(toDecompress);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);FileOutputStream os=new FileOutputStream(decompressed);IOUtils.copy(in,os);is.close();os.close();}assertEquals(input.length(),decompressed.length());}
public void testBzip2Unarchive()throws Exception {final File input=getFile("bla.txt.bz2");final File output=new File(dir,"bla.txt");final InputStream is=new FileInputStream(input);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);FileOutputStream os=new FileOutputStream(output);IOUtils.copy(in,os);is.close();os.close();}
public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new BZip2CompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testWriteOldBinary()throws Exception {final File f=getFile("test1.xml");final File output=new File(dir,"test.cpio");final FileOutputStream out=new FileOutputStream(output);InputStream in=null;try {final CpioArchiveOutputStream os=new CpioArchiveOutputStream(out,CpioArchiveOutputStream.FORMAT_OLD_BINARY);os.putArchiveEntry(new CpioArchiveEntry(CpioArchiveOutputStream.FORMAT_OLD_BINARY,f,"test1.xml"));IOUtils.copy(in=new FileInputStream(f),os);in.close();in=null;os.closeArchiveEntry();os.close();}finally {if (in != null){in.close();}out.close();}try {in=new CpioArchiveInputStream(new FileInputStream(output));CpioArchiveEntry e=((CpioArchiveInputStream)in).getNextCPIOEntry();assertEquals("test1.xml",e.getName());assertNull(((CpioArchiveInputStream)in).getNextEntry());}finally {if (in != null){in.close();}}}
public void testCount()throws Exception {File f=File.createTempFile("commons-compress-tarcount",".tar");f.deleteOnExit();FileOutputStream fos=new FileOutputStream(f);ArchiveOutputStream tarOut=new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR,fos);File file1=getFile("test1.xml");TarArchiveEntry sEntry=new TarArchiveEntry(file1);tarOut.putArchiveEntry(sEntry);FileInputStream in=new FileInputStream(file1);byte[]buf=new byte[8192];int read=0;while ((read=in.read(buf))> 0){tarOut.write(buf,0,read);}in.close();tarOut.closeArchiveEntry();tarOut.close();assertEquals(f.length(),tarOut.getBytesWritten());}
public void testMaxFileSizeError()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(077777777777L);TarArchiveOutputStream tos=new TarArchiveOutputStream(new ByteArrayOutputStream());tos.putArchiveEntry(t);t.setSize(0100000000000L);tos=new TarArchiveOutputStream(new ByteArrayOutputStream());try {tos.putArchiveEntry(t);fail("Should have generated RuntimeException");}catch(RuntimeException expected){}}
public void testBigFileStarMode()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(0100000000000L);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_STAR);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);byte[]data=bos.toByteArray();assertEquals(0x80,((int)data[TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN])& 0x80);TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(0100000000000L,e.getSize());}
public void testBigFilePosixMode()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(0100000000000L);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);byte[]data=bos.toByteArray();assertEquals("00000000000 ",new String(data,1024 + TarConstants.NAMELEN + TarConstants.MODELEN+ TarConstants.UIDLEN+ TarConstants.GIDLEN,12,"UTF-8"));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(0100000000000L,e.getSize());}
public void testWriteSimplePaxHeaders()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("a","b");byte[]data=writePaxHeader(m);assertEquals("00000000006 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,"UTF-8"));assertEquals("6 a=b\n",new String(data,512,6,"UTF-8"));}
public void testPaxHeadersWithLength99()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("a","0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "012");byte[]data=writePaxHeader(m);assertEquals("00000000143 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,"UTF-8"));assertEquals("99 a=0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "012\n",new String(data,512,99,"UTF-8"));}
public void testPaxHeadersWithLength101()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("a","0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "0123");byte[]data=writePaxHeader(m);assertEquals("00000000145 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,"UTF-8"));assertEquals("101 a=0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "0123\n",new String(data,512,101,"UTF-8"));}
public void testWriteLongFileNamePosixMode()throws Exception {String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789";TarArchiveEntry t=new TarArchiveEntry(n);t.setSize(10 * 1024);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();byte[]data=bos.toByteArray();assertEquals("160 path=" + n + "\n",new String(data,512,160,"UTF-8"));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());}
/** * Test conversion to bytes.*/public void testLongToBytes(){ZipEightByteInteger zl=new ZipEightByteInteger(0xAB12345678l);byte[]result=zl.getBytes();assertEquals("length getBytes",8,result.length);assertEquals("first byte getBytes",0x78,result[0]);assertEquals("second byte getBytes",0x56,result[1]);assertEquals("third byte getBytes",0x34,result[2]);assertEquals("fourth byte getBytes",0x12,result[3]);assertEquals("fifth byte getBytes",(byte)0xAB,result[4]);assertEquals("sixth byte getBytes",0,result[5]);assertEquals("seventh byte getBytes",0,result[6]);assertEquals("eighth byte getBytes",0,result[7]);}
/** * Test conversion from bytes.*/public void testLongFromBytes(){byte[]val=new byte[]{0x78,0x56,0x34,0x12,(byte)0xAB,0x00,0x00,0x00};ZipEightByteInteger zl=new ZipEightByteInteger(val);assertEquals("longValue from bytes",0xAB12345678l,zl.getLongValue());}
/** * Test conversion to bytes.*/public void testBIToBytes(){ZipEightByteInteger zl=new ZipEightByteInteger(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1));byte[]result=zl.getBytes();assertEquals("length getBytes",8,result.length);assertEquals("first byte getBytes",(byte)0xFE,result[0]);assertEquals("second byte getBytes",(byte)0xFF,result[1]);assertEquals("third byte getBytes",(byte)0xFF,result[2]);assertEquals("fourth byte getBytes",(byte)0xFF,result[3]);assertEquals("fifth byte getBytes",(byte)0xFF,result[4]);assertEquals("sixth byte getBytes",(byte)0xFF,result[5]);assertEquals("seventh byte getBytes",(byte)0xFF,result[6]);assertEquals("eighth byte getBytes",(byte)0xFF,result[7]);}
/** * Test conversion from bytes.*/public void testBIFromBytes(){byte[]val=new byte[]{(byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};ZipEightByteInteger zl=new ZipEightByteInteger(val);assertEquals("value from bytes",BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1),zl.getValue());}
/** * Test the contract of the equals method.*/public void testEquals(){ZipEightByteInteger zl=new ZipEightByteInteger(0x12345678);ZipEightByteInteger zl2=new ZipEightByteInteger(0x12345678);ZipEightByteInteger zl3=new ZipEightByteInteger(0x87654321);assertTrue("reflexive",zl.equals(zl));assertTrue("works",zl.equals(zl2));assertTrue("works,part two",!zl.equals(zl3));assertTrue("symmetric",zl2.equals(zl));assertTrue("null handling",!zl.equals(null));assertTrue("non ZipEightByteInteger handling",!zl.equals(new Integer(0x1234)));}
/** * Test sign handling.*/public void testSign(){ZipEightByteInteger zl=new ZipEightByteInteger(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1).setBit(0),zl.getValue());}
public void testIsCompressedFilename(){assertFalse(GzipUtils.isCompressedFilename(""));assertFalse(GzipUtils.isCompressedFilename(".gz"));assertTrue(GzipUtils.isCompressedFilename("x.tgz"));assertTrue(GzipUtils.isCompressedFilename("x.taz"));assertTrue(GzipUtils.isCompressedFilename("x.svgz"));assertTrue(GzipUtils.isCompressedFilename("x.cpgz"));assertTrue(GzipUtils.isCompressedFilename("x.wmz"));assertTrue(GzipUtils.isCompressedFilename("x.emz"));assertTrue(GzipUtils.isCompressedFilename("x.gz"));assertTrue(GzipUtils.isCompressedFilename("x.z"));assertTrue(GzipUtils.isCompressedFilename("x-gz"));assertTrue(GzipUtils.isCompressedFilename("x-z"));assertTrue(GzipUtils.isCompressedFilename("x_z"));assertFalse(GzipUtils.isCompressedFilename("xxgz"));assertFalse(GzipUtils.isCompressedFilename("xzz"));assertFalse(GzipUtils.isCompressedFilename("xaz"));assertTrue(GzipUtils.isCompressedFilename("x.SVGZ"));assertTrue(GzipUtils.isCompressedFilename("x.Svgz"));assertTrue(GzipUtils.isCompressedFilename("x.svGZ"));assertFalse(GzipUtils.isCompressedFilename("x.wmz "));assertFalse(GzipUtils.isCompressedFilename("x.wmz\n"));assertFalse(GzipUtils.isCompressedFilename("x.wmz.y"));}
public void testGetUncompressedFilename(){assertEquals("",GzipUtils.getUncompressedFilename(""));assertEquals(".gz",GzipUtils.getUncompressedFilename(".gz"));assertEquals("x.tar",GzipUtils.getUncompressedFilename("x.tgz"));assertEquals("x.tar",GzipUtils.getUncompressedFilename("x.taz"));assertEquals("x.svg",GzipUtils.getUncompressedFilename("x.svgz"));assertEquals("x.cpio",GzipUtils.getUncompressedFilename("x.cpgz"));assertEquals("x.wmf",GzipUtils.getUncompressedFilename("x.wmz"));assertEquals("x.emf",GzipUtils.getUncompressedFilename("x.emz"));assertEquals("x",GzipUtils.getUncompressedFilename("x.gz"));assertEquals("x",GzipUtils.getUncompressedFilename("x.z"));assertEquals("x",GzipUtils.getUncompressedFilename("x-gz"));assertEquals("x",GzipUtils.getUncompressedFilename("x-z"));assertEquals("x",GzipUtils.getUncompressedFilename("x_z"));assertEquals("x.svg",GzipUtils.getUncompressedFilename("x.SVGZ"));assertEquals("X.svg",GzipUtils.getUncompressedFilename("X.SVGZ"));assertEquals("X.svg",GzipUtils.getUncompressedFilename("X.svGZ"));assertEquals("x.wmz ",GzipUtils.getUncompressedFilename("x.wmz "));assertEquals("x.wmz\n",GzipUtils.getUncompressedFilename("x.wmz\n"));assertEquals("x.wmz.y",GzipUtils.getUncompressedFilename("x.wmz.y"));}
public void testGetCompressedFilename(){assertEquals(".gz",GzipUtils.getCompressedFilename(""));assertEquals("x.gz",GzipUtils.getCompressedFilename("x"));assertEquals("x.tgz",GzipUtils.getCompressedFilename("x.tar"));assertEquals("x.svgz",GzipUtils.getCompressedFilename("x.svg"));assertEquals("x.cpgz",GzipUtils.getCompressedFilename("x.cpio"));assertEquals("x.wmz",GzipUtils.getCompressedFilename("x.wmf"));assertEquals("x.emz",GzipUtils.getCompressedFilename("x.emf"));assertEquals("x.svgz",GzipUtils.getCompressedFilename("x.SVG"));assertEquals("X.svgz",GzipUtils.getCompressedFilename("X.SVG"));assertEquals("X.svgz",GzipUtils.getCompressedFilename("X.svG"));assertEquals("x.wmf .gz",GzipUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.gz",GzipUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.gz",GzipUtils.getCompressedFilename("x.wmf.y"));}
public void testIsCompressedFilename(){assertFalse(BZip2Utils.isCompressedFilename(""));assertFalse(BZip2Utils.isCompressedFilename(".gz"));assertTrue(BZip2Utils.isCompressedFilename("x.tbz2"));assertTrue(BZip2Utils.isCompressedFilename("x.tbz"));assertTrue(BZip2Utils.isCompressedFilename("x.bz2"));assertTrue(BZip2Utils.isCompressedFilename("x.bz"));assertFalse(BZip2Utils.isCompressedFilename("xbz2"));assertFalse(BZip2Utils.isCompressedFilename("xbz"));assertTrue(BZip2Utils.isCompressedFilename("x.TBZ2"));assertTrue(BZip2Utils.isCompressedFilename("x.Tbz2"));assertTrue(BZip2Utils.isCompressedFilename("x.tbZ2"));assertFalse(BZip2Utils.isCompressedFilename("x.bz "));assertFalse(BZip2Utils.isCompressedFilename("x.tbz\n"));assertFalse(BZip2Utils.isCompressedFilename("x.tbz2.y"));}
public void testGetUncompressedFilename(){assertEquals("",BZip2Utils.getUncompressedFilename(""));assertEquals(".bz2",BZip2Utils.getUncompressedFilename(".bz2"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.tbz2"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.tbz"));assertEquals("x",BZip2Utils.getUncompressedFilename("x.bz2"));assertEquals("x",BZip2Utils.getUncompressedFilename("x.bz"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.TBZ2"));assertEquals("X.tar",BZip2Utils.getUncompressedFilename("X.Tbz2"));assertEquals("X.tar",BZip2Utils.getUncompressedFilename("X.tbZ2"));assertEquals("x.bz ",BZip2Utils.getUncompressedFilename("x.bz "));assertEquals("x.tbz\n",BZip2Utils.getUncompressedFilename("x.tbz\n"));assertEquals("x.tbz2.y",BZip2Utils.getUncompressedFilename("x.tbz2.y"));}
public void testGetCompressedFilename(){assertEquals(".bz2",BZip2Utils.getCompressedFilename(""));assertEquals(" .bz2",BZip2Utils.getCompressedFilename(" "));assertEquals("x.bz2",BZip2Utils.getCompressedFilename("x"));assertEquals("X.bz2",BZip2Utils.getCompressedFilename("X"));assertEquals("x.tar.bz2",BZip2Utils.getCompressedFilename("x.tar"));assertEquals("x.tar.bz2",BZip2Utils.getCompressedFilename("x.TAR"));}
public void testUtf8FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,true,true);}
public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,false,true);}
public void testCP437FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,true);}
public void testASCIIFileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(US_ASCII,false,true);}
public void testUtf8FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,true,false);}
public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,false,false);}
public void testCP437FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,false);}
public void testASCIIFileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(US_ASCII,false,false);}
public void testRead7ZipArchive()throws IOException,URISyntaxException {URL zip=getClass().getResource("/utf8-7zip-test.zip");File archive=new File(new URI(zip.toString()));ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);}}
public void testRead7ZipArchiveForStream()throws IOException,URISyntaxException {URL zip=getClass().getResource("/utf8-7zip-test.zip");FileInputStream archive=new FileInputStream(new File(new URI(zip.toString())));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,CP437,false);assertEquals(ASCII_TXT,zi.getNextEntry().getName());assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}}}
public void testReadWinZipArchive()throws IOException,URISyntaxException {URL zip=getClass().getResource("/utf8-winzip-test.zip");File archive=new File(new URI(zip.toString()));ZipFile zf=null;try {zf=new ZipFile(archive,null,true);assertCanRead(zf,ASCII_TXT);assertCanRead(zf,EURO_FOR_DOLLAR_TXT);assertCanRead(zf,OIL_BARREL_TXT);}finally {ZipFile.closeQuietly(zf);}}
public void testReadWinZipArchiveForStream()throws IOException,URISyntaxException {URL zip=getClass().getResource("/utf8-winzip-test.zip");FileInputStream archive=new FileInputStream(new File(new URI(zip.toString())));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,null,true);assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(ASCII_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}}}
public void testZipFileReadsUnicodeFields()throws IOException {File file=File.createTempFile("unicode-test",".zip");file.deleteOnExit();ZipArchiveInputStream zi=null;try {createTestFile(file,US_ASCII,false,true);FileInputStream archive=new FileInputStream(file);zi=new ZipArchiveInputStream(archive,US_ASCII,true);assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());assertEquals(ASCII_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}tryHardToDelete(file);}}
public void testZipArchiveInputStreamReadsUnicodeFields()throws IOException {File file=File.createTempFile("unicode-test",".zip");file.deleteOnExit();ZipFile zf=null;try {createTestFile(file,US_ASCII,false,true);zf=new ZipFile(file,US_ASCII,true);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);tryHardToDelete(file);}}
public void testRawNameReadFromZipFile()throws IOException,URISyntaxException {URL zip=getClass().getResource("/utf8-7zip-test.zip");File archive=new File(new URI(zip.toString()));ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertRawNameOfAcsiiTxt(zf.getEntry(ASCII_TXT));}finally {ZipFile.closeQuietly(zf);}}
public void testRawNameReadFromStream()throws IOException,URISyntaxException {URL zip=getClass().getResource("/utf8-7zip-test.zip");FileInputStream archive=new FileInputStream(new File(new URI(zip.toString())));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,CP437,false);assertRawNameOfAcsiiTxt((ZipArchiveEntry)zi.getNextEntry());}finally {if (zi != null){zi.close();}}}
public void testUtf8Interoperability()throws IOException {File file1=super.getFile("utf8-7zip-test.zip");File file2=super.getFile("utf8-winzip-test.zip");testFile(file1,CP437);testFile(file2,CP437);}
@Test public void oldBinMagic2ByteArrayNotSwapped(){assertArrayEquals(new byte[]{(byte)0xc7,0x71},CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,2,false));}
@Test public void oldBinMagic2ByteArraySwapped(){assertArrayEquals(new byte[]{0x71,(byte)0xc7},CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,2,true));}
@Test public void oldBinMagicFromByteArrayNotSwapped(){assertEquals(CpioConstants.MAGIC_OLD_BINARY,CpioUtil.byteArray2long(new byte[]{(byte)0xc7,0x71},false));}
@Test public void oldBinMagicFromByteArraySwapped(){assertEquals(CpioConstants.MAGIC_OLD_BINARY,CpioUtil.byteArray2long(new byte[]{0x71,(byte)0xc7},true));}
public void testTarArchiveCreation()throws Exception {final File output=new File(dir,"bla.tar");final File file1=getFile("test1.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("tar",out);final TarArchiveEntry entry=new TarArchiveEntry("testdata/test1.xml");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.close();}
public void testTarArchiveLongNameCreation()throws Exception {String name="testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml";byte[]bytes=name.getBytes("UTF-8");assertEquals(bytes.length,99);final File output=new File(dir,"bla.tar");final File file1=getFile("test1.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("tar",out);final TarArchiveEntry entry=new TarArchiveEntry(name);entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);os.putArchiveEntry(entry);FileInputStream in=new FileInputStream(file1);IOUtils.copy(in,os);os.closeArchiveEntry();os.close();out.close();in.close();ArchiveOutputStream os2=null;try {String toLongName="testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml";final File output2=new File(dir,"bla.tar");final OutputStream out2=new FileOutputStream(output2);os2=new ArchiveStreamFactory().createArchiveOutputStream("tar",out2);final TarArchiveEntry entry2=new TarArchiveEntry(toLongName);entry2.setModTime(0);entry2.setSize(file1.length());entry2.setUserId(0);entry2.setGroupId(0);entry2.setUserName("avalon");entry2.setGroupName("excalibur");entry2.setMode(0100000);os2.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os2);os2.closeArchiveEntry();}catch(IOException e){assertTrue(true);}finally {if (os2 != null){os2.close();}}}
public void testTarUnarchive()throws Exception {final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("tar",is);final TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);in.close();out.close();}
public void testCOMPRESS114()throws Exception {final File input=getFile("COMPRESS-114.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("tar",is);TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();assertEquals("3\u00b1\u00b1\u00b1F06\u00b1W2345\u00b1ZB\u00b1la\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1BLA",entry.getName());entry=(TarArchiveEntry)in.getNextEntry();assertEquals("0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W2345\u00b1ZB\u00b1la\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1BLA",entry.getName());in.close();}
public void testDirectoryEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();TarArchiveEntry in=new TarArchiveEntry(tmp[0],"foo");tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitDirectoryEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();TarArchiveEntry in=new TarArchiveEntry("foo/");in.setModTime(beforeArchiveWrite);tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));TarArchiveEntry in=new TarArchiveEntry(tmp[1],"foo");tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));TarArchiveEntry in=new TarArchiveEntry("foo");in.setModTime(tmp[1].lastModified());in.setSize(tmp[1].length());tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testCompareBA(){byte[]buffer1={1,2,3};byte[]buffer2={1,2,3,0};byte[]buffer3={1,2,3};assertTrue(ArchiveUtils.isEqual(buffer1,buffer2,true));assertFalse(ArchiveUtils.isEqual(buffer1,buffer2,false));assertFalse(ArchiveUtils.isEqual(buffer1,buffer2));assertTrue(ArchiveUtils.isEqual(buffer2,buffer1,true));assertFalse(ArchiveUtils.isEqual(buffer2,buffer1,false));assertFalse(ArchiveUtils.isEqual(buffer2,buffer1));assertTrue(ArchiveUtils.isEqual(buffer1,buffer3));assertTrue(ArchiveUtils.isEqual(buffer3,buffer1));}
public void testCompareAscii(){byte[]buffer1={'a','b','c'};byte[]buffer2={'d','e','f',0};assertTrue(ArchiveUtils.matchAsciiBuffer("abc",buffer1));assertFalse(ArchiveUtils.matchAsciiBuffer("abc\0",buffer1));assertTrue(ArchiveUtils.matchAsciiBuffer("def\0",buffer2));assertFalse(ArchiveUtils.matchAsciiBuffer("def",buffer2));}
public void testAsciiConversions(){asciiToByteAndBackOK("");asciiToByteAndBackOK("abcd");asciiToByteAndBackFail("\u8025");}
public void testDefaults(){assertFalse(new GeneralPurposeBit().usesDataDescriptor());assertFalse(new GeneralPurposeBit().usesUTF8ForNames());assertFalse(new GeneralPurposeBit().usesEncryption());assertFalse(new GeneralPurposeBit().usesStrongEncryption());byte[]b=new byte[2];assertTrue(Arrays.equals(b,new GeneralPurposeBit().encode()));}
public void testParseEdgeCases(){assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesDataDescriptor());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesUTF8ForNames());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesEncryption());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesStrongEncryption());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesDataDescriptor());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesUTF8ForNames());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesEncryption());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesStrongEncryption());}
public void testDataDescriptor(){byte[]flags=new byte[]{(byte)8,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesDataDescriptor());GeneralPurposeBit b=new GeneralPurposeBit();b.useDataDescriptor(true);assertTrue(Arrays.equals(flags,b.encode()));}
public void testLanguageEncodingFlag(){byte[]flags=new byte[]{(byte)0,(byte)8};assertTrue(GeneralPurposeBit.parse(flags,0).usesUTF8ForNames());GeneralPurposeBit b=new GeneralPurposeBit();b.useUTF8ForNames(true);assertTrue(Arrays.equals(flags,b.encode()));}
public void testEncryption(){byte[]flags=new byte[]{(byte)1,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesEncryption());GeneralPurposeBit b=new GeneralPurposeBit();b.useEncryption(true);assertTrue(Arrays.equals(flags,b.encode()));}
public void testStringEncryption(){byte[]flags=new byte[]{(byte)65,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesStrongEncryption());GeneralPurposeBit b=new GeneralPurposeBit();b.useStrongEncryption(true);assertTrue(b.usesEncryption());assertTrue(Arrays.equals(flags,b.encode()));flags=new byte[]{(byte)64,(byte)0};assertFalse(GeneralPurposeBit.parse(flags,0).usesStrongEncryption());}
public void testSimpleCp437Encoding()throws IOException {doSimpleEncodingTest("Cp437",null);}
public void testSimpleCp850Encoding()throws IOException {doSimpleEncodingTest("Cp850",null);}
public void testNioCp1252Encoding()throws IOException {byte[]b=new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,(byte)0x80,(byte)0x82,(byte)0x83,(byte)0x84,(byte)0x85,(byte)0x86,(byte)0x87,(byte)0x88,(byte)0x89,(byte)0x8A,(byte)0x8B,(byte)0x8C,(byte)0x8E,(byte)0x91,(byte)0x92,(byte)0x93,(byte)0x94,(byte)0x95,(byte)0x96,(byte)0x97,(byte)0x98,(byte)0x99,(byte)0x9A,(byte)0x9B,(byte)0x9C,(byte)0x9E,(byte)0x9F,(byte)0xA0,(byte)0xA1,(byte)0xA2,(byte)0xA3,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0xA7,(byte)0xA8,(byte)0xA9,(byte)0xAA,(byte)0xAB,(byte)0xAC,(byte)0xAD,(byte)0xAE,(byte)0xAF,(byte)0xB0,(byte)0xB1,(byte)0xB2,(byte)0xB3,(byte)0xB4,(byte)0xB5,(byte)0xB6,(byte)0xB7,(byte)0xB8,(byte)0xB9,(byte)0xBA,(byte)0xBB,(byte)0xBC,(byte)0xBD,(byte)0xBE,(byte)0xBF,(byte)0xC0,(byte)0xC1,(byte)0xC2,(byte)0xC3,(byte)0xC4,(byte)0xC5,(byte)0xC6,(byte)0xC7,(byte)0xC8,(byte)0xC9,(byte)0xCA,(byte)0xCB,(byte)0xCC,(byte)0xCD,(byte)0xCE,(byte)0xCF,(byte)0xD0,(byte)0xD1,(byte)0xD2,(byte)0xD3,(byte)0xD4,(byte)0xD5,(byte)0xD6,(byte)0xD7,(byte)0xD8,(byte)0xD9,(byte)0xDA,(byte)0xDB,(byte)0xDC,(byte)0xDD,(byte)0xDE,(byte)0xDF,(byte)0xE0,(byte)0xE1,(byte)0xE2,(byte)0xE3,(byte)0xE4,(byte)0xE5,(byte)0xE6,(byte)0xE7,(byte)0xE8,(byte)0xE9,(byte)0xEA,(byte)0xEB,(byte)0xEC,(byte)0xED,(byte)0xEE,(byte)0xEF,(byte)0xF0,(byte)0xF1,(byte)0xF2,(byte)0xF3,(byte)0xF4,(byte)0xF5,(byte)0xF6,(byte)0xF7,(byte)0xF8,(byte)0xF9,(byte)0xFA,(byte)0xFB,(byte)0xFC,(byte)0xFD,(byte)0xFE,(byte)0xFF};doSimpleEncodingTest("Cp1252",b);}
/** * Archives 2 files and unarchives it again. If the file length of result and source is the same,it looks like the operations have worked* @throws Exception*/public void testZipArchiveCreation()throws Exception {final File output=new File(dir,"bla.zip");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);ArchiveOutputStream os=null;try {os=new ArchiveStreamFactory().createArchiveOutputStream("zip",out);os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();}finally {if (os != null){os.close();}}out.close();List<File> results=new ArrayList<File>();final InputStream is=new FileInputStream(output);ArchiveInputStream in=null;try {in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){File outfile=new File(resultDir.getCanonicalPath()+ "/result/" + entry.getName());outfile.getParentFile().mkdirs();OutputStream o=new FileOutputStream(outfile);try {IOUtils.copy(in,o);}finally {o.close();}results.add(outfile);}}finally {if (in != null){in.close();}}is.close();assertEquals(results.size(),2);File result=results.get(0);assertEquals(file1.length(),result.length());result=results.get(1);assertEquals(file2.length(),result.length());}
/** * Simple unarchive test. Asserts nothing.* @throws Exception*/public void testZipUnarchive()throws Exception {final File input=getFile("bla.zip");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);final ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);out.close();in.close();}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-93" >COMPRESS-93</a>.*/public void testSupportedCompressionMethod()throws IOException {ZipFile bla=new ZipFile(getFile("bla.zip"));assertTrue(bla.canReadEntryData(bla.getEntry("test1.xml")));bla.close();ZipFile moby=new ZipFile(getFile("moby.zip"));assertFalse(moby.canReadEntryData(moby.getEntry("README")));moby.close();}
/** * Test case for being able to skip an entry in an  {@link ZipArchiveInputStream}even if the compression method of thatentry is unsupported.* @see <a href="https://issues.apache.org/jira/browse/COMPRESS-93"*        >COMPRESS-93</a>*/public void testSkipEntryWithUnsupportedCompressionMethod()throws IOException {ZipArchiveInputStream zip=new ZipArchiveInputStream(new FileInputStream(getFile("moby.zip")));try {ZipArchiveEntry entry=zip.getNextZipEntry();assertEquals("README",entry.getName());assertFalse(zip.canReadEntryData(entry));try {assertNull(zip.getNextZipEntry());}catch(IOException e){fail("COMPRESS-93: Unable to skip an unsupported zip entry");}}finally {zip.close();}}
/** * Checks if all entries from a nested archive can be read. The archive: OSX_ArchiveWithNestedArchive.zip contains: NestedArchiv.zip and test.xml3. The nested archive:  NestedArchive.zip contains test1.xml and test2.xml* @throws Exception*/public void testListAllFilesWithNestedArchive()throws Exception {final File input=getFile("OSX_ArchiveWithNestedArchive.zip");List<String> results=new ArrayList<String>();final InputStream is=new FileInputStream(input);ArchiveInputStream in=null;try {in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){results.add((entry.getName()));ArchiveInputStream nestedIn=new ArchiveStreamFactory().createArchiveInputStream("zip",in);ZipArchiveEntry nestedEntry=null;while ((nestedEntry=(ZipArchiveEntry)nestedIn.getNextEntry())!= null){results.add(nestedEntry.getName());}}}finally {if (in != null){in.close();}}is.close();results.contains("NestedArchiv.zip");results.contains("test1.xml");results.contains("test2.xml");results.contains("test3.xml");}
public void testDirectoryEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);long beforeArchiveWrite=tmp[0].lastModified();ZipArchiveEntry in=new ZipArchiveEntry(tmp[0],"foo");zos.putArchiveEntry(in);zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo/");assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 2000,out.getLastModifiedDate().getTime()/ 2000);assertTrue(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitDirectoryEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);long beforeArchiveWrite=tmp[0].lastModified();ZipArchiveEntry in=new ZipArchiveEntry("foo/");in.setTime(beforeArchiveWrite);zos.putArchiveEntry(in);zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo/");assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 2000,out.getLastModifiedDate().getTime()/ 2000);assertTrue(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);ZipArchiveEntry in=new ZipArchiveEntry(tmp[1],"foo");zos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){zos.write(b);}fis.close();fis=null;zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo");assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 2000,out.getLastModifiedDate().getTime()/ 2000);assertFalse(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);ZipArchiveEntry in=new ZipArchiveEntry("foo");in.setTime(tmp[1].lastModified());in.setSize(tmp[1].length());zos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){zos.write(b);}fis.close();fis=null;zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo");assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 2000,out.getLastModifiedDate().getTime()/ 2000);assertFalse(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void convert64(){assertEquals(0xABCDEF0123456780L,DumpArchiveUtil.convert64(new byte[]{(byte)0x80,0x67,0x45,0x23,1,(byte)0xEF,(byte)0xCD,(byte)0xAB},0));}
@Test public void convert32(){assertEquals(0xABCDEF01,DumpArchiveUtil.convert32(new byte[]{1,(byte)0xEF,(byte)0xCD,(byte)0xAB},0));}
@Test public void convert16(){assertEquals(0xABCD,DumpArchiveUtil.convert16(new byte[]{(byte)0xCD,(byte)0xAB},0));}
public void testWriteCDOnlySizes(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE);assertEquals(new ZipShort(16),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(16,b.length);checkSizes(b);}
public void testWriteCDSizeAndOffset(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,OFF,null);assertEquals(new ZipShort(24),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(24,b.length);checkSizes(b);checkOffset(b,16);}
public void testWriteCDSizeOffsetAndDisk(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,OFF,DISK);assertEquals(new ZipShort(28),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(28,b.length);checkSizes(b);checkOffset(b,16);checkDisk(b,24);}
public void testWriteCDSizeAndDisk(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,null,DISK);assertEquals(new ZipShort(20),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(20,b.length);checkSizes(b);checkDisk(b,16);}
public void testReadLFHSizesOnly()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[16];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testReadLFHSizesAndOffset()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[24];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testReadLFHSizesOffsetAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[28];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);System.arraycopy(DISK.getBytes(),0,b,24,4);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReadLFHSizesAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[20];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(DISK.getBytes(),0,b,16,4);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReadCDSizesOffsetAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[28];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);System.arraycopy(DISK.getBytes(),0,b,24,4);f.parseFromCentralDirectoryData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReadCDSizesAndOffset()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[24];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);f.parseFromCentralDirectoryData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testReadCDSomethingAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[12];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(DISK.getBytes(),0,b,8,4);f.parseFromCentralDirectoryData(b,0,b.length);assertNull(f.getSize());assertNull(f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReparseCDSingleEightByteData()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[8];System.arraycopy(SIZE.getBytes(),0,b,0,8);f.parseFromCentralDirectoryData(b,0,b.length);f.reparseCentralDirectoryData(true,false,false,false);assertEquals(SIZE,f.getSize());assertNull(f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());f.setSize(null);f.reparseCentralDirectoryData(false,true,false,false);assertNull(f.getSize());assertEquals(SIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());f.setCompressedSize(null);f.reparseCentralDirectoryData(false,false,true,false);assertNull(f.getSize());assertNull(f.getCompressedSize());assertEquals(SIZE,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testDetectionNotArchive()throws FileNotFoundException {try {getStreamFor("test.txt");fail("Expected ArchiveException");}catch(ArchiveException e){}}
public void testCOMPRESS117()throws Exception {final ArchiveInputStream tar=getStreamFor("COMPRESS-117.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);}
public void testDetection()throws Exception {final ArchiveInputStream ar=getStreamFor("bla.ar");assertNotNull(ar);assertTrue(ar instanceof ArArchiveInputStream);final ArchiveInputStream tar=getStreamFor("bla.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);final ArchiveInputStream zip=getStreamFor("bla.zip");assertNotNull(zip);assertTrue(zip instanceof ZipArchiveInputStream);final ArchiveInputStream jar=getStreamFor("bla.jar");assertNotNull(jar);assertTrue(jar instanceof ZipArchiveInputStream);final ArchiveInputStream cpio=getStreamFor("bla.cpio");assertNotNull(cpio);assertTrue(cpio instanceof CpioArchiveInputStream);}
public void testEmptyCpioArchive()throws Exception {checkEmptyArchive("cpio");}
public void testEmptyJarArchive()throws Exception {checkEmptyArchive("jar");}
public void testEmptyZipArchive()throws Exception {checkEmptyArchive("zip");}
public void testNotADumpArchive()throws Exception {FileInputStream is=new FileInputStream(getFile("bla.zip"));try {new DumpArchiveInputStream(is);fail("expected an exception");}catch(ArchiveException ex){assertTrue(ex.getCause()instanceof ShortFileException);}finally {is.close();}}
public void testNotADumpArchiveButBigEnough()throws Exception {FileInputStream is=new FileInputStream(getFile("zip64support.tar.bz2"));try {new DumpArchiveInputStream(is);fail("expected an exception");}catch(ArchiveException ex){assertTrue(ex.getCause()instanceof UnrecognizedFormatException);}finally {is.close();}}
/** * test parser.*/public void testParse()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);try {ExtraFieldUtils.parse(data2);fail("data should be invalid");}catch(Exception e){assertEquals("message","bad extra field starting at " + (4 + aLocal.length)+ ".  Block length of 1 bytes exceeds remaining data of 0 bytes.",e.getMessage());}}
public void testParseWithRead()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);ze=ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnparseableExtraFieldData);assertEquals("data length field 2",4,ze[1].getLocalFileDataLength().getValue());for (int i=0;i < 4;i++){assertEquals("byte number " + i,data2[data.length - 5 + i],ze[1].getLocalFileDataData()[i]);}}
public void testParseWithSkip()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);ze=ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP);assertEquals("number of fields",1,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());}
/** * Test merge methods*/public void testMerge(){byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,dummy});assertEquals("local length",data.length,local.length);for (int i=0;i < local.length;i++){assertEquals("local byte " + i,data[i],local[i]);}byte[]dummyCentral=dummy.getCentralDirectoryData();byte[]data2=new byte[4 + aLocal.length + 4+ dummyCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dummy.getCentralDirectoryLength().getBytes(),0,data2,4 + aLocal.length + 2,2);System.arraycopy(dummyCentral,0,data2,4 + aLocal.length + 4,dummyCentral.length);byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,dummy});assertEquals("central length",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals("central byte " + i,data2[i],central[i]);}}
public void testMergeWithUnparseableData()throws Exception {ZipExtraField d=new UnparseableExtraFieldData();byte[]b=UNRECOGNIZED_HEADER.getBytes();d.parseFromLocalFileData(new byte[]{b[0],b[1],1,0},0,4);byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,d});assertEquals("local length",data.length - 1,local.length);for (int i=0;i < local.length;i++){assertEquals("local byte " + i,data[i],local[i]);}byte[]dCentral=d.getCentralDirectoryData();byte[]data2=new byte[4 + aLocal.length + dCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dCentral,0,data2,4 + aLocal.length,dCentral.length);byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,d});assertEquals("central length",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals("central byte " + i,data2[i],central[i]);}}
public void testOldGNU()throws Throwable {URL tar=getClass().getResource("/oldgnu_sparse.tar");File file=new File(new URI(tar.toString()));TarArchiveInputStream tin=null;try {tin=new TarArchiveInputStream(new FileInputStream(file));TarArchiveEntry ae=tin.getNextTarEntry();assertEquals("sparsefile",ae.getName());assertTrue(ae.isGNUSparse());assertFalse(tin.canReadEntryData(ae));}finally {if (tin != null){tin.close();}}}
public void testReadPasswordEncryptedEntryViaZipFile()throws IOException,URISyntaxException {URL zip=getClass().getResource("/password-encrypted.zip");File file=new File(new URI(zip.toString()));ZipFile zf=null;try {zf=new ZipFile(file);ZipArchiveEntry zae=zf.getEntry("LICENSE.txt");assertTrue(zae.getGeneralPurposeBit().usesEncryption());assertFalse(zae.getGeneralPurposeBit().usesStrongEncryption());assertFalse(zf.canReadEntryData(zae));try {zf.getInputStream(zae);fail("expected an exception");}catch(UnsupportedZipFeatureException ex){assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,ex.getFeature());}}finally {ZipFile.closeQuietly(zf);}}
public void testReadPasswordEncryptedEntryViaStream()throws IOException,URISyntaxException {URL zip=getClass().getResource("/password-encrypted.zip");File file=new File(new URI(zip.toString()));ZipArchiveInputStream zin=null;try {zin=new ZipArchiveInputStream(new FileInputStream(file));ZipArchiveEntry zae=zin.getNextZipEntry();assertEquals("LICENSE.txt",zae.getName());assertTrue(zae.getGeneralPurposeBit().usesEncryption());assertFalse(zae.getGeneralPurposeBit().usesStrongEncryption());assertFalse(zin.canReadEntryData(zae));try {byte[]buf=new byte[1024];zin.read(buf,0,buf.length);fail("expected an exception");}catch(UnsupportedZipFeatureException ex){assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,ex.getFeature());}}finally {if (zin != null){zin.close();}}}
/** * JIRA issue SANDBOX-284* @see "https://issues.apache.org/jira/browse/SANDBOX-284"*/public void testFileSystemRoot(){TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));assertEquals("/",t.getName());}
public void testTarFileWithFSRoot()throws IOException {File f=File.createTempFile("taetest",".tar");f.deleteOnExit();TarArchiveOutputStream tout=null;TarArchiveInputStream tin=null;try {tout=new TarArchiveOutputStream(new FileOutputStream(f));TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));tout.putArchiveEntry(t);tout.closeArchiveEntry();t=new TarArchiveEntry(new File(new File(ROOT),"foo.txt"));t.setSize(6);tout.putArchiveEntry(t);tout.write(new byte[]{'h','e','l','l','o',' '});tout.closeArchiveEntry();t=new TarArchiveEntry(new File(new File(ROOT),"bar.txt").getAbsolutePath());t.setSize(5);tout.putArchiveEntry(t);tout.write(new byte[]{'w','o','r','l','d'});tout.closeArchiveEntry();t=new TarArchiveEntry("dummy");t.setName(new File(new File(ROOT),"baz.txt").getAbsolutePath());t.setSize(1);tout.putArchiveEntry(t);tout.write(new byte[]{'!'});tout.closeArchiveEntry();tout.close();tout=null;tin=new TarArchiveInputStream(new FileInputStream(f));t=tin.getNextTarEntry();assertNotNull(t);assertEquals("/",t.getName());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("foo.txt",t.getName());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("bar.txt",t.getName());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("baz.txt",t.getName());}finally {if (tin != null){tin.close();}if (tout != null){tout.close();}AbstractTestCase.tryHardToDelete(f);}}
public void testMaxFileSize(){TarArchiveEntry t=new TarArchiveEntry("");t.setSize(0);t.setSize(1);try {t.setSize(-1);fail("Should have generated IllegalArgumentException");}catch(IllegalArgumentException expected){}t.setSize(077777777777L);t.setSize(0100000000000L);}
public void testNormalize()throws Throwable {final File input=getFile("bla.jar");final File[]output=createTempDirAndFile();try {Pack200Utils.normalize(input,output[1],new HashMap<String,String>());final FileInputStream is=new FileInputStream(output[1]);try {final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}finally {is.close();}}finally {output[1].delete();output[0].delete();}}
public void testNormalizeInPlace()throws Throwable {final File input=getFile("bla.jar");final File[]output=createTempDirAndFile();try {FileInputStream is=new FileInputStream(input);OutputStream os=null;try {os=new FileOutputStream(output[1]);IOUtils.copy(is,os);}finally {is.close();if (os != null){os.close();}}Pack200Utils.normalize(output[1]);is=new FileInputStream(output[1]);try {final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}finally {is.close();}}finally {output[1].delete();output[0].delete();}}
public void testLongFileNamesCauseExceptionByDefault(){try {ArArchiveOutputStream os=new ArArchiveOutputStream(new ByteArrayOutputStream());ArArchiveEntry ae=new ArArchiveEntry("this_is_a_long_name.txt",0);os.putArchiveEntry(ae);fail("Expected an exception");}catch(IOException ex){assertTrue(ex.getMessage().startsWith("filename too long"));}}
public void testLongFileNamesWorkUsingBSDDialect()throws Exception {FileOutputStream fos=null;ArArchiveOutputStream os=null;File[]df=createTempDirAndFile();try {fos=new FileOutputStream(df[1]);os=new ArArchiveOutputStream(fos);os.setLongFileMode(ArArchiveOutputStream.LONGFILE_BSD);ArArchiveEntry ae=new ArArchiveEntry("this_is_a_long_name.txt",14);os.putArchiveEntry(ae);os.write(new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'});os.closeArchiveEntry();os.close();os=null;fos=null;List<String> expected=new ArrayList<String>();expected.add("this_is_a_long_name.txt");checkArchiveContent(df[1],expected);}finally {if (os != null){os.close();}if (fos != null){fos.close();}rmdir(df[0]);}}
public void testTarGzip()throws Exception {File file=new File("src/test/resources/bla.tgz");final TarArchiveInputStream is=new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(file)));final TarArchiveEntry entry=(TarArchiveEntry)is.getNextEntry();assertNotNull(entry);assertEquals("test1.xml",entry.getName());is.close();}
public void testTarBzip2()throws Exception {File file=new File("src/test/resources/bla.tar.bz2");final TarArchiveInputStream is=new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));final TarArchiveEntry entry=(TarArchiveEntry)is.getNextEntry();assertNotNull(entry);assertEquals("test1.xml",entry.getName());is.close();}
@Test public void output()throws Exception {ByteArrayOutputStream bos=new ByteArrayOutputStream();CountingOutputStream o=new CountingOutputStream(bos);o.write(1);assertEquals(1,o.getBytesWritten());o.write(new byte[]{2,3});assertEquals(3,o.getBytesWritten());o.write(new byte[]{2,3,4,5},2,1);assertEquals(4,o.getBytesWritten());o.count(-1);assertEquals(4,o.getBytesWritten());o.count(-2);assertEquals(2,o.getBytesWritten());o.close();assertArrayEquals(new byte[]{1,2,3,4},bos.toByteArray());}
@Test public void input()throws Exception {ByteArrayInputStream bis=new ByteArrayInputStream(new byte[]{1,2,3,4});CountingInputStream i=new CountingInputStream(bis);assertEquals(1,i.read());assertEquals(1,i.getBytesRead());byte[]b=new byte[2];i.read(b);assertEquals(3,i.getBytesRead());assertArrayEquals(new byte[]{2,3},b);b=new byte[3];i.read(b,1,1);assertArrayEquals(new byte[]{0,4,0},b);assertEquals(4,i.getBytesRead());i.count(-1);assertEquals(4,i.getBytesRead());i.count(-2);assertEquals(2,i.getBytesRead());i.close();}
public void testJarUnarchiveAllInMemory()throws Exception {jarUnarchiveAll(false,Pack200Strategy.IN_MEMORY);}
public void testJarUnarchiveAllFileArgInMemory()throws Exception {jarUnarchiveAll(true,Pack200Strategy.IN_MEMORY);}
public void testJarUnarchiveAllTempFile()throws Exception {jarUnarchiveAll(false,Pack200Strategy.TEMP_FILE);}
public void testJarUnarchiveAllFileTempFile()throws Exception {jarUnarchiveAll(true,Pack200Strategy.TEMP_FILE);}
public void testJarArchiveCreationInMemory()throws Exception {jarArchiveCreation(Pack200Strategy.IN_MEMORY);}
public void testJarArchiveCreationTempFile()throws Exception {jarArchiveCreation(Pack200Strategy.TEMP_FILE);}
public void testGoodSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.pack"));try {byte[]sig=new byte[4];is.read(sig);assertTrue(Pack200CompressorInputStream.matches(sig,4));}finally {is.close();}}
public void testBadSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.jar"));try {byte[]sig=new byte[4];is.read(sig);assertFalse(Pack200CompressorInputStream.matches(sig,4));}finally {is.close();}}
public void testShortSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.pack"));try {byte[]sig=new byte[2];is.read(sig);assertFalse(Pack200CompressorInputStream.matches(sig,2));}finally {is.close();}}
public void testInputStreamMethods()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("foo","bar");final InputStream is=new Pack200CompressorInputStream(new FileInputStream(getFile("bla.jar")),m);try {assertTrue(is.markSupported());is.mark(5);assertEquals(0x50,is.read());byte[]rest=new byte[3];assertEquals(3,is.read(rest));assertEquals(0x4b,rest[0]);assertEquals(3,rest[1]);assertEquals(4,rest[2]);assertEquals(1,is.skip(1));is.reset();assertEquals(0x50,is.read());assertTrue(is.available()> 0);}finally {is.close();}}
public void testOutputStreamMethods()throws Exception {final File output=new File(dir,"bla.pack");Map<String,String> m=new HashMap<String,String>();m.put("foo","bar");final OutputStream out=new FileOutputStream(output);try {final OutputStream os=new Pack200CompressorOutputStream(out,m);os.write(1);os.write(new byte[]{2,3});os.close();}finally {out.close();}}
public void testReading()throws IOException {final MemoryArchiveInputStream is=new MemoryArchiveInputStream(new String[][]{{"test1","content1"},{"test2","content2"}});final ArchiveEntry entry1=is.getNextEntry();assertNotNull(entry1);assertEquals("test1",entry1.getName());final String content1=is.readString();assertEquals("content1",content1);final ArchiveEntry entry2=is.getNextEntry();assertNotNull(entry2);assertEquals("test2",entry2.getName());final String content2=is.readString();assertEquals("content2",content2);final ArchiveEntry entry3=is.getNextEntry();assertNull(entry3);}
