public void testCDOrder()throws Exception {readOrderTest();ArrayList<ZipArchiveEntry> l=Collections.list(zf.getEntries());assertEntryName(l,0,"AbstractUnicodeExtraField");assertEntryName(l,1,"AsiExtraField");assertEntryName(l,2,"ExtraFieldUtils");assertEntryName(l,3,"FallbackZipEncoding");assertEntryName(l,4,"GeneralPurposeBit");assertEntryName(l,5,"JarMarker");assertEntryName(l,6,"NioZipEncoding");assertEntryName(l,7,"Simple8BitZipEncoding");assertEntryName(l,8,"UnicodeCommentExtraField");assertEntryName(l,9,"UnicodePathExtraField");assertEntryName(l,10,"UnixStat");assertEntryName(l,11,"UnparseableExtraFieldData");assertEntryName(l,12,"UnrecognizedExtraField");assertEntryName(l,13,"ZipArchiveEntry");assertEntryName(l,14,"ZipArchiveInputStream");assertEntryName(l,15,"ZipArchiveOutputStream");assertEntryName(l,16,"ZipEncoding");assertEntryName(l,17,"ZipEncodingHelper");assertEntryName(l,18,"ZipExtraField");assertEntryName(l,19,"ZipUtil");assertEntryName(l,20,"ZipLong");assertEntryName(l,21,"ZipShort");assertEntryName(l,22,"ZipFile");}
public void testPhysicalOrder()throws Exception {readOrderTest();ArrayList<ZipArchiveEntry> l=Collections.list(zf.getEntriesInPhysicalOrder());assertEntryName(l,0,"AbstractUnicodeExtraField");assertEntryName(l,1,"AsiExtraField");assertEntryName(l,2,"ExtraFieldUtils");assertEntryName(l,3,"FallbackZipEncoding");assertEntryName(l,4,"GeneralPurposeBit");assertEntryName(l,5,"JarMarker");assertEntryName(l,6,"NioZipEncoding");assertEntryName(l,7,"Simple8BitZipEncoding");assertEntryName(l,8,"UnicodeCommentExtraField");assertEntryName(l,9,"UnicodePathExtraField");assertEntryName(l,10,"UnixStat");assertEntryName(l,11,"UnparseableExtraFieldData");assertEntryName(l,12,"UnrecognizedExtraField");assertEntryName(l,13,"ZipArchiveEntry");assertEntryName(l,14,"ZipArchiveInputStream");assertEntryName(l,15,"ZipArchiveOutputStream");assertEntryName(l,16,"ZipEncoding");assertEntryName(l,17,"ZipEncodingHelper");assertEntryName(l,18,"ZipExtraField");assertEntryName(l,19,"ZipFile");assertEntryName(l,20,"ZipLong");assertEntryName(l,21,"ZipShort");assertEntryName(l,22,"ZipUtil");}
public void testDoubleClose()throws Exception {readOrderTest();zf.close();try {zf.close();}catch(Exception ex){fail("Caught exception of second close");}}
public void testReadingOfStoredEntry()throws Exception {File f=File.createTempFile("commons-compress-zipfiletest",".zip");f.deleteOnExit();OutputStream o=null;InputStream i=null;try {o=new FileOutputStream(f);ZipArchiveOutputStream zo=new ZipArchiveOutputStream(o);ZipArchiveEntry ze=new ZipArchiveEntry("foo");ze.setMethod(ZipEntry.STORED);ze.setSize(4);ze.setCrc(0xb63cfbcdl);zo.putArchiveEntry(ze);zo.write(new byte[]{1,2,3,4});zo.closeArchiveEntry();zo.close();o.close();o=null;zf=new ZipFile(f);ze=zf.getEntry("foo");assertNotNull(ze);i=zf.getInputStream(ze);byte[]b=new byte[4];assertEquals(4,i.read(b));assertEquals(-1,i.read());}finally {if (o != null){o.close();}if (i != null){i.close();}f.delete();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-176"*/public void testWinzipBackSlashWorkaround()throws Exception {File archive=getFile("test-winzip.zip");zf=new ZipFile(archive);assertNull(zf.getEntry("\u00e4\\\u00fc.txt"));assertNotNull(zf.getEntry("\u00e4/\u00fc.txt"));}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-208" >COMPRESS-208</a>.*/public void testSkipsPK00Prefix()throws Exception {File archive=getFile("COMPRESS-208.zip");zf=new ZipFile(archive);assertNotNull(zf.getEntry("test1.xml"));assertNotNull(zf.getEntry("test2.xml"));}
public void testUnixSymlinkSampleFile()throws Exception {final String entryPrefix="COMPRESS-214_unix_symlinks/";final TreeMap<String,String> expectedVals=new TreeMap<String,String>();expectedVals.put(entryPrefix + "link1","../COMPRESS-214_unix_symlinks/./a/b/c/../../../\uF999");expectedVals.put(entryPrefix + "link2","../COMPRESS-214_unix_symlinks/./a/b/c/../../../g");expectedVals.put(entryPrefix + "link3","../COMPRESS-214_unix_symlinks/././a/b/c/../../../\u76F4\u6A39");expectedVals.put(entryPrefix + "link4","\u82B1\u5B50/\u745B\u5B50");expectedVals.put(entryPrefix + "\uF999","./\u82B1\u5B50/\u745B\u5B50/\u5897\u8C37/\uF999");expectedVals.put(entryPrefix + "g","./a/b/c/d/e/f/g");expectedVals.put(entryPrefix + "\u76F4\u6A39","./g");expectedVals.put(entryPrefix + "link5","../COMPRESS-214_unix_symlinks/././a/b");expectedVals.put(entryPrefix + "link6","../COMPRESS-214_unix_symlinks/././a/b/");File archive=getFile("COMPRESS-214_unix_symlinks.zip");zf=new ZipFile(archive);Enumeration<ZipArchiveEntry> en=zf.getEntries();while (en.hasMoreElements()){ZipArchiveEntry zae=en.nextElement();String link=zf.getUnixSymlink(zae);if (zae.isUnixSymlink()){String name=zae.getName();String expected=expectedVals.get(name);assertEquals(expected,link);}else {assertNull(link);}}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-227"*/public void testDuplicateEntry()throws Exception {File archive=getFile("COMPRESS-227.zip");zf=new ZipFile(archive);ZipArchiveEntry ze=zf.getEntry("test1.txt");assertNotNull(ze);assertNotNull(zf.getInputStream(ze));int numberOfEntries=0;for(ZipArchiveEntry entry : zf.getEntries("test1.txt")){numberOfEntries++;assertNotNull(zf.getInputStream(entry));}assertEquals(2,numberOfEntries);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-228"*/public void testExcessDataInZip64ExtraField()throws Exception {File archive=getFile("COMPRESS-228.zip");zf=new ZipFile(archive);ZipArchiveEntry ze=zf.getEntry("src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java");assertEquals(26101,ze.getSize());}
public void testUnshrinking()throws Exception {zf=new ZipFile(getFile("SHRUNK.ZIP"));ZipArchiveEntry test=zf.getEntry("TEST1.XML");FileInputStream original=new FileInputStream(getFile("test1.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(zf.getInputStream(test)));}finally {original.close();}test=zf.getEntry("TEST2.XML");original=new FileInputStream(getFile("test2.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(zf.getInputStream(test)));}finally {original.close();}}
public void testLZMAUnarchive()throws Exception {final File input=getFile("bla.tar.lzma");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new LZMACompressorInputStream(is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
public void testArchive(){}
public void testIsCompressedFilename(){assertFalse(XZUtils.isCompressedFilename(""));assertFalse(XZUtils.isCompressedFilename(".xz"));assertTrue(XZUtils.isCompressedFilename("x.txz"));assertTrue(XZUtils.isCompressedFilename("x.xz"));assertTrue(XZUtils.isCompressedFilename("x-xz"));assertFalse(XZUtils.isCompressedFilename("xxgz"));assertFalse(XZUtils.isCompressedFilename("xzz"));assertFalse(XZUtils.isCompressedFilename("xaz"));assertFalse(XZUtils.isCompressedFilename("x.txz "));assertFalse(XZUtils.isCompressedFilename("x.txz\n"));assertFalse(XZUtils.isCompressedFilename("x.txz.y"));}
public void testGetUncompressedFilename(){assertEquals("",XZUtils.getUncompressedFilename(""));assertEquals(".xz",XZUtils.getUncompressedFilename(".xz"));assertEquals("x.tar",XZUtils.getUncompressedFilename("x.txz"));assertEquals("x",XZUtils.getUncompressedFilename("x.xz"));assertEquals("x",XZUtils.getUncompressedFilename("x-xz"));assertEquals("x.txz ",XZUtils.getUncompressedFilename("x.txz "));assertEquals("x.txz\n",XZUtils.getUncompressedFilename("x.txz\n"));assertEquals("x.txz.y",XZUtils.getUncompressedFilename("x.txz.y"));}
public void testGetCompressedFilename(){assertEquals(".xz",XZUtils.getCompressedFilename(""));assertEquals("x.xz",XZUtils.getCompressedFilename("x"));assertEquals("x.txz",XZUtils.getCompressedFilename("x.tar"));assertEquals("x.wmf .xz",XZUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.xz",XZUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.xz",XZUtils.getCompressedFilename("x.wmf.y"));}
public void testArchiveWithImplodeCompression4K2Trees()throws IOException {testArchiveWithImplodeCompression("target/test-classes/archives/imploding-4Kdict-2trees.zip","HEADER.TXT");}
public void testArchiveWithImplodeCompression8K3Trees()throws IOException {testArchiveWithImplodeCompression("target/test-classes/archives/imploding-8Kdict-3trees.zip","LICENSE.TXT");}
public void testTikaTestArchive()throws IOException {testArchiveWithImplodeCompression("target/test-classes/moby-imploded.zip","README");}
public void testZipStreamWithImplodeCompression4K2Trees()throws IOException {testZipStreamWithImplodeCompression("target/test-classes/archives/imploding-4Kdict-2trees.zip","HEADER.TXT");}
public void testZipStreamWithImplodeCompression8K3Trees()throws IOException {testZipStreamWithImplodeCompression("target/test-classes/archives/imploding-8Kdict-3trees.zip","LICENSE.TXT");}
public void testTikaTestStream()throws IOException {testZipStreamWithImplodeCompression("target/test-classes/moby-imploded.zip","README");}
public void testSimpleCp437Encoding()throws IOException {doSimpleEncodingTest("Cp437",null);}
public void testSimpleCp850Encoding()throws IOException {doSimpleEncodingTest("Cp850",null);}
public void testNioCp1252Encoding()throws IOException {byte[]b=new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,(byte)0x80,(byte)0x82,(byte)0x83,(byte)0x84,(byte)0x85,(byte)0x86,(byte)0x87,(byte)0x88,(byte)0x89,(byte)0x8A,(byte)0x8B,(byte)0x8C,(byte)0x8E,(byte)0x91,(byte)0x92,(byte)0x93,(byte)0x94,(byte)0x95,(byte)0x96,(byte)0x97,(byte)0x98,(byte)0x99,(byte)0x9A,(byte)0x9B,(byte)0x9C,(byte)0x9E,(byte)0x9F,(byte)0xA0,(byte)0xA1,(byte)0xA2,(byte)0xA3,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0xA7,(byte)0xA8,(byte)0xA9,(byte)0xAA,(byte)0xAB,(byte)0xAC,(byte)0xAD,(byte)0xAE,(byte)0xAF,(byte)0xB0,(byte)0xB1,(byte)0xB2,(byte)0xB3,(byte)0xB4,(byte)0xB5,(byte)0xB6,(byte)0xB7,(byte)0xB8,(byte)0xB9,(byte)0xBA,(byte)0xBB,(byte)0xBC,(byte)0xBD,(byte)0xBE,(byte)0xBF,(byte)0xC0,(byte)0xC1,(byte)0xC2,(byte)0xC3,(byte)0xC4,(byte)0xC5,(byte)0xC6,(byte)0xC7,(byte)0xC8,(byte)0xC9,(byte)0xCA,(byte)0xCB,(byte)0xCC,(byte)0xCD,(byte)0xCE,(byte)0xCF,(byte)0xD0,(byte)0xD1,(byte)0xD2,(byte)0xD3,(byte)0xD4,(byte)0xD5,(byte)0xD6,(byte)0xD7,(byte)0xD8,(byte)0xD9,(byte)0xDA,(byte)0xDB,(byte)0xDC,(byte)0xDD,(byte)0xDE,(byte)0xDF,(byte)0xE0,(byte)0xE1,(byte)0xE2,(byte)0xE3,(byte)0xE4,(byte)0xE5,(byte)0xE6,(byte)0xE7,(byte)0xE8,(byte)0xE9,(byte)0xEA,(byte)0xEB,(byte)0xEC,(byte)0xED,(byte)0xEE,(byte)0xEF,(byte)0xF0,(byte)0xF1,(byte)0xF2,(byte)0xF3,(byte)0xF4,(byte)0xF5,(byte)0xF6,(byte)0xF7,(byte)0xF8,(byte)0xF9,(byte)0xFA,(byte)0xFB,(byte)0xFC,(byte)0xFD,(byte)0xFE,(byte)0xFF};doSimpleEncodingTest("Cp1252",b);}
public void testMatches()throws IOException {assertFalse(FramedSnappyCompressorInputStream.matches(new byte[10],10));byte[]b=new byte[12];final File input=getFile("bla.tar.sz");FileInputStream in=new FileInputStream(input);try {IOUtils.readFully(in,b);}finally {in.close();}assertFalse(FramedSnappyCompressorInputStream.matches(b,9));assertTrue(FramedSnappyCompressorInputStream.matches(b,10));assertTrue(FramedSnappyCompressorInputStream.matches(b,12));}
/** * Something big enough to make buffers slide.*/public void testLoremIpsum()throws Exception {final FileInputStream isSz=new FileInputStream(getFile("lorem-ipsum.txt.sz"));final File outputSz=new File(dir,"lorem-ipsum.1");final File outputGz=new File(dir,"lorem-ipsum.2");try {InputStream in=new FramedSnappyCompressorInputStream(isSz);FileOutputStream out=null;try {out=new FileOutputStream(outputSz);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}final FileInputStream isGz=new FileInputStream(getFile("lorem-ipsum.txt.gz"));try {in=new GzipCompressorInputStream(isGz);try {out=new FileOutputStream(outputGz);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {isGz.close();}}finally {isSz.close();}final FileInputStream sz=new FileInputStream(outputSz);try {FileInputStream gz=new FileInputStream(outputGz);try {assertArrayEquals(IOUtils.toByteArray(sz),IOUtils.toByteArray(gz));}finally {gz.close();}}finally {sz.close();}}
public void testRemainingChunkTypes()throws Exception {final FileInputStream isSz=new FileInputStream(getFile("mixed.txt.sz"));ByteArrayOutputStream out=new ByteArrayOutputStream();try {FramedSnappyCompressorInputStream in=new FramedSnappyCompressorInputStream(isSz);IOUtils.copy(in,out);out.close();}finally {isSz.close();}assertArrayEquals(new byte[]{'1','2','3','4','5','6','7','8','9','5','6','7','8','9','5','6','7','8','9','5','6','7','8','9','5','6','7','8','9',10,'1','2','3','4','1','2','3','4'},out.toByteArray());}
public void testAvailable()throws Exception {final FileInputStream isSz=new FileInputStream(getFile("mixed.txt.sz"));try {FramedSnappyCompressorInputStream in=new FramedSnappyCompressorInputStream(isSz);assertEquals(0,in.available());assertEquals('1',in.read());assertEquals(3,in.available());assertEquals(3,in.read(new byte[5],0,3));assertEquals('5',in.read());assertEquals(4,in.available());assertEquals(4,in.read(new byte[5],0,4));assertEquals('5',in.read());assertEquals(19,in.available());in.close();}finally {isSz.close();}}
public void testUnskippableChunk(){byte[]input=new byte[]{(byte)0xff,6,0,0,'s','N','a','P','p','Y',2,2,0,0,1,1};try {FramedSnappyCompressorInputStream in=new FramedSnappyCompressorInputStream(new ByteArrayInputStream(input));in.read();fail("expected an exception");}catch(IOException ex){assertTrue(ex.getMessage().indexOf("unskippable chunk")> -1);}}
public void testChecksumUnmasking(){testChecksumUnmasking(0xc757l);testChecksumUnmasking(0xffffc757l);}
public void testArArchiveCreation()throws Exception {final File output=new File(dir,"bla.ar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}
public void testArUnarchive()throws Exception {final File output=new File(dir,"bla.ar");{final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));final ArArchiveEntry entry=(ArArchiveEntry)in.getNextEntry();File target=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(target);IOUtils.copy(in,out);out.close();in.close();is.close();}
public void testArDelete()throws Exception {final File output=new File(dir,"bla.ar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("ar",out);os.putArchiveEntry(new ArArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}assertEquals(8 + 60 + file1.length()+ (file1.length()% 2)+ 60+ file2.length()+ (file2.length()% 2),output.length());final File output2=new File(dir,"bla2.ar");int copied=0;int deleted=0;{final InputStream is=new FileInputStream(output);final OutputStream os=new FileOutputStream(output2);final ArchiveOutputStream aos=new ArchiveStreamFactory().createArchiveOutputStream("ar",os);final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));while (true){final ArArchiveEntry entry=(ArArchiveEntry)ais.getNextEntry();if (entry == null){break;}if ("test1.xml".equals(entry.getName())){aos.putArchiveEntry(entry);IOUtils.copy(ais,aos);aos.closeArchiveEntry();copied++;}else {IOUtils.copy(ais,new ByteArrayOutputStream());deleted++;}}ais.close();aos.close();is.close();os.close();}assertEquals(1,copied);assertEquals(1,deleted);assertEquals(8 + 60 + file1.length()+ (file1.length()% 2),output2.length());long files=0;long sum=0;{final InputStream is=new FileInputStream(output2);final ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));while (true){final ArArchiveEntry entry=(ArArchiveEntry)ais.getNextEntry();if (entry == null){break;}IOUtils.copy(ais,new ByteArrayOutputStream());sum+=entry.getLength();files++;}ais.close();is.close();}assertEquals(1,files);assertEquals(file1.length(),sum);}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));ArArchiveEntry in=new ArArchiveEntry(tmp[1],"foo");aos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){aos.write(b);}fis.close();fis=null;aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ArArchiveOutputStream aos=null;ArArchiveInputStream ais=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".ar",tmp[0]);archive.deleteOnExit();aos=new ArArchiveOutputStream(new FileOutputStream(archive));ArArchiveEntry in=new ArArchiveEntry("foo",tmp[1].length(),0,0,0,tmp[1].lastModified()/ 1000);aos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){aos.write(b);}fis.close();fis=null;aos.closeArchiveEntry();aos.close();aos=null;ais=new ArArchiveInputStream(new FileInputStream(archive));ArArchiveEntry out=ais.getNextArEntry();ais.close();ais=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (ais != null){ais.close();}if (aos != null){aos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testDumpUnarchiveAll()throws Exception {unarchiveAll(getFile("bla.dump"));}
public void testCompressedDumpUnarchiveAll()throws Exception {unarchiveAll(getFile("bla.z.dump"));}
public void testArchiveDetection()throws Exception {archiveDetection(getFile("bla.dump"));}
public void testCompressedArchiveDetection()throws Exception {archiveDetection(getFile("bla.z.dump"));}
public void testCheckArchive()throws Exception {checkDumpArchive(getFile("bla.dump"));}
public void testCheckCompressedArchive()throws Exception {checkDumpArchive(getFile("bla.z.dump"));}
/** * Adds an ArchiveEntry with the same name two times. Only the latest addition should be found in the ChangeSet,the first add should be replaced.* @throws Exception*/public void testAddChangeTwice()throws Exception {InputStream in=null;InputStream in2=null;try {in=new FileInputStream(getFile("test.txt"));in2=new FileInputStream(getFile("test2.xml"));ArchiveEntry e=new ZipArchiveEntry("test.txt");ArchiveEntry e2=new ZipArchiveEntry("test.txt");ChangeSet changes=new ChangeSet();changes.add(e,in);changes.add(e2,in2);assertEquals(1,changes.getChanges().size());Change c=changes.getChanges().iterator().next();assertEquals(in2,c.getInput());}finally {if (in != null){in.close();}if (in2 != null){in2.close();}}}
/** * Adds an ArchiveEntry with the same name two times. Only the first addition should be found in the ChangeSet,the second add should never be added since replace = false* @throws Exception*/public void testAddChangeTwiceWithoutReplace()throws Exception {InputStream in=null;InputStream in2=null;try {in=new FileInputStream(getFile("test.txt"));in2=new FileInputStream(getFile("test2.xml"));ArchiveEntry e=new ZipArchiveEntry("test.txt");ArchiveEntry e2=new ZipArchiveEntry("test.txt");ChangeSet changes=new ChangeSet();changes.add(e,in,true);changes.add(e2,in2,false);assertEquals(1,changes.getChanges().size());Change c=changes.getChanges().iterator().next();assertEquals(in,c.getInput());}finally {if (in != null){in.close();}if (in2 != null){in2.close();}}}
/** * Tries to delete the folder "bla" from an archive file. This should result in the deletion of bla/*,which actually means bla/test4.xml should be removed from the archive. The file something/bla (without ending,named like the folder)should not be deleted.* @throws Exception*/public void testDeleteDir()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the folder "la" from an archive file. This should result in the deletion of la/*,which should not match any files/folders.* @throws Exception*/public void testDeleteDir2()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("la");archiveListDeleteDir("la");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the folder "test.txt" from an archive file. This should not match any files/folders.* @throws Exception*/public void testDeleteDir3()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("test.txt");archiveListDeleteDir("test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the file "bla/test5.xml" from an archive. This should result in the deletion of "bla/test5.xml".* @throws Exception*/public void testDeleteFile()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete("bla/test5.xml");archiveListDelete("bla/test5.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete the file "bla" from an archive. This should result in the deletion of nothing.* @throws Exception*/public void testDeleteFile2()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete("bla");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete and then add a file with the same name. Should delete test/test3.xml and adds test.txt with the name test/test3.xml* @throws Exception*/public void testDeletePlusAddSame()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();File testtxt=null;try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete("test/test3.xml");archiveListDelete("test/test3.xml");testtxt=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(testtxt,"test/test3.xml");changes.add(entry,new FileInputStream(testtxt));archiveList.add("test/test3.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}ArchiveInputStream in=null;File check=null;try {final InputStream is=new FileInputStream(result);final BufferedInputStream buf=new BufferedInputStream(is);in=factory.createArchiveInputStream(buf);check=this.checkArchiveContent(in,archiveList,false);File test3xml=new File(check,"result/test/test3.xml");assertEquals(testtxt.length(),test3xml.length());BufferedReader reader=new BufferedReader(new FileReader(test3xml));String str;while ((str=reader.readLine())!= null){"111111111111111111111111111000101011".equals(str);}reader.close();}finally {if (in != null){in.close();}rmdir(check);}}
/** * Checks for the correct ChangeSetResults* @throws Exception*/public void testChangeSetResults()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final File file1=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file1,"bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);ChangeSetResults results=performer.perform(ais,out);is.close();assertEquals(1,results.getAddedFromChangeSet().size());assertEquals("bla/test.txt",results.getAddedFromChangeSet().iterator().next());assertEquals(3,results.getDeleted().size());assertTrue(results.getDeleted().contains("bla/test4.xml"));assertTrue(results.getDeleted().contains("bla/test5.xml"));assertTrue(results.getDeleted().contains("bla/blubber/test6.xml"));assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));assertTrue(results.getAddedFromStream().contains("testdata/test2.xml"));assertTrue(results.getAddedFromStream().contains("test/test3.xml"));assertTrue(results.getAddedFromStream().contains("test.txt"));assertTrue(results.getAddedFromStream().contains("something/bla"));assertTrue(results.getAddedFromStream().contains("test with spaces.txt"));assertEquals(6,results.getAddedFromStream().size());}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Tries to delete a directory with a file and adds a new directory with a new file and with the same name. Should delete dir1/* and add dir1/test.txt at the end* @throws Exception*/public void testDeletePlusAdd()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");archiveListDeleteDir("bla");final File file1=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file1,"bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file to a zip archive. Deletes an other file.* @throws Exception*/public void testDeleteFromAndAddToZip()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.delete("testdata/test1.xml");archiveListDelete("testdata/test1.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file to a zip archive. Deletes an other file.* @throws Exception*/public void testDeleteFromAndAddToZipUsingZipFilePerform()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ZipFile ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {ais=new ZipFile(input);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.delete("testdata/test1.xml");archiveListDelete("testdata/test1.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * add blub/test.txt + delete blub Should add blub/test.txt and delete it afterwards. In this example,the archive should stay untouched.* @throws Exception*/public void testAddDeleteAdd()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new CpioArchiveEntry("blub/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("blub/test.txt");changes.deleteDir("blub");archiveListDeleteDir("blub");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * delete bla + add bla/test.txt + delete bla Deletes dir1/* first,then suppresses the add of bla.txt because there is a delete operation later.* @throws Exception*/public void testDeleteAddDelete()throws Exception {final String archivename="cpio";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.deleteDir("bla");final File file1=getFile("test.txt");ArchiveEntry entry=new CpioArchiveEntry("bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");changes.deleteDir("bla");archiveListDeleteDir("bla");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Simple Delete from a zip file.* @throws Exception*/public void testDeleteFromZip()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.zip");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("zip",is);temp=File.createTempFile("test",".zip");temp.deleteOnExit();out=factory.createArchiveOutputStream("zip",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Simple delete from a tar file* @throws Exception*/public void testDeleteFromTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("tar",is);temp=new File(dir,"bla.tar");out=factory.createArchiveOutputStream("tar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Simple delete from a jar file* @throws Exception*/public void testDeleteFromJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");changes.deleteDir("META-INF");changes.delete(".classpath");changes.delete(".project");final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("jar",is);temp=new File(dir,"bla.jar");out=factory.createArchiveOutputStream("jar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
public void testDeleteFromAndAddToTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File file1=getFile("test.txt");final TarArchiveEntry entry=new TarArchiveEntry("testdata/test.txt");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("tar",is);temp=new File(dir,"bla.tar");out=factory.createArchiveOutputStream("tar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("testdata/test.txt");final ArchiveInputStream in=factory.createArchiveInputStream("tar",new FileInputStream(temp));this.checkArchiveContent(in,expected);}
/** * Delete from a jar file and add another file* @throws Exception*/public void testDeleteFromAndAddToJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");changes.deleteDir("META-INF");changes.delete(".classpath");changes.delete(".project");final File file1=getFile("test.txt");JarArchiveEntry entry=new JarArchiveEntry("testdata/test.txt");changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("jar",is);temp=new File(dir,"bla.jar");out=factory.createArchiveOutputStream("jar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("testdata/test.txt");this.checkArchiveContent(temp,expected);}
/** * Simple delete from an ar file* @throws Exception*/public void testDeleteFromAr()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File input=getFile("bla.ar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("ar",is);temp=new File(dir,"bla.ar");out=factory.createArchiveOutputStream("ar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");this.checkArchiveContent(temp,expected);}
/** * Deletes a file from an AR-archive and adds another* @throws Exception*/public void testDeleteFromAndAddToAr()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete("test2.xml");final File file1=getFile("test.txt");final ArArchiveEntry entry=new ArArchiveEntry("test.txt",file1.length());changes.add(entry,new FileInputStream(file1));final File input=getFile("bla.ar");final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream("ar",is);temp=new File(dir,"bla.ar");out=factory.createArchiveOutputStream("ar",new FileOutputStream(temp));ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);}finally {if (out != null){out.close();}if (ais != null){ais.close();}}List<String> expected=new ArrayList<String>();expected.add("test1.xml");expected.add("test.txt");this.checkArchiveContent(temp,expected);}
/** * TODO: Move operations are not supported currently mv dir1/test.text dir2/test.txt + delete dir1 Moves the file to dir2 and deletes everything in dir1* @throws Exception*/public void testRenameAndDelete()throws Exception {}
/** * TODO: Move operations are not supported currently add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1 Add dir1/bla.txt should be surpressed. All other dir1 files will be deleted,except dir1/test.text will be moved* @throws Exception*/public void testAddMoveDelete()throws Exception {}
/** * Check can add a file to an empty archive.* @throws Exception*/public void testAddToEmptyArchive()throws Exception {final String archivename="zip";File input=this.createEmptyArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("bla/test.txt");changes.add(entry,new FileInputStream(file1));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Check can delete and add a file to an archive with a single file* @throws Exception*/public void testDeleteAddToOneFileArchive()throws Exception {final String archivename="zip";File input=this.createSingleEntryArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));changes.delete("test1.xml");archiveListDelete("test1.xml");final File file=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file,"bla/test.txt");changes.add(entry,new FileInputStream(file));archiveList.add("bla/test.txt");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Check can add and delete a file to an archive with a single file* @throws Exception*/public void testAddDeleteToOneFileArchive()throws Exception {final String archivename="cpio";File input=this.createSingleEntryArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;InputStream is=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();ChangeSet changes=new ChangeSet();try {is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));final File file=getFile("test.txt");ArchiveEntry entry=out.createArchiveEntry(file,"bla/test.txt");changes.add(entry,new FileInputStream(file));archiveList.add("bla/test.txt");changes.delete("test1.xml");archiveListDelete("test1.xml");ChangeSetPerformer performer=new ChangeSetPerformer(changes);performer.perform(ais,out);is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}else     if (is != null){is.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file with the same filename as an existing file from the stream. Should lead to a replacement.* @throws Exception*/public void testAddAllreadyExistingWithReplaceTrue()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("testdata/test1.xml");changes.add(entry,new FileInputStream(file1),true);ChangeSetPerformer performer=new ChangeSetPerformer(changes);ChangeSetResults results=performer.perform(ais,out);assertTrue(results.getAddedFromChangeSet().contains("testdata/test1.xml"));is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
/** * Adds a file with the same filename as an existing file from the stream. Should lead to a replacement.* @throws Exception*/public void testAddAllreadyExistingWithReplaceFalse()throws Exception {final String archivename="zip";File input=this.createArchive(archivename);ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile("test","." + archivename);result.deleteOnExit();try {final InputStream is=new FileInputStream(input);ais=factory.createArchiveInputStream(archivename,is);out=factory.createArchiveOutputStream(archivename,new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile("test.txt");ArchiveEntry entry=new ZipArchiveEntry("testdata/test1.xml");changes.add(entry,new FileInputStream(file1),false);ChangeSetPerformer performer=new ChangeSetPerformer(changes);ChangeSetResults results=performer.perform(ais,out);assertTrue(results.getAddedFromStream().contains("testdata/test1.xml"));assertTrue(results.getAddedFromChangeSet().isEmpty());assertTrue(results.getDeleted().isEmpty());is.close();}finally {if (out != null){out.close();}if (ais != null){ais.close();}}this.checkArchiveContent(result,archiveList);}
public void testGzipCreation()throws Exception {final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.gz");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("gz",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
public void testGzipUnarchive()throws Exception {final File input=getFile("bla.tgz");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("gz",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.gz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("gz",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.gz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new GzipCompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-84"*/public void testCorruptedInput()throws Exception {InputStream in=null;OutputStream out=null;CompressorInputStream cin=null;try {in=new FileInputStream(getFile("bla.tgz"));out=new ByteArrayOutputStream();IOUtils.copy(in,out);in.close();out.close();byte[]data=((ByteArrayOutputStream)out).toByteArray();in=new ByteArrayInputStream(data,0,data.length - 1);cin=new CompressorStreamFactory().createCompressorInputStream("gz",in);out=new ByteArrayOutputStream();try {IOUtils.copy(cin,out);fail("Expected an exception");}catch(IOException ioex){}}finally {if (out != null){out.close();}if (cin != null){cin.close();}if (in != null){in.close();}}}
public void testInteroperabilityWithGzipCompressorInputStream()throws Exception {FileInputStream fis=new FileInputStream(getFile("test3.xml"));byte[]content;try {content=IOUtils.toByteArray(fis);}finally {fis.close();}ByteArrayOutputStream bout=new ByteArrayOutputStream();GzipParameters parameters=new GzipParameters();parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);parameters.setOperatingSystem(3);parameters.setFilename("test3.xml");parameters.setComment("Test file");parameters.setModificationTime(System.currentTimeMillis());GzipCompressorOutputStream out=new GzipCompressorOutputStream(bout,parameters);out.write(content);out.flush();out.close();GzipCompressorInputStream in=new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));byte[]content2=IOUtils.toByteArray(in);Assert.assertArrayEquals("uncompressed content",content,content2);}
public void testInteroperabilityWithGZIPInputStream()throws Exception {FileInputStream fis=new FileInputStream(getFile("test3.xml"));byte[]content;try {content=IOUtils.toByteArray(fis);}finally {fis.close();}ByteArrayOutputStream bout=new ByteArrayOutputStream();GzipParameters parameters=new GzipParameters();parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);parameters.setOperatingSystem(3);parameters.setFilename("test3.xml");parameters.setComment("Test file");parameters.setModificationTime(System.currentTimeMillis());GzipCompressorOutputStream out=new GzipCompressorOutputStream(bout,parameters);out.write(content);out.flush();out.close();GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(bout.toByteArray()));byte[]content2=IOUtils.toByteArray(in);Assert.assertArrayEquals("uncompressed content",content,content2);}
public void testInvalidCompressionLevel(){GzipParameters parameters=new GzipParameters();try {parameters.setCompressionLevel(10);fail("IllegalArgumentException not thrown");}catch(IllegalArgumentException e){}try {parameters.setCompressionLevel(-5);fail("IllegalArgumentException not thrown");}catch(IllegalArgumentException e){}}
public void testExtraFlagsFastestCompression()throws Exception {testExtraFlags(Deflater.BEST_SPEED,4);}
public void testExtraFlagsBestCompression()throws Exception {testExtraFlags(Deflater.BEST_COMPRESSION,2);}
public void testExtraFlagsDefaultCompression()throws Exception {testExtraFlags(Deflater.DEFAULT_COMPRESSION,0);}
public void testOverWrite()throws Exception {GzipCompressorOutputStream out=new GzipCompressorOutputStream(new ByteArrayOutputStream());out.close();try {out.write(0);fail("IOException expected");}catch(IOException e){}}
public void testWriteAr()throws Exception {ArchiveEntry entry=new ArArchiveEntry("dummy",bytesToTest);compareWrites("ar",entry);}
public void testWriteCpio()throws Exception {ArchiveEntry entry=new CpioArchiveEntry("dummy",bytesToTest);compareWrites("cpio",entry);}
public void testWriteJar()throws Exception {ArchiveEntry entry=new JarArchiveEntry("dummy");compareWrites("jar",entry);}
public void testWriteTar()throws Exception {TarArchiveEntry entry=new TarArchiveEntry("dummy");entry.setSize(bytesToTest);compareWrites("tar",entry);}
public void testWriteZip()throws Exception {ArchiveEntry entry=new ZipArchiveEntry("dummy");compareWrites("zip",entry);}
public void testReadAr()throws Exception {compareReads("ar");}
public void testReadCpio()throws Exception {compareReads("cpio");}
public void testReadJar()throws Exception {compareReads("jar");}
public void testReadTar()throws Exception {compareReads("tar");}
public void testReadZip()throws Exception {compareReads("zip");}
public void testFinish()throws Exception {OutputStream out1=new ByteArrayOutputStream();ArchiveOutputStream aos1=factory.createArchiveOutputStream("zip",out1);aos1.putArchiveEntry(new ZipArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("jar",out1);aos1.putArchiveEntry(new JarArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("ar",out1);aos1.putArchiveEntry(new ArArchiveEntry("dummy",100));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("cpio",out1);aos1.putArchiveEntry(new CpioArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}aos1=factory.createArchiveOutputStream("tar",out1);aos1.putArchiveEntry(new TarArchiveEntry("dummy"));try {aos1.finish();fail("After putArchive should follow closeArchive");}catch(IOException io){}}
public void testOptionalFinish()throws Exception {OutputStream out1=new ByteArrayOutputStream();ArchiveOutputStream aos1=factory.createArchiveOutputStream("zip",out1);aos1.putArchiveEntry(new ZipArchiveEntry("dummy"));aos1.closeArchiveEntry();aos1.close();aos1=factory.createArchiveOutputStream("jar",out1);aos1.putArchiveEntry(new JarArchiveEntry("dummy"));aos1.closeArchiveEntry();aos1.close();try {aos1.finish();fail("finish()cannot follow close()");}catch(IOException io){}}
public void testCallSequenceAr()throws Exception {doCallSequence("Ar");}
public void testCallSequenceCpio()throws Exception {doCallSequence("Cpio");}
public void testCallSequenceJar()throws Exception {doCallSequence("Jar");}
public void testCallSequenceTar()throws Exception {doCallSequence("Tar");}
public void testCallSequenceZip()throws Exception {doCallSequence("Zip");}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-176"*/@Test public void winzipBackSlashWorkaround()throws Exception {ZipArchiveInputStream in=null;try {in=new ZipArchiveInputStream(new FileInputStream(getFile("test-winzip.zip")));ZipArchiveEntry zae=in.getNextZipEntry();zae=in.getNextZipEntry();zae=in.getNextZipEntry();assertEquals("\u00e4/",zae.getName());}finally {if (in != null){in.close();}}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-189"*/@Test public void properUseOfInflater()throws Exception {ZipFile zf=null;ZipArchiveInputStream in=null;try {zf=new ZipFile(getFile("COMPRESS-189.zip"));ZipArchiveEntry zae=zf.getEntry("USD0558682-20080101.ZIP");in=new ZipArchiveInputStream(new BufferedInputStream(zf.getInputStream(zae)));ZipArchiveEntry innerEntry;while ((innerEntry=in.getNextZipEntry())!= null){if (innerEntry.getName().endsWith("XML")){assertTrue(0 < in.read());}}}finally {if (zf != null){zf.close();}if (in != null){in.close();}}}
@Test public void shouldConsumeArchiveCompletely()throws Exception {InputStream is=ZipArchiveInputStreamTest.class.getResourceAsStream("/archive_with_trailer.zip");ZipArchiveInputStream zip=new ZipArchiveInputStream(is);while (zip.getNextZipEntry()!= null){}byte[]expected=new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'};byte[]actual=new byte[expected.length];is.read(actual);assertArrayEquals(expected,actual);zip.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-219"*/@Test public void shouldReadNestedZip()throws IOException {ZipArchiveInputStream in=null;try {in=new ZipArchiveInputStream(new FileInputStream(getFile("COMPRESS-219.zip")));extractZipInputStream(in);}finally {if (in != null){in.close();}}}
@Test public void testUnshrinkEntry()throws Exception {ZipArchiveInputStream in=new ZipArchiveInputStream(new FileInputStream(getFile("SHRUNK.ZIP")));ZipArchiveEntry entry=in.getNextZipEntry();assertEquals("method",ZipMethod.UNSHRINKING.getCode(),entry.getMethod());assertTrue(in.canReadEntryData(entry));FileInputStream original=new FileInputStream(getFile("test1.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(in));}finally {original.close();}entry=in.getNextZipEntry();assertEquals("method",ZipMethod.UNSHRINKING.getCode(),entry.getMethod());assertTrue(in.canReadEntryData(entry));original=new FileInputStream(getFile("test2.xml"));try {assertArrayEquals(IOUtils.toByteArray(original),IOUtils.toByteArray(in));}finally {original.close();}}
public void testArjUnarchive()throws Exception {StringBuilder expected=new StringBuilder();expected.append("test1.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>test2.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>\n");ArjArchiveInputStream in=new ArjArchiveInputStream(new FileInputStream(getFile("bla.arj")));ArjArchiveEntry entry;StringBuilder result=new StringBuilder();while ((entry=in.getNextEntry())!= null){result.append(entry.getName());int tmp;while ((tmp=in.read())!= -1){result.append((char)tmp);}assertFalse(entry.isDirectory());}in.close();assertEquals(result.toString(),expected.toString());}
public void testReadingOfAttributesDosVersion()throws Exception {ArjArchiveInputStream in=new ArjArchiveInputStream(new FileInputStream(getFile("bla.arj")));ArjArchiveEntry entry=in.getNextEntry();assertEquals("test1.xml",entry.getName());assertEquals(30,entry.getSize());assertEquals(0,entry.getUnixMode());Calendar cal=Calendar.getInstance();cal.set(2008,9,6,23,50,52);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),entry.getLastModifiedDate());}
public void testReadingOfAttributesUnixVersion()throws Exception {ArjArchiveInputStream in=new ArjArchiveInputStream(new FileInputStream(getFile("bla.unix.arj")));ArjArchiveEntry entry=in.getNextEntry();assertEquals("test1.xml",entry.getName());assertEquals(30,entry.getSize());assertEquals(0664,entry.getUnixMode()& 07777);Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT+0000"));cal.set(2008,9,6,21,50,52);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),entry.getLastModifiedDate());}
public void testDetection()throws Exception {CompressorInputStream bzip2=getStreamFor("bla.txt.bz2");assertNotNull(bzip2);assertTrue(bzip2 instanceof BZip2CompressorInputStream);CompressorInputStream gzip=getStreamFor("bla.tgz");assertNotNull(gzip);assertTrue(gzip instanceof GzipCompressorInputStream);CompressorInputStream pack200=getStreamFor("bla.pack");assertNotNull(pack200);assertTrue(pack200 instanceof Pack200CompressorInputStream);CompressorInputStream xz=getStreamFor("bla.tar.xz");assertNotNull(xz);assertTrue(xz instanceof XZCompressorInputStream);try {factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));fail("No exception thrown for an empty input stream");}catch(CompressorException e){}}
public void testJarArchiveCreation()throws Exception {final File output=new File(dir,"bla.jar");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("jar",out);os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}
public void testJarUnarchive()throws Exception {final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();File o=new File(dir,entry.getName());o.getParentFile().mkdirs();OutputStream out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();in.close();is.close();}
public void testJarUnarchiveAll()throws Exception {final File input=getFile("bla.jar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();is.close();}
@Test public void readSimplePaxHeader()throws Exception {final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream("30 atime=1321711775.972059463\n".getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals("1321711775.972059463",headers.get("atime"));tais.close();}
@Test public void readPaxHeaderWithEmbeddedNewline()throws Exception {final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream("28 comment=line1\nline2\nand3\n".getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals("line1\nline2\nand3",headers.get("comment"));tais.close();}
@Test public void readNonAsciiPaxHeader()throws Exception {String ae="\u00e4";String line="11 path=" + ae + "\n";assertEquals(11,line.getBytes(CharsetNames.UTF_8).length);final InputStream is=new ByteArrayInputStream(new byte[1]);final TarArchiveInputStream tais=new TarArchiveInputStream(is);Map<String,String> headers=tais.parsePaxHeaders(new ByteArrayInputStream(line.getBytes(CharsetNames.UTF_8)));assertEquals(1,headers.size());assertEquals(ae,headers.get("path"));tais.close();}
@Test public void workaroundForBrokenTimeHeader()throws Exception {TarArchiveInputStream in=null;try {in=new TarArchiveInputStream(new FileInputStream(getFile("simple-aix-native-tar.tar")));TarArchiveEntry tae=in.getNextTarEntry();tae=in.getNextTarEntry();assertEquals("sample/link-to-txt-file.lnk",tae.getName());assertEquals(new Date(0),tae.getLastModifiedDate());assertTrue(tae.isSymbolicLink());assertTrue(tae.isCheckSumOK());}finally {if (in != null){in.close();}}}
@Test public void datePriorToEpochInGNUFormat()throws Exception {datePriorToEpoch("preepoch-star.tar");}
@Test public void datePriorToEpochInPAXFormat()throws Exception {datePriorToEpoch("preepoch-posix.tar");}
@Test public void testCompress197()throws Exception {TarArchiveInputStream tar=getTestStream("/COMPRESS-197.tar");try {TarArchiveEntry entry=tar.getNextTarEntry();while (entry != null){entry=tar.getNextTarEntry();}}catch(IOException e){fail("COMPRESS-197: " + e.getMessage());}finally {tar.close();}}
@Test public void shouldUseSpecifiedEncodingWhenReadingGNULongNames()throws Exception {ByteArrayOutputStream bos=new ByteArrayOutputStream();String encoding=CharsetNames.UTF_16;String name="1234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890\u00e4";TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,encoding);tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);TarArchiveEntry t=new TarArchiveEntry(name);t.setSize(1);tos.putArchiveEntry(t);tos.write(30);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();ByteArrayInputStream bis=new ByteArrayInputStream(data);TarArchiveInputStream tis=new TarArchiveInputStream(bis,encoding);t=tis.getNextTarEntry();assertEquals(name,t.getName());tis.close();}
@Test public void shouldConsumeArchiveCompletely()throws Exception {InputStream is=TarArchiveInputStreamTest.class.getResourceAsStream("/archive_with_trailer.tar");TarArchiveInputStream tar=new TarArchiveInputStream(is);while (tar.getNextTarEntry()!= null){}byte[]expected=new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'};byte[]actual=new byte[expected.length];is.read(actual);assertArrayEquals(expected,actual);tar.close();}
@Test public void readsArchiveCompletely_COMPRESS245()throws Exception {InputStream is=TarArchiveInputStreamTest.class.getResourceAsStream("/COMPRESS-245.tar.gz");try {InputStream gin=new GZIPInputStream(is);TarArchiveInputStream tar=new TarArchiveInputStream(gin);int count=0;TarArchiveEntry entry=tar.getNextTarEntry();while (entry != null){count++;entry=tar.getNextTarEntry();}assertEquals(31,count);}catch(IOException e){fail("COMPRESS-245: " + e.getMessage());}finally {is.close();}}
public void testJarMarker()throws IOException {File testArchive=File.createTempFile("jar-aostest",".jar");testArchive.deleteOnExit();JarArchiveOutputStream out=null;ZipFile zf=null;try {out=new JarArchiveOutputStream(new FileOutputStream(testArchive));out.putArchiveEntry(new ZipArchiveEntry("foo/"));out.closeArchiveEntry();out.putArchiveEntry(new ZipArchiveEntry("bar/"));out.closeArchiveEntry();out.finish();out.close();out=null;zf=new ZipFile(testArchive);ZipArchiveEntry ze=zf.getEntry("foo/");assertNotNull(ze);ZipExtraField[]fes=ze.getExtraFields();assertEquals(1,fes.length);assertTrue(fes[0]instanceof JarMarker);ze=zf.getEntry("bar/");assertNotNull(ze);fes=ze.getExtraFields();assertEquals(0,fes.length);}finally {if (out != null){try {out.close();}catch(IOException e){}}ZipFile.closeQuietly(zf);AbstractTestCase.tryHardToDelete(testArchive);}}
public void testSevenZArchiveCreationUsingCopy()throws Exception {testSevenZArchiveCreation(SevenZMethod.COPY);}
public void testSevenZArchiveCreationUsingLZMA2()throws Exception {testSevenZArchiveCreation(SevenZMethod.LZMA2);}
public void testSevenZArchiveCreationUsingBZIP2()throws Exception {testSevenZArchiveCreation(SevenZMethod.BZIP2);}
public void testSevenZArchiveCreationUsingDeflate()throws Exception {testSevenZArchiveCreation(SevenZMethod.DEFLATE);}
public void testCpioUnarchive()throws Exception {StringBuilder expected=new StringBuilder();expected.append("./test1.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>./test2.xml<?xml version=\"1.0\"?>\n");expected.append("<empty/>\n");CpioArchiveInputStream in=new CpioArchiveInputStream(new FileInputStream(getFile("bla.cpio")));CpioArchiveEntry entry;StringBuilder result=new StringBuilder();while ((entry=(CpioArchiveEntry)in.getNextEntry())!= null){result.append(entry.getName());int tmp;while ((tmp=in.read())!= -1){result.append((char)tmp);}}in.close();assertEquals(result.toString(),expected.toString());}
public void testCpioUnarchiveCreatedByRedlineRpm()throws Exception {CpioArchiveInputStream in=new CpioArchiveInputStream(new FileInputStream(getFile("redline.cpio")));CpioArchiveEntry entry=null;int count=0;while ((entry=(CpioArchiveEntry)in.getNextEntry())!= null){count++;}in.close();assertEquals(count,1);}
public void testDefaultExtraction()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){public CompressorInputStream wrap(InputStream is)throws IOException {return new FramedSnappyCompressorInputStream(is);}});}
public void testDefaultExtractionViaFactory()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){public CompressorInputStream wrap(InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(CompressorStreamFactory.SNAPPY_FRAMED,is);}});}
public void testDefaultExtractionViaFactoryAutodetection()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){public CompressorInputStream wrap(InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(is);}});}
public void testReadLongNamesGNU()throws Exception {checkLongNameEntry("longfile_gnu.ar");}
public void testReadLongNamesBSD()throws Exception {checkLongNameEntry("longfile_bsd.ar");}
/** * Test file mode magic.*/public void testModes(){AsiExtraField a=new AsiExtraField();a.setMode(0123);assertEquals("plain file",0100123,a.getMode());a.setDirectory(true);assertEquals("directory",040123,a.getMode());a.setLinkedFile("test");assertEquals("symbolic link",0120123,a.getMode());}
/** * Test content.*/public void testContent(){AsiExtraField a=new AsiExtraField();a.setMode(0123);a.setUserId(5);a.setGroupId(6);byte[]b=a.getLocalFileDataData();byte[]expect={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};assertEquals("no link",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals("no link,byte " + i,expect[i],b[i]);}a.setLinkedFile("test");expect=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};b=a.getLocalFileDataData();assertEquals("no link",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals("no link,byte " + i,expect[i],b[i]);}}
/** * Test reparse*/public void testReparse()throws Exception {byte[]data={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};AsiExtraField a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length plain file",data.length,a.getLocalFileDataLength().getValue());assertTrue("plain file,no link",!a.isLink());assertTrue("plain file,no dir",!a.isDirectory());assertEquals("mode plain file",FILE_FLAG | 0123,a.getMode());assertEquals("uid plain file",5,a.getUserId());assertEquals("gid plain file",6,a.getGroupId());data=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length link",data.length,a.getLocalFileDataLength().getValue());assertTrue("link,is link",a.isLink());assertTrue("link,no dir",!a.isDirectory());assertEquals("mode link",LINK_FLAG | 0123,a.getMode());assertEquals("uid link",5,a.getUserId());assertEquals("gid link",6,a.getGroupId());assertEquals("test",a.getLinkedFile());data=new byte[]{(byte)0x8E,0x01,(byte)0xBF,(byte)0x0E,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals("length dir",data.length,a.getLocalFileDataLength().getValue());assertTrue("dir,no link",!a.isLink());assertTrue("dir,is dir",a.isDirectory());assertEquals("mode dir",DIR_FLAG | 0123,a.getMode());assertEquals("uid dir",5,a.getUserId());assertEquals("gid dir",6,a.getGroupId());data=new byte[]{0,0,0,0,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();try {a.parseFromLocalFileData(data,0,data.length);fail("should raise bad CRC exception");}catch(Exception e){assertEquals("bad CRC checksum 0 instead of ebf018e",e.getMessage());}}
public void testClone(){AsiExtraField s1=new AsiExtraField();s1.setUserId(42);s1.setGroupId(12);s1.setLinkedFile("foo");s1.setMode(0644);s1.setDirectory(true);AsiExtraField s2=(AsiExtraField)s1.clone();assertNotSame(s1,s2);assertEquals(s1.getUserId(),s2.getUserId());assertEquals(s1.getGroupId(),s2.getGroupId());assertEquals(s1.getLinkedFile(),s2.getLinkedFile());assertEquals(s1.getMode(),s2.getMode());assertEquals(s1.isDirectory(),s2.isDirectory());}
/** * test handling of extra fields*/public void testExtraFields(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]data1=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals("first pass",2,result.length);assertSame(a,result[0]);assertSame(u,result[1]);UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u2.setLocalFileDataData(new byte[]{1});ze.addExtraField(u2);byte[]data2=ze.getExtra();result=ze.getExtraFields();assertEquals("second pass",2,result.length);assertSame(a,result[0]);assertSame(u2,result[1]);assertEquals("length second pass",data1.length + 1,data2.length);UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addExtraField(u3);result=ze.getExtraFields();assertEquals("third pass",3,result.length);ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);byte[]data3=ze.getExtra();result=ze.getExtraFields();assertEquals("fourth pass",2,result.length);assertSame(a,result[0]);assertSame(u3,result[1]);assertEquals("length fourth pass",data2.length,data3.length);try {ze.removeExtraField(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);fail("should be no such element");}catch(java.util.NoSuchElementException nse){}}
/** * test handling of extra fields via central directory*/public void testExtraFieldMerging(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]b=ExtraFieldUtilsTest.UNRECOGNIZED_HEADER.getBytes();ze.setCentralDirectoryExtra(new byte[]{b[0],b[1],1,0,127});ZipExtraField[]result=ze.getExtraFields();assertEquals("first pass",2,result.length);assertSame(a,result[0]);assertEquals(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER,result[1].getHeaderId());assertEquals(new ZipShort(0),result[1].getLocalFileDataLength());assertEquals(new ZipShort(1),result[1].getCentralDirectoryLength());ze.setCentralDirectoryExtra(new byte[]{2,0,0,0});result=ze.getExtraFields();assertEquals("second pass",3,result.length);ze.setExtra(new byte[]{2,0,1,0,127});result=ze.getExtraFields();assertEquals("third pass",3,result.length);assertSame(a,result[0]);assertEquals(new ZipShort(2),result[2].getHeaderId());assertEquals(new ZipShort(1),result[2].getLocalFileDataLength());assertEquals(new ZipShort(0),result[2].getCentralDirectoryLength());}
/** * test handling of extra fields*/public void testAddAsFirstExtraField(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry("test/");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]data1=ze.getExtra();UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(ExtraFieldUtilsTest.UNRECOGNIZED_HEADER);u2.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u2);byte[]data2=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals("second pass",2,result.length);assertSame(u2,result[0]);assertSame(a,result[1]);assertEquals("length second pass",data1.length + 1,data2.length);UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u3);result=ze.getExtraFields();assertEquals("third pass",3,result.length);assertSame(u3,result[0]);assertSame(u2,result[1]);assertSame(a,result[2]);}
public void testUnixMode(){ZipArchiveEntry ze=new ZipArchiveEntry("foo");assertEquals(0,ze.getPlatform());ze.setUnixMode(0755);assertEquals(3,ze.getPlatform());assertEquals(0755,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0444);assertEquals(3,ze.getPlatform());assertEquals(0444,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(1,ze.getExternalAttributes()& 0xFFFF);ze=new ZipArchiveEntry("foo/");assertEquals(0,ze.getPlatform());ze.setUnixMode(0777);assertEquals(3,ze.getPlatform());assertEquals(0777,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x10,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0577);assertEquals(3,ze.getPlatform());assertEquals(0577,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x11,ze.getExternalAttributes()& 0xFFFF);}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-93" >COMPRESS-93</a>.*/public void testCompressionMethod()throws Exception {ZipArchiveOutputStream zos=new ZipArchiveOutputStream(new ByteArrayOutputStream());ZipArchiveEntry entry=new ZipArchiveEntry("foo");assertEquals(-1,entry.getMethod());assertFalse(zos.canWriteEntryData(entry));entry.setMethod(ZipEntry.STORED);assertEquals(ZipEntry.STORED,entry.getMethod());assertTrue(zos.canWriteEntryData(entry));entry.setMethod(ZipEntry.DEFLATED);assertEquals(ZipEntry.DEFLATED,entry.getMethod());assertTrue(zos.canWriteEntryData(entry));entry.setMethod(6);assertEquals(6,entry.getMethod());assertFalse(zos.canWriteEntryData(entry));zos.close();}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-94" >COMPRESS-94</a>.*/public void testNotEquals(){ZipArchiveEntry entry1=new ZipArchiveEntry("foo");ZipArchiveEntry entry2=new ZipArchiveEntry("bar");assertFalse(entry1.equals(entry2));}
/** * Tests comment's influence on equals comparisons.* @see "https://issues.apache.org/jira/browse/COMPRESS-187"*/public void testNullCommentEqualsEmptyComment(){ZipArchiveEntry entry1=new ZipArchiveEntry("foo");ZipArchiveEntry entry2=new ZipArchiveEntry("foo");ZipArchiveEntry entry3=new ZipArchiveEntry("foo");entry1.setComment(null);entry2.setComment("");entry3.setComment("bar");assertEquals(entry1,entry2);assertFalse(entry1.equals(entry3));assertFalse(entry2.equals(entry3));}
public void testName(){byte[]buff=new byte[20];String sb1="abcdefghijklmnopqrstuvwxyz";int off=TarUtils.formatNameBytes(sb1,buff,1,buff.length - 1);assertEquals(off,20);String sb2=TarUtils.parseName(buff,1,10);assertEquals(sb2,sb1.substring(0,10));sb2=TarUtils.parseName(buff,1,19);assertEquals(sb2,sb1.substring(0,19));buff=new byte[30];off=TarUtils.formatNameBytes(sb1,buff,1,buff.length - 1);assertEquals(off,30);sb2=TarUtils.parseName(buff,1,buff.length - 1);assertEquals(sb1,sb2);}
public void testParseOctal()throws Exception {long value;byte[]buffer;final long MAX_OCTAL=077777777777L;final String maxOctal="77777777777 ";buffer=maxOctal.getBytes(CharsetNames.UTF_8);value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL,value);buffer[buffer.length - 1]=0;value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(MAX_OCTAL,value);buffer=new byte[]{0,0};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);buffer=new byte[]{0,' '};value=TarUtils.parseOctal(buffer,0,buffer.length);assertEquals(0,value);}
public void testParseOctalInvalid()throws Exception {byte[]buffer;buffer=new byte[0];try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - should be at least 2 bytes long");}catch(IllegalArgumentException expected){}buffer=new byte[]{0};try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - should be at least 2 bytes long");}catch(IllegalArgumentException expected){}buffer=new byte[]{' ',0,0,0};try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - not all NULs");}catch(IllegalArgumentException expected){}buffer="abcdef ".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException");}catch(IllegalArgumentException expected){}buffer="77777777777".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - no trailer");}catch(IllegalArgumentException expected){}buffer=" 0 07 ".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - embedded space");}catch(IllegalArgumentException expected){}buffer=" 0\00007 ".getBytes(CharsetNames.UTF_8);try {TarUtils.parseOctal(buffer,0,buffer.length);fail("Expected IllegalArgumentException - embedded NUL");}catch(IllegalArgumentException expected){}}
public void testRoundTripOctal(){checkRoundTripOctal(0);checkRoundTripOctal(1);checkRoundTripOctal(TarConstants.MAXSIZE);checkRoundTripOctal(0,TarConstants.UIDLEN);checkRoundTripOctal(1,TarConstants.UIDLEN);checkRoundTripOctal(TarConstants.MAXID,8);}
public void testRoundTripOctalOrBinary8(){testRoundTripOctalOrBinary(8);}
public void testRoundTripOctalOrBinary12(){testRoundTripOctalOrBinary(12);checkRoundTripOctalOrBinary(Long.MAX_VALUE,12);checkRoundTripOctalOrBinary(Long.MIN_VALUE + 1,12);}
public void testTrailers(){byte[]buffer=new byte[12];TarUtils.formatLongOctalBytes(123,buffer,0,buffer.length);assertEquals(' ',buffer[buffer.length - 1]);assertEquals('3',buffer[buffer.length - 2]);TarUtils.formatOctalBytes(123,buffer,0,buffer.length);assertEquals(0,buffer[buffer.length - 1]);assertEquals(' ',buffer[buffer.length - 2]);assertEquals('3',buffer[buffer.length - 3]);TarUtils.formatCheckSumOctalBytes(123,buffer,0,buffer.length);assertEquals(' ',buffer[buffer.length - 1]);assertEquals(0,buffer[buffer.length - 2]);assertEquals('3',buffer[buffer.length - 3]);}
public void testNegative()throws Exception {byte[]buffer=new byte[22];TarUtils.formatUnsignedOctalString(-1,buffer,0,buffer.length);assertEquals("1777777777777777777777",new String(buffer,CharsetNames.UTF_8));}
public void testOverflow()throws Exception {byte[]buffer=new byte[8 - 1];TarUtils.formatUnsignedOctalString(07777777L,buffer,0,buffer.length);assertEquals("7777777",new String(buffer,CharsetNames.UTF_8));try {TarUtils.formatUnsignedOctalString(017777777L,buffer,0,buffer.length);fail("Should have cause IllegalArgumentException");}catch(IllegalArgumentException expected){}}
public void testRoundTripNames(){checkName("");checkName("The quick brown fox\n");checkName("\177");}
public void testRoundEncoding()throws Exception {ZipEncoding enc=ZipEncodingHelper.getZipEncoding(CharsetNames.ISO_8859_1);String s="0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W220\u00b1ZB\u00b1LALALA\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1CAN\u00b1\u00b1DC\u00b1\u00b1\u00b104\u00b1060302\u00b1MOE.model";byte buff[]=new byte[100];int len=TarUtils.formatNameBytes(s,buff,0,buff.length,enc);assertEquals(s,TarUtils.parseName(buff,0,len,enc));}
public void testReadNegativeBinary8Byte(){byte[]b=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xf1,(byte)0xef};assertEquals(-3601l,TarUtils.parseOctalOrBinary(b,0,8));}
public void testReadNegativeBinary12Byte(){byte[]b=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xf1,(byte)0xef};assertEquals(-3601l,TarUtils.parseOctalOrBinary(b,0,12));}
public void testWriteNegativeBinary8Byte(){byte[]b=new byte[]{(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xf1,(byte)0xef};assertEquals(-3601l,TarUtils.parseOctalOrBinary(b,0,8));}
public void testVerifyHeaderCheckSum(){byte[]valid={116,101,115,116,49,46,120,109,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,48,48,54,52,52,0,48,48,48,48,55,54,53,0,48,48,48,48,55,54,53,0,48,48,48,48,48,48,48,49,49,52,50,0,49,48,55,49,54,53,52,53,54,50,54,0,48,49,50,50,54,48,0,32,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,115,116,97,114,32,32,0,116,99,117,114,100,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,99,117,114,100,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};assertTrue(TarUtils.verifyCheckSum(valid));byte[]compress117={116,101,115,116,49,46,120,109,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,48,48,48,54,52,52,0,48,48,48,48,55,54,53,0,48,48,48,48,55,54,53,0,48,48,48,48,48,48,48,49,49,52,50,0,49,48,55,49,54,53,52,53,54,50,54,0,48,49,50,50,54,48,0,32,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};assertTrue(TarUtils.verifyCheckSum(compress117));byte[]invalid={70,79,82,77,0,0,15,46,65,73,70,70,67,79,77,77,0,0,0,18,0,2,0,0,3,-64,0,16,64,14,-84,68,0,0,0,0,0,0,83,83,78,68,0,0,15,8,0,0,0,0,0,0,0,0,0,1,-1,-1,0,1,-1,-1,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,0,0,-1,-1,0,2,-1,-2,0,2,-1,-1,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,-1,-1,0,1,0,0,0,0,0,0,0,1,-1,-1,0,1,-1,-2,0,1,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,2,-1,-2,0,2,-1,-1,0,0,0,1,-1,-1,0,1,-1,-1,0,0,0,0,0,0,0,0,0,1,-1,-2,0,2,-1,-2,0,1,0,0,0,1,-1,-1,0,0,0,1,-1,-1,0,0,0,1,-1,-2,0,2,-1,-1,0,0,0,0,0,0,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,1,-1,-1,0,2,-1,-2,0,2,-1,-2,0,2,-1,-2,0,1,0,0,0,0,0,0,0,1,-1,-2,0,2,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,0,1,0,0,-1,-1,0,2,-1,-2,0,2,-1,-1,0,0,0,0,0,0,-1,-1,0,1,-1,-1,0,1,-1,-1,0,2,-1,-2,0,1,0,0,-1,-1,0,2,-1,-2,0,2,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,-1,-1,0,1,0,0,0,0,0,1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-2,0,2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,1,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,-1,-1,0,2,-1,-2,0,2,-1,-2,0,2,-1,-1,0,0,0,0,-1,-1,0,1,-1,-1,0,1,-1,-1,0,1,-1,-1,0,1,-1,-1,0,1,0,0,0,0,-1,-1,0,2,-1,-2,0,1,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,0,0,0,0,-1,-1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1};assertFalse(TarUtils.verifyCheckSum(invalid));}
public void testCpioArchiveCreation()throws Exception {final File output=new File(dir,"bla.cpio");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("cpio",out);os.putArchiveEntry(new CpioArchiveEntry("test1.xml",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new CpioArchiveEntry("test2.xml",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}
public void testCpioUnarchive()throws Exception {final File output=new File(dir,"bla.cpio");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final long file1Length=file1.length();final long file2Length=file2.length();{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("cpio",out);CpioArchiveEntry entry=new CpioArchiveEntry("test1.xml",file1Length);entry.setMode(CpioConstants.C_ISREG);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();entry=new CpioArchiveEntry("test2.xml",file2Length);entry.setMode(CpioConstants.C_ISREG);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.finish();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("cpio",is);Map<String,File> result=new HashMap<String,File>();ArchiveEntry entry=null;while ((entry=in.getNextEntry())!= null){File cpioget=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(cpioget);IOUtils.copy(in,out);out.close();result.put(entry.getName(),cpioget);}in.close();is.close();File t=result.get("test1.xml");assertTrue("Expected " + t.getAbsolutePath()+ " to exist",t.exists());assertEquals("length of " + t.getAbsolutePath(),file1Length,t.length());t=result.get("test2.xml");assertTrue("Expected " + t.getAbsolutePath()+ " to exist",t.exists());assertEquals("length of " + t.getAbsolutePath(),file2Length,t.length());}
public void testDirectoryEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();CpioArchiveEntry in=new CpioArchiveEntry(tmp[0],"foo");tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitDirectoryEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();CpioArchiveEntry in=new CpioArchiveEntry("foo/");in.setTime(beforeArchiveWrite / 1000);in.setMode(CpioConstants.C_ISDIR);tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));CpioArchiveEntry in=new CpioArchiveEntry(tmp[1],"foo");tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;CpioArchiveOutputStream tos=null;CpioArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".cpio",tmp[0]);archive.deleteOnExit();tos=new CpioArchiveOutputStream(new FileOutputStream(archive));CpioArchiveEntry in=new CpioArchiveEntry("foo");in.setTime(tmp[1].lastModified()/ 1000);in.setSize(tmp[1].length());in.setMode(CpioConstants.C_ISREG);tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new CpioArchiveInputStream(new FileInputStream(archive));CpioArchiveEntry out=tis.getNextCPIOEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testXZCreation()throws Exception {long max=ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();System.out.println("XZTestCase: HeapMax=" + max + " bytes "+ (double)max / (1024 * 1024)+ " MB");final File input=getFile("test1.xml");final File output=new File(dir,"test1.xml.xz");final OutputStream out=new FileOutputStream(output);try {final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("xz",out);try {IOUtils.copy(new FileInputStream(input),cos);}finally {cos.close();}}finally {out.close();}}
public void testXZUnarchive()throws Exception {final File input=getFile("bla.tar.xz");final File output=new File(dir,"bla.tar");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("xz",is);FileOutputStream out=null;try {out=new FileOutputStream(output);IOUtils.copy(in,out);}finally {if (out != null){out.close();}in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.xz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("xz",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.xz");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new XZCompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testMessageWhenArchiverNameIsNull_1(){try {new ArchiveStreamFactory().createArchiveInputStream(null,System.in);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(ARCHIVER_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
public void testMessageWhenInputStreamIsNull(){try {new ArchiveStreamFactory().createArchiveInputStream("zip",null);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(INPUTSTREAM_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
public void testMessageWhenArchiverNameIsNull_2(){try {new ArchiveStreamFactory().createArchiveOutputStream(null,System.out);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(ARCHIVER_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
public void testMessageWhenOutputStreamIsNull(){try {new ArchiveStreamFactory().createArchiveOutputStream("zip",null);fail("Should raise an IllegalArgumentException.");}catch(IllegalArgumentException e){Assert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE,e.getMessage());}catch(ArchiveException e){fail("ArchiveException not expected");}}
/** * Test conversion to bytes.*/public void testToBytes(){ZipShort zs=new ZipShort(0x1234);byte[]result=zs.getBytes();assertEquals("length getBytes",2,result.length);assertEquals("first byte getBytes",0x34,result[0]);assertEquals("second byte getBytes",0x12,result[1]);}
/** * Test conversion from bytes.*/public void testFromBytes(){byte[]val=new byte[]{0x34,0x12};ZipShort zs=new ZipShort(val);assertEquals("value from bytes",0x1234,zs.getValue());}
/** * Test the contract of the equals method.*/public void testEquals(){ZipShort zs=new ZipShort(0x1234);ZipShort zs2=new ZipShort(0x1234);ZipShort zs3=new ZipShort(0x5678);assertTrue("reflexive",zs.equals(zs));assertTrue("works",zs.equals(zs2));assertTrue("works,part two",!zs.equals(zs3));assertTrue("symmetric",zs2.equals(zs));assertTrue("null handling",!zs.equals(null));assertTrue("non ZipShort handling",!zs.equals(new Integer(0x1234)));}
/** * Test sign handling.*/public void testSign(){ZipShort zs=new ZipShort(new byte[]{(byte)0xFF,(byte)0xFF});assertEquals(0x0000FFFF,zs.getValue());}
public void testClone(){ZipShort s1=new ZipShort(42);ZipShort s2=(ZipShort)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}
@Test(expected=UnsupportedOperationException.class)public void shouldThrowIfNoLastModifiedDateIsSet(){new SevenZArchiveEntry().getLastModifiedDate();}
@Test(expected=UnsupportedOperationException.class)public void shouldThrowIfNoCreationDateIsSet(){new SevenZArchiveEntry().getCreationDate();}
@Test(expected=UnsupportedOperationException.class)public void shouldThrowIfNoAccessDateIsSet(){new SevenZArchiveEntry().getAccessDate();}
/** * see https://issues.apache.org/jira/browse/COMPRESS-171*/@Test public void shortTextFilesAreNoTARs()throws Exception {try {new ArchiveStreamFactory().createArchiveInputStream(new ByteArrayInputStream("This certainly is not a tar archive,really,no kidding".getBytes()));fail("created an input stream for a non-archive");}catch(ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}}
/** * see https://issues.apache.org/jira/browse/COMPRESS-191*/@Test public void aiffFilesAreNoTARs()throws Exception {FileInputStream fis=new FileInputStream("src/test/resources/testAIFF.aif");try {InputStream is=new BufferedInputStream(fis);try {new ArchiveStreamFactory().createArchiveInputStream(is);fail("created an input stream for a non-archive");}catch(ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}finally {is.close();}}finally {fis.close();}}
@Test public void testCOMPRESS209()throws Exception {FileInputStream fis=new FileInputStream("src/test/resources/testCompress209.doc");try {InputStream bis=new BufferedInputStream(fis);try {new ArchiveStreamFactory().createArchiveInputStream(bis);fail("created an input stream for a non-archive");}catch(ArchiveException ae){assertTrue(ae.getMessage().startsWith("No Archiver found"));}finally {bis.close();}}finally {fis.close();}}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-208" >COMPRESS-208</a>.*/@Test public void skipsPK00Prefix()throws Exception {FileInputStream fis=new FileInputStream("src/test/resources/COMPRESS-208.zip");try {InputStream bis=new BufferedInputStream(fis);try {ArchiveInputStream ais=new ArchiveStreamFactory().createArchiveInputStream(bis);try {assertTrue(ais instanceof ZipArchiveInputStream);}finally {ais.close();}}finally {bis.close();}}finally {fis.close();}}
public void testPutAndGet()throws Exception {int size=16;CircularBuffer buffer=new CircularBuffer(size);for (int i=0;i < size / 2;i++){buffer.put(i);}assertTrue("available",buffer.available());for (int i=0;i < size / 2;i++){assertEquals("buffer[" + i + "]",i,buffer.get());}assertEquals(-1,buffer.get());assertFalse("available",buffer.available());}
public void testCopy()throws Exception {CircularBuffer buffer=new CircularBuffer(16);buffer.put(1);buffer.put(2);buffer.get();buffer.get();buffer.copy(6,8);for (int i=2;i < 6;i++){assertEquals("buffer[" + i + "]",0,buffer.get());}assertEquals("buffer[" + 6 + "]",1,buffer.get());assertEquals("buffer[" + 7 + "]",2,buffer.get());assertEquals("buffer[" + 8 + "]",0,buffer.get());assertEquals("buffer[" + 9 + "]",0,buffer.get());for (int i=10;i < 14;i++){buffer.put(i);buffer.get();}assertFalse("available",buffer.available());buffer.copy(2,8);for (int i=14;i < 18;i++){assertEquals("buffer[" + i + "]",i % 2 == 0 ? 12 : 13,buffer.get());}}
public void testZipLong()throws Exception {ZipLong test=ZipUtil.toDosTime(time);assertEquals(test.getValue(),zl.getValue());}
public void testAdjustToLong(){assertEquals(Integer.MAX_VALUE,ZipUtil.adjustToLong(Integer.MAX_VALUE));assertEquals(((long)Integer.MAX_VALUE)+ 1,ZipUtil.adjustToLong(Integer.MAX_VALUE + 1));assertEquals(2 * ((long)Integer.MAX_VALUE),ZipUtil.adjustToLong(2 * Integer.MAX_VALUE));}
public void testMinTime(){byte[]b1=ZipUtil.toDosTime(0);byte b10=b1[0];b1[0]++;byte[]b2=ZipUtil.toDosTime(0);assertEquals(b10,b2[0]);}
public void testReverse(){byte[][]bTest=new byte[6][];bTest[0]=new byte[]{};bTest[1]=new byte[]{1};bTest[2]=new byte[]{1,2};bTest[3]=new byte[]{1,2,3};bTest[4]=new byte[]{1,2,3,4};bTest[5]=new byte[]{1,2,3,4,5};byte[][]rTest=new byte[6][];rTest[0]=new byte[]{};rTest[1]=new byte[]{1};rTest[2]=new byte[]{2,1};rTest[3]=new byte[]{3,2,1};rTest[4]=new byte[]{4,3,2,1};rTest[5]=new byte[]{5,4,3,2,1};assertEquals("test and result arrays are same length",bTest.length,rTest.length);for (int i=0;i < bTest.length;i++){byte[]result=ZipUtil.reverse(bTest[i]);assertTrue("reverse mutates in-place",bTest[i]== result);assertTrue("reverse actually reverses",Arrays.equals(rTest[i],result));}}
public void testBigToLong(){BigInteger big1=BigInteger.valueOf(1);BigInteger big2=BigInteger.valueOf(Long.MAX_VALUE);BigInteger big3=BigInteger.valueOf(Long.MIN_VALUE);assertEquals(1L,ZipUtil.bigToLong(big1));assertEquals(Long.MAX_VALUE,ZipUtil.bigToLong(big2));assertEquals(Long.MIN_VALUE,ZipUtil.bigToLong(big3));BigInteger big4=big2.add(big1);try {ZipUtil.bigToLong(big4);fail("Should have thrown IllegalArgumentException");}catch(IllegalArgumentException iae){}BigInteger big5=big3.subtract(big1);try {ZipUtil.bigToLong(big5);fail("ZipUtil.bigToLong(BigInteger)should have thrown IllegalArgumentException");}catch(IllegalArgumentException iae){}}
public void testLongToBig(){long l0=0;long l1=1;long l2=-1;long l3=Integer.MIN_VALUE;long l4=Long.MAX_VALUE;long l5=Long.MIN_VALUE;BigInteger big0=ZipUtil.longToBig(l0);BigInteger big1=ZipUtil.longToBig(l1);BigInteger big2=ZipUtil.longToBig(l2);BigInteger big3=ZipUtil.longToBig(l3);BigInteger big4=ZipUtil.longToBig(l4);assertEquals(0,big0.longValue());assertEquals(1,big1.longValue());assertEquals(0xFFFFFFFFL,big2.longValue());assertEquals(0x80000000L,big3.longValue());assertEquals(Long.MAX_VALUE,big4.longValue());try {ZipUtil.longToBig(l5);fail("ZipUtil.longToBig(long)should have thrown IllegalArgumentException");}catch(IllegalArgumentException iae){}}
public void testSignedByteToUnsignedInt(){int expectedVal=128;for (int i=Byte.MIN_VALUE;i <= Byte.MAX_VALUE;i++){byte b=(byte)i;assertEquals(expectedVal,ZipUtil.signedByteToUnsignedInt(b));expectedVal++;if (expectedVal == 256){expectedVal=0;}}}
public void testUnsignedIntToSignedByte(){int unsignedVal=128;for (int i=Byte.MIN_VALUE;i <= Byte.MAX_VALUE;i++){byte expectedVal=(byte)i;assertEquals(expectedVal,ZipUtil.unsignedIntToSignedByte(unsignedVal));unsignedVal++;if (unsignedVal == 256){unsignedVal=0;}}try {ZipUtil.unsignedIntToSignedByte(-1);fail("ZipUtil.unsignedIntToSignedByte(-1)should have thrown IllegalArgumentException");}catch(IllegalArgumentException iae){}try {ZipUtil.unsignedIntToSignedByte(256);fail("ZipUtil.unsignedIntToSignedByte(256)should have thrown IllegalArgumentException");}catch(IllegalArgumentException iae){}}
/** * Test conversion to bytes.*/public void testToBytes(){ZipLong zl=new ZipLong(0x12345678);byte[]result=zl.getBytes();assertEquals("length getBytes",4,result.length);assertEquals("first byte getBytes",0x78,result[0]);assertEquals("second byte getBytes",0x56,result[1]);assertEquals("third byte getBytes",0x34,result[2]);assertEquals("fourth byte getBytes",0x12,result[3]);}
/** * Test conversion from bytes.*/public void testFromBytes(){byte[]val=new byte[]{0x78,0x56,0x34,0x12};ZipLong zl=new ZipLong(val);assertEquals("value from bytes",0x12345678,zl.getValue());}
/** * Test the contract of the equals method.*/public void testEquals(){ZipLong zl=new ZipLong(0x12345678);ZipLong zl2=new ZipLong(0x12345678);ZipLong zl3=new ZipLong(0x87654321);assertTrue("reflexive",zl.equals(zl));assertTrue("works",zl.equals(zl2));assertTrue("works,part two",!zl.equals(zl3));assertTrue("symmetric",zl2.equals(zl));assertTrue("null handling",!zl.equals(null));assertTrue("non ZipLong handling",!zl.equals(new Integer(0x1234)));}
/** * Test sign handling.*/public void testSign(){ZipLong zl=new ZipLong(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(0x00000000FFFFFFFFl,zl.getValue());}
public void testClone(){ZipLong s1=new ZipLong(42);ZipLong s2=(ZipLong)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}
public void testRead7ZipMultiVolumeArchiveForStream()throws IOException {FileInputStream archive=new FileInputStream(getFile("apache-maven-2.2.1.zip.001"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,null,false);for(String element : ENTRIES){assertEquals(element,zi.getNextEntry().getName());}ArchiveEntry lastEntry=zi.getNextEntry();assertEquals(LAST_ENTRY_NAME,lastEntry.getName());byte[]buffer=new byte[4096];try {while (zi.read(buffer)> 0){}fail("shouldn't be able to read from truncated entry");}catch(IOException e){assertEquals("Truncated ZIP file",e.getMessage());}try {zi.getNextEntry();fail("shouldn't be able to read another entry from truncated" + " file");}catch(IOException e){}}finally {if (zi != null){zi.close();}}}
public void testRead7ZipMultiVolumeArchiveForFile()throws IOException {File file=getFile("apache-maven-2.2.1.zip.001");try {new ZipFile(file);fail("Expected ZipFile to fail");}catch(IOException ex){}}
@Test public void publicNameAddsTrailingSlashForDirectories(){DumpArchiveEntry ent=new DumpArchiveEntry("foo","bar",-1,DumpArchiveEntry.TYPE.DIRECTORY);assertEquals("bar",ent.getSimpleName());assertEquals("foo",ent.getOriginalName());assertEquals("foo/",ent.getName());}
@Test public void publicNameRemovesLeadingDotSlash(){DumpArchiveEntry ent=new DumpArchiveEntry("./foo","bar");assertEquals("bar",ent.getSimpleName());assertEquals("./foo",ent.getOriginalName());assertEquals("foo",ent.getName());}
public void testDirectoriesAndEmptyFiles()throws Exception {File output=new File(dir,"empties.7z");Date accessDate=new Date();Calendar cal=Calendar.getInstance();cal.add(Calendar.HOUR,-1);Date creationDate=cal.getTime();SevenZOutputFile outArchive=new SevenZOutputFile(output);try {SevenZArchiveEntry entry=outArchive.createArchiveEntry(dir,"foo/");outArchive.putArchiveEntry(entry);outArchive.closeArchiveEntry();entry=new SevenZArchiveEntry();entry.setName("foo/bar");entry.setCreationDate(creationDate);entry.setAccessDate(accessDate);outArchive.putArchiveEntry(entry);outArchive.write(new byte[0]);outArchive.closeArchiveEntry();entry=new SevenZArchiveEntry();entry.setName("xyzzy");outArchive.putArchiveEntry(entry);outArchive.write(0);outArchive.closeArchiveEntry();entry=outArchive.createArchiveEntry(dir,"baz/");entry.setAntiItem(true);outArchive.putArchiveEntry(entry);outArchive.closeArchiveEntry();entry=new SevenZArchiveEntry();entry.setName("dada");entry.setHasWindowsAttributes(true);entry.setWindowsAttributes(17);outArchive.putArchiveEntry(entry);outArchive.write(5);outArchive.write(42);outArchive.closeArchiveEntry();outArchive.finish();}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {SevenZArchiveEntry entry=archive.getNextEntry();assert(entry != null);assertEquals("foo/",entry.getName());assertTrue(entry.isDirectory());assertFalse(entry.isAntiItem());entry=archive.getNextEntry();assert(entry != null);assertEquals("foo/bar",entry.getName());assertFalse(entry.isDirectory());assertFalse(entry.isAntiItem());assertEquals(0,entry.getSize());assertFalse(entry.getHasLastModifiedDate());assertEquals(accessDate,entry.getAccessDate());assertEquals(creationDate,entry.getCreationDate());entry=archive.getNextEntry();assert(entry != null);assertEquals("xyzzy",entry.getName());assertEquals(1,entry.getSize());assertFalse(entry.getHasAccessDate());assertFalse(entry.getHasCreationDate());assertEquals(0,archive.read());entry=archive.getNextEntry();assert(entry != null);assertEquals("baz/",entry.getName());assertTrue(entry.isDirectory());assertTrue(entry.isAntiItem());entry=archive.getNextEntry();assert(entry != null);assertEquals("dada",entry.getName());assertEquals(2,entry.getSize());byte[]content=new byte[2];assertEquals(2,archive.read(content));assertEquals(5,content[0]);assertEquals(42,content[1]);assertEquals(17,entry.getWindowsAttributes());assert(archive.getNextEntry()== null);}finally {archive.close();}}
public void testDirectoriesOnly()throws Exception {File output=new File(dir,"dirs.7z");SevenZOutputFile outArchive=new SevenZOutputFile(output);try {SevenZArchiveEntry entry=new SevenZArchiveEntry();entry.setName("foo/");entry.setDirectory(true);outArchive.putArchiveEntry(entry);outArchive.closeArchiveEntry();}finally {outArchive.close();}final SevenZFile archive=new SevenZFile(output);try {SevenZArchiveEntry entry=archive.getNextEntry();assert(entry != null);assertEquals("foo/",entry.getName());assertTrue(entry.isDirectory());assertFalse(entry.isAntiItem());assert(archive.getNextEntry()== null);}finally {archive.close();}}
public void testCantFinishTwice()throws Exception {File output=new File(dir,"finish.7z");SevenZOutputFile outArchive=new SevenZOutputFile(output);try {outArchive.finish();outArchive.finish();fail("shouldn't be able to call finish twice");}catch(IOException ex){assertEquals("This archive has already been finished",ex.getMessage());}finally {outArchive.close();}}
public void testSixEmptyFiles()throws Exception {testCompress252(6,0);}
public void testSixFilesSomeNotEmpty()throws Exception {testCompress252(6,2);}
public void testSevenEmptyFiles()throws Exception {testCompress252(7,0);}
public void testSevenFilesSomeNotEmpty()throws Exception {testCompress252(7,2);}
public void testEightEmptyFiles()throws Exception {testCompress252(8,0);}
public void testEightFilesSomeNotEmpty()throws Exception {testCompress252(8,2);}
public void testNineEmptyFiles()throws Exception {testCompress252(9,0);}
public void testNineFilesSomeNotEmpty()throws Exception {testCompress252(9,2);}
public void testTwentyNineEmptyFiles()throws Exception {testCompress252(29,0);}
public void testTwentyNineFilesSomeNotEmpty()throws Exception {testCompress252(29,7);}
public void testDecode()throws IOException {InputStream in=new ByteArrayInputStream(new byte[]{0x02,0x42,0x01,0x13});BinaryTree tree=BinaryTree.decode(in,8);assertNotNull(tree);BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0x8D,(byte)0xC5,(byte)0x11,0x00}));assertEquals(0,tree.read(stream));assertEquals(1,tree.read(stream));assertEquals(2,tree.read(stream));assertEquals(3,tree.read(stream));assertEquals(4,tree.read(stream));assertEquals(5,tree.read(stream));assertEquals(6,tree.read(stream));assertEquals(7,tree.read(stream));}
public void testBzipCreation()throws Exception {File output=null;final File input=getFile("test.txt");{output=new File(dir,"test.txt.bz2");final OutputStream out=new FileOutputStream(output);final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream("bzip2",out);FileInputStream in=new FileInputStream(input);IOUtils.copy(in,cos);cos.close();in.close();}final File decompressed=new File(dir,"decompressed.txt");{final File toDecompress=output;final InputStream is=new FileInputStream(toDecompress);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);FileOutputStream os=new FileOutputStream(decompressed);IOUtils.copy(in,os);is.close();os.close();}assertEquals(input.length(),decompressed.length());}
public void testBzip2Unarchive()throws Exception {final File input=getFile("bla.txt.bz2");final File output=new File(dir,"bla.txt");final InputStream is=new FileInputStream(input);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);FileOutputStream os=new FileOutputStream(output);IOUtils.copy(in,os);is.close();os.close();}
public void testConcatenatedStreamsReadFirstOnly()throws Exception {final File input=getFile("multiple.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream("bzip2",is);try {assertEquals('a',in.read());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testConcatenatedStreamsReadFully()throws Exception {final File input=getFile("multiple.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new BZip2CompressorInputStream(is,true);try {assertEquals('a',in.read());assertEquals('b',in.read());assertEquals(0,in.available());assertEquals(-1,in.read());}finally {in.close();}}finally {is.close();}}
public void testCOMPRESS131()throws Exception {final File input=getFile("COMPRESS-131.bz2");final InputStream is=new FileInputStream(input);try {final CompressorInputStream in=new BZip2CompressorInputStream(is,true);try {int l=0;while (in.read()!= -1){l++;}assertEquals(539,l);}finally {in.close();}}finally {is.close();}}
public void testWriteOldBinary()throws Exception {final File f=getFile("test1.xml");final File output=new File(dir,"test.cpio");final FileOutputStream out=new FileOutputStream(output);InputStream in=null;try {final CpioArchiveOutputStream os=new CpioArchiveOutputStream(out,CpioConstants.FORMAT_OLD_BINARY);os.putArchiveEntry(new CpioArchiveEntry(CpioConstants.FORMAT_OLD_BINARY,f,"test1.xml"));IOUtils.copy(in=new FileInputStream(f),os);in.close();in=null;os.closeArchiveEntry();os.close();}finally {if (in != null){in.close();}out.close();}try {in=new CpioArchiveInputStream(new FileInputStream(output));CpioArchiveEntry e=((CpioArchiveInputStream)in).getNextCPIOEntry();assertEquals("test1.xml",e.getName());assertNull(((CpioArchiveInputStream)in).getNextEntry());}finally {if (in != null){in.close();}}}
public void testCount()throws Exception {File f=File.createTempFile("commons-compress-tarcount",".tar");f.deleteOnExit();FileOutputStream fos=new FileOutputStream(f);ArchiveOutputStream tarOut=new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR,fos);File file1=getFile("test1.xml");TarArchiveEntry sEntry=new TarArchiveEntry(file1,file1.getName());tarOut.putArchiveEntry(sEntry);FileInputStream in=new FileInputStream(file1);byte[]buf=new byte[8192];int read=0;while ((read=in.read(buf))> 0){tarOut.write(buf,0,read);}in.close();tarOut.closeArchiveEntry();tarOut.close();assertEquals(f.length(),tarOut.getBytesWritten());}
public void testMaxFileSizeError()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(077777777777L);TarArchiveOutputStream tos=new TarArchiveOutputStream(new ByteArrayOutputStream());tos.putArchiveEntry(t);t.setSize(0100000000000L);tos=new TarArchiveOutputStream(new ByteArrayOutputStream());try {tos.putArchiveEntry(t);fail("Should have generated RuntimeException");}catch(RuntimeException expected){}}
public void testBigNumberStarMode()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(0100000000000L);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);byte[]data=bos.toByteArray();assertEquals(0x80,data[TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN]& 0x80);TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(0100000000000L,e.getSize());tin.close();closeQuietly(tos);}
public void testBigNumberPosixMode()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(0100000000000L);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);byte[]data=bos.toByteArray();assertEquals("00000000000 ",new String(data,1024 + TarConstants.NAMELEN + TarConstants.MODELEN+ TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(0100000000000L,e.getSize());tin.close();closeQuietly(tos);}
public void testWriteSimplePaxHeaders()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("a","b");byte[]data=writePaxHeader(m);assertEquals("00000000006 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));assertEquals("6 a=b\n",new String(data,512,6,CharsetNames.UTF_8));}
public void testPaxHeadersWithLength99()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("a","0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "012");byte[]data=writePaxHeader(m);assertEquals("00000000143 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));assertEquals("99 a=0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "012\n",new String(data,512,99,CharsetNames.UTF_8));}
public void testPaxHeadersWithLength101()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("a","0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "0123");byte[]data=writePaxHeader(m);assertEquals("00000000145 ",new String(data,TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN,12,CharsetNames.UTF_8));assertEquals("101 a=0123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "0123\n",new String(data,512,101,CharsetNames.UTF_8));}
public void testWriteLongFileNamePosixMode()throws Exception {String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789";TarArchiveEntry t=new TarArchiveEntry(n);t.setSize(10 * 1024);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();byte[]data=bos.toByteArray();assertEquals("160 path=" + n + "\n",new String(data,512,160,CharsetNames.UTF_8));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());tin.close();tos.close();}
public void testOldEntryStarMode()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(Integer.MAX_VALUE);t.setModTime(-1000);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);byte[]data=bos.toByteArray();assertEquals((byte)0xff,data[TarConstants.NAMELEN + TarConstants.MODELEN + TarConstants.UIDLEN+ TarConstants.GIDLEN+ TarConstants.SIZELEN]);TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));cal.set(1969,11,31,23,59,59);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),e.getLastModifiedDate());tin.close();closeQuietly(tos);}
public void testOldEntryPosixMode()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(Integer.MAX_VALUE);t.setModTime(-1000);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);byte[]data=bos.toByteArray();assertEquals("00000000000 ",new String(data,1024 + TarConstants.NAMELEN + TarConstants.MODELEN+ TarConstants.UIDLEN+ TarConstants.GIDLEN+ TarConstants.SIZELEN,12,CharsetNames.UTF_8));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"));cal.set(1969,11,31,23,59,59);cal.set(Calendar.MILLISECOND,0);assertEquals(cal.getTime(),e.getLastModifiedDate());tin.close();closeQuietly(tos);}
public void testOldEntryError()throws Exception {TarArchiveEntry t=new TarArchiveEntry("foo");t.setSize(Integer.MAX_VALUE);t.setModTime(-1000);TarArchiveOutputStream tos=new TarArchiveOutputStream(new ByteArrayOutputStream());try {tos.putArchiveEntry(t);fail("Should have generated RuntimeException");}catch(RuntimeException expected){}tos.close();}
public void testWriteNonAsciiPathNamePaxHeader()throws Exception {String n="\u00e4";TarArchiveEntry t=new TarArchiveEntry(n);t.setSize(10 * 1024);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();assertEquals("11 path=" + n + "\n",new String(data,512,11,CharsetNames.UTF_8));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());tin.close();}
public void testWriteNonAsciiLinkPathNamePaxHeader()throws Exception {String n="\u00e4";TarArchiveEntry t=new TarArchiveEntry("a",TarConstants.LF_LINK);t.setSize(10 * 1024);t.setLinkName(n);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.write(new byte[10 * 1024]);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();assertEquals("15 linkpath=" + n + "\n",new String(data,512,15,CharsetNames.UTF_8));TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getLinkName());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-200"*/public void testRoundtripWith67CharFileNameGnu()throws Exception {testRoundtripWith67CharFileName(TarArchiveOutputStream.LONGFILE_GNU);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-200"*/public void testRoundtripWith67CharFileNamePosix()throws Exception {testRoundtripWith67CharFileName(TarArchiveOutputStream.LONGFILE_POSIX);}
public void testWriteLongDirectoryNameErrorMode()throws Exception {String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/";try {TarArchiveEntry t=new TarArchiveEntry(n);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();fail("Truncated name didn't throw an exception");}catch(RuntimeException e){}}
public void testWriteLongDirectoryNameTruncateMode()throws Exception {String n="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/";TarArchiveEntry t=new TarArchiveEntry(n);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_TRUNCATE);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals("Entry name",n.substring(0,TarConstants.NAMELEN)+ "/",e.getName());assertTrue("The entry is not a directory",e.isDirectory());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-203"*/public void testWriteLongDirectoryNameGnuMode()throws Exception {testWriteLongDirectoryName(TarArchiveOutputStream.LONGFILE_GNU);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-203"*/public void testWriteLongDirectoryNamePosixMode()throws Exception {testWriteLongDirectoryName(TarArchiveOutputStream.LONGFILE_POSIX);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-203"*/public void testWriteNonAsciiDirectoryNamePosixMode()throws Exception {String n="f\u00f6\u00f6/";TarArchiveEntry t=new TarArchiveEntry(n);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos);tos.setAddPaxHeadersForNonAsciiNames(true);tos.putArchiveEntry(t);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals(n,e.getName());assertTrue(e.isDirectory());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/public void testWriteLongLinkNameErrorMode()throws Exception {String linkname="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/test";TarArchiveEntry entry=new TarArchiveEntry("test",TarArchiveEntry.LF_SYMLINK);entry.setLinkName(linkname);try {ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_ERROR);tos.putArchiveEntry(entry);tos.closeArchiveEntry();tos.close();fail("Truncated link name didn't throw an exception");}catch(RuntimeException e){}}
public void testWriteLongLinkNameTruncateMode()throws Exception {String linkname="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/";TarArchiveEntry entry=new TarArchiveEntry("test",TarArchiveEntry.LF_SYMLINK);entry.setLinkName(linkname);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_TRUNCATE);tos.putArchiveEntry(entry);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals("Link name",linkname.substring(0,TarConstants.NAMELEN),e.getLinkName());tin.close();}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/public void testWriteLongLinkNameGnuMode()throws Exception {testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_GNU);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/public void testWriteLongLinkNamePosixMode()throws Exception {testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_POSIX);}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-237"*/public void testWriteLongLinkName(int mode)throws Exception {String linkname="01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789" + "01234567890123456789012345678901234567890123456789/test";TarArchiveEntry entry=new TarArchiveEntry("test",TarArchiveEntry.LF_SYMLINK);entry.setLinkName(linkname);ByteArrayOutputStream bos=new ByteArrayOutputStream();TarArchiveOutputStream tos=new TarArchiveOutputStream(bos,"ASCII");tos.setLongFileMode(mode);tos.putArchiveEntry(entry);tos.closeArchiveEntry();tos.close();byte[]data=bos.toByteArray();TarArchiveInputStream tin=new TarArchiveInputStream(new ByteArrayInputStream(data));TarArchiveEntry e=tin.getNextTarEntry();assertEquals("Entry name","test",e.getName());assertEquals("Link name",linkname,e.getLinkName());assertTrue("The entry is not a symbolic link",e.isSymbolicLink());tin.close();}
public void testPadsOutputToFullBlockLength()throws Exception {File f=File.createTempFile("commons-compress-padding",".tar");f.deleteOnExit();FileOutputStream fos=new FileOutputStream(f);TarArchiveOutputStream tos=new TarArchiveOutputStream(fos);File file1=getFile("test1.xml");TarArchiveEntry sEntry=new TarArchiveEntry(file1,file1.getName());tos.putArchiveEntry(sEntry);FileInputStream in=new FileInputStream(file1);IOUtils.copy(in,tos);in.close();tos.closeArchiveEntry();tos.close();assertEquals(TarConstants.DEFAULT_BLKSIZE,f.length());}
/** * Test conversion to bytes.*/public void testLongToBytes(){ZipEightByteInteger zl=new ZipEightByteInteger(0xAB12345678l);byte[]result=zl.getBytes();assertEquals("length getBytes",8,result.length);assertEquals("first byte getBytes",0x78,result[0]);assertEquals("second byte getBytes",0x56,result[1]);assertEquals("third byte getBytes",0x34,result[2]);assertEquals("fourth byte getBytes",0x12,result[3]);assertEquals("fifth byte getBytes",(byte)0xAB,result[4]);assertEquals("sixth byte getBytes",0,result[5]);assertEquals("seventh byte getBytes",0,result[6]);assertEquals("eighth byte getBytes",0,result[7]);}
/** * Test conversion from bytes.*/public void testLongFromBytes(){byte[]val=new byte[]{0x78,0x56,0x34,0x12,(byte)0xAB,0x00,0x00,0x00};ZipEightByteInteger zl=new ZipEightByteInteger(val);assertEquals("longValue from bytes",0xAB12345678l,zl.getLongValue());}
/** * Test conversion to bytes.*/public void testBIToBytes(){ZipEightByteInteger zl=new ZipEightByteInteger(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1));byte[]result=zl.getBytes();assertEquals("length getBytes",8,result.length);assertEquals("first byte getBytes",(byte)0xFE,result[0]);assertEquals("second byte getBytes",(byte)0xFF,result[1]);assertEquals("third byte getBytes",(byte)0xFF,result[2]);assertEquals("fourth byte getBytes",(byte)0xFF,result[3]);assertEquals("fifth byte getBytes",(byte)0xFF,result[4]);assertEquals("sixth byte getBytes",(byte)0xFF,result[5]);assertEquals("seventh byte getBytes",(byte)0xFF,result[6]);assertEquals("eighth byte getBytes",(byte)0xFF,result[7]);}
/** * Test conversion from bytes.*/public void testBIFromBytes(){byte[]val=new byte[]{(byte)0xFE,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF};ZipEightByteInteger zl=new ZipEightByteInteger(val);assertEquals("value from bytes",BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1),zl.getValue());}
/** * Test the contract of the equals method.*/public void testEquals(){ZipEightByteInteger zl=new ZipEightByteInteger(0x12345678);ZipEightByteInteger zl2=new ZipEightByteInteger(0x12345678);ZipEightByteInteger zl3=new ZipEightByteInteger(0x87654321);assertTrue("reflexive",zl.equals(zl));assertTrue("works",zl.equals(zl2));assertTrue("works,part two",!zl.equals(zl3));assertTrue("symmetric",zl2.equals(zl));assertTrue("null handling",!zl.equals(null));assertTrue("non ZipEightByteInteger handling",!zl.equals(new Integer(0x1234)));}
/** * Test sign handling.*/public void testSign(){ZipEightByteInteger zl=new ZipEightByteInteger(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1).setBit(0),zl.getValue());}
@Test public void testSortFixture(){DS ds=setUpFixture();ds.s.blockSort(ds.data,FIXTURE.length - 1);assertFixtureSorted(ds.data);assertEquals(0,ds.data.origPtr);}
@Test public void testSortFixtureMainSort(){DS ds=setUpFixture();ds.s.mainSort(ds.data,FIXTURE.length - 1);assertFixtureSorted(ds.data);}
@Test public void testSortFixtureFallbackSort(){DS ds=setUpFixture();ds.s.fallbackSort(ds.data,FIXTURE.length - 1);assertFixtureSorted(ds.data);}
@Test public void testSortFixture2(){DS ds=setUpFixture2();ds.s.blockSort(ds.data,FIXTURE2.length - 1);assertFixture2Sorted(ds.data);assertEquals(1,ds.data.origPtr);}
@Test public void testSortFixture2MainSort(){DS ds=setUpFixture2();ds.s.mainSort(ds.data,FIXTURE2.length - 1);assertFixture2Sorted(ds.data);}
@Test public void testSortFixture2FallbackSort(){DS ds=setUpFixture2();ds.s.fallbackSort(ds.data,FIXTURE2.length - 1);assertFixture2Sorted(ds.data);}
@Test public void testFallbackSort(){BZip2CompressorOutputStream.Data data=new BZip2CompressorOutputStream.Data(1);BlockSort s=new BlockSort(data);int[]fmap=new int[FIXTURE.length];s.fallbackSort(fmap,FIXTURE,FIXTURE.length);assertArrayEquals(FIXTURE_SORTED,fmap);}
public void testIsCompressedFilename(){assertFalse(GzipUtils.isCompressedFilename(""));assertFalse(GzipUtils.isCompressedFilename(".gz"));assertTrue(GzipUtils.isCompressedFilename("x.tgz"));assertTrue(GzipUtils.isCompressedFilename("x.taz"));assertTrue(GzipUtils.isCompressedFilename("x.svgz"));assertTrue(GzipUtils.isCompressedFilename("x.cpgz"));assertTrue(GzipUtils.isCompressedFilename("x.wmz"));assertTrue(GzipUtils.isCompressedFilename("x.emz"));assertTrue(GzipUtils.isCompressedFilename("x.gz"));assertTrue(GzipUtils.isCompressedFilename("x.z"));assertTrue(GzipUtils.isCompressedFilename("x-gz"));assertTrue(GzipUtils.isCompressedFilename("x-z"));assertTrue(GzipUtils.isCompressedFilename("x_z"));assertFalse(GzipUtils.isCompressedFilename("xxgz"));assertFalse(GzipUtils.isCompressedFilename("xzz"));assertFalse(GzipUtils.isCompressedFilename("xaz"));assertTrue(GzipUtils.isCompressedFilename("x.SVGZ"));assertTrue(GzipUtils.isCompressedFilename("x.Svgz"));assertTrue(GzipUtils.isCompressedFilename("x.svGZ"));assertFalse(GzipUtils.isCompressedFilename("x.wmz "));assertFalse(GzipUtils.isCompressedFilename("x.wmz\n"));assertFalse(GzipUtils.isCompressedFilename("x.wmz.y"));}
public void testGetUncompressedFilename(){assertEquals("",GzipUtils.getUncompressedFilename(""));assertEquals(".gz",GzipUtils.getUncompressedFilename(".gz"));assertEquals("x.tar",GzipUtils.getUncompressedFilename("x.tgz"));assertEquals("x.tar",GzipUtils.getUncompressedFilename("x.taz"));assertEquals("x.svg",GzipUtils.getUncompressedFilename("x.svgz"));assertEquals("x.cpio",GzipUtils.getUncompressedFilename("x.cpgz"));assertEquals("x.wmf",GzipUtils.getUncompressedFilename("x.wmz"));assertEquals("x.emf",GzipUtils.getUncompressedFilename("x.emz"));assertEquals("x",GzipUtils.getUncompressedFilename("x.gz"));assertEquals("x",GzipUtils.getUncompressedFilename("x.z"));assertEquals("x",GzipUtils.getUncompressedFilename("x-gz"));assertEquals("x",GzipUtils.getUncompressedFilename("x-z"));assertEquals("x",GzipUtils.getUncompressedFilename("x_z"));assertEquals("x.svg",GzipUtils.getUncompressedFilename("x.SVGZ"));assertEquals("X.svg",GzipUtils.getUncompressedFilename("X.SVGZ"));assertEquals("X.svg",GzipUtils.getUncompressedFilename("X.svGZ"));assertEquals("x.wmz ",GzipUtils.getUncompressedFilename("x.wmz "));assertEquals("x.wmz\n",GzipUtils.getUncompressedFilename("x.wmz\n"));assertEquals("x.wmz.y",GzipUtils.getUncompressedFilename("x.wmz.y"));}
public void testGetCompressedFilename(){assertEquals(".gz",GzipUtils.getCompressedFilename(""));assertEquals("x.gz",GzipUtils.getCompressedFilename("x"));assertEquals("x.tgz",GzipUtils.getCompressedFilename("x.tar"));assertEquals("x.svgz",GzipUtils.getCompressedFilename("x.svg"));assertEquals("x.cpgz",GzipUtils.getCompressedFilename("x.cpio"));assertEquals("x.wmz",GzipUtils.getCompressedFilename("x.wmf"));assertEquals("x.emz",GzipUtils.getCompressedFilename("x.emf"));assertEquals("x.svgz",GzipUtils.getCompressedFilename("x.SVG"));assertEquals("X.svgz",GzipUtils.getCompressedFilename("X.SVG"));assertEquals("X.svgz",GzipUtils.getCompressedFilename("X.svG"));assertEquals("x.wmf .gz",GzipUtils.getCompressedFilename("x.wmf "));assertEquals("x.wmf\n.gz",GzipUtils.getCompressedFilename("x.wmf\n"));assertEquals("x.wmf.y.gz",GzipUtils.getCompressedFilename("x.wmf.y"));}
@Test public void testSampleFile()throws Exception {File archive=getFile("COMPRESS-211_uid_gid_zip_test.zip");ZipFile zf=null;try {zf=new ZipFile(archive);Enumeration<ZipArchiveEntry> en=zf.getEntries();while (en.hasMoreElements()){ZipArchiveEntry zae=en.nextElement();String name=zae.getName();X7875_NewUnix xf=(X7875_NewUnix)zae.getExtraField(X7875);long expected=1000;if (name.contains("uid555_gid555")){expected=555;}else       if (name.contains("uid5555_gid5555")){expected=5555;}else       if (name.contains("uid55555_gid55555")){expected=55555;}else       if (name.contains("uid555555_gid555555")){expected=555555;}else       if (name.contains("min_unix")){expected=0;}else       if (name.contains("max_unix")){expected=0x100000000L - 2;}assertEquals(expected,xf.getUID());assertEquals(expected,xf.getGID());}}finally {if (zf != null){zf.close();}}}
@Test public void testGetHeaderId(){assertEquals(X7875,xf.getHeaderId());}
@Test public void testMisc()throws Exception {assertFalse(xf.equals(new Object()));assertTrue(xf.toString().startsWith("0x7875 Zip Extra Field"));Object o=xf.clone();assertEquals(o.hashCode(),xf.hashCode());assertTrue(xf.equals(o));xf.setUID(12345);assertFalse(xf.equals(o));}
@Test public void testTrimLeadingZeroesForceMinLength4(){final byte[]NULL=null;final byte[]EMPTY=new byte[0];final byte[]ONE_ZERO={0};final byte[]TWO_ZEROES={0,0};final byte[]FOUR_ZEROES={0,0,0,0};final byte[]SEQUENCE={1,2,3};final byte[]SEQUENCE_LEADING_ZERO={0,1,2,3};final byte[]SEQUENCE_LEADING_ZEROES={0,0,0,0,0,0,0,1,2,3};final byte[]TRAILING_ZERO={1,2,3,0};final byte[]PADDING_ZERO={0,1,2,3,0};final byte[]SEQUENCE6={1,2,3,4,5,6};final byte[]SEQUENCE6_LEADING_ZERO={0,1,2,3,4,5,6};assertTrue(NULL == trimTest(NULL));assertTrue(Arrays.equals(ONE_ZERO,trimTest(EMPTY)));assertTrue(Arrays.equals(ONE_ZERO,trimTest(ONE_ZERO)));assertTrue(Arrays.equals(ONE_ZERO,trimTest(TWO_ZEROES)));assertTrue(Arrays.equals(ONE_ZERO,trimTest(FOUR_ZEROES)));assertTrue(Arrays.equals(SEQUENCE,trimTest(SEQUENCE)));assertTrue(Arrays.equals(SEQUENCE,trimTest(SEQUENCE_LEADING_ZERO)));assertTrue(Arrays.equals(SEQUENCE,trimTest(SEQUENCE_LEADING_ZEROES)));assertTrue(Arrays.equals(TRAILING_ZERO,trimTest(TRAILING_ZERO)));assertTrue(Arrays.equals(TRAILING_ZERO,trimTest(PADDING_ZERO)));assertTrue(Arrays.equals(SEQUENCE6,trimTest(SEQUENCE6)));assertTrue(Arrays.equals(SEQUENCE6,trimTest(SEQUENCE6_LEADING_ZERO)));}
@Test public void testParseReparse()throws ZipException {final byte[]ZERO_LEN={1,0,0};final byte[]ZERO_UID_GID={1,1,0,1,0};final byte[]ONE_UID_GID={1,1,1,1,1};final byte[]ONE_THOUSAND_UID_GID={1,2,-24,3,2,-24,3};final byte[]UNIX_MAX_UID_GID={1,4,-2,-1,-1,-1,4,-2,-1,-1,-1};final byte[]LENGTH_5={1,5,0,0,0,0,1,5,1,0,0,0,1};final byte[]LENGTH_8={1,8,-2,-1,-1,-1,-1,-1,-1,127,8,-1,-1,-1,-1,-1,-1,-1,127};final long TWO_TO_32=0x100000000L;final long MAX=TWO_TO_32 - 2;parseReparse(0,0,ZERO_LEN,0,0);parseReparse(0,0,ZERO_UID_GID,0,0);parseReparse(1,1,ONE_UID_GID,1,1);parseReparse(1000,1000,ONE_THOUSAND_UID_GID,1000,1000);parseReparse(MAX,MAX,UNIX_MAX_UID_GID,MAX,MAX);parseReparse(-2,-2,UNIX_MAX_UID_GID,MAX,MAX);parseReparse(TWO_TO_32,TWO_TO_32 + 1,LENGTH_5,TWO_TO_32,TWO_TO_32 + 1);parseReparse(Long.MAX_VALUE - 1,Long.MAX_VALUE,LENGTH_8,Long.MAX_VALUE - 1,Long.MAX_VALUE);final byte[]SPURIOUS_ZEROES_1={1,4,-1,0,0,0,4,-128,0,0,0};final byte[]EXPECTED_1={1,1,-1,1,-128};xf.parseFromLocalFileData(SPURIOUS_ZEROES_1,0,SPURIOUS_ZEROES_1.length);assertEquals(255,xf.getUID());assertEquals(128,xf.getGID());assertTrue(Arrays.equals(EXPECTED_1,xf.getLocalFileDataData()));final byte[]SPURIOUS_ZEROES_2={1,4,-1,-1,0,0,4,1,2,0,0};final byte[]EXPECTED_2={1,2,-1,-1,2,1,2};xf.parseFromLocalFileData(SPURIOUS_ZEROES_2,0,SPURIOUS_ZEROES_2.length);assertEquals(65535,xf.getUID());assertEquals(513,xf.getGID());assertTrue(Arrays.equals(EXPECTED_2,xf.getLocalFileDataData()));}
public void testIsCompressedFilename(){assertFalse(BZip2Utils.isCompressedFilename(""));assertFalse(BZip2Utils.isCompressedFilename(".gz"));assertTrue(BZip2Utils.isCompressedFilename("x.tbz2"));assertTrue(BZip2Utils.isCompressedFilename("x.tbz"));assertTrue(BZip2Utils.isCompressedFilename("x.bz2"));assertTrue(BZip2Utils.isCompressedFilename("x.bz"));assertFalse(BZip2Utils.isCompressedFilename("xbz2"));assertFalse(BZip2Utils.isCompressedFilename("xbz"));assertTrue(BZip2Utils.isCompressedFilename("x.TBZ2"));assertTrue(BZip2Utils.isCompressedFilename("x.Tbz2"));assertTrue(BZip2Utils.isCompressedFilename("x.tbZ2"));assertFalse(BZip2Utils.isCompressedFilename("x.bz "));assertFalse(BZip2Utils.isCompressedFilename("x.tbz\n"));assertFalse(BZip2Utils.isCompressedFilename("x.tbz2.y"));}
public void testGetUncompressedFilename(){assertEquals("",BZip2Utils.getUncompressedFilename(""));assertEquals(".bz2",BZip2Utils.getUncompressedFilename(".bz2"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.tbz2"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.tbz"));assertEquals("x",BZip2Utils.getUncompressedFilename("x.bz2"));assertEquals("x",BZip2Utils.getUncompressedFilename("x.bz"));assertEquals("x.tar",BZip2Utils.getUncompressedFilename("x.TBZ2"));assertEquals("X.tar",BZip2Utils.getUncompressedFilename("X.Tbz2"));assertEquals("X.tar",BZip2Utils.getUncompressedFilename("X.tbZ2"));assertEquals("x.bz ",BZip2Utils.getUncompressedFilename("x.bz "));assertEquals("x.tbz\n",BZip2Utils.getUncompressedFilename("x.tbz\n"));assertEquals("x.tbz2.y",BZip2Utils.getUncompressedFilename("x.tbz2.y"));}
public void testGetCompressedFilename(){assertEquals(".bz2",BZip2Utils.getCompressedFilename(""));assertEquals(" .bz2",BZip2Utils.getCompressedFilename(" "));assertEquals("x.bz2",BZip2Utils.getCompressedFilename("x"));assertEquals("X.bz2",BZip2Utils.getCompressedFilename("X"));assertEquals("x.tar.bz2",BZip2Utils.getCompressedFilename("x.tar"));assertEquals("x.tar.bz2",BZip2Utils.getCompressedFilename("x.TAR"));}
public void testUtf8FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,true,true);}
public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,false,true);}
public void testCP437FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,true);}
public void testASCIIFileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.US_ASCII,false,true);}
public void testUtf8FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,true,false);}
public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.UTF_8,false,false);}
public void testCP437FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,false);}
public void testASCIIFileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CharsetNames.US_ASCII,false,false);}
public void testRead7ZipArchive()throws IOException {File archive=getFile("utf8-7zip-test.zip");ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);}}
public void testRead7ZipArchiveForStream()throws IOException {FileInputStream archive=new FileInputStream(getFile("utf8-7zip-test.zip"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,CP437,false);assertEquals(ASCII_TXT,zi.getNextEntry().getName());assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}}}
public void testReadWinZipArchive()throws IOException {File archive=getFile("utf8-winzip-test.zip");ZipFile zf=null;try {zf=new ZipFile(archive,null,true);assertCanRead(zf,ASCII_TXT);assertCanRead(zf,EURO_FOR_DOLLAR_TXT);assertCanRead(zf,OIL_BARREL_TXT);}finally {ZipFile.closeQuietly(zf);}}
public void testReadWinZipArchiveForStream()throws IOException {FileInputStream archive=new FileInputStream(getFile("utf8-winzip-test.zip"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,null,true);assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(ASCII_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}}}
public void testZipFileReadsUnicodeFields()throws IOException {File file=File.createTempFile("unicode-test",".zip");file.deleteOnExit();ZipArchiveInputStream zi=null;try {createTestFile(file,CharsetNames.US_ASCII,false,true);FileInputStream archive=new FileInputStream(file);zi=new ZipArchiveInputStream(archive,CharsetNames.US_ASCII,true);assertEquals(OIL_BARREL_TXT,zi.getNextEntry().getName());assertEquals(EURO_FOR_DOLLAR_TXT,zi.getNextEntry().getName());assertEquals(ASCII_TXT,zi.getNextEntry().getName());}finally {if (zi != null){zi.close();}tryHardToDelete(file);}}
public void testZipArchiveInputStreamReadsUnicodeFields()throws IOException {File file=File.createTempFile("unicode-test",".zip");file.deleteOnExit();ZipFile zf=null;try {createTestFile(file,CharsetNames.US_ASCII,false,true);zf=new ZipFile(file,CharsetNames.US_ASCII,true);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);tryHardToDelete(file);}}
public void testRawNameReadFromZipFile()throws IOException {File archive=getFile("utf8-7zip-test.zip");ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertRawNameOfAcsiiTxt(zf.getEntry(ASCII_TXT));}finally {ZipFile.closeQuietly(zf);}}
public void testRawNameReadFromStream()throws IOException {FileInputStream archive=new FileInputStream(getFile("utf8-7zip-test.zip"));ZipArchiveInputStream zi=null;try {zi=new ZipArchiveInputStream(archive,CP437,false);assertRawNameOfAcsiiTxt((ZipArchiveEntry)zi.getNextEntry());}finally {if (zi != null){zi.close();}}}
public void testUtf8Interoperability()throws IOException {File file1=super.getFile("utf8-7zip-test.zip");File file2=super.getFile("utf8-winzip-test.zip");testFile(file1,CP437);testFile(file2,CP437);}
@Test public void oldBinMagic2ByteArrayNotSwapped(){assertArrayEquals(new byte[]{(byte)0xc7,0x71},CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,2,false));}
@Test public void oldBinMagic2ByteArraySwapped(){assertArrayEquals(new byte[]{0x71,(byte)0xc7},CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,2,true));}
@Test public void oldBinMagicFromByteArrayNotSwapped(){assertEquals(CpioConstants.MAGIC_OLD_BINARY,CpioUtil.byteArray2long(new byte[]{(byte)0xc7,0x71},false));}
@Test public void oldBinMagicFromByteArraySwapped(){assertEquals(CpioConstants.MAGIC_OLD_BINARY,CpioUtil.byteArray2long(new byte[]{0x71,(byte)0xc7},true));}
public void testTarArchiveCreation()throws Exception {final File output=new File(dir,"bla.tar");final File file1=getFile("test1.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("tar",out);final TarArchiveEntry entry=new TarArchiveEntry("testdata/test1.xml");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.close();}
public void testTarArchiveLongNameCreation()throws Exception {String name="testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml";byte[]bytes=name.getBytes(CharsetNames.UTF_8);assertEquals(bytes.length,99);final File output=new File(dir,"bla.tar");final File file1=getFile("test1.xml");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream("tar",out);final TarArchiveEntry entry=new TarArchiveEntry(name);entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName("avalon");entry.setGroupName("excalibur");entry.setMode(0100000);os.putArchiveEntry(entry);FileInputStream in=new FileInputStream(file1);IOUtils.copy(in,os);os.closeArchiveEntry();os.close();out.close();in.close();ArchiveOutputStream os2=null;try {String toLongName="testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml";final File output2=new File(dir,"bla.tar");final OutputStream out2=new FileOutputStream(output2);os2=new ArchiveStreamFactory().createArchiveOutputStream("tar",out2);final TarArchiveEntry entry2=new TarArchiveEntry(toLongName);entry2.setModTime(0);entry2.setSize(file1.length());entry2.setUserId(0);entry2.setGroupId(0);entry2.setUserName("avalon");entry2.setGroupName("excalibur");entry2.setMode(0100000);os2.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os2);os2.closeArchiveEntry();}catch(IOException e){assertTrue(true);}finally {if (os2 != null){os2.close();}}}
public void testTarUnarchive()throws Exception {final File input=getFile("bla.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("tar",is);final TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);in.close();out.close();}
public void testCOMPRESS114()throws Exception {final File input=getFile("COMPRESS-114.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new TarArchiveInputStream(is,CharsetNames.ISO_8859_1);TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();assertEquals("3\u00b1\u00b1\u00b1F06\u00b1W2345\u00b1ZB\u00b1la\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1BLA",entry.getName());entry=(TarArchiveEntry)in.getNextEntry();assertEquals("0302-0601-3\u00b1\u00b1\u00b1F06\u00b1W2345\u00b1ZB\u00b1la\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1\u00b1BLA",entry.getName());in.close();}
public void testDirectoryEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();TarArchiveEntry in=new TarArchiveEntry(tmp[0],"foo");tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitDirectoryEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));long beforeArchiveWrite=tmp[0].lastModified();TarArchiveEntry in=new TarArchiveEntry("foo/");in.setModTime(beforeArchiveWrite);tos.putArchiveEntry(in);tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 1000,out.getLastModifiedDate().getTime()/ 1000);assertTrue(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));TarArchiveEntry in=new TarArchiveEntry(tmp[1],"foo");tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;TarArchiveOutputStream tos=null;TarArchiveInputStream tis=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".tar",tmp[0]);archive.deleteOnExit();tos=new TarArchiveOutputStream(new FileOutputStream(archive));TarArchiveEntry in=new TarArchiveEntry("foo");in.setModTime(tmp[1].lastModified());in.setSize(tmp[1].length());tos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){tos.write(b);}fis.close();fis=null;tos.closeArchiveEntry();tos.close();tos=null;tis=new TarArchiveInputStream(new FileInputStream(archive));TarArchiveEntry out=tis.getNextTarEntry();tis.close();tis=null;assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 1000,out.getLastModifiedDate().getTime()/ 1000);assertFalse(out.isDirectory());}finally {if (tis != null){tis.close();}if (tos != null){tos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testCOMPRESS178()throws Exception {final File input=getFile("COMPRESS-178.tar");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("tar",is);try {in.getNextEntry();fail("Expected IOException");}catch(IOException e){Throwable t=e.getCause();assertTrue("Expected cause = IllegalArgumentException",t instanceof IllegalArgumentException);}in.close();}
public void testZUnarchive()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){public CompressorInputStream wrap(InputStream is)throws IOException {return new ZCompressorInputStream(is);}});}
public void testZUnarchiveViaFactory()throws Exception {testUnarchive(new StreamWrapper<CompressorInputStream>(){public CompressorInputStream wrap(InputStream is)throws Exception {return new CompressorStreamFactory().createCompressorInputStream(CompressorStreamFactory.Z,is);}});}
public void testCompareBA(){byte[]buffer1={1,2,3};byte[]buffer2={1,2,3,0};byte[]buffer3={1,2,3};assertTrue(ArchiveUtils.isEqual(buffer1,buffer2,true));assertFalse(ArchiveUtils.isEqual(buffer1,buffer2,false));assertFalse(ArchiveUtils.isEqual(buffer1,buffer2));assertTrue(ArchiveUtils.isEqual(buffer2,buffer1,true));assertFalse(ArchiveUtils.isEqual(buffer2,buffer1,false));assertFalse(ArchiveUtils.isEqual(buffer2,buffer1));assertTrue(ArchiveUtils.isEqual(buffer1,buffer3));assertTrue(ArchiveUtils.isEqual(buffer3,buffer1));}
public void testCompareAscii(){byte[]buffer1={'a','b','c'};byte[]buffer2={'d','e','f',0};assertTrue(ArchiveUtils.matchAsciiBuffer("abc",buffer1));assertFalse(ArchiveUtils.matchAsciiBuffer("abc\0",buffer1));assertTrue(ArchiveUtils.matchAsciiBuffer("def\0",buffer2));assertFalse(ArchiveUtils.matchAsciiBuffer("def",buffer2));}
public void testAsciiConversions(){asciiToByteAndBackOK("");asciiToByteAndBackOK("abcd");asciiToByteAndBackFail("\u8025");}
public void testDefaults(){assertFalse(new GeneralPurposeBit().usesDataDescriptor());assertFalse(new GeneralPurposeBit().usesUTF8ForNames());assertFalse(new GeneralPurposeBit().usesEncryption());assertFalse(new GeneralPurposeBit().usesStrongEncryption());byte[]b=new byte[2];assertTrue(Arrays.equals(b,new GeneralPurposeBit().encode()));}
public void testParseEdgeCases(){assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesDataDescriptor());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesUTF8ForNames());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesEncryption());assertFalse(GeneralPurposeBit.parse(new byte[2],0).usesStrongEncryption());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesDataDescriptor());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesUTF8ForNames());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesEncryption());assertTrue(GeneralPurposeBit.parse(new byte[]{(byte)255,(byte)255},0).usesStrongEncryption());}
public void testDataDescriptor(){byte[]flags=new byte[]{(byte)8,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesDataDescriptor());GeneralPurposeBit b=new GeneralPurposeBit();b.useDataDescriptor(true);assertTrue(Arrays.equals(flags,b.encode()));}
public void testLanguageEncodingFlag(){byte[]flags=new byte[]{(byte)0,(byte)8};assertTrue(GeneralPurposeBit.parse(flags,0).usesUTF8ForNames());GeneralPurposeBit b=new GeneralPurposeBit();b.useUTF8ForNames(true);assertTrue(Arrays.equals(flags,b.encode()));}
public void testEncryption(){byte[]flags=new byte[]{(byte)1,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesEncryption());GeneralPurposeBit b=new GeneralPurposeBit();b.useEncryption(true);assertTrue(Arrays.equals(flags,b.encode()));}
public void testStringEncryption(){byte[]flags=new byte[]{(byte)65,(byte)0};assertTrue(GeneralPurposeBit.parse(flags,0).usesStrongEncryption());GeneralPurposeBit b=new GeneralPurposeBit();b.useStrongEncryption(true);assertTrue(b.usesEncryption());assertTrue(Arrays.equals(flags,b.encode()));flags=new byte[]{(byte)64,(byte)0};assertFalse(GeneralPurposeBit.parse(flags,0).usesStrongEncryption());}
public void testAllEmptyFilesArchive()throws Exception {SevenZFile archive=new SevenZFile(getFile("7z-empty-mhc-off.7z"));try {assertNotNull(archive.getNextEntry());}finally {archive.close();}}
public void testHelloWorldHeaderCompressionOffCopy()throws Exception {checkHelloWorld("7z-hello-mhc-off-copy.7z");}
public void testHelloWorldHeaderCompressionOffLZMA2()throws Exception {checkHelloWorld("7z-hello-mhc-off-lzma2.7z");}
public void test7zUnarchive()throws Exception {test7zUnarchive(getFile("bla.7z"));}
public void test7zDeflateUnarchive()throws Exception {test7zUnarchive(getFile("bla.deflate.7z"));}
public void test7zDecryptUnarchive()throws Exception {if (isStrongCryptoAvailable()){test7zUnarchive(getFile("bla.encrypted.7z"),"foo".getBytes("UTF-16LE"));}}
public void testEncryptedArchiveRequiresPassword()throws Exception {try {new SevenZFile(getFile("bla.encrypted.7z"));fail("shouldn't decrypt without a password");}catch(IOException ex){assertEquals("Cannot read encrypted files without a password",ex.getMessage());}}
/** * @see "https://issues.apache.org/jira/browse/COMPRESS-256"*/public void testCompressedHeaderWithNonDefaultDictionarySize()throws Exception {SevenZFile sevenZFile=new SevenZFile(getFile("COMPRESS-256.7z"));try {int count=0;while (sevenZFile.getNextEntry()!= null){count++;}assertEquals(446,count);}finally {sevenZFile.close();}}
/** * Archives 2 files and unarchives it again. If the file length of result and source is the same,it looks like the operations have worked* @throws Exception*/public void testZipArchiveCreation()throws Exception {final File output=new File(dir,"bla.zip");final File file1=getFile("test1.xml");final File file2=getFile("test2.xml");final OutputStream out=new FileOutputStream(output);ArchiveOutputStream os=null;try {os=new ArchiveStreamFactory().createArchiveOutputStream("zip",out);os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();}finally {if (os != null){os.close();}}out.close();List<File> results=new ArrayList<File>();final InputStream is=new FileInputStream(output);ArchiveInputStream in=null;try {in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){File outfile=new File(resultDir.getCanonicalPath()+ "/result/" + entry.getName());outfile.getParentFile().mkdirs();OutputStream o=new FileOutputStream(outfile);try {IOUtils.copy(in,o);}finally {o.close();}results.add(outfile);}}finally {if (in != null){in.close();}}is.close();assertEquals(results.size(),2);File result=results.get(0);assertEquals(file1.length(),result.length());result=results.get(1);assertEquals(file2.length(),result.length());}
/** * Simple unarchive test. Asserts nothing.* @throws Exception*/public void testZipUnarchive()throws Exception {final File input=getFile("bla.zip");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);final ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);out.close();in.close();}
/** * Test case for  <a href="https://issues.apache.org/jira/browse/COMPRESS-208" >COMPRESS-208</a>.*/public void testSkipsPK00Prefix()throws Exception {final File input=getFile("COMPRESS-208.zip");InputStream is=new FileInputStream(input);ArrayList<String> al=new ArrayList<String>();al.add("test1.xml");al.add("test2.xml");try {checkArchiveContent(new ZipArchiveInputStream(is),al);}finally {is.close();}}
/** * Test case for <a href="https://issues.apache.org/jira/browse/COMPRESS-93" >COMPRESS-93</a>.*/public void testSupportedCompressionMethod()throws IOException {ZipFile moby=new ZipFile(getFile("moby.zip"));ZipArchiveEntry entry=moby.getEntry("README");assertEquals("method",ZipMethod.TOKENIZATION.getCode(),entry.getMethod());assertFalse(moby.canReadEntryData(entry));moby.close();}
/** * Test case for being able to skip an entry in an  {@link ZipArchiveInputStream}even if the compression method of thatentry is unsupported.* @see <a href="https://issues.apache.org/jira/browse/COMPRESS-93"*        >COMPRESS-93</a>*/public void testSkipEntryWithUnsupportedCompressionMethod()throws IOException {ZipArchiveInputStream zip=new ZipArchiveInputStream(new FileInputStream(getFile("moby.zip")));try {ZipArchiveEntry entry=zip.getNextZipEntry();assertEquals("method",ZipMethod.TOKENIZATION.getCode(),entry.getMethod());assertEquals("README",entry.getName());assertFalse(zip.canReadEntryData(entry));try {assertNull(zip.getNextZipEntry());}catch(IOException e){e.printStackTrace();fail("COMPRESS-93: Unable to skip an unsupported zip entry");}}finally {zip.close();}}
/** * Checks if all entries from a nested archive can be read. The archive: OSX_ArchiveWithNestedArchive.zip contains: NestedArchiv.zip and test.xml3. The nested archive:  NestedArchive.zip contains test1.xml and test2.xml* @throws Exception*/public void testListAllFilesWithNestedArchive()throws Exception {final File input=getFile("OSX_ArchiveWithNestedArchive.zip");List<String> results=new ArrayList<String>();final InputStream is=new FileInputStream(input);ArchiveInputStream in=null;try {in=new ArchiveStreamFactory().createArchiveInputStream("zip",is);ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){results.add(entry.getName());ArchiveInputStream nestedIn=new ArchiveStreamFactory().createArchiveInputStream("zip",in);ZipArchiveEntry nestedEntry=null;while ((nestedEntry=(ZipArchiveEntry)nestedIn.getNextEntry())!= null){results.add(nestedEntry.getName());}}}finally {if (in != null){in.close();}}is.close();results.contains("NestedArchiv.zip");results.contains("test1.xml");results.contains("test2.xml");results.contains("test3.xml");}
public void testDirectoryEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);long beforeArchiveWrite=tmp[0].lastModified();ZipArchiveEntry in=new ZipArchiveEntry(tmp[0],"foo");zos.putArchiveEntry(in);zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo/");assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 2000,out.getLastModifiedDate().getTime()/ 2000);assertTrue(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitDirectoryEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);long beforeArchiveWrite=tmp[0].lastModified();ZipArchiveEntry in=new ZipArchiveEntry("foo/");in.setTime(beforeArchiveWrite);zos.putArchiveEntry(in);zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo/");assertNotNull(out);assertEquals("foo/",out.getName());assertEquals(0,out.getSize());assertEquals(beforeArchiveWrite / 2000,out.getLastModifiedDate().getTime()/ 2000);assertTrue(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testFileEntryFromFile()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);ZipArchiveEntry in=new ZipArchiveEntry(tmp[1],"foo");zos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){zos.write(b);}fis.close();fis=null;zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo");assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 2000,out.getLastModifiedDate().getTime()/ 2000);assertFalse(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
public void testExplicitFileEntry()throws Exception {File[]tmp=createTempDirAndFile();File archive=null;ZipArchiveOutputStream zos=null;ZipFile zf=null;FileInputStream fis=null;try {archive=File.createTempFile("test.",".zip",tmp[0]);archive.deleteOnExit();zos=new ZipArchiveOutputStream(archive);ZipArchiveEntry in=new ZipArchiveEntry("foo");in.setTime(tmp[1].lastModified());in.setSize(tmp[1].length());zos.putArchiveEntry(in);byte[]b=new byte[(int)tmp[1].length()];fis=new FileInputStream(tmp[1]);while (fis.read(b)> 0){zos.write(b);}fis.close();fis=null;zos.closeArchiveEntry();zos.close();zos=null;zf=new ZipFile(archive);ZipArchiveEntry out=zf.getEntry("foo");assertNotNull(out);assertEquals("foo",out.getName());assertEquals(tmp[1].length(),out.getSize());assertEquals(tmp[1].lastModified()/ 2000,out.getLastModifiedDate().getTime()/ 2000);assertFalse(out.isDirectory());}finally {ZipFile.closeQuietly(zf);if (zos != null){zos.close();}tryHardToDelete(archive);if (fis != null){fis.close();}tryHardToDelete(tmp[1]);rmdir(tmp[0]);}}
@Test public void convert64(){assertEquals(0xABCDEF0123456780L,DumpArchiveUtil.convert64(new byte[]{(byte)0x80,0x67,0x45,0x23,1,(byte)0xEF,(byte)0xCD,(byte)0xAB},0));}
@Test public void convert32(){assertEquals(0xABCDEF01,DumpArchiveUtil.convert32(new byte[]{1,(byte)0xEF,(byte)0xCD,(byte)0xAB},0));}
@Test public void convert16(){assertEquals(0xABCD,DumpArchiveUtil.convert16(new byte[]{(byte)0xCD,(byte)0xAB},0));}
public void testWriteCDOnlySizes(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE);assertEquals(new ZipShort(16),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(16,b.length);checkSizes(b);}
public void testWriteCDSizeAndOffset(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,OFF,null);assertEquals(new ZipShort(24),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(24,b.length);checkSizes(b);checkOffset(b,16);}
public void testWriteCDSizeOffsetAndDisk(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,OFF,DISK);assertEquals(new ZipShort(28),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(28,b.length);checkSizes(b);checkOffset(b,16);checkDisk(b,24);}
public void testWriteCDSizeAndDisk(){Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField(SIZE,CSIZE,null,DISK);assertEquals(new ZipShort(20),f.getCentralDirectoryLength());byte[]b=f.getCentralDirectoryData();assertEquals(20,b.length);checkSizes(b);checkDisk(b,16);}
public void testReadLFHSizesOnly()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[16];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testReadLFHSizesAndOffset()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[24];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testReadLFHSizesOffsetAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[28];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);System.arraycopy(DISK.getBytes(),0,b,24,4);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReadLFHSizesAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[20];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(DISK.getBytes(),0,b,16,4);f.parseFromLocalFileData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReadCDSizesOffsetAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[28];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);System.arraycopy(DISK.getBytes(),0,b,24,4);f.parseFromCentralDirectoryData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReadCDSizesAndOffset()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[24];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(CSIZE.getBytes(),0,b,8,8);System.arraycopy(OFF.getBytes(),0,b,16,8);f.parseFromCentralDirectoryData(b,0,b.length);assertEquals(SIZE,f.getSize());assertEquals(CSIZE,f.getCompressedSize());assertEquals(OFF,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testReadCDSomethingAndDisk()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[12];System.arraycopy(SIZE.getBytes(),0,b,0,8);System.arraycopy(DISK.getBytes(),0,b,8,4);f.parseFromCentralDirectoryData(b,0,b.length);assertNull(f.getSize());assertNull(f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertEquals(DISK,f.getDiskStartNumber());}
public void testReparseCDSingleEightByteData()throws ZipException {Zip64ExtendedInformationExtraField f=new Zip64ExtendedInformationExtraField();byte[]b=new byte[8];System.arraycopy(SIZE.getBytes(),0,b,0,8);f.parseFromCentralDirectoryData(b,0,b.length);f.reparseCentralDirectoryData(true,false,false,false);assertEquals(SIZE,f.getSize());assertNull(f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());f.setSize(null);f.reparseCentralDirectoryData(false,true,false,false);assertNull(f.getSize());assertEquals(SIZE,f.getCompressedSize());assertNull(f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());f.setCompressedSize(null);f.reparseCentralDirectoryData(false,false,true,false);assertNull(f.getSize());assertNull(f.getCompressedSize());assertEquals(SIZE,f.getRelativeHeaderOffset());assertNull(f.getDiskStartNumber());}
public void testEmptyStream()throws Exception {BitStream stream=new BitStream(new ByteArrayInputStream(new byte[0]));assertEquals("next bit",-1,stream.nextBit());assertEquals("next bit",-1,stream.nextBit());assertEquals("next bit",-1,stream.nextBit());}
public void testStream()throws Exception {BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0xEA,0x03}));assertEquals("bit 0",0,stream.nextBit());assertEquals("bit 1",1,stream.nextBit());assertEquals("bit 2",0,stream.nextBit());assertEquals("bit 3",1,stream.nextBit());assertEquals("bit 4",0,stream.nextBit());assertEquals("bit 5",1,stream.nextBit());assertEquals("bit 6",1,stream.nextBit());assertEquals("bit 7",1,stream.nextBit());assertEquals("bit 8",1,stream.nextBit());assertEquals("bit 9",1,stream.nextBit());assertEquals("bit 10",0,stream.nextBit());assertEquals("bit 11",0,stream.nextBit());assertEquals("bit 12",0,stream.nextBit());assertEquals("bit 13",0,stream.nextBit());assertEquals("bit 14",0,stream.nextBit());assertEquals("bit 15",0,stream.nextBit());assertEquals("next bit",-1,stream.nextBit());}
public void testNextByteFromEmptyStream()throws Exception {BitStream stream=new BitStream(new ByteArrayInputStream(new byte[0]));assertEquals("next byte",-1,stream.nextByte());assertEquals("next byte",-1,stream.nextByte());}
public void testReadAlignedBytes()throws Exception {BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0xEA,0x35}));assertEquals("next byte",0xEA,stream.nextByte());assertEquals("next byte",0x35,stream.nextByte());assertEquals("next byte",-1,stream.nextByte());}
public void testNextByte()throws Exception {BitStream stream=new BitStream(new ByteArrayInputStream(new byte[]{(byte)0xEA,0x35}));assertEquals("bit 0",0,stream.nextBit());assertEquals("bit 1",1,stream.nextBit());assertEquals("bit 2",0,stream.nextBit());assertEquals("bit 3",1,stream.nextBit());assertEquals("next byte",0x5E,stream.nextByte());assertEquals("next byte",-1,stream.nextByte());}
@Test public void testToCharset(){Assert.assertEquals(Charset.defaultCharset(),Charsets.toCharset((String)null));Assert.assertEquals(Charset.defaultCharset(),Charsets.toCharset((Charset)null));Assert.assertEquals(Charset.defaultCharset(),Charsets.toCharset(Charset.defaultCharset()));Assert.assertEquals(Charset.forName("UTF-8"),Charsets.toCharset(Charset.forName("UTF-8")));}
@Test public void testIso8859_1(){Assert.assertEquals("ISO-8859-1",Charsets.ISO_8859_1.name());}
@Test public void testUsAscii(){Assert.assertEquals("US-ASCII",Charsets.US_ASCII.name());}
@Test public void testUtf16(){Assert.assertEquals("UTF-16",Charsets.UTF_16.name());}
@Test public void testUtf16Be(){Assert.assertEquals("UTF-16BE",Charsets.UTF_16BE.name());}
@Test public void testUtf16Le(){Assert.assertEquals("UTF-16LE",Charsets.UTF_16LE.name());}
@Test public void testUtf8(){Assert.assertEquals("UTF-8",Charsets.UTF_8.name());}
public void testDetectionNotArchive()throws IOException {try {getStreamFor("test.txt");fail("Expected ArchiveException");}catch(ArchiveException e){}}
public void testCOMPRESS117()throws Exception {final ArchiveInputStream tar=getStreamFor("COMPRESS-117.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);}
public void testDetection()throws Exception {final ArchiveInputStream ar=getStreamFor("bla.ar");assertNotNull(ar);assertTrue(ar instanceof ArArchiveInputStream);final ArchiveInputStream tar=getStreamFor("bla.tar");assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);final ArchiveInputStream zip=getStreamFor("bla.zip");assertNotNull(zip);assertTrue(zip instanceof ZipArchiveInputStream);final ArchiveInputStream jar=getStreamFor("bla.jar");assertNotNull(jar);assertTrue(jar instanceof ZipArchiveInputStream);final ArchiveInputStream cpio=getStreamFor("bla.cpio");assertNotNull(cpio);assertTrue(cpio instanceof CpioArchiveInputStream);final ArchiveInputStream arj=getStreamFor("bla.arj");assertNotNull(arj);assertTrue(arj instanceof ArjArchiveInputStream);}
public void testEmptyCpioArchive()throws Exception {checkEmptyArchive("cpio");}
public void testEmptyJarArchive()throws Exception {checkEmptyArchive("jar");}
public void testEmptyZipArchive()throws Exception {checkEmptyArchive("zip");}
public void testNotADumpArchive()throws Exception {FileInputStream is=new FileInputStream(getFile("bla.zip"));try {new DumpArchiveInputStream(is);fail("expected an exception");}catch(ArchiveException ex){assertTrue(ex.getCause()instanceof ShortFileException);}finally {is.close();}}
public void testNotADumpArchiveButBigEnough()throws Exception {FileInputStream is=new FileInputStream(getFile("zip64support.tar.bz2"));try {new DumpArchiveInputStream(is);fail("expected an exception");}catch(ArchiveException ex){assertTrue(ex.getCause()instanceof UnrecognizedFormatException);}finally {is.close();}}
public void testConsumesArchiveCompletely()throws Exception {InputStream is=DumpArchiveInputStreamTest.class.getResourceAsStream("/archive_with_trailer.dump");DumpArchiveInputStream dump=new DumpArchiveInputStream(is);while (dump.getNextDumpEntry()!= null){}byte[]expected=new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'};byte[]actual=new byte[expected.length];is.read(actual);assertArrayEquals(expected,actual);dump.close();}
/** * test parser.*/public void testParse()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);try {ExtraFieldUtils.parse(data2);fail("data should be invalid");}catch(Exception e){assertEquals("message","bad extra field starting at " + (4 + aLocal.length)+ ".  Block length of 1 bytes exceeds remaining data of 0 bytes.",e.getMessage());}}
public void testParseWithRead()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.READ);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);ze=ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.READ);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnparseableExtraFieldData);assertEquals("data length field 2",4,ze[1].getLocalFileDataLength().getValue());for (int i=0;i < 4;i++){assertEquals("byte number " + i,data2[data.length - 5 + i],ze[1].getLocalFileDataData()[i]);}}
public void testParseWithSkip()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data,true,ExtraFieldUtils.UnparseableExtraField.SKIP);assertEquals("number of fields",2,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());assertTrue("type field 2",ze[1]instanceof UnrecognizedExtraField);assertEquals("data length field 2",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);ze=ExtraFieldUtils.parse(data2,true,ExtraFieldUtils.UnparseableExtraField.SKIP);assertEquals("number of fields",1,ze.length);assertTrue("type field 1",ze[0]instanceof AsiExtraField);assertEquals("mode field 1",040755,((AsiExtraField)ze[0]).getMode());}
/** * Test merge methods*/public void testMerge(){byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,dummy});assertEquals("local length",data.length,local.length);for (int i=0;i < local.length;i++){assertEquals("local byte " + i,data[i],local[i]);}byte[]dummyCentral=dummy.getCentralDirectoryData();byte[]data2=new byte[4 + aLocal.length + 4+ dummyCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dummy.getCentralDirectoryLength().getBytes(),0,data2,4 + aLocal.length + 2,2);System.arraycopy(dummyCentral,0,data2,4 + aLocal.length + 4,dummyCentral.length);byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,dummy});assertEquals("central length",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals("central byte " + i,data2[i],central[i]);}}
public void testMergeWithUnparseableData()throws Exception {ZipExtraField d=new UnparseableExtraFieldData();byte[]b=UNRECOGNIZED_HEADER.getBytes();d.parseFromLocalFileData(new byte[]{b[0],b[1],1,0},0,4);byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,d});assertEquals("local length",data.length - 1,local.length);for (int i=0;i < local.length;i++){assertEquals("local byte " + i,data[i],local[i]);}byte[]dCentral=d.getCentralDirectoryData();byte[]data2=new byte[4 + aLocal.length + dCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dCentral,0,data2,4 + aLocal.length,dCentral.length);byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,d});assertEquals("central length",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals("central byte " + i,data2[i],central[i]);}}
public void testOldGNU()throws Throwable {File file=getFile("oldgnu_sparse.tar");TarArchiveInputStream tin=null;try {tin=new TarArchiveInputStream(new FileInputStream(file));TarArchiveEntry ae=tin.getNextTarEntry();assertEquals("sparsefile",ae.getName());assertTrue(ae.isGNUSparse());assertFalse(tin.canReadEntryData(ae));}finally {if (tin != null){tin.close();}}}
public void testReadPasswordEncryptedEntryViaZipFile()throws IOException {File file=getFile("password-encrypted.zip");ZipFile zf=null;try {zf=new ZipFile(file);ZipArchiveEntry zae=zf.getEntry("LICENSE.txt");assertTrue(zae.getGeneralPurposeBit().usesEncryption());assertFalse(zae.getGeneralPurposeBit().usesStrongEncryption());assertFalse(zf.canReadEntryData(zae));try {zf.getInputStream(zae);fail("expected an exception");}catch(UnsupportedZipFeatureException ex){assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,ex.getFeature());}}finally {ZipFile.closeQuietly(zf);}}
public void testReadPasswordEncryptedEntryViaStream()throws IOException {File file=getFile("password-encrypted.zip");ZipArchiveInputStream zin=null;try {zin=new ZipArchiveInputStream(new FileInputStream(file));ZipArchiveEntry zae=zin.getNextZipEntry();assertEquals("LICENSE.txt",zae.getName());assertTrue(zae.getGeneralPurposeBit().usesEncryption());assertFalse(zae.getGeneralPurposeBit().usesStrongEncryption());assertFalse(zin.canReadEntryData(zae));try {byte[]buf=new byte[1024];zin.read(buf,0,buf.length);fail("expected an exception");}catch(UnsupportedZipFeatureException ex){assertSame(UnsupportedZipFeatureException.Feature.ENCRYPTION,ex.getFeature());}}finally {if (zin != null){zin.close();}}}
/** * JIRA issue SANDBOX-284* @see "https://issues.apache.org/jira/browse/SANDBOX-284"*/public void testFileSystemRoot(){TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));assertEquals("/",t.getName());}
public void testTarFileWithFSRoot()throws IOException {File f=File.createTempFile("taetest",".tar");f.deleteOnExit();TarArchiveOutputStream tout=null;TarArchiveInputStream tin=null;try {tout=new TarArchiveOutputStream(new FileOutputStream(f));TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));tout.putArchiveEntry(t);tout.closeArchiveEntry();t=new TarArchiveEntry(new File(new File(ROOT),"foo.txt"));t.setSize(6);tout.putArchiveEntry(t);tout.write(new byte[]{'h','e','l','l','o',' '});tout.closeArchiveEntry();t=new TarArchiveEntry(new File(new File(ROOT),"bar.txt").getAbsolutePath());t.setSize(5);tout.putArchiveEntry(t);tout.write(new byte[]{'w','o','r','l','d'});tout.closeArchiveEntry();t=new TarArchiveEntry("dummy");t.setName(new File(new File(ROOT),"baz.txt").getAbsolutePath());t.setSize(1);tout.putArchiveEntry(t);tout.write(new byte[]{'!'});tout.closeArchiveEntry();tout.close();tout=null;tin=new TarArchiveInputStream(new FileInputStream(f));t=tin.getNextTarEntry();assertNotNull(t);assertEquals("/",t.getName());assertTrue(t.isCheckSumOK());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("foo.txt",t.getName());assertTrue(t.isCheckSumOK());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("bar.txt",t.getName());assertTrue(t.isCheckSumOK());t=tin.getNextTarEntry();assertNotNull(t);assertEquals("baz.txt",t.getName());assertTrue(t.isCheckSumOK());}finally {if (tin != null){tin.close();}if (tout != null){tout.close();}AbstractTestCase.tryHardToDelete(f);}}
public void testMaxFileSize(){TarArchiveEntry t=new TarArchiveEntry("");t.setSize(0);t.setSize(1);try {t.setSize(-1);fail("Should have generated IllegalArgumentException");}catch(IllegalArgumentException expected){}t.setSize(077777777777L);t.setSize(0100000000000L);}
public void testLinkFlagConstructor(){TarArchiveEntry t=new TarArchiveEntry("/foo",LF_GNUTYPE_LONGNAME);assertGnuMagic(t);assertEquals("foo",t.getName());}
public void testLinkFlagConstructorWithFileFlag(){TarArchiveEntry t=new TarArchiveEntry("/foo",LF_NORMAL);assertPosixMagic(t);assertEquals("foo",t.getName());}
public void testLinkFlagConstructorWithPreserve(){TarArchiveEntry t=new TarArchiveEntry("/foo",LF_GNUTYPE_LONGNAME,true);assertGnuMagic(t);assertEquals("/foo",t.getName());}
public void testNormalize()throws Throwable {final File input=getFile("bla.jar");final File[]output=createTempDirAndFile();try {Pack200Utils.normalize(input,output[1],new HashMap<String,String>());final FileInputStream is=new FileInputStream(output[1]);try {final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}finally {is.close();}}finally {output[1].delete();output[0].delete();}}
public void testNormalizeInPlace()throws Throwable {final File input=getFile("bla.jar");final File[]output=createTempDirAndFile();try {FileInputStream is=new FileInputStream(input);OutputStream os=null;try {os=new FileOutputStream(output[1]);IOUtils.copy(is,os);}finally {is.close();if (os != null){os.close();}}Pack200Utils.normalize(output[1]);is=new FileInputStream(output[1]);try {final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream("jar",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}finally {is.close();}}finally {output[1].delete();output[0].delete();}}
public void testLongFileNamesCauseExceptionByDefault(){ArArchiveOutputStream os=null;try {os=new ArArchiveOutputStream(new ByteArrayOutputStream());ArArchiveEntry ae=new ArArchiveEntry("this_is_a_long_name.txt",0);os.putArchiveEntry(ae);fail("Expected an exception");}catch(IOException ex){assertTrue(ex.getMessage().startsWith("filename too long"));}finally {closeQuietly(os);}}
public void testLongFileNamesWorkUsingBSDDialect()throws Exception {FileOutputStream fos=null;ArArchiveOutputStream os=null;File[]df=createTempDirAndFile();try {fos=new FileOutputStream(df[1]);os=new ArArchiveOutputStream(fos);os.setLongFileMode(ArArchiveOutputStream.LONGFILE_BSD);ArArchiveEntry ae=new ArArchiveEntry("this_is_a_long_name.txt",14);os.putArchiveEntry(ae);os.write(new byte[]{'H','e','l','l','o',',',' ','w','o','r','l','d','!','\n'});os.closeArchiveEntry();os.close();os=null;fos=null;List<String> expected=new ArrayList<String>();expected.add("this_is_a_long_name.txt");checkArchiveContent(df[1],expected);}finally {if (os != null){os.close();}if (fos != null){fos.close();}rmdir(df[0]);}}
public void testTarGzip()throws Exception {File file=getFile("bla.tgz");final TarArchiveInputStream is=new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(file)));final TarArchiveEntry entry=(TarArchiveEntry)is.getNextEntry();assertNotNull(entry);assertEquals("test1.xml",entry.getName());is.close();}
public void testTarBzip2()throws Exception {File file=getFile("bla.tar.bz2");final TarArchiveInputStream is=new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));final TarArchiveEntry entry=(TarArchiveEntry)is.getNextEntry();assertNotNull(entry);assertEquals("test1.xml",entry.getName());is.close();}
@Test public void output()throws Exception {ByteArrayOutputStream bos=new ByteArrayOutputStream();CountingOutputStream o=new CountingOutputStream(bos);o.write(1);assertEquals(1,o.getBytesWritten());o.write(new byte[]{2,3});assertEquals(3,o.getBytesWritten());o.write(new byte[]{2,3,4,5},2,1);assertEquals(4,o.getBytesWritten());o.count(-1);assertEquals(4,o.getBytesWritten());o.count(-2);assertEquals(2,o.getBytesWritten());o.close();assertArrayEquals(new byte[]{1,2,3,4},bos.toByteArray());}
@Test public void input()throws Exception {ByteArrayInputStream bis=new ByteArrayInputStream(new byte[]{1,2,3,4});CountingInputStream i=new CountingInputStream(bis);assertEquals(1,i.read());assertEquals(1,i.getBytesRead());byte[]b=new byte[2];i.read(b);assertEquals(3,i.getBytesRead());assertArrayEquals(new byte[]{2,3},b);b=new byte[3];i.read(b,1,1);assertArrayEquals(new byte[]{0,4,0},b);assertEquals(4,i.getBytesRead());i.count(-1);assertEquals(4,i.getBytesRead());i.count(-2);assertEquals(2,i.getBytesRead());i.close();}
public void testJarUnarchiveAllInMemory()throws Exception {jarUnarchiveAll(false,Pack200Strategy.IN_MEMORY);}
public void testJarUnarchiveAllFileArgInMemory()throws Exception {jarUnarchiveAll(true,Pack200Strategy.IN_MEMORY);}
public void testJarUnarchiveAllTempFile()throws Exception {jarUnarchiveAll(false,Pack200Strategy.TEMP_FILE);}
public void testJarUnarchiveAllFileTempFile()throws Exception {jarUnarchiveAll(true,Pack200Strategy.TEMP_FILE);}
public void testJarArchiveCreationInMemory()throws Exception {jarArchiveCreation(Pack200Strategy.IN_MEMORY);}
public void testJarArchiveCreationTempFile()throws Exception {jarArchiveCreation(Pack200Strategy.TEMP_FILE);}
public void testGoodSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.pack"));try {byte[]sig=new byte[4];is.read(sig);assertTrue(Pack200CompressorInputStream.matches(sig,4));}finally {is.close();}}
public void testBadSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.jar"));try {byte[]sig=new byte[4];is.read(sig);assertFalse(Pack200CompressorInputStream.matches(sig,4));}finally {is.close();}}
public void testShortSignature()throws Exception {final InputStream is=new FileInputStream(getFile("bla.pack"));try {byte[]sig=new byte[2];is.read(sig);assertFalse(Pack200CompressorInputStream.matches(sig,2));}finally {is.close();}}
public void testInputStreamMethods()throws Exception {Map<String,String> m=new HashMap<String,String>();m.put("foo","bar");final InputStream is=new Pack200CompressorInputStream(new FileInputStream(getFile("bla.jar")),m);try {assertTrue(is.markSupported());is.mark(5);assertEquals(0x50,is.read());byte[]rest=new byte[3];assertEquals(3,is.read(rest));assertEquals(0x4b,rest[0]);assertEquals(3,rest[1]);assertEquals(4,rest[2]);assertEquals(1,is.skip(1));is.reset();assertEquals(0x50,is.read());assertTrue(is.available()> 0);}finally {is.close();}}
public void testOutputStreamMethods()throws Exception {final File output=new File(dir,"bla.pack");Map<String,String> m=new HashMap<String,String>();m.put("foo","bar");final OutputStream out=new FileOutputStream(output);try {final OutputStream os=new Pack200CompressorOutputStream(out,m);os.write(1);os.write(new byte[]{2,3});os.close();}finally {out.close();}}
public void testReading()throws IOException {final MemoryArchiveInputStream is=new MemoryArchiveInputStream(new String[][]{{"test1","content1"},{"test2","content2"}});final ArchiveEntry entry1=is.getNextEntry();assertNotNull(entry1);assertEquals("test1",entry1.getName());final String content1=is.readString();assertEquals("content1",content1);final ArchiveEntry entry2=is.getNextEntry();assertNotNull(entry2);assertEquals("test2",entry2.getName());final String content2=is.readString();assertEquals("content2",content2);final ArchiveEntry entry3=is.getNextEntry();assertNull(entry3);is.close();}
@Test(expected=IOException.class)public void testTruncatedData()throws IOException {System.out.println("Attempt to read the whole thing in,should throw ...");ByteBuffer buffer=ByteBuffer.allocate(8192);bz2Channel.read(buffer);}
@Test public void testPartialReadTruncatedData()throws IOException {final int length=TEXT.length();ByteBuffer buffer=ByteBuffer.allocate(length);bz2Channel.read(buffer);assertArrayEquals(Arrays.copyOfRange(TEXT.getBytes(),0,length),buffer.array());buffer=ByteBuffer.allocate(1);try {bz2Channel.read(buffer);Assert.fail("The read should have thrown.");}catch(IOException e){}}
