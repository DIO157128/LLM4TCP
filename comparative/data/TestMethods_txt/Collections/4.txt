@SuppressWarnings("unchecked")public void testGet(){final Queue<E> queue=makeTestQueue();assertNull(queue.peek());queue.add((E)"one");queue.add((E)"two");queue.add((E)"three");assertEquals("Queue get","one",queue.peek());}
@SuppressWarnings("unchecked")public void testRemove(){final Queue<E> queue=makeTestQueue();queue.add((E)"one");assertEquals("Queue get","one",queue.poll());assertNull(queue.peek());}
@SuppressWarnings("unchecked")public void testAdd(){assertEquals("[]",list.toString());assertTrue(list.add((E)Integer.valueOf(1)));assertEquals("[1]",list.toString());assertTrue(list.add((E)Integer.valueOf(2)));assertEquals("[1,2]",list.toString());assertTrue(list.add((E)Integer.valueOf(3)));assertEquals("[1,2,3]",list.toString());assertTrue(list.addFirst((E)Integer.valueOf(0)));assertEquals("[0,1,2,3]",list.toString());assertTrue(list.addLast((E)Integer.valueOf(4)));assertEquals("[0,1,2,3,4]",list.toString());list.add(0,(E)Integer.valueOf(-2));assertEquals("[-2,0,1,2,3,4]",list.toString());list.add(1,(E)Integer.valueOf(-1));assertEquals("[-2,-1,0,1,2,3,4]",list.toString());list.add(7,(E)Integer.valueOf(5));assertEquals("[-2,-1,0,1,2,3,4,5]",list.toString());final List<E> list2=new LinkedList<E>();list2.add((E)"A");list2.add((E)"B");list2.add((E)"C");assertTrue(list.addAll(list2));assertEquals("[-2,-1,0,1,2,3,4,5,A,B,C]",list.toString());assertTrue(list.addAll(3,list2));assertEquals("[-2,-1,0,A,B,C,1,2,3,4,5,A,B,C]",list.toString());}
@SuppressWarnings("unchecked")public void testClear(){assertEquals(0,list.size());assertTrue(list.isEmpty());list.clear();assertEquals(0,list.size());assertTrue(list.isEmpty());list.add((E)"element");assertEquals(1,list.size());assertTrue(!list.isEmpty());list.clear();assertEquals(0,list.size());assertTrue(list.isEmpty());list.add((E)"element1");list.add((E)"element2");assertEquals(2,list.size());assertTrue(!list.isEmpty());list.clear();assertEquals(0,list.size());assertTrue(list.isEmpty());for (int i=0;i < 1000;i++){list.add((E)Integer.valueOf(i));}assertEquals(1000,list.size());assertTrue(!list.isEmpty());list.clear();assertEquals(0,list.size());assertTrue(list.isEmpty());}
@SuppressWarnings("unchecked")public void testContains(){assertTrue(!list.contains("A"));assertTrue(list.add((E)"A"));assertTrue(list.contains("A"));assertTrue(list.add((E)"B"));assertTrue(list.contains("A"));assertTrue(list.addFirst((E)"a"));assertTrue(list.contains("A"));assertTrue(list.remove("a"));assertTrue(list.contains("A"));assertTrue(list.remove("A"));assertTrue(!list.contains("A"));}
@SuppressWarnings("unchecked")public void testContainsAll(){assertTrue(list.containsAll(list));final java.util.List<E> list2=new java.util.LinkedList<E>();assertTrue(list.containsAll(list2));list2.add((E)"A");assertTrue(!list.containsAll(list2));list.add((E)"B");list.add((E)"A");assertTrue(list.containsAll(list2));list2.add((E)"B");assertTrue(list.containsAll(list2));list2.add((E)"C");assertTrue(!list.containsAll(list2));list.add((E)"C");assertTrue(list.containsAll(list2));list2.add((E)"C");assertTrue(list.containsAll(list2));assertTrue(list.containsAll(list));}
@SuppressWarnings("unchecked")public void testCursorNavigation(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final CursorableLinkedList.Cursor<E> it=list.cursor();assertTrue(it.hasNext());assertTrue(!it.hasPrevious());assertEquals("1",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("1",it.previous());assertTrue(it.hasNext());assertTrue(!it.hasPrevious());assertEquals("1",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("2",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("2",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("2",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("3",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("4",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("5",it.next());assertTrue(!it.hasNext());assertTrue(it.hasPrevious());assertEquals("5",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("4",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("3",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("2",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals("1",it.previous());assertTrue(it.hasNext());assertTrue(!it.hasPrevious());it.close();}
@SuppressWarnings("unchecked")public void testCursorSet(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final CursorableLinkedList.Cursor<E> it=list.cursor();assertEquals("1",it.next());it.set((E)"a");assertEquals("a",it.previous());it.set((E)"A");assertEquals("A",it.next());assertEquals("2",it.next());it.set((E)"B");assertEquals("3",it.next());assertEquals("4",it.next());it.set((E)"D");assertEquals("5",it.next());it.set((E)"E");assertEquals("[A,B,3,D,E]",list.toString());it.close();}
@SuppressWarnings("unchecked")public void testCursorRemove(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final CursorableLinkedList.Cursor<E> it=list.cursor();try {it.remove();fail();}catch(final IllegalStateException e){}assertEquals("1",it.next());assertEquals("2",it.next());assertEquals("[1,2,3,4,5]",list.toString());it.remove();assertEquals("[1,3,4,5]",list.toString());assertEquals("3",it.next());assertEquals("3",it.previous());assertEquals("1",it.previous());it.remove();assertEquals("[3,4,5]",list.toString());assertTrue(!it.hasPrevious());assertEquals("3",it.next());it.remove();assertEquals("[4,5]",list.toString());try {it.remove();}catch(final IllegalStateException e){}assertEquals("4",it.next());assertEquals("5",it.next());it.remove();assertEquals("[4]",list.toString());assertEquals("4",it.previous());it.remove();assertEquals("[]",list.toString());it.close();}
@SuppressWarnings("unchecked")public void testCursorAdd(){final CursorableLinkedList.Cursor<E> it=list.cursor();it.add((E)"1");assertEquals("[1]",list.toString());it.add((E)"3");assertEquals("[1,3]",list.toString());it.add((E)"5");assertEquals("[1,3,5]",list.toString());assertEquals("5",it.previous());it.add((E)"4");assertEquals("[1,3,4,5]",list.toString());assertEquals("4",it.previous());assertEquals("3",it.previous());it.add((E)"2");assertEquals("[1,2,3,4,5]",list.toString());it.close();}
@SuppressWarnings("unchecked")public void testCursorConcurrentModification(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"5");list.add((E)"7");list.add((E)"9");final CursorableLinkedList.Cursor<E> c1=list.cursor();final CursorableLinkedList.Cursor<E> c2=list.cursor();final Iterator<E> li=list.iterator();assertEquals("1",li.next());assertEquals("2",li.next());li.remove();assertEquals("3",li.next());assertEquals("1",c1.next());assertEquals("3",c1.next());assertEquals("1",c2.next());c1.remove();assertEquals("5",c2.next());c2.add((E)"6");assertEquals("5",c1.next());assertEquals("6",c1.next());assertEquals("7",c1.next());list.add(0,(E)"0");list.add(5,(E)"8");assertEquals("8",c1.next());assertEquals("9",c1.next());c1.add((E)"10");assertEquals("7",c2.next());assertEquals("8",c2.next());assertEquals("9",c2.next());assertEquals("10",c2.next());try {c2.next();fail();}catch(final NoSuchElementException nse){}try {li.next();fail();}catch(final ConcurrentModificationException cme){}c1.close();c2.close();}
@SuppressWarnings("unchecked")public void testCursorNextIndexMid(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"5");final CursorableLinkedList.Cursor<E> c1=list.cursor();final Iterator<E> li=list.iterator();assertEquals("1",li.next());assertEquals("2",li.next());li.remove();assertEquals(0,c1.nextIndex());assertEquals("1",c1.next());assertEquals(1,c1.nextIndex());assertEquals("3",c1.next());}
@SuppressWarnings("unchecked")public void testCursorNextIndexFirst(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"5");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals(0,c1.nextIndex());list.remove(0);assertEquals(0,c1.nextIndex());assertEquals("2",c1.next());assertEquals(1,c1.nextIndex());assertEquals("3",c1.next());}
@SuppressWarnings("unchecked")public void testCursorNextIndexAddBefore(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"5");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals(0,c1.nextIndex());assertEquals("1",c1.next());list.add(0,(E)"0");assertEquals(2,c1.nextIndex());assertEquals("2",c1.next());}
@SuppressWarnings("unchecked")public void testCursorNextIndexAddNext(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"5");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals(0,c1.nextIndex());list.add(0,(E)"0");assertEquals(0,c1.nextIndex());assertEquals("0",c1.next());assertEquals(1,c1.nextIndex());assertEquals("1",c1.next());}
@SuppressWarnings("unchecked")public void testCursorNextIndexAddAfter(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"5");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals(0,c1.nextIndex());list.add(1,(E)"0");assertEquals(0,c1.nextIndex());assertEquals("1",c1.next());assertEquals(1,c1.nextIndex());assertEquals("0",c1.next());}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("B",c1.previous());assertEquals("B",list.remove(1));assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals(true,c1.currentRemovedByAnother);assertEquals(null,c1.current);assertEquals("C",c1.next.value);assertEquals("[A,C]",list.toString());c1.remove();assertEquals("[A,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextRemoveIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",list.remove(1));assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals(false,c1.currentRemovedByAnother);assertEquals("A",c1.current.value);assertEquals("C",c1.next.value);assertEquals("[A,C]",list.toString());c1.remove();assertEquals("[C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextRemoveIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("B",list.remove(1));assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals(true,c1.currentRemovedByAnother);assertEquals(null,c1.current);assertEquals("C",c1.next.value);assertEquals("[A,C]",list.toString());c1.remove();assertEquals("[A,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextNextRemoveIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("C",c1.next());assertEquals("B",list.remove(1));assertEquals(false,c1.nextIndexValid);assertEquals(false,c1.currentRemovedByAnother);assertEquals("C",c1.current.value);assertEquals("D",c1.next.value);assertEquals("[A,C,D]",list.toString());c1.remove();assertEquals("[A,D]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextPreviousRemoveByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("B",c1.previous());c1.remove();assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals(false,c1.currentRemovedByAnother);assertEquals(null,c1.current);assertEquals("C",c1.next.value);assertEquals("[A,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextRemoveByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());c1.remove();assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals(false,c1.currentRemovedByAnother);assertEquals(null,c1.current);assertEquals("C",c1.next.value);assertEquals("[A,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextPreviousAddIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("B",c1.previous());list.add(1,(E)"Z");assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals("B",c1.current.value);assertEquals("Z",c1.next.value);assertEquals("[A,Z,B,C]",list.toString());c1.remove();assertEquals("[A,Z,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextAddIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());list.add(1,(E)"Z");assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals("A",c1.current.value);assertEquals("Z",c1.next.value);assertEquals("[A,Z,B,C]",list.toString());c1.remove();assertEquals("[Z,B,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextAddIndex1ByList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());list.add(1,(E)"Z");assertEquals(false,c1.nextIndexValid);assertEquals("B",c1.current.value);assertEquals("C",c1.next.value);assertEquals("[A,Z,B,C]",list.toString());c1.remove();assertEquals("[A,Z,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextPreviousAddByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("B",c1.previous());c1.add((E)"Z");assertEquals(true,c1.nextIndexValid);assertEquals(2,c1.nextIndex);assertEquals(null,c1.current);assertEquals("B",c1.next.value);assertEquals("[A,Z,B,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextAddByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());c1.add((E)"Z");assertEquals(true,c1.nextIndexValid);assertEquals(3,c1.nextIndex);assertEquals(false,c1.currentRemovedByAnother);assertEquals(null,c1.current);assertEquals("C",c1.next.value);assertEquals("[A,B,Z,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextRemoveByListSetByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());list.remove(1);assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals(null,c1.current);assertEquals("C",c1.next.value);assertEquals("[A,C]",list.toString());try {c1.set((E)"Z");fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextPreviousSetByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());assertEquals("B",c1.previous());c1.set((E)"Z");assertEquals(true,c1.nextIndexValid);assertEquals(1,c1.nextIndex);assertEquals("Z",c1.current.value);assertEquals("Z",c1.next.value);assertEquals("[A,Z,C]",list.toString());c1.remove();assertEquals("[A,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testInternalState_CursorNextNextSetByIterator(){list.add((E)"A");list.add((E)"B");list.add((E)"C");final CursorableLinkedList.Cursor<E> c1=list.cursor();assertEquals("A",c1.next());assertEquals("B",c1.next());c1.set((E)"Z");assertEquals(true,c1.nextIndexValid);assertEquals(2,c1.nextIndex);assertEquals("Z",c1.current.value);assertEquals("C",c1.next.value);assertEquals("[A,Z,C]",list.toString());c1.remove();assertEquals("[A,C]",list.toString());try {c1.remove();fail();}catch(final IllegalStateException ex){}}
@SuppressWarnings("unchecked")public void testEqualsAndHashCode(){assertTrue(list.equals(list));assertEquals(list.hashCode(),list.hashCode());list.add((E)"A");assertTrue(list.equals(list));assertEquals(list.hashCode(),list.hashCode());final CursorableLinkedList<E> list2=new CursorableLinkedList<E>();assertTrue(!list.equals(list2));assertTrue(!list2.equals(list));final java.util.List<E> list3=new java.util.LinkedList<E>();assertTrue(!list.equals(list3));assertTrue(!list3.equals(list));assertTrue(list2.equals(list3));assertTrue(list3.equals(list2));assertEquals(list2.hashCode(),list3.hashCode());list2.add((E)"A");assertTrue(list.equals(list2));assertTrue(list2.equals(list));assertTrue(!list2.equals(list3));assertTrue(!list3.equals(list2));list3.add((E)"A");assertTrue(list2.equals(list3));assertTrue(list3.equals(list2));assertEquals(list2.hashCode(),list3.hashCode());list.add((E)"B");assertTrue(list.equals(list));assertTrue(!list.equals(list2));assertTrue(!list2.equals(list));assertTrue(!list.equals(list3));assertTrue(!list3.equals(list));list2.add((E)"B");list3.add((E)"B");assertTrue(list.equals(list));assertTrue(list.equals(list2));assertTrue(list2.equals(list));assertTrue(list2.equals(list3));assertTrue(list3.equals(list2));assertEquals(list2.hashCode(),list3.hashCode());list.add((E)"C");list2.add((E)"C");list3.add((E)"C");assertTrue(list.equals(list));assertTrue(list.equals(list2));assertTrue(list2.equals(list));assertTrue(list2.equals(list3));assertTrue(list3.equals(list2));assertEquals(list.hashCode(),list2.hashCode());assertEquals(list2.hashCode(),list3.hashCode());list.add((E)"D");list2.addFirst((E)"D");assertTrue(list.equals(list));assertTrue(!list.equals(list2));assertTrue(!list2.equals(list));}
@SuppressWarnings("unchecked")public void testGet(){try {list.get(0);fail("shouldn't get here");}catch(final IndexOutOfBoundsException e){}assertTrue(list.add((E)"A"));assertEquals("A",list.get(0));assertTrue(list.add((E)"B"));assertEquals("A",list.get(0));assertEquals("B",list.get(1));try {list.get(-1);fail("shouldn't get here");}catch(final IndexOutOfBoundsException e){}try {list.get(2);fail("shouldn't get here");}catch(final IndexOutOfBoundsException e){}}
@SuppressWarnings("unchecked")public void testIndexOf(){assertEquals(-1,list.indexOf("A"));assertEquals(-1,list.lastIndexOf("A"));list.add((E)"A");assertEquals(0,list.indexOf("A"));assertEquals(0,list.lastIndexOf("A"));assertEquals(-1,list.indexOf("B"));assertEquals(-1,list.lastIndexOf("B"));list.add((E)"B");assertEquals(0,list.indexOf("A"));assertEquals(0,list.lastIndexOf("A"));assertEquals(1,list.indexOf("B"));assertEquals(1,list.lastIndexOf("B"));list.addFirst((E)"B");assertEquals(1,list.indexOf("A"));assertEquals(1,list.lastIndexOf("A"));assertEquals(0,list.indexOf("B"));assertEquals(2,list.lastIndexOf("B"));}
@SuppressWarnings("unchecked")public void testIsEmpty(){assertTrue(list.isEmpty());list.add((E)"element");assertTrue(!list.isEmpty());list.remove("element");assertTrue(list.isEmpty());list.add((E)"element");assertTrue(!list.isEmpty());list.clear();assertTrue(list.isEmpty());}
@SuppressWarnings("unchecked")public void testIterator(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");Iterator<E> it=list.iterator();assertTrue(it.hasNext());assertEquals("1",it.next());assertTrue(it.hasNext());assertEquals("2",it.next());assertTrue(it.hasNext());assertEquals("3",it.next());assertTrue(it.hasNext());assertEquals("4",it.next());assertTrue(it.hasNext());assertEquals("5",it.next());assertTrue(!it.hasNext());it=list.iterator();assertTrue(it.hasNext());assertEquals("1",it.next());it.remove();assertEquals("[2,3,4,5]",list.toString());assertTrue(it.hasNext());assertEquals("2",it.next());it.remove();assertEquals("[3,4,5]",list.toString());assertTrue(it.hasNext());assertEquals("3",it.next());it.remove();assertEquals("[4,5]",list.toString());assertTrue(it.hasNext());assertEquals("4",it.next());it.remove();assertEquals("[5]",list.toString());assertTrue(it.hasNext());assertEquals("5",it.next());it.remove();assertEquals("[]",list.toString());assertTrue(!it.hasNext());}
@SuppressWarnings("unchecked")public void testListIteratorNavigation(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final ListIterator<E> it=list.listIterator();assertTrue(it.hasNext());assertTrue(!it.hasPrevious());assertEquals(-1,it.previousIndex());assertEquals(0,it.nextIndex());assertEquals("1",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(0,it.previousIndex());assertEquals(1,it.nextIndex());assertEquals("1",it.previous());assertTrue(it.hasNext());assertTrue(!it.hasPrevious());assertEquals(-1,it.previousIndex());assertEquals(0,it.nextIndex());assertEquals("1",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(0,it.previousIndex());assertEquals(1,it.nextIndex());assertEquals("2",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(1,it.previousIndex());assertEquals(2,it.nextIndex());assertEquals("2",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(0,it.previousIndex());assertEquals(1,it.nextIndex());assertEquals("2",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(1,it.previousIndex());assertEquals(2,it.nextIndex());assertEquals("3",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(2,it.previousIndex());assertEquals(3,it.nextIndex());assertEquals("4",it.next());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(3,it.previousIndex());assertEquals(4,it.nextIndex());assertEquals("5",it.next());assertTrue(!it.hasNext());assertTrue(it.hasPrevious());assertEquals(4,it.previousIndex());assertEquals(5,it.nextIndex());assertEquals("5",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(3,it.previousIndex());assertEquals(4,it.nextIndex());assertEquals("4",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(2,it.previousIndex());assertEquals(3,it.nextIndex());assertEquals("3",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(1,it.previousIndex());assertEquals(2,it.nextIndex());assertEquals("2",it.previous());assertTrue(it.hasNext());assertTrue(it.hasPrevious());assertEquals(0,it.previousIndex());assertEquals(1,it.nextIndex());assertEquals("1",it.previous());assertTrue(it.hasNext());assertTrue(!it.hasPrevious());assertEquals(-1,it.previousIndex());assertEquals(0,it.nextIndex());}
@Override @SuppressWarnings("unchecked")public void testListIteratorSet(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final ListIterator<E> it=list.listIterator();assertEquals("1",it.next());it.set((E)"a");assertEquals("a",it.previous());it.set((E)"A");assertEquals("A",it.next());assertEquals("2",it.next());it.set((E)"B");assertEquals("3",it.next());assertEquals("4",it.next());it.set((E)"D");assertEquals("5",it.next());it.set((E)"E");assertEquals("[A,B,3,D,E]",list.toString());}
@SuppressWarnings("unchecked")public void testListIteratorRemove(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final ListIterator<E> it=list.listIterator();try {it.remove();}catch(final IllegalStateException e){}assertEquals("1",it.next());assertEquals("2",it.next());assertEquals("[1,2,3,4,5]",list.toString());it.remove();assertEquals("[1,3,4,5]",list.toString());assertEquals("3",it.next());assertEquals("3",it.previous());assertEquals("1",it.previous());it.remove();assertEquals("[3,4,5]",list.toString());assertTrue(!it.hasPrevious());assertEquals("3",it.next());it.remove();assertEquals("[4,5]",list.toString());try {it.remove();}catch(final IllegalStateException e){}assertEquals("4",it.next());assertEquals("5",it.next());it.remove();assertEquals("[4]",list.toString());assertEquals("4",it.previous());it.remove();assertEquals("[]",list.toString());}
@Override @SuppressWarnings("unchecked")public void testListIteratorAdd(){final ListIterator<E> it=list.listIterator();it.add((E)"1");assertEquals("[1]",list.toString());it.add((E)"3");assertEquals("[1,3]",list.toString());it.add((E)"5");assertEquals("[1,3,5]",list.toString());assertEquals("5",it.previous());it.add((E)"4");assertEquals("[1,3,4,5]",list.toString());assertEquals("4",it.previous());assertEquals("3",it.previous());it.add((E)"2");assertEquals("[1,2,3,4,5]",list.toString());}
@SuppressWarnings("unchecked")public void testRemoveAll(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final HashSet<E> set=new HashSet<E>();set.add((E)"A");set.add((E)"2");set.add((E)"C");set.add((E)"4");set.add((E)"D");assertTrue(list.removeAll(set));assertEquals("[1,3,5]",list.toString());assertTrue(!list.removeAll(set));}
@SuppressWarnings("unchecked")public void testRemoveByIndex(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");assertEquals("[1,2,3,4,5]",list.toString());assertEquals("1",list.remove(0));assertEquals("[2,3,4,5]",list.toString());assertEquals("3",list.remove(1));assertEquals("[2,4,5]",list.toString());assertEquals("4",list.remove(1));assertEquals("[2,5]",list.toString());assertEquals("5",list.remove(1));assertEquals("[2]",list.toString());assertEquals("2",list.remove(0));assertEquals("[]",list.toString());}
@SuppressWarnings("unchecked")public void testRemove(){list.add((E)"1");list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");assertEquals("[1,1,2,3,4,5,2,3,4,5]",list.toString());assertTrue(!list.remove("6"));assertTrue(list.remove("5"));assertEquals("[1,1,2,3,4,2,3,4,5]",list.toString());assertTrue(list.remove("5"));assertEquals("[1,1,2,3,4,2,3,4]",list.toString());assertTrue(!list.remove("5"));assertTrue(list.remove("1"));assertEquals("[1,2,3,4,2,3,4]",list.toString());assertTrue(list.remove("1"));assertEquals("[2,3,4,2,3,4]",list.toString());assertTrue(list.remove("2"));assertEquals("[3,4,2,3,4]",list.toString());assertTrue(list.remove("2"));assertEquals("[3,4,3,4]",list.toString());assertTrue(list.remove("3"));assertEquals("[4,3,4]",list.toString());assertTrue(list.remove("3"));assertEquals("[4,4]",list.toString());assertTrue(list.remove("4"));assertEquals("[4]",list.toString());assertTrue(list.remove("4"));assertEquals("[]",list.toString());}
@SuppressWarnings("unchecked")public void testRetainAll(){list.add((E)"1");list.add((E)"1");list.add((E)"2");list.add((E)"2");list.add((E)"3");list.add((E)"3");list.add((E)"4");list.add((E)"4");list.add((E)"5");list.add((E)"5");final HashSet<E> set=new HashSet<E>();set.add((E)"A");set.add((E)"2");set.add((E)"C");set.add((E)"4");set.add((E)"D");assertTrue(list.retainAll(set));assertEquals("[2,2,4,4]",list.toString());assertTrue(!list.retainAll(set));}
@SuppressWarnings("unchecked")public void testSet(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");assertEquals("[1,2,3,4,5]",list.toString());list.set(0,(E)"A");assertEquals("[A,2,3,4,5]",list.toString());list.set(1,(E)"B");assertEquals("[A,B,3,4,5]",list.toString());list.set(2,(E)"C");assertEquals("[A,B,C,4,5]",list.toString());list.set(3,(E)"D");assertEquals("[A,B,C,D,5]",list.toString());list.set(4,(E)"E");assertEquals("[A,B,C,D,E]",list.toString());}
@SuppressWarnings("unchecked")public void testSubList(){list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");assertEquals("[A,B,C,D,E]",list.toString());assertEquals("[A,B,C,D,E]",list.subList(0,5).toString());assertEquals("[B,C,D,E]",list.subList(1,5).toString());assertEquals("[C,D,E]",list.subList(2,5).toString());assertEquals("[D,E]",list.subList(3,5).toString());assertEquals("[E]",list.subList(4,5).toString());assertEquals("[]",list.subList(5,5).toString());}
@SuppressWarnings("unchecked")public void testSubListAddEnd(){list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");final List<E> sublist=list.subList(5,5);sublist.add((E)"F");assertEquals("[A,B,C,D,E,F]",list.toString());assertEquals("[F]",sublist.toString());sublist.add((E)"G");assertEquals("[A,B,C,D,E,F,G]",list.toString());assertEquals("[F,G]",sublist.toString());}
@SuppressWarnings("unchecked")public void testSubListAddBegin(){list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");final List<E> sublist=list.subList(0,0);sublist.add((E)"a");assertEquals("[a,A,B,C,D,E]",list.toString());assertEquals("[a]",sublist.toString());sublist.add((E)"b");assertEquals("[a,b,A,B,C,D,E]",list.toString());assertEquals("[a,b]",sublist.toString());}
@SuppressWarnings("unchecked")public void testSubListAddMiddle(){list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");final List<E> sublist=list.subList(1,3);sublist.add((E)"a");assertEquals("[A,B,C,a,D,E]",list.toString());assertEquals("[B,C,a]",sublist.toString());sublist.add((E)"b");assertEquals("[A,B,C,a,b,D,E]",list.toString());assertEquals("[B,C,a,b]",sublist.toString());}
@SuppressWarnings("unchecked")public void testSubListRemove(){list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");final List<E> sublist=list.subList(1,4);assertEquals("[B,C,D]",sublist.toString());assertEquals("[A,B,C,D,E]",list.toString());sublist.remove("C");assertEquals("[B,D]",sublist.toString());assertEquals("[A,B,D,E]",list.toString());sublist.remove(1);assertEquals("[B]",sublist.toString());assertEquals("[A,B,E]",list.toString());sublist.clear();assertEquals("[]",sublist.toString());assertEquals("[A,E]",list.toString());}
@SuppressWarnings("unchecked")public void testToArray(){list.add((E)"1");list.add((E)"2");list.add((E)"3");list.add((E)"4");list.add((E)"5");final Object[]elts=list.toArray();assertEquals("1",elts[0]);assertEquals("2",elts[1]);assertEquals("3",elts[2]);assertEquals("4",elts[3]);assertEquals("5",elts[4]);assertEquals(5,elts.length);final String[]elts2=list.toArray(new String[0]);assertEquals("1",elts2[0]);assertEquals("2",elts2[1]);assertEquals("3",elts2[2]);assertEquals("4",elts2[3]);assertEquals("5",elts2[4]);assertEquals(5,elts2.length);final String[]elts3=new String[5];assertSame(elts3,list.toArray(elts3));assertEquals("1",elts3[0]);assertEquals("2",elts3[1]);assertEquals("3",elts3[2]);assertEquals("4",elts3[3]);assertEquals("5",elts3[4]);assertEquals(5,elts3.length);final String[]elts4=new String[3];final String[]elts4b=list.toArray(elts4);assertTrue(elts4 != elts4b);assertEquals("1",elts4b[0]);assertEquals("2",elts4b[1]);assertEquals("3",elts4b[2]);assertEquals("4",elts4b[3]);assertEquals("5",elts4b[4]);assertEquals(5,elts4b.length);}
@SuppressWarnings("unchecked")public void testSerialization()throws Exception {list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);out.writeObject(list);out.flush();out.close();final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);final Object list2=in.readObject();assertTrue(list != list2);assertTrue(list2.equals(list));assertTrue(list.equals(list2));}
@SuppressWarnings("unchecked")public void testSerializationWithOpenCursor()throws Exception {list.add((E)"A");list.add((E)"B");list.add((E)"C");list.add((E)"D");list.add((E)"E");final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);out.writeObject(list);out.flush();out.close();final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);final Object list2=in.readObject();assertTrue(list != list2);assertTrue(list2.equals(list));assertTrue(list.equals(list2));}
@SuppressWarnings("unchecked")public void testLongSerialization()throws Exception {for (int i=0;i < 10000;i++){list.add((E)Integer.valueOf(i));}final java.io.ByteArrayOutputStream buf=new java.io.ByteArrayOutputStream();final java.io.ObjectOutputStream out=new java.io.ObjectOutputStream(buf);out.writeObject(list);out.flush();out.close();final java.io.ByteArrayInputStream bufin=new java.io.ByteArrayInputStream(buf.toByteArray());final java.io.ObjectInputStream in=new java.io.ObjectInputStream(bufin);final Object list2=in.readObject();assertTrue(list != list2);assertTrue(list2.equals(list));assertTrue(list.equals(list2));}
public void testGetSetComparator(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>();assertNull(iter.getComparator());iter.setComparator(comparator);assertSame(comparator,iter.getComparator());iter.setComparator(null);assertNull(iter.getComparator());}
public void testIterateEven(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator);iter.addIterator(evens.iterator());for (int i=0;i < evens.size();i++){assertTrue(iter.hasNext());assertEquals(evens.get(i),iter.next());assertEquals(0,iter.getIteratorIndex());}assertTrue(!iter.hasNext());}
public void testIterateEvenOdd(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator,evens.iterator(),odds.iterator());for (int i=0;i < 20;i++){assertTrue(iter.hasNext());assertEquals(Integer.valueOf(i),iter.next());assertEquals(i % 2,iter.getIteratorIndex());}assertTrue(!iter.hasNext());}
public void testIterateOddEven(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator,odds.iterator(),evens.iterator());for (int i=0;i < 20;i++){assertTrue(iter.hasNext());assertEquals(Integer.valueOf(i),iter.next());assertEquals(i % 2 == 0 ? 1 : 0,iter.getIteratorIndex());}assertTrue(!iter.hasNext());}
public void testIterateEvenEven(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator);iter.addIterator(evens.iterator());iter.addIterator(evens.iterator());for (int i=0;i < evens.size();i++){assertTrue(iter.hasNext());assertEquals(evens.get(i),iter.next());assertEquals(0,iter.getIteratorIndex());assertTrue(iter.hasNext());assertEquals(evens.get(i),iter.next());assertEquals(1,iter.getIteratorIndex());}assertTrue(!iter.hasNext());}
public void testIterateFibEvenOdd(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator);iter.addIterator(fib.iterator());iter.addIterator(evens.iterator());iter.addIterator(odds.iterator());assertEquals(Integer.valueOf(0),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(1),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(1),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(1),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(2),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(2),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(3),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(3),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(4),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(5),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(5),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(6),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(7),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(8),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(8),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(9),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(10),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(11),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(12),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(13),iter.next());assertEquals(0,iter.getIteratorIndex());assertEquals(Integer.valueOf(13),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(14),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(15),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(16),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(17),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(18),iter.next());assertEquals(1,iter.getIteratorIndex());assertEquals(Integer.valueOf(19),iter.next());assertEquals(2,iter.getIteratorIndex());assertEquals(Integer.valueOf(21),iter.next());assertEquals(0,iter.getIteratorIndex());assertTrue(!iter.hasNext());}
public void testRemoveFromSingle(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator);iter.addIterator(evens.iterator());int expectedSize=evens.size();while (iter.hasNext()){final Object o=iter.next();final Integer val=(Integer)o;if (val.intValue()% 4 == 0){expectedSize--;iter.remove();}}assertEquals(expectedSize,evens.size());}
public void testRemoveFromDouble(){final CollatingIterator<Integer> iter=new CollatingIterator<Integer>(comparator);iter.addIterator(evens.iterator());iter.addIterator(odds.iterator());int expectedSize=evens.size()+ odds.size();while (iter.hasNext()){final Object o=iter.next();final Integer val=(Integer)o;if (val.intValue()% 4 == 0 || val.intValue()% 3 == 0){expectedSize--;iter.remove();}}assertEquals(expectedSize,evens.size()+ odds.size());}
public void testNullComparator(){final List<Integer> l1=Arrays.asList(1,3,5);final List<Integer> l2=Arrays.asList(2,4,6);final CollatingIterator<Integer> collatingIterator1=new CollatingIterator<Integer>(null,l1.iterator(),l2.iterator());try {collatingIterator1.next();}catch(final NullPointerException e){assertTrue(e.getMessage().startsWith("You must invoke setComparator"));}int i=0;final CollatingIterator<Integer> collatingIterator2=new CollatingIterator<Integer>(null,l1.iterator(),l2.iterator());collatingIterator2.setComparator(new ComparableComparator<Integer>());for (;collatingIterator2.hasNext();i++){final Integer n=collatingIterator2.next();assertEquals("wrong order",(int)n,i + 1);}assertEquals("wrong size",i,l1.size()+ l2.size());}
public void testCtors(){try {new LRUMap<K,V>(0);fail("maxSize must be positive");}catch(IllegalArgumentException ex){}try {new LRUMap<K,V>(-1,12,0.75f,false);fail("maxSize must be positive");}catch(IllegalArgumentException ex){}try {new LRUMap<K,V>(10,-1);fail("initialSize must not be negative");}catch(IllegalArgumentException ex){}try {new LRUMap<K,V>(10,12);fail("initialSize must not be larger than maxSize");}catch(IllegalArgumentException ex){}try {new LRUMap<K,V>(10,-1,0.75f,false);fail("initialSize must not be negative");}catch(IllegalArgumentException ex){}try {new LRUMap<K,V>(10,12,0.75f,false);fail("initialSize must not be larger than maxSize");}catch(IllegalArgumentException ex){}}
public void testLRU(){if (!isPutAddSupported()|| !isPutChangeSupported()){return;}final K[]keys=getSampleKeys();final V[]values=getSampleValues();Iterator<K> kit;Iterator<V> vit;final LRUMap<K,V> map=new LRUMap<K,V>(2);assertEquals(0,map.size());assertEquals(false,map.isFull());assertEquals(2,map.maxSize());map.put(keys[0],values[0]);assertEquals(1,map.size());assertEquals(false,map.isFull());assertEquals(2,map.maxSize());map.put(keys[1],values[1]);assertEquals(2,map.size());assertEquals(true,map.isFull());assertEquals(2,map.maxSize());kit=map.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=map.values().iterator();assertSame(values[0],vit.next());assertSame(values[1],vit.next());map.put(keys[2],values[2]);assertEquals(2,map.size());assertEquals(true,map.isFull());assertEquals(2,map.maxSize());kit=map.keySet().iterator();assertSame(keys[1],kit.next());assertSame(keys[2],kit.next());vit=map.values().iterator();assertSame(values[1],vit.next());assertSame(values[2],vit.next());map.put(keys[2],values[0]);assertEquals(2,map.size());assertEquals(true,map.isFull());assertEquals(2,map.maxSize());kit=map.keySet().iterator();assertSame(keys[1],kit.next());assertSame(keys[2],kit.next());vit=map.values().iterator();assertSame(values[1],vit.next());assertSame(values[0],vit.next());map.put(keys[1],values[3]);assertEquals(2,map.size());assertEquals(true,map.isFull());assertEquals(2,map.maxSize());kit=map.keySet().iterator();assertSame(keys[2],kit.next());assertSame(keys[1],kit.next());vit=map.values().iterator();assertSame(values[0],vit.next());assertSame(values[3],vit.next());}
@SuppressWarnings("unchecked")public void testReset(){resetEmpty();OrderedMap<K,V> ordered=getMap();((ResettableIterator<K>)ordered.mapIterator()).reset();resetFull();ordered=getMap();final List<K> list=new ArrayList<K>(ordered.keySet());final ResettableIterator<K> it=(ResettableIterator<K>)ordered.mapIterator();assertSame(list.get(0),it.next());assertSame(list.get(1),it.next());it.reset();assertSame(list.get(0),it.next());}
public void testAccessOrder(){if (!isPutAddSupported()|| !isPutChangeSupported()){return;}final K[]keys=getSampleKeys();final V[]values=getSampleValues();Iterator<K> kit=null;Iterator<V> vit=null;resetEmpty();map.put(keys[0],values[0]);map.put(keys[1],values[1]);kit=map.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=map.values().iterator();assertSame(values[0],vit.next());assertSame(values[1],vit.next());map.put(keys[1],values[1]);kit=map.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=map.values().iterator();assertSame(values[0],vit.next());assertSame(values[1],vit.next());map.put(keys[1],values[2]);kit=map.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=map.values().iterator();assertSame(values[0],vit.next());assertSame(values[2],vit.next());map.put(keys[0],values[3]);kit=map.keySet().iterator();assertSame(keys[1],kit.next());assertSame(keys[0],kit.next());vit=map.values().iterator();assertSame(values[2],vit.next());assertSame(values[3],vit.next());map.get(keys[1]);kit=map.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=map.values().iterator();assertSame(values[3],vit.next());assertSame(values[2],vit.next());map.get(keys[0]);kit=map.keySet().iterator();assertSame(keys[1],kit.next());assertSame(keys[0],kit.next());vit=map.values().iterator();assertSame(values[2],vit.next());assertSame(values[3],vit.next());map.get(keys[0]);kit=map.keySet().iterator();assertSame(keys[1],kit.next());assertSame(keys[0],kit.next());vit=map.values().iterator();assertSame(values[2],vit.next());assertSame(values[3],vit.next());}
public void testAccessOrder2(){if (!isPutAddSupported()|| !isPutChangeSupported()){return;}final K[]keys=getSampleKeys();final V[]values=getSampleValues();Iterator<K> kit=null;Iterator<V> vit=null;resetEmpty();LRUMap<K,V> lruMap=(LRUMap<K,V>)map;lruMap.put(keys[0],values[0]);lruMap.put(keys[1],values[1]);kit=lruMap.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=lruMap.values().iterator();assertSame(values[0],vit.next());assertSame(values[1],vit.next());lruMap.put(keys[1],values[1]);kit=lruMap.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=lruMap.values().iterator();assertSame(values[0],vit.next());assertSame(values[1],vit.next());lruMap.get(keys[1],false);kit=lruMap.keySet().iterator();assertSame(keys[0],kit.next());assertSame(keys[1],kit.next());vit=lruMap.values().iterator();assertSame(values[0],vit.next());assertSame(values[1],vit.next());lruMap.get(keys[0],true);kit=lruMap.keySet().iterator();assertSame(keys[1],kit.next());assertSame(keys[0],kit.next());vit=lruMap.values().iterator();assertSame(values[1],vit.next());assertSame(values[0],vit.next());}
@SuppressWarnings("unchecked")public void testClone(){final LRUMap<K,V> map=new LRUMap<K,V>(10);map.put((K)"1",(V)"1");final Map<K,V> cloned=map.clone();assertEquals(map.size(),cloned.size());assertSame(map.get("1"),cloned.get("1"));}
@SuppressWarnings("unchecked")public void testRemoveLRU(){final MockLRUMapSubclass<K,String> map=new MockLRUMapSubclass<K,String>(2);assertNull(map.entry);map.put((K)"A","a");assertNull(map.entry);map.put((K)"B","b");assertNull(map.entry);map.put((K)"C","c");assertNotNull(map.entry);assertEquals("A",map.key);assertEquals("a",map.value);assertEquals("C",map.entry.getKey());assertEquals("c",map.entry.getValue());assertEquals(false,map.containsKey("A"));assertEquals(true,map.containsKey("B"));assertEquals(true,map.containsKey("C"));}
@SuppressWarnings("unchecked")public void testRemoveLRUBlocksRemove(){final MockLRUMapSubclassBlocksRemove<K,V> map=new MockLRUMapSubclassBlocksRemove<K,V>(2,false);assertEquals(0,map.size());map.put((K)"A",(V)"a");assertEquals(1,map.size());map.put((K)"B",(V)"b");assertEquals(2,map.size());map.put((K)"C",(V)"c");assertEquals(3,map.size());assertEquals(2,map.maxSize());assertEquals(true,map.containsKey("A"));assertEquals(true,map.containsKey("B"));assertEquals(true,map.containsKey("C"));}
@SuppressWarnings("unchecked")public void testRemoveLRUBlocksRemoveScan(){final MockLRUMapSubclassBlocksRemove<K,V> map=new MockLRUMapSubclassBlocksRemove<K,V>(2,true);assertEquals(0,map.size());map.put((K)"A",(V)"a");assertEquals(1,map.size());map.put((K)"B",(V)"b");assertEquals(2,map.size());map.put((K)"C",(V)"c");assertEquals(3,map.size());assertEquals(2,map.maxSize());assertEquals(true,map.containsKey("A"));assertEquals(true,map.containsKey("B"));assertEquals(true,map.containsKey("C"));}
@SuppressWarnings("unchecked")public void testRemoveLRUFirstBlocksRemove(){final MockLRUMapSubclassFirstBlocksRemove<K,V> map=new MockLRUMapSubclassFirstBlocksRemove<K,V>(2);assertEquals(0,map.size());map.put((K)"A",(V)"a");assertEquals(1,map.size());map.put((K)"B",(V)"b");assertEquals(2,map.size());map.put((K)"C",(V)"c");assertEquals(2,map.size());assertEquals(2,map.maxSize());assertEquals(true,map.containsKey("A"));assertEquals(false,map.containsKey("B"));assertEquals(true,map.containsKey("C"));}
@SuppressWarnings("unchecked")public void testInternalState_Buckets(){if (!isPutAddSupported()|| !isPutChangeSupported()){return;}final SingleHashCode one=new SingleHashCode("1");final SingleHashCode two=new SingleHashCode("2");final SingleHashCode three=new SingleHashCode("3");final SingleHashCode four=new SingleHashCode("4");final SingleHashCode five=new SingleHashCode("5");final SingleHashCode six=new SingleHashCode("6");final LRUMap<K,V> map=new LRUMap<K,V>(3,1.0f);final int hashIndex=map.hashIndex(map.hash(one),4);map.put((K)one,(V)"A");map.put((K)two,(V)"B");map.put((K)three,(V)"C");assertEquals(4,map.data.length);assertEquals(3,map.size);assertEquals(null,map.header.next);assertEquals(one,map.header.after.key);assertEquals(two,map.header.after.after.key);assertEquals(three,map.header.after.after.after.key);assertEquals(three,map.data[hashIndex].key);assertEquals(two,map.data[hashIndex].next.key);assertEquals(one,map.data[hashIndex].next.next.key);map.put((K)four,(V)"D");assertEquals(4,map.data.length);assertEquals(3,map.size);assertEquals(null,map.header.next);assertEquals(two,map.header.after.key);assertEquals(three,map.header.after.after.key);assertEquals(four,map.header.after.after.after.key);assertEquals(four,map.data[hashIndex].key);assertEquals(three,map.data[hashIndex].next.key);assertEquals(two,map.data[hashIndex].next.next.key);map.get(three);assertEquals(4,map.data.length);assertEquals(3,map.size);assertEquals(null,map.header.next);assertEquals(two,map.header.after.key);assertEquals(four,map.header.after.after.key);assertEquals(three,map.header.after.after.after.key);assertEquals(four,map.data[hashIndex].key);assertEquals(three,map.data[hashIndex].next.key);assertEquals(two,map.data[hashIndex].next.next.key);map.put((K)five,(V)"E");assertEquals(4,map.data.length);assertEquals(3,map.size);assertEquals(null,map.header.next);assertEquals(four,map.header.after.key);assertEquals(three,map.header.after.after.key);assertEquals(five,map.header.after.after.after.key);assertEquals(five,map.data[hashIndex].key);assertEquals(four,map.data[hashIndex].next.key);assertEquals(three,map.data[hashIndex].next.next.key);map.get(three);map.get(five);assertEquals(4,map.data.length);assertEquals(3,map.size);assertEquals(null,map.header.next);assertEquals(four,map.header.after.key);assertEquals(three,map.header.after.after.key);assertEquals(five,map.header.after.after.after.key);assertEquals(five,map.data[hashIndex].key);assertEquals(four,map.data[hashIndex].next.key);assertEquals(three,map.data[hashIndex].next.next.key);map.put((K)six,(V)"F");assertEquals(4,map.data.length);assertEquals(3,map.size);assertEquals(null,map.header.next);assertEquals(three,map.header.after.key);assertEquals(five,map.header.after.after.key);assertEquals(six,map.header.after.after.after.key);assertEquals(six,map.data[hashIndex].key);assertEquals(five,map.data[hashIndex].next.key);assertEquals(three,map.data[hashIndex].next.next.key);}
@SuppressWarnings("unchecked")public void testInternalState_getEntry_int(){if (!isPutAddSupported()|| !isPutChangeSupported()){return;}final SingleHashCode one=new SingleHashCode("1");final SingleHashCode two=new SingleHashCode("2");final SingleHashCode three=new SingleHashCode("3");final LRUMap<K,V> map=new LRUMap<K,V>(3,1.0f);map.put((K)one,(V)"A");map.put((K)two,(V)"B");map.put((K)three,(V)"C");assertEquals(one,map.getEntry(0).key);assertEquals(two,map.getEntry(1).key);assertEquals(three,map.getEntry(2).key);try {map.getEntry(-1);fail();}catch(final IndexOutOfBoundsException ex){}try {map.getEntry(3);fail();}catch(final IndexOutOfBoundsException ex){}}
public void testSynchronizedRemoveFromMapIterator()throws InterruptedException {final LRUMap<Object,Thread> map=new LRUMap<Object,Thread>(10000);final Map<Throwable,String> exceptions=new HashMap<Throwable,String>();final ThreadGroup tg=new ThreadGroup(getName()){@Override public void uncaughtException(final Thread t,final Throwable e){exceptions.put(e,t.getName());super.uncaughtException(t,e);}};final int[]counter=new int[1];counter[0]=0;final Thread[]threads=new Thread[50];for (int i=0;i < threads.length;++i){threads[i]=new Thread(tg,"JUnit Thread " + i){@Override public void run(){int i=0;try {synchronized (this){notifyAll();wait();}final Thread thread=Thread.currentThread();while (i < 1000 && !interrupted()){synchronized (map){map.put(thread.getName()+ "[" + ++i+ "]",thread);}}synchronized (map){for (final MapIterator<Object,Thread> iter=map.mapIterator();iter.hasNext();){iter.next();if (iter.getValue()== this){iter.remove();}}}}catch(final InterruptedException e){fail("Unexpected InterruptedException");}if (i > 0){synchronized (counter){counter[0]++;}}}};}for(final Thread thread : threads){synchronized (thread){thread.start();thread.wait();}}for(final Thread thread : threads){synchronized (thread){thread.notifyAll();}}Thread.sleep(1000);for(final Thread thread : threads){thread.interrupt();}for(final Thread thread : threads){synchronized (thread){thread.join();}}assertEquals("Exceptions have been thrown: " + exceptions,0,exceptions.size());assertTrue("Each thread should have put at least 1 element into the map,but only " + counter[0]+ " did succeed",counter[0]>= threads.length);}
public void testSynchronizedRemoveFromEntrySet()throws InterruptedException {final Map<Object,Thread> map=new LRUMap<Object,Thread>(10000);final Map<Throwable,String> exceptions=new HashMap<Throwable,String>();final ThreadGroup tg=new ThreadGroup(getName()){@Override public void uncaughtException(final Thread t,final Throwable e){exceptions.put(e,t.getName());super.uncaughtException(t,e);}};final int[]counter=new int[1];counter[0]=0;final Thread[]threads=new Thread[50];for (int i=0;i < threads.length;++i){threads[i]=new Thread(tg,"JUnit Thread " + i){@Override public void run(){int i=0;try {synchronized (this){notifyAll();wait();}final Thread thread=Thread.currentThread();while (i < 1000 && !interrupted()){synchronized (map){map.put(thread.getName()+ "[" + ++i+ "]",thread);}}synchronized (map){for (final Iterator<Map.Entry<Object,Thread>> iter=map.entrySet().iterator();iter.hasNext();){final Map.Entry<Object,Thread> entry=iter.next();if (entry.getValue()== this){iter.remove();}}}}catch(final InterruptedException e){fail("Unexpected InterruptedException");}if (i > 0){synchronized (counter){counter[0]++;}}}};}for(final Thread thread : threads){synchronized (thread){thread.start();thread.wait();}}for(final Thread thread : threads){synchronized (thread){thread.notifyAll();}}Thread.sleep(1000);for(final Thread thread : threads){thread.interrupt();}for(final Thread thread : threads){synchronized (thread){thread.join();}}assertEquals("Exceptions have been thrown: " + exceptions,0,exceptions.size());assertTrue("Each thread should have put at least 1 element into the map,but only " + counter[0]+ " did succeed",counter[0]>= threads.length);}
public void testSynchronizedRemoveFromKeySet()throws InterruptedException {final Map<Object,Thread> map=new LRUMap<Object,Thread>(10000);final Map<Throwable,String> exceptions=new HashMap<Throwable,String>();final ThreadGroup tg=new ThreadGroup(getName()){@Override public void uncaughtException(final Thread t,final Throwable e){exceptions.put(e,t.getName());super.uncaughtException(t,e);}};final int[]counter=new int[1];counter[0]=0;final Thread[]threads=new Thread[50];for (int i=0;i < threads.length;++i){threads[i]=new Thread(tg,"JUnit Thread " + i){@Override public void run(){int i=0;try {synchronized (this){notifyAll();wait();}final Thread thread=Thread.currentThread();while (i < 1000 && !interrupted()){synchronized (map){map.put(thread.getName()+ "[" + ++i+ "]",thread);}}synchronized (map){for (final Iterator<Object> iter=map.keySet().iterator();iter.hasNext();){final String name=(String)iter.next();if (name.substring(0,name.indexOf('[')).equals(getName())){iter.remove();}}}}catch(final InterruptedException e){fail("Unexpected InterruptedException");}if (i > 0){synchronized (counter){counter[0]++;}}}};}for(final Thread thread : threads){synchronized (thread){thread.start();thread.wait();}}for(final Thread thread : threads){synchronized (thread){thread.notifyAll();}}Thread.sleep(1000);for(final Thread thread : threads){thread.interrupt();}for(final Thread thread : threads){synchronized (thread){thread.join();}}assertEquals("Exceptions have been thrown: " + exceptions,0,exceptions.size());assertTrue("Each thread should have put at least 1 element into the map,but only " + counter[0]+ " did succeed",counter[0]>= threads.length);}
public void testSynchronizedRemoveFromValues()throws InterruptedException {final Map<Object,Thread> map=new LRUMap<Object,Thread>(10000);final Map<Throwable,String> exceptions=new HashMap<Throwable,String>();final ThreadGroup tg=new ThreadGroup(getName()){@Override public void uncaughtException(final Thread t,final Throwable e){exceptions.put(e,t.getName());super.uncaughtException(t,e);}};final int[]counter=new int[1];counter[0]=0;final Thread[]threads=new Thread[50];for (int i=0;i < threads.length;++i){threads[i]=new Thread(tg,"JUnit Thread " + i){@Override public void run(){int i=0;try {synchronized (this){notifyAll();wait();}final Thread thread=Thread.currentThread();while (i < 1000 && !interrupted()){synchronized (map){map.put(thread.getName()+ "[" + ++i+ "]",thread);}}synchronized (map){for (final Iterator<Thread> iter=map.values().iterator();iter.hasNext();){if (iter.next()== this){iter.remove();}}}}catch(final InterruptedException e){fail("Unexpected InterruptedException");}if (i > 0){synchronized (counter){counter[0]++;}}}};}for(final Thread thread : threads){synchronized (thread){thread.start();thread.wait();}}for(final Thread thread : threads){synchronized (thread){thread.notifyAll();}}Thread.sleep(1000);for(final Thread thread : threads){thread.interrupt();}for(final Thread thread : threads){synchronized (thread){thread.join();}}assertEquals("Exceptions have been thrown: " + exceptions,0,exceptions.size());assertTrue("Each thread should have put at least 1 element into the map,but only " + counter[0]+ " did succeed",counter[0]>= threads.length);}
@SuppressWarnings("unchecked")public void testAddMultiple(){final List<E> l=makeObject();l.add((E)"hugo");l.add((E)"erna");l.add((E)"daniel");l.add((E)"andres");l.add((E)"harald");l.add(0,null);assertEquals(null,l.get(0));assertEquals("hugo",l.get(1));assertEquals("erna",l.get(2));assertEquals("daniel",l.get(3));assertEquals("andres",l.get(4));assertEquals("harald",l.get(5));}
@SuppressWarnings("unchecked")public void testRemove(){final List<E> l=makeObject();l.add((E)"hugo");l.add((E)"erna");l.add((E)"daniel");l.add((E)"andres");l.add((E)"harald");l.add(0,null);int i=0;assertEquals(null,l.get(i++));assertEquals("hugo",l.get(i++));assertEquals("erna",l.get(i++));assertEquals("daniel",l.get(i++));assertEquals("andres",l.get(i++));assertEquals("harald",l.get(i++));l.remove(0);i=0;assertEquals("hugo",l.get(i++));assertEquals("erna",l.get(i++));assertEquals("daniel",l.get(i++));assertEquals("andres",l.get(i++));assertEquals("harald",l.get(i++));i=0;l.remove(1);assertEquals("hugo",l.get(i++));assertEquals("daniel",l.get(i++));assertEquals("andres",l.get(i++));assertEquals("harald",l.get(i++));i=0;l.remove(2);assertEquals("hugo",l.get(i++));assertEquals("daniel",l.get(i++));assertEquals("harald",l.get(i++));}
@SuppressWarnings("unchecked")public void testInsertBefore(){final List<E> l=makeObject();l.add((E)"erna");l.add(0,(E)"hugo");assertEquals("hugo",l.get(0));assertEquals("erna",l.get(1));}
@SuppressWarnings("unchecked")public void testIndexOf(){final List<E> l=makeObject();l.add((E)"0");l.add((E)"1");l.add((E)"2");l.add((E)"3");l.add((E)"4");l.add((E)"5");l.add((E)"6");assertEquals(0,l.indexOf("0"));assertEquals(1,l.indexOf("1"));assertEquals(2,l.indexOf("2"));assertEquals(3,l.indexOf("3"));assertEquals(4,l.indexOf("4"));assertEquals(5,l.indexOf("5"));assertEquals(6,l.indexOf("6"));l.set(1,(E)"0");assertEquals(0,l.indexOf("0"));l.set(3,(E)"3");assertEquals(3,l.indexOf("3"));l.set(2,(E)"3");assertEquals(2,l.indexOf("3"));l.set(1,(E)"3");assertEquals(1,l.indexOf("3"));l.set(0,(E)"3");assertEquals(0,l.indexOf("3"));}
public void testBug35258(){final Object objectToRemove=Integer.valueOf(3);final List<Integer> treelist=new TreeList<Integer>();treelist.add(Integer.valueOf(0));treelist.add(Integer.valueOf(1));treelist.add(Integer.valueOf(2));treelist.add(Integer.valueOf(3));treelist.add(Integer.valueOf(4));treelist.remove(objectToRemove);final ListIterator<Integer> li=treelist.listIterator();assertEquals(Integer.valueOf(0),li.next());assertEquals(Integer.valueOf(0),li.previous());assertEquals(Integer.valueOf(0),li.next());assertEquals(Integer.valueOf(1),li.next());assertEquals(Integer.valueOf(1),li.previous());assertEquals(Integer.valueOf(1),li.next());assertEquals(Integer.valueOf(2),li.next());assertEquals(Integer.valueOf(2),li.previous());assertEquals(Integer.valueOf(2),li.next());assertEquals(Integer.valueOf(4),li.next());assertEquals(Integer.valueOf(4),li.previous());assertEquals(Integer.valueOf(4),li.next());assertEquals(false,li.hasNext());}
public void testBugCollections447(){final List<String> treeList=new TreeList<String>();treeList.add("A");treeList.add("B");treeList.add("C");treeList.add("D");final ListIterator<String> li=treeList.listIterator();assertEquals("A",li.next());assertEquals("B",li.next());assertEquals("B",li.previous());li.remove();assertEquals("A",li.previous());}
@SuppressWarnings("boxing")public void testIterationOrder(){for (int size=1;size < 1000;size++){List<Integer> other=new ArrayList<Integer>(size);for (int i=0;i < size;i++){other.add(i);}TreeList<Integer> l=new TreeList<Integer>(other);ListIterator<Integer> it=l.listIterator();int i=0;while (it.hasNext()){Integer val=it.next();assertEquals(i++,val.intValue());}while (it.hasPrevious()){Integer val=it.previous();assertEquals(--i,val.intValue());}}}
@SuppressWarnings("boxing")public void testIterationOrderAfterAddAll(){int size=1000;for (int i=0;i < 100;i++){List<Integer> other=new ArrayList<Integer>(size);for (int j=i;j < size;j++){other.add(j);}TreeList<Integer> l=new TreeList<Integer>();for (int j=0;j < i;j++){l.add(j);}l.addAll(other);ListIterator<Integer> it=l.listIterator();int cnt=0;while (it.hasNext()){Integer val=it.next();assertEquals(cnt++,val.intValue());}while (it.hasPrevious()){Integer val=it.previous();assertEquals(--cnt,val.intValue());}}}
/** * Subclasses should override this method.*/@Override @SuppressWarnings("unchecked")public void testConstructors(){Map.Entry<K,V> entry=new UnmodifiableMapEntry<K,V>((K)key,(V)value);assertSame(key,entry.getKey());assertSame(value,entry.getValue());final KeyValue<K,V> pair=new DefaultKeyValue<K,V>((K)key,(V)value);entry=new UnmodifiableMapEntry<K,V>(pair);assertSame(key,entry.getKey());assertSame(value,entry.getValue());final Map.Entry<K,V> entry2=new UnmodifiableMapEntry<K,V>(entry);assertSame(key,entry2.getKey());assertSame(value,entry2.getValue());assertTrue(entry instanceof Unmodifiable);}
@Override @SuppressWarnings("unchecked")public void testAccessorsAndMutators(){Map.Entry<K,V> entry=makeMapEntry((K)key,(V)value);assertSame(key,entry.getKey());assertSame(value,entry.getValue());entry=makeMapEntry(null,null);assertSame(null,entry.getKey());assertSame(null,entry.getValue());}
@Override public void testSelfReferenceHandling(){}
public void testUnmodifiable(){final Map.Entry<K,V> entry=makeMapEntry();try {entry.setValue(null);fail();}catch(final UnsupportedOperationException ex){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final SortedBidiMap<K,V> map=makeFullMap();assertSame(map,UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(map));try {UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(null);fail();}catch(final NullPointerException ex){}}
@SuppressWarnings("unchecked")public void testEquals1(){final Flat3Map<K,V> map1=makeObject();map1.put((K)"a",(V)"testA");map1.put((K)"b",(V)"testB");final Flat3Map<K,V> map2=makeObject();map2.put((K)"a",(V)"testB");map2.put((K)"b",(V)"testA");assertEquals(false,map1.equals(map2));}
@SuppressWarnings("unchecked")public void testEquals2(){final Flat3Map<K,V> map1=makeObject();map1.put((K)"a",(V)"testA");map1.put((K)"b",(V)"testB");final Flat3Map<K,V> map2=makeObject();map2.put((K)"a",(V)"testB");map2.put((K)"c",(V)"testA");assertEquals(false,map1.equals(map2));}
@SuppressWarnings("unchecked")public void testClone2(){final Flat3Map<K,V> map=makeObject();assertEquals(0,map.size());map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);assertEquals(2,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertSame(TEN,map.get(ONE));assertSame(TWENTY,map.get(TWO));final Flat3Map<K,V> cloned=map.clone();assertEquals(2,cloned.size());assertEquals(true,cloned.containsKey(ONE));assertEquals(true,cloned.containsKey(TWO));assertSame(TEN,cloned.get(ONE));assertSame(TWENTY,cloned.get(TWO));map.put((K)TEN,(V)ONE);map.put((K)TWENTY,(V)TWO);assertEquals(4,map.size());assertEquals(2,cloned.size());assertEquals(true,cloned.containsKey(ONE));assertEquals(true,cloned.containsKey(TWO));assertSame(TEN,cloned.get(ONE));assertSame(TWENTY,cloned.get(TWO));}
@SuppressWarnings("unchecked")public void testClone4(){final Flat3Map<K,V> map=makeObject();assertEquals(0,map.size());map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)TEN,(V)ONE);map.put((K)TWENTY,(V)TWO);final Flat3Map<K,V> cloned=map.clone();assertEquals(4,map.size());assertEquals(4,cloned.size());assertEquals(true,cloned.containsKey(ONE));assertEquals(true,cloned.containsKey(TWO));assertEquals(true,cloned.containsKey(TEN));assertEquals(true,cloned.containsKey(TWENTY));assertSame(TEN,cloned.get(ONE));assertSame(TWENTY,cloned.get(TWO));assertSame(ONE,cloned.get(TEN));assertSame(TWO,cloned.get(TWENTY));map.clear();assertEquals(0,map.size());assertEquals(4,cloned.size());assertEquals(true,cloned.containsKey(ONE));assertEquals(true,cloned.containsKey(TWO));assertEquals(true,cloned.containsKey(TEN));assertEquals(true,cloned.containsKey(TWENTY));assertSame(TEN,cloned.get(ONE));assertSame(TWENTY,cloned.get(TWO));assertSame(ONE,cloned.get(TEN));assertSame(TWO,cloned.get(TWENTY));}
public void testSerialisation0()throws Exception {final Flat3Map<K,V> map=makeObject();final ByteArrayOutputStream bout=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(bout);out.writeObject(map);final byte[]bytes=bout.toByteArray();out.close();final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);final ObjectInputStream in=new ObjectInputStream(bin);final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();in.close();assertEquals(0,map.size());assertEquals(0,ser.size());}
@SuppressWarnings("unchecked")public void testSerialisation2()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);final ByteArrayOutputStream bout=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(bout);out.writeObject(map);final byte[]bytes=bout.toByteArray();out.close();final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);final ObjectInputStream in=new ObjectInputStream(bin);final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();in.close();assertEquals(2,map.size());assertEquals(2,ser.size());assertEquals(true,ser.containsKey(ONE));assertEquals(true,ser.containsKey(TWO));assertEquals(TEN,ser.get(ONE));assertEquals(TWENTY,ser.get(TWO));}
@SuppressWarnings("unchecked")public void testSerialisation4()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)TEN,(V)ONE);map.put((K)TWENTY,(V)TWO);final ByteArrayOutputStream bout=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(bout);out.writeObject(map);final byte[]bytes=bout.toByteArray();out.close();final ByteArrayInputStream bin=new ByteArrayInputStream(bytes);final ObjectInputStream in=new ObjectInputStream(bin);final Flat3Map<?,?> ser=(Flat3Map<?,?>)in.readObject();in.close();assertEquals(4,map.size());assertEquals(4,ser.size());assertEquals(true,ser.containsKey(ONE));assertEquals(true,ser.containsKey(TWO));assertEquals(true,ser.containsKey(TEN));assertEquals(true,ser.containsKey(TWENTY));assertEquals(TEN,ser.get(ONE));assertEquals(TWENTY,ser.get(TWO));assertEquals(ONE,ser.get(TEN));assertEquals(TWO,ser.get(TWENTY));}
@SuppressWarnings("unchecked")public void testEntryIteratorSetValue1()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)THREE,(V)THIRTY);final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();final Map.Entry<K,V> entry=it.next();entry.setValue((V)"NewValue");assertEquals(3,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertEquals(true,map.containsKey(THREE));assertEquals("NewValue",map.get(ONE));assertEquals(TWENTY,map.get(TWO));assertEquals(THIRTY,map.get(THREE));}
@SuppressWarnings("unchecked")public void testEntryIteratorSetValue2()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)THREE,(V)THIRTY);final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();it.next();final Map.Entry<K,V> entry=it.next();entry.setValue((V)"NewValue");assertEquals(3,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertEquals(true,map.containsKey(THREE));assertEquals(TEN,map.get(ONE));assertEquals("NewValue",map.get(TWO));assertEquals(THIRTY,map.get(THREE));}
@SuppressWarnings("unchecked")public void testEntryIteratorSetValue3()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)THREE,(V)THIRTY);final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();it.next();it.next();final Map.Entry<K,V> entry=it.next();entry.setValue((V)"NewValue");assertEquals(3,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertEquals(true,map.containsKey(THREE));assertEquals(TEN,map.get(ONE));assertEquals(TWENTY,map.get(TWO));assertEquals("NewValue",map.get(THREE));}
@SuppressWarnings("unchecked")public void testMapIteratorSetValue1()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)THREE,(V)THIRTY);final MapIterator<K,V> it=map.mapIterator();it.next();it.setValue((V)"NewValue");assertEquals(3,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertEquals(true,map.containsKey(THREE));assertEquals("NewValue",map.get(ONE));assertEquals(TWENTY,map.get(TWO));assertEquals(THIRTY,map.get(THREE));}
@SuppressWarnings("unchecked")public void testMapIteratorSetValue2()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)THREE,(V)THIRTY);final MapIterator<K,V> it=map.mapIterator();it.next();it.next();it.setValue((V)"NewValue");assertEquals(3,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertEquals(true,map.containsKey(THREE));assertEquals(TEN,map.get(ONE));assertEquals("NewValue",map.get(TWO));assertEquals(THIRTY,map.get(THREE));}
@SuppressWarnings("unchecked")public void testMapIteratorSetValue3()throws Exception {final Flat3Map<K,V> map=makeObject();map.put((K)ONE,(V)TEN);map.put((K)TWO,(V)TWENTY);map.put((K)THREE,(V)THIRTY);final MapIterator<K,V> it=map.mapIterator();it.next();it.next();it.next();it.setValue((V)"NewValue");assertEquals(3,map.size());assertEquals(true,map.containsKey(ONE));assertEquals(true,map.containsKey(TWO));assertEquals(true,map.containsKey(THREE));assertEquals(TEN,map.get(ONE));assertEquals(TWENTY,map.get(TWO));assertEquals("NewValue",map.get(THREE));}
public void testCollections261(){final Flat3Map<Integer,Integer> m=new Flat3Map<Integer,Integer>();m.put(Integer.valueOf(1),Integer.valueOf(1));m.put(Integer.valueOf(0),Integer.valueOf(0));assertEquals(Integer.valueOf(1),m.remove(Integer.valueOf(1)));assertEquals(Integer.valueOf(0),m.remove(Integer.valueOf(0)));m.put(Integer.valueOf(2),Integer.valueOf(2));m.put(Integer.valueOf(1),Integer.valueOf(1));m.put(Integer.valueOf(0),Integer.valueOf(0));assertEquals(Integer.valueOf(2),m.remove(Integer.valueOf(2)));assertEquals(Integer.valueOf(1),m.remove(Integer.valueOf(1)));assertEquals(Integer.valueOf(0),m.remove(Integer.valueOf(0)));}
public void testToString(){final Flat3Map<Integer,Integer> m=new Flat3Map<Integer,Integer>();final String string0=m.toString();assertNotNull(string0);m.put(Integer.valueOf(1),Integer.valueOf(1));final String string1=m.toString();assertNotNull(string1);assertNotSame(string0,string1);m.put(Integer.valueOf(0),Integer.valueOf(0));final String string2=m.toString();assertNotNull(string2);assertNotSame(string0,string2);assertNotSame(string1,string2);m.put(Integer.valueOf(2),Integer.valueOf(2));final String string3=m.toString();assertNotNull(string3);assertNotSame(string0,string3);assertNotSame(string1,string3);assertNotSame(string2,string3);}
public void testGrowthAdd(){final Integer one=Integer.valueOf(1);final GrowthList<Integer> grower=new GrowthList<Integer>();assertEquals(0,grower.size());grower.add(1,one);assertEquals(2,grower.size());assertEquals(null,grower.get(0));assertEquals(one,grower.get(1));}
public void testGrowthAddAll(){final Integer one=Integer.valueOf(1);final Integer two=Integer.valueOf(2);final Collection<Integer> coll=new ArrayList<Integer>();coll.add(one);coll.add(two);final GrowthList<Integer> grower=new GrowthList<Integer>();assertEquals(0,grower.size());grower.addAll(1,coll);assertEquals(3,grower.size());assertEquals(null,grower.get(0));assertEquals(one,grower.get(1));assertEquals(two,grower.get(2));}
public void testGrowthSet1(){final Integer one=Integer.valueOf(1);final GrowthList<Integer> grower=new GrowthList<Integer>();assertEquals(0,grower.size());grower.set(1,one);assertEquals(2,grower.size());assertEquals(null,grower.get(0));assertEquals(one,grower.get(1));}
public void testGrowthSet2(){final Integer one=Integer.valueOf(1);final GrowthList<Integer> grower=new GrowthList<Integer>();assertEquals(0,grower.size());grower.set(0,one);assertEquals(1,grower.size());assertEquals(one,grower.get(0));}
/** * Override.*/@Override public void testListAddByIndexBoundsChecking(){List<E> list;final E element=getOtherElements()[0];try {list=makeObject();list.add(-1,element);fail("List.add should throw IndexOutOfBoundsException [-1]");}catch(final IndexOutOfBoundsException e){}}
/** * Override.*/@Override public void testListAddByIndexBoundsChecking2(){List<E> list;final E element=getOtherElements()[0];try {list=makeFullCollection();list.add(-1,element);fail("List.add should throw IndexOutOfBoundsException [-1]");}catch(final IndexOutOfBoundsException e){}}
/** * Override.*/@Override public void testListSetByIndexBoundsChecking(){final List<E> list=makeObject();final E element=getOtherElements()[0];try {list.set(-1,element);fail("List.set should throw IndexOutOfBoundsException [-1]");}catch(final IndexOutOfBoundsException e){}}
/** * Override.*/@Override public void testListSetByIndexBoundsChecking2(){final List<E> list=makeFullCollection();final E element=getOtherElements()[0];try {list.set(-1,element);fail("List.set should throw IndexOutOfBoundsException [-1]");}catch(final IndexOutOfBoundsException e){}}
/** * Verify that base list and sublists are not modifiable*/public void testUnmodifiable(){setupList();verifyUnmodifiable(list);verifyUnmodifiable(list.subList(0,2));}
public void testDecorateFactory(){final List<E> list=makeObject();assertSame(list,UnmodifiableList.unmodifiableList(list));try {UnmodifiableList.unmodifiableList(null);fail();}catch(final NullPointerException ex){}}
/** * Verify that iterator is not modifiable*/public void testUnmodifiableIterator(){setupList();final Iterator<E> iterator=list.iterator();try {iterator.next();iterator.remove();fail("Expecting UnsupportedOperationException.");}catch(final UnsupportedOperationException e){}}
public void testIterator(){final Iterator<E> iter=makeObject();assertTrue("Iterator has a first item",iter.hasNext());final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testReset(){final ResettableIterator<E> it=makeObject();assertEquals(true,it.hasNext());assertEquals(testValue,it.next());assertEquals(false,it.hasNext());it.reset();assertEquals(true,it.hasNext());assertEquals(testValue,it.next());assertEquals(false,it.hasNext());it.reset();it.reset();assertEquals(true,it.hasNext());}
@Test public void testPredicatedMap(){final Predicate<Object> p=getPredicate();Map<Object,Object> map=MapUtils.predicatedMap(new HashMap<Object,Object>(),p,p);assertTrue("returned object should be a PredicatedMap",map instanceof PredicatedMap);try {MapUtils.predicatedMap(null,p,p);fail("Expecting NullPointerException for null map.");}catch(final NullPointerException e){}}
@Test public void testLazyMapFactory(){final Factory<Integer> factory=FactoryUtils.constantFactory(Integer.valueOf(5));Map<Object,Object> map=MapUtils.lazyMap(new HashMap<Object,Object>(),factory);assertTrue(map instanceof LazyMap);try {map=MapUtils.lazyMap(new HashMap<Object,Object>(),(Factory<Object>)null);fail("Expecting NullPointerException for null factory");}catch(final NullPointerException e){}try {map=MapUtils.lazyMap((Map<Object,Object>)null,factory);fail("Expecting NullPointerException for null map");}catch(final NullPointerException e){}final Transformer<Object,Integer> transformer=TransformerUtils.asTransformer(factory);map=MapUtils.lazyMap(new HashMap<Object,Object>(),transformer);assertTrue(map instanceof LazyMap);try {map=MapUtils.lazyMap(new HashMap<Object,Object>(),(Transformer<Object,Object>)null);fail("Expecting NullPointerException for null transformer");}catch(final NullPointerException e){}try {map=MapUtils.lazyMap((Map<Object,Object>)null,transformer);fail("Expecting NullPointerException for null map");}catch(final NullPointerException e){}}
@Test public void testLazyMapTransformer(){final Map<Object,Object> map=MapUtils.lazyMap(new HashMap<Object,Object>(),new Transformer<Object,Object>(){@Override public Object transform(final Object mapKey){if (mapKey instanceof String){return Integer.valueOf((String)mapKey);}return null;}});assertEquals(0,map.size());final Integer i1=(Integer)map.get("5");assertEquals(Integer.valueOf(5),i1);assertEquals(1,map.size());final Integer i2=(Integer)map.get(new String(new char[]{'5'}));assertEquals(Integer.valueOf(5),i2);assertEquals(1,map.size());assertSame(i1,i2);}
@Test public void testInvertMap(){final Map<String,String> in=new HashMap<String,String>(5,1);in.put("1","A");in.put("2","B");in.put("3","C");in.put("4","D");in.put("5","E");final Set<String> inKeySet=new HashSet<String>(in.keySet());final Set<String> inValSet=new HashSet<String>(in.values());final Map<String,String> out=MapUtils.invertMap(in);final Set<String> outKeySet=new HashSet<String>(out.keySet());final Set<String> outValSet=new HashSet<String>(out.values());assertTrue(inKeySet.equals(outValSet));assertTrue(inValSet.equals(outKeySet));assertEquals("1",out.get("A"));assertEquals("2",out.get("B"));assertEquals("3",out.get("C"));assertEquals("4",out.get("D"));assertEquals("5",out.get("E"));}
@Test public void testPutAll_Map_array(){try {MapUtils.putAll(null,null);fail();}catch(final NullPointerException ex){}try {MapUtils.putAll(null,new Object[0]);fail();}catch(final NullPointerException ex){}Map<String,String> test=MapUtils.putAll(new HashMap<String,String>(),new String[0]);assertEquals(0,test.size());test=MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},{"GREEN","#00FF00"},{"BLUE","#0000FF"}});assertEquals(true,test.containsKey("RED"));assertEquals("#FF0000",test.get("RED"));assertEquals(true,test.containsKey("GREEN"));assertEquals("#00FF00",test.get("GREEN"));assertEquals(true,test.containsKey("BLUE"));assertEquals("#0000FF",test.get("BLUE"));assertEquals(3,test.size());try {MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},null,{"BLUE","#0000FF"}});fail();}catch(final IllegalArgumentException ex){}try {MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},{"GREEN"},{"BLUE","#0000FF"}});fail();}catch(final IllegalArgumentException ex){}try {MapUtils.putAll(new HashMap<String,String>(),new String[][]{{"RED","#FF0000"},{},{"BLUE","#0000FF"}});fail();}catch(final IllegalArgumentException ex){}test=MapUtils.putAll(new HashMap<String,String>(),new String[]{"RED","#FF0000","GREEN","#00FF00","BLUE","#0000FF"});assertEquals(true,test.containsKey("RED"));assertEquals("#FF0000",test.get("RED"));assertEquals(true,test.containsKey("GREEN"));assertEquals("#00FF00",test.get("GREEN"));assertEquals(true,test.containsKey("BLUE"));assertEquals("#0000FF",test.get("BLUE"));assertEquals(3,test.size());test=MapUtils.putAll(new HashMap<String,String>(),new String[]{"RED","#FF0000","GREEN","#00FF00","BLUE","#0000FF","PURPLE"});assertEquals(true,test.containsKey("RED"));assertEquals("#FF0000",test.get("RED"));assertEquals(true,test.containsKey("GREEN"));assertEquals("#00FF00",test.get("GREEN"));assertEquals(true,test.containsKey("BLUE"));assertEquals("#0000FF",test.get("BLUE"));assertEquals(3,test.size());test=MapUtils.putAll(new HashMap<String,String>(),new Object[]{new DefaultMapEntry<String,String>("RED","#FF0000"),new DefaultMapEntry<String,String>("GREEN","#00FF00"),new DefaultMapEntry<String,String>("BLUE","#0000FF")});assertEquals(true,test.containsKey("RED"));assertEquals("#FF0000",test.get("RED"));assertEquals(true,test.containsKey("GREEN"));assertEquals("#00FF00",test.get("GREEN"));assertEquals(true,test.containsKey("BLUE"));assertEquals("#0000FF",test.get("BLUE"));assertEquals(3,test.size());test=MapUtils.putAll(new HashMap<String,String>(),new Object[]{new DefaultKeyValue<String,String>("RED","#FF0000"),new DefaultKeyValue<String,String>("GREEN","#00FF00"),new DefaultKeyValue<String,String>("BLUE","#0000FF")});assertEquals(true,test.containsKey("RED"));assertEquals("#FF0000",test.get("RED"));assertEquals(true,test.containsKey("GREEN"));assertEquals("#00FF00",test.get("GREEN"));assertEquals(true,test.containsKey("BLUE"));assertEquals("#0000FF",test.get("BLUE"));assertEquals(3,test.size());}
@Test public void testConvertResourceBundle(){final Map<String,String> in=new HashMap<String,String>(5,1);in.put("1","A");in.put("2","B");in.put("3","C");in.put("4","D");in.put("5","E");final ResourceBundle b=new ListResourceBundle(){@Override public Object[][]getContents(){final Object[][]contents=new Object[in.size()][2];final Iterator<String> i=in.keySet().iterator();int n=0;while (i.hasNext()){final Object key=i.next();final Object val=in.get(key);contents[n][0]=key;contents[n][1]=val;++n;}return contents;}};final Map<String,Object> out=MapUtils.toMap(b);assertTrue(in.equals(out));}
@Test public void testDebugAndVerbosePrintCasting(){final Map<Integer,String> inner=new HashMap<Integer,String>(2,1);inner.put(2,"B");inner.put(3,"C");final Map<Integer,Object> outer=new HashMap<Integer,Object>(2,1);outer.put(0,inner);outer.put(1,"A");final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);try {MapUtils.debugPrint(outPrint,"Print Map",outer);}catch(final ClassCastException e){fail("No Casting should be occurring!");}}
@Test public void testDebugAndVerbosePrintNullMap(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String LABEL="Print Map";outPrint.println(LABEL + " = " + String.valueOf((Object)null));final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,LABEL,null);assertEquals(EXPECTED_OUT,out.toString());out.reset();MapUtils.verbosePrint(outPrint,LABEL,null);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintNullLabel(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Integer,String> map=new TreeMap<Integer,String>();map.put(2,"B");map.put(3,"C");map.put(4,null);outPrint.println("{");outPrint.println(INDENT + "2 = B");outPrint.println(INDENT + "3 = C");outPrint.println(INDENT + "4 = null");outPrint.println("}");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.verbosePrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testDebugPrintNullLabel(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Integer,String> map=new TreeMap<Integer,String>();map.put(2,"B");map.put(3,"C");map.put(4,null);outPrint.println("{");outPrint.println(INDENT + "2 = B " + String.class.getName());outPrint.println(INDENT + "3 = C " + String.class.getName());outPrint.println(INDENT + "4 = null");outPrint.println("}" + TreeMap.class.getName());final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintNullLabelAndMap(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);outPrint.println("null");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.verbosePrint(outPrint,null,null);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testDebugPrintNullLabelAndMap(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);outPrint.println("null");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,null,null);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintNullStream(){try {MapUtils.verbosePrint(null,"Map",new HashMap<Object,Object>());fail("Should generate NullPointerException");}catch(final NullPointerException expected){}}
@Test public void testDebugPrintNullStream(){try {MapUtils.debugPrint(null,"Map",new HashMap<Object,Object>());fail("Should generate NullPointerException");}catch(final NullPointerException expected){}}
@Test public void testDebugPrintNullKey(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Object,String> map=new HashMap<Object,String>();map.put(null,"A");outPrint.println("{");outPrint.println(INDENT + "null = A " + String.class.getName());outPrint.println("}" + HashMap.class.getName());final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintNullKey(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Object,String> map=new HashMap<Object,String>();map.put(null,"A");outPrint.println("{");outPrint.println(INDENT + "null = A");outPrint.println("}");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.verbosePrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testDebugPrintNullKeyToMap1(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Object,Map<?,?>> map=new HashMap<Object,Map<?,?>>();map.put(null,map);outPrint.println("{");outPrint.println(INDENT + "null = (this Map)" + HashMap.class.getName());outPrint.println("}" + HashMap.class.getName());final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintNullKeyToMap1(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Object,Map<?,?>> map=new HashMap<Object,Map<?,?>>();map.put(null,map);outPrint.println("{");outPrint.println(INDENT + "null = (this Map)");outPrint.println("}");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.verbosePrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testDebugPrintNullKeyToMap2(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Object,Object> map=new HashMap<Object,Object>();final Map<Object,Object> map2=new HashMap<Object,Object>();map.put(null,map2);map2.put("2","B");outPrint.println("{");outPrint.println(INDENT + "null = ");outPrint.println(INDENT + "{");outPrint.println(INDENT + INDENT + "2 = B "+ String.class.getName());outPrint.println(INDENT + "}" + HashMap.class.getName());outPrint.println("}" + HashMap.class.getName());final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintNullKeyToMap2(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String INDENT="    ";final Map<Object,Object> map=new HashMap<Object,Object>();final Map<Object,Object> map2=new HashMap<Object,Object>();map.put(null,map2);map2.put("2","B");outPrint.println("{");outPrint.println(INDENT + "null = ");outPrint.println(INDENT + "{");outPrint.println(INDENT + INDENT + "2 = B");outPrint.println(INDENT + "}");outPrint.println("}");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.verbosePrint(outPrint,null,map);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrint(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String LABEL="Print Map";final String INDENT="    ";outPrint.println(LABEL + " = ");outPrint.println("{");outPrint.println(INDENT + "0 = A");outPrint.println(INDENT + "1 = ");outPrint.println(INDENT + "{");outPrint.println(INDENT + INDENT + "2 = B");outPrint.println(INDENT + INDENT + "3 = C");outPrint.println(INDENT + "}");outPrint.println(INDENT + "7 = (this Map)");outPrint.println("}");final String EXPECTED_OUT=out.toString();out.reset();final Map<Integer,String> inner=new TreeMap<Integer,String>();inner.put(2,"B");inner.put(3,"C");final Map<Integer,Object> outer=new TreeMap<Integer,Object>();outer.put(1,inner);outer.put(0,"A");outer.put(7,outer);MapUtils.verbosePrint(outPrint,"Print Map",outer);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testDebugPrint(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String LABEL="Print Map";final String INDENT="    ";outPrint.println(LABEL + " = ");outPrint.println("{");outPrint.println(INDENT + "0 = A " + String.class.getName());outPrint.println(INDENT + "1 = ");outPrint.println(INDENT + "{");outPrint.println(INDENT + INDENT + "2 = B "+ String.class.getName());outPrint.println(INDENT + INDENT + "3 = C "+ String.class.getName());outPrint.println(INDENT + "}" + TreeMap.class.getName());outPrint.println(INDENT + "7 = (this Map)" + TreeMap.class.getName());outPrint.println("}" + TreeMap.class.getName());final String EXPECTED_OUT=out.toString();out.reset();final Map<Integer,String> inner=new TreeMap<Integer,String>();inner.put(2,"B");inner.put(3,"C");final Map<Integer,Object> outer=new TreeMap<Integer,Object>();outer.put(1,inner);outer.put(0,"A");outer.put(7,outer);MapUtils.debugPrint(outPrint,"Print Map",outer);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testVerbosePrintSelfReference(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String LABEL="Print Map";final String INDENT="    ";final Map<Integer,Object> grandfather=new TreeMap<Integer,Object>();final Map<Integer,Object> father=new TreeMap<Integer,Object>();final Map<Integer,Object> son=new TreeMap<Integer,Object>();grandfather.put(0,"A");grandfather.put(1,father);father.put(2,"B");father.put(3,grandfather);father.put(4,son);son.put(5,"C");son.put(6,grandfather);son.put(7,father);outPrint.println(LABEL + " = ");outPrint.println("{");outPrint.println(INDENT + "0 = A");outPrint.println(INDENT + "1 = ");outPrint.println(INDENT + "{");outPrint.println(INDENT + INDENT + "2 = B");outPrint.println(INDENT + INDENT + "3 = (ancestor[0]Map)");outPrint.println(INDENT + INDENT + "4 = ");outPrint.println(INDENT + INDENT + "{");outPrint.println(INDENT + INDENT + INDENT+ "5 = C");outPrint.println(INDENT + INDENT + INDENT+ "6 = (ancestor[1]Map)");outPrint.println(INDENT + INDENT + INDENT+ "7 = (ancestor[0]Map)");outPrint.println(INDENT + INDENT + "}");outPrint.println(INDENT + "}");outPrint.println("}");final String EXPECTED_OUT=out.toString();out.reset();MapUtils.verbosePrint(outPrint,"Print Map",grandfather);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testDebugPrintSelfReference(){final ByteArrayOutputStream out=new ByteArrayOutputStream();final PrintStream outPrint=new PrintStream(out);final String LABEL="Print Map";final String INDENT="    ";final Map<Integer,Object> grandfather=new TreeMap<Integer,Object>();final Map<Integer,Object> father=new TreeMap<Integer,Object>();final Map<Integer,Object> son=new TreeMap<Integer,Object>();grandfather.put(0,"A");grandfather.put(1,father);father.put(2,"B");father.put(3,grandfather);father.put(4,son);son.put(5,"C");son.put(6,grandfather);son.put(7,father);outPrint.println(LABEL + " = ");outPrint.println("{");outPrint.println(INDENT + "0 = A " + String.class.getName());outPrint.println(INDENT + "1 = ");outPrint.println(INDENT + "{");outPrint.println(INDENT + INDENT + "2 = B "+ String.class.getName());outPrint.println(INDENT + INDENT + "3 = (ancestor[0]Map)"+ TreeMap.class.getName());outPrint.println(INDENT + INDENT + "4 = ");outPrint.println(INDENT + INDENT + "{");outPrint.println(INDENT + INDENT + INDENT+ "5 = C "+ String.class.getName());outPrint.println(INDENT + INDENT + INDENT+ "6 = (ancestor[1]Map)"+ TreeMap.class.getName());outPrint.println(INDENT + INDENT + INDENT+ "7 = (ancestor[0]Map)"+ TreeMap.class.getName());outPrint.println(INDENT + INDENT + "}"+ TreeMap.class.getName());outPrint.println(INDENT + "}" + TreeMap.class.getName());outPrint.println("}" + TreeMap.class.getName());final String EXPECTED_OUT=out.toString();out.reset();MapUtils.debugPrint(outPrint,"Print Map",grandfather);assertEquals(EXPECTED_OUT,out.toString());}
@Test public void testEmptyIfNull(){assertTrue(MapUtils.emptyIfNull(null).isEmpty());final Map<Long,Long> map=new HashMap<Long,Long>();assertSame(map,MapUtils.emptyIfNull(map));}
@Test public void testIsEmptyWithEmptyMap(){final Map<Object,Object> map=new HashMap<Object,Object>();assertEquals(true,MapUtils.isEmpty(map));}
@Test public void testIsEmptyWithNonEmptyMap(){final Map<String,String> map=new HashMap<String,String>();map.put("item","value");assertEquals(false,MapUtils.isEmpty(map));}
@Test public void testIsEmptyWithNull(){final Map<Object,Object> map=null;assertEquals(true,MapUtils.isEmpty(map));}
@Test public void testIsNotEmptyWithEmptyMap(){final Map<Object,Object> map=new HashMap<Object,Object>();assertEquals(false,MapUtils.isNotEmpty(map));}
@Test public void testIsNotEmptyWithNonEmptyMap(){final Map<String,String> map=new HashMap<String,String>();map.put("item","value");assertEquals(true,MapUtils.isNotEmpty(map));}
@Test public void testIsNotEmptyWithNull(){final Map<Object,Object> map=null;assertEquals(false,MapUtils.isNotEmpty(map));}
@Test public void testPopulateMap(){final List<String> list=new ArrayList<String>();list.add("1");list.add("3");list.add("5");list.add("7");list.add("2");list.add("4");list.add("6");Map<Object,Object> map=new HashMap<Object,Object>();MapUtils.populateMap(map,list,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(),map.size());for (int i=0;i < list.size();i++){assertEquals(true,map.containsKey(Integer.valueOf(list.get(i))));assertEquals(false,map.containsKey(list.get(i)));assertEquals(true,map.containsValue(list.get(i)));assertEquals(list.get(i),map.get(Integer.valueOf(list.get(i))));}map=new HashMap<Object,Object>();MapUtils.populateMap(map,list,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(),map.size());for (int i=0;i < list.size();i++){assertEquals(true,map.containsKey(Integer.valueOf(list.get(i))));assertEquals(false,map.containsKey(list.get(i)));assertEquals(true,map.containsValue(Integer.valueOf(list.get(i))));assertEquals(Integer.valueOf(list.get(i)),map.get(Integer.valueOf(list.get(i))));}}
@Test public void testPopulateMultiMap(){final List<X> list=new ArrayList<X>();list.add(new X(1,"x1"));list.add(new X(2,"x2"));list.add(new X(2,"x3"));list.add(new X(5,"x4"));list.add(new X(5,"x5"));final MultiValueMap<Integer,X> map=MultiValueMap.multiValueMap(new TreeMap<Integer,Collection<X>>());MapUtils.populateMap(map,list,new Transformer<X,Integer>(){@Override public Integer transform(X input){return input.key;}},TransformerUtils.<X>nopTransformer());assertEquals(list.size(),map.totalSize());for (int i=0;i < list.size();i++){assertEquals(true,map.containsKey(list.get(i).key));assertEquals(true,map.containsValue(list.get(i)));}}
@Test public void testIterableMap(){try {MapUtils.iterableMap(null);fail("Should throw NullPointerException");}catch(final NullPointerException e){}final HashMap<String,String> map=new HashMap<String,String>();map.put("foo","foov");map.put("bar","barv");map.put("baz","bazv");final IterableMap<String,String> iMap=MapUtils.iterableMap(map);assertEquals(map,iMap);assertNotSame(map,iMap);final HashedMap<String,String> hMap=new HashedMap<String,String>(map);assertSame(hMap,MapUtils.iterableMap(hMap));}
@Test public void testIterableSortedMap(){try {MapUtils.iterableSortedMap(null);fail("Should throw NullPointerException");}catch(final NullPointerException e){}final TreeMap<String,String> map=new TreeMap<String,String>();map.put("foo","foov");map.put("bar","barv");map.put("baz","bazv");final IterableSortedMap<String,String> iMap=MapUtils.iterableSortedMap(map);assertEquals(map,iMap);assertNotSame(map,iMap);assertSame(iMap,MapUtils.iterableMap(iMap));}
@Test public void testSize0(){assertEquals(0,MapUtils.size(new HashMap<Object,Object>()));}
@Test public void testSizeNull(){assertEquals(0,MapUtils.size(null));}
@Test public void testSize(){final HashMap<Object,Object> map=new HashMap<Object,Object>();map.put("A","1");map.put("B","2");assertEquals(2,MapUtils.size(map));}
public void testIterator(){final ListIterator<E> iter=makeObject();for(final String testValue : testArray){final Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}for (int i=testArray.length - 1;i > -1;--i){final Object testValue=testArray[i];final E iterValue=iter.previous();assertEquals("Iteration value is correct",testValue,iterValue);}try {iter.previous();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}for(final String testValue : testArray){final Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}}
@Override public void testRemove(){final ListIterator<E> iter=makeObject();assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());try {iter.remove();fail("ListIteratorWrapper#remove()should fail;must be initially positioned first");}catch(final IllegalStateException e){}assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());int sz=list1.size();assertEquals(list1.get(0),iter.next());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());iter.remove();assertEquals(--sz,list1.size());assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());try {iter.remove();fail("ListIteratorWrapper#remove()should fail;must be repositioned first");}catch(final IllegalStateException e){}assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());assertEquals(list1.get(0),iter.next());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());assertEquals(list1.get(1),iter.next());assertEquals(1,iter.previousIndex());assertEquals(2,iter.nextIndex());assertEquals(list1.get(1),iter.previous());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());iter.remove();assertEquals(--sz,list1.size());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());assertEquals(list1.get(0),iter.previous());assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());try {iter.remove();fail("ListIteratorWrapper does not support the remove()method while dug into the cache via previous()");}catch(final IllegalStateException e){}assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());assertEquals(list1.get(0),iter.next());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());assertEquals(list1.get(1),iter.next());assertEquals(1,iter.previousIndex());assertEquals(2,iter.nextIndex());iter.remove();assertEquals(--sz,list1.size());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());assertEquals(list1.get(1),iter.next());assertEquals(1,iter.previousIndex());assertEquals(2,iter.nextIndex());}
public void testReset(){final ResettableListIterator<E> iter=makeObject();final E first=iter.next();final E second=iter.next();iter.reset();assertFalse("No previous elements after reset()",iter.hasPrevious());assertEquals("First element should be the same",first,iter.next());assertEquals("Second elment should be the same",second,iter.next());for (int i=2;i < testArray.length;i++){final Object testValue=testArray[i];final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final OrderedBidiMap<K,V> map=makeFullMap();assertSame(map,UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(map));try {UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(null);fail();}catch(final NullPointerException ex){}}
@Test public void forEach(){final List<Integer> listA=new ArrayList<Integer>();listA.add(1);final List<Integer> listB=new ArrayList<Integer>();listB.add(2);final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<List<Integer>> col=new ArrayList<List<Integer>>();col.add(listA);col.add(listB);IterableUtils.forEach(col,testClosure);assertTrue(listA.isEmpty()&& listB.isEmpty());try {IterableUtils.forEach(col,null);fail("expecting NullPointerException");}catch(NullPointerException npe){}IterableUtils.forEach(null,testClosure);col.add(null);IterableUtils.forEach(col,testClosure);}
@Test(expected=FunctorException.class)public void forEachFailure(){final Closure<String> testClosure=ClosureUtils.invokerClosure("clear");final Collection<String> col=new ArrayList<String>();col.add("x");IterableUtils.forEach(col,testClosure);}
@Test public void forEachButLast(){final List<Integer> listA=new ArrayList<Integer>();listA.add(1);final List<Integer> listB=new ArrayList<Integer>();listB.add(2);final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<List<Integer>> col=new ArrayList<List<Integer>>();col.add(listA);col.add(listB);List<Integer> last=IterableUtils.forEachButLast(col,testClosure);assertTrue(listA.isEmpty()&& !listB.isEmpty());assertSame(listB,last);try {IterableUtils.forEachButLast(col,null);fail("expecting NullPointerException");}catch(NullPointerException npe){}IterableUtils.forEachButLast(null,testClosure);col.add(null);col.add(null);last=IterableUtils.forEachButLast(col,testClosure);assertNull(last);}
@Test public void containsWithEquator(){final List<String> base=new ArrayList<String>();base.add("AC");base.add("BB");base.add("CA");final Equator<String> secondLetterEquator=new Equator<String>(){@Override public boolean equate(String o1,String o2){return o1.charAt(1)== o2.charAt(1);}@Override public int hash(String o){return o.charAt(1);}};assertFalse(base.contains("CC"));assertTrue(IterableUtils.contains(base,"AC",secondLetterEquator));assertTrue(IterableUtils.contains(base,"CC",secondLetterEquator));assertFalse(IterableUtils.contains(base,"CX",secondLetterEquator));assertFalse(IterableUtils.contains(null,null,secondLetterEquator));try {IterableUtils.contains(base,"AC",null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void frequency(){assertEquals(0,IterableUtils.frequency(null,1));assertEquals(1,IterableUtils.frequency(iterableA,1));assertEquals(2,IterableUtils.frequency(iterableA,2));assertEquals(3,IterableUtils.frequency(iterableA,3));assertEquals(4,IterableUtils.frequency(iterableA,4));assertEquals(0,IterableUtils.frequency(iterableA,5));assertEquals(0,IterableUtils.frequency(iterableB,1L));assertEquals(4,IterableUtils.frequency(iterableB,2L));assertEquals(3,IterableUtils.frequency(iterableB,3L));assertEquals(2,IterableUtils.frequency(iterableB,4L));assertEquals(1,IterableUtils.frequency(iterableB,5L));Iterable<Number> iterableIntAsNumber=Arrays.<Number>asList(1,2,3,4,5);Iterable<Number> iterableLongAsNumber=Arrays.<Number>asList(1L,2L,3L,4L,5L);assertEquals(0,IterableUtils.frequency(iterableIntAsNumber,2L));assertEquals(0,IterableUtils.frequency(iterableLongAsNumber,2));final Set<String> set=new HashSet<String>();set.add("A");set.add("C");set.add("E");set.add("E");assertEquals(1,IterableUtils.frequency(set,"A"));assertEquals(0,IterableUtils.frequency(set,"B"));assertEquals(1,IterableUtils.frequency(set,"C"));assertEquals(0,IterableUtils.frequency(set,"D"));assertEquals(1,IterableUtils.frequency(set,"E"));final Bag<String> bag=new HashBag<String>();bag.add("A",3);bag.add("C");bag.add("E");bag.add("E");assertEquals(3,IterableUtils.frequency(bag,"A"));assertEquals(0,IterableUtils.frequency(bag,"B"));assertEquals(1,IterableUtils.frequency(bag,"C"));assertEquals(0,IterableUtils.frequency(bag,"D"));assertEquals(2,IterableUtils.frequency(bag,"E"));}
@Test public void frequencyOfNull(){final List<String> list=new ArrayList<String>();assertEquals(0,IterableUtils.frequency(list,null));list.add("A");assertEquals(0,IterableUtils.frequency(list,null));list.add(null);assertEquals(1,IterableUtils.frequency(list,null));list.add("B");assertEquals(1,IterableUtils.frequency(list,null));list.add(null);assertEquals(2,IterableUtils.frequency(list,null));list.add("B");assertEquals(2,IterableUtils.frequency(list,null));list.add(null);assertEquals(3,IterableUtils.frequency(list,null));}
@Test public void find(){Predicate<Number> testPredicate=equalPredicate((Number)4);Integer test=IterableUtils.find(iterableA,testPredicate);assertTrue(test.equals(4));testPredicate=equalPredicate((Number)45);test=IterableUtils.find(iterableA,testPredicate);assertTrue(test == null);assertNull(IterableUtils.find(null,testPredicate));try {assertNull(IterableUtils.find(iterableA,null));fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void indexOf(){Predicate<Number> testPredicate=equalPredicate((Number)4);int index=IterableUtils.indexOf(iterableA,testPredicate);assertEquals(6,index);testPredicate=equalPredicate((Number)45);index=IterableUtils.indexOf(iterableA,testPredicate);assertEquals(-1,index);assertEquals(-1,IterableUtils.indexOf(null,testPredicate));try {assertNull(IterableUtils.indexOf(iterableA,null));fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void countMatches(){assertEquals(4,IterableUtils.countMatches(iterableB,EQUALS_TWO));assertEquals(0,IterableUtils.countMatches(null,EQUALS_TWO));try {assertEquals(0,IterableUtils.countMatches(iterableA,null));fail("predicate must not be null");}catch(NullPointerException ex){}try {assertEquals(0,IterableUtils.countMatches(null,null));fail("predicate must not be null");}catch(NullPointerException ex){}}
@Test public void matchesAny(){final List<Integer> list=new ArrayList<Integer>();try {assertFalse(IterableUtils.matchesAny(null,null));fail("predicate must not be null");}catch(NullPointerException ex){}try {assertFalse(IterableUtils.matchesAny(list,null));fail("predicate must not be null");}catch(NullPointerException ex){}assertFalse(IterableUtils.matchesAny(null,EQUALS_TWO));assertFalse(IterableUtils.matchesAny(list,EQUALS_TWO));list.add(1);list.add(3);list.add(4);assertFalse(IterableUtils.matchesAny(list,EQUALS_TWO));list.add(2);assertEquals(true,IterableUtils.matchesAny(list,EQUALS_TWO));}
@Test public void matchesAll(){try {assertFalse(IterableUtils.matchesAll(null,null));fail("predicate must not be null");}catch(NullPointerException ex){}try {assertFalse(IterableUtils.matchesAll(iterableA,null));fail("predicate must not be null");}catch(NullPointerException ex){}Predicate<Integer> lessThanFive=new Predicate<Integer>(){@Override public boolean evaluate(Integer object){return object < 5;}};assertTrue(IterableUtils.matchesAll(iterableA,lessThanFive));Predicate<Integer> lessThanFour=new Predicate<Integer>(){@Override public boolean evaluate(Integer object){return object < 4;}};assertFalse(IterableUtils.matchesAll(iterableA,lessThanFour));assertTrue(IterableUtils.matchesAll(null,lessThanFour));assertTrue(IterableUtils.matchesAll(emptyIterable,lessThanFour));}
@Test(expected=IndexOutOfBoundsException.class)public void getFromIterable()throws Exception {final Bag<String> bag=new HashBag<String>();bag.add("element",1);assertEquals("element",IterableUtils.get(bag,0));IterableUtils.get(bag,1);}
@SuppressWarnings("unchecked")@Test public void partition(){List<Integer> input=new ArrayList<Integer>();input.add(1);input.add(2);input.add(3);input.add(4);List<List<Integer>> partitions=IterableUtils.partition(input,EQUALS_TWO);assertEquals(2,partitions.size());Collection<Integer> partition=partitions.get(0);assertEquals(1,partition.size());assertEquals(2,CollectionUtils.extractSingleton(partition).intValue());Integer[]expected={1,3,4};partition=partitions.get(1);Assert.assertArrayEquals(expected,partition.toArray());partitions=IterableUtils.partition((List<Integer>)null,EQUALS_TWO);assertEquals(2,partitions.size());assertTrue(partitions.get(0).isEmpty());assertTrue(partitions.get(1).isEmpty());partitions=IterableUtils.partition(input);assertEquals(1,partitions.size());assertEquals(input,partitions.get(0));try {IterableUtils.partition(input,(Predicate<Integer>)null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@SuppressWarnings("unchecked")@Test public void partitionMultiplePredicates(){List<Integer> input=new ArrayList<Integer>();input.add(1);input.add(2);input.add(3);input.add(4);List<List<Integer>> partitions=IterableUtils.partition(input,EQUALS_TWO,EVEN);Collection<Integer> partition=partitions.get(0);assertEquals(1,partition.size());assertEquals(2,partition.iterator().next().intValue());partition=partitions.get(1);assertEquals(1,partition.size());assertEquals(4,partition.iterator().next().intValue());Integer[]expected={1,3};partition=partitions.get(2);Assert.assertArrayEquals(expected,partition.toArray());try {IterableUtils.partition(input,EQUALS_TWO,null);}catch(NullPointerException npe){}}
@Test public void testToString(){String result=IterableUtils.toString(iterableA);assertEquals("[1,2,2,3,3,3,4,4,4,4]",result);result=IterableUtils.toString(new ArrayList<Integer>());assertEquals("[]",result);result=IterableUtils.toString(null);assertEquals("[]",result);result=IterableUtils.toString(iterableA,new Transformer<Integer,String>(){@Override public String transform(Integer input){return new Integer(input * 2).toString();}});assertEquals("[2,4,4,6,6,6,8,8,8,8]",result);result=IterableUtils.toString(new ArrayList<Integer>(),new Transformer<Integer,String>(){@Override public String transform(Integer input){fail("not supposed to reach here");return "";}});assertEquals("[]",result);result=IterableUtils.toString(null,new Transformer<Integer,String>(){@Override public String transform(Integer input){fail("not supposed to reach here");return "";}});assertEquals("[]",result);}
@Test public void testToStringDelimiter(){Transformer<Integer,String> transformer=new Transformer<Integer,String>(){@Override public String transform(Integer input){return new Integer(input * 2).toString();}};String result=IterableUtils.toString(iterableA,transformer,"","","");assertEquals("2446668888",result);result=IterableUtils.toString(iterableA,transformer,",","","");assertEquals("2,4,4,6,6,6,8,8,8,8",result);result=IterableUtils.toString(iterableA,transformer,"","[","]");assertEquals("[2446668888]",result);result=IterableUtils.toString(iterableA,transformer,",","[","]");assertEquals("[2,4,4,6,6,6,8,8,8,8]",result);result=IterableUtils.toString(iterableA,transformer,",","[[","]]");assertEquals("[[2,4,4,6,6,6,8,8,8,8]]",result);result=IterableUtils.toString(iterableA,transformer,",,","[","]");assertEquals("[2,,4,,4,,6,,6,,6,,8,,8,,8,,8]",result);result=IterableUtils.toString(iterableA,transformer,",,","((","))");assertEquals("((2,,4,,4,,6,,6,,6,,8,,8,,8,,8))",result);result=IterableUtils.toString(new ArrayList<Integer>(),transformer,"","(",")");assertEquals("()",result);result=IterableUtils.toString(new ArrayList<Integer>(),transformer,"","","");assertEquals("",result);}
@Test public void testToStringWithNullArguments(){String result=IterableUtils.toString(null,new Transformer<Integer,String>(){@Override public String transform(Integer input){fail("not supposed to reach here");return "";}},"","(",")");assertEquals("()",result);try {IterableUtils.toString(new ArrayList<Integer>(),null,"","(",")");fail("expecting NullPointerException");}catch(final NullPointerException ex){}try {IterableUtils.toString(new ArrayList<Integer>(),new Transformer<Integer,String>(){@Override public String transform(Integer input){fail("not supposed to reach here");return "";}},null,"(",")");fail("expecting NullPointerException");}catch(final NullPointerException ex){}try {IterableUtils.toString(new ArrayList<Integer>(),new Transformer<Integer,String>(){@Override public String transform(Integer input){fail("not supposed to reach here");return "";}},"",null,")");fail("expecting NullPointerException");}catch(final NullPointerException ex){}try {IterableUtils.toString(new ArrayList<Integer>(),new Transformer<Integer,String>(){@Override public String transform(Integer input){fail("not supposed to reach here");return "";}},"","(",null);fail("expecting NullPointerException");}catch(final NullPointerException ex){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final SortedMap<K,V> map=makeFullMap();assertSame(map,UnmodifiableSortedMap.unmodifiableSortedMap(map));try {UnmodifiableSortedMap.unmodifiableSortedMap(null);fail();}catch(final NullPointerException ex){}}
/** * Compare the current serialized form of the Bag against the canonical version in SVN.*/public void testEmptyBagCompatibility()throws IOException,ClassNotFoundException {final Bag<T> bag=makeObject();if (bag instanceof Serializable && !skipSerializedCanonicalTests()&& isTestSerialization()){final Bag<?> bag2=(Bag<?>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));assertTrue("Bag is empty",bag2.size()== 0);assertEquals(bag,bag2);}}
/** * Compare the current serialized form of the Bag against the canonical version in SVN.*/public void testFullBagCompatibility()throws IOException,ClassNotFoundException {final SortedBag<T> bag=(SortedBag<T>)makeFullCollection();if (bag instanceof Serializable && !skipSerializedCanonicalTests()&& isTestSerialization()){final SortedBag<?> bag2=(SortedBag<?>)readExternalFormFromDisk(getCanonicalFullCollectionName(bag));assertEquals("Bag is the right size",bag.size(),bag2.size());assertEquals(bag,bag2);}}
/** * Tests constructor exception.*/public void testConstructorEx()throws Exception {try {new LoopingListIterator<Object>(null);fail();}catch(final NullPointerException ex){}}
/** * Tests whether an empty looping list iterator works.*/public void testLooping0()throws Exception {final List<Object> list=new ArrayList<Object>();final LoopingListIterator<Object> loop=new LoopingListIterator<Object>(list);assertFalse(loop.hasNext());assertFalse(loop.hasPrevious());try {loop.next();fail();}catch(final NoSuchElementException ex){}try {loop.previous();fail();}catch(final NoSuchElementException ex){}}
/** * Tests whether a looping list iterator works on a list with only one element.*/public void testLooping1()throws Exception {final List<String> list=Arrays.asList("a");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertTrue(loop.hasNext());assertEquals("a",loop.next());assertTrue(loop.hasNext());assertEquals("a",loop.next());assertTrue(loop.hasNext());assertEquals("a",loop.next());assertTrue(loop.hasPrevious());assertEquals("a",loop.previous());assertTrue(loop.hasPrevious());assertEquals("a",loop.previous());assertTrue(loop.hasPrevious());assertEquals("a",loop.previous());}
/** * Tests whether a looping list iterator works on a list with two elements.*/public void testLooping2()throws Exception {final List<String> list=Arrays.asList("a","b");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertTrue(loop.hasNext());assertEquals("a",loop.next());assertTrue(loop.hasNext());assertEquals("b",loop.next());assertTrue(loop.hasNext());assertEquals("a",loop.next());loop.reset();assertTrue(loop.hasPrevious());assertEquals("b",loop.previous());assertTrue(loop.hasPrevious());assertEquals("a",loop.previous());assertTrue(loop.hasPrevious());assertEquals("b",loop.previous());}
/** * Tests jogging back and forth between two elements,but not over the begin/end boundary of the list.*/public void testJoggingNotOverBoundary(){final List<String> list=Arrays.asList("a","b");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);loop.reset();assertEquals("a",loop.next());assertEquals("a",loop.previous());assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("b",loop.previous());assertEquals("b",loop.next());}
/** * Tests jogging back and forth between two elements over the begin/end boundary of the list.*/public void testJoggingOverBoundary(){final List<String> list=Arrays.asList("a","b");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertEquals("b",loop.previous());assertEquals("b",loop.next());assertEquals("b",loop.previous());assertEquals("a",loop.previous());assertEquals("a",loop.next());assertEquals("a",loop.previous());}
/** * Tests removing an element from a wrapped ArrayList.*/public void testRemovingElementsAndIteratingForward(){final List<String> list=new ArrayList<String>(Arrays.asList("a","b","c"));final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertTrue(loop.hasNext());assertEquals("a",loop.next());loop.remove();assertEquals(2,list.size());assertTrue(loop.hasNext());assertEquals("b",loop.next());loop.remove();assertEquals(1,list.size());assertTrue(loop.hasNext());assertEquals("c",loop.next());loop.remove();assertEquals(0,list.size());assertFalse(loop.hasNext());try {loop.next();fail();}catch(final NoSuchElementException ex){}}
/** * Tests removing an element from a wrapped ArrayList.*/public void testRemovingElementsAndIteratingBackwards(){final List<String> list=new ArrayList<String>(Arrays.asList("a","b","c"));final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertTrue(loop.hasPrevious());assertEquals("c",loop.previous());loop.remove();assertEquals(2,list.size());assertTrue(loop.hasPrevious());assertEquals("b",loop.previous());loop.remove();assertEquals(1,list.size());assertTrue(loop.hasPrevious());assertEquals("a",loop.previous());loop.remove();assertEquals(0,list.size());assertFalse(loop.hasPrevious());try {loop.previous();fail();}catch(final NoSuchElementException ex){}}
/** * Tests the reset method.*/public void testReset(){final List<String> list=Arrays.asList("a","b","c");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertEquals("a",loop.next());assertEquals("b",loop.next());loop.reset();assertEquals("a",loop.next());loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("c",loop.next());loop.reset();assertEquals("c",loop.previous());assertEquals("b",loop.previous());loop.reset();assertEquals("c",loop.previous());loop.reset();assertEquals("c",loop.previous());assertEquals("b",loop.previous());assertEquals("a",loop.previous());}
/** * Tests the add method.*/public void testAdd(){List<String> list=new ArrayList<String>(Arrays.asList("b","e","f"));LoopingListIterator<String> loop=new LoopingListIterator<String>(list);loop.add("a");assertEquals("b",loop.next());loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());loop.add("c");assertEquals("e",loop.next());assertEquals("e",loop.previous());assertEquals("c",loop.previous());assertEquals("c",loop.next());loop.add("d");loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("c",loop.next());assertEquals("d",loop.next());assertEquals("e",loop.next());assertEquals("f",loop.next());assertEquals("a",loop.next());list=new ArrayList<String>(Arrays.asList("b","e","f"));loop=new LoopingListIterator<String>(list);loop.add("a");assertEquals("a",loop.previous());loop.reset();assertEquals("f",loop.previous());assertEquals("e",loop.previous());loop.add("d");assertEquals("d",loop.previous());loop.add("c");assertEquals("c",loop.previous());loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("c",loop.next());assertEquals("d",loop.next());assertEquals("e",loop.next());assertEquals("f",loop.next());assertEquals("a",loop.next());}
/** * Tests nextIndex and previousIndex.*/public void testNextAndPreviousIndex(){final List<String> list=Arrays.asList("a","b","c");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertEquals(0,loop.nextIndex());assertEquals(2,loop.previousIndex());assertEquals("a",loop.next());assertEquals(1,loop.nextIndex());assertEquals(0,loop.previousIndex());assertEquals("a",loop.previous());assertEquals(0,loop.nextIndex());assertEquals(2,loop.previousIndex());assertEquals("c",loop.previous());assertEquals(2,loop.nextIndex());assertEquals(1,loop.previousIndex());assertEquals("b",loop.previous());assertEquals(1,loop.nextIndex());assertEquals(0,loop.previousIndex());assertEquals("a",loop.previous());assertEquals(0,loop.nextIndex());assertEquals(2,loop.previousIndex());}
/** * Tests using the set method to change elements.*/public void testSet(){final List<String> list=Arrays.asList("q","r","z");final LoopingListIterator<String> loop=new LoopingListIterator<String>(list);assertEquals("z",loop.previous());loop.set("c");loop.reset();assertEquals("q",loop.next());loop.set("a");assertEquals("r",loop.next());loop.set("b");loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("c",loop.next());}
public void testIterator(){final Iterator<E> iter=makeObject();for(final String testValue : testArray){final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testNullArray(){try {makeArrayIterator(null);fail("Constructor should throw a NullPointerException when constructed with a null array");}catch(final NullPointerException e){}}
@SuppressWarnings("unchecked")public void testReset(){final ObjectArrayIterator<E> it=makeArrayIterator((E[])testArray);it.next();it.reset();assertEquals("One",it.next());}
@Test public void testEmpty(){Iterator<E> it=makeEmptyIterator();assertFalse(it.hasNext());}
@Test @SuppressWarnings("unchecked")public void testSinglePeek(){PeekingIterator<E> it=makeObject();assertEquals("a",it.peek());assertEquals("a",it.element());validate(it,(E[])testArray);}
@Test public void testMultiplePeek(){PeekingIterator<E> it=makeObject();assertEquals("a",it.peek());assertEquals("a",it.peek());assertEquals("a",it.next());assertTrue(it.hasNext());assertEquals("b",it.peek());assertEquals("b",it.peek());assertEquals("b",it.next());assertTrue(it.hasNext());assertEquals("c",it.peek());assertEquals("c",it.peek());assertEquals("c",it.next());assertFalse(it.hasNext());}
@Test public void testIteratorExhausted(){PeekingIterator<E> it=makeObject();it.next();it.next();it.next();assertFalse(it.hasNext());assertNull(it.peek());try {it.element();fail();}catch(NoSuchElementException e){}}
@Test public void testIllegalRemove(){PeekingIterator<E> it=makeObject();it.next();it.remove();assertTrue(it.hasNext());assertEquals("b",it.peek());try {it.remove();fail();}catch(IllegalStateException e){}}
public void testComparator(){resetEmpty();final SortedBidiMap<K,V> bidi=(SortedBidiMap<K,V>)map;assertNotNull(bidi.comparator());assertTrue(bidi.comparator()instanceof ReverseComparator);}
public void testComparator2(){final DualTreeBidiMap<String,Integer> dtbm=new DualTreeBidiMap<String,Integer>(String.CASE_INSENSITIVE_ORDER,null);dtbm.put("two",0);dtbm.put("one",1);assertEquals("one",dtbm.firstKey());assertEquals("two",dtbm.lastKey());}
public void testSerializeDeserializeCheckComparator()throws Exception {final SortedBidiMap<?,?> obj=makeObject();if (obj instanceof Serializable && isTestSerialization()){final ByteArrayOutputStream buffer=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(buffer);out.writeObject(obj);out.close();final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));final Object dest=in.readObject();in.close();final SortedBidiMap<?,?> bidi=(SortedBidiMap<?,?>)dest;assertNotNull(obj.comparator());assertNotNull(bidi.comparator());assertTrue(bidi.comparator()instanceof ReverseComparator);}}
public void testCollections364()throws Exception {final DualTreeBidiMap<String,Integer> original=new DualTreeBidiMap<String,Integer>(String.CASE_INSENSITIVE_ORDER,new IntegerComparator());final ByteArrayOutputStream buffer=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(buffer);out.writeObject(original);out.close();final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));@SuppressWarnings("unchecked")final DualTreeBidiMap<String,Integer> deserialised=(DualTreeBidiMap<String,Integer>)in.readObject();in.close();assertNotNull(original.comparator());assertNotNull(deserialised.comparator());assertEquals(original.comparator().getClass(),deserialised.comparator().getClass());assertEquals(original.valueComparator().getClass(),deserialised.valueComparator().getClass());}
public void testSortOrder()throws Exception {final SortedBidiMap<K,V> sm=makeFullMap();List<K> newSortedKeys=getAsList(getSampleKeys());Collections.sort(newSortedKeys,new ReverseComparator<K>(ComparableComparator.<K>comparableComparator()));newSortedKeys=Collections.unmodifiableList(newSortedKeys);final Iterator<K> mapIter=sm.keySet().iterator();final Iterator<K> expectedIter=newSortedKeys.iterator();while (expectedIter.hasNext()){final K expectedKey=expectedIter.next();final K mapKey=mapIter.next();assertNotNull("key in sorted list may not be null",expectedKey);assertNotNull("key in map may not be null",mapKey);assertEquals("key from sorted list and map must be equal",expectedKey,mapKey);}}
@SuppressWarnings("unchecked")public void testNullHandling(){resetFull();assertEquals(null,map.get(null));assertEquals(false,map.containsKey(null));assertEquals(false,map.containsValue(null));assertEquals(null,map.remove(null));assertEquals(false,map.entrySet().contains(null));assertEquals(false,map.keySet().contains(null));assertEquals(false,map.values().contains(null));try {map.put(null,null);fail();}catch(final NullPointerException ex){}assertEquals(null,map.put(new MultiKey<K>(null,null),null));try {map.put(null,(V)new Object());fail();}catch(final NullPointerException ex){}}
public void testMultiKeyGet(){resetFull();final MultiKeyMap<K,V> multimap=getMap();final MultiKey<K>[]keys=getMultiKeyKeys();final V[]values=getSampleValues();for (int i=0;i < keys.length;i++){final MultiKey<K> key=keys[i];final V value=values[i];switch (key.size()){case 2:      assertEquals(value,multimap.get(key.getKey(0),key.getKey(1)));assertEquals(null,multimap.get(null,key.getKey(1)));assertEquals(null,multimap.get(key.getKey(0),null));assertEquals(null,multimap.get(null,null));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),null));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),null,null));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),null,null,null));break;case 3:assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(null,multimap.get(null,key.getKey(1),key.getKey(2)));assertEquals(null,multimap.get(key.getKey(0),null,key.getKey(2)));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),null));assertEquals(null,multimap.get(null,null,null));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null,null));break;case 4:assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(null,multimap.get(null,key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(null,multimap.get(key.getKey(0),null,key.getKey(2),key.getKey(3)));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),null,key.getKey(3)));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null));assertEquals(null,multimap.get(null,null,null,null));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));break;case 5:assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(null,multimap.get(null,key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(null,multimap.get(key.getKey(0),null,key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),null,key.getKey(3),key.getKey(4)));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),null,key.getKey(4)));assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));assertEquals(null,multimap.get(null,null,null,null,null));break;default:fail("Invalid key size");}}}
public void testMultiKeyContainsKey(){resetFull();final MultiKeyMap<K,V> multimap=getMap();final MultiKey<K>[]keys=getMultiKeyKeys();for(final MultiKey<K> key : keys){switch (key.size()){case 2:      assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1)));assertEquals(false,multimap.containsKey(null,key.getKey(1)));assertEquals(false,multimap.containsKey(key.getKey(0),null));assertEquals(false,multimap.containsKey(null,null));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),null));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),null,null));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),null,null,null));break;case 3:assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(false,multimap.containsKey(null,key.getKey(1),key.getKey(2)));assertEquals(false,multimap.containsKey(key.getKey(0),null,key.getKey(2)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),null));assertEquals(false,multimap.containsKey(null,null,null));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null,null));break;case 4:assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(false,multimap.containsKey(null,key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(false,multimap.containsKey(key.getKey(0),null,key.getKey(2),key.getKey(3)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),null,key.getKey(3)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null));assertEquals(false,multimap.containsKey(null,null,null,null));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));break;case 5:assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(false,multimap.containsKey(null,key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(false,multimap.containsKey(key.getKey(0),null,key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),null,key.getKey(3),key.getKey(4)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),null,key.getKey(4)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));assertEquals(false,multimap.containsKey(null,null,null,null,null));break;default:fail("Invalid key size");}}}
public void testMultiKeyPut(){final MultiKey<K>[]keys=getMultiKeyKeys();final V[]values=getSampleValues();for (int i=0;i < keys.length;i++){final MultiKeyMap<K,V> multimap=new MultiKeyMap<K,V>();final MultiKey<K> key=keys[i];final V value=values[i];switch (key.size()){case 2:      assertEquals(null,multimap.put(key.getKey(0),key.getKey(1),value));assertEquals(1,multimap.size());assertEquals(value,multimap.get(key.getKey(0),key.getKey(1)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1)));assertEquals(true,multimap.containsKey(new MultiKey<K>(key.getKey(0),key.getKey(1))));assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),null));assertEquals(1,multimap.size());assertEquals(null,multimap.get(key.getKey(0),key.getKey(1)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1)));break;case 3:assertEquals(null,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),value));assertEquals(1,multimap.size());assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(true,multimap.containsKey(new MultiKey<K>(key.getKey(0),key.getKey(1),key.getKey(2))));assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),null));assertEquals(1,multimap.size());assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));break;case 4:assertEquals(null,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),value));assertEquals(1,multimap.size());assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(true,multimap.containsKey(new MultiKey<K>(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3))));assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),null));assertEquals(1,multimap.size());assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));break;case 5:assertEquals(null,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4),value));assertEquals(1,multimap.size());assertEquals(value,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(true,multimap.containsKey(new MultiKey<K>(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4))));assertEquals(value,multimap.put(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4),null));assertEquals(1,multimap.size());assertEquals(null,multimap.get(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));break;default:fail("Invalid key size");}}}
public void testMultiKeyPutWithNullKey(){final MultiKeyMap<String,String> map=new MultiKeyMap<String,String>();map.put("a",null,"value1");map.put("b",null,"value2");map.put("c",null,"value3");map.put("a","z","value4");map.put("a",null,"value5");map.put(null,"a","value6");map.put(null,null,"value7");assertEquals(6,map.size());assertEquals("value5",map.get("a",null));assertEquals("value4",map.get("a","z"));assertEquals("value6",map.get(null,"a"));}
public void testMultiKeyRemove(){final MultiKey<K>[]keys=getMultiKeyKeys();final V[]values=getSampleValues();for (int i=0;i < keys.length;i++){resetFull();final MultiKeyMap<K,V> multimap=getMap();final int size=multimap.size();final MultiKey<K> key=keys[i];final V value=values[i];switch (key.size()){case 2:      assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1)));assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1)));assertEquals(size - 1,multimap.size());assertEquals(null,multimap.removeMultiKey(key.getKey(0),key.getKey(1)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1)));break;case 3:assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(size - 1,multimap.size());assertEquals(null,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2)));break;case 4:assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(size - 1,multimap.size());assertEquals(null,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3)));break;case 5:assertEquals(true,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(value,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(size - 1,multimap.size());assertEquals(null,multimap.removeMultiKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));assertEquals(false,multimap.containsKey(key.getKey(0),key.getKey(1),key.getKey(2),key.getKey(3),key.getKey(4)));break;default:fail("Invalid key size");}}}
public void testMultiKeyRemoveAll1(){resetFull();final MultiKeyMap<K,V> multimap=getMap();assertEquals(12,multimap.size());multimap.removeAll(I1);assertEquals(8,multimap.size());for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator();it.hasNext();){final MultiKey<? extends K> key=it.next();assertEquals(false,I1.equals(key.getKey(0)));}}
public void testMultiKeyRemoveAll2(){resetFull();final MultiKeyMap<K,V> multimap=getMap();assertEquals(12,multimap.size());multimap.removeAll(I2,I3);assertEquals(9,multimap.size());for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator();it.hasNext();){final MultiKey<? extends K> key=it.next();assertEquals(false,I2.equals(key.getKey(0))&& I3.equals(key.getKey(1)));}}
public void testMultiKeyRemoveAll3(){resetFull();final MultiKeyMap<K,V> multimap=getMap();assertEquals(12,multimap.size());multimap.removeAll(I1,I1,I2);assertEquals(9,multimap.size());for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator();it.hasNext();){final MultiKey<? extends K> key=it.next();assertEquals(false,I1.equals(key.getKey(0))&& I1.equals(key.getKey(1))&& I2.equals(key.getKey(2)));}}
public void testMultiKeyRemoveAll4(){resetFull();final MultiKeyMap<K,V> multimap=getMap();assertEquals(12,multimap.size());multimap.removeAll(I1,I1,I2,I3);assertEquals(10,multimap.size());for (final MapIterator<MultiKey<? extends K>,V> it=multimap.mapIterator();it.hasNext();){final MultiKey<? extends K> key=it.next();assertEquals(false,I1.equals(key.getKey(0))&& I1.equals(key.getKey(1))&& I2.equals(key.getKey(2))&& key.size()>= 4 && I3.equals(key.getKey(3)));}}
@SuppressWarnings("unchecked")public void testClone(){final MultiKeyMap<K,V> map=new MultiKeyMap<K,V>();map.put(new MultiKey<K>((K)I1,(K)I2),(V)"1-2");final Map<MultiKey<? extends K>,V> cloned=map.clone();assertEquals(map.size(),cloned.size());assertSame(map.get(new MultiKey<K>((K)I1,(K)I2)),cloned.get(new MultiKey<K>((K)I1,(K)I2)));}
@SuppressWarnings("unchecked")public void testLRUMultiKeyMap(){final MultiKeyMap<K,V> map=MultiKeyMap.multiKeyMap(new LRUMap<MultiKey<? extends K>,V>(2));map.put((K)I1,(K)I2,(V)"1-2");map.put((K)I1,(K)I3,(V)"1-1");assertEquals(2,map.size());map.put((K)I1,(K)I4,(V)"1-4");assertEquals(2,map.size());assertEquals(true,map.containsKey(I1,I3));assertEquals(true,map.containsKey(I1,I4));assertEquals(false,map.containsKey(I1,I2));final MultiKeyMap<K,V> cloned=map.clone();assertEquals(2,map.size());assertEquals(true,cloned.containsKey(I1,I3));assertEquals(true,cloned.containsKey(I1,I4));assertEquals(false,cloned.containsKey(I1,I2));cloned.put((K)I1,(K)I5,(V)"1-5");assertEquals(2,cloned.size());assertEquals(true,cloned.containsKey(I1,I4));assertEquals(true,cloned.containsKey(I1,I5));}
@SuppressWarnings("unchecked")public void testLegalAddRemove(){final MultiSet<T> multiset=makeTestMultiSet();assertEquals(0,multiset.size());final T[]els=(T[])new Object[]{"1","3","5","7","2","4","1"};for (int i=0;i < els.length;i++){multiset.add(els[i]);assertEquals(i + 1,multiset.size());assertEquals(true,multiset.contains(els[i]));}Set<T> set=((PredicatedMultiSet<T>)multiset).uniqueSet();assertTrue("Unique set contains the first element",set.contains(els[0]));assertEquals(true,multiset.remove(els[0]));set=((PredicatedMultiSet<T>)multiset).uniqueSet();assertTrue("Unique set does not contain anymore the first element",set.contains(els[0]));}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final MultiSet<T> multiset=makeTestMultiSet();final Integer i=Integer.valueOf(3);try {multiset.add((T)i);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!multiset.contains(i));}
@SuppressWarnings("unchecked")public void testIllegalDecorate(){final HashMultiSet<Object> elements=new HashMultiSet<Object>();elements.add("one");elements.add("two");elements.add(Integer.valueOf(3));elements.add("four");try {decorateMultiSet((HashMultiSet<T>)elements,stringPredicate());fail("MultiSet contains an element that should fail the predicate.");}catch(final IllegalArgumentException e){}try {decorateMultiSet(new HashMultiSet<T>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException e){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final OrderedMap<K,V> map=makeFullMap();assertSame(map,UnmodifiableOrderedMap.unmodifiableOrderedMap(map));try {UnmodifiableOrderedMap.unmodifiableOrderedMap(null);fail();}catch(final NullPointerException ex){}}
public void testDecorate(){final SortedBag<T> bag=decorateBag(new TreeBag<T>(),stringPredicate());((PredicatedSortedBag<T>)bag).decorated();try {decorateBag(new TreeBag<T>(),null);fail("Expecting NullPointerException for null predicate");}catch(final NullPointerException e){}try {decorateBag(nullBag,stringPredicate());fail("Expecting NullPointerException for null bag");}catch(final NullPointerException e){}}
@SuppressWarnings("unchecked")public void testSortOrder(){final SortedBag<T> bag=decorateBag(new TreeBag<T>(),stringPredicate());final String one="one";final String two="two";final String three="three";bag.add((T)one);bag.add((T)two);bag.add((T)three);assertEquals("first element",bag.first(),one);assertEquals("last element",bag.last(),two);final Comparator<? super T> c=bag.comparator();assertTrue("natural order,so comparator should be null",c == null);}
@Test @SuppressWarnings({"unchecked","rawtypes"})public void testEmptyUnmodifiableMultiValuedMap(){final MultiValuedMap map=MultiMapUtils.EMPTY_MULTI_VALUED_MAP;assertTrue(map.isEmpty());try {map.put("key","value");fail("Should throw UnsupportedOperationException");}catch(UnsupportedOperationException e){}}
@Test public void testTypeSafeEmptyMultiValuedMap(){final MultiValuedMap<String,String> map=MultiMapUtils.<String,String>emptyMultiValuedMap();assertTrue(map.isEmpty());try {map.put("key","value");fail("Should throw UnsupportedOperationException");}catch(UnsupportedOperationException e){}}
@Test public void testEmptyIfNull(){assertTrue(MultiMapUtils.emptyIfNull(null).isEmpty());final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<String,String>();map.put("item","value");assertFalse(MultiMapUtils.emptyIfNull(map).isEmpty());}
@Test public void testIsEmptyWithEmptyMap(){final MultiValuedMap<Object,Object> map=new ArrayListValuedHashMap<Object,Object>();assertEquals(true,MultiMapUtils.isEmpty(map));}
@Test public void testIsEmptyWithNonEmptyMap(){final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<String,String>();map.put("item","value");assertEquals(false,MultiMapUtils.isEmpty(map));}
@Test public void testIsEmptyWithNull(){final MultiValuedMap<Object,Object> map=null;assertEquals(true,MultiMapUtils.isEmpty(map));}
@Test public void testGetCollection(){assertNull(MultiMapUtils.getCollection(null,"key1"));String values[]={"v1","v2","v3"};final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<String,String>();for(String val : values){map.put("key1",val);}Collection<String> col=MultiMapUtils.getCollection(map,"key1");for(String val : values){assertTrue(col.contains(val));}}
@Test public void testGetValuesAsList(){assertNull(MultiMapUtils.getValuesAsList(null,"key1"));String values[]={"v1","v2","v3"};final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<String,String>();for(String val : values){map.put("key1",val);}List<String> list=MultiMapUtils.getValuesAsList(map,"key1");int i=0;for(String val : list){assertTrue(val.equals(values[i++]));}}
@Test public void testGetValuesAsSet(){assertNull(MultiMapUtils.getValuesAsList(null,"key1"));String values[]={"v1","v2","v3"};final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<String,String>();for(String val : values){map.put("key1",val);map.put("key1",val);}Set<String> set=MultiMapUtils.getValuesAsSet(map,"key1");assertEquals(3,set.size());for(String val : values){assertTrue(set.contains(val));}}
@Test public void testGetValuesAsBag(){assertNull(MultiMapUtils.getValuesAsBag(null,"key1"));String values[]={"v1","v2","v3"};final MultiValuedMap<String,String> map=new ArrayListValuedHashMap<String,String>();for(String val : values){map.put("key1",val);map.put("key1",val);}Bag<String> bag=MultiMapUtils.getValuesAsBag(map,"key1");assertEquals(6,bag.size());for(String val : values){assertTrue(bag.contains(val));assertEquals(2,bag.getCount(val));}}
@Test public void testAsIterable(){final List<Integer> list=new ArrayList<Integer>();list.add(Integer.valueOf(0));list.add(Integer.valueOf(1));list.add(Integer.valueOf(2));final Iterator<Integer> iterator=list.iterator();final Iterable<Integer> iterable=IteratorUtils.asIterable(iterator);int expected=0;for(final Integer actual : iterable){assertEquals(expected,actual.intValue());++expected;}assertTrue(expected > 0);assertFalse("should not be able to iterate twice",IteratorUtils.asIterable(iterator).iterator().hasNext());}
@Test public void testAsIterableNull(){try {IteratorUtils.asIterable(null);fail("Expecting NullPointerException");}catch(final NullPointerException ex){}}
@Test public void testAsMultipleIterable(){final List<Integer> list=new ArrayList<Integer>();list.add(Integer.valueOf(0));list.add(Integer.valueOf(1));list.add(Integer.valueOf(2));final Iterator<Integer> iterator=list.iterator();final Iterable<Integer> iterable=IteratorUtils.asMultipleUseIterable(iterator);int expected=0;for(final Integer actual : iterable){assertEquals(expected,actual.intValue());++expected;}assertTrue(expected > 0);expected=0;for(final Integer actual : iterable){assertEquals(expected,actual.intValue());++expected;}assertTrue(expected > 0);}
@Test public void testAsMultipleIterableNull(){try {IteratorUtils.asMultipleUseIterable(null);fail("Expecting NullPointerException");}catch(final NullPointerException ex){}}
@Test public void testToList(){final List<Object> list=new ArrayList<Object>();list.add(Integer.valueOf(1));list.add("Two");list.add(null);final List<Object> result=IteratorUtils.toList(list.iterator());assertEquals(list,result);}
@Test public void testToArray(){final List<Object> list=new ArrayList<Object>();list.add(Integer.valueOf(1));list.add("Two");list.add(null);final Object[]result=IteratorUtils.toArray(list.iterator());assertEquals(list,Arrays.asList(result));}
@Test public void testToArray2(){final List<String> list=new ArrayList<String>();list.add("One");list.add("Two");list.add(null);final String[]result=IteratorUtils.toArray(list.iterator(),String.class);assertEquals(list,Arrays.asList(result));}
@Test public void testArrayIterator(){final Object[]objArray={"a","b","c"};ResettableIterator<Object> iterator=IteratorUtils.arrayIterator(objArray);assertTrue(iterator.next().equals("a"));assertTrue(iterator.next().equals("b"));iterator.reset();assertTrue(iterator.next().equals("a"));try {iterator=IteratorUtils.arrayIterator(Integer.valueOf(0));fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}try {iterator=IteratorUtils.arrayIterator((Object[])null);fail("Expecting NullPointerException");}catch(final NullPointerException ex){}iterator=IteratorUtils.arrayIterator(objArray,1);assertTrue(iterator.next().equals("b"));try {iterator=IteratorUtils.arrayIterator(objArray,-1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayIterator(objArray,3);assertTrue(!iterator.hasNext());iterator.reset();try {iterator=IteratorUtils.arrayIterator(objArray,4);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayIterator(objArray,2,3);assertTrue(iterator.next().equals("c"));try {iterator=IteratorUtils.arrayIterator(objArray,2,4);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayIterator(objArray,-1,1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayIterator(objArray,2,1);fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}final int[]intArray={0,1,2};iterator=IteratorUtils.arrayIterator(intArray);assertTrue(iterator.next().equals(Integer.valueOf(0)));assertTrue(iterator.next().equals(Integer.valueOf(1)));iterator.reset();assertTrue(iterator.next().equals(Integer.valueOf(0)));iterator=IteratorUtils.arrayIterator(intArray,1);assertTrue(iterator.next().equals(Integer.valueOf(1)));try {iterator=IteratorUtils.arrayIterator(intArray,-1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayIterator(intArray,3);assertTrue(!iterator.hasNext());iterator.reset();try {iterator=IteratorUtils.arrayIterator(intArray,4);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayIterator(intArray,2,3);assertTrue(iterator.next().equals(Integer.valueOf(2)));try {iterator=IteratorUtils.arrayIterator(intArray,2,4);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayIterator(intArray,-1,1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayIterator(intArray,2,1);fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}}
@Test public void testArrayListIterator(){final Object[]objArray={"a","b","c","d"};ResettableListIterator<Object> iterator=IteratorUtils.arrayListIterator(objArray);assertTrue(!iterator.hasPrevious());assertTrue(iterator.previousIndex()== -1);assertTrue(iterator.nextIndex()== 0);assertTrue(iterator.next().equals("a"));assertTrue(iterator.previous().equals("a"));assertTrue(iterator.next().equals("a"));assertTrue(iterator.previousIndex()== 0);assertTrue(iterator.nextIndex()== 1);assertTrue(iterator.next().equals("b"));assertTrue(iterator.next().equals("c"));assertTrue(iterator.next().equals("d"));assertTrue(iterator.nextIndex()== 4);assertTrue(iterator.previousIndex()== 3);try {iterator=IteratorUtils.arrayListIterator(Integer.valueOf(0));fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}try {iterator=IteratorUtils.arrayListIterator((Object[])null);fail("Expecting NullPointerException");}catch(final NullPointerException ex){}iterator=IteratorUtils.arrayListIterator(objArray,1);assertTrue(iterator.previousIndex()== -1);assertTrue(!iterator.hasPrevious());assertTrue(iterator.nextIndex()== 0);assertTrue(iterator.next().equals("b"));assertTrue(iterator.previousIndex()== 0);try {iterator=IteratorUtils.arrayListIterator(objArray,-1);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayListIterator(objArray,3);assertTrue(iterator.hasNext());try {iterator.previous();fail("Expecting NoSuchElementException.");}catch(final NoSuchElementException ex){}try {iterator=IteratorUtils.arrayListIterator(objArray,5);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayListIterator(objArray,2,3);assertTrue(iterator.next().equals("c"));try {iterator=IteratorUtils.arrayListIterator(objArray,2,5);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayListIterator(objArray,-1,1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayListIterator(objArray,2,1);fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}final int[]intArray={0,1,2};iterator=IteratorUtils.arrayListIterator(intArray);assertTrue(iterator.previousIndex()== -1);assertTrue(!iterator.hasPrevious());assertTrue(iterator.nextIndex()== 0);assertTrue(iterator.next().equals(Integer.valueOf(0)));assertTrue(iterator.previousIndex()== 0);assertTrue(iterator.nextIndex()== 1);assertTrue(iterator.next().equals(Integer.valueOf(1)));assertTrue(iterator.previousIndex()== 1);assertTrue(iterator.nextIndex()== 2);assertTrue(iterator.previous().equals(Integer.valueOf(1)));assertTrue(iterator.next().equals(Integer.valueOf(1)));iterator=IteratorUtils.arrayListIterator(intArray,1);assertTrue(iterator.previousIndex()== -1);assertTrue(!iterator.hasPrevious());assertTrue(iterator.nextIndex()== 0);assertTrue(iterator.next().equals(Integer.valueOf(1)));assertTrue(iterator.previous().equals(Integer.valueOf(1)));assertTrue(iterator.next().equals(Integer.valueOf(1)));assertTrue(iterator.previousIndex()== 0);assertTrue(iterator.nextIndex()== 1);assertTrue(iterator.next().equals(Integer.valueOf(2)));assertTrue(iterator.previousIndex()== 1);assertTrue(iterator.nextIndex()== 2);assertTrue(iterator.previous().equals(Integer.valueOf(2)));assertTrue(iterator.previousIndex()== 0);assertTrue(iterator.nextIndex()== 1);try {iterator=IteratorUtils.arrayListIterator(intArray,-1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayListIterator(intArray,3);assertTrue(!iterator.hasNext());try {iterator=IteratorUtils.arrayListIterator(intArray,4);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}iterator=IteratorUtils.arrayListIterator(intArray,2,3);assertTrue(!iterator.hasPrevious());assertTrue(iterator.previousIndex()== -1);assertTrue(iterator.next().equals(Integer.valueOf(2)));assertTrue(iterator.hasPrevious());assertTrue(!iterator.hasNext());try {iterator=IteratorUtils.arrayListIterator(intArray,2,4);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayListIterator(intArray,-1,1);fail("Expecting IndexOutOfBoundsException");}catch(final IndexOutOfBoundsException ex){}try {iterator=IteratorUtils.arrayListIterator(intArray,2,1);fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}}
/** * Test empty iterator*/@Test public void testEmptyIterator(){assertSame(EmptyIterator.INSTANCE,IteratorUtils.EMPTY_ITERATOR);assertSame(EmptyIterator.RESETTABLE_INSTANCE,IteratorUtils.EMPTY_ITERATOR);assertEquals(true,IteratorUtils.EMPTY_ITERATOR instanceof Iterator);assertEquals(true,IteratorUtils.EMPTY_ITERATOR instanceof ResettableIterator);assertEquals(false,IteratorUtils.EMPTY_ITERATOR instanceof OrderedIterator);assertEquals(false,IteratorUtils.EMPTY_ITERATOR instanceof ListIterator);assertEquals(false,IteratorUtils.EMPTY_ITERATOR instanceof MapIterator);assertEquals(false,IteratorUtils.EMPTY_ITERATOR.hasNext());IteratorUtils.EMPTY_ITERATOR.reset();assertSame(IteratorUtils.EMPTY_ITERATOR,IteratorUtils.EMPTY_ITERATOR);assertSame(IteratorUtils.EMPTY_ITERATOR,IteratorUtils.emptyIterator());try {IteratorUtils.EMPTY_ITERATOR.next();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_ITERATOR.remove();fail();}catch(final IllegalStateException ex){}}
/** * Test empty list iterator*/@Test public void testEmptyListIterator(){assertSame(EmptyListIterator.INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);assertSame(EmptyListIterator.RESETTABLE_INSTANCE,IteratorUtils.EMPTY_LIST_ITERATOR);assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);assertEquals(true,IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);assertEquals(false,IteratorUtils.EMPTY_LIST_ITERATOR instanceof MapIterator);assertEquals(false,IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());assertEquals(0,IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());assertEquals(-1,IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());IteratorUtils.EMPTY_LIST_ITERATOR.reset();assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.EMPTY_LIST_ITERATOR);assertSame(IteratorUtils.EMPTY_LIST_ITERATOR,IteratorUtils.emptyListIterator());try {IteratorUtils.EMPTY_LIST_ITERATOR.next();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_LIST_ITERATOR.previous();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_LIST_ITERATOR.remove();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.emptyListIterator().set(null);fail();}catch(final IllegalStateException ex){}try {IteratorUtils.emptyListIterator().add(null);fail();}catch(final UnsupportedOperationException ex){}}
/** * Test empty map iterator*/@Test @SuppressWarnings("unchecked")public void testEmptyMapIterator(){assertSame(EmptyMapIterator.INSTANCE,IteratorUtils.EMPTY_MAP_ITERATOR);assertEquals(true,IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);assertEquals(true,IteratorUtils.EMPTY_MAP_ITERATOR instanceof MapIterator);assertEquals(true,IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResettableIterator);assertEquals(false,IteratorUtils.EMPTY_MAP_ITERATOR instanceof ListIterator);assertEquals(false,IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedIterator);assertEquals(false,IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedMapIterator);assertEquals(false,IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());((ResettableIterator<Object>)IteratorUtils.EMPTY_MAP_ITERATOR).reset();assertSame(IteratorUtils.EMPTY_MAP_ITERATOR,IteratorUtils.EMPTY_MAP_ITERATOR);assertSame(IteratorUtils.EMPTY_MAP_ITERATOR,IteratorUtils.emptyMapIterator());try {IteratorUtils.EMPTY_MAP_ITERATOR.next();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_MAP_ITERATOR.remove();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.EMPTY_MAP_ITERATOR.getKey();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.EMPTY_MAP_ITERATOR.getValue();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.EMPTY_MAP_ITERATOR.setValue(null);fail();}catch(final IllegalStateException ex){}}
/** * Test empty map iterator*/@Test @SuppressWarnings("unchecked")public void testEmptyOrderedIterator(){assertSame(EmptyOrderedIterator.INSTANCE,IteratorUtils.EMPTY_ORDERED_ITERATOR);assertEquals(true,IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);assertEquals(true,IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);assertEquals(true,IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);assertEquals(false,IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ListIterator);assertEquals(false,IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof MapIterator);assertEquals(false,IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());assertEquals(false,IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());((ResettableIterator<Object>)IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR,IteratorUtils.EMPTY_ORDERED_ITERATOR);assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR,IteratorUtils.emptyOrderedIterator());try {IteratorUtils.EMPTY_ORDERED_ITERATOR.next();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_ORDERED_ITERATOR.previous();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_ORDERED_ITERATOR.remove();fail();}catch(final IllegalStateException ex){}}
/** * Test empty map iterator*/@Test @SuppressWarnings("unchecked")public void testEmptyOrderedMapIterator(){assertSame(EmptyOrderedMapIterator.INSTANCE,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);assertEquals(true,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);assertEquals(true,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);assertEquals(true,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);assertEquals(true,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);assertEquals(false,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ListIterator);assertEquals(false,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());assertEquals(false,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());((ResettableIterator<Object>)IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR,IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR,IteratorUtils.emptyOrderedMapIterator());try {IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.next();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.previous();fail();}catch(final NoSuchElementException ex){}try {IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.remove();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getKey();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getValue();fail();}catch(final IllegalStateException ex){}try {IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.setValue(null);fail();}catch(final IllegalStateException ex){}}
/** * Test next()and hasNext()for an immutable Iterator.*/@Test public void testUnmodifiableIteratorIteration(){final Iterator<String> iterator=getImmutableIterator();assertTrue(iterator.hasNext());assertEquals("a",iterator.next());assertTrue(iterator.hasNext());assertEquals("b",iterator.next());assertTrue(iterator.hasNext());assertEquals("c",iterator.next());assertTrue(iterator.hasNext());assertEquals("d",iterator.next());assertTrue(!iterator.hasNext());}
/** * Test next(),hasNext(),previous()and hasPrevious()for an immutable ListIterator.*/@Test public void testUnmodifiableListIteratorIteration(){final ListIterator<String> listIterator=getImmutableListIterator();assertTrue(!listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("a",listIterator.next());assertTrue(listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("b",listIterator.next());assertTrue(listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("c",listIterator.next());assertTrue(listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("d",listIterator.next());assertTrue(listIterator.hasPrevious());assertTrue(!listIterator.hasNext());assertEquals("d",listIterator.previous());assertTrue(listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("c",listIterator.previous());assertTrue(listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("b",listIterator.previous());assertTrue(listIterator.hasPrevious());assertTrue(listIterator.hasNext());assertEquals("a",listIterator.previous());assertTrue(!listIterator.hasPrevious());assertTrue(listIterator.hasNext());}
/** * Test remove()for an immutable Iterator.*/@Test public void testUnmodifiableIteratorImmutability(){final Iterator<String> iterator=getImmutableIterator();try {iterator.remove();fail("remove()should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}iterator.next();try {iterator.remove();fail("remove()should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}}
/** * Test remove()for an immutable ListIterator.*/@Test public void testUnmodifiableListIteratorImmutability(){final ListIterator<String> listIterator=getImmutableListIterator();try {listIterator.remove();fail("remove()should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}try {listIterator.set("a");fail("set(Object)should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}try {listIterator.add("a");fail("add(Object)should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}listIterator.next();try {listIterator.remove();fail("remove()should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}try {listIterator.set("a");fail("set(Object)should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}try {listIterator.add("a");fail("add(Object)should throw an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}}
/** * Tests method nodeListIterator(NodeList)*/@Test public void testNodeListIterator(){final Node[]nodes=createNodes();final NodeList nodeList=createNodeList(nodes);final Iterator<Node> iterator=IteratorUtils.nodeListIterator(nodeList);int expectedNodeIndex=0;for(final Node actual : IteratorUtils.asIterable(iterator)){assertEquals(nodes[expectedNodeIndex],actual);++expectedNodeIndex;}assertTrue(expectedNodeIndex > 0);assertFalse("should not be able to iterate twice",IteratorUtils.asIterable(iterator).iterator().hasNext());}
/** * Tests method nodeListIterator(Node)*/@Test public void testNodeIterator(){final Node[]nodes=createNodes();final NodeList nodeList=createNodeList(nodes);final Node parentNode=createMock(Node.class);expect(parentNode.getChildNodes()).andStubReturn(nodeList);replay(parentNode);final Iterator<Node> iterator=IteratorUtils.nodeListIterator(parentNode);int expectedNodeIndex=0;for(final Node actual : IteratorUtils.asIterable(iterator)){assertEquals(nodes[expectedNodeIndex],actual);++expectedNodeIndex;}assertTrue(expectedNodeIndex > 0);assertFalse("should not be able to iterate twice",IteratorUtils.asIterable(iterator).iterator().hasNext());}
/** * Tests methods collatedIterator(...)*/@Test public void testCollatedIterator(){try {IteratorUtils.collatedIterator(null,collectionOdd.iterator(),null);fail("expecting NullPointerException");}catch(NullPointerException npe){}try {IteratorUtils.collatedIterator(null,null,collectionEven.iterator());fail("expecting NullPointerException");}catch(NullPointerException npe){}Iterator<Integer> it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),collectionEven.iterator());List<Integer> result=IteratorUtils.toList(it);assertEquals(12,result.size());List<Integer> combinedList=new ArrayList<Integer>();combinedList.addAll(collectionOdd);combinedList.addAll(collectionEven);Collections.sort(combinedList);assertEquals(combinedList,result);it=IteratorUtils.collatedIterator(null,collectionOdd.iterator(),emptyCollection.iterator());result=IteratorUtils.toList(it);assertEquals(collectionOdd,result);final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());Collections.reverse(collectionOdd);Collections.reverse(collectionEven);Collections.reverse(combinedList);it=IteratorUtils.collatedIterator(reverseComparator,collectionOdd.iterator(),collectionEven.iterator());result=IteratorUtils.toList(it);assertEquals(combinedList,result);}
@Test public void forEach(){final List<Integer> listA=new ArrayList<Integer>();listA.add(1);final List<Integer> listB=new ArrayList<Integer>();listB.add(2);final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<List<Integer>> col=new ArrayList<List<Integer>>();col.add(listA);col.add(listB);IteratorUtils.forEach(col.iterator(),testClosure);assertTrue(listA.isEmpty()&& listB.isEmpty());try {IteratorUtils.forEach(col.iterator(),null);fail("expecting NullPointerException");}catch(NullPointerException npe){}IteratorUtils.forEach(null,testClosure);col.add(null);IteratorUtils.forEach(col.iterator(),testClosure);}
@Test public void forEachButLast(){final List<Integer> listA=new ArrayList<Integer>();listA.add(1);final List<Integer> listB=new ArrayList<Integer>();listB.add(2);final Closure<List<Integer>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<List<Integer>> col=new ArrayList<List<Integer>>();col.add(listA);col.add(listB);List<Integer> last=IteratorUtils.forEachButLast(col.iterator(),testClosure);assertTrue(listA.isEmpty()&& !listB.isEmpty());assertSame(listB,last);try {IteratorUtils.forEachButLast(col.iterator(),null);fail("expecting NullPointerException");}catch(NullPointerException npe){}IteratorUtils.forEachButLast(null,testClosure);col.add(null);col.add(null);last=IteratorUtils.forEachButLast(col.iterator(),testClosure);assertNull(last);}
@Test public void find(){Predicate<Number> testPredicate=equalPredicate((Number)4);Integer test=IteratorUtils.find(iterableA.iterator(),testPredicate);assertTrue(test.equals(4));testPredicate=equalPredicate((Number)45);test=IteratorUtils.find(iterableA.iterator(),testPredicate);assertTrue(test == null);assertNull(IteratorUtils.find(null,testPredicate));try {assertNull(IteratorUtils.find(iterableA.iterator(),null));fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void indexOf(){Predicate<Number> testPredicate=equalPredicate((Number)4);int index=IteratorUtils.indexOf(iterableA.iterator(),testPredicate);assertEquals(6,index);testPredicate=equalPredicate((Number)45);index=IteratorUtils.indexOf(iterableA.iterator(),testPredicate);assertEquals(-1,index);assertEquals(-1,IteratorUtils.indexOf(null,testPredicate));try {assertNull(IteratorUtils.indexOf(iterableA.iterator(),null));fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void getFromIterator()throws Exception {Iterator<Integer> iterator=iterableA.iterator();assertEquals(1,(int)IteratorUtils.get(iterator,0));iterator=iterableA.iterator();assertEquals(2,(int)IteratorUtils.get(iterator,1));try {IteratorUtils.get(iterator,10);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException e){}assertTrue(!iterator.hasNext());}
/** * Tests the constructors.*/@Override public void testConstructors(){}
/** * Tests the constructors.*/@SuppressWarnings("unchecked")public void testSetValue(){final Map<K,V> map=new HashMap<K,V>();map.put((K)"A",(V)"a");map.put((K)"B",(V)"b");map.put((K)"C",(V)"c");Map.Entry<K,V> entry=new TiedMapEntry<K,V>(map,(K)"A");assertSame("A",entry.getKey());assertSame("a",entry.getValue());assertSame("a",entry.setValue((V)"x"));assertSame("A",entry.getKey());assertSame("x",entry.getValue());entry=new TiedMapEntry<K,V>(map,(K)"B");assertSame("B",entry.getKey());assertSame("b",entry.getValue());assertSame("b",entry.setValue((V)"y"));assertSame("B",entry.getKey());assertSame("y",entry.getValue());entry=new TiedMapEntry<K,V>(map,(K)"C");assertSame("C",entry.getKey());assertSame("c",entry.getValue());assertSame("c",entry.setValue((V)"z"));assertSame("C",entry.getKey());assertSame("z",entry.getValue());}
public void testEquals(){Transformer<String,String> t1=TransformerUtils.nopTransformer();TransformingComparator<String,String> comp1=new TransformingComparator<String,String>(t1);TransformingComparator<String,String> comp2=new TransformingComparator<String,String>(t1,comp1);assertTrue("Contract failed: equals-hashcode",comp1.equals(comp2)? comp1.hashCode()== comp2.hashCode(): true);assertTrue("Contract failed: equals-hashcode",comp2.equals(comp1)? comp2.hashCode()== comp1.hashCode(): true);}
public void testPrefixMap(){final PatriciaTrie<String> trie=new PatriciaTrie<String>();final String[]keys=new String[]{"","Albert","Xavier","XyZ","Anna","Alien","Alberto","Alberts","Allie","Alliese","Alabama","Banane","Blabla","Amber","Ammun","Akka","Akko","Albertoo","Amma"};for(final String key : keys){trie.put(key,key);}SortedMap<String,String> map;Iterator<String> iterator;Iterator<Map.Entry<String,String>> entryIterator;Map.Entry<String,String> entry;map=trie.prefixMap("Al");Assert.assertEquals(8,map.size());Assert.assertEquals("Alabama",map.firstKey());Assert.assertEquals("Alliese",map.lastKey());Assert.assertEquals("Albertoo",map.get("Albertoo"));Assert.assertNotNull(trie.get("Xavier"));Assert.assertNull(map.get("Xavier"));Assert.assertNull(trie.get("Alice"));Assert.assertNull(map.get("Alice"));iterator=map.values().iterator();Assert.assertEquals("Alabama",iterator.next());Assert.assertEquals("Albert",iterator.next());Assert.assertEquals("Alberto",iterator.next());Assert.assertEquals("Albertoo",iterator.next());Assert.assertEquals("Alberts",iterator.next());Assert.assertEquals("Alien",iterator.next());Assert.assertEquals("Allie",iterator.next());Assert.assertEquals("Alliese",iterator.next());Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("Albert");iterator=map.keySet().iterator();Assert.assertEquals("Albert",iterator.next());Assert.assertEquals("Alberto",iterator.next());Assert.assertEquals("Albertoo",iterator.next());Assert.assertEquals("Alberts",iterator.next());Assert.assertFalse(iterator.hasNext());Assert.assertEquals(4,map.size());Assert.assertEquals("Albert",map.firstKey());Assert.assertEquals("Alberts",map.lastKey());Assert.assertNull(trie.get("Albertz"));map.put("Albertz","Albertz");Assert.assertEquals("Albertz",trie.get("Albertz"));Assert.assertEquals(5,map.size());Assert.assertEquals("Albertz",map.lastKey());iterator=map.keySet().iterator();Assert.assertEquals("Albert",iterator.next());Assert.assertEquals("Alberto",iterator.next());Assert.assertEquals("Albertoo",iterator.next());Assert.assertEquals("Alberts",iterator.next());Assert.assertEquals("Albertz",iterator.next());Assert.assertFalse(iterator.hasNext());Assert.assertEquals("Albertz",map.remove("Albertz"));map=trie.prefixMap("Alberto");Assert.assertEquals(2,map.size());Assert.assertEquals("Alberto",map.firstKey());Assert.assertEquals("Albertoo",map.lastKey());entryIterator=map.entrySet().iterator();entry=entryIterator.next();Assert.assertEquals("Alberto",entry.getKey());Assert.assertEquals("Alberto",entry.getValue());entry=entryIterator.next();Assert.assertEquals("Albertoo",entry.getKey());Assert.assertEquals("Albertoo",entry.getValue());Assert.assertFalse(entryIterator.hasNext());trie.put("Albertoad","Albertoad");Assert.assertEquals(3,map.size());Assert.assertEquals("Alberto",map.firstKey());Assert.assertEquals("Albertoo",map.lastKey());entryIterator=map.entrySet().iterator();entry=entryIterator.next();Assert.assertEquals("Alberto",entry.getKey());Assert.assertEquals("Alberto",entry.getValue());entry=entryIterator.next();Assert.assertEquals("Albertoad",entry.getKey());Assert.assertEquals("Albertoad",entry.getValue());entry=entryIterator.next();Assert.assertEquals("Albertoo",entry.getKey());Assert.assertEquals("Albertoo",entry.getValue());Assert.assertFalse(entryIterator.hasNext());Assert.assertEquals("Albertoo",trie.remove("Albertoo"));Assert.assertEquals("Alberto",map.firstKey());Assert.assertEquals("Albertoad",map.lastKey());Assert.assertEquals(2,map.size());entryIterator=map.entrySet().iterator();entry=entryIterator.next();Assert.assertEquals("Alberto",entry.getKey());Assert.assertEquals("Alberto",entry.getValue());entry=entryIterator.next();Assert.assertEquals("Albertoad",entry.getKey());Assert.assertEquals("Albertoad",entry.getValue());Assert.assertFalse(entryIterator.hasNext());Assert.assertEquals("Albertoad",trie.remove("Albertoad"));trie.put("Albertoo","Albertoo");map=trie.prefixMap("X");Assert.assertEquals(2,map.size());Assert.assertFalse(map.containsKey("Albert"));Assert.assertTrue(map.containsKey("Xavier"));Assert.assertFalse(map.containsKey("Xalan"));iterator=map.values().iterator();Assert.assertEquals("Xavier",iterator.next());Assert.assertEquals("XyZ",iterator.next());Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("An");Assert.assertEquals(1,map.size());Assert.assertEquals("Anna",map.firstKey());Assert.assertEquals("Anna",map.lastKey());iterator=map.keySet().iterator();Assert.assertEquals("Anna",iterator.next());Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("Ban");Assert.assertEquals(1,map.size());Assert.assertEquals("Banane",map.firstKey());Assert.assertEquals("Banane",map.lastKey());iterator=map.keySet().iterator();Assert.assertEquals("Banane",iterator.next());Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("Am");Assert.assertFalse(map.isEmpty());Assert.assertEquals(3,map.size());Assert.assertEquals("Amber",trie.remove("Amber"));iterator=map.keySet().iterator();Assert.assertEquals("Amma",iterator.next());Assert.assertEquals("Ammun",iterator.next());Assert.assertFalse(iterator.hasNext());iterator=map.keySet().iterator();map.put("Amber","Amber");Assert.assertEquals(3,map.size());try {iterator.next();Assert.fail("CME expected");}catch(final ConcurrentModificationException expected){}Assert.assertEquals("Amber",map.firstKey());Assert.assertEquals("Ammun",map.lastKey());map=trie.prefixMap("Ak\0");Assert.assertTrue(map.isEmpty());map=trie.prefixMap("Ak");Assert.assertEquals(2,map.size());Assert.assertEquals("Akka",map.firstKey());Assert.assertEquals("Akko",map.lastKey());map.put("Ak","Ak");Assert.assertEquals("Ak",map.firstKey());Assert.assertEquals("Akko",map.lastKey());Assert.assertEquals(3,map.size());trie.put("Al","Al");Assert.assertEquals(3,map.size());Assert.assertEquals("Ak",map.remove("Ak"));Assert.assertEquals("Akka",map.firstKey());Assert.assertEquals("Akko",map.lastKey());Assert.assertEquals(2,map.size());iterator=map.keySet().iterator();Assert.assertEquals("Akka",iterator.next());Assert.assertEquals("Akko",iterator.next());Assert.assertFalse(iterator.hasNext());Assert.assertEquals("Al",trie.remove("Al"));map=trie.prefixMap("Akka");Assert.assertEquals(1,map.size());Assert.assertEquals("Akka",map.firstKey());Assert.assertEquals("Akka",map.lastKey());iterator=map.keySet().iterator();Assert.assertEquals("Akka",iterator.next());Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("Ab");Assert.assertTrue(map.isEmpty());Assert.assertEquals(0,map.size());try {final Object o=map.firstKey();Assert.fail("got a first key: " + o);}catch(final NoSuchElementException nsee){}try {final Object o=map.lastKey();Assert.fail("got a last key: " + o);}catch(final NoSuchElementException nsee){}iterator=map.values().iterator();Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("Albertooo");Assert.assertTrue(map.isEmpty());Assert.assertEquals(0,map.size());try {final Object o=map.firstKey();Assert.fail("got a first key: " + o);}catch(final NoSuchElementException nsee){}try {final Object o=map.lastKey();Assert.fail("got a last key: " + o);}catch(final NoSuchElementException nsee){}iterator=map.values().iterator();Assert.assertFalse(iterator.hasNext());map=trie.prefixMap("");Assert.assertSame(trie,map);map=trie.prefixMap("\0");Assert.assertTrue(map.isEmpty());Assert.assertEquals(0,map.size());try {final Object o=map.firstKey();Assert.fail("got a first key: " + o);}catch(final NoSuchElementException nsee){}try {final Object o=map.lastKey();Assert.fail("got a last key: " + o);}catch(final NoSuchElementException nsee){}iterator=map.values().iterator();Assert.assertFalse(iterator.hasNext());}
public void testPrefixMapRemoval(){final PatriciaTrie<String> trie=new PatriciaTrie<String>();final String[]keys=new String[]{"Albert","Xavier","XyZ","Anna","Alien","Alberto","Alberts","Allie","Alliese","Alabama","Banane","Blabla","Amber","Ammun","Akka","Akko","Albertoo","Amma"};for(final String key : keys){trie.put(key,key);}SortedMap<String,String> map=trie.prefixMap("Al");Assert.assertEquals(8,map.size());Iterator<String> iter=map.keySet().iterator();Assert.assertEquals("Alabama",iter.next());Assert.assertEquals("Albert",iter.next());Assert.assertEquals("Alberto",iter.next());Assert.assertEquals("Albertoo",iter.next());Assert.assertEquals("Alberts",iter.next());Assert.assertEquals("Alien",iter.next());iter.remove();Assert.assertEquals(7,map.size());Assert.assertEquals("Allie",iter.next());Assert.assertEquals("Alliese",iter.next());Assert.assertFalse(iter.hasNext());map=trie.prefixMap("Ak");Assert.assertEquals(2,map.size());iter=map.keySet().iterator();Assert.assertEquals("Akka",iter.next());iter.remove();Assert.assertEquals(1,map.size());Assert.assertEquals("Akko",iter.next());if (iter.hasNext()){Assert.fail("shouldn't have next (but was: " + iter.next()+ ")");}Assert.assertFalse(iter.hasNext());}
public void testPrefixMapSizes(){PatriciaTrie<String> aTree=new PatriciaTrie<String>();aTree.put("点评","测试");aTree.put("书评","测试");assertTrue(aTree.prefixMap("点").containsKey("点评"));assertEquals("测试",aTree.prefixMap("点").get("点评"));assertFalse(aTree.prefixMap("点").isEmpty());assertEquals(1,aTree.prefixMap("点").size());assertEquals(1,aTree.prefixMap("点").keySet().size());assertEquals(1,aTree.prefixMap("点").entrySet().size());assertEquals(1,aTree.prefixMap("点评").values().size());aTree.clear();aTree.put("点评","联盟");aTree.put("点版","定向");assertEquals(2,aTree.prefixMap("点").keySet().size());assertEquals(2,aTree.prefixMap("点").values().size());}
public void testPrefixMapSizes2(){final char u8000=Character.toChars(32768)[0];final char char_b='b';final PatriciaTrie<String> trie=new PatriciaTrie<String>();final String prefixString="" + char_b;final String longerString=prefixString + u8000;assertEquals(1,prefixString.length());assertEquals(2,longerString.length());assertTrue(longerString.startsWith(prefixString));trie.put(prefixString,"prefixString");trie.put(longerString,"longerString");assertEquals(2,trie.prefixMap(prefixString).size());assertTrue(trie.prefixMap(prefixString).containsKey(longerString));}
public void testPrefixMapClear(){Trie<String,Integer> trie=new PatriciaTrie<Integer>();trie.put("Anna",1);trie.put("Anael",2);trie.put("Analu",3);trie.put("Andreas",4);trie.put("Andrea",5);trie.put("Andres",6);trie.put("Anatole",7);SortedMap<String,Integer> prefixMap=trie.prefixMap("And");assertEquals(new HashSet<String>(Arrays.asList("Andrea","Andreas","Andres")),prefixMap.keySet());assertEquals(Arrays.asList(5,4,6),new ArrayList<Integer>(prefixMap.values()));prefixMap.clear();assertTrue(prefixMap.isEmpty());assertTrue(prefixMap.keySet().isEmpty());assertTrue(prefixMap.values().isEmpty());assertEquals(new HashSet<String>(Arrays.asList("Anael","Analu","Anatole","Anna")),trie.keySet());assertEquals(Arrays.asList(2,3,7,1),new ArrayList<Integer>(trie.values()));}
public void testPrefixMapClearNothing(){Trie<String,Integer> trie=new PatriciaTrie<Integer>();SortedMap<String,Integer> prefixMap=trie.prefixMap("And");assertEquals(new HashSet<String>(),prefixMap.keySet());assertEquals(new ArrayList<Integer>(0),new ArrayList<Integer>(prefixMap.values()));prefixMap.clear();assertTrue(prefixMap.isEmpty());assertTrue(prefixMap.keySet().isEmpty());assertTrue(prefixMap.values().isEmpty());assertEquals(new HashSet<String>(),trie.keySet());assertEquals(new ArrayList<Integer>(0),new ArrayList<Integer>(trie.values()));}
public void testPrefixMapClearUsingRemove(){Trie<String,Integer> trie=new PatriciaTrie<Integer>();trie.put("Anna",1);trie.put("Anael",2);trie.put("Analu",3);trie.put("Andreas",4);trie.put("Andrea",5);trie.put("Andres",6);trie.put("Anatole",7);SortedMap<String,Integer> prefixMap=trie.prefixMap("And");assertEquals(new HashSet<String>(Arrays.asList("Andrea","Andreas","Andres")),prefixMap.keySet());assertEquals(Arrays.asList(5,4,6),new ArrayList<Integer>(prefixMap.values()));Set<String> keys=new HashSet<String>(prefixMap.keySet());for(final String key : keys){prefixMap.remove(key);}assertTrue(prefixMap.keySet().isEmpty());assertTrue(prefixMap.values().isEmpty());assertEquals(new HashSet<String>(Arrays.asList("Anael","Analu","Anatole","Anna")),trie.keySet());assertEquals(Arrays.asList(2,3,7,1),new ArrayList<Integer>(trie.values()));}
@SuppressWarnings("unchecked")public void testTransformedList(){final List<E> list=TransformedList.transformingList(new ArrayList<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,list.size());final E[]els=(E[])new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < els.length;i++){list.add(els[i]);assertEquals(i + 1,list.size());assertEquals(true,list.contains(Integer.valueOf((String)els[i])));assertEquals(false,list.contains(els[i]));}assertEquals(false,list.remove(els[0]));assertEquals(true,list.remove(Integer.valueOf((String)els[0])));list.clear();for (int i=0;i < els.length;i++){list.add(0,els[i]);assertEquals(i + 1,list.size());assertEquals(Integer.valueOf((String)els[i]),list.get(0));}list.set(0,(E)"22");assertEquals(Integer.valueOf(22),list.get(0));final ListIterator<E> it=list.listIterator();it.next();it.set((E)"33");assertEquals(Integer.valueOf(33),list.get(0));it.add((E)"44");assertEquals(Integer.valueOf(44),list.get(1));final List<E> adds=new ArrayList<E>();adds.add((E)"1");adds.add((E)"2");list.clear();list.addAll(adds);assertEquals(Integer.valueOf(1),list.get(0));assertEquals(Integer.valueOf(2),list.get(1));adds.clear();adds.add((E)"3");list.addAll(1,adds);assertEquals(Integer.valueOf(1),list.get(0));assertEquals(Integer.valueOf(3),list.get(1));assertEquals(Integer.valueOf(2),list.get(2));}
public void testTransformedList_decorateTransform(){final List<Object> originalList=new ArrayList<Object>();final Object[]els=new Object[]{"1","3","5","7","2","4","6"};for(final Object el : els){originalList.add(el);}final List<?> list=TransformedList.transformedList(originalList,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(els.length,list.size());for(final Object el : els){assertEquals(true,list.contains(Integer.valueOf((String)el)));assertEquals(false,list.contains(el));}assertEquals(false,list.remove(els[0]));assertEquals(true,list.remove(Integer.valueOf((String)els[0])));}
@SuppressWarnings("unused")public void testIterator(){final Iterator<Integer> iter=createIterator();final Iterable<Number> iterable=new IteratorIterable<Number>(iter);verifyIteration(iterable);for(final Number actual : iterable){fail("should not be able to iterate twice");}}
public void testMultipleUserIterator(){final Iterator<Integer> iter=createIterator();final Iterable<Number> iterable=new IteratorIterable<Number>(iter,true);verifyIteration(iterable);verifyIteration(iterable);}
/** * Adds the simple test defined by the given method to the TestSuite.* @param bulk  The instance of the class that defined the method(I know it's weird.  But the point is,we can clone the instance and not have to worry about constructors.)* @param m  The simple test method*/void addTest(final BulkTest bulk,final Method m){final BulkTest bulk2=(BulkTest)bulk.clone();bulk2.setName(m.getName());bulk2.verboseName=prefix + "." + m.getName();if (ignored.contains(bulk2.verboseName)){return;}result.addTest(bulk2);}
/** * Verify that passing the Predicate means ending up in the buffer.*/@Test public void addPass(){PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();builder.add("test");Assert.assertEquals(builder.createPredicatedList().size(),1);}
/** * Verify that failing the Predicate means NOT ending up in the buffer.*/@Test public void addFail(){PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();builder.add((String)null);Assert.assertTrue(builder.createPredicatedList().isEmpty());Assert.assertEquals(1,builder.rejectedElements().size());}
/** * Verify that only items that pass the Predicate end up in the buffer.*/@Test public void addAllPass(){PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();builder.addAll(Arrays.asList("test1",null,"test2"));Assert.assertEquals(builder.createPredicatedList().size(),2);}
@Test public void createPredicatedCollectionWithNotNullPredicate(){PredicatedCollection.Builder<String> builder=PredicatedCollection.notNullBuilder();builder.add("test1");builder.add((String)null);List<String> predicatedList=builder.createPredicatedList();checkPredicatedCollection1(predicatedList);Set<String> predicatedSet=builder.createPredicatedSet();checkPredicatedCollection1(predicatedSet);Bag<String> predicatedBag=builder.createPredicatedBag();checkPredicatedCollection1(predicatedBag);Queue<String> predicatedQueue=builder.createPredicatedQueue();checkPredicatedCollection1(predicatedQueue);}
@Test public void createPredicatedCollectionWithPredicate(){OddPredicate p=new OddPredicate();PredicatedCollection.Builder<Integer> builder=PredicatedCollection.builder(p);builder.add(1);builder.add(2);builder.add(3);List<Integer> predicatedList=builder.createPredicatedList();checkPredicatedCollection2(predicatedList);Set<Integer> predicatedSet=builder.createPredicatedSet();checkPredicatedCollection2(predicatedSet);Bag<Integer> predicatedBag=builder.createPredicatedBag();checkPredicatedCollection2(predicatedBag);Queue<Integer> predicatedQueue=builder.createPredicatedQueue();checkPredicatedCollection2(predicatedQueue);}
public void testIterator(){final Iterator<E> iter=makeObject();for(final String testValue : testArray){final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
/** * Test the basic ListIterator functionality - going backwards using <code>previous()</code>.*/public void testListIterator(){final ListIterator<E> iter=makeObject();while (iter.hasNext()){iter.next();}for (int x=testArray.length - 1;x >= 0;x--){final Object testValue=testArray[x];final Object iterValue=iter.previous();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasPrevious());try {iter.previous();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
/** * Tests the  {@link java.util.ListIterator#set}operation.*/@SuppressWarnings("unchecked")public void testListIteratorSet(){final String[]testData=new String[]{"a","b","c"};final String[]result=new String[]{"0","1","2"};ListIterator<E> iter=makeArrayListIterator((E[])testData);int x=0;while (iter.hasNext()){iter.next();iter.set((E)Integer.toString(x));x++;}assertTrue("The two arrays should have the same value,i.e. {0,1,2}",Arrays.equals(testData,result));iter=makeArrayListIterator((E[])testArray);try {iter.set((E)"should fail");fail("ListIterator#set should fail if next()or previous()have not yet been called.");}catch(final IllegalStateException e){}catch(final Throwable t){fail(t.toString());}}
@Test public void testNullPredicate(){assertSame(NullPredicate.nullPredicate(),NullPredicate.nullPredicate());assertTrue(nullPredicate(),null);}
@Test public void ensurePredicateCanBeTypedWithoutWarning()throws Exception {final Predicate<String> predicate=NullPredicate.nullPredicate();assertFalse(predicate,cString);}
@SuppressWarnings("unchecked")public void testSetValuedMapAdd(){final SetValuedMap<K,V> setMap=makeObject();assertTrue(setMap.get((K)"whatever")instanceof Set);Set<V> set=setMap.get((K)"A");assertTrue(set.add((V)"a1"));assertTrue(set.add((V)"a2"));assertFalse(set.add((V)"a1"));assertEquals(2,setMap.size());assertTrue(setMap.containsKey("A"));}
@SuppressWarnings("unchecked")public void testSetValuedMapRemove(){final SetValuedMap<K,V> setMap=makeObject();assertTrue(setMap.get((K)"whatever")instanceof Set);Set<V> set=setMap.get((K)"A");assertTrue(set.add((V)"a1"));assertTrue(set.add((V)"a2"));assertFalse(set.add((V)"a1"));assertEquals(2,setMap.size());assertTrue(setMap.containsKey("A"));assertTrue(set.remove("a1"));assertTrue(set.remove("a2"));assertFalse(set.remove("a1"));assertEquals(0,setMap.size());assertFalse(setMap.containsKey("A"));}
@SuppressWarnings("unchecked")public void testSetValuedMapRemoveViaIterator(){final SetValuedMap<K,V> setMap=makeObject();assertTrue(setMap.get((K)"whatever")instanceof Set);Set<V> set=setMap.get((K)"A");set.add((V)"a1");set.add((V)"a2");set.add((V)"a1");Iterator<V> it=set.iterator();while (it.hasNext()){it.next();it.remove();}assertEquals(0,setMap.size());assertFalse(setMap.containsKey("A"));}
@SuppressWarnings({"unchecked","rawtypes"})public void testSetValuedMapEqualsHashCodeContract(){SetValuedMap map1=makeObject();SetValuedMap map2=makeObject();map1.put("a","a1");map1.put("a","a2");map2.put("a","a2");map2.put("a","a1");assertEquals(map1,map2);assertEquals(map1.hashCode(),map2.hashCode());map2.put("a","a2");assertEquals(map1,map2);assertEquals(map1.hashCode(),map2.hashCode());map2.put("a","a3");assertNotSame(map1,map2);assertNotSame(map1.hashCode(),map2.hashCode());}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final Set<E> set=makeFullCollection();assertSame(set,UnmodifiableSet.unmodifiableSet(set));try {UnmodifiableSet.unmodifiableSet(null);fail();}catch(final NullPointerException ex){}}
@Test public void testExceptionPredicate(){assertNotNull(PredicateUtils.exceptionPredicate());assertSame(PredicateUtils.exceptionPredicate(),PredicateUtils.exceptionPredicate());try {PredicateUtils.exceptionPredicate().evaluate(null);}catch(final FunctorException ex){try {PredicateUtils.exceptionPredicate().evaluate(cString);}catch(final FunctorException ex2){return;}}fail();}
@Test public void testIsNotNullPredicate(){assertNotNull(PredicateUtils.notNullPredicate());assertSame(PredicateUtils.notNullPredicate(),PredicateUtils.notNullPredicate());assertEquals(false,PredicateUtils.notNullPredicate().evaluate(null));assertEquals(true,PredicateUtils.notNullPredicate().evaluate(cObject));assertEquals(true,PredicateUtils.notNullPredicate().evaluate(cString));assertEquals(true,PredicateUtils.notNullPredicate().evaluate(cInteger));}
@Test public void testIdentityPredicate(){assertSame(nullPredicate(),PredicateUtils.identityPredicate(null));assertNotNull(PredicateUtils.identityPredicate(Integer.valueOf(6)));assertEquals(false,PredicateUtils.identityPredicate(Integer.valueOf(6)).evaluate(null));assertEquals(false,PredicateUtils.<Object>identityPredicate(Integer.valueOf(6)).evaluate(cObject));assertEquals(false,PredicateUtils.<Object>identityPredicate(Integer.valueOf(6)).evaluate(cString));assertEquals(false,PredicateUtils.identityPredicate(new Integer(6)).evaluate(cInteger));assertEquals(true,PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));}
@Test public void testTruePredicate(){assertNotNull(TruePredicate.truePredicate());assertSame(TruePredicate.truePredicate(),TruePredicate.truePredicate());assertEquals(true,TruePredicate.truePredicate().evaluate(null));assertEquals(true,TruePredicate.truePredicate().evaluate(cObject));assertEquals(true,TruePredicate.truePredicate().evaluate(cString));assertEquals(true,TruePredicate.truePredicate().evaluate(cInteger));}
@Test public void testFalsePredicate(){assertNotNull(FalsePredicate.falsePredicate());assertSame(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate());assertEquals(false,FalsePredicate.falsePredicate().evaluate(null));assertEquals(false,FalsePredicate.falsePredicate().evaluate(cObject));assertEquals(false,FalsePredicate.falsePredicate().evaluate(cString));assertEquals(false,FalsePredicate.falsePredicate().evaluate(cInteger));}
@Test public void testNotPredicate(){assertNotNull(PredicateUtils.notPredicate(TruePredicate.truePredicate()));assertEquals(false,PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(null));assertEquals(false,PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cObject));assertEquals(false,PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cString));assertEquals(false,PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cInteger));}
@Test(expected=NullPointerException.class)public void testNotPredicateEx(){PredicateUtils.notPredicate(null);}
@Test public void testAndPredicate(){assertEquals(true,PredicateUtils.andPredicate(TruePredicate.truePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(false,PredicateUtils.andPredicate(TruePredicate.truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));assertEquals(false,PredicateUtils.andPredicate(FalsePredicate.falsePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(false,PredicateUtils.andPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));}
@Test(expected=NullPointerException.class)public void testAndPredicateEx(){PredicateUtils.andPredicate(null,null);}
@SuppressWarnings("unchecked")@Test public void testAllPredicate(){assertTrue(AllPredicate.allPredicate(new Predicate[]{}),null);assertEquals(true,AllPredicate.allPredicate(new Predicate[]{TruePredicate.truePredicate(),TruePredicate.truePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,AllPredicate.allPredicate(new Predicate[]{TruePredicate.truePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,AllPredicate.allPredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,AllPredicate.allPredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()}).evaluate(null));final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());assertEquals(true,AllPredicate.allPredicate(coll).evaluate(null));coll.clear();coll.add(TruePredicate.truePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,AllPredicate.allPredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,AllPredicate.allPredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());assertEquals(false,AllPredicate.allPredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());assertFalse(AllPredicate.allPredicate(coll),null);coll.clear();coll.add(TruePredicate.truePredicate());assertTrue(AllPredicate.allPredicate(coll),null);coll.clear();assertTrue(AllPredicate.allPredicate(coll),null);}
@Test(expected=NullPointerException.class)public void testAllPredicateEx1(){AllPredicate.allPredicate((Predicate<Object>[])null);}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testAllPredicateEx2(){AllPredicate.<Object>allPredicate(new Predicate[]{null});}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testAllPredicateEx3(){AllPredicate.allPredicate(new Predicate[]{null,null});}
@Test(expected=NullPointerException.class)public void testAllPredicateEx4(){AllPredicate.allPredicate((Collection<Predicate<Object>>)null);}
@Test public void testAllPredicateEx5(){AllPredicate.allPredicate(Collections.<Predicate<Object>>emptyList());}
@Test(expected=NullPointerException.class)public void testAllPredicateEx6(){final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(null);coll.add(null);AllPredicate.allPredicate(coll);}
@Test public void testOrPredicate(){assertEquals(true,PredicateUtils.orPredicate(TruePredicate.truePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(true,PredicateUtils.orPredicate(TruePredicate.truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));assertEquals(true,PredicateUtils.orPredicate(FalsePredicate.falsePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(false,PredicateUtils.orPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));}
@Test(expected=NullPointerException.class)public void testOrPredicateEx(){PredicateUtils.orPredicate(null,null);}
@SuppressWarnings("unchecked")@Test public void testAnyPredicate(){assertFalse(PredicateUtils.anyPredicate(new Predicate[]{}),null);assertEquals(true,PredicateUtils.anyPredicate(new Predicate[]{TruePredicate.truePredicate(),TruePredicate.truePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(true,PredicateUtils.anyPredicate(new Predicate[]{TruePredicate.truePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(true,PredicateUtils.anyPredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,PredicateUtils.anyPredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()}).evaluate(null));final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());assertEquals(true,PredicateUtils.anyPredicate(coll).evaluate(null));coll.clear();coll.add(TruePredicate.truePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(true,PredicateUtils.anyPredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(true,PredicateUtils.anyPredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());assertEquals(false,PredicateUtils.anyPredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());assertFalse(PredicateUtils.anyPredicate(coll),null);coll.clear();coll.add(TruePredicate.truePredicate());assertTrue(PredicateUtils.anyPredicate(coll),null);coll.clear();assertFalse(PredicateUtils.anyPredicate(coll),null);}
@Test(expected=NullPointerException.class)public void testAnyPredicateEx1(){PredicateUtils.anyPredicate((Predicate<Object>[])null);}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testAnyPredicateEx2(){PredicateUtils.anyPredicate(new Predicate[]{null});}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testAnyPredicateEx3(){PredicateUtils.anyPredicate(new Predicate[]{null,null});}
@Test(expected=NullPointerException.class)public void testAnyPredicateEx4(){PredicateUtils.anyPredicate((Collection<Predicate<Object>>)null);}
@Test public void testAnyPredicateEx5(){PredicateUtils.anyPredicate(Collections.<Predicate<Object>>emptyList());}
@Test(expected=NullPointerException.class)public void testAnyPredicateEx6(){final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(null);coll.add(null);PredicateUtils.anyPredicate(coll);}
@Test public void testEitherPredicate(){assertEquals(false,PredicateUtils.eitherPredicate(TruePredicate.truePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(true,PredicateUtils.eitherPredicate(TruePredicate.truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));assertEquals(true,PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(false,PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));}
@Test(expected=NullPointerException.class)public void testEitherPredicateEx(){PredicateUtils.eitherPredicate(null,null);}
@SuppressWarnings("unchecked")@Test public void testOnePredicate(){assertFalse(PredicateUtils.onePredicate((Predicate<Object>[])new Predicate[]{}),null);assertEquals(false,PredicateUtils.onePredicate(new Predicate[]{TruePredicate.truePredicate(),TruePredicate.truePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,PredicateUtils.onePredicate(new Predicate[]{TruePredicate.truePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(true,PredicateUtils.onePredicate(new Predicate[]{TruePredicate.truePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()}).evaluate(null));assertEquals(true,PredicateUtils.onePredicate(new Predicate[]{FalsePredicate.falsePredicate(),TruePredicate.truePredicate(),FalsePredicate.falsePredicate()}).evaluate(null));assertEquals(true,PredicateUtils.onePredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,PredicateUtils.onePredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()}).evaluate(null));final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,PredicateUtils.onePredicate(coll).evaluate(null));coll.clear();coll.add(TruePredicate.truePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,PredicateUtils.onePredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(true,PredicateUtils.onePredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());assertEquals(false,PredicateUtils.onePredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());assertFalse(PredicateUtils.onePredicate(coll),null);coll.clear();coll.add(TruePredicate.truePredicate());assertTrue(PredicateUtils.onePredicate(coll),null);coll.clear();assertFalse(PredicateUtils.onePredicate(coll),null);}
@Test(expected=NullPointerException.class)public void testOnePredicateEx1(){PredicateUtils.onePredicate((Predicate<Object>[])null);}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testOnePredicateEx2(){PredicateUtils.onePredicate(new Predicate[]{null});}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testOnePredicateEx3(){PredicateUtils.onePredicate(new Predicate[]{null,null});}
@Test(expected=NullPointerException.class)public void testOnePredicateEx4(){PredicateUtils.onePredicate((Collection<Predicate<Object>>)null);}
@SuppressWarnings("unchecked")@Test public void testOnePredicateEx5(){PredicateUtils.onePredicate(Collections.EMPTY_LIST);}
@Test(expected=NullPointerException.class)public void testOnePredicateEx6(){final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(null);coll.add(null);PredicateUtils.onePredicate(coll);}
@Test public void testNeitherPredicate(){assertEquals(false,PredicateUtils.neitherPredicate(TruePredicate.truePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(false,PredicateUtils.neitherPredicate(TruePredicate.truePredicate(),FalsePredicate.falsePredicate()).evaluate(null));assertEquals(false,PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(),TruePredicate.truePredicate()).evaluate(null));assertEquals(true,PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()).evaluate(null));}
@Test(expected=NullPointerException.class)public void testNeitherPredicateEx(){PredicateUtils.neitherPredicate(null,null);}
@SuppressWarnings("unchecked")@Test public void testNonePredicate(){assertTrue(PredicateUtils.nonePredicate(new Predicate[]{}),null);assertEquals(false,PredicateUtils.nonePredicate(new Predicate[]{TruePredicate.truePredicate(),TruePredicate.truePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,PredicateUtils.nonePredicate(new Predicate[]{TruePredicate.truePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(false,PredicateUtils.nonePredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),TruePredicate.truePredicate()}).evaluate(null));assertEquals(true,PredicateUtils.nonePredicate(new Predicate[]{FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate(),FalsePredicate.falsePredicate()}).evaluate(null));final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,PredicateUtils.nonePredicate(coll).evaluate(null));coll.clear();coll.add(TruePredicate.truePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,PredicateUtils.nonePredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(TruePredicate.truePredicate());assertEquals(false,PredicateUtils.nonePredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());coll.add(FalsePredicate.falsePredicate());assertEquals(true,PredicateUtils.nonePredicate(coll).evaluate(null));coll.clear();coll.add(FalsePredicate.falsePredicate());assertTrue(PredicateUtils.nonePredicate(coll),null);coll.clear();coll.add(TruePredicate.truePredicate());assertFalse(PredicateUtils.nonePredicate(coll),null);coll.clear();assertTrue(PredicateUtils.nonePredicate(coll),null);}
@Test(expected=NullPointerException.class)public void testNonePredicateEx1(){PredicateUtils.nonePredicate((Predicate<Object>[])null);}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testNonePredicateEx2(){PredicateUtils.nonePredicate(new Predicate[]{null});}
@SuppressWarnings("unchecked")@Test(expected=NullPointerException.class)public void testNonePredicateEx3(){PredicateUtils.nonePredicate(new Predicate[]{null,null});}
@Test(expected=NullPointerException.class)public void testNonePredicateEx4(){PredicateUtils.nonePredicate((Collection<Predicate<Object>>)null);}
@Test public void testNonePredicateEx5(){PredicateUtils.nonePredicate(Collections.<Predicate<Object>>emptyList());}
@Test(expected=NullPointerException.class)public void testNonePredicateEx6(){final Collection<Predicate<Object>> coll=new ArrayList<Predicate<Object>>();coll.add(null);coll.add(null);PredicateUtils.nonePredicate(coll);}
@Test public void testInstanceOfPredicate(){assertNotNull(PredicateUtils.instanceofPredicate(String.class));assertEquals(false,PredicateUtils.instanceofPredicate(String.class).evaluate(null));assertEquals(false,PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));assertEquals(true,PredicateUtils.instanceofPredicate(String.class).evaluate(cString));assertEquals(false,PredicateUtils.instanceofPredicate(String.class).evaluate(cInteger));}
@Test public void testUniquePredicate(){final Predicate<Object> p=PredicateUtils.uniquePredicate();assertEquals(true,p.evaluate(new Object()));assertEquals(true,p.evaluate(new Object()));assertEquals(true,p.evaluate(new Object()));assertEquals(true,p.evaluate(cString));assertEquals(false,p.evaluate(cString));assertEquals(false,p.evaluate(cString));}
@Test public void testAsPredicateTransformer(){assertEquals(false,PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(false));assertEquals(true,PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(true));}
@Test(expected=NullPointerException.class)public void testAsPredicateTransformerEx1(){PredicateUtils.asPredicate(null);}
@Test(expected=FunctorException.class)public void testAsPredicateTransformerEx2(){PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(null);}
@Test public void testInvokerPredicate(){final List<Object> list=new ArrayList<Object>();assertEquals(true,PredicateUtils.invokerPredicate("isEmpty").evaluate(list));list.add(new Object());assertEquals(false,PredicateUtils.invokerPredicate("isEmpty").evaluate(list));}
@Test(expected=NullPointerException.class)public void testInvokerPredicateEx1(){PredicateUtils.invokerPredicate(null);}
@Test(expected=FunctorException.class)public void testInvokerPredicateEx2(){PredicateUtils.invokerPredicate("isEmpty").evaluate(null);}
@Test(expected=FunctorException.class)public void testInvokerPredicateEx3(){PredicateUtils.invokerPredicate("noSuchMethod").evaluate(new Object());}
@Test public void testInvokerPredicate2(){final List<String> list=new ArrayList<String>();assertEquals(false,PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(list));list.add(cString);assertEquals(true,PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(list));}
@Test(expected=NullPointerException.class)public void testInvokerPredicate2Ex1(){PredicateUtils.invokerPredicate(null,null,null);}
@Test(expected=FunctorException.class)public void testInvokerPredicate2Ex2(){PredicateUtils.invokerPredicate("contains",new Class[]{Object.class},new Object[]{cString}).evaluate(null);}
@Test(expected=FunctorException.class)public void testInvokerPredicate2Ex3(){PredicateUtils.invokerPredicate("noSuchMethod",new Class[]{Object.class},new Object[]{cString}).evaluate(new Object());}
@Test(expected=FunctorException.class)public void testNullIsExceptionPredicate(){assertEquals(true,PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(new Object()));PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);}
@Test(expected=NullPointerException.class)public void testNullIsExceptionPredicateEx1(){PredicateUtils.nullIsExceptionPredicate(null);}
@Test public void testNullIsTruePredicate(){assertEquals(true,PredicateUtils.nullIsTruePredicate(TruePredicate.truePredicate()).evaluate(null));assertEquals(true,PredicateUtils.nullIsTruePredicate(TruePredicate.truePredicate()).evaluate(new Object()));assertEquals(false,PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));}
@Test(expected=NullPointerException.class)public void testNullIsTruePredicateEx1(){PredicateUtils.nullIsTruePredicate(null);}
@Test public void testNullIsFalsePredicate(){assertEquals(false,PredicateUtils.nullIsFalsePredicate(TruePredicate.truePredicate()).evaluate(null));assertEquals(true,PredicateUtils.nullIsFalsePredicate(TruePredicate.truePredicate()).evaluate(new Object()));assertEquals(false,PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));}
@Test(expected=NullPointerException.class)public void testNullIsFalsePredicateEx1(){PredicateUtils.nullIsFalsePredicate(null);}
@Test public void testTransformedPredicate(){assertEquals(true,PredicateUtils.transformedPredicate(TransformerUtils.nopTransformer(),TruePredicate.truePredicate()).evaluate(new Object()));final Map<Object,Object> map=new HashMap<Object,Object>();map.put(Boolean.TRUE,"Hello");final Transformer<Object,Object> t=TransformerUtils.mapTransformer(map);final Predicate<Object> p=EqualPredicate.<Object>equalPredicate("Hello");assertEquals(false,PredicateUtils.transformedPredicate(t,p).evaluate(null));assertEquals(true,PredicateUtils.transformedPredicate(t,p).evaluate(Boolean.TRUE));try {PredicateUtils.transformedPredicate(null,null);fail();}catch(final NullPointerException ex){}}
/** * Test that all Predicate singletones hold singleton pattern in serialization/deserialization process.*/@Test public void testSingletonPatternInSerialization(){final Object[]singletones=new Object[]{ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE};for(final Object original : singletones){TestUtils.assertSameAfterSerialization("Singletone patern broken for " + original.getClass(),original);}}
public void testGetByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.get(0);}catch(final IndexOutOfBoundsException ex){}try {lom.get(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.get(-1);}catch(final IndexOutOfBoundsException ex){}try {lom.get(lom.size());}catch(final IndexOutOfBoundsException ex){}int i=0;for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();i++){assertSame(it.next(),lom.get(i));}}
public void testGetValueByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.getValue(0);}catch(final IndexOutOfBoundsException ex){}try {lom.getValue(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.getValue(-1);}catch(final IndexOutOfBoundsException ex){}try {lom.getValue(lom.size());}catch(final IndexOutOfBoundsException ex){}int i=0;for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();i++){it.next();assertSame(it.getValue(),lom.getValue(i));}}
public void testIndexOf(){resetEmpty();ListOrderedMap<K,V> lom=getMap();assertEquals(-1,lom.indexOf(getOtherKeys()));resetFull();lom=getMap();final List<K> list=new ArrayList<K>();for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();){list.add(it.next());}for (int i=0;i < list.size();i++){assertEquals(i,lom.indexOf(list.get(i)));}}
public void testRemoveByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.remove(0);}catch(final IndexOutOfBoundsException ex){}try {lom.remove(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.remove(-1);}catch(final IndexOutOfBoundsException ex){}try {lom.remove(lom.size());}catch(final IndexOutOfBoundsException ex){}final List<K> list=new ArrayList<K>();for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();){list.add(it.next());}for (int i=0;i < list.size();i++){final Object key=list.get(i);final Object value=lom.get(key);assertEquals(value,lom.remove(i));list.remove(i);assertEquals(false,lom.containsKey(key));}}
@SuppressWarnings("unchecked")public void testCaseInsensitive(){final Map<K,V> map=makeObject();map.put((K)"One",(V)"One");map.put((K)"Two",(V)"Two");assertEquals("One",map.get("one"));assertEquals("One",map.get("oNe"));map.put((K)"two",(V)"Three");assertEquals("Three",map.get("Two"));}
@SuppressWarnings("unchecked")public void testNullHandling(){final Map<K,V> map=makeObject();map.put((K)"One",(V)"One");map.put((K)"Two",(V)"Two");map.put(null,(V)"Three");assertEquals("Three",map.get(null));map.put(null,(V)"Four");assertEquals("Four",map.get(null));final Set<K> keys=map.keySet();assertTrue(keys.contains("one"));assertTrue(keys.contains("two"));assertTrue(keys.contains(null));assertEquals(3,keys.size());}
public void testPutAll(){final Map<Object,String> map=new HashMap<Object,String>();map.put("One","One");map.put("Two","Two");map.put("one","Three");map.put(null,"Four");map.put(Integer.valueOf(20),"Five");final Map<Object,String> caseInsensitiveMap=new CaseInsensitiveMap<Object,String>(map);assertEquals(4,caseInsensitiveMap.size());final Set<Object> keys=caseInsensitiveMap.keySet();assertTrue(keys.contains("one"));assertTrue(keys.contains("two"));assertTrue(keys.contains(null));assertTrue(keys.contains(Integer.toString(20)));assertEquals(4,keys.size());assertTrue(!caseInsensitiveMap.containsValue("One")|| !caseInsensitiveMap.containsValue("Three"));assertEquals("Four",caseInsensitiveMap.get(null));}
@SuppressWarnings("unchecked")public void testClone(){final CaseInsensitiveMap<K,V> map=new CaseInsensitiveMap<K,V>(10);map.put((K)"1",(V)"1");final CaseInsensitiveMap<K,V> cloned=map.clone();assertEquals(map.size(),cloned.size());assertSame(map.get("1"),cloned.get("1"));}
public void testLocaleIndependence(){final Locale orig=Locale.getDefault();final Locale[]locales={Locale.ENGLISH,new Locale("tr","",""),Locale.getDefault()};final String[][]data={{"i","I"},{"\u03C2","\u03C3"},{"\u03A3","\u03C2"},{"\u03A3","\u03C3"}};try {for(final Locale locale : locales){Locale.setDefault(locale);for (int j=0;j < data.length;j++){assertTrue("Test data corrupt: " + j,data[j][0].equalsIgnoreCase(data[j][1]));final CaseInsensitiveMap<String,String> map=new CaseInsensitiveMap<String,String>();map.put(data[j][0],"value");assertEquals(Locale.getDefault()+ ": " + j,"value",map.get(data[j][1]));}}}finally {Locale.setDefault(orig);}}
/** * Test for <a href="https://issues.apache.org/jira/browse/COLLECTIONS-323">COLLECTIONS-323</a>.*/public void testInitialCapacityZero(){final CaseInsensitiveMap<String,String> map=new CaseInsensitiveMap<String,String>(0);assertEquals(1,map.data.length);}
@SuppressWarnings("unchecked")public void testTransformedSet(){final Set<E> set=TransformedSet.transformingSet(new HashSet<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,set.size());final E[]els=(E[])new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < els.length;i++){set.add(els[i]);assertEquals(i + 1,set.size());assertEquals(true,set.contains(Integer.valueOf((String)els[i])));assertEquals(false,set.contains(els[i]));}assertEquals(false,set.remove(els[0]));assertEquals(true,set.remove(Integer.valueOf((String)els[0])));}
public void testTransformedSet_decorateTransform(){final Set<Object> originalSet=new HashSet<Object>();final Object[]els=new Object[]{"1","3","5","7","2","4","6"};Collections.addAll(originalSet,els);final Set<?> set=TransformedSet.transformedSet(originalSet,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(els.length,set.size());for(final Object el : els){assertEquals(true,set.contains(Integer.valueOf((String)el)));assertEquals(false,set.contains(el));}assertEquals(false,set.remove(els[0]));assertEquals(true,set.remove(Integer.valueOf((String)els[0])));}
@SuppressWarnings("unchecked")public void testReset(){resetEmpty();OrderedMap<K,V> ordered=getMap();((ResettableIterator<K>)ordered.mapIterator()).reset();resetFull();ordered=getMap();final List<K> list=new ArrayList<K>(ordered.keySet());final ResettableIterator<K> it=(ResettableIterator<K>)ordered.mapIterator();assertSame(list.get(0),it.next());assertSame(list.get(1),it.next());it.reset();assertSame(list.get(0),it.next());}
public void testInsertionOrder(){if (!isPutAddSupported()|| !isPutChangeSupported()){return;}final K[]keys=getSampleKeys();final V[]values=getSampleValues();Iterator<K> keyIter;Iterator<V> valueIter;resetEmpty();map.put(keys[0],values[0]);map.put(keys[1],values[1]);keyIter=map.keySet().iterator();assertSame(keys[0],keyIter.next());assertSame(keys[1],keyIter.next());valueIter=map.values().iterator();assertSame(values[0],valueIter.next());assertSame(values[1],valueIter.next());map.put(keys[1],values[1]);keyIter=map.keySet().iterator();assertSame(keys[0],keyIter.next());assertSame(keys[1],keyIter.next());valueIter=map.values().iterator();assertSame(values[0],valueIter.next());assertSame(values[1],valueIter.next());map.put(keys[1],values[2]);keyIter=map.keySet().iterator();assertSame(keys[0],keyIter.next());assertSame(keys[1],keyIter.next());valueIter=map.values().iterator();assertSame(values[0],valueIter.next());assertSame(values[2],valueIter.next());map.put(keys[0],values[3]);keyIter=map.keySet().iterator();assertSame(keys[0],keyIter.next());assertSame(keys[1],keyIter.next());valueIter=map.values().iterator();assertSame(values[3],valueIter.next());assertSame(values[2],valueIter.next());}
public void testGetByIndex(){resetEmpty();LinkedMap<K,V> lm=getMap();try {lm.get(0);}catch(final IndexOutOfBoundsException ex){}try {lm.get(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lm=getMap();try {lm.get(-1);}catch(final IndexOutOfBoundsException ex){}try {lm.get(lm.size());}catch(final IndexOutOfBoundsException ex){}int i=0;for (final MapIterator<K,V> it=lm.mapIterator();it.hasNext();i++){assertSame(it.next(),lm.get(i));}}
public void testGetValueByIndex(){resetEmpty();LinkedMap<K,V> lm=getMap();try {lm.getValue(0);}catch(final IndexOutOfBoundsException ex){}try {lm.getValue(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lm=getMap();try {lm.getValue(-1);}catch(final IndexOutOfBoundsException ex){}try {lm.getValue(lm.size());}catch(final IndexOutOfBoundsException ex){}int i=0;for (final MapIterator<K,V> it=lm.mapIterator();it.hasNext();i++){it.next();assertSame(it.getValue(),lm.getValue(i));}}
public void testIndexOf(){resetEmpty();LinkedMap<K,V> lm=getMap();assertEquals(-1,lm.indexOf(getOtherKeys()));resetFull();lm=getMap();final List<K> list=new ArrayList<K>();for (final MapIterator<K,V> it=lm.mapIterator();it.hasNext();){list.add(it.next());}for (int i=0;i < list.size();i++){assertEquals(i,lm.indexOf(list.get(i)));}}
public void testRemoveByIndex(){resetEmpty();LinkedMap<K,V> lm=getMap();try {lm.remove(0);}catch(final IndexOutOfBoundsException ex){}try {lm.remove(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lm=getMap();try {lm.remove(-1);}catch(final IndexOutOfBoundsException ex){}try {lm.remove(lm.size());}catch(final IndexOutOfBoundsException ex){}final List<K> list=new ArrayList<K>();for (final MapIterator<K,V> it=lm.mapIterator();it.hasNext();){list.add(it.next());}for (int i=0;i < list.size();i++){final Object key=list.get(i);final Object value=lm.get(key);assertEquals(value,lm.remove(i));list.remove(i);assertEquals(false,lm.containsKey(key));}}
@SuppressWarnings("unchecked")public void testClone(){final LinkedMap<K,V> map=new LinkedMap<K,V>(10);map.put((K)"1",(V)"1");final Map<K,V> cloned=map.clone();assertEquals(map.size(),cloned.size());assertSame(map.get("1"),cloned.get("1"));}
/** * Test for <a href="https://issues.apache.org/jira/browse/COLLECTIONS-323">COLLECTIONS-323</a>.*/public void testInitialCapacityZero(){final LinkedMap<String,String> map=new LinkedMap<String,String>(0);assertEquals(1,map.data.length);}
public void testAddedObjectsCanBeRetrievedByKey()throws Exception {final Collection<String> coll=makeTestCollection();coll.add("12");coll.add("16");coll.add("1");coll.addAll(asList("2","3","4"));@SuppressWarnings("unchecked")final IndexedCollection<Integer,String> indexed=(IndexedCollection<Integer,String>)coll;assertEquals("12",indexed.get(12));assertEquals("16",indexed.get(16));assertEquals("1",indexed.get(1));assertEquals("2",indexed.get(2));assertEquals("3",indexed.get(3));assertEquals("4",indexed.get(4));}
public void testEnsureDuplicateObjectsCauseException()throws Exception {final Collection<String> coll=makeUniqueTestCollection();coll.add("1");try {coll.add("1");fail();}catch(final IllegalArgumentException e){}}
public void testDecoratedCollectionIsIndexedOnCreation()throws Exception {final Collection<String> original=makeFullCollection();final IndexedCollection<Integer,String> indexed=decorateUniqueCollection(original);assertEquals("1",indexed.get(1));assertEquals("2",indexed.get(2));assertEquals("3",indexed.get(3));}
public void testReindexUpdatesIndexWhenDecoratedCollectionIsModifiedSeparately()throws Exception {final Collection<String> original=new ArrayList<String>();final IndexedCollection<Integer,String> indexed=decorateUniqueCollection(original);original.add("1");original.add("2");original.add("3");assertNull(indexed.get(1));assertNull(indexed.get(2));assertNull(indexed.get(3));indexed.reindex();assertEquals("1",indexed.get(1));assertEquals("2",indexed.get(2));assertEquals("3",indexed.get(3));}
/** * Verify that base set and subsets are not modifiable*/@SuppressWarnings("unchecked")public void testUnmodifiable(){setupSet();verifyUnmodifiable(set);verifyUnmodifiable(set.descendingSet());verifyUnmodifiable(set.headSet((E)Integer.valueOf(1)));verifyUnmodifiable(set.headSet((E)Integer.valueOf(1),true));verifyUnmodifiable(set.tailSet((E)Integer.valueOf(1)));verifyUnmodifiable(set.tailSet((E)Integer.valueOf(1),false));verifyUnmodifiable(set.subSet((E)Integer.valueOf(1),(E)Integer.valueOf(3)));verifyUnmodifiable(set.subSet((E)Integer.valueOf(1),false,(E)Integer.valueOf(3),false));verifyUnmodifiable(set.subSet((E)Integer.valueOf(1),true,(E)Integer.valueOf(3),true));}
public void testDecorateFactory(){final NavigableSet<E> set=makeFullCollection();assertSame(set,UnmodifiableNavigableSet.unmodifiableNavigableSet(set));try {UnmodifiableNavigableSet.unmodifiableNavigableSet(null);fail();}catch(final NullPointerException ex){}}
public void testComparator(){setupSet();final Comparator<? super E> c=set.comparator();assertTrue("natural order,so comparator should be null",c == null);}
@SuppressWarnings("unchecked")public void testTransformedSet(){final SortedSet<E> set=TransformedSortedSet.transformingSortedSet(new TreeSet<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,set.size());final E[]els=(E[])new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < els.length;i++){set.add(els[i]);assertEquals(i + 1,set.size());assertEquals(true,set.contains(Integer.valueOf((String)els[i])));}assertEquals(true,set.remove(Integer.valueOf((String)els[0])));}
public void testTransformedSet_decorateTransform(){final Set<Object> originalSet=new TreeSet<Object>();final Object[]els=new Object[]{"1","3","5","7","2","4","6"};Collections.addAll(originalSet,els);final Set<?> set=TransformedSet.transformedSet(originalSet,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(els.length,set.size());for(final Object el : els){assertEquals(true,set.contains(Integer.valueOf((String)el)));}assertEquals(true,set.remove(Integer.valueOf((String)els[0])));}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final BidiMap<K,V> map=makeFullMap();assertSame(map,UnmodifiableBidiMap.unmodifiableBidiMap(map));try {UnmodifiableBidiMap.unmodifiableBidiMap(null);fail();}catch(final NullPointerException ex){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final Map<K,V> map=makeFullMap();assertSame(map,UnmodifiableMap.unmodifiableMap(map));try {UnmodifiableMap.unmodifiableMap(null);fail();}catch(final NullPointerException ex){}}
public void testIterateEven(){@SuppressWarnings("unchecked")final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(evens.iterator());for (int i=0;i < evens.size();i++){assertTrue(iter.hasNext());assertEquals(evens.get(i),iter.next());}assertTrue(!iter.hasNext());}
public void testIterateEvenOdd(){final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(evens.iterator(),odds.iterator());for (int i=0;i < 20;i++){assertTrue(iter.hasNext());assertEquals(Integer.valueOf(i),iter.next());}assertTrue(!iter.hasNext());}
public void testIterateOddEven(){final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(odds.iterator(),evens.iterator());for (int i=0,j=0;i < 20;i++){assertTrue(iter.hasNext());int val=iter.next();if (i % 2 == 0){assertEquals(odds.get(j).intValue(),val);}else {assertEquals(evens.get(j).intValue(),val);j++;}}assertTrue(!iter.hasNext());}
public void testIterateEvenEven(){final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(evens.iterator(),evens.iterator());for (int i=0;i < evens.size();i++){assertTrue(iter.hasNext());assertEquals(evens.get(i),iter.next());assertTrue(iter.hasNext());assertEquals(evens.get(i),iter.next());}assertTrue(!iter.hasNext());}
public void testIterateFibEvenOdd(){final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(fib.iterator(),evens.iterator(),odds.iterator());assertEquals(Integer.valueOf(1),iter.next());assertEquals(Integer.valueOf(0),iter.next());assertEquals(Integer.valueOf(1),iter.next());assertEquals(Integer.valueOf(1),iter.next());assertEquals(Integer.valueOf(2),iter.next());assertEquals(Integer.valueOf(3),iter.next());assertEquals(Integer.valueOf(2),iter.next());assertEquals(Integer.valueOf(4),iter.next());assertEquals(Integer.valueOf(5),iter.next());assertEquals(Integer.valueOf(3),iter.next());assertEquals(Integer.valueOf(6),iter.next());assertEquals(Integer.valueOf(7),iter.next());assertEquals(Integer.valueOf(5),iter.next());assertEquals(Integer.valueOf(8),iter.next());assertEquals(Integer.valueOf(9),iter.next());assertEquals(Integer.valueOf(8),iter.next());assertEquals(Integer.valueOf(10),iter.next());assertEquals(Integer.valueOf(11),iter.next());assertEquals(Integer.valueOf(13),iter.next());assertEquals(Integer.valueOf(12),iter.next());assertEquals(Integer.valueOf(13),iter.next());assertEquals(Integer.valueOf(21),iter.next());assertEquals(Integer.valueOf(14),iter.next());assertEquals(Integer.valueOf(15),iter.next());assertEquals(Integer.valueOf(16),iter.next());assertEquals(Integer.valueOf(17),iter.next());assertEquals(Integer.valueOf(18),iter.next());assertEquals(Integer.valueOf(19),iter.next());assertTrue(!iter.hasNext());}
public void testRemoveFromSingle(){@SuppressWarnings("unchecked")final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(evens.iterator());int expectedSize=evens.size();while (iter.hasNext()){final Object o=iter.next();final Integer val=(Integer)o;if (val.intValue()% 4 == 0){expectedSize--;iter.remove();}}assertEquals(expectedSize,evens.size());}
public void testRemoveFromDouble(){final ZippingIterator<Integer> iter=new ZippingIterator<Integer>(evens.iterator(),odds.iterator());int expectedSize=evens.size()+ odds.size();while (iter.hasNext()){final Object o=iter.next();final Integer val=(Integer)o;if (val.intValue()% 4 == 0 || val.intValue()% 3 == 0){expectedSize--;iter.remove();}}assertEquals(expectedSize,evens.size()+ odds.size());}
@SuppressWarnings("unchecked")public void testEntrySet(){SortedMap<K,V> map=makeTestMap();assertTrue("returned entryset should not be null",map.entrySet()!= null);map=decorateMap(new TreeMap<K,V>(),null,null);map.put((K)"oneKey",(V)"oneValue");assertTrue("returned entryset should contain one entry",map.entrySet().size()== 1);map=decorateMap(map,null,null);}
@SuppressWarnings("unchecked")public void testPut(){final Map<K,V> map=makeTestMap();try {map.put((K)"Hi",(V)Integer.valueOf(3));fail("Illegal value should raise IllegalArgument");}catch(final IllegalArgumentException e){}try {map.put((K)Integer.valueOf(3),(V)"Hi");fail("Illegal key should raise IllegalArgument");}catch(final IllegalArgumentException e){}assertTrue(!map.containsKey(Integer.valueOf(3)));assertTrue(!map.containsValue(Integer.valueOf(3)));final Map<K,V> map2=new HashMap<K,V>();map2.put((K)"A",(V)"a");map2.put((K)"B",(V)"b");map2.put((K)"C",(V)"c");map2.put((K)"c",(V)Integer.valueOf(3));try {map.putAll(map2);fail("Illegal value should raise IllegalArgument");}catch(final IllegalArgumentException e){}map.put((K)"E",(V)"e");Iterator<Map.Entry<K,V>> iterator=map.entrySet().iterator();try {final Map.Entry<K,V> entry=iterator.next();entry.setValue((V)Integer.valueOf(3));fail("Illegal value should raise IllegalArgument");}catch(final IllegalArgumentException e){}map.put((K)"F",(V)"f");iterator=map.entrySet().iterator();final Map.Entry<K,V> entry=iterator.next();entry.setValue((V)"x");}
@SuppressWarnings("unchecked")public void testSortOrder(){final SortedMap<K,V> map=makeTestMap();map.put((K)"A",(V)"a");map.put((K)"B",(V)"b");try {map.put(null,(V)"c");fail("Null key should raise IllegalArgument");}catch(final IllegalArgumentException e){}map.put((K)"C",(V)"c");try {map.put((K)"D",null);fail("Null value should raise IllegalArgument");}catch(final IllegalArgumentException e){}assertEquals("First key should be A","A",map.firstKey());assertEquals("Last key should be C","C",map.lastKey());assertEquals("First key in tail map should be B","B",map.tailMap((K)"B").firstKey());assertEquals("Last key in head map should be B","B",map.headMap((K)"C").lastKey());assertEquals("Last key in submap should be B","B",map.subMap((K)"A",(K)"C").lastKey());final Comparator<? super K> c=map.comparator();assertTrue("natural order,so comparator should be null",c == null);}
@SuppressWarnings("unchecked")public void testTransformedMap(){final Object[]els=new Object[]{"1","3","5","7","2","4","6"};SortedMap<K,V> map=TransformedSortedMap.transformingSortedMap(new TreeMap<K,V>(),(Transformer<? super K,? extends K>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,null);assertEquals(0,map.size());for (int i=0;i < els.length;i++){map.put((K)els[i],(V)els[i]);assertEquals(i + 1,map.size());assertEquals(true,map.containsKey(Integer.valueOf((String)els[i])));try {map.containsKey(els[i]);fail();}catch(final ClassCastException ex){}assertEquals(true,map.containsValue(els[i]));assertEquals(els[i],map.get(Integer.valueOf((String)els[i])));}try {map.remove(els[0]);fail();}catch(final ClassCastException ex){}assertEquals(els[0],map.remove(Integer.valueOf((String)els[0])));map=TransformedSortedMap.transformingSortedMap(new TreeMap<K,V>(),null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,map.size());for (int i=0;i < els.length;i++){map.put((K)els[i],(V)els[i]);assertEquals(i + 1,map.size());assertEquals(true,map.containsValue(Integer.valueOf((String)els[i])));assertEquals(false,map.containsValue(els[i]));assertEquals(true,map.containsKey(els[i]));assertEquals(Integer.valueOf((String)els[i]),map.get(els[i]));}assertEquals(Integer.valueOf((String)els[0]),map.remove(els[0]));final Set<Map.Entry<K,V>> entrySet=map.entrySet();final Map.Entry<K,V>[]array=entrySet.toArray(new Map.Entry[0]);array[0].setValue((V)"66");assertEquals(Integer.valueOf(66),array[0].getValue());assertEquals(Integer.valueOf(66),map.get(array[0].getKey()));final Map.Entry<K,V> entry=entrySet.iterator().next();entry.setValue((V)"88");assertEquals(Integer.valueOf(88),entry.getValue());assertEquals(Integer.valueOf(88),map.get(entry.getKey()));}
@SuppressWarnings("unchecked")public void testFactory_Decorate(){final SortedMap<K,V> base=new TreeMap<K,V>();base.put((K)"A",(V)"1");base.put((K)"B",(V)"2");base.put((K)"C",(V)"3");final SortedMap<K,V> trans=TransformedSortedMap.transformingSortedMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(3,trans.size());assertEquals("1",trans.get("A"));assertEquals("2",trans.get("B"));assertEquals("3",trans.get("C"));trans.put((K)"D",(V)"4");assertEquals(Integer.valueOf(4),trans.get("D"));}
@SuppressWarnings("unchecked")public void testFactory_decorateTransform(){final SortedMap<K,V> base=new TreeMap<K,V>();base.put((K)"A",(V)"1");base.put((K)"B",(V)"2");base.put((K)"C",(V)"3");final SortedMap<K,V> trans=TransformedSortedMap.transformedSortedMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(3,trans.size());assertEquals(Integer.valueOf(1),trans.get("A"));assertEquals(Integer.valueOf(2),trans.get("B"));assertEquals(Integer.valueOf(3),trans.get("C"));trans.put((K)"D",(V)"4");assertEquals(Integer.valueOf(4),trans.get("D"));}
public void testTransformedCollection(){final Collection<Object> coll=TransformedCollection.transformingCollection(new ArrayList<Object>(),STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,coll.size());final Object[]elements=getFullElements();for (int i=0;i < elements.length;i++){coll.add(elements[i]);assertEquals(i + 1,coll.size());assertEquals(true,coll.contains(Integer.valueOf((String)elements[i])));assertEquals(false,coll.contains(elements[i]));}assertEquals(true,coll.remove(Integer.valueOf((String)elements[0])));}
public void testTransformedCollection_decorateTransform(){final Collection<Object> originalCollection=new ArrayList<Object>();final Object[]elements=getFullElements();Collections.addAll(originalCollection,elements);final Collection<Object> collection=TransformedCollection.transformedCollection(originalCollection,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(elements.length,collection.size());for(final Object element : elements){assertEquals(true,collection.contains(Integer.valueOf((String)element)));assertEquals(false,collection.contains(element));}assertEquals(false,collection.remove(elements[0]));assertEquals(true,collection.remove(Integer.valueOf((String)elements[0])));}
@SuppressWarnings({"unchecked","rawtypes"})public void testTransformedMap(){final Object[]els=new Object[]{"1","3","5","7","2","4","6"};Map<K,V> map=TransformedMap.transformingMap(new HashMap<K,V>(),(Transformer<? super K,? extends K>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,null);assertEquals(0,map.size());for (int i=0;i < els.length;i++){map.put((K)els[i],(V)els[i]);assertEquals(i + 1,map.size());assertEquals(true,map.containsKey(Integer.valueOf((String)els[i])));assertEquals(false,map.containsKey(els[i]));assertEquals(true,map.containsValue(els[i]));assertEquals(els[i],map.get(Integer.valueOf((String)els[i])));}assertEquals(null,map.remove(els[0]));assertEquals(els[0],map.remove(Integer.valueOf((String)els[0])));map=TransformedMap.transformingMap(new HashMap(),null,(Transformer)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,map.size());for (int i=0;i < els.length;i++){map.put((K)els[i],(V)els[i]);assertEquals(i + 1,map.size());assertEquals(true,map.containsValue(Integer.valueOf((String)els[i])));assertEquals(false,map.containsValue(els[i]));assertEquals(true,map.containsKey(els[i]));assertEquals(Integer.valueOf((String)els[i]),map.get(els[i]));}assertEquals(Integer.valueOf((String)els[0]),map.remove(els[0]));final Set<Map.Entry<K,V>> entrySet=map.entrySet();final Map.Entry<K,V>[]array=entrySet.toArray(new Map.Entry[0]);array[0].setValue((V)"66");assertEquals(Integer.valueOf(66),array[0].getValue());assertEquals(Integer.valueOf(66),map.get(array[0].getKey()));final Map.Entry<K,V> entry=entrySet.iterator().next();entry.setValue((V)"88");assertEquals(Integer.valueOf(88),entry.getValue());assertEquals(Integer.valueOf(88),map.get(entry.getKey()));}
@SuppressWarnings("unchecked")public void testFactory_Decorate(){final Map<K,V> base=new HashMap<K,V>();base.put((K)"A",(V)"1");base.put((K)"B",(V)"2");base.put((K)"C",(V)"3");final Map<K,V> trans=TransformedMap.transformingMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(3,trans.size());assertEquals("1",trans.get("A"));assertEquals("2",trans.get("B"));assertEquals("3",trans.get("C"));trans.put((K)"D",(V)"4");assertEquals(Integer.valueOf(4),trans.get("D"));}
@SuppressWarnings("unchecked")public void testFactory_decorateTransform(){final Map<K,V> base=new HashMap<K,V>();base.put((K)"A",(V)"1");base.put((K)"B",(V)"2");base.put((K)"C",(V)"3");final Map<K,V> trans=TransformedMap.transformedMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(3,trans.size());assertEquals(Integer.valueOf(1),trans.get("A"));assertEquals(Integer.valueOf(2),trans.get("B"));assertEquals(Integer.valueOf(3),trans.get("C"));trans.put((K)"D",(V)"4");assertEquals(Integer.valueOf(4),trans.get("D"));}
@Test public void testNormalIteration(){PushbackIterator<E> iter=makeObject();assertEquals("a",iter.next());assertEquals("b",iter.next());assertEquals("c",iter.next());assertFalse(iter.hasNext());}
@Test @SuppressWarnings("unchecked")public void testImmediatePushback(){PushbackIterator<E> iter=makeObject();iter.pushback((E)"x");assertEquals("x",iter.next());assertEquals("a",iter.next());validate(iter,"b","c");}
@Test @SuppressWarnings("unchecked")public void testDelayedPushback(){PushbackIterator<E> iter=makeObject();assertEquals("a",iter.next());iter.pushback((E)"x");assertEquals("x",iter.next());assertEquals("b",iter.next());validate(iter,"c");}
@Test @SuppressWarnings("unchecked")public void testMultiplePushback(){PushbackIterator<E> iter=makeObject();assertEquals("a",iter.next());iter.pushback((E)"x");iter.pushback((E)"y");assertEquals("y",iter.next());assertEquals("x",iter.next());assertEquals("b",iter.next());validate(iter,"c");}
@SuppressWarnings("unchecked")public void testTransformedBag(){final Bag<T> bag=TransformedBag.transformingBag(new HashBag<T>(),(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,bag.size());final Object[]els=new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < els.length;i++){bag.add((T)els[i]);assertEquals(i + 1,bag.size());assertEquals(true,bag.contains(Integer.valueOf((String)els[i])));assertEquals(false,bag.contains(els[i]));}assertEquals(false,bag.remove(els[0]));assertEquals(true,bag.remove(Integer.valueOf((String)els[0])));}
@SuppressWarnings("unchecked")public void testTransformedBag_decorateTransform(){final Bag<T> originalBag=new HashBag<T>();final Object[]els=new Object[]{"1","3","5","7","2","4","6"};for(final Object el : els){originalBag.add((T)el);}final Bag<T> bag=TransformedBag.transformedBag(originalBag,(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(els.length,bag.size());for(final Object el : els){assertEquals(true,bag.contains(Integer.valueOf((String)el)));assertEquals(false,bag.contains(el));}assertEquals(false,bag.remove(els[0]));assertEquals(true,bag.remove(Integer.valueOf((String)els[0])));}
@Test public void testUnmodifiableQueue(){Queue<Object> queue=QueueUtils.unmodifiableQueue(new LinkedList<Object>());assertTrue("Returned object should be an UnmodifiableQueue.",queue instanceof UnmodifiableQueue);try {QueueUtils.unmodifiableQueue(null);fail("Expecting NullPointerException for null queue.");}catch(final NullPointerException ex){}assertSame("UnmodifiableQueue shall not be decorated",queue,QueueUtils.unmodifiableQueue(queue));}
@Test public void testPredicatedQueue(){Queue<Object> queue=QueueUtils.predicatedQueue(new LinkedList<Object>(),truePredicate);assertTrue("Returned object should be a PredicatedQueue.",queue instanceof PredicatedQueue);try {QueueUtils.predicatedQueue(null,truePredicate);fail("Expecting NullPointerException for null queue.");}catch(final NullPointerException ex){}try {QueueUtils.predicatedQueue(new LinkedList<Object>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException ex){}}
@Test public void testTransformedQueue(){Queue<Object> queue=QueueUtils.transformingQueue(new LinkedList<Object>(),nopTransformer);assertTrue("Returned object should be an TransformedQueue.",queue instanceof TransformedQueue);try {QueueUtils.transformingQueue(null,nopTransformer);fail("Expecting NullPointerException for null queue.");}catch(final NullPointerException ex){}try {QueueUtils.transformingQueue(new LinkedList<Object>(),null);fail("Expecting NullPointerException for null transformer.");}catch(final NullPointerException ex){}}
@Test public void testEmptyQueue(){Queue<Object> queue=QueueUtils.emptyQueue();assertTrue("Returned object should be an UnmodifiableQueue.",queue instanceof UnmodifiableQueue);assertTrue("Returned queue is not empty.",queue.isEmpty());try {queue.add(new Object());fail("Expecting UnsupportedOperationException for empty queue.");}catch(final UnsupportedOperationException ex){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final MultiSet<E> multiset=makeFullCollection();assertSame(multiset,UnmodifiableMultiSet.unmodifiableMultiSet(multiset));try {UnmodifiableMultiSet.unmodifiableMultiSet(null);fail();}catch(final NullPointerException ex){}}
public void testCollections265(){final Bag<Object> bag=new TreeBag<Object>();try {bag.add(new Object());fail("IllegalArgumentException expected");}catch(final IllegalArgumentException iae){}}
public void testCollections555(){final Bag<Object> bag=new TreeBag<Object>();try {bag.add(null);fail("NullPointerException expected");}catch(final NullPointerException npe){}final Bag<String> bag2=new TreeBag<String>(new Comparator<String>(){@Override public int compare(String o1,String o2){return o1.compareTo(o2);}});try {bag2.add("a");bag2.add(null);fail("NullPointerException expected");}catch(final NullPointerException npe){}}
public void testOrdering(){final Bag<T> bag=setupBag();assertEquals("Should get elements in correct order","A",bag.toArray()[0]);assertEquals("Should get elements in correct order","B",bag.toArray()[1]);assertEquals("Should get elements in correct order","C",bag.toArray()[2]);assertEquals("Should get first key","A",((SortedBag<T>)bag).first());assertEquals("Should get last key","D",((SortedBag<T>)bag).last());}
@Test public void compareEquals(){final Integer value=Integer.valueOf(10);final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>());assertFalse(p,Integer.valueOf(value.intValue()- 1));assertTrue(p,Integer.valueOf(value.intValue()));assertFalse(p,Integer.valueOf(value.intValue()+ 1));}
@Test public void compareGreater(){final Integer value=Integer.valueOf(10);final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER);assertTrue(p,Integer.valueOf(value.intValue()- 1));assertFalse(p,Integer.valueOf(value.intValue()));assertFalse(p,Integer.valueOf(value.intValue()+ 1));}
@Test public void compareLess(){final Integer value=Integer.valueOf(10);final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS);assertFalse(p,Integer.valueOf(value.intValue()- 1));assertFalse(p,Integer.valueOf(value.intValue()));assertTrue(p,Integer.valueOf(value.intValue()+ 1));}
@Test public void compareGreaterOrEqual(){final Integer value=Integer.valueOf(10);final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.GREATER_OR_EQUAL);assertTrue(p,Integer.valueOf(value.intValue()- 1));assertTrue(p,Integer.valueOf(value.intValue()));assertFalse(p,Integer.valueOf(value.intValue()+ 1));}
@Test public void compareLessOrEqual(){final Integer value=Integer.valueOf(10);final Predicate<Integer> p=comparatorPredicate(value,new TestComparator<Integer>(),Criterion.LESS_OR_EQUAL);assertFalse(p,Integer.valueOf(value.intValue()- 1));assertTrue(p,Integer.valueOf(value.intValue()));assertTrue(p,Integer.valueOf(value.intValue()+ 1));}
@Override public void testListIteratorSet(){resetFull();final ListIterator<E> it=getCollection().listIterator();it.next();try {it.set(null);fail();}catch(final UnsupportedOperationException ex){}}
@Override public void testListIteratorAdd(){resetEmpty();final List<E> list1=getCollection();final List<E> list2=getConfirmed();final E[]elements=getOtherElements();ListIterator<E> iter1=list1.listIterator();ListIterator<E> iter2=list2.listIterator();for(final E element : elements){iter1.add(element);iter2.add(element);super.verify();}resetFull();iter1=getCollection().listIterator();iter2=getConfirmed().listIterator();for(final E element : elements){iter1.next();iter2.next();iter1.add(element);iter2.add(element);super.verify();}}
@Override public void testCollectionAddAll(){resetEmpty();E[]elements=getFullElements();boolean r=getCollection().addAll(Arrays.asList(elements));getConfirmed().addAll(Arrays.asList(elements));verify();assertTrue("Empty collection should change after addAll",r);for(final E element : elements){assertTrue("Collection should contain added element",getCollection().contains(element));}resetFull();final int size=getCollection().size();elements=getOtherElements();r=getCollection().addAll(Arrays.asList(elements));getConfirmed().addAll(Arrays.asList(elements));verify();assertTrue("Full collection should change after addAll",r);for (int i=0;i < elements.length;i++){assertTrue("Full collection should contain added element " + i,getCollection().contains(elements[i]));}assertEquals("Size should increase after addAll",size + elements.length,getCollection().size());}
public void testIntCollectionAddAll(){final List<Integer> list=new SetUniqueList<Integer>(new ArrayList<Integer>(),new HashSet<Integer>());final Integer existingElement=Integer.valueOf(1);list.add(existingElement);final Integer firstNewElement=Integer.valueOf(2);final Integer secondNewElement=Integer.valueOf(3);Collection<Integer> collection=Arrays.asList(firstNewElement,secondNewElement);list.addAll(0,collection);assertEquals("Unique elements should be added.",3,list.size());assertEquals("First new element should be at index 0",firstNewElement,list.get(0));assertEquals("Second new element should be at index 1",secondNewElement,list.get(1));assertEquals("Existing element should shift to index 2",existingElement,list.get(2));final Integer thirdNewElement=Integer.valueOf(4);collection=Arrays.asList(existingElement,thirdNewElement);list.addAll(0,collection);assertEquals("Duplicate element should not be added,unique element should be added.",4,list.size());assertEquals("Third new element should be at index 0",thirdNewElement,list.get(0));}
@Override @SuppressWarnings("unchecked")public void testListSetByIndex(){resetFull();final int size=getCollection().size();getCollection().set(0,(E)new Long(1000));assertEquals(size,getCollection().size());getCollection().set(2,(E)new Long(1000));assertEquals(size - 1,getCollection().size());assertEquals(new Long(1000),getCollection().get(1));}
@Override public void testCollectionIteratorRemove(){try {extraVerify=false;super.testCollectionIteratorRemove();}finally {extraVerify=true;}}
public void testFactory(){final Integer[]array=new Integer[]{Integer.valueOf(1),Integer.valueOf(2),Integer.valueOf(1)};final ArrayList<Integer> list=new ArrayList<Integer>(Arrays.asList(array));final SetUniqueList<Integer> lset=SetUniqueList.setUniqueList(list);assertEquals("Duplicate element was added.",2,lset.size());assertEquals(Integer.valueOf(1),lset.get(0));assertEquals(Integer.valueOf(2),lset.get(1));assertEquals(Integer.valueOf(1),list.get(0));assertEquals(Integer.valueOf(2),list.get(1));}
@SuppressWarnings("unchecked")public void testAdd(){final SetUniqueList<E> lset=new SetUniqueList<E>(new ArrayList<E>(),new HashSet<E>());final E obj=(E)Integer.valueOf(1);lset.add(obj);lset.add(obj);assertEquals("Duplicate element was added.",1,lset.size());lset.add((E)Integer.valueOf(2));assertEquals("Unique element was not added.",2,lset.size());}
@SuppressWarnings("unchecked")public void testAddAll(){final SetUniqueList<E> lset=new SetUniqueList<E>(new ArrayList<E>(),new HashSet<E>());lset.addAll(Arrays.asList((E[])new Integer[]{Integer.valueOf(1),Integer.valueOf(1)}));assertEquals("Duplicate element was added.",1,lset.size());}
@SuppressWarnings("unchecked")public void testSet(){final SetUniqueList<E> lset=new SetUniqueList<E>(new ArrayList<E>(),new HashSet<E>());final E obj1=(E)Integer.valueOf(1);final E obj2=(E)Integer.valueOf(2);final E obj3=(E)Integer.valueOf(3);lset.add(obj1);lset.add(obj2);lset.set(0,obj1);assertEquals(2,lset.size());assertSame(obj1,lset.get(0));assertSame(obj2,lset.get(1));lset.clear();lset.add(obj1);lset.add(obj2);lset.set(0,obj2);assertEquals(1,lset.size());assertSame(obj2,lset.get(0));lset.clear();lset.add(obj1);lset.add(obj2);lset.set(0,obj3);assertEquals(2,lset.size());assertSame(obj3,lset.get(0));assertSame(obj2,lset.get(1));lset.clear();lset.add(obj1);lset.add(obj2);lset.set(1,obj1);assertEquals(1,lset.size());assertSame(obj1,lset.get(0));}
@SuppressWarnings("unchecked")public void testListIterator(){final SetUniqueList<E> lset=new SetUniqueList<E>(new ArrayList<E>(),new HashSet<E>());final E obj1=(E)Integer.valueOf(1);final E obj2=(E)Integer.valueOf(2);lset.add(obj1);lset.add(obj2);for (final ListIterator<E> it=lset.listIterator();it.hasNext();){it.next();if (!it.hasNext()){it.add(obj1);break;}}assertEquals("Duplicate element was added",2,lset.size());}
@SuppressWarnings("unchecked")public void testUniqueListReInsert(){final List<E> l=SetUniqueList.setUniqueList(new LinkedList<E>());l.add((E)new Object());l.add((E)new Object());final E a=l.get(0);l.set(0,l.get(1));assertEquals(1,l.size());l.add(1,a);assertEquals(2,l.size());}
@SuppressWarnings("unchecked")public void testUniqueListDoubleInsert(){final List<E> l=SetUniqueList.setUniqueList(new LinkedList<E>());l.add((E)new Object());l.add((E)new Object());l.set(0,l.get(1));assertEquals(1,l.size());l.add(1,l.get(0));assertEquals(1,l.size());}
@SuppressWarnings("unchecked")public void testSetDownwardsInList(){final ArrayList<E> l=new ArrayList<E>();final HashSet<E> s=new HashSet<E>();final SetUniqueList<E> ul=new SetUniqueList<E>(l,s);final E a=(E)new Object();final E b=(E)new Object();ul.add(a);ul.add(b);assertEquals(a,l.get(0));assertEquals(b,l.get(1));assertTrue(s.contains(a));assertTrue(s.contains(b));assertEquals(a,ul.set(0,b));assertEquals(1,s.size());assertEquals(1,l.size());assertEquals(b,l.get(0));assertTrue(s.contains(b));assertFalse(s.contains(a));}
@SuppressWarnings("unchecked")public void testSetInBiggerList(){final ArrayList<E> l=new ArrayList<E>();final HashSet<E> s=new HashSet<E>();final SetUniqueList<E> ul=new SetUniqueList<E>(l,s);final E a=(E)new Object();final E b=(E)new Object();final E c=(E)new Object();ul.add(a);ul.add(b);ul.add(c);assertEquals(a,l.get(0));assertEquals(b,l.get(1));assertEquals(c,l.get(2));assertTrue(s.contains(a));assertTrue(s.contains(b));assertTrue(s.contains(c));assertEquals(a,ul.set(0,b));assertEquals(2,s.size());assertEquals(2,l.size());assertEquals(b,l.get(0));assertEquals(c,l.get(1));assertFalse(s.contains(a));assertTrue(s.contains(b));assertTrue(s.contains(c));}
@SuppressWarnings("unchecked")public void testSetUpwardsInList(){final ArrayList<E> l=new ArrayList<E>();final HashSet<E> s=new HashSet<E>();final SetUniqueList<E> ul=new SetUniqueList<E>(l,s);final E a=(E)new String("A");final E b=(E)new String("B");final E c=(E)new String("C");ul.add(a);ul.add(b);ul.add(c);assertEquals(a,l.get(0));assertEquals(b,l.get(1));assertEquals(c,l.get(2));assertTrue(s.contains(a));assertTrue(s.contains(b));assertTrue(s.contains(c));assertEquals(b,ul.set(1,a));assertEquals(2,s.size());assertEquals(2,l.size());assertEquals(a,l.get(0));assertEquals(c,l.get(1));assertTrue(s.contains(a));assertFalse(s.contains(b));assertTrue(s.contains(c));}
public void testCollections304(){final List<String> list=new LinkedList<String>();final SetUniqueList<String> decoratedList=SetUniqueList.setUniqueList(list);final String s1="Apple";final String s2="Lemon";final String s3="Orange";final String s4="Strawberry";decoratedList.add(s1);decoratedList.add(s2);decoratedList.add(s3);assertEquals(3,decoratedList.size());decoratedList.set(1,s4);assertEquals(3,decoratedList.size());decoratedList.add(1,s4);assertEquals(3,decoratedList.size());decoratedList.add(1,s2);assertEquals(4,decoratedList.size());}
public void testSubListIsUnmodifiable(){resetFull();List<E> subList=getCollection().subList(1,3);try {subList.remove(0);fail("subList should be unmodifiable");}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testCollections307(){List<E> list=new ArrayList<E>();List<E> uniqueList=SetUniqueList.setUniqueList(list);final String hello="Hello";final String world="World";uniqueList.add((E)hello);uniqueList.add((E)world);List<E> subList=list.subList(0,0);List<E> subUniqueList=uniqueList.subList(0,0);assertFalse(subList.contains(world));assertFalse(subUniqueList.contains(world));List<E> worldList=new ArrayList<E>();worldList.add((E)world);assertFalse(subList.contains("World"));assertFalse(subUniqueList.contains("World"));list=new ArrayList<E>();uniqueList=new SetUniqueList307(list,new java.util.TreeSet<E>());uniqueList.add((E)hello);uniqueList.add((E)world);subList=list.subList(0,0);subUniqueList=uniqueList.subList(0,0);assertFalse(subList.contains(world));assertFalse(subUniqueList.contains(world));worldList=new ArrayList<E>();worldList.add((E)world);assertFalse(subList.contains("World"));assertFalse(subUniqueList.contains("World"));}
@SuppressWarnings("unchecked")public void testRetainAll(){final List<E> list=new ArrayList<E>(10);final SetUniqueList<E> uniqueList=SetUniqueList.setUniqueList(list);for (int i=0;i < 10;++i){uniqueList.add((E)Integer.valueOf(i));}final Collection<E> retained=new ArrayList<E>(5);for (int i=0;i < 5;++i){retained.add((E)Integer.valueOf(i * 2));}assertTrue(uniqueList.retainAll(retained));assertEquals(5,uniqueList.size());assertTrue(uniqueList.contains(Integer.valueOf(0)));assertTrue(uniqueList.contains(Integer.valueOf(2)));assertTrue(uniqueList.contains(Integer.valueOf(4)));assertTrue(uniqueList.contains(Integer.valueOf(6)));assertTrue(uniqueList.contains(Integer.valueOf(8)));}
@SuppressWarnings("unchecked")public void testRetainAllWithInitialList(){final List<E> list=new ArrayList<E>(10);for (int i=0;i < 5;++i){list.add((E)Integer.valueOf(i));}final SetUniqueList<E> uniqueList=SetUniqueList.setUniqueList(list);for (int i=5;i < 10;++i){uniqueList.add((E)Integer.valueOf(i));}final Collection<E> retained=new ArrayList<E>(5);for (int i=0;i < 5;++i){retained.add((E)Integer.valueOf(i * 2));}assertTrue(uniqueList.retainAll(retained));assertEquals(5,uniqueList.size());assertTrue(uniqueList.contains(Integer.valueOf(0)));assertTrue(uniqueList.contains(Integer.valueOf(2)));assertTrue(uniqueList.contains(Integer.valueOf(4)));assertTrue(uniqueList.contains(Integer.valueOf(6)));assertTrue(uniqueList.contains(Integer.valueOf(8)));}
public void testSetCollections444(){final SetUniqueList<Integer> lset=new SetUniqueList<Integer>(new ArrayList<Integer>(),new HashSet<Integer>());final Integer obj1=Integer.valueOf(1);final Integer obj2=Integer.valueOf(2);lset.add(obj1);lset.add(obj2);lset.set(0,obj1);assertEquals(2,lset.size());assertSame(obj1,lset.get(0));assertSame(obj2,lset.get(1));assertTrue(lset.contains(obj1));assertTrue(lset.contains(obj2));}
/** * Tests that the removal operation actually removes the first element.*/@SuppressWarnings("unchecked")public void testCircularFifoQueueCircular(){final List<E> list=new ArrayList<E>();list.add((E)"A");list.add((E)"B");list.add((E)"C");final Queue<E> queue=new CircularFifoQueue<E>(list);assertEquals(true,queue.contains("A"));assertEquals(true,queue.contains("B"));assertEquals(true,queue.contains("C"));queue.add((E)"D");assertEquals(false,queue.contains("A"));assertEquals(true,queue.contains("B"));assertEquals(true,queue.contains("C"));assertEquals(true,queue.contains("D"));assertEquals("B",queue.peek());assertEquals("B",queue.remove());assertEquals("C",queue.remove());assertEquals("D",queue.remove());}
/** * Tests that the removal operation actually removes the first element.*/public void testCircularFifoQueueRemove(){resetFull();final int size=getConfirmed().size();for (int i=0;i < size;i++){final Object o1=getCollection().remove();final Object o2=((List<?>)getConfirmed()).remove(0);assertEquals("Removed objects should be equal",o1,o2);verify();}try {getCollection().remove();fail("Empty queue should raise Underflow.");}catch(final NoSuchElementException e){}}
/** * Tests that the constructor correctly throws an exception.*/public void testConstructorException1(){try {new CircularFifoQueue<E>(0);}catch(final IllegalArgumentException ex){return;}fail();}
/** * Tests that the constructor correctly throws an exception.*/public void testConstructorException2(){try {new CircularFifoQueue<E>(-20);}catch(final IllegalArgumentException ex){return;}fail();}
/** * Tests that the constructor correctly throws an exception.*/public void testConstructorException3(){try {new CircularFifoQueue<E>(null);}catch(final NullPointerException ex){return;}fail();}
@SuppressWarnings("unchecked")public void testRemoveError1()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");assertEquals("[1,2,3,4,5]",fifo.toString());fifo.remove("3");assertEquals("[1,2,4,5]",fifo.toString());fifo.remove("4");assertEquals("[1,2,5]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError2()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");assertEquals(5,fifo.size());assertEquals("[2,3,4,5,6]",fifo.toString());fifo.remove("3");assertEquals("[2,4,5,6]",fifo.toString());fifo.remove("4");assertEquals("[2,5,6]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError3()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");assertEquals("[1,2,3,4,5]",fifo.toString());fifo.remove("3");assertEquals("[1,2,4,5]",fifo.toString());fifo.add((E)"6");fifo.add((E)"7");assertEquals("[2,4,5,6,7]",fifo.toString());fifo.remove("4");assertEquals("[2,5,6,7]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError4()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");fifo.add((E)"7");assertEquals("[3,4,5,6,7]",fifo.toString());fifo.remove("4");assertEquals("[3,5,6,7]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError5()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");fifo.add((E)"7");assertEquals("[3,4,5,6,7]",fifo.toString());fifo.remove("5");assertEquals("[3,4,6,7]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError6()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");fifo.add((E)"7");assertEquals("[3,4,5,6,7]",fifo.toString());fifo.remove("6");assertEquals("[3,4,5,7]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError7()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");fifo.add((E)"7");assertEquals("[3,4,5,6,7]",fifo.toString());fifo.remove("7");assertEquals("[3,4,5,6]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError8()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");fifo.add((E)"7");fifo.add((E)"8");assertEquals("[4,5,6,7,8]",fifo.toString());fifo.remove("7");assertEquals("[4,5,6,8]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRemoveError9()throws Exception {final CircularFifoQueue<E> fifo=new CircularFifoQueue<E>(5);fifo.add((E)"1");fifo.add((E)"2");fifo.add((E)"3");fifo.add((E)"4");fifo.add((E)"5");fifo.add((E)"6");fifo.add((E)"7");fifo.add((E)"8");assertEquals("[4,5,6,7,8]",fifo.toString());fifo.remove("8");assertEquals("[4,5,6,7]",fifo.toString());}
@SuppressWarnings("unchecked")public void testRepeatedSerialization()throws Exception {final CircularFifoQueue<E> b=new CircularFifoQueue<E>(2);b.add((E)"a");assertEquals(1,b.size());assertEquals(true,b.contains("a"));ByteArrayOutputStream bos=new ByteArrayOutputStream();new ObjectOutputStream(bos).writeObject(b);final CircularFifoQueue<E> b2=(CircularFifoQueue<E>)new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject();assertEquals(1,b2.size());assertEquals(true,b2.contains("a"));b2.add((E)"b");assertEquals(2,b2.size());assertEquals(true,b2.contains("a"));assertEquals(true,b2.contains("b"));bos=new ByteArrayOutputStream();new ObjectOutputStream(bos).writeObject(b2);final CircularFifoQueue<E> b3=(CircularFifoQueue<E>)new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray())).readObject();assertEquals(2,b3.size());assertEquals(true,b3.contains("a"));assertEquals(true,b3.contains("b"));b3.add((E)"c");assertEquals(2,b3.size());assertEquals(true,b3.contains("b"));assertEquals(true,b3.contains("c"));}
public void testGetIndex(){resetFull();final CircularFifoQueue<E> queue=getCollection();final List<E> confirmed=(List<E>)getConfirmed();for (int i=0;i < confirmed.size();i++){assertEquals(confirmed.get(i),queue.get(i));}queue.remove();queue.remove();for (int i=0;i < queue.size();i++){assertEquals(confirmed.get(i + 2),queue.get(i));}}
public void testIterator(){final ListIterator<E> iter=makeObject();assertTrue("Iterator should have next item",iter.hasNext());assertTrue("Iterator should have no previous item",!iter.hasPrevious());assertEquals("Iteration next index",0,iter.nextIndex());assertEquals("Iteration previous index",-1,iter.previousIndex());Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);assertTrue("Iterator should have no next item",!iter.hasNext());assertTrue("Iterator should have previous item",iter.hasPrevious());assertEquals("Iteration next index",1,iter.nextIndex());assertEquals("Iteration previous index",0,iter.previousIndex());iterValue=iter.previous();assertEquals("Iteration value is correct",testValue,iterValue);assertTrue("Iterator should have next item",iter.hasNext());assertTrue("Iterator should have no previous item",!iter.hasPrevious());assertEquals("Iteration next index",0,iter.nextIndex());assertEquals("Iteration previous index",-1,iter.previousIndex());iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);assertTrue("Iterator should have no next item",!iter.hasNext());assertTrue("Iterator should have previous item",iter.hasPrevious());assertEquals("Iteration next index",1,iter.nextIndex());assertEquals("Iteration previous index",0,iter.previousIndex());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}iter.previous();try {iter.previous();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testReset(){final ResettableListIterator<E> it=makeObject();assertEquals(true,it.hasNext());assertEquals(false,it.hasPrevious());assertEquals(testValue,it.next());assertEquals(false,it.hasNext());assertEquals(true,it.hasPrevious());it.reset();assertEquals(true,it.hasNext());assertEquals(false,it.hasPrevious());assertEquals(testValue,it.next());assertEquals(false,it.hasNext());assertEquals(true,it.hasPrevious());it.reset();it.reset();assertEquals(true,it.hasNext());}
public void testRepeatedHasNext(){for (int i=0;i <= array.length;i++){assertTrue(iterator.hasNext());}}
@SuppressWarnings("unused")public void testRepeatedNext(){for(final String element : array){iterator.next();}verifyNoMoreElements();}
public void testReturnValues(){verifyElementsInPredicate(new String[0]);verifyElementsInPredicate(new String[]{"a"});verifyElementsInPredicate(new String[]{"b"});verifyElementsInPredicate(new String[]{"c"});verifyElementsInPredicate(new String[]{"a","b"});verifyElementsInPredicate(new String[]{"a","c"});verifyElementsInPredicate(new String[]{"b","c"});verifyElementsInPredicate(new String[]{"a","b","c"});}
/** * Test that when the iterator is changed,the hasNext method returns the correct response for the new iterator.*/@SuppressWarnings("unchecked")public void testSetIterator(){final Iterator<E> iter1=Collections.singleton((E)new Object()).iterator();final Iterator<E> iter2=Collections.<E>emptyList().iterator();final FilterIterator<E> filterIterator=new FilterIterator<E>(iter1);filterIterator.setPredicate(truePredicate());assertEquals(true,filterIterator.hasNext());filterIterator.setIterator(iter2);assertEquals(false,filterIterator.hasNext());}
/** * Test that when the predicate is changed,the hasNext method returns the correct response for the new predicate.*/public void testSetPredicate(){final Iterator<E> iter=Collections.singleton((E)null).iterator();final FilterIterator<E> filterIterator=new FilterIterator<E>(iter);filterIterator.setPredicate(truePredicate());assertEquals(true,filterIterator.hasNext());filterIterator.setPredicate(NotNullPredicate.notNullPredicate());assertEquals(false,filterIterator.hasNext());}
@SuppressWarnings("unchecked")public void testOrdering(){final Set<E> set=setupSet();Iterator<E> it=set.iterator();for (int i=0;i < 10;i++){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}for (int i=0;i < 10;i+=2){assertTrue("Must be able to remove int",set.remove(Integer.toString(i)));}it=set.iterator();for (int i=1;i < 10;i+=2){assertEquals("Sequence is wrong after remove ",Integer.toString(i),it.next());}for (int i=0;i < 10;i++){set.add((E)Integer.toString(i));}assertEquals("Size of set is wrong!",10,set.size());it=set.iterator();for (int i=1;i < 10;i+=2){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}for (int i=0;i < 10;i+=2){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}}
@Override public void testCanonicalEmptyCollectionExists(){}
@Override public void testCanonicalFullCollectionExists(){}
@Test public void testNullArgumentEqualsNullPredicate()throws Exception {assertSame(nullPredicate(),equalPredicate(null));}
@Test public void objectFactoryUsesEqualsForTest()throws Exception {final Predicate<EqualsTestObject> predicate=equalPredicate(FALSE_OBJECT);assertFalse(predicate,FALSE_OBJECT);assertTrue(equalPredicate(TRUE_OBJECT),TRUE_OBJECT);}
@SuppressWarnings("boxing")@Test public void testPredicateTypeCanBeSuperClassOfObject()throws Exception {final Predicate<Number> predicate=equalPredicate((Number)4);assertTrue(predicate,4);}
@SuppressWarnings("unchecked")public void testEntrySet(){Map<K,V> map=makeTestMap();assertTrue("returned entryset should not be null",map.entrySet()!= null);map=decorateMap(new HashMap<K,V>(),null,null);map.put((K)"oneKey",(V)"oneValue");assertTrue("returned entryset should contain one entry",map.entrySet().size()== 1);map=decorateMap(map,null,null);}
@SuppressWarnings("unchecked")public void testPut(){final Map<K,V> map=makeTestMap();try {map.put((K)"Hi",(V)Integer.valueOf(3));fail("Illegal value should raise IllegalArgument");}catch(final IllegalArgumentException e){}try {map.put((K)Integer.valueOf(3),(V)"Hi");fail("Illegal key should raise IllegalArgument");}catch(final IllegalArgumentException e){}assertTrue(!map.containsKey(Integer.valueOf(3)));assertTrue(!map.containsValue(Integer.valueOf(3)));final Map<K,V> map2=new HashMap<K,V>();map2.put((K)"A",(V)"a");map2.put((K)"B",(V)"b");map2.put((K)"C",(V)"c");map2.put((K)"c",(V)Integer.valueOf(3));try {map.putAll(map2);fail("Illegal value should raise IllegalArgument");}catch(final IllegalArgumentException e){}map.put((K)"E",(V)"e");Iterator<Map.Entry<K,V>> iterator=map.entrySet().iterator();try {final Map.Entry<K,V> entry=iterator.next();entry.setValue((V)Integer.valueOf(3));fail("Illegal value should raise IllegalArgument");}catch(final IllegalArgumentException e){}map.put((K)"F",(V)"f");iterator=map.entrySet().iterator();final Map.Entry<K,V> entry=iterator.next();entry.setValue((V)"x");}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final BoundedCollection<E> coll=makeFullCollection();assertSame(coll,UnmodifiableBoundedCollection.unmodifiableBoundedCollection(coll));try {UnmodifiableBoundedCollection.unmodifiableBoundedCollection(null);fail();}catch(final NullPointerException ex){}}
/** * Compare the current serialized form of the Bag against the canonical version in SVN.*/public void testEmptyBagCompatibility()throws IOException,ClassNotFoundException {final Bag<T> bag=makeObject();if (bag instanceof Serializable && !skipSerializedCanonicalTests()&& isTestSerialization()){final Bag<?> bag2=(Bag<?>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));assertTrue("Bag is empty",bag2.size()== 0);assertEquals(bag,bag2);}}
/** * Compare the current serialized form of the Bag against the canonical version in SVN.*/public void testFullBagCompatibility()throws IOException,ClassNotFoundException {final Bag<T> bag=(Bag<T>)makeFullCollection();if (bag instanceof Serializable && !skipSerializedCanonicalTests()&& isTestSerialization()){final Bag<?> bag2=(Bag<?>)readExternalFormFromDisk(getCanonicalFullCollectionName(bag));assertEquals("Bag is the right size",bag.size(),bag2.size());assertEquals(bag,bag2);}}
/** * Tests that the constructor plus add method compares items properly.*/@Test public void testConstructorPlusAdd(){final FixedOrderComparator<String> comparator=new FixedOrderComparator<String>();for(final String topCitie : topCities){comparator.add(topCitie);}final String[]keys=topCities.clone();assertComparatorYieldsOrder(keys,comparator);}
/** * Tests that the array constructor compares items properly.*/@Test public void testArrayConstructor(){final String[]keys=topCities.clone();final String[]topCitiesForTest=topCities.clone();final FixedOrderComparator<String> comparator=new FixedOrderComparator<String>(topCitiesForTest);assertComparatorYieldsOrder(keys,comparator);topCitiesForTest[0]="Brighton";assertComparatorYieldsOrder(keys,comparator);}
/** * Tests the list constructor.*/@Test public void testListConstructor(){final String[]keys=topCities.clone();final List<String> topCitiesForTest=new LinkedList<String>(Arrays.asList(topCities));final FixedOrderComparator<String> comparator=new FixedOrderComparator<String>(topCitiesForTest);assertComparatorYieldsOrder(keys,comparator);topCitiesForTest.set(0,"Brighton");assertComparatorYieldsOrder(keys,comparator);}
/** * Tests addAsEqual method.*/@Test public void testAddAsEqual(){final FixedOrderComparator<String> comparator=new FixedOrderComparator<String>(topCities);comparator.addAsEqual("New York","Minneapolis");assertEquals(0,comparator.compare("New York","Minneapolis"));assertEquals(-1,comparator.compare("Tokyo","Minneapolis"));assertEquals(1,comparator.compare("Shanghai","Minneapolis"));}
/** * Tests whether or not updates are disabled after a comparison is made.*/@Test public void testLock(){final FixedOrderComparator<String> comparator=new FixedOrderComparator<String>(topCities);assertEquals(false,comparator.isLocked());comparator.compare("New York","Tokyo");assertEquals(true,comparator.isLocked());try {comparator.add("Minneapolis");fail("Should have thrown an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}try {comparator.addAsEqual("New York","Minneapolis");fail("Should have thrown an UnsupportedOperationException");}catch(final UnsupportedOperationException e){}}
@Test public void testUnknownObjectBehavior(){FixedOrderComparator<String> comparator=new FixedOrderComparator<String>(topCities);try {comparator.compare("New York","Minneapolis");fail("Should have thrown a IllegalArgumentException");}catch(final IllegalArgumentException e){}try {comparator.compare("Minneapolis","New York");fail("Should have thrown a IllegalArgumentException");}catch(final IllegalArgumentException e){}assertEquals(FixedOrderComparator.UnknownObjectBehavior.EXCEPTION,comparator.getUnknownObjectBehavior());comparator=new FixedOrderComparator<String>(topCities);comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.BEFORE);assertEquals(FixedOrderComparator.UnknownObjectBehavior.BEFORE,comparator.getUnknownObjectBehavior());LinkedList<String> keys=new LinkedList<String>(Arrays.asList(topCities));keys.addFirst("Minneapolis");assertComparatorYieldsOrder(keys.toArray(new String[0]),comparator);assertEquals(-1,comparator.compare("Minneapolis","New York"));assertEquals(1,comparator.compare("New York","Minneapolis"));assertEquals(0,comparator.compare("Minneapolis","St Paul"));comparator=new FixedOrderComparator<String>(topCities);comparator.setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior.AFTER);keys=new LinkedList<String>(Arrays.asList(topCities));keys.add("Minneapolis");assertComparatorYieldsOrder(keys.toArray(new String[0]),comparator);assertEquals(1,comparator.compare("Minneapolis","New York"));assertEquals(-1,comparator.compare("New York","Minneapolis"));assertEquals(0,comparator.compare("Minneapolis","St Paul"));}
@Test public void testExceptionTransformer(){assertNotNull(TransformerUtils.exceptionTransformer());assertSame(TransformerUtils.exceptionTransformer(),TransformerUtils.exceptionTransformer());try {TransformerUtils.exceptionTransformer().transform(null);}catch(final FunctorException ex){try {TransformerUtils.exceptionTransformer().transform(cString);}catch(final FunctorException ex2){return;}}fail();}
@Test public void testNullTransformer(){assertNotNull(TransformerUtils.nullTransformer());assertSame(TransformerUtils.nullTransformer(),TransformerUtils.nullTransformer());assertEquals(null,TransformerUtils.nullTransformer().transform(null));assertEquals(null,TransformerUtils.nullTransformer().transform(cObject));assertEquals(null,TransformerUtils.nullTransformer().transform(cString));assertEquals(null,TransformerUtils.nullTransformer().transform(cInteger));}
@Test public void testNopTransformer(){assertNotNull(TransformerUtils.nullTransformer());assertSame(TransformerUtils.nullTransformer(),TransformerUtils.nullTransformer());assertEquals(null,TransformerUtils.nopTransformer().transform(null));assertEquals(cObject,TransformerUtils.nopTransformer().transform(cObject));assertEquals(cString,TransformerUtils.nopTransformer().transform(cString));assertEquals(cInteger,TransformerUtils.nopTransformer().transform(cInteger));}
@Test public void testConstantTransformer(){assertEquals(cObject,TransformerUtils.constantTransformer(cObject).transform(null));assertEquals(cObject,TransformerUtils.constantTransformer(cObject).transform(cObject));assertEquals(cObject,TransformerUtils.constantTransformer(cObject).transform(cString));assertEquals(cObject,TransformerUtils.constantTransformer(cObject).transform(cInteger));assertSame(ConstantTransformer.NULL_INSTANCE,TransformerUtils.constantTransformer(null));}
@Test public void testCloneTransformer(){assertEquals(null,TransformerUtils.cloneTransformer().transform(null));assertEquals(cString,TransformerUtils.cloneTransformer().transform(cString));assertEquals(cInteger,TransformerUtils.cloneTransformer().transform(cInteger));try {assertEquals(cObject,TransformerUtils.cloneTransformer().transform(cObject));}catch(final IllegalArgumentException ex){return;}fail();}
@Test @SuppressWarnings("boxing")public void testMapTransformer(){final Map<Object,Integer> map=new HashMap<Object,Integer>();map.put(null,0);map.put(cObject,1);map.put(cString,2);assertEquals(Integer.valueOf(0),TransformerUtils.mapTransformer(map).transform(null));assertEquals(Integer.valueOf(1),TransformerUtils.mapTransformer(map).transform(cObject));assertEquals(Integer.valueOf(2),TransformerUtils.mapTransformer(map).transform(cString));assertEquals(null,TransformerUtils.mapTransformer(map).transform(cInteger));assertSame(ConstantTransformer.NULL_INSTANCE,TransformerUtils.mapTransformer(null));}
@Test public void testExecutorTransformer(){assertEquals(null,TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(null));assertEquals(cObject,TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cObject));assertEquals(cString,TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cString));assertEquals(cInteger,TransformerUtils.asTransformer(ClosureUtils.nopClosure()).transform(cInteger));try {TransformerUtils.asTransformer((Closure<Object>)null);}catch(final NullPointerException ex){return;}fail();}
@Test public void testPredicateTransformer(){assertEquals(Boolean.TRUE,TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(null));assertEquals(Boolean.TRUE,TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cObject));assertEquals(Boolean.TRUE,TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cString));assertEquals(Boolean.TRUE,TransformerUtils.asTransformer(TruePredicate.truePredicate()).transform(cInteger));try {TransformerUtils.asTransformer((Predicate<Object>)null);}catch(final IllegalArgumentException ex){return;}fail();}
@Test public void testFactoryTransformer(){assertEquals(null,TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(null));assertEquals(null,TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cObject));assertEquals(null,TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cString));assertEquals(null,TransformerUtils.asTransformer(FactoryUtils.nullFactory()).transform(cInteger));try {TransformerUtils.asTransformer((Factory<Object>)null);}catch(final NullPointerException ex){return;}fail();}
@Test @SuppressWarnings("unchecked")public void testChainedTransformer(){final Transformer<Object,Object> a=TransformerUtils.<Object,Object>constantTransformer("A");final Transformer<Object,Object> b=TransformerUtils.constantTransformer((Object)"B");assertEquals("A",TransformerUtils.chainedTransformer(b,a).transform(null));assertEquals("B",TransformerUtils.chainedTransformer(a,b).transform(null));assertEquals("A",TransformerUtils.chainedTransformer(new Transformer[]{b,a}).transform(null));Collection<Transformer<Object,Object>> coll=new ArrayList<Transformer<Object,Object>>();coll.add(b);coll.add(a);assertEquals("A",TransformerUtils.chainedTransformer(coll).transform(null));assertSame(NOPTransformer.INSTANCE,TransformerUtils.chainedTransformer(new Transformer[0]));assertSame(NOPTransformer.INSTANCE,TransformerUtils.chainedTransformer(Collections.<Transformer<Object,Object>>emptyList()));try {TransformerUtils.chainedTransformer(null,null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.chainedTransformer((Transformer[])null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.chainedTransformer((Collection<Transformer<Object,Object>>)null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.chainedTransformer(new Transformer[]{null,null});fail();}catch(final NullPointerException ex){}try {coll=new ArrayList<Transformer<Object,Object>>();coll.add(null);coll.add(null);TransformerUtils.chainedTransformer(coll);fail();}catch(final NullPointerException ex){}}
@Test public void testIfTransformer(){final Transformer<Object,String> a=TransformerUtils.constantTransformer("A");final Transformer<Object,String> b=TransformerUtils.constantTransformer("B");final Transformer<Object,String> c=TransformerUtils.constantTransformer("C");assertEquals("A",TransformerUtils.ifTransformer(TruePredicate.truePredicate(),a,b).transform(null));assertEquals("B",TransformerUtils.ifTransformer(FalsePredicate.falsePredicate(),a,b).transform(null));Predicate<Integer> lessThanFivePredicate=new Predicate<Integer>(){@Override public boolean evaluate(Integer value){return value < 5;}};assertEquals("A",TransformerUtils.<Integer,String>ifTransformer(lessThanFivePredicate,a,b).transform(1));assertEquals("B",TransformerUtils.<Integer,String>ifTransformer(lessThanFivePredicate,a,b).transform(5));Predicate<String> equalsAPredicate=EqualPredicate.equalPredicate("A");assertEquals("C",TransformerUtils.<String>ifTransformer(equalsAPredicate,c).transform("A"));assertEquals("B",TransformerUtils.<String>ifTransformer(equalsAPredicate,c).transform("B"));try {TransformerUtils.ifTransformer(null,null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.ifTransformer(TruePredicate.truePredicate(),null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.ifTransformer(null,ConstantTransformer.constantTransformer("A"));fail();}catch(final NullPointerException ex){}try {TransformerUtils.ifTransformer(null,null,null);fail();}catch(final NullPointerException ex){}}
@Test @SuppressWarnings("unchecked")public void testSwitchTransformer(){final Transformer<String,String> a=TransformerUtils.constantTransformer("A");final Transformer<String,String> b=TransformerUtils.constantTransformer("B");final Transformer<String,String> c=TransformerUtils.constantTransformer("C");assertEquals("A",TransformerUtils.switchTransformer(TruePredicate.truePredicate(),a,b).transform(null));assertEquals("B",TransformerUtils.switchTransformer(FalsePredicate.falsePredicate(),a,b).transform(null));assertEquals(null,TransformerUtils.<Object,String>switchTransformer(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Transformer[]{a,b}).transform("WELL"));assertEquals("A",TransformerUtils.switchTransformer(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Transformer[]{a,b}).transform("HELLO"));assertEquals("B",TransformerUtils.switchTransformer(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Transformer[]{a,b}).transform("THERE"));assertEquals("C",TransformerUtils.switchTransformer(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Transformer[]{a,b},c).transform("WELL"));Map<Predicate<String>,Transformer<String,String>> map=new HashMap<Predicate<String>,Transformer<String,String>>();map.put(EqualPredicate.equalPredicate("HELLO"),a);map.put(EqualPredicate.equalPredicate("THERE"),b);assertEquals(null,TransformerUtils.switchTransformer(map).transform("WELL"));assertEquals("A",TransformerUtils.switchTransformer(map).transform("HELLO"));assertEquals("B",TransformerUtils.switchTransformer(map).transform("THERE"));map.put(null,c);assertEquals("C",TransformerUtils.switchTransformer(map).transform("WELL"));assertEquals(ConstantTransformer.NULL_INSTANCE,TransformerUtils.switchTransformer(new Predicate[0],new Transformer[0]));assertEquals(ConstantTransformer.NULL_INSTANCE,TransformerUtils.switchTransformer(new HashMap<Predicate<Object>,Transformer<Object,Object>>()));map=new HashMap<Predicate<String>,Transformer<String,String>>();map.put(null,null);assertEquals(ConstantTransformer.NULL_INSTANCE,TransformerUtils.switchTransformer(map));try {TransformerUtils.switchTransformer(null,null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.switchTransformer((Predicate[])null,(Transformer[])null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.switchTransformer((Map<Predicate<Object>,Transformer<Object,Object>>)null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.switchTransformer(new Predicate[2],new Transformer[2]);fail();}catch(final NullPointerException ex){}try {TransformerUtils.switchTransformer(new Predicate[]{TruePredicate.truePredicate()},new Transformer[]{a,b});fail();}catch(final IllegalArgumentException ex){}}
@Test public void testSwitchMapTransformer(){final Transformer<String,String> a=TransformerUtils.constantTransformer("A");final Transformer<String,String> b=TransformerUtils.constantTransformer("B");final Transformer<String,String> c=TransformerUtils.constantTransformer("C");Map<String,Transformer<String,String>> map=new HashMap<String,Transformer<String,String>>();map.put("HELLO",a);map.put("THERE",b);assertEquals(null,TransformerUtils.switchMapTransformer(map).transform("WELL"));assertEquals("A",TransformerUtils.switchMapTransformer(map).transform("HELLO"));assertEquals("B",TransformerUtils.switchMapTransformer(map).transform("THERE"));map.put(null,c);assertEquals("C",TransformerUtils.switchMapTransformer(map).transform("WELL"));assertSame(ConstantTransformer.NULL_INSTANCE,TransformerUtils.switchMapTransformer(new HashMap<Object,Transformer<Object,Object>>()));map=new HashMap<String,Transformer<String,String>>();map.put(null,null);assertSame(ConstantTransformer.NULL_INSTANCE,TransformerUtils.switchMapTransformer(map));try {TransformerUtils.switchMapTransformer(null);fail();}catch(final NullPointerException ex){}}
@Test public void testInvokerTransformer(){final List<Object> list=new ArrayList<Object>();assertEquals(Integer.valueOf(0),TransformerUtils.invokerTransformer("size").transform(list));list.add(new Object());assertEquals(Integer.valueOf(1),TransformerUtils.invokerTransformer("size").transform(list));assertEquals(null,TransformerUtils.invokerTransformer("size").transform(null));try {TransformerUtils.invokerTransformer(null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.invokerTransformer("noSuchMethod").transform(new Object());fail();}catch(final FunctorException ex){}}
@Test public void testInvokerTransformer2(){final List<Object> list=new ArrayList<Object>();assertEquals(Boolean.FALSE,TransformerUtils.invokerTransformer("contains",new Class[]{Object.class},new Object[]{cString}).transform(list));list.add(cString);assertEquals(Boolean.TRUE,TransformerUtils.invokerTransformer("contains",new Class[]{Object.class},new Object[]{cString}).transform(list));assertEquals(null,TransformerUtils.invokerTransformer("contains",new Class[]{Object.class},new Object[]{cString}).transform(null));try {TransformerUtils.invokerTransformer(null,null,null);fail();}catch(final NullPointerException ex){}try {TransformerUtils.invokerTransformer("noSuchMethod",new Class[]{Object.class},new Object[]{cString}).transform(new Object());fail();}catch(final FunctorException ex){}try {TransformerUtils.invokerTransformer("badArgs",null,new Object[]{cString});fail();}catch(final IllegalArgumentException ex){}try {TransformerUtils.invokerTransformer("badArgs",new Class[]{Object.class},null);fail();}catch(final IllegalArgumentException ex){}try {TransformerUtils.invokerTransformer("badArgs",new Class[]{},new Object[]{cString});fail();}catch(final IllegalArgumentException ex){}}
@Test public void testStringValueTransformer(){assertNotNull("StringValueTransformer should NEVER return a null value.",TransformerUtils.stringValueTransformer().transform(null));assertEquals("StringValueTransformer should return \"null\" when given a null argument.","null",TransformerUtils.stringValueTransformer().transform(null));assertEquals("StringValueTransformer should return toString value","6",TransformerUtils.stringValueTransformer().transform(Integer.valueOf(6)));}
@Test public void testInstantiateTransformerNull(){try {TransformerUtils.instantiateTransformer(null,new Object[]{"str"});fail();}catch(final IllegalArgumentException ex){}try {TransformerUtils.instantiateTransformer(new Class[]{},new Object[]{"str"});fail();}catch(final IllegalArgumentException ex){}Transformer<Class<?>,Object> trans=TransformerUtils.instantiateTransformer(new Class[]{Long.class},new Object[]{null});try {trans.transform(String.class);fail();}catch(final FunctorException ex){}trans=TransformerUtils.instantiateTransformer();assertEquals("",trans.transform(String.class));trans=TransformerUtils.instantiateTransformer(new Class[]{Long.TYPE},new Object[]{new Long(1000L)});assertEquals(new Date(1000L),trans.transform(Date.class));}
/** * Test that all Transformer singletons hold singleton pattern in serialization/deserialization process.*/@Test public void testSingletonPatternInSerialization(){final Object[]singletones=new Object[]{ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()};for(final Object original : singletones){TestUtils.assertSameAfterSerialization("Singleton pattern broken for " + original.getClass(),original);}}
public void testMapIterator(){assertTrue(makeEmptyIterator()instanceof Unmodifiable);}
public void testDecorateFactory(){MapIterator<K,V> it=makeObject();assertSame(it,UnmodifiableMapIterator.unmodifiableMapIterator(it));it=getMap().mapIterator();assertTrue(it != UnmodifiableMapIterator.unmodifiableMapIterator(it));try {UnmodifiableMapIterator.unmodifiableMapIterator(null);fail();}catch(final NullPointerException ex){}}
public void testNewStack(){final ArrayStack<E> stack=makeObject();assertTrue("New stack is empty",stack.empty());assertEquals("New stack has size zero",0,stack.size());try {stack.peek();fail("peek()should have thrown EmptyStackException");}catch(final EmptyStackException e){}try {stack.pop();fail("pop()should have thrown EmptyStackException");}catch(final EmptyStackException e){}}
@SuppressWarnings("unchecked")public void testPushPeekPop(){final ArrayStack<E> stack=makeObject();stack.push((E)"First Item");assertTrue("Stack is not empty",!stack.empty());assertEquals("Stack size is one",1,stack.size());assertEquals("Top item is 'First Item'","First Item",(String)stack.peek());assertEquals("Stack size is one",1,stack.size());stack.push((E)"Second Item");assertEquals("Stack size is two",2,stack.size());assertEquals("Top item is 'Second Item'","Second Item",(String)stack.peek());assertEquals("Stack size is two",2,stack.size());assertEquals("Popped item is 'Second Item'","Second Item",(String)stack.pop());assertEquals("Top item is 'First Item'","First Item",(String)stack.peek());assertEquals("Stack size is one",1,stack.size());assertEquals("Popped item is 'First Item'","First Item",(String)stack.pop());assertEquals("Stack size is zero",0,stack.size());}
@Override @SuppressWarnings("unchecked")public void testSearch(){final ArrayStack<E> stack=makeObject();stack.push((E)"First Item");stack.push((E)"Second Item");assertEquals("Top item is 'Second Item'",1,stack.search("Second Item"));assertEquals("Next Item is 'First Item'",2,stack.search("First Item"));assertEquals("Cannot find 'Missing Item'",-1,stack.search("Missing Item"));}
public void testIteratorConstructor_null1(){final Iterator<Object> it=new ObjectGraphIterator<Object>(null);assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}try {it.remove();fail();}catch(final IllegalStateException ex){}}
public void testIteratorConstructor_null_next(){final Iterator<Object> it=new ObjectGraphIterator<Object>(null);try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteratorConstructor_null_remove(){final Iterator<Object> it=new ObjectGraphIterator<Object>(null);try {it.remove();fail();}catch(final IllegalStateException ex){}}
public void testIteratorConstructorIteration_Empty(){final List<Iterator<Object>> iteratorList=new ArrayList<Iterator<Object>>();final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator());assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}try {it.remove();fail();}catch(final IllegalStateException ex){}}
public void testIteratorConstructorIteration_Simple(){final List<Iterator<String>> iteratorList=new ArrayList<Iterator<String>>();iteratorList.add(list1.iterator());iteratorList.add(list2.iterator());iteratorList.add(list3.iterator());final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator());for (int i=0;i < 6;i++){assertEquals(true,it.hasNext());assertEquals(testArray[i],it.next());}assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteratorConstructorIteration_SimpleNoHasNext(){final List<Iterator<String>> iteratorList=new ArrayList<Iterator<String>>();iteratorList.add(list1.iterator());iteratorList.add(list2.iterator());iteratorList.add(list3.iterator());final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator());for (int i=0;i < 6;i++){assertEquals(testArray[i],it.next());}try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteratorConstructorIteration_WithEmptyIterators(){final List<Iterator<String>> iteratorList=new ArrayList<Iterator<String>>();iteratorList.add(IteratorUtils.<String>emptyIterator());iteratorList.add(list1.iterator());iteratorList.add(IteratorUtils.<String>emptyIterator());iteratorList.add(list2.iterator());iteratorList.add(IteratorUtils.<String>emptyIterator());iteratorList.add(list3.iterator());iteratorList.add(IteratorUtils.<String>emptyIterator());final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator());for (int i=0;i < 6;i++){assertEquals(true,it.hasNext());assertEquals(testArray[i],it.next());}assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteratorConstructorRemove(){final List<Iterator<String>> iteratorList=new ArrayList<Iterator<String>>();iteratorList.add(list1.iterator());iteratorList.add(list2.iterator());iteratorList.add(list3.iterator());final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator());for (int i=0;i < 6;i++){assertEquals(testArray[i],it.next());it.remove();}assertEquals(false,it.hasNext());assertEquals(0,list1.size());assertEquals(0,list2.size());assertEquals(0,list3.size());}
public void testIteration_IteratorOfIterators(){final List<Iterator<String>> iteratorList=new ArrayList<Iterator<String>>();iteratorList.add(list1.iterator());iteratorList.add(list2.iterator());iteratorList.add(list3.iterator());final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator(),null);for (int i=0;i < 6;i++){assertEquals(true,it.hasNext());assertEquals(testArray[i],it.next());}assertEquals(false,it.hasNext());}
public void testIteration_IteratorOfIteratorsWithEmptyIterators(){final List<Iterator<String>> iteratorList=new ArrayList<Iterator<String>>();iteratorList.add(IteratorUtils.<String>emptyIterator());iteratorList.add(list1.iterator());iteratorList.add(IteratorUtils.<String>emptyIterator());iteratorList.add(list2.iterator());iteratorList.add(IteratorUtils.<String>emptyIterator());iteratorList.add(list3.iterator());iteratorList.add(IteratorUtils.<String>emptyIterator());final Iterator<Object> it=new ObjectGraphIterator<Object>(iteratorList.iterator(),null);for (int i=0;i < 6;i++){assertEquals(true,it.hasNext());assertEquals(testArray[i],it.next());}assertEquals(false,it.hasNext());}
public void testIteration_RootNull(){final Iterator<Object> it=new ObjectGraphIterator<Object>(null,null);assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}try {it.remove();fail();}catch(final IllegalStateException ex){}}
public void testIteration_RootNoTransformer(){final Forest forest=new Forest();final Iterator<Object> it=new ObjectGraphIterator<Object>(forest,null);assertEquals(true,it.hasNext());assertSame(forest,it.next());assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteration_Transformed1(){final Forest forest=new Forest();final Leaf l1=forest.addTree().addBranch().addLeaf();final Iterator<Object> it=new ObjectGraphIterator<Object>(forest,new LeafFinder());assertEquals(true,it.hasNext());assertSame(l1,it.next());assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteration_Transformed2(){final Forest forest=new Forest();forest.addTree();forest.addTree();forest.addTree();final Branch b1=forest.getTree(0).addBranch();final Branch b2=forest.getTree(0).addBranch();final Branch b3=forest.getTree(2).addBranch();forest.getTree(2).addBranch();final Branch b5=forest.getTree(2).addBranch();final Leaf l1=b1.addLeaf();final Leaf l2=b1.addLeaf();final Leaf l3=b2.addLeaf();final Leaf l4=b3.addLeaf();final Leaf l5=b5.addLeaf();final Iterator<Object> it=new ObjectGraphIterator<Object>(forest,new LeafFinder());assertEquals(true,it.hasNext());assertSame(l1,it.next());assertEquals(true,it.hasNext());assertSame(l2,it.next());assertEquals(true,it.hasNext());assertSame(l3,it.next());assertEquals(true,it.hasNext());assertSame(l4,it.next());assertEquals(true,it.hasNext());assertSame(l5,it.next());assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}}
public void testIteration_Transformed3(){final Forest forest=new Forest();forest.addTree();forest.addTree();forest.addTree();final Branch b1=forest.getTree(1).addBranch();final Branch b2=forest.getTree(1).addBranch();final Branch b3=forest.getTree(2).addBranch();final Branch b4=forest.getTree(2).addBranch();forest.getTree(2).addBranch();final Leaf l1=b1.addLeaf();final Leaf l2=b1.addLeaf();final Leaf l3=b2.addLeaf();final Leaf l4=b3.addLeaf();final Leaf l5=b4.addLeaf();final Iterator<Object> it=new ObjectGraphIterator<Object>(forest,new LeafFinder());assertEquals(true,it.hasNext());assertSame(l1,it.next());assertEquals(true,it.hasNext());assertSame(l2,it.next());assertEquals(true,it.hasNext());assertSame(l3,it.next());assertEquals(true,it.hasNext());assertSame(l4,it.next());assertEquals(true,it.hasNext());assertSame(l5,it.next());assertEquals(false,it.hasNext());try {it.next();fail();}catch(final NoSuchElementException ex){}}
@Test public void getCardinalityMap(){final Map<Number,Integer> freqA=CollectionUtils.<Number>getCardinalityMap(iterableA);assertEquals(1,(int)freqA.get(1));assertEquals(2,(int)freqA.get(2));assertEquals(3,(int)freqA.get(3));assertEquals(4,(int)freqA.get(4));assertNull(freqA.get(5));final Map<Long,Integer> freqB=CollectionUtils.getCardinalityMap(iterableB);assertNull(freqB.get(1L));assertEquals(4,(int)freqB.get(2L));assertEquals(3,(int)freqB.get(3L));assertEquals(2,(int)freqB.get(4L));assertEquals(1,(int)freqB.get(5L));}
@Test @Deprecated public void cardinality(){assertEquals(1,CollectionUtils.cardinality(1,iterableA));assertEquals(2,CollectionUtils.cardinality(2,iterableA));assertEquals(3,CollectionUtils.cardinality(3,iterableA));assertEquals(4,CollectionUtils.cardinality(4,iterableA));assertEquals(0,CollectionUtils.cardinality(5,iterableA));assertEquals(0,CollectionUtils.cardinality(1L,iterableB));assertEquals(4,CollectionUtils.cardinality(2L,iterableB));assertEquals(3,CollectionUtils.cardinality(3L,iterableB));assertEquals(2,CollectionUtils.cardinality(4L,iterableB));assertEquals(1,CollectionUtils.cardinality(5L,iterableB));assertEquals(0,CollectionUtils.cardinality(2L,iterableA2));assertEquals(0,CollectionUtils.cardinality(2,iterableB2));final Set<String> set=new HashSet<String>();set.add("A");set.add("C");set.add("E");set.add("E");assertEquals(1,CollectionUtils.cardinality("A",set));assertEquals(0,CollectionUtils.cardinality("B",set));assertEquals(1,CollectionUtils.cardinality("C",set));assertEquals(0,CollectionUtils.cardinality("D",set));assertEquals(1,CollectionUtils.cardinality("E",set));final Bag<String> bag=new HashBag<String>();bag.add("A",3);bag.add("C");bag.add("E");bag.add("E");assertEquals(3,CollectionUtils.cardinality("A",bag));assertEquals(0,CollectionUtils.cardinality("B",bag));assertEquals(1,CollectionUtils.cardinality("C",bag));assertEquals(0,CollectionUtils.cardinality("D",bag));assertEquals(2,CollectionUtils.cardinality("E",bag));}
@Test @Deprecated public void cardinalityOfNull(){final List<String> list=new ArrayList<String>();assertEquals(0,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertNull(freq.get(null));}list.add("A");assertEquals(0,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertNull(freq.get(null));}list.add(null);assertEquals(1,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertEquals(Integer.valueOf(1),freq.get(null));}list.add("B");assertEquals(1,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertEquals(Integer.valueOf(1),freq.get(null));}list.add(null);assertEquals(2,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertEquals(Integer.valueOf(2),freq.get(null));}list.add("B");assertEquals(2,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertEquals(Integer.valueOf(2),freq.get(null));}list.add(null);assertEquals(3,CollectionUtils.cardinality(null,list));{final Map<String,Integer> freq=CollectionUtils.getCardinalityMap(list);assertEquals(Integer.valueOf(3),freq.get(null));}}
@Test public void containsAll(){final Collection<String> empty=new ArrayList<String>(0);final Collection<String> one=new ArrayList<String>(1);one.add("1");final Collection<String> two=new ArrayList<String>(1);two.add("2");final Collection<String> three=new ArrayList<String>(1);three.add("3");final Collection<String> odds=new ArrayList<String>(2);odds.add("1");odds.add("3");final Collection<String> multiples=new ArrayList<String>(3);multiples.add("1");multiples.add("3");multiples.add("1");assertTrue("containsAll({1},{1,3})should return false.",!CollectionUtils.containsAll(one,odds));assertTrue("containsAll({1,3},{1})should return true.",CollectionUtils.containsAll(odds,one));assertTrue("containsAll({3},{1,3})should return false.",!CollectionUtils.containsAll(three,odds));assertTrue("containsAll({1,3},{3})should return true.",CollectionUtils.containsAll(odds,three));assertTrue("containsAll({2},{2})should return true.",CollectionUtils.containsAll(two,two));assertTrue("containsAll({1,3},{1,3})should return true.",CollectionUtils.containsAll(odds,odds));assertTrue("containsAll({2},{1,3})should return false.",!CollectionUtils.containsAll(two,odds));assertTrue("containsAll({1,3},{2})should return false.",!CollectionUtils.containsAll(odds,two));assertTrue("containsAll({1},{3})should return false.",!CollectionUtils.containsAll(one,three));assertTrue("containsAll({3},{1})should return false.",!CollectionUtils.containsAll(three,one));assertTrue("containsAll({1,3},{})should return true.",CollectionUtils.containsAll(odds,empty));assertTrue("containsAll({},{1,3})should return false.",!CollectionUtils.containsAll(empty,odds));assertTrue("containsAll({},{})should return true.",CollectionUtils.containsAll(empty,empty));assertTrue("containsAll({1,3},{1,3,1})should return true.",CollectionUtils.containsAll(odds,multiples));assertTrue("containsAll({1,3,1},{1,3,1})should return true.",CollectionUtils.containsAll(odds,odds));}
@Test public void containsAny(){final Collection<String> empty=new ArrayList<String>(0);final Collection<String> one=new ArrayList<String>(1);one.add("1");final Collection<String> two=new ArrayList<String>(1);two.add("2");final Collection<String> three=new ArrayList<String>(1);three.add("3");final Collection<String> odds=new ArrayList<String>(2);odds.add("1");odds.add("3");assertTrue("containsAny({1},{1,3})should return true.",CollectionUtils.containsAny(one,odds));assertTrue("containsAny({1,3},{1})should return true.",CollectionUtils.containsAny(odds,one));assertTrue("containsAny({3},{1,3})should return true.",CollectionUtils.containsAny(three,odds));assertTrue("containsAny({1,3},{3})should return true.",CollectionUtils.containsAny(odds,three));assertTrue("containsAny({2},{2})should return true.",CollectionUtils.containsAny(two,two));assertTrue("containsAny({1,3},{1,3})should return true.",CollectionUtils.containsAny(odds,odds));assertTrue("containsAny({2},{1,3})should return false.",!CollectionUtils.containsAny(two,odds));assertTrue("containsAny({1,3},{2})should return false.",!CollectionUtils.containsAny(odds,two));assertTrue("containsAny({1},{3})should return false.",!CollectionUtils.containsAny(one,three));assertTrue("containsAny({3},{1})should return false.",!CollectionUtils.containsAny(three,one));assertTrue("containsAny({1,3},{})should return false.",!CollectionUtils.containsAny(odds,empty));assertTrue("containsAny({},{1,3})should return false.",!CollectionUtils.containsAny(empty,odds));assertTrue("containsAny({},{})should return false.",!CollectionUtils.containsAny(empty,empty));}
@Test public void union(){final Collection<Integer> col=CollectionUtils.union(iterableA,iterableC);final Map<Integer,Integer> freq=CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1),freq.get(1));assertEquals(Integer.valueOf(4),freq.get(2));assertEquals(Integer.valueOf(3),freq.get(3));assertEquals(Integer.valueOf(4),freq.get(4));assertEquals(Integer.valueOf(1),freq.get(5));final Collection<Number> col2=CollectionUtils.union(collectionC2,iterableA);final Map<Number,Integer> freq2=CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1),freq2.get(1));assertEquals(Integer.valueOf(4),freq2.get(2));assertEquals(Integer.valueOf(3),freq2.get(3));assertEquals(Integer.valueOf(4),freq2.get(4));assertEquals(Integer.valueOf(1),freq2.get(5));}
@Test public void intersection(){final Collection<Integer> col=CollectionUtils.intersection(iterableA,iterableC);final Map<Integer,Integer> freq=CollectionUtils.getCardinalityMap(col);assertNull(freq.get(1));assertEquals(Integer.valueOf(2),freq.get(2));assertEquals(Integer.valueOf(3),freq.get(3));assertEquals(Integer.valueOf(2),freq.get(4));assertNull(freq.get(5));final Collection<Number> col2=CollectionUtils.intersection(collectionC2,collectionA);final Map<Number,Integer> freq2=CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(1));assertEquals(Integer.valueOf(2),freq2.get(2));assertEquals(Integer.valueOf(3),freq2.get(3));assertEquals(Integer.valueOf(2),freq2.get(4));assertNull(freq2.get(5));}
@Test public void disjunction(){final Collection<Integer> col=CollectionUtils.disjunction(iterableA,iterableC);final Map<Integer,Integer> freq=CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1),freq.get(1));assertEquals(Integer.valueOf(2),freq.get(2));assertNull(freq.get(3));assertEquals(Integer.valueOf(2),freq.get(4));assertEquals(Integer.valueOf(1),freq.get(5));final Collection<Number> col2=CollectionUtils.disjunction(collectionC2,collectionA);final Map<Number,Integer> freq2=CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1),freq2.get(1));assertEquals(Integer.valueOf(2),freq2.get(2));assertNull(freq2.get(3));assertEquals(Integer.valueOf(2),freq2.get(4));assertEquals(Integer.valueOf(1),freq2.get(5));}
@Test public void testDisjunctionAsUnionMinusIntersection(){final Collection<Number> dis=CollectionUtils.<Number>disjunction(collectionA,collectionC);final Collection<Number> un=CollectionUtils.<Number>union(collectionA,collectionC);final Collection<Number> inter=CollectionUtils.<Number>intersection(collectionA,collectionC);assertTrue(CollectionUtils.isEqualCollection(dis,CollectionUtils.subtract(un,inter)));}
@Test public void testDisjunctionAsSymmetricDifference(){final Collection<Number> dis=CollectionUtils.<Number>disjunction(collectionA,collectionC);final Collection<Number> amb=CollectionUtils.<Number>subtract(collectionA,collectionC);final Collection<Number> bma=CollectionUtils.<Number>subtract(collectionC,collectionA);assertTrue(CollectionUtils.isEqualCollection(dis,CollectionUtils.union(amb,bma)));}
@Test public void testSubtract(){final Collection<Integer> col=CollectionUtils.subtract(iterableA,iterableC);final Map<Integer,Integer> freq=CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1),freq.get(1));assertNull(freq.get(2));assertNull(freq.get(3));assertEquals(Integer.valueOf(2),freq.get(4));assertNull(freq.get(5));final Collection<Number> col2=CollectionUtils.subtract(collectionC2,collectionA);final Map<Number,Integer> freq2=CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1),freq2.get(5));assertNull(freq2.get(4));assertNull(freq2.get(3));assertEquals(Integer.valueOf(2),freq2.get(2));assertNull(freq2.get(1));}
@Test public void testSubtractWithPredicate(){final Predicate<Number> predicate=new Predicate<Number>(){@Override public boolean evaluate(final Number n){return n.longValue()> 3L;}};final Collection<Number> col=CollectionUtils.subtract(iterableA,collectionC,predicate);final Map<Number,Integer> freq2=CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1),freq2.get(1));assertEquals(Integer.valueOf(2),freq2.get(2));assertEquals(Integer.valueOf(3),freq2.get(3));assertEquals(Integer.valueOf(2),freq2.get(4));assertNull(freq2.get(5));}
@Test public void testIsSubCollectionOfSelf(){assertTrue(CollectionUtils.isSubCollection(collectionA,collectionA));assertTrue(CollectionUtils.isSubCollection(collectionB,collectionB));}
@Test public void testIsSubCollection(){assertTrue(!CollectionUtils.isSubCollection(collectionA,collectionC));assertTrue(!CollectionUtils.isSubCollection(collectionC,collectionA));}
@Test public void testIsSubCollection2(){final Collection<Integer> c=new ArrayList<Integer>();assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(1);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(2);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(2);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(3);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(3);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(3);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA,c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c,collectionA));assertTrue(CollectionUtils.isSubCollection(collectionA,c));c.add(5);assertTrue(!CollectionUtils.isSubCollection(c,collectionA));assertTrue(CollectionUtils.isSubCollection(collectionA,c));}
@Test public void testIsEqualCollectionToSelf(){assertTrue(CollectionUtils.isEqualCollection(collectionA,collectionA));assertTrue(CollectionUtils.isEqualCollection(collectionB,collectionB));}
@Test public void testIsEqualCollection(){assertTrue(!CollectionUtils.isEqualCollection(collectionA,collectionC));assertTrue(!CollectionUtils.isEqualCollection(collectionC,collectionA));}
@Test public void testIsEqualCollectionReturnsFalse(){final List<Integer> b=new ArrayList<Integer>(collectionA);b.remove(1);b.add(5);assertFalse(CollectionUtils.isEqualCollection(collectionA,b));assertFalse(CollectionUtils.isEqualCollection(b,collectionA));}
@Test public void testIsEqualCollection2(){final Collection<String> a=new ArrayList<String>();final Collection<String> b=new ArrayList<String>();assertTrue(CollectionUtils.isEqualCollection(a,b));assertTrue(CollectionUtils.isEqualCollection(b,a));a.add("1");assertTrue(!CollectionUtils.isEqualCollection(a,b));assertTrue(!CollectionUtils.isEqualCollection(b,a));b.add("1");assertTrue(CollectionUtils.isEqualCollection(a,b));assertTrue(CollectionUtils.isEqualCollection(b,a));a.add("2");assertTrue(!CollectionUtils.isEqualCollection(a,b));assertTrue(!CollectionUtils.isEqualCollection(b,a));b.add("2");assertTrue(CollectionUtils.isEqualCollection(a,b));assertTrue(CollectionUtils.isEqualCollection(b,a));a.add("1");assertTrue(!CollectionUtils.isEqualCollection(a,b));assertTrue(!CollectionUtils.isEqualCollection(b,a));b.add("1");assertTrue(CollectionUtils.isEqualCollection(a,b));assertTrue(CollectionUtils.isEqualCollection(b,a));}
@Test public void testIsEqualCollectionEquator(){final Collection<Integer> collB=CollectionUtils.collect(collectionB,TRANSFORM_TO_INTEGER);final Equator<Integer> e=new Equator<Integer>(){@Override public boolean equate(final Integer o1,final Integer o2){if (o1.intValue()% 2 == 0 ^ o2.intValue()% 2 == 0){return false;}else {return true;}}@Override public int hash(final Integer o){return o.intValue()% 2 == 0 ? Integer.valueOf(0).hashCode(): Integer.valueOf(1).hashCode();}};assertTrue(CollectionUtils.isEqualCollection(collectionA,collectionA,e));assertTrue(CollectionUtils.isEqualCollection(collectionA,collB,e));assertTrue(CollectionUtils.isEqualCollection(collB,collectionA,e));final Equator<Number> defaultEquator=DefaultEquator.defaultEquator();assertFalse(CollectionUtils.isEqualCollection(collectionA,collectionB,defaultEquator));assertFalse(CollectionUtils.isEqualCollection(collectionA,collB,defaultEquator));}
@Test(expected=NullPointerException.class)public void testIsEqualCollectionNullEquator(){CollectionUtils.isEqualCollection(collectionA,collectionA,null);}
@Test public void testIsProperSubCollection(){final Collection<String> a=new ArrayList<String>();final Collection<String> b=new ArrayList<String>();assertTrue(!CollectionUtils.isProperSubCollection(a,b));b.add("1");assertTrue(CollectionUtils.isProperSubCollection(a,b));assertTrue(!CollectionUtils.isProperSubCollection(b,a));assertTrue(!CollectionUtils.isProperSubCollection(b,b));assertTrue(!CollectionUtils.isProperSubCollection(a,a));a.add("1");a.add("2");b.add("2");assertTrue(!CollectionUtils.isProperSubCollection(b,a));assertTrue(!CollectionUtils.isProperSubCollection(a,b));a.add("1");assertTrue(CollectionUtils.isProperSubCollection(b,a));assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.intersection(collectionA,collectionC),collectionA));assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.subtract(a,b),a));assertTrue(!CollectionUtils.isProperSubCollection(a,CollectionUtils.subtract(a,b)));}
@Test @Deprecated public void find(){Predicate<Number> testPredicate=equalPredicate((Number)4);Integer test=CollectionUtils.find(collectionA,testPredicate);assertTrue(test.equals(4));testPredicate=equalPredicate((Number)45);test=CollectionUtils.find(collectionA,testPredicate);assertTrue(test == null);assertNull(CollectionUtils.find(null,testPredicate));assertNull(CollectionUtils.find(collectionA,null));}
@Test @Deprecated public void forAllDoCollection(){final Closure<Collection<Integer>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<Collection<Integer>> col=new ArrayList<Collection<Integer>>();col.add(collectionA);col.add(collectionC);Closure<Collection<Integer>> resultClosure=CollectionUtils.forAllDo(col,testClosure);assertSame(testClosure,resultClosure);assertTrue(collectionA.isEmpty()&& collectionC.isEmpty());resultClosure=CollectionUtils.forAllDo(col,(Closure<Collection<Integer>>)null);assertNull(resultClosure);assertTrue(collectionA.isEmpty()&& collectionC.isEmpty());resultClosure=CollectionUtils.forAllDo((Collection<Collection<Integer>>)null,testClosure);col.add(null);CollectionUtils.forAllDo(col,testClosure);}
@Test @Deprecated public void forAllDoIterator(){final Closure<Collection<Integer>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<Collection<Integer>> col=new ArrayList<Collection<Integer>>();col.add(collectionA);col.add(collectionC);Closure<Collection<Integer>> resultClosure=CollectionUtils.forAllDo(col.iterator(),testClosure);assertSame(testClosure,resultClosure);assertTrue(collectionA.isEmpty()&& collectionC.isEmpty());resultClosure=CollectionUtils.forAllDo(col.iterator(),(Closure<Collection<Integer>>)null);assertNull(resultClosure);assertTrue(collectionA.isEmpty()&& collectionC.isEmpty());resultClosure=CollectionUtils.forAllDo((Iterator<Collection<Integer>>)null,testClosure);col.add(null);CollectionUtils.forAllDo(col.iterator(),testClosure);}
@Test(expected=FunctorException.class)@Deprecated public void forAllDoFailure(){final Closure<String> testClosure=ClosureUtils.invokerClosure("clear");final Collection<String> col=new ArrayList<String>();col.add("x");CollectionUtils.forAllDo(col,testClosure);}
@Test @Deprecated public void forAllButLastDoCollection(){final Closure<List<? extends Number>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<List<? extends Number>> col=new ArrayList<List<? extends Number>>();col.add(collectionA);col.add(collectionB);List<? extends Number> lastElement=CollectionUtils.forAllButLastDo(col,testClosure);assertSame(lastElement,collectionB);assertTrue(collectionA.isEmpty()&& !collectionB.isEmpty());col.clear();col.add(collectionB);lastElement=CollectionUtils.forAllButLastDo(col,testClosure);assertSame(lastElement,collectionB);assertTrue(!collectionB.isEmpty());col.clear();lastElement=CollectionUtils.forAllButLastDo(col,testClosure);assertNull(lastElement);Collection<String> strings=Arrays.asList("a","b","c");final StringBuffer result=new StringBuffer();result.append(CollectionUtils.forAllButLastDo(strings,new Closure<String>(){@Override public void execute(String input){result.append(input + ";");}}));assertEquals("a;b;c",result.toString());Collection<String> oneString=Arrays.asList("a");final StringBuffer resultOne=new StringBuffer();resultOne.append(CollectionUtils.forAllButLastDo(oneString,new Closure<String>(){@Override public void execute(String input){resultOne.append(input + ";");}}));assertEquals("a",resultOne.toString());assertNull(CollectionUtils.forAllButLastDo(strings,(Closure<String>)null));assertNull(CollectionUtils.forAllButLastDo((Collection<String>)null,(Closure<String>)null));}
@Test @Deprecated public void forAllButLastDoIterator(){final Closure<List<? extends Number>> testClosure=ClosureUtils.invokerClosure("clear");final Collection<List<? extends Number>> col=new ArrayList<List<? extends Number>>();col.add(collectionA);col.add(collectionB);List<? extends Number> lastElement=CollectionUtils.forAllButLastDo(col.iterator(),testClosure);assertSame(lastElement,collectionB);assertTrue(collectionA.isEmpty()&& !collectionB.isEmpty());assertNull(CollectionUtils.forAllButLastDo(col.iterator(),(Closure<List<? extends Number>>)null));assertNull(CollectionUtils.forAllButLastDo((Iterator<String>)null,(Closure<String>)null));}
@Test public void getFromMap(){final Map<String,String> expected=new HashMap<String,String>();expected.put("zeroKey","zero");expected.put("oneKey","one");final Map<String,String> found=new HashMap<String,String>();Map.Entry<String,String> entry=CollectionUtils.get(expected,0);found.put(entry.getKey(),entry.getValue());entry=CollectionUtils.get(expected,1);found.put(entry.getKey(),entry.getValue());assertEquals(expected,found);try {CollectionUtils.get(expected,2);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException e){}try {CollectionUtils.get(expected,-2);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException e){}final SortedMap<String,String> map=new TreeMap<String,String>();map.put("zeroKey","zero");map.put("oneKey","one");Map.Entry<String,String> test=CollectionUtils.get(map,1);assertEquals("zeroKey",test.getKey());assertEquals("zero",test.getValue());test=CollectionUtils.get(map,0);assertEquals("oneKey",test.getKey());assertEquals("one",test.getValue());}
/** * Tests that  {@link List}s are handled correctly - e.g. using {@link List#get(int)}.*/@Test(expected=IndexOutOfBoundsException.class)public void getFromList()throws Exception {final List<String> list=createMock(List.class);expect(list.get(0)).andReturn("zero");expect(list.get(1)).andReturn("one");replay();final String string=CollectionUtils.get(list,0);assertEquals("zero",string);assertEquals("one",CollectionUtils.get(list,1));CollectionUtils.get(new ArrayList<Object>(),2);}
@Test @Deprecated public void getFromIterator()throws Exception {Iterator<Integer> iterator=iterableA.iterator();assertEquals(1,(int)CollectionUtils.get(iterator,0));iterator=iterableA.iterator();assertEquals(2,(int)CollectionUtils.get(iterator,1));try {CollectionUtils.get(iterator,10);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException e){}assertTrue(!iterator.hasNext());}
@Test @Deprecated public void getFromEnumeration()throws Exception {final Vector<String> vector=new Vector<String>();vector.addElement("zero");vector.addElement("one");Enumeration<String> en=vector.elements();assertEquals("zero",CollectionUtils.get(en,0));en=vector.elements();assertEquals("one",CollectionUtils.get(en,1));try {CollectionUtils.get(en,3);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException e){}assertTrue(!en.hasMoreElements());}
@Test(expected=IndexOutOfBoundsException.class)@Deprecated public void getFromIterable()throws Exception {final Bag<String> bag=new HashBag<String>();bag.add("element",1);assertEquals("element",CollectionUtils.get(bag,0));CollectionUtils.get(bag,1);}
@Test(expected=IndexOutOfBoundsException.class)public void getFromObjectArray()throws Exception {final Object[]objArray=new Object[2];objArray[0]="zero";objArray[1]="one";assertEquals("zero",CollectionUtils.get(objArray,0));assertEquals("one",CollectionUtils.get(objArray,1));CollectionUtils.get(objArray,2);}
@Test(expected=IndexOutOfBoundsException.class)public void getFromPrimitiveArray()throws Exception {final int[]array=new int[2];array[0]=10;array[1]=20;assertEquals(10,CollectionUtils.get(array,0));assertEquals(20,CollectionUtils.get(array,1));CollectionUtils.get(array,2);}
@Test(expected=IllegalArgumentException.class)public void getFromObject()throws Exception {final Object obj=new Object();CollectionUtils.get(obj,0);}
@Test public void testSize_List(){List<String> list=null;assertEquals(0,CollectionUtils.size(list));list=new ArrayList<String>();assertEquals(0,CollectionUtils.size(list));list.add("a");assertEquals(1,CollectionUtils.size(list));list.add("b");assertEquals(2,CollectionUtils.size(list));}
@Test public void testSize_Map(){final Map<String,String> map=new HashMap<String,String>();assertEquals(0,CollectionUtils.size(map));map.put("1","a");assertEquals(1,CollectionUtils.size(map));map.put("2","b");assertEquals(2,CollectionUtils.size(map));}
@Test public void testSize_Array(){final Object[]objectArray=new Object[0];assertEquals(0,CollectionUtils.size(objectArray));final String[]stringArray=new String[3];assertEquals(3,CollectionUtils.size(stringArray));stringArray[0]="a";stringArray[1]="b";stringArray[2]="c";assertEquals(3,CollectionUtils.size(stringArray));}
@Test public void testSize_PrimitiveArray(){final int[]intArray=new int[0];assertEquals(0,CollectionUtils.size(intArray));final double[]doubleArray=new double[3];assertEquals(3,CollectionUtils.size(doubleArray));doubleArray[0]=0.0d;doubleArray[1]=1.0d;doubleArray[2]=2.5d;assertEquals(3,CollectionUtils.size(doubleArray));}
@Test public void testSize_Enumeration(){final Vector<String> list=new Vector<String>();assertEquals(0,CollectionUtils.size(list.elements()));list.add("a");assertEquals(1,CollectionUtils.size(list.elements()));list.add("b");assertEquals(2,CollectionUtils.size(list.elements()));}
@Test public void testSize_Iterator(){final List<String> list=new ArrayList<String>();assertEquals(0,CollectionUtils.size(list.iterator()));list.add("a");assertEquals(1,CollectionUtils.size(list.iterator()));list.add("b");assertEquals(2,CollectionUtils.size(list.iterator()));}
@Test(expected=IllegalArgumentException.class)public void testSize_Other(){CollectionUtils.size("not a list");}
@Test public void testSizeIsEmpty_Null(){assertEquals(true,CollectionUtils.sizeIsEmpty(null));}
@Test public void testSizeIsEmpty_List(){final List<String> list=new ArrayList<String>();assertEquals(true,CollectionUtils.sizeIsEmpty(list));list.add("a");assertEquals(false,CollectionUtils.sizeIsEmpty(list));}
@Test public void testSizeIsEmpty_Map(){final Map<String,String> map=new HashMap<String,String>();assertEquals(true,CollectionUtils.sizeIsEmpty(map));map.put("1","a");assertEquals(false,CollectionUtils.sizeIsEmpty(map));}
@Test public void testSizeIsEmpty_Array(){final Object[]objectArray=new Object[0];assertEquals(true,CollectionUtils.sizeIsEmpty(objectArray));final String[]stringArray=new String[3];assertEquals(false,CollectionUtils.sizeIsEmpty(stringArray));stringArray[0]="a";stringArray[1]="b";stringArray[2]="c";assertEquals(false,CollectionUtils.sizeIsEmpty(stringArray));}
@Test public void testSizeIsEmpty_PrimitiveArray(){final int[]intArray=new int[0];assertEquals(true,CollectionUtils.sizeIsEmpty(intArray));final double[]doubleArray=new double[3];assertEquals(false,CollectionUtils.sizeIsEmpty(doubleArray));doubleArray[0]=0.0d;doubleArray[1]=1.0d;doubleArray[2]=2.5d;assertEquals(false,CollectionUtils.sizeIsEmpty(doubleArray));}
@Test public void testSizeIsEmpty_Enumeration(){final Vector<String> list=new Vector<String>();assertEquals(true,CollectionUtils.sizeIsEmpty(list.elements()));list.add("a");assertEquals(false,CollectionUtils.sizeIsEmpty(list.elements()));final Enumeration<String> en=list.elements();en.nextElement();assertEquals(true,CollectionUtils.sizeIsEmpty(en));}
@Test public void testSizeIsEmpty_Iterator(){final List<String> list=new ArrayList<String>();assertEquals(true,CollectionUtils.sizeIsEmpty(list.iterator()));list.add("a");assertEquals(false,CollectionUtils.sizeIsEmpty(list.iterator()));final Iterator<String> it=list.iterator();it.next();assertEquals(true,CollectionUtils.sizeIsEmpty(it));}
@Test public void testSizeIsEmpty_Other(){try {CollectionUtils.sizeIsEmpty("not a list");fail("Expecting IllegalArgumentException");}catch(final IllegalArgumentException ex){}}
@Test public void testIsEmptyWithEmptyCollection(){final Collection<Object> coll=new ArrayList<Object>();assertEquals(true,CollectionUtils.isEmpty(coll));}
@Test public void testIsEmptyWithNonEmptyCollection(){final Collection<String> coll=new ArrayList<String>();coll.add("item");assertEquals(false,CollectionUtils.isEmpty(coll));}
@Test public void testIsEmptyWithNull(){final Collection<?> coll=null;assertEquals(true,CollectionUtils.isEmpty(coll));}
@Test public void testIsNotEmptyWithEmptyCollection(){final Collection<Object> coll=new ArrayList<Object>();assertEquals(false,CollectionUtils.isNotEmpty(coll));}
@Test public void testIsNotEmptyWithNonEmptyCollection(){final Collection<String> coll=new ArrayList<String>();coll.add("item");assertEquals(true,CollectionUtils.isNotEmpty(coll));}
@Test public void testIsNotEmptyWithNull(){final Collection<?> coll=null;assertEquals(false,CollectionUtils.isNotEmpty(coll));}
@Test public void filter(){final List<Integer> ints=new ArrayList<Integer>();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable<Integer> iterable=ints;assertTrue(CollectionUtils.filter(iterable,EQUALS_TWO));assertEquals(1,ints.size());assertEquals(2,(int)ints.get(0));}
@Test public void filterNullParameters()throws Exception {final List<Long> longs=Collections.nCopies(4,10L);assertFalse(CollectionUtils.filter(longs,null));assertEquals(4,longs.size());assertFalse(CollectionUtils.filter(null,EQUALS_TWO));assertEquals(4,longs.size());assertFalse(CollectionUtils.filter(null,null));assertEquals(4,longs.size());}
@Test public void filterInverse(){final List<Integer> ints=new ArrayList<Integer>();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable<Integer> iterable=ints;assertTrue(CollectionUtils.filterInverse(iterable,EQUALS_TWO));assertEquals(3,ints.size());assertEquals(1,(int)ints.get(0));assertEquals(3,(int)ints.get(1));assertEquals(3,(int)ints.get(2));}
@Test public void filterInverseNullParameters()throws Exception {final List<Long> longs=Collections.nCopies(4,10L);assertFalse(CollectionUtils.filterInverse(longs,null));assertEquals(4,longs.size());assertFalse(CollectionUtils.filterInverse(null,EQUALS_TWO));assertEquals(4,longs.size());assertFalse(CollectionUtils.filterInverse(null,null));assertEquals(4,longs.size());}
@Test @Deprecated public void countMatches(){assertEquals(4,CollectionUtils.countMatches(iterableB,EQUALS_TWO));assertEquals(0,CollectionUtils.countMatches(iterableA,null));assertEquals(0,CollectionUtils.countMatches(null,EQUALS_TWO));assertEquals(0,CollectionUtils.countMatches(null,null));}
@Test @Deprecated public void exists(){final List<Integer> list=new ArrayList<Integer>();assertFalse(CollectionUtils.exists(null,null));assertFalse(CollectionUtils.exists(list,null));assertFalse(CollectionUtils.exists(null,EQUALS_TWO));assertFalse(CollectionUtils.exists(list,EQUALS_TWO));list.add(1);list.add(3);list.add(4);assertFalse(CollectionUtils.exists(list,EQUALS_TWO));list.add(2);assertEquals(true,CollectionUtils.exists(list,EQUALS_TWO));}
@Test public void select(){final List<Integer> list=new ArrayList<Integer>();list.add(1);list.add(2);list.add(3);list.add(4);final Collection<Integer> output1=CollectionUtils.select(list,EQUALS_TWO);final Collection<Number> output2=CollectionUtils.<Number>select(list,EQUALS_TWO);final HashSet<Number> output3=CollectionUtils.select(list,EQUALS_TWO,new HashSet<Number>());assertTrue(CollectionUtils.isEqualCollection(output1,output3));assertEquals(4,list.size());assertEquals(1,output1.size());assertEquals(2,output2.iterator().next());}
@Test public void selectWithOutputCollections(){List<Integer> input=new ArrayList<Integer>();input.add(1);input.add(2);input.add(3);input.add(4);List<Integer> output=new ArrayList<Integer>();List<Integer> rejected=new ArrayList<Integer>();CollectionUtils.select(input,EQUALS_TWO,output,rejected);assertEquals(1,output.size());assertEquals(2,CollectionUtils.extractSingleton(output).intValue());Integer[]expected={1,3,4};Assert.assertArrayEquals(expected,rejected.toArray());output.clear();rejected.clear();CollectionUtils.select((List<Integer>)null,EQUALS_TWO,output,rejected);assertTrue(output.isEmpty());assertTrue(rejected.isEmpty());}
@Test public void selectRejected(){final List<Long> list=new ArrayList<Long>();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection<Long> output1=CollectionUtils.selectRejected(list,EQUALS_TWO);final Collection<? extends Number> output2=CollectionUtils.selectRejected(list,EQUALS_TWO);final HashSet<Number> output3=CollectionUtils.selectRejected(list,EQUALS_TWO,new HashSet<Number>());assertTrue(CollectionUtils.isEqualCollection(output1,output2));assertTrue(CollectionUtils.isEqualCollection(output1,output3));assertEquals(4,list.size());assertEquals(3,output1.size());assertTrue(output1.contains(1L));assertTrue(output1.contains(3L));assertTrue(output1.contains(4L));}
@Test public void collect(){final Transformer<Number,Long> transformer=TransformerUtils.constantTransformer(2L);Collection<Number> collection=CollectionUtils.<Integer,Number>collect(iterableA,transformer);assertTrue(collection.size()== collectionA.size());assertCollectResult(collection);ArrayList<Number> list;list=CollectionUtils.collect(collectionA,transformer,new ArrayList<Number>());assertTrue(list.size()== collectionA.size());assertCollectResult(list);Iterator<Integer> iterator=null;list=CollectionUtils.collect(iterator,transformer,new ArrayList<Number>());iterator=iterableA.iterator();list=CollectionUtils.collect(iterator,transformer,list);assertTrue(collection.size()== collectionA.size());assertCollectResult(collection);iterator=collectionA.iterator();collection=CollectionUtils.<Integer,Number>collect(iterator,transformer);assertTrue(collection.size()== collectionA.size());assertTrue(collection.contains(2L)&& !collection.contains(1));collection=CollectionUtils.collect((Iterator<Integer>)null,(Transformer<Integer,Number>)null);assertTrue(collection.size()== 0);final int size=collectionA.size();collectionB=CollectionUtils.collect((Collection<Integer>)null,transformer,collectionB);assertTrue(collectionA.size()== size && collectionA.contains(1));CollectionUtils.collect(collectionB,null,collectionA);assertTrue(collectionA.size()== size && collectionA.contains(1));}
@Test public void transform1(){List<Number> list=new ArrayList<Number>();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list,TRANSFORM_TO_INTEGER);assertEquals(3,list.size());assertEquals(1,list.get(0));assertEquals(2,list.get(1));assertEquals(3,list.get(2));list=new ArrayList<Number>();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(null,TRANSFORM_TO_INTEGER);assertEquals(3,list.size());CollectionUtils.transform(list,null);assertEquals(3,list.size());CollectionUtils.transform(null,null);assertEquals(3,list.size());}
@Test public void transform2(){final Set<Number> set=new HashSet<Number>();set.add(1L);set.add(2L);set.add(3L);CollectionUtils.transform(set,new Transformer<Object,Integer>(){@Override public Integer transform(final Object input){return 4;}});assertEquals(1,set.size());assertEquals(4,set.iterator().next());}
@Test public void addIgnoreNull(){final Set<String> set=new HashSet<String>();set.add("1");set.add("2");set.add("3");assertFalse(CollectionUtils.addIgnoreNull(set,null));assertEquals(3,set.size());assertFalse(CollectionUtils.addIgnoreNull(set,"1"));assertEquals(3,set.size());assertEquals(true,CollectionUtils.addIgnoreNull(set,"4"));assertEquals(4,set.size());assertEquals(true,set.contains("4"));}
@Test public void predicatedCollection(){final Predicate<Object> predicate=PredicateUtils.instanceofPredicate(Integer.class);Collection<Number> collection=CollectionUtils.predicatedCollection(new ArrayList<Number>(),predicate);assertTrue("returned object should be a PredicatedCollection",collection instanceof PredicatedCollection);try {CollectionUtils.predicatedCollection(new ArrayList<Number>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException ex){}try {CollectionUtils.predicatedCollection(null,predicate);fail("Expecting NullPointerException for null collection.");}catch(final NullPointerException ex){}}
@Test public void isFull(){final Set<String> set=new HashSet<String>();set.add("1");set.add("2");set.add("3");try {CollectionUtils.isFull(null);fail();}catch(final NullPointerException ex){}assertFalse(CollectionUtils.isFull(set));final CircularFifoQueue<String> buf=new CircularFifoQueue<String>(set);assertEquals(false,CollectionUtils.isFull(buf));buf.remove("2");assertFalse(CollectionUtils.isFull(buf));buf.add("2");assertEquals(false,CollectionUtils.isFull(buf));}
@Test public void isEmpty(){assertFalse(CollectionUtils.isNotEmpty(null));assertTrue(CollectionUtils.isNotEmpty(collectionA));}
@Test public void maxSize(){final Set<String> set=new HashSet<String>();set.add("1");set.add("2");set.add("3");try {CollectionUtils.maxSize(null);fail();}catch(final NullPointerException ex){}assertEquals(-1,CollectionUtils.maxSize(set));final Queue<String> buf=new CircularFifoQueue<String>(set);assertEquals(3,CollectionUtils.maxSize(buf));buf.remove("2");assertEquals(3,CollectionUtils.maxSize(buf));buf.add("2");assertEquals(3,CollectionUtils.maxSize(buf));}
@Test public void intersectionUsesMethodEquals(){final Integer elta=new Integer(17);final Integer eltb=new Integer(17);assertEquals(elta,eltb);assertEquals(eltb,elta);assertTrue(elta != eltb);final Collection<Number> cola=new ArrayList<Number>();final Collection<Integer> colb=new ArrayList<Integer>();cola.add(elta);colb.add(eltb);final Collection<Number> intersection=CollectionUtils.intersection(cola,colb);assertEquals(1,intersection.size());final Object eltc=intersection.iterator().next();assertTrue(eltc == elta && eltc != eltb || eltc != elta && eltc == eltb);assertEquals(elta,eltc);assertEquals(eltc,elta);assertEquals(eltb,eltc);assertEquals(eltc,eltb);}
@Test public void testRetainAll(){final List<String> base=new ArrayList<String>();base.add("A");base.add("B");base.add("C");final List<Object> sub=new ArrayList<Object>();sub.add("A");sub.add("C");sub.add("X");final Collection<String> result=CollectionUtils.retainAll(base,sub);assertEquals(2,result.size());assertEquals(true,result.contains("A"));assertFalse(result.contains("B"));assertEquals(true,result.contains("C"));assertEquals(3,base.size());assertEquals(true,base.contains("A"));assertEquals(true,base.contains("B"));assertEquals(true,base.contains("C"));assertEquals(3,sub.size());assertEquals(true,sub.contains("A"));assertEquals(true,sub.contains("C"));assertEquals(true,sub.contains("X"));try {CollectionUtils.retainAll(null,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void testRemoveAll(){final List<String> base=new ArrayList<String>();base.add("A");base.add("B");base.add("C");final List<String> sub=new ArrayList<String>();sub.add("A");sub.add("C");sub.add("X");final Collection<String> result=CollectionUtils.removeAll(base,sub);assertEquals(1,result.size());assertFalse(result.contains("A"));assertEquals(true,result.contains("B"));assertFalse(result.contains("C"));assertEquals(3,base.size());assertEquals(true,base.contains("A"));assertEquals(true,base.contains("B"));assertEquals(true,base.contains("C"));assertEquals(3,sub.size());assertEquals(true,sub.contains("A"));assertEquals(true,sub.contains("C"));assertEquals(true,sub.contains("X"));try {CollectionUtils.removeAll(null,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void testTransformedCollection(){final Transformer<Object,Object> transformer=TransformerUtils.nopTransformer();Collection<Object> collection=CollectionUtils.transformingCollection(new ArrayList<Object>(),transformer);assertTrue("returned object should be a TransformedCollection",collection instanceof TransformedCollection);try {CollectionUtils.transformingCollection(new ArrayList<Object>(),null);fail("Expecting NullPointerException for null transformer.");}catch(final NullPointerException ex){}try {CollectionUtils.transformingCollection(null,transformer);fail("Expecting NullPointerException for null collection.");}catch(final NullPointerException ex){}}
@Test public void testTransformedCollection_2(){final List<Object> list=new ArrayList<Object>();list.add("1");list.add("2");list.add("3");final Collection<Object> result=CollectionUtils.transformingCollection(list,TRANSFORM_TO_INTEGER);assertEquals(true,result.contains("1"));assertEquals(true,result.contains("2"));assertEquals(true,result.contains("3"));}
@Test @Deprecated public void testSynchronizedCollection(){Collection<Object> col=CollectionUtils.synchronizedCollection(new ArrayList<Object>());assertTrue("Returned object should be a SynchronizedCollection.",col instanceof SynchronizedCollection);try {CollectionUtils.synchronizedCollection(null);fail("Expecting NullPointerException for null collection.");}catch(final NullPointerException ex){}}
@Test @Deprecated public void testUnmodifiableCollection(){Collection<Object> col=CollectionUtils.unmodifiableCollection(new ArrayList<Object>());assertTrue("Returned object should be a UnmodifiableCollection.",col instanceof UnmodifiableCollection);try {CollectionUtils.unmodifiableCollection(null);fail("Expecting NullPointerException for null collection.");}catch(final NullPointerException ex){}}
@Test public void emptyCollection()throws Exception {final Collection<Number> coll=CollectionUtils.emptyCollection();assertEquals(CollectionUtils.EMPTY_COLLECTION,coll);}
@Test public void emptyIfNull(){assertTrue(CollectionUtils.emptyIfNull(null).isEmpty());final Collection<Object> collection=new ArrayList<Object>();assertSame(collection,CollectionUtils.emptyIfNull(collection));}
/** * This test ensures that  {@link Iterable}s are supported by  {@link CollectionUtils}. Specifically,it uses mocks to ensure that if the passed in {@link Iterable}is a {@link Collection}then{@link Collection#addAll(Collection)}is called instead of iterating.*/@Test public void addAllForIterable(){final Collection<Integer> inputCollection=createMock(Collection.class);final Iterable<Integer> inputIterable=inputCollection;final Iterable<Long> iterable=createMock(Iterable.class);final Iterator<Long> iterator=createMock(Iterator.class);final Collection<Number> c=createMock(Collection.class);expect(iterable.iterator()).andReturn(iterator);next(iterator,1L);next(iterator,2L);next(iterator,3L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);expect(c.addAll(inputCollection)).andReturn(true);expect(iterable.iterator()).andReturn(iterator);next(iterator,1L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);replay();assertTrue(CollectionUtils.addAll(c,iterable));assertTrue(CollectionUtils.addAll(c,inputIterable));assertFalse(CollectionUtils.addAll(c,iterable));assertFalse(CollectionUtils.addAll(c,inputIterable));verify();}
@Test public void addAllForEnumeration(){final Hashtable<Integer,Integer> h=new Hashtable<Integer,Integer>();h.put(5,5);final Enumeration<? extends Integer> enumeration=h.keys();CollectionUtils.addAll(collectionA,enumeration);assertTrue(collectionA.contains(5));}
@Test public void addAllForElements(){CollectionUtils.addAll(collectionA,new Integer[]{5});assertTrue(collectionA.contains(5));}
@Test(expected=IndexOutOfBoundsException.class)public void getNegative(){CollectionUtils.get((Object)collectionA,-3);}
@Test(expected=IndexOutOfBoundsException.class)public void getPositiveOutOfBounds(){CollectionUtils.get((Object)collectionA.iterator(),30);}
@Test(expected=IllegalArgumentException.class)public void get1(){CollectionUtils.get((Object)null,0);}
@Test public void get(){assertEquals(2,CollectionUtils.get((Object)collectionA,2));assertEquals(2,CollectionUtils.get((Object)collectionA.iterator(),2));final Map<Integer,Integer> map=CollectionUtils.getCardinalityMap(collectionA);assertEquals(map.entrySet().iterator().next(),CollectionUtils.get((Object)map,0));}
@Test public void getIterator(){final Iterator<Integer> it=collectionA.iterator();assertEquals(Integer.valueOf(2),CollectionUtils.get((Object)it,2));assertTrue(it.hasNext());assertEquals(Integer.valueOf(4),CollectionUtils.get((Object)it,6));assertFalse(it.hasNext());}
@Test public void getEnumeration(){final Vector<Integer> vectorA=new Vector<Integer>(collectionA);final Enumeration<Integer> e=vectorA.elements();assertEquals(Integer.valueOf(2),CollectionUtils.get(e,2));assertTrue(e.hasMoreElements());assertEquals(Integer.valueOf(4),CollectionUtils.get(e,6));assertFalse(e.hasMoreElements());}
@Test public void reverse(){CollectionUtils.reverseArray(new Object[]{});final Integer[]a=collectionA.toArray(new Integer[collectionA.size()]);CollectionUtils.reverseArray(a);Collections.reverse(collectionA);assertEquals(collectionA,Arrays.asList(a));}
@Test public void extractSingleton(){ArrayList<String> coll=null;try {CollectionUtils.extractSingleton(coll);fail("expected NullPointerException from extractSingleton(null)");}catch(final NullPointerException e){}coll=new ArrayList<String>();try {CollectionUtils.extractSingleton(coll);fail("expected IllegalArgumentException from extractSingleton(empty)");}catch(final IllegalArgumentException e){}coll.add("foo");assertEquals("foo",CollectionUtils.extractSingleton(coll));coll.add("bar");try {CollectionUtils.extractSingleton(coll);fail("expected IllegalArgumentException from extractSingleton(size == 2)");}catch(final IllegalArgumentException e){}}
@Test(expected=NullPointerException.class)public void collateException1(){CollectionUtils.collate(collectionA,null);}
@Test(expected=NullPointerException.class)public void collateException2(){CollectionUtils.collate(collectionA,collectionC,null);}
@Test public void testCollate(){List<Integer> result=CollectionUtils.collate(emptyCollection,emptyCollection);assertEquals("Merge empty with empty",0,result.size());result=CollectionUtils.collate(collectionA,emptyCollection);assertEquals("Merge empty with non-empty",collectionA,result);List<Integer> result1=CollectionUtils.collate(collectionD,collectionE);List<Integer> result2=CollectionUtils.collate(collectionE,collectionD);assertEquals("Merge two lists 1",result1,result2);List<Integer> combinedList=new ArrayList<Integer>();combinedList.addAll(collectionD);combinedList.addAll(collectionE);Collections.sort(combinedList);assertEquals("Merge two lists 2",combinedList,result2);final Comparator<Integer> reverseComparator=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());result=CollectionUtils.collate(emptyCollection,emptyCollection,reverseComparator);assertEquals("Comparator Merge empty with empty",0,result.size());Collections.reverse((List<Integer>)collectionD);Collections.reverse((List<Integer>)collectionE);Collections.reverse(combinedList);result1=CollectionUtils.collate(collectionD,collectionE,reverseComparator);result2=CollectionUtils.collate(collectionE,collectionD,reverseComparator);assertEquals("Comparator Merge two lists 1",result1,result2);assertEquals("Comparator Merge two lists 2",combinedList,result2);}
@Test public void testCollateIgnoreDuplicates(){List<Integer> result1=CollectionUtils.collate(collectionD,collectionE,false);List<Integer> result2=CollectionUtils.collate(collectionE,collectionD,false);assertEquals("Merge two lists 1 - ignore duplicates",result1,result2);Set<Integer> combinedSet=new HashSet<Integer>();combinedSet.addAll(collectionD);combinedSet.addAll(collectionE);List<Integer> combinedList=new ArrayList<Integer>(combinedSet);Collections.sort(combinedList);assertEquals("Merge two lists 2 - ignore duplicates",combinedList,result2);}
@Test(expected=NullPointerException.class)public void testPermutationsWithNullCollection(){CollectionUtils.permutations(null);}
@Test public void testPermutations(){List<Integer> sample=collectionA.subList(0,5);Collection<List<Integer>> permutations=CollectionUtils.permutations(sample);int collSize=sample.size();int factorial=1;for (int i=1;i <= collSize;i++){factorial*=i;}assertEquals(factorial,permutations.size());}
@Test @Deprecated public void testMatchesAll(){assertFalse(CollectionUtils.matchesAll(null,null));assertFalse(CollectionUtils.matchesAll(collectionA,null));Predicate<Integer> lessThanFive=new Predicate<Integer>(){@Override public boolean evaluate(Integer object){return object < 5;}};assertTrue(CollectionUtils.matchesAll(collectionA,lessThanFive));Predicate<Integer> lessThanFour=new Predicate<Integer>(){@Override public boolean evaluate(Integer object){return object < 4;}};assertFalse(CollectionUtils.matchesAll(collectionA,lessThanFour));assertTrue(CollectionUtils.matchesAll(null,lessThanFour));assertTrue(CollectionUtils.matchesAll(emptyCollection,lessThanFour));}
@Test public void testRemoveAllWithEquator(){final List<String> base=new ArrayList<String>();base.add("AC");base.add("BB");base.add("CA");final List<String> remove=new ArrayList<String>();remove.add("AA");remove.add("CX");remove.add("XZ");final Collection<String> result=CollectionUtils.removeAll(base,remove,new Equator<String>(){@Override public boolean equate(String o1,String o2){return o1.charAt(1)== o2.charAt(1);}@Override public int hash(String o){return o.charAt(1);}});assertEquals(2,result.size());assertTrue(result.contains("AC"));assertTrue(result.contains("BB"));assertFalse(result.contains("CA"));assertEquals(3,base.size());assertEquals(true,base.contains("AC"));assertEquals(true,base.contains("BB"));assertEquals(true,base.contains("CA"));assertEquals(3,remove.size());assertEquals(true,remove.contains("AA"));assertEquals(true,remove.contains("CX"));assertEquals(true,remove.contains("XZ"));try {CollectionUtils.removeAll(null,null,DefaultEquator.defaultEquator());fail("expecting NullPointerException");}catch(final NullPointerException npe){}try {CollectionUtils.removeAll(base,remove,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void testRetainAllWithEquator(){final List<String> base=new ArrayList<String>();base.add("AC");base.add("BB");base.add("CA");final List<String> retain=new ArrayList<String>();retain.add("AA");retain.add("CX");retain.add("XZ");final Collection<String> result=CollectionUtils.retainAll(base,retain,new Equator<String>(){@Override public boolean equate(String o1,String o2){return o1.charAt(1)== o2.charAt(1);}@Override public int hash(String o){return o.charAt(1);}});assertEquals(1,result.size());assertTrue(result.contains("CA"));assertFalse(result.contains("BB"));assertFalse(result.contains("AC"));assertEquals(3,base.size());assertTrue(base.contains("AC"));assertTrue(base.contains("BB"));assertTrue(base.contains("CA"));assertEquals(3,retain.size());assertTrue(retain.contains("AA"));assertTrue(retain.contains("CX"));assertTrue(retain.contains("XZ"));try {CollectionUtils.retainAll(null,null,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}try {CollectionUtils.retainAll(base,retain,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
public void testIterator(){final ListIterator<E> iter=makeObject();for(final String testValue : testArray){final Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}for (int i=testArray.length - 1;i > -1;--i){final Object testValue=testArray[i];final E iterValue=iter.previous();assertEquals("Iteration value is correct",testValue,iterValue);}try {iter.previous();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}for(final String testValue : testArray){final Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}}
@Override public void testRemove(){final ListIterator<E> iter=makeObject();assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());try {iter.remove();fail("ListIteratorWrapper#remove()should fail;must be initially positioned first");}catch(final IllegalStateException e){}assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());int sz=list1.size();assertEquals(list1.get(0),iter.next());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());iter.remove();assertEquals(--sz,list1.size());assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());try {iter.remove();fail("ListIteratorWrapper#remove()should fail;must be repositioned first");}catch(final IllegalStateException e){}assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());assertEquals(list1.get(0),iter.next());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());assertEquals(list1.get(1),iter.next());assertEquals(1,iter.previousIndex());assertEquals(2,iter.nextIndex());assertEquals(list1.get(1),iter.previous());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());iter.remove();assertEquals(--sz,list1.size());assertEquals(0,iter.previousIndex());assertEquals(1,iter.nextIndex());assertEquals(list1.get(0),iter.previous());assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());iter.remove();assertEquals(--sz,list1.size());assertEquals(-1,iter.previousIndex());assertEquals(0,iter.nextIndex());}
public void testReset(){final ResettableListIterator<E> iter=makeObject();final E first=iter.next();final E second=iter.next();iter.reset();assertFalse("No previous elements after reset()",iter.hasPrevious());assertEquals("First element should be the same",first,iter.next());assertEquals("Second elment should be the same",second,iter.next());for (int i=2;i < testArray.length;i++){final Object testValue=testArray[i];final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}}
public void testListIterator(){assertTrue(makeEmptyIterator()instanceof Unmodifiable);}
public void testDecorateFactory(){ListIterator<E> it=makeObject();assertSame(it,UnmodifiableListIterator.umodifiableListIterator(it));it=testList.listIterator();assertTrue(it != UnmodifiableListIterator.umodifiableListIterator(it));try {UnmodifiableListIterator.umodifiableListIterator(null);fail();}catch(final NullPointerException ex){}}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final List<E> list=makeTestList();final Integer i=Integer.valueOf(3);try {list.add((E)i);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!list.contains(i));}
@SuppressWarnings("unchecked")public void testIllegalAddAll(){final List<E> list=makeTestList();final List<E> elements=new ArrayList<E>();elements.add((E)"one");elements.add((E)"two");elements.add((E)Integer.valueOf(3));elements.add((E)"four");try {list.addAll(0,elements);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("List shouldn't contain illegal element",!list.contains("one"));assertTrue("List shouldn't contain illegal element",!list.contains("two"));assertTrue("List shouldn't contain illegal element",!list.contains(Integer.valueOf(3)));assertTrue("List shouldn't contain illegal element",!list.contains("four"));}
@SuppressWarnings("unchecked")public void testIllegalSet(){final List<E> list=makeTestList();try {list.set(0,(E)Integer.valueOf(3));fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}}
@SuppressWarnings("unchecked")public void testLegalAddAll(){final List<E> list=makeTestList();list.add((E)"zero");final List<E> elements=new ArrayList<E>();elements.add((E)"one");elements.add((E)"two");elements.add((E)"three");list.addAll(1,elements);assertTrue("List should contain legal element",list.contains("zero"));assertTrue("List should contain legal element",list.contains("one"));assertTrue("List should contain legal element",list.contains("two"));assertTrue("List should contain legal element",list.contains("three"));}
@SuppressWarnings("unchecked")public void testBasics(){final IterableMap<K,V> map=new ReferenceIdentityMap<K,V>(ReferenceStrength.HARD,ReferenceStrength.HARD);assertEquals(0,map.size());map.put((K)I1A,(V)I2A);assertEquals(1,map.size());assertSame(I2A,map.get(I1A));assertSame(null,map.get(I1B));assertEquals(true,map.containsKey(I1A));assertEquals(false,map.containsKey(I1B));assertEquals(true,map.containsValue(I2A));assertEquals(false,map.containsValue(I2B));map.put((K)I1A,(V)I2B);assertEquals(1,map.size());assertSame(I2B,map.get(I1A));assertSame(null,map.get(I1B));assertEquals(true,map.containsKey(I1A));assertEquals(false,map.containsKey(I1B));assertEquals(false,map.containsValue(I2A));assertEquals(true,map.containsValue(I2B));map.put((K)I1B,(V)I2B);assertEquals(2,map.size());assertSame(I2B,map.get(I1A));assertSame(I2B,map.get(I1B));assertEquals(true,map.containsKey(I1A));assertEquals(true,map.containsKey(I1B));assertEquals(false,map.containsValue(I2A));assertEquals(true,map.containsValue(I2B));}
@SuppressWarnings("unchecked")public void testHashEntry(){final IterableMap<K,V> map=new ReferenceIdentityMap<K,V>(ReferenceStrength.HARD,ReferenceStrength.HARD);map.put((K)I1A,(V)I2A);map.put((K)I1B,(V)I2A);final Map.Entry<K,V> entry1=map.entrySet().iterator().next();final Iterator<Map.Entry<K,V>> it=map.entrySet().iterator();final Map.Entry<K,V> entry2=it.next();final Map.Entry<K,V> entry3=it.next();assertEquals(true,entry1.equals(entry2));assertEquals(true,entry2.equals(entry1));assertEquals(false,entry1.equals(entry3));}
@SuppressWarnings("unchecked")public void testNullHandling(){resetFull();assertEquals(null,getMap().get(null));assertEquals(false,getMap().containsKey(null));assertEquals(false,getMap().containsValue(null));assertEquals(null,getMap().remove(null));assertEquals(false,getMap().entrySet().contains(null));assertEquals(false,getMap().keySet().contains(null));assertEquals(false,getMap().values().contains(null));try {getMap().put(null,null);fail();}catch(final NullPointerException ex){}try {getMap().put((K)new Object(),null);fail();}catch(final NullPointerException ex){}try {getMap().put(null,(V)new Object());fail();}catch(final NullPointerException ex){}}
/** * Tests whether purge values setting works */public void testPurgeValues(){}
public void testWalkLists(){walkLists(list,list.listIterator());}
public void testManual(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),threePred);assertEquals(Integer.valueOf(0),filtered.next());assertEquals(Integer.valueOf(3),filtered.next());assertEquals(Integer.valueOf(6),filtered.next());assertEquals(Integer.valueOf(9),filtered.next());assertEquals(Integer.valueOf(12),filtered.next());assertEquals(Integer.valueOf(15),filtered.next());assertEquals(Integer.valueOf(18),filtered.next());assertEquals(Integer.valueOf(18),filtered.previous());assertEquals(Integer.valueOf(15),filtered.previous());assertEquals(Integer.valueOf(12),filtered.previous());assertEquals(Integer.valueOf(9),filtered.previous());assertEquals(Integer.valueOf(6),filtered.previous());assertEquals(Integer.valueOf(3),filtered.previous());assertEquals(Integer.valueOf(0),filtered.previous());assertTrue(!filtered.hasPrevious());assertEquals(Integer.valueOf(0),filtered.next());assertEquals(Integer.valueOf(3),filtered.next());assertEquals(Integer.valueOf(6),filtered.next());assertEquals(Integer.valueOf(9),filtered.next());assertEquals(Integer.valueOf(12),filtered.next());assertEquals(Integer.valueOf(15),filtered.next());assertEquals(Integer.valueOf(18),filtered.next());assertTrue(!filtered.hasNext());assertEquals(Integer.valueOf(18),filtered.previous());assertEquals(Integer.valueOf(15),filtered.previous());assertEquals(Integer.valueOf(12),filtered.previous());assertEquals(Integer.valueOf(9),filtered.previous());assertEquals(Integer.valueOf(6),filtered.previous());assertEquals(Integer.valueOf(3),filtered.previous());assertEquals(Integer.valueOf(0),filtered.previous());assertEquals(Integer.valueOf(0),filtered.next());assertEquals(Integer.valueOf(0),filtered.previous());assertEquals(Integer.valueOf(0),filtered.next());assertEquals(Integer.valueOf(3),filtered.next());assertEquals(Integer.valueOf(6),filtered.next());assertEquals(Integer.valueOf(6),filtered.previous());assertEquals(Integer.valueOf(3),filtered.previous());assertEquals(Integer.valueOf(3),filtered.next());assertEquals(Integer.valueOf(6),filtered.next());assertEquals(Integer.valueOf(9),filtered.next());assertEquals(Integer.valueOf(12),filtered.next());assertEquals(Integer.valueOf(15),filtered.next());assertEquals(Integer.valueOf(15),filtered.previous());assertEquals(Integer.valueOf(12),filtered.previous());assertEquals(Integer.valueOf(9),filtered.previous());}
public void testTruePredicate(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),truePred);walkLists(list,filtered);}
public void testFalsePredicate(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),falsePred);walkLists(new ArrayList<Integer>(),filtered);}
public void testEvens(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),evenPred);walkLists(evens,filtered);}
public void testOdds(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),oddPred);walkLists(odds,filtered);}
public void testThrees(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),threePred);walkLists(threes,filtered);}
public void testFours(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),fourPred);walkLists(fours,filtered);}
public void testNestedSixes(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(new FilterListIterator<Integer>(list.listIterator(),threePred),evenPred);walkLists(sixes,filtered);}
public void testNestedSixes2(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(new FilterListIterator<Integer>(list.listIterator(),evenPred),threePred);walkLists(sixes,filtered);}
public void testNestedSixes3(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(new FilterListIterator<Integer>(list.listIterator(),threePred),evenPred);walkLists(sixes,new FilterListIterator<Integer>(filtered,truePred));}
public void testNextChangesPrevious(){{final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),threePred);nextNextPrevious(threes.listIterator(),filtered);}{final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),truePred);nextNextPrevious(list.listIterator(),filtered);}}
public void testPreviousChangesNext(){{final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),threePred);final ListIterator<Integer> expected=threes.listIterator();walkForward(expected,filtered);previousPreviousNext(expected,filtered);}{final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),truePred);final ListIterator<Integer> expected=list.listIterator();walkForward(expected,filtered);previousPreviousNext(expected,filtered);}}
public void testFailingHasNextBug(){final FilterListIterator<Integer> filtered=new FilterListIterator<Integer>(list.listIterator(),fourPred);final ListIterator<Integer> expected=fours.listIterator();while (expected.hasNext()){expected.next();filtered.next();}assertTrue(filtered.hasPrevious());assertTrue(!filtered.hasNext());assertEquals(expected.previous(),filtered.previous());}
/** * Test for  {@link "https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360"}*/public void testCollections360()throws Throwable {final Collection<Predicate<Object>> var7=new GrowthList<Predicate<Object>>();final Predicate<Object> var9=PredicateUtils.anyPredicate(var7);final FilterListIterator<Object> var13=new FilterListIterator<Object>(var9);Assert.assertFalse(var13.hasNext());final FilterListIterator<Object> var14=new FilterListIterator<Object>(var9);Assert.assertFalse(var14.hasPrevious());}
public void testIterator(){assertTrue(makeEmptyIterator()instanceof Unmodifiable);}
public void testDecorateFactory(){Iterator<E> it=makeObject();assertSame(it,UnmodifiableIterator.unmodifiableIterator(it));it=testList.iterator();assertTrue(it != UnmodifiableIterator.unmodifiableIterator(it));try {UnmodifiableIterator.unmodifiableIterator(null);fail();}catch(final NullPointerException ex){}}
@Test public void testExceptionClosure(){assertNotNull(ClosureUtils.exceptionClosure());assertSame(ClosureUtils.exceptionClosure(),ClosureUtils.exceptionClosure());try {ClosureUtils.exceptionClosure().execute(null);}catch(final FunctorException ex){try {ClosureUtils.exceptionClosure().execute(cString);}catch(final FunctorException ex2){return;}}fail();}
@Test public void testNopClosure(){final StringBuilder buf=new StringBuilder("Hello");ClosureUtils.nopClosure().execute(null);assertEquals("Hello",buf.toString());ClosureUtils.nopClosure().execute("Hello");assertEquals("Hello",buf.toString());}
@Test public void testInvokeClosure(){StringBuffer buf=new StringBuffer("Hello");ClosureUtils.invokerClosure("reverse").execute(buf);assertEquals("olleH",buf.toString());buf=new StringBuffer("Hello");ClosureUtils.invokerClosure("setLength",new Class[]{Integer.TYPE},new Object[]{Integer.valueOf(2)}).execute(buf);assertEquals("He",buf.toString());}
@Test public void testForClosure(){final MockClosure<Object> cmd=new MockClosure<Object>();ClosureUtils.forClosure(5,cmd).execute(null);assertEquals(5,cmd.count);assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(0,new MockClosure<Object>()));assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(-1,new MockClosure<Object>()));assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(1,null));assertSame(NOPClosure.INSTANCE,ClosureUtils.forClosure(3,null));assertSame(cmd,ClosureUtils.forClosure(1,cmd));}
@Test public void testWhileClosure(){MockClosure<Object> cmd=new MockClosure<Object>();ClosureUtils.whileClosure(FalsePredicate.falsePredicate(),cmd).execute(null);assertEquals(0,cmd.count);cmd=new MockClosure<Object>();ClosureUtils.whileClosure(PredicateUtils.uniquePredicate(),cmd).execute(null);assertEquals(1,cmd.count);try {ClosureUtils.whileClosure(null,ClosureUtils.nopClosure());fail();}catch(final NullPointerException ex){}try {ClosureUtils.whileClosure(FalsePredicate.falsePredicate(),null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.whileClosure(null,null);fail();}catch(final NullPointerException ex){}}
@Test public void testDoWhileClosure(){MockClosure<Object> cmd=new MockClosure<Object>();ClosureUtils.doWhileClosure(cmd,FalsePredicate.falsePredicate()).execute(null);assertEquals(1,cmd.count);cmd=new MockClosure<Object>();ClosureUtils.doWhileClosure(cmd,PredicateUtils.uniquePredicate()).execute(null);assertEquals(2,cmd.count);try {ClosureUtils.doWhileClosure(null,null);fail();}catch(final NullPointerException ex){}}
@Test @SuppressWarnings("unchecked")public void testChainedClosure(){MockClosure<Object> a=new MockClosure<Object>();MockClosure<Object> b=new MockClosure<Object>();ClosureUtils.chainedClosure(a,b).execute(null);assertEquals(1,a.count);assertEquals(1,b.count);a=new MockClosure<Object>();b=new MockClosure<Object>();ClosureUtils.<Object>chainedClosure(new Closure[]{a,b,a}).execute(null);assertEquals(2,a.count);assertEquals(1,b.count);a=new MockClosure<Object>();b=new MockClosure<Object>();Collection<Closure<Object>> coll=new ArrayList<Closure<Object>>();coll.add(b);coll.add(a);coll.add(b);ClosureUtils.<Object>chainedClosure(coll).execute(null);assertEquals(1,a.count);assertEquals(2,b.count);assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure(new Closure[0]));assertSame(NOPClosure.INSTANCE,ClosureUtils.<Object>chainedClosure(Collections.<Closure<Object>>emptyList()));try {ClosureUtils.chainedClosure(null,null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<Object>chainedClosure((Closure[])null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>)null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<Object>chainedClosure(new Closure[]{null,null});fail();}catch(final NullPointerException ex){}try {coll=new ArrayList<Closure<Object>>();coll.add(null);coll.add(null);ClosureUtils.chainedClosure(coll);fail();}catch(final NullPointerException ex){}}
@Test public void testIfClosure(){MockClosure<Object> a=new MockClosure<Object>();MockClosure<Object> b=null;ClosureUtils.ifClosure(TruePredicate.truePredicate(),a).execute(null);assertEquals(1,a.count);a=new MockClosure<Object>();ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(),a).execute(null);assertEquals(0,a.count);a=new MockClosure<Object>();b=new MockClosure<Object>();ClosureUtils.ifClosure(TruePredicate.<Object>truePredicate(),a,b).execute(null);assertEquals(1,a.count);assertEquals(0,b.count);a=new MockClosure<Object>();b=new MockClosure<Object>();ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(),a,b).execute(null);assertEquals(0,a.count);assertEquals(1,b.count);}
@Test @SuppressWarnings("unchecked")public void testSwitchClosure(){final MockClosure<String> a=new MockClosure<String>();final MockClosure<String> b=new MockClosure<String>();ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("WELL");assertEquals(0,a.count);assertEquals(0,b.count);a.reset();b.reset();ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b}).execute("HELLO");assertEquals(1,a.count);assertEquals(0,b.count);a.reset();b.reset();final MockClosure<String> c=new MockClosure<String>();ClosureUtils.<String>switchClosure(new Predicate[]{EqualPredicate.equalPredicate("HELLO"),EqualPredicate.equalPredicate("THERE")},new Closure[]{a,b},c).execute("WELL");assertEquals(0,a.count);assertEquals(0,b.count);assertEquals(1,c.count);a.reset();b.reset();final Map<Predicate<String>,Closure<String>> map=new HashMap<Predicate<String>,Closure<String>>();map.put(EqualPredicate.equalPredicate("HELLO"),a);map.put(EqualPredicate.equalPredicate("THERE"),b);ClosureUtils.<String>switchClosure(map).execute(null);assertEquals(0,a.count);assertEquals(0,b.count);a.reset();b.reset();map.clear();map.put(EqualPredicate.equalPredicate("HELLO"),a);map.put(EqualPredicate.equalPredicate("THERE"),b);ClosureUtils.switchClosure(map).execute("THERE");assertEquals(0,a.count);assertEquals(1,b.count);a.reset();b.reset();c.reset();map.clear();map.put(EqualPredicate.equalPredicate("HELLO"),a);map.put(EqualPredicate.equalPredicate("THERE"),b);map.put(null,c);ClosureUtils.switchClosure(map).execute("WELL");assertEquals(0,a.count);assertEquals(0,b.count);assertEquals(1,c.count);assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new Predicate[0],new Closure[0]));assertEquals(NOPClosure.INSTANCE,ClosureUtils.<String>switchClosure(new HashMap<Predicate<String>,Closure<String>>()));map.clear();map.put(null,null);assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchClosure(map));try {ClosureUtils.switchClosure(null,null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<String>switchClosure((Predicate<String>[])null,(Closure<String>[])null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<String>switchClosure((Map<Predicate<String>,Closure<String>>)null);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<String>switchClosure(new Predicate[2],new Closure[2]);fail();}catch(final NullPointerException ex){}try {ClosureUtils.<String>switchClosure(new Predicate[]{TruePredicate.<String>truePredicate()},new Closure[]{a,b});fail();}catch(final IllegalArgumentException ex){}}
@Test public void testSwitchMapClosure(){final MockClosure<String> a=new MockClosure<String>();final MockClosure<String> b=new MockClosure<String>();final Map<String,Closure<String>> map=new HashMap<String,Closure<String>>();map.put("HELLO",a);map.put("THERE",b);ClosureUtils.switchMapClosure(map).execute(null);assertEquals(0,a.count);assertEquals(0,b.count);a.reset();b.reset();map.clear();map.put("HELLO",a);map.put("THERE",b);ClosureUtils.switchMapClosure(map).execute("THERE");assertEquals(0,a.count);assertEquals(1,b.count);a.reset();b.reset();map.clear();final MockClosure<String> c=new MockClosure<String>();map.put("HELLO",a);map.put("THERE",b);map.put(null,c);ClosureUtils.switchMapClosure(map).execute("WELL");assertEquals(0,a.count);assertEquals(0,b.count);assertEquals(1,c.count);assertEquals(NOPClosure.INSTANCE,ClosureUtils.switchMapClosure(new HashMap<String,Closure<String>>()));try {ClosureUtils.switchMapClosure(null);fail();}catch(final NullPointerException ex){}}
@Test public void testTransformerClosure(){final MockTransformer<Object> mock=new MockTransformer<Object>();final Closure<Object> closure=ClosureUtils.asClosure(mock);closure.execute(null);assertEquals(1,mock.count);closure.execute(null);assertEquals(2,mock.count);assertEquals(ClosureUtils.nopClosure(),ClosureUtils.asClosure(null));}
/** * Test that all Closure singletons hold singleton pattern in serialization/deserialization process.*/@Test public void testSingletonPatternInSerialization(){final Object[]singletones=new Object[]{ExceptionClosure.INSTANCE,NOPClosure.INSTANCE};for(final Object original : singletones){TestUtils.assertSameAfterSerialization("Singletone patern broken for " + original.getClass(),original);}}
@SuppressWarnings("unchecked")public void testlegalAddRemove(){final Bag<T> bag=makeTestBag();assertEquals(0,bag.size());final T[]els=(T[])new Object[]{"1","3","5","7","2","4","1"};for (int i=0;i < els.length;i++){bag.add(els[i]);assertEquals(i + 1,bag.size());assertEquals(true,bag.contains(els[i]));}Set<T> set=((PredicatedBag<T>)bag).uniqueSet();assertTrue("Unique set contains the first element",set.contains(els[0]));assertEquals(true,bag.remove(els[0]));set=((PredicatedBag<T>)bag).uniqueSet();assertTrue("Unique set now does not contain the first element",!set.contains(els[0]));}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final Bag<T> bag=makeTestBag();final Integer i=Integer.valueOf(3);try {bag.add((T)i);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!bag.contains(i));}
@SuppressWarnings("unchecked")public void testIllegalDecorate(){final HashBag<Object> elements=new HashBag<Object>();elements.add("one");elements.add("two");elements.add(Integer.valueOf(3));elements.add("four");try {decorateBag((HashBag<T>)elements,stringPredicate());fail("Bag contains an element that should fail the predicate.");}catch(final IllegalArgumentException e){}try {decorateBag(new HashBag<T>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException e){}}
@SuppressWarnings("unchecked")public void testKeyTransformedMap(){final Object[]els=new Object[]{"1","3","5","7","2","4","6"};MultiValuedMap<K,V> map=TransformedMultiValuedMap.transformingMap(new ArrayListValuedHashMap<K,V>(),(Transformer<? super K,? extends K>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER,null);assertEquals(0,map.size());for (int i=0;i < els.length;i++){map.put((K)els[i],(V)els[i]);assertEquals(i + 1,map.size());assertEquals(true,map.containsKey(Integer.valueOf((String)els[i])));assertEquals(false,map.containsKey(els[i]));assertEquals(true,map.containsValue(els[i]));assertEquals(true,map.get((K)Integer.valueOf((String)els[i])).contains(els[i]));}Collection<V> coll=map.remove(els[0]);assertNotNull(coll);assertEquals(0,coll.size());assertEquals(true,map.remove(Integer.valueOf((String)els[0])).contains(els[0]));}
@SuppressWarnings("unchecked")public void testValueTransformedMap(){final Object[]els=new Object[]{"1","3","5","7","2","4","6"};MultiValuedMap<K,V> map=TransformedMultiValuedMap.transformingMap(new ArrayListValuedHashMap<K,V>(),null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,map.size());for (int i=0;i < els.length;i++){map.put((K)els[i],(V)els[i]);assertEquals(i + 1,map.size());assertEquals(true,map.containsValue(Integer.valueOf((String)els[i])));assertEquals(false,map.containsValue(els[i]));assertEquals(true,map.containsKey(els[i]));assertEquals(true,map.get((K)els[i]).contains(Integer.valueOf((String)els[i])));}assertEquals(true,map.remove(els[0]).contains(Integer.valueOf((String)els[0])));}
@SuppressWarnings("unchecked")public void testFactory_Decorate(){final MultiValuedMap<K,V> base=new ArrayListValuedHashMap<K,V>();base.put((K)"A",(V)"1");base.put((K)"B",(V)"2");base.put((K)"C",(V)"3");final MultiValuedMap<K,V> trans=TransformedMultiValuedMap.transformingMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(3,trans.size());assertEquals(true,trans.get((K)"A").contains("1"));assertEquals(true,trans.get((K)"B").contains("2"));assertEquals(true,trans.get((K)"C").contains("3"));trans.put((K)"D",(V)"4");assertEquals(true,trans.get((K)"D").contains(Integer.valueOf(4)));}
@SuppressWarnings("unchecked")public void testFactory_decorateTransform(){final MultiValuedMap<K,V> base=new ArrayListValuedHashMap<K,V>();base.put((K)"A",(V)"1");base.put((K)"B",(V)"2");base.put((K)"C",(V)"3");final MultiValuedMap<K,V> trans=TransformedMultiValuedMap.transformedMap(base,null,(Transformer<? super V,? extends V>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(3,trans.size());assertEquals(true,trans.get((K)"A").contains(Integer.valueOf(1)));assertEquals(true,trans.get((K)"B").contains(Integer.valueOf(2)));assertEquals(true,trans.get((K)"C").contains(Integer.valueOf(3)));trans.put((K)"D",(V)"4");assertEquals(true,trans.get((K)"D").contains(Integer.valueOf(4)));}
public void testConstructors(){try {final Map<String,String> map=null;new PassiveExpiringMap<String,String>(map);fail("constructor - exception should have been thrown.");}catch(final NullPointerException ex){}try {final ExpirationPolicy<String,String> policy=null;new PassiveExpiringMap<String,String>(policy);fail("constructor - exception should have been thrown.");}catch(final NullPointerException ex){}try {final TimeUnit unit=null;new PassiveExpiringMap<String,String>(10L,unit);fail("constructor - exception should have been thrown.");}catch(final NullPointerException ex){}}
public void testContainsKey(){final Map<Integer,String> m=makeTestMap();assertFalse(m.containsKey(Integer.valueOf(1)));assertFalse(m.containsKey(Integer.valueOf(3)));assertFalse(m.containsKey(Integer.valueOf(5)));assertTrue(m.containsKey(Integer.valueOf(2)));assertTrue(m.containsKey(Integer.valueOf(4)));assertTrue(m.containsKey(Integer.valueOf(6)));}
public void testContainsValue(){final Map<Integer,String> m=makeTestMap();assertFalse(m.containsValue("one"));assertFalse(m.containsValue("three"));assertFalse(m.containsValue("five"));assertTrue(m.containsValue("two"));assertTrue(m.containsValue("four"));assertTrue(m.containsValue("six"));}
public void testDecoratedMap(){final Map<Integer,String> m=makeDecoratedTestMap();assertEquals(6,m.size());assertEquals("one",m.get(Integer.valueOf(1)));assertEquals("two",m.get(Integer.valueOf(2)));m.remove(Integer.valueOf(2));assertEquals(5,m.size());assertEquals("one",m.get(Integer.valueOf(1)));assertNull(m.get(Integer.valueOf(2)));assertNull(m.get(Integer.valueOf(2)));m.put(Integer.valueOf(2),"two");assertEquals(6,m.size());assertEquals("one",m.get(Integer.valueOf(1)));assertEquals("two",m.get(Integer.valueOf(2)));m.put(Integer.valueOf(1),"one-one");assertEquals(5,m.size());assertNull(m.get(Integer.valueOf(1)));assertEquals("two",m.get(Integer.valueOf(2)));}
public void testEntrySet(){final Map<Integer,String> m=makeTestMap();assertEquals(3,m.entrySet().size());}
public void testGet(){final Map<Integer,String> m=makeTestMap();assertNull(m.get(Integer.valueOf(1)));assertEquals("two",m.get(Integer.valueOf(2)));assertNull(m.get(Integer.valueOf(3)));assertEquals("four",m.get(Integer.valueOf(4)));assertNull(m.get(Integer.valueOf(5)));assertEquals("six",m.get(Integer.valueOf(6)));}
public void testIsEmpty(){Map<Integer,String> m=makeTestMap();assertFalse(m.isEmpty());m=makeTestMap();m.remove(Integer.valueOf(2));m.remove(Integer.valueOf(4));m.remove(Integer.valueOf(6));assertTrue(m.isEmpty());}
public void testKeySet(){final Map<Integer,String> m=makeTestMap();assertEquals(3,m.keySet().size());}
public void testSize(){final Map<Integer,String> m=makeTestMap();assertEquals(3,m.size());}
public void testValues(){final Map<Integer,String> m=makeTestMap();assertEquals(3,m.values().size());}
public void testZeroTimeToLive(){final PassiveExpiringMap<String,String> m=new PassiveExpiringMap<String,String>(0L);m.put("a","b");assertNull(m.get("a"));}
public void testExpiration(){validateExpiration(new PassiveExpiringMap<String,String>(500),500);validateExpiration(new PassiveExpiringMap<String,String>(1000),1000);validateExpiration(new PassiveExpiringMap<String,String>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String,String>(500)),500);validateExpiration(new PassiveExpiringMap<String,String>(new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String,String>(1,TimeUnit.SECONDS)),1000);}
/** * Test a decorated iterator bounded such that the first element returned is at an index greater its first element,and the last element returned is at an index less than its last element.*/@Test public void testSkipping(){Iterator<E> iter=new SkippingIterator<E>(testList.iterator(),2);assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test a decorated iterator bounded such that the <code>offset</code> is zero,in that the SkippingIterator should return all the same elements as its decorated iterator.*/@Test public void testSameAsDecorated(){Iterator<E> iter=new SkippingIterator<E>(testList.iterator(),0);assertTrue(iter.hasNext());assertEquals("a",iter.next());assertTrue(iter.hasNext());assertEquals("b",iter.next());assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the case if the <code>offset</code> passed to the constructor is greater than the decorated iterator's size. The SkippingIterator should behave as if there are no more elements to return.*/@Test public void testOffsetGreaterThanSize(){Iterator<E> iter=new SkippingIterator<E>(testList.iterator(),10);assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the case if a negative <code>offset</code> is passed to the constructor.  {@link IllegalArgumentException}is expected.*/@Test public void testNegativeOffset(){try {new SkippingIterator<E>(testList.iterator(),-1);fail("Expected IllegalArgumentException.");}catch(IllegalArgumentException iae){}}
/** * Test the <code>remove()</code> method being called without <code>next()</code> being called first.*/@Test public void testRemoveWithoutCallingNext(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new SkippingIterator<E>(testListCopy.iterator(),1);try {iter.remove();fail("Expected IllegalStateException.");}catch(IllegalStateException ise){}}
/** * Test the <code>remove()</code> method being called twice without calling <code>next()</code> in between.*/@Test public void testRemoveCalledTwice(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new SkippingIterator<E>(testListCopy.iterator(),1);assertTrue(iter.hasNext());assertEquals("b",iter.next());iter.remove();try {iter.remove();fail("Expected IllegalStateException.");}catch(IllegalStateException ise){}}
/** * Test removing the first element. Verify that the element is removed from the underlying collection.*/@Test public void testRemoveFirst(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new SkippingIterator<E>(testListCopy.iterator(),4);assertTrue(iter.hasNext());assertEquals("e",iter.next());iter.remove();assertFalse(testListCopy.contains("e"));assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test removing an element in the middle of the iterator. Verify that the element is removed from the underlying collection.*/@Test public void testRemoveMiddle(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new SkippingIterator<E>(testListCopy.iterator(),3);assertTrue(iter.hasNext());assertEquals("d",iter.next());iter.remove();assertFalse(testListCopy.contains("d"));assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test removing the last element. Verify that the element is removed from the underlying collection.*/@Test public void testRemoveLast(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new SkippingIterator<E>(testListCopy.iterator(),5);assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}iter.remove();assertFalse(testListCopy.contains("g"));assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the case if the decorated iterator does not support the <code>remove()</code> method and throws an  {@link UnsupportedOperationException}.*/@Test public void testRemoveUnsupported(){Iterator<E> mockIterator=new AbstractIteratorDecorator<E>(testList.iterator()){@Override public void remove(){throw new UnsupportedOperationException();}};Iterator<E> iter=new SkippingIterator<E>(mockIterator,1);assertTrue(iter.hasNext());assertEquals("b",iter.next());try {iter.remove();fail("Expected UnsupportedOperationException.");}catch(UnsupportedOperationException usoe){}}
public void testTransformedMap(){final TransformedSplitMap<Integer,String,Object,Class<?>> map=TransformedSplitMap.transformingMap(new HashMap<String,Class<?>>(),intToString,objectToClass);final Integer[]k=new Integer[]{0,1,2,3,4,5,6};final Object[]v=new Object[]{"",new Object(),new HashMap<Object,Object>(),0,BigInteger.TEN,null,new Object[0]};assertEquals(0,map.size());for (int i=0;i < k.length;i++){map.put(k[i],v[i]);assertEquals(i + 1,map.size());assertTrue(map.containsKey(intToString.transform(k[i])));assertFalse(map.containsKey(k[i]));assertTrue(map.containsValue(objectToClass.transform(v[i])));assertTrue(objectToClass.transform(v[i])!= v[i]^ map.containsValue(v[i]));assertEquals(objectToClass.transform(v[i]),map.get(intToString.transform(k[i])));}int sz=map.size();assertEquals(null,map.remove(k[0]));assertEquals(sz,map.size());assertEquals(objectToClass.transform(v[0]),map.remove(intToString.transform(k[0])));assertEquals(--sz,map.size());final TransformedSplitMap<String,String,String,Integer> map2=TransformedSplitMap.transformingMap(new HashMap<String,Integer>(),NOPTransformer.<String>nopTransformer(),stringToInt);assertEquals(0,map2.size());for (int i=0;i < 6;i++){map2.put(String.valueOf(i),String.valueOf(i));assertEquals(i + 1,map2.size());assertTrue(map2.containsValue(i));assertFalse(map2.containsValue(String.valueOf(i)));assertTrue(map2.containsKey(String.valueOf(i)));assertEquals(i,map2.get(String.valueOf(i)).intValue());}int sz2=map2.size();assertEquals(Integer.valueOf(0),map2.remove("0"));assertEquals(--sz2,map2.size());}
public void testMapIterator(){final TransformedSplitMap<String,String,String,Integer> map=TransformedSplitMap.transformingMap(new HashMap<String,Integer>(),NOPTransformer.<String>nopTransformer(),stringToInt);assertEquals(0,map.size());for (int i=0;i < 6;i++){map.put(String.valueOf(i),String.valueOf(i));}for (final MapIterator<String,Integer> it=map.mapIterator();it.hasNext();){final String k=it.next();assertEquals(k,it.getKey());assertEquals(map.get(k),it.getValue());}}
public void testEmptyMap()throws IOException,ClassNotFoundException {final TransformedSplitMap<String,String,String,String> map=TransformedSplitMap.transformingMap(new HashMap<String,String>(),NOPTransformer.<String>nopTransformer(),NOPTransformer.<String>nopTransformer());final ObjectInputStream in=new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + "/TransformedSplitMap.emptyCollection.version4.obj"));final Object readObject=in.readObject();in.close();final TransformedSplitMap<?,?,?,?> readMap=(TransformedSplitMap<?,?,?,?>)readObject;assertTrue("Map should be empty",readMap.size()== 0);assertEquals(map.entrySet(),readMap.entrySet());}
public void testFullMap()throws IOException,ClassNotFoundException {final TransformedSplitMap<String,String,String,String> map=TransformedSplitMap.transformingMap(new HashMap<String,String>(),NOPTransformer.<String>nopTransformer(),NOPTransformer.<String>nopTransformer());map.put("a","b");map.put("c","d");map.put("e","f");map.put("g","h");final ObjectInputStream in=new ObjectInputStream(new FileInputStream(TEST_DATA_PATH + "TransformedSplitMap.fullCollection.version4.obj"));final Object readObject=in.readObject();in.close();final TransformedSplitMap<?,?,?,?> readMap=(TransformedSplitMap<?,?,?,?>)readObject;assertFalse("Map should not be empty",readMap.size()== 0);assertEquals(map.entrySet(),readMap.entrySet());}
/** * Adds the simple test defined by the given method to the TestSuite.* @param bulk  The instance of the class that defined the method(I know it's weird.  But the point is,we can clone the instance and not have to worry about constructors.)* @param m  The simple test method*/void addTest(final BulkTest bulk,final Method m){final BulkTest bulk2=(BulkTest)bulk.clone();bulk2.setName(m.getName());bulk2.verboseName=prefix + "." + m.getName();if (ignored.contains(bulk2.verboseName)){return;}result.addTest(bulk2);}
@Override public void testMapGet(){}
@Test public void mapGetWithFactory(){Map<Integer,Number> map=lazyMap(new HashMap<Integer,Number>(),oneFactory);assertEquals(0,map.size());final Number i1=map.get("Five");assertEquals(1,i1);assertEquals(1,map.size());final Number i2=map.get(new String(new char[]{'F','i','v','e'}));assertEquals(1,i2);assertEquals(1,map.size());assertSame(i1,i2);map=lazyMap(new HashMap<Integer,Number>(),FactoryUtils.<Long>nullFactory());final Object o=map.get("Five");assertEquals(null,o);assertEquals(1,map.size());}
@Test public void mapGetWithTransformer(){final Transformer<Number,Integer> intConverter=new Transformer<Number,Integer>(){@Override public Integer transform(final Number input){return input.intValue();}};final Map<Long,Number> map=lazyMap(new HashMap<Long,Number>(),intConverter);assertEquals(0,map.size());final Number i1=map.get(123L);assertEquals(123,i1);assertEquals(1,map.size());}
@SuppressWarnings("unchecked")public void testContains(){final CompositeSet<E> set=new CompositeSet<E>(new Set[]{buildOne(),buildTwo()});assertTrue(set.contains("1"));}
@SuppressWarnings("unchecked")public void testRemoveUnderlying(){final Set<E> one=buildOne();final Set<E> two=buildTwo();final CompositeSet<E> set=new CompositeSet<E>(new Set[]{one,two});one.remove("1");assertFalse(set.contains("1"));two.remove("3");assertFalse(set.contains("3"));}
@SuppressWarnings("unchecked")public void testRemoveComposited(){final Set<E> one=buildOne();final Set<E> two=buildTwo();final CompositeSet<E> set=new CompositeSet<E>(new Set[]{one,two});set.remove("1");assertFalse(one.contains("1"));set.remove("3");assertFalse(one.contains("3"));}
@SuppressWarnings("unchecked")public void testFailedCollisionResolution(){final Set<E> one=buildOne();final Set<E> two=buildTwo();final CompositeSet<E> set=new CompositeSet<E>(new Set[]{one,two});set.setMutator(new SetMutator<E>(){private static final long serialVersionUID=1L;@Override public void resolveCollision(final CompositeSet<E> comp,final Set<E> existing,final Set<E> added,final Collection<E> intersects){}@Override public boolean add(final CompositeSet<E> composite,final List<Set<E>> collections,final E obj){throw new UnsupportedOperationException();}@Override public boolean addAll(final CompositeSet<E> composite,final List<Set<E>> collections,final Collection<? extends E> coll){throw new UnsupportedOperationException();}});final HashSet<E> three=new HashSet<E>();three.add((E)"1");try {set.addComposited(three);fail("IllegalArgumentException should have been thrown");}catch(final IllegalArgumentException e){}}
@SuppressWarnings("unchecked")public void testAddComposited(){final Set<E> one=buildOne();final Set<E> two=buildTwo();final CompositeSet<E> set=new CompositeSet<E>();set.addComposited(one,two);final CompositeSet<E> set2=new CompositeSet<E>(buildOne());set2.addComposited(buildTwo());assertTrue(set.equals(set2));final HashSet<E> set3=new HashSet<E>();set3.add((E)"1");set3.add((E)"2");set3.add((E)"3");final HashSet<E> set4=new HashSet<E>();set4.add((E)"4");final CompositeSet<E> set5=new CompositeSet<E>(set3);set5.addComposited(set4);assertTrue(set.equals(set5));try {set.addComposited(set3);fail("Expecting UnsupportedOperationException.");}catch(final UnsupportedOperationException ex){}}
@SuppressWarnings("unchecked")public void testAddCompositedCollision(){final HashSet<E> set1=new HashSet<E>();set1.add((E)"1");set1.add((E)"2");set1.add((E)"3");final HashSet<E> set2=new HashSet<E>();set2.add((E)"4");final CompositeSet<E> set3=new CompositeSet<E>(set1);try {set3.addComposited(set1,buildOne());fail("Expecting UnsupportedOperationException.");}catch(final UnsupportedOperationException ex){}try {set3.addComposited(set1,buildOne(),buildTwo());fail("Expecting UnsupportedOperationException.");}catch(final UnsupportedOperationException ex){}}
@Test public void testThrowingClosure(){Closure<Integer> closure=generateNoExceptionClosure();try {closure.execute(Integer.valueOf(0));}catch(final FunctorException ex){Assert.fail();}catch(final RuntimeException ex){Assert.fail();}closure=generateIOExceptionClosure();try {closure.execute(Integer.valueOf(0));Assert.fail();}catch(final FunctorException ex){Assert.assertTrue(ex.getCause()instanceof IOException);}catch(final RuntimeException ex){Assert.fail();}closure=generateNullPointerExceptionClosure();try {closure.execute(Integer.valueOf(0));Assert.fail();}catch(final FunctorException ex){Assert.fail();}catch(final RuntimeException ex){Assert.assertTrue(ex instanceof NullPointerException);}}
@SuppressWarnings("unchecked")public void testOrdering(){final ListOrderedSet<E> set=setupSet();Iterator<E> it=set.iterator();for (int i=0;i < 10;i++){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}for (int i=0;i < 10;i+=2){assertTrue("Must be able to remove int",set.remove(Integer.toString(i)));}it=set.iterator();for (int i=1;i < 10;i+=2){assertEquals("Sequence is wrong after remove ",Integer.toString(i),it.next());}for (int i=0;i < 10;i++){set.add((E)Integer.toString(i));}assertEquals("Size of set is wrong!",10,set.size());it=set.iterator();for (int i=1;i < 10;i+=2){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}for (int i=0;i < 10;i+=2){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}}
@SuppressWarnings("unchecked")public void testListAddRemove(){final ListOrderedSet<E> set=makeObject();final List<E> view=set.asList();set.add((E)ZERO);set.add((E)ONE);set.add((E)TWO);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));assertEquals(3,view.size());assertSame(ZERO,view.get(0));assertSame(ONE,view.get(1));assertSame(TWO,view.get(2));assertEquals(0,set.indexOf(ZERO));assertEquals(1,set.indexOf(ONE));assertEquals(2,set.indexOf(TWO));set.remove(1);assertEquals(2,set.size());assertSame(ZERO,set.get(0));assertSame(TWO,set.get(1));assertEquals(2,view.size());assertSame(ZERO,view.get(0));assertSame(TWO,view.get(1));}
@SuppressWarnings("unchecked")public void testListAddIndexed(){final ListOrderedSet<E> set=makeObject();set.add((E)ZERO);set.add((E)TWO);set.add(1,(E)ONE);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));set.add(0,(E)ONE);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));final List<E> list=new ArrayList<E>();list.add((E)ZERO);list.add((E)TWO);set.addAll(0,list);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));list.add(0,(E)THREE);set.remove(TWO);set.addAll(1,list);assertEquals(4,set.size());assertSame(ZERO,set.get(0));assertSame(THREE,set.get(1));assertSame(TWO,set.get(2));assertSame(ONE,set.get(3));}
@SuppressWarnings("boxing")public void testPermutationResultSize(){int factorial=1;for (int i=0;i < 8;i++,factorial*=i){List<Integer> list=new ArrayList<Integer>();for (int j=0;j < i;j++){list.add(j);}Iterator<List<Integer>> it=new PermutationIterator<Integer>(list);int count=0;while (it.hasNext()){it.next();count++;}assertEquals(factorial,count);}}
/** * test checking that all the permutations are returned*/@SuppressWarnings("boxing")public void testPermutationExhaustivity(){List<Character> perm1=new ArrayList<Character>();List<Character> perm2=new ArrayList<Character>();List<Character> perm3=new ArrayList<Character>();List<Character> perm4=new ArrayList<Character>();List<Character> perm5=new ArrayList<Character>();List<Character> perm6=new ArrayList<Character>();perm1.add('A');perm2.add('A');perm3.add('B');perm4.add('B');perm5.add('C');perm6.add('C');perm1.add('B');perm2.add('C');perm3.add('A');perm4.add('C');perm5.add('A');perm6.add('B');perm1.add('C');perm2.add('B');perm3.add('C');perm4.add('A');perm5.add('B');perm6.add('A');List<List<Character>> results=new ArrayList<List<Character>>();PermutationIterator<Character> it=makeObject();while (it.hasNext()){List<Character> next=it.next();results.add(next);}assertEquals(6,results.size());assertTrue(results.contains(perm1));assertTrue(results.contains(perm2));assertTrue(results.contains(perm3));assertTrue(results.contains(perm4));assertTrue(results.contains(perm5));assertTrue(results.contains(perm6));}
/** * test checking that all the permutations are returned only once.*/public void testPermutationUnicity(){List<List<Character>> resultsList=new ArrayList<List<Character>>();Set<List<Character>> resultsSet=new HashSet<List<Character>>();PermutationIterator<Character> it=makeObject();while (it.hasNext()){List<Character> permutation=it.next();resultsList.add(permutation);resultsSet.add(permutation);}assertEquals(6,resultsList.size());assertEquals(6,resultsSet.size());}
public void testPermutationException(){List<List<Character>> resultsList=new ArrayList<List<Character>>();PermutationIterator<Character> it=makeObject();while (it.hasNext()){List<Character> permutation=it.next();resultsList.add(permutation);}try {it.next();fail();}catch(NoSuchElementException e){}}
public void testPermutatorHasMore(){PermutationIterator<Character> it=makeObject();for (int i=0;i < 6;i++){assertTrue(it.hasNext());it.next();}assertFalse(it.hasNext());}
public void testEmptyCollection(){PermutationIterator<Character> it=makeEmptyIterator();assertTrue(it.hasNext());List<Character> nextPermutation=it.next();assertEquals(0,nextPermutation.size());assertFalse(it.hasNext());}
public void testIterator(){final Iterator<E> iter=makeObject();assertTrue("Iterator has a first item",iter.hasNext());final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
@SuppressWarnings("unchecked")public void testSingletonIteratorRemove(){final ResettableIterator<E> iter=new SingletonIterator<E>((E)"xyzzy");assertTrue(iter.hasNext());assertEquals("xyzzy",iter.next());iter.remove();iter.reset();assertTrue(!iter.hasNext());}
public void testReset(){final ResettableIterator<E> it=makeObject();assertEquals(true,it.hasNext());assertEquals(testValue,it.next());assertEquals(false,it.hasNext());it.reset();assertEquals(true,it.hasNext());assertEquals(testValue,it.next());assertEquals(false,it.hasNext());it.reset();it.reset();assertEquals(true,it.hasNext());}
@Test public void testUnmodifiableTrie(){Trie<String,Object> trie=TrieUtils.unmodifiableTrie(new PatriciaTrie<Object>());assertTrue("Returned object should be an UnmodifiableTrie.",trie instanceof UnmodifiableTrie);try {TrieUtils.unmodifiableTrie(null);fail("Expecting NullPointerException for null trie.");}catch(final NullPointerException ex){}assertSame("UnmodifiableTrie shall not be decorated",trie,TrieUtils.unmodifiableTrie(trie));}
@Override public void testQueueRemove(){resetEmpty();try {getCollection().remove();fail();}catch(final UnsupportedOperationException ex){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final Queue<E> queue=makeFullCollection();assertSame(queue,UnmodifiableQueue.unmodifiableQueue(queue));try {UnmodifiableQueue.unmodifiableQueue(null);fail();}catch(final NullPointerException ex){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final MultiValuedMap<K,V> map=makeFullMap();assertSame(map,UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(map));}
public void testDecoratorFactoryNullMap(){try {UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap(null);fail("map must not be null");}catch(NullPointerException e){}}
@SuppressWarnings("unchecked")public void testAddException(){MultiValuedMap<K,V> map=makeObject();try {map.put((K)"one",(V)"uno");fail();}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testUnmodifiableEntries(){resetFull();Collection<Entry<K,V>> entries=getMap().entries();try {entries.clear();fail();}catch(UnsupportedOperationException e){}Iterator<Entry<K,V>> it=entries.iterator();Entry<K,V> entry=it.next();try {it.remove();fail();}catch(UnsupportedOperationException e){}try {entry.setValue((V)"three");fail();}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testUnmodifiableMapIterator(){resetFull();MapIterator<K,V> mapIt=getMap().mapIterator();try {mapIt.remove();fail();}catch(UnsupportedOperationException e){}try {mapIt.setValue((V)"three");fail();}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testUnmodifiableKeySet(){resetFull();Set<K> keySet=getMap().keySet();try {keySet.add((K)"four");fail();}catch(UnsupportedOperationException e){}try {keySet.remove("four");fail();}catch(UnsupportedOperationException e){}try {keySet.clear();fail();}catch(UnsupportedOperationException e){}Iterator<K> it=keySet.iterator();try {it.remove();fail();}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testUnmodifiableValues(){resetFull();Collection<V> values=getMap().values();try {values.add((V)"four");fail();}catch(UnsupportedOperationException e){}try {values.remove("four");fail();}catch(UnsupportedOperationException e){}try {values.clear();fail();}catch(UnsupportedOperationException e){}Iterator<V> it=values.iterator();try {it.remove();fail();}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testUnmodifiableAsMap(){resetFull();Map<K,Collection<V>> mapCol=getMap().asMap();try {mapCol.put((K)"four",(Collection<V>)Arrays.asList("four"));fail();}catch(UnsupportedOperationException e){}try {mapCol.remove("four");fail();}catch(UnsupportedOperationException e){}try {mapCol.clear();fail();}catch(UnsupportedOperationException e){}try {mapCol.clear();fail();}catch(UnsupportedOperationException e){}}
@SuppressWarnings("unchecked")public void testUnmodifiableKeys(){resetFull();MultiSet<K> keys=getMap().keys();try {keys.add((K)"four");fail();}catch(UnsupportedOperationException e){}try {keys.remove("four");fail();}catch(UnsupportedOperationException e){}try {keys.clear();fail();}catch(UnsupportedOperationException e){}Iterator<K> it=keys.iterator();try {it.remove();fail();}catch(UnsupportedOperationException e){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final Bag<E> queue=makeFullCollection();assertSame(queue,UnmodifiableBag.unmodifiableBag(queue));try {UnmodifiableBag.unmodifiableBag(null);fail();}catch(final NullPointerException ex){}}
@Test public void testNoopComparatorChain(){final ComparatorChain<Integer> chain=new ComparatorChain<Integer>();final Integer i1=Integer.valueOf(4);final Integer i2=Integer.valueOf(6);chain.addComparator(new ComparableComparator<Integer>());final int correctValue=i1.compareTo(i2);assertTrue("Comparison returns the right order",chain.compare(i1,i2)== correctValue);}
@Test public void testBadNoopComparatorChain(){final ComparatorChain<Integer> chain=new ComparatorChain<Integer>();final Integer i1=Integer.valueOf(4);final Integer i2=Integer.valueOf(6);try {chain.compare(i1,i2);fail("An exception should be thrown when a chain contains zero comparators.");}catch(final UnsupportedOperationException e){}}
@Test public void testListComparatorChain(){final List<Comparator<Integer>> list=new LinkedList<Comparator<Integer>>();list.add(new ComparableComparator<Integer>());final ComparatorChain<Integer> chain=new ComparatorChain<Integer>(list);final Integer i1=Integer.valueOf(4);final Integer i2=Integer.valueOf(6);final int correctValue=i1.compareTo(i2);assertTrue("Comparison returns the right order",chain.compare(i1,i2)== correctValue);}
@Test public void testBadListComparatorChain(){final List<Comparator<Integer>> list=new LinkedList<Comparator<Integer>>();final ComparatorChain<Integer> chain=new ComparatorChain<Integer>(list);final Integer i1=Integer.valueOf(4);final Integer i2=Integer.valueOf(6);try {chain.compare(i1,i2);fail("An exception should be thrown when a chain contains zero comparators.");}catch(final UnsupportedOperationException e){}}
@Test public void testComparatorChainOnMinvaluedCompatator(){final ComparatorChain<Integer> chain=new ComparatorChain<Integer>();chain.addComparator(new Comparator<Integer>(){@Override public int compare(final Integer a,final Integer b){final int result=a.compareTo(b);if (result < 0){return Integer.MIN_VALUE;}if (result > 0){return Integer.MAX_VALUE;}return 0;}},true);assertTrue(chain.compare(Integer.valueOf(4),Integer.valueOf(5))> 0);assertTrue(chain.compare(Integer.valueOf(5),Integer.valueOf(4))< 0);assertTrue(chain.compare(Integer.valueOf(4),Integer.valueOf(4))== 0);}
public void testIterator(){final Iterator<String> iter=makeObject();for(final String testValue : testArray){final Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testRemoveFromFilteredIterator(){final Predicate<Integer> myPredicate=new Predicate<Integer>(){@Override public boolean evaluate(final Integer i){return i.compareTo(Integer.valueOf(4))< 0;}};final List<Integer> list1=new ArrayList<Integer>();final List<Integer> list2=new ArrayList<Integer>();list1.add(Integer.valueOf(1));list1.add(Integer.valueOf(2));list2.add(Integer.valueOf(3));list2.add(Integer.valueOf(4));final Iterator<Integer> it1=IteratorUtils.filteredIterator(list1.iterator(),myPredicate);final Iterator<Integer> it2=IteratorUtils.filteredIterator(list2.iterator(),myPredicate);final Iterator<Integer> it=IteratorUtils.chainedIterator(it1,it2);while (it.hasNext()){it.next();it.remove();}assertEquals(0,list1.size());assertEquals(1,list2.size());}
@Override public void testRemove(){final Iterator<String> iter=makeObject();try {iter.remove();fail("Calling remove before the first call to next()should throw an exception");}catch(final IllegalStateException e){}for(final String testValue : testArray){final String iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);if (!iterValue.equals("Four")){iter.remove();}}assertTrue("List is empty",list1.size()== 0);assertTrue("List is empty",list2.size()== 1);assertTrue("List is empty",list3.size()== 0);}
public void testFirstIteratorIsEmptyBug(){final List<String> empty=new ArrayList<String>();final List<String> notEmpty=new ArrayList<String>();notEmpty.add("A");notEmpty.add("B");notEmpty.add("C");final IteratorChain<String> chain=new IteratorChain<String>();chain.addIterator(empty.iterator());chain.addIterator(notEmpty.iterator());assertTrue("should have next",chain.hasNext());assertEquals("A",chain.next());assertTrue("should have next",chain.hasNext());assertEquals("B",chain.next());assertTrue("should have next",chain.hasNext());assertEquals("C",chain.next());assertTrue("should not have next",!chain.hasNext());}
public void testEmptyChain(){final IteratorChain<Object> chain=new IteratorChain<Object>();assertEquals(false,chain.hasNext());try {chain.next();fail();}catch(final NoSuchElementException ex){}try {chain.remove();fail();}catch(final IllegalStateException ex){}}
@Test public void booleanComparator(){Comparator<Boolean> comp=ComparatorUtils.booleanComparator(true);assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE)< 0);assertTrue(comp.compare(Boolean.TRUE,Boolean.TRUE)== 0);assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE)> 0);comp=ComparatorUtils.booleanComparator(false);assertTrue(comp.compare(Boolean.TRUE,Boolean.FALSE)> 0);assertTrue(comp.compare(Boolean.TRUE,Boolean.TRUE)== 0);assertTrue(comp.compare(Boolean.FALSE,Boolean.TRUE)< 0);}
@Test public void chainedComparator(){Comparator<Integer> comp=ComparatorUtils.chainedComparator(ComparatorUtils.<Integer>naturalComparator(),ComparatorUtils.<Integer>naturalComparator());assertTrue(comp.compare(1,2)< 0);assertTrue(comp.compare(1,1)== 0);assertTrue(comp.compare(2,1)> 0);}
@Test public void max(){Comparator<Integer> reversed=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());assertEquals(Integer.valueOf(10),ComparatorUtils.max(1,10,null));assertEquals(Integer.valueOf(10),ComparatorUtils.max(10,-10,null));assertEquals(Integer.valueOf(1),ComparatorUtils.max(1,10,reversed));assertEquals(Integer.valueOf(-10),ComparatorUtils.max(10,-10,reversed));try {ComparatorUtils.max(1,null,null);fail("expecting NullPointerException");}catch(NullPointerException npe){}try {ComparatorUtils.max(null,10,null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void min(){Comparator<Integer> reversed=ComparatorUtils.reversedComparator(ComparatorUtils.<Integer>naturalComparator());assertEquals(Integer.valueOf(1),ComparatorUtils.min(1,10,null));assertEquals(Integer.valueOf(-10),ComparatorUtils.min(10,-10,null));assertEquals(Integer.valueOf(10),ComparatorUtils.min(1,10,reversed));assertEquals(Integer.valueOf(10),ComparatorUtils.min(10,-10,reversed));try {ComparatorUtils.min(1,null,null);fail("expecting NullPointerException");}catch(NullPointerException npe){}try {ComparatorUtils.min(null,10,null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void nullLowComparator(){Comparator<Integer> comp=ComparatorUtils.nullLowComparator(null);assertTrue(comp.compare(null,10)< 0);assertTrue(comp.compare(null,null)== 0);assertTrue(comp.compare(10,null)> 0);}
@Test public void nullHighComparator(){Comparator<Integer> comp=ComparatorUtils.nullHighComparator(null);assertTrue(comp.compare(null,10)> 0);assertTrue(comp.compare(null,null)== 0);assertTrue(comp.compare(10,null)< 0);}
public void testGet(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo());assertEquals("one",map.get("1"));assertEquals("four",map.get("4"));}
@SuppressWarnings("unchecked")public void testAddComposited(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo());final HashMap<K,V> three=new HashMap<K,V>();three.put((K)"5",(V)"five");map.addComposited(three);assertTrue(map.containsKey("5"));try {map.addComposited(three);fail("Expecting IllegalArgumentException.");}catch(final IllegalArgumentException ex){}}
@SuppressWarnings("unchecked")public void testRemoveComposited(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo());final HashMap<K,V> three=new HashMap<K,V>();three.put((K)"5",(V)"five");map.addComposited(three);assertTrue(map.containsKey("5"));map.removeComposited(three);assertFalse(map.containsKey("5"));map.removeComposited(buildOne());assertFalse(map.containsKey("2"));}
@SuppressWarnings("unchecked")public void testRemoveFromUnderlying(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo());final HashMap<K,V> three=new HashMap<K,V>();three.put((K)"5",(V)"five");map.addComposited(three);assertTrue(map.containsKey("5"));three.remove("5");assertFalse(map.containsKey("5"));}
@SuppressWarnings("unchecked")public void testRemoveFromComposited(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo());final HashMap<K,V> three=new HashMap<K,V>();three.put((K)"5",(V)"five");map.addComposited(three);assertTrue(map.containsKey("5"));map.remove("5");assertFalse(three.containsKey("5"));}
public void testResolveCollision(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo(),new CompositeMap.MapMutator<K,V>(){private static final long serialVersionUID=1L;@Override public void resolveCollision(final CompositeMap<K,V> composite,final Map<K,V> existing,final Map<K,V> added,final Collection<K> intersect){pass=true;}@Override public V put(final CompositeMap<K,V> map,final Map<K,V>[]composited,final K key,final V value){throw new UnsupportedOperationException();}@Override public void putAll(final CompositeMap<K,V> map,final Map<K,V>[]composited,final Map<? extends K,? extends V> t){throw new UnsupportedOperationException();}});map.addComposited(buildOne());assertTrue(pass);}
@SuppressWarnings("unchecked")public void testPut(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo(),new CompositeMap.MapMutator<K,V>(){private static final long serialVersionUID=1L;@Override public void resolveCollision(final CompositeMap<K,V> composite,final Map<K,V> existing,final Map<K,V> added,final Collection<K> intersect){throw new UnsupportedOperationException();}@Override public V put(final CompositeMap<K,V> map,final Map<K,V>[]composited,final K key,final V value){pass=true;return (V)"foo";}@Override public void putAll(final CompositeMap<K,V> map,final Map<K,V>[]composited,final Map<? extends K,? extends V> t){throw new UnsupportedOperationException();}});map.put((K)"willy",(V)"wonka");assertTrue(pass);}
public void testPutAll(){final CompositeMap<K,V> map=new CompositeMap<K,V>(buildOne(),buildTwo(),new CompositeMap.MapMutator<K,V>(){private static final long serialVersionUID=1L;@Override public void resolveCollision(final CompositeMap<K,V> composite,final Map<K,V> existing,final Map<K,V> added,final Collection<K> intersect){throw new UnsupportedOperationException();}@Override public V put(final CompositeMap<K,V> map,final Map<K,V>[]composited,final K key,final V value){throw new UnsupportedOperationException();}@Override public void putAll(final CompositeMap<K,V> map,final Map<K,V>[]composited,final Map<? extends K,? extends V> t){pass=true;}});map.putAll(null);assertTrue(pass);}
/** * Verify that base set and subsets are not modifiable*/@SuppressWarnings("unchecked")public void testUnmodifiable(){setupSet();verifyUnmodifiable(set);verifyUnmodifiable(set.headSet((E)Integer.valueOf(1)));verifyUnmodifiable(set.tailSet((E)Integer.valueOf(1)));verifyUnmodifiable(set.subSet((E)Integer.valueOf(1),(E)Integer.valueOf(3)));}
public void testDecorateFactory(){final SortedSet<E> set=makeFullCollection();assertSame(set,UnmodifiableSortedSet.unmodifiableSortedSet(set));try {UnmodifiableSortedSet.unmodifiableSortedSet(null);fail();}catch(final NullPointerException ex){}}
public void testComparator(){setupSet();final Comparator<? super E> c=set.comparator();assertTrue("natural order,so comparator should be null",c == null);}
@SuppressWarnings("unchecked")public void test_get_nullMatchesIncorrectly(){final StaticBucketMap<K,V> map=new StaticBucketMap<K,V>(17);map.put(null,(V)"A");assertEquals("A",map.get(null));for (int i='A';i <= 'Z';i++){final String str=String.valueOf((char)i);assertEquals("String: " + str,null,map.get(str));}}
@SuppressWarnings("unchecked")public void test_containsKey_nullMatchesIncorrectly(){final StaticBucketMap<K,V> map=new StaticBucketMap<K,V>(17);map.put(null,(V)"A");assertEquals(true,map.containsKey(null));for (int i='A';i <= 'Z';i++){final String str=String.valueOf((char)i);assertEquals("String: " + str,false,map.containsKey(str));}}
@SuppressWarnings("unchecked")public void test_containsValue_nullMatchesIncorrectly(){final StaticBucketMap<K,V> map=new StaticBucketMap<K,V>(17);map.put((K)"A",null);assertEquals(true,map.containsValue(null));for (int i='A';i <= 'Z';i++){final String str=String.valueOf((char)i);assertEquals("String: " + str,false,map.containsValue(str));}}
public void testNullConstructor(){try {new NodeListIterator((Node)null);fail("NullPointerException expected!");}catch(final NullPointerException e){}}
/** * tests the convenience Constructor with parameter type org.w3c.Node*/public void testEmptyIteratorWithNodeConstructor(){createIteratorWithStandardConstr=false;testEmptyIterator();}
/** * tests the convenience Constructor with parameter type org.w3c.Node*/public void testFullIteratorWithNodeConstructor(){createIteratorWithStandardConstr=false;testFullIterator();}
public void testEnumeration(){Iterator<String> iterator=Arrays.asList("a","b","c").iterator();IteratorEnumeration<String> enumeration=new IteratorEnumeration<String>(iterator);assertEquals(iterator,enumeration.getIterator());assertTrue(enumeration.hasMoreElements());assertEquals("a",enumeration.nextElement());assertEquals("b",enumeration.nextElement());assertEquals("c",enumeration.nextElement());assertFalse(enumeration.hasMoreElements());try {enumeration.nextElement();fail("NoSuchElementException expected");}catch(NoSuchElementException e){}}
/** * Subclasses should override this method.*/@Override @SuppressWarnings("unchecked")public void testConstructors(){final Map.Entry<K,V> entry=new DefaultMapEntry<K,V>((K)key,(V)value);assertSame(key,entry.getKey());assertSame(value,entry.getValue());final KeyValue<K,V> pair=new DefaultKeyValue<K,V>((K)key,(V)value);assertSame(key,pair.getKey());assertSame(value,pair.getValue());final Map.Entry<K,V> entry2=new DefaultMapEntry<K,V>(entry);assertSame(key,entry2.getKey());assertSame(value,entry2.getValue());entry.setValue(null);assertSame(value,entry2.getValue());}
@Override @SuppressWarnings("unchecked")public void testSelfReferenceHandling(){final Map.Entry<K,V> entry=makeMapEntry();try {entry.setValue((V)entry);assertSame(entry,entry.getValue());}catch(final Exception e){fail("This Map.Entry implementation supports value self-reference.");}}
/** * Tests constructor exception.*/public void testConstructorEx()throws Exception {try {new LoopingIterator<Object>(null);fail();}catch(final NullPointerException ex){}}
/** * Tests whether an empty looping iterator works as designed.* @throws Exception  If something unexpected occurs.*/public void testLooping0()throws Exception {final List<Object> list=new ArrayList<Object>();final LoopingIterator<Object> loop=new LoopingIterator<Object>(list);assertTrue("hasNext should return false",!loop.hasNext());try {loop.next();fail("NoSuchElementException was not thrown during next()call.");}catch(final NoSuchElementException ex){}}
/** * Tests whether a populated looping iterator works as designed.* @throws Exception  If something unexpected occurs.*/public void testLooping1()throws Exception {final List<String> list=Arrays.asList("a");final LoopingIterator<String> loop=new LoopingIterator<String>(list);assertTrue("1st hasNext should return true",loop.hasNext());assertEquals("a",loop.next());assertTrue("2nd hasNext should return true",loop.hasNext());assertEquals("a",loop.next());assertTrue("3rd hasNext should return true",loop.hasNext());assertEquals("a",loop.next());}
/** * Tests whether a populated looping iterator works as designed.* @throws Exception  If something unexpected occurs.*/public void testLooping2()throws Exception {final List<String> list=Arrays.asList("a","b");final LoopingIterator<String> loop=new LoopingIterator<String>(list);assertTrue("1st hasNext should return true",loop.hasNext());assertEquals("a",loop.next());assertTrue("2nd hasNext should return true",loop.hasNext());assertEquals("b",loop.next());assertTrue("3rd hasNext should return true",loop.hasNext());assertEquals("a",loop.next());}
/** * Tests whether a populated looping iterator works as designed.* @throws Exception  If something unexpected occurs.*/public void testLooping3()throws Exception {final List<String> list=Arrays.asList("a","b","c");final LoopingIterator<String> loop=new LoopingIterator<String>(list);assertTrue("1st hasNext should return true",loop.hasNext());assertEquals("a",loop.next());assertTrue("2nd hasNext should return true",loop.hasNext());assertEquals("b",loop.next());assertTrue("3rd hasNext should return true",loop.hasNext());assertEquals("c",loop.next());assertTrue("4th hasNext should return true",loop.hasNext());assertEquals("a",loop.next());}
/** * Tests the remove()method on a LoopingIterator wrapped ArrayList.* @throws Exception  If something unexpected occurs.*/public void testRemoving1()throws Exception {final List<String> list=new ArrayList<String>(Arrays.asList("a","b","c"));final LoopingIterator<String> loop=new LoopingIterator<String>(list);assertEquals("list should have 3 elements.",3,list.size());assertTrue("1st hasNext should return true",loop.hasNext());assertEquals("a",loop.next());loop.remove();assertEquals("list should have 2 elements.",2,list.size());assertTrue("2nd hasNext should return true",loop.hasNext());assertEquals("b",loop.next());loop.remove();assertEquals("list should have 1 elements.",1,list.size());assertTrue("3rd hasNext should return true",loop.hasNext());assertEquals("c",loop.next());loop.remove();assertEquals("list should have 0 elements.",0,list.size());assertFalse("4th hasNext should return false",loop.hasNext());try {loop.next();fail("Expected NoSuchElementException to be thrown.");}catch(final NoSuchElementException ex){}}
/** * Tests the reset()method on a LoopingIterator wrapped ArrayList.* @throws Exception  If something unexpected occurs.*/public void testReset()throws Exception {final List<String> list=Arrays.asList("a","b","c");final LoopingIterator<String> loop=new LoopingIterator<String>(list);assertEquals("a",loop.next());assertEquals("b",loop.next());loop.reset();assertEquals("a",loop.next());loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("c",loop.next());loop.reset();assertEquals("a",loop.next());assertEquals("b",loop.next());assertEquals("c",loop.next());}
/** * Tests the size()method on a LoopingIterator wrapped ArrayList.* @throws Exception  If something unexpected occurs.*/public void testSize()throws Exception {final List<String> list=new ArrayList<String>(Arrays.asList("a","b","c"));final LoopingIterator<String> loop=new LoopingIterator<String>(list);assertEquals(3,loop.size());loop.next();loop.next();assertEquals(3,loop.size());loop.reset();assertEquals(3,loop.size());loop.next();loop.remove();assertEquals(2,loop.size());}
@SuppressWarnings("unchecked")public void testClone(){final HashedMap<K,V> map=new HashedMap<K,V>(10);map.put((K)"1",(V)"1");final HashedMap<K,V> cloned=map.clone();assertEquals(map.size(),cloned.size());assertSame(map.get("1"),cloned.get("1"));}
public void testInternalState(){final HashedMap<K,V> map=new HashedMap<K,V>(42,0.75f);assertEquals(0.75f,map.loadFactor,0.1f);assertEquals(0,map.size);assertEquals(64,map.data.length);assertEquals(48,map.threshold);assertEquals(0,map.modCount);}
/** * Test for <a href="https://issues.apache.org/jira/browse/COLLECTIONS-323">COLLECTIONS-323</a>.*/public void testInitialCapacityZero(){final HashedMap<String,String> map=new HashedMap<String,String>(0);assertEquals(1,map.data.length);}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final Collection<E> c=makeTestCollection();final Integer i=Integer.valueOf(3);try {c.add((E)i);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!c.contains(i));}
@SuppressWarnings("unchecked")public void testIllegalAddAll(){final Collection<E> c=makeTestCollection();final List<E> elements=new ArrayList<E>();elements.add((E)"one");elements.add((E)"two");elements.add((E)Integer.valueOf(3));elements.add((E)"four");try {c.addAll(elements);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!c.contains("one"));assertTrue("Collection shouldn't contain illegal element",!c.contains("two"));assertTrue("Collection shouldn't contain illegal element",!c.contains(Integer.valueOf(3)));assertTrue("Collection shouldn't contain illegal element",!c.contains("four"));}
@SuppressWarnings("unchecked")public void testNullHandling(){resetFull();assertEquals(null,map.get(null));assertEquals(false,map.containsKey(null));assertEquals(false,map.containsValue(null));assertEquals(null,map.remove(null));assertEquals(false,map.entrySet().contains(null));assertEquals(false,map.keySet().contains(null));assertEquals(false,map.values().contains(null));try {map.put(null,null);fail();}catch(final NullPointerException ex){}try {map.put((K)new Object(),null);fail();}catch(final NullPointerException ex){}try {map.put(null,(V)new Object());fail();}catch(final NullPointerException ex){}}
/** * Tests whether purge values setting works */public void testPurgeValues(){}
/** * Test the basic ListIterator functionality - going backwards using <code>previous()</code>.*/public void testListIterator(){final ListIterator<E> iter=makeObject();while (iter.hasNext()){iter.next();}for (int x=testArray.length - 1;x >= 0;x--){final Object testValue=testArray[x];final Object iterValue=iter.previous();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasPrevious());try {iter.previous();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
/** * Tests the  {@link java.util.ListIterator#set}operation.*/@SuppressWarnings("unchecked")public void testListIteratorSet(){final String[]testData=new String[]{"a","b","c"};final String[]result=new String[]{"0","1","2"};ListIterator<E> iter=makeArrayListIterator(testData);int x=0;while (iter.hasNext()){iter.next();iter.set((E)Integer.toString(x));x++;}assertTrue("The two arrays should have the same value,i.e. {0,1,2}",Arrays.equals(testData,result));iter=makeArrayListIterator(testArray);try {iter.set((E)"should fail");fail("ListIterator#set should fail if next()or previous()have not yet been called.");}catch(final IllegalStateException e){}catch(final Throwable t){fail(t.toString());}}
@Test public void testpredicatedSet(){final Predicate<Object> predicate=new Predicate<Object>(){@Override public boolean evaluate(final Object o){return o instanceof String;}};Set<Object> set=SetUtils.predicatedSet(new HashSet<Object>(),predicate);assertTrue("returned object should be a PredicatedSet",set instanceof PredicatedSet);try {SetUtils.predicatedSet(new HashSet<Object>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException ex){}try {SetUtils.predicatedSet(null,predicate);fail("Expecting NullPointerException for null set.");}catch(final NullPointerException ex){}}
@Test public void testEmptyIfNull(){assertTrue(SetUtils.emptyIfNull(null).isEmpty());final Set<Long> set=new HashSet<Long>();assertSame(set,SetUtils.emptyIfNull(set));}
@Test public void testEquals(){final Collection<String> data=Arrays.asList("a","b","c");final Set<String> a=new HashSet<String>(data);final Set<String> b=new HashSet<String>(data);assertEquals(true,a.equals(b));assertEquals(true,SetUtils.isEqualSet(a,b));a.clear();assertEquals(false,SetUtils.isEqualSet(a,b));assertEquals(false,SetUtils.isEqualSet(a,null));assertEquals(false,SetUtils.isEqualSet(null,b));assertEquals(true,SetUtils.isEqualSet(null,null));}
@Test public void testHashCode(){final Collection<String> data=Arrays.asList("a","b","c");final Set<String> a=new HashSet<String>(data);final Set<String> b=new HashSet<String>(data);assertEquals(true,a.hashCode()== b.hashCode());assertEquals(true,a.hashCode()== SetUtils.hashCodeForSet(a));assertEquals(true,b.hashCode()== SetUtils.hashCodeForSet(b));assertEquals(true,SetUtils.hashCodeForSet(a)== SetUtils.hashCodeForSet(b));a.clear();assertEquals(false,SetUtils.hashCodeForSet(a)== SetUtils.hashCodeForSet(b));assertEquals(0,SetUtils.hashCodeForSet(null));}
@Test public void testNewIdentityHashSet(){Set<String> set=SetUtils.newIdentityHashSet();String a=new String("a");set.add(a);set.add(new String("b"));set.add(a);assertEquals(2,set.size());set.add(new String("a"));assertEquals(3,set.size());set.remove(a);assertEquals(2,set.size());}
@Test public void union(){final SetView<Integer> set=SetUtils.union(setA,setB);assertEquals(7,set.size());assertTrue(set.containsAll(setA));assertTrue(set.containsAll(setB));final Set<Integer> set2=SetUtils.union(setA,SetUtils.<Integer>emptySet());assertEquals(setA,set2);try {SetUtils.union(setA,null);fail("Expecting NullPointerException");}catch(NullPointerException npe){}try {SetUtils.union(null,setA);fail("Expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void difference(){final SetView<Integer> set=SetUtils.difference(setA,setB);assertEquals(2,set.size());assertTrue(set.contains(1));assertTrue(set.contains(2));for(Integer i : setB){assertFalse(set.contains(i));}final Set<Integer> set2=SetUtils.difference(setA,SetUtils.<Integer>emptySet());assertEquals(setA,set2);try {SetUtils.difference(setA,null);fail("Expecting NullPointerException");}catch(NullPointerException npe){}try {SetUtils.difference(null,setA);fail("Expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void intersection(){final SetView<Integer> set=SetUtils.intersection(setA,setB);assertEquals(3,set.size());assertTrue(set.contains(3));assertTrue(set.contains(4));assertTrue(set.contains(5));assertFalse(set.contains(1));assertFalse(set.contains(2));assertFalse(set.contains(6));assertFalse(set.contains(7));final Set<Integer> set2=SetUtils.intersection(setA,SetUtils.<Integer>emptySet());assertEquals(SetUtils.<Integer>emptySet(),set2);try {SetUtils.intersection(setA,null);fail("Expecting NullPointerException");}catch(NullPointerException npe){}try {SetUtils.intersection(null,setA);fail("Expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void disjunction(){final SetView<Integer> set=SetUtils.disjunction(setA,setB);assertEquals(4,set.size());assertTrue(set.contains(1));assertTrue(set.contains(2));assertTrue(set.contains(6));assertTrue(set.contains(7));assertFalse(set.contains(3));assertFalse(set.contains(4));assertFalse(set.contains(5));final Set<Integer> set2=SetUtils.disjunction(setA,SetUtils.<Integer>emptySet());assertEquals(setA,set2);try {SetUtils.disjunction(setA,null);fail("Expecting NullPointerException");}catch(NullPointerException npe){}try {SetUtils.disjunction(null,setA);fail("Expecting NullPointerException");}catch(NullPointerException npe){}}
public void testIterator(){final Iterator<E> iter=makeObject();for(final int element : testArray){final Integer testValue=Integer.valueOf(element);final Number iterValue=(Number)iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testIndexedArray(){Iterator<E> iter=makeArrayIterator(testArray,2);int count=0;while (iter.hasNext()){++count;iter.next();}assertEquals("the count should be right using ArrayIterator(Object,2)",count,testArray.length - 2);iter=makeArrayIterator(testArray,1,testArray.length - 1);count=0;while (iter.hasNext()){++count;iter.next();}assertEquals("the count should be right using ArrayIterator(Object,1," + (testArray.length - 1)+ ")",count,testArray.length - 2);try {iter=makeArrayIterator(testArray,-1);fail("new ArrayIterator(Object,-1)should throw an ArrayIndexOutOfBoundsException");}catch(final ArrayIndexOutOfBoundsException aioobe){}try {iter=makeArrayIterator(testArray,testArray.length + 1);fail("new ArrayIterator(Object,length+1)should throw an ArrayIndexOutOfBoundsException");}catch(final ArrayIndexOutOfBoundsException aioobe){}try {iter=makeArrayIterator(testArray,0,-1);fail("new ArrayIterator(Object,0,-1)should throw an ArrayIndexOutOfBoundsException");}catch(final ArrayIndexOutOfBoundsException aioobe){}try {iter=makeArrayIterator(testArray,0,testArray.length + 1);fail("new ArrayIterator(Object,0,length+1)should throw an ArrayIndexOutOfBoundsException");}catch(final ArrayIndexOutOfBoundsException aioobe){}try {iter=makeArrayIterator(testArray,1,1);}catch(final IllegalArgumentException iae){fail("new ArrayIterator(Object,1,1)should NOT throw an IllegalArgumentException");}try {iter=makeArrayIterator(testArray,testArray.length - 1,testArray.length - 2);fail("new ArrayIterator(Object,length-2,length-1)should throw an IllegalArgumentException");}catch(final IllegalArgumentException iae){}}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final SortedBag<E> queue=makeFullCollection();assertSame(queue,UnmodifiableSortedBag.unmodifiableSortedBag(queue));try {UnmodifiableSortedBag.unmodifiableSortedBag(null);fail();}catch(final NullPointerException ex){}}
@Test public void testSynchronizedBag(){Bag<Object> bag=BagUtils.synchronizedBag(new HashBag<Object>());assertTrue("Returned object should be a SynchronizedBag.",bag instanceof SynchronizedBag);try {BagUtils.synchronizedBag(null);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}}
@Test public void testUnmodifiableBag(){Bag<Object> bag=BagUtils.unmodifiableBag(new HashBag<Object>());assertTrue("Returned object should be an UnmodifiableBag.",bag instanceof UnmodifiableBag);try {BagUtils.unmodifiableBag(null);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}assertSame("UnmodifiableBag shall not be decorated",bag,BagUtils.unmodifiableBag(bag));}
@Test public void testPredicatedBag(){Bag<Object> bag=BagUtils.predicatedBag(new HashBag<Object>(),truePredicate);assertTrue("Returned object should be a PredicatedBag.",bag instanceof PredicatedBag);try {BagUtils.predicatedBag(null,truePredicate);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}try {BagUtils.predicatedBag(new HashBag<Object>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException ex){}}
@Test public void testTransformedBag(){Bag<Object> bag=BagUtils.transformingBag(new HashBag<Object>(),nopTransformer);assertTrue("Returned object should be an TransformedBag.",bag instanceof TransformedBag);try {BagUtils.transformingBag(null,nopTransformer);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}try {BagUtils.transformingBag(new HashBag<Object>(),null);fail("Expecting NullPointerException for null transformer.");}catch(final NullPointerException ex){}}
@Test public void testSynchronizedSortedBag(){Bag<Object> bag=BagUtils.synchronizedSortedBag(new TreeBag<Object>());assertTrue("Returned object should be a SynchronizedSortedBag.",bag instanceof SynchronizedSortedBag);try {BagUtils.synchronizedSortedBag(null);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}}
@Test public void testUnmodifiableSortedBag(){SortedBag<Object> bag=BagUtils.unmodifiableSortedBag(new TreeBag<Object>());assertTrue("Returned object should be an UnmodifiableSortedBag.",bag instanceof UnmodifiableSortedBag);try {BagUtils.unmodifiableSortedBag(null);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}assertSame("UnmodifiableSortedBag shall not be decorated",bag,BagUtils.unmodifiableSortedBag(bag));}
@Test public void testPredicatedSortedBag(){Bag<Object> bag=BagUtils.predicatedSortedBag(new TreeBag<Object>(),truePredicate);assertTrue("Returned object should be a PredicatedSortedBag.",bag instanceof PredicatedSortedBag);try {BagUtils.predicatedSortedBag(null,truePredicate);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}try {BagUtils.predicatedSortedBag(new TreeBag<Object>(),null);fail("Expecting NullPointerException for null predicate.");}catch(final NullPointerException ex){}}
@Test public void testTransformedSortedBag(){Bag<Object> bag=BagUtils.transformingSortedBag(new TreeBag<Object>(),nopTransformer);assertTrue("Returned object should be an TransformedSortedBag",bag instanceof TransformedSortedBag);try {BagUtils.transformingSortedBag(null,nopTransformer);fail("Expecting NullPointerException for null bag.");}catch(final NullPointerException ex){}try {BagUtils.transformingSortedBag(new TreeBag<Object>(),null);fail("Expecting NullPointerException for null transformer.");}catch(final NullPointerException ex){}}
@Test public void testReadableMap(){final IterableMap<String,Integer> map=SplitMapUtils.readableMap(transformedMap);for (int i=0;i < 10;i++){assertFalse(map.containsValue(String.valueOf(i)));assertEquals(i,map.get(String.valueOf(i)).intValue());}final MapIterator<String,Integer> it=map.mapIterator();while (it.hasNext()){final String k=it.next();assertEquals(k,it.getKey());assertEquals(Integer.valueOf(k),it.getValue());}assertTrue(map instanceof Unmodifiable);int sz=map.size();attemptPutOperation(new Runnable(){@Override public void run(){map.clear();}});assertEquals(sz,map.size());attemptPutOperation(new Runnable(){@Override public void run(){map.put("foo",100);}});final HashMap<String,Integer> m=new HashMap<String,Integer>();m.put("foo",100);m.put("bar",200);m.put("baz",300);attemptPutOperation(new Runnable(){@Override public void run(){map.putAll(m);}});final IterableMap<String,Integer> other=SplitMapUtils.readableMap(transformedMap);assertEquals(other,map);assertEquals(other.hashCode(),map.hashCode());for (int i=0;i < 10;i++){assertEquals(i,map.remove(String.valueOf(i)).intValue());assertEquals(--sz,map.size());}assertTrue(map.isEmpty());assertSame(map,SplitMapUtils.readableMap(map));}
@Test public void testAlreadyReadableMap(){final HashedMap<String,Integer> hashedMap=new HashedMap<String,Integer>();assertSame(hashedMap,SplitMapUtils.readableMap(hashedMap));}
@Test @SuppressWarnings("unchecked")public void testWritableMap(){final Map<String,String> map=SplitMapUtils.writableMap(transformedMap);attemptGetOperation(new Runnable(){@Override public void run(){map.get(null);}});attemptGetOperation(new Runnable(){@Override public void run(){map.entrySet();}});attemptGetOperation(new Runnable(){@Override public void run(){map.keySet();}});attemptGetOperation(new Runnable(){@Override public void run(){map.values();}});attemptGetOperation(new Runnable(){@Override public void run(){map.size();}});attemptGetOperation(new Runnable(){@Override public void run(){map.isEmpty();}});attemptGetOperation(new Runnable(){@Override public void run(){map.containsKey(null);}});attemptGetOperation(new Runnable(){@Override public void run(){map.containsValue(null);}});attemptGetOperation(new Runnable(){@Override public void run(){map.remove(null);}});final Map<String,String> other=SplitMapUtils.writableMap(transformedMap);assertEquals(other,map);assertEquals(other.hashCode(),map.hashCode());int sz=backingMap.size();assertFalse(backingMap.containsKey("foo"));map.put("new","66");assertEquals(++sz,backingMap.size());final Map<String,String> more=new HashMap<String,String>();more.put("foo","77");more.put("bar","88");more.put("baz","99");map.putAll(more);assertEquals(sz + more.size(),backingMap.size());map.clear();assertTrue(backingMap.isEmpty());assertSame(map,SplitMapUtils.writableMap((Put<String,String>)map));}
@Test public void testAlreadyWritableMap(){final HashedMap<String,String> hashedMap=new HashedMap<String,String>();assertSame(hashedMap,SplitMapUtils.writableMap(hashedMap));}
/** * Verifies that providing an empty predicate array evaluates to true.*/@SuppressWarnings({"unchecked"})@Test public void emptyArrayToGetInstance(){assertTrue("empty array not true",getPredicateInstance(new Predicate[]{}).evaluate(null));}
/** * Verifies that providing an empty predicate collection evaluates to true.*/@Test public void emptyCollectionToGetInstance(){final Predicate<Integer> allPredicate=getPredicateInstance(Collections.<Predicate<Integer>>emptyList());assertTrue("empty collection not true",allPredicate.evaluate(getTestValue()));}
/** * Tests whether a single true predicate evaluates to true.*/@SuppressWarnings("unchecked")@Test public void oneTruePredicate(){final Predicate<Integer> predicate=createMockPredicate(true);assertTrue("single true predicate evaluated to false",allPredicate(predicate).evaluate(getTestValue()));}
/** * Tests whether a single false predicate evaluates to true.*/@SuppressWarnings("unchecked")@Test public void oneFalsePredicate(){final Predicate<Integer> predicate=createMockPredicate(false);assertFalse("single false predicate evaluated to true",allPredicate(predicate).evaluate(getTestValue()));}
/** * Tests whether multiple true predicates evaluates to true.*/@Test public void allTrue(){assertTrue("multiple true predicates evaluated to false",getPredicateInstance(true,true).evaluate(getTestValue()));assertTrue("multiple true predicates evaluated to false",getPredicateInstance(true,true,true).evaluate(getTestValue()));}
/** * Tests whether combining some true and one false evalutes to false.  Also verifies that only the first false predicate is actually evaluated*/@Test public void trueAndFalseCombined(){assertFalse("false predicate evaluated to true",getPredicateInstance(false,null).evaluate(getTestValue()));assertFalse("false predicate evaluated to true",getPredicateInstance(false,null,null).evaluate(getTestValue()));assertFalse("false predicate evaluated to true",getPredicateInstance(true,false,null).evaluate(getTestValue()));assertFalse("false predicate evaluated to true",getPredicateInstance(true,true,false).evaluate(getTestValue()));assertFalse("false predicate evaluated to true",getPredicateInstance(true,true,false,null).evaluate(getTestValue()));}
public void testIterator(){final Iterator<String> iter=makeObject();for(final String testValue : testArray){final Object iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testRemoveFromFilteredIterator(){final Predicate<Integer> myPredicate=new Predicate<Integer>(){@Override public boolean evaluate(final Integer i){return i.compareTo(Integer.valueOf(4))< 0;}};final List<Integer> list1=new ArrayList<Integer>();final List<Integer> list2=new ArrayList<Integer>();list1.add(Integer.valueOf(1));list1.add(Integer.valueOf(2));list2.add(Integer.valueOf(3));list2.add(Integer.valueOf(4));final Iterator<Integer> it1=IteratorUtils.filteredIterator(list1.iterator(),myPredicate);final Iterator<Integer> it2=IteratorUtils.filteredIterator(list2.iterator(),myPredicate);final Iterator<Integer> it=IteratorUtils.chainedIterator(it1,it2);while (it.hasNext()){it.next();it.remove();}assertEquals(0,list1.size());assertEquals(1,list2.size());}
@Override public void testRemove(){final Iterator<String> iter=makeObject();try {iter.remove();fail("Calling remove before the first call to next()should throw an exception");}catch(final IllegalStateException e){}for(final String testValue : testArray){final String iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);if (!iterValue.equals("Four")){iter.remove();}}assertTrue("List is empty",list1.size()== 0);assertTrue("List is empty",list2.size()== 1);assertTrue("List is empty",list3.size()== 0);}
public void testFirstIteratorIsEmptyBug(){final List<String> empty=new ArrayList<String>();final List<String> notEmpty=new ArrayList<String>();notEmpty.add("A");notEmpty.add("B");notEmpty.add("C");final LazyIteratorChain<String> chain=new LazyIteratorChain<String>(){@Override protected Iterator<String> nextIterator(final int count){switch (count){case 1:        return empty.iterator();case 2:      return notEmpty.iterator();}return null;}};assertTrue("should have next",chain.hasNext());assertEquals("A",chain.next());assertTrue("should have next",chain.hasNext());assertEquals("B",chain.next());assertTrue("should have next",chain.hasNext());assertEquals("C",chain.next());assertTrue("should not have next",!chain.hasNext());}
public void testEmptyChain(){final LazyIteratorChain<String> chain=makeEmptyIterator();assertEquals(false,chain.hasNext());try {chain.next();fail();}catch(final NoSuchElementException ex){}try {chain.remove();fail();}catch(final IllegalStateException ex){}}
@Test public void testConstructors(){allTests(false,new BooleanComparator());allTests(false,new BooleanComparator(false));allTests(true,new BooleanComparator(true));}
@Test public void testStaticFactoryMethods(){allTests(false,BooleanComparator.getFalseFirstComparator());allTests(false,BooleanComparator.booleanComparator(false));allTests(true,BooleanComparator.getTrueFirstComparator());allTests(true,BooleanComparator.booleanComparator(true));}
@Test public void testEqualsCompatibleInstance(){assertEquals(new BooleanComparator(),new BooleanComparator(false));assertEquals(new BooleanComparator(false),new BooleanComparator(false));assertEquals(new BooleanComparator(false),BooleanComparator.getFalseFirstComparator());assertSame(BooleanComparator.getFalseFirstComparator(),BooleanComparator.booleanComparator(false));assertEquals(new BooleanComparator(true),new BooleanComparator(true));assertEquals(new BooleanComparator(true),BooleanComparator.getTrueFirstComparator());assertSame(BooleanComparator.getTrueFirstComparator(),BooleanComparator.booleanComparator(true));assertTrue(!new BooleanComparator().equals(new BooleanComparator(true)));assertTrue(!new BooleanComparator(true).equals(new BooleanComparator(false)));}
public void testGetByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.get(0);}catch(final IndexOutOfBoundsException ex){}try {lom.get(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.get(-1);}catch(final IndexOutOfBoundsException ex){}try {lom.get(lom.size());}catch(final IndexOutOfBoundsException ex){}int i=0;for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();i++){assertSame(it.next(),lom.get(i));}}
public void testGetValueByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.getValue(0);}catch(final IndexOutOfBoundsException ex){}try {lom.getValue(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.getValue(-1);}catch(final IndexOutOfBoundsException ex){}try {lom.getValue(lom.size());}catch(final IndexOutOfBoundsException ex){}int i=0;for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();i++){it.next();assertSame(it.getValue(),lom.getValue(i));}}
public void testIndexOf(){resetEmpty();ListOrderedMap<K,V> lom=getMap();assertEquals(-1,lom.indexOf(getOtherKeys()));resetFull();lom=getMap();final List<K> list=new ArrayList<K>();for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();){list.add(it.next());}for (int i=0;i < list.size();i++){assertEquals(i,lom.indexOf(list.get(i)));}}
@SuppressWarnings("unchecked")public void testSetValueByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.setValue(0,(V)"");}catch(final IndexOutOfBoundsException ex){}try {lom.setValue(-1,(V)"");}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.setValue(-1,(V)"");}catch(final IndexOutOfBoundsException ex){}try {lom.setValue(lom.size(),(V)"");}catch(final IndexOutOfBoundsException ex){}for (int i=0;i < lom.size();i++){final V value=lom.getValue(i);final Object input=Integer.valueOf(i);assertEquals(value,lom.setValue(i,(V)input));assertEquals(input,lom.getValue(i));}}
public void testRemoveByIndex(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.remove(0);}catch(final IndexOutOfBoundsException ex){}try {lom.remove(-1);}catch(final IndexOutOfBoundsException ex){}resetFull();lom=getMap();try {lom.remove(-1);}catch(final IndexOutOfBoundsException ex){}try {lom.remove(lom.size());}catch(final IndexOutOfBoundsException ex){}final List<K> list=new ArrayList<K>();for (final MapIterator<K,V> it=lom.mapIterator();it.hasNext();){list.add(it.next());}for (int i=0;i < list.size();i++){final Object key=list.get(i);final Object value=lom.get(key);assertEquals(value,lom.remove(i));list.remove(i);assertEquals(false,lom.containsKey(key));}}
@SuppressWarnings("unchecked")public void testPut_intObjectObject(){resetEmpty();ListOrderedMap<K,V> lom=getMap();try {lom.put(1,(K)"testInsert1",(V)"testInsert1v");fail("should not be able to insert at pos 1 in empty Map");}catch(final IndexOutOfBoundsException ex){}try {lom.put(-1,(K)"testInsert-1",(V)"testInsert-1v");fail("should not be able to insert at pos -1 in empty Map");}catch(final IndexOutOfBoundsException ex){}lom.put(0,(K)"testInsert1",(V)"testInsert1v");assertEquals("testInsert1v",lom.getValue(0));lom.put((K)"testInsertPut",(V)"testInsertPutv");assertEquals("testInsert1v",lom.getValue(0));assertEquals("testInsertPutv",lom.getValue(1));lom.put(0,(K)"testInsert0",(V)"testInsert0v");assertEquals("testInsert0v",lom.getValue(0));assertEquals("testInsert1v",lom.getValue(1));assertEquals("testInsertPutv",lom.getValue(2));lom.put(3,(K)"testInsert3",(V)"testInsert3v");assertEquals("testInsert0v",lom.getValue(0));assertEquals("testInsert1v",lom.getValue(1));assertEquals("testInsertPutv",lom.getValue(2));assertEquals("testInsert3v",lom.getValue(3));resetFull();lom=getMap();final ListOrderedMap<K,V> lom2=new ListOrderedMap<K,V>();lom2.putAll(lom);lom2.put(0,(K)"testInsert0",(V)"testInsert0v");assertEquals("testInsert0v",lom2.getValue(0));for (int i=0;i < lom.size();i++){assertEquals(lom2.getValue(i + 1),lom.getValue(i));}final Integer i1=Integer.valueOf(1);final Integer i1b=Integer.valueOf(1);final Integer i2=Integer.valueOf(2);final Integer i3=Integer.valueOf(3);resetEmpty();lom=getMap();lom.put((K)i1,(V)"1");lom.put((K)i2,(V)"2");lom.put((K)i3,(V)"3");lom.put(0,(K)i1,(V)"One");assertEquals(3,lom.size());assertEquals(3,lom.map.size());assertEquals(3,lom.keyList().size());assertEquals("One",lom.getValue(0));assertSame(i1,lom.get(0));resetEmpty();lom=getMap();lom.put((K)i1,(V)"1");lom.put((K)i2,(V)"2");lom.put((K)i3,(V)"3");lom.put(0,(K)i1b,(V)"One");assertEquals(3,lom.size());assertEquals(3,lom.map.size());assertEquals(3,lom.keyList().size());assertEquals("One",lom.getValue(0));assertEquals("2",lom.getValue(1));assertEquals("3",lom.getValue(2));assertSame(i1b,lom.get(0));resetEmpty();lom=getMap();lom.put((K)i1,(V)"1");lom.put((K)i2,(V)"2");lom.put((K)i3,(V)"3");lom.put(1,(K)i1b,(V)"One");assertEquals(3,lom.size());assertEquals(3,lom.map.size());assertEquals(3,lom.keyList().size());assertEquals("One",lom.getValue(0));assertEquals("2",lom.getValue(1));assertEquals("3",lom.getValue(2));resetEmpty();lom=getMap();lom.put((K)i1,(V)"1");lom.put((K)i2,(V)"2");lom.put((K)i3,(V)"3");lom.put(2,(K)i1b,(V)"One");assertEquals(3,lom.size());assertEquals(3,lom.map.size());assertEquals(3,lom.keyList().size());assertEquals("2",lom.getValue(0));assertEquals("One",lom.getValue(1));assertEquals("3",lom.getValue(2));resetEmpty();lom=getMap();lom.put((K)i1,(V)"1");lom.put((K)i2,(V)"2");lom.put((K)i3,(V)"3");lom.put(3,(K)i1b,(V)"One");assertEquals(3,lom.size());assertEquals(3,lom.map.size());assertEquals(3,lom.keyList().size());assertEquals("2",lom.getValue(0));assertEquals("3",lom.getValue(1));assertEquals("One",lom.getValue(2));}
public void testPutAllWithIndex(){resetEmpty();@SuppressWarnings("unchecked")final ListOrderedMap<String,String> lom=(ListOrderedMap<String,String>)map;lom.put("testInsert0","testInsert0v");lom.put("testInsert1","testInsert1v");lom.put("testInsert2","testInsert2v");assertEquals("testInsert0v",lom.getValue(0));assertEquals("testInsert1v",lom.getValue(1));assertEquals("testInsert2v",lom.getValue(2));final Map<String,String> values=new ListOrderedMap<String,String>();values.put("NewInsert0","NewInsert0v");values.put("NewInsert1","NewInsert1v");lom.putAll(1,values);assertEquals("testInsert0v",lom.getValue(0));assertEquals("NewInsert0v",lom.getValue(1));assertEquals("NewInsert1v",lom.getValue(2));assertEquals("testInsert1v",lom.getValue(3));assertEquals("testInsert2v",lom.getValue(4));}
@SuppressWarnings("unchecked")public void testPutAllWithIndexBug441(){resetEmpty();final ListOrderedMap<K,V> lom=getMap();final int size=5;for (int i=0;i < size;i++){lom.put((K)Integer.valueOf(i),(V)Boolean.TRUE);}final Map<K,V> map=new TreeMap<K,V>();for (int i=0;i < size;i++){map.put((K)Integer.valueOf(i),(V)Boolean.FALSE);}lom.putAll(3,map);final List<K> orderedList=lom.asList();for (int i=0;i < size;i++){assertEquals(Integer.valueOf(i),orderedList.get(i));}}
public void testValueList_getByIndex(){resetFull();final ListOrderedMap<K,V> lom=getMap();for (int i=0;i < lom.size();i++){final V expected=lom.getValue(i);assertEquals(expected,lom.valueList().get(i));}}
@SuppressWarnings("unchecked")public void testValueList_setByIndex(){resetFull();final ListOrderedMap<K,V> lom=getMap();for (int i=0;i < lom.size();i++){final Object input=Integer.valueOf(i);final V expected=lom.getValue(i);assertEquals(expected,lom.valueList().set(i,(V)input));assertEquals(input,lom.getValue(i));assertEquals(input,lom.valueList().get(i));}}
public void testValueList_removeByIndex(){resetFull();final ListOrderedMap<K,V> lom=getMap();while (lom.size()> 1){final V expected=lom.getValue(1);assertEquals(expected,lom.valueList().remove(1));}}
public void testCOLLECTIONS_474_nullValues(){Object key1=new Object();Object key2=new Object();HashMap<Object,Object> hmap=new HashMap<Object,Object>();hmap.put(key1,null);hmap.put(key2,null);assertEquals("Should have two elements",2,hmap.size());ListOrderedMap<Object,Object> listMap=new ListOrderedMap<Object,Object>();listMap.put(key1,null);listMap.put(key2,null);assertEquals("Should have two elements",2,listMap.size());listMap.putAll(2,hmap);}
public void testCOLLECTIONS_474_nonNullValues(){Object key1=new Object();Object key2=new Object();HashMap<Object,Object> hmap=new HashMap<Object,Object>();hmap.put(key1,"1");hmap.put(key2,"2");assertEquals("Should have two elements",2,hmap.size());ListOrderedMap<Object,Object> listMap=new ListOrderedMap<Object,Object>();listMap.put(key1,"3");listMap.put(key2,"4");assertEquals("Should have two elements",2,listMap.size());listMap.putAll(2,hmap);}
@SuppressWarnings("unchecked")public void testAccessorsAndMutators(){final DefaultKeyValue<K,V> kv=makeDefaultKeyValue();kv.setKey((K)key);assertTrue(kv.getKey()== key);kv.setValue((V)value);assertTrue(kv.getValue()== value);kv.setKey(null);assertTrue(kv.getKey()== null);kv.setValue(null);assertTrue(kv.getValue()== null);}
@SuppressWarnings("unchecked")public void testSelfReferenceHandling(){final DefaultKeyValue<K,V> kv=makeDefaultKeyValue();try {kv.setKey((K)kv);fail("Should throw an IllegalArgumentException");}catch(final IllegalArgumentException iae){assertTrue(kv.getKey()== null && kv.getValue()== null);}try {kv.setValue((V)kv);fail("Should throw an IllegalArgumentException");}catch(final IllegalArgumentException iae){assertTrue(kv.getKey()== null && kv.getValue()== null);}}
/** * Subclasses should override this method to test their own constructors.*/@SuppressWarnings("unchecked")public void testConstructors(){DefaultKeyValue<K,V> kv=new DefaultKeyValue<K,V>();assertTrue(kv.getKey()== null && kv.getValue()== null);kv=new DefaultKeyValue<K,V>((K)key,(V)value);assertTrue(kv.getKey()== key && kv.getValue()== value);final DefaultKeyValue<K,V> kv2=new DefaultKeyValue<K,V>(kv);assertTrue(kv2.getKey()== key && kv2.getValue()== value);kv.setKey(null);kv.setValue(null);assertTrue(kv2.getKey()== key && kv2.getValue()== value);final Map<K,V> map=new HashMap<K,V>();map.put((K)key,(V)value);final Map.Entry<K,V> entry=map.entrySet().iterator().next();kv=new DefaultKeyValue<K,V>(entry);assertTrue(kv.getKey()== key && kv.getValue()== value);entry.setValue(null);assertTrue(kv.getValue()== value);}
@SuppressWarnings("unchecked")public void testEqualsAndHashCode(){DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);DefaultKeyValue<K,V> kv2=makeDefaultKeyValue((K)key,(V)value);assertTrue(kv.equals(kv));assertTrue(kv.equals(kv2));assertTrue(kv.hashCode()== kv2.hashCode());kv=makeDefaultKeyValue(null,null);kv2=makeDefaultKeyValue(null,null);assertTrue(kv.equals(kv));assertTrue(kv.equals(kv2));assertTrue(kv.hashCode()== kv2.hashCode());}
@SuppressWarnings("unchecked")public void testToString(){DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);assertTrue(kv.toString().equals(kv.getKey()+ "=" + kv.getValue()));kv=makeDefaultKeyValue(null,null);assertTrue(kv.toString().equals(kv.getKey()+ "=" + kv.getValue()));}
@SuppressWarnings("unchecked")public void testToMapEntry(){final DefaultKeyValue<K,V> kv=makeDefaultKeyValue((K)key,(V)value);final Map<K,V> map=new HashMap<K,V>();map.put(kv.getKey(),kv.getValue());final Map.Entry<K,V> entry=map.entrySet().iterator().next();assertTrue(entry.equals(kv.toMapEntry()));assertTrue(entry.hashCode()== kv.hashCode());}
public void testIterator(){final Iterator<E> iter=makeObject();for(final String testValue : testArray){final E iterValue=iter.next();assertEquals("Iteration value is correct",testValue,iterValue);}assertTrue("Iterator should now be empty",!iter.hasNext());try {iter.next();}catch(final Exception e){assertTrue("NoSuchElementException must be thrown",e.getClass().equals(new NoSuchElementException().getClass()));}}
public void testNullArray(){try {new ArrayIterator<Object>(null);fail("Constructor should throw a NullPointerException when constructed with a null array");}catch(final NullPointerException e){}}
public void testReset(){final ArrayIterator<E> it=makeObject();it.next();it.reset();assertEquals("One",it.next());}
public void testTransformedQueue(){final Queue<Object> queue=TransformedQueue.transformingQueue(new LinkedList<Object>(),TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,queue.size());final Object[]elements=new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < elements.length;i++){queue.add(elements[i]);assertEquals(i + 1,queue.size());assertEquals(true,queue.contains(Integer.valueOf((String)elements[i])));assertEquals(false,queue.contains(elements[i]));}assertEquals(false,queue.remove(elements[0]));assertEquals(true,queue.remove(Integer.valueOf((String)elements[0])));}
@SuppressWarnings({"rawtypes","unchecked"})public void testTransformedQueue_decorateTransform(){final Queue originalQueue=new LinkedList();final Object[]elements=new Object[]{"1","3","5","7","2","4","6"};Collections.addAll(originalQueue,elements);final Queue<?> queue=TransformedQueue.transformedQueue(originalQueue,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(elements.length,queue.size());for(final Object el : elements){assertEquals(true,queue.contains(Integer.valueOf((String)el)));assertEquals(false,queue.contains(el));}assertEquals(false,queue.remove(elements[0]));assertEquals(true,queue.remove(Integer.valueOf((String)elements[0])));}
@Override @SuppressWarnings("unchecked")public void testMapGet(){final Map<K,V> map=new DefaultedMap<K,V>((V)"NULL");assertEquals(0,map.size());assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));map.put((K)"Key",(V)"Value");assertEquals(1,map.size());assertEquals(true,map.containsKey("Key"));assertEquals("Value",map.get("Key"));assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));}
@SuppressWarnings("unchecked")public void testMapGet2(){final HashMap<K,V> base=new HashMap<K,V>();final Map<K,V> map=DefaultedMap.defaultedMap(base,(V)"NULL");assertEquals(0,map.size());assertEquals(0,base.size());assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));map.put((K)"Key",(V)"Value");assertEquals(1,map.size());assertEquals(1,base.size());assertEquals(true,map.containsKey("Key"));assertEquals("Value",map.get("Key"));assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));}
@SuppressWarnings("unchecked")public void testMapGet3(){final HashMap<K,V> base=new HashMap<K,V>();final Map<K,V> map=DefaultedMap.defaultedMap(base,ConstantFactory.constantFactory((V)"NULL"));assertEquals(0,map.size());assertEquals(0,base.size());assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));map.put((K)"Key",(V)"Value");assertEquals(1,map.size());assertEquals(1,base.size());assertEquals(true,map.containsKey("Key"));assertEquals("Value",map.get("Key"));assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));}
@SuppressWarnings("unchecked")public void testMapGet4(){final HashMap<K,V> base=new HashMap<K,V>();final Map<K,V> map=DefaultedMap.defaultedMap(base,new Transformer<K,V>(){@Override public V transform(final K input){if (input instanceof String){return (V)"NULL";}return (V)"NULL_OBJECT";}});assertEquals(0,map.size());assertEquals(0,base.size());assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));assertEquals("NULL_OBJECT",map.get(Integer.valueOf(0)));map.put((K)"Key",(V)"Value");assertEquals(1,map.size());assertEquals(1,base.size());assertEquals(true,map.containsKey("Key"));assertEquals("Value",map.get("Key"));assertEquals(false,map.containsKey("NotInMap"));assertEquals("NULL",map.get("NotInMap"));assertEquals("NULL_OBJECT",map.get(Integer.valueOf(0)));}
@SuppressWarnings("unchecked")public void testTransformedBag(){final SortedBag<T> bag=TransformedSortedBag.transformingSortedBag(new TreeBag<T>(),(Transformer<T,T>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,bag.size());final Object[]els=new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < els.length;i++){bag.add((T)els[i]);assertEquals(i + 1,bag.size());assertEquals(true,bag.contains(Integer.valueOf((String)els[i])));}assertEquals(true,bag.remove(Integer.valueOf((String)els[0])));}
public void testTransformedBag_decorateTransform(){final Bag<Object> originalBag=new TreeBag<Object>();final Object[]els=new Object[]{"1","3","5","7","2","4","6"};for(final Object el : els){originalBag.add(el);}final Bag<?> bag=TransformedBag.transformedBag(originalBag,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(els.length,bag.size());for(final Object el : els){assertEquals(true,bag.contains(Integer.valueOf((String)el)));}assertEquals(true,bag.remove(Integer.valueOf((String)els[0])));}
@SuppressWarnings("unchecked")public void testTransformedSet(){final NavigableSet<E> set=TransformedNavigableSet.transformingNavigableSet(new TreeSet<E>(),(Transformer<E,E>)TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(0,set.size());final E[]els=(E[])new Object[]{"1","3","5","7","2","4","6"};for (int i=0;i < els.length;i++){set.add(els[i]);assertEquals(i + 1,set.size());assertEquals(true,set.contains(Integer.valueOf((String)els[i])));}assertEquals(true,set.remove(Integer.valueOf((String)els[0])));}
public void testTransformedSet_decorateTransform(){final Set<Object> originalSet=new TreeSet<Object>();final Object[]els=new Object[]{"1","3","5","7","2","4","6"};Collections.addAll(originalSet,els);final Set<?> set=TransformedSet.transformedSet(originalSet,TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(els.length,set.size());for(final Object el : els){assertEquals(true,set.contains(Integer.valueOf((String)el)));}assertEquals(true,set.remove(Integer.valueOf((String)els[0])));}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullCollection()instanceof Unmodifiable);}
public void testDecorateFactory(){final Collection<E> coll=makeFullCollection();assertSame(coll,UnmodifiableCollection.unmodifiableCollection(coll));try {UnmodifiableCollection.unmodifiableCollection(null);fail();}catch(final NullPointerException ex){}}
@SuppressWarnings("unchecked")public void testOrdering(){final ListOrderedSet<E> set=setupSet();Iterator<E> it=set.iterator();for (int i=0;i < 10;i++){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}for (int i=0;i < 10;i+=2){assertTrue("Must be able to remove int",set.remove(Integer.toString(i)));}it=set.iterator();for (int i=1;i < 10;i+=2){assertEquals("Sequence is wrong after remove ",Integer.toString(i),it.next());}for (int i=0;i < 10;i++){set.add((E)Integer.toString(i));}assertEquals("Size of set is wrong!",10,set.size());it=set.iterator();for (int i=1;i < 10;i+=2){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}for (int i=0;i < 10;i+=2){assertEquals("Sequence is wrong",Integer.toString(i),it.next());}}
@SuppressWarnings("unchecked")public void testListAddRemove(){final ListOrderedSet<E> set=makeObject();final List<E> view=set.asList();set.add((E)ZERO);set.add((E)ONE);set.add((E)TWO);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));assertEquals(3,view.size());assertSame(ZERO,view.get(0));assertSame(ONE,view.get(1));assertSame(TWO,view.get(2));assertEquals(0,set.indexOf(ZERO));assertEquals(1,set.indexOf(ONE));assertEquals(2,set.indexOf(TWO));set.remove(1);assertEquals(2,set.size());assertSame(ZERO,set.get(0));assertSame(TWO,set.get(1));assertEquals(2,view.size());assertSame(ZERO,view.get(0));assertSame(TWO,view.get(1));}
@SuppressWarnings("unchecked")public void testListAddIndexed(){final ListOrderedSet<E> set=makeObject();set.add((E)ZERO);set.add((E)TWO);set.add(1,(E)ONE);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));set.add(0,(E)ONE);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));final List<E> list=new ArrayList<E>();list.add((E)ZERO);list.add((E)TWO);set.addAll(0,list);assertEquals(3,set.size());assertSame(ZERO,set.get(0));assertSame(ONE,set.get(1));assertSame(TWO,set.get(2));list.add(0,(E)THREE);set.remove(TWO);set.addAll(1,list);assertEquals(4,set.size());assertSame(ZERO,set.get(0));assertSame(THREE,set.get(1));assertSame(TWO,set.get(2));assertSame(ONE,set.get(3));}
@SuppressWarnings("unchecked")public void testListAddReplacing(){final ListOrderedSet<E> set=makeObject();final A a=new A();final B b=new B();set.add((E)a);assertEquals(1,set.size());set.add((E)b);assertEquals(1,set.size());assertSame(a,set.decorated().iterator().next());assertSame(a,set.iterator().next());assertSame(a,set.get(0));assertSame(a,set.asList().get(0));}
@SuppressWarnings("unchecked")public void testRetainAll(){final List<E> list=new ArrayList<E>(10);final Set<E> set=new HashSet<E>(10);final ListOrderedSet<E> orderedSet=ListOrderedSet.listOrderedSet(set,list);for (int i=0;i < 10;++i){orderedSet.add((E)Integer.valueOf(10 - i - 1));}final Collection<E> retained=new ArrayList<E>(5);for (int i=0;i < 5;++i){retained.add((E)Integer.valueOf(i * 2));}assertTrue(orderedSet.retainAll(retained));assertEquals(5,orderedSet.size());assertEquals(Integer.valueOf(8),orderedSet.get(0));assertEquals(Integer.valueOf(6),orderedSet.get(1));assertEquals(Integer.valueOf(4),orderedSet.get(2));assertEquals(Integer.valueOf(2),orderedSet.get(3));assertEquals(Integer.valueOf(0),orderedSet.get(4));}
@SuppressWarnings("unchecked")public void testDuplicates(){final List<E> list=new ArrayList<E>(10);list.add((E)Integer.valueOf(1));list.add((E)Integer.valueOf(2));list.add((E)Integer.valueOf(3));list.add((E)Integer.valueOf(1));final ListOrderedSet<E> orderedSet=ListOrderedSet.listOrderedSet(list);assertEquals(3,orderedSet.size());assertEquals(3,IteratorUtils.toArray(orderedSet.iterator()).length);assertEquals(Integer.valueOf(1),orderedSet.get(0));assertEquals(Integer.valueOf(2),orderedSet.get(1));assertEquals(Integer.valueOf(3),orderedSet.get(2));}
public void testDecorator(){try {ListOrderedSet.listOrderedSet((List<E>)null);fail();}catch(final NullPointerException ex){}try {ListOrderedSet.listOrderedSet((Set<E>)null);fail();}catch(final NullPointerException ex){}try {ListOrderedSet.listOrderedSet(null,null);fail();}catch(final NullPointerException ex){}try {ListOrderedSet.listOrderedSet(new HashSet<E>(),null);fail();}catch(final NullPointerException ex){}try {ListOrderedSet.listOrderedSet(null,new ArrayList<E>());fail();}catch(final NullPointerException ex){}}
@Test public void testLength(){for (int i=0;i < before.size();++i){final SequencesComparator<Character> comparator=new SequencesComparator<Character>(sequence(before.get(i)),sequence(after.get(i)));Assert.assertEquals(length[i],comparator.getScript().getModifications());}}
@Test public void testExecution(){final ExecutionVisitor<Character> ev=new ExecutionVisitor<Character>();for (int i=0;i < before.size();++i){ev.setList(sequence(before.get(i)));new SequencesComparator<Character>(sequence(before.get(i)),sequence(after.get(i))).getScript().visit(ev);Assert.assertEquals(after.get(i),ev.getString());}}
@Test public void testMinimal(){final String[]shadokAlph=new String[]{new String("GA"),new String("BU"),new String("ZO"),new String("MEU")};final List<String> sentenceBefore=new ArrayList<String>();final List<String> sentenceAfter=new ArrayList<String>();sentenceBefore.add(shadokAlph[0]);sentenceBefore.add(shadokAlph[2]);sentenceBefore.add(shadokAlph[3]);sentenceBefore.add(shadokAlph[1]);sentenceBefore.add(shadokAlph[0]);sentenceBefore.add(shadokAlph[0]);sentenceBefore.add(shadokAlph[2]);sentenceBefore.add(shadokAlph[1]);sentenceBefore.add(shadokAlph[3]);sentenceBefore.add(shadokAlph[0]);sentenceBefore.add(shadokAlph[2]);sentenceBefore.add(shadokAlph[1]);sentenceBefore.add(shadokAlph[3]);sentenceBefore.add(shadokAlph[2]);sentenceBefore.add(shadokAlph[2]);sentenceBefore.add(shadokAlph[0]);sentenceBefore.add(shadokAlph[1]);sentenceBefore.add(shadokAlph[3]);sentenceBefore.add(shadokAlph[0]);sentenceBefore.add(shadokAlph[3]);final Random random=new Random(4564634237452342L);for (int nbCom=0;nbCom <= 40;nbCom+=5){sentenceAfter.clear();sentenceAfter.addAll(sentenceBefore);for (int i=0;i < nbCom;i++){if (random.nextInt(2)== 0){sentenceAfter.add(random.nextInt(sentenceAfter.size()+ 1),shadokAlph[random.nextInt(4)]);}else {sentenceAfter.remove(random.nextInt(sentenceAfter.size()));}}final SequencesComparator<String> comparator=new SequencesComparator<String>(sentenceBefore,sentenceAfter);Assert.assertTrue(comparator.getScript().getModifications()<= nbCom);}}
@Test public void testShadok(){final int lgMax=5;final String[]shadokAlph=new String[]{new String("GA"),new String("BU"),new String("ZO"),new String("MEU")};List<List<String>> shadokSentences=new ArrayList<List<String>>();for (int lg=0;lg < lgMax;++lg){final List<List<String>> newTab=new ArrayList<List<String>>();newTab.add(new ArrayList<String>());for(final String element : shadokAlph){for(final List<String> sentence : shadokSentences){final List<String> newSentence=new ArrayList<String>(sentence);newSentence.add(element);newTab.add(newSentence);}}shadokSentences=newTab;}final ExecutionVisitor<String> ev=new ExecutionVisitor<String>();for (int i=0;i < shadokSentences.size();++i){for(List<String> shadokSentence : shadokSentences){ev.setList(shadokSentences.get(i));new SequencesComparator<String>(shadokSentences.get(i),shadokSentence).getScript().visit(ev);final StringBuilder concat=new StringBuilder();for(final String s : shadokSentence){concat.append(s);}Assert.assertEquals(concat.toString(),ev.getString());}}}
@Test public void factoryMethodOf(){FluentIterable<Integer> iterable=FluentIterable.of(1,2,3,4,5);List<Integer> result=iterable.toList();assertEquals(Arrays.asList(1,2,3,4,5),result);iterable=FluentIterable.of(1);assertEquals(1,iterable.size());assertFalse(iterable.isEmpty());assertEquals(Arrays.asList(1),iterable.toList());result=FluentIterable.of(new Integer[0]).toList();assertTrue(result.isEmpty());final Iterable<Integer> it=null;try {FluentIterable.of(it).toList();fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void appendElements(){FluentIterable<Integer> it=FluentIterable.of(iterableA).append(10,20,30);assertEquals(IterableUtils.size(iterableA)+ 3,IterableUtils.size(it));assertTrue(IterableUtils.contains(it,1));assertTrue(IterableUtils.contains(it,10));assertTrue(IterableUtils.contains(it,20));assertTrue(IterableUtils.contains(it,30));assertFalse(IterableUtils.contains(it,40));FluentIterable<Integer> empty=FluentIterable.of(emptyIterable).append();assertTrue(IterableUtils.isEmpty(empty));}
@Test public void appendIterable(){List<Integer> listB=Arrays.asList(10,20,30);FluentIterable<Integer> it=FluentIterable.of(iterableA).append(listB);assertEquals(IterableUtils.size(iterableA)+ listB.size(),IterableUtils.size(it));assertTrue(IterableUtils.contains(it,1));assertTrue(IterableUtils.contains(it,10));assertTrue(IterableUtils.contains(it,20));assertTrue(IterableUtils.contains(it,30));assertFalse(IterableUtils.contains(it,40));}
@Test public void collate(){List<Integer> result=FluentIterable.of(iterableOdd).collate(iterableEven).toList();List<Integer> combinedList=new ArrayList<Integer>();CollectionUtils.addAll(combinedList,iterableOdd);CollectionUtils.addAll(combinedList,iterableEven);Collections.sort(combinedList);assertEquals(combinedList,result);try {FluentIterable.of(iterableOdd).collate(null).toList();fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void collateWithComparator(){List<Integer> result=FluentIterable.of(iterableOdd).collate(iterableEven,ComparatorUtils.<Integer>naturalComparator()).toList();List<Integer> combinedList=new ArrayList<Integer>();CollectionUtils.addAll(combinedList,iterableOdd);CollectionUtils.addAll(combinedList,iterableEven);Collections.sort(combinedList);assertEquals(combinedList,result);result=FluentIterable.of(iterableOdd).collate(iterableEven,null).toList();assertEquals(combinedList,result);}
@Test public void filter(){Predicate<Integer> smallerThan3=new Predicate<Integer>(){@Override public boolean evaluate(Integer object){return object.intValue()< 3;}};List<Integer> result=FluentIterable.of(iterableA).filter(smallerThan3).toList();assertEquals(3,result.size());assertEquals(Arrays.asList(1,2,2),result);result=FluentIterable.of(emptyIterable).filter(smallerThan3).toList();assertEquals(0,result.size());try {FluentIterable.of(iterableA).filter(null).toList();fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void forEach(){final AtomicInteger sum=new AtomicInteger(0);Closure<Integer> closure=new Closure<Integer>(){@Override public void execute(Integer input){sum.addAndGet(input);}};FluentIterable.of(iterableA).forEach(closure);int expectedSum=0;for(Integer i : iterableA){expectedSum+=i;}assertEquals(expectedSum,sum.get());try {FluentIterable.of(iterableA).forEach((Closure<Integer>)null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void limit(){List<Integer> result=FluentIterable.of(iterableA).limit(3).toList();assertEquals(3,result.size());assertEquals(Arrays.asList(1,2,2),result);result=FluentIterable.of(iterableA).limit(100).toList();List<Integer> expected=IterableUtils.toList(iterableA);assertEquals(expected.size(),result.size());assertEquals(expected,result);result=FluentIterable.of(iterableA).limit(0).toList();assertEquals(0,result.size());result=FluentIterable.of(emptyIterable).limit(3).toList();assertEquals(0,result.size());try {FluentIterable.of(iterableA).limit(-2).toList();fail("expecting IllegalArgumentException");}catch(IllegalArgumentException iae){}}
@Test public void reverse(){List<Integer> result=FluentIterable.of(iterableA).reverse().toList();List<Integer> expected=IterableUtils.toList(iterableA);Collections.reverse(expected);assertEquals(expected,result);result=FluentIterable.of(emptyIterable).reverse().toList();assertEquals(0,result.size());}
@Test public void skip(){List<Integer> result=FluentIterable.of(iterableA).skip(4).toList();assertEquals(6,result.size());assertEquals(Arrays.asList(3,3,4,4,4,4),result);result=FluentIterable.of(iterableA).skip(100).toList();assertEquals(0,result.size());result=FluentIterable.of(iterableA).skip(0).toList();List<Integer> expected=IterableUtils.toList(iterableA);assertEquals(expected.size(),result.size());assertEquals(expected,result);result=FluentIterable.of(emptyIterable).skip(3).toList();assertEquals(0,result.size());try {FluentIterable.of(iterableA).skip(-4).toList();fail("expecting IllegalArgumentException");}catch(IllegalArgumentException iae){}}
@Test public void transform(){Transformer<Integer,Integer> squared=new Transformer<Integer,Integer>(){@Override public Integer transform(Integer object){return object * object;}};List<Integer> result=FluentIterable.of(iterableA).transform(squared).toList();assertEquals(10,result.size());assertEquals(Arrays.asList(1,4,4,9,9,9,16,16,16,16),result);result=FluentIterable.of(emptyIterable).transform(squared).toList();assertEquals(0,result.size());try {FluentIterable.of(iterableA).transform(null).toList();fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void unique(){List<Integer> result=FluentIterable.of(iterableA).unique().toList();assertEquals(4,result.size());assertEquals(Arrays.asList(1,2,3,4),result);result=FluentIterable.of(emptyIterable).unique().toList();assertEquals(0,result.size());}
@Test public void unmodifiable(){FluentIterable<Integer> iterable1=FluentIterable.of(iterableA).unmodifiable();Iterator<Integer> it=iterable1.iterator();assertEquals(1,it.next().intValue());try {it.remove();fail("expecting UnsupportedOperationException");}catch(UnsupportedOperationException ise){}FluentIterable<Integer> iterable2=iterable1.unmodifiable();assertSame(iterable1,iterable2);}
@SuppressWarnings("unchecked")@Test public void zip(){List<Integer> result=FluentIterable.of(iterableOdd).zip(iterableEven).toList();List<Integer> combinedList=new ArrayList<Integer>();CollectionUtils.addAll(combinedList,iterableOdd);CollectionUtils.addAll(combinedList,iterableEven);Collections.sort(combinedList);assertEquals(combinedList,result);try {FluentIterable.of(iterableOdd).zip((Iterable<Integer>)null).toList();fail("expecting NullPointerException");}catch(NullPointerException npe){}result=FluentIterable.of(Arrays.asList(1,4,7)).zip(Arrays.asList(2,5,8),Arrays.asList(3,6,9)).toList();combinedList=Arrays.asList(1,2,3,4,5,6,7,8,9);assertEquals(combinedList,result);}
@Test public void asEnumeration(){Enumeration<Long> enumeration=FluentIterable.of(iterableB).asEnumeration();List<Long> result=EnumerationUtils.toList(enumeration);assertEquals(iterableB,result);enumeration=FluentIterable.<Long>empty().asEnumeration();assertFalse(enumeration.hasMoreElements());}
@Test public void allMatch(){assertTrue(FluentIterable.of(iterableEven).allMatch(EVEN));assertFalse(FluentIterable.of(iterableOdd).allMatch(EVEN));assertFalse(FluentIterable.of(iterableA).allMatch(EVEN));try {FluentIterable.of(iterableEven).allMatch(null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void anyMatch(){assertTrue(FluentIterable.of(iterableEven).anyMatch(EVEN));assertFalse(FluentIterable.of(iterableOdd).anyMatch(EVEN));assertTrue(FluentIterable.of(iterableA).anyMatch(EVEN));try {FluentIterable.of(iterableEven).anyMatch(null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void isEmpty(){assertTrue(FluentIterable.of(emptyIterable).isEmpty());assertFalse(FluentIterable.of(iterableOdd).isEmpty());}
@Test public void size(){try {FluentIterable.of((Iterable<?>)null).size();fail("expecting NullPointerException");}catch(NullPointerException npe){}assertEquals(0,FluentIterable.of(emptyIterable).size());assertEquals(IterableUtils.toList(iterableOdd).size(),FluentIterable.of(iterableOdd).size());}
@Test public void eval(){List<Integer> listNumbers=new ArrayList<Integer>();listNumbers.addAll(Arrays.asList(1,2,3,4,5,6,7,8,9,10));FluentIterable<Integer> iterable=FluentIterable.of(listNumbers).filter(EVEN);FluentIterable<Integer> materialized=iterable.eval();listNumbers.addAll(Arrays.asList(11,12,13,14,15,16,17,18,19,20));assertEquals(5,materialized.size());assertEquals(10,iterable.size());assertEquals(Arrays.asList(2,4,6,8,10),materialized.toList());assertEquals(Arrays.asList(2,4,6,8,10,12,14,16,18,20),iterable.toList());}
@Test public void contains(){assertTrue(FluentIterable.of(iterableEven).contains(2));assertFalse(FluentIterable.of(iterableEven).contains(1));assertFalse(FluentIterable.of(iterableEven).contains(null));assertTrue(FluentIterable.of(iterableEven).append((Integer)null).contains(null));}
@Test public void copyInto(){List<Integer> result=new ArrayList<Integer>();FluentIterable.of(iterableA).copyInto(result);List<Integer> expected=IterableUtils.toList(iterableA);assertEquals(expected.size(),result.size());assertEquals(expected,result);result=new ArrayList<Integer>();result.add(10);result.add(9);result.add(8);FluentIterable.of(iterableA).copyInto(result);expected=new ArrayList<Integer>();expected.addAll(Arrays.asList(10,9,8));expected.addAll(IterableUtils.toList(iterableA));assertEquals(expected.size(),result.size());assertEquals(expected,result);try {FluentIterable.of(iterableA).copyInto(null);fail("expecting NullPointerException");}catch(NullPointerException npe){}}
@Test public void iterator(){Iterator<Integer> iterator=FluentIterable.of(iterableA).iterator();assertTrue(iterator.hasNext());iterator=FluentIterable.<Integer>empty().iterator();assertFalse(iterator.hasNext());}
@Test public void get(){assertEquals(2,FluentIterable.of(iterableEven).get(0).intValue());try {FluentIterable.of(iterableEven).get(-1);fail("expecting IndexOutOfBoundsException");}catch(IndexOutOfBoundsException ioe){}try {FluentIterable.of(iterableEven).get(IterableUtils.size(iterableEven));fail("expecting IndexOutOfBoundsException");}catch(IndexOutOfBoundsException ioe){}}
@SuppressWarnings({"rawtypes","unchecked"})@Test public void toArray(){Long[]arr=new Long[]{1L,2L,3L,4L,5L};Long[]result=FluentIterable.of(arr).toArray(Long.class);assertNotNull(result);assertArrayEquals(arr,result);try {FluentIterable.of(arr).toArray((Class)String.class);}catch(ArrayStoreException ase){}}
@Test public void testToString(){String result=FluentIterable.of(iterableA).toString();assertEquals(iterableA.toString(),result);result=FluentIterable.empty().toString();assertEquals("[]",result);}
@Override public void testMapGet(){}
@Test public void mapGet(){Map<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),oneFactory);assertEquals(0,map.size());final Number i1=map.get(5);assertEquals(1,i1);assertEquals(1,map.size());map=lazySortedMap(new TreeMap<Integer,Number>(),FactoryUtils.<Number>nullFactory());final Number o=map.get(5);assertEquals(null,o);assertEquals(1,map.size());}
public void testSortOrder(){final SortedMap<String,Number> map=lazySortedMap(new TreeMap<String,Number>(),oneFactory);map.put("A",5);map.get("B");map.put("C",8);assertEquals("First key should be A","A",map.firstKey());assertEquals("Last key should be C","C",map.lastKey());assertEquals("First key in tail map should be B","B",map.tailMap("B").firstKey());assertEquals("Last key in head map should be B","B",map.headMap("C").lastKey());assertEquals("Last key in submap should be B","B",map.subMap("A","C").lastKey());final Comparator<?> c=map.comparator();assertTrue("natural order,so comparator should be null",c == null);}
public void testTransformerDecorate(){final Transformer<Object,Integer> transformer=TransformerUtils.asTransformer(oneFactory);SortedMap<Integer,Number> map=lazySortedMap(new TreeMap<Integer,Number>(),transformer);assertTrue(map instanceof LazySortedMap);try {map=lazySortedMap(new TreeMap<Integer,Number>(),(Transformer<Integer,Number>)null);fail("Expecting NullPointerException for null transformer");}catch(final NullPointerException e){}try {map=lazySortedMap((SortedMap<Integer,Number>)null,transformer);fail("Expecting NullPointerException for null map");}catch(final NullPointerException e){}}
@Override public void testEmptyListIteratorIsIndeedEmpty(){final ListIterator<E> it=makeEmptyIterator();assertEquals(false,it.hasNext());assertEquals(-1,it.nextIndex());assertEquals(false,it.hasPrevious());assertEquals(0,it.previousIndex());try {it.next();fail("NoSuchElementException must be thrown from empty ListIterator");}catch(final NoSuchElementException e){}try {it.previous();fail("NoSuchElementException must be thrown from empty ListIterator");}catch(final NoSuchElementException e){}}
@Override public void testWalkForwardAndBack(){final ArrayList<E> list=new ArrayList<E>();final ListIterator<E> it=makeObject();while (it.hasNext()){list.add(it.next());}assertEquals(false,it.hasNext());assertEquals(true,it.hasPrevious());for (int i=list.size()- 1;i >= 0;i--){assertEquals("" + i,list.size()- i - 2,it.nextIndex());assertEquals(list.size()- i - 1,it.previousIndex());final Object obj=list.get(i);assertEquals(obj,it.previous());}assertEquals(true,it.hasNext());assertEquals(false,it.hasPrevious());try {it.previous();fail("NoSuchElementException must be thrown from previous at start of ListIterator");}catch(final NoSuchElementException e){}}
public void testReverse(){final ListIterator<E> it=makeObject();assertEquals(true,it.hasNext());assertEquals(3,it.nextIndex());assertEquals(false,it.hasPrevious());assertEquals(4,it.previousIndex());assertEquals("Four",it.next());assertEquals(2,it.nextIndex());assertEquals(true,it.hasNext());assertEquals(3,it.previousIndex());assertEquals(true,it.hasPrevious());assertEquals("Three",it.next());assertEquals(true,it.hasNext());assertEquals(1,it.nextIndex());assertEquals(true,it.hasPrevious());assertEquals(2,it.previousIndex());assertEquals("Two",it.next());assertEquals(true,it.hasNext());assertEquals(0,it.nextIndex());assertEquals(true,it.hasPrevious());assertEquals(1,it.previousIndex());assertEquals("One",it.next());assertEquals(false,it.hasNext());assertEquals(-1,it.nextIndex());assertEquals(true,it.hasPrevious());assertEquals(0,it.previousIndex());assertEquals("One",it.previous());assertEquals("Two",it.previous());assertEquals("Three",it.previous());assertEquals("Four",it.previous());}
public void testReset(){final ResettableListIterator<E> it=makeObject();assertEquals("Four",it.next());it.reset();assertEquals("Four",it.next());it.next();it.next();it.reset();assertEquals("Four",it.next());}
public void testOrderedMapIterator(){assertTrue(makeEmptyIterator()instanceof Unmodifiable);}
public void testDecorateFactory(){OrderedMapIterator<K,V> it=makeObject();assertSame(it,UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it));it=getMap().mapIterator();assertTrue(it != UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it));try {UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(null);fail();}catch(final NullPointerException ex){}}
public void testNoMappingReturnsNull(){final MultiValueMap<K,V> map=createTestMap();assertNull(map.get("whatever"));}
@SuppressWarnings("unchecked")public void testValueCollectionType(){final MultiValueMap<K,V> map=createTestMap(LinkedList.class);assertTrue(map.get("one")instanceof LinkedList);}
@SuppressWarnings("unchecked")public void testMultipleValues(){final MultiValueMap<K,V> map=createTestMap(HashSet.class);final HashSet<V> expected=new HashSet<V>();expected.add((V)"uno");expected.add((V)"un");assertEquals(expected,map.get("one"));}
@SuppressWarnings("unchecked")public void testContainsValue(){final MultiValueMap<K,V> map=createTestMap(HashSet.class);assertTrue(map.containsValue("uno"));assertTrue(map.containsValue("un"));assertTrue(map.containsValue("dos"));assertTrue(map.containsValue("deux"));assertTrue(map.containsValue("tres"));assertTrue(map.containsValue("trois"));assertFalse(map.containsValue("quatro"));}
@SuppressWarnings("unchecked")public void testKeyContainsValue(){final MultiValueMap<K,V> map=createTestMap(HashSet.class);assertTrue(map.containsValue("one","uno"));assertTrue(map.containsValue("one","un"));assertTrue(map.containsValue("two","dos"));assertTrue(map.containsValue("two","deux"));assertTrue(map.containsValue("three","tres"));assertTrue(map.containsValue("three","trois"));assertFalse(map.containsValue("four","quatro"));}
@SuppressWarnings("unchecked")public void testValues(){final MultiValueMap<K,V> map=createTestMap(HashSet.class);final HashSet<V> expected=new HashSet<V>();expected.add((V)"uno");expected.add((V)"dos");expected.add((V)"tres");expected.add((V)"un");expected.add((V)"deux");expected.add((V)"trois");final Collection<Object> c=map.values();assertEquals(6,c.size());assertEquals(expected,new HashSet<Object>(c));}
public void testKeyedIterator(){final MultiValueMap<K,V> map=createTestMap();final ArrayList<Object> actual=new ArrayList<Object>(IteratorUtils.toList(map.iterator("one")));final ArrayList<Object> expected=new ArrayList<Object>(Arrays.asList("uno","un"));assertEquals(expected,actual);}
public void testRemoveAllViaIterator(){final MultiValueMap<K,V> map=createTestMap();for (final Iterator<?> i=map.values().iterator();i.hasNext();){i.next();i.remove();}assertNull(map.get("one"));assertTrue(map.isEmpty());}
public void testRemoveAllViaKeyedIterator(){final MultiValueMap<K,V> map=createTestMap();for (final Iterator<?> i=map.iterator("one");i.hasNext();){i.next();i.remove();}assertNull(map.get("one"));assertEquals(4,map.totalSize());}
public void testIterator(){final MultiValueMap<K,V> map=createTestMap();@SuppressWarnings("unchecked")Collection<V> values=new ArrayList<V>((Collection<V>)map.values());Iterator<Map.Entry<K,V>> iterator=map.iterator();while (iterator.hasNext()){Map.Entry<K,V> entry=iterator.next();assertTrue(map.containsValue(entry.getKey(),entry.getValue()));assertTrue(values.contains(entry.getValue()));assertTrue(values.remove(entry.getValue()));}assertTrue(values.isEmpty());}
public void testRemoveAllViaEntryIterator(){final MultiValueMap<K,V> map=createTestMap();for (final Iterator<?> i=map.iterator();i.hasNext();){i.next();i.remove();}assertNull(map.get("one"));assertEquals(0,map.totalSize());}
public void testTotalSizeA(){assertEquals(6,createTestMap().totalSize());}
@SuppressWarnings("unchecked")public void testMapEquals(){final MultiValueMap<K,V> one=new MultiValueMap<K,V>();final Integer value=Integer.valueOf(1);one.put((K)"One",value);one.removeMapping("One",value);final MultiValueMap<K,V> two=new MultiValueMap<K,V>();assertEquals(two,one);}
@SuppressWarnings("unchecked")public void testGetCollection(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();map.put((K)"A","AA");assertSame(map.get("A"),map.getCollection("A"));}
@SuppressWarnings("unchecked")public void testTotalSize(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();assertEquals(0,map.totalSize());map.put((K)"A","AA");assertEquals(1,map.totalSize());map.put((K)"B","BA");assertEquals(2,map.totalSize());map.put((K)"B","BB");assertEquals(3,map.totalSize());map.put((K)"B","BC");assertEquals(4,map.totalSize());map.remove("A");assertEquals(3,map.totalSize());map.removeMapping("B","BC");assertEquals(2,map.totalSize());}
@SuppressWarnings("unchecked")public void testSize(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();assertEquals(0,map.size());map.put((K)"A","AA");assertEquals(1,map.size());map.put((K)"B","BA");assertEquals(2,map.size());map.put((K)"B","BB");assertEquals(2,map.size());map.put((K)"B","BC");assertEquals(2,map.size());map.remove("A");assertEquals(1,map.size());map.removeMapping("B","BC");assertEquals(1,map.size());}
@SuppressWarnings("unchecked")public void testSize_Key(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();assertEquals(0,map.size("A"));assertEquals(0,map.size("B"));map.put((K)"A","AA");assertEquals(1,map.size("A"));assertEquals(0,map.size("B"));map.put((K)"B","BA");assertEquals(1,map.size("A"));assertEquals(1,map.size("B"));map.put((K)"B","BB");assertEquals(1,map.size("A"));assertEquals(2,map.size("B"));map.put((K)"B","BC");assertEquals(1,map.size("A"));assertEquals(3,map.size("B"));map.remove("A");assertEquals(0,map.size("A"));assertEquals(3,map.size("B"));map.removeMapping("B","BC");assertEquals(0,map.size("A"));assertEquals(2,map.size("B"));}
@SuppressWarnings("unchecked")public void testIterator_Key(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();assertEquals(false,map.iterator("A").hasNext());map.put((K)"A","AA");final Iterator<?> it=map.iterator("A");assertEquals(true,it.hasNext());it.next();assertEquals(false,it.hasNext());}
@SuppressWarnings("unchecked")public void testContainsValue_Key(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();assertEquals(false,map.containsValue("A","AA"));assertEquals(false,map.containsValue("B","BB"));map.put((K)"A","AA");assertEquals(true,map.containsValue("A","AA"));assertEquals(false,map.containsValue("A","AB"));}
@SuppressWarnings("unchecked")public void testPutWithList(){@SuppressWarnings("rawtypes")final MultiValueMap<K,V> test=MultiValueMap.multiValueMap(new HashMap<K,Collection>(),ArrayList.class);assertEquals("a",test.put((K)"A","a"));assertEquals("b",test.put((K)"A","b"));assertEquals(1,test.size());assertEquals(2,test.size("A"));assertEquals(2,test.totalSize());}
@SuppressWarnings("unchecked")public void testPutWithSet(){@SuppressWarnings("rawtypes")final MultiValueMap<K,V> test=MultiValueMap.multiValueMap(new HashMap<K,HashSet>(),HashSet.class);assertEquals("a",test.put((K)"A","a"));assertEquals("b",test.put((K)"A","b"));assertEquals(null,test.put((K)"A","a"));assertEquals(1,test.size());assertEquals(2,test.size("A"));assertEquals(2,test.totalSize());}
@SuppressWarnings("unchecked")public void testPutAll_Map1(){final MultiMap<K,V> original=new MultiValueMap<K,V>();original.put((K)"key","object1");original.put((K)"key","object2");final MultiValueMap<K,V> test=new MultiValueMap<K,V>();test.put((K)"keyA","objectA");test.put((K)"key","object0");test.putAll(original);assertEquals(2,test.size());assertEquals(4,test.totalSize());assertEquals(1,test.getCollection("keyA").size());assertEquals(3,test.getCollection("key").size());assertEquals(true,test.containsValue("objectA"));assertEquals(true,test.containsValue("object0"));assertEquals(true,test.containsValue("object1"));assertEquals(true,test.containsValue("object2"));}
@SuppressWarnings("unchecked")public void testPutAll_Map2(){final Map<K,V> original=new HashMap<K,V>();original.put((K)"keyX",(V)"object1");original.put((K)"keyY",(V)"object2");final MultiValueMap<K,V> test=new MultiValueMap<K,V>();test.put((K)"keyA","objectA");test.put((K)"keyX","object0");test.putAll(original);assertEquals(3,test.size());assertEquals(4,test.totalSize());assertEquals(1,test.getCollection("keyA").size());assertEquals(2,test.getCollection("keyX").size());assertEquals(1,test.getCollection("keyY").size());assertEquals(true,test.containsValue("objectA"));assertEquals(true,test.containsValue("object0"));assertEquals(true,test.containsValue("object1"));assertEquals(true,test.containsValue("object2"));}
@SuppressWarnings("unchecked")public void testPutAll_KeyCollection(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();Collection<V> coll=(Collection<V>)Arrays.asList("X","Y","Z");assertEquals(true,map.putAll((K)"A",coll));assertEquals(3,map.size("A"));assertEquals(true,map.containsValue("A","X"));assertEquals(true,map.containsValue("A","Y"));assertEquals(true,map.containsValue("A","Z"));assertEquals(false,map.putAll((K)"A",null));assertEquals(3,map.size("A"));assertEquals(true,map.containsValue("A","X"));assertEquals(true,map.containsValue("A","Y"));assertEquals(true,map.containsValue("A","Z"));assertEquals(false,map.putAll((K)"A",new ArrayList<V>()));assertEquals(3,map.size("A"));assertEquals(true,map.containsValue("A","X"));assertEquals(true,map.containsValue("A","Y"));assertEquals(true,map.containsValue("A","Z"));coll=(Collection<V>)Arrays.asList("M");assertEquals(true,map.putAll((K)"A",coll));assertEquals(4,map.size("A"));assertEquals(true,map.containsValue("A","X"));assertEquals(true,map.containsValue("A","Y"));assertEquals(true,map.containsValue("A","Z"));assertEquals(true,map.containsValue("A","M"));}
@SuppressWarnings("unchecked")public void testRemove_KeyItem(){final MultiValueMap<K,V> map=new MultiValueMap<K,V>();map.put((K)"A","AA");map.put((K)"A","AB");map.put((K)"A","AC");assertEquals(false,map.removeMapping("C","CA"));assertEquals(false,map.removeMapping("A","AD"));assertEquals(true,map.removeMapping("A","AC"));assertEquals(true,map.removeMapping("A","AB"));assertEquals(true,map.removeMapping("A","AA"));assertEquals(new MultiValueMap<K,V>(),map);}
public void testUnsafeDeSerialization()throws Exception {MultiValueMap map1=MultiValueMap.multiValueMap(new HashMap(),ArrayList.class);byte[]bytes=serialize(map1);Object result=deserialize(bytes);assertEquals(map1,result);MultiValueMap map2=MultiValueMap.multiValueMap(new HashMap(),(Class)String.class);bytes=serialize(map2);try {result=deserialize(bytes);fail("unsafe clazz accepted when de-serializing MultiValueMap");}catch(UnsupportedOperationException ex){}}
public void testEmptyMapCompatibility()throws Exception {final Map<?,?> map=makeEmptyMap();final Map<?,?> map2=(Map<?,?>)readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));assertEquals("Map is empty",0,map2.size());}
public void testFullMapCompatibility()throws Exception {final Map<?,?> map=(Map<?,?>)makeObject();final Map<?,?> map2=(Map<?,?>)readExternalFormFromDisk(getCanonicalFullCollectionName(map));assertEquals("Map is the right size",map.size(),map2.size());for(final Object key : map.keySet()){assertEquals("Map had inequal elements",map.get(key),map2.get(key));map2.remove(key);}assertEquals("Map had extra values",0,map2.size());}
public void testObjectEqualsSelf(){final Object obj=makeObject();assertEquals("A Object should equal itself",obj,obj);}
public void testEqualsNull(){final Object obj=makeObject();assertEquals(false,obj.equals(null));}
public void testObjectHashCodeEqualsSelfHashCode(){final Object obj=makeObject();assertEquals("hashCode should be repeatable",obj.hashCode(),obj.hashCode());}
public void testObjectHashCodeEqualsContract(){final Object obj1=makeObject();if (obj1.equals(obj1)){assertEquals("[1]When two objects are equal,their hashCodes should be also.",obj1.hashCode(),obj1.hashCode());}final Object obj2=makeObject();if (obj1.equals(obj2)){assertEquals("[2]When two objects are equal,their hashCodes should be also.",obj1.hashCode(),obj2.hashCode());assertTrue("When obj1.equals(obj2)is true,then obj2.equals(obj1)should also be true",obj2.equals(obj1));}}
public void testSerializeDeserializeThenCompare()throws Exception {final Object obj=makeObject();if (obj instanceof Serializable && isTestSerialization()){final Object dest=serializeDeserialize(obj);if (isEqualsCheckable()){assertEquals("obj != deserialize(serialize(obj))",obj,dest);}}}
/** * Sanity check method,makes sure that any Serializable class can be serialized and de-serialized in memory,using the handy makeObject()method* @throws IOException* @throws ClassNotFoundException*/public void testSimpleSerialization()throws Exception {final Object o=makeObject();if (o instanceof Serializable && isTestSerialization()){final byte[]objekt=writeExternalFormToBytes((Serializable)o);readExternalFormFromBytes(objekt);}}
/** * Tests serialization by comparing against a previously stored version in SVN. If the test object is serializable,confirm that a canonical form exists.*/public void testCanonicalEmptyCollectionExists(){if (supportsEmptyCollections()&& isTestSerialization()&& !skipSerializedCanonicalTests()){final Object object=makeObject();if (object instanceof Serializable){final String name=getCanonicalEmptyCollectionName(object);assertTrue("Canonical empty collection (" + name + ")is not in SVN",new File(name).exists());}}}
/** * Tests serialization by comparing against a previously stored version in SVN. If the test object is serializable,confirm that a canonical form exists.*/public void testCanonicalFullCollectionExists(){if (supportsFullCollections()&& isTestSerialization()&& !skipSerializedCanonicalTests()){final Object object=makeObject();if (object instanceof Serializable){final String name=getCanonicalFullCollectionName(object);assertTrue("Canonical full collection (" + name + ")is not in SVN",new File(name).exists());}}}
/** * Adds the simple test defined by the given method to the TestSuite.* @param bulk  The instance of the class that defined the method(I know it's weird.  But the point is,we can clone the instance and not have to worry about constructors.)* @param m  The simple test method*/void addTest(final BulkTest bulk,final Method m){final BulkTest bulk2=(BulkTest)bulk.clone();bulk2.setName(m.getName());bulk2.verboseName=prefix + "." + m.getName();if (ignored.contains(bulk2.verboseName)){return;}result.addTest(bulk2);}
@SuppressWarnings("unchecked")public void testShrinkCache(){if (!isRemoveSupported()|| !isAddSupported()){return;}resetEmpty();final NodeCachingLinkedList<E> list=getCollection();list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));list.removeAllNodes();list.setMaximumCacheSize(2);list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));checkNodes();list.removeNode(list.getNode(0,false));list.removeNode(list.getNode(0,false));list.removeNode(list.getNode(0,false));checkNodes();list.addAll(Arrays.asList((E[])new String[]{"1","2","3","4"}));checkNodes();}
public void testGetSet(){final PredicatedNavigableSet<E> set=makeTestSet();assertTrue("returned set should not be null",set.decorated()!= null);}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final NavigableSet<E> set=makeTestSet();final String testString="B";try {set.add((E)testString);fail("Should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!set.contains(testString));}
@SuppressWarnings("unchecked")public void testIllegalAddAll(){final NavigableSet<E> set=makeTestSet();final Set<E> elements=new TreeSet<E>();elements.add((E)"Aone");elements.add((E)"Atwo");elements.add((E)"Bthree");elements.add((E)"Afour");try {set.addAll(elements);fail("Should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Set shouldn't contain illegal element",!set.contains("Aone"));assertTrue("Set shouldn't contain illegal element",!set.contains("Atwo"));assertTrue("Set shouldn't contain illegal element",!set.contains("Bthree"));assertTrue("Set shouldn't contain illegal element",!set.contains("Afour"));}
public void testComparator(){final NavigableSet<E> set=makeTestSet();final Comparator<? super E> c=set.comparator();assertTrue("natural order,so comparator should be null",c == null);}
/** * Tests intersecting a non-empty list with an empty list.*/@Test public void testIntersectNonEmptyWithEmptyList(){final List<String> empty=Collections.<String>emptyList();assertTrue("result not empty",ListUtils.intersection(empty,fullList).isEmpty());}
/** * Tests intersecting a non-empty list with an empty list.*/@Test public void testIntersectEmptyWithEmptyList(){final List<?> empty=Collections.EMPTY_LIST;assertTrue("result not empty",ListUtils.intersection(empty,empty).isEmpty());}
/** * Tests intersecting a non-empty list with an subset of itself.*/@Test public void testIntersectNonEmptySubset(){final List<String> other=new ArrayList<String>(fullList);assertNotNull(other.remove(0));assertNotNull(other.remove(1));assertEquals(other,ListUtils.intersection(fullList,other));}
/** * Tests intersecting a non-empty list with an subset of itself.*/@Test public void testIntersectListWithNoOverlapAndDifferentTypes(){@SuppressWarnings("boxing")final List<Integer> other=Arrays.asList(1,23);assertTrue(ListUtils.intersection(fullList,other).isEmpty());}
/** * Tests intersecting a non-empty list with itself.*/@Test public void testIntersectListWithSelf(){assertEquals(fullList,ListUtils.intersection(fullList,fullList));}
/** * Tests intersecting two lists in different orders.*/@Test public void testIntersectionOrderInsensitivity(){final List<String> one=new ArrayList<String>();final List<String> two=new ArrayList<String>();one.add("a");one.add("b");two.add("a");two.add("a");two.add("b");two.add("b");assertEquals(ListUtils.intersection(one,two),ListUtils.intersection(two,one));}
@Test public void testPredicatedList(){final Predicate<Object> predicate=new Predicate<Object>(){@Override public boolean evaluate(final Object o){return o instanceof String;}};List<Object> list=ListUtils.predicatedList(new ArrayList<Object>(),predicate);assertTrue("returned object should be a PredicatedList",list instanceof PredicatedList);try {ListUtils.predicatedList(new ArrayList<Object>(),null);fail("Expecting IllegalArgumentException for null predicate.");}catch(final NullPointerException ex){}try {ListUtils.predicatedList(null,predicate);fail("Expecting IllegalArgumentException for null list.");}catch(final NullPointerException ex){}}
@Test public void testLazyList(){final List<Integer> list=ListUtils.lazyList(new ArrayList<Integer>(),new Factory<Integer>(){private int index;@Override public Integer create(){index++;return Integer.valueOf(index);}});assertNotNull(list.get(5));assertEquals(6,list.size());assertNotNull(list.get(5));assertEquals(6,list.size());}
@Test public void testEmptyIfNull(){assertTrue(ListUtils.emptyIfNull(null).isEmpty());final List<Long> list=new ArrayList<Long>();assertSame(list,ListUtils.emptyIfNull(list));}
@Test public void testDefaultIfNull(){assertTrue(ListUtils.defaultIfNull(null,Collections.emptyList()).isEmpty());final List<Long> list=new ArrayList<Long>();assertSame(list,ListUtils.defaultIfNull(list,Collections.<Long>emptyList()));}
@Test public void testEquals(){final Collection<String> data=Arrays.asList("a","b","c");final List<String> a=new ArrayList<String>(data);final List<String> b=new ArrayList<String>(data);assertEquals(true,a.equals(b));assertEquals(true,ListUtils.isEqualList(a,b));a.clear();assertEquals(false,ListUtils.isEqualList(a,b));assertEquals(false,ListUtils.isEqualList(a,null));assertEquals(false,ListUtils.isEqualList(null,b));assertEquals(true,ListUtils.isEqualList(null,null));}
@Test public void testHashCode(){final Collection<String> data=Arrays.asList("a","b","c");final List<String> a=new ArrayList<String>(data);final List<String> b=new ArrayList<String>(data);assertEquals(true,a.hashCode()== b.hashCode());assertEquals(true,a.hashCode()== ListUtils.hashCodeForList(a));assertEquals(true,b.hashCode()== ListUtils.hashCodeForList(b));assertEquals(true,ListUtils.hashCodeForList(a)== ListUtils.hashCodeForList(b));a.clear();assertEquals(false,ListUtils.hashCodeForList(a)== ListUtils.hashCodeForList(b));assertEquals(0,ListUtils.hashCodeForList(null));}
@Test public void testRetainAll(){final List<String> sub=new ArrayList<String>();sub.add(a);sub.add(b);sub.add(x);final List<String> retained=ListUtils.retainAll(fullList,sub);assertTrue(retained.size()== 2);sub.remove(x);assertTrue(retained.equals(sub));fullList.retainAll(sub);assertTrue(retained.equals(fullList));try {ListUtils.retainAll(null,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void testRemoveAll(){final List<String> sub=new ArrayList<String>();sub.add(a);sub.add(b);sub.add(x);final List<String> remainder=ListUtils.removeAll(fullList,sub);assertTrue(remainder.size()== 3);fullList.removeAll(sub);assertTrue(remainder.equals(fullList));try {ListUtils.removeAll(null,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void testSubtract(){final List<String> list=new ArrayList<String>();list.add(a);list.add(b);list.add(a);list.add(x);final List<String> sub=new ArrayList<String>();sub.add(a);final List<String> result=ListUtils.subtract(list,sub);assertTrue(result.size()== 3);final List<String> expected=new ArrayList<String>();expected.add(b);expected.add(a);expected.add(x);assertEquals(expected,result);try {ListUtils.subtract(list,null);fail("expecting NullPointerException");}catch(final NullPointerException npe){}}
@Test public void testSubtractNullElement(){final List<String> list=new ArrayList<String>();list.add(a);list.add(null);list.add(null);list.add(x);final List<String> sub=new ArrayList<String>();sub.add(null);final List<String> result=ListUtils.subtract(list,sub);assertTrue(result.size()== 3);final List<String> expected=new ArrayList<String>();expected.add(a);expected.add(null);expected.add(x);assertEquals(expected,result);}
/** * Tests the <code>indexOf</code> method in <code>ListUtils</code> class..*/@Test public void testIndexOf(){Predicate<String> testPredicate=EqualPredicate.equalPredicate("d");int index=ListUtils.indexOf(fullList,testPredicate);assertEquals(d,fullList.get(index));testPredicate=EqualPredicate.equalPredicate("de");index=ListUtils.indexOf(fullList,testPredicate);assertEquals(index,-1);assertEquals(ListUtils.indexOf(null,testPredicate),-1);assertEquals(ListUtils.indexOf(fullList,null),-1);}
@Test @SuppressWarnings("boxing")public void testLongestCommonSubsequence(){try {ListUtils.longestCommonSubsequence((List<?>)null,null);fail("failed to check for null argument");}catch(final NullPointerException e){}try {ListUtils.longestCommonSubsequence(Arrays.asList('A'),null);fail("failed to check for null argument");}catch(final NullPointerException e){}try {ListUtils.longestCommonSubsequence(null,Arrays.asList('A'));fail("failed to check for null argument");}catch(final NullPointerException e){}@SuppressWarnings("unchecked")List<Character> lcs=ListUtils.longestCommonSubsequence(Collections.EMPTY_LIST,Collections.EMPTY_LIST);assertEquals(0,lcs.size());List<Character> list1=Arrays.asList('B','A','N','A','N','A');List<Character> list2=Arrays.asList('A','N','A','N','A','S');lcs=ListUtils.longestCommonSubsequence(list1,list2);List<Character> expected=Arrays.asList('A','N','A','N','A');assertEquals(expected,lcs);List<Character> list3=Arrays.asList('A','T','A','N','A');lcs=ListUtils.longestCommonSubsequence(list1,list3);expected=Arrays.asList('A','A','N','A');assertEquals(expected,lcs);List<Character> listZorro=Arrays.asList('Z','O','R','R','O');lcs=ListUtils.longestCommonSubsequence(list1,listZorro);assertTrue(lcs.isEmpty());}
@Test public void testLongestCommonSubsequenceWithString(){try {ListUtils.longestCommonSubsequence((String)null,null);fail("failed to check for null argument");}catch(final NullPointerException e){}try {ListUtils.longestCommonSubsequence("A",null);fail("failed to check for null argument");}catch(final NullPointerException e){}try {ListUtils.longestCommonSubsequence(null,"A");fail("failed to check for null argument");}catch(final NullPointerException e){}String lcs=ListUtils.longestCommonSubsequence("","");assertEquals(0,lcs.length());String banana="BANANA";String ananas="ANANAS";lcs=ListUtils.longestCommonSubsequence(banana,ananas);assertEquals("ANANA",lcs);String atana="ATANA";lcs=ListUtils.longestCommonSubsequence(banana,atana);assertEquals("AANA",lcs);String zorro="ZORRO";lcs=ListUtils.longestCommonSubsequence(banana,zorro);assertEquals(0,lcs.length());}
@Test @SuppressWarnings("boxing")public void testPartition(){final List<Integer> strings=new ArrayList<Integer>();for (int i=0;i <= 6;i++){strings.add(i);}final List<List<Integer>> partition=ListUtils.partition(strings,3);assertNotNull(partition);assertEquals(3,partition.size());assertEquals(1,partition.get(2).size());try {ListUtils.partition(null,3);fail("failed to check for null argument");}catch(final NullPointerException e){}try {ListUtils.partition(strings,0);fail("failed to check for size argument");}catch(final IllegalArgumentException e){}try {ListUtils.partition(strings,-10);fail("failed to check for size argument");}catch(final IllegalArgumentException e){}}
@Test @SuppressWarnings("boxing")public void testSelect(){final List<Integer> list=new ArrayList<Integer>();list.add(1);list.add(2);list.add(3);list.add(4);final List<Integer> output1=ListUtils.select(list,EQUALS_TWO);final List<Number> output2=ListUtils.<Number>select(list,EQUALS_TWO);final HashSet<Number> output3=CollectionUtils.select(list,EQUALS_TWO,new HashSet<Number>());assertTrue(CollectionUtils.isEqualCollection(output1,output3));assertEquals(4,list.size());assertEquals(1,output1.size());assertEquals(2,output2.iterator().next());}
@Test @SuppressWarnings("boxing")public void testSelectRejected(){final List<Long> list=new ArrayList<Long>();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final List<Long> output1=ListUtils.selectRejected(list,EQUALS_TWO);final List<? extends Number> output2=ListUtils.selectRejected(list,EQUALS_TWO);final HashSet<Number> output3=CollectionUtils.selectRejected(list,EQUALS_TWO,new HashSet<Number>());assertTrue(CollectionUtils.isEqualCollection(output1,output2));assertTrue(CollectionUtils.isEqualCollection(output1,output3));assertEquals(4,list.size());assertEquals(3,output1.size());assertTrue(output1.contains(1L));assertTrue(output1.contains(3L));assertTrue(output1.contains(4L));}
@Test public void testToListWithStringTokenizer(){final List<String> expectedList1=new ArrayList<String>();final StringTokenizer st=new StringTokenizer(TO_LIST_FIXTURE);while (st.hasMoreTokens()){expectedList1.add(st.nextToken());}final List<String> expectedList2=new ArrayList<String>();expectedList2.add("this");expectedList2.add("is");expectedList2.add("a");expectedList2.add("test");final List<String> actualList=EnumerationUtils.toList(new StringTokenizer(TO_LIST_FIXTURE));assertEquals(expectedList1,expectedList2);assertEquals(expectedList1,actualList);assertEquals(expectedList2,actualList);}
@Test public void testToListWithHashtable(){final Hashtable<String,Integer> expected=new Hashtable<String,Integer>();expected.put("one",Integer.valueOf(1));expected.put("two",Integer.valueOf(2));expected.put("three",Integer.valueOf(3));final List<Integer> actualEltList=EnumerationUtils.toList(expected.elements());assertEquals(expected.size(),actualEltList.size());assertTrue(actualEltList.contains(Integer.valueOf(1)));assertTrue(actualEltList.contains(Integer.valueOf(2)));assertTrue(actualEltList.contains(Integer.valueOf(3)));final List<Integer> expectedEltList=new ArrayList<Integer>();expectedEltList.add(Integer.valueOf(1));expectedEltList.add(Integer.valueOf(2));expectedEltList.add(Integer.valueOf(3));assertTrue(actualEltList.containsAll(expectedEltList));final List<String> actualKeyList=EnumerationUtils.toList(expected.keys());assertEquals(expected.size(),actualEltList.size());assertTrue(actualKeyList.contains("one"));assertTrue(actualKeyList.contains("two"));assertTrue(actualKeyList.contains("three"));final List<String> expectedKeyList=new ArrayList<String>();expectedKeyList.add("one");expectedKeyList.add("two");expectedKeyList.add("three");assertTrue(actualKeyList.containsAll(expectedKeyList));}
@Test public void getFromEnumeration()throws Exception {final Vector<String> vector=new Vector<String>();vector.addElement("zero");vector.addElement("one");Enumeration<String> en=vector.elements();assertEquals("zero",EnumerationUtils.get(en,0));en=vector.elements();assertEquals("one",EnumerationUtils.get(en,1));try {EnumerationUtils.get(en,3);fail("Expecting IndexOutOfBoundsException.");}catch(final IndexOutOfBoundsException e){}assertTrue(!en.hasMoreElements());}
public void testClone(){final SingletonMap<K,V> map=makeFullMap();assertEquals(1,map.size());final SingletonMap<K,V> cloned=map.clone();assertEquals(1,cloned.size());assertEquals(true,cloned.containsKey(ONE));assertEquals(true,cloned.containsValue(TWO));}
public void testKeyValue(){final SingletonMap<K,V> map=makeFullMap();assertEquals(1,map.size());assertEquals(ONE,map.getKey());assertEquals(TWO,map.getValue());assertTrue(map instanceof KeyValue);}
public void testBoundedMap(){final SingletonMap<K,V> map=makeFullMap();assertEquals(1,map.size());assertEquals(true,map.isFull());assertEquals(1,map.maxSize());assertTrue(map instanceof BoundedMap);}
@SuppressWarnings("unchecked")public void testListValuedMapAdd(){final ListValuedMap<K,V> listMap=makeObject();assertTrue(listMap.get((K)"whatever")instanceof List);List<V> list=listMap.get((K)"A");list.add((V)"a1");assertEquals(1,listMap.size());assertTrue(listMap.containsKey("A"));}
@SuppressWarnings("unchecked")public void testListValuedMapAddViaListIterator(){final ListValuedMap<K,V> listMap=makeObject();ListIterator<V> listIt=listMap.get((K)"B").listIterator();assertFalse(listIt.hasNext());listIt.add((V)"b1");listIt.add((V)"b2");listIt.add((V)"b3");assertEquals(3,listMap.size());assertTrue(listMap.containsKey("B"));assertFalse(listIt.hasNext());}
@SuppressWarnings("unchecked")public void testListValuedMapRemove(){final ListValuedMap<K,V> listMap=makeObject();List<V> list=listMap.get((K)"A");list.add((V)"a1");list.add((V)"a2");list.add((V)"a3");assertEquals(3,listMap.size());assertEquals("a1",list.remove(0));assertEquals(2,listMap.size());assertEquals("a2",list.remove(0));assertEquals(1,listMap.size());assertEquals("a3",list.remove(0));assertEquals(0,listMap.size());assertFalse(listMap.containsKey("A"));}
@SuppressWarnings("unchecked")public void testListValuedMapRemoveViaListIterator(){final ListValuedMap<K,V> listMap=makeObject();ListIterator<V> listIt=listMap.get((K)"B").listIterator();listIt.add((V)"b1");listIt.add((V)"b2");assertEquals(2,listMap.size());assertTrue(listMap.containsKey("B"));listIt=listMap.get((K)"B").listIterator();while (listIt.hasNext()){listIt.next();listIt.remove();}assertFalse(listMap.containsKey("B"));listIt.add((V)"b1");listIt.add((V)"b2");assertTrue(listMap.containsKey("B"));assertEquals(2,listMap.get((K)"B").size());}
@SuppressWarnings({"unchecked","rawtypes"})public void testEqualsHashCodeContract(){MultiValuedMap map1=makeObject();MultiValuedMap map2=makeObject();map1.put("a","a1");map1.put("a","a2");map2.put("a","a1");map2.put("a","a2");assertEquals(map1,map2);assertEquals(map1.hashCode(),map2.hashCode());map2.put("a","a2");assertNotSame(map1,map2);assertNotSame(map1.hashCode(),map2.hashCode());}
@SuppressWarnings({"unchecked","rawtypes"})public void testListValuedMapEqualsHashCodeContract(){ListValuedMap map1=makeObject();ListValuedMap map2=makeObject();map1.put("a","a1");map1.put("a","a2");map2.put("a","a1");map2.put("a","a2");assertEquals(map1,map2);assertEquals(map1.hashCode(),map2.hashCode());map1.put("b","b1");map1.put("b","b2");map2.put("b","b2");map2.put("b","b1");assertNotSame(map1,map2);assertNotSame(map1.hashCode(),map2.hashCode());}
public void testGetSet(){final PredicatedSet<E> set=makeTestSet();assertTrue("returned set should not be null",set.decorated()!= null);}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final Set<E> set=makeTestSet();final Integer i=Integer.valueOf(3);try {set.add((E)i);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!set.contains(i));}
@SuppressWarnings("unchecked")public void testIllegalAddAll(){final Set<E> set=makeTestSet();final Set<E> elements=new HashSet<E>();elements.add((E)"one");elements.add((E)"two");elements.add((E)Integer.valueOf(3));elements.add((E)"four");try {set.addAll(elements);fail("Integer should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Set shouldn't contain illegal element",!set.contains("one"));assertTrue("Set shouldn't contain illegal element",!set.contains("two"));assertTrue("Set shouldn't contain illegal element",!set.contains(Integer.valueOf(3)));assertTrue("Set shouldn't contain illegal element",!set.contains("four"));}
/** * Override this inherited test since Collections.reverseOrder doesn't adhere to the "soft" Comparator contract,and we've already "canonized" the comparator returned by makeComparator.*/@Override @Test public void testSerializeDeserializeThenCompare()throws Exception {final Comparator<?> comp=new ReverseComparator<String>(new ComparableComparator<String>());final ByteArrayOutputStream buffer=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(buffer);out.writeObject(comp);out.close();final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));final Object dest=in.readObject();in.close();assertEquals("obj != deserialize(serialize(obj))",comp,dest);}
@Test public void testExceptionFactory(){assertNotNull(FactoryUtils.exceptionFactory());assertSame(FactoryUtils.exceptionFactory(),FactoryUtils.exceptionFactory());try {FactoryUtils.exceptionFactory().create();}catch(final FunctorException ex){try {FactoryUtils.exceptionFactory().create();}catch(final FunctorException ex2){return;}}fail();}
@Test public void testNullFactory(){final Factory<Object> factory=FactoryUtils.nullFactory();assertNotNull(factory);final Object created=factory.create();assertNull(created);}
@Test public void testConstantFactoryNull(){final Factory<Object> factory=FactoryUtils.constantFactory(null);assertNotNull(factory);final Object created=factory.create();assertNull(created);}
@Test public void testConstantFactoryConstant(){final Integer constant=Integer.valueOf(9);final Factory<Integer> factory=FactoryUtils.constantFactory(constant);assertNotNull(factory);final Integer created=factory.create();assertSame(constant,created);}
@Test public void testPrototypeFactoryNull(){assertSame(ConstantFactory.NULL_INSTANCE,FactoryUtils.prototypeFactory(null));}
@Test public void testPrototypeFactoryPublicCloneMethod()throws Exception {final Date proto=new Date();final Factory<Date> factory=FactoryUtils.prototypeFactory(proto);assertNotNull(factory);final Date created=factory.create();assertTrue(proto != created);assertEquals(proto,created);}
@Test public void testPrototypeFactoryPublicCopyConstructor()throws Exception {final Mock1 proto=new Mock1(6);Factory<Object> factory=FactoryUtils.<Object>prototypeFactory(proto);assertNotNull(factory);final Object created=factory.create();assertTrue(proto != created);assertEquals(proto,created);}
@Test public void testPrototypeFactoryPublicSerialization()throws Exception {final Integer proto=Integer.valueOf(9);final Factory<Integer> factory=FactoryUtils.prototypeFactory(proto);assertNotNull(factory);final Integer created=factory.create();assertTrue(proto != created);assertEquals(proto,created);}
@Test public void testPrototypeFactoryPublicSerializationError(){final Mock2 proto=new Mock2(new Object());final Factory<Object> factory=FactoryUtils.<Object>prototypeFactory(proto);assertNotNull(factory);try {factory.create();}catch(final FunctorException ex){assertTrue(ex.getCause()instanceof IOException);return;}fail();}
@Test public void testPrototypeFactoryPublicBad(){final Object proto=new Object();try {FactoryUtils.prototypeFactory(proto);}catch(final IllegalArgumentException ex){return;}fail();}
@Test(expected=NullPointerException.class)public void instantiateFactoryNull(){FactoryUtils.instantiateFactory(null);}
@Test public void instantiateFactorySimple(){final Factory<Mock3> factory=FactoryUtils.instantiateFactory(Mock3.class);assertNotNull(factory);Mock3 created=factory.create();assertEquals(0,created.getValue());created=factory.create();assertEquals(1,created.getValue());}
@Test(expected=IllegalArgumentException.class)public void instantiateFactoryMismatch(){FactoryUtils.instantiateFactory(Date.class,null,new Object[]{null});}
@Test(expected=IllegalArgumentException.class)public void instantiateFactoryNoConstructor(){FactoryUtils.instantiateFactory(Date.class,new Class[]{Long.class},new Object[]{null});}
@Test public void instantiateFactoryComplex(){TimeZone.setDefault(TimeZone.getTimeZone("GMT"));final Factory<Date> factory=FactoryUtils.instantiateFactory(Date.class,new Class[]{Integer.TYPE,Integer.TYPE,Integer.TYPE},new Object[]{Integer.valueOf(70),Integer.valueOf(0),Integer.valueOf(2)});assertNotNull(factory);final Date created=factory.create();assertEquals(new Date(1000 * 60 * 60* 24),created);}
/** * Test that all Factory singletones hold singleton pattern in serialization/deserialization process.*/@Test public void testSingletonPatternInSerialization(){final Object[]singletones=new Object[]{ExceptionFactory.INSTANCE};for(final Object original : singletones){TestUtils.assertSameAfterSerialization("Singletone patern broken for " + original.getClass(),original);}}
public void testConstructors()throws Exception {MultiKey<Integer> mk;mk=new MultiKey<Integer>(ONE,TWO);assertTrue(Arrays.equals(new Object[]{ONE,TWO},mk.getKeys()));mk=new MultiKey<Integer>(ONE,TWO,THREE);assertTrue(Arrays.equals(new Object[]{ONE,TWO,THREE},mk.getKeys()));mk=new MultiKey<Integer>(ONE,TWO,THREE,FOUR);assertTrue(Arrays.equals(new Object[]{ONE,TWO,THREE,FOUR},mk.getKeys()));mk=new MultiKey<Integer>(ONE,TWO,THREE,FOUR,FIVE);assertTrue(Arrays.equals(new Object[]{ONE,TWO,THREE,FOUR,FIVE},mk.getKeys()));mk=new MultiKey<Integer>(new Integer[]{THREE,FOUR,ONE,TWO},false);assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys()));}
public void testConstructorsByArray()throws Exception {MultiKey<Integer> mk;Integer[]keys=new Integer[]{THREE,FOUR,ONE,TWO};mk=new MultiKey<Integer>(keys);assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys()));keys[3]=FIVE;assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys()));keys=new Integer[]{};mk=new MultiKey<Integer>(keys);assertTrue(Arrays.equals(new Object[]{},mk.getKeys()));keys=new Integer[]{THREE,FOUR,ONE,TWO};mk=new MultiKey<Integer>(keys,true);assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys()));keys[3]=FIVE;assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys()));keys=new Integer[]{THREE,FOUR,ONE,TWO};mk=new MultiKey<Integer>(keys,false);assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,TWO},mk.getKeys()));keys[3]=FIVE;assertTrue(Arrays.equals(new Object[]{THREE,FOUR,ONE,FIVE},mk.getKeys()));}
public void testConstructorsByArrayNull()throws Exception {final Integer[]keys=null;try {new MultiKey<Integer>(keys);fail();}catch(final IllegalArgumentException ex){}try {new MultiKey<Integer>(keys,true);fail();}catch(final IllegalArgumentException ex){}try {new MultiKey<Integer>(keys,false);fail();}catch(final IllegalArgumentException ex){}}
public void testSize(){assertEquals(2,new MultiKey<Integer>(ONE,TWO).size());assertEquals(2,new MultiKey<Object>(null,null).size());assertEquals(3,new MultiKey<Integer>(ONE,TWO,THREE).size());assertEquals(3,new MultiKey<Object>(null,null,null).size());assertEquals(4,new MultiKey<Integer>(ONE,TWO,THREE,FOUR).size());assertEquals(4,new MultiKey<Object>(null,null,null,null).size());assertEquals(5,new MultiKey<Integer>(ONE,TWO,THREE,FOUR,FIVE).size());assertEquals(5,new MultiKey<Object>(null,null,null,null,null).size());assertEquals(0,new MultiKey<Object>(new Object[]{}).size());assertEquals(1,new MultiKey<Integer>(new Integer[]{ONE}).size());assertEquals(2,new MultiKey<Integer>(new Integer[]{ONE,TWO}).size());assertEquals(7,new MultiKey<Integer>(new Integer[]{ONE,TWO,ONE,TWO,ONE,TWO,ONE}).size());}
public void testGetIndexed(){final MultiKey<Integer> mk=new MultiKey<Integer>(ONE,TWO);assertSame(ONE,mk.getKey(0));assertSame(TWO,mk.getKey(1));try {mk.getKey(-1);fail();}catch(final IndexOutOfBoundsException ex){}try {mk.getKey(2);fail();}catch(final IndexOutOfBoundsException ex){}}
public void testGetKeysSimpleConstructor(){final MultiKey<Integer> mk=new MultiKey<Integer>(ONE,TWO);final Object[]array=mk.getKeys();assertSame(ONE,array[0]);assertSame(TWO,array[1]);assertEquals(2,array.length);}
public void testGetKeysArrayConstructorCloned(){final Integer[]keys=new Integer[]{ONE,TWO};final MultiKey<Integer> mk=new MultiKey<Integer>(keys,true);final Object[]array=mk.getKeys();assertTrue(array != keys);assertTrue(Arrays.equals(array,keys));assertSame(ONE,array[0]);assertSame(TWO,array[1]);assertEquals(2,array.length);}
public void testGetKeysArrayConstructorNonCloned(){final Integer[]keys=new Integer[]{ONE,TWO};final MultiKey<Integer> mk=new MultiKey<Integer>(keys,false);final Object[]array=mk.getKeys();assertTrue(array != keys);assertTrue(Arrays.equals(array,keys));assertSame(ONE,array[0]);assertSame(TWO,array[1]);assertEquals(2,array.length);}
public void testHashCode(){final MultiKey<Integer> mk1=new MultiKey<Integer>(ONE,TWO);final MultiKey<Integer> mk2=new MultiKey<Integer>(ONE,TWO);final MultiKey<Object> mk3=new MultiKey<Object>(ONE,"TWO");assertTrue(mk1.hashCode()== mk1.hashCode());assertTrue(mk1.hashCode()== mk2.hashCode());assertTrue(mk1.hashCode()!= mk3.hashCode());final int total=(0 ^ ONE.hashCode())^ TWO.hashCode();assertEquals(total,mk1.hashCode());}
public void testEquals(){final MultiKey<Integer> mk1=new MultiKey<Integer>(ONE,TWO);final MultiKey<Integer> mk2=new MultiKey<Integer>(ONE,TWO);final MultiKey<Object> mk3=new MultiKey<Object>(ONE,"TWO");assertEquals(mk1,mk1);assertEquals(mk1,mk2);assertFalse(mk1.equals(mk3));assertFalse(mk1.equals(""));assertFalse(mk1.equals(null));}
public void testEqualsAfterSerialization()throws IOException,ClassNotFoundException {SystemHashCodeSimulatingKey sysKey=new SystemHashCodeSimulatingKey("test");final MultiKey<?> mk=new MultiKey<Object>(ONE,sysKey);final Map<MultiKey<?>,Integer> map=new HashMap<MultiKey<?>,Integer>();map.put(mk,TWO);final ByteArrayOutputStream baos=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(baos);out.writeObject(sysKey);out.writeObject(map);out.close();final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());final ObjectInputStream in=new ObjectInputStream(bais);sysKey=(SystemHashCodeSimulatingKey)in.readObject();final Map<?,?> map2=(Map<?,?>)in.readObject();in.close();assertEquals(2,sysKey.hashCode());final MultiKey<?> mk2=new MultiKey<Object>(ONE,sysKey);assertEquals(TWO,map2.get(mk2));}
public void testEqualsAfterSerializationOfDerivedClass()throws IOException,ClassNotFoundException {final DerivedMultiKey<?> mk=new DerivedMultiKey<String>("A","B");final ByteArrayOutputStream baos=new ByteArrayOutputStream();final ObjectOutputStream out=new ObjectOutputStream(baos);out.writeObject(mk);out.close();final ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());final ObjectInputStream in=new ObjectInputStream(bais);final DerivedMultiKey<?> mk2=(DerivedMultiKey<?>)in.readObject();in.close();assertEquals(mk.hashCode(),mk2.hashCode());}
public void testUnmodifiable(){assertTrue(makeObject()instanceof Unmodifiable);assertTrue(makeFullMap()instanceof Unmodifiable);}
public void testDecorateFactory(){final Trie<String,V> trie=makeFullMap();assertSame(trie,UnmodifiableTrie.unmodifiableTrie(trie));try {UnmodifiableTrie.unmodifiableTrie(null);fail();}catch(final NullPointerException ex){}}
/** * Override testUnsupportedRemove,since the default impl expects removeAll,retainAll and iterator().remove to throw*/@Override public void testUnsupportedRemove(){resetFull();try {getCollection().remove(null);fail("remove should raise UnsupportedOperationException");}catch(final UnsupportedOperationException e){}verify();}
protected void setUpTest(){c=new CompositeCollection<E>();one=new HashSet<E>();two=new HashSet<E>();}
@SuppressWarnings("serial")protected void setUpMutatorTest(){setUpTest();c.setMutator(new CompositeCollection.CollectionMutator<E>(){@Override public boolean add(final CompositeCollection<E> composite,final List<Collection<E>> collections,final E obj){for(final Collection<E> coll : collections){coll.add(obj);}return true;}@Override public boolean addAll(final CompositeCollection<E> composite,final List<Collection<E>> collections,final Collection<? extends E> coll){for(final Collection<E> collection : collections){collection.addAll(coll);}return true;}@Override public boolean remove(final CompositeCollection<E> composite,final List<Collection<E>> collections,final Object obj){for(final Collection<E> collection : collections){collection.remove(obj);}return true;}});}
@SuppressWarnings("unchecked")public void testSize(){setUpTest();final HashSet<E> set=new HashSet<E>();set.add((E)"a");set.add((E)"b");c.addComposited(set);assertEquals(set.size(),c.size());}
@SuppressWarnings("unchecked")public void testMultipleCollectionsSize(){setUpTest();final HashSet<E> set=new HashSet<E>();set.add((E)"a");set.add((E)"b");c.addComposited(set);final HashSet<E> other=new HashSet<E>();other.add((E)"c");c.addComposited(other);assertEquals(set.size()+ other.size(),c.size());}
@SuppressWarnings("unchecked")public void testIsEmpty(){setUpTest();assertTrue(c.isEmpty());final HashSet<E> empty=new HashSet<E>();c.addComposited(empty);assertTrue(c.isEmpty());empty.add((E)"a");assertTrue(!c.isEmpty());}
@SuppressWarnings("unchecked")public void testIterator(){setUpTest();one.add((E)"1");two.add((E)"2");c.addComposited(one);c.addComposited(two);final Iterator<E> i=c.iterator();E next=i.next();assertTrue(c.contains(next));assertTrue(one.contains(next));next=i.next();i.remove();assertTrue(!c.contains(next));assertTrue(!two.contains(next));}
@SuppressWarnings("unchecked")public void testClear(){setUpTest();one.add((E)"1");two.add((E)"2");c.addComposited(one,two);c.clear();assertTrue(one.isEmpty());assertTrue(two.isEmpty());assertTrue(c.isEmpty());}
@SuppressWarnings("unchecked")public void testContainsAll(){setUpTest();one.add((E)"1");two.add((E)"1");c.addComposited(one);assertTrue(c.containsAll(two));}
@SuppressWarnings("unchecked")public void testRetainAll(){setUpTest();one.add((E)"1");one.add((E)"2");two.add((E)"1");c.addComposited(one);c.retainAll(two);assertTrue(!c.contains("2"));assertTrue(!one.contains("2"));assertTrue(c.contains("1"));assertTrue(one.contains("1"));}
@SuppressWarnings({"unchecked","serial"})public void testAddAllMutator(){setUpTest();c.setMutator(new CompositeCollection.CollectionMutator<E>(){@Override public boolean add(final CompositeCollection<E> composite,final List<Collection<E>> collections,final E obj){for(final Collection<E> collection : collections){collection.add(obj);}return true;}@Override public boolean addAll(final CompositeCollection<E> composite,final List<Collection<E>> collections,final Collection<? extends E> coll){for(final Collection<E> collection : collections){collection.addAll(coll);}return true;}@Override public boolean remove(final CompositeCollection<E> composite,final List<Collection<E>> collections,final Object obj){return false;}});c.addComposited(one);two.add((E)"foo");c.addAll(two);assertTrue(c.contains("foo"));assertTrue(one.contains("foo"));}
@SuppressWarnings({"unchecked","serial"})public void testAddMutator(){setUpTest();c.setMutator(new CompositeCollection.CollectionMutator<E>(){@Override public boolean add(final CompositeCollection<E> composite,final List<Collection<E>> collections,final E obj){for(final Collection<E> collection : collections){collection.add(obj);}return true;}@Override public boolean addAll(final CompositeCollection<E> composite,final List<Collection<E>> collections,final Collection<? extends E> coll){for(final Collection<E> collection : collections){collection.addAll(coll);}return true;}@Override public boolean remove(final CompositeCollection<E> composite,final List<Collection<E>> collections,final Object obj){return false;}});c.addComposited(one);c.add((E)"foo");assertTrue(c.contains("foo"));assertTrue(one.contains("foo"));}
@SuppressWarnings("unchecked")public void testToCollection(){setUpTest();one.add((E)"1");two.add((E)"2");c.addComposited(one,two);final Collection<E> foo=c.toCollection();assertTrue(foo.containsAll(c));assertEquals(c.size(),foo.size());one.add((E)"3");assertTrue(!foo.containsAll(c));}
@SuppressWarnings("unchecked")public void testAddAllToCollection(){setUpTest();one.add((E)"1");two.add((E)"2");c.addComposited(one,two);final Collection<E> toCollection=new HashSet<E>();toCollection.addAll(c);assertTrue(toCollection.containsAll(c));assertEquals(c.size(),toCollection.size());}
@SuppressWarnings("unchecked")public void testRemove(){setUpMutatorTest();one.add((E)"1");two.add((E)"2");two.add((E)"1");c.addComposited(one,two);c.remove("1");assertTrue(!c.contains("1"));assertTrue(!one.contains("1"));assertTrue(!two.contains("1"));}
@SuppressWarnings("unchecked")public void testRemoveAll(){setUpMutatorTest();one.add((E)"1");two.add((E)"2");two.add((E)"1");final Collection<E> removing=new ArrayList<E>(one);c.addComposited(one,two);c.removeAll(removing);assertTrue(!c.contains("1"));assertTrue(!one.contains("1"));assertTrue(!two.contains("1"));}
@SuppressWarnings("unchecked")public void testRemoveComposited(){setUpMutatorTest();one.add((E)"1");two.add((E)"2");two.add((E)"1");c.addComposited(one,two);c.removeComposited(one);assertTrue(c.contains("1"));assertEquals(2,c.size());}
public void testGetSet(){final PredicatedSortedSet<E> set=makeTestSet();assertTrue("returned set should not be null",set.decorated()!= null);}
@SuppressWarnings("unchecked")public void testIllegalAdd(){final SortedSet<E> set=makeTestSet();final String testString="B";try {set.add((E)testString);fail("Should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Collection shouldn't contain illegal element",!set.contains(testString));}
@SuppressWarnings("unchecked")public void testIllegalAddAll(){final SortedSet<E> set=makeTestSet();final Set<E> elements=new TreeSet<E>();elements.add((E)"Aone");elements.add((E)"Atwo");elements.add((E)"Bthree");elements.add((E)"Afour");try {set.addAll(elements);fail("Should fail string predicate.");}catch(final IllegalArgumentException e){}assertTrue("Set shouldn't contain illegal element",!set.contains("Aone"));assertTrue("Set shouldn't contain illegal element",!set.contains("Atwo"));assertTrue("Set shouldn't contain illegal element",!set.contains("Bthree"));assertTrue("Set shouldn't contain illegal element",!set.contains("Afour"));}
public void testComparator(){final SortedSet<E> set=makeTestSet();final Comparator<? super E> c=set.comparator();assertTrue("natural order,so comparator should be null",c == null);}
/** * Test a decorated iterator bounded such that the first element returned is at an index greater its first element,and the last element returned is at an index less than its last element.*/@Test public void testBounded(){Iterator<E> iter=new BoundedIterator<E>(testList.iterator(),2,4);assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test a decorated iterator bounded such that the <code>offset</code> is zero and the <code>max</code> is its size,in that the BoundedIterator should return all the same elements as its decorated iterator.*/@Test public void testSameAsDecorated(){Iterator<E> iter=new BoundedIterator<E>(testList.iterator(),0,testList.size());assertTrue(iter.hasNext());assertEquals("a",iter.next());assertTrue(iter.hasNext());assertEquals("b",iter.next());assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test a decorated iterator bounded to a <code>max</code> of 0. The BoundedIterator should behave as if there are no more elements to return,since it is technically an empty iterator.*/@Test public void testEmptyBounded(){Iterator<E> iter=new BoundedIterator<E>(testList.iterator(),3,0);assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the case if a negative <code>offset</code> is passed to the constructor.  {@link IllegalArgumentException}is expected.*/@Test public void testNegativeOffset(){try {new BoundedIterator<E>(testList.iterator(),-1,4);fail("Expected IllegalArgumentException.");}catch(IllegalArgumentException iae){}}
/** * Test the case if a negative <code>max</code> is passed to the constructor.  {@link IllegalArgumentException}is expected.*/@Test public void testNegativeMax(){try {new BoundedIterator<E>(testList.iterator(),3,-1);fail("Expected IllegalArgumentException.");}catch(IllegalArgumentException iae){}}
/** * Test the case if the <code>offset</code> passed to the constructor is greater than the decorated iterator's size. The BoundedIterator should behave as if there are no more elements to return.*/@Test public void testOffsetGreaterThanSize(){Iterator<E> iter=new BoundedIterator<E>(testList.iterator(),10,4);assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the case if the <code>max</code> passed to the constructor is greater than the size of the decorated iterator. The last element returned should be the same as the last element of the decorated iterator.*/@Test public void testMaxGreaterThanSize(){Iterator<E> iter=new BoundedIterator<E>(testList.iterator(),1,10);assertTrue(iter.hasNext());assertEquals("b",iter.next());assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertTrue(iter.hasNext());assertEquals("g",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the <code>remove()</code> method being called without <code>next()</code> being called first.*/@Test public void testRemoveWithoutCallingNext(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new BoundedIterator<E>(testListCopy.iterator(),1,5);try {iter.remove();fail("Expected IllegalStateException.");}catch(IllegalStateException ise){}}
/** * Test the <code>remove()</code> method being called twice without calling <code>next()</code> in between.*/@Test public void testRemoveCalledTwice(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new BoundedIterator<E>(testListCopy.iterator(),1,5);assertTrue(iter.hasNext());assertEquals("b",iter.next());iter.remove();try {iter.remove();fail("Expected IllegalStateException.");}catch(IllegalStateException ise){}}
/** * Test removing the first element. Verify that the element is removed from the underlying collection.*/@Test public void testRemoveFirst(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new BoundedIterator<E>(testListCopy.iterator(),1,5);assertTrue(iter.hasNext());assertEquals("b",iter.next());iter.remove();assertFalse(testListCopy.contains("b"));assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test removing an element in the middle of the iterator. Verify that the element is removed from the underlying collection.*/@Test public void testRemoveMiddle(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new BoundedIterator<E>(testListCopy.iterator(),1,5);assertTrue(iter.hasNext());assertEquals("b",iter.next());assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());iter.remove();assertFalse(testListCopy.contains("d"));assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test removing the last element. Verify that the element is removed from the underlying collection.*/@Test public void testRemoveLast(){List<E> testListCopy=new ArrayList<E>(testList);Iterator<E> iter=new BoundedIterator<E>(testListCopy.iterator(),1,5);assertTrue(iter.hasNext());assertEquals("b",iter.next());assertTrue(iter.hasNext());assertEquals("c",iter.next());assertTrue(iter.hasNext());assertEquals("d",iter.next());assertTrue(iter.hasNext());assertEquals("e",iter.next());assertTrue(iter.hasNext());assertEquals("f",iter.next());assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}iter.remove();assertFalse(testListCopy.contains("f"));assertFalse(iter.hasNext());try {iter.next();fail("Expected NoSuchElementException.");}catch(NoSuchElementException nsee){}}
/** * Test the case if the decorated iterator does not support the <code>remove()</code> method and throws an  {@link UnsupportedOperationException}.*/@Test public void testRemoveUnsupported(){Iterator<E> mockIterator=new AbstractIteratorDecorator<E>(testList.iterator()){@Override public void remove(){throw new UnsupportedOperationException();}};Iterator<E> iter=new BoundedIterator<E>(mockIterator,1,5);assertTrue(iter.hasNext());assertEquals("b",iter.next());try {iter.remove();fail("Expected UnsupportedOperationException.");}catch(UnsupportedOperationException usoe){}}
