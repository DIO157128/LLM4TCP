test_case,faulty,test_code
"org.apache.commons.lang.builder.StandardToStringStyleTest.testBlank",0,"public void testBlank(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.StandardToStringStyleTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").toString());assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).appendSuper(""Integer@8888[%NULL%]"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[%NULL%,a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[%NULL%]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.StandardToStringStyleTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(i3).toString());assertEquals(baseStr + ""[a=%NULL%]"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(baseStr + ""[a=%Integer%]"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(baseStr + ""[a=%SIZE=0%]"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(baseStr + ""[a=[]]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(baseStr + ""[a=%SIZE=0%]"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(baseStr + ""[a=%SIZE=0%]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(baseStr + ""[a=[]]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.StandardToStringStyleTest.testLong",0,"public void testLong(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(3L).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.StandardToStringStyleTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(baseStr + ""[[%NULL%,5,[3,6]]]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[[%NULL%,5,[3,6]]]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.StandardToStringStyleTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(baseStr + ""[[1,2,-3,4]]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[[1,2,-3,4]]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.StandardToStringStyleTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(baseStr + ""[[[1,2],%NULL%,[5]]]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[[[1,2],%NULL%,[5]]]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[%NULL%]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.CharUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new CharUtils());Constructor[]cons=CharUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(BooleanUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(BooleanUtils.class.getModifiers()));}"
"org.apache.commons.lang.CharUtilsTest.testToCharacterObject_char",0,"public void testToCharacterObject_char(){assertEquals(new Character('a'),CharUtils.toCharacterObject('a'));assertSame(CharUtils.toCharacterObject('a'),CharUtils.toCharacterObject('a'));for (int i=0;i < 128;i++){Character ch=CharUtils.toCharacterObject((char)i);Character ch2=CharUtils.toCharacterObject((char)i);assertSame(ch,ch2);assertEquals(i,ch.charValue());}for (int i=128;i < 196;i++){Character ch=CharUtils.toCharacterObject((char)i);Character ch2=CharUtils.toCharacterObject((char)i);assertEquals(ch,ch2);assertTrue(ch != ch2);assertEquals(i,ch.charValue());assertEquals(i,ch2.charValue());}}"
"org.apache.commons.lang.CharUtilsTest.testToCharacterObject_String",0,"public void testToCharacterObject_String(){assertEquals(null,CharUtils.toCharacterObject(null));assertEquals(null,CharUtils.toCharacterObject(""""));assertEquals(new Character('a'),CharUtils.toCharacterObject(""a""));assertEquals(new Character('a'),CharUtils.toCharacterObject(""abc""));assertSame(CharUtils.toCharacterObject(""a""),CharUtils.toCharacterObject(""a""));assertSame(CharUtils.toCharacterObject(""a""),CharUtils.toCharacterObject('a'));}"
"org.apache.commons.lang.CharUtilsTest.testToChar_Character",0,"public void testToChar_Character(){assertEquals('A',CharUtils.toChar(CHARACTER_A));assertEquals('B',CharUtils.toChar(CHARACTER_B));try {CharUtils.toChar((Character)null);}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.CharUtilsTest.testToChar_Character_char",0,"public void testToChar_Character_char(){assertEquals('A',CharUtils.toChar(CHARACTER_A,'X'));assertEquals('B',CharUtils.toChar(CHARACTER_B,'X'));assertEquals('X',CharUtils.toChar((Character)null,'X'));}"
"org.apache.commons.lang.CharUtilsTest.testToChar_String",0,"public void testToChar_String(){assertEquals('A',CharUtils.toChar(""A""));assertEquals('B',CharUtils.toChar(""BA""));try {CharUtils.toChar((String)null);}catch(IllegalArgumentException ex){}try {CharUtils.toChar("""");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.CharUtilsTest.testToChar_String_char",0,"public void testToChar_String_char(){assertEquals('A',CharUtils.toChar(""A"",'X'));assertEquals('B',CharUtils.toChar(""BA"",'X'));assertEquals('X',CharUtils.toChar("""",'X'));assertEquals('X',CharUtils.toChar((String)null,'X'));}"
"org.apache.commons.lang.CharUtilsTest.testToIntValue_char",0,"public void testToIntValue_char(){assertEquals(0,CharUtils.toIntValue('0'));assertEquals(1,CharUtils.toIntValue('1'));assertEquals(2,CharUtils.toIntValue('2'));assertEquals(3,CharUtils.toIntValue('3'));assertEquals(4,CharUtils.toIntValue('4'));assertEquals(5,CharUtils.toIntValue('5'));assertEquals(6,CharUtils.toIntValue('6'));assertEquals(7,CharUtils.toIntValue('7'));assertEquals(8,CharUtils.toIntValue('8'));assertEquals(9,CharUtils.toIntValue('9'));try {CharUtils.toIntValue('a');}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.CharUtilsTest.testToIntValue_char_int",0,"public void testToIntValue_char_int(){assertEquals(0,CharUtils.toIntValue('0',-1));assertEquals(3,CharUtils.toIntValue('3',-1));assertEquals(-1,CharUtils.toIntValue('a',-1));}"
"org.apache.commons.lang.CharUtilsTest.testToIntValue_Character",0,"public void testToIntValue_Character(){assertEquals(0,CharUtils.toIntValue(new Character('0')));assertEquals(3,CharUtils.toIntValue(new Character('3')));try {CharUtils.toIntValue(null);}catch(IllegalArgumentException ex){}try {CharUtils.toIntValue(CHARACTER_A);}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.CharUtilsTest.testToIntValue_Character_int",0,"public void testToIntValue_Character_int(){assertEquals(0,CharUtils.toIntValue(new Character('0'),-1));assertEquals(3,CharUtils.toIntValue(new Character('3'),-1));assertEquals(-1,CharUtils.toIntValue(new Character('A'),-1));assertEquals(-1,CharUtils.toIntValue(null,-1));}"
"org.apache.commons.lang.CharUtilsTest.testToString_char",0,"public void testToString_char(){assertEquals(""a"",CharUtils.toString('a'));assertSame(CharUtils.toString('a'),CharUtils.toString('a'));for (int i=0;i < 128;i++){String str=CharUtils.toString((char)i);String str2=CharUtils.toString((char)i);assertSame(str,str2);assertEquals(1,str.length());assertEquals(i,str.charAt(0));}for (int i=128;i < 196;i++){String str=CharUtils.toString((char)i);String str2=CharUtils.toString((char)i);assertEquals(str,str2);assertTrue(str != str2);assertEquals(1,str.length());assertEquals(i,str.charAt(0));assertEquals(1,str2.length());assertEquals(i,str2.charAt(0));}}"
"org.apache.commons.lang.CharUtilsTest.testToString_Character",0,"public void testToString_Character(){assertEquals(null,CharUtils.toString(null));assertEquals(""A"",CharUtils.toString(CHARACTER_A));assertSame(CharUtils.toString(CHARACTER_A),CharUtils.toString(CHARACTER_A));}"
"org.apache.commons.lang.CharUtilsTest.testToUnicodeEscaped_char",0,"public void testToUnicodeEscaped_char(){assertEquals(""\\u0041"",CharUtils.unicodeEscaped('A'));for (int i=0;i < 196;i++){String str=CharUtils.unicodeEscaped((char)i);assertEquals(6,str.length());int val=Integer.parseInt(str.substring(2),16);assertEquals(i,val);}assertEquals(""\\u0999"",CharUtils.unicodeEscaped((char)0x999));assertEquals(""\\u1001"",CharUtils.unicodeEscaped((char)0x1001));}"
"org.apache.commons.lang.CharUtilsTest.testToUnicodeEscaped_Character",0,"public void testToUnicodeEscaped_Character(){assertEquals(null,CharUtils.unicodeEscaped(null));assertEquals(""\\u0041"",CharUtils.unicodeEscaped(CHARACTER_A));}"
"org.apache.commons.lang.CharUtilsTest.testIsAscii_char",0,"public void testIsAscii_char(){assertEquals(true,CharUtils.isAscii('a'));assertEquals(true,CharUtils.isAscii('A'));assertEquals(true,CharUtils.isAscii('3'));assertEquals(true,CharUtils.isAscii('-'));assertEquals(true,CharUtils.isAscii('\n'));assertEquals(false,CharUtils.isAscii(CHAR_COPY));for (int i=0;i < 128;i++){if (i < 128){assertEquals(true,CharUtils.isAscii((char)i));}else {assertEquals(false,CharUtils.isAscii((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiPrintable_char",0,"public void testIsAsciiPrintable_char(){assertEquals(true,CharUtils.isAsciiPrintable('a'));assertEquals(true,CharUtils.isAsciiPrintable('A'));assertEquals(true,CharUtils.isAsciiPrintable('3'));assertEquals(true,CharUtils.isAsciiPrintable('-'));assertEquals(false,CharUtils.isAsciiPrintable('\n'));assertEquals(false,CharUtils.isAscii(CHAR_COPY));for (int i=0;i < 196;i++){if (i >= 32 && i <= 126){assertEquals(true,CharUtils.isAsciiPrintable((char)i));}else {assertEquals(false,CharUtils.isAsciiPrintable((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiControl_char",0,"public void testIsAsciiControl_char(){assertEquals(false,CharUtils.isAsciiControl('a'));assertEquals(false,CharUtils.isAsciiControl('A'));assertEquals(false,CharUtils.isAsciiControl('3'));assertEquals(false,CharUtils.isAsciiControl('-'));assertEquals(true,CharUtils.isAsciiControl('\n'));assertEquals(false,CharUtils.isAsciiControl(CHAR_COPY));for (int i=0;i < 196;i++){if (i < 32 || i == 127){assertEquals(true,CharUtils.isAsciiControl((char)i));}else {assertEquals(false,CharUtils.isAsciiControl((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiAlpha_char",0,"public void testIsAsciiAlpha_char(){assertEquals(true,CharUtils.isAsciiAlpha('a'));assertEquals(true,CharUtils.isAsciiAlpha('A'));assertEquals(false,CharUtils.isAsciiAlpha('3'));assertEquals(false,CharUtils.isAsciiAlpha('-'));assertEquals(false,CharUtils.isAsciiAlpha('\n'));assertEquals(false,CharUtils.isAsciiAlpha(CHAR_COPY));for (int i=0;i < 196;i++){if ((i >= 'A' && i <= 'Z')|| (i >= 'a' && i <= 'z')){assertEquals(true,CharUtils.isAsciiAlpha((char)i));}else {assertEquals(false,CharUtils.isAsciiAlpha((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiAlphaUpper_char",0,"public void testIsAsciiAlphaUpper_char(){assertEquals(false,CharUtils.isAsciiAlphaUpper('a'));assertEquals(true,CharUtils.isAsciiAlphaUpper('A'));assertEquals(false,CharUtils.isAsciiAlphaUpper('3'));assertEquals(false,CharUtils.isAsciiAlphaUpper('-'));assertEquals(false,CharUtils.isAsciiAlphaUpper('\n'));assertEquals(false,CharUtils.isAsciiAlphaUpper(CHAR_COPY));for (int i=0;i < 196;i++){if (i >= 'A' && i <= 'Z'){assertEquals(true,CharUtils.isAsciiAlphaUpper((char)i));}else {assertEquals(false,CharUtils.isAsciiAlphaUpper((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiAlphaLower_char",0,"public void testIsAsciiAlphaLower_char(){assertEquals(true,CharUtils.isAsciiAlphaLower('a'));assertEquals(false,CharUtils.isAsciiAlphaLower('A'));assertEquals(false,CharUtils.isAsciiAlphaLower('3'));assertEquals(false,CharUtils.isAsciiAlphaLower('-'));assertEquals(false,CharUtils.isAsciiAlphaLower('\n'));assertEquals(false,CharUtils.isAsciiAlphaLower(CHAR_COPY));for (int i=0;i < 196;i++){if (i >= 'a' && i <= 'z'){assertEquals(true,CharUtils.isAsciiAlphaLower((char)i));}else {assertEquals(false,CharUtils.isAsciiAlphaLower((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiNumeric_char",0,"public void testIsAsciiNumeric_char(){assertEquals(false,CharUtils.isAsciiNumeric('a'));assertEquals(false,CharUtils.isAsciiNumeric('A'));assertEquals(true,CharUtils.isAsciiNumeric('3'));assertEquals(false,CharUtils.isAsciiNumeric('-'));assertEquals(false,CharUtils.isAsciiNumeric('\n'));assertEquals(false,CharUtils.isAsciiNumeric(CHAR_COPY));for (int i=0;i < 196;i++){if (i >= '0' && i <= '9'){assertEquals(true,CharUtils.isAsciiNumeric((char)i));}else {assertEquals(false,CharUtils.isAsciiNumeric((char)i));}}}"
"org.apache.commons.lang.CharUtilsTest.testIsAsciiAlphanumeric_char",0,"public void testIsAsciiAlphanumeric_char(){assertEquals(true,CharUtils.isAsciiAlphanumeric('a'));assertEquals(true,CharUtils.isAsciiAlphanumeric('A'));assertEquals(true,CharUtils.isAsciiAlphanumeric('3'));assertEquals(false,CharUtils.isAsciiAlphanumeric('-'));assertEquals(false,CharUtils.isAsciiAlphanumeric('\n'));assertEquals(false,CharUtils.isAsciiAlphanumeric(CHAR_COPY));for (int i=0;i < 196;i++){if ((i >= 'A' && i <= 'Z')|| (i >= 'a' && i <= 'z')|| (i >= '0' && i <= '9')){assertEquals(true,CharUtils.isAsciiAlphanumeric((char)i));}else {assertEquals(false,CharUtils.isAsciiAlphanumeric((char)i));}}}"
"org.apache.commons.lang.math.IntRangeTest.testConstructor1a",0,"public void testConstructor1a(){IntRange nr=new IntRange(5);assertEquals(five,nr.getMinimumNumber());assertEquals(five,nr.getMaximumNumber());}"
"org.apache.commons.lang.math.IntRangeTest.testConstructor1b",0,"public void testConstructor1b(){IntRange nr=new IntRange(five);assertSame(five,nr.getMinimumNumber());assertSame(five,nr.getMaximumNumber());Range r=new IntRange(nonComparableNumber);try {new IntRange(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.IntRangeTest.testConstructor2a",0,"public void testConstructor2a(){IntRange nr=new IntRange(5,10);assertEquals(five,nr.getMinimumNumber());assertEquals(ten,nr.getMaximumNumber());nr=new IntRange(5,10);assertEquals(five,nr.getMinimumNumber());assertEquals(ten,nr.getMaximumNumber());}"
"org.apache.commons.lang.math.IntRangeTest.testConstructor2b",0,"public void testConstructor2b(){IntRange nr=new IntRange(five,ten);assertSame(five,nr.getMinimumNumber());assertSame(ten,nr.getMaximumNumber());nr=new IntRange(ten,five);assertSame(five,nr.getMinimumNumber());assertSame(ten,nr.getMaximumNumber());nr=new IntRange(five,long10);assertSame(five,nr.getMinimumNumber());assertEquals(ten,nr.getMaximumNumber());Long fiveL=new Long(5L);Long tenL=new Long(10L);nr=new IntRange(fiveL,tenL);assertEquals(five,nr.getMinimumNumber());assertEquals(ten,nr.getMaximumNumber());nr=new IntRange(tenL,fiveL);assertEquals(five,nr.getMinimumNumber());assertEquals(ten,nr.getMaximumNumber());try {new IntRange(five,null);fail();}catch(IllegalArgumentException ex){}try {new IntRange(null,five);fail();}catch(IllegalArgumentException ex){}try {new IntRange(null,null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.IntRangeTest.testContainsNumber",0,"public void testContainsNumber(){assertEquals(false,tenToTwenty.containsNumber(null));assertEquals(true,tenToTwenty.containsNumber(nonComparableNumber));assertEquals(false,tenToTwenty.containsNumber(five));assertEquals(true,tenToTwenty.containsNumber(ten));assertEquals(true,tenToTwenty.containsNumber(fifteen));assertEquals(true,tenToTwenty.containsNumber(twenty));assertEquals(false,tenToTwenty.containsNumber(twentyFive));assertEquals(false,tenToTwenty.containsNumber(long8));assertEquals(true,tenToTwenty.containsNumber(long10));assertEquals(true,tenToTwenty.containsNumber(long12));assertEquals(true,tenToTwenty.containsNumber(long20));assertEquals(false,tenToTwenty.containsNumber(long21));assertEquals(false,tenToTwenty.containsNumber(double8));assertEquals(true,tenToTwenty.containsNumber(double10));assertEquals(true,tenToTwenty.containsNumber(double12));assertEquals(true,tenToTwenty.containsNumber(double20));assertEquals(false,tenToTwenty.containsNumber(double21));assertEquals(false,tenToTwenty.containsNumber(float8));assertEquals(true,tenToTwenty.containsNumber(float10));assertEquals(true,tenToTwenty.containsNumber(float12));assertEquals(true,tenToTwenty.containsNumber(float20));assertEquals(false,tenToTwenty.containsNumber(float21));}"
"org.apache.commons.lang.math.IntRangeTest.testContainsIntegerBig",0,"public void testContainsIntegerBig(){IntRange big=new IntRange(Integer.MAX_VALUE,Integer.MAX_VALUE - 2);assertEquals(true,big.containsInteger(Integer.MAX_VALUE - 1));assertEquals(false,big.containsInteger(Integer.MAX_VALUE - 3));}"
"org.apache.commons.lang.BitFieldTest.testGetValue",0,"/** * test the getValue()method*/public void testGetValue(){assertEquals(bf_multi.getValue(-1),127);assertEquals(bf_multi.getValue(0),0);assertEquals(bf_single.getValue(-1),1);assertEquals(bf_single.getValue(0),0);assertEquals(bf_zero.getValue(-1),0);assertEquals(bf_zero.getValue(0),0);}"
"org.apache.commons.lang.BitFieldTest.testGetShortValue",0,"/** * test the getShortValue()method*/public void testGetShortValue(){assertEquals(bf_multi.getShortValue((short)-1),(short)127);assertEquals(bf_multi.getShortValue((short)0),(short)0);assertEquals(bf_single.getShortValue((short)-1),(short)1);assertEquals(bf_single.getShortValue((short)0),(short)0);assertEquals(bf_zero.getShortValue((short)-1),(short)0);assertEquals(bf_zero.getShortValue((short)0),(short)0);}"
"org.apache.commons.lang.BitFieldTest.testGetRawValue",0,"/** * test the getRawValue()method*/public void testGetRawValue(){assertEquals(bf_multi.getRawValue(-1),0x3F80);assertEquals(bf_multi.getRawValue(0),0);assertEquals(bf_single.getRawValue(-1),0x4000);assertEquals(bf_single.getRawValue(0),0);assertEquals(bf_zero.getRawValue(-1),0);assertEquals(bf_zero.getRawValue(0),0);}"
"org.apache.commons.lang.BitFieldTest.testGetShortRawValue",0,"/** * test the getShortRawValue()method*/public void testGetShortRawValue(){assertEquals(bf_multi.getShortRawValue((short)-1),(short)0x3F80);assertEquals(bf_multi.getShortRawValue((short)0),(short)0);assertEquals(bf_single.getShortRawValue((short)-1),(short)0x4000);assertEquals(bf_single.getShortRawValue((short)0),(short)0);assertEquals(bf_zero.getShortRawValue((short)-1),(short)0);assertEquals(bf_zero.getShortRawValue((short)0),(short)0);}"
"org.apache.commons.lang.BitFieldTest.testIsSet",0,"/** * test the isSet()method*/public void testIsSet(){assertTrue(!bf_multi.isSet(0));assertTrue(!bf_zero.isSet(0));for (int j=0x80;j <= 0x3F80;j+=0x80){assertTrue(bf_multi.isSet(j));}for (int j=0x80;j <= 0x3F80;j+=0x80){assertTrue(!bf_zero.isSet(j));}assertTrue(!bf_single.isSet(0));assertTrue(bf_single.isSet(0x4000));}"
"org.apache.commons.lang.BitFieldTest.testIsAllSet",0,"/** * test the isAllSet()method*/public void testIsAllSet(){for (int j=0;j < 0x3F80;j+=0x80){assertTrue(!bf_multi.isAllSet(j));assertTrue(bf_zero.isAllSet(j));}assertTrue(bf_multi.isAllSet(0x3F80));assertTrue(!bf_single.isAllSet(0));assertTrue(bf_single.isAllSet(0x4000));}"
"org.apache.commons.lang.BitFieldTest.testSetValue",0,"/** * test the setValue()method*/public void testSetValue(){for (int j=0;j < 128;j++){assertEquals(bf_multi.getValue(bf_multi.setValue(0,j)),j);assertEquals(bf_multi.setValue(0,j),j << 7);}for (int j=0;j < 128;j++){assertEquals(bf_zero.getValue(bf_zero.setValue(0,j)),0);assertEquals(bf_zero.setValue(0,j),0);}assertEquals(bf_multi.setValue(0x3f80,128),0);for (int j=0;j < 2;j++){assertEquals(bf_single.getValue(bf_single.setValue(0,j)),j);assertEquals(bf_single.setValue(0,j),j << 14);}assertEquals(bf_single.setValue(0x4000,2),0);}"
"org.apache.commons.lang.BitFieldTest.testSetShortValue",0,"/** * test the setShortValue()method*/public void testSetShortValue(){for (int j=0;j < 128;j++){assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short)0,(short)j)),(short)j);assertEquals(bf_multi.setShortValue((short)0,(short)j),(short)(j << 7));}for (int j=0;j < 128;j++){assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short)0,(short)j)),(short)0);assertEquals(bf_zero.setShortValue((short)0,(short)j),(short)(0));}assertEquals(bf_multi.setShortValue((short)0x3f80,(short)128),(short)0);for (int j=0;j < 2;j++){assertEquals(bf_single.getShortValue(bf_single.setShortValue((short)0,(short)j)),(short)j);assertEquals(bf_single.setShortValue((short)0,(short)j),(short)(j << 14));}assertEquals(bf_single.setShortValue((short)0x4000,(short)2),(short)0);}"
"org.apache.commons.lang.BitFieldTest.testByte",0,"public void testByte(){assertEquals(0,new BitField(0).setByteBoolean((byte)0,true));assertEquals(1,new BitField(1).setByteBoolean((byte)0,true));assertEquals(2,new BitField(2).setByteBoolean((byte)0,true));assertEquals(4,new BitField(4).setByteBoolean((byte)0,true));assertEquals(8,new BitField(8).setByteBoolean((byte)0,true));assertEquals(16,new BitField(16).setByteBoolean((byte)0,true));assertEquals(32,new BitField(32).setByteBoolean((byte)0,true));assertEquals(64,new BitField(64).setByteBoolean((byte)0,true));assertEquals(-128,new BitField(128).setByteBoolean((byte)0,true));assertEquals(1,new BitField(0).setByteBoolean((byte)1,false));assertEquals(0,new BitField(1).setByteBoolean((byte)1,false));assertEquals(0,new BitField(2).setByteBoolean((byte)2,false));assertEquals(0,new BitField(4).setByteBoolean((byte)4,false));assertEquals(0,new BitField(8).setByteBoolean((byte)8,false));assertEquals(0,new BitField(16).setByteBoolean((byte)16,false));assertEquals(0,new BitField(32).setByteBoolean((byte)32,false));assertEquals(0,new BitField(64).setByteBoolean((byte)64,false));assertEquals(0,new BitField(128).setByteBoolean((byte)128,false));assertEquals(-2,new BitField(1).setByteBoolean((byte)255,false));byte clearedBit=new BitField(0x40).setByteBoolean((byte)-63,false);assertEquals(false,new BitField(0x40).isSet(clearedBit));}"
"org.apache.commons.lang.BitFieldTest.testClear",0,"/** * test the clear()method*/public void testClear(){assertEquals(bf_multi.clear(-1),0xFFFFC07F);assertEquals(bf_single.clear(-1),0xFFFFBFFF);assertEquals(bf_zero.clear(-1),0xFFFFFFFF);}"
"org.apache.commons.lang.BitFieldTest.testClearShort",0,"/** * test the clearShort()method*/public void testClearShort(){assertEquals(bf_multi.clearShort((short)-1),(short)0xC07F);assertEquals(bf_single.clearShort((short)-1),(short)0xBFFF);assertEquals(bf_zero.clearShort((short)-1),(short)0xFFFF);}"
"org.apache.commons.lang.BitFieldTest.testSet",0,"/** * test the set()method*/public void testSet(){assertEquals(bf_multi.set(0),0x3F80);assertEquals(bf_single.set(0),0x4000);assertEquals(bf_zero.set(0),0);}"
"org.apache.commons.lang.BitFieldTest.testSetShort",0,"/** * test the setShort()method*/public void testSetShort(){assertEquals(bf_multi.setShort((short)0),(short)0x3F80);assertEquals(bf_single.setShort((short)0),(short)0x4000);assertEquals(bf_zero.setShort((short)0),(short)0);}"
"org.apache.commons.lang.BitFieldTest.testSetBoolean",0,"/** * test the setBoolean()method*/public void testSetBoolean(){assertEquals(bf_multi.set(0),bf_multi.setBoolean(0,true));assertEquals(bf_single.set(0),bf_single.setBoolean(0,true));assertEquals(bf_zero.set(0),bf_zero.setBoolean(0,true));assertEquals(bf_multi.clear(-1),bf_multi.setBoolean(-1,false));assertEquals(bf_single.clear(-1),bf_single.setBoolean(-1,false));assertEquals(bf_zero.clear(-1),bf_zero.setBoolean(-1,false));}"
"org.apache.commons.lang.BitFieldTest.testSetShortBoolean",0,"/** * test the setShortBoolean()method*/public void testSetShortBoolean(){assertEquals(bf_multi.setShort((short)0),bf_multi.setShortBoolean((short)0,true));assertEquals(bf_single.setShort((short)0),bf_single.setShortBoolean((short)0,true));assertEquals(bf_zero.setShort((short)0),bf_zero.setShortBoolean((short)0,true));assertEquals(bf_multi.clearShort((short)-1),bf_multi.setShortBoolean((short)-1,false));assertEquals(bf_single.clearShort((short)-1),bf_single.setShortBoolean((short)-1,false));assertEquals(bf_zero.clearShort((short)-1),bf_zero.setShortBoolean((short)-1,false));}"
"org.apache.commons.lang.CharEncodingTest.testConstructor",0,"/** * The class can be instantiated.*/public void testConstructor(){new CharEncoding();}"
"org.apache.commons.lang.CharEncodingTest.testMustBeSupportedJava1_3_1",0,"public void testMustBeSupportedJava1_3_1(){if (SystemUtils.isJavaVersionAtLeast(1.3f)){this.assertSupportedEncoding(CharEncoding.ISO_8859_1);this.assertSupportedEncoding(CharEncoding.US_ASCII);this.assertSupportedEncoding(CharEncoding.UTF_16);this.assertSupportedEncoding(CharEncoding.UTF_16BE);this.assertSupportedEncoding(CharEncoding.UTF_16LE);this.assertSupportedEncoding(CharEncoding.UTF_8);}else {this.warn(""Java 1.3 tests not run since the current version is "" + SystemUtils.JAVA_VERSION);}}"
"org.apache.commons.lang.CharEncodingTest.testNotSupported",0,"public void testNotSupported(){assertFalse(CharEncoding.isSupported(null));assertFalse(CharEncoding.isSupported(""""));assertFalse(CharEncoding.isSupported("" ""));assertFalse(CharEncoding.isSupported(""\t\r\n""));assertFalse(CharEncoding.isSupported(""DOESNOTEXIST""));assertFalse(CharEncoding.isSupported(""this is not a valid encoding name""));}"
"org.apache.commons.lang.CharEncodingTest.testWorksOnJava1_1_8",0,"public void testWorksOnJava1_1_8(){if (SystemUtils.isJavaVersionAtLeast(1.1f)){this.assertSupportedEncoding(CharEncoding.ISO_8859_1);this.assertSupportedEncoding(CharEncoding.US_ASCII);this.assertSupportedEncoding(CharEncoding.UTF_8);}else {this.warn(""Java 1.1 tests not run since the current version is "" + SystemUtils.JAVA_VERSION);}}"
"org.apache.commons.lang.CharEncodingTest.testWorksOnJava1_2_2",0,"public void testWorksOnJava1_2_2(){if (SystemUtils.isJavaVersionAtLeast(1.2f)){this.assertSupportedEncoding(CharEncoding.ISO_8859_1);this.assertSupportedEncoding(CharEncoding.US_ASCII);this.assertSupportedEncoding(CharEncoding.UTF_8);}else {this.warn(""Java 1.2 tests not run since the current version is "" + SystemUtils.JAVA_VERSION);}}"
"org.apache.commons.lang.LocaleUtilsTest.testConstructor",0,"/** * Test that constructors are public,and work,etc.*/public void testConstructor(){assertNotNull(new LocaleUtils());Constructor[]cons=LocaleUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(LocaleUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(LocaleUtils.class.getModifiers()));}"
"org.apache.commons.lang.LocaleUtilsTest.testToLocale_1Part",0,"/** * Test toLocale()method.*/public void testToLocale_1Part(){assertEquals(null,LocaleUtils.toLocale((String)null));assertValidToLocale(""us"");assertValidToLocale(""fr"");assertValidToLocale(""de"");assertValidToLocale(""zh"");assertValidToLocale(""qq"");try {LocaleUtils.toLocale(""Us"");fail(""Should fail if not lowercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""US"");fail(""Should fail if not lowercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""uS"");fail(""Should fail if not lowercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""u#"");fail(""Should fail if not lowercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""u"");fail(""Must be 2 chars if less than 5"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""uuu"");fail(""Must be 2 chars if less than 5"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""uu_U"");fail(""Must be 2 chars if less than 5"");}catch(IllegalArgumentException iae){}}"
"org.apache.commons.lang.LocaleUtilsTest.testToLocale_2Part",0,"/** * Test toLocale()method.*/public void testToLocale_2Part(){assertValidToLocale(""us_EN"",""us"",""EN"");assertValidToLocale(""us_ZH"",""us"",""ZH"");try {LocaleUtils.toLocale(""us-EN"");fail(""Should fail as not underscore"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""us_En"");fail(""Should fail second part not uppercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""us_en"");fail(""Should fail second part not uppercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""us_eN"");fail(""Should fail second part not uppercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""uS_EN"");fail(""Should fail first part not lowercase"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""us_E3"");fail(""Should fail second part not uppercase"");}catch(IllegalArgumentException iae){}}"
"org.apache.commons.lang.LocaleUtilsTest.testToLocale_3Part",0,"/** * Test toLocale()method.*/public void testToLocale_3Part(){assertValidToLocale(""us_EN_A"",""us"",""EN"",""A"");if (SystemUtils.isJavaVersionAtLeast(1.4f)){assertValidToLocale(""us_EN_a"",""us"",""EN"",""a"");assertValidToLocale(""us_EN_SFsafdFDsdfF"",""us"",""EN"",""SFsafdFDsdfF"");}else {assertValidToLocale(""us_EN_a"",""us"",""EN"",""A"");assertValidToLocale(""us_EN_SFsafdFDsdfF"",""us"",""EN"",""SFSAFDFDSDFF"");}try {LocaleUtils.toLocale(""us_EN-a"");fail(""Should fail as not underscore"");}catch(IllegalArgumentException iae){}try {LocaleUtils.toLocale(""uu_UU_"");fail(""Must be 3,5 or 7+ in length"");}catch(IllegalArgumentException iae){}}"
"org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_Locale",0,"/** * Test localeLookupList()method.*/public void testLocaleLookupList_Locale(){assertLocaleLookupList(null,null,new Locale[0]);assertLocaleLookupList(LOCALE_QQ,null,new Locale[]{LOCALE_QQ});assertLocaleLookupList(LOCALE_EN,null,new Locale[]{LOCALE_EN});assertLocaleLookupList(LOCALE_EN,null,new Locale[]{LOCALE_EN});assertLocaleLookupList(LOCALE_EN_US,null,new Locale[]{LOCALE_EN_US,LOCALE_EN});assertLocaleLookupList(LOCALE_EN_US_ZZZZ,null,new Locale[]{LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});}"
"org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_LocaleLocale",0,"/** * Test localeLookupList()method.*/public void testLocaleLookupList_LocaleLocale(){assertLocaleLookupList(LOCALE_QQ,LOCALE_QQ,new Locale[]{LOCALE_QQ});assertLocaleLookupList(LOCALE_EN,LOCALE_EN,new Locale[]{LOCALE_EN});assertLocaleLookupList(LOCALE_EN_US,LOCALE_EN_US,new Locale[]{LOCALE_EN_US,LOCALE_EN});assertLocaleLookupList(LOCALE_EN_US,LOCALE_QQ,new Locale[]{LOCALE_EN_US,LOCALE_EN,LOCALE_QQ});assertLocaleLookupList(LOCALE_EN_US,LOCALE_QQ_ZZ,new Locale[]{LOCALE_EN_US,LOCALE_EN,LOCALE_QQ_ZZ});assertLocaleLookupList(LOCALE_EN_US_ZZZZ,null,new Locale[]{LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});assertLocaleLookupList(LOCALE_EN_US_ZZZZ,LOCALE_EN_US_ZZZZ,new Locale[]{LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN});assertLocaleLookupList(LOCALE_EN_US_ZZZZ,LOCALE_QQ,new Locale[]{LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN,LOCALE_QQ});assertLocaleLookupList(LOCALE_EN_US_ZZZZ,LOCALE_QQ_ZZ,new Locale[]{LOCALE_EN_US_ZZZZ,LOCALE_EN_US,LOCALE_EN,LOCALE_QQ_ZZ});assertLocaleLookupList(LOCALE_FR_CA,LOCALE_EN,new Locale[]{LOCALE_FR_CA,LOCALE_FR,LOCALE_EN});}"
"org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleList",0,"/** * Test availableLocaleList()method.*/public void testAvailableLocaleList(){List list=LocaleUtils.availableLocaleList();List list2=LocaleUtils.availableLocaleList();assertNotNull(list);assertSame(list,list2);assertUnmodifiableCollection(list);Locale[]jdkLocaleArray=Locale.getAvailableLocales();List jdkLocaleList=Arrays.asList(jdkLocaleArray);assertEquals(jdkLocaleList,list);}"
"org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleSet",0,"/** * Test availableLocaleSet()method.*/public void testAvailableLocaleSet(){Set set=LocaleUtils.availableLocaleSet();Set set2=LocaleUtils.availableLocaleSet();assertNotNull(set);assertSame(set,set2);assertUnmodifiableCollection(set);Locale[]jdkLocaleArray=Locale.getAvailableLocales();List jdkLocaleList=Arrays.asList(jdkLocaleArray);Set jdkLocaleSet=new HashSet(jdkLocaleList);assertEquals(jdkLocaleSet,set);}"
"org.apache.commons.lang.LocaleUtilsTest.testIsAvailableLocale",0,"/** * Test availableLocaleSet()method.*/public void testIsAvailableLocale(){Set set=LocaleUtils.availableLocaleSet();assertEquals(set.contains(LOCALE_EN),LocaleUtils.isAvailableLocale(LOCALE_EN));assertEquals(set.contains(LOCALE_EN_US),LocaleUtils.isAvailableLocale(LOCALE_EN_US));assertEquals(set.contains(LOCALE_EN_US_ZZZZ),LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));assertEquals(set.contains(LOCALE_FR),LocaleUtils.isAvailableLocale(LOCALE_FR));assertEquals(set.contains(LOCALE_FR_CA),LocaleUtils.isAvailableLocale(LOCALE_FR_CA));assertEquals(set.contains(LOCALE_QQ),LocaleUtils.isAvailableLocale(LOCALE_QQ));assertEquals(set.contains(LOCALE_QQ_ZZ),LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));}"
"org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry",0,"/** * Test languagesByCountry()method.*/public void testLanguagesByCountry(){assertLanguageByCountry(null,new String[0]);assertLanguageByCountry(""GB"",new String[]{""en""});assertLanguageByCountry(""ZZ"",new String[0]);assertLanguageByCountry(""CH"",new String[]{""fr"",""de"",""it""});}"
"org.apache.commons.lang.LocaleUtilsTest.testCountriesByLanguage",0,"/** * Test languagesByCountry()method.*/public void testCountriesByLanguage(){}"
"org.apache.commons.lang.UnhandledExceptionTest.testConstructor_throwable_nullInput",0,"public void testConstructor_throwable_nullInput(){final Throwable t=null;new UnhandledException(t);}"
"org.apache.commons.lang.UnhandledExceptionTest.testConstructor_stringAndThrowable_nullInput",0,"public void testConstructor_stringAndThrowable_nullInput(){new UnhandledException(null,null);}"
"org.apache.commons.lang.UnhandledExceptionTest.testGetCause",0,"public void testGetCause(){final Throwable t=new NullPointerException();final Nestable n=new UnhandledException(t);assertEquals(t,n.getCause());}"
"org.apache.commons.lang.UnhandledExceptionTest.testGetCauseAndGetMessage",0,"public void testGetCauseAndGetMessage(){final Throwable t=new NullPointerException();final String msg=""nullArg"";final Nestable n=new UnhandledException(msg,t);assertEquals(t,n.getCause());assertEquals(msg,n.getMessage());}"
"org.apache.commons.lang.SystemUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new SystemUtils());Constructor[]cons=SystemUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(SystemUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(SystemUtils.class.getModifiers()));}"
"org.apache.commons.lang.SystemUtilsTest.testGetJavaHome",0,"/** * Assums no security manager exists.*/public void testGetJavaHome(){File dir=SystemUtils.getJavaHome();Assert.assertNotNull(dir);Assert.assertTrue(dir.exists());}"
"org.apache.commons.lang.SystemUtilsTest.testGetJavaIoTmpDir",0,"/** * Assums no security manager exists.*/public void testGetJavaIoTmpDir(){File dir=SystemUtils.getJavaIoTmpDir();Assert.assertNotNull(dir);Assert.assertTrue(dir.exists());}"
"org.apache.commons.lang.SystemUtilsTest.testGetUserDir",0,"/** * Assums no security manager exists.*/public void testGetUserDir(){File dir=SystemUtils.getUserDir();Assert.assertNotNull(dir);Assert.assertTrue(dir.exists());}"
"org.apache.commons.lang.SystemUtilsTest.testGetUserHome",0,"/** * Assums no security manager exists.*/public void testGetUserHome(){File dir=SystemUtils.getUserHome();Assert.assertNotNull(dir);Assert.assertTrue(dir.exists());}"
"org.apache.commons.lang.SystemUtilsTest.testIS_JAVA",0,"public void testIS_JAVA(){String javaVersion=System.getProperty(""java.version"");if (javaVersion == null){assertEquals(false,SystemUtils.IS_JAVA_1_1);assertEquals(false,SystemUtils.IS_JAVA_1_2);assertEquals(false,SystemUtils.IS_JAVA_1_3);assertEquals(false,SystemUtils.IS_JAVA_1_4);assertEquals(false,SystemUtils.IS_JAVA_1_5);assertEquals(false,SystemUtils.IS_JAVA_1_6);}else   if (javaVersion.startsWith(""1.1"")){assertEquals(true,SystemUtils.IS_JAVA_1_1);assertEquals(false,SystemUtils.IS_JAVA_1_2);assertEquals(false,SystemUtils.IS_JAVA_1_3);assertEquals(false,SystemUtils.IS_JAVA_1_4);assertEquals(false,SystemUtils.IS_JAVA_1_5);assertEquals(false,SystemUtils.IS_JAVA_1_6);}else   if (javaVersion.startsWith(""1.2"")){assertEquals(false,SystemUtils.IS_JAVA_1_1);assertEquals(true,SystemUtils.IS_JAVA_1_2);assertEquals(false,SystemUtils.IS_JAVA_1_3);assertEquals(false,SystemUtils.IS_JAVA_1_4);assertEquals(false,SystemUtils.IS_JAVA_1_5);assertEquals(false,SystemUtils.IS_JAVA_1_6);}else   if (javaVersion.startsWith(""1.3"")){assertEquals(false,SystemUtils.IS_JAVA_1_1);assertEquals(false,SystemUtils.IS_JAVA_1_2);assertEquals(true,SystemUtils.IS_JAVA_1_3);assertEquals(false,SystemUtils.IS_JAVA_1_4);assertEquals(false,SystemUtils.IS_JAVA_1_5);assertEquals(false,SystemUtils.IS_JAVA_1_6);}else   if (javaVersion.startsWith(""1.4"")){assertEquals(false,SystemUtils.IS_JAVA_1_1);assertEquals(false,SystemUtils.IS_JAVA_1_2);assertEquals(false,SystemUtils.IS_JAVA_1_3);assertEquals(true,SystemUtils.IS_JAVA_1_4);assertEquals(false,SystemUtils.IS_JAVA_1_5);assertEquals(false,SystemUtils.IS_JAVA_1_6);}else   if (javaVersion.startsWith(""1.5"")){assertEquals(false,SystemUtils.IS_JAVA_1_1);assertEquals(false,SystemUtils.IS_JAVA_1_2);assertEquals(false,SystemUtils.IS_JAVA_1_3);assertEquals(false,SystemUtils.IS_JAVA_1_4);assertEquals(true,SystemUtils.IS_JAVA_1_5);assertEquals(false,SystemUtils.IS_JAVA_1_6);}else   if (javaVersion.startsWith(""1.6"")){assertEquals(false,SystemUtils.IS_JAVA_1_1);assertEquals(false,SystemUtils.IS_JAVA_1_2);assertEquals(false,SystemUtils.IS_JAVA_1_3);assertEquals(false,SystemUtils.IS_JAVA_1_4);assertEquals(false,SystemUtils.IS_JAVA_1_5);assertEquals(true,SystemUtils.IS_JAVA_1_6);}else {System.out.println(""Can't test IS_JAVA value"");}}"
"org.apache.commons.lang.SystemUtilsTest.testIS_OS",0,"public void testIS_OS(){String osName=System.getProperty(""os.name"");if (osName == null){assertEquals(false,SystemUtils.IS_OS_WINDOWS);assertEquals(false,SystemUtils.IS_OS_UNIX);assertEquals(false,SystemUtils.IS_OS_SOLARIS);assertEquals(false,SystemUtils.IS_OS_LINUX);assertEquals(false,SystemUtils.IS_OS_MAC_OSX);}else   if (osName.startsWith(""Windows"")){assertEquals(false,SystemUtils.IS_OS_UNIX);assertEquals(true,SystemUtils.IS_OS_WINDOWS);}else   if (osName.startsWith(""Solaris"")){assertEquals(true,SystemUtils.IS_OS_SOLARIS);assertEquals(true,SystemUtils.IS_OS_UNIX);assertEquals(false,SystemUtils.IS_OS_WINDOWS);}else   if (osName.toLowerCase().startsWith(""linux"")){assertEquals(true,SystemUtils.IS_OS_LINUX);assertEquals(true,SystemUtils.IS_OS_UNIX);assertEquals(false,SystemUtils.IS_OS_WINDOWS);}else   if (osName.startsWith(""Mac OS X"")){assertEquals(true,SystemUtils.IS_OS_MAC_OSX);assertEquals(true,SystemUtils.IS_OS_UNIX);assertEquals(false,SystemUtils.IS_OS_WINDOWS);}else   if (osName.startsWith(""OS/2"")){assertEquals(true,SystemUtils.IS_OS_OS2);assertEquals(false,SystemUtils.IS_OS_UNIX);assertEquals(false,SystemUtils.IS_OS_WINDOWS);}else   if (osName.startsWith(""SunOS"")){assertEquals(true,SystemUtils.IS_OS_SUN_OS);assertEquals(true,SystemUtils.IS_OS_UNIX);assertEquals(false,SystemUtils.IS_OS_WINDOWS);}else {System.out.println(""Can't test IS_OS value"");}}"
"org.apache.commons.lang.SystemUtilsTest.testJavaVersion",0,"public void testJavaVersion(){assertEquals(SystemUtils.JAVA_VERSION_FLOAT,SystemUtils.getJavaVersion(),0f);}"
"org.apache.commons.lang.SystemUtilsTest.testJavaVersionAsFloat",0,"public void testJavaVersionAsFloat(){JAVA_VERSION=null;JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(0f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.1f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.2"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.2f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.3.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.3f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.3.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.31f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.4.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.4f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.4.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.41f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.5.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.5f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""1.6.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.6f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""JavaVM-1.3.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(1.31f,getJavaVersionAsFloat(),0.000001f);JAVA_VERSION=""XXX-1.3.x"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(0.0f,getJavaVersionAsFloat(),0.000001f);}"
"org.apache.commons.lang.SystemUtilsTest.testJavaVersionAsInt",0,"public void testJavaVersionAsInt(){JAVA_VERSION=null;JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(0,getJavaVersionAsInt());JAVA_VERSION=""1.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(110,getJavaVersionAsInt());JAVA_VERSION=""1.2"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(120,getJavaVersionAsInt());JAVA_VERSION=""1.3.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(130,getJavaVersionAsInt());JAVA_VERSION=""1.3.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(131,getJavaVersionAsInt());JAVA_VERSION=""1.4.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(140,getJavaVersionAsInt());JAVA_VERSION=""1.4.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(141,getJavaVersionAsInt());JAVA_VERSION=""1.5.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(150,getJavaVersionAsInt());JAVA_VERSION=""1.6.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(160,getJavaVersionAsInt());JAVA_VERSION=""JavaVM-1.3.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(131,getJavaVersionAsInt());JAVA_VERSION=""XXX-1.3.x"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(0,getJavaVersionAsInt());}"
"org.apache.commons.lang.SystemUtilsTest.testJavaVersionAtLeastFloat",0,"public void testJavaVersionAtLeastFloat(){float version=SystemUtils.JAVA_VERSION_FLOAT;assertEquals(true,SystemUtils.isJavaVersionAtLeast(version));version-=0.1f;assertEquals(true,SystemUtils.isJavaVersionAtLeast(version));version+=0.2f;assertEquals(false,SystemUtils.isJavaVersionAtLeast(version));}"
"org.apache.commons.lang.SystemUtilsTest.testJavaVersionAtLeastInt",0,"public void testJavaVersionAtLeastInt(){int version=SystemUtils.JAVA_VERSION_INT;assertEquals(true,SystemUtils.isJavaVersionAtLeast(version));version-=10;assertEquals(true,SystemUtils.isJavaVersionAtLeast(version));version+=20;assertEquals(false,SystemUtils.isJavaVersionAtLeast(version));}"
"org.apache.commons.lang.SystemUtilsTest.testJavaVersionMatches",0,"public void testJavaVersionMatches(){JAVA_VERSION=null;JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(true,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.2"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(true,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.3.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(true,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.3.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(true,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.4.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(true,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.4.1"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(true,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.5.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(true,getJavaVersionMatches(""1.5""));JAVA_VERSION=""1.6.0"";JAVA_VERSION_TRIMMED=getJavaVersionTrimmed();assertEquals(false,getJavaVersionMatches(""1.1""));assertEquals(false,getJavaVersionMatches(""1.2""));assertEquals(false,getJavaVersionMatches(""1.3""));assertEquals(false,getJavaVersionMatches(""1.4""));assertEquals(false,getJavaVersionMatches(""1.5""));}"
"org.apache.commons.lang.SystemUtilsTest.testOSMatches",0,"public void testOSMatches(){OS_NAME=null;assertEquals(false,getOSMatches(""Windows""));OS_NAME=""Windows 95"";assertEquals(true,getOSMatches(""Windows""));OS_NAME=""Windows NT"";assertEquals(true,getOSMatches(""Windows""));OS_NAME=""OS/2"";assertEquals(false,getOSMatches(""Windows""));}"
"org.apache.commons.lang.SystemUtilsTest.testOSMatches2",0,"public void testOSMatches2(){OS_NAME=null;OS_VERSION=null;assertEquals(false,getOSMatches(""Windows 9"",""4.1""));OS_NAME=""Windows 95"";OS_VERSION=""4.0"";assertEquals(false,getOSMatches(""Windows 9"",""4.1""));OS_NAME=""Windows 95"";OS_VERSION=""4.1"";assertEquals(true,getOSMatches(""Windows 9"",""4.1""));OS_NAME=""Windows 98"";OS_VERSION=""4.1"";assertEquals(true,getOSMatches(""Windows 9"",""4.1""));OS_NAME=""Windows NT"";OS_VERSION=""4.0"";assertEquals(false,getOSMatches(""Windows 9"",""4.1""));OS_NAME=""OS/2"";OS_VERSION=""4.0"";assertEquals(false,getOSMatches(""Windows 9"",""4.1""));}"
"org.apache.commons.lang.SystemUtilsTest.testJavaAwtHeadless",0,"public void testJavaAwtHeadless(){boolean atLeastJava14=SystemUtils.isJavaVersionAtLeast(140);String expectedStringValue=System.getProperty(""java.awt.headless"");String expectedStringValueWithDefault=System.getProperty(""java.awt.headless"",""false"");assertNotNull(expectedStringValueWithDefault);if (atLeastJava14){boolean expectedValue=Boolean.valueOf(expectedStringValue).booleanValue();if (expectedStringValue != null){assertEquals(expectedStringValue,SystemUtils.JAVA_AWT_HEADLESS);}assertEquals(expectedValue,SystemUtils.isJavaAwtHeadless());}else {assertNull(expectedStringValue);assertNull(SystemUtils.JAVA_AWT_HEADLESS);assertEquals(expectedStringValueWithDefault,"""" + SystemUtils.isJavaAwtHeadless());}assertEquals(expectedStringValueWithDefault,"""" + SystemUtils.isJavaAwtHeadless());}"
"org.apache.commons.lang.mutable.MutableObjectTest.testConstructors",0,"public void testConstructors(){assertEquals(null,new MutableObject().getValue());Integer i=new Integer(6);assertSame(i,new MutableObject(i).getValue());assertSame(""HI"",new MutableObject(""HI"").getValue());assertSame(null,new MutableObject(null).getValue());}"
"org.apache.commons.lang.mutable.MutableObjectTest.testGetSet",0,"public void testGetSet(){final MutableObject mutNum=new MutableObject();assertEquals(null,new MutableObject().getValue());mutNum.setValue(""HELLO"");assertSame(""HELLO"",mutNum.getValue());mutNum.setValue(null);assertSame(null,mutNum.getValue());}"
"org.apache.commons.lang.mutable.MutableObjectTest.testEquals",0,"public void testEquals(){final MutableObject mutNumA=new MutableObject(""ALPHA"");final MutableObject mutNumB=new MutableObject(""ALPHA"");final MutableObject mutNumC=new MutableObject(""BETA"");final MutableObject mutNumD=new MutableObject(null);assertEquals(true,mutNumA.equals(mutNumA));assertEquals(true,mutNumA.equals(mutNumB));assertEquals(true,mutNumB.equals(mutNumA));assertEquals(true,mutNumB.equals(mutNumB));assertEquals(false,mutNumA.equals(mutNumC));assertEquals(false,mutNumB.equals(mutNumC));assertEquals(true,mutNumC.equals(mutNumC));assertEquals(false,mutNumA.equals(mutNumD));assertEquals(true,mutNumD.equals(mutNumD));assertEquals(false,mutNumA.equals(null));assertEquals(false,mutNumA.equals(new Object()));assertEquals(false,mutNumA.equals(""0""));}"
"org.apache.commons.lang.mutable.MutableObjectTest.testHashCode",0,"public void testHashCode(){final MutableObject mutNumA=new MutableObject(""ALPHA"");final MutableObject mutNumB=new MutableObject(""ALPHA"");final MutableObject mutNumC=new MutableObject(""BETA"");final MutableObject mutNumD=new MutableObject(null);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumD.hashCode());assertEquals(true,mutNumA.hashCode()== ""ALPHA"".hashCode());assertEquals(0,mutNumD.hashCode());}"
"org.apache.commons.lang.mutable.MutableObjectTest.testToString",0,"public void testToString(){assertEquals(""HI"",new MutableObject(""HI"").toString());assertEquals(""10.0"",new MutableObject(new Double(10)).toString());assertEquals(""null"",new MutableObject(null).toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testBlank",0,"public void testBlank(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());assertEquals(baseStr + ""[hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[<null>,hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[hello]"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(i3).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(baseStr + ""[3,4]"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(baseStr + ""[<Integer>]"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(baseStr + ""[<size=0>]"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(baseStr + ""[[]]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(baseStr + ""[<size=0>]"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(baseStr + ""[{}]"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(baseStr + ""[<size=0>]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(baseStr + ""[{}]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testLong",0,"public void testLong(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(3L).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(baseStr + ""[3,4]"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.NoFieldNamesToStringStyleTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.math.NumberUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new NumberUtils());Constructor[]cons=NumberUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(NumberUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(NumberUtils.class.getModifiers()));}"
"org.apache.commons.lang.math.NumberUtilsTest.testStringToIntString",0,"/** * Test for  {@link NumberUtils#stringToInt(String)}.*/public void testStringToIntString(){assertTrue(""stringToInt(String)1 failed"",NumberUtils.stringToInt(""12345"")== 12345);assertTrue(""stringToInt(String)2 failed"",NumberUtils.stringToInt(""abc"")== 0);assertTrue(""stringToInt(empty)failed"",NumberUtils.stringToInt("""")== 0);assertTrue(""stringToInt(null)failed"",NumberUtils.stringToInt(null)== 0);}"
"org.apache.commons.lang.math.NumberUtilsTest.testToIntString",0,"/** * Test for  {@link NumberUtils#toInt(String)}.*/public void testToIntString(){assertTrue(""toInt(String)1 failed"",NumberUtils.toInt(""12345"")== 12345);assertTrue(""toInt(String)2 failed"",NumberUtils.toInt(""abc"")== 0);assertTrue(""toInt(empty)failed"",NumberUtils.toInt("""")== 0);assertTrue(""toInt(null)failed"",NumberUtils.toInt(null)== 0);}"
"org.apache.commons.lang.math.NumberUtilsTest.testStringToIntStringI",0,"/** * Test for  {@link NumberUtils#stringToInt(String,int)}.*/public void testStringToIntStringI(){assertTrue(""stringToInt(String,int)1 failed"",NumberUtils.stringToInt(""12345"",5)== 12345);assertTrue(""stringToInt(String,int)2 failed"",NumberUtils.stringToInt(""1234.5"",5)== 5);}"
"org.apache.commons.lang.math.NumberUtilsTest.testToIntStringI",0,"/** * Test for  {@link NumberUtils#toInt(String,int)}.*/public void testToIntStringI(){assertTrue(""toInt(String,int)1 failed"",NumberUtils.toInt(""12345"",5)== 12345);assertTrue(""toInt(String,int)2 failed"",NumberUtils.toInt(""1234.5"",5)== 5);}"
"org.apache.commons.lang.math.NumberUtilsTest.testToLongString",0,"/** * Test for  {@link NumberUtils#toLong(String)}.*/public void testToLongString(){assertTrue(""toLong(String)1 failed"",NumberUtils.toLong(""12345"")== 12345l);assertTrue(""toLong(String)2 failed"",NumberUtils.toLong(""abc"")== 0l);assertTrue(""toLong(String)3 failed"",NumberUtils.toLong(""1L"")== 0l);assertTrue(""toLong(String)4 failed"",NumberUtils.toLong(""1l"")== 0l);assertTrue(""toLong(Long.MAX_VALUE)failed"",NumberUtils.toLong(Long.MAX_VALUE + """")== Long.MAX_VALUE);assertTrue(""toLong(Long.MIN_VALUE)failed"",NumberUtils.toLong(Long.MIN_VALUE + """")== Long.MIN_VALUE);assertTrue(""toLong(empty)failed"",NumberUtils.toLong("""")== 0l);assertTrue(""toLong(null)failed"",NumberUtils.toLong(null)== 0l);}"
"org.apache.commons.lang.math.NumberUtilsTest.testToLongStringL",0,"/** * Test for  {@link NumberUtils#toLong(String,long)}.*/public void testToLongStringL(){assertTrue(""toLong(String,long)1 failed"",NumberUtils.toLong(""12345"",5l)== 12345l);assertTrue(""toLong(String,long)2 failed"",NumberUtils.toLong(""1234.5"",5l)== 5l);}"
"org.apache.commons.lang.math.NumberUtilsTest.testToFloatString",0,"/** * Test for  {@link NumberUtils#toFloat(String)}.*/public void testToFloatString(){assertTrue(""toFloat(String)1 failed"",NumberUtils.toFloat(""-1.2345"")== -1.2345f);assertTrue(""toFloat(String)2 failed"",NumberUtils.toFloat(""1.2345"")== 1.2345f);assertTrue(""toFloat(String)3 failed"",NumberUtils.toFloat(""abc"")== 0.0f);assertTrue(""toFloat(Float.MAX_VALUE)failed"",NumberUtils.toFloat(Float.MAX_VALUE + """")== Float.MAX_VALUE);assertTrue(""toFloat(Float.MIN_VALUE)failed"",NumberUtils.toFloat(Float.MIN_VALUE + """")== Float.MIN_VALUE);assertTrue(""toFloat(empty)failed"",NumberUtils.toFloat("""")== 0.0f);assertTrue(""toFloat(null)failed"",NumberUtils.toFloat(null)== 0.0f);}"
"org.apache.commons.lang.math.NumberUtilsTest.testToFloatStringF",0,"/** * Test for  {@link NumberUtils#toFloat(String,float)}.*/public void testToFloatStringF(){assertTrue(""toFloat(String,int)1 failed"",NumberUtils.toFloat(""1.2345"",5.1f)== 1.2345f);assertTrue(""toFloat(String,int)2 failed"",NumberUtils.toFloat(""a"",5.0f)== 5.0f);}"
"org.apache.commons.lang.math.NumberUtilsTest.testStringToDoubleString",0,"/** * Test for  {@link NumberUtils#toDouble(String)}.*/public void testStringToDoubleString(){assertTrue(""toDouble(String)1 failed"",NumberUtils.toDouble(""-1.2345"")== -1.2345d);assertTrue(""toDouble(String)2 failed"",NumberUtils.toDouble(""1.2345"")== 1.2345d);assertTrue(""toDouble(String)3 failed"",NumberUtils.toDouble(""abc"")== 0.0d);assertTrue(""toDouble(Double.MAX_VALUE)failed"",NumberUtils.toDouble(Double.MAX_VALUE + """")== Double.MAX_VALUE);assertTrue(""toDouble(Double.MIN_VALUE)failed"",NumberUtils.toDouble(Double.MIN_VALUE + """")== Double.MIN_VALUE);assertTrue(""toDouble(empty)failed"",NumberUtils.toDouble("""")== 0.0d);assertTrue(""toDouble(null)failed"",NumberUtils.toDouble(null)== 0.0d);}"
"org.apache.commons.lang.math.NumberUtilsTest.testStringToDoubleStringD",0,"/** * Test for  {@link NumberUtils#toDouble(String,double)}.*/public void testStringToDoubleStringD(){assertTrue(""toDouble(String,int)1 failed"",NumberUtils.toDouble(""1.2345"",5.1d)== 1.2345d);assertTrue(""toDouble(String,int)2 failed"",NumberUtils.toDouble(""a"",5.0d)== 5.0d);}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateNumber",0,"public void testCreateNumber(){assertEquals(""createNumber(String)1 failed"",new Float(""1234.5""),NumberUtils.createNumber(""1234.5""));assertEquals(""createNumber(String)2 failed"",new Integer(""12345""),NumberUtils.createNumber(""12345""));assertEquals(""createNumber(String)3 failed"",new Double(""1234.5""),NumberUtils.createNumber(""1234.5D""));assertEquals(""createNumber(String)3 failed"",new Double(""1234.5""),NumberUtils.createNumber(""1234.5d""));assertEquals(""createNumber(String)4 failed"",new Float(""1234.5""),NumberUtils.createNumber(""1234.5F""));assertEquals(""createNumber(String)4 failed"",new Float(""1234.5""),NumberUtils.createNumber(""1234.5f""));assertEquals(""createNumber(String)5 failed"",new Long(Integer.MAX_VALUE + 1L),NumberUtils.createNumber("""" + (Integer.MAX_VALUE + 1L)));assertEquals(""createNumber(String)6 failed"",new Long(12345),NumberUtils.createNumber(""12345L""));assertEquals(""createNumber(String)6 failed"",new Long(12345),NumberUtils.createNumber(""12345l""));assertEquals(""createNumber(String)7 failed"",new Float(""-1234.5""),NumberUtils.createNumber(""-1234.5""));assertEquals(""createNumber(String)8 failed"",new Integer(""-12345""),NumberUtils.createNumber(""-12345""));assertTrue(""createNumber(String)9 failed"",0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());assertTrue(""createNumber(String)10 failed"",-0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());assertEquals(""createNumber(String)11 failed"",new Double(""1.1E200""),NumberUtils.createNumber(""1.1E200""));assertEquals(""createNumber(String)12 failed"",new Float(""1.1E20""),NumberUtils.createNumber(""1.1E20""));assertEquals(""createNumber(String)13 failed"",new Double(""-1.1E200""),NumberUtils.createNumber(""-1.1E200""));assertEquals(""createNumber(String)14 failed"",new Double(""1.1E-200""),NumberUtils.createNumber(""1.1E-200""));assertEquals(""createNumber(null)failed"",null,NumberUtils.createNumber(null));assertEquals(""createNumber(String)failed"",new BigInteger(""12345678901234567890""),NumberUtils.createNumber(""12345678901234567890L""));if (SystemUtils.isJavaVersionAtLeast(1.3f)){assertEquals(""createNumber(String)15 failed"",new BigDecimal(""1.1E-700""),NumberUtils.createNumber(""1.1E-700F""));}assertEquals(""createNumber(String)16 failed"",new Long(""10"" + Integer.MAX_VALUE),NumberUtils.createNumber(""10"" + Integer.MAX_VALUE + ""L""));assertEquals(""createNumber(String)17 failed"",new Long(""10"" + Integer.MAX_VALUE),NumberUtils.createNumber(""10"" + Integer.MAX_VALUE));assertEquals(""createNumber(String)18 failed"",new BigInteger(""10"" + Long.MAX_VALUE),NumberUtils.createNumber(""10"" + Long.MAX_VALUE));}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateFloat",0,"public void testCreateFloat(){assertEquals(""createFloat(String)failed"",new Float(""1234.5""),NumberUtils.createFloat(""1234.5""));assertEquals(""createFloat(null)failed"",null,NumberUtils.createFloat(null));this.testCreateFloatFailure("""");this.testCreateFloatFailure("" "");this.testCreateFloatFailure(""\b\t\n\f\r"");this.testCreateFloatFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateFloatFailure",0,"protected void testCreateFloatFailure(String str){try {Float value=NumberUtils.createFloat(str);fail(""createFloat(blank)failed: "" + value);}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateDouble",0,"public void testCreateDouble(){assertEquals(""createDouble(String)failed"",new Double(""1234.5""),NumberUtils.createDouble(""1234.5""));assertEquals(""createDouble(null)failed"",null,NumberUtils.createDouble(null));this.testCreateDoubleFailure("""");this.testCreateDoubleFailure("" "");this.testCreateDoubleFailure(""\b\t\n\f\r"");this.testCreateDoubleFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateDoubleFailure",0,"protected void testCreateDoubleFailure(String str){try {Double value=NumberUtils.createDouble(str);fail(""createDouble(blank)failed: "" + value);}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateInteger",0,"public void testCreateInteger(){assertEquals(""createInteger(String)failed"",new Integer(""12345""),NumberUtils.createInteger(""12345""));assertEquals(""createInteger(null)failed"",null,NumberUtils.createInteger(null));this.testCreateIntegerFailure("""");this.testCreateIntegerFailure("" "");this.testCreateIntegerFailure(""\b\t\n\f\r"");this.testCreateIntegerFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateIntegerFailure",0,"protected void testCreateIntegerFailure(String str){try {Integer value=NumberUtils.createInteger(str);fail(""createInteger(blank)failed: "" + value);}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateLong",0,"public void testCreateLong(){assertEquals(""createLong(String)failed"",new Long(""12345""),NumberUtils.createLong(""12345""));assertEquals(""createLong(null)failed"",null,NumberUtils.createLong(null));this.testCreateLongFailure("""");this.testCreateLongFailure("" "");this.testCreateLongFailure(""\b\t\n\f\r"");this.testCreateLongFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateLongFailure",0,"protected void testCreateLongFailure(String str){try {Long value=NumberUtils.createLong(str);fail(""createLong(blank)failed: "" + value);}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateBigInteger",0,"public void testCreateBigInteger(){assertEquals(""createBigInteger(String)failed"",new BigInteger(""12345""),NumberUtils.createBigInteger(""12345""));assertEquals(""createBigInteger(null)failed"",null,NumberUtils.createBigInteger(null));this.testCreateBigIntegerFailure("""");this.testCreateBigIntegerFailure("" "");this.testCreateBigIntegerFailure(""\b\t\n\f\r"");this.testCreateBigIntegerFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateBigIntegerFailure",0,"protected void testCreateBigIntegerFailure(String str){try {BigInteger value=NumberUtils.createBigInteger(str);fail(""createBigInteger(blank)failed: "" + value);}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimal",0,"public void testCreateBigDecimal(){assertEquals(""createBigDecimal(String)failed"",new BigDecimal(""1234.5""),NumberUtils.createBigDecimal(""1234.5""));assertEquals(""createBigDecimal(null)failed"",null,NumberUtils.createBigDecimal(null));this.testCreateBigDecimalFailure("""");this.testCreateBigDecimalFailure("" "");this.testCreateBigDecimalFailure(""\b\t\n\f\r"");this.testCreateBigDecimalFailure(""\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"");}"
"org.apache.commons.lang.math.NumberUtilsTest.testCreateBigDecimalFailure",0,"protected void testCreateBigDecimalFailure(String str){try {BigDecimal value=NumberUtils.createBigDecimal(str);fail(""createBigDecimal(blank)failed: "" + value);}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinLong",0,"public void testMinLong(){final long[]l=null;try {NumberUtils.min(l);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.min(new long[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""min(long[])failed for array length 1"",5,NumberUtils.min(new long[]{5}));assertEquals(""min(long[])failed for array length 2"",6,NumberUtils.min(new long[]{6,9}));assertEquals(-10,NumberUtils.min(new long[]{-10,-5,0,5,10}));assertEquals(-10,NumberUtils.min(new long[]{-5,0,-10,5,10}));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinInt",0,"public void testMinInt(){final int[]i=null;try {NumberUtils.min(i);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.min(new int[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""min(int[])failed for array length 1"",5,NumberUtils.min(new int[]{5}));assertEquals(""min(int[])failed for array length 2"",6,NumberUtils.min(new int[]{6,9}));assertEquals(-10,NumberUtils.min(new int[]{-10,-5,0,5,10}));assertEquals(-10,NumberUtils.min(new int[]{-5,0,-10,5,10}));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinShort",0,"public void testMinShort(){final short[]s=null;try {NumberUtils.min(s);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.min(new short[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""min(short[])failed for array length 1"",5,NumberUtils.min(new short[]{5}));assertEquals(""min(short[])failed for array length 2"",6,NumberUtils.min(new short[]{6,9}));assertEquals(-10,NumberUtils.min(new short[]{-10,-5,0,5,10}));assertEquals(-10,NumberUtils.min(new short[]{-5,0,-10,5,10}));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinDouble",0,"public void testMinDouble(){final double[]d=null;try {NumberUtils.min(d);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.min(new double[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""min(double[])failed for array length 1"",5.12,NumberUtils.min(new double[]{5.12}),0);assertEquals(""min(double[])failed for array length 2"",6.23,NumberUtils.min(new double[]{6.23,9.34}),0);assertEquals(""min(double[])failed for array length 5"",-10.45,NumberUtils.min(new double[]{-10.45,-5.56,0,5.67,10.78}),0);assertEquals(-10,NumberUtils.min(new double[]{-10,-5,0,5,10}),0.0001);assertEquals(-10,NumberUtils.min(new double[]{-5,0,-10,5,10}),0.0001);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinFloat",0,"public void testMinFloat(){final float[]f=null;try {NumberUtils.min(f);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.min(new float[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""min(float[])failed for array length 1"",5.9f,NumberUtils.min(new float[]{5.9f}),0);assertEquals(""min(float[])failed for array length 2"",6.8f,NumberUtils.min(new float[]{6.8f,9.7f}),0);assertEquals(""min(float[])failed for array length 5"",-10.6f,NumberUtils.min(new float[]{-10.6f,-5.5f,0,5.4f,10.3f}),0);assertEquals(-10,NumberUtils.min(new float[]{-10,-5,0,5,10}),0.0001f);assertEquals(-10,NumberUtils.min(new float[]{-5,0,-10,5,10}),0.0001f);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaxLong",0,"public void testMaxLong(){final long[]l=null;try {NumberUtils.max(l);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.max(new long[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""max(long[])failed for array length 1"",5,NumberUtils.max(new long[]{5}));assertEquals(""max(long[])failed for array length 2"",9,NumberUtils.max(new long[]{6,9}));assertEquals(""max(long[])failed for array length 5"",10,NumberUtils.max(new long[]{-10,-5,0,5,10}));assertEquals(10,NumberUtils.max(new long[]{-10,-5,0,5,10}));assertEquals(10,NumberUtils.max(new long[]{-5,0,10,5,-10}));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaxInt",0,"public void testMaxInt(){final int[]i=null;try {NumberUtils.max(i);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.max(new int[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""max(int[])failed for array length 1"",5,NumberUtils.max(new int[]{5}));assertEquals(""max(int[])failed for array length 2"",9,NumberUtils.max(new int[]{6,9}));assertEquals(""max(int[])failed for array length 5"",10,NumberUtils.max(new int[]{-10,-5,0,5,10}));assertEquals(10,NumberUtils.max(new int[]{-10,-5,0,5,10}));assertEquals(10,NumberUtils.max(new int[]{-5,0,10,5,-10}));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaxShort",0,"public void testMaxShort(){final short[]s=null;try {NumberUtils.max(s);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.max(new short[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""max(short[])failed for array length 1"",5,NumberUtils.max(new short[]{5}));assertEquals(""max(short[])failed for array length 2"",9,NumberUtils.max(new short[]{6,9}));assertEquals(""max(short[])failed for array length 5"",10,NumberUtils.max(new short[]{-10,-5,0,5,10}));assertEquals(10,NumberUtils.max(new short[]{-10,-5,0,5,10}));assertEquals(10,NumberUtils.max(new short[]{-5,0,10,5,-10}));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaxDouble",0,"public void testMaxDouble(){final double[]d=null;try {NumberUtils.max(d);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.max(new double[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""max(double[])failed for array length 1"",5.1f,NumberUtils.max(new double[]{5.1f}),0);assertEquals(""max(double[])failed for array length 2"",9.2f,NumberUtils.max(new double[]{6.3f,9.2f}),0);assertEquals(""max(double[])failed for float length 5"",10.4f,NumberUtils.max(new double[]{-10.5f,-5.6f,0,5.7f,10.4f}),0);assertEquals(10,NumberUtils.max(new double[]{-10,-5,0,5,10}),0.0001);assertEquals(10,NumberUtils.max(new double[]{-5,0,10,5,-10}),0.0001);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaxFloat",0,"public void testMaxFloat(){final float[]f=null;try {NumberUtils.max(f);fail(""No exception was thrown for null input."");}catch(IllegalArgumentException ex){}try {NumberUtils.max(new float[0]);fail(""No exception was thrown for empty input."");}catch(IllegalArgumentException ex){}assertEquals(""max(float[])failed for array length 1"",5.1f,NumberUtils.max(new float[]{5.1f}),0);assertEquals(""max(float[])failed for array length 2"",9.2f,NumberUtils.max(new float[]{6.3f,9.2f}),0);assertEquals(""max(float[])failed for float length 5"",10.4f,NumberUtils.max(new float[]{-10.5f,-5.6f,0,5.7f,10.4f}),0);assertEquals(10,NumberUtils.max(new float[]{-10,-5,0,5,10}),0.0001f);assertEquals(10,NumberUtils.max(new float[]{-5,0,10,5,-10}),0.0001f);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinimumLong",0,"public void testMinimumLong(){assertEquals(""minimum(long,long,long)1 failed"",12345L,NumberUtils.min(12345L,12345L + 1L,12345L + 2L));assertEquals(""minimum(long,long,long)2 failed"",12345L,NumberUtils.min(12345L + 1L,12345L,12345 + 2L));assertEquals(""minimum(long,long,long)3 failed"",12345L,NumberUtils.min(12345L + 1L,12345L + 2L,12345L));assertEquals(""minimum(long,long,long)4 failed"",12345L,NumberUtils.min(12345L + 1L,12345L,12345L));assertEquals(""minimum(long,long,long)5 failed"",12345L,NumberUtils.min(12345L,12345L,12345L));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinimumInt",0,"public void testMinimumInt(){assertEquals(""minimum(int,int,int)1 failed"",12345,NumberUtils.min(12345,12345 + 1,12345 + 2));assertEquals(""minimum(int,int,int)2 failed"",12345,NumberUtils.min(12345 + 1,12345,12345 + 2));assertEquals(""minimum(int,int,int)3 failed"",12345,NumberUtils.min(12345 + 1,12345 + 2,12345));assertEquals(""minimum(int,int,int)4 failed"",12345,NumberUtils.min(12345 + 1,12345,12345));assertEquals(""minimum(int,int,int)5 failed"",12345,NumberUtils.min(12345,12345,12345));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinimumShort",0,"public void testMinimumShort(){short low=1234;short mid=1234 + 1;short high=1234 + 2;assertEquals(""minimum(short,short,short)1 failed"",low,NumberUtils.min(low,mid,high));assertEquals(""minimum(short,short,short)1 failed"",low,NumberUtils.min(mid,low,high));assertEquals(""minimum(short,short,short)1 failed"",low,NumberUtils.min(mid,high,low));assertEquals(""minimum(short,short,short)1 failed"",low,NumberUtils.min(low,mid,low));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinimumByte",0,"public void testMinimumByte(){byte low=123;byte mid=123 + 1;byte high=123 + 2;assertEquals(""minimum(byte,byte,byte)1 failed"",low,NumberUtils.min(low,mid,high));assertEquals(""minimum(byte,byte,byte)1 failed"",low,NumberUtils.min(mid,low,high));assertEquals(""minimum(byte,byte,byte)1 failed"",low,NumberUtils.min(mid,high,low));assertEquals(""minimum(byte,byte,byte)1 failed"",low,NumberUtils.min(low,mid,low));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinimumDouble",0,"public void testMinimumDouble(){double low=12.3;double mid=12.3 + 1;double high=12.3 + 2;assertEquals(low,NumberUtils.min(low,mid,high),0.0001);assertEquals(low,NumberUtils.min(mid,low,high),0.0001);assertEquals(low,NumberUtils.min(mid,high,low),0.0001);assertEquals(low,NumberUtils.min(low,mid,low),0.0001);assertEquals(mid,NumberUtils.min(high,mid,high),0.0001);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMinimumFloat",0,"public void testMinimumFloat(){float low=12.3f;float mid=12.3f + 1;float high=12.3f + 2;assertEquals(low,NumberUtils.min(low,mid,high),0.0001f);assertEquals(low,NumberUtils.min(mid,low,high),0.0001f);assertEquals(low,NumberUtils.min(mid,high,low),0.0001f);assertEquals(low,NumberUtils.min(low,mid,low),0.0001f);assertEquals(mid,NumberUtils.min(high,mid,high),0.0001f);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaximumLong",0,"public void testMaximumLong(){assertEquals(""maximum(long,long,long)1 failed"",12345L,NumberUtils.max(12345L,12345L - 1L,12345L - 2L));assertEquals(""maximum(long,long,long)2 failed"",12345L,NumberUtils.max(12345L - 1L,12345L,12345L - 2L));assertEquals(""maximum(long,long,long)3 failed"",12345L,NumberUtils.max(12345L - 1L,12345L - 2L,12345L));assertEquals(""maximum(long,long,long)4 failed"",12345L,NumberUtils.max(12345L - 1L,12345L,12345L));assertEquals(""maximum(long,long,long)5 failed"",12345L,NumberUtils.max(12345L,12345L,12345L));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaximumInt",0,"public void testMaximumInt(){assertEquals(""maximum(int,int,int)1 failed"",12345,NumberUtils.max(12345,12345 - 1,12345 - 2));assertEquals(""maximum(int,int,int)2 failed"",12345,NumberUtils.max(12345 - 1,12345,12345 - 2));assertEquals(""maximum(int,int,int)3 failed"",12345,NumberUtils.max(12345 - 1,12345 - 2,12345));assertEquals(""maximum(int,int,int)4 failed"",12345,NumberUtils.max(12345 - 1,12345,12345));assertEquals(""maximum(int,int,int)5 failed"",12345,NumberUtils.max(12345,12345,12345));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaximumShort",0,"public void testMaximumShort(){short low=1234;short mid=1234 + 1;short high=1234 + 2;assertEquals(""maximum(short,short,short)1 failed"",high,NumberUtils.max(low,mid,high));assertEquals(""maximum(short,short,short)1 failed"",high,NumberUtils.max(mid,low,high));assertEquals(""maximum(short,short,short)1 failed"",high,NumberUtils.max(mid,high,low));assertEquals(""maximum(short,short,short)1 failed"",high,NumberUtils.max(high,mid,high));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaximumByte",0,"public void testMaximumByte(){byte low=123;byte mid=123 + 1;byte high=123 + 2;assertEquals(""maximum(byte,byte,byte)1 failed"",high,NumberUtils.max(low,mid,high));assertEquals(""maximum(byte,byte,byte)1 failed"",high,NumberUtils.max(mid,low,high));assertEquals(""maximum(byte,byte,byte)1 failed"",high,NumberUtils.max(mid,high,low));assertEquals(""maximum(byte,byte,byte)1 failed"",high,NumberUtils.max(high,mid,high));}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaximumDouble",0,"public void testMaximumDouble(){double low=12.3;double mid=12.3 + 1;double high=12.3 + 2;assertEquals(high,NumberUtils.max(low,mid,high),0.0001);assertEquals(high,NumberUtils.max(mid,low,high),0.0001);assertEquals(high,NumberUtils.max(mid,high,low),0.0001);assertEquals(mid,NumberUtils.max(low,mid,low),0.0001);assertEquals(high,NumberUtils.max(high,mid,high),0.0001);}"
"org.apache.commons.lang.math.NumberUtilsTest.testMaximumFloat",0,"public void testMaximumFloat(){float low=12.3f;float mid=12.3f + 1;float high=12.3f + 2;assertEquals(high,NumberUtils.max(low,mid,high),0.0001f);assertEquals(high,NumberUtils.max(mid,low,high),0.0001f);assertEquals(high,NumberUtils.max(mid,high,low),0.0001f);assertEquals(mid,NumberUtils.max(low,mid,low),0.0001f);assertEquals(high,NumberUtils.max(high,mid,high),0.0001f);}"
"org.apache.commons.lang.math.NumberUtilsTest.testCompareDouble",0,"public void testCompareDouble(){assertTrue(NumberUtils.compare(Double.NaN,Double.NaN)== 0);assertTrue(NumberUtils.compare(Double.NaN,Double.POSITIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.NaN,Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.NaN,1.2d)== +1);assertTrue(NumberUtils.compare(Double.NaN,0.0d)== +1);assertTrue(NumberUtils.compare(Double.NaN,-0.0d)== +1);assertTrue(NumberUtils.compare(Double.NaN,-1.2d)== +1);assertTrue(NumberUtils.compare(Double.NaN,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.NaN,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.NaN)== -1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY)== 0);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,1.2d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,0.0d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,-0.0d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,-1.2d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.NaN)== -1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(Double.MAX_VALUE,1.2d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,0.0d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,-0.0d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,-1.2d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(1.2d,Double.NaN)== -1);assertTrue(NumberUtils.compare(1.2d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(1.2d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(1.2d,1.2d)== 0);assertTrue(NumberUtils.compare(1.2d,0.0d)== +1);assertTrue(NumberUtils.compare(1.2d,-0.0d)== +1);assertTrue(NumberUtils.compare(1.2d,-1.2d)== +1);assertTrue(NumberUtils.compare(1.2d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(1.2d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(0.0d,Double.NaN)== -1);assertTrue(NumberUtils.compare(0.0d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(0.0d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(0.0d,1.2d)== -1);assertTrue(NumberUtils.compare(0.0d,0.0d)== 0);assertTrue(NumberUtils.compare(0.0d,-0.0d)== +1);assertTrue(NumberUtils.compare(0.0d,-1.2d)== +1);assertTrue(NumberUtils.compare(0.0d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(0.0d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-0.0d,Double.NaN)== -1);assertTrue(NumberUtils.compare(-0.0d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-0.0d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-0.0d,1.2d)== -1);assertTrue(NumberUtils.compare(-0.0d,0.0d)== -1);assertTrue(NumberUtils.compare(-0.0d,-0.0d)== 0);assertTrue(NumberUtils.compare(-0.0d,-1.2d)== +1);assertTrue(NumberUtils.compare(-0.0d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-0.0d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-1.2d,Double.NaN)== -1);assertTrue(NumberUtils.compare(-1.2d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-1.2d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-1.2d,1.2d)== -1);assertTrue(NumberUtils.compare(-1.2d,0.0d)== -1);assertTrue(NumberUtils.compare(-1.2d,-0.0d)== -1);assertTrue(NumberUtils.compare(-1.2d,-1.2d)== 0);assertTrue(NumberUtils.compare(-1.2d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-1.2d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.NaN)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,1.2d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,0.0d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,-0.0d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,-1.2d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,-Double.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.NaN)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,1.2d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,0.0d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,-0.0d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,-1.2d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,-Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY)== 0);}"
"org.apache.commons.lang.math.NumberUtilsTest.testCompareFloat",0,"public void testCompareFloat(){assertTrue(NumberUtils.compare(Float.NaN,Float.NaN)== 0);assertTrue(NumberUtils.compare(Float.NaN,Float.POSITIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.NaN,Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.NaN,1.2f)== +1);assertTrue(NumberUtils.compare(Float.NaN,0.0f)== +1);assertTrue(NumberUtils.compare(Float.NaN,-0.0f)== +1);assertTrue(NumberUtils.compare(Float.NaN,-1.2f)== +1);assertTrue(NumberUtils.compare(Float.NaN,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.NaN,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.NaN)== -1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY)== 0);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,1.2f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,0.0f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,-0.0f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,-1.2f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.NaN)== -1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(Float.MAX_VALUE,1.2f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,0.0f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,-0.0f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,-1.2f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(1.2f,Float.NaN)== -1);assertTrue(NumberUtils.compare(1.2f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(1.2f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(1.2f,1.2f)== 0);assertTrue(NumberUtils.compare(1.2f,0.0f)== +1);assertTrue(NumberUtils.compare(1.2f,-0.0f)== +1);assertTrue(NumberUtils.compare(1.2f,-1.2f)== +1);assertTrue(NumberUtils.compare(1.2f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(1.2f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(0.0f,Float.NaN)== -1);assertTrue(NumberUtils.compare(0.0f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(0.0f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(0.0f,1.2f)== -1);assertTrue(NumberUtils.compare(0.0f,0.0f)== 0);assertTrue(NumberUtils.compare(0.0f,-0.0f)== +1);assertTrue(NumberUtils.compare(0.0f,-1.2f)== +1);assertTrue(NumberUtils.compare(0.0f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(0.0f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-0.0f,Float.NaN)== -1);assertTrue(NumberUtils.compare(-0.0f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-0.0f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-0.0f,1.2f)== -1);assertTrue(NumberUtils.compare(-0.0f,0.0f)== -1);assertTrue(NumberUtils.compare(-0.0f,-0.0f)== 0);assertTrue(NumberUtils.compare(-0.0f,-1.2f)== +1);assertTrue(NumberUtils.compare(-0.0f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-0.0f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-1.2f,Float.NaN)== -1);assertTrue(NumberUtils.compare(-1.2f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-1.2f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-1.2f,1.2f)== -1);assertTrue(NumberUtils.compare(-1.2f,0.0f)== -1);assertTrue(NumberUtils.compare(-1.2f,-0.0f)== -1);assertTrue(NumberUtils.compare(-1.2f,-1.2f)== 0);assertTrue(NumberUtils.compare(-1.2f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-1.2f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.NaN)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,1.2f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,0.0f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,-0.0f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,-1.2f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,-Float.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.NaN)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,1.2f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,0.0f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,-0.0f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,-1.2f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,-Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY)== 0);}"
"org.apache.commons.lang.math.NumberUtilsTest.testIsDigits",0,"public void testIsDigits(){assertEquals(""isDigits(null)failed"",false,NumberUtils.isDigits(null));assertEquals(""isDigits('')failed"",false,NumberUtils.isDigits(""""));assertEquals(""isDigits(String)failed"",true,NumberUtils.isDigits(""12345""));assertEquals(""isDigits(String)neg 1 failed"",false,NumberUtils.isDigits(""1234.5""));assertEquals(""isDigits(String)neg 3 failed"",false,NumberUtils.isDigits(""1ab""));assertEquals(""isDigits(String)neg 4 failed"",false,NumberUtils.isDigits(""abc""));}"
"org.apache.commons.lang.math.NumberUtilsTest.testIsNumber",0,"/** * Tests isNumber(String)and tests that createNumber(String)returns a valid number iff isNumber(String)returns false.*/public void testIsNumber(){String val=""12345"";assertTrue(""isNumber(String)1 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)1 failed"",checkCreateNumber(val));val=""1234.5"";assertTrue(""isNumber(String)2 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)2 failed"",checkCreateNumber(val));val="".12345"";assertTrue(""isNumber(String)3 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)3 failed"",checkCreateNumber(val));val=""1234E5"";assertTrue(""isNumber(String)4 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)4 failed"",checkCreateNumber(val));val=""1234E+5"";assertTrue(""isNumber(String)5 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)5 failed"",checkCreateNumber(val));val=""1234E-5"";assertTrue(""isNumber(String)6 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)6 failed"",checkCreateNumber(val));val=""123.4E5"";assertTrue(""isNumber(String)7 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)7 failed"",checkCreateNumber(val));val=""-1234"";assertTrue(""isNumber(String)8 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)8 failed"",checkCreateNumber(val));val=""-1234.5"";assertTrue(""isNumber(String)9 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)9 failed"",checkCreateNumber(val));val=""-.12345"";assertTrue(""isNumber(String)10 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)10 failed"",checkCreateNumber(val));val=""-1234E5"";assertTrue(""isNumber(String)11 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)11 failed"",checkCreateNumber(val));val=""0"";assertTrue(""isNumber(String)12 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)12 failed"",checkCreateNumber(val));val=""-0"";assertTrue(""isNumber(String)13 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)13 failed"",checkCreateNumber(val));val=""01234"";assertTrue(""isNumber(String)14 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)14 failed"",checkCreateNumber(val));val=""-01234"";assertTrue(""isNumber(String)15 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)15 failed"",checkCreateNumber(val));val=""0xABC123"";assertTrue(""isNumber(String)16 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)16 failed"",checkCreateNumber(val));val=""0x0"";assertTrue(""isNumber(String)17 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)17 failed"",checkCreateNumber(val));val=""123.4E21D"";assertTrue(""isNumber(String)19 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)19 failed"",checkCreateNumber(val));val=""-221.23F"";assertTrue(""isNumber(String)20 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)20 failed"",checkCreateNumber(val));val=""22338L"";assertTrue(""isNumber(String)21 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)21 failed"",checkCreateNumber(val));val=null;assertTrue(""isNumber(String)1 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)1 Neg failed"",!checkCreateNumber(val));val="""";assertTrue(""isNumber(String)2 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)2 Neg failed"",!checkCreateNumber(val));val=""--2.3"";assertTrue(""isNumber(String)3 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)3 Neg failed"",!checkCreateNumber(val));val="".12.3"";assertTrue(""isNumber(String)4 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)4 Neg failed"",!checkCreateNumber(val));val=""-123E"";assertTrue(""isNumber(String)5 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)5 Neg failed"",!checkCreateNumber(val));val=""-123E+-212"";assertTrue(""isNumber(String)6 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)6 Neg failed"",!checkCreateNumber(val));val=""-123E2.12"";assertTrue(""isNumber(String)7 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)7 Neg failed"",!checkCreateNumber(val));val=""0xGF"";assertTrue(""isNumber(String)8 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)8 Neg failed"",!checkCreateNumber(val));val=""0xFAE-1"";assertTrue(""isNumber(String)9 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)9 Neg failed"",!checkCreateNumber(val));val=""."";assertTrue(""isNumber(String)10 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)10 Neg failed"",!checkCreateNumber(val));val=""-0ABC123"";assertTrue(""isNumber(String)11 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)11 Neg failed"",!checkCreateNumber(val));val=""123.4E-D"";assertTrue(""isNumber(String)12 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)12 Neg failed"",!checkCreateNumber(val));val=""123.4ED"";assertTrue(""isNumber(String)13 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)13 Neg failed"",!checkCreateNumber(val));val=""1234E5l"";assertTrue(""isNumber(String)14 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)14 Neg failed"",!checkCreateNumber(val));val=""11a"";assertTrue(""isNumber(String)15 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)15 Neg failed"",!checkCreateNumber(val));val=""1a"";assertTrue(""isNumber(String)16 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)16 Neg failed"",!checkCreateNumber(val));val=""a"";assertTrue(""isNumber(String)17 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)17 Neg failed"",!checkCreateNumber(val));val=""11g"";assertTrue(""isNumber(String)18 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)18 Neg failed"",!checkCreateNumber(val));val=""11z"";assertTrue(""isNumber(String)19 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)19 Neg failed"",!checkCreateNumber(val));val=""11def"";assertTrue(""isNumber(String)20 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)20 Neg failed"",!checkCreateNumber(val));val=""11d11"";assertTrue(""isNumber(String)21 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)21 Neg failed"",!checkCreateNumber(val));val=""11 11"";assertTrue(""isNumber(String)22 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)22 Neg failed"",!checkCreateNumber(val));val="" 1111"";assertTrue(""isNumber(String)23 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)23 Neg failed"",!checkCreateNumber(val));val=""1111 "";assertTrue(""isNumber(String)24 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)24 Neg failed"",!checkCreateNumber(val));}"
"org.apache.commons.lang.math.NumberUtilsTest.testConstants",0,"public void testConstants(){assertTrue(NumberUtils.LONG_ZERO instanceof Long);assertTrue(NumberUtils.LONG_ONE instanceof Long);assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);assertTrue(NumberUtils.SHORT_ZERO instanceof Short);assertTrue(NumberUtils.SHORT_ONE instanceof Short);assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);assertTrue(NumberUtils.BYTE_ONE instanceof Byte);assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);assertTrue(NumberUtils.FLOAT_ONE instanceof Float);assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);assertTrue(NumberUtils.LONG_ZERO.longValue()== 0);assertTrue(NumberUtils.LONG_ONE.longValue()== 1);assertTrue(NumberUtils.LONG_MINUS_ONE.longValue()== -1);assertTrue(NumberUtils.INTEGER_ZERO.intValue()== 0);assertTrue(NumberUtils.INTEGER_ONE.intValue()== 1);assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue()== -1);assertTrue(NumberUtils.SHORT_ZERO.shortValue()== 0);assertTrue(NumberUtils.SHORT_ONE.shortValue()== 1);assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue()== -1);assertTrue(NumberUtils.BYTE_ZERO.byteValue()== 0);assertTrue(NumberUtils.BYTE_ONE.byteValue()== 1);assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue()== -1);assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue()== 0.0d);assertTrue(NumberUtils.DOUBLE_ONE.doubleValue()== 1.0d);assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue()== -1.0d);assertTrue(NumberUtils.FLOAT_ZERO.floatValue()== 0.0f);assertTrue(NumberUtils.FLOAT_ONE.floatValue()== 1.0f);assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue()== -1.0f);}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsEmpty",0,"public void testIsEmpty(){assertEquals(true,StringUtils.isEmpty(null));assertEquals(true,StringUtils.isEmpty(""""));assertEquals(false,StringUtils.isEmpty("" ""));assertEquals(false,StringUtils.isEmpty(""foo""));assertEquals(false,StringUtils.isEmpty(""  foo  ""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsNotEmpty",0,"public void testIsNotEmpty(){assertEquals(false,StringUtils.isNotEmpty(null));assertEquals(false,StringUtils.isNotEmpty(""""));assertEquals(true,StringUtils.isNotEmpty("" ""));assertEquals(true,StringUtils.isNotEmpty(""foo""));assertEquals(true,StringUtils.isNotEmpty(""  foo  ""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsBlank",0,"public void testIsBlank(){assertEquals(true,StringUtils.isBlank(null));assertEquals(true,StringUtils.isBlank(""""));assertEquals(true,StringUtils.isBlank(StringUtilsTest.WHITESPACE));assertEquals(false,StringUtils.isBlank(""foo""));assertEquals(false,StringUtils.isBlank(""  foo  ""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testIsNotBlank",0,"public void testIsNotBlank(){assertEquals(false,StringUtils.isNotBlank(null));assertEquals(false,StringUtils.isNotBlank(""""));assertEquals(false,StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));assertEquals(true,StringUtils.isNotBlank(""foo""));assertEquals(true,StringUtils.isNotBlank(""  foo  ""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testClean",0,"public void testClean(){assertEquals(FOO,StringUtils.clean(FOO + ""  ""));assertEquals(FOO,StringUtils.clean("" "" + FOO + ""  ""));assertEquals(FOO,StringUtils.clean("" "" + FOO));assertEquals(FOO,StringUtils.clean(FOO + """"));assertEquals("""",StringUtils.clean("" \t\r\n\b ""));assertEquals("""",StringUtils.clean(""""));assertEquals("""",StringUtils.clean(null));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testTrim",0,"public void testTrim(){assertEquals(FOO,StringUtils.trim(FOO + ""  ""));assertEquals(FOO,StringUtils.trim("" "" + FOO + ""  ""));assertEquals(FOO,StringUtils.trim("" "" + FOO));assertEquals(FOO,StringUtils.trim(FOO + """"));assertEquals("""",StringUtils.trim("" \t\r\n\b ""));assertEquals("""",StringUtils.trim(StringUtilsTest.TRIMMABLE));assertEquals(StringUtilsTest.NON_TRIMMABLE,StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));assertEquals("""",StringUtils.trim(""""));assertEquals(null,StringUtils.trim(null));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testTrimToNull",0,"public void testTrimToNull(){assertEquals(FOO,StringUtils.trimToNull(FOO + ""  ""));assertEquals(FOO,StringUtils.trimToNull("" "" + FOO + ""  ""));assertEquals(FOO,StringUtils.trimToNull("" "" + FOO));assertEquals(FOO,StringUtils.trimToNull(FOO + """"));assertEquals(null,StringUtils.trimToNull("" \t\r\n\b ""));assertEquals(null,StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));assertEquals(StringUtilsTest.NON_TRIMMABLE,StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));assertEquals(null,StringUtils.trimToNull(""""));assertEquals(null,StringUtils.trimToNull(null));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testTrimToEmpty",0,"public void testTrimToEmpty(){assertEquals(FOO,StringUtils.trimToEmpty(FOO + ""  ""));assertEquals(FOO,StringUtils.trimToEmpty("" "" + FOO + ""  ""));assertEquals(FOO,StringUtils.trimToEmpty("" "" + FOO));assertEquals(FOO,StringUtils.trimToEmpty(FOO + """"));assertEquals("""",StringUtils.trimToEmpty("" \t\r\n\b ""));assertEquals("""",StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));assertEquals(StringUtilsTest.NON_TRIMMABLE,StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));assertEquals("""",StringUtils.trimToEmpty(""""));assertEquals("""",StringUtils.trimToEmpty(null));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStrip_String",0,"public void testStrip_String(){assertEquals(null,StringUtils.strip(null));assertEquals("""",StringUtils.strip(""""));assertEquals("""",StringUtils.strip(""        ""));assertEquals(""abc"",StringUtils.strip(""  abc  ""));assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripToNull_String",0,"public void testStripToNull_String(){assertEquals(null,StringUtils.stripToNull(null));assertEquals(null,StringUtils.stripToNull(""""));assertEquals(null,StringUtils.stripToNull(""        ""));assertEquals(null,StringUtils.stripToNull(StringUtilsTest.WHITESPACE));assertEquals(""ab c"",StringUtils.stripToNull(""  ab c  ""));assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripToEmpty_String",0,"public void testStripToEmpty_String(){assertEquals("""",StringUtils.stripToEmpty(null));assertEquals("""",StringUtils.stripToEmpty(""""));assertEquals("""",StringUtils.stripToEmpty(""        ""));assertEquals("""",StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));assertEquals(""ab c"",StringUtils.stripToEmpty(""  ab c  ""));assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStrip_StringString",0,"public void testStrip_StringString(){assertEquals(null,StringUtils.strip(null,null));assertEquals("""",StringUtils.strip("""",null));assertEquals("""",StringUtils.strip(""        "",null));assertEquals(""abc"",StringUtils.strip(""  abc  "",null));assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,null));assertEquals(null,StringUtils.strip(null,""""));assertEquals("""",StringUtils.strip("""",""""));assertEquals(""        "",StringUtils.strip(""        "",""""));assertEquals(""  abc  "",StringUtils.strip(""  abc  "",""""));assertEquals(StringUtilsTest.WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE,""""));assertEquals(null,StringUtils.strip(null,"" ""));assertEquals("""",StringUtils.strip("""","" ""));assertEquals("""",StringUtils.strip(""        "","" ""));assertEquals(""abc"",StringUtils.strip(""  abc  "","" ""));assertEquals(null,StringUtils.strip(null,""ab""));assertEquals("""",StringUtils.strip("""",""ab""));assertEquals(""        "",StringUtils.strip(""        "",""ab""));assertEquals(""  abc  "",StringUtils.strip(""  abc  "",""ab""));assertEquals(""c"",StringUtils.strip(""abcabab"",""ab""));assertEquals(StringUtilsTest.WHITESPACE,StringUtils.strip(StringUtilsTest.WHITESPACE,""""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripStart_StringString",0,"public void testStripStart_StringString(){assertEquals(null,StringUtils.stripStart(null,null));assertEquals("""",StringUtils.stripStart("""",null));assertEquals("""",StringUtils.stripStart(""        "",null));assertEquals(""abc  "",StringUtils.stripStart(""  abc  "",null));assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,null));assertEquals(null,StringUtils.stripStart(null,""""));assertEquals("""",StringUtils.stripStart("""",""""));assertEquals(""        "",StringUtils.stripStart(""        "",""""));assertEquals(""  abc  "",StringUtils.stripStart(""  abc  "",""""));assertEquals(StringUtilsTest.WHITESPACE,StringUtils.stripStart(StringUtilsTest.WHITESPACE,""""));assertEquals(null,StringUtils.stripStart(null,"" ""));assertEquals("""",StringUtils.stripStart("""","" ""));assertEquals("""",StringUtils.stripStart(""        "","" ""));assertEquals(""abc  "",StringUtils.stripStart(""  abc  "","" ""));assertEquals(null,StringUtils.stripStart(null,""ab""));assertEquals("""",StringUtils.stripStart("""",""ab""));assertEquals(""        "",StringUtils.stripStart(""        "",""ab""));assertEquals(""  abc  "",StringUtils.stripStart(""  abc  "",""ab""));assertEquals(""cabab"",StringUtils.stripStart(""abcabab"",""ab""));assertEquals(StringUtilsTest.WHITESPACE,StringUtils.stripStart(StringUtilsTest.WHITESPACE,""""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripEnd_StringString",0,"public void testStripEnd_StringString(){assertEquals(null,StringUtils.stripEnd(null,null));assertEquals("""",StringUtils.stripEnd("""",null));assertEquals("""",StringUtils.stripEnd(""        "",null));assertEquals(""  abc"",StringUtils.stripEnd(""  abc  "",null));assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE,null));assertEquals(null,StringUtils.stripEnd(null,""""));assertEquals("""",StringUtils.stripEnd("""",""""));assertEquals(""        "",StringUtils.stripEnd(""        "",""""));assertEquals(""  abc  "",StringUtils.stripEnd(""  abc  "",""""));assertEquals(StringUtilsTest.WHITESPACE,StringUtils.stripEnd(StringUtilsTest.WHITESPACE,""""));assertEquals(null,StringUtils.stripEnd(null,"" ""));assertEquals("""",StringUtils.stripEnd("""","" ""));assertEquals("""",StringUtils.stripEnd(""        "","" ""));assertEquals(""  abc"",StringUtils.stripEnd(""  abc  "","" ""));assertEquals(null,StringUtils.stripEnd(null,""ab""));assertEquals("""",StringUtils.stripEnd("""",""ab""));assertEquals(""        "",StringUtils.stripEnd(""        "",""ab""));assertEquals(""  abc  "",StringUtils.stripEnd(""  abc  "",""ab""));assertEquals(""abc"",StringUtils.stripEnd(""abcabab"",""ab""));assertEquals(StringUtilsTest.WHITESPACE,StringUtils.stripEnd(StringUtilsTest.WHITESPACE,""""));}"
"org.apache.commons.lang.StringUtilsTrimEmptyTest.testStripAll",0,"public void testStripAll(){String[]empty=new String[0];String[]fooSpace=new String[]{""  "" + FOO + ""  "",""  "" + FOO,FOO + ""  ""};String[]fooDots=new String[]{"".."" + FOO + "".."","".."" + FOO,FOO + ""..""};String[]foo=new String[]{FOO,FOO,FOO};assertEquals(null,StringUtils.stripAll(null));assertArrayEquals(empty,StringUtils.stripAll(empty));assertArrayEquals(foo,StringUtils.stripAll(fooSpace));assertEquals(null,StringUtils.stripAll(null,null));assertArrayEquals(foo,StringUtils.stripAll(fooSpace,null));assertArrayEquals(foo,StringUtils.stripAll(fooDots,"".""));}"
"org.apache.commons.lang.IntHashMapTest.testConstructor",0,"public void testConstructor(){try {new IntHashMap(-1,0.0f);fail();}catch(IllegalArgumentException e){assertEquals(""Illegal Capacity: -1"",e.getMessage());}try {new IntHashMap(1,0.0f);fail();}catch(IllegalArgumentException e){assertEquals(""Illegal Load: 0.0"",e.getMessage());}new IntHashMap(0,1.0f);try {new IntHashMap(-1);fail();}catch(IllegalArgumentException e){assertEquals(""Illegal Capacity: -1"",e.getMessage());}IntHashMap map1=new IntHashMap(0);assertEquals(0,map1.size());}"
"org.apache.commons.lang.IntHashMapTest.testClear",0,"public void testClear(){IntHashMap map=new IntHashMap();assertNull(map.put(1,""hello""));assertNull(map.put(2,""world""));assertEquals(2,map.size());map.clear();assertEquals(0,map.size());}"
"org.apache.commons.lang.IntHashMapTest.testContainsKey",0,"public void testContainsKey(){IntHashMap map=new IntHashMap();assertNull(map.put(1,""hello""));assertNull(map.put(2,""world""));assertEquals(2,map.size());assertTrue(map.containsKey(1));assertTrue(map.containsKey(2));assertFalse(map.containsKey(3));}"
"org.apache.commons.lang.IntHashMapTest.testContains",0,"public void testContains(){IntHashMap map=new IntHashMap();assertNull(map.put(1,""hello""));assertNull(map.put(2,""world""));assertEquals(2,map.size());assertTrue(map.containsValue(""hello""));assertTrue(map.containsValue(""world""));assertFalse(map.containsValue(""goodbye""));try {map.containsValue(null);fail();}catch(NullPointerException e){}}"
"org.apache.commons.lang.IntHashMapTest.testContainsValue",0,"public void testContainsValue(){IntHashMap map=new IntHashMap();assertNull(map.put(1,""hello""));assertNull(map.put(2,""world""));assertEquals(2,map.size());assertTrue(map.containsValue(""hello""));assertTrue(map.containsValue(""world""));assertFalse(map.containsValue(""goodbye""));try {map.containsValue(null);fail();}catch(NullPointerException e){}}"
"org.apache.commons.lang.IntHashMapTest.testIsEmpty",0,"public void testIsEmpty(){IntHashMap map=new IntHashMap();assertTrue(map.isEmpty());assertNull(map.put(1,""hello""));assertEquals(1,map.size());assertFalse(map.isEmpty());}"
"org.apache.commons.lang.IntHashMapTest.testPut",0,"public void testPut(){IntHashMap map=new IntHashMap();assertNull(map.put(1,""hello""));assertNull(map.put(2,""world""));assertEquals(2,map.size());assertEquals(""hello"",map.put(1,""hellooooo""));}"
"org.apache.commons.lang.IntHashMapTest.testRemove",0,"public void testRemove(){IntHashMap map=new IntHashMap();assertNull(map.put(1,""hello""));assertNull(map.put(2,""world""));assertEquals(2,map.size());assertEquals(""hello"",map.remove(1));assertEquals(1,map.size());assertNull(map.remove(3));}"
"org.apache.commons.lang.CharSetTest.testClass",0,"public void testClass(){assertEquals(true,Modifier.isPublic(CharSet.class.getModifiers()));assertEquals(false,Modifier.isFinal(CharSet.class.getModifiers()));}"
"org.apache.commons.lang.CharSetTest.testGetInstance",0,"public void testGetInstance(){assertSame(CharSet.EMPTY,CharSet.getInstance(null));assertSame(CharSet.EMPTY,CharSet.getInstance(""""));assertSame(CharSet.ASCII_ALPHA,CharSet.getInstance(""a-zA-Z""));assertSame(CharSet.ASCII_ALPHA,CharSet.getInstance(""A-Za-z""));assertSame(CharSet.ASCII_ALPHA_LOWER,CharSet.getInstance(""a-z""));assertSame(CharSet.ASCII_ALPHA_UPPER,CharSet.getInstance(""A-Z""));assertSame(CharSet.ASCII_NUMERIC,CharSet.getInstance(""0-9""));}"
"org.apache.commons.lang.CharSetTest.testConstructor_String_simple",0,"public void testConstructor_String_simple(){CharSet set;CharRange[]array;set=CharSet.getInstance((String)null);array=set.getCharRanges();assertEquals(""[]"",set.toString());assertEquals(0,array.length);set=CharSet.getInstance("""");array=set.getCharRanges();assertEquals(""[]"",set.toString());assertEquals(0,array.length);set=CharSet.getInstance(""a"");array=set.getCharRanges();assertEquals(""[a]"",set.toString());assertEquals(1,array.length);assertEquals(""a"",array[0].toString());set=CharSet.getInstance(""^a"");array=set.getCharRanges();assertEquals(""[^a]"",set.toString());assertEquals(1,array.length);assertEquals(""^a"",array[0].toString());set=CharSet.getInstance(""a-e"");array=set.getCharRanges();assertEquals(""[a-e]"",set.toString());assertEquals(1,array.length);assertEquals(""a-e"",array[0].toString());set=CharSet.getInstance(""^a-e"");array=set.getCharRanges();assertEquals(""[^a-e]"",set.toString());assertEquals(1,array.length);assertEquals(""^a-e"",array[0].toString());}"
"org.apache.commons.lang.CharSetTest.testConstructor_String_combo",0,"public void testConstructor_String_combo(){CharSet set;CharRange[]array;set=CharSet.getInstance(""abc"");array=set.getCharRanges();assertEquals(3,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));assertEquals(true,ArrayUtils.contains(array,new CharRange('b')));assertEquals(true,ArrayUtils.contains(array,new CharRange('c')));set=CharSet.getInstance(""a-ce-f"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','c')));assertEquals(true,ArrayUtils.contains(array,new CharRange('e','f')));set=CharSet.getInstance(""ae-f"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));assertEquals(true,ArrayUtils.contains(array,new CharRange('e','f')));set=CharSet.getInstance(""e-fa"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));assertEquals(true,ArrayUtils.contains(array,new CharRange('e','f')));set=CharSet.getInstance(""ae-fm-pz"");array=set.getCharRanges();assertEquals(4,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));assertEquals(true,ArrayUtils.contains(array,new CharRange('e','f')));assertEquals(true,ArrayUtils.contains(array,new CharRange('m','p')));assertEquals(true,ArrayUtils.contains(array,new CharRange('z')));}"
"org.apache.commons.lang.CharSetTest.testConstructor_String_comboNegated",0,"public void testConstructor_String_comboNegated(){CharSet set;CharRange[]array;set=CharSet.getInstance(""^abc"");array=set.getCharRanges();assertEquals(3,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','a',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('b')));assertEquals(true,ArrayUtils.contains(array,new CharRange('c')));set=CharSet.getInstance(""b^ac"");array=set.getCharRanges();assertEquals(3,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('b')));assertEquals(true,ArrayUtils.contains(array,new CharRange('a','a',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('c')));set=CharSet.getInstance(""db^ac"");array=set.getCharRanges();assertEquals(4,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('d')));assertEquals(true,ArrayUtils.contains(array,new CharRange('b')));assertEquals(true,ArrayUtils.contains(array,new CharRange('a','a',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('c')));set=CharSet.getInstance(""^b^a"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('b','b',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('a','a',true)));set=CharSet.getInstance(""b^a-c^z"");array=set.getCharRanges();assertEquals(3,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','c',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('z','z',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('b')));}"
"org.apache.commons.lang.CharSetTest.testConstructor_String_oddDash",0,"public void testConstructor_String_oddDash(){CharSet set;CharRange[]array;set=CharSet.getInstance(""-"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));set=CharSet.getInstance(""--"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));set=CharSet.getInstance(""---"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));set=CharSet.getInstance(""----"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));set=CharSet.getInstance(""-a"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));set=CharSet.getInstance(""a-"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));set=CharSet.getInstance(""a--"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','-')));set=CharSet.getInstance(""--a"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('-','a')));}"
"org.apache.commons.lang.CharSetTest.testConstructor_String_oddNegate",0,"public void testConstructor_String_oddNegate(){CharSet set;CharRange[]array;set=CharSet.getInstance(""^"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('^')));set=CharSet.getInstance(""^^"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('^','^',true)));set=CharSet.getInstance(""^^^"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('^','^',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('^','^')));set=CharSet.getInstance(""^^^^"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('^','^',true)));set=CharSet.getInstance(""a^"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a')));assertEquals(true,ArrayUtils.contains(array,new CharRange('^')));set=CharSet.getInstance(""^a-"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','a',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));set=CharSet.getInstance(""^^-c"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('^','c',true)));set=CharSet.getInstance(""^c-^"");array=set.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('c','^',true)));set=CharSet.getInstance(""^c-^d"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('c','^',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('d')));set=CharSet.getInstance(""^^-"");array=set.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('^','^',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('-')));}"
"org.apache.commons.lang.CharSetTest.testConstructor_String_oddCombinations",0,"public void testConstructor_String_oddCombinations(){CharSet set;CharRange[]array=null;set=CharSet.getInstance(""a-^c"");array=set.getCharRanges();assertEquals(true,ArrayUtils.contains(array,new CharRange('a','^')));assertEquals(true,ArrayUtils.contains(array,new CharRange('c')));assertEquals(false,set.contains('b'));assertEquals(true,set.contains('^'));assertEquals(true,set.contains('_'));assertEquals(true,set.contains('c'));set=CharSet.getInstance(""^a-^c"");array=set.getCharRanges();assertEquals(true,ArrayUtils.contains(array,new CharRange('a','^',true)));assertEquals(true,ArrayUtils.contains(array,new CharRange('c')));assertEquals(true,set.contains('b'));assertEquals(false,set.contains('^'));assertEquals(false,set.contains('_'));set=CharSet.getInstance(""a- ^-- "");array=set.getCharRanges();assertEquals(true,ArrayUtils.contains(array,new CharRange('a',' ')));assertEquals(true,ArrayUtils.contains(array,new CharRange('-',' ',true)));assertEquals(true,set.contains('#'));assertEquals(true,set.contains('^'));assertEquals(true,set.contains('a'));assertEquals(true,set.contains('*'));assertEquals(true,set.contains('A'));set=CharSet.getInstance(""^-b"");array=set.getCharRanges();assertEquals(true,ArrayUtils.contains(array,new CharRange('^','b')));assertEquals(true,set.contains('b'));assertEquals(true,set.contains('_'));assertEquals(false,set.contains('A'));assertEquals(true,set.contains('^'));set=CharSet.getInstance(""b-^"");array=set.getCharRanges();assertEquals(true,ArrayUtils.contains(array,new CharRange('^','b')));assertEquals(true,set.contains('b'));assertEquals(true,set.contains('^'));assertEquals(true,set.contains('a'));assertEquals(false,set.contains('c'));}"
"org.apache.commons.lang.CharSetTest.testEquals_Object",0,"public void testEquals_Object(){CharSet abc=CharSet.getInstance(""abc"");CharSet abc2=CharSet.getInstance(""abc"");CharSet atoc=CharSet.getInstance(""a-c"");CharSet atoc2=CharSet.getInstance(""a-c"");CharSet notatoc=CharSet.getInstance(""^a-c"");CharSet notatoc2=CharSet.getInstance(""^a-c"");assertEquals(false,abc.equals(null));assertEquals(true,abc.equals(abc));assertEquals(true,abc.equals(abc2));assertEquals(false,abc.equals(atoc));assertEquals(false,abc.equals(notatoc));assertEquals(false,atoc.equals(abc));assertEquals(true,atoc.equals(atoc));assertEquals(true,atoc.equals(atoc2));assertEquals(false,atoc.equals(notatoc));assertEquals(false,notatoc.equals(abc));assertEquals(false,notatoc.equals(atoc));assertEquals(true,notatoc.equals(notatoc));assertEquals(true,notatoc.equals(notatoc2));}"
"org.apache.commons.lang.CharSetTest.testHashCode",0,"public void testHashCode(){CharSet abc=CharSet.getInstance(""abc"");CharSet abc2=CharSet.getInstance(""abc"");CharSet atoc=CharSet.getInstance(""a-c"");CharSet atoc2=CharSet.getInstance(""a-c"");CharSet notatoc=CharSet.getInstance(""^a-c"");CharSet notatoc2=CharSet.getInstance(""^a-c"");assertEquals(abc.hashCode(),abc.hashCode());assertEquals(abc.hashCode(),abc2.hashCode());assertEquals(atoc.hashCode(),atoc.hashCode());assertEquals(atoc.hashCode(),atoc2.hashCode());assertEquals(notatoc.hashCode(),notatoc.hashCode());assertEquals(notatoc.hashCode(),notatoc2.hashCode());}"
"org.apache.commons.lang.CharSetTest.testContains_Char",0,"public void testContains_Char(){CharSet btod=CharSet.getInstance(""b-d"");CharSet dtob=CharSet.getInstance(""d-b"");CharSet bcd=CharSet.getInstance(""bcd"");CharSet bd=CharSet.getInstance(""bd"");CharSet notbtod=CharSet.getInstance(""^b-d"");assertEquals(false,btod.contains('a'));assertEquals(true,btod.contains('b'));assertEquals(true,btod.contains('c'));assertEquals(true,btod.contains('d'));assertEquals(false,btod.contains('e'));assertEquals(false,bcd.contains('a'));assertEquals(true,bcd.contains('b'));assertEquals(true,bcd.contains('c'));assertEquals(true,bcd.contains('d'));assertEquals(false,bcd.contains('e'));assertEquals(false,bd.contains('a'));assertEquals(true,bd.contains('b'));assertEquals(false,bd.contains('c'));assertEquals(true,bd.contains('d'));assertEquals(false,bd.contains('e'));assertEquals(true,notbtod.contains('a'));assertEquals(false,notbtod.contains('b'));assertEquals(false,notbtod.contains('c'));assertEquals(false,notbtod.contains('d'));assertEquals(true,notbtod.contains('e'));assertEquals(false,dtob.contains('a'));assertEquals(true,dtob.contains('b'));assertEquals(true,dtob.contains('c'));assertEquals(true,dtob.contains('d'));assertEquals(false,dtob.contains('e'));CharRange[]array=dtob.getCharRanges();assertEquals(""[b-d]"",dtob.toString());assertEquals(1,array.length);}"
"org.apache.commons.lang.CharSetTest.testSerialization",0,"public void testSerialization(){CharSet set=CharSet.getInstance(""a"");assertEquals(set,SerializationUtils.clone(set));set=CharSet.getInstance(""a-e"");assertEquals(set,SerializationUtils.clone(set));set=CharSet.getInstance(""be-f^a-z"");assertEquals(set,SerializationUtils.clone(set));}"
"org.apache.commons.lang.CharSetTest.testStatics",0,"public void testStatics(){CharRange[]array;array=CharSet.EMPTY.getCharRanges();assertEquals(0,array.length);array=CharSet.ASCII_ALPHA.getCharRanges();assertEquals(2,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','z')));assertEquals(true,ArrayUtils.contains(array,new CharRange('A','Z')));array=CharSet.ASCII_ALPHA_LOWER.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('a','z')));array=CharSet.ASCII_ALPHA_UPPER.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('A','Z')));array=CharSet.ASCII_NUMERIC.getCharRanges();assertEquals(1,array.length);assertEquals(true,ArrayUtils.contains(array,new CharRange('0','9')));}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayBoolean",0,"public void testAddObjectArrayBoolean(){boolean[]newArray;newArray=ArrayUtils.add((boolean[])null,false);assertTrue(Arrays.equals(new boolean[]{false},newArray));assertEquals(Boolean.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((boolean[])null,true);assertTrue(Arrays.equals(new boolean[]{true},newArray));assertEquals(Boolean.TYPE,newArray.getClass().getComponentType());boolean[]array1=new boolean[]{true,false,true};newArray=ArrayUtils.add(array1,false);assertTrue(Arrays.equals(new boolean[]{true,false,true,false},newArray));assertEquals(Boolean.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayByte",0,"public void testAddObjectArrayByte(){byte[]newArray;newArray=ArrayUtils.add((byte[])null,(byte)0);assertTrue(Arrays.equals(new byte[]{0},newArray));assertEquals(Byte.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((byte[])null,(byte)1);assertTrue(Arrays.equals(new byte[]{1},newArray));assertEquals(Byte.TYPE,newArray.getClass().getComponentType());byte[]array1=new byte[]{1,2,3};newArray=ArrayUtils.add(array1,(byte)0);assertTrue(Arrays.equals(new byte[]{1,2,3,0},newArray));assertEquals(Byte.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,(byte)4);assertTrue(Arrays.equals(new byte[]{1,2,3,4},newArray));assertEquals(Byte.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayChar",0,"public void testAddObjectArrayChar(){char[]newArray;newArray=ArrayUtils.add((char[])null,(char)0);assertTrue(Arrays.equals(new char[]{0},newArray));assertEquals(Character.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((char[])null,(char)1);assertTrue(Arrays.equals(new char[]{1},newArray));assertEquals(Character.TYPE,newArray.getClass().getComponentType());char[]array1=new char[]{1,2,3};newArray=ArrayUtils.add(array1,(char)0);assertTrue(Arrays.equals(new char[]{1,2,3,0},newArray));assertEquals(Character.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,(char)4);assertTrue(Arrays.equals(new char[]{1,2,3,4},newArray));assertEquals(Character.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayDouble",0,"public void testAddObjectArrayDouble(){double[]newArray;newArray=ArrayUtils.add((double[])null,0);assertTrue(Arrays.equals(new double[]{0},newArray));assertEquals(Double.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((double[])null,1);assertTrue(Arrays.equals(new double[]{1},newArray));assertEquals(Double.TYPE,newArray.getClass().getComponentType());double[]array1=new double[]{1,2,3};newArray=ArrayUtils.add(array1,0);assertTrue(Arrays.equals(new double[]{1,2,3,0},newArray));assertEquals(Double.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,4);assertTrue(Arrays.equals(new double[]{1,2,3,4},newArray));assertEquals(Double.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayFloat",0,"public void testAddObjectArrayFloat(){float[]newArray;newArray=ArrayUtils.add((float[])null,0);assertTrue(Arrays.equals(new float[]{0},newArray));assertEquals(Float.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((float[])null,1);assertTrue(Arrays.equals(new float[]{1},newArray));assertEquals(Float.TYPE,newArray.getClass().getComponentType());float[]array1=new float[]{1,2,3};newArray=ArrayUtils.add(array1,0);assertTrue(Arrays.equals(new float[]{1,2,3,0},newArray));assertEquals(Float.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,4);assertTrue(Arrays.equals(new float[]{1,2,3,4},newArray));assertEquals(Float.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayInt",0,"public void testAddObjectArrayInt(){int[]newArray;newArray=ArrayUtils.add((int[])null,0);assertTrue(Arrays.equals(new int[]{0},newArray));assertEquals(Integer.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((int[])null,1);assertTrue(Arrays.equals(new int[]{1},newArray));assertEquals(Integer.TYPE,newArray.getClass().getComponentType());int[]array1=new int[]{1,2,3};newArray=ArrayUtils.add(array1,0);assertTrue(Arrays.equals(new int[]{1,2,3,0},newArray));assertEquals(Integer.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,4);assertTrue(Arrays.equals(new int[]{1,2,3,4},newArray));assertEquals(Integer.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayLong",0,"public void testAddObjectArrayLong(){long[]newArray;newArray=ArrayUtils.add((long[])null,0);assertTrue(Arrays.equals(new long[]{0},newArray));assertEquals(Long.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((long[])null,1);assertTrue(Arrays.equals(new long[]{1},newArray));assertEquals(Long.TYPE,newArray.getClass().getComponentType());long[]array1=new long[]{1,2,3};newArray=ArrayUtils.add(array1,0);assertTrue(Arrays.equals(new long[]{1,2,3,0},newArray));assertEquals(Long.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,4);assertTrue(Arrays.equals(new long[]{1,2,3,4},newArray));assertEquals(Long.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayShort",0,"public void testAddObjectArrayShort(){short[]newArray;newArray=ArrayUtils.add((short[])null,(short)0);assertTrue(Arrays.equals(new short[]{0},newArray));assertEquals(Short.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add((short[])null,(short)1);assertTrue(Arrays.equals(new short[]{1},newArray));assertEquals(Short.TYPE,newArray.getClass().getComponentType());short[]array1=new short[]{1,2,3};newArray=ArrayUtils.add(array1,(short)0);assertTrue(Arrays.equals(new short[]{1,2,3,0},newArray));assertEquals(Short.TYPE,newArray.getClass().getComponentType());newArray=ArrayUtils.add(array1,(short)4);assertTrue(Arrays.equals(new short[]{1,2,3,4},newArray));assertEquals(Short.TYPE,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayObject",0,"public void testAddObjectArrayObject(){Object[]newArray;newArray=ArrayUtils.add((Object[])null,null);assertTrue(Arrays.equals((new Object[]{null}),newArray));assertEquals(Object.class,newArray.getClass().getComponentType());newArray=ArrayUtils.add((Object[])null,""a"");assertTrue(Arrays.equals((new String[]{""a""}),newArray));assertTrue(Arrays.equals((new Object[]{""a""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());String[]stringArray1=new String[]{""a"",""b"",""c""};newArray=ArrayUtils.add(stringArray1,null);assertTrue(Arrays.equals((new String[]{""a"",""b"",""c"",null}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.add(stringArray1,""d"");assertTrue(Arrays.equals((new String[]{""a"",""b"",""c"",""d""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());Number[]numberArray1=new Number[]{new Integer(1),new Double(2)};newArray=ArrayUtils.add(numberArray1,new Float(3));assertTrue(Arrays.equals((new Number[]{new Integer(1),new Double(2),new Float(3)}),newArray));assertEquals(Number.class,newArray.getClass().getComponentType());numberArray1=null;newArray=ArrayUtils.add(numberArray1,new Float(3));assertTrue(Arrays.equals((new Float[]{new Float(3)}),newArray));assertEquals(Float.class,newArray.getClass().getComponentType());numberArray1=null;newArray=ArrayUtils.add(numberArray1,null);assertTrue(Arrays.equals((new Object[]{null}),newArray));assertEquals(Object.class,newArray.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectArrayToObjectArray",0,"public void testAddObjectArrayToObjectArray(){assertNull(ArrayUtils.addAll((Object[])null,(Object[])null));Object[]newArray;String[]stringArray1=new String[]{""a"",""b"",""c""};String[]stringArray2=new String[]{""1"",""2"",""3""};newArray=ArrayUtils.addAll(stringArray1,null);assertNotSame(stringArray1,newArray);assertTrue(Arrays.equals(stringArray1,newArray));assertTrue(Arrays.equals((new String[]{""a"",""b"",""c""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.addAll(null,stringArray2);assertNotSame(stringArray2,newArray);assertTrue(Arrays.equals(stringArray2,newArray));assertTrue(Arrays.equals((new String[]{""1"",""2"",""3""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.addAll(stringArray1,stringArray2);assertTrue(Arrays.equals((new String[]{""a"",""b"",""c"",""1"",""2"",""3""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY,null);assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY,newArray));assertTrue(Arrays.equals((new String[]{}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.addAll(null,ArrayUtils.EMPTY_STRING_ARRAY);assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY,newArray));assertTrue(Arrays.equals((new String[]{}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY,ArrayUtils.EMPTY_STRING_ARRAY);assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY,newArray));assertTrue(Arrays.equals((new String[]{}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());String[]stringArrayNull=new String[]{null};newArray=ArrayUtils.addAll(stringArrayNull,stringArrayNull);assertTrue(Arrays.equals((new String[]{null,null}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());assertTrue(Arrays.equals(new boolean[]{true,false,false,true},ArrayUtils.addAll(new boolean[]{true,false},new boolean[]{false,true})));assertTrue(Arrays.equals(new boolean[]{false,true},ArrayUtils.addAll(null,new boolean[]{false,true})));assertTrue(Arrays.equals(new boolean[]{true,false},ArrayUtils.addAll(new boolean[]{true,false},null)));assertTrue(Arrays.equals(new char[]{'a','b','c','d'},ArrayUtils.addAll(new char[]{'a','b'},new char[]{'c','d'})));assertTrue(Arrays.equals(new char[]{'c','d'},ArrayUtils.addAll(null,new char[]{'c','d'})));assertTrue(Arrays.equals(new char[]{'a','b'},ArrayUtils.addAll(new char[]{'a','b'},null)));assertTrue(Arrays.equals(new byte[]{(byte)0,(byte)1,(byte)2,(byte)3},ArrayUtils.addAll(new byte[]{(byte)0,(byte)1},new byte[]{(byte)2,(byte)3})));assertTrue(Arrays.equals(new byte[]{(byte)2,(byte)3},ArrayUtils.addAll(null,new byte[]{(byte)2,(byte)3})));assertTrue(Arrays.equals(new byte[]{(byte)0,(byte)1},ArrayUtils.addAll(new byte[]{(byte)0,(byte)1},null)));assertTrue(Arrays.equals(new short[]{(short)10,(short)20,(short)30,(short)40},ArrayUtils.addAll(new short[]{(short)10,(short)20},new short[]{(short)30,(short)40})));assertTrue(Arrays.equals(new short[]{(short)30,(short)40},ArrayUtils.addAll(null,new short[]{(short)30,(short)40})));assertTrue(Arrays.equals(new short[]{(short)10,(short)20},ArrayUtils.addAll(new short[]{(short)10,(short)20},null)));assertTrue(Arrays.equals(new int[]{1,1000,-1000,-1},ArrayUtils.addAll(new int[]{1,1000},new int[]{-1000,-1})));assertTrue(Arrays.equals(new int[]{-1000,-1},ArrayUtils.addAll(null,new int[]{-1000,-1})));assertTrue(Arrays.equals(new int[]{1,1000},ArrayUtils.addAll(new int[]{1,1000},null)));assertTrue(Arrays.equals(new long[]{1L,-1L,1000L,-1000L},ArrayUtils.addAll(new long[]{1L,-1L},new long[]{1000L,-1000L})));assertTrue(Arrays.equals(new long[]{1000L,-1000L},ArrayUtils.addAll(null,new long[]{1000L,-1000L})));assertTrue(Arrays.equals(new long[]{1L,-1L},ArrayUtils.addAll(new long[]{1L,-1L},null)));assertTrue(Arrays.equals(new float[]{10.5f,10.1f,1.6f,0.01f},ArrayUtils.addAll(new float[]{10.5f,10.1f},new float[]{1.6f,0.01f})));assertTrue(Arrays.equals(new float[]{1.6f,0.01f},ArrayUtils.addAll(null,new float[]{1.6f,0.01f})));assertTrue(Arrays.equals(new float[]{10.5f,10.1f},ArrayUtils.addAll(new float[]{10.5f,10.1f},null)));assertTrue(Arrays.equals(new double[]{Math.PI,-Math.PI,0,9.99},ArrayUtils.addAll(new double[]{Math.PI,-Math.PI},new double[]{0,9.99})));assertTrue(Arrays.equals(new double[]{0,9.99},ArrayUtils.addAll(null,new double[]{0,9.99})));assertTrue(Arrays.equals(new double[]{Math.PI,-Math.PI},ArrayUtils.addAll(new double[]{Math.PI,-Math.PI},null)));}"
"org.apache.commons.lang.ArrayUtilsAddTest.testAddObjectAtIndex",0,"public void testAddObjectAtIndex(){Object[]newArray;newArray=ArrayUtils.add((Object[])null,0,null);assertTrue(Arrays.equals((new Object[]{null}),newArray));assertEquals(Object.class,newArray.getClass().getComponentType());newArray=ArrayUtils.add((Object[])null,0,""a"");assertTrue(Arrays.equals((new String[]{""a""}),newArray));assertTrue(Arrays.equals((new Object[]{""a""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());String[]stringArray1=new String[]{""a"",""b"",""c""};newArray=ArrayUtils.add(stringArray1,0,null);assertTrue(Arrays.equals((new String[]{null,""a"",""b"",""c""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.add(stringArray1,1,null);assertTrue(Arrays.equals((new String[]{""a"",null,""b"",""c""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.add(stringArray1,3,null);assertTrue(Arrays.equals((new String[]{""a"",""b"",""c"",null}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());newArray=ArrayUtils.add(stringArray1,3,""d"");assertTrue(Arrays.equals((new String[]{""a"",""b"",""c"",""d""}),newArray));assertEquals(String.class,newArray.getClass().getComponentType());assertEquals(String.class,newArray.getClass().getComponentType());Object[]o=new Object[]{""1"",""2"",""4""};Object[]result=ArrayUtils.add(o,2,""3"");Object[]result2=ArrayUtils.add(o,3,""5"");assertNotNull(result);assertEquals(4,result.length);assertEquals(""1"",result[0]);assertEquals(""2"",result[1]);assertEquals(""3"",result[2]);assertEquals(""4"",result[3]);assertNotNull(result2);assertEquals(4,result2.length);assertEquals(""1"",result2[0]);assertEquals(""2"",result2[1]);assertEquals(""4"",result2[2]);assertEquals(""5"",result2[3]);boolean[]booleanArray=ArrayUtils.add(null,0,true);assertTrue(Arrays.equals(new boolean[]{true},booleanArray));try {booleanArray=ArrayUtils.add(null,-1,true);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}booleanArray=ArrayUtils.add(new boolean[]{true},0,false);assertTrue(Arrays.equals(new boolean[]{false,true},booleanArray));booleanArray=ArrayUtils.add(new boolean[]{false},1,true);assertTrue(Arrays.equals(new boolean[]{false,true},booleanArray));booleanArray=ArrayUtils.add(new boolean[]{true,false},1,true);assertTrue(Arrays.equals(new boolean[]{true,true,false},booleanArray));try {booleanArray=ArrayUtils.add(new boolean[]{true,false},4,true);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {booleanArray=ArrayUtils.add(new boolean[]{true,false},-1,true);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}char[]charArray=ArrayUtils.add((char[])null,0,'a');assertTrue(Arrays.equals(new char[]{'a'},charArray));try {charArray=ArrayUtils.add((char[])null,-1,'a');}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}charArray=ArrayUtils.add(new char[]{'a'},0,'b');assertTrue(Arrays.equals(new char[]{'b','a'},charArray));charArray=ArrayUtils.add(new char[]{'a','b'},0,'c');assertTrue(Arrays.equals(new char[]{'c','a','b'},charArray));charArray=ArrayUtils.add(new char[]{'a','b'},1,'k');assertTrue(Arrays.equals(new char[]{'a','k','b'},charArray));charArray=ArrayUtils.add(new char[]{'a','b','c'},1,'t');assertTrue(Arrays.equals(new char[]{'a','t','b','c'},charArray));try {charArray=ArrayUtils.add(new char[]{'a','b'},4,'c');}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {charArray=ArrayUtils.add(new char[]{'a','b'},-1,'c');}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}short[]shortArray=ArrayUtils.add(new short[]{1},0,(short)2);assertTrue(Arrays.equals(new short[]{2,1},shortArray));try {shortArray=ArrayUtils.add((short[])null,-1,(short)2);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}shortArray=ArrayUtils.add(new short[]{2,6},2,(short)10);assertTrue(Arrays.equals(new short[]{2,6,10},shortArray));shortArray=ArrayUtils.add(new short[]{2,6},0,(short)-4);assertTrue(Arrays.equals(new short[]{-4,2,6},shortArray));shortArray=ArrayUtils.add(new short[]{2,6,3},2,(short)1);assertTrue(Arrays.equals(new short[]{2,6,1,3},shortArray));try {shortArray=ArrayUtils.add(new short[]{2,6},4,(short)10);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {shortArray=ArrayUtils.add(new short[]{2,6},-1,(short)10);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}byte[]byteArray=ArrayUtils.add(new byte[]{1},0,(byte)2);assertTrue(Arrays.equals(new byte[]{2,1},byteArray));try {byteArray=ArrayUtils.add((byte[])null,-1,(byte)2);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}byteArray=ArrayUtils.add(new byte[]{2,6},2,(byte)3);assertTrue(Arrays.equals(new byte[]{2,6,3},byteArray));byteArray=ArrayUtils.add(new byte[]{2,6},0,(byte)1);assertTrue(Arrays.equals(new byte[]{1,2,6},byteArray));byteArray=ArrayUtils.add(new byte[]{2,6,3},2,(byte)1);assertTrue(Arrays.equals(new byte[]{2,6,1,3},byteArray));try {byteArray=ArrayUtils.add(new byte[]{2,6},4,(byte)3);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {byteArray=ArrayUtils.add(new byte[]{2,6},-1,(byte)3);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}int[]intArray=ArrayUtils.add(new int[]{1},0,2);assertTrue(Arrays.equals(new int[]{2,1},intArray));try {intArray=ArrayUtils.add((int[])null,-1,2);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}intArray=ArrayUtils.add(new int[]{2,6},2,10);assertTrue(Arrays.equals(new int[]{2,6,10},intArray));intArray=ArrayUtils.add(new int[]{2,6},0,-4);assertTrue(Arrays.equals(new int[]{-4,2,6},intArray));intArray=ArrayUtils.add(new int[]{2,6,3},2,1);assertTrue(Arrays.equals(new int[]{2,6,1,3},intArray));try {intArray=ArrayUtils.add(new int[]{2,6},4,10);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {intArray=ArrayUtils.add(new int[]{2,6},-1,10);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}long[]longArray=ArrayUtils.add(new long[]{1L},0,2L);assertTrue(Arrays.equals(new long[]{2L,1L},longArray));try {longArray=ArrayUtils.add((long[])null,-1,2L);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}longArray=ArrayUtils.add(new long[]{2L,6L},2,10L);assertTrue(Arrays.equals(new long[]{2L,6L,10L},longArray));longArray=ArrayUtils.add(new long[]{2L,6L},0,-4L);assertTrue(Arrays.equals(new long[]{-4L,2L,6L},longArray));longArray=ArrayUtils.add(new long[]{2L,6L,3L},2,1L);assertTrue(Arrays.equals(new long[]{2L,6L,1L,3L},longArray));try {longArray=ArrayUtils.add(new long[]{2L,6L},4,10L);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {longArray=ArrayUtils.add(new long[]{2L,6L},-1,10L);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}float[]floatArray=ArrayUtils.add(new float[]{1.1f},0,2.2f);assertTrue(Arrays.equals(new float[]{2.2f,1.1f},floatArray));try {floatArray=ArrayUtils.add((float[])null,-1,2.2f);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}floatArray=ArrayUtils.add(new float[]{2.3f,6.4f},2,10.5f);assertTrue(Arrays.equals(new float[]{2.3f,6.4f,10.5f},floatArray));floatArray=ArrayUtils.add(new float[]{2.6f,6.7f},0,-4.8f);assertTrue(Arrays.equals(new float[]{-4.8f,2.6f,6.7f},floatArray));floatArray=ArrayUtils.add(new float[]{2.9f,6.0f,0.3f},2,1.0f);assertTrue(Arrays.equals(new float[]{2.9f,6.0f,1.0f,0.3f},floatArray));try {floatArray=ArrayUtils.add(new float[]{2.3f,6.4f},4,10.5f);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {floatArray=ArrayUtils.add(new float[]{2.3f,6.4f},-1,10.5f);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}double[]doubleArray=ArrayUtils.add(new double[]{1.1},0,2.2);assertTrue(Arrays.equals(new double[]{2.2,1.1},doubleArray));try {doubleArray=ArrayUtils.add((double[])null,-1,2.2);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 0"",e.getMessage());}doubleArray=ArrayUtils.add(new double[]{2.3,6.4},2,10.5);assertTrue(Arrays.equals(new double[]{2.3,6.4,10.5},doubleArray));doubleArray=ArrayUtils.add(new double[]{2.6,6.7},0,-4.8);assertTrue(Arrays.equals(new double[]{-4.8,2.6,6.7},doubleArray));doubleArray=ArrayUtils.add(new double[]{2.9,6.0,0.3},2,1.0);assertTrue(Arrays.equals(new double[]{2.9,6.0,1.0,0.3},doubleArray));try {doubleArray=ArrayUtils.add(new double[]{2.3,6.4},4,10.5);}catch(IndexOutOfBoundsException e){assertEquals(""Index: 4,Length: 2"",e.getMessage());}try {doubleArray=ArrayUtils.add(new double[]{2.3,6.4},-1,10.5);}catch(IndexOutOfBoundsException e){assertEquals(""Index: -1,Length: 2"",e.getMessage());}}"
"org.apache.commons.lang.enums.EnumEqualsTest.testEquals",0,"public void testEquals(){assertEquals(false,CarColorEnum.RED.equals(TrafficlightColorEnum.RED));assertEquals(false,CarColorEnum.YELLOW.equals(TrafficlightColorEnum.YELLOW));assertEquals(false,TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass(""red"")));assertEquals(false,CarColorEnum.RED.equals(new TotallyUnrelatedClass(""red"")));assertEquals(false,TrafficlightColorEnum.RED.equals(new TotallyUnrelatedClass(""some"")));assertEquals(false,CarColorEnum.RED.equals(new TotallyUnrelatedClass(""some"")));}"
"org.apache.commons.lang.enums.EnumEqualsTest.testEquals_classloader_equal",0,"public void testEquals_classloader_equal()throws Exception {ClassLoader cl=ColorEnum.class.getClassLoader();if (cl instanceof URLClassLoader){URLClassLoader urlCL=(URLClassLoader)cl;URLClassLoader urlCL1=new URLClassLoader(urlCL.getURLs(),null);URLClassLoader urlCL2=new URLClassLoader(urlCL.getURLs(),null);Class otherEnumClass1=urlCL1.loadClass(""org.apache.commons.lang.enums.ColorEnum"");Class otherEnumClass2=urlCL2.loadClass(""org.apache.commons.lang.enums.ColorEnum"");Object blue1=otherEnumClass1.getDeclaredField(""BLUE"").get(null);Object blue2=otherEnumClass2.getDeclaredField(""BLUE"").get(null);assertEquals(true,blue1.equals(blue2));}}"
"org.apache.commons.lang.enums.EnumEqualsTest.testEquals_classloader_different",0,"public void testEquals_classloader_different()throws Exception {ClassLoader cl=ColorEnum.class.getClassLoader();if (cl instanceof URLClassLoader){URLClassLoader urlCL=(URLClassLoader)cl;URLClassLoader urlCL1=new URLClassLoader(urlCL.getURLs(),null);URLClassLoader urlCL2=new URLClassLoader(urlCL.getURLs(),null);Class otherEnumClass1=urlCL1.loadClass(""org.apache.commons.lang.enums.ColorEnum"");Class otherEnumClass2=urlCL2.loadClass(""org.apache.commons.lang.enums.ColorEnum"");Object blue1=otherEnumClass1.getDeclaredField(""BLUE"").get(null);Object blue2=otherEnumClass2.getDeclaredField(""RED"").get(null);assertEquals(false,blue1.equals(blue2));}}"
"org.apache.commons.lang.enums.EnumEqualsTest.testCompareTo",0,"public void testCompareTo(){try {CarColorEnum.RED.compareTo(TrafficlightColorEnum.RED);fail();}catch(ClassCastException ex){}try {CarColorEnum.YELLOW.compareTo(TrafficlightColorEnum.YELLOW);fail();}catch(ClassCastException ex){}try {TrafficlightColorEnum.RED.compareTo(new TotallyUnrelatedClass(""red""));fail();}catch(ClassCastException ex){}try {CarColorEnum.RED.compareTo(new TotallyUnrelatedClass(""red""));fail();}catch(ClassCastException ex){}try {TrafficlightColorEnum.RED.compareTo(new TotallyUnrelatedClass(""some""));fail();}catch(ClassCastException ex){}try {CarColorEnum.RED.compareTo(new TotallyUnrelatedClass(""some""));fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.CharSetUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new CharSetUtils());Constructor[]cons=CharSetUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(CharSetUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(CharSetUtils.class.getModifiers()));}"
"org.apache.commons.lang.CharSetUtilsTest.testEvaluateSet_Stringarray",0,"public void testEvaluateSet_Stringarray(){assertEquals(null,CharSetUtils.evaluateSet((String[])null));assertEquals(""[]"",CharSetUtils.evaluateSet(new String[0]).toString());assertEquals(""[]"",CharSetUtils.evaluateSet(new String[]{null}).toString());assertEquals(""[a-e]"",CharSetUtils.evaluateSet(new String[]{""a-e""}).toString());}"
"org.apache.commons.lang.CharSetUtilsTest.testSqueeze_StringString",0,"public void testSqueeze_StringString(){assertEquals(null,CharSetUtils.squeeze(null,(String)null));assertEquals(null,CharSetUtils.squeeze(null,""""));assertEquals("""",CharSetUtils.squeeze("""",(String)null));assertEquals("""",CharSetUtils.squeeze("""",""""));assertEquals("""",CharSetUtils.squeeze("""",""a-e""));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",(String)null));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",""""));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",""a-e""));assertEquals(""helo"",CharSetUtils.squeeze(""hello"",""l-p""));assertEquals(""heloo"",CharSetUtils.squeeze(""helloo"",""l""));assertEquals(""hello"",CharSetUtils.squeeze(""helloo"",""^l""));}"
"org.apache.commons.lang.CharSetUtilsTest.testSqueeze_StringStringarray",0,"public void testSqueeze_StringStringarray(){assertEquals(null,CharSetUtils.squeeze(null,(String[])null));assertEquals(null,CharSetUtils.squeeze(null,new String[0]));assertEquals(null,CharSetUtils.squeeze(null,new String[]{null}));assertEquals(null,CharSetUtils.squeeze(null,new String[]{""el""}));assertEquals("""",CharSetUtils.squeeze("""",(String[])null));assertEquals("""",CharSetUtils.squeeze("""",new String[0]));assertEquals("""",CharSetUtils.squeeze("""",new String[]{null}));assertEquals("""",CharSetUtils.squeeze("""",new String[]{""a-e""}));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",(String[])null));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",new String[0]));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",new String[]{null}));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",new String[]{""a-e""}));assertEquals(""helo"",CharSetUtils.squeeze(""hello"",new String[]{""el""}));assertEquals(""hello"",CharSetUtils.squeeze(""hello"",new String[]{""e""}));assertEquals(""fofof"",CharSetUtils.squeeze(""fooffooff"",new String[]{""of""}));assertEquals(""fof"",CharSetUtils.squeeze(""fooooff"",new String[]{""fo""}));}"
"org.apache.commons.lang.CharSetUtilsTest.testCount_StringString",0,"public void testCount_StringString(){assertEquals(0,CharSetUtils.count(null,(String)null));assertEquals(0,CharSetUtils.count(null,""""));assertEquals(0,CharSetUtils.count("""",(String)null));assertEquals(0,CharSetUtils.count("""",""""));assertEquals(0,CharSetUtils.count("""",""a-e""));assertEquals(0,CharSetUtils.count(""hello"",(String)null));assertEquals(0,CharSetUtils.count(""hello"",""""));assertEquals(1,CharSetUtils.count(""hello"",""a-e""));assertEquals(3,CharSetUtils.count(""hello"",""l-p""));}"
"org.apache.commons.lang.CharSetUtilsTest.testCount_StringStringarray",0,"public void testCount_StringStringarray(){assertEquals(0,CharSetUtils.count(null,(String[])null));assertEquals(0,CharSetUtils.count(null,new String[0]));assertEquals(0,CharSetUtils.count(null,new String[]{null}));assertEquals(0,CharSetUtils.count(null,new String[]{""a-e""}));assertEquals(0,CharSetUtils.count("""",(String[])null));assertEquals(0,CharSetUtils.count("""",new String[0]));assertEquals(0,CharSetUtils.count("""",new String[]{null}));assertEquals(0,CharSetUtils.count("""",new String[]{""a-e""}));assertEquals(0,CharSetUtils.count(""hello"",(String[])null));assertEquals(0,CharSetUtils.count(""hello"",new String[0]));assertEquals(0,CharSetUtils.count(""hello"",new String[]{null}));assertEquals(1,CharSetUtils.count(""hello"",new String[]{""a-e""}));assertEquals(3,CharSetUtils.count(""hello"",new String[]{""el""}));assertEquals(0,CharSetUtils.count(""hello"",new String[]{""x""}));assertEquals(2,CharSetUtils.count(""hello"",new String[]{""e-i""}));assertEquals(5,CharSetUtils.count(""hello"",new String[]{""a-z""}));assertEquals(0,CharSetUtils.count(""hello"",new String[]{""""}));}"
"org.apache.commons.lang.CharSetUtilsTest.testKeep_StringString",0,"public void testKeep_StringString(){assertEquals(null,CharSetUtils.keep(null,(String)null));assertEquals(null,CharSetUtils.keep(null,""""));assertEquals("""",CharSetUtils.keep("""",(String)null));assertEquals("""",CharSetUtils.keep("""",""""));assertEquals("""",CharSetUtils.keep("""",""a-e""));assertEquals("""",CharSetUtils.keep(""hello"",(String)null));assertEquals("""",CharSetUtils.keep(""hello"",""""));assertEquals("""",CharSetUtils.keep(""hello"",""xyz""));assertEquals(""hello"",CharSetUtils.keep(""hello"",""a-z""));assertEquals(""hello"",CharSetUtils.keep(""hello"",""oleh""));assertEquals(""ell"",CharSetUtils.keep(""hello"",""el""));}"
"org.apache.commons.lang.CharSetUtilsTest.testKeep_StringStringarray",0,"public void testKeep_StringStringarray(){assertEquals(null,CharSetUtils.keep(null,(String[])null));assertEquals(null,CharSetUtils.keep(null,new String[0]));assertEquals(null,CharSetUtils.keep(null,new String[]{null}));assertEquals(null,CharSetUtils.keep(null,new String[]{""a-e""}));assertEquals("""",CharSetUtils.keep("""",(String[])null));assertEquals("""",CharSetUtils.keep("""",new String[0]));assertEquals("""",CharSetUtils.keep("""",new String[]{null}));assertEquals("""",CharSetUtils.keep("""",new String[]{""a-e""}));assertEquals("""",CharSetUtils.keep(""hello"",(String[])null));assertEquals("""",CharSetUtils.keep(""hello"",new String[0]));assertEquals("""",CharSetUtils.keep(""hello"",new String[]{null}));assertEquals(""e"",CharSetUtils.keep(""hello"",new String[]{""a-e""}));assertEquals(""e"",CharSetUtils.keep(""hello"",new String[]{""a-e""}));assertEquals(""ell"",CharSetUtils.keep(""hello"",new String[]{""el""}));assertEquals(""hello"",CharSetUtils.keep(""hello"",new String[]{""elho""}));assertEquals(""hello"",CharSetUtils.keep(""hello"",new String[]{""a-z""}));assertEquals(""----"",CharSetUtils.keep(""----"",new String[]{""-""}));assertEquals(""ll"",CharSetUtils.keep(""hello"",new String[]{""l""}));}"
"org.apache.commons.lang.CharSetUtilsTest.testDelete_StringString",0,"public void testDelete_StringString(){assertEquals(null,CharSetUtils.delete(null,(String)null));assertEquals(null,CharSetUtils.delete(null,""""));assertEquals("""",CharSetUtils.delete("""",(String)null));assertEquals("""",CharSetUtils.delete("""",""""));assertEquals("""",CharSetUtils.delete("""",""a-e""));assertEquals(""hello"",CharSetUtils.delete(""hello"",(String)null));assertEquals(""hello"",CharSetUtils.delete(""hello"",""""));assertEquals(""hllo"",CharSetUtils.delete(""hello"",""a-e""));assertEquals(""he"",CharSetUtils.delete(""hello"",""l-p""));assertEquals(""hello"",CharSetUtils.delete(""hello"",""z""));}"
"org.apache.commons.lang.CharSetUtilsTest.testDelete_StringStringarray",0,"public void testDelete_StringStringarray(){assertEquals(null,CharSetUtils.delete(null,(String[])null));assertEquals(null,CharSetUtils.delete(null,new String[0]));assertEquals(null,CharSetUtils.delete(null,new String[]{null}));assertEquals(null,CharSetUtils.delete(null,new String[]{""el""}));assertEquals("""",CharSetUtils.delete("""",(String[])null));assertEquals("""",CharSetUtils.delete("""",new String[0]));assertEquals("""",CharSetUtils.delete("""",new String[]{null}));assertEquals("""",CharSetUtils.delete("""",new String[]{""a-e""}));assertEquals(""hello"",CharSetUtils.delete(""hello"",(String[])null));assertEquals(""hello"",CharSetUtils.delete(""hello"",new String[0]));assertEquals(""hello"",CharSetUtils.delete(""hello"",new String[]{null}));assertEquals(""hello"",CharSetUtils.delete(""hello"",new String[]{""xyz""}));assertEquals(""ho"",CharSetUtils.delete(""hello"",new String[]{""el""}));assertEquals("""",CharSetUtils.delete(""hello"",new String[]{""elho""}));assertEquals(""hello"",CharSetUtils.delete(""hello"",new String[]{""""}));assertEquals(""hello"",CharSetUtils.delete(""hello"",""""));assertEquals("""",CharSetUtils.delete(""hello"",new String[]{""a-z""}));assertEquals("""",CharSetUtils.delete(""----"",new String[]{""-""}));assertEquals(""heo"",CharSetUtils.delete(""hello"",new String[]{""l""}));}"
"org.apache.commons.lang.CharSetUtilsTest.testTranslate",0,"public void testTranslate(){assertEquals(null,CharSetUtils.translate(null,null,null));assertEquals("""",CharSetUtils.translate("""",""a"",""b""));assertEquals(""jelly"",CharSetUtils.translate(""hello"",""ho"",""jy""));assertEquals(""jellj"",CharSetUtils.translate(""hello"",""ho"",""j""));assertEquals(""jelly"",CharSetUtils.translate(""hello"",""ho"",""jyx""));assertEquals(""\rhello\r"",CharSetUtils.translate(""\nhello\n"",""\n"",""\r""));assertEquals(""hello"",CharSetUtils.translate(""hello"","""",""x""));assertEquals(""hello"",CharSetUtils.translate(""hello"","""",""""));assertEquals(""hello"",CharSetUtils.translate(""hello"","""",""""));assertEquals(""q651.506bera"",CharSetUtils.translate(""d216.102oren"",""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"",""nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234""));}"
"org.apache.commons.lang.CharSetUtilsTest.testTranslateNullPointerException",0,"public void testTranslateNullPointerException(){try {CharSetUtils.translate(""hello"",null,null);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}try {CharSetUtils.translate(""hello"",""h"",null);fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}try {CharSetUtils.translate(""hello"",null,""a"");fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}try {CharSetUtils.translate(""hello"",""h"","""");fail(""Expecting ArrayIndexOutOfBoundsException"");}catch(ArrayIndexOutOfBoundsException ex){}}"
"org.apache.commons.lang.math.DoubleRangeTest.testConstructor1a",0,"public void testConstructor1a(){DoubleRange nr=new DoubleRange(8d);assertEquals(double8,nr.getMinimumNumber());assertEquals(double8,nr.getMaximumNumber());try {new DoubleRange(Double.NaN);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.DoubleRangeTest.testConstructor1b",0,"public void testConstructor1b(){DoubleRange nr=new DoubleRange(double8);assertSame(double8,nr.getMinimumNumber());assertSame(double8,nr.getMaximumNumber());Range r=new DoubleRange(nonComparableNumber);try {new DoubleRange(null);fail();}catch(IllegalArgumentException ex){}try {new DoubleRange(new Double(Double.NaN));fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.DoubleRangeTest.testConstructor2a",0,"public void testConstructor2a(){DoubleRange nr=new DoubleRange(8d,10d);assertEquals(double8,nr.getMinimumNumber());assertEquals(double10,nr.getMaximumNumber());nr=new DoubleRange(10d,8d);assertEquals(double8,nr.getMinimumNumber());assertEquals(double10,nr.getMaximumNumber());try {new DoubleRange(Double.NaN,8d);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.DoubleRangeTest.testConstructor2b",0,"public void testConstructor2b(){DoubleRange nr=new DoubleRange(double8,double10);assertSame(double8,nr.getMinimumNumber());assertSame(double10,nr.getMaximumNumber());nr=new DoubleRange(double10,double8);assertSame(double8,nr.getMinimumNumber());assertSame(double10,nr.getMaximumNumber());nr=new DoubleRange(double8,double10);assertSame(double8,nr.getMinimumNumber());assertEquals(double10,nr.getMaximumNumber());try {new DoubleRange(double8,null);fail();}catch(IllegalArgumentException ex){}try {new DoubleRange(null,double8);fail();}catch(IllegalArgumentException ex){}try {new DoubleRange(null,null);fail();}catch(IllegalArgumentException ex){}try {new DoubleRange(new Double(Double.NaN),double10);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.DoubleRangeTest.testContainsNumber",0,"public void testContainsNumber(){assertEquals(false,tenToTwenty.containsNumber(null));assertEquals(true,tenToTwenty.containsNumber(nonComparableNumber));assertEquals(false,tenToTwenty.containsNumber(five));assertEquals(true,tenToTwenty.containsNumber(ten));assertEquals(true,tenToTwenty.containsNumber(fifteen));assertEquals(true,tenToTwenty.containsNumber(twenty));assertEquals(false,tenToTwenty.containsNumber(twentyFive));assertEquals(false,tenToTwenty.containsNumber(long8));assertEquals(true,tenToTwenty.containsNumber(long10));assertEquals(true,tenToTwenty.containsNumber(long12));assertEquals(true,tenToTwenty.containsNumber(long20));assertEquals(false,tenToTwenty.containsNumber(long21));assertEquals(false,tenToTwenty.containsNumber(double8));assertEquals(true,tenToTwenty.containsNumber(double10));assertEquals(true,tenToTwenty.containsNumber(double12));assertEquals(true,tenToTwenty.containsNumber(double20));assertEquals(false,tenToTwenty.containsNumber(double21));assertEquals(false,tenToTwenty.containsNumber(float8));assertEquals(true,tenToTwenty.containsNumber(float10));assertEquals(true,tenToTwenty.containsNumber(float12));assertEquals(true,tenToTwenty.containsNumber(float20));assertEquals(false,tenToTwenty.containsNumber(float21));}"
"org.apache.commons.lang.math.DoubleRangeTest.testToString",0,"public void testToString(){String str=tenToTwenty.toString();assertEquals(""Range[10.0,20.0]"",str);assertSame(str,tenToTwenty.toString());assertEquals(""Range[-20.0,-10.0]"",createRange(new Integer(-20),new Integer(-10)).toString());}"
"org.apache.commons.lang.enum.EnumUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new EnumUtils());Constructor[]cons=EnumUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(EnumUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(EnumUtils.class.getModifiers()));}"
"org.apache.commons.lang.enum.EnumUtilsTest.testIterator",0,"public void testIterator(){Iterator it=EnumUtils.iterator(ColorEnum.class);assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());it=EnumUtils.iterator(DummyEnum.class);assertEquals(false,it.hasNext());}"
"org.apache.commons.lang.enum.EnumUtilsTest.testIteratorEx",0,"public void testIteratorEx(){try {EnumUtils.iterator(null);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.iterator(Object.class);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enum.EnumUtilsTest.testList",0,"public void testList(){List list=EnumUtils.getEnumList(ColorEnum.class);Iterator it=list.iterator();assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());list=EnumUtils.getEnumList(DummyEnum.class);assertEquals(0,list.size());}"
"org.apache.commons.lang.enum.EnumUtilsTest.testListEx",0,"public void testListEx(){try {EnumUtils.getEnumList(null);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnumList(Object.class);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enum.EnumUtilsTest.testMap",0,"public void testMap(){Map map=EnumUtils.getEnumMap(ColorEnum.class);assertTrue(map.containsValue(ColorEnum.RED));assertTrue(map.containsValue(ColorEnum.GREEN));assertTrue(map.containsValue(ColorEnum.BLUE));assertSame(ColorEnum.RED,map.get(""Red""));assertSame(ColorEnum.GREEN,map.get(""Green""));assertSame(ColorEnum.BLUE,map.get(""Blue""));map=EnumUtils.getEnumMap(DummyEnum.class);assertEquals(0,map.size());}"
"org.apache.commons.lang.enum.EnumUtilsTest.testMapEx",0,"public void testMapEx(){try {EnumUtils.getEnumMap(null);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnumMap(Object.class);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enum.EnumUtilsTest.testGet",0,"public void testGet(){assertSame(ColorEnum.RED,EnumUtils.getEnum(ColorEnum.class,""Red""));assertSame(ColorEnum.GREEN,EnumUtils.getEnum(ColorEnum.class,""Green""));assertSame(ColorEnum.BLUE,EnumUtils.getEnum(ColorEnum.class,""Blue""));assertSame(null,EnumUtils.getEnum(ColorEnum.class,""Pink""));assertSame(null,EnumUtils.getEnum(DummyEnum.class,""Pink""));}"
"org.apache.commons.lang.enum.EnumUtilsTest.testGetEx",0,"public void testGetEx(){try {EnumUtils.getEnum(null,"""");fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnum(Object.class,""Red"");fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enum.EnumUtilsTest.testGetValue",0,"public void testGetValue(){assertSame(ValuedColorEnum.RED,EnumUtils.getEnum(ValuedColorEnum.class,1));assertSame(ValuedColorEnum.GREEN,EnumUtils.getEnum(ValuedColorEnum.class,2));assertSame(ValuedColorEnum.BLUE,EnumUtils.getEnum(ValuedColorEnum.class,3));assertSame(null,EnumUtils.getEnum(ValuedColorEnum.class,4));assertSame(null,EnumUtils.getEnum(DummyEnum.class,5));}"
"org.apache.commons.lang.enum.EnumUtilsTest.testGetValueEx",0,"public void testGetValueEx(){try {EnumUtils.getEnum(null,0);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnum(Object.class,2);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testConstructorEx1",0,"public void testConstructorEx1(){try {new HashCodeBuilder(0,0);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testConstructorEx2",0,"public void testConstructorEx2(){try {new HashCodeBuilder(2,2);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCode",0,"public void testReflectionHashCode(){assertEquals(17 * 37,HashCodeBuilder.reflectionHashCode(new TestObject(0)));assertEquals(17 * 37 + 123456,HashCodeBuilder.reflectionHashCode(new TestObject(123456)));}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCode",0,"public void testReflectionHierarchyHashCode(){assertEquals(17 * 37 * 37,HashCodeBuilder.reflectionHashCode(new TestSubObject(0,0,0)));assertEquals(17 * 37 * 37* 37,HashCodeBuilder.reflectionHashCode(new TestSubObject(0,0,0),true));assertEquals((17 * 37 + 7890)* 37 + 123456,HashCodeBuilder.reflectionHashCode(new TestSubObject(123456,7890,0)));assertEquals(((17 * 37 + 7890)* 37 + 0)* 37 + 123456,HashCodeBuilder.reflectionHashCode(new TestSubObject(123456,7890,0),true));}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx1",0,"public void testReflectionHierarchyHashCodeEx1(){try {HashCodeBuilder.reflectionHashCode(0,0,new TestSubObject(0,0,0),true);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHierarchyHashCodeEx2",0,"public void testReflectionHierarchyHashCodeEx2(){try {HashCodeBuilder.reflectionHashCode(2,2,new TestSubObject(0,0,0),true);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeEx1",0,"public void testReflectionHashCodeEx1(){try {HashCodeBuilder.reflectionHashCode(0,0,new TestObject(0),true);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeEx2",0,"public void testReflectionHashCodeEx2(){try {HashCodeBuilder.reflectionHashCode(2,2,new TestObject(0),true);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeEx3",0,"public void testReflectionHashCodeEx3(){try {HashCodeBuilder.reflectionHashCode(13,19,null,true);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testSuper",0,"public void testSuper(){Object obj=new Object();assertEquals(17 * 37 + (19 * 41 + obj.hashCode()),new HashCodeBuilder(17,37).appendSuper(new HashCodeBuilder(19,41).append(obj).toHashCode()).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testObject",0,"public void testObject(){Object obj=null;assertEquals(17 * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj=new Object();assertEquals(17 * 37 + obj.hashCode(),new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testLong",0,"public void testLong(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((long)0L).toHashCode());assertEquals(17 * 37 + (int)(123456789L ^ (123456789L >> 32)),new HashCodeBuilder(17,37).append((long)123456789L).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testInt",0,"public void testInt(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((int)0).toHashCode());assertEquals(17 * 37 + 123456,new HashCodeBuilder(17,37).append((int)123456).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testShort",0,"public void testShort(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((short)0).toHashCode());assertEquals(17 * 37 + 12345,new HashCodeBuilder(17,37).append((short)12345).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testChar",0,"public void testChar(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((char)0).toHashCode());assertEquals(17 * 37 + 1234,new HashCodeBuilder(17,37).append((char)1234).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testByte",0,"public void testByte(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((byte)0).toHashCode());assertEquals(17 * 37 + 123,new HashCodeBuilder(17,37).append((byte)123).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testDouble",0,"public void testDouble(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((double)0d).toHashCode());double d=1234567.89;long l=Double.doubleToLongBits(d);assertEquals(17 * 37 + (int)(l ^ (l >> 32)),new HashCodeBuilder(17,37).append(d).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testFloat",0,"public void testFloat(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((float)0f).toHashCode());float f=1234.89f;int i=Float.floatToIntBits(f);assertEquals(17 * 37 + i,new HashCodeBuilder(17,37).append(f).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testBoolean",0,"public void testBoolean(){assertEquals(17 * 37 + 0,new HashCodeBuilder(17,37).append(true).toHashCode());assertEquals(17 * 37 + 1,new HashCodeBuilder(17,37).append(false).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testObjectArray",0,"public void testObjectArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((Object[])null).toHashCode());Object[]obj=new Object[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=new Object();assertEquals((17 * 37 + obj[0].hashCode())* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=new Object();assertEquals((17 * 37 + obj[0].hashCode())* 37 + obj[1].hashCode(),new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testObjectArrayAsObject",0,"public void testObjectArrayAsObject(){Object[]obj=new Object[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=new Object();assertEquals((17 * 37 + obj[0].hashCode())* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=new Object();assertEquals((17 * 37 + obj[0].hashCode())* 37 + obj[1].hashCode(),new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testLongArray",0,"public void testLongArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((long[])null).toHashCode());long[]obj=new long[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=5L;int h1=(int)(5L ^ (5L >> 32));assertEquals((17 * 37 + h1)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=6L;int h2=(int)(6L ^ (6L >> 32));assertEquals((17 * 37 + h1)* 37 + h2,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testLongArrayAsObject",0,"public void testLongArrayAsObject(){long[]obj=new long[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=5L;int h1=(int)(5L ^ (5L >> 32));assertEquals((17 * 37 + h1)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=6L;int h2=(int)(6L ^ (6L >> 32));assertEquals((17 * 37 + h1)* 37 + h2,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testIntArray",0,"public void testIntArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((int[])null).toHashCode());int[]obj=new int[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testIntArrayAsObject",0,"public void testIntArrayAsObject(){int[]obj=new int[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testShortArray",0,"public void testShortArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((short[])null).toHashCode());short[]obj=new short[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=(short)5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=(short)6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testShortArrayAsObject",0,"public void testShortArrayAsObject(){short[]obj=new short[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=(short)5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=(short)6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testCharArray",0,"public void testCharArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((char[])null).toHashCode());char[]obj=new char[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=(char)5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=(char)6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testCharArrayAsObject",0,"public void testCharArrayAsObject(){char[]obj=new char[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=(char)5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=(char)6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testByteArray",0,"public void testByteArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((byte[])null).toHashCode());byte[]obj=new byte[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=(byte)5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=(byte)6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testByteArrayAsObject",0,"public void testByteArrayAsObject(){byte[]obj=new byte[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=(byte)5;assertEquals((17 * 37 + 5)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=(byte)6;assertEquals((17 * 37 + 5)* 37 + 6,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testDoubleArray",0,"public void testDoubleArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((double[])null).toHashCode());double[]obj=new double[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=5.4d;long l1=Double.doubleToLongBits(5.4d);int h1=(int)(l1 ^ (l1 >> 32));assertEquals((17 * 37 + h1)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=6.3d;long l2=Double.doubleToLongBits(6.3d);int h2=(int)(l2 ^ (l2 >> 32));assertEquals((17 * 37 + h1)* 37 + h2,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testDoubleArrayAsObject",0,"public void testDoubleArrayAsObject(){double[]obj=new double[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=5.4d;long l1=Double.doubleToLongBits(5.4d);int h1=(int)(l1 ^ (l1 >> 32));assertEquals((17 * 37 + h1)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=6.3d;long l2=Double.doubleToLongBits(6.3d);int h2=(int)(l2 ^ (l2 >> 32));assertEquals((17 * 37 + h1)* 37 + h2,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testFloatArray",0,"public void testFloatArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((float[])null).toHashCode());float[]obj=new float[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=5.4f;int h1=Float.floatToIntBits(5.4f);assertEquals((17 * 37 + h1)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=6.3f;int h2=Float.floatToIntBits(6.3f);assertEquals((17 * 37 + h1)* 37 + h2,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testFloatArrayAsObject",0,"public void testFloatArrayAsObject(){float[]obj=new float[2];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=5.4f;int h1=Float.floatToIntBits(5.4f);assertEquals((17 * 37 + h1)* 37,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=6.3f;int h2=Float.floatToIntBits(6.3f);assertEquals((17 * 37 + h1)* 37 + h2,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testBooleanArray",0,"public void testBooleanArray(){assertEquals(17 * 37,new HashCodeBuilder(17,37).append((boolean[])null).toHashCode());boolean[]obj=new boolean[2];assertEquals((17 * 37 + 1)* 37 + 1,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=true;assertEquals((17 * 37 + 0)* 37 + 1,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=false;assertEquals((17 * 37 + 0)* 37 + 1,new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testBooleanArrayAsObject",0,"public void testBooleanArrayAsObject(){boolean[]obj=new boolean[2];assertEquals((17 * 37 + 1)* 37 + 1,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[0]=true;assertEquals((17 * 37 + 0)* 37 + 1,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());obj[1]=false;assertEquals((17 * 37 + 0)* 37 + 1,new HashCodeBuilder(17,37).append((Object)obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testBooleanMultiArray",0,"public void testBooleanMultiArray(){boolean[][]obj=new boolean[2][];assertEquals((17 * 37)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=new boolean[0];assertEquals(17 * 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=new boolean[1];assertEquals((17 * 37 + 1)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0]=new boolean[2];assertEquals(((17 * 37 + 1)* 37 + 1)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[0][0]=true;assertEquals(((17 * 37 + 0)* 37 + 1)* 37,new HashCodeBuilder(17,37).append(obj).toHashCode());obj[1]=new boolean[1];assertEquals((((17 * 37 + 0)* 37 + 1)* 37 + 1),new HashCodeBuilder(17,37).append(obj).toHashCode());}"
"org.apache.commons.lang.builder.HashCodeBuilderTest.testReflectionHashCodeExcludeFields",0,"public void testReflectionHashCodeExcludeFields()throws Exception {TestObjectWithMultipleFields x=new TestObjectWithMultipleFields(1,2,3);assertEquals((((17 * 37 + 1)* 37 + 2)* 37 + 3),HashCodeBuilder.reflectionHashCode(x));assertEquals((((17 * 37 + 1)* 37 + 2)* 37 + 3),HashCodeBuilder.reflectionHashCode(x,(String[])null));assertEquals((((17 * 37 + 1)* 37 + 2)* 37 + 3),HashCodeBuilder.reflectionHashCode(x,new String[]{}));assertEquals((((17 * 37 + 1)* 37 + 2)* 37 + 3),HashCodeBuilder.reflectionHashCode(x,new String[]{""xxx""}));assertEquals(((17 * 37 + 1)* 37 + 3),HashCodeBuilder.reflectionHashCode(x,new String[]{""two""}));assertEquals(((17 * 37 + 1)* 37 + 2),HashCodeBuilder.reflectionHashCode(x,new String[]{""three""}));assertEquals((17 * 37 + 1),HashCodeBuilder.reflectionHashCode(x,new String[]{""two"",""three""}));assertEquals(17,HashCodeBuilder.reflectionHashCode(x,new String[]{""one"",""two"",""three""}));assertEquals(17,HashCodeBuilder.reflectionHashCode(x,new String[]{""one"",""two"",""three"",""xxx""}));}"
"org.apache.commons.lang.math.RangeTest.testEqualsObject",0,"/** * Test method for 'org.apache.commons.lang.math.Range.equals(Object)'*/public void testEqualsObject(){RangeTestFixture r1=new RangeTestFixture((byte)0,(byte)5);RangeTestFixture r2=new RangeTestFixture((byte)0,(byte)5);RangeTestFixture r3=new RangeTestFixture((byte)0,(byte)10);assertEquals(r1,r1);assertEquals(r1,r2);assertEquals(r2,r2);assertTrue(r1.equals(r1));assertTrue(r2.equals(r2));assertTrue(r3.equals(r3));assertFalse(r2.equals(r3));assertFalse(r2.equals(null));assertFalse(r2.equals(""Ni!""));}"
"org.apache.commons.lang.math.RangeTest.testHashCode",0,"/** * Test method for 'org.apache.commons.lang.math.Range.hashCode()'*/public void testHashCode(){RangeTestFixture r1=new RangeTestFixture((byte)0,(byte)5);RangeTestFixture r2=new RangeTestFixture((byte)0,(byte)5);RangeTestFixture r3=new RangeTestFixture((byte)0,(byte)10);assertEquals(r1.hashCode(),r2.hashCode());assertFalse(r1.hashCode()== r3.hashCode());}"
"org.apache.commons.lang.math.RangeTest.testToString",0,"/** * Test method for 'org.apache.commons.lang.math.Range.toString()'*/public void testToString(){RangeTestFixture r1=new RangeTestFixture((byte)0,(byte)5);assertNotNull(r1.toString());assertNotNull(r1.toString());RangeTestFixture r2=new RangeTestFixture((byte)0,(byte)5);assertNotNull(r2.toString());assertNotNull(r2.toString());RangeTestFixture r3=new RangeTestFixture((byte)0,(byte)10);assertNotNull(r3.toString());assertNotNull(r3.toString());}"
"org.apache.commons.lang.math.FloatRangeTest.testConstructor1a",0,"public void testConstructor1a(){FloatRange nr=new FloatRange(8f);assertEquals(float8,nr.getMinimumNumber());assertEquals(float8,nr.getMaximumNumber());try {new FloatRange(Float.NaN);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.FloatRangeTest.testConstructor1b",0,"public void testConstructor1b(){FloatRange nr=new FloatRange(float8);assertSame(float8,nr.getMinimumNumber());assertSame(float8,nr.getMaximumNumber());Range r=new FloatRange(nonComparableNumber);try {new FloatRange(null);fail();}catch(IllegalArgumentException ex){}try {new FloatRange(new Double(Double.NaN));fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.FloatRangeTest.testConstructor2a",0,"public void testConstructor2a(){FloatRange nr=new FloatRange(8f,10f);assertEquals(float8,nr.getMinimumNumber());assertEquals(float10,nr.getMaximumNumber());nr=new FloatRange(10f,8f);assertEquals(float8,nr.getMinimumNumber());assertEquals(float10,nr.getMaximumNumber());try {new FloatRange(Float.NaN,8f);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.FloatRangeTest.testConstructor2b",0,"public void testConstructor2b(){FloatRange nr=new FloatRange(float8,float10);assertSame(float8,nr.getMinimumNumber());assertSame(float10,nr.getMaximumNumber());nr=new FloatRange(float10,float8);assertSame(float8,nr.getMinimumNumber());assertSame(float10,nr.getMaximumNumber());nr=new FloatRange(float8,float10);assertSame(float8,nr.getMinimumNumber());assertEquals(float10,nr.getMaximumNumber());try {new FloatRange(float8,null);fail();}catch(IllegalArgumentException ex){}try {new FloatRange(null,float8);fail();}catch(IllegalArgumentException ex){}try {new FloatRange(null,null);fail();}catch(IllegalArgumentException ex){}try {new FloatRange(new Double(Double.NaN),float10);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.FloatRangeTest.testContainsNumber",0,"public void testContainsNumber(){assertEquals(false,tenToTwenty.containsNumber(null));assertEquals(true,tenToTwenty.containsNumber(nonComparableNumber));assertEquals(false,tenToTwenty.containsNumber(five));assertEquals(true,tenToTwenty.containsNumber(ten));assertEquals(true,tenToTwenty.containsNumber(fifteen));assertEquals(true,tenToTwenty.containsNumber(twenty));assertEquals(false,tenToTwenty.containsNumber(twentyFive));assertEquals(false,tenToTwenty.containsNumber(long8));assertEquals(true,tenToTwenty.containsNumber(long10));assertEquals(true,tenToTwenty.containsNumber(long12));assertEquals(true,tenToTwenty.containsNumber(long20));assertEquals(false,tenToTwenty.containsNumber(long21));assertEquals(false,tenToTwenty.containsNumber(double8));assertEquals(true,tenToTwenty.containsNumber(double10));assertEquals(true,tenToTwenty.containsNumber(double12));assertEquals(true,tenToTwenty.containsNumber(double20));assertEquals(false,tenToTwenty.containsNumber(double21));assertEquals(false,tenToTwenty.containsNumber(float8));assertEquals(true,tenToTwenty.containsNumber(float10));assertEquals(true,tenToTwenty.containsNumber(float12));assertEquals(true,tenToTwenty.containsNumber(float20));assertEquals(false,tenToTwenty.containsNumber(float21));}"
"org.apache.commons.lang.math.FloatRangeTest.testToString",0,"public void testToString(){String str=tenToTwenty.toString();assertEquals(""Range[10.0,20.0]"",str);assertSame(str,tenToTwenty.toString());assertEquals(""Range[-20.0,-10.0]"",createRange(new Integer(-20),new Integer(-10)).toString());}"
"org.apache.commons.lang.BooleanUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new BooleanUtils());Constructor[]cons=BooleanUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(BooleanUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(BooleanUtils.class.getModifiers()));}"
"org.apache.commons.lang.BooleanUtilsTest.test_negate_Boolean",0,"public void test_negate_Boolean(){assertSame(null,BooleanUtils.negate(null));assertSame(Boolean.TRUE,BooleanUtils.negate(Boolean.FALSE));assertSame(Boolean.FALSE,BooleanUtils.negate(Boolean.TRUE));}"
"org.apache.commons.lang.BooleanUtilsTest.test_isTrue_Boolean",0,"public void test_isTrue_Boolean(){assertEquals(true,BooleanUtils.isTrue(Boolean.TRUE));assertEquals(false,BooleanUtils.isTrue(Boolean.FALSE));assertEquals(false,BooleanUtils.isTrue((Boolean)null));}"
"org.apache.commons.lang.BooleanUtilsTest.test_isFalse_Boolean",0,"public void test_isFalse_Boolean(){assertEquals(false,BooleanUtils.isFalse(Boolean.TRUE));assertEquals(true,BooleanUtils.isFalse(Boolean.FALSE));assertEquals(false,BooleanUtils.isFalse((Boolean)null));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_boolean",0,"public void test_toBooleanObject_boolean(){assertSame(Boolean.TRUE,BooleanUtils.toBooleanObject(true));assertSame(Boolean.FALSE,BooleanUtils.toBooleanObject(false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_Boolean",0,"public void test_toBoolean_Boolean(){assertEquals(true,BooleanUtils.toBoolean(Boolean.TRUE));assertEquals(false,BooleanUtils.toBoolean(Boolean.FALSE));assertEquals(false,BooleanUtils.toBoolean((Boolean)null));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanDefaultIfNull_Boolean_boolean",0,"public void test_toBooleanDefaultIfNull_Boolean_boolean(){assertEquals(true,BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE,true));assertEquals(true,BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE,false));assertEquals(false,BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE,true));assertEquals(false,BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE,false));assertEquals(true,BooleanUtils.toBooleanDefaultIfNull((Boolean)null,true));assertEquals(false,BooleanUtils.toBooleanDefaultIfNull((Boolean)null,false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_int",0,"public void test_toBoolean_int(){assertEquals(true,BooleanUtils.toBoolean(1));assertEquals(true,BooleanUtils.toBoolean(-1));assertEquals(false,BooleanUtils.toBoolean(0));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_int",0,"public void test_toBooleanObject_int(){assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(1));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(-1));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(0));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_Integer",0,"public void test_toBooleanObject_Integer(){assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(new Integer(1)));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(new Integer(-1)));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(new Integer(0)));assertEquals(null,BooleanUtils.toBooleanObject((Integer)null));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_int_int_int",0,"public void test_toBoolean_int_int_int(){assertEquals(true,BooleanUtils.toBoolean(6,6,7));assertEquals(false,BooleanUtils.toBoolean(7,6,7));try {BooleanUtils.toBoolean(8,6,7);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_Integer_Integer_Integer",0,"public void test_toBoolean_Integer_Integer_Integer(){Integer six=new Integer(6);Integer seven=new Integer(7);assertEquals(true,BooleanUtils.toBoolean((Integer)null,null,seven));assertEquals(false,BooleanUtils.toBoolean((Integer)null,six,null));try {BooleanUtils.toBoolean(null,six,seven);fail();}catch(IllegalArgumentException ex){}assertEquals(true,BooleanUtils.toBoolean(new Integer(6),six,seven));assertEquals(false,BooleanUtils.toBoolean(new Integer(7),six,seven));try {BooleanUtils.toBoolean(new Integer(8),six,seven);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_int_int_int",0,"public void test_toBooleanObject_int_int_int(){assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(6,6,7,8));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(7,6,7,8));assertEquals(null,BooleanUtils.toBooleanObject(8,6,7,8));try {BooleanUtils.toBooleanObject(9,6,7,8);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_Integer_Integer_Integer_Integer",0,"public void test_toBooleanObject_Integer_Integer_Integer_Integer(){Integer six=new Integer(6);Integer seven=new Integer(7);Integer eight=new Integer(8);assertSame(Boolean.TRUE,BooleanUtils.toBooleanObject((Integer)null,null,seven,eight));assertSame(Boolean.FALSE,BooleanUtils.toBooleanObject((Integer)null,six,null,eight));assertSame(null,BooleanUtils.toBooleanObject((Integer)null,six,seven,null));try {BooleanUtils.toBooleanObject(null,six,seven,eight);fail();}catch(IllegalArgumentException ex){}assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(new Integer(6),six,seven,eight));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(new Integer(7),six,seven,eight));assertEquals(null,BooleanUtils.toBooleanObject(new Integer(8),six,seven,eight));try {BooleanUtils.toBooleanObject(new Integer(9),six,seven,eight);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.test_toInteger_boolean",0,"public void test_toInteger_boolean(){assertEquals(1,BooleanUtils.toInteger(true));assertEquals(0,BooleanUtils.toInteger(false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_boolean",0,"public void test_toIntegerObject_boolean(){assertEquals(new Integer(1),BooleanUtils.toIntegerObject(true));assertEquals(new Integer(0),BooleanUtils.toIntegerObject(false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_Boolean",0,"public void test_toIntegerObject_Boolean(){assertEquals(new Integer(1),BooleanUtils.toIntegerObject(Boolean.TRUE));assertEquals(new Integer(0),BooleanUtils.toIntegerObject(Boolean.FALSE));assertEquals(null,BooleanUtils.toIntegerObject((Boolean)null));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toInteger_boolean_int_int",0,"public void test_toInteger_boolean_int_int(){assertEquals(6,BooleanUtils.toInteger(true,6,7));assertEquals(7,BooleanUtils.toInteger(false,6,7));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toInteger_Boolean_int_int_int",0,"public void test_toInteger_Boolean_int_int_int(){assertEquals(6,BooleanUtils.toInteger(Boolean.TRUE,6,7,8));assertEquals(7,BooleanUtils.toInteger(Boolean.FALSE,6,7,8));assertEquals(8,BooleanUtils.toInteger(null,6,7,8));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_boolean_Integer_Integer",0,"public void test_toIntegerObject_boolean_Integer_Integer(){Integer six=new Integer(6);Integer seven=new Integer(7);assertEquals(six,BooleanUtils.toIntegerObject(true,six,seven));assertEquals(seven,BooleanUtils.toIntegerObject(false,six,seven));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toIntegerObject_Boolean_Integer_Integer_Integer",0,"public void test_toIntegerObject_Boolean_Integer_Integer_Integer(){Integer six=new Integer(6);Integer seven=new Integer(7);Integer eight=new Integer(8);assertEquals(six,BooleanUtils.toIntegerObject(Boolean.TRUE,six,seven,eight));assertEquals(seven,BooleanUtils.toIntegerObject(Boolean.FALSE,six,seven,eight));assertEquals(eight,BooleanUtils.toIntegerObject((Boolean)null,six,seven,eight));assertEquals(null,BooleanUtils.toIntegerObject((Boolean)null,six,seven,null));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_String",0,"public void test_toBooleanObject_String(){assertEquals(null,BooleanUtils.toBooleanObject((String)null));assertEquals(null,BooleanUtils.toBooleanObject(""""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""false""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""no""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""off""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""FALSE""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""NO""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""OFF""));assertEquals(null,BooleanUtils.toBooleanObject(""oof""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""true""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""yes""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""on""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""TRUE""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""ON""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""YES""));assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""TruE""));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBooleanObject_String_String_String_String",0,"public void test_toBooleanObject_String_String_String_String(){assertSame(Boolean.TRUE,BooleanUtils.toBooleanObject((String)null,null,""N"",""U""));assertSame(Boolean.FALSE,BooleanUtils.toBooleanObject((String)null,""Y"",null,""U""));assertSame(null,BooleanUtils.toBooleanObject((String)null,""Y"",""N"",null));try {BooleanUtils.toBooleanObject((String)null,""Y"",""N"",""U"");fail();}catch(IllegalArgumentException ex){}assertEquals(Boolean.TRUE,BooleanUtils.toBooleanObject(""Y"",""Y"",""N"",""U""));assertEquals(Boolean.FALSE,BooleanUtils.toBooleanObject(""N"",""Y"",""N"",""U""));assertEquals(null,BooleanUtils.toBooleanObject(""U"",""Y"",""N"",""U""));try {BooleanUtils.toBooleanObject(null,""Y"",""N"",""U"");fail();}catch(IllegalArgumentException ex){}try {BooleanUtils.toBooleanObject(""X"",""Y"",""N"",""U"");fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_String",0,"public void test_toBoolean_String(){assertEquals(false,BooleanUtils.toBoolean((String)null));assertEquals(false,BooleanUtils.toBoolean(""""));assertEquals(false,BooleanUtils.toBoolean(""off""));assertEquals(false,BooleanUtils.toBoolean(""oof""));assertEquals(false,BooleanUtils.toBoolean(""yep""));assertEquals(false,BooleanUtils.toBoolean(""trux""));assertEquals(false,BooleanUtils.toBoolean(""false""));assertEquals(false,BooleanUtils.toBoolean(""a""));assertEquals(true,BooleanUtils.toBoolean(""true""));assertEquals(true,BooleanUtils.toBoolean(new StringBuffer(""tr"").append(""ue"").toString()));assertEquals(true,BooleanUtils.toBoolean(""truE""));assertEquals(true,BooleanUtils.toBoolean(""trUe""));assertEquals(true,BooleanUtils.toBoolean(""trUE""));assertEquals(true,BooleanUtils.toBoolean(""tRue""));assertEquals(true,BooleanUtils.toBoolean(""tRuE""));assertEquals(true,BooleanUtils.toBoolean(""tRUe""));assertEquals(true,BooleanUtils.toBoolean(""tRUE""));assertEquals(true,BooleanUtils.toBoolean(""TRUE""));assertEquals(true,BooleanUtils.toBoolean(""TRUe""));assertEquals(true,BooleanUtils.toBoolean(""TRuE""));assertEquals(true,BooleanUtils.toBoolean(""TRue""));assertEquals(true,BooleanUtils.toBoolean(""TrUE""));assertEquals(true,BooleanUtils.toBoolean(""TrUe""));assertEquals(true,BooleanUtils.toBoolean(""TruE""));assertEquals(true,BooleanUtils.toBoolean(""True""));assertEquals(true,BooleanUtils.toBoolean(""on""));assertEquals(true,BooleanUtils.toBoolean(""oN""));assertEquals(true,BooleanUtils.toBoolean(""On""));assertEquals(true,BooleanUtils.toBoolean(""ON""));assertEquals(true,BooleanUtils.toBoolean(""yes""));assertEquals(true,BooleanUtils.toBoolean(""yeS""));assertEquals(true,BooleanUtils.toBoolean(""yEs""));assertEquals(true,BooleanUtils.toBoolean(""yES""));assertEquals(true,BooleanUtils.toBoolean(""Yes""));assertEquals(true,BooleanUtils.toBoolean(""YeS""));assertEquals(true,BooleanUtils.toBoolean(""YEs""));assertEquals(true,BooleanUtils.toBoolean(""YES""));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toBoolean_String_String_String",0,"public void test_toBoolean_String_String_String(){assertEquals(true,BooleanUtils.toBoolean((String)null,null,""N""));assertEquals(false,BooleanUtils.toBoolean((String)null,""Y"",null));try {BooleanUtils.toBooleanObject((String)null,""Y"",""N"",""U"");fail();}catch(IllegalArgumentException ex){}assertEquals(true,BooleanUtils.toBoolean(""Y"",""Y"",""N""));assertEquals(false,BooleanUtils.toBoolean(""N"",""Y"",""N""));try {BooleanUtils.toBoolean(null,""Y"",""N"");fail();}catch(IllegalArgumentException ex){}try {BooleanUtils.toBoolean(""X"",""Y"",""N"");fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.test_toStringTrueFalse_Boolean",0,"public void test_toStringTrueFalse_Boolean(){assertEquals(null,BooleanUtils.toStringTrueFalse((Boolean)null));assertEquals(""true"",BooleanUtils.toStringTrueFalse(Boolean.TRUE));assertEquals(""false"",BooleanUtils.toStringTrueFalse(Boolean.FALSE));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toStringOnOff_Boolean",0,"public void test_toStringOnOff_Boolean(){assertEquals(null,BooleanUtils.toStringOnOff((Boolean)null));assertEquals(""on"",BooleanUtils.toStringOnOff(Boolean.TRUE));assertEquals(""off"",BooleanUtils.toStringOnOff(Boolean.FALSE));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toStringYesNo_Boolean",0,"public void test_toStringYesNo_Boolean(){assertEquals(null,BooleanUtils.toStringYesNo((Boolean)null));assertEquals(""yes"",BooleanUtils.toStringYesNo(Boolean.TRUE));assertEquals(""no"",BooleanUtils.toStringYesNo(Boolean.FALSE));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toString_Boolean_String_String_String",0,"public void test_toString_Boolean_String_String_String(){assertEquals(""U"",BooleanUtils.toString((Boolean)null,""Y"",""N"",""U""));assertEquals(""Y"",BooleanUtils.toString(Boolean.TRUE,""Y"",""N"",""U""));assertEquals(""N"",BooleanUtils.toString(Boolean.FALSE,""Y"",""N"",""U""));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toStringTrueFalse_boolean",0,"public void test_toStringTrueFalse_boolean(){assertEquals(""true"",BooleanUtils.toStringTrueFalse(true));assertEquals(""false"",BooleanUtils.toStringTrueFalse(false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toStringOnOff_boolean",0,"public void test_toStringOnOff_boolean(){assertEquals(""on"",BooleanUtils.toStringOnOff(true));assertEquals(""off"",BooleanUtils.toStringOnOff(false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toStringYesNo_boolean",0,"public void test_toStringYesNo_boolean(){assertEquals(""yes"",BooleanUtils.toStringYesNo(true));assertEquals(""no"",BooleanUtils.toStringYesNo(false));}"
"org.apache.commons.lang.BooleanUtilsTest.test_toString_boolean_String_String_String",0,"public void test_toString_boolean_String_String_String(){assertEquals(""Y"",BooleanUtils.toString(true,""Y"",""N""));assertEquals(""N"",BooleanUtils.toString(false,""Y"",""N""));}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_nullInput",0,"public void testXor_primitive_nullInput(){final boolean[]b=null;try {BooleanUtils.xor(b);fail(""Exception was not thrown for null input."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_emptyInput",0,"public void testXor_primitive_emptyInput(){try {BooleanUtils.xor(new boolean[]{});fail(""Exception was not thrown for empty input."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_validInput_2items",0,"public void testXor_primitive_validInput_2items(){assertTrue(""True result for (true,true)"",!BooleanUtils.xor(new boolean[]{true,true}));assertTrue(""True result for (false,false)"",!BooleanUtils.xor(new boolean[]{false,false}));assertTrue(""False result for (true,false)"",BooleanUtils.xor(new boolean[]{true,false}));assertTrue(""False result for (false,true)"",BooleanUtils.xor(new boolean[]{false,true}));}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_primitive_validInput_3items",0,"public void testXor_primitive_validInput_3items(){assertTrue(""False result for (false,false,true)"",BooleanUtils.xor(new boolean[]{false,false,true}));assertTrue(""False result for (false,true,false)"",BooleanUtils.xor(new boolean[]{false,true,false}));assertTrue(""False result for (true,false,false)"",BooleanUtils.xor(new boolean[]{true,false,false}));assertTrue(""True result for (true,true,true)"",!BooleanUtils.xor(new boolean[]{true,true,true}));assertTrue(""True result for (false,false)"",!BooleanUtils.xor(new boolean[]{false,false,false}));assertTrue(""True result for (true,true,false)"",!BooleanUtils.xor(new boolean[]{true,true,false}));assertTrue(""True result for (true,false,true)"",!BooleanUtils.xor(new boolean[]{true,false,true}));assertTrue(""False result for (false,true,true)"",!BooleanUtils.xor(new boolean[]{false,true,true}));}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_object_nullInput",0,"public void testXor_object_nullInput(){final Boolean[]b=null;try {BooleanUtils.xor(b);fail(""Exception was not thrown for null input."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_object_emptyInput",0,"public void testXor_object_emptyInput(){try {BooleanUtils.xor(new Boolean[]{});fail(""Exception was not thrown for empty input."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_object_nullElementInput",0,"public void testXor_object_nullElementInput(){try {BooleanUtils.xor(new Boolean[]{null});fail(""Exception was not thrown for null element input."");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_object_validInput_2items",0,"public void testXor_object_validInput_2items(){assertTrue(""True result for (true,true)"",!BooleanUtils.xor(new Boolean[]{Boolean.TRUE,Boolean.TRUE}).booleanValue());assertTrue(""True result for (false,false)"",!BooleanUtils.xor(new Boolean[]{Boolean.FALSE,Boolean.FALSE}).booleanValue());assertTrue(""False result for (true,false)"",BooleanUtils.xor(new Boolean[]{Boolean.TRUE,Boolean.FALSE}).booleanValue());assertTrue(""False result for (false,true)"",BooleanUtils.xor(new Boolean[]{Boolean.FALSE,Boolean.TRUE}).booleanValue());}"
"org.apache.commons.lang.BooleanUtilsTest.testXor_object_validInput_3items",0,"public void testXor_object_validInput_3items(){assertTrue(""False result for (false,false,true)"",BooleanUtils.xor(new Boolean[]{Boolean.FALSE,Boolean.FALSE,Boolean.TRUE}).booleanValue());assertTrue(""False result for (false,true,false)"",BooleanUtils.xor(new Boolean[]{Boolean.FALSE,Boolean.TRUE,Boolean.FALSE}).booleanValue());assertTrue(""False result for (true,false,false)"",BooleanUtils.xor(new Boolean[]{Boolean.TRUE,Boolean.FALSE,Boolean.FALSE}).booleanValue());assertTrue(""True result for (true,true,true)"",!BooleanUtils.xor(new Boolean[]{Boolean.TRUE,Boolean.TRUE,Boolean.TRUE}).booleanValue());assertTrue(""True result for (false,false)"",!BooleanUtils.xor(new Boolean[]{Boolean.FALSE,Boolean.FALSE,Boolean.FALSE}).booleanValue());assertTrue(""True result for (true,true,false)"",!BooleanUtils.xor(new Boolean[]{Boolean.TRUE,Boolean.TRUE,Boolean.FALSE}).booleanValue());assertTrue(""True result for (true,false,true)"",!BooleanUtils.xor(new Boolean[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE}).booleanValue());assertTrue(""False result for (false,true,true)"",!BooleanUtils.xor(new Boolean[]{Boolean.FALSE,Boolean.TRUE,Boolean.TRUE}).booleanValue());}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstring_StringInt",0,"public void testSubstring_StringInt(){assertEquals(null,StringUtils.substring(null,0));assertEquals("""",StringUtils.substring("""",0));assertEquals("""",StringUtils.substring("""",2));assertEquals("""",StringUtils.substring(SENTENCE,80));assertEquals(BAZ,StringUtils.substring(SENTENCE,8));assertEquals(BAZ,StringUtils.substring(SENTENCE,-3));assertEquals(SENTENCE,StringUtils.substring(SENTENCE,0));assertEquals(""abc"",StringUtils.substring(""abc"",-4));assertEquals(""abc"",StringUtils.substring(""abc"",-3));assertEquals(""bc"",StringUtils.substring(""abc"",-2));assertEquals(""c"",StringUtils.substring(""abc"",-1));assertEquals(""abc"",StringUtils.substring(""abc"",0));assertEquals(""bc"",StringUtils.substring(""abc"",1));assertEquals(""c"",StringUtils.substring(""abc"",2));assertEquals("""",StringUtils.substring(""abc"",3));assertEquals("""",StringUtils.substring(""abc"",4));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstring_StringIntInt",0,"public void testSubstring_StringIntInt(){assertEquals(null,StringUtils.substring(null,0,0));assertEquals(null,StringUtils.substring(null,1,2));assertEquals("""",StringUtils.substring("""",0,0));assertEquals("""",StringUtils.substring("""",1,2));assertEquals("""",StringUtils.substring("""",-2,-1));assertEquals("""",StringUtils.substring(SENTENCE,8,6));assertEquals(FOO,StringUtils.substring(SENTENCE,0,3));assertEquals(""o"",StringUtils.substring(SENTENCE,-9,3));assertEquals(FOO,StringUtils.substring(SENTENCE,0,-8));assertEquals(""o"",StringUtils.substring(SENTENCE,-9,-8));assertEquals(SENTENCE,StringUtils.substring(SENTENCE,0,80));assertEquals("""",StringUtils.substring(SENTENCE,2,2));assertEquals(""b"",StringUtils.substring(""abc"",-2,-1));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testLeft_String",0,"public void testLeft_String(){assertSame(null,StringUtils.left(null,-1));assertSame(null,StringUtils.left(null,0));assertSame(null,StringUtils.left(null,2));assertEquals("""",StringUtils.left("""",-1));assertEquals("""",StringUtils.left("""",0));assertEquals("""",StringUtils.left("""",2));assertEquals("""",StringUtils.left(FOOBAR,-1));assertEquals("""",StringUtils.left(FOOBAR,0));assertEquals(FOO,StringUtils.left(FOOBAR,3));assertSame(FOOBAR,StringUtils.left(FOOBAR,80));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testRight_String",0,"public void testRight_String(){assertSame(null,StringUtils.right(null,-1));assertSame(null,StringUtils.right(null,0));assertSame(null,StringUtils.right(null,2));assertEquals("""",StringUtils.right("""",-1));assertEquals("""",StringUtils.right("""",0));assertEquals("""",StringUtils.right("""",2));assertEquals("""",StringUtils.right(FOOBAR,-1));assertEquals("""",StringUtils.right(FOOBAR,0));assertEquals(BAR,StringUtils.right(FOOBAR,3));assertSame(FOOBAR,StringUtils.right(FOOBAR,80));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testMid_String",0,"public void testMid_String(){assertSame(null,StringUtils.mid(null,-1,0));assertSame(null,StringUtils.mid(null,0,-1));assertSame(null,StringUtils.mid(null,3,0));assertSame(null,StringUtils.mid(null,3,2));assertEquals("""",StringUtils.mid("""",0,-1));assertEquals("""",StringUtils.mid("""",0,0));assertEquals("""",StringUtils.mid("""",0,2));assertEquals("""",StringUtils.mid(FOOBAR,3,-1));assertEquals("""",StringUtils.mid(FOOBAR,3,0));assertEquals(""b"",StringUtils.mid(FOOBAR,3,1));assertEquals(FOO,StringUtils.mid(FOOBAR,0,3));assertEquals(BAR,StringUtils.mid(FOOBAR,3,3));assertEquals(FOOBAR,StringUtils.mid(FOOBAR,0,80));assertEquals(BAR,StringUtils.mid(FOOBAR,3,80));assertEquals("""",StringUtils.mid(FOOBAR,9,3));assertEquals(FOO,StringUtils.mid(FOOBAR,-1,3));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBefore_StringString",0,"public void testSubstringBefore_StringString(){assertEquals(""foo"",StringUtils.substringBefore(""fooXXbarXXbaz"",""XX""));assertEquals(null,StringUtils.substringBefore(null,null));assertEquals(null,StringUtils.substringBefore(null,""""));assertEquals(null,StringUtils.substringBefore(null,""XX""));assertEquals("""",StringUtils.substringBefore("""",null));assertEquals("""",StringUtils.substringBefore("""",""""));assertEquals("""",StringUtils.substringBefore("""",""XX""));assertEquals(""foo"",StringUtils.substringBefore(""foo"",null));assertEquals(""foo"",StringUtils.substringBefore(""foo"",""b""));assertEquals(""f"",StringUtils.substringBefore(""foot"",""o""));assertEquals("""",StringUtils.substringBefore(""abc"",""a""));assertEquals(""a"",StringUtils.substringBefore(""abcba"",""b""));assertEquals(""ab"",StringUtils.substringBefore(""abc"",""c""));assertEquals("""",StringUtils.substringBefore(""abc"",""""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstringAfter_StringString",0,"public void testSubstringAfter_StringString(){assertEquals(""barXXbaz"",StringUtils.substringAfter(""fooXXbarXXbaz"",""XX""));assertEquals(null,StringUtils.substringAfter(null,null));assertEquals(null,StringUtils.substringAfter(null,""""));assertEquals(null,StringUtils.substringAfter(null,""XX""));assertEquals("""",StringUtils.substringAfter("""",null));assertEquals("""",StringUtils.substringAfter("""",""""));assertEquals("""",StringUtils.substringAfter("""",""XX""));assertEquals("""",StringUtils.substringAfter(""foo"",null));assertEquals(""ot"",StringUtils.substringAfter(""foot"",""o""));assertEquals(""bc"",StringUtils.substringAfter(""abc"",""a""));assertEquals(""cba"",StringUtils.substringAfter(""abcba"",""b""));assertEquals("""",StringUtils.substringAfter(""abc"",""c""));assertEquals(""abc"",StringUtils.substringAfter(""abc"",""""));assertEquals("""",StringUtils.substringAfter(""abc"",""d""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBeforeLast_StringString",0,"public void testSubstringBeforeLast_StringString(){assertEquals(""fooXXbar"",StringUtils.substringBeforeLast(""fooXXbarXXbaz"",""XX""));assertEquals(null,StringUtils.substringBeforeLast(null,null));assertEquals(null,StringUtils.substringBeforeLast(null,""""));assertEquals(null,StringUtils.substringBeforeLast(null,""XX""));assertEquals("""",StringUtils.substringBeforeLast("""",null));assertEquals("""",StringUtils.substringBeforeLast("""",""""));assertEquals("""",StringUtils.substringBeforeLast("""",""XX""));assertEquals(""foo"",StringUtils.substringBeforeLast(""foo"",null));assertEquals(""foo"",StringUtils.substringBeforeLast(""foo"",""b""));assertEquals(""fo"",StringUtils.substringBeforeLast(""foo"",""o""));assertEquals(""abc\r\n"",StringUtils.substringBeforeLast(""abc\r\n"",""d""));assertEquals(""abc"",StringUtils.substringBeforeLast(""abcdabc"",""d""));assertEquals(""abcdabc"",StringUtils.substringBeforeLast(""abcdabcd"",""d""));assertEquals(""a"",StringUtils.substringBeforeLast(""abc"",""b""));assertEquals(""abc "",StringUtils.substringBeforeLast(""abc \n"",""\n""));assertEquals(""a"",StringUtils.substringBeforeLast(""a"",null));assertEquals(""a"",StringUtils.substringBeforeLast(""a"",""""));assertEquals("""",StringUtils.substringBeforeLast(""a"",""a""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstringAfterLast_StringString",0,"public void testSubstringAfterLast_StringString(){assertEquals(""baz"",StringUtils.substringAfterLast(""fooXXbarXXbaz"",""XX""));assertEquals(null,StringUtils.substringAfterLast(null,null));assertEquals(null,StringUtils.substringAfterLast(null,""""));assertEquals(null,StringUtils.substringAfterLast(null,""XX""));assertEquals("""",StringUtils.substringAfterLast("""",null));assertEquals("""",StringUtils.substringAfterLast("""",""""));assertEquals("""",StringUtils.substringAfterLast("""",""a""));assertEquals("""",StringUtils.substringAfterLast(""foo"",null));assertEquals("""",StringUtils.substringAfterLast(""foo"",""b""));assertEquals(""t"",StringUtils.substringAfterLast(""foot"",""o""));assertEquals(""bc"",StringUtils.substringAfterLast(""abc"",""a""));assertEquals(""a"",StringUtils.substringAfterLast(""abcba"",""b""));assertEquals("""",StringUtils.substringAfterLast(""abc"",""c""));assertEquals("""",StringUtils.substringAfterLast("""",""d""));assertEquals("""",StringUtils.substringAfterLast(""abc"",""""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBetween_StringString",0,"public void testSubstringBetween_StringString(){assertEquals(null,StringUtils.substringBetween(null,""tag""));assertEquals("""",StringUtils.substringBetween("""",""""));assertEquals(null,StringUtils.substringBetween("""",""abc""));assertEquals("""",StringUtils.substringBetween(""    "","" ""));assertEquals(null,StringUtils.substringBetween(""abc"",null));assertEquals("""",StringUtils.substringBetween(""abc"",""""));assertEquals(null,StringUtils.substringBetween(""abc"",""a""));assertEquals(""bc"",StringUtils.substringBetween(""abca"",""a""));assertEquals(""bc"",StringUtils.substringBetween(""abcabca"",""a""));assertEquals(""bar"",StringUtils.substringBetween(""\nbar\n"",""\n""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testSubstringBetween_StringStringString",0,"public void testSubstringBetween_StringStringString(){assertEquals(null,StringUtils.substringBetween(null,"""",""""));assertEquals("""",StringUtils.substringBetween("""","""",""""));assertEquals("""",StringUtils.substringBetween(""    "","" "",""  ""));assertEquals(""bar"",StringUtils.substringBetween(""<foo>bar</foo>"",""<foo>"",""</foo>""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testCountMatches_String",0,"public void testCountMatches_String(){assertEquals(0,StringUtils.countMatches(null,null));assertEquals(0,StringUtils.countMatches(""blah"",null));assertEquals(0,StringUtils.countMatches(null,""DD""));assertEquals(0,StringUtils.countMatches(""x"",""""));assertEquals(0,StringUtils.countMatches("""",""""));assertEquals(3,StringUtils.countMatches(""one long someone sentence of one"",""one""));assertEquals(0,StringUtils.countMatches(""one long someone sentence of one"",""two""));assertEquals(4,StringUtils.countMatches(""oooooooooooo"",""ooo""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testGetNestedString_StringString",0,"public void testGetNestedString_StringString(){assertEquals(null,StringUtils.getNestedString(null,""tag""));assertEquals("""",StringUtils.getNestedString("""",""""));assertEquals(null,StringUtils.getNestedString("""",""abc""));assertEquals("""",StringUtils.getNestedString(""    "","" ""));assertEquals(null,StringUtils.getNestedString(""abc"",null));assertEquals("""",StringUtils.getNestedString(""abc"",""""));assertEquals(null,StringUtils.getNestedString(""abc"",""a""));assertEquals(""bc"",StringUtils.getNestedString(""abca"",""a""));assertEquals(""bc"",StringUtils.getNestedString(""abcabca"",""a""));assertEquals(""bar"",StringUtils.getNestedString(""\nbar\n"",""\n""));}"
"org.apache.commons.lang.StringUtilsSubstringTest.testGetNestedString_StringStringString",0,"public void testGetNestedString_StringStringString(){assertEquals(null,StringUtils.getNestedString(null,"""",""""));assertEquals("""",StringUtils.getNestedString("""","""",""""));assertEquals("""",StringUtils.getNestedString(""    "","" "",""  ""));assertEquals(""bar"",StringUtils.getNestedString(""<foo>bar</foo>"",""<foo>"",""</foo>""));}"
"org.apache.commons.lang.time.FastDateFormatTest.test_getInstance",0,"public void test_getInstance(){FastDateFormat format1=FastDateFormat.getInstance();FastDateFormat format2=FastDateFormat.getInstance();assertSame(format1,format2);assertEquals(new SimpleDateFormat().toPattern(),format1.getPattern());}"
"org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String",0,"public void test_getInstance_String(){FastDateFormat format1=FastDateFormat.getInstance(""MM/DD/yyyy"");FastDateFormat format2=FastDateFormat.getInstance(""MM-DD-yyyy"");FastDateFormat format3=FastDateFormat.getInstance(""MM-DD-yyyy"");assertTrue(format1 != format2);assertSame(format2,format3);assertEquals(""MM/DD/yyyy"",format1.getPattern());assertEquals(TimeZone.getDefault(),format1.getTimeZone());assertEquals(TimeZone.getDefault(),format2.getTimeZone());assertEquals(false,format1.getTimeZoneOverridesCalendar());assertEquals(false,format2.getTimeZoneOverridesCalendar());}"
"org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_TimeZone",0,"public void test_getInstance_String_TimeZone(){Locale realDefaultLocale=Locale.getDefault();TimeZone realDefaultZone=TimeZone.getDefault();try {Locale.setDefault(Locale.US);TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));FastDateFormat format1=FastDateFormat.getInstance(""MM/DD/yyyy"",TimeZone.getTimeZone(""Atlantic/Reykjavik""));FastDateFormat format2=FastDateFormat.getInstance(""MM/DD/yyyy"");FastDateFormat format3=FastDateFormat.getInstance(""MM/DD/yyyy"",TimeZone.getDefault());FastDateFormat format4=FastDateFormat.getInstance(""MM/DD/yyyy"",TimeZone.getDefault());FastDateFormat format5=FastDateFormat.getInstance(""MM-DD-yyyy"",TimeZone.getDefault());FastDateFormat format6=FastDateFormat.getInstance(""MM-DD-yyyy"");assertTrue(format1 != format2);assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""),format1.getTimeZone());assertEquals(true,format1.getTimeZoneOverridesCalendar());assertEquals(TimeZone.getDefault(),format2.getTimeZone());assertEquals(false,format2.getTimeZoneOverridesCalendar());assertSame(format3,format4);assertTrue(format3 != format5);assertTrue(format4 != format6);}finally {Locale.setDefault(realDefaultLocale);TimeZone.setDefault(realDefaultZone);}}"
"org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_Locale",0,"public void test_getInstance_String_Locale(){Locale realDefaultLocale=Locale.getDefault();try {Locale.setDefault(Locale.US);FastDateFormat format1=FastDateFormat.getInstance(""MM/DD/yyyy"",Locale.GERMANY);FastDateFormat format2=FastDateFormat.getInstance(""MM/DD/yyyy"");FastDateFormat format3=FastDateFormat.getInstance(""MM/DD/yyyy"",Locale.GERMANY);assertTrue(format1 != format2);assertSame(format1,format3);assertSame(Locale.GERMANY,format1.getLocale());}finally {Locale.setDefault(realDefaultLocale);}}"
"org.apache.commons.lang.time.FastDateFormatTest.test_getInstance_String_TimeZone_Locale",0,"public void test_getInstance_String_TimeZone_Locale(){Locale realDefaultLocale=Locale.getDefault();TimeZone realDefaultZone=TimeZone.getDefault();try {Locale.setDefault(Locale.US);TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));FastDateFormat format1=FastDateFormat.getInstance(""MM/DD/yyyy"",TimeZone.getTimeZone(""Atlantic/Reykjavik""),Locale.GERMANY);FastDateFormat format2=FastDateFormat.getInstance(""MM/DD/yyyy"",Locale.GERMANY);FastDateFormat format3=FastDateFormat.getInstance(""MM/DD/yyyy"",TimeZone.getDefault(),Locale.GERMANY);assertTrue(format1 != format2);assertEquals(TimeZone.getTimeZone(""Atlantic/Reykjavik""),format1.getTimeZone());assertEquals(TimeZone.getDefault(),format2.getTimeZone());assertEquals(TimeZone.getDefault(),format3.getTimeZone());assertEquals(true,format1.getTimeZoneOverridesCalendar());assertEquals(false,format2.getTimeZoneOverridesCalendar());assertEquals(true,format3.getTimeZoneOverridesCalendar());assertEquals(Locale.GERMANY,format1.getLocale());assertEquals(Locale.GERMANY,format2.getLocale());assertEquals(Locale.GERMANY,format3.getLocale());}finally {Locale.setDefault(realDefaultLocale);TimeZone.setDefault(realDefaultZone);}}"
"org.apache.commons.lang.time.FastDateFormatTest.testFormat",0,"public void testFormat(){}"
"org.apache.commons.lang.time.FastDateFormatTest.testShortDateStyleWithLocales",0,"/** * Test case for  {@link FastDateFormat#getDateInstance(int,java.util.Locale)}.*/public void testShortDateStyleWithLocales(){Locale usLocale=Locale.US;Locale swedishLocale=new Locale(""sv"",""SE"");Calendar cal=Calendar.getInstance();cal.set(2004,1,3);FastDateFormat fdf=FastDateFormat.getDateInstance(FastDateFormat.SHORT,usLocale);assertEquals(""2/3/04"",fdf.format(cal));fdf=FastDateFormat.getDateInstance(FastDateFormat.SHORT,swedishLocale);assertEquals(""2004-02-03"",fdf.format(cal));}"
"org.apache.commons.lang.time.FastDateFormatTest.testLowYearPadding",0,"/** * Tests that pre-1000AD years get padded with yyyy*/public void testLowYearPadding(){Calendar cal=Calendar.getInstance();FastDateFormat format=FastDateFormat.getInstance(""yyyy/MM/DD"");cal.set(1,0,1);assertEquals(""0001/01/01"",format.format(cal));cal.set(10,0,1);assertEquals(""0010/01/01"",format.format(cal));cal.set(100,0,1);assertEquals(""0100/01/01"",format.format(cal));cal.set(999,0,1);assertEquals(""0999/01/01"",format.format(cal));}"
"org.apache.commons.lang.time.FastDateFormatTest.testMilleniumBug",0,"/** * Show Bug #39410 is solved*/public void testMilleniumBug(){Calendar cal=Calendar.getInstance();FastDateFormat format=FastDateFormat.getInstance(""dd.MM.yyyy"");cal.set(1000,0,1);assertEquals(""01.01.1000"",format.format(cal));}"
"org.apache.commons.lang.time.FastDateFormatTest.testSimpleDate",0,"/** * testLowYearPadding showed that the date was buggy This test confirms it,getting 366 back as a date*/public void testSimpleDate(){Calendar cal=Calendar.getInstance();FastDateFormat format=FastDateFormat.getInstance(""yyyy/MM/dd"");cal.set(2004,11,31);assertEquals(""2004/12/31"",format.format(cal));cal.set(999,11,31);assertEquals(""0999/12/31"",format.format(cal));cal.set(1,2,2);assertEquals(""0001/03/02"",format.format(cal));}"
"org.apache.commons.lang.time.DateUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new DateUtils());Constructor[]cons=DateUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(DateUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(DateUtils.class.getModifiers()));}"
"org.apache.commons.lang.time.DateUtilsTest.testIsSameDay_Date",0,"public void testIsSameDay_Date(){Date date1=new GregorianCalendar(2004,6,9,13,45).getTime();Date date2=new GregorianCalendar(2004,6,9,13,45).getTime();assertEquals(true,DateUtils.isSameDay(date1,date2));date2=new GregorianCalendar(2004,6,10,13,45).getTime();assertEquals(false,DateUtils.isSameDay(date1,date2));date1=new GregorianCalendar(2004,6,10,13,45).getTime();assertEquals(true,DateUtils.isSameDay(date1,date2));date2=new GregorianCalendar(2005,6,10,13,45).getTime();assertEquals(false,DateUtils.isSameDay(date1,date2));try {DateUtils.isSameDay((Date)null,(Date)null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testIsSameDay_Cal",0,"public void testIsSameDay_Cal(){GregorianCalendar cal1=new GregorianCalendar(2004,6,9,13,45);GregorianCalendar cal2=new GregorianCalendar(2004,6,9,13,45);assertEquals(true,DateUtils.isSameDay(cal1,cal2));cal2.add(Calendar.DAY_OF_YEAR,1);assertEquals(false,DateUtils.isSameDay(cal1,cal2));cal1.add(Calendar.DAY_OF_YEAR,1);assertEquals(true,DateUtils.isSameDay(cal1,cal2));cal2.add(Calendar.YEAR,1);assertEquals(false,DateUtils.isSameDay(cal1,cal2));try {DateUtils.isSameDay((Calendar)null,(Calendar)null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testIsSameInstant_Date",0,"public void testIsSameInstant_Date(){Date date1=new GregorianCalendar(2004,6,9,13,45).getTime();Date date2=new GregorianCalendar(2004,6,9,13,45).getTime();assertEquals(true,DateUtils.isSameInstant(date1,date2));date2=new GregorianCalendar(2004,6,10,13,45).getTime();assertEquals(false,DateUtils.isSameInstant(date1,date2));date1=new GregorianCalendar(2004,6,10,13,45).getTime();assertEquals(true,DateUtils.isSameInstant(date1,date2));date2=new GregorianCalendar(2005,6,10,13,45).getTime();assertEquals(false,DateUtils.isSameInstant(date1,date2));try {DateUtils.isSameInstant((Date)null,(Date)null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testIsSameInstant_Cal",0,"public void testIsSameInstant_Cal(){GregorianCalendar cal1=new GregorianCalendar(TimeZone.getTimeZone(""GMT+1""));GregorianCalendar cal2=new GregorianCalendar(TimeZone.getTimeZone(""GMT-1""));cal1.set(2004,6,9,13,45,0);cal1.set(Calendar.MILLISECOND,0);cal2.set(2004,6,9,13,45,0);cal2.set(Calendar.MILLISECOND,0);assertEquals(false,DateUtils.isSameInstant(cal1,cal2));cal2.set(2004,6,9,11,45,0);assertEquals(true,DateUtils.isSameInstant(cal1,cal2));try {DateUtils.isSameInstant((Calendar)null,(Calendar)null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testIsSameLocalTime_Cal",0,"public void testIsSameLocalTime_Cal(){GregorianCalendar cal1=new GregorianCalendar(TimeZone.getTimeZone(""GMT+1""));GregorianCalendar cal2=new GregorianCalendar(TimeZone.getTimeZone(""GMT-1""));cal1.set(2004,6,9,13,45,0);cal1.set(Calendar.MILLISECOND,0);cal2.set(2004,6,9,13,45,0);cal2.set(Calendar.MILLISECOND,0);assertEquals(true,DateUtils.isSameLocalTime(cal1,cal2));cal2.set(2004,6,9,11,45,0);assertEquals(false,DateUtils.isSameLocalTime(cal1,cal2));try {DateUtils.isSameLocalTime((Calendar)null,(Calendar)null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testParseDate",0,"public void testParseDate()throws Exception {GregorianCalendar cal=new GregorianCalendar(1972,11,3);String dateStr=""1972-12-03"";String[]parsers=new String[]{""yyyy'-'DDD"",""yyyy'-'MM'-'dd"",""yyyyMMdd""};Date date=DateUtils.parseDate(dateStr,parsers);assertEquals(cal.getTime(),date);dateStr=""1972-338"";date=DateUtils.parseDate(dateStr,parsers);assertEquals(cal.getTime(),date);dateStr=""19721203"";date=DateUtils.parseDate(dateStr,parsers);assertEquals(cal.getTime(),date);try {DateUtils.parseDate(""PURPLE"",parsers);fail();}catch(ParseException ex){}try {DateUtils.parseDate(""197212AB"",parsers);fail();}catch(ParseException ex){}try {DateUtils.parseDate(null,parsers);fail();}catch(IllegalArgumentException ex){}try {DateUtils.parseDate(dateStr,null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testAddYears",0,"public void testAddYears()throws Exception {Date base=new Date(MILLIS_TEST);Date result=DateUtils.addYears(base,0);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,2,1);result=DateUtils.addYears(base,1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2001,6,5,4,3,2,1);result=DateUtils.addYears(base,-1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,1999,6,5,4,3,2,1);}"
"org.apache.commons.lang.time.DateUtilsTest.testAddMonths",0,"public void testAddMonths(){}"
"org.apache.commons.lang.time.DateUtilsTest.testAddWeeks",0,"public void testAddWeeks()throws Exception {Date base=new Date(MILLIS_TEST);Date result=DateUtils.addWeeks(base,0);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,2,1);result=DateUtils.addWeeks(base,1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,12,4,3,2,1);result=DateUtils.addWeeks(base,-1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,5,28,4,3,2,1);}"
"org.apache.commons.lang.time.DateUtilsTest.testAddDays",0,"public void testAddDays()throws Exception {Date base=new Date(MILLIS_TEST);Date result=DateUtils.addDays(base,0);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,2,1);result=DateUtils.addDays(base,1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,6,4,3,2,1);result=DateUtils.addDays(base,-1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,4,4,3,2,1);}"
"org.apache.commons.lang.time.DateUtilsTest.testAddHours",0,"public void testAddHours()throws Exception {Date base=new Date(MILLIS_TEST);Date result=DateUtils.addHours(base,0);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,2,1);result=DateUtils.addHours(base,1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,5,3,2,1);result=DateUtils.addHours(base,-1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,3,3,2,1);}"
"org.apache.commons.lang.time.DateUtilsTest.testAddMinutes",0,"public void testAddMinutes()throws Exception {Date base=new Date(MILLIS_TEST);Date result=DateUtils.addMinutes(base,0);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,2,1);result=DateUtils.addMinutes(base,1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,4,2,1);result=DateUtils.addMinutes(base,-1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,2,2,1);}"
"org.apache.commons.lang.time.DateUtilsTest.testAddSeconds",0,"public void testAddSeconds()throws Exception {Date base=new Date(MILLIS_TEST);Date result=DateUtils.addSeconds(base,0);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,2,1);result=DateUtils.addSeconds(base,1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,3,1);result=DateUtils.addSeconds(base,-1);assertNotSame(base,result);assertDate(base,2000,6,5,4,3,2,1);assertDate(result,2000,6,5,4,3,1,1);}"
"org.apache.commons.lang.time.DateUtilsTest.testAddMilliseconds",0,"public void testAddMilliseconds(){}"
"org.apache.commons.lang.time.DateUtilsTest.testAddByField",0,"public void testAddByField(){}"
"org.apache.commons.lang.time.DateUtilsTest.testRound",0,"/** * Tests various values with the round method*/public void testRound()throws Exception {assertEquals(""round year-1 failed"",dateParser.parse(""January 1,2002""),DateUtils.round(date1,Calendar.YEAR));assertEquals(""round year-2 failed"",dateParser.parse(""January 1,2002""),DateUtils.round(date2,Calendar.YEAR));assertEquals(""round month-1 failed"",dateParser.parse(""February 1,2002""),DateUtils.round(date1,Calendar.MONTH));assertEquals(""round month-2 failed"",dateParser.parse(""December 1,2001""),DateUtils.round(date2,Calendar.MONTH));assertEquals(""round semimonth-0 failed"",dateParser.parse(""February 1,2002""),DateUtils.round(date0,DateUtils.SEMI_MONTH));assertEquals(""round semimonth-1 failed"",dateParser.parse(""February 16,2002""),DateUtils.round(date1,DateUtils.SEMI_MONTH));assertEquals(""round semimonth-2 failed"",dateParser.parse(""November 16,2001""),DateUtils.round(date2,DateUtils.SEMI_MONTH));assertEquals(""round date-1 failed"",dateParser.parse(""February 13,2002""),DateUtils.round(date1,Calendar.DATE));assertEquals(""round date-2 failed"",dateParser.parse(""November 18,2001""),DateUtils.round(date2,Calendar.DATE));assertEquals(""round hour-1 failed"",dateTimeParser.parse(""February 12,2002 13:00:00.000""),DateUtils.round(date1,Calendar.HOUR));assertEquals(""round hour-2 failed"",dateTimeParser.parse(""November 18,2001 1:00:00.000""),DateUtils.round(date2,Calendar.HOUR));assertEquals(""round minute-1 failed"",dateTimeParser.parse(""February 12,2002 12:35:00.000""),DateUtils.round(date1,Calendar.MINUTE));assertEquals(""round minute-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:00.000""),DateUtils.round(date2,Calendar.MINUTE));assertEquals(""round second-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:57.000""),DateUtils.round(date1,Calendar.SECOND));assertEquals(""round second-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:11.000""),DateUtils.round(date2,Calendar.SECOND));assertEquals(""truncate ampm-1 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.round(dateAmPm1,Calendar.AM_PM));assertEquals(""truncate ampm-2 failed"",dateTimeParser.parse(""February 4,2002 00:00:00.000""),DateUtils.round(dateAmPm2,Calendar.AM_PM));assertEquals(""truncate ampm-3 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.round(dateAmPm3,Calendar.AM_PM));assertEquals(""truncate ampm-4 failed"",dateTimeParser.parse(""February 4,2002 12:00:00.000""),DateUtils.round(dateAmPm4,Calendar.AM_PM));assertEquals(""round year-1 failed"",dateParser.parse(""January 1,2002""),DateUtils.round((Object)date1,Calendar.YEAR));assertEquals(""round year-2 failed"",dateParser.parse(""January 1,2002""),DateUtils.round((Object)date2,Calendar.YEAR));assertEquals(""round month-1 failed"",dateParser.parse(""February 1,2002""),DateUtils.round((Object)date1,Calendar.MONTH));assertEquals(""round month-2 failed"",dateParser.parse(""December 1,2001""),DateUtils.round((Object)date2,Calendar.MONTH));assertEquals(""round semimonth-1 failed"",dateParser.parse(""February 16,2002""),DateUtils.round((Object)date1,DateUtils.SEMI_MONTH));assertEquals(""round semimonth-2 failed"",dateParser.parse(""November 16,2001""),DateUtils.round((Object)date2,DateUtils.SEMI_MONTH));assertEquals(""round date-1 failed"",dateParser.parse(""February 13,2002""),DateUtils.round((Object)date1,Calendar.DATE));assertEquals(""round date-2 failed"",dateParser.parse(""November 18,2001""),DateUtils.round((Object)date2,Calendar.DATE));assertEquals(""round hour-1 failed"",dateTimeParser.parse(""February 12,2002 13:00:00.000""),DateUtils.round((Object)date1,Calendar.HOUR));assertEquals(""round hour-2 failed"",dateTimeParser.parse(""November 18,2001 1:00:00.000""),DateUtils.round((Object)date2,Calendar.HOUR));assertEquals(""round minute-1 failed"",dateTimeParser.parse(""February 12,2002 12:35:00.000""),DateUtils.round((Object)date1,Calendar.MINUTE));assertEquals(""round minute-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:00.000""),DateUtils.round((Object)date2,Calendar.MINUTE));assertEquals(""round second-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:57.000""),DateUtils.round((Object)date1,Calendar.SECOND));assertEquals(""round second-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:11.000""),DateUtils.round((Object)date2,Calendar.SECOND));assertEquals(""round calendar second-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:57.000""),DateUtils.round((Object)cal1,Calendar.SECOND));assertEquals(""round calendar second-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:11.000""),DateUtils.round((Object)cal2,Calendar.SECOND));assertEquals(""truncate ampm-1 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.round((Object)dateAmPm1,Calendar.AM_PM));assertEquals(""truncate ampm-2 failed"",dateTimeParser.parse(""February 4,2002 00:00:00.000""),DateUtils.round((Object)dateAmPm2,Calendar.AM_PM));assertEquals(""truncate ampm-3 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.round((Object)dateAmPm3,Calendar.AM_PM));assertEquals(""truncate ampm-4 failed"",dateTimeParser.parse(""February 4,2002 12:00:00.000""),DateUtils.round((Object)dateAmPm4,Calendar.AM_PM));try {DateUtils.round((Date)null,Calendar.SECOND);fail();}catch(IllegalArgumentException ex){}try {DateUtils.round((Calendar)null,Calendar.SECOND);fail();}catch(IllegalArgumentException ex){}try {DateUtils.round((Object)null,Calendar.SECOND);fail();}catch(IllegalArgumentException ex){}try {DateUtils.round("""",Calendar.SECOND);fail();}catch(ClassCastException ex){}try {DateUtils.round(date1,-9999);fail();}catch(IllegalArgumentException ex){}assertEquals(""truncate ampm-1 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.round((Object)calAmPm1,Calendar.AM_PM));assertEquals(""truncate ampm-2 failed"",dateTimeParser.parse(""February 4,2002 00:00:00.000""),DateUtils.round((Object)calAmPm2,Calendar.AM_PM));assertEquals(""truncate ampm-3 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.round((Object)calAmPm3,Calendar.AM_PM));assertEquals(""truncate ampm-4 failed"",dateTimeParser.parse(""February 4,2002 12:00:00.000""),DateUtils.round((Object)calAmPm4,Calendar.AM_PM));TimeZone.setDefault(zone);dateTimeParser.setTimeZone(zone);assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round(date4,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round((Object)cal4,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round(date5,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round((Object)cal5,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round(date6,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round((Object)cal6,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round(date7,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.round((Object)cal7,Calendar.DATE));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 01:00:00.000""),DateUtils.round(date4,Calendar.HOUR_OF_DAY));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 01:00:00.000""),DateUtils.round((Object)cal4,Calendar.HOUR_OF_DAY));if (SystemUtils.isJavaVersionAtLeast(1.4f)){assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 03:00:00.000""),DateUtils.round(date5,Calendar.HOUR_OF_DAY));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 03:00:00.000""),DateUtils.round((Object)cal5,Calendar.HOUR_OF_DAY));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 03:00:00.000""),DateUtils.round(date6,Calendar.HOUR_OF_DAY));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 03:00:00.000""),DateUtils.round((Object)cal6,Calendar.HOUR_OF_DAY));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 04:00:00.000""),DateUtils.round(date7,Calendar.HOUR_OF_DAY));assertEquals(""round MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 04:00:00.000""),DateUtils.round((Object)cal7,Calendar.HOUR_OF_DAY));}else {this.warn(""Some date rounding tests not run since the current version is "" + SystemUtils.JAVA_VERSION);}TimeZone.setDefault(defaultZone);dateTimeParser.setTimeZone(defaultZone);}"
"org.apache.commons.lang.time.DateUtilsTest.testTruncate",0,"/** * Tests various values with the trunc method*/public void testTruncate()throws Exception {assertEquals(""truncate year-1 failed"",dateParser.parse(""January 1,2002""),DateUtils.truncate(date1,Calendar.YEAR));assertEquals(""truncate year-2 failed"",dateParser.parse(""January 1,2001""),DateUtils.truncate(date2,Calendar.YEAR));assertEquals(""truncate month-1 failed"",dateParser.parse(""February 1,2002""),DateUtils.truncate(date1,Calendar.MONTH));assertEquals(""truncate month-2 failed"",dateParser.parse(""November 1,2001""),DateUtils.truncate(date2,Calendar.MONTH));assertEquals(""truncate semimonth-1 failed"",dateParser.parse(""February 1,2002""),DateUtils.truncate(date1,DateUtils.SEMI_MONTH));assertEquals(""truncate semimonth-2 failed"",dateParser.parse(""November 16,2001""),DateUtils.truncate(date2,DateUtils.SEMI_MONTH));assertEquals(""truncate date-1 failed"",dateParser.parse(""February 12,2002""),DateUtils.truncate(date1,Calendar.DATE));assertEquals(""truncate date-2 failed"",dateParser.parse(""November 18,2001""),DateUtils.truncate(date2,Calendar.DATE));assertEquals(""truncate hour-1 failed"",dateTimeParser.parse(""February 12,2002 12:00:00.000""),DateUtils.truncate(date1,Calendar.HOUR));assertEquals(""truncate hour-2 failed"",dateTimeParser.parse(""November 18,2001 1:00:00.000""),DateUtils.truncate(date2,Calendar.HOUR));assertEquals(""truncate minute-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:00.000""),DateUtils.truncate(date1,Calendar.MINUTE));assertEquals(""truncate minute-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:00.000""),DateUtils.truncate(date2,Calendar.MINUTE));assertEquals(""truncate second-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:56.000""),DateUtils.truncate(date1,Calendar.SECOND));assertEquals(""truncate second-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:11.000""),DateUtils.truncate(date2,Calendar.SECOND));assertEquals(""truncate ampm-1 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.truncate(dateAmPm1,Calendar.AM_PM));assertEquals(""truncate ampm-2 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.truncate(dateAmPm2,Calendar.AM_PM));assertEquals(""truncate ampm-3 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.truncate(dateAmPm3,Calendar.AM_PM));assertEquals(""truncate ampm-4 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.truncate(dateAmPm4,Calendar.AM_PM));assertEquals(""truncate year-1 failed"",dateParser.parse(""January 1,2002""),DateUtils.truncate((Object)date1,Calendar.YEAR));assertEquals(""truncate year-2 failed"",dateParser.parse(""January 1,2001""),DateUtils.truncate((Object)date2,Calendar.YEAR));assertEquals(""truncate month-1 failed"",dateParser.parse(""February 1,2002""),DateUtils.truncate((Object)date1,Calendar.MONTH));assertEquals(""truncate month-2 failed"",dateParser.parse(""November 1,2001""),DateUtils.truncate((Object)date2,Calendar.MONTH));assertEquals(""truncate semimonth-1 failed"",dateParser.parse(""February 1,2002""),DateUtils.truncate((Object)date1,DateUtils.SEMI_MONTH));assertEquals(""truncate semimonth-2 failed"",dateParser.parse(""November 16,2001""),DateUtils.truncate((Object)date2,DateUtils.SEMI_MONTH));assertEquals(""truncate date-1 failed"",dateParser.parse(""February 12,2002""),DateUtils.truncate((Object)date1,Calendar.DATE));assertEquals(""truncate date-2 failed"",dateParser.parse(""November 18,2001""),DateUtils.truncate((Object)date2,Calendar.DATE));assertEquals(""truncate hour-1 failed"",dateTimeParser.parse(""February 12,2002 12:00:00.000""),DateUtils.truncate((Object)date1,Calendar.HOUR));assertEquals(""truncate hour-2 failed"",dateTimeParser.parse(""November 18,2001 1:00:00.000""),DateUtils.truncate((Object)date2,Calendar.HOUR));assertEquals(""truncate minute-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:00.000""),DateUtils.truncate((Object)date1,Calendar.MINUTE));assertEquals(""truncate minute-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:00.000""),DateUtils.truncate((Object)date2,Calendar.MINUTE));assertEquals(""truncate second-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:56.000""),DateUtils.truncate((Object)date1,Calendar.SECOND));assertEquals(""truncate second-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:11.000""),DateUtils.truncate((Object)date2,Calendar.SECOND));assertEquals(""truncate ampm-1 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.truncate((Object)dateAmPm1,Calendar.AM_PM));assertEquals(""truncate ampm-2 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.truncate((Object)dateAmPm2,Calendar.AM_PM));assertEquals(""truncate ampm-3 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.truncate((Object)dateAmPm3,Calendar.AM_PM));assertEquals(""truncate ampm-4 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.truncate((Object)dateAmPm4,Calendar.AM_PM));assertEquals(""truncate calendar second-1 failed"",dateTimeParser.parse(""February 12,2002 12:34:56.000""),DateUtils.truncate((Object)cal1,Calendar.SECOND));assertEquals(""truncate calendar second-2 failed"",dateTimeParser.parse(""November 18,2001 1:23:11.000""),DateUtils.truncate((Object)cal2,Calendar.SECOND));assertEquals(""truncate ampm-1 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.truncate((Object)calAmPm1,Calendar.AM_PM));assertEquals(""truncate ampm-2 failed"",dateTimeParser.parse(""February 3,2002 00:00:00.000""),DateUtils.truncate((Object)calAmPm2,Calendar.AM_PM));assertEquals(""truncate ampm-3 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.truncate((Object)calAmPm3,Calendar.AM_PM));assertEquals(""truncate ampm-4 failed"",dateTimeParser.parse(""February 3,2002 12:00:00.000""),DateUtils.truncate((Object)calAmPm4,Calendar.AM_PM));try {DateUtils.truncate((Date)null,Calendar.SECOND);fail();}catch(IllegalArgumentException ex){}try {DateUtils.truncate((Calendar)null,Calendar.SECOND);fail();}catch(IllegalArgumentException ex){}try {DateUtils.truncate((Object)null,Calendar.SECOND);fail();}catch(IllegalArgumentException ex){}try {DateUtils.truncate("""",Calendar.SECOND);fail();}catch(ClassCastException ex){}TimeZone.setDefault(zone);dateTimeParser.setTimeZone(zone);assertEquals(""truncate MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.truncate(date3,Calendar.DATE));assertEquals(""truncate MET date across DST change-over"",dateTimeParser.parse(""March 30,2003 00:00:00.000""),DateUtils.truncate((Object)cal3,Calendar.DATE));assertEquals(""truncate MET date across DST change-over"",dateTimeParser.parse(""October 26,2003 00:00:00.000""),DateUtils.truncate(date8,Calendar.DATE));assertEquals(""truncate MET date across DST change-over"",dateTimeParser.parse(""October 26,2003 00:00:00.000""),DateUtils.truncate((Object)cal8,Calendar.DATE));TimeZone.setDefault(defaultZone);dateTimeParser.setTimeZone(defaultZone);Date endOfTime=new Date(Long.MAX_VALUE);GregorianCalendar endCal=new GregorianCalendar();endCal.setTime(endOfTime);try {DateUtils.truncate(endCal,Calendar.DATE);fail();}catch(ArithmeticException ex){}endCal.set(Calendar.YEAR,280000001);try {DateUtils.truncate(endCal,Calendar.DATE);fail();}catch(ArithmeticException ex){}endCal.set(Calendar.YEAR,280000000);Calendar cal=DateUtils.truncate(endCal,Calendar.DATE);assertEquals(0,cal.get(Calendar.HOUR));}"
"org.apache.commons.lang.time.DateUtilsTest.testTruncateLang59",0,"/** * Tests for LANG-59 see http://issues.apache.org/jira/browse/LANG-59*/public void testTruncateLang59()throws Exception {TimeZone MST_MDT=TimeZone.getTimeZone(""MST7MDT"");TimeZone.setDefault(MST_MDT);DateFormat format=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss.SSS z"");format.setTimeZone(MST_MDT);Date oct31_01MDT=new Date(1099206000000L);Date oct31MDT=new Date(oct31_01MDT.getTime()- 3600000L);Date oct31_01_02MDT=new Date(oct31_01MDT.getTime()+ 120000L);Date oct31_01_02_03MDT=new Date(oct31_01_02MDT.getTime()+ 3000L);Date oct31_01_02_03_04MDT=new Date(oct31_01_02_03MDT.getTime()+ 4L);assertEquals(""Check 00:00:00.000"",""2004-10-31 00:00:00.000 MDT"",format.format(oct31MDT));assertEquals(""Check 01:00:00.000"",""2004-10-31 01:00:00.000 MDT"",format.format(oct31_01MDT));assertEquals(""Check 01:02:00.000"",""2004-10-31 01:02:00.000 MDT"",format.format(oct31_01_02MDT));assertEquals(""Check 01:02:03.000"",""2004-10-31 01:02:03.000 MDT"",format.format(oct31_01_02_03MDT));assertEquals(""Check 01:02:03.004"",""2004-10-31 01:02:03.004 MDT"",format.format(oct31_01_02_03_04MDT));Calendar gval=Calendar.getInstance();gval.setTime(new Date(oct31_01MDT.getTime()));gval.set(Calendar.MINUTE,gval.get(Calendar.MINUTE));assertEquals(""Demonstrate Problem"",gval.getTime().getTime(),oct31_01MDT.getTime()+ 3600000L);assertEquals(""Truncate Calendar.MILLISECOND"",oct31_01_02_03_04MDT,DateUtils.truncate(oct31_01_02_03_04MDT,Calendar.MILLISECOND));assertEquals(""Truncate Calendar.SECOND"",oct31_01_02_03MDT,DateUtils.truncate(oct31_01_02_03_04MDT,Calendar.SECOND));assertEquals(""Truncate Calendar.MINUTE"",oct31_01_02MDT,DateUtils.truncate(oct31_01_02_03_04MDT,Calendar.MINUTE));assertEquals(""Truncate Calendar.HOUR_OF_DAY"",oct31_01MDT,DateUtils.truncate(oct31_01_02_03_04MDT,Calendar.HOUR_OF_DAY));assertEquals(""Truncate Calendar.HOUR"",oct31_01MDT,DateUtils.truncate(oct31_01_02_03_04MDT,Calendar.HOUR));assertEquals(""Truncate Calendar.DATE"",oct31MDT,DateUtils.truncate(oct31_01_02_03_04MDT,Calendar.DATE));assertEquals(""Round Calendar.MILLISECOND"",oct31_01_02_03_04MDT,DateUtils.round(oct31_01_02_03_04MDT,Calendar.MILLISECOND));assertEquals(""Round Calendar.SECOND"",oct31_01_02_03MDT,DateUtils.round(oct31_01_02_03_04MDT,Calendar.SECOND));assertEquals(""Round Calendar.MINUTE"",oct31_01_02MDT,DateUtils.round(oct31_01_02_03_04MDT,Calendar.MINUTE));assertEquals(""Round Calendar.HOUR_OF_DAY"",oct31_01MDT,DateUtils.round(oct31_01_02_03_04MDT,Calendar.HOUR_OF_DAY));assertEquals(""Round Calendar.HOUR"",oct31_01MDT,DateUtils.round(oct31_01_02_03_04MDT,Calendar.HOUR));assertEquals(""Round Calendar.DATE"",oct31MDT,DateUtils.round(oct31_01_02_03_04MDT,Calendar.DATE));TimeZone.setDefault(defaultZone);}"
"org.apache.commons.lang.time.DateUtilsTest.testIteratorEx",0,"/** * Tests the iterator exceptions*/public void testIteratorEx()throws Exception {try {DateUtils.iterator(Calendar.getInstance(),-9999);}catch(IllegalArgumentException ex){}try {DateUtils.iterator((Date)null,DateUtils.RANGE_WEEK_CENTER);fail();}catch(IllegalArgumentException ex){}try {DateUtils.iterator((Calendar)null,DateUtils.RANGE_WEEK_CENTER);fail();}catch(IllegalArgumentException ex){}try {DateUtils.iterator((Object)null,DateUtils.RANGE_WEEK_CENTER);fail();}catch(IllegalArgumentException ex){}try {DateUtils.iterator("""",DateUtils.RANGE_WEEK_CENTER);fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.time.DateUtilsTest.testWeekIterator",0,"/** * Tests the calendar iterator for week ranges*/public void testWeekIterator()throws Exception {Calendar now=Calendar.getInstance();for (int i=0;i < 7;i++){Calendar today=DateUtils.truncate(now,Calendar.DATE);Calendar sunday=DateUtils.truncate(now,Calendar.DATE);sunday.add(Calendar.DATE,1 - sunday.get(Calendar.DAY_OF_WEEK));Calendar monday=DateUtils.truncate(now,Calendar.DATE);if (monday.get(Calendar.DAY_OF_WEEK)== 1){monday.add(Calendar.DATE,-6);}else {monday.add(Calendar.DATE,2 - monday.get(Calendar.DAY_OF_WEEK));}Calendar centered=DateUtils.truncate(now,Calendar.DATE);centered.add(Calendar.DATE,-3);Iterator it=DateUtils.iterator(now,DateUtils.RANGE_WEEK_SUNDAY);assertWeekIterator(it,sunday);it=DateUtils.iterator(now,DateUtils.RANGE_WEEK_MONDAY);assertWeekIterator(it,monday);it=DateUtils.iterator(now,DateUtils.RANGE_WEEK_RELATIVE);assertWeekIterator(it,today);it=DateUtils.iterator(now,DateUtils.RANGE_WEEK_CENTER);assertWeekIterator(it,centered);it=DateUtils.iterator((Object)now,DateUtils.RANGE_WEEK_CENTER);assertWeekIterator(it,centered);it=DateUtils.iterator((Object)now.getTime(),DateUtils.RANGE_WEEK_CENTER);assertWeekIterator(it,centered);try {it.next();fail();}catch(NoSuchElementException ex){}it=DateUtils.iterator(now,DateUtils.RANGE_WEEK_CENTER);it.next();try {it.remove();}catch(UnsupportedOperationException ex){}now.add(Calendar.DATE,1);}}"
"org.apache.commons.lang.time.DateUtilsTest.testMonthIterator",0,"/** * Tests the calendar iterator for month-based ranges*/public void testMonthIterator()throws Exception {Iterator it=DateUtils.iterator(date1,DateUtils.RANGE_MONTH_SUNDAY);assertWeekIterator(it,dateParser.parse(""January 27,2002""),dateParser.parse(""March 2,2002""));it=DateUtils.iterator(date1,DateUtils.RANGE_MONTH_MONDAY);assertWeekIterator(it,dateParser.parse(""January 28,2002""),dateParser.parse(""March 3,2002""));it=DateUtils.iterator(date2,DateUtils.RANGE_MONTH_SUNDAY);assertWeekIterator(it,dateParser.parse(""October 28,2001""),dateParser.parse(""December 1,2001""));it=DateUtils.iterator(date2,DateUtils.RANGE_MONTH_MONDAY);assertWeekIterator(it,dateParser.parse(""October 29,2001""),dateParser.parse(""December 2,2001""));}"
"org.apache.commons.lang.enum.ValuedEnumTest.testName",0,"public void testName(){assertEquals(""Red"",ValuedColorEnum.RED.getName());assertEquals(""Green"",ValuedColorEnum.GREEN.getName());assertEquals(""Blue"",ValuedColorEnum.BLUE.getName());}"
"org.apache.commons.lang.enum.ValuedEnumTest.testValue",0,"public void testValue(){assertEquals(1,ValuedColorEnum.RED.getValue());assertEquals(2,ValuedColorEnum.GREEN.getValue());assertEquals(3,ValuedColorEnum.BLUE.getValue());}"
"org.apache.commons.lang.enum.ValuedEnumTest.testCompareTo",0,"public void testCompareTo(){assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE)== 0);assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE)< 0);assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED)> 0);}"
"org.apache.commons.lang.enum.ValuedEnumTest.testEquals",0,"public void testEquals(){assertSame(ValuedColorEnum.RED,ValuedColorEnum.RED);assertSame(ValuedColorEnum.getEnum(""Red""),ValuedColorEnum.RED);}"
"org.apache.commons.lang.enum.ValuedEnumTest.testToString",0,"public void testToString(){String toString=ValuedColorEnum.RED.toString();assertEquals(""ValuedColorEnum[Red=1]"",toString);assertSame(toString,ValuedColorEnum.RED.toString());}"
"org.apache.commons.lang.enum.ValuedEnumTest.testIterator",0,"public void testIterator(){Iterator it=ValuedColorEnum.iterator();assertSame(ValuedColorEnum.RED,it.next());assertSame(ValuedColorEnum.GREEN,it.next());assertSame(ValuedColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enum.ValuedEnumTest.testList",0,"public void testList(){List list=ValuedColorEnum.getEnumList();assertNotNull(list);assertEquals(list.size(),ValuedColorEnum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(ValuedColorEnum.RED,it.next());assertSame(ValuedColorEnum.GREEN,it.next());assertSame(ValuedColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enum.ValuedEnumTest.testMap",0,"public void testMap(){Map map=ValuedColorEnum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),ValuedColorEnum.getEnumList().size());assertTrue(map.containsValue(ValuedColorEnum.RED));assertTrue(map.containsValue(ValuedColorEnum.GREEN));assertTrue(map.containsValue(ValuedColorEnum.BLUE));assertSame(ValuedColorEnum.RED,map.get(""Red""));assertSame(ValuedColorEnum.GREEN,map.get(""Green""));assertSame(ValuedColorEnum.BLUE,map.get(""Blue""));}"
"org.apache.commons.lang.enum.ValuedEnumTest.testGet",0,"public void testGet(){assertSame(ValuedColorEnum.RED,ValuedColorEnum.getEnum(""Red""));assertSame(ValuedColorEnum.GREEN,ValuedColorEnum.getEnum(""Green""));assertSame(ValuedColorEnum.BLUE,ValuedColorEnum.getEnum(""Blue""));assertSame(null,ValuedColorEnum.getEnum(""Pink""));}"
"org.apache.commons.lang.enum.ValuedEnumTest.testGetValue",0,"public void testGetValue(){assertSame(ValuedColorEnum.RED,ValuedColorEnum.getEnum(1));assertSame(ValuedColorEnum.GREEN,ValuedColorEnum.getEnum(2));assertSame(ValuedColorEnum.BLUE,ValuedColorEnum.getEnum(3));assertSame(null,ValuedColorEnum.getEnum(4));}"
"org.apache.commons.lang.enum.ValuedEnumTest.testSerialization",0,"public void testSerialization(){assertSame(ValuedColorEnum.RED,SerializationUtils.clone(ValuedColorEnum.RED));assertSame(ValuedColorEnum.GREEN,SerializationUtils.clone(ValuedColorEnum.GREEN));assertSame(ValuedColorEnum.BLUE,SerializationUtils.clone(ValuedColorEnum.BLUE));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testConstructorEx1",0,"public void testConstructorEx1(){assertEquals(""<null>"",new ToStringBuilder(null).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testConstructorEx2",0,"public void testConstructorEx2(){assertEquals(""<null>"",new ToStringBuilder(null,null).toString());new ToStringBuilder(this.base,null).toString();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testConstructorEx3",0,"public void testConstructorEx3(){assertEquals(""<null>"",new ToStringBuilder(null,null,null).toString());new ToStringBuilder(this.base,null,null);new ToStringBuilder(this.base,ToStringStyle.DEFAULT_STYLE,null);}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testGetSetDefault",0,"public void testGetSetDefault(){try {ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE,ToStringBuilder.getDefaultStyle());}finally {ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);}}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testSetDefaultEx",0,"public void testSetDefaultEx(){try {ToStringBuilder.setDefaultStyle(null);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testBlank",0,"public void testBlank(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionInteger",0,"/** * Test wrapper for int primitive.*/public void testReflectionInteger(){assertEquals(baseStr + ""[value=5]"",ToStringBuilder.reflectionToString(base));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionCharacter",0,"/** * Test wrapper for char primitive.*/public void testReflectionCharacter(){Character c=new Character('A');assertEquals(this.toBaseString(c)+ ""[value=A]"",ToStringBuilder.reflectionToString(c));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionBoolean",0,"/** * Test wrapper for char boolean.*/public void testReflectionBoolean(){Boolean b;b=Boolean.TRUE;assertEquals(this.toBaseString(b)+ ""[value=true]"",ToStringBuilder.reflectionToString(b));b=Boolean.FALSE;assertEquals(this.toBaseString(b)+ ""[value=false]"",ToStringBuilder.reflectionToString(b));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionObjectArray",0,"public void testReflectionObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionLongArray",0,"public void testReflectionLongArray(){long[]array=new long[]{1,2,-3,4};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{1,2,-3,4}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionIntArray",0,"public void testReflectionIntArray(){int[]array=new int[]{1,2,-3,4};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{1,2,-3,4}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionShortArray",0,"public void testReflectionShortArray(){short[]array=new short[]{1,2,-3,4};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{1,2,-3,4}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionyteArray",0,"public void testReflectionyteArray(){byte[]array=new byte[]{1,2,-3,4};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{1,2,-3,4}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionCharArray",0,"public void testReflectionCharArray(){char[]array=new char[]{'A','2','_','D'};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{A,2,_,D}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionDoubleArray",0,"public void testReflectionDoubleArray(){double[]array=new double[]{1.0,2.9876,-3.00001,4.3};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionFloatArray",0,"public void testReflectionFloatArray(){float[]array=new float[]{1.0f,2.9876f,-3.00001f,4.3f};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionBooleanArray",0,"public void testReflectionBooleanArray(){boolean[]array=new boolean[]{true,false,false};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{true,false,false}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionFloatArrayArray",0,"public void testReflectionFloatArrayArray(){float[][]array=new float[][]{{1.0f,2.29686f},null,{Float.NaN}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionLongArrayArray",0,"public void testReflectionLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionIntArrayArray",0,"public void testReflectionIntArrayArray(){int[][]array=new int[][]{{1,2},null,{5}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionhortArrayArray",0,"public void testReflectionhortArrayArray(){short[][]array=new short[][]{{1,2},null,{5}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionByteArrayArray",0,"public void testReflectionByteArrayArray(){byte[][]array=new byte[][]{{1,2},null,{5}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionCharArrayArray",0,"public void testReflectionCharArrayArray(){char[][]array=new char[][]{{'A','B'},null,{'p'}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{A,B},<null>,{p}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionDoubleArrayArray",0,"public void testReflectionDoubleArrayArray(){double[][]array=new double[][]{{1.0,2.29686},null,{Double.NaN}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionBooleanArrayArray",0,"public void testReflectionBooleanArrayArray(){boolean[][]array=new boolean[][]{{true,false},null,{false}};String baseStr=this.toBaseString(array);assertEquals(baseStr + ""[{{true,false},<null>,{false}}]"",ToStringBuilder.reflectionToString(array));assertEquals(baseStr + ""[{{true,false},<null>,{false}}]"",ToStringBuilder.reflectionToString(array));array=null;assertReflectionArray(""<null>"",array);this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionHierarchyArrayList",0,"public void testReflectionHierarchyArrayList(){}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionHierarchy",0,"public void testReflectionHierarchy(){ReflectionTestFixtureA baseA=new ReflectionTestFixtureA();String baseStr=this.toBaseString(baseA);assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA));assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA,null));assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA,null,false));assertEquals(baseStr + ""[a=a,transientA=t]"",ToStringBuilder.reflectionToString(baseA,null,true));assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA,null,false,null));assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA,null,false,Object.class));assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA,null,false,List.class));assertEquals(baseStr + ""[a=a]"",ToStringBuilder.reflectionToString(baseA,null,false,ReflectionTestFixtureA.class));ReflectionTestFixtureB baseB=new ReflectionTestFixtureB();baseStr=this.toBaseString(baseB);assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB,null));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB,null,false));assertEquals(baseStr + ""[b=b,transientB=t,a=a,transientA=t]"",ToStringBuilder.reflectionToString(baseB,null,true));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB,null,false,null));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB,null,false,Object.class));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB,null,false,List.class));assertEquals(baseStr + ""[b=b,a=a]"",ToStringBuilder.reflectionToString(baseB,null,false,ReflectionTestFixtureA.class));assertEquals(baseStr + ""[b=b]"",ToStringBuilder.reflectionToString(baseB,null,false,ReflectionTestFixtureB.class));this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testInnerClassReflection",0,"public void testInnerClassReflection(){Outer outer=new Outer();assertEquals(toBaseString(outer)+ ""[inner="" + toBaseString(outer.inner)+ ""[]]"",outer.toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayCycle",0,"/** * Test an array element pointing to its container.*/public void testReflectionArrayCycle()throws Exception {Object[]objects=new Object[1];objects[0]=objects;assertEquals(this.toBaseString(objects)+ ""[{"" + this.toBaseString(objects)+ ""}]"",ToStringBuilder.reflectionToString(objects));this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayCycleLevel2",0,"/** * Test an array element pointing to its container.*/public void testReflectionArrayCycleLevel2()throws Exception {Object[]objects=new Object[1];Object[]objectsLevel2=new Object[1];objects[0]=objectsLevel2;objectsLevel2[0]=(Object)objects;assertEquals(this.toBaseString(objects)+ ""[{{"" + this.toBaseString(objects)+ ""}}]"",ToStringBuilder.reflectionToString(objects));assertEquals(this.toBaseString(objectsLevel2)+ ""[{{"" + this.toBaseString(objectsLevel2)+ ""}}]"",ToStringBuilder.reflectionToString(objectsLevel2));this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayArrayCycle",0,"public void testReflectionArrayArrayCycle()throws Exception {Object[][]objects=new Object[2][2];objects[0][0]=objects;objects[0][1]=objects;objects[1][0]=objects;objects[1][1]=objects;String basicToString=this.toBaseString(objects);assertEquals(basicToString + ""[{{"" + basicToString+ "",""+ basicToString+ ""},{""+ basicToString+ "",""+ basicToString+ ""}}]"",ToStringBuilder.reflectionToString(objects));this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testSimpleReflectionObjectCycle",0,"/** * Test an Object pointing to itself,the simplest test.* @throws Exception*/public void testSimpleReflectionObjectCycle()throws Exception {SimpleReflectionTestFixture simple=new SimpleReflectionTestFixture();simple.o=simple;assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());assertEquals(this.toBaseString(simple)+ ""[o="" + this.toBaseString(simple)+ ""]"",simple.toString());this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testSelfInstanceVarReflectionObjectCycle",0,"/** * Test a class that defines an ivar pointing to itself.* @throws Exception*/public void testSelfInstanceVarReflectionObjectCycle()throws Exception {SelfInstanceVarReflectionTestFixture test=new SelfInstanceVarReflectionTestFixture();assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());assertEquals(this.toBaseString(test)+ ""[typeIsSelf="" + this.toBaseString(test)+ ""]"",test.toString());this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testSelfInstanceTwoVarsReflectionObjectCycle",0,"/** * Test a class that defines an ivar pointing to itself.  This test was  created to show that handling cyclical object resulted in a missing endFieldSeparator call.* @throws Exception*/public void testSelfInstanceTwoVarsReflectionObjectCycle()throws Exception {SelfInstanceTwoVarsReflectionTestFixture test=new SelfInstanceTwoVarsReflectionTestFixture();assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());assertEquals(this.toBaseString(test)+ ""[typeIsSelf="" + this.toBaseString(test)+ "",otherType=""+ test.getOtherType().toString()+ ""]"",test.toString());this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionObjectCycle",0,"/** * Test Objects pointing to each other.* @throws Exception*/public void testReflectionObjectCycle()throws Exception {ReflectionTestCycleA a=new ReflectionTestCycleA();ReflectionTestCycleB b=new ReflectionTestCycleB();a.b=b;b.a=a;assertEquals(this.toBaseString(a)+ ""[b="" + this.toBaseString(b)+ ""[a=""+ this.toBaseString(a)+ ""]]"",a.toString());this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionArrayAndObjectCycle",0,"/** * Test a nasty combination of arrays and Objects pointing to each other. objects[0]-> SimpleReflectionTestFixture[o -> objects ]* @throws Exception*/public void testReflectionArrayAndObjectCycle()throws Exception {Object[]objects=new Object[1];SimpleReflectionTestFixture simple=new SimpleReflectionTestFixture(objects);objects[0]=(Object)simple;assertEquals(this.toBaseString(objects)+ ""[{"" + this.toBaseString(simple)+ ""[o=""+ this.toBaseString(objects)+ ""]""+ ""}]"",ToStringBuilder.reflectionToString(objects));assertEquals(this.toBaseString(simple)+ ""[o={"" + this.toBaseString(simple)+ ""}]"",ToStringBuilder.reflectionToString(simple));this.validateEmptyReflectionRegistry();}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[<null>,a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testAppendToString",0,"public void testAppendToString(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).appendToString(""Integer@8888[]"").toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).appendToString(""Integer@8888[<null>]"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendToString(""Integer@8888[]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[<null>,a=hello]"",new ToStringBuilder(base).appendToString(""Integer@8888[<null>]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendToString(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(i3).toString());assertEquals(baseStr + ""[a=<null>]"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(baseStr + ""[a=<Integer>]"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(baseStr + ""[a=[]]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testLong",0,"public void testLong(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(3L).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testInt",0,"public void testInt(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append((int)3).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",(int)3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",(int)3).append(""b"",(int)4).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testShort",0,"public void testShort(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append((short)3).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",(short)3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",(short)3).append(""b"",(short)4).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testChar",0,"public void testChar(){assertEquals(baseStr + ""[A]"",new ToStringBuilder(base).append((char)65).toString());assertEquals(baseStr + ""[a=A]"",new ToStringBuilder(base).append(""a"",(char)65).toString());assertEquals(baseStr + ""[a=A,b=B]"",new ToStringBuilder(base).append(""a"",(char)65).append(""b"",(char)66).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testByte",0,"public void testByte(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append((byte)3).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",(byte)3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",(byte)3).append(""b"",(byte)4).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testDouble",0,"public void testDouble(){assertEquals(baseStr + ""[3.2]"",new ToStringBuilder(base).append((double)3.2).toString());assertEquals(baseStr + ""[a=3.2]"",new ToStringBuilder(base).append(""a"",(double)3.2).toString());assertEquals(baseStr + ""[a=3.2,b=4.3]"",new ToStringBuilder(base).append(""a"",(double)3.2).append(""b"",(double)4.3).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testFloat",0,"public void testFloat(){assertEquals(baseStr + ""[3.2]"",new ToStringBuilder(base).append((float)3.2).toString());assertEquals(baseStr + ""[a=3.2]"",new ToStringBuilder(base).append(""a"",(float)3.2).toString());assertEquals(baseStr + ""[a=3.2,b=4.3]"",new ToStringBuilder(base).append(""a"",(float)3.2).append(""b"",(float)4.3).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testBoolean",0,"public void testBoolean(){assertEquals(baseStr + ""[true]"",new ToStringBuilder(base).append(true).toString());assertEquals(baseStr + ""[a=true]"",new ToStringBuilder(base).append(""a"",true).toString());assertEquals(baseStr + ""[a=true,b=false]"",new ToStringBuilder(base).append(""a"",true).append(""b"",false).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testIntArray",0,"public void testIntArray(){int[]array=new int[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testShortArray",0,"public void testShortArray(){short[]array=new short[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testByteArray",0,"public void testByteArray(){byte[]array=new byte[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testCharArray",0,"public void testCharArray(){char[]array=new char[]{'A','2','_','D'};assertEquals(baseStr + ""[{A,2,_,D}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{A,2,_,D}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testDoubleArray",0,"public void testDoubleArray(){double[]array=new double[]{1.0,2.9876,-3.00001,4.3};assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testFloatArray",0,"public void testFloatArray(){float[]array=new float[]{1.0f,2.9876f,-3.00001f,4.3f};assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testBooleanArray",0,"public void testBooleanArray(){boolean[]array=new boolean[]{true,false,false};assertEquals(baseStr + ""[{true,false,false}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{true,false,false}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testIntArrayArray",0,"public void testIntArrayArray(){int[][]array=new int[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testShortArrayArray",0,"public void testShortArrayArray(){short[][]array=new short[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testByteArrayArray",0,"public void testByteArrayArray(){byte[][]array=new byte[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testCharArrayArray",0,"public void testCharArrayArray(){char[][]array=new char[][]{{'A','B'},null,{'p'}};assertEquals(baseStr + ""[{{A,B},<null>,{p}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{A,B},<null>,{p}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testDoubleArrayArray",0,"public void testDoubleArrayArray(){double[][]array=new double[][]{{1.0,2.29686},null,{Double.NaN}};assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testFloatArrayArray",0,"public void testFloatArrayArray(){float[][]array=new float[][]{{1.0f,2.29686f},null,{Float.NaN}};assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testBooleanArrayArray",0,"public void testBooleanArrayArray(){boolean[][]array=new boolean[][]{{true,false},null,{false}};assertEquals(baseStr + ""[{{true,false},<null>,{false}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{true,false},<null>,{false}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testSimpleReflectionStatics",0,"public void testSimpleReflectionStatics(){SimpleReflectionStaticFieldsFixture instance1=new SimpleReflectionStaticFieldsFixture();assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345]"",ReflectionToStringBuilder.toString(instance1,null,false,true,SimpleReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345]"",ReflectionToStringBuilder.toString(instance1,null,true,true,SimpleReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345]"",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345]"",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionStatics",0,"/** * Tests ReflectionToStringBuilder.toString()for statics.*/public void testReflectionStatics(){ReflectionStaticFieldsFixture instance1=new ReflectionStaticFieldsFixture();assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]"",ReflectionToStringBuilder.toString(instance1,null,false,true,ReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]"",ReflectionToStringBuilder.toString(instance1,null,true,true,ReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]"",this.toStringWithStatics(instance1,null,ReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]"",this.toStringWithStatics(instance1,null,ReflectionStaticFieldsFixture.class));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testInheritedReflectionStatics",0,"/** * Tests ReflectionToStringBuilder.toString()for statics.*/public void testInheritedReflectionStatics(){InheritedReflectionStaticFieldsFixture instance1=new InheritedReflectionStaticFieldsFixture();assertEquals(this.toBaseString(instance1)+ ""[staticString2=staticString2,staticInt2=67890]"",ReflectionToStringBuilder.toString(instance1,null,false,true,InheritedReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]"",ReflectionToStringBuilder.toString(instance1,null,false,true,SimpleReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]"",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));assertEquals(this.toBaseString(instance1)+ ""[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]"",this.toStringWithStatics(instance1,null,SimpleReflectionStaticFieldsFixture.class));}"
"org.apache.commons.lang.builder.ToStringBuilderTest.testReflectionNull",0,"public void testReflectionNull(){assertEquals(""<null>"",ReflectionToStringBuilder.toString(null));}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_",0,"public void testConstructor_(){NotImplementedException ex=new NotImplementedException();assertEquals(""Code is not implemented"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""Code is not implemented"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_String1",0,"public void testConstructor_String1(){NotImplementedException ex=new NotImplementedException((String)null);assertEquals(""Code is not implemented"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""Code is not implemented"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_String2",0,"public void testConstructor_String2(){NotImplementedException ex=new NotImplementedException(""msg"");assertEquals(""msg"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""msg"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Throwable1",0,"public void testConstructor_Throwable1(){NotImplementedException ex=new NotImplementedException((Throwable)null);assertEquals(""Code is not implemented"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""Code is not implemented"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Throwable2",0,"public void testConstructor_Throwable2(){Exception npe=new NullPointerException();NotImplementedException ex=new NotImplementedException(npe);assertEquals(""Code is not implemented"",ex.getMessage());assertSame(npe,ex.getCause());assertEquals(""Code is not implemented"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_StringThrowable1",0,"public void testConstructor_StringThrowable1(){NotImplementedException ex=new NotImplementedException((String)null,(Throwable)null);assertEquals(""Code is not implemented"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""Code is not implemented"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_StringThrowable2",0,"public void testConstructor_StringThrowable2(){Exception npe=new NullPointerException();NotImplementedException ex=new NotImplementedException(""msg"",npe);assertEquals(""msg"",ex.getMessage());assertSame(npe,ex.getCause());assertEquals(""msg"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Class1",0,"public void testConstructor_Class1(){NotImplementedException ex=new NotImplementedException((Class)null);assertEquals(""Code is not implemented"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""Code is not implemented"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testConstructor_Class2",0,"public void testConstructor_Class2(){NotImplementedException ex=new NotImplementedException(String.class);assertEquals(""Code is not implemented in class java.lang.String"",ex.getMessage());assertEquals(null,ex.getCause());assertEquals(""Code is not implemented in class java.lang.String"",ex.getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testGetMessage_Indexed",0,"public void testGetMessage_Indexed()throws Exception {if (SystemUtils.isJavaVersionAtLeast(1.4f)){Exception ex1=new Exception(""nested 2"");Constructor con=Exception.class.getConstructor(new Class[]{String.class,Throwable.class});Exception ex2=(Exception)con.newInstance(new Object[]{""nested 1"",ex1});NotImplementedException ex=new NotImplementedException(ex2);assertEquals(""Code is not implemented"",ex.getMessage());assertEquals(""Code is not implemented"",ex.getMessage(0));assertEquals(""nested 1"",ex.getMessage(1));assertEquals(""nested 2"",ex.getMessage(2));String[]messages=ex.getMessages();assertEquals(3,messages.length);assertEquals(""Code is not implemented"",messages[0]);assertEquals(""nested 1"",messages[1]);assertEquals(""nested 2"",messages[2]);}}"
"org.apache.commons.lang.NotImplementedExceptionTest.testGetThrowable",0,"public void testGetThrowable(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));assertEquals(3,ex.getThrowableCount());assertEquals(NotImplementedException.class,ex.getThrowable(0).getClass());assertEquals(""Code is not implemented"",ex.getThrowable(0).getMessage());assertEquals(NestableException.class,ex.getThrowable(1).getClass());assertEquals(""nested 1"",ex.getThrowable(1).getMessage());assertEquals(NestableException.class,ex.getThrowable(2).getClass());assertEquals(""nested 2"",ex.getThrowable(2).getMessage());assertEquals(3,ex.getThrowables().length);assertEquals(NotImplementedException.class,ex.getThrowables()[0].getClass());assertEquals(""Code is not implemented"",ex.getThrowables()[0].getMessage());assertEquals(NestableException.class,ex.getThrowables()[1].getClass());assertEquals(""nested 1"",ex.getThrowables()[1].getMessage());assertEquals(NestableException.class,ex.getThrowables()[2].getClass());assertEquals(""nested 2"",ex.getThrowables()[2].getMessage());}"
"org.apache.commons.lang.NotImplementedExceptionTest.testIndexOfThrowable",0,"public void testIndexOfThrowable(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));assertEquals(0,ex.indexOfThrowable(NotImplementedException.class));assertEquals(1,ex.indexOfThrowable(NestableException.class));}"
"org.apache.commons.lang.NotImplementedExceptionTest.testIndexOfThrowable_Index",0,"public void testIndexOfThrowable_Index(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));assertEquals(1,ex.indexOfThrowable(NestableException.class,1));}"
"org.apache.commons.lang.NotImplementedExceptionTest.testPrintStackTrace",0,"public void testPrintStackTrace(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));ByteArrayOutputStream baos=new ByteArrayOutputStream();PrintStream ps=new PrintStream(baos);PrintStream errStream=System.err;System.setErr(ps);ex.printStackTrace();System.setErr(errStream);assertTrue(baos.toString().length()> 0);}"
"org.apache.commons.lang.NotImplementedExceptionTest.testPrintStackTrace_Stream",0,"public void testPrintStackTrace_Stream(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));ByteArrayOutputStream baos=new ByteArrayOutputStream();PrintStream ps=new PrintStream(baos);ex.printStackTrace(ps);assertTrue(baos.toString().length()> 0);}"
"org.apache.commons.lang.NotImplementedExceptionTest.testPrintStackTrace_Writer",0,"public void testPrintStackTrace_Writer(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));StringWriter stringWriter=new StringWriter();PrintWriter writer=new PrintWriter(stringWriter);ex.printStackTrace(writer);assertTrue(stringWriter.toString().length()> 0);}"
"org.apache.commons.lang.NotImplementedExceptionTest.testPrintPartialStackTrace_Writer",0,"public void testPrintPartialStackTrace_Writer(){NotImplementedException ex=new NotImplementedException(new NestableException(""nested 1"",new NestableException(""nested 2"")));StringWriter stringWriter=new StringWriter();PrintWriter writer=new PrintWriter(stringWriter);ex.printPartialStackTrace(writer);assertTrue(stringWriter.toString().length()> 0);}"
"org.apache.commons.lang.mutable.MutableFloatTest.testConstructors",0,"public void testConstructors(){assertEquals(0f,new MutableFloat().floatValue(),0.0001f);assertEquals(1f,new MutableFloat(1f).floatValue(),0.0001f);assertEquals(2f,new MutableFloat(new Float(2f)).floatValue(),0.0001f);assertEquals(3f,new MutableFloat(new MutableFloat(3f)).floatValue(),0.0001f);try {new MutableFloat(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableFloatTest.testGetSet",0,"public void testGetSet(){final MutableFloat mutNum=new MutableFloat(0f);assertEquals(0f,new MutableFloat().floatValue(),0.0001f);assertEquals(new Float(0),new MutableFloat().getValue());mutNum.setValue(1);assertEquals(1f,mutNum.floatValue(),0.0001f);assertEquals(new Float(1f),mutNum.getValue());mutNum.setValue(new Float(2f));assertEquals(2f,mutNum.floatValue(),0.0001f);assertEquals(new Float(2f),mutNum.getValue());mutNum.setValue(new MutableFloat(3f));assertEquals(3f,mutNum.floatValue(),0.0001f);assertEquals(new Float(3f),mutNum.getValue());try {mutNum.setValue(null);fail();}catch(NullPointerException ex){}try {mutNum.setValue(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableFloatTest.testNanInfinite",0,"public void testNanInfinite(){MutableFloat mutNum=new MutableFloat(Float.NaN);assertEquals(true,mutNum.isNaN());mutNum=new MutableFloat(Float.POSITIVE_INFINITY);assertEquals(true,mutNum.isInfinite());mutNum=new MutableFloat(Float.NEGATIVE_INFINITY);assertEquals(true,mutNum.isInfinite());}"
"org.apache.commons.lang.mutable.MutableFloatTest.testEquals",0,"public void testEquals(){final MutableFloat mutNumA=new MutableFloat(0f);final MutableFloat mutNumB=new MutableFloat(0f);final MutableFloat mutNumC=new MutableFloat(1f);assertEquals(true,mutNumA.equals(mutNumA));assertEquals(true,mutNumA.equals(mutNumB));assertEquals(true,mutNumB.equals(mutNumA));assertEquals(true,mutNumB.equals(mutNumB));assertEquals(false,mutNumA.equals(mutNumC));assertEquals(false,mutNumB.equals(mutNumC));assertEquals(true,mutNumC.equals(mutNumC));assertEquals(false,mutNumA.equals(null));assertEquals(false,mutNumA.equals(new Float(0f)));assertEquals(false,mutNumA.equals(""0""));}"
"org.apache.commons.lang.mutable.MutableFloatTest.testHashCode",0,"public void testHashCode(){final MutableFloat mutNumA=new MutableFloat(0f);final MutableFloat mutNumB=new MutableFloat(0f);final MutableFloat mutNumC=new MutableFloat(1f);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(true,mutNumA.hashCode()== new Float(0f).hashCode());}"
"org.apache.commons.lang.mutable.MutableFloatTest.testCompareTo",0,"public void testCompareTo(){final MutableFloat mutNum=new MutableFloat(0f);assertEquals(0,mutNum.compareTo(new MutableFloat(0f)));assertEquals(+1,mutNum.compareTo(new MutableFloat(-1f)));assertEquals(-1,mutNum.compareTo(new MutableFloat(1f)));try {mutNum.compareTo(null);fail();}catch(NullPointerException ex){}try {mutNum.compareTo(new Float(0f));fail();}catch(ClassCastException ex){}try {mutNum.compareTo(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableFloatTest.testPrimitiveValues",0,"public void testPrimitiveValues(){MutableFloat mutNum=new MutableFloat(1.7F);assertEquals(1,mutNum.intValue());assertEquals(1.7,mutNum.doubleValue(),0.00001);assertEquals((byte)1,mutNum.byteValue());assertEquals((short)1,mutNum.shortValue());assertEquals(1,mutNum.intValue());assertEquals(1L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableFloatTest.testToFloat",0,"public void testToFloat(){assertEquals(new Float(0f),new MutableFloat(0f).toFloat());assertEquals(new Float(12.3f),new MutableFloat(12.3f).toFloat());}"
"org.apache.commons.lang.mutable.MutableFloatTest.testIncrement",0,"public void testIncrement(){MutableFloat mutNum=new MutableFloat(1);mutNum.increment();assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableFloatTest.testDecrement",0,"public void testDecrement(){MutableFloat mutNum=new MutableFloat(1);mutNum.decrement();assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableFloatTest.testAddValuePrimitive",0,"public void testAddValuePrimitive(){MutableFloat mutNum=new MutableFloat(1);mutNum.add(1.1f);assertEquals(2.1f,mutNum.floatValue(),0.01f);}"
"org.apache.commons.lang.mutable.MutableFloatTest.testAddValueObject",0,"public void testAddValueObject(){MutableFloat mutNum=new MutableFloat(1);mutNum.add(new Float(1.1f));assertEquals(2.1f,mutNum.floatValue(),0.01f);}"
"org.apache.commons.lang.mutable.MutableFloatTest.testSubtractValuePrimitive",0,"public void testSubtractValuePrimitive(){MutableFloat mutNum=new MutableFloat(1);mutNum.subtract(0.9f);assertEquals(0.1f,mutNum.floatValue(),0.01f);}"
"org.apache.commons.lang.mutable.MutableFloatTest.testSubtractValueObject",0,"public void testSubtractValueObject(){MutableFloat mutNum=new MutableFloat(1);mutNum.subtract(new Float(0.9f));assertEquals(0.1f,mutNum.floatValue(),0.01f);}"
"org.apache.commons.lang.mutable.MutableFloatTest.testToString",0,"public void testToString(){assertEquals(""0.0"",new MutableFloat(0f).toString());assertEquals(""10.0"",new MutableFloat(10f).toString());assertEquals(""-123.0"",new MutableFloat(-123f).toString());}"
"org.apache.commons.lang.text.StrTokenizerTest.test1",0,"public void test1(){String input=""a;b;c;\""d;\""\""e\"";f;;;"";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterChar(';');tok.setQuoteChar('""');tok.setIgnoredMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"",""c"",""d;\""e"",""f"","""","""",""""};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.test2",0,"public void test2(){String input=""a;b;c ;\""d;\""\""e\"";f;;;"";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterChar(';');tok.setQuoteChar('""');tok.setIgnoredMatcher(StrMatcher.noneMatcher());tok.setIgnoreEmptyTokens(false);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"",""c "",""d;\""e"",""f"","" "","" "",""""};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.test3",0,"public void test3(){String input=""a;b;c;\""d;\""\""e\"";f;;;"";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterChar(';');tok.setQuoteChar('""');tok.setIgnoredMatcher(StrMatcher.noneMatcher());tok.setIgnoreEmptyTokens(false);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"","" c"",""d;\""e"",""f"","" "","" "",""""};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.test4",0,"public void test4(){String input=""a;b;c;\""d;\""\""e\"";f;;;"";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterChar(';');tok.setQuoteChar('""');tok.setIgnoredMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(true);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"",""c"",""d;\""e"",""f""};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.test5",0,"public void test5(){String input=""a;b;c;\""d;\""\""e\"";f;;;"";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterChar(';');tok.setQuoteChar('""');tok.setIgnoredMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"",""c"",""d;\""e"",""f"",null,null,null};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.test6",0,"public void test6(){String input=""a;b;c;\""d;\""\""e\"";f;;;"";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterChar(';');tok.setQuoteChar('""');tok.setIgnoredMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"","" c"",""d;\""e"",""f"",null,null,null};int nextCount=0;while (tok.hasNext()){tok.next();nextCount++;}int prevCount=0;while (tok.hasPrevious()){tok.previous();prevCount++;}assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);assertTrue(""could not cycle through entire token list"" + "" using the 'hasNext' and 'next' methods"",nextCount == expected.length);assertTrue(""could not cycle through entire token list"" + "" using the 'hasPrevious' and 'previous' methods"",prevCount == expected.length);}"
"org.apache.commons.lang.text.StrTokenizerTest.test7",0,"public void test7(){String input=""a   b c \""d e\"" f "";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterMatcher(StrMatcher.spaceMatcher());tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());tok.setIgnoredMatcher(StrMatcher.noneMatcher());tok.setIgnoreEmptyTokens(false);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"","""","""",""b"",""c"",""d e"",""f"",""""};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.test8",0,"public void test8(){String input=""a   b c \""d e\"" f "";StrTokenizer tok=new StrTokenizer(input);tok.setDelimiterMatcher(StrMatcher.spaceMatcher());tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());tok.setIgnoredMatcher(StrMatcher.noneMatcher());tok.setIgnoreEmptyTokens(true);String tokens[]=tok.getTokenArray();String expected[]=new String[]{""a"",""b"",""c"",""d e"",""f""};assertEquals(ArrayUtils.toString(tokens),expected.length,tokens.length);for (int i=0;i < expected.length;i++){assertTrue(""token["" + i + ""]was '""+ tokens[i]+ ""' but was expected to be '""+ expected[i]+ ""'"",ObjectUtils.equals(expected[i],tokens[i]));}}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasic1",0,"public void testBasic1(){String input=""a  b c"";StrTokenizer tok=new StrTokenizer(input);assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasic2",0,"public void testBasic2(){String input=""a \nb\fc"";StrTokenizer tok=new StrTokenizer(input);assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasic3",0,"public void testBasic3(){String input=""a \nb\u0001\fc"";StrTokenizer tok=new StrTokenizer(input);assertEquals(""a"",tok.next());assertEquals(""b\u0001"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasic4",0,"public void testBasic4(){String input=""a \""b\"" c"";StrTokenizer tok=new StrTokenizer(input);assertEquals(""a"",tok.next());assertEquals(""\""b\"""",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasic5",0,"public void testBasic5(){String input=""a:b':c"";StrTokenizer tok=new StrTokenizer(input,':','\'');assertEquals(""a"",tok.next());assertEquals(""b'"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicDelim1",0,"public void testBasicDelim1(){String input=""a:b:c"";StrTokenizer tok=new StrTokenizer(input,':');assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicDelim2",0,"public void testBasicDelim2(){String input=""a:b:c"";StrTokenizer tok=new StrTokenizer(input,',');assertEquals(""a:b:c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicEmpty1",0,"public void testBasicEmpty1(){String input=""a  b c"";StrTokenizer tok=new StrTokenizer(input);tok.setIgnoreEmptyTokens(false);assertEquals(""a"",tok.next());assertEquals("""",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicEmpty2",0,"public void testBasicEmpty2(){String input=""a  b c"";StrTokenizer tok=new StrTokenizer(input);tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(null,tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted1",0,"public void testBasicQuoted1(){String input=""a 'b' c"";StrTokenizer tok=new StrTokenizer(input,' ','\'');assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted2",0,"public void testBasicQuoted2(){String input=""a:'b':"";StrTokenizer tok=new StrTokenizer(input,':','\'');tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted3",0,"public void testBasicQuoted3(){String input=""a:'b''c'"";StrTokenizer tok=new StrTokenizer(input,':','\'');tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""b'c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted4",0,"public void testBasicQuoted4(){String input=""a: 'b' 'c' :d"";StrTokenizer tok=new StrTokenizer(input,':','\'');tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""b c"",tok.next());assertEquals(""d"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted5",0,"public void testBasicQuoted5(){String input=""a: 'b'x'c' :d"";StrTokenizer tok=new StrTokenizer(input,':','\'');tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""bxc"",tok.next());assertEquals(""d"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted6",0,"public void testBasicQuoted6(){String input=""a:'b'\""c':d"";StrTokenizer tok=new StrTokenizer(input,':');tok.setQuoteMatcher(StrMatcher.quoteMatcher());assertEquals(""a"",tok.next());assertEquals(""b\""c:d"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuoted7",0,"public void testBasicQuoted7(){String input=""a:\""There's a reason here\"":b"";StrTokenizer tok=new StrTokenizer(input,':');tok.setQuoteMatcher(StrMatcher.quoteMatcher());assertEquals(""a"",tok.next());assertEquals(""There's a reason here"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicQuotedTrimmed1",0,"public void testBasicQuotedTrimmed1(){String input=""a: 'b' :"";StrTokenizer tok=new StrTokenizer(input,':','\'');tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicTrimmed1",0,"public void testBasicTrimmed1(){String input=""a: b :  "";StrTokenizer tok=new StrTokenizer(input,':');tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicTrimmed2",0,"public void testBasicTrimmed2(){String input=""a:  b  :"";StrTokenizer tok=new StrTokenizer(input,':');tok.setTrimmerMatcher(StrMatcher.stringMatcher(""  ""));tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed1",0,"public void testBasicIgnoreTrimmed1(){String input=""a: bIGNOREc : "";StrTokenizer tok=new StrTokenizer(input,':');tok.setIgnoredMatcher(StrMatcher.stringMatcher(""IGNORE""));tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""bc"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed2",0,"public void testBasicIgnoreTrimmed2(){String input=""IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE "";StrTokenizer tok=new StrTokenizer(input,':');tok.setIgnoredMatcher(StrMatcher.stringMatcher(""IGNORE""));tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""bc"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed3",0,"public void testBasicIgnoreTrimmed3(){String input=""IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE "";StrTokenizer tok=new StrTokenizer(input,':');tok.setIgnoredMatcher(StrMatcher.stringMatcher(""IGNORE""));tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""  bc  "",tok.next());assertEquals(""  "",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testBasicIgnoreTrimmed4",0,"public void testBasicIgnoreTrimmed4(){String input=""IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE "";StrTokenizer tok=new StrTokenizer(input,':','\'');tok.setIgnoredMatcher(StrMatcher.stringMatcher(""IGNORE""));tok.setTrimmerMatcher(StrMatcher.trimMatcher());tok.setIgnoreEmptyTokens(false);tok.setEmptyTokenAsNull(true);assertEquals(""a"",tok.next());assertEquals(""bIGNOREcd"",tok.next());assertEquals(null,tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testListArray",0,"public void testListArray(){String input=""a  b c"";StrTokenizer tok=new StrTokenizer(input);String[]array=tok.getTokenArray();List list=tok.getTokenList();assertEquals(Arrays.asList(array),list);assertEquals(3,list.size());}"
"org.apache.commons.lang.text.StrTokenizerTest.testCSV",0,"public void testCSV(String data){this.testXSVAbc(StrTokenizer.getCSVInstance(data));this.testXSVAbc(StrTokenizer.getCSVInstance(data.toCharArray()));}"
"org.apache.commons.lang.text.StrTokenizerTest.testCSVEmpty",0,"public void testCSVEmpty(){this.testEmpty(StrTokenizer.getCSVInstance());this.testEmpty(StrTokenizer.getCSVInstance(""""));}"
"org.apache.commons.lang.text.StrTokenizerTest.testCSVSimple",0,"public void testCSVSimple(){this.testCSV(CSV_SIMPLE_FIXTURE);}"
"org.apache.commons.lang.text.StrTokenizerTest.testCSVSimpleNeedsTrim",0,"public void testCSVSimpleNeedsTrim(){this.testCSV(""   "" + CSV_SIMPLE_FIXTURE);this.testCSV(""   \n\t  "" + CSV_SIMPLE_FIXTURE);this.testCSV(""   \n  "" + CSV_SIMPLE_FIXTURE + ""\n\n\r"");}"
"org.apache.commons.lang.text.StrTokenizerTest.testEmpty",0,"void testEmpty(StrTokenizer tokenizer){this.checkClone(tokenizer);assertEquals(false,tokenizer.hasNext());assertEquals(false,tokenizer.hasPrevious());assertEquals(null,tokenizer.nextToken());assertEquals(0,tokenizer.size());try {tokenizer.next();fail();}catch(NoSuchElementException ex){}}"
"org.apache.commons.lang.text.StrTokenizerTest.testGetContent",0,"public void testGetContent(){String input=""a   b c \""d e\"" f "";StrTokenizer tok=new StrTokenizer(input);assertEquals(input,tok.getContent());tok=new StrTokenizer(input.toCharArray());assertEquals(input,tok.getContent());tok=new StrTokenizer();assertEquals(null,tok.getContent());}"
"org.apache.commons.lang.text.StrTokenizerTest.testChaining",0,"public void testChaining(){StrTokenizer tok=new StrTokenizer();assertEquals(tok,tok.reset());assertEquals(tok,tok.reset(""""));assertEquals(tok,tok.reset(new char[0]));assertEquals(tok,tok.setDelimiterChar(' '));assertEquals(tok,tok.setDelimiterString("" ""));assertEquals(tok,tok.setDelimiterMatcher(null));assertEquals(tok,tok.setQuoteChar(' '));assertEquals(tok,tok.setQuoteMatcher(null));assertEquals(tok,tok.setIgnoredChar(' '));assertEquals(tok,tok.setIgnoredMatcher(null));assertEquals(tok,tok.setTrimmerMatcher(null));assertEquals(tok,tok.setEmptyTokenAsNull(false));assertEquals(tok,tok.setIgnoreEmptyTokens(false));}"
"org.apache.commons.lang.text.StrTokenizerTest.testCloneNotSupportedException",0,"/** * Tests that the  {@link StrTokenizer#clone()}clone method catches {@link CloneNotSupportedException}and returns<code>null</code>.*/public void testCloneNotSupportedException(){Object notCloned=(new StrTokenizer(){Object cloneReset()throws CloneNotSupportedException {throw new CloneNotSupportedException(""test"");}}).clone();assertNull(notCloned);}"
"org.apache.commons.lang.text.StrTokenizerTest.testCloneNull",0,"public void testCloneNull(){StrTokenizer tokenizer=new StrTokenizer((char[])null);assertEquals(null,tokenizer.nextToken());tokenizer.reset();assertEquals(null,tokenizer.nextToken());StrTokenizer clonedTokenizer=(StrTokenizer)tokenizer.clone();tokenizer.reset();assertEquals(null,tokenizer.nextToken());assertEquals(null,clonedTokenizer.nextToken());}"
"org.apache.commons.lang.text.StrTokenizerTest.testCloneReset",0,"public void testCloneReset(){char[]input=new char[]{'a'};StrTokenizer tokenizer=new StrTokenizer(input);assertEquals(""a"",tokenizer.nextToken());tokenizer.reset();assertEquals(""a"",tokenizer.nextToken());StrTokenizer clonedTokenizer=(StrTokenizer)tokenizer.clone();input[0]='b';tokenizer.reset();assertEquals(""b"",tokenizer.nextToken());assertEquals(""a"",clonedTokenizer.nextToken());}"
"org.apache.commons.lang.text.StrTokenizerTest.testConstructor_String",0,"public void testConstructor_String(){StrTokenizer tok=new StrTokenizer(""a b"");assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());tok=new StrTokenizer("""");assertEquals(false,tok.hasNext());tok=new StrTokenizer((String)null);assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testConstructor_String_char",0,"public void testConstructor_String_char(){StrTokenizer tok=new StrTokenizer(""a b"",' ');assertEquals(1,tok.getDelimiterMatcher().isMatch("" "".toCharArray(),0,0,1));assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());tok=new StrTokenizer("""",' ');assertEquals(false,tok.hasNext());tok=new StrTokenizer((String)null,' ');assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testConstructor_String_char_char",0,"public void testConstructor_String_char_char(){StrTokenizer tok=new StrTokenizer(""a b"",' ','""');assertEquals(1,tok.getDelimiterMatcher().isMatch("" "".toCharArray(),0,0,1));assertEquals(1,tok.getQuoteMatcher().isMatch(""\"""".toCharArray(),0,0,1));assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());tok=new StrTokenizer("""",' ','""');assertEquals(false,tok.hasNext());tok=new StrTokenizer((String)null,' ','""');assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testConstructor_charArray",0,"public void testConstructor_charArray(){StrTokenizer tok=new StrTokenizer(""a b"".toCharArray());assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());tok=new StrTokenizer(new char[0]);assertEquals(false,tok.hasNext());tok=new StrTokenizer((char[])null);assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testConstructor_charArray_char",0,"public void testConstructor_charArray_char(){StrTokenizer tok=new StrTokenizer(""a b"".toCharArray(),' ');assertEquals(1,tok.getDelimiterMatcher().isMatch("" "".toCharArray(),0,0,1));assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());tok=new StrTokenizer(new char[0],' ');assertEquals(false,tok.hasNext());tok=new StrTokenizer((char[])null,' ');assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testConstructor_charArray_char_char",0,"public void testConstructor_charArray_char_char(){StrTokenizer tok=new StrTokenizer(""a b"".toCharArray(),' ','""');assertEquals(1,tok.getDelimiterMatcher().isMatch("" "".toCharArray(),0,0,1));assertEquals(1,tok.getQuoteMatcher().isMatch(""\"""".toCharArray(),0,0,1));assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(false,tok.hasNext());tok=new StrTokenizer(new char[0],' ','""');assertEquals(false,tok.hasNext());tok=new StrTokenizer((char[])null,' ','""');assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testReset",0,"public void testReset(){StrTokenizer tok=new StrTokenizer(""a b c"");assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());tok.reset();assertEquals(""a"",tok.next());assertEquals(""b"",tok.next());assertEquals(""c"",tok.next());assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testReset_String",0,"public void testReset_String(){StrTokenizer tok=new StrTokenizer(""x x x"");tok.reset(""d e"");assertEquals(""d"",tok.next());assertEquals(""e"",tok.next());assertEquals(false,tok.hasNext());tok.reset((String)null);assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testReset_charArray",0,"public void testReset_charArray(){StrTokenizer tok=new StrTokenizer(""x x x"");char[]array=new char[]{'a',' ','c'};tok.reset(array);array[1]='b';assertEquals(""abc"",tok.next());assertEquals(false,tok.hasNext());tok.reset((char[])null);assertEquals(false,tok.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testTSV",0,"public void testTSV(){this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));}"
"org.apache.commons.lang.text.StrTokenizerTest.testTSVEmpty",0,"public void testTSVEmpty(){this.testEmpty(StrTokenizer.getCSVInstance());this.testEmpty(StrTokenizer.getCSVInstance(""""));}"
"org.apache.commons.lang.text.StrTokenizerTest.testXSVAbc",0,"void testXSVAbc(StrTokenizer tokenizer){this.checkClone(tokenizer);assertEquals(-1,tokenizer.previousIndex());assertEquals(0,tokenizer.nextIndex());assertEquals(null,tokenizer.previousToken());assertEquals(""A"",tokenizer.nextToken());assertEquals(1,tokenizer.nextIndex());assertEquals(""b"",tokenizer.nextToken());assertEquals(2,tokenizer.nextIndex());assertEquals(""c"",tokenizer.nextToken());assertEquals(3,tokenizer.nextIndex());assertEquals(null,tokenizer.nextToken());assertEquals(3,tokenizer.nextIndex());assertEquals(""c"",tokenizer.previousToken());assertEquals(2,tokenizer.nextIndex());assertEquals(""b"",tokenizer.previousToken());assertEquals(1,tokenizer.nextIndex());assertEquals(""A"",tokenizer.previousToken());assertEquals(0,tokenizer.nextIndex());assertEquals(null,tokenizer.previousToken());assertEquals(0,tokenizer.nextIndex());assertEquals(-1,tokenizer.previousIndex());assertEquals(3,tokenizer.size());}"
"org.apache.commons.lang.text.StrTokenizerTest.testIteration",0,"public void testIteration(){StrTokenizer tkn=new StrTokenizer(""a b c"");assertEquals(false,tkn.hasPrevious());try {tkn.previous();fail();}catch(NoSuchElementException ex){}assertEquals(true,tkn.hasNext());assertEquals(""a"",tkn.next());try {tkn.remove();fail();}catch(UnsupportedOperationException ex){}try {tkn.set(""x"");fail();}catch(UnsupportedOperationException ex){}try {tkn.add(""y"");fail();}catch(UnsupportedOperationException ex){}assertEquals(true,tkn.hasPrevious());assertEquals(true,tkn.hasNext());assertEquals(""b"",tkn.next());assertEquals(true,tkn.hasPrevious());assertEquals(true,tkn.hasNext());assertEquals(""c"",tkn.next());assertEquals(true,tkn.hasPrevious());assertEquals(false,tkn.hasNext());try {tkn.next();fail();}catch(NoSuchElementException ex){}assertEquals(true,tkn.hasPrevious());assertEquals(false,tkn.hasNext());}"
"org.apache.commons.lang.text.StrTokenizerTest.testTokenizeSubclassInputChange",0,"public void testTokenizeSubclassInputChange(){StrTokenizer tkn=new StrTokenizer(""a b c d e""){protected List tokenize(char[]chars,int offset,int count){return super.tokenize(""w x y z"".toCharArray(),2,5);}};assertEquals(""x"",tkn.next());assertEquals(""y"",tkn.next());}"
"org.apache.commons.lang.text.StrTokenizerTest.testTokenizeSubclassOutputChange",0,"public void testTokenizeSubclassOutputChange(){StrTokenizer tkn=new StrTokenizer(""a b c""){protected List tokenize(char[]chars,int offset,int count){List list=super.tokenize(chars,offset,count);Collections.reverse(list);return list;}};assertEquals(""c"",tkn.next());assertEquals(""b"",tkn.next());assertEquals(""a"",tkn.next());}"
"org.apache.commons.lang.text.StrTokenizerTest.testToString",0,"public void testToString(){StrTokenizer tkn=new StrTokenizer(""a b c d e"");assertEquals(""StrTokenizer[not tokenized yet]"",tkn.toString());tkn.next();assertEquals(""StrTokenizer[a,b,c,d,e]"",tkn.toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testBlank",0,"public void testBlank(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[<null>,a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(i3).toString());assertEquals(baseStr + ""[a=<null>]"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(baseStr + ""[a=<Integer>]"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(baseStr + ""[a=[]]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testLong",0,"public void testLong(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(3L).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.ShortPrefixToStringStyleTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.StringEscapeUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new StringEscapeUtils());Constructor[]cons=StringEscapeUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(StringEscapeUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(StringEscapeUtils.class.getModifiers()));}"
"org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJava",0,"public void testEscapeJava()throws IOException {assertEquals(null,StringEscapeUtils.escapeJava(null));try {StringEscapeUtils.escapeJava(null,null);fail();}catch(IOException ex){fail();}catch(IllegalArgumentException ex){}try {StringEscapeUtils.escapeJava(null,"""");fail();}catch(IOException ex){fail();}catch(IllegalArgumentException ex){}assertEscapeJava(""empty string"","""","""");assertEscapeJava(FOO,FOO);assertEscapeJava(""tab"",""\\t"",""\t"");assertEscapeJava(""backslash"",""\\\\"",""\\"");assertEscapeJava(""single quote should not be escaped"",""'"",""'"");assertEscapeJava(""\\\\\\b\\t\\r"",""\\\b\t\r"");assertEscapeJava(""\\u1234"",""\u1234"");assertEscapeJava(""\\u0234"",""\u0234"");assertEscapeJava(""\\u00EF"",""\u00ef"");assertEscapeJava(""\\u0001"",""\u0001"");assertEscapeJava(""Should use capitalized unicode hex"",""\\uABCD"",""\uabcd"");assertEscapeJava(""He didn't say,\\\""stop!\\\"""",""He didn't say,\""stop!\"""");assertEscapeJava(""non-breaking space"",""This space is non-breaking:"" + ""\\u00A0"",""This space is non-breaking:\u00a0"");assertEscapeJava(""\\uABCD\\u1234\\u012C"",""\uABCD\u1234\u012C"");}"
"org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeJava",0,"public void testUnescapeJava()throws IOException {assertEquals(null,StringEscapeUtils.unescapeJava(null));try {StringEscapeUtils.unescapeJava(null,null);fail();}catch(IOException ex){fail();}catch(IllegalArgumentException ex){}try {StringEscapeUtils.unescapeJava(null,"""");fail();}catch(IOException ex){fail();}catch(IllegalArgumentException ex){}try {StringEscapeUtils.unescapeJava(""\\u02-3"");fail();}catch(RuntimeException ex){}assertUnescapeJava("""","""");assertUnescapeJava(""test"",""test"");assertUnescapeJava(""\ntest\b"",""\\ntest\\b"");assertUnescapeJava(""\u123425foo\ntest\b"",""\\u123425foo\\ntest\\b"");assertUnescapeJava(""'\foo\teste\r"",""\\'\\foo\\teste\\r"");assertUnescapeJava(""\\"",""\\"");assertUnescapeJava(""lowercase unicode"",""\uABCDx"",""\\uabcdx"");assertUnescapeJava(""uppercase unicode"",""\uABCDx"",""\\uABCDx"");assertUnescapeJava(""unicode as final character"",""\uABCD"",""\\uabcd"");}"
"org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaScript",0,"public void testEscapeJavaScript(){assertEquals(null,StringEscapeUtils.escapeJavaScript(null));try {StringEscapeUtils.escapeJavaScript(null,null);fail();}catch(IOException ex){fail();}catch(IllegalArgumentException ex){}try {StringEscapeUtils.escapeJavaScript(null,"""");fail();}catch(IOException ex){fail();}catch(IllegalArgumentException ex){}assertEquals(""He didn\\'t say,\\\""stop!\\\"""",StringEscapeUtils.escapeJavaScript(""He didn't say,\""stop!\""""));}"
"org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtml",0,"public void testEscapeHtml(){for (int i=0;i < htmlEscapes.length;++i){String message=htmlEscapes[i][0];String expected=htmlEscapes[i][1];String original=htmlEscapes[i][2];assertEquals(message,expected,StringEscapeUtils.escapeHtml(original));StringWriter sw=new StringWriter();try {StringEscapeUtils.escapeHtml(sw,original);}catch(IOException e){}String actual=original == null ? null : sw.toString();assertEquals(message,expected,actual);}}"
"org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHtml",0,"public void testUnescapeHtml(){for (int i=0;i < htmlEscapes.length;++i){String message=htmlEscapes[i][0];String expected=htmlEscapes[i][2];String original=htmlEscapes[i][1];assertEquals(message,expected,StringEscapeUtils.unescapeHtml(original));StringWriter sw=new StringWriter();try {StringEscapeUtils.unescapeHtml(sw,original);}catch(IOException e){}String actual=original == null ? null : sw.toString();assertEquals(message,expected,actual);}assertEquals(""funny chars pass through OK"",""Fran\u00E7ais"",StringEscapeUtils.unescapeHtml(""Fran\u00E7ais""));assertEquals(""Hello&;World"",StringEscapeUtils.unescapeHtml(""Hello&;World""));assertEquals(""Hello&#;World"",StringEscapeUtils.unescapeHtml(""Hello&#;World""));assertEquals(""Hello&# ;World"",StringEscapeUtils.unescapeHtml(""Hello&# ;World""));assertEquals(""Hello&##;World"",StringEscapeUtils.unescapeHtml(""Hello&##;World""));}"
"org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHexCharsHtml",0,"public void testUnescapeHexCharsHtml(){assertEquals(""hex number unescape"",""\u0080\u009F"",StringEscapeUtils.unescapeHtml(""&#x80;&#x9F;""));assertEquals(""hex number unescape"",""\u0080\u009F"",StringEscapeUtils.unescapeHtml(""&#X80;&#X9F;""));for (char i=Character.MIN_VALUE;i < Character.MAX_VALUE;i++){Character c1=new Character(i);Character c2=new Character((char)(i + 1));String expected=c1.toString()+ c2.toString();String escapedC1=""&#x"" + Integer.toHexString((c1.charValue()))+ "";"";String escapedC2=""&#x"" + Integer.toHexString((c2.charValue()))+ "";"";assertEquals(""hex number unescape index "" + (int)i,expected,StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));}}"
"org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeUnknownEntity",0,"public void testUnescapeUnknownEntity()throws Exception {assertEquals(""&zzzz;"",StringEscapeUtils.unescapeHtml(""&zzzz;""));}"
"org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtmlVersions",0,"public void testEscapeHtmlVersions()throws Exception {assertEquals(""&Beta;"",StringEscapeUtils.escapeHtml(""\u0392""));assertEquals(""\u0392"",StringEscapeUtils.unescapeHtml(""&Beta;""));}"
"org.apache.commons.lang.StringEscapeUtilsTest.testEscapeXml",0,"public void testEscapeXml()throws Exception {assertEquals(""&lt;abc&gt;"",StringEscapeUtils.escapeXml(""<abc>""));assertEquals(""<abc>"",StringEscapeUtils.unescapeXml(""&lt;abc&gt;""));assertEquals(""XML should use numbers,not names for HTML entities"",""&#161;"",StringEscapeUtils.escapeXml(""\u00A1""));assertEquals(""XML should use numbers,not names for HTML entities"",""\u00A0"",StringEscapeUtils.unescapeXml(""&#160;""));assertEquals(""ain't"",StringEscapeUtils.unescapeXml(""ain&apos;t""));assertEquals(""ain&apos;t"",StringEscapeUtils.escapeXml(""ain't""));assertEquals("""",StringEscapeUtils.escapeXml(""""));assertEquals(null,StringEscapeUtils.escapeXml(null));assertEquals(null,StringEscapeUtils.unescapeXml(null));StringWriter sw=new StringWriter();try {StringEscapeUtils.escapeXml(sw,""<abc>"");}catch(IOException e){}assertEquals(""XML was escaped incorrectly"",""&lt;abc&gt;"",sw.toString());sw=new StringWriter();try {StringEscapeUtils.unescapeXml(sw,""&lt;abc&gt;"");}catch(IOException e){}assertEquals(""XML was unescaped incorrectly"",""<abc>"",sw.toString());}"
"org.apache.commons.lang.StringEscapeUtilsTest.testEscapeSql",0,"public void testEscapeSql()throws Exception {assertEquals(""don''t stop"",StringEscapeUtils.escapeSql(""don't stop""));assertEquals("""",StringEscapeUtils.escapeSql(""""));assertEquals(null,StringEscapeUtils.escapeSql(null));}"
"org.apache.commons.lang.StringEscapeUtilsTest.testStandaloneAmphersand",0,"public void testStandaloneAmphersand(){assertEquals(""<P&O>"",StringEscapeUtils.unescapeHtml(""&lt;P&O&gt;""));assertEquals(""test & <"",StringEscapeUtils.unescapeHtml(""test & &lt;""));assertEquals(""<P&O>"",StringEscapeUtils.unescapeXml(""&lt;P&O&gt;""));assertEquals(""test & <"",StringEscapeUtils.unescapeXml(""test & &lt;""));}"
"org.apache.commons.lang.text.StrMatcherTest.testCommaMatcher",0,"public void testCommaMatcher(){StrMatcher matcher=StrMatcher.commaMatcher();assertSame(matcher,StrMatcher.commaMatcher());assertEquals(0,matcher.isMatch(BUFFER1,0,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,1,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,2,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testTabMatcher",0,"public void testTabMatcher(){StrMatcher matcher=StrMatcher.tabMatcher();assertSame(matcher,StrMatcher.tabMatcher());assertEquals(0,matcher.isMatch(BUFFER1,2,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,3,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,4,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testSpaceMatcher",0,"public void testSpaceMatcher(){StrMatcher matcher=StrMatcher.spaceMatcher();assertSame(matcher,StrMatcher.spaceMatcher());assertEquals(0,matcher.isMatch(BUFFER1,4,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,5,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,6,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testSplitMatcher",0,"public void testSplitMatcher(){StrMatcher matcher=StrMatcher.splitMatcher();assertSame(matcher,StrMatcher.splitMatcher());assertEquals(0,matcher.isMatch(BUFFER1,2,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,3,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,4,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,5,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,6,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,7,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,8,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,9,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,10,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testTrimMatcher",0,"public void testTrimMatcher(){StrMatcher matcher=StrMatcher.trimMatcher();assertSame(matcher,StrMatcher.trimMatcher());assertEquals(0,matcher.isMatch(BUFFER1,2,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,3,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,4,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,5,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,6,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,7,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,8,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,9,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,10,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testSingleQuoteMatcher",0,"public void testSingleQuoteMatcher(){StrMatcher matcher=StrMatcher.singleQuoteMatcher();assertSame(matcher,StrMatcher.singleQuoteMatcher());assertEquals(0,matcher.isMatch(BUFFER1,10,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,11,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,12,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testDoubleQuoteMatcher",0,"public void testDoubleQuoteMatcher(){StrMatcher matcher=StrMatcher.doubleQuoteMatcher();assertSame(matcher,StrMatcher.doubleQuoteMatcher());assertEquals(0,matcher.isMatch(BUFFER1,11,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,12,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testQuoteMatcher",0,"public void testQuoteMatcher(){StrMatcher matcher=StrMatcher.quoteMatcher();assertSame(matcher,StrMatcher.quoteMatcher());assertEquals(0,matcher.isMatch(BUFFER1,10,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,11,0,BUFFER1.length));assertEquals(1,matcher.isMatch(BUFFER1,12,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testNoneMatcher",0,"public void testNoneMatcher(){StrMatcher matcher=StrMatcher.noneMatcher();assertSame(matcher,StrMatcher.noneMatcher());assertEquals(0,matcher.isMatch(BUFFER1,0,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,1,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,2,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,3,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,4,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,5,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,6,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,7,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,8,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,9,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,10,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,11,0,BUFFER1.length));assertEquals(0,matcher.isMatch(BUFFER1,12,0,BUFFER1.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testCharMatcher_char",0,"public void testCharMatcher_char(){StrMatcher matcher=StrMatcher.charMatcher('c');assertEquals(0,matcher.isMatch(BUFFER2,0,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,1,0,BUFFER2.length));assertEquals(1,matcher.isMatch(BUFFER2,2,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,3,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,4,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,5,0,BUFFER2.length));}"
"org.apache.commons.lang.text.StrMatcherTest.testCharSetMatcher_String",0,"public void testCharSetMatcher_String(){StrMatcher matcher=StrMatcher.charSetMatcher(""ace"");assertEquals(1,matcher.isMatch(BUFFER2,0,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,1,0,BUFFER2.length));assertEquals(1,matcher.isMatch(BUFFER2,2,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,3,0,BUFFER2.length));assertEquals(1,matcher.isMatch(BUFFER2,4,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,5,0,BUFFER2.length));assertSame(StrMatcher.noneMatcher(),StrMatcher.charSetMatcher(""""));assertSame(StrMatcher.noneMatcher(),StrMatcher.charSetMatcher((String)null));assertTrue(StrMatcher.charSetMatcher(""a"")instanceof StrMatcher.CharMatcher);}"
"org.apache.commons.lang.text.StrMatcherTest.testCharSetMatcher_charArray",0,"public void testCharSetMatcher_charArray(){StrMatcher matcher=StrMatcher.charSetMatcher(""ace"".toCharArray());assertEquals(1,matcher.isMatch(BUFFER2,0,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,1,0,BUFFER2.length));assertEquals(1,matcher.isMatch(BUFFER2,2,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,3,0,BUFFER2.length));assertEquals(1,matcher.isMatch(BUFFER2,4,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,5,0,BUFFER2.length));assertSame(StrMatcher.noneMatcher(),StrMatcher.charSetMatcher(new char[0]));assertSame(StrMatcher.noneMatcher(),StrMatcher.charSetMatcher((char[])null));assertTrue(StrMatcher.charSetMatcher(""a"".toCharArray())instanceof StrMatcher.CharMatcher);}"
"org.apache.commons.lang.text.StrMatcherTest.testStringMatcher_String",0,"public void testStringMatcher_String(){StrMatcher matcher=StrMatcher.stringMatcher(""bc"");assertEquals(0,matcher.isMatch(BUFFER2,0,0,BUFFER2.length));assertEquals(2,matcher.isMatch(BUFFER2,1,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,2,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,3,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,4,0,BUFFER2.length));assertEquals(0,matcher.isMatch(BUFFER2,5,0,BUFFER2.length));assertSame(StrMatcher.noneMatcher(),StrMatcher.stringMatcher(""""));assertSame(StrMatcher.noneMatcher(),StrMatcher.stringMatcher((String)null));}"
"org.apache.commons.lang.text.StrMatcherTest.testMatcherIndices",0,"public void testMatcherIndices(){StrMatcher matcher=StrMatcher.stringMatcher(""bc"");assertEquals(2,matcher.isMatch(BUFFER2,1,1,BUFFER2.length));assertEquals(2,matcher.isMatch(BUFFER2,1,0,3));assertEquals(0,matcher.isMatch(BUFFER2,1,0,2));}"
"org.apache.commons.lang.enums.EnumTest.testName",0,"public void testName(){assertEquals(""Red"",ColorEnum.RED.getName());assertEquals(""Green"",ColorEnum.GREEN.getName());assertEquals(""Blue"",ColorEnum.BLUE.getName());}"
"org.apache.commons.lang.enums.EnumTest.testCompareTo",0,"public void testCompareTo(){assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE)== 0);assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE)> 0);assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED)< 0);try {ColorEnum.RED.compareTo(null);fail();}catch(NullPointerException ex){}try {ColorEnum.RED.compareTo(new Object());fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.enums.EnumTest.testEquals",0,"public void testEquals(){assertSame(ColorEnum.RED,ColorEnum.RED);assertSame(ColorEnum.getEnum(""Red""),ColorEnum.RED);assertEquals(false,ColorEnum.RED.equals(null));assertEquals(true,ColorEnum.RED.equals(ColorEnum.RED));assertEquals(true,ColorEnum.RED.equals(ColorEnum.getEnum(""Red"")));}"
"org.apache.commons.lang.enums.EnumTest.testHashCode",0,"public void testHashCode(){assertEquals(ColorEnum.RED.hashCode(),ColorEnum.RED.hashCode());assertEquals(7 + ColorEnum.class.hashCode()+ 3 * ""Red"".hashCode(),ColorEnum.RED.hashCode());}"
"org.apache.commons.lang.enums.EnumTest.testToString",0,"public void testToString(){String toString=ColorEnum.RED.toString();assertEquals(""ColorEnum[Red]"",toString);assertSame(toString,ColorEnum.RED.toString());}"
"org.apache.commons.lang.enums.EnumTest.testIterator",0,"public void testIterator(){Iterator it=ColorEnum.iterator();assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testList",0,"public void testList(){List list=new ArrayList(ColorEnum.getEnumList());assertNotNull(list);assertEquals(list.size(),ColorEnum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testMap",0,"public void testMap(){Map map=new HashMap(ColorEnum.getEnumMap());assertNotNull(map);assertTrue(map.containsValue(ColorEnum.RED));assertTrue(map.containsValue(ColorEnum.GREEN));assertTrue(map.containsValue(ColorEnum.BLUE));assertSame(ColorEnum.RED,map.get(""Red""));assertSame(ColorEnum.GREEN,map.get(""Green""));assertSame(ColorEnum.BLUE,map.get(""Blue""));assertEquals(map.keySet().size(),ColorEnum.getEnumList().size());}"
"org.apache.commons.lang.enums.EnumTest.testGet",0,"public void testGet(){assertSame(ColorEnum.RED,ColorEnum.getEnum(""Red""));assertSame(ColorEnum.GREEN,ColorEnum.getEnum(""Green""));assertSame(ColorEnum.BLUE,ColorEnum.getEnum(""Blue""));assertSame(null,ColorEnum.getEnum(""Pink""));}"
"org.apache.commons.lang.enums.EnumTest.testSerialization",0,"public void testSerialization(){int hashCode=ColorEnum.RED.hashCode();assertSame(ColorEnum.RED,SerializationUtils.clone(ColorEnum.RED));assertEquals(hashCode,SerializationUtils.clone(ColorEnum.RED).hashCode());assertSame(ColorEnum.GREEN,SerializationUtils.clone(ColorEnum.GREEN));assertSame(ColorEnum.BLUE,SerializationUtils.clone(ColorEnum.BLUE));}"
"org.apache.commons.lang.enums.EnumTest.testBroken1",0,"public void testBroken1(){try {Broken1Enum.RED.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken2",0,"public void testBroken2(){try {Broken2Enum.RED.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken3",0,"public void testBroken3(){try {Broken3Enum.RED.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken1Operation",0,"public void testBroken1Operation(){try {Broken1OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken2Operation",0,"public void testBroken2Operation(){try {Broken2OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken3Operation",0,"public void testBroken3Operation(){try {Broken3OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken4Operation",0,"public void testBroken4Operation(){try {Broken4OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testBroken5Operation",0,"public void testBroken5Operation(){try {Broken5OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enums.EnumTest.testOperationGet",0,"public void testOperationGet(){assertSame(OperationEnum.PLUS,OperationEnum.getEnum(""Plus""));assertSame(OperationEnum.MINUS,OperationEnum.getEnum(""Minus""));assertSame(null,OperationEnum.getEnum(""Pink""));}"
"org.apache.commons.lang.enums.EnumTest.testOperationSerialization",0,"public void testOperationSerialization(){assertSame(OperationEnum.PLUS,SerializationUtils.clone(OperationEnum.PLUS));assertSame(OperationEnum.MINUS,SerializationUtils.clone(OperationEnum.MINUS));}"
"org.apache.commons.lang.enums.EnumTest.testOperationToString",0,"public void testOperationToString(){assertEquals(""OperationEnum[Plus]"",OperationEnum.PLUS.toString());}"
"org.apache.commons.lang.enums.EnumTest.testOperationList",0,"public void testOperationList(){List list=OperationEnum.getEnumList();assertNotNull(list);assertEquals(2,list.size());assertEquals(list.size(),OperationEnum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(OperationEnum.PLUS,it.next());assertSame(OperationEnum.MINUS,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testOperationMap",0,"public void testOperationMap(){Map map=OperationEnum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),OperationEnum.getEnumList().size());assertTrue(map.containsValue(OperationEnum.PLUS));assertTrue(map.containsValue(OperationEnum.MINUS));assertSame(OperationEnum.PLUS,map.get(""Plus""));assertSame(OperationEnum.MINUS,map.get(""Minus""));}"
"org.apache.commons.lang.enums.EnumTest.testOperationCalculation",0,"public void testOperationCalculation(){assertEquals(3,OperationEnum.PLUS.eval(1,2));assertEquals(-1,OperationEnum.MINUS.eval(1,2));}"
"org.apache.commons.lang.enums.EnumTest.testExtended1Get",0,"public void testExtended1Get(){assertSame(Extended1Enum.ALPHA,Extended1Enum.getEnum(""Alpha""));assertSame(Extended1Enum.BETA,Extended1Enum.getEnum(""Beta""));assertSame(null,Extended1Enum.getEnum(""Gamma""));assertSame(null,Extended1Enum.getEnum(""Delta""));}"
"org.apache.commons.lang.enums.EnumTest.testExtended2Get",0,"public void testExtended2Get(){assertSame(Extended1Enum.ALPHA,Extended2Enum.ALPHA);assertSame(Extended1Enum.BETA,Extended2Enum.BETA);assertSame(Extended2Enum.ALPHA,Extended2Enum.getEnum(""Alpha""));assertSame(Extended2Enum.BETA,Extended2Enum.getEnum(""Beta""));assertSame(Extended2Enum.GAMMA,Extended2Enum.getEnum(""Gamma""));assertSame(null,Extended2Enum.getEnum(""Delta""));}"
"org.apache.commons.lang.enums.EnumTest.testExtended3Get",0,"public void testExtended3Get(){assertSame(Extended2Enum.ALPHA,Extended3Enum.ALPHA);assertSame(Extended2Enum.BETA,Extended3Enum.BETA);assertSame(Extended2Enum.GAMMA,Extended3Enum.GAMMA);assertSame(Extended3Enum.ALPHA,Extended3Enum.getEnum(""Alpha""));assertSame(Extended3Enum.BETA,Extended3Enum.getEnum(""Beta""));assertSame(Extended3Enum.GAMMA,Extended3Enum.getEnum(""Gamma""));assertSame(Extended3Enum.DELTA,Extended3Enum.getEnum(""Delta""));}"
"org.apache.commons.lang.enums.EnumTest.testExtendedSerialization",0,"public void testExtendedSerialization(){assertSame(Extended1Enum.ALPHA,SerializationUtils.clone(Extended1Enum.ALPHA));assertSame(Extended1Enum.BETA,SerializationUtils.clone(Extended1Enum.BETA));assertSame(Extended2Enum.GAMMA,SerializationUtils.clone(Extended2Enum.GAMMA));assertSame(Extended3Enum.DELTA,SerializationUtils.clone(Extended3Enum.DELTA));}"
"org.apache.commons.lang.enums.EnumTest.testExtendedToString",0,"public void testExtendedToString(){assertEquals(""Extended1Enum[Alpha]"",Extended1Enum.ALPHA.toString());assertEquals(""Extended1Enum[Beta]"",Extended1Enum.BETA.toString());assertEquals(""Extended1Enum[Alpha]"",Extended2Enum.ALPHA.toString());assertEquals(""Extended1Enum[Beta]"",Extended2Enum.BETA.toString());assertEquals(""Extended2Enum[Gamma]"",Extended2Enum.GAMMA.toString());assertEquals(""Extended1Enum[Alpha]"",Extended3Enum.ALPHA.toString());assertEquals(""Extended1Enum[Beta]"",Extended3Enum.BETA.toString());assertEquals(""Extended2Enum[Gamma]"",Extended3Enum.GAMMA.toString());assertEquals(""Extended3Enum[Delta]"",Extended3Enum.DELTA.toString());}"
"org.apache.commons.lang.enums.EnumTest.testExtended1List",0,"public void testExtended1List(){List list=Extended1Enum.getEnumList();assertNotNull(list);assertEquals(2,list.size());assertEquals(list.size(),Extended1Enum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(Extended1Enum.ALPHA,it.next());assertSame(Extended1Enum.BETA,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testExtended2List",0,"public void testExtended2List(){List list=Extended2Enum.getEnumList();assertNotNull(list);assertEquals(3,list.size());assertEquals(list.size(),Extended2Enum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(Extended2Enum.ALPHA,it.next());assertSame(Extended2Enum.BETA,it.next());assertSame(Extended2Enum.GAMMA,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testExtended3List",0,"public void testExtended3List(){List list=Extended3Enum.getEnumList();assertNotNull(list);assertEquals(4,list.size());assertEquals(list.size(),Extended3Enum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(Extended3Enum.ALPHA,it.next());assertSame(Extended3Enum.BETA,it.next());assertSame(Extended3Enum.GAMMA,it.next());assertSame(Extended3Enum.DELTA,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testExtended1Map",0,"public void testExtended1Map(){Map map=Extended1Enum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),Extended1Enum.getEnumList().size());assertTrue(map.containsValue(Extended1Enum.ALPHA));assertTrue(map.containsValue(Extended1Enum.BETA));assertSame(Extended1Enum.ALPHA,map.get(""Alpha""));assertSame(Extended1Enum.BETA,map.get(""Beta""));}"
"org.apache.commons.lang.enums.EnumTest.testExtended2Map",0,"public void testExtended2Map(){Map map=Extended2Enum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),Extended2Enum.getEnumList().size());assertTrue(map.containsValue(Extended2Enum.ALPHA));assertTrue(map.containsValue(Extended2Enum.BETA));assertTrue(map.containsValue(Extended2Enum.GAMMA));assertSame(Extended2Enum.ALPHA,map.get(""Alpha""));assertSame(Extended2Enum.BETA,map.get(""Beta""));assertSame(Extended2Enum.GAMMA,map.get(""Gamma""));}"
"org.apache.commons.lang.enums.EnumTest.testExtended3Map",0,"public void testExtended3Map(){Map map=Extended3Enum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),Extended3Enum.getEnumList().size());assertTrue(map.containsValue(Extended3Enum.ALPHA));assertTrue(map.containsValue(Extended3Enum.BETA));assertTrue(map.containsValue(Extended3Enum.GAMMA));assertTrue(map.containsValue(Extended3Enum.DELTA));assertSame(Extended3Enum.ALPHA,map.get(""Alpha""));assertSame(Extended3Enum.BETA,map.get(""Beta""));assertSame(Extended3Enum.GAMMA,map.get(""Gamma""));assertSame(Extended3Enum.DELTA,map.get(""Delta""));}"
"org.apache.commons.lang.enums.EnumTest.testNested",0,"public void testNested(){List list=new ArrayList(Nest.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(Nest.ColorEnum.RED,it.next());assertSame(Nest.ColorEnum.GREEN,it.next());assertSame(Nest.ColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testNestedBroken",0,"public void testNestedBroken(){List list=new ArrayList(NestBroken.ColorEnum.getEnumList());try {assertEquals(0,list.size());}catch(AssertionFailedError ex){assertEquals(3,list.size());}new NestBroken();list=new ArrayList(NestBroken.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(NestBroken.RED,it.next());assertSame(NestBroken.GREEN,it.next());assertSame(NestBroken.BLUE,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testNestedLinked",0,"public void testNestedLinked(){List list=new ArrayList(NestLinked.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(NestLinked.RED,it.next());assertSame(NestLinked.GREEN,it.next());assertSame(NestLinked.BLUE,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testNestedReferenced",0,"public void testNestedReferenced(){List list=new ArrayList(NestReferenced.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(NestReferenced.RED,it.next());assertSame(NestReferenced.GREEN,it.next());assertSame(NestReferenced.BLUE,it.next());}"
"org.apache.commons.lang.enums.EnumTest.testColorEnumEqualsWithDifferentClassLoaders",0,"public void testColorEnumEqualsWithDifferentClassLoaders(){}"
"org.apache.commons.lang.enums.EnumTest.testWithDifferentClassLoaders",0,"void testWithDifferentClassLoaders(ColorEnum colorEnum)throws ClassNotFoundException,SecurityException,NoSuchMethodException,IllegalArgumentException,IllegalAccessException,InvocationTargetException {assertTrue(colorEnum.equals(colorEnum));assertNotNull(ColorEnum.class.getClassLoader());ClassLoader classLoader=ClassUtilsTest.newSystemClassLoader();Object enumObjectFromOtherClassLoader=this.getColorEnum(classLoader,colorEnum.getName());try {ColorEnum testCase=(ColorEnum)enumObjectFromOtherClassLoader;fail(""Should have thrown a ClassCastException for "" + testCase);}catch(ClassCastException e){}assertEquals(""The two objects should match even though they are from different class loaders"",colorEnum,enumObjectFromOtherClassLoader);int falseCount=0;for (Iterator iter=ColorEnum.iterator();iter.hasNext();){ColorEnum element=(ColorEnum)iter.next();if (!colorEnum.equals(element)){falseCount++;assertFalse(enumObjectFromOtherClassLoader.equals(element));}}assertEquals(ColorEnum.getEnumList().size()- 1,falseCount);falseCount=0;for (Iterator iter=ColorEnum.iterator();iter.hasNext();){ColorEnum element=(ColorEnum)iter.next();if (!colorEnum.equals(element)){falseCount++;assertFalse(((Comparable)enumObjectFromOtherClassLoader).compareTo(element)== 0);}}assertEquals(ColorEnum.getEnumList().size()- 1,falseCount);}"
"org.apache.commons.lang.enums.EnumTest.testEqualsToWrongInstance",0,"public void testEqualsToWrongInstance(){for (Iterator iter=ColorEnum.iterator();iter.hasNext();){ColorEnum element=(ColorEnum)iter.next();this.testEqualsToWrongInstance(element);}}"
"org.apache.commons.lang.IncompleteArgumentExceptionTest.test1arg_nullInput",0,"public void test1arg_nullInput(){final Throwable t=new IncompleteArgumentException(null);assertEquals(""null is incomplete."",t.getMessage());}"
"org.apache.commons.lang.IncompleteArgumentExceptionTest.test1arg_validInput",0,"public void test1arg_validInput(){final String name=""argument"";final Throwable t=new IncompleteArgumentException(name);assertEquals(name + "" is incomplete."",t.getMessage());}"
"org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_allNullInput",0,"public void test2arg_allNullInput(){final Throwable t=new IncompleteArgumentException(null,null);assertEquals(""null is missing the following items: null"",t.getMessage());}"
"org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_nullString",0,"public void test2arg_nullString(){final Throwable t=new IncompleteArgumentException(null,new String[]{""one"",""two""});assertEquals(""null is missing the following items: [one,two]"",t.getMessage());}"
"org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_nullArray",0,"public void test2arg_nullArray(){final String name=""one"";final Throwable t=new IncompleteArgumentException(name,null);assertEquals(name + "" is missing the following items: null"",t.getMessage());}"
"org.apache.commons.lang.IncompleteArgumentExceptionTest.test2arg_validInput",0,"public void test2arg_validInput(){final String name=""input"";final Throwable t=new IncompleteArgumentException(name,new String[]{""one"",""two""});assertEquals(name + "" is missing the following items: [one,two]"",t.getMessage());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testBlank",0,"public void testBlank(){assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).appendSuper(""Integer@8888["" + SystemUtils.LINE_SEPARATOR + ""]"").toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).appendSuper(""Integer@8888["" + SystemUtils.LINE_SEPARATOR + ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"").toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=hello""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).appendSuper(""Integer@8888["" + SystemUtils.LINE_SEPARATOR + ""]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""  a=hello""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).appendSuper(""Integer@8888["" + SystemUtils.LINE_SEPARATOR + ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=hello""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  3""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(i3).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=<null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=3""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=3""+ SystemUtils.LINE_SEPARATOR+ ""  b=4""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=<Integer>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=<size=0>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=[]""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=<size=0>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a={}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=<size=0>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a={}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testLong",0,"public void testLong(){assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  3""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(3L).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=3""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  a=3""+ SystemUtils.LINE_SEPARATOR+ ""  b=4""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  {<null>,5,{3,6}}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  {<null>,5,{3,6}}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  {1,2,-3,4}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  {1,2,-3,4}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.MultiLineToStringStyleTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  {{1,2},<null>,{5}}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  {{1,2},<null>,{5}}""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""["" + SystemUtils.LINE_SEPARATOR+ ""  <null>""+ SystemUtils.LINE_SEPARATOR+ ""]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.mutable.MutableLongTest.testConstructors",0,"public void testConstructors(){assertEquals(0,new MutableLong().longValue());assertEquals(1,new MutableLong(1).longValue());assertEquals(2,new MutableLong(new Long(2)).longValue());assertEquals(3,new MutableLong(new MutableLong(3)).longValue());try {new MutableLong(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableLongTest.testGetSet",0,"public void testGetSet(){final MutableLong mutNum=new MutableLong(0);assertEquals(0,new MutableLong().longValue());assertEquals(new Long(0),new MutableLong().getValue());mutNum.setValue(1);assertEquals(1,mutNum.longValue());assertEquals(new Long(1),mutNum.getValue());mutNum.setValue(new Long(2));assertEquals(2,mutNum.longValue());assertEquals(new Long(2),mutNum.getValue());mutNum.setValue(new MutableLong(3));assertEquals(3,mutNum.longValue());assertEquals(new Long(3),mutNum.getValue());try {mutNum.setValue(null);fail();}catch(NullPointerException ex){}try {mutNum.setValue(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableLongTest.testEquals",0,"public void testEquals(){final MutableLong mutNumA=new MutableLong(0);final MutableLong mutNumB=new MutableLong(0);final MutableLong mutNumC=new MutableLong(1);assertEquals(true,mutNumA.equals(mutNumA));assertEquals(true,mutNumA.equals(mutNumB));assertEquals(true,mutNumB.equals(mutNumA));assertEquals(true,mutNumB.equals(mutNumB));assertEquals(false,mutNumA.equals(mutNumC));assertEquals(false,mutNumB.equals(mutNumC));assertEquals(true,mutNumC.equals(mutNumC));assertEquals(false,mutNumA.equals(null));assertEquals(false,mutNumA.equals(new Long(0)));assertEquals(false,mutNumA.equals(""0""));}"
"org.apache.commons.lang.mutable.MutableLongTest.testHashCode",0,"public void testHashCode(){final MutableLong mutNumA=new MutableLong(0);final MutableLong mutNumB=new MutableLong(0);final MutableLong mutNumC=new MutableLong(1);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(true,mutNumA.hashCode()== new Long(0).hashCode());}"
"org.apache.commons.lang.mutable.MutableLongTest.testCompareTo",0,"public void testCompareTo(){final MutableLong mutNum=new MutableLong(0);assertEquals(0,mutNum.compareTo(new MutableLong(0)));assertEquals(+1,mutNum.compareTo(new MutableLong(-1)));assertEquals(-1,mutNum.compareTo(new MutableLong(1)));try {mutNum.compareTo(null);fail();}catch(NullPointerException ex){}try {mutNum.compareTo(new Long(0));fail();}catch(ClassCastException ex){}try {mutNum.compareTo(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableLongTest.testPrimitiveValues",0,"public void testPrimitiveValues(){MutableLong mutNum=new MutableLong(1L);assertEquals(1.0F,mutNum.floatValue(),0);assertEquals(1.0,mutNum.doubleValue(),0);assertEquals((byte)1,mutNum.byteValue());assertEquals((short)1,mutNum.shortValue());assertEquals(1,mutNum.intValue());assertEquals(1L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testToLong",0,"public void testToLong(){assertEquals(new Long(0L),new MutableLong(0L).toLong());assertEquals(new Long(123L),new MutableLong(123L).toLong());}"
"org.apache.commons.lang.mutable.MutableLongTest.testIncrement",0,"public void testIncrement(){MutableLong mutNum=new MutableLong(1);mutNum.increment();assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testDecrement",0,"public void testDecrement(){MutableLong mutNum=new MutableLong(1);mutNum.decrement();assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testAddValuePrimitive",0,"public void testAddValuePrimitive(){MutableLong mutNum=new MutableLong(1);mutNum.add(1);assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testAddValueObject",0,"public void testAddValueObject(){MutableLong mutNum=new MutableLong(1);mutNum.add(new Long(1));assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testSubtractValuePrimitive",0,"public void testSubtractValuePrimitive(){MutableLong mutNum=new MutableLong(1);mutNum.subtract(1);assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testSubtractValueObject",0,"public void testSubtractValueObject(){MutableLong mutNum=new MutableLong(1);mutNum.subtract(new Long(1));assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableLongTest.testToString",0,"public void testToString(){assertEquals(""0"",new MutableLong(0).toString());assertEquals(""10"",new MutableLong(10).toString());assertEquals(""-123"",new MutableLong(-123).toString());}"
"org.apache.commons.lang.ArrayUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new ArrayUtils());Constructor[]cons=ArrayUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(ArrayUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(ArrayUtils.class.getModifiers()));}"
"org.apache.commons.lang.ArrayUtilsTest.testToString",0,"public void testToString(){assertEquals(""{}"",ArrayUtils.toString(null));assertEquals(""{}"",ArrayUtils.toString(new Object[0]));assertEquals(""{}"",ArrayUtils.toString(new String[0]));assertEquals(""{<null>}"",ArrayUtils.toString(new String[]{null}));assertEquals(""{pink,blue}"",ArrayUtils.toString(new String[]{""pink"",""blue""}));assertEquals(""<empty>"",ArrayUtils.toString(null,""<empty>""));assertEquals(""{}"",ArrayUtils.toString(new Object[0],""<empty>""));assertEquals(""{}"",ArrayUtils.toString(new String[0],""<empty>""));assertEquals(""{<null>}"",ArrayUtils.toString(new String[]{null},""<empty>""));assertEquals(""{pink,blue}"",ArrayUtils.toString(new String[]{""pink"",""blue""},""<empty>""));}"
"org.apache.commons.lang.ArrayUtilsTest.testHashCode",0,"public void testHashCode(){long[][]array1=new long[][]{{2,5},{4,5}};long[][]array2=new long[][]{{2,5},{4,6}};assertEquals(true,ArrayUtils.hashCode(array1)== ArrayUtils.hashCode(array1));assertEquals(false,ArrayUtils.hashCode(array1)== ArrayUtils.hashCode(array2));Object[]array3=new Object[]{new String(new char[]{'A','B'})};Object[]array4=new Object[]{""AB""};assertEquals(true,ArrayUtils.hashCode(array3)== ArrayUtils.hashCode(array3));assertEquals(true,ArrayUtils.hashCode(array3)== ArrayUtils.hashCode(array4));}"
"org.apache.commons.lang.ArrayUtilsTest.testIsEquals",0,"public void testIsEquals(){long[][]larray1=new long[][]{{2,5},{4,5}};long[][]larray2=new long[][]{{2,5},{4,6}};long[]larray3=new long[]{2,5};this.assertIsEquals(larray1,larray2,larray3);int[][]iarray1=new int[][]{{2,5},{4,5}};int[][]iarray2=new int[][]{{2,5},{4,6}};int[]iarray3=new int[]{2,5};this.assertIsEquals(iarray1,iarray2,iarray3);short[][]sarray1=new short[][]{{2,5},{4,5}};short[][]sarray2=new short[][]{{2,5},{4,6}};short[]sarray3=new short[]{2,5};this.assertIsEquals(sarray1,sarray2,sarray3);float[][]farray1=new float[][]{{2,5},{4,5}};float[][]farray2=new float[][]{{2,5},{4,6}};float[]farray3=new float[]{2,5};this.assertIsEquals(farray1,farray2,farray3);double[][]darray1=new double[][]{{2,5},{4,5}};double[][]darray2=new double[][]{{2,5},{4,6}};double[]darray3=new double[]{2,5};this.assertIsEquals(darray1,darray2,darray3);byte[][]byteArray1=new byte[][]{{2,5},{4,5}};byte[][]byteArray2=new byte[][]{{2,5},{4,6}};byte[]byteArray3=new byte[]{2,5};this.assertIsEquals(byteArray1,byteArray2,byteArray3);char[][]charArray1=new char[][]{{2,5},{4,5}};char[][]charArray2=new char[][]{{2,5},{4,6}};char[]charArray3=new char[]{2,5};this.assertIsEquals(charArray1,charArray2,charArray3);boolean[][]barray1=new boolean[][]{{true,false},{true,true}};boolean[][]barray2=new boolean[][]{{true,false},{true,false}};boolean[]barray3=new boolean[]{false,true};this.assertIsEquals(barray1,barray2,barray3);Object[]array3=new Object[]{new String(new char[]{'A','B'})};Object[]array4=new Object[]{""AB""};assertEquals(true,ArrayUtils.isEquals(array3,array3));assertEquals(true,ArrayUtils.isEquals(array3,array4));assertEquals(true,ArrayUtils.isEquals(null,null));assertEquals(false,ArrayUtils.isEquals(null,array4));}"
"org.apache.commons.lang.ArrayUtilsTest.testToMap",0,"public void testToMap(){Map map=ArrayUtils.toMap(new String[][]{{""foo"",""bar""},{""hello"",""world""}});assertEquals(""bar"",map.get(""foo""));assertEquals(""world"",map.get(""hello""));assertEquals(null,ArrayUtils.toMap(null));try {ArrayUtils.toMap(new String[][]{{""foo"",""bar""},{""short""}});fail(""exception expected"");}catch(IllegalArgumentException ex){}try {ArrayUtils.toMap(new Object[]{new Object[]{""foo"",""bar""},""illegal type""});fail(""exception expected"");}catch(IllegalArgumentException ex){}try {ArrayUtils.toMap(new Object[]{new Object[]{""foo"",""bar""},null});fail(""exception expected"");}catch(IllegalArgumentException ex){}map=ArrayUtils.toMap(new Object[]{new Map.Entry(){public Object getKey(){return ""foo"";}public Object getValue(){return ""bar"";}public Object setValue(Object value){throw new UnsupportedOperationException();}public boolean equals(Object o){throw new UnsupportedOperationException();}public int hashCode(){throw new UnsupportedOperationException();}}});assertEquals(""bar"",map.get(""foo""));}"
"org.apache.commons.lang.ArrayUtilsTest.testClone",0,"public void testClone(){assertEquals(null,ArrayUtils.clone((Object[])null));Object[]original1=new Object[0];Object[]cloned1=ArrayUtils.clone(original1);assertTrue(Arrays.equals(original1,cloned1));assertTrue(original1 != cloned1);StringBuffer buf=new StringBuffer(""pick"");original1=new Object[]{buf,""a"",new String[]{""stick""}};cloned1=ArrayUtils.clone(original1);assertTrue(Arrays.equals(original1,cloned1));assertTrue(original1 != cloned1);assertSame(original1[0],cloned1[0]);assertSame(original1[1],cloned1[1]);assertSame(original1[2],cloned1[2]);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneBoolean",0,"public void testCloneBoolean(){assertEquals(null,ArrayUtils.clone((boolean[])null));boolean[]original=new boolean[]{true,false};boolean[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneLong",0,"public void testCloneLong(){assertEquals(null,ArrayUtils.clone((long[])null));long[]original=new long[]{0L,1L};long[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneInt",0,"public void testCloneInt(){assertEquals(null,ArrayUtils.clone((int[])null));int[]original=new int[]{5,8};int[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneShort",0,"public void testCloneShort(){assertEquals(null,ArrayUtils.clone((short[])null));short[]original=new short[]{1,4};short[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneChar",0,"public void testCloneChar(){assertEquals(null,ArrayUtils.clone((char[])null));char[]original=new char[]{'a','4'};char[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneByte",0,"public void testCloneByte(){assertEquals(null,ArrayUtils.clone((byte[])null));byte[]original=new byte[]{1,6};byte[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneDouble",0,"public void testCloneDouble(){assertEquals(null,ArrayUtils.clone((double[])null));double[]original=new double[]{2.4d,5.7d};double[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testCloneFloat",0,"public void testCloneFloat(){assertEquals(null,ArrayUtils.clone((float[])null));float[]original=new float[]{2.6f,6.4f};float[]cloned=ArrayUtils.clone(original);assertTrue(Arrays.equals(original,cloned));assertTrue(original != cloned);}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayObject",0,"public void testSubarrayObject(){Object[]nullArray=null;Object[]objectArray={""a"",""b"",""c"",""d"",""e"",""f""};assertEquals(""0 start,mid end"",""abcd"",StringUtils.join(ArrayUtils.subarray(objectArray,0,4)));assertEquals(""0 start,length end"",""abcdef"",StringUtils.join(ArrayUtils.subarray(objectArray,0,objectArray.length)));assertEquals(""mid start,mid end"",""bcd"",StringUtils.join(ArrayUtils.subarray(objectArray,1,4)));assertEquals(""mid start,length end"",""bcdef"",StringUtils.join(ArrayUtils.subarray(objectArray,1,objectArray.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"","""",StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY,1,2)));assertEquals(""start > end"","""",StringUtils.join(ArrayUtils.subarray(objectArray,4,2)));assertEquals(""start == end"","""",StringUtils.join(ArrayUtils.subarray(objectArray,3,3)));assertEquals(""start undershoot,normal end"",""abcd"",StringUtils.join(ArrayUtils.subarray(objectArray,-2,4)));assertEquals(""start overshoot,any end"","""",StringUtils.join(ArrayUtils.subarray(objectArray,33,4)));assertEquals(""normal start,end overshoot"",""cdef"",StringUtils.join(ArrayUtils.subarray(objectArray,2,33)));assertEquals(""start undershoot,end overshoot"",""abcdef"",StringUtils.join(ArrayUtils.subarray(objectArray,-2,12)));Date[]dateArray={new java.sql.Date(new Date().getTime()),new Date(),new Date(),new Date(),new Date()};assertSame(""Object type"",Object.class,ArrayUtils.subarray(objectArray,2,4).getClass().getComponentType());assertSame(""java.util.Date type"",java.util.Date.class,ArrayUtils.subarray(dateArray,1,4).getClass().getComponentType());assertNotSame(""java.sql.Date type"",java.sql.Date.class,ArrayUtils.subarray(dateArray,1,4).getClass().getComponentType());try {Object dummy=(java.sql.Date[])ArrayUtils.subarray(dateArray,1,3);fail(""Invalid downcast"");}catch(ClassCastException e){}}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayLong",0,"public void testSubarrayLong(){long[]nullArray=null;long[]array={999910,999911,999912,999913,999914,999915};long[]leftSubarray={999910,999911,999912,999913};long[]midSubarray={999911,999912,999913,999914};long[]rightSubarray={999912,999913,999914,999915};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""long type"",long.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayInt",0,"public void testSubarrayInt(){int[]nullArray=null;int[]array={10,11,12,13,14,15};int[]leftSubarray={10,11,12,13};int[]midSubarray={11,12,13,14};int[]rightSubarray={12,13,14,15};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""int type"",int.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayShort",0,"public void testSubarrayShort(){short[]nullArray=null;short[]array={10,11,12,13,14,15};short[]leftSubarray={10,11,12,13};short[]midSubarray={11,12,13,14};short[]rightSubarray={12,13,14,15};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""short type"",short.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrChar",0,"public void testSubarrChar(){char[]nullArray=null;char[]array={'a','b','c','d','e','f'};char[]leftSubarray={'a','b','c','d'};char[]midSubarray={'b','c','d','e'};char[]rightSubarray={'c','d','e','f'};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""char type"",char.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayByte",0,"public void testSubarrayByte(){byte[]nullArray=null;byte[]array={10,11,12,13,14,15};byte[]leftSubarray={10,11,12,13};byte[]midSubarray={11,12,13,14};byte[]rightSubarray={12,13,14,15};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""byte type"",byte.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayDouble",0,"public void testSubarrayDouble(){double[]nullArray=null;double[]array={10.123,11.234,12.345,13.456,14.567,15.678};double[]leftSubarray={10.123,11.234,12.345,13.456};double[]midSubarray={11.234,12.345,13.456,14.567};double[]rightSubarray={12.345,13.456,14.567,15.678};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""double type"",double.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayFloat",0,"public void testSubarrayFloat(){float[]nullArray=null;float[]array={10,11,12,13,14,15};float[]leftSubarray={10,11,12,13};float[]midSubarray={11,12,13,14};float[]rightSubarray={12,13,14,15};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""float type"",float.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSubarrayBoolean",0,"public void testSubarrayBoolean(){boolean[]nullArray=null;boolean[]array={true,true,false,true,false,true};boolean[]leftSubarray={true,true,false,true};boolean[]midSubarray={true,false,true,false};boolean[]rightSubarray={false,true,false,true};assertTrue(""0 start,mid end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,0,4)));assertTrue(""0 start,length end"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,0,array.length)));assertTrue(""mid start,mid end"",ArrayUtils.isEquals(midSubarray,ArrayUtils.subarray(array,1,5)));assertTrue(""mid start,length end"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,array.length)));assertNull(""null input"",ArrayUtils.subarray(nullArray,0,3));assertEquals(""empty array"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY,1,2));assertEquals(""start > end"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(array,4,2));assertEquals(""start == end"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(array,3,3));assertTrue(""start undershoot,normal end"",ArrayUtils.isEquals(leftSubarray,ArrayUtils.subarray(array,-2,4)));assertEquals(""start overshoot,any end"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(array,33,4));assertTrue(""normal start,end overshoot"",ArrayUtils.isEquals(rightSubarray,ArrayUtils.subarray(array,2,33)));assertTrue(""start undershoot,end overshoot"",ArrayUtils.isEquals(array,ArrayUtils.subarray(array,-2,12)));assertSame(""empty array,object test"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY,1,2));assertSame(""start > end,object test"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(array,4,1));assertSame(""start == end,object test"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(array,3,3));assertSame(""start overshoot,any end,object test"",ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.subarray(array,8733,4));assertSame(""boolean type"",boolean.class,ArrayUtils.subarray(array,2,4).getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLength",0,"public void testSameLength(){Object[]nullArray=null;Object[]emptyArray=new Object[0];Object[]oneArray=new Object[]{""pick""};Object[]twoArray=new Object[]{""pick"",""stick""};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthBoolean",0,"public void testSameLengthBoolean(){boolean[]nullArray=null;boolean[]emptyArray=new boolean[0];boolean[]oneArray=new boolean[]{true};boolean[]twoArray=new boolean[]{true,false};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthLong",0,"public void testSameLengthLong(){long[]nullArray=null;long[]emptyArray=new long[0];long[]oneArray=new long[]{0L};long[]twoArray=new long[]{0L,76L};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthInt",0,"public void testSameLengthInt(){int[]nullArray=null;int[]emptyArray=new int[0];int[]oneArray=new int[]{4};int[]twoArray=new int[]{5,7};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthShort",0,"public void testSameLengthShort(){short[]nullArray=null;short[]emptyArray=new short[0];short[]oneArray=new short[]{4};short[]twoArray=new short[]{6,8};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthChar",0,"public void testSameLengthChar(){char[]nullArray=null;char[]emptyArray=new char[0];char[]oneArray=new char[]{'f'};char[]twoArray=new char[]{'d','t'};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthByte",0,"public void testSameLengthByte(){byte[]nullArray=null;byte[]emptyArray=new byte[0];byte[]oneArray=new byte[]{3};byte[]twoArray=new byte[]{4,6};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthDouble",0,"public void testSameLengthDouble(){double[]nullArray=null;double[]emptyArray=new double[0];double[]oneArray=new double[]{1.3d};double[]twoArray=new double[]{4.5d,6.3d};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameLengthFloat",0,"public void testSameLengthFloat(){float[]nullArray=null;float[]emptyArray=new float[0];float[]oneArray=new float[]{2.5f};float[]twoArray=new float[]{6.4f,5.8f};assertEquals(true,ArrayUtils.isSameLength(nullArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(nullArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(nullArray,twoArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,nullArray));assertEquals(true,ArrayUtils.isSameLength(emptyArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(emptyArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,emptyArray));assertEquals(true,ArrayUtils.isSameLength(oneArray,oneArray));assertEquals(false,ArrayUtils.isSameLength(oneArray,twoArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,nullArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,emptyArray));assertEquals(false,ArrayUtils.isSameLength(twoArray,oneArray));assertEquals(true,ArrayUtils.isSameLength(twoArray,twoArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testSameType",0,"public void testSameType(){try {ArrayUtils.isSameType(null,null);fail();}catch(IllegalArgumentException ex){}try {ArrayUtils.isSameType(null,new Object[0]);fail();}catch(IllegalArgumentException ex){}try {ArrayUtils.isSameType(new Object[0],null);fail();}catch(IllegalArgumentException ex){}assertEquals(true,ArrayUtils.isSameType(new Object[0],new Object[0]));assertEquals(false,ArrayUtils.isSameType(new String[0],new Object[0]));assertEquals(true,ArrayUtils.isSameType(new String[0][0],new String[0][0]));assertEquals(false,ArrayUtils.isSameType(new String[0],new String[0][0]));assertEquals(false,ArrayUtils.isSameType(new String[0][0],new String[0]));}"
"org.apache.commons.lang.ArrayUtilsTest.testReverse",0,"public void testReverse(){StringBuffer str1=new StringBuffer(""pick"");String str2=""a"";String[]str3=new String[]{""stick""};String str4=""up"";Object[]array=new Object[]{str1,str2,str3};ArrayUtils.reverse(array);assertEquals(array[0],str3);assertEquals(array[1],str2);assertEquals(array[2],str1);array=new Object[]{str1,str2,str3,str4};ArrayUtils.reverse(array);assertEquals(array[0],str4);assertEquals(array[1],str3);assertEquals(array[2],str2);assertEquals(array[3],str1);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseLong",0,"public void testReverseLong(){long[]array=new long[]{1L,2L,3L};ArrayUtils.reverse(array);assertEquals(array[0],3L);assertEquals(array[1],2L);assertEquals(array[2],1L);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseInt",0,"public void testReverseInt(){int[]array=new int[]{1,2,3};ArrayUtils.reverse(array);assertEquals(array[0],3);assertEquals(array[1],2);assertEquals(array[2],1);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseShort",0,"public void testReverseShort(){short[]array=new short[]{1,2,3};ArrayUtils.reverse(array);assertEquals(array[0],3);assertEquals(array[1],2);assertEquals(array[2],1);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseChar",0,"public void testReverseChar(){char[]array=new char[]{'a','f','C'};ArrayUtils.reverse(array);assertEquals(array[0],'C');assertEquals(array[1],'f');assertEquals(array[2],'a');array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseByte",0,"public void testReverseByte(){byte[]array=new byte[]{2,3,4};ArrayUtils.reverse(array);assertEquals(array[0],4);assertEquals(array[1],3);assertEquals(array[2],2);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseDouble",0,"public void testReverseDouble(){double[]array=new double[]{0.3d,0.4d,0.5d};ArrayUtils.reverse(array);assertEquals(array[0],0.5d,0.0d);assertEquals(array[1],0.4d,0.0d);assertEquals(array[2],0.3d,0.0d);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseFloat",0,"public void testReverseFloat(){float[]array=new float[]{0.3f,0.4f,0.5f};ArrayUtils.reverse(array);assertEquals(array[0],0.5f,0.0f);assertEquals(array[1],0.4f,0.0f);assertEquals(array[2],0.3f,0.0f);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testReverseBoolean",0,"public void testReverseBoolean(){boolean[]array=new boolean[]{false,false,true};ArrayUtils.reverse(array);assertEquals(array[0],true);assertEquals(array[1],false);assertEquals(array[2],false);array=null;ArrayUtils.reverse(array);assertEquals(null,array);}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOf",0,"public void testIndexOf(){Object[]array=new Object[]{""0"",""1"",""2"",""3"",null,""0""};assertEquals(-1,ArrayUtils.indexOf(null,null));assertEquals(-1,ArrayUtils.indexOf(null,""0""));assertEquals(-1,ArrayUtils.indexOf(new Object[0],""0""));assertEquals(0,ArrayUtils.indexOf(array,""0""));assertEquals(1,ArrayUtils.indexOf(array,""1""));assertEquals(2,ArrayUtils.indexOf(array,""2""));assertEquals(3,ArrayUtils.indexOf(array,""3""));assertEquals(4,ArrayUtils.indexOf(array,null));assertEquals(-1,ArrayUtils.indexOf(array,""notInArray""));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfWithStartIndex",0,"public void testIndexOfWithStartIndex(){Object[]array=new Object[]{""0"",""1"",""2"",""3"",null,""0""};assertEquals(-1,ArrayUtils.indexOf(null,null,2));assertEquals(-1,ArrayUtils.indexOf(new Object[0],""0"",0));assertEquals(-1,ArrayUtils.indexOf(null,""0"",2));assertEquals(5,ArrayUtils.indexOf(array,""0"",2));assertEquals(-1,ArrayUtils.indexOf(array,""1"",2));assertEquals(2,ArrayUtils.indexOf(array,""2"",2));assertEquals(3,ArrayUtils.indexOf(array,""3"",2));assertEquals(4,ArrayUtils.indexOf(array,null,2));assertEquals(-1,ArrayUtils.indexOf(array,""notInArray"",2));assertEquals(4,ArrayUtils.indexOf(array,null,-1));assertEquals(-1,ArrayUtils.indexOf(array,null,8));assertEquals(-1,ArrayUtils.indexOf(array,""0"",8));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOf",0,"public void testLastIndexOf(){Object[]array=new Object[]{""0"",""1"",""2"",""3"",null,""0""};assertEquals(-1,ArrayUtils.lastIndexOf(null,null));assertEquals(-1,ArrayUtils.lastIndexOf(null,""0""));assertEquals(5,ArrayUtils.lastIndexOf(array,""0""));assertEquals(1,ArrayUtils.lastIndexOf(array,""1""));assertEquals(2,ArrayUtils.lastIndexOf(array,""2""));assertEquals(3,ArrayUtils.lastIndexOf(array,""3""));assertEquals(4,ArrayUtils.lastIndexOf(array,null));assertEquals(-1,ArrayUtils.lastIndexOf(array,""notInArray""));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfWithStartIndex",0,"public void testLastIndexOfWithStartIndex(){Object[]array=new Object[]{""0"",""1"",""2"",""3"",null,""0""};assertEquals(-1,ArrayUtils.lastIndexOf(null,null,2));assertEquals(-1,ArrayUtils.lastIndexOf(null,""0"",2));assertEquals(0,ArrayUtils.lastIndexOf(array,""0"",2));assertEquals(1,ArrayUtils.lastIndexOf(array,""1"",2));assertEquals(2,ArrayUtils.lastIndexOf(array,""2"",2));assertEquals(-1,ArrayUtils.lastIndexOf(array,""3"",2));assertEquals(-1,ArrayUtils.lastIndexOf(array,""3"",-1));assertEquals(4,ArrayUtils.lastIndexOf(array,null,5));assertEquals(-1,ArrayUtils.lastIndexOf(array,null,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,""notInArray"",5));assertEquals(-1,ArrayUtils.lastIndexOf(array,null,-1));assertEquals(5,ArrayUtils.lastIndexOf(array,""0"",88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContains",0,"public void testContains(){Object[]array=new Object[]{""0"",""1"",""2"",""3"",null,""0""};assertEquals(false,ArrayUtils.contains(null,null));assertEquals(false,ArrayUtils.contains(null,""1""));assertEquals(true,ArrayUtils.contains(array,""0""));assertEquals(true,ArrayUtils.contains(array,""1""));assertEquals(true,ArrayUtils.contains(array,""2""));assertEquals(true,ArrayUtils.contains(array,""3""));assertEquals(true,ArrayUtils.contains(array,null));assertEquals(false,ArrayUtils.contains(array,""notInArray""));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfLong",0,"public void testIndexOfLong(){long[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,0));array=new long[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,0));assertEquals(1,ArrayUtils.indexOf(array,1));assertEquals(2,ArrayUtils.indexOf(array,2));assertEquals(3,ArrayUtils.indexOf(array,3));assertEquals(-1,ArrayUtils.indexOf(array,99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfLongWithStartIndex",0,"public void testIndexOfLongWithStartIndex(){long[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,0,2));array=new long[]{0,1,2,3,0};assertEquals(4,ArrayUtils.indexOf(array,0,2));assertEquals(-1,ArrayUtils.indexOf(array,1,2));assertEquals(2,ArrayUtils.indexOf(array,2,2));assertEquals(3,ArrayUtils.indexOf(array,3,2));assertEquals(3,ArrayUtils.indexOf(array,3,-1));assertEquals(-1,ArrayUtils.indexOf(array,99,0));assertEquals(-1,ArrayUtils.indexOf(array,0,6));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfLong",0,"public void testLastIndexOfLong(){long[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,0));array=new long[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,0));assertEquals(1,ArrayUtils.lastIndexOf(array,1));assertEquals(2,ArrayUtils.lastIndexOf(array,2));assertEquals(3,ArrayUtils.lastIndexOf(array,3));assertEquals(-1,ArrayUtils.lastIndexOf(array,99));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfLongWithStartIndex",0,"public void testLastIndexOfLongWithStartIndex(){long[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,0,2));array=new long[]{0,1,2,3,0};assertEquals(0,ArrayUtils.lastIndexOf(array,0,2));assertEquals(1,ArrayUtils.lastIndexOf(array,1,2));assertEquals(2,ArrayUtils.lastIndexOf(array,2,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,3,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,3,-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,99,4));assertEquals(4,ArrayUtils.lastIndexOf(array,0,88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsLong",0,"public void testContainsLong(){long[]array=null;assertEquals(false,ArrayUtils.contains(array,1));array=new long[]{0,1,2,3,0};assertEquals(true,ArrayUtils.contains(array,0));assertEquals(true,ArrayUtils.contains(array,1));assertEquals(true,ArrayUtils.contains(array,2));assertEquals(true,ArrayUtils.contains(array,3));assertEquals(false,ArrayUtils.contains(array,99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfInt",0,"public void testIndexOfInt(){int[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,0));array=new int[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,0));assertEquals(1,ArrayUtils.indexOf(array,1));assertEquals(2,ArrayUtils.indexOf(array,2));assertEquals(3,ArrayUtils.indexOf(array,3));assertEquals(-1,ArrayUtils.indexOf(array,99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfIntWithStartIndex",0,"public void testIndexOfIntWithStartIndex(){int[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,0,2));array=new int[]{0,1,2,3,0};assertEquals(4,ArrayUtils.indexOf(array,0,2));assertEquals(-1,ArrayUtils.indexOf(array,1,2));assertEquals(2,ArrayUtils.indexOf(array,2,2));assertEquals(3,ArrayUtils.indexOf(array,3,2));assertEquals(3,ArrayUtils.indexOf(array,3,-1));assertEquals(-1,ArrayUtils.indexOf(array,99,0));assertEquals(-1,ArrayUtils.indexOf(array,0,6));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfInt",0,"public void testLastIndexOfInt(){int[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,0));array=new int[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,0));assertEquals(1,ArrayUtils.lastIndexOf(array,1));assertEquals(2,ArrayUtils.lastIndexOf(array,2));assertEquals(3,ArrayUtils.lastIndexOf(array,3));assertEquals(-1,ArrayUtils.lastIndexOf(array,99));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfIntWithStartIndex",0,"public void testLastIndexOfIntWithStartIndex(){int[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,0,2));array=new int[]{0,1,2,3,0};assertEquals(0,ArrayUtils.lastIndexOf(array,0,2));assertEquals(1,ArrayUtils.lastIndexOf(array,1,2));assertEquals(2,ArrayUtils.lastIndexOf(array,2,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,3,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,3,-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,99));assertEquals(4,ArrayUtils.lastIndexOf(array,0,88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsInt",0,"public void testContainsInt(){int[]array=null;assertEquals(false,ArrayUtils.contains(array,1));array=new int[]{0,1,2,3,0};assertEquals(true,ArrayUtils.contains(array,0));assertEquals(true,ArrayUtils.contains(array,1));assertEquals(true,ArrayUtils.contains(array,2));assertEquals(true,ArrayUtils.contains(array,3));assertEquals(false,ArrayUtils.contains(array,99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfShort",0,"public void testIndexOfShort(){short[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(short)0));array=new short[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,(short)0));assertEquals(1,ArrayUtils.indexOf(array,(short)1));assertEquals(2,ArrayUtils.indexOf(array,(short)2));assertEquals(3,ArrayUtils.indexOf(array,(short)3));assertEquals(-1,ArrayUtils.indexOf(array,(short)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfShortWithStartIndex",0,"public void testIndexOfShortWithStartIndex(){short[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(short)0,2));array=new short[]{0,1,2,3,0};assertEquals(4,ArrayUtils.indexOf(array,(short)0,2));assertEquals(-1,ArrayUtils.indexOf(array,(short)1,2));assertEquals(2,ArrayUtils.indexOf(array,(short)2,2));assertEquals(3,ArrayUtils.indexOf(array,(short)3,2));assertEquals(3,ArrayUtils.indexOf(array,(short)3,-1));assertEquals(-1,ArrayUtils.indexOf(array,(short)99,0));assertEquals(-1,ArrayUtils.indexOf(array,(short)0,6));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfShort",0,"public void testLastIndexOfShort(){short[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(short)0));array=new short[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,(short)0));assertEquals(1,ArrayUtils.lastIndexOf(array,(short)1));assertEquals(2,ArrayUtils.lastIndexOf(array,(short)2));assertEquals(3,ArrayUtils.lastIndexOf(array,(short)3));assertEquals(-1,ArrayUtils.lastIndexOf(array,(short)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfShortWithStartIndex",0,"public void testLastIndexOfShortWithStartIndex(){short[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(short)0,2));array=new short[]{0,1,2,3,0};assertEquals(0,ArrayUtils.lastIndexOf(array,(short)0,2));assertEquals(1,ArrayUtils.lastIndexOf(array,(short)1,2));assertEquals(2,ArrayUtils.lastIndexOf(array,(short)2,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(short)3,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(short)3,-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,(short)99));assertEquals(4,ArrayUtils.lastIndexOf(array,(short)0,88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsShort",0,"public void testContainsShort(){short[]array=null;assertEquals(false,ArrayUtils.contains(array,(short)1));array=new short[]{0,1,2,3,0};assertEquals(true,ArrayUtils.contains(array,(short)0));assertEquals(true,ArrayUtils.contains(array,(short)1));assertEquals(true,ArrayUtils.contains(array,(short)2));assertEquals(true,ArrayUtils.contains(array,(short)3));assertEquals(false,ArrayUtils.contains(array,(short)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfChar",0,"public void testIndexOfChar(){char[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,'a'));array=new char[]{'a','b','c','d','a'};assertEquals(0,ArrayUtils.indexOf(array,'a'));assertEquals(1,ArrayUtils.indexOf(array,'b'));assertEquals(2,ArrayUtils.indexOf(array,'c'));assertEquals(3,ArrayUtils.indexOf(array,'d'));assertEquals(-1,ArrayUtils.indexOf(array,'e'));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfCharWithStartIndex",0,"public void testIndexOfCharWithStartIndex(){char[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,'a',2));array=new char[]{'a','b','c','d','a'};assertEquals(4,ArrayUtils.indexOf(array,'a',2));assertEquals(-1,ArrayUtils.indexOf(array,'b',2));assertEquals(2,ArrayUtils.indexOf(array,'c',2));assertEquals(3,ArrayUtils.indexOf(array,'d',2));assertEquals(3,ArrayUtils.indexOf(array,'d',-1));assertEquals(-1,ArrayUtils.indexOf(array,'e',0));assertEquals(-1,ArrayUtils.indexOf(array,'a',6));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfChar",0,"public void testLastIndexOfChar(){char[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,'a'));array=new char[]{'a','b','c','d','a'};assertEquals(4,ArrayUtils.lastIndexOf(array,'a'));assertEquals(1,ArrayUtils.lastIndexOf(array,'b'));assertEquals(2,ArrayUtils.lastIndexOf(array,'c'));assertEquals(3,ArrayUtils.lastIndexOf(array,'d'));assertEquals(-1,ArrayUtils.lastIndexOf(array,'e'));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfCharWithStartIndex",0,"public void testLastIndexOfCharWithStartIndex(){char[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,'a',2));array=new char[]{'a','b','c','d','a'};assertEquals(0,ArrayUtils.lastIndexOf(array,'a',2));assertEquals(1,ArrayUtils.lastIndexOf(array,'b',2));assertEquals(2,ArrayUtils.lastIndexOf(array,'c',2));assertEquals(-1,ArrayUtils.lastIndexOf(array,'d',2));assertEquals(-1,ArrayUtils.lastIndexOf(array,'d',-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,'e'));assertEquals(4,ArrayUtils.lastIndexOf(array,'a',88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsChar",0,"public void testContainsChar(){char[]array=null;assertEquals(false,ArrayUtils.contains(array,'b'));array=new char[]{'a','b','c','d','a'};assertEquals(true,ArrayUtils.contains(array,'a'));assertEquals(true,ArrayUtils.contains(array,'b'));assertEquals(true,ArrayUtils.contains(array,'c'));assertEquals(true,ArrayUtils.contains(array,'d'));assertEquals(false,ArrayUtils.contains(array,'e'));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfByte",0,"public void testIndexOfByte(){byte[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(byte)0));array=new byte[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,(byte)0));assertEquals(1,ArrayUtils.indexOf(array,(byte)1));assertEquals(2,ArrayUtils.indexOf(array,(byte)2));assertEquals(3,ArrayUtils.indexOf(array,(byte)3));assertEquals(-1,ArrayUtils.indexOf(array,(byte)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfByteWithStartIndex",0,"public void testIndexOfByteWithStartIndex(){byte[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(byte)0,2));array=new byte[]{0,1,2,3,0};assertEquals(4,ArrayUtils.indexOf(array,(byte)0,2));assertEquals(-1,ArrayUtils.indexOf(array,(byte)1,2));assertEquals(2,ArrayUtils.indexOf(array,(byte)2,2));assertEquals(3,ArrayUtils.indexOf(array,(byte)3,2));assertEquals(3,ArrayUtils.indexOf(array,(byte)3,-1));assertEquals(-1,ArrayUtils.indexOf(array,(byte)99,0));assertEquals(-1,ArrayUtils.indexOf(array,(byte)0,6));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfByte",0,"public void testLastIndexOfByte(){byte[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(byte)0));array=new byte[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,(byte)0));assertEquals(1,ArrayUtils.lastIndexOf(array,(byte)1));assertEquals(2,ArrayUtils.lastIndexOf(array,(byte)2));assertEquals(3,ArrayUtils.lastIndexOf(array,(byte)3));assertEquals(-1,ArrayUtils.lastIndexOf(array,(byte)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfByteWithStartIndex",0,"public void testLastIndexOfByteWithStartIndex(){byte[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(byte)0,2));array=new byte[]{0,1,2,3,0};assertEquals(0,ArrayUtils.lastIndexOf(array,(byte)0,2));assertEquals(1,ArrayUtils.lastIndexOf(array,(byte)1,2));assertEquals(2,ArrayUtils.lastIndexOf(array,(byte)2,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(byte)3,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(byte)3,-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,(byte)99));assertEquals(4,ArrayUtils.lastIndexOf(array,(byte)0,88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsByte",0,"public void testContainsByte(){byte[]array=null;assertEquals(false,ArrayUtils.contains(array,(byte)1));array=new byte[]{0,1,2,3,0};assertEquals(true,ArrayUtils.contains(array,(byte)0));assertEquals(true,ArrayUtils.contains(array,(byte)1));assertEquals(true,ArrayUtils.contains(array,(byte)2));assertEquals(true,ArrayUtils.contains(array,(byte)3));assertEquals(false,ArrayUtils.contains(array,(byte)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfDouble",0,"public void testIndexOfDouble(){double[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(double)0));array=new double[0];assertEquals(-1,ArrayUtils.indexOf(array,(double)0));array=new double[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,(double)0));assertEquals(1,ArrayUtils.indexOf(array,(double)1));assertEquals(2,ArrayUtils.indexOf(array,(double)2));assertEquals(3,ArrayUtils.indexOf(array,(double)3));assertEquals(3,ArrayUtils.indexOf(array,(double)3,-1));assertEquals(-1,ArrayUtils.indexOf(array,(double)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfDoubleTolerance",0,"public void testIndexOfDoubleTolerance(){double[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(double)0,(double)0));array=new double[0];assertEquals(-1,ArrayUtils.indexOf(array,(double)0,(double)0));array=new double[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,(double)0,(double)0.3));assertEquals(2,ArrayUtils.indexOf(array,(double)2.2,(double)0.35));assertEquals(3,ArrayUtils.indexOf(array,(double)4.15,(double)2.0));assertEquals(1,ArrayUtils.indexOf(array,(double)1.00001324,(double)0.0001));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfDoubleWithStartIndex",0,"public void testIndexOfDoubleWithStartIndex(){double[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(double)0,2));array=new double[0];assertEquals(-1,ArrayUtils.indexOf(array,(double)0,2));array=new double[]{0,1,2,3,0};assertEquals(4,ArrayUtils.indexOf(array,(double)0,2));assertEquals(-1,ArrayUtils.indexOf(array,(double)1,2));assertEquals(2,ArrayUtils.indexOf(array,(double)2,2));assertEquals(3,ArrayUtils.indexOf(array,(double)3,2));assertEquals(-1,ArrayUtils.indexOf(array,(double)99,0));assertEquals(-1,ArrayUtils.indexOf(array,(double)0,6));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfDoubleWithStartIndexTolerance",0,"public void testIndexOfDoubleWithStartIndexTolerance(){double[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(double)0,2,(double)0));array=new double[0];assertEquals(-1,ArrayUtils.indexOf(array,(double)0,2,(double)0));array=new double[]{0,1,2,3,0};assertEquals(-1,ArrayUtils.indexOf(array,(double)0,99,(double)0.3));assertEquals(0,ArrayUtils.indexOf(array,(double)0,0,(double)0.3));assertEquals(4,ArrayUtils.indexOf(array,(double)0,3,(double)0.3));assertEquals(2,ArrayUtils.indexOf(array,(double)2.2,0,(double)0.35));assertEquals(3,ArrayUtils.indexOf(array,(double)4.15,0,(double)2.0));assertEquals(1,ArrayUtils.indexOf(array,(double)1.00001324,0,(double)0.0001));assertEquals(3,ArrayUtils.indexOf(array,(double)4.15,-1,(double)2.0));assertEquals(1,ArrayUtils.indexOf(array,(double)1.00001324,-300,(double)0.0001));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDouble",0,"public void testLastIndexOfDouble(){double[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0));array=new double[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0));array=new double[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,(double)0));assertEquals(1,ArrayUtils.lastIndexOf(array,(double)1));assertEquals(2,ArrayUtils.lastIndexOf(array,(double)2));assertEquals(3,ArrayUtils.lastIndexOf(array,(double)3));assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDoubleTolerance",0,"public void testLastIndexOfDoubleTolerance(){double[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0,(double)0));array=new double[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0,(double)0));array=new double[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,(double)0,(double)0.3));assertEquals(2,ArrayUtils.lastIndexOf(array,(double)2.2,(double)0.35));assertEquals(3,ArrayUtils.lastIndexOf(array,(double)4.15,(double)2.0));assertEquals(1,ArrayUtils.lastIndexOf(array,(double)1.00001324,(double)0.0001));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndex",0,"public void testLastIndexOfDoubleWithStartIndex(){double[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0,2));array=new double[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0,2));array=new double[]{0,1,2,3,0};assertEquals(0,ArrayUtils.lastIndexOf(array,(double)0,2));assertEquals(1,ArrayUtils.lastIndexOf(array,(double)1,2));assertEquals(2,ArrayUtils.lastIndexOf(array,(double)2,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)3,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)3,-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)99));assertEquals(4,ArrayUtils.lastIndexOf(array,(double)0,88));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfDoubleWithStartIndexTolerance",0,"public void testLastIndexOfDoubleWithStartIndexTolerance(){double[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0,2,(double)0));array=new double[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)0,2,(double)0));array=new double[]{(double)3};assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)1,0,(double)0));array=new double[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,(double)0,99,(double)0.3));assertEquals(0,ArrayUtils.lastIndexOf(array,(double)0,3,(double)0.3));assertEquals(2,ArrayUtils.lastIndexOf(array,(double)2.2,3,(double)0.35));assertEquals(3,ArrayUtils.lastIndexOf(array,(double)4.15,array.length,(double)2.0));assertEquals(1,ArrayUtils.lastIndexOf(array,(double)1.00001324,array.length,(double)0.0001));assertEquals(-1,ArrayUtils.lastIndexOf(array,(double)4.15,-200,(double)2.0));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsDouble",0,"public void testContainsDouble(){double[]array=null;assertEquals(false,ArrayUtils.contains(array,(double)1));array=new double[]{0,1,2,3,0};assertEquals(true,ArrayUtils.contains(array,(double)0));assertEquals(true,ArrayUtils.contains(array,(double)1));assertEquals(true,ArrayUtils.contains(array,(double)2));assertEquals(true,ArrayUtils.contains(array,(double)3));assertEquals(false,ArrayUtils.contains(array,(double)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsDoubleTolerance",0,"public void testContainsDoubleTolerance(){double[]array=null;assertEquals(false,ArrayUtils.contains(array,(double)1,(double)0));array=new double[]{0,1,2,3,0};assertEquals(false,ArrayUtils.contains(array,(double)4.0,(double)0.33));assertEquals(false,ArrayUtils.contains(array,(double)2.5,(double)0.49));assertEquals(true,ArrayUtils.contains(array,(double)2.5,(double)0.50));assertEquals(true,ArrayUtils.contains(array,(double)2.5,(double)0.51));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfFloat",0,"public void testIndexOfFloat(){float[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(float)0));array=new float[0];assertEquals(-1,ArrayUtils.indexOf(array,(float)0));array=new float[]{0,1,2,3,0};assertEquals(0,ArrayUtils.indexOf(array,(float)0));assertEquals(1,ArrayUtils.indexOf(array,(float)1));assertEquals(2,ArrayUtils.indexOf(array,(float)2));assertEquals(3,ArrayUtils.indexOf(array,(float)3));assertEquals(-1,ArrayUtils.indexOf(array,(float)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfFloatWithStartIndex",0,"public void testIndexOfFloatWithStartIndex(){float[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,(float)0,2));array=new float[0];assertEquals(-1,ArrayUtils.indexOf(array,(float)0,2));array=new float[]{0,1,2,3,0};assertEquals(4,ArrayUtils.indexOf(array,(float)0,2));assertEquals(-1,ArrayUtils.indexOf(array,(float)1,2));assertEquals(2,ArrayUtils.indexOf(array,(float)2,2));assertEquals(3,ArrayUtils.indexOf(array,(float)3,2));assertEquals(3,ArrayUtils.indexOf(array,(float)3,-1));assertEquals(-1,ArrayUtils.indexOf(array,(float)99,0));assertEquals(-1,ArrayUtils.indexOf(array,(float)0,6));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfFloat",0,"public void testLastIndexOfFloat(){float[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)0));array=new float[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)0));array=new float[]{0,1,2,3,0};assertEquals(4,ArrayUtils.lastIndexOf(array,(float)0));assertEquals(1,ArrayUtils.lastIndexOf(array,(float)1));assertEquals(2,ArrayUtils.lastIndexOf(array,(float)2));assertEquals(3,ArrayUtils.lastIndexOf(array,(float)3));assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfFloatWithStartIndex",0,"public void testLastIndexOfFloatWithStartIndex(){float[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)0,2));array=new float[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)0,2));array=new float[]{0,1,2,3,0};assertEquals(0,ArrayUtils.lastIndexOf(array,(float)0,2));assertEquals(1,ArrayUtils.lastIndexOf(array,(float)1,2));assertEquals(2,ArrayUtils.lastIndexOf(array,(float)2,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)3,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)3,-1));assertEquals(-1,ArrayUtils.lastIndexOf(array,(float)99));assertEquals(4,ArrayUtils.lastIndexOf(array,(float)0,88));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsFloat",0,"public void testContainsFloat(){float[]array=null;assertEquals(false,ArrayUtils.contains(array,(float)1));array=new float[]{0,1,2,3,0};assertEquals(true,ArrayUtils.contains(array,(float)0));assertEquals(true,ArrayUtils.contains(array,(float)1));assertEquals(true,ArrayUtils.contains(array,(float)2));assertEquals(true,ArrayUtils.contains(array,(float)3));assertEquals(false,ArrayUtils.contains(array,(float)99));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfBoolean",0,"public void testIndexOfBoolean(){boolean[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,true));array=new boolean[0];assertEquals(-1,ArrayUtils.indexOf(array,true));array=new boolean[]{true,false,true};assertEquals(0,ArrayUtils.indexOf(array,true));assertEquals(1,ArrayUtils.indexOf(array,false));array=new boolean[]{true,true};assertEquals(-1,ArrayUtils.indexOf(array,false));}"
"org.apache.commons.lang.ArrayUtilsTest.testIndexOfBooleanWithStartIndex",0,"public void testIndexOfBooleanWithStartIndex(){boolean[]array=null;assertEquals(-1,ArrayUtils.indexOf(array,true,2));array=new boolean[0];assertEquals(-1,ArrayUtils.indexOf(array,true,2));array=new boolean[]{true,false,true};assertEquals(2,ArrayUtils.indexOf(array,true,1));assertEquals(-1,ArrayUtils.indexOf(array,false,2));assertEquals(1,ArrayUtils.indexOf(array,false,0));assertEquals(1,ArrayUtils.indexOf(array,false,-1));array=new boolean[]{true,true};assertEquals(-1,ArrayUtils.indexOf(array,false,0));assertEquals(-1,ArrayUtils.indexOf(array,false,-1));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfBoolean",0,"public void testLastIndexOfBoolean(){boolean[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,true));array=new boolean[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,true));array=new boolean[]{true,false,true};assertEquals(2,ArrayUtils.lastIndexOf(array,true));assertEquals(1,ArrayUtils.lastIndexOf(array,false));array=new boolean[]{true,true};assertEquals(-1,ArrayUtils.lastIndexOf(array,false));}"
"org.apache.commons.lang.ArrayUtilsTest.testLastIndexOfBooleanWithStartIndex",0,"public void testLastIndexOfBooleanWithStartIndex(){boolean[]array=null;assertEquals(-1,ArrayUtils.lastIndexOf(array,true,2));array=new boolean[0];assertEquals(-1,ArrayUtils.lastIndexOf(array,true,2));array=new boolean[]{true,false,true};assertEquals(2,ArrayUtils.lastIndexOf(array,true,2));assertEquals(0,ArrayUtils.lastIndexOf(array,true,1));assertEquals(1,ArrayUtils.lastIndexOf(array,false,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,true,-1));array=new boolean[]{true,true};assertEquals(-1,ArrayUtils.lastIndexOf(array,false,2));assertEquals(-1,ArrayUtils.lastIndexOf(array,true,-1));}"
"org.apache.commons.lang.ArrayUtilsTest.testContainsBoolean",0,"public void testContainsBoolean(){boolean[]array=null;assertEquals(false,ArrayUtils.contains(array,true));array=new boolean[]{true,false,true};assertEquals(true,ArrayUtils.contains(array,true));assertEquals(true,ArrayUtils.contains(array,false));array=new boolean[]{true,true};assertEquals(true,ArrayUtils.contains(array,true));assertEquals(false,ArrayUtils.contains(array,false));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_boolean",0,"public void testToPrimitive_boolean(){final Boolean[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.toPrimitive(new Boolean[0]));assertTrue(Arrays.equals(new boolean[]{true,false,true},ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE})));try {ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE,null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_boolean_boolean",0,"public void testToPrimitive_boolean_boolean(){assertEquals(null,ArrayUtils.toPrimitive(null,false));assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY,ArrayUtils.toPrimitive(new Boolean[0],false));assertTrue(Arrays.equals(new boolean[]{true,false,true},ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE},false)));assertTrue(Arrays.equals(new boolean[]{true,false,false},ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE,null,Boolean.FALSE},false)));assertTrue(Arrays.equals(new boolean[]{true,true,false},ArrayUtils.toPrimitive(new Boolean[]{Boolean.TRUE,null,Boolean.FALSE},true)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_boolean",0,"public void testToObject_boolean(){final boolean[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY,ArrayUtils.toObject(new boolean[0]));assertTrue(Arrays.equals(new Boolean[]{Boolean.TRUE,Boolean.FALSE,Boolean.TRUE},ArrayUtils.toObject(new boolean[]{true,false,true})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_char",0,"public void testToPrimitive_char(){final Character[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.toPrimitive(new Character[0]));assertTrue(Arrays.equals(new char[]{Character.MIN_VALUE,Character.MAX_VALUE,'0'},ArrayUtils.toPrimitive(new Character[]{new Character(Character.MIN_VALUE),new Character(Character.MAX_VALUE),new Character('0')})));try {ArrayUtils.toPrimitive(new Character[]{new Character(Character.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_char_char",0,"public void testToPrimitive_char_char(){final Character[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b,Character.MIN_VALUE));assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,ArrayUtils.toPrimitive(new Character[0],(char)0));assertTrue(Arrays.equals(new char[]{Character.MIN_VALUE,Character.MAX_VALUE,'0'},ArrayUtils.toPrimitive(new Character[]{new Character(Character.MIN_VALUE),new Character(Character.MAX_VALUE),new Character('0')},Character.MIN_VALUE)));assertTrue(Arrays.equals(new char[]{Character.MIN_VALUE,Character.MAX_VALUE,'0'},ArrayUtils.toPrimitive(new Character[]{new Character(Character.MIN_VALUE),null,new Character('0')},Character.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_char",0,"public void testToObject_char(){final char[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY,ArrayUtils.toObject(new char[0]));assertTrue(Arrays.equals(new Character[]{new Character(Character.MIN_VALUE),new Character(Character.MAX_VALUE),new Character('0')},ArrayUtils.toObject(new char[]{Character.MIN_VALUE,Character.MAX_VALUE,'0'})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_byte",0,"public void testToPrimitive_byte(){final Byte[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.toPrimitive(new Byte[0]));assertTrue(Arrays.equals(new byte[]{Byte.MIN_VALUE,Byte.MAX_VALUE,(byte)9999999},ArrayUtils.toPrimitive(new Byte[]{new Byte(Byte.MIN_VALUE),new Byte(Byte.MAX_VALUE),new Byte((byte)9999999)})));try {ArrayUtils.toPrimitive(new Byte[]{new Byte(Byte.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_byte_byte",0,"public void testToPrimitive_byte_byte(){final Byte[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b,Byte.MIN_VALUE));assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,ArrayUtils.toPrimitive(new Byte[0],(byte)1));assertTrue(Arrays.equals(new byte[]{Byte.MIN_VALUE,Byte.MAX_VALUE,(byte)9999999},ArrayUtils.toPrimitive(new Byte[]{new Byte(Byte.MIN_VALUE),new Byte(Byte.MAX_VALUE),new Byte((byte)9999999)},Byte.MIN_VALUE)));assertTrue(Arrays.equals(new byte[]{Byte.MIN_VALUE,Byte.MAX_VALUE,(byte)9999999},ArrayUtils.toPrimitive(new Byte[]{new Byte(Byte.MIN_VALUE),null,new Byte((byte)9999999)},Byte.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_byte",0,"public void testToObject_byte(){final byte[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,ArrayUtils.toObject(new byte[0]));assertTrue(Arrays.equals(new Byte[]{new Byte(Byte.MIN_VALUE),new Byte(Byte.MAX_VALUE),new Byte((byte)9999999)},ArrayUtils.toObject(new byte[]{Byte.MIN_VALUE,Byte.MAX_VALUE,(byte)9999999})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_short",0,"public void testToPrimitive_short(){final Short[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.toPrimitive(new Short[0]));assertTrue(Arrays.equals(new short[]{Short.MIN_VALUE,Short.MAX_VALUE,(short)9999999},ArrayUtils.toPrimitive(new Short[]{new Short(Short.MIN_VALUE),new Short(Short.MAX_VALUE),new Short((short)9999999)})));try {ArrayUtils.toPrimitive(new Short[]{new Short(Short.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_short_short",0,"public void testToPrimitive_short_short(){final Short[]s=null;assertEquals(null,ArrayUtils.toPrimitive(s,Short.MIN_VALUE));assertSame(ArrayUtils.EMPTY_SHORT_ARRAY,ArrayUtils.toPrimitive(new Short[0],Short.MIN_VALUE));assertTrue(Arrays.equals(new short[]{Short.MIN_VALUE,Short.MAX_VALUE,(short)9999999},ArrayUtils.toPrimitive(new Short[]{new Short(Short.MIN_VALUE),new Short(Short.MAX_VALUE),new Short((short)9999999)},Short.MIN_VALUE)));assertTrue(Arrays.equals(new short[]{Short.MIN_VALUE,Short.MAX_VALUE,(short)9999999},ArrayUtils.toPrimitive(new Short[]{new Short(Short.MIN_VALUE),null,new Short((short)9999999)},Short.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_short",0,"public void testToObject_short(){final short[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,ArrayUtils.toObject(new short[0]));assertTrue(Arrays.equals(new Short[]{new Short(Short.MIN_VALUE),new Short(Short.MAX_VALUE),new Short((short)9999999)},ArrayUtils.toObject(new short[]{Short.MIN_VALUE,Short.MAX_VALUE,(short)9999999})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_int",0,"public void testToPrimitive_int(){final Integer[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.toPrimitive(new Integer[0]));assertTrue(Arrays.equals(new int[]{Integer.MIN_VALUE,Integer.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Integer[]{new Integer(Integer.MIN_VALUE),new Integer(Integer.MAX_VALUE),new Integer(9999999)})));try {ArrayUtils.toPrimitive(new Integer[]{new Integer(Integer.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_int_int",0,"public void testToPrimitive_int_int(){final Long[]l=null;assertEquals(null,ArrayUtils.toPrimitive(l,Integer.MIN_VALUE));assertSame(ArrayUtils.EMPTY_INT_ARRAY,ArrayUtils.toPrimitive(new Integer[0],1));assertTrue(Arrays.equals(new int[]{Integer.MIN_VALUE,Integer.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Integer[]{new Integer(Integer.MIN_VALUE),new Integer(Integer.MAX_VALUE),new Integer(9999999)},1)));assertTrue(Arrays.equals(new int[]{Integer.MIN_VALUE,Integer.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Integer[]{new Integer(Integer.MIN_VALUE),null,new Integer(9999999)},Integer.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_intNull",0,"public void testToPrimitive_intNull(){Integer[]iArray=null;assertEquals(null,ArrayUtils.toPrimitive(iArray,Integer.MIN_VALUE));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_int",0,"public void testToObject_int(){final int[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,ArrayUtils.toObject(new int[0]));assertTrue(Arrays.equals(new Integer[]{new Integer(Integer.MIN_VALUE),new Integer(Integer.MAX_VALUE),new Integer(9999999)},ArrayUtils.toObject(new int[]{Integer.MIN_VALUE,Integer.MAX_VALUE,9999999})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_long",0,"public void testToPrimitive_long(){final Long[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.toPrimitive(new Long[0]));assertTrue(Arrays.equals(new long[]{Long.MIN_VALUE,Long.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Long[]{new Long(Long.MIN_VALUE),new Long(Long.MAX_VALUE),new Long(9999999)})));try {ArrayUtils.toPrimitive(new Long[]{new Long(Long.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_long_long",0,"public void testToPrimitive_long_long(){final Long[]l=null;assertEquals(null,ArrayUtils.toPrimitive(l,Long.MIN_VALUE));assertSame(ArrayUtils.EMPTY_LONG_ARRAY,ArrayUtils.toPrimitive(new Long[0],1));assertTrue(Arrays.equals(new long[]{Long.MIN_VALUE,Long.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Long[]{new Long(Long.MIN_VALUE),new Long(Long.MAX_VALUE),new Long(9999999)},1)));assertTrue(Arrays.equals(new long[]{Long.MIN_VALUE,Long.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Long[]{new Long(Long.MIN_VALUE),null,new Long(9999999)},Long.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_long",0,"public void testToObject_long(){final long[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,ArrayUtils.toObject(new long[0]));assertTrue(Arrays.equals(new Long[]{new Long(Long.MIN_VALUE),new Long(Long.MAX_VALUE),new Long(9999999)},ArrayUtils.toObject(new long[]{Long.MIN_VALUE,Long.MAX_VALUE,9999999})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_float",0,"public void testToPrimitive_float(){final Float[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.toPrimitive(new Float[0]));assertTrue(Arrays.equals(new float[]{Float.MIN_VALUE,Float.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Float[]{new Float(Float.MIN_VALUE),new Float(Float.MAX_VALUE),new Float(9999999)})));try {ArrayUtils.toPrimitive(new Float[]{new Float(Float.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_float_float",0,"public void testToPrimitive_float_float(){final Float[]l=null;assertEquals(null,ArrayUtils.toPrimitive(l,Float.MIN_VALUE));assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,ArrayUtils.toPrimitive(new Float[0],1));assertTrue(Arrays.equals(new float[]{Float.MIN_VALUE,Float.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Float[]{new Float(Float.MIN_VALUE),new Float(Float.MAX_VALUE),new Float(9999999)},1)));assertTrue(Arrays.equals(new float[]{Float.MIN_VALUE,Float.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Float[]{new Float(Float.MIN_VALUE),null,new Float(9999999)},Float.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_float",0,"public void testToObject_float(){final float[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,ArrayUtils.toObject(new float[0]));assertTrue(Arrays.equals(new Float[]{new Float(Float.MIN_VALUE),new Float(Float.MAX_VALUE),new Float(9999999)},ArrayUtils.toObject(new float[]{Float.MIN_VALUE,Float.MAX_VALUE,9999999})));}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_double",0,"public void testToPrimitive_double(){final Double[]b=null;assertEquals(null,ArrayUtils.toPrimitive(b));assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.toPrimitive(new Double[0]));assertTrue(Arrays.equals(new double[]{Double.MIN_VALUE,Double.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Double[]{new Double(Double.MIN_VALUE),new Double(Double.MAX_VALUE),new Double(9999999)})));try {ArrayUtils.toPrimitive(new Float[]{new Float(Float.MIN_VALUE),null});fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.ArrayUtilsTest.testToPrimitive_double_double",0,"public void testToPrimitive_double_double(){final Double[]l=null;assertEquals(null,ArrayUtils.toPrimitive(l,Double.MIN_VALUE));assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,ArrayUtils.toPrimitive(new Double[0],1));assertTrue(Arrays.equals(new double[]{Double.MIN_VALUE,Double.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Double[]{new Double(Double.MIN_VALUE),new Double(Double.MAX_VALUE),new Double(9999999)},1)));assertTrue(Arrays.equals(new double[]{Double.MIN_VALUE,Double.MAX_VALUE,9999999},ArrayUtils.toPrimitive(new Double[]{new Double(Double.MIN_VALUE),null,new Double(9999999)},Double.MAX_VALUE)));}"
"org.apache.commons.lang.ArrayUtilsTest.testToObject_double",0,"public void testToObject_double(){final double[]b=null;assertEquals(null,ArrayUtils.toObject(b));assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,ArrayUtils.toObject(new double[0]));assertTrue(Arrays.equals(new Double[]{new Double(Double.MIN_VALUE),new Double(Double.MAX_VALUE),new Double(9999999)},ArrayUtils.toObject(new double[]{Double.MIN_VALUE,Double.MAX_VALUE,9999999})));}"
"org.apache.commons.lang.ArrayUtilsTest.testIsEmptyObject",0,"/** * Test for  {@link ArrayUtils#isEmpty(java.lang.Object[])}.*/public void testIsEmptyObject(){Object[]emptyArray=new Object[]{};Object[]notEmptyArray=new Object[]{new String(""Value"")};assertEquals(true,ArrayUtils.isEmpty((Object[])null));assertEquals(true,ArrayUtils.isEmpty(emptyArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testIsEmptyPrimitives",0,"/** * Tests for  {@link ArrayUtils#isEmpty(long[])},{@link ArrayUtils#isEmpty(int[])},{@link ArrayUtils#isEmpty(short[])},{@link ArrayUtils#isEmpty(char[])},{@link ArrayUtils#isEmpty(byte[])},{@link ArrayUtils#isEmpty(double[])},{@link ArrayUtils#isEmpty(float[])}and{@link ArrayUtils#isEmpty(boolean[])}.*/public void testIsEmptyPrimitives(){long[]emptyLongArray=new long[]{};long[]notEmptyLongArray=new long[]{1L};assertEquals(true,ArrayUtils.isEmpty((long[])null));assertEquals(true,ArrayUtils.isEmpty(emptyLongArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyLongArray));int[]emptyIntArray=new int[]{};int[]notEmptyIntArray=new int[]{1};assertEquals(true,ArrayUtils.isEmpty((int[])null));assertEquals(true,ArrayUtils.isEmpty(emptyIntArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyIntArray));short[]emptyShortArray=new short[]{};short[]notEmptyShortArray=new short[]{1};assertEquals(true,ArrayUtils.isEmpty((short[])null));assertEquals(true,ArrayUtils.isEmpty(emptyShortArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyShortArray));char[]emptyCharArray=new char[]{};char[]notEmptyCharArray=new char[]{1};assertEquals(true,ArrayUtils.isEmpty((char[])null));assertEquals(true,ArrayUtils.isEmpty(emptyCharArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyCharArray));byte[]emptyByteArray=new byte[]{};byte[]notEmptyByteArray=new byte[]{1};assertEquals(true,ArrayUtils.isEmpty((byte[])null));assertEquals(true,ArrayUtils.isEmpty(emptyByteArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyByteArray));double[]emptyDoubleArray=new double[]{};double[]notEmptyDoubleArray=new double[]{1.0};assertEquals(true,ArrayUtils.isEmpty((double[])null));assertEquals(true,ArrayUtils.isEmpty(emptyDoubleArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyDoubleArray));float[]emptyFloatArray=new float[]{};float[]notEmptyFloatArray=new float[]{1.0F};assertEquals(true,ArrayUtils.isEmpty((float[])null));assertEquals(true,ArrayUtils.isEmpty(emptyFloatArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyFloatArray));boolean[]emptyBooleanArray=new boolean[]{};boolean[]notEmptyBooleanArray=new boolean[]{true};assertEquals(true,ArrayUtils.isEmpty((boolean[])null));assertEquals(true,ArrayUtils.isEmpty(emptyBooleanArray));assertEquals(false,ArrayUtils.isEmpty(notEmptyBooleanArray));}"
"org.apache.commons.lang.ArrayUtilsTest.testGetLength",0,"public void testGetLength(){assertEquals(0,ArrayUtils.getLength(null));Object[]emptyObjectArray=new Object[0];Object[]notEmptyObjectArray=new Object[]{""aValue""};assertEquals(0,ArrayUtils.getLength((Object[])null));assertEquals(0,ArrayUtils.getLength(emptyObjectArray));assertEquals(1,ArrayUtils.getLength(notEmptyObjectArray));int[]emptyIntArray=new int[]{};int[]notEmptyIntArray=new int[]{1};assertEquals(0,ArrayUtils.getLength((int[])null));assertEquals(0,ArrayUtils.getLength(emptyIntArray));assertEquals(1,ArrayUtils.getLength(notEmptyIntArray));short[]emptyShortArray=new short[]{};short[]notEmptyShortArray=new short[]{1};assertEquals(0,ArrayUtils.getLength((short[])null));assertEquals(0,ArrayUtils.getLength(emptyShortArray));assertEquals(1,ArrayUtils.getLength(notEmptyShortArray));char[]emptyCharArray=new char[]{};char[]notEmptyCharArray=new char[]{1};assertEquals(0,ArrayUtils.getLength((char[])null));assertEquals(0,ArrayUtils.getLength(emptyCharArray));assertEquals(1,ArrayUtils.getLength(notEmptyCharArray));byte[]emptyByteArray=new byte[]{};byte[]notEmptyByteArray=new byte[]{1};assertEquals(0,ArrayUtils.getLength((byte[])null));assertEquals(0,ArrayUtils.getLength(emptyByteArray));assertEquals(1,ArrayUtils.getLength(notEmptyByteArray));double[]emptyDoubleArray=new double[]{};double[]notEmptyDoubleArray=new double[]{1.0};assertEquals(0,ArrayUtils.getLength((double[])null));assertEquals(0,ArrayUtils.getLength(emptyDoubleArray));assertEquals(1,ArrayUtils.getLength(notEmptyDoubleArray));float[]emptyFloatArray=new float[]{};float[]notEmptyFloatArray=new float[]{1.0F};assertEquals(0,ArrayUtils.getLength((float[])null));assertEquals(0,ArrayUtils.getLength(emptyFloatArray));assertEquals(1,ArrayUtils.getLength(notEmptyFloatArray));boolean[]emptyBooleanArray=new boolean[]{};boolean[]notEmptyBooleanArray=new boolean[]{true};assertEquals(0,ArrayUtils.getLength((boolean[])null));assertEquals(0,ArrayUtils.getLength(emptyBooleanArray));assertEquals(1,ArrayUtils.getLength(notEmptyBooleanArray));try {ArrayUtils.getLength(""notAnArray"");fail(""IllegalArgumentException should have been thrown"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionCompare",0,"public void testReflectionCompare(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(4);assertTrue(CompareToBuilder.reflectionCompare(o1,o1)== 0);assertTrue(CompareToBuilder.reflectionCompare(o1,o2)== 0);o2.setA(5);assertTrue(CompareToBuilder.reflectionCompare(o1,o2)< 0);assertTrue(CompareToBuilder.reflectionCompare(o2,o1)> 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionCompareEx1",0,"public void testReflectionCompareEx1(){TestObject o1=new TestObject(4);try {CompareToBuilder.reflectionCompare(o1,null);}catch(NullPointerException ex){return;}fail();}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionCompareEx2",0,"public void testReflectionCompareEx2(){TestObject o1=new TestObject(4);Object o2=new Object();try {CompareToBuilder.reflectionCompare(o1,o2);fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompare",0,"public void testReflectionHierarchyCompare(){testReflectionHierarchyCompare(false,null);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompareExcludeFields",0,"public void testReflectionHierarchyCompareExcludeFields(){String[]excludeFields=new String[]{""b""};testReflectionHierarchyCompare(true,excludeFields);TestSubObject x;TestSubObject y;TestSubObject z;x=new TestSubObject(1,1);y=new TestSubObject(2,1);z=new TestSubObject(3,1);assertXYZCompareOrder(x,y,z,true,excludeFields);x=new TestSubObject(1,3);y=new TestSubObject(2,2);z=new TestSubObject(3,1);assertXYZCompareOrder(x,y,z,true,excludeFields);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testReflectionHierarchyCompareTransients",0,"public void testReflectionHierarchyCompareTransients(){testReflectionHierarchyCompare(true,null);TestTransientSubObject x;TestTransientSubObject y;TestTransientSubObject z;x=new TestTransientSubObject(1,1);y=new TestTransientSubObject(2,2);z=new TestTransientSubObject(3,3);assertXYZCompareOrder(x,y,z,true,null);x=new TestTransientSubObject(1,1);y=new TestTransientSubObject(1,2);z=new TestTransientSubObject(1,3);assertXYZCompareOrder(x,y,z,true,null);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testAppendSuper",0,"public void testAppendSuper(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertTrue(new CompareToBuilder().appendSuper(0).append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().appendSuper(0).append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().appendSuper(0).append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().appendSuper(-1).append(o1,o1).toComparison()< 0);assertTrue(new CompareToBuilder().appendSuper(-1).append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().appendSuper(1).append(o1,o1).toComparison()> 0);assertTrue(new CompareToBuilder().appendSuper(1).append(o1,o2).toComparison()> 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testObject",0,"public void testObject(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(4);assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()== 0);o2.setA(5);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((Object)null,(Object)null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testObjectEx2",0,"public void testObjectEx2(){TestObject o1=new TestObject(4);Object o2=new Object();try {new CompareToBuilder().append(o1,o2);fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testObjectComparator",0,"public void testObjectComparator(){String o1=""Fred"";String o2=""Fred"";assertTrue(new CompareToBuilder().append(o1,o1,String.CASE_INSENSITIVE_ORDER).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2,String.CASE_INSENSITIVE_ORDER).toComparison()== 0);o2=""FRED"";assertTrue(new CompareToBuilder().append(o1,o2,String.CASE_INSENSITIVE_ORDER).toComparison()== 0);assertTrue(new CompareToBuilder().append(o2,o1,String.CASE_INSENSITIVE_ORDER).toComparison()== 0);o2=""FREDA"";assertTrue(new CompareToBuilder().append(o1,o2,String.CASE_INSENSITIVE_ORDER).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1,String.CASE_INSENSITIVE_ORDER).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,null,String.CASE_INSENSITIVE_ORDER).toComparison()> 0);assertTrue(new CompareToBuilder().append((Object)null,(Object)null,String.CASE_INSENSITIVE_ORDER).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,o1,String.CASE_INSENSITIVE_ORDER).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testObjectComparatorNull",0,"public void testObjectComparatorNull(){String o1=""Fred"";String o2=""Fred"";assertTrue(new CompareToBuilder().append(o1,o1,null).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2,null).toComparison()== 0);o2=""Zebra"";assertTrue(new CompareToBuilder().append(o1,o2,null).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,null,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((Object)null,(Object)null,null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,o1,null).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testLong",0,"public void testLong(){long o1=1L;long o2=2L;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Long.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Long.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Long.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Long.MIN_VALUE,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testInt",0,"public void testInt(){int o1=1;int o2=2;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Integer.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Integer.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testShort",0,"public void testShort(){short o1=1;short o2=2;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Short.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Short.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Short.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Short.MIN_VALUE,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testChar",0,"public void testChar(){char o1=1;char o2=2;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Character.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Character.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Character.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Character.MIN_VALUE,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testByte",0,"public void testByte(){byte o1=1;byte o2=2;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Byte.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Byte.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testDouble",0,"public void testDouble(){double o1=1;double o2=2;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Double.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Double.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Double.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Double.MIN_VALUE,o1).toComparison()< 0);assertTrue(new CompareToBuilder().append(Double.NaN,Double.NaN).toComparison()== 0);assertTrue(new CompareToBuilder().append(Double.NaN,Double.MAX_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY,Double.MAX_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY,Double.MIN_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(o1,Double.NaN).toComparison()< 0);assertTrue(new CompareToBuilder().append(Double.NaN,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(-0.0,0.0).toComparison()< 0);assertTrue(new CompareToBuilder().append(0.0,-0.0).toComparison()> 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testFloat",0,"public void testFloat(){float o1=1;float o2=2;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()< 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Float.MAX_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(Float.MAX_VALUE,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(o1,Float.MIN_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Float.MIN_VALUE,o1).toComparison()< 0);assertTrue(new CompareToBuilder().append(Float.NaN,Float.NaN).toComparison()== 0);assertTrue(new CompareToBuilder().append(Float.NaN,Float.MAX_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY,Float.MAX_VALUE).toComparison()> 0);assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY,Float.MIN_VALUE).toComparison()< 0);assertTrue(new CompareToBuilder().append(o1,Float.NaN).toComparison()< 0);assertTrue(new CompareToBuilder().append(Float.NaN,o1).toComparison()> 0);assertTrue(new CompareToBuilder().append(-0.0,0.0).toComparison()< 0);assertTrue(new CompareToBuilder().append(0.0,-0.0).toComparison()> 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testBoolean",0,"public void testBoolean(){boolean o1=true;boolean o2=false;assertTrue(new CompareToBuilder().append(o1,o1).toComparison()== 0);assertTrue(new CompareToBuilder().append(o2,o2).toComparison()== 0);assertTrue(new CompareToBuilder().append(o1,o2).toComparison()> 0);assertTrue(new CompareToBuilder().append(o2,o1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testObjectArray",0,"public void testObjectArray(){TestObject[]obj1=new TestObject[2];obj1[0]=new TestObject(4);obj1[1]=new TestObject(5);TestObject[]obj2=new TestObject[2];obj2[0]=new TestObject(4);obj2[1]=new TestObject(5);TestObject[]obj3=new TestObject[3];obj3[0]=new TestObject(4);obj3[1]=new TestObject(5);obj3[2]=new TestObject(6);assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=new TestObject(7);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((Object[])null,(Object[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testLongArray",0,"public void testLongArray(){long[]obj1=new long[2];obj1[0]=5L;obj1[1]=6L;long[]obj2=new long[2];obj2[0]=5L;obj2[1]=6L;long[]obj3=new long[3];obj3[0]=5L;obj3[1]=6L;obj3[2]=7L;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((long[])null,(long[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testIntArray",0,"public void testIntArray(){int[]obj1=new int[2];obj1[0]=5;obj1[1]=6;int[]obj2=new int[2];obj2[0]=5;obj2[1]=6;int[]obj3=new int[3];obj3[0]=5;obj3[1]=6;obj3[2]=7;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((int[])null,(int[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testShortArray",0,"public void testShortArray(){short[]obj1=new short[2];obj1[0]=5;obj1[1]=6;short[]obj2=new short[2];obj2[0]=5;obj2[1]=6;short[]obj3=new short[3];obj3[0]=5;obj3[1]=6;obj3[2]=7;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((short[])null,(short[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testCharArray",0,"public void testCharArray(){char[]obj1=new char[2];obj1[0]=5;obj1[1]=6;char[]obj2=new char[2];obj2[0]=5;obj2[1]=6;char[]obj3=new char[3];obj3[0]=5;obj3[1]=6;obj3[2]=7;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((char[])null,(char[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testByteArray",0,"public void testByteArray(){byte[]obj1=new byte[2];obj1[0]=5;obj1[1]=6;byte[]obj2=new byte[2];obj2[0]=5;obj2[1]=6;byte[]obj3=new byte[3];obj3[0]=5;obj3[1]=6;obj3[2]=7;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((byte[])null,(byte[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testDoubleArray",0,"public void testDoubleArray(){double[]obj1=new double[2];obj1[0]=5;obj1[1]=6;double[]obj2=new double[2];obj2[0]=5;obj2[1]=6;double[]obj3=new double[3];obj3[0]=5;obj3[1]=6;obj3[2]=7;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((double[])null,(double[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testFloatArray",0,"public void testFloatArray(){float[]obj1=new float[2];obj1[0]=5;obj1[1]=6;float[]obj2=new float[2];obj2[0]=5;obj2[1]=6;float[]obj3=new float[3];obj3[0]=5;obj3[1]=6;obj3[2]=7;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((float[])null,(float[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testBooleanArray",0,"public void testBooleanArray(){boolean[]obj1=new boolean[2];obj1[0]=true;obj1[1]=false;boolean[]obj2=new boolean[2];obj2[0]=true;obj2[1]=false;boolean[]obj3=new boolean[3];obj3[0]=true;obj3[1]=false;obj3[2]=true;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);obj1[1]=true;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj1,null).toComparison()> 0);assertTrue(new CompareToBuilder().append((boolean[])null,(boolean[])null).toComparison()== 0);assertTrue(new CompareToBuilder().append(null,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiLongArray",0,"public void testMultiLongArray(){long[][]array1=new long[2][2];long[][]array2=new long[2][2];long[][]array3=new long[2][3];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);array3[i][j]=(i + 1)* (j + 1);}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=200;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiIntArray",0,"public void testMultiIntArray(){int[][]array1=new int[2][2];int[][]array2=new int[2][2];int[][]array3=new int[2][3];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);array3[i][j]=(i + 1)* (j + 1);}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=200;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiShortArray",0,"public void testMultiShortArray(){short[][]array1=new short[2][2];short[][]array2=new short[2][2];short[][]array3=new short[2][3];for (short i=0;i < array1.length;++i){for (short j=0;j < array1[0].length;j++){array1[i][j]=(short)((i + 1)* (j + 1));array2[i][j]=(short)((i + 1)* (j + 1));array3[i][j]=(short)((i + 1)* (j + 1));}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=200;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiCharArray",0,"public void testMultiCharArray(){char[][]array1=new char[2][2];char[][]array2=new char[2][2];char[][]array3=new char[2][3];for (short i=0;i < array1.length;++i){for (short j=0;j < array1[0].length;j++){array1[i][j]=(char)((i + 1)* (j + 1));array2[i][j]=(char)((i + 1)* (j + 1));array3[i][j]=(char)((i + 1)* (j + 1));}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=200;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiByteArray",0,"public void testMultiByteArray(){byte[][]array1=new byte[2][2];byte[][]array2=new byte[2][2];byte[][]array3=new byte[2][3];for (byte i=0;i < array1.length;++i){for (byte j=0;j < array1[0].length;j++){array1[i][j]=(byte)((i + 1)* (j + 1));array2[i][j]=(byte)((i + 1)* (j + 1));array3[i][j]=(byte)((i + 1)* (j + 1));}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=127;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiFloatArray",0,"public void testMultiFloatArray(){float[][]array1=new float[2][2];float[][]array2=new float[2][2];float[][]array3=new float[2][3];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=((i + 1)* (j + 1));array2[i][j]=((i + 1)* (j + 1));array3[i][j]=((i + 1)* (j + 1));}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=127;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiDoubleArray",0,"public void testMultiDoubleArray(){double[][]array1=new double[2][2];double[][]array2=new double[2][2];double[][]array3=new double[2][3];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=((i + 1)* (j + 1));array2[i][j]=((i + 1)* (j + 1));array3[i][j]=((i + 1)* (j + 1));}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=127;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMultiBooleanArray",0,"public void testMultiBooleanArray(){boolean[][]array1=new boolean[2][2];boolean[][]array2=new boolean[2][2];boolean[][]array3=new boolean[2][3];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=((i == 1)^ (j == 1));array2[i][j]=((i == 1)^ (j == 1));array3[i][j]=((i == 1)^ (j == 1));}}array3[1][2]=false;array3[1][2]=false;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=true;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testRaggedArray",0,"public void testRaggedArray(){long array1[][]=new long[2][];long array2[][]=new long[2][];long array3[][]=new long[3][];for (int i=0;i < array1.length;++i){array1[i]=new long[2];array2[i]=new long[2];array3[i]=new long[3];for (int j=0;j < array1[i].length;++j){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);array3[i][j]=(i + 1)* (j + 1);}}array3[1][2]=100;array3[1][2]=100;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);array1[1][1]=200;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testMixedArray",0,"public void testMixedArray(){Object array1[]=new Object[2];Object array2[]=new Object[2];Object array3[]=new Object[2];for (int i=0;i < array1.length;++i){array1[i]=new long[2];array2[i]=new long[2];array3[i]=new long[3];for (int j=0;j < 2;++j){((long[])array1[i])[j]=(i + 1)* (j + 1);((long[])array2[i])[j]=(i + 1)* (j + 1);((long[])array3[i])[j]=(i + 1)* (j + 1);}}((long[])array3[0])[2]=1;((long[])array3[1])[2]=1;assertTrue(new CompareToBuilder().append(array1,array1).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array2).toComparison()== 0);assertTrue(new CompareToBuilder().append(array1,array3).toComparison()< 0);assertTrue(new CompareToBuilder().append(array3,array1).toComparison()> 0);((long[])array1[1])[1]=200;assertTrue(new CompareToBuilder().append(array1,array2).toComparison()> 0);assertTrue(new CompareToBuilder().append(array2,array1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testObjectArrayHiddenByObject",0,"public void testObjectArrayHiddenByObject(){TestObject[]array1=new TestObject[2];array1[0]=new TestObject(4);array1[1]=new TestObject(5);TestObject[]array2=new TestObject[2];array2[0]=new TestObject(4);array2[1]=new TestObject(5);TestObject[]array3=new TestObject[3];array3[0]=new TestObject(4);array3[1]=new TestObject(5);array3[2]=new TestObject(6);Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=new TestObject(7);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testLongArrayHiddenByObject",0,"public void testLongArrayHiddenByObject(){long[]array1=new long[2];array1[0]=5L;array1[1]=6L;long[]array2=new long[2];array2[0]=5L;array2[1]=6L;long[]array3=new long[3];array3[0]=5L;array3[1]=6L;array3[2]=7L;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testIntArrayHiddenByObject",0,"public void testIntArrayHiddenByObject(){int[]array1=new int[2];array1[0]=5;array1[1]=6;int[]array2=new int[2];array2[0]=5;array2[1]=6;int[]array3=new int[3];array3[0]=5;array3[1]=6;array3[2]=7;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testShortArrayHiddenByObject",0,"public void testShortArrayHiddenByObject(){short[]array1=new short[2];array1[0]=5;array1[1]=6;short[]array2=new short[2];array2[0]=5;array2[1]=6;short[]array3=new short[3];array3[0]=5;array3[1]=6;array3[2]=7;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testCharArrayHiddenByObject",0,"public void testCharArrayHiddenByObject(){char[]array1=new char[2];array1[0]=5;array1[1]=6;char[]array2=new char[2];array2[0]=5;array2[1]=6;char[]array3=new char[3];array3[0]=5;array3[1]=6;array3[2]=7;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testByteArrayHiddenByObject",0,"public void testByteArrayHiddenByObject(){byte[]array1=new byte[2];array1[0]=5;array1[1]=6;byte[]array2=new byte[2];array2[0]=5;array2[1]=6;byte[]array3=new byte[3];array3[0]=5;array3[1]=6;array3[2]=7;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testDoubleArrayHiddenByObject",0,"public void testDoubleArrayHiddenByObject(){double[]array1=new double[2];array1[0]=5;array1[1]=6;double[]array2=new double[2];array2[0]=5;array2[1]=6;double[]array3=new double[3];array3[0]=5;array3[1]=6;array3[2]=7;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testFloatArrayHiddenByObject",0,"public void testFloatArrayHiddenByObject(){float[]array1=new float[2];array1[0]=5;array1[1]=6;float[]array2=new float[2];array2[0]=5;array2[1]=6;float[]array3=new float[3];array3[0]=5;array3[1]=6;array3[2]=7;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=7;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.CompareToBuilderTest.testBooleanArrayHiddenByObject",0,"public void testBooleanArrayHiddenByObject(){boolean[]array1=new boolean[2];array1[0]=true;array1[1]=false;boolean[]array2=new boolean[2];array2[0]=true;array2[1]=false;boolean[]array3=new boolean[3];array3[0]=true;array3[1]=false;array3[2]=true;Object obj1=array1;Object obj2=array2;Object obj3=array3;assertTrue(new CompareToBuilder().append(obj1,obj1).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()== 0);assertTrue(new CompareToBuilder().append(obj1,obj3).toComparison()< 0);assertTrue(new CompareToBuilder().append(obj3,obj1).toComparison()> 0);array1[1]=true;assertTrue(new CompareToBuilder().append(obj1,obj2).toComparison()> 0);assertTrue(new CompareToBuilder().append(obj2,obj1).toComparison()< 0);}"
"org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testInteger",0,"public void testInteger(boolean testTransients){Integer i1=new Integer(12345);Integer i2=new Integer(12345);assertEqualsAndHashCodeContract(i1,i2,testTransients);}"
"org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testIntegerWithTransients",0,"public void testIntegerWithTransients(){testInteger(true);}"
"org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testFixture",0,"public void testFixture(){testFixture(false);}"
"org.apache.commons.lang.builder.HashCodeBuilderAndEqualsBuilderTest.testFixtureWithTransients",0,"public void testFixtureWithTransients(){testFixture(true);}"
"org.apache.commons.lang.time.StopWatchTest.testStopWatchSimple",0,"public void testStopWatchSimple(){StopWatch watch=new StopWatch();watch.start();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.stop();long time=watch.getTime();assertEquals(time,watch.getTime());assertTrue(time >= 500);assertTrue(time < 700);watch.reset();assertEquals(0,watch.getTime());}"
"org.apache.commons.lang.time.StopWatchTest.testStopWatchSimpleGet",0,"public void testStopWatchSimpleGet(){StopWatch watch=new StopWatch();assertEquals(0,watch.getTime());assertEquals(""0:00:00.000"",watch.toString());watch.start();try {Thread.sleep(500);}catch(InterruptedException ex){}assertTrue(watch.getTime()< 2000);}"
"org.apache.commons.lang.time.StopWatchTest.testStopWatchSplit",0,"public void testStopWatchSplit(){StopWatch watch=new StopWatch();watch.start();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.split();long splitTime=watch.getSplitTime();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.unsplit();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.stop();long totalTime=watch.getTime();assertTrue(splitTime >= 500);assertTrue(splitTime < 700);assertTrue(totalTime >= 1500);assertTrue(totalTime < 1900);}"
"org.apache.commons.lang.time.StopWatchTest.testStopWatchSuspend",0,"public void testStopWatchSuspend(){StopWatch watch=new StopWatch();watch.start();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.suspend();long suspendTime=watch.getTime();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.resume();try {Thread.sleep(550);}catch(InterruptedException ex){}watch.stop();long totalTime=watch.getTime();assertTrue(suspendTime >= 500);assertTrue(suspendTime < 700);assertTrue(totalTime >= 1000);assertTrue(totalTime < 1300);}"
"org.apache.commons.lang.time.StopWatchTest.testBadStates",0,"public void testBadStates(){StopWatch watch=new StopWatch();try {watch.stop();fail(""Calling stop on an unstarted StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.stop();fail(""Calling stop on an unstarted StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.suspend();fail(""Calling suspend on an unstarted StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.split();fail(""Calling split on a non-running StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.unsplit();fail(""Calling unsplit on an unsplit StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.resume();fail(""Calling resume on an unsuspended StopWatch should throw an exception. "");}catch(IllegalStateException ise){}watch.start();try {watch.start();fail(""Calling start on a started StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.unsplit();fail(""Calling unsplit on an unsplit StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.getSplitTime();fail(""Calling getSplitTime on an unsplit StopWatch should throw an exception. "");}catch(IllegalStateException ise){}try {watch.resume();fail(""Calling resume on an unsuspended StopWatch should throw an exception. "");}catch(IllegalStateException ise){}watch.stop();try {watch.start();fail(""Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "");}catch(IllegalStateException ise){}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testBuildHash",0,"public void testBuildHash()throws Exception {for (int i=0;i < COUNT;++i){hashEntities=build(new Entities.HashEntityMap());}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testBuildTree",0,"public void testBuildTree()throws Exception {for (int i=0;i < COUNT;++i){treeEntities=build(new Entities.TreeEntityMap());}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testBuildArray",0,"public void testBuildArray()throws Exception {for (int i=0;i < COUNT;++i){arrayEntities=build(new Entities.ArrayEntityMap());}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testBuildBinary",0,"public void testBuildBinary()throws Exception {for (int i=0;i < COUNT;++i){binaryEntities=build(new Entities.BinaryEntityMap());}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testBuildPrimitive",0,"public void testBuildPrimitive()throws Exception {for (int i=0;i < COUNT;++i){buildPrimitive();}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testBuildLookup",0,"public void testBuildLookup()throws Exception {for (int i=0;i < COUNT;++i){buildLookup();}}"
"org.apache.commons.lang.EntitiesPerformanceTest.testLookupHash",0,"public void testLookupHash()throws Exception {lookup(hashEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testLookupTree",0,"public void testLookupTree()throws Exception {lookup(treeEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testLookupArray",0,"public void testLookupArray()throws Exception {lookup(arrayEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testLookupBinary",0,"public void testLookupBinary(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testLookupPrimitive",0,"public void testLookupPrimitive()throws Exception {if (primitiveEntities == null)buildPrimitive();lookup(primitiveEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testLookupLookup",0,"public void testLookupLookup()throws Exception {if (lookupEntities == null)buildLookup();lookup(lookupEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testEscapeHash",0,"public void testEscapeHash(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testEscapeTree",0,"public void testEscapeTree(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testEscapeArray",0,"public void testEscapeArray()throws Exception {escapeIt(arrayEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testEscapeBinary",0,"public void testEscapeBinary(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testEscapePrimitive",0,"public void testEscapePrimitive(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testEscapeLookup",0,"public void testEscapeLookup(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeHash",0,"public void testUnescapeHash(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeTree",0,"public void testUnescapeTree(){}"
"org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeArray",0,"public void testUnescapeArray()throws Exception {unescapeIt(arrayEntities);}"
"org.apache.commons.lang.EntitiesPerformanceTest.testUnescapeBinary",0,"public void testUnescapeBinary(){}"
"org.apache.commons.lang.NumberRangeTest.testMaxMin",0,"public void testMaxMin(){boolean expected=true;boolean result=tenToTwenty.getMaximum().equals(twenty);assertEquals(expected,result);expected=true;result=tenToTwenty.getMinimum().equals(ten);assertEquals(expected,result);}"
"org.apache.commons.lang.NumberRangeTest.testEquals",0,"public void testEquals(){boolean expected=false;boolean result=tenToTwenty.equals(new NumberRange(five,ten));assertEquals(expected,result);expected=true;result=tenToTwenty.equals(new NumberRange(ten,twenty));assertEquals(expected,result);expected=false;result=tenToTwenty.equals(new NumberRange(ten,fifteen));assertEquals(expected,result);expected=false;result=tenToTwenty.equals(new NumberRange(fifteen,twenty));assertEquals(expected,result);}"
"org.apache.commons.lang.NumberRangeTest.testEqualsWithOtherObject",0,"public void testEqualsWithOtherObject(){assertEquals(""A NumberRange should not equals a String object"",false,fiveToNine.equals(""TEST""));}"
"org.apache.commons.lang.NumberRangeTest.testEqualsWithSameReference",0,"public void testEqualsWithSameReference(){assertEquals(""A NumberRange should equal itself"",true,fiveToNine.equals(fiveToNine));}"
"org.apache.commons.lang.NumberRangeTest.testEqualsNull",0,"public void testEqualsNull(){assertEquals(""A NumberRange should not equal null"",false,fiveToNine.equals(null));}"
"org.apache.commons.lang.NumberRangeTest.testHashCode",0,"public void testHashCode(){NumberRange nr=new NumberRange(new Integer(5),new Double(9.0));assertEquals(""The hashCode of 5-9 should equals the hashcode of another NumberRange of the same min/max"",fiveToNine.hashCode(),nr.hashCode());assertTrue(""The hashCode of 10-20 should not equal the hashCode of 5-9"",fiveToNine.hashCode()!= tenToTwenty.hashCode());}"
"org.apache.commons.lang.NumberRangeTest.testIncludesNumber",0,"public void testIncludesNumber(){boolean expected=false;boolean result=tenToTwenty.includesNumber(five);assertEquals(expected,result);expected=true;result=tenToTwenty.includesNumber(ten);assertEquals(expected,result);expected=true;result=tenToTwenty.includesNumber(fifteen);assertEquals(expected,result);expected=true;result=tenToTwenty.includesNumber(twenty);assertEquals(expected,result);expected=false;result=tenToTwenty.includesNumber(twentyFive);assertEquals(expected,result);}"
"org.apache.commons.lang.NumberRangeTest.testIncludesNumberNull",0,"public void testIncludesNumberNull(){boolean result=tenToTwenty.includesNumber(null);assertEquals(""Includes number should return false for null values"",false,result);}"
"org.apache.commons.lang.NumberRangeTest.testIncludesRange",0,"public void testIncludesRange(){boolean expected=false;boolean result=tenToTwenty.includesRange(new NumberRange(five,ten));assertEquals(expected,result);expected=false;result=tenToTwenty.includesRange(new NumberRange(five,fifteen));assertEquals(expected,result);expected=true;result=tenToTwenty.includesRange(new NumberRange(ten,fifteen));assertEquals(expected,result);expected=true;result=tenToTwenty.includesRange(new NumberRange(ten,twenty));assertEquals(expected,result);expected=true;result=tenToTwenty.includesRange(new NumberRange(fifteen,twenty));assertEquals(expected,result);expected=false;result=tenToTwenty.includesRange(new NumberRange(fifteen,twentyFive));assertEquals(expected,result);expected=false;result=tenToTwenty.includesRange(new NumberRange(twenty,twentyFive));assertEquals(expected,result);}"
"org.apache.commons.lang.NumberRangeTest.testIncludesRangeNull",0,"public void testIncludesRangeNull(){boolean result=tenToTwenty.includesRange(null);assertEquals(""Includes range should return false for null values"",false,result);}"
"org.apache.commons.lang.NumberRangeTest.testConstructor",0,"public void testConstructor(){NumberRange nr=new NumberRange(new Double(2.0));assertEquals(""Unexpected min on NumberRange"",2.0,nr.getMinimum().doubleValue(),Double.MIN_VALUE);assertEquals(""Unexpected max on NumberRange"",2.0,nr.getMaximum().doubleValue(),Double.MIN_VALUE);}"
"org.apache.commons.lang.NumberRangeTest.testConstructorNullParameters",0,"public void testConstructorNullParameters(){try {NumberRange nr=new NumberRange(null);fail(""NumberRange(null)did not throw an exception."");}catch(Exception e){assertTrue(""NumberRange(null)"",e instanceof NullPointerException);}try {NumberRange nr=new NumberRange(five,null);fail(""NumberRange(five,null)did not throw an exception."");}catch(Exception e){assertTrue(""NumberRange(five,null)"",e instanceof NullPointerException);}try {NumberRange nr=new NumberRange(null,five);fail(""NumberRange(null,five)did not throw an exception."");}catch(Exception e){assertTrue(""NumberRange(null,five)"",e instanceof NullPointerException);}}"
"org.apache.commons.lang.NumberRangeTest.testConstructorWithMaxLessThanMin",0,"public void testConstructorWithMaxLessThanMin(){NumberRange nr=new NumberRange(new Double(2.0),new Double(1.0));assertEquals(""Unexpected min on NumberRange"",2.0,nr.getMinimum().doubleValue(),Double.MIN_VALUE);assertEquals(""Unexpected max on NumberRange"",2.0,nr.getMaximum().doubleValue(),Double.MIN_VALUE);}"
"org.apache.commons.lang.NumberRangeTest.testOverlap",0,"public void testOverlap(){assertEquals(""5-9 should not overlap 10-20"",false,fiveToNine.overlaps(tenToTwenty));assertEquals(""10-20 should overlap 15-25"",true,tenToTwenty.overlaps(fifteenToTwentyFive));}"
"org.apache.commons.lang.NumberRangeTest.testOverlapNull",0,"public void testOverlapNull(){assertEquals(""5-9 should not overlap null"",false,fiveToNine.overlaps(null));}"
"org.apache.commons.lang.NumberRangeTest.testToString",0,"public void testToString(){String expected=""10-20"";String result=tenToTwenty.toString();assertEquals(expected,result);}"
"org.apache.commons.lang.NumberRangeTest.testToStringWithNegatives",0,"public void testToStringWithNegatives(){String expected=""(-20)-(-10)"";NumberRange nr=new NumberRange(new Integer(-20),new Integer(-10));String result=nr.toString();assertEquals(expected,result);expected=""(-20)-10"";nr=new NumberRange(new Integer(-20),new Integer(10));result=nr.toString();assertEquals(expected,result);}"
"org.apache.commons.lang.RandomStringUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new RandomStringUtils());Constructor[]cons=RandomStringUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(RandomStringUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(RandomStringUtils.class.getModifiers()));}"
"org.apache.commons.lang.RandomStringUtilsTest.testRandomStringUtils",0,"/** * Test the implementation*/public void testRandomStringUtils(){String r1=RandomStringUtils.random(50);assertEquals(""random(50)length"",50,r1.length());String r2=RandomStringUtils.random(50);assertEquals(""random(50)length"",50,r2.length());assertTrue(""!r1.equals(r2)"",!r1.equals(r2));r1=RandomStringUtils.randomAscii(50);assertEquals(""randomAscii(50)length"",50,r1.length());for (int i=0;i < r1.length();i++){assertTrue(""char between 32 and 127"",r1.charAt(i)>= 32 && r1.charAt(i)<= 127);}r2=RandomStringUtils.randomAscii(50);assertTrue(""!r1.equals(r2)"",!r1.equals(r2));r1=RandomStringUtils.randomAlphabetic(50);assertEquals(""randomAlphabetic(50)"",50,r1.length());for (int i=0;i < r1.length();i++){assertEquals(""r1 contains alphabetic"",true,Character.isLetter(r1.charAt(i))&& !Character.isDigit(r1.charAt(i)));}r2=RandomStringUtils.randomAlphabetic(50);assertTrue(""!r1.equals(r2)"",!r1.equals(r2));r1=RandomStringUtils.randomAlphanumeric(50);assertEquals(""randomAlphanumeric(50)"",50,r1.length());for (int i=0;i < r1.length();i++){assertEquals(""r1 contains alphanumeric"",true,Character.isLetterOrDigit(r1.charAt(i)));}r2=RandomStringUtils.randomAlphabetic(50);assertTrue(""!r1.equals(r2)"",!r1.equals(r2));r1=RandomStringUtils.randomNumeric(50);assertEquals(""randomNumeric(50)"",50,r1.length());for (int i=0;i < r1.length();i++){assertEquals(""r1 contains numeric"",true,Character.isDigit(r1.charAt(i))&& !Character.isLetter(r1.charAt(i)));}r2=RandomStringUtils.randomNumeric(50);assertTrue(""!r1.equals(r2)"",!r1.equals(r2));String set=""abcdefg"";r1=RandomStringUtils.random(50,set);assertEquals(""random(50,\""abcdefg\"")"",50,r1.length());for (int i=0;i < r1.length();i++){assertTrue(""random char in set"",set.indexOf(r1.charAt(i))> -1);}r2=RandomStringUtils.random(50,set);assertTrue(""!r1.equals(r2)"",!r1.equals(r2));r1=RandomStringUtils.random(50,(String)null);assertEquals(""random(50)length"",50,r1.length());r2=RandomStringUtils.random(50,(String)null);assertEquals(""random(50)length"",50,r2.length());assertTrue(""!r1.equals(r2)"",!r1.equals(r2));set=""stuvwxyz"";r1=RandomStringUtils.random(50,set.toCharArray());assertEquals(""random(50,\""stuvwxyz\"")"",50,r1.length());for (int i=0;i < r1.length();i++){assertTrue(""random char in set"",set.indexOf(r1.charAt(i))> -1);}r2=RandomStringUtils.random(50,set);assertTrue(""!r1.equals(r2)"",!r1.equals(r2));r1=RandomStringUtils.random(50,(char[])null);assertEquals(""random(50)length"",50,r1.length());r2=RandomStringUtils.random(50,(char[])null);assertEquals(""random(50)length"",50,r2.length());assertTrue(""!r1.equals(r2)"",!r1.equals(r2));long seed=System.currentTimeMillis();r1=RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));r2=RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));assertEquals(""r1.equals(r2)"",r1,r2);r1=RandomStringUtils.random(0);assertEquals(""random(0).equals(\""\"")"","""",r1);}"
"org.apache.commons.lang.RandomStringUtilsTest.testExceptions",0,"public void testExceptions(){try {RandomStringUtils.random(-1);fail();}catch(IllegalArgumentException ex){}try {RandomStringUtils.random(-1,true,true);fail();}catch(IllegalArgumentException ex){}try {RandomStringUtils.random(-1,new char[0]);fail();}catch(IllegalArgumentException ex){}try {RandomStringUtils.random(-1,"""");fail();}catch(IllegalArgumentException ex){}try {RandomStringUtils.random(-1,'a','z',false,false);fail();}catch(IllegalArgumentException ex){}try {RandomStringUtils.random(-1,'a','z',false,false,new char[0]);fail();}catch(IllegalArgumentException ex){}try {RandomStringUtils.random(-1,'a','z',false,false,new char[0],new Random());fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.RandomStringUtilsTest.testRandomAlphaNumeric",0,"/** * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7*/public void testRandomAlphaNumeric(){}"
"org.apache.commons.lang.RandomStringUtilsTest.testRandomNumeric",0,"/** * Make sure '0' and '9' are generated by randomNumeric This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46*/public void testRandomNumeric(){}"
"org.apache.commons.lang.RandomStringUtilsTest.testRandomAlphabetic",0,"/** * Make sure boundary alpha characters are generated by randomAlphabetic This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8*/public void testRandomAlphabetic(){}"
"org.apache.commons.lang.RandomStringUtilsTest.testRandomAscii",0,"/** * Make sure 32 and 127 are generated by randomNumeric This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5*/public void testRandomAscii(){}"
"org.apache.commons.lang.RandomStringUtilsTest.testRandomStringUtilsHomog",0,"/** * Test homogeneity of random strings generated -- i.e.,test that characters show up with expected frequencies in generated strings.  Will fail randomly about 1 in 1000 times. Repeated failures indicate a problem.*/public void testRandomStringUtilsHomog(){}"
"org.apache.commons.lang.RandomStringUtilsTest.testLang100",0,"/** * Checks if the string got by  {@link RandomStringUtils#random(int)}can be converted to UTF-8 and back without loss.* @author stefanhoehne@fastmail.fm* @throws Exception*/public void testLang100()throws Exception {int size=5000;String encoding=""UTF-8"";String orig=RandomStringUtils.random(size);byte[]bytes=orig.getBytes(encoding);String copy=new String(bytes,encoding);for (int i=0;i < orig.length()&& i < copy.length();i++){char o=orig.charAt(i);char c=copy.charAt(i);assertEquals(""differs at "" + i + ""(""+ Integer.toHexString((new Character(o)).hashCode())+ "",""+ Integer.toHexString((new Character(c)).hashCode())+ "")"",o,c);}assertEquals(orig.length(),copy.length());assertEquals(orig,copy);}"
"org.apache.commons.lang.SerializationUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new SerializationUtils());Constructor[]cons=SerializationUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(SerializationUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(SerializationUtils.class.getModifiers()));}"
"org.apache.commons.lang.SerializationUtilsTest.testException",0,"public void testException(){SerializationException serEx;Exception ex=new Exception();serEx=new SerializationException();assertSame(null,serEx.getMessage());assertSame(null,serEx.getCause());serEx=new SerializationException(""Message"");assertSame(""Message"",serEx.getMessage());assertSame(null,serEx.getCause());serEx=new SerializationException(ex);assertEquals(""java.lang.Exception"",serEx.getMessage());assertSame(ex,serEx.getCause());serEx=new SerializationException(""Message"",ex);assertSame(""Message"",serEx.getMessage());assertSame(ex,serEx.getCause());}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeStream",0,"public void testSerializeStream()throws Exception {ByteArrayOutputStream streamTest=new ByteArrayOutputStream();SerializationUtils.serialize(iMap,streamTest);ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(iMap);oos.flush();oos.close();byte[]testBytes=streamTest.toByteArray();byte[]realBytes=streamReal.toByteArray();assertEquals(testBytes.length,realBytes.length);for (int i=0;i < realBytes.length;i++){assertEquals(realBytes[i],testBytes[i]);}}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamUnserializable",0,"public void testSerializeStreamUnserializable()throws Exception {ByteArrayOutputStream streamTest=new ByteArrayOutputStream();try {iMap.put(new Object(),new Object());SerializationUtils.serialize(iMap,streamTest);}catch(SerializationException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamNullObj",0,"public void testSerializeStreamNullObj()throws Exception {ByteArrayOutputStream streamTest=new ByteArrayOutputStream();SerializationUtils.serialize(null,streamTest);ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(null);oos.flush();oos.close();byte[]testBytes=streamTest.toByteArray();byte[]realBytes=streamReal.toByteArray();assertEquals(testBytes.length,realBytes.length);for (int i=0;i < realBytes.length;i++){assertEquals(realBytes[i],testBytes[i]);}}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamObjNull",0,"public void testSerializeStreamObjNull()throws Exception {ByteArrayOutputStream streamTest=new ByteArrayOutputStream();try {SerializationUtils.serialize(iMap,null);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeStreamNullNull",0,"public void testSerializeStreamNullNull()throws Exception {ByteArrayOutputStream streamTest=new ByteArrayOutputStream();try {SerializationUtils.serialize(null,null);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeIOException",0,"public void testSerializeIOException()throws Exception {OutputStream streamTest=new OutputStream(){public void write(int arg0)throws IOException {throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);}};try {SerializationUtils.serialize(iMap,streamTest);}catch(SerializationException e){assertEquals(""java.io.IOException: "" + SERIALIZE_IO_EXCEPTION_MESSAGE,e.getMessage());}}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeStream",0,"public void testDeserializeStream()throws Exception {ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(iMap);oos.flush();oos.close();ByteArrayInputStream inTest=new ByteArrayInputStream(streamReal.toByteArray());Object test=SerializationUtils.deserialize(inTest);assertNotNull(test);assertTrue(test instanceof HashMap);assertTrue(test != iMap);HashMap testMap=(HashMap)test;assertEquals(iString,testMap.get(""FOO""));assertTrue(iString != testMap.get(""FOO""));assertEquals(iInteger,testMap.get(""BAR""));assertTrue(iInteger != testMap.get(""BAR""));assertEquals(iMap,testMap);}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamOfNull",0,"public void testDeserializeStreamOfNull()throws Exception {ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(null);oos.flush();oos.close();ByteArrayInputStream inTest=new ByteArrayInputStream(streamReal.toByteArray());Object test=SerializationUtils.deserialize(inTest);assertNull(test);}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamNull",0,"public void testDeserializeStreamNull()throws Exception {try {SerializationUtils.deserialize((InputStream)null);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamBadStream",0,"public void testDeserializeStreamBadStream()throws Exception {try {SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));}catch(SerializationException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeStreamClassNotFound",0,"public void testDeserializeStreamClassNotFound()throws Exception {ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(new ClassNotFoundSerializationTest());oos.flush();oos.close();ByteArrayInputStream inTest=new ByteArrayInputStream(streamReal.toByteArray());try {Object test=SerializationUtils.deserialize(inTest);}catch(SerializationException se){assertEquals(""java.lang.ClassNotFoundException: "" + CLASS_NOT_FOUND_MESSAGE,se.getMessage());}}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeBytes",0,"public void testSerializeBytes()throws Exception {byte[]testBytes=SerializationUtils.serialize(iMap);ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(iMap);oos.flush();oos.close();byte[]realBytes=streamReal.toByteArray();assertEquals(testBytes.length,realBytes.length);for (int i=0;i < realBytes.length;i++){assertEquals(realBytes[i],testBytes[i]);}}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeBytesUnserializable",0,"public void testSerializeBytesUnserializable()throws Exception {try {iMap.put(new Object(),new Object());SerializationUtils.serialize(iMap);}catch(SerializationException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testSerializeBytesNull",0,"public void testSerializeBytesNull()throws Exception {byte[]testBytes=SerializationUtils.serialize(null);ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(null);oos.flush();oos.close();byte[]realBytes=streamReal.toByteArray();assertEquals(testBytes.length,realBytes.length);for (int i=0;i < realBytes.length;i++){assertEquals(realBytes[i],testBytes[i]);}}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytes",0,"public void testDeserializeBytes()throws Exception {ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(iMap);oos.flush();oos.close();Object test=SerializationUtils.deserialize(streamReal.toByteArray());assertNotNull(test);assertTrue(test instanceof HashMap);assertTrue(test != iMap);HashMap testMap=(HashMap)test;assertEquals(iString,testMap.get(""FOO""));assertTrue(iString != testMap.get(""FOO""));assertEquals(iInteger,testMap.get(""BAR""));assertTrue(iInteger != testMap.get(""BAR""));assertEquals(iMap,testMap);}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytesOfNull",0,"public void testDeserializeBytesOfNull()throws Exception {ByteArrayOutputStream streamReal=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(streamReal);oos.writeObject(null);oos.flush();oos.close();Object test=SerializationUtils.deserialize(streamReal.toByteArray());assertNull(test);}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytesNull",0,"public void testDeserializeBytesNull()throws Exception {try {SerializationUtils.deserialize((byte[])null);}catch(IllegalArgumentException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testDeserializeBytesBadStream",0,"public void testDeserializeBytesBadStream()throws Exception {try {SerializationUtils.deserialize(new byte[0]);}catch(SerializationException ex){return;}fail();}"
"org.apache.commons.lang.SerializationUtilsTest.testClone",0,"public void testClone()throws Exception {Object test=SerializationUtils.clone(iMap);assertNotNull(test);assertTrue(test instanceof HashMap);assertTrue(test != iMap);HashMap testMap=(HashMap)test;assertEquals(iString,testMap.get(""FOO""));assertTrue(iString != testMap.get(""FOO""));assertEquals(iInteger,testMap.get(""BAR""));assertTrue(iInteger != testMap.get(""BAR""));assertEquals(iMap,testMap);}"
"org.apache.commons.lang.SerializationUtilsTest.testCloneNull",0,"public void testCloneNull()throws Exception {Object test=SerializationUtils.clone(null);assertNull(test);}"
"org.apache.commons.lang.SerializationUtilsTest.testCloneUnserializable",0,"public void testCloneUnserializable()throws Exception {try {iMap.put(new Object(),new Object());SerializationUtils.clone(iMap);}catch(SerializationException ex){return;}fail();}"
"org.apache.commons.lang.mutable.MutableBooleanTest.testCompareTo",0,"public void testCompareTo(){final MutableBoolean mutBool=new MutableBoolean(false);assertEquals(0,mutBool.compareTo(new MutableBoolean(false)));assertEquals(-1,mutBool.compareTo(new MutableBoolean(true)));mutBool.setValue(true);assertEquals(+1,mutBool.compareTo(new MutableBoolean(false)));assertEquals(0,mutBool.compareTo(new MutableBoolean(true)));try {mutBool.compareTo(null);fail();}catch(NullPointerException ex){}try {mutBool.compareTo(Boolean.FALSE);fail();}catch(ClassCastException ex){}try {mutBool.compareTo(""false"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableBooleanTest.testConstructors",0,"public void testConstructors(){assertEquals(false,new MutableBoolean().booleanValue());assertEquals(true,new MutableBoolean(true).booleanValue());assertEquals(false,new MutableBoolean(false).booleanValue());assertEquals(true,new MutableBoolean(Boolean.TRUE).booleanValue());assertEquals(false,new MutableBoolean(Boolean.FALSE).booleanValue());try {new MutableBoolean(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableBooleanTest.testEquals",0,"public void testEquals(){final MutableBoolean mutBoolA=new MutableBoolean(false);final MutableBoolean mutBoolB=new MutableBoolean(false);final MutableBoolean mutBoolC=new MutableBoolean(true);assertEquals(true,mutBoolA.equals(mutBoolA));assertEquals(true,mutBoolA.equals(mutBoolB));assertEquals(true,mutBoolB.equals(mutBoolA));assertEquals(true,mutBoolB.equals(mutBoolB));assertEquals(false,mutBoolA.equals(mutBoolC));assertEquals(false,mutBoolB.equals(mutBoolC));assertEquals(true,mutBoolC.equals(mutBoolC));assertEquals(false,mutBoolA.equals(null));assertEquals(false,mutBoolA.equals(Boolean.FALSE));assertEquals(false,mutBoolA.equals(""false""));}"
"org.apache.commons.lang.mutable.MutableBooleanTest.testGetSet",0,"public void testGetSet(){final MutableBoolean mutBool=new MutableBoolean(false);assertEquals(false,new MutableBoolean().booleanValue());mutBool.setValue(Boolean.TRUE);assertEquals(true,mutBool.booleanValue());mutBool.setValue(false);assertEquals(false,mutBool.booleanValue());mutBool.setValue(true);assertEquals(true,mutBool.booleanValue());try {mutBool.setValue(null);fail();}catch(NullPointerException ex){}try {mutBool.setValue(""false"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableBooleanTest.testHashCode",0,"public void testHashCode(){final MutableBoolean mutBoolA=new MutableBoolean(false);final MutableBoolean mutBoolB=new MutableBoolean(false);final MutableBoolean mutBoolC=new MutableBoolean(true);assertEquals(true,mutBoolA.hashCode()== mutBoolA.hashCode());assertEquals(true,mutBoolA.hashCode()== mutBoolB.hashCode());assertEquals(false,mutBoolA.hashCode()== mutBoolC.hashCode());assertEquals(true,mutBoolA.hashCode()== Boolean.FALSE.hashCode());assertEquals(true,mutBoolC.hashCode()== Boolean.TRUE.hashCode());}"
"org.apache.commons.lang.mutable.MutableBooleanTest.testToString",0,"public void testToString(){assertEquals(Boolean.FALSE.toString(),new MutableBoolean(false).toString());assertEquals(Boolean.TRUE.toString(),new MutableBoolean(true).toString());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveObjectArray",0,"public void testRemoveObjectArray(){Object[]array;array=ArrayUtils.remove(new Object[]{""a""},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY,array));assertEquals(Object.class,array.getClass().getComponentType());array=ArrayUtils.remove(new Object[]{""a"",""b""},0);assertTrue(Arrays.equals(new Object[]{""b""},array));assertEquals(Object.class,array.getClass().getComponentType());array=ArrayUtils.remove(new Object[]{""a"",""b""},1);assertTrue(Arrays.equals(new Object[]{""a""},array));assertEquals(Object.class,array.getClass().getComponentType());array=ArrayUtils.remove(new Object[]{""a"",""b"",""c""},1);assertTrue(Arrays.equals(new Object[]{""a"",""c""},array));assertEquals(Object.class,array.getClass().getComponentType());try {ArrayUtils.remove(new Object[]{""a"",""b""},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new Object[]{""a"",""b""},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((Object[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveBooleanArray",0,"public void testRemoveBooleanArray(){boolean[]array;array=ArrayUtils.remove(new boolean[]{true},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY,array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new boolean[]{true,false},0);assertTrue(Arrays.equals(new boolean[]{false},array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new boolean[]{true,false},1);assertTrue(Arrays.equals(new boolean[]{true},array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new boolean[]{true,false,true},1);assertTrue(Arrays.equals(new boolean[]{true,true},array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new boolean[]{true,false},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new boolean[]{true,false},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((boolean[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveByteArray",0,"public void testRemoveByteArray(){byte[]array;array=ArrayUtils.remove(new byte[]{1},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY,array));assertEquals(Byte.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new byte[]{1,2},0);assertTrue(Arrays.equals(new byte[]{2},array));assertEquals(Byte.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new byte[]{1,2},1);assertTrue(Arrays.equals(new byte[]{1},array));assertEquals(Byte.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new byte[]{1,2,1},1);assertTrue(Arrays.equals(new byte[]{1,1},array));assertEquals(Byte.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new byte[]{1,2},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new byte[]{1,2},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((byte[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveCharArray",0,"public void testRemoveCharArray(){char[]array;array=ArrayUtils.remove(new char[]{'a'},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY,array));assertEquals(Character.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new char[]{'a','b'},0);assertTrue(Arrays.equals(new char[]{'b'},array));assertEquals(Character.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new char[]{'a','b'},1);assertTrue(Arrays.equals(new char[]{'a'},array));assertEquals(Character.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new char[]{'a','b','c'},1);assertTrue(Arrays.equals(new char[]{'a','c'},array));assertEquals(Character.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new char[]{'a','b'},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new char[]{'a','b'},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((char[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveDoubleArray",0,"public void testRemoveDoubleArray(){double[]array;array=ArrayUtils.remove(new double[]{1},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY,array));assertEquals(Double.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new double[]{1,2},0);assertTrue(Arrays.equals(new double[]{2},array));assertEquals(Double.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new double[]{1,2},1);assertTrue(Arrays.equals(new double[]{1},array));assertEquals(Double.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new double[]{1,2,1},1);assertTrue(Arrays.equals(new double[]{1,1},array));assertEquals(Double.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new double[]{1,2},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new double[]{1,2},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((double[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveFloatArray",0,"public void testRemoveFloatArray(){float[]array;array=ArrayUtils.remove(new float[]{1},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY,array));assertEquals(Float.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new float[]{1,2},0);assertTrue(Arrays.equals(new float[]{2},array));assertEquals(Float.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new float[]{1,2},1);assertTrue(Arrays.equals(new float[]{1},array));assertEquals(Float.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new float[]{1,2,1},1);assertTrue(Arrays.equals(new float[]{1,1},array));assertEquals(Float.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new float[]{1,2},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new float[]{1,2},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((float[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveIntArray",0,"public void testRemoveIntArray(){int[]array;array=ArrayUtils.remove(new int[]{1},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY,array));assertEquals(Integer.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new int[]{1,2},0);assertTrue(Arrays.equals(new int[]{2},array));assertEquals(Integer.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new int[]{1,2},1);assertTrue(Arrays.equals(new int[]{1},array));assertEquals(Integer.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new int[]{1,2,1},1);assertTrue(Arrays.equals(new int[]{1,1},array));assertEquals(Integer.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new int[]{1,2},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new int[]{1,2},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((int[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveLongArray",0,"public void testRemoveLongArray(){long[]array;array=ArrayUtils.remove(new long[]{1},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY,array));assertEquals(Long.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new long[]{1,2},0);assertTrue(Arrays.equals(new long[]{2},array));assertEquals(Long.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new long[]{1,2},1);assertTrue(Arrays.equals(new long[]{1},array));assertEquals(Long.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new long[]{1,2,1},1);assertTrue(Arrays.equals(new long[]{1,1},array));assertEquals(Long.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new long[]{1,2},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new long[]{1,2},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((long[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveShortArray",0,"public void testRemoveShortArray(){short[]array;array=ArrayUtils.remove(new short[]{1},0);assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY,array));assertEquals(Short.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new short[]{1,2},0);assertTrue(Arrays.equals(new short[]{2},array));assertEquals(Short.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new short[]{1,2},1);assertTrue(Arrays.equals(new short[]{1},array));assertEquals(Short.TYPE,array.getClass().getComponentType());array=ArrayUtils.remove(new short[]{1,2,1},1);assertTrue(Arrays.equals(new short[]{1,1},array));assertEquals(Short.TYPE,array.getClass().getComponentType());try {ArrayUtils.remove(new short[]{1,2},-1);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove(new short[]{1,2},2);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {ArrayUtils.remove((short[])null,0);fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementObjectArray",0,"public void testRemoveElementObjectArray(){Object[]array;array=ArrayUtils.removeElement((Object[])null,""a"");assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY,""a"");assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY,array));assertEquals(Object.class,array.getClass().getComponentType());array=ArrayUtils.removeElement(new Object[]{""a""},""a"");assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY,array));assertEquals(Object.class,array.getClass().getComponentType());array=ArrayUtils.removeElement(new Object[]{""a"",""b""},""a"");assertTrue(Arrays.equals(new Object[]{""b""},array));assertEquals(Object.class,array.getClass().getComponentType());array=ArrayUtils.removeElement(new Object[]{""a"",""b"",""a""},""a"");assertTrue(Arrays.equals(new Object[]{""b"",""a""},array));assertEquals(Object.class,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementBooleanArray",0,"public void testRemoveElementBooleanArray(){boolean[]array;array=ArrayUtils.removeElement((boolean[])null,true);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY,true);assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY,array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new boolean[]{true},true);assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY,array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new boolean[]{true,false},true);assertTrue(Arrays.equals(new boolean[]{false},array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new boolean[]{true,false,true},true);assertTrue(Arrays.equals(new boolean[]{false,true},array));assertEquals(Boolean.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementByteArray",0,"public void testRemoveElementByteArray(){byte[]array;array=ArrayUtils.removeElement((byte[])null,(byte)1);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY,(byte)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY,array));assertEquals(Byte.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new byte[]{1},(byte)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY,array));assertEquals(Byte.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new byte[]{1,2},(byte)1);assertTrue(Arrays.equals(new byte[]{2},array));assertEquals(Byte.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new byte[]{1,2,1},(byte)1);assertTrue(Arrays.equals(new byte[]{2,1},array));assertEquals(Byte.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementCharArray",0,"public void testRemoveElementCharArray(){char[]array;array=ArrayUtils.removeElement((char[])null,'a');assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY,'a');assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY,array));assertEquals(Character.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new char[]{'a'},'a');assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY,array));assertEquals(Character.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new char[]{'a','b'},'a');assertTrue(Arrays.equals(new char[]{'b'},array));assertEquals(Character.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new char[]{'a','b','a'},'a');assertTrue(Arrays.equals(new char[]{'b','a'},array));assertEquals(Character.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementDoubleArray",0,"public void testRemoveElementDoubleArray(){double[]array;array=ArrayUtils.removeElement((double[])null,(double)1);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY,(double)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY,array));assertEquals(Double.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new double[]{1},(double)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY,array));assertEquals(Double.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new double[]{1,2},(double)1);assertTrue(Arrays.equals(new double[]{2},array));assertEquals(Double.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new double[]{1,2,1},(double)1);assertTrue(Arrays.equals(new double[]{2,1},array));assertEquals(Double.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementFloatArray",0,"public void testRemoveElementFloatArray(){float[]array;array=ArrayUtils.removeElement((float[])null,(float)1);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY,(float)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY,array));assertEquals(Float.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new float[]{1},(float)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY,array));assertEquals(Float.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new float[]{1,2},(float)1);assertTrue(Arrays.equals(new float[]{2},array));assertEquals(Float.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new float[]{1,2,1},(float)1);assertTrue(Arrays.equals(new float[]{2,1},array));assertEquals(Float.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementIntArray",0,"public void testRemoveElementIntArray(){int[]array;array=ArrayUtils.removeElement((int[])null,1);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY,1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY,array));assertEquals(Integer.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new int[]{1},1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY,array));assertEquals(Integer.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new int[]{1,2},1);assertTrue(Arrays.equals(new int[]{2},array));assertEquals(Integer.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new int[]{1,2,1},1);assertTrue(Arrays.equals(new int[]{2,1},array));assertEquals(Integer.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementLongArray",0,"public void testRemoveElementLongArray(){long[]array;array=ArrayUtils.removeElement((long[])null,(long)1);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY,(long)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY,array));assertEquals(Long.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new long[]{1},(long)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY,array));assertEquals(Long.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new long[]{1,2},(long)1);assertTrue(Arrays.equals(new long[]{2},array));assertEquals(Long.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new long[]{1,2,1},(long)1);assertTrue(Arrays.equals(new long[]{2,1},array));assertEquals(Long.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.ArrayUtilsRemoveTest.testRemoveElementShortArray",0,"public void testRemoveElementShortArray(){short[]array;array=ArrayUtils.removeElement((short[])null,(short)1);assertNull(array);array=ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY,(short)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY,array));assertEquals(Short.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new short[]{1},(short)1);assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY,array));assertEquals(Short.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new short[]{1,2},(short)1);assertTrue(Arrays.equals(new short[]{2},array));assertEquals(Short.TYPE,array.getClass().getComponentType());array=ArrayUtils.removeElement(new short[]{1,2,1},(short)1);assertTrue(Arrays.equals(new short[]{2,1},array));assertEquals(Short.TYPE,array.getClass().getComponentType());}"
"org.apache.commons.lang.mutable.MutableShortTest.testConstructors",0,"public void testConstructors(){assertEquals((short)0,new MutableShort().shortValue());assertEquals((short)1,new MutableShort((short)1).shortValue());assertEquals((short)2,new MutableShort(new Short((short)2)).shortValue());assertEquals((short)3,new MutableShort(new MutableShort((short)3)).shortValue());try {new MutableShort(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableShortTest.testGetSet",0,"public void testGetSet(){final MutableShort mutNum=new MutableShort((short)0);assertEquals((short)0,new MutableShort().shortValue());assertEquals(new Short((short)0),new MutableShort().getValue());mutNum.setValue((short)1);assertEquals((short)1,mutNum.shortValue());assertEquals(new Short((short)1),mutNum.getValue());mutNum.setValue(new Short((short)2));assertEquals((short)2,mutNum.shortValue());assertEquals(new Short((short)2),mutNum.getValue());mutNum.setValue(new MutableShort((short)3));assertEquals((short)3,mutNum.shortValue());assertEquals(new Short((short)3),mutNum.getValue());try {mutNum.setValue(null);fail();}catch(NullPointerException ex){}try {mutNum.setValue(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableShortTest.testEquals",0,"public void testEquals(){final MutableShort mutNumA=new MutableShort((short)0);final MutableShort mutNumB=new MutableShort((short)0);final MutableShort mutNumC=new MutableShort((short)1);assertEquals(true,mutNumA.equals(mutNumA));assertEquals(true,mutNumA.equals(mutNumB));assertEquals(true,mutNumB.equals(mutNumA));assertEquals(true,mutNumB.equals(mutNumB));assertEquals(false,mutNumA.equals(mutNumC));assertEquals(false,mutNumB.equals(mutNumC));assertEquals(true,mutNumC.equals(mutNumC));assertEquals(false,mutNumA.equals(null));assertEquals(false,mutNumA.equals(new Short((short)0)));assertEquals(false,mutNumA.equals(""0""));}"
"org.apache.commons.lang.mutable.MutableShortTest.testHashCode",0,"public void testHashCode(){final MutableShort mutNumA=new MutableShort((short)0);final MutableShort mutNumB=new MutableShort((short)0);final MutableShort mutNumC=new MutableShort((short)1);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(true,mutNumA.hashCode()== new Short((short)0).hashCode());}"
"org.apache.commons.lang.mutable.MutableShortTest.testCompareTo",0,"public void testCompareTo(){final MutableShort mutNum=new MutableShort((short)0);assertEquals((short)0,mutNum.compareTo(new MutableShort((short)0)));assertEquals((short)+1,mutNum.compareTo(new MutableShort((short)-1)));assertEquals((short)-1,mutNum.compareTo(new MutableShort((short)1)));try {mutNum.compareTo(null);fail();}catch(NullPointerException ex){}try {mutNum.compareTo(new Short((short)0));fail();}catch(ClassCastException ex){}try {mutNum.compareTo(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableShortTest.testPrimitiveValues",0,"public void testPrimitiveValues(){MutableShort mutNum=new MutableShort((short)1);assertEquals(1.0F,mutNum.floatValue(),0);assertEquals(1.0,mutNum.doubleValue(),0);assertEquals((byte)1,mutNum.byteValue());assertEquals((short)1,mutNum.shortValue());assertEquals(1,mutNum.intValue());assertEquals(1L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testToShort",0,"public void testToShort(){assertEquals(new Short((short)0),new MutableShort((short)0).toShort());assertEquals(new Short((short)123),new MutableShort((short)123).toShort());}"
"org.apache.commons.lang.mutable.MutableShortTest.testIncrement",0,"public void testIncrement(){MutableShort mutNum=new MutableShort((short)1);mutNum.increment();assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testDecrement",0,"public void testDecrement(){MutableShort mutNum=new MutableShort((short)1);mutNum.decrement();assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testAddValuePrimitive",0,"public void testAddValuePrimitive(){MutableShort mutNum=new MutableShort((short)1);mutNum.add((short)1);assertEquals((short)2,mutNum.shortValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testAddValueObject",0,"public void testAddValueObject(){MutableShort mutNum=new MutableShort((short)1);mutNum.add(new Short((short)1));assertEquals((short)2,mutNum.shortValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testSubtractValuePrimitive",0,"public void testSubtractValuePrimitive(){MutableShort mutNum=new MutableShort((short)1);mutNum.subtract((short)1);assertEquals((short)0,mutNum.shortValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testSubtractValueObject",0,"public void testSubtractValueObject(){MutableShort mutNum=new MutableShort((short)1);mutNum.subtract(new Short((short)1));assertEquals((short)0,mutNum.shortValue());}"
"org.apache.commons.lang.mutable.MutableShortTest.testToString",0,"public void testToString(){assertEquals(""0"",new MutableShort((short)0).toString());assertEquals(""10"",new MutableShort((short)10).toString());assertEquals(""-123"",new MutableShort((short)-123).toString());}"
"org.apache.commons.lang.ClassUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new ClassUtils());Constructor[]cons=ClassUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(ClassUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(ClassUtils.class.getModifiers()));}"
"org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_Object",0,"public void test_getShortClassName_Object(){assertEquals(""ClassUtils"",ClassUtils.getShortClassName(new ClassUtils(),""<null>""));assertEquals(""ClassUtilsTest.Inner"",ClassUtils.getShortClassName(new Inner(),""<null>""));assertEquals(""String"",ClassUtils.getShortClassName(""hello"",""<null>""));assertEquals(""<null>"",ClassUtils.getShortClassName(null,""<null>""));}"
"org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_Class",0,"public void test_getShortClassName_Class(){assertEquals(""ClassUtils"",ClassUtils.getShortClassName(ClassUtils.class));assertEquals(""Map.Entry"",ClassUtils.getShortClassName(Map.Entry.class));assertEquals("""",ClassUtils.getShortClassName((Class)null));}"
"org.apache.commons.lang.ClassUtilsTest.test_getShortClassName_String",0,"public void test_getShortClassName_String(){assertEquals(""ClassUtils"",ClassUtils.getShortClassName(ClassUtils.class.getName()));assertEquals(""Map.Entry"",ClassUtils.getShortClassName(Map.Entry.class.getName()));assertEquals("""",ClassUtils.getShortClassName((String)null));assertEquals("""",ClassUtils.getShortClassName(""""));}"
"org.apache.commons.lang.ClassUtilsTest.test_getPackageName_Object",0,"public void test_getPackageName_Object(){assertEquals(""org.apache.commons.lang"",ClassUtils.getPackageName(new ClassUtils(),""<null>""));assertEquals(""org.apache.commons.lang"",ClassUtils.getPackageName(new Inner(),""<null>""));assertEquals(""<null>"",ClassUtils.getPackageName(null,""<null>""));}"
"org.apache.commons.lang.ClassUtilsTest.test_getPackageName_Class",0,"public void test_getPackageName_Class(){assertEquals(""java.lang"",ClassUtils.getPackageName(String.class));assertEquals(""java.util"",ClassUtils.getPackageName(Map.Entry.class));assertEquals("""",ClassUtils.getPackageName((Class)null));}"
"org.apache.commons.lang.ClassUtilsTest.test_getPackageName_String",0,"public void test_getPackageName_String(){assertEquals(""org.apache.commons.lang"",ClassUtils.getPackageName(ClassUtils.class.getName()));assertEquals(""java.util"",ClassUtils.getPackageName(Map.Entry.class.getName()));assertEquals("""",ClassUtils.getPackageName((String)null));assertEquals("""",ClassUtils.getPackageName(""""));}"
"org.apache.commons.lang.ClassUtilsTest.test_getAllSuperclasses_Class",0,"public void test_getAllSuperclasses_Class(){List list=ClassUtils.getAllSuperclasses(CY.class);assertEquals(2,list.size());assertEquals(CX.class,list.get(0));assertEquals(Object.class,list.get(1));assertEquals(null,ClassUtils.getAllSuperclasses(null));}"
"org.apache.commons.lang.ClassUtilsTest.test_getAllInterfaces_Class",0,"public void test_getAllInterfaces_Class(){List list=ClassUtils.getAllInterfaces(CY.class);assertEquals(6,list.size());assertEquals(IB.class,list.get(0));assertEquals(IC.class,list.get(1));assertEquals(ID.class,list.get(2));assertEquals(IE.class,list.get(3));assertEquals(IF.class,list.get(4));assertEquals(IA.class,list.get(5));assertEquals(null,ClassUtils.getAllInterfaces(null));}"
"org.apache.commons.lang.ClassUtilsTest.test_convertClassNamesToClasses_List",0,"public void test_convertClassNamesToClasses_List(){List list=new ArrayList();List result=ClassUtils.convertClassNamesToClasses(list);assertEquals(0,result.size());list.add(""java.lang.String"");list.add(""java.lang.xxx"");list.add(""java.lang.Object"");result=ClassUtils.convertClassNamesToClasses(list);assertEquals(3,result.size());assertEquals(String.class,result.get(0));assertEquals(null,result.get(1));assertEquals(Object.class,result.get(2));list.add(new Object());try {ClassUtils.convertClassNamesToClasses(list);fail();}catch(ClassCastException ex){}assertEquals(null,ClassUtils.convertClassNamesToClasses(null));}"
"org.apache.commons.lang.ClassUtilsTest.test_convertClassesToClassNames_List",0,"public void test_convertClassesToClassNames_List(){List list=new ArrayList();List result=ClassUtils.convertClassesToClassNames(list);assertEquals(0,result.size());list.add(String.class);list.add(null);list.add(Object.class);result=ClassUtils.convertClassesToClassNames(list);assertEquals(3,result.size());assertEquals(""java.lang.String"",result.get(0));assertEquals(null,result.get(1));assertEquals(""java.lang.Object"",result.get(2));list.add(new Object());try {ClassUtils.convertClassesToClassNames(list);fail();}catch(ClassCastException ex){}assertEquals(null,ClassUtils.convertClassesToClassNames(null));}"
"org.apache.commons.lang.ClassUtilsTest.test_isInnerClass_Class",0,"public void test_isInnerClass_Class(){assertEquals(true,ClassUtils.isInnerClass(Inner.class));assertEquals(true,ClassUtils.isInnerClass(Map.Entry.class));assertEquals(true,ClassUtils.isInnerClass(new Cloneable(){}.getClass()));assertEquals(false,ClassUtils.isInnerClass(this.getClass()));assertEquals(false,ClassUtils.isInnerClass(String.class));assertEquals(false,ClassUtils.isInnerClass(null));}"
"org.apache.commons.lang.ClassUtilsTest.test_isAssignable_ClassArray_ClassArray",0,"public void test_isAssignable_ClassArray_ClassArray()throws Exception {Class[]array2=new Class[]{Object.class,Object.class};Class[]array1=new Class[]{Object.class};Class[]array1s=new Class[]{String.class};Class[]array0=new Class[]{};assertEquals(false,ClassUtils.isAssignable(array1,array2));assertEquals(false,ClassUtils.isAssignable(null,array2));assertEquals(true,ClassUtils.isAssignable(null,array0));assertEquals(true,ClassUtils.isAssignable(array0,array0));assertEquals(true,ClassUtils.isAssignable(array0,null));assertEquals(true,ClassUtils.isAssignable((Class[])null,(Class[])null));assertEquals(false,ClassUtils.isAssignable(array1,array1s));assertEquals(true,ClassUtils.isAssignable(array1s,array1s));assertEquals(true,ClassUtils.isAssignable(array1s,array1));}"
"org.apache.commons.lang.ClassUtilsTest.test_isAssignable",0,"public void test_isAssignable()throws Exception {assertEquals(false,ClassUtils.isAssignable((Class)null,null));assertEquals(false,ClassUtils.isAssignable(String.class,null));assertEquals(true,ClassUtils.isAssignable(null,Object.class));assertEquals(true,ClassUtils.isAssignable(null,Integer.class));assertEquals(false,ClassUtils.isAssignable(null,Integer.TYPE));assertEquals(true,ClassUtils.isAssignable(String.class,Object.class));assertEquals(true,ClassUtils.isAssignable(String.class,String.class));assertEquals(false,ClassUtils.isAssignable(Object.class,String.class));assertEquals(false,ClassUtils.isAssignable(Integer.TYPE,Integer.class));assertEquals(false,ClassUtils.isAssignable(Integer.class,Integer.TYPE));assertEquals(true,ClassUtils.isAssignable(Integer.TYPE,Integer.TYPE));assertEquals(true,ClassUtils.isAssignable(Integer.class,Integer.class));}"
"org.apache.commons.lang.ClassUtilsTest.test_isAssignable_Widening",0,"public void test_isAssignable_Widening()throws Exception {assertEquals(""byte -> char"",false,ClassUtils.isAssignable(Byte.TYPE,Character.TYPE));assertEquals(""byte -> byte"",true,ClassUtils.isAssignable(Byte.TYPE,Byte.TYPE));assertEquals(""byte -> short"",true,ClassUtils.isAssignable(Byte.TYPE,Short.TYPE));assertEquals(""byte -> int"",true,ClassUtils.isAssignable(Byte.TYPE,Integer.TYPE));assertEquals(""byte -> long"",true,ClassUtils.isAssignable(Byte.TYPE,Long.TYPE));assertEquals(""byte -> float"",true,ClassUtils.isAssignable(Byte.TYPE,Float.TYPE));assertEquals(""byte -> double"",true,ClassUtils.isAssignable(Byte.TYPE,Double.TYPE));assertEquals(""byte -> boolean"",false,ClassUtils.isAssignable(Byte.TYPE,Boolean.TYPE));assertEquals(""short -> char"",false,ClassUtils.isAssignable(Short.TYPE,Character.TYPE));assertEquals(""short -> byte"",false,ClassUtils.isAssignable(Short.TYPE,Byte.TYPE));assertEquals(""short -> short"",true,ClassUtils.isAssignable(Short.TYPE,Short.TYPE));assertEquals(""short -> int"",true,ClassUtils.isAssignable(Short.TYPE,Integer.TYPE));assertEquals(""short -> long"",true,ClassUtils.isAssignable(Short.TYPE,Long.TYPE));assertEquals(""short -> float"",true,ClassUtils.isAssignable(Short.TYPE,Float.TYPE));assertEquals(""short -> double"",true,ClassUtils.isAssignable(Short.TYPE,Double.TYPE));assertEquals(""short -> boolean"",false,ClassUtils.isAssignable(Short.TYPE,Boolean.TYPE));assertEquals(""char -> char"",true,ClassUtils.isAssignable(Character.TYPE,Character.TYPE));assertEquals(""char -> byte"",false,ClassUtils.isAssignable(Character.TYPE,Byte.TYPE));assertEquals(""char -> short"",false,ClassUtils.isAssignable(Character.TYPE,Short.TYPE));assertEquals(""char -> int"",true,ClassUtils.isAssignable(Character.TYPE,Integer.TYPE));assertEquals(""char -> long"",true,ClassUtils.isAssignable(Character.TYPE,Long.TYPE));assertEquals(""char -> float"",true,ClassUtils.isAssignable(Character.TYPE,Float.TYPE));assertEquals(""char -> double"",true,ClassUtils.isAssignable(Character.TYPE,Double.TYPE));assertEquals(""char -> boolean"",false,ClassUtils.isAssignable(Character.TYPE,Boolean.TYPE));assertEquals(""int -> char"",false,ClassUtils.isAssignable(Integer.TYPE,Character.TYPE));assertEquals(""int -> byte"",false,ClassUtils.isAssignable(Integer.TYPE,Byte.TYPE));assertEquals(""int -> short"",false,ClassUtils.isAssignable(Integer.TYPE,Short.TYPE));assertEquals(""int -> int"",true,ClassUtils.isAssignable(Integer.TYPE,Integer.TYPE));assertEquals(""int -> long"",true,ClassUtils.isAssignable(Integer.TYPE,Long.TYPE));assertEquals(""int -> float"",true,ClassUtils.isAssignable(Integer.TYPE,Float.TYPE));assertEquals(""int -> double"",true,ClassUtils.isAssignable(Integer.TYPE,Double.TYPE));assertEquals(""int -> boolean"",false,ClassUtils.isAssignable(Integer.TYPE,Boolean.TYPE));assertEquals(""long -> char"",false,ClassUtils.isAssignable(Long.TYPE,Character.TYPE));assertEquals(""long -> byte"",false,ClassUtils.isAssignable(Long.TYPE,Byte.TYPE));assertEquals(""long -> short"",false,ClassUtils.isAssignable(Long.TYPE,Short.TYPE));assertEquals(""long -> int"",false,ClassUtils.isAssignable(Long.TYPE,Integer.TYPE));assertEquals(""long -> long"",true,ClassUtils.isAssignable(Long.TYPE,Long.TYPE));assertEquals(""long -> float"",true,ClassUtils.isAssignable(Long.TYPE,Float.TYPE));assertEquals(""long -> double"",true,ClassUtils.isAssignable(Long.TYPE,Double.TYPE));assertEquals(""long -> boolean"",false,ClassUtils.isAssignable(Long.TYPE,Boolean.TYPE));assertEquals(""float -> char"",false,ClassUtils.isAssignable(Float.TYPE,Character.TYPE));assertEquals(""float -> byte"",false,ClassUtils.isAssignable(Float.TYPE,Byte.TYPE));assertEquals(""float -> short"",false,ClassUtils.isAssignable(Float.TYPE,Short.TYPE));assertEquals(""float -> int"",false,ClassUtils.isAssignable(Float.TYPE,Integer.TYPE));assertEquals(""float -> long"",false,ClassUtils.isAssignable(Float.TYPE,Long.TYPE));assertEquals(""float -> float"",true,ClassUtils.isAssignable(Float.TYPE,Float.TYPE));assertEquals(""float -> double"",true,ClassUtils.isAssignable(Float.TYPE,Double.TYPE));assertEquals(""float -> boolean"",false,ClassUtils.isAssignable(Float.TYPE,Boolean.TYPE));assertEquals(""double -> char"",false,ClassUtils.isAssignable(Double.TYPE,Character.TYPE));assertEquals(""double -> byte"",false,ClassUtils.isAssignable(Double.TYPE,Byte.TYPE));assertEquals(""double -> short"",false,ClassUtils.isAssignable(Double.TYPE,Short.TYPE));assertEquals(""double -> int"",false,ClassUtils.isAssignable(Double.TYPE,Integer.TYPE));assertEquals(""double -> long"",false,ClassUtils.isAssignable(Double.TYPE,Long.TYPE));assertEquals(""double -> float"",false,ClassUtils.isAssignable(Double.TYPE,Float.TYPE));assertEquals(""double -> double"",true,ClassUtils.isAssignable(Double.TYPE,Double.TYPE));assertEquals(""double -> boolean"",false,ClassUtils.isAssignable(Double.TYPE,Boolean.TYPE));assertEquals(""boolean -> char"",false,ClassUtils.isAssignable(Boolean.TYPE,Character.TYPE));assertEquals(""boolean -> byte"",false,ClassUtils.isAssignable(Boolean.TYPE,Byte.TYPE));assertEquals(""boolean -> short"",false,ClassUtils.isAssignable(Boolean.TYPE,Short.TYPE));assertEquals(""boolean -> int"",false,ClassUtils.isAssignable(Boolean.TYPE,Integer.TYPE));assertEquals(""boolean -> long"",false,ClassUtils.isAssignable(Boolean.TYPE,Long.TYPE));assertEquals(""boolean -> float"",false,ClassUtils.isAssignable(Boolean.TYPE,Float.TYPE));assertEquals(""boolean -> double"",false,ClassUtils.isAssignable(Boolean.TYPE,Double.TYPE));assertEquals(""boolean -> boolean"",true,ClassUtils.isAssignable(Boolean.TYPE,Boolean.TYPE));}"
"org.apache.commons.lang.ClassUtilsTest.testPrimitiveToWrapper",0,"public void testPrimitiveToWrapper(){assertEquals(""boolean -> Boolean.class"",Boolean.class,ClassUtils.primitiveToWrapper(Boolean.TYPE));assertEquals(""byte -> Byte.class"",Byte.class,ClassUtils.primitiveToWrapper(Byte.TYPE));assertEquals(""char -> Character.class"",Character.class,ClassUtils.primitiveToWrapper(Character.TYPE));assertEquals(""short -> Short.class"",Short.class,ClassUtils.primitiveToWrapper(Short.TYPE));assertEquals(""int -> Integer.class"",Integer.class,ClassUtils.primitiveToWrapper(Integer.TYPE));assertEquals(""long -> Long.class"",Long.class,ClassUtils.primitiveToWrapper(Long.TYPE));assertEquals(""double -> Double.class"",Double.class,ClassUtils.primitiveToWrapper(Double.TYPE));assertEquals(""float -> Float.class"",Float.class,ClassUtils.primitiveToWrapper(Float.TYPE));assertEquals(""String.class -> String.class"",String.class,ClassUtils.primitiveToWrapper(String.class));assertEquals(""ClassUtils.class -> ClassUtils.class"",org.apache.commons.lang.ClassUtils.class,ClassUtils.primitiveToWrapper(org.apache.commons.lang.ClassUtils.class));assertEquals(""Void.TYPE -> Void.TYPE"",Void.TYPE,ClassUtils.primitiveToWrapper(Void.TYPE));assertNull(""null -> null"",ClassUtils.primitiveToWrapper(null));}"
"org.apache.commons.lang.ClassUtilsTest.testPrimitivesToWrappers",0,"public void testPrimitivesToWrappers(){assertNull(""null -> null"",ClassUtils.primitivesToWrappers(null));assertEquals(""empty -> empty"",ArrayUtils.EMPTY_CLASS_ARRAY,ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));final Class[]primitives=new Class[]{Boolean.TYPE,Byte.TYPE,Character.TYPE,Short.TYPE,Integer.TYPE,Long.TYPE,Double.TYPE,Float.TYPE,String.class,ClassUtils.class};Class[]wrappers=ClassUtils.primitivesToWrappers(primitives);for (int i=0;i < primitives.length;i++){Class primitive=primitives[i];Class expectedWrapper=ClassUtils.primitiveToWrapper(primitive);assertEquals(primitive + "" -> "" + expectedWrapper,expectedWrapper,wrappers[i]);}final Class[]noPrimitives=new Class[]{String.class,ClassUtils.class,Void.TYPE};assertNotSame(""unmodified"",noPrimitives,ClassUtils.primitivesToWrappers(noPrimitives));}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassClassNotFound",0,"public void testGetClassClassNotFound()throws Exception {assertGetClassThrowsClassNotFound(""bool"");assertGetClassThrowsClassNotFound(""bool[]"");assertGetClassThrowsClassNotFound(""integer[]"");}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassInvalidArguments",0,"public void testGetClassInvalidArguments()throws Exception {assertGetClassThrowsIllegalArgument(null);assertGetClassThrowsClassNotFound(""[][][]"");assertGetClassThrowsClassNotFound(""[[]"");assertGetClassThrowsClassNotFound(""["");assertGetClassThrowsClassNotFound(""java.lang.String]["");assertGetClassThrowsClassNotFound("".hello.world"");assertGetClassThrowsClassNotFound(""hello..world"");}"
"org.apache.commons.lang.ClassUtilsTest.testWithInterleavingWhitespace",0,"public void testWithInterleavingWhitespace()throws ClassNotFoundException {assertEquals(int[].class,ClassUtils.getClass("" int[]""));assertEquals(long[].class,ClassUtils.getClass(""\rlong\t[\n]\r""));assertEquals(short[].class,ClassUtils.getClass(""\tshort                \t\t[]""));assertEquals(byte[].class,ClassUtils.getClass(""byte[\t\t\n\r]""));}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassByNormalNameArrays",0,"public void testGetClassByNormalNameArrays()throws ClassNotFoundException {assertEquals(int[].class,ClassUtils.getClass(""int[]""));assertEquals(long[].class,ClassUtils.getClass(""long[]""));assertEquals(short[].class,ClassUtils.getClass(""short[]""));assertEquals(byte[].class,ClassUtils.getClass(""byte[]""));assertEquals(char[].class,ClassUtils.getClass(""char[]""));assertEquals(float[].class,ClassUtils.getClass(""float[]""));assertEquals(double[].class,ClassUtils.getClass(""double[]""));assertEquals(boolean[].class,ClassUtils.getClass(""boolean[]""));assertEquals(String[].class,ClassUtils.getClass(""java.lang.String[]""));}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassByNormalNameArrays2D",0,"public void testGetClassByNormalNameArrays2D()throws ClassNotFoundException {assertEquals(int[][].class,ClassUtils.getClass(""int[][]""));assertEquals(long[][].class,ClassUtils.getClass(""long[][]""));assertEquals(short[][].class,ClassUtils.getClass(""short[][]""));assertEquals(byte[][].class,ClassUtils.getClass(""byte[][]""));assertEquals(char[][].class,ClassUtils.getClass(""char[][]""));assertEquals(float[][].class,ClassUtils.getClass(""float[][]""));assertEquals(double[][].class,ClassUtils.getClass(""double[][]""));assertEquals(boolean[][].class,ClassUtils.getClass(""boolean[][]""));assertEquals(String[][].class,ClassUtils.getClass(""java.lang.String[][]""));}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassWithArrayClasses2D",0,"public void testGetClassWithArrayClasses2D()throws Exception {assertGetClassReturnsClass(String[][].class);assertGetClassReturnsClass(int[][].class);assertGetClassReturnsClass(long[][].class);assertGetClassReturnsClass(short[][].class);assertGetClassReturnsClass(byte[][].class);assertGetClassReturnsClass(char[][].class);assertGetClassReturnsClass(float[][].class);assertGetClassReturnsClass(double[][].class);assertGetClassReturnsClass(boolean[][].class);}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassWithArrayClasses",0,"public void testGetClassWithArrayClasses()throws Exception {assertGetClassReturnsClass(String[].class);assertGetClassReturnsClass(int[].class);assertGetClassReturnsClass(long[].class);assertGetClassReturnsClass(short[].class);assertGetClassReturnsClass(byte[].class);assertGetClassReturnsClass(char[].class);assertGetClassReturnsClass(float[].class);assertGetClassReturnsClass(double[].class);assertGetClassReturnsClass(boolean[].class);}"
"org.apache.commons.lang.ClassUtilsTest.testGetClassRawPrimitives",0,"public void testGetClassRawPrimitives()throws ClassNotFoundException {assertEquals(int.class,ClassUtils.getClass(""int""));assertEquals(long.class,ClassUtils.getClass(""long""));assertEquals(short.class,ClassUtils.getClass(""short""));assertEquals(byte.class,ClassUtils.getClass(""byte""));assertEquals(char.class,ClassUtils.getClass(""char""));assertEquals(float.class,ClassUtils.getClass(""float""));assertEquals(double.class,ClassUtils.getClass(""double""));assertEquals(boolean.class,ClassUtils.getClass(""boolean""));}"
"org.apache.commons.lang.ClassUtilsTest.testShowJavaBug",0,"public void testShowJavaBug()throws Exception {Set set=Collections.unmodifiableSet(new HashSet());Method isEmptyMethod=set.getClass().getMethod(""isEmpty"",new Class[0]);try {isEmptyMethod.invoke(set,new Object[0]);fail(""Failed to throw IllegalAccessException as expected"");}catch(IllegalAccessException iae){}}"
"org.apache.commons.lang.ClassUtilsTest.testGetPublicMethod",0,"public void testGetPublicMethod()throws Exception {Set set=Collections.unmodifiableSet(new HashSet());Method isEmptyMethod=ClassUtils.getPublicMethod(set.getClass(),""isEmpty"",new Class[0]);assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));try {isEmptyMethod.invoke(set,new Object[0]);}catch(java.lang.IllegalAccessException iae){fail(""Should not have thrown IllegalAccessException"");}Method toStringMethod=ClassUtils.getPublicMethod(Object.class,""toString"",new Class[0]);assertEquals(Object.class.getMethod(""toString"",new Class[0]),toStringMethod);}"
"org.apache.commons.lang.mutable.MutableByteTest.testConstructors",0,"public void testConstructors(){assertEquals((byte)0,new MutableByte().byteValue());assertEquals((byte)1,new MutableByte((byte)1).byteValue());assertEquals((byte)2,new MutableByte(new Byte((byte)2)).byteValue());assertEquals((byte)3,new MutableByte(new MutableByte((byte)3)).byteValue());try {new MutableByte(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableByteTest.testGetSet",0,"public void testGetSet(){final MutableByte mutNum=new MutableByte((byte)0);assertEquals((byte)0,new MutableByte().byteValue());assertEquals(new Byte((byte)0),new MutableByte().getValue());mutNum.setValue((byte)1);assertEquals((byte)1,mutNum.byteValue());assertEquals(new Byte((byte)1),mutNum.getValue());mutNum.setValue(new Byte((byte)2));assertEquals((byte)2,mutNum.byteValue());assertEquals(new Byte((byte)2),mutNum.getValue());mutNum.setValue(new MutableByte((byte)3));assertEquals((byte)3,mutNum.byteValue());assertEquals(new Byte((byte)3),mutNum.getValue());try {mutNum.setValue(null);fail();}catch(NullPointerException ex){}try {mutNum.setValue(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableByteTest.testEquals",0,"public void testEquals(){final MutableByte mutNumA=new MutableByte((byte)0);final MutableByte mutNumB=new MutableByte((byte)0);final MutableByte mutNumC=new MutableByte((byte)1);assertEquals(true,mutNumA.equals(mutNumA));assertEquals(true,mutNumA.equals(mutNumB));assertEquals(true,mutNumB.equals(mutNumA));assertEquals(true,mutNumB.equals(mutNumB));assertEquals(false,mutNumA.equals(mutNumC));assertEquals(false,mutNumB.equals(mutNumC));assertEquals(true,mutNumC.equals(mutNumC));assertEquals(false,mutNumA.equals(null));assertEquals(false,mutNumA.equals(new Byte((byte)0)));assertEquals(false,mutNumA.equals(""0""));}"
"org.apache.commons.lang.mutable.MutableByteTest.testHashCode",0,"public void testHashCode(){final MutableByte mutNumA=new MutableByte((byte)0);final MutableByte mutNumB=new MutableByte((byte)0);final MutableByte mutNumC=new MutableByte((byte)1);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(true,mutNumA.hashCode()== new Byte((byte)0).hashCode());}"
"org.apache.commons.lang.mutable.MutableByteTest.testCompareTo",0,"public void testCompareTo(){final MutableByte mutNum=new MutableByte((byte)0);assertEquals((byte)0,mutNum.compareTo(new MutableByte((byte)0)));assertEquals((byte)+1,mutNum.compareTo(new MutableByte((byte)-1)));assertEquals((byte)-1,mutNum.compareTo(new MutableByte((byte)1)));try {mutNum.compareTo(null);fail();}catch(NullPointerException ex){}try {mutNum.compareTo(new Byte((byte)0));fail();}catch(ClassCastException ex){}try {mutNum.compareTo(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableByteTest.testPrimitiveValues",0,"public void testPrimitiveValues(){MutableByte mutNum=new MutableByte((byte)1);assertEquals(1.0F,mutNum.floatValue(),0);assertEquals(1.0,mutNum.doubleValue(),0);assertEquals((byte)1,mutNum.byteValue());assertEquals((short)1,mutNum.shortValue());assertEquals(1,mutNum.intValue());assertEquals(1L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testToByte",0,"public void testToByte(){assertEquals(new Byte((byte)0),new MutableByte((byte)0).toByte());assertEquals(new Byte((byte)123),new MutableByte((byte)123).toByte());}"
"org.apache.commons.lang.mutable.MutableByteTest.testIncrement",0,"public void testIncrement(){MutableByte mutNum=new MutableByte((byte)1);mutNum.increment();assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testDecrement",0,"public void testDecrement(){MutableByte mutNum=new MutableByte((byte)1);mutNum.decrement();assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testAddValuePrimitive",0,"public void testAddValuePrimitive(){MutableByte mutNum=new MutableByte((byte)1);mutNum.add((byte)1);assertEquals((byte)2,mutNum.byteValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testAddValueObject",0,"public void testAddValueObject(){MutableByte mutNum=new MutableByte((byte)1);mutNum.add(new Integer(1));assertEquals((byte)2,mutNum.byteValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testSubtractValuePrimitive",0,"public void testSubtractValuePrimitive(){MutableByte mutNum=new MutableByte((byte)1);mutNum.subtract((byte)1);assertEquals((byte)0,mutNum.byteValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testSubtractValueObject",0,"public void testSubtractValueObject(){MutableByte mutNum=new MutableByte((byte)1);mutNum.subtract(new Integer(1));assertEquals((byte)0,mutNum.byteValue());}"
"org.apache.commons.lang.mutable.MutableByteTest.testToString",0,"public void testToString(){assertEquals(""0"",new MutableByte((byte)0).toString());assertEquals(""10"",new MutableByte((byte)10).toString());assertEquals(""-123"",new MutableByte((byte)-123).toString());}"
"org.apache.commons.lang.text.CompositeFormatTest.testCompositeFormat",0,"/** * Ensures that the parse/format separation is correctly maintained. */public void testCompositeFormat(){Format parser=new Format(){public StringBuffer format(Object obj,StringBuffer toAppendTo,FieldPosition pos){throw new UnsupportedOperationException(""Not implemented"");}public Object parseObject(String source,ParsePosition pos){return null;}};Format formatter=new Format(){public StringBuffer format(Object obj,StringBuffer toAppendTo,FieldPosition pos){return null;}public Object parseObject(String source,ParsePosition pos){throw new UnsupportedOperationException(""Not implemented"");}};CompositeFormat composite=new CompositeFormat(parser,formatter);composite.parseObject("""",null);composite.format(new Object(),new StringBuffer(),null);assertEquals(""Parser get method incorrectly implemented"",parser,composite.getParser());assertEquals(""Formatter get method incorrectly implemented"",formatter,composite.getFormatter());}"
"org.apache.commons.lang.text.CompositeFormatTest.testUsage",0,"public void testUsage()throws Exception {Format f1=new SimpleDateFormat(""MMddyyyy"",Locale.ENGLISH);Format f2=new SimpleDateFormat(""MMMM d,yyyy"",Locale.ENGLISH);CompositeFormat c=new CompositeFormat(f1,f2);String testString=""January 3,2005"";assertEquals(testString,c.format(c.parseObject(""01032005"")));assertEquals(testString,c.reformat(""01032005""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testEquals",0,"public void testEquals(){assertEquals(true,StringUtils.equals(null,null));assertEquals(true,StringUtils.equals(FOO,FOO));assertEquals(true,StringUtils.equals(FOO,new String(new char[]{'f','o','o'})));assertEquals(false,StringUtils.equals(FOO,new String(new char[]{'f','O','O'})));assertEquals(false,StringUtils.equals(FOO,BAR));assertEquals(false,StringUtils.equals(FOO,null));assertEquals(false,StringUtils.equals(null,FOO));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testEqualsIgnoreCase",0,"public void testEqualsIgnoreCase(){assertEquals(true,StringUtils.equalsIgnoreCase(null,null));assertEquals(true,StringUtils.equalsIgnoreCase(FOO,FOO));assertEquals(true,StringUtils.equalsIgnoreCase(FOO,new String(new char[]{'f','o','o'})));assertEquals(true,StringUtils.equalsIgnoreCase(FOO,new String(new char[]{'f','O','O'})));assertEquals(false,StringUtils.equalsIgnoreCase(FOO,BAR));assertEquals(false,StringUtils.equalsIgnoreCase(FOO,null));assertEquals(false,StringUtils.equalsIgnoreCase(null,FOO));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_char",0,"public void testIndexOf_char(){assertEquals(-1,StringUtils.indexOf(null,' '));assertEquals(-1,StringUtils.indexOf("""",' '));assertEquals(0,StringUtils.indexOf(""aabaabaa"",'a'));assertEquals(2,StringUtils.indexOf(""aabaabaa"",'b'));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_charInt",0,"public void testIndexOf_charInt(){assertEquals(-1,StringUtils.indexOf(null,' ',0));assertEquals(-1,StringUtils.indexOf(null,' ',-1));assertEquals(-1,StringUtils.indexOf("""",' ',0));assertEquals(-1,StringUtils.indexOf("""",' ',-1));assertEquals(0,StringUtils.indexOf(""aabaabaa"",'a',0));assertEquals(2,StringUtils.indexOf(""aabaabaa"",'b',0));assertEquals(5,StringUtils.indexOf(""aabaabaa"",'b',3));assertEquals(-1,StringUtils.indexOf(""aabaabaa"",'b',9));assertEquals(2,StringUtils.indexOf(""aabaabaa"",'b',-1));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_String",0,"public void testIndexOf_String(){assertEquals(-1,StringUtils.indexOf(null,null));assertEquals(-1,StringUtils.indexOf("""",null));assertEquals(0,StringUtils.indexOf("""",""""));assertEquals(0,StringUtils.indexOf(""aabaabaa"",""a""));assertEquals(2,StringUtils.indexOf(""aabaabaa"",""b""));assertEquals(1,StringUtils.indexOf(""aabaabaa"",""ab""));assertEquals(0,StringUtils.indexOf(""aabaabaa"",""""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testOrdinalIndexOf",0,"public void testOrdinalIndexOf(){assertEquals(-1,StringUtils.ordinalIndexOf(null,null,Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf("""",null,Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf("""","""",Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""a"",Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""b"",Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""ab"",Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"","""",Integer.MIN_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(null,null,-1));assertEquals(-1,StringUtils.ordinalIndexOf("""",null,-1));assertEquals(-1,StringUtils.ordinalIndexOf("""","""",-1));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""a"",-1));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""b"",-1));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""ab"",-1));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"","""",-1));assertEquals(-1,StringUtils.ordinalIndexOf(null,null,0));assertEquals(-1,StringUtils.ordinalIndexOf("""",null,0));assertEquals(-1,StringUtils.ordinalIndexOf("""","""",0));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""a"",0));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""b"",0));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""ab"",0));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"","""",0));assertEquals(-1,StringUtils.ordinalIndexOf(null,null,1));assertEquals(-1,StringUtils.ordinalIndexOf("""",null,1));assertEquals(0,StringUtils.ordinalIndexOf("""","""",1));assertEquals(0,StringUtils.ordinalIndexOf(""aabaabaa"",""a"",1));assertEquals(2,StringUtils.ordinalIndexOf(""aabaabaa"",""b"",1));assertEquals(1,StringUtils.ordinalIndexOf(""aabaabaa"",""ab"",1));assertEquals(0,StringUtils.ordinalIndexOf(""aabaabaa"","""",1));assertEquals(-1,StringUtils.ordinalIndexOf(null,null,2));assertEquals(-1,StringUtils.ordinalIndexOf("""",null,2));assertEquals(0,StringUtils.ordinalIndexOf("""","""",2));assertEquals(1,StringUtils.ordinalIndexOf(""aabaabaa"",""a"",2));assertEquals(5,StringUtils.ordinalIndexOf(""aabaabaa"",""b"",2));assertEquals(4,StringUtils.ordinalIndexOf(""aabaabaa"",""ab"",2));assertEquals(0,StringUtils.ordinalIndexOf(""aabaabaa"","""",2));assertEquals(-1,StringUtils.ordinalIndexOf(null,null,Integer.MAX_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf("""",null,Integer.MAX_VALUE));assertEquals(0,StringUtils.ordinalIndexOf("""","""",Integer.MAX_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""a"",Integer.MAX_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""b"",Integer.MAX_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aabaabaa"",""ab"",Integer.MAX_VALUE));assertEquals(0,StringUtils.ordinalIndexOf(""aabaabaa"","""",Integer.MAX_VALUE));assertEquals(-1,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",0));assertEquals(0,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",1));assertEquals(1,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",2));assertEquals(2,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",3));assertEquals(3,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",4));assertEquals(4,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",5));assertEquals(5,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",6));assertEquals(6,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",7));assertEquals(7,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",8));assertEquals(8,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",9));assertEquals(-1,StringUtils.ordinalIndexOf(""aaaaaaaaa"",""a"",10));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOf_StringInt",0,"public void testIndexOf_StringInt(){assertEquals(-1,StringUtils.indexOf(null,null,0));assertEquals(-1,StringUtils.indexOf(null,null,-1));assertEquals(-1,StringUtils.indexOf(null,"""",0));assertEquals(-1,StringUtils.indexOf(null,"""",-1));assertEquals(-1,StringUtils.indexOf("""",null,0));assertEquals(-1,StringUtils.indexOf("""",null,-1));assertEquals(0,StringUtils.indexOf("""","""",0));assertEquals(0,StringUtils.indexOf("""","""",-1));assertEquals(0,StringUtils.indexOf("""","""",9));assertEquals(0,StringUtils.indexOf(""abc"","""",0));assertEquals(0,StringUtils.indexOf(""abc"","""",-1));assertEquals(3,StringUtils.indexOf(""abc"","""",9));assertEquals(3,StringUtils.indexOf(""abc"","""",3));assertEquals(0,StringUtils.indexOf(""aabaabaa"",""a"",0));assertEquals(2,StringUtils.indexOf(""aabaabaa"",""b"",0));assertEquals(1,StringUtils.indexOf(""aabaabaa"",""ab"",0));assertEquals(5,StringUtils.indexOf(""aabaabaa"",""b"",3));assertEquals(-1,StringUtils.indexOf(""aabaabaa"",""b"",9));assertEquals(2,StringUtils.indexOf(""aabaabaa"",""b"",-1));assertEquals(2,StringUtils.indexOf(""aabaabaa"","""",2));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_char",0,"public void testLastIndexOf_char(){assertEquals(-1,StringUtils.lastIndexOf(null,' '));assertEquals(-1,StringUtils.lastIndexOf("""",' '));assertEquals(7,StringUtils.lastIndexOf(""aabaabaa"",'a'));assertEquals(5,StringUtils.lastIndexOf(""aabaabaa"",'b'));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_charInt",0,"public void testLastIndexOf_charInt(){assertEquals(-1,StringUtils.lastIndexOf(null,' ',0));assertEquals(-1,StringUtils.lastIndexOf(null,' ',-1));assertEquals(-1,StringUtils.lastIndexOf("""",' ',0));assertEquals(-1,StringUtils.lastIndexOf("""",' ',-1));assertEquals(7,StringUtils.lastIndexOf(""aabaabaa"",'a',8));assertEquals(5,StringUtils.lastIndexOf(""aabaabaa"",'b',8));assertEquals(2,StringUtils.lastIndexOf(""aabaabaa"",'b',3));assertEquals(5,StringUtils.lastIndexOf(""aabaabaa"",'b',9));assertEquals(-1,StringUtils.lastIndexOf(""aabaabaa"",'b',-1));assertEquals(0,StringUtils.lastIndexOf(""aabaabaa"",'a',0));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_String",0,"public void testLastIndexOf_String(){assertEquals(-1,StringUtils.lastIndexOf(null,null));assertEquals(-1,StringUtils.lastIndexOf("""",null));assertEquals(-1,StringUtils.lastIndexOf("""",""a""));assertEquals(0,StringUtils.lastIndexOf("""",""""));assertEquals(8,StringUtils.lastIndexOf(""aabaabaa"",""""));assertEquals(7,StringUtils.lastIndexOf(""aabaabaa"",""a""));assertEquals(5,StringUtils.lastIndexOf(""aabaabaa"",""b""));assertEquals(4,StringUtils.lastIndexOf(""aabaabaa"",""ab""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOf_StringInt",0,"public void testLastIndexOf_StringInt(){assertEquals(-1,StringUtils.lastIndexOf(null,null,0));assertEquals(-1,StringUtils.lastIndexOf(null,null,-1));assertEquals(-1,StringUtils.lastIndexOf(null,"""",0));assertEquals(-1,StringUtils.lastIndexOf(null,"""",-1));assertEquals(-1,StringUtils.lastIndexOf("""",null,0));assertEquals(-1,StringUtils.lastIndexOf("""",null,-1));assertEquals(0,StringUtils.lastIndexOf("""","""",0));assertEquals(-1,StringUtils.lastIndexOf("""","""",-1));assertEquals(0,StringUtils.lastIndexOf("""","""",9));assertEquals(0,StringUtils.lastIndexOf(""abc"","""",0));assertEquals(-1,StringUtils.lastIndexOf(""abc"","""",-1));assertEquals(3,StringUtils.lastIndexOf(""abc"","""",9));assertEquals(7,StringUtils.lastIndexOf(""aabaabaa"",""a"",8));assertEquals(5,StringUtils.lastIndexOf(""aabaabaa"",""b"",8));assertEquals(4,StringUtils.lastIndexOf(""aabaabaa"",""ab"",8));assertEquals(2,StringUtils.lastIndexOf(""aabaabaa"",""b"",3));assertEquals(5,StringUtils.lastIndexOf(""aabaabaa"",""b"",9));assertEquals(-1,StringUtils.lastIndexOf(""aabaabaa"",""b"",-1));assertEquals(-1,StringUtils.lastIndexOf(""aabaabaa"",""b"",0));assertEquals(0,StringUtils.lastIndexOf(""aabaabaa"",""a"",0));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsChar",0,"public void testContainsChar(){assertEquals(false,StringUtils.contains(null,' '));assertEquals(false,StringUtils.contains("""",' '));assertEquals(false,StringUtils.contains("""",null));assertEquals(false,StringUtils.contains(null,null));assertEquals(true,StringUtils.contains(""abc"",'a'));assertEquals(true,StringUtils.contains(""abc"",'b'));assertEquals(true,StringUtils.contains(""abc"",'c'));assertEquals(false,StringUtils.contains(""abc"",'z'));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsString",0,"public void testContainsString(){assertEquals(false,StringUtils.contains(null,null));assertEquals(false,StringUtils.contains(null,""""));assertEquals(false,StringUtils.contains(null,""a""));assertEquals(false,StringUtils.contains("""",null));assertEquals(true,StringUtils.contains("""",""""));assertEquals(false,StringUtils.contains("""",""a""));assertEquals(true,StringUtils.contains(""abc"",""a""));assertEquals(true,StringUtils.contains(""abc"",""b""));assertEquals(true,StringUtils.contains(""abc"",""c""));assertEquals(true,StringUtils.contains(""abc"",""abc""));assertEquals(false,StringUtils.contains(""abc"",""z""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsIgnoreCase_StringString",0,"public void testContainsIgnoreCase_StringString(){assertFalse(StringUtils.containsIgnoreCase(null,null));assertFalse(StringUtils.containsIgnoreCase(null,""""));assertFalse(StringUtils.containsIgnoreCase(null,""a""));assertFalse(StringUtils.containsIgnoreCase(null,""abc""));assertFalse(StringUtils.containsIgnoreCase("""",null));assertFalse(StringUtils.containsIgnoreCase(""a"",null));assertFalse(StringUtils.containsIgnoreCase(""abc"",null));assertTrue(StringUtils.containsIgnoreCase("""",""""));assertTrue(StringUtils.containsIgnoreCase(""a"",""""));assertTrue(StringUtils.containsIgnoreCase(""abc"",""""));assertFalse(StringUtils.containsIgnoreCase("""",""a""));assertTrue(StringUtils.containsIgnoreCase(""a"",""a""));assertTrue(StringUtils.containsIgnoreCase(""abc"",""a""));assertFalse(StringUtils.containsIgnoreCase("""",""A""));assertTrue(StringUtils.containsIgnoreCase(""a"",""A""));assertTrue(StringUtils.containsIgnoreCase(""abc"",""A""));assertFalse(StringUtils.containsIgnoreCase("""",""abc""));assertFalse(StringUtils.containsIgnoreCase(""a"",""abc""));assertTrue(StringUtils.containsIgnoreCase(""xabcz"",""abc""));assertFalse(StringUtils.containsIgnoreCase("""",""ABC""));assertFalse(StringUtils.containsIgnoreCase(""a"",""ABC""));assertTrue(StringUtils.containsIgnoreCase(""xabcz"",""ABC""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringStringarray",0,"public void testIndexOfAny_StringStringarray(){assertEquals(-1,StringUtils.indexOfAny(null,(String[])null));assertEquals(-1,StringUtils.indexOfAny(null,FOOBAR_SUB_ARRAY));assertEquals(-1,StringUtils.indexOfAny(FOOBAR,(String[])null));assertEquals(2,StringUtils.indexOfAny(FOOBAR,FOOBAR_SUB_ARRAY));assertEquals(-1,StringUtils.indexOfAny(FOOBAR,new String[0]));assertEquals(-1,StringUtils.indexOfAny(null,new String[0]));assertEquals(-1,StringUtils.indexOfAny("""",new String[0]));assertEquals(-1,StringUtils.indexOfAny(FOOBAR,new String[]{""llll""}));assertEquals(0,StringUtils.indexOfAny(FOOBAR,new String[]{""""}));assertEquals(0,StringUtils.indexOfAny("""",new String[]{""""}));assertEquals(-1,StringUtils.indexOfAny("""",new String[]{""a""}));assertEquals(-1,StringUtils.indexOfAny("""",new String[]{null}));assertEquals(-1,StringUtils.indexOfAny(FOOBAR,new String[]{null}));assertEquals(-1,StringUtils.indexOfAny(null,new String[]{null}));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testLastIndexOfAny_StringStringarray",0,"public void testLastIndexOfAny_StringStringarray(){assertEquals(-1,StringUtils.lastIndexOfAny(null,null));assertEquals(-1,StringUtils.lastIndexOfAny(null,FOOBAR_SUB_ARRAY));assertEquals(-1,StringUtils.lastIndexOfAny(FOOBAR,null));assertEquals(3,StringUtils.lastIndexOfAny(FOOBAR,FOOBAR_SUB_ARRAY));assertEquals(-1,StringUtils.lastIndexOfAny(FOOBAR,new String[0]));assertEquals(-1,StringUtils.lastIndexOfAny(null,new String[0]));assertEquals(-1,StringUtils.lastIndexOfAny("""",new String[0]));assertEquals(-1,StringUtils.lastIndexOfAny(FOOBAR,new String[]{""llll""}));assertEquals(6,StringUtils.lastIndexOfAny(FOOBAR,new String[]{""""}));assertEquals(0,StringUtils.lastIndexOfAny("""",new String[]{""""}));assertEquals(-1,StringUtils.lastIndexOfAny("""",new String[]{""a""}));assertEquals(-1,StringUtils.lastIndexOfAny("""",new String[]{null}));assertEquals(-1,StringUtils.lastIndexOfAny(FOOBAR,new String[]{null}));assertEquals(-1,StringUtils.lastIndexOfAny(null,new String[]{null}));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringChararray",0,"public void testIndexOfAny_StringChararray(){assertEquals(-1,StringUtils.indexOfAny(null,(char[])null));assertEquals(-1,StringUtils.indexOfAny(null,new char[0]));assertEquals(-1,StringUtils.indexOfAny(null,new char[]{'a','b'}));assertEquals(-1,StringUtils.indexOfAny("""",(char[])null));assertEquals(-1,StringUtils.indexOfAny("""",new char[0]));assertEquals(-1,StringUtils.indexOfAny("""",new char[]{'a','b'}));assertEquals(-1,StringUtils.indexOfAny(""zzabyycdxx"",(char[])null));assertEquals(-1,StringUtils.indexOfAny(""zzabyycdxx"",new char[0]));assertEquals(0,StringUtils.indexOfAny(""zzabyycdxx"",new char[]{'z','a'}));assertEquals(3,StringUtils.indexOfAny(""zzabyycdxx"",new char[]{'b','y'}));assertEquals(-1,StringUtils.indexOfAny(""ab"",new char[]{'z'}));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAny_StringString",0,"public void testIndexOfAny_StringString(){assertEquals(-1,StringUtils.indexOfAny(null,(String)null));assertEquals(-1,StringUtils.indexOfAny(null,""""));assertEquals(-1,StringUtils.indexOfAny(null,""ab""));assertEquals(-1,StringUtils.indexOfAny("""",(String)null));assertEquals(-1,StringUtils.indexOfAny("""",""""));assertEquals(-1,StringUtils.indexOfAny("""",""ab""));assertEquals(-1,StringUtils.indexOfAny(""zzabyycdxx"",(String)null));assertEquals(-1,StringUtils.indexOfAny(""zzabyycdxx"",""""));assertEquals(0,StringUtils.indexOfAny(""zzabyycdxx"",""za""));assertEquals(3,StringUtils.indexOfAny(""zzabyycdxx"",""by""));assertEquals(-1,StringUtils.indexOfAny(""ab"",""z""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringChararray",0,"public void testIndexOfAnyBut_StringChararray(){assertEquals(-1,StringUtils.indexOfAnyBut(null,(char[])null));assertEquals(-1,StringUtils.indexOfAnyBut(null,new char[0]));assertEquals(-1,StringUtils.indexOfAnyBut(null,new char[]{'a','b'}));assertEquals(-1,StringUtils.indexOfAnyBut("""",(char[])null));assertEquals(-1,StringUtils.indexOfAnyBut("""",new char[0]));assertEquals(-1,StringUtils.indexOfAnyBut("""",new char[]{'a','b'}));assertEquals(-1,StringUtils.indexOfAnyBut(""zzabyycdxx"",(char[])null));assertEquals(-1,StringUtils.indexOfAnyBut(""zzabyycdxx"",new char[0]));assertEquals(3,StringUtils.indexOfAnyBut(""zzabyycdxx"",new char[]{'z','a'}));assertEquals(0,StringUtils.indexOfAnyBut(""zzabyycdxx"",new char[]{'b','y'}));assertEquals(0,StringUtils.indexOfAnyBut(""ab"",new char[]{'z'}));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testIndexOfAnyBut_StringString",0,"public void testIndexOfAnyBut_StringString(){assertEquals(-1,StringUtils.indexOfAnyBut(null,(String)null));assertEquals(-1,StringUtils.indexOfAnyBut(null,""""));assertEquals(-1,StringUtils.indexOfAnyBut(null,""ab""));assertEquals(-1,StringUtils.indexOfAnyBut("""",(String)null));assertEquals(-1,StringUtils.indexOfAnyBut("""",""""));assertEquals(-1,StringUtils.indexOfAnyBut("""",""ab""));assertEquals(-1,StringUtils.indexOfAnyBut(""zzabyycdxx"",(String)null));assertEquals(-1,StringUtils.indexOfAnyBut(""zzabyycdxx"",""""));assertEquals(3,StringUtils.indexOfAnyBut(""zzabyycdxx"",""za""));assertEquals(0,StringUtils.indexOfAnyBut(""zzabyycdxx"",""by""));assertEquals(0,StringUtils.indexOfAnyBut(""ab"",""z""));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsOnly_String",0,"public void testContainsOnly_String(){String str1=""a"";String str2=""b"";String str3=""ab"";String chars1=""b"";String chars2=""a"";String chars3=""ab"";assertEquals(false,StringUtils.containsOnly(null,(String)null));assertEquals(false,StringUtils.containsOnly("""",(String)null));assertEquals(false,StringUtils.containsOnly(null,""""));assertEquals(false,StringUtils.containsOnly(str1,""""));assertEquals(true,StringUtils.containsOnly("""",""""));assertEquals(true,StringUtils.containsOnly("""",chars1));assertEquals(false,StringUtils.containsOnly(str1,chars1));assertEquals(true,StringUtils.containsOnly(str1,chars2));assertEquals(true,StringUtils.containsOnly(str1,chars3));assertEquals(true,StringUtils.containsOnly(str2,chars1));assertEquals(false,StringUtils.containsOnly(str2,chars2));assertEquals(true,StringUtils.containsOnly(str2,chars3));assertEquals(false,StringUtils.containsOnly(str3,chars1));assertEquals(false,StringUtils.containsOnly(str3,chars2));assertEquals(true,StringUtils.containsOnly(str3,chars3));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsOnly_Chararray",0,"public void testContainsOnly_Chararray(){String str1=""a"";String str2=""b"";String str3=""ab"";char[]chars1={'b'};char[]chars2={'a'};char[]chars3={'a','b'};char[]emptyChars=new char[0];assertEquals(false,StringUtils.containsOnly(null,(char[])null));assertEquals(false,StringUtils.containsOnly("""",(char[])null));assertEquals(false,StringUtils.containsOnly(null,emptyChars));assertEquals(false,StringUtils.containsOnly(str1,emptyChars));assertEquals(true,StringUtils.containsOnly("""",emptyChars));assertEquals(true,StringUtils.containsOnly("""",chars1));assertEquals(false,StringUtils.containsOnly(str1,chars1));assertEquals(true,StringUtils.containsOnly(str1,chars2));assertEquals(true,StringUtils.containsOnly(str1,chars3));assertEquals(true,StringUtils.containsOnly(str2,chars1));assertEquals(false,StringUtils.containsOnly(str2,chars2));assertEquals(true,StringUtils.containsOnly(str2,chars3));assertEquals(false,StringUtils.containsOnly(str3,chars1));assertEquals(false,StringUtils.containsOnly(str3,chars2));assertEquals(true,StringUtils.containsOnly(str3,chars3));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsNone_String",0,"public void testContainsNone_String(){String str1=""a"";String str2=""b"";String str3=""ab."";String chars1=""b"";String chars2=""."";String chars3=""cd"";assertEquals(true,StringUtils.containsNone(null,(String)null));assertEquals(true,StringUtils.containsNone("""",(String)null));assertEquals(true,StringUtils.containsNone(null,""""));assertEquals(true,StringUtils.containsNone(str1,""""));assertEquals(true,StringUtils.containsNone("""",""""));assertEquals(true,StringUtils.containsNone("""",chars1));assertEquals(true,StringUtils.containsNone(str1,chars1));assertEquals(true,StringUtils.containsNone(str1,chars2));assertEquals(true,StringUtils.containsNone(str1,chars3));assertEquals(false,StringUtils.containsNone(str2,chars1));assertEquals(true,StringUtils.containsNone(str2,chars2));assertEquals(true,StringUtils.containsNone(str2,chars3));assertEquals(false,StringUtils.containsNone(str3,chars1));assertEquals(false,StringUtils.containsNone(str3,chars2));assertEquals(true,StringUtils.containsNone(str3,chars3));}"
"org.apache.commons.lang.StringUtilsEqualsIndexOfTest.testContainsNone_Chararray",0,"public void testContainsNone_Chararray(){String str1=""a"";String str2=""b"";String str3=""ab."";char[]chars1={'b'};char[]chars2={'.'};char[]chars3={'c','d'};char[]emptyChars=new char[0];assertEquals(true,StringUtils.containsNone(null,(char[])null));assertEquals(true,StringUtils.containsNone("""",(char[])null));assertEquals(true,StringUtils.containsNone(null,emptyChars));assertEquals(true,StringUtils.containsNone(str1,emptyChars));assertEquals(true,StringUtils.containsNone("""",emptyChars));assertEquals(true,StringUtils.containsNone("""",chars1));assertEquals(true,StringUtils.containsNone(str1,chars1));assertEquals(true,StringUtils.containsNone(str1,chars2));assertEquals(true,StringUtils.containsNone(str1,chars3));assertEquals(false,StringUtils.containsNone(str2,chars1));assertEquals(true,StringUtils.containsNone(str2,chars2));assertEquals(true,StringUtils.containsNone(str2,chars3));assertEquals(false,StringUtils.containsNone(str3,chars1));assertEquals(false,StringUtils.containsNone(str3,chars2));assertEquals(true,StringUtils.containsNone(str3,chars3));}"
"org.apache.commons.lang.math.NumberRangeTest.testConstructor1",0,"/** * Tests non-exceptional conditions for the one argument constructor.*/public void testConstructor1(){NumberRange nr=new NumberRange(five);assertSame(five,nr.getMinimumNumber());assertSame(five,nr.getMaximumNumber());}"
"org.apache.commons.lang.math.NumberRangeTest.testConstructor1Exceptions",0,"/** * Tests exceptional conditions for the one argument constructor.*/public void testConstructor1Exceptions(){this.checkConstructorException(null);this.checkConstructorException(nonComparableNumber);this.checkConstructorException(new Float(Float.NaN));this.checkConstructorException(new Double(Double.NaN));}"
"org.apache.commons.lang.math.NumberRangeTest.testConstructor2",0,"/** * Tests non-exceptional conditions for the two argument constructor.*/public void testConstructor2(){NumberRange nr=new NumberRange(five,ten);assertSame(five,nr.getMinimumNumber());assertSame(ten,nr.getMaximumNumber());nr=new NumberRange(ten,five);assertSame(five,nr.getMinimumNumber());assertSame(ten,nr.getMaximumNumber());}"
"org.apache.commons.lang.math.NumberRangeTest.testConstructor2Exceptions",0,"/** * Tests exceptional conditions for the two argument constructor.*/public void testConstructor2Exceptions(){this.checkConstructorException(null,null);this.checkConstructorException(new Float(12.2f),new Double(12.2));this.checkConstructorException(new Float(Float.NaN),new Double(12.2));this.checkConstructorException(new Double(Double.NaN),new Double(12.2));this.checkConstructorException(new Double(12.2),new Double(Double.NaN));this.checkConstructorException(new Double(Double.NaN),new Double(Double.NaN));this.checkConstructorException(null,new Double(12.2));this.checkConstructorException(new Double(12.2),null);this.checkConstructorException(new Double(12.2f),new Float(12.2));this.checkConstructorException(new Double(Double.NaN),new Float(12.2));this.checkConstructorException(new Float(Float.NaN),new Float(12.2));this.checkConstructorException(new Float(12.2),new Float(Float.NaN));this.checkConstructorException(new Float(Float.NaN),new Float(Float.NaN));this.checkConstructorException(null,new Float(12.2));this.checkConstructorException(new Float(12.2),null);this.checkConstructorException(nonComparableNumber,nonComparableNumber);this.checkConstructorException(null,nonComparableNumber);this.checkConstructorException(nonComparableNumber,null);this.checkConstructorException(new Float(12.2),nonComparableNumber);this.checkConstructorException(nonComparableNumber,new Float(12.2));}"
"org.apache.commons.lang.math.NumberRangeTest.testContainsLongBig",0,"public void testContainsLongBig(){NumberRange big=new NumberRange(new Long(Long.MAX_VALUE),new Long(Long.MAX_VALUE - 2));assertEquals(true,big.containsLong(Long.MAX_VALUE - 1));assertEquals(false,big.containsLong(Long.MAX_VALUE - 3));}"
"org.apache.commons.lang.math.NumberRangeTest.testContainsNumber",0,"public void testContainsNumber(){assertEquals(false,tenToTwenty.containsNumber(null));assertEquals(false,tenToTwenty.containsNumber(five));assertEquals(true,tenToTwenty.containsNumber(ten));assertEquals(true,tenToTwenty.containsNumber(fifteen));assertEquals(true,tenToTwenty.containsNumber(twenty));assertEquals(false,tenToTwenty.containsNumber(twentyFive));try {tenToTwenty.containsNumber(long21);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.text.StrLookupTest.testNoneLookup",0,"public void testNoneLookup(){assertEquals(null,StrLookup.noneLookup().lookup(null));assertEquals(null,StrLookup.noneLookup().lookup(""""));assertEquals(null,StrLookup.noneLookup().lookup(""any""));}"
"org.apache.commons.lang.text.StrLookupTest.testSystemProperiesLookup",0,"public void testSystemProperiesLookup(){assertEquals(System.getProperty(""os.name""),StrLookup.systemPropertiesLookup().lookup(""os.name""));assertEquals(null,StrLookup.systemPropertiesLookup().lookup(""""));assertEquals(null,StrLookup.systemPropertiesLookup().lookup(""other""));try {StrLookup.systemPropertiesLookup().lookup(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.text.StrLookupTest.testMapLookup",0,"public void testMapLookup(){Map map=new HashMap();map.put(""key"",""value"");map.put(""number"",new Integer(2));assertEquals(""value"",StrLookup.mapLookup(map).lookup(""key""));assertEquals(""2"",StrLookup.mapLookup(map).lookup(""number""));assertEquals(null,StrLookup.mapLookup(map).lookup(null));assertEquals(null,StrLookup.mapLookup(map).lookup(""""));assertEquals(null,StrLookup.mapLookup(map).lookup(""other""));}"
"org.apache.commons.lang.text.StrLookupTest.testMapLookup_nullMap",0,"public void testMapLookup_nullMap(){Map map=null;assertEquals(null,StrLookup.mapLookup(map).lookup(null));assertEquals(null,StrLookup.mapLookup(map).lookup(""""));assertEquals(null,StrLookup.mapLookup(map).lookup(""any""));}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new DateFormatUtils());Constructor[]cons=DateFormatUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(DateFormatUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(DateFormatUtils.class.getModifiers()));}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testFormat",0,"public void testFormat(){Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));c.set(2005,0,1,12,0,0);c.setTimeZone(TimeZone.getDefault());StringBuffer buffer=new StringBuffer();int year=c.get(Calendar.YEAR);int month=c.get(Calendar.MONTH)+ 1;int day=c.get(Calendar.DAY_OF_MONTH);int hour=c.get(Calendar.HOUR_OF_DAY);buffer.append(year);buffer.append(month);buffer.append(day);buffer.append(hour);assertEquals(buffer.toString(),DateFormatUtils.format(c.getTime(),""yyyyMdH""));assertEquals(buffer.toString(),DateFormatUtils.format(c.getTime().getTime(),""yyyyMdH""));assertEquals(buffer.toString(),DateFormatUtils.format(c.getTime(),""yyyyMdH"",Locale.US));assertEquals(buffer.toString(),DateFormatUtils.format(c.getTime().getTime(),""yyyyMdH"",Locale.US));}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testFormatUTC",0,"public void testFormatUTC(){Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));c.set(2005,0,1,12,0,0);assertEquals(""2005-01-01T12:00:00"",DateFormatUtils.formatUTC(c.getTime(),DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));assertEquals(""2005-01-01T12:00:00"",DateFormatUtils.formatUTC(c.getTime().getTime(),DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));assertEquals(""2005-01-01T12:00:00"",DateFormatUtils.formatUTC(c.getTime(),DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(),Locale.US));assertEquals(""2005-01-01T12:00:00"",DateFormatUtils.formatUTC(c.getTime().getTime(),DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(),Locale.US));}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testDateTimeISO",0,"public void testDateTimeISO(){TimeZone timeZone=TimeZone.getTimeZone(""GMT-3"");Calendar cal=Calendar.getInstance(timeZone);cal.set(2002,1,23,9,11,12);String text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23T09:11:12"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23T09:11:12"",text);text=DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);assertEquals(""2002-02-23T09:11:12"",text);text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23T09:11:12-03:00"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23T09:11:12-03:00"",text);text=DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);assertEquals(""2002-02-23T09:11:12-03:00"",text);}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testDateISO",0,"public void testDateISO(){TimeZone timeZone=TimeZone.getTimeZone(""GMT-3"");Calendar cal=Calendar.getInstance(timeZone);cal.set(2002,1,23,10,11,12);String text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_DATE_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_DATE_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23"",text);text=DateFormatUtils.ISO_DATE_FORMAT.format(cal);assertEquals(""2002-02-23"",text);text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23-03:00"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""2002-02-23-03:00"",text);text=DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);assertEquals(""2002-02-23-03:00"",text);}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testTimeISO",0,"public void testTimeISO(){TimeZone timeZone=TimeZone.getTimeZone(""GMT-3"");Calendar cal=Calendar.getInstance(timeZone);cal.set(2002,1,23,10,11,12);String text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_TIME_FORMAT.getPattern(),timeZone);assertEquals(""T10:11:12"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_TIME_FORMAT.getPattern(),timeZone);assertEquals(""T10:11:12"",text);text=DateFormatUtils.ISO_TIME_FORMAT.format(cal);assertEquals(""T10:11:12"",text);text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""T10:11:12-03:00"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""T10:11:12-03:00"",text);text=DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);assertEquals(""T10:11:12-03:00"",text);}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testTimeNoTISO",0,"public void testTimeNoTISO(){TimeZone timeZone=TimeZone.getTimeZone(""GMT-3"");Calendar cal=Calendar.getInstance(timeZone);cal.set(2002,1,23,10,11,12);String text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(),timeZone);assertEquals(""10:11:12"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(),timeZone);assertEquals(""10:11:12"",text);text=DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);assertEquals(""10:11:12"",text);text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""10:11:12-03:00"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(),timeZone);assertEquals(""10:11:12-03:00"",text);text=DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);assertEquals(""10:11:12-03:00"",text);}"
"org.apache.commons.lang.time.DateFormatUtilsTest.testSMTP",0,"public void testSMTP(){TimeZone timeZone=TimeZone.getTimeZone(""GMT-3"");Calendar cal=Calendar.getInstance(timeZone);cal.set(2003,5,8,10,11,12);String text=DateFormatUtils.format(cal.getTime(),DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),timeZone,DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());assertEquals(""Sun,08 Jun 2003 10:11:12 -0300"",text);text=DateFormatUtils.format(cal.getTime().getTime(),DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),timeZone,DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());assertEquals(""Sun,08 Jun 2003 10:11:12 -0300"",text);text=DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);assertEquals(""Sun,08 Jun 2003 10:11:12 -0300"",text);text=DateFormatUtils.formatUTC(cal.getTime().getTime(),DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());assertEquals(""Sun,08 Jun 2003 13:11:12 +0000"",text);}"
"org.apache.commons.lang.math.FractionTest.testConstants",0,"public void testConstants(){assertEquals(0,Fraction.ZERO.getNumerator());assertEquals(1,Fraction.ZERO.getDenominator());assertEquals(1,Fraction.ONE.getNumerator());assertEquals(1,Fraction.ONE.getDenominator());assertEquals(1,Fraction.ONE_HALF.getNumerator());assertEquals(2,Fraction.ONE_HALF.getDenominator());assertEquals(1,Fraction.ONE_THIRD.getNumerator());assertEquals(3,Fraction.ONE_THIRD.getDenominator());assertEquals(2,Fraction.TWO_THIRDS.getNumerator());assertEquals(3,Fraction.TWO_THIRDS.getDenominator());assertEquals(1,Fraction.ONE_QUARTER.getNumerator());assertEquals(4,Fraction.ONE_QUARTER.getDenominator());assertEquals(2,Fraction.TWO_QUARTERS.getNumerator());assertEquals(4,Fraction.TWO_QUARTERS.getDenominator());assertEquals(3,Fraction.THREE_QUARTERS.getNumerator());assertEquals(4,Fraction.THREE_QUARTERS.getDenominator());assertEquals(1,Fraction.ONE_FIFTH.getNumerator());assertEquals(5,Fraction.ONE_FIFTH.getDenominator());assertEquals(2,Fraction.TWO_FIFTHS.getNumerator());assertEquals(5,Fraction.TWO_FIFTHS.getDenominator());assertEquals(3,Fraction.THREE_FIFTHS.getNumerator());assertEquals(5,Fraction.THREE_FIFTHS.getDenominator());assertEquals(4,Fraction.FOUR_FIFTHS.getNumerator());assertEquals(5,Fraction.FOUR_FIFTHS.getDenominator());}"
"org.apache.commons.lang.math.FractionTest.testFactory_int_int",0,"public void testFactory_int_int(){Fraction f=null;f=Fraction.getFraction(0,1);assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(0,2);assertEquals(0,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(1,1);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(2,1);assertEquals(2,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(23,345);assertEquals(23,f.getNumerator());assertEquals(345,f.getDenominator());f=Fraction.getFraction(22,7);assertEquals(22,f.getNumerator());assertEquals(7,f.getDenominator());f=Fraction.getFraction(-6,10);assertEquals(-6,f.getNumerator());assertEquals(10,f.getDenominator());f=Fraction.getFraction(6,-10);assertEquals(-6,f.getNumerator());assertEquals(10,f.getDenominator());f=Fraction.getFraction(-6,-10);assertEquals(6,f.getNumerator());assertEquals(10,f.getDenominator());try {f=Fraction.getFraction(1,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(2,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-3,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(4,Integer.MIN_VALUE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(1,Integer.MIN_VALUE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testFactory_int_int_int",0,"public void testFactory_int_int_int(){Fraction f=null;f=Fraction.getFraction(0,0,2);assertEquals(0,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(2,0,2);assertEquals(4,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(0,1,2);assertEquals(1,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(1,1,2);assertEquals(3,f.getNumerator());assertEquals(2,f.getDenominator());try {f=Fraction.getFraction(1,-6,-10);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(1,-6,-10);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(1,-6,-10);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(-1,6,10);assertEquals(-16,f.getNumerator());assertEquals(10,f.getDenominator());try {f=Fraction.getFraction(-1,-6,10);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-1,6,-10);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-1,-6,-10);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(0,1,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(1,2,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-1,-3,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(Integer.MAX_VALUE,1,2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-Integer.MAX_VALUE,1,2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(-1,0,Integer.MAX_VALUE);assertEquals(-Integer.MAX_VALUE,f.getNumerator());assertEquals(Integer.MAX_VALUE,f.getDenominator());try {f=Fraction.getFraction(0,4,Integer.MIN_VALUE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(1,1,Integer.MAX_VALUE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-1,2,Integer.MAX_VALUE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testReducedFactory_int_int",0,"public void testReducedFactory_int_int(){Fraction f=null;f=Fraction.getReducedFraction(0,1);assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getReducedFraction(1,1);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getReducedFraction(2,1);assertEquals(2,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getReducedFraction(22,7);assertEquals(22,f.getNumerator());assertEquals(7,f.getDenominator());f=Fraction.getReducedFraction(-6,10);assertEquals(-3,f.getNumerator());assertEquals(5,f.getDenominator());f=Fraction.getReducedFraction(6,-10);assertEquals(-3,f.getNumerator());assertEquals(5,f.getDenominator());f=Fraction.getReducedFraction(-6,-10);assertEquals(3,f.getNumerator());assertEquals(5,f.getDenominator());try {f=Fraction.getReducedFraction(1,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getReducedFraction(2,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getReducedFraction(-3,0);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getReducedFraction(0,2);assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getReducedFraction(2,2);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getReducedFraction(2,4);assertEquals(1,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getReducedFraction(15,10);assertEquals(3,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getReducedFraction(121,22);assertEquals(11,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getReducedFraction(-2,Integer.MIN_VALUE);assertEquals(1,f.getNumerator());assertEquals(-(Integer.MIN_VALUE / 2),f.getDenominator());try {f=Fraction.getReducedFraction(-7,Integer.MIN_VALUE);fail(""Expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testFactory_double",0,"public void testFactory_double(){Fraction f=null;try {f=Fraction.getFraction(Double.NaN);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(Double.POSITIVE_INFINITY);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(Double.NEGATIVE_INFINITY);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction((double)Integer.MAX_VALUE + 1);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(0.0d);assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(1.0d);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(0.5d);assertEquals(1,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(-0.875d);assertEquals(-7,f.getNumerator());assertEquals(8,f.getDenominator());f=Fraction.getFraction(1.25d);assertEquals(5,f.getNumerator());assertEquals(4,f.getDenominator());f=Fraction.getFraction(0.66666d);assertEquals(2,f.getNumerator());assertEquals(3,f.getDenominator());f=Fraction.getFraction(1.0d / 10001d);assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());Fraction f2=null;int remainder,number1,number2=0;for (int i=1;i <= 100;i++){for (int j=1;j <= i;j++){try {f=Fraction.getFraction((double)j / (double)i);}catch(ArithmeticException ex){System.err.println(j + "" "" + i);throw ex;}f2=Fraction.getReducedFraction(j,i);assertEquals(f2.getNumerator(),f.getNumerator());assertEquals(f2.getDenominator(),f.getDenominator());}}for (int i=1001;i <= 10000;i+=SKIP){for (int j=1;j <= i;j++){try {f=Fraction.getFraction((double)j / (double)i);}catch(ArithmeticException ex){System.err.println(j + "" "" + i);throw ex;}f2=Fraction.getReducedFraction(j,i);assertEquals(f2.getNumerator(),f.getNumerator());assertEquals(f2.getDenominator(),f.getDenominator());}}}"
"org.apache.commons.lang.math.FractionTest.testFactory_String",0,"public void testFactory_String(){try {Fraction.getFraction(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.FractionTest.testFactory_String_double",0,"public void testFactory_String_double(){Fraction f=null;f=Fraction.getFraction(""0.0"");assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(""0.2"");assertEquals(1,f.getNumerator());assertEquals(5,f.getDenominator());f=Fraction.getFraction(""0.5"");assertEquals(1,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(""0.66666"");assertEquals(2,f.getNumerator());assertEquals(3,f.getDenominator());try {f=Fraction.getFraction(""2.3R"");fail(""Expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""2147483648"");fail(""Expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""."");fail(""Expecting NumberFormatException"");}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.FractionTest.testFactory_String_proper",0,"public void testFactory_String_proper(){Fraction f=null;f=Fraction.getFraction(""0 0/1"");assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(""1 1/5"");assertEquals(6,f.getNumerator());assertEquals(5,f.getDenominator());f=Fraction.getFraction(""7 1/2"");assertEquals(15,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(""1 2/4"");assertEquals(6,f.getNumerator());assertEquals(4,f.getDenominator());f=Fraction.getFraction(""-7 1/2"");assertEquals(-15,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(""-1 2/4"");assertEquals(-6,f.getNumerator());assertEquals(4,f.getDenominator());try {f=Fraction.getFraction(""2 3"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""a 3"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""2 b/4"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""2 "");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction("" 3"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction("" "");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.FractionTest.testFactory_String_improper",0,"public void testFactory_String_improper(){Fraction f=null;f=Fraction.getFraction(""0/1"");assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(""1/5"");assertEquals(1,f.getNumerator());assertEquals(5,f.getDenominator());f=Fraction.getFraction(""1/2"");assertEquals(1,f.getNumerator());assertEquals(2,f.getDenominator());f=Fraction.getFraction(""2/3"");assertEquals(2,f.getNumerator());assertEquals(3,f.getDenominator());f=Fraction.getFraction(""7/3"");assertEquals(7,f.getNumerator());assertEquals(3,f.getDenominator());f=Fraction.getFraction(""2/4"");assertEquals(2,f.getNumerator());assertEquals(4,f.getDenominator());try {f=Fraction.getFraction(""2/d"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""2e/3"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""2/"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}try {f=Fraction.getFraction(""/"");fail(""expecting NumberFormatException"");}catch(NumberFormatException ex){}}"
"org.apache.commons.lang.math.FractionTest.testGets",0,"public void testGets(){Fraction f=null;f=Fraction.getFraction(3,5,6);assertEquals(23,f.getNumerator());assertEquals(3,f.getProperWhole());assertEquals(5,f.getProperNumerator());assertEquals(6,f.getDenominator());f=Fraction.getFraction(-3,5,6);assertEquals(-23,f.getNumerator());assertEquals(-3,f.getProperWhole());assertEquals(5,f.getProperNumerator());assertEquals(6,f.getDenominator());f=Fraction.getFraction(Integer.MIN_VALUE,0,1);assertEquals(Integer.MIN_VALUE,f.getNumerator());assertEquals(Integer.MIN_VALUE,f.getProperWhole());assertEquals(0,f.getProperNumerator());assertEquals(1,f.getDenominator());}"
"org.apache.commons.lang.math.FractionTest.testConversions",0,"public void testConversions(){Fraction f=null;f=Fraction.getFraction(3,7,8);assertEquals(3,f.intValue());assertEquals(3L,f.longValue());assertEquals(3.875f,f.floatValue(),0.00001f);assertEquals(3.875d,f.doubleValue(),0.00001d);}"
"org.apache.commons.lang.math.FractionTest.testReduce",0,"public void testReduce(){Fraction f=null;f=Fraction.getFraction(50,75);Fraction result=f.reduce();assertEquals(2,result.getNumerator());assertEquals(3,result.getDenominator());f=Fraction.getFraction(-2,-3);result=f.reduce();assertEquals(2,result.getNumerator());assertEquals(3,result.getDenominator());f=Fraction.getFraction(2,-3);result=f.reduce();assertEquals(-2,result.getNumerator());assertEquals(3,result.getDenominator());f=Fraction.getFraction(-2,3);result=f.reduce();assertEquals(-2,result.getNumerator());assertEquals(3,result.getDenominator());assertSame(f,result);f=Fraction.getFraction(2,3);result=f.reduce();assertEquals(2,result.getNumerator());assertEquals(3,result.getDenominator());assertSame(f,result);}"
"org.apache.commons.lang.math.FractionTest.testInvert",0,"public void testInvert(){Fraction f=null;f=Fraction.getFraction(50,75);f=f.invert();assertEquals(75,f.getNumerator());assertEquals(50,f.getDenominator());f=Fraction.getFraction(4,3);f=f.invert();assertEquals(3,f.getNumerator());assertEquals(4,f.getDenominator());f=Fraction.getFraction(-15,47);f=f.invert();assertEquals(-47,f.getNumerator());assertEquals(15,f.getDenominator());f=Fraction.getFraction(0,3);try {f=f.invert();fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(Integer.MIN_VALUE,1);try {f=f.invert();fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(Integer.MAX_VALUE,1);f=f.invert();assertEquals(1,f.getNumerator());assertEquals(Integer.MAX_VALUE,f.getDenominator());}"
"org.apache.commons.lang.math.FractionTest.testNegate",0,"public void testNegate(){Fraction f=null;f=Fraction.getFraction(50,75);f=f.negate();assertEquals(-50,f.getNumerator());assertEquals(75,f.getDenominator());f=Fraction.getFraction(-50,75);f=f.negate();assertEquals(50,f.getNumerator());assertEquals(75,f.getDenominator());f=Fraction.getFraction(Integer.MAX_VALUE - 1,Integer.MAX_VALUE);f=f.negate();assertEquals(Integer.MIN_VALUE + 2,f.getNumerator());assertEquals(Integer.MAX_VALUE,f.getDenominator());f=Fraction.getFraction(Integer.MIN_VALUE,1);try {f=f.negate();fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testAbs",0,"public void testAbs(){Fraction f=null;f=Fraction.getFraction(50,75);f=f.abs();assertEquals(50,f.getNumerator());assertEquals(75,f.getDenominator());f=Fraction.getFraction(-50,75);f=f.abs();assertEquals(50,f.getNumerator());assertEquals(75,f.getDenominator());f=Fraction.getFraction(Integer.MAX_VALUE,1);f=f.abs();assertEquals(Integer.MAX_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(Integer.MAX_VALUE,-1);f=f.abs();assertEquals(Integer.MAX_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());f=Fraction.getFraction(Integer.MIN_VALUE,1);try {f=f.abs();fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testPow",0,"public void testPow(){Fraction f=null;f=Fraction.getFraction(3,5);assertEquals(Fraction.ONE,f.pow(0));f=Fraction.getFraction(3,5);assertSame(f,f.pow(1));assertEquals(f,f.pow(1));f=Fraction.getFraction(3,5);f=f.pow(2);assertEquals(9,f.getNumerator());assertEquals(25,f.getDenominator());f=Fraction.getFraction(3,5);f=f.pow(3);assertEquals(27,f.getNumerator());assertEquals(125,f.getDenominator());f=Fraction.getFraction(3,5);f=f.pow(-1);assertEquals(5,f.getNumerator());assertEquals(3,f.getDenominator());f=Fraction.getFraction(3,5);f=f.pow(-2);assertEquals(25,f.getNumerator());assertEquals(9,f.getDenominator());f=Fraction.getFraction(6,10);assertEquals(Fraction.ONE,f.pow(0));f=Fraction.getFraction(6,10);assertEquals(f,f.pow(1));assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));f=Fraction.getFraction(6,10);f=f.pow(2);assertEquals(9,f.getNumerator());assertEquals(25,f.getDenominator());f=Fraction.getFraction(6,10);f=f.pow(3);assertEquals(27,f.getNumerator());assertEquals(125,f.getDenominator());f=Fraction.getFraction(6,10);f=f.pow(-1);assertEquals(10,f.getNumerator());assertEquals(6,f.getDenominator());f=Fraction.getFraction(6,10);f=f.pow(-2);assertEquals(25,f.getNumerator());assertEquals(9,f.getDenominator());f=Fraction.getFraction(0,1231);f=f.pow(1);assertTrue(0 == f.compareTo(Fraction.ZERO));assertEquals(0,f.getNumerator());assertEquals(1231,f.getDenominator());f=f.pow(2);assertTrue(0 == f.compareTo(Fraction.ZERO));assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());try {f=f.pow(-1);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=f.pow(Integer.MIN_VALUE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(1,1);f=f.pow(0);assertEquals(f,Fraction.ONE);f=f.pow(1);assertEquals(f,Fraction.ONE);f=f.pow(-1);assertEquals(f,Fraction.ONE);f=f.pow(Integer.MAX_VALUE);assertEquals(f,Fraction.ONE);f=f.pow(Integer.MIN_VALUE);assertEquals(f,Fraction.ONE);f=Fraction.getFraction(Integer.MAX_VALUE,1);try {f=f.pow(2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(Integer.MIN_VALUE,1);try {f=f.pow(3);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f=Fraction.getFraction(65536,1);try {f=f.pow(2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testAdd",0,"public void testAdd(){Fraction f=null;Fraction f1=null;Fraction f2=null;f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(1,5);f=f1.add(f2);assertEquals(4,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(2,5);f=f1.add(f2);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(3,5);f=f1.add(f2);assertEquals(6,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(-4,5);f=f1.add(f2);assertEquals(-1,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(Integer.MAX_VALUE - 1,1);f2=Fraction.ONE;f=f1.add(f2);assertEquals(Integer.MAX_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(1,2);f=f1.add(f2);assertEquals(11,f.getNumerator());assertEquals(10,f.getDenominator());f1=Fraction.getFraction(3,8);f2=Fraction.getFraction(1,6);f=f1.add(f2);assertEquals(13,f.getNumerator());assertEquals(24,f.getDenominator());f1=Fraction.getFraction(0,5);f2=Fraction.getFraction(1,5);f=f1.add(f2);assertSame(f2,f);f=f2.add(f1);assertSame(f2,f);f1=Fraction.getFraction(-1,13 * 13 * 2* 2);f2=Fraction.getFraction(-2,13 * 17 * 2);f=f1.add(f2);assertEquals(13 * 13 * 17* 2* 2,f.getDenominator());assertEquals(-17 - 2 * 13 * 2,f.getNumerator());try {f.add(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}f1=Fraction.getFraction(1,32768 * 3);f2=Fraction.getFraction(1,59049);f=f1.add(f2);assertEquals(52451,f.getNumerator());assertEquals(1934917632,f.getDenominator());f1=Fraction.getFraction(Integer.MIN_VALUE,3);f2=Fraction.ONE_THIRD;f=f1.add(f2);assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());assertEquals(3,f.getDenominator());f1=Fraction.getFraction(Integer.MAX_VALUE - 1,1);f2=Fraction.ONE;f=f1.add(f2);assertEquals(Integer.MAX_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());try {f=f.add(Fraction.ONE);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}f1=Fraction.getFraction(Integer.MIN_VALUE,5);f2=Fraction.getFraction(-1,5);try {f=f1.add(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-Integer.MAX_VALUE,1);f=f.add(f);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(-Integer.MAX_VALUE,1);f=f.add(f);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=Fraction.getFraction(3,327680);f2=Fraction.getFraction(2,59049);try {f=f1.add(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testSubtract",0,"public void testSubtract(){Fraction f=null;Fraction f1=null;Fraction f2=null;f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(1,5);f=f1.subtract(f2);assertEquals(2,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(7,5);f2=Fraction.getFraction(2,5);f=f1.subtract(f2);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(3,5);f=f1.subtract(f2);assertEquals(0,f.getNumerator());assertEquals(1,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(-4,5);f=f1.subtract(f2);assertEquals(7,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(0,5);f2=Fraction.getFraction(4,5);f=f1.subtract(f2);assertEquals(-4,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(0,5);f2=Fraction.getFraction(-4,5);f=f1.subtract(f2);assertEquals(4,f.getNumerator());assertEquals(5,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(1,2);f=f1.subtract(f2);assertEquals(1,f.getNumerator());assertEquals(10,f.getDenominator());f1=Fraction.getFraction(0,5);f2=Fraction.getFraction(1,5);f=f2.subtract(f1);assertSame(f2,f);try {f.subtract(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}f1=Fraction.getFraction(1,32768 * 3);f2=Fraction.getFraction(1,59049);f=f1.subtract(f2);assertEquals(-13085,f.getNumerator());assertEquals(1934917632,f.getDenominator());f1=Fraction.getFraction(Integer.MIN_VALUE,3);f2=Fraction.ONE_THIRD.negate();f=f1.subtract(f2);assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());assertEquals(3,f.getDenominator());f1=Fraction.getFraction(Integer.MAX_VALUE,1);f2=Fraction.ONE;f=f1.subtract(f2);assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());assertEquals(1,f.getDenominator());try {f1=Fraction.getFraction(1,Integer.MAX_VALUE);f2=Fraction.getFraction(1,Integer.MAX_VALUE - 1);f=f1.subtract(f2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=Fraction.getFraction(Integer.MIN_VALUE,5);f2=Fraction.getFraction(1,5);try {f=f1.subtract(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}try {f=Fraction.getFraction(Integer.MIN_VALUE,1);f=f.subtract(Fraction.ONE);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f=Fraction.getFraction(Integer.MAX_VALUE,1);f=f.subtract(Fraction.ONE.negate());fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=Fraction.getFraction(3,327680);f2=Fraction.getFraction(2,59049);try {f=f1.subtract(f2);fail(""expecting ArithmeticException but got: "" + f.toString());}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testMultiply",0,"public void testMultiply(){Fraction f=null;Fraction f1=null;Fraction f2=null;f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(2,5);f=f1.multiplyBy(f2);assertEquals(6,f.getNumerator());assertEquals(25,f.getDenominator());f1=Fraction.getFraction(6,10);f2=Fraction.getFraction(6,10);f=f1.multiplyBy(f2);assertEquals(9,f.getNumerator());assertEquals(25,f.getDenominator());f=f.multiplyBy(f2);assertEquals(27,f.getNumerator());assertEquals(125,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(-2,5);f=f1.multiplyBy(f2);assertEquals(-6,f.getNumerator());assertEquals(25,f.getDenominator());f1=Fraction.getFraction(-3,5);f2=Fraction.getFraction(-2,5);f=f1.multiplyBy(f2);assertEquals(6,f.getNumerator());assertEquals(25,f.getDenominator());f1=Fraction.getFraction(0,5);f2=Fraction.getFraction(2,7);f=f1.multiplyBy(f2);assertSame(Fraction.ZERO,f);f1=Fraction.getFraction(2,7);f2=Fraction.ONE;f=f1.multiplyBy(f2);assertEquals(2,f.getNumerator());assertEquals(7,f.getDenominator());f1=Fraction.getFraction(Integer.MAX_VALUE,1);f2=Fraction.getFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f=f1.multiplyBy(f2);assertEquals(Integer.MIN_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());try {f.multiplyBy(null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {f1=Fraction.getFraction(1,Integer.MAX_VALUE);f=f1.multiplyBy(f1);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f1=Fraction.getFraction(1,-Integer.MAX_VALUE);f=f1.multiplyBy(f1);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testDivide",0,"public void testDivide(){Fraction f=null;Fraction f1=null;Fraction f2=null;f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(2,5);f=f1.divideBy(f2);assertEquals(3,f.getNumerator());assertEquals(2,f.getDenominator());f1=Fraction.getFraction(3,5);f2=Fraction.ZERO;try {f=f1.divideBy(f2);fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}f1=Fraction.getFraction(0,5);f2=Fraction.getFraction(2,7);f=f1.divideBy(f2);assertSame(Fraction.ZERO,f);f1=Fraction.getFraction(2,7);f2=Fraction.ONE;f=f1.divideBy(f2);assertEquals(2,f.getNumerator());assertEquals(7,f.getDenominator());f1=Fraction.getFraction(1,Integer.MAX_VALUE);f=f1.divideBy(f1);assertEquals(1,f.getNumerator());assertEquals(1,f.getDenominator());f1=Fraction.getFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f2=Fraction.getFraction(1,Integer.MAX_VALUE);f=f1.divideBy(f2);assertEquals(Integer.MIN_VALUE,f.getNumerator());assertEquals(1,f.getDenominator());try {f.divideBy(null);fail(""IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {f1=Fraction.getFraction(1,Integer.MAX_VALUE);f=f1.divideBy(f1.invert());fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}try {f1=Fraction.getFraction(1,-Integer.MAX_VALUE);f=f1.divideBy(f1.invert());fail(""expecting ArithmeticException"");}catch(ArithmeticException ex){}}"
"org.apache.commons.lang.math.FractionTest.testEquals",0,"public void testEquals(){Fraction f1=null;Fraction f2=null;f1=Fraction.getFraction(3,5);assertEquals(false,f1.equals(null));assertEquals(false,f1.equals(new Object()));assertEquals(false,f1.equals(new Integer(6)));f1=Fraction.getFraction(3,5);f2=Fraction.getFraction(2,5);assertEquals(false,f1.equals(f2));assertEquals(true,f1.equals(f1));assertEquals(true,f2.equals(f2));f2=Fraction.getFraction(3,5);assertEquals(true,f1.equals(f2));f2=Fraction.getFraction(6,10);assertEquals(false,f1.equals(f2));}"
"org.apache.commons.lang.math.FractionTest.testHashCode",0,"public void testHashCode(){Fraction f1=Fraction.getFraction(3,5);Fraction f2=Fraction.getFraction(3,5);assertTrue(f1.hashCode()== f2.hashCode());f2=Fraction.getFraction(2,5);assertTrue(f1.hashCode()!= f2.hashCode());f2=Fraction.getFraction(6,10);assertTrue(f1.hashCode()!= f2.hashCode());}"
"org.apache.commons.lang.math.FractionTest.testCompareTo",0,"public void testCompareTo(){Fraction f1=null;Fraction f2=null;f1=Fraction.getFraction(3,5);assertTrue(f1.compareTo(f1)== 0);try {f1.compareTo(null);fail(""expecting NullPointerException"");}catch(NullPointerException ex){}try {f1.compareTo(new Object());fail(""expecting ClassCastException"");}catch(ClassCastException ex){}f2=Fraction.getFraction(2,5);assertTrue(f1.compareTo(f2)> 0);assertTrue(f2.compareTo(f2)== 0);f2=Fraction.getFraction(4,5);assertTrue(f1.compareTo(f2)< 0);assertTrue(f2.compareTo(f2)== 0);f2=Fraction.getFraction(3,5);assertTrue(f1.compareTo(f2)== 0);assertTrue(f2.compareTo(f2)== 0);f2=Fraction.getFraction(6,10);assertTrue(f1.compareTo(f2)== 0);assertTrue(f2.compareTo(f2)== 0);f2=Fraction.getFraction(-1,1,Integer.MAX_VALUE);assertTrue(f1.compareTo(f2)> 0);assertTrue(f2.compareTo(f2)== 0);}"
"org.apache.commons.lang.math.FractionTest.testToString",0,"public void testToString(){Fraction f=null;f=Fraction.getFraction(3,5);String str=f.toString();assertEquals(""3/5"",str);assertSame(str,f.toString());f=Fraction.getFraction(7,5);assertEquals(""7/5"",f.toString());f=Fraction.getFraction(4,2);assertEquals(""4/2"",f.toString());f=Fraction.getFraction(0,2);assertEquals(""0/2"",f.toString());f=Fraction.getFraction(2,2);assertEquals(""2/2"",f.toString());f=Fraction.getFraction(Integer.MIN_VALUE,0,1);assertEquals(""-2147483648/1"",f.toString());f=Fraction.getFraction(-1,1,Integer.MAX_VALUE);assertEquals(""-2147483648/2147483647"",f.toString());}"
"org.apache.commons.lang.math.FractionTest.testToProperString",0,"public void testToProperString(){Fraction f=null;f=Fraction.getFraction(3,5);String str=f.toProperString();assertEquals(""3/5"",str);assertSame(str,f.toProperString());f=Fraction.getFraction(7,5);assertEquals(""1 2/5"",f.toProperString());f=Fraction.getFraction(14,10);assertEquals(""1 4/10"",f.toProperString());f=Fraction.getFraction(4,2);assertEquals(""2"",f.toProperString());f=Fraction.getFraction(0,2);assertEquals(""0"",f.toProperString());f=Fraction.getFraction(2,2);assertEquals(""1"",f.toProperString());f=Fraction.getFraction(-7,5);assertEquals(""-1 2/5"",f.toProperString());f=Fraction.getFraction(Integer.MIN_VALUE,0,1);assertEquals(""-2147483648"",f.toProperString());f=Fraction.getFraction(-1,1,Integer.MAX_VALUE);assertEquals(""-1 1/2147483647"",f.toProperString());assertEquals(""-1"",Fraction.getFraction(-1).toProperString());}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceSimple",0,"/** * Tests simple key replace.*/public void testReplaceSimple(){doTestReplace(""The quick brown fox jumps over the lazy dog."",""The ${animal}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceSolo",0,"/** * Tests simple key replace.*/public void testReplaceSolo(){doTestReplace(""quick brown fox"",""${animal}"",false);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNoVariables",0,"/** * Tests replace with no variables.*/public void testReplaceNoVariables(){doTestNoReplace(""The balloon arrived."");}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNull",0,"/** * Tests replace with null.*/public void testReplaceNull(){doTestNoReplace(null);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceEmpty",0,"/** * Tests replace with null.*/public void testReplaceEmpty(){doTestNoReplace("""");}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceChangedMap",0,"/** * Tests key replace changing map after initialization (not recommended).*/public void testReplaceChangedMap(){StrSubstitutor sub=new StrSubstitutor(values);values.put(""target"",""moon"");assertEquals(""The quick brown fox jumps over the moon."",sub.replace(""The ${animal}jumps over the ${target}.""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceUnknownKey",0,"/** * Tests unknown key replace.*/public void testReplaceUnknownKey(){doTestReplace(""The ${person}jumps over the lazy dog."",""The ${person}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceAdjacentAtStart",0,"/** * Tests adjacent keys.*/public void testReplaceAdjacentAtStart(){values.put(""code"",""GBP"");values.put(""amount"",""12.50"");StrSubstitutor sub=new StrSubstitutor(values);assertEquals(""GBP12.50 charged"",sub.replace(""${code}${amount}charged""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceAdjacentAtEnd",0,"/** * Tests adjacent keys.*/public void testReplaceAdjacentAtEnd(){values.put(""code"",""GBP"");values.put(""amount"",""12.50"");StrSubstitutor sub=new StrSubstitutor(values);assertEquals(""Amount is GBP12.50"",sub.replace(""Amount is ${code}${amount}""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceRecursive",0,"/** * Tests simple recursive replace.*/public void testReplaceRecursive(){values.put(""animal"",""${critter}"");values.put(""target"",""${pet}"");values.put(""pet"",""${petCharacteristic}dog"");values.put(""petCharacteristic"",""lazy"");values.put(""critter"",""${critterSpeed}${critterColor}${critterType}"");values.put(""critterSpeed"",""quick"");values.put(""critterColor"",""brown"");values.put(""critterType"",""fox"");doTestReplace(""The quick brown fox jumps over the lazy dog."",""The ${animal}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceEscaping",0,"/** * Tests escaping.*/public void testReplaceEscaping(){doTestReplace(""The ${animal}jumps over the lazy dog."",""The $${animal}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceSoloEscaping",0,"/** * Tests escaping.*/public void testReplaceSoloEscaping(){doTestReplace(""${animal}"",""$${animal}"",false);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceComplexEscaping",0,"/** * Tests complex escaping.*/public void testReplaceComplexEscaping(){doTestReplace(""The ${quick brown fox}jumps over the lazy dog."",""The $${${animal}}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNoPefixNoSuffix",0,"/** * Tests when no prefix or suffix.*/public void testReplaceNoPefixNoSuffix(){doTestReplace(""The animal jumps over the lazy dog."",""The animal jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceIncompletePefix",0,"/** * Tests when no incomplete prefix.*/public void testReplaceIncompletePefix(){doTestReplace(""The {animal}jumps over the lazy dog."",""The {animal}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplacePrefixNoSuffix",0,"/** * Tests when prefix but no suffix.*/public void testReplacePrefixNoSuffix(){doTestReplace(""The ${animal jumps over the ${target}lazy dog."",""The ${animal jumps over the ${target}${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceNoPrefixSuffix",0,"/** * Tests when suffix but no prefix.*/public void testReplaceNoPrefixSuffix(){doTestReplace(""The animal}jumps over the lazy dog."",""The animal}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceEmptyKeys",0,"/** * Tests when no variable name.*/public void testReplaceEmptyKeys(){doTestReplace(""The ${}jumps over the lazy dog."",""The ${}jumps over the ${target}."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceToIdentical",0,"/** * Tests replace creates output same as input.*/public void testReplaceToIdentical(){values.put(""animal"",""$${${thing}}"");values.put(""thing"",""animal"");doTestReplace(""The ${animal}jumps."",""The ${animal}jumps."",true);}"
"org.apache.commons.lang.text.StrSubstitutorTest.testCyclicReplacement",0,"/** * Tests a cyclic replace operation. The cycle should be detected and cause an exception to be thrown.*/public void testCyclicReplacement(){Map map=new HashMap();map.put(""animal"",""${critter}"");map.put(""target"",""${pet}"");map.put(""pet"",""${petCharacteristic}dog"");map.put(""petCharacteristic"",""lazy"");map.put(""critter"",""${critterSpeed}${critterColor}${critterType}"");map.put(""critterSpeed"",""quick"");map.put(""critterColor"",""brown"");map.put(""critterType"",""${animal}"");StrSubstitutor sub=new StrSubstitutor(map);try {sub.replace(""The ${animal}jumps over the ${target}."");fail(""Cyclic replacement was not detected!"");}catch(IllegalStateException ex){}}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplaceWeirdPattens",0,"/** * Tests interpolation with weird boundary patterns.*/public void testReplaceWeirdPattens(){doTestNoReplace("""");doTestNoReplace(""${}"");doTestNoReplace(""${}"");doTestNoReplace(""${\t}"");doTestNoReplace(""${\n}"");doTestNoReplace(""${\b}"");doTestNoReplace(""${"");doTestNoReplace(""$}"");doTestNoReplace(""}"");doTestNoReplace(""${}$"");doTestNoReplace(""${${"");doTestNoReplace(""${${}}"");doTestNoReplace(""${$${}}"");doTestNoReplace(""${$$${}}"");doTestNoReplace(""${$$${$}}"");doTestNoReplace(""${${}}"");doTestNoReplace(""${${}}"");}"
"org.apache.commons.lang.text.StrSubstitutorTest.testReplacePartialString_noReplace",0,"/** * Tests simple key replace.*/public void testReplacePartialString_noReplace(){StrSubstitutor sub=new StrSubstitutor();assertEquals(""${animal}jumps"",sub.replace(""The ${animal}jumps over the ${target}."",4,15));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testResolveVariable",0,"/** * Tests protected.*/public void testResolveVariable(){final StrBuilder builder=new StrBuilder(""Hi ${name}!"");Map map=new HashMap();map.put(""name"",""commons"");StrSubstitutor sub=new StrSubstitutor(map){protected String resolveVariable(String variableName,StrBuilder buf,int startPos,int endPos){assertEquals(""name"",variableName);assertSame(builder,buf);assertEquals(3,startPos);assertEquals(10,endPos);return ""jakarta"";}};sub.replaceIn(builder);assertEquals(""Hi jakarta!"",builder.toString());}"
"org.apache.commons.lang.text.StrSubstitutorTest.testConstructorNoArgs",0,"/** * Tests constructor.*/public void testConstructorNoArgs(){StrSubstitutor sub=new StrSubstitutor();assertEquals(""Hi ${name}"",sub.replace(""Hi ${name}""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testConstructorMapPrefixSuffix",0,"/** * Tests constructor.*/public void testConstructorMapPrefixSuffix(){Map map=new HashMap();map.put(""name"",""commons"");StrSubstitutor sub=new StrSubstitutor(map,""<"","">"");assertEquals(""Hi < commons"",sub.replace(""Hi $< <name>""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testConstructorMapFull",0,"/** * Tests constructor.*/public void testConstructorMapFull(){Map map=new HashMap();map.put(""name"",""commons"");StrSubstitutor sub=new StrSubstitutor(map,""<"","">"",'!');assertEquals(""Hi < commons"",sub.replace(""Hi !< <name>""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testGetSetEscape",0,"/** * Tests get set.*/public void testGetSetEscape(){StrSubstitutor sub=new StrSubstitutor();assertEquals('$',sub.getEscapeChar());sub.setEscapeChar('<');assertEquals('<',sub.getEscapeChar());}"
"org.apache.commons.lang.text.StrSubstitutorTest.testGetSetPrefix",0,"/** * Tests get set.*/public void testGetSetPrefix(){StrSubstitutor sub=new StrSubstitutor();assertEquals(true,sub.getVariablePrefixMatcher()instanceof StrMatcher.StringMatcher);sub.setVariablePrefix('<');assertEquals(true,sub.getVariablePrefixMatcher()instanceof StrMatcher.CharMatcher);sub.setVariablePrefix(""<<"");assertEquals(true,sub.getVariablePrefixMatcher()instanceof StrMatcher.StringMatcher);try {sub.setVariablePrefix((String)null);fail();}catch(IllegalArgumentException ex){}assertEquals(true,sub.getVariablePrefixMatcher()instanceof StrMatcher.StringMatcher);StrMatcher matcher=StrMatcher.commaMatcher();sub.setVariablePrefixMatcher(matcher);assertSame(matcher,sub.getVariablePrefixMatcher());try {sub.setVariablePrefixMatcher((StrMatcher)null);fail();}catch(IllegalArgumentException ex){}assertSame(matcher,sub.getVariablePrefixMatcher());}"
"org.apache.commons.lang.text.StrSubstitutorTest.testGetSetSuffix",0,"/** * Tests get set.*/public void testGetSetSuffix(){StrSubstitutor sub=new StrSubstitutor();assertEquals(true,sub.getVariableSuffixMatcher()instanceof StrMatcher.StringMatcher);sub.setVariableSuffix('<');assertEquals(true,sub.getVariableSuffixMatcher()instanceof StrMatcher.CharMatcher);sub.setVariableSuffix(""<<"");assertEquals(true,sub.getVariableSuffixMatcher()instanceof StrMatcher.StringMatcher);try {sub.setVariableSuffix((String)null);fail();}catch(IllegalArgumentException ex){}assertEquals(true,sub.getVariableSuffixMatcher()instanceof StrMatcher.StringMatcher);StrMatcher matcher=StrMatcher.commaMatcher();sub.setVariableSuffixMatcher(matcher);assertSame(matcher,sub.getVariableSuffixMatcher());try {sub.setVariableSuffixMatcher((StrMatcher)null);fail();}catch(IllegalArgumentException ex){}assertSame(matcher,sub.getVariableSuffixMatcher());}"
"org.apache.commons.lang.text.StrSubstitutorTest.testStaticReplace",0,"/** * Tests static.*/public void testStaticReplace(){Map map=new HashMap();map.put(""name"",""commons"");assertEquals(""Hi commons!"",StrSubstitutor.replace(""Hi ${name}!"",map));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testStaticReplacePrefixSuffix",0,"/** * Tests static.*/public void testStaticReplacePrefixSuffix(){Map map=new HashMap();map.put(""name"",""commons"");assertEquals(""Hi commons!"",StrSubstitutor.replace(""Hi <name>!"",map,""<"","">""));}"
"org.apache.commons.lang.text.StrSubstitutorTest.testStaticReplaceSystemProperties",0,"/** * Tests interpolation with system properties.*/public void testStaticReplaceSystemProperties(){StrBuilder buf=new StrBuilder();buf.append(""Hi "").append(System.getProperty(""user.name""));buf.append("",you are working with "");buf.append(System.getProperty(""os.name""));buf.append("",your home directory is "");buf.append(System.getProperty(""user.home"")).append('.');assertEquals(buf.toString(),StrSubstitutor.replaceSystemProperties(""Hi ${user.name},you are "" + ""working with ${os.name},your home "" + ""directory is ${user.home}.""));}"
"org.apache.commons.lang.mutable.MutableIntTest.testConstructors",0,"public void testConstructors(){assertEquals(0,new MutableInt().intValue());assertEquals(1,new MutableInt(1).intValue());assertEquals(2,new MutableInt(new Integer(2)).intValue());assertEquals(3,new MutableInt(new MutableLong(3)).intValue());try {new MutableInt(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableIntTest.testGetSet",0,"public void testGetSet(){final MutableInt mutNum=new MutableInt(0);assertEquals(0,new MutableInt().intValue());assertEquals(new Integer(0),new MutableInt().getValue());mutNum.setValue(1);assertEquals(1,mutNum.intValue());assertEquals(new Integer(1),mutNum.getValue());mutNum.setValue(new Integer(2));assertEquals(2,mutNum.intValue());assertEquals(new Integer(2),mutNum.getValue());mutNum.setValue(new MutableLong(3));assertEquals(3,mutNum.intValue());assertEquals(new Integer(3),mutNum.getValue());try {mutNum.setValue(null);fail();}catch(NullPointerException ex){}try {mutNum.setValue(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableIntTest.testEquals",0,"public void testEquals(){this.testEquals(new MutableInt(0),new MutableInt(0),new MutableInt(1));}"
"org.apache.commons.lang.mutable.MutableIntTest.testHashCode",0,"public void testHashCode(){final MutableInt mutNumA=new MutableInt(0);final MutableInt mutNumB=new MutableInt(0);final MutableInt mutNumC=new MutableInt(1);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(true,mutNumA.hashCode()== new Integer(0).hashCode());}"
"org.apache.commons.lang.mutable.MutableIntTest.testCompareTo",0,"public void testCompareTo(){final MutableInt mutNum=new MutableInt(0);assertEquals(0,mutNum.compareTo(new MutableInt(0)));assertEquals(+1,mutNum.compareTo(new MutableInt(-1)));assertEquals(-1,mutNum.compareTo(new MutableInt(1)));try {mutNum.compareTo(null);fail();}catch(NullPointerException ex){}try {mutNum.compareTo(new Integer(0));fail();}catch(ClassCastException ex){}try {mutNum.compareTo(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableIntTest.testPrimitiveValues",0,"public void testPrimitiveValues(){MutableInt mutNum=new MutableInt(1);assertEquals((byte)1,mutNum.byteValue());assertEquals((short)1,mutNum.shortValue());assertEquals(1.0F,mutNum.floatValue(),0);assertEquals(1.0,mutNum.doubleValue(),0);assertEquals(1L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testToInteger",0,"public void testToInteger(){assertEquals(new Integer(0),new MutableInt(0).toInteger());assertEquals(new Integer(123),new MutableInt(123).toInteger());}"
"org.apache.commons.lang.mutable.MutableIntTest.testIncrement",0,"public void testIncrement(){MutableInt mutNum=new MutableInt(1);mutNum.increment();assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testDecrement",0,"public void testDecrement(){MutableInt mutNum=new MutableInt(1);mutNum.decrement();assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testAddValuePrimitive",0,"public void testAddValuePrimitive(){MutableInt mutNum=new MutableInt(1);mutNum.add(1);assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testAddValueObject",0,"public void testAddValueObject(){MutableInt mutNum=new MutableInt(1);mutNum.add(new Integer(1));assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testSubtractValuePrimitive",0,"public void testSubtractValuePrimitive(){MutableInt mutNum=new MutableInt(1);mutNum.subtract(1);assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testSubtractValueObject",0,"public void testSubtractValueObject(){MutableInt mutNum=new MutableInt(1);mutNum.subtract(new Integer(1));assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableIntTest.testToString",0,"public void testToString(){assertEquals(""0"",new MutableInt(0).toString());assertEquals(""10"",new MutableInt(10).toString());assertEquals(""-123"",new MutableInt(-123).toString());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetArrayStart",0,"public void testSetArrayStart(){ToStringStyle style=new ToStringStyleImpl();style.setArrayStart(null);assertEquals("""",style.getArrayStart());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetArrayEnd",0,"public void testSetArrayEnd(){ToStringStyle style=new ToStringStyleImpl();style.setArrayEnd(null);assertEquals("""",style.getArrayEnd());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetArraySeparator",0,"public void testSetArraySeparator(){ToStringStyle style=new ToStringStyleImpl();style.setArraySeparator(null);assertEquals("""",style.getArraySeparator());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetContentStart",0,"public void testSetContentStart(){ToStringStyle style=new ToStringStyleImpl();style.setContentStart(null);assertEquals("""",style.getContentStart());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetContentEnd",0,"public void testSetContentEnd(){ToStringStyle style=new ToStringStyleImpl();style.setContentEnd(null);assertEquals("""",style.getContentEnd());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetFieldNameValueSeparator",0,"public void testSetFieldNameValueSeparator(){ToStringStyle style=new ToStringStyleImpl();style.setFieldNameValueSeparator(null);assertEquals("""",style.getFieldNameValueSeparator());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetFieldSeparator",0,"public void testSetFieldSeparator(){ToStringStyle style=new ToStringStyleImpl();style.setFieldSeparator(null);assertEquals("""",style.getFieldSeparator());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetNullText",0,"public void testSetNullText(){ToStringStyle style=new ToStringStyleImpl();style.setNullText(null);assertEquals("""",style.getNullText());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetSizeStartText",0,"public void testSetSizeStartText(){ToStringStyle style=new ToStringStyleImpl();style.setSizeStartText(null);assertEquals("""",style.getSizeStartText());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetSizeEndText",0,"public void testSetSizeEndText(){ToStringStyle style=new ToStringStyleImpl();style.setSizeEndText(null);assertEquals("""",style.getSizeEndText());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetSummaryObjectStartText",0,"public void testSetSummaryObjectStartText(){ToStringStyle style=new ToStringStyleImpl();style.setSummaryObjectStartText(null);assertEquals("""",style.getSummaryObjectStartText());}"
"org.apache.commons.lang.builder.ToStringStyleTest.testSetSummaryObjectEndText",0,"public void testSetSummaryObjectEndText(){ToStringStyle style=new ToStringStyleImpl();style.setSummaryObjectEndText(null);assertEquals("""",style.getSummaryObjectEndText());}"
"org.apache.commons.lang.text.StrBuilderTest.testConstructors",0,"public void testConstructors(){StrBuilder sb0=new StrBuilder();assertEquals(32,sb0.capacity());assertEquals(0,sb0.length());assertEquals(0,sb0.size());StrBuilder sb1=new StrBuilder(32);assertEquals(32,sb1.capacity());assertEquals(0,sb1.length());assertEquals(0,sb1.size());StrBuilder sb2=new StrBuilder(0);assertEquals(32,sb2.capacity());assertEquals(0,sb2.length());assertEquals(0,sb2.size());StrBuilder sb3=new StrBuilder(-1);assertEquals(32,sb3.capacity());assertEquals(0,sb3.length());assertEquals(0,sb3.size());StrBuilder sb4=new StrBuilder(1);assertEquals(1,sb4.capacity());assertEquals(0,sb4.length());assertEquals(0,sb4.size());StrBuilder sb5=new StrBuilder((String)null);assertEquals(32,sb5.capacity());assertEquals(0,sb5.length());assertEquals(0,sb5.size());StrBuilder sb6=new StrBuilder("""");assertEquals(32,sb6.capacity());assertEquals(0,sb6.length());assertEquals(0,sb6.size());StrBuilder sb7=new StrBuilder(""foo"");assertEquals(35,sb7.capacity());assertEquals(3,sb7.length());assertEquals(3,sb7.size());}"
"org.apache.commons.lang.text.StrBuilderTest.testChaining",0,"public void testChaining(){StrBuilder sb=new StrBuilder();assertSame(sb,sb.setNewLineText(null));assertSame(sb,sb.setNullText(null));assertSame(sb,sb.setLength(1));assertSame(sb,sb.setCharAt(0,'a'));assertSame(sb,sb.ensureCapacity(0));assertSame(sb,sb.minimizeCapacity());assertSame(sb,sb.clear());assertSame(sb,sb.reverse());assertSame(sb,sb.trim());}"
"org.apache.commons.lang.text.StrBuilderTest.testGetSetNewLineText",0,"public void testGetSetNewLineText(){StrBuilder sb=new StrBuilder();assertEquals(null,sb.getNewLineText());sb.setNewLineText(""#"");assertEquals(""#"",sb.getNewLineText());sb.setNewLineText("""");assertEquals("""",sb.getNewLineText());sb.setNewLineText((String)null);assertEquals(null,sb.getNewLineText());}"
"org.apache.commons.lang.text.StrBuilderTest.testGetSetNullText",0,"public void testGetSetNullText(){StrBuilder sb=new StrBuilder();assertEquals(null,sb.getNullText());sb.setNullText(""null"");assertEquals(""null"",sb.getNullText());sb.setNullText("""");assertEquals(null,sb.getNullText());sb.setNullText(""NULL"");assertEquals(""NULL"",sb.getNullText());sb.setNullText((String)null);assertEquals(null,sb.getNullText());}"
"org.apache.commons.lang.text.StrBuilderTest.testCapacityAndLength",0,"public void testCapacityAndLength(){StrBuilder sb=new StrBuilder();assertEquals(32,sb.capacity());assertEquals(0,sb.length());assertEquals(0,sb.size());assertTrue(sb.isEmpty());sb.minimizeCapacity();assertEquals(0,sb.capacity());assertEquals(0,sb.length());assertEquals(0,sb.size());assertTrue(sb.isEmpty());sb.ensureCapacity(32);assertTrue(sb.capacity()>= 32);assertEquals(0,sb.length());assertEquals(0,sb.size());assertTrue(sb.isEmpty());sb.append(""foo"");assertTrue(sb.capacity()>= 32);assertEquals(3,sb.length());assertEquals(3,sb.size());assertTrue(sb.isEmpty()== false);sb.clear();assertTrue(sb.capacity()>= 32);assertEquals(0,sb.length());assertEquals(0,sb.size());assertTrue(sb.isEmpty());sb.append(""123456789012345678901234567890123"");assertTrue(sb.capacity()> 32);assertEquals(33,sb.length());assertEquals(33,sb.size());assertTrue(sb.isEmpty()== false);sb.ensureCapacity(16);assertTrue(sb.capacity()> 16);assertEquals(33,sb.length());assertEquals(33,sb.size());assertTrue(sb.isEmpty()== false);sb.minimizeCapacity();assertEquals(33,sb.capacity());assertEquals(33,sb.length());assertEquals(33,sb.size());assertTrue(sb.isEmpty()== false);try {sb.setLength(-1);fail(""setLength(-1)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.setLength(33);assertEquals(33,sb.capacity());assertEquals(33,sb.length());assertEquals(33,sb.size());assertTrue(sb.isEmpty()== false);sb.setLength(16);assertTrue(sb.capacity()>= 16);assertEquals(16,sb.length());assertEquals(16,sb.size());assertEquals(""1234567890123456"",sb.toString());assertTrue(sb.isEmpty()== false);sb.setLength(32);assertTrue(sb.capacity()>= 32);assertEquals(32,sb.length());assertEquals(32,sb.size());assertEquals(""1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"",sb.toString());assertTrue(sb.isEmpty()== false);sb.setLength(0);assertTrue(sb.capacity()>= 32);assertEquals(0,sb.length());assertEquals(0,sb.size());assertTrue(sb.isEmpty());}"
"org.apache.commons.lang.text.StrBuilderTest.testLength",0,"public void testLength(){StrBuilder sb=new StrBuilder();assertEquals(0,sb.length());sb.append(""Hello"");assertEquals(5,sb.length());}"
"org.apache.commons.lang.text.StrBuilderTest.testSetLength",0,"public void testSetLength(){StrBuilder sb=new StrBuilder();sb.append(""Hello"");sb.setLength(2);assertEquals(""He"",sb.toString());sb.setLength(2);assertEquals(""He"",sb.toString());sb.setLength(3);assertEquals(""He\0"",sb.toString());try {sb.setLength(-1);fail(""setLength(-1)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testCapacity",0,"public void testCapacity(){StrBuilder sb=new StrBuilder();assertEquals(sb.buffer.length,sb.capacity());sb.append(""HelloWorldHelloWorldHelloWorldHelloWorld"");assertEquals(sb.buffer.length,sb.capacity());}"
"org.apache.commons.lang.text.StrBuilderTest.testEnsureCapacity",0,"public void testEnsureCapacity(){StrBuilder sb=new StrBuilder();sb.ensureCapacity(2);assertEquals(true,sb.capacity()>= 2);sb.ensureCapacity(-1);assertEquals(true,sb.capacity()>= 0);sb.append(""HelloWorld"");sb.ensureCapacity(40);assertEquals(true,sb.capacity()>= 40);}"
"org.apache.commons.lang.text.StrBuilderTest.testMinimizeCapacity",0,"public void testMinimizeCapacity(){StrBuilder sb=new StrBuilder();sb.minimizeCapacity();assertEquals(0,sb.capacity());sb.append(""HelloWorld"");sb.minimizeCapacity();assertEquals(10,sb.capacity());}"
"org.apache.commons.lang.text.StrBuilderTest.testSize",0,"public void testSize(){StrBuilder sb=new StrBuilder();assertEquals(0,sb.size());sb.append(""Hello"");assertEquals(5,sb.size());}"
"org.apache.commons.lang.text.StrBuilderTest.testIsEmpty",0,"public void testIsEmpty(){StrBuilder sb=new StrBuilder();assertEquals(true,sb.isEmpty());sb.append(""Hello"");assertEquals(false,sb.isEmpty());sb.clear();assertEquals(true,sb.isEmpty());}"
"org.apache.commons.lang.text.StrBuilderTest.testClear",0,"public void testClear(){StrBuilder sb=new StrBuilder();sb.append(""Hello"");sb.clear();assertEquals(0,sb.length());assertEquals(true,sb.buffer.length >= 5);}"
"org.apache.commons.lang.text.StrBuilderTest.testCharAt",0,"public void testCharAt(){StrBuilder sb=new StrBuilder();try {sb.charAt(0);fail(""charAt(0)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.charAt(-1);fail(""charAt(-1)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.append(""foo"");assertEquals('f',sb.charAt(0));assertEquals('o',sb.charAt(1));assertEquals('o',sb.charAt(2));try {sb.charAt(-1);fail(""charAt(-1)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.charAt(3);fail(""charAt(3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testSetCharAt",0,"public void testSetCharAt(){StrBuilder sb=new StrBuilder();try {sb.setCharAt(0,'f');fail(""setCharAt(0,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.setCharAt(-1,'f');fail(""setCharAt(-1,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.append(""foo"");sb.setCharAt(0,'b');sb.setCharAt(1,'a');sb.setCharAt(2,'r');try {sb.setCharAt(3,'!');fail(""setCharAt(3,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}assertEquals(""bar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteCharAt",0,"public void testDeleteCharAt(){StrBuilder sb=new StrBuilder(""abc"");sb.deleteCharAt(0);assertEquals(""bc"",sb.toString());try {sb.deleteCharAt(1000);fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testToCharArray",0,"public void testToCharArray(){StrBuilder sb=new StrBuilder();assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY,sb.toCharArray());char[]a=sb.toCharArray();assertNotNull(""toCharArray()result is null"",a);assertEquals(""toCharArray()result is too large"",0,a.length);sb.append(""junit"");a=sb.toCharArray();assertEquals(""toCharArray()result incorrect length"",5,a.length);assertTrue(""toCharArray()result does not match"",Arrays.equals(""junit"".toCharArray(),a));}"
"org.apache.commons.lang.text.StrBuilderTest.testToCharArrayIntInt",0,"public void testToCharArrayIntInt(){StrBuilder sb=new StrBuilder();assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY,sb.toCharArray(0,0));sb.append(""junit"");char[]a=sb.toCharArray(0,20);assertEquals(""toCharArray(int,int)result incorrect length"",5,a.length);assertTrue(""toCharArray(int,int)result does not match"",Arrays.equals(""junit"".toCharArray(),a));a=sb.toCharArray(0,4);assertEquals(""toCharArray(int,int)result incorrect length"",4,a.length);assertTrue(""toCharArray(int,int)result does not match"",Arrays.equals(""juni"".toCharArray(),a));a=sb.toCharArray(0,4);assertEquals(""toCharArray(int,int)result incorrect length"",4,a.length);assertTrue(""toCharArray(int,int)result does not match"",Arrays.equals(""juni"".toCharArray(),a));a=sb.toCharArray(0,1);assertNotNull(""toCharArray(int,int)result is null"",a);try {sb.toCharArray(-1,5);fail(""no string index out of bound on -1"");}catch(IndexOutOfBoundsException e){}try {sb.toCharArray(6,5);fail(""no string index out of bound on -1"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testGetChars",0,"public void testGetChars(){StrBuilder sb=new StrBuilder();char[]input=new char[10];char[]a=sb.getChars(input);assertSame(input,a);assertTrue(Arrays.equals(new char[10],a));sb.append(""junit"");a=sb.getChars(input);assertSame(input,a);assertTrue(Arrays.equals(new char[]{'j','u','n','i','t',0,0,0,0,0},a));a=sb.getChars(null);assertNotSame(input,a);assertEquals(5,a.length);assertTrue(Arrays.equals(""junit"".toCharArray(),a));input=new char[5];a=sb.getChars(input);assertSame(input,a);input=new char[4];a=sb.getChars(input);assertNotSame(input,a);}"
"org.apache.commons.lang.text.StrBuilderTest.testGetCharsIntIntCharArrayInt",0,"public void testGetCharsIntIntCharArrayInt(){StrBuilder sb=new StrBuilder();sb.append(""junit"");char[]a=new char[5];sb.getChars(0,5,a,0);assertTrue(Arrays.equals(new char[]{'j','u','n','i','t'},a));a=new char[5];sb.getChars(0,2,a,3);assertTrue(Arrays.equals(new char[]{0,0,0,'j','u'},a));try {sb.getChars(-1,0,a,0);fail(""no exception"");}catch(IndexOutOfBoundsException e){}try {sb.getChars(0,-1,a,0);fail(""no exception"");}catch(IndexOutOfBoundsException e){}try {sb.getChars(0,20,a,0);fail(""no exception"");}catch(IndexOutOfBoundsException e){}try {sb.getChars(4,2,a,0);fail(""no exception"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteIntInt",0,"public void testDeleteIntInt(){StrBuilder sb=new StrBuilder(""abc"");sb.delete(0,1);assertEquals(""bc"",sb.toString());sb.delete(1,2);assertEquals(""b"",sb.toString());sb.delete(0,1);assertEquals("""",sb.toString());sb.delete(0,1000);assertEquals("""",sb.toString());try {sb.delete(1,2);fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.delete(-1,1);fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb=new StrBuilder(""anything"");try {sb.delete(2,1);fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_char",0,"public void testDeleteAll_char(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.deleteAll('X');assertEquals(""abcbccba"",sb.toString());sb.deleteAll('a');assertEquals(""bcbccb"",sb.toString());sb.deleteAll('c');assertEquals(""bbb"",sb.toString());sb.deleteAll('b');assertEquals("""",sb.toString());sb=new StrBuilder("""");sb.deleteAll('b');assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_char",0,"public void testDeleteFirst_char(){StrBuilder sb=new StrBuilder(""abcba"");sb.deleteFirst('X');assertEquals(""abcba"",sb.toString());sb.deleteFirst('a');assertEquals(""bcba"",sb.toString());sb.deleteFirst('c');assertEquals(""bba"",sb.toString());sb.deleteFirst('b');assertEquals(""ba"",sb.toString());sb=new StrBuilder("""");sb.deleteFirst('b');assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String",0,"public void testDeleteAll_String(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.deleteAll((String)null);assertEquals(""abcbccba"",sb.toString());sb.deleteAll("""");assertEquals(""abcbccba"",sb.toString());sb.deleteAll(""X"");assertEquals(""abcbccba"",sb.toString());sb.deleteAll(""a"");assertEquals(""bcbccb"",sb.toString());sb.deleteAll(""c"");assertEquals(""bbb"",sb.toString());sb.deleteAll(""b"");assertEquals("""",sb.toString());sb=new StrBuilder(""abcbccba"");sb.deleteAll(""bc"");assertEquals(""acba"",sb.toString());sb=new StrBuilder("""");sb.deleteAll(""bc"");assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_String",0,"public void testDeleteFirst_String(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.deleteFirst((String)null);assertEquals(""abcbccba"",sb.toString());sb.deleteFirst("""");assertEquals(""abcbccba"",sb.toString());sb.deleteFirst(""X"");assertEquals(""abcbccba"",sb.toString());sb.deleteFirst(""a"");assertEquals(""bcbccba"",sb.toString());sb.deleteFirst(""c"");assertEquals(""bbccba"",sb.toString());sb.deleteFirst(""b"");assertEquals(""bccba"",sb.toString());sb=new StrBuilder(""abcbccba"");sb.deleteFirst(""bc"");assertEquals(""abccba"",sb.toString());sb=new StrBuilder("""");sb.deleteFirst(""bc"");assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_StrMatcher",0,"public void testDeleteAll_StrMatcher(){StrBuilder sb=new StrBuilder(""A0xA1A2yA3"");sb.deleteAll((StrMatcher)null);assertEquals(""A0xA1A2yA3"",sb.toString());sb.deleteAll(A_NUMBER_MATCHER);assertEquals(""xy"",sb.toString());sb=new StrBuilder(""Ax1"");sb.deleteAll(A_NUMBER_MATCHER);assertEquals(""Ax1"",sb.toString());sb=new StrBuilder("""");sb.deleteAll(A_NUMBER_MATCHER);assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_StrMatcher",0,"public void testDeleteFirst_StrMatcher(){StrBuilder sb=new StrBuilder(""A0xA1A2yA3"");sb.deleteFirst((StrMatcher)null);assertEquals(""A0xA1A2yA3"",sb.toString());sb.deleteFirst(A_NUMBER_MATCHER);assertEquals(""xA1A2yA3"",sb.toString());sb=new StrBuilder(""Ax1"");sb.deleteFirst(A_NUMBER_MATCHER);assertEquals(""Ax1"",sb.toString());sb=new StrBuilder("""");sb.deleteFirst(A_NUMBER_MATCHER);assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplace_int_int_String",0,"public void testReplace_int_int_String(){StrBuilder sb=new StrBuilder(""abc"");sb.replace(0,1,""d"");assertEquals(""dbc"",sb.toString());sb.replace(0,1,""aaa"");assertEquals(""aaabc"",sb.toString());sb.replace(0,3,"""");assertEquals(""bc"",sb.toString());sb.replace(1,2,(String)null);assertEquals(""b"",sb.toString());sb.replace(1,1000,""text"");assertEquals(""btext"",sb.toString());sb.replace(0,1000,""text"");assertEquals(""text"",sb.toString());sb=new StrBuilder(""atext"");sb.replace(1,1,""ny"");assertEquals(""anytext"",sb.toString());try {sb.replace(2,1,""anything"");fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb=new StrBuilder();try {sb.replace(1,2,""anything"");fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.replace(-1,1,""anything"");fail(""Expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_char_char",0,"public void testReplaceAll_char_char(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replaceAll('x','y');assertEquals(""abcbccba"",sb.toString());sb.replaceAll('a','d');assertEquals(""dbcbccbd"",sb.toString());sb.replaceAll('b','e');assertEquals(""dececced"",sb.toString());sb.replaceAll('c','f');assertEquals(""defeffed"",sb.toString());sb.replaceAll('d','d');assertEquals(""defeffed"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_char_char",0,"public void testReplaceFirst_char_char(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replaceFirst('x','y');assertEquals(""abcbccba"",sb.toString());sb.replaceFirst('a','d');assertEquals(""dbcbccba"",sb.toString());sb.replaceFirst('b','e');assertEquals(""decbccba"",sb.toString());sb.replaceFirst('c','f');assertEquals(""defbccba"",sb.toString());sb.replaceFirst('d','d');assertEquals(""defbccba"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String",0,"public void testReplaceAll_String_String(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replaceAll((String)null,null);assertEquals(""abcbccba"",sb.toString());sb.replaceAll((String)null,""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceAll("""",null);assertEquals(""abcbccba"",sb.toString());sb.replaceAll("""",""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceAll(""x"",""y"");assertEquals(""abcbccba"",sb.toString());sb.replaceAll(""a"",""d"");assertEquals(""dbcbccbd"",sb.toString());sb.replaceAll(""d"",null);assertEquals(""bcbccb"",sb.toString());sb.replaceAll(""cb"",""-"");assertEquals(""b-c-"",sb.toString());sb=new StrBuilder(""abcba"");sb.replaceAll(""b"",""xbx"");assertEquals(""axbxcxbxa"",sb.toString());sb=new StrBuilder(""bb"");sb.replaceAll(""b"",""xbx"");assertEquals(""xbxxbx"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_String_String",0,"public void testReplaceFirst_String_String(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replaceFirst((String)null,null);assertEquals(""abcbccba"",sb.toString());sb.replaceFirst((String)null,""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceFirst("""",null);assertEquals(""abcbccba"",sb.toString());sb.replaceFirst("""",""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceFirst(""x"",""y"");assertEquals(""abcbccba"",sb.toString());sb.replaceFirst(""a"",""d"");assertEquals(""dbcbccba"",sb.toString());sb.replaceFirst(""d"",null);assertEquals(""bcbccba"",sb.toString());sb.replaceFirst(""cb"",""-"");assertEquals(""b-ccba"",sb.toString());sb=new StrBuilder(""abcba"");sb.replaceFirst(""b"",""xbx"");assertEquals(""axbxcba"",sb.toString());sb=new StrBuilder(""bb"");sb.replaceFirst(""b"",""xbx"");assertEquals(""xbxb"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_StrMatcher_String",0,"public void testReplaceAll_StrMatcher_String(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replaceAll((StrMatcher)null,null);assertEquals(""abcbccba"",sb.toString());sb.replaceAll((StrMatcher)null,""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceAll(StrMatcher.noneMatcher(),null);assertEquals(""abcbccba"",sb.toString());sb.replaceAll(StrMatcher.noneMatcher(),""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceAll(StrMatcher.charMatcher('x'),""y"");assertEquals(""abcbccba"",sb.toString());sb.replaceAll(StrMatcher.charMatcher('a'),""d"");assertEquals(""dbcbccbd"",sb.toString());sb.replaceAll(StrMatcher.charMatcher('d'),null);assertEquals(""bcbccb"",sb.toString());sb.replaceAll(StrMatcher.stringMatcher(""cb""),""-"");assertEquals(""b-c-"",sb.toString());sb=new StrBuilder(""abcba"");sb.replaceAll(StrMatcher.charMatcher('b'),""xbx"");assertEquals(""axbxcxbxa"",sb.toString());sb=new StrBuilder(""bb"");sb.replaceAll(StrMatcher.charMatcher('b'),""xbx"");assertEquals(""xbxxbx"",sb.toString());sb=new StrBuilder(""A1-A2A3-A4"");sb.replaceAll(A_NUMBER_MATCHER,""***"");assertEquals(""***-******-***"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_StrMatcher_String",0,"public void testReplaceFirst_StrMatcher_String(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replaceFirst((StrMatcher)null,null);assertEquals(""abcbccba"",sb.toString());sb.replaceFirst((StrMatcher)null,""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceFirst(StrMatcher.noneMatcher(),null);assertEquals(""abcbccba"",sb.toString());sb.replaceFirst(StrMatcher.noneMatcher(),""anything"");assertEquals(""abcbccba"",sb.toString());sb.replaceFirst(StrMatcher.charMatcher('x'),""y"");assertEquals(""abcbccba"",sb.toString());sb.replaceFirst(StrMatcher.charMatcher('a'),""d"");assertEquals(""dbcbccba"",sb.toString());sb.replaceFirst(StrMatcher.charMatcher('d'),null);assertEquals(""bcbccba"",sb.toString());sb.replaceFirst(StrMatcher.stringMatcher(""cb""),""-"");assertEquals(""b-ccba"",sb.toString());sb=new StrBuilder(""abcba"");sb.replaceFirst(StrMatcher.charMatcher('b'),""xbx"");assertEquals(""axbxcba"",sb.toString());sb=new StrBuilder(""bb"");sb.replaceFirst(StrMatcher.charMatcher('b'),""xbx"");assertEquals(""xbxb"",sb.toString());sb=new StrBuilder(""A1-A2A3-A4"");sb.replaceFirst(A_NUMBER_MATCHER,""***"");assertEquals(""***-A2A3-A4"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher",0,"public void testReplace_StrMatcher_String_int_int_int_VaryMatcher(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replace((StrMatcher)null,""x"",0,sb.length(),-1);assertEquals(""abcbccba"",sb.toString());sb.replace(StrMatcher.charMatcher('a'),""x"",0,sb.length(),-1);assertEquals(""xbcbccbx"",sb.toString());sb.replace(StrMatcher.stringMatcher(""cb""),""x"",0,sb.length(),-1);assertEquals(""xbxcxx"",sb.toString());sb=new StrBuilder(""A1-A2A3-A4"");sb.replace(A_NUMBER_MATCHER,""***"",0,sb.length(),-1);assertEquals(""***-******-***"",sb.toString());sb=new StrBuilder();sb.replace(A_NUMBER_MATCHER,""***"",0,sb.length(),-1);assertEquals("""",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace",0,"public void testReplace_StrMatcher_String_int_int_int_VaryReplace(){StrBuilder sb=new StrBuilder(""abcbccba"");sb.replace(StrMatcher.stringMatcher(""cb""),""cb"",0,sb.length(),-1);assertEquals(""abcbccba"",sb.toString());sb=new StrBuilder(""abcbccba"");sb.replace(StrMatcher.stringMatcher(""cb""),""-"",0,sb.length(),-1);assertEquals(""ab-c-a"",sb.toString());sb=new StrBuilder(""abcbccba"");sb.replace(StrMatcher.stringMatcher(""cb""),""+++"",0,sb.length(),-1);assertEquals(""ab+++c+++a"",sb.toString());sb=new StrBuilder(""abcbccba"");sb.replace(StrMatcher.stringMatcher(""cb""),"""",0,sb.length(),-1);assertEquals(""abca"",sb.toString());sb=new StrBuilder(""abcbccba"");sb.replace(StrMatcher.stringMatcher(""cb""),null,0,sb.length(),-1);assertEquals(""abca"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex",0,"public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex(){StrBuilder sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,sb.length(),-1);assertEquals(""-x--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",1,sb.length(),-1);assertEquals(""aax--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",2,sb.length(),-1);assertEquals(""aax--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",3,sb.length(),-1);assertEquals(""aax--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",4,sb.length(),-1);assertEquals(""aaxa-ay-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",5,sb.length(),-1);assertEquals(""aaxaa-y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",6,sb.length(),-1);assertEquals(""aaxaaaay-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",7,sb.length(),-1);assertEquals(""aaxaaaay-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",8,sb.length(),-1);assertEquals(""aaxaaaay-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",9,sb.length(),-1);assertEquals(""aaxaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",10,sb.length(),-1);assertEquals(""aaxaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");try {sb.replace(StrMatcher.stringMatcher(""aa""),""-"",11,sb.length(),-1);fail();}catch(IndexOutOfBoundsException ex){}assertEquals(""aaxaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");try {sb.replace(StrMatcher.stringMatcher(""aa""),""-"",-1,sb.length(),-1);fail();}catch(IndexOutOfBoundsException ex){}assertEquals(""aaxaaaayaa"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex",0,"public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex(){StrBuilder sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,0,-1);assertEquals(""aaxaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,2,-1);assertEquals(""-xaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,3,-1);assertEquals(""-xaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,4,-1);assertEquals(""-xaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,5,-1);assertEquals(""-x-aayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,6,-1);assertEquals(""-x-aayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,7,-1);assertEquals(""-x--yaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,8,-1);assertEquals(""-x--yaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,9,-1);assertEquals(""-x--yaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,-1);assertEquals(""-x--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,1000,-1);assertEquals(""-x--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");try {sb.replace(StrMatcher.stringMatcher(""aa""),""-"",2,1,-1);fail();}catch(IndexOutOfBoundsException ex){}assertEquals(""aaxaaaayaa"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount",0,"public void testReplace_StrMatcher_String_int_int_int_VaryCount(){StrBuilder sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,-1);assertEquals(""-x--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,0);assertEquals(""aaxaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,1);assertEquals(""-xaaaayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,2);assertEquals(""-x-aayaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,3);assertEquals(""-x--yaa"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,4);assertEquals(""-x--y-"",sb.toString());sb=new StrBuilder(""aaxaaaayaa"");sb.replace(StrMatcher.stringMatcher(""aa""),""-"",0,10,5);assertEquals(""-x--y-"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testReverse",0,"public void testReverse(){StrBuilder sb=new StrBuilder();assertEquals("""",sb.reverse().toString());sb.clear().append(true);assertEquals(""eurt"",sb.reverse().toString());assertEquals(""true"",sb.reverse().toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testTrim",0,"public void testTrim(){StrBuilder sb=new StrBuilder();assertEquals("""",sb.reverse().toString());sb.clear().append("" \u0000 "");assertEquals("""",sb.trim().toString());sb.clear().append("" \u0000 a b c"");assertEquals(""a b c"",sb.trim().toString());sb.clear().append(""a b c \u0000 "");assertEquals(""a b c"",sb.trim().toString());sb.clear().append("" \u0000 a b c \u0000 "");assertEquals(""a b c"",sb.trim().toString());sb.clear().append(""a b c"");assertEquals(""a b c"",sb.trim().toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testStartsWith",0,"public void testStartsWith(){StrBuilder sb=new StrBuilder();assertFalse(sb.startsWith(""a""));assertFalse(sb.startsWith(null));assertTrue(sb.startsWith(""""));sb.append(""abc"");assertTrue(sb.startsWith(""a""));assertTrue(sb.startsWith(""ab""));assertTrue(sb.startsWith(""abc""));assertFalse(sb.startsWith(""cba""));}"
"org.apache.commons.lang.text.StrBuilderTest.testEndsWith",0,"public void testEndsWith(){StrBuilder sb=new StrBuilder();assertFalse(sb.endsWith(""a""));assertFalse(sb.endsWith(""c""));assertTrue(sb.endsWith(""""));assertFalse(sb.endsWith(null));sb.append(""abc"");assertTrue(sb.endsWith(""c""));assertTrue(sb.endsWith(""bc""));assertTrue(sb.endsWith(""abc""));assertFalse(sb.endsWith(""cba""));assertFalse(sb.endsWith(""abcd""));assertFalse(sb.endsWith("" abc""));assertFalse(sb.endsWith(""abc ""));}"
"org.apache.commons.lang.text.StrBuilderTest.testSubstringInt",0,"public void testSubstringInt(){StrBuilder sb=new StrBuilder(""hello goodbye"");assertEquals(""goodbye"",sb.substring(6));assertEquals(""hello goodbye"".substring(6),sb.substring(6));assertEquals(""hello goodbye"",sb.substring(0));assertEquals(""hello goodbye"".substring(0),sb.substring(0));try {sb.substring(-1);fail();}catch(IndexOutOfBoundsException e){}try {sb.substring(15);fail();}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testSubstringIntInt",0,"public void testSubstringIntInt(){StrBuilder sb=new StrBuilder(""hello goodbye"");assertEquals(""hello"",sb.substring(0,5));assertEquals(""hello goodbye"".substring(0,6),sb.substring(0,6));assertEquals(""goodbye"",sb.substring(6,13));assertEquals(""hello goodbye"".substring(6,13),sb.substring(6,13));assertEquals(""goodbye"",sb.substring(6,20));try {sb.substring(-1,5);fail();}catch(IndexOutOfBoundsException e){}try {sb.substring(15,20);fail();}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.lang.text.StrBuilderTest.testMidString",0,"public void testMidString(){StrBuilder sb=new StrBuilder(""hello goodbye hello"");assertEquals(""goodbye"",sb.midString(6,7));assertEquals(""hello"",sb.midString(0,5));assertEquals(""hello"",sb.midString(-5,5));assertEquals("""",sb.midString(0,-1));assertEquals("""",sb.midString(20,2));assertEquals(""hello"",sb.midString(14,22));}"
"org.apache.commons.lang.text.StrBuilderTest.testRightString",0,"public void testRightString(){StrBuilder sb=new StrBuilder(""left right"");assertEquals(""right"",sb.rightString(5));assertEquals("""",sb.rightString(0));assertEquals("""",sb.rightString(-5));assertEquals(""left right"",sb.rightString(15));}"
"org.apache.commons.lang.text.StrBuilderTest.testLeftString",0,"public void testLeftString(){StrBuilder sb=new StrBuilder(""left right"");assertEquals(""left"",sb.leftString(4));assertEquals("""",sb.leftString(0));assertEquals("""",sb.leftString(-5));assertEquals(""left right"",sb.leftString(15));}"
"org.apache.commons.lang.text.StrBuilderTest.testContains_char",0,"public void testContains_char(){StrBuilder sb=new StrBuilder(""abcdefghijklmnopqrstuvwxyz"");assertEquals(true,sb.contains('a'));assertEquals(true,sb.contains('o'));assertEquals(true,sb.contains('z'));assertEquals(false,sb.contains('1'));}"
"org.apache.commons.lang.text.StrBuilderTest.testContains_String",0,"public void testContains_String(){StrBuilder sb=new StrBuilder(""abcdefghijklmnopqrstuvwxyz"");assertEquals(true,sb.contains(""a""));assertEquals(true,sb.contains(""pq""));assertEquals(true,sb.contains(""z""));assertEquals(false,sb.contains(""zyx""));assertEquals(false,sb.contains((String)null));}"
"org.apache.commons.lang.text.StrBuilderTest.testContains_StrMatcher",0,"public void testContains_StrMatcher(){StrBuilder sb=new StrBuilder(""abcdefghijklmnopqrstuvwxyz"");assertEquals(true,sb.contains(StrMatcher.charMatcher('a')));assertEquals(true,sb.contains(StrMatcher.stringMatcher(""pq"")));assertEquals(true,sb.contains(StrMatcher.charMatcher('z')));assertEquals(false,sb.contains(StrMatcher.stringMatcher(""zy"")));assertEquals(false,sb.contains((StrMatcher)null));sb=new StrBuilder();assertEquals(false,sb.contains(A_NUMBER_MATCHER));sb.append(""B A1 C"");assertEquals(true,sb.contains(A_NUMBER_MATCHER));}"
"org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char",0,"public void testIndexOf_char(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(0,sb.indexOf('a'));assertEquals(""abab"".indexOf('a'),sb.indexOf('a'));assertEquals(1,sb.indexOf('b'));assertEquals(""abab"".indexOf('b'),sb.indexOf('b'));assertEquals(-1,sb.indexOf('z'));}"
"org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char_int",0,"public void testIndexOf_char_int(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(0,sb.indexOf('a',-1));assertEquals(0,sb.indexOf('a',0));assertEquals(2,sb.indexOf('a',1));assertEquals(-1,sb.indexOf('a',4));assertEquals(-1,sb.indexOf('a',5));assertEquals(""abab"".indexOf('a',1),sb.indexOf('a',1));assertEquals(3,sb.indexOf('b',2));assertEquals(""abab"".indexOf('b',2),sb.indexOf('b',2));assertEquals(-1,sb.indexOf('z',2));sb=new StrBuilder(""xyzabc"");assertEquals(2,sb.indexOf('z',0));assertEquals(-1,sb.indexOf('z',3));}"
"org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char",0,"public void testLastIndexOf_char(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(2,sb.lastIndexOf('a'));assertEquals(""abab"".lastIndexOf('a'),sb.lastIndexOf('a'));assertEquals(3,sb.lastIndexOf('b'));assertEquals(""abab"".lastIndexOf('b'),sb.lastIndexOf('b'));assertEquals(-1,sb.lastIndexOf('z'));}"
"org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char_int",0,"public void testLastIndexOf_char_int(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(-1,sb.lastIndexOf('a',-1));assertEquals(0,sb.lastIndexOf('a',0));assertEquals(0,sb.lastIndexOf('a',1));assertEquals(""abab"".lastIndexOf('a',1),sb.lastIndexOf('a',1));assertEquals(1,sb.lastIndexOf('b',2));assertEquals(""abab"".lastIndexOf('b',2),sb.lastIndexOf('b',2));assertEquals(-1,sb.lastIndexOf('z',2));sb=new StrBuilder(""xyzabc"");assertEquals(2,sb.lastIndexOf('z',sb.length()));assertEquals(-1,sb.lastIndexOf('z',1));}"
"org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String",0,"public void testIndexOf_String(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(0,sb.indexOf(""a""));assertEquals(""abab"".indexOf(""a""),sb.indexOf(""a""));assertEquals(0,sb.indexOf(""ab""));assertEquals(""abab"".indexOf(""ab""),sb.indexOf(""ab""));assertEquals(1,sb.indexOf(""b""));assertEquals(""abab"".indexOf(""b""),sb.indexOf(""b""));assertEquals(1,sb.indexOf(""ba""));assertEquals(""abab"".indexOf(""ba""),sb.indexOf(""ba""));assertEquals(-1,sb.indexOf(""z""));assertEquals(-1,sb.indexOf((String)null));}"
"org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String_int",0,"public void testIndexOf_String_int(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(0,sb.indexOf(""a"",-1));assertEquals(0,sb.indexOf(""a"",0));assertEquals(2,sb.indexOf(""a"",1));assertEquals(2,sb.indexOf(""a"",2));assertEquals(-1,sb.indexOf(""a"",3));assertEquals(-1,sb.indexOf(""a"",4));assertEquals(-1,sb.indexOf(""a"",5));assertEquals(-1,sb.indexOf(""abcdef"",0));assertEquals(0,sb.indexOf("""",0));assertEquals(1,sb.indexOf("""",1));assertEquals(""abab"".indexOf(""a"",1),sb.indexOf(""a"",1));assertEquals(2,sb.indexOf(""ab"",1));assertEquals(""abab"".indexOf(""ab"",1),sb.indexOf(""ab"",1));assertEquals(3,sb.indexOf(""b"",2));assertEquals(""abab"".indexOf(""b"",2),sb.indexOf(""b"",2));assertEquals(1,sb.indexOf(""ba"",1));assertEquals(""abab"".indexOf(""ba"",2),sb.indexOf(""ba"",2));assertEquals(-1,sb.indexOf(""z"",2));sb=new StrBuilder(""xyzabc"");assertEquals(2,sb.indexOf(""za"",0));assertEquals(-1,sb.indexOf(""za"",3));assertEquals(-1,sb.indexOf((String)null,2));}"
"org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String",0,"public void testLastIndexOf_String(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(2,sb.lastIndexOf(""a""));assertEquals(""abab"".lastIndexOf(""a""),sb.lastIndexOf(""a""));assertEquals(2,sb.lastIndexOf(""ab""));assertEquals(""abab"".lastIndexOf(""ab""),sb.lastIndexOf(""ab""));assertEquals(3,sb.lastIndexOf(""b""));assertEquals(""abab"".lastIndexOf(""b""),sb.lastIndexOf(""b""));assertEquals(1,sb.lastIndexOf(""ba""));assertEquals(""abab"".lastIndexOf(""ba""),sb.lastIndexOf(""ba""));assertEquals(-1,sb.lastIndexOf(""z""));assertEquals(-1,sb.lastIndexOf((String)null));}"
"org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String_int",0,"public void testLastIndexOf_String_int(){StrBuilder sb=new StrBuilder(""abab"");assertEquals(-1,sb.lastIndexOf(""a"",-1));assertEquals(0,sb.lastIndexOf(""a"",0));assertEquals(0,sb.lastIndexOf(""a"",1));assertEquals(2,sb.lastIndexOf(""a"",2));assertEquals(2,sb.lastIndexOf(""a"",3));assertEquals(2,sb.lastIndexOf(""a"",4));assertEquals(2,sb.lastIndexOf(""a"",5));assertEquals(-1,sb.lastIndexOf(""abcdef"",3));assertEquals(""abab"".lastIndexOf("""",3),sb.lastIndexOf("""",3));assertEquals(""abab"".lastIndexOf("""",1),sb.lastIndexOf("""",1));assertEquals(""abab"".lastIndexOf(""a"",1),sb.lastIndexOf(""a"",1));assertEquals(0,sb.lastIndexOf(""ab"",1));assertEquals(""abab"".lastIndexOf(""ab"",1),sb.lastIndexOf(""ab"",1));assertEquals(1,sb.lastIndexOf(""b"",2));assertEquals(""abab"".lastIndexOf(""b"",2),sb.lastIndexOf(""b"",2));assertEquals(1,sb.lastIndexOf(""ba"",2));assertEquals(""abab"".lastIndexOf(""ba"",2),sb.lastIndexOf(""ba"",2));assertEquals(-1,sb.lastIndexOf(""z"",2));sb=new StrBuilder(""xyzabc"");assertEquals(2,sb.lastIndexOf(""za"",sb.length()));assertEquals(-1,sb.lastIndexOf(""za"",1));assertEquals(-1,sb.lastIndexOf((String)null,2));}"
"org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher",0,"public void testIndexOf_StrMatcher(){StrBuilder sb=new StrBuilder();assertEquals(-1,sb.indexOf((StrMatcher)null));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('a')));sb.append(""ab bd"");assertEquals(0,sb.indexOf(StrMatcher.charMatcher('a')));assertEquals(1,sb.indexOf(StrMatcher.charMatcher('b')));assertEquals(2,sb.indexOf(StrMatcher.spaceMatcher()));assertEquals(4,sb.indexOf(StrMatcher.charMatcher('d')));assertEquals(-1,sb.indexOf(StrMatcher.noneMatcher()));assertEquals(-1,sb.indexOf((StrMatcher)null));sb.append("" A1 junction"");assertEquals(6,sb.indexOf(A_NUMBER_MATCHER));}"
"org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher_int",0,"public void testIndexOf_StrMatcher_int(){StrBuilder sb=new StrBuilder();assertEquals(-1,sb.indexOf((StrMatcher)null,2));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('a'),2));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('a'),0));sb.append(""ab bd"");assertEquals(0,sb.indexOf(StrMatcher.charMatcher('a'),-2));assertEquals(0,sb.indexOf(StrMatcher.charMatcher('a'),0));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('a'),2));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('a'),20));assertEquals(1,sb.indexOf(StrMatcher.charMatcher('b'),-1));assertEquals(1,sb.indexOf(StrMatcher.charMatcher('b'),0));assertEquals(1,sb.indexOf(StrMatcher.charMatcher('b'),1));assertEquals(3,sb.indexOf(StrMatcher.charMatcher('b'),2));assertEquals(3,sb.indexOf(StrMatcher.charMatcher('b'),3));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('b'),4));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('b'),5));assertEquals(-1,sb.indexOf(StrMatcher.charMatcher('b'),6));assertEquals(2,sb.indexOf(StrMatcher.spaceMatcher(),-2));assertEquals(2,sb.indexOf(StrMatcher.spaceMatcher(),0));assertEquals(2,sb.indexOf(StrMatcher.spaceMatcher(),2));assertEquals(-1,sb.indexOf(StrMatcher.spaceMatcher(),4));assertEquals(-1,sb.indexOf(StrMatcher.spaceMatcher(),20));assertEquals(-1,sb.indexOf(StrMatcher.noneMatcher(),0));assertEquals(-1,sb.indexOf((StrMatcher)null,0));sb.append("" A1 junction with A2"");assertEquals(6,sb.indexOf(A_NUMBER_MATCHER,5));assertEquals(6,sb.indexOf(A_NUMBER_MATCHER,6));assertEquals(23,sb.indexOf(A_NUMBER_MATCHER,7));assertEquals(23,sb.indexOf(A_NUMBER_MATCHER,22));assertEquals(23,sb.indexOf(A_NUMBER_MATCHER,23));assertEquals(-1,sb.indexOf(A_NUMBER_MATCHER,24));}"
"org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher",0,"public void testLastIndexOf_StrMatcher(){StrBuilder sb=new StrBuilder();assertEquals(-1,sb.lastIndexOf((StrMatcher)null));assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('a')));sb.append(""ab bd"");assertEquals(0,sb.lastIndexOf(StrMatcher.charMatcher('a')));assertEquals(3,sb.lastIndexOf(StrMatcher.charMatcher('b')));assertEquals(2,sb.lastIndexOf(StrMatcher.spaceMatcher()));assertEquals(4,sb.lastIndexOf(StrMatcher.charMatcher('d')));assertEquals(-1,sb.lastIndexOf(StrMatcher.noneMatcher()));assertEquals(-1,sb.lastIndexOf((StrMatcher)null));sb.append("" A1 junction"");assertEquals(6,sb.lastIndexOf(A_NUMBER_MATCHER));}"
"org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher_int",0,"public void testLastIndexOf_StrMatcher_int(){StrBuilder sb=new StrBuilder();assertEquals(-1,sb.lastIndexOf((StrMatcher)null,2));assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('a'),2));assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('a'),0));assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('a'),-1));sb.append(""ab bd"");assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('a'),-2));assertEquals(0,sb.lastIndexOf(StrMatcher.charMatcher('a'),0));assertEquals(0,sb.lastIndexOf(StrMatcher.charMatcher('a'),2));assertEquals(0,sb.lastIndexOf(StrMatcher.charMatcher('a'),20));assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('b'),-1));assertEquals(-1,sb.lastIndexOf(StrMatcher.charMatcher('b'),0));assertEquals(1,sb.lastIndexOf(StrMatcher.charMatcher('b'),1));assertEquals(1,sb.lastIndexOf(StrMatcher.charMatcher('b'),2));assertEquals(3,sb.lastIndexOf(StrMatcher.charMatcher('b'),3));assertEquals(3,sb.lastIndexOf(StrMatcher.charMatcher('b'),4));assertEquals(3,sb.lastIndexOf(StrMatcher.charMatcher('b'),5));assertEquals(3,sb.lastIndexOf(StrMatcher.charMatcher('b'),6));assertEquals(-1,sb.lastIndexOf(StrMatcher.spaceMatcher(),-2));assertEquals(-1,sb.lastIndexOf(StrMatcher.spaceMatcher(),0));assertEquals(2,sb.lastIndexOf(StrMatcher.spaceMatcher(),2));assertEquals(2,sb.lastIndexOf(StrMatcher.spaceMatcher(),4));assertEquals(2,sb.lastIndexOf(StrMatcher.spaceMatcher(),20));assertEquals(-1,sb.lastIndexOf(StrMatcher.noneMatcher(),0));assertEquals(-1,sb.lastIndexOf((StrMatcher)null,0));sb.append("" A1 junction with A2"");assertEquals(-1,sb.lastIndexOf(A_NUMBER_MATCHER,5));assertEquals(-1,sb.lastIndexOf(A_NUMBER_MATCHER,6));assertEquals(6,sb.lastIndexOf(A_NUMBER_MATCHER,7));assertEquals(6,sb.lastIndexOf(A_NUMBER_MATCHER,22));assertEquals(6,sb.lastIndexOf(A_NUMBER_MATCHER,23));assertEquals(23,sb.lastIndexOf(A_NUMBER_MATCHER,24));}"
"org.apache.commons.lang.text.StrBuilderTest.testAsTokenizer",0,"public void testAsTokenizer()throws Exception {StrBuilder b=new StrBuilder();b.append(""a b "");StrTokenizer t=b.asTokenizer();String[]tokens1=t.getTokenArray();assertEquals(2,tokens1.length);assertEquals(""a"",tokens1[0]);assertEquals(""b"",tokens1[1]);assertEquals(2,t.size());b.append(""c d "");String[]tokens2=t.getTokenArray();assertEquals(2,tokens2.length);assertEquals(""a"",tokens2[0]);assertEquals(""b"",tokens2[1]);assertEquals(2,t.size());assertEquals(""a"",t.next());assertEquals(""b"",t.next());t.reset();String[]tokens3=t.getTokenArray();assertEquals(4,tokens3.length);assertEquals(""a"",tokens3[0]);assertEquals(""b"",tokens3[1]);assertEquals(""c"",tokens3[2]);assertEquals(""d"",tokens3[3]);assertEquals(4,t.size());assertEquals(""a"",t.next());assertEquals(""b"",t.next());assertEquals(""c"",t.next());assertEquals(""d"",t.next());assertEquals(""a b c d "",t.getContent());}"
"org.apache.commons.lang.text.StrBuilderTest.testAsReader",0,"public void testAsReader()throws Exception {StrBuilder sb=new StrBuilder(""some text"");Reader reader=sb.asReader();assertEquals(true,reader.ready());char[]buf=new char[40];assertEquals(9,reader.read(buf));assertEquals(""some text"",new String(buf,0,9));assertEquals(-1,reader.read());assertEquals(false,reader.ready());assertEquals(0,reader.skip(2));assertEquals(0,reader.skip(-1));assertEquals(true,reader.markSupported());reader=sb.asReader();assertEquals('s',reader.read());reader.mark(-1);char[]array=new char[3];assertEquals(3,reader.read(array,0,3));assertEquals('o',array[0]);assertEquals('m',array[1]);assertEquals('e',array[2]);reader.reset();assertEquals(1,reader.read(array,1,1));assertEquals('o',array[0]);assertEquals('o',array[1]);assertEquals('e',array[2]);assertEquals(2,reader.skip(2));assertEquals(' ',reader.read());assertEquals(true,reader.ready());reader.close();assertEquals(true,reader.ready());reader=sb.asReader();array=new char[3];try {reader.read(array,-1,0);fail();}catch(IndexOutOfBoundsException ex){}try {reader.read(array,0,-1);fail();}catch(IndexOutOfBoundsException ex){}try {reader.read(array,100,1);fail();}catch(IndexOutOfBoundsException ex){}try {reader.read(array,0,100);fail();}catch(IndexOutOfBoundsException ex){}try {reader.read(array,Integer.MAX_VALUE,Integer.MAX_VALUE);fail();}catch(IndexOutOfBoundsException ex){}assertEquals(0,reader.read(array,0,0));assertEquals(0,array[0]);assertEquals(0,array[1]);assertEquals(0,array[2]);reader.skip(9);assertEquals(-1,reader.read(array,0,1));reader.reset();array=new char[30];assertEquals(9,reader.read(array,0,30));}"
"org.apache.commons.lang.text.StrBuilderTest.testAsWriter",0,"public void testAsWriter()throws Exception {StrBuilder sb=new StrBuilder(""base"");Writer writer=sb.asWriter();writer.write('l');assertEquals(""basel"",sb.toString());writer.write(new char[]{'i','n'});assertEquals(""baselin"",sb.toString());writer.write(new char[]{'n','e','r'},1,2);assertEquals(""baseliner"",sb.toString());writer.write("" rout"");assertEquals(""baseliner rout"",sb.toString());writer.write(""ping that server"",1,3);assertEquals(""baseliner routing"",sb.toString());writer.flush();assertEquals(""baseliner routing"",sb.toString());writer.close();assertEquals(""baseliner routing"",sb.toString());writer.write("" hi"");assertEquals(""baseliner routing hi"",sb.toString());sb.setLength(4);writer.write('d');assertEquals(""based"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testEqualsIgnoreCase",0,"public void testEqualsIgnoreCase(){StrBuilder sb1=new StrBuilder();StrBuilder sb2=new StrBuilder();assertEquals(true,sb1.equalsIgnoreCase(sb1));assertEquals(true,sb1.equalsIgnoreCase(sb2));assertEquals(true,sb2.equalsIgnoreCase(sb2));sb1.append(""abc"");assertEquals(false,sb1.equalsIgnoreCase(sb2));sb2.append(""ABC"");assertEquals(true,sb1.equalsIgnoreCase(sb2));sb2.clear().append(""abc"");assertEquals(true,sb1.equalsIgnoreCase(sb2));assertEquals(true,sb1.equalsIgnoreCase(sb1));assertEquals(true,sb2.equalsIgnoreCase(sb2));sb2.clear().append(""aBc"");assertEquals(true,sb1.equalsIgnoreCase(sb2));}"
"org.apache.commons.lang.text.StrBuilderTest.testEquals",0,"public void testEquals(){StrBuilder sb1=new StrBuilder();StrBuilder sb2=new StrBuilder();assertEquals(true,sb1.equals(sb2));assertEquals(true,sb1.equals(sb1));assertEquals(true,sb2.equals(sb2));assertEquals(true,sb1.equals((Object)sb2));sb1.append(""abc"");assertEquals(false,sb1.equals(sb2));assertEquals(false,sb1.equals((Object)sb2));sb2.append(""ABC"");assertEquals(false,sb1.equals(sb2));assertEquals(false,sb1.equals((Object)sb2));sb2.clear().append(""abc"");assertEquals(true,sb1.equals(sb2));assertEquals(true,sb1.equals((Object)sb2));assertEquals(false,sb1.equals(new Integer(1)));assertEquals(false,sb1.equals(""abc""));}"
"org.apache.commons.lang.text.StrBuilderTest.testHashCode",0,"public void testHashCode(){StrBuilder sb=new StrBuilder();int hc1a=sb.hashCode();int hc1b=sb.hashCode();assertEquals(0,hc1a);assertEquals(hc1a,hc1b);sb.append(""abc"");int hc2a=sb.hashCode();int hc2b=sb.hashCode();assertEquals(true,hc2a != 0);assertEquals(hc2a,hc2b);}"
"org.apache.commons.lang.text.StrBuilderTest.testToString",0,"public void testToString(){StrBuilder sb=new StrBuilder(""abc"");assertEquals(""abc"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderTest.testToStringBuffer",0,"public void testToStringBuffer(){StrBuilder sb=new StrBuilder();assertEquals(new StringBuffer().toString(),sb.toStringBuffer().toString());sb.append(""junit"");assertEquals(new StringBuffer(""junit"").toString(),sb.toStringBuffer().toString());}"
"org.apache.commons.lang.StringUtilsIsTest.testIsAlpha",0,"public void testIsAlpha(){assertEquals(false,StringUtils.isAlpha(null));assertEquals(true,StringUtils.isAlpha(""""));assertEquals(false,StringUtils.isAlpha("" ""));assertEquals(true,StringUtils.isAlpha(""a""));assertEquals(true,StringUtils.isAlpha(""A""));assertEquals(true,StringUtils.isAlpha(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));assertEquals(false,StringUtils.isAlpha(""ham kso""));assertEquals(false,StringUtils.isAlpha(""1""));assertEquals(false,StringUtils.isAlpha(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));assertEquals(false,StringUtils.isAlpha(""_""));assertEquals(false,StringUtils.isAlpha(""hkHKHik*khbkuh""));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsAlphanumeric",0,"public void testIsAlphanumeric(){assertEquals(false,StringUtils.isAlphanumeric(null));assertEquals(true,StringUtils.isAlphanumeric(""""));assertEquals(false,StringUtils.isAlphanumeric("" ""));assertEquals(true,StringUtils.isAlphanumeric(""a""));assertEquals(true,StringUtils.isAlphanumeric(""A""));assertEquals(true,StringUtils.isAlphanumeric(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));assertEquals(false,StringUtils.isAlphanumeric(""ham kso""));assertEquals(true,StringUtils.isAlphanumeric(""1""));assertEquals(true,StringUtils.isAlphanumeric(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));assertEquals(false,StringUtils.isAlphanumeric(""_""));assertEquals(false,StringUtils.isAlphanumeric(""hkHKHik*khbkuh""));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsWhitespace",0,"public void testIsWhitespace(){assertEquals(false,StringUtils.isWhitespace(null));assertEquals(true,StringUtils.isWhitespace(""""));assertEquals(true,StringUtils.isWhitespace("" ""));assertEquals(true,StringUtils.isWhitespace(""\t \n \t""));assertEquals(false,StringUtils.isWhitespace(""\t aa\n \t""));assertEquals(true,StringUtils.isWhitespace("" ""));assertEquals(false,StringUtils.isWhitespace("" a ""));assertEquals(false,StringUtils.isWhitespace(""a  ""));assertEquals(false,StringUtils.isWhitespace(""  a""));assertEquals(false,StringUtils.isWhitespace(""aba""));assertEquals(true,StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));assertEquals(false,StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsAlphaspace",0,"public void testIsAlphaspace(){assertEquals(false,StringUtils.isAlphaSpace(null));assertEquals(true,StringUtils.isAlphaSpace(""""));assertEquals(true,StringUtils.isAlphaSpace("" ""));assertEquals(true,StringUtils.isAlphaSpace(""a""));assertEquals(true,StringUtils.isAlphaSpace(""A""));assertEquals(true,StringUtils.isAlphaSpace(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));assertEquals(true,StringUtils.isAlphaSpace(""ham kso""));assertEquals(false,StringUtils.isAlphaSpace(""1""));assertEquals(false,StringUtils.isAlphaSpace(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));assertEquals(false,StringUtils.isAlphaSpace(""_""));assertEquals(false,StringUtils.isAlphaSpace(""hkHKHik*khbkuh""));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsAlphanumericSpace",0,"public void testIsAlphanumericSpace(){assertEquals(false,StringUtils.isAlphanumericSpace(null));assertEquals(true,StringUtils.isAlphanumericSpace(""""));assertEquals(true,StringUtils.isAlphanumericSpace("" ""));assertEquals(true,StringUtils.isAlphanumericSpace(""a""));assertEquals(true,StringUtils.isAlphanumericSpace(""A""));assertEquals(true,StringUtils.isAlphanumericSpace(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));assertEquals(true,StringUtils.isAlphanumericSpace(""ham kso""));assertEquals(true,StringUtils.isAlphanumericSpace(""1""));assertEquals(true,StringUtils.isAlphanumericSpace(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));assertEquals(false,StringUtils.isAlphanumericSpace(""_""));assertEquals(false,StringUtils.isAlphanumericSpace(""hkHKHik*khbkuh""));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsAsciiPrintable_String",0,"public void testIsAsciiPrintable_String(){assertEquals(false,StringUtils.isAsciiPrintable(null));assertEquals(true,StringUtils.isAsciiPrintable(""""));assertEquals(true,StringUtils.isAsciiPrintable("" ""));assertEquals(true,StringUtils.isAsciiPrintable(""a""));assertEquals(true,StringUtils.isAsciiPrintable(""A""));assertEquals(true,StringUtils.isAsciiPrintable(""1""));assertEquals(true,StringUtils.isAsciiPrintable(""Ceki""));assertEquals(true,StringUtils.isAsciiPrintable(""!ab2c~""));assertEquals(true,StringUtils.isAsciiPrintable(""1000""));assertEquals(true,StringUtils.isAsciiPrintable(""10 00""));assertEquals(false,StringUtils.isAsciiPrintable(""10\t00""));assertEquals(true,StringUtils.isAsciiPrintable(""10.00""));assertEquals(true,StringUtils.isAsciiPrintable(""10,00""));assertEquals(true,StringUtils.isAsciiPrintable(""!ab-c~""));assertEquals(true,StringUtils.isAsciiPrintable(""hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug""));assertEquals(true,StringUtils.isAsciiPrintable(""\u0020""));assertEquals(true,StringUtils.isAsciiPrintable(""\u0021""));assertEquals(true,StringUtils.isAsciiPrintable(""\u007e""));assertEquals(false,StringUtils.isAsciiPrintable(""\u007f""));assertEquals(true,StringUtils.isAsciiPrintable(""G?lc?""));assertEquals(true,StringUtils.isAsciiPrintable(""=?iso-8859-1?Q?G=FClc=FC?=""));assertEquals(false,StringUtils.isAsciiPrintable(""G\u00fclc\u00fc""));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsNumeric",0,"public void testIsNumeric(){assertEquals(false,StringUtils.isNumeric(null));assertEquals(true,StringUtils.isNumeric(""""));assertEquals(false,StringUtils.isNumeric("" ""));assertEquals(false,StringUtils.isNumeric(""a""));assertEquals(false,StringUtils.isNumeric(""A""));assertEquals(false,StringUtils.isNumeric(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));assertEquals(false,StringUtils.isNumeric(""ham kso""));assertEquals(true,StringUtils.isNumeric(""1""));assertEquals(true,StringUtils.isNumeric(""1000""));assertEquals(false,StringUtils.isNumeric(""2.3""));assertEquals(false,StringUtils.isNumeric(""10 00""));assertEquals(false,StringUtils.isNumeric(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));assertEquals(false,StringUtils.isNumeric(""_""));assertEquals(false,StringUtils.isNumeric(""hkHKHik*khbkuh""));}"
"org.apache.commons.lang.StringUtilsIsTest.testIsNumericSpace",0,"public void testIsNumericSpace(){assertEquals(false,StringUtils.isNumericSpace(null));assertEquals(true,StringUtils.isNumericSpace(""""));assertEquals(true,StringUtils.isNumericSpace("" ""));assertEquals(false,StringUtils.isNumericSpace(""a""));assertEquals(false,StringUtils.isNumericSpace(""A""));assertEquals(false,StringUtils.isNumericSpace(""kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl""));assertEquals(false,StringUtils.isNumericSpace(""ham kso""));assertEquals(true,StringUtils.isNumericSpace(""1""));assertEquals(true,StringUtils.isNumericSpace(""1000""));assertEquals(false,StringUtils.isNumericSpace(""2.3""));assertEquals(true,StringUtils.isNumericSpace(""10 00""));assertEquals(false,StringUtils.isNumericSpace(""hkHKHik6iUGHKJgU7tUJgKJGI87GIkug""));assertEquals(false,StringUtils.isNumericSpace(""_""));assertEquals(false,StringUtils.isNumericSpace(""hkHKHik*khbkuh""));}"
"org.apache.commons.lang.enum.EnumTest.testName",0,"public void testName(){assertEquals(""Red"",ColorEnum.RED.getName());assertEquals(""Green"",ColorEnum.GREEN.getName());assertEquals(""Blue"",ColorEnum.BLUE.getName());}"
"org.apache.commons.lang.enum.EnumTest.testCompareTo",0,"public void testCompareTo(){assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.BLUE)== 0);assertTrue(ColorEnum.RED.compareTo(ColorEnum.BLUE)> 0);assertTrue(ColorEnum.BLUE.compareTo(ColorEnum.RED)< 0);try {ColorEnum.RED.compareTo(null);fail();}catch(NullPointerException ex){}try {ColorEnum.RED.compareTo(new Object());fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.enum.EnumTest.testEquals",0,"public void testEquals(){assertSame(ColorEnum.RED,ColorEnum.RED);assertSame(ColorEnum.getEnum(""Red""),ColorEnum.RED);assertEquals(false,ColorEnum.RED.equals(null));assertEquals(true,ColorEnum.RED.equals(ColorEnum.RED));assertEquals(true,ColorEnum.RED.equals(ColorEnum.getEnum(""Red"")));}"
"org.apache.commons.lang.enum.EnumTest.testHashCode",0,"public void testHashCode(){assertEquals(ColorEnum.RED.hashCode(),ColorEnum.RED.hashCode());assertEquals(7 + ColorEnum.class.hashCode()+ 3 * ""Red"".hashCode(),ColorEnum.RED.hashCode());}"
"org.apache.commons.lang.enum.EnumTest.testToString",0,"public void testToString(){String toString=ColorEnum.RED.toString();assertEquals(""ColorEnum[Red]"",toString);assertSame(toString,ColorEnum.RED.toString());}"
"org.apache.commons.lang.enum.EnumTest.testIterator",0,"public void testIterator(){Iterator it=ColorEnum.iterator();assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testList",0,"public void testList(){List list=new ArrayList(ColorEnum.getEnumList());assertNotNull(list);assertEquals(list.size(),ColorEnum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testMap",0,"public void testMap(){Map map=new HashMap(ColorEnum.getEnumMap());assertNotNull(map);assertTrue(map.containsValue(ColorEnum.RED));assertTrue(map.containsValue(ColorEnum.GREEN));assertTrue(map.containsValue(ColorEnum.BLUE));assertSame(ColorEnum.RED,map.get(""Red""));assertSame(ColorEnum.GREEN,map.get(""Green""));assertSame(ColorEnum.BLUE,map.get(""Blue""));assertEquals(map.keySet().size(),ColorEnum.getEnumList().size());}"
"org.apache.commons.lang.enum.EnumTest.testGet",0,"public void testGet(){assertSame(ColorEnum.RED,ColorEnum.getEnum(""Red""));assertSame(ColorEnum.GREEN,ColorEnum.getEnum(""Green""));assertSame(ColorEnum.BLUE,ColorEnum.getEnum(""Blue""));assertSame(null,ColorEnum.getEnum(""Pink""));}"
"org.apache.commons.lang.enum.EnumTest.testSerialization",0,"public void testSerialization(){int hashCode=ColorEnum.RED.hashCode();assertSame(ColorEnum.RED,SerializationUtils.clone(ColorEnum.RED));assertEquals(hashCode,SerializationUtils.clone(ColorEnum.RED).hashCode());assertSame(ColorEnum.GREEN,SerializationUtils.clone(ColorEnum.GREEN));assertSame(ColorEnum.BLUE,SerializationUtils.clone(ColorEnum.BLUE));}"
"org.apache.commons.lang.enum.EnumTest.testBroken1",0,"public void testBroken1(){try {Broken1Enum.RED.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken2",0,"public void testBroken2(){try {Broken2Enum.RED.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken3",0,"public void testBroken3(){try {Broken3Enum.RED.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken1Operation",0,"public void testBroken1Operation(){try {Broken1OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken2Operation",0,"public void testBroken2Operation(){try {Broken2OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken3Operation",0,"public void testBroken3Operation(){try {Broken3OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken4Operation",0,"public void testBroken4Operation(){try {Broken4OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testBroken5Operation",0,"public void testBroken5Operation(){try {Broken5OperationEnum.PLUS.getName();fail();}catch(ExceptionInInitializerError ex){assertTrue(ex.getException()instanceof IllegalArgumentException);}}"
"org.apache.commons.lang.enum.EnumTest.testOperationGet",0,"public void testOperationGet(){assertSame(OperationEnum.PLUS,OperationEnum.getEnum(""Plus""));assertSame(OperationEnum.MINUS,OperationEnum.getEnum(""Minus""));assertSame(null,OperationEnum.getEnum(""Pink""));}"
"org.apache.commons.lang.enum.EnumTest.testOperationSerialization",0,"public void testOperationSerialization(){assertSame(OperationEnum.PLUS,SerializationUtils.clone(OperationEnum.PLUS));assertSame(OperationEnum.MINUS,SerializationUtils.clone(OperationEnum.MINUS));}"
"org.apache.commons.lang.enum.EnumTest.testOperationToString",0,"public void testOperationToString(){assertEquals(""OperationEnum[Plus]"",OperationEnum.PLUS.toString());}"
"org.apache.commons.lang.enum.EnumTest.testOperationList",0,"public void testOperationList(){List list=OperationEnum.getEnumList();assertNotNull(list);assertEquals(2,list.size());assertEquals(list.size(),OperationEnum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(OperationEnum.PLUS,it.next());assertSame(OperationEnum.MINUS,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testOperationMap",0,"public void testOperationMap(){Map map=OperationEnum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),OperationEnum.getEnumList().size());assertTrue(map.containsValue(OperationEnum.PLUS));assertTrue(map.containsValue(OperationEnum.MINUS));assertSame(OperationEnum.PLUS,map.get(""Plus""));assertSame(OperationEnum.MINUS,map.get(""Minus""));}"
"org.apache.commons.lang.enum.EnumTest.testOperationCalculation",0,"public void testOperationCalculation(){assertEquals(3,OperationEnum.PLUS.eval(1,2));assertEquals(-1,OperationEnum.MINUS.eval(1,2));}"
"org.apache.commons.lang.enum.EnumTest.testExtended1Get",0,"public void testExtended1Get(){assertSame(Extended1Enum.ALPHA,Extended1Enum.getEnum(""Alpha""));assertSame(Extended1Enum.BETA,Extended1Enum.getEnum(""Beta""));assertSame(null,Extended1Enum.getEnum(""Gamma""));assertSame(null,Extended1Enum.getEnum(""Delta""));}"
"org.apache.commons.lang.enum.EnumTest.testExtended2Get",0,"public void testExtended2Get(){assertSame(Extended1Enum.ALPHA,Extended2Enum.ALPHA);assertSame(Extended1Enum.BETA,Extended2Enum.BETA);assertSame(Extended2Enum.ALPHA,Extended2Enum.getEnum(""Alpha""));assertSame(Extended2Enum.BETA,Extended2Enum.getEnum(""Beta""));assertSame(Extended2Enum.GAMMA,Extended2Enum.getEnum(""Gamma""));assertSame(null,Extended2Enum.getEnum(""Delta""));}"
"org.apache.commons.lang.enum.EnumTest.testExtended3Get",0,"public void testExtended3Get(){assertSame(Extended2Enum.ALPHA,Extended3Enum.ALPHA);assertSame(Extended2Enum.BETA,Extended3Enum.BETA);assertSame(Extended2Enum.GAMMA,Extended3Enum.GAMMA);assertSame(Extended3Enum.ALPHA,Extended3Enum.getEnum(""Alpha""));assertSame(Extended3Enum.BETA,Extended3Enum.getEnum(""Beta""));assertSame(Extended3Enum.GAMMA,Extended3Enum.getEnum(""Gamma""));assertSame(Extended3Enum.DELTA,Extended3Enum.getEnum(""Delta""));}"
"org.apache.commons.lang.enum.EnumTest.testExtendedSerialization",0,"public void testExtendedSerialization(){assertSame(Extended1Enum.ALPHA,SerializationUtils.clone(Extended1Enum.ALPHA));assertSame(Extended1Enum.BETA,SerializationUtils.clone(Extended1Enum.BETA));assertSame(Extended2Enum.GAMMA,SerializationUtils.clone(Extended2Enum.GAMMA));assertSame(Extended3Enum.DELTA,SerializationUtils.clone(Extended3Enum.DELTA));}"
"org.apache.commons.lang.enum.EnumTest.testExtendedToString",0,"public void testExtendedToString(){assertEquals(""Extended1Enum[Alpha]"",Extended1Enum.ALPHA.toString());assertEquals(""Extended1Enum[Beta]"",Extended1Enum.BETA.toString());assertEquals(""Extended1Enum[Alpha]"",Extended2Enum.ALPHA.toString());assertEquals(""Extended1Enum[Beta]"",Extended2Enum.BETA.toString());assertEquals(""Extended2Enum[Gamma]"",Extended2Enum.GAMMA.toString());assertEquals(""Extended1Enum[Alpha]"",Extended3Enum.ALPHA.toString());assertEquals(""Extended1Enum[Beta]"",Extended3Enum.BETA.toString());assertEquals(""Extended2Enum[Gamma]"",Extended3Enum.GAMMA.toString());assertEquals(""Extended3Enum[Delta]"",Extended3Enum.DELTA.toString());}"
"org.apache.commons.lang.enum.EnumTest.testExtended1List",0,"public void testExtended1List(){List list=Extended1Enum.getEnumList();assertNotNull(list);assertEquals(2,list.size());assertEquals(list.size(),Extended1Enum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(Extended1Enum.ALPHA,it.next());assertSame(Extended1Enum.BETA,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testExtended2List",0,"public void testExtended2List(){List list=Extended2Enum.getEnumList();assertNotNull(list);assertEquals(3,list.size());assertEquals(list.size(),Extended2Enum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(Extended2Enum.ALPHA,it.next());assertSame(Extended2Enum.BETA,it.next());assertSame(Extended2Enum.GAMMA,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testExtended3List",0,"public void testExtended3List(){List list=Extended3Enum.getEnumList();assertNotNull(list);assertEquals(4,list.size());assertEquals(list.size(),Extended3Enum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(Extended3Enum.ALPHA,it.next());assertSame(Extended3Enum.BETA,it.next());assertSame(Extended3Enum.GAMMA,it.next());assertSame(Extended3Enum.DELTA,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testExtended1Map",0,"public void testExtended1Map(){Map map=Extended1Enum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),Extended1Enum.getEnumList().size());assertTrue(map.containsValue(Extended1Enum.ALPHA));assertTrue(map.containsValue(Extended1Enum.BETA));assertSame(Extended1Enum.ALPHA,map.get(""Alpha""));assertSame(Extended1Enum.BETA,map.get(""Beta""));}"
"org.apache.commons.lang.enum.EnumTest.testExtended2Map",0,"public void testExtended2Map(){Map map=Extended2Enum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),Extended2Enum.getEnumList().size());assertTrue(map.containsValue(Extended2Enum.ALPHA));assertTrue(map.containsValue(Extended2Enum.BETA));assertTrue(map.containsValue(Extended2Enum.GAMMA));assertSame(Extended2Enum.ALPHA,map.get(""Alpha""));assertSame(Extended2Enum.BETA,map.get(""Beta""));assertSame(Extended2Enum.GAMMA,map.get(""Gamma""));}"
"org.apache.commons.lang.enum.EnumTest.testExtended3Map",0,"public void testExtended3Map(){Map map=Extended3Enum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),Extended3Enum.getEnumList().size());assertTrue(map.containsValue(Extended3Enum.ALPHA));assertTrue(map.containsValue(Extended3Enum.BETA));assertTrue(map.containsValue(Extended3Enum.GAMMA));assertTrue(map.containsValue(Extended3Enum.DELTA));assertSame(Extended3Enum.ALPHA,map.get(""Alpha""));assertSame(Extended3Enum.BETA,map.get(""Beta""));assertSame(Extended3Enum.GAMMA,map.get(""Gamma""));assertSame(Extended3Enum.DELTA,map.get(""Delta""));}"
"org.apache.commons.lang.enum.EnumTest.testNested",0,"public void testNested(){List list=new ArrayList(Nest.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(Nest.ColorEnum.RED,it.next());assertSame(Nest.ColorEnum.GREEN,it.next());assertSame(Nest.ColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testNestedBroken",0,"public void testNestedBroken(){List list=new ArrayList(NestBroken.ColorEnum.getEnumList());try {assertEquals(0,list.size());}catch(AssertionFailedError ex){assertEquals(3,list.size());}new NestBroken();list=new ArrayList(NestBroken.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(NestBroken.RED,it.next());assertSame(NestBroken.GREEN,it.next());assertSame(NestBroken.BLUE,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testNestedLinked",0,"public void testNestedLinked(){List list=new ArrayList(NestLinked.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(NestLinked.RED,it.next());assertSame(NestLinked.GREEN,it.next());assertSame(NestLinked.BLUE,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testNestedReferenced",0,"public void testNestedReferenced(){List list=new ArrayList(NestReferenced.ColorEnum.getEnumList());assertEquals(3,list.size());Iterator it=list.iterator();assertSame(NestReferenced.RED,it.next());assertSame(NestReferenced.GREEN,it.next());assertSame(NestReferenced.BLUE,it.next());}"
"org.apache.commons.lang.enum.EnumTest.testColorEnumEqualsWithDifferentClassLoaders",0,"public void testColorEnumEqualsWithDifferentClassLoaders(){}"
"org.apache.commons.lang.enum.EnumTest.testWithDifferentClassLoaders",0,"void testWithDifferentClassLoaders(ColorEnum colorEnum)throws ClassNotFoundException,SecurityException,NoSuchMethodException,IllegalArgumentException,IllegalAccessException,InvocationTargetException {assertTrue(colorEnum.equals(colorEnum));assertNotNull(ColorEnum.class.getClassLoader());ClassLoader classLoader=ClassUtilsTest.newSystemClassLoader();Object enumObjectFromOtherClassLoader=this.getColorEnum(classLoader,colorEnum.getName());try {ColorEnum testCase=(ColorEnum)enumObjectFromOtherClassLoader;fail(""Should have thrown a ClassCastException for "" + testCase);}catch(ClassCastException e){}assertEquals(""The two objects should match even though they are from different class loaders"",colorEnum,enumObjectFromOtherClassLoader);int falseCount=0;for (Iterator iter=ColorEnum.iterator();iter.hasNext();){ColorEnum element=(ColorEnum)iter.next();if (!colorEnum.equals(element)){falseCount++;assertFalse(enumObjectFromOtherClassLoader.equals(element));}}assertEquals(ColorEnum.getEnumList().size()- 1,falseCount);falseCount=0;for (Iterator iter=ColorEnum.iterator();iter.hasNext();){ColorEnum element=(ColorEnum)iter.next();if (!colorEnum.equals(element)){falseCount++;assertFalse(((Comparable)enumObjectFromOtherClassLoader).compareTo(element)== 0);}}assertEquals(ColorEnum.getEnumList().size()- 1,falseCount);}"
"org.apache.commons.lang.enum.EnumTest.testEqualsToWrongInstance",0,"public void testEqualsToWrongInstance(){for (Iterator iter=ColorEnum.iterator();iter.hasNext();){ColorEnum element=(ColorEnum)iter.next();this.testEqualsToWrongInstance(element);}}"
"org.apache.commons.lang.CharRangeTest.testClass",0,"public void testClass(){assertEquals(true,Modifier.isPublic(CharRange.class.getModifiers()));assertEquals(true,Modifier.isFinal(CharRange.class.getModifiers()));}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_Char",0,"public void testConstructorAccessors_Char(){CharRange rangea=new CharRange('a');assertEquals('a',rangea.getStart());assertEquals('a',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharBoolean_Normal",0,"public void testConstructorAccessors_CharBoolean_Normal(){CharRange rangea=new CharRange('a');assertEquals('a',rangea.getStart());assertEquals('a',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharBoolean_Negated",0,"public void testConstructorAccessors_CharBoolean_Negated(){CharRange rangea=new CharRange('a',true);assertEquals('a',rangea.getStart());assertEquals('a',rangea.getEnd());assertEquals(true,rangea.isNegated());assertEquals(""^a"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharChar_Same",0,"public void testConstructorAccessors_CharChar_Same(){CharRange rangea=new CharRange('a','a');assertEquals('a',rangea.getStart());assertEquals('a',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharChar_Normal",0,"public void testConstructorAccessors_CharChar_Normal(){CharRange rangea=new CharRange('a','e');assertEquals('a',rangea.getStart());assertEquals('e',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a-e"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharChar_Reversed",0,"public void testConstructorAccessors_CharChar_Reversed(){CharRange rangea=new CharRange('e','a');assertEquals('a',rangea.getStart());assertEquals('e',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a-e"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_Same",0,"public void testConstructorAccessors_CharCharBoolean_Same(){CharRange rangea=new CharRange('a','a',false);assertEquals('a',rangea.getStart());assertEquals('a',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_Normal",0,"public void testConstructorAccessors_CharCharBoolean_Normal(){CharRange rangea=new CharRange('a','e',false);assertEquals('a',rangea.getStart());assertEquals('e',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a-e"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_Reversed",0,"public void testConstructorAccessors_CharCharBoolean_Reversed(){CharRange rangea=new CharRange('e','a',false);assertEquals('a',rangea.getStart());assertEquals('e',rangea.getEnd());assertEquals(false,rangea.isNegated());assertEquals(""a-e"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_SameNegated",0,"public void testConstructorAccessors_CharCharBoolean_SameNegated(){CharRange rangea=new CharRange('a','a',true);assertEquals('a',rangea.getStart());assertEquals('a',rangea.getEnd());assertEquals(true,rangea.isNegated());assertEquals(""^a"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_NormalNegated",0,"public void testConstructorAccessors_CharCharBoolean_NormalNegated(){CharRange rangea=new CharRange('a','e',true);assertEquals('a',rangea.getStart());assertEquals('e',rangea.getEnd());assertEquals(true,rangea.isNegated());assertEquals(""^a-e"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testConstructorAccessors_CharCharBoolean_ReversedNegated",0,"public void testConstructorAccessors_CharCharBoolean_ReversedNegated(){CharRange rangea=new CharRange('e','a',true);assertEquals('a',rangea.getStart());assertEquals('e',rangea.getEnd());assertEquals(true,rangea.isNegated());assertEquals(""^a-e"",rangea.toString());}"
"org.apache.commons.lang.CharRangeTest.testEquals_Object",0,"public void testEquals_Object(){CharRange rangea=new CharRange('a');CharRange rangeae=new CharRange('a','e');CharRange rangenotbf=new CharRange('b','f',false);assertEquals(false,rangea.equals(null));assertEquals(true,rangea.equals(rangea));assertEquals(true,rangea.equals(new CharRange('a')));assertEquals(true,rangeae.equals(rangeae));assertEquals(true,rangeae.equals(new CharRange('a','e')));assertEquals(true,rangenotbf.equals(rangenotbf));assertEquals(true,rangenotbf.equals(new CharRange('b','f',false)));assertEquals(false,rangea.equals(rangeae));assertEquals(false,rangea.equals(rangenotbf));assertEquals(false,rangeae.equals(rangea));assertEquals(false,rangeae.equals(rangenotbf));assertEquals(false,rangenotbf.equals(rangea));assertEquals(false,rangenotbf.equals(rangeae));}"
"org.apache.commons.lang.CharRangeTest.testHashCode",0,"public void testHashCode(){CharRange rangea=new CharRange('a');CharRange rangeae=new CharRange('a','e');CharRange rangenotbf=new CharRange('b','f',false);assertEquals(true,rangea.hashCode()== rangea.hashCode());assertEquals(true,rangea.hashCode()== new CharRange('a').hashCode());assertEquals(true,rangeae.hashCode()== rangeae.hashCode());assertEquals(true,rangeae.hashCode()== new CharRange('a','e').hashCode());assertEquals(true,rangenotbf.hashCode()== rangenotbf.hashCode());assertEquals(true,rangenotbf.hashCode()== new CharRange('b','f',false).hashCode());assertEquals(false,rangea.hashCode()== rangeae.hashCode());assertEquals(false,rangea.hashCode()== rangenotbf.hashCode());assertEquals(false,rangeae.hashCode()== rangea.hashCode());assertEquals(false,rangeae.hashCode()== rangenotbf.hashCode());assertEquals(false,rangenotbf.hashCode()== rangea.hashCode());assertEquals(false,rangenotbf.hashCode()== rangeae.hashCode());}"
"org.apache.commons.lang.CharRangeTest.testContains_Char",0,"public void testContains_Char(){CharRange range=new CharRange('c');assertEquals(false,range.contains('b'));assertEquals(true,range.contains('c'));assertEquals(false,range.contains('d'));assertEquals(false,range.contains('e'));range=new CharRange('c','d');assertEquals(false,range.contains('b'));assertEquals(true,range.contains('c'));assertEquals(true,range.contains('d'));assertEquals(false,range.contains('e'));range=new CharRange('d','c');assertEquals(false,range.contains('b'));assertEquals(true,range.contains('c'));assertEquals(true,range.contains('d'));assertEquals(false,range.contains('e'));range=new CharRange('c','d',false);assertEquals(false,range.contains('b'));assertEquals(true,range.contains('c'));assertEquals(true,range.contains('d'));assertEquals(false,range.contains('e'));range=new CharRange('c','d',true);assertEquals(true,range.contains('b'));assertEquals(false,range.contains('c'));assertEquals(false,range.contains('d'));assertEquals(true,range.contains('e'));assertEquals(true,range.contains((char)0));assertEquals(true,range.contains(Character.MAX_VALUE));}"
"org.apache.commons.lang.CharRangeTest.testContains_Charrange",0,"public void testContains_Charrange(){CharRange a=new CharRange('a');CharRange b=new CharRange('b');CharRange c=new CharRange('c');CharRange c2=new CharRange('c');CharRange d=new CharRange('d');CharRange e=new CharRange('e');CharRange cd=new CharRange('c','d');CharRange bd=new CharRange('b','d');CharRange bc=new CharRange('b','c');CharRange ab=new CharRange('a','b');CharRange de=new CharRange('d','e');CharRange ef=new CharRange('e','f');CharRange ae=new CharRange('a','e');assertEquals(false,c.contains(b));assertEquals(true,c.contains(c));assertEquals(true,c.contains(c2));assertEquals(false,c.contains(d));assertEquals(false,c.contains(cd));assertEquals(false,c.contains(bd));assertEquals(false,c.contains(bc));assertEquals(false,c.contains(ab));assertEquals(false,c.contains(de));assertEquals(true,cd.contains(c));assertEquals(true,bd.contains(c));assertEquals(true,bc.contains(c));assertEquals(false,ab.contains(c));assertEquals(false,de.contains(c));assertEquals(true,ae.contains(b));assertEquals(true,ae.contains(ab));assertEquals(true,ae.contains(bc));assertEquals(true,ae.contains(cd));assertEquals(true,ae.contains(de));CharRange notb=new CharRange('b','b',true);CharRange notc=new CharRange('c','c',true);CharRange notd=new CharRange('d','d',true);CharRange notab=new CharRange('a','b',true);CharRange notbc=new CharRange('b','c',true);CharRange notbd=new CharRange('b','d',true);CharRange notcd=new CharRange('c','d',true);CharRange notde=new CharRange('d','e',true);CharRange notae=new CharRange('a','e',true);CharRange all=new CharRange((char)0,Character.MAX_VALUE);CharRange allbutfirst=new CharRange((char)1,Character.MAX_VALUE);assertEquals(false,c.contains(notc));assertEquals(false,c.contains(notbd));assertEquals(true,all.contains(notc));assertEquals(true,all.contains(notbd));assertEquals(false,allbutfirst.contains(notc));assertEquals(false,allbutfirst.contains(notbd));assertEquals(true,notc.contains(a));assertEquals(true,notc.contains(b));assertEquals(false,notc.contains(c));assertEquals(true,notc.contains(d));assertEquals(true,notc.contains(e));assertEquals(true,notc.contains(ab));assertEquals(false,notc.contains(bc));assertEquals(false,notc.contains(bd));assertEquals(false,notc.contains(cd));assertEquals(true,notc.contains(de));assertEquals(false,notc.contains(ae));assertEquals(false,notc.contains(all));assertEquals(false,notc.contains(allbutfirst));assertEquals(true,notbd.contains(a));assertEquals(false,notbd.contains(b));assertEquals(false,notbd.contains(c));assertEquals(false,notbd.contains(d));assertEquals(true,notbd.contains(e));assertEquals(true,notcd.contains(ab));assertEquals(false,notcd.contains(bc));assertEquals(false,notcd.contains(bd));assertEquals(false,notcd.contains(cd));assertEquals(false,notcd.contains(de));assertEquals(false,notcd.contains(ae));assertEquals(true,notcd.contains(ef));assertEquals(false,notcd.contains(all));assertEquals(false,notcd.contains(allbutfirst));assertEquals(false,notc.contains(notb));assertEquals(true,notc.contains(notc));assertEquals(false,notc.contains(notd));assertEquals(false,notc.contains(notab));assertEquals(true,notc.contains(notbc));assertEquals(true,notc.contains(notbd));assertEquals(true,notc.contains(notcd));assertEquals(false,notc.contains(notde));assertEquals(false,notbd.contains(notb));assertEquals(false,notbd.contains(notc));assertEquals(false,notbd.contains(notd));assertEquals(false,notbd.contains(notab));assertEquals(false,notbd.contains(notbc));assertEquals(true,notbd.contains(notbd));assertEquals(false,notbd.contains(notcd));assertEquals(false,notbd.contains(notde));assertEquals(true,notbd.contains(notae));}"
"org.apache.commons.lang.CharRangeTest.testContainsNullArg",0,"public void testContainsNullArg(){CharRange range=new CharRange('a');try {boolean contains=range.contains(null);}catch(IllegalArgumentException e){assertEquals(""The Range must not be null"",e.getMessage());}}"
"org.apache.commons.lang.CharRangeTest.testSerialization",0,"public void testSerialization(){CharRange range=new CharRange('a');assertEquals(range,SerializationUtils.clone(range));range=new CharRange('a','e');assertEquals(range,SerializationUtils.clone(range));range=new CharRange('a','e',true);assertEquals(range,SerializationUtils.clone(range));}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExclude",0,"public void test_toStringExclude(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),SECRET_FIELD);this.validateSecretFieldAbsent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArray",0,"public void test_toStringExcludeArray(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),new String[]{SECRET_FIELD});this.validateSecretFieldAbsent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNull",0,"public void test_toStringExcludeArrayWithNull(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),new String[]{null});this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeArrayWithNulls",0,"public void test_toStringExcludeArrayWithNulls(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),new String[]{null,null});this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollection",0,"public void test_toStringExcludeCollection(){List excludeList=new ArrayList();excludeList.add(SECRET_FIELD);String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),excludeList);this.validateSecretFieldAbsent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNull",0,"public void test_toStringExcludeCollectionWithNull(){List excludeList=new ArrayList();excludeList.add(null);String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),excludeList);this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeCollectionWithNulls",0,"public void test_toStringExcludeCollectionWithNulls(){List excludeList=new ArrayList();excludeList.add(null);excludeList.add(null);String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),excludeList);this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyArray",0,"public void test_toStringExcludeEmptyArray(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),ArrayUtils.EMPTY_STRING_ARRAY);this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeEmptyCollection",0,"public void test_toStringExcludeEmptyCollection(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),new ArrayList());this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullArray",0,"public void test_toStringExcludeNullArray(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),(String[])null);this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.builder.ReflectionToStringBuilderExcludeTest.test_toStringExcludeNullCollection",0,"public void test_toStringExcludeNullCollection(){String toString=ReflectionToStringBuilder.toStringExclude(new TestFixture(),(Collection)null);this.validateSecretFieldPresent(toString);}"
"org.apache.commons.lang.StringUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new StringUtils());Constructor[]cons=StringUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(StringUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(StringUtils.class.getModifiers()));}"
"org.apache.commons.lang.StringUtilsTest.testCaseFunctions",0,"public void testCaseFunctions(){assertEquals(null,StringUtils.upperCase(null));assertEquals(null,StringUtils.lowerCase(null));assertEquals(null,StringUtils.capitalize(null));assertEquals(null,StringUtils.uncapitalise(null));assertEquals(null,StringUtils.uncapitalize(null));assertEquals(""capitalise(String)failed"",FOO_CAP,StringUtils.capitalise(FOO_UNCAP));assertEquals(""capitalise(empty-string)failed"","""",StringUtils.capitalise(""""));assertEquals(""capitalise(single-char-string)failed"",""X"",StringUtils.capitalise(""x""));assertEquals(""capitalize(String)failed"",FOO_CAP,StringUtils.capitalize(FOO_UNCAP));assertEquals(""capitalize(empty-string)failed"","""",StringUtils.capitalize(""""));assertEquals(""capitalize(single-char-string)failed"",""X"",StringUtils.capitalize(""x""));assertEquals(""uncapitalise(String)failed"",FOO_UNCAP,StringUtils.uncapitalise(FOO_CAP));assertEquals(""uncapitalise(empty-string)failed"","""",StringUtils.uncapitalise(""""));assertEquals(""uncapitalise(single-char-string)failed"",""x"",StringUtils.uncapitalise(""X""));assertEquals(""uncapitalize(String)failed"",FOO_UNCAP,StringUtils.uncapitalize(FOO_CAP));assertEquals(""uncapitalize(empty-string)failed"","""",StringUtils.uncapitalize(""""));assertEquals(""uncapitalize(single-char-string)failed"",""x"",StringUtils.uncapitalize(""X""));assertEquals(""uncapitalise(capitalise(String))failed"",SENTENCE_UNCAP,StringUtils.uncapitalise(StringUtils.capitalise(SENTENCE_UNCAP)));assertEquals(""capitalise(uncapitalise(String))failed"",SENTENCE_CAP,StringUtils.capitalise(StringUtils.uncapitalise(SENTENCE_CAP)));assertEquals(""uncapitalize(capitalize(String))failed"",SENTENCE_UNCAP,StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)));assertEquals(""capitalize(uncapitalize(String))failed"",SENTENCE_CAP,StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)));assertEquals(""uncapitalise(capitalise(String))failed"",FOO_UNCAP,StringUtils.uncapitalise(StringUtils.capitalise(FOO_UNCAP)));assertEquals(""capitalise(uncapitalise(String))failed"",FOO_CAP,StringUtils.capitalise(StringUtils.uncapitalise(FOO_CAP)));assertEquals(""uncapitalize(capitalize(String))failed"",FOO_UNCAP,StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)));assertEquals(""capitalize(uncapitalize(String))failed"",FOO_CAP,StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)));assertEquals(""upperCase(String)failed"",""FOO TEST THING"",StringUtils.upperCase(""fOo test THING""));assertEquals(""upperCase(empty-string)failed"","""",StringUtils.upperCase(""""));assertEquals(""lowerCase(String)failed"",""foo test thing"",StringUtils.lowerCase(""fOo test THING""));assertEquals(""lowerCase(empty-string)failed"","""",StringUtils.lowerCase(""""));}"
"org.apache.commons.lang.StringUtilsTest.testSwapCase_String",0,"public void testSwapCase_String(){assertEquals(null,StringUtils.swapCase(null));assertEquals("""",StringUtils.swapCase(""""));assertEquals(""  "",StringUtils.swapCase(""  ""));assertEquals(""i"",WordUtils.swapCase(""I""));assertEquals(""I"",WordUtils.swapCase(""i""));assertEquals(""I AM HERE 123"",StringUtils.swapCase(""i am here 123""));assertEquals(""i aM hERE 123"",StringUtils.swapCase(""I Am Here 123""));assertEquals(""I AM here 123"",StringUtils.swapCase(""i am HERE 123""));assertEquals(""i am here 123"",StringUtils.swapCase(""I AM HERE 123""));String test=""This String contains a TitleCase character: \u01C8"";String expect=""tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"";assertEquals(expect,WordUtils.swapCase(test));}"
"org.apache.commons.lang.StringUtilsTest.testJoin_Objectarray",0,"public void testJoin_Objectarray(){assertEquals(null,StringUtils.join(null));assertEquals("""",StringUtils.join(EMPTY_ARRAY_LIST));assertEquals("""",StringUtils.join(NULL_ARRAY_LIST));assertEquals(""abc"",StringUtils.join(new String[]{""a"",""b"",""c""}));assertEquals(""a"",StringUtils.join(new String[]{null,""a"",""""}));assertEquals(""foo"",StringUtils.join(MIXED_ARRAY_LIST));assertEquals(""foo2"",StringUtils.join(MIXED_TYPE_LIST));}"
"org.apache.commons.lang.StringUtilsTest.testJoin_ArrayChar",0,"public void testJoin_ArrayChar(){assertEquals(null,StringUtils.join((Object[])null,','));assertEquals(TEXT_LIST_CHAR,StringUtils.join(ARRAY_LIST,SEPARATOR_CHAR));assertEquals("""",StringUtils.join(EMPTY_ARRAY_LIST,SEPARATOR_CHAR));assertEquals("";;foo"",StringUtils.join(MIXED_ARRAY_LIST,SEPARATOR_CHAR));assertEquals(""foo;2"",StringUtils.join(MIXED_TYPE_LIST,SEPARATOR_CHAR));}"
"org.apache.commons.lang.StringUtilsTest.testJoin_ArrayString",0,"public void testJoin_ArrayString(){assertEquals(null,StringUtils.join((Object[])null,null));assertEquals(TEXT_LIST_NOSEP,StringUtils.join(ARRAY_LIST,null));assertEquals(TEXT_LIST_NOSEP,StringUtils.join(ARRAY_LIST,""""));assertEquals("""",StringUtils.join(NULL_ARRAY_LIST,null));assertEquals("""",StringUtils.join(EMPTY_ARRAY_LIST,null));assertEquals("""",StringUtils.join(EMPTY_ARRAY_LIST,""""));assertEquals("""",StringUtils.join(EMPTY_ARRAY_LIST,SEPARATOR));assertEquals(TEXT_LIST,StringUtils.join(ARRAY_LIST,SEPARATOR));assertEquals("",,foo"",StringUtils.join(MIXED_ARRAY_LIST,SEPARATOR));assertEquals(""foo,2"",StringUtils.join(MIXED_TYPE_LIST,SEPARATOR));}"
"org.apache.commons.lang.StringUtilsTest.testJoin_IteratorChar",0,"public void testJoin_IteratorChar(){assertEquals(null,StringUtils.join((Iterator)null,','));assertEquals(TEXT_LIST_CHAR,StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),SEPARATOR_CHAR));assertEquals("""",StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(),SEPARATOR_CHAR));assertEquals("""",StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),SEPARATOR_CHAR));}"
"org.apache.commons.lang.StringUtilsTest.testJoin_IteratorString",0,"public void testJoin_IteratorString(){assertEquals(null,StringUtils.join((Iterator)null,null));assertEquals(TEXT_LIST_NOSEP,StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),null));assertEquals(TEXT_LIST_NOSEP,StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),""""));assertEquals("""",StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(),null));assertEquals("""",StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),null));assertEquals("""",StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),""""));assertEquals("""",StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),SEPARATOR));assertEquals(TEXT_LIST,StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),SEPARATOR));}"
"org.apache.commons.lang.StringUtilsTest.testConcatenate_Objectarray",0,"public void testConcatenate_Objectarray(){assertEquals(null,StringUtils.concatenate(null));assertEquals("""",StringUtils.concatenate(EMPTY_ARRAY_LIST));assertEquals("""",StringUtils.concatenate(NULL_ARRAY_LIST));assertEquals(""foo"",StringUtils.concatenate(MIXED_ARRAY_LIST));assertEquals(""foo2"",StringUtils.concatenate(MIXED_TYPE_LIST));}"
"org.apache.commons.lang.StringUtilsTest.testSplit_String",0,"public void testSplit_String(){assertEquals(null,StringUtils.split(null));assertEquals(0,StringUtils.split("""").length);String str=""a b  .c"";String[]res=StringUtils.split(str);assertEquals(3,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals("".c"",res[2]);str="" a "";res=StringUtils.split(str);assertEquals(1,res.length);assertEquals(""a"",res[0]);str=""a"" + WHITESPACE + ""b""+ NON_WHITESPACE+ ""c"";res=StringUtils.split(str);assertEquals(2,res.length);assertEquals(""a"",res[0]);assertEquals(""b"" + NON_WHITESPACE + ""c"",res[1]);}"
"org.apache.commons.lang.StringUtilsTest.testSplit_StringChar",0,"public void testSplit_StringChar(){assertEquals(null,StringUtils.split(null,'.'));assertEquals(0,StringUtils.split("""",'.').length);String str=""a.b.. c"";String[]res=StringUtils.split(str,'.');assertEquals(3,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals("" c"",res[2]);str="".a."";res=StringUtils.split(str,'.');assertEquals(1,res.length);assertEquals(""a"",res[0]);str=""a b c"";res=StringUtils.split(str,' ');assertEquals(3,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals(""c"",res[2]);}"
"org.apache.commons.lang.StringUtilsTest.testSplit_StringString_StringStringInt",0,"public void testSplit_StringString_StringStringInt(){assertEquals(null,StringUtils.split(null,"".""));assertEquals(null,StringUtils.split(null,""."",3));assertEquals(0,StringUtils.split("""",""."").length);assertEquals(0,StringUtils.split("""",""."",3).length);innerTestSplit('.',""."",' ');innerTestSplit('.',""."",',');innerTestSplit('.',"".,"",'x');for (int i=0;i < WHITESPACE.length();i++){for (int j=0;j < NON_WHITESPACE.length();j++){innerTestSplit(WHITESPACE.charAt(i),null,NON_WHITESPACE.charAt(j));innerTestSplit(WHITESPACE.charAt(i),String.valueOf(WHITESPACE.charAt(i)),NON_WHITESPACE.charAt(j));}}String[]results=null;String[]expectedResults={""ab"",""de fg""};results=StringUtils.split(""ab   de fg"",null,2);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}String[]expectedResults2={""ab"",""cd:ef""};results=StringUtils.split(""ab:cd:ef"","":"",2);assertEquals(expectedResults2.length,results.length);for (int i=0;i < expectedResults2.length;i++){assertEquals(expectedResults2[i],results[i]);}}"
"org.apache.commons.lang.StringUtilsTest.testSplitByWholeString_StringStringBoolean",0,"public void testSplitByWholeString_StringStringBoolean(){assertEquals(null,StringUtils.splitByWholeSeparator(null,"".""));assertEquals(0,StringUtils.splitByWholeSeparator("""",""."").length);String stringToSplitOnNulls=""ab   de fg"";String[]splitOnNullExpectedResults={""ab"",""de"",""fg""};String[]splitOnNullResults=StringUtils.splitByWholeSeparator(""ab   de fg"",null);assertEquals(splitOnNullExpectedResults.length,splitOnNullResults.length);for (int i=0;i < splitOnNullExpectedResults.length;i+=1){assertEquals(splitOnNullExpectedResults[i],splitOnNullResults[i]);}String stringToSplitOnCharactersAndString=""abstemiouslyaeiouyabstemiously"";String[]splitOnStringExpectedResults={""abstemiously"",""abstemiously""};String[]splitOnStringResults=StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString,""aeiouy"");assertEquals(splitOnStringExpectedResults.length,splitOnStringResults.length);for (int i=0;i < splitOnStringExpectedResults.length;i+=1){assertEquals(splitOnStringExpectedResults[i],splitOnStringResults[i]);}String[]splitWithMultipleSeparatorExpectedResults={""ab"",""cd"",""ef""};String[]splitWithMultipleSeparator=StringUtils.splitByWholeSeparator(""ab:cd::ef"","":"");assertEquals(splitWithMultipleSeparatorExpectedResults.length,splitWithMultipleSeparator.length);for (int i=0;i < splitWithMultipleSeparatorExpectedResults.length;i++){assertEquals(splitWithMultipleSeparatorExpectedResults[i],splitWithMultipleSeparator[i]);}}"
"org.apache.commons.lang.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt",0,"public void testSplitByWholeString_StringStringBooleanInt(){assertEquals(null,StringUtils.splitByWholeSeparator(null,""."",3));assertEquals(0,StringUtils.splitByWholeSeparator("""",""."",3).length);String stringToSplitOnNulls=""ab   de fg"";String[]splitOnNullExpectedResults={""ab"",""de fg""};String[]splitOnNullResults=StringUtils.splitByWholeSeparator(stringToSplitOnNulls,null,2);assertEquals(splitOnNullExpectedResults.length,splitOnNullResults.length);for (int i=0;i < splitOnNullExpectedResults.length;i+=1){assertEquals(splitOnNullExpectedResults[i],splitOnNullResults[i]);}String stringToSplitOnCharactersAndString=""abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"";String[]splitOnStringExpectedResults={""abstemiously"",""abstemiouslyaeiouyabstemiously""};String[]splitOnStringResults=StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString,""aeiouy"",2);assertEquals(splitOnStringExpectedResults.length,splitOnStringResults.length);for (int i=0;i < splitOnStringExpectedResults.length;i++){assertEquals(splitOnStringExpectedResults[i],splitOnStringResults[i]);}}"
"org.apache.commons.lang.StringUtilsTest.testSplitPreserveAllTokens_String",0,"public void testSplitPreserveAllTokens_String(){assertEquals(null,StringUtils.splitPreserveAllTokens(null));assertEquals(0,StringUtils.splitPreserveAllTokens("""").length);String str=""a b .c"";String[]res=StringUtils.splitPreserveAllTokens(str);assertEquals(3,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals("".c"",res[2]);str="" a b .c"";res=StringUtils.splitPreserveAllTokens(str);assertEquals(4,res.length);assertEquals("""",res[0]);assertEquals(""a"",res[1]);assertEquals(""b"",res[2]);assertEquals("".c"",res[3]);str=""a  b  .c"";res=StringUtils.splitPreserveAllTokens(str);assertEquals(5,res.length);assertEquals(""a"",res[0]);assertEquals("""",res[1]);assertEquals(""b"",res[2]);assertEquals("""",res[3]);assertEquals("".c"",res[4]);str="" a  "";res=StringUtils.splitPreserveAllTokens(str);assertEquals(4,res.length);assertEquals("""",res[0]);assertEquals(""a"",res[1]);assertEquals("""",res[2]);assertEquals("""",res[3]);str="" a  b"";res=StringUtils.splitPreserveAllTokens(str);assertEquals(4,res.length);assertEquals("""",res[0]);assertEquals(""a"",res[1]);assertEquals("""",res[2]);assertEquals(""b"",res[3]);str=""a"" + WHITESPACE + ""b""+ NON_WHITESPACE+ ""c"";res=StringUtils.splitPreserveAllTokens(str);assertEquals(WHITESPACE.length()+ 1,res.length);assertEquals(""a"",res[0]);for (int i=1;i < WHITESPACE.length()- 1;i++){assertEquals("""",res[i]);}assertEquals(""b"" + NON_WHITESPACE + ""c"",res[WHITESPACE.length()]);}"
"org.apache.commons.lang.StringUtilsTest.testSplitPreserveAllTokens_StringChar",0,"public void testSplitPreserveAllTokens_StringChar(){assertEquals(null,StringUtils.splitPreserveAllTokens(null,'.'));assertEquals(0,StringUtils.splitPreserveAllTokens("""",'.').length);String str=""a.b. c"";String[]res=StringUtils.splitPreserveAllTokens(str,'.');assertEquals(3,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals("" c"",res[2]);str=""a.b.. c"";res=StringUtils.splitPreserveAllTokens(str,'.');assertEquals(4,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals("""",res[2]);assertEquals("" c"",res[3]);str="".a."";res=StringUtils.splitPreserveAllTokens(str,'.');assertEquals(3,res.length);assertEquals("""",res[0]);assertEquals(""a"",res[1]);assertEquals("""",res[2]);str="".a.."";res=StringUtils.splitPreserveAllTokens(str,'.');assertEquals(4,res.length);assertEquals("""",res[0]);assertEquals(""a"",res[1]);assertEquals("""",res[2]);assertEquals("""",res[3]);str=""..a."";res=StringUtils.splitPreserveAllTokens(str,'.');assertEquals(4,res.length);assertEquals("""",res[0]);assertEquals("""",res[1]);assertEquals(""a"",res[2]);assertEquals("""",res[3]);str=""..a"";res=StringUtils.splitPreserveAllTokens(str,'.');assertEquals(3,res.length);assertEquals("""",res[0]);assertEquals("""",res[1]);assertEquals(""a"",res[2]);str=""a b c"";res=StringUtils.splitPreserveAllTokens(str,' ');assertEquals(3,res.length);assertEquals(""a"",res[0]);assertEquals(""b"",res[1]);assertEquals(""c"",res[2]);str=""a  b  c"";res=StringUtils.splitPreserveAllTokens(str,' ');assertEquals(5,res.length);assertEquals(""a"",res[0]);assertEquals("""",res[1]);assertEquals(""b"",res[2]);assertEquals("""",res[3]);assertEquals(""c"",res[4]);str="" a b c"";res=StringUtils.splitPreserveAllTokens(str,' ');assertEquals(4,res.length);assertEquals("""",res[0]);assertEquals(""a"",res[1]);assertEquals(""b"",res[2]);assertEquals(""c"",res[3]);str=""  a b c"";res=StringUtils.splitPreserveAllTokens(str,' ');assertEquals(5,res.length);assertEquals("""",res[0]);assertEquals("""",res[1]);assertEquals(""a"",res[2]);assertEquals(""b"",res[3]);assertEquals(""c"",res[4]);{String[]results=null;String[]expectedResults={""a"","""",""b"",""c""};results=StringUtils.splitPreserveAllTokens(""a..b.c"",'.');assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}}"
"org.apache.commons.lang.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt",0,"public void testSplitPreserveAllTokens_StringString_StringStringInt(){assertEquals(null,StringUtils.splitPreserveAllTokens(null,"".""));assertEquals(null,StringUtils.splitPreserveAllTokens(null,""."",3));assertEquals(0,StringUtils.splitPreserveAllTokens("""",""."").length);assertEquals(0,StringUtils.splitPreserveAllTokens("""",""."",3).length);innerTestSplitPreserveAllTokens('.',""."",' ');innerTestSplitPreserveAllTokens('.',""."",',');innerTestSplitPreserveAllTokens('.',"".,"",'x');for (int i=0;i < WHITESPACE.length();i++){for (int j=0;j < NON_WHITESPACE.length();j++){innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i),null,NON_WHITESPACE.charAt(j));innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i),String.valueOf(WHITESPACE.charAt(i)),NON_WHITESPACE.charAt(j));}}{String[]results=null;String[]expectedResults={""ab"",""de fg""};results=StringUtils.splitPreserveAllTokens(""ab de fg"",null,2);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"",""  de fg""};results=StringUtils.splitPreserveAllTokens(""ab   de fg"",null,2);System.out.println("""");assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"",""::de:fg""};results=StringUtils.splitPreserveAllTokens(""ab:::de:fg"","":"",2);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"","""","" de fg""};results=StringUtils.splitPreserveAllTokens(""ab   de fg"",null,3);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"","""","""",""de fg""};results=StringUtils.splitPreserveAllTokens(""ab   de fg"",null,4);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]expectedResults={""ab"",""cd:ef""};String[]results=null;results=StringUtils.splitPreserveAllTokens(""ab:cd:ef"","":"",2);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"","":cd:ef""};results=StringUtils.splitPreserveAllTokens(""ab::cd:ef"","":"",2);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"","""","":cd:ef""};results=StringUtils.splitPreserveAllTokens(""ab:::cd:ef"","":"",3);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={""ab"","""","""",""cd:ef""};results=StringUtils.splitPreserveAllTokens(""ab:::cd:ef"","":"",4);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={"""",""ab"","""","""",""cd:ef""};results=StringUtils.splitPreserveAllTokens("":ab:::cd:ef"","":"",5);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}{String[]results=null;String[]expectedResults={"""","""",""ab"","""","""",""cd:ef""};results=StringUtils.splitPreserveAllTokens(""::ab:::cd:ef"","":"",6);assertEquals(expectedResults.length,results.length);for (int i=0;i < expectedResults.length;i++){assertEquals(expectedResults[i],results[i]);}}}"
"org.apache.commons.lang.StringUtilsTest.testDeleteSpace_String",0,"public void testDeleteSpace_String(){assertEquals(null,StringUtils.deleteSpaces(null));assertEquals("""",StringUtils.deleteSpaces(""""));assertEquals("""",StringUtils.deleteSpaces(""    \t\t\n\n   ""));assertEquals(""test"",StringUtils.deleteSpaces(""t  \t\ne\rs\n\n   \tt""));}"
"org.apache.commons.lang.StringUtilsTest.testDeleteWhitespace_String",0,"public void testDeleteWhitespace_String(){assertEquals(null,StringUtils.deleteWhitespace(null));assertEquals("""",StringUtils.deleteWhitespace(""""));assertEquals("""",StringUtils.deleteWhitespace(""  \u000C  \t\t\u001F\n\n \u000B  ""));assertEquals("""",StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));assertEquals(StringUtilsTest.NON_WHITESPACE,StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));assertEquals(""\u00A0\u202F"",StringUtils.deleteWhitespace(""  \u00A0  \t\t\n\n \u202F  ""));assertEquals(""\u00A0\u202F"",StringUtils.deleteWhitespace(""\u00A0\u202F""));assertEquals(""test"",StringUtils.deleteWhitespace(""\u000Bt  \t\n\u0009e\rs\n\n   \tt""));}"
"org.apache.commons.lang.StringUtilsTest.testReplace_StringStringString",0,"public void testReplace_StringStringString(){assertEquals(null,StringUtils.replace(null,null,null));assertEquals(null,StringUtils.replace(null,null,""any""));assertEquals(null,StringUtils.replace(null,""any"",null));assertEquals(null,StringUtils.replace(null,""any"",""any""));assertEquals("""",StringUtils.replace("""",null,null));assertEquals("""",StringUtils.replace("""",null,""any""));assertEquals("""",StringUtils.replace("""",""any"",null));assertEquals("""",StringUtils.replace("""",""any"",""any""));assertEquals(""FOO"",StringUtils.replace(""FOO"","""",""any""));assertEquals(""FOO"",StringUtils.replace(""FOO"",null,""any""));assertEquals(""FOO"",StringUtils.replace(""FOO"",""F"",null));assertEquals(""FOO"",StringUtils.replace(""FOO"",null,null));assertEquals("""",StringUtils.replace(""foofoofoo"",""foo"",""""));assertEquals(""barbarbar"",StringUtils.replace(""foofoofoo"",""foo"",""bar""));assertEquals(""farfarfar"",StringUtils.replace(""foofoofoo"",""oo"",""ar""));}"
"org.apache.commons.lang.StringUtilsTest.testReplace_StringStringStringInt",0,"public void testReplace_StringStringStringInt(){assertEquals(null,StringUtils.replace(null,null,null,2));assertEquals(null,StringUtils.replace(null,null,""any"",2));assertEquals(null,StringUtils.replace(null,""any"",null,2));assertEquals(null,StringUtils.replace(null,""any"",""any"",2));assertEquals("""",StringUtils.replace("""",null,null,2));assertEquals("""",StringUtils.replace("""",null,""any"",2));assertEquals("""",StringUtils.replace("""",""any"",null,2));assertEquals("""",StringUtils.replace("""",""any"",""any"",2));String str=new String(new char[]{'o','o','f','o','o'});assertSame(str,StringUtils.replace(str,""x"","""",-1));assertEquals(""f"",StringUtils.replace(""oofoo"",""o"","""",-1));assertEquals(""oofoo"",StringUtils.replace(""oofoo"",""o"","""",0));assertEquals(""ofoo"",StringUtils.replace(""oofoo"",""o"","""",1));assertEquals(""foo"",StringUtils.replace(""oofoo"",""o"","""",2));assertEquals(""fo"",StringUtils.replace(""oofoo"",""o"","""",3));assertEquals(""f"",StringUtils.replace(""oofoo"",""o"","""",4));assertEquals(""f"",StringUtils.replace(""oofoo"",""o"","""",-5));assertEquals(""f"",StringUtils.replace(""oofoo"",""o"","""",1000));}"
"org.apache.commons.lang.StringUtilsTest.testReplaceOnce_StringStringString",0,"public void testReplaceOnce_StringStringString(){assertEquals(null,StringUtils.replaceOnce(null,null,null));assertEquals(null,StringUtils.replaceOnce(null,null,""any""));assertEquals(null,StringUtils.replaceOnce(null,""any"",null));assertEquals(null,StringUtils.replaceOnce(null,""any"",""any""));assertEquals("""",StringUtils.replaceOnce("""",null,null));assertEquals("""",StringUtils.replaceOnce("""",null,""any""));assertEquals("""",StringUtils.replaceOnce("""",""any"",null));assertEquals("""",StringUtils.replaceOnce("""",""any"",""any""));assertEquals(""FOO"",StringUtils.replaceOnce(""FOO"","""",""any""));assertEquals(""FOO"",StringUtils.replaceOnce(""FOO"",null,""any""));assertEquals(""FOO"",StringUtils.replaceOnce(""FOO"",""F"",null));assertEquals(""FOO"",StringUtils.replaceOnce(""FOO"",null,null));assertEquals(""foofoo"",StringUtils.replaceOnce(""foofoofoo"",""foo"",""""));}"
"org.apache.commons.lang.StringUtilsTest.testReplaceChars_StringCharChar",0,"public void testReplaceChars_StringCharChar(){assertEquals(null,StringUtils.replaceChars(null,'b','z'));assertEquals("""",StringUtils.replaceChars("""",'b','z'));assertEquals(""azcza"",StringUtils.replaceChars(""abcba"",'b','z'));assertEquals(""abcba"",StringUtils.replaceChars(""abcba"",'x','z'));}"
"org.apache.commons.lang.StringUtilsTest.testReplaceChars_StringStringString",0,"public void testReplaceChars_StringStringString(){assertEquals(null,StringUtils.replaceChars(null,null,null));assertEquals(null,StringUtils.replaceChars(null,"""",null));assertEquals(null,StringUtils.replaceChars(null,""a"",null));assertEquals(null,StringUtils.replaceChars(null,null,""""));assertEquals(null,StringUtils.replaceChars(null,null,""x""));assertEquals("""",StringUtils.replaceChars("""",null,null));assertEquals("""",StringUtils.replaceChars("""","""",null));assertEquals("""",StringUtils.replaceChars("""",""a"",null));assertEquals("""",StringUtils.replaceChars("""",null,""""));assertEquals("""",StringUtils.replaceChars("""",null,""x""));assertEquals(""abc"",StringUtils.replaceChars(""abc"",null,null));assertEquals(""abc"",StringUtils.replaceChars(""abc"",null,""""));assertEquals(""abc"",StringUtils.replaceChars(""abc"",null,""x""));assertEquals(""abc"",StringUtils.replaceChars(""abc"","""",null));assertEquals(""abc"",StringUtils.replaceChars(""abc"","""",""""));assertEquals(""abc"",StringUtils.replaceChars(""abc"","""",""x""));assertEquals(""ac"",StringUtils.replaceChars(""abc"",""b"",null));assertEquals(""ac"",StringUtils.replaceChars(""abc"",""b"",""""));assertEquals(""axc"",StringUtils.replaceChars(""abc"",""b"",""x""));assertEquals(""ayzya"",StringUtils.replaceChars(""abcba"",""bc"",""yz""));assertEquals(""ayya"",StringUtils.replaceChars(""abcba"",""bc"",""y""));assertEquals(""ayzya"",StringUtils.replaceChars(""abcba"",""bc"",""yzx""));assertEquals(""abcba"",StringUtils.replaceChars(""abcba"",""z"",""w""));assertSame(""abcba"",StringUtils.replaceChars(""abcba"",""z"",""w""));assertEquals(""jelly"",StringUtils.replaceChars(""hello"",""ho"",""jy""));assertEquals(""ayzya"",StringUtils.replaceChars(""abcba"",""bc"",""yz""));assertEquals(""ayya"",StringUtils.replaceChars(""abcba"",""bc"",""y""));assertEquals(""ayzya"",StringUtils.replaceChars(""abcba"",""bc"",""yzx""));assertEquals(""bcc"",StringUtils.replaceChars(""abc"",""ab"",""bc""));assertEquals(""q651.506bera"",StringUtils.replaceChars(""d216.102oren"",""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789"",""nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234""));}"
"org.apache.commons.lang.StringUtilsTest.testOverlayString_StringStringIntInt",0,"public void testOverlayString_StringStringIntInt(){assertEquals(""overlayString(String,String,int,int)failed"",""foo foor baz"",StringUtils.overlayString(SENTENCE_UNCAP,FOO_UNCAP,4,6));assertEquals(""abef"",StringUtils.overlayString(""abcdef"","""",2,4));assertEquals(""abzzzzef"",StringUtils.overlayString(""abcdef"",""zzzz"",2,4));assertEquals(""abcdzzzzcdef"",StringUtils.overlayString(""abcdef"",""zzzz"",4,2));try {StringUtils.overlayString(null,""zzzz"",2,4);fail();}catch(NullPointerException ex){}try {StringUtils.overlayString(""abcdef"",null,2,4);fail();}catch(NullPointerException ex){}try {StringUtils.overlayString(""abcdef"",""zzzz"",-1,4);fail();}catch(IndexOutOfBoundsException ex){}try {StringUtils.overlayString(""abcdef"",""zzzz"",2,8);fail();}catch(IndexOutOfBoundsException ex){}}"
"org.apache.commons.lang.StringUtilsTest.testOverlay_StringStringIntInt",0,"public void testOverlay_StringStringIntInt(){assertEquals(null,StringUtils.overlay(null,null,2,4));assertEquals(null,StringUtils.overlay(null,null,-2,-4));assertEquals("""",StringUtils.overlay("""",null,0,0));assertEquals("""",StringUtils.overlay("""","""",0,0));assertEquals(""zzzz"",StringUtils.overlay("""",""zzzz"",0,0));assertEquals(""zzzz"",StringUtils.overlay("""",""zzzz"",2,4));assertEquals(""zzzz"",StringUtils.overlay("""",""zzzz"",-2,-4));assertEquals(""abef"",StringUtils.overlay(""abcdef"",null,2,4));assertEquals(""abef"",StringUtils.overlay(""abcdef"",null,4,2));assertEquals(""abef"",StringUtils.overlay(""abcdef"","""",2,4));assertEquals(""abef"",StringUtils.overlay(""abcdef"","""",4,2));assertEquals(""abzzzzef"",StringUtils.overlay(""abcdef"",""zzzz"",2,4));assertEquals(""abzzzzef"",StringUtils.overlay(""abcdef"",""zzzz"",4,2));assertEquals(""zzzzef"",StringUtils.overlay(""abcdef"",""zzzz"",-1,4));assertEquals(""zzzzef"",StringUtils.overlay(""abcdef"",""zzzz"",4,-1));assertEquals(""zzzzabcdef"",StringUtils.overlay(""abcdef"",""zzzz"",-2,-1));assertEquals(""zzzzabcdef"",StringUtils.overlay(""abcdef"",""zzzz"",-1,-2));assertEquals(""abcdzzzz"",StringUtils.overlay(""abcdef"",""zzzz"",4,10));assertEquals(""abcdzzzz"",StringUtils.overlay(""abcdef"",""zzzz"",10,4));assertEquals(""abcdefzzzz"",StringUtils.overlay(""abcdef"",""zzzz"",8,10));assertEquals(""abcdefzzzz"",StringUtils.overlay(""abcdef"",""zzzz"",10,8));}"
"org.apache.commons.lang.StringUtilsTest.testRepeat_StringInt",0,"public void testRepeat_StringInt(){assertEquals(null,StringUtils.repeat(null,2));assertEquals("""",StringUtils.repeat(""ab"",0));assertEquals("""",StringUtils.repeat("""",3));assertEquals(""aaa"",StringUtils.repeat(""a"",3));assertEquals(""ababab"",StringUtils.repeat(""ab"",3));assertEquals(""abcabcabc"",StringUtils.repeat(""abc"",3));String str=StringUtils.repeat(""a"",10000);assertEquals(10000,str.length());assertEquals(true,StringUtils.containsOnly(str,new char[]{'a'}));}"
"org.apache.commons.lang.StringUtilsTest.testDeprecatedChompFunctions",0,"public void testDeprecatedChompFunctions(){assertEquals(""chompLast(String)failed"",FOO_UNCAP,StringUtils.chompLast(FOO_UNCAP + ""\n""));assertEquals(""chompLast(\""\"")failed"","""",StringUtils.chompLast(""""));assertEquals(""chompLast(\""test\"",\""test\"")failed"",""test"",StringUtils.chompLast(""test"",""tst""));assertEquals(""getChomp(String,String)failed"",""\n"" + FOO_UNCAP,StringUtils.getChomp(FOO_UNCAP + ""\n"" + FOO_UNCAP,""\n""));assertEquals(""getChomp(String,String)failed"",FOO_CAP,StringUtils.getChomp(FOO_CAP + FOO_CAP,FOO_CAP));assertEquals(""getChomp(String,String)failed"","""",StringUtils.getChomp(FOO_UNCAP,FOO_CAP));assertEquals(""prechomp(String,String)failed"",FOO_UNCAP,StringUtils.prechomp(FOO_UNCAP + ""\n"" + FOO_UNCAP,""\n""));assertEquals(""prechomp(String,String)failed"",FOO_UNCAP,StringUtils.prechomp(FOO_UNCAP,FOO_CAP));assertEquals(""getPrechomp(String,String)failed"",FOO_UNCAP + ""\n"",StringUtils.getPrechomp(FOO_UNCAP + ""\n"" + FOO_UNCAP,""\n""));assertEquals(""getPrechomp(String,String)failed"","""",StringUtils.getPrechomp(FOO_CAP,FOO_UNCAP));assertEquals(""chopNewline(String,String)failed"",FOO_UNCAP,StringUtils.chopNewline(FOO_UNCAP + ""\r\n""));}"
"org.apache.commons.lang.StringUtilsTest.testChop",0,"public void testChop(){String[][]chopCases={{FOO_UNCAP + ""\r\n"",FOO_UNCAP},{FOO_UNCAP + ""\n"",FOO_UNCAP},{FOO_UNCAP + ""\r"",FOO_UNCAP},{FOO_UNCAP + "" \r"",FOO_UNCAP + "" ""},{""foo"",""fo""},{""foo\nfoo"",""foo\nfo""},{""\n"",""""},{""\r"",""""},{""\r\n"",""""},{null,null},{"""",""""},{""a"",""""}};for (int i=0;i < chopCases.length;i++){String original=chopCases[i][0];String expectedResult=chopCases[i][1];assertEquals(""chop(String)failed"",expectedResult,StringUtils.chop(original));}}"
"org.apache.commons.lang.StringUtilsTest.testChomp",0,"public void testChomp(){String[][]chompCases={{FOO_UNCAP + ""\r\n"",FOO_UNCAP},{FOO_UNCAP + ""\n"",FOO_UNCAP},{FOO_UNCAP + ""\r"",FOO_UNCAP},{FOO_UNCAP + "" \r"",FOO_UNCAP + "" ""},{FOO_UNCAP,FOO_UNCAP},{FOO_UNCAP + ""\n\n"",FOO_UNCAP + ""\n""},{FOO_UNCAP + ""\r\n\r\n"",FOO_UNCAP + ""\r\n""},{""foo\nfoo"",""foo\nfoo""},{""foo\n\rfoo"",""foo\n\rfoo""},{""\n"",""""},{""\r"",""""},{""a"",""a""},{""\r\n"",""""},{"""",""""},{null,null},{FOO_UNCAP + ""\n\r"",FOO_UNCAP + ""\n""}};for (int i=0;i < chompCases.length;i++){String original=chompCases[i][0];String expectedResult=chompCases[i][1];assertEquals(""chomp(String)failed"",expectedResult,StringUtils.chomp(original));}assertEquals(""chomp(String,String)failed"",""foo"",StringUtils.chomp(""foobar"",""bar""));assertEquals(""chomp(String,String)failed"",""foobar"",StringUtils.chomp(""foobar"",""baz""));assertEquals(""chomp(String,String)failed"",""foo"",StringUtils.chomp(""foo"",""foooo""));assertEquals(""chomp(String,String)failed"",""foobar"",StringUtils.chomp(""foobar"",""""));assertEquals(""chomp(String,String)failed"",""foobar"",StringUtils.chomp(""foobar"",null));assertEquals(""chomp(String,String)failed"","""",StringUtils.chomp("""",""foo""));assertEquals(""chomp(String,String)failed"","""",StringUtils.chomp("""",null));assertEquals(""chomp(String,String)failed"","""",StringUtils.chomp("""",""""));assertEquals(""chomp(String,String)failed"",null,StringUtils.chomp(null,""foo""));assertEquals(""chomp(String,String)failed"",null,StringUtils.chomp(null,null));assertEquals(""chomp(String,String)failed"",null,StringUtils.chomp(null,""""));assertEquals(""chomp(String,String)failed"","""",StringUtils.chomp(""foo"",""foo""));assertEquals(""chomp(String,String)failed"","" "",StringUtils.chomp("" foo"",""foo""));assertEquals(""chomp(String,String)failed"",""foo "",StringUtils.chomp(""foo "",""foo""));}"
"org.apache.commons.lang.StringUtilsTest.testChopNewLine",0,"public void testChopNewLine(){String[][]newLineCases={{FOO_UNCAP + ""\r\n"",FOO_UNCAP},{FOO_UNCAP + ""\n"",FOO_UNCAP},{FOO_UNCAP + ""\r"",FOO_UNCAP + ""\r""},{FOO_UNCAP,FOO_UNCAP},{FOO_UNCAP + ""\n"" + FOO_UNCAP,FOO_UNCAP + ""\n"" + FOO_UNCAP},{FOO_UNCAP + ""\n\n"",FOO_UNCAP + ""\n""},{""\n"",""""},{"""",""""},{""\r\n"",""""}};for (int i=0;i < newLineCases.length;i++){String original=newLineCases[i][0];String expectedResult=newLineCases[i][1];assertEquals(""chopNewline(String)failed"",expectedResult,StringUtils.chopNewline(original));}}"
"org.apache.commons.lang.StringUtilsTest.testRightPad_StringInt",0,"public void testRightPad_StringInt(){assertEquals(null,StringUtils.rightPad(null,5));assertEquals(""     "",StringUtils.rightPad("""",5));assertEquals(""abc  "",StringUtils.rightPad(""abc"",5));assertEquals(""abc"",StringUtils.rightPad(""abc"",2));assertEquals(""abc"",StringUtils.rightPad(""abc"",-1));}"
"org.apache.commons.lang.StringUtilsTest.testRightPad_StringIntChar",0,"public void testRightPad_StringIntChar(){assertEquals(null,StringUtils.rightPad(null,5,' '));assertEquals(""     "",StringUtils.rightPad("""",5,' '));assertEquals(""abc  "",StringUtils.rightPad(""abc"",5,' '));assertEquals(""abc"",StringUtils.rightPad(""abc"",2,' '));assertEquals(""abc"",StringUtils.rightPad(""abc"",-1,' '));assertEquals(""abcxx"",StringUtils.rightPad(""abc"",5,'x'));String str=StringUtils.rightPad(""aaa"",10000,'a');assertEquals(10000,str.length());assertEquals(true,StringUtils.containsOnly(str,new char[]{'a'}));}"
"org.apache.commons.lang.StringUtilsTest.testRightPad_StringIntString",0,"public void testRightPad_StringIntString(){assertEquals(null,StringUtils.rightPad(null,5,""-+""));assertEquals(""     "",StringUtils.rightPad("""",5,"" ""));assertEquals(null,StringUtils.rightPad(null,8,null));assertEquals(""abc-+-+"",StringUtils.rightPad(""abc"",7,""-+""));assertEquals(""abc-+~"",StringUtils.rightPad(""abc"",6,""-+~""));assertEquals(""abc-+"",StringUtils.rightPad(""abc"",5,""-+~""));assertEquals(""abc"",StringUtils.rightPad(""abc"",2,"" ""));assertEquals(""abc"",StringUtils.rightPad(""abc"",-1,"" ""));assertEquals(""abc  "",StringUtils.rightPad(""abc"",5,null));assertEquals(""abc  "",StringUtils.rightPad(""abc"",5,""""));}"
"org.apache.commons.lang.StringUtilsTest.testLeftPad_StringInt",0,"public void testLeftPad_StringInt(){assertEquals(null,StringUtils.leftPad(null,5));assertEquals(""     "",StringUtils.leftPad("""",5));assertEquals(""  abc"",StringUtils.leftPad(""abc"",5));assertEquals(""abc"",StringUtils.leftPad(""abc"",2));}"
"org.apache.commons.lang.StringUtilsTest.testLeftPad_StringIntChar",0,"public void testLeftPad_StringIntChar(){assertEquals(null,StringUtils.leftPad(null,5,' '));assertEquals(""     "",StringUtils.leftPad("""",5,' '));assertEquals(""  abc"",StringUtils.leftPad(""abc"",5,' '));assertEquals(""xxabc"",StringUtils.leftPad(""abc"",5,'x'));assertEquals(""\uffff\uffffabc"",StringUtils.leftPad(""abc"",5,'\uffff'));assertEquals(""abc"",StringUtils.leftPad(""abc"",2,' '));String str=StringUtils.leftPad(""aaa"",10000,'a');assertEquals(10000,str.length());assertEquals(true,StringUtils.containsOnly(str,new char[]{'a'}));}"
"org.apache.commons.lang.StringUtilsTest.testLeftPad_StringIntString",0,"public void testLeftPad_StringIntString(){assertEquals(null,StringUtils.leftPad(null,5,""-+""));assertEquals(null,StringUtils.leftPad(null,5,null));assertEquals(""     "",StringUtils.leftPad("""",5,"" ""));assertEquals(""-+-+abc"",StringUtils.leftPad(""abc"",7,""-+""));assertEquals(""-+~abc"",StringUtils.leftPad(""abc"",6,""-+~""));assertEquals(""-+abc"",StringUtils.leftPad(""abc"",5,""-+~""));assertEquals(""abc"",StringUtils.leftPad(""abc"",2,"" ""));assertEquals(""abc"",StringUtils.leftPad(""abc"",-1,"" ""));assertEquals(""  abc"",StringUtils.leftPad(""abc"",5,null));assertEquals(""  abc"",StringUtils.leftPad(""abc"",5,""""));}"
"org.apache.commons.lang.StringUtilsTest.testCenter_StringInt",0,"public void testCenter_StringInt(){assertEquals(null,StringUtils.center(null,-1));assertEquals(null,StringUtils.center(null,4));assertEquals(""    "",StringUtils.center("""",4));assertEquals(""ab"",StringUtils.center(""ab"",0));assertEquals(""ab"",StringUtils.center(""ab"",-1));assertEquals(""ab"",StringUtils.center(""ab"",1));assertEquals(""    "",StringUtils.center("""",4));assertEquals("" ab "",StringUtils.center(""ab"",4));assertEquals(""abcd"",StringUtils.center(""abcd"",2));assertEquals("" a  "",StringUtils.center(""a"",4));assertEquals(""  a  "",StringUtils.center(""a"",5));}"
"org.apache.commons.lang.StringUtilsTest.testCenter_StringIntChar",0,"public void testCenter_StringIntChar(){assertEquals(null,StringUtils.center(null,-1,' '));assertEquals(null,StringUtils.center(null,4,' '));assertEquals(""    "",StringUtils.center("""",4,' '));assertEquals(""ab"",StringUtils.center(""ab"",0,' '));assertEquals(""ab"",StringUtils.center(""ab"",-1,' '));assertEquals(""ab"",StringUtils.center(""ab"",1,' '));assertEquals(""    "",StringUtils.center("""",4,' '));assertEquals("" ab "",StringUtils.center(""ab"",4,' '));assertEquals(""abcd"",StringUtils.center(""abcd"",2,' '));assertEquals("" a  "",StringUtils.center(""a"",4,' '));assertEquals(""  a  "",StringUtils.center(""a"",5,' '));assertEquals(""xxaxx"",StringUtils.center(""a"",5,'x'));}"
"org.apache.commons.lang.StringUtilsTest.testCenter_StringIntString",0,"public void testCenter_StringIntString(){assertEquals(null,StringUtils.center(null,4,null));assertEquals(null,StringUtils.center(null,-1,"" ""));assertEquals(null,StringUtils.center(null,4,"" ""));assertEquals(""    "",StringUtils.center("""",4,"" ""));assertEquals(""ab"",StringUtils.center(""ab"",0,"" ""));assertEquals(""ab"",StringUtils.center(""ab"",-1,"" ""));assertEquals(""ab"",StringUtils.center(""ab"",1,"" ""));assertEquals(""    "",StringUtils.center("""",4,"" ""));assertEquals("" ab "",StringUtils.center(""ab"",4,"" ""));assertEquals(""abcd"",StringUtils.center(""abcd"",2,"" ""));assertEquals("" a  "",StringUtils.center(""a"",4,"" ""));assertEquals(""yayz"",StringUtils.center(""a"",4,""yz""));assertEquals(""yzyayzy"",StringUtils.center(""a"",7,""yz""));assertEquals(""  abc  "",StringUtils.center(""abc"",7,null));assertEquals(""  abc  "",StringUtils.center(""abc"",7,""""));}"
"org.apache.commons.lang.StringUtilsTest.testReverse_String",0,"public void testReverse_String(){assertEquals(null,StringUtils.reverse(null));assertEquals("""",StringUtils.reverse(""""));assertEquals(""sdrawkcab"",StringUtils.reverse(""backwards""));}"
"org.apache.commons.lang.StringUtilsTest.testReverseDelimited_StringChar",0,"public void testReverseDelimited_StringChar(){assertEquals(null,StringUtils.reverseDelimited(null,'.'));assertEquals("""",StringUtils.reverseDelimited("""",'.'));assertEquals(""c.b.a"",StringUtils.reverseDelimited(""a.b.c"",'.'));assertEquals(""a b c"",StringUtils.reverseDelimited(""a b c"",'.'));assertEquals("""",StringUtils.reverseDelimited("""",'.'));}"
"org.apache.commons.lang.StringUtilsTest.testReverseDelimitedString_StringString",0,"public void testReverseDelimitedString_StringString(){assertEquals(null,StringUtils.reverseDelimitedString(null,null));assertEquals("""",StringUtils.reverseDelimitedString("""",null));assertEquals("""",StringUtils.reverseDelimitedString("""","".""));assertEquals(""a.b.c"",StringUtils.reverseDelimitedString(""a.b.c"",null));assertEquals(""c b a"",StringUtils.reverseDelimitedString(""a b c"",null));assertEquals(""c.b.a"",StringUtils.reverseDelimitedString(""a.b.c"","".""));}"
"org.apache.commons.lang.StringUtilsTest.testDefault_String",0,"public void testDefault_String(){assertEquals("""",StringUtils.defaultString(null));assertEquals("""",StringUtils.defaultString(""""));assertEquals(""abc"",StringUtils.defaultString(""abc""));}"
"org.apache.commons.lang.StringUtilsTest.testDefault_StringString",0,"public void testDefault_StringString(){assertEquals(""NULL"",StringUtils.defaultString(null,""NULL""));assertEquals("""",StringUtils.defaultString("""",""NULL""));assertEquals(""abc"",StringUtils.defaultString(""abc"",""NULL""));}"
"org.apache.commons.lang.StringUtilsTest.testDefaultIfEmpty_StringString",0,"public void testDefaultIfEmpty_StringString(){assertEquals(""NULL"",StringUtils.defaultIfEmpty(null,""NULL""));assertEquals(""NULL"",StringUtils.defaultIfEmpty("""",""NULL""));assertEquals(""abc"",StringUtils.defaultIfEmpty(""abc"",""NULL""));}"
"org.apache.commons.lang.StringUtilsTest.testEscapeFunctions_String",0,"public void testEscapeFunctions_String(){assertEquals("""",StringUtils.escape(""""));assertEquals(""abc"",StringUtils.escape(""abc""));assertEquals(""\\t"",StringUtils.escape(""\t""));assertEquals(""\\\\"",StringUtils.escape(""\\""));assertEquals(""\\\\\\b\\t\\r"",StringUtils.escape(""\\\b\t\r""));assertEquals(""\\u1234"",StringUtils.escape(""\u1234""));assertEquals(""\\u0234"",StringUtils.escape(""\u0234""));assertEquals(""\\u00FD"",StringUtils.escape(""\u00fd""));}"
"org.apache.commons.lang.StringUtilsTest.testAbbreviate_StringInt",0,"public void testAbbreviate_StringInt(){assertEquals(null,StringUtils.abbreviate(null,10));assertEquals("""",StringUtils.abbreviate("""",10));assertEquals(""short"",StringUtils.abbreviate(""short"",10));assertEquals(""Now is ..."",StringUtils.abbreviate(""Now is the time for all good men to come to the aid of their party."",10));String raspberry=""raspberry peach"";assertEquals(""raspberry p..."",StringUtils.abbreviate(raspberry,14));assertEquals(""raspberry peach"",StringUtils.abbreviate(""raspberry peach"",15));assertEquals(""raspberry peach"",StringUtils.abbreviate(""raspberry peach"",16));assertEquals(""abc..."",StringUtils.abbreviate(""abcdefg"",6));assertEquals(""abcdefg"",StringUtils.abbreviate(""abcdefg"",7));assertEquals(""abcdefg"",StringUtils.abbreviate(""abcdefg"",8));assertEquals(""a..."",StringUtils.abbreviate(""abcdefg"",4));assertEquals("""",StringUtils.abbreviate("""",4));try {String res=StringUtils.abbreviate(""abc"",3);fail(""StringUtils.abbreviate expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.StringUtilsTest.testAbbreviate_StringIntInt",0,"public void testAbbreviate_StringIntInt(){assertEquals(null,StringUtils.abbreviate(null,10,12));assertEquals("""",StringUtils.abbreviate("""",0,10));assertEquals("""",StringUtils.abbreviate("""",2,10));try {String res=StringUtils.abbreviate(""abcdefghij"",0,3);fail(""StringUtils.abbreviate expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {String res=StringUtils.abbreviate(""abcdefghij"",5,6);fail(""StringUtils.abbreviate expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}String raspberry=""raspberry peach"";assertEquals(""raspberry peach"",StringUtils.abbreviate(raspberry,11,15));assertEquals(null,StringUtils.abbreviate(null,7,14));assertAbbreviateWithOffset(""abcdefg..."",-1,10);assertAbbreviateWithOffset(""abcdefg..."",0,10);assertAbbreviateWithOffset(""abcdefg..."",1,10);assertAbbreviateWithOffset(""abcdefg..."",2,10);assertAbbreviateWithOffset(""abcdefg..."",3,10);assertAbbreviateWithOffset(""abcdefg..."",4,10);assertAbbreviateWithOffset(""...fghi..."",5,10);assertAbbreviateWithOffset(""...ghij..."",6,10);assertAbbreviateWithOffset(""...hijk..."",7,10);assertAbbreviateWithOffset(""...ijklmno"",8,10);assertAbbreviateWithOffset(""...ijklmno"",9,10);assertAbbreviateWithOffset(""...ijklmno"",10,10);assertAbbreviateWithOffset(""...ijklmno"",10,10);assertAbbreviateWithOffset(""...ijklmno"",11,10);assertAbbreviateWithOffset(""...ijklmno"",12,10);assertAbbreviateWithOffset(""...ijklmno"",13,10);assertAbbreviateWithOffset(""...ijklmno"",14,10);assertAbbreviateWithOffset(""...ijklmno"",15,10);assertAbbreviateWithOffset(""...ijklmno"",16,10);assertAbbreviateWithOffset(""...ijklmno"",Integer.MAX_VALUE,10);}"
"org.apache.commons.lang.StringUtilsTest.testDifference_StringString",0,"public void testDifference_StringString(){assertEquals(null,StringUtils.difference(null,null));assertEquals("""",StringUtils.difference("""",""""));assertEquals(""abc"",StringUtils.difference("""",""abc""));assertEquals("""",StringUtils.difference(""abc"",""""));assertEquals(""i am a robot"",StringUtils.difference(null,""i am a robot""));assertEquals(""i am a machine"",StringUtils.difference(""i am a machine"",null));assertEquals(""robot"",StringUtils.difference(""i am a machine"",""i am a robot""));assertEquals("""",StringUtils.difference(""abc"",""abc""));assertEquals(""you are a robot"",StringUtils.difference(""i am a robot"",""you are a robot""));}"
"org.apache.commons.lang.StringUtilsTest.testDifferenceAt_StringString",0,"public void testDifferenceAt_StringString(){assertEquals(-1,StringUtils.indexOfDifference(null,null));assertEquals(0,StringUtils.indexOfDifference(null,""i am a robot""));assertEquals(-1,StringUtils.indexOfDifference("""",""""));assertEquals(0,StringUtils.indexOfDifference("""",""abc""));assertEquals(0,StringUtils.indexOfDifference(""abc"",""""));assertEquals(0,StringUtils.indexOfDifference(""i am a machine"",null));assertEquals(7,StringUtils.indexOfDifference(""i am a machine"",""i am a robot""));assertEquals(-1,StringUtils.indexOfDifference(""foo"",""foo""));assertEquals(0,StringUtils.indexOfDifference(""i am a robot"",""you are a robot""));}"
"org.apache.commons.lang.StringUtilsTest.testGetLevenshteinDistance_StringString",0,"public void testGetLevenshteinDistance_StringString(){assertEquals(0,StringUtils.getLevenshteinDistance("""",""""));assertEquals(1,StringUtils.getLevenshteinDistance("""",""a""));assertEquals(7,StringUtils.getLevenshteinDistance(""aaapppp"",""""));assertEquals(1,StringUtils.getLevenshteinDistance(""frog"",""fog""));assertEquals(3,StringUtils.getLevenshteinDistance(""fly"",""ant""));assertEquals(7,StringUtils.getLevenshteinDistance(""elephant"",""hippo""));assertEquals(7,StringUtils.getLevenshteinDistance(""hippo"",""elephant""));assertEquals(8,StringUtils.getLevenshteinDistance(""hippo"",""zzzzzzzz""));assertEquals(8,StringUtils.getLevenshteinDistance(""zzzzzzzz"",""hippo""));assertEquals(1,StringUtils.getLevenshteinDistance(""hello"",""hallo""));try {int d=StringUtils.getLevenshteinDistance(""a"",null);fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {int d=StringUtils.getLevenshteinDistance(null,""a"");fail(""expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.StringUtilsTest.testEMPTY",0,"/** * A sanity check for  {@link StringUtils.EMPTY}.*/public void testEMPTY(){assertNotNull(StringUtils.EMPTY);assertEquals("""",StringUtils.EMPTY);}"
"org.apache.commons.lang.StringUtilsTest.testRemoveStart",0,"public void testRemoveStart(){assertNull(StringUtils.removeStart(null,null));assertNull(StringUtils.removeStart(null,""""));assertNull(StringUtils.removeStart(null,""a""));assertEquals(StringUtils.removeStart("""",null),"""");assertEquals(StringUtils.removeStart("""",""""),"""");assertEquals(StringUtils.removeStart("""",""a""),"""");assertEquals(StringUtils.removeStart(""www.domain.com"",""www.""),""domain.com"");assertEquals(StringUtils.removeStart(""domain.com"",""www.""),""domain.com"");assertEquals(StringUtils.removeStart(""domain.com"",""""),""domain.com"");assertEquals(StringUtils.removeStart(""domain.com"",null),""domain.com"");}"
"org.apache.commons.lang.StringUtilsTest.testRemoveEnd",0,"public void testRemoveEnd(){assertNull(StringUtils.removeEnd(null,null));assertNull(StringUtils.removeEnd(null,""""));assertNull(StringUtils.removeEnd(null,""a""));assertEquals(StringUtils.removeEnd("""",null),"""");assertEquals(StringUtils.removeEnd("""",""""),"""");assertEquals(StringUtils.removeEnd("""",""a""),"""");assertEquals(StringUtils.removeEnd(""www.domain.com"","".com""),""www.domain"");assertEquals(StringUtils.removeEnd(""www.domain"","".com""),""www.domain"");assertEquals(StringUtils.removeEnd(""domain.com"",""""),""domain.com"");assertEquals(StringUtils.removeEnd(""domain.com"",null),""domain.com"");}"
"org.apache.commons.lang.StringUtilsTest.testRemove_String",0,"public void testRemove_String(){assertEquals(null,StringUtils.remove(null,null));assertEquals(null,StringUtils.remove(null,""""));assertEquals(null,StringUtils.remove(null,""a""));assertEquals("""",StringUtils.remove("""",null));assertEquals("""",StringUtils.remove("""",""""));assertEquals("""",StringUtils.remove("""",""a""));assertEquals(null,StringUtils.remove(null,null));assertEquals("""",StringUtils.remove("""",null));assertEquals(""a"",StringUtils.remove(""a"",null));assertEquals(null,StringUtils.remove(null,""""));assertEquals("""",StringUtils.remove("""",""""));assertEquals(""a"",StringUtils.remove(""a"",""""));assertEquals(""qd"",StringUtils.remove(""queued"",""ue""));assertEquals(""queued"",StringUtils.remove(""queued"",""zz""));}"
"org.apache.commons.lang.StringUtilsTest.testRemove_char",0,"public void testRemove_char(){assertEquals(null,StringUtils.remove(null,'a'));assertEquals(null,StringUtils.remove(null,'a'));assertEquals(null,StringUtils.remove(null,'a'));assertEquals("""",StringUtils.remove("""",'a'));assertEquals("""",StringUtils.remove("""",'a'));assertEquals("""",StringUtils.remove("""",'a'));assertEquals(""qeed"",StringUtils.remove(""queued"",'u'));assertEquals(""queued"",StringUtils.remove(""queued"",'z'));}"
"org.apache.commons.lang.math.LongRangeTest.testConstructor1a",0,"public void testConstructor1a(){LongRange nr=new LongRange(8L);assertEquals(long8,nr.getMinimumNumber());assertEquals(long8,nr.getMaximumNumber());}"
"org.apache.commons.lang.math.LongRangeTest.testConstructor1b",0,"public void testConstructor1b(){LongRange nr=new LongRange(long8);assertSame(long8,nr.getMinimumNumber());assertSame(long8,nr.getMaximumNumber());Range r=new LongRange(nonComparableNumber);try {new LongRange(null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.LongRangeTest.testConstructor2a",0,"public void testConstructor2a(){LongRange nr=new LongRange(8L,10L);assertEquals(long8,nr.getMinimumNumber());assertEquals(long10,nr.getMaximumNumber());nr=new LongRange(10L,8L);assertEquals(long8,nr.getMinimumNumber());assertEquals(long10,nr.getMaximumNumber());}"
"org.apache.commons.lang.math.LongRangeTest.testConstructor2b",0,"public void testConstructor2b(){LongRange nr=new LongRange(long8,long10);assertSame(long8,nr.getMinimumNumber());assertSame(long10,nr.getMaximumNumber());nr=new LongRange(long10,long8);assertSame(long8,nr.getMinimumNumber());assertSame(long10,nr.getMaximumNumber());nr=new LongRange(long8,long10);assertSame(long8,nr.getMinimumNumber());assertEquals(long10,nr.getMaximumNumber());try {new LongRange(long8,null);fail();}catch(IllegalArgumentException ex){}try {new LongRange(null,long8);fail();}catch(IllegalArgumentException ex){}try {new LongRange(null,null);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.math.LongRangeTest.testContainsNumber",0,"public void testContainsNumber(){assertEquals(false,tenToTwenty.containsNumber(null));assertEquals(true,tenToTwenty.containsNumber(nonComparableNumber));assertEquals(false,tenToTwenty.containsNumber(five));assertEquals(true,tenToTwenty.containsNumber(ten));assertEquals(true,tenToTwenty.containsNumber(fifteen));assertEquals(true,tenToTwenty.containsNumber(twenty));assertEquals(false,tenToTwenty.containsNumber(twentyFive));assertEquals(false,tenToTwenty.containsNumber(long8));assertEquals(true,tenToTwenty.containsNumber(long10));assertEquals(true,tenToTwenty.containsNumber(long12));assertEquals(true,tenToTwenty.containsNumber(long20));assertEquals(false,tenToTwenty.containsNumber(long21));assertEquals(false,tenToTwenty.containsNumber(double8));assertEquals(true,tenToTwenty.containsNumber(double10));assertEquals(true,tenToTwenty.containsNumber(double12));assertEquals(true,tenToTwenty.containsNumber(double20));assertEquals(false,tenToTwenty.containsNumber(double21));assertEquals(false,tenToTwenty.containsNumber(float8));assertEquals(true,tenToTwenty.containsNumber(float10));assertEquals(true,tenToTwenty.containsNumber(float12));assertEquals(true,tenToTwenty.containsNumber(float20));assertEquals(false,tenToTwenty.containsNumber(float21));}"
"org.apache.commons.lang.math.LongRangeTest.testContainsLongBig",0,"public void testContainsLongBig(){LongRange big=new LongRange(Long.MAX_VALUE,Long.MAX_VALUE - 2);assertEquals(true,big.containsLong(Long.MAX_VALUE - 1));assertEquals(false,big.containsLong(Long.MAX_VALUE - 3));}"
"org.apache.commons.lang.ValidateTest.testIsTrue1",0,"public void testIsTrue1(){Validate.isTrue(true);try {Validate.isTrue(false);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated expression is false"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testIsTrue2",0,"public void testIsTrue2(){Validate.isTrue(true,""MSG"");try {Validate.isTrue(false,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testIsTrue3",0,"public void testIsTrue3(){Validate.isTrue(true,""MSG"",new Integer(6));try {Validate.isTrue(false,""MSG"",new Integer(6));fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG6"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testIsTrue4",0,"public void testIsTrue4(){Validate.isTrue(true,""MSG"",7);try {Validate.isTrue(false,""MSG"",7);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG7"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testIsTrue5",0,"public void testIsTrue5(){Validate.isTrue(true,""MSG"",7.4d);try {Validate.isTrue(false,""MSG"",7.4d);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG7.4"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNotNull1",0,"public void testNotNull1(){Validate.notNull(new Object());try {Validate.notNull(null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated object is null"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNotNull2",0,"public void testNotNull2(){Validate.notNull(new Object(),""MSG"");try {Validate.notNull(null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNotEmptyArray1",0,"public void testNotEmptyArray1(){Validate.notEmpty(new Object[]{null});try {Validate.notEmpty((Object[])null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated array is empty"",ex.getMessage());}try {Validate.notEmpty(new Object[0]);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated array is empty"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNotEmptyArray2",0,"public void testNotEmptyArray2(){Validate.notEmpty(new Object[]{null},""MSG"");try {Validate.notEmpty((Object[])null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}try {Validate.notEmpty(new Object[0],""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNotEmptyCollection1",0,"public void testNotEmptyCollection1(){Collection coll=new ArrayList();try {Validate.notEmpty((Collection)null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated collection is empty"",ex.getMessage());}try {Validate.notEmpty(coll);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated collection is empty"",ex.getMessage());}coll.add(new Integer(8));Validate.notEmpty(coll);}"
"org.apache.commons.lang.ValidateTest.testNotEmptyCollection2",0,"public void testNotEmptyCollection2(){Collection coll=new ArrayList();try {Validate.notEmpty((Collection)null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}try {Validate.notEmpty(coll,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}coll.add(new Integer(8));Validate.notEmpty(coll,""MSG"");}"
"org.apache.commons.lang.ValidateTest.testNotEmptyMap1",0,"public void testNotEmptyMap1(){Map map=new HashMap();try {Validate.notEmpty((Map)null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated map is empty"",ex.getMessage());}try {Validate.notEmpty(map);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated map is empty"",ex.getMessage());}map.put(""ll"",new Integer(8));Validate.notEmpty(map);}"
"org.apache.commons.lang.ValidateTest.testNotEmptyMap2",0,"public void testNotEmptyMap2(){Map map=new HashMap();try {Validate.notEmpty((Map)null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}try {Validate.notEmpty(map,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}map.put(""ll"",new Integer(8));Validate.notEmpty(map,""MSG"");}"
"org.apache.commons.lang.ValidateTest.testNotEmptyString1",0,"public void testNotEmptyString1(){Validate.notEmpty(""hjl"");try {Validate.notEmpty((String)null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated string is empty"",ex.getMessage());}try {Validate.notEmpty("""");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated string is empty"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNotEmptyString2",0,"public void testNotEmptyString2(){Validate.notEmpty(""a"",""MSG"");try {Validate.notEmpty((String)null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}try {Validate.notEmpty("""",""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNoNullElementsArray1",0,"public void testNoNullElementsArray1(){String[]array=new String[]{""a"",""b""};Validate.noNullElements(array);try {Validate.noNullElements((Object[])null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated object is null"",ex.getMessage());}array[1]=null;try {Validate.noNullElements(array);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated array contains null element at index: 1"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNoNullElementsArray2",0,"public void testNoNullElementsArray2(){String[]array=new String[]{""a"",""b""};Validate.noNullElements(array,""MSG"");try {Validate.noNullElements((Object[])null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated object is null"",ex.getMessage());}array[1]=null;try {Validate.noNullElements(array,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNoNullElementsCollection1",0,"public void testNoNullElementsCollection1(){List coll=new ArrayList();coll.add(""a"");coll.add(""b"");Validate.noNullElements(coll);try {Validate.noNullElements((Collection)null);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated object is null"",ex.getMessage());}coll.set(1,null);try {Validate.noNullElements(coll);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated collection contains null element at index: 1"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testNoNullElementsCollection2",0,"public void testNoNullElementsCollection2(){List coll=new ArrayList();coll.add(""a"");coll.add(""b"");Validate.noNullElements(coll,""MSG"");try {Validate.noNullElements((Collection)null,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated object is null"",ex.getMessage());}coll.set(1,null);try {Validate.noNullElements(coll,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testAllElementsOfType",0,"public void testAllElementsOfType(){List coll=new ArrayList();coll.add(""a"");coll.add(""b"");Validate.allElementsOfType(coll,String.class,""MSG"");Validate.allElementsOfType(coll,String.class);try {Validate.allElementsOfType(coll,Integer.class,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}coll.set(1,Boolean.FALSE);try {Validate.allElementsOfType(coll,String.class);fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""The validated collection contains an element not of type java.lang.String at index: 1"",ex.getMessage());}coll=new ArrayList();coll.add(new Integer(5));coll.add(new Double(2.0d));Validate.allElementsOfType(coll,Number.class,""MSG"");try {Validate.allElementsOfType(coll,Integer.class,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}try {Validate.allElementsOfType(coll,Double.class,""MSG"");fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){assertEquals(""MSG"",ex.getMessage());}}"
"org.apache.commons.lang.ValidateTest.testConstructor",0,"public void testConstructor(){assertNotNull(new Validate());Constructor[]cons=Validate.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(Validate.class.getModifiers()));assertEquals(false,Modifier.isFinal(Validate.class.getModifiers()));}"
"org.apache.commons.lang.NullArgumentExceptionTest.testConstructor_nullInput",0,"public void testConstructor_nullInput(){new NullArgumentException(null);}"
"org.apache.commons.lang.NullArgumentExceptionTest.testGetMessage_nullConstructorInput",0,"public void testGetMessage_nullConstructorInput(){final Throwable t=new NullArgumentException(null);assertEquals(""Argument must not be null."",t.getMessage());}"
"org.apache.commons.lang.NullArgumentExceptionTest.testGetMessage_validConstructorInput",0,"public void testGetMessage_validConstructorInput(){final String argName=""name"";final Throwable t=new NullArgumentException(argName);assertEquals(argName + "" must not be null."",t.getMessage());}"
"org.apache.commons.lang.NumberUtilsTest.testStringToIntString",0,"/** * Test for int stringToInt(String)*/public void testStringToIntString(){assertTrue(""stringToInt(String)1 failed"",NumberUtils.stringToInt(""12345"")== 12345);assertTrue(""stringToInt(String)2 failed"",NumberUtils.stringToInt(""abc"")== 0);}"
"org.apache.commons.lang.NumberUtilsTest.testStringToIntStringI",0,"/** * Test for int stringToInt(String,int)*/public void testStringToIntStringI(){assertTrue(""stringToInt(String,int)1 failed"",NumberUtils.stringToInt(""12345"",5)== 12345);assertTrue(""stringToInt(String,int)2 failed"",NumberUtils.stringToInt(""1234.5"",5)== 5);}"
"org.apache.commons.lang.NumberUtilsTest.testCreateNumber",0,"public void testCreateNumber(){assertEquals(""createNumber(String)1 failed"",new Float(""1234.5""),NumberUtils.createNumber(""1234.5""));assertEquals(""createNumber(String)2 failed"",new Integer(""12345""),NumberUtils.createNumber(""12345""));assertEquals(""createNumber(String)3 failed"",new Double(""1234.5""),NumberUtils.createNumber(""1234.5D""));assertEquals(""createNumber(String)4 failed"",new Float(""1234.5""),NumberUtils.createNumber(""1234.5F""));assertEquals(""createNumber(String)5 failed"",new Long(Integer.MAX_VALUE + 1L),NumberUtils.createNumber("""" + (Integer.MAX_VALUE + 1L)));assertEquals(""createNumber(String)6 failed"",new BigInteger(Long.MAX_VALUE + ""0""),NumberUtils.createNumber(Long.MAX_VALUE + ""0L""));assertEquals(""createNumber(String)7 failed"",new Long(12345),NumberUtils.createNumber(""12345L""));assertEquals(""createNumber(String)8 failed"",new Float(""-1234.5""),NumberUtils.createNumber(""-1234.5""));assertEquals(""createNumber(String)9 failed"",new Integer(""-12345""),NumberUtils.createNumber(""-12345""));assertTrue(""createNumber(String)10 failed"",0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());assertTrue(""createNumber(String)11 failed"",-0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());assertEquals(""createNumber(String)12 failed"",new Double(""1.1E200""),NumberUtils.createNumber(""1.1E200""));assertEquals(""createNumber(String)13 failed"",new Float(""1.1E20""),NumberUtils.createNumber(""1.1E20""));assertEquals(""createNumber(String)14 failed"",new Double(""-1.1E200""),NumberUtils.createNumber(""-1.1E200""));assertEquals(""createNumber(String)15 failed"",new Double(""1.1E-200""),NumberUtils.createNumber(""1.1E-200""));assertEquals(""createNumber(String)16 failed"",new Double(""1.1E-200""),NumberUtils.createNumber(""1.1E-200""));if (SystemUtils.isJavaVersionAtLeast(1.3f)){assertEquals(""createNumber(String)15 failed"",new BigDecimal(""1.1E-700""),NumberUtils.createNumber(""1.1E-700F""));}assertEquals(""createNumber(String)16 failed"",new Long(""10"" + Integer.MAX_VALUE),NumberUtils.createNumber(""10"" + Integer.MAX_VALUE + ""L""));assertEquals(""createNumber(String)17 failed"",new Long(""10"" + Integer.MAX_VALUE),NumberUtils.createNumber(""10"" + Integer.MAX_VALUE));assertEquals(""createNumber(String)18 failed"",new BigInteger(""10"" + Long.MAX_VALUE),NumberUtils.createNumber(""10"" + Long.MAX_VALUE));}"
"org.apache.commons.lang.NumberUtilsTest.testCreateFloat",0,"public void testCreateFloat(){assertEquals(""createFloat(String)failed"",new Float(""1234.5""),NumberUtils.createFloat(""1234.5""));}"
"org.apache.commons.lang.NumberUtilsTest.testCreateDouble",0,"public void testCreateDouble(){assertEquals(""createDouble(String)failed"",new Double(""1234.5""),NumberUtils.createDouble(""1234.5""));}"
"org.apache.commons.lang.NumberUtilsTest.testCreateInteger",0,"public void testCreateInteger(){assertEquals(""createInteger(String)failed"",new Integer(""12345""),NumberUtils.createInteger(""12345""));}"
"org.apache.commons.lang.NumberUtilsTest.testCreateLong",0,"public void testCreateLong(){assertEquals(""createInteger(String)failed"",new Long(""12345""),NumberUtils.createLong(""12345""));}"
"org.apache.commons.lang.NumberUtilsTest.testCreateBigInteger",0,"public void testCreateBigInteger(){assertEquals(""createBigInteger(String)failed"",new BigInteger(""12345""),NumberUtils.createBigInteger(""12345""));}"
"org.apache.commons.lang.NumberUtilsTest.testCreateBigDecimal",0,"public void testCreateBigDecimal(){assertEquals(""createBigDecimal(String)failed"",new BigDecimal(""1234.5""),NumberUtils.createBigDecimal(""1234.5""));}"
"org.apache.commons.lang.NumberUtilsTest.testMinimumLong",0,"public void testMinimumLong(){assertEquals(""minimum(long,long,long)1 failed"",12345L,NumberUtils.minimum(12345L,12345L + 1L,12345L + 2L));assertEquals(""minimum(long,long,long)2 failed"",12345L,NumberUtils.minimum(12345L + 1L,12345L,12345 + 2L));assertEquals(""minimum(long,long,long)3 failed"",12345L,NumberUtils.minimum(12345L + 1L,12345L + 2L,12345L));assertEquals(""minimum(long,long,long)4 failed"",12345L,NumberUtils.minimum(12345L + 1L,12345L,12345L));assertEquals(""minimum(long,long,long)5 failed"",12345L,NumberUtils.minimum(12345L,12345L,12345L));}"
"org.apache.commons.lang.NumberUtilsTest.testMinimumInt",0,"public void testMinimumInt(){assertEquals(""minimum(int,int,int)1 failed"",12345,NumberUtils.minimum(12345,12345 + 1,12345 + 2));assertEquals(""minimum(int,int,int)2 failed"",12345,NumberUtils.minimum(12345 + 1,12345,12345 + 2));assertEquals(""minimum(int,int,int)3 failed"",12345,NumberUtils.minimum(12345 + 1,12345 + 2,12345));assertEquals(""minimum(int,int,int)4 failed"",12345,NumberUtils.minimum(12345 + 1,12345,12345));assertEquals(""minimum(int,int,int)5 failed"",12345,NumberUtils.minimum(12345,12345,12345));}"
"org.apache.commons.lang.NumberUtilsTest.testMaximumLong",0,"public void testMaximumLong(){assertEquals(""maximum(long,long,long)1 failed"",12345L,NumberUtils.maximum(12345L,12345L - 1L,12345L - 2L));assertEquals(""maximum(long,long,long)2 failed"",12345L,NumberUtils.maximum(12345L - 1L,12345L,12345L - 2L));assertEquals(""maximum(long,long,long)3 failed"",12345L,NumberUtils.maximum(12345L - 1L,12345L - 2L,12345L));assertEquals(""maximum(long,long,long)4 failed"",12345L,NumberUtils.maximum(12345L - 1L,12345L,12345L));assertEquals(""maximum(long,long,long)5 failed"",12345L,NumberUtils.maximum(12345L,12345L,12345L));}"
"org.apache.commons.lang.NumberUtilsTest.testMaximumInt",0,"public void testMaximumInt(){assertEquals(""maximum(int,int,int)1 failed"",12345,NumberUtils.maximum(12345,12345 - 1,12345 - 2));assertEquals(""maximum(int,int,int)2 failed"",12345,NumberUtils.maximum(12345 - 1,12345,12345 - 2));assertEquals(""maximum(int,int,int)3 failed"",12345,NumberUtils.maximum(12345 - 1,12345 - 2,12345));assertEquals(""maximum(int,int,int)4 failed"",12345,NumberUtils.maximum(12345 - 1,12345,12345));assertEquals(""maximum(int,int,int)5 failed"",12345,NumberUtils.maximum(12345,12345,12345));}"
"org.apache.commons.lang.NumberUtilsTest.testCompareDouble",0,"public void testCompareDouble(){assertTrue(NumberUtils.compare(Double.NaN,Double.NaN)== 0);assertTrue(NumberUtils.compare(Double.NaN,Double.POSITIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.NaN,Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.NaN,1.2d)== +1);assertTrue(NumberUtils.compare(Double.NaN,0.0d)== +1);assertTrue(NumberUtils.compare(Double.NaN,-0.0d)== +1);assertTrue(NumberUtils.compare(Double.NaN,-1.2d)== +1);assertTrue(NumberUtils.compare(Double.NaN,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.NaN,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.NaN)== -1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY)== 0);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,1.2d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,0.0d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,-0.0d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,-1.2d)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.NaN)== -1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(Double.MAX_VALUE,1.2d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,0.0d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,-0.0d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,-1.2d)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Double.MAX_VALUE,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(1.2d,Double.NaN)== -1);assertTrue(NumberUtils.compare(1.2d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(1.2d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(1.2d,1.2d)== 0);assertTrue(NumberUtils.compare(1.2d,0.0d)== +1);assertTrue(NumberUtils.compare(1.2d,-0.0d)== +1);assertTrue(NumberUtils.compare(1.2d,-1.2d)== +1);assertTrue(NumberUtils.compare(1.2d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(1.2d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(0.0d,Double.NaN)== -1);assertTrue(NumberUtils.compare(0.0d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(0.0d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(0.0d,1.2d)== -1);assertTrue(NumberUtils.compare(0.0d,0.0d)== 0);assertTrue(NumberUtils.compare(0.0d,-0.0d)== +1);assertTrue(NumberUtils.compare(0.0d,-1.2d)== +1);assertTrue(NumberUtils.compare(0.0d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(0.0d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-0.0d,Double.NaN)== -1);assertTrue(NumberUtils.compare(-0.0d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-0.0d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-0.0d,1.2d)== -1);assertTrue(NumberUtils.compare(-0.0d,0.0d)== -1);assertTrue(NumberUtils.compare(-0.0d,-0.0d)== 0);assertTrue(NumberUtils.compare(-0.0d,-1.2d)== +1);assertTrue(NumberUtils.compare(-0.0d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-0.0d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-1.2d,Double.NaN)== -1);assertTrue(NumberUtils.compare(-1.2d,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-1.2d,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-1.2d,1.2d)== -1);assertTrue(NumberUtils.compare(-1.2d,0.0d)== -1);assertTrue(NumberUtils.compare(-1.2d,-0.0d)== -1);assertTrue(NumberUtils.compare(-1.2d,-1.2d)== 0);assertTrue(NumberUtils.compare(-1.2d,-Double.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-1.2d,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.NaN)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,1.2d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,0.0d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,-0.0d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,-1.2d)== -1);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,-Double.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.NaN)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,1.2d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,0.0d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,-0.0d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,-1.2d)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,-Double.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY)== 0);}"
"org.apache.commons.lang.NumberUtilsTest.testCompareFloat",0,"public void testCompareFloat(){assertTrue(NumberUtils.compare(Float.NaN,Float.NaN)== 0);assertTrue(NumberUtils.compare(Float.NaN,Float.POSITIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.NaN,Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.NaN,1.2f)== +1);assertTrue(NumberUtils.compare(Float.NaN,0.0f)== +1);assertTrue(NumberUtils.compare(Float.NaN,-0.0f)== +1);assertTrue(NumberUtils.compare(Float.NaN,-1.2f)== +1);assertTrue(NumberUtils.compare(Float.NaN,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.NaN,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.NaN)== -1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY)== 0);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,1.2f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,0.0f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,-0.0f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,-1.2f)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.NaN)== -1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(Float.MAX_VALUE,1.2f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,0.0f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,-0.0f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,-1.2f)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(Float.MAX_VALUE,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(1.2f,Float.NaN)== -1);assertTrue(NumberUtils.compare(1.2f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(1.2f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(1.2f,1.2f)== 0);assertTrue(NumberUtils.compare(1.2f,0.0f)== +1);assertTrue(NumberUtils.compare(1.2f,-0.0f)== +1);assertTrue(NumberUtils.compare(1.2f,-1.2f)== +1);assertTrue(NumberUtils.compare(1.2f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(1.2f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(0.0f,Float.NaN)== -1);assertTrue(NumberUtils.compare(0.0f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(0.0f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(0.0f,1.2f)== -1);assertTrue(NumberUtils.compare(0.0f,0.0f)== 0);assertTrue(NumberUtils.compare(0.0f,-0.0f)== +1);assertTrue(NumberUtils.compare(0.0f,-1.2f)== +1);assertTrue(NumberUtils.compare(0.0f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(0.0f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-0.0f,Float.NaN)== -1);assertTrue(NumberUtils.compare(-0.0f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-0.0f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-0.0f,1.2f)== -1);assertTrue(NumberUtils.compare(-0.0f,0.0f)== -1);assertTrue(NumberUtils.compare(-0.0f,-0.0f)== 0);assertTrue(NumberUtils.compare(-0.0f,-1.2f)== +1);assertTrue(NumberUtils.compare(-0.0f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-0.0f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-1.2f,Float.NaN)== -1);assertTrue(NumberUtils.compare(-1.2f,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-1.2f,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-1.2f,1.2f)== -1);assertTrue(NumberUtils.compare(-1.2f,0.0f)== -1);assertTrue(NumberUtils.compare(-1.2f,-0.0f)== -1);assertTrue(NumberUtils.compare(-1.2f,-1.2f)== 0);assertTrue(NumberUtils.compare(-1.2f,-Float.MAX_VALUE)== +1);assertTrue(NumberUtils.compare(-1.2f,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.NaN)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,1.2f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,0.0f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,-0.0f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,-1.2f)== -1);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,-Float.MAX_VALUE)== 0);assertTrue(NumberUtils.compare(-Float.MAX_VALUE,Float.NEGATIVE_INFINITY)== +1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.NaN)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,1.2f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,0.0f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,-0.0f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,-1.2f)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,-Float.MAX_VALUE)== -1);assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY)== 0);}"
"org.apache.commons.lang.NumberUtilsTest.testIsDigits",0,"public void testIsDigits(){assertEquals(""isDigits(null)failed"",false,NumberUtils.isDigits(null));assertEquals(""isDigits('')failed"",false,NumberUtils.isDigits(""""));assertEquals(""isDigits(String)failed"",true,NumberUtils.isDigits(""12345""));assertEquals(""isDigits(String)neg 1 failed"",false,NumberUtils.isDigits(""1234.5""));assertEquals(""isDigits(String)neg 3 failed"",false,NumberUtils.isDigits(""1ab""));assertEquals(""isDigits(String)neg 4 failed"",false,NumberUtils.isDigits(""abc""));}"
"org.apache.commons.lang.NumberUtilsTest.testIsNumber",0,"/** * Tests isNumber(String)and tests that createNumber(String)returns a valid number iff isNumber(String)returns false.*/public void testIsNumber(){String val=""12345"";assertTrue(""isNumber(String)1 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)1 failed"",checkCreateNumber(val));val=""1234.5"";assertTrue(""isNumber(String)2 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)2 failed"",checkCreateNumber(val));val="".12345"";assertTrue(""isNumber(String)3 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)3 failed"",checkCreateNumber(val));val=""1234E5"";assertTrue(""isNumber(String)4 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)4 failed"",checkCreateNumber(val));val=""1234E+5"";assertTrue(""isNumber(String)5 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)5 failed"",checkCreateNumber(val));val=""1234E-5"";assertTrue(""isNumber(String)6 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)6 failed"",checkCreateNumber(val));val=""123.4E5"";assertTrue(""isNumber(String)7 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)7 failed"",checkCreateNumber(val));val=""-1234"";assertTrue(""isNumber(String)8 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)8 failed"",checkCreateNumber(val));val=""-1234.5"";assertTrue(""isNumber(String)9 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)9 failed"",checkCreateNumber(val));val=""-.12345"";assertTrue(""isNumber(String)10 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)10 failed"",checkCreateNumber(val));val=""-1234E5"";assertTrue(""isNumber(String)11 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)11 failed"",checkCreateNumber(val));val=""0"";assertTrue(""isNumber(String)12 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)12 failed"",checkCreateNumber(val));val=""-0"";assertTrue(""isNumber(String)13 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)13 failed"",checkCreateNumber(val));val=""01234"";assertTrue(""isNumber(String)14 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)14 failed"",checkCreateNumber(val));val=""-01234"";assertTrue(""isNumber(String)15 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)15 failed"",checkCreateNumber(val));val=""0xABC123"";assertTrue(""isNumber(String)16 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)16 failed"",checkCreateNumber(val));val=""0x0"";assertTrue(""isNumber(String)17 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)17 failed"",checkCreateNumber(val));val=""123.4E21D"";assertTrue(""isNumber(String)19 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)19 failed"",checkCreateNumber(val));val=""-221.23F"";assertTrue(""isNumber(String)20 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)20 failed"",checkCreateNumber(val));val=""22338L"";assertTrue(""isNumber(String)21 failed"",NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)21 failed"",checkCreateNumber(val));val=null;assertTrue(""isNumber(String)1 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)1 Neg failed"",!checkCreateNumber(val));val="""";assertTrue(""isNumber(String)2 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)2 Neg failed"",!checkCreateNumber(val));val=""--2.3"";assertTrue(""isNumber(String)3 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)3 Neg failed"",!checkCreateNumber(val));val="".12.3"";assertTrue(""isNumber(String)4 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)4 Neg failed"",!checkCreateNumber(val));val=""-123E"";assertTrue(""isNumber(String)5 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)5 Neg failed"",!checkCreateNumber(val));val=""-123E+-212"";assertTrue(""isNumber(String)6 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)6 Neg failed"",!checkCreateNumber(val));val=""-123E2.12"";assertTrue(""isNumber(String)7 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)7 Neg failed"",!checkCreateNumber(val));val=""0xGF"";assertTrue(""isNumber(String)8 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)8 Neg failed"",!checkCreateNumber(val));val=""0xFAE-1"";assertTrue(""isNumber(String)9 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)9 Neg failed"",!checkCreateNumber(val));val=""."";assertTrue(""isNumber(String)10 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)10 Neg failed"",!checkCreateNumber(val));val=""-0ABC123"";assertTrue(""isNumber(String)11 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)11 Neg failed"",!checkCreateNumber(val));val=""123.4E-D"";assertTrue(""isNumber(String)12 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)12 Neg failed"",!checkCreateNumber(val));val=""123.4ED"";assertTrue(""isNumber(String)13 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)13 Neg failed"",!checkCreateNumber(val));val=""1234E5l"";assertTrue(""isNumber(String)14 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)14 Neg failed"",!checkCreateNumber(val));val=""11a"";assertTrue(""isNumber(String)15 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)15 Neg failed"",!checkCreateNumber(val));val=""1a"";assertTrue(""isNumber(String)16 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)16 Neg failed"",!checkCreateNumber(val));val=""a"";assertTrue(""isNumber(String)17 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)17 Neg failed"",!checkCreateNumber(val));val=""11g"";assertTrue(""isNumber(String)18 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)18 Neg failed"",!checkCreateNumber(val));val=""11z"";assertTrue(""isNumber(String)19 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)19 Neg failed"",!checkCreateNumber(val));val=""11def"";assertTrue(""isNumber(String)20 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)20 Neg failed"",!checkCreateNumber(val));val=""11d11"";assertTrue(""isNumber(String)21 Neg failed"",!NumberUtils.isNumber(val));assertTrue(""isNumber(String)/createNumber(String)21 Neg failed"",!checkCreateNumber(val));}"
"org.apache.commons.lang.NumberUtilsTest.testIsNumberInvalidInput",0,"public void testIsNumberInvalidInput(){String val=""0x"";assertEquals(""isNumber()with 0x wasn't false"",false,NumberUtils.isNumber(val));val=""0x3x3"";assertEquals(""isNumber()with 0x3x3 wasn't false"",false,NumberUtils.isNumber(val));val=""20EE-3"";assertEquals(""isNumber()with 20EE-3 wasn't false"",false,NumberUtils.isNumber(val));val=""2435q"";assertEquals(""isNumber()with 2435q wasn't false"",false,NumberUtils.isNumber(val));val=""."";assertEquals(""isNumber()with . wasn't false"",false,NumberUtils.isNumber(val));}"
"org.apache.commons.lang.NumberUtilsTest.testPublicNoArgConstructor",0,"public void testPublicNoArgConstructor(){try {NumberUtils nu=new NumberUtils();}catch(Exception e){fail(""Error calling public no-arg constructor"");}}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionEquals",0,"public void testReflectionEquals(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertTrue(EqualsBuilder.reflectionEquals(o1,o1));assertTrue(!EqualsBuilder.reflectionEquals(o1,o2));o2.setA(4);assertTrue(EqualsBuilder.reflectionEquals(o1,o2));assertTrue(!EqualsBuilder.reflectionEquals(o1,this));assertTrue(!EqualsBuilder.reflectionEquals(o1,null));assertTrue(!EqualsBuilder.reflectionEquals(null,o2));assertTrue(EqualsBuilder.reflectionEquals((Object)null,(Object)null));}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionHierarchyEquals",0,"public void testReflectionHierarchyEquals(){testReflectionHierarchyEquals(false);testReflectionHierarchyEquals(true);assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,4),true));assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,4),false));assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,0,0,4),new TestTTLeafObject(1,2,3,4),true));assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,0),true));assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0,2,3,4),new TestTTLeafObject(1,2,3,4),true));}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionEqualsEquivalenceRelationship",0,"/** * Equivalence relationship tests inspired by ""Effective Java"": <ul> <li>reflection</li> <li>symmetry</li> <li>transitive</li> <li>consistency</li> <li>non-null reference</li> </ul>* @param to a TestObject* @param toBis a TestObject,equal to to and toTer* @param toTer Left hand side,equal to to and toBis* @param to2 a different TestObject* @param oToChange a TestObject that will be changed*/public void testReflectionEqualsEquivalenceRelationship(TestObject to,TestObject toBis,TestObject toTer,TestObject to2,TestObject oToChange,boolean testTransients){assertTrue(EqualsBuilder.reflectionEquals(to,to,testTransients));assertTrue(EqualsBuilder.reflectionEquals(to2,to2,testTransients));assertTrue(EqualsBuilder.reflectionEquals(to,toBis,testTransients)&& EqualsBuilder.reflectionEquals(toBis,to,testTransients));assertTrue(EqualsBuilder.reflectionEquals(to,toBis,testTransients)&& EqualsBuilder.reflectionEquals(toBis,toTer,testTransients)&& EqualsBuilder.reflectionEquals(to,toTer,testTransients));oToChange.setA(to.getA());if (oToChange instanceof TestSubObject){((TestSubObject)oToChange).setB(((TestSubObject)to).getB());}assertTrue(EqualsBuilder.reflectionEquals(oToChange,to,testTransients));assertTrue(EqualsBuilder.reflectionEquals(oToChange,to,testTransients));oToChange.setA(to.getA()+ 1);if (oToChange instanceof TestSubObject){((TestSubObject)oToChange).setB(((TestSubObject)to).getB()+ 1);}assertTrue(!EqualsBuilder.reflectionEquals(oToChange,to,testTransients));assertTrue(!EqualsBuilder.reflectionEquals(oToChange,to,testTransients));assertTrue(!EqualsBuilder.reflectionEquals(to,null,testTransients));assertTrue(!EqualsBuilder.reflectionEquals(to2,null,testTransients));assertTrue(!EqualsBuilder.reflectionEquals(null,to,testTransients));assertTrue(!EqualsBuilder.reflectionEquals(null,to2,testTransients));assertTrue(EqualsBuilder.reflectionEquals((Object)null,(Object)null,testTransients));}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testSuper",0,"public void testSuper(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertEquals(true,new EqualsBuilder().appendSuper(true).append(o1,o1).isEquals());assertEquals(false,new EqualsBuilder().appendSuper(false).append(o1,o1).isEquals());assertEquals(false,new EqualsBuilder().appendSuper(true).append(o1,o2).isEquals());assertEquals(false,new EqualsBuilder().appendSuper(false).append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testObject",0,"public void testObject(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());o2.setA(4);assertTrue(new EqualsBuilder().append(o1,o2).isEquals());assertTrue(!new EqualsBuilder().append(o1,this).isEquals());assertTrue(!new EqualsBuilder().append(o1,null).isEquals());assertTrue(!new EqualsBuilder().append(null,o2).isEquals());assertTrue(new EqualsBuilder().append((Object)null,(Object)null).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testLong",0,"public void testLong(){long o1=1L;long o2=2L;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testInt",0,"public void testInt(){int o1=1;int o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testShort",0,"public void testShort(){short o1=1;short o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testChar",0,"public void testChar(){char o1=1;char o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testByte",0,"public void testByte(){byte o1=1;byte o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testDouble",0,"public void testDouble(){double o1=1;double o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());assertTrue(!new EqualsBuilder().append(o1,Double.NaN).isEquals());assertTrue(new EqualsBuilder().append(Double.NaN,Double.NaN).isEquals());assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testFloat",0,"public void testFloat(){float o1=1;float o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());assertTrue(!new EqualsBuilder().append(o1,Float.NaN).isEquals());assertTrue(new EqualsBuilder().append(Float.NaN,Float.NaN).isEquals());assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testAccessors",0,"public void testAccessors(){EqualsBuilder equalsBuilder=new EqualsBuilder();assertTrue(equalsBuilder.isEquals());equalsBuilder.setEquals(true);assertTrue(equalsBuilder.isEquals());equalsBuilder.setEquals(false);assertFalse(equalsBuilder.isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testBoolean",0,"public void testBoolean(){boolean o1=true;boolean o2=false;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testObjectArray",0,"public void testObjectArray(){TestObject[]obj1=new TestObject[3];obj1[0]=new TestObject(4);obj1[1]=new TestObject(5);obj1[2]=null;TestObject[]obj2=new TestObject[3];obj2[0]=new TestObject(4);obj2[1]=new TestObject(5);obj2[2]=null;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj2,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1].setA(6);assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1].setA(5);assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[2]=obj1[1];assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1[2]=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testLongArray",0,"public void testLongArray(){long[]obj1=new long[2];obj1[0]=5L;obj1[1]=6L;long[]obj2=new long[2];obj2[0]=5L;obj2[1]=6L;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testIntArray",0,"public void testIntArray(){int[]obj1=new int[2];obj1[0]=5;obj1[1]=6;int[]obj2=new int[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testShortArray",0,"public void testShortArray(){short[]obj1=new short[2];obj1[0]=5;obj1[1]=6;short[]obj2=new short[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testCharArray",0,"public void testCharArray(){char[]obj1=new char[2];obj1[0]=5;obj1[1]=6;char[]obj2=new char[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testByteArray",0,"public void testByteArray(){byte[]obj1=new byte[2];obj1[0]=5;obj1[1]=6;byte[]obj2=new byte[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testDoubleArray",0,"public void testDoubleArray(){double[]obj1=new double[2];obj1[0]=5;obj1[1]=6;double[]obj2=new double[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testFloatArray",0,"public void testFloatArray(){float[]obj1=new float[2];obj1[0]=5;obj1[1]=6;float[]obj2=new float[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testBooleanArray",0,"public void testBooleanArray(){boolean[]obj1=new boolean[2];obj1[0]=true;obj1[1]=false;boolean[]obj2=new boolean[2];obj2[0]=true;obj2[1]=false;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=true;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiLongArray",0,"public void testMultiLongArray(){long[][]array1=new long[2][2];long[][]array2=new long[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiIntArray",0,"public void testMultiIntArray(){int[][]array1=new int[2][2];int[][]array2=new int[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiShortArray",0,"public void testMultiShortArray(){short[][]array1=new short[2][2];short[][]array2=new short[2][2];for (short i=0;i < array1.length;++i){for (short j=0;j < array1[0].length;j++){array1[i][j]=i;array2[i][j]=i;}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiCharArray",0,"public void testMultiCharArray(){char[][]array1=new char[2][2];char[][]array2=new char[2][2];for (char i=0;i < array1.length;++i){for (char j=0;j < array1[0].length;j++){array1[i][j]=i;array2[i][j]=i;}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiByteArray",0,"public void testMultiByteArray(){byte[][]array1=new byte[2][2];byte[][]array2=new byte[2][2];for (byte i=0;i < array1.length;++i){for (byte j=0;j < array1[0].length;j++){array1[i][j]=i;array2[i][j]=i;}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiFloatArray",0,"public void testMultiFloatArray(){float[][]array1=new float[2][2];float[][]array2=new float[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiDoubleArray",0,"public void testMultiDoubleArray(){double[][]array1=new double[2][2];double[][]array2=new double[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMultiBooleanArray",0,"public void testMultiBooleanArray(){boolean[][]array1=new boolean[2][2];boolean[][]array2=new boolean[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i == 1)|| (j == 1);array2[i][j]=(i == 1)|| (j == 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=false;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());boolean[]array3=new boolean[]{true,true};assertFalse(new EqualsBuilder().append(array1,array3).isEquals());assertFalse(new EqualsBuilder().append(array3,array1).isEquals());assertFalse(new EqualsBuilder().append(array2,array3).isEquals());assertFalse(new EqualsBuilder().append(array3,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testRaggedArray",0,"public void testRaggedArray(){long array1[][]=new long[2][];long array2[][]=new long[2][];for (int i=0;i < array1.length;++i){array1[i]=new long[2];array2[i]=new long[2];for (int j=0;j < array1[i].length;++j){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testMixedArray",0,"public void testMixedArray(){Object array1[]=new Object[2];Object array2[]=new Object[2];for (int i=0;i < array1.length;++i){array1[i]=new long[2];array2[i]=new long[2];for (int j=0;j < 2;++j){((long[])array1[i])[j]=(i + 1)* (j + 1);((long[])array2[i])[j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());((long[])array1[1])[1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testObjectArrayHiddenByObject",0,"public void testObjectArrayHiddenByObject(){TestObject[]array1=new TestObject[2];array1[0]=new TestObject(4);array1[1]=new TestObject(5);TestObject[]array2=new TestObject[2];array2[0]=new TestObject(4);array2[1]=new TestObject(5);Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1].setA(6);assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testLongArrayHiddenByObject",0,"public void testLongArrayHiddenByObject(){long[]array1=new long[2];array1[0]=5L;array1[1]=6L;long[]array2=new long[2];array2[0]=5L;array2[1]=6L;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testIntArrayHiddenByObject",0,"public void testIntArrayHiddenByObject(){int[]array1=new int[2];array1[0]=5;array1[1]=6;int[]array2=new int[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testShortArrayHiddenByObject",0,"public void testShortArrayHiddenByObject(){short[]array1=new short[2];array1[0]=5;array1[1]=6;short[]array2=new short[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testCharArrayHiddenByObject",0,"public void testCharArrayHiddenByObject(){char[]array1=new char[2];array1[0]=5;array1[1]=6;char[]array2=new char[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testByteArrayHiddenByObject",0,"public void testByteArrayHiddenByObject(){byte[]array1=new byte[2];array1[0]=5;array1[1]=6;byte[]array2=new byte[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testDoubleArrayHiddenByObject",0,"public void testDoubleArrayHiddenByObject(){double[]array1=new double[2];array1[0]=5;array1[1]=6;double[]array2=new double[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testFloatArrayHiddenByObject",0,"public void testFloatArrayHiddenByObject(){float[]array1=new float[2];array1[0]=5;array1[1]=6;float[]array2=new float[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testBooleanArrayHiddenByObject",0,"public void testBooleanArrayHiddenByObject(){boolean[]array1=new boolean[2];array1[0]=true;array1[1]=false;boolean[]array2=new boolean[2];array2[0]=true;array2[1]=false;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=true;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testUnrelatedClasses",0,"/** * Tests two instances of classes that can be equal and that are not ""related"". The two classes are not subclasses of each other and do not share a parent aside from Object. See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069*/public void testUnrelatedClasses(){Object[]x=new Object[]{new TestACanEqualB(1)};Object[]y=new Object[]{new TestBCanEqualA(1)};assertTrue(Arrays.equals(x,x));assertTrue(Arrays.equals(y,y));assertTrue(Arrays.equals(x,y));assertTrue(Arrays.equals(y,x));assertTrue(x[0].equals(x[0]));assertTrue(y[0].equals(y[0]));assertTrue(x[0].equals(y[0]));assertTrue(y[0].equals(x[0]));assertTrue(new EqualsBuilder().append(x,x).isEquals());assertTrue(new EqualsBuilder().append(y,y).isEquals());assertTrue(new EqualsBuilder().append(x,y).isEquals());assertTrue(new EqualsBuilder().append(y,x).isEquals());}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testNpeForNullElement",0,"/** * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067*/public void testNpeForNullElement(){Object[]x1=new Object[]{new Integer(1),null,new Integer(3)};Object[]x2=new Object[]{new Integer(1),new Integer(2),new Integer(3)};new EqualsBuilder().append(x1,x2);}"
"org.apache.commons.lang.builder.EqualsBuilderTest.testReflectionEqualsExcludeFields",0,"public void testReflectionEqualsExcludeFields()throws Exception {TestObjectWithMultipleFields x1=new TestObjectWithMultipleFields(1,2,3);TestObjectWithMultipleFields x2=new TestObjectWithMultipleFields(1,3,4);assertTrue(!EqualsBuilder.reflectionEquals(x1,x2));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,(String[])null));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{}));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{""xxx""}));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{""two""}));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{""three""}));assertTrue(EqualsBuilder.reflectionEquals(x1,x2,new String[]{""two"",""three""}));assertTrue(EqualsBuilder.reflectionEquals(x1,x2,new String[]{""one"",""two"",""three""}));assertTrue(EqualsBuilder.reflectionEquals(x1,x2,new String[]{""one"",""two"",""three"",""xxx""}));}"
"org.apache.commons.lang.enums.ValuedEnumTest.testName",0,"public void testName(){assertEquals(""Red"",ValuedColorEnum.RED.getName());assertEquals(""Green"",ValuedColorEnum.GREEN.getName());assertEquals(""Blue"",ValuedColorEnum.BLUE.getName());}"
"org.apache.commons.lang.enums.ValuedEnumTest.testValue",0,"public void testValue(){assertEquals(1,ValuedColorEnum.RED.getValue());assertEquals(2,ValuedColorEnum.GREEN.getValue());assertEquals(3,ValuedColorEnum.BLUE.getValue());}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo",0,"public void testCompareTo(){assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.BLUE)== 0);assertTrue(ValuedColorEnum.RED.compareTo(ValuedColorEnum.BLUE)< 0);assertTrue(ValuedColorEnum.BLUE.compareTo(ValuedColorEnum.RED)> 0);}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_classloader_equal",0,"public void testCompareTo_classloader_equal()throws Exception {ClassLoader cl=ValuedColorEnum.class.getClassLoader();if (cl instanceof URLClassLoader){URLClassLoader urlCL=(URLClassLoader)cl;URLClassLoader urlCL1=new URLClassLoader(urlCL.getURLs(),null);URLClassLoader urlCL2=new URLClassLoader(urlCL.getURLs(),null);Class otherEnumClass1=urlCL1.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Class otherEnumClass2=urlCL2.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Object blue1=otherEnumClass1.getDeclaredField(""BLUE"").get(null);Object blue2=otherEnumClass2.getDeclaredField(""BLUE"").get(null);assertTrue(((Comparable)blue1).compareTo(blue2)== 0);}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_classloader_different",0,"public void testCompareTo_classloader_different()throws Exception {ClassLoader cl=ValuedColorEnum.class.getClassLoader();if (cl instanceof URLClassLoader){URLClassLoader urlCL=(URLClassLoader)cl;URLClassLoader urlCL1=new URLClassLoader(urlCL.getURLs(),null);URLClassLoader urlCL2=new URLClassLoader(urlCL.getURLs(),null);Class otherEnumClass1=urlCL1.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Class otherEnumClass2=urlCL2.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Object blue1=otherEnumClass1.getDeclaredField(""BLUE"").get(null);Object blue2=otherEnumClass2.getDeclaredField(""RED"").get(null);assertTrue(((Comparable)blue1).compareTo(blue2)!= 0);}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_nonEnumType",0,"public void testCompareTo_nonEnumType(){try {ValuedColorEnum.BLUE.compareTo(new TotallyUnrelatedClass(ValuedColorEnum.BLUE.getValue()));fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_otherEnumType",1,"public void testCompareTo_otherEnumType(){try {ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_otherType",0,"public void testCompareTo_otherType(){try {ValuedColorEnum.BLUE.compareTo(""Blue"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testCompareTo_null",0,"public void testCompareTo_null(){try {ValuedColorEnum.BLUE.compareTo(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testEquals",0,"public void testEquals(){assertSame(ValuedColorEnum.RED,ValuedColorEnum.RED);assertSame(ValuedColorEnum.getEnum(""Red""),ValuedColorEnum.RED);}"
"org.apache.commons.lang.enums.ValuedEnumTest.testEquals_classloader_equal",0,"public void testEquals_classloader_equal()throws Exception {ClassLoader cl=ValuedColorEnum.class.getClassLoader();if (cl instanceof URLClassLoader){URLClassLoader urlCL=(URLClassLoader)cl;URLClassLoader urlCL1=new URLClassLoader(urlCL.getURLs(),null);URLClassLoader urlCL2=new URLClassLoader(urlCL.getURLs(),null);Class otherEnumClass1=urlCL1.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Class otherEnumClass2=urlCL2.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Object blue1=otherEnumClass1.getDeclaredField(""BLUE"").get(null);Object blue2=otherEnumClass2.getDeclaredField(""BLUE"").get(null);assertEquals(true,blue1.equals(blue2));}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testEquals_classloader_different",0,"public void testEquals_classloader_different()throws Exception {ClassLoader cl=ValuedColorEnum.class.getClassLoader();if (cl instanceof URLClassLoader){URLClassLoader urlCL=(URLClassLoader)cl;URLClassLoader urlCL1=new URLClassLoader(urlCL.getURLs(),null);URLClassLoader urlCL2=new URLClassLoader(urlCL.getURLs(),null);Class otherEnumClass1=urlCL1.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Class otherEnumClass2=urlCL2.loadClass(""org.apache.commons.lang.enums.ValuedColorEnum"");Object blue1=otherEnumClass1.getDeclaredField(""BLUE"").get(null);Object blue2=otherEnumClass2.getDeclaredField(""RED"").get(null);assertEquals(false,blue1.equals(blue2));}}"
"org.apache.commons.lang.enums.ValuedEnumTest.testToString",0,"public void testToString(){String toString=ValuedColorEnum.RED.toString();assertEquals(""ValuedColorEnum[Red=1]"",toString);assertSame(toString,ValuedColorEnum.RED.toString());}"
"org.apache.commons.lang.enums.ValuedEnumTest.testIterator",0,"public void testIterator(){Iterator it=ValuedColorEnum.iterator();assertSame(ValuedColorEnum.RED,it.next());assertSame(ValuedColorEnum.GREEN,it.next());assertSame(ValuedColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enums.ValuedEnumTest.testList",0,"public void testList(){List list=ValuedColorEnum.getEnumList();assertNotNull(list);assertEquals(list.size(),ValuedColorEnum.getEnumMap().keySet().size());Iterator it=list.iterator();assertSame(ValuedColorEnum.RED,it.next());assertSame(ValuedColorEnum.GREEN,it.next());assertSame(ValuedColorEnum.BLUE,it.next());}"
"org.apache.commons.lang.enums.ValuedEnumTest.testMap",0,"public void testMap(){Map map=ValuedColorEnum.getEnumMap();assertNotNull(map);assertEquals(map.keySet().size(),ValuedColorEnum.getEnumList().size());assertTrue(map.containsValue(ValuedColorEnum.RED));assertTrue(map.containsValue(ValuedColorEnum.GREEN));assertTrue(map.containsValue(ValuedColorEnum.BLUE));assertSame(ValuedColorEnum.RED,map.get(""Red""));assertSame(ValuedColorEnum.GREEN,map.get(""Green""));assertSame(ValuedColorEnum.BLUE,map.get(""Blue""));}"
"org.apache.commons.lang.enums.ValuedEnumTest.testGet",0,"public void testGet(){assertSame(ValuedColorEnum.RED,ValuedColorEnum.getEnum(""Red""));assertSame(ValuedColorEnum.GREEN,ValuedColorEnum.getEnum(""Green""));assertSame(ValuedColorEnum.BLUE,ValuedColorEnum.getEnum(""Blue""));assertSame(null,ValuedColorEnum.getEnum(""Pink""));}"
"org.apache.commons.lang.enums.ValuedEnumTest.testGetValue",0,"public void testGetValue(){assertSame(ValuedColorEnum.RED,ValuedColorEnum.getEnum(1));assertSame(ValuedColorEnum.GREEN,ValuedColorEnum.getEnum(2));assertSame(ValuedColorEnum.BLUE,ValuedColorEnum.getEnum(3));assertSame(null,ValuedColorEnum.getEnum(4));}"
"org.apache.commons.lang.enums.ValuedEnumTest.testSerialization",0,"public void testSerialization(){assertSame(ValuedColorEnum.RED,SerializationUtils.clone(ValuedColorEnum.RED));assertSame(ValuedColorEnum.GREEN,SerializationUtils.clone(ValuedColorEnum.GREEN));assertSame(ValuedColorEnum.BLUE,SerializationUtils.clone(ValuedColorEnum.BLUE));}"
"org.apache.commons.lang.enums.EnumUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new EnumUtils());Constructor[]cons=EnumUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(EnumUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(EnumUtils.class.getModifiers()));}"
"org.apache.commons.lang.enums.EnumUtilsTest.testIterator",0,"public void testIterator(){Iterator it=EnumUtils.iterator(ColorEnum.class);assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());it=EnumUtils.iterator(DummyEnum.class);assertEquals(false,it.hasNext());}"
"org.apache.commons.lang.enums.EnumUtilsTest.testIteratorEx",0,"public void testIteratorEx(){try {EnumUtils.iterator(null);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.iterator(Object.class);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enums.EnumUtilsTest.testList",0,"public void testList(){List list=EnumUtils.getEnumList(ColorEnum.class);Iterator it=list.iterator();assertSame(ColorEnum.RED,it.next());assertSame(ColorEnum.GREEN,it.next());assertSame(ColorEnum.BLUE,it.next());list=EnumUtils.getEnumList(DummyEnum.class);assertEquals(0,list.size());}"
"org.apache.commons.lang.enums.EnumUtilsTest.testListEx",0,"public void testListEx(){try {EnumUtils.getEnumList(null);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnumList(Object.class);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enums.EnumUtilsTest.testMap",0,"public void testMap(){Map map=EnumUtils.getEnumMap(ColorEnum.class);assertTrue(map.containsValue(ColorEnum.RED));assertTrue(map.containsValue(ColorEnum.GREEN));assertTrue(map.containsValue(ColorEnum.BLUE));assertSame(ColorEnum.RED,map.get(""Red""));assertSame(ColorEnum.GREEN,map.get(""Green""));assertSame(ColorEnum.BLUE,map.get(""Blue""));map=EnumUtils.getEnumMap(DummyEnum.class);assertEquals(0,map.size());}"
"org.apache.commons.lang.enums.EnumUtilsTest.testMapEx",0,"public void testMapEx(){try {EnumUtils.getEnumMap(null);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnumMap(Object.class);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enums.EnumUtilsTest.testGet",0,"public void testGet(){assertSame(ColorEnum.RED,EnumUtils.getEnum(ColorEnum.class,""Red""));assertSame(ColorEnum.GREEN,EnumUtils.getEnum(ColorEnum.class,""Green""));assertSame(ColorEnum.BLUE,EnumUtils.getEnum(ColorEnum.class,""Blue""));assertSame(null,EnumUtils.getEnum(ColorEnum.class,""Pink""));assertSame(null,EnumUtils.getEnum(DummyEnum.class,""Pink""));}"
"org.apache.commons.lang.enums.EnumUtilsTest.testGetEx",0,"public void testGetEx(){try {EnumUtils.getEnum(null,"""");fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnum(Object.class,""Red"");fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.enums.EnumUtilsTest.testGetValue",0,"public void testGetValue(){assertSame(ValuedColorEnum.RED,EnumUtils.getEnum(ValuedColorEnum.class,1));assertSame(ValuedColorEnum.GREEN,EnumUtils.getEnum(ValuedColorEnum.class,2));assertSame(ValuedColorEnum.BLUE,EnumUtils.getEnum(ValuedColorEnum.class,3));assertSame(null,EnumUtils.getEnum(ValuedColorEnum.class,4));assertSame(null,EnumUtils.getEnum(DummyEnum.class,5));}"
"org.apache.commons.lang.enums.EnumUtilsTest.testGetValueEx",0,"public void testGetValueEx(){try {EnumUtils.getEnum(null,0);fail();}catch(IllegalArgumentException ex){}try {EnumUtils.getEnum(Object.class,2);fail();}catch(IllegalArgumentException ex){}}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testConstructors",0,"public void testConstructors(){assertEquals(0d,new MutableDouble().doubleValue(),0.0001d);assertEquals(1d,new MutableDouble(1d).doubleValue(),0.0001d);assertEquals(2d,new MutableDouble(new Double(2d)).doubleValue(),0.0001d);assertEquals(3d,new MutableDouble(new MutableDouble(3d)).doubleValue(),0.0001d);try {new MutableDouble(null);fail();}catch(NullPointerException ex){}}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testGetSet",0,"public void testGetSet(){final MutableDouble mutNum=new MutableDouble(0d);assertEquals(0d,new MutableDouble().doubleValue(),0.0001d);assertEquals(new Double(0),new MutableDouble().getValue());mutNum.setValue(1);assertEquals(1d,mutNum.doubleValue(),0.0001d);assertEquals(new Double(1d),mutNum.getValue());mutNum.setValue(new Double(2d));assertEquals(2d,mutNum.doubleValue(),0.0001d);assertEquals(new Double(2d),mutNum.getValue());mutNum.setValue(new MutableDouble(3d));assertEquals(3d,mutNum.doubleValue(),0.0001d);assertEquals(new Double(3d),mutNum.getValue());try {mutNum.setValue(null);fail();}catch(NullPointerException ex){}try {mutNum.setValue(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testNanInfinite",0,"public void testNanInfinite(){MutableDouble mutNum=new MutableDouble(Double.NaN);assertEquals(true,mutNum.isNaN());mutNum=new MutableDouble(Double.POSITIVE_INFINITY);assertEquals(true,mutNum.isInfinite());mutNum=new MutableDouble(Double.NEGATIVE_INFINITY);assertEquals(true,mutNum.isInfinite());}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testEquals",0,"public void testEquals(){final MutableDouble mutNumA=new MutableDouble(0d);final MutableDouble mutNumB=new MutableDouble(0d);final MutableDouble mutNumC=new MutableDouble(1d);assertEquals(true,mutNumA.equals(mutNumA));assertEquals(true,mutNumA.equals(mutNumB));assertEquals(true,mutNumB.equals(mutNumA));assertEquals(true,mutNumB.equals(mutNumB));assertEquals(false,mutNumA.equals(mutNumC));assertEquals(false,mutNumB.equals(mutNumC));assertEquals(true,mutNumC.equals(mutNumC));assertEquals(false,mutNumA.equals(null));assertEquals(false,mutNumA.equals(new Double(0d)));assertEquals(false,mutNumA.equals(""0""));}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testHashCode",0,"public void testHashCode(){final MutableDouble mutNumA=new MutableDouble(0d);final MutableDouble mutNumB=new MutableDouble(0d);final MutableDouble mutNumC=new MutableDouble(1d);assertEquals(true,mutNumA.hashCode()== mutNumA.hashCode());assertEquals(true,mutNumA.hashCode()== mutNumB.hashCode());assertEquals(false,mutNumA.hashCode()== mutNumC.hashCode());assertEquals(true,mutNumA.hashCode()== new Double(0d).hashCode());}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testCompareTo",0,"public void testCompareTo(){final MutableDouble mutNum=new MutableDouble(0d);assertEquals(0,mutNum.compareTo(new MutableDouble(0d)));assertEquals(+1,mutNum.compareTo(new MutableDouble(-1d)));assertEquals(-1,mutNum.compareTo(new MutableDouble(1d)));try {mutNum.compareTo(null);fail();}catch(NullPointerException ex){}try {mutNum.compareTo(new Double(0d));fail();}catch(ClassCastException ex){}try {mutNum.compareTo(""0"");fail();}catch(ClassCastException ex){}}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testPrimitiveValues",0,"public void testPrimitiveValues(){MutableDouble mutNum=new MutableDouble(1.7);assertEquals(1.7F,mutNum.floatValue(),0);assertEquals(1.7,mutNum.doubleValue(),0);assertEquals((byte)1,mutNum.byteValue());assertEquals((short)1,mutNum.shortValue());assertEquals(1,mutNum.intValue());assertEquals(1L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testToDouble",0,"public void testToDouble(){assertEquals(new Double(0d),new MutableDouble(0d).toDouble());assertEquals(new Double(12.3d),new MutableDouble(12.3d).toDouble());}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testIncrement",0,"public void testIncrement(){MutableDouble mutNum=new MutableDouble(1);mutNum.increment();assertEquals(2,mutNum.intValue());assertEquals(2L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testDecrement",0,"public void testDecrement(){MutableDouble mutNum=new MutableDouble(1);mutNum.decrement();assertEquals(0,mutNum.intValue());assertEquals(0L,mutNum.longValue());}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testAddValuePrimitive",0,"public void testAddValuePrimitive(){MutableDouble mutNum=new MutableDouble(1);mutNum.add(1.1d);assertEquals(2.1d,mutNum.doubleValue(),0.01d);}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testAddValueObject",0,"public void testAddValueObject(){MutableDouble mutNum=new MutableDouble(1);mutNum.add(new Double(1.1d));assertEquals(2.1d,mutNum.doubleValue(),0.01d);}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testSubtractValuePrimitive",0,"public void testSubtractValuePrimitive(){MutableDouble mutNum=new MutableDouble(1);mutNum.subtract(0.9d);assertEquals(0.1d,mutNum.doubleValue(),0.01d);}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testSubtractValueObject",0,"public void testSubtractValueObject(){MutableDouble mutNum=new MutableDouble(1);mutNum.subtract(new Double(0.9d));assertEquals(0.1d,mutNum.doubleValue(),0.01d);}"
"org.apache.commons.lang.mutable.MutableDoubleTest.testToString",0,"public void testToString(){assertEquals(""0.0"",new MutableDouble(0d).toString());assertEquals(""10.0"",new MutableDouble(10d).toString());assertEquals(""-123.0"",new MutableDouble(-123d).toString());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classArgs_allNullInput",0,"public void testConstructor_classArgs_allNullInput(){new IllegalClassException(null,null);}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classArgs_nullExpected",0,"public void testConstructor_classArgs_nullExpected(){new IllegalClassException(null,String.class);}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classArgs_nullActual",0,"public void testConstructor_classArgs_nullActual(){new IllegalClassException(String.class,null);}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_stringArg_nullInput",0,"public void testConstructor_stringArg_nullInput(){new IllegalClassException(null);}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classObjectArgs_allNullInput",0,"public void testConstructor_classObjectArgs_allNullInput(){new IllegalClassException(null,(Object)null);}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classObjectArgs_nullExpected",0,"public void testConstructor_classObjectArgs_nullExpected(){new IllegalClassException(null,new Object());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testConstructor_classObjectArgs_nullActual",0,"public void testConstructor_classObjectArgs_nullActual(){new IllegalClassException(String.class,(Object)null);}"
"org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classArgs_nullInput",0,"public void testGetMessage_classArgs_nullInput(){final Throwable t=new IllegalClassException(null,null);assertEquals(""Expected: null,actual: null"",t.getMessage());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classArgs_normalInput",0,"public void testGetMessage_classArgs_normalInput(){final Throwable t=new IllegalClassException(String.class,Integer.class);assertEquals(""Expected: java.lang.String,actual: java.lang.Integer"",t.getMessage());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classObjectArgs_nullInput",0,"public void testGetMessage_classObjectArgs_nullInput(){final Throwable t=new IllegalClassException(null,(Object)null);assertEquals(""Expected: null,actual: null"",t.getMessage());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_classObjectArgs_normalInput",0,"public void testGetMessage_classObjectArgs_normalInput(){final Throwable t=new IllegalClassException(String.class,new Object());assertEquals(""Expected: java.lang.String,actual: java.lang.Object"",t.getMessage());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_stringArg_nullInput",0,"public void testGetMessage_stringArg_nullInput(){final Throwable t=new IllegalClassException(null);assertEquals(null,t.getMessage());}"
"org.apache.commons.lang.IllegalClassExceptionTest.testGetMessage_stringArg_validInput",0,"public void testGetMessage_stringArg_validInput(){final String message=""message"";final Throwable t=new IllegalClassException(message);assertEquals(message,t.getMessage());}"
"org.apache.commons.lang.EntitiesTest.testEscapeNamedEntity",0,"public void testEscapeNamedEntity()throws Exception {doTestEscapeNamedEntity(""&foo;"",""\u00A1"");doTestEscapeNamedEntity(""x&foo;"",""x\u00A1"");doTestEscapeNamedEntity(""&foo;x"",""\u00A1x"");doTestEscapeNamedEntity(""x&foo;x"",""x\u00A1x"");doTestEscapeNamedEntity(""&foo;&bar;"",""\u00A1\u00A2"");}"
"org.apache.commons.lang.EntitiesTest.testUnescapeNamedEntity",0,"public void testUnescapeNamedEntity()throws Exception {assertEquals(""\u00A1"",entities.unescape(""&foo;""));assertEquals(""x\u00A1"",entities.unescape(""x&foo;""));assertEquals(""\u00A1x"",entities.unescape(""&foo;x""));assertEquals(""x\u00A1x"",entities.unescape(""x&foo;x""));assertEquals(""\u00A1\u00A2"",entities.unescape(""&foo;&bar;""));}"
"org.apache.commons.lang.EntitiesTest.testUnescapeUnknownEntity",0,"public void testUnescapeUnknownEntity()throws Exception {doTestUnescapeEntity(""&zzzz;"",""&zzzz;"");}"
"org.apache.commons.lang.EntitiesTest.testUnescapeMiscellaneous",0,"public void testUnescapeMiscellaneous()throws Exception {doTestUnescapeEntity(""&hello"",""&hello"");doTestUnescapeEntity(""&;"",""&;"");doTestUnescapeEntity(""&#;"",""&#;"");doTestUnescapeEntity(""&#invalid;"",""&#invalid;"");doTestUnescapeEntity(""A"",""&#X41;"");}"
"org.apache.commons.lang.EntitiesTest.testAddEntitiesArray",0,"public void testAddEntitiesArray()throws Exception {String[][]array={{""foo"",""100""},{""bar"",""101""}};Entities e=new Entities();e.addEntities(array);assertEquals(""foo"",e.entityName(100));assertEquals(""bar"",e.entityName(101));assertEquals(100,e.entityValue(""foo""));assertEquals(101,e.entityValue(""bar""));}"
"org.apache.commons.lang.EntitiesTest.testEntitiesXmlObject",0,"public void testEntitiesXmlObject()throws Exception {assertEquals(""gt"",Entities.XML.entityName('>'));assertEquals('>',Entities.XML.entityValue(""gt""));assertEquals(-1,Entities.XML.entityValue(""xyzzy""));}"
"org.apache.commons.lang.EntitiesTest.testArrayIntMap",0,"public void testArrayIntMap()throws Exception {Entities.ArrayEntityMap map=new Entities.ArrayEntityMap(2);checkSomeEntityMap(map);Entities.ArrayEntityMap map1=new Entities.ArrayEntityMap();checkSomeEntityMap(map1);assertEquals(-1,map.value(""null""));assertNull(map.name(-1));}"
"org.apache.commons.lang.EntitiesTest.testTreeIntMap",0,"public void testTreeIntMap()throws Exception {Entities.EntityMap map=new Entities.TreeEntityMap();checkSomeEntityMap(map);}"
"org.apache.commons.lang.EntitiesTest.testHashIntMap",0,"public void testHashIntMap()throws Exception {Entities.EntityMap map=new Entities.HashEntityMap();checkSomeEntityMap(map);assertEquals(-1,map.value(""noname""));}"
"org.apache.commons.lang.EntitiesTest.testBinaryIntMap",0,"public void testBinaryIntMap()throws Exception {Entities.BinaryEntityMap map=new Entities.BinaryEntityMap(2);checkSomeEntityMap(map);Entities.BinaryEntityMap map1=new Entities.BinaryEntityMap();checkSomeEntityMap(map1);map1.add(""baz4a"",4);map1.add(""baz4b"",4);assertEquals(-1,map1.value(""baz4b""));assertEquals(""baz4a"",map1.name(4));assertNull(map1.name(99));Entities.BinaryEntityMap map2=new Entities.BinaryEntityMap();map2.add(""val1"",1);map2.add(""val2"",2);map2.add(""val3"",3);map2.add(""val4"",4);map2.add(""val5"",5);assertEquals(""val5"",map2.name(5));assertEquals(""val4"",map2.name(4));assertEquals(""val3"",map2.name(3));assertEquals(""val2"",map2.name(2));assertEquals(""val1"",map2.name(1));}"
"org.apache.commons.lang.EntitiesTest.testPrimitiveIntMap",0,"public void testPrimitiveIntMap()throws Exception {Entities.PrimitiveEntityMap map=new Entities.PrimitiveEntityMap();checkSomeEntityMap(map);}"
"org.apache.commons.lang.EntitiesTest.testHtml40Nbsp",0,"public void testHtml40Nbsp()throws Exception {assertEquals(""&nbsp;"",Entities.HTML40.escape(""\u00A0""));Entities e=new Entities();e.map=new Entities.PrimitiveEntityMap();Entities.fillWithHtml40Entities(e);assertEquals(""&nbsp;"",e.escape(""\u00A0""));}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testBlank",0,"public void testBlank(){assertEquals("""",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals("""",new ToStringBuilder(base).appendSuper("""").toString());assertEquals(""<null>"",new ToStringBuilder(base).appendSuper(""<null>"").toString());assertEquals(""hello"",new ToStringBuilder(base).appendSuper("""").append(""a"",""hello"").toString());assertEquals(""<null>,hello"",new ToStringBuilder(base).appendSuper(""<null>"").append(""a"",""hello"").toString());assertEquals(""hello"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(""<null>"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(""3"",new ToStringBuilder(base).append(i3).toString());assertEquals(""<null>"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(""3"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(""3,4"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(""<Integer>"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(""<size=0>"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(""[]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(""<size=0>"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(""{}"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(""<size=0>"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(""{}"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testLong",0,"public void testLong(){assertEquals(""3"",new ToStringBuilder(base).append(3L).toString());assertEquals(""3"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(""3,4"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(""{<null>,5,{3,6}}"",new ToStringBuilder(base).append(array).toString());assertEquals(""{<null>,5,{3,6}}"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(""<null>"",new ToStringBuilder(base).append(array).toString());assertEquals(""<null>"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(""{1,2,-3,4}"",new ToStringBuilder(base).append(array).toString());assertEquals(""{1,2,-3,4}"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(""<null>"",new ToStringBuilder(base).append(array).toString());assertEquals(""<null>"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.SimpleToStringStyleTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(""{{1,2},<null>,{5}}"",new ToStringBuilder(base).append(array).toString());assertEquals(""{{1,2},<null>,{5}}"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(""<null>"",new ToStringBuilder(base).append(array).toString());assertEquals(""<null>"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new DurationFormatUtils());Constructor[]cons=DurationFormatUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(DurationFormatUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(DurationFormatUtils.class.getModifiers()));}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords",0,"public void testFormatDurationWords(){String text=null;text=DurationFormatUtils.formatDurationWords(50 * 1000,true,false);assertEquals(""50 seconds"",text);text=DurationFormatUtils.formatDurationWords(65 * 1000,true,false);assertEquals(""1 minute 5 seconds"",text);text=DurationFormatUtils.formatDurationWords(120 * 1000,true,false);assertEquals(""2 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(121 * 1000,true,false);assertEquals(""2 minutes 1 second"",text);text=DurationFormatUtils.formatDurationWords(72 * 60 * 1000,true,false);assertEquals(""1 hour 12 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(24 * 60 * 60* 1000,true,false);assertEquals(""1 day 0 hours 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(50 * 1000,true,true);assertEquals(""50 seconds"",text);text=DurationFormatUtils.formatDurationWords(65 * 1000,true,true);assertEquals(""1 minute 5 seconds"",text);text=DurationFormatUtils.formatDurationWords(120 * 1000,true,true);assertEquals(""2 minutes"",text);text=DurationFormatUtils.formatDurationWords(121 * 1000,true,true);assertEquals(""2 minutes 1 second"",text);text=DurationFormatUtils.formatDurationWords(72 * 60 * 1000,true,true);assertEquals(""1 hour 12 minutes"",text);text=DurationFormatUtils.formatDurationWords(24 * 60 * 60* 1000,true,true);assertEquals(""1 day"",text);text=DurationFormatUtils.formatDurationWords(50 * 1000,false,true);assertEquals(""0 days 0 hours 0 minutes 50 seconds"",text);text=DurationFormatUtils.formatDurationWords(65 * 1000,false,true);assertEquals(""0 days 0 hours 1 minute 5 seconds"",text);text=DurationFormatUtils.formatDurationWords(120 * 1000,false,true);assertEquals(""0 days 0 hours 2 minutes"",text);text=DurationFormatUtils.formatDurationWords(121 * 1000,false,true);assertEquals(""0 days 0 hours 2 minutes 1 second"",text);text=DurationFormatUtils.formatDurationWords(72 * 60 * 1000,false,true);assertEquals(""0 days 1 hour 12 minutes"",text);text=DurationFormatUtils.formatDurationWords(24 * 60 * 60* 1000,false,true);assertEquals(""1 day"",text);text=DurationFormatUtils.formatDurationWords(50 * 1000,false,false);assertEquals(""0 days 0 hours 0 minutes 50 seconds"",text);text=DurationFormatUtils.formatDurationWords(65 * 1000,false,false);assertEquals(""0 days 0 hours 1 minute 5 seconds"",text);text=DurationFormatUtils.formatDurationWords(120 * 1000,false,false);assertEquals(""0 days 0 hours 2 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(121 * 1000,false,false);assertEquals(""0 days 0 hours 2 minutes 1 second"",text);text=DurationFormatUtils.formatDurationWords(72 * 60 * 1000,false,false);assertEquals(""0 days 1 hour 12 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(24 * 60 * 60* 1000 + 72 * 60 * 1000,false,false);assertEquals(""1 day 1 hour 12 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(2 * 24 * 60* 60* 1000 + 72 * 60 * 1000,false,false);assertEquals(""2 days 1 hour 12 minutes 0 seconds"",text);for (int i=2;i < 31;i++){text=DurationFormatUtils.formatDurationWords(i * 24 * 60* 60* 1000,false,false);}}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationPluralWords",0,"/** * Tests that ""1 <unit>s"" gets converted to ""1 <unit>"" but that ""11 <unit>s"" is left alone.*/public void testFormatDurationPluralWords(){long oneSecond=1000;long oneMinute=oneSecond * 60;long oneHour=oneMinute * 60;long oneDay=oneHour * 24;String text=null;text=DurationFormatUtils.formatDurationWords(oneSecond,false,false);assertEquals(""0 days 0 hours 0 minutes 1 second"",text);text=DurationFormatUtils.formatDurationWords(oneSecond * 2,false,false);assertEquals(""0 days 0 hours 0 minutes 2 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneSecond * 11,false,false);assertEquals(""0 days 0 hours 0 minutes 11 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneMinute,false,false);assertEquals(""0 days 0 hours 1 minute 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneMinute * 2,false,false);assertEquals(""0 days 0 hours 2 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneMinute * 11,false,false);assertEquals(""0 days 0 hours 11 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneMinute + oneSecond,false,false);assertEquals(""0 days 0 hours 1 minute 1 second"",text);text=DurationFormatUtils.formatDurationWords(oneHour,false,false);assertEquals(""0 days 1 hour 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneHour * 2,false,false);assertEquals(""0 days 2 hours 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneHour * 11,false,false);assertEquals(""0 days 11 hours 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond,false,false);assertEquals(""0 days 1 hour 1 minute 1 second"",text);text=DurationFormatUtils.formatDurationWords(oneDay,false,false);assertEquals(""1 day 0 hours 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneDay * 2,false,false);assertEquals(""2 days 0 hours 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneDay * 11,false,false);assertEquals(""11 days 0 hours 0 minutes 0 seconds"",text);text=DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute+ oneSecond,false,false);assertEquals(""1 day 1 hour 1 minute 1 second"",text);}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationHMS",0,"public void testFormatDurationHMS(){long time=0;assertEquals(""0:00:00.000"",DurationFormatUtils.formatDurationHMS(time));time=1;assertEquals(""0:00:00.001"",DurationFormatUtils.formatDurationHMS(time));time=15;assertEquals(""0:00:00.015"",DurationFormatUtils.formatDurationHMS(time));time=165;assertEquals(""0:00:00.165"",DurationFormatUtils.formatDurationHMS(time));time=1675;assertEquals(""0:00:01.675"",DurationFormatUtils.formatDurationHMS(time));time=13465;assertEquals(""0:00:13.465"",DurationFormatUtils.formatDurationHMS(time));time=72789;assertEquals(""0:01:12.789"",DurationFormatUtils.formatDurationHMS(time));time=12789 + 32 * 60000;assertEquals(""0:32:12.789"",DurationFormatUtils.formatDurationHMS(time));time=12789 + 62 * 60000;assertEquals(""1:02:12.789"",DurationFormatUtils.formatDurationHMS(time));}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationISO",0,"public void testFormatDurationISO(){assertEquals(""P0Y0M0DT0H0M0.000S"",DurationFormatUtils.formatDurationISO(0L));assertEquals(""P0Y0M0DT0H0M0.001S"",DurationFormatUtils.formatDurationISO(1L));assertEquals(""P0Y0M0DT0H0M0.010S"",DurationFormatUtils.formatDurationISO(10L));assertEquals(""P0Y0M0DT0H0M0.100S"",DurationFormatUtils.formatDurationISO(100L));assertEquals(""P0Y0M0DT0H1M15.321S"",DurationFormatUtils.formatDurationISO(75321L));}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDuration",0,"public void testFormatDuration(){long duration=0;assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""y""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""M""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""d""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""H""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""m""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""s""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""S""));assertEquals(""0000"",DurationFormatUtils.formatDuration(duration,""SSSS""));assertEquals(""0000"",DurationFormatUtils.formatDuration(duration,""yyyy""));assertEquals(""0000"",DurationFormatUtils.formatDuration(duration,""yyMM""));duration=60 * 1000;assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""y""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""M""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""d""));assertEquals(""0"",DurationFormatUtils.formatDuration(duration,""H""));assertEquals(""1"",DurationFormatUtils.formatDuration(duration,""m""));assertEquals(""60"",DurationFormatUtils.formatDuration(duration,""s""));assertEquals(""60000"",DurationFormatUtils.formatDuration(duration,""S""));assertEquals(""01:00"",DurationFormatUtils.formatDuration(duration,""mm:ss""));Calendar base=Calendar.getInstance();base.set(2000,0,1,0,0,0);base.set(Calendar.MILLISECOND,0);Calendar cal=Calendar.getInstance();cal.set(2003,1,1,0,0,0);cal.set(Calendar.MILLISECOND,0);duration=cal.getTime().getTime()- base.getTime().getTime();int days=366 + 365 + 365+ 31;assertEquals(""0 0 "" + days,DurationFormatUtils.formatDuration(duration,""y M d""));}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriodISO",0,"public void testFormatPeriodISO(){TimeZone timeZone=TimeZone.getTimeZone(""GMT-3"");Calendar base=Calendar.getInstance(timeZone);base.set(1970,0,1,0,0,0);base.set(Calendar.MILLISECOND,0);Calendar cal=Calendar.getInstance(timeZone);cal.set(2002,1,23,9,11,12);cal.set(Calendar.MILLISECOND,1);String text;text=DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);assertEquals(""2002-02-23T09:11:12-03:00"",text);text=DurationFormatUtils.formatPeriod(base.getTime().getTime(),cal.getTime().getTime(),DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN,false,timeZone);assertEquals(""P32Y1M22DT9H11M12.001S"",text);cal.set(1971,1,3,10,30,0);cal.set(Calendar.MILLISECOND,0);text=DurationFormatUtils.formatPeriod(base.getTime().getTime(),cal.getTime().getTime(),DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN,false,timeZone);assertEquals(""P1Y1M2DT10H30M0.000S"",text);}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatPeriod",0,"public void testFormatPeriod(){Calendar cal1970=Calendar.getInstance();cal1970.set(1970,0,1,0,0,0);cal1970.set(Calendar.MILLISECOND,0);long time1970=cal1970.getTime().getTime();assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""y""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""M""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""d""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""H""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""m""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""s""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time1970,""S""));assertEquals(""0000"",DurationFormatUtils.formatPeriod(time1970,time1970,""SSSS""));assertEquals(""0000"",DurationFormatUtils.formatPeriod(time1970,time1970,""yyyy""));assertEquals(""0000"",DurationFormatUtils.formatPeriod(time1970,time1970,""yyMM""));long time=time1970 + 60 * 1000;assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time,""y""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time,""M""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time,""d""));assertEquals(""0"",DurationFormatUtils.formatPeriod(time1970,time,""H""));assertEquals(""1"",DurationFormatUtils.formatPeriod(time1970,time,""m""));assertEquals(""60"",DurationFormatUtils.formatPeriod(time1970,time,""s""));assertEquals(""60000"",DurationFormatUtils.formatPeriod(time1970,time,""S""));assertEquals(""01:00"",DurationFormatUtils.formatPeriod(time1970,time,""mm:ss""));Calendar cal=Calendar.getInstance();cal.set(1973,6,1,0,0,0);cal.set(Calendar.MILLISECOND,0);time=cal.getTime().getTime();assertEquals(""36"",DurationFormatUtils.formatPeriod(time1970,time,""yM""));assertEquals(""3 years 6 months"",DurationFormatUtils.formatPeriod(time1970,time,""y' years 'M' months'""));assertEquals(""03/06"",DurationFormatUtils.formatPeriod(time1970,time,""yy/MM""));cal.set(1973,10,1,0,0,0);cal.set(Calendar.MILLISECOND,0);time=cal.getTime().getTime();assertEquals(""310"",DurationFormatUtils.formatPeriod(time1970,time,""yM""));assertEquals(""3 years 10 months"",DurationFormatUtils.formatPeriod(time1970,time,""y' years 'M' months'""));assertEquals(""03/10"",DurationFormatUtils.formatPeriod(time1970,time,""yy/MM""));cal.set(1974,0,1,0,0,0);cal.set(Calendar.MILLISECOND,0);time=cal.getTime().getTime();assertEquals(""40"",DurationFormatUtils.formatPeriod(time1970,time,""yM""));assertEquals(""4 years 0 months"",DurationFormatUtils.formatPeriod(time1970,time,""y' years 'M' months'""));assertEquals(""04/00"",DurationFormatUtils.formatPeriod(time1970,time,""yy/MM""));assertEquals(""48"",DurationFormatUtils.formatPeriod(time1970,time,""M""));assertEquals(""48"",DurationFormatUtils.formatPeriod(time1970,time,""MM""));assertEquals(""048"",DurationFormatUtils.formatPeriod(time1970,time,""MMM""));}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testLexx",0,"public void testLexx(){assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(DurationFormatUtils.y,1),new DurationFormatUtils.Token(DurationFormatUtils.M,1),new DurationFormatUtils.Token(DurationFormatUtils.d,1),new DurationFormatUtils.Token(DurationFormatUtils.H,1),new DurationFormatUtils.Token(DurationFormatUtils.m,1),new DurationFormatUtils.Token(DurationFormatUtils.s,1),new DurationFormatUtils.Token(DurationFormatUtils.S,1)},DurationFormatUtils.lexx(""yMdHmsS""));assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(DurationFormatUtils.H,1),new DurationFormatUtils.Token(new StringBuffer("":""),1),new DurationFormatUtils.Token(DurationFormatUtils.m,2),new DurationFormatUtils.Token(new StringBuffer("":""),1),new DurationFormatUtils.Token(DurationFormatUtils.s,2),new DurationFormatUtils.Token(new StringBuffer("".""),1),new DurationFormatUtils.Token(DurationFormatUtils.S,3)},DurationFormatUtils.lexx(""H:mm:ss.SSS""));assertArrayEquals(new DurationFormatUtils.Token[]{new DurationFormatUtils.Token(new StringBuffer(""P""),1),new DurationFormatUtils.Token(DurationFormatUtils.y,4),new DurationFormatUtils.Token(new StringBuffer(""Y""),1),new DurationFormatUtils.Token(DurationFormatUtils.M,1),new DurationFormatUtils.Token(new StringBuffer(""M""),1),new DurationFormatUtils.Token(DurationFormatUtils.d,1),new DurationFormatUtils.Token(new StringBuffer(""DT""),1),new DurationFormatUtils.Token(DurationFormatUtils.H,1),new DurationFormatUtils.Token(new StringBuffer(""H""),1),new DurationFormatUtils.Token(DurationFormatUtils.m,1),new DurationFormatUtils.Token(new StringBuffer(""M""),1),new DurationFormatUtils.Token(DurationFormatUtils.s,1),new DurationFormatUtils.Token(new StringBuffer("".""),1),new DurationFormatUtils.Token(DurationFormatUtils.S,1),new DurationFormatUtils.Token(new StringBuffer(""S""),1)},DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));DurationFormatUtils.Token token=new DurationFormatUtils.Token(DurationFormatUtils.y,4);assertFalse(""Token equal to non-Token class. "",token.equals(new Object()));assertFalse(""Token equal to Token with wrong value class. "",token.equals(new DurationFormatUtils.Token(new Object())));assertFalse(""Token equal to Token with different count. "",token.equals(new DurationFormatUtils.Token(DurationFormatUtils.y,1)));DurationFormatUtils.Token numToken=new DurationFormatUtils.Token(new Integer(1),4);assertTrue(""Token with Number value not equal to itself. "",numToken.equals(numToken));}"
"org.apache.commons.lang.time.DurationFormatUtilsTest.testBugzilla38401",0,"public void testBugzilla38401(){}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendNewLine",0,"public void testAppendNewLine(){StrBuilder sb=new StrBuilder(""---"");sb.appendNewLine().append(""+++"");assertEquals(""---"" + SystemUtils.LINE_SEPARATOR + ""+++"",sb.toString());sb=new StrBuilder(""---"");sb.setNewLineText(""#"").appendNewLine().setNewLineText(null).appendNewLine();assertEquals(""---#"" + SystemUtils.LINE_SEPARATOR,sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithNullText",0,"public void testAppendWithNullText(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"");assertEquals("""",sb.toString());sb.appendNull();assertEquals(""NULL"",sb.toString());sb.append((Object)null);assertEquals(""NULLNULL"",sb.toString());sb.append(FOO);assertEquals(""NULLNULLfoo"",sb.toString());sb.append((String)null);assertEquals(""NULLNULLfooNULL"",sb.toString());sb.append("""");assertEquals(""NULLNULLfooNULL"",sb.toString());sb.append(""bar"");assertEquals(""NULLNULLfooNULLbar"",sb.toString());sb.append((StringBuffer)null);assertEquals(""NULLNULLfooNULLbarNULL"",sb.toString());sb.append(new StringBuffer(""baz""));assertEquals(""NULLNULLfooNULLbarNULLbaz"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_Object",0,"public void testAppend_Object(){StrBuilder sb=new StrBuilder();sb.appendNull();assertEquals("""",sb.toString());sb.append((Object)null);assertEquals("""",sb.toString());sb.append(FOO);assertEquals(""foo"",sb.toString());sb.append((StringBuffer)null);assertEquals(""foo"",sb.toString());sb.append(new StringBuffer(""baz""));assertEquals(""foobaz"",sb.toString());sb.append(new StrBuilder(""yes""));assertEquals(""foobazyes"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_String",0,"public void testAppend_String(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((String)null);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(""foo"");assertEquals(""foo"",sb.toString());sb.append("""");assertEquals(""foo"",sb.toString());sb.append(""bar"");assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_String_int_int",0,"public void testAppend_String_int_int(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((String)null,0,1);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(""foo"",0,3);assertEquals(""foo"",sb.toString());try {sb.append(""bar"",-1,1);fail(""append(char[],-1,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(""bar"",3,1);fail(""append(char[],3,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(""bar"",1,-1);fail(""append(char[],,-1)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(""bar"",1,3);fail(""append(char[],1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(""bar"",-1,3);fail(""append(char[],-1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(""bar"",4,0);fail(""append(char[],4,0)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.append(""bar"",3,0);assertEquals(""foo"",sb.toString());sb.append(""abcbardef"",3,3);assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StringBuffer",0,"public void testAppend_StringBuffer(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((StringBuffer)null);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(new StringBuffer(""foo""));assertEquals(""foo"",sb.toString());sb.append(new StringBuffer(""""));assertEquals(""foo"",sb.toString());sb.append(new StringBuffer(""bar""));assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StringBuffer_int_int",0,"public void testAppend_StringBuffer_int_int(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((StringBuffer)null,0,1);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(new StringBuffer(""foo""),0,3);assertEquals(""foo"",sb.toString());try {sb.append(new StringBuffer(""bar""),-1,1);fail(""append(char[],-1,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StringBuffer(""bar""),3,1);fail(""append(char[],3,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StringBuffer(""bar""),1,-1);fail(""append(char[],,-1)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StringBuffer(""bar""),1,3);fail(""append(char[],1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StringBuffer(""bar""),-1,3);fail(""append(char[],-1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StringBuffer(""bar""),4,0);fail(""append(char[],4,0)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.append(new StringBuffer(""bar""),3,0);assertEquals(""foo"",sb.toString());sb.append(new StringBuffer(""abcbardef""),3,3);assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StrBuilder",0,"public void testAppend_StrBuilder(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((StrBuilder)null);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(new StrBuilder(""foo""));assertEquals(""foo"",sb.toString());sb.append(new StrBuilder(""""));assertEquals(""foo"",sb.toString());sb.append(new StrBuilder(""bar""));assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_StrBuilder_int_int",0,"public void testAppend_StrBuilder_int_int(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((StrBuilder)null,0,1);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(new StrBuilder(""foo""),0,3);assertEquals(""foo"",sb.toString());try {sb.append(new StrBuilder(""bar""),-1,1);fail(""append(char[],-1,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StrBuilder(""bar""),3,1);fail(""append(char[],3,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StrBuilder(""bar""),1,-1);fail(""append(char[],,-1)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StrBuilder(""bar""),1,3);fail(""append(char[],1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StrBuilder(""bar""),-1,3);fail(""append(char[],-1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new StrBuilder(""bar""),4,0);fail(""append(char[],4,0)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.append(new StrBuilder(""bar""),3,0);assertEquals(""foo"",sb.toString());sb.append(new StrBuilder(""abcbardef""),3,3);assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_CharArray",0,"public void testAppend_CharArray(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((char[])null);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(new char[0]);assertEquals("""",sb.toString());sb.append(new char[]{'f','o','o'});assertEquals(""foo"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_CharArray_int_int",0,"public void testAppend_CharArray_int_int(){StrBuilder sb=new StrBuilder();sb.setNullText(""NULL"").append((char[])null,0,1);assertEquals(""NULL"",sb.toString());sb=new StrBuilder();sb.append(new char[]{'f','o','o'},0,3);assertEquals(""foo"",sb.toString());try {sb.append(new char[]{'b','a','r'},-1,1);fail(""append(char[],-1,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new char[]{'b','a','r'},3,1);fail(""append(char[],3,)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new char[]{'b','a','r'},1,-1);fail(""append(char[],,-1)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new char[]{'b','a','r'},1,3);fail(""append(char[],1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new char[]{'b','a','r'},-1,3);fail(""append(char[],-1,3)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.append(new char[]{'b','a','r'},4,0);fail(""append(char[],4,0)expected IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.append(new char[]{'b','a','r'},3,0);assertEquals(""foo"",sb.toString());sb.append(new char[]{'a','b','c','b','a','r','d','e','f'},3,3);assertEquals(""foobar"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_Primitive",0,"public void testAppend_Primitive(){StrBuilder sb=new StrBuilder();sb.append(true);assertEquals(""true"",sb.toString());sb.append(false);assertEquals(""truefalse"",sb.toString());sb.append('!');assertEquals(""truefalse!"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppend_PrimitiveNumber",0,"public void testAppend_PrimitiveNumber(){StrBuilder sb=new StrBuilder();sb.append(0);assertEquals(""0"",sb.toString());sb.append(1L);assertEquals(""01"",sb.toString());sb.append(2.3f);assertEquals(""012.3"",sb.toString());sb.append(4.5d);assertEquals(""012.34.5"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendPadding",0,"public void testAppendPadding(){StrBuilder sb=new StrBuilder();sb.append(""foo"");assertEquals(""foo"",sb.toString());sb.appendPadding(-1,'-');assertEquals(""foo"",sb.toString());sb.appendPadding(0,'-');assertEquals(""foo"",sb.toString());sb.appendPadding(1,'-');assertEquals(""foo-"",sb.toString());sb.appendPadding(16,'-');assertEquals(20,sb.length());assertEquals(""foo-----------------"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft",0,"public void testAppendFixedWidthPadLeft(){StrBuilder sb=new StrBuilder();sb.appendFixedWidthPadLeft(""foo"",-1,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(""foo"",0,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(""foo"",1,'-');assertEquals(""o"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(""foo"",2,'-');assertEquals(""oo"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(""foo"",3,'-');assertEquals(""foo"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(""foo"",4,'-');assertEquals(""-foo"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(""foo"",10,'-');assertEquals(10,sb.length());assertEquals(""-------foo"",sb.toString());sb.clear();sb.setNullText(""null"");sb.appendFixedWidthPadLeft(null,5,'-');assertEquals(""-null"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadLeft_int",0,"public void testAppendFixedWidthPadLeft_int(){StrBuilder sb=new StrBuilder();sb.appendFixedWidthPadLeft(123,-1,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(123,0,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(123,1,'-');assertEquals(""3"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(123,2,'-');assertEquals(""23"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(123,3,'-');assertEquals(""123"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(123,4,'-');assertEquals(""-123"",sb.toString());sb.clear();sb.appendFixedWidthPadLeft(123,10,'-');assertEquals(10,sb.length());assertEquals(""-------123"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight",0,"public void testAppendFixedWidthPadRight(){StrBuilder sb=new StrBuilder();sb.appendFixedWidthPadRight(""foo"",-1,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadRight(""foo"",0,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadRight(""foo"",1,'-');assertEquals(""f"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(""foo"",2,'-');assertEquals(""fo"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(""foo"",3,'-');assertEquals(""foo"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(""foo"",4,'-');assertEquals(""foo-"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(""foo"",10,'-');assertEquals(10,sb.length());assertEquals(""foo-------"",sb.toString());sb.clear();sb.setNullText(""null"");sb.appendFixedWidthPadRight(null,5,'-');assertEquals(""null-"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendFixedWidthPadRight_int",0,"public void testAppendFixedWidthPadRight_int(){StrBuilder sb=new StrBuilder();sb.appendFixedWidthPadRight(123,-1,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadRight(123,0,'-');assertEquals("""",sb.toString());sb.clear();sb.appendFixedWidthPadRight(123,1,'-');assertEquals(""1"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(123,2,'-');assertEquals(""12"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(123,3,'-');assertEquals(""123"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(123,4,'-');assertEquals(""123-"",sb.toString());sb.clear();sb.appendFixedWidthPadRight(123,10,'-');assertEquals(10,sb.length());assertEquals(""123-------"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Array",0,"public void testAppendWithSeparators_Array(){StrBuilder sb=new StrBuilder();sb.appendWithSeparators((Object[])null,"","");assertEquals("""",sb.toString());sb.clear();sb.appendWithSeparators(new Object[0],"","");assertEquals("""",sb.toString());sb.clear();sb.appendWithSeparators(new Object[]{""foo"",""bar"",""baz""},"","");assertEquals(""foo,bar,baz"",sb.toString());sb.clear();sb.appendWithSeparators(new Object[]{""foo"",""bar"",""baz""},null);assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.appendWithSeparators(new Object[]{""foo"",null,""baz""},"","");assertEquals(""foo,,baz"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Collection",0,"public void testAppendWithSeparators_Collection(){StrBuilder sb=new StrBuilder();sb.appendWithSeparators((Collection)null,"","");assertEquals("""",sb.toString());sb.clear();sb.appendWithSeparators(Collections.EMPTY_LIST,"","");assertEquals("""",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",""bar"",""baz""}),"","");assertEquals(""foo,bar,baz"",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",""bar"",""baz""}),null);assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",null,""baz""}),"","");assertEquals(""foo,,baz"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparators_Iterator",0,"public void testAppendWithSeparators_Iterator(){StrBuilder sb=new StrBuilder();sb.appendWithSeparators((Iterator)null,"","");assertEquals("""",sb.toString());sb.clear();sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(),"","");assertEquals("""",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",""bar"",""baz""}).iterator(),"","");assertEquals(""foo,bar,baz"",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",""bar"",""baz""}).iterator(),null);assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",null,""baz""}).iterator(),"","");assertEquals(""foo,,baz"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testAppendWithSeparatorsWithNullText",0,"public void testAppendWithSeparatorsWithNullText(){StrBuilder sb=new StrBuilder();sb.setNullText(""null"");sb.appendWithSeparators(new Object[]{""foo"",null,""baz""},"","");assertEquals(""foo,null,baz"",sb.toString());sb.clear();sb.appendWithSeparators(Arrays.asList(new Object[]{""foo"",null,""baz""}),"","");assertEquals(""foo,null,baz"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testInsert",0,"public void testInsert(){StrBuilder sb=new StrBuilder();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,FOO);fail(""insert(-1,Object)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,FOO);fail(""insert(7,Object)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,(Object)null);assertEquals(""barbaz"",sb.toString());sb.insert(0,FOO);assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,""foo"");fail(""insert(-1,String)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,""foo"");fail(""insert(7,String)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,(String)null);assertEquals(""barbaz"",sb.toString());sb.insert(0,""foo"");assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,new char[]{'f','o','o'});fail(""insert(-1,char[])expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,new char[]{'f','o','o'});fail(""insert(7,char[])expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,(char[])null);assertEquals(""barbaz"",sb.toString());sb.insert(0,new char[0]);assertEquals(""barbaz"",sb.toString());sb.insert(0,new char[]{'f','o','o'});assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,new char[]{'a','b','c','f','o','o','d','e','f'},3,3);fail(""insert(-1,char[],3,3)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,new char[]{'a','b','c','f','o','o','d','e','f'},3,3);fail(""insert(7,char[],3,3)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,(char[])null,0,0);assertEquals(""barbaz"",sb.toString());sb.insert(0,new char[0],0,0);assertEquals(""barbaz"",sb.toString());try {sb.insert(0,new char[]{'a','b','c','f','o','o','d','e','f'},-1,3);fail(""insert(0,char[],-1,3)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(0,new char[]{'a','b','c','f','o','o','d','e','f'},10,3);fail(""insert(0,char[],10,3)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(0,new char[]{'a','b','c','f','o','o','d','e','f'},0,-1);fail(""insert(0,char[],0,-1)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(0,new char[]{'a','b','c','f','o','o','d','e','f'},0,10);fail(""insert(0,char[],0,10)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,new char[]{'a','b','c','f','o','o','d','e','f'},0,0);assertEquals(""barbaz"",sb.toString());sb.insert(0,new char[]{'a','b','c','f','o','o','d','e','f'},3,3);assertEquals(""foobarbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,true);fail(""insert(-1,boolean)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,true);fail(""insert(7,boolean)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,true);assertEquals(""truebarbaz"",sb.toString());sb.insert(0,false);assertEquals(""falsetruebarbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,'!');fail(""insert(-1,char)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,'!');fail(""insert(7,char)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,'!');assertEquals(""!barbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,0);fail(""insert(-1,int)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,0);fail(""insert(7,int)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,'0');assertEquals(""0barbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,1L);fail(""insert(-1,long)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,1L);fail(""insert(7,long)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,1L);assertEquals(""1barbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,2.3F);fail(""insert(-1,float)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,2.3F);fail(""insert(7,float)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,2.3F);assertEquals(""2.3barbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,4.5D);fail(""insert(-1,double)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,4.5D);fail(""insert(7,double)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,4.5D);assertEquals(""4.5barbaz"",sb.toString());}"
"org.apache.commons.lang.text.StrBuilderAppendInsertTest.testInsertWithNullText",0,"public void testInsertWithNullText(){StrBuilder sb=new StrBuilder();sb.setNullText(""null"");sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,FOO);fail(""insert(-1,Object)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,FOO);fail(""insert(7,Object)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,(Object)null);assertEquals(""nullbarbaz"",sb.toString());sb.insert(0,FOO);assertEquals(""foonullbarbaz"",sb.toString());sb.clear();sb.append(""barbaz"");assertEquals(""barbaz"",sb.toString());try {sb.insert(-1,""foo"");fail(""insert(-1,String)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {sb.insert(7,""foo"");fail(""insert(7,String)expected StringIndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}sb.insert(0,(String)null);assertEquals(""nullbarbaz"",sb.toString());sb.insert(0,""foo"");assertEquals(""foonullbarbaz"",sb.toString());sb.insert(0,(char[])null);assertEquals(""nullfoonullbarbaz"",sb.toString());sb.insert(0,(char[])null,0,0);assertEquals(""nullnullfoonullbarbaz"",sb.toString());}"
"org.apache.commons.lang.WordUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new WordUtils());Constructor[]cons=WordUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(WordUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(WordUtils.class.getModifiers()));}"
"org.apache.commons.lang.WordUtilsTest.testWrap_StringInt",0,"public void testWrap_StringInt(){assertEquals(null,WordUtils.wrap(null,20));assertEquals(null,WordUtils.wrap(null,-1));assertEquals("""",WordUtils.wrap("""",20));assertEquals("""",WordUtils.wrap("""",-1));String systemNewLine=System.getProperty(""line.separator"");String input=""Here is one line of text that is going to be wrapped after 20 columns."";String expected=""Here is one line of"" + systemNewLine + ""text that is going""+ systemNewLine+ ""to be wrapped after""+ systemNewLine+ ""20 columns."";assertEquals(expected,WordUtils.wrap(input,20));input=""Click here to jump to the jakarta website - http://jakarta.apache.org"";expected=""Click here to jump"" + systemNewLine + ""to the jakarta""+ systemNewLine+ ""website -""+ systemNewLine+ ""http://jakarta.apache.org"";assertEquals(expected,WordUtils.wrap(input,20));input=""Click here,http://jakarta.apache.org,to jump to the jakarta website"";expected=""Click here,"" + systemNewLine + ""http://jakarta.apache.org,""+ systemNewLine+ ""to jump to the""+ systemNewLine+ ""jakarta website"";assertEquals(expected,WordUtils.wrap(input,20));}"
"org.apache.commons.lang.WordUtilsTest.testWrap_StringIntStringBoolean",0,"public void testWrap_StringIntStringBoolean(){assertEquals(null,WordUtils.wrap(null,20,""\n"",false));assertEquals(null,WordUtils.wrap(null,20,""\n"",true));assertEquals(null,WordUtils.wrap(null,20,null,true));assertEquals(null,WordUtils.wrap(null,20,null,false));assertEquals(null,WordUtils.wrap(null,-1,null,true));assertEquals(null,WordUtils.wrap(null,-1,null,false));assertEquals("""",WordUtils.wrap("""",20,""\n"",false));assertEquals("""",WordUtils.wrap("""",20,""\n"",true));assertEquals("""",WordUtils.wrap("""",20,null,false));assertEquals("""",WordUtils.wrap("""",20,null,true));assertEquals("""",WordUtils.wrap("""",-1,null,false));assertEquals("""",WordUtils.wrap("""",-1,null,true));String input=""Here is one line of text that is going to be wrapped after 20 columns."";String expected=""Here is one line of\ntext that is going\nto be wrapped after\n20 columns."";assertEquals(expected,WordUtils.wrap(input,20,""\n"",false));assertEquals(expected,WordUtils.wrap(input,20,""\n"",true));input=""Here is one line of text that is going to be wrapped after 20 columns."";expected=""Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."";assertEquals(expected,WordUtils.wrap(input,20,""<br />"",false));assertEquals(expected,WordUtils.wrap(input,20,""<br />"",true));input=""Here is one line"";expected=""Here\nis one\nline"";assertEquals(expected,WordUtils.wrap(input,6,""\n"",false));expected=""Here\nis\none\nline"";assertEquals(expected,WordUtils.wrap(input,2,""\n"",false));assertEquals(expected,WordUtils.wrap(input,-1,""\n"",false));String systemNewLine=System.getProperty(""line.separator"");input=""Here is one line of text that is going to be wrapped after 20 columns."";expected=""Here is one line of"" + systemNewLine + ""text that is going""+ systemNewLine+ ""to be wrapped after""+ systemNewLine+ ""20 columns."";assertEquals(expected,WordUtils.wrap(input,20,null,false));assertEquals(expected,WordUtils.wrap(input,20,null,true));input="" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."";expected=""Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."";assertEquals(expected,WordUtils.wrap(input,20,""\n"",false));assertEquals(expected,WordUtils.wrap(input,20,""\n"",true));input=""Here is\tone line of text that is going to be wrapped after 20 columns."";expected=""Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."";assertEquals(expected,WordUtils.wrap(input,20,""\n"",false));assertEquals(expected,WordUtils.wrap(input,20,""\n"",true));input=""Here is one line of\ttext that is going to be wrapped after 20 columns."";expected=""Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."";assertEquals(expected,WordUtils.wrap(input,20,""\n"",false));assertEquals(expected,WordUtils.wrap(input,20,""\n"",true));input=""Click here to jump to the jakarta website - http://jakarta.apache.org"";expected=""Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"";assertEquals(expected,WordUtils.wrap(input,20,""\n"",false));expected=""Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"";assertEquals(expected,WordUtils.wrap(input,20,""\n"",true));input=""Click here,http://jakarta.apache.org,to jump to the jakarta website"";expected=""Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"";assertEquals(expected,WordUtils.wrap(input,20,""\n"",false));expected=""Click here,\nhttp://jakarta.apach\ne.org,to jump to\nthe jakarta website"";assertEquals(expected,WordUtils.wrap(input,20,""\n"",true));}"
"org.apache.commons.lang.WordUtilsTest.testCapitalize_String",0,"public void testCapitalize_String(){assertEquals(null,WordUtils.capitalize(null));assertEquals("""",WordUtils.capitalize(""""));assertEquals(""  "",WordUtils.capitalize(""  ""));assertEquals(""I"",WordUtils.capitalize(""I""));assertEquals(""I"",WordUtils.capitalize(""i""));assertEquals(""I Am Here 123"",WordUtils.capitalize(""i am here 123""));assertEquals(""I Am Here 123"",WordUtils.capitalize(""I Am Here 123""));assertEquals(""I Am HERE 123"",WordUtils.capitalize(""i am HERE 123""));assertEquals(""I AM HERE 123"",WordUtils.capitalize(""I AM HERE 123""));}"
"org.apache.commons.lang.WordUtilsTest.testCapitalizeWithDelimiters_String",0,"public void testCapitalizeWithDelimiters_String(){assertEquals(null,WordUtils.capitalize(null,null));assertEquals("""",WordUtils.capitalize("""",new char[0]));assertEquals(""  "",WordUtils.capitalize(""  "",new char[0]));char[]chars=new char[]{'-','+',' ','@'};assertEquals(""I"",WordUtils.capitalize(""I"",chars));assertEquals(""I"",WordUtils.capitalize(""i"",chars));assertEquals(""I-Am Here+123"",WordUtils.capitalize(""i-am here+123"",chars));assertEquals(""I Am+Here-123"",WordUtils.capitalize(""I Am+Here-123"",chars));assertEquals(""I+Am-HERE 123"",WordUtils.capitalize(""i+am-HERE 123"",chars));assertEquals(""I-AM HERE+123"",WordUtils.capitalize(""I-AM HERE+123"",chars));chars=new char[]{'.'};assertEquals(""I aM.Fine"",WordUtils.capitalize(""i aM.fine"",chars));assertEquals(""I Am.fine"",WordUtils.capitalize(""i am.fine"",null));}"
"org.apache.commons.lang.WordUtilsTest.testCapitalizeFully_String",0,"public void testCapitalizeFully_String(){assertEquals(null,WordUtils.capitalizeFully(null));assertEquals("""",WordUtils.capitalizeFully(""""));assertEquals(""  "",WordUtils.capitalizeFully(""  ""));assertEquals(""I"",WordUtils.capitalizeFully(""I""));assertEquals(""I"",WordUtils.capitalizeFully(""i""));assertEquals(""I Am Here 123"",WordUtils.capitalizeFully(""i am here 123""));assertEquals(""I Am Here 123"",WordUtils.capitalizeFully(""I Am Here 123""));assertEquals(""I Am Here 123"",WordUtils.capitalizeFully(""i am HERE 123""));assertEquals(""I Am Here 123"",WordUtils.capitalizeFully(""I AM HERE 123""));}"
"org.apache.commons.lang.WordUtilsTest.testCapitalizeFullyWithDelimiters_String",0,"public void testCapitalizeFullyWithDelimiters_String(){assertEquals(null,WordUtils.capitalizeFully(null,null));assertEquals("""",WordUtils.capitalizeFully("""",new char[0]));assertEquals(""  "",WordUtils.capitalizeFully(""  "",new char[0]));char[]chars=new char[]{'-','+',' ','@'};assertEquals(""I"",WordUtils.capitalizeFully(""I"",chars));assertEquals(""I"",WordUtils.capitalizeFully(""i"",chars));assertEquals(""I-Am Here+123"",WordUtils.capitalizeFully(""i-am here+123"",chars));assertEquals(""I Am+Here-123"",WordUtils.capitalizeFully(""I Am+Here-123"",chars));assertEquals(""I+Am-Here 123"",WordUtils.capitalizeFully(""i+am-HERE 123"",chars));assertEquals(""I-Am Here+123"",WordUtils.capitalizeFully(""I-AM HERE+123"",chars));chars=new char[]{'.'};assertEquals(""I am.Fine"",WordUtils.capitalizeFully(""i aM.fine"",chars));assertEquals(""I Am.fine"",WordUtils.capitalizeFully(""i am.fine"",null));}"
"org.apache.commons.lang.WordUtilsTest.testUncapitalize_String",0,"public void testUncapitalize_String(){assertEquals(null,WordUtils.uncapitalize(null));assertEquals("""",WordUtils.uncapitalize(""""));assertEquals(""  "",WordUtils.uncapitalize(""  ""));assertEquals(""i"",WordUtils.uncapitalize(""I""));assertEquals(""i"",WordUtils.uncapitalize(""i""));assertEquals(""i am here 123"",WordUtils.uncapitalize(""i am here 123""));assertEquals(""i am here 123"",WordUtils.uncapitalize(""I Am Here 123""));assertEquals(""i am hERE 123"",WordUtils.uncapitalize(""i am HERE 123""));assertEquals(""i aM hERE 123"",WordUtils.uncapitalize(""I AM HERE 123""));}"
"org.apache.commons.lang.WordUtilsTest.testUncapitalizeWithDelimiters_String",0,"public void testUncapitalizeWithDelimiters_String(){assertEquals(null,WordUtils.uncapitalize(null,null));assertEquals("""",WordUtils.uncapitalize("""",new char[0]));assertEquals(""  "",WordUtils.uncapitalize(""  "",new char[0]));char[]chars=new char[]{'-','+',' ','@'};assertEquals(""i"",WordUtils.uncapitalize(""I"",chars));assertEquals(""i"",WordUtils.uncapitalize(""i"",chars));assertEquals(""i am-here+123"",WordUtils.uncapitalize(""i am-here+123"",chars));assertEquals(""i+am here-123"",WordUtils.uncapitalize(""I+Am Here-123"",chars));assertEquals(""i-am+hERE 123"",WordUtils.uncapitalize(""i-am+HERE 123"",chars));assertEquals(""i aM-hERE+123"",WordUtils.uncapitalize(""I AM-HERE+123"",chars));chars=new char[]{'.'};assertEquals(""i AM.fINE"",WordUtils.uncapitalize(""I AM.FINE"",chars));assertEquals(""i aM.FINE"",WordUtils.uncapitalize(""I AM.FINE"",null));}"
"org.apache.commons.lang.WordUtilsTest.testInitials_String",0,"public void testInitials_String(){assertEquals(null,WordUtils.initials(null));assertEquals("""",WordUtils.initials(""""));assertEquals("""",WordUtils.initials(""  ""));assertEquals(""I"",WordUtils.initials(""I""));assertEquals(""i"",WordUtils.initials(""i""));assertEquals(""BJL"",WordUtils.initials(""Ben John Lee""));assertEquals(""BJ"",WordUtils.initials(""Ben J.Lee""));assertEquals(""BJ.L"",WordUtils.initials("" Ben   John  . Lee""));assertEquals(""iah1"",WordUtils.initials(""i am here 123""));}"
"org.apache.commons.lang.WordUtilsTest.testInitials_String_charArray",0,"public void testInitials_String_charArray(){char[]array=null;assertEquals(null,WordUtils.initials(null,array));assertEquals("""",WordUtils.initials("""",array));assertEquals("""",WordUtils.initials(""  "",array));assertEquals(""I"",WordUtils.initials(""I"",array));assertEquals(""i"",WordUtils.initials(""i"",array));assertEquals(""S"",WordUtils.initials(""SJC"",array));assertEquals(""BJL"",WordUtils.initials(""Ben John Lee"",array));assertEquals(""BJ"",WordUtils.initials(""Ben J.Lee"",array));assertEquals(""BJ.L"",WordUtils.initials("" Ben   John  . Lee"",array));assertEquals(""KO"",WordUtils.initials(""Kay O'Murphy"",array));assertEquals(""iah1"",WordUtils.initials(""i am here 123"",array));array=new char[0];assertEquals(null,WordUtils.initials(null,array));assertEquals("""",WordUtils.initials("""",array));assertEquals("""",WordUtils.initials(""  "",array));assertEquals("""",WordUtils.initials(""I"",array));assertEquals("""",WordUtils.initials(""i"",array));assertEquals("""",WordUtils.initials(""SJC"",array));assertEquals("""",WordUtils.initials(""Ben John Lee"",array));assertEquals("""",WordUtils.initials(""Ben J.Lee"",array));assertEquals("""",WordUtils.initials("" Ben   John  . Lee"",array));assertEquals("""",WordUtils.initials(""Kay O'Murphy"",array));assertEquals("""",WordUtils.initials(""i am here 123"",array));array="" "".toCharArray();assertEquals(null,WordUtils.initials(null,array));assertEquals("""",WordUtils.initials("""",array));assertEquals("""",WordUtils.initials(""  "",array));assertEquals(""I"",WordUtils.initials(""I"",array));assertEquals(""i"",WordUtils.initials(""i"",array));assertEquals(""S"",WordUtils.initials(""SJC"",array));assertEquals(""BJL"",WordUtils.initials(""Ben John Lee"",array));assertEquals(""BJ"",WordUtils.initials(""Ben J.Lee"",array));assertEquals(""BJ.L"",WordUtils.initials("" Ben   John  . Lee"",array));assertEquals(""KO"",WordUtils.initials(""Kay O'Murphy"",array));assertEquals(""iah1"",WordUtils.initials(""i am here 123"",array));array="" ."".toCharArray();assertEquals(null,WordUtils.initials(null,array));assertEquals("""",WordUtils.initials("""",array));assertEquals("""",WordUtils.initials(""  "",array));assertEquals(""I"",WordUtils.initials(""I"",array));assertEquals(""i"",WordUtils.initials(""i"",array));assertEquals(""S"",WordUtils.initials(""SJC"",array));assertEquals(""BJL"",WordUtils.initials(""Ben John Lee"",array));assertEquals(""BJL"",WordUtils.initials(""Ben J.Lee"",array));assertEquals(""BJL"",WordUtils.initials("" Ben   John  . Lee"",array));assertEquals(""KO"",WordUtils.initials(""Kay O'Murphy"",array));assertEquals(""iah1"",WordUtils.initials(""i am here 123"",array));array="" .'"".toCharArray();assertEquals(null,WordUtils.initials(null,array));assertEquals("""",WordUtils.initials("""",array));assertEquals("""",WordUtils.initials(""  "",array));assertEquals(""I"",WordUtils.initials(""I"",array));assertEquals(""i"",WordUtils.initials(""i"",array));assertEquals(""S"",WordUtils.initials(""SJC"",array));assertEquals(""BJL"",WordUtils.initials(""Ben John Lee"",array));assertEquals(""BJL"",WordUtils.initials(""Ben J.Lee"",array));assertEquals(""BJL"",WordUtils.initials("" Ben   John  . Lee"",array));assertEquals(""KOM"",WordUtils.initials(""Kay O'Murphy"",array));assertEquals(""iah1"",WordUtils.initials(""i am here 123"",array));array=""SIJo1"".toCharArray();assertEquals(null,WordUtils.initials(null,array));assertEquals("""",WordUtils.initials("""",array));assertEquals("" "",WordUtils.initials(""  "",array));assertEquals("""",WordUtils.initials(""I"",array));assertEquals(""i"",WordUtils.initials(""i"",array));assertEquals(""C"",WordUtils.initials(""SJC"",array));assertEquals(""Bh"",WordUtils.initials(""Ben John Lee"",array));assertEquals(""B."",WordUtils.initials(""Ben J.Lee"",array));assertEquals("" h"",WordUtils.initials("" Ben   John  . Lee"",array));assertEquals(""K"",WordUtils.initials(""Kay O'Murphy"",array));assertEquals(""i2"",WordUtils.initials(""i am here 123"",array));}"
"org.apache.commons.lang.WordUtilsTest.testSwapCase_String",0,"public void testSwapCase_String(){assertEquals(null,WordUtils.swapCase(null));assertEquals("""",WordUtils.swapCase(""""));assertEquals(""  "",WordUtils.swapCase(""  ""));assertEquals(""i"",WordUtils.swapCase(""I""));assertEquals(""I"",WordUtils.swapCase(""i""));assertEquals(""I AM HERE 123"",WordUtils.swapCase(""i am here 123""));assertEquals(""i aM hERE 123"",WordUtils.swapCase(""I Am Here 123""));assertEquals(""I AM here 123"",WordUtils.swapCase(""i am HERE 123""));assertEquals(""i am here 123"",WordUtils.swapCase(""I AM HERE 123""));String test=""This String contains a TitleCase character: \u01C8"";String expect=""tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"";assertEquals(expect,WordUtils.swapCase(test));}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testBlank",0,"public void testBlank(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).toString());}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testAppendSuper",0,"public void testAppendSuper(){assertEquals(baseStr + ""[]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[<null>,a=hello]"",new ToStringBuilder(base).appendSuper(""Integer@8888[<null>]"").append(""a"",""hello"").toString());assertEquals(baseStr + ""[a=hello]"",new ToStringBuilder(base).appendSuper(null).append(""a"",""hello"").toString());}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testObject",0,"public void testObject(){Integer i3=new Integer(3);Integer i4=new Integer(4);assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)null).toString());assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(i3).toString());assertEquals(baseStr + ""[a=<null>]"",new ToStringBuilder(base).append(""a"",(Object)null).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",i3).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",i3).append(""b"",i4).toString());assertEquals(baseStr + ""[a=<Integer>]"",new ToStringBuilder(base).append(""a"",i3,false).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",new ArrayList(),false).toString());assertEquals(baseStr + ""[a=[]]"",new ToStringBuilder(base).append(""a"",new ArrayList(),true).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",new HashMap(),false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",new HashMap(),true).toString());assertEquals(baseStr + ""[a=<size=0>]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],false).toString());assertEquals(baseStr + ""[a={}]"",new ToStringBuilder(base).append(""a"",(Object)new String[0],true).toString());}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testLong",0,"public void testLong(){assertEquals(baseStr + ""[3]"",new ToStringBuilder(base).append(3L).toString());assertEquals(baseStr + ""[a=3]"",new ToStringBuilder(base).append(""a"",3L).toString());assertEquals(baseStr + ""[a=3,b=4]"",new ToStringBuilder(base).append(""a"",3L).append(""b"",4L).toString());}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testObjectArray",0,"public void testObjectArray(){Object[]array=new Object[]{null,base,new int[]{3,6}};assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{<null>,5,{3,6}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testLongArray",0,"public void testLongArray(){long[]array=new long[]{1,2,-3,4};assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{1,2,-3,4}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.builder.DefaultToStringStyleTest.testLongArrayArray",0,"public void testLongArrayArray(){long[][]array=new long[][]{{1,2},null,{5}};assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"",new ToStringBuilder(base).append((Object)array).toString());array=null;assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append(array).toString());assertEquals(baseStr + ""[<null>]"",new ToStringBuilder(base).append((Object)array).toString());}"
"org.apache.commons.lang.ObjectUtilsTest.testConstructor",0,"public void testConstructor(){assertNotNull(new ObjectUtils());Constructor[]cons=ObjectUtils.class.getDeclaredConstructors();assertEquals(1,cons.length);assertEquals(true,Modifier.isPublic(cons[0].getModifiers()));assertEquals(true,Modifier.isPublic(ObjectUtils.class.getModifiers()));assertEquals(false,Modifier.isFinal(ObjectUtils.class.getModifiers()));}"
"org.apache.commons.lang.ObjectUtilsTest.testIsNull",0,"public void testIsNull(){Object o=FOO;Object dflt=BAR;assertSame(""dflt was not returned when o was null"",dflt,ObjectUtils.defaultIfNull(null,dflt));assertSame(""dflt was returned when o was not null"",o,ObjectUtils.defaultIfNull(o,dflt));}"
"org.apache.commons.lang.ObjectUtilsTest.testEquals",0,"public void testEquals(){assertTrue(""ObjectUtils.equals(null,null)returned false"",ObjectUtils.equals(null,null));assertTrue(""ObjectUtils.equals(\""foo\"",null)returned true"",!ObjectUtils.equals(FOO,null));assertTrue(""ObjectUtils.equals(null,\""bar\"")returned true"",!ObjectUtils.equals(null,BAR));assertTrue(""ObjectUtils.equals(\""foo\"",\""bar\"")returned true"",!ObjectUtils.equals(FOO,BAR));assertTrue(""ObjectUtils.equals(\""foo\"",\""foo\"")returned false"",ObjectUtils.equals(FOO,FOO));}"
"org.apache.commons.lang.ObjectUtilsTest.testHashCode",0,"public void testHashCode(){assertEquals(0,ObjectUtils.hashCode(null));assertEquals(""a"".hashCode(),ObjectUtils.hashCode(""a""));}"
"org.apache.commons.lang.ObjectUtilsTest.testIdentityToString",0,"public void testIdentityToString(){assertEquals(null,ObjectUtils.identityToString(null));assertEquals(""java.lang.String@"" + Integer.toHexString(System.identityHashCode(FOO)),ObjectUtils.identityToString(FOO));Integer i=new Integer(90);assertEquals(""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(i)),ObjectUtils.identityToString(i));}"
"org.apache.commons.lang.ObjectUtilsTest.testAppendIdentityToString",0,"public void testAppendIdentityToString(){assertEquals(null,ObjectUtils.appendIdentityToString(null,null));assertEquals(null,ObjectUtils.appendIdentityToString(new StringBuffer(),null));assertEquals(""java.lang.String@"" + Integer.toHexString(System.identityHashCode(FOO)),ObjectUtils.appendIdentityToString(null,FOO).toString());assertEquals(""java.lang.String@"" + Integer.toHexString(System.identityHashCode(FOO)),ObjectUtils.appendIdentityToString(new StringBuffer(),FOO).toString());Integer val=new Integer(90);assertEquals(""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(val)),ObjectUtils.appendIdentityToString(null,val).toString());assertEquals(""java.lang.Integer@"" + Integer.toHexString(System.identityHashCode(val)),ObjectUtils.appendIdentityToString(new StringBuffer(),val).toString());}"
"org.apache.commons.lang.ObjectUtilsTest.testToString_Object",0,"public void testToString_Object(){assertEquals("""",ObjectUtils.toString((Object)null));assertEquals(Boolean.TRUE.toString(),ObjectUtils.toString(Boolean.TRUE));}"
"org.apache.commons.lang.ObjectUtilsTest.testToString_ObjectString",0,"public void testToString_ObjectString(){assertEquals(BAR,ObjectUtils.toString((Object)null,BAR));assertEquals(Boolean.TRUE.toString(),ObjectUtils.toString(Boolean.TRUE,BAR));}"
"org.apache.commons.lang.ObjectUtilsTest.testNull",0,"public void testNull(){assertTrue(ObjectUtils.NULL != null);assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);assertSame(ObjectUtils.NULL,SerializationUtils.clone(ObjectUtils.NULL));}"
