test_case,faulty,test_code
"org.jsoup.select.SelectorTest.testByTag",0,"@Test public void testByTag(){Elements els=Jsoup.parse(""<div id=1><div id=2><p>Hello</p></div></div><DIV id=3>"").select(""DIV"");assertEquals(3,els.size());assertEquals(""1"",els.get(0).id());assertEquals(""2"",els.get(1).id());assertEquals(""3"",els.get(2).id());Elements none=Jsoup.parse(""<div id=1><div id=2><p>Hello</p></div></div><div id=3>"").select(""span"");assertEquals(0,none.size());}"
"org.jsoup.select.SelectorTest.testById",0,"@Test public void testById(){Elements els=Jsoup.parse(""<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>"").select(""#foo"");assertEquals(2,els.size());assertEquals(""Hello"",els.get(0).text());assertEquals(""Foo two!"",els.get(1).text());Elements none=Jsoup.parse(""<div id=1></div>"").select(""#foo"");assertEquals(0,none.size());}"
"org.jsoup.select.SelectorTest.testByClass",0,"@Test public void testByClass(){Elements els=Jsoup.parse(""<p id=0 class='ONE two'><p id=1 class='one'><p id=2 class='two'>"").select(""P.One"");assertEquals(2,els.size());assertEquals(""0"",els.get(0).id());assertEquals(""1"",els.get(1).id());Elements none=Jsoup.parse(""<div class='one'></div>"").select("".foo"");assertEquals(0,none.size());Elements els2=Jsoup.parse(""<div class='One-Two'></div>"").select("".one-two"");assertEquals(1,els2.size());}"
"org.jsoup.select.SelectorTest.testByClassCaseInsensitive",0,"@Test public void testByClassCaseInsensitive(){String html=""<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four"";Elements elsFromClass=Jsoup.parse(html).select(""P.Foo"");Elements elsFromAttr=Jsoup.parse(html).select(""p[class=foo]"");assertEquals(elsFromAttr.size(),elsFromClass.size());assertEquals(3,elsFromClass.size());assertEquals(""Two"",elsFromClass.get(1).text());}"
"org.jsoup.select.SelectorTest.testByAttribute",0,"@Test @MultiLocaleTest public void testByAttribute(){String h=""<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Balim /><div title=SLIM />"" + ""<div data-name='with spaces'/>"";Document doc=Jsoup.parse(h);Elements withTitle=doc.select(""[title]"");assertEquals(4,withTitle.size());Elements foo=doc.select(""[TITLE=foo]"");assertEquals(1,foo.size());Elements foo2=doc.select(""[title=\""foo\""]"");assertEquals(1,foo2.size());Elements foo3=doc.select(""[title=\""Foo\""]"");assertEquals(1,foo3.size());Elements dataName=doc.select(""[data-name=\""with spaces\""]"");assertEquals(1,dataName.size());assertEquals(""with spaces"",dataName.first().attr(""data-name""));Elements not=doc.select(""div[title!=bar]"");assertEquals(5,not.size());assertEquals(""Foo"",not.first().attr(""title""));Elements starts=doc.select(""[title^=ba]"");assertEquals(2,starts.size());assertEquals(""Bar"",starts.first().attr(""title""));assertEquals(""Balim"",starts.last().attr(""title""));Elements ends=doc.select(""[title$=im]"");assertEquals(2,ends.size());assertEquals(""Balim"",ends.first().attr(""title""));assertEquals(""SLIM"",ends.last().attr(""title""));Elements contains=doc.select(""[title*=i]"");assertEquals(2,contains.size());assertEquals(""Balim"",contains.first().attr(""title""));assertEquals(""SLIM"",contains.last().attr(""title""));}"
"org.jsoup.select.SelectorTest.testNamespacedTag",0,"@Test public void testNamespacedTag(){Document doc=Jsoup.parse(""<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>"");Elements byTag=doc.select(""abc|def"");assertEquals(2,byTag.size());assertEquals(""1"",byTag.first().id());assertEquals(""2"",byTag.last().id());Elements byAttr=doc.select("".bold"");assertEquals(1,byAttr.size());assertEquals(""2"",byAttr.last().id());Elements byTagAttr=doc.select(""abc|def.bold"");assertEquals(1,byTagAttr.size());assertEquals(""2"",byTagAttr.last().id());Elements byContains=doc.select(""abc|def:contains(e)"");assertEquals(2,byContains.size());assertEquals(""1"",byContains.first().id());assertEquals(""2"",byContains.last().id());}"
"org.jsoup.select.SelectorTest.testWildcardNamespacedTag",0,"@Test public void testWildcardNamespacedTag(){Document doc=Jsoup.parse(""<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>"");Elements byTag=doc.select(""*|def"");assertEquals(2,byTag.size());assertEquals(""1"",byTag.first().id());assertEquals(""2"",byTag.last().id());Elements byAttr=doc.select("".bold"");assertEquals(1,byAttr.size());assertEquals(""2"",byAttr.last().id());Elements byTagAttr=doc.select(""*|def.bold"");assertEquals(1,byTagAttr.size());assertEquals(""2"",byTagAttr.last().id());Elements byContains=doc.select(""*|def:contains(e)"");assertEquals(2,byContains.size());assertEquals(""1"",byContains.first().id());assertEquals(""2"",byContains.last().id());}"
"org.jsoup.select.SelectorTest.testByAttributeStarting",0,"@Test @MultiLocaleTest public void testByAttributeStarting(){Document doc=Jsoup.parse(""<div id=1 ATTRIBUTE data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>"");Elements withData=doc.select(""[^data-]"");assertEquals(2,withData.size());assertEquals(""1"",withData.first().id());assertEquals(""2"",withData.last().id());withData=doc.select(""p[^data-]"");assertEquals(1,withData.size());assertEquals(""2"",withData.first().id());assertEquals(1,doc.select(""[^attrib]"").size());}"
"org.jsoup.select.SelectorTest.testByAttributeRegex",0,"@Test public void testByAttributeRegex(){Document doc=Jsoup.parse(""<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>"");Elements imgs=doc.select(""img[src~=(?i)\\.(png|jpe?g)]"");assertEquals(3,imgs.size());assertEquals(""1"",imgs.get(0).id());assertEquals(""2"",imgs.get(1).id());assertEquals(""3"",imgs.get(2).id());}"
"org.jsoup.select.SelectorTest.testByAttributeRegexCharacterClass",0,"@Test public void testByAttributeRegexCharacterClass(){Document doc=Jsoup.parse(""<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>"");Elements imgs=doc.select(""img[src~=[o]]"");assertEquals(2,imgs.size());assertEquals(""1"",imgs.get(0).id());assertEquals(""4"",imgs.get(1).id());}"
"org.jsoup.select.SelectorTest.testByAttributeRegexCombined",0,"@Test public void testByAttributeRegexCombined(){Document doc=Jsoup.parse(""<div><table class=x><td>Hello</td></table></div>"");Elements els=doc.select(""div table[class~=x|y]"");assertEquals(1,els.size());assertEquals(""Hello"",els.text());}"
"org.jsoup.select.SelectorTest.testCombinedWithContains",0,"@Test public void testCombinedWithContains(){Document doc=Jsoup.parse(""<p id=1>One</p><p>Two +</p><p>Three +</p>"");Elements els=doc.select(""p#1 + :contains(+)"");assertEquals(1,els.size());assertEquals(""Two +"",els.text());assertEquals(""p"",els.first().tagName());}"
"org.jsoup.select.SelectorTest.testAllElements",0,"@Test public void testAllElements(){String h=""<div><p>Hello</p><p><b>there</b></p></div>"";Document doc=Jsoup.parse(h);Elements allDoc=doc.select(""*"");Elements allUnderDiv=doc.select(""div *"");assertEquals(8,allDoc.size());assertEquals(3,allUnderDiv.size());assertEquals(""p"",allUnderDiv.first().tagName());}"
"org.jsoup.select.SelectorTest.testAllWithClass",0,"@Test public void testAllWithClass(){String h=""<p class=first>One<p class=first>Two<p>Three"";Document doc=Jsoup.parse(h);Elements ps=doc.select(""*.first"");assertEquals(2,ps.size());}"
"org.jsoup.select.SelectorTest.testGroupOr",0,"@Test public void testGroupOr(){String h=""<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>"";Document doc=Jsoup.parse(h);Elements els=doc.select(""p,div,[title]"");assertEquals(5,els.size());assertEquals(""div"",els.get(0).tagName());assertEquals(""foo"",els.get(0).attr(""title""));assertEquals(""div"",els.get(1).tagName());assertEquals(""bar"",els.get(1).attr(""title""));assertEquals(""div"",els.get(2).tagName());assertTrue(els.get(2).attr(""title"").length()== 0);assertFalse(els.get(2).hasAttr(""title""));assertEquals(""p"",els.get(3).tagName());assertEquals(""span"",els.get(4).tagName());}"
"org.jsoup.select.SelectorTest.testGroupOrAttribute",0,"@Test public void testGroupOrAttribute(){String h=""<div id=1 /><div id=2 /><div title=foo /><div title=bar />"";Elements els=Jsoup.parse(h).select(""[id],[title=foo]"");assertEquals(3,els.size());assertEquals(""1"",els.get(0).id());assertEquals(""2"",els.get(1).id());assertEquals(""foo"",els.get(2).attr(""title""));}"
"org.jsoup.select.SelectorTest.descendant",0,"@Test public void descendant(){String h=""<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>"";Document doc=Jsoup.parse(h);Element root=doc.getElementsByClass(""HEAD"").first();Elements els=root.select("".head p"");assertEquals(2,els.size());assertEquals(""Hello"",els.get(0).text());assertEquals(""There"",els.get(1).text());Elements p=root.select(""p.first"");assertEquals(1,p.size());assertEquals(""Hello"",p.get(0).text());Elements empty=root.select(""p .first"");assertEquals(0,empty.size());Elements aboveRoot=root.select(""body div.head"");assertEquals(0,aboveRoot.size());}"
"org.jsoup.select.SelectorTest.and",0,"@Test public void and(){String h=""<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"";Document doc=Jsoup.parse(h);Elements div=doc.select(""div.foo"");assertEquals(1,div.size());assertEquals(""div"",div.first().tagName());Elements p=doc.select(""div .foo"");assertEquals(1,p.size());assertEquals(""p"",p.first().tagName());Elements div2=doc.select(""div#1.foo.bar[title=bar][name=qux]"");assertEquals(1,div2.size());assertEquals(""div"",div2.first().tagName());Elements p2=doc.select(""div *.foo"");assertEquals(1,p2.size());assertEquals(""p"",p2.first().tagName());}"
"org.jsoup.select.SelectorTest.deeperDescendant",0,"@Test public void deeperDescendant(){String h=""<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>"";Document doc=Jsoup.parse(h);Element root=doc.getElementsByClass(""head"").first();Elements els=root.select(""div p .first"");assertEquals(1,els.size());assertEquals(""Hello"",els.first().text());assertEquals(""span"",els.first().tagName());Elements aboveRoot=root.select(""body p .first"");assertEquals(0,aboveRoot.size());}"
"org.jsoup.select.SelectorTest.parentChildElement",0,"@Test public void parentChildElement(){String h=""<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>"";Document doc=Jsoup.parse(h);Elements divs=doc.select(""div > div"");assertEquals(2,divs.size());assertEquals(""2"",divs.get(0).id());assertEquals(""3"",divs.get(1).id());Elements div2=doc.select(""div#1 > div"");assertEquals(1,div2.size());assertEquals(""2"",div2.get(0).id());}"
"org.jsoup.select.SelectorTest.parentWithClassChild",0,"@Test public void parentWithClassChild(){String h=""<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>"";Document doc=Jsoup.parse(h);Elements allAs=doc.select(""h1 > a"");assertEquals(3,allAs.size());assertEquals(""a"",allAs.first().tagName());Elements fooAs=doc.select(""h1.foo > a"");assertEquals(2,fooAs.size());assertEquals(""a"",fooAs.first().tagName());Elements barAs=doc.select(""h1.foo > a.bar"");assertEquals(1,barAs.size());}"
"org.jsoup.select.SelectorTest.parentChildStar",0,"@Test public void parentChildStar(){String h=""<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"";Document doc=Jsoup.parse(h);Elements divChilds=doc.select(""div > *"");assertEquals(3,divChilds.size());assertEquals(""p"",divChilds.get(0).tagName());assertEquals(""p"",divChilds.get(1).tagName());assertEquals(""span"",divChilds.get(2).tagName());}"
"org.jsoup.select.SelectorTest.multiChildDescent",0,"@Test public void multiChildDescent(){String h=""<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>"";Document doc=Jsoup.parse(h);Elements els=doc.select(""div#foo > h1.bar > a[href*=example]"");assertEquals(1,els.size());assertEquals(""a"",els.first().tagName());}"
"org.jsoup.select.SelectorTest.caseInsensitive",0,"@Test public void caseInsensitive(){String h=""<dIv tItle=bAr><div>"";Document doc=Jsoup.parse(h);assertEquals(2,doc.select(""DiV"").size());assertEquals(1,doc.select(""DiV[TiTLE]"").size());assertEquals(1,doc.select(""DiV[TiTLE=BAR]"").size());assertEquals(0,doc.select(""DiV[TiTLE=BARBARELLA]"").size());}"
"org.jsoup.select.SelectorTest.adjacentSiblings",0,"@Test public void adjacentSiblings(){String h=""<ol><li>One<li>Two<li>Three</ol>"";Document doc=Jsoup.parse(h);Elements sibs=doc.select(""li + li"");assertEquals(2,sibs.size());assertEquals(""Two"",sibs.get(0).text());assertEquals(""Three"",sibs.get(1).text());}"
"org.jsoup.select.SelectorTest.adjacentSiblingsWithId",0,"@Test public void adjacentSiblingsWithId(){String h=""<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"";Document doc=Jsoup.parse(h);Elements sibs=doc.select(""li#1 + li#2"");assertEquals(1,sibs.size());assertEquals(""Two"",sibs.get(0).text());}"
"org.jsoup.select.SelectorTest.notAdjacent",0,"@Test public void notAdjacent(){String h=""<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"";Document doc=Jsoup.parse(h);Elements sibs=doc.select(""li#1 + li#3"");assertEquals(0,sibs.size());}"
"org.jsoup.select.SelectorTest.mixCombinator",0,"@Test public void mixCombinator(){String h=""<div class=foo><ol><li>One<li>Two<li>Three</ol></div>"";Document doc=Jsoup.parse(h);Elements sibs=doc.select(""body > div.foo li + li"");assertEquals(2,sibs.size());assertEquals(""Two"",sibs.get(0).text());assertEquals(""Three"",sibs.get(1).text());}"
"org.jsoup.select.SelectorTest.mixCombinatorGroup",0,"@Test public void mixCombinatorGroup(){String h=""<div class=foo><ol><li>One<li>Two<li>Three</ol></div>"";Document doc=Jsoup.parse(h);Elements els=doc.select("".foo > ol,ol > li + li"");assertEquals(3,els.size());assertEquals(""ol"",els.get(0).tagName());assertEquals(""Two"",els.get(1).text());assertEquals(""Three"",els.get(2).text());}"
"org.jsoup.select.SelectorTest.generalSiblings",0,"@Test public void generalSiblings(){String h=""<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>"";Document doc=Jsoup.parse(h);Elements els=doc.select(""#1 ~ #3"");assertEquals(1,els.size());assertEquals(""Three"",els.first().text());}"
"org.jsoup.select.SelectorTest.testCharactersInIdAndClass",0,"@Test public void testCharactersInIdAndClass(){String h=""<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>"";Document doc=Jsoup.parse(h);Element el1=doc.getElementById(""a1-foo_bar"");assertEquals(""One"",el1.text());Element el2=doc.getElementsByClass(""b2-qux_bif"").first();assertEquals(""Two"",el2.text());Element el3=doc.select(""#a1-foo_bar"").first();assertEquals(""One"",el3.text());Element el4=doc.select("".b2-qux_bif"").first();assertEquals(""Two"",el4.text());}"
"org.jsoup.select.SelectorTest.testSupportsLeadingCombinator",0,"@Test public void testSupportsLeadingCombinator(){String h=""<div><p><span>One</span><span>Two</span></p></div>"";Document doc=Jsoup.parse(h);Element p=doc.select(""div > p"").first();Elements spans=p.select(""> span"");assertEquals(2,spans.size());assertEquals(""One"",spans.first().text());h=""<div id=1><div id=2><div id=3></div></div></div>"";doc=Jsoup.parse(h);Element div=doc.select(""div"").select("" > div"").first();assertEquals(""2"",div.id());}"
"org.jsoup.select.SelectorTest.testPseudoLessThan",0,"@Test public void testPseudoLessThan(){Document doc=Jsoup.parse(""<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"");Elements ps=doc.select(""div p:lt(2)"");assertEquals(3,ps.size());assertEquals(""One"",ps.get(0).text());assertEquals(""Two"",ps.get(1).text());assertEquals(""Four"",ps.get(2).text());}"
"org.jsoup.select.SelectorTest.testPseudoGreaterThan",0,"@Test public void testPseudoGreaterThan(){Document doc=Jsoup.parse(""<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"");Elements ps=doc.select(""div p:gt(0)"");assertEquals(2,ps.size());assertEquals(""Two"",ps.get(0).text());assertEquals(""Three"",ps.get(1).text());}"
"org.jsoup.select.SelectorTest.testPseudoEquals",0,"@Test public void testPseudoEquals(){Document doc=Jsoup.parse(""<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"");Elements ps=doc.select(""div p:eq(0)"");assertEquals(2,ps.size());assertEquals(""One"",ps.get(0).text());assertEquals(""Four"",ps.get(1).text());Elements ps2=doc.select(""div:eq(0)p:eq(0)"");assertEquals(1,ps2.size());assertEquals(""One"",ps2.get(0).text());assertEquals(""p"",ps2.get(0).tagName());}"
"org.jsoup.select.SelectorTest.testPseudoBetween",0,"@Test public void testPseudoBetween(){Document doc=Jsoup.parse(""<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"");Elements ps=doc.select(""div p:gt(0):lt(2)"");assertEquals(1,ps.size());assertEquals(""Two"",ps.get(0).text());}"
"org.jsoup.select.SelectorTest.testPseudoCombined",0,"@Test public void testPseudoCombined(){Document doc=Jsoup.parse(""<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>"");Elements ps=doc.select(""div.foo p:gt(0)"");assertEquals(1,ps.size());assertEquals(""Two"",ps.get(0).text());}"
"org.jsoup.select.SelectorTest.testPseudoHas",0,"@Test public void testPseudoHas(){Document doc=Jsoup.parse(""<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>"");Elements divs1=doc.select(""div:has(span)"");assertEquals(2,divs1.size());assertEquals(""0"",divs1.get(0).id());assertEquals(""1"",divs1.get(1).id());Elements divs2=doc.select(""div:has([class])"");assertEquals(1,divs2.size());assertEquals(""1"",divs2.get(0).id());Elements divs3=doc.select(""div:has(span,p)"");assertEquals(3,divs3.size());assertEquals(""0"",divs3.get(0).id());assertEquals(""1"",divs3.get(1).id());assertEquals(""2"",divs3.get(2).id());Elements els1=doc.body().select("":has(p)"");assertEquals(3,els1.size());assertEquals(""body"",els1.first().tagName());assertEquals(""0"",els1.get(1).id());assertEquals(""2"",els1.get(2).id());}"
"org.jsoup.select.SelectorTest.testNestedHas",0,"@Test public void testNestedHas(){Document doc=Jsoup.parse(""<div><p><span>One</span></p></div> <div><p>Two</p></div>"");Elements divs=doc.select(""div:has(p:has(span))"");assertEquals(1,divs.size());assertEquals(""One"",divs.first().text());divs=doc.select(""div:has(p:matches((?i)two))"");assertEquals(1,divs.size());assertEquals(""div"",divs.first().tagName());assertEquals(""Two"",divs.first().text());divs=doc.select(""div:has(p:contains(two))"");assertEquals(1,divs.size());assertEquals(""div"",divs.first().tagName());assertEquals(""Two"",divs.first().text());}"
"org.jsoup.select.SelectorTest.testPseudoContains",0,"@Test @MultiLocaleTest public void testPseudoContains(){Document doc=Jsoup.parse(""<div><p>The Rain.</p> <p class=light>The <i>RAIN</i>.</p> <p>Rain,the.</p></div>"");Elements ps1=doc.select(""p:contains(Rain)"");assertEquals(3,ps1.size());Elements ps2=doc.select(""p:contains(the rain)"");assertEquals(2,ps2.size());assertEquals(""The Rain."",ps2.first().html());assertEquals(""The <i>RAIN</i>."",ps2.last().html());Elements ps3=doc.select(""p:contains(the Rain):has(i)"");assertEquals(1,ps3.size());assertEquals(""light"",ps3.first().className());Elements ps4=doc.select("".light:contains(rain)"");assertEquals(1,ps4.size());assertEquals(""light"",ps3.first().className());Elements ps5=doc.select("":contains(rain)"");assertEquals(8,ps5.size());Elements ps6=doc.select("":contains(RAIN)"");assertEquals(8,ps6.size());}"
"org.jsoup.select.SelectorTest.testPsuedoContainsWithParentheses",0,"@Test public void testPsuedoContainsWithParentheses(){Document doc=Jsoup.parse(""<div><p id=1>This (is good)</p><p id=2>This is bad)</p>"");Elements ps1=doc.select(""p:contains(this (is good))"");assertEquals(1,ps1.size());assertEquals(""1"",ps1.first().id());Elements ps2=doc.select(""p:contains(this is bad\\))"");assertEquals(1,ps2.size());assertEquals(""2"",ps2.first().id());}"
"org.jsoup.select.SelectorTest.containsOwn",0,"@Test @MultiLocaleTest public void containsOwn(){Document doc=Jsoup.parse(""<p id=1>Hello <b>there</b> igor</p>"");Elements ps=doc.select(""p:containsOwn(Hello IGOR)"");assertEquals(1,ps.size());assertEquals(""1"",ps.first().id());assertEquals(0,doc.select(""p:containsOwn(there)"").size());Document doc2=Jsoup.parse(""<p>Hello <b>there</b> IGOR</p>"");assertEquals(1,doc2.select(""p:containsOwn(igor)"").size());}"
"org.jsoup.select.SelectorTest.testMatches",0,"@Test public void testMatches(){Document doc=Jsoup.parse(""<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>"");Elements p1=doc.select(""p:matches(The rain)"");assertEquals(0,p1.size());Elements p2=doc.select(""p:matches((?i)the rain)"");assertEquals(1,p2.size());assertEquals(""1"",p2.first().id());Elements p4=doc.select(""p:matches((?i)^rain$)"");assertEquals(1,p4.size());assertEquals(""4"",p4.first().id());Elements p5=doc.select(""p:matches(\\d+)"");assertEquals(1,p5.size());assertEquals(""2"",p5.first().id());Elements p6=doc.select(""p:matches(\\w+\\s+\\(\\w+\\))"");assertEquals(1,p6.size());assertEquals(""3"",p6.first().id());Elements p7=doc.select(""p:matches((?i)the):has(i)"");assertEquals(1,p7.size());assertEquals(""1"",p7.first().id());}"
"org.jsoup.select.SelectorTest.matchesOwn",0,"@Test public void matchesOwn(){Document doc=Jsoup.parse(""<p id=1>Hello <b>there</b> now</p>"");Elements p1=doc.select(""p:matchesOwn((?i)hello now)"");assertEquals(1,p1.size());assertEquals(""1"",p1.first().id());assertEquals(0,doc.select(""p:matchesOwn(there)"").size());}"
"org.jsoup.select.SelectorTest.testRelaxedTags",0,"@Test public void testRelaxedTags(){Document doc=Jsoup.parse(""<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>"");Elements el1=doc.select(""abc_def"");assertEquals(1,el1.size());assertEquals(""1"",el1.first().id());Elements el2=doc.select(""abc-def"");assertEquals(1,el2.size());assertEquals(""2"",el2.first().id());}"
"org.jsoup.select.SelectorTest.notParas",0,"@Test public void notParas(){Document doc=Jsoup.parse(""<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>"");Elements el1=doc.select(""p:not([id=1])"");assertEquals(2,el1.size());assertEquals(""Two"",el1.first().text());assertEquals(""Three"",el1.last().text());Elements el2=doc.select(""p:not(:has(span))"");assertEquals(2,el2.size());assertEquals(""One"",el2.first().text());assertEquals(""Two"",el2.last().text());}"
"org.jsoup.select.SelectorTest.notAll",0,"@Test public void notAll(){Document doc=Jsoup.parse(""<p>Two</p> <p><span>Three</span></p>"");Elements el1=doc.body().select("":not(p)"");assertEquals(2,el1.size());assertEquals(""body"",el1.first().tagName());assertEquals(""span"",el1.last().tagName());}"
"org.jsoup.select.SelectorTest.notClass",0,"@Test public void notClass(){Document doc=Jsoup.parse(""<div class=left>One</div><div class=right id=1><p>Two</p></div>"");Elements el1=doc.select(""div:not(.left)"");assertEquals(1,el1.size());assertEquals(""1"",el1.first().id());}"
"org.jsoup.select.SelectorTest.handlesCommasInSelector",0,"@Test public void handlesCommasInSelector(){Document doc=Jsoup.parse(""<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>"");Elements ps=doc.select(""[name=1,2]"");assertEquals(1,ps.size());Elements containers=doc.select(""div,li:matches([0-9,]+)"");assertEquals(2,containers.size());assertEquals(""div"",containers.get(0).tagName());assertEquals(""li"",containers.get(1).tagName());assertEquals(""123"",containers.get(1).text());}"
"org.jsoup.select.SelectorTest.selectSupplementaryCharacter",0,"@Test public void selectSupplementaryCharacter(){String s=new String(Character.toChars(135361));Document doc=Jsoup.parse(""<div k"" + s + ""='""+ s+ ""'>^""+ s+ ""$/div>"");assertEquals(""div"",doc.select(""div[k"" + s + ""]"").first().tagName());assertEquals(""div"",doc.select(""div:containsOwn("" + s + "")"").first().tagName());}"
"org.jsoup.select.SelectorTest.selectClassWithSpace",0,"@Test public void selectClassWithSpace(){final String html=""<div class=\""value\"">class without space</div>\n"" + ""<div class=\""value \"">class with space</div>"";Document doc=Jsoup.parse(html);Elements found=doc.select(""div[class=value ]"");assertEquals(2,found.size());assertEquals(""class without space"",found.get(0).text());assertEquals(""class with space"",found.get(1).text());found=doc.select(""div[class=\""value \""]"");assertEquals(2,found.size());assertEquals(""class without space"",found.get(0).text());assertEquals(""class with space"",found.get(1).text());found=doc.select(""div[class=\""value\\ \""]"");assertEquals(0,found.size());}"
"org.jsoup.select.SelectorTest.selectSameElements",0,"@Test public void selectSameElements(){final String html=""<div>one</div><div>one</div>"";Document doc=Jsoup.parse(html);Elements els=doc.select(""div"");assertEquals(2,els.size());Elements subSelect=els.select("":contains(one)"");assertEquals(2,subSelect.size());}"
"org.jsoup.select.SelectorTest.attributeWithBrackets",0,"@Test public void attributeWithBrackets(){String html=""<div data='End]'>One</div> <div data='[Another)]]'>Two</div>"";Document doc=Jsoup.parse(html);assertEquals(""One"",doc.select(""div[data='End]']"").first().text());assertEquals(""Two"",doc.select(""div[data='[Another)]]']"").first().text());assertEquals(""One"",doc.select(""div[data=\""End]\""]"").first().text());assertEquals(""Two"",doc.select(""div[data=\""[Another)]]\""]"").first().text());}"
"org.jsoup.select.SelectorTest.containsData",0,"@Test @MultiLocaleTest public void containsData(){String html=""<p>function</p><script>FUNCTION</script><style>item</style><span><!-- comments --></span>"";Document doc=Jsoup.parse(html);Element body=doc.body();Elements dataEls1=body.select("":containsData(function)"");Elements dataEls2=body.select(""script:containsData(function)"");Elements dataEls3=body.select(""span:containsData(comments)"");Elements dataEls4=body.select("":containsData(o)"");Elements dataEls5=body.select(""style:containsData(ITEM)"");assertEquals(2,dataEls1.size());assertEquals(1,dataEls2.size());assertEquals(dataEls1.last(),dataEls2.first());assertEquals(""<script>FUNCTION</script>"",dataEls2.outerHtml());assertEquals(1,dataEls3.size());assertEquals(""span"",dataEls3.first().tagName());assertEquals(3,dataEls4.size());assertEquals(""body"",dataEls4.first().tagName());assertEquals(""script"",dataEls4.get(1).tagName());assertEquals(""span"",dataEls4.get(2).tagName());assertEquals(1,dataEls5.size());}"
"org.jsoup.select.SelectorTest.containsWithQuote",0,"@Test public void containsWithQuote(){String html=""<p>One'One</p><p>One'Two</p>"";Document doc=Jsoup.parse(html);Elements els=doc.select(""p:contains(One\\'One)"");assertEquals(1,els.size());assertEquals(""One'One"",els.text());}"
"org.jsoup.select.SelectorTest.selectFirst",0,"@Test public void selectFirst(){String html=""<p>One<p>Two<p>Three"";Document doc=Jsoup.parse(html);assertEquals(""One"",doc.selectFirst(""p"").text());}"
"org.jsoup.select.SelectorTest.selectFirstWithAnd",0,"@Test public void selectFirstWithAnd(){String html=""<p>One<p class=foo>Two<p>Three"";Document doc=Jsoup.parse(html);assertEquals(""Two"",doc.selectFirst(""p.foo"").text());}"
"org.jsoup.select.SelectorTest.selectFirstWithOr",0,"@Test public void selectFirstWithOr(){String html=""<p>One<p>Two<p>Three<div>Four"";Document doc=Jsoup.parse(html);assertEquals(""One"",doc.selectFirst(""p,div"").text());}"
"org.jsoup.nodes.NodeTest.handlesBaseUri",0,"@Test public void handlesBaseUri(){Tag tag=Tag.valueOf(""a"");Attributes attribs=new Attributes();attribs.put(""relHref"",""/foo"");attribs.put(""absHref"",""http://bar/qux"");Element noBase=new Element(tag,"""",attribs);assertEquals("""",noBase.absUrl(""relHref""));assertEquals(""http://bar/qux"",noBase.absUrl(""absHref""));Element withBase=new Element(tag,""http://foo/"",attribs);assertEquals(""http://foo/foo"",withBase.absUrl(""relHref""));assertEquals(""http://bar/qux"",withBase.absUrl(""absHref""));assertEquals("""",withBase.absUrl(""noval""));Element dodgyBase=new Element(tag,""wtf://no-such-protocol/"",attribs);assertEquals(""http://bar/qux"",dodgyBase.absUrl(""absHref""));assertEquals("""",dodgyBase.absUrl(""relHref""));}"
"org.jsoup.nodes.NodeTest.setBaseUriIsRecursive",0,"@Test public void setBaseUriIsRecursive(){Document doc=Jsoup.parse(""<div><p></p></div>"");String baseUri=""https://jsoup.org"";doc.setBaseUri(baseUri);assertEquals(baseUri,doc.baseUri());assertEquals(baseUri,doc.select(""div"").first().baseUri());assertEquals(baseUri,doc.select(""p"").first().baseUri());}"
"org.jsoup.nodes.NodeTest.handlesAbsPrefix",0,"@Test public void handlesAbsPrefix(){Document doc=Jsoup.parse(""<a href=/foo>Hello</a>"",""https://jsoup.org/"");Element a=doc.select(""a"").first();assertEquals(""/foo"",a.attr(""href""));assertEquals(""https://jsoup.org/foo"",a.attr(""abs:href""));assertTrue(a.hasAttr(""abs:href""));}"
"org.jsoup.nodes.NodeTest.handlesAbsOnImage",0,"@Test public void handlesAbsOnImage(){Document doc=Jsoup.parse(""<p><img src=\""/rez/osi_logo.png\"" /></p>"",""https://jsoup.org/"");Element img=doc.select(""img"").first();assertEquals(""https://jsoup.org/rez/osi_logo.png"",img.attr(""abs:src""));assertEquals(img.absUrl(""src""),img.attr(""abs:src""));}"
"org.jsoup.nodes.NodeTest.handlesAbsPrefixOnHasAttr",0,"@Test public void handlesAbsPrefixOnHasAttr(){Document doc=Jsoup.parse(""<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org/'>Two</a>"");Element one=doc.select(""#1"").first();Element two=doc.select(""#2"").first();assertFalse(one.hasAttr(""abs:href""));assertTrue(one.hasAttr(""href""));assertEquals("""",one.absUrl(""href""));assertTrue(two.hasAttr(""abs:href""));assertTrue(two.hasAttr(""href""));assertEquals(""https://jsoup.org/"",two.absUrl(""href""));}"
"org.jsoup.nodes.NodeTest.literalAbsPrefix",0,"@Test public void literalAbsPrefix(){Document doc=Jsoup.parse(""<a abs:href='odd'>One</a>"");Element el=doc.select(""a"").first();assertTrue(el.hasAttr(""abs:href""));assertEquals(""odd"",el.attr(""abs:href""));}"
"org.jsoup.nodes.NodeTest.handleAbsOnFileUris",0,"@Test public void handleAbsOnFileUris(){Document doc=Jsoup.parse(""<a href='password'>One/a><a href='/var/log/messages'>Two</a>"",""file:/etc/"");Element one=doc.select(""a"").first();assertEquals(""file:/etc/password"",one.absUrl(""href""));Element two=doc.select(""a"").get(1);assertEquals(""file:/var/log/messages"",two.absUrl(""href""));}"
"org.jsoup.nodes.NodeTest.handleAbsOnLocalhostFileUris",0,"@Test public void handleAbsOnLocalhostFileUris(){Document doc=Jsoup.parse(""<a href='password'>One/a><a href='/var/log/messages'>Two</a>"",""file://localhost/etc/"");Element one=doc.select(""a"").first();assertEquals(""file://localhost/etc/password"",one.absUrl(""href""));}"
"org.jsoup.nodes.NodeTest.handlesAbsOnProtocolessAbsoluteUris",0,"@Test public void handlesAbsOnProtocolessAbsoluteUris(){Document doc1=Jsoup.parse(""<a href='//example.net/foo'>One</a>"",""http://example.com/"");Document doc2=Jsoup.parse(""<a href='//example.net/foo'>One</a>"",""https://example.com/"");Element one=doc1.select(""a"").first();Element two=doc2.select(""a"").first();assertEquals(""http://example.net/foo"",one.absUrl(""href""));assertEquals(""https://example.net/foo"",two.absUrl(""href""));Document doc3=Jsoup.parse(""<img src=//www.google.com/images/errors/logo_sm.gif alt=Google>"",""https://google.com"");assertEquals(""https://www.google.com/images/errors/logo_sm.gif"",doc3.select(""img"").attr(""abs:src""));}"
"org.jsoup.nodes.NodeTest.absHandlesRelativeQuery",0,"@Test public void absHandlesRelativeQuery(){Document doc=Jsoup.parse(""<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>"",""https://jsoup.org/path/file?bar"");Element a1=doc.select(""a"").first();assertEquals(""https://jsoup.org/path/file?foo"",a1.absUrl(""href""));Element a2=doc.select(""a"").get(1);assertEquals(""https://jsoup.org/path/bar.html?foo"",a2.absUrl(""href""));}"
"org.jsoup.nodes.NodeTest.absHandlesDotFromIndex",0,"@Test public void absHandlesDotFromIndex(){Document doc=Jsoup.parse(""<a href='./one/two.html'>One</a>"",""http://example.com"");Element a1=doc.select(""a"").first();assertEquals(""http://example.com/one/two.html"",a1.absUrl(""href""));}"
"org.jsoup.nodes.NodeTest.testRemove",0,"@Test public void testRemove(){Document doc=Jsoup.parse(""<p>One <span>two</span> three</p>"");Element p=doc.select(""p"").first();p.childNode(0).remove();assertEquals(""two three"",p.text());assertEquals(""<span>two</span> three"",TextUtil.stripNewlines(p.html()));}"
"org.jsoup.nodes.NodeTest.testReplace",0,"@Test public void testReplace(){Document doc=Jsoup.parse(""<p>One <span>two</span> three</p>"");Element p=doc.select(""p"").first();Element insert=doc.createElement(""em"").text(""foo"");p.childNode(1).replaceWith(insert);assertEquals(""One <em>foo</em> three"",p.html());}"
"org.jsoup.nodes.NodeTest.ownerDocument",0,"@Test public void ownerDocument(){Document doc=Jsoup.parse(""<p>Hello"");Element p=doc.select(""p"").first();assertTrue(p.ownerDocument()== doc);assertTrue(doc.ownerDocument()== doc);assertNull(doc.parent());}"
"org.jsoup.nodes.NodeTest.root",0,"@Test public void root(){Document doc=Jsoup.parse(""<div><p>Hello"");Element p=doc.select(""p"").first();Node root=p.root();assertTrue(doc == root);assertNull(root.parent());assertTrue(doc.root()== doc);assertTrue(doc.root()== doc.ownerDocument());Element standAlone=new Element(Tag.valueOf(""p""),"""");assertTrue(standAlone.parent()== null);assertTrue(standAlone.root()== standAlone);assertTrue(standAlone.ownerDocument()== null);}"
"org.jsoup.nodes.NodeTest.before",0,"@Test public void before(){Document doc=Jsoup.parse(""<p>One <b>two</b> three</p>"");Element newNode=new Element(Tag.valueOf(""em""),"""");newNode.appendText(""four"");doc.select(""b"").first().before(newNode);assertEquals(""<p>One <em>four</em><b>two</b> three</p>"",doc.body().html());doc.select(""b"").first().before(""<i>five</i>"");assertEquals(""<p>One <em>four</em><i>five</i><b>two</b> three</p>"",doc.body().html());}"
"org.jsoup.nodes.NodeTest.after",0,"@Test public void after(){Document doc=Jsoup.parse(""<p>One <b>two</b> three</p>"");Element newNode=new Element(Tag.valueOf(""em""),"""");newNode.appendText(""four"");doc.select(""b"").first().after(newNode);assertEquals(""<p>One <b>two</b><em>four</em> three</p>"",doc.body().html());doc.select(""b"").first().after(""<i>five</i>"");assertEquals(""<p>One <b>two</b><i>five</i><em>four</em> three</p>"",doc.body().html());}"
"org.jsoup.nodes.NodeTest.unwrap",0,"@Test public void unwrap(){Document doc=Jsoup.parse(""<div>One <span>Two <b>Three</b></span> Four</div>"");Element span=doc.select(""span"").first();Node twoText=span.childNode(0);Node node=span.unwrap();assertEquals(""<div>One Two <b>Three</b> Four</div>"",TextUtil.stripNewlines(doc.body().html()));assertTrue(node instanceof TextNode);assertEquals(""Two "",((TextNode)node).text());assertEquals(node,twoText);assertEquals(node.parent(),doc.select(""div"").first());}"
"org.jsoup.nodes.NodeTest.unwrapNoChildren",0,"@Test public void unwrapNoChildren(){Document doc=Jsoup.parse(""<div>One <span></span> Two</div>"");Element span=doc.select(""span"").first();Node node=span.unwrap();assertEquals(""<div>One  Two</div>"",TextUtil.stripNewlines(doc.body().html()));assertTrue(node == null);}"
"org.jsoup.nodes.NodeTest.traverse",0,"@Test public void traverse(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There</div>"");final StringBuilder accum=new StringBuilder();doc.select(""div"").first().traverse(new NodeVisitor(){public void head(Node node,int depth){accum.append(""<"" + node.nodeName()+ "">"");}public void tail(Node node,int depth){accum.append(""</"" + node.nodeName()+ "">"");}});assertEquals(""<div><p><#text></#text></p></div>"",accum.toString());}"
"org.jsoup.nodes.NodeTest.orphanNodeReturnsNullForSiblingElements",0,"@Test public void orphanNodeReturnsNullForSiblingElements(){Node node=new Element(Tag.valueOf(""p""),"""");Element el=new Element(Tag.valueOf(""p""),"""");assertEquals(0,node.siblingIndex());assertEquals(0,node.siblingNodes().size());assertNull(node.previousSibling());assertNull(node.nextSibling());assertEquals(0,el.siblingElements().size());assertNull(el.previousElementSibling());assertNull(el.nextElementSibling());}"
"org.jsoup.nodes.NodeTest.nodeIsNotASiblingOfItself",0,"@Test public void nodeIsNotASiblingOfItself(){Document doc=Jsoup.parse(""<div><p>One<p>Two<p>Three</div>"");Element p2=doc.select(""p"").get(1);assertEquals(""Two"",p2.text());List<Node> nodes=p2.siblingNodes();assertEquals(2,nodes.size());assertEquals(""<p>One</p>"",nodes.get(0).outerHtml());assertEquals(""<p>Three</p>"",nodes.get(1).outerHtml());}"
"org.jsoup.nodes.NodeTest.childNodesCopy",0,"@Test public void childNodesCopy(){Document doc=Jsoup.parse(""<div id=1>Text 1 <p>One</p> Text 2 <p>Two<p>Three</div><div id=2>"");Element div1=doc.select(""#1"").first();Element div2=doc.select(""#2"").first();List<Node> divChildren=div1.childNodesCopy();assertEquals(5,divChildren.size());TextNode tn1=(TextNode)div1.childNode(0);TextNode tn2=(TextNode)divChildren.get(0);tn2.text(""Text 1 updated"");assertEquals(""Text 1 "",tn1.text());div2.insertChildren(-1,divChildren);assertEquals(""<div id=\""1\"">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\""2\"">Text 1 updated"" + ""<p>One</p> Text 2 <p>Two</p><p>Three</p></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.NodeTest.supportsClone",0,"@Test public void supportsClone(){Document doc=org.jsoup.Jsoup.parse(""<div class=foo>Text</div>"");Element el=doc.select(""div"").first();assertTrue(el.hasClass(""foo""));Element elClone=doc.clone().select(""div"").first();assertTrue(elClone.hasClass(""foo""));assertTrue(elClone.text().equals(""Text""));el.removeClass(""foo"");el.text(""None"");assertFalse(el.hasClass(""foo""));assertTrue(elClone.hasClass(""foo""));assertTrue(el.text().equals(""None""));assertTrue(elClone.text().equals(""Text""));}"
"org.jsoup.nodes.NodeTest.changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive",0,"@Test public void changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive(){Document document=Jsoup.parse(""<INPUT id=\""foo\"" NAME=\""foo\"" VALUE=\""\"">"");Element inputElement=document.select(""#foo"").first();inputElement.attr(""value"",""bar"");assertEquals(singletonAttributes(""value"",""bar""),getAttributesCaseInsensitive(inputElement,""value""));}"
"org.jsoup.parser.TokeniserTest.bufferUpInAttributeVal",0,"@Test public void bufferUpInAttributeVal(){String[]quotes={""\"""",""'"",""""};for(String quote : quotes){String preamble=""<img src="" + quote;String tail=""bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"";StringBuilder sb=new StringBuilder(preamble);final int charsToFillBuffer=maxBufferLen - preamble.length();for (int i=0;i < charsToFillBuffer;i++){sb.append('a');}sb.append('X');sb.append(tail + quote + "">\n"");String html=sb.toString();Document doc=Jsoup.parse(html);String src=doc.select(""img"").attr(""src"");assertTrue(""Handles for quote "" + quote,src.contains(""X""));assertTrue(src.contains(tail));}}"
"org.jsoup.parser.TokeniserTest.handleSuperLargeTagNames",0,"@Test public void handleSuperLargeTagNames(){StringBuilder sb=new StringBuilder(maxBufferLen);do {sb.append(""LargeTagName"");}while (sb.length()< maxBufferLen);String tag=sb.toString();String html=""<"" + tag + "">One</""+ tag+ "">"";Document doc=Parser.htmlParser().settings(ParseSettings.preserveCase).parseInput(html,"""");Elements els=doc.select(tag);assertEquals(1,els.size());Element el=els.first();assertNotNull(el);assertEquals(""One"",el.text());assertEquals(tag,el.tagName());}"
"org.jsoup.parser.TokeniserTest.handleSuperLargeAttributeName",0,"@Test public void handleSuperLargeAttributeName(){StringBuilder sb=new StringBuilder(maxBufferLen);do {sb.append(""LargAttributeName"");}while (sb.length()< maxBufferLen);String attrName=sb.toString();String html=""<p "" + attrName + ""=foo>One</p>"";Document doc=Jsoup.parse(html);Elements els=doc.getElementsByAttribute(attrName);assertEquals(1,els.size());Element el=els.first();assertNotNull(el);assertEquals(""One"",el.text());Attribute attribute=el.attributes().asList().get(0);assertEquals(attrName.toLowerCase(),attribute.getKey());assertEquals(""foo"",attribute.getValue());}"
"org.jsoup.parser.TokeniserTest.handleLargeText",0,"@Test public void handleLargeText(){StringBuilder sb=new StringBuilder(maxBufferLen);do {sb.append(""A Large Amount of Text"");}while (sb.length()< maxBufferLen);String text=sb.toString();String html=""<p>"" + text + ""</p>"";Document doc=Jsoup.parse(html);Elements els=doc.select(""p"");assertEquals(1,els.size());Element el=els.first();assertNotNull(el);assertEquals(text,el.text());}"
"org.jsoup.parser.TokeniserTest.handleLargeComment",0,"@Test public void handleLargeComment(){StringBuilder sb=new StringBuilder(maxBufferLen);do {sb.append(""Quite a comment "");}while (sb.length()< maxBufferLen);String comment=sb.toString();String html=""<p><!-- "" + comment + "" --></p>"";Document doc=Jsoup.parse(html);Elements els=doc.select(""p"");assertEquals(1,els.size());Element el=els.first();assertNotNull(el);Comment child=(Comment)el.childNode(0);assertEquals("" "" + comment + "" "",child.getData());}"
"org.jsoup.parser.TokeniserTest.handleLargeCdata",0,"@Test public void handleLargeCdata(){StringBuilder sb=new StringBuilder(maxBufferLen);do {sb.append(""Quite a lot of CDATA <><><><>"");}while (sb.length()< maxBufferLen);String cdata=sb.toString();String html=""<p><![CDATA["" + cdata + ""]]></p>"";Document doc=Jsoup.parse(html);Elements els=doc.select(""p"");assertEquals(1,els.size());Element el=els.first();assertNotNull(el);TextNode child=(TextNode)el.childNode(0);assertEquals(cdata,el.text());assertEquals(cdata,child.getWholeText());}"
"org.jsoup.parser.TokeniserTest.handleLargeTitle",0,"@Test public void handleLargeTitle(){StringBuilder sb=new StringBuilder(maxBufferLen);do {sb.append(""Quite a long title"");}while (sb.length()< maxBufferLen);String title=sb.toString();String html=""<title>"" + title + ""</title>"";Document doc=Jsoup.parse(html);Elements els=doc.select(""title"");assertEquals(1,els.size());Element el=els.first();assertNotNull(el);TextNode child=(TextNode)el.childNode(0);assertEquals(title,el.text());assertEquals(title,child.getWholeText());assertEquals(title,doc.title());}"
"org.jsoup.integration.ParseTest.testSmhBizArticle",0,"@Test public void testSmhBizArticle()throws IOException {File in=getFile(""/htmltests/smh-biz-article-1.html"");Document doc=Jsoup.parse(in,""UTF-8"",""http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html"");assertEquals(""The board’s next fear: the female quota"",doc.title());assertEquals(""en"",doc.select(""html"").attr(""xml:lang""));Elements articleBody=doc.select("".articleBody > *"");assertEquals(17,articleBody.size());}"
"org.jsoup.integration.ParseTest.testNewsHomepage",0,"@Test public void testNewsHomepage()throws IOException {File in=getFile(""/htmltests/news-com-au-home.html"");Document doc=Jsoup.parse(in,""UTF-8"",""http://www.news.com.au/"");assertEquals(""News.com.au | News from Australia and around the world online | NewsComAu"",doc.title());assertEquals(""Brace yourself for Metro meltdown"",doc.select("".id1225817868581 h4"").text().trim());Element a=doc.select(""a[href=/entertainment/horoscopes]"").first();assertEquals(""/entertainment/horoscopes"",a.attr(""href""));assertEquals(""http://www.news.com.au/entertainment/horoscopes"",a.attr(""abs:href""));Element hs=doc.select(""a[href*=naughty-corners-are-a-bad-idea]"").first();assertEquals(""http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003"",hs.attr(""href""));assertEquals(hs.attr(""href""),hs.attr(""abs:href""));}"
"org.jsoup.integration.ParseTest.testGoogleSearchIpod",0,"@Test public void testGoogleSearchIpod()throws IOException {File in=getFile(""/htmltests/google-ipod.html"");Document doc=Jsoup.parse(in,""UTF-8"",""http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"");assertEquals(""ipod - Google Search"",doc.title());Elements results=doc.select(""h3.r > a"");assertEquals(12,results.size());assertEquals(""http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA"",results.get(0).attr(""href""));assertEquals(""http://www.apple.com/itunes/"",results.get(1).attr(""href""));}"
"org.jsoup.integration.ParseTest.testBinary",0,"@Test public void testBinary()throws IOException {File in=getFile(""/htmltests/thumb.jpg"");Document doc=Jsoup.parse(in,""UTF-8"");assertTrue(doc.text().contains(""gd-jpeg""));}"
"org.jsoup.integration.ParseTest.testYahooJp",0,"@Test public void testYahooJp()throws IOException {File in=getFile(""/htmltests/yahoo-jp.html"");Document doc=Jsoup.parse(in,""UTF-8"",""http://www.yahoo.co.jp/index.html"");assertEquals(""Yahoo! JAPAN"",doc.title());Element a=doc.select(""a[href=t/2322m2]"").first();assertEquals(""http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2"",a.attr(""abs:href""));assertEquals(""全国、人気の駅ランキング"",a.text());}"
"org.jsoup.integration.ParseTest.testBaidu",0,"@Test public void testBaidu()throws IOException {File in=getFile(""/htmltests/baidu-cn-home.html"");Document doc=Jsoup.parse(in,null,""http://www.baidu.com/"");Element submit=doc.select(""#su"").first();assertEquals(""百度一下"",submit.attr(""value""));submit=doc.select(""input[value=百度一下]"").first();assertEquals(""su"",submit.id());Element newsLink=doc.select(""a:contains(新)"").first();assertEquals(""http://news.baidu.com"",newsLink.absUrl(""href""));assertEquals(""GB2312"",doc.outputSettings().charset().displayName());assertEquals(""<title>百度一下，你就知道      </title>"",doc.select(""title"").outerHtml());doc.outputSettings().charset(""ascii"");assertEquals(""<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;</title>"",doc.select(""title"").outerHtml());}"
"org.jsoup.integration.ParseTest.testBaiduVariant",0,"@Test public void testBaiduVariant()throws IOException {File in=getFile(""/htmltests/baidu-variant.html"");Document doc=Jsoup.parse(in,null,""http://www.baidu.com/"");assertEquals(""GB2312"",doc.outputSettings().charset().displayName());assertEquals(""<title>百度一下，你就知道</title>"",doc.select(""title"").outerHtml());}"
"org.jsoup.integration.ParseTest.testHtml5Charset",0,"@Test public void testHtml5Charset()throws IOException {File in=getFile(""/htmltests/meta-charset-1.html"");Document doc=Jsoup.parse(in,null,""http://example.com/"");assertEquals(""新"",doc.text());assertEquals(""GB2312"",doc.outputSettings().charset().displayName());in=getFile(""/htmltests/meta-charset-2.html"");doc=Jsoup.parse(in,null,""http://example.com"");assertEquals(""UTF-8"",doc.outputSettings().charset().displayName());assertFalse(""新"".equals(doc.text()));in=getFile(""/htmltests/meta-charset-3.html"");doc=Jsoup.parse(in,null,""http://example.com/"");assertEquals(""UTF-8"",doc.outputSettings().charset().displayName());assertEquals(""新"",doc.text());}"
"org.jsoup.integration.ParseTest.testBrokenHtml5CharsetWithASingleDoubleQuote",0,"@Test public void testBrokenHtml5CharsetWithASingleDoubleQuote()throws IOException {InputStream in=inputStreamFrom(""<html>\n"" + ""<head><meta charset=UTF-8\""></head>\n"" + ""<body></body>\n""+ ""</html>"");Document doc=Jsoup.parse(in,null,""http://example.com/"");assertEquals(""UTF-8"",doc.outputSettings().charset().displayName());}"
"org.jsoup.integration.ParseTest.testNytArticle",0,"@Test public void testNytArticle()throws IOException {File in=getFile(""/htmltests/nyt-article-1.html"");Document doc=Jsoup.parse(in,null,""http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp"");Element headline=doc.select(""nyt_headline[version=1.0]"").first();assertEquals(""As BP Lays Out Future,It Will Not Include Hayward"",headline.text());}"
"org.jsoup.integration.ParseTest.testYahooArticle",0,"@Test public void testYahooArticle()throws IOException {File in=getFile(""/htmltests/yahoo-article-1.html"");Document doc=Jsoup.parse(in,""UTF-8"",""http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china"");Element p=doc.select(""p:contains(Volt will be sold in the United States)"").first();assertEquals(""In July,GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor,the Nissan Leaf."",p.text());}"
"org.jsoup.integration.ParseTest.testLowercaseUtf8Charset",0,"@Test public void testLowercaseUtf8Charset()throws IOException {File in=getFile(""/htmltests/lowercase-charset-test.html"");Document doc=Jsoup.parse(in,null);Element form=doc.select(""#form"").first();assertEquals(2,form.children().size());assertEquals(""UTF-8"",doc.outputSettings().charset().name());}"
"org.jsoup.nodes.ElementTest.getElementsByTagName",0,"@Test public void getElementsByTagName(){Document doc=Jsoup.parse(reference);List<Element> divs=doc.getElementsByTag(""div"");assertEquals(2,divs.size());assertEquals(""div1"",divs.get(0).id());assertEquals(""div2"",divs.get(1).id());List<Element> ps=doc.getElementsByTag(""p"");assertEquals(2,ps.size());assertEquals(""Hello"",((TextNode)ps.get(0).childNode(0)).getWholeText());assertEquals(""Another "",((TextNode)ps.get(1).childNode(0)).getWholeText());List<Element> ps2=doc.getElementsByTag(""P"");assertEquals(ps,ps2);List<Element> imgs=doc.getElementsByTag(""img"");assertEquals(""foo.png"",imgs.get(0).attr(""src""));List<Element> empty=doc.getElementsByTag(""wtf"");assertEquals(0,empty.size());}"
"org.jsoup.nodes.ElementTest.getNamespacedElementsByTag",0,"@Test public void getNamespacedElementsByTag(){Document doc=Jsoup.parse(""<div><abc:def id=1>Hello</abc:def></div>"");Elements els=doc.getElementsByTag(""abc:def"");assertEquals(1,els.size());assertEquals(""1"",els.first().id());assertEquals(""abc:def"",els.first().tagName());}"
"org.jsoup.nodes.ElementTest.testGetElementById",0,"@Test public void testGetElementById(){Document doc=Jsoup.parse(reference);Element div=doc.getElementById(""div1"");assertEquals(""div1"",div.id());assertNull(doc.getElementById(""none""));Document doc2=Jsoup.parse(""<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>"");Element div2=doc2.getElementById(""2"");assertEquals(""div"",div2.tagName());Element span=div2.child(0).getElementById(""2"");assertEquals(""span"",span.tagName());}"
"org.jsoup.nodes.ElementTest.testGetText",0,"@Test public void testGetText(){Document doc=Jsoup.parse(reference);assertEquals(""Hello Another element"",doc.text());assertEquals(""Another element"",doc.getElementsByTag(""p"").get(1).text());}"
"org.jsoup.nodes.ElementTest.testGetChildText",0,"@Test public void testGetChildText(){Document doc=Jsoup.parse(""<p>Hello <b>there</b> now"");Element p=doc.select(""p"").first();assertEquals(""Hello there now"",p.text());assertEquals(""Hello now"",p.ownText());}"
"org.jsoup.nodes.ElementTest.testNormalisesText",0,"@Test public void testNormalisesText(){String h=""<p>Hello<p>There.</p> \n <p>Here <b>is</b> \n s<b>om</b>e text."";Document doc=Jsoup.parse(h);String text=doc.text();assertEquals(""Hello There. Here is some text."",text);}"
"org.jsoup.nodes.ElementTest.testKeepsPreText",0,"@Test public void testKeepsPreText(){String h=""<p>Hello \n \n there.</p> <div><pre>  What's \n\n  that?</pre>"";Document doc=Jsoup.parse(h);assertEquals(""Hello there.   What's \n\n  that?"",doc.text());}"
"org.jsoup.nodes.ElementTest.testKeepsPreTextInCode",0,"@Test public void testKeepsPreTextInCode(){String h=""<pre><code>code\n\ncode</code></pre>"";Document doc=Jsoup.parse(h);assertEquals(""code\n\ncode"",doc.text());assertEquals(""<pre><code>code\n\ncode</code></pre>"",doc.body().html());}"
"org.jsoup.nodes.ElementTest.testBrHasSpace",0,"@Test public void testBrHasSpace(){Document doc=Jsoup.parse(""<p>Hello<br>there</p>"");assertEquals(""Hello there"",doc.text());assertEquals(""Hello there"",doc.select(""p"").first().ownText());doc=Jsoup.parse(""<p>Hello <br> there</p>"");assertEquals(""Hello there"",doc.text());}"
"org.jsoup.nodes.ElementTest.testGetSiblings",0,"@Test public void testGetSiblings(){Document doc=Jsoup.parse(""<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"");Element p=doc.getElementById(""1"");assertEquals(""there"",p.text());assertEquals(""Hello"",p.previousElementSibling().text());assertEquals(""this"",p.nextElementSibling().text());assertEquals(""Hello"",p.firstElementSibling().text());assertEquals(""element"",p.lastElementSibling().text());}"
"org.jsoup.nodes.ElementTest.testGetSiblingsWithDuplicateContent",0,"@Test public void testGetSiblingsWithDuplicateContent(){Document doc=Jsoup.parse(""<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>"");Element p=doc.getElementById(""1"");assertEquals(""there"",p.text());assertEquals(""Hello"",p.previousElementSibling().text());assertEquals(""this"",p.nextElementSibling().text());assertEquals(""this"",p.nextElementSibling().nextElementSibling().text());assertEquals(""is"",p.nextElementSibling().nextElementSibling().nextElementSibling().text());assertEquals(""Hello"",p.firstElementSibling().text());assertEquals(""element"",p.lastElementSibling().text());}"
"org.jsoup.nodes.ElementTest.testGetParents",0,"@Test public void testGetParents(){Document doc=Jsoup.parse(""<div><p>Hello <span>there</span></div>"");Element span=doc.select(""span"").first();Elements parents=span.parents();assertEquals(4,parents.size());assertEquals(""p"",parents.get(0).tagName());assertEquals(""div"",parents.get(1).tagName());assertEquals(""body"",parents.get(2).tagName());assertEquals(""html"",parents.get(3).tagName());}"
"org.jsoup.nodes.ElementTest.testElementSiblingIndex",0,"@Test public void testElementSiblingIndex(){Document doc=Jsoup.parse(""<div><p>One</p>...<p>Two</p>...<p>Three</p>"");Elements ps=doc.select(""p"");assertTrue(0 == ps.get(0).elementSiblingIndex());assertTrue(1 == ps.get(1).elementSiblingIndex());assertTrue(2 == ps.get(2).elementSiblingIndex());}"
"org.jsoup.nodes.ElementTest.testElementSiblingIndexSameContent",0,"@Test public void testElementSiblingIndexSameContent(){Document doc=Jsoup.parse(""<div><p>One</p>...<p>One</p>...<p>One</p>"");Elements ps=doc.select(""p"");assertTrue(0 == ps.get(0).elementSiblingIndex());assertTrue(1 == ps.get(1).elementSiblingIndex());assertTrue(2 == ps.get(2).elementSiblingIndex());}"
"org.jsoup.nodes.ElementTest.testGetElementsWithClass",0,"@Test public void testGetElementsWithClass(){Document doc=Jsoup.parse(""<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>"");List<Element> els=doc.getElementsByClass(""mellow"");assertEquals(2,els.size());assertEquals(""div"",els.get(0).tagName());assertEquals(""span"",els.get(1).tagName());List<Element> els2=doc.getElementsByClass(""yellow"");assertEquals(2,els2.size());assertEquals(""div"",els2.get(0).tagName());assertEquals(""b"",els2.get(1).tagName());List<Element> none=doc.getElementsByClass(""solo"");assertEquals(0,none.size());}"
"org.jsoup.nodes.ElementTest.testGetElementsWithAttribute",0,"@Test public void testGetElementsWithAttribute(){Document doc=Jsoup.parse(""<div style='bold'><p title=qux><p><b style></b></p></div>"");List<Element> els=doc.getElementsByAttribute(""style"");assertEquals(2,els.size());assertEquals(""div"",els.get(0).tagName());assertEquals(""b"",els.get(1).tagName());List<Element> none=doc.getElementsByAttribute(""class"");assertEquals(0,none.size());}"
"org.jsoup.nodes.ElementTest.testGetElementsWithAttributeDash",0,"@Test public void testGetElementsWithAttributeDash(){Document doc=Jsoup.parse(""<meta http-equiv=content-type value=utf8 id=1> <meta name=foo content=bar id=2> <div http-equiv=content-type value=utf8 id=3>"");Elements meta=doc.select(""meta[http-equiv=content-type],meta[charset]"");assertEquals(1,meta.size());assertEquals(""1"",meta.first().id());}"
"org.jsoup.nodes.ElementTest.testGetElementsWithAttributeValue",0,"@Test public void testGetElementsWithAttributeValue(){Document doc=Jsoup.parse(""<div style='bold'><p><p><b style></b></p></div>"");List<Element> els=doc.getElementsByAttributeValue(""style"",""bold"");assertEquals(1,els.size());assertEquals(""div"",els.get(0).tagName());List<Element> none=doc.getElementsByAttributeValue(""style"",""none"");assertEquals(0,none.size());}"
"org.jsoup.nodes.ElementTest.testClassDomMethods",0,"@Test public void testClassDomMethods(){Document doc=Jsoup.parse(""<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>"");List<Element> els=doc.getElementsByAttribute(""class"");Element span=els.get(0);assertEquals(""mellow yellow"",span.className());assertTrue(span.hasClass(""mellow""));assertTrue(span.hasClass(""yellow""));Set<String> classes=span.classNames();assertEquals(2,classes.size());assertTrue(classes.contains(""mellow""));assertTrue(classes.contains(""yellow""));assertEquals("""",doc.className());classes=doc.classNames();assertEquals(0,classes.size());assertFalse(doc.hasClass(""mellow""));}"
"org.jsoup.nodes.ElementTest.testHasClassDomMethods",0,"@Test public void testHasClassDomMethods(){Tag tag=Tag.valueOf(""a"");Attributes attribs=new Attributes();Element el=new Element(tag,"""",attribs);attribs.put(""class"",""toto"");boolean hasClass=el.hasClass(""toto"");assertTrue(hasClass);attribs.put(""class"","" toto"");hasClass=el.hasClass(""toto"");assertTrue(hasClass);attribs.put(""class"",""toto "");hasClass=el.hasClass(""toto"");assertTrue(hasClass);attribs.put(""class"",""\ttoto "");hasClass=el.hasClass(""toto"");assertTrue(hasClass);attribs.put(""class"",""  toto "");hasClass=el.hasClass(""toto"");assertTrue(hasClass);attribs.put(""class"",""ab"");hasClass=el.hasClass(""toto"");assertFalse(hasClass);attribs.put(""class"",""     "");hasClass=el.hasClass(""toto"");assertFalse(hasClass);attribs.put(""class"",""tototo"");hasClass=el.hasClass(""toto"");assertFalse(hasClass);attribs.put(""class"",""raulpismuth  "");hasClass=el.hasClass(""raulpismuth"");assertTrue(hasClass);attribs.put(""class"","" abcd  raulpismuth efgh "");hasClass=el.hasClass(""raulpismuth"");assertTrue(hasClass);attribs.put(""class"","" abcd efgh raulpismuth"");hasClass=el.hasClass(""raulpismuth"");assertTrue(hasClass);attribs.put(""class"","" abcd efgh raulpismuth "");hasClass=el.hasClass(""raulpismuth"");assertTrue(hasClass);}"
"org.jsoup.nodes.ElementTest.testClassUpdates",0,"@Test public void testClassUpdates(){Document doc=Jsoup.parse(""<div class='mellow yellow'></div>"");Element div=doc.select(""div"").first();div.addClass(""green"");assertEquals(""mellow yellow green"",div.className());div.removeClass(""red"");div.removeClass(""yellow"");assertEquals(""mellow green"",div.className());div.toggleClass(""green"").toggleClass(""red"");assertEquals(""mellow red"",div.className());}"
"org.jsoup.nodes.ElementTest.testOuterHtml",0,"@Test public void testOuterHtml(){Document doc=Jsoup.parse(""<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"");assertEquals(""<html><head></head><body><div title=\""Tags &amp;c.\""><img src=\""foo.png\""><p><!-- comment -->Hello</p><p>there</p></div></body></html>"",TextUtil.stripNewlines(doc.outerHtml()));}"
"org.jsoup.nodes.ElementTest.testInnerHtml",0,"@Test public void testInnerHtml(){Document doc=Jsoup.parse(""<div>\n <p>Hello</p> </div>"");assertEquals(""<p>Hello</p>"",doc.getElementsByTag(""div"").get(0).html());}"
"org.jsoup.nodes.ElementTest.testFormatHtml",0,"@Test public void testFormatHtml(){Document doc=Jsoup.parse(""<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>"");assertEquals(""<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>"",doc.html());}"
"org.jsoup.nodes.ElementTest.testFormatOutline",0,"@Test public void testFormatOutline(){Document doc=Jsoup.parse(""<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>"");doc.outputSettings().outline(true);assertEquals(""<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>"",doc.html());}"
"org.jsoup.nodes.ElementTest.testSetIndent",0,"@Test public void testSetIndent(){Document doc=Jsoup.parse(""<div><p>Hello\nthere</p></div>"");doc.outputSettings().indentAmount(0);assertEquals(""<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>"",doc.html());}"
"org.jsoup.nodes.ElementTest.testNotPretty",0,"@Test public void testNotPretty(){Document doc=Jsoup.parse(""<div>   \n<p>Hello\n there\n</p></div>"");doc.outputSettings().prettyPrint(false);assertEquals(""<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>"",doc.html());Element div=doc.select(""div"").first();assertEquals(""   \n<p>Hello\n there\n</p>"",div.html());}"
"org.jsoup.nodes.ElementTest.testEmptyElementFormatHtml",0,"@Test public void testEmptyElementFormatHtml(){Document doc=Jsoup.parse(""<section><div></div></section>"");assertEquals(""<section>\n <div></div>\n</section>"",doc.select(""section"").first().outerHtml());}"
"org.jsoup.nodes.ElementTest.testNoIndentOnScriptAndStyle",0,"@Test public void testNoIndentOnScriptAndStyle(){Document doc=Jsoup.parse(""<script>one\ntwo</script>\n<style>three\nfour</style>"");assertEquals(""<script>one\ntwo</script> \n<style>three\nfour</style>"",doc.head().html());}"
"org.jsoup.nodes.ElementTest.testContainerOutput",0,"@Test public void testContainerOutput(){Document doc=Jsoup.parse(""<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>"");assertEquals(""<title>Hello there</title>"",doc.select(""title"").first().outerHtml());assertEquals(""<div>\n <p>Hello</p>\n <p>there</p>\n</div>"",doc.select(""div"").first().outerHtml());assertEquals(""<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>"",doc.select(""body"").first().html());}"
"org.jsoup.nodes.ElementTest.testSetText",0,"@Test public void testSetText(){String h=""<div id=1>Hello <p>there <b>now</b></p></div>"";Document doc=Jsoup.parse(h);assertEquals(""Hello there now"",doc.text());assertEquals(""there now"",doc.select(""p"").get(0).text());Element div=doc.getElementById(""1"").text(""Gone"");assertEquals(""Gone"",div.text());assertEquals(0,doc.select(""p"").size());}"
"org.jsoup.nodes.ElementTest.testAddNewElement",0,"@Test public void testAddNewElement(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.appendElement(""p"").text(""there"");div.appendElement(""P"").attr(""CLASS"",""second"").text(""now"");assertEquals(""<html><head></head><body><div id=\""1\""><p>Hello</p><p>there</p><P CLASS=\""second\"">now</P></div></body></html>"",TextUtil.stripNewlines(doc.html()));Elements ps=doc.select(""p"");for (int i=0;i < ps.size();i++){assertEquals(i,ps.get(i).siblingIndex);}}"
"org.jsoup.nodes.ElementTest.testAddBooleanAttribute",0,"@Test public void testAddBooleanAttribute(){Element div=new Element(Tag.valueOf(""div""),"""");div.attr(""true"",true);div.attr(""false"",""value"");div.attr(""false"",false);assertTrue(div.hasAttr(""true""));assertEquals("""",div.attr(""true""));List<Attribute> attributes=div.attributes().asList();assertEquals(""There should be one attribute"",1,attributes.size());assertTrue(""Attribute should be boolean"",attributes.get(0)instanceof BooleanAttribute);assertFalse(div.hasAttr(""false""));assertEquals(""<div true></div>"",div.outerHtml());}"
"org.jsoup.nodes.ElementTest.testAppendRowToTable",0,"@Test public void testAppendRowToTable(){Document doc=Jsoup.parse(""<table><tr><td>1</td></tr></table>"");Element table=doc.select(""tbody"").first();table.append(""<tr><td>2</td></tr>"");assertEquals(""<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.ElementTest.testPrependRowToTable",0,"@Test public void testPrependRowToTable(){Document doc=Jsoup.parse(""<table><tr><td>1</td></tr></table>"");Element table=doc.select(""tbody"").first();table.prepend(""<tr><td>2</td></tr>"");assertEquals(""<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));Elements ps=doc.select(""tr"");for (int i=0;i < ps.size();i++){assertEquals(i,ps.get(i).siblingIndex);}}"
"org.jsoup.nodes.ElementTest.testPrependElement",0,"@Test public void testPrependElement(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.prependElement(""p"").text(""Before"");assertEquals(""Before"",div.child(0).text());assertEquals(""Hello"",div.child(1).text());}"
"org.jsoup.nodes.ElementTest.testAddNewText",0,"@Test public void testAddNewText(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.appendText("" there & now >"");assertEquals(""<p>Hello</p> there &amp;now &gt;"",TextUtil.stripNewlines(div.html()));}"
"org.jsoup.nodes.ElementTest.testPrependText",0,"@Test public void testPrependText(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.prependText(""there & now > "");assertEquals(""there & now > Hello"",div.text());assertEquals(""there &amp;now &gt;<p>Hello</p>"",TextUtil.stripNewlines(div.html()));}"
"org.jsoup.nodes.ElementTest.testThrowsOnAddNullText",0,"@Test(expected=IllegalArgumentException.class)public void testThrowsOnAddNullText(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.appendText(null);}"
"org.jsoup.nodes.ElementTest.testThrowsOnPrependNullText",0,"@Test(expected=IllegalArgumentException.class)public void testThrowsOnPrependNullText(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.prependText(null);}"
"org.jsoup.nodes.ElementTest.testAddNewHtml",0,"@Test public void testAddNewHtml(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.append(""<p>there</p><p>now</p>"");assertEquals(""<p>Hello</p><p>there</p><p>now</p>"",TextUtil.stripNewlines(div.html()));Elements ps=doc.select(""p"");for (int i=0;i < ps.size();i++){assertEquals(i,ps.get(i).siblingIndex);}}"
"org.jsoup.nodes.ElementTest.testPrependNewHtml",0,"@Test public void testPrependNewHtml(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.prepend(""<p>there</p><p>now</p>"");assertEquals(""<p>there</p><p>now</p><p>Hello</p>"",TextUtil.stripNewlines(div.html()));Elements ps=doc.select(""p"");for (int i=0;i < ps.size();i++){assertEquals(i,ps.get(i).siblingIndex);}}"
"org.jsoup.nodes.ElementTest.testSetHtml",0,"@Test public void testSetHtml(){Document doc=Jsoup.parse(""<div id=1><p>Hello</p></div>"");Element div=doc.getElementById(""1"");div.html(""<p>there</p><p>now</p>"");assertEquals(""<p>there</p><p>now</p>"",TextUtil.stripNewlines(div.html()));}"
"org.jsoup.nodes.ElementTest.testSetHtmlTitle",0,"@Test public void testSetHtmlTitle(){Document doc=Jsoup.parse(""<html><head id=2><title id=1></title></head></html>"");Element title=doc.getElementById(""1"");title.html(""good"");assertEquals(""good"",title.html());title.html(""<i>bad</i>"");assertEquals(""&lt;i&gt;bad&lt;/i&gt;"",title.html());Element head=doc.getElementById(""2"");head.html(""<title><i>bad</i></title>"");assertEquals(""<title>&lt;i&gt;bad&lt;/i&gt;</title>"",head.html());}"
"org.jsoup.nodes.ElementTest.testWrap",0,"@Test public void testWrap(){Document doc=Jsoup.parse(""<div><p>Hello</p><p>There</p></div>"");Element p=doc.select(""p"").first();p.wrap(""<div class='head'></div>"");assertEquals(""<div><div class=\""head\""><p>Hello</p></div><p>There</p></div>"",TextUtil.stripNewlines(doc.body().html()));Element ret=p.wrap(""<div><div class=foo></div><p>What?</p></div>"");assertEquals(""<div><div class=\""head\""><div><div class=\""foo\""><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>"",TextUtil.stripNewlines(doc.body().html()));assertEquals(ret,p);}"
"org.jsoup.nodes.ElementTest.before",0,"@Test public void before(){Document doc=Jsoup.parse(""<div><p>Hello</p><p>There</p></div>"");Element p1=doc.select(""p"").first();p1.before(""<div>one</div><div>two</div>"");assertEquals(""<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>"",TextUtil.stripNewlines(doc.body().html()));doc.select(""p"").last().before(""<p>Three</p><!-- four -->"");assertEquals(""<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.ElementTest.after",0,"@Test public void after(){Document doc=Jsoup.parse(""<div><p>Hello</p><p>There</p></div>"");Element p1=doc.select(""p"").first();p1.after(""<div>one</div><div>two</div>"");assertEquals(""<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>"",TextUtil.stripNewlines(doc.body().html()));doc.select(""p"").last().after(""<p>Three</p><!-- four -->"");assertEquals(""<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.ElementTest.testWrapWithRemainder",0,"@Test public void testWrapWithRemainder(){Document doc=Jsoup.parse(""<div><p>Hello</p></div>"");Element p=doc.select(""p"").first();p.wrap(""<div class='head'></div><p>There!</p>"");assertEquals(""<div><div class=\""head\""><p>Hello</p><p>There!</p></div></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.ElementTest.testHasText",0,"@Test public void testHasText(){Document doc=Jsoup.parse(""<div><p>Hello</p><p></p></div>"");Element div=doc.select(""div"").first();Elements ps=doc.select(""p"");assertTrue(div.hasText());assertTrue(ps.first().hasText());assertFalse(ps.last().hasText());}"
"org.jsoup.nodes.ElementTest.dataset",0,"@Test public void dataset(){Document doc=Jsoup.parse(""<div id=1 data-name=jsoup class=new data-package=jar>Hello</div><p id=2>Hello</p>"");Element div=doc.select(""div"").first();Map<String,String> dataset=div.dataset();Attributes attributes=div.attributes();assertEquals(2,dataset.size());assertEquals(""jsoup"",dataset.get(""name""));assertEquals(""jar"",dataset.get(""package""));dataset.put(""name"",""jsoup updated"");dataset.put(""language"",""java"");dataset.remove(""package"");assertEquals(2,dataset.size());assertEquals(4,attributes.size());assertEquals(""jsoup updated"",attributes.get(""data-name""));assertEquals(""jsoup updated"",dataset.get(""name""));assertEquals(""java"",attributes.get(""data-language""));assertEquals(""java"",dataset.get(""language""));attributes.put(""data-food"",""bacon"");assertEquals(3,dataset.size());assertEquals(""bacon"",dataset.get(""food""));attributes.put(""data-"",""empty"");assertEquals(null,dataset.get(""""));Element p=doc.select(""p"").first();assertEquals(0,p.dataset().size());}"
"org.jsoup.nodes.ElementTest.parentlessToString",0,"@Test public void parentlessToString(){Document doc=Jsoup.parse(""<img src='foo'>"");Element img=doc.select(""img"").first();assertEquals(""<img src=\""foo\"">"",img.toString());img.remove();assertEquals(""<img src=\""foo\"">"",img.toString());}"
"org.jsoup.nodes.ElementTest.testClone",0,"@Test public void testClone(){Document doc=Jsoup.parse(""<div><p>One<p><span>Two</div>"");Element p=doc.select(""p"").get(1);Element clone=p.clone();assertNull(clone.parent());assertEquals(0,clone.siblingIndex);assertEquals(1,p.siblingIndex);assertNotNull(p.parent());clone.append(""<span>Three"");assertEquals(""<p><span>Two</span><span>Three</span></p>"",TextUtil.stripNewlines(clone.outerHtml()));assertEquals(""<div><p>One</p><p><span>Two</span></p></div>"",TextUtil.stripNewlines(doc.body().html()));doc.body().appendChild(clone);assertNotNull(clone.parent());assertEquals(""<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.ElementTest.testClonesClassnames",0,"@Test public void testClonesClassnames(){Document doc=Jsoup.parse(""<div class='one two'></div>"");Element div=doc.select(""div"").first();Set<String> classes=div.classNames();assertEquals(2,classes.size());assertTrue(classes.contains(""one""));assertTrue(classes.contains(""two""));Element copy=div.clone();Set<String> copyClasses=copy.classNames();assertEquals(2,copyClasses.size());assertTrue(copyClasses.contains(""one""));assertTrue(copyClasses.contains(""two""));copyClasses.add(""three"");copyClasses.remove(""one"");assertTrue(classes.contains(""one""));assertFalse(classes.contains(""three""));assertFalse(copyClasses.contains(""one""));assertTrue(copyClasses.contains(""three""));assertEquals("""",div.html());assertEquals("""",copy.html());}"
"org.jsoup.nodes.ElementTest.testShallowClone",0,"@Test public void testShallowClone(){String base=""http://example.com/"";Document doc=Jsoup.parse(""<div id=1 class=one><p id=2 class=two>One"",base);Element d=doc.selectFirst(""div"");Element p=doc.selectFirst(""p"");TextNode t=p.textNodes().get(0);Element d2=d.shallowClone();Element p2=p.shallowClone();TextNode t2=(TextNode)t.shallowClone();assertEquals(1,d.childNodeSize());assertEquals(0,d2.childNodeSize());assertEquals(1,p.childNodeSize());assertEquals(0,p2.childNodeSize());assertEquals("""",p2.text());assertEquals(""two"",p2.className());assertEquals(""One"",t2.text());d2.append(""<p id=3>Three"");assertEquals(1,d2.childNodeSize());assertEquals(""Three"",d2.text());assertEquals(""One"",d.text());assertEquals(base,d2.baseUri());}"
"org.jsoup.nodes.ElementTest.testTagNameSet",0,"@Test public void testTagNameSet(){Document doc=Jsoup.parse(""<div><i>Hello</i>"");doc.select(""i"").first().tagName(""em"");assertEquals(0,doc.select(""i"").size());assertEquals(1,doc.select(""em"").size());assertEquals(""<em>Hello</em>"",doc.select(""div"").first().html());}"
"org.jsoup.nodes.ElementTest.testHtmlContainsOuter",0,"@Test public void testHtmlContainsOuter(){Document doc=Jsoup.parse(""<title>Check</title> <div>Hello there</div>"");doc.outputSettings().indentAmount(0);assertTrue(doc.html().contains(doc.select(""title"").outerHtml()));assertTrue(doc.html().contains(doc.select(""div"").outerHtml()));}"
"org.jsoup.nodes.ElementTest.testGetTextNodes",0,"@Test public void testGetTextNodes(){Document doc=Jsoup.parse(""<p>One <span>Two</span> Three <br> Four</p>"");List<TextNode> textNodes=doc.select(""p"").first().textNodes();assertEquals(3,textNodes.size());assertEquals(""One "",textNodes.get(0).text());assertEquals("" Three "",textNodes.get(1).text());assertEquals("" Four"",textNodes.get(2).text());assertEquals(0,doc.select(""br"").first().textNodes().size());}"
"org.jsoup.nodes.ElementTest.testManipulateTextNodes",0,"@Test public void testManipulateTextNodes(){Document doc=Jsoup.parse(""<p>One <span>Two</span> Three <br> Four</p>"");Element p=doc.select(""p"").first();List<TextNode> textNodes=p.textNodes();textNodes.get(1).text("" three-more "");textNodes.get(2).splitText(3).text(""-ur"");assertEquals(""One Two three-more Fo-ur"",p.text());assertEquals(""One three-more Fo-ur"",p.ownText());assertEquals(4,p.textNodes().size());}"
"org.jsoup.nodes.ElementTest.testGetDataNodes",0,"@Test public void testGetDataNodes(){Document doc=Jsoup.parse(""<script>One Two</script> <style>Three Four</style> <p>Fix Six</p>"");Element script=doc.select(""script"").first();Element style=doc.select(""style"").first();Element p=doc.select(""p"").first();List<DataNode> scriptData=script.dataNodes();assertEquals(1,scriptData.size());assertEquals(""One Two"",scriptData.get(0).getWholeData());List<DataNode> styleData=style.dataNodes();assertEquals(1,styleData.size());assertEquals(""Three Four"",styleData.get(0).getWholeData());List<DataNode> pData=p.dataNodes();assertEquals(0,pData.size());}"
"org.jsoup.nodes.ElementTest.elementIsNotASiblingOfItself",0,"@Test public void elementIsNotASiblingOfItself(){Document doc=Jsoup.parse(""<div><p>One<p>Two<p>Three</div>"");Element p2=doc.select(""p"").get(1);assertEquals(""Two"",p2.text());Elements els=p2.siblingElements();assertEquals(2,els.size());assertEquals(""<p>One</p>"",els.get(0).outerHtml());assertEquals(""<p>Three</p>"",els.get(1).outerHtml());}"
"org.jsoup.nodes.ElementTest.testChildThrowsIndexOutOfBoundsOnMissing",0,"@Test public void testChildThrowsIndexOutOfBoundsOnMissing(){Document doc=Jsoup.parse(""<div><p>One</p><p>Two</p></div>"");Element div=doc.select(""div"").first();assertEquals(2,div.children().size());assertEquals(""One"",div.child(0).text());try {div.child(3);fail(""Should throw index out of bounds"");}catch(IndexOutOfBoundsException e){}}"
"org.jsoup.nodes.ElementTest.moveByAppend",0,"@Test public void moveByAppend(){Document doc=Jsoup.parse(""<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"");Element div1=doc.select(""div"").get(0);Element div2=doc.select(""div"").get(1);assertEquals(4,div1.childNodeSize());List<Node> children=div1.childNodes();assertEquals(4,children.size());div2.insertChildren(0,children);assertEquals(0,children.size());assertEquals(0,div1.childNodeSize());assertEquals(4,div2.childNodeSize());assertEquals(""<div id=\""1\""></div>\n<div id=\""2\"">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>"",doc.body().html());}"
"org.jsoup.nodes.ElementTest.insertChildrenArgumentValidation",0,"@Test public void insertChildrenArgumentValidation(){Document doc=Jsoup.parse(""<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"");Element div1=doc.select(""div"").get(0);Element div2=doc.select(""div"").get(1);List<Node> children=div1.childNodes();try {div2.insertChildren(6,children);fail();}catch(IllegalArgumentException e){}try {div2.insertChildren(-5,children);fail();}catch(IllegalArgumentException e){}try {div2.insertChildren(0,(Collection<? extends Node>)null);fail();}catch(IllegalArgumentException e){}}"
"org.jsoup.nodes.ElementTest.insertChildrenAtPosition",0,"@Test public void insertChildrenAtPosition(){Document doc=Jsoup.parse(""<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>"");Element div1=doc.select(""div"").get(0);Elements p1s=div1.select(""p"");Element div2=doc.select(""div"").get(1);assertEquals(2,div2.childNodeSize());div2.insertChildren(-1,p1s);assertEquals(2,div1.childNodeSize());assertEquals(4,div2.childNodeSize());assertEquals(3,p1s.get(1).siblingIndex());List<Node> els=new ArrayList<>();Element el1=new Element(Tag.valueOf(""span""),"""").text(""Span1"");Element el2=new Element(Tag.valueOf(""span""),"""").text(""Span2"");TextNode tn1=new TextNode(""Text4"");els.add(el1);els.add(el2);els.add(tn1);assertNull(el1.parent());div2.insertChildren(-2,els);assertEquals(div2,el1.parent());assertEquals(7,div2.childNodeSize());assertEquals(3,el1.siblingIndex());assertEquals(4,el2.siblingIndex());assertEquals(5,tn1.siblingIndex());}"
"org.jsoup.nodes.ElementTest.insertChildrenAsCopy",0,"@Test public void insertChildrenAsCopy(){Document doc=Jsoup.parse(""<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>"");Element div1=doc.select(""div"").get(0);Element div2=doc.select(""div"").get(1);Elements ps=doc.select(""p"").clone();ps.first().text(""One cloned"");div2.insertChildren(-1,ps);assertEquals(4,div1.childNodeSize());assertEquals(2,div2.childNodeSize());assertEquals(""<div id=\""1\"">Text <p>One</p> Text <p>Two</p></div><div id=\""2\""><p>One cloned</p><p>Two</p></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.nodes.ElementTest.testCssPath",0,"@Test public void testCssPath(){Document doc=Jsoup.parse(""<div id=\""id1\"">A</div><div>B</div><div class=\""c1 c2\"">C</div>"");Element divA=doc.select(""div"").get(0);Element divB=doc.select(""div"").get(1);Element divC=doc.select(""div"").get(2);assertEquals(divA.cssSelector(),""#id1"");assertEquals(divB.cssSelector(),""html > body > div:nth-child(2)"");assertEquals(divC.cssSelector(),""html > body > div.c1.c2"");assertTrue(divA == doc.select(divA.cssSelector()).first());assertTrue(divB == doc.select(divB.cssSelector()).first());assertTrue(divC == doc.select(divC.cssSelector()).first());}"
"org.jsoup.nodes.ElementTest.testClassNames",0,"@Test public void testClassNames(){Document doc=Jsoup.parse(""<div class=\""c1 c2\"">C</div>"");Element div=doc.select(""div"").get(0);assertEquals(""c1 c2"",div.className());final Set<String> set1=div.classNames();final Object[]arr1=set1.toArray();assertTrue(arr1.length == 2);assertEquals(""c1"",arr1[0]);assertEquals(""c2"",arr1[1]);set1.add(""c3"");assertTrue(2 == div.classNames().size());assertEquals(""c1 c2"",div.className());final Set<String> newSet=new LinkedHashSet<>(3);newSet.addAll(set1);newSet.add(""c3"");div.classNames(newSet);assertEquals(""c1 c2 c3"",div.className());final Set<String> set2=div.classNames();final Object[]arr2=set2.toArray();assertTrue(arr2.length == 3);assertEquals(""c1"",arr2[0]);assertEquals(""c2"",arr2[1]);assertEquals(""c3"",arr2[2]);}"
"org.jsoup.nodes.ElementTest.testHashAndEqualsAndValue",0,"@Test public void testHashAndEqualsAndValue(){String doc1=""<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>"" + ""<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>"";Document doc=Jsoup.parse(doc1);Elements els=doc.select(""p"");assertEquals(8,els.size());Element e0=els.get(0);Element e1=els.get(1);Element e2=els.get(2);Element e3=els.get(3);Element e4=els.get(4);Element e5=els.get(5);Element e6=els.get(6);Element e7=els.get(7);assertEquals(e0,e0);assertTrue(e0.hasSameValue(e1));assertTrue(e0.hasSameValue(e4));assertTrue(e0.hasSameValue(e5));assertFalse(e0.equals(e2));assertFalse(e0.hasSameValue(e2));assertFalse(e0.hasSameValue(e3));assertFalse(e0.hasSameValue(e6));assertFalse(e0.hasSameValue(e7));assertEquals(e0.hashCode(),e0.hashCode());assertFalse(e0.hashCode()== (e2.hashCode()));assertFalse(e0.hashCode()== (e3).hashCode());assertFalse(e0.hashCode()== (e6).hashCode());assertFalse(e0.hashCode()== (e7).hashCode());}"
"org.jsoup.nodes.ElementTest.testRelativeUrls",0,"@Test public void testRelativeUrls(){String html=""<body><a href='./one.html'>One</a> <a href='two.html'>two</a> <a href='../three.html'>Three</a> <a href='//example2.com/four/'>Four</a> <a href='https://example2.com/five/'>Five</a>"";Document doc=Jsoup.parse(html,""http://example.com/bar/"");Elements els=doc.select(""a"");assertEquals(""http://example.com/bar/one.html"",els.get(0).absUrl(""href""));assertEquals(""http://example.com/bar/two.html"",els.get(1).absUrl(""href""));assertEquals(""http://example.com/three.html"",els.get(2).absUrl(""href""));assertEquals(""http://example2.com/four/"",els.get(3).absUrl(""href""));assertEquals(""https://example2.com/five/"",els.get(4).absUrl(""href""));}"
"org.jsoup.nodes.ElementTest.appendMustCorrectlyMoveChildrenInsideOneParentElement",0,"@Test public void appendMustCorrectlyMoveChildrenInsideOneParentElement(){Document doc=new Document("""");Element body=doc.appendElement(""body"");body.appendElement(""div1"");body.appendElement(""div2"");final Element div3=body.appendElement(""div3"");div3.text(""Check"");final Element div4=body.appendElement(""div4"");ArrayList<Element> toMove=new ArrayList<>();toMove.add(div3);toMove.add(div4);body.insertChildren(0,toMove);String result=doc.toString().replaceAll(""\\s+"","""");assertEquals(""<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>"",result);}"
"org.jsoup.nodes.ElementTest.testHashcodeIsStableWithContentChanges",0,"@Test public void testHashcodeIsStableWithContentChanges(){Element root=new Element(Tag.valueOf(""root""),"""");HashSet<Element> set=new HashSet<>();set.add(root);root.appendChild(new Element(Tag.valueOf(""a""),""""));assertTrue(set.contains(root));}"
"org.jsoup.nodes.ElementTest.testNamespacedElements",0,"@Test public void testNamespacedElements(){String html=""<html><body><fb:comments /></body></html>"";Document doc=Jsoup.parse(html,""http://example.com/bar/"");Elements els=doc.select(""fb|comments"");assertEquals(1,els.size());assertEquals(""html > body > fb|comments"",els.get(0).cssSelector());}"
"org.jsoup.nodes.ElementTest.testChainedRemoveAttributes",0,"@Test public void testChainedRemoveAttributes(){String html=""<a one two three four>Text</a>"";Document doc=Jsoup.parse(html);Element a=doc.select(""a"").first();a.removeAttr(""zero"").removeAttr(""one"").removeAttr(""two"").removeAttr(""three"").removeAttr(""four"").removeAttr(""five"");assertEquals(""<a>Text</a>"",a.outerHtml());}"
"org.jsoup.nodes.ElementTest.testLoopedRemoveAttributes",0,"@Test public void testLoopedRemoveAttributes(){String html=""<a one two three four>Text</a><p foo>Two</p>"";Document doc=Jsoup.parse(html);for(Element el : doc.getAllElements()){el.clearAttributes();}assertEquals(""<a>Text</a>\n<p>Two</p>"",doc.body().html());}"
"org.jsoup.nodes.ElementTest.testIs",0,"@Test public void testIs(){String html=""<div><p>One <a class=big>Two</a> Three</p><p>Another</p>"";Document doc=Jsoup.parse(html);Element p=doc.select(""p"").first();assertTrue(p.is(""p""));assertFalse(p.is(""div""));assertTrue(p.is(""p:has(a)""));assertTrue(p.is(""p:first-child""));assertFalse(p.is(""p:last-child""));assertTrue(p.is(""*""));assertTrue(p.is(""div p""));Element q=doc.select(""p"").last();assertTrue(q.is(""p""));assertTrue(q.is(""p ~ p""));assertTrue(q.is(""p + p""));assertTrue(q.is(""p:last-child""));assertFalse(q.is(""p a""));assertFalse(q.is(""a""));}"
"org.jsoup.nodes.ElementTest.elementByTagName",0,"@Test public void elementByTagName(){Element a=new Element(""P"");assertTrue(a.tagName().equals(""P""));}"
"org.jsoup.nodes.ElementTest.testChildrenElements",0,"@Test public void testChildrenElements(){String html=""<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>"";Document doc=Jsoup.parse(html);Element div=doc.select(""div"").first();Element p=doc.select(""p"").first();Element span=doc.select(""span"").first();Element foo=doc.select(""foo"").first();Element img=doc.select(""img"").first();Elements docChildren=div.children();assertEquals(2,docChildren.size());assertEquals(""<p><a>One</a></p>"",docChildren.get(0).outerHtml());assertEquals(""<p><a>Two</a></p>"",docChildren.get(1).outerHtml());assertEquals(3,div.childNodes().size());assertEquals(""Three"",div.childNodes().get(2).outerHtml());assertEquals(1,p.children().size());assertEquals(""One"",p.children().text());assertEquals(0,span.children().size());assertEquals(1,span.childNodes().size());assertEquals(""Four"",span.childNodes().get(0).outerHtml());assertEquals(0,foo.children().size());assertEquals(0,foo.childNodes().size());assertEquals(0,img.children().size());assertEquals(0,img.childNodes().size());}"
"org.jsoup.nodes.ElementTest.testShadowElementsAreUpdated",0,"@Test public void testShadowElementsAreUpdated(){String html=""<div><p><a>One</a></p><p><a>Two</a></p>Three</div><span>Four</span><foo></foo><img>"";Document doc=Jsoup.parse(html);Element div=doc.select(""div"").first();Elements els=div.children();List<Node> nodes=div.childNodes();assertEquals(2,els.size());assertEquals(3,nodes.size());Element p3=new Element(""p"").text(""P3"");Element p4=new Element(""p"").text(""P4"");div.insertChildren(1,p3);div.insertChildren(3,p4);Elements els2=div.children();assertEquals(2,els.size());assertEquals(4,els2.size());assertEquals(""<p><a>One</a></p>\n"" + ""<p>P3</p>\n"" + ""<p><a>Two</a></p>\n""+ ""<p>P4</p>Three"",div.html());assertEquals(""P3"",els2.get(1).text());assertEquals(""P4"",els2.get(3).text());p3.after(""<span>Another</span"");Elements els3=div.children();assertEquals(5,els3.size());assertEquals(""span"",els3.get(2).tagName());assertEquals(""Another"",els3.get(2).text());assertEquals(""<p><a>One</a></p>\n"" + ""<p>P3</p>\n"" + ""<span>Another</span>\n""+ ""<p><a>Two</a></p>\n""+ ""<p>P4</p>Three"",div.html());}"
"org.jsoup.nodes.ElementTest.classNamesAndAttributeNameIsCaseInsensitive",0,"@Test public void classNamesAndAttributeNameIsCaseInsensitive(){String html=""<p Class='SomeText AnotherText'>One</p>"";Document doc=Jsoup.parse(html);Element p=doc.select(""p"").first();assertEquals(""SomeText AnotherText"",p.className());assertTrue(p.classNames().contains(""SomeText""));assertTrue(p.classNames().contains(""AnotherText""));assertTrue(p.hasClass(""SomeText""));assertTrue(p.hasClass(""sometext""));assertTrue(p.hasClass(""AnotherText""));assertTrue(p.hasClass(""anothertext""));Element p1=doc.select("".SomeText"").first();Element p2=doc.select("".sometext"").first();Element p3=doc.select(""[class=SomeText AnotherText]"").first();Element p4=doc.select(""[Class=SomeText AnotherText]"").first();Element p5=doc.select(""[class=sometext anothertext]"").first();Element p6=doc.select(""[class=SomeText AnotherText]"").first();Element p7=doc.select(""[class^=sometext]"").first();Element p8=doc.select(""[class$=nothertext]"").first();Element p9=doc.select(""[class^=sometext]"").first();Element p10=doc.select(""[class$=AnotherText]"").first();assertEquals(""One"",p1.text());assertEquals(p1,p2);assertEquals(p1,p3);assertEquals(p1,p4);assertEquals(p1,p5);assertEquals(p1,p6);assertEquals(p1,p7);assertEquals(p1,p8);assertEquals(p1,p9);assertEquals(p1,p10);}"
"org.jsoup.nodes.ElementTest.testAppendTo",0,"@Test public void testAppendTo(){String parentHtml=""<div class='a'></div>"";String childHtml=""<div class='b'></div><p>Two</p>"";Document parentDoc=Jsoup.parse(parentHtml);Element parent=parentDoc.body();Document childDoc=Jsoup.parse(childHtml);Element div=childDoc.select(""div"").first();Element p=childDoc.select(""p"").first();Element appendTo1=div.appendTo(parent);assertEquals(div,appendTo1);Element appendTo2=p.appendTo(div);assertEquals(p,appendTo2);assertEquals(""<div class=\""a\""></div>\n<div class=\""b\"">\n <p>Two</p>\n</div>"",parentDoc.body().html());assertEquals("""",childDoc.body().html());}"
"org.jsoup.nodes.ElementTest.testNormalizesNbspInText",0,"@Test public void testNormalizesNbspInText(){String escaped=""You can't always get what you&nbsp;want."";String withNbsp=""You can't always get what you want."";Document doc=Jsoup.parse(""<p>"" + escaped);Element p=doc.select(""p"").first();assertEquals(""You can't always get what you want."",p.text());assertEquals(""<p>"" + escaped + ""</p>"",p.outerHtml());assertEquals(withNbsp,p.textNodes().get(0).getWholeText());assertEquals(160,withNbsp.charAt(29));Element matched=doc.select(""p:contains(get what you want)"").first();assertEquals(""p"",matched.nodeName());assertTrue(matched.is("":containsOwn(get what you want)""));}"
"org.jsoup.nodes.ElementTest.testRemoveBeforeIndex",0,"@Test public void testRemoveBeforeIndex(){Document doc=Jsoup.parse(""<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>"","""");Element body=doc.select(""body"").first();Elements elems=body.select(""p:matchesOwn(XXX)"");Element xElem=elems.first();Elements beforeX=xElem.parent().getElementsByIndexLessThan(xElem.elementSiblingIndex());for(Element p : beforeX){p.remove();}assertEquals(""<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>"",TextUtil.stripNewlines(body.outerHtml()));}"
"org.jsoup.nodes.ElementTest.testRemoveAfterIndex",0,"@Test public void testRemoveAfterIndex(){Document doc2=Jsoup.parse(""<html><body><div><p>before1</p><p>before2</p><p>XXX</p><p>after1</p><p>after2</p></div></body></html>"","""");Element body=doc2.select(""body"").first();Elements elems=body.select(""p:matchesOwn(XXX)"");Element xElem=elems.first();Elements afterX=xElem.parent().getElementsByIndexGreaterThan(xElem.elementSiblingIndex());for(Element p : afterX){p.remove();}assertEquals(""<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>"",TextUtil.stripNewlines(body.outerHtml()));}"
"org.jsoup.nodes.ElementTest.whiteSpaceClassElement",0,"@Test public void whiteSpaceClassElement(){Tag tag=Tag.valueOf(""a"");Attributes attribs=new Attributes();Element el=new Element(tag,"""",attribs);attribs.put(""class"",""abc "");boolean hasClass=el.hasClass(""ab"");assertFalse(hasClass);}"
"org.jsoup.nodes.ElementTest.testNextElementSiblingAfterClone",0,"@Test public void testNextElementSiblingAfterClone(){String html=""<!DOCTYPE html><html lang=\""en\""><head></head><body><div>Initial element</div></body></html>"";String expectedText=""New element"";String cloneExpect=""New element in clone"";Document original=Jsoup.parse(html);Document clone=original.clone();Element originalElement=original.body().child(0);originalElement.after(""<div>"" + expectedText + ""</div>"");Element originalNextElementSibling=originalElement.nextElementSibling();Element originalNextSibling=(Element)originalElement.nextSibling();assertEquals(expectedText,originalNextElementSibling.text());assertEquals(expectedText,originalNextSibling.text());Element cloneElement=clone.body().child(0);cloneElement.after(""<div>"" + cloneExpect + ""</div>"");Element cloneNextElementSibling=cloneElement.nextElementSibling();Element cloneNextSibling=(Element)cloneElement.nextSibling();assertEquals(cloneExpect,cloneNextElementSibling.text());assertEquals(cloneExpect,cloneNextSibling.text());}"
"org.jsoup.nodes.ElementTest.testRemovingEmptyClassAttributeWhenLastClassRemoved",0,"@Test public void testRemovingEmptyClassAttributeWhenLastClassRemoved(){Document doc=Jsoup.parse(""<img class=\""one two\"" />"");Element img=doc.select(""img"").first();img.removeClass(""one"");img.removeClass(""two"");assertFalse(doc.body().html().contains(""class=\""\""""));}"
"org.jsoup.nodes.EntitiesTest.escape",0,"@Test public void escape(){String text=""Hello &<> Å å π 新 there ¾ © »"";String escapedAscii=Entities.escape(text,new OutputSettings().charset(""ascii"").escapeMode(base));String escapedAsciiFull=Entities.escape(text,new OutputSettings().charset(""ascii"").escapeMode(extended));String escapedAsciiXhtml=Entities.escape(text,new OutputSettings().charset(""ascii"").escapeMode(xhtml));String escapedUtfFull=Entities.escape(text,new OutputSettings().charset(""UTF-8"").escapeMode(extended));String escapedUtfMin=Entities.escape(text,new OutputSettings().charset(""UTF-8"").escapeMode(xhtml));assertEquals(""Hello &amp;&lt;&gt;&Aring;&aring;&#x3c0;&#x65b0;there &frac34;&copy;&raquo;"",escapedAscii);assertEquals(""Hello &amp;&lt;&gt;&angst;&aring;&pi;&#x65b0;there &frac34;&copy;&raquo;"",escapedAsciiFull);assertEquals(""Hello &amp;&lt;&gt;&#xc5;&#xe5;&#x3c0;&#x65b0;there &#xbe;&#xa9;&#xbb;"",escapedAsciiXhtml);assertEquals(""Hello &amp;&lt;&gt;Å å π 新 there ¾ © »"",escapedUtfFull);assertEquals(""Hello &amp;&lt;&gt;Å å π 新 there ¾ © »"",escapedUtfMin);assertEquals(text,Entities.unescape(escapedAscii));assertEquals(text,Entities.unescape(escapedAsciiFull));assertEquals(text,Entities.unescape(escapedAsciiXhtml));assertEquals(text,Entities.unescape(escapedUtfFull));assertEquals(text,Entities.unescape(escapedUtfMin));}"
"org.jsoup.nodes.EntitiesTest.escapedSupplemtary",0,"@Test public void escapedSupplemtary(){String text=""\uD835\uDD59"";String escapedAscii=Entities.escape(text,new OutputSettings().charset(""ascii"").escapeMode(base));assertEquals(""&#x1d559;"",escapedAscii);String escapedAsciiFull=Entities.escape(text,new OutputSettings().charset(""ascii"").escapeMode(extended));assertEquals(""&hopf;"",escapedAsciiFull);String escapedUtf=Entities.escape(text,new OutputSettings().charset(""UTF-8"").escapeMode(extended));assertEquals(text,escapedUtf);}"
"org.jsoup.nodes.EntitiesTest.unescapeMultiChars",0,"@Test public void unescapeMultiChars(){String text=""&NestedGreaterGreater;&nGg;&nGt;&nGtv;&Gt;&gg;"";String un=""≫ ⋙̸ ≫⃒ ≫̸ ≫ ≫"";assertEquals(un,Entities.unescape(text));String escaped=Entities.escape(un,new OutputSettings().charset(""ascii"").escapeMode(extended));assertEquals(""&Gt;&Gg;&#x338;&Gt;&#x20d2;&Gt;&#x338;&Gt;&Gt;"",escaped);assertEquals(un,Entities.unescape(escaped));}"
"org.jsoup.nodes.EntitiesTest.xhtml",0,"@Test public void xhtml(){String text=""&amp;&gt;&lt;&quot;"";assertEquals(38,xhtml.codepointForName(""amp""));assertEquals(62,xhtml.codepointForName(""gt""));assertEquals(60,xhtml.codepointForName(""lt""));assertEquals(34,xhtml.codepointForName(""quot""));assertEquals(""amp"",xhtml.nameForCodepoint(38));assertEquals(""gt"",xhtml.nameForCodepoint(62));assertEquals(""lt"",xhtml.nameForCodepoint(60));assertEquals(""quot"",xhtml.nameForCodepoint(34));}"
"org.jsoup.nodes.EntitiesTest.getByName",0,"@Test public void getByName(){assertEquals(""≫⃒"",Entities.getByName(""nGt""));assertEquals(""fj"",Entities.getByName(""fjlig""));assertEquals(""≫"",Entities.getByName(""gg""));assertEquals(""©"",Entities.getByName(""copy""));}"
"org.jsoup.nodes.EntitiesTest.escapeSupplementaryCharacter",0,"@Test public void escapeSupplementaryCharacter(){String text=new String(Character.toChars(135361));String escapedAscii=Entities.escape(text,new OutputSettings().charset(""ascii"").escapeMode(base));assertEquals(""&#x210c1;"",escapedAscii);String escapedUtf=Entities.escape(text,new OutputSettings().charset(""UTF-8"").escapeMode(base));assertEquals(text,escapedUtf);}"
"org.jsoup.nodes.EntitiesTest.notMissingMultis",0,"@Test public void notMissingMultis(){String text=""&nparsl;"";String un=""\u2AFD\u20E5"";assertEquals(un,Entities.unescape(text));}"
"org.jsoup.nodes.EntitiesTest.notMissingSupplementals",0,"@Test public void notMissingSupplementals(){String text=""&npolint;&qfr;"";String un=""⨔ \uD835\uDD2E"";assertEquals(un,Entities.unescape(text));}"
"org.jsoup.nodes.EntitiesTest.unescape",0,"@Test public void unescape(){String text=""Hello &AElig;&amp;&LT&gt;&reg &angst;&angst &#960;&#960 &#x65B0;there &! &frac34;&copy;&COPY;"";assertEquals(""Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©"",Entities.unescape(text));assertEquals(""&0987654321;&unknown"",Entities.unescape(""&0987654321;&unknown""));}"
"org.jsoup.nodes.EntitiesTest.strictUnescape",0,"@Test public void strictUnescape(){String text=""Hello &amp= &amp;"";assertEquals(""Hello &amp= &"",Entities.unescape(text,true));assertEquals(""Hello &= &"",Entities.unescape(text));assertEquals(""Hello &= &"",Entities.unescape(text,false));}"
"org.jsoup.nodes.EntitiesTest.caseSensitive",0,"@Test public void caseSensitive(){String unescaped=""Ü ü & &"";assertEquals(""&Uuml;&uuml;&amp;&amp;"",Entities.escape(unescaped,new OutputSettings().charset(""ascii"").escapeMode(extended)));String escaped=""&Uuml;&uuml;&amp;&AMP"";assertEquals(""Ü ü & &"",Entities.unescape(escaped));}"
"org.jsoup.nodes.EntitiesTest.quoteReplacements",0,"@Test public void quoteReplacements(){String escaped=""&#92;&#36;"";String unescaped=""\\ $"";assertEquals(unescaped,Entities.unescape(escaped));}"
"org.jsoup.nodes.EntitiesTest.letterDigitEntities",0,"@Test public void letterDigitEntities(){String html=""<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>"";Document doc=Jsoup.parse(html);doc.outputSettings().charset(""ascii"");Element p=doc.select(""p"").first();assertEquals(""&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;"",p.html());assertEquals(""¹²³¼½¾"",p.text());doc.outputSettings().charset(""UTF-8"");assertEquals(""¹²³¼½¾"",p.html());}"
"org.jsoup.nodes.EntitiesTest.noSpuriousDecodes",0,"@Test public void noSpuriousDecodes(){String string=""http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2"";assertEquals(string,Entities.unescape(string));}"
"org.jsoup.nodes.EntitiesTest.escapesGtInXmlAttributesButNotInHtml",0,"@Test public void escapesGtInXmlAttributesButNotInHtml(){String docHtml=""<a title='<p>One</p>'>One</a>"";Document doc=Jsoup.parse(docHtml);Element element=doc.select(""a"").first();doc.outputSettings().escapeMode(base);assertEquals(""<a title=\""<p>One</p>\"">One</a>"",element.outerHtml());doc.outputSettings().escapeMode(xhtml);assertEquals(""<a title=\""&lt;p>One&lt;/p>\"">One</a>"",element.outerHtml());}"
"org.jsoup.nodes.AttributeTest.html",0,"@Test public void html(){Attribute attr=new Attribute(""key"",""value &"");assertEquals(""key=\""value &amp;\"""",attr.html());assertEquals(attr.html(),attr.toString());}"
"org.jsoup.nodes.AttributeTest.testWithSupplementaryCharacterInAttributeKeyAndValue",0,"@Test public void testWithSupplementaryCharacterInAttributeKeyAndValue(){String s=new String(Character.toChars(135361));Attribute attr=new Attribute(s,""A"" + s + ""B"");assertEquals(s + ""=\""A"" + s+ ""B\"""",attr.html());assertEquals(attr.html(),attr.toString());}"
"org.jsoup.select.ElementsTest.filter",0,"@Test public void filter(){String h=""<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>"";Document doc=Jsoup.parse(h);Elements els=doc.select("".headline"").select(""p"");assertEquals(2,els.size());assertEquals(""Hello"",els.get(0).text());assertEquals(""There"",els.get(1).text());}"
"org.jsoup.select.ElementsTest.attributes",0,"@Test public void attributes(){String h=""<p title=foo><p title=bar><p class=foo><p class=bar>"";Document doc=Jsoup.parse(h);Elements withTitle=doc.select(""p[title]"");assertEquals(2,withTitle.size());assertTrue(withTitle.hasAttr(""title""));assertFalse(withTitle.hasAttr(""class""));assertEquals(""foo"",withTitle.attr(""title""));withTitle.removeAttr(""title"");assertEquals(2,withTitle.size());assertEquals(0,doc.select(""p[title]"").size());Elements ps=doc.select(""p"").attr(""style"",""classy"");assertEquals(4,ps.size());assertEquals(""classy"",ps.last().attr(""style""));assertEquals(""bar"",ps.last().attr(""class""));}"
"org.jsoup.select.ElementsTest.hasAttr",0,"@Test public void hasAttr(){Document doc=Jsoup.parse(""<p title=foo><p title=bar><p class=foo><p class=bar>"");Elements ps=doc.select(""p"");assertTrue(ps.hasAttr(""class""));assertFalse(ps.hasAttr(""style""));}"
"org.jsoup.select.ElementsTest.hasAbsAttr",0,"@Test public void hasAbsAttr(){Document doc=Jsoup.parse(""<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>"");Elements one=doc.select(""#1"");Elements two=doc.select(""#2"");Elements both=doc.select(""a"");assertFalse(one.hasAttr(""abs:href""));assertTrue(two.hasAttr(""abs:href""));assertTrue(both.hasAttr(""abs:href""));}"
"org.jsoup.select.ElementsTest.attr",0,"@Test public void attr(){Document doc=Jsoup.parse(""<p title=foo><p title=bar><p class=foo><p class=bar>"");String classVal=doc.select(""p"").attr(""class"");assertEquals(""foo"",classVal);}"
"org.jsoup.select.ElementsTest.absAttr",0,"@Test public void absAttr(){Document doc=Jsoup.parse(""<a id=1 href='/foo'>One</a> <a id=2 href='https://jsoup.org'>Two</a>"");Elements one=doc.select(""#1"");Elements two=doc.select(""#2"");Elements both=doc.select(""a"");assertEquals("""",one.attr(""abs:href""));assertEquals(""https://jsoup.org"",two.attr(""abs:href""));assertEquals(""https://jsoup.org"",both.attr(""abs:href""));}"
"org.jsoup.select.ElementsTest.classes",0,"@Test public void classes(){Document doc=Jsoup.parse(""<div><p class='mellow yellow'></p><p class='red green'></p>"");Elements els=doc.select(""p"");assertTrue(els.hasClass(""red""));assertFalse(els.hasClass(""blue""));els.addClass(""blue"");els.removeClass(""yellow"");els.toggleClass(""mellow"");assertEquals(""blue"",els.get(0).className());assertEquals(""red green blue mellow"",els.get(1).className());}"
"org.jsoup.select.ElementsTest.hasClassCaseInsensitive",0,"@Test public void hasClassCaseInsensitive(){Elements els=Jsoup.parse(""<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE"").select(""p"");Element one=els.get(0);Element two=els.get(1);Element thr=els.get(2);assertTrue(one.hasClass(""One""));assertTrue(one.hasClass(""ONE""));assertTrue(two.hasClass(""TWO""));assertTrue(two.hasClass(""Two""));assertTrue(thr.hasClass(""ThreE""));assertTrue(thr.hasClass(""three""));}"
"org.jsoup.select.ElementsTest.text",0,"@Test public void text(){String h=""<div><p>Hello<p>there<p>world</div>"";Document doc=Jsoup.parse(h);assertEquals(""Hello there world"",doc.select(""div > *"").text());}"
"org.jsoup.select.ElementsTest.hasText",0,"@Test public void hasText(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div><p></p></div>"");Elements divs=doc.select(""div"");assertTrue(divs.hasText());assertFalse(doc.select(""div + div"").hasText());}"
"org.jsoup.select.ElementsTest.html",0,"@Test public void html(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div><p>There</p></div>"");Elements divs=doc.select(""div"");assertEquals(""<p>Hello</p>\n<p>There</p>"",divs.html());}"
"org.jsoup.select.ElementsTest.outerHtml",0,"@Test public void outerHtml(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div><p>There</p></div>"");Elements divs=doc.select(""div"");assertEquals(""<div><p>Hello</p></div><div><p>There</p></div>"",TextUtil.stripNewlines(divs.outerHtml()));}"
"org.jsoup.select.ElementsTest.setHtml",0,"@Test public void setHtml(){Document doc=Jsoup.parse(""<p>One</p><p>Two</p><p>Three</p>"");Elements ps=doc.select(""p"");ps.prepend(""<b>Bold</b>"").append(""<i>Ital</i>"");assertEquals(""<p><b>Bold</b>Two<i>Ital</i></p>"",TextUtil.stripNewlines(ps.get(1).outerHtml()));ps.html(""<span>Gone</span>"");assertEquals(""<p><span>Gone</span></p>"",TextUtil.stripNewlines(ps.get(1).outerHtml()));}"
"org.jsoup.select.ElementsTest.val",0,"@Test public void val(){Document doc=Jsoup.parse(""<input value='one' /><textarea>two</textarea>"");Elements els=doc.select(""input,textarea"");assertEquals(2,els.size());assertEquals(""one"",els.val());assertEquals(""two"",els.last().val());els.val(""three"");assertEquals(""three"",els.first().val());assertEquals(""three"",els.last().val());assertEquals(""<textarea>three</textarea>"",els.last().outerHtml());}"
"org.jsoup.select.ElementsTest.before",0,"@Test public void before(){Document doc=Jsoup.parse(""<p>This <a>is</a> <a>jsoup</a>.</p>"");doc.select(""a"").before(""<span>foo</span>"");assertEquals(""<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.select.ElementsTest.after",0,"@Test public void after(){Document doc=Jsoup.parse(""<p>This <a>is</a> <a>jsoup</a>.</p>"");doc.select(""a"").after(""<span>foo</span>"");assertEquals(""<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.select.ElementsTest.wrap",0,"@Test public void wrap(){String h=""<p><b>This</b> is <b>jsoup</b></p>"";Document doc=Jsoup.parse(h);doc.select(""b"").wrap(""<i></i>"");assertEquals(""<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>"",doc.body().html());}"
"org.jsoup.select.ElementsTest.wrapDiv",0,"@Test public void wrapDiv(){String h=""<p><b>This</b> is <b>jsoup</b>.</p> <p>How do you like it?</p>"";Document doc=Jsoup.parse(h);doc.select(""p"").wrap(""<div></div>"");assertEquals(""<div><p><b>This</b> is <b>jsoup</b>.</p></div> <div><p>How do you like it?</p></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.select.ElementsTest.unwrap",0,"@Test public void unwrap(){String h=""<div><font>One</font> <font><a href=\""/\"">Two</a></font></div"";Document doc=Jsoup.parse(h);doc.select(""font"").unwrap();assertEquals(""<div>One <a href=\""/\"">Two</a></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.select.ElementsTest.unwrapP",0,"@Test public void unwrapP(){String h=""<p><a>One</a> Two</p> Three <i>Four</i> <p>Fix <i>Six</i></p>"";Document doc=Jsoup.parse(h);doc.select(""p"").unwrap();assertEquals(""<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.select.ElementsTest.unwrapKeepsSpace",0,"@Test public void unwrapKeepsSpace(){String h=""<p>One <span>two</span> <span>three</span> four</p>"";Document doc=Jsoup.parse(h);doc.select(""span"").unwrap();assertEquals(""<p>One two three four</p>"",doc.body().html());}"
"org.jsoup.select.ElementsTest.empty",0,"@Test public void empty(){Document doc=Jsoup.parse(""<div><p>Hello <b>there</b></p> <p>now!</p></div>"");doc.outputSettings().prettyPrint(false);doc.select(""p"").empty();assertEquals(""<div><p></p> <p></p></div>"",doc.body().html());}"
"org.jsoup.select.ElementsTest.remove",0,"@Test public void remove(){Document doc=Jsoup.parse(""<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>"");doc.outputSettings().prettyPrint(false);doc.select(""p"").remove();assertEquals(""<div> jsoup </div>"",doc.body().html());}"
"org.jsoup.select.ElementsTest.eq",0,"@Test public void eq(){String h=""<p>Hello<p>there<p>world"";Document doc=Jsoup.parse(h);assertEquals(""there"",doc.select(""p"").eq(1).text());assertEquals(""there"",doc.select(""p"").get(1).text());}"
"org.jsoup.select.ElementsTest.is",0,"@Test public void is(){String h=""<p>Hello<p title=foo>there<p>world"";Document doc=Jsoup.parse(h);Elements ps=doc.select(""p"");assertTrue(ps.is(""[title=foo]""));assertFalse(ps.is(""[title=bar]""));}"
"org.jsoup.select.ElementsTest.parents",0,"@Test public void parents(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><p>There</p>"");Elements parents=doc.select(""p"").parents();assertEquals(3,parents.size());assertEquals(""div"",parents.get(0).tagName());assertEquals(""body"",parents.get(1).tagName());assertEquals(""html"",parents.get(2).tagName());}"
"org.jsoup.select.ElementsTest.not",0,"@Test public void not(){Document doc=Jsoup.parse(""<div id=1><p>One</p></div> <div id=2><p><span>Two</span></p></div>"");Elements div1=doc.select(""div"").not("":has(p > span)"");assertEquals(1,div1.size());assertEquals(""1"",div1.first().id());Elements div2=doc.select(""div"").not(""#1"");assertEquals(1,div2.size());assertEquals(""2"",div2.first().id());}"
"org.jsoup.select.ElementsTest.tagNameSet",0,"@Test public void tagNameSet(){Document doc=Jsoup.parse(""<p>Hello <i>there</i> <i>now</i></p>"");doc.select(""i"").tagName(""em"");assertEquals(""<p>Hello <em>there</em> <em>now</em></p>"",doc.body().html());}"
"org.jsoup.select.ElementsTest.traverse",0,"@Test public void traverse(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There</div>"");final StringBuilder accum=new StringBuilder();doc.select(""div"").traverse(new NodeVisitor(){public void head(Node node,int depth){accum.append(""<"" + node.nodeName()+ "">"");}public void tail(Node node,int depth){accum.append(""</"" + node.nodeName()+ "">"");}});assertEquals(""<div><p><#text></#text></p></div><div><#text></#text></div>"",accum.toString());}"
"org.jsoup.select.ElementsTest.forms",0,"@Test public void forms(){Document doc=Jsoup.parse(""<form id=1><input name=q></form><div /><form id=2><input name=f></form>"");Elements els=doc.select(""*"");assertEquals(9,els.size());List<FormElement> forms=els.forms();assertEquals(2,forms.size());assertTrue(forms.get(0)!= null);assertTrue(forms.get(1)!= null);assertEquals(""1"",forms.get(0).id());assertEquals(""2"",forms.get(1).id());}"
"org.jsoup.select.ElementsTest.classWithHyphen",0,"@Test public void classWithHyphen(){Document doc=Jsoup.parse(""<p class='tab-nav'>Check</p>"");Elements els=doc.getElementsByClass(""tab-nav"");assertEquals(1,els.size());assertEquals(""Check"",els.text());}"
"org.jsoup.select.ElementsTest.siblings",0,"@Test public void siblings(){Document doc=Jsoup.parse(""<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12</div>"");Elements els=doc.select(""p:eq(3)"");assertEquals(2,els.size());Elements next=els.next();assertEquals(2,next.size());assertEquals(""5"",next.first().text());assertEquals(""11"",next.last().text());assertEquals(0,els.next(""p:contains(6)"").size());final Elements nextF=els.next(""p:contains(5)"");assertEquals(1,nextF.size());assertEquals(""5"",nextF.first().text());Elements nextA=els.nextAll();assertEquals(4,nextA.size());assertEquals(""5"",nextA.first().text());assertEquals(""12"",nextA.last().text());Elements nextAF=els.nextAll(""p:contains(6)"");assertEquals(1,nextAF.size());assertEquals(""6"",nextAF.first().text());Elements prev=els.prev();assertEquals(2,prev.size());assertEquals(""3"",prev.first().text());assertEquals(""9"",prev.last().text());assertEquals(0,els.prev(""p:contains(1)"").size());final Elements prevF=els.prev(""p:contains(3)"");assertEquals(1,prevF.size());assertEquals(""3"",prevF.first().text());Elements prevA=els.prevAll();assertEquals(6,prevA.size());assertEquals(""3"",prevA.first().text());assertEquals(""7"",prevA.last().text());Elements prevAF=els.prevAll(""p:contains(1)"");assertEquals(1,prevAF.size());assertEquals(""1"",prevAF.first().text());}"
"org.jsoup.select.ElementsTest.eachText",0,"@Test public void eachText(){Document doc=Jsoup.parse(""<div><p>1<p>2<p>3<p>4<p>5<p>6</div><div><p>7<p>8<p>9<p>10<p>11<p>12<p></p></div>"");List<String> divText=doc.select(""div"").eachText();assertEquals(2,divText.size());assertEquals(""1 2 3 4 5 6"",divText.get(0));assertEquals(""7 8 9 10 11 12"",divText.get(1));List<String> pText=doc.select(""p"").eachText();Elements ps=doc.select(""p"");assertEquals(13,ps.size());assertEquals(12,pText.size());assertEquals(""1"",pText.get(0));assertEquals(""2"",pText.get(1));assertEquals(""5"",pText.get(4));assertEquals(""7"",pText.get(6));assertEquals(""12"",pText.get(11));}"
"org.jsoup.select.ElementsTest.eachAttr",0,"@Test public void eachAttr(){Document doc=Jsoup.parse(""<div><a href='/foo'>1</a><a href='http://example.com/bar'>2</a><a href=''>3</a><a>4</a>"",""http://example.com"");List<String> hrefAttrs=doc.select(""a"").eachAttr(""href"");assertEquals(3,hrefAttrs.size());assertEquals(""/foo"",hrefAttrs.get(0));assertEquals(""http://example.com/bar"",hrefAttrs.get(1));assertEquals("""",hrefAttrs.get(2));assertEquals(4,doc.select(""a"").size());List<String> absAttrs=doc.select(""a"").eachAttr(""abs:href"");assertEquals(3,absAttrs.size());assertEquals(3,absAttrs.size());assertEquals(""http://example.com/foo"",absAttrs.get(0));assertEquals(""http://example.com/bar"",absAttrs.get(1));assertEquals(""http://example.com"",absAttrs.get(2));}"
"org.jsoup.select.TraversorTest.filterVisit",0,"@Test public void filterVisit(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There</div>"");final StringBuilder accum=new StringBuilder();NodeTraversor.filter(new NodeFilter(){public FilterResult head(Node node,int depth){accum.append(""<"" + node.nodeName()+ "">"");return FilterResult.CONTINUE;}public FilterResult tail(Node node,int depth){accum.append(""</"" + node.nodeName()+ "">"");return FilterResult.CONTINUE;}},doc.select(""div""));assertEquals(""<div><p><#text></#text></p></div><div><#text></#text></div>"",accum.toString());}"
"org.jsoup.select.TraversorTest.filterSkipChildren",0,"@Test public void filterSkipChildren(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There</div>"");final StringBuilder accum=new StringBuilder();NodeTraversor.filter(new NodeFilter(){public FilterResult head(Node node,int depth){accum.append(""<"" + node.nodeName()+ "">"");return (""p"".equals(node.nodeName()))? FilterResult.SKIP_CHILDREN : FilterResult.CONTINUE;}public FilterResult tail(Node node,int depth){accum.append(""</"" + node.nodeName()+ "">"");return FilterResult.CONTINUE;}},doc.select(""div""));assertEquals(""<div><p></p></div><div><#text></#text></div>"",accum.toString());}"
"org.jsoup.select.TraversorTest.filterSkipEntirely",0,"@Test public void filterSkipEntirely(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There</div>"");final StringBuilder accum=new StringBuilder();NodeTraversor.filter(new NodeFilter(){public FilterResult head(Node node,int depth){if (""p"".equals(node.nodeName()))return FilterResult.SKIP_ENTIRELY;accum.append(""<"" + node.nodeName()+ "">"");return FilterResult.CONTINUE;}public FilterResult tail(Node node,int depth){accum.append(""</"" + node.nodeName()+ "">"");return FilterResult.CONTINUE;}},doc.select(""div""));assertEquals(""<div></div><div><#text></#text></div>"",accum.toString());}"
"org.jsoup.select.TraversorTest.filterRemove",0,"@Test public void filterRemove(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There be <b>bold</b></div>"");NodeTraversor.filter(new NodeFilter(){public FilterResult head(Node node,int depth){return (""p"".equals(node.nodeName()))? FilterResult.REMOVE : FilterResult.CONTINUE;}public FilterResult tail(Node node,int depth){return (""b"".equals(node.nodeName()))? FilterResult.REMOVE : FilterResult.CONTINUE;}},doc.select(""div""));assertEquals(""<div></div>\n<div>\n There be \n</div>"",doc.select(""body"").html());}"
"org.jsoup.select.TraversorTest.filterStop",0,"@Test public void filterStop(){Document doc=Jsoup.parse(""<div><p>Hello</p></div><div>There</div>"");final StringBuilder accum=new StringBuilder();NodeTraversor.filter(new NodeFilter(){public FilterResult head(Node node,int depth){accum.append(""<"" + node.nodeName()+ "">"");return FilterResult.CONTINUE;}public FilterResult tail(Node node,int depth){accum.append(""</"" + node.nodeName()+ "">"");return (""p"".equals(node.nodeName()))? FilterResult.STOP : FilterResult.CONTINUE;}},doc.select(""div""));assertEquals(""<div><p><#text></#text></p>"",accum.toString());}"
"org.jsoup.integration.ConnectTest.canConnectToLocalServer",0,"@Test public void canConnectToLocalServer()throws IOException {String url=HelloServlet.Url;Document doc=Jsoup.connect(url).get();Element p=doc.selectFirst(""p"");assertEquals(""Hello,World!"",p.text());}"
"org.jsoup.integration.ConnectTest.fetchURl",0,"@Test public void fetchURl()throws IOException {Document doc=Jsoup.parse(new URL(echoUrl),10 * 1000);assertTrue(doc.title().contains(""Environment Variables""));}"
"org.jsoup.integration.ConnectTest.fetchURIWithWihtespace",0,"@Test public void fetchURIWithWihtespace()throws IOException {Connection con=Jsoup.connect(echoUrl + ""#with whitespaces"");Document doc=con.get();assertTrue(doc.title().contains(""Environment Variables""));}"
"org.jsoup.integration.ConnectTest.exceptOnUnsupportedProtocol",0,"@Test public void exceptOnUnsupportedProtocol(){String url=""file://etc/passwd"";boolean threw=false;try {Document doc=Jsoup.connect(url).get();}catch(MalformedURLException e){threw=true;assertEquals(""java.net.MalformedURLException: Only http & https protocols supported"",e.toString());}catch(IOException e){}assertTrue(threw);}"
"org.jsoup.integration.ConnectTest.doesPost",0,"@Test public void doesPost()throws IOException {Document doc=Jsoup.connect(echoUrl).data(""uname"",""Jsoup"",""uname"",""Jonathan"",""百"",""度一下"").cookie(""auth"",""token"").post();assertEquals(""POST"",ihVal(""Method"",doc));assertEquals(""gzip"",ihVal(""Accept-Encoding"",doc));assertEquals(""auth=token"",ihVal(""Cookie"",doc));assertEquals(""度一下"",ihVal(""百"",doc));assertEquals(""Jsoup,Jonathan"",ihVal(""uname"",doc));assertEquals(""application/x-www-form-urlencoded;charset=UTF-8"",ihVal(""Content-Type"",doc));}"
"org.jsoup.integration.ConnectTest.sendsRequestBodyJsonWithData",0,"@Test public void sendsRequestBodyJsonWithData()throws IOException {final String body=""{key:value}"";Document doc=Jsoup.connect(echoUrl).requestBody(body).header(""Content-Type"",""application/json"").userAgent(browserUa).data(""foo"",""true"").post();assertEquals(""POST"",ihVal(""Method"",doc));assertEquals(""application/json"",ihVal(""Content-Type"",doc));assertEquals(""foo=true"",ihVal(""Query String"",doc));assertEquals(body,ihVal(""Post Data"",doc));}"
"org.jsoup.integration.ConnectTest.sendsRequestBodyJsonWithoutData",0,"@Test public void sendsRequestBodyJsonWithoutData()throws IOException {final String body=""{key:value}"";Document doc=Jsoup.connect(echoUrl).requestBody(body).header(""Content-Type"",""application/json"").userAgent(browserUa).post();assertEquals(""POST"",ihVal(""Method"",doc));assertEquals(""application/json"",ihVal(""Content-Type"",doc));assertEquals(body,ihVal(""Post Data"",doc));}"
"org.jsoup.integration.ConnectTest.sendsRequestBody",0,"@Test public void sendsRequestBody()throws IOException {final String body=""{key:value}"";Document doc=Jsoup.connect(echoUrl).requestBody(body).header(""Content-Type"",""text/plain"").userAgent(browserUa).post();assertEquals(""POST"",ihVal(""Method"",doc));assertEquals(""text/plain"",ihVal(""Content-Type"",doc));assertEquals(body,ihVal(""Post Data"",doc));}"
"org.jsoup.integration.ConnectTest.sendsRequestBodyWithUrlParams",0,"@Test public void sendsRequestBodyWithUrlParams()throws IOException {final String body=""{key:value}"";Document doc=Jsoup.connect(echoUrl).requestBody(body).data(""uname"",""Jsoup"",""uname"",""Jonathan"",""百"",""度一下"").header(""Content-Type"",""text/plain"").userAgent(browserUa).post();assertEquals(""POST"",ihVal(""Method"",doc));assertEquals(""uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B"",ihVal(""Query String"",doc));assertEquals(body,ihVal(""Post Data"",doc));}"
"org.jsoup.integration.ConnectTest.doesGet",0,"@Test public void doesGet()throws IOException {Connection con=Jsoup.connect(echoUrl + ""?what=the"").userAgent(""Mozilla"").referrer(""http://example.com"").data(""what"",""about & me?"");Document doc=con.get();assertEquals(""what=the&what=about+%26+me%3F"",ihVal(""Query String"",doc));assertEquals(""the,about & me?"",ihVal(""what"",doc));assertEquals(""Mozilla"",ihVal(""User-Agent"",doc));assertEquals(""http://example.com"",ihVal(""Referer"",doc));}"
"org.jsoup.integration.ConnectTest.doesPut",0,"@Test public void doesPut()throws IOException {Connection.Response res=Jsoup.connect(echoUrl).data(""uname"",""Jsoup"",""uname"",""Jonathan"",""百"",""度一下"").cookie(""auth"",""token"").method(Connection.Method.PUT).execute();Document doc=res.parse();assertEquals(""PUT"",ihVal(""Method"",doc));assertEquals(""gzip"",ihVal(""Accept-Encoding"",doc));assertEquals(""auth=token"",ihVal(""Cookie"",doc));}"
"org.jsoup.integration.ConnectTest.canInterruptBodyStringRead",0,"@Ignore @Test public void canInterruptBodyStringRead()throws IOException,InterruptedException {final String[]body=new String[1];Thread runner=new Thread(new Runnable(){public void run(){try {Connection.Response res=Jsoup.connect(SlowRider.Url).timeout(15 * 1000).execute();body[0]=res.body();}catch(IOException e){throw new RuntimeException(e);}}});runner.start();Thread.sleep(1000 * 3);runner.interrupt();assertTrue(runner.isInterrupted());runner.join();assertTrue(body[0].length()> 0);assertTrue(body[0].contains(""<p>Are you still there?""));}"
"org.jsoup.integration.ConnectTest.canInterruptDocumentRead",0,"@Ignore @Test public void canInterruptDocumentRead()throws IOException,InterruptedException {final String[]body=new String[1];Thread runner=new Thread(new Runnable(){public void run(){try {Connection.Response res=Jsoup.connect(SlowRider.Url).timeout(15 * 1000).execute();body[0]=res.parse().text();}catch(IOException e){throw new RuntimeException(e);}}});runner.start();Thread.sleep(1000 * 3);runner.interrupt();assertTrue(runner.isInterrupted());runner.join();assertTrue(body[0].length()== 0);}"
"org.jsoup.integration.ConnectTest.totalTimeout",0,"@Ignore @Test public void totalTimeout()throws IOException {int timeout=3 * 1000;long start=System.currentTimeMillis();boolean threw=false;try {Jsoup.connect(SlowRider.Url).timeout(timeout).get();}catch(SocketTimeoutException e){long end=System.currentTimeMillis();long took=end - start;assertTrue((""Time taken was "" + took),took > timeout);assertTrue((""Time taken was "" + took),took < timeout * 1.2);threw=true;}assertTrue(threw);}"
"org.jsoup.integration.ConnectTest.slowReadOk",0,"@Ignore @Test public void slowReadOk()throws IOException {Document doc=Jsoup.connect(SlowRider.Url).data(SlowRider.MaxTimeParam,""2000"").get();Element h1=doc.selectFirst(""h1"");assertEquals(""outatime"",h1.text());}"
"org.jsoup.integration.ConnectTest.infiniteReadSupported",0,"@Ignore @Test public void infiniteReadSupported()throws IOException {Document doc=Jsoup.connect(SlowRider.Url).timeout(0).data(SlowRider.MaxTimeParam,""2000"").get();Element h1=doc.selectFirst(""h1"");assertEquals(""outatime"",h1.text());}"
"org.jsoup.integration.ConnectTest.postFiles",0,"/** * Tests upload of content to a remote service.*/@Test public void postFiles()throws IOException {File thumb=ParseTest.getFile(""/htmltests/thumb.jpg"");File html=ParseTest.getFile(""/htmltests/google-ipod.html"");Document res=Jsoup.connect(EchoServlet.Url).data(""firstPart"",thumb.getName(),new FileInputStream(thumb),""image/jpeg"").data(""secondPart"",html.getName(),new FileInputStream(html)).post();assertEquals(""2"",ihVal(""Parts"",res));assertEquals(""application/octet-stream"",ihVal(""Part secondPart ContentType"",res));assertEquals(""secondPart"",ihVal(""Part secondPart Name"",res));assertEquals(""google-ipod.html"",ihVal(""Part secondPart Filename"",res));assertEquals(""43963"",ihVal(""Part secondPart Size"",res));assertEquals(""image/jpeg"",ihVal(""Part firstPart ContentType"",res));assertEquals(""firstPart"",ihVal(""Part firstPart Name"",res));assertEquals(""thumb.jpg"",ihVal(""Part firstPart Filename"",res));assertEquals(""1052"",ihVal(""Part firstPart Size"",res));}"
"org.jsoup.integration.ConnectTest.multipleParsesOkAfterBufferUp",0,"@Test public void multipleParsesOkAfterBufferUp()throws IOException {Connection.Response res=Jsoup.connect(echoUrl).execute().bufferUp();Document doc=res.parse();assertTrue(doc.title().contains(""Environment""));Document doc2=res.parse();assertTrue(doc2.title().contains(""Environment""));}"
"org.jsoup.integration.ConnectTest.bodyAfterParseThrowsValidationError",0,"@Test(expected=IllegalArgumentException.class)public void bodyAfterParseThrowsValidationError()throws IOException {Connection.Response res=Jsoup.connect(echoUrl).execute();Document doc=res.parse();String body=res.body();}"
"org.jsoup.integration.ConnectTest.bodyAndBytesAvailableBeforeParse",0,"@Test public void bodyAndBytesAvailableBeforeParse()throws IOException {Connection.Response res=Jsoup.connect(echoUrl).execute();String body=res.body();assertTrue(body.contains(""Environment""));byte[]bytes=res.bodyAsBytes();assertTrue(bytes.length > 100);Document doc=res.parse();assertTrue(doc.title().contains(""Environment""));}"
"org.jsoup.integration.ConnectTest.parseParseThrowsValidates",0,"@Test(expected=IllegalArgumentException.class)public void parseParseThrowsValidates()throws IOException {Connection.Response res=Jsoup.connect(echoUrl).execute();Document doc=res.parse();assertTrue(doc.title().contains(""Environment""));Document doc2=res.parse();}"
"org.jsoup.integration.ConnectTest.multiCookieSet",0,"@Test public void multiCookieSet(){}"
"org.jsoup.nodes.FormElementTest.hasAssociatedControls",0,"@Test public void hasAssociatedControls(){String html=""<form id=1><button id=1><fieldset id=2 /><input id=3><keygen id=4><object id=5><output id=6>"" + ""<select id=7><option></select><textarea id=8><p id=9>"";Document doc=Jsoup.parse(html);FormElement form=(FormElement)doc.select(""form"").first();assertEquals(8,form.elements().size());}"
"org.jsoup.nodes.FormElementTest.createsFormData",0,"@Test public void createsFormData(){String html=""<form><input name='one' value='two'><select name='three'><option value='not'>"" + ""<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>"" + ""<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>""+ ""<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>""+ ""<input name='ten' value='text' disabled>""+ ""</form>"";Document doc=Jsoup.parse(html);FormElement form=(FormElement)doc.select(""form"").first();List<Connection.KeyVal> data=form.formData();assertEquals(6,data.size());assertEquals(""one=two"",data.get(0).toString());assertEquals(""three=four"",data.get(1).toString());assertEquals(""three=five"",data.get(2).toString());assertEquals(""six=seven"",data.get(3).toString());assertEquals(""seven=on"",data.get(4).toString());assertEquals(""eight=on"",data.get(5).toString());}"
"org.jsoup.nodes.FormElementTest.createsSubmitableConnection",0,"@Test public void createsSubmitableConnection(){String html=""<form action='/search'><input name='q'></form>"";Document doc=Jsoup.parse(html,""http://example.com/"");doc.select(""[name=q]"").attr(""value"",""jsoup"");FormElement form=((FormElement)doc.select(""form"").first());Connection con=form.submit();assertEquals(Connection.Method.GET,con.request().method());assertEquals(""http://example.com/search"",con.request().url().toExternalForm());List<Connection.KeyVal> dataList=(List<Connection.KeyVal>)con.request().data();assertEquals(""q=jsoup"",dataList.get(0).toString());doc.select(""form"").attr(""method"",""post"");Connection con2=form.submit();assertEquals(Connection.Method.POST,con2.request().method());}"
"org.jsoup.nodes.FormElementTest.actionWithNoValue",0,"@Test public void actionWithNoValue(){String html=""<form><input name='q'></form>"";Document doc=Jsoup.parse(html,""http://example.com/"");FormElement form=((FormElement)doc.select(""form"").first());Connection con=form.submit();assertEquals(""http://example.com/"",con.request().url().toExternalForm());}"
"org.jsoup.nodes.FormElementTest.actionWithNoBaseUri",0,"@Test public void actionWithNoBaseUri(){String html=""<form><input name='q'></form>"";Document doc=Jsoup.parse(html);FormElement form=((FormElement)doc.select(""form"").first());boolean threw=false;try {Connection con=form.submit();}catch(IllegalArgumentException e){threw=true;assertEquals(""Could not determine a form action URL for submit. Ensure you set a base URI when parsing."",e.getMessage());}assertTrue(threw);}"
"org.jsoup.nodes.FormElementTest.formsAddedAfterParseAreFormElements",0,"@Test public void formsAddedAfterParseAreFormElements(){Document doc=Jsoup.parse(""<body />"");doc.body().html(""<form action='http://example.com/search'><input name='q' value='search'>"");Element formEl=doc.select(""form"").first();assertTrue(formEl instanceof FormElement);FormElement form=(FormElement)formEl;assertEquals(1,form.elements().size());}"
"org.jsoup.nodes.FormElementTest.controlsAddedAfterParseAreLinkedWithForms",0,"@Test public void controlsAddedAfterParseAreLinkedWithForms(){Document doc=Jsoup.parse(""<body />"");doc.body().html(""<form />"");Element formEl=doc.select(""form"").first();formEl.append(""<input name=foo value=bar>"");assertTrue(formEl instanceof FormElement);FormElement form=(FormElement)formEl;assertEquals(1,form.elements().size());List<Connection.KeyVal> data=form.formData();assertEquals(""foo=bar"",data.get(0).toString());}"
"org.jsoup.nodes.FormElementTest.usesOnForCheckboxValueIfNoValueSet",0,"@Test public void usesOnForCheckboxValueIfNoValueSet(){Document doc=Jsoup.parse(""<form><input type=checkbox checked name=foo></form>"");FormElement form=(FormElement)doc.select(""form"").first();List<Connection.KeyVal> data=form.formData();assertEquals(""on"",data.get(0).value());assertEquals(""foo"",data.get(0).key());}"
"org.jsoup.nodes.FormElementTest.adoptedFormsRetainInputs",0,"@Test public void adoptedFormsRetainInputs(){String html=""<html>\n"" + ""<body>  \n"" + ""  <table>\n""+ ""      <form action=\""/hello.php\"" method=\""post\"">\n""+ ""      <tr><td>User:</td><td> <input type=\""text\"" name=\""user\"" /></td></tr>\n""+ ""      <tr><td>Password:</td><td> <input type=\""password\"" name=\""pass\"" /></td></tr>\n""+ ""      <tr><td><input type=\""submit\"" name=\""login\"" value=\""login\"" /></td></tr>\n""+ ""   </form>\n""+ ""  </table>\n""+ ""</body>\n""+ ""</html>"";Document doc=Jsoup.parse(html);FormElement form=(FormElement)doc.select(""form"").first();List<Connection.KeyVal> data=form.formData();assertEquals(3,data.size());assertEquals(""user"",data.get(0).key());assertEquals(""pass"",data.get(1).key());assertEquals(""login"",data.get(2).key());}"
"org.jsoup.nodes.FormElementTest.removeFormElement",1,"@Test public void removeFormElement(){String html=""<html>\n"" + ""  <body> \n"" + ""      <form action=\""/hello.php\"" method=\""post\"">\n""+ ""      User:<input type=\""text\"" name=\""user\"" />\n""+ ""      Password:<input type=\""password\"" name=\""pass\"" />\n""+ ""      <input type=\""submit\"" name=\""login\"" value=\""login\"" />\n""+ ""   </form>\n""+ ""  </body>\n""+ ""</html>  "";Document doc=Jsoup.parse(html);FormElement form=(FormElement)doc.selectFirst(""form"");Element pass=form.selectFirst(""input[name=pass]"");pass.remove();List<Connection.KeyVal> data=form.formData();assertEquals(2,data.size());assertEquals(""user"",data.get(0).key());assertEquals(""login"",data.get(1).key());assertEquals(null,doc.selectFirst(""input[name=pass]""));}"
"org.jsoup.parser.HtmlParserTest.parsesSimpleDocument",0,"@Test public void parsesSimpleDocument(){String html=""<html><head><title>First!</title></head><body><p>First post! <img src=\""foo.png\"" /></p></body></html>"";Document doc=Jsoup.parse(html);Element p=doc.body().child(0);assertEquals(""p"",p.tagName());Element img=p.child(0);assertEquals(""foo.png"",img.attr(""src""));assertEquals(""img"",img.tagName());}"
"org.jsoup.parser.HtmlParserTest.parsesRoughAttributes",0,"@Test public void parsesRoughAttributes(){String html=""<html><head><title>First!</title></head><body><p class=\""foo > bar\"">First post! <img src=\""foo.png\"" /></p></body></html>"";Document doc=Jsoup.parse(html);Element p=doc.body().child(0);assertEquals(""p"",p.tagName());assertEquals(""foo > bar"",p.attr(""class""));}"
"org.jsoup.parser.HtmlParserTest.parsesQuiteRoughAttributes",0,"@Test public void parsesQuiteRoughAttributes(){String html=""<p =a>One<a <p>Something</p>Else"";Document doc=Jsoup.parse(html);assertEquals(""<p =a>One<a <p>Something</a></p>\n"" + ""<a <p>Else</a>"",doc.body().html());doc=Jsoup.parse(""<p .....>"");assertEquals(""<p .....></p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.parsesComments",0,"@Test public void parsesComments(){String html=""<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>"";Document doc=Jsoup.parse(html);Element body=doc.body();Comment comment=(Comment)body.childNode(1);assertEquals("" <table><tr><td></table> "",comment.getData());Element p=body.child(1);TextNode text=(TextNode)p.childNode(0);assertEquals(""Hello"",text.getWholeText());}"
"org.jsoup.parser.HtmlParserTest.parsesUnterminatedComments",0,"@Test public void parsesUnterminatedComments(){String html=""<p>Hello<!-- <tr><td>"";Document doc=Jsoup.parse(html);Element p=doc.getElementsByTag(""p"").get(0);assertEquals(""Hello"",p.text());TextNode text=(TextNode)p.childNode(0);assertEquals(""Hello"",text.getWholeText());Comment comment=(Comment)p.childNode(1);assertEquals("" <tr><td>"",comment.getData());}"
"org.jsoup.parser.HtmlParserTest.dropsUnterminatedTag",0,"@Test public void dropsUnterminatedTag(){String h1=""<p"";Document doc=Jsoup.parse(h1);assertEquals(0,doc.getElementsByTag(""p"").size());assertEquals("""",doc.text());String h2=""<div id=1<p id='2'"";doc=Jsoup.parse(h2);assertEquals("""",doc.text());}"
"org.jsoup.parser.HtmlParserTest.dropsUnterminatedAttribute",0,"@Test public void dropsUnterminatedAttribute(){String h1=""<p id=\""foo"";Document doc=Jsoup.parse(h1);assertEquals("""",doc.text());}"
"org.jsoup.parser.HtmlParserTest.parsesUnterminatedTextarea",0,"@Test public void parsesUnterminatedTextarea(){Document doc=Jsoup.parse(""<body><p><textarea>one<p>two"");Element t=doc.select(""textarea"").first();assertEquals(""one"",t.text());assertEquals(""two"",doc.select(""p"").get(1).text());}"
"org.jsoup.parser.HtmlParserTest.parsesUnterminatedOption",0,"@Test public void parsesUnterminatedOption(){Document doc=Jsoup.parse(""<body><p><select><option>One<option>Two</p><p>Three</p>"");Elements options=doc.select(""option"");assertEquals(2,options.size());assertEquals(""One"",options.first().text());assertEquals(""TwoThree"",options.last().text());}"
"org.jsoup.parser.HtmlParserTest.testSelectWithOption",0,"@Test public void testSelectWithOption(){Parser parser=Parser.htmlParser();parser.setTrackErrors(10);Document document=parser.parseInput(""<select><option>Option 1</option></select>"",""http://jsoup.org"");assertEquals(0,parser.getErrors().size());}"
"org.jsoup.parser.HtmlParserTest.testSpaceAfterTag",0,"@Test public void testSpaceAfterTag(){Document doc=Jsoup.parse(""<div > <a name=\""top\""></a ><p id=1 >Hello</p></div>"");assertEquals(""<div> <a name=\""top\""></a><p id=\""1\"">Hello</p></div>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.createsDocumentStructure",0,"@Test public void createsDocumentStructure(){String html=""<meta name=keywords /><link rel=stylesheet /><title>jsoup</title><p>Hello world</p>"";Document doc=Jsoup.parse(html);Element head=doc.head();Element body=doc.body();assertEquals(1,doc.children().size());assertEquals(2,doc.child(0).children().size());assertEquals(3,head.children().size());assertEquals(1,body.children().size());assertEquals(""keywords"",head.getElementsByTag(""meta"").get(0).attr(""name""));assertEquals(0,body.getElementsByTag(""meta"").size());assertEquals(""jsoup"",doc.title());assertEquals(""Hello world"",body.text());assertEquals(""Hello world"",body.children().get(0).text());}"
"org.jsoup.parser.HtmlParserTest.createsStructureFromBodySnippet",0,"@Test public void createsStructureFromBodySnippet(){String html=""foo <b>bar</b> baz"";Document doc=Jsoup.parse(html);assertEquals(""foo bar baz"",doc.text());}"
"org.jsoup.parser.HtmlParserTest.handlesEscapedData",0,"@Test public void handlesEscapedData(){String html=""<div title='Surf &amp;Turf'>Reef &amp;Beef</div>"";Document doc=Jsoup.parse(html);Element div=doc.getElementsByTag(""div"").get(0);assertEquals(""Surf & Turf"",div.attr(""title""));assertEquals(""Reef & Beef"",div.text());}"
"org.jsoup.parser.HtmlParserTest.handlesDataOnlyTags",0,"@Test public void handlesDataOnlyTags(){String t=""<style>font-family: bold</style>"";List<Element> tels=Jsoup.parse(t).getElementsByTag(""style"");assertEquals(""font-family: bold"",tels.get(0).data());assertEquals("""",tels.get(0).text());String s=""<p>Hello</p><script>obj.insert('<a rel=\""none\"" />');\ni++;</script><p>There</p>"";Document doc=Jsoup.parse(s);assertEquals(""Hello There"",doc.text());assertEquals(""obj.insert('<a rel=\""none\"" />');\ni++;"",doc.data());}"
"org.jsoup.parser.HtmlParserTest.handlesTextAfterData",0,"@Test public void handlesTextAfterData(){String h=""<html><body>pre <script>inner</script> aft</body></html>"";Document doc=Jsoup.parse(h);assertEquals(""<html><head></head><body>pre <script>inner</script> aft</body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.handlesTextArea",0,"@Test public void handlesTextArea(){Document doc=Jsoup.parse(""<textarea>Hello</textarea>"");Elements els=doc.select(""textarea"");assertEquals(""Hello"",els.text());assertEquals(""Hello"",els.val());}"
"org.jsoup.parser.HtmlParserTest.preservesSpaceInTextArea",0,"@Test public void preservesSpaceInTextArea(){Document doc=Jsoup.parse(""<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>"");String expect=""One\n\tTwo\n\tThree"";Element el=doc.select(""textarea"").first();assertEquals(expect,el.text());assertEquals(expect,el.val());assertEquals(expect,el.html());assertEquals(""<textarea>\n\t"" + expect + ""\n</textarea>"",el.outerHtml());}"
"org.jsoup.parser.HtmlParserTest.preservesSpaceInScript",0,"@Test public void preservesSpaceInScript(){Document doc=Jsoup.parse(""<script>\nOne\n\tTwo\n\tThree\n</script>"");String expect=""\nOne\n\tTwo\n\tThree\n"";Element el=doc.select(""script"").first();assertEquals(expect,el.data());assertEquals(""One\n\tTwo\n\tThree"",el.html());assertEquals(""<script>"" + expect + ""</script>"",el.outerHtml());}"
"org.jsoup.parser.HtmlParserTest.doesNotCreateImplicitLists",0,"@Test public void doesNotCreateImplicitLists(){String h=""<li>Point one<li>Point two"";Document doc=Jsoup.parse(h);Elements ol=doc.select(""ul"");assertEquals(0,ol.size());Elements lis=doc.select(""li"");assertEquals(2,lis.size());assertEquals(""body"",lis.first().parent().tagName());String h2=""<ol><li><p>Point the first<li><p>Point the second"";Document doc2=Jsoup.parse(h2);assertEquals(0,doc2.select(""ul"").size());assertEquals(1,doc2.select(""ol"").size());assertEquals(2,doc2.select(""ol li"").size());assertEquals(2,doc2.select(""ol li p"").size());assertEquals(1,doc2.select(""ol li"").get(0).children().size());}"
"org.jsoup.parser.HtmlParserTest.discardsNakedTds",0,"@Test public void discardsNakedTds(){String h=""<td>Hello<td><p>There<p>now"";Document doc=Jsoup.parse(h);assertEquals(""Hello<p>There</p><p>now</p>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesNestedImplicitTable",0,"@Test public void handlesNestedImplicitTable(){Document doc=Jsoup.parse(""<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>"");assertEquals(""<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesWhatWgExpensesTableExample",0,"@Test public void handlesWhatWgExpensesTableExample(){Document doc=Jsoup.parse(""<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling,general,and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>"");assertEquals(""<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\""rowgroup\""> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\""row\""> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\""rowgroup\""> Selling,general,and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\""row\""> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesTbodyTable",0,"@Test public void handlesTbodyTable(){Document doc=Jsoup.parse(""<html><head></head><body><table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table></body></html>"");assertEquals(""<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesImplicitCaptionClose",0,"@Test public void handlesImplicitCaptionClose(){Document doc=Jsoup.parse(""<table><caption>A caption<td>One<td>Two"");assertEquals(""<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.noTableDirectInTable",0,"@Test public void noTableDirectInTable(){Document doc=Jsoup.parse(""<table> <td>One <td><table><td>Two</table> <table><td>Three"");assertEquals(""<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.ignoresDupeEndTrTag",0,"@Test public void ignoresDupeEndTrTag(){Document doc=Jsoup.parse(""<table><tr><td>One</td><td><table><tr><td>Two</td></tr></tr></table></td><td>Three</td></tr></table>"");assertEquals(""<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesBaseTags",0,"@Test public void handlesBaseTags(){String h=""<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>"";Document doc=Jsoup.parse(h,""http://foo/"");assertEquals(""http://foo/2/"",doc.baseUri());Elements anchors=doc.getElementsByTag(""a"");assertEquals(3,anchors.size());assertEquals(""http://foo/2/"",anchors.get(0).baseUri());assertEquals(""http://foo/2/"",anchors.get(1).baseUri());assertEquals(""http://foo/2/"",anchors.get(2).baseUri());assertEquals(""http://foo/2/1"",anchors.get(0).absUrl(""href""));assertEquals(""http://foo/2/3"",anchors.get(1).absUrl(""href""));assertEquals(""http://foo/4"",anchors.get(2).absUrl(""href""));}"
"org.jsoup.parser.HtmlParserTest.handlesProtocolRelativeUrl",0,"@Test public void handlesProtocolRelativeUrl(){String base=""https://example.com/"";String html=""<img src='//example.net/img.jpg'>"";Document doc=Jsoup.parse(html,base);Element el=doc.select(""img"").first();assertEquals(""https://example.net/img.jpg"",el.absUrl(""src""));}"
"org.jsoup.parser.HtmlParserTest.handlesCdata",0,"@Test public void handlesCdata(){String h=""<div id=1><![CDATA[<html>\n<foo><&amp;]]></div>"";Document doc=Jsoup.parse(h);Element div=doc.getElementById(""1"");assertEquals(""<html> <foo><&amp;"",div.text());assertEquals(0,div.children().size());assertEquals(1,div.childNodeSize());}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedCdataAtEOF",0,"@Test public void handlesUnclosedCdataAtEOF(){String h=""<![CDATA[]]"";Document doc=Jsoup.parse(h);assertEquals(1,doc.body().childNodeSize());}"
"org.jsoup.parser.HtmlParserTest.handlesInvalidStartTags",0,"@Test public void handlesInvalidStartTags(){String h=""<div>Hello < There <&amp;></div>"";Document doc=Jsoup.parse(h);assertEquals(""Hello < There <&>"",doc.select(""div"").first().text());}"
"org.jsoup.parser.HtmlParserTest.handlesUnknownTags",0,"@Test public void handlesUnknownTags(){String h=""<div><foo title=bar>Hello<foo title=qux>there</foo></div>"";Document doc=Jsoup.parse(h);Elements foos=doc.select(""foo"");assertEquals(2,foos.size());assertEquals(""bar"",foos.first().attr(""title""));assertEquals(""qux"",foos.last().attr(""title""));assertEquals(""there"",foos.last().text());}"
"org.jsoup.parser.HtmlParserTest.handlesUnknownInlineTags",0,"@Test public void handlesUnknownInlineTags(){String h=""<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"";Document doc=Jsoup.parseBodyFragment(h);String out=doc.body().html();assertEquals(h,TextUtil.stripNewlines(out));}"
"org.jsoup.parser.HtmlParserTest.parsesBodyFragment",0,"@Test public void parsesBodyFragment(){String h=""<!-- comment --><p><a href='foo'>One</a></p>"";Document doc=Jsoup.parseBodyFragment(h,""http://example.com"");assertEquals(""<body><!-- comment --><p><a href=\""foo\"">One</a></p></body>"",TextUtil.stripNewlines(doc.body().outerHtml()));assertEquals(""http://example.com/foo"",doc.select(""a"").first().absUrl(""href""));}"
"org.jsoup.parser.HtmlParserTest.handlesUnknownNamespaceTags",0,"@Test public void handlesUnknownNamespaceTags(){String h=""<foo:bar id='1' /><abc:def id=2>Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>"";Document doc=Jsoup.parse(h);assertEquals(""<foo:bar id=\""1\"" /><abc:def id=\""2\"">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesKnownEmptyBlocks",0,"@Test public void handlesKnownEmptyBlocks(){String h=""<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two"";Document doc=Jsoup.parse(h);assertEquals(""<div id=\""1\""></div><script src=\""/foo\""></script><div id=\""2\""><img><img></div><a id=\""3\""></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesKnownEmptyNoFrames",0,"@Test public void handlesKnownEmptyNoFrames(){String h=""<html><head><noframes /><meta name=foo></head><body>One</body></html>"";Document doc=Jsoup.parse(h);assertEquals(""<html><head><noframes></noframes><meta name=\""foo\""></head><body>One</body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.handlesKnownEmptyStyle",0,"@Test public void handlesKnownEmptyStyle(){String h=""<html><head><style /><meta name=foo></head><body>One</body></html>"";Document doc=Jsoup.parse(h);assertEquals(""<html><head><style></style><meta name=\""foo\""></head><body>One</body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.handlesKnownEmptyTitle",0,"@Test public void handlesKnownEmptyTitle(){String h=""<html><head><title /><meta name=foo></head><body>One</body></html>"";Document doc=Jsoup.parse(h);assertEquals(""<html><head><title></title><meta name=\""foo\""></head><body>One</body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.handlesKnownEmptyIframe",0,"@Test public void handlesKnownEmptyIframe(){String h=""<p>One</p><iframe id=1 /><p>Two"";Document doc=Jsoup.parse(h);assertEquals(""<html><head></head><body><p>One</p><iframe id=\""1\""></iframe><p>Two</p></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.handlesSolidusAtAttributeEnd",0,"@Test public void handlesSolidusAtAttributeEnd(){String h=""<a href=/>link</a>"";Document doc=Jsoup.parse(h);assertEquals(""<a href=\""/\"">link</a>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesMultiClosingBody",0,"@Test public void handlesMultiClosingBody(){String h=""<body><p>Hello</body><p>there</p></body></body></html><p>now"";Document doc=Jsoup.parse(h);assertEquals(3,doc.select(""p"").size());assertEquals(3,doc.body().children().size());}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedDefinitionLists",0,"@Test public void handlesUnclosedDefinitionLists(){String h=""<dt>Foo<dd>Bar<dt>Qux<dd>Zug"";Document doc=Jsoup.parse(h);assertEquals(0,doc.select(""dl"").size());assertEquals(4,doc.select(""dt,dd"").size());Elements dts=doc.select(""dt"");assertEquals(2,dts.size());assertEquals(""Zug"",dts.get(1).nextElementSibling().text());}"
"org.jsoup.parser.HtmlParserTest.handlesBlocksInDefinitions",0,"@Test public void handlesBlocksInDefinitions(){String h=""<dl><dt><div id=1>Term</div></dt><dd><div id=2>Def</div></dd></dl>"";Document doc=Jsoup.parse(h);assertEquals(""dt"",doc.select(""#1"").first().parent().tagName());assertEquals(""dd"",doc.select(""#2"").first().parent().tagName());assertEquals(""<dl><dt><div id=\""1\"">Term</div></dt><dd><div id=\""2\"">Def</div></dd></dl>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesFrames",0,"@Test public void handlesFrames(){String h=""<html><head><script></script><noscript></noscript></head><frameset><frame src=foo></frame><frame src=foo></frameset></html>"";Document doc=Jsoup.parse(h);assertEquals(""<html><head><script></script><noscript></noscript></head><frameset><frame src=\""foo\""><frame src=\""foo\""></frameset></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.ignoresContentAfterFrameset",0,"@Test public void ignoresContentAfterFrameset(){String h=""<html><head><title>One</title></head><frameset><frame /><frame /></frameset><table></table></html>"";Document doc=Jsoup.parse(h);assertEquals(""<html><head><title>One</title></head><frameset><frame><frame></frameset></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.handlesJavadocFont",0,"@Test public void handlesJavadocFont(){String h=""<TD BGCOLOR=\""#EEEEFF\"" CLASS=\""NavBarCell1\"">    <A HREF=\""deprecated-list.html\""><FONT CLASS=\""NavBarFont1\""><B>Deprecated</B></FONT></A>&nbsp;</TD>"";Document doc=Jsoup.parse(h);Element a=doc.select(""a"").first();assertEquals(""Deprecated"",a.text());assertEquals(""font"",a.child(0).tagName());assertEquals(""b"",a.child(0).child(0).tagName());}"
"org.jsoup.parser.HtmlParserTest.handlesBaseWithoutHref",0,"@Test public void handlesBaseWithoutHref(){String h=""<head><base target='_blank'></head><body><a href=/foo>Test</a></body>"";Document doc=Jsoup.parse(h,""http://example.com/"");Element a=doc.select(""a"").first();assertEquals(""/foo"",a.attr(""href""));assertEquals(""http://example.com/foo"",a.attr(""abs:href""));}"
"org.jsoup.parser.HtmlParserTest.normalisesDocument",0,"@Test public void normalisesDocument(){String h=""<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven "";Document doc=Jsoup.parse(h);assertEquals(""<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.normalisesEmptyDocument",0,"@Test public void normalisesEmptyDocument(){Document doc=Jsoup.parse("""");assertEquals(""<html><head></head><body></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.normalisesHeadlessBody",0,"@Test public void normalisesHeadlessBody(){Document doc=Jsoup.parse(""<html><body><span class=\""foo\"">bar</span>"");assertEquals(""<html><head></head><body><span class=\""foo\"">bar</span></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.normalisedBodyAfterContent",0,"@Test public void normalisedBodyAfterContent(){Document doc=Jsoup.parse(""<font face=Arial><body class=name><div>One</div></body></font>"");assertEquals(""<html><head></head><body class=\""name\""><font face=\""Arial\""><div>One</div></font></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.findsCharsetInMalformedMeta",0,"@Test public void findsCharsetInMalformedMeta(){String h=""<meta http-equiv=Content-Type content=text/html;charset=gb2312>"";Document doc=Jsoup.parse(h);assertEquals(""gb2312"",doc.select(""meta"").attr(""charset""));}"
"org.jsoup.parser.HtmlParserTest.testHgroup",0,"@Test public void testHgroup(){Document doc=Jsoup.parse(""<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>"");assertEquals(""<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.testRelaxedTags",0,"@Test public void testRelaxedTags(){Document doc=Jsoup.parse(""<abc_def id=1>Hello</abc_def> <abc-def>There</abc-def>"");assertEquals(""<abc_def id=\""1\"">Hello</abc_def> <abc-def>There</abc-def>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.testHeaderContents",0,"@Test public void testHeaderContents(){Document doc=Jsoup.parse(""<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>"");assertEquals(""<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.testSpanContents",0,"@Test public void testSpanContents(){Document doc=Jsoup.parse(""<span>Hello <div>there</div> <span>now</span></span>"");assertEquals(""<span>Hello <div>there</div> <span>now</span></span>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.testNoImagesInNoScriptInHead",0,"@Test public void testNoImagesInNoScriptInHead(){Document doc=Jsoup.parse(""<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>"");assertEquals(""<html><head><noscript>&lt;img src=\""foo\""&gt;</noscript></head><body><p>Hello</p></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.testAFlowContents",0,"@Test public void testAFlowContents(){Document doc=Jsoup.parse(""<a>Hello <div>there</div> <span>now</span></a>"");assertEquals(""<a>Hello <div>there</div> <span>now</span></a>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.testFontFlowContents",0,"@Test public void testFontFlowContents(){Document doc=Jsoup.parse(""<font>Hello <div>there</div> <span>now</span></font>"");assertEquals(""<font>Hello <div>there</div> <span>now</span></font>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesMisnestedTagsBI",0,"@Test public void handlesMisnestedTagsBI(){String h=""<p>1<b>2<i>3</b>4</i>5</p>"";Document doc=Jsoup.parse(h);assertEquals(""<p>1<b>2<i>3</i></b><i>4</i>5</p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesMisnestedTagsBP",0,"@Test public void handlesMisnestedTagsBP(){String h=""<b>1<p>2</b>3</p>"";Document doc=Jsoup.parse(h);assertEquals(""<b>1</b>\n<p><b>2</b>3</p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesMisnestedAInDivs",0,"@Ignore @Test public void handlesMisnestedAInDivs(){String h=""<a href='#1'><div><div><a href='#2'>child</a</div</div></a>"";String w=""<a href=\""#1\""></a><div><a href=\""#1\""></a><div><a href=\""#1\""></a><a href=\""#2\"">child</a></div></div>"";Document doc=Jsoup.parse(h);assertEquals(StringUtil.normaliseWhitespace(w),StringUtil.normaliseWhitespace(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesUnexpectedMarkupInTables",0,"@Test public void handlesUnexpectedMarkupInTables(){String h=""<table><b><tr><td>aaa</td></tr>bbb</table>ccc"";Document doc=Jsoup.parse(h);assertEquals(""<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedFormattingElements",0,"@Test public void handlesUnclosedFormattingElements(){String h=""<!DOCTYPE html>\n"" + ""<p><b class=x><b class=x><b><b class=x><b class=x><b>X\n"" + ""<p>X\n""+ ""<p><b><b class=x><b>X\n""+ ""<p></b></b></b></b></b></b>X"";Document doc=Jsoup.parse(h);doc.outputSettings().indentAmount(0);String want=""<!doctype html>\n"" + ""<html>\n"" + ""<head></head>\n""+ ""<body>\n""+ ""<p><b class=\""x\""><b class=\""x\""><b><b class=\""x\""><b class=\""x\""><b>X </b></b></b></b></b></b></p>\n""+ ""<p><b class=\""x\""><b><b class=\""x\""><b class=\""x\""><b>X </b></b></b></b></b></p>\n""+ ""<p><b class=\""x\""><b><b class=\""x\""><b class=\""x\""><b><b><b class=\""x\""><b>X </b></b></b></b></b></b></b></b></p>\n""+ ""<p>X</p>\n""+ ""</body>\n""+ ""</html>"";assertEquals(want,doc.html());}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedAnchors",0,"@Test public void handlesUnclosedAnchors(){String h=""<a href='http://example.com/'>Link<p>Error link</a>"";Document doc=Jsoup.parse(h);String want=""<a href=\""http://example.com/\"">Link</a>\n<p><a href=\""http://example.com/\"">Error link</a></p>"";assertEquals(want,doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.reconstructFormattingElements",0,"@Test public void reconstructFormattingElements(){String h=""<p><b class=one>One <i>Two <b>Three</p><p>Hello</p>"";Document doc=Jsoup.parse(h);assertEquals(""<p><b class=\""one\"">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\""one\""><i><b>Hello</b></i></b></p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.reconstructFormattingElementsInTable",0,"@Test public void reconstructFormattingElementsInTable(){String h=""<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>"";Document doc=Jsoup.parse(h);String want=""<p><b>One</b></p>\n"" + ""<b> \n"" + "" <table>\n""+ ""  <tbody>\n""+ ""   <tr>\n""+ ""    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n""+ ""   </tr>\n""+ ""  </tbody>\n""+ "" </table> <p>Five</p></b>"";assertEquals(want,doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.commentBeforeHtml",0,"@Test public void commentBeforeHtml(){String h=""<!-- comment --><!-- comment 2 --><p>One</p>"";Document doc=Jsoup.parse(h);assertEquals(""<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.HtmlParserTest.emptyTdTag",0,"@Test public void emptyTdTag(){String h=""<table><tr><td>One</td><td id='2' /></tr></table>"";Document doc=Jsoup.parse(h);assertEquals(""<td>One</td>\n<td id=\""2\""></td>"",doc.select(""tr"").first().html());}"
"org.jsoup.parser.HtmlParserTest.handlesSolidusInA",0,"@Test public void handlesSolidusInA(){String h=""<a class=lp href=/lib/14160711/>link text</a>"";Document doc=Jsoup.parse(h);Element a=doc.select(""a"").first();assertEquals(""link text"",a.text());assertEquals(""/lib/14160711/"",a.attr(""href""));}"
"org.jsoup.parser.HtmlParserTest.handlesSpanInTbody",0,"@Test public void handlesSpanInTbody(){String h=""<table><tbody><span class='1'><tr><td>One</td></tr><tr><td>Two</td></tr></span></tbody></table>"";Document doc=Jsoup.parse(h);assertEquals(doc.select(""span"").first().children().size(),0);assertEquals(doc.select(""table"").size(),1);}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedTitleAtEof",0,"@Test public void handlesUnclosedTitleAtEof(){assertEquals(""Data"",Jsoup.parse(""<title>Data"").title());assertEquals(""Data<"",Jsoup.parse(""<title>Data<"").title());assertEquals(""Data</"",Jsoup.parse(""<title>Data</"").title());assertEquals(""Data</t"",Jsoup.parse(""<title>Data</t"").title());assertEquals(""Data</ti"",Jsoup.parse(""<title>Data</ti"").title());assertEquals(""Data"",Jsoup.parse(""<title>Data</title>"").title());assertEquals(""Data"",Jsoup.parse(""<title>Data</title >"").title());}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedTitle",0,"@Test public void handlesUnclosedTitle(){Document one=Jsoup.parse(""<title>One <b>Two <b>Three</TITLE><p>Test</p>"");assertEquals(""One <b>Two <b>Three"",one.title());assertEquals(""Test"",one.select(""p"").first().text());Document two=Jsoup.parse(""<title>One<b>Two <p>Test</p>"");assertEquals(""One"",two.title());assertEquals(""<b>Two <p>Test</p></b>"",two.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedScriptAtEof",0,"@Test public void handlesUnclosedScriptAtEof(){assertEquals(""Data"",Jsoup.parse(""<script>Data"").select(""script"").first().data());assertEquals(""Data<"",Jsoup.parse(""<script>Data<"").select(""script"").first().data());assertEquals(""Data</sc"",Jsoup.parse(""<script>Data</sc"").select(""script"").first().data());assertEquals(""Data</-sc"",Jsoup.parse(""<script>Data</-sc"").select(""script"").first().data());assertEquals(""Data</sc-"",Jsoup.parse(""<script>Data</sc-"").select(""script"").first().data());assertEquals(""Data</sc--"",Jsoup.parse(""<script>Data</sc--"").select(""script"").first().data());assertEquals(""Data"",Jsoup.parse(""<script>Data</script>"").select(""script"").first().data());assertEquals(""Data</script"",Jsoup.parse(""<script>Data</script"").select(""script"").first().data());assertEquals(""Data"",Jsoup.parse(""<script>Data</script "").select(""script"").first().data());assertEquals(""Data"",Jsoup.parse(""<script>Data</script n"").select(""script"").first().data());assertEquals(""Data"",Jsoup.parse(""<script>Data</script n="").select(""script"").first().data());assertEquals(""Data"",Jsoup.parse(""<script>Data</script n=\"""").select(""script"").first().data());assertEquals(""Data"",Jsoup.parse(""<script>Data</script n=\""p"").select(""script"").first().data());}"
"org.jsoup.parser.HtmlParserTest.handlesUnclosedRawtextAtEof",0,"@Test public void handlesUnclosedRawtextAtEof(){assertEquals(""Data"",Jsoup.parse(""<style>Data"").select(""style"").first().data());assertEquals(""Data</st"",Jsoup.parse(""<style>Data</st"").select(""style"").first().data());assertEquals(""Data"",Jsoup.parse(""<style>Data</style>"").select(""style"").first().data());assertEquals(""Data</style"",Jsoup.parse(""<style>Data</style"").select(""style"").first().data());assertEquals(""Data</-style"",Jsoup.parse(""<style>Data</-style"").select(""style"").first().data());assertEquals(""Data</style-"",Jsoup.parse(""<style>Data</style-"").select(""style"").first().data());assertEquals(""Data</style--"",Jsoup.parse(""<style>Data</style--"").select(""style"").first().data());}"
"org.jsoup.parser.HtmlParserTest.noImplicitFormForTextAreas",0,"@Test public void noImplicitFormForTextAreas(){Document doc=Jsoup.parse(""<textarea>One</textarea>"");assertEquals(""<textarea>One</textarea>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesEscapedScript",0,"@Test public void handlesEscapedScript(){Document doc=Jsoup.parse(""<script><!-- one <script>Blah</script> --></script>"");assertEquals(""<!-- one <script>Blah</script> -->"",doc.select(""script"").first().data());}"
"org.jsoup.parser.HtmlParserTest.handles0CharacterAsText",0,"@Test public void handles0CharacterAsText(){Document doc=Jsoup.parse(""0<p>0</p>"");assertEquals(""0\n<p>0</p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesNullInData",0,"@Test public void handlesNullInData(){Document doc=Jsoup.parse(""<p id=\u0000>Blah \u0000</p>"");assertEquals(""<p id=\""\uFFFD\"">Blah \u0000</p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesNullInComments",0,"@Test public void handlesNullInComments(){Document doc=Jsoup.parse(""<body><!-- \u0000 \u0000 -->"");assertEquals(""<!-- \uFFFD \uFFFD -->"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesNewlinesAndWhitespaceInTag",0,"@Test public void handlesNewlinesAndWhitespaceInTag(){Document doc=Jsoup.parse(""<a \n href=\""one\"" \r\n id=\""two\"" \f >"");assertEquals(""<a href=\""one\"" id=\""two\""></a>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesWhitespaceInoDocType",0,"@Test public void handlesWhitespaceInoDocType(){String html=""<!DOCTYPE html\r\n"" + ""      PUBLIC \""-//W3C//DTD XHTML 1.0 Transitional//EN\""\r\n"" + ""      \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"">"";Document doc=Jsoup.parse(html);assertEquals(""<!DOCTYPE html PUBLIC \""-//W3C//DTD XHTML 1.0 Transitional//EN\"" \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"">"",doc.childNode(0).outerHtml());}"
"org.jsoup.parser.HtmlParserTest.tracksErrorsWhenRequested",0,"@Test public void tracksErrorsWhenRequested(){String html=""<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo"";Parser parser=Parser.htmlParser().setTrackErrors(500);Document doc=Jsoup.parse(html,""http://example.com"",parser);List<ParseError> errors=parser.getErrors();assertEquals(5,errors.size());assertEquals(""20: Attributes incorrectly present on end tag"",errors.get(0).toString());assertEquals(""35: Unexpected token [Doctype]when in state [InBody]"",errors.get(1).toString());assertEquals(""36: Invalid character reference: invalid named referenece 'arrgh'"",errors.get(2).toString());assertEquals(""50: Tag cannot be self closing;not a void tag"",errors.get(3).toString());assertEquals(""61: Unexpectedly reached end of file (EOF)in input state [TagName]"",errors.get(4).toString());}"
"org.jsoup.parser.HtmlParserTest.tracksLimitedErrorsWhenRequested",0,"@Test public void tracksLimitedErrorsWhenRequested(){String html=""<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo"";Parser parser=Parser.htmlParser().setTrackErrors(3);Document doc=parser.parseInput(html,""http://example.com"");List<ParseError> errors=parser.getErrors();assertEquals(3,errors.size());assertEquals(""20: Attributes incorrectly present on end tag"",errors.get(0).toString());assertEquals(""35: Unexpected token [Doctype]when in state [InBody]"",errors.get(1).toString());assertEquals(""36: Invalid character reference: invalid named referenece 'arrgh'"",errors.get(2).toString());}"
"org.jsoup.parser.HtmlParserTest.noErrorsByDefault",0,"@Test public void noErrorsByDefault(){String html=""<p>One</p href='no'>&arrgh;<font /><br /><foo"";Parser parser=Parser.htmlParser();Document doc=Jsoup.parse(html,""http://example.com"",parser);List<ParseError> errors=parser.getErrors();assertEquals(0,errors.size());}"
"org.jsoup.parser.HtmlParserTest.handlesCommentsInTable",0,"@Test public void handlesCommentsInTable(){String html=""<table><tr><td>text</td><!-- Comment --></tr></table>"";Document node=Jsoup.parseBodyFragment(html);assertEquals(""<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>"",TextUtil.stripNewlines(node.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.handlesQuotesInCommentsInScripts",0,"@Test public void handlesQuotesInCommentsInScripts(){String html=""<script>\n"" + ""  <!--\n"" + ""    document.write('</scr' + 'ipt>');\n""+ ""  // -->\n""+ ""</script>"";Document node=Jsoup.parseBodyFragment(html);assertEquals(""<script>\n"" + ""  <!--\n"" + ""    document.write('</scr' + 'ipt>');\n""+ ""  // -->\n""+ ""</script>"",node.body().html());}"
"org.jsoup.parser.HtmlParserTest.handleNullContextInParseFragment",0,"@Test public void handleNullContextInParseFragment(){String html=""<ol><li>One</li></ol><p>Two</p>"";List<Node> nodes=Parser.parseFragment(html,null,""http://example.com/"");assertEquals(1,nodes.size());assertEquals(""html"",nodes.get(0).nodeName());assertEquals(""<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>"",StringUtil.normaliseWhitespace(nodes.get(0).outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.doesNotFindShortestMatchingEntity",0,"@Test public void doesNotFindShortestMatchingEntity(){String html=""One &clubsuite;&clubsuit;"";Document doc=Jsoup.parse(html);assertEquals(StringUtil.normaliseWhitespace(""One &amp;clubsuite;♣""),doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.relaxedBaseEntityMatchAndStrictExtendedMatch",0,"@Test public void relaxedBaseEntityMatchAndStrictExtendedMatch(){String html=""&amp &quot &reg &icy &hopf &icy;&hopf;"";Document doc=Jsoup.parse(html);doc.outputSettings().escapeMode(Entities.EscapeMode.extended).charset(""ascii"");assertEquals(""&amp;\"" &reg;&amp;icy &amp;hopf &icy;&hopf;"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesXmlDeclarationAsBogusComment",0,"@Test public void handlesXmlDeclarationAsBogusComment(){String html=""<?xml encoding='UTF-8' ?><body>One</body>"";Document doc=Jsoup.parse(html);assertEquals(""<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.handlesTagsInTextarea",0,"@Test public void handlesTagsInTextarea(){String html=""<textarea><p>Jsoup</p></textarea>"";Document doc=Jsoup.parse(html);assertEquals(""<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.createsFormElements",0,"@Test public void createsFormElements(){String html=""<body><form><input id=1><input id=2></form></body>"";Document doc=Jsoup.parse(html);Element el=doc.select(""form"").first();assertTrue(""Is form element"",el instanceof FormElement);FormElement form=(FormElement)el;Elements controls=form.elements();assertEquals(2,controls.size());assertEquals(""1"",controls.get(0).id());assertEquals(""2"",controls.get(1).id());}"
"org.jsoup.parser.HtmlParserTest.associatedFormControlsWithDisjointForms",0,"@Test public void associatedFormControlsWithDisjointForms(){String html=""<table><tr><form><input type=hidden id=1><td><input type=text id=2></td><tr></table>"";Document doc=Jsoup.parse(html);Element el=doc.select(""form"").first();assertTrue(""Is form element"",el instanceof FormElement);FormElement form=(FormElement)el;Elements controls=form.elements();assertEquals(2,controls.size());assertEquals(""1"",controls.get(0).id());assertEquals(""2"",controls.get(1).id());assertEquals(""<table><tbody><tr><form></form><input type=\""hidden\"" id=\""1\""><td><input type=\""text\"" id=\""2\""></td></tr><tr></tr></tbody></table>"",TextUtil.stripNewlines(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.handlesInputInTable",0,"@Test public void handlesInputInTable(){String h=""<body>\n"" + ""<input type=\""hidden\"" name=\""a\"" value=\""\"">\n"" + ""<table>\n""+ ""<input type=\""hidden\"" name=\""b\"" value=\""\"" />\n""+ ""</table>\n""+ ""</body>"";Document doc=Jsoup.parse(h);assertEquals(1,doc.select(""table input"").size());assertEquals(2,doc.select(""input"").size());}"
"org.jsoup.parser.HtmlParserTest.convertsImageToImg",0,"@Test public void convertsImageToImg(){String h=""<body><image><svg><image /></svg></body>"";Document doc=Jsoup.parse(h);assertEquals(""<img>\n<svg>\n <image />\n</svg>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.handlesInvalidDoctypes",0,"@Test public void handlesInvalidDoctypes(){Document doc=Jsoup.parse(""<!DOCTYPE>"");assertEquals(""<!doctype> <html> <head></head> <body></body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));doc=Jsoup.parse(""<!DOCTYPE><html><p>Foo</p></html>"");assertEquals(""<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));doc=Jsoup.parse(""<!DOCTYPE \u0000>"");assertEquals(""<!doctype �> <html> <head></head> <body></body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.handlesManyChildren",0,"@Test public void handlesManyChildren(){StringBuilder longBody=new StringBuilder(500000);for (int i=0;i < 25000;i++){longBody.append(i).append(""<br>"");}long start=System.currentTimeMillis();Document doc=Parser.parseBodyFragment(longBody.toString(),"""");assertEquals(50000,doc.body().childNodeSize());assertTrue(System.currentTimeMillis()- start < 1000);}"
"org.jsoup.parser.HtmlParserTest.handlesDeepStack",0,"@Test public void handlesDeepStack(){}"
"org.jsoup.parser.HtmlParserTest.testInvalidTableContents",0,"@Test public void testInvalidTableContents()throws IOException {File in=ParseTest.getFile(""/htmltests/table-invalid-elements.html"");Document doc=Jsoup.parse(in,""UTF-8"");doc.outputSettings().prettyPrint(true);String rendered=doc.toString();int endOfEmail=rendered.indexOf(""Comment"");int guarantee=rendered.indexOf(""Why am I here?"");assertTrue(""Comment not found"",endOfEmail > -1);assertTrue(""Search text not found"",guarantee > -1);assertTrue(""Search text did not come after comment"",guarantee > endOfEmail);}"
"org.jsoup.parser.HtmlParserTest.testNormalisesIsIndex",0,"@Test public void testNormalisesIsIndex(){Document doc=Jsoup.parse(""<body><isindex action='/submit'></body>"");String html=doc.outerHtml();assertEquals(""<form action=\""/submit\""> <hr> <label>This is a searchable index. Enter search keywords: <input name=\""isindex\""></label> <hr> </form>"",StringUtil.normaliseWhitespace(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.testReinsertionModeForThCelss",0,"@Test public void testReinsertionModeForThCelss(){String body=""<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>"";Document doc=Jsoup.parse(body);assertEquals(1,doc.body().children().size());}"
"org.jsoup.parser.HtmlParserTest.testUsingSingleQuotesInQueries",0,"@Test public void testUsingSingleQuotesInQueries(){String body=""<body> <div class='main'>hello</div></body>"";Document doc=Jsoup.parse(body);Elements main=doc.select(""div[class='main']"");assertEquals(""hello"",main.text());}"
"org.jsoup.parser.HtmlParserTest.testSupportsNonAsciiTags",0,"@Test public void testSupportsNonAsciiTags(){String body=""<進捗推移グラフ>Yes</進捗推移グラフ><русский-тэг>Correct</<русский-тэг>"";Document doc=Jsoup.parse(body);Elements els=doc.select(""進捗推移グラフ"");assertEquals(""Yes"",els.text());els=doc.select(""русский-тэг"");assertEquals(""Correct"",els.text());}"
"org.jsoup.parser.HtmlParserTest.testSupportsPartiallyNonAsciiTags",0,"@Test public void testSupportsPartiallyNonAsciiTags(){String body=""<div>Check</divá>"";Document doc=Jsoup.parse(body);Elements els=doc.select(""div"");assertEquals(""Check"",els.text());}"
"org.jsoup.parser.HtmlParserTest.testFragment",0,"@Test public void testFragment(){String html=""<script type=\""text/javascript\"">console.log('foo');</script>\n"" + ""<div id=\""somecontent\"">some content</div>\n"" + ""<script type=\""text/javascript\"">console.log('bar');</script>"";Document body=Jsoup.parseBodyFragment(html);assertEquals(""<script type=\""text/javascript\"">console.log('foo');</script> \n"" + ""<div id=\""somecontent\"">\n"" + "" some content\n""+ ""</div> \n""+ ""<script type=\""text/javascript\"">console.log('bar');</script>"",body.body().html());}"
"org.jsoup.parser.HtmlParserTest.testHtmlLowerCase",0,"@Test public void testHtmlLowerCase(){String html=""<!doctype HTML><DIV ID=1>One</DIV>"";Document doc=Jsoup.parse(html);assertEquals(""<!doctype html> <html> <head></head> <body> <div id=\""1\""> One </div> </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.canPreserveTagCase",0,"@Test public void canPreserveTagCase(){Parser parser=Parser.htmlParser();parser.settings(new ParseSettings(true,false));Document doc=parser.parseInput(""<div id=1><SPAN ID=2>"","""");assertEquals(""<html> <head></head> <body> <div id=\""1\""> <SPAN id=\""2\""></SPAN> </div> </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.canPreserveAttributeCase",0,"@Test public void canPreserveAttributeCase(){Parser parser=Parser.htmlParser();parser.settings(new ParseSettings(false,true));Document doc=parser.parseInput(""<div id=1><SPAN ID=2>"","""");assertEquals(""<html> <head></head> <body> <div id=\""1\""> <span ID=\""2\""></span> </div> </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.canPreserveBothCase",0,"@Test public void canPreserveBothCase(){Parser parser=Parser.htmlParser();parser.settings(new ParseSettings(true,true));Document doc=parser.parseInput(""<div id=1><SPAN ID=2>"","""");assertEquals(""<html> <head></head> <body> <div id=\""1\""> <SPAN ID=\""2\""></SPAN> </div> </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.parser.HtmlParserTest.handlesControlCodeInAttributeName",0,"@Test public void handlesControlCodeInAttributeName(){Document doc=Jsoup.parse(""<p><a \06=foo>One</a><a/\06=bar><a foo\06=bar>Two</a></p>"");assertEquals(""<p><a>One</a><a></a><a foo=\""bar\"">Two</a></p>"",doc.body().html());}"
"org.jsoup.parser.HtmlParserTest.caseSensitiveParseTree",0,"@Test public void caseSensitiveParseTree(){String html=""<r><X>A</X><y>B</y></r>"";Parser parser=Parser.htmlParser();parser.settings(ParseSettings.preserveCase);Document doc=parser.parseInput(html,"""");assertEquals(""<r> <X> A </X> <y> B </y> </r>"",StringUtil.normaliseWhitespace(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.caseInsensitiveParseTree",0,"@Test public void caseInsensitiveParseTree(){String html=""<r><X>A</X><y>B</y></r>"";Parser parser=Parser.htmlParser();Document doc=parser.parseInput(html,"""");assertEquals(""<r> <x> A </x> <y> B </y> </r>"",StringUtil.normaliseWhitespace(doc.body().html()));}"
"org.jsoup.parser.HtmlParserTest.selfClosingVoidIsNotAnError",0,"@Test public void selfClosingVoidIsNotAnError(){String html=""<p>test<br/>test<br/></p>"";Parser parser=Parser.htmlParser().setTrackErrors(5);parser.parseInput(html,"""");assertEquals(0,parser.getErrors().size());assertTrue(Jsoup.isValid(html,Whitelist.basic()));String clean=Jsoup.clean(html,Whitelist.basic());assertEquals(""<p>test<br>test<br></p>"",clean);}"
"org.jsoup.parser.HtmlParserTest.selfClosingOnNonvoidIsError",0,"@Test public void selfClosingOnNonvoidIsError(){String html=""<p>test</p><div /><div>Two</div>"";Parser parser=Parser.htmlParser().setTrackErrors(5);parser.parseInput(html,"""");assertEquals(1,parser.getErrors().size());assertEquals(""18: Tag cannot be self closing;not a void tag"",parser.getErrors().get(0).toString());assertFalse(Jsoup.isValid(html,Whitelist.relaxed()));String clean=Jsoup.clean(html,Whitelist.relaxed());assertEquals(""<p>test</p> <div></div> <div> Two </div>"",StringUtil.normaliseWhitespace(clean));}"
"org.jsoup.parser.HtmlParserTest.testTemplateInsideTable",0,"@Test public void testTemplateInsideTable()throws IOException {File in=ParseTest.getFile(""/htmltests/table-polymer-template.html"");Document doc=Jsoup.parse(in,""UTF-8"");doc.outputSettings().prettyPrint(true);Elements templates=doc.body().getElementsByTag(""template"");for(Element template : templates){assertTrue(template.childNodes().size()> 1);}}"
"org.jsoup.parser.HtmlParserTest.testHandlesDeepSpans",0,"@Test public void testHandlesDeepSpans(){StringBuilder sb=new StringBuilder();for (int i=0;i < 200;i++){sb.append(""<span>"");}sb.append(""<p>One</p>"");Document doc=Jsoup.parse(sb.toString());assertEquals(200,doc.select(""span"").size());assertEquals(1,doc.select(""p"").size());}"
"org.jsoup.helper.HttpConnectionTest.throwsExceptionOnParseWithoutExecute",0,"@Test(expected=IllegalArgumentException.class)public void throwsExceptionOnParseWithoutExecute()throws IOException {Connection con=HttpConnection.connect(""http://example.com"");con.response().parse();}"
"org.jsoup.helper.HttpConnectionTest.throwsExceptionOnBodyWithoutExecute",0,"@Test(expected=IllegalArgumentException.class)public void throwsExceptionOnBodyWithoutExecute()throws IOException {Connection con=HttpConnection.connect(""http://example.com"");con.response().body();}"
"org.jsoup.helper.HttpConnectionTest.throwsExceptionOnBodyAsBytesWithoutExecute",0,"@Test(expected=IllegalArgumentException.class)public void throwsExceptionOnBodyAsBytesWithoutExecute()throws IOException {Connection con=HttpConnection.connect(""http://example.com"");con.response().bodyAsBytes();}"
"org.jsoup.helper.HttpConnectionTest.caseInsensitiveHeaders",0,"@Test @MultiLocaleTest public void caseInsensitiveHeaders(){Connection.Response res=new HttpConnection.Response();res.header(""Accept-Encoding"",""gzip"");res.header(""content-type"",""text/html"");res.header(""refErrer"",""http://example.com"");assertTrue(res.hasHeader(""Accept-Encoding""));assertTrue(res.hasHeader(""accept-encoding""));assertTrue(res.hasHeader(""accept-Encoding""));assertTrue(res.hasHeader(""ACCEPT-ENCODING""));assertEquals(""gzip"",res.header(""accept-Encoding""));assertEquals(""gzip"",res.header(""ACCEPT-ENCODING""));assertEquals(""text/html"",res.header(""Content-Type""));assertEquals(""http://example.com"",res.header(""Referrer""));res.removeHeader(""Content-Type"");assertFalse(res.hasHeader(""content-type""));res.removeHeader(""ACCEPT-ENCODING"");assertFalse(res.hasHeader(""Accept-Encoding""));res.header(""ACCEPT-ENCODING"",""deflate"");assertEquals(""deflate"",res.header(""Accept-Encoding""));assertEquals(""deflate"",res.header(""accept-Encoding""));}"
"org.jsoup.helper.HttpConnectionTest.headers",0,"@Test public void headers(){Connection con=HttpConnection.connect(""http://example.com"");Map<String,String> headers=new HashMap<>();headers.put(""content-type"",""text/html"");headers.put(""Connection"",""keep-alive"");headers.put(""Host"",""http://example.com"");con.headers(headers);assertEquals(""text/html"",con.request().header(""content-type""));assertEquals(""keep-alive"",con.request().header(""Connection""));assertEquals(""http://example.com"",con.request().header(""Host""));}"
"org.jsoup.helper.HttpConnectionTest.sameHeadersCombineWithComma",0,"@Test public void sameHeadersCombineWithComma(){Map<String,List<String>> headers=new HashMap<>();List<String> values=new ArrayList<>();values.add(""no-cache"");values.add(""no-store"");headers.put(""Cache-Control"",values);HttpConnection.Response res=new HttpConnection.Response();res.processResponseHeaders(headers);assertEquals(""no-cache,no-store"",res.header(""Cache-Control""));}"
"org.jsoup.helper.HttpConnectionTest.multipleHeaders",0,"@Test public void multipleHeaders(){Connection.Request req=new HttpConnection.Request();req.addHeader(""Accept"",""Something"");req.addHeader(""Accept"",""Everything"");req.addHeader(""Foo"",""Bar"");assertTrue(req.hasHeader(""Accept""));assertTrue(req.hasHeader(""ACCEpt""));assertEquals(""Something,Everything"",req.header(""accept""));assertTrue(req.hasHeader(""fOO""));assertEquals(""Bar"",req.header(""foo""));List<String> accept=req.headers(""accept"");assertEquals(2,accept.size());assertEquals(""Something"",accept.get(0));assertEquals(""Everything"",accept.get(1));Map<String,List<String>> headers=req.multiHeaders();assertEquals(accept,headers.get(""Accept""));assertEquals(""Bar"",headers.get(""Foo"").get(0));assertTrue(req.hasHeader(""Accept""));assertTrue(req.hasHeaderWithValue(""accept"",""Something""));assertTrue(req.hasHeaderWithValue(""accept"",""Everything""));assertFalse(req.hasHeaderWithValue(""accept"",""Something for nothing""));req.removeHeader(""accept"");headers=req.multiHeaders();assertEquals(""Bar"",headers.get(""Foo"").get(0));assertFalse(req.hasHeader(""Accept""));assertTrue(headers.get(""Accept"")== null);}"
"org.jsoup.helper.HttpConnectionTest.ignoresEmptySetCookies",0,"@Test public void ignoresEmptySetCookies(){Map<String,List<String>> headers=new HashMap<>();headers.put(""Set-Cookie"",Collections.<String>emptyList());HttpConnection.Response res=new HttpConnection.Response();res.processResponseHeaders(headers);assertEquals(0,res.cookies().size());}"
"org.jsoup.helper.HttpConnectionTest.ignoresEmptyCookieNameAndVals",0,"@Test public void ignoresEmptyCookieNameAndVals(){Map<String,List<String>> headers=new HashMap<>();List<String> cookieStrings=new ArrayList<>();cookieStrings.add(null);cookieStrings.add("""");cookieStrings.add(""one"");cookieStrings.add(""two="");cookieStrings.add(""three=;"");cookieStrings.add(""four=data;Domain=.example.com;Path=/"");headers.put(""Set-Cookie"",cookieStrings);HttpConnection.Response res=new HttpConnection.Response();res.processResponseHeaders(headers);assertEquals(4,res.cookies().size());assertEquals("""",res.cookie(""one""));assertEquals("""",res.cookie(""two""));assertEquals("""",res.cookie(""three""));assertEquals(""data"",res.cookie(""four""));}"
"org.jsoup.helper.HttpConnectionTest.connectWithUrl",0,"@Test public void connectWithUrl()throws MalformedURLException {Connection con=HttpConnection.connect(new URL(""http://example.com""));assertEquals(""http://example.com"",con.request().url().toExternalForm());}"
"org.jsoup.helper.HttpConnectionTest.throwsOnMalformedUrl",0,"@Test(expected=IllegalArgumentException.class)public void throwsOnMalformedUrl(){Connection con=HttpConnection.connect(""bzzt"");}"
"org.jsoup.helper.HttpConnectionTest.userAgent",0,"@Test public void userAgent(){Connection con=HttpConnection.connect(""http://example.com/"");assertEquals(HttpConnection.DEFAULT_UA,con.request().header(""User-Agent""));con.userAgent(""Mozilla"");assertEquals(""Mozilla"",con.request().header(""User-Agent""));}"
"org.jsoup.helper.HttpConnectionTest.timeout",0,"@Test public void timeout(){Connection con=HttpConnection.connect(""http://example.com/"");assertEquals(30 * 1000,con.request().timeout());con.timeout(1000);assertEquals(1000,con.request().timeout());}"
"org.jsoup.helper.HttpConnectionTest.referrer",0,"@Test public void referrer(){Connection con=HttpConnection.connect(""http://example.com/"");con.referrer(""http://foo.com"");assertEquals(""http://foo.com"",con.request().header(""Referer""));}"
"org.jsoup.helper.HttpConnectionTest.method",0,"@Test public void method(){Connection con=HttpConnection.connect(""http://example.com/"");assertEquals(Connection.Method.GET,con.request().method());con.method(Connection.Method.POST);assertEquals(Connection.Method.POST,con.request().method());}"
"org.jsoup.helper.HttpConnectionTest.throwsOnOddData",0,"@Test(expected=IllegalArgumentException.class)public void throwsOnOddData(){Connection con=HttpConnection.connect(""http://example.com/"");con.data(""Name"",""val"",""what"");}"
"org.jsoup.helper.HttpConnectionTest.data",0,"@Test public void data(){Connection con=HttpConnection.connect(""http://example.com/"");con.data(""Name"",""Val"",""Foo"",""bar"");Collection<Connection.KeyVal> values=con.request().data();Object[]data=values.toArray();Connection.KeyVal one=(Connection.KeyVal)data[0];Connection.KeyVal two=(Connection.KeyVal)data[1];assertEquals(""Name"",one.key());assertEquals(""Val"",one.value());assertEquals(""Foo"",two.key());assertEquals(""bar"",two.value());}"
"org.jsoup.helper.HttpConnectionTest.cookie",0,"@Test public void cookie(){Connection con=HttpConnection.connect(""http://example.com/"");con.cookie(""Name"",""Val"");assertEquals(""Val"",con.request().cookie(""Name""));}"
"org.jsoup.helper.HttpConnectionTest.inputStream",0,"@Test public void inputStream(){Connection.KeyVal kv=HttpConnection.KeyVal.create(""file"",""thumb.jpg"",ParseTest.inputStreamFrom(""Check""));assertEquals(""file"",kv.key());assertEquals(""thumb.jpg"",kv.value());assertTrue(kv.hasInputStream());kv=HttpConnection.KeyVal.create(""one"",""two"");assertEquals(""one"",kv.key());assertEquals(""two"",kv.value());assertFalse(kv.hasInputStream());}"
"org.jsoup.helper.HttpConnectionTest.requestBody",0,"@Test public void requestBody(){Connection con=HttpConnection.connect(""http://example.com/"");con.requestBody(""foo"");assertEquals(""foo"",con.request().requestBody());}"
"org.jsoup.helper.HttpConnectionTest.encodeUrl",0,"@Test public void encodeUrl()throws MalformedURLException {URL url1=new URL(""http://test.com/?q=white space"");URL url2=HttpConnection.encodeUrl(url1);assertEquals(""http://test.com/?q=white%20space"",url2.toExternalForm());}"
"org.jsoup.nodes.TextNodeTest.testBlank",0,"@Test public void testBlank(){TextNode one=new TextNode("""");TextNode two=new TextNode(""     "");TextNode three=new TextNode(""  \n\n   "");TextNode four=new TextNode(""Hello"");TextNode five=new TextNode(""  \nHello "");assertTrue(one.isBlank());assertTrue(two.isBlank());assertTrue(three.isBlank());assertFalse(four.isBlank());assertFalse(five.isBlank());}"
"org.jsoup.nodes.TextNodeTest.testTextBean",0,"@Test public void testTextBean(){Document doc=Jsoup.parse(""<p>One <span>two &amp;</span> three &amp;</p>"");Element p=doc.select(""p"").first();Element span=doc.select(""span"").first();assertEquals(""two &"",span.text());TextNode spanText=(TextNode)span.childNode(0);assertEquals(""two &"",spanText.text());TextNode tn=(TextNode)p.childNode(2);assertEquals("" three &"",tn.text());tn.text("" POW!"");assertEquals(""One <span>two &amp;</span> POW!"",TextUtil.stripNewlines(p.html()));tn.attr(tn.nodeName(),""kablam &"");assertEquals(""kablam &"",tn.text());assertEquals(""One <span>two &amp;</span>kablam &amp;"",TextUtil.stripNewlines(p.html()));}"
"org.jsoup.nodes.TextNodeTest.testSplitText",0,"@Test public void testSplitText(){Document doc=Jsoup.parse(""<div>Hello there</div>"");Element div=doc.select(""div"").first();TextNode tn=(TextNode)div.childNode(0);TextNode tail=tn.splitText(6);assertEquals(""Hello "",tn.getWholeText());assertEquals(""there"",tail.getWholeText());tail.text(""there!"");assertEquals(""Hello there!"",div.text());assertTrue(tn.parent()== tail.parent());}"
"org.jsoup.nodes.TextNodeTest.testSplitAnEmbolden",0,"@Test public void testSplitAnEmbolden(){Document doc=Jsoup.parse(""<div>Hello there</div>"");Element div=doc.select(""div"").first();TextNode tn=(TextNode)div.childNode(0);TextNode tail=tn.splitText(6);tail.wrap(""<b></b>"");assertEquals(""Hello <b>there</b>"",TextUtil.stripNewlines(div.html()));}"
"org.jsoup.nodes.TextNodeTest.testWithSupplementaryCharacter",0,"@Test public void testWithSupplementaryCharacter(){Document doc=Jsoup.parse(new String(Character.toChars(135361)));TextNode t=doc.body().textNodes().get(0);assertEquals(new String(Character.toChars(135361)),t.outerHtml().trim());}"
"org.jsoup.integration.UrlConnectTest.fetchBaidu",0,"@Test public void fetchBaidu()throws IOException {Connection.Response res=Jsoup.connect(""http://www.baidu.com/"").timeout(10 * 1000).execute();Document doc=res.parse();assertEquals(""GBK"",doc.outputSettings().charset().displayName());assertEquals(""GBK"",res.charset());assert(res.hasCookie(""BAIDUID""));assertEquals(""text/html;charset=gbk"",res.contentType());}"
"org.jsoup.integration.UrlConnectTest.exceptOnUnknownContentType",0,"@Test public void exceptOnUnknownContentType(){String url=""http://direct.jsoup.org/rez/osi_logo.png"";boolean threw=false;try {Document doc=Jsoup.parse(new URL(url),3000);}catch(UnsupportedMimeTypeException e){threw=true;assertEquals(""org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*,application/xml,or application/xhtml+xml. Mimetype=image/png,URL=http://direct.jsoup.org/rez/osi_logo.png"",e.toString());assertEquals(url,e.getUrl());assertEquals(""image/png"",e.getMimeType());}catch(IOException e){}assertTrue(threw);}"
"org.jsoup.integration.UrlConnectTest.ignoresContentTypeIfSoConfigured",0,"@Test public void ignoresContentTypeIfSoConfigured()throws IOException {Document doc=Jsoup.connect(""https://jsoup.org/rez/osi_logo.png"").ignoreContentType(true).get();assertEquals("""",doc.title());}"
"org.jsoup.integration.UrlConnectTest.followsTempRedirect",0,"@Test public void followsTempRedirect()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302.pl"");Document doc=con.get();assertTrue(doc.title().contains(""jsoup""));}"
"org.jsoup.integration.UrlConnectTest.followsNewTempRedirect",0,"@Test public void followsNewTempRedirect()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/307.pl"");Document doc=con.get();assertTrue(doc.title().contains(""jsoup""));assertEquals(""https://jsoup.org/"",con.response().url().toString());}"
"org.jsoup.integration.UrlConnectTest.postRedirectsFetchWithGet",0,"@Test public void postRedirectsFetchWithGet()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302.pl"").data(""Argument"",""Riposte"").method(Connection.Method.POST);Connection.Response res=con.execute();assertEquals(""https://jsoup.org/"",res.url().toExternalForm());assertEquals(Connection.Method.GET,res.method());}"
"org.jsoup.integration.UrlConnectTest.followsRedirectToHttps",0,"@Test public void followsRedirectToHttps()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302-secure.pl"");con.data(""id"",""5"");Document doc=con.get();assertTrue(doc.title().contains(""Google""));}"
"org.jsoup.integration.UrlConnectTest.followsRelativeRedirect",0,"@Test public void followsRelativeRedirect()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302-rel.pl"");Document doc=con.post();assertTrue(doc.title().contains(""HTML Tidy Online""));}"
"org.jsoup.integration.UrlConnectTest.followsRelativeDotRedirect",0,"@Test public void followsRelativeDotRedirect()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302-rel-dot.pl"");Document doc=con.post();assertTrue(doc.title().contains(""OK""));assertEquals(doc.location(),""http://direct.infohound.net/tools/ok.html"");}"
"org.jsoup.integration.UrlConnectTest.followsRelativeDotRedirect2",0,"@Test public void followsRelativeDotRedirect2()throws IOException {Connection con=Jsoup.connect(""http://esportspenedes.cat"").timeout(10000);Document doc=con.post();assertEquals(doc.location(),""http://esportspenedes.cat/ep/index.php"");}"
"org.jsoup.integration.UrlConnectTest.followsRedirectsWithWithespaces",0,"@Test public void followsRedirectsWithWithespaces()throws IOException {Connection con=Jsoup.connect(""http://tinyurl.com/kgofxl8"");Document doc=con.get();assertTrue(doc.title().contains(""Google""));}"
"org.jsoup.integration.UrlConnectTest.gracefullyHandleBrokenLocationRedirect",0,"@Test public void gracefullyHandleBrokenLocationRedirect()throws IOException {Connection con=Jsoup.connect(""http://aag-ye.com"");con.get();assertTrue(true);}"
"org.jsoup.integration.UrlConnectTest.throwsExceptionOnError",0,"@Test public void throwsExceptionOnError(){String url=""http://direct.infohound.net/tools/404"";Connection con=Jsoup.connect(url);boolean threw=false;try {Document doc=con.get();}catch(HttpStatusException e){threw=true;assertEquals(""org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404,URL=http://direct.infohound.net/tools/404"",e.toString());assertEquals(url,e.getUrl());assertEquals(404,e.getStatusCode());}catch(IOException e){}assertTrue(threw);}"
"org.jsoup.integration.UrlConnectTest.ignoresExceptionIfSoConfigured",0,"@Test public void ignoresExceptionIfSoConfigured()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/404"").ignoreHttpErrors(true);Connection.Response res=con.execute();Document doc=res.parse();assertEquals(404,res.statusCode());assertEquals(""404 Not Found"",doc.select(""h1"").first().text());}"
"org.jsoup.integration.UrlConnectTest.ignores500tExceptionIfSoConfigured",0,"@Test public void ignores500tExceptionIfSoConfigured()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/500.pl"").ignoreHttpErrors(true);Connection.Response res=con.execute();Document doc=res.parse();assertEquals(500,res.statusCode());assertEquals(""Application Error"",res.statusMessage());assertEquals(""Woops"",doc.select(""h1"").first().text());}"
"org.jsoup.integration.UrlConnectTest.ignores500WithNoContentExceptionIfSoConfigured",0,"@Test public void ignores500WithNoContentExceptionIfSoConfigured()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/500-no-content.pl"").ignoreHttpErrors(true);Connection.Response res=con.execute();Document doc=res.parse();assertEquals(500,res.statusCode());assertEquals(""Application Error"",res.statusMessage());}"
"org.jsoup.integration.UrlConnectTest.ignores200WithNoContentExceptionIfSoConfigured",0,"@Test public void ignores200WithNoContentExceptionIfSoConfigured()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/200-no-content.pl"").ignoreHttpErrors(true);Connection.Response res=con.execute();Document doc=res.parse();assertEquals(200,res.statusCode());assertEquals(""All Good"",res.statusMessage());}"
"org.jsoup.integration.UrlConnectTest.handles200WithNoContent",0,"@Test public void handles200WithNoContent()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/200-no-content.pl"").userAgent(browserUa);Connection.Response res=con.execute();Document doc=res.parse();assertEquals(200,res.statusCode());con=Jsoup.connect(""http://direct.infohound.net/tools/200-no-content.pl"").parser(Parser.xmlParser()).userAgent(browserUa);res=con.execute();doc=res.parse();assertEquals(200,res.statusCode());}"
"org.jsoup.integration.UrlConnectTest.doesntRedirectIfSoConfigured",0,"@Test public void doesntRedirectIfSoConfigured()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302.pl"").followRedirects(false);Connection.Response res=con.execute();assertEquals(302,res.statusCode());assertEquals(""http://jsoup.org"",res.header(""Location""));}"
"org.jsoup.integration.UrlConnectTest.redirectsResponseCookieToNextResponse",0,"@Test public void redirectsResponseCookieToNextResponse()throws IOException {Connection con=Jsoup.connect(""http://direct.infohound.net/tools/302-cookie.pl"");Connection.Response res=con.execute();assertEquals(""asdfg123"",res.cookie(""token""));Document doc=res.parse();assertEquals(""token=asdfg123;uid=jhy"",ihVal(""HTTP_COOKIE"",doc));}"
"org.jsoup.integration.UrlConnectTest.maximumRedirects",0,"@Test public void maximumRedirects(){boolean threw=false;try {Document doc=Jsoup.connect(""http://direct.infohound.net/tools/loop.pl"").get();}catch(IOException e){assertTrue(e.getMessage().contains(""Too many redirects""));threw=true;}assertTrue(threw);}"
"org.jsoup.integration.UrlConnectTest.handlesDodgyCharset",0,"@Test public void handlesDodgyCharset()throws IOException {String url=""http://direct.infohound.net/tools/bad-charset.pl"";Connection.Response res=Jsoup.connect(url).execute();assertEquals(""text/html;charset=UFT8"",res.header(""Content-Type""));assertEquals(null,res.charset());Document doc=res.parse();assertTrue(doc.text().contains(""Hello!""));assertEquals(""UTF-8"",res.charset());}"
"org.jsoup.integration.UrlConnectTest.maxBodySize",0,"@Test public void maxBodySize()throws IOException {String url=""http://direct.infohound.net/tools/large.html"";Connection.Response defaultRes=Jsoup.connect(url).execute();Connection.Response smallRes=Jsoup.connect(url).maxBodySize(50 * 1024).execute();Connection.Response mediumRes=Jsoup.connect(url).maxBodySize(200 * 1024).execute();Connection.Response largeRes=Jsoup.connect(url).maxBodySize(300 * 1024).execute();Connection.Response unlimitedRes=Jsoup.connect(url).maxBodySize(0).execute();int actualDocText=269541;assertEquals(actualDocText,defaultRes.parse().text().length());assertEquals(49165,smallRes.parse().text().length());assertEquals(196577,mediumRes.parse().text().length());assertEquals(actualDocText,largeRes.parse().text().length());assertEquals(actualDocText,unlimitedRes.parse().text().length());}"
"org.jsoup.integration.UrlConnectTest.testUnsafeFail",0,"/** * Verify that security disabling feature works properly. <p/> 1. try to hit url with invalid certificate and evaluate that exception is thrown* @throws Exception*/@Test(expected=IOException.class)public void testUnsafeFail()throws Exception {String url=WEBSITE_WITH_INVALID_CERTIFICATE;Jsoup.connect(url).execute();}"
"org.jsoup.integration.UrlConnectTest.testSNIFail",0,"/** * Verify that requests to websites with SNI fail on jdk 1.6 <p/> read for more details: http://en.wikipedia.org/wiki/Server_Name_Indication Test is ignored independent from others as it requires JDK 1.6* @throws Exception*/@Test(expected=IOException.class)public void testSNIFail()throws Exception {String url=WEBSITE_WITH_SNI;Jsoup.connect(url).execute();}"
"org.jsoup.integration.UrlConnectTest.testSNIPass",0,"/** * Verify that requests to websites with SNI pass <p/> <b>NB!</b> this test is FAILING right now on jdk 1.6* @throws Exception*/@Test public void testSNIPass()throws Exception {String url=WEBSITE_WITH_SNI;Connection.Response defaultRes=Jsoup.connect(url).validateTLSCertificates(false).execute();assertEquals(defaultRes.statusCode(),200);}"
"org.jsoup.integration.UrlConnectTest.testUnsafePass",0,"/** * Verify that security disabling feature works properly. <p/> 1. disable security checks and call the same url to verify that content is consumed correctly* @throws Exception*/@Test public void testUnsafePass()throws Exception {String url=WEBSITE_WITH_INVALID_CERTIFICATE;Connection.Response defaultRes=Jsoup.connect(url).validateTLSCertificates(false).execute();assertEquals(defaultRes.statusCode(),200);}"
"org.jsoup.integration.UrlConnectTest.shouldWorkForCharsetInExtraAttribute",0,"@Test public void shouldWorkForCharsetInExtraAttribute()throws IOException {Connection.Response res=Jsoup.connect(""https://www.creditmutuel.com/groupe/fr/"").execute();Document doc=res.parse();assertEquals(""ISO-8859-1"",res.charset());}"
"org.jsoup.integration.UrlConnectTest.shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags",0,"@Test public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags()throws IOException {Connection.Response res=Jsoup.connect(""http://aamo.info/"").execute();res.parse();assertEquals(""ISO-8859-1"",res.charset());}"
"org.jsoup.integration.UrlConnectTest.shouldParseBrokenHtml5MetaCharsetTagCorrectly",0,"@Test public void shouldParseBrokenHtml5MetaCharsetTagCorrectly()throws IOException {Connection.Response res=Jsoup.connect(""http://9kuhkep.net"").execute();res.parse();assertEquals(""UTF-8"",res.charset());}"
"org.jsoup.integration.UrlConnectTest.shouldEmptyMetaCharsetCorrectly",0,"@Test public void shouldEmptyMetaCharsetCorrectly()throws IOException {Connection.Response res=Jsoup.connect(""http://aastmultimedia.com"").execute();res.parse();assertEquals(""UTF-8"",res.charset());}"
"org.jsoup.integration.UrlConnectTest.shouldWorkForDuplicateCharsetInTag",0,"@Test public void shouldWorkForDuplicateCharsetInTag()throws IOException {Connection.Response res=Jsoup.connect(""http://aaptsdassn.org"").execute();Document doc=res.parse();assertEquals(""ISO-8859-1"",res.charset());}"
"org.jsoup.integration.UrlConnectTest.baseHrefCorrectAfterHttpEquiv",0,"@Test public void baseHrefCorrectAfterHttpEquiv()throws IOException {Connection.Response res=Jsoup.connect(""http://direct.infohound.net/tools/charset-base.html"").execute();Document doc=res.parse();assertEquals(""http://example.com/foo.jpg"",doc.select(""img"").first().absUrl(""src""));}"
"org.jsoup.integration.UrlConnectTest.postHtmlFile",0,"/** * Test fetching a form,and submitting it with a file attached.*/@Test public void postHtmlFile()throws IOException {Document index=Jsoup.connect(""http://direct.infohound.net/tidy/"").get();FormElement form=index.select(""[name=tidy]"").forms().get(0);Connection post=form.submit();File uploadFile=ParseTest.getFile(""/htmltests/google-ipod.html"");FileInputStream stream=new FileInputStream(uploadFile);Connection.KeyVal fileData=post.data(""_file"");fileData.value(""check.html"");fileData.inputStream(stream);Connection.Response res;try {res=post.execute();}finally {stream.close();}Document out=res.parse();assertTrue(out.text().contains(""HTML Tidy Complete""));}"
"org.jsoup.integration.UrlConnectTest.handles201Created",0,"@Test public void handles201Created()throws IOException {Document doc=Jsoup.connect(""http://direct.infohound.net/tools/201.pl"").get();assertEquals(""https://jsoup.org/"",doc.location());}"
"org.jsoup.integration.UrlConnectTest.fetchToW3c",0,"@Test public void fetchToW3c()throws IOException {String url=""https://jsoup.org"";Document doc=Jsoup.connect(url).get();W3CDom dom=new W3CDom();org.w3c.dom.Document wDoc=dom.fromJsoup(doc);assertEquals(url,wDoc.getDocumentURI());String html=dom.asString(wDoc);assertTrue(html.contains(""jsoup""));}"
"org.jsoup.integration.UrlConnectTest.fetchHandlesXml",0,"@Test public void fetchHandlesXml()throws IOException {String xmlUrl=""http://direct.infohound.net/tools/parse-xml.xml"";Connection con=Jsoup.connect(xmlUrl);Document doc=con.get();Connection.Request req=con.request();assertTrue(req.parser().getTreeBuilder()instanceof XmlTreeBuilder);assertEquals(""<xml> <link> one </link> <table> Two </table> </xml>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.integration.UrlConnectTest.fetchHandlesXmlAsHtmlWhenParserSet",0,"@Test public void fetchHandlesXmlAsHtmlWhenParserSet()throws IOException {String xmlUrl=""http://direct.infohound.net/tools/parse-xml.xml"";Connection con=Jsoup.connect(xmlUrl).parser(Parser.htmlParser());Document doc=con.get();Connection.Request req=con.request();assertTrue(req.parser().getTreeBuilder()instanceof HtmlTreeBuilder);assertEquals(""<html> <head></head> <body> <xml> <link>one <table> Two </table> </xml> </body> </html>"",StringUtil.normaliseWhitespace(doc.outerHtml()));}"
"org.jsoup.integration.UrlConnectTest.combinesSameHeadersWithComma",0,"@Test public void combinesSameHeadersWithComma()throws IOException {String url=""http://direct.infohound.net/tools/q.pl"";Connection con=Jsoup.connect(url);con.get();Connection.Response res=con.response();assertEquals(""text/html"",res.header(""Content-Type""));assertEquals(""no-cache,no-store"",res.header(""Cache-Control""));List<String> header=res.headers(""Cache-Control"");assertEquals(2,header.size());assertEquals(""no-cache"",header.get(0));assertEquals(""no-store"",header.get(1));}"
"org.jsoup.integration.UrlConnectTest.sendHeadRequest",0,"@Test public void sendHeadRequest()throws IOException {String url=""http://direct.infohound.net/tools/parse-xml.xml"";Connection con=Jsoup.connect(url).method(Connection.Method.HEAD);final Connection.Response response=con.execute();assertEquals(""text/xml"",response.header(""Content-Type""));assertEquals("""",response.body());Document doc=response.parse();assertEquals("""",doc.text());}"
"org.jsoup.integration.UrlConnectTest.fetchViaHttpProxy",0,"@Test public void fetchViaHttpProxy()throws IOException {String url=""https://jsoup.org"";Proxy proxy=new Proxy(Proxy.Type.HTTP,InetSocketAddress.createUnresolved(""localhost"",8888));Document doc=Jsoup.connect(url).proxy(proxy).get();assertTrue(doc.title().contains(""jsoup""));}"
"org.jsoup.integration.UrlConnectTest.fetchViaHttpProxySetByArgument",0,"@Test public void fetchViaHttpProxySetByArgument()throws IOException {String url=""https://jsoup.org"";Document doc=Jsoup.connect(url).proxy(""localhost"",8888).get();assertTrue(doc.title().contains(""jsoup""));}"
"org.jsoup.integration.UrlConnectTest.invalidProxyFails",0,"@Test public void invalidProxyFails()throws IOException {boolean caught=false;String url=""https://jsoup.org"";try {Document doc=Jsoup.connect(url).proxy(""localhost"",8889).get();}catch(IOException e){caught=e instanceof ConnectException;}assertTrue(caught);}"
"org.jsoup.integration.UrlConnectTest.proxyGetAndSet",0,"@Test public void proxyGetAndSet()throws IOException {}"
"org.jsoup.integration.UrlConnectTest.throwsIfRequestBodyForGet",0,"@Test public void throwsIfRequestBodyForGet()throws IOException {boolean caught=false;String url=""https://jsoup.org"";try {Document doc=Jsoup.connect(url).requestBody(""fail"").get();}catch(IllegalArgumentException e){caught=true;}assertTrue(caught);}"
"org.jsoup.integration.UrlConnectTest.canSpecifyResponseCharset",0,"@Test public void canSpecifyResponseCharset()throws IOException {String noCharsetUrl=""http://direct.infohound.net/tools/Windows-1252-nocharset.html"";String charsetUrl=""http://direct.infohound.net/tools/Windows-1252-charset.html"";Connection.Response res1=Jsoup.connect(charsetUrl).execute();assertEquals(null,res1.charset());final Document doc1=res1.parse();assertEquals(""windows-1252"",doc1.charset().displayName());assertEquals(""Cost is €100"",doc1.select(""p"").text());assertTrue(doc1.text().contains(""€""));Connection.Response res2=Jsoup.connect(noCharsetUrl).execute();assertEquals(null,res2.charset());final Document doc2=res2.parse();assertEquals(""UTF-8"",doc2.charset().displayName());assertEquals(""Cost is �100"",doc2.select(""p"").text());assertTrue(doc2.text().contains(""�""));Connection.Response res3=Jsoup.connect(noCharsetUrl).execute();assertEquals(null,res3.charset());res3.charset(""windows-1252"");assertEquals(""windows-1252"",res3.charset());final Document doc3=res3.parse();assertEquals(""windows-1252"",doc3.charset().displayName());assertEquals(""Cost is €100"",doc3.select(""p"").text());assertTrue(doc3.text().contains(""€""));}"
"org.jsoup.integration.UrlConnectTest.handlesUnescapedRedirects",0,"@Test public void handlesUnescapedRedirects()throws IOException {String url=""http://direct.infohound.net/tools/302-utf.pl"";String urlEscaped=""http://direct.infohound.net/tools/test%F0%9F%92%A9.html"";Connection.Response res=Jsoup.connect(url).execute();Document doc=res.parse();assertEquals(doc.body().text(),""\uD83D\uDCA9!"");assertEquals(doc.location(),urlEscaped);Connection.Response res2=Jsoup.connect(url).followRedirects(false).execute();assertEquals(""/tools/test\uD83D\uDCA9.html"",res2.header(""Location""));}"
"org.jsoup.integration.UrlConnectTest.handlesEscapesInRedirecct",0,"@Test public void handlesEscapesInRedirecct()throws IOException {Document doc=Jsoup.connect(""http://infohound.net/tools/302-escaped.pl"").get();assertEquals(""http://infohound.net/tools/q.pl?q=one%20two"",doc.location());doc=Jsoup.connect(""http://infohound.net/tools/302-white.pl"").get();assertEquals(""http://infohound.net/tools/q.pl?q=one%20two"",doc.location());}"
"org.jsoup.integration.UrlConnectTest.handlesUt8fInUrl",0,"@Test public void handlesUt8fInUrl()throws IOException {String url=""http://direct.infohound.net/tools/test\uD83D\uDCA9.html"";String urlEscaped=""http://direct.infohound.net/tools/test%F0%9F%92%A9.html"";Connection.Response res=Jsoup.connect(url).execute();Document doc=res.parse();assertEquals(""\uD83D\uDCA9!"",doc.body().text());assertEquals(urlEscaped,doc.location());}"
"org.jsoup.integration.UrlConnectTest.inWildUtfRedirect",0,"@Test public void inWildUtfRedirect()throws IOException {Connection.Response res=Jsoup.connect(""http://brabantn.ws/Q4F"").execute();Document doc=res.parse();assertEquals(""http://www.omroepbrabant.nl/?news/2474781303/Gestrande+ree+in+Oss+niet+verdoofd,+maar+doodgeschoten+%E2%80%98Dit+kan+gewoon+niet,+bizar%E2%80%99+[VIDEO].aspx"",doc.location());}"
"org.jsoup.integration.UrlConnectTest.inWildUtfRedirect2",0,"@Test public void inWildUtfRedirect2()throws IOException {Connection.Response res=Jsoup.connect(""https://ssl.souq.com/sa-en/2724288604627/s"").execute();Document doc=res.parse();assertEquals(""https://saudi.souq.com/sa-en/%D8%AE%D8%B2%D9%86%D8%A9-%D8%A2%D9%85%D9%86%D8%A9-3-%D8%B7%D8%A8%D9%82%D8%A7%D8%AA-%D8%A8%D9%86%D8%B8%D8%A7%D9%85-%D9%82%D9%81%D9%84-%D8%A5%D9%84%D9%83%D8%AA%D8%B1%D9%88%D9%86%D9%8A-bsd11523-6831477/i/?ctype=dsrch"",doc.location());}"
"org.jsoup.integration.UrlConnectTest.handlesEscapedRedirectUrls",0,"@Test public void handlesEscapedRedirectUrls()throws IOException {String url=""http://www.altalex.com/documents/news/2016/12/06/questioni-civilistiche-conseguenti-alla-depenalizzazione"";Connection.Response res=Jsoup.connect(url).proxy(""localhost"",8888).execute();Document doc=res.parse();assertEquals(200,res.statusCode());}"
"org.jsoup.integration.UrlConnectTest.handlesUnicodeInQuery",0,"@Test public void handlesUnicodeInQuery()throws IOException {Document doc=Jsoup.connect(""https://www.google.pl/search?q=gąska"").get();assertEquals(""gąska - Szukaj w Google"",doc.title());doc=Jsoup.connect(""http://mov-world.net/archiv/TV/A/%23No.Title/"").get();assertEquals(""Index of /archiv/TV/A/%23No.Title"",doc.title());}"
"org.jsoup.integration.UrlConnectTest.handlesSuperDeepPage",0,"@Test public void handlesSuperDeepPage()throws IOException {long start=System.currentTimeMillis();String url=""http://sv.stargate.wikia.com/wiki/M2J"";Document doc=Jsoup.connect(url).get();assertEquals(""M2J | Sv.stargate Wiki | FANDOM powered by Wikia"",doc.title());assertEquals(110160,doc.select(""dd"").size());assertTrue(System.currentTimeMillis()- start < 1000);}"
"org.jsoup.integration.UrlConnectTest.handles966",0,"@Test public void handles966()throws IOException {Document doc=Jsoup.connect(""http://szshb.nxszs.gov.cn/"").get();assertEquals(""石嘴山市环境保护局"",doc.title());}"
"org.jsoup.parser.HtmlTreeBuilderTest.ensureSearchArraysAreSorted",0,"@Test public void ensureSearchArraysAreSorted(){String[][]arrays={HtmlTreeBuilder.TagsSearchInScope,HtmlTreeBuilder.TagSearchList,HtmlTreeBuilder.TagSearchButton,HtmlTreeBuilder.TagSearchTableScope,HtmlTreeBuilder.TagSearchSelectScope,HtmlTreeBuilder.TagSearchEndTags,HtmlTreeBuilder.TagSearchSpecial};for(String[]array : arrays){String[]copy=Arrays.copyOf(array,array.length);Arrays.sort(array);assertArrayEquals(array,copy);}}"
"org.jsoup.select.QueryParserTest.testOrGetsCorrectPrecedence",0,"@Test public void testOrGetsCorrectPrecedence(){Evaluator eval=QueryParser.parse(""a b,c d,e f"");assertTrue(eval instanceof CombiningEvaluator.Or);CombiningEvaluator.Or or=(CombiningEvaluator.Or)eval;assertEquals(3,or.evaluators.size());for(Evaluator innerEval : or.evaluators){assertTrue(innerEval instanceof CombiningEvaluator.And);CombiningEvaluator.And and=(CombiningEvaluator.And)innerEval;assertEquals(2,and.evaluators.size());assertTrue(and.evaluators.get(0)instanceof Evaluator.Tag);assertTrue(and.evaluators.get(1)instanceof StructuralEvaluator.Parent);}}"
"org.jsoup.select.QueryParserTest.testParsesMultiCorrectly",0,"@Test public void testParsesMultiCorrectly(){Evaluator eval=QueryParser.parse("".foo > ol,ol > li + li"");assertTrue(eval instanceof CombiningEvaluator.Or);CombiningEvaluator.Or or=(CombiningEvaluator.Or)eval;assertEquals(2,or.evaluators.size());CombiningEvaluator.And andLeft=(CombiningEvaluator.And)or.evaluators.get(0);CombiningEvaluator.And andRight=(CombiningEvaluator.And)or.evaluators.get(1);assertEquals(""ol :ImmediateParent.foo"",andLeft.toString());assertEquals(2,andLeft.evaluators.size());assertEquals(""li :prevli :ImmediateParentol"",andRight.toString());assertEquals(2,andLeft.evaluators.size());}"
"org.jsoup.select.QueryParserTest.exceptionOnUncloseAttribute",0,"@Test(expected=Selector.SelectorParseException.class)public void exceptionOnUncloseAttribute(){Evaluator parse=QueryParser.parse(""section > a[href=\""]"");}"
"org.jsoup.select.QueryParserTest.testParsesSingleQuoteInContains",0,"@Test(expected=Selector.SelectorParseException.class)public void testParsesSingleQuoteInContains(){Evaluator parse=QueryParser.parse(""p:contains(One \"" One)"");}"
"org.jsoup.helper.W3CDomTest.simpleConversion",0,"@Test public void simpleConversion(){String html=""<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')"";org.jsoup.nodes.Document doc=Jsoup.parse(html);W3CDom w3c=new W3CDom();Document wDoc=w3c.fromJsoup(doc);String out=TextUtil.stripNewlines(w3c.asString(wDoc));String expected=TextUtil.stripNewlines(""<html><head><META http-equiv=\""Content-Type\"" content=\""text/html;charset=UTF-8\""><title>W3c</title>"" + ""</head><body><p class=\""one\"" id=\""12\"">Text</p><!-- comment --><invalid>What<script>alert('!')</script>"" + ""</invalid></body></html>"");assertEquals(expected,out);}"
"org.jsoup.helper.W3CDomTest.convertsGoogle",0,"@Test public void convertsGoogle()throws IOException {File in=ParseTest.getFile(""/htmltests/google-ipod.html"");org.jsoup.nodes.Document doc=Jsoup.parse(in,""UTF8"");W3CDom w3c=new W3CDom();Document wDoc=w3c.fromJsoup(doc);Node htmlEl=wDoc.getChildNodes().item(0);assertEquals(null,htmlEl.getNamespaceURI());assertEquals(""html"",htmlEl.getLocalName());assertEquals(""html"",htmlEl.getNodeName());String out=w3c.asString(wDoc);assertTrue(out.contains(""ipod""));}"
"org.jsoup.helper.W3CDomTest.convertsGoogleLocation",0,"@Test public void convertsGoogleLocation()throws IOException {File in=ParseTest.getFile(""/htmltests/google-ipod.html"");org.jsoup.nodes.Document doc=Jsoup.parse(in,""UTF8"");W3CDom w3c=new W3CDom();Document wDoc=w3c.fromJsoup(doc);String out=w3c.asString(wDoc);assertEquals(doc.location(),wDoc.getDocumentURI());}"
"org.jsoup.helper.W3CDomTest.namespacePreservation",0,"@Test public void namespacePreservation()throws IOException {File in=ParseTest.getFile(""/htmltests/namespaces.xhtml"");org.jsoup.nodes.Document jsoupDoc;jsoupDoc=Jsoup.parse(in,""UTF-8"");Document doc;org.jsoup.helper.W3CDom jDom=new org.jsoup.helper.W3CDom();doc=jDom.fromJsoup(jsoupDoc);Node htmlEl=doc.getChildNodes().item(0);assertEquals(""http://www.w3.org/1999/xhtml"",htmlEl.getNamespaceURI());assertEquals(""html"",htmlEl.getLocalName());assertEquals(""html"",htmlEl.getNodeName());Node epubTitle=htmlEl.getChildNodes().item(2).getChildNodes().item(3);assertEquals(""http://www.idpf.org/2007/ops"",epubTitle.getNamespaceURI());assertEquals(""title"",epubTitle.getLocalName());assertEquals(""epub:title"",epubTitle.getNodeName());Node xSection=epubTitle.getNextSibling().getNextSibling();assertEquals(""urn:test"",xSection.getNamespaceURI());assertEquals(""section"",xSection.getLocalName());assertEquals(""x:section"",xSection.getNodeName());}"
"org.jsoup.helper.W3CDomTest.handlesInvalidAttributeNames",0,"@Test public void handlesInvalidAttributeNames(){String html=""<html><head></head><body style=\""color: red\"" \"" name\""></body></html>"";org.jsoup.nodes.Document jsoupDoc;jsoupDoc=Jsoup.parse(html);Element body=jsoupDoc.select(""body"").first();assertTrue(body.hasAttr(""\""""));assertTrue(body.hasAttr(""name\""""));Document w3Doc=new W3CDom().fromJsoup(jsoupDoc);}"
"org.jsoup.parser.XmlTreeBuilderTest.testSimpleXmlParse",0,"@Test public void testSimpleXmlParse(){String xml=""<doc id=2 href='/bar'>Foo <br /><link>One</link><link>Two</link></doc>"";XmlTreeBuilder tb=new XmlTreeBuilder();Document doc=tb.parse(xml,""http://foo.com/"");assertEquals(""<doc id=\""2\"" href=\""/bar\"">Foo <br /><link>One</link><link>Two</link></doc>"",TextUtil.stripNewlines(doc.html()));assertEquals(doc.getElementById(""2"").absUrl(""href""),""http://foo.com/bar"");}"
"org.jsoup.parser.XmlTreeBuilderTest.testPopToClose",0,"@Test public void testPopToClose(){String xml=""<doc><val>One<val>Two</val></bar>Three</doc>"";XmlTreeBuilder tb=new XmlTreeBuilder();Document doc=tb.parse(xml,""http://foo.com/"");assertEquals(""<doc><val>One<val>Two</val>Three</val></doc>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.XmlTreeBuilderTest.testCommentAndDocType",0,"@Test public void testCommentAndDocType(){String xml=""<!DOCTYPE HTML><!-- a comment -->One <qux />Two"";XmlTreeBuilder tb=new XmlTreeBuilder();Document doc=tb.parse(xml,""http://foo.com/"");assertEquals(""<!DOCTYPE HTML><!-- a comment -->One <qux />Two"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.XmlTreeBuilderTest.testSupplyParserToJsoupClass",0,"@Test public void testSupplyParserToJsoupClass(){String xml=""<doc><val>One<val>Two</val></bar>Three</doc>"";Document doc=Jsoup.parse(xml,""http://foo.com/"",Parser.xmlParser());assertEquals(""<doc><val>One<val>Two</val>Three</val></doc>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.XmlTreeBuilderTest.testSupplyParserToConnection",0,"@Ignore @Test public void testSupplyParserToConnection()throws IOException {String xmlUrl=""http://direct.infohound.net/tools/jsoup-xml-test.xml"";Document xmlDoc=Jsoup.connect(xmlUrl).parser(Parser.xmlParser()).get();Document htmlDoc=Jsoup.connect(xmlUrl).parser(Parser.htmlParser()).get();Document autoXmlDoc=Jsoup.connect(xmlUrl).get();assertEquals(""<doc><val>One<val>Two</val>Three</val></doc>"",TextUtil.stripNewlines(xmlDoc.html()));assertFalse(htmlDoc.equals(xmlDoc));assertEquals(xmlDoc,autoXmlDoc);assertEquals(1,htmlDoc.select(""head"").size());assertEquals(0,xmlDoc.select(""head"").size());assertEquals(0,autoXmlDoc.select(""head"").size());}"
"org.jsoup.parser.XmlTreeBuilderTest.testSupplyParserToDataStream",0,"@Test public void testSupplyParserToDataStream()throws IOException,URISyntaxException {File xmlFile=new File(XmlTreeBuilder.class.getResource(""/htmltests/xml-test.xml"").toURI());InputStream inStream=new FileInputStream(xmlFile);Document doc=Jsoup.parse(inStream,null,""http://foo.com"",Parser.xmlParser());assertEquals(""<doc><val>One<val>Two</val>Three</val></doc>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.XmlTreeBuilderTest.testDoesNotForceSelfClosingKnownTags",0,"@Test public void testDoesNotForceSelfClosingKnownTags(){Document htmlDoc=Jsoup.parse(""<br>one</br>"");assertEquals(""<br>one\n<br>"",htmlDoc.body().html());Document xmlDoc=Jsoup.parse(""<br>one</br>"","""",Parser.xmlParser());assertEquals(""<br>one</br>"",xmlDoc.html());}"
"org.jsoup.parser.XmlTreeBuilderTest.handlesXmlDeclarationAsDeclaration",0,"@Test public void handlesXmlDeclarationAsDeclaration(){String html=""<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->"";Document doc=Jsoup.parse(html,"""",Parser.xmlParser());assertEquals(""<?xml encoding=\""UTF-8\""?> <body> One </body> <!-- comment -->"",StringUtil.normaliseWhitespace(doc.outerHtml()));assertEquals(""#declaration"",doc.childNode(0).nodeName());assertEquals(""#comment"",doc.childNode(2).nodeName());}"
"org.jsoup.parser.XmlTreeBuilderTest.xmlFragment",0,"@Test public void xmlFragment(){String xml=""<one src='/foo/' />Two<three><four /></three>"";List<Node> nodes=Parser.parseXmlFragment(xml,""http://example.com/"");assertEquals(3,nodes.size());assertEquals(""http://example.com/foo/"",nodes.get(0).absUrl(""src""));assertEquals(""one"",nodes.get(0).nodeName());assertEquals(""Two"",((TextNode)nodes.get(1)).text());}"
"org.jsoup.parser.XmlTreeBuilderTest.xmlParseDefaultsToHtmlOutputSyntax",0,"@Test public void xmlParseDefaultsToHtmlOutputSyntax(){Document doc=Jsoup.parse(""x"","""",Parser.xmlParser());assertEquals(Syntax.xml,doc.outputSettings().syntax());}"
"org.jsoup.parser.XmlTreeBuilderTest.testDoesHandleEOFInTag",0,"@Test public void testDoesHandleEOFInTag(){String html=""<img src=asdf onerror=\""alert(1)\"" x="";Document xmlDoc=Jsoup.parse(html,"""",Parser.xmlParser());assertEquals(""<img src=\""asdf\"" onerror=\""alert(1)\"" x=\""\"" />"",xmlDoc.html());}"
"org.jsoup.parser.XmlTreeBuilderTest.testDetectCharsetEncodingDeclaration",0,"@Test public void testDetectCharsetEncodingDeclaration()throws IOException,URISyntaxException {File xmlFile=new File(XmlTreeBuilder.class.getResource(""/htmltests/xml-charset.xml"").toURI());InputStream inStream=new FileInputStream(xmlFile);Document doc=Jsoup.parse(inStream,null,""http://example.com/"",Parser.xmlParser());assertEquals(""ISO-8859-1"",doc.charset().name());assertEquals(""<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?> <data>äöåéü</data>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.XmlTreeBuilderTest.testParseDeclarationAttributes",0,"@Test public void testParseDeclarationAttributes(){String xml=""<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>"";Document doc=Jsoup.parse(xml,"""",Parser.xmlParser());XmlDeclaration decl=(XmlDeclaration)doc.childNode(0);assertEquals(""1"",decl.attr(""version""));assertEquals(""UTF-8"",decl.attr(""encoding""));assertEquals(""else"",decl.attr(""something""));assertEquals(""version=\""1\"" encoding=\""UTF-8\"" something=\""else\"""",decl.getWholeDeclaration());assertEquals(""<?xml version=\""1\"" encoding=\""UTF-8\"" something=\""else\""?>"",decl.outerHtml());}"
"org.jsoup.parser.XmlTreeBuilderTest.caseSensitiveDeclaration",0,"@Test public void caseSensitiveDeclaration(){String xml=""<?XML version='1' encoding='UTF-8' something='else'?>"";Document doc=Jsoup.parse(xml,"""",Parser.xmlParser());assertEquals(""<?XML version=\""1\"" encoding=\""UTF-8\"" something=\""else\""?>"",doc.outerHtml());}"
"org.jsoup.parser.XmlTreeBuilderTest.testCreatesValidProlog",0,"@Test public void testCreatesValidProlog(){Document document=Document.createShell("""");document.outputSettings().syntax(Syntax.xml);document.charset(Charset.forName(""utf-8""));assertEquals(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""<html>\n"" + "" <head></head>\n""+ "" <body></body>\n""+ ""</html>"",document.outerHtml());}"
"org.jsoup.parser.XmlTreeBuilderTest.preservesCaseByDefault",0,"@Test public void preservesCaseByDefault(){String xml=""<TEST ID=1>Check</TEST>"";Document doc=Jsoup.parse(xml,"""",Parser.xmlParser());assertEquals(""<TEST ID=\""1\"">Check</TEST>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.parser.XmlTreeBuilderTest.canNormalizeCase",0,"@Test public void canNormalizeCase(){String xml=""<TEST ID=1>Check</TEST>"";Document doc=Jsoup.parse(xml,"""",Parser.xmlParser().settings(ParseSettings.htmlDefault));assertEquals(""<test id=\""1\"">Check</test>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.helper.StringUtilTest.join",0,"@Test public void join(){assertEquals("""",StringUtil.join(Arrays.asList(""""),"" ""));assertEquals(""one"",StringUtil.join(Arrays.asList(""one""),"" ""));assertEquals(""one two three"",StringUtil.join(Arrays.asList(""one"",""two"",""three""),"" ""));}"
"org.jsoup.helper.StringUtilTest.padding",0,"@Test public void padding(){assertEquals("""",StringUtil.padding(0));assertEquals("" "",StringUtil.padding(1));assertEquals(""  "",StringUtil.padding(2));assertEquals(""               "",StringUtil.padding(15));assertEquals(""                                             "",StringUtil.padding(45));}"
"org.jsoup.helper.StringUtilTest.paddingInACan",0,"@Test public void paddingInACan(){String[]padding=StringUtil.padding;assertEquals(21,padding.length);for (int i=0;i < padding.length;i++){assertEquals(i,padding[i].length());}}"
"org.jsoup.helper.StringUtilTest.isBlank",0,"@Test public void isBlank(){assertTrue(StringUtil.isBlank(null));assertTrue(StringUtil.isBlank(""""));assertTrue(StringUtil.isBlank(""      ""));assertTrue(StringUtil.isBlank(""   \r\n  ""));assertFalse(StringUtil.isBlank(""hello""));assertFalse(StringUtil.isBlank(""   hello   ""));}"
"org.jsoup.helper.StringUtilTest.isNumeric",0,"@Test public void isNumeric(){assertFalse(StringUtil.isNumeric(null));assertFalse(StringUtil.isNumeric("" ""));assertFalse(StringUtil.isNumeric(""123 546""));assertFalse(StringUtil.isNumeric(""hello""));assertFalse(StringUtil.isNumeric(""123.334""));assertTrue(StringUtil.isNumeric(""1""));assertTrue(StringUtil.isNumeric(""1234""));}"
"org.jsoup.helper.StringUtilTest.isWhitespace",0,"@Test public void isWhitespace(){assertTrue(StringUtil.isWhitespace('\t'));assertTrue(StringUtil.isWhitespace('\n'));assertTrue(StringUtil.isWhitespace('\r'));assertTrue(StringUtil.isWhitespace('\f'));assertTrue(StringUtil.isWhitespace(' '));assertFalse(StringUtil.isWhitespace('\u00a0'));assertFalse(StringUtil.isWhitespace('\u2000'));assertFalse(StringUtil.isWhitespace('\u3000'));}"
"org.jsoup.helper.StringUtilTest.normaliseWhiteSpace",0,"@Test public void normaliseWhiteSpace(){assertEquals("" "",normaliseWhitespace(""    \r \n \r\n""));assertEquals("" hello there "",normaliseWhitespace(""   hello   \r \n  there    \n""));assertEquals(""hello"",normaliseWhitespace(""hello""));assertEquals(""hello there"",normaliseWhitespace(""hello\nthere""));}"
"org.jsoup.helper.StringUtilTest.normaliseWhiteSpaceHandlesHighSurrogates",0,"@Test public void normaliseWhiteSpaceHandlesHighSurrogates(){String test71540chars=""\ud869\udeb2\u304b\u309a  1"";String test71540charsExpectedSingleWhitespace=""\ud869\udeb2\u304b\u309a 1"";assertEquals(test71540charsExpectedSingleWhitespace,normaliseWhitespace(test71540chars));String extractedText=Jsoup.parse(test71540chars).text();assertEquals(test71540charsExpectedSingleWhitespace,extractedText);}"
"org.jsoup.helper.StringUtilTest.resolvesRelativeUrls",0,"@Test public void resolvesRelativeUrls(){assertEquals(""http://example.com/one/two?three"",resolve(""http://example.com"",""./one/two?three""));assertEquals(""http://example.com/one/two?three"",resolve(""http://example.com?one"",""./one/two?three""));assertEquals(""http://example.com/one/two?three#four"",resolve(""http://example.com"",""./one/two?three#four""));assertEquals(""https://example.com/one"",resolve(""http://example.com/"",""https://example.com/one""));assertEquals(""http://example.com/one/two.html"",resolve(""http://example.com/two/"",""../one/two.html""));assertEquals(""https://example2.com/one"",resolve(""https://example.com/"",""//example2.com/one""));assertEquals(""https://example.com:8080/one"",resolve(""https://example.com:8080"",""./one""));assertEquals(""https://example2.com/one"",resolve(""http://example.com/"",""https://example2.com/one""));assertEquals(""https://example.com/one"",resolve(""wrong"",""https://example.com/one""));assertEquals(""https://example.com/one"",resolve(""https://example.com/one"",""""));assertEquals("""",resolve(""wrong"",""also wrong""));assertEquals(""ftp://example.com/one"",resolve(""ftp://example.com/two/"",""../one""));assertEquals(""ftp://example.com/one/two.c"",resolve(""ftp://example.com/one/"",""./two.c""));assertEquals(""ftp://example.com/one/two.c"",resolve(""ftp://example.com/one/"",""two.c""));}"
"org.jsoup.select.CssTest.firstChild",0,"@Test public void firstChild(){check(html.select(""#pseudo :first-child""),""1"");check(html.select(""html:first-child""));}"
"org.jsoup.select.CssTest.lastChild",0,"@Test public void lastChild(){check(html.select(""#pseudo :last-child""),""10"");check(html.select(""html:last-child""));}"
"org.jsoup.select.CssTest.nthChild_simple",0,"@Test public void nthChild_simple(){for (int i=1;i <= 10;i++){check(html.select(String.format(""#pseudo :nth-child(%d)"",i)),String.valueOf(i));}}"
"org.jsoup.select.CssTest.nthOfType_unknownTag",0,"@Test public void nthOfType_unknownTag(){for (int i=1;i <= 10;i++){check(html.select(String.format(""#type svg:nth-of-type(%d)"",i)),String.valueOf(i));}}"
"org.jsoup.select.CssTest.nthLastChild_simple",0,"@Test public void nthLastChild_simple(){for (int i=1;i <= 10;i++){check(html.select(String.format(""#pseudo :nth-last-child(%d)"",i)),String.valueOf(11 - i));}}"
"org.jsoup.select.CssTest.nthOfType_simple",0,"@Test public void nthOfType_simple(){for (int i=1;i <= 10;i++){check(html.select(String.format(""#type p:nth-of-type(%d)"",i)),String.valueOf(i));}}"
"org.jsoup.select.CssTest.nthLastOfType_simple",0,"@Test public void nthLastOfType_simple(){for (int i=1;i <= 10;i++){check(html.select(String.format(""#type :nth-last-of-type(%d)"",i)),String.valueOf(11 - i),String.valueOf(11 - i),String.valueOf(11 - i),String.valueOf(11 - i));}}"
"org.jsoup.select.CssTest.nthChild_advanced",0,"@Test public void nthChild_advanced(){check(html.select(""#pseudo :nth-child(-5)""));check(html.select(""#pseudo :nth-child(odd)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#pseudo :nth-child(2n-1)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#pseudo :nth-child(2n+1)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#pseudo :nth-child(2n+3)""),""3"",""5"",""7"",""9"");check(html.select(""#pseudo :nth-child(even)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#pseudo :nth-child(2n)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#pseudo :nth-child(3n-1)""),""2"",""5"",""8"");check(html.select(""#pseudo :nth-child(-2n+5)""),""1"",""3"",""5"");check(html.select(""#pseudo :nth-child(+5)""),""5"");}"
"org.jsoup.select.CssTest.nthOfType_advanced",0,"@Test public void nthOfType_advanced(){check(html.select(""#type :nth-of-type(-5)""));check(html.select(""#type p:nth-of-type(odd)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#type em:nth-of-type(2n-1)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#type p:nth-of-type(2n+1)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#type span:nth-of-type(2n+3)""),""3"",""5"",""7"",""9"");check(html.select(""#type p:nth-of-type(even)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#type p:nth-of-type(2n)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#type p:nth-of-type(3n-1)""),""2"",""5"",""8"");check(html.select(""#type p:nth-of-type(-2n+5)""),""1"",""3"",""5"");check(html.select(""#type :nth-of-type(+5)""),""5"",""5"",""5"",""5"");}"
"org.jsoup.select.CssTest.nthLastChild_advanced",0,"@Test public void nthLastChild_advanced(){check(html.select(""#pseudo :nth-last-child(-5)""));check(html.select(""#pseudo :nth-last-child(odd)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#pseudo :nth-last-child(2n-1)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#pseudo :nth-last-child(2n+1)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#pseudo :nth-last-child(2n+3)""),""2"",""4"",""6"",""8"");check(html.select(""#pseudo :nth-last-child(even)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#pseudo :nth-last-child(2n)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#pseudo :nth-last-child(3n-1)""),""3"",""6"",""9"");check(html.select(""#pseudo :nth-last-child(-2n+5)""),""6"",""8"",""10"");check(html.select(""#pseudo :nth-last-child(+5)""),""6"");}"
"org.jsoup.select.CssTest.nthLastOfType_advanced",0,"@Test public void nthLastOfType_advanced(){check(html.select(""#type :nth-last-of-type(-5)""));check(html.select(""#type p:nth-last-of-type(odd)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#type em:nth-last-of-type(2n-1)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#type p:nth-last-of-type(2n+1)""),""2"",""4"",""6"",""8"",""10"");check(html.select(""#type span:nth-last-of-type(2n+3)""),""2"",""4"",""6"",""8"");check(html.select(""#type p:nth-last-of-type(even)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#type p:nth-last-of-type(2n)""),""1"",""3"",""5"",""7"",""9"");check(html.select(""#type p:nth-last-of-type(3n-1)""),""3"",""6"",""9"");check(html.select(""#type span:nth-last-of-type(-2n+5)""),""6"",""8"",""10"");check(html.select(""#type :nth-last-of-type(+5)""),""6"",""6"",""6"",""6"");}"
"org.jsoup.select.CssTest.firstOfType",0,"@Test public void firstOfType(){check(html.select(""div:not(#only):first-of-type""),""1"",""1"",""1"",""1"",""1"");}"
"org.jsoup.select.CssTest.lastOfType",0,"@Test public void lastOfType(){check(html.select(""div:not(#only):last-of-type""),""10"",""10"",""10"",""10"",""10"");}"
"org.jsoup.select.CssTest.empty",0,"@Test public void empty(){final Elements sel=html.select("":empty"");assertEquals(3,sel.size());assertEquals(""head"",sel.get(0).tagName());assertEquals(""br"",sel.get(1).tagName());assertEquals(""p"",sel.get(2).tagName());}"
"org.jsoup.select.CssTest.onlyChild",0,"@Test public void onlyChild(){final Elements sel=html.select(""span :only-child"");assertEquals(1,sel.size());assertEquals(""br"",sel.get(0).tagName());check(html.select(""#only :only-child""),""only"");}"
"org.jsoup.select.CssTest.onlyOfType",0,"@Test public void onlyOfType(){final Elements sel=html.select("":only-of-type"");assertEquals(6,sel.size());assertEquals(""head"",sel.get(0).tagName());assertEquals(""body"",sel.get(1).tagName());assertEquals(""span"",sel.get(2).tagName());assertEquals(""br"",sel.get(3).tagName());assertEquals(""p"",sel.get(4).tagName());assertTrue(sel.get(4).hasClass(""empty""));assertEquals(""em"",sel.get(5).tagName());}"
"org.jsoup.select.CssTest.root",0,"@Test public void root(){Elements sel=html.select("":root"");assertEquals(1,sel.size());assertNotNull(sel.get(0));assertEquals(Tag.valueOf(""html""),sel.get(0).tag());Elements sel2=html.select(""body"").select("":root"");assertEquals(1,sel2.size());assertNotNull(sel2.get(0));assertEquals(Tag.valueOf(""body""),sel2.get(0).tag());}"
"org.jsoup.parser.AttributeParseTest.parsesRoughAttributeString",0,"@Test public void parsesRoughAttributeString(){String html=""<a id=\""123\"" class=\""baz = 'bar'\"" style = 'border: 2px'qux zim foo = 12 mux=18 />"";Element el=Jsoup.parse(html).getElementsByTag(""a"").get(0);Attributes attr=el.attributes();assertEquals(7,attr.size());assertEquals(""123"",attr.get(""id""));assertEquals(""baz = 'bar'"",attr.get(""class""));assertEquals(""border: 2px"",attr.get(""style""));assertEquals("""",attr.get(""qux""));assertEquals("""",attr.get(""zim""));assertEquals(""12"",attr.get(""foo""));assertEquals(""18"",attr.get(""mux""));}"
"org.jsoup.parser.AttributeParseTest.handlesNewLinesAndReturns",0,"@Test public void handlesNewLinesAndReturns(){String html=""<a\r\nfoo='bar\r\nqux'\r\nbar\r\n=\r\ntwo>One</a>"";Element el=Jsoup.parse(html).select(""a"").first();assertEquals(2,el.attributes().size());assertEquals(""bar\r\nqux"",el.attr(""foo""));assertEquals(""two"",el.attr(""bar""));}"
"org.jsoup.parser.AttributeParseTest.parsesEmptyString",0,"@Test public void parsesEmptyString(){String html=""<a />"";Element el=Jsoup.parse(html).getElementsByTag(""a"").get(0);Attributes attr=el.attributes();assertEquals(0,attr.size());}"
"org.jsoup.parser.AttributeParseTest.canStartWithEq",0,"@Test public void canStartWithEq(){String html=""<a =empty />"";Element el=Jsoup.parse(html).getElementsByTag(""a"").get(0);Attributes attr=el.attributes();assertEquals(1,attr.size());assertTrue(attr.hasKey(""=empty""));assertEquals("""",attr.get(""=empty""));}"
"org.jsoup.parser.AttributeParseTest.strictAttributeUnescapes",0,"@Test public void strictAttributeUnescapes(){String html=""<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>"";Elements els=Jsoup.parse(html).select(""a"");assertEquals(""?foo=bar&mid&lt=true"",els.first().attr(""href""));assertEquals(""?foo=bar<qux&lg=1"",els.last().attr(""href""));}"
"org.jsoup.parser.AttributeParseTest.moreAttributeUnescapes",0,"@Test public void moreAttributeUnescapes(){String html=""<a href='&wr_id=123&mid-size=true&ok=&wr'>Check</a>"";Elements els=Jsoup.parse(html).select(""a"");assertEquals(""&wr_id=123&mid-size=true&ok=&wr"",els.first().attr(""href""));}"
"org.jsoup.parser.AttributeParseTest.parsesBooleanAttributes",0,"@Test public void parsesBooleanAttributes(){String html=""<a normal=\""123\"" boolean empty=\""\""></a>"";Element el=Jsoup.parse(html).select(""a"").first();assertEquals(""123"",el.attr(""normal""));assertEquals("""",el.attr(""boolean""));assertEquals("""",el.attr(""empty""));List<Attribute> attributes=el.attributes().asList();assertEquals(""There should be 3 attribute present"",3,attributes.size());assertFalse(""'normal' attribute should not be boolean"",attributes.get(0)instanceof BooleanAttribute);assertTrue(""'boolean' attribute should be boolean"",attributes.get(1)instanceof BooleanAttribute);assertFalse(""'empty' attribute should not be boolean"",attributes.get(2)instanceof BooleanAttribute);assertEquals(html,el.outerHtml());}"
"org.jsoup.parser.AttributeParseTest.dropsSlashFromAttributeName",0,"@Test public void dropsSlashFromAttributeName(){String html=""<img /onerror='doMyJob'/>"";Document doc=Jsoup.parse(html);assertTrue(""SelfClosingStartTag ignores last character"",doc.select(""img[onerror]"").size()!= 0);assertEquals(""<img onerror=\""doMyJob\"">"",doc.body().html());doc=Jsoup.parse(html,"""",Parser.xmlParser());assertEquals(""<img onerror=\""doMyJob\"" />"",doc.html());}"
"org.jsoup.helper.DataUtilTest.testCharset",0,"@Test public void testCharset(){assertEquals(""utf-8"",DataUtil.getCharsetFromContentType(""text/html;charset=utf-8 ""));assertEquals(""UTF-8"",DataUtil.getCharsetFromContentType(""text/html;charset=UTF-8""));assertEquals(""ISO-8859-1"",DataUtil.getCharsetFromContentType(""text/html;charset=ISO-8859-1""));assertEquals(null,DataUtil.getCharsetFromContentType(""text/html""));assertEquals(null,DataUtil.getCharsetFromContentType(null));assertEquals(null,DataUtil.getCharsetFromContentType(""text/html;charset=Unknown""));}"
"org.jsoup.helper.DataUtilTest.testQuotedCharset",0,"@Test public void testQuotedCharset(){assertEquals(""utf-8"",DataUtil.getCharsetFromContentType(""text/html;charset=\""utf-8\""""));assertEquals(""UTF-8"",DataUtil.getCharsetFromContentType(""text/html;charset=\""UTF-8\""""));assertEquals(""ISO-8859-1"",DataUtil.getCharsetFromContentType(""text/html;charset=\""ISO-8859-1\""""));assertEquals(null,DataUtil.getCharsetFromContentType(""text/html;charset=\""Unsupported\""""));assertEquals(""UTF-8"",DataUtil.getCharsetFromContentType(""text/html;charset='UTF-8'""));}"
"org.jsoup.helper.DataUtilTest.discardsSpuriousByteOrderMark",0,"@Test public void discardsSpuriousByteOrderMark()throws IOException {String html=""\uFEFF<html><head><title>One</title></head><body>Two</body></html>"";Document doc=DataUtil.parseInputStream(stream(html),""UTF-8"",""http://foo.com/"",Parser.htmlParser());assertEquals(""One"",doc.head().text());}"
"org.jsoup.helper.DataUtilTest.discardsSpuriousByteOrderMarkWhenNoCharsetSet",0,"@Test public void discardsSpuriousByteOrderMarkWhenNoCharsetSet()throws IOException {String html=""\uFEFF<html><head><title>One</title></head><body>Two</body></html>"";Document doc=DataUtil.parseInputStream(stream(html),null,""http://foo.com/"",Parser.htmlParser());assertEquals(""One"",doc.head().text());assertEquals(""UTF-8"",doc.outputSettings().charset().displayName());}"
"org.jsoup.helper.DataUtilTest.shouldNotThrowExceptionOnEmptyCharset",0,"@Test public void shouldNotThrowExceptionOnEmptyCharset(){assertEquals(null,DataUtil.getCharsetFromContentType(""text/html;charset=""));assertEquals(null,DataUtil.getCharsetFromContentType(""text/html;charset=;""));}"
"org.jsoup.helper.DataUtilTest.shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags",0,"@Test public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags(){assertEquals(""ISO-8859-1"",DataUtil.getCharsetFromContentType(""text/html;charset=ISO-8859-1,charset=1251""));}"
"org.jsoup.helper.DataUtilTest.shouldCorrectCharsetForDuplicateCharsetString",0,"@Test public void shouldCorrectCharsetForDuplicateCharsetString(){assertEquals(""iso-8859-1"",DataUtil.getCharsetFromContentType(""text/html;charset=charset=iso-8859-1""));}"
"org.jsoup.helper.DataUtilTest.shouldReturnNullForIllegalCharsetNames",0,"@Test public void shouldReturnNullForIllegalCharsetNames(){assertEquals(null,DataUtil.getCharsetFromContentType(""text/html;charset=$HJKDF§$/(""));}"
"org.jsoup.helper.DataUtilTest.generatesMimeBoundaries",0,"@Test public void generatesMimeBoundaries(){String m1=DataUtil.mimeBoundary();String m2=DataUtil.mimeBoundary();assertEquals(DataUtil.boundaryLength,m1.length());assertEquals(DataUtil.boundaryLength,m2.length());assertNotSame(m1,m2);}"
"org.jsoup.helper.DataUtilTest.wrongMetaCharsetFallback",0,"@Test public void wrongMetaCharsetFallback()throws IOException {String html=""<html><head><meta charset=iso-8></head><body></body></html>"";Document doc=DataUtil.parseInputStream(stream(html),null,""http://example.com"",Parser.htmlParser());final String expected=""<html>\n"" + "" <head>\n"" + ""  <meta charset=\""iso-8\"">\n""+ "" </head>\n""+ "" <body></body>\n""+ ""</html>"";assertEquals(expected,doc.toString());}"
"org.jsoup.helper.DataUtilTest.secondMetaElementWithContentTypeContainsCharsetParameter",0,"@Test public void secondMetaElementWithContentTypeContainsCharsetParameter()throws Exception {String html=""<html><head>"" + ""<meta http-equiv=\""Content-Type\"" content=\""text/html\"">"" + ""<meta http-equiv=\""Content-Type\"" content=\""text/html;charset=euc-kr\"">""+ ""</head><body>한국어</body></html>"";Document doc=DataUtil.parseInputStream(stream(html,""euc-kr""),null,""http://example.com"",Parser.htmlParser());assertEquals(""한국어"",doc.body().text());}"
"org.jsoup.helper.DataUtilTest.firstMetaElementWithCharsetShouldBeUsedForDecoding",0,"@Test public void firstMetaElementWithCharsetShouldBeUsedForDecoding()throws Exception {String html=""<html><head>"" + ""<meta http-equiv=\""Content-Type\"" content=\""text/html;charset=iso-8859-1\"">"" + ""<meta http-equiv=\""Content-Type\"" content=\""text/html;charset=koi8-u\"">""+ ""</head><body>Übergrößenträger</body></html>"";Document doc=DataUtil.parseInputStream(stream(html,""iso-8859-1""),null,""http://example.com"",Parser.htmlParser());assertEquals(""Übergrößenträger"",doc.body().text());}"
"org.jsoup.helper.DataUtilTest.supportsBOMinFiles",0,"@Test public void supportsBOMinFiles()throws IOException {File in=getFile(""/bomtests/bom_utf16be.html"");Document doc=Jsoup.parse(in,null,""http://example.com"");assertTrue(doc.title().contains(""UTF-16BE""));assertTrue(doc.text().contains(""가각갂갃간갅""));in=getFile(""/bomtests/bom_utf16le.html"");doc=Jsoup.parse(in,null,""http://example.com"");assertTrue(doc.title().contains(""UTF-16LE""));assertTrue(doc.text().contains(""가각갂갃간갅""));in=getFile(""/bomtests/bom_utf32be.html"");doc=Jsoup.parse(in,null,""http://example.com"");assertTrue(doc.title().contains(""UTF-32BE""));assertTrue(doc.text().contains(""가각갂갃간갅""));in=getFile(""/bomtests/bom_utf32le.html"");doc=Jsoup.parse(in,null,""http://example.com"");assertTrue(doc.title().contains(""UTF-32LE""));assertTrue(doc.text().contains(""가각갂갃간갅""));}"
"org.jsoup.parser.CharacterReaderTest.consume",0,"@Test public void consume(){CharacterReader r=new CharacterReader(""one"");assertEquals(0,r.pos());assertEquals('o',r.current());assertEquals('o',r.consume());assertEquals(1,r.pos());assertEquals('n',r.current());assertEquals(1,r.pos());assertEquals('n',r.consume());assertEquals('e',r.consume());assertTrue(r.isEmpty());assertEquals(CharacterReader.EOF,r.consume());assertTrue(r.isEmpty());assertEquals(CharacterReader.EOF,r.consume());}"
"org.jsoup.parser.CharacterReaderTest.unconsume",0,"@Test public void unconsume(){CharacterReader r=new CharacterReader(""one"");assertEquals('o',r.consume());assertEquals('n',r.current());r.unconsume();assertEquals('o',r.current());assertEquals('o',r.consume());assertEquals('n',r.consume());assertEquals('e',r.consume());assertTrue(r.isEmpty());r.unconsume();assertFalse(r.isEmpty());assertEquals('e',r.current());assertEquals('e',r.consume());assertTrue(r.isEmpty());assertEquals(CharacterReader.EOF,r.consume());r.unconsume();assertTrue(r.isEmpty());assertEquals(CharacterReader.EOF,r.current());}"
"org.jsoup.parser.CharacterReaderTest.mark",0,"@Test public void mark(){CharacterReader r=new CharacterReader(""one"");r.consume();r.mark();assertEquals('n',r.consume());assertEquals('e',r.consume());assertTrue(r.isEmpty());r.rewindToMark();assertEquals('n',r.consume());}"
"org.jsoup.parser.CharacterReaderTest.consumeToEnd",0,"@Test public void consumeToEnd(){String in=""one two three"";CharacterReader r=new CharacterReader(in);String toEnd=r.consumeToEnd();assertEquals(in,toEnd);assertTrue(r.isEmpty());}"
"org.jsoup.parser.CharacterReaderTest.nextIndexOfChar",0,"@Test public void nextIndexOfChar(){String in=""blah blah"";CharacterReader r=new CharacterReader(in);assertEquals(-1,r.nextIndexOf('x'));assertEquals(3,r.nextIndexOf('h'));String pull=r.consumeTo('h');assertEquals(""bla"",pull);r.consume();assertEquals(2,r.nextIndexOf('l'));assertEquals("" blah"",r.consumeToEnd());assertEquals(-1,r.nextIndexOf('x'));}"
"org.jsoup.parser.CharacterReaderTest.nextIndexOfString",0,"@Test public void nextIndexOfString(){String in=""One Two something Two Three Four"";CharacterReader r=new CharacterReader(in);assertEquals(-1,r.nextIndexOf(""Foo""));assertEquals(4,r.nextIndexOf(""Two""));assertEquals(""One Two "",r.consumeTo(""something""));assertEquals(10,r.nextIndexOf(""Two""));assertEquals(""something Two Three Four"",r.consumeToEnd());assertEquals(-1,r.nextIndexOf(""Two""));}"
"org.jsoup.parser.CharacterReaderTest.nextIndexOfUnmatched",0,"@Test public void nextIndexOfUnmatched(){CharacterReader r=new CharacterReader(""<[[one]]"");assertEquals(-1,r.nextIndexOf(""]]>""));}"
"org.jsoup.parser.CharacterReaderTest.consumeToChar",0,"@Test public void consumeToChar(){CharacterReader r=new CharacterReader(""One Two Three"");assertEquals(""One "",r.consumeTo('T'));assertEquals("""",r.consumeTo('T'));assertEquals('T',r.consume());assertEquals(""wo "",r.consumeTo('T'));assertEquals('T',r.consume());assertEquals(""hree"",r.consumeTo('T'));}"
"org.jsoup.parser.CharacterReaderTest.consumeToString",0,"@Test public void consumeToString(){CharacterReader r=new CharacterReader(""One Two Two Four"");assertEquals(""One "",r.consumeTo(""Two""));assertEquals('T',r.consume());assertEquals(""wo "",r.consumeTo(""Two""));assertEquals('T',r.consume());assertEquals(""wo Four"",r.consumeTo(""Qux""));}"
"org.jsoup.parser.CharacterReaderTest.advance",0,"@Test public void advance(){CharacterReader r=new CharacterReader(""One Two Three"");assertEquals('O',r.consume());r.advance();assertEquals('e',r.consume());}"
"org.jsoup.parser.CharacterReaderTest.consumeToAny",0,"@Test public void consumeToAny(){CharacterReader r=new CharacterReader(""One &bar;qux"");assertEquals(""One "",r.consumeToAny('&',';'));assertTrue(r.matches('&'));assertTrue(r.matches(""&bar;""));assertEquals('&',r.consume());assertEquals(""bar"",r.consumeToAny('&',';'));assertEquals(';',r.consume());assertEquals("" qux"",r.consumeToAny('&',';'));}"
"org.jsoup.parser.CharacterReaderTest.consumeLetterSequence",0,"@Test public void consumeLetterSequence(){CharacterReader r=new CharacterReader(""One &bar;qux"");assertEquals(""One"",r.consumeLetterSequence());assertEquals("" &"",r.consumeTo(""bar;""));assertEquals(""bar"",r.consumeLetterSequence());assertEquals("";qux"",r.consumeToEnd());}"
"org.jsoup.parser.CharacterReaderTest.consumeLetterThenDigitSequence",0,"@Test public void consumeLetterThenDigitSequence(){CharacterReader r=new CharacterReader(""One12 Two &bar;qux"");assertEquals(""One12"",r.consumeLetterThenDigitSequence());assertEquals(' ',r.consume());assertEquals(""Two"",r.consumeLetterThenDigitSequence());assertEquals("" &bar;qux"",r.consumeToEnd());}"
"org.jsoup.parser.CharacterReaderTest.matches",0,"@Test public void matches(){CharacterReader r=new CharacterReader(""One Two Three"");assertTrue(r.matches('O'));assertTrue(r.matches(""One Two Three""));assertTrue(r.matches(""One""));assertFalse(r.matches(""one""));assertEquals('O',r.consume());assertFalse(r.matches(""One""));assertTrue(r.matches(""ne Two Three""));assertFalse(r.matches(""ne Two Three Four""));assertEquals(""ne Two Three"",r.consumeToEnd());assertFalse(r.matches(""ne""));assertTrue(r.isEmpty());}"
"org.jsoup.parser.CharacterReaderTest.matchesIgnoreCase",0,"@Test public void matchesIgnoreCase(){CharacterReader r=new CharacterReader(""One Two Three"");assertTrue(r.matchesIgnoreCase(""O""));assertTrue(r.matchesIgnoreCase(""o""));assertTrue(r.matches('O'));assertFalse(r.matches('o'));assertTrue(r.matchesIgnoreCase(""One Two Three""));assertTrue(r.matchesIgnoreCase(""ONE two THREE""));assertTrue(r.matchesIgnoreCase(""One""));assertTrue(r.matchesIgnoreCase(""one""));assertEquals('O',r.consume());assertFalse(r.matchesIgnoreCase(""One""));assertTrue(r.matchesIgnoreCase(""NE Two Three""));assertFalse(r.matchesIgnoreCase(""ne Two Three Four""));assertEquals(""ne Two Three"",r.consumeToEnd());assertFalse(r.matchesIgnoreCase(""ne""));}"
"org.jsoup.parser.CharacterReaderTest.containsIgnoreCase",0,"@Test public void containsIgnoreCase(){CharacterReader r=new CharacterReader(""One TWO three"");assertTrue(r.containsIgnoreCase(""two""));assertTrue(r.containsIgnoreCase(""three""));assertFalse(r.containsIgnoreCase(""one""));}"
"org.jsoup.parser.CharacterReaderTest.matchesAny",0,"@Test public void matchesAny(){char[]scan={' ','\n','\t'};CharacterReader r=new CharacterReader(""One\nTwo\tThree"");assertFalse(r.matchesAny(scan));assertEquals(""One"",r.consumeToAny(scan));assertTrue(r.matchesAny(scan));assertEquals('\n',r.consume());assertFalse(r.matchesAny(scan));}"
"org.jsoup.parser.CharacterReaderTest.cachesStrings",0,"@Test public void cachesStrings(){CharacterReader r=new CharacterReader(""Check\tCheck\tCheck\tCHOKE\tA string that is longer than 16 chars"");String one=r.consumeTo('\t');r.consume();String two=r.consumeTo('\t');r.consume();String three=r.consumeTo('\t');r.consume();String four=r.consumeTo('\t');r.consume();String five=r.consumeTo('\t');assertEquals(""Check"",one);assertEquals(""Check"",two);assertEquals(""Check"",three);assertEquals(""CHOKE"",four);assertTrue(one == two);assertTrue(two == three);assertTrue(three != four);assertTrue(four != five);assertEquals(five,""A string that is longer than 16 chars"");}"
"org.jsoup.parser.CharacterReaderTest.rangeEquals",0,"@Test public void rangeEquals(){CharacterReader r=new CharacterReader(""Check\tCheck\tCheck\tCHOKE"");assertTrue(r.rangeEquals(0,5,""Check""));assertFalse(r.rangeEquals(0,5,""CHOKE""));assertFalse(r.rangeEquals(0,5,""Chec""));assertTrue(r.rangeEquals(6,5,""Check""));assertFalse(r.rangeEquals(6,5,""Chuck""));assertTrue(r.rangeEquals(12,5,""Check""));assertFalse(r.rangeEquals(12,5,""Cheeky""));assertTrue(r.rangeEquals(18,5,""CHOKE""));assertFalse(r.rangeEquals(18,5,""CHIKE""));}"
"org.jsoup.parser.CharacterReaderTest.empty",0,"@Test public void empty(){CharacterReader r=new CharacterReader(""One"");assertTrue(r.matchConsume(""One""));assertTrue(r.isEmpty());r=new CharacterReader(""Two"");String two=r.consumeToEnd();assertEquals(""Two"",two);}"
"org.jsoup.internal.ConstrainableInputStreamTest.remainingAfterFirstRead",0,"@Test public void remainingAfterFirstRead()throws IOException {int bufferSize=5 * 1024;int capSize=100 * 1024;String url=""http://direct.infohound.net/tools/large.html"";BufferedInputStream inputStream=Jsoup.connect(url).maxBodySize(capSize).execute().bodyStream();assertTrue(inputStream instanceof ConstrainableInputStream);ConstrainableInputStream stream=(ConstrainableInputStream)inputStream;stream.mark(bufferSize);ByteBuffer firstBytes=stream.readToByteBuffer(bufferSize);byte[]array=firstBytes.array();String firstText=new String(array,""UTF-8"");assertTrue(firstText.startsWith(""<html><head><title>Large""));assertEquals(bufferSize,array.length);boolean fullyRead=stream.read()== -1;assertFalse(fullyRead);stream.reset();ByteBuffer fullRead=stream.readToByteBuffer(0);byte[]fullArray=fullRead.array();assertEquals(capSize,fullArray.length);String fullText=new String(fullArray,""UTF-8"");assertTrue(fullText.startsWith(firstText));}"
"org.jsoup.internal.ConstrainableInputStreamTest.noLimitAfterFirstRead",0,"@Test public void noLimitAfterFirstRead()throws IOException {int bufferSize=5 * 1024;String url=""http://direct.infohound.net/tools/large.html"";BufferedInputStream inputStream=Jsoup.connect(url).execute().bodyStream();assertTrue(inputStream instanceof ConstrainableInputStream);ConstrainableInputStream stream=(ConstrainableInputStream)inputStream;stream.mark(bufferSize);ByteBuffer firstBytes=stream.readToByteBuffer(bufferSize);byte[]array=firstBytes.array();String firstText=new String(array,""UTF-8"");assertTrue(firstText.startsWith(""<html><head><title>Large""));assertEquals(bufferSize,array.length);stream.reset();ByteBuffer fullRead=stream.readToByteBuffer(0);byte[]fullArray=fullRead.array();assertEquals(280735,fullArray.length);String fullText=new String(fullArray,""UTF-8"");assertTrue(fullText.startsWith(firstText));}"
"org.jsoup.parser.TokenQueueTest.chompBalanced",0,"@Test public void chompBalanced(){TokenQueue tq=new TokenQueue("":contains(one (two)three)four"");String pre=tq.consumeTo(""("");String guts=tq.chompBalanced('(',')');String remainder=tq.remainder();assertEquals("":contains"",pre);assertEquals(""one (two)three"",guts);assertEquals("" four"",remainder);}"
"org.jsoup.parser.TokenQueueTest.chompEscapedBalanced",0,"@Test public void chompEscapedBalanced(){TokenQueue tq=new TokenQueue("":contains(one (two)\\(\\)\\)three)four"");String pre=tq.consumeTo(""("");String guts=tq.chompBalanced('(',')');String remainder=tq.remainder();assertEquals("":contains"",pre);assertEquals(""one (two)\\(\\)\\)three"",guts);assertEquals(""one (two)())three"",TokenQueue.unescape(guts));assertEquals("" four"",remainder);}"
"org.jsoup.parser.TokenQueueTest.chompBalancedMatchesAsMuchAsPossible",0,"@Test public void chompBalancedMatchesAsMuchAsPossible(){TokenQueue tq=new TokenQueue(""unbalanced(something(or another))else"");tq.consumeTo(""("");String match=tq.chompBalanced('(',')');assertEquals(""something(or another)"",match);}"
"org.jsoup.parser.TokenQueueTest.unescape",0,"@Test public void unescape(){assertEquals(""one()\\"",TokenQueue.unescape(""one \\(\\)\\\\""));}"
"org.jsoup.parser.TokenQueueTest.chompToIgnoreCase",0,"@Test public void chompToIgnoreCase(){String t=""<textarea>one < two </TEXTarea>"";TokenQueue tq=new TokenQueue(t);String data=tq.chompToIgnoreCase(""</textarea"");assertEquals(""<textarea>one < two "",data);tq=new TokenQueue(""<textarea> one two < three </oops>"");data=tq.chompToIgnoreCase(""</textarea"");assertEquals(""<textarea> one two < three </oops>"",data);}"
"org.jsoup.parser.TokenQueueTest.addFirst",0,"@Test public void addFirst(){TokenQueue tq=new TokenQueue(""One Two"");tq.consumeWord();tq.addFirst(""Three"");assertEquals(""Three Two"",tq.remainder());}"
"org.jsoup.parser.TokenQueueTest.consumeToIgnoreSecondCallTest",0,"@Test public void consumeToIgnoreSecondCallTest(){String t=""<textarea>one < two </TEXTarea> third </TEXTarea>"";TokenQueue tq=new TokenQueue(t);String data=tq.chompToIgnoreCase(""</textarea>"");assertEquals(""<textarea>one < two "",data);data=tq.chompToIgnoreCase(""</textarea>"");assertEquals("" third "",data);}"
"org.jsoup.parser.HtmlTreeBuilderStateTest.ensureArraysAreSorted",0,"@Test public void ensureArraysAreSorted(){String[][]arrays={Constants.InBodyStartToHead,Constants.InBodyStartPClosers,Constants.Headings,Constants.InBodyStartPreListing,Constants.InBodyStartLiBreakers,Constants.DdDt,Constants.Formatters,Constants.InBodyStartApplets,Constants.InBodyStartEmptyFormatters,Constants.InBodyStartMedia,Constants.InBodyStartInputAttribs,Constants.InBodyStartOptions,Constants.InBodyStartRuby,Constants.InBodyStartDrop,Constants.InBodyEndClosers,Constants.InBodyEndAdoptionFormatters,Constants.InBodyEndTableFosters};for(String[]array : arrays){String[]copy=Arrays.copyOf(array,array.length);Arrays.sort(array);assertArrayEquals(array,copy);}}"
"org.jsoup.nodes.DocumentTest.setTextPreservesDocumentStructure",0,"@Test public void setTextPreservesDocumentStructure(){Document doc=Jsoup.parse(""<p>Hello</p>"");doc.text(""Replaced"");assertEquals(""Replaced"",doc.text());assertEquals(""Replaced"",doc.body().text());assertEquals(1,doc.select(""head"").size());}"
"org.jsoup.nodes.DocumentTest.testTitles",0,"@Test public void testTitles(){Document noTitle=Jsoup.parse(""<p>Hello</p>"");Document withTitle=Jsoup.parse(""<title>First</title><title>Ignore</title><p>Hello</p>"");assertEquals("""",noTitle.title());noTitle.title(""Hello"");assertEquals(""Hello"",noTitle.title());assertEquals(""Hello"",noTitle.select(""title"").first().text());assertEquals(""First"",withTitle.title());withTitle.title(""Hello"");assertEquals(""Hello"",withTitle.title());assertEquals(""Hello"",withTitle.select(""title"").first().text());Document normaliseTitle=Jsoup.parse(""<title>   Hello\nthere   \n   now   \n"");assertEquals(""Hello there now"",normaliseTitle.title());}"
"org.jsoup.nodes.DocumentTest.testOutputEncoding",0,"@Test public void testOutputEncoding(){Document doc=Jsoup.parse(""<p title=π>π & < > </p>"");assertEquals(""<p title=\""π\"">π &amp;&lt;&gt;</p>"",doc.body().html());assertEquals(""UTF-8"",doc.outputSettings().charset().name());doc.outputSettings().charset(""ascii"");assertEquals(Entities.EscapeMode.base,doc.outputSettings().escapeMode());assertEquals(""<p title=\""&#x3c0;\"">&#x3c0;&amp;&lt;&gt;</p>"",doc.body().html());doc.outputSettings().escapeMode(Entities.EscapeMode.extended);assertEquals(""<p title=\""&pi;\"">&pi;&amp;&lt;&gt;</p>"",doc.body().html());}"
"org.jsoup.nodes.DocumentTest.testXhtmlReferences",0,"@Test public void testXhtmlReferences(){Document doc=Jsoup.parse(""&lt;&gt;&amp;&quot;&apos;&times;"");doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);assertEquals(""&lt;&gt;&amp;\"" ' ×"",doc.body().html());}"
"org.jsoup.nodes.DocumentTest.testNormalisesStructure",0,"@Test public void testNormalisesStructure(){Document doc=Jsoup.parse(""<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>"");assertEquals(""<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.nodes.DocumentTest.testClone",0,"@Test public void testClone(){Document doc=Jsoup.parse(""<title>Hello</title> <p>One<p>Two"");Document clone=doc.clone();assertEquals(""<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>"",TextUtil.stripNewlines(clone.html()));clone.title(""Hello there"");clone.select(""p"").first().text(""One more"").attr(""id"",""1"");assertEquals(""<html><head><title>Hello there</title> </head><body><p id=\""1\"">One more</p><p>Two</p></body></html>"",TextUtil.stripNewlines(clone.html()));assertEquals(""<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>"",TextUtil.stripNewlines(doc.html()));}"
"org.jsoup.nodes.DocumentTest.testClonesDeclarations",0,"@Test public void testClonesDeclarations(){Document doc=Jsoup.parse(""<!DOCTYPE html><html><head><title>Doctype test"");Document clone=doc.clone();assertEquals(doc.html(),clone.html());assertEquals(""<!doctype html><html><head><title>Doctype test</title></head><body></body></html>"",TextUtil.stripNewlines(clone.html()));}"
"org.jsoup.nodes.DocumentTest.testLocation",0,"@Test public void testLocation()throws IOException {File in=new ParseTest().getFile(""/htmltests/yahoo-jp.html"");Document doc=Jsoup.parse(in,""UTF-8"",""http://www.yahoo.co.jp/index.html"");String location=doc.location();String baseUri=doc.baseUri();assertEquals(""http://www.yahoo.co.jp/index.html"",location);assertEquals(""http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/"",baseUri);in=new ParseTest().getFile(""/htmltests/nyt-article-1.html"");doc=Jsoup.parse(in,null,""http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp"");location=doc.location();baseUri=doc.baseUri();assertEquals(""http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp"",location);assertEquals(""http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp"",baseUri);}"
"org.jsoup.nodes.DocumentTest.testHtmlAndXmlSyntax",0,"@Test public void testHtmlAndXmlSyntax(){String h=""<!DOCTYPE html><body><img async checked='checked' src='&<>\""'>&lt;&gt;&amp;&quot;<foo />bar"";Document doc=Jsoup.parse(h);doc.outputSettings().syntax(Syntax.html);assertEquals(""<!doctype html>\n"" + ""<html>\n"" + "" <head></head>\n""+ "" <body>\n""+ ""  <img async checked src=\""&amp;<>&quot;\"">&lt;&gt;&amp;\""\n""+ ""  <foo />bar\n""+ "" </body>\n""+ ""</html>"",doc.html());doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);assertEquals(""<!DOCTYPE html>\n"" + ""<html>\n"" + "" <head></head>\n""+ "" <body>\n""+ ""  <img async=\""\"" checked=\""checked\"" src=\""&amp;<>&quot;\"" />&lt;&gt;&amp;\""\n""+ ""  <foo />bar\n""+ "" </body>\n""+ ""</html>"",doc.html());}"
"org.jsoup.nodes.DocumentTest.htmlParseDefaultsToHtmlOutputSyntax",0,"@Test public void htmlParseDefaultsToHtmlOutputSyntax(){Document doc=Jsoup.parse(""x"");assertEquals(Syntax.html,doc.outputSettings().syntax());}"
"org.jsoup.nodes.DocumentTest.testHtmlAppendable",0,"@Test public void testHtmlAppendable(){String htmlContent=""<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>"";Document document=Jsoup.parse(htmlContent);OutputSettings outputSettings=new OutputSettings();outputSettings.prettyPrint(false);document.outputSettings(outputSettings);assertEquals(htmlContent,document.html(new StringWriter()).toString());}"
"org.jsoup.nodes.DocumentTest.testOverflowClone",0,"@Ignore @Test public void testOverflowClone(){StringBuilder builder=new StringBuilder();for (int i=0;i < 100000;i++){builder.insert(0,""<i>"");builder.append(""</i>"");}Document doc=Jsoup.parse(builder.toString());doc.clone();}"
"org.jsoup.nodes.DocumentTest.DocumentsWithSameContentAreEqual",0,"@Test public void DocumentsWithSameContentAreEqual()throws Exception {Document docA=Jsoup.parse(""<div/>One"");Document docB=Jsoup.parse(""<div/>One"");Document docC=Jsoup.parse(""<div/>Two"");assertFalse(docA.equals(docB));assertTrue(docA.equals(docA));assertEquals(docA.hashCode(),docA.hashCode());assertFalse(docA.hashCode()== docC.hashCode());}"
"org.jsoup.nodes.DocumentTest.DocumentsWithSameContentAreVerifialbe",0,"@Test public void DocumentsWithSameContentAreVerifialbe()throws Exception {Document docA=Jsoup.parse(""<div/>One"");Document docB=Jsoup.parse(""<div/>One"");Document docC=Jsoup.parse(""<div/>Two"");assertTrue(docA.hasSameValue(docB));assertFalse(docA.hasSameValue(docC));}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateUtf8",0,"@Test public void testMetaCharsetUpdateUtf8(){final Document doc=createHtmlDocument(""changeThis"");doc.updateMetaCharsetElement(true);doc.charset(Charset.forName(charsetUtf8));final String htmlCharsetUTF8=""<html>\n"" + "" <head>\n"" + ""  <meta charset=\"""" + charsetUtf8 + ""\"">\n""+ "" </head>\n""+ "" <body></body>\n""+ ""</html>"";assertEquals(htmlCharsetUTF8,doc.toString());Element selectedElement=doc.select(""meta[charset]"").first();assertEquals(charsetUtf8,doc.charset().name());assertEquals(charsetUtf8,selectedElement.attr(""charset""));assertEquals(doc.charset(),doc.outputSettings().charset());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateIso8859",0,"@Test public void testMetaCharsetUpdateIso8859(){final Document doc=createHtmlDocument(""changeThis"");doc.updateMetaCharsetElement(true);doc.charset(Charset.forName(charsetIso8859));final String htmlCharsetISO=""<html>\n"" + "" <head>\n"" + ""  <meta charset=\"""" + charsetIso8859 + ""\"">\n""+ "" </head>\n""+ "" <body></body>\n""+ ""</html>"";assertEquals(htmlCharsetISO,doc.toString());Element selectedElement=doc.select(""meta[charset]"").first();assertEquals(charsetIso8859,doc.charset().name());assertEquals(charsetIso8859,selectedElement.attr(""charset""));assertEquals(doc.charset(),doc.outputSettings().charset());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateNoCharset",0,"@Test public void testMetaCharsetUpdateNoCharset(){final Document docNoCharset=Document.createShell("""");docNoCharset.updateMetaCharsetElement(true);docNoCharset.charset(Charset.forName(charsetUtf8));assertEquals(charsetUtf8,docNoCharset.select(""meta[charset]"").first().attr(""charset""));final String htmlCharsetUTF8=""<html>\n"" + "" <head>\n"" + ""  <meta charset=\"""" + charsetUtf8 + ""\"">\n""+ "" </head>\n""+ "" <body></body>\n""+ ""</html>"";assertEquals(htmlCharsetUTF8,docNoCharset.toString());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateDisabled",0,"@Test public void testMetaCharsetUpdateDisabled(){final Document docDisabled=Document.createShell("""");final String htmlNoCharset=""<html>\n"" + "" <head></head>\n"" + "" <body></body>\n""+ ""</html>"";assertEquals(htmlNoCharset,docDisabled.toString());assertNull(docDisabled.select(""meta[charset]"").first());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateDisabledNoChanges",0,"@Test public void testMetaCharsetUpdateDisabledNoChanges(){final Document doc=createHtmlDocument(""dontTouch"");final String htmlCharset=""<html>\n"" + "" <head>\n"" + ""  <meta charset=\""dontTouch\"">\n""+ ""  <meta name=\""charset\"" content=\""dontTouch\"">\n""+ "" </head>\n""+ "" <body></body>\n""+ ""</html>"";assertEquals(htmlCharset,doc.toString());Element selectedElement=doc.select(""meta[charset]"").first();assertNotNull(selectedElement);assertEquals(""dontTouch"",selectedElement.attr(""charset""));selectedElement=doc.select(""meta[name=charset]"").first();assertNotNull(selectedElement);assertEquals(""dontTouch"",selectedElement.attr(""content""));}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateEnabledAfterCharsetChange",0,"@Test public void testMetaCharsetUpdateEnabledAfterCharsetChange(){final Document doc=createHtmlDocument(""dontTouch"");doc.charset(Charset.forName(charsetUtf8));Element selectedElement=doc.select(""meta[charset]"").first();assertEquals(charsetUtf8,selectedElement.attr(""charset""));assertTrue(doc.select(""meta[name=charset]"").isEmpty());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateCleanup",0,"@Test public void testMetaCharsetUpdateCleanup(){final Document doc=createHtmlDocument(""dontTouch"");doc.updateMetaCharsetElement(true);doc.charset(Charset.forName(charsetUtf8));final String htmlCharsetUTF8=""<html>\n"" + "" <head>\n"" + ""  <meta charset=\"""" + charsetUtf8 + ""\"">\n""+ "" </head>\n""+ "" <body></body>\n""+ ""</html>"";assertEquals(htmlCharsetUTF8,doc.toString());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlUtf8",0,"@Test public void testMetaCharsetUpdateXmlUtf8(){final Document doc=createXmlDocument(""1.0"",""changeThis"",true);doc.updateMetaCharsetElement(true);doc.charset(Charset.forName(charsetUtf8));final String xmlCharsetUTF8=""<?xml version=\""1.0\"" encoding=\"""" + charsetUtf8 + ""\""?>\n""+ ""<root>\n""+ "" node\n""+ ""</root>"";assertEquals(xmlCharsetUTF8,doc.toString());XmlDeclaration selectedNode=(XmlDeclaration)doc.childNode(0);assertEquals(charsetUtf8,doc.charset().name());assertEquals(charsetUtf8,selectedNode.attr(""encoding""));assertEquals(doc.charset(),doc.outputSettings().charset());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlIso8859",0,"@Test public void testMetaCharsetUpdateXmlIso8859(){final Document doc=createXmlDocument(""1.0"",""changeThis"",true);doc.updateMetaCharsetElement(true);doc.charset(Charset.forName(charsetIso8859));final String xmlCharsetISO=""<?xml version=\""1.0\"" encoding=\"""" + charsetIso8859 + ""\""?>\n""+ ""<root>\n""+ "" node\n""+ ""</root>"";assertEquals(xmlCharsetISO,doc.toString());XmlDeclaration selectedNode=(XmlDeclaration)doc.childNode(0);assertEquals(charsetIso8859,doc.charset().name());assertEquals(charsetIso8859,selectedNode.attr(""encoding""));assertEquals(doc.charset(),doc.outputSettings().charset());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlNoCharset",0,"@Test public void testMetaCharsetUpdateXmlNoCharset(){final Document doc=createXmlDocument(""1.0"",""none"",false);doc.updateMetaCharsetElement(true);doc.charset(Charset.forName(charsetUtf8));final String xmlCharsetUTF8=""<?xml version=\""1.0\"" encoding=\"""" + charsetUtf8 + ""\""?>\n""+ ""<root>\n""+ "" node\n""+ ""</root>"";assertEquals(xmlCharsetUTF8,doc.toString());XmlDeclaration selectedNode=(XmlDeclaration)doc.childNode(0);assertEquals(charsetUtf8,selectedNode.attr(""encoding""));}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlDisabled",0,"@Test public void testMetaCharsetUpdateXmlDisabled(){final Document doc=createXmlDocument(""none"",""none"",false);final String xmlNoCharset=""<root>\n"" + "" node\n"" + ""</root>"";assertEquals(xmlNoCharset,doc.toString());}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdateXmlDisabledNoChanges",0,"@Test public void testMetaCharsetUpdateXmlDisabledNoChanges(){final Document doc=createXmlDocument(""dontTouch"",""dontTouch"",true);final String xmlCharset=""<?xml version=\""dontTouch\"" encoding=\""dontTouch\""?>\n"" + ""<root>\n"" + "" node\n""+ ""</root>"";assertEquals(xmlCharset,doc.toString());XmlDeclaration selectedNode=(XmlDeclaration)doc.childNode(0);assertEquals(""dontTouch"",selectedNode.attr(""encoding""));assertEquals(""dontTouch"",selectedNode.attr(""version""));}"
"org.jsoup.nodes.DocumentTest.testMetaCharsetUpdatedDisabledPerDefault",0,"@Test public void testMetaCharsetUpdatedDisabledPerDefault(){final Document doc=createHtmlDocument(""none"");assertFalse(doc.updateMetaCharsetElement());}"
"org.jsoup.nodes.DocumentTest.testShiftJisRoundtrip",0,"@Test public void testShiftJisRoundtrip()throws Exception {String input=""<html>"" + ""<head>"" + ""<meta http-equiv=\""content-type\"" content=\""text/html;charset=Shift_JIS\"" />""+ ""</head>""+ ""<body>""+ ""before&nbsp;after""+ ""</body>""+ ""</html>"";InputStream is=new ByteArrayInputStream(input.getBytes(Charset.forName(""ASCII"")));Document doc=Jsoup.parse(is,null,""http://example.com"");doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);String output=new String(doc.html().getBytes(doc.outputSettings().charset()),doc.outputSettings().charset());assertFalse(""Should not have contained a '?'."",output.contains(""?""));assertTrue(""Should have contained a '&#xa0;' or a '&nbsp;'."",output.contains(""&#xa0;"")|| output.contains(""&nbsp;""));}"
"org.jsoup.nodes.DocumentTest.parseAndHtmlOnDifferentThreads",0,"@Test public void parseAndHtmlOnDifferentThreads()throws InterruptedException {String html=""<p>Alrighty then it's not \uD83D\uDCA9. <span>Next</span></p>"";String asci=""<p>Alrighty then it's not &#x1f4a9;. <span>Next</span></p>"";final Document doc=Jsoup.parse(html);final String[]out=new String[1];final Elements p=doc.select(""p"");assertEquals(html,p.outerHtml());Thread thread=new Thread(new Runnable(){@Override public void run(){out[0]=p.outerHtml();doc.outputSettings().charset(StandardCharsets.US_ASCII);}});thread.start();thread.join();assertEquals(html,out[0]);assertEquals(StandardCharsets.US_ASCII,doc.outputSettings().charset());assertEquals(asci,p.outerHtml());}"
"org.jsoup.parser.TagTest.isCaseSensitive",0,"@Test public void isCaseSensitive(){Tag p1=Tag.valueOf(""P"");Tag p2=Tag.valueOf(""p"");assertFalse(p1.equals(p2));}"
"org.jsoup.parser.TagTest.canBeInsensitive",0,"@Test @MultiLocaleTest public void canBeInsensitive(){Tag script1=Tag.valueOf(""script"",ParseSettings.htmlDefault);Tag script2=Tag.valueOf(""SCRIPT"",ParseSettings.htmlDefault);assertSame(script1,script2);}"
"org.jsoup.parser.TagTest.trims",0,"@Test public void trims(){Tag p1=Tag.valueOf(""p"");Tag p2=Tag.valueOf("" p "");assertEquals(p1,p2);}"
"org.jsoup.parser.TagTest.equality",0,"@Test public void equality(){Tag p1=Tag.valueOf(""p"");Tag p2=Tag.valueOf(""p"");assertTrue(p1.equals(p2));assertTrue(p1 == p2);}"
"org.jsoup.parser.TagTest.divSemantics",0,"@Test public void divSemantics(){Tag div=Tag.valueOf(""div"");assertTrue(div.isBlock());assertTrue(div.formatAsBlock());}"
"org.jsoup.parser.TagTest.pSemantics",0,"@Test public void pSemantics(){Tag p=Tag.valueOf(""p"");assertTrue(p.isBlock());assertFalse(p.formatAsBlock());}"
"org.jsoup.parser.TagTest.imgSemantics",0,"@Test public void imgSemantics(){Tag img=Tag.valueOf(""img"");assertTrue(img.isInline());assertTrue(img.isSelfClosing());assertFalse(img.isBlock());}"
"org.jsoup.parser.TagTest.defaultSemantics",0,"@Test public void defaultSemantics(){Tag foo=Tag.valueOf(""FOO"");Tag foo2=Tag.valueOf(""FOO"");assertEquals(foo,foo2);assertTrue(foo.isInline());assertTrue(foo.formatAsBlock());}"
"org.jsoup.parser.TagTest.valueOfChecksNotNull",0,"@Test(expected=IllegalArgumentException.class)public void valueOfChecksNotNull(){Tag.valueOf(null);}"
"org.jsoup.parser.TagTest.valueOfChecksNotEmpty",0,"@Test(expected=IllegalArgumentException.class)public void valueOfChecksNotEmpty(){Tag.valueOf("" "");}"
"org.jsoup.parser.ParserSettingsTest.caseSupport",0,"@Test @MultiLocaleTest public void caseSupport(){ParseSettings bothOn=new ParseSettings(true,true);ParseSettings bothOff=new ParseSettings(false,false);ParseSettings tagOn=new ParseSettings(true,false);ParseSettings attrOn=new ParseSettings(false,true);assertEquals(""IMG"",bothOn.normalizeTag(""IMG""));assertEquals(""ID"",bothOn.normalizeAttribute(""ID""));assertEquals(""img"",bothOff.normalizeTag(""IMG""));assertEquals(""id"",bothOff.normalizeAttribute(""ID""));assertEquals(""IMG"",tagOn.normalizeTag(""IMG""));assertEquals(""id"",tagOn.normalizeAttribute(""ID""));assertEquals(""img"",attrOn.normalizeTag(""IMG""));assertEquals(""ID"",attrOn.normalizeAttribute(""ID""));}"
"org.jsoup.parser.ParserSettingsTest.attributeCaseNormalization",0,"@Test @MultiLocaleTest public void attributeCaseNormalization()throws Exception {ParseSettings parseSettings=new ParseSettings(false,false);String normalizedAttribute=parseSettings.normalizeAttribute(""HIDDEN"");assertEquals(""hidden"",normalizedAttribute);}"
"org.jsoup.parser.ParserSettingsTest.attributesCaseNormalization",0,"@Test @MultiLocaleTest public void attributesCaseNormalization()throws Exception {ParseSettings parseSettings=new ParseSettings(false,false);Attributes attributes=new Attributes();attributes.put(""ITEM"",""1"");Attributes normalizedAttributes=parseSettings.normalizeAttributes(attributes);assertEquals(""item"",normalizedAttributes.asList().get(0).getKey());}"
"org.jsoup.nodes.DocumentTypeTest.constructorValidationOkWithBlankName",0,"@Test public void constructorValidationOkWithBlankName(){DocumentType fail=new DocumentType("""","""","""");}"
"org.jsoup.nodes.DocumentTypeTest.constructorValidationThrowsExceptionOnNulls",0,"@Test(expected=IllegalArgumentException.class)public void constructorValidationThrowsExceptionOnNulls(){DocumentType fail=new DocumentType(""html"",null,null);}"
"org.jsoup.nodes.DocumentTypeTest.constructorValidationOkWithBlankPublicAndSystemIds",0,"@Test public void constructorValidationOkWithBlankPublicAndSystemIds(){DocumentType fail=new DocumentType(""html"","""","""");}"
"org.jsoup.nodes.DocumentTypeTest.outerHtmlGeneration",0,"@Test public void outerHtmlGeneration(){DocumentType html5=new DocumentType(""html"","""","""");assertEquals(""<!doctype html>"",html5.outerHtml());DocumentType publicDocType=new DocumentType(""html"",""-//IETF//DTD HTML//"","""");assertEquals(""<!DOCTYPE html PUBLIC \""-//IETF//DTD HTML//\"">"",publicDocType.outerHtml());DocumentType systemDocType=new DocumentType(""html"","""",""http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"");assertEquals(""<!DOCTYPE html \""http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\"">"",systemDocType.outerHtml());DocumentType combo=new DocumentType(""notHtml"",""--public"",""--system"");assertEquals(""<!DOCTYPE notHtml PUBLIC \""--public\"" \""--system\"">"",combo.outerHtml());}"
"org.jsoup.nodes.DocumentTypeTest.testRoundTrip",0,"@Test public void testRoundTrip(){String base=""<!DOCTYPE html>"";assertEquals(""<!doctype html>"",htmlOutput(base));assertEquals(base,xmlOutput(base));String publicDoc=""<!DOCTYPE html PUBLIC \""-//W3C//DTD XHTML 1.0 Transitional//EN\"" \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"">"";assertEquals(publicDoc,htmlOutput(publicDoc));assertEquals(publicDoc,xmlOutput(publicDoc));String systemDoc=""<!DOCTYPE html SYSTEM \""exampledtdfile.dtd\"">"";assertEquals(systemDoc,htmlOutput(systemDoc));assertEquals(systemDoc,xmlOutput(systemDoc));String legacyDoc=""<!DOCTYPE html SYSTEM \""about:legacy-compat\"">"";assertEquals(legacyDoc,htmlOutput(legacyDoc));assertEquals(legacyDoc,xmlOutput(legacyDoc));}"
"org.jsoup.nodes.AttributesTest.html",0,"@Test public void html(){Attributes a=new Attributes();a.put(""Tot"",""a&p"");a.put(""Hello"",""There"");a.put(""data-name"",""Jsoup"");assertEquals(3,a.size());assertTrue(a.hasKey(""Tot""));assertTrue(a.hasKey(""Hello""));assertTrue(a.hasKey(""data-name""));assertFalse(a.hasKey(""tot""));assertTrue(a.hasKeyIgnoreCase(""tot""));assertEquals(""There"",a.getIgnoreCase(""hEllo""));Map<String,String> dataset=a.dataset();assertEquals(1,dataset.size());assertEquals(""Jsoup"",dataset.get(""name""));assertEquals("""",a.get(""tot""));assertEquals(""a&p"",a.get(""Tot""));assertEquals(""a&p"",a.getIgnoreCase(""tot""));assertEquals("" Tot=\""a&amp;p\"" Hello=\""There\"" data-name=\""Jsoup\"""",a.html());assertEquals(a.html(),a.toString());}"
"org.jsoup.nodes.AttributesTest.testIteratorRemovable",0,"@Test public void testIteratorRemovable(){Attributes a=new Attributes();a.put(""Tot"",""a&p"");a.put(""Hello"",""There"");a.put(""data-name"",""Jsoup"");assertTrue(a.hasKey(""Tot""));Iterator<Attribute> iterator=a.iterator();Attribute attr=iterator.next();assertEquals(""Tot"",attr.getKey());iterator.remove();assertEquals(2,a.size());attr=iterator.next();assertEquals(""Hello"",attr.getKey());assertEquals(""There"",attr.getValue());assertEquals(2,a.size());assertEquals(""There"",a.get(""Hello""));assertFalse(a.hasKey(""Tot""));}"
"org.jsoup.nodes.AttributesTest.testIteratorUpdateable",0,"@Test public void testIteratorUpdateable(){Attributes a=new Attributes();a.put(""Tot"",""a&p"");a.put(""Hello"",""There"");assertFalse(a.hasKey(""Foo""));Iterator<Attribute> iterator=a.iterator();Attribute attr=iterator.next();attr.setKey(""Foo"");attr=iterator.next();attr.setKey(""Bar"");attr.setValue(""Qux"");assertEquals(""a&p"",a.get(""Foo""));assertEquals(""Qux"",a.get(""Bar""));assertFalse(a.hasKey(""Tot""));assertFalse(a.hasKey(""Hello""));}"
"org.jsoup.nodes.AttributesTest.testIteratorHasNext",0,"@Test public void testIteratorHasNext(){Attributes a=new Attributes();a.put(""Tot"",""1"");a.put(""Hello"",""2"");a.put(""data-name"",""3"");int seen=0;for(Attribute attribute : a){seen++;assertEquals(String.valueOf(seen),attribute.getValue());}assertEquals(3,seen);}"
"org.jsoup.nodes.AttributesTest.testIterator",0,"@Test public void testIterator(){Attributes a=new Attributes();String[][]datas={{""Tot"",""raul""},{""Hello"",""pismuth""},{""data-name"",""Jsoup""}};for(String[]atts : datas){a.put(atts[0],atts[1]);}Iterator<Attribute> iterator=a.iterator();assertTrue(iterator.hasNext());int i=0;for(Attribute attribute : a){assertEquals(datas[i][0],attribute.getKey());assertEquals(datas[i][1],attribute.getValue());i++;}assertEquals(datas.length,i);}"
"org.jsoup.nodes.AttributesTest.testIteratorEmpty",0,"@Test public void testIteratorEmpty(){Attributes a=new Attributes();Iterator<Attribute> iterator=a.iterator();assertFalse(iterator.hasNext());}"
"org.jsoup.nodes.AttributesTest.removeCaseSensitive",0,"@Test public void removeCaseSensitive(){Attributes a=new Attributes();a.put(""Tot"",""a&p"");a.put(""tot"",""one"");a.put(""Hello"",""There"");a.put(""hello"",""There"");a.put(""data-name"",""Jsoup"");assertEquals(5,a.size());a.remove(""Tot"");a.remove(""Hello"");assertEquals(3,a.size());assertTrue(a.hasKey(""tot""));assertFalse(a.hasKey(""Tot""));}"
"org.jsoup.nodes.AttributesTest.testSetKeyConsistency",0,"@Test public void testSetKeyConsistency(){Attributes a=new Attributes();a.put(""a"",""a"");for(Attribute at : a){at.setKey(""b"");}assertFalse(""Attribute 'a' not correctly removed"",a.hasKey(""a""));assertTrue(""Attribute 'b' not present after renaming"",a.hasKey(""b""));}"
"org.jsoup.parser.TokenisetStateTest.ensureSearchArraysAreSorted",0,"@Test public void ensureSearchArraysAreSorted(){char[][]arrays={TokeniserState.attributeSingleValueCharsSorted,TokeniserState.attributeDoubleValueCharsSorted,TokeniserState.attributeNameCharsSorted,TokeniserState.attributeValueUnquoted};for(char[]array : arrays){char[]copy=Arrays.copyOf(array,array.length);Arrays.sort(array);assertArrayEquals(array,copy);}}"
"org.jsoup.safety.CleanerTest.simpleBehaviourTest",0,"@Test public void simpleBehaviourTest(){String h=""<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>"";String cleanHtml=Jsoup.clean(h,Whitelist.simpleText());assertEquals(""Hello <b>there</b>!"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.simpleBehaviourTest2",0,"@Test public void simpleBehaviourTest2(){String h=""Hello <b>there</b>!"";String cleanHtml=Jsoup.clean(h,Whitelist.simpleText());assertEquals(""Hello <b>there</b>!"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.basicBehaviourTest",0,"@Test public void basicBehaviourTest(){String h=""<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"";String cleanHtml=Jsoup.clean(h,Whitelist.basic());assertEquals(""<p><a rel=\""nofollow\"">Dodgy</a> <a href=\""http://nice.com\"" rel=\""nofollow\"">Nice</a></p><blockquote>Hello</blockquote>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.basicWithImagesTest",0,"@Test public void basicWithImagesTest(){String h=""<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>"";String cleanHtml=Jsoup.clean(h,Whitelist.basicWithImages());assertEquals(""<p><img src=\""http://example.com/\"" alt=\""Image\""></p><p><img></p>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.testRelaxed",0,"@Test public void testRelaxed(){String h=""<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals(""<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.testRemoveTags",0,"@Test public void testRemoveTags(){String h=""<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"";String cleanHtml=Jsoup.clean(h,Whitelist.basic().removeTags(""a""));assertEquals(""<p>Nice</p><blockquote>Hello</blockquote>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.testRemoveAttributes",0,"@Test public void testRemoveAttributes(){String h=""<div><p>Nice</p><blockquote cite='http://example.com/quotations'>Hello</blockquote>"";String cleanHtml=Jsoup.clean(h,Whitelist.basic().removeAttributes(""blockquote"",""cite""));assertEquals(""<p>Nice</p><blockquote>Hello</blockquote>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.testRemoveEnforcedAttributes",0,"@Test public void testRemoveEnforcedAttributes(){String h=""<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>"";String cleanHtml=Jsoup.clean(h,Whitelist.basic().removeEnforcedAttribute(""a"",""rel""));assertEquals(""<p><a href=\""http://nice.com\"">Nice</a></p><blockquote>Hello</blockquote>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.testRemoveProtocols",0,"@Test public void testRemoveProtocols(){String h=""<p>Contact me <a href='mailto:info@example.com'>here</a></p>"";String cleanHtml=Jsoup.clean(h,Whitelist.basic().removeProtocols(""a"",""href"",""ftp"",""mailto""));assertEquals(""<p>Contact me <a rel=\""nofollow\"">here</a></p>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.whitelistedProtocolShouldBeRetained",0,"@Test @MultiLocaleTest public void whitelistedProtocolShouldBeRetained(){Whitelist whitelist=Whitelist.none().addTags(""a"").addAttributes(""a"",""href"").addProtocols(""a"",""href"",""something"");String cleanHtml=Jsoup.clean(""<a href=\""SOMETHING://x\""></a>"",whitelist);assertEquals(""<a href=\""SOMETHING://x\""></a>"",TextUtil.stripNewlines(cleanHtml));}"
"org.jsoup.safety.CleanerTest.testDropComments",0,"@Test public void testDropComments(){String h=""<p>Hello<!-- no --></p>"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals(""<p>Hello</p>"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testDropXmlProc",0,"@Test public void testDropXmlProc(){String h=""<?import namespace=\""xss\""><p>Hello</p>"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals(""<p>Hello</p>"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testDropScript",0,"@Test public void testDropScript(){String h=""<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals("""",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testDropImageScript",0,"@Test public void testDropImageScript(){String h=""<IMG SRC=\""javascript:alert('XSS')\"">"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals(""<img>"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testCleanJavascriptHref",0,"@Test public void testCleanJavascriptHref(){String h=""<A HREF=\""javascript:document.location='http://www.google.com/'\"">XSS</A>"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals(""<a>XSS</a>"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testCleanAnchorProtocol",0,"@Test public void testCleanAnchorProtocol(){String validAnchor=""<a href=\""#valid\"">Valid anchor</a>"";String invalidAnchor=""<a href=\""#anchor with spaces\"">Invalid anchor</a>"";String cleanHtml=Jsoup.clean(validAnchor,Whitelist.relaxed());assertEquals(""<a>Valid anchor</a>"",cleanHtml);cleanHtml=Jsoup.clean(invalidAnchor,Whitelist.relaxed());assertEquals(""<a>Invalid anchor</a>"",cleanHtml);Whitelist relaxedWithAnchor=Whitelist.relaxed().addProtocols(""a"",""href"",""#"");cleanHtml=Jsoup.clean(validAnchor,relaxedWithAnchor);assertEquals(validAnchor,cleanHtml);cleanHtml=Jsoup.clean(invalidAnchor,relaxedWithAnchor);assertEquals(""<a>Invalid anchor</a>"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testDropsUnknownTags",0,"@Test public void testDropsUnknownTags(){String h=""<p><custom foo=true>Test</custom></p>"";String cleanHtml=Jsoup.clean(h,Whitelist.relaxed());assertEquals(""<p>Test</p>"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testHandlesEmptyAttributes",0,"@Test public void testHandlesEmptyAttributes(){String h=""<img alt=\""\"" src= unknown=''>"";String cleanHtml=Jsoup.clean(h,Whitelist.basicWithImages());assertEquals(""<img alt=\""\"">"",cleanHtml);}"
"org.jsoup.safety.CleanerTest.testIsValidBodyHtml",0,"@Test public void testIsValidBodyHtml(){String ok=""<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>"";String ok1=""<p>Test <b><a href='http://example.com/'>OK</a></b></p>"";String nok1=""<p><script></script>Not <b>OK</b></p>"";String nok2=""<p align=right>Test Not <b>OK</b></p>"";String nok3=""<!-- comment --><p>Not OK</p>"";String nok4=""<html><head>Foo</head><body><b>OK</b></body></html>"";String nok5=""<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>"";String nok6=""<p>Test <b><a href='http://example.com/'>OK</b></p>"";String nok7=""</div>What"";assertTrue(Jsoup.isValid(ok,Whitelist.basic()));assertTrue(Jsoup.isValid(ok1,Whitelist.basic()));assertFalse(Jsoup.isValid(nok1,Whitelist.basic()));assertFalse(Jsoup.isValid(nok2,Whitelist.basic()));assertFalse(Jsoup.isValid(nok3,Whitelist.basic()));assertFalse(Jsoup.isValid(nok4,Whitelist.basic()));assertFalse(Jsoup.isValid(nok5,Whitelist.basic()));assertFalse(Jsoup.isValid(nok6,Whitelist.basic()));assertFalse(Jsoup.isValid(ok,Whitelist.none()));assertFalse(Jsoup.isValid(nok7,Whitelist.basic()));}"
"org.jsoup.safety.CleanerTest.testIsValidDocument",0,"@Test public void testIsValidDocument(){String ok=""<html><head></head><body><p>Hello</p></body><html>"";String nok=""<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>"";Whitelist relaxed=Whitelist.relaxed();Cleaner cleaner=new Cleaner(relaxed);Document okDoc=Jsoup.parse(ok);assertTrue(cleaner.isValid(okDoc));assertFalse(cleaner.isValid(Jsoup.parse(nok)));assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));}"
"org.jsoup.safety.CleanerTest.resolvesRelativeLinks",0,"@Test public void resolvesRelativeLinks(){String html=""<a href='/foo'>Link</a><img src='/bar'>"";String clean=Jsoup.clean(html,""http://example.com/"",Whitelist.basicWithImages());assertEquals(""<a href=\""http://example.com/foo\"" rel=\""nofollow\"">Link</a>\n<img src=\""http://example.com/bar\"">"",clean);}"
"org.jsoup.safety.CleanerTest.preservesRelativeLinksIfConfigured",0,"@Test public void preservesRelativeLinksIfConfigured(){String html=""<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>"";String clean=Jsoup.clean(html,""http://example.com/"",Whitelist.basicWithImages().preserveRelativeLinks(true));assertEquals(""<a href=\""/foo\"" rel=\""nofollow\"">Link</a>\n<img src=\""/bar\""> \n<img>"",clean);}"
"org.jsoup.safety.CleanerTest.dropsUnresolvableRelativeLinks",0,"@Test public void dropsUnresolvableRelativeLinks(){String html=""<a href='/foo'>Link</a>"";String clean=Jsoup.clean(html,Whitelist.basic());assertEquals(""<a rel=\""nofollow\"">Link</a>"",clean);}"
"org.jsoup.safety.CleanerTest.handlesCustomProtocols",0,"@Test public void handlesCustomProtocols(){String html=""<img src='cid:12345' /> <img src='data:gzzt' />"";String dropped=Jsoup.clean(html,Whitelist.basicWithImages());assertEquals(""<img> \n<img>"",dropped);String preserved=Jsoup.clean(html,Whitelist.basicWithImages().addProtocols(""img"",""src"",""cid"",""data""));assertEquals(""<img src=\""cid:12345\""> \n<img src=\""data:gzzt\"">"",preserved);}"
"org.jsoup.safety.CleanerTest.handlesAllPseudoTag",0,"@Test public void handlesAllPseudoTag(){String html=""<p class='foo' src='bar'><a class='qux'>link</a></p>"";Whitelist whitelist=new Whitelist().addAttributes("":all"",""class"").addAttributes(""p"",""style"").addTags(""p"",""a"");String clean=Jsoup.clean(html,whitelist);assertEquals(""<p class=\""foo\""><a class=\""qux\"">link</a></p>"",clean);}"
"org.jsoup.safety.CleanerTest.addsTagOnAttributesIfNotSet",0,"@Test public void addsTagOnAttributesIfNotSet(){String html=""<p class='foo' src='bar'>One</p>"";Whitelist whitelist=new Whitelist().addAttributes(""p"",""class"");String clean=Jsoup.clean(html,whitelist);assertEquals(""<p class=\""foo\"">One</p>"",clean);}"
"org.jsoup.safety.CleanerTest.supplyOutputSettings",0,"@Test public void supplyOutputSettings(){Document.OutputSettings os=new Document.OutputSettings();os.prettyPrint(false);os.escapeMode(Entities.EscapeMode.extended);os.charset(""ascii"");String html=""<div><p>&bernou;</p></div>"";String customOut=Jsoup.clean(html,""http://foo.com/"",Whitelist.relaxed(),os);String defaultOut=Jsoup.clean(html,""http://foo.com/"",Whitelist.relaxed());assertNotSame(defaultOut,customOut);assertEquals(""<div><p>&Bscr;</p></div>"",customOut);assertEquals(""<div>\n"" + "" <p>ℬ</p>\n"" + ""</div>"",defaultOut);os.charset(""ASCII"");os.escapeMode(Entities.EscapeMode.base);String customOut2=Jsoup.clean(html,""http://foo.com/"",Whitelist.relaxed(),os);assertEquals(""<div><p>&#x212c;</p></div>"",customOut2);}"
"org.jsoup.safety.CleanerTest.handlesFramesets",0,"@Test public void handlesFramesets(){String dirty=""<html><head><script></script><noscript></noscript></head><frameset><frame src=\""foo\"" /><frame src=\""foo\"" /></frameset></html>"";String clean=Jsoup.clean(dirty,Whitelist.basic());assertEquals("""",clean);Document dirtyDoc=Jsoup.parse(dirty);Document cleanDoc=new Cleaner(Whitelist.basic()).clean(dirtyDoc);assertFalse(cleanDoc == null);assertEquals(0,cleanDoc.body().childNodeSize());}"
"org.jsoup.safety.CleanerTest.cleansInternationalText",0,"@Test public void cleansInternationalText(){assertEquals(""привет"",Jsoup.clean(""привет"",Whitelist.none()));}"
"org.jsoup.safety.CleanerTest.testScriptTagInWhiteList",0,"@Test public void testScriptTagInWhiteList(){Whitelist whitelist=Whitelist.relaxed();whitelist.addTags(""script"");assertTrue(Jsoup.isValid(""Hello<script>alert('Doh')</script>World !"",whitelist));}"
"org.jsoup.safety.CleanerTest.bailsIfRemovingProtocolThatsNotSet",0,"@Test(expected=IllegalArgumentException.class)public void bailsIfRemovingProtocolThatsNotSet(){Whitelist w=Whitelist.none();w.addAttributes(""a"",""href"");w.removeProtocols(""a"",""href"",""javascript"");}"
"org.jsoup.safety.CleanerTest.handlesControlCharactersAfterTagName",0,"@Test public void handlesControlCharactersAfterTagName(){String html=""<a/\06>"";String clean=Jsoup.clean(html,Whitelist.basic());assertEquals(""<a rel=\""nofollow\""></a>"",clean);}"
