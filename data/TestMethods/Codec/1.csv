test_case,faulty,test_code
"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException",0,"public void testInternalNoSuchAlgorithmException(){try {DigestUtils.getDigest(""Bogus Bogus"");fail(""A RuntimeException should have been thrown."");}catch(RuntimeException e){}}"
"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex",0,"public void testMd5Hex()throws IOException {assertEquals(""d41d8cd98f00b204e9800998ecf8427e"",DigestUtils.md5Hex(""""));assertEquals(""0cc175b9c0f1b6a831c399e269772661"",DigestUtils.md5Hex(""a""));assertEquals(""900150983cd24fb0d6963f7d28e17f72"",DigestUtils.md5Hex(""abc""));assertEquals(""f96b697d7cb7938d525a2f31aaf161d0"",DigestUtils.md5Hex(""message digest""));assertEquals(""c3fcd3d76192e4007dfb496cca67e13b"",DigestUtils.md5Hex(""abcdefghijklmnopqrstuvwxyz""));assertEquals(""d174ab98d277d9f5a5611c2c9f419d9f"",DigestUtils.md5Hex(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" + ""abcdefghijklmnopqrstuvwxyz"" + ""0123456789""));assertEquals(""57edf4a22be3c955ac49da2e2107b67a"",DigestUtils.md5Hex(""1234567890123456789012345678901234567890"" + ""1234567890123456789012345678901234567890""));assertEquals(DigestUtils.md5Hex(testData),DigestUtils.md5Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testMD5HexLength",0,"/** * An MD5 hash converted to hex should always be 32 characters.*/public void testMD5HexLength(){String hashMe=""this is some string that is longer than 32 characters"";String hash=DigestUtils.md5Hex(hashMe.getBytes());assertEquals(32,hash.length());hashMe=""length < 32"";hash=DigestUtils.md5Hex(hashMe.getBytes());assertEquals(32,hash.length());}"
"org.apache.commons.codec.digest.DigestUtilsTest.testMD5Length",0,"/** * An MD5 hash should always be a 16 element byte[].*/public void testMD5Length(){String hashMe=""this is some string that is longer than 16 characters"";byte[]hash=DigestUtils.md5(hashMe.getBytes());assertEquals(16,hash.length);hashMe=""length < 16"";hash=DigestUtils.md5(hashMe.getBytes());assertEquals(16,hash.length);}"
"org.apache.commons.codec.digest.DigestUtilsTest.testSha256",0,"public void testSha256()throws IOException {assertEquals(""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"",DigestUtils.sha256Hex(""abc""));assertEquals(""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"",DigestUtils.sha256Hex(""abc"".getBytes()));assertEquals(""248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1"",DigestUtils.sha256Hex(""abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq""));assertEquals(DigestUtils.sha256Hex(testData),DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testSha384",0,"public void testSha384()throws IOException {assertEquals(""cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed"" + ""8086072ba1e7cc2358baeca134c825a7"",DigestUtils.sha384Hex(""abc""));assertEquals(""cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed"" + ""8086072ba1e7cc2358baeca134c825a7"",DigestUtils.sha384Hex(""abc"".getBytes()));assertEquals(""09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712"" + ""fcc7c71a557e2db966c3e9fa91746039"",DigestUtils.sha384Hex(""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"" + ""hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu""));assertEquals(DigestUtils.sha384Hex(testData),DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testSha512",0,"public void testSha512()throws IOException {assertEquals(""ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a"" + ""2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"",DigestUtils.sha512Hex(""abc""));assertEquals(""ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a"" + ""2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"",DigestUtils.sha512Hex(""abc"".getBytes()));assertEquals(""8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018"" + ""501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909"",DigestUtils.sha512Hex(""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"" + ""hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu""));assertEquals(DigestUtils.sha512Hex(testData),DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex",0,"public void testShaHex()throws IOException {assertEquals(""a9993e364706816aba3e25717850c26c9cd0d89d"",DigestUtils.shaHex(""abc""));assertEquals(""a9993e364706816aba3e25717850c26c9cd0d89d"",DigestUtils.shaHex(""abc"".getBytes()));assertEquals(""84983e441c3bd26ebaae4aa1f95129e5e54670f1"",DigestUtils.shaHex(""abcdbcdecdefdefgefghfghighij"" + ""hijkijkljklmklmnlmnomnopnopq""));assertEquals(DigestUtils.shaHex(testData),DigestUtils.shaHex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.binary.Base64Test.testBase64",0,"/** * Test the Base64 implementation*/public void testBase64(){String content=""Hello World"";String encodedContent;encodedContent=new String(Base64.encodeBase64(content.getBytes()));assertTrue(""encoding hello world"",encodedContent.equals(""SGVsbG8gV29ybGQ=""));}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2",0,"/** * Tests conditional true branch for ""marker0"" test.*/public void testDecodePadMarkerIndex2(){assertEquals(""A"",new String(Base64.decodeBase64(""QQ=="".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3",0,"/** * Tests conditional branches for ""marker1"" test.*/public void testDecodePadMarkerIndex3(){assertEquals(""AA"",new String(Base64.decodeBase64(""QUE="".getBytes())));assertEquals(""AAA"",new String(Base64.decodeBase64(""QUFB"".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly",0,"public void testDecodePadOnly(){assertTrue(Base64.decodeBase64(""===="".getBytes()).length == 0);assertEquals("""",new String(Base64.decodeBase64(""===="".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked",0,"public void testDecodePadOnlyChunked(){assertTrue(Base64.decodeBase64(""====\n"".getBytes()).length == 0);assertEquals("""",new String(Base64.decodeBase64(""====\n"".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall",0,"public void testEncodeDecodeSmall(){for (int i=0;i < 12;i++){byte[]data=new byte[i];this.getRandom().nextBytes(data);byte[]enc=Base64.encodeBase64(data);assertTrue(""\"""" + (new String(enc))+ ""\"" is Base64 data."",Base64.isArrayByteBase64(enc));byte[]data2=Base64.decodeBase64(enc);assertTrue(toString(data)+ "" equals "" + toString(data2),Arrays.equals(data,data2));}}"
"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom",0,"public void testEncodeDecodeRandom(){for (int i=1;i < 5;i++){byte[]data=new byte[this.getRandom().nextInt(10000)+ 1];this.getRandom().nextBytes(data);byte[]enc=Base64.encodeBase64(data);assertTrue(Base64.isArrayByteBase64(enc));byte[]data2=Base64.decodeBase64(enc);assertTrue(Arrays.equals(data,data2));}}"
"org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition",0,"/** * Tests RFC 2045 section 2.1 CRLF definition.*/public void testRfc2045Section2Dot1CrLfDefinition(){assertTrue(Arrays.equals(new byte[]{13,10},Base64.CHUNK_SEPARATOR));}"
"org.apache.commons.codec.binary.Base64Test.testRfc2045Section6Dot8ChunkSizeDefinition",0,"/** * Tests RFC 2045 section 6.8 chuck size definition.*/public void testRfc2045Section6Dot8ChunkSizeDefinition(){assertEquals(76,Base64.CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64Test.testSingletons",0,"public void testSingletons(){assertEquals(""AA=="",new String(Base64.encodeBase64(new byte[]{(byte)0})));assertEquals(""AQ=="",new String(Base64.encodeBase64(new byte[]{(byte)1})));assertEquals(""Ag=="",new String(Base64.encodeBase64(new byte[]{(byte)2})));assertEquals(""Aw=="",new String(Base64.encodeBase64(new byte[]{(byte)3})));assertEquals(""BA=="",new String(Base64.encodeBase64(new byte[]{(byte)4})));assertEquals(""BQ=="",new String(Base64.encodeBase64(new byte[]{(byte)5})));assertEquals(""Bg=="",new String(Base64.encodeBase64(new byte[]{(byte)6})));assertEquals(""Bw=="",new String(Base64.encodeBase64(new byte[]{(byte)7})));assertEquals(""CA=="",new String(Base64.encodeBase64(new byte[]{(byte)8})));assertEquals(""CQ=="",new String(Base64.encodeBase64(new byte[]{(byte)9})));assertEquals(""Cg=="",new String(Base64.encodeBase64(new byte[]{(byte)10})));assertEquals(""Cw=="",new String(Base64.encodeBase64(new byte[]{(byte)11})));assertEquals(""DA=="",new String(Base64.encodeBase64(new byte[]{(byte)12})));assertEquals(""DQ=="",new String(Base64.encodeBase64(new byte[]{(byte)13})));assertEquals(""Dg=="",new String(Base64.encodeBase64(new byte[]{(byte)14})));assertEquals(""Dw=="",new String(Base64.encodeBase64(new byte[]{(byte)15})));assertEquals(""EA=="",new String(Base64.encodeBase64(new byte[]{(byte)16})));assertEquals(""EQ=="",new String(Base64.encodeBase64(new byte[]{(byte)17})));assertEquals(""Eg=="",new String(Base64.encodeBase64(new byte[]{(byte)18})));assertEquals(""Ew=="",new String(Base64.encodeBase64(new byte[]{(byte)19})));assertEquals(""FA=="",new String(Base64.encodeBase64(new byte[]{(byte)20})));assertEquals(""FQ=="",new String(Base64.encodeBase64(new byte[]{(byte)21})));assertEquals(""Fg=="",new String(Base64.encodeBase64(new byte[]{(byte)22})));assertEquals(""Fw=="",new String(Base64.encodeBase64(new byte[]{(byte)23})));assertEquals(""GA=="",new String(Base64.encodeBase64(new byte[]{(byte)24})));assertEquals(""GQ=="",new String(Base64.encodeBase64(new byte[]{(byte)25})));assertEquals(""Gg=="",new String(Base64.encodeBase64(new byte[]{(byte)26})));assertEquals(""Gw=="",new String(Base64.encodeBase64(new byte[]{(byte)27})));assertEquals(""HA=="",new String(Base64.encodeBase64(new byte[]{(byte)28})));assertEquals(""HQ=="",new String(Base64.encodeBase64(new byte[]{(byte)29})));assertEquals(""Hg=="",new String(Base64.encodeBase64(new byte[]{(byte)30})));assertEquals(""Hw=="",new String(Base64.encodeBase64(new byte[]{(byte)31})));assertEquals(""IA=="",new String(Base64.encodeBase64(new byte[]{(byte)32})));assertEquals(""IQ=="",new String(Base64.encodeBase64(new byte[]{(byte)33})));assertEquals(""Ig=="",new String(Base64.encodeBase64(new byte[]{(byte)34})));assertEquals(""Iw=="",new String(Base64.encodeBase64(new byte[]{(byte)35})));assertEquals(""JA=="",new String(Base64.encodeBase64(new byte[]{(byte)36})));assertEquals(""JQ=="",new String(Base64.encodeBase64(new byte[]{(byte)37})));assertEquals(""Jg=="",new String(Base64.encodeBase64(new byte[]{(byte)38})));assertEquals(""Jw=="",new String(Base64.encodeBase64(new byte[]{(byte)39})));assertEquals(""KA=="",new String(Base64.encodeBase64(new byte[]{(byte)40})));assertEquals(""KQ=="",new String(Base64.encodeBase64(new byte[]{(byte)41})));assertEquals(""Kg=="",new String(Base64.encodeBase64(new byte[]{(byte)42})));assertEquals(""Kw=="",new String(Base64.encodeBase64(new byte[]{(byte)43})));assertEquals(""LA=="",new String(Base64.encodeBase64(new byte[]{(byte)44})));assertEquals(""LQ=="",new String(Base64.encodeBase64(new byte[]{(byte)45})));assertEquals(""Lg=="",new String(Base64.encodeBase64(new byte[]{(byte)46})));assertEquals(""Lw=="",new String(Base64.encodeBase64(new byte[]{(byte)47})));assertEquals(""MA=="",new String(Base64.encodeBase64(new byte[]{(byte)48})));assertEquals(""MQ=="",new String(Base64.encodeBase64(new byte[]{(byte)49})));assertEquals(""Mg=="",new String(Base64.encodeBase64(new byte[]{(byte)50})));assertEquals(""Mw=="",new String(Base64.encodeBase64(new byte[]{(byte)51})));assertEquals(""NA=="",new String(Base64.encodeBase64(new byte[]{(byte)52})));assertEquals(""NQ=="",new String(Base64.encodeBase64(new byte[]{(byte)53})));assertEquals(""Ng=="",new String(Base64.encodeBase64(new byte[]{(byte)54})));assertEquals(""Nw=="",new String(Base64.encodeBase64(new byte[]{(byte)55})));assertEquals(""OA=="",new String(Base64.encodeBase64(new byte[]{(byte)56})));assertEquals(""OQ=="",new String(Base64.encodeBase64(new byte[]{(byte)57})));assertEquals(""Og=="",new String(Base64.encodeBase64(new byte[]{(byte)58})));assertEquals(""Ow=="",new String(Base64.encodeBase64(new byte[]{(byte)59})));assertEquals(""PA=="",new String(Base64.encodeBase64(new byte[]{(byte)60})));assertEquals(""PQ=="",new String(Base64.encodeBase64(new byte[]{(byte)61})));assertEquals(""Pg=="",new String(Base64.encodeBase64(new byte[]{(byte)62})));assertEquals(""Pw=="",new String(Base64.encodeBase64(new byte[]{(byte)63})));assertEquals(""QA=="",new String(Base64.encodeBase64(new byte[]{(byte)64})));assertEquals(""QQ=="",new String(Base64.encodeBase64(new byte[]{(byte)65})));assertEquals(""Qg=="",new String(Base64.encodeBase64(new byte[]{(byte)66})));assertEquals(""Qw=="",new String(Base64.encodeBase64(new byte[]{(byte)67})));assertEquals(""RA=="",new String(Base64.encodeBase64(new byte[]{(byte)68})));assertEquals(""RQ=="",new String(Base64.encodeBase64(new byte[]{(byte)69})));assertEquals(""Rg=="",new String(Base64.encodeBase64(new byte[]{(byte)70})));assertEquals(""Rw=="",new String(Base64.encodeBase64(new byte[]{(byte)71})));assertEquals(""SA=="",new String(Base64.encodeBase64(new byte[]{(byte)72})));assertEquals(""SQ=="",new String(Base64.encodeBase64(new byte[]{(byte)73})));assertEquals(""Sg=="",new String(Base64.encodeBase64(new byte[]{(byte)74})));assertEquals(""Sw=="",new String(Base64.encodeBase64(new byte[]{(byte)75})));assertEquals(""TA=="",new String(Base64.encodeBase64(new byte[]{(byte)76})));assertEquals(""TQ=="",new String(Base64.encodeBase64(new byte[]{(byte)77})));assertEquals(""Tg=="",new String(Base64.encodeBase64(new byte[]{(byte)78})));assertEquals(""Tw=="",new String(Base64.encodeBase64(new byte[]{(byte)79})));assertEquals(""UA=="",new String(Base64.encodeBase64(new byte[]{(byte)80})));assertEquals(""UQ=="",new String(Base64.encodeBase64(new byte[]{(byte)81})));assertEquals(""Ug=="",new String(Base64.encodeBase64(new byte[]{(byte)82})));assertEquals(""Uw=="",new String(Base64.encodeBase64(new byte[]{(byte)83})));assertEquals(""VA=="",new String(Base64.encodeBase64(new byte[]{(byte)84})));assertEquals(""VQ=="",new String(Base64.encodeBase64(new byte[]{(byte)85})));assertEquals(""Vg=="",new String(Base64.encodeBase64(new byte[]{(byte)86})));assertEquals(""Vw=="",new String(Base64.encodeBase64(new byte[]{(byte)87})));assertEquals(""WA=="",new String(Base64.encodeBase64(new byte[]{(byte)88})));assertEquals(""WQ=="",new String(Base64.encodeBase64(new byte[]{(byte)89})));assertEquals(""Wg=="",new String(Base64.encodeBase64(new byte[]{(byte)90})));assertEquals(""Ww=="",new String(Base64.encodeBase64(new byte[]{(byte)91})));assertEquals(""XA=="",new String(Base64.encodeBase64(new byte[]{(byte)92})));assertEquals(""XQ=="",new String(Base64.encodeBase64(new byte[]{(byte)93})));assertEquals(""Xg=="",new String(Base64.encodeBase64(new byte[]{(byte)94})));assertEquals(""Xw=="",new String(Base64.encodeBase64(new byte[]{(byte)95})));assertEquals(""YA=="",new String(Base64.encodeBase64(new byte[]{(byte)96})));assertEquals(""YQ=="",new String(Base64.encodeBase64(new byte[]{(byte)97})));assertEquals(""Yg=="",new String(Base64.encodeBase64(new byte[]{(byte)98})));assertEquals(""Yw=="",new String(Base64.encodeBase64(new byte[]{(byte)99})));assertEquals(""ZA=="",new String(Base64.encodeBase64(new byte[]{(byte)100})));assertEquals(""ZQ=="",new String(Base64.encodeBase64(new byte[]{(byte)101})));assertEquals(""Zg=="",new String(Base64.encodeBase64(new byte[]{(byte)102})));assertEquals(""Zw=="",new String(Base64.encodeBase64(new byte[]{(byte)103})));assertEquals(""aA=="",new String(Base64.encodeBase64(new byte[]{(byte)104})));}"
"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked",0,"public void testSingletonsChunked(){assertEquals(""AA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0})));assertEquals(""AQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)1})));assertEquals(""Ag==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)2})));assertEquals(""Aw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)3})));assertEquals(""BA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)4})));assertEquals(""BQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)5})));assertEquals(""Bg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)6})));assertEquals(""Bw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)7})));assertEquals(""CA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)8})));assertEquals(""CQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)9})));assertEquals(""Cg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)10})));assertEquals(""Cw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)11})));assertEquals(""DA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)12})));assertEquals(""DQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)13})));assertEquals(""Dg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)14})));assertEquals(""Dw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)15})));assertEquals(""EA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)16})));assertEquals(""EQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)17})));assertEquals(""Eg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)18})));assertEquals(""Ew==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)19})));assertEquals(""FA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)20})));assertEquals(""FQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)21})));assertEquals(""Fg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)22})));assertEquals(""Fw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)23})));assertEquals(""GA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)24})));assertEquals(""GQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)25})));assertEquals(""Gg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)26})));assertEquals(""Gw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)27})));assertEquals(""HA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)28})));assertEquals(""HQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)29})));assertEquals(""Hg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)30})));assertEquals(""Hw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)31})));assertEquals(""IA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)32})));assertEquals(""IQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)33})));assertEquals(""Ig==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)34})));assertEquals(""Iw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)35})));assertEquals(""JA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)36})));assertEquals(""JQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)37})));assertEquals(""Jg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)38})));assertEquals(""Jw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)39})));assertEquals(""KA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)40})));assertEquals(""KQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)41})));assertEquals(""Kg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)42})));assertEquals(""Kw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)43})));assertEquals(""LA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)44})));assertEquals(""LQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)45})));assertEquals(""Lg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)46})));assertEquals(""Lw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)47})));assertEquals(""MA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)48})));assertEquals(""MQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)49})));assertEquals(""Mg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)50})));assertEquals(""Mw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)51})));assertEquals(""NA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)52})));assertEquals(""NQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)53})));assertEquals(""Ng==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)54})));assertEquals(""Nw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)55})));assertEquals(""OA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)56})));assertEquals(""OQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)57})));assertEquals(""Og==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)58})));assertEquals(""Ow==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)59})));assertEquals(""PA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)60})));assertEquals(""PQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)61})));assertEquals(""Pg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)62})));assertEquals(""Pw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)63})));assertEquals(""QA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)64})));assertEquals(""QQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)65})));assertEquals(""Qg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)66})));assertEquals(""Qw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)67})));assertEquals(""RA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)68})));assertEquals(""RQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)69})));assertEquals(""Rg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)70})));assertEquals(""Rw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)71})));assertEquals(""SA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)72})));assertEquals(""SQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)73})));assertEquals(""Sg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)74})));assertEquals(""Sw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)75})));assertEquals(""TA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)76})));assertEquals(""TQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)77})));assertEquals(""Tg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)78})));assertEquals(""Tw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)79})));assertEquals(""UA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)80})));assertEquals(""UQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)81})));assertEquals(""Ug==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)82})));assertEquals(""Uw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)83})));assertEquals(""VA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)84})));assertEquals(""VQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)85})));assertEquals(""Vg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)86})));assertEquals(""Vw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)87})));assertEquals(""WA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)88})));assertEquals(""WQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)89})));assertEquals(""Wg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)90})));assertEquals(""Ww==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)91})));assertEquals(""XA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)92})));assertEquals(""XQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)93})));assertEquals(""Xg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)94})));assertEquals(""Xw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)95})));assertEquals(""YA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)96})));assertEquals(""YQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)97})));assertEquals(""Yg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)98})));assertEquals(""Yw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)99})));assertEquals(""ZA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)100})));assertEquals(""ZQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)101})));assertEquals(""Zg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)102})));assertEquals(""Zw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)103})));assertEquals(""aA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)104})));}"
"org.apache.commons.codec.binary.Base64Test.testTriplets",0,"public void testTriplets(){assertEquals(""AAAA"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)0})));assertEquals(""AAAB"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)1})));assertEquals(""AAAC"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)2})));assertEquals(""AAAD"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)3})));assertEquals(""AAAE"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)4})));assertEquals(""AAAF"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)5})));assertEquals(""AAAG"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)6})));assertEquals(""AAAH"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)7})));assertEquals(""AAAI"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)8})));assertEquals(""AAAJ"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)9})));assertEquals(""AAAK"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)10})));assertEquals(""AAAL"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)11})));assertEquals(""AAAM"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)12})));assertEquals(""AAAN"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)13})));assertEquals(""AAAO"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)14})));assertEquals(""AAAP"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)15})));assertEquals(""AAAQ"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)16})));assertEquals(""AAAR"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)17})));assertEquals(""AAAS"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)18})));assertEquals(""AAAT"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)19})));assertEquals(""AAAU"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)20})));assertEquals(""AAAV"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)21})));assertEquals(""AAAW"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)22})));assertEquals(""AAAX"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)23})));assertEquals(""AAAY"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)24})));assertEquals(""AAAZ"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)25})));assertEquals(""AAAa"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)26})));assertEquals(""AAAb"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)27})));assertEquals(""AAAc"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)28})));assertEquals(""AAAd"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)29})));assertEquals(""AAAe"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)30})));assertEquals(""AAAf"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)31})));assertEquals(""AAAg"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)32})));assertEquals(""AAAh"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)33})));assertEquals(""AAAi"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)34})));assertEquals(""AAAj"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)35})));assertEquals(""AAAk"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)36})));assertEquals(""AAAl"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)37})));assertEquals(""AAAm"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)38})));assertEquals(""AAAn"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)39})));assertEquals(""AAAo"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)40})));assertEquals(""AAAp"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)41})));assertEquals(""AAAq"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)42})));assertEquals(""AAAr"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)43})));assertEquals(""AAAs"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)44})));assertEquals(""AAAt"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)45})));assertEquals(""AAAu"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)46})));assertEquals(""AAAv"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)47})));assertEquals(""AAAw"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)48})));assertEquals(""AAAx"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)49})));assertEquals(""AAAy"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)50})));assertEquals(""AAAz"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)51})));assertEquals(""AAA0"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)52})));assertEquals(""AAA1"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)53})));assertEquals(""AAA2"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)54})));assertEquals(""AAA3"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)55})));assertEquals(""AAA4"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)56})));assertEquals(""AAA5"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)57})));assertEquals(""AAA6"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)58})));assertEquals(""AAA7"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)59})));assertEquals(""AAA8"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)60})));assertEquals(""AAA9"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)61})));assertEquals(""AAA+"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)62})));assertEquals(""AAA/"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)63})));}"
"org.apache.commons.codec.binary.Base64Test.testTripletsChunked",0,"public void testTripletsChunked(){assertEquals(""AAAA\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)0})));assertEquals(""AAAB\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)1})));assertEquals(""AAAC\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)2})));assertEquals(""AAAD\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)3})));assertEquals(""AAAE\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)4})));assertEquals(""AAAF\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)5})));assertEquals(""AAAG\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)6})));assertEquals(""AAAH\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)7})));assertEquals(""AAAI\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)8})));assertEquals(""AAAJ\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)9})));assertEquals(""AAAK\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)10})));assertEquals(""AAAL\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)11})));assertEquals(""AAAM\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)12})));assertEquals(""AAAN\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)13})));assertEquals(""AAAO\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)14})));assertEquals(""AAAP\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)15})));assertEquals(""AAAQ\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)16})));assertEquals(""AAAR\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)17})));assertEquals(""AAAS\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)18})));assertEquals(""AAAT\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)19})));assertEquals(""AAAU\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)20})));assertEquals(""AAAV\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)21})));assertEquals(""AAAW\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)22})));assertEquals(""AAAX\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)23})));assertEquals(""AAAY\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)24})));assertEquals(""AAAZ\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)25})));assertEquals(""AAAa\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)26})));assertEquals(""AAAb\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)27})));assertEquals(""AAAc\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)28})));assertEquals(""AAAd\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)29})));assertEquals(""AAAe\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)30})));assertEquals(""AAAf\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)31})));assertEquals(""AAAg\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)32})));assertEquals(""AAAh\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)33})));assertEquals(""AAAi\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)34})));assertEquals(""AAAj\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)35})));assertEquals(""AAAk\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)36})));assertEquals(""AAAl\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)37})));assertEquals(""AAAm\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)38})));assertEquals(""AAAn\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)39})));assertEquals(""AAAo\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)40})));assertEquals(""AAAp\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)41})));assertEquals(""AAAq\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)42})));assertEquals(""AAAr\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)43})));assertEquals(""AAAs\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)44})));assertEquals(""AAAt\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)45})));assertEquals(""AAAu\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)46})));assertEquals(""AAAv\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)47})));assertEquals(""AAAw\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)48})));assertEquals(""AAAx\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)49})));assertEquals(""AAAy\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)50})));assertEquals(""AAAz\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)51})));assertEquals(""AAA0\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)52})));assertEquals(""AAA1\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)53})));assertEquals(""AAA2\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)54})));assertEquals(""AAA3\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)55})));assertEquals(""AAA4\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)56})));assertEquals(""AAA5\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)57})));assertEquals(""AAA6\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)58})));assertEquals(""AAA7\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)59})));assertEquals(""AAA8\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)60})));assertEquals(""AAA9\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)61})));assertEquals(""AAA+\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)62})));assertEquals(""AAA/\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)63})));}"
"org.apache.commons.codec.binary.Base64Test.testKnownEncodings",0,"public void testKnownEncodings(){assertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="",new String(Base64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes())));assertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes())));assertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="",new String(Base64.encodeBase64(""It was the best of times,it was the worst of times."".getBytes())));assertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="",new String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes())));assertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="",new String(Base64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes())));assertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="",new String(Base64.encodeBase64(""{0,1,2,3,4,5,6,7,8,9 }"".getBytes())));assertEquals(""eHl6enkh"",new String(Base64.encodeBase64(""xyzzy!"".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testKnownDecodings",0,"public void testKnownDecodings(){assertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));assertEquals(""It was the best of times,it was the worst of times."",new String(Base64.decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes())));assertEquals(""http://jakarta.apache.org/commmons"",new String(Base64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes())));assertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"",new String(Base64.decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes())));assertEquals(""{0,1,2,3,4,5,6,7,8,9 }"",new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes())));assertEquals(""xyzzy!"",new String(Base64.decodeBase64(""eHl6enkh"".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testNonBase64Test",0,"public void testNonBase64Test()throws Exception {byte[]bArray={'%'};assertFalse(""Invalid Base64 array was incorrectly validated as "" + ""an array of Base64 encoded data"",Base64.isArrayByteBase64(bArray));boolean exceptionThrown=false;try {Base64 b64=new Base64();byte[]result=b64.decode(bArray);assertTrue(""The result should be empty as the test encoded content did "" + ""not contain any valid base 64 characters"",result.length == 0);}catch(Exception e){exceptionThrown=true;}assertFalse(""Exception was thrown when trying to decode "" + ""invalid base64 encoded data - RFC 2045 requires that all "" + ""non base64 character be discarded,an exception should not""+ "" have been thrown"",exceptionThrown);}"
"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode",0,"public void testIgnoringNonBase64InDecode()throws Exception {assertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes())));}"
"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64",0,"public void testIsArrayByteBase64(){assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MIN_VALUE}));assertFalse(Base64.isArrayByteBase64(new byte[]{-125}));assertFalse(Base64.isArrayByteBase64(new byte[]{-10}));assertFalse(Base64.isArrayByteBase64(new byte[]{0}));assertFalse(Base64.isArrayByteBase64(new byte[]{64,Byte.MAX_VALUE}));assertFalse(Base64.isArrayByteBase64(new byte[]{Byte.MAX_VALUE}));assertTrue(Base64.isArrayByteBase64(new byte[]{'A'}));assertFalse(Base64.isArrayByteBase64(new byte[]{'A',Byte.MIN_VALUE}));}"
"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter",0,"public void testObjectDecodeWithInvalidParameter()throws Exception {boolean exceptionThrown=false;Base64 b64=new Base64();try {Object o=new String(""Yadayadayada"");b64.decode(o);}catch(Exception e){exceptionThrown=true;}assertTrue(""decode(Object)didn't throw an exception when passed a "" + ""String object"",exceptionThrown);}"
"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter",0,"public void testObjectDecodeWithValidParameter()throws Exception {String original=""Hello World!"";byte[]bArray=Base64.encodeBase64((new String(original)).getBytes());Object o=bArray;Base64 b64=new Base64();Object oDecoded=b64.decode(o);byte[]baDecoded=(byte[])oDecoded;String dest=new String(baDecoded);assertTrue(""dest string down not equal original"",dest.equals(original));}"
"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter",0,"public void testObjectEncodeWithInvalidParameter()throws Exception {boolean exceptionThrown=false;Base64 b64=new Base64();try {Object o=new String(""Yadayadayada"");b64.encode(o);}catch(Exception e){exceptionThrown=true;}assertTrue(""encode(Object)didn't throw an exception when passed a "" + ""String object"",exceptionThrown);}"
"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter",0,"public void testObjectEncodeWithValidParameter()throws Exception {String original=""Hello World!"";byte[]origBytes=original.getBytes();Object origObj=origBytes;Base64 b64=new Base64();Object oEncoded=b64.encode(origObj);byte[]bArray=Base64.decodeBase64((byte[])oEncoded);String dest=new String(bArray);assertTrue(""dest string down not equal original"",dest.equals(original));}"
"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace",0,"public void testDecodeWithWhitespace()throws Exception {String orig=""I am a late night coder."";byte[]encodedArray=Base64.encodeBase64(orig.getBytes());StringBuffer intermediate=new StringBuffer(new String(encodedArray));intermediate.insert(2,' ');intermediate.insert(5,'\t');intermediate.insert(10,'\r');intermediate.insert(15,'\n');byte[]encodedWithWS=intermediate.toString().getBytes();byte[]decodedWithWS=Base64.decodeBase64(encodedWithWS);String dest=new String(decodedWithWS);assertTrue(""Dest string doesn't equals the original"",dest.equals(orig));}"
"org.apache.commons.codec.binary.Base64Test.testDiscardWhitespace",0,"public void testDiscardWhitespace()throws Exception {String orig=""I am a late night coder."";byte[]encodedArray=Base64.encodeBase64(orig.getBytes());StringBuffer intermediate=new StringBuffer(new String(encodedArray));intermediate.insert(2,' ');intermediate.insert(5,'\t');intermediate.insert(10,'\r');intermediate.insert(15,'\n');byte[]encodedWithWS=intermediate.toString().getBytes();byte[]encodedNoWS=Base64.discardWhitespace(encodedWithWS);byte[]decodedWithWS=Base64.decodeBase64(encodedWithWS);byte[]decodedNoWS=Base64.decodeBase64(encodedNoWS);String destFromWS=new String(decodedWithWS);String destFromNoWS=new String(decodedNoWS);assertTrue(""Dest string doesn't eausl original"",destFromWS.equals(orig));assertTrue(""Dest string doesn't eausl original"",destFromNoWS.equals(orig));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger1",0,"public void testCodeInteger1(){String encodedInt1=""li7dzDacuo67Jg7mtqEm2TRuOMU="";BigInteger bigInt1=new BigInteger(""85739377120809420210425962799"" + ""0318636601332086981"");assertEquals(encodedInt1,new String(Base64.encodeInteger(bigInt1)));assertEquals(bigInt1,Base64.decodeInteger(encodedInt1.getBytes()));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger2",0,"public void testCodeInteger2(){String encodedInt2=""9B5ypLY9pMOmtxCeTDHgwdNFeGs="";BigInteger bigInt2=new BigInteger(""13936727572861167254666467268"" + ""91466679477132949611"");assertEquals(encodedInt2,new String(Base64.encodeInteger(bigInt2)));assertEquals(bigInt2,Base64.decodeInteger(encodedInt2.getBytes()));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger3",0,"public void testCodeInteger3(){String encodedInt3=""FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2"" + ""rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="";BigInteger bigInt3=new BigInteger(""10806548154093873461951748545"" + ""1196989136416448805819079363524309897749044958112417136240557"" + ""4495062430572478766856090958495998158114332651671116876320938126"");assertEquals(encodedInt3,new String(Base64.encodeInteger(bigInt3)));assertEquals(bigInt3,Base64.decodeInteger(encodedInt3.getBytes()));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger4",0,"public void testCodeInteger4(){String encodedInt4=""ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"" + ""4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"" + ""DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv""+ ""Q0="";BigInteger bigInt4=new BigInteger(""80624726256040348115552042320"" + ""6968135001872753709424419772586693950232350200555646471175944"" + ""519297087885987040810778908507262272892702303774422853675597""+ ""748008534040890923814202286633163248086055216976551456088015""+ ""338880713818192088877057717530169381044092839402438015097654""+ ""53542091716518238707344493641683483917"");assertEquals(encodedInt4,new String(Base64.encodeInteger(bigInt4)));assertEquals(bigInt4,Base64.decodeInteger(encodedInt4.getBytes()));}"
"org.apache.commons.codec.binary.Base64Test.testCodeIntegerEdgeCases",0,"public void testCodeIntegerEdgeCases(){}"
"org.apache.commons.codec.language.RefinedSoundexTest.testDifference",0,"public void testDifference()throws EncoderException {assertEquals(0,this.getEncoder().difference(null,null));assertEquals(0,this.getEncoder().difference("""",""""));assertEquals(0,this.getEncoder().difference("" "","" ""));assertEquals(6,this.getEncoder().difference(""Smith"",""Smythe""));assertEquals(3,this.getEncoder().difference(""Ann"",""Andrew""));assertEquals(1,this.getEncoder().difference(""Margaret"",""Andrew""));assertEquals(1,this.getEncoder().difference(""Janet"",""Margaret""));assertEquals(5,this.getEncoder().difference(""Green"",""Greene""));assertEquals(1,this.getEncoder().difference(""Blotchet-Halls"",""Greene""));assertEquals(6,this.getEncoder().difference(""Smith"",""Smythe""));assertEquals(8,this.getEncoder().difference(""Smithers"",""Smythers""));assertEquals(5,this.getEncoder().difference(""Anothers"",""Brothers""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncode",0,"public void testEncode(){assertEquals(""T6036084"",this.getEncoder().encode(""testing""));assertEquals(""T6036084"",this.getEncoder().encode(""TESTING""));assertEquals(""T60"",this.getEncoder().encode(""The""));assertEquals(""Q503"",this.getEncoder().encode(""quick""));assertEquals(""B1908"",this.getEncoder().encode(""brown""));assertEquals(""F205"",this.getEncoder().encode(""fox""));assertEquals(""J408106"",this.getEncoder().encode(""jumped""));assertEquals(""O0209"",this.getEncoder().encode(""over""));assertEquals(""T60"",this.getEncoder().encode(""the""));assertEquals(""L7050"",this.getEncoder().encode(""lazy""));assertEquals(""D6043"",this.getEncoder().encode(""dogs""));assertEquals(""D6043"",RefinedSoundex.US_ENGLISH.encode(""dogs""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter",0,"public void testGetMappingCodeNonLetter(){char code=this.getEncoder().getMappingCode('#');assertEquals(""Code does not equals zero"",0,code);}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty",0,"public void testEncodeEmpty()throws Exception {Encoder encoder=makeEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {StringEncoder encoder=makeEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeWithInvalidObject",0,"public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=makeEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence",1,"public void testLocaleIndependence()throws Exception {StringEncoder encoder=makeEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for (int i=0;i < data.length;i++){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(data[i]);}else {String cur=null;try {cur=encoder.encode(data[i]);}catch(Exception e){fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.language.CaverphoneTest.testSpecificationExamples",0,"public void testSpecificationExamples(){Caverphone caverphone=new Caverphone();String[][]data={{""Stevenson"",""STFNSN1111""},{""Peter"",""PTA1111111""},{""ready"",""RTA1111111""},{""social"",""SSA1111111""},{""able"",""APA1111111""},{""Tedder"",""TTA1111111""},{""Karleen"",""KLN1111111""},{""Dyun"",""TN11111111""}};for (int i=0;i < data.length;i++){assertEquals(data[i][1],caverphone.caverphone(data[i][0]));}}"
"org.apache.commons.codec.language.CaverphoneTest.testEncodeEmpty",0,"public void testEncodeEmpty()throws Exception {Encoder encoder=makeEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.CaverphoneTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {StringEncoder encoder=makeEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.CaverphoneTest.testEncodeWithInvalidObject",0,"public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=makeEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.CaverphoneTest.testLocaleIndependence",1,"public void testLocaleIndependence()throws Exception {StringEncoder encoder=makeEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for (int i=0;i < data.length;i++){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(data[i]);}else {String cur=null;try {cur=encoder.encode(data[i]);}catch(Exception e){fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException",0,"/** * Tests for Object decode(Object)*/public void testDecodeObjectException(){try {this.instance.decode(new Object());}catch(DecoderException e){return;}fail(""Expected DecoderException"");}"
"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject",0,"/** * Tests for Object decode(Object)*/public void testDecodeObject()throws Exception {byte[]bits;bits=new byte[1];assertDecodeObject(bits,""00000000"");bits=new byte[1];bits[0]=BIT_0;assertDecodeObject(bits,""00000001"");bits=new byte[1];bits[0]=BIT_0 | BIT_1;assertDecodeObject(bits,""00000011"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;assertDecodeObject(bits,""00000111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;assertDecodeObject(bits,""00001111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;assertDecodeObject(bits,""00011111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;assertDecodeObject(bits,""00111111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;assertDecodeObject(bits,""01111111"");bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""11111111"");bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000000011111111"");bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000000111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000001111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000011111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000111111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0001111111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0011111111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0111111111111111"");bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""1111111111111111"");assertDecodeObject(new byte[0],null);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testDecodebyteArray",0,"public void testDecodebyteArray(){byte[]bits=new byte[1];byte[]decoded=instance.decode(""00000000"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=instance.decode(""00000001"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=instance.decode(""00000011"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=instance.decode(""00000111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=instance.decode(""00001111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=instance.decode(""00011111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=instance.decode(""00111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=instance.decode(""01111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""11111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000000011111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000000111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000001111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000011111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0001111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0011111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0111111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""1111111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString",0,"public void testToByteArrayFromString(){byte[]bits=new byte[1];byte[]decoded=instance.toByteArray(""00000000"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=instance.toByteArray(""00000001"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=instance.toByteArray(""00000011"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=instance.toByteArray(""00000111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=instance.toByteArray(""00001111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=instance.toByteArray(""00011111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=instance.toByteArray(""00111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=instance.toByteArray(""01111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""11111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000000011111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000000111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000001111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000011111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0001111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0011111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0111111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""1111111111111111"");assertEquals(new String(bits),new String(decoded));assertEquals(0,instance.toByteArray((String)null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciicharArray",0,"public void testFromAsciicharArray(){byte[]bits=new byte[1];byte[]decoded=BinaryCodec.fromAscii(""00000000"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=BinaryCodec.fromAscii(""00000001"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=BinaryCodec.fromAscii(""00000011"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=BinaryCodec.fromAscii(""00000111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=BinaryCodec.fromAscii(""00001111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=BinaryCodec.fromAscii(""00011111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=BinaryCodec.fromAscii(""00111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=BinaryCodec.fromAscii(""01111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""11111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000011111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000001111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000011111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0001111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0011111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0111111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""1111111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));assertEquals(0,BinaryCodec.fromAscii((char[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciibyteArray",0,"public void testFromAsciibyteArray(){byte[]bits=new byte[1];byte[]decoded=BinaryCodec.fromAscii(""00000000"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=BinaryCodec.fromAscii(""00000001"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=BinaryCodec.fromAscii(""00000011"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=BinaryCodec.fromAscii(""00000111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=BinaryCodec.fromAscii(""00001111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=BinaryCodec.fromAscii(""00011111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=BinaryCodec.fromAscii(""00111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=BinaryCodec.fromAscii(""01111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""11111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000011111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000001111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000011111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0001111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0011111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0111111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""1111111111111111"".getBytes());assertEquals(new String(bits),new String(decoded));assertEquals(0,BinaryCodec.fromAscii((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodebyteArray",0,"public void testEncodebyteArray(){byte[]bits=new byte[1];String l_encoded=new String(instance.encode(bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String(instance.encode(bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String(instance.encode(bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(instance.encode(bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(instance.encode(bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(instance.encode(bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(instance.encode(bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(instance.encode(bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(instance.encode(bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""1111111111111111"",l_encoded);assertEquals(0,instance.encode((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes",0,"public void testToAsciiBytes(){byte[]bits=new byte[1];String l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""1111111111111111"",l_encoded);assertEquals(0,BinaryCodec.toAsciiBytes((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars",0,"public void testToAsciiChars(){byte[]bits=new byte[1];String l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""1111111111111111"",l_encoded);assertEquals(0,BinaryCodec.toAsciiChars((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString",0,"/** * Tests the toAsciiString(byte[])method*/public void testToAsciiString(){byte[]bits=new byte[1];String l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""1111111111111111"",l_encoded);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull",0,"public void testEncodeObjectNull()throws Exception {Object obj=new byte[0];assertEquals(0,((char[])instance.encode(obj)).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException",0,"public void testEncodeObjectException(){try {instance.encode("""");}catch(EncoderException e){return;}fail(""Expected EncoderException"");}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject",0,"public void testEncodeObject()throws Exception {byte[]bits=new byte[1];String l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""1111111111111111"",l_encoded);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip",0,"public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertEquals(""=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82"",qpcodec.encode(ru_msg,""UTF-8""));assertEquals(""Gr=C3=BCezi_z=C3=A4m=C3=A4"",qpcodec.encode(ch_msg,""UTF-8""));assertEquals(ru_msg,qpcodec.decode(qpcodec.encode(ru_msg,""UTF-8""),""UTF-8""));assertEquals(ch_msg,qpcodec.decode(qpcodec.encode(ch_msg,""UTF-8""),""UTF-8""));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode",0,"public void testBasicEncodeDecode()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""= Hello there =\r\n"";String encoded=qpcodec.encode(plain);assertEquals(""Basic quoted-printable encoding test"",""=3D Hello there =3D=0D=0A"",encoded);assertEquals(""Basic quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode",0,"public void testSafeCharEncodeDecode()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""abc123_-.*~!@#$%^&()+{}\""\\;:`,/[]"";String encoded=qpcodec.encode(plain);assertEquals(""Safe chars quoted-printable encoding test"",plain,encoded);assertEquals(""Safe chars quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode",0,"public void testUnsafeEncodeDecode()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""=\r\n"";String encoded=qpcodec.encode(plain);assertEquals(""Unsafe chars quoted-printable encoding test"",""=3D=0D=0A"",encoded);assertEquals(""Unsafe chars quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull",0,"public void testEncodeDecodeNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertNull(""Null string quoted-printable encoding test"",qpcodec.encode((String)null));assertNull(""Null string quoted-printable decoding test"",qpcodec.decode((String)null));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid",0,"public void testDecodeInvalid()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();try {qpcodec.decode(""="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {qpcodec.decode(""=A"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {qpcodec.decode(""=WW"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();byte[]plain=null;byte[]encoded=qpcodec.encode(plain);assertEquals(""Encoding a null string should return null"",null,encoded);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet",0,"public void testEncodeUrlWithNullBitSet()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""1+1 = 2"";String encoded=new String(QuotedPrintableCodec.encodeQuotedPrintable(null,plain.getBytes()));assertEquals(""Basic quoted-printable encoding test"",""1+1 =3D 2"",encoded);assertEquals(""Basic quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray",0,"public void testDecodeWithNullArray()throws Exception {byte[]plain=null;byte[]result=QuotedPrintableCodec.decodeQuotedPrintable(plain);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull",0,"public void testEncodeStringWithNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String test=null;String result=qpcodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull",0,"public void testDecodeStringWithNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String test=null;String result=qpcodec.decode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects",0,"public void testEncodeObjects()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""1+1 = 2"";String encoded=(String)qpcodec.encode((Object)plain);assertEquals(""Basic quoted-printable encoding test"",""1+1 =3D 2"",encoded);byte[]plainBA=plain.getBytes();byte[]encodedBA=(byte[])qpcodec.encode((Object)plainBA);encoded=new String(encodedBA);assertEquals(""Basic quoted-printable encoding test"",""1+1 =3D 2"",encoded);Object result=qpcodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qpcodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testInvalidEncoding",0,"public void testInvalidEncoding(){QuotedPrintableCodec qpcodec=new QuotedPrintableCodec(""NONSENSE"");String plain=""Hello there!"";try {qpcodec.encode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(EncoderException ee){}try {qpcodec.decode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects",0,"public void testDecodeObjects()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""1+1 =3D 2"";String decoded=(String)qpcodec.decode((Object)plain);assertEquals(""Basic quoted-printable decoding test"",""1+1 = 2"",decoded);byte[]plainBA=plain.getBytes();byte[]decodedBA=(byte[])qpcodec.decode((Object)plainBA);decoded=new String(decodedBA);assertEquals(""Basic quoted-printable decoding test"",""1+1 = 2"",decoded);Object result=qpcodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qpcodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding",0,"public void testDefaultEncoding()throws Exception {String plain=""Hello there!"";QuotedPrintableCodec qpcodec=new QuotedPrintableCodec(""UnicodeBig"");qpcodec.encode(plain);String encoded1=qpcodec.encode(plain,""UnicodeBig"");String encoded2=qpcodec.encode(plain);assertEquals(encoded1,encoded2);}"
"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput",0,"public void testNullInput()throws Exception {RFC1522TestCodec testcodec=new RFC1522TestCodec();assertNull(testcodec.decodeText(null));assertNull(testcodec.encodeText(null,""UTF-8""));}"
"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid",0,"public void testDecodeInvalid()throws Exception {RFC1522TestCodec testcodec=new RFC1522TestCodec();try {testcodec.decodeText(""whatever"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {testcodec.decodeText(""=?stuff?="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {testcodec.decodeText(""=?UTF-8?stuff?="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {testcodec.decodeText(""=?UTF-8?T?stuff"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {testcodec.decodeText(""=??T?stuff?="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {testcodec.decodeText(""=?UTF-8??stuff?="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {testcodec.decodeText(""=?UTF-8?W?stuff?="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}}"
"org.apache.commons.codec.net.BCodecTest.testNullInput",0,"public void testNullInput()throws Exception {BCodec bcodec=new BCodec();assertNull(bcodec.doDecoding(null));assertNull(bcodec.doEncoding(null));}"
"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip",0,"public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);BCodec bcodec=new BCodec(""UTF-8"");assertEquals(""=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?="",bcodec.encode(ru_msg));assertEquals(""=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?="",bcodec.encode(ch_msg));assertEquals(ru_msg,bcodec.decode(bcodec.encode(ru_msg)));assertEquals(ch_msg,bcodec.decode(bcodec.encode(ch_msg)));}"
"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode",0,"public void testBasicEncodeDecode()throws Exception {BCodec bcodec=new BCodec();String plain=""Hello there"";String encoded=bcodec.encode(plain);assertEquals(""Basic B encoding test"",""=?UTF-8?B?SGVsbG8gdGhlcmU=?="",encoded);assertEquals(""Basic B decoding test"",plain,bcodec.decode(encoded));}"
"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull",0,"public void testEncodeDecodeNull()throws Exception {BCodec bcodec=new BCodec();assertNull(""Null string B encoding test"",bcodec.encode((String)null));assertNull(""Null string B decoding test"",bcodec.decode((String)null));}"
"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull",0,"public void testEncodeStringWithNull()throws Exception {BCodec bcodec=new BCodec();String test=null;String result=bcodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull",0,"public void testDecodeStringWithNull()throws Exception {BCodec bcodec=new BCodec();String test=null;String result=bcodec.decode(test);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.BCodecTest.testEncodeObjects",0,"public void testEncodeObjects()throws Exception {BCodec bcodec=new BCodec();String plain=""what not"";String encoded=(String)bcodec.encode((Object)plain);assertEquals(""Basic B encoding test"",""=?UTF-8?B?d2hhdCBub3Q=?="",encoded);Object result=bcodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);bcodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}}"
"org.apache.commons.codec.net.BCodecTest.testInvalidEncoding",0,"public void testInvalidEncoding(){BCodec bcodec=new BCodec(""NONSENSE"");try {bcodec.encode(""Hello there!"");fail(""We set the encoding to a bogus NONSENSE value,this shouldn't have worked."");}catch(EncoderException ee){}try {bcodec.decode(""=?NONSENSE?B?Hello there!?="");fail(""We set the encoding to a bogus NONSENSE value,this shouldn't have worked."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.BCodecTest.testDecodeObjects",0,"public void testDecodeObjects()throws Exception {BCodec bcodec=new BCodec();String decoded=""=?UTF-8?B?d2hhdCBub3Q=?="";String plain=(String)bcodec.decode((Object)decoded);assertEquals(""Basic B decoding test"",""what not"",plain);Object result=bcodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);bcodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip",0,"public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);URLCodec urlCodec=new URLCodec();this.validateState(urlCodec);assertEquals(""%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82"",urlCodec.encode(ru_msg,""UTF-8""));assertEquals(""Gr%C3%BCezi_z%C3%A4m%C3%A4"",urlCodec.encode(ch_msg,""UTF-8""));assertEquals(ru_msg,urlCodec.decode(urlCodec.encode(ru_msg,""UTF-8""),""UTF-8""));assertEquals(ch_msg,urlCodec.decode(urlCodec.encode(ch_msg,""UTF-8""),""UTF-8""));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode",0,"public void testBasicEncodeDecode()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello there!"";String encoded=urlCodec.encode(plain);assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);assertEquals(""Basic URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode",0,"public void testSafeCharEncodeDecode()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""abc123_-.*"";String encoded=urlCodec.encode(plain);assertEquals(""Safe chars URL encoding test"",plain,encoded);assertEquals(""Safe chars URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode",0,"public void testUnsafeEncodeDecode()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""~!@#$%^&()+{}\""\\;:`,/[]"";String encoded=urlCodec.encode(plain);assertEquals(""Unsafe chars URL encoding test"",""%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D"",encoded);assertEquals(""Unsafe chars URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull",0,"public void testEncodeDecodeNull()throws Exception {URLCodec urlCodec=new URLCodec();assertNull(""Null string URL encoding test"",urlCodec.encode((String)null));assertNull(""Null string URL decoding test"",urlCodec.decode((String)null));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid",0,"public void testDecodeInvalid()throws Exception {URLCodec urlCodec=new URLCodec();try {urlCodec.decode(""%"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {urlCodec.decode(""%A"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {urlCodec.decode(""%WW"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent",0,"public void testDecodeInvalidContent()throws UnsupportedEncodingException,DecoderException {String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);URLCodec urlCodec=new URLCodec();byte[]input=ch_msg.getBytes(""ISO-8859-1"");byte[]output=urlCodec.decode(input);assertEquals(input.length,output.length);for (int i=0;i < input.length;i++){assertEquals(input[i],output[i]);}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {URLCodec urlCodec=new URLCodec();byte[]plain=null;byte[]encoded=urlCodec.encode(plain);assertEquals(""Encoding a null string should return null"",null,encoded);this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet",0,"public void testEncodeUrlWithNullBitSet()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello there!"";String encoded=new String(URLCodec.encodeUrl(null,plain.getBytes()));assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);assertEquals(""Basic URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray",0,"public void testDecodeWithNullArray()throws Exception {byte[]plain=null;byte[]result=URLCodec.decodeUrl(plain);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull",0,"public void testEncodeStringWithNull()throws Exception {URLCodec urlCodec=new URLCodec();String test=null;String result=urlCodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull",0,"public void testDecodeStringWithNull()throws Exception {URLCodec urlCodec=new URLCodec();String test=null;String result=urlCodec.decode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects",0,"public void testEncodeObjects()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello there!"";String encoded=(String)urlCodec.encode((Object)plain);assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);byte[]plainBA=plain.getBytes();byte[]encodedBA=(byte[])urlCodec.encode((Object)plainBA);encoded=new String(encodedBA);assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);Object result=urlCodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);urlCodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding",0,"public void testInvalidEncoding(){URLCodec urlCodec=new URLCodec(""NONSENSE"");String plain=""Hello there!"";try {urlCodec.encode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(EncoderException ee){}try {urlCodec.decode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(DecoderException ee){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects",0,"public void testDecodeObjects()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello+there%21"";String decoded=(String)urlCodec.decode((Object)plain);assertEquals(""Basic URL decoding test"",""Hello there!"",decoded);byte[]plainBA=plain.getBytes();byte[]decodedBA=(byte[])urlCodec.decode((Object)plainBA);decoded=new String(decodedBA);assertEquals(""Basic URL decoding test"",""Hello there!"",decoded);Object result=urlCodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);urlCodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding",0,"public void testDefaultEncoding()throws Exception {String plain=""Hello there!"";URLCodec urlCodec=new URLCodec(""UnicodeBig"");urlCodec.encode(plain);String encoded1=urlCodec.encode(plain,""UnicodeBig"");String encoded2=urlCodec.encode(plain);assertEquals(encoded1,encoded2);this.validateState(urlCodec);}"
"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters",0,"public void testDecodeArrayOddCharacters(){try {new Hex().decode(new byte[]{65});fail(""An exception wasn't thrown when trying to decode an odd number of characters"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0",0,"public void testDecodeBadCharacterPos0(){try {new Hex().decode(""q0"");fail(""An exception wasn't thrown when trying to decode an illegal character"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1",0,"public void testDecodeBadCharacterPos1(){try {new Hex().decode(""0q"");fail(""An exception wasn't thrown when trying to decode an illegal character"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeClassCastException",0,"public void testDecodeClassCastException(){try {new Hex().decode(new int[]{65});fail(""An exception wasn't thrown when trying to decode."");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters",0,"public void testDecodeHexOddCharacters(){try {Hex.decodeHex(new char[]{'A'});fail(""An exception wasn't thrown when trying to decode an odd number of characters"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters",0,"public void testDecodeStringOddCharacters(){try {new Hex().decode(""6"");fail(""An exception wasn't thrown when trying to decode an odd number of characters"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDencodeEmpty",0,"public void testDencodeEmpty()throws DecoderException {assertTrue(Arrays.equals(new byte[0],Hex.decodeHex(new char[0])));assertTrue(Arrays.equals(new byte[0],new Hex().decode(new byte[0])));assertTrue(Arrays.equals(new byte[0],(byte[])new Hex().decode("""")));}"
"org.apache.commons.codec.binary.HexTest.testEncodeClassCastException",0,"public void testEncodeClassCastException(){try {new Hex().encode(new int[]{65});fail(""An exception wasn't thrown when trying to encode."");}catch(EncoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom",0,"public void testEncodeDecodeRandom()throws DecoderException,EncoderException {Random random=new Random();Hex hex=new Hex();for (int i=5;i > 0;i--){byte[]data=new byte[random.nextInt(10000)+ 1];random.nextBytes(data);char[]encodedChars=Hex.encodeHex(data);byte[]decodedBytes=Hex.decodeHex(encodedChars);assertTrue(Arrays.equals(data,decodedBytes));byte[]encodedStringBytes=hex.encode(data);decodedBytes=hex.decode(encodedStringBytes);assertTrue(Arrays.equals(data,decodedBytes));String dataString=new String(encodedChars);char[]encodedStringChars=(char[])hex.encode(dataString);decodedBytes=(byte[])hex.decode(encodedStringChars);assertTrue(Arrays.equals(dataString.getBytes(),decodedBytes));dataString=new String(encodedChars);encodedStringChars=(char[])hex.encode(dataString);decodedBytes=(byte[])hex.decode(new String(encodedStringChars));assertTrue(Arrays.equals(dataString.getBytes(),decodedBytes));}}"
"org.apache.commons.codec.binary.HexTest.testEncodeEmpty",0,"public void testEncodeEmpty()throws EncoderException {assertTrue(Arrays.equals(new char[0],Hex.encodeHex(new byte[0])));assertTrue(Arrays.equals(new byte[0],new Hex().encode(new byte[0])));assertTrue(Arrays.equals(new char[0],(char[])new Hex().encode("""")));}"
"org.apache.commons.codec.binary.HexTest.testEncodeZeroes",0,"public void testEncodeZeroes(){char[]c=Hex.encodeHex(new byte[36]);assertEquals(""000000000000000000000000000000000000"" + ""000000000000000000000000000000000000"",new String(c));}"
"org.apache.commons.codec.binary.HexTest.testHelloWorld",0,"public void testHelloWorld(){byte[]b=""Hello World"".getBytes();char[]c=Hex.encodeHex(b);assertEquals(""48656c6c6f20576f726c64"",new String(c));}"
"org.apache.commons.codec.net.QCodecTest.testNullInput",0,"public void testNullInput()throws Exception {QCodec qcodec=new QCodec();assertNull(qcodec.doDecoding(null));assertNull(qcodec.doEncoding(null));}"
"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip",0,"public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);QCodec qcodec=new QCodec(""UTF-8"");assertEquals(""=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?="",qcodec.encode(ru_msg));assertEquals(""=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?="",qcodec.encode(ch_msg));assertEquals(ru_msg,qcodec.decode(qcodec.encode(ru_msg)));assertEquals(ch_msg,qcodec.decode(qcodec.encode(ch_msg)));}"
"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode",0,"public void testBasicEncodeDecode()throws Exception {QCodec qcodec=new QCodec();String plain=""= Hello there =\r\n"";String encoded=qcodec.encode(plain);assertEquals(""Basic Q encoding test"",""=?UTF-8?Q?=3D Hello there =3D=0D=0A?="",encoded);assertEquals(""Basic Q decoding test"",plain,qcodec.decode(encoded));}"
"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode",0,"public void testUnsafeEncodeDecode()throws Exception {QCodec qcodec=new QCodec();String plain=""?_=\r\n"";String encoded=qcodec.encode(plain);assertEquals(""Unsafe chars Q encoding test"",""=?UTF-8?Q?=3F=5F=3D=0D=0A?="",encoded);assertEquals(""Unsafe chars Q decoding test"",plain,qcodec.decode(encoded));}"
"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull",0,"public void testEncodeDecodeNull()throws Exception {QCodec qcodec=new QCodec();assertNull(""Null string Q encoding test"",qcodec.encode((String)null));assertNull(""Null string Q decoding test"",qcodec.decode((String)null));}"
"org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull",0,"public void testEncodeStringWithNull()throws Exception {QCodec qcodec=new QCodec();String test=null;String result=qcodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull",0,"public void testDecodeStringWithNull()throws Exception {QCodec qcodec=new QCodec();String test=null;String result=qcodec.decode(test);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QCodecTest.testEncodeObjects",0,"public void testEncodeObjects()throws Exception {QCodec qcodec=new QCodec();String plain=""1+1 = 2"";String encoded=(String)qcodec.encode((Object)plain);assertEquals(""Basic Q encoding test"",""=?UTF-8?Q?1+1 =3D 2?="",encoded);Object result=qcodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qcodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}}"
"org.apache.commons.codec.net.QCodecTest.testInvalidEncoding",0,"public void testInvalidEncoding(){QCodec qcodec=new QCodec(""NONSENSE"");try {qcodec.encode(""Hello there!"");fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(EncoderException ee){}try {qcodec.decode(""=?NONSENSE?Q?Hello there!?="");fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QCodecTest.testDecodeObjects",0,"public void testDecodeObjects()throws Exception {QCodec qcodec=new QCodec();String decoded=""=?UTF-8?Q?1+1 =3D 2?="";String plain=(String)qcodec.decode((Object)decoded);assertEquals(""Basic Q decoding test"",""1+1 = 2"",plain);Object result=qcodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qcodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks",0,"public void testEncodeDecodeBlanks()throws Exception {String plain=""Mind those pesky blanks"";String encoded1=""=?UTF-8?Q?Mind those pesky blanks?="";String encoded2=""=?UTF-8?Q?Mind_those_pesky_blanks?="";QCodec qcodec=new QCodec();qcodec.setEncodeBlanks(false);String s=qcodec.encode(plain);assertEquals(""Blanks encoding with the Q codec test"",encoded1,s);qcodec.setEncodeBlanks(true);s=qcodec.encode(plain);assertEquals(""Blanks encoding with the Q codec test"",encoded2,s);s=qcodec.decode(encoded1);assertEquals(""Blanks decoding with the Q codec test"",plain,s);s=qcodec.decode(encoded2);assertEquals(""Blanks decoding with the Q codec test"",plain,s);}"
"org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy",0,"public void testLetUsMakeCloverHappy()throws Exception {QCodec qcodec=new QCodec();qcodec.setEncodeBlanks(true);assertTrue(qcodec.isEncodeBlanks());qcodec.setEncodeBlanks(false);assertFalse(qcodec.isEncodeBlanks());}"
"org.apache.commons.codec.language.SoundexTest.testB650",0,"public void testB650(){this.encodeAll(new String[]{""BARHAM"",""BARONE"",""BARRON"",""BERNA"",""BIRNEY"",""BIRNIE"",""BOOROM"",""BOREN"",""BORN"",""BOURN"",""BOURNE"",""BOWRON"",""BRAIN"",""BRAME"",""BRANN"",""BRAUN"",""BREEN"",""BRIEN"",""BRIM"",""BRIMM"",""BRINN"",""BRION"",""BROOM"",""BROOME"",""BROWN"",""BROWNE"",""BRUEN"",""BRUHN"",""BRUIN"",""BRUMM"",""BRUN"",""BRUNO"",""BRYAN"",""BURIAN"",""BURN"",""BURNEY"",""BYRAM"",""BYRNE"",""BYRON"",""BYRUM""},""B650"");}"
"org.apache.commons.codec.language.SoundexTest.testDifference",0,"public void testDifference()throws EncoderException {assertEquals(0,this.getEncoder().difference(null,null));assertEquals(0,this.getEncoder().difference("""",""""));assertEquals(0,this.getEncoder().difference("" "","" ""));assertEquals(4,this.getEncoder().difference(""Smith"",""Smythe""));assertEquals(2,this.getEncoder().difference(""Ann"",""Andrew""));assertEquals(1,this.getEncoder().difference(""Margaret"",""Andrew""));assertEquals(0,this.getEncoder().difference(""Janet"",""Margaret""));assertEquals(4,this.getEncoder().difference(""Green"",""Greene""));assertEquals(0,this.getEncoder().difference(""Blotchet-Halls"",""Greene""));assertEquals(4,this.getEncoder().difference(""Smith"",""Smythe""));assertEquals(4,this.getEncoder().difference(""Smithers"",""Smythers""));assertEquals(2,this.getEncoder().difference(""Anothers"",""Brothers""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBasic",0,"public void testEncodeBasic(){assertEquals(""T235"",this.getEncoder().encode(""testing""));assertEquals(""T000"",this.getEncoder().encode(""The""));assertEquals(""Q200"",this.getEncoder().encode(""quick""));assertEquals(""B650"",this.getEncoder().encode(""brown""));assertEquals(""F200"",this.getEncoder().encode(""fox""));assertEquals(""J513"",this.getEncoder().encode(""jumped""));assertEquals(""O160"",this.getEncoder().encode(""over""));assertEquals(""T000"",this.getEncoder().encode(""the""));assertEquals(""L200"",this.getEncoder().encode(""lazy""));assertEquals(""D200"",this.getEncoder().encode(""dogs""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2",0,"/** * Examples from http://www.bradandkathy.com/genealogy/overviewofsoundex.html*/public void testEncodeBatch2(){assertEquals(""A462"",this.getEncoder().encode(""Allricht""));assertEquals(""E166"",this.getEncoder().encode(""Eberhard""));assertEquals(""E521"",this.getEncoder().encode(""Engebrethson""));assertEquals(""H512"",this.getEncoder().encode(""Heimbach""));assertEquals(""H524"",this.getEncoder().encode(""Hanselmann""));assertEquals(""H431"",this.getEncoder().encode(""Hildebrand""));assertEquals(""K152"",this.getEncoder().encode(""Kavanagh""));assertEquals(""L530"",this.getEncoder().encode(""Lind""));assertEquals(""L222"",this.getEncoder().encode(""Lukaschowsky""));assertEquals(""M235"",this.getEncoder().encode(""McDonnell""));assertEquals(""M200"",this.getEncoder().encode(""McGee""));assertEquals(""O155"",this.getEncoder().encode(""Opnian""));assertEquals(""O155"",this.getEncoder().encode(""Oppenheimer""));assertEquals(""R355"",this.getEncoder().encode(""Riedemanas""));assertEquals(""Z300"",this.getEncoder().encode(""Zita""));assertEquals(""Z325"",this.getEncoder().encode(""Zitzmeinn""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3",0,"/** * Examples from http://www.archives.gov/research_room/genealogy/census/soundex.html*/public void testEncodeBatch3(){assertEquals(""W252"",this.getEncoder().encode(""Washington""));assertEquals(""L000"",this.getEncoder().encode(""Lee""));assertEquals(""G362"",this.getEncoder().encode(""Gutierrez""));assertEquals(""P236"",this.getEncoder().encode(""Pfister""));assertEquals(""J250"",this.getEncoder().encode(""Jackson""));assertEquals(""T522"",this.getEncoder().encode(""Tymczak""));assertEquals(""V532"",this.getEncoder().encode(""VanDeusen""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4",0,"/** * Examples from: http://www.myatt.demon.co.uk/sxalg.htm*/public void testEncodeBatch4(){assertEquals(""H452"",this.getEncoder().encode(""HOLMES""));assertEquals(""A355"",this.getEncoder().encode(""ADOMOMI""));assertEquals(""V536"",this.getEncoder().encode(""VONDERLEHR""));assertEquals(""B400"",this.getEncoder().encode(""BALL""));assertEquals(""S000"",this.getEncoder().encode(""SHAW""));assertEquals(""J250"",this.getEncoder().encode(""JACKSON""));assertEquals(""S545"",this.getEncoder().encode(""SCANLON""));assertEquals(""S532"",this.getEncoder().encode(""SAINTJOHN""));}"
"org.apache.commons.codec.language.SoundexTest.testBadCharacters",0,"public void testBadCharacters(){assertEquals(""H452"",this.getEncoder().encode(""HOL>MES""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes",0,"public void testEncodeIgnoreApostrophes(){this.encodeAll(new String[]{""OBrien"",""'OBrien"",""O'Brien"",""OB'rien"",""OBr'ien"",""OBri'en"",""OBrie'n"",""OBrien'""},""O165"");}"
"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens",0,"/** * Test data from http://www.myatt.demon.co.uk/sxalg.htm*/public void testEncodeIgnoreHyphens(){this.encodeAll(new String[]{""KINGSMITH"",""-KINGSMITH"",""K-INGSMITH"",""KI-NGSMITH"",""KIN-GSMITH"",""KING-SMITH"",""KINGS-MITH"",""KINGSM-ITH"",""KINGSMI-TH"",""KINGSMIT-H"",""KINGSMITH-""},""K525"");}"
"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable",0,"public void testEncodeIgnoreTrimmable(){assertEquals(""W252"",this.getEncoder().encode("" \t\n\r Washington \t\n\r ""));}"
"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1",0,"/** * Consonants from the same code group separated by W or H are treated as one.*/public void testHWRuleEx1(){assertEquals(""A261"",this.getEncoder().encode(""Ashcraft""));}"
"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2",0,"/** * Consonants from the same code group separated by W or H are treated as one. Test data from http://www.myatt.demon.co.uk/sxalg.htm*/public void testHWRuleEx2(){assertEquals(""B312"",this.getEncoder().encode(""BOOTHDAVIS""));assertEquals(""B312"",this.getEncoder().encode(""BOOTH-DAVIS""));}"
"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3",0,"/** * Consonants from the same code group separated by W or H are treated as one.*/public void testHWRuleEx3(){assertEquals(""S460"",this.getEncoder().encode(""Sgler""));assertEquals(""S460"",this.getEncoder().encode(""Swhgler""));this.encodeAll(new String[]{""SAILOR"",""SALYER"",""SAYLOR"",""SCHALLER"",""SCHELLER"",""SCHILLER"",""SCHOOLER"",""SCHULER"",""SCHUYLER"",""SEILER"",""SEYLER"",""SHOLAR"",""SHULER"",""SILAR"",""SILER"",""SILLER""},""S460"");}"
"org.apache.commons.codec.language.SoundexTest.testMaxLength",0,"public void testMaxLength()throws Exception {Soundex soundex=new Soundex();soundex.setMaxLength(soundex.getMaxLength());assertEquals(""S460"",this.getEncoder().encode(""Sgler""));}"
"org.apache.commons.codec.language.SoundexTest.testMaxLengthLessThan3Fix",0,"public void testMaxLengthLessThan3Fix()throws Exception {Soundex soundex=new Soundex();soundex.setMaxLength(2);assertEquals(""S460"",soundex.encode(""SCHELLER""));}"
"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1",0,"/** * Examples for MS SQLServer from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp*/public void testMsSqlServer1(){assertEquals(""S530"",this.getEncoder().encode(""Smith""));assertEquals(""S530"",this.getEncoder().encode(""Smythe""));}"
"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2",0,"/** * Examples for MS SQLServer from http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/Q100/3/65.asp&NoWebContent=1*/public void testMsSqlServer2(){this.encodeAll(new String[]{""Erickson"",""Erickson"",""Erikson"",""Ericson"",""Ericksen"",""Ericsen""},""E625"");}"
"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3",0,"/** * Examples for MS SQLServer from http://databases.about.com/library/weekly/aa042901a.htm*/public void testMsSqlServer3(){assertEquals(""A500"",this.getEncoder().encode(""Ann""));assertEquals(""A536"",this.getEncoder().encode(""Andrew""));assertEquals(""J530"",this.getEncoder().encode(""Janet""));assertEquals(""M626"",this.getEncoder().encode(""Margaret""));assertEquals(""S315"",this.getEncoder().encode(""Steven""));assertEquals(""M240"",this.getEncoder().encode(""Michael""));assertEquals(""R163"",this.getEncoder().encode(""Robert""));assertEquals(""L600"",this.getEncoder().encode(""Laura""));assertEquals(""A500"",this.getEncoder().encode(""Anne""));}"
"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis",0,"/** * Fancy characters are not mapped by the default US mapping. http://issues.apache.org/bugzilla/show_bug.cgi?id=29080*/public void testUsMappingOWithDiaeresis(){assertEquals(""O000"",this.getEncoder().encode(""o""));if (Character.isLetter('ö')){try {assertEquals(""Ö000"",this.getEncoder().encode(""ö""));fail(""Expected IllegalArgumentException not thrown"");}catch(IllegalArgumentException e){}}else {assertEquals("""",this.getEncoder().encode(""ö""));}}"
"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute",0,"/** * Fancy characters are not mapped by the default US mapping. http://issues.apache.org/bugzilla/show_bug.cgi?id=29080*/public void testUsMappingEWithAcute(){assertEquals(""E000"",this.getEncoder().encode(""e""));if (Character.isLetter('é')){try {assertEquals(""É000"",this.getEncoder().encode(""é""));fail(""Expected IllegalArgumentException not thrown"");}catch(IllegalArgumentException e){}}else {assertEquals("""",this.getEncoder().encode(""é""));}}"
"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic",0,"/** * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56*/public void testUsEnglishStatic(){assertEquals(Soundex.US_ENGLISH.soundex(""Williams""),""W452"");}"
"org.apache.commons.codec.language.SoundexTest.testNewInstance",0,"/** * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56*/public void testNewInstance(){assertEquals(new Soundex().soundex(""Williams""),""W452"");}"
"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty",0,"public void testEncodeEmpty()throws Exception {Encoder encoder=makeEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.SoundexTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {StringEncoder encoder=makeEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject",0,"public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=makeEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence",1,"public void testLocaleIndependence()throws Exception {StringEncoder encoder=makeEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for (int i=0;i < data.length;i++){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(data[i]);}else {String cur=null;try {cur=encoder.encode(data[i]);}catch(Exception e){fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest",0,"public void doubleMetaphoneEqualTest(String[][]pairs,boolean useAlternate){this.validateFixture(pairs);for (int i=0;i < pairs.length;i++){String name0=pairs[i][0];String name1=pairs[i][1];String failMsg=""Expected match between "" + name0 + "" and ""+ name1+ "" (use alternate: ""+ useAlternate+ "")"";assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,useAlternate));assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1,name0,useAlternate));if (!useAlternate){assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1));assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1,name0));}}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest",0,"public void doubleMetaphoneNotEqualTest(boolean alternate){assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Brain"",""Band"",alternate));assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Band"",""Brain"",alternate));if (!alternate){assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Brain"",""Band""));assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Band"",""Brain""));}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone",0,"public void testDoubleMetaphone(){assertDoubleMetaphone(""TSTN"",""testing"");assertDoubleMetaphone(""0"",""The"");assertDoubleMetaphone(""KK"",""quick"");assertDoubleMetaphone(""PRN"",""brown"");assertDoubleMetaphone(""FKS"",""fox"");assertDoubleMetaphone(""JMPT"",""jumped"");assertDoubleMetaphone(""AFR"",""over"");assertDoubleMetaphone(""0"",""the"");assertDoubleMetaphone(""LS"",""lazy"");assertDoubleMetaphone(""TKS"",""dogs"");assertDoubleMetaphone(""MKFR"",""MacCafferey"");assertDoubleMetaphone(""STFN"",""Stephan"");assertDoubleMetaphone(""KSSK"",""Kuczewski"");assertDoubleMetaphoneAlt(""TSTN"",""testing"");assertDoubleMetaphoneAlt(""T"",""The"");assertDoubleMetaphoneAlt(""KK"",""quick"");assertDoubleMetaphoneAlt(""PRN"",""brown"");assertDoubleMetaphoneAlt(""FKS"",""fox"");assertDoubleMetaphoneAlt(""AMPT"",""jumped"");assertDoubleMetaphoneAlt(""AFR"",""over"");assertDoubleMetaphoneAlt(""T"",""the"");assertDoubleMetaphoneAlt(""LS"",""lazy"");assertDoubleMetaphoneAlt(""TKS"",""dogs"");assertDoubleMetaphoneAlt(""MKFR"",""MacCafferey"");assertDoubleMetaphoneAlt(""STFN"",""Stephan"");assertDoubleMetaphoneAlt(""KXFS"",""Kutchefski"");}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty",0,"public void testEmpty(){assertEquals(null,this.getDoubleMetaphone().doubleMetaphone(null));assertEquals(null,this.getDoubleMetaphone().doubleMetaphone(""""));assertEquals(null,this.getDoubleMetaphone().doubleMetaphone("" ""));assertEquals(null,this.getDoubleMetaphone().doubleMetaphone(""\t\n\r ""));}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic",0,"public void testIsDoubleMetaphoneEqualBasic(){String[][]testFixture=new String[][]{{""Case"",""case""},{""CASE"",""Case""},{""caSe"",""cAsE""},{""cookie"",""quick""},{""quick"",""cookie""},{""Brian"",""Bryan""},{""Auto"",""Otto""},{""Steven"",""Stefan""},{""Philipowitz"",""Filipowicz""}};doubleMetaphoneEqualTest(testFixture,false);doubleMetaphoneEqualTest(testFixture,true);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended1",0,"/** * Example in the original article but failures in this Java impl:*/public void testIsDoubleMetaphoneEqualExtended1(){}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2",0,"public void testIsDoubleMetaphoneEqualExtended2(){String[][]testFixture=new String[][]{{""Jablonski"",""Yablonsky""}};doubleMetaphoneEqualTest(testFixture,true);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3",0,"/** * Used to generate the MATCHES array and test possible matches from the FIXTURE arrary.*/public void testIsDoubleMetaphoneEqualExtended3(){this.validateFixture(FIXTURE);StringBuffer failures=new StringBuffer();StringBuffer matches=new StringBuffer();String cr=System.getProperty(""line.separator"");matches.append(""private static final String[][]MATCHES = {"" + cr);int failCount=0;for (int i=0;i < FIXTURE.length;i++){String name0=FIXTURE[i][0];String name1=FIXTURE[i][1];boolean match1=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,false);boolean match2=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,true);if (match1 == false && match2 == false){String failMsg=""["" + i + ""]""+ name0+ "" and ""+ name1+ cr;failures.append(failMsg);failCount++;}else {matches.append(""{\"""" + name0 + ""\"",\""""+ name1+ ""\""},""+ cr);}}String msg=failures.toString();matches.append(""};"");if (msg.length()> 0){}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES",0,"public void testIsDoubleMetaphoneEqualWithMATCHES(){this.validateFixture(MATCHES);for (int i=0;i < MATCHES.length;i++){String name0=MATCHES[i][0];String name1=MATCHES[i][1];boolean match1=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,false);boolean match2=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,true);if (match1 == false && match2 == false){fail(""Expected match ["" + i + ""]""+ name0+ "" and ""+ name1);}}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual",0,"public void testIsDoubleMetaphoneNotEqual(){doubleMetaphoneNotEqualTest(false);doubleMetaphoneNotEqualTest(true);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla",0,"public void testCCedilla(){this.getDoubleMetaphone().isDoubleMetaphoneEqual(""ç"",""S"");}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde",0,"public void testNTilde(){this.getDoubleMetaphone().isDoubleMetaphoneEqual(""ñ"",""N"");}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty",0,"public void testEncodeEmpty()throws Exception {Encoder encoder=makeEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {StringEncoder encoder=makeEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeWithInvalidObject",0,"public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=makeEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence",1,"public void testLocaleIndependence()throws Exception {StringEncoder encoder=makeEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for (int i=0;i < data.length;i++){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(data[i]);}else {String cur=null;try {cur=encoder.encode(data[i]);}catch(Exception e){fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorNoArgCon",0,"public void testComparatorNoArgCon()throws Exception {new StringEncoderComparator();}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex",0,"public void testComparatorWithSoundex()throws Exception {StringEncoderComparator sCompare=new StringEncoderComparator(new Soundex());assertTrue(""O'Brien and O'Brian didn't come out with "" + ""the same Soundex,something must be wrong here"",0 == sCompare.compare(""O'Brien"",""O'Brian""));}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone",0,"public void testComparatorWithDoubleMetaphone()throws Exception {StringEncoderComparator sCompare=new StringEncoderComparator(new DoubleMetaphone());String[]testArray={""Jordan"",""Sosa"",""Prior"",""Pryor""};List testList=Arrays.asList(testArray);String[]controlArray={""Jordan"",""Prior"",""Pryor"",""Sosa""};Collections.sort(testList,sCompare);String[]resultArray=(String[])testList.toArray(new String[0]);for (int i=0;i < resultArray.length;i++){assertEquals(""Result Array not Equal to Control Array at index: "" + i,controlArray[i],resultArray[i]);}}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput",0,"public void testComparatorWithDoubleMetaphoneAndInvalidInput()throws Exception {StringEncoderComparator sCompare=new StringEncoderComparator(new DoubleMetaphone());int compare=sCompare.compare(new Double(3.0),new Long(3));assertEquals(""Trying to compare objects that make no sense to the underlying encoder should return a zero compare code"",0,compare);}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1",0,"public void testIsMetaphoneEqual1(){this.assertMetaphoneEqual(new String[][]{{""Case"",""case""},{""CASE"",""Case""},{""caSe"",""cAsE""},{""quick"",""cookie""}});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2",0,"/** * Matches computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqual2(){this.assertMetaphoneEqual(new String[][]{{""Lawrence"",""Lorenza""},{""Gary"",""Cahra""}});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero",0,"/** * Initial AE case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualAero(){this.assertIsMetaphoneEqual(""Aero"",new String[]{""Eure""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite",0,"/** * Initial WH case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualWhite(){this.assertIsMetaphoneEqual(""White"",new String[]{""Wade"",""Wait"",""Waite"",""Wat"",""Whit"",""Wiatt"",""Wit"",""Wittie"",""Witty"",""Wood"",""Woodie"",""Woody""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert",0,"/** * Initial A,not followed by an E case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualAlbert(){this.assertIsMetaphoneEqual(""Albert"",new String[]{""Ailbert"",""Alberik"",""Albert"",""Alberto"",""Albrecht""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualGary(){this.assertIsMetaphoneEqual(""Gary"",new String[]{""Cahra"",""Cara"",""Carey"",""Cari"",""Caria"",""Carie"",""Caro"",""Carree"",""Carri"",""Carrie"",""Carry"",""Cary"",""Cora"",""Corey"",""Cori"",""Corie"",""Correy"",""Corri"",""Corrie"",""Corry"",""Cory"",""Gray"",""Kara"",""Kare"",""Karee"",""Kari"",""Karia"",""Karie"",""Karrah"",""Karrie"",""Karry"",""Kary"",""Keri"",""Kerri"",""Kerrie"",""Kerry"",""Kira"",""Kiri"",""Kora"",""Kore"",""Kori"",""Korie"",""Korrie"",""Korry""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualJohn(){this.assertIsMetaphoneEqual(""John"",new String[]{""Gena"",""Gene"",""Genia"",""Genna"",""Genni"",""Gennie"",""Genny"",""Giana"",""Gianna"",""Gina"",""Ginni"",""Ginnie"",""Ginny"",""Jaine"",""Jan"",""Jana"",""Jane"",""Janey"",""Jania"",""Janie"",""Janna"",""Jany"",""Jayne"",""Jean"",""Jeana"",""Jeane"",""Jeanie"",""Jeanna"",""Jeanne"",""Jeannie"",""Jen"",""Jena"",""Jeni"",""Jenn"",""Jenna"",""Jennee"",""Jenni"",""Jennie"",""Jenny"",""Jinny"",""Jo Ann"",""Jo-Ann"",""Jo-Anne"",""Joan"",""Joana"",""Joane"",""Joanie"",""Joann"",""Joanna"",""Joanne"",""Joeann"",""Johna"",""Johnna"",""Joni"",""Jonie"",""Juana"",""June"",""Junia"",""Junie""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight",0,"/** * Initial KN case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualKnight(){this.assertIsMetaphoneEqual(""Knight"",new String[]{""Hynda"",""Nada"",""Nadia"",""Nady"",""Nat"",""Nata"",""Natty"",""Neda"",""Nedda"",""Nedi"",""Netta"",""Netti"",""Nettie"",""Netty"",""Nita"",""Nydia""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualMary(){this.assertIsMetaphoneEqual(""Mary"",new String[]{""Mair"",""Maire"",""Mara"",""Mareah"",""Mari"",""Maria"",""Marie"",""Mary"",""Maura"",""Maure"",""Meara"",""Merrie"",""Merry"",""Mira"",""Moira"",""Mora"",""Moria"",""Moyra"",""Muire"",""Myra"",""Myrah""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualParis(){this.assertIsMetaphoneEqual(""Paris"",new String[]{""Pearcy"",""Perris"",""Piercy"",""Pierz"",""Pryse""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualPeter(){this.assertIsMetaphoneEqual(""Peter"",new String[]{""Peadar"",""Peder"",""Pedro"",""Peter"",""Petr"",""Peyter"",""Pieter"",""Pietro"",""Piotr""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualRay(){this.assertIsMetaphoneEqual(""Ray"",new String[]{""Ray"",""Rey"",""Roi"",""Roy"",""Ruy""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualSusan(){this.assertIsMetaphoneEqual(""Susan"",new String[]{""Siusan"",""Sosanna"",""Susan"",""Susana"",""Susann"",""Susanna"",""Susannah"",""Susanne"",""Suzann"",""Suzanna"",""Suzanne"",""Zuzana""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright",0,"/** * Initial WR case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualWright(){this.assertIsMetaphoneEqual(""Wright"",new String[]{""Rota"",""Rudd"",""Ryde""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/public void testIsMetaphoneEqualXalan(){this.assertIsMetaphoneEqual(""Xalan"",new String[]{""Celene"",""Celina"",""Celine"",""Selena"",""Selene"",""Selina"",""Seline"",""Suellen"",""Xylina""});}"
"org.apache.commons.codec.language.MetaphoneTest.testMetaphone",0,"public void testMetaphone(){assertEquals(""HL"",this.getMetaphone().metaphone(""howl""));assertEquals(""TSTN"",this.getMetaphone().metaphone(""testing""));assertEquals(""0"",this.getMetaphone().metaphone(""The""));assertEquals(""KK"",this.getMetaphone().metaphone(""quick""));assertEquals(""BRN"",this.getMetaphone().metaphone(""brown""));assertEquals(""FKS"",this.getMetaphone().metaphone(""fox""));assertEquals(""JMPT"",this.getMetaphone().metaphone(""jumped""));assertEquals(""OFR"",this.getMetaphone().metaphone(""over""));assertEquals(""0"",this.getMetaphone().metaphone(""the""));assertEquals(""LS"",this.getMetaphone().metaphone(""lazy""));assertEquals(""TKS"",this.getMetaphone().metaphone(""dogs""));}"
"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB",0,"public void testWordEndingInMB(){assertEquals(""KM"",this.getMetaphone().metaphone(""COMB""));assertEquals(""TM"",this.getMetaphone().metaphone(""TOMB""));assertEquals(""WM"",this.getMetaphone().metaphone(""WOMB""));}"
"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY",0,"public void testDiscardOfSCEOrSCIOrSCY(){assertEquals(""SNS"",this.getMetaphone().metaphone(""SCIENCE""));assertEquals(""SN"",this.getMetaphone().metaphone(""SCENE""));assertEquals(""S"",this.getMetaphone().metaphone(""SCY""));}"
"org.apache.commons.codec.language.MetaphoneTest.testWhy",0,"/** * Tests (CODEC-57)Metaphone.metaphone(String)returns an empty string when passed the word ""why""*/public void testWhy(){assertEquals("""",this.getMetaphone().metaphone(""WHY""));}"
"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA",0,"public void testWordsWithCIA(){assertEquals(""XP"",this.getMetaphone().metaphone(""CIAPO""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH",0,"public void testTranslateOfSCHAndCH(){assertEquals(""SKTL"",this.getMetaphone().metaphone(""SCHEDULE""));assertEquals(""SKMT"",this.getMetaphone().metaphone(""SCHEMATIC""));assertEquals(""KRKT"",this.getMetaphone().metaphone(""CHARACTER""));assertEquals(""TX"",this.getMetaphone().metaphone(""TEACH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY",0,"public void testTranslateToJOfDGEOrDGIOrDGY(){assertEquals(""TJ"",this.getMetaphone().metaphone(""DODGY""));assertEquals(""TJ"",this.getMetaphone().metaphone(""DODGE""));assertEquals(""AJMT"",this.getMetaphone().metaphone(""ADGIEMTI""));}"
"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG",0,"public void testDiscardOfSilentHAfterG(){assertEquals(""KNT"",this.getMetaphone().metaphone(""GHENT""));assertEquals(""B"",this.getMetaphone().metaphone(""BAUGH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN",0,"public void testDiscardOfSilentGN(){assertEquals(""N"",this.getMetaphone().metaphone(""GNU""));assertEquals(""SNT"",this.getMetaphone().metaphone(""SIGNED""));}"
"org.apache.commons.codec.language.MetaphoneTest.testPHTOF",0,"public void testPHTOF(){assertEquals(""FX"",this.getMetaphone().metaphone(""PHISH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX",0,"public void testSHAndSIOAndSIAToX(){assertEquals(""XT"",this.getMetaphone().metaphone(""SHOT""));assertEquals(""OTXN"",this.getMetaphone().metaphone(""ODSIAN""));assertEquals(""PLXN"",this.getMetaphone().metaphone(""PULSION""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX",0,"public void testTIOAndTIAToX(){assertEquals(""OX"",this.getMetaphone().metaphone(""OTIA""));assertEquals(""PRXN"",this.getMetaphone().metaphone(""PORTION""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTCH",0,"public void testTCH(){assertEquals(""RX"",this.getMetaphone().metaphone(""RETCH""));assertEquals(""WX"",this.getMetaphone().metaphone(""WATCH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testExceedLength",0,"public void testExceedLength(){assertEquals(""AKSK"",this.getMetaphone().metaphone(""AXEAXE""));}"
"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation",0,"public void testSetMaxLengthWithTruncation(){this.getMetaphone().setMaxCodeLen(6);assertEquals(""AKSKSK"",this.getMetaphone().metaphone(""AXEAXEAXE""));}"
"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty",0,"public void testEncodeEmpty()throws Exception {Encoder encoder=makeEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull",0,"public void testEncodeNull()throws Exception {StringEncoder encoder=makeEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.MetaphoneTest.testEncodeWithInvalidObject",0,"public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=makeEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence",1,"public void testLocaleIndependence()throws Exception {StringEncoder encoder=makeEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for (int i=0;i < data.length;i++){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(data[i]);}else {String cur=null;try {cur=encoder.encode(data[i]);}catch(Exception e){fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
