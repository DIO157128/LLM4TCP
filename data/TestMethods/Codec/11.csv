test_case,faulty,test_code
"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec105",0,"/** * Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.*/@Test public void testCodec105()throws IOException {Base64InputStream in=new Base64InputStream(new Codec105ErrorInputStream(),true,0,null);try {for (int i=0;i < 5;i++){in.read();}}finally {in.close();}}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec101",0,"/** * Test for the CODEC-101 bug: InputStream.read(byte[])should never return 0 because Java's builtin InputStreamReader hates that.* @throws Exception for some failure scenarios.*/@Test public void testCodec101()throws Exception {byte[]codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);ByteArrayInputStream bais=new ByteArrayInputStream(codec101);Base64InputStream in=new Base64InputStream(bais);byte[]result=new byte[8192];int c=in.read(result);assertTrue(""Codec101: First read successful [c="" + c + ""]"",c > 0);c=in.read(result);assertTrue(""Codec101: Second read should report end-of-stream [c="" + c + ""]"",c < 0);}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader",0,"/** * Another test for the CODEC-101 bug: In commons-codec-1.4 this test shows InputStreamReader explicitly hating an InputStream.read(byte[])return of 0: java.io.IOException: Underlying input stream returned zero bytes at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:268)at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:306)at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:158)at java.io.InputStreamReader.read(InputStreamReader.java:167)at java.io.BufferedReader.fill(BufferedReader.java:136)at java.io.BufferedReader.readLine(BufferedReader.java:299)at java.io.BufferedReader.readLine(BufferedReader.java:362)at org.apache.commons.codec.binary.Base64InputStreamTest.testInputStreamReader(Base64InputStreamTest.java:75)But in commons-codec-1.5 it's fixed. :-)* @throws Exception for some failure scenarios.*/@Test public void testInputStreamReader()throws Exception {byte[]codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);ByteArrayInputStream bais=new ByteArrayInputStream(codec101);Base64InputStream in=new Base64InputStream(bais);InputStreamReader isr=new InputStreamReader(in);BufferedReader br=new BufferedReader(isr);String line=br.readLine();assertNotNull(""Codec101:  InputStreamReader works!"",line);}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testCodec98NPE",0,"/** * Test the Base64InputStream implementation against the special NPE inducing input identified in the CODEC-98 bug.* @throws Exception for some failure scenarios.*/@Test public void testCodec98NPE()throws Exception {byte[]codec98=StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);ByteArrayInputStream data=new ByteArrayInputStream(codec98);Base64InputStream stream=new Base64InputStream(data);byte[]decodedBytes=Base64TestData.streamToBytes(stream,new byte[1024]);String decoded=StringUtils.newStringUtf8(decodedBytes);assertEquals(""codec-98 NPE Base64InputStream"",Base64TestData.CODEC_98_NPE_DECODED,decoded);}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamMimeChuckSize",0,"/** * Tests the Base64InputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase64EmptyInputStreamMimeChuckSize()throws Exception {testBase64EmptyInputStream(BaseNCodec.MIME_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64EmptyInputStreamPemChuckSize",0,"/** * Tests the Base64InputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase64EmptyInputStreamPemChuckSize()throws Exception {testBase64EmptyInputStream(BaseNCodec.PEM_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByChunk",0,"/** * Tests the Base64InputStream implementation.* @throws Exception for some failure scenarios.*/@Test public void testBase64InputStreamByChunk()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(""AA==\r\n"");decoded=new byte[]{(byte)0};testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);decoded=Base64TestData.DECODED;testByChunk(encoded,decoded,BaseNCodec.PEM_CHUNK_SIZE,LF);String singleLine=Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(""\n"","""");encoded=StringUtils.getBytesUtf8(singleLine);decoded=Base64TestData.DECODED;testByChunk(encoded,decoded,0,LF);for (int i=0;i <= 150;i++){byte[][]randomData=Base64TestData.randomData(i,false);encoded=randomData[1];decoded=randomData[0];testByChunk(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testBase64InputStreamByteByByte",0,"/** * Tests the Base64InputStream implementation.* @throws Exception for some failure scenarios.*/@Test public void testBase64InputStreamByteByByte()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);testByteByByte(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(""AA==\r\n"");decoded=new byte[]{(byte)0};testByteByByte(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);decoded=Base64TestData.DECODED;testByteByByte(encoded,decoded,BaseNCodec.PEM_CHUNK_SIZE,LF);String singleLine=Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(""\n"","""");encoded=StringUtils.getBytesUtf8(singleLine);decoded=Base64TestData.DECODED;testByteByByte(encoded,decoded,0,LF);for (int i=0;i <= 150;i++){byte[][]randomData=Base64TestData.randomData(i,false);encoded=randomData[1];decoded=randomData[0];testByteByByte(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testMarkSupported",0,"/** * Tests markSupported.* @throws Exception*/@Test public void testMarkSupported()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base64InputStream in=new Base64InputStream(bin,true,4,new byte[]{0,0,0});assertFalse(""Base64InputStream.markSupported()is false"",in.markSupported());}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testRead0",0,"/** * Tests read returning 0* @throws Exception*/@Test public void testRead0()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);byte[]buf=new byte[1024];int bytesRead=0;ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base64InputStream in=new Base64InputStream(bin,true,4,new byte[]{0,0,0});bytesRead=in.read(buf,0,0);assertEquals(""Base64InputStream.read(buf,0,0)returns 0"",0,bytesRead);}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testReadNull",0,"/** * Tests read with null.* @throws Exception for some failure scenarios.*/@Test public void testReadNull()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base64InputStream in=new Base64InputStream(bin,true,4,new byte[]{0,0,0});try {in.read(null,0,0);fail(""Base64InputStream.read(null,0,0)to throw a NullPointerException"");}catch(NullPointerException e){}}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testReadOutOfBounds",0,"/** * Tests read throwing IndexOutOfBoundsException* @throws Exception*/@Test public void testReadOutOfBounds()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);byte[]buf=new byte[1024];ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base64InputStream in=new Base64InputStream(bin,true,4,new byte[]{0,0,0});try {in.read(buf,-1,0);fail(""Expected Base64InputStream.read(buf,-1,0)to throw IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {in.read(buf,0,-1);fail(""Expected Base64InputStream.read(buf,0,-1)to throw IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {in.read(buf,buf.length + 1,0);fail(""Base64InputStream.read(buf,buf.length + 1,0)throws IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {in.read(buf,buf.length - 1,2);fail(""Base64InputStream.read(buf,buf.length - 1,2)throws IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipNone",0,"/** * Tests skipping as a noop* @throws Throwable*/@Test public void testSkipNone()throws Throwable {InputStream ins=new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));Base64InputStream b64stream=new Base64InputStream(ins);byte[]actualBytes=new byte[6];assertEquals(0,b64stream.skip(0));b64stream.read(actualBytes,0,actualBytes.length);assertArrayEquals(actualBytes,new byte[]{0,0,0,(byte)255,(byte)255,(byte)255});assertEquals(-1,b64stream.read());}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipPastEnd",0,"/** * Tests skipping past the end of a stream.* @throws Throwable*/@Test public void testSkipPastEnd()throws Throwable {InputStream ins=new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));Base64InputStream b64stream=new Base64InputStream(ins);assertEquals(8,b64stream.skip(10));assertEquals(-1,b64stream.read());assertEquals(-1,b64stream.read());}"
"org.apache.commons.codec.binary.Base64InputStreamTest.testSkipToEnd",0,"/** * Tests skipping to the end of a stream.* @throws Throwable*/@Test public void testSkipToEnd()throws Throwable {InputStream ins=new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));Base64InputStream b64stream=new Base64InputStream(ins);assertEquals(8,b64stream.skip(8));assertEquals(-1,b64stream.read());assertEquals(-1,b64stream.read());}"
"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedCommonCodeAT11111111",0,"/** * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf AT11111111 words: add,aid,at,art,eat,earth,head,hit,hot,hold,hard,heart,it,out,old* @throws EncoderException*/@Test public void testCaverphoneRevisitedCommonCodeAT11111111()throws EncoderException {this.checkEncodingVariations(""AT11111111"",new String[]{""add"",""aid"",""at"",""art"",""eat"",""earth"",""head"",""hit"",""hot"",""hold"",""hard"",""heart"",""it"",""out"",""old""});}"
"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedExamples",0,"/** * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf* @throws EncoderException*/@Test public void testCaverphoneRevisitedExamples()throws EncoderException {String[][]data={{""Stevenson"",""STFNSN1111""},{""Peter"",""PTA1111111""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameKLN1111111",0,"/** * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf* @throws EncoderException*/@Test public void testCaverphoneRevisitedRandomNameKLN1111111()throws EncoderException {this.checkEncodingVariations(""KLN1111111"",new String[]{""Cailean"",""Calan"",""Calen"",""Callahan"",""Callan"",""Callean"",""Carleen"",""Carlen"",""Carlene"",""Carlin"",""Carline"",""Carlyn"",""Carlynn"",""Carlynne"",""Charlean"",""Charleen"",""Charlene"",""Charline"",""Cherlyn"",""Chirlin"",""Clein"",""Cleon"",""Cline"",""Cohleen"",""Colan"",""Coleen"",""Colene"",""Colin"",""Colleen"",""Collen"",""Collin"",""Colline"",""Colon"",""Cullan"",""Cullen"",""Cullin"",""Gaelan"",""Galan"",""Galen"",""Garlan"",""Garlen"",""Gaulin"",""Gayleen"",""Gaylene"",""Giliane"",""Gillan"",""Gillian"",""Glen"",""Glenn"",""Glyn"",""Glynn"",""Gollin"",""Gorlin"",""Kalin"",""Karlan"",""Karleen"",""Karlen"",""Karlene"",""Karlin"",""Karlyn"",""Kaylyn"",""Keelin"",""Kellen"",""Kellene"",""Kellyann"",""Kellyn"",""Khalin"",""Kilan"",""Kilian"",""Killen"",""Killian"",""Killion"",""Klein"",""Kleon"",""Kline"",""Koerlin"",""Kylen"",""Kylynn"",""Quillan"",""Quillon"",""Qulllon"",""Xylon""});}"
"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTN11111111",0,"/** * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf* @throws EncoderException*/@Test public void testCaverphoneRevisitedRandomNameTN11111111()throws EncoderException {this.checkEncodingVariations(""TN11111111"",new String[]{""Dan"",""Dane"",""Dann"",""Darn"",""Daune"",""Dawn"",""Ddene"",""Dean"",""Deane"",""Deanne"",""DeeAnn"",""Deeann"",""Deeanne"",""Deeyn"",""Den"",""Dene"",""Denn"",""Deonne"",""Diahann"",""Dian"",""Diane"",""Diann"",""Dianne"",""Diannne"",""Dine"",""Dion"",""Dione"",""Dionne"",""Doane"",""Doehne"",""Don"",""Donn"",""Doone"",""Dorn"",""Down"",""Downe"",""Duane"",""Dun"",""Dunn"",""Duyne"",""Dyan"",""Dyane"",""Dyann"",""Dyanne"",""Dyun"",""Tan"",""Tann"",""Teahan"",""Ten"",""Tenn"",""Terhune"",""Thain"",""Thaine"",""Thane"",""Thanh"",""Thayne"",""Theone"",""Thin"",""Thorn"",""Thorne"",""Thun"",""Thynne"",""Tien"",""Tine"",""Tjon"",""Town"",""Towne"",""Turne"",""Tyne""});}"
"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomNameTTA1111111",0,"/** * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf* @throws EncoderException*/@Test public void testCaverphoneRevisitedRandomNameTTA1111111()throws EncoderException {this.checkEncodingVariations(""TTA1111111"",new String[]{""Darda"",""Datha"",""Dedie"",""Deedee"",""Deerdre"",""Deidre"",""Deirdre"",""Detta"",""Didi"",""Didier"",""Dido"",""Dierdre"",""Dieter"",""Dita"",""Ditter"",""Dodi"",""Dodie"",""Dody"",""Doherty"",""Dorthea"",""Dorthy"",""Doti"",""Dotti"",""Dottie"",""Dotty"",""Doty"",""Doughty"",""Douty"",""Dowdell"",""Duthie"",""Tada"",""Taddeo"",""Tadeo"",""Tadio"",""Tati"",""Teador"",""Tedda"",""Tedder"",""Teddi"",""Teddie"",""Teddy"",""Tedi"",""Tedie"",""Teeter"",""Teodoor"",""Teodor"",""Terti"",""Theda"",""Theodor"",""Theodore"",""Theta"",""Thilda"",""Thordia"",""Tilda"",""Tildi"",""Tildie"",""Tildy"",""Tita"",""Tito"",""Tjader"",""Toddie"",""Toddy"",""Torto"",""Tuddor"",""Tudor"",""Turtle"",""Tuttle"",""Tutto""});}"
"org.apache.commons.codec.language.Caverphone2Test.testCaverphoneRevisitedRandomWords",0,"/** * See http://caversham.otago.ac.nz/files/working/ctp150804.pdf* @throws EncoderException*/@Test public void testCaverphoneRevisitedRandomWords()throws EncoderException {this.checkEncodingVariations(""RTA1111111"",new String[]{""rather"",""ready"",""writer""});this.checkEncoding(""SSA1111111"",""social"");this.checkEncodingVariations(""APA1111111"",new String[]{""able"",""appear""});}"
"org.apache.commons.codec.language.Caverphone2Test.testEndMb",0,"@Test public void testEndMb()throws EncoderException {String[][]data={{""mb"",""M111111111""},{""mbmb"",""MPM1111111""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.Caverphone2Test.testIsCaverphoneEquals",0,"@Test public void testIsCaverphoneEquals()throws EncoderException {Caverphone2 caverphone=new Caverphone2();Assert.assertFalse(""Caverphone encodings should not be equal"",caverphone.isEncodeEqual(""Peter"",""Stevenson""));Assert.assertTrue(""Caverphone encodings should be equal"",caverphone.isEncodeEqual(""Peter"",""Peady""));}"
"org.apache.commons.codec.language.Caverphone2Test.testSpecificationExamples",0,"@Test public void testSpecificationExamples()throws EncoderException {String[][]data={{""Peter"",""PTA1111111""},{""ready"",""RTA1111111""},{""social"",""SSA1111111""},{""able"",""APA1111111""},{""Tedder"",""TTA1111111""},{""Karleen"",""KLN1111111""},{""Dyun"",""TN11111111""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.Caverphone2Test.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.Caverphone2Test.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.Caverphone2Test.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.Caverphone2Test.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.CharEncodingTest.testConstructor",0,"/** * We could make the constructor private in the future,it's a matter a style.*/@Test public void testConstructor(){new CharEncoding();}"
"org.apache.commons.codec.CharEncodingTest.testIso8859_1",0,"@Test public void testIso8859_1(){Assert.assertEquals(""ISO-8859-1"",CharEncoding.ISO_8859_1);}"
"org.apache.commons.codec.CharEncodingTest.testUsAscii",0,"@Test public void testUsAscii(){Assert.assertEquals(""US-ASCII"",CharEncoding.US_ASCII);}"
"org.apache.commons.codec.CharEncodingTest.testUtf16",0,"@Test public void testUtf16(){Assert.assertEquals(""UTF-16"",CharEncoding.UTF_16);}"
"org.apache.commons.codec.CharEncodingTest.testUtf16Be",0,"@Test public void testUtf16Be(){Assert.assertEquals(""UTF-16BE"",CharEncoding.UTF_16BE);}"
"org.apache.commons.codec.CharEncodingTest.testUtf16Le",0,"@Test public void testUtf16Le(){Assert.assertEquals(""UTF-16LE"",CharEncoding.UTF_16LE);}"
"org.apache.commons.codec.CharEncodingTest.testUtf8",0,"@Test public void testUtf8(){Assert.assertEquals(""UTF-8"",CharEncoding.UTF_8);}"
"org.apache.commons.codec.digest.DigestUtilsTest.testConstructable",0,"@Test public void testConstructable(){new DigestUtils();}"
"org.apache.commons.codec.digest.DigestUtilsTest.testInternalNoSuchAlgorithmException",0,"@Test public void testInternalNoSuchAlgorithmException(){try {DigestUtils.getDigest(""Bogus Bogus"");fail(""A RuntimeException should have been thrown."");}catch(RuntimeException e){}}"
"org.apache.commons.codec.digest.DigestUtilsTest.testMd5Hex",0,"@Test public void testMd5Hex()throws IOException {assertEquals(""d41d8cd98f00b204e9800998ecf8427e"",DigestUtils.md5Hex(""""));assertEquals(""0cc175b9c0f1b6a831c399e269772661"",DigestUtils.md5Hex(""a""));assertEquals(""900150983cd24fb0d6963f7d28e17f72"",DigestUtils.md5Hex(""abc""));assertEquals(""f96b697d7cb7938d525a2f31aaf161d0"",DigestUtils.md5Hex(""message digest""));assertEquals(""c3fcd3d76192e4007dfb496cca67e13b"",DigestUtils.md5Hex(""abcdefghijklmnopqrstuvwxyz""));assertEquals(""d174ab98d277d9f5a5611c2c9f419d9f"",DigestUtils.md5Hex(""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" + ""abcdefghijklmnopqrstuvwxyz"" + ""0123456789""));assertEquals(""57edf4a22be3c955ac49da2e2107b67a"",DigestUtils.md5Hex(""1234567890123456789012345678901234567890"" + ""1234567890123456789012345678901234567890""));assertEquals(DigestUtils.md5Hex(testData),DigestUtils.md5Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testMD5HexLength",0,"/** * An MD5 hash converted to hex should always be 32 characters.*/@Test public void testMD5HexLength(){String hashMe=""this is some string that is longer than 32 characters"";String hash=DigestUtils.md5Hex(getBytesUtf8(hashMe));assertEquals(32,hash.length());hashMe=""length < 32"";hash=DigestUtils.md5Hex(getBytesUtf8(hashMe));assertEquals(32,hash.length());}"
"org.apache.commons.codec.digest.DigestUtilsTest.testMD5Length",0,"/** * An MD5 hash should always be a 16 element byte[].*/@Test public void testMD5Length(){String hashMe=""this is some string that is longer than 16 characters"";byte[]hash=DigestUtils.md5(getBytesUtf8(hashMe));assertEquals(16,hash.length);hashMe=""length < 16"";hash=DigestUtils.md5(getBytesUtf8(hashMe));assertEquals(16,hash.length);}"
"org.apache.commons.codec.digest.DigestUtilsTest.testSha256",0,"@Test public void testSha256()throws IOException {assertEquals(""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"",DigestUtils.sha256Hex(""abc""));assertEquals(""ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"",DigestUtils.sha256Hex(getBytesUtf8(""abc"")));assertEquals(""248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1"",DigestUtils.sha256Hex(""abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq""));assertEquals(DigestUtils.sha256Hex(testData),DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testSha384",0,"@Test public void testSha384()throws IOException {assertEquals(""cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed"" + ""8086072ba1e7cc2358baeca134c825a7"",DigestUtils.sha384Hex(""abc""));assertEquals(""cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed"" + ""8086072ba1e7cc2358baeca134c825a7"",DigestUtils.sha384Hex(getBytesUtf8(""abc"")));assertEquals(""09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712"" + ""fcc7c71a557e2db966c3e9fa91746039"",DigestUtils.sha384Hex(""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"" + ""hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu""));assertEquals(DigestUtils.sha384Hex(testData),DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testSha512",0,"@Test public void testSha512()throws IOException {assertEquals(""ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a"" + ""2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"",DigestUtils.sha512Hex(""abc""));assertEquals(""ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a"" + ""2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f"",DigestUtils.sha512Hex(getBytesUtf8(""abc"")));assertEquals(""8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018"" + ""501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909"",DigestUtils.sha512Hex(""abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn"" + ""hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu""));assertEquals(DigestUtils.sha512Hex(testData),DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.digest.DigestUtilsTest.testShaHex",0,"@Test public void testShaHex()throws IOException {assertEquals(""a9993e364706816aba3e25717850c26c9cd0d89d"",DigestUtils.shaHex(""abc""));assertEquals(""a9993e364706816aba3e25717850c26c9cd0d89d"",DigestUtils.shaHex(getBytesUtf8(""abc"")));assertEquals(""84983e441c3bd26ebaae4aa1f95129e5e54670f1"",DigestUtils.shaHex(""abcdbcdecdefdefgefghfghighij"" + ""hijkijkljklmklmnlmnomnopnopq""));assertEquals(DigestUtils.shaHex(testData),DigestUtils.shaHex(new ByteArrayInputStream(testData)));}"
"org.apache.commons.codec.binary.Base64Test.testIsStringBase64",0,"/** * Test the isStringBase64 method.*/@Test public void testIsStringBase64(){String nullString=null;String emptyString="""";String validString=""abc===defg\n\r123456\r789\r\rABC\n\nDEF==GHI\r\nJKL=============="";String invalidString=validString + ((char)0);try {Base64.isBase64(nullString);fail(""Base64.isStringBase64()should not be null-safe."");}catch(NullPointerException npe){assertNotNull(""Base64.isStringBase64()should not be null-safe."",npe);}assertTrue(""Base64.isStringBase64(empty-string)is true"",Base64.isBase64(emptyString));assertTrue(""Base64.isStringBase64(valid-string)is true"",Base64.isBase64(validString));assertFalse(""Base64.isStringBase64(invalid-string)is false"",Base64.isBase64(invalidString));}"
"org.apache.commons.codec.binary.Base64Test.testBase64",0,"/** * Test the Base64 implementation*/@Test public void testBase64(){String content=""Hello World"";String encodedContent;byte[]encodedBytes=Base64.encodeBase64(StringUtils.getBytesUtf8(content));encodedContent=StringUtils.newStringUtf8(encodedBytes);assertTrue(""encoding hello world"",encodedContent.equals(""SGVsbG8gV29ybGQ=""));Base64 b64=new Base64(BaseNCodec.MIME_CHUNK_SIZE,null);encodedBytes=b64.encode(StringUtils.getBytesUtf8(content));encodedContent=StringUtils.newStringUtf8(encodedBytes);assertTrue(""encoding hello world"",encodedContent.equals(""SGVsbG8gV29ybGQ=""));b64=new Base64(0,null);encodedBytes=b64.encode(StringUtils.getBytesUtf8(content));encodedContent=StringUtils.newStringUtf8(encodedBytes);assertTrue(""encoding hello world"",encodedContent.equals(""SGVsbG8gV29ybGQ=""));byte[]decode=b64.decode(""SGVsbG{\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9}8gV29ybGQ="");String decodeString=StringUtils.newStringUtf8(decode);assertTrue(""decode hello world"",decodeString.equals(""Hello World""));}"
"org.apache.commons.codec.binary.Base64Test.testChunkedEncodeMultipleOf76",0,"/** * Tests Base64.encodeBase64().*/@Test public void testChunkedEncodeMultipleOf76(){byte[]expectedEncode=Base64.encodeBase64(Base64TestData.DECODED,true);String actualResult=Base64TestData.ENCODED_76_CHARS_PER_LINE.replaceAll(""\n"",""\r\n"");byte[]actualEncode=StringUtils.getBytesUtf8(actualResult);assertTrue(""chunkedEncodeMultipleOf76"",Arrays.equals(expectedEncode,actualEncode));}"
"org.apache.commons.codec.binary.Base64Test.testCodec68",0,"/** * CODEC-68: isBase64 throws ArrayIndexOutOfBoundsException on some non-BASE64 bytes*/@Test public void testCodec68(){byte[]x=new byte[]{'n','A','=','=',(byte)0x9c};Base64.decodeBase64(x);}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger1",0,"@Test public void testCodeInteger1()throws UnsupportedEncodingException {String encodedInt1=""li7dzDacuo67Jg7mtqEm2TRuOMU="";BigInteger bigInt1=new BigInteger(""85739377120809420210425962799"" + ""0318636601332086981"");assertEquals(encodedInt1,new String(Base64.encodeInteger(bigInt1)));assertEquals(bigInt1,Base64.decodeInteger(encodedInt1.getBytes(""UTF-8"")));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger2",0,"@Test public void testCodeInteger2()throws UnsupportedEncodingException {String encodedInt2=""9B5ypLY9pMOmtxCeTDHgwdNFeGs="";BigInteger bigInt2=new BigInteger(""13936727572861167254666467268"" + ""91466679477132949611"");assertEquals(encodedInt2,new String(Base64.encodeInteger(bigInt2)));assertEquals(bigInt2,Base64.decodeInteger(encodedInt2.getBytes(""UTF-8"")));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger3",0,"@Test public void testCodeInteger3()throws UnsupportedEncodingException {String encodedInt3=""FKIhdgaG5LGKiEtF1vHy4f3y700zaD6QwDS3IrNVGzNp2"" + ""rY+1LFWTK6D44AyiC1n8uWz1itkYMZF0/aKDK0Yjg=="";BigInteger bigInt3=new BigInteger(""10806548154093873461951748545"" + ""1196989136416448805819079363524309897749044958112417136240557"" + ""4495062430572478766856090958495998158114332651671116876320938126"");assertEquals(encodedInt3,new String(Base64.encodeInteger(bigInt3)));assertEquals(bigInt3,Base64.decodeInteger(encodedInt3.getBytes(""UTF-8"")));}"
"org.apache.commons.codec.binary.Base64Test.testCodeInteger4",0,"@Test public void testCodeInteger4()throws UnsupportedEncodingException {String encodedInt4=""ctA8YGxrtngg/zKVvqEOefnwmViFztcnPBYPlJsvh6yKI"" + ""4iDm68fnp4Mi3RrJ6bZAygFrUIQLxLjV+OJtgJAEto0xAs+Mehuq1DkSFEpP3o"" + ""DzCTOsrOiS1DwQe4oIb7zVk/9l7aPtJMHW0LVlMdwZNFNNJoqMcT2ZfCPrfvYv""+ ""Q0="";BigInteger bigInt4=new BigInteger(""80624726256040348115552042320"" + ""6968135001872753709424419772586693950232350200555646471175944"" + ""519297087885987040810778908507262272892702303774422853675597""+ ""748008534040890923814202286633163248086055216976551456088015""+ ""338880713818192088877057717530169381044092839402438015097654""+ ""53542091716518238707344493641683483917"");assertEquals(encodedInt4,new String(Base64.encodeInteger(bigInt4)));assertEquals(bigInt4,Base64.decodeInteger(encodedInt4.getBytes(""UTF-8"")));}"
"org.apache.commons.codec.binary.Base64Test.testCodeIntegerEdgeCases",0,"@Test public void testCodeIntegerEdgeCases(){}"
"org.apache.commons.codec.binary.Base64Test.testCodeIntegerNull",0,"@Test public void testCodeIntegerNull(){try {Base64.encodeInteger(null);fail(""Exception not thrown when passing in null to encodeInteger(BigInteger)"");}catch(NullPointerException npe){}catch(Exception e){fail(""Incorrect Exception caught when passing in null to encodeInteger(BigInteger)"");}}"
"org.apache.commons.codec.binary.Base64Test.testConstructors",0,"@Test public void testConstructors(){Base64 base64;base64=new Base64();base64=new Base64(-1);base64=new Base64(-1,new byte[]{});base64=new Base64(64,new byte[]{});try {base64=new Base64(-1,new byte[]{'A'});fail(""Should have rejected attempt to use 'A' as a line separator"");}catch(IllegalArgumentException ignored){}try {base64=new Base64(64,new byte[]{'A'});fail(""Should have rejected attempt to use 'A' as a line separator"");}catch(IllegalArgumentException ignored){}try {base64=new Base64(64,new byte[]{'='});fail(""Should have rejected attempt to use '=' as a line separator"");}catch(IllegalArgumentException ignored){}base64=new Base64(64,new byte[]{'$'});try {base64=new Base64(64,new byte[]{'A','$'});fail(""Should have rejected attempt to use 'A$' as a line separator"");}catch(IllegalArgumentException ignored){}base64=new Base64(64,new byte[]{' ','$','\n','\r','\t'});assertNotNull(base64);}"
"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean",0,"@Test public void testConstructor_Int_ByteArray_Boolean(){Base64 base64=new Base64(65,new byte[]{'\t'},false);byte[]encoded=base64.encode(Base64TestData.DECODED);String expectedResult=Base64TestData.ENCODED_64_CHARS_PER_LINE;expectedResult=expectedResult.replace('\n','\t');String result=StringUtils.newStringUtf8(encoded);assertEquals(""new Base64(65,\\t,false)"",expectedResult,result);}"
"org.apache.commons.codec.binary.Base64Test.testConstructor_Int_ByteArray_Boolean_UrlSafe",0,"@Test public void testConstructor_Int_ByteArray_Boolean_UrlSafe(){Base64 base64=new Base64(64,new byte[]{'\t'},true);byte[]encoded=base64.encode(Base64TestData.DECODED);String expectedResult=Base64TestData.ENCODED_64_CHARS_PER_LINE;expectedResult=expectedResult.replaceAll(""="","""");expectedResult=expectedResult.replace('\n','\t');expectedResult=expectedResult.replace('+','-');expectedResult=expectedResult.replace('/','_');String result=StringUtils.newStringUtf8(encoded);assertEquals(""new Base64(64,\\t,true)"",result,expectedResult);}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex2",0,"/** * Tests conditional true branch for ""marker0"" test.*/@Test public void testDecodePadMarkerIndex2()throws UnsupportedEncodingException {assertEquals(""A"",new String(Base64.decodeBase64(""QQ=="".getBytes(""UTF-8""))));}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadMarkerIndex3",0,"/** * Tests conditional branches for ""marker1"" test.*/@Test public void testDecodePadMarkerIndex3()throws UnsupportedEncodingException {assertEquals(""AA"",new String(Base64.decodeBase64(""QUE="".getBytes(""UTF-8""))));assertEquals(""AAA"",new String(Base64.decodeBase64(""QUFB"".getBytes(""UTF-8""))));}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadOnly",0,"@Test public void testDecodePadOnly()throws UnsupportedEncodingException {assertTrue(Base64.decodeBase64(""===="".getBytes(""UTF-8"")).length == 0);assertEquals("""",new String(Base64.decodeBase64(""===="".getBytes(""UTF-8""))));assertTrue(Base64.decodeBase64(""==="".getBytes(""UTF-8"")).length == 0);assertTrue(Base64.decodeBase64(""=="".getBytes(""UTF-8"")).length == 0);assertTrue(Base64.decodeBase64(""="".getBytes(""UTF-8"")).length == 0);assertTrue(Base64.decodeBase64("""".getBytes(""UTF-8"")).length == 0);}"
"org.apache.commons.codec.binary.Base64Test.testDecodePadOnlyChunked",0,"@Test public void testDecodePadOnlyChunked()throws UnsupportedEncodingException {assertTrue(Base64.decodeBase64(""====\n"".getBytes(""UTF-8"")).length == 0);assertEquals("""",new String(Base64.decodeBase64(""====\n"".getBytes(""UTF-8""))));assertTrue(Base64.decodeBase64(""===\n"".getBytes(""UTF-8"")).length == 0);assertTrue(Base64.decodeBase64(""==\n"".getBytes(""UTF-8"")).length == 0);assertTrue(Base64.decodeBase64(""=\n"".getBytes(""UTF-8"")).length == 0);assertTrue(Base64.decodeBase64(""\n"".getBytes(""UTF-8"")).length == 0);}"
"org.apache.commons.codec.binary.Base64Test.testDecodeWithWhitespace",0,"@Test public void testDecodeWithWhitespace()throws Exception {String orig=""I am a late night coder."";byte[]encodedArray=Base64.encodeBase64(orig.getBytes(""UTF-8""));StringBuffer intermediate=new StringBuffer(new String(encodedArray));intermediate.insert(2,' ');intermediate.insert(5,'\t');intermediate.insert(10,'\r');intermediate.insert(15,'\n');byte[]encodedWithWS=intermediate.toString().getBytes(""UTF-8"");byte[]decodedWithWS=Base64.decodeBase64(encodedWithWS);String dest=new String(decodedWithWS);assertTrue(""Dest string doesn't equal the original"",dest.equals(orig));}"
"org.apache.commons.codec.binary.Base64Test.testEmptyBase64",0,"/** * Test encode and decode of empty byte array.*/@Test public void testEmptyBase64(){byte[]empty=new byte[0];byte[]result=Base64.encodeBase64(empty);assertEquals(""empty base64 encode"",0,result.length);assertEquals(""empty base64 encode"",null,Base64.encodeBase64(null));empty=new byte[0];result=Base64.decodeBase64(empty);assertEquals(""empty base64 decode"",0,result.length);assertEquals(""empty base64 encode"",null,Base64.decodeBase64((byte[])null));}"
"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeRandom",0,"@Test public void testEncodeDecodeRandom(){for (int i=1;i < 5;i++){byte[]data=new byte[this.getRandom().nextInt(10000)+ 1];this.getRandom().nextBytes(data);byte[]enc=Base64.encodeBase64(data);assertTrue(Base64.isBase64(enc));byte[]data2=Base64.decodeBase64(enc);assertTrue(Arrays.equals(data,data2));}}"
"org.apache.commons.codec.binary.Base64Test.testEncodeDecodeSmall",0,"@Test public void testEncodeDecodeSmall(){for (int i=0;i < 12;i++){byte[]data=new byte[i];this.getRandom().nextBytes(data);byte[]enc=Base64.encodeBase64(data);assertTrue(""\"""" + (new String(enc))+ ""\"" is Base64 data."",Base64.isBase64(enc));byte[]data2=Base64.decodeBase64(enc);assertTrue(toString(data)+ "" equals "" + toString(data2),Arrays.equals(data,data2));}}"
"org.apache.commons.codec.binary.Base64Test.testEncodeOverMaxSize",0,"@Test public void testEncodeOverMaxSize()throws Exception {testEncodeOverMaxSize(-1);testEncodeOverMaxSize(0);testEncodeOverMaxSize(1);testEncodeOverMaxSize(2);}"
"org.apache.commons.codec.binary.Base64Test.testCodec112",0,"@Test public void testCodec112(){byte[]in=new byte[]{0};byte[]out=Base64.encodeBase64(in);Base64.encodeBase64(in,false,false,out.length);}"
"org.apache.commons.codec.binary.Base64Test.testIgnoringNonBase64InDecode",0,"@Test public void testIgnoringNonBase64InDecode()throws Exception {assertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIH@$#$@%F1aWN@#@#@@rIGJyb3duIGZve\n\r\t%#%#%#%CBqd##$#$W1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(""UTF-8""))));}"
"org.apache.commons.codec.binary.Base64Test.testIsArrayByteBase64",0,"@Test public void testIsArrayByteBase64(){assertFalse(Base64.isBase64(new byte[]{Byte.MIN_VALUE}));assertFalse(Base64.isBase64(new byte[]{-125}));assertFalse(Base64.isBase64(new byte[]{-10}));assertFalse(Base64.isBase64(new byte[]{0}));assertFalse(Base64.isBase64(new byte[]{64,Byte.MAX_VALUE}));assertFalse(Base64.isBase64(new byte[]{Byte.MAX_VALUE}));assertTrue(Base64.isBase64(new byte[]{'A'}));assertFalse(Base64.isBase64(new byte[]{'A',Byte.MIN_VALUE}));assertTrue(Base64.isBase64(new byte[]{'A','Z','a'}));assertTrue(Base64.isBase64(new byte[]{'/','=','+'}));assertFalse(Base64.isBase64(new byte[]{'$'}));}"
"org.apache.commons.codec.binary.Base64Test.testIsUrlSafe",0,"/** * Tests isUrlSafe.*/@Test public void testIsUrlSafe(){Base64 base64Standard=new Base64(false);Base64 base64URLSafe=new Base64(true);assertFalse(""Base64.isUrlSafe=false"",base64Standard.isUrlSafe());assertTrue(""Base64.isUrlSafe=true"",base64URLSafe.isUrlSafe());byte[]whiteSpace={' ','\n','\r','\t'};assertTrue(""Base64.isBase64(whiteSpace)=true"",Base64.isBase64(whiteSpace));}"
"org.apache.commons.codec.binary.Base64Test.testKnownDecodings",0,"@Test public void testKnownDecodings()throws UnsupportedEncodingException {assertEquals(""The quick brown fox jumped over the lazy dogs."",new String(Base64.decodeBase64(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="".getBytes(""UTF-8""))));assertEquals(""It was the best of times,it was the worst of times."",new String(Base64.decodeBase64(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="".getBytes(""UTF-8""))));assertEquals(""http://jakarta.apache.org/commmons"",new String(Base64.decodeBase64(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="".getBytes(""UTF-8""))));assertEquals(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"",new String(Base64.decodeBase64(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="".getBytes(""UTF-8""))));assertEquals(""{0,1,2,3,4,5,6,7,8,9 }"",new String(Base64.decodeBase64(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="".getBytes(""UTF-8""))));assertEquals(""xyzzy!"",new String(Base64.decodeBase64(""eHl6enkh"".getBytes(""UTF-8""))));}"
"org.apache.commons.codec.binary.Base64Test.testKnownEncodings",0,"@Test public void testKnownEncodings()throws UnsupportedEncodingException {assertEquals(""VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg=="",new String(Base64.encodeBase64(""The quick brown fox jumped over the lazy dogs."".getBytes(""UTF-8""))));assertEquals(""YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\r\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\r\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\r\nbGFoIGJsYWg=\r\n"",new String(Base64.encodeBase64Chunked(""blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah"".getBytes(""UTF-8""))));assertEquals(""SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg=="",new String(Base64.encodeBase64(""It was the best of times,it was the worst of times."".getBytes(""UTF-8""))));assertEquals(""aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw=="",new String(Base64.encodeBase64(""http://jakarta.apache.org/commmons"".getBytes(""UTF-8""))));assertEquals(""QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg=="",new String(Base64.encodeBase64(""AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"".getBytes(""UTF-8""))));assertEquals(""eyAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IH0="",new String(Base64.encodeBase64(""{0,1,2,3,4,5,6,7,8,9 }"".getBytes(""UTF-8""))));assertEquals(""eHl6enkh"",new String(Base64.encodeBase64(""xyzzy!"".getBytes(""UTF-8""))));}"
"org.apache.commons.codec.binary.Base64Test.testNonBase64Test",0,"@Test public void testNonBase64Test()throws Exception {byte[]bArray={'%'};assertFalse(""Invalid Base64 array was incorrectly validated as "" + ""an array of Base64 encoded data"",Base64.isBase64(bArray));try {Base64 b64=new Base64();byte[]result=b64.decode(bArray);assertTrue(""The result should be empty as the test encoded content did "" + ""not contain any valid base 64 characters"",result.length == 0);}catch(Exception e){fail(""Exception was thrown when trying to decode "" + ""invalid base64 encoded data - RFC 2045 requires that all "" + ""non base64 character be discarded,an exception should not""+ "" have been thrown"");}}"
"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithInvalidParameter",0,"@Test public void testObjectDecodeWithInvalidParameter()throws Exception {Base64 b64=new Base64();try {b64.decode(Integer.valueOf(5));fail(""decode(Object)didn't throw an exception when passed an Integer object"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.Base64Test.testObjectDecodeWithValidParameter",0,"@Test public void testObjectDecodeWithValidParameter()throws Exception {String original=""Hello World!"";Object o=Base64.encodeBase64(original.getBytes(""UTF-8""));Base64 b64=new Base64();Object oDecoded=b64.decode(o);byte[]baDecoded=(byte[])oDecoded;String dest=new String(baDecoded);assertTrue(""dest string does not equal original"",dest.equals(original));}"
"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithInvalidParameter",0,"@Test public void testObjectEncodeWithInvalidParameter()throws Exception {Base64 b64=new Base64();try {b64.encode(""Yadayadayada"");fail(""encode(Object)didn't throw an exception when passed a String object"");}catch(EncoderException e){}}"
"org.apache.commons.codec.binary.Base64Test.testObjectEncodeWithValidParameter",0,"@Test public void testObjectEncodeWithValidParameter()throws Exception {String original=""Hello World!"";Object origObj=original.getBytes(""UTF-8"");Base64 b64=new Base64();Object oEncoded=b64.encode(origObj);byte[]bArray=Base64.decodeBase64((byte[])oEncoded);String dest=new String(bArray);assertTrue(""dest string does not equal original"",dest.equals(original));}"
"org.apache.commons.codec.binary.Base64Test.testObjectEncode",0,"@Test public void testObjectEncode()throws Exception {Base64 b64=new Base64();assertEquals(""SGVsbG8gV29ybGQ="",new String(b64.encode(""Hello World"".getBytes(""UTF-8""))));}"
"org.apache.commons.codec.binary.Base64Test.testPairs",0,"@Test public void testPairs(){assertEquals(""AAA="",new String(Base64.encodeBase64(new byte[]{0,0})));for (int i=-128;i <= 127;i++){byte test[]={(byte)i,(byte)i};assertTrue(Arrays.equals(test,Base64.decodeBase64(Base64.encodeBase64(test))));}}"
"org.apache.commons.codec.binary.Base64Test.testRfc2045Section2Dot1CrLfDefinition",0,"/** * Tests RFC 2045 section 2.1 CRLF definition.*/@Test public void testRfc2045Section2Dot1CrLfDefinition(){assertTrue(Arrays.equals(new byte[]{13,10},Base64.CHUNK_SEPARATOR));}"
"org.apache.commons.codec.binary.Base64Test.testRfc2045Section6Dot8ChunkSizeDefinition",0,"/** * Tests RFC 2045 section 6.8 chuck size definition.*/@Test public void testRfc2045Section6Dot8ChunkSizeDefinition(){assertEquals(76,BaseNCodec.MIME_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64Test.testRfc1421Section6Dot8ChunkSizeDefinition",0,"/** * Tests RFC 1421 section 4.3.2.4 chuck size definition.*/@Test public void testRfc1421Section6Dot8ChunkSizeDefinition(){assertEquals(64,BaseNCodec.PEM_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Decode",0,"/** * Tests RFC 4648 section 10 test vectors. <ul> <li>BASE64("""")= """"</li> <li>BASE64(""f"")= ""Zg==""</li> <li>BASE64(""fo"")= ""Zm8=""</li> <li>BASE64(""foo"")= ""Zm9v""</li> <li>BASE64(""foob"")= ""Zm9vYg==""</li> <li>BASE64(""fooba"")= ""Zm9vYmE=""</li> <li>BASE64(""foobar"")= ""Zm9vYmFy""</li> </ul>* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/html/rfc4648</a>*/@Test public void testRfc4648Section10Decode(){assertEquals("""",StringUtils.newStringUsAscii(Base64.decodeBase64("""")));assertEquals(""f"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="")));assertEquals(""fo"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="")));assertEquals(""foo"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"")));assertEquals(""foob"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="")));assertEquals(""fooba"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="")));assertEquals(""foobar"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"")));}"
"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeWithCrLf",0,"/** * Tests RFC 4648 section 10 test vectors. <ul> <li>BASE64("""")= """"</li> <li>BASE64(""f"")= ""Zg==""</li> <li>BASE64(""fo"")= ""Zm8=""</li> <li>BASE64(""foo"")= ""Zm9v""</li> <li>BASE64(""foob"")= ""Zm9vYg==""</li> <li>BASE64(""fooba"")= ""Zm9vYmE=""</li> <li>BASE64(""foobar"")= ""Zm9vYmFy""</li> </ul>* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/html/rfc4648</a>*/@Test public void testRfc4648Section10DecodeWithCrLf(){String CRLF=StringUtils.newStringUsAscii(Base64.CHUNK_SEPARATOR);assertEquals("""",StringUtils.newStringUsAscii(Base64.decodeBase64("""" + CRLF)));assertEquals(""f"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zg=="" + CRLF)));assertEquals(""fo"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm8="" + CRLF)));assertEquals(""foo"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9v"" + CRLF)));assertEquals(""foob"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYg=="" + CRLF)));assertEquals(""fooba"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmE="" + CRLF)));assertEquals(""foobar"",StringUtils.newStringUsAscii(Base64.decodeBase64(""Zm9vYmFy"" + CRLF)));}"
"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10Encode",0,"/** * Tests RFC 4648 section 10 test vectors. <ul> <li>BASE64("""")= """"</li> <li>BASE64(""f"")= ""Zg==""</li> <li>BASE64(""fo"")= ""Zm8=""</li> <li>BASE64(""foo"")= ""Zm9v""</li> <li>BASE64(""foob"")= ""Zm9vYg==""</li> <li>BASE64(""fooba"")= ""Zm9vYmE=""</li> <li>BASE64(""foobar"")= ""Zm9vYmFy""</li> </ul>* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/html/rfc4648</a>*/@Test public void testRfc4648Section10Encode(){assertEquals("""",Base64.encodeBase64String(StringUtils.getBytesUtf8("""")));assertEquals(""Zg=="",Base64.encodeBase64String(StringUtils.getBytesUtf8(""f"")));assertEquals(""Zm8="",Base64.encodeBase64String(StringUtils.getBytesUtf8(""fo"")));assertEquals(""Zm9v"",Base64.encodeBase64String(StringUtils.getBytesUtf8(""foo"")));assertEquals(""Zm9vYg=="",Base64.encodeBase64String(StringUtils.getBytesUtf8(""foob"")));assertEquals(""Zm9vYmE="",Base64.encodeBase64String(StringUtils.getBytesUtf8(""fooba"")));assertEquals(""Zm9vYmFy"",Base64.encodeBase64String(StringUtils.getBytesUtf8(""foobar"")));}"
"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10DecodeEncode",0,"/** * Tests RFC 4648 section 10 test vectors. <ul> <li>BASE64("""")= """"</li> <li>BASE64(""f"")= ""Zg==""</li> <li>BASE64(""fo"")= ""Zm8=""</li> <li>BASE64(""foo"")= ""Zm9v""</li> <li>BASE64(""foob"")= ""Zm9vYg==""</li> <li>BASE64(""fooba"")= ""Zm9vYmE=""</li> <li>BASE64(""foobar"")= ""Zm9vYmFy""</li> </ul>* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/html/rfc4648</a>*/@Test public void testRfc4648Section10DecodeEncode(){testDecodeEncode("""");}"
"org.apache.commons.codec.binary.Base64Test.testRfc4648Section10EncodeDecode",0,"/** * Tests RFC 4648 section 10 test vectors. <ul> <li>BASE64("""")= """"</li> <li>BASE64(""f"")= ""Zg==""</li> <li>BASE64(""fo"")= ""Zm8=""</li> <li>BASE64(""foo"")= ""Zm9v""</li> <li>BASE64(""foob"")= ""Zm9vYg==""</li> <li>BASE64(""fooba"")= ""Zm9vYmE=""</li> <li>BASE64(""foobar"")= ""Zm9vYmFy""</li> </ul>* @see <a href=""http://tools.ietf.org/html/rfc4648"">http://tools.ietf.org/html/rfc4648</a>*/@Test public void testRfc4648Section10EncodeDecode(){testEncodeDecode("""");testEncodeDecode(""f"");testEncodeDecode(""fo"");testEncodeDecode(""foo"");testEncodeDecode(""foob"");testEncodeDecode(""fooba"");testEncodeDecode(""foobar"");}"
"org.apache.commons.codec.binary.Base64Test.testSingletons",0,"@Test public void testSingletons(){assertEquals(""AA=="",new String(Base64.encodeBase64(new byte[]{(byte)0})));assertEquals(""AQ=="",new String(Base64.encodeBase64(new byte[]{(byte)1})));assertEquals(""Ag=="",new String(Base64.encodeBase64(new byte[]{(byte)2})));assertEquals(""Aw=="",new String(Base64.encodeBase64(new byte[]{(byte)3})));assertEquals(""BA=="",new String(Base64.encodeBase64(new byte[]{(byte)4})));assertEquals(""BQ=="",new String(Base64.encodeBase64(new byte[]{(byte)5})));assertEquals(""Bg=="",new String(Base64.encodeBase64(new byte[]{(byte)6})));assertEquals(""Bw=="",new String(Base64.encodeBase64(new byte[]{(byte)7})));assertEquals(""CA=="",new String(Base64.encodeBase64(new byte[]{(byte)8})));assertEquals(""CQ=="",new String(Base64.encodeBase64(new byte[]{(byte)9})));assertEquals(""Cg=="",new String(Base64.encodeBase64(new byte[]{(byte)10})));assertEquals(""Cw=="",new String(Base64.encodeBase64(new byte[]{(byte)11})));assertEquals(""DA=="",new String(Base64.encodeBase64(new byte[]{(byte)12})));assertEquals(""DQ=="",new String(Base64.encodeBase64(new byte[]{(byte)13})));assertEquals(""Dg=="",new String(Base64.encodeBase64(new byte[]{(byte)14})));assertEquals(""Dw=="",new String(Base64.encodeBase64(new byte[]{(byte)15})));assertEquals(""EA=="",new String(Base64.encodeBase64(new byte[]{(byte)16})));assertEquals(""EQ=="",new String(Base64.encodeBase64(new byte[]{(byte)17})));assertEquals(""Eg=="",new String(Base64.encodeBase64(new byte[]{(byte)18})));assertEquals(""Ew=="",new String(Base64.encodeBase64(new byte[]{(byte)19})));assertEquals(""FA=="",new String(Base64.encodeBase64(new byte[]{(byte)20})));assertEquals(""FQ=="",new String(Base64.encodeBase64(new byte[]{(byte)21})));assertEquals(""Fg=="",new String(Base64.encodeBase64(new byte[]{(byte)22})));assertEquals(""Fw=="",new String(Base64.encodeBase64(new byte[]{(byte)23})));assertEquals(""GA=="",new String(Base64.encodeBase64(new byte[]{(byte)24})));assertEquals(""GQ=="",new String(Base64.encodeBase64(new byte[]{(byte)25})));assertEquals(""Gg=="",new String(Base64.encodeBase64(new byte[]{(byte)26})));assertEquals(""Gw=="",new String(Base64.encodeBase64(new byte[]{(byte)27})));assertEquals(""HA=="",new String(Base64.encodeBase64(new byte[]{(byte)28})));assertEquals(""HQ=="",new String(Base64.encodeBase64(new byte[]{(byte)29})));assertEquals(""Hg=="",new String(Base64.encodeBase64(new byte[]{(byte)30})));assertEquals(""Hw=="",new String(Base64.encodeBase64(new byte[]{(byte)31})));assertEquals(""IA=="",new String(Base64.encodeBase64(new byte[]{(byte)32})));assertEquals(""IQ=="",new String(Base64.encodeBase64(new byte[]{(byte)33})));assertEquals(""Ig=="",new String(Base64.encodeBase64(new byte[]{(byte)34})));assertEquals(""Iw=="",new String(Base64.encodeBase64(new byte[]{(byte)35})));assertEquals(""JA=="",new String(Base64.encodeBase64(new byte[]{(byte)36})));assertEquals(""JQ=="",new String(Base64.encodeBase64(new byte[]{(byte)37})));assertEquals(""Jg=="",new String(Base64.encodeBase64(new byte[]{(byte)38})));assertEquals(""Jw=="",new String(Base64.encodeBase64(new byte[]{(byte)39})));assertEquals(""KA=="",new String(Base64.encodeBase64(new byte[]{(byte)40})));assertEquals(""KQ=="",new String(Base64.encodeBase64(new byte[]{(byte)41})));assertEquals(""Kg=="",new String(Base64.encodeBase64(new byte[]{(byte)42})));assertEquals(""Kw=="",new String(Base64.encodeBase64(new byte[]{(byte)43})));assertEquals(""LA=="",new String(Base64.encodeBase64(new byte[]{(byte)44})));assertEquals(""LQ=="",new String(Base64.encodeBase64(new byte[]{(byte)45})));assertEquals(""Lg=="",new String(Base64.encodeBase64(new byte[]{(byte)46})));assertEquals(""Lw=="",new String(Base64.encodeBase64(new byte[]{(byte)47})));assertEquals(""MA=="",new String(Base64.encodeBase64(new byte[]{(byte)48})));assertEquals(""MQ=="",new String(Base64.encodeBase64(new byte[]{(byte)49})));assertEquals(""Mg=="",new String(Base64.encodeBase64(new byte[]{(byte)50})));assertEquals(""Mw=="",new String(Base64.encodeBase64(new byte[]{(byte)51})));assertEquals(""NA=="",new String(Base64.encodeBase64(new byte[]{(byte)52})));assertEquals(""NQ=="",new String(Base64.encodeBase64(new byte[]{(byte)53})));assertEquals(""Ng=="",new String(Base64.encodeBase64(new byte[]{(byte)54})));assertEquals(""Nw=="",new String(Base64.encodeBase64(new byte[]{(byte)55})));assertEquals(""OA=="",new String(Base64.encodeBase64(new byte[]{(byte)56})));assertEquals(""OQ=="",new String(Base64.encodeBase64(new byte[]{(byte)57})));assertEquals(""Og=="",new String(Base64.encodeBase64(new byte[]{(byte)58})));assertEquals(""Ow=="",new String(Base64.encodeBase64(new byte[]{(byte)59})));assertEquals(""PA=="",new String(Base64.encodeBase64(new byte[]{(byte)60})));assertEquals(""PQ=="",new String(Base64.encodeBase64(new byte[]{(byte)61})));assertEquals(""Pg=="",new String(Base64.encodeBase64(new byte[]{(byte)62})));assertEquals(""Pw=="",new String(Base64.encodeBase64(new byte[]{(byte)63})));assertEquals(""QA=="",new String(Base64.encodeBase64(new byte[]{(byte)64})));assertEquals(""QQ=="",new String(Base64.encodeBase64(new byte[]{(byte)65})));assertEquals(""Qg=="",new String(Base64.encodeBase64(new byte[]{(byte)66})));assertEquals(""Qw=="",new String(Base64.encodeBase64(new byte[]{(byte)67})));assertEquals(""RA=="",new String(Base64.encodeBase64(new byte[]{(byte)68})));assertEquals(""RQ=="",new String(Base64.encodeBase64(new byte[]{(byte)69})));assertEquals(""Rg=="",new String(Base64.encodeBase64(new byte[]{(byte)70})));assertEquals(""Rw=="",new String(Base64.encodeBase64(new byte[]{(byte)71})));assertEquals(""SA=="",new String(Base64.encodeBase64(new byte[]{(byte)72})));assertEquals(""SQ=="",new String(Base64.encodeBase64(new byte[]{(byte)73})));assertEquals(""Sg=="",new String(Base64.encodeBase64(new byte[]{(byte)74})));assertEquals(""Sw=="",new String(Base64.encodeBase64(new byte[]{(byte)75})));assertEquals(""TA=="",new String(Base64.encodeBase64(new byte[]{(byte)76})));assertEquals(""TQ=="",new String(Base64.encodeBase64(new byte[]{(byte)77})));assertEquals(""Tg=="",new String(Base64.encodeBase64(new byte[]{(byte)78})));assertEquals(""Tw=="",new String(Base64.encodeBase64(new byte[]{(byte)79})));assertEquals(""UA=="",new String(Base64.encodeBase64(new byte[]{(byte)80})));assertEquals(""UQ=="",new String(Base64.encodeBase64(new byte[]{(byte)81})));assertEquals(""Ug=="",new String(Base64.encodeBase64(new byte[]{(byte)82})));assertEquals(""Uw=="",new String(Base64.encodeBase64(new byte[]{(byte)83})));assertEquals(""VA=="",new String(Base64.encodeBase64(new byte[]{(byte)84})));assertEquals(""VQ=="",new String(Base64.encodeBase64(new byte[]{(byte)85})));assertEquals(""Vg=="",new String(Base64.encodeBase64(new byte[]{(byte)86})));assertEquals(""Vw=="",new String(Base64.encodeBase64(new byte[]{(byte)87})));assertEquals(""WA=="",new String(Base64.encodeBase64(new byte[]{(byte)88})));assertEquals(""WQ=="",new String(Base64.encodeBase64(new byte[]{(byte)89})));assertEquals(""Wg=="",new String(Base64.encodeBase64(new byte[]{(byte)90})));assertEquals(""Ww=="",new String(Base64.encodeBase64(new byte[]{(byte)91})));assertEquals(""XA=="",new String(Base64.encodeBase64(new byte[]{(byte)92})));assertEquals(""XQ=="",new String(Base64.encodeBase64(new byte[]{(byte)93})));assertEquals(""Xg=="",new String(Base64.encodeBase64(new byte[]{(byte)94})));assertEquals(""Xw=="",new String(Base64.encodeBase64(new byte[]{(byte)95})));assertEquals(""YA=="",new String(Base64.encodeBase64(new byte[]{(byte)96})));assertEquals(""YQ=="",new String(Base64.encodeBase64(new byte[]{(byte)97})));assertEquals(""Yg=="",new String(Base64.encodeBase64(new byte[]{(byte)98})));assertEquals(""Yw=="",new String(Base64.encodeBase64(new byte[]{(byte)99})));assertEquals(""ZA=="",new String(Base64.encodeBase64(new byte[]{(byte)100})));assertEquals(""ZQ=="",new String(Base64.encodeBase64(new byte[]{(byte)101})));assertEquals(""Zg=="",new String(Base64.encodeBase64(new byte[]{(byte)102})));assertEquals(""Zw=="",new String(Base64.encodeBase64(new byte[]{(byte)103})));assertEquals(""aA=="",new String(Base64.encodeBase64(new byte[]{(byte)104})));for (int i=-128;i <= 127;i++){byte test[]={(byte)i};assertTrue(Arrays.equals(test,Base64.decodeBase64(Base64.encodeBase64(test))));}}"
"org.apache.commons.codec.binary.Base64Test.testSingletonsChunked",0,"@Test public void testSingletonsChunked(){assertEquals(""AA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0})));assertEquals(""AQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)1})));assertEquals(""Ag==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)2})));assertEquals(""Aw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)3})));assertEquals(""BA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)4})));assertEquals(""BQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)5})));assertEquals(""Bg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)6})));assertEquals(""Bw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)7})));assertEquals(""CA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)8})));assertEquals(""CQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)9})));assertEquals(""Cg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)10})));assertEquals(""Cw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)11})));assertEquals(""DA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)12})));assertEquals(""DQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)13})));assertEquals(""Dg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)14})));assertEquals(""Dw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)15})));assertEquals(""EA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)16})));assertEquals(""EQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)17})));assertEquals(""Eg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)18})));assertEquals(""Ew==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)19})));assertEquals(""FA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)20})));assertEquals(""FQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)21})));assertEquals(""Fg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)22})));assertEquals(""Fw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)23})));assertEquals(""GA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)24})));assertEquals(""GQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)25})));assertEquals(""Gg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)26})));assertEquals(""Gw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)27})));assertEquals(""HA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)28})));assertEquals(""HQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)29})));assertEquals(""Hg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)30})));assertEquals(""Hw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)31})));assertEquals(""IA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)32})));assertEquals(""IQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)33})));assertEquals(""Ig==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)34})));assertEquals(""Iw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)35})));assertEquals(""JA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)36})));assertEquals(""JQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)37})));assertEquals(""Jg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)38})));assertEquals(""Jw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)39})));assertEquals(""KA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)40})));assertEquals(""KQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)41})));assertEquals(""Kg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)42})));assertEquals(""Kw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)43})));assertEquals(""LA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)44})));assertEquals(""LQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)45})));assertEquals(""Lg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)46})));assertEquals(""Lw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)47})));assertEquals(""MA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)48})));assertEquals(""MQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)49})));assertEquals(""Mg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)50})));assertEquals(""Mw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)51})));assertEquals(""NA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)52})));assertEquals(""NQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)53})));assertEquals(""Ng==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)54})));assertEquals(""Nw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)55})));assertEquals(""OA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)56})));assertEquals(""OQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)57})));assertEquals(""Og==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)58})));assertEquals(""Ow==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)59})));assertEquals(""PA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)60})));assertEquals(""PQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)61})));assertEquals(""Pg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)62})));assertEquals(""Pw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)63})));assertEquals(""QA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)64})));assertEquals(""QQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)65})));assertEquals(""Qg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)66})));assertEquals(""Qw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)67})));assertEquals(""RA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)68})));assertEquals(""RQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)69})));assertEquals(""Rg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)70})));assertEquals(""Rw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)71})));assertEquals(""SA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)72})));assertEquals(""SQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)73})));assertEquals(""Sg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)74})));assertEquals(""Sw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)75})));assertEquals(""TA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)76})));assertEquals(""TQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)77})));assertEquals(""Tg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)78})));assertEquals(""Tw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)79})));assertEquals(""UA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)80})));assertEquals(""UQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)81})));assertEquals(""Ug==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)82})));assertEquals(""Uw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)83})));assertEquals(""VA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)84})));assertEquals(""VQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)85})));assertEquals(""Vg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)86})));assertEquals(""Vw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)87})));assertEquals(""WA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)88})));assertEquals(""WQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)89})));assertEquals(""Wg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)90})));assertEquals(""Ww==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)91})));assertEquals(""XA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)92})));assertEquals(""XQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)93})));assertEquals(""Xg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)94})));assertEquals(""Xw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)95})));assertEquals(""YA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)96})));assertEquals(""YQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)97})));assertEquals(""Yg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)98})));assertEquals(""Yw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)99})));assertEquals(""ZA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)100})));assertEquals(""ZQ==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)101})));assertEquals(""Zg==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)102})));assertEquals(""Zw==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)103})));assertEquals(""aA==\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)104})));}"
"org.apache.commons.codec.binary.Base64Test.testTriplets",0,"@Test public void testTriplets(){assertEquals(""AAAA"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)0})));assertEquals(""AAAB"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)1})));assertEquals(""AAAC"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)2})));assertEquals(""AAAD"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)3})));assertEquals(""AAAE"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)4})));assertEquals(""AAAF"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)5})));assertEquals(""AAAG"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)6})));assertEquals(""AAAH"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)7})));assertEquals(""AAAI"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)8})));assertEquals(""AAAJ"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)9})));assertEquals(""AAAK"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)10})));assertEquals(""AAAL"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)11})));assertEquals(""AAAM"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)12})));assertEquals(""AAAN"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)13})));assertEquals(""AAAO"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)14})));assertEquals(""AAAP"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)15})));assertEquals(""AAAQ"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)16})));assertEquals(""AAAR"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)17})));assertEquals(""AAAS"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)18})));assertEquals(""AAAT"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)19})));assertEquals(""AAAU"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)20})));assertEquals(""AAAV"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)21})));assertEquals(""AAAW"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)22})));assertEquals(""AAAX"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)23})));assertEquals(""AAAY"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)24})));assertEquals(""AAAZ"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)25})));assertEquals(""AAAa"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)26})));assertEquals(""AAAb"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)27})));assertEquals(""AAAc"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)28})));assertEquals(""AAAd"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)29})));assertEquals(""AAAe"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)30})));assertEquals(""AAAf"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)31})));assertEquals(""AAAg"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)32})));assertEquals(""AAAh"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)33})));assertEquals(""AAAi"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)34})));assertEquals(""AAAj"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)35})));assertEquals(""AAAk"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)36})));assertEquals(""AAAl"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)37})));assertEquals(""AAAm"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)38})));assertEquals(""AAAn"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)39})));assertEquals(""AAAo"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)40})));assertEquals(""AAAp"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)41})));assertEquals(""AAAq"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)42})));assertEquals(""AAAr"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)43})));assertEquals(""AAAs"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)44})));assertEquals(""AAAt"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)45})));assertEquals(""AAAu"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)46})));assertEquals(""AAAv"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)47})));assertEquals(""AAAw"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)48})));assertEquals(""AAAx"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)49})));assertEquals(""AAAy"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)50})));assertEquals(""AAAz"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)51})));assertEquals(""AAA0"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)52})));assertEquals(""AAA1"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)53})));assertEquals(""AAA2"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)54})));assertEquals(""AAA3"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)55})));assertEquals(""AAA4"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)56})));assertEquals(""AAA5"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)57})));assertEquals(""AAA6"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)58})));assertEquals(""AAA7"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)59})));assertEquals(""AAA8"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)60})));assertEquals(""AAA9"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)61})));assertEquals(""AAA+"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)62})));assertEquals(""AAA/"",new String(Base64.encodeBase64(new byte[]{(byte)0,(byte)0,(byte)63})));}"
"org.apache.commons.codec.binary.Base64Test.testTripletsChunked",0,"@Test public void testTripletsChunked(){assertEquals(""AAAA\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)0})));assertEquals(""AAAB\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)1})));assertEquals(""AAAC\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)2})));assertEquals(""AAAD\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)3})));assertEquals(""AAAE\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)4})));assertEquals(""AAAF\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)5})));assertEquals(""AAAG\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)6})));assertEquals(""AAAH\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)7})));assertEquals(""AAAI\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)8})));assertEquals(""AAAJ\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)9})));assertEquals(""AAAK\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)10})));assertEquals(""AAAL\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)11})));assertEquals(""AAAM\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)12})));assertEquals(""AAAN\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)13})));assertEquals(""AAAO\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)14})));assertEquals(""AAAP\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)15})));assertEquals(""AAAQ\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)16})));assertEquals(""AAAR\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)17})));assertEquals(""AAAS\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)18})));assertEquals(""AAAT\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)19})));assertEquals(""AAAU\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)20})));assertEquals(""AAAV\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)21})));assertEquals(""AAAW\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)22})));assertEquals(""AAAX\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)23})));assertEquals(""AAAY\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)24})));assertEquals(""AAAZ\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)25})));assertEquals(""AAAa\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)26})));assertEquals(""AAAb\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)27})));assertEquals(""AAAc\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)28})));assertEquals(""AAAd\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)29})));assertEquals(""AAAe\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)30})));assertEquals(""AAAf\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)31})));assertEquals(""AAAg\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)32})));assertEquals(""AAAh\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)33})));assertEquals(""AAAi\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)34})));assertEquals(""AAAj\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)35})));assertEquals(""AAAk\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)36})));assertEquals(""AAAl\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)37})));assertEquals(""AAAm\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)38})));assertEquals(""AAAn\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)39})));assertEquals(""AAAo\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)40})));assertEquals(""AAAp\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)41})));assertEquals(""AAAq\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)42})));assertEquals(""AAAr\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)43})));assertEquals(""AAAs\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)44})));assertEquals(""AAAt\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)45})));assertEquals(""AAAu\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)46})));assertEquals(""AAAv\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)47})));assertEquals(""AAAw\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)48})));assertEquals(""AAAx\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)49})));assertEquals(""AAAy\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)50})));assertEquals(""AAAz\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)51})));assertEquals(""AAA0\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)52})));assertEquals(""AAA1\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)53})));assertEquals(""AAA2\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)54})));assertEquals(""AAA3\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)55})));assertEquals(""AAA4\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)56})));assertEquals(""AAA5\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)57})));assertEquals(""AAA6\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)58})));assertEquals(""AAA7\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)59})));assertEquals(""AAA8\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)60})));assertEquals(""AAA9\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)61})));assertEquals(""AAA+\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)62})));assertEquals(""AAA/\r\n"",new String(Base64.encodeBase64Chunked(new byte[]{(byte)0,(byte)0,(byte)63})));}"
"org.apache.commons.codec.binary.Base64Test.testUrlSafe",0,"/** * Tests url-safe Base64 against random data,sizes 0 to 150.*/@Test public void testUrlSafe(){for (int i=0;i <= 150;i++){byte[][]randomData=Base64TestData.randomData(i,true);byte[]encoded=randomData[1];byte[]decoded=randomData[0];byte[]result=Base64.decodeBase64(encoded);assertTrue(""url-safe i="" + i,Arrays.equals(decoded,result));assertFalse(""url-safe i="" + i + "" no '='"",Base64TestData.bytesContain(encoded,(byte)'='));assertFalse(""url-safe i="" + i + "" no '\\'"",Base64TestData.bytesContain(encoded,(byte)'\\'));assertFalse(""url-safe i="" + i + "" no '+'"",Base64TestData.bytesContain(encoded,(byte)'+'));}}"
"org.apache.commons.codec.binary.Base64Test.testUUID",0,"/** * Base64 encoding of UUID's is a common use-case,especially in URL-SAFE mode. This test case ends up being the ""URL-SAFE"" JUnit's.* @throws DecoderException if Hex.decode()fails - a serious problem since Hex comes from our own commons-codec!*/@Test public void testUUID()throws DecoderException {byte[][]ids=new byte[4][];ids[0]=Hex.decodeHex(""94ed8d0319e4493399560fb67404d370"".toCharArray());ids[1]=Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090"".toCharArray());ids[2]=Hex.decodeHex(""64be154b6ffa40258d1a01288e7c31ca"".toCharArray());ids[3]=Hex.decodeHex(""ff7f8fc01cdb471a8c8b5a9306183fe8"".toCharArray());byte[][]standard=new byte[4][];standard[0]=StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg+2dATTcA=="");standard[1]=StringUtils.getBytesUtf8(""K/fMJwH+Q5e0nr7tWsxwkA=="");standard[2]=StringUtils.getBytesUtf8(""ZL4VS2/6QCWNGgEojnwxyg=="");standard[3]=StringUtils.getBytesUtf8(""/3+PwBzbRxqMi1qTBhg/6A=="");byte[][]urlSafe1=new byte[4][];urlSafe1[0]=StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA=="");urlSafe1[1]=StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA=="");urlSafe1[2]=StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg=="");urlSafe1[3]=StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A=="");byte[][]urlSafe2=new byte[4][];urlSafe2[0]=StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA="");urlSafe2[1]=StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA="");urlSafe2[2]=StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg="");urlSafe2[3]=StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A="");byte[][]urlSafe3=new byte[4][];urlSafe3[0]=StringUtils.getBytesUtf8(""lO2NAxnkSTOZVg-2dATTcA"");urlSafe3[1]=StringUtils.getBytesUtf8(""K_fMJwH-Q5e0nr7tWsxwkA"");urlSafe3[2]=StringUtils.getBytesUtf8(""ZL4VS2_6QCWNGgEojnwxyg"");urlSafe3[3]=StringUtils.getBytesUtf8(""_3-PwBzbRxqMi1qTBhg_6A"");for (int i=0;i < 4;i++){byte[]encodedStandard=Base64.encodeBase64(ids[i]);byte[]encodedUrlSafe=Base64.encodeBase64URLSafe(ids[i]);byte[]decodedStandard=Base64.decodeBase64(standard[i]);byte[]decodedUrlSafe1=Base64.decodeBase64(urlSafe1[i]);byte[]decodedUrlSafe2=Base64.decodeBase64(urlSafe2[i]);byte[]decodedUrlSafe3=Base64.decodeBase64(urlSafe3[i]);if (false){System.out.println(""reference: ["" + Hex.encodeHexString(ids[i])+ ""]"");System.out.println(""standard:  ["" + Hex.encodeHexString(decodedStandard)+ ""]From: [""+ StringUtils.newStringUtf8(standard[i])+ ""]"");System.out.println(""safe1:     ["" + Hex.encodeHexString(decodedUrlSafe1)+ ""]From: [""+ StringUtils.newStringUtf8(urlSafe1[i])+ ""]"");System.out.println(""safe2:     ["" + Hex.encodeHexString(decodedUrlSafe2)+ ""]From: [""+ StringUtils.newStringUtf8(urlSafe2[i])+ ""]"");System.out.println(""safe3:     ["" + Hex.encodeHexString(decodedUrlSafe3)+ ""]From: [""+ StringUtils.newStringUtf8(urlSafe3[i])+ ""]"");}assertTrue(""standard encode uuid"",Arrays.equals(encodedStandard,standard[i]));assertTrue(""url-safe encode uuid"",Arrays.equals(encodedUrlSafe,urlSafe3[i]));assertTrue(""standard decode uuid"",Arrays.equals(decodedStandard,ids[i]));assertTrue(""url-safe1 decode uuid"",Arrays.equals(decodedUrlSafe1,ids[i]));assertTrue(""url-safe2 decode uuid"",Arrays.equals(decodedUrlSafe2,ids[i]));assertTrue(""url-safe3 decode uuid"",Arrays.equals(decodedUrlSafe3,ids[i]));}}"
"org.apache.commons.codec.binary.Base64Test.testByteToStringVariations",0,"@Test public void testByteToStringVariations()throws DecoderException {Base64 base64=new Base64(0);byte[]b1=StringUtils.getBytesUtf8(""Hello World"");byte[]b2=new byte[0];byte[]b3=null;byte[]b4=Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090"".toCharArray());assertEquals(""byteToString Hello World"",""SGVsbG8gV29ybGQ="",base64.encodeToString(b1));assertEquals(""byteToString static Hello World"",""SGVsbG8gV29ybGQ="",Base64.encodeBase64String(b1));assertEquals(""byteToString \""\"""","""",base64.encodeToString(b2));assertEquals(""byteToString static \""\"""","""",Base64.encodeBase64String(b2));assertEquals(""byteToString null"",null,base64.encodeToString(b3));assertEquals(""byteToString static null"",null,Base64.encodeBase64String(b3));assertEquals(""byteToString UUID"",""K/fMJwH+Q5e0nr7tWsxwkA=="",base64.encodeToString(b4));assertEquals(""byteToString static UUID"",""K/fMJwH+Q5e0nr7tWsxwkA=="",Base64.encodeBase64String(b4));assertEquals(""byteToString static-url-safe UUID"",""K_fMJwH-Q5e0nr7tWsxwkA"",Base64.encodeBase64URLSafeString(b4));}"
"org.apache.commons.codec.binary.Base64Test.testStringToByteVariations",0,"@Test public void testStringToByteVariations()throws DecoderException {Base64 base64=new Base64();String s1=""SGVsbG8gV29ybGQ=\r\n"";String s2="""";String s3=null;String s4a=""K/fMJwH+Q5e0nr7tWsxwkA==\r\n"";String s4b=""K_fMJwH-Q5e0nr7tWsxwkA"";byte[]b4=Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090"".toCharArray());assertEquals(""StringToByte Hello World"",""Hello World"",StringUtils.newStringUtf8(base64.decode(s1)));assertEquals(""StringToByte Hello World"",""Hello World"",StringUtils.newStringUtf8((byte[])base64.decode((Object)s1)));assertEquals(""StringToByte static Hello World"",""Hello World"",StringUtils.newStringUtf8(Base64.decodeBase64(s1)));assertEquals(""StringToByte \""\"""","""",StringUtils.newStringUtf8(base64.decode(s2)));assertEquals(""StringToByte static \""\"""","""",StringUtils.newStringUtf8(Base64.decodeBase64(s2)));assertEquals(""StringToByte null"",null,StringUtils.newStringUtf8(base64.decode(s3)));assertEquals(""StringToByte static null"",null,StringUtils.newStringUtf8(Base64.decodeBase64(s3)));assertTrue(""StringToByte UUID"",Arrays.equals(b4,base64.decode(s4b)));assertTrue(""StringToByte static UUID"",Arrays.equals(b4,Base64.decodeBase64(s4a)));assertTrue(""StringToByte static-url-safe UUID"",Arrays.equals(b4,Base64.decodeBase64(s4b)));}"
"org.apache.commons.codec.binary.Base64Test.testHugeLineSeparator",0,"/** * Tests a lineSeparator much bigger than DEFAULT_BUFFER_SIZE.* @see <a href=""http://mail-archives.apache.org/mod_mbox/commons-dev/201202.mbox/%3C4F3C85D7.5060706@snafu.de%3E"">dev@commons.apache.org</a>*/@Test @Ignore public void testHugeLineSeparator(){final int BaseNCodec_DEFAULT_BUFFER_SIZE=8192;final int Base64_BYTES_PER_ENCODED_BLOCK=4;byte[]baLineSeparator=new byte[BaseNCodec_DEFAULT_BUFFER_SIZE * 4 - 3];Base64 b64=new Base64(Base64_BYTES_PER_ENCODED_BLOCK,baLineSeparator);String strOriginal=""Hello World"";String strDecoded=new String(b64.decode(b64.encode(StringUtils.getBytesUtf8(strOriginal))));assertTrue(""testDEFAULT_BUFFER_SIZE"",strOriginal.equals(strDecoded));}"
"org.apache.commons.codec.language.bm.LanguageGuessingTest.testLanguageGuessing",0,"@Test public void testLanguageGuessing(){Languages.LanguageSet guesses=this.lang.guessLanguages(this.name);assertTrue(""language predicted for name '"" + this.name + ""' is wrong: ""+ guesses+ "" should contain '""+ this.language+ ""'"",guesses.contains(this.language));}"
"org.apache.commons.codec.language.ColognePhoneticTest.testAabjoe",0,"@Test public void testAabjoe()throws EncoderException {this.checkEncoding(""01"",""Aabjoe"");}"
"org.apache.commons.codec.language.ColognePhoneticTest.testAaclan",0,"@Test public void testAaclan()throws EncoderException {this.checkEncoding(""0856"",""Aaclan"");}"
"org.apache.commons.codec.language.ColognePhoneticTest.testAychlmajrForCodec122",0,"/** * Tests [CODEC-122]* @throws EncoderException*/@Test public void testAychlmajrForCodec122()throws EncoderException {this.checkEncoding(""04567"",""Aychlmajr"");}"
"org.apache.commons.codec.language.ColognePhoneticTest.testEdgeCases",0,"@Test public void testEdgeCases()throws EncoderException {String[][]data={{""a"",""0""},{""e"",""0""},{""i"",""0""},{""o"",""0""},{""u"",""0""},{""\u00E4"",""0""},{""\u00F6"",""0""},{""\u00FC"",""0""},{""aa"",""0""},{""ha"",""0""},{""h"",""""},{""aha"",""0""},{""b"",""1""},{""p"",""1""},{""ph"",""3""},{""f"",""3""},{""v"",""3""},{""w"",""3""},{""g"",""4""},{""k"",""4""},{""q"",""4""},{""x"",""48""},{""ax"",""048""},{""cx"",""48""},{""l"",""5""},{""cl"",""45""},{""acl"",""085""},{""mn"",""6""},{""r"",""7""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.ColognePhoneticTest.testExamples",0,"@Test public void testExamples()throws EncoderException {String[][]data={{""m\u00DCller"",""657""},{""schmidt"",""862""},{""schneider"",""8627""},{""fischer"",""387""},{""weber"",""317""},{""wagner"",""3467""},{""becker"",""147""},{""hoffmann"",""0366""},{""sch\u00C4fer"",""837""},{""Breschnew"",""17863""},{""Wikipedia"",""3412""},{""peter"",""127""},{""pharma"",""376""},{""m\u00f6nchengladbach"",""664645214""},{""deutsch"",""28""},{""deutz"",""28""},{""hamburg"",""06174""},{""hannover"",""0637""},{""christstollen"",""478256""},{""Xanthippe"",""48621""},{""Zacharias"",""8478""},{""Holzbau"",""0581""},{""matsch"",""68""},{""matz"",""68""},{""Arbeitsamt"",""071862""},{""Eberhard"",""01772""},{""Eberhardt"",""01772""},{""heithabu"",""021""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.ColognePhoneticTest.testHyphen",0,"@Test public void testHyphen()throws EncoderException {String[][]data={{""bergisch-gladbach"",""174845214""},{""M\u00fcller-L\u00fcdenscheidt"",""65752682""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.ColognePhoneticTest.testIsEncodeEquals",0,"@Test public void testIsEncodeEquals(){String[][]data={{""Meyer"",""M\u00fcller""},{""Meyer"",""Mayr""},{""house"",""house""},{""House"",""house""},{""Haus"",""house""},{""ganz"",""Gans""},{""ganz"",""G\u00e4nse""},{""Miyagi"",""Miyako""}};for(String[]element : data){((ColognePhonetic)this.getStringEncoder()).isEncodeEqual(element[1],element[0]);}}"
"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMella",0,"@Test public void testVariationsMella()throws EncoderException {String data[]={""mella"",""milah"",""moulla"",""mellah"",""muehle"",""mule""};this.checkEncodingVariations(""65"",data);}"
"org.apache.commons.codec.language.ColognePhoneticTest.testVariationsMeyer",0,"@Test public void testVariationsMeyer()throws EncoderException {String data[]={""Meier"",""Maier"",""Mair"",""Meyer"",""Meyr"",""Mejer"",""Major""};this.checkEncodingVariations(""67"",data);}"
"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.ColognePhoneticTest.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.ColognePhoneticTest.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.language.RefinedSoundexTest.testDifference",0,"@Test public void testDifference()throws EncoderException {assertEquals(0,this.getRefinedSoundex().difference(null,null));assertEquals(0,this.getRefinedSoundex().difference("""",""""));assertEquals(0,this.getRefinedSoundex().difference("" "","" ""));assertEquals(6,this.getRefinedSoundex().difference(""Smith"",""Smythe""));assertEquals(3,this.getRefinedSoundex().difference(""Ann"",""Andrew""));assertEquals(1,this.getRefinedSoundex().difference(""Margaret"",""Andrew""));assertEquals(1,this.getRefinedSoundex().difference(""Janet"",""Margaret""));assertEquals(5,this.getRefinedSoundex().difference(""Green"",""Greene""));assertEquals(1,this.getRefinedSoundex().difference(""Blotchet-Halls"",""Greene""));assertEquals(6,this.getRefinedSoundex().difference(""Smith"",""Smythe""));assertEquals(8,this.getRefinedSoundex().difference(""Smithers"",""Smythers""));assertEquals(5,this.getRefinedSoundex().difference(""Anothers"",""Brothers""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncode",0,"@Test public void testEncode(){assertEquals(""T6036084"",this.getRefinedSoundex().encode(""testing""));assertEquals(""T6036084"",this.getRefinedSoundex().encode(""TESTING""));assertEquals(""T60"",this.getRefinedSoundex().encode(""The""));assertEquals(""Q503"",this.getRefinedSoundex().encode(""quick""));assertEquals(""B1908"",this.getRefinedSoundex().encode(""brown""));assertEquals(""F205"",this.getRefinedSoundex().encode(""fox""));assertEquals(""J408106"",this.getRefinedSoundex().encode(""jumped""));assertEquals(""O0209"",this.getRefinedSoundex().encode(""over""));assertEquals(""T60"",this.getRefinedSoundex().encode(""the""));assertEquals(""L7050"",this.getRefinedSoundex().encode(""lazy""));assertEquals(""D6043"",this.getRefinedSoundex().encode(""dogs""));assertEquals(""D6043"",RefinedSoundex.US_ENGLISH.encode(""dogs""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testGetMappingCodeNonLetter",0,"@Test public void testGetMappingCodeNonLetter(){char code=this.getRefinedSoundex().getMappingCode('#');assertEquals(""Code does not equals zero"",0,code);}"
"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance",0,"@Test public void testNewInstance(){assertEquals(""D6043"",new RefinedSoundex().soundex(""dogs""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance2",0,"@Test public void testNewInstance2(){assertEquals(""D6043"",new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(""dogs""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testNewInstance3",0,"@Test public void testNewInstance3(){assertEquals(""D6043"",new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING).soundex(""dogs""));}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.RefinedSoundexTest.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.RefinedSoundexTest.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testCodec105",0,"/** * Tests the bug reported in CODEC-105. Bad interactions with InputStream when reading one byte at a time.*/@Test public void testCodec105()throws IOException {Base32InputStream in=new Base32InputStream(new Codec105ErrorInputStream(),true,0,null);try {for (int i=0;i < 5;i++){in.read();}}finally {in.close();}}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamMimeChuckSize",0,"/** * Tests the Base32InputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase32EmptyInputStreamMimeChuckSize()throws Exception {testBase32EmptyInputStream(BaseNCodec.MIME_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32EmptyInputStreamPemChuckSize",0,"/** * Tests the Base32InputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase32EmptyInputStreamPemChuckSize()throws Exception {testBase32EmptyInputStream(BaseNCodec.PEM_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByChunk",0,"/** * Tests the Base32InputStream implementation.* @throws Exception for some failure scenarios.*/@Test public void testBase32InputStreamByChunk()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(""AA======\r\n"");decoded=new byte[]{(byte)0};testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);BaseNCodec codec=new Base32();for (int i=0;i <= 150;i++){byte[][]randomData=Base32TestData.randomData(codec,i);encoded=randomData[1];decoded=randomData[0];testByChunk(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testBase32InputStreamByteByByte",0,"/** * Tests the Base32InputStream implementation.* @throws Exception for some failure scenarios.*/@Test public void testBase32InputStreamByteByByte()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);testByteByByte(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(""AA======\r\n"");decoded=new byte[]{(byte)0};testByteByByte(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);BaseNCodec codec=new Base32();for (int i=0;i <= 150;i++){byte[][]randomData=Base32TestData.randomData(codec,i);encoded=randomData[1];decoded=randomData[0];testByteByByte(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testMarkSupported",0,"/** * Tests markSupported.* @throws Exception*/@Test public void testMarkSupported()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base32InputStream in=new Base32InputStream(bin,true,4,new byte[]{0,0,0});assertFalse(""Base32InputStream.markSupported()is false"",in.markSupported());}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testRead0",0,"/** * Tests read returning 0* @throws Exception*/@Test public void testRead0()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);byte[]buf=new byte[1024];int bytesRead=0;ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base32InputStream in=new Base32InputStream(bin,true,4,new byte[]{0,0,0});bytesRead=in.read(buf,0,0);assertEquals(""Base32InputStream.read(buf,0,0)returns 0"",0,bytesRead);}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testReadNull",0,"/** * Tests read with null.* @throws Exception for some failure scenarios.*/@Test public void testReadNull()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base32InputStream in=new Base32InputStream(bin,true,4,new byte[]{0,0,0});try {in.read(null,0,0);fail(""Base32InputStream.read(null,0,0)to throw a NullPointerException"");}catch(NullPointerException e){}}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testReadOutOfBounds",0,"/** * Tests read throwing IndexOutOfBoundsException* @throws Exception*/@Test public void testReadOutOfBounds()throws Exception {byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);byte[]buf=new byte[1024];ByteArrayInputStream bin=new ByteArrayInputStream(decoded);Base32InputStream in=new Base32InputStream(bin,true,4,new byte[]{0,0,0});try {in.read(buf,-1,0);fail(""Expected Base32InputStream.read(buf,-1,0)to throw IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {in.read(buf,0,-1);fail(""Expected Base32InputStream.read(buf,0,-1)to throw IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {in.read(buf,buf.length + 1,0);fail(""Base32InputStream.read(buf,buf.length + 1,0)throws IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}try {in.read(buf,buf.length - 1,2);fail(""Base32InputStream.read(buf,buf.length - 1,2)throws IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipNone",0,"/** * Tests skipping as a noop* @throws Throwable*/@Test public void testSkipNone()throws Throwable {InputStream ins=new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));Base32InputStream b32stream=new Base32InputStream(ins);byte[]actualBytes=new byte[6];assertEquals(0,b32stream.skip(0));b32stream.read(actualBytes,0,actualBytes.length);assertArrayEquals(actualBytes,new byte[]{102,111,111,0,0,0});assertEquals(-1,b32stream.read());}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipPastEnd",0,"/** * Tests skipping past the end of a stream.* @throws Throwable*/@Test public void testSkipPastEnd()throws Throwable {InputStream ins=new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));Base32InputStream b32stream=new Base32InputStream(ins);assertEquals(8,b32stream.skip(10));assertEquals(-1,b32stream.read());assertEquals(-1,b32stream.read());}"
"org.apache.commons.codec.binary.Base32InputStreamTest.testSkipToEnd",0,"/** * Tests skipping to the end of a stream.* @throws Throwable*/@Test public void testSkipToEnd()throws Throwable {InputStream ins=new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));Base32InputStream b32stream=new Base32InputStream(ins);assertEquals(8,b32stream.skip(8));assertEquals(-1,b32stream.read());assertEquals(-1,b32stream.read());}"
"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObjectException",0,"/** * Tests for Object decode(Object)*/@Test public void testDecodeObjectException(){try {this.instance.decode(new Object());}catch(DecoderException e){return;}fail(""Expected DecoderException"");}"
"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeObject",0,"/** * Tests for Object decode(Object)*/@Test public void testDecodeObject()throws Exception {byte[]bits;bits=new byte[1];assertDecodeObject(bits,""00000000"");bits=new byte[1];bits[0]=BIT_0;assertDecodeObject(bits,""00000001"");bits=new byte[1];bits[0]=BIT_0 | BIT_1;assertDecodeObject(bits,""00000011"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;assertDecodeObject(bits,""00000111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;assertDecodeObject(bits,""00001111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;assertDecodeObject(bits,""00011111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;assertDecodeObject(bits,""00111111"");bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;assertDecodeObject(bits,""01111111"");bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""11111111"");bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000000011111111"");bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000000111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000001111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000011111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0000111111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0001111111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0011111111111111"");bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""0111111111111111"");bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);assertDecodeObject(bits,""1111111111111111"");assertDecodeObject(new byte[0],null);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testDecodeByteArray",0,"@Test public void testDecodeByteArray()throws UnsupportedEncodingException {byte[]bits=new byte[1];byte[]decoded=instance.decode(""00000000"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=instance.decode(""00000001"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=instance.decode(""00000011"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=instance.decode(""00000111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=instance.decode(""00001111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=instance.decode(""00011111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=instance.decode(""00111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=instance.decode(""01111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""11111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000000011111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000000111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000001111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000011111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0000111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0001111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0011111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""0111111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.decode(""1111111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToByteArrayFromString",0,"@Test public void testToByteArrayFromString(){byte[]bits=new byte[1];byte[]decoded=instance.toByteArray(""00000000"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=instance.toByteArray(""00000001"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=instance.toByteArray(""00000011"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=instance.toByteArray(""00000111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=instance.toByteArray(""00001111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=instance.toByteArray(""00011111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=instance.toByteArray(""00111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=instance.toByteArray(""01111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""11111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000000011111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000000111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000001111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000011111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0000111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0001111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0011111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""0111111111111111"");assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=instance.toByteArray(""1111111111111111"");assertEquals(new String(bits),new String(decoded));assertEquals(0,instance.toByteArray((String)null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiCharArray",0,"@Test public void testFromAsciiCharArray(){assertEquals(0,BinaryCodec.fromAscii((char[])null).length);assertEquals(0,BinaryCodec.fromAscii(new char[0]).length);byte[]bits=new byte[1];byte[]decoded=BinaryCodec.fromAscii(""00000000"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=BinaryCodec.fromAscii(""00000001"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=BinaryCodec.fromAscii(""00000011"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=BinaryCodec.fromAscii(""00000111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=BinaryCodec.fromAscii(""00001111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=BinaryCodec.fromAscii(""00011111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=BinaryCodec.fromAscii(""00111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=BinaryCodec.fromAscii(""01111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""11111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000011111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000001111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000011111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0001111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0011111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0111111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""1111111111111111"".toCharArray());assertEquals(new String(bits),new String(decoded));assertEquals(0,BinaryCodec.fromAscii((char[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testFromAsciiByteArray",0,"@Test public void testFromAsciiByteArray()throws UnsupportedEncodingException {assertEquals(0,BinaryCodec.fromAscii((byte[])null).length);assertEquals(0,BinaryCodec.fromAscii(new byte[0]).length);byte[]bits=new byte[1];byte[]decoded=BinaryCodec.fromAscii(""00000000"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0;decoded=BinaryCodec.fromAscii(""00000001"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1;decoded=BinaryCodec.fromAscii(""00000011"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;decoded=BinaryCodec.fromAscii(""00000111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;decoded=BinaryCodec.fromAscii(""00001111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;decoded=BinaryCodec.fromAscii(""00011111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;decoded=BinaryCodec.fromAscii(""00111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;decoded=BinaryCodec.fromAscii(""01111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""11111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000011111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000000111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000001111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000011111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0000111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0001111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0011111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""0111111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));bits=new byte[2];bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);decoded=BinaryCodec.fromAscii(""1111111111111111"".getBytes(""UTF-8""));assertEquals(new String(bits),new String(decoded));assertEquals(0,BinaryCodec.fromAscii((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeByteArray",0,"@Test public void testEncodeByteArray(){byte[]bits=new byte[1];String l_encoded=new String(instance.encode(bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String(instance.encode(bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String(instance.encode(bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(instance.encode(bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(instance.encode(bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(instance.encode(bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(instance.encode(bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(instance.encode(bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(instance.encode(bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(instance.encode(bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(instance.encode(bits));assertEquals(""1111111111111111"",l_encoded);assertEquals(0,instance.encode((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiBytes",0,"@Test public void testToAsciiBytes(){byte[]bits=new byte[1];String l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiBytes(bits));assertEquals(""1111111111111111"",l_encoded);assertEquals(0,BinaryCodec.toAsciiBytes((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiChars",0,"@Test public void testToAsciiChars(){byte[]bits=new byte[1];String l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String(BinaryCodec.toAsciiChars(bits));assertEquals(""1111111111111111"",l_encoded);assertEquals(0,BinaryCodec.toAsciiChars((byte[])null).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testToAsciiString",0,"/** * Tests the toAsciiString(byte[])method*/@Test public void testToAsciiString(){byte[]bits=new byte[1];String l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=BinaryCodec.toAsciiString(bits);assertEquals(""1111111111111111"",l_encoded);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectNull",0,"@Test public void testEncodeObjectNull()throws Exception {Object obj=new byte[0];assertEquals(0,((char[])instance.encode(obj)).length);}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObjectException",0,"@Test public void testEncodeObjectException(){try {instance.encode("""");}catch(EncoderException e){return;}fail(""Expected EncoderException"");}"
"org.apache.commons.codec.binary.BinaryCodecTest.testEncodeObject",0,"@Test public void testEncodeObject()throws Exception {byte[]bits=new byte[1];String l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000000"",l_encoded);bits=new byte[1];bits[0]=BIT_0;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000001"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000011"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00000111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00001111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00011111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""00111111"",l_encoded);bits=new byte[1];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""01111111"",l_encoded);bits=new byte[1];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""11111111"",l_encoded);bits=new byte[2];l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000000"",l_encoded);bits=new byte[2];bits[0]=BIT_0;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000001"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000011"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000000111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000001111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000011111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000000111111"",l_encoded);bits=new byte[2];bits[0]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000001111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000011111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000000111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000001111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000011111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0000111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0001111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0011111111111111"",l_encoded);bits=new byte[2];bits[1]=BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6;bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""0111111111111111"",l_encoded);bits=new byte[2];bits[0]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);bits[1]=(byte)(BIT_0 | BIT_1 | BIT_2| BIT_3| BIT_4| BIT_5| BIT_6| BIT_7);l_encoded=new String((char[])instance.encode((Object)bits));assertEquals(""1111111111111111"",l_encoded);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUTF8RoundTrip",0,"@Test public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertEquals(""=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82"",qpcodec.encode(ru_msg,CharEncoding.UTF_8));assertEquals(""Gr=C3=BCezi_z=C3=A4m=C3=A4"",qpcodec.encode(ch_msg,CharEncoding.UTF_8));assertEquals(ru_msg,qpcodec.decode(qpcodec.encode(ru_msg,CharEncoding.UTF_8),CharEncoding.UTF_8));assertEquals(ch_msg,qpcodec.decode(qpcodec.encode(ch_msg,CharEncoding.UTF_8),CharEncoding.UTF_8));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testBasicEncodeDecode",0,"@Test public void testBasicEncodeDecode()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""= Hello there =\r\n"";String encoded=qpcodec.encode(plain);assertEquals(""Basic quoted-printable encoding test"",""=3D Hello there =3D=0D=0A"",encoded);assertEquals(""Basic quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSafeCharEncodeDecode",0,"@Test public void testSafeCharEncodeDecode()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""abc123_-.*~!@#$%^&()+{}\""\\;:`,/[]"";String encoded=qpcodec.encode(plain);assertEquals(""Safe chars quoted-printable encoding test"",plain,encoded);assertEquals(""Safe chars quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUnsafeEncodeDecode",0,"@Test public void testUnsafeEncodeDecode()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""=\r\n"";String encoded=qpcodec.encode(plain);assertEquals(""Unsafe chars quoted-printable encoding test"",""=3D=0D=0A"",encoded);assertEquals(""Unsafe chars quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeDecodeNull",0,"@Test public void testEncodeDecodeNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertNull(""Null string quoted-printable encoding test"",qpcodec.encode((String)null));assertNull(""Null string quoted-printable decoding test"",qpcodec.decode((String)null));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeInvalid",0,"@Test public void testDecodeInvalid()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();try {qpcodec.decode(""="");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {qpcodec.decode(""=A"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {qpcodec.decode(""=WW"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();byte[]plain=null;byte[]encoded=qpcodec.encode(plain);assertEquals(""Encoding a null string should return null"",null,encoded);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeUrlWithNullBitSet",0,"@Test public void testEncodeUrlWithNullBitSet()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""1+1 = 2"";String encoded=new String(QuotedPrintableCodec.encodeQuotedPrintable(null,plain.getBytes(""UTF-8"")));assertEquals(""Basic quoted-printable encoding test"",""1+1 =3D 2"",encoded);assertEquals(""Basic quoted-printable decoding test"",plain,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeWithNullArray",0,"@Test public void testDecodeWithNullArray()throws Exception {byte[]plain=null;byte[]result=QuotedPrintableCodec.decodeQuotedPrintable(plain);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeStringWithNull",0,"@Test public void testEncodeStringWithNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String test=null;String result=qpcodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeStringWithNull",0,"@Test public void testDecodeStringWithNull()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String test=null;String result=qpcodec.decode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testEncodeObjects",0,"@Test public void testEncodeObjects()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""1+1 = 2"";String encoded=(String)qpcodec.encode((Object)plain);assertEquals(""Basic quoted-printable encoding test"",""1+1 =3D 2"",encoded);byte[]plainBA=plain.getBytes(""UTF-8"");byte[]encodedBA=(byte[])qpcodec.encode((Object)plainBA);encoded=new String(encodedBA);assertEquals(""Basic quoted-printable encoding test"",""1+1 =3D 2"",encoded);Object result=qpcodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qpcodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testInvalidEncoding",0,"@Test public void testInvalidEncoding(){QuotedPrintableCodec qpcodec=new QuotedPrintableCodec(""NONSENSE"");String plain=""Hello there!"";try {qpcodec.encode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(EncoderException ee){}try {qpcodec.decode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDecodeObjects",0,"@Test public void testDecodeObjects()throws Exception {QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""1+1 =3D 2"";String decoded=(String)qpcodec.decode((Object)plain);assertEquals(""Basic quoted-printable decoding test"",""1+1 = 2"",decoded);byte[]plainBA=plain.getBytes(""UTF-8"");byte[]decodedBA=(byte[])qpcodec.decode((Object)plainBA);decoded=new String(decodedBA);assertEquals(""Basic quoted-printable decoding test"",""1+1 = 2"",decoded);Object result=qpcodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qpcodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testDefaultEncoding",0,"@Test public void testDefaultEncoding()throws Exception {String plain=""Hello there!"";QuotedPrintableCodec qpcodec=new QuotedPrintableCodec(""UnicodeBig"");qpcodec.encode(plain);String encoded1=qpcodec.encode(plain,""UnicodeBig"");String encoded2=qpcodec.encode(plain);assertEquals(encoded1,encoded2);}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakDecode",1,"@Test public void testSoftLineBreakDecode()throws Exception {String qpdata=""If you believe that truth=3Dbeauty,then surely=20=\r\nmathematics "" + ""is the most beautiful branch of philosophy."";String expected=""If you believe that truth=beauty,then surely mathematics "" + ""is the most beautiful branch of philosophy."";QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertEquals(expected,qpcodec.decode(qpdata));String encoded=qpcodec.encode(expected);assertEquals(expected,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSoftLineBreakEncode",1,"@Test public void testSoftLineBreakEncode()throws Exception {String qpdata=""If you believe that truth=3Dbeauty,then surely mathematics is the most "" + ""b=\r\neautiful branch of philosophy."";String expected=""If you believe that truth=beauty,then surely mathematics is the most "" + ""beautiful branch of philosophy."";QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertEquals(qpdata,qpcodec.encode(expected));String decoded=qpcodec.decode(qpdata);assertEquals(qpdata,qpcodec.encode(decoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testSkipNotEncodedCRLF",1,"@Test public void testSkipNotEncodedCRLF()throws Exception {String qpdata=""CRLF in an\n encoded text should be=20=\r\n\rskipped in the\r decoding."";String expected=""CRLF in an encoded text should be skipped in the decoding."";QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();assertEquals(expected,qpcodec.decode(qpdata));String encoded=qpcodec.encode(expected);assertEquals(expected,qpcodec.decode(encoded));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testTrailingSpecial",1,"@Test public void testTrailingSpecial()throws Exception {final QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""This is a example of a quoted-printable text file. This might contain sp=cial chars."";String expected=""This is a example of a quoted-printable text file. This might contain sp=3D=\r\ncial chars."";assertEquals(expected,qpcodec.encode(plain));plain=""This is a example of a quoted-printable text file. This might contain ta\tbs as well."";expected=""This is a example of a quoted-printable text file. This might contain ta=09=\r\nbs as well."";assertEquals(expected,qpcodec.encode(plain));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testUltimateSoftBreak",1,"@Test public void testUltimateSoftBreak()throws Exception {final QuotedPrintableCodec qpcodec=new QuotedPrintableCodec();String plain=""This is a example of a quoted-printable text file. There is no end to it\t"";String expected=""This is a example of a quoted-printable text file. There is no end to i=\r\nt=09"";assertEquals(expected,qpcodec.encode(plain));plain=""This is a example of a quoted-printable text file. There is no end to it "";expected=""This is a example of a quoted-printable text file. There is no end to i=\r\nt=20"";assertEquals(expected,qpcodec.encode(plain));plain=""This is a example of a quoted-printable text file. There is no end to   "";expected=""This is a example of a quoted-printable text file. There is no end to=20=\r\n =20"";assertEquals(expected,qpcodec.encode(plain));plain=""This is a example of a quoted-printable text file. There is no end to=  "";expected=""This is a example of a quoted-printable text file. There is no end to=3D=\r\n =20"";assertEquals(expected,qpcodec.encode(plain));}"
"org.apache.commons.codec.net.QuotedPrintableCodecTest.testFinalBytes",0,"@Test public void testFinalBytes()throws Exception {String plain=""This is a example of a quoted=printable text file. There is no tt"";String expected=""This is a example of a quoted=3Dprintable text file. There is no tt"";assertEquals(expected,new QuotedPrintableCodec().encode(plain));}"
"org.apache.commons.codec.net.RFC1522CodecTest.testNullInput",0,"@Test public void testNullInput()throws Exception {RFC1522TestCodec testcodec=new RFC1522TestCodec();assertNull(testcodec.decodeText(null));assertNull(testcodec.encodeText(null,CharEncoding.UTF_8));}"
"org.apache.commons.codec.net.RFC1522CodecTest.testDecodeInvalid",0,"@Test public void testDecodeInvalid()throws Exception {assertExpectedDecoderException(""whatever"");assertExpectedDecoderException(""=?"");assertExpectedDecoderException(""?="");assertExpectedDecoderException(""=="");assertExpectedDecoderException(""=??="");assertExpectedDecoderException(""=?stuff?="");assertExpectedDecoderException(""=?UTF-8??="");assertExpectedDecoderException(""=?UTF-8?stuff?="");assertExpectedDecoderException(""=?UTF-8?T?stuff"");assertExpectedDecoderException(""=??T?stuff?="");assertExpectedDecoderException(""=?UTF-8??stuff?="");assertExpectedDecoderException(""=?UTF-8?W?stuff?="");}"
"org.apache.commons.codec.binary.BaseNCodecTest.testBaseNCodec",0,"@Test public void testBaseNCodec(){assertNotNull(codec);}"
"org.apache.commons.codec.binary.BaseNCodecTest.testIsWhiteSpace",0,"@Test public void testIsWhiteSpace(){assertTrue(BaseNCodec.isWhiteSpace((byte)' '));assertTrue(BaseNCodec.isWhiteSpace((byte)'\n'));assertTrue(BaseNCodec.isWhiteSpace((byte)'\r'));assertTrue(BaseNCodec.isWhiteSpace((byte)'\t'));}"
"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByte",0,"@Test public void testIsInAlphabetByte(){assertFalse(codec.isInAlphabet((byte)0));assertFalse(codec.isInAlphabet((byte)'a'));assertTrue(codec.isInAlphabet((byte)'O'));assertTrue(codec.isInAlphabet((byte)'K'));}"
"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetByteArrayBoolean",0,"@Test public void testIsInAlphabetByteArrayBoolean(){assertTrue(codec.isInAlphabet(new byte[]{},false));assertTrue(codec.isInAlphabet(new byte[]{'O'},false));assertFalse(codec.isInAlphabet(new byte[]{'O',' '},false));assertFalse(codec.isInAlphabet(new byte[]{' '},false));assertTrue(codec.isInAlphabet(new byte[]{},true));assertTrue(codec.isInAlphabet(new byte[]{'O'},true));assertTrue(codec.isInAlphabet(new byte[]{'O',' '},true));assertTrue(codec.isInAlphabet(new byte[]{' '},true));}"
"org.apache.commons.codec.binary.BaseNCodecTest.testIsInAlphabetString",0,"@Test public void testIsInAlphabetString(){assertTrue(codec.isInAlphabet(""OK""));assertTrue(codec.isInAlphabet(""O=K= \t\n\r""));}"
"org.apache.commons.codec.binary.BaseNCodecTest.testContainsAlphabetOrPad",0,"@Test public void testContainsAlphabetOrPad(){assertFalse(codec.containsAlphabetOrPad(null));assertFalse(codec.containsAlphabetOrPad(new byte[]{}));assertTrue(codec.containsAlphabetOrPad(""OK"".getBytes()));assertTrue(codec.containsAlphabetOrPad(""OK "".getBytes()));assertFalse(codec.containsAlphabetOrPad(""ok "".getBytes()));assertTrue(codec.containsAlphabetOrPad(new byte[]{codec.PAD}));}"
"org.apache.commons.codec.EncoderExceptionTest.testConstructor0",0,"@Test public void testConstructor0(){EncoderException e=new EncoderException();assertNull(e.getMessage());assertNull(e.getCause());}"
"org.apache.commons.codec.EncoderExceptionTest.testConstructorString",0,"@Test public void testConstructorString(){EncoderException e=new EncoderException(MSG);assertEquals(MSG,e.getMessage());assertNull(e.getCause());}"
"org.apache.commons.codec.EncoderExceptionTest.testConstructorStringThrowable",0,"@Test public void testConstructorStringThrowable(){EncoderException e=new EncoderException(MSG,t);assertEquals(MSG,e.getMessage());assertEquals(t,e.getCause());}"
"org.apache.commons.codec.EncoderExceptionTest.testConstructorThrowable",0,"@Test public void testConstructorThrowable(){EncoderException e=new EncoderException(t);assertEquals(t.getClass().getName(),e.getMessage());assertEquals(t,e.getCause());}"
"org.apache.commons.codec.net.BCodecTest.testNullInput",0,"@Test public void testNullInput()throws Exception {BCodec bcodec=new BCodec();assertNull(bcodec.doDecoding(null));assertNull(bcodec.doEncoding(null));}"
"org.apache.commons.codec.net.BCodecTest.testUTF8RoundTrip",0,"@Test public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);BCodec bcodec=new BCodec(CharEncoding.UTF_8);assertEquals(""=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?="",bcodec.encode(ru_msg));assertEquals(""=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?="",bcodec.encode(ch_msg));assertEquals(ru_msg,bcodec.decode(bcodec.encode(ru_msg)));assertEquals(ch_msg,bcodec.decode(bcodec.encode(ch_msg)));}"
"org.apache.commons.codec.net.BCodecTest.testBasicEncodeDecode",0,"@Test public void testBasicEncodeDecode()throws Exception {BCodec bcodec=new BCodec();String plain=""Hello there"";String encoded=bcodec.encode(plain);assertEquals(""Basic B encoding test"",""=?UTF-8?B?SGVsbG8gdGhlcmU=?="",encoded);assertEquals(""Basic B decoding test"",plain,bcodec.decode(encoded));}"
"org.apache.commons.codec.net.BCodecTest.testEncodeDecodeNull",0,"@Test public void testEncodeDecodeNull()throws Exception {BCodec bcodec=new BCodec();assertNull(""Null string B encoding test"",bcodec.encode((String)null));assertNull(""Null string B decoding test"",bcodec.decode((String)null));}"
"org.apache.commons.codec.net.BCodecTest.testEncodeStringWithNull",0,"@Test public void testEncodeStringWithNull()throws Exception {BCodec bcodec=new BCodec();String test=null;String result=bcodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.BCodecTest.testDecodeStringWithNull",0,"@Test public void testDecodeStringWithNull()throws Exception {BCodec bcodec=new BCodec();String test=null;String result=bcodec.decode(test);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.BCodecTest.testEncodeObjects",0,"@Test public void testEncodeObjects()throws Exception {BCodec bcodec=new BCodec();String plain=""what not"";String encoded=(String)bcodec.encode((Object)plain);assertEquals(""Basic B encoding test"",""=?UTF-8?B?d2hhdCBub3Q=?="",encoded);Object result=bcodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);bcodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}}"
"org.apache.commons.codec.net.BCodecTest.testInvalidEncoding",0,"@Test public void testInvalidEncoding(){BCodec bcodec=new BCodec(""NONSENSE"");try {bcodec.encode(""Hello there!"");fail(""We set the encoding to a bogus NONSENSE value,this shouldn't have worked."");}catch(EncoderException ee){}try {bcodec.decode(""=?NONSENSE?B?Hello there!?="");fail(""We set the encoding to a bogus NONSENSE value,this shouldn't have worked."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.BCodecTest.testDecodeObjects",0,"@Test public void testDecodeObjects()throws Exception {BCodec bcodec=new BCodec();String decoded=""=?UTF-8?B?d2hhdCBub3Q=?="";String plain=(String)bcodec.decode((Object)decoded);assertEquals(""Basic B decoding test"",""what not"",plain);Object result=bcodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);bcodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.URLCodecTest.testUTF8RoundTrip",0,"@Test public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);URLCodec urlCodec=new URLCodec();this.validateState(urlCodec);assertEquals(""%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82"",urlCodec.encode(ru_msg,CharEncoding.UTF_8));assertEquals(""Gr%C3%BCezi_z%C3%A4m%C3%A4"",urlCodec.encode(ch_msg,CharEncoding.UTF_8));assertEquals(ru_msg,urlCodec.decode(urlCodec.encode(ru_msg,CharEncoding.UTF_8),CharEncoding.UTF_8));assertEquals(ch_msg,urlCodec.decode(urlCodec.encode(ch_msg,CharEncoding.UTF_8),CharEncoding.UTF_8));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testBasicEncodeDecode",0,"@Test public void testBasicEncodeDecode()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello there!"";String encoded=urlCodec.encode(plain);assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);assertEquals(""Basic URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testSafeCharEncodeDecode",0,"@Test public void testSafeCharEncodeDecode()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""abc123_-.*"";String encoded=urlCodec.encode(plain);assertEquals(""Safe chars URL encoding test"",plain,encoded);assertEquals(""Safe chars URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testUnsafeEncodeDecode",0,"@Test public void testUnsafeEncodeDecode()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""~!@#$%^&()+{}\""\\;:`,/[]"";String encoded=urlCodec.encode(plain);assertEquals(""Unsafe chars URL encoding test"",""%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D"",encoded);assertEquals(""Unsafe chars URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeDecodeNull",0,"@Test public void testEncodeDecodeNull()throws Exception {URLCodec urlCodec=new URLCodec();assertNull(""Null string URL encoding test"",urlCodec.encode((String)null));assertNull(""Null string URL decoding test"",urlCodec.decode((String)null));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalid",0,"@Test public void testDecodeInvalid()throws Exception {URLCodec urlCodec=new URLCodec();try {urlCodec.decode(""%"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {urlCodec.decode(""%A"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {urlCodec.decode(""%WW"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}try {urlCodec.decode(""%0W"");fail(""DecoderException should have been thrown"");}catch(DecoderException e){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeInvalidContent",0,"@Test public void testDecodeInvalidContent()throws UnsupportedEncodingException,DecoderException {String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);URLCodec urlCodec=new URLCodec();byte[]input=ch_msg.getBytes(""ISO-8859-1"");byte[]output=urlCodec.decode(input);assertEquals(input.length,output.length);for (int i=0;i < input.length;i++){assertEquals(input[i],output[i]);}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {URLCodec urlCodec=new URLCodec();byte[]plain=null;byte[]encoded=urlCodec.encode(plain);assertEquals(""Encoding a null string should return null"",null,encoded);this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeUrlWithNullBitSet",0,"@Test public void testEncodeUrlWithNullBitSet()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello there!"";String encoded=new String(URLCodec.encodeUrl(null,plain.getBytes(""UTF-8"")));assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);assertEquals(""Basic URL decoding test"",plain,urlCodec.decode(encoded));this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeWithNullArray",0,"@Test public void testDecodeWithNullArray()throws Exception {byte[]plain=null;byte[]result=URLCodec.decodeUrl(plain);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeStringWithNull",0,"@Test public void testEncodeStringWithNull()throws Exception {URLCodec urlCodec=new URLCodec();String test=null;String result=urlCodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeStringWithNull",0,"@Test public void testDecodeStringWithNull()throws Exception {URLCodec urlCodec=new URLCodec();String test=null;String result=urlCodec.decode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.URLCodecTest.testEncodeObjects",0,"@Test public void testEncodeObjects()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello there!"";String encoded=(String)urlCodec.encode((Object)plain);assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);byte[]plainBA=plain.getBytes(""UTF-8"");byte[]encodedBA=(byte[])urlCodec.encode((Object)plainBA);encoded=new String(encodedBA);assertEquals(""Basic URL encoding test"",""Hello+there%21"",encoded);Object result=urlCodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);urlCodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testInvalidEncoding",0,"@Test public void testInvalidEncoding(){URLCodec urlCodec=new URLCodec(""NONSENSE"");String plain=""Hello there!"";try {urlCodec.encode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(EncoderException ee){}try {urlCodec.decode(plain);fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(DecoderException ee){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDecodeObjects",0,"@Test public void testDecodeObjects()throws Exception {URLCodec urlCodec=new URLCodec();String plain=""Hello+there%21"";String decoded=(String)urlCodec.decode((Object)plain);assertEquals(""Basic URL decoding test"",""Hello there!"",decoded);byte[]plainBA=plain.getBytes(""UTF-8"");byte[]decodedBA=(byte[])urlCodec.decode((Object)plainBA);decoded=new String(decodedBA);assertEquals(""Basic URL decoding test"",""Hello there!"",decoded);Object result=urlCodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);urlCodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}this.validateState(urlCodec);}"
"org.apache.commons.codec.net.URLCodecTest.testDefaultEncoding",0,"@Test public void testDefaultEncoding()throws Exception {String plain=""Hello there!"";URLCodec urlCodec=new URLCodec(""UnicodeBig"");urlCodec.encode(plain);String encoded1=urlCodec.encode(plain,""UnicodeBig"");String encoded2=urlCodec.encode(plain);assertEquals(encoded1,encoded2);this.validateState(urlCodec);}"
"org.apache.commons.codec.binary.HexTest.testCustomCharset",0,"@Test public void testCustomCharset()throws UnsupportedEncodingException,DecoderException {for(String name : Charset.availableCharsets().keySet()){testCustomCharset(name,""testCustomCharset"");}}"
"org.apache.commons.codec.binary.HexTest.testCustomCharsetBadNameEncodeByteArray",0,"@Test public void testCustomCharsetBadNameEncodeByteArray()throws UnsupportedEncodingException {try {new Hex(BAD_ENCODING_NAME).encode(""Hello World"".getBytes(""UTF-8""));fail(""Expected "" + IllegalStateException.class.getName());}catch(IllegalStateException e){}}"
"org.apache.commons.codec.binary.HexTest.testCustomCharsetBadNameEncodeObject",0,"@Test public void testCustomCharsetBadNameEncodeObject(){try {new Hex(BAD_ENCODING_NAME).encode(""Hello World"");fail(""Expected "" + EncoderException.class.getName());}catch(EncoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testCustomCharsetBadNameDecodeObject",0,"@Test public void testCustomCharsetBadNameDecodeObject()throws UnsupportedEncodingException {try {new Hex(BAD_ENCODING_NAME).decode(""Hello World"".getBytes(""UTF-8""));fail(""Expected "" + DecoderException.class.getName());}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testCustomCharsetToString",0,"@Test public void testCustomCharsetToString(){assertTrue(new Hex().toString().indexOf(Hex.DEFAULT_CHARSET_NAME)>= 0);}"
"org.apache.commons.codec.binary.HexTest.testDecodeArrayOddCharacters",0,"@Test public void testDecodeArrayOddCharacters(){try {new Hex().decode(new byte[]{65});fail(""An exception wasn't thrown when trying to decode an odd number of characters"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos0",0,"@Test public void testDecodeBadCharacterPos0(){try {new Hex().decode(""q0"");fail(""An exception wasn't thrown when trying to decode an illegal character"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeBadCharacterPos1",0,"@Test public void testDecodeBadCharacterPos1(){try {new Hex().decode(""0q"");fail(""An exception wasn't thrown when trying to decode an illegal character"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeClassCastException",0,"@Test public void testDecodeClassCastException(){try {new Hex().decode(new int[]{65});fail(""An exception wasn't thrown when trying to decode."");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters1",0,"@Test public void testDecodeHexOddCharacters1(){checkDecodeHexOddCharacters(new char[]{'A'});}"
"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters3",0,"@Test public void testDecodeHexOddCharacters3(){checkDecodeHexOddCharacters(new char[]{'A','B','C'});}"
"org.apache.commons.codec.binary.HexTest.testDecodeHexOddCharacters5",0,"@Test public void testDecodeHexOddCharacters5(){checkDecodeHexOddCharacters(new char[]{'A','B','C','D','E'});}"
"org.apache.commons.codec.binary.HexTest.testDecodeStringOddCharacters",0,"@Test public void testDecodeStringOddCharacters(){try {new Hex().decode(""6"");fail(""An exception wasn't thrown when trying to decode an odd number of characters"");}catch(DecoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testDencodeEmpty",0,"@Test public void testDencodeEmpty()throws DecoderException {assertTrue(Arrays.equals(new byte[0],Hex.decodeHex(new char[0])));assertTrue(Arrays.equals(new byte[0],new Hex().decode(new byte[0])));assertTrue(Arrays.equals(new byte[0],(byte[])new Hex().decode("""")));}"
"org.apache.commons.codec.binary.HexTest.testEncodeClassCastException",0,"@Test public void testEncodeClassCastException(){try {new Hex().encode(new int[]{65});fail(""An exception wasn't thrown when trying to encode."");}catch(EncoderException e){}}"
"org.apache.commons.codec.binary.HexTest.testEncodeDecodeRandom",0,"@Test public void testEncodeDecodeRandom()throws DecoderException,EncoderException {Random random=new Random();Hex hex=new Hex();for (int i=5;i > 0;i--){byte[]data=new byte[random.nextInt(10000)+ 1];random.nextBytes(data);char[]encodedChars=Hex.encodeHex(data);byte[]decodedBytes=Hex.decodeHex(encodedChars);assertTrue(Arrays.equals(data,decodedBytes));byte[]encodedStringBytes=hex.encode(data);decodedBytes=hex.decode(encodedStringBytes);assertTrue(Arrays.equals(data,decodedBytes));String dataString=new String(encodedChars);char[]encodedStringChars=(char[])hex.encode(dataString);decodedBytes=(byte[])hex.decode(encodedStringChars);assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString),decodedBytes));dataString=new String(encodedChars);encodedStringChars=(char[])hex.encode(dataString);decodedBytes=(byte[])hex.decode(new String(encodedStringChars));assertTrue(Arrays.equals(StringUtils.getBytesUtf8(dataString),decodedBytes));}}"
"org.apache.commons.codec.binary.HexTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws EncoderException {assertTrue(Arrays.equals(new char[0],Hex.encodeHex(new byte[0])));assertTrue(Arrays.equals(new byte[0],new Hex().encode(new byte[0])));assertTrue(Arrays.equals(new char[0],(char[])new Hex().encode("""")));}"
"org.apache.commons.codec.binary.HexTest.testEncodeZeroes",0,"@Test public void testEncodeZeroes(){char[]c=Hex.encodeHex(new byte[36]);assertEquals(""000000000000000000000000000000000000000000000000000000000000000000000000"",new String(c));}"
"org.apache.commons.codec.binary.HexTest.testHelloWorldLowerCaseHex",0,"@Test public void testHelloWorldLowerCaseHex(){byte[]b=StringUtils.getBytesUtf8(""Hello World"");final String expected=""48656c6c6f20576f726c64"";char[]actual;actual=Hex.encodeHex(b);assertTrue(expected.equals(new String(actual)));actual=Hex.encodeHex(b,true);assertTrue(expected.equals(new String(actual)));actual=Hex.encodeHex(b,false);assertFalse(expected.equals(new String(actual)));}"
"org.apache.commons.codec.binary.HexTest.testHelloWorldUpperCaseHex",0,"@Test public void testHelloWorldUpperCaseHex(){byte[]b=StringUtils.getBytesUtf8(""Hello World"");final String expected=""48656C6C6F20576F726C64"";char[]actual;actual=Hex.encodeHex(b);assertFalse(expected.equals(new String(actual)));actual=Hex.encodeHex(b,true);assertFalse(expected.equals(new String(actual)));actual=Hex.encodeHex(b,false);assertTrue(expected.equals(new String(actual)));}"
"org.apache.commons.codec.binary.HexTest.testRequiredCharset",0,"@Test public void testRequiredCharset()throws UnsupportedEncodingException,DecoderException {testCustomCharset(""UTF-8"",""testRequiredCharset"");testCustomCharset(""UTF-16"",""testRequiredCharset"");testCustomCharset(""UTF-16BE"",""testRequiredCharset"");testCustomCharset(""UTF-16LE"",""testRequiredCharset"");testCustomCharset(""US-ASCII"",""testRequiredCharset"");testCustomCharset(""ISO8859_1"",""testRequiredCharset"");}"
"org.apache.commons.codec.binary.Base32Test.testBase32Samples",0,"@Test public void testBase32Samples()throws Exception {Base32 codec=new Base32();for(String[]element : BASE32_TEST_CASES){assertEquals(element[1],codec.encodeAsString(element[0].getBytes(""UTF-8"")));}}"
"org.apache.commons.codec.binary.Base32Test.testBase32HexSamples",0,"@Test public void testBase32HexSamples()throws Exception {Base32 codec=new Base32(true);for(String[]element : BASE32HEX_TEST_CASES){assertEquals(element[1],codec.encodeAsString(element[0].getBytes(""UTF-8"")));}}"
"org.apache.commons.codec.binary.Base32Test.testBase32Chunked",0,"@Test public void testBase32Chunked()throws Exception {Base32 codec=new Base32(20);for(String[]element : BASE32_TEST_CASES_CHUNKED){assertEquals(element[1],codec.encodeAsString(element[0].getBytes(""UTF-8"")));}}"
"org.apache.commons.codec.binary.Base32Test.testSingleCharEncoding",0,"@Test public void testSingleCharEncoding(){for (int i=0;i < 20;i++){Base32 codec=new Base32();byte unencoded[]=new byte[i];byte allInOne[]=codec.encode(unencoded);codec=new Base32();for (int j=0;j < unencoded.length;j++){codec.encode(unencoded,j,1);}codec.encode(unencoded,0,-1);byte singly[]=new byte[allInOne.length];codec.readResults(singly,0,100);if (!Arrays.equals(allInOne,singly)){fail();}}}"
"org.apache.commons.codec.binary.Base32Test.testRandomBytes",0,"@Test public void testRandomBytes(){for (int i=0;i < 20;i++){Base32 codec=new Base32();byte[][]b=Base32TestData.randomData(codec,i);assertEquals("""" + i + "" ""+ codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));}}"
"org.apache.commons.codec.binary.Base32Test.testRandomBytesChunked",0,"@Test public void testRandomBytesChunked(){for (int i=0;i < 20;i++){Base32 codec=new Base32(10);byte[][]b=Base32TestData.randomData(codec,i);assertEquals("""" + i + "" ""+ codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));}}"
"org.apache.commons.codec.binary.Base32Test.testRandomBytesHex",0,"@Test public void testRandomBytesHex(){for (int i=0;i < 20;i++){Base32 codec=new Base32(true);byte[][]b=Base32TestData.randomData(codec,i);assertEquals("""" + i + "" ""+ codec.lineLength,b[1].length,codec.getEncodedLength(b[0]));}}"
"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamMimeChunkSize",0,"/** * Test the Base32OutputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase32EmptyOutputStreamMimeChunkSize()throws Exception {testBase32EmptyOutputStream(BaseNCodec.MIME_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32EmptyOutputStreamPemChunkSize",0,"/** * Test the Base32OutputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase32EmptyOutputStreamPemChunkSize()throws Exception {testBase32EmptyOutputStream(BaseNCodec.PEM_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByChunk",0,"/** * Test the Base32OutputStream implementation* @throws Exception for some failure scenarios.*/@Test public void testBase32OutputStreamByChunk()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);BaseNCodec codec=new Base32();for (int i=0;i <= 150;i++){byte[][]randomData=Base32TestData.randomData(codec,i);encoded=randomData[1];decoded=randomData[0];testByChunk(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base32OutputStreamTest.testBase32OutputStreamByteByByte",0,"/** * Test the Base32OutputStream implementation* @throws Exception for some failure scenarios.*/@Test public void testBase32OutputStreamByteByByte()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(Base32TestData.BASE32_FIXTURE);byte[]decoded=StringUtils.getBytesUtf8(Base32TestData.STRING_FIXTURE);testByteByByte(encoded,decoded,76,CRLF);BaseNCodec codec=new Base32();for (int i=0;i <= 150;i++){byte[][]randomData=Base32TestData.randomData(codec,i);encoded=randomData[1];decoded=randomData[0];testByteByByte(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteOutOfBounds",0,"/** * Tests Base32OutputStream.write for expected IndexOutOfBoundsException conditions.* @throws Exception for some failure scenarios.*/@Test public void testWriteOutOfBounds()throws Exception {byte[]buf=new byte[1024];ByteArrayOutputStream bout=new ByteArrayOutputStream();Base32OutputStream out=new Base32OutputStream(bout);try {out.write(buf,-1,1);fail(""Expected Base32OutputStream.write(buf,-1,1)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}try {out.write(buf,1,-1);fail(""Expected Base32OutputStream.write(buf,1,-1)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}try {out.write(buf,buf.length + 1,0);fail(""Expected Base32OutputStream.write(buf,buf.length + 1,0)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}try {out.write(buf,buf.length - 1,2);fail(""Expected Base32OutputStream.write(buf,buf.length - 1,2)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}}"
"org.apache.commons.codec.binary.Base32OutputStreamTest.testWriteToNullCoverage",0,"/** * Tests Base32OutputStream.write(null).* @throws Exception for some failure scenarios.*/@Test public void testWriteToNullCoverage()throws Exception {ByteArrayOutputStream bout=new ByteArrayOutputStream();Base32OutputStream out=new Base32OutputStream(bout);try {out.write(null,0,0);fail(""Expcted Base32OutputStream.write(null)to throw a NullPointerException"");}catch(NullPointerException e){}}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testCodec98NPE",0,"/** * Test the Base64OutputStream implementation against the special NPE inducing input identified in the CODEC-98 bug.* @throws Exception for some failure scenarios.*/@Test public void testCodec98NPE()throws Exception {byte[]codec98=StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);byte[]codec98_1024=new byte[1024];System.arraycopy(codec98,0,codec98_1024,0,codec98.length);ByteArrayOutputStream data=new ByteArrayOutputStream(1024);Base64OutputStream stream=new Base64OutputStream(data,false);stream.write(codec98_1024,0,1024);stream.close();byte[]decodedBytes=data.toByteArray();String decoded=StringUtils.newStringUtf8(decodedBytes);assertEquals(""codec-98 NPE Base64OutputStream"",Base64TestData.CODEC_98_NPE_DECODED,decoded);}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamMimeChunkSize",0,"/** * Test the Base64OutputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase64EmptyOutputStreamMimeChunkSize()throws Exception {testBase64EmptyOutputStream(BaseNCodec.MIME_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64EmptyOutputStreamPemChunkSize",0,"/** * Test the Base64OutputStream implementation against empty input.* @throws Exception for some failure scenarios.*/@Test public void testBase64EmptyOutputStreamPemChunkSize()throws Exception {testBase64EmptyOutputStream(BaseNCodec.PEM_CHUNK_SIZE);}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByChunk",0,"/** * Test the Base64OutputStream implementation* @throws Exception for some failure scenarios.*/@Test public void testBase64OutputStreamByChunk()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(""AA==\r\n"");decoded=new byte[]{(byte)0};testByChunk(encoded,decoded,BaseNCodec.MIME_CHUNK_SIZE,CRLF);encoded=StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);decoded=Base64TestData.DECODED;testByChunk(encoded,decoded,BaseNCodec.PEM_CHUNK_SIZE,LF);String singleLine=Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(""\n"","""");encoded=StringUtils.getBytesUtf8(singleLine);decoded=Base64TestData.DECODED;testByChunk(encoded,decoded,0,LF);for (int i=0;i <= 150;i++){byte[][]randomData=Base64TestData.randomData(i,false);encoded=randomData[1];decoded=randomData[0];testByChunk(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testBase64OutputStreamByteByByte",0,"/** * Test the Base64OutputStream implementation* @throws Exception for some failure scenarios.*/@Test public void testBase64OutputStreamByteByByte()throws Exception {byte[]encoded=StringUtils.getBytesUtf8(""SGVsbG8gV29ybGQ=\r\n"");byte[]decoded=StringUtils.getBytesUtf8(STRING_FIXTURE);testByteByByte(encoded,decoded,76,CRLF);encoded=StringUtils.getBytesUtf8(""AA==\r\n"");decoded=new byte[]{(byte)0};testByteByByte(encoded,decoded,76,CRLF);encoded=StringUtils.getBytesUtf8(Base64TestData.ENCODED_64_CHARS_PER_LINE);decoded=Base64TestData.DECODED;testByteByByte(encoded,decoded,64,LF);String singleLine=Base64TestData.ENCODED_64_CHARS_PER_LINE.replaceAll(""\n"","""");encoded=StringUtils.getBytesUtf8(singleLine);decoded=Base64TestData.DECODED;testByteByByte(encoded,decoded,0,LF);for (int i=0;i <= 150;i++){byte[][]randomData=Base64TestData.randomData(i,false);encoded=randomData[1];decoded=randomData[0];testByteByByte(encoded,decoded,0,LF);}}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteOutOfBounds",0,"/** * Tests Base64OutputStream.write for expected IndexOutOfBoundsException conditions.* @throws Exception for some failure scenarios.*/@Test public void testWriteOutOfBounds()throws Exception {byte[]buf=new byte[1024];ByteArrayOutputStream bout=new ByteArrayOutputStream();Base64OutputStream out=new Base64OutputStream(bout);try {out.write(buf,-1,1);fail(""Expected Base64OutputStream.write(buf,-1,1)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}try {out.write(buf,1,-1);fail(""Expected Base64OutputStream.write(buf,1,-1)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}try {out.write(buf,buf.length + 1,0);fail(""Expected Base64OutputStream.write(buf,buf.length + 1,0)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}try {out.write(buf,buf.length - 1,2);fail(""Expected Base64OutputStream.write(buf,buf.length - 1,2)to throw a IndexOutOfBoundsException"");}catch(IndexOutOfBoundsException ioobe){}}"
"org.apache.commons.codec.binary.Base64OutputStreamTest.testWriteToNullCoverage",0,"/** * Tests Base64OutputStream.write(null).* @throws Exception for some failure scenarios.*/@Test public void testWriteToNullCoverage()throws Exception {ByteArrayOutputStream bout=new ByteArrayOutputStream();Base64OutputStream out=new Base64OutputStream(bout);try {out.write(null,0,0);fail(""Expcted Base64OutputStream.write(null)to throw a NullPointerException"");}catch(NullPointerException e){}}"
"org.apache.commons.codec.binary.StringUtilsTest.testConstructor",0,"/** * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops to restrict instantiation right now.*/@Test public void testConstructor(){new StringUtils();}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesIso8859_1",0,"@Test public void testGetBytesIso8859_1()throws UnsupportedEncodingException {String charsetName=""ISO-8859-1"";testGetBytesUnchecked(charsetName);byte[]expected=STRING_FIXTURE.getBytes(charsetName);byte[]actual=StringUtils.getBytesIso8859_1(STRING_FIXTURE);Assert.assertTrue(Arrays.equals(expected,actual));}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUsAscii",0,"@Test public void testGetBytesUsAscii()throws UnsupportedEncodingException {String charsetName=""US-ASCII"";testGetBytesUnchecked(charsetName);byte[]expected=STRING_FIXTURE.getBytes(charsetName);byte[]actual=StringUtils.getBytesUsAscii(STRING_FIXTURE);Assert.assertTrue(Arrays.equals(expected,actual));}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16",0,"@Test public void testGetBytesUtf16()throws UnsupportedEncodingException {String charsetName=""UTF-16"";testGetBytesUnchecked(charsetName);byte[]expected=STRING_FIXTURE.getBytes(charsetName);byte[]actual=StringUtils.getBytesUtf16(STRING_FIXTURE);Assert.assertTrue(Arrays.equals(expected,actual));}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Be",0,"@Test public void testGetBytesUtf16Be()throws UnsupportedEncodingException {String charsetName=""UTF-16BE"";testGetBytesUnchecked(charsetName);byte[]expected=STRING_FIXTURE.getBytes(charsetName);byte[]actual=StringUtils.getBytesUtf16Be(STRING_FIXTURE);Assert.assertTrue(Arrays.equals(expected,actual));}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf16Le",0,"@Test public void testGetBytesUtf16Le()throws UnsupportedEncodingException {String charsetName=""UTF-16LE"";testGetBytesUnchecked(charsetName);byte[]expected=STRING_FIXTURE.getBytes(charsetName);byte[]actual=StringUtils.getBytesUtf16Le(STRING_FIXTURE);Assert.assertTrue(Arrays.equals(expected,actual));}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUtf8",0,"@Test public void testGetBytesUtf8()throws UnsupportedEncodingException {String charsetName=""UTF-8"";testGetBytesUnchecked(charsetName);byte[]expected=STRING_FIXTURE.getBytes(charsetName);byte[]actual=StringUtils.getBytesUtf8(STRING_FIXTURE);Assert.assertTrue(Arrays.equals(expected,actual));}"
"org.apache.commons.codec.binary.StringUtilsTest.testGetBytesUncheckedBadName",0,"@Test public void testGetBytesUncheckedBadName(){try {StringUtils.getBytesUnchecked(STRING_FIXTURE,""UNKNOWN"");Assert.fail(""Expected "" + IllegalStateException.class.getName());}catch(IllegalStateException e){}}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringBadEnc",0,"@Test public void testNewStringBadEnc(){try {StringUtils.newString(BYTES_FIXTURE,""UNKNOWN"");Assert.fail(""Expected "" + IllegalStateException.class.getName());}catch(IllegalStateException e){}}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringIso8859_1",0,"@Test public void testNewStringIso8859_1()throws UnsupportedEncodingException {String charsetName=""ISO-8859-1"";testNewString(charsetName);String expected=new String(BYTES_FIXTURE,charsetName);String actual=StringUtils.newStringIso8859_1(BYTES_FIXTURE);Assert.assertEquals(expected,actual);}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUsAscii",0,"@Test public void testNewStringUsAscii()throws UnsupportedEncodingException {String charsetName=""US-ASCII"";testNewString(charsetName);String expected=new String(BYTES_FIXTURE,charsetName);String actual=StringUtils.newStringUsAscii(BYTES_FIXTURE);Assert.assertEquals(expected,actual);}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16",0,"@Test public void testNewStringUtf16()throws UnsupportedEncodingException {String charsetName=""UTF-16"";testNewString(charsetName);String expected=new String(BYTES_FIXTURE,charsetName);String actual=StringUtils.newStringUtf16(BYTES_FIXTURE);Assert.assertEquals(expected,actual);}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Be",0,"@Test public void testNewStringUtf16Be()throws UnsupportedEncodingException {String charsetName=""UTF-16BE"";testNewString(charsetName);String expected=new String(BYTES_FIXTURE,charsetName);String actual=StringUtils.newStringUtf16Be(BYTES_FIXTURE);Assert.assertEquals(expected,actual);}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf16Le",0,"@Test public void testNewStringUtf16Le()throws UnsupportedEncodingException {String charsetName=""UTF-16LE"";testNewString(charsetName);String expected=new String(BYTES_FIXTURE,charsetName);String actual=StringUtils.newStringUtf16Le(BYTES_FIXTURE);Assert.assertEquals(expected,actual);}"
"org.apache.commons.codec.binary.StringUtilsTest.testNewStringUtf8",0,"@Test public void testNewStringUtf8()throws UnsupportedEncodingException {String charsetName=""UTF-8"";testNewString(charsetName);String expected=new String(BYTES_FIXTURE,charsetName);String actual=StringUtils.newStringUtf8(BYTES_FIXTURE);Assert.assertEquals(expected,actual);}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAllChars",0,"/** * Tests we do not blow up.* @throws EncoderException*/@Test public void testAllChars()throws EncoderException {BeiderMorseEncoder bmpm=createGenericApproxEncoder();for (char c=Character.MIN_VALUE;c < Character.MAX_VALUE;c++){bmpm.encode("""" + c);}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty1Letter",0,"@Test public void testAsciiEncodeNotEmpty1Letter()throws EncoderException {BeiderMorseEncoder bmpm=createGenericApproxEncoder();for (char c='a';c <= 'z';c++){final String value="""" + c;final String valueU=value.toUpperCase();assertNotEmpty(bmpm,value);assertNotEmpty(bmpm,valueU);}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testAsciiEncodeNotEmpty2Letters",0,"@Test public void testAsciiEncodeNotEmpty2Letters()throws EncoderException {BeiderMorseEncoder bmpm=createGenericApproxEncoder();for (char c1='a';c1 <= 'z';c1++){for (char c2='a';c2 <= 'z';c2++){final String value=new String(new char[]{c1,c2});final String valueU=value.toUpperCase();assertNotEmpty(bmpm,value);assertNotEmpty(bmpm,valueU);}}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeAtzNotEmpty",0,"@Test public void testEncodeAtzNotEmpty()throws EncoderException {BeiderMorseEncoder bmpm=createGenericApproxEncoder();String[]names={""\u00e1cz"",""\u00e1tz"",""Ign\u00e1cz"",""Ign\u00e1tz"",""Ign\u00e1c""};for(String name : names){assertNotEmpty(bmpm,name);}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeGna",0,"/** * Tests https://issues.apache.org/jira/browse/CODEC-125?focusedCommentId=13071566&page=com.atlassian.jira.plugin.system.issuetabpanels: comment-tabpanel#comment-13071566* @throws EncoderException*/@Test public void testEncodeGna()throws EncoderException {BeiderMorseEncoder bmpm=createGenericApproxEncoder();bmpm.encode(""gna"");}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalArgumentException",0,"@Test(expected=IllegalArgumentException.class)public void testInvalidLangIllegalArgumentException(){Rule.getInstance(NameType.GENERIC,RuleType.APPROX,""noSuchLanguage"");}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLangIllegalStateException",0,"@Test(expected=IllegalStateException.class)public void testInvalidLangIllegalStateException(){Lang.loadFromResource(""thisIsAMadeUpResourceName"",Languages.getInstance(NameType.GENERIC));}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testInvalidLanguageIllegalArgumentException",0,"@Test(expected=IllegalArgumentException.class)public void testInvalidLanguageIllegalArgumentException(){Languages.getInstance(""thereIsNoSuchLanguage"");}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLongestEnglishSurname",0,"@Test(timeout=10000L)public void testLongestEnglishSurname()throws EncoderException {BeiderMorseEncoder bmpm=createGenericApproxEncoder();bmpm.encode(""MacGhilleseatheanaich"");}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testNegativeIndexForRuleMatchIndexOutOfBoundsException",0,"@Test(expected=IndexOutOfBoundsException.class)public void testNegativeIndexForRuleMatchIndexOutOfBoundsException(){Rule r=new Rule(""a"","""","""",new Rule.Phoneme("""",Languages.ANY_LANGUAGE));r.patternAndContextMatches(""bob"",-1);}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetConcat",0,"@Test public void testSetConcat(){BeiderMorseEncoder bmpm=new BeiderMorseEncoder();bmpm.setConcat(false);assertFalse(""Should be able to set concat to false"",bmpm.isConcat());}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetNameTypeAsh",0,"@Test public void testSetNameTypeAsh(){BeiderMorseEncoder bmpm=new BeiderMorseEncoder();bmpm.setNameType(NameType.ASHKENAZI);assertEquals(""Name type should have been set to ash"",NameType.ASHKENAZI,bmpm.getNameType());}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeExact",0,"@Test public void testSetRuleTypeExact(){BeiderMorseEncoder bmpm=new BeiderMorseEncoder();bmpm.setRuleType(RuleType.EXACT);assertEquals(""Rule type should have been set to exact"",RuleType.EXACT,bmpm.getRuleType());}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSetRuleTypeToRulesIllegalArgumentException",0,"@Test(expected=IllegalArgumentException.class)public void testSetRuleTypeToRulesIllegalArgumentException(){BeiderMorseEncoder bmpm=new BeiderMorseEncoder();bmpm.setRuleType(RuleType.RULES);}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck",0,"/** * (Un)luckily,the worse performing test because of the data in  {@link #TEST_CHARS}* @throws EncoderException*/@Test()public void testSpeedCheck()throws EncoderException {BeiderMorseEncoder bmpm=this.createGenericApproxEncoder();StringBuffer stringBuffer=new StringBuffer();stringBuffer.append(TEST_CHARS[0]);for (int i=0,j=1;i < 40;i++,j++){if (j == TEST_CHARS.length){j=0;}bmpm.encode(stringBuffer.toString());stringBuffer.append(TEST_CHARS[j]);}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck2",0,"@Test public void testSpeedCheck2()throws EncoderException {BeiderMorseEncoder bmpm=this.createGenericApproxEncoder();String phrase=""ItstheendoftheworldasweknowitandIfeelfine"";for (int i=1;i <= phrase.length();i++){bmpm.encode(phrase.subSequence(0,i));}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testSpeedCheck3",0,"@Test public void testSpeedCheck3()throws EncoderException {BeiderMorseEncoder bmpm=this.createGenericApproxEncoder();String phrase=""abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"";for (int i=1;i <= phrase.length();i++){bmpm.encode(phrase.subSequence(0,i));}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.bm.BeiderMorseEncoderTest.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.DecoderExceptionTest.testConstructor0",0,"@Test public void testConstructor0(){DecoderException e=new DecoderException();assertNull(e.getMessage());assertNull(e.getCause());}"
"org.apache.commons.codec.DecoderExceptionTest.testConstructorString",0,"@Test public void testConstructorString(){DecoderException e=new DecoderException(MSG);assertEquals(MSG,e.getMessage());assertNull(e.getCause());}"
"org.apache.commons.codec.DecoderExceptionTest.testConstructorStringThrowable",0,"@Test public void testConstructorStringThrowable(){DecoderException e=new DecoderException(MSG,t);assertEquals(MSG,e.getMessage());assertEquals(t,e.getCause());}"
"org.apache.commons.codec.DecoderExceptionTest.testConstructorThrowable",0,"@Test public void testConstructorThrowable(){DecoderException e=new DecoderException(t);assertEquals(t.getClass().getName(),e.getMessage());assertEquals(t,e.getCause());}"
"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphoneAlternate",0,"/** * Test alternative encoding.*/@Test public void testDoubleMetaphoneAlternate(){this.checkDoubleMetaphone(ALTERNATE_INDEX,true);}"
"org.apache.commons.codec.language.DoubleMetaphone2Test.testDoubleMetaphonePrimary",0,"/** * Test primary encoding.*/@Test public void testDoubleMetaphonePrimary(){this.checkDoubleMetaphone(PRIMARY_INDEX,false);}"
"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.DoubleMetaphone2Test.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.DoubleMetaphone2Test.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToLaterIsNegative",0,"@Test public void testPhonemeComparedToLaterIsNegative(){for(Rule.Phoneme[]phs : makePhonemes()){for (int i=0;i < phs.length;i++){for (int j=i + 1;j < phs.length;j++){int c=Rule.Phoneme.COMPARATOR.compare(phs[i],phs[j]);assertThat(""Comparing "" + phs[i].getPhonemeText()+ "" to ""+ phs[j].getPhonemeText()+ "" should be negative"",c,new NegativeIntegerBaseMatcher());}}}}"
"org.apache.commons.codec.language.bm.RuleTest.testPhonemeComparedToSelfIsZero",0,"@Test public void testPhonemeComparedToSelfIsZero(){for(Rule.Phoneme[]phs : makePhonemes()){for(Rule.Phoneme ph : phs){assertEquals(""Phoneme compared to itself should be zero: "" + ph.getPhonemeText(),0,Rule.Phoneme.COMPARATOR.compare(ph,ph));}}}"
"org.apache.commons.codec.language.bm.RuleTest.testSubSequenceWorks",0,"@Test public void testSubSequenceWorks(){Rule.Phoneme a=new Rule.Phoneme(""a"",null);Rule.Phoneme b=new Rule.Phoneme(""b"",null);Rule.Phoneme cd=new Rule.Phoneme(""cd"",null);Rule.Phoneme ef=new Rule.Phoneme(""ef"",null);Rule.Phoneme ghi=new Rule.Phoneme(""ghi"",null);Rule.Phoneme jkl=new Rule.Phoneme(""jkl"",null);assertEquals('a',a.getPhonemeText().charAt(0));assertEquals('b',b.getPhonemeText().charAt(0));assertEquals('c',cd.getPhonemeText().charAt(0));assertEquals('d',cd.getPhonemeText().charAt(1));assertEquals('e',ef.getPhonemeText().charAt(0));assertEquals('f',ef.getPhonemeText().charAt(1));assertEquals('g',ghi.getPhonemeText().charAt(0));assertEquals('h',ghi.getPhonemeText().charAt(1));assertEquals('i',ghi.getPhonemeText().charAt(2));assertEquals('j',jkl.getPhonemeText().charAt(0));assertEquals('k',jkl.getPhonemeText().charAt(1));assertEquals('l',jkl.getPhonemeText().charAt(2));Rule.Phoneme a_b=a.append(b.getPhonemeText());assertEquals('a',a_b.getPhonemeText().charAt(0));assertEquals('b',a_b.getPhonemeText().charAt(1));assertEquals(""ab"",a_b.getPhonemeText().subSequence(0,2).toString());assertEquals(""a"",a_b.getPhonemeText().subSequence(0,1).toString());assertEquals(""b"",a_b.getPhonemeText().subSequence(1,2).toString());Rule.Phoneme cd_ef=cd.append(ef.getPhonemeText());assertEquals('c',cd_ef.getPhonemeText().charAt(0));assertEquals('d',cd_ef.getPhonemeText().charAt(1));assertEquals('e',cd_ef.getPhonemeText().charAt(2));assertEquals('f',cd_ef.getPhonemeText().charAt(3));assertEquals(""c"",cd_ef.getPhonemeText().subSequence(0,1).toString());assertEquals(""d"",cd_ef.getPhonemeText().subSequence(1,2).toString());assertEquals(""e"",cd_ef.getPhonemeText().subSequence(2,3).toString());assertEquals(""f"",cd_ef.getPhonemeText().subSequence(3,4).toString());assertEquals(""cd"",cd_ef.getPhonemeText().subSequence(0,2).toString());assertEquals(""de"",cd_ef.getPhonemeText().subSequence(1,3).toString());assertEquals(""ef"",cd_ef.getPhonemeText().subSequence(2,4).toString());assertEquals(""cde"",cd_ef.getPhonemeText().subSequence(0,3).toString());assertEquals(""def"",cd_ef.getPhonemeText().subSequence(1,4).toString());assertEquals(""cdef"",cd_ef.getPhonemeText().subSequence(0,4).toString());Rule.Phoneme a_b_cd=a.append(b.getPhonemeText()).append(cd.getPhonemeText());assertEquals('a',a_b_cd.getPhonemeText().charAt(0));assertEquals('b',a_b_cd.getPhonemeText().charAt(1));assertEquals('c',a_b_cd.getPhonemeText().charAt(2));assertEquals('d',a_b_cd.getPhonemeText().charAt(3));assertEquals(""a"",a_b_cd.getPhonemeText().subSequence(0,1).toString());assertEquals(""b"",a_b_cd.getPhonemeText().subSequence(1,2).toString());assertEquals(""c"",a_b_cd.getPhonemeText().subSequence(2,3).toString());assertEquals(""d"",a_b_cd.getPhonemeText().subSequence(3,4).toString());assertEquals(""ab"",a_b_cd.getPhonemeText().subSequence(0,2).toString());assertEquals(""bc"",a_b_cd.getPhonemeText().subSequence(1,3).toString());assertEquals(""cd"",a_b_cd.getPhonemeText().subSequence(2,4).toString());assertEquals(""abc"",a_b_cd.getPhonemeText().subSequence(0,3).toString());assertEquals(""bcd"",a_b_cd.getPhonemeText().subSequence(1,4).toString());assertEquals(""abcd"",a_b_cd.getPhonemeText().subSequence(0,4).toString());}"
"org.apache.commons.codec.language.Caverphone1Test.testCaverphoneRevisitedCommonCodeAT1111",0,"/** * Tests example adapted from version 2.0  http://caversham.otago.ac.nz/files/working/ctp150804.pdf AT1111 words: add,aid,at,art,eat,earth,head,hit,hot,hold,hard,heart,it,out,old* @throws EncoderException*/@Test public void testCaverphoneRevisitedCommonCodeAT1111()throws EncoderException {this.checkEncodingVariations(""AT1111"",new String[]{""add"",""aid"",""at"",""art"",""eat"",""earth"",""head"",""hit"",""hot"",""hold"",""hard"",""heart"",""it"",""out"",""old""});}"
"org.apache.commons.codec.language.Caverphone1Test.testEndMb",0,"@Test public void testEndMb()throws EncoderException {String[][]data={{""mb"",""M11111""},{""mbmb"",""MPM111""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.Caverphone1Test.testIsCaverphoneEquals",0,"/** * Tests some examples from version 2.0 http://caversham.otago.ac.nz/files/working/ctp150804.pdf* @throws EncoderException*/@Test public void testIsCaverphoneEquals()throws EncoderException {Caverphone1 caverphone=new Caverphone1();Assert.assertFalse(""Caverphone encodings should not be equal"",caverphone.isEncodeEqual(""Peter"",""Stevenson""));Assert.assertTrue(""Caverphone encodings should be equal"",caverphone.isEncodeEqual(""Peter"",""Peady""));}"
"org.apache.commons.codec.language.Caverphone1Test.testSpecificationV1Examples",0,"/** * Tests example from http://caversham.otago.ac.nz/files/working/ctp060902.pdf* @throws EncoderException*/@Test public void testSpecificationV1Examples()throws EncoderException {String[][]data={{""David"",""TFT111""},{""Whittle"",""WTL111""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.Caverphone1Test.testWikipediaExamples",0,"/** * Tests examples from http://en.wikipedia.org/wiki/Caverphone* @throws EncoderException*/@Test public void testWikipediaExamples()throws EncoderException {String[][]data={{""Lee"",""L11111""},{""Thompson"",""TMPSN1""}};this.checkEncodings(data);}"
"org.apache.commons.codec.language.Caverphone1Test.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.Caverphone1Test.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.Caverphone1Test.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.Caverphone1Test.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.net.QCodecTest.testNullInput",0,"@Test public void testNullInput()throws Exception {QCodec qcodec=new QCodec();assertNull(qcodec.doDecoding(null));assertNull(qcodec.doEncoding(null));}"
"org.apache.commons.codec.net.QCodecTest.testUTF8RoundTrip",0,"@Test public void testUTF8RoundTrip()throws Exception {String ru_msg=constructString(RUSSIAN_STUFF_UNICODE);String ch_msg=constructString(SWISS_GERMAN_STUFF_UNICODE);QCodec qcodec=new QCodec(CharEncoding.UTF_8);assertEquals(""=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?="",qcodec.encode(ru_msg));assertEquals(""=?UTF-8?Q?Gr=C3=BCezi=5Fz=C3=A4m=C3=A4?="",qcodec.encode(ch_msg));assertEquals(ru_msg,qcodec.decode(qcodec.encode(ru_msg)));assertEquals(ch_msg,qcodec.decode(qcodec.encode(ch_msg)));}"
"org.apache.commons.codec.net.QCodecTest.testBasicEncodeDecode",0,"@Test public void testBasicEncodeDecode()throws Exception {QCodec qcodec=new QCodec();String plain=""= Hello there =\r\n"";String encoded=qcodec.encode(plain);assertEquals(""Basic Q encoding test"",""=?UTF-8?Q?=3D Hello there =3D=0D=0A?="",encoded);assertEquals(""Basic Q decoding test"",plain,qcodec.decode(encoded));}"
"org.apache.commons.codec.net.QCodecTest.testUnsafeEncodeDecode",0,"@Test public void testUnsafeEncodeDecode()throws Exception {QCodec qcodec=new QCodec();String plain=""?_=\r\n"";String encoded=qcodec.encode(plain);assertEquals(""Unsafe chars Q encoding test"",""=?UTF-8?Q?=3F=5F=3D=0D=0A?="",encoded);assertEquals(""Unsafe chars Q decoding test"",plain,qcodec.decode(encoded));}"
"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeNull",0,"@Test public void testEncodeDecodeNull()throws Exception {QCodec qcodec=new QCodec();assertNull(""Null string Q encoding test"",qcodec.encode((String)null));assertNull(""Null string Q decoding test"",qcodec.decode((String)null));}"
"org.apache.commons.codec.net.QCodecTest.testEncodeStringWithNull",0,"@Test public void testEncodeStringWithNull()throws Exception {QCodec qcodec=new QCodec();String test=null;String result=qcodec.encode(test,""charset"");assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QCodecTest.testDecodeStringWithNull",0,"@Test public void testDecodeStringWithNull()throws Exception {QCodec qcodec=new QCodec();String test=null;String result=qcodec.decode(test);assertEquals(""Result should be null"",null,result);}"
"org.apache.commons.codec.net.QCodecTest.testEncodeObjects",0,"@Test public void testEncodeObjects()throws Exception {QCodec qcodec=new QCodec();String plain=""1+1 = 2"";String encoded=(String)qcodec.encode((Object)plain);assertEquals(""Basic Q encoding test"",""=?UTF-8?Q?1+1 =3D 2?="",encoded);Object result=qcodec.encode((Object)null);assertEquals(""Encoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qcodec.encode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(EncoderException ee){}}"
"org.apache.commons.codec.net.QCodecTest.testInvalidEncoding",0,"@Test public void testInvalidEncoding(){QCodec qcodec=new QCodec(""NONSENSE"");try {qcodec.encode(""Hello there!"");fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(EncoderException ee){}try {qcodec.decode(""=?NONSENSE?Q?Hello there!?="");fail(""We set the encoding to a bogus NONSENSE vlaue,this shouldn't have worked."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QCodecTest.testDecodeObjects",0,"@Test public void testDecodeObjects()throws Exception {QCodec qcodec=new QCodec();String decoded=""=?UTF-8?Q?1+1 =3D 2?="";String plain=(String)qcodec.decode((Object)decoded);assertEquals(""Basic Q decoding test"",""1+1 = 2"",plain);Object result=qcodec.decode((Object)null);assertEquals(""Decoding a null Object should return null"",null,result);try {Object dObj=new Double(3.0);qcodec.decode(dObj);fail(""Trying to url encode a Double object should cause an exception."");}catch(DecoderException ee){}}"
"org.apache.commons.codec.net.QCodecTest.testEncodeDecodeBlanks",0,"@Test public void testEncodeDecodeBlanks()throws Exception {String plain=""Mind those pesky blanks"";String encoded1=""=?UTF-8?Q?Mind those pesky blanks?="";String encoded2=""=?UTF-8?Q?Mind_those_pesky_blanks?="";QCodec qcodec=new QCodec();qcodec.setEncodeBlanks(false);String s=qcodec.encode(plain);assertEquals(""Blanks encoding with the Q codec test"",encoded1,s);qcodec.setEncodeBlanks(true);s=qcodec.encode(plain);assertEquals(""Blanks encoding with the Q codec test"",encoded2,s);s=qcodec.decode(encoded1);assertEquals(""Blanks decoding with the Q codec test"",plain,s);s=qcodec.decode(encoded2);assertEquals(""Blanks decoding with the Q codec test"",plain,s);}"
"org.apache.commons.codec.net.QCodecTest.testLetUsMakeCloverHappy",0,"@Test public void testLetUsMakeCloverHappy()throws Exception {QCodec qcodec=new QCodec();qcodec.setEncodeBlanks(true);assertTrue(qcodec.isEncodeBlanks());qcodec.setEncodeBlanks(false);assertFalse(qcodec.isEncodeBlanks());}"
"org.apache.commons.codec.language.SoundexTest.testB650",0,"@Test public void testB650()throws EncoderException {this.checkEncodingVariations(""B650"",(new String[]{""BARHAM"",""BARONE"",""BARRON"",""BERNA"",""BIRNEY"",""BIRNIE"",""BOOROM"",""BOREN"",""BORN"",""BOURN"",""BOURNE"",""BOWRON"",""BRAIN"",""BRAME"",""BRANN"",""BRAUN"",""BREEN"",""BRIEN"",""BRIM"",""BRIMM"",""BRINN"",""BRION"",""BROOM"",""BROOME"",""BROWN"",""BROWNE"",""BRUEN"",""BRUHN"",""BRUIN"",""BRUMM"",""BRUN"",""BRUNO"",""BRYAN"",""BURIAN"",""BURN"",""BURNEY"",""BYRAM"",""BYRNE"",""BYRON"",""BYRUM""}));}"
"org.apache.commons.codec.language.SoundexTest.testBadCharacters",0,"@Test public void testBadCharacters(){Assert.assertEquals(""H452"",this.getSoundexEncoder().encode(""HOL>MES""));}"
"org.apache.commons.codec.language.SoundexTest.testDifference",0,"@Test public void testDifference()throws EncoderException {Assert.assertEquals(0,this.getSoundexEncoder().difference(null,null));Assert.assertEquals(0,this.getSoundexEncoder().difference("""",""""));Assert.assertEquals(0,this.getSoundexEncoder().difference("" "","" ""));Assert.assertEquals(4,this.getSoundexEncoder().difference(""Smith"",""Smythe""));Assert.assertEquals(2,this.getSoundexEncoder().difference(""Ann"",""Andrew""));Assert.assertEquals(1,this.getSoundexEncoder().difference(""Margaret"",""Andrew""));Assert.assertEquals(0,this.getSoundexEncoder().difference(""Janet"",""Margaret""));Assert.assertEquals(4,this.getSoundexEncoder().difference(""Green"",""Greene""));Assert.assertEquals(0,this.getSoundexEncoder().difference(""Blotchet-Halls"",""Greene""));Assert.assertEquals(4,this.getSoundexEncoder().difference(""Smith"",""Smythe""));Assert.assertEquals(4,this.getSoundexEncoder().difference(""Smithers"",""Smythers""));Assert.assertEquals(2,this.getSoundexEncoder().difference(""Anothers"",""Brothers""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBasic",0,"@Test public void testEncodeBasic(){Assert.assertEquals(""T235"",this.getSoundexEncoder().encode(""testing""));Assert.assertEquals(""T000"",this.getSoundexEncoder().encode(""The""));Assert.assertEquals(""Q200"",this.getSoundexEncoder().encode(""quick""));Assert.assertEquals(""B650"",this.getSoundexEncoder().encode(""brown""));Assert.assertEquals(""F200"",this.getSoundexEncoder().encode(""fox""));Assert.assertEquals(""J513"",this.getSoundexEncoder().encode(""jumped""));Assert.assertEquals(""O160"",this.getSoundexEncoder().encode(""over""));Assert.assertEquals(""T000"",this.getSoundexEncoder().encode(""the""));Assert.assertEquals(""L200"",this.getSoundexEncoder().encode(""lazy""));Assert.assertEquals(""D200"",this.getSoundexEncoder().encode(""dogs""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBatch2",0,"/** * Examples from http://www.bradandkathy.com/genealogy/overviewofsoundex.html*/@Test public void testEncodeBatch2(){Assert.assertEquals(""A462"",this.getSoundexEncoder().encode(""Allricht""));Assert.assertEquals(""E166"",this.getSoundexEncoder().encode(""Eberhard""));Assert.assertEquals(""E521"",this.getSoundexEncoder().encode(""Engebrethson""));Assert.assertEquals(""H512"",this.getSoundexEncoder().encode(""Heimbach""));Assert.assertEquals(""H524"",this.getSoundexEncoder().encode(""Hanselmann""));Assert.assertEquals(""H431"",this.getSoundexEncoder().encode(""Hildebrand""));Assert.assertEquals(""K152"",this.getSoundexEncoder().encode(""Kavanagh""));Assert.assertEquals(""L530"",this.getSoundexEncoder().encode(""Lind""));Assert.assertEquals(""L222"",this.getSoundexEncoder().encode(""Lukaschowsky""));Assert.assertEquals(""M235"",this.getSoundexEncoder().encode(""McDonnell""));Assert.assertEquals(""M200"",this.getSoundexEncoder().encode(""McGee""));Assert.assertEquals(""O155"",this.getSoundexEncoder().encode(""Opnian""));Assert.assertEquals(""O155"",this.getSoundexEncoder().encode(""Oppenheimer""));Assert.assertEquals(""R355"",this.getSoundexEncoder().encode(""Riedemanas""));Assert.assertEquals(""Z300"",this.getSoundexEncoder().encode(""Zita""));Assert.assertEquals(""Z325"",this.getSoundexEncoder().encode(""Zitzmeinn""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBatch3",0,"/** * Examples from http://www.archives.gov/research_room/genealogy/census/soundex.html*/@Test public void testEncodeBatch3(){Assert.assertEquals(""W252"",this.getSoundexEncoder().encode(""Washington""));Assert.assertEquals(""L000"",this.getSoundexEncoder().encode(""Lee""));Assert.assertEquals(""G362"",this.getSoundexEncoder().encode(""Gutierrez""));Assert.assertEquals(""P236"",this.getSoundexEncoder().encode(""Pfister""));Assert.assertEquals(""J250"",this.getSoundexEncoder().encode(""Jackson""));Assert.assertEquals(""T522"",this.getSoundexEncoder().encode(""Tymczak""));Assert.assertEquals(""V532"",this.getSoundexEncoder().encode(""VanDeusen""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeBatch4",0,"/** * Examples from: http://www.myatt.demon.co.uk/sxalg.htm*/@Test public void testEncodeBatch4(){Assert.assertEquals(""H452"",this.getSoundexEncoder().encode(""HOLMES""));Assert.assertEquals(""A355"",this.getSoundexEncoder().encode(""ADOMOMI""));Assert.assertEquals(""V536"",this.getSoundexEncoder().encode(""VONDERLEHR""));Assert.assertEquals(""B400"",this.getSoundexEncoder().encode(""BALL""));Assert.assertEquals(""S000"",this.getSoundexEncoder().encode(""SHAW""));Assert.assertEquals(""J250"",this.getSoundexEncoder().encode(""JACKSON""));Assert.assertEquals(""S545"",this.getSoundexEncoder().encode(""SCANLON""));Assert.assertEquals(""S532"",this.getSoundexEncoder().encode(""SAINTJOHN""));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreApostrophes",0,"@Test public void testEncodeIgnoreApostrophes()throws EncoderException {this.checkEncodingVariations(""O165"",(new String[]{""OBrien"",""'OBrien"",""O'Brien"",""OB'rien"",""OBr'ien"",""OBri'en"",""OBrie'n"",""OBrien'""}));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreHyphens",0,"/** * Test data from http://www.myatt.demon.co.uk/sxalg.htm* @throws EncoderException*/@Test public void testEncodeIgnoreHyphens()throws EncoderException {this.checkEncodingVariations(""K525"",(new String[]{""KINGSMITH"",""-KINGSMITH"",""K-INGSMITH"",""KI-NGSMITH"",""KIN-GSMITH"",""KING-SMITH"",""KINGS-MITH"",""KINGSM-ITH"",""KINGSMI-TH"",""KINGSMIT-H"",""KINGSMITH-""}));}"
"org.apache.commons.codec.language.SoundexTest.testEncodeIgnoreTrimmable",0,"@Test public void testEncodeIgnoreTrimmable(){Assert.assertEquals(""W252"",this.getSoundexEncoder().encode("" \t\n\r Washington \t\n\r ""));}"
"org.apache.commons.codec.language.SoundexTest.testHWRuleEx1",0,"/** * Consonants from the same code group separated by W or H are treated as one.*/@Test public void testHWRuleEx1(){Assert.assertEquals(""A261"",this.getSoundexEncoder().encode(""Ashcraft""));}"
"org.apache.commons.codec.language.SoundexTest.testHWRuleEx2",0,"/** * Consonants from the same code group separated by W or H are treated as one. Test data from http://www.myatt.demon.co.uk/sxalg.htm*/@Test public void testHWRuleEx2(){Assert.assertEquals(""B312"",this.getSoundexEncoder().encode(""BOOTHDAVIS""));Assert.assertEquals(""B312"",this.getSoundexEncoder().encode(""BOOTH-DAVIS""));}"
"org.apache.commons.codec.language.SoundexTest.testHWRuleEx3",0,"/** * Consonants from the same code group separated by W or H are treated as one.* @throws EncoderException*/@Test public void testHWRuleEx3()throws EncoderException {Assert.assertEquals(""S460"",this.getSoundexEncoder().encode(""Sgler""));Assert.assertEquals(""S460"",this.getSoundexEncoder().encode(""Swhgler""));this.checkEncodingVariations(""S460"",(new String[]{""SAILOR"",""SALYER"",""SAYLOR"",""SCHALLER"",""SCHELLER"",""SCHILLER"",""SCHOOLER"",""SCHULER"",""SCHUYLER"",""SEILER"",""SEYLER"",""SHOLAR"",""SHULER"",""SILAR"",""SILER"",""SILLER""}));}"
"org.apache.commons.codec.language.SoundexTest.testMsSqlServer1",0,"/** * Examples for MS SQLServer from http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp*/@Test public void testMsSqlServer1(){Assert.assertEquals(""S530"",this.getSoundexEncoder().encode(""Smith""));Assert.assertEquals(""S530"",this.getSoundexEncoder().encode(""Smythe""));}"
"org.apache.commons.codec.language.SoundexTest.testMsSqlServer2",0,"/** * Examples for MS SQLServer from http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support /kb/articles/Q100/3/65.asp&NoWebContent=1* @throws EncoderException*/@Test public void testMsSqlServer2()throws EncoderException {this.checkEncodingVariations(""E625"",(new String[]{""Erickson"",""Erickson"",""Erikson"",""Ericson"",""Ericksen"",""Ericsen""}));}"
"org.apache.commons.codec.language.SoundexTest.testMsSqlServer3",0,"/** * Examples for MS SQLServer from http://databases.about.com/library/weekly/aa042901a.htm*/@Test public void testMsSqlServer3(){Assert.assertEquals(""A500"",this.getSoundexEncoder().encode(""Ann""));Assert.assertEquals(""A536"",this.getSoundexEncoder().encode(""Andrew""));Assert.assertEquals(""J530"",this.getSoundexEncoder().encode(""Janet""));Assert.assertEquals(""M626"",this.getSoundexEncoder().encode(""Margaret""));Assert.assertEquals(""S315"",this.getSoundexEncoder().encode(""Steven""));Assert.assertEquals(""M240"",this.getSoundexEncoder().encode(""Michael""));Assert.assertEquals(""R163"",this.getSoundexEncoder().encode(""Robert""));Assert.assertEquals(""L600"",this.getSoundexEncoder().encode(""Laura""));Assert.assertEquals(""A500"",this.getSoundexEncoder().encode(""Anne""));}"
"org.apache.commons.codec.language.SoundexTest.testNewInstance",0,"/** * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56*/@Test public void testNewInstance(){Assert.assertEquals(""W452"",new Soundex().soundex(""Williams""));}"
"org.apache.commons.codec.language.SoundexTest.testNewInstance2",0,"@Test public void testNewInstance2(){Assert.assertEquals(""W452"",new Soundex(Soundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(""Williams""));}"
"org.apache.commons.codec.language.SoundexTest.testNewInstance3",0,"@Test public void testNewInstance3(){Assert.assertEquals(""W452"",new Soundex(Soundex.US_ENGLISH_MAPPING_STRING).soundex(""Williams""));}"
"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsConstructable",0,"@Test public void testSoundexUtilsConstructable(){new SoundexUtils();}"
"org.apache.commons.codec.language.SoundexTest.testSoundexUtilsNullBehaviour",0,"@Test public void testSoundexUtilsNullBehaviour(){Assert.assertEquals(null,SoundexUtils.clean(null));Assert.assertEquals("""",SoundexUtils.clean(""""));Assert.assertEquals(0,SoundexUtils.differenceEncoded(null,""""));Assert.assertEquals(0,SoundexUtils.differenceEncoded("""",null));}"
"org.apache.commons.codec.language.SoundexTest.testUsEnglishStatic",0,"/** * https://issues.apache.org/jira/browse/CODEC-54 https://issues.apache.org/jira/browse/CODEC-56*/@Test public void testUsEnglishStatic(){Assert.assertEquals(""W452"",Soundex.US_ENGLISH.soundex(""Williams""));}"
"org.apache.commons.codec.language.SoundexTest.testUsMappingEWithAcute",0,"/** * Fancy characters are not mapped by the default US mapping. http://issues.apache.org/bugzilla/show_bug.cgi?id=29080*/@Test public void testUsMappingEWithAcute(){Assert.assertEquals(""E000"",this.getSoundexEncoder().encode(""e""));if (Character.isLetter('\u00e9')){try {Assert.assertEquals(""\u00c9000"",this.getSoundexEncoder().encode(""\u00e9""));Assert.fail(""Expected IllegalArgumentException not thrown"");}catch(IllegalArgumentException e){}}else {Assert.assertEquals("""",this.getSoundexEncoder().encode(""\u00e9""));}}"
"org.apache.commons.codec.language.SoundexTest.testUsMappingOWithDiaeresis",0,"/** * Fancy characters are not mapped by the default US mapping. http://issues.apache.org/bugzilla/show_bug.cgi?id=29080*/@Test public void testUsMappingOWithDiaeresis(){Assert.assertEquals(""O000"",this.getSoundexEncoder().encode(""o""));if (Character.isLetter('\u00f6')){try {Assert.assertEquals(""\u00d6000"",this.getSoundexEncoder().encode(""\u00f6""));Assert.fail(""Expected IllegalArgumentException not thrown"");}catch(IllegalArgumentException e){}}else {Assert.assertEquals("""",this.getSoundexEncoder().encode(""\u00f6""));}}"
"org.apache.commons.codec.language.SoundexTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.SoundexTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.SoundexTest.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.SoundexTest.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneEqualTest",0,"public void doubleMetaphoneEqualTest(String[][]pairs,boolean useAlternate){this.validateFixture(pairs);for(String[]pair : pairs){String name0=pair[0];String name1=pair[1];String failMsg=""Expected match between "" + name0 + "" and ""+ name1+ "" (use alternate: ""+ useAlternate+ "")"";assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,useAlternate));assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1,name0,useAlternate));if (!useAlternate){assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1));assertTrue(failMsg,this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1,name0));}}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.doubleMetaphoneNotEqualTest",0,"public void doubleMetaphoneNotEqualTest(boolean alternate){assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Brain"",""Band"",alternate));assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Band"",""Brain"",alternate));if (!alternate){assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Brain"",""Band""));assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""Band"",""Brain""));}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testDoubleMetaphone",0,"@Test public void testDoubleMetaphone(){assertDoubleMetaphone(""TSTN"",""testing"");assertDoubleMetaphone(""0"",""The"");assertDoubleMetaphone(""KK"",""quick"");assertDoubleMetaphone(""PRN"",""brown"");assertDoubleMetaphone(""FKS"",""fox"");assertDoubleMetaphone(""JMPT"",""jumped"");assertDoubleMetaphone(""AFR"",""over"");assertDoubleMetaphone(""0"",""the"");assertDoubleMetaphone(""LS"",""lazy"");assertDoubleMetaphone(""TKS"",""dogs"");assertDoubleMetaphone(""MKFR"",""MacCafferey"");assertDoubleMetaphone(""STFN"",""Stephan"");assertDoubleMetaphone(""KSSK"",""Kuczewski"");assertDoubleMetaphone(""MKLL"",""McClelland"");assertDoubleMetaphone(""SNHS"",""san jose"");assertDoubleMetaphone(""SNFP"",""xenophobia"");assertDoubleMetaphoneAlt(""TSTN"",""testing"");assertDoubleMetaphoneAlt(""T"",""The"");assertDoubleMetaphoneAlt(""KK"",""quick"");assertDoubleMetaphoneAlt(""PRN"",""brown"");assertDoubleMetaphoneAlt(""FKS"",""fox"");assertDoubleMetaphoneAlt(""AMPT"",""jumped"");assertDoubleMetaphoneAlt(""AFR"",""over"");assertDoubleMetaphoneAlt(""T"",""the"");assertDoubleMetaphoneAlt(""LS"",""lazy"");assertDoubleMetaphoneAlt(""TKS"",""dogs"");assertDoubleMetaphoneAlt(""MKFR"",""MacCafferey"");assertDoubleMetaphoneAlt(""STFN"",""Stephan"");assertDoubleMetaphoneAlt(""KXFS"",""Kutchefski"");assertDoubleMetaphoneAlt(""MKLL"",""McClelland"");assertDoubleMetaphoneAlt(""SNHS"",""san jose"");assertDoubleMetaphoneAlt(""SNFP"",""xenophobia"");assertDoubleMetaphoneAlt(""FKR"",""Fokker"");assertDoubleMetaphoneAlt(""AK"",""Joqqi"");assertDoubleMetaphoneAlt(""HF"",""Hovvi"");assertDoubleMetaphoneAlt(""XRN"",""Czerny"");}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEmpty",0,"@Test public void testEmpty(){assertEquals(null,this.getDoubleMetaphone().doubleMetaphone(null));assertEquals(null,this.getDoubleMetaphone().doubleMetaphone(""""));assertEquals(null,this.getDoubleMetaphone().doubleMetaphone("" ""));assertEquals(null,this.getDoubleMetaphone().doubleMetaphone(""\t\n\r ""));}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testSetMaxCodeLength",0,"/** * Test setting maximum length*/@Test public void testSetMaxCodeLength(){String value=""jumped"";DoubleMetaphone doubleMetaphone=new DoubleMetaphone();assertEquals(""Default Max Code Length"",4,doubleMetaphone.getMaxCodeLen());assertEquals(""Default Primary"",""JMPT"",doubleMetaphone.doubleMetaphone(value,false));assertEquals(""Default Alternate"",""AMPT"",doubleMetaphone.doubleMetaphone(value,true));doubleMetaphone.setMaxCodeLen(3);assertEquals(""Set Max Code Length"",3,doubleMetaphone.getMaxCodeLen());assertEquals(""Max=3 Primary"",""JMP"",doubleMetaphone.doubleMetaphone(value,false));assertEquals(""Max=3 Alternate"",""AMP"",doubleMetaphone.doubleMetaphone(value,true));}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualBasic",0,"@Test public void testIsDoubleMetaphoneEqualBasic(){String[][]testFixture=new String[][]{{""Case"",""case""},{""CASE"",""Case""},{""caSe"",""cAsE""},{""cookie"",""quick""},{""quick"",""cookie""},{""Brian"",""Bryan""},{""Auto"",""Otto""},{""Steven"",""Stefan""},{""Philipowitz"",""Filipowicz""}};doubleMetaphoneEqualTest(testFixture,false);doubleMetaphoneEqualTest(testFixture,true);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended1",0,"/** * Example in the original article but failures in this Java impl:*/@Test public void testIsDoubleMetaphoneEqualExtended1(){}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended2",0,"@Test public void testIsDoubleMetaphoneEqualExtended2(){String[][]testFixture=new String[][]{{""Jablonski"",""Yablonsky""}};doubleMetaphoneEqualTest(testFixture,true);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualExtended3",0,"/** * Used to generate the MATCHES array and test possible matches from the FIXTURE array.*/@Test public void testIsDoubleMetaphoneEqualExtended3(){this.validateFixture(FIXTURE);StringBuffer failures=new StringBuffer();StringBuffer matches=new StringBuffer();String cr=System.getProperty(""line.separator"");matches.append(""private static final String[][]MATCHES = {"" + cr);int failCount=0;for (int i=0;i < FIXTURE.length;i++){String name0=FIXTURE[i][0];String name1=FIXTURE[i][1];boolean match1=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,false);boolean match2=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,true);if (match1 == false && match2 == false){String failMsg=""["" + i + ""]""+ name0+ "" and ""+ name1+ cr;failures.append(failMsg);failCount++;}else {matches.append(""{\"""" + name0 + ""\"",\""""+ name1+ ""\""},""+ cr);}}String msg=failures.toString();matches.append(""};"");if (msg.length()> 0){}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneEqualWithMATCHES",0,"@Test public void testIsDoubleMetaphoneEqualWithMATCHES(){this.validateFixture(MATCHES);for (int i=0;i < MATCHES.length;i++){String name0=MATCHES[i][0];String name1=MATCHES[i][1];boolean match1=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,false);boolean match2=this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0,name1,true);if (match1 == false && match2 == false){fail(""Expected match ["" + i + ""]""+ name0+ "" and ""+ name1);}}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testIsDoubleMetaphoneNotEqual",0,"@Test public void testIsDoubleMetaphoneNotEqual(){doubleMetaphoneNotEqualTest(false);doubleMetaphoneNotEqualTest(true);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testCCedilla",0,"@Test public void testCCedilla(){assertTrue(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""\u00e7"",""S""));}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testNTilde",0,"@Test public void testNTilde(){assertTrue(this.getDoubleMetaphone().isDoubleMetaphoneEqual(""\u00f1"",""N""));}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.DoubleMetaphoneTest.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithSoundex",0,"@Test public void testComparatorWithSoundex()throws Exception {StringEncoderComparator sCompare=new StringEncoderComparator(new Soundex());assertTrue(""O'Brien and O'Brian didn't come out with "" + ""the same Soundex,something must be wrong here"",0 == sCompare.compare(""O'Brien"",""O'Brian""));}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphone",0,"@Test public void testComparatorWithDoubleMetaphone()throws Exception {StringEncoderComparator sCompare=new StringEncoderComparator(new DoubleMetaphone());String[]testArray={""Jordan"",""Sosa"",""Prior"",""Pryor""};List<String> testList=Arrays.asList(testArray);String[]controlArray={""Jordan"",""Prior"",""Pryor"",""Sosa""};Collections.sort(testList,sCompare);String[]resultArray=testList.toArray(new String[0]);for (int i=0;i < resultArray.length;i++){assertEquals(""Result Array not Equal to Control Array at index: "" + i,controlArray[i],resultArray[i]);}}"
"org.apache.commons.codec.StringEncoderComparatorTest.testComparatorWithDoubleMetaphoneAndInvalidInput",0,"@Test public void testComparatorWithDoubleMetaphoneAndInvalidInput()throws Exception {StringEncoderComparator sCompare=new StringEncoderComparator(new DoubleMetaphone());int compare=sCompare.compare(new Double(3.0),Long.valueOf(3));assertEquals(""Trying to compare objects that make no sense to the underlying encoder should return a zero compare code"",0,compare);}"
"org.apache.commons.codec.net.UtilsTest.testConstructor",0,"/** * We could make the constructor private but there does not seem to be a point to jumping through extra code hoops to restrict instantiation right now.*/@Test public void testConstructor(){new Utils();}"
"org.apache.commons.codec.binary.Base64Codec13Test.testEncoder",0,"/** * Tests to make sure Base64's implementation of the org.apache.commons.codec.Encoder interface is behaving identical to commons-codec-1.3.jar.* @throws EncoderException problem*/@Test public void testEncoder()throws EncoderException {Encoder enc=new Base64();for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64=utf8(STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(base64,(byte[])enc.encode(binary));assertTrue(""Encoder test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testDecoder",0,"/** * Tests to make sure Base64's implementation of the org.apache.commons.codec.Decoder interface is behaving identical to commons-codec-1.3.jar.* @throws DecoderException problem*/@Test public void testDecoder()throws DecoderException {Decoder dec=new Base64();for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64=utf8(STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(binary,(byte[])dec.decode(base64));assertTrue(""Decoder test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryEncoder",0,"/** * Tests to make sure Base64's implementation of the org.apache.commons.codec.BinaryEncoder interface is behaving identical to commons-codec-1.3.jar.* @throws EncoderException problem*/@Test public void testBinaryEncoder()throws EncoderException {BinaryEncoder enc=new Base64();for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64=utf8(STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(base64,enc.encode(binary));assertTrue(""BinaryEncoder test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testBinaryDecoder",0,"/** * Tests to make sure Base64's implementation of the org.apache.commons.codec.BinaryDecoder interface is behaving identical to commons-codec-1.3.jar.* @throws DecoderException problem*/@Test public void testBinaryDecoder()throws DecoderException {BinaryDecoder dec=new Base64();for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64=utf8(STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(binary,dec.decode(base64));assertTrue(""BinaryDecoder test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncode",0,"/** * Tests to make sure Base64's implementation of Base64.encodeBase64()static method is behaving identical to commons-codec-1.3.jar.* @throws EncoderException problem*/@Test public void testStaticEncode()throws EncoderException {for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64=utf8(STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(base64,Base64.encodeBase64(binary));assertTrue(""static Base64.encodeBase64()test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecode",0,"/** * Tests to make sure Base64's implementation of Base64.decodeBase64()static method is behaving identical to commons-codec-1.3.jar.* @throws DecoderException problem*/@Test public void testStaticDecode()throws DecoderException {for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64=utf8(STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(binary,Base64.decodeBase64(base64));assertTrue(""static Base64.decodeBase64()test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testStaticEncodeChunked",0,"/** * Tests to make sure Base64's implementation of Base64.encodeBase64Chunked()static method is behaving identical to commons-codec-1.3.jar.* @throws EncoderException problem*/@Test public void testStaticEncodeChunked()throws EncoderException {for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64Chunked=utf8(CHUNKED_STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(base64Chunked,Base64.encodeBase64Chunked(binary));assertTrue(""static Base64.encodeBase64Chunked()test-"" + i,b);}}}"
"org.apache.commons.codec.binary.Base64Codec13Test.testStaticDecodeChunked",0,"/** * Tests to make sure Base64's implementation of Base64.decodeBase64()static method is behaving identical to commons-codec-1.3.jar when supplied with chunked input.* @throws DecoderException problem*/@Test public void testStaticDecodeChunked()throws DecoderException {for (int i=0;i < STRINGS.length;i++){if (STRINGS[i]!= null){byte[]base64Chunked=utf8(CHUNKED_STRINGS[i]);byte[]binary=BYTES[i];boolean b=Arrays.equals(binary,Base64.decodeBase64(base64Chunked));assertTrue(""static Base64.decodeBase64Chunked()test-"" + i,b);}}}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual1",0,"@Test public void testIsMetaphoneEqual1(){this.assertMetaphoneEqual(new String[][]{{""Case"",""case""},{""CASE"",""Case""},{""caSe"",""cAsE""},{""quick"",""cookie""}});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqual2",0,"/** * Matches computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqual2(){this.assertMetaphoneEqual(new String[][]{{""Lawrence"",""Lorenza""},{""Gary"",""Cahra""}});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAero",0,"/** * Initial AE case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualAero(){this.assertIsMetaphoneEqual(""Aero"",new String[]{""Eure""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWhite",0,"/** * Initial WH case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualWhite(){this.assertIsMetaphoneEqual(""White"",new String[]{""Wade"",""Wait"",""Waite"",""Wat"",""Whit"",""Wiatt"",""Wit"",""Wittie"",""Witty"",""Wood"",""Woodie"",""Woody""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualAlbert",0,"/** * Initial A,not followed by an E case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualAlbert(){this.assertIsMetaphoneEqual(""Albert"",new String[]{""Ailbert"",""Alberik"",""Albert"",""Alberto"",""Albrecht""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualGary",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualGary(){this.assertIsMetaphoneEqual(""Gary"",new String[]{""Cahra"",""Cara"",""Carey"",""Cari"",""Caria"",""Carie"",""Caro"",""Carree"",""Carri"",""Carrie"",""Carry"",""Cary"",""Cora"",""Corey"",""Cori"",""Corie"",""Correy"",""Corri"",""Corrie"",""Corry"",""Cory"",""Gray"",""Kara"",""Kare"",""Karee"",""Kari"",""Karia"",""Karie"",""Karrah"",""Karrie"",""Karry"",""Kary"",""Keri"",""Kerri"",""Kerrie"",""Kerry"",""Kira"",""Kiri"",""Kora"",""Kore"",""Kori"",""Korie"",""Korrie"",""Korry""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualJohn",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualJohn(){this.assertIsMetaphoneEqual(""John"",new String[]{""Gena"",""Gene"",""Genia"",""Genna"",""Genni"",""Gennie"",""Genny"",""Giana"",""Gianna"",""Gina"",""Ginni"",""Ginnie"",""Ginny"",""Jaine"",""Jan"",""Jana"",""Jane"",""Janey"",""Jania"",""Janie"",""Janna"",""Jany"",""Jayne"",""Jean"",""Jeana"",""Jeane"",""Jeanie"",""Jeanna"",""Jeanne"",""Jeannie"",""Jen"",""Jena"",""Jeni"",""Jenn"",""Jenna"",""Jennee"",""Jenni"",""Jennie"",""Jenny"",""Jinny"",""Jo Ann"",""Jo-Ann"",""Jo-Anne"",""Joan"",""Joana"",""Joane"",""Joanie"",""Joann"",""Joanna"",""Joanne"",""Joeann"",""Johna"",""Johnna"",""Joni"",""Jonie"",""Juana"",""June"",""Junia"",""Junie""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualKnight",0,"/** * Initial KN case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualKnight(){this.assertIsMetaphoneEqual(""Knight"",new String[]{""Hynda"",""Nada"",""Nadia"",""Nady"",""Nat"",""Nata"",""Natty"",""Neda"",""Nedda"",""Nedi"",""Netta"",""Netti"",""Nettie"",""Netty"",""Nita"",""Nydia""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualMary",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualMary(){this.assertIsMetaphoneEqual(""Mary"",new String[]{""Mair"",""Maire"",""Mara"",""Mareah"",""Mari"",""Maria"",""Marie"",""Mary"",""Maura"",""Maure"",""Meara"",""Merrie"",""Merry"",""Mira"",""Moira"",""Mora"",""Moria"",""Moyra"",""Muire"",""Myra"",""Myrah""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualParis",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualParis(){this.assertIsMetaphoneEqual(""Paris"",new String[]{""Pearcy"",""Perris"",""Piercy"",""Pierz"",""Pryse""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualPeter",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualPeter(){this.assertIsMetaphoneEqual(""Peter"",new String[]{""Peadar"",""Peder"",""Pedro"",""Peter"",""Petr"",""Peyter"",""Pieter"",""Pietro"",""Piotr""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualRay",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualRay(){this.assertIsMetaphoneEqual(""Ray"",new String[]{""Ray"",""Rey"",""Roi"",""Roy"",""Ruy""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualSusan",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualSusan(){this.assertIsMetaphoneEqual(""Susan"",new String[]{""Siusan"",""Sosanna"",""Susan"",""Susana"",""Susann"",""Susanna"",""Susannah"",""Susanne"",""Suzann"",""Suzanna"",""Suzanne"",""Zuzana""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualWright",0,"/** * Initial WR case. Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualWright(){this.assertIsMetaphoneEqual(""Wright"",new String[]{""Rota"",""Rudd"",""Ryde""});}"
"org.apache.commons.codec.language.MetaphoneTest.testIsMetaphoneEqualXalan",0,"/** * Match data computed from http://www.lanw.com/java/phonetic/default.htm*/@Test public void testIsMetaphoneEqualXalan(){this.assertIsMetaphoneEqual(""Xalan"",new String[]{""Celene"",""Celina"",""Celine"",""Selena"",""Selene"",""Selina"",""Seline"",""Suellen"",""Xylina""});}"
"org.apache.commons.codec.language.MetaphoneTest.testMetaphone",0,"@Test public void testMetaphone(){assertEquals(""HL"",this.getMetaphone().metaphone(""howl""));assertEquals(""TSTN"",this.getMetaphone().metaphone(""testing""));assertEquals(""0"",this.getMetaphone().metaphone(""The""));assertEquals(""KK"",this.getMetaphone().metaphone(""quick""));assertEquals(""BRN"",this.getMetaphone().metaphone(""brown""));assertEquals(""FKS"",this.getMetaphone().metaphone(""fox""));assertEquals(""JMPT"",this.getMetaphone().metaphone(""jumped""));assertEquals(""OFR"",this.getMetaphone().metaphone(""over""));assertEquals(""0"",this.getMetaphone().metaphone(""the""));assertEquals(""LS"",this.getMetaphone().metaphone(""lazy""));assertEquals(""TKS"",this.getMetaphone().metaphone(""dogs""));}"
"org.apache.commons.codec.language.MetaphoneTest.testWordEndingInMB",0,"@Test public void testWordEndingInMB(){assertEquals(""KM"",this.getMetaphone().metaphone(""COMB""));assertEquals(""TM"",this.getMetaphone().metaphone(""TOMB""));assertEquals(""WM"",this.getMetaphone().metaphone(""WOMB""));}"
"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSCEOrSCIOrSCY",0,"@Test public void testDiscardOfSCEOrSCIOrSCY(){assertEquals(""SNS"",this.getMetaphone().metaphone(""SCIENCE""));assertEquals(""SN"",this.getMetaphone().metaphone(""SCENE""));assertEquals(""S"",this.getMetaphone().metaphone(""SCY""));}"
"org.apache.commons.codec.language.MetaphoneTest.testWhy",0,"/** * Tests (CODEC-57)Metaphone.metaphone(String)returns an empty string when passed the word ""why""*/@Test public void testWhy(){assertEquals("""",this.getMetaphone().metaphone(""WHY""));}"
"org.apache.commons.codec.language.MetaphoneTest.testWordsWithCIA",0,"@Test public void testWordsWithCIA(){assertEquals(""XP"",this.getMetaphone().metaphone(""CIAPO""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTranslateOfSCHAndCH",0,"@Test public void testTranslateOfSCHAndCH(){assertEquals(""SKTL"",this.getMetaphone().metaphone(""SCHEDULE""));assertEquals(""SKMT"",this.getMetaphone().metaphone(""SCHEMATIC""));assertEquals(""KRKT"",this.getMetaphone().metaphone(""CHARACTER""));assertEquals(""TX"",this.getMetaphone().metaphone(""TEACH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTranslateToJOfDGEOrDGIOrDGY",0,"@Test public void testTranslateToJOfDGEOrDGIOrDGY(){assertEquals(""TJ"",this.getMetaphone().metaphone(""DODGY""));assertEquals(""TJ"",this.getMetaphone().metaphone(""DODGE""));assertEquals(""AJMT"",this.getMetaphone().metaphone(""ADGIEMTI""));}"
"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentHAfterG",0,"@Test public void testDiscardOfSilentHAfterG(){assertEquals(""KNT"",this.getMetaphone().metaphone(""GHENT""));assertEquals(""B"",this.getMetaphone().metaphone(""BAUGH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testDiscardOfSilentGN",0,"@Test public void testDiscardOfSilentGN(){assertEquals(""N"",this.getMetaphone().metaphone(""GNU""));assertEquals(""SNT"",this.getMetaphone().metaphone(""SIGNED""));}"
"org.apache.commons.codec.language.MetaphoneTest.testPHTOF",0,"@Test public void testPHTOF(){assertEquals(""FX"",this.getMetaphone().metaphone(""PHISH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testSHAndSIOAndSIAToX",0,"@Test public void testSHAndSIOAndSIAToX(){assertEquals(""XT"",this.getMetaphone().metaphone(""SHOT""));assertEquals(""OTXN"",this.getMetaphone().metaphone(""ODSIAN""));assertEquals(""PLXN"",this.getMetaphone().metaphone(""PULSION""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTIOAndTIAToX",0,"@Test public void testTIOAndTIAToX(){assertEquals(""OX"",this.getMetaphone().metaphone(""OTIA""));assertEquals(""PRXN"",this.getMetaphone().metaphone(""PORTION""));}"
"org.apache.commons.codec.language.MetaphoneTest.testTCH",0,"@Test public void testTCH(){assertEquals(""RX"",this.getMetaphone().metaphone(""RETCH""));assertEquals(""WX"",this.getMetaphone().metaphone(""WATCH""));}"
"org.apache.commons.codec.language.MetaphoneTest.testExceedLength",0,"@Test public void testExceedLength(){assertEquals(""AKSK"",this.getMetaphone().metaphone(""AXEAXE""));}"
"org.apache.commons.codec.language.MetaphoneTest.testSetMaxLengthWithTruncation",0,"@Test public void testSetMaxLengthWithTruncation(){this.getMetaphone().setMaxCodeLen(6);assertEquals(""AKSKSK"",this.getMetaphone().metaphone(""AXEAXEAXE""));}"
"org.apache.commons.codec.language.MetaphoneTest.testEncodeEmpty",0,"@Test public void testEncodeEmpty()throws Exception {Encoder encoder=this.getStringEncoder();encoder.encode("""");encoder.encode("" "");encoder.encode(""\t"");}"
"org.apache.commons.codec.language.MetaphoneTest.testEncodeNull",0,"@Test public void testEncodeNull()throws Exception {StringEncoder encoder=this.getStringEncoder();try {encoder.encode(null);}catch(EncoderException ee){}}"
"org.apache.commons.codec.language.MetaphoneTest.testEncodeWithInvalidObject",0,"@Test public void testEncodeWithInvalidObject()throws Exception {boolean exceptionThrown=false;try {StringEncoder encoder=this.getStringEncoder();encoder.encode(new Float(3.4));}catch(Exception e){exceptionThrown=true;}Assert.assertTrue(""An exception was not thrown when we tried to encode "" + ""a Float object"",exceptionThrown);}"
"org.apache.commons.codec.language.MetaphoneTest.testLocaleIndependence",0,"@Test public void testLocaleIndependence()throws Exception {StringEncoder encoder=this.getStringEncoder();String[]data={""I"",""i""};Locale orig=Locale.getDefault();Locale[]locales={Locale.ENGLISH,new Locale(""tr""),Locale.getDefault()};try {for(String element : data){String ref=null;for (int j=0;j < locales.length;j++){Locale.setDefault(locales[j]);if (j <= 0){ref=encoder.encode(element);}else {String cur=null;try {cur=encoder.encode(element);}catch(Exception e){Assert.fail(Locale.getDefault().toString()+ "": "" + e.getMessage());}Assert.assertEquals(Locale.getDefault().toString()+ "": "",ref,cur);}}}}finally {Locale.setDefault(orig);}}"
