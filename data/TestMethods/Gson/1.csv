test_case,faulty,test_code
"com.google.gson.LowerCamelCaseSeparatorNamingPolicyTest.testNameBeginsWithLowerCase",0,"public void testNameBeginsWithLowerCase()throws Exception {String translatedName=namingPolicy.translateName(""testNameBeginsWithLower"",CLASS,null);assertEquals(""test_name_begins_with_lower"",translatedName);}"
"com.google.gson.LowerCamelCaseSeparatorNamingPolicyTest.testNameBeginsWithUpperCase",0,"public void testNameBeginsWithUpperCase()throws Exception {String translatedName=namingPolicy.translateName(""TestNameBeginsWithUpper"",CLASS,null);assertEquals(""test_name_begins_with_upper"",translatedName);}"
"com.google.gson.LowerCamelCaseSeparatorNamingPolicyTest.testExceptionPossiblyIncorrectSeparation",0,"public void testExceptionPossiblyIncorrectSeparation()throws Exception {String translatedName=namingPolicy.translateName(""aURL"",CLASS,null);assertEquals(""a_u_r_l"",translatedName);}"
"com.google.gson.LowerCamelCaseSeparatorNamingPolicyTest.testUsingDashesInstead",0,"public void testUsingDashesInstead()throws Exception {namingPolicy=new LowerCamelCaseSeparatorNamingPolicy(""-"");String translatedName=namingPolicy.translateName(""testUsingDashesInstead"",CLASS,null);assertEquals(""test-using-dashes-instead"",translatedName);}"
"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface",0,"public void testSerializingObjectImplementingInterface()throws Exception {assertEquals(OBJ_JSON,gson.toJson(obj));}"
"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField",0,"public void testSerializingInterfaceObjectField()throws Exception {TestObjectWrapper objWrapper=new TestObjectWrapper(obj);assertEquals(""{\""obj\"":"" + OBJ_JSON + ""}"",gson.toJson(objWrapper));}"
"com.google.gson.functional.JsonTreeTest.testToJsonTree",0,"public void testToJsonTree(){BagOfPrimitives bag=new BagOfPrimitives(10L,5,false,""foo"");JsonElement json=gson.toJsonTree(bag);assertTrue(json.isJsonObject());JsonObject obj=json.getAsJsonObject();Set<Entry<String,JsonElement>> children=obj.entrySet();assertEquals(4,children.size());assertContains(obj,new JsonPrimitive(10L));assertContains(obj,new JsonPrimitive(5));assertContains(obj,new JsonPrimitive(false));assertContains(obj,new JsonPrimitive(""foo""));}"
"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType",0,"public void testToJsonTreeObjectType(){SubTypeOfBagOfPrimitives bag=new SubTypeOfBagOfPrimitives(10L,5,false,""foo"",1.4F);JsonElement json=gson.toJsonTree(bag,BagOfPrimitives.class);assertTrue(json.isJsonObject());JsonObject obj=json.getAsJsonObject();Set<Entry<String,JsonElement>> children=obj.entrySet();assertEquals(4,children.size());assertContains(obj,new JsonPrimitive(10L));assertContains(obj,new JsonPrimitive(5));assertContains(obj,new JsonPrimitive(false));assertContains(obj,new JsonPrimitive(""foo""));}"
"com.google.gson.functional.JsonTreeTest.testJsonTreeToString",0,"public void testJsonTreeToString(){SubTypeOfBagOfPrimitives bag=new SubTypeOfBagOfPrimitives(10L,5,false,""foo"",1.4F);String json1=gson.toJson(bag);JsonElement jsonElement=gson.toJsonTree(bag,SubTypeOfBagOfPrimitives.class);String json2=gson.toJson(jsonElement);assertEquals(json1,json2);}"
"com.google.gson.CommentsTest.testParseComments",0,"/** * Test for issue 212.*/public void testParseComments(){String json=""[\n"" + ""  // this is a comment\n"" + ""  \""a\"",\n""+ ""  /* this is another comment */\n""+ ""  \""b\"",\n""+ ""  # this is yet another comment\n""+ ""  \""c\""\n""+ ""]"";List<String> abc=new Gson().fromJson(json,new TypeToken<List<String>>(){}.getType());assertEquals(Arrays.asList(""a"",""b"",""c""),abc);}"
"com.google.gson.NullExclusionStrategyTest.testNeverSkipsClass",0,"public void testNeverSkipsClass()throws Exception {assertFalse(strategy.shouldSkipClass(String.class));}"
"com.google.gson.NullExclusionStrategyTest.testNeverSkipsField",0,"public void testNeverSkipsField()throws Exception {assertFalse(strategy.shouldSkipField(new FieldAttributes(String.class,String.class.getFields()[0])));}"
"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray",0,"public void testEscapingQuotesInStringArray()throws Exception {String[]valueWithQuotes={""beforeQuote\""afterQuote""};String jsonRepresentation=gson.toJson(valueWithQuotes);String[]target=gson.fromJson(jsonRepresentation,String[].class);assertEquals(1,target.length);assertEquals(valueWithQuotes[0],target[0]);}"
"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters",0,"public void testEscapeAllHtmlCharacters(){List<String> strings=new ArrayList<String>();strings.add(""<"");strings.add("">"");strings.add(""="");strings.add(""&"");strings.add(""'"");strings.add(""\"""");assertEquals(""[\""\\u003c\"",\""\\u003e\"",\""\\u003d\"",\""\\u0026\"",\""\\u0027\"",\""\\\""\""]"",gson.toJson(strings));}"
"com.google.gson.functional.EscapingTest.testEscapingObjectFields",0,"public void testEscapingObjectFields()throws Exception {BagOfPrimitives objWithPrimitives=new BagOfPrimitives(1L,1,true,""test with\"" <script>"");String jsonRepresentation=gson.toJson(objWithPrimitives);assertFalse(jsonRepresentation.contains(""<""));assertFalse(jsonRepresentation.contains("">""));assertTrue(jsonRepresentation.contains(""\\\""""));BagOfPrimitives expectedObject=gson.fromJson(jsonRepresentation,BagOfPrimitives.class);assertEquals(objWithPrimitives.getExpectedJson(),expectedObject.getExpectedJson());}"
"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization",0,"public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization()throws Exception {Gson escapeHtmlGson=new GsonBuilder().create();Gson noEscapeHtmlGson=new GsonBuilder().disableHtmlEscaping().create();BagOfPrimitives target=new BagOfPrimitives(1L,1,true,""test' / w'ith\"" / \\ <script>"");String escapedJsonForm=escapeHtmlGson.toJson(target);String nonEscapedJsonForm=noEscapeHtmlGson.toJson(target);assertFalse(escapedJsonForm.equals(nonEscapedJsonForm));assertEquals(target,noEscapeHtmlGson.fromJson(escapedJsonForm,BagOfPrimitives.class));assertEquals(target,escapeHtmlGson.fromJson(nonEscapedJsonForm,BagOfPrimitives.class));}"
"com.google.gson.UpperCamelCaseSeparatorNamingPolicyTest.testAllLowerCase",0,"public void testAllLowerCase()throws Exception {assertEquals(""Some Field Name"",namingPolicy.translateName(""someFieldName"",String.class,null));}"
"com.google.gson.UpperCamelCaseSeparatorNamingPolicyTest.testAllUpperCase",0,"public void testAllUpperCase()throws Exception {assertEquals(""U R L"",namingPolicy.translateName(""URL"",String.class,null));}"
"com.google.gson.UpperCamelCaseSeparatorNamingPolicyTest.testAllUpperCaseExceptFirst",0,"public void testAllUpperCaseExceptFirst()throws Exception {assertEquals(""U R L"",namingPolicy.translateName(""uRL"",String.class,null));}"
"com.google.gson.UpperCamelCaseSeparatorNamingPolicyTest.testAllUpperCaseStartingWithUnderscore",0,"public void testAllUpperCaseStartingWithUnderscore()throws Exception {assertEquals(""_U R L"",namingPolicy.translateName(""_uRL"",String.class,null));}"
"com.google.gson.UpperCamelCaseSeparatorNamingPolicyTest.testMixedCase",0,"public void testMixedCase()throws Exception {assertEquals(""_Some Field Name"",namingPolicy.translateName(""_someFieldName"",String.class,null));}"
"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException",0,"public void testDefaultTypeAdapterThrowsParseException()throws Exception {try {gson.fromJson(""{\""abc\"":123}"",BigInteger.class);fail(""Should have thrown a JsonParseException"");}catch(JsonParseException expected){}}"
"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException",0,"public void testTypeAdapterThrowsException()throws Exception {try {gson.toJson(new AtomicLong(0));fail(""Type Adapter should have thrown an exception"");}catch(IllegalStateException expected){}try {gson.fromJson(""123"",AtomicLong.class);fail(""Type Adapter should have thrown an exception"");}catch(JsonParseException expected){}}"
"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes",0,"public void testTypeAdapterProperlyConvertsTypes()throws Exception {int intialValue=1;AtomicInteger atomicInt=new AtomicInteger(intialValue);String json=gson.toJson(atomicInt);assertEquals(intialValue + 1,Integer.parseInt(json));atomicInt=gson.fromJson(json,AtomicInteger.class);assertEquals(intialValue,atomicInt.get());}"
"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes",0,"public void testTypeAdapterDoesNotAffectNonAdaptedTypes()throws Exception {String expected=""blah"";String actual=gson.toJson(expected);assertEquals(""\"""" + expected + ""\"""",actual);actual=gson.fromJson(actual,String.class);assertEquals(expected,actual);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization",0,"public void testGsonWithNonDefaultFieldNamingPolicySerialization(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""SomeConstantStringInstanceField\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation",0,"public void testGsonWithNonDefaultFieldNamingPolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();String target=""{\""SomeConstantStringInstanceField\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization",0,"public void testGsonWithLowerCaseDashPolicySerialization(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""some-constant-string-instance-field\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation",0,"public void testGsonWithLowerCaseDashPolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();String target=""{\""some-constant-string-instance-field\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization",0,"public void testGsonWithLowerCaseUnderscorePolicySerialization(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""some_constant_string_instance_field\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation",0,"public void testGsonWithLowerCaseUnderscorePolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();String target=""{\""some_constant_string_instance_field\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization",0,"public void testGsonWithSerializedNameFieldNamingPolicySerialization(){Gson gson=builder.create();ClassWithSerializedNameFields expected=new ClassWithSerializedNameFields(5,6);String actual=gson.toJson(expected);assertEquals(expected.getExpectedJson(),actual);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization",0,"public void testGsonWithSerializedNameFieldNamingPolicyDeserialization(){Gson gson=builder.create();ClassWithSerializedNameFields expected=new ClassWithSerializedNameFields(5,7);ClassWithSerializedNameFields actual=gson.fromJson(expected.getExpectedJson(),ClassWithSerializedNameFields.class);assertEquals(expected.f,actual.f);}"
"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization",0,"public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization(){Gson gson=builder.create();ClassWithDuplicateFields target=new ClassWithDuplicateFields(10);String actual=gson.toJson(target);assertEquals(""{\""a\"":10}"",actual);target=new ClassWithDuplicateFields(3.0D);actual=gson.toJson(target);assertEquals(""{\""a\"":3.0}"",actual);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation",0,"public void testGsonWithUpperCamelCaseSpacesPolicySerialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""Some Constant String Instance Field\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation",0,"public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create();String target=""{\""Some Constant String Instance Field\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy",0,"public void testDeprecatedNamingStrategy()throws Exception {Gson gson=builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create();ClassWithDuplicateFields target=new ClassWithDuplicateFields(10);String actual=gson.toJson(target);assertEquals(""{\""A\"":10}"",actual);}"
"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testCompactFormattingLeavesNoWhiteSpace(){List list=new ArrayList();list.add(new BagOfPrimitives());list.add(new Nested());list.add(new PrimitiveArray());list.add(new ClassWithTransientFields());String json=gson.toJson(list);assertContainsNoWhiteSpace(json);}"
"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues",0,"public void testJsonObjectWithNullValues(){JsonObject obj=new JsonObject();obj.addProperty(""field1"",""value1"");obj.addProperty(""field2"",(String)null);String json=gson.toJson(obj);assertTrue(json.contains(""field1""));assertFalse(json.contains(""field2""));}"
"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized",0,"public void testJsonObjectWithNullValuesSerialized(){gson=new GsonBuilder().serializeNulls().create();JsonObject obj=new JsonObject();obj.addProperty(""field1"",""value1"");obj.addProperty(""field2"",(String)null);String json=gson.toJson(obj);assertTrue(json.contains(""field1""));assertTrue(json.contains(""field2""));}"
"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization",0,"public void testNonExecutableJsonSerialization(){Gson gson=gsonBuilder.generateNonExecutableJson().create();String json=gson.toJson(new BagOfPrimitives());assertTrue(json.startsWith(JSON_NON_EXECUTABLE_PREFIX));}"
"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization",0,"public void testNonExecutableJsonDeserialization(){String json=JSON_NON_EXECUTABLE_PREFIX + ""{longValue:1}"";Gson gson=gsonBuilder.create();BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(1,target.longValue);}"
"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization",0,"public void testJsonWithNonExectuableTokenSerialization(){Gson gson=gsonBuilder.generateNonExecutableJson().create();String json=gson.toJson(JSON_NON_EXECUTABLE_PREFIX);assertTrue(json.contains("")]}'\n""));}"
"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization",0,"/** * Gson should be able to deserialize a stream with non-exectuable token even if it is created without  {@link GsonBuilder#generateNonExecutableJson()}.*/public void testJsonWithNonExectuableTokenWithRegularGsonDeserialization(){Gson gson=gsonBuilder.create();String json=JSON_NON_EXECUTABLE_PREFIX + ""{stringValue:')]}\\u0027\\n'}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals("")]}'\n"",target.stringValue);}"
"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization",0,"/** * Gson should be able to deserialize a stream with non-exectuable token if it is created with  {@link GsonBuilder#generateNonExecutableJson()}.*/public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization(){Gson gson=gsonBuilder.generateNonExecutableJson().create();String json=JSON_NON_EXECUTABLE_PREFIX + ""{intValue:2,stringValue:')]}\\u0027\\n'}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals("")]}'\n"",target.stringValue);assertEquals(2,target.intValue);}"
"com.google.gson.CamelCaseSeparatorNamingPolicyTest.testInvalidInstantiation",0,"public void testInvalidInstantiation()throws Exception {try {new CamelCaseSeparatorNamingPolicy(null);fail(""Null separator string is not supported"");}catch(IllegalArgumentException expected){}try {new CamelCaseSeparatorNamingPolicy("""");fail(""Empty separator string is not supported"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.CamelCaseSeparatorNamingPolicyTest.testUnderscoreSeparator",0,"public void testUnderscoreSeparator()throws Exception {CamelCaseSeparatorNamingPolicy namingPolicy=new CamelCaseSeparatorNamingPolicy(UNDERSCORE);String translatedName=namingPolicy.translateName(""testUnderscoreBetweenWords"",CLASS,null);assertEquals(""test_Underscore_Between_Words"",translatedName);}"
"com.google.gson.CamelCaseSeparatorNamingPolicyTest.testMultiCharSeparator",0,"public void testMultiCharSeparator()throws Exception {CamelCaseSeparatorNamingPolicy namingPolicy=new CamelCaseSeparatorNamingPolicy(MULTI_CHAR_SEPARATOR);String translatedName=namingPolicy.translateName(""testMultCharBetweenWords"",CLASS,null);assertEquals(""test_$_Mult_$_Char_$_Between_$_Words"",translatedName);}"
"com.google.gson.CamelCaseSeparatorNamingPolicyTest.testNameBeginsWithCapital",0,"public void testNameBeginsWithCapital()throws Exception {CamelCaseSeparatorNamingPolicy namingPolicy=new CamelCaseSeparatorNamingPolicy(UNDERSCORE);String translatedName=namingPolicy.translateName(""TestNameBeginsWithCapital"",CLASS,null);assertEquals(""Test_Name_Begins_With_Capital"",translatedName);}"
"com.google.gson.CamelCaseSeparatorNamingPolicyTest.testExceptionPossiblyIncorrectSeparation",0,"public void testExceptionPossiblyIncorrectSeparation()throws Exception {CamelCaseSeparatorNamingPolicy namingPolicy=new CamelCaseSeparatorNamingPolicy(UNDERSCORE);String translatedName=namingPolicy.translateName(""aURL"",CLASS,null);assertEquals(""a_U_R_L"",translatedName);}"
"com.google.gson.LowerCaseNamingPolicyTest.testAllLowerCase",0,"public void testAllLowerCase()throws Exception {assertEquals(ALL_LOWER,namingPolicy.translateName(ALL_LOWER,String.class,null));}"
"com.google.gson.LowerCaseNamingPolicyTest.testAllUpperCase",0,"public void testAllUpperCase()throws Exception {assertEquals(ALL_LOWER,namingPolicy.translateName(ALL_UPPER,String.class,null));}"
"com.google.gson.LowerCaseNamingPolicyTest.testMixedCase",0,"public void testMixedCase()throws Exception {assertEquals(ALL_LOWER,namingPolicy.translateName(MIXED,String.class,null));}"
"com.google.gson.ExposeAnnotationDeserializationExclusionStrategyTest.testNeverSkipClasses",0,"public void testNeverSkipClasses()throws Exception {assertFalse(strategy.shouldSkipClass(MockObject.class));}"
"com.google.gson.ExposeAnnotationDeserializationExclusionStrategyTest.testSkipNonAnnotatedFields",0,"public void testSkipNonAnnotatedFields()throws Exception {Field f=MockObject.class.getField(""hiddenField"");assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.ExposeAnnotationDeserializationExclusionStrategyTest.testSkipExplicitlySkippedFields",0,"public void testSkipExplicitlySkippedFields()throws Exception {Field f=MockObject.class.getField(""explicitlyHiddenField"");assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.ExposeAnnotationDeserializationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields",0,"public void testNeverSkipExposedAnnotatedFields()throws Exception {Field f=MockObject.class.getField(""exposedField"");assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.ExposeAnnotationDeserializationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields",0,"public void testNeverSkipExplicitlyExposedAnnotatedFields()throws Exception {Field f=MockObject.class.getField(""explicitlyExposedField"");assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.JsonPrimitiveTest.testBoolean",0,"public void testBoolean()throws Exception {JsonPrimitive json=new JsonPrimitive(Boolean.TRUE);assertTrue(json.isBoolean());assertTrue(json.getAsBoolean());}"
"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean",0,"public void testParsingStringAsBoolean()throws Exception {JsonPrimitive json=new JsonPrimitive(""true"");assertFalse(json.isBoolean());assertTrue(json.getAsBoolean());}"
"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber",0,"public void testParsingStringAsNumber()throws Exception {JsonPrimitive json=new JsonPrimitive(""1"");assertFalse(json.isNumber());assertEquals(1D,json.getAsDouble(),0.00001);assertEquals(1F,json.getAsFloat(),0.00001);assertEquals(1,json.getAsInt());assertEquals(1L,json.getAsLong());assertEquals((short)1,json.getAsShort());assertEquals((byte)1,json.getAsByte());assertEquals(new BigInteger(""1""),json.getAsBigInteger());assertEquals(new BigDecimal(""1""),json.getAsBigDecimal());}"
"com.google.gson.JsonPrimitiveTest.testStringsAndChar",0,"public void testStringsAndChar()throws Exception {JsonPrimitive json=new JsonPrimitive(""abc"");assertTrue(json.isString());assertEquals('a',json.getAsCharacter());assertEquals(""abc"",json.getAsString());json=new JsonPrimitive('z');assertTrue(json.isString());assertEquals('z',json.getAsCharacter());assertEquals(""z"",json.getAsString());}"
"com.google.gson.JsonPrimitiveTest.testExponential",0,"public void testExponential()throws Exception {JsonPrimitive json=new JsonPrimitive(""1E+7"");assertEquals(new BigDecimal(""1E+7""),json.getAsBigDecimal());assertEquals(new Double(""1E+7""),json.getAsDouble(),0.00001);assertEquals(new Float(""1E+7""),json.getAsDouble(),0.00001);try {json.getAsInt();fail(""Integers can not handle exponents like this."");}catch(NumberFormatException expected){}}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsShort",0,"public void testByteEqualsShort(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new Short((short)10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger",0,"public void testByteEqualsInteger(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new Integer(10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsLong",0,"public void testByteEqualsLong(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new Long(10L));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger",0,"public void testByteEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger",0,"public void testShortEqualsInteger(){JsonPrimitive p1=new JsonPrimitive(new Short((short)10));JsonPrimitive p2=new JsonPrimitive(new Integer(10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testShortEqualsLong",0,"public void testShortEqualsLong(){JsonPrimitive p1=new JsonPrimitive(new Short((short)10));JsonPrimitive p2=new JsonPrimitive(new Long(10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger",0,"public void testShortEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Short((short)10));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong",0,"public void testIntegerEqualsLong(){JsonPrimitive p1=new JsonPrimitive(new Integer(10));JsonPrimitive p2=new JsonPrimitive(new Long(10L));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger",0,"public void testIntegerEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Integer(10));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger",0,"public void testLongEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Long(10L));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble",0,"public void testFloatEqualsDouble(){JsonPrimitive p1=new JsonPrimitive(new Float(10.25F));JsonPrimitive p2=new JsonPrimitive(new Double(10.25D));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal",0,"public void testFloatEqualsBigDecimal(){JsonPrimitive p1=new JsonPrimitive(new Float(10.25F));JsonPrimitive p2=new JsonPrimitive(new BigDecimal(""10.25""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal",0,"public void testDoubleEqualsBigDecimal(){JsonPrimitive p1=new JsonPrimitive(new Double(10.25D));JsonPrimitive p2=new JsonPrimitive(new BigDecimal(""10.25""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString",0,"public void testValidJsonOnToString()throws Exception {JsonPrimitive json=new JsonPrimitive(""Some\nEscaped\nValue"");assertEquals(""\""Some\\nEscaped\\nValue\"""",json.toString());json=new JsonPrimitive(new BigDecimal(""1.333""));assertEquals(""1.333"",json.toString());}"
"com.google.gson.EscaperTest.testNoSpecialCharacters",0,"public void testNoSpecialCharacters(){String value=""Testing123"";String escapedString=escapeHtmlChar.escapeJsonString(value);assertEquals(value,escapedString);}"
"com.google.gson.EscaperTest.testNewlineEscaping",0,"public void testNewlineEscaping()throws Exception {String containsNewline=""123\n456"";String escapedString=escapeHtmlChar.escapeJsonString(containsNewline);assertEquals(""123\\n456"",escapedString);}"
"com.google.gson.EscaperTest.testCarrageReturnEscaping",0,"public void testCarrageReturnEscaping()throws Exception {String containsCarrageReturn=""123\r456"";String escapedString=escapeHtmlChar.escapeJsonString(containsCarrageReturn);assertEquals(""123\\r456"",escapedString);}"
"com.google.gson.EscaperTest.testTabEscaping",0,"public void testTabEscaping()throws Exception {String containsTab=""123\t456"";String escapedString=escapeHtmlChar.escapeJsonString(containsTab);assertEquals(""123\\t456"",escapedString);}"
"com.google.gson.EscaperTest.testDoubleQuoteEscaping",0,"public void testDoubleQuoteEscaping()throws Exception {String containsQuote=""123\""456"";String escapedString=escapeHtmlChar.escapeJsonString(containsQuote);assertEquals(""123\\\""456"",escapedString);}"
"com.google.gson.EscaperTest.testSingleQuoteEscaping",0,"public void testSingleQuoteEscaping()throws Exception {String containsQuote=""123'456"";String escapedString=escapeHtmlChar.escapeJsonString(containsQuote);assertEquals(""123\\u0027456"",escapedString);}"
"com.google.gson.EscaperTest.testLineSeparatorEscaping",0,"public void testLineSeparatorEscaping()throws Exception {String src=""123\u2028 456"";String escapedString=escapeHtmlChar.escapeJsonString(src);assertEquals(""123\\u2028 456"",escapedString);}"
"com.google.gson.EscaperTest.testParagraphSeparatorEscaping",0,"public void testParagraphSeparatorEscaping()throws Exception {String src=""123\u2029 456"";String escapedString=escapeHtmlChar.escapeJsonString(src);assertEquals(""123\\u2029 456"",escapedString);}"
"com.google.gson.EscaperTest.testControlCharBlockEscaping",0,"public void testControlCharBlockEscaping()throws Exception {for (char c='\u007f';c <= '\u009f';++c){String src=""123 "" + c + "" 456"";String escapedString=escapeHtmlChar.escapeJsonString(src);assertFalse(src.equals(escapedString));}}"
"com.google.gson.EscaperTest.testEqualsEscaping",0,"public void testEqualsEscaping()throws Exception {String containsEquals=""123=456"";int index=containsEquals.indexOf('=');String unicodeValue=convertToUnicodeString(Character.codePointAt(containsEquals,index));String escapedString=escapeHtmlChar.escapeJsonString(containsEquals);assertEquals(""123"" + unicodeValue + ""456"",escapedString);escapedString=noEscapeHtmlChar.escapeJsonString(containsEquals);assertEquals(containsEquals,escapedString);}"
"com.google.gson.EscaperTest.testGreaterThanAndLessThanEscaping",0,"public void testGreaterThanAndLessThanEscaping()throws Exception {String containsLtGt=""123>456<"";int gtIndex=containsLtGt.indexOf('>');int ltIndex=containsLtGt.indexOf('<');String gtAsUnicode=convertToUnicodeString(Character.codePointAt(containsLtGt,gtIndex));String ltAsUnicode=convertToUnicodeString(Character.codePointAt(containsLtGt,ltIndex));String escapedString=escapeHtmlChar.escapeJsonString(containsLtGt);assertEquals(""123"" + gtAsUnicode + ""456""+ ltAsUnicode,escapedString);escapedString=noEscapeHtmlChar.escapeJsonString(containsLtGt);assertEquals(containsLtGt,escapedString);}"
"com.google.gson.EscaperTest.testAmpersandEscaping",0,"public void testAmpersandEscaping()throws Exception {String containsAmp=""123&456"";int ampIndex=containsAmp.indexOf('&');String ampAsUnicode=convertToUnicodeString(Character.codePointAt(containsAmp,ampIndex));String escapedString=escapeHtmlChar.escapeJsonString(containsAmp);assertEquals(""123"" + ampAsUnicode + ""456"",escapedString);escapedString=noEscapeHtmlChar.escapeJsonString(containsAmp);assertEquals(containsAmp,escapedString);char ampCharAsUnicode='\u0026';String containsAmpUnicode=""123"" + ampCharAsUnicode + ""456"";escapedString=escapeHtmlChar.escapeJsonString(containsAmpUnicode);assertEquals(""123"" + ampAsUnicode + ""456"",escapedString);escapedString=noEscapeHtmlChar.escapeJsonString(containsAmpUnicode);assertEquals(containsAmp,escapedString);}"
"com.google.gson.EscaperTest.testSlashEscaping",0,"public void testSlashEscaping()throws Exception {String containsSlash=""123\\456"";String escapedString=escapeHtmlChar.escapeJsonString(containsSlash);assertEquals(""123\\\\456"",escapedString);}"
"com.google.gson.EscaperTest.testSingleQuoteNotEscaped",0,"public void testSingleQuoteNotEscaped()throws Exception {String containsSingleQuote=""123'456"";String escapedString=noEscapeHtmlChar.escapeJsonString(containsSingleQuote);assertEquals(containsSingleQuote,escapedString);}"
"com.google.gson.EscaperTest.testRequiredEscapingUnicodeCharacter",0,"public void testRequiredEscapingUnicodeCharacter()throws Exception {char unicodeChar='\u2028';String unicodeString=""Testing"" + unicodeChar;String escapedString=escapeHtmlChar.escapeJsonString(unicodeString);assertFalse(unicodeString.equals(escapedString));assertEquals(""Testing\\u2028"",escapedString);}"
"com.google.gson.EscaperTest.testUnicodeCharacterStringNoEscaping",0,"public void testUnicodeCharacterStringNoEscaping()throws Exception {String unicodeString=""\u0065\u0066"";String escapedString=escapeHtmlChar.escapeJsonString(unicodeString);assertEquals(unicodeString,escapedString);}"
"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization",0,"public void testEmptyMapNoTypeSerialization(){Map<String,String> emptyMap=new HashMap<String,String>();JsonElement element=mapSerializer.serialize(emptyMap,emptyMap.getClass(),null);assertTrue(element instanceof JsonObject);JsonObject emptyMapJsonObject=(JsonObject)element;assertTrue(emptyMapJsonObject.entrySet().isEmpty());}"
"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization",0,"public void testEmptyMapSerialization(){Type mapType=new TypeToken<Map<String,String>>(){}.getType();Map<String,String> emptyMap=new HashMap<String,String>();JsonElement element=mapSerializer.serialize(emptyMap,mapType,null);assertTrue(element instanceof JsonObject);JsonObject emptyMapJsonObject=(JsonObject)element;assertTrue(emptyMapJsonObject.entrySet().isEmpty());}"
"com.google.gson.ExposeAnnotationSerializationExclusionStrategyTest.testNeverSkipClasses",0,"public void testNeverSkipClasses()throws Exception {assertFalse(strategy.shouldSkipClass(MockObject.class));}"
"com.google.gson.ExposeAnnotationSerializationExclusionStrategyTest.testSkipNonAnnotatedFields",0,"public void testSkipNonAnnotatedFields()throws Exception {Field f=MockObject.class.getField(""hiddenField"");assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.ExposeAnnotationSerializationExclusionStrategyTest.testSkipExplicitlySkippedFields",0,"public void testSkipExplicitlySkippedFields()throws Exception {Field f=MockObject.class.getField(""explicitlyHiddenField"");assertTrue(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.ExposeAnnotationSerializationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields",0,"public void testNeverSkipExposedAnnotatedFields()throws Exception {Field f=MockObject.class.getField(""exposedField"");assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.ExposeAnnotationSerializationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields",0,"public void testNeverSkipExplicitlyExposedAnnotatedFields()throws Exception {Field f=MockObject.class.getField(""explicitlyExposedField"");assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class,f)));}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization",0,"public void testExclusionStrategySerialization()throws Exception {String json=gson.toJson(src);assertFalse(json.contains(""\""stringField\""""));assertFalse(json.contains(""\""annotatedField\""""));assertTrue(json.contains(""\""longField\""""));}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization",0,"public void testExclusionStrategyDeserialization()throws Exception {JsonObject json=new JsonObject();json.add(""annotatedField"",new JsonPrimitive(src.annotatedField + 5));json.add(""stringField"",new JsonPrimitive(src.stringField + ""blah,blah""));json.add(""longField"",new JsonPrimitive(1212311L));SampleObjectForTest target=gson.fromJson(json,SampleObjectForTest.class);assertEquals(1212311L,target.longField);assertEquals(src.annotatedField,target.annotatedField);assertEquals(src.stringField,target.stringField);}"
"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject",0,"public void testExcludeInnerClassObject()throws Exception {Class<?> clazz=innerClass.getClass();assertTrue(strategy.shouldSkipClass(clazz));}"
"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField",0,"public void testExcludeInnerClassField()throws Exception {Field f=getClass().getField(""innerClass"");assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(),f)));}"
"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject",0,"public void testIncludeStaticNestedClassObject()throws Exception {Class<?> clazz=staticNestedClass.getClass();assertFalse(strategy.shouldSkipClass(clazz));}"
"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField",0,"public void testIncludeStaticNestedClassField()throws Exception {Field f=getClass().getField(""staticNestedClass"");assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(),f)));}"
"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce",0,"public void testCreatingMoreThanOnce(){GsonBuilder builder=new GsonBuilder();builder.create();builder.create();}"
"com.google.gson.MixedStreamTest.testWriteMixedStreamed",0,"public void testWriteMixedStreamed()throws IOException {Gson gson=new Gson();StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.setIndent(""  "");gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);gson.toJson(BLACK_BMW,Car.class,jsonWriter);gson.toJson(RED_MIATA,Car.class,jsonWriter);jsonWriter.endArray();assertEquals(CARS_JSON,stringWriter.toString());}"
"com.google.gson.MixedStreamTest.testReadMixedStreamed",0,"public void testReadMixedStreamed()throws IOException {Gson gson=new Gson();StringReader stringReader=new StringReader(CARS_JSON);JsonReader jsonReader=new JsonReader(stringReader);jsonReader.beginArray();assertEquals(BLUE_MUSTANG,gson.fromJson(jsonReader,Car.class));assertEquals(BLACK_BMW,gson.fromJson(jsonReader,Car.class));assertEquals(RED_MIATA,gson.fromJson(jsonReader,Car.class));jsonReader.endArray();}"
"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState",0,"public void testReaderDoesNotMutateState()throws IOException {Gson gson=new Gson();JsonReader jsonReader=new JsonReader(new StringReader(CARS_JSON));jsonReader.beginArray();jsonReader.setLenient(false);gson.fromJson(jsonReader,Car.class);assertFalse(jsonReader.isLenient());jsonReader.setLenient(true);gson.fromJson(jsonReader,Car.class);assertTrue(jsonReader.isLenient());}"
"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState",0,"public void testWriteDoesNotMutateState()throws IOException {Gson gson=new Gson();JsonWriter jsonWriter=new JsonWriter(new StringWriter());jsonWriter.beginArray();jsonWriter.setHtmlSafe(true);jsonWriter.setLenient(true);gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);assertTrue(jsonWriter.isHtmlSafe());assertTrue(jsonWriter.isLenient());jsonWriter.setHtmlSafe(false);jsonWriter.setLenient(false);gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);assertFalse(jsonWriter.isHtmlSafe());assertFalse(jsonWriter.isLenient());}"
"com.google.gson.MixedStreamTest.testReadInvalidState",0,"public void testReadInvalidState()throws IOException {Gson gson=new Gson();JsonReader jsonReader=new JsonReader(new StringReader(CARS_JSON));jsonReader.beginArray();jsonReader.beginObject();try {gson.fromJson(jsonReader,String.class);fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.MixedStreamTest.testReadClosed",0,"public void testReadClosed()throws IOException {Gson gson=new Gson();JsonReader jsonReader=new JsonReader(new StringReader(CARS_JSON));jsonReader.close();try {gson.fromJson(jsonReader,new TypeToken<List<Car>>(){}.getType());fail();}catch(IllegalStateException expected){}}"
"com.google.gson.MixedStreamTest.testWriteInvalidState",0,"public void testWriteInvalidState()throws IOException {Gson gson=new Gson();JsonWriter jsonWriter=new JsonWriter(new StringWriter());jsonWriter.beginObject();try {gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);fail();}catch(IllegalStateException expected){}}"
"com.google.gson.MixedStreamTest.testWriteClosed",0,"public void testWriteClosed()throws IOException {Gson gson=new Gson();JsonWriter jsonWriter=new JsonWriter(new StringWriter());jsonWriter.beginArray();jsonWriter.endArray();jsonWriter.close();try {gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);fail();}catch(IllegalStateException expected){}}"
"com.google.gson.MixedStreamTest.testWriteNulls",0,"public void testWriteNulls(){Gson gson=new Gson();try {gson.toJson(new JsonPrimitive(""hello""),(JsonWriter)null);fail();}catch(NullPointerException expected){}StringWriter stringWriter=new StringWriter();gson.toJson(null,new JsonWriter(stringWriter));assertEquals("""",stringWriter.toString());}"
"com.google.gson.MixedStreamTest.testReadNulls",0,"public void testReadNulls(){Gson gson=new Gson();try {gson.fromJson((JsonReader)null,Integer.class);fail();}catch(NullPointerException expected){}try {gson.fromJson(new JsonReader(new StringReader(""true"")),null);fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.MixedStreamTest.testWriteHtmlSafe",0,"public void testWriteHtmlSafe(){List<String> contents=Arrays.asList(""<"","">"",""&"",""="",""'"");Type type=new TypeToken<List<String>>(){}.getType();StringWriter writer=new StringWriter();new Gson().toJson(contents,type,new JsonWriter(writer));assertEquals(""[\""\\u003c\"",\""\\u003e\"",\""\\u0026\"",\""\\u003d\"",\""\\u0027\""]"",writer.toString());writer=new StringWriter();new GsonBuilder().disableHtmlEscaping().create().toJson(contents,type,new JsonWriter(writer));assertEquals(""[\""<\"",\"">\"",\""&\"",\""=\"",\""'\""]"",writer.toString());}"
"com.google.gson.MixedStreamTest.testWriteLenient",0,"public void testWriteLenient(){List<Double> doubles=Arrays.asList(Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,-0.0d,0.5d,0.0d);Type type=new TypeToken<List<Double>>(){}.getType();StringWriter writer=new StringWriter();JsonWriter jsonWriter=new JsonWriter(writer);new GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles,type,jsonWriter);assertEquals(""[NaN,-Infinity,Infinity,-0.0,0.5,0.0]"",writer.toString());try {new Gson().toJson(doubles,type,new JsonWriter(new StringWriter()));fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization",0,"public void testTopLevelCollectionOfIntegersSerialization(){Collection<Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);Type targetType=new TypeToken<Collection<Integer>>(){}.getType();String json=gson.toJson(target,targetType);assertEquals(""[1,2,3,4,5,6,7,8,9]"",json);}"
"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization",0,"public void testTopLevelCollectionOfIntegersDeserialization(){String json=""[0,1,2,3,4,5,6,7,8,9]"";Type collectionType=new TypeToken<Collection<Integer>>(){}.getType();Collection<Integer> target=gson.fromJson(json,collectionType);int[]expected={0,1,2,3,4,5,6,7,8,9};MoreAsserts.assertEquals(expected,toIntArray(target));}"
"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization",0,"public void testTopLevelListOfIntegerCollectionsDeserialization()throws Exception {String json=""[[1,2,3],[4,5,6],[7,8,9]]"";Type collectionType=new TypeToken<Collection<Collection<Integer>>>(){}.getType();List<Collection<Integer>> target=gson.fromJson(json,collectionType);int[][]expected=new int[3][3];for (int i=0;i < 3;++i){int start=(3 * i)+ 1;for (int j=0;j < 3;++j){expected[i][j]=start + j;}}for (int i=0;i < 3;i++){MoreAsserts.assertEquals(expected[i],toIntArray(target.get(i)));}}"
"com.google.gson.functional.CollectionTest.testLinkedListSerialization",0,"public void testLinkedListSerialization(){List<String> list=new LinkedList<String>();list.add(""a1"");list.add(""a2"");Type linkedListType=new TypeToken<LinkedList<String>>(){}.getType();String json=gson.toJson(list,linkedListType);assertTrue(json.contains(""a1""));assertTrue(json.contains(""a2""));}"
"com.google.gson.functional.CollectionTest.testLinkedListDeserialization",0,"public void testLinkedListDeserialization(){String json=""['a1','a2']"";Type linkedListType=new TypeToken<LinkedList<String>>(){}.getType();List<String> list=gson.fromJson(json,linkedListType);assertEquals(""a1"",list.get(0));assertEquals(""a2"",list.get(1));}"
"com.google.gson.functional.CollectionTest.testQueueSerialization",0,"public void testQueueSerialization(){Queue<String> queue=new LinkedList<String>();queue.add(""a1"");queue.add(""a2"");Type queueType=new TypeToken<Queue<String>>(){}.getType();String json=gson.toJson(queue,queueType);assertTrue(json.contains(""a1""));assertTrue(json.contains(""a2""));}"
"com.google.gson.functional.CollectionTest.testQueueDeserialization",0,"public void testQueueDeserialization(){String json=""['a1','a2']"";Type queueType=new TypeToken<Queue<String>>(){}.getType();Queue<String> queue=gson.fromJson(json,queueType);assertEquals(""a1"",queue.element());queue.remove();assertEquals(""a2"",queue.element());}"
"com.google.gson.functional.CollectionTest.testNullsInListSerialization",0,"public void testNullsInListSerialization(){List<String> list=new ArrayList<String>();list.add(""foo"");list.add(null);list.add(""bar"");String expected=""[\""foo\"",null,\""bar\""]"";Type typeOfList=new TypeToken<List<String>>(){}.getType();String json=gson.toJson(list,typeOfList);assertEquals(expected,json);}"
"com.google.gson.functional.CollectionTest.testNullsInListDeserialization",0,"public void testNullsInListDeserialization(){List<String> expected=new ArrayList<String>();expected.add(""foo"");expected.add(null);expected.add(""bar"");String json=""[\""foo\"",null,\""bar\""]"";Type expectedType=new TypeToken<List<String>>(){}.getType();List<String> target=gson.fromJson(json,expectedType);for (int i=0;i < expected.size();++i){assertEquals(expected.get(i),target.get(i));}}"
"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization",0,"public void testCollectionOfObjectSerialization(){List<Object> target=new ArrayList<Object>();target.add(""Hello"");target.add(""World"");assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target));Type type=new TypeToken<List<Object>>(){}.getType();assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target,type));}"
"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization",0,"public void testCollectionOfObjectWithNullSerialization(){List<Object> target=new ArrayList<Object>();target.add(""Hello"");target.add(null);target.add(""World"");assertEquals(""[\""Hello\"",null,\""World\""]"",gson.toJson(target));Type type=new TypeToken<List<Object>>(){}.getType();assertEquals(""[\""Hello\"",null,\""World\""]"",gson.toJson(target,type));}"
"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization",0,"public void testCollectionOfStringsSerialization(){List<String> target=new ArrayList<String>();target.add(""Hello"");target.add(""World"");assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target));}"
"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization",0,"public void testCollectionOfBagOfPrimitivesSerialization(){List<BagOfPrimitives> target=new ArrayList<BagOfPrimitives>();BagOfPrimitives objA=new BagOfPrimitives(3L,1,true,""blah"");BagOfPrimitives objB=new BagOfPrimitives(2L,6,false,""blahB"");target.add(objA);target.add(objB);String result=gson.toJson(target);assertTrue(result.startsWith(""[""));assertTrue(result.endsWith(""]""));for(BagOfPrimitives obj : target){assertTrue(result.contains(obj.getExpectedJson()));}}"
"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization",0,"public void testCollectionOfStringsDeserialization(){String json=""[\""Hello\"",\""World\""]"";Type collectionType=new TypeToken<Collection<String>>(){}.getType();Collection<String> target=gson.fromJson(json,collectionType);assertTrue(target.contains(""Hello""));assertTrue(target.contains(""World""));}"
"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization",0,"public void testRawCollectionOfIntegersSerialization(){Collection<Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);assertEquals(""[1,2,3,4,5,6,7,8,9]"",gson.toJson(target));}"
"com.google.gson.functional.CollectionTest.testRawCollectionSerialization",0,"@SuppressWarnings({""rawtypes""})public void testRawCollectionSerialization(){BagOfPrimitives bag1=new BagOfPrimitives();Collection target=Arrays.asList(bag1,bag1);String json=gson.toJson(target);assertTrue(json.contains(bag1.getExpectedJson()));}"
"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed",0,"public void testRawCollectionDeserializationNotAlllowed(){String json=""[0,1,2,3,4,5,6,7,8,9]"";try {gson.fromJson(json,Collection.class);fail(""Can not deserialize a non-genericized collection."");}catch(JsonParseException expected){}json=""[\""Hello\"",\""World\""]"";try {gson.fromJson(json,Collection.class);fail(""Can not deserialize a non-genericized collection."");}catch(JsonParseException expected){}}"
"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testRawCollectionOfBagOfPrimitivesNotAllowed(){try {BagOfPrimitives bag=new BagOfPrimitives(10,20,false,""stringValue"");String json='[' + bag.getExpectedJson()+ ','+ bag.getExpectedJson()+ ']';Collection target=gson.fromJson(json,Collection.class);assertEquals(2,target.size());for(BagOfPrimitives bag1 : (Collection<BagOfPrimitives>)target){assertEquals(bag.getExpectedJson(),bag1.getExpectedJson());}fail(""Raw collection of objects should not work"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization",0,"public void testWildcardPrimitiveCollectionSerilaization()throws Exception {Collection<? extends Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);Type collectionType=new TypeToken<Collection<? extends Integer>>(){}.getType();String json=gson.toJson(target,collectionType);assertEquals(""[1,2,3,4,5,6,7,8,9]"",json);json=gson.toJson(target);assertEquals(""[1,2,3,4,5,6,7,8,9]"",json);}"
"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization",0,"public void testWildcardPrimitiveCollectionDeserilaization()throws Exception {String json=""[1,2,3,4,5,6,7,8,9]"";Type collectionType=new TypeToken<Collection<? extends Integer>>(){}.getType();Collection<? extends Integer> target=gson.fromJson(json,collectionType);assertEquals(9,target.size());assertTrue(target.contains(1));assertTrue(target.contains(9));}"
"com.google.gson.functional.CollectionTest.testWildcardCollectionField",0,"public void testWildcardCollectionField()throws Exception {Collection<BagOfPrimitives> collection=new ArrayList<BagOfPrimitives>();BagOfPrimitives objA=new BagOfPrimitives(3L,1,true,""blah"");BagOfPrimitives objB=new BagOfPrimitives(2L,6,false,""blahB"");collection.add(objA);collection.add(objB);ObjectWithWildcardCollection target=new ObjectWithWildcardCollection(collection);String json=gson.toJson(target);assertTrue(json.contains(objA.getExpectedJson()));assertTrue(json.contains(objB.getExpectedJson()));target=gson.fromJson(json,ObjectWithWildcardCollection.class);Collection<? extends BagOfPrimitives> deserializedCollection=target.getCollection();assertEquals(2,deserializedCollection.size());assertTrue(deserializedCollection.contains(objA));assertTrue(deserializedCollection.contains(objB));}"
"com.google.gson.functional.CollectionTest.testSetSerialization",0,"public void testSetSerialization(){Set<Entry> set=new HashSet<Entry>();set.add(new Entry(1));set.add(new Entry(2));String json=gson.toJson(set);assertTrue(json.contains(""1""));assertTrue(json.contains(""2""));}"
"com.google.gson.functional.CollectionTest.testSetDeserialization",0,"public void testSetDeserialization(){String json=""[{value:1},{value:2}]"";Type type=new TypeToken<Set<Entry>>(){}.getType();Set<Entry> set=gson.fromJson(json,type);assertEquals(2,set.size());for(Entry entry : set){assertTrue(entry.value == 1 || entry.value == 2);}}"
"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion",0,"public void testDefaultInnerClassExclusion()throws Exception {Gson gson=new Gson();Outer.Inner target=outer.new Inner(VALUE);String result=gson.toJson(target);assertEquals(target.toJson(),result);gson=new GsonBuilder().create();target=outer.new Inner(VALUE);result=gson.toJson(target);assertEquals(target.toJson(),result);}"
"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion",0,"public void testInnerClassExclusion()throws Exception {Gson gson=new GsonBuilder().disableInnerClassSerialization().create();Outer.Inner target=outer.new Inner(VALUE);String result=gson.toJson(target);assertEquals("""",result);}"
"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded",0,"public void testDefaultNestedStaticClassIncluded()throws Exception {Gson gson=new Gson();Outer.Inner target=outer.new Inner(VALUE);String result=gson.toJson(target);assertEquals(target.toJson(),result);gson=new GsonBuilder().create();target=outer.new Inner(VALUE);result=gson.toJson(target);assertEquals(target.toJson(),result);}"
"com.google.gson.DisjunctionExclusionStrategyTest.testBadInstantiation",0,"public void testBadInstantiation()throws Exception {try {List<ExclusionStrategy> constructorParam=null;new DisjunctionExclusionStrategy(constructorParam);fail(""Should throw an exception"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.DisjunctionExclusionStrategyTest.testSkipFieldsWithMixedTrueAndFalse",0,"public void testSkipFieldsWithMixedTrueAndFalse()throws Exception {List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();strategies.add(FALSE_STRATEGY);strategies.add(TRUE_STRATEGY);DisjunctionExclusionStrategy strategy=new DisjunctionExclusionStrategy(strategies);assertTrue(strategy.shouldSkipClass(CLAZZ));assertTrue(strategy.shouldSkipField(FIELD));}"
"com.google.gson.DisjunctionExclusionStrategyTest.testSkipFieldsWithFalseOnly",0,"public void testSkipFieldsWithFalseOnly()throws Exception {List<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();strategies.add(FALSE_STRATEGY);DisjunctionExclusionStrategy strategy=new DisjunctionExclusionStrategy(strategies);assertFalse(strategy.shouldSkipClass(CLAZZ));assertFalse(strategy.shouldSkipField(FIELD));}"
"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization",0,"public void testTopLevelArrayOfIntsSerialization(){int[]target={1,2,3,4,5,6,7,8,9};assertEquals(""[1,2,3,4,5,6,7,8,9]"",gson.toJson(target));}"
"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization",0,"public void testTopLevelArrayOfIntsDeserialization(){int[]expected={1,2,3,4,5,6,7,8,9};int[]actual=gson.fromJson(""[1,2,3,4,5,6,7,8,9]"",int[].class);MoreAsserts.assertEquals(expected,actual);}"
"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization",0,"public void testInvalidArrayDeserialization(){String json=""[1,2 3,4,5]"";try {gson.fromJson(json,int[].class);fail(""Gson should not deserialize array elements with missing ,"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.ArrayTest.testEmptyArraySerialization",0,"public void testEmptyArraySerialization(){int[]target={};assertEquals(""[]"",gson.toJson(target));}"
"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization",0,"public void testEmptyArrayDeserialization(){int[]actualObject=gson.fromJson(""[]"",int[].class);assertTrue(actualObject.length == 0);Integer[]actualObject2=gson.fromJson(""[]"",Integer[].class);assertTrue(actualObject2.length == 0);actualObject=gson.fromJson(""[]"",int[].class);assertTrue(actualObject.length == 0);}"
"com.google.gson.functional.ArrayTest.testNullsInArraySerialization",0,"public void testNullsInArraySerialization(){String[]array={""foo"",null,""bar""};String expected=""[\""foo\"",null,\""bar\""]"";String json=gson.toJson(array);assertEquals(expected,json);}"
"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization",0,"public void testNullsInArrayDeserialization(){String json=""[\""foo\"",null,\""bar\""]"";String[]expected={""foo"",null,""bar""};String[]target=gson.fromJson(json,expected.getClass());for (int i=0;i < expected.length;++i){assertEquals(expected[i],target[i]);}}"
"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization",0,"public void testSingleNullInArraySerialization(){BagOfPrimitives[]array=new BagOfPrimitives[1];array[0]=null;String json=gson.toJson(array);assertEquals(""[null]"",json);}"
"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization",0,"public void testSingleNullInArrayDeserialization(){BagOfPrimitives[]array=gson.fromJson(""[null]"",BagOfPrimitives[].class);assertNull(array[0]);}"
"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization",0,"public void testNullsInArrayWithSerializeNullPropertySetSerialization(){gson=new GsonBuilder().serializeNulls().create();String[]array={""foo"",null,""bar""};String expected=""[\""foo\"",null,\""bar\""]"";String json=gson.toJson(array);assertEquals(expected,json);}"
"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization",0,"public void testArrayOfStringsSerialization(){String[]target={""Hello"",""World""};assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target));}"
"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization",0,"public void testArrayOfStringsDeserialization(){String json=""[\""Hello\"",\""World\""]"";String[]target=gson.fromJson(json,String[].class);assertEquals(""Hello"",target[0]);assertEquals(""World"",target[1]);}"
"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization",0,"public void testSingleStringArraySerialization()throws Exception {String[]s={""hello""};String output=gson.toJson(s);assertEquals(""[\""hello\""]"",output);}"
"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization",0,"public void testSingleStringArrayDeserialization()throws Exception {String json=""[\""hello\""]"";String[]arrayType=gson.fromJson(json,String[].class);assertEquals(1,arrayType.length);assertEquals(""hello"",arrayType[0]);String type=gson.fromJson(json,String.class);assertEquals(""hello"",type);}"
"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization",0,"@SuppressWarnings(""unchecked"")public void testArrayOfCollectionSerialization()throws Exception {StringBuilder sb=new StringBuilder(""["");int arraySize=3;Type typeToSerialize=new TypeToken<Collection<Integer>[]>(){}.getType();Collection<Integer>[]arrayOfCollection=new ArrayList[arraySize];for (int i=0;i < arraySize;++i){int startValue=(3 * i)+ 1;sb.append('[').append(startValue).append(',').append(startValue + 1).append(']');ArrayList<Integer> tmpList=new ArrayList<Integer>();tmpList.add(startValue);tmpList.add(startValue + 1);arrayOfCollection[i]=tmpList;if (i < arraySize - 1){sb.append(',');}}sb.append(']');String json=gson.toJson(arrayOfCollection,typeToSerialize);assertEquals(sb.toString(),json);}"
"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization",0,"public void testArrayOfCollectionDeserialization()throws Exception {String json=""[[1,2],[3,4]]"";Type type=new TypeToken<Collection<Integer>[]>(){}.getType();Collection<Integer>[]target=gson.fromJson(json,type);assertEquals(2,target.length);MoreAsserts.assertEquals(new Integer[]{1,2},target[0].toArray(new Integer[0]));MoreAsserts.assertEquals(new Integer[]{3,4},target[1].toArray(new Integer[0]));}"
"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesWithCustomTypeAdapter",0,"public void testArrayOfPrimitivesWithCustomTypeAdapter()throws Exception {CrazyLongTypeAdapter typeAdapter=new CrazyLongTypeAdapter();gson=new GsonBuilder().registerTypeAdapter(long.class,typeAdapter).registerTypeAdapter(Long.class,typeAdapter).create();long[]value={1L};String serializedValue=gson.toJson(value);String expected=""["" + String.valueOf(value[0]+ CrazyLongTypeAdapter.DIFFERENCE)+ ""]"";assertEquals(expected,serializedValue);long[]deserializedValue=gson.fromJson(serializedValue,long[].class);assertEquals(1,deserializedValue.length);assertEquals(value[0],deserializedValue[0]);}"
"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization",0,"public void testArrayOfPrimitivesAsObjectsSerialization()throws Exception {Object[]objs=new Object[]{1,""abc"",0.3f,5L};String json=gson.toJson(objs);assertTrue(json.contains(""abc""));assertTrue(json.contains(""0.3""));assertTrue(json.contains(""5""));}"
"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization",0,"public void testArrayOfPrimitivesAsObjectsDeserialization()throws Exception {String json=""[1,'abc',0.3,5]"";Object[]objs=gson.fromJson(json,Object[].class);assertEquals(1,objs[0]);assertEquals(""abc"",objs[1]);assertEquals(new BigDecimal(""0.3""),objs[2]);assertEquals(5,objs[3]);}"
"com.google.gson.functional.ArrayTest.testArrayOfObjectsWithoutTypeInfoDeserialization",0,"public void testArrayOfObjectsWithoutTypeInfoDeserialization()throws Exception {String json=""[1,'abc',{a:1},5]"";try {gson.fromJson(json,Object[].class);fail(""This is crazy....how did we deserialize it!!!"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.ArrayTest.testArrayWithoutTypeInfoDeserialization",0,"public void testArrayWithoutTypeInfoDeserialization()throws Exception {String json=""[1,'abc',[1,2],5]"";try {gson.fromJson(json,Object[].class);fail(""This is crazy....how did we deserialize it!!!"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization",0,"public void testObjectArrayWithNonPrimitivesSerialization()throws Exception {ClassWithObjects classWithObjects=new ClassWithObjects();BagOfPrimitives bagOfPrimitives=new BagOfPrimitives();String classWithObjectsJson=gson.toJson(classWithObjects);String bagOfPrimitivesJson=gson.toJson(bagOfPrimitives);Object[]objects=new Object[]{classWithObjects,bagOfPrimitives};String json=gson.toJson(objects);assertTrue(json.contains(classWithObjectsJson));assertTrue(json.contains(bagOfPrimitivesJson));}"
"com.google.gson.JsonStreamParserTest.testParseTwoStrings",0,"public void testParseTwoStrings(){String actualOne=parser.next().getAsString();assertEquals(""one"",actualOne);String actualTwo=parser.next().getAsString();assertEquals(""two"",actualTwo);}"
"com.google.gson.JsonStreamParserTest.testIterator",0,"public void testIterator(){assertTrue(parser.hasNext());assertEquals(""one"",parser.next().getAsString());assertTrue(parser.hasNext());assertEquals(""two"",parser.next().getAsString());assertFalse(parser.hasNext());}"
"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext",0,"public void testNoSideEffectForHasNext()throws Exception {assertTrue(parser.hasNext());assertTrue(parser.hasNext());assertTrue(parser.hasNext());assertEquals(""one"",parser.next().getAsString());assertTrue(parser.hasNext());assertTrue(parser.hasNext());assertEquals(""two"",parser.next().getAsString());assertFalse(parser.hasNext());assertFalse(parser.hasNext());}"
"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput",0,"public void testCallingNextBeyondAvailableInput(){parser.next();parser.next();try {parser.next();fail(""Parser should not go beyond available input"");}catch(NoSuchElementException expected){}}"
"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject",0,"public void testDefaultConstructorNotCalledOnObject()throws Exception {DataHolder data=new DataHolder(DEFAULT_VALUE);String json=gson.toJson(data);DataHolder actual=gson.fromJson(json,DataHolder.class);assertEquals(DEFAULT_VALUE + SUFFIX,actual.getData());}"
"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField",0,"public void testDefaultConstructorNotCalledOnField()throws Exception {DataHolderWrapper dataWrapper=new DataHolderWrapper(new DataHolder(DEFAULT_VALUE));String json=gson.toJson(dataWrapper);DataHolderWrapper actual=gson.fromJson(json,DataHolderWrapper.class);assertEquals(DEFAULT_VALUE + SUFFIX,actual.getWrappedData().getData());}"
"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization",0,"public void testJsonTypeFieldBasedDeserialization(){String json=""{field1:'abc',field2:'def',__type__:'SUB_TYPE1'}"";Gson gson=new GsonBuilder().registerTypeAdapter(MyBase.class,new JsonDeserializer<MyBase>(){public MyBase deserialize(JsonElement json,Type pojoType,JsonDeserializationContext context)throws JsonParseException {String type=json.getAsJsonObject().get(MyBase.TYPE_ACCESS).getAsString();return context.deserialize(json,SubTypes.valueOf(type).getSubclass());}}).create();SubType1 target=(SubType1)gson.fromJson(json,MyBase.class);assertEquals(""abc"",target.field1);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject",0,"public void testCustomDeserializerReturnsNullForTopLevelObject(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{baseName:'Base',subName:'SubRevised'}"";Base target=gson.fromJson(json,Base.class);assertNull(target);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull",0,"public void testCustomDeserializerReturnsNull(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{base:{baseName:'Base',subName:'SubRevised'}}"";ClassWithBaseField target=gson.fromJson(json,ClassWithBaseField.class);assertNull(target.base);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelPrimitives",0,"public void testCustomDeserializerReturnsNullForTopLevelPrimitives(){Gson gson=new GsonBuilder().registerTypeAdapter(long.class,new JsonDeserializer<Long>(){public Long deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""10"";assertNull(gson.fromJson(json,long.class));}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForPrimitiveFields",0,"public void testCustomDeserializerReturnsNullForPrimitiveFields(){Gson gson=new GsonBuilder().registerTypeAdapter(long.class,new JsonDeserializer<Long>(){public Long deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{field:10}"";ClassWithLong target=gson.fromJson(json,ClassWithLong.class);assertEquals(0,target.field);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements",0,"public void testCustomDeserializerReturnsNullForArrayElements(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""[{baseName:'Base'},{baseName:'Base'}]"";Base[]target=gson.fromJson(json,Base[].class);assertNull(target[0]);assertNull(target[1]);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField",0,"public void testCustomDeserializerReturnsNullForArrayElementsForArrayField(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{bases:[{baseName:'Base'},{baseName:'Base'}]}"";ClassWithBaseArray target=gson.fromJson(json,ClassWithBaseArray.class);assertNull(target.bases[0]);assertNull(target.bases[1]);}"
"com.google.gson.ParameterizedTypeImplTest.testOurTypeFunctionality",0,"public void testOurTypeFunctionality()throws Exception {assertNull(ourType.getOwnerType());assertEquals(String.class,ourType.getActualTypeArguments()[0]);assertEquals(List.class,ourType.getRawType());assertEquals(parameterizedType,ourType);assertEquals(parameterizedType.hashCode(),ourType.hashCode());}"
"com.google.gson.ParameterizedTypeImplTest.testNotEquals",0,"public void testNotEquals()throws Exception {Type differentParameterizedType=new TypeToken<List<Integer>>(){}.getType();assertFalse(differentParameterizedType.equals(ourType));assertFalse(ourType.equals(differentParameterizedType));}"
"com.google.gson.JsonFieldNameValidatorTest.testValidFieldBeginsWithDollarSign",0,"public void testValidFieldBeginsWithDollarSign()throws Exception {String fieldName=""$abc"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testValidFieldBeginsWithUnderscore",0,"public void testValidFieldBeginsWithUnderscore()throws Exception {String fieldName=""_abc"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testValidFieldBeginsWithLetter",0,"public void testValidFieldBeginsWithLetter()throws Exception {String fieldName=""abc"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testValidFieldMixingLetter",0,"public void testValidFieldMixingLetter()throws Exception {String fieldName=""$abc_12v$34"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testInvalidFieldStartingWithNumbers",0,"public void testInvalidFieldStartingWithNumbers()throws Exception {try {validator.validate(""1abc"");fail(""Json field name can not start with a number"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.JsonFieldNameValidatorTest.testInvalidFieldStartingTwoDollarSigns",0,"public void testInvalidFieldStartingTwoDollarSigns()throws Exception {try {validator.validate(""$$abc"");fail(""Json field name can not start with a double dollar sign"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.JsonFieldNameValidatorTest.testInvalidFieldStartingTwoUnderscores",0,"public void testInvalidFieldStartingTwoUnderscores()throws Exception {try {validator.validate(""__abc"");fail(""Json field name can not start with a double underscore"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.JsonFieldNameValidatorTest.testInvalidFieldStartingDollarUnderscore",0,"public void testInvalidFieldStartingDollarUnderscore()throws Exception {try {validator.validate(""$_abc"");fail(""Json field name can not start with two non-alphabet characters"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.JsonFieldNameValidatorTest.testJavaAndJsKeywordAsFieldName",0,"public void testJavaAndJsKeywordAsFieldName()throws Exception {String fieldName=""break"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testInvalidCharacters",0,"public void testInvalidCharacters()throws Exception {try {validator.validate(""abc.123"");fail(""Json field name can not contain a period character"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.JsonFieldNameValidatorTest.testDashesInFieldName",0,"public void testDashesInFieldName()throws Exception {String fieldName=""test-field-name"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testSpacesInFieldName",0,"public void testSpacesInFieldName()throws Exception {String fieldName=""test field name"";assertEquals(fieldName,validator.validate(fieldName));}"
"com.google.gson.JsonFieldNameValidatorTest.testSpacesInBeginningOfName",0,"public void testSpacesInBeginningOfName()throws Exception {try {validator.validate("" testFieldName"");fail(""Json field name can not contain a period character"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.TypeVariableTest.testSingle",1,"public void testSingle()throws Exception {Gson gson=new Gson();Bar bar1=new Bar(""someString"",1);ArrayList<Integer> arrayList=new ArrayList<Integer>();arrayList.add(1);arrayList.add(2);bar1.map.put(""key1"",arrayList);bar1.map.put(""key2"",new ArrayList<Integer>());String json=gson.toJson(bar1);System.out.println(json);Bar bar2=gson.fromJson(json,Bar.class);assertEquals(bar1,bar2);}"
"com.google.gson.functional.StringTest.testStringValueSerialization",0,"public void testStringValueSerialization()throws Exception {String value=""someRandomStringValue"";assertEquals('""' + value + '""',gson.toJson(value));}"
"com.google.gson.functional.StringTest.testStringValueDeserialization",0,"public void testStringValueDeserialization()throws Exception {String value=""someRandomStringValue"";String actual=gson.fromJson(""\"""" + value + ""\"""",String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization",0,"public void testSingleQuoteInStringSerialization()throws Exception {String valueWithQuotes=""beforeQuote'afterQuote"";String jsonRepresentation=gson.toJson(valueWithQuotes);assertEquals(valueWithQuotes,gson.fromJson(jsonRepresentation,String.class));}"
"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization",0,"public void testEscapedCtrlNInStringSerialization()throws Exception {String value=""a\nb"";String json=gson.toJson(value);assertEquals(""\""a\\nb\"""",json);}"
"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization",0,"public void testEscapedCtrlNInStringDeserialization()throws Exception {String json=""'a\\nb'"";String actual=gson.fromJson(json,String.class);assertEquals(""a\nb"",actual);}"
"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization",0,"public void testEscapedCtrlRInStringSerialization()throws Exception {String value=""a\rb"";String json=gson.toJson(value);assertEquals(""\""a\\rb\"""",json);}"
"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization",0,"public void testEscapedCtrlRInStringDeserialization()throws Exception {String json=""'a\\rb'"";String actual=gson.fromJson(json,String.class);assertEquals(""a\rb"",actual);}"
"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization",0,"public void testEscapedBackslashInStringSerialization()throws Exception {String value=""a\\b"";String json=gson.toJson(value);assertEquals(""\""a\\\\b\"""",json);}"
"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization",0,"public void testEscapedBackslashInStringDeserialization()throws Exception {String actual=gson.fromJson(""'a\\\\b'"",String.class);assertEquals(""a\\b"",actual);}"
"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization",0,"public void testSingleQuoteInStringDeserialization()throws Exception {String value=""beforeQuote'afterQuote"";String actual=gson.fromJson(""\"""" + value + ""\"""",String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization",0,"public void testEscapingQuotesInStringSerialization()throws Exception {String valueWithQuotes=""beforeQuote\""afterQuote"";String jsonRepresentation=gson.toJson(valueWithQuotes);String target=gson.fromJson(jsonRepresentation,String.class);assertEquals(valueWithQuotes,target);}"
"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization",0,"public void testEscapingQuotesInStringDeserialization()throws Exception {String value=""beforeQuote\\\""afterQuote"";String actual=gson.fromJson(""\"""" + value + ""\"""",String.class);String expected=""beforeQuote\""afterQuote"";assertEquals(expected,actual);}"
"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization",0,"public void testStringValueAsSingleElementArraySerialization()throws Exception {String[]target={""abc""};assertEquals(""[\""abc\""]"",gson.toJson(target));assertEquals(""[\""abc\""]"",gson.toJson(target,String[].class));}"
"com.google.gson.functional.StringTest.testStringValueAsSingleElementArrayDeserialization",0,"public void testStringValueAsSingleElementArrayDeserialization()throws Exception {String value=""someRandomStringValue"";String actual=gson.fromJson(""[\"""" + value + ""\""]"",String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization",0,"public void testStringWithEscapedSlashDeserialization(){String value=""/"";String json=""'\\/'"";String actual=gson.fromJson(json,String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testAssignmentCharSerialization",0,"/** * Created in response to http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23*/public void testAssignmentCharSerialization(){String value=""abc="";String json=gson.toJson(value);assertEquals(""\""abc\\u003d\"""",json);}"
"com.google.gson.functional.StringTest.testAssignmentCharDeserialization",0,"/** * Created in response to http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23*/public void testAssignmentCharDeserialization(){String json=""\""abc=\"""";String value=gson.fromJson(json,String.class);assertEquals(""abc="",value);json=""'abc\u003d'"";value=gson.fromJson(json,String.class);assertEquals(""abc="",value);}"
"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization",0,"public void testJavascriptKeywordsInStringSerialization(){String value=""null true false function"";String json=gson.toJson(value);assertEquals(""\"""" + value + ""\"""",json);}"
"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization",0,"public void testJavascriptKeywordsInStringDeserialization(){String json=""'null true false function'"";String value=gson.fromJson(json,String.class);assertEquals(json.substring(1,json.length()- 1),value);}"
"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization",0,"public void testDefaultLongSerialization()throws Exception {JsonElement element=LongSerializationPolicy.DEFAULT.serialize(1556L);assertTrue(element.isJsonPrimitive());JsonPrimitive jsonPrimitive=element.getAsJsonPrimitive();assertFalse(jsonPrimitive.isString());assertTrue(jsonPrimitive.isNumber());assertEquals(1556L,element.getAsLong());}"
"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization",0,"public void testStringLongSerialization()throws Exception {JsonElement element=LongSerializationPolicy.STRING.serialize(1556L);assertTrue(element.isJsonPrimitive());JsonPrimitive jsonPrimitive=element.getAsJsonPrimitive();assertFalse(jsonPrimitive.isNumber());assertTrue(jsonPrimitive.isString());assertEquals(""1556"",element.getAsString());}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers",0,"public void testCustomSerializers(){Gson gson=builder.registerTypeAdapter(ClassWithCustomTypeConverter.class,new JsonSerializer<ClassWithCustomTypeConverter>(){public JsonElement serialize(ClassWithCustomTypeConverter src,Type typeOfSrc,JsonSerializationContext context){JsonObject json=new JsonObject();json.addProperty(""bag"",5);json.addProperty(""value"",25);return json;}}).create();ClassWithCustomTypeConverter target=new ClassWithCustomTypeConverter();assertEquals(""{\""bag\"":5,\""value\"":25}"",gson.toJson(target));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers",0,"public void testCustomDeserializers(){Gson gson=new GsonBuilder().registerTypeAdapter(ClassWithCustomTypeConverter.class,new JsonDeserializer<ClassWithCustomTypeConverter>(){public ClassWithCustomTypeConverter deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context){JsonObject jsonObject=json.getAsJsonObject();int value=jsonObject.get(""bag"").getAsInt();return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,value,false,""""),value);}}).create();String json=""{\""bag\"":5,\""value\"":25}"";ClassWithCustomTypeConverter target=gson.fromJson(json,ClassWithCustomTypeConverter.class);assertEquals(5,target.getBag().getIntValue());}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers",0,"public void testCustomNestedSerializers(){Gson gson=new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class,new JsonSerializer<BagOfPrimitives>(){public JsonElement serialize(BagOfPrimitives src,Type typeOfSrc,JsonSerializationContext context){return new JsonPrimitive(6);}}).create();ClassWithCustomTypeConverter target=new ClassWithCustomTypeConverter();assertEquals(""{\""bag\"":6,\""value\"":10}"",gson.toJson(target));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers",0,"public void testCustomNestedDeserializers(){Gson gson=new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class,new JsonDeserializer<BagOfPrimitives>(){public BagOfPrimitives deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {int value=json.getAsInt();return new BagOfPrimitives(value,value,false,"""");}}).create();String json=""{\""bag\"":7,\""value\"":25}"";ClassWithCustomTypeConverter target=gson.fromJson(json,ClassWithCustomTypeConverter.class);assertEquals(7,target.getBag().getIntValue());}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses",0,"public void testCustomTypeAdapterDoesNotAppliesToSubClasses(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonSerializer<Base>(){public JsonElement serialize(Base src,Type typeOfSrc,JsonSerializationContext context){JsonObject json=new JsonObject();json.addProperty(""value"",src.baseValue);return json;}}).create();Base b=new Base();String json=gson.toJson(b);assertTrue(json.contains(""value""));b=new Derived();json=gson.toJson(b);assertTrue(json.contains(""derivedValue""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass",0,"public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonSerializer<Base>(){public JsonElement serialize(Base src,Type typeOfSrc,JsonSerializationContext context){JsonObject json=new JsonObject();json.addProperty(""value"",src.baseValue);return json;}}).create();Base b=new Base();String json=gson.toJson(b);assertTrue(json.contains(""value""));b=new Derived();json=gson.toJson(b,Base.class);assertTrue(json.contains(""value""));assertFalse(json.contains(""derivedValue""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerForLong",0,"public void testCustomSerializerForLong(){final ClassWithBooleanField customSerializerInvoked=new ClassWithBooleanField();customSerializerInvoked.value=false;Gson gson=new GsonBuilder().registerTypeAdapter(Long.class,new JsonSerializer<Long>(){public JsonElement serialize(Long src,Type typeOfSrc,JsonSerializationContext context){customSerializerInvoked.value=true;return new JsonPrimitive(src);}}).serializeNulls().create();ClassWithWrapperLongField src=new ClassWithWrapperLongField();String json=gson.toJson(src);assertTrue(json.contains(""\""value\"":null""));assertFalse(customSerializerInvoked.value);customSerializerInvoked.value=false;src.value=10L;json=gson.toJson(src);assertTrue(json.contains(""\""value\"":10""));assertTrue(customSerializerInvoked.value);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerForLong",0,"public void testCustomDeserializerForLong(){final ClassWithBooleanField customDeserializerInvoked=new ClassWithBooleanField();customDeserializerInvoked.value=false;Gson gson=new GsonBuilder().registerTypeAdapter(Long.class,new JsonDeserializer<Long>(){public Long deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {customDeserializerInvoked.value=true;if (json == null || json.isJsonNull()){return null;}Number number=json.getAsJsonPrimitive().getAsNumber();return number == null ? null : number.longValue();}}).create();String json=""{'value':null}"";ClassWithWrapperLongField target=gson.fromJson(json,ClassWithWrapperLongField.class);assertNull(target.value);assertFalse(customDeserializerInvoked.value);customDeserializerInvoked.value=false;json=""{'value':10}"";target=gson.fromJson(json,ClassWithWrapperLongField.class);assertEquals(10L,target.value.longValue());assertTrue(customDeserializerInvoked.value);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer",0,"public void testCustomByteArraySerializer(){Gson gson=new GsonBuilder().registerTypeAdapter(byte[].class,new JsonSerializer<byte[]>(){public JsonElement serialize(byte[]src,Type typeOfSrc,JsonSerializationContext context){StringBuilder sb=new StringBuilder(src.length);for(byte b : src){sb.append(b);}return new JsonPrimitive(sb.toString());}}).create();byte[]data={0,1,2,3,4,5,6,7,8,9};String json=gson.toJson(data);assertEquals(""\""0123456789\"""",json);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator",0,"public void testCustomByteArrayDeserializerAndInstanceCreator(){GsonBuilder gsonBuilder=new GsonBuilder().registerTypeAdapter(byte[].class,new JsonDeserializer<byte[]>(){public byte[]deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {String str=json.getAsString();byte[]data=new byte[str.length()];for (int i=0;i < data.length;++i){data[i]=Byte.parseByte("""" + str.charAt(i));}return data;}});Gson gson=gsonBuilder.create();String json=""'0123456789'"";byte[]actual=gson.fromJson(json,byte[].class);byte[]expected={0,1,2,3,4,5,6,7,8,9};for (int i=0;i < actual.length;++i){assertEquals(expected[i],actual[i]);}}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType",0,"public void testCustomAdapterInvokedForCollectionElementSerializationWithType(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type setType=new TypeToken<Set<StringHolder>>(){}.getType();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Set<StringHolder> setOfHolders=new HashSet<StringHolder>();setOfHolders.add(holder);String json=gson.toJson(setOfHolders,setType);assertTrue(json.contains(""Jacob:Tomaw""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization",0,"public void testCustomAdapterInvokedForCollectionElementSerialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Set<StringHolder> setOfHolders=new HashSet<StringHolder>();setOfHolders.add(holder);String json=gson.toJson(setOfHolders);assertTrue(json.contains(""Jacob:Tomaw""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization",0,"public void testCustomAdapterInvokedForCollectionElementDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type setType=new TypeToken<Set<StringHolder>>(){}.getType();Set<StringHolder> setOfHolders=gson.fromJson(""['Jacob:Tomaw']"",setType);assertEquals(1,setOfHolders.size());StringHolder foo=setOfHolders.iterator().next();assertEquals(""Jacob"",foo.part1);assertEquals(""Tomaw"",foo.part2);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType",0,"public void testCustomAdapterInvokedForMapElementSerializationWithType(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type mapType=new TypeToken<Map<String,StringHolder>>(){}.getType();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Map<String,StringHolder> mapOfHolders=new HashMap<String,StringHolder>();mapOfHolders.put(""foo"",holder);String json=gson.toJson(mapOfHolders,mapType);assertTrue(json.contains(""\""foo\"":\""Jacob:Tomaw\""""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization",0,"public void testCustomAdapterInvokedForMapElementSerialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Map<String,StringHolder> mapOfHolders=new HashMap<String,StringHolder>();mapOfHolders.put(""foo"",holder);String json=gson.toJson(mapOfHolders);assertTrue(json.contains(""\""foo\"":\""Jacob:Tomaw\""""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization",0,"public void testCustomAdapterInvokedForMapElementDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type mapType=new TypeToken<Map<String,StringHolder>>(){}.getType();Map<String,StringHolder> mapOfFoo=gson.fromJson(""{'foo':'Jacob:Tomaw'}"",mapType);assertEquals(1,mapOfFoo.size());StringHolder foo=mapOfFoo.get(""foo"");assertEquals(""Jacob"",foo.part1);assertEquals(""Tomaw"",foo.part2);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues",0,"public void testEnsureCustomSerializerNotInvokedForNullValues(){Gson gson=new GsonBuilder().registerTypeAdapter(DataHolder.class,new DataHolderSerializer()).create();DataHolderWrapper target=new DataHolderWrapper(new DataHolder(""abc""));String json=gson.toJson(target);assertEquals(""{\""wrappedData\"":{\""myData\"":\""abc\""}}"",json);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues",0,"public void testEnsureCustomDeserializerNotInvokedForNullValues(){Gson gson=new GsonBuilder().registerTypeAdapter(DataHolder.class,new DataHolderDeserializer()).create();String json=""{wrappedData:null}"";DataHolderWrapper actual=gson.fromJson(json,DataHolderWrapper.class);assertNull(actual.wrappedData);}"
"com.google.gson.JavaFieldNamingPolicyTest.testFieldNamingPolicy",0,"public void testFieldNamingPolicy()throws Exception {FieldAttributes f=new FieldAttributes(String.class,String.class.getFields()[0]);assertEquals(f.getName(),namingPolicy.translateName(f));}"
"com.google.gson.JavaFieldNamingPolicyTest.testNullField",0,"public void testNullField()throws Exception {try {namingPolicy.translateName((FieldAttributes)null);fail(""Should have thrown an exception"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.metrics.PerformanceTest.testDummy",0,"public void testDummy(){}"
"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields",0,"public void testBaseClassSerializerInvokedForBaseClassFields(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).registerTypeAdapter(Sub.class,new SubSerializer()).create();ClassWithBaseField target=new ClassWithBaseField(new Base());JsonObject json=(JsonObject)gson.toJsonTree(target);JsonObject base=json.get(""base"").getAsJsonObject();assertEquals(BaseSerializer.NAME,base.get(Base.SERIALIZER_KEY).getAsString());}"
"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances",0,"public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).registerTypeAdapter(Sub.class,new SubSerializer()).create();ClassWithBaseField target=new ClassWithBaseField(new Sub());JsonObject json=(JsonObject)gson.toJsonTree(target);JsonObject base=json.get(""base"").getAsJsonObject();assertEquals(SubSerializer.NAME,base.get(Base.SERIALIZER_KEY).getAsString());}"
"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances",0,"public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).registerTypeAdapter(Sub.class,new SubSerializer()).create();ClassWithBaseArrayField target=new ClassWithBaseArrayField(new Base[]{new Sub(),new Sub()});JsonObject json=(JsonObject)gson.toJsonTree(target);JsonArray array=json.get(""base"").getAsJsonArray();for(JsonElement element : array){JsonElement serializerKey=element.getAsJsonObject().get(Base.SERIALIZER_KEY);assertEquals(SubSerializer.NAME,serializerKey.getAsString());}}"
"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances",0,"public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).create();ClassWithBaseField target=new ClassWithBaseField(new Sub());JsonObject json=(JsonObject)gson.toJsonTree(target);JsonObject base=json.get(""base"").getAsJsonObject();assertEquals(BaseSerializer.NAME,base.get(Base.SERIALIZER_KEY).getAsString());}"
"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull",0,"public void testSerializerReturnsNull(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonSerializer<Base>(){public JsonElement serialize(Base src,Type typeOfSrc,JsonSerializationContext context){return null;}}).create();JsonElement json=gson.toJsonTree(new Base());assertTrue(json.isJsonNull());}"
"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization",0,"public void testDateSerialization()throws Exception {int dateStyle=DateFormat.LONG;DefaultDateTypeAdapter dateTypeAdapter=new DefaultDateTypeAdapter(dateStyle);DateFormat formatter=DateFormat.getDateInstance(dateStyle);Date currentDate=new Date();String dateString=dateTypeAdapter.serialize(currentDate,Date.class,null).getAsString();assertEquals(formatter.format(currentDate),dateString);}"
"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern",0,"public void testDatePattern()throws Exception {String pattern=""yyyy-MM-dd"";DefaultDateTypeAdapter dateTypeAdapter=new DefaultDateTypeAdapter(pattern);DateFormat formatter=new SimpleDateFormat(pattern);Date currentDate=new Date();String dateString=dateTypeAdapter.serialize(currentDate,Date.class,null).getAsString();assertEquals(formatter.format(currentDate),dateString);}"
"com.google.gson.DefaultDateTypeAdapterTest.testInvalidDatePattern",0,"public void testInvalidDatePattern()throws Exception {try {new DefaultDateTypeAdapter(""I am a bad Date pattern...."");fail(""Invalid date pattern should fail."");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree",0,"public void testDeserializingCustomTree(){JsonObject obj=new JsonObject();obj.addProperty(""stringValue"",""foo"");obj.addProperty(""intValue"",11);BagOfPrimitives target=gson.fromJson(obj,BagOfPrimitives.class);assertEquals(11,target.intValue);assertEquals(""foo"",target.stringValue);}"
"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree",0,"public void testBadTypeForDeserializingCustomTree(){JsonObject obj=new JsonObject();obj.addProperty(""stringValue"",""foo"");obj.addProperty(""intValue"",11);JsonArray array=new JsonArray();array.add(obj);try {gson.fromJson(array,BagOfPrimitives.class);fail(""BagOfPrimitives is not an array"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree",0,"public void testBadFieldTypeForCustomDeserializerCustomTree(){JsonArray array=new JsonArray();array.add(new JsonPrimitive(""blah""));JsonObject obj=new JsonObject();obj.addProperty(""stringValue"",""foo"");obj.addProperty(""intValue"",11);obj.add(""longValue"",array);try {gson.fromJson(obj,BagOfPrimitives.class);fail(""BagOfPrimitives is not an array"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree",0,"public void testBadFieldTypeForDeserializingCustomTree(){JsonArray array=new JsonArray();array.add(new JsonPrimitive(""blah""));JsonObject primitive1=new JsonObject();primitive1.addProperty(""string"",""foo"");primitive1.addProperty(""intValue"",11);JsonObject obj=new JsonObject();obj.add(""primitive1"",primitive1);obj.add(""primitive2"",array);try {gson.fromJson(obj,Nested.class);fail(""Nested has field BagOfPrimitives which is not an array"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing",0,"public void testChangingCustomTreeAndDeserializing(){StringReader json=new StringReader(""{'stringValue':'no message','intValue':10,'longValue':20}"");JsonObject obj=(JsonObject)new JsonParser().parse(json);obj.remove(""stringValue"");obj.addProperty(""stringValue"",""fooBar"");BagOfPrimitives target=gson.fromJson(obj,BagOfPrimitives.class);assertEquals(10,target.intValue);assertEquals(20,target.longValue);assertEquals(""fooBar"",target.stringValue);}"
"com.google.gson.TypeInfoArrayTest.testArray",0,"public void testArray(){String[]a={""a"",""b"",""c""};TypeInfoArray typeInfo=new TypeInfoArray(a.getClass());assertEquals(a.getClass(),typeInfo.getRawClass());assertEquals(String.class,typeInfo.getComponentRawType());}"
"com.google.gson.TypeInfoArrayTest.testArrayOfArrays",0,"public void testArrayOfArrays(){String[][]a={new String[]{""a1"",""a2"",""a3""},new String[]{""b1"",""b2"",""b3""},new String[]{""c1"",""c2"",""c3""}};TypeInfoArray typeInfo=new TypeInfoArray(a.getClass());assertEquals(a.getClass(),typeInfo.getRawClass());assertEquals(String.class,typeInfo.getComponentRawType());assertEquals(String[].class,typeInfo.getSecondLevelType());}"
"com.google.gson.TypeInfoArrayTest.testParameterizedArray",0,"public void testParameterizedArray(){Type type=new TypeToken<List<String>[]>(){}.getType();TypeInfoArray typeInfo=new TypeInfoArray(type);assertEquals(List[].class,typeInfo.getRawClass());assertEquals(List.class,typeInfo.getComponentRawType());}"
"com.google.gson.TypeInfoArrayTest.testParameterizedArrayOfArrays",0,"public void testParameterizedArrayOfArrays(){Type type=new TypeToken<List<String>[][]>(){}.getType();Type secondLevelType=new TypeToken<List<String>[]>(){}.getType();TypeInfoArray typeInfo=new TypeInfoArray(type);assertEquals(List[][].class,typeInfo.getRawClass());assertEquals(secondLevelType,typeInfo.getSecondLevelType());assertEquals(List.class,typeInfo.getComponentRawType());}"
"com.google.gson.TypeInfoArrayTest.testNestedParameterizedArray",0,"public void testNestedParameterizedArray(){Type type=new TypeToken<List<List<String>>[]>(){}.getType();Type secondLevelType=new TypeToken<List<List<String>>>(){}.getType();TypeInfoArray typeInfo=new TypeInfoArray(type);assertEquals(List[].class,typeInfo.getRawClass());assertEquals(secondLevelType,typeInfo.getSecondLevelType());assertEquals(List.class,typeInfo.getComponentRawType());}"
"com.google.gson.TypeInfoArrayTest.testPrimitiveArray",0,"public void testPrimitiveArray()throws Exception {TypeInfoArray arrayTypeInfo=new TypeInfoArray(int[].class);assertTrue(arrayTypeInfo.isArray());assertFalse(arrayTypeInfo.isPrimitive());assertEquals(int.class,arrayTypeInfo.getSecondLevelType());}"
"com.google.gson.TypeInfoArrayTest.testStringArray",0,"public void testStringArray()throws Exception {TypeInfoArray arrayTypeInfo=new TypeInfoArray(String[].class);assertTrue(arrayTypeInfo.isArray());assertEquals(String.class,arrayTypeInfo.getSecondLevelType());assertEquals(String[].class,arrayTypeInfo.getRawClass());}"
"com.google.gson.TypeInfoArrayTest.testPrimitiveArrayType",0,"public void testPrimitiveArrayType()throws Exception {TypeInfoArray typeInfo=new TypeInfoArray(long[].class);assertTrue(typeInfo.isArray());assertEquals(long.class,typeInfo.getSecondLevelType());assertEquals(long[].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoArrayTest.testStringArrayType",0,"public void testStringArrayType()throws Exception {TypeInfoArray typeInfo=new TypeInfoArray(String[].class);assertTrue(typeInfo.isArray());assertEquals(String[].class,typeInfo.getRawClass());assertEquals(String.class,typeInfo.getSecondLevelType());}"
"com.google.gson.TypeInfoArrayTest.testArrayAsParameterizedTypes",0,"public void testArrayAsParameterizedTypes()throws Exception {Type type=new TypeToken<List<String>[]>(){}.getType();Type secondLevelType=new TypeToken<List<String>>(){}.getType();TypeInfoArray typeInfo=new TypeInfoArray(type);assertTrue(typeInfo.isArray());assertEquals(List[].class,typeInfo.getRawClass());assertEquals(secondLevelType,typeInfo.getSecondLevelType());Type actualType=typeInfo.getActualType();assertEquals(type,actualType);Type actualTypeForFirstTypeVariable=TypeUtils.getActualTypeForFirstTypeVariable(actualType);assertEquals(String.class,actualTypeForFirstTypeVariable);}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testInvalidConstruction",0,"public void testInvalidConstruction()throws Exception {try {new ModifyFirstLetterNamingPolicy(null);fail(""Null values are not allowed as a constructor parameters"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testLowerCaseFirstLetter",0,"public void testLowerCaseFirstLetter()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER);assertEquals(""blah"",policy.translateName(""Blah"",String.class,null));assertEquals(""blah"",policy.translateName(""blah"",String.class,null));}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testUpperCaseFirstLetter",0,"public void testUpperCaseFirstLetter()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);assertEquals(""Blah"",policy.translateName(""blah"",String.class,null));assertEquals(""Blah"",policy.translateName(""Blah"",String.class,null));}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testSingleCharacterField",0,"public void testSingleCharacterField()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);assertEquals(""B"",policy.translateName(""b"",String.class,null));assertEquals(""B"",policy.translateName(""B"",String.class,null));}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testFieldStartsWithUnderscore",0,"public void testFieldStartsWithUnderscore()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);assertEquals(""_Blah"",policy.translateName(""_blah"",String.class,null));assertEquals(""_Blah"",policy.translateName(""_Blah"",String.class,null));}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testFieldStartsWithUnderscoreFollowedBySingleLetter",0,"public void testFieldStartsWithUnderscoreFollowedBySingleLetter()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);assertEquals(""_B"",policy.translateName(""_b"",String.class,null));assertEquals(""_B"",policy.translateName(""_B"",String.class,null));}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testFieldHasSingleNonLetter",0,"public void testFieldHasSingleNonLetter()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER);assertEquals(""_"",policy.translateName(""_"",String.class,null));policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);assertEquals(""_"",policy.translateName(""_"",String.class,null));}"
"com.google.gson.ModifyFirstLetterNamingPolicyTest.testFieldHasNoLetters",0,"public void testFieldHasNoLetters()throws Exception {ModifyFirstLetterNamingPolicy policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER);assertEquals(""$_$"",policy.translateName(""$_$"",String.class,null));policy=new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER);assertEquals(""$_$"",policy.translateName(""$_$"",String.class,null));}"
"com.google.gson.TypeInfoFactoryTest.testSimpleField",0,"public void testSimpleField()throws Exception {Field f=obj.getClass().getField(""simpleField"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(String.class,typeInfo.getActualType());assertEquals(String.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testEnumField",0,"public void testEnumField()throws Exception {Field f=obj.getClass().getField(""enumField"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertTrue(typeInfo.isEnum());assertEquals(ObjectWithDifferentFields.TestEnum.class,typeInfo.getActualType());assertEquals(ObjectWithDifferentFields.TestEnum.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testParameterizedTypeField",0,"public void testParameterizedTypeField()throws Exception {Type listType=new TypeToken<List<String>>(){}.getType();Field f=obj.getClass().getField(""simpleParameterizedType"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testNestedParameterizedTypeField",0,"public void testNestedParameterizedTypeField()throws Exception {Type listType=new TypeToken<List<List<String>>>(){}.getType();Field f=obj.getClass().getField(""simpleNestedParameterizedType"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testGenericArrayTypeField",0,"public void testGenericArrayTypeField()throws Exception {Type listType=new TypeToken<List<String>[]>(){}.getType();Field f=obj.getClass().getField(""simpleGenericArray"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List[].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testTypeVariableField",0,"public void testTypeVariableField()throws Exception {Field f=obj.getClass().getField(""typeVariableObj"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(Integer.class,typeInfo.getActualType());assertEquals(Integer.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testTypeVariableArrayField",0,"public void testTypeVariableArrayField()throws Exception {Field f=obj.getClass().getField(""typeVariableArray"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(Integer[].class,typeInfo.getActualType());assertEquals(Integer[].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testMutliDimensionalTypeVariableArrayField",0,"public void testMutliDimensionalTypeVariableArrayField()throws Exception {Field f=obj.getClass().getField(""mutliDimensionalTypeVariableArray"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(Integer[][][].class,typeInfo.getActualType());assertEquals(Integer[][][].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testParameterizedTypeVariableField",0,"public void testParameterizedTypeVariableField()throws Exception {Type listType=new TypeToken<List<Integer>>(){}.getType();Field f=obj.getClass().getField(""listOfTypeVariables"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testNestedParameterizedTypeVariableField",0,"public void testNestedParameterizedTypeVariableField()throws Exception {Type listType=new TypeToken<List<List<Integer>>>(){}.getType();Field f=obj.getClass().getField(""listOfListsOfTypeVariables"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testParameterizedTypeVariableArrayField",0,"public void testParameterizedTypeVariableArrayField()throws Exception {Type listType=new TypeToken<List<Integer>[]>(){}.getType();Field f=obj.getClass().getField(""listOfTypeVariablesArray"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List[].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testWildcardField",0,"public void testWildcardField()throws Exception {Type listType=new TypeToken<List<Object>>(){}.getType();Field f=obj.getClass().getField(""listWithWildcard"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testArrayOfWildcardField",0,"public void testArrayOfWildcardField()throws Exception {Type listType=new TypeToken<List<Object>[]>(){}.getType();Field f=obj.getClass().getField(""arrayOfListWithWildcard"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List[].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testListStringWildcardField",0,"public void testListStringWildcardField()throws Exception {Type listType=new TypeToken<List<String>>(){}.getType();Field f=obj.getClass().getField(""listWithStringWildcard"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testArrayOfListStringWildcardField",0,"public void testArrayOfListStringWildcardField()throws Exception {Type listType=new TypeToken<List<String>[]>(){}.getType();Field f=obj.getClass().getField(""arrayOfListWithStringWildcard"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List[].class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testListTypeVariableWildcardField",0,"public void testListTypeVariableWildcardField()throws Exception {Type listType=new TypeToken<List<Integer>>(){}.getType();Field f=obj.getClass().getField(""listWithTypeVariableWildcard"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoFactoryTest.testArrayOfListTypeVariableWildcardField",0,"public void testArrayOfListTypeVariableWildcardField()throws Exception {Type listType=new TypeToken<List<Integer>[]>(){}.getType();Field f=obj.getClass().getField(""arrayOfListWithTypeVariableWildcard"");TypeInfo typeInfo=TypeInfoFactory.getTypeInfoForField(f,OBJ_TYPE);assertTrue(typeInfo.isArray());assertFalse(typeInfo.isEnum());assertEquals(listType,typeInfo.getActualType());assertEquals(List[].class,typeInfo.getRawClass());}"
"com.google.gson.LruCacheTest.testCacheHitAndMiss",0,"public void testCacheHitAndMiss()throws Exception {Cache<String,Integer> cache=new LruCache<String,Integer>(3);String key=""key1"";assertNull(cache.getElement(key));cache.addElement(key,1);assertEquals(1,cache.getElement(key).intValue());String key2=""key2"";cache.addElement(key2,2);assertEquals(1,cache.getElement(key).intValue());assertEquals(2,cache.getElement(key2).intValue());}"
"com.google.gson.LruCacheTest.testCacheKeyOverwrite",0,"public void testCacheKeyOverwrite()throws Exception {Cache<String,Integer> cache=new LruCache<String,Integer>(3);String key=""key1"";assertNull(cache.getElement(key));cache.addElement(key,1);assertEquals(1,cache.getElement(key).intValue());cache.addElement(key,5);assertEquals(5,cache.getElement(key).intValue());}"
"com.google.gson.LruCacheTest.testCacheEviction",0,"public void testCacheEviction()throws Exception {Cache<String,Integer> cache=new LruCache<String,Integer>(5);cache.addElement(""key1"",1);cache.addElement(""key2"",2);cache.addElement(""key3"",3);cache.addElement(""key4"",4);cache.addElement(""key5"",5);assertEquals(1,cache.getElement(""key1"").intValue());assertEquals(2,cache.getElement(""key2"").intValue());assertEquals(3,cache.getElement(""key3"").intValue());assertEquals(4,cache.getElement(""key4"").intValue());assertEquals(5,cache.getElement(""key5"").intValue());cache.getElement(""key1"");cache.getElement(""key3"");cache.addElement(""key6"",6);cache.addElement(""key7"",7);assertEquals(1,cache.getElement(""key1"").intValue());assertNull(cache.getElement(""key2""));assertEquals(3,cache.getElement(""key3"").intValue());assertNull(cache.getElement(""key4""));assertEquals(5,cache.getElement(""key5"").intValue());assertEquals(6,cache.getElement(""key6"").intValue());assertEquals(7,cache.getElement(""key7"").intValue());}"
"com.google.gson.JsonParserTest.testParseString",0,"public void testParseString(){String json=""{a:10,b:'c'}"";JsonElement e=parser.parse(json);assertTrue(e.isJsonObject());assertEquals(10,e.getAsJsonObject().get(""a"").getAsInt());assertEquals(""c"",e.getAsJsonObject().get(""b"").getAsString());}"
"com.google.gson.JsonParserTest.testParseEmptyString",0,"public void testParseEmptyString(){JsonElement e=parser.parse(""\""   \"""");assertTrue(e.isJsonPrimitive());assertEquals(""   "",e.getAsString());}"
"com.google.gson.JsonParserTest.testParseEmptyWhitespaceInput",0,"public void testParseEmptyWhitespaceInput(){JsonElement e=parser.parse(""     "");assertTrue(e.isJsonNull());}"
"com.google.gson.JsonParserTest.testParseMixedArray",0,"public void testParseMixedArray(){String json=""[{},13,\""stringValue\""]"";JsonElement e=parser.parse(json);assertTrue(e.isJsonArray());JsonArray array=e.getAsJsonArray();assertEquals(""{}"",array.get(0).toString());assertEquals(13,array.get(1).getAsInt());assertEquals(""stringValue"",array.get(2).getAsString());}"
"com.google.gson.JsonParserTest.testParseReader",0,"public void testParseReader(){StringReader reader=new StringReader(""{a:10,b:'c'}"");JsonElement e=parser.parse(reader);assertTrue(e.isJsonObject());assertEquals(10,e.getAsJsonObject().get(""a"").getAsInt());assertEquals(""c"",e.getAsJsonObject().get(""b"").getAsString());}"
"com.google.gson.JsonParserTest.testReadWriteTwoObjects",0,"public void testReadWriteTwoObjects()throws Exception {Gson gson=new Gson();CharArrayWriter writer=new CharArrayWriter();BagOfPrimitives expectedOne=new BagOfPrimitives(1,1,true,""one"");writer.write(gson.toJson(expectedOne).toCharArray());BagOfPrimitives expectedTwo=new BagOfPrimitives(2,2,false,""two"");writer.write(gson.toJson(expectedTwo).toCharArray());CharArrayReader reader=new CharArrayReader(writer.toCharArray());JsonReader parser=new JsonReader(reader);parser.setLenient(true);JsonElement element1=Streams.parse(parser);JsonElement element2=Streams.parse(parser);BagOfPrimitives actualOne=gson.fromJson(element1,BagOfPrimitives.class);assertEquals(""one"",actualOne.stringValue);BagOfPrimitives actualTwo=gson.fromJson(element2,BagOfPrimitives.class);assertEquals(""two"",actualTwo.stringValue);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization",0,"public void testUrlSerialization()throws Exception {String urlValue=""http://google.com/"";URL url=new URL(urlValue);assertEquals(""\""http://google.com/\"""",gson.toJson(url));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization",0,"public void testUrlDeserialization(){String urlValue=""http://google.com/"";String json=""'http:\\/\\/google.com\\/'"";URL target=gson.fromJson(json,URL.class);assertEquals(urlValue,target.toExternalForm());gson.fromJson('""' + urlValue + '""',URL.class);assertEquals(urlValue,target.toExternalForm());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization",0,"public void testUrlNullSerialization()throws Exception {ClassWithUrlField target=new ClassWithUrlField();assertEquals(""{}"",gson.toJson(target));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization",0,"public void testUrlNullDeserialization(){String json=""{}"";ClassWithUrlField target=gson.fromJson(json,ClassWithUrlField.class);assertNull(target.url);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization",0,"public void testUriSerialization()throws Exception {String uriValue=""http://google.com/"";URI uri=new URI(uriValue);assertEquals(""\""http://google.com/\"""",gson.toJson(uri));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization",0,"public void testUriDeserialization(){String uriValue=""http://google.com/"";String json='""' + uriValue + '""';URI target=gson.fromJson(json,URI.class);assertEquals(uriValue,target.toASCIIString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization",0,"public void testUuidSerialization()throws Exception {String uuidValue=""c237bec1-19ef-4858-a98e-521cf0aad4c0"";UUID uuid=UUID.fromString(uuidValue);assertEquals('""' + uuidValue + '""',gson.toJson(uuid));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization",0,"public void testUuidDeserialization(){String uuidValue=""c237bec1-19ef-4858-a98e-521cf0aad4c0"";String json='""' + uuidValue + '""';UUID target=gson.fromJson(json,UUID.class);assertEquals(uuidValue,target.toString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage",0,"public void testLocaleSerializationWithLanguage(){Locale target=new Locale(""en"");assertEquals(""\""en\"""",gson.toJson(target));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage",0,"public void testLocaleDeserializationWithLanguage(){String json=""\""en\"""";Locale locale=gson.fromJson(json,Locale.class);assertEquals(""en"",locale.getLanguage());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry",0,"public void testLocaleSerializationWithLanguageCountry(){Locale target=Locale.CANADA_FRENCH;assertEquals(""\""fr_CA\"""",gson.toJson(target));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry",0,"public void testLocaleDeserializationWithLanguageCountry(){String json=""\""fr_CA\"""";Locale locale=gson.fromJson(json,Locale.class);assertEquals(Locale.CANADA_FRENCH,locale);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant",0,"public void testLocaleSerializationWithLanguageCountryVariant(){Locale target=new Locale(""de"",""DE"",""EURO"");String json=gson.toJson(target);assertEquals(""\""de_DE_EURO\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant",0,"public void testLocaleDeserializationWithLanguageCountryVariant(){String json=""\""de_DE_EURO\"""";Locale locale=gson.fromJson(json,Locale.class);assertEquals(""de"",locale.getLanguage());assertEquals(""DE"",locale.getCountry());assertEquals(""EURO"",locale.getVariant());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization",0,"public void testBigDecimalFieldSerialization(){ClassWithBigDecimal target=new ClassWithBigDecimal(""-122.01e-21"");String json=gson.toJson(target);String actual=json.substring(json.indexOf(':')+ 1,json.indexOf('}'));assertEquals(target.value,new BigDecimal(actual));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization",0,"public void testBigDecimalFieldDeserialization(){ClassWithBigDecimal expected=new ClassWithBigDecimal(""-122.01e-21"");String json=expected.getExpectedJson();ClassWithBigDecimal actual=gson.fromJson(json,ClassWithBigDecimal.class);assertEquals(expected.value,actual.value);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization",0,"public void testBadValueForBigDecimalDeserialization(){try {gson.fromJson(""{\""value\""=1.5e-1.0031}"",ClassWithBigDecimal.class);fail(""Exponent of a BigDecimal must be an integer value."");}catch(JsonParseException expected){}}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization",0,"public void testBigIntegerFieldSerialization(){ClassWithBigInteger target=new ClassWithBigInteger(""23232323215323234234324324324324324324"");String json=gson.toJson(target);assertEquals(target.getExpectedJson(),json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization",0,"public void testBigIntegerFieldDeserialization(){ClassWithBigInteger expected=new ClassWithBigInteger(""879697697697697697697697697697697697"");String json=expected.getExpectedJson();ClassWithBigInteger actual=gson.fromJson(json,ClassWithBigInteger.class);assertEquals(expected.value,actual.value);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization",0,"public void testSetSerialization()throws Exception {Gson gson=new Gson();HashSet<String> s=new HashSet<String>();s.add(""blah"");String json=gson.toJson(s);assertEquals(""[\""blah\""]"",json);json=gson.toJson(s,Set.class);assertEquals(""[\""blah\""]"",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization",0,"public void testDefaultDateSerialization(){Date now=new Date();String json=gson.toJson(now);assertEquals(""\"""" + DateFormat.getDateTimeInstance().format(now)+ ""\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization",0,"public void testDefaultDateDeserialization(){String json=""'Dec 13,2009 07:18:02 AM'"";Date extracted=gson.fromJson(json,Date.class);assertEqualsDate(extracted,2009,11,13);assertEqualsTime(extracted,7,18,02);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization",0,"public void testDefaultJavaSqlDateSerialization(){java.sql.Date instant=new java.sql.Date(1259875082000L);String json=gson.toJson(instant);assertEquals(""\""Dec 3,2009\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization",0,"public void testDefaultJavaSqlDateDeserialization(){String json=""'Dec 3,2009'"";java.sql.Date extracted=gson.fromJson(json,java.sql.Date.class);assertEqualsDate(extracted,2009,11,3);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization",0,"public void testDefaultJavaSqlTimestampSerialization(){Timestamp now=new java.sql.Timestamp(1259875082000L);String json=gson.toJson(now);assertEquals(""\""Dec 3,2009 1:18:02 PM\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization",0,"public void testDefaultJavaSqlTimestampDeserialization(){String json=""'Dec 3,2009 1:18:02 PM'"";Timestamp extracted=gson.fromJson(json,Timestamp.class);assertEqualsDate(extracted,2009,11,3);assertEqualsTime(extracted,13,18,02);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization",0,"public void testDefaultJavaSqlTimeSerialization(){Time now=new Time(1259875082000L);String json=gson.toJson(now);assertEquals(""\""01:18:02 PM\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization",0,"public void testDefaultJavaSqlTimeDeserialization(){String json=""'1:18:02 PM'"";Time extracted=gson.fromJson(json,Time.class);assertEqualsTime(extracted,13,18,02);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder",0,"public void testDefaultDateSerializationUsingBuilder()throws Exception {Gson gson=new GsonBuilder().create();Date now=new Date();String json=gson.toJson(now);assertEquals(""\"""" + DateFormat.getDateTimeInstance().format(now)+ ""\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder",0,"public void testDefaultDateDeserializationUsingBuilder()throws Exception {Gson gson=new GsonBuilder().create();Date now=new Date();String json=gson.toJson(now);Date extracted=gson.fromJson(json,Date.class);assertEquals(now.toString(),extracted.toString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization",0,"public void testDefaultCalendarSerialization()throws Exception {Gson gson=new GsonBuilder().create();String json=gson.toJson(Calendar.getInstance());assertTrue(json.contains(""year""));assertTrue(json.contains(""month""));assertTrue(json.contains(""dayOfMonth""));assertTrue(json.contains(""hourOfDay""));assertTrue(json.contains(""minute""));assertTrue(json.contains(""second""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization",0,"public void testDefaultCalendarDeserialization()throws Exception {Gson gson=new GsonBuilder().create();String json=""{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"";Calendar cal=gson.fromJson(json,Calendar.class);assertEquals(2009,cal.get(Calendar.YEAR));assertEquals(2,cal.get(Calendar.MONTH));assertEquals(11,cal.get(Calendar.DAY_OF_MONTH));assertEquals(14,cal.get(Calendar.HOUR_OF_DAY));assertEquals(29,cal.get(Calendar.MINUTE));assertEquals(23,cal.get(Calendar.SECOND));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization",0,"public void testDefaultGregorianCalendarSerialization()throws Exception {Gson gson=new GsonBuilder().create();GregorianCalendar cal=new GregorianCalendar();String json=gson.toJson(cal);assertTrue(json.contains(""year""));assertTrue(json.contains(""month""));assertTrue(json.contains(""dayOfMonth""));assertTrue(json.contains(""hourOfDay""));assertTrue(json.contains(""minute""));assertTrue(json.contains(""second""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization",0,"public void testDefaultGregorianCalendarDeserialization()throws Exception {Gson gson=new GsonBuilder().create();String json=""{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"";GregorianCalendar cal=gson.fromJson(json,GregorianCalendar.class);assertEquals(2009,cal.get(Calendar.YEAR));assertEquals(2,cal.get(Calendar.MONTH));assertEquals(11,cal.get(Calendar.DAY_OF_MONTH));assertEquals(14,cal.get(Calendar.HOUR_OF_DAY));assertEquals(29,cal.get(Calendar.MINUTE));assertEquals(23,cal.get(Calendar.SECOND));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern",0,"public void testDateSerializationWithPattern()throws Exception {String pattern=""yyyy-MM-dd"";DateFormat formatter=new SimpleDateFormat(pattern);Gson gson=new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();Date now=new Date();String json=gson.toJson(now);assertEquals(""\"""" + formatter.format(now)+ ""\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern",0,"@SuppressWarnings(""deprecation"")public void testDateDeserializationWithPattern()throws Exception {String pattern=""yyyy-MM-dd"";Gson gson=new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();Date now=new Date();String json=gson.toJson(now);Date extracted=gson.fromJson(json,Date.class);assertEquals(now.getYear(),extracted.getYear());assertEquals(now.getMonth(),extracted.getMonth());assertEquals(now.getDay(),extracted.getDay());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter",0,"public void testDateSerializationWithPatternNotOverridenByTypeAdapter()throws Exception {String pattern=""yyyy-MM-dd"";DateFormat formatter=new SimpleDateFormat(pattern);Gson gson=new GsonBuilder().setDateFormat(pattern).registerTypeAdapter(Date.class,new JsonDeserializer<Date>(){public Date deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return new Date();}}).create();Date now=new Date();String expectedDateString=""\"""" + formatter.format(now)+ ""\"""";String json=gson.toJson(now);assertEquals(expectedDateString,json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization",0,"public void testPropertiesSerialization(){Properties props=new Properties();props.setProperty(""foo"",""bar"");String json=gson.toJson(props);String expected=""{\""foo\"":\""bar\""}"";assertEquals(expected,json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization",0,"public void testPropertiesDeserialization(){String json=""{foo:'bar'}"";Properties props=gson.fromJson(json,Properties.class);assertEquals(""bar"",props.getProperty(""foo""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization",0,"public void testTreeSetSerialization(){TreeSet<String> treeSet=new TreeSet<String>();treeSet.add(""Value1"");String json=gson.toJson(treeSet);assertEquals(""[\""Value1\""]"",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization",0,"public void testTreeSetDeserialization(){String json=""['Value1']"";Type type=new TypeToken<TreeSet<String>>(){}.getType();TreeSet<String> treeSet=gson.fromJson(json,type);assertTrue(treeSet.contains(""Value1""));}"
"com.google.gson.functional.InheritanceTest.testSubClassSerialization",0,"public void testSubClassSerialization()throws Exception {SubTypeOfNested target=new SubTypeOfNested(new BagOfPrimitives(10,20,false,""stringValue""),new BagOfPrimitives(30,40,true,""stringValue""));assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.InheritanceTest.testSubClassDeserialization",0,"public void testSubClassDeserialization()throws Exception {String json=""{\""value\"":5,\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,"" + ""\""booleanValue\"":false,\""stringValue\"":\""stringValue\""},\""primitive2\"":"" + ""{\""longValue\"":30,\""intValue\"":40,\""booleanValue\"":true,""+ ""\""stringValue\"":\""stringValue\""}}"";SubTypeOfNested target=gson.fromJson(json,SubTypeOfNested.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization",0,"public void testClassWithBaseFieldSerialization(){ClassWithBaseField sub=new ClassWithBaseField(new Sub());JsonObject json=(JsonObject)gson.toJsonTree(sub);JsonElement base=json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);assertEquals(Sub.SUB_NAME,base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());}"
"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization",0,"public void testClassWithBaseArrayFieldSerialization(){Base[]baseClasses=new Base[]{new Sub(),new Sub()};ClassWithBaseArrayField sub=new ClassWithBaseArrayField(baseClasses);JsonObject json=gson.toJsonTree(sub).getAsJsonObject();JsonArray bases=json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();for(JsonElement element : bases){assertEquals(Sub.SUB_NAME,element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());}}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub",0,"public void testBaseSerializedAsSub(){Base base=new Sub();JsonObject json=gson.toJsonTree(base).getAsJsonObject();assertEquals(Sub.SUB_NAME,json.get(Sub.SUB_FIELD_KEY).getAsString());}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod",0,"public void testBaseSerializedAsSubForToJsonMethod(){Base base=new Sub();String json=gson.toJson(base);assertTrue(json.contains(Sub.SUB_NAME));}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType",0,"public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType(){Base base=new Sub();JsonObject json=gson.toJsonTree(base,Base.class).getAsJsonObject();assertEquals(Base.BASE_NAME,json.get(Base.BASE_FIELD_KEY).getAsString());assertNull(json.get(Sub.SUB_FIELD_KEY));}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod",0,"public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod(){Base base=new Sub();String json=gson.toJson(base,Base.class);assertTrue(json.contains(Base.BASE_NAME));assertFalse(json.contains(Sub.SUB_FIELD_KEY));}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType",0,"public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType(){Base base=new Sub();JsonObject json=gson.toJsonTree(base,Sub.class).getAsJsonObject();assertEquals(Sub.SUB_NAME,json.get(Sub.SUB_FIELD_KEY).getAsString());}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod",0,"public void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod(){Base base=new Sub();String json=gson.toJson(base,Sub.class);assertTrue(json.contains(Sub.SUB_NAME));}"
"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization",0,"public void testSubInterfacesOfCollectionSerialization()throws Exception {List<Integer> list=new LinkedList<Integer>();list.add(0);list.add(1);list.add(2);list.add(3);Queue<Long> queue=new LinkedList<Long>();queue.add(0L);queue.add(1L);queue.add(2L);queue.add(3L);Set<Float> set=new TreeSet<Float>();set.add(0.1F);set.add(0.2F);set.add(0.3F);set.add(0.4F);SortedSet<Character> sortedSet=new TreeSet<Character>();sortedSet.add('a');sortedSet.add('b');sortedSet.add('c');sortedSet.add('d');ClassWithSubInterfacesOfCollection target=new ClassWithSubInterfacesOfCollection(list,queue,set,sortedSet);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization",0,"public void testSubInterfacesOfCollectionDeserialization()throws Exception {String json=""{\""list\"":[0,1,2,3],\""queue\"":[0,1,2,3],\""set\"":[0.1,0.2,0.3,0.4],"" + ""\""sortedSet\"":[\""a\"",\""b\"",\""c\"",\""d\""]"" + ""}"";ClassWithSubInterfacesOfCollection target=gson.fromJson(json,ClassWithSubInterfacesOfCollection.class);assertTrue(target.listContains(0,1,2,3));assertTrue(target.queueContains(0,1,2,3));assertTrue(target.setContains(0.1F,0.2F,0.3F,0.4F));assertTrue(target.sortedSetContains('a','b','c','d'));}"
"com.google.gson.FunctionWithInternalDependenciesTest.testAnonymousLocalClassesSerialization",0,"public void testAnonymousLocalClassesSerialization()throws Exception {LinkedList<ExclusionStrategy> strategies=new LinkedList<ExclusionStrategy>();strategies.add(new SyntheticFieldExclusionStrategy(true));strategies.add(new ModifierBasedExclusionStrategy(Modifier.TRANSIENT,Modifier.STATIC));ExclusionStrategy exclusionStrategy=new DisjunctionExclusionStrategy(strategies);Gson gson=new Gson(exclusionStrategy,exclusionStrategy,Gson.DEFAULT_NAMING_POLICY,new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),false,DefaultTypeAdapters.getDefaultSerializers(),DefaultTypeAdapters.getDefaultDeserializers(),Gson.DEFAULT_JSON_NON_EXECUTABLE,true,false);assertEquals(""{}"",gson.toJson(new ClassWithNoFields(){}));}"
"com.google.gson.FunctionWithInternalDependenciesTest.testUserDefinedExclusionPolicies",0,"public void testUserDefinedExclusionPolicies()throws Exception {Gson gson=new GsonBuilder().setExclusionStrategies(new UserDefinedExclusionStrategy(String.class)).create();String json=gson.toJson(new TestTypes.StringWrapper(""someValue""));assertEquals(""{}"",json);}"
"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testSingleThreadSerialization(){MyObject myObj=new MyObject();for (int i=0;i < 10;i++){gson.toJson(myObj);}}"
"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testSingleThreadDeserialization(){for (int i=0;i < 10;i++){gson.fromJson(""{'a':'hello','b':'world','i':1}"",MyObject.class);}}"
"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testMultiThreadSerialization()throws InterruptedException {final CountDownLatch startLatch=new CountDownLatch(1);final CountDownLatch finishedLatch=new CountDownLatch(10);final AtomicBoolean failed=new AtomicBoolean(false);ExecutorService executor=Executors.newFixedThreadPool(10);for (int taskCount=0;taskCount < 10;taskCount++){executor.execute(new Runnable(){public void run(){MyObject myObj=new MyObject();try {startLatch.await();for (int i=0;i < 10;i++){gson.toJson(myObj);}}catch(Throwable t){failed.set(true);}finally {finishedLatch.countDown();}}});}startLatch.countDown();finishedLatch.await();assertFalse(failed.get());}"
"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testMultiThreadDeserialization()throws InterruptedException {final CountDownLatch startLatch=new CountDownLatch(1);final CountDownLatch finishedLatch=new CountDownLatch(10);final AtomicBoolean failed=new AtomicBoolean(false);ExecutorService executor=Executors.newFixedThreadPool(10);for (int taskCount=0;taskCount < 10;taskCount++){executor.execute(new Runnable(){public void run(){try {startLatch.await();for (int i=0;i < 10;i++){gson.fromJson(""{'a':'hello','b':'world','i':1}"",MyObject.class);}}catch(Throwable t){failed.set(true);}finally {finishedLatch.countDown();}}});}startLatch.countDown();finishedLatch.await();assertFalse(failed.get());}"
"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization",0,"public void testStringsWithRawChineseCharactersDeserialization()throws Exception {String expected=""好好好"";String json=""\"""" + expected + ""\"""";String actual=gson.fromJson(json,String.class);assertEquals(expected,actual);}"
"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization",0,"public void testStringsWithUnicodeChineseCharactersSerialization()throws Exception {String target=""\u597d\u597d\u597d"";String json=gson.toJson(target);String expected=""\""\u597d\u597d\u597d\"""";assertEquals(expected,json);}"
"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization",0,"public void testStringsWithUnicodeChineseCharactersDeserialization()throws Exception {String expected=""\u597d\u597d\u597d"";String json=""\"""" + expected + ""\"""";String actual=gson.fromJson(json,String.class);assertEquals(expected,actual);}"
"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization",0,"public void testStringsWithUnicodeChineseCharactersEscapedDeserialization()throws Exception {String actual=gson.fromJson(""'\\u597d\\u597d\\u597d'"",String.class);assertEquals(""\u597d\u597d\u597d"",actual);}"
"com.google.gson.TypeInfoTest.testPrimitive",0,"public void testPrimitive()throws Exception {TypeInfo typeInfo=new TypeInfo(boolean.class);assertFalse(typeInfo.isArray());assertTrue(typeInfo.isPrimitive());assertEquals(boolean.class,typeInfo.getRawClass());assertEquals(Boolean.class,typeInfo.getWrappedClass());}"
"com.google.gson.TypeInfoTest.testPrimitiveWrapper",0,"public void testPrimitiveWrapper()throws Exception {TypeInfo typeInfo=new TypeInfo(Integer.class);assertEquals(Integer.class,typeInfo.getRawClass());assertTrue(typeInfo.isPrimitive());assertFalse(typeInfo.isArray());}"
"com.google.gson.TypeInfoTest.testString",0,"public void testString()throws Exception {TypeInfo typeInfo=new TypeInfo(String.class);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isPrimitive());assertEquals(String.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoTest.testObject",0,"public void testObject()throws Exception {TypeInfo typeInfo=new TypeInfo(Object.class);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isPrimitive());assertEquals(Object.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoTest.testPrimitiveType",0,"public void testPrimitiveType()throws Exception {TypeInfo typeInfo=new TypeInfo(long.class);assertFalse(typeInfo.isArray());assertEquals(long.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoTest.testObjectType",0,"public void testObjectType()throws Exception {TypeInfo typeInfo=new TypeInfo(String.class);assertFalse(typeInfo.isArray());assertFalse(typeInfo.isPrimitive());assertEquals(String.class,typeInfo.getRawClass());}"
"com.google.gson.TypeInfoTest.testParameterizedTypes",0,"public void testParameterizedTypes()throws Exception {Type type=new TypeToken<List<String>>(){}.getType();TypeInfo typeInfo=new TypeInfo(type);assertFalse(typeInfo.isArray());assertEquals(List.class,typeInfo.getRawClass());assertEquals(type,typeInfo.getActualType());}"
"com.google.gson.TypeInfoTest.testGenericizedGenericType",0,"public void testGenericizedGenericType()throws Exception {Type type=new TypeToken<List<List<String>>>(){}.getType();Type genericType=new TypeToken<List<String>>(){}.getType();TypeInfo typeInfo=new TypeInfo(type);assertFalse(typeInfo.isArray());assertEquals(List.class,typeInfo.getRawClass());Type actualTypeForFirstTypeVariable=TypeUtils.getActualTypeForFirstTypeVariable(type);assertEquals(genericType,actualTypeForFirstTypeVariable);typeInfo=new TypeInfo(genericType);actualTypeForFirstTypeVariable=TypeUtils.getActualTypeForFirstTypeVariable(genericType);assertEquals(String.class,actualTypeForFirstTypeVariable);}"
"com.google.gson.TypeInfoTest.testStrangeTypeParameters",0,"public void testStrangeTypeParameters()throws Exception {try {new TypeInfo(new Type(){});fail(""Should not be able to determine this unknown type"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.SerializedNameAnnotationInterceptingNamingPolicyTest.testFieldWithAnnotation",0,"public void testFieldWithAnnotation()throws Exception {String fieldName=""fieldWithAnnotation"";FieldAttributes f=new FieldAttributes(SomeObject.class,SomeObject.class.getField(fieldName));assertFalse(ANNOTATED_FIELD_NAME.equals(fieldName));assertEquals(ANNOTATED_FIELD_NAME,policy.translateName(f));}"
"com.google.gson.SerializedNameAnnotationInterceptingNamingPolicyTest.testFieldWithoutAnnotation",0,"public void testFieldWithoutAnnotation()throws Exception {String fieldName=""fieldWithoutAnnotation"";FieldAttributes f=new FieldAttributes(SomeObject.class,SomeObject.class.getField(fieldName));assertEquals(fieldName,policy.translateName(f));}"
"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization",0,"public void testNullExposeFieldSerialization()throws Exception {ClassWithExposedFields object=new ClassWithExposedFields(null,1);String json=gson.toJson(object);assertEquals(object.getExpectedJson(),json);}"
"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization",0,"public void testArrayWithOneNullExposeFieldObjectSerialization()throws Exception {ClassWithExposedFields object1=new ClassWithExposedFields(1,1);ClassWithExposedFields object2=new ClassWithExposedFields(null,1);ClassWithExposedFields object3=new ClassWithExposedFields(2,2);ClassWithExposedFields[]objects={object1,object2,object3};String json=gson.toJson(objects);String expected=new StringBuilder().append('[').append(object1.getExpectedJson()).append(',').append(object2.getExpectedJson()).append(',').append(object3.getExpectedJson()).append(']').toString();assertEquals(expected,json);}"
"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization",0,"public void testExposeAnnotationSerialization()throws Exception {ClassWithExposedFields target=new ClassWithExposedFields(1,2);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization",0,"public void testExposeAnnotationDeserialization()throws Exception {String json=""{a:3,b:4,d:20.0}"";ClassWithExposedFields target=gson.fromJson(json,ClassWithExposedFields.class);assertEquals(3,(int)target.a);assertNull(target.b);assertFalse(target.d == 20);}"
"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization",0,"public void testNoExposedFieldSerialization()throws Exception {ClassWithNoExposedFields obj=new ClassWithNoExposedFields();String json=gson.toJson(obj);assertEquals(""{}"",json);}"
"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization",0,"public void testNoExposedFieldDeserialization()throws Exception {String json=""{a:4,b:5}"";ClassWithNoExposedFields obj=gson.fromJson(json,ClassWithNoExposedFields.class);assertEquals(0,obj.a);assertEquals(1,obj.b);}"
"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization",0,"public void testExposedInterfaceFieldSerialization()throws Exception {String expected=""{\""interfaceField\"":{}}"";ClassWithInterfaceField target=new ClassWithInterfaceField(new SomeObject());String actual=gson.toJson(target);assertEquals(expected,actual);}"
"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization",0,"public void testExposedInterfaceFieldDeserialization()throws Exception {String json=""{\""interfaceField\"":{}}"";ClassWithInterfaceField obj=gson.fromJson(json,ClassWithInterfaceField.class);assertNotNull(obj.interfaceField);}"
"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization",0,"public void testTopLevelNullObjectSerialization(){Gson gson=gsonBuilder.create();String actual=gson.toJson(null);assertEquals(""null"",actual);actual=gson.toJson(null,String.class);assertEquals(""null"",actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization",0,"public void testTopLevelNullObjectDeserialization()throws Exception {Gson gson=gsonBuilder.create();String actual=gson.fromJson(""null"",String.class);assertNull(actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls",0,"public void testExplicitSerializationOfNulls(){Gson gson=gsonBuilder.create();ClassWithObjects target=new ClassWithObjects(null);String actual=gson.toJson(target);String expected=""{\""bag\"":null}"";assertEquals(expected,actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls",0,"public void testExplicitDeserializationOfNulls()throws Exception {Gson gson=gsonBuilder.create();ClassWithObjects target=gson.fromJson(""{\""bag\"":null}"",ClassWithObjects.class);assertNull(target.bag);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers",0,"public void testExplicitSerializationOfNullArrayMembers(){Gson gson=gsonBuilder.create();ClassWithMembers target=new ClassWithMembers();String json=gson.toJson(target);assertTrue(json.contains(""\""array\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization",0,"/** * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68*/public void testNullWrappedPrimitiveMemberSerialization(){Gson gson=gsonBuilder.serializeNulls().create();ClassWithNullWrappedPrimitive target=new ClassWithNullWrappedPrimitive();String json=gson.toJson(target);assertTrue(json.contains(""\""value\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization",0,"/** * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68*/public void testNullWrappedPrimitiveMemberDeserialization(){Gson gson=gsonBuilder.create();String json=""{'value':null}"";ClassWithNullWrappedPrimitive target=gson.fromJson(json,ClassWithNullWrappedPrimitive.class);assertNull(target.value);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers",0,"public void testExplicitSerializationOfNullCollectionMembers(){Gson gson=gsonBuilder.create();ClassWithMembers target=new ClassWithMembers();String json=gson.toJson(target);assertTrue(json.contains(""\""col\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers",0,"public void testExplicitSerializationOfNullStringMembers(){Gson gson=gsonBuilder.create();ClassWithMembers target=new ClassWithMembers();String json=gson.toJson(target);assertTrue(json.contains(""\""str\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls",0,"public void testCustomSerializationOfNulls(){gsonBuilder.registerTypeAdapter(ClassWithObjects.class,new ClassWithObjectsSerializer());Gson gson=gsonBuilder.create();ClassWithObjects target=new ClassWithObjects(new BagOfPrimitives());String actual=gson.toJson(target);String expected=""{\""bag\"":null}"";assertEquals(expected,actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls",0,"public void testPrintPrintingObjectWithNulls()throws Exception {gsonBuilder=new GsonBuilder();Gson gson=gsonBuilder.create();String result=gson.toJson(new ClassWithMembers());assertEquals(""{}"",result);gson=gsonBuilder.serializeNulls().create();result=gson.toJson(new ClassWithMembers());assertTrue(result.contains(""\""str\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls",0,"public void testPrintPrintingArraysWithNulls()throws Exception {gsonBuilder=new GsonBuilder();Gson gson=gsonBuilder.create();String result=gson.toJson(new String[]{""1"",null,""3""});assertEquals(""[\""1\"",null,\""3\""]"",result);gson=gsonBuilder.serializeNulls().create();result=gson.toJson(new String[]{""1"",null,""3""});assertEquals(""[\""1\"",null,\""3\""]"",result);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization",0,"public void testExplicitNullSetsFieldToNullDuringDeserialization(){Gson gson=new Gson();String json=""{value:null}"";ObjectWithField obj=gson.fromJson(json,ObjectWithField.class);assertNull(obj.value);}"
"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization",0,"public void testCustomTypeAdapterPassesNullSerialization(){Gson gson=new GsonBuilder().registerTypeAdapter(ObjectWithField.class,new JsonSerializer<ObjectWithField>(){public JsonElement serialize(ObjectWithField src,Type typeOfSrc,JsonSerializationContext context){return context.serialize(null);}}).create();ObjectWithField target=new ObjectWithField();target.value=""value1"";String json=gson.toJson(target);assertFalse(json.contains(""value1""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization",0,"public void testCustomTypeAdapterPassesNullDesrialization(){Gson gson=new GsonBuilder().registerTypeAdapter(ObjectWithField.class,new JsonDeserializer<ObjectWithField>(){public ObjectWithField deserialize(JsonElement json,Type type,JsonDeserializationContext context){return context.deserialize(null,type);}}).create();String json=""{value:'value1'}"";ObjectWithField target=gson.fromJson(json,ObjectWithField.class);assertNull(target);}"
"com.google.gson.functional.CircularReferenceTest.testCircularSerialization",0,"public void testCircularSerialization()throws Exception {ContainsReferenceToSelfType a=new ContainsReferenceToSelfType();ContainsReferenceToSelfType b=new ContainsReferenceToSelfType();a.children.add(b);b.children.add(a);try {gson.toJson(a);fail(""Circular types should not get printed!"");}catch(IllegalStateException expected){assertTrue(expected.getMessage().contains(""children""));}}"
"com.google.gson.functional.CircularReferenceTest.testSelfReferenceSerialization",0,"public void testSelfReferenceSerialization()throws Exception {ClassOverridingEquals objA=new ClassOverridingEquals();objA.ref=objA;try {gson.toJson(objA);fail(""Circular reference to self can not be serialized!"");}catch(IllegalStateException expected){}}"
"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization",0,"public void testSelfReferenceArrayFieldSerialization()throws Exception {ClassWithSelfReferenceArray objA=new ClassWithSelfReferenceArray();objA.children=new ClassWithSelfReferenceArray[]{objA};try {gson.toJson(objA);fail(""Circular reference to self can not be serialized!"");}catch(IllegalStateException expected){assertTrue(expected.getMessage().contains(""children""));}}"
"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization",0,"public void testSelfReferenceCustomHandlerSerialization()throws Exception {ClassWithSelfReference obj=new ClassWithSelfReference();obj.child=obj;Gson gson=new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class,new JsonSerializer<ClassWithSelfReference>(){public JsonElement serialize(ClassWithSelfReference src,Type typeOfSrc,JsonSerializationContext context){JsonObject obj=new JsonObject();obj.addProperty(""property"",""value"");obj.add(""child"",context.serialize(src.child));return obj;}}).create();try {gson.toJson(obj);fail(""Circular reference to self can not be serialized!"");}catch(IllegalStateException expected){assertTrue(expected.getMessage().contains(""Offending""));}}"
"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization",0,"public void testDirectedAcyclicGraphSerialization()throws Exception {ContainsReferenceToSelfType a=new ContainsReferenceToSelfType();ContainsReferenceToSelfType b=new ContainsReferenceToSelfType();ContainsReferenceToSelfType c=new ContainsReferenceToSelfType();a.children.add(b);a.children.add(c);b.children.add(c);assertNotNull(gson.toJson(a));}"
"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization",0,"public void testDirectedAcyclicGraphDeserialization()throws Exception {String json=""{\""children\"":[{\""children\"":[{\""children\"":[]}]},{\""children\"":[]}]}"";ContainsReferenceToSelfType target=gson.fromJson(json,ContainsReferenceToSelfType.class);assertNotNull(target);assertEquals(2,target.children.size());}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList",0,"public void testPrettyPrintList(){BagOfPrimitives b=new BagOfPrimitives();List<BagOfPrimitives> listOfB=new LinkedList<BagOfPrimitives>();for (int i=0;i < 15;++i){listOfB.add(b);}Type typeOfSrc=new TypeToken<List<BagOfPrimitives>>(){}.getType();String json=gson.toJson(listOfB,typeOfSrc);print(json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects",0,"public void testPrettyPrintArrayOfObjects(){ArrayOfObjects target=new ArrayOfObjects();String json=gson.toJson(target);print(json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives",0,"public void testPrettyPrintArrayOfPrimitives(){int[]ints=new int[]{1,2,3,4,5};String json=gson.toJson(ints);assertEquals(""[\n  1,\n  2,\n  3,\n  4,\n  5\n]"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays",0,"public void testPrettyPrintArrayOfPrimitiveArrays(){int[][]ints=new int[][]{{1,2},{3,4},{5,6},{7,8},{9,0},{10}};String json=gson.toJson(ints);assertEquals(""[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    5,\n    6\n  ],"" + ""\n  [\n    7,\n    8\n  ],\n  [\n    9,\n    0\n  ],\n  [\n    10\n  ]\n]"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays",0,"public void testPrettyPrintListOfPrimitiveArrays(){List<Integer[]> list=Arrays.asList(new Integer[][]{{1,2},{3,4},{5,6},{7,8},{9,0},{10}});String json=gson.toJson(list);assertEquals(""[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    5,\n    6\n  ],"" + ""\n  [\n    7,\n    8\n  ],\n  [\n    9,\n    0\n  ],\n  [\n    10\n  ]\n]"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testMap",0,"public void testMap(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""abc"",1);map.put(""def"",5);String json=gson.toJson(map);assertEquals(""{\n  \""abc\"": 1,\n  \""def\"": 5\n}"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField",0,"public void testEmptyMapField(){ClassWithMap obj=new ClassWithMap();obj.map=new LinkedHashMap<String,Integer>();String json=gson.toJson(obj);assertTrue(json.contains(""{\n  \""map\"": {},\n  \""value\"": 2\n}""));}"
"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays",0,"public void testMultipleArrays(){int[][][]ints=new int[][][]{{{1},{2}}};String json=gson.toJson(ints);assertEquals(""[\n  [\n    [\n      1\n    ],\n    [\n      2\n    ]\n  ]\n]"",json);}"
"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization",0,"public void testVersionedUntilSerialization(){Version1 target=new Version1();Gson gson=builder.setVersion(1.29).create();String json=gson.toJson(target);assertTrue(json.contains(""\""a\"":"" + A));gson=builder.setVersion(1.3).create();json=gson.toJson(target);assertFalse(json.contains(""\""a\"":"" + A));}"
"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization",0,"public void testVersionedUntilDeserialization(){Gson gson=builder.setVersion(1.3).create();String json=""{\""a\"":3,\""b\"":4,\""c\"":5}"";Version1 version1=gson.fromJson(json,Version1.class);assertEquals(A,version1.a);}"
"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization",0,"public void testVersionedClassesSerialization(){Gson gson=builder.setVersion(1.0).create();String json1=gson.toJson(new Version1());String json2=gson.toJson(new Version1_1());assertEquals(json1,json2);}"
"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization",0,"public void testVersionedClassesDeserialization(){Gson gson=builder.setVersion(1.0).create();String json=""{\""a\"":3,\""b\"":4,\""c\"":5}"";Version1 version1=gson.fromJson(json,Version1.class);assertEquals(3,version1.a);assertEquals(4,version1.b);Version1_1 version1_1=gson.fromJson(json,Version1_1.class);assertEquals(3,version1_1.a);assertEquals(4,version1_1.b);assertEquals(C,version1_1.c);}"
"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization",0,"public void testIgnoreLaterVersionClassSerialization(){Gson gson=builder.setVersion(1.0).create();assertEquals("""",gson.toJson(new Version1_2()));}"
"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization",0,"public void testIgnoreLaterVersionClassDeserialization(){Gson gson=builder.setVersion(1.0).create();String json=""{\""a\"":3,\""b\"":4,\""c\"":5,\""d\"":6}"";Version1_2 version1_2=gson.fromJson(json,Version1_2.class);assertEquals(A,version1_2.a);assertEquals(B,version1_2.b);assertEquals(C,version1_2.c);assertEquals(D,version1_2.d);}"
"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization",0,"public void testVersionedGsonWithUnversionedClassesSerialization(){Gson gson=builder.setVersion(1.0).create();BagOfPrimitives target=new BagOfPrimitives(10,20,false,""stringValue"");assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization",0,"public void testVersionedGsonWithUnversionedClassesDeserialization(){Gson gson=builder.setVersion(1.0).create();String json=""{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false}"";BagOfPrimitives expected=new BagOfPrimitives();expected.longValue=10;expected.intValue=20;expected.booleanValue=false;BagOfPrimitives actual=gson.fromJson(json,BagOfPrimitives.class);assertEquals(expected,actual);}"
"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization",0,"public void testVersionedGsonMixingSinceAndUntilSerialization(){Gson gson=builder.setVersion(1.0).create();SinceUntilMixing target=new SinceUntilMixing();String json=gson.toJson(target);assertFalse(json.contains(""\""b\"":"" + B));gson=builder.setVersion(1.2).create();json=gson.toJson(target);assertTrue(json.contains(""\""b\"":"" + B));gson=builder.setVersion(1.3).create();json=gson.toJson(target);assertFalse(json.contains(""\""b\"":"" + B));}"
"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization",0,"public void testVersionedGsonMixingSinceAndUntilDeserialization(){String json=""{\""a\"":5,\""b\"":6}"";Gson gson=builder.setVersion(1.0).create();SinceUntilMixing result=gson.fromJson(json,SinceUntilMixing.class);assertEquals(5,result.a);assertEquals(B,result.b);gson=builder.setVersion(1.2).create();result=gson.fromJson(json,SinceUntilMixing.class);assertEquals(5,result.a);assertEquals(6,result.b);gson=builder.setVersion(1.3).create();result=gson.fromJson(json,SinceUntilMixing.class);assertEquals(5,result.a);assertEquals(B,result.b);}"
"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties",0,"public void testAddingAndRemovingObjectProperties()throws Exception {JsonObject jsonObj=new JsonObject();String propertyName=""property"";assertFalse(jsonObj.has(propertyName));assertNull(jsonObj.get(propertyName));JsonPrimitive value=new JsonPrimitive(""blah"");jsonObj.add(propertyName,value);assertEquals(value,jsonObj.get(propertyName));JsonElement removedElement=jsonObj.remove(propertyName);assertEquals(value,removedElement);assertFalse(jsonObj.has(propertyName));}"
"com.google.gson.JsonObjectTest.testAddingNullPropertyValue",0,"public void testAddingNullPropertyValue()throws Exception {String propertyName=""property"";JsonObject jsonObj=new JsonObject();jsonObj.add(propertyName,null);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertTrue(jsonElement.isJsonNull());}"
"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName",0,"public void testAddingNullOrEmptyPropertyName()throws Exception {JsonObject jsonObj=new JsonObject();try {jsonObj.add(null,JsonNull.createJsonNull());fail(""Should not allow null property names."");}catch(IllegalArgumentException expected){}jsonObj.add("""",JsonNull.createJsonNull());jsonObj.add(""   \t"",JsonNull.createJsonNull());}"
"com.google.gson.JsonObjectTest.testAddingBooleanProperties",0,"public void testAddingBooleanProperties()throws Exception {String propertyName=""property"";JsonObject jsonObj=new JsonObject();jsonObj.addProperty(propertyName,true);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertTrue(jsonElement.getAsBoolean());}"
"com.google.gson.JsonObjectTest.testAddingStringProperties",0,"public void testAddingStringProperties()throws Exception {String propertyName=""property"";String value=""blah"";JsonObject jsonObj=new JsonObject();jsonObj.addProperty(propertyName,value);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertEquals(value,jsonElement.getAsString());}"
"com.google.gson.JsonObjectTest.testAddingCharacterProperties",0,"public void testAddingCharacterProperties()throws Exception {String propertyName=""property"";char value='a';JsonObject jsonObj=new JsonObject();jsonObj.addProperty(propertyName,value);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertEquals(String.valueOf(value),jsonElement.getAsString());assertEquals(value,jsonElement.getAsCharacter());}"
"com.google.gson.JsonObjectTest.testPropertyWithQuotes",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=182*/public void testPropertyWithQuotes(){JsonObject jsonObj=new JsonObject();jsonObj.add(""a\""b"",new JsonPrimitive(""c\""d""));String json=new Gson().toJson(jsonObj);assertEquals(""{\""a\\\""b\"":\""c\\\""d\""}"",json);}"
"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName",0,"/** * From issue 227.*/public void testWritePropertyWithEmptyStringName(){JsonObject jsonObj=new JsonObject();jsonObj.add("""",new JsonPrimitive(true));assertEquals(""{\""\"":true}"",new Gson().toJson(jsonObj));}"
"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName",0,"public void testReadPropertyWithEmptyStringName(){JsonObject jsonObj=new JsonParser().parse(""{\""\"":true}"").getAsJsonObject();assertEquals(true,jsonObj.get("""").getAsBoolean());}"
"com.google.gson.TypeUtilsTest.testGetActualTypeForFirstTypeVariable",0,"public void testGetActualTypeForFirstTypeVariable(){assertEquals(String.class,TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE));}"
"com.google.gson.TypeUtilsTest.testIsArrayForNonArrayClasses",0,"public void testIsArrayForNonArrayClasses(){assertFalse(TypeUtils.isArray(Boolean.class));assertFalse(TypeUtils.isArray(MAP_TYPE));}"
"com.google.gson.TypeUtilsTest.testIsArrayForArrayClasses",0,"public void testIsArrayForArrayClasses(){assertTrue(TypeUtils.isArray(String[].class));assertTrue(TypeUtils.isArray(Integer[][].class));assertTrue(TypeUtils.isArray(Collection[].class));}"
"com.google.gson.TypeUtilsTest.testToRawClassForNonGenericClasses",0,"public void testToRawClassForNonGenericClasses(){assertEquals(String.class,TypeUtils.toRawClass(String.class));}"
"com.google.gson.TypeUtilsTest.testToRawClassForGenericClasses",0,"public void testToRawClassForGenericClasses(){assertEquals(Map.class,TypeUtils.toRawClass(MAP_TYPE));}"
"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization",0,"public void testJsonInSingleQuotesDeserialization(){String json=""{'stringValue':'no message','intValue':10,'longValue':20}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""no message"",target.stringValue);assertEquals(10,target.intValue);assertEquals(20,target.longValue);}"
"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization",0,"public void testJsonInMixedQuotesDeserialization(){String json=""{\""stringValue\"":'no message','intValue':10,'longValue':20}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""no message"",target.stringValue);assertEquals(10,target.intValue);assertEquals(20,target.longValue);}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization",0,"public void testBagOfPrimitivesSerialization()throws Exception {BagOfPrimitives target=new BagOfPrimitives(10,20,false,""stringValue"");assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization",0,"public void testBagOfPrimitivesDeserialization()throws Exception {BagOfPrimitives src=new BagOfPrimitives(10,20,false,""stringValue"");String json=src.getExpectedJson();BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization",0,"public void testBagOfPrimitiveWrappersSerialization()throws Exception {BagOfPrimitiveWrappers target=new BagOfPrimitiveWrappers(10L,20,false);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization",0,"public void testBagOfPrimitiveWrappersDeserialization()throws Exception {BagOfPrimitiveWrappers target=new BagOfPrimitiveWrappers(10L,20,false);String jsonString=target.getExpectedJson();target=gson.fromJson(jsonString,BagOfPrimitiveWrappers.class);assertEquals(jsonString,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization",0,"public void testClassWithTransientFieldsSerialization()throws Exception {ClassWithTransientFields<Long> target=new ClassWithTransientFields<Long>(1L);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization",0,"@SuppressWarnings(""rawtypes"")public void testClassWithTransientFieldsDeserialization()throws Exception {String json=""{\""longValue\"":[1]}"";ClassWithTransientFields target=gson.fromJson(json,ClassWithTransientFields.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored",0,"@SuppressWarnings(""rawtypes"")public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()throws Exception {String json=""{\""transientLongValue\"":1,\""longValue\"":[1]}"";ClassWithTransientFields target=gson.fromJson(json,ClassWithTransientFields.class);assertFalse(target.transientLongValue != 1);}"
"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization",0,"public void testClassWithNoFieldsSerialization()throws Exception {assertEquals(""{}"",gson.toJson(new ClassWithNoFields()));}"
"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization",0,"public void testClassWithNoFieldsDeserialization()throws Exception {String json=""{}"";ClassWithNoFields target=gson.fromJson(json,ClassWithNoFields.class);ClassWithNoFields expected=new ClassWithNoFields();assertEquals(expected,target);}"
"com.google.gson.functional.ObjectTest.testNestedSerialization",0,"public void testNestedSerialization()throws Exception {Nested target=new Nested(new BagOfPrimitives(10,20,false,""stringValue""),new BagOfPrimitives(30,40,true,""stringValue""));assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testNestedDeserialization",0,"public void testNestedDeserialization()throws Exception {String json=""{\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false,"" + ""\""stringValue\"":\""stringValue\""},\""primitive2\"":{\""longValue\"":30,\""intValue\"":40,"" + ""\""booleanValue\"":true,\""stringValue\"":\""stringValue\""}}"";Nested target=gson.fromJson(json,Nested.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testNullSerialization",0,"public void testNullSerialization()throws Exception {assertEquals("""",gson.toJson(null));}"
"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization",0,"public void testEmptyStringDeserialization()throws Exception {Object object=gson.fromJson("""",Object.class);assertNull(object);}"
"com.google.gson.functional.ObjectTest.testNullDeserialization",0,"public void testNullDeserialization()throws Exception {String myNullObject=null;Object object=gson.fromJson(myNullObject,Object.class);assertNull(object);}"
"com.google.gson.functional.ObjectTest.testNullFieldsSerialization",0,"public void testNullFieldsSerialization()throws Exception {Nested target=new Nested(new BagOfPrimitives(10,20,false,""stringValue""),null);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization",0,"public void testNullFieldsDeserialization()throws Exception {String json=""{\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false"" + "",\""stringValue\"":\""stringValue\""}}"";Nested target=gson.fromJson(json,Nested.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization",0,"public void testArrayOfObjectsSerialization()throws Exception {ArrayOfObjects target=new ArrayOfObjects();assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization",0,"public void testArrayOfObjectsDeserialization()throws Exception {String json=new ArrayOfObjects().getExpectedJson();ArrayOfObjects target=gson.fromJson(json,ArrayOfObjects.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization",0,"public void testArrayOfArraysSerialization()throws Exception {ArrayOfArrays target=new ArrayOfArrays();assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization",0,"public void testArrayOfArraysDeserialization()throws Exception {String json=new ArrayOfArrays().getExpectedJson();ArrayOfArrays target=gson.fromJson(json,ArrayOfArrays.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields",0,"public void testArrayOfObjectsAsFields()throws Exception {ClassWithObjects classWithObjects=new ClassWithObjects();BagOfPrimitives bagOfPrimitives=new BagOfPrimitives();String stringValue=""someStringValueInArray"";String classWithObjectsJson=gson.toJson(classWithObjects);String bagOfPrimitivesJson=gson.toJson(bagOfPrimitives);ClassWithArray classWithArray=new ClassWithArray(new Object[]{stringValue,classWithObjects,bagOfPrimitives});String json=gson.toJson(classWithArray);assertTrue(json.contains(classWithObjectsJson));assertTrue(json.contains(bagOfPrimitivesJson));assertTrue(json.contains(""\"""" + stringValue + ""\""""));}"
"com.google.gson.functional.ObjectTest.testNullArraysDeserialization",0,"/** * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14*/public void testNullArraysDeserialization()throws Exception {String json=""{\""array\"": null}"";ClassWithArray target=gson.fromJson(json,ClassWithArray.class);assertNull(target.array);}"
"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization",0,"/** * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14*/public void testNullObjectFieldsDeserialization()throws Exception {String json=""{\""bag\"": null}"";ClassWithObjects target=gson.fromJson(json,ClassWithObjects.class);assertNull(target.bag);}"
"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization",0,"public void testEmptyCollectionInAnObjectDeserialization()throws Exception {String json=""{\""children\"":[]}"";ClassWithCollectionField target=gson.fromJson(json,ClassWithCollectionField.class);assertNotNull(target);assertTrue(target.children.isEmpty());}"
"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization",0,"public void testPrimitiveArrayInAnObjectDeserialization()throws Exception {String json=""{\""longArray\"":[0,1,2,3,4,5,6,7,8,9]}"";PrimitiveArray target=gson.fromJson(json,PrimitiveArray.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization",0,"/** * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14*/public void testNullPrimitiveFieldsDeserialization()throws Exception {String json=""{\""longValue\"":null}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(BagOfPrimitives.DEFAULT_VALUE,target.longValue);}"
"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization",0,"public void testEmptyCollectionInAnObjectSerialization()throws Exception {ClassWithCollectionField target=new ClassWithCollectionField();assertEquals(""{\""children\"":[]}"",gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization",0,"public void testPrivateNoArgConstructorDeserialization()throws Exception {ClassWithPrivateNoArgsConstructor target=gson.fromJson(""{\""a\"":20}"",ClassWithPrivateNoArgsConstructor.class);assertEquals(20,target.a);}"
"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization",0,"public void testAnonymousLocalClassesSerialization()throws Exception {assertEquals("""",gson.toJson(new ClassWithNoFields(){}));}"
"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization",0,"public void testPrimitiveArrayFieldSerialization(){PrimitiveArray target=new PrimitiveArray(new long[]{1L,2L,3L});assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization",0,"/** * Tests that a class field with type Object can be serialized properly.  See issue 54*/public void testClassWithObjectFieldSerialization(){ClassWithObjectField obj=new ClassWithObjectField();obj.member=""abc"";String json=gson.toJson(obj);assertTrue(json.contains(""abc""));}"
"com.google.gson.functional.ObjectTest.testInnerClassSerialization",0,"public void testInnerClassSerialization(){Parent p=new Parent();Parent.Child c=p.new Child();String json=gson.toJson(c);assertTrue(json.contains(""value2""));assertFalse(json.contains(""value1""));}"
"com.google.gson.functional.ObjectTest.testInnerClassDeserialization",0,"public void testInnerClassDeserialization(){final Parent p=new Parent();Gson gson=new GsonBuilder().registerTypeAdapter(Parent.Child.class,new InstanceCreator<Parent.Child>(){public Parent.Child createInstance(Type type){return p.new Child();}}).create();String json=""{'value2':3}"";Parent.Child c=gson.fromJson(json,Parent.Child.class);assertEquals(3,c.value2);}"
"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization",0,"/** * In response to Issue 41 http://code.google.com/p/google-gson/issues/detail?id=41*/public void testObjectFieldNamesWithoutQuotesDeserialization(){String json=""{longValue:1,'booleanValue':true,\""stringValue\"":'bar'}"";BagOfPrimitives bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(1,bag.longValue);assertTrue(bag.booleanValue);assertEquals(""bar"",bag.stringValue);}"
"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization",0,"public void testStringFieldWithNumberValueDeserialization(){String json=""{\""stringValue\"":1}"";BagOfPrimitives bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""1"",bag.stringValue);json=""{\""stringValue\"":1.5E+6}"";bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""1.5E+6"",bag.stringValue);json=""{\""stringValue\"":true}"";bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""true"",bag.stringValue);}"
"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization",0,"/** * Created to reproduce issue 140*/public void testStringFieldWithEmptyValueSerialization(){ClassWithEmptyStringFields target=new ClassWithEmptyStringFields();target.a=""5794749"";String json=gson.toJson(target);assertTrue(json.contains(""\""a\"":\""5794749\""""));assertTrue(json.contains(""\""b\"":\""\""""));assertTrue(json.contains(""\""c\"":\""\""""));}"
"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization",0,"/** * Created to reproduce issue 140*/public void testStringFieldWithEmptyValueDeserialization(){String json=""{a:\""5794749\"",b:\""\"",c:\""\""}"";ClassWithEmptyStringFields target=gson.fromJson(json,ClassWithEmptyStringFields.class);assertEquals(""5794749"",target.a);assertEquals("""",target.b);assertEquals("""",target.c);}"
"com.google.gson.functional.ObjectTest.testJsonObjectSerialization",0,"public void testJsonObjectSerialization(){Gson gson=new GsonBuilder().serializeNulls().create();JsonObject obj=new JsonObject();String json=gson.toJson(obj);assertEquals(""{}"",json);}"
"com.google.gson.functional.ObjectTest.testSingletonLists",0,"/** * Test for issue 215.*/public void testSingletonLists(){Gson gson=new Gson();Product product=new Product();assertEquals(""{\""attributes\"":[],\""departments\"":[]}"",gson.toJson(product));gson.fromJson(gson.toJson(product),Product.class);product.departments.add(new Department());assertEquals(""{\""attributes\"":[],\""departments\"":[{\""name\"":\""abc\"",\""code\"":\""123\""}]}"",gson.toJson(product));gson.fromJson(gson.toJson(product),Product.class);product.attributes.add(""456"");assertEquals(""{\""attributes\"":[\""456\""],\""departments\"":[{\""name\"":\""abc\"",\""code\"":\""123\""}]}"",gson.toJson(product));gson.fromJson(gson.toJson(product),Product.class);}"
"com.google.gson.stream.JsonReaderTest.testReadArray",0,"public void testReadArray()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[true,true]""));reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(true,reader.nextBoolean());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testReadEmptyArray",0,"public void testReadEmptyArray()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[]""));reader.beginArray();assertFalse(reader.hasNext());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testReadObject",0,"public void testReadObject()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"": \""android\"",\""b\"": \""banana\""}""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(""android"",reader.nextString());assertEquals(""b"",reader.nextName());assertEquals(""banana"",reader.nextString());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testReadEmptyObject",0,"public void testReadEmptyObject()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{}""));reader.beginObject();assertFalse(reader.hasNext());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipObject",0,"public void testSkipObject()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":{\""c\"": [],\""d\"": [true,true,{}]},\""b\"": \""banana\""}""));reader.beginObject();assertEquals(""a"",reader.nextName());reader.skipValue();assertEquals(""b"",reader.nextName());reader.skipValue();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testHelloWorld",0,"public void testHelloWorld()throws IOException {String json=""{\n"" + ""   \""hello\"": true,\n"" + ""   \""foo\"": [\""world\""]\n""+ ""}"";JsonReader reader=new JsonReader(new StringReader(json));reader.beginObject();assertEquals(""hello"",reader.nextName());assertEquals(true,reader.nextBoolean());assertEquals(""foo"",reader.nextName());reader.beginArray();assertEquals(""world"",reader.nextString());reader.endArray();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testNulls",0,"public void testNulls(){try {new JsonReader(null);fail();}catch(NullPointerException expected){}}"
"com.google.gson.stream.JsonReaderTest.testEmptyString",0,"public void testEmptyString()throws IOException {try {new JsonReader(new StringReader("""")).beginArray();}catch(IOException expected){}try {new JsonReader(new StringReader("""")).beginObject();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testNoTopLevelObject",0,"public void testNoTopLevelObject()throws IOException {try {new JsonReader(new StringReader(""true"")).nextBoolean();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testCharacterUnescaping",0,"public void testCharacterUnescaping()throws IOException {String json=""[\""a\"","" + ""\""a\\\""\"","" + ""\""\\\""\"",""+ ""\"":\"",""+ ""\"",\"",""+ ""\""\\b\"",""+ ""\""\\f\"",""+ ""\""\\n\"",""+ ""\""\\r\"",""+ ""\""\\t\"",""+ ""\"" \"",""+ ""\""\\\\\"",""+ ""\""{\"",""+ ""\""}\"",""+ ""\""[\"",""+ ""\""]\"",""+ ""\""\\u0000\"",""+ ""\""\\u0019\"",""+ ""\""\\u20AC\""""+ ""]"";JsonReader reader=new JsonReader(new StringReader(json));reader.beginArray();assertEquals(""a"",reader.nextString());assertEquals(""a\"""",reader.nextString());assertEquals(""\"""",reader.nextString());assertEquals("":"",reader.nextString());assertEquals("","",reader.nextString());assertEquals(""\b"",reader.nextString());assertEquals(""\f"",reader.nextString());assertEquals(""\n"",reader.nextString());assertEquals(""\r"",reader.nextString());assertEquals(""\t"",reader.nextString());assertEquals("" "",reader.nextString());assertEquals(""\\"",reader.nextString());assertEquals(""{"",reader.nextString());assertEquals(""}"",reader.nextString());assertEquals(""["",reader.nextString());assertEquals(""]"",reader.nextString());assertEquals(""\0"",reader.nextString());assertEquals(""\u0019"",reader.nextString());assertEquals(""\u20AC"",reader.nextString());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testIntegersWithFractionalPartSpecified",0,"public void testIntegersWithFractionalPartSpecified()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[1.0,1.0,1.0]""));reader.beginArray();assertEquals(1.0,reader.nextDouble());assertEquals(1,reader.nextInt());assertEquals(1L,reader.nextLong());}"
"com.google.gson.stream.JsonReaderTest.testDoubles",0,"public void testDoubles()throws IOException {String json=""[-0.0,"" + ""1.0,"" + ""1.7976931348623157E308,""+ ""4.9E-324,""+ ""0.0,""+ ""-0.5,""+ ""2.2250738585072014E-308,""+ ""3.141592653589793,""+ ""2.718281828459045]"";JsonReader reader=new JsonReader(new StringReader(json));reader.beginArray();assertEquals(-0.0,reader.nextDouble());assertEquals(1.0,reader.nextDouble());assertEquals(1.7976931348623157E308,reader.nextDouble());assertEquals(4.9E-324,reader.nextDouble());assertEquals(0.0,reader.nextDouble());assertEquals(-0.5,reader.nextDouble());assertEquals(2.2250738585072014E-308,reader.nextDouble());assertEquals(3.141592653589793,reader.nextDouble());assertEquals(2.718281828459045,reader.nextDouble());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoubles",0,"public void testStrictNonFiniteDoubles()throws IOException {String json=""[NaN]"";JsonReader reader=new JsonReader(new StringReader(json));reader.beginArray();try {reader.nextDouble();fail();}catch(NumberFormatException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientNonFiniteDoubles",0,"public void testLenientNonFiniteDoubles()throws IOException {String json=""[NaN,-Infinity,Infinity]"";JsonReader reader=new JsonReader(new StringReader(json));reader.setLenient(true);reader.beginArray();assertTrue(Double.isNaN(reader.nextDouble()));assertEquals(Double.NEGATIVE_INFINITY,reader.nextDouble());assertEquals(Double.POSITIVE_INFINITY,reader.nextDouble());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testLongs",0,"public void testLongs()throws IOException {String json=""[0,0,0,"" + ""1,1,1,"" + ""-1,-1,-1,""+ ""-9223372036854775808,""+ ""9223372036854775807]"";JsonReader reader=new JsonReader(new StringReader(json));reader.beginArray();assertEquals(0L,reader.nextLong());assertEquals(0,reader.nextInt());assertEquals(0.0,reader.nextDouble());assertEquals(1L,reader.nextLong());assertEquals(1,reader.nextInt());assertEquals(1.0,reader.nextDouble());assertEquals(-1L,reader.nextLong());assertEquals(-1,reader.nextInt());assertEquals(-1.0,reader.nextDouble());try {reader.nextInt();fail();}catch(NumberFormatException expected){}assertEquals(Long.MIN_VALUE,reader.nextLong());try {reader.nextInt();fail();}catch(NumberFormatException expected){}assertEquals(Long.MAX_VALUE,reader.nextLong());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testNumberWithOctalPrefix",0,"public void testNumberWithOctalPrefix()throws IOException {String json=""[01]"";JsonReader reader=new JsonReader(new StringReader(json));reader.beginArray();try {reader.nextInt();fail();}catch(NumberFormatException expected){}try {reader.nextLong();fail();}catch(NumberFormatException expected){}try {reader.nextDouble();fail();}catch(NumberFormatException expected){}assertEquals(""01"",reader.nextString());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testBooleans",0,"public void testBooleans()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[true,false]""));reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(false,reader.nextBoolean());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testMixedCaseLiterals",0,"public void testMixedCaseLiterals()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[True,TruE,False,FALSE,NULL,nulL]""));reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(true,reader.nextBoolean());assertEquals(false,reader.nextBoolean());assertEquals(false,reader.nextBoolean());reader.nextNull();reader.nextNull();reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testMissingValue",0,"public void testMissingValue()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testPrematureEndOfInput",0,"public void testPrematureEndOfInput()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":true,""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());try {reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testPrematurelyClosed",0,"public void testPrematurelyClosed()throws IOException {try {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":[]}""));reader.beginObject();reader.close();reader.nextName();fail();}catch(IllegalStateException expected){}try {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":[]}""));reader.close();reader.beginObject();fail();}catch(IllegalStateException expected){}try {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":true}""));reader.beginObject();reader.nextName();reader.peek();reader.close();reader.nextBoolean();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonReaderTest.testNextFailuresDoNotAdvance",0,"public void testNextFailuresDoNotAdvance()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":true}""));reader.beginObject();try {reader.nextString();fail();}catch(IllegalStateException expected){}assertEquals(""a"",reader.nextName());try {reader.nextName();fail();}catch(IllegalStateException expected){}try {reader.beginArray();fail();}catch(IllegalStateException expected){}try {reader.endArray();fail();}catch(IllegalStateException expected){}try {reader.beginObject();fail();}catch(IllegalStateException expected){}try {reader.endObject();fail();}catch(IllegalStateException expected){}assertEquals(true,reader.nextBoolean());try {reader.nextString();fail();}catch(IllegalStateException expected){}try {reader.nextName();fail();}catch(IllegalStateException expected){}try {reader.beginArray();fail();}catch(IllegalStateException expected){}try {reader.endArray();fail();}catch(IllegalStateException expected){}reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());reader.close();}"
"com.google.gson.stream.JsonReaderTest.testStringNullIsNotNull",0,"public void testStringNullIsNotNull()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[\""null\""]""));reader.beginArray();try {reader.nextNull();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonReaderTest.testNullLiteralIsNotAString",0,"public void testNullLiteralIsNotAString()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[null]""));reader.beginArray();try {reader.nextString();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparator",0,"public void testStrictNameValueSeparator()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\""=true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextBoolean();fail();}catch(IOException expected){}reader=new JsonReader(new StringReader(""{\""a\""=>true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientNameValueSeparator",0,"public void testLenientNameValueSeparator()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\""=true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());reader=new JsonReader(new StringReader(""{\""a\""=>true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictComments",0,"public void testStrictComments()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[// comment \n true]""));reader.beginArray();try {reader.nextBoolean();fail();}catch(IOException expected){}reader=new JsonReader(new StringReader(""[# comment \n true]""));reader.beginArray();try {reader.nextBoolean();fail();}catch(IOException expected){}reader=new JsonReader(new StringReader(""[/* comment */ true]""));reader.beginArray();try {reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientComments",0,"public void testLenientComments()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[// comment \n true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader=new JsonReader(new StringReader(""[# comment \n true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader=new JsonReader(new StringReader(""[/* comment */ true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictUnquotedNames",0,"public void testStrictUnquotedNames()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{a:true}""));reader.beginObject();try {reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientUnquotedNames",0,"public void testLenientUnquotedNames()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{a:true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());}"
"com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNames",0,"public void testStrictSingleQuotedNames()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{'a':true}""));reader.beginObject();try {reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedNames",0,"public void testLenientSingleQuotedNames()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{'a':true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());}"
"com.google.gson.stream.JsonReaderTest.testStrictUnquotedStrings",0,"public void testStrictUnquotedStrings()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[a]""));reader.beginArray();try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientUnquotedStrings",0,"public void testLenientUnquotedStrings()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[a]""));reader.setLenient(true);reader.beginArray();assertEquals(""a"",reader.nextString());}"
"com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStrings",0,"public void testStrictSingleQuotedStrings()throws IOException {JsonReader reader=new JsonReader(new StringReader(""['a']""));reader.beginArray();try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedStrings",0,"public void testLenientSingleQuotedStrings()throws IOException {JsonReader reader=new JsonReader(new StringReader(""['a']""));reader.setLenient(true);reader.beginArray();assertEquals(""a"",reader.nextString());}"
"com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArray",0,"public void testStrictSemicolonDelimitedArray()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[true;true]""));reader.beginArray();try {reader.nextBoolean();reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedArray",0,"public void testLenientSemicolonDelimitedArray()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[true;true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePair",0,"public void testStrictSemicolonDelimitedNameValuePair()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":true;\""b\"":true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextBoolean();reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedNameValuePair",0,"public void testLenientSemicolonDelimitedNameValuePair()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":true;\""b\"":true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());assertEquals(""b"",reader.nextName());}"
"com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparators",0,"public void testStrictUnnecessaryArraySeparators()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[true,,true]""));reader.beginArray();assertEquals(true,reader.nextBoolean());try {reader.nextNull();fail();}catch(IOException expected){}reader=new JsonReader(new StringReader(""[,true]""));reader.beginArray();try {reader.nextNull();fail();}catch(IOException expected){}reader=new JsonReader(new StringReader(""[true,]""));reader.beginArray();assertEquals(true,reader.nextBoolean());try {reader.nextNull();fail();}catch(IOException expected){}reader=new JsonReader(new StringReader(""[,]""));reader.beginArray();try {reader.nextNull();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientUnnecessaryArraySeparators",0,"public void testLenientUnnecessaryArraySeparators()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[true,,true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader.nextNull();assertEquals(true,reader.nextBoolean());reader.endArray();reader=new JsonReader(new StringReader(""[,true]""));reader.setLenient(true);reader.beginArray();reader.nextNull();assertEquals(true,reader.nextBoolean());reader.endArray();reader=new JsonReader(new StringReader(""[true,]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader.nextNull();reader.endArray();reader=new JsonReader(new StringReader(""[,]""));reader.setLenient(true);reader.beginArray();reader.nextNull();reader.nextNull();reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValues",0,"public void testStrictMultipleTopLevelValues()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[][]""));reader.beginArray();reader.endArray();try {reader.peek();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientMultipleTopLevelValues",0,"public void testLenientMultipleTopLevelValues()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[]true {}""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(true,reader.nextBoolean());reader.beginObject();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStrictTopLevelValueType",0,"public void testStrictTopLevelValueType(){JsonReader reader=new JsonReader(new StringReader(""true""));try {reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientTopLevelValueType",0,"public void testLenientTopLevelValueType()throws IOException {JsonReader reader=new JsonReader(new StringReader(""true""));reader.setLenient(true);assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefix",0,"public void testStrictNonExecutePrefix(){JsonReader reader=new JsonReader(new StringReader("")]}'\n []""));try {reader.beginArray();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefix",0,"public void testLenientNonExecutePrefix()throws IOException {JsonReader reader=new JsonReader(new StringReader("")]}'\n []""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefixWithLeadingWhitespace",0,"public void testLenientNonExecutePrefixWithLeadingWhitespace()throws IOException {JsonReader reader=new JsonReader(new StringReader(""\r\n \t)]}'\n []""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testLenientPartialNonExecutePrefix",0,"public void testLenientPartialNonExecutePrefix()throws IOException {JsonReader reader=new JsonReader(new StringReader("")]}' []""));reader.setLenient(true);assertEquals("")"",reader.nextString());try {reader.peek();fail();}catch(IOException expected){}}"
"com.google.gson.TypeInfoMapTest.testInvalidConstruction",0,"public void testInvalidConstruction()throws Exception {try {new TypeInfoMap(String.class);fail(""Must be a ParameterizedType"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.TypeInfoMapTest.testNonMapConstruction",0,"public void testNonMapConstruction()throws Exception {try {Type parameterizedMapType=new TypeToken<List<String>>(){}.getType();new TypeInfoMap(parameterizedMapType);fail(""The raw type must be a Map"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.TypeInfoMapTest.testBasicGetters",0,"public void testBasicGetters()throws Exception {Type parameterizedMapType=new TypeToken<Map<String,Integer>>(){}.getType();TypeInfoMap mapTypeInfo=new TypeInfoMap(parameterizedMapType);assertEquals(String.class,mapTypeInfo.getKeyType());assertEquals(Integer.class,mapTypeInfo.getValueType());}"
"com.google.gson.TypeInfoMapTest.testMapImplementations",0,"public void testMapImplementations()throws Exception {Type parameterizedMapType=new TypeToken<HashMap<String,Integer>>(){}.getType();TypeInfoMap mapTypeInfo=new TypeInfoMap(parameterizedMapType);assertEquals(String.class,mapTypeInfo.getKeyType());assertEquals(Integer.class,mapTypeInfo.getValueType());}"
"com.google.gson.MemoryRefStackTest.testPeekEmptyStack",0,"public void testPeekEmptyStack()throws Exception {try {stack.peek();}catch(EmptyStackException expected){}}"
"com.google.gson.MemoryRefStackTest.testPushPeekAndPop",0,"public void testPushPeekAndPop()throws Exception {ObjectTypePair obj=new ObjectTypePair(this,getClass(),true);assertEquals(obj,stack.push(obj));assertEquals(obj,stack.peek());assertEquals(obj,stack.pop());}"
"com.google.gson.MemoryRefStackTest.testPopTooMany",0,"public void testPopTooMany()throws Exception {ObjectTypePair obj=new ObjectTypePair(this,getClass(),true);stack.push(obj);assertEquals(obj,stack.pop());try {stack.pop();}catch(EmptyStackException expected){}}"
"com.google.gson.MemoryRefStackTest.testContains",0,"public void testContains()throws Exception {MockObject objA=new MockObject();MockObject objB=new MockObject();assertEquals(objA,objB);stack.push(new ObjectTypePair(objA,MockObject.class,true));assertTrue(stack.contains(new ObjectTypePair(objA,MockObject.class,true)));assertFalse(stack.contains(new ObjectTypePair(objB,MockObject.class,true)));}"
"com.google.gson.UpperCaseNamingPolicyTest.testAllLowerCase",0,"public void testAllLowerCase()throws Exception {assertEquals(ALL_UPPER,namingPolicy.translateName(ALL_LOWER,String.class,null));}"
"com.google.gson.UpperCaseNamingPolicyTest.testAllUpperCase",0,"public void testAllUpperCase()throws Exception {assertEquals(ALL_UPPER,namingPolicy.translateName(ALL_UPPER,String.class,null));}"
"com.google.gson.UpperCaseNamingPolicyTest.testMixedCase",0,"public void testMixedCase()throws Exception {assertEquals(ALL_UPPER,namingPolicy.translateName(MIXED,String.class,null));}"
"com.google.gson.VersionExclusionStrategyTest.testDisallowNegativeValuesAndFailFast",0,"public void testDisallowNegativeValuesAndFailFast()throws Exception {try {new VersionExclusionStrategy(-1.0D);fail(""should have thrown an exception."");}catch(IllegalArgumentException expected){}}"
"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion",0,"public void testClassAndFieldAreAtSameVersion()throws Exception {Class<MockObject> clazz=MockObject.class;Field f=clazz.getField(""someField"");VersionExclusionStrategy strategy=new VersionExclusionStrategy(VERSION);assertFalse(strategy.shouldSkipClass(clazz));assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz,f)));}"
"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion",0,"public void testClassAndFieldAreBehindInVersion()throws Exception {Class<MockObject> clazz=MockObject.class;Field f=clazz.getField(""someField"");VersionExclusionStrategy strategy=new VersionExclusionStrategy(VERSION + 1);assertFalse(strategy.shouldSkipClass(clazz));assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz,f)));}"
"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion",0,"public void testClassAndFieldAreAheadInVersion()throws Exception {Class<MockObject> clazz=MockObject.class;Field f=clazz.getField(""someField"");VersionExclusionStrategy strategy=new VersionExclusionStrategy(VERSION - 1);assertTrue(strategy.shouldSkipClass(clazz));assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz,f)));}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType",0,"public void testInstanceCreatorReturnsBaseType(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new InstanceCreator<Base>(){public Base createInstance(Type type){return new Base();}}).create();String json=""{baseName:'BaseRevised',subName:'Sub'}"";Base base=gson.fromJson(json,Base.class);assertEquals(""BaseRevised"",base.baseName);}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject",0,"public void testInstanceCreatorReturnsSubTypeForTopLevelObject(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new InstanceCreator<Base>(){public Base createInstance(Type type){return new Sub();}}).create();String json=""{baseName:'Base',subName:'SubRevised'}"";Base base=gson.fromJson(json,Base.class);assertTrue(base instanceof Sub);Sub sub=(Sub)base;assertFalse(""SubRevised"".equals(sub.subName));assertEquals(Sub.SUB_NAME,sub.subName);}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField",0,"public void testInstanceCreatorReturnsSubTypeForField(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new InstanceCreator<Base>(){public Base createInstance(Type type){return new Sub();}}).create();String json=""{base:{baseName:'Base',subName:'SubRevised'}}"";ClassWithBaseField target=gson.fromJson(json,ClassWithBaseField.class);assertTrue(target.base instanceof Sub);assertEquals(""SubRevised"",((Sub)target.base).subName);}"
"com.google.gson.FieldAttributesTest.testNullField",0,"public void testNullField()throws Exception {try {new FieldAttributes(Foo.class,null);fail(""Field parameter can not be null"");}catch(NullPointerException expected){}}"
"com.google.gson.FieldAttributesTest.testDeclaringClass",0,"public void testDeclaringClass()throws Exception {assertEquals(Foo.class,fieldAttributes.getDeclaringClass());}"
"com.google.gson.FieldAttributesTest.testModifiers",0,"public void testModifiers()throws Exception {assertFalse(fieldAttributes.hasModifier(Modifier.STATIC));assertFalse(fieldAttributes.hasModifier(Modifier.FINAL));assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT));assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE));assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED));assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC));assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT));}"
"com.google.gson.FieldAttributesTest.testIsSynthetic",0,"public void testIsSynthetic()throws Exception {assertFalse(fieldAttributes.isSynthetic());}"
"com.google.gson.FieldAttributesTest.testName",0,"public void testName()throws Exception {assertEquals(""bar"",fieldAttributes.getName());}"
"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass",0,"public void testDeclaredTypeAndClass()throws Exception {Type expectedType=new TypeToken<List<String>>(){}.getType();assertEquals(expectedType,fieldAttributes.getDeclaredType());assertEquals(List.class,fieldAttributes.getDeclaredClass());}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testNullMap",0,"public void testNullMap()throws Exception {assertFalse(paramMap.hasSpecificHandlerFor(String.class));assertNull(paramMap.getHandlerFor(String.class));assertNull(paramMap.getHandlerFor(String.class));}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testHasGenericButNotSpecific",0,"public void testHasGenericButNotSpecific()throws Exception {Type specificType=new TypeToken<List<String>>(){}.getType();String handler=""blah"";paramMap.register(List.class,handler);assertFalse(paramMap.hasSpecificHandlerFor(specificType));assertTrue(paramMap.hasSpecificHandlerFor(List.class));assertNotNull(paramMap.getHandlerFor(specificType));assertNotNull(paramMap.getHandlerFor(List.class));assertEquals(handler,paramMap.getHandlerFor(specificType));}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testHasSpecificType",0,"public void testHasSpecificType()throws Exception {Type specificType=new TypeToken<List<String>>(){}.getType();String handler=""blah"";paramMap.register(specificType,handler);assertTrue(paramMap.hasSpecificHandlerFor(specificType));assertFalse(paramMap.hasSpecificHandlerFor(List.class));assertNotNull(paramMap.getHandlerFor(specificType));assertNull(paramMap.getHandlerFor(List.class));assertEquals(handler,paramMap.getHandlerFor(specificType));}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testTypeOverridding",0,"public void testTypeOverridding()throws Exception {String handler1=""blah1"";String handler2=""blah2"";paramMap.register(String.class,handler1);paramMap.register(String.class,handler2);assertTrue(paramMap.hasSpecificHandlerFor(String.class));assertEquals(handler2,paramMap.getHandlerFor(String.class));}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testMakeUnmodifiable",0,"public void testMakeUnmodifiable()throws Exception {paramMap.makeUnmodifiable();try {paramMap.register(String.class,""blah"");fail(""Can not register handlers when map is unmodifiable"");}catch(IllegalStateException expected){}}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testTypeHierarchy",0,"public void testTypeHierarchy(){paramMap.registerForTypeHierarchy(Base.class,""baseHandler"");String handler=paramMap.getHandlerFor(Sub.class);assertEquals(""baseHandler"",handler);}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testTypeHierarchyMultipleHandlers",0,"public void testTypeHierarchyMultipleHandlers(){paramMap.registerForTypeHierarchy(Base.class,""baseHandler"");paramMap.registerForTypeHierarchy(Sub.class,""subHandler"");String handler=paramMap.getHandlerFor(SubOfSub.class);assertEquals(""subHandler"",handler);}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testTypeHierarchyRegisterIfAbsent",0,"public void testTypeHierarchyRegisterIfAbsent(){paramMap.registerForTypeHierarchy(Base.class,""baseHandler"");ParameterizedTypeHandlerMap<String> otherMap=new ParameterizedTypeHandlerMap<String>();otherMap.registerForTypeHierarchy(Base.class,""baseHandler2"");paramMap.registerIfAbsent(otherMap);String handler=paramMap.getHandlerFor(Base.class);assertEquals(""baseHandler"",handler);}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testReplaceExistingTypeHierarchyHandler",0,"public void testReplaceExistingTypeHierarchyHandler(){paramMap.registerForTypeHierarchy(Base.class,""baseHandler"");paramMap.registerForTypeHierarchy(Base.class,""base2Handler"");String handler=paramMap.getHandlerFor(Base.class);assertEquals(""base2Handler"",handler);}"
"com.google.gson.ParameterizedTypeHandlerMapTest.testHidingExistingTypeHierarchyHandlerIsDisallowed",0,"public void testHidingExistingTypeHierarchyHandlerIsDisallowed(){paramMap.registerForTypeHierarchy(Sub.class,""subHandler"");try {paramMap.registerForTypeHierarchy(Base.class,""baseHandler"");fail(""A handler that hides an existing type hierarchy handler is not allowed"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.GenericArrayTypeImplTest.testOurTypeFunctionality",0,"public void testOurTypeFunctionality()throws Exception {assertEquals(parameterizedType,ourType.getGenericComponentType());assertEquals(genericArrayType,ourType);assertEquals(genericArrayType.hashCode(),ourType.hashCode());}"
"com.google.gson.GenericArrayTypeImplTest.testNotEquals",0,"public void testNotEquals()throws Exception {Type differentGenericArrayType=new TypeToken<List<String>[][]>(){}.getType();assertFalse(differentGenericArrayType.equals(ourType));assertFalse(ourType.equals(differentGenericArrayType));}"
"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization",0,"public void testTopLevelEnumSerialization()throws Exception {String result=gson.toJson(MyEnum.VALUE1);assertEquals('""' + MyEnum.VALUE1.toString()+ '""',result);}"
"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization",0,"public void testTopLevelEnumDeserialization()throws Exception {MyEnum result=gson.fromJson('""' + MyEnum.VALUE1.toString()+ '""',MyEnum.class);assertEquals(MyEnum.VALUE1,result);}"
"com.google.gson.functional.EnumTest.testTopLevelEnumInASingleElementArrayDeserialization",0,"public void testTopLevelEnumInASingleElementArrayDeserialization(){String json=""["" + MyEnum.VALUE1.getExpectedJson()+ ""]"";MyEnum target=gson.fromJson(json,MyEnum.class);assertEquals(json,""["" + target.getExpectedJson()+ ""]"");}"
"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization",0,"public void testCollectionOfEnumsSerialization(){Type type=new TypeToken<Collection<MyEnum>>(){}.getType();Collection<MyEnum> target=new ArrayList<MyEnum>();target.add(MyEnum.VALUE1);target.add(MyEnum.VALUE2);String expectedJson=""[\""VALUE1\"",\""VALUE2\""]"";String actualJson=gson.toJson(target);assertEquals(expectedJson,actualJson);actualJson=gson.toJson(target,type);assertEquals(expectedJson,actualJson);}"
"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization",0,"public void testCollectionOfEnumsDeserialization(){Type type=new TypeToken<Collection<MyEnum>>(){}.getType();String json=""[\""VALUE1\"",\""VALUE2\""]"";Collection<MyEnum> target=gson.fromJson(json,type);MoreAsserts.assertContains(target,MyEnum.VALUE1);MoreAsserts.assertContains(target,MyEnum.VALUE2);}"
"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization",0,"public void testClassWithEnumFieldSerialization()throws Exception {ClassWithEnumFields target=new ClassWithEnumFields();assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization",0,"public void testClassWithEnumFieldDeserialization()throws Exception {String json=""{value1:'VALUE1',value2:'VALUE2'}"";ClassWithEnumFields target=gson.fromJson(json,ClassWithEnumFields.class);assertEquals(MyEnum.VALUE1,target.value1);assertEquals(MyEnum.VALUE2,target.value2);}"
"com.google.gson.functional.EnumTest.testEnumSubclass",0,"/** * Test for issue 226.*/public void testEnumSubclass(){assertFalse(Roshambo.class == Roshambo.ROCK.getClass());assertEquals(""\""ROCK\"""",gson.toJson(Roshambo.ROCK));assertEquals(""[\""ROCK\"",\""PAPER\"",\""SCISSORS\""]"",gson.toJson(EnumSet.allOf(Roshambo.class)));assertEquals(Roshambo.ROCK,gson.fromJson(""\""ROCK\"""",Roshambo.class));assertEquals(EnumSet.allOf(Roshambo.class),gson.fromJson(""[\""ROCK\"",\""PAPER\"",\""SCISSORS\""]"",new TypeToken<Set<Roshambo>>(){}.getType()));}"
"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization",0,"public void testWriterForSerialization()throws Exception {Writer writer=new StringWriter();BagOfPrimitives src=new BagOfPrimitives();gson.toJson(src,writer);assertEquals(src.getExpectedJson(),writer.toString());}"
"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization",0,"public void testReaderForDeserialization()throws Exception {BagOfPrimitives expected=new BagOfPrimitives();Reader json=new StringReader(expected.getExpectedJson());BagOfPrimitives actual=gson.fromJson(json,BagOfPrimitives.class);assertEquals(expected,actual);}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter",0,"public void testTopLevelNullObjectSerializationWithWriter(){StringWriter writer=new StringWriter();gson.toJson(null,writer);assertEquals("""",writer.toString());}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader",0,"public void testTopLevelNullObjectDeserializationWithReader(){StringReader reader=new StringReader(""null"");Integer nullIntObject=gson.fromJson(reader,Integer.class);assertNull(nullIntObject);}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls",0,"public void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls(){Gson gson=new GsonBuilder().serializeNulls().create();StringWriter writer=new StringWriter();gson.toJson(null,writer);assertEquals(""null"",writer.toString());}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls",0,"public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls(){Gson gson=new GsonBuilder().serializeNulls().create();StringReader reader=new StringReader(""null"");Integer nullIntObject=gson.fromJson(reader,Integer.class);assertNull(nullIntObject);}"
"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings",0,"public void testReadWriteTwoStrings()throws IOException {Gson gson=new Gson();CharArrayWriter writer=new CharArrayWriter();writer.write(gson.toJson(""one"").toCharArray());writer.write(gson.toJson(""two"").toCharArray());CharArrayReader reader=new CharArrayReader(writer.toCharArray());JsonStreamParser parser=new JsonStreamParser(reader);String actualOne=gson.fromJson(parser.next(),String.class);assertEquals(""one"",actualOne);String actualTwo=gson.fromJson(parser.next(),String.class);assertEquals(""two"",actualTwo);}"
"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects",0,"public void testReadWriteTwoObjects()throws IOException {Gson gson=new Gson();CharArrayWriter writer=new CharArrayWriter();BagOfPrimitives expectedOne=new BagOfPrimitives(1,1,true,""one"");writer.write(gson.toJson(expectedOne).toCharArray());BagOfPrimitives expectedTwo=new BagOfPrimitives(2,2,false,""two"");writer.write(gson.toJson(expectedTwo).toCharArray());CharArrayReader reader=new CharArrayReader(writer.toCharArray());JsonStreamParser parser=new JsonStreamParser(reader);BagOfPrimitives actualOne=gson.fromJson(parser.next(),BagOfPrimitives.class);assertEquals(""one"",actualOne.stringValue);BagOfPrimitives actualTwo=gson.fromJson(parser.next(),BagOfPrimitives.class);assertEquals(""two"",actualTwo.stringValue);assertFalse(parser.hasNext());}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization",0,"public void testParameterizedTypesSerialization()throws Exception {MyParameterizedType<Integer> src=new MyParameterizedType<Integer>(10);Type typeOfSrc=new TypeToken<MyParameterizedType<Integer>>(){}.getType();String json=gson.toJson(src,typeOfSrc);assertEquals(src.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization",0,"public void testParameterizedTypeDeserialization()throws Exception {BagOfPrimitives bag=new BagOfPrimitives();MyParameterizedType<BagOfPrimitives> expected=new MyParameterizedType<BagOfPrimitives>(bag);Type expectedType=new TypeToken<MyParameterizedType<BagOfPrimitives>>(){}.getType();BagOfPrimitives bagDefaultInstance=new BagOfPrimitives();Gson gson=new GsonBuilder().registerTypeAdapter(expectedType,new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance)).create();String json=expected.getExpectedJson();MyParameterizedType<BagOfPrimitives> actual=gson.fromJson(json,expectedType);assertEquals(expected,actual);}"
"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization",0,"public void testTypesWithMultipleParametersSerialization()throws Exception {MultiParameters<Integer,Float,Double,String,BagOfPrimitives> src=new MultiParameters<Integer,Float,Double,String,BagOfPrimitives>(10,1.0F,2.1D,""abc"",new BagOfPrimitives());Type typeOfSrc=new TypeToken<MultiParameters<Integer,Float,Double,String,BagOfPrimitives>>(){}.getType();String json=gson.toJson(src,typeOfSrc);String expected=""{\""a\"":10,\""b\"":1.0,\""c\"":2.1,\""d\"":\""abc\"","" + ""\""e\"":{\""longValue\"":0,\""intValue\"":0,\""booleanValue\"":false,\""stringValue\"":\""\""}}"";assertEquals(expected,json);}"
"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization",0,"public void testTypesWithMultipleParametersDeserialization()throws Exception {Type typeOfTarget=new TypeToken<MultiParameters<Integer,Float,Double,String,BagOfPrimitives>>(){}.getType();String json=""{\""a\"":10,\""b\"":1.0,\""c\"":2.1,\""d\"":\""abc\"","" + ""\""e\"":{\""longValue\"":0,\""intValue\"":0,\""booleanValue\"":false,\""stringValue\"":\""\""}}"";MultiParameters<Integer,Float,Double,String,BagOfPrimitives> target=gson.fromJson(json,typeOfTarget);MultiParameters<Integer,Float,Double,String,BagOfPrimitives> expected=new MultiParameters<Integer,Float,Double,String,BagOfPrimitives>(10,1.0F,2.1D,""abc"",new BagOfPrimitives());assertEquals(expected,target);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer",0,"public void testParameterizedTypeWithCustomSerializer(){Type ptIntegerType=new TypeToken<MyParameterizedType<Integer>>(){}.getType();Type ptStringType=new TypeToken<MyParameterizedType<String>>(){}.getType();Gson gson=new GsonBuilder().registerTypeAdapter(ptIntegerType,new MyParameterizedTypeAdapter<Integer>()).registerTypeAdapter(ptStringType,new MyParameterizedTypeAdapter<String>()).create();MyParameterizedType<Integer> intTarget=new MyParameterizedType<Integer>(10);String json=gson.toJson(intTarget,ptIntegerType);assertEquals(MyParameterizedTypeAdapter.<Integer>getExpectedJson(intTarget),json);MyParameterizedType<String> stringTarget=new MyParameterizedType<String>(""abc"");json=gson.toJson(stringTarget,ptStringType);assertEquals(MyParameterizedTypeAdapter.<String>getExpectedJson(stringTarget),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer",0,"public void testParameterizedTypesWithCustomDeserializer(){Type ptIntegerType=new TypeToken<MyParameterizedType<Integer>>(){}.getType();Type ptStringType=new TypeToken<MyParameterizedType<String>>(){}.getType();Gson gson=new GsonBuilder().registerTypeAdapter(ptIntegerType,new MyParameterizedTypeAdapter<Integer>()).registerTypeAdapter(ptStringType,new MyParameterizedTypeAdapter<String>()).registerTypeAdapter(ptStringType,new MyParameterizedTypeInstanceCreator<String>("""")).registerTypeAdapter(ptIntegerType,new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0))).create();MyParameterizedType<Integer> src=new MyParameterizedType<Integer>(10);String json=MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);MyParameterizedType<Integer> intTarget=gson.fromJson(json,ptIntegerType);assertEquals(10,(int)intTarget.value);MyParameterizedType<String> srcStr=new MyParameterizedType<String>(""abc"");json=MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);MyParameterizedType<String> stringTarget=gson.fromJson(json,ptStringType);assertEquals(""abc"",stringTarget.value);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization",0,"public void testParameterizedTypesWithWriterSerialization()throws Exception {Writer writer=new StringWriter();MyParameterizedType<Integer> src=new MyParameterizedType<Integer>(10);Type typeOfSrc=new TypeToken<MyParameterizedType<Integer>>(){}.getType();gson.toJson(src,typeOfSrc,writer);assertEquals(src.getExpectedJson(),writer.toString());}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization",0,"public void testParameterizedTypeWithReaderDeserialization()throws Exception {BagOfPrimitives bag=new BagOfPrimitives();MyParameterizedType<BagOfPrimitives> expected=new MyParameterizedType<BagOfPrimitives>(bag);Type expectedType=new TypeToken<MyParameterizedType<BagOfPrimitives>>(){}.getType();BagOfPrimitives bagDefaultInstance=new BagOfPrimitives();Gson gson=new GsonBuilder().registerTypeAdapter(expectedType,new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance)).create();Reader json=new StringReader(expected.getExpectedJson());MyParameterizedType<Integer> actual=gson.fromJson(json,expectedType);assertEquals(expected,actual);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization",0,"@SuppressWarnings(""unchecked"")public void testVariableTypeFieldsAndGenericArraysSerialization()throws Exception {Integer obj=0;Integer[]array={1,2,3};List<Integer> list=new ArrayList<Integer>();list.add(4);list.add(5);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(obj,array,list,arrayOfLists,list,arrayOfLists);String json=gson.toJson(objToSerialize,typeOfSrc);assertEquals(objToSerialize.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization",0,"@SuppressWarnings(""unchecked"")public void testVariableTypeFieldsAndGenericArraysDeserialization()throws Exception {Integer obj=0;Integer[]array={1,2,3};List<Integer> list=new ArrayList<Integer>();list.add(4);list.add(5);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(obj,array,list,arrayOfLists,list,arrayOfLists);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization",0,"public void testVariableTypeDeserialization()throws Exception {Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(0,null,null,null,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization",0,"public void testVariableTypeArrayDeserialization()throws Exception {Integer[]array={1,2,3};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,array,null,null,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization",0,"public void testParameterizedTypeWithVariableTypeDeserialization()throws Exception {List<Integer> list=new ArrayList<Integer>();list.add(4);list.add(5);Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,null,list,null,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization",0,"@SuppressWarnings(""unchecked"")public void testParameterizedTypeGenericArraysSerialization()throws Exception {List<Integer> list=new ArrayList<Integer>();list.add(1);list.add(2);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,null,null,arrayOfLists,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);assertEquals(""{\""arrayOfListOfTypeParameters\"":[[1,2],[1,2]]}"",json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization",0,"@SuppressWarnings(""unchecked"")public void testParameterizedTypeGenericArraysDeserialization()throws Exception {List<Integer> list=new ArrayList<Integer>();list.add(1);list.add(2);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,null,null,arrayOfLists,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization",0,"public void testDeepParameterizedTypeSerialization(){Amount<MyQuantity> amount=new Amount<MyQuantity>();String json=gson.toJson(amount);assertTrue(json.contains(""value""));assertTrue(json.contains(""30""));}"
"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization",0,"public void testDeepParameterizedTypeDeserialization(){String json=""{value:30}"";Type type=new TypeToken<Amount<MyQuantity>>(){}.getType();Amount<MyQuantity> amount=gson.fromJson(json,type);assertEquals(30,amount.value);}"
"com.google.gson.functional.MapTest.testMapSerialization",0,"public void testMapSerialization(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""a"",1);map.put(""b"",2);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertTrue(json.contains(""\""a\"":1""));assertTrue(json.contains(""\""b\"":2""));}"
"com.google.gson.functional.MapTest.testMapDeserialization",0,"public void testMapDeserialization(){String json=""{\""a\"":1,\""b\"":2}"";Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> target=gson.fromJson(json,typeOfMap);assertEquals(1,target.get(""a"").intValue());assertEquals(2,target.get(""b"").intValue());}"
"com.google.gson.functional.MapTest.testRawMapSerialization",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testRawMapSerialization(){Map map=new LinkedHashMap();map.put(""a"",1);map.put(""b"",""string"");String json=gson.toJson(map);assertTrue(json.contains(""\""a\"":1""));assertTrue(json.contains(""\""b\"":\""string\""""));}"
"com.google.gson.functional.MapTest.testMapSerializationEmpty",0,"public void testMapSerializationEmpty(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationEmpty",0,"public void testMapDeserializationEmpty(){Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{}"",typeOfMap);assertTrue(map.isEmpty());}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValue",0,"public void testMapSerializationWithNullValue(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""abc"",null);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue",0,"public void testMapDeserializationWithNullValue(){Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{\""abc\"":null}"",typeOfMap);assertEquals(1,map.size());assertNull(map.get(""abc""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls",0,"public void testMapSerializationWithNullValueButSerializeNulls(){gson=new GsonBuilder().serializeNulls().create();Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""abc"",null);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{\""abc\"":null}"",json);}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullKey",0,"public void testMapSerializationWithNullKey(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(null,123);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{\""null\"":123}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey",0,"public void testMapDeserializationWithNullKey(){Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{\""null\"":123}"",typeOfMap);assertEquals(1,map.size());assertNull(map.get(null));}"
"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys",0,"public void testMapSerializationWithIntegerKeys(){Map<Integer,String> map=new LinkedHashMap<Integer,String>();map.put(123,""456"");Type typeOfMap=new TypeToken<Map<Integer,String>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{\""123\"":\""456\""}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys",0,"public void testMapDeserializationWithIntegerKeys(){Type typeOfMap=new TypeToken<Map<Integer,String>>(){}.getType();Map<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));}"
"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization",0,"public void testParameterizedMapSubclassSerialization(){MyParameterizedMap<String,String> map=new MyParameterizedMap<String,String>();map.put(""a"",""b"");Type type=new TypeToken<MyParameterizedMap<String,String>>(){}.getType();String json=gson.toJson(map,type);assertTrue(json.contains(""\""a\"":\""b\""""));}"
"com.google.gson.functional.MapTest.testParameterizedMapSubclassDeserialization",0,"@SuppressWarnings(""rawtypes"")public void testParameterizedMapSubclassDeserialization(){Type type=new TypeToken<MyParameterizedMap<String,Integer>>(){}.getType();Gson gson=new GsonBuilder().registerTypeAdapter(type,new InstanceCreator<MyParameterizedMap>(){public MyParameterizedMap createInstance(Type type){return new MyParameterizedMap();}}).create();String json=""{\""a\"":1,\""b\"":2}"";MyParameterizedMap<String,Integer> map=gson.fromJson(json,type);assertEquals(1,map.get(""a"").intValue());assertEquals(2,map.get(""b"").intValue());}"
"com.google.gson.functional.MapTest.testMapSubclassSerialization",0,"public void testMapSubclassSerialization(){MyMap map=new MyMap();map.put(""a"",""b"");String json=gson.toJson(map,MyMap.class);assertTrue(json.contains(""\""a\"":\""b\""""));}"
"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization",0,"public void testMapStandardSubclassDeserialization(){String json=""{a:'1',b:'2'}"";Type type=new TypeToken<LinkedHashMap<String,String>>(){}.getType();LinkedHashMap<String,Integer> map=gson.fromJson(json,type);assertEquals(""1"",map.get(""a""));assertEquals(""2"",map.get(""b""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValues",0,"/** * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99*/public void testMapSerializationWithNullValues(){ClassWithAMap target=new ClassWithAMap();target.map.put(""name1"",null);target.map.put(""name2"",""value2"");String json=gson.toJson(target);assertFalse(json.contains(""name1""));assertTrue(json.contains(""name2""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized",0,"/** * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99*/public void testMapSerializationWithNullValuesSerialized(){Gson gson=new GsonBuilder().serializeNulls().create();ClassWithAMap target=new ClassWithAMap();target.map.put(""name1"",null);target.map.put(""name2"",""value2"");String json=gson.toJson(target);assertTrue(json.contains(""name1""));assertTrue(json.contains(""name2""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues",0,"public void testMapSerializationWithWildcardValues(){Map<String,? extends Collection<? extends Integer>> map=new LinkedHashMap<String,Collection<Integer>>();map.put(""test"",null);Type typeOfMap=new TypeToken<Map<String,? extends Collection<? extends Integer>>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues",0,"public void testMapDeserializationWithWildcardValues(){Type typeOfMap=new TypeToken<Map<String,? extends Long>>(){}.getType();Map<String,? extends Long> map=gson.fromJson(""{\""test\"":123}"",typeOfMap);assertEquals(1,map.size());assertEquals(new Long(123L),map.get(""test""));}"
"com.google.gson.functional.MapTest.testMapOfMapSerialization",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=95*/public void testMapOfMapSerialization(){Map<String,Map<String,String>> map=new HashMap<String,Map<String,String>>();Map<String,String> nestedMap=new HashMap<String,String>();nestedMap.put(""1"",""1"");nestedMap.put(""2"",""2"");map.put(""nestedMap"",nestedMap);String json=gson.toJson(map);assertTrue(json.contains(""nestedMap""));assertTrue(json.contains(""\""1\"":\""1\""""));assertTrue(json.contains(""\""2\"":\""2\""""));}"
"com.google.gson.functional.MapTest.testMapOfMapDeserialization",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=95*/public void testMapOfMapDeserialization(){String json=""{nestedMap:{'2':'2','1':'1'}}"";Type type=new TypeToken<Map<String,Map<String,String>>>(){}.getType();Map<String,Map<String,String>> map=gson.fromJson(json,type);Map<String,String> nested=map.get(""nestedMap"");assertEquals(""1"",nested.get(""1""));assertEquals(""2"",nested.get(""2""));}"
"com.google.gson.functional.MapTest.testMapWithQuotes",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=178*/public void testMapWithQuotes(){Map<String,String> map=new HashMap<String,String>();map.put(""a\""b"",""c\""d"");String json=gson.toJson(map);assertEquals(""{\""a\\\""b\"":\""c\\\""d\""}"",json);}"
"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey",0,"/** * From issue 227.*/public void testWriteMapsWithEmptyStringKey(){Map<String,Boolean> map=new HashMap<String,Boolean>();map.put("""",true);assertEquals(""{\""\"":true}"",gson.toJson(map));}"
"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey",0,"public void testReadMapsWithEmptyStringKey(){Map<String,Boolean> map=gson.fromJson(""{\""\"":true}"",new TypeToken<Map<String,Boolean>>(){}.getType());assertEquals(Boolean.TRUE,map.get(""""));}"
"com.google.gson.functional.MapTest.testSerializeMaps",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=204*/public void testSerializeMaps(){Map<String,Object> map=new LinkedHashMap<String,Object>();map.put(""a"",12);map.put(""b"",null);map.put(""c"",new HashMap<String,Object>());assertEquals(""{\""a\"":12,\""b\"":null,\""c\"":{}}"",new GsonBuilder().serializeNulls().create().toJson(map));assertEquals(""{\""a\"":12,\""b\"":null,\""c\"":{}}"",new GsonBuilder().serializeNulls().create().toJson(map));assertEquals(""{\""a\"":12,\""c\"":{}}"",new GsonBuilder().create().toJson(map));assertEquals(""{\""a\"":12,\""c\"":{}}"",new GsonBuilder().create().toJson(map));}"
"com.google.gson.FieldNamingStrategy2AdapterTest.testSimpleAdapter",0,"public void testSimpleAdapter()throws Exception {Field field=String.class.getFields()[0];String expectedFieldName=field.getName().toUpperCase();FieldNamingStrategy2 adapter=new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy());assertEquals(expectedFieldName,adapter.translateName(new FieldAttributes(String.class,field)));}"
"com.google.gson.stream.JsonWriterTest.testWrongTopLevelType",0,"public void testWrongTopLevelType()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);try {jsonWriter.value(""a"");fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testTwoNames",0,"public void testTwoNames()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");try {jsonWriter.name(""a"");fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNameWithoutValue",0,"public void testNameWithoutValue()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");try {jsonWriter.endObject();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testValueWithoutName",0,"public void testValueWithoutName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();try {jsonWriter.value(true);fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues",0,"public void testMultipleTopLevelValues()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray().endArray();try {jsonWriter.beginArray();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testBadNestingObject",0,"public void testBadNestingObject()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.beginObject();try {jsonWriter.endArray();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testBadNestingArray",0,"public void testBadNestingArray()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.beginArray();try {jsonWriter.endObject();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNullName",0,"public void testNullName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();try {jsonWriter.name(null);fail();}catch(NullPointerException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNullStringValue",0,"public void testNullStringValue()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");jsonWriter.value((String)null);jsonWriter.endObject();assertEquals(""{\""a\"":null}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles",0,"public void testNonFiniteDoubles()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();try {jsonWriter.value(Double.NaN);fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(Double.NEGATIVE_INFINITY);fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(Double.POSITIVE_INFINITY);fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles",0,"public void testNonFiniteBoxedDoubles()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();try {jsonWriter.value(new Double(Double.NaN));fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(new Double(Double.POSITIVE_INFINITY));fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.stream.JsonWriterTest.testDoubles",0,"public void testDoubles()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(-0.0);jsonWriter.value(1.0);jsonWriter.value(Double.MAX_VALUE);jsonWriter.value(Double.MIN_VALUE);jsonWriter.value(0.0);jsonWriter.value(-0.5);jsonWriter.value(2.2250738585072014E-308);jsonWriter.value(Math.PI);jsonWriter.value(Math.E);jsonWriter.endArray();jsonWriter.close();assertEquals(""[-0.0,"" + ""1.0,"" + ""1.7976931348623157E308,""+ ""4.9E-324,""+ ""0.0,""+ ""-0.5,""+ ""2.2250738585072014E-308,""+ ""3.141592653589793,""+ ""2.718281828459045]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testLongs",0,"public void testLongs()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(0);jsonWriter.value(1);jsonWriter.value(-1);jsonWriter.value(Long.MIN_VALUE);jsonWriter.value(Long.MAX_VALUE);jsonWriter.endArray();jsonWriter.close();assertEquals(""[0,"" + ""1,"" + ""-1,""+ ""-9223372036854775808,""+ ""9223372036854775807]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testNumbers",0,"public void testNumbers()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(new BigInteger(""0""));jsonWriter.value(new BigInteger(""9223372036854775808""));jsonWriter.value(new BigInteger(""-9223372036854775809""));jsonWriter.value(new BigDecimal(""3.141592653589793238462643383""));jsonWriter.endArray();jsonWriter.close();assertEquals(""[0,"" + ""9223372036854775808,"" + ""-9223372036854775809,""+ ""3.141592653589793238462643383]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testBooleans",0,"public void testBooleans()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(true);jsonWriter.value(false);jsonWriter.endArray();assertEquals(""[true,false]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testNulls",0,"public void testNulls()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.nullValue();jsonWriter.endArray();assertEquals(""[null]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testStrings",0,"public void testStrings()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(""a"");jsonWriter.value(""a\"""");jsonWriter.value(""\"""");jsonWriter.value("":"");jsonWriter.value("","");jsonWriter.value(""\b"");jsonWriter.value(""\f"");jsonWriter.value(""\n"");jsonWriter.value(""\r"");jsonWriter.value(""\t"");jsonWriter.value("" "");jsonWriter.value(""\\"");jsonWriter.value(""{"");jsonWriter.value(""}"");jsonWriter.value(""["");jsonWriter.value(""]"");jsonWriter.value(""\0"");jsonWriter.value(""\u0019"");jsonWriter.endArray();assertEquals(""[\""a\"","" + ""\""a\\\""\"","" + ""\""\\\""\"",""+ ""\"":\"",""+ ""\"",\"",""+ ""\""\\b\"",""+ ""\""\\f\"",""+ ""\""\\n\"",""+ ""\""\\r\"",""+ ""\""\\t\"",""+ ""\"" \"",""+ ""\""\\\\\"",""+ ""\""{\"",""+ ""\""}\"",""+ ""\""[\"",""+ ""\""]\"",""+ ""\""\\u0000\"",""+ ""\""\\u0019\""]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testEmptyArray",0,"public void testEmptyArray()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.endArray();assertEquals(""[]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testEmptyObject",0,"public void testEmptyObject()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.endObject();assertEquals(""{}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testObjectsInArrays",0,"public void testObjectsInArrays()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.beginObject();jsonWriter.name(""a"").value(5);jsonWriter.name(""b"").value(false);jsonWriter.endObject();jsonWriter.beginObject();jsonWriter.name(""c"").value(6);jsonWriter.name(""d"").value(true);jsonWriter.endObject();jsonWriter.endArray();assertEquals(""[{\""a\"":5,\""b\"":false},"" + ""{\""c\"":6,\""d\"":true}]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testArraysInObjects",0,"public void testArraysInObjects()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");jsonWriter.beginArray();jsonWriter.value(5);jsonWriter.value(false);jsonWriter.endArray();jsonWriter.name(""b"");jsonWriter.beginArray();jsonWriter.value(6);jsonWriter.value(true);jsonWriter.endArray();jsonWriter.endObject();assertEquals(""{\""a\"":[5,false],"" + ""\""b\"":[6,true]}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays",0,"public void testDeepNestingArrays()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);for (int i=0;i < 20;i++){jsonWriter.beginArray();}for (int i=0;i < 20;i++){jsonWriter.endArray();}assertEquals(""[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects",0,"public void testDeepNestingObjects()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();for (int i=0;i < 20;i++){jsonWriter.name(""a"");jsonWriter.beginObject();}for (int i=0;i < 20;i++){jsonWriter.endObject();}jsonWriter.endObject();assertEquals(""{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":"" + ""{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{"" + ""}}}}}}}}}}}}}}}}}}}}}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testRepeatedName",0,"public void testRepeatedName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"").value(true);jsonWriter.name(""a"").value(false);jsonWriter.endObject();assertEquals(""{\""a\"":true,\""a\"":false}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject",0,"public void testPrettyPrintObject()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.setIndent(""   "");jsonWriter.beginObject();jsonWriter.name(""a"").value(true);jsonWriter.name(""b"").value(false);jsonWriter.name(""c"").value(5.0);jsonWriter.name(""e"").nullValue();jsonWriter.name(""f"").beginArray();jsonWriter.value(6.0);jsonWriter.value(7.0);jsonWriter.endArray();jsonWriter.name(""g"").beginObject();jsonWriter.name(""h"").value(8.0);jsonWriter.name(""i"").value(9.0);jsonWriter.endObject();jsonWriter.endObject();String expected=""{\n"" + ""   \""a\"": true,\n"" + ""   \""b\"": false,\n""+ ""   \""c\"": 5.0,\n""+ ""   \""e\"": null,\n""+ ""   \""f\"": [\n""+ ""      6.0,\n""+ ""      7.0\n""+ ""   ],\n""+ ""   \""g\"": {\n""+ ""      \""h\"": 8.0,\n""+ ""      \""i\"": 9.0\n""+ ""   }\n""+ ""}"";assertEquals(expected,stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray",0,"public void testPrettyPrintArray()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.setIndent(""   "");jsonWriter.beginArray();jsonWriter.value(true);jsonWriter.value(false);jsonWriter.value(5.0);jsonWriter.nullValue();jsonWriter.beginObject();jsonWriter.name(""a"").value(6.0);jsonWriter.name(""b"").value(7.0);jsonWriter.endObject();jsonWriter.beginArray();jsonWriter.value(8.0);jsonWriter.value(9.0);jsonWriter.endArray();jsonWriter.endArray();String expected=""[\n"" + ""   true,\n"" + ""   false,\n""+ ""   5.0,\n""+ ""   null,\n""+ ""   {\n""+ ""      \""a\"": 6.0,\n""+ ""      \""b\"": 7.0\n""+ ""   },\n""+ ""   [\n""+ ""      8.0,\n""+ ""      9.0\n""+ ""   ]\n""+ ""]"";assertEquals(expected,stringWriter.toString());}"
"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails",0,"public void testInvalidJsonDeserializationFails()throws Exception {try {gson.fromJson(""adfasdf1112,,,\"":"",BagOfPrimitives.class);fail(""Bad JSON should throw a ParseException"");}catch(JsonParseException expected){}try {gson.fromJson(""{adfasdf1112,,,\"":}"",BagOfPrimitives.class);fail(""Bad JSON should throw a ParseException"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization",0,"public void testObjectEqualButNotSameSerialization()throws Exception {ClassOverridingEquals objA=new ClassOverridingEquals();ClassOverridingEquals objB=new ClassOverridingEquals();objB.ref=objA;String json=gson.toJson(objB);assertEquals(objB.getExpectedJson(),json);}"
"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized",0,"public void testStaticFieldsAreNotSerialized(){BagOfPrimitives target=new BagOfPrimitives();assertFalse(gson.toJson(target).contains(""DEFAULT_VALUE""));}"
"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization",0,"/** * This test ensures that a custom deserializer is able to return a derived class instance for a base class object. For a motivation for this test,see Issue 37 and http://groups.google.com/group/google-gson/browse_thread/thread/677d56e9976d7761*/public void testReturningDerivedClassesDuringDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseTypeAdapter()).create();String json=""{\""opType\"":\""OP1\""}"";Base base=gson.fromJson(json,Base.class);assertTrue(base instanceof Derived1);assertEquals(OperationType.OP1,base.opType);json=""{\""opType\"":\""OP2\""}"";base=gson.fromJson(json,Base.class);assertTrue(base instanceof Derived2);assertEquals(OperationType.OP2,base.opType);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization",0,"public void testPrimitiveIntegerAutoboxedSerialization(){assertEquals(""1"",gson.toJson(1));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization",0,"public void testPrimitiveIntegerAutoboxedDeserialization(){int expected=1;int actual=gson.fromJson(""1"",int.class);assertEquals(expected,actual);actual=gson.fromJson(""1"",Integer.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization(){int target[]={-9332};assertEquals(""[-9332]"",gson.toJson(target));assertEquals(""[-9332]"",gson.toJson(target,int[].class));assertEquals(""[-9332]"",gson.toJson(target,Integer[].class));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization",0,"public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization(){int expected=1;int actual=gson.fromJson(""[1]"",int.class);assertEquals(expected,actual);actual=gson.fromJson(""[1]"",Integer.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization",0,"public void testReallyLongValuesSerialization(){long value=333961828784581L;assertEquals(""333961828784581"",gson.toJson(value));}"
"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization",0,"public void testReallyLongValuesDeserialization(){String json=""333961828784581"";long value=gson.fromJson(json,Long.class);assertEquals(333961828784581L,value);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization",0,"public void testPrimitiveLongAutoboxedSerialization(){assertEquals(""1"",gson.toJson(1L,long.class));assertEquals(""1"",gson.toJson(1L,Long.class));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization",0,"public void testPrimitiveLongAutoboxedDeserialization(){long expected=1L;long actual=gson.fromJson(""1"",long.class);assertEquals(expected,actual);actual=gson.fromJson(""1"",Long.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveLongAutoboxedInASingleElementArraySerialization(){long[]target={-23L};assertEquals(""[-23]"",gson.toJson(target));assertEquals(""[-23]"",gson.toJson(target,long[].class));assertEquals(""[-23]"",gson.toJson(target,Long[].class));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArrayDeserialization",0,"public void testPrimitiveLongAutoboxedInASingleElementArrayDeserialization(){long expected=1L;long actual=gson.fromJson(""[1]"",long.class);assertEquals(expected,actual);actual=gson.fromJson(""[1]"",Long.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization",0,"public void testPrimitiveBooleanAutoboxedSerialization(){assertEquals(""true"",gson.toJson(true));assertEquals(""false"",gson.toJson(false));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedDeserialization",0,"public void testPrimitiveBooleanAutoboxedDeserialization(){assertEquals(Boolean.FALSE,gson.fromJson(""[false]"",Boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""[true]"",Boolean.class));boolean value=gson.fromJson(""false"",boolean.class);assertEquals(false,value);value=gson.fromJson(""true"",boolean.class);assertEquals(true,value);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization(){boolean target[]={false};assertEquals(""[false]"",gson.toJson(target));assertEquals(""[false]"",gson.toJson(target,boolean[].class));assertEquals(""[false]"",gson.toJson(target,Boolean[].class));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization",0,"public void testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization(){assertEquals(Boolean.FALSE,gson.fromJson(""[false]"",Boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""[true]"",Boolean.class));boolean value=gson.fromJson(""[false]"",boolean.class);assertEquals(false,value);value=gson.fromJson(""[true]"",boolean.class);assertEquals(true,value);}"
"com.google.gson.functional.PrimitiveTest.testNumberSerialization",0,"public void testNumberSerialization(){Number expected=1L;String json=gson.toJson(expected);assertEquals(expected.toString(),json);json=gson.toJson(expected,Number.class);assertEquals(expected.toString(),json);}"
"com.google.gson.functional.PrimitiveTest.testNumberDeserialization",0,"public void testNumberDeserialization(){String json=""1"";Number expected=new Integer(json);Number actual=gson.fromJson(json,Number.class);assertEquals(expected.intValue(),actual.intValue());json=String.valueOf(Long.MAX_VALUE);expected=new Long(json);actual=gson.fromJson(json,Number.class);assertEquals(expected.longValue(),actual.longValue());}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization",0,"public void testPrimitiveDoubleAutoboxedSerialization(){assertEquals(""-122.08234335"",gson.toJson(-122.08234335));assertEquals(""122.08112002"",gson.toJson(new Double(122.08112002)));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization",0,"public void testPrimitiveDoubleAutoboxedDeserialization(){double actual=gson.fromJson(""-122.08858585"",double.class);assertEquals(-122.08858585,actual);actual=gson.fromJson(""122.023900008000"",Double.class);assertEquals(122.023900008,actual);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization(){double[]target={-122.08D};assertEquals(""[-122.08]"",gson.toJson(target));assertEquals(""[-122.08]"",gson.toJson(target,double[].class));assertEquals(""[-122.08]"",gson.toJson(target,Double[].class));}"
"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization",0,"public void testDoubleAsStringRepresentationDeserialization(){String doubleValue=""1.0043E+5"";Double expected=Double.valueOf(doubleValue);Double actual=gson.fromJson(doubleValue,Double.class);assertEquals(expected,actual);double actual1=gson.fromJson(doubleValue,double.class);assertEquals(expected.doubleValue(),actual1);}"
"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization",0,"public void testDoubleNoFractAsStringRepresentationDeserialization(){String doubleValue=""1E+5"";Double expected=Double.valueOf(doubleValue);Double actual=gson.fromJson(doubleValue,Double.class);assertEquals(expected,actual);double actual1=gson.fromJson(doubleValue,double.class);assertEquals(expected.doubleValue(),actual1);}"
"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization",0,"public void testLargeDoubleDeserialization(){String doubleValue=""1.234567899E8"";Double expected=Double.valueOf(doubleValue);Double actual=gson.fromJson(doubleValue,Double.class);assertEquals(expected,actual);double actual1=gson.fromJson(doubleValue,double.class);assertEquals(expected.doubleValue(),actual1);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization",0,"public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization(){double expected=-122.08;double actual=gson.fromJson(""[-122.08]"",double.class);assertEquals(expected,actual);actual=gson.fromJson(""[-122.08]"",Double.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization",0,"public void testBigDecimalSerialization(){BigDecimal target=new BigDecimal(""-122.0e-21"");String json=gson.toJson(target);assertEquals(target,new BigDecimal(json));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization",0,"public void testBigDecimalDeserialization(){BigDecimal target=new BigDecimal(""-122.0e-21"");String json=""-122.0e-21"";assertEquals(target,gson.fromJson(json,BigDecimal.class));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization",0,"public void testBigDecimalInASingleElementArraySerialization(){BigDecimal[]target={new BigDecimal(""-122.08e-21"")};String json=gson.toJson(target);String actual=extractElementFromArray(json);assertEquals(target[0],new BigDecimal(actual));json=gson.toJson(target,BigDecimal[].class);actual=extractElementFromArray(json);assertEquals(target[0],new BigDecimal(actual));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArrayDeserialization",0,"public void testBigDecimalInASingleElementArrayDeserialization(){BigDecimal expected=new BigDecimal(""-122.08e-21"");BigDecimal actual=gson.fromJson(""[-122.08e-21]"",BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization",0,"public void testSmallValueForBigDecimalSerialization(){BigDecimal target=new BigDecimal(""1.55"");String actual=gson.toJson(target);assertEquals(target.toString(),actual);}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization",0,"public void testSmallValueForBigDecimalDeserialization(){BigDecimal expected=new BigDecimal(""1.55"");BigDecimal actual=gson.fromJson(""1.55"",BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization",0,"public void testBigDecimalPreservePrecisionSerialization(){String expectedValue=""1.000"";BigDecimal obj=new BigDecimal(expectedValue);String actualValue=gson.toJson(obj);assertEquals(expectedValue,actualValue);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization",0,"public void testBigDecimalPreservePrecisionDeserialization(){String json=""1.000"";BigDecimal expected=new BigDecimal(json);BigDecimal actual=gson.fromJson(json,BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization",0,"public void testBigDecimalAsStringRepresentationDeserialization(){String doubleValue=""0.05E+5"";BigDecimal expected=new BigDecimal(doubleValue);BigDecimal actual=gson.fromJson(doubleValue,BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization",0,"public void testBigDecimalNoFractAsStringRepresentationDeserialization(){String doubleValue=""5E+5"";BigDecimal expected=new BigDecimal(doubleValue);BigDecimal actual=gson.fromJson(doubleValue,BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization",0,"public void testBigIntegerSerialization(){BigInteger target=new BigInteger(""12121211243123245845384534687435634558945453489543985435"");assertEquals(target.toString(),gson.toJson(target));}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization",0,"public void testBigIntegerDeserialization(){String json=""12121211243123245845384534687435634558945453489543985435"";BigInteger target=new BigInteger(json);assertEquals(target,gson.fromJson(json,BigInteger.class));}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization",0,"public void testBigIntegerInASingleElementArraySerialization(){BigInteger[]target={new BigInteger(""1212121243434324323254365345367456456456465464564564"")};String json=gson.toJson(target);String actual=extractElementFromArray(json);assertEquals(target[0],new BigInteger(actual));json=gson.toJson(target,BigInteger[].class);actual=extractElementFromArray(json);assertEquals(target[0],new BigInteger(actual));}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArrayDeserialization",0,"public void testBigIntegerInASingleElementArrayDeserialization(){BigInteger expected=new BigInteger(""34343434343424242423432323243243242"");BigInteger actual=gson.fromJson(""[34343434343424242423432323243243242]"",BigInteger.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization",0,"public void testSmallValueForBigIntegerSerialization(){BigInteger target=new BigInteger(""15"");String actual=gson.toJson(target);assertEquals(target.toString(),actual);}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization",0,"public void testSmallValueForBigIntegerDeserialization(){BigInteger expected=new BigInteger(""15"");BigInteger actual=gson.fromJson(""15"",BigInteger.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization",0,"public void testBadValueForBigIntegerDeserialization(){try {gson.fromJson(""15.099"",BigInteger.class);fail(""BigInteger can not be decimal values."");}catch(JsonParseException expected){}}"
"com.google.gson.functional.PrimitiveTest.testOverridingDefaultPrimitiveSerialization",0,"public void testOverridingDefaultPrimitiveSerialization(){CrazyLongTypeAdapter typeAdapter=new CrazyLongTypeAdapter();gson=new GsonBuilder().registerTypeAdapter(long.class,typeAdapter).registerTypeAdapter(Long.class,typeAdapter).create();long value=1L;String serializedValue=gson.toJson(value);assertEquals(String.valueOf(value + CrazyLongTypeAdapter.DIFFERENCE),serializedValue);long deserializedValue=gson.fromJson(serializedValue,long.class);assertEquals(value,deserializedValue);}"
"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault",0,"public void testDoubleNaNSerializationNotSupportedByDefault(){try {double nan=Double.NaN;gson.toJson(nan);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}try {gson.toJson(Double.NaN);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization",0,"public void testDoubleNaNSerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();double nan=Double.NaN;assertEquals(""NaN"",gson.toJson(nan));assertEquals(""NaN"",gson.toJson(Double.NaN));}"
"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization",0,"public void testDoubleNaNDeserialization(){assertTrue(Double.isNaN(gson.fromJson(""NaN"",Double.class)));assertTrue(Double.isNaN(gson.fromJson(""NaN"",double.class)));}"
"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault",0,"public void testFloatNaNSerializationNotSupportedByDefault(){try {float nan=Float.NaN;gson.toJson(nan);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}try {gson.toJson(Float.NaN);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization",0,"public void testFloatNaNSerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();float nan=Float.NaN;assertEquals(""NaN"",gson.toJson(nan));assertEquals(""NaN"",gson.toJson(Float.NaN));}"
"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization",0,"public void testFloatNaNDeserialization(){assertTrue(Float.isNaN(gson.fromJson(""NaN"",Float.class)));assertTrue(Float.isNaN(gson.fromJson(""NaN"",float.class)));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported",0,"public void testBigDecimalNaNDeserializationNotSupported(){try {gson.fromJson(""NaN"",BigDecimal.class);fail(""Gson should not accept NaN for deserialization by default."");}catch(JsonParseException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault",0,"public void testDoubleInfinitySerializationNotSupportedByDefault(){try {double infinity=Double.POSITIVE_INFINITY;gson.toJson(infinity);fail(""Gson should not accept positive infinity for serialization by default."");}catch(IllegalArgumentException expected){}try {gson.toJson(Double.POSITIVE_INFINITY);fail(""Gson should not accept positive infinity for serialization by default."");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization",0,"public void testDoubleInfinitySerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();double infinity=Double.POSITIVE_INFINITY;assertEquals(""Infinity"",gson.toJson(infinity));assertEquals(""Infinity"",gson.toJson(Double.POSITIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization",0,"public void testDoubleInfinityDeserialization(){assertTrue(Double.isInfinite(gson.fromJson(""Infinity"",Double.class)));assertTrue(Double.isInfinite(gson.fromJson(""Infinity"",double.class)));}"
"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault",0,"public void testFloatInfinitySerializationNotSupportedByDefault(){try {float infinity=Float.POSITIVE_INFINITY;gson.toJson(infinity);fail(""Gson should not accept positive infinity for serialization by default"");}catch(IllegalArgumentException expected){}try {gson.toJson(Float.POSITIVE_INFINITY);fail(""Gson should not accept positive infinity for serialization by default"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization",0,"public void testFloatInfinitySerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();float infinity=Float.POSITIVE_INFINITY;assertEquals(""Infinity"",gson.toJson(infinity));assertEquals(""Infinity"",gson.toJson(Float.POSITIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization",0,"public void testFloatInfinityDeserialization(){assertTrue(Float.isInfinite(gson.fromJson(""Infinity"",Float.class)));assertTrue(Float.isInfinite(gson.fromJson(""Infinity"",float.class)));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported",0,"public void testBigDecimalInfinityDeserializationNotSupported(){try {gson.fromJson(""Infinity"",BigDecimal.class);fail(""Gson should not accept positive infinity for deserialization with BigDecimal"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault",0,"public void testNegativeInfinitySerializationNotSupportedByDefault(){try {double negativeInfinity=Double.NEGATIVE_INFINITY;gson.toJson(negativeInfinity);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}try {gson.toJson(Double.NEGATIVE_INFINITY);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization",0,"public void testNegativeInfinitySerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();double negativeInfinity=Double.NEGATIVE_INFINITY;assertEquals(""-Infinity"",gson.toJson(negativeInfinity));assertEquals(""-Infinity"",gson.toJson(Double.NEGATIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization",0,"public void testNegativeInfinityDeserialization(){assertTrue(Double.isInfinite(gson.fromJson(""-Infinity"",double.class)));assertTrue(Double.isInfinite(gson.fromJson(""-Infinity"",Double.class)));}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault",0,"public void testNegativeInfinityFloatSerializationNotSupportedByDefault(){try {float negativeInfinity=Float.NEGATIVE_INFINITY;gson.toJson(negativeInfinity);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}try {gson.toJson(Float.NEGATIVE_INFINITY);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization",0,"public void testNegativeInfinityFloatSerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();float negativeInfinity=Float.NEGATIVE_INFINITY;assertEquals(""-Infinity"",gson.toJson(negativeInfinity));assertEquals(""-Infinity"",gson.toJson(Float.NEGATIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization",0,"public void testNegativeInfinityFloatDeserialization(){assertTrue(Float.isInfinite(gson.fromJson(""-Infinity"",float.class)));assertTrue(Float.isInfinite(gson.fromJson(""-Infinity"",Float.class)));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported",0,"public void testBigDecimalNegativeInfinityDeserializationNotSupported(){try {gson.fromJson(""-Infinity"",BigDecimal.class);fail(""Gson should not accept positive infinity for deserialization"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization",0,"public void testLongAsStringSerialization()throws Exception {gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();String result=gson.toJson(15L);assertEquals(""\""15\"""",result);result=gson.toJson(2);assertEquals(""2"",result);}"
"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization",0,"public void testLongAsStringDeserialization()throws Exception {long value=gson.fromJson(""\""15\"""",long.class);assertEquals(15,value);gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();value=gson.fromJson(""\""25\"""",long.class);assertEquals(25,value);}"
"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization",0,"public void testHtmlCharacterSerialization()throws Exception {String target=""<script>var a = 12;</script>"";String result=gson.toJson(target);assertFalse(result.equals('""' + target + '""'));gson=new GsonBuilder().disableHtmlEscaping().create();result=gson.toJson(target);assertTrue(result.equals('""' + target + '""'));}"
"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField",0,"public void testDeserializePrimitiveWrapperAsObjectField(){String json=""{i:10}"";ClassWithIntegerField target=gson.fromJson(json,ClassWithIntegerField.class);assertEquals(10,target.i.intValue());}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral",0,"public void testPrimitiveClassLiteral(){assertEquals(1,gson.fromJson(""1"",int.class).intValue());assertEquals(1,gson.fromJson(new StringReader(""1""),int.class).intValue());assertEquals(1,gson.fromJson(new JsonPrimitive(1),int.class).intValue());}"
"com.google.gson.JsonDeserializerExceptionWrapperTest.testRethrowJsonParseException",0,"public void testRethrowJsonParseException()throws Exception {String errorMsg=""please rethrow me"";JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer=new JsonDeserializerExceptionWrapper<String>(new ExceptionJsonDeserializer(new JsonParseException(errorMsg)));try {wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT,String.class,null);fail(""JsonParseException should have been thrown"");}catch(JsonParseException expected){assertNull(expected.getCause());assertEquals(errorMsg,expected.getMessage());}}"
"com.google.gson.JsonDeserializerExceptionWrapperTest.testWrappedExceptionPropagation",0,"public void testWrappedExceptionPropagation()throws Exception {IllegalArgumentException exceptionToThrow=new IllegalArgumentException();JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer=new JsonDeserializerExceptionWrapper<String>(new ExceptionJsonDeserializer(exceptionToThrow));try {wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT,String.class,null);fail(""JsonParseException should have been thrown"");}catch(JsonParseException expected){assertEquals(exceptionToThrow,expected.getCause());}}"
"com.google.gson.JsonDeserializerExceptionWrapperTest.testProperSerialization",0,"public void testProperSerialization()throws Exception {DefaultDateTypeAdapter dateSerializer=new DefaultDateTypeAdapter(DateFormat.LONG);JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer=new JsonDeserializerExceptionWrapper<Date>(dateSerializer);Date expected=dateSerializer.deserialize(PRIMITIVE_ELEMENT,Date.class,null);Date actual=wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT,Date.class,null);assertEquals(expected,actual);}"
