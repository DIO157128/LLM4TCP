test_case,faulty,test_code
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterTakesPrecedenceOverDefault",0,"public void testClassAnnotationAdapterTakesPrecedenceOverDefault(){Gson gson=new Gson();String json=gson.toJson(new Computer(new User(""Inderjeet Singh"")));assertEquals(""{\""user\"":\""UserClassAnnotationAdapter\""}"",json);Computer computer=gson.fromJson(""{'user':'Inderjeet Singh'}"",Computer.class);assertEquals(""UserClassAnnotationAdapter"",computer.user.name);}"
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault",0,"public void testClassAnnotationAdapterFactoryTakesPrecedenceOverDefault(){Gson gson=new Gson();String json=gson.toJson(new Gizmo(new Part(""Part"")));assertEquals(""{\""part\"":\""GizmoPartTypeAdapterFactory\""}"",json);Gizmo computer=gson.fromJson(""{'part':'Part'}"",Gizmo.class);assertEquals(""GizmoPartTypeAdapterFactory"",computer.part.name);}"
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter",0,"public void testRegisteredTypeAdapterTakesPrecedenceOverClassAnnotationAdapter(){Gson gson=new GsonBuilder().registerTypeAdapter(User.class,new RegisteredUserAdapter()).create();String json=gson.toJson(new Computer(new User(""Inderjeet Singh"")));assertEquals(""{\""user\"":\""RegisteredUserAdapter\""}"",json);Computer computer=gson.fromJson(""{'user':'Inderjeet Singh'}"",Computer.class);assertEquals(""RegisteredUserAdapter"",computer.user.name);}"
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter",0,"public void testFieldAnnotationTakesPrecedenceOverRegisteredTypeAdapter(){Gson gson=new GsonBuilder().registerTypeAdapter(Part.class,new TypeAdapter<Part>(){@Override public void write(JsonWriter out,Part part)throws IOException {throw new AssertionError();}@Override public Part read(JsonReader in)throws IOException {throw new AssertionError();}}).create();String json=gson.toJson(new Gadget(new Part(""screen"")));assertEquals(""{\""part\"":\""PartJsonFieldAnnotationAdapter\""}"",json);Gadget gadget=gson.fromJson(""{'part':'screen'}"",Gadget.class);assertEquals(""PartJsonFieldAnnotationAdapter"",gadget.part.name);}"
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testFieldAnnotationTakesPrecedenceOverClassAnnotation",0,"public void testFieldAnnotationTakesPrecedenceOverClassAnnotation(){Gson gson=new Gson();String json=gson.toJson(new Computer2(new User(""Inderjeet Singh"")));assertEquals(""{\""user\"":\""UserFieldAnnotationAdapter\""}"",json);Computer2 target=gson.fromJson(""{'user':'Interjeet Singh'}"",Computer2.class);assertEquals(""UserFieldAnnotationAdapter"",target.user.name);}"
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterInvokedOnlyForAnnotatedFields",0,"public void testJsonAdapterInvokedOnlyForAnnotatedFields(){Gson gson=new Gson();String json=""{'part1':'name','part2':{'name':'name2'}}"";GadgetWithTwoParts gadget=gson.fromJson(json,GadgetWithTwoParts.class);assertEquals(""PartJsonFieldAnnotationAdapter"",gadget.part1.name);assertEquals(""name2"",gadget.part2.name);}"
"com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.testJsonAdapterWrappedInNullSafeAsRequested",0,"public void testJsonAdapterWrappedInNullSafeAsRequested(){Gson gson=new Gson();String fromJson=""{'part':null}"";GadgetWithOptionalPart gadget=gson.fromJson(fromJson,GadgetWithOptionalPart.class);assertNull(gadget.part);String toJson=gson.toJson(gadget);assertFalse(toJson.contains(""PartJsonFieldAnnotationAdapter""));}"
"com.google.gson.functional.InterfaceTest.testSerializingObjectImplementingInterface",0,"public void testSerializingObjectImplementingInterface()throws Exception {assertEquals(OBJ_JSON,gson.toJson(obj));}"
"com.google.gson.functional.InterfaceTest.testSerializingInterfaceObjectField",0,"public void testSerializingInterfaceObjectField()throws Exception {TestObjectWrapper objWrapper=new TestObjectWrapper(obj);assertEquals(""{\""obj\"":"" + OBJ_JSON + ""}"",gson.toJson(objWrapper));}"
"com.google.gson.internal.bind.JsonElementReaderTest.testNumbers",0,"public void testNumbers()throws IOException {JsonElement element=new JsonParser().parse(""[1,2,3]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();assertEquals(1,reader.nextInt());assertEquals(2L,reader.nextLong());assertEquals(3.0,reader.nextDouble());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testLenientNansAndInfinities",0,"public void testLenientNansAndInfinities()throws IOException {JsonElement element=new JsonParser().parse(""[NaN,-Infinity,Infinity]"");JsonTreeReader reader=new JsonTreeReader(element);reader.setLenient(true);reader.beginArray();assertTrue(Double.isNaN(reader.nextDouble()));assertEquals(Double.NEGATIVE_INFINITY,reader.nextDouble());assertEquals(Double.POSITIVE_INFINITY,reader.nextDouble());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testStrictNansAndInfinities",0,"public void testStrictNansAndInfinities()throws IOException {JsonElement element=new JsonParser().parse(""[NaN,-Infinity,Infinity]"");JsonTreeReader reader=new JsonTreeReader(element);reader.setLenient(false);reader.beginArray();try {reader.nextDouble();fail();}catch(NumberFormatException e){}assertEquals(""NaN"",reader.nextString());try {reader.nextDouble();fail();}catch(NumberFormatException e){}assertEquals(""-Infinity"",reader.nextString());try {reader.nextDouble();fail();}catch(NumberFormatException e){}assertEquals(""Infinity"",reader.nextString());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testNumbersFromStrings",0,"public void testNumbersFromStrings()throws IOException {JsonElement element=new JsonParser().parse(""[\""1\"",\""2\"",\""3\""]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();assertEquals(1,reader.nextInt());assertEquals(2L,reader.nextLong());assertEquals(3.0,reader.nextDouble());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testStringsFromNumbers",0,"public void testStringsFromNumbers()throws IOException {JsonElement element=new JsonParser().parse(""[1]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();assertEquals(""1"",reader.nextString());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testBooleans",0,"public void testBooleans()throws IOException {JsonElement element=new JsonParser().parse(""[true,false]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(false,reader.nextBoolean());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testNulls",0,"public void testNulls()throws IOException {JsonElement element=new JsonParser().parse(""[null,null]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();reader.nextNull();reader.nextNull();reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testStrings",0,"public void testStrings()throws IOException {JsonElement element=new JsonParser().parse(""[\""A\"",\""B\""]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();assertEquals(""A"",reader.nextString());assertEquals(""B"",reader.nextString());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testArray",0,"public void testArray()throws IOException {JsonElement element=new JsonParser().parse(""[1,2,3]"");JsonTreeReader reader=new JsonTreeReader(element);assertEquals(JsonToken.BEGIN_ARRAY,reader.peek());reader.beginArray();assertEquals(JsonToken.NUMBER,reader.peek());assertEquals(1,reader.nextInt());assertEquals(JsonToken.NUMBER,reader.peek());assertEquals(2,reader.nextInt());assertEquals(JsonToken.NUMBER,reader.peek());assertEquals(3,reader.nextInt());assertEquals(JsonToken.END_ARRAY,reader.peek());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.internal.bind.JsonElementReaderTest.testObject",0,"public void testObject()throws IOException {JsonElement element=new JsonParser().parse(""{\""A\"": 1,\""B\"": 2}"");JsonTreeReader reader=new JsonTreeReader(element);assertEquals(JsonToken.BEGIN_OBJECT,reader.peek());reader.beginObject();assertEquals(JsonToken.NAME,reader.peek());assertEquals(""A"",reader.nextName());assertEquals(JsonToken.NUMBER,reader.peek());assertEquals(1,reader.nextInt());assertEquals(JsonToken.NAME,reader.peek());assertEquals(""B"",reader.nextName());assertEquals(JsonToken.NUMBER,reader.peek());assertEquals(2,reader.nextInt());assertEquals(JsonToken.END_OBJECT,reader.peek());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.internal.bind.JsonElementReaderTest.testEmptyArray",0,"public void testEmptyArray()throws IOException {JsonElement element=new JsonParser().parse(""[]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testNestedArrays",0,"public void testNestedArrays()throws IOException {JsonElement element=new JsonParser().parse(""[[],[[]]]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();reader.beginArray();reader.endArray();reader.beginArray();reader.beginArray();reader.endArray();reader.endArray();reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testNestedObjects",0,"public void testNestedObjects()throws IOException {JsonElement element=new JsonParser().parse(""{\""A\"":{},\""B\"":{\""C\"":{}}}"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginObject();assertEquals(""A"",reader.nextName());reader.beginObject();reader.endObject();assertEquals(""B"",reader.nextName());reader.beginObject();assertEquals(""C"",reader.nextName());reader.beginObject();reader.endObject();reader.endObject();reader.endObject();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testEmptyObject",0,"public void testEmptyObject()throws IOException {JsonElement element=new JsonParser().parse(""{}"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginObject();reader.endObject();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testSkipValue",0,"public void testSkipValue()throws IOException {JsonElement element=new JsonParser().parse(""[\""A\"",{\""B\"":[[]]},\""C\"",[[]],\""D\"",null]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();assertEquals(""A"",reader.nextString());reader.skipValue();assertEquals(""C"",reader.nextString());reader.skipValue();assertEquals(""D"",reader.nextString());reader.skipValue();reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testWrongType",0,"public void testWrongType()throws IOException {JsonElement element=new JsonParser().parse(""[[],\""A\""]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();try {reader.nextBoolean();fail();}catch(IllegalStateException expected){}try {reader.nextNull();fail();}catch(IllegalStateException expected){}try {reader.nextString();fail();}catch(IllegalStateException expected){}try {reader.nextInt();fail();}catch(IllegalStateException expected){}try {reader.nextLong();fail();}catch(IllegalStateException expected){}try {reader.nextDouble();fail();}catch(IllegalStateException expected){}try {reader.nextName();fail();}catch(IllegalStateException expected){}try {reader.beginObject();fail();}catch(IllegalStateException expected){}try {reader.endArray();fail();}catch(IllegalStateException expected){}try {reader.endObject();fail();}catch(IllegalStateException expected){}reader.beginArray();reader.endArray();try {reader.nextBoolean();fail();}catch(IllegalStateException expected){}try {reader.nextNull();fail();}catch(IllegalStateException expected){}try {reader.nextInt();fail();}catch(NumberFormatException expected){}try {reader.nextLong();fail();}catch(NumberFormatException expected){}try {reader.nextDouble();fail();}catch(NumberFormatException expected){}try {reader.nextName();fail();}catch(IllegalStateException expected){}assertEquals(""A"",reader.nextString());reader.endArray();}"
"com.google.gson.internal.bind.JsonElementReaderTest.testEarlyClose",0,"public void testEarlyClose()throws IOException {JsonElement element=new JsonParser().parse(""[1,2,3]"");JsonTreeReader reader=new JsonTreeReader(element);reader.beginArray();reader.close();try {reader.peek();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.functional.JsonArrayTest.testStringPrimitiveAddition",0,"public void testStringPrimitiveAddition(){JsonArray jsonArray=new JsonArray();jsonArray.add(""Hello"");jsonArray.add(""Goodbye"");jsonArray.add(""Thank you"");jsonArray.add((String)null);jsonArray.add(""Yes"");assertEquals(""[\""Hello\"",\""Goodbye\"",\""Thank you\"",null,\""Yes\""]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testIntegerPrimitiveAddition",0,"public void testIntegerPrimitiveAddition(){JsonArray jsonArray=new JsonArray();int x=1;jsonArray.add(x);x=2;jsonArray.add(x);x=-3;jsonArray.add(x);jsonArray.add((Integer)null);x=4;jsonArray.add(x);x=0;jsonArray.add(x);assertEquals(""[1,2,-3,null,4,0]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testDoublePrimitiveAddition",0,"public void testDoublePrimitiveAddition(){JsonArray jsonArray=new JsonArray();double x=1.0;jsonArray.add(x);x=2.13232;jsonArray.add(x);x=0.121;jsonArray.add(x);jsonArray.add((Double)null);x=-0.00234;jsonArray.add(x);jsonArray.add((Double)null);assertEquals(""[1.0,2.13232,0.121,null,-0.00234,null]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testBooleanPrimitiveAddition",0,"public void testBooleanPrimitiveAddition(){JsonArray jsonArray=new JsonArray();jsonArray.add(true);jsonArray.add(true);jsonArray.add(false);jsonArray.add(false);jsonArray.add((Boolean)null);jsonArray.add(true);assertEquals(""[true,true,false,false,null,true]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testCharPrimitiveAddition",0,"public void testCharPrimitiveAddition(){JsonArray jsonArray=new JsonArray();jsonArray.add('a');jsonArray.add('e');jsonArray.add('i');jsonArray.add((char)111);jsonArray.add((Character)null);jsonArray.add('u');jsonArray.add(""and sometimes Y"");assertEquals(""[\""a\"",\""e\"",\""i\"",\""o\"",null,\""u\"",\""and sometimes Y\""]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testMixedPrimitiveAddition",0,"public void testMixedPrimitiveAddition(){JsonArray jsonArray=new JsonArray();jsonArray.add('a');jsonArray.add(""apple"");jsonArray.add(12121);jsonArray.add((char)111);jsonArray.add((Boolean)null);jsonArray.add((Character)null);jsonArray.add(12.232);jsonArray.add(BigInteger.valueOf(2323));assertEquals(""[\""a\"",\""apple\"",12121,\""o\"",null,null,12.232,2323]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testNullPrimitiveAddition",0,"public void testNullPrimitiveAddition(){JsonArray jsonArray=new JsonArray();jsonArray.add((Character)null);jsonArray.add((Boolean)null);jsonArray.add((Integer)null);jsonArray.add((Double)null);jsonArray.add((Float)null);jsonArray.add((BigInteger)null);jsonArray.add((String)null);jsonArray.add((Boolean)null);jsonArray.add((Number)null);assertEquals(""[null,null,null,null,null,null,null,null,null]"",jsonArray.toString());}"
"com.google.gson.functional.JsonArrayTest.testSameAddition",0,"public void testSameAddition(){JsonArray jsonArray=new JsonArray();jsonArray.add('a');jsonArray.add('a');jsonArray.add(true);jsonArray.add(true);jsonArray.add(1212);jsonArray.add(1212);jsonArray.add(34.34);jsonArray.add(34.34);jsonArray.add((Boolean)null);jsonArray.add((Boolean)null);assertEquals(""[\""a\"",\""a\"",true,true,1212,1212,34.34,34.34,null,null]"",jsonArray.toString());}"
"com.google.gson.functional.JsonTreeTest.testToJsonTree",0,"public void testToJsonTree(){BagOfPrimitives bag=new BagOfPrimitives(10L,5,false,""foo"");JsonElement json=gson.toJsonTree(bag);assertTrue(json.isJsonObject());JsonObject obj=json.getAsJsonObject();Set<Entry<String,JsonElement>> children=obj.entrySet();assertEquals(4,children.size());assertContains(obj,new JsonPrimitive(10L));assertContains(obj,new JsonPrimitive(5));assertContains(obj,new JsonPrimitive(false));assertContains(obj,new JsonPrimitive(""foo""));}"
"com.google.gson.functional.JsonTreeTest.testToJsonTreeObjectType",0,"public void testToJsonTreeObjectType(){SubTypeOfBagOfPrimitives bag=new SubTypeOfBagOfPrimitives(10L,5,false,""foo"",1.4F);JsonElement json=gson.toJsonTree(bag,BagOfPrimitives.class);assertTrue(json.isJsonObject());JsonObject obj=json.getAsJsonObject();Set<Entry<String,JsonElement>> children=obj.entrySet();assertEquals(4,children.size());assertContains(obj,new JsonPrimitive(10L));assertContains(obj,new JsonPrimitive(5));assertContains(obj,new JsonPrimitive(false));assertContains(obj,new JsonPrimitive(""foo""));}"
"com.google.gson.functional.JsonTreeTest.testJsonTreeToString",0,"public void testJsonTreeToString(){SubTypeOfBagOfPrimitives bag=new SubTypeOfBagOfPrimitives(10L,5,false,""foo"",1.4F);String json1=gson.toJson(bag);JsonElement jsonElement=gson.toJsonTree(bag,SubTypeOfBagOfPrimitives.class);String json2=gson.toJson(jsonElement);assertEquals(json1,json2);}"
"com.google.gson.functional.JsonTreeTest.testJsonTreeNull",0,"public void testJsonTreeNull(){BagOfPrimitives bag=new BagOfPrimitives(10L,5,false,null);JsonObject jsonElement=(JsonObject)gson.toJsonTree(bag,BagOfPrimitives.class);assertFalse(jsonElement.has(""stringValue""));}"
"com.google.gson.CommentsTest.testParseComments",0,"/** * Test for issue 212.*/public void testParseComments(){String json=""[\n"" + ""  // this is a comment\n"" + ""  \""a\"",\n""+ ""  /* this is another comment */\n""+ ""  \""b\"",\n""+ ""  # this is yet another comment\n""+ ""  \""c\""\n""+ ""]"";List<String> abc=new Gson().fromJson(json,new TypeToken<List<String>>(){}.getType());assertEquals(Arrays.asList(""a"",""b"",""c""),abc);}"
"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedSerialization",0,"public void testPrimitiveCharacterAutoboxedSerialization(){assertEquals(""\""A\"""",gson.toJson('A'));assertEquals(""\""A\"""",gson.toJson('A',char.class));assertEquals(""\""A\"""",gson.toJson('A',Character.class));}"
"com.google.gson.functional.PrimitiveCharacterTest.testPrimitiveCharacterAutoboxedDeserialization",0,"public void testPrimitiveCharacterAutoboxedDeserialization(){char expected='a';char actual=gson.fromJson(""a"",char.class);assertEquals(expected,actual);actual=gson.fromJson(""\""a\"""",char.class);assertEquals(expected,actual);actual=gson.fromJson(""a"",Character.class);assertEquals(expected,actual);}"
"com.google.gson.functional.EscapingTest.testEscapingQuotesInStringArray",0,"public void testEscapingQuotesInStringArray()throws Exception {String[]valueWithQuotes={""beforeQuote\""afterQuote""};String jsonRepresentation=gson.toJson(valueWithQuotes);String[]target=gson.fromJson(jsonRepresentation,String[].class);assertEquals(1,target.length);assertEquals(valueWithQuotes[0],target[0]);}"
"com.google.gson.functional.EscapingTest.testEscapeAllHtmlCharacters",0,"public void testEscapeAllHtmlCharacters(){List<String> strings=new ArrayList<String>();strings.add(""<"");strings.add("">"");strings.add(""="");strings.add(""&"");strings.add(""'"");strings.add(""\"""");assertEquals(""[\""\\u003c\"",\""\\u003e\"",\""\\u003d\"",\""\\u0026\"",\""\\u0027\"",\""\\\""\""]"",gson.toJson(strings));}"
"com.google.gson.functional.EscapingTest.testEscapingObjectFields",0,"public void testEscapingObjectFields()throws Exception {BagOfPrimitives objWithPrimitives=new BagOfPrimitives(1L,1,true,""test with\"" <script>"");String jsonRepresentation=gson.toJson(objWithPrimitives);assertFalse(jsonRepresentation.contains(""<""));assertFalse(jsonRepresentation.contains("">""));assertTrue(jsonRepresentation.contains(""\\\""""));BagOfPrimitives expectedObject=gson.fromJson(jsonRepresentation,BagOfPrimitives.class);assertEquals(objWithPrimitives.getExpectedJson(),expectedObject.getExpectedJson());}"
"com.google.gson.functional.EscapingTest.testGsonAcceptsEscapedAndNonEscapedJsonDeserialization",0,"public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization()throws Exception {Gson escapeHtmlGson=new GsonBuilder().create();Gson noEscapeHtmlGson=new GsonBuilder().disableHtmlEscaping().create();BagOfPrimitives target=new BagOfPrimitives(1L,1,true,""test' / w'ith\"" / \\ <script>"");String escapedJsonForm=escapeHtmlGson.toJson(target);String nonEscapedJsonForm=noEscapeHtmlGson.toJson(target);assertFalse(escapedJsonForm.equals(nonEscapedJsonForm));assertEquals(target,noEscapeHtmlGson.fromJson(escapedJsonForm,BagOfPrimitives.class));assertEquals(target,escapeHtmlGson.fromJson(nonEscapedJsonForm,BagOfPrimitives.class));}"
"com.google.gson.functional.EscapingTest.testGsonDoubleDeserialization",0,"public void testGsonDoubleDeserialization(){BagOfPrimitives expected=new BagOfPrimitives(3L,4,true,""value1"");String json=gson.toJson(gson.toJson(expected));String value=gson.fromJson(json,String.class);BagOfPrimitives actual=gson.fromJson(value,BagOfPrimitives.class);assertEquals(expected,actual);}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterInvoked",0,"public void testJsonAdapterInvoked(){Gson gson=new Gson();String json=gson.toJson(new A(""bar""));assertEquals(""\""jsonAdapter\"""",json);json=gson.toJson(new User(""Inderjeet"",""Singh""));assertEquals(""{\""name\"":\""Inderjeet Singh\""}"",json);User user=gson.fromJson(""{'name':'Joel Leitch'}"",User.class);assertEquals(""Joel"",user.firstName);assertEquals(""Leitch"",user.lastName);json=gson.toJson(Foo.BAR);assertEquals(""\""bar\"""",json);Foo baz=gson.fromJson(""\""baz\"""",Foo.class);assertEquals(Foo.BAZ,baz);}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testJsonAdapterFactoryInvoked",0,"public void testJsonAdapterFactoryInvoked(){Gson gson=new Gson();String json=gson.toJson(new C(""bar""));assertEquals(""\""jsonAdapterFactory\"""",json);C c=gson.fromJson(""\""bar\"""",C.class);assertEquals(""jsonAdapterFactory"",c.value);}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredAdapterOverridesJsonAdapter",0,"public void testRegisteredAdapterOverridesJsonAdapter(){TypeAdapter<A> typeAdapter=new TypeAdapter<A>(){@Override public void write(JsonWriter out,A value)throws IOException {out.value(""registeredAdapter"");}@Override public A read(JsonReader in)throws IOException {return new A(in.nextString());}};Gson gson=new GsonBuilder().registerTypeAdapter(A.class,typeAdapter).create();String json=gson.toJson(new A(""abcd""));assertEquals(""\""registeredAdapter\"""",json);}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredSerializerOverridesJsonAdapter",0,"/** * The serializer overrides field adapter,but for deserializer the fieldAdapter is used.*/public void testRegisteredSerializerOverridesJsonAdapter(){JsonSerializer<A> serializer=new JsonSerializer<A>(){public JsonElement serialize(A src,Type typeOfSrc,JsonSerializationContext context){return new JsonPrimitive(""registeredSerializer"");}};Gson gson=new GsonBuilder().registerTypeAdapter(A.class,serializer).create();String json=gson.toJson(new A(""abcd""));assertEquals(""\""registeredSerializer\"""",json);A target=gson.fromJson(""abcd"",A.class);assertEquals(""jsonAdapter"",target.value);}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testRegisteredDeserializerOverridesJsonAdapter",0,"/** * The deserializer overrides Json adapter,but for serializer the jsonAdapter is used.*/public void testRegisteredDeserializerOverridesJsonAdapter(){JsonDeserializer<A> deserializer=new JsonDeserializer<A>(){public A deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return new A(""registeredDeserializer"");}};Gson gson=new GsonBuilder().registerTypeAdapter(A.class,deserializer).create();String json=gson.toJson(new A(""abcd""));assertEquals(""\""jsonAdapter\"""",json);A target=gson.fromJson(""abcd"",A.class);assertEquals(""registeredDeserializer"",target.value);}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testIncorrectTypeAdapterFails",0,"public void testIncorrectTypeAdapterFails(){try {String json=new Gson().toJson(new ClassWithIncorrectJsonAdapter(""bar""));fail(json);}catch(ClassCastException expected){}}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testSuperclassTypeAdapterNotInvoked",0,"public void testSuperclassTypeAdapterNotInvoked(){String json=new Gson().toJson(new B(""bar""));assertFalse(json.contains(""jsonAdapter""));}"
"com.google.gson.functional.JsonAdapterAnnotationOnClassesTest.testNullSafeObjectFromJson",0,"public void testNullSafeObjectFromJson(){Gson gson=new Gson();NullableClass fromJson=gson.fromJson(""null"",NullableClass.class);assertNull(fromJson);}"
"com.google.gson.functional.TypeHierarchyAdapterTest.testTypeHierarchy",0,"public void testTypeHierarchy(){Manager andy=new Manager();andy.userid=""andy"";andy.startDate=2005;andy.minions=new Employee[]{new Employee(""inder"",2007),new Employee(""joel"",2006),new Employee(""jesse"",2006)};CEO eric=new CEO();eric.userid=""eric"";eric.startDate=2001;eric.assistant=new Employee(""jerome"",2006);eric.minions=new Employee[]{new Employee(""larry"",1998),new Employee(""sergey"",1998),andy};Gson gson=new GsonBuilder().registerTypeHierarchyAdapter(Employee.class,new EmployeeAdapter()).setPrettyPrinting().create();Company company=new Company();company.ceo=eric;String json=gson.toJson(company,Company.class);assertEquals(""{\n"" + ""  \""ceo\"": {\n"" + ""    \""userid\"": \""eric\"",\n""+ ""    \""startDate\"": 2001,\n""+ ""    \""minions\"": [\n""+ ""      {\n""+ ""        \""userid\"": \""larry\"",\n""+ ""        \""startDate\"": 1998\n""+ ""      },\n""+ ""      {\n""+ ""        \""userid\"": \""sergey\"",\n""+ ""        \""startDate\"": 1998\n""+ ""      },\n""+ ""      {\n""+ ""        \""userid\"": \""andy\"",\n""+ ""        \""startDate\"": 2005,\n""+ ""        \""minions\"": [\n""+ ""          {\n""+ ""            \""userid\"": \""inder\"",\n""+ ""            \""startDate\"": 2007\n""+ ""          },\n""+ ""          {\n""+ ""            \""userid\"": \""joel\"",\n""+ ""            \""startDate\"": 2006\n""+ ""          },\n""+ ""          {\n""+ ""            \""userid\"": \""jesse\"",\n""+ ""            \""startDate\"": 2006\n""+ ""          }\n""+ ""        ]\n""+ ""      }\n""+ ""    ],\n""+ ""    \""assistant\"": {\n""+ ""      \""userid\"": \""jerome\"",\n""+ ""      \""startDate\"": 2006\n""+ ""    }\n""+ ""  }\n""+ ""}"",json);Company copied=gson.fromJson(json,Company.class);assertEquals(json,gson.toJson(copied,Company.class));assertEquals(copied.ceo.userid,company.ceo.userid);assertEquals(copied.ceo.assistant.userid,company.ceo.assistant.userid);assertEquals(copied.ceo.minions[0].userid,company.ceo.minions[0].userid);assertEquals(copied.ceo.minions[1].userid,company.ceo.minions[1].userid);assertEquals(copied.ceo.minions[2].userid,company.ceo.minions[2].userid);assertEquals(((Manager)copied.ceo.minions[2]).minions[0].userid,((Manager)company.ceo.minions[2]).minions[0].userid);assertEquals(((Manager)copied.ceo.minions[2]).minions[1].userid,((Manager)company.ceo.minions[2]).minions[1].userid);}"
"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSuperTypeFirst",0,"public void testRegisterSuperTypeFirst(){Gson gson=new GsonBuilder().registerTypeHierarchyAdapter(Employee.class,new EmployeeAdapter()).registerTypeHierarchyAdapter(Manager.class,new ManagerAdapter()).create();Manager manager=new Manager();manager.userid=""inder"";String json=gson.toJson(manager,Manager.class);assertEquals(""\""inder\"""",json);Manager copied=gson.fromJson(json,Manager.class);assertEquals(manager.userid,copied.userid);}"
"com.google.gson.functional.TypeHierarchyAdapterTest.testRegisterSubTypeFirstAllowed",0,"/** * This behaviour changed in Gson 2.1;it used to throw. */public void testRegisterSubTypeFirstAllowed(){new GsonBuilder().registerTypeHierarchyAdapter(Manager.class,new ManagerAdapter()).registerTypeHierarchyAdapter(Employee.class,new EmployeeAdapter()).create();}"
"com.google.gson.GsonTypeAdapterTest.testDefaultTypeAdapterThrowsParseException",0,"public void testDefaultTypeAdapterThrowsParseException()throws Exception {try {gson.fromJson(""{\""abc\"":123}"",BigInteger.class);fail(""Should have thrown a JsonParseException"");}catch(JsonParseException expected){}}"
"com.google.gson.GsonTypeAdapterTest.testTypeAdapterThrowsException",0,"public void testTypeAdapterThrowsException()throws Exception {try {gson.toJson(new AtomicLong(0));fail(""Type Adapter should have thrown an exception"");}catch(IllegalStateException expected){}try {gson.fromJson(""123"",AtomicLong.class);fail(""Type Adapter should have thrown an exception"");}catch(JsonParseException expected){}}"
"com.google.gson.GsonTypeAdapterTest.testTypeAdapterProperlyConvertsTypes",0,"public void testTypeAdapterProperlyConvertsTypes()throws Exception {int intialValue=1;AtomicInteger atomicInt=new AtomicInteger(intialValue);String json=gson.toJson(atomicInt);assertEquals(intialValue + 1,Integer.parseInt(json));atomicInt=gson.fromJson(json,AtomicInteger.class);assertEquals(intialValue,atomicInt.get());}"
"com.google.gson.GsonTypeAdapterTest.testTypeAdapterDoesNotAffectNonAdaptedTypes",0,"public void testTypeAdapterDoesNotAffectNonAdaptedTypes()throws Exception {String expected=""blah"";String actual=gson.toJson(expected);assertEquals(""\"""" + expected + ""\"""",actual);actual=gson.fromJson(actual,String.class);assertEquals(expected,actual);}"
"com.google.gson.GsonTypeAdapterTest.testDeserializerForAbstractClass",0,"public void testDeserializerForAbstractClass(){Concrete instance=new Concrete();instance.a=""android"";instance.b=""beep"";assertSerialized(""{\""a\"":\""android\""}"",Abstract.class,true,true,instance);assertSerialized(""{\""a\"":\""android\""}"",Abstract.class,true,false,instance);assertSerialized(""{\""a\"":\""android\""}"",Abstract.class,false,true,instance);assertSerialized(""{\""a\"":\""android\""}"",Abstract.class,false,false,instance);assertSerialized(""{\""b\"":\""beep\"",\""a\"":\""android\""}"",Concrete.class,true,true,instance);assertSerialized(""{\""b\"":\""beep\"",\""a\"":\""android\""}"",Concrete.class,true,false,instance);assertSerialized(""{\""b\"":\""beep\"",\""a\"":\""android\""}"",Concrete.class,false,true,instance);assertSerialized(""{\""b\"":\""beep\"",\""a\"":\""android\""}"",Concrete.class,false,false,instance);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicySerialization",0,"public void testGsonWithNonDefaultFieldNamingPolicySerialization(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""SomeConstantStringInstanceField\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithNonDefaultFieldNamingPolicyDeserialiation",0,"public void testGsonWithNonDefaultFieldNamingPolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create();String target=""{\""SomeConstantStringInstanceField\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicySerialization",0,"public void testGsonWithLowerCaseDashPolicySerialization(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""some-constant-string-instance-field\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseDashPolicyDeserialiation",0,"public void testGsonWithLowerCaseDashPolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_DASHES).create();String target=""{\""some-constant-string-instance-field\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicySerialization",0,"public void testGsonWithLowerCaseUnderscorePolicySerialization(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""some_constant_string_instance_field\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithLowerCaseUnderscorePolicyDeserialiation",0,"public void testGsonWithLowerCaseUnderscorePolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();String target=""{\""some_constant_string_instance_field\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicySerialization",0,"public void testGsonWithSerializedNameFieldNamingPolicySerialization(){Gson gson=builder.create();ClassWithSerializedNameFields expected=new ClassWithSerializedNameFields(5,6);String actual=gson.toJson(expected);assertEquals(expected.getExpectedJson(),actual);}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithSerializedNameFieldNamingPolicyDeserialization",0,"public void testGsonWithSerializedNameFieldNamingPolicyDeserialization(){Gson gson=builder.create();ClassWithSerializedNameFields expected=new ClassWithSerializedNameFields(5,7);ClassWithSerializedNameFields actual=gson.fromJson(expected.getExpectedJson(),ClassWithSerializedNameFields.class);assertEquals(expected.f,actual.f);}"
"com.google.gson.functional.NamingPolicyTest.testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization",0,"public void testGsonDuplicateNameUsingSerializedNameFieldNamingPolicySerialization(){Gson gson=builder.create();try {ClassWithDuplicateFields target=new ClassWithDuplicateFields(10);gson.toJson(target);fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicySerialiation",0,"public void testGsonWithUpperCamelCaseSpacesPolicySerialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create();StringWrapper target=new StringWrapper(""blah"");assertEquals(""{\""Some Constant String Instance Field\"":\"""" + target.someConstantStringInstanceField + ""\""}"",gson.toJson(target));}"
"com.google.gson.functional.NamingPolicyTest.testGsonWithUpperCamelCaseSpacesPolicyDeserialiation",0,"public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation(){Gson gson=builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create();String target=""{\""Some Constant String Instance Field\"":\""someValue\""}"";StringWrapper deserializedObject=gson.fromJson(target,StringWrapper.class);assertEquals(""someValue"",deserializedObject.someConstantStringInstanceField);}"
"com.google.gson.functional.NamingPolicyTest.testDeprecatedNamingStrategy",0,"public void testDeprecatedNamingStrategy()throws Exception {Gson gson=builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create();ClassWithDuplicateFields target=new ClassWithDuplicateFields(10);String actual=gson.toJson(target);assertEquals(""{\""A\"":10}"",actual);}"
"com.google.gson.functional.NamingPolicyTest.testComplexFieldNameStrategy",0,"public void testComplexFieldNameStrategy()throws Exception {Gson gson=new Gson();String json=gson.toJson(new ClassWithComplexFieldName(10));String escapedFieldName=""@value\\\""_s$\\\\"";assertEquals(""{\"""" + escapedFieldName + ""\"":10}"",json);ClassWithComplexFieldName obj=gson.fromJson(json,ClassWithComplexFieldName.class);assertEquals(10,obj.value);}"
"com.google.gson.functional.NamingPolicyTest.testAtSignInSerializedName",0,"/** * http://code.google.com/p/google-gson/issues/detail?id=349 */public void testAtSignInSerializedName(){assertEquals(""{\""@foo\"":\""bar\""}"",new Gson().toJson(new AtName()));}"
"com.google.gson.JsonArrayTest.testEqualsOnEmptyArray",0,"public void testEqualsOnEmptyArray(){MoreAsserts.assertEqualsAndHashCode(new JsonArray(),new JsonArray());}"
"com.google.gson.JsonArrayTest.testEqualsNonEmptyArray",0,"public void testEqualsNonEmptyArray(){JsonArray a=new JsonArray();JsonArray b=new JsonArray();assertEquals(a,a);a.add(new JsonObject());assertFalse(a.equals(b));assertFalse(b.equals(a));b.add(new JsonObject());MoreAsserts.assertEqualsAndHashCode(a,b);a.add(new JsonObject());assertFalse(a.equals(b));assertFalse(b.equals(a));b.add(JsonNull.INSTANCE);assertFalse(a.equals(b));assertFalse(b.equals(a));}"
"com.google.gson.JsonArrayTest.testRemove",0,"public void testRemove(){JsonArray array=new JsonArray();try {array.remove(0);fail();}catch(IndexOutOfBoundsException expected){}JsonPrimitive a=new JsonPrimitive(""a"");array.add(a);assertTrue(array.remove(a));assertFalse(array.contains(a));array.add(a);array.add(new JsonPrimitive(""b""));assertEquals(""b"",array.remove(1).getAsString());assertEquals(1,array.size());assertTrue(array.contains(a));}"
"com.google.gson.JsonArrayTest.testSet",0,"public void testSet(){JsonArray array=new JsonArray();try {array.set(0,new JsonPrimitive(1));fail();}catch(IndexOutOfBoundsException expected){}JsonPrimitive a=new JsonPrimitive(""a"");array.add(a);array.set(0,new JsonPrimitive(""b""));assertEquals(""b"",array.get(0).getAsString());array.set(0,null);assertNull(array.get(0));array.set(0,new JsonPrimitive(""c""));assertEquals(""c"",array.get(0).getAsString());assertEquals(1,array.size());}"
"com.google.gson.JsonArrayTest.testDeepCopy",0,"public void testDeepCopy(){JsonArray original=new JsonArray();JsonArray firstEntry=new JsonArray();original.add(firstEntry);JsonArray copy=original.deepCopy();original.add(new JsonPrimitive(""y""));assertEquals(1,copy.size());firstEntry.add(new JsonPrimitive(""z""));assertEquals(1,original.get(0).getAsJsonArray().size());assertEquals(0,copy.get(0).getAsJsonArray().size());}"
"com.google.gson.functional.MoreSpecificTypeSerializationTest.testSubclassFields",0,"public void testSubclassFields(){ClassWithBaseFields target=new ClassWithBaseFields(new Sub(1,2));String json=gson.toJson(target);assertTrue(json.contains(""\""b\"":1""));assertTrue(json.contains(""\""s\"":2""));}"
"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfSubclassFields",0,"public void testListOfSubclassFields(){Collection<Base> list=new ArrayList<Base>();list.add(new Base(1));list.add(new Sub(2,3));ClassWithContainersOfBaseFields target=new ClassWithContainersOfBaseFields(list,null);String json=gson.toJson(target);assertTrue(json,json.contains(""{\""b\"":1}""));assertTrue(json,json.contains(""{\""s\"":3,\""b\"":2}""));}"
"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfSubclassFields",0,"public void testMapOfSubclassFields(){Map<String,Base> map=new HashMap<String,Base>();map.put(""base"",new Base(1));map.put(""sub"",new Sub(2,3));ClassWithContainersOfBaseFields target=new ClassWithContainersOfBaseFields(null,map);JsonObject json=gson.toJsonTree(target).getAsJsonObject().get(""map"").getAsJsonObject();assertEquals(1,json.get(""base"").getAsJsonObject().get(""b"").getAsInt());JsonObject sub=json.get(""sub"").getAsJsonObject();assertEquals(2,sub.get(""b"").getAsInt());assertEquals(3,sub.get(""s"").getAsInt());}"
"com.google.gson.functional.MoreSpecificTypeSerializationTest.testParameterizedSubclassFields",0,"/** * For parameterized type,Gson ignores the more-specific type and sticks to the declared type*/public void testParameterizedSubclassFields(){ClassWithParameterizedBaseFields target=new ClassWithParameterizedBaseFields(new ParameterizedSub<String>(""one"",""two""));String json=gson.toJson(target);assertTrue(json.contains(""\""t\"":\""one\""""));assertFalse(json.contains(""\""s\""""));}"
"com.google.gson.functional.MoreSpecificTypeSerializationTest.testListOfParameterizedSubclassFields",0,"/** * For parameterized type in a List,Gson ignores the more-specific type and sticks to the declared type*/public void testListOfParameterizedSubclassFields(){Collection<ParameterizedBase<String>> list=new ArrayList<ParameterizedBase<String>>();list.add(new ParameterizedBase<String>(""one""));list.add(new ParameterizedSub<String>(""two"",""three""));ClassWithContainersOfParameterizedBaseFields target=new ClassWithContainersOfParameterizedBaseFields(list,null);String json=gson.toJson(target);assertTrue(json,json.contains(""{\""t\"":\""one\""}""));assertFalse(json,json.contains(""\""s\"":""));}"
"com.google.gson.functional.MoreSpecificTypeSerializationTest.testMapOfParameterizedSubclassFields",0,"/** * For parameterized type in a map,Gson ignores the more-specific type and sticks to the declared type*/public void testMapOfParameterizedSubclassFields(){Map<String,ParameterizedBase<String>> map=new HashMap<String,ParameterizedBase<String>>();map.put(""base"",new ParameterizedBase<String>(""one""));map.put(""sub"",new ParameterizedSub<String>(""two"",""three""));ClassWithContainersOfParameterizedBaseFields target=new ClassWithContainersOfParameterizedBaseFields(null,map);JsonObject json=gson.toJsonTree(target).getAsJsonObject().get(""map"").getAsJsonObject();assertEquals(""one"",json.get(""base"").getAsJsonObject().get(""t"").getAsString());JsonObject sub=json.get(""sub"").getAsJsonObject();assertEquals(""two"",sub.get(""t"").getAsString());assertNull(sub.get(""s""));}"
"com.google.gson.functional.PrintFormattingTest.testCompactFormattingLeavesNoWhiteSpace",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testCompactFormattingLeavesNoWhiteSpace(){List list=new ArrayList();list.add(new BagOfPrimitives());list.add(new Nested());list.add(new PrimitiveArray());list.add(new ClassWithTransientFields());String json=gson.toJson(list);assertContainsNoWhiteSpace(json);}"
"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValues",0,"public void testJsonObjectWithNullValues(){JsonObject obj=new JsonObject();obj.addProperty(""field1"",""value1"");obj.addProperty(""field2"",(String)null);String json=gson.toJson(obj);assertTrue(json.contains(""field1""));assertFalse(json.contains(""field2""));}"
"com.google.gson.functional.PrintFormattingTest.testJsonObjectWithNullValuesSerialized",0,"public void testJsonObjectWithNullValuesSerialized(){gson=new GsonBuilder().serializeNulls().create();JsonObject obj=new JsonObject();obj.addProperty(""field1"",""value1"");obj.addProperty(""field2"",(String)null);String json=gson.toJson(obj);assertTrue(json.contains(""field1""));assertTrue(json.contains(""field2""));}"
"com.google.gson.functional.SecurityTest.testNonExecutableJsonSerialization",0,"public void testNonExecutableJsonSerialization(){Gson gson=gsonBuilder.generateNonExecutableJson().create();String json=gson.toJson(new BagOfPrimitives());assertTrue(json.startsWith(JSON_NON_EXECUTABLE_PREFIX));}"
"com.google.gson.functional.SecurityTest.testNonExecutableJsonDeserialization",0,"public void testNonExecutableJsonDeserialization(){String json=JSON_NON_EXECUTABLE_PREFIX + ""{longValue:1}"";Gson gson=gsonBuilder.create();BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(1,target.longValue);}"
"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenSerialization",0,"public void testJsonWithNonExectuableTokenSerialization(){Gson gson=gsonBuilder.generateNonExecutableJson().create();String json=gson.toJson(JSON_NON_EXECUTABLE_PREFIX);assertTrue(json.contains("")]}'\n""));}"
"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithRegularGsonDeserialization",0,"/** * Gson should be able to deserialize a stream with non-exectuable token even if it is created without  {@link GsonBuilder#generateNonExecutableJson()}.*/public void testJsonWithNonExectuableTokenWithRegularGsonDeserialization(){Gson gson=gsonBuilder.create();String json=JSON_NON_EXECUTABLE_PREFIX + ""{stringValue:')]}\\u0027\\n'}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals("")]}'\n"",target.stringValue);}"
"com.google.gson.functional.SecurityTest.testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization",0,"/** * Gson should be able to deserialize a stream with non-exectuable token if it is created with  {@link GsonBuilder#generateNonExecutableJson()}.*/public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization(){Gson gson=gsonBuilder.generateNonExecutableJson().create();String json=JSON_NON_EXECUTABLE_PREFIX + ""{intValue:2,stringValue:')]}\\u0027\\n'}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals("")]}'\n"",target.stringValue);assertEquals(2,target.intValue);}"
"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipClasses",0,"public void testNeverSkipClasses()throws Exception {assertFalse(excluder.excludeClass(MockObject.class,true));assertFalse(excluder.excludeClass(MockObject.class,false));}"
"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipNonAnnotatedFields",0,"public void testSkipNonAnnotatedFields()throws Exception {Field f=createFieldAttributes(""hiddenField"");assertTrue(excluder.excludeField(f,true));assertTrue(excluder.excludeField(f,false));}"
"com.google.gson.ExposeAnnotationExclusionStrategyTest.testSkipExplicitlySkippedFields",0,"public void testSkipExplicitlySkippedFields()throws Exception {Field f=createFieldAttributes(""explicitlyHiddenField"");assertTrue(excluder.excludeField(f,true));assertTrue(excluder.excludeField(f,false));}"
"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExposedAnnotatedFields",0,"public void testNeverSkipExposedAnnotatedFields()throws Exception {Field f=createFieldAttributes(""exposedField"");assertFalse(excluder.excludeField(f,true));assertFalse(excluder.excludeField(f,false));}"
"com.google.gson.ExposeAnnotationExclusionStrategyTest.testNeverSkipExplicitlyExposedAnnotatedFields",0,"public void testNeverSkipExplicitlyExposedAnnotatedFields()throws Exception {Field f=createFieldAttributes(""explicitlyExposedField"");assertFalse(excluder.excludeField(f,true));assertFalse(excluder.excludeField(f,false));}"
"com.google.gson.ExposeAnnotationExclusionStrategyTest.testDifferentSerializeAndDeserializeField",0,"public void testDifferentSerializeAndDeserializeField()throws Exception {Field f=createFieldAttributes(""explicitlyDifferentModeField"");assertFalse(excluder.excludeField(f,true));assertTrue(excluder.excludeField(f,false));}"
"com.google.gson.JsonPrimitiveTest.testBoolean",0,"public void testBoolean()throws Exception {JsonPrimitive json=new JsonPrimitive(Boolean.TRUE);assertTrue(json.isBoolean());assertTrue(json.getAsBoolean());json=new JsonPrimitive(1);assertFalse(json.getAsBoolean());json=new JsonPrimitive(""1"");assertFalse(json.getAsBoolean());json=new JsonPrimitive(""true"");assertTrue(json.getAsBoolean());json=new JsonPrimitive(""TrUe"");assertTrue(json.getAsBoolean());json=new JsonPrimitive(""1.3"");assertFalse(json.getAsBoolean());}"
"com.google.gson.JsonPrimitiveTest.testParsingStringAsBoolean",0,"public void testParsingStringAsBoolean()throws Exception {JsonPrimitive json=new JsonPrimitive(""true"");assertFalse(json.isBoolean());assertTrue(json.getAsBoolean());}"
"com.google.gson.JsonPrimitiveTest.testParsingStringAsNumber",0,"public void testParsingStringAsNumber()throws Exception {JsonPrimitive json=new JsonPrimitive(""1"");assertFalse(json.isNumber());assertEquals(1D,json.getAsDouble(),0.00001);assertEquals(1F,json.getAsFloat(),0.00001);assertEquals(1,json.getAsInt());assertEquals(1L,json.getAsLong());assertEquals((short)1,json.getAsShort());assertEquals((byte)1,json.getAsByte());assertEquals(new BigInteger(""1""),json.getAsBigInteger());assertEquals(new BigDecimal(""1""),json.getAsBigDecimal());}"
"com.google.gson.JsonPrimitiveTest.testStringsAndChar",0,"public void testStringsAndChar()throws Exception {JsonPrimitive json=new JsonPrimitive(""abc"");assertTrue(json.isString());assertEquals('a',json.getAsCharacter());assertEquals(""abc"",json.getAsString());json=new JsonPrimitive('z');assertTrue(json.isString());assertEquals('z',json.getAsCharacter());assertEquals(""z"",json.getAsString());}"
"com.google.gson.JsonPrimitiveTest.testExponential",0,"public void testExponential()throws Exception {JsonPrimitive json=new JsonPrimitive(""1E+7"");assertEquals(new BigDecimal(""1E+7""),json.getAsBigDecimal());assertEquals(new Double(""1E+7""),json.getAsDouble(),0.00001);assertEquals(new Float(""1E+7""),json.getAsDouble(),0.00001);try {json.getAsInt();fail(""Integers can not handle exponents like this."");}catch(NumberFormatException expected){}}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsShort",0,"public void testByteEqualsShort(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new Short((short)10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsInteger",0,"public void testByteEqualsInteger(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new Integer(10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsLong",0,"public void testByteEqualsLong(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new Long(10L));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testByteEqualsBigInteger",0,"public void testByteEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testShortEqualsInteger",0,"public void testShortEqualsInteger(){JsonPrimitive p1=new JsonPrimitive(new Short((short)10));JsonPrimitive p2=new JsonPrimitive(new Integer(10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testShortEqualsLong",0,"public void testShortEqualsLong(){JsonPrimitive p1=new JsonPrimitive(new Short((short)10));JsonPrimitive p2=new JsonPrimitive(new Long(10));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testShortEqualsBigInteger",0,"public void testShortEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Short((short)10));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testIntegerEqualsLong",0,"public void testIntegerEqualsLong(){JsonPrimitive p1=new JsonPrimitive(new Integer(10));JsonPrimitive p2=new JsonPrimitive(new Long(10L));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testIntegerEqualsBigInteger",0,"public void testIntegerEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Integer(10));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testLongEqualsBigInteger",0,"public void testLongEqualsBigInteger(){JsonPrimitive p1=new JsonPrimitive(new Long(10L));JsonPrimitive p2=new JsonPrimitive(new BigInteger(""10""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testFloatEqualsDouble",0,"public void testFloatEqualsDouble(){JsonPrimitive p1=new JsonPrimitive(new Float(10.25F));JsonPrimitive p2=new JsonPrimitive(new Double(10.25D));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testFloatEqualsBigDecimal",0,"public void testFloatEqualsBigDecimal(){JsonPrimitive p1=new JsonPrimitive(new Float(10.25F));JsonPrimitive p2=new JsonPrimitive(new BigDecimal(""10.25""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testDoubleEqualsBigDecimal",0,"public void testDoubleEqualsBigDecimal(){JsonPrimitive p1=new JsonPrimitive(new Double(10.25D));JsonPrimitive p2=new JsonPrimitive(new BigDecimal(""10.25""));assertEquals(p1,p2);assertEquals(p1.hashCode(),p2.hashCode());}"
"com.google.gson.JsonPrimitiveTest.testValidJsonOnToString",0,"public void testValidJsonOnToString()throws Exception {JsonPrimitive json=new JsonPrimitive(""Some\nEscaped\nValue"");assertEquals(""\""Some\\nEscaped\\nValue\"""",json.toString());json=new JsonPrimitive(new BigDecimal(""1.333""));assertEquals(""1.333"",json.toString());}"
"com.google.gson.JsonPrimitiveTest.testEquals",0,"public void testEquals(){MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(""A""),new JsonPrimitive(""A""));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(true),new JsonPrimitive(true));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(5L),new JsonPrimitive(5L));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive('a'),new JsonPrimitive('a'));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN),new JsonPrimitive(Float.NaN));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NEGATIVE_INFINITY),new JsonPrimitive(Float.NEGATIVE_INFINITY));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.POSITIVE_INFINITY),new JsonPrimitive(Float.POSITIVE_INFINITY));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NaN),new JsonPrimitive(Double.NaN));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.NEGATIVE_INFINITY),new JsonPrimitive(Double.NEGATIVE_INFINITY));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Double.POSITIVE_INFINITY),new JsonPrimitive(Double.POSITIVE_INFINITY));assertFalse(new JsonPrimitive(""a"").equals(new JsonPrimitive(""b"")));assertFalse(new JsonPrimitive(true).equals(new JsonPrimitive(false)));assertFalse(new JsonPrimitive(0).equals(new JsonPrimitive(1)));}"
"com.google.gson.JsonPrimitiveTest.testEqualsAcrossTypes",0,"public void testEqualsAcrossTypes(){MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(""a""),new JsonPrimitive('a'));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(""0"")),new JsonPrimitive(0));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(0),new JsonPrimitive(0L));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(new BigInteger(""0"")),new JsonPrimitive(0));MoreAsserts.assertEqualsAndHashCode(new JsonPrimitive(Float.NaN),new JsonPrimitive(Double.NaN));}"
"com.google.gson.JsonPrimitiveTest.testEqualsIntegerAndBigInteger",0,"public void testEqualsIntegerAndBigInteger(){JsonPrimitive a=new JsonPrimitive(5L);JsonPrimitive b=new JsonPrimitive(new BigInteger(""18446744073709551621""));assertTrue(a + "" equals "" + b,a.equals(b));}"
"com.google.gson.JsonPrimitiveTest.testEqualsDoesNotEquateStringAndNonStringTypes",0,"public void testEqualsDoesNotEquateStringAndNonStringTypes(){assertFalse(new JsonPrimitive(""true"").equals(new JsonPrimitive(true)));assertFalse(new JsonPrimitive(""0"").equals(new JsonPrimitive(0)));assertFalse(new JsonPrimitive(""NaN"").equals(new JsonPrimitive(Float.NaN)));}"
"com.google.gson.JsonPrimitiveTest.testDeepCopy",0,"public void testDeepCopy(){JsonPrimitive a=new JsonPrimitive(""a"");assertSame(a,a.deepCopy());}"
"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvoked",0,"public void testDelegateInvoked(){List<BagOfPrimitives> bags=new ArrayList<BagOfPrimitives>();for (int i=0;i < 10;++i){bags.add(new BagOfPrimitives(i,i,i % 2 == 0,String.valueOf(i)));}String json=gson.toJson(bags);bags=gson.fromJson(json,new TypeToken<List<BagOfPrimitives>>(){}.getType());assertEquals(51,stats.numReads);assertEquals(51,stats.numWrites);}"
"com.google.gson.functional.DelegateTypeAdapterTest.testDelegateInvokedOnStrings",0,"public void testDelegateInvokedOnStrings(){String[]bags={""1"",""2"",""3"",""4""};String json=gson.toJson(bags);bags=gson.fromJson(json,String[].class);assertEquals(5,stats.numReads);assertEquals(5,stats.numWrites);}"
"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapNoTypeSerialization",0,"public void testEmptyMapNoTypeSerialization(){Map<String,String> emptyMap=new HashMap<String,String>();JsonElement element=gson.toJsonTree(emptyMap,emptyMap.getClass());assertTrue(element instanceof JsonObject);JsonObject emptyMapJsonObject=(JsonObject)element;assertTrue(emptyMapJsonObject.entrySet().isEmpty());}"
"com.google.gson.DefaultMapJsonSerializerTest.testEmptyMapSerialization",0,"public void testEmptyMapSerialization(){Type mapType=new TypeToken<Map<String,String>>(){}.getType();Map<String,String> emptyMap=new HashMap<String,String>();JsonElement element=gson.toJsonTree(emptyMap,mapType);assertTrue(element instanceof JsonObject);JsonObject emptyMapJsonObject=(JsonObject)element;assertTrue(emptyMapJsonObject.entrySet().isEmpty());}"
"com.google.gson.DefaultMapJsonSerializerTest.testNonEmptyMapSerialization",0,"public void testNonEmptyMapSerialization(){Type mapType=new TypeToken<Map<String,String>>(){}.getType();Map<String,String> myMap=new HashMap<String,String>();String key=""key1"";myMap.put(key,""value1"");Gson gson=new Gson();JsonElement element=gson.toJsonTree(myMap,mapType);assertTrue(element.isJsonObject());JsonObject mapJsonObject=element.getAsJsonObject();assertTrue(mapJsonObject.has(key));}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerialization",0,"public void testExclusionStrategySerialization()throws Exception {Gson gson=createGson(new MyExclusionStrategy(String.class),true);String json=gson.toJson(src);assertFalse(json.contains(""\""stringField\""""));assertFalse(json.contains(""\""annotatedField\""""));assertTrue(json.contains(""\""longField\""""));}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactDeserialization",0,"public void testExclusionStrategySerializationDoesNotImpactDeserialization(){String json=""{\""annotatedField\"":1,\""stringField\"":\""x\"",\""longField\"":2}"";Gson gson=createGson(new MyExclusionStrategy(String.class),true);SampleObjectForTest value=gson.fromJson(json,SampleObjectForTest.class);assertEquals(1,value.annotatedField);assertEquals(""x"",value.stringField);assertEquals(2,value.longField);}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyDeserialization",0,"public void testExclusionStrategyDeserialization()throws Exception {Gson gson=createGson(new MyExclusionStrategy(String.class),false);JsonObject json=new JsonObject();json.add(""annotatedField"",new JsonPrimitive(src.annotatedField + 5));json.add(""stringField"",new JsonPrimitive(src.stringField + ""blah,blah""));json.add(""longField"",new JsonPrimitive(1212311L));SampleObjectForTest target=gson.fromJson(json,SampleObjectForTest.class);assertEquals(1212311L,target.longField);assertEquals(src.annotatedField,target.annotatedField);assertEquals(src.stringField,target.stringField);}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategySerializationDoesNotImpactSerialization",0,"public void testExclusionStrategySerializationDoesNotImpactSerialization()throws Exception {Gson gson=createGson(new MyExclusionStrategy(String.class),false);String json=gson.toJson(src);assertTrue(json.contains(""\""stringField\""""));assertTrue(json.contains(""\""annotatedField\""""));assertTrue(json.contains(""\""longField\""""));}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExclusionStrategyWithMode",0,"public void testExclusionStrategyWithMode()throws Exception {SampleObjectForTest testObj=new SampleObjectForTest(src.annotatedField + 5,src.stringField + ""blah,blah"",src.longField + 655L);Gson gson=createGson(new MyExclusionStrategy(String.class),false);JsonObject json=gson.toJsonTree(testObj).getAsJsonObject();assertEquals(testObj.annotatedField,json.get(""annotatedField"").getAsInt());assertEquals(testObj.stringField,json.get(""stringField"").getAsString());assertEquals(testObj.longField,json.get(""longField"").getAsLong());SampleObjectForTest target=gson.fromJson(json,SampleObjectForTest.class);assertEquals(testObj.longField,target.longField);assertEquals(src.annotatedField,target.annotatedField);assertEquals(src.stringField,target.stringField);}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerialization",0,"public void testExcludeTopLevelClassSerialization(){Gson gson=new GsonBuilder().addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();assertEquals(""null"",gson.toJson(new SampleObjectForTest(),SampleObjectForTest.class));}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassSerializationDoesNotImpactDeserialization",0,"public void testExcludeTopLevelClassSerializationDoesNotImpactDeserialization(){Gson gson=new GsonBuilder().addSerializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();String json=""{\""annotatedField\"":1,\""stringField\"":\""x\"",\""longField\"":2}"";SampleObjectForTest value=gson.fromJson(json,SampleObjectForTest.class);assertEquals(1,value.annotatedField);assertEquals(""x"",value.stringField);assertEquals(2,value.longField);}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserialization",0,"public void testExcludeTopLevelClassDeserialization(){Gson gson=new GsonBuilder().addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();String json=""{\""annotatedField\"":1,\""stringField\"":\""x\"",\""longField\"":2}"";SampleObjectForTest value=gson.fromJson(json,SampleObjectForTest.class);assertNull(value);}"
"com.google.gson.functional.ExclusionStrategyFunctionalTest.testExcludeTopLevelClassDeserializationDoesNotImpactSerialization",0,"public void testExcludeTopLevelClassDeserializationDoesNotImpactSerialization(){Gson gson=new GsonBuilder().addDeserializationExclusionStrategy(EXCLUDE_SAMPLE_OBJECT_FOR_TEST).create();String json=gson.toJson(new SampleObjectForTest(),SampleObjectForTest.class);assertTrue(json.contains(""\""stringField\""""));assertTrue(json.contains(""\""annotatedField\""""));assertTrue(json.contains(""\""longField\""""));}"
"com.google.gson.ParameterizedTypeTest.testOurTypeFunctionality",0,"public void testOurTypeFunctionality()throws Exception {Type parameterizedType=new TypeToken<List<String>>(){}.getType();assertNull(ourType.getOwnerType());assertEquals(String.class,ourType.getActualTypeArguments()[0]);assertEquals(List.class,ourType.getRawType());assertEquals(parameterizedType,ourType);assertEquals(parameterizedType.hashCode(),ourType.hashCode());}"
"com.google.gson.ParameterizedTypeTest.testNotEquals",0,"public void testNotEquals()throws Exception {Type differentParameterizedType=new TypeToken<List<Integer>>(){}.getType();assertFalse(differentParameterizedType.equals(ourType));assertFalse(ourType.equals(differentParameterizedType));}"
"com.google.gson.functional.LeniencyTest.testLenientFromJson",0,"public void testLenientFromJson(){List<String> json=gson.fromJson("""" + ""[# One!\n"" + ""  'Hi' #Element!\n""+ ""]# Array!"",new TypeToken<List<String>>(){}.getType());assertEquals(singletonList(""Hi""),json);}"
"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassObject",0,"public void testExcludeInnerClassObject()throws Exception {Class<?> clazz=innerClass.getClass();assertTrue(excluder.excludeClass(clazz,true));}"
"com.google.gson.InnerClassExclusionStrategyTest.testExcludeInnerClassField",0,"public void testExcludeInnerClassField()throws Exception {Field f=getClass().getField(""innerClass"");assertTrue(excluder.excludeField(f,true));}"
"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassObject",0,"public void testIncludeStaticNestedClassObject()throws Exception {Class<?> clazz=staticNestedClass.getClass();assertFalse(excluder.excludeClass(clazz,true));}"
"com.google.gson.InnerClassExclusionStrategyTest.testIncludeStaticNestedClassField",0,"public void testIncludeStaticNestedClassField()throws Exception {Field f=getClass().getField(""staticNestedClass"");assertFalse(excluder.excludeField(f,true));}"
"com.google.gson.GsonBuilderTest.testCreatingMoreThanOnce",0,"public void testCreatingMoreThanOnce(){GsonBuilder builder=new GsonBuilder();builder.create();builder.create();}"
"com.google.gson.GsonBuilderTest.testExcludeFieldsWithModifiers",0,"public void testExcludeFieldsWithModifiers(){Gson gson=new GsonBuilder().excludeFieldsWithModifiers(Modifier.VOLATILE,Modifier.PRIVATE).create();assertEquals(""{\""d\"":\""d\""}"",gson.toJson(new HasModifiers()));}"
"com.google.gson.GsonBuilderTest.testRegisterTypeAdapterForCoreType",0,"public void testRegisterTypeAdapterForCoreType(){Type[]types={byte.class,int.class,double.class,Short.class,Long.class,String.class};for(Type type : types){new GsonBuilder().registerTypeAdapter(type,NULL_TYPE_ADAPTER);}}"
"com.google.gson.GsonBuilderTest.testTransientFieldExclusion",0,"public void testTransientFieldExclusion(){Gson gson=new GsonBuilder().excludeFieldsWithModifiers().create();assertEquals(""{\""a\"":\""a\""}"",gson.toJson(new HasTransients()));}"
"com.google.gson.MixedStreamTest.testWriteMixedStreamed",0,"public void testWriteMixedStreamed()throws IOException {Gson gson=new Gson();StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.setIndent(""  "");gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);gson.toJson(BLACK_BMW,Car.class,jsonWriter);gson.toJson(RED_MIATA,Car.class,jsonWriter);jsonWriter.endArray();assertEquals(CARS_JSON,stringWriter.toString());}"
"com.google.gson.MixedStreamTest.testReadMixedStreamed",0,"public void testReadMixedStreamed()throws IOException {Gson gson=new Gson();StringReader stringReader=new StringReader(CARS_JSON);JsonReader jsonReader=new JsonReader(stringReader);jsonReader.beginArray();assertEquals(BLUE_MUSTANG,gson.fromJson(jsonReader,Car.class));assertEquals(BLACK_BMW,gson.fromJson(jsonReader,Car.class));assertEquals(RED_MIATA,gson.fromJson(jsonReader,Car.class));jsonReader.endArray();}"
"com.google.gson.MixedStreamTest.testReaderDoesNotMutateState",0,"public void testReaderDoesNotMutateState()throws IOException {Gson gson=new Gson();JsonReader jsonReader=new JsonReader(new StringReader(CARS_JSON));jsonReader.beginArray();jsonReader.setLenient(false);gson.fromJson(jsonReader,Car.class);assertFalse(jsonReader.isLenient());jsonReader.setLenient(true);gson.fromJson(jsonReader,Car.class);assertTrue(jsonReader.isLenient());}"
"com.google.gson.MixedStreamTest.testWriteDoesNotMutateState",0,"public void testWriteDoesNotMutateState()throws IOException {Gson gson=new Gson();JsonWriter jsonWriter=new JsonWriter(new StringWriter());jsonWriter.beginArray();jsonWriter.setHtmlSafe(true);jsonWriter.setLenient(true);gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);assertTrue(jsonWriter.isHtmlSafe());assertTrue(jsonWriter.isLenient());jsonWriter.setHtmlSafe(false);jsonWriter.setLenient(false);gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);assertFalse(jsonWriter.isHtmlSafe());assertFalse(jsonWriter.isLenient());}"
"com.google.gson.MixedStreamTest.testReadInvalidState",0,"public void testReadInvalidState()throws IOException {Gson gson=new Gson();JsonReader jsonReader=new JsonReader(new StringReader(CARS_JSON));jsonReader.beginArray();jsonReader.beginObject();try {gson.fromJson(jsonReader,String.class);fail();}catch(JsonParseException expected){}}"
"com.google.gson.MixedStreamTest.testReadClosed",0,"public void testReadClosed()throws IOException {Gson gson=new Gson();JsonReader jsonReader=new JsonReader(new StringReader(CARS_JSON));jsonReader.close();try {gson.fromJson(jsonReader,new TypeToken<List<Car>>(){}.getType());fail();}catch(JsonParseException expected){}}"
"com.google.gson.MixedStreamTest.testWriteInvalidState",0,"public void testWriteInvalidState()throws IOException {Gson gson=new Gson();JsonWriter jsonWriter=new JsonWriter(new StringWriter());jsonWriter.beginObject();try {gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);fail();}catch(IllegalStateException expected){}}"
"com.google.gson.MixedStreamTest.testWriteClosed",0,"public void testWriteClosed()throws IOException {Gson gson=new Gson();JsonWriter jsonWriter=new JsonWriter(new StringWriter());jsonWriter.beginArray();jsonWriter.endArray();jsonWriter.close();try {gson.toJson(BLUE_MUSTANG,Car.class,jsonWriter);fail();}catch(IllegalStateException expected){}}"
"com.google.gson.MixedStreamTest.testWriteNulls",0,"public void testWriteNulls(){Gson gson=new Gson();try {gson.toJson(new JsonPrimitive(""hello""),(JsonWriter)null);fail();}catch(NullPointerException expected){}StringWriter stringWriter=new StringWriter();gson.toJson(null,new JsonWriter(stringWriter));assertEquals(""null"",stringWriter.toString());}"
"com.google.gson.MixedStreamTest.testReadNulls",0,"public void testReadNulls(){Gson gson=new Gson();try {gson.fromJson((JsonReader)null,Integer.class);fail();}catch(NullPointerException expected){}try {gson.fromJson(new JsonReader(new StringReader(""true"")),null);fail();}catch(NullPointerException expected){}}"
"com.google.gson.MixedStreamTest.testWriteHtmlSafe",0,"public void testWriteHtmlSafe(){List<String> contents=Arrays.asList(""<"","">"",""&"",""="",""'"");Type type=new TypeToken<List<String>>(){}.getType();StringWriter writer=new StringWriter();new Gson().toJson(contents,type,new JsonWriter(writer));assertEquals(""[\""\\u003c\"",\""\\u003e\"",\""\\u0026\"",\""\\u003d\"",\""\\u0027\""]"",writer.toString());writer=new StringWriter();new GsonBuilder().disableHtmlEscaping().create().toJson(contents,type,new JsonWriter(writer));assertEquals(""[\""<\"",\"">\"",\""&\"",\""=\"",\""'\""]"",writer.toString());}"
"com.google.gson.MixedStreamTest.testWriteLenient",0,"public void testWriteLenient(){List<Double> doubles=Arrays.asList(Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,-0.0d,0.5d,0.0d);Type type=new TypeToken<List<Double>>(){}.getType();StringWriter writer=new StringWriter();JsonWriter jsonWriter=new JsonWriter(writer);new GsonBuilder().serializeSpecialFloatingPointValues().create().toJson(doubles,type,jsonWriter);assertEquals(""[NaN,-Infinity,Infinity,-0.0,0.5,0.0]"",writer.toString());try {new Gson().toJson(doubles,type,new JsonWriter(new StringWriter()));fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersSerialization",0,"public void testTopLevelCollectionOfIntegersSerialization(){Collection<Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);Type targetType=new TypeToken<Collection<Integer>>(){}.getType();String json=gson.toJson(target,targetType);assertEquals(""[1,2,3,4,5,6,7,8,9]"",json);}"
"com.google.gson.functional.CollectionTest.testTopLevelCollectionOfIntegersDeserialization",0,"public void testTopLevelCollectionOfIntegersDeserialization(){String json=""[0,1,2,3,4,5,6,7,8,9]"";Type collectionType=new TypeToken<Collection<Integer>>(){}.getType();Collection<Integer> target=gson.fromJson(json,collectionType);int[]expected={0,1,2,3,4,5,6,7,8,9};MoreAsserts.assertEquals(expected,toIntArray(target));}"
"com.google.gson.functional.CollectionTest.testTopLevelListOfIntegerCollectionsDeserialization",0,"public void testTopLevelListOfIntegerCollectionsDeserialization()throws Exception {String json=""[[1,2,3],[4,5,6],[7,8,9]]"";Type collectionType=new TypeToken<Collection<Collection<Integer>>>(){}.getType();List<Collection<Integer>> target=gson.fromJson(json,collectionType);int[][]expected=new int[3][3];for (int i=0;i < 3;++i){int start=(3 * i)+ 1;for (int j=0;j < 3;++j){expected[i][j]=start + j;}}for (int i=0;i < 3;i++){MoreAsserts.assertEquals(expected[i],toIntArray(target.get(i)));}}"
"com.google.gson.functional.CollectionTest.testLinkedListSerialization",0,"public void testLinkedListSerialization(){List<String> list=new LinkedList<String>();list.add(""a1"");list.add(""a2"");Type linkedListType=new TypeToken<LinkedList<String>>(){}.getType();String json=gson.toJson(list,linkedListType);assertTrue(json.contains(""a1""));assertTrue(json.contains(""a2""));}"
"com.google.gson.functional.CollectionTest.testLinkedListDeserialization",0,"public void testLinkedListDeserialization(){String json=""['a1','a2']"";Type linkedListType=new TypeToken<LinkedList<String>>(){}.getType();List<String> list=gson.fromJson(json,linkedListType);assertEquals(""a1"",list.get(0));assertEquals(""a2"",list.get(1));}"
"com.google.gson.functional.CollectionTest.testQueueSerialization",0,"public void testQueueSerialization(){Queue<String> queue=new LinkedList<String>();queue.add(""a1"");queue.add(""a2"");Type queueType=new TypeToken<Queue<String>>(){}.getType();String json=gson.toJson(queue,queueType);assertTrue(json.contains(""a1""));assertTrue(json.contains(""a2""));}"
"com.google.gson.functional.CollectionTest.testQueueDeserialization",0,"public void testQueueDeserialization(){String json=""['a1','a2']"";Type queueType=new TypeToken<Queue<String>>(){}.getType();Queue<String> queue=gson.fromJson(json,queueType);assertEquals(""a1"",queue.element());queue.remove();assertEquals(""a2"",queue.element());}"
"com.google.gson.functional.CollectionTest.testPriorityQueue",0,"public void testPriorityQueue()throws Exception {Type type=new TypeToken<PriorityQueue<Integer>>(){}.getType();PriorityQueue<Integer> queue=gson.fromJson(""[10,20,22]"",type);assertEquals(3,queue.size());String json=gson.toJson(queue);assertEquals(10,queue.remove().intValue());assertEquals(20,queue.remove().intValue());assertEquals(22,queue.remove().intValue());assertEquals(""[10,20,22]"",json);}"
"com.google.gson.functional.CollectionTest.testVector",0,"public void testVector(){Type type=new TypeToken<Vector<Integer>>(){}.getType();Vector<Integer> target=gson.fromJson(""[10,20,31]"",type);assertEquals(3,target.size());assertEquals(10,target.get(0).intValue());assertEquals(20,target.get(1).intValue());assertEquals(31,target.get(2).intValue());String json=gson.toJson(target);assertEquals(""[10,20,31]"",json);}"
"com.google.gson.functional.CollectionTest.testStack",0,"public void testStack(){Type type=new TypeToken<Stack<Integer>>(){}.getType();Stack<Integer> target=gson.fromJson(""[11,13,17]"",type);assertEquals(3,target.size());String json=gson.toJson(target);assertEquals(17,target.pop().intValue());assertEquals(13,target.pop().intValue());assertEquals(11,target.pop().intValue());assertEquals(""[11,13,17]"",json);}"
"com.google.gson.functional.CollectionTest.testNullsInListSerialization",0,"public void testNullsInListSerialization(){List<String> list=new ArrayList<String>();list.add(""foo"");list.add(null);list.add(""bar"");String expected=""[\""foo\"",null,\""bar\""]"";Type typeOfList=new TypeToken<List<String>>(){}.getType();String json=gson.toJson(list,typeOfList);assertEquals(expected,json);}"
"com.google.gson.functional.CollectionTest.testNullsInListDeserialization",0,"public void testNullsInListDeserialization(){List<String> expected=new ArrayList<String>();expected.add(""foo"");expected.add(null);expected.add(""bar"");String json=""[\""foo\"",null,\""bar\""]"";Type expectedType=new TypeToken<List<String>>(){}.getType();List<String> target=gson.fromJson(json,expectedType);for (int i=0;i < expected.size();++i){assertEquals(expected.get(i),target.get(i));}}"
"com.google.gson.functional.CollectionTest.testCollectionOfObjectSerialization",0,"public void testCollectionOfObjectSerialization(){List<Object> target=new ArrayList<Object>();target.add(""Hello"");target.add(""World"");assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target));Type type=new TypeToken<List<Object>>(){}.getType();assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target,type));}"
"com.google.gson.functional.CollectionTest.testCollectionOfObjectWithNullSerialization",0,"public void testCollectionOfObjectWithNullSerialization(){List<Object> target=new ArrayList<Object>();target.add(""Hello"");target.add(null);target.add(""World"");assertEquals(""[\""Hello\"",null,\""World\""]"",gson.toJson(target));Type type=new TypeToken<List<Object>>(){}.getType();assertEquals(""[\""Hello\"",null,\""World\""]"",gson.toJson(target,type));}"
"com.google.gson.functional.CollectionTest.testCollectionOfStringsSerialization",0,"public void testCollectionOfStringsSerialization(){List<String> target=new ArrayList<String>();target.add(""Hello"");target.add(""World"");assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target));}"
"com.google.gson.functional.CollectionTest.testCollectionOfBagOfPrimitivesSerialization",0,"public void testCollectionOfBagOfPrimitivesSerialization(){List<BagOfPrimitives> target=new ArrayList<BagOfPrimitives>();BagOfPrimitives objA=new BagOfPrimitives(3L,1,true,""blah"");BagOfPrimitives objB=new BagOfPrimitives(2L,6,false,""blahB"");target.add(objA);target.add(objB);String result=gson.toJson(target);assertTrue(result.startsWith(""[""));assertTrue(result.endsWith(""]""));for(BagOfPrimitives obj : target){assertTrue(result.contains(obj.getExpectedJson()));}}"
"com.google.gson.functional.CollectionTest.testCollectionOfStringsDeserialization",0,"public void testCollectionOfStringsDeserialization(){String json=""[\""Hello\"",\""World\""]"";Type collectionType=new TypeToken<Collection<String>>(){}.getType();Collection<String> target=gson.fromJson(json,collectionType);assertTrue(target.contains(""Hello""));assertTrue(target.contains(""World""));}"
"com.google.gson.functional.CollectionTest.testRawCollectionOfIntegersSerialization",0,"public void testRawCollectionOfIntegersSerialization(){Collection<Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);assertEquals(""[1,2,3,4,5,6,7,8,9]"",gson.toJson(target));}"
"com.google.gson.functional.CollectionTest.testRawCollectionSerialization",0,"@SuppressWarnings(""rawtypes"")public void testRawCollectionSerialization(){BagOfPrimitives bag1=new BagOfPrimitives();Collection target=Arrays.asList(bag1,bag1);String json=gson.toJson(target);assertTrue(json.contains(bag1.getExpectedJson()));}"
"com.google.gson.functional.CollectionTest.testRawCollectionDeserializationNotAlllowed",0,"@SuppressWarnings(""rawtypes"")public void testRawCollectionDeserializationNotAlllowed(){String json=""[0,1,2,3,4,5,6,7,8,9]"";Collection integers=gson.fromJson(json,Collection.class);assertEquals(Arrays.asList(0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0),integers);json=""[\""Hello\"",\""World\""]"";Collection strings=gson.fromJson(json,Collection.class);assertTrue(strings.contains(""Hello""));assertTrue(strings.contains(""World""));}"
"com.google.gson.functional.CollectionTest.testRawCollectionOfBagOfPrimitivesNotAllowed",0,"@SuppressWarnings({""rawtypes"",""unchecked""})public void testRawCollectionOfBagOfPrimitivesNotAllowed(){BagOfPrimitives bag=new BagOfPrimitives(10,20,false,""stringValue"");String json='[' + bag.getExpectedJson()+ ','+ bag.getExpectedJson()+ ']';Collection target=gson.fromJson(json,Collection.class);assertEquals(2,target.size());for(Object bag1 : target){Map<String,Object> values=(Map<String,Object>)bag1;assertTrue(values.containsValue(10.0));assertTrue(values.containsValue(20.0));assertTrue(values.containsValue(""stringValue""));}}"
"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionSerilaization",0,"public void testWildcardPrimitiveCollectionSerilaization()throws Exception {Collection<? extends Integer> target=Arrays.asList(1,2,3,4,5,6,7,8,9);Type collectionType=new TypeToken<Collection<? extends Integer>>(){}.getType();String json=gson.toJson(target,collectionType);assertEquals(""[1,2,3,4,5,6,7,8,9]"",json);json=gson.toJson(target);assertEquals(""[1,2,3,4,5,6,7,8,9]"",json);}"
"com.google.gson.functional.CollectionTest.testWildcardPrimitiveCollectionDeserilaization",0,"public void testWildcardPrimitiveCollectionDeserilaization()throws Exception {String json=""[1,2,3,4,5,6,7,8,9]"";Type collectionType=new TypeToken<Collection<? extends Integer>>(){}.getType();Collection<? extends Integer> target=gson.fromJson(json,collectionType);assertEquals(9,target.size());assertTrue(target.contains(1));assertTrue(target.contains(9));}"
"com.google.gson.functional.CollectionTest.testWildcardCollectionField",0,"public void testWildcardCollectionField()throws Exception {Collection<BagOfPrimitives> collection=new ArrayList<BagOfPrimitives>();BagOfPrimitives objA=new BagOfPrimitives(3L,1,true,""blah"");BagOfPrimitives objB=new BagOfPrimitives(2L,6,false,""blahB"");collection.add(objA);collection.add(objB);ObjectWithWildcardCollection target=new ObjectWithWildcardCollection(collection);String json=gson.toJson(target);assertTrue(json.contains(objA.getExpectedJson()));assertTrue(json.contains(objB.getExpectedJson()));target=gson.fromJson(json,ObjectWithWildcardCollection.class);Collection<? extends BagOfPrimitives> deserializedCollection=target.getCollection();assertEquals(2,deserializedCollection.size());assertTrue(deserializedCollection.contains(objA));assertTrue(deserializedCollection.contains(objB));}"
"com.google.gson.functional.CollectionTest.testFieldIsArrayList",0,"public void testFieldIsArrayList(){HasArrayListField object=new HasArrayListField();object.longs.add(1L);object.longs.add(3L);String json=gson.toJson(object,HasArrayListField.class);assertEquals(""{\""longs\"":[1,3]}"",json);HasArrayListField copy=gson.fromJson(""{\""longs\"":[1,3]}"",HasArrayListField.class);assertEquals(Arrays.asList(1L,3L),copy.longs);}"
"com.google.gson.functional.CollectionTest.testUserCollectionTypeAdapter",0,"public void testUserCollectionTypeAdapter(){Type listOfString=new TypeToken<List<String>>(){}.getType();Object stringListSerializer=new JsonSerializer<List<String>>(){public JsonElement serialize(List<String> src,Type typeOfSrc,JsonSerializationContext context){return new JsonPrimitive(src.get(0)+ "";"" + src.get(1));}};Gson gson=new GsonBuilder().registerTypeAdapter(listOfString,stringListSerializer).create();assertEquals(""\""ab;cd\"""",gson.toJson(Arrays.asList(""ab"",""cd""),listOfString));}"
"com.google.gson.functional.CollectionTest.testSetSerialization",0,"public void testSetSerialization(){Set<Entry> set=new HashSet<Entry>();set.add(new Entry(1));set.add(new Entry(2));String json=gson.toJson(set);assertTrue(json.contains(""1""));assertTrue(json.contains(""2""));}"
"com.google.gson.functional.CollectionTest.testSetDeserialization",0,"public void testSetDeserialization(){String json=""[{value:1},{value:2}]"";Type type=new TypeToken<Set<Entry>>(){}.getType();Set<Entry> set=gson.fromJson(json,type);assertEquals(2,set.size());for(Entry entry : set){assertTrue(entry.value == 1 || entry.value == 2);}}"
"com.google.gson.internal.LinkedTreeMapTest.testIterationOrder",0,"public void testIterationOrder(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();map.put(""a"",""android"");map.put(""c"",""cola"");map.put(""b"",""bbq"");assertIterationOrder(map.keySet(),""a"",""c"",""b"");assertIterationOrder(map.values(),""android"",""cola"",""bbq"");}"
"com.google.gson.internal.LinkedTreeMapTest.testRemoveRootDoesNotDoubleUnlink",0,"public void testRemoveRootDoesNotDoubleUnlink(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();map.put(""a"",""android"");map.put(""c"",""cola"");map.put(""b"",""bbq"");Iterator<Map.Entry<String,String>> it=map.entrySet().iterator();it.next();it.next();it.next();it.remove();assertIterationOrder(map.keySet(),""a"",""c"");}"
"com.google.gson.internal.LinkedTreeMapTest.testPutNullKeyFails",0,"public void testPutNullKeyFails(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();try {map.put(null,""android"");fail();}catch(NullPointerException expected){}}"
"com.google.gson.internal.LinkedTreeMapTest.testPutNonComparableKeyFails",0,"public void testPutNonComparableKeyFails(){LinkedTreeMap<Object,String> map=new LinkedTreeMap<Object,String>();try {map.put(new Object(),""android"");fail();}catch(ClassCastException expected){}}"
"com.google.gson.internal.LinkedTreeMapTest.testContainsNonComparableKeyReturnsFalse",0,"public void testContainsNonComparableKeyReturnsFalse(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();map.put(""a"",""android"");assertFalse(map.containsKey(new Object()));}"
"com.google.gson.internal.LinkedTreeMapTest.testContainsNullKeyIsAlwaysFalse",0,"public void testContainsNullKeyIsAlwaysFalse(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();map.put(""a"",""android"");assertFalse(map.containsKey(null));}"
"com.google.gson.internal.LinkedTreeMapTest.testPutOverrides",0,"public void testPutOverrides()throws Exception {LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();assertNull(map.put(""d"",""donut""));assertNull(map.put(""e"",""eclair""));assertNull(map.put(""f"",""froyo""));assertEquals(3,map.size());assertEquals(""donut"",map.get(""d""));assertEquals(""donut"",map.put(""d"",""done""));assertEquals(3,map.size());}"
"com.google.gson.internal.LinkedTreeMapTest.testEmptyStringValues",0,"public void testEmptyStringValues(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();map.put(""a"","""");assertTrue(map.containsKey(""a""));assertEquals("""",map.get(""a""));}"
"com.google.gson.internal.LinkedTreeMapTest.testLargeSetOfRandomKeys",0,"public void testLargeSetOfRandomKeys()throws Exception {Random random=new Random(1367593214724L);LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();String[]keys=new String[1000];for (int i=0;i < keys.length;i++){keys[i]=Integer.toString(Math.abs(random.nextInt()),36)+ ""-"" + i;map.put(keys[i],"""" + i);}for (int i=0;i < keys.length;i++){String key=keys[i];assertTrue(map.containsKey(key));assertEquals("""" + i,map.get(key));}}"
"com.google.gson.internal.LinkedTreeMapTest.testClear",0,"public void testClear(){LinkedTreeMap<String,String> map=new LinkedTreeMap<String,String>();map.put(""a"",""android"");map.put(""c"",""cola"");map.put(""b"",""bbq"");map.clear();assertIterationOrder(map.keySet());assertEquals(0,map.size());}"
"com.google.gson.internal.LinkedTreeMapTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode()throws Exception {LinkedTreeMap<String,Integer> map1=new LinkedTreeMap<String,Integer>();map1.put(""A"",1);map1.put(""B"",2);map1.put(""C"",3);map1.put(""D"",4);LinkedTreeMap<String,Integer> map2=new LinkedTreeMap<String,Integer>();map2.put(""C"",3);map2.put(""B"",2);map2.put(""D"",4);map2.put(""A"",1);MoreAsserts.assertEqualsAndHashCode(map1,map2);}"
"com.google.gson.functional.FieldExclusionTest.testDefaultInnerClassExclusion",0,"public void testDefaultInnerClassExclusion()throws Exception {Gson gson=new Gson();Outer.Inner target=outer.new Inner(VALUE);String result=gson.toJson(target);assertEquals(target.toJson(),result);gson=new GsonBuilder().create();target=outer.new Inner(VALUE);result=gson.toJson(target);assertEquals(target.toJson(),result);}"
"com.google.gson.functional.FieldExclusionTest.testInnerClassExclusion",0,"public void testInnerClassExclusion()throws Exception {Gson gson=new GsonBuilder().disableInnerClassSerialization().create();Outer.Inner target=outer.new Inner(VALUE);String result=gson.toJson(target);assertEquals(""null"",result);}"
"com.google.gson.functional.FieldExclusionTest.testDefaultNestedStaticClassIncluded",0,"public void testDefaultNestedStaticClassIncluded()throws Exception {Gson gson=new Gson();Outer.Inner target=outer.new Inner(VALUE);String result=gson.toJson(target);assertEquals(target.toJson(),result);gson=new GsonBuilder().create();target=outer.new Inner(VALUE);result=gson.toJson(target);assertEquals(target.toJson(),result);}"
"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsSerialization",0,"public void testTopLevelArrayOfIntsSerialization(){int[]target={1,2,3,4,5,6,7,8,9};assertEquals(""[1,2,3,4,5,6,7,8,9]"",gson.toJson(target));}"
"com.google.gson.functional.ArrayTest.testTopLevelArrayOfIntsDeserialization",0,"public void testTopLevelArrayOfIntsDeserialization(){int[]expected={1,2,3,4,5,6,7,8,9};int[]actual=gson.fromJson(""[1,2,3,4,5,6,7,8,9]"",int[].class);MoreAsserts.assertEquals(expected,actual);}"
"com.google.gson.functional.ArrayTest.testInvalidArrayDeserialization",0,"public void testInvalidArrayDeserialization(){String json=""[1,2 3,4,5]"";try {gson.fromJson(json,int[].class);fail(""Gson should not deserialize array elements with missing ,"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.ArrayTest.testEmptyArraySerialization",0,"public void testEmptyArraySerialization(){int[]target={};assertEquals(""[]"",gson.toJson(target));}"
"com.google.gson.functional.ArrayTest.testEmptyArrayDeserialization",0,"public void testEmptyArrayDeserialization(){int[]actualObject=gson.fromJson(""[]"",int[].class);assertTrue(actualObject.length == 0);Integer[]actualObject2=gson.fromJson(""[]"",Integer[].class);assertTrue(actualObject2.length == 0);actualObject=gson.fromJson(""[]"",int[].class);assertTrue(actualObject.length == 0);}"
"com.google.gson.functional.ArrayTest.testNullsInArraySerialization",0,"public void testNullsInArraySerialization(){String[]array={""foo"",null,""bar""};String expected=""[\""foo\"",null,\""bar\""]"";String json=gson.toJson(array);assertEquals(expected,json);}"
"com.google.gson.functional.ArrayTest.testNullsInArrayDeserialization",0,"public void testNullsInArrayDeserialization(){String json=""[\""foo\"",null,\""bar\""]"";String[]expected={""foo"",null,""bar""};String[]target=gson.fromJson(json,expected.getClass());for (int i=0;i < expected.length;++i){assertEquals(expected[i],target[i]);}}"
"com.google.gson.functional.ArrayTest.testSingleNullInArraySerialization",0,"public void testSingleNullInArraySerialization(){BagOfPrimitives[]array=new BagOfPrimitives[1];array[0]=null;String json=gson.toJson(array);assertEquals(""[null]"",json);}"
"com.google.gson.functional.ArrayTest.testSingleNullInArrayDeserialization",0,"public void testSingleNullInArrayDeserialization(){BagOfPrimitives[]array=gson.fromJson(""[null]"",BagOfPrimitives[].class);assertNull(array[0]);}"
"com.google.gson.functional.ArrayTest.testNullsInArrayWithSerializeNullPropertySetSerialization",0,"public void testNullsInArrayWithSerializeNullPropertySetSerialization(){gson=new GsonBuilder().serializeNulls().create();String[]array={""foo"",null,""bar""};String expected=""[\""foo\"",null,\""bar\""]"";String json=gson.toJson(array);assertEquals(expected,json);}"
"com.google.gson.functional.ArrayTest.testArrayOfStringsSerialization",0,"public void testArrayOfStringsSerialization(){String[]target={""Hello"",""World""};assertEquals(""[\""Hello\"",\""World\""]"",gson.toJson(target));}"
"com.google.gson.functional.ArrayTest.testArrayOfStringsDeserialization",0,"public void testArrayOfStringsDeserialization(){String json=""[\""Hello\"",\""World\""]"";String[]target=gson.fromJson(json,String[].class);assertEquals(""Hello"",target[0]);assertEquals(""World"",target[1]);}"
"com.google.gson.functional.ArrayTest.testSingleStringArraySerialization",0,"public void testSingleStringArraySerialization()throws Exception {String[]s={""hello""};String output=gson.toJson(s);assertEquals(""[\""hello\""]"",output);}"
"com.google.gson.functional.ArrayTest.testSingleStringArrayDeserialization",0,"public void testSingleStringArrayDeserialization()throws Exception {String json=""[\""hello\""]"";String[]arrayType=gson.fromJson(json,String[].class);assertEquals(1,arrayType.length);assertEquals(""hello"",arrayType[0]);}"
"com.google.gson.functional.ArrayTest.testArrayOfCollectionSerialization",0,"@SuppressWarnings(""unchecked"")public void testArrayOfCollectionSerialization()throws Exception {StringBuilder sb=new StringBuilder(""["");int arraySize=3;Type typeToSerialize=new TypeToken<Collection<Integer>[]>(){}.getType();Collection<Integer>[]arrayOfCollection=new ArrayList[arraySize];for (int i=0;i < arraySize;++i){int startValue=(3 * i)+ 1;sb.append('[').append(startValue).append(',').append(startValue + 1).append(']');ArrayList<Integer> tmpList=new ArrayList<Integer>();tmpList.add(startValue);tmpList.add(startValue + 1);arrayOfCollection[i]=tmpList;if (i < arraySize - 1){sb.append(',');}}sb.append(']');String json=gson.toJson(arrayOfCollection,typeToSerialize);assertEquals(sb.toString(),json);}"
"com.google.gson.functional.ArrayTest.testArrayOfCollectionDeserialization",0,"public void testArrayOfCollectionDeserialization()throws Exception {String json=""[[1,2],[3,4]]"";Type type=new TypeToken<Collection<Integer>[]>(){}.getType();Collection<Integer>[]target=gson.fromJson(json,type);assertEquals(2,target.length);MoreAsserts.assertEquals(new Integer[]{1,2},target[0].toArray(new Integer[0]));MoreAsserts.assertEquals(new Integer[]{3,4},target[1].toArray(new Integer[0]));}"
"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsSerialization",0,"public void testArrayOfPrimitivesAsObjectsSerialization()throws Exception {Object[]objs=new Object[]{1,""abc"",0.3f,5L};String json=gson.toJson(objs);assertTrue(json.contains(""abc""));assertTrue(json.contains(""0.3""));assertTrue(json.contains(""5""));}"
"com.google.gson.functional.ArrayTest.testArrayOfPrimitivesAsObjectsDeserialization",0,"public void testArrayOfPrimitivesAsObjectsDeserialization()throws Exception {String json=""[1,'abc',0.3,1.1,5]"";Object[]objs=gson.fromJson(json,Object[].class);assertEquals(1,((Number)objs[0]).intValue());assertEquals(""abc"",objs[1]);assertEquals(0.3,((Number)objs[2]).doubleValue());assertEquals(new BigDecimal(""1.1""),new BigDecimal(objs[3].toString()));assertEquals(5,((Number)objs[4]).shortValue());}"
"com.google.gson.functional.ArrayTest.testObjectArrayWithNonPrimitivesSerialization",0,"public void testObjectArrayWithNonPrimitivesSerialization()throws Exception {ClassWithObjects classWithObjects=new ClassWithObjects();BagOfPrimitives bagOfPrimitives=new BagOfPrimitives();String classWithObjectsJson=gson.toJson(classWithObjects);String bagOfPrimitivesJson=gson.toJson(bagOfPrimitives);Object[]objects=new Object[]{classWithObjects,bagOfPrimitives};String json=gson.toJson(objects);assertTrue(json.contains(classWithObjectsJson));assertTrue(json.contains(bagOfPrimitivesJson));}"
"com.google.gson.functional.ArrayTest.testArrayOfNullSerialization",0,"public void testArrayOfNullSerialization(){Object[]array=new Object[]{null};String json=gson.toJson(array);assertEquals(""[null]"",json);}"
"com.google.gson.functional.ArrayTest.testArrayOfNullDeserialization",0,"public void testArrayOfNullDeserialization(){String[]values=gson.fromJson(""[null]"",String[].class);assertNull(values[0]);}"
"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysSerialization",0,"/** * Regression tests for Issue 272*/public void testMultidimenstionalArraysSerialization(){String[][]items=new String[][]{{""3m Co"",""71.72"",""0.02"",""0.03"",""4/2 12:00am"",""Manufacturing""},{""Alcoa Inc"",""29.01"",""0.42"",""1.47"",""4/1 12:00am"",""Manufacturing""}};String json=gson.toJson(items);assertTrue(json.contains(""[[\""3m Co""));assertTrue(json.contains(""Manufacturing\""]]""));}"
"com.google.gson.functional.ArrayTest.testMultiDimenstionalObjectArraysSerialization",0,"public void testMultiDimenstionalObjectArraysSerialization(){Object[][]array=new Object[][]{new Object[]{1,2}};assertEquals(""[[1,2]]"",gson.toJson(array));}"
"com.google.gson.functional.ArrayTest.testMixingTypesInObjectArraySerialization",0,"/** * Regression test for Issue 205*/public void testMixingTypesInObjectArraySerialization(){Object[]array=new Object[]{1,2,new Object[]{""one"",""two"",3}};assertEquals(""[1,2,[\""one\"",\""two\"",3]]"",gson.toJson(array));}"
"com.google.gson.functional.ArrayTest.testMultidimenstionalArraysDeserialization",0,"/** * Regression tests for Issue 272*/public void testMultidimenstionalArraysDeserialization(){String json=""[['3m Co','71.72','0.02','0.03','4/2 12:00am','Manufacturing'],"" + ""['Alcoa Inc','29.01','0.42','1.47','4/1 12:00am','Manufacturing']]"";String[][]items=gson.fromJson(json,String[][].class);assertEquals(""3m Co"",items[0][0]);assertEquals(""Manufacturing"",items[1][5]);}"
"com.google.gson.functional.ArrayTest.testArrayElementsAreArrays",0,"/** * http://code.google.com/p/google-gson/issues/detail?id=342 */public void testArrayElementsAreArrays(){Object[]stringArrays={new String[]{""test1"",""test2""},new String[]{""test3"",""test4""}};assertEquals(""[[\""test1\"",\""test2\""],[\""test3\"",\""test4\""]]"",new Gson().toJson(stringArrays));}"
"com.google.gson.JsonStreamParserTest.testParseTwoStrings",0,"public void testParseTwoStrings(){String actualOne=parser.next().getAsString();assertEquals(""one"",actualOne);String actualTwo=parser.next().getAsString();assertEquals(""two"",actualTwo);}"
"com.google.gson.JsonStreamParserTest.testIterator",0,"public void testIterator(){assertTrue(parser.hasNext());assertEquals(""one"",parser.next().getAsString());assertTrue(parser.hasNext());assertEquals(""two"",parser.next().getAsString());assertFalse(parser.hasNext());}"
"com.google.gson.JsonStreamParserTest.testNoSideEffectForHasNext",0,"public void testNoSideEffectForHasNext()throws Exception {assertTrue(parser.hasNext());assertTrue(parser.hasNext());assertTrue(parser.hasNext());assertEquals(""one"",parser.next().getAsString());assertTrue(parser.hasNext());assertTrue(parser.hasNext());assertEquals(""two"",parser.next().getAsString());assertFalse(parser.hasNext());assertFalse(parser.hasNext());}"
"com.google.gson.JsonStreamParserTest.testCallingNextBeyondAvailableInput",0,"public void testCallingNextBeyondAvailableInput(){parser.next();parser.next();try {parser.next();fail(""Parser should not go beyond available input"");}catch(NoSuchElementException expected){}}"
"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnObject",0,"public void testDefaultConstructorNotCalledOnObject()throws Exception {DataHolder data=new DataHolder(DEFAULT_VALUE);String json=gson.toJson(data);DataHolder actual=gson.fromJson(json,DataHolder.class);assertEquals(DEFAULT_VALUE + SUFFIX,actual.getData());}"
"com.google.gson.functional.CustomDeserializerTest.testDefaultConstructorNotCalledOnField",0,"public void testDefaultConstructorNotCalledOnField()throws Exception {DataHolderWrapper dataWrapper=new DataHolderWrapper(new DataHolder(DEFAULT_VALUE));String json=gson.toJson(dataWrapper);DataHolderWrapper actual=gson.fromJson(json,DataHolderWrapper.class);assertEquals(DEFAULT_VALUE + SUFFIX,actual.getWrappedData().getData());}"
"com.google.gson.functional.CustomDeserializerTest.testJsonTypeFieldBasedDeserialization",0,"public void testJsonTypeFieldBasedDeserialization(){String json=""{field1:'abc',field2:'def',__type__:'SUB_TYPE1'}"";Gson gson=new GsonBuilder().registerTypeAdapter(MyBase.class,new JsonDeserializer<MyBase>(){@Override public MyBase deserialize(JsonElement json,Type pojoType,JsonDeserializationContext context)throws JsonParseException {String type=json.getAsJsonObject().get(MyBase.TYPE_ACCESS).getAsString();return context.deserialize(json,SubTypes.valueOf(type).getSubclass());}}).create();SubType1 target=(SubType1)gson.fromJson(json,MyBase.class);assertEquals(""abc"",target.field1);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForTopLevelObject",0,"public void testCustomDeserializerReturnsNullForTopLevelObject(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){@Override public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{baseName:'Base',subName:'SubRevised'}"";Base target=gson.fromJson(json,Base.class);assertNull(target);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNull",0,"public void testCustomDeserializerReturnsNull(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){@Override public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{base:{baseName:'Base',subName:'SubRevised'}}"";ClassWithBaseField target=gson.fromJson(json,ClassWithBaseField.class);assertNull(target.base);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElements",0,"public void testCustomDeserializerReturnsNullForArrayElements(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){@Override public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""[{baseName:'Base'},{baseName:'Base'}]"";Base[]target=gson.fromJson(json,Base[].class);assertNull(target[0]);assertNull(target[1]);}"
"com.google.gson.functional.CustomDeserializerTest.testCustomDeserializerReturnsNullForArrayElementsForArrayField",0,"public void testCustomDeserializerReturnsNullForArrayElementsForArrayField(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonDeserializer<Base>(){@Override public Base deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return null;}}).create();String json=""{bases:[{baseName:'Base'},{baseName:'Base'}]}"";ClassWithBaseArray target=gson.fromJson(json,ClassWithBaseArray.class);assertNull(target.bases[0]);assertNull(target.bases[1]);}"
"com.google.gson.functional.TypeVariableTest.testAdvancedTypeVariables",0,"public void testAdvancedTypeVariables()throws Exception {Gson gson=new Gson();Bar bar1=new Bar(""someString"",1,true);ArrayList<Integer> arrayList=new ArrayList<Integer>();arrayList.add(1);arrayList.add(2);arrayList.add(3);bar1.map.put(""key1"",arrayList);bar1.map.put(""key2"",new ArrayList<Integer>());String json=gson.toJson(bar1);Bar bar2=gson.fromJson(json,Bar.class);assertEquals(bar1,bar2);}"
"com.google.gson.functional.TypeVariableTest.testTypeVariablesViaTypeParameter",0,"public void testTypeVariablesViaTypeParameter()throws Exception {Gson gson=new Gson();Foo<String,Integer> original=new Foo<String,Integer>(""e"",5,false);original.map.put(""f"",Arrays.asList(6,7));Type type=new TypeToken<Foo<String,Integer>>(){}.getType();String json=gson.toJson(original,type);assertEquals(""{\""someSField\"":\""e\"",\""someTField\"":5,\""map\"":{\""f\"":[6,7]},\""redField\"":false}"",json);assertEquals(original,gson.<Foo<String,Integer>>fromJson(json,type));}"
"com.google.gson.functional.TypeVariableTest.testBasicTypeVariables",0,"public void testBasicTypeVariables()throws Exception {Gson gson=new Gson();Blue blue1=new Blue(true);String json=gson.toJson(blue1);Blue blue2=gson.fromJson(json,Blue.class);assertEquals(blue1,blue2);}"
"com.google.gson.functional.StringTest.testStringValueSerialization",0,"public void testStringValueSerialization()throws Exception {String value=""someRandomStringValue"";assertEquals('""' + value + '""',gson.toJson(value));}"
"com.google.gson.functional.StringTest.testStringValueDeserialization",0,"public void testStringValueDeserialization()throws Exception {String value=""someRandomStringValue"";String actual=gson.fromJson(""\"""" + value + ""\"""",String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testSingleQuoteInStringSerialization",0,"public void testSingleQuoteInStringSerialization()throws Exception {String valueWithQuotes=""beforeQuote'afterQuote"";String jsonRepresentation=gson.toJson(valueWithQuotes);assertEquals(valueWithQuotes,gson.fromJson(jsonRepresentation,String.class));}"
"com.google.gson.functional.StringTest.testEscapedCtrlNInStringSerialization",0,"public void testEscapedCtrlNInStringSerialization()throws Exception {String value=""a\nb"";String json=gson.toJson(value);assertEquals(""\""a\\nb\"""",json);}"
"com.google.gson.functional.StringTest.testEscapedCtrlNInStringDeserialization",0,"public void testEscapedCtrlNInStringDeserialization()throws Exception {String json=""'a\\nb'"";String actual=gson.fromJson(json,String.class);assertEquals(""a\nb"",actual);}"
"com.google.gson.functional.StringTest.testEscapedCtrlRInStringSerialization",0,"public void testEscapedCtrlRInStringSerialization()throws Exception {String value=""a\rb"";String json=gson.toJson(value);assertEquals(""\""a\\rb\"""",json);}"
"com.google.gson.functional.StringTest.testEscapedCtrlRInStringDeserialization",0,"public void testEscapedCtrlRInStringDeserialization()throws Exception {String json=""'a\\rb'"";String actual=gson.fromJson(json,String.class);assertEquals(""a\rb"",actual);}"
"com.google.gson.functional.StringTest.testEscapedBackslashInStringSerialization",0,"public void testEscapedBackslashInStringSerialization()throws Exception {String value=""a\\b"";String json=gson.toJson(value);assertEquals(""\""a\\\\b\"""",json);}"
"com.google.gson.functional.StringTest.testEscapedBackslashInStringDeserialization",0,"public void testEscapedBackslashInStringDeserialization()throws Exception {String actual=gson.fromJson(""'a\\\\b'"",String.class);assertEquals(""a\\b"",actual);}"
"com.google.gson.functional.StringTest.testSingleQuoteInStringDeserialization",0,"public void testSingleQuoteInStringDeserialization()throws Exception {String value=""beforeQuote'afterQuote"";String actual=gson.fromJson(""\"""" + value + ""\"""",String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testEscapingQuotesInStringSerialization",0,"public void testEscapingQuotesInStringSerialization()throws Exception {String valueWithQuotes=""beforeQuote\""afterQuote"";String jsonRepresentation=gson.toJson(valueWithQuotes);String target=gson.fromJson(jsonRepresentation,String.class);assertEquals(valueWithQuotes,target);}"
"com.google.gson.functional.StringTest.testEscapingQuotesInStringDeserialization",0,"public void testEscapingQuotesInStringDeserialization()throws Exception {String value=""beforeQuote\\\""afterQuote"";String actual=gson.fromJson(""\"""" + value + ""\"""",String.class);String expected=""beforeQuote\""afterQuote"";assertEquals(expected,actual);}"
"com.google.gson.functional.StringTest.testStringValueAsSingleElementArraySerialization",0,"public void testStringValueAsSingleElementArraySerialization()throws Exception {String[]target={""abc""};assertEquals(""[\""abc\""]"",gson.toJson(target));assertEquals(""[\""abc\""]"",gson.toJson(target,String[].class));}"
"com.google.gson.functional.StringTest.testStringWithEscapedSlashDeserialization",0,"public void testStringWithEscapedSlashDeserialization(){String value=""/"";String json=""'\\/'"";String actual=gson.fromJson(json,String.class);assertEquals(value,actual);}"
"com.google.gson.functional.StringTest.testAssignmentCharSerialization",0,"/** * Created in response to http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23*/public void testAssignmentCharSerialization(){String value=""abc="";String json=gson.toJson(value);assertEquals(""\""abc\\u003d\"""",json);}"
"com.google.gson.functional.StringTest.testAssignmentCharDeserialization",0,"/** * Created in response to http://groups.google.com/group/google-gson/browse_thread/thread/2431d4a3d0d6cb23*/public void testAssignmentCharDeserialization(){String json=""\""abc=\"""";String value=gson.fromJson(json,String.class);assertEquals(""abc="",value);json=""'abc\u003d'"";value=gson.fromJson(json,String.class);assertEquals(""abc="",value);}"
"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringSerialization",0,"public void testJavascriptKeywordsInStringSerialization(){String value=""null true false function"";String json=gson.toJson(value);assertEquals(""\"""" + value + ""\"""",json);}"
"com.google.gson.functional.StringTest.testJavascriptKeywordsInStringDeserialization",0,"public void testJavascriptKeywordsInStringDeserialization(){String json=""'null true false function'"";String value=gson.fromJson(json,String.class);assertEquals(json.substring(1,json.length()- 1),value);}"
"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerialization",0,"public void testDefaultLongSerialization()throws Exception {JsonElement element=LongSerializationPolicy.DEFAULT.serialize(1556L);assertTrue(element.isJsonPrimitive());JsonPrimitive jsonPrimitive=element.getAsJsonPrimitive();assertFalse(jsonPrimitive.isString());assertTrue(jsonPrimitive.isNumber());assertEquals(1556L,element.getAsLong());}"
"com.google.gson.LongSerializationPolicyTest.testDefaultLongSerializationIntegration",0,"public void testDefaultLongSerializationIntegration(){Gson gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.DEFAULT).create();assertEquals(""[1]"",gson.toJson(new long[]{1L},long[].class));assertEquals(""[1]"",gson.toJson(new Long[]{1L},Long[].class));}"
"com.google.gson.LongSerializationPolicyTest.testStringLongSerialization",0,"public void testStringLongSerialization()throws Exception {JsonElement element=LongSerializationPolicy.STRING.serialize(1556L);assertTrue(element.isJsonPrimitive());JsonPrimitive jsonPrimitive=element.getAsJsonPrimitive();assertFalse(jsonPrimitive.isNumber());assertTrue(jsonPrimitive.isString());assertEquals(""1556"",element.getAsString());}"
"com.google.gson.LongSerializationPolicyTest.testStringLongSerializationIntegration",0,"public void testStringLongSerializationIntegration(){Gson gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();assertEquals(""[\""1\""]"",gson.toJson(new long[]{1L},long[].class));assertEquals(""[\""1\""]"",gson.toJson(new Long[]{1L},Long[].class));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializers",0,"public void testCustomSerializers(){Gson gson=builder.registerTypeAdapter(ClassWithCustomTypeConverter.class,new JsonSerializer<ClassWithCustomTypeConverter>(){@Override public JsonElement serialize(ClassWithCustomTypeConverter src,Type typeOfSrc,JsonSerializationContext context){JsonObject json=new JsonObject();json.addProperty(""bag"",5);json.addProperty(""value"",25);return json;}}).create();ClassWithCustomTypeConverter target=new ClassWithCustomTypeConverter();assertEquals(""{\""bag\"":5,\""value\"":25}"",gson.toJson(target));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializers",0,"public void testCustomDeserializers(){Gson gson=new GsonBuilder().registerTypeAdapter(ClassWithCustomTypeConverter.class,new JsonDeserializer<ClassWithCustomTypeConverter>(){@Override public ClassWithCustomTypeConverter deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context){JsonObject jsonObject=json.getAsJsonObject();int value=jsonObject.get(""bag"").getAsInt();return new ClassWithCustomTypeConverter(new BagOfPrimitives(value,value,false,""""),value);}}).create();String json=""{\""bag\"":5,\""value\"":25}"";ClassWithCustomTypeConverter target=gson.fromJson(json,ClassWithCustomTypeConverter.class);assertEquals(5,target.getBag().getIntValue());}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedSerializers",0,"public void testCustomNestedSerializers(){Gson gson=new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class,new JsonSerializer<BagOfPrimitives>(){@Override public JsonElement serialize(BagOfPrimitives src,Type typeOfSrc,JsonSerializationContext context){return new JsonPrimitive(6);}}).create();ClassWithCustomTypeConverter target=new ClassWithCustomTypeConverter();assertEquals(""{\""bag\"":6,\""value\"":10}"",gson.toJson(target));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomNestedDeserializers",0,"public void testCustomNestedDeserializers(){Gson gson=new GsonBuilder().registerTypeAdapter(BagOfPrimitives.class,new JsonDeserializer<BagOfPrimitives>(){@Override public BagOfPrimitives deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {int value=json.getAsInt();return new BagOfPrimitives(value,value,false,"""");}}).create();String json=""{\""bag\"":7,\""value\"":25}"";ClassWithCustomTypeConverter target=gson.fromJson(json,ClassWithCustomTypeConverter.class);assertEquals(7,target.getBag().getIntValue());}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterDoesNotAppliesToSubClasses",0,"public void testCustomTypeAdapterDoesNotAppliesToSubClasses(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonSerializer<Base>(){@Override public JsonElement serialize(Base src,Type typeOfSrc,JsonSerializationContext context){JsonObject json=new JsonObject();json.addProperty(""value"",src.baseValue);return json;}}).create();Base b=new Base();String json=gson.toJson(b);assertTrue(json.contains(""value""));b=new Derived();json=gson.toJson(b);assertTrue(json.contains(""derivedValue""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass",0,"public void testCustomTypeAdapterAppliesToSubClassesSerializedAsBaseClass(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonSerializer<Base>(){@Override public JsonElement serialize(Base src,Type typeOfSrc,JsonSerializationContext context){JsonObject json=new JsonObject();json.addProperty(""value"",src.baseValue);return json;}}).create();Base b=new Base();String json=gson.toJson(b);assertTrue(json.contains(""value""));b=new Derived();json=gson.toJson(b,Base.class);assertTrue(json.contains(""value""));assertFalse(json.contains(""derivedValue""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomSerializerInvokedForPrimitives",0,"public void testCustomSerializerInvokedForPrimitives(){Gson gson=new GsonBuilder().registerTypeAdapter(boolean.class,new JsonSerializer<Boolean>(){@Override public JsonElement serialize(Boolean s,Type t,JsonSerializationContext c){return new JsonPrimitive(s ? 1 : 0);}}).create();assertEquals(""1"",gson.toJson(true,boolean.class));assertEquals(""true"",gson.toJson(true,Boolean.class));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomDeserializerInvokedForPrimitives",0,"@SuppressWarnings(""rawtypes"")public void testCustomDeserializerInvokedForPrimitives(){Gson gson=new GsonBuilder().registerTypeAdapter(boolean.class,new JsonDeserializer(){@Override public Object deserialize(JsonElement json,Type t,JsonDeserializationContext context){return json.getAsInt()!= 0;}}).create();assertEquals(Boolean.TRUE,gson.fromJson(""1"",boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""true"",Boolean.class));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArraySerializer",0,"public void testCustomByteArraySerializer(){Gson gson=new GsonBuilder().registerTypeAdapter(byte[].class,new JsonSerializer<byte[]>(){@Override public JsonElement serialize(byte[]src,Type typeOfSrc,JsonSerializationContext context){StringBuilder sb=new StringBuilder(src.length);for(byte b : src){sb.append(b);}return new JsonPrimitive(sb.toString());}}).create();byte[]data={0,1,2,3,4,5,6,7,8,9};String json=gson.toJson(data);assertEquals(""\""0123456789\"""",json);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomByteArrayDeserializerAndInstanceCreator",0,"public void testCustomByteArrayDeserializerAndInstanceCreator(){GsonBuilder gsonBuilder=new GsonBuilder().registerTypeAdapter(byte[].class,new JsonDeserializer<byte[]>(){@Override public byte[]deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {String str=json.getAsString();byte[]data=new byte[str.length()];for (int i=0;i < data.length;++i){data[i]=Byte.parseByte("""" + str.charAt(i));}return data;}});Gson gson=gsonBuilder.create();String json=""'0123456789'"";byte[]actual=gson.fromJson(json,byte[].class);byte[]expected={0,1,2,3,4,5,6,7,8,9};for (int i=0;i < actual.length;++i){assertEquals(expected[i],actual[i]);}}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerializationWithType",0,"public void testCustomAdapterInvokedForCollectionElementSerializationWithType(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type setType=new TypeToken<Set<StringHolder>>(){}.getType();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Set<StringHolder> setOfHolders=new HashSet<StringHolder>();setOfHolders.add(holder);String json=gson.toJson(setOfHolders,setType);assertTrue(json.contains(""Jacob:Tomaw""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementSerialization",0,"public void testCustomAdapterInvokedForCollectionElementSerialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Set<StringHolder> setOfHolders=new HashSet<StringHolder>();setOfHolders.add(holder);String json=gson.toJson(setOfHolders);assertTrue(json.contains(""Jacob:Tomaw""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForCollectionElementDeserialization",0,"public void testCustomAdapterInvokedForCollectionElementDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type setType=new TypeToken<Set<StringHolder>>(){}.getType();Set<StringHolder> setOfHolders=gson.fromJson(""['Jacob:Tomaw']"",setType);assertEquals(1,setOfHolders.size());StringHolder foo=setOfHolders.iterator().next();assertEquals(""Jacob"",foo.part1);assertEquals(""Tomaw"",foo.part2);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerializationWithType",0,"public void testCustomAdapterInvokedForMapElementSerializationWithType(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type mapType=new TypeToken<Map<String,StringHolder>>(){}.getType();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Map<String,StringHolder> mapOfHolders=new HashMap<String,StringHolder>();mapOfHolders.put(""foo"",holder);String json=gson.toJson(mapOfHolders,mapType);assertTrue(json.contains(""\""foo\"":\""Jacob:Tomaw\""""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementSerialization",0,"public void testCustomAdapterInvokedForMapElementSerialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();StringHolder holder=new StringHolder(""Jacob"",""Tomaw"");Map<String,StringHolder> mapOfHolders=new HashMap<String,StringHolder>();mapOfHolders.put(""foo"",holder);String json=gson.toJson(mapOfHolders);assertTrue(json.contains(""\""foo\"":\""Jacob:Tomaw\""""));}"
"com.google.gson.functional.CustomTypeAdaptersTest.testCustomAdapterInvokedForMapElementDeserialization",0,"public void testCustomAdapterInvokedForMapElementDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(StringHolder.class,new StringHolderTypeAdapter()).create();Type mapType=new TypeToken<Map<String,StringHolder>>(){}.getType();Map<String,StringHolder> mapOfFoo=gson.fromJson(""{'foo':'Jacob:Tomaw'}"",mapType);assertEquals(1,mapOfFoo.size());StringHolder foo=mapOfFoo.get(""foo"");assertEquals(""Jacob"",foo.part1);assertEquals(""Tomaw"",foo.part2);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomSerializerNotInvokedForNullValues",0,"public void testEnsureCustomSerializerNotInvokedForNullValues(){Gson gson=new GsonBuilder().registerTypeAdapter(DataHolder.class,new DataHolderSerializer()).create();DataHolderWrapper target=new DataHolderWrapper(new DataHolder(""abc""));String json=gson.toJson(target);assertEquals(""{\""wrappedData\"":{\""myData\"":\""abc\""}}"",json);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testEnsureCustomDeserializerNotInvokedForNullValues",0,"public void testEnsureCustomDeserializerNotInvokedForNullValues(){Gson gson=new GsonBuilder().registerTypeAdapter(DataHolder.class,new DataHolderDeserializer()).create();String json=""{wrappedData:null}"";DataHolderWrapper actual=gson.fromJson(json,DataHolderWrapper.class);assertNull(actual.wrappedData);}"
"com.google.gson.functional.CustomTypeAdaptersTest.testRegisterHierarchyAdapterForDate",0,"public void testRegisterHierarchyAdapterForDate(){Gson gson=new GsonBuilder().registerTypeHierarchyAdapter(Date.class,new DateTypeAdapter()).create();assertEquals(""0"",gson.toJson(new Date(0)));assertEquals(""0"",gson.toJson(new java.sql.Date(0)));assertEquals(new Date(0),gson.fromJson(""0"",Date.class));assertEquals(new java.sql.Date(0),gson.fromJson(""0"",java.sql.Date.class));}"
"com.google.gson.functional.TreeTypeAdaptersTest.testSerializeId",0,"public void testSerializeId(){String json=gson.toJson(course,TYPE_COURSE_HISTORY);assertTrue(json.contains(String.valueOf(COURSE_ID.getValue())));assertTrue(json.contains(String.valueOf(STUDENT1_ID.getValue())));assertTrue(json.contains(String.valueOf(STUDENT2_ID.getValue())));}"
"com.google.gson.functional.TreeTypeAdaptersTest.testDeserializeId",0,"public void testDeserializeId(){String json=""{courseId:1,students:[{id:1,name:'first'},{id:6,name:'second'}],"" + ""numAssignments:4,assignment:{}}"";Course<HistoryCourse> target=gson.fromJson(json,TYPE_COURSE_HISTORY);assertEquals(""1"",target.getStudents().get(0).id.getValue());assertEquals(""6"",target.getStudents().get(1).id.getValue());assertEquals(""1"",target.getId().getValue());}"
"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromRawTypes",0,"public void testIsAssignableFromRawTypes(){assertTrue(TypeToken.get(Object.class).isAssignableFrom(String.class));assertFalse(TypeToken.get(String.class).isAssignableFrom(Object.class));assertTrue(TypeToken.get(RandomAccess.class).isAssignableFrom(ArrayList.class));assertFalse(TypeToken.get(ArrayList.class).isAssignableFrom(RandomAccess.class));}"
"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithTypeParameters",0,"public void testIsAssignableFromWithTypeParameters()throws Exception {Type a=getClass().getDeclaredField(""listOfInteger"").getGenericType();Type b=getClass().getDeclaredField(""listOfNumber"").getGenericType();assertTrue(TypeToken.get(a).isAssignableFrom(a));assertTrue(TypeToken.get(b).isAssignableFrom(b));assertFalse(TypeToken.get(a).isAssignableFrom(b));assertFalse(TypeToken.get(b).isAssignableFrom(a));}"
"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithBasicWildcards",0,"public void testIsAssignableFromWithBasicWildcards()throws Exception {Type a=getClass().getDeclaredField(""listOfString"").getGenericType();Type b=getClass().getDeclaredField(""listOfUnknown"").getGenericType();assertTrue(TypeToken.get(a).isAssignableFrom(a));assertTrue(TypeToken.get(b).isAssignableFrom(b));assertFalse(TypeToken.get(a).isAssignableFrom(b));listOfUnknown=listOfString;}"
"com.google.gson.reflect.TypeTokenTest.testIsAssignableFromWithNestedWildcards",0,"public void testIsAssignableFromWithNestedWildcards()throws Exception {Type a=getClass().getDeclaredField(""listOfSetOfString"").getGenericType();Type b=getClass().getDeclaredField(""listOfSetOfUnknown"").getGenericType();assertTrue(TypeToken.get(a).isAssignableFrom(a));assertTrue(TypeToken.get(b).isAssignableFrom(b));assertFalse(TypeToken.get(a).isAssignableFrom(b));assertFalse(TypeToken.get(b).isAssignableFrom(a));}"
"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideWrapperBooleanAdapter",0,"public void testOverrideWrapperBooleanAdapter(){Gson gson=new GsonBuilder().registerTypeAdapter(Boolean.class,booleanAsIntAdapter).create();assertEquals(""true"",gson.toJson(true,boolean.class));assertEquals(""1"",gson.toJson(true,Boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""true"",boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""1"",Boolean.class));assertEquals(Boolean.FALSE,gson.fromJson(""0"",Boolean.class));}"
"com.google.gson.OverrideCoreTypeAdaptersTest.testOverridePrimitiveBooleanAdapter",0,"public void testOverridePrimitiveBooleanAdapter(){Gson gson=new GsonBuilder().registerTypeAdapter(boolean.class,booleanAsIntAdapter).create();assertEquals(""1"",gson.toJson(true,boolean.class));assertEquals(""true"",gson.toJson(true,Boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""1"",boolean.class));assertEquals(Boolean.TRUE,gson.fromJson(""true"",Boolean.class));assertEquals(""0"",gson.toJson(false,boolean.class));}"
"com.google.gson.OverrideCoreTypeAdaptersTest.testOverrideStringAdapter",0,"public void testOverrideStringAdapter(){Gson gson=new GsonBuilder().registerTypeAdapter(String.class,swapCaseStringAdapter).create();assertEquals(""\""HELLO\"""",gson.toJson(""Hello"",String.class));assertEquals(""hello"",gson.fromJson(""\""Hello\"""",String.class));}"
"com.google.gson.metrics.PerformanceTest.testDummy",0,"public void testDummy(){}"
"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFields",0,"public void testBaseClassSerializerInvokedForBaseClassFields(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).registerTypeAdapter(Sub.class,new SubSerializer()).create();ClassWithBaseField target=new ClassWithBaseField(new Base());JsonObject json=(JsonObject)gson.toJsonTree(target);JsonObject base=json.get(""base"").getAsJsonObject();assertEquals(BaseSerializer.NAME,base.get(Base.SERIALIZER_KEY).getAsString());}"
"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances",0,"public void testSubClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).registerTypeAdapter(Sub.class,new SubSerializer()).create();ClassWithBaseField target=new ClassWithBaseField(new Sub());JsonObject json=(JsonObject)gson.toJsonTree(target);JsonObject base=json.get(""base"").getAsJsonObject();assertEquals(SubSerializer.NAME,base.get(Base.SERIALIZER_KEY).getAsString());}"
"com.google.gson.functional.CustomSerializerTest.testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances",0,"public void testSubClassSerializerInvokedForBaseClassFieldsHoldingArrayOfSubClassInstances(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).registerTypeAdapter(Sub.class,new SubSerializer()).create();ClassWithBaseArrayField target=new ClassWithBaseArrayField(new Base[]{new Sub(),new Sub()});JsonObject json=(JsonObject)gson.toJsonTree(target);JsonArray array=json.get(""base"").getAsJsonArray();for(JsonElement element : array){JsonElement serializerKey=element.getAsJsonObject().get(Base.SERIALIZER_KEY);assertEquals(SubSerializer.NAME,serializerKey.getAsString());}}"
"com.google.gson.functional.CustomSerializerTest.testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances",0,"public void testBaseClassSerializerInvokedForBaseClassFieldsHoldingSubClassInstances(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseSerializer()).create();ClassWithBaseField target=new ClassWithBaseField(new Sub());JsonObject json=(JsonObject)gson.toJsonTree(target);JsonObject base=json.get(""base"").getAsJsonObject();assertEquals(BaseSerializer.NAME,base.get(Base.SERIALIZER_KEY).getAsString());}"
"com.google.gson.functional.CustomSerializerTest.testSerializerReturnsNull",0,"public void testSerializerReturnsNull(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new JsonSerializer<Base>(){public JsonElement serialize(Base src,Type typeOfSrc,JsonSerializationContext context){return null;}}).create();JsonElement json=gson.toJsonTree(new Base());assertTrue(json.isJsonNull());}"
"com.google.gson.functional.JavaUtilTest.testCurrency",0,"public void testCurrency()throws Exception {CurrencyHolder target=gson.fromJson(""{'value':'USD'}"",CurrencyHolder.class);assertEquals(""USD"",target.value.getCurrencyCode());String json=gson.toJson(target);assertEquals(""{\""value\"":\""USD\""}"",json);target=gson.fromJson(""{'value':null}"",CurrencyHolder.class);assertNull(target.value);assertEquals(""{}"",gson.toJson(target));}"
"com.google.gson.functional.JavaUtilTest.testProperties",0,"public void testProperties(){Properties props=gson.fromJson(""{'a':'v1','b':'v2'}"",Properties.class);assertEquals(""v1"",props.getProperty(""a""));assertEquals(""v2"",props.getProperty(""b""));String json=gson.toJson(props);assertTrue(json.contains(""\""a\"":\""v1\""""));assertTrue(json.contains(""\""b\"":\""v2\""""));}"
"com.google.gson.JsonNullTest.testEqualsAndHashcode",0,"@SuppressWarnings(""deprecation"")public void testEqualsAndHashcode(){MoreAsserts.assertEqualsAndHashCode(new JsonNull(),new JsonNull());MoreAsserts.assertEqualsAndHashCode(new JsonNull(),JsonNull.INSTANCE);MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE,JsonNull.INSTANCE);}"
"com.google.gson.JsonNullTest.testDeepCopy",0,"public void testDeepCopy(){@SuppressWarnings(""deprecation"")JsonNull a=new JsonNull();assertSame(JsonNull.INSTANCE,a.deepCopy());assertSame(JsonNull.INSTANCE,JsonNull.INSTANCE.deepCopy());}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicBoolean",0,"public void testAtomicBoolean()throws Exception {AtomicBoolean target=gson.fromJson(""true"",AtomicBoolean.class);assertTrue(target.get());String json=gson.toJson(target);assertEquals(""true"",json);}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicInteger",0,"public void testAtomicInteger()throws Exception {AtomicInteger target=gson.fromJson(""10"",AtomicInteger.class);assertEquals(10,target.get());String json=gson.toJson(target);assertEquals(""10"",json);}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLong",0,"public void testAtomicLong()throws Exception {AtomicLong target=gson.fromJson(""10"",AtomicLong.class);assertEquals(10,target.get());String json=gson.toJson(target);assertEquals(""10"",json);}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongWithStringSerializationPolicy",0,"public void testAtomicLongWithStringSerializationPolicy()throws Exception {Gson gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();AtomicLongHolder target=gson.fromJson(""{'value':'10'}"",AtomicLongHolder.class);assertEquals(10,target.value.get());String json=gson.toJson(target);assertEquals(""{\""value\"":\""10\""}"",json);}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicIntegerArray",0,"public void testAtomicIntegerArray()throws Exception {AtomicIntegerArray target=gson.fromJson(""[10,13,14]"",AtomicIntegerArray.class);assertEquals(3,target.length());assertEquals(10,target.get(0));assertEquals(13,target.get(1));assertEquals(14,target.get(2));String json=gson.toJson(target);assertEquals(""[10,13,14]"",json);}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongArray",0,"public void testAtomicLongArray()throws Exception {AtomicLongArray target=gson.fromJson(""[10,13,14]"",AtomicLongArray.class);assertEquals(3,target.length());assertEquals(10,target.get(0));assertEquals(13,target.get(1));assertEquals(14,target.get(2));String json=gson.toJson(target);assertEquals(""[10,13,14]"",json);}"
"com.google.gson.functional.JavaUtilConcurrentAtomicTest.testAtomicLongArrayWithStringSerializationPolicy",0,"public void testAtomicLongArrayWithStringSerializationPolicy()throws Exception {Gson gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();AtomicLongArray target=gson.fromJson(""['10','13','14']"",AtomicLongArray.class);assertEquals(3,target.length());assertEquals(10,target.get(0));assertEquals(13,target.get(1));assertEquals(14,target.get(2));String json=gson.toJson(target);assertEquals(""[\""10\"",\""13\"",\""14\""]"",json);}"
"com.google.gson.DefaultInetAddressTypeAdapterTest.testInetAddressSerializationAndDeserialization",0,"public void testInetAddressSerializationAndDeserialization()throws Exception {InetAddress address=InetAddress.getByName(""8.8.8.8"");String jsonAddress=gson.toJson(address);assertEquals(""\""8.8.8.8\"""",jsonAddress);InetAddress value=gson.fromJson(jsonAddress,InetAddress.class);assertEquals(value,address);}"
"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInEnUs",0,"public void testFormattingInEnUs(){assertFormattingAlwaysEmitsUsLocale(Locale.US);}"
"com.google.gson.DefaultDateTypeAdapterTest.testFormattingInFr",0,"public void testFormattingInFr(){assertFormattingAlwaysEmitsUsLocale(Locale.FRANCE);}"
"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithSystemLocale",0,"public void testParsingDatesFormattedWithSystemLocale(){TimeZone defaultTimeZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));Locale defaultLocale=Locale.getDefault();Locale.setDefault(Locale.FRANCE);try {assertParsed(""1 janv. 1970 00:00:00"",new DefaultDateTypeAdapter());assertParsed(""01/01/70"",new DefaultDateTypeAdapter(DateFormat.SHORT));assertParsed(""1 janv. 1970"",new DefaultDateTypeAdapter(DateFormat.MEDIUM));assertParsed(""1 janvier 1970"",new DefaultDateTypeAdapter(DateFormat.LONG));assertParsed(""01/01/70 00:00"",new DefaultDateTypeAdapter(DateFormat.SHORT,DateFormat.SHORT));assertParsed(""1 janv. 1970 00:00:00"",new DefaultDateTypeAdapter(DateFormat.MEDIUM,DateFormat.MEDIUM));assertParsed(""1 janvier 1970 00:00:00 UTC"",new DefaultDateTypeAdapter(DateFormat.LONG,DateFormat.LONG));assertParsed(""jeudi 1 janvier 1970 00 h 00 UTC"",new DefaultDateTypeAdapter(DateFormat.FULL,DateFormat.FULL));}finally {TimeZone.setDefault(defaultTimeZone);Locale.setDefault(defaultLocale);}}"
"com.google.gson.DefaultDateTypeAdapterTest.testParsingDatesFormattedWithUsLocale",0,"public void testParsingDatesFormattedWithUsLocale(){TimeZone defaultTimeZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));Locale defaultLocale=Locale.getDefault();Locale.setDefault(Locale.US);try {assertParsed(""Jan 1,1970 0:00:00 AM"",new DefaultDateTypeAdapter());assertParsed(""1/1/70"",new DefaultDateTypeAdapter(DateFormat.SHORT));assertParsed(""Jan 1,1970"",new DefaultDateTypeAdapter(DateFormat.MEDIUM));assertParsed(""January 1,1970"",new DefaultDateTypeAdapter(DateFormat.LONG));assertParsed(""1/1/70 0:00 AM"",new DefaultDateTypeAdapter(DateFormat.SHORT,DateFormat.SHORT));assertParsed(""Jan 1,1970 0:00:00 AM"",new DefaultDateTypeAdapter(DateFormat.MEDIUM,DateFormat.MEDIUM));assertParsed(""January 1,1970 0:00:00 AM UTC"",new DefaultDateTypeAdapter(DateFormat.LONG,DateFormat.LONG));assertParsed(""Thursday,January 1,1970 0:00:00 AM UTC"",new DefaultDateTypeAdapter(DateFormat.FULL,DateFormat.FULL));}finally {TimeZone.setDefault(defaultTimeZone);Locale.setDefault(defaultLocale);}}"
"com.google.gson.DefaultDateTypeAdapterTest.testFormatUsesDefaultTimezone",0,"public void testFormatUsesDefaultTimezone(){TimeZone defaultTimeZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""America/Los_Angeles""));Locale defaultLocale=Locale.getDefault();Locale.setDefault(Locale.US);try {assertFormatted(""Dec 31,1969 4:00:00 PM"",new DefaultDateTypeAdapter());assertParsed(""Dec 31,1969 4:00:00 PM"",new DefaultDateTypeAdapter());}finally {TimeZone.setDefault(defaultTimeZone);Locale.setDefault(defaultLocale);}}"
"com.google.gson.DefaultDateTypeAdapterTest.testDateDeserializationISO8601",0,"public void testDateDeserializationISO8601()throws Exception {DefaultDateTypeAdapter adapter=new DefaultDateTypeAdapter();assertParsed(""1970-01-01T00:00:00.000Z"",adapter);assertParsed(""1970-01-01T00:00Z"",adapter);assertParsed(""1970-01-01T00:00:00+00:00"",adapter);assertParsed(""1970-01-01T01:00:00+01:00"",adapter);}"
"com.google.gson.DefaultDateTypeAdapterTest.testDateSerialization",0,"public void testDateSerialization()throws Exception {int dateStyle=DateFormat.LONG;DefaultDateTypeAdapter dateTypeAdapter=new DefaultDateTypeAdapter(dateStyle);DateFormat formatter=DateFormat.getDateInstance(dateStyle,Locale.US);Date currentDate=new Date();String dateString=dateTypeAdapter.serialize(currentDate,Date.class,null).getAsString();assertEquals(formatter.format(currentDate),dateString);}"
"com.google.gson.DefaultDateTypeAdapterTest.testDatePattern",0,"public void testDatePattern()throws Exception {String pattern=""yyyy-MM-dd"";DefaultDateTypeAdapter dateTypeAdapter=new DefaultDateTypeAdapter(pattern);DateFormat formatter=new SimpleDateFormat(pattern);Date currentDate=new Date();String dateString=dateTypeAdapter.serialize(currentDate,Date.class,null).getAsString();assertEquals(formatter.format(currentDate),dateString);}"
"com.google.gson.DefaultDateTypeAdapterTest.testInvalidDatePattern",0,"public void testInvalidDatePattern()throws Exception {try {new DefaultDateTypeAdapter(""I am a bad Date pattern...."");fail(""Invalid date pattern should fail."");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.JsonParserTest.testParseInvalidJson",0,"public void testParseInvalidJson(){try {gson.fromJson(""[[]"",Object[].class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.JsonParserTest.testDeserializingCustomTree",0,"public void testDeserializingCustomTree(){JsonObject obj=new JsonObject();obj.addProperty(""stringValue"",""foo"");obj.addProperty(""intValue"",11);BagOfPrimitives target=gson.fromJson(obj,BagOfPrimitives.class);assertEquals(11,target.intValue);assertEquals(""foo"",target.stringValue);}"
"com.google.gson.functional.JsonParserTest.testBadTypeForDeserializingCustomTree",0,"public void testBadTypeForDeserializingCustomTree(){JsonObject obj=new JsonObject();obj.addProperty(""stringValue"",""foo"");obj.addProperty(""intValue"",11);JsonArray array=new JsonArray();array.add(obj);try {gson.fromJson(array,BagOfPrimitives.class);fail(""BagOfPrimitives is not an array"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.JsonParserTest.testBadFieldTypeForCustomDeserializerCustomTree",0,"public void testBadFieldTypeForCustomDeserializerCustomTree(){JsonArray array=new JsonArray();array.add(new JsonPrimitive(""blah""));JsonObject obj=new JsonObject();obj.addProperty(""stringValue"",""foo"");obj.addProperty(""intValue"",11);obj.add(""longValue"",array);try {gson.fromJson(obj,BagOfPrimitives.class);fail(""BagOfPrimitives is not an array"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.JsonParserTest.testBadFieldTypeForDeserializingCustomTree",0,"public void testBadFieldTypeForDeserializingCustomTree(){JsonArray array=new JsonArray();array.add(new JsonPrimitive(""blah""));JsonObject primitive1=new JsonObject();primitive1.addProperty(""string"",""foo"");primitive1.addProperty(""intValue"",11);JsonObject obj=new JsonObject();obj.add(""primitive1"",primitive1);obj.add(""primitive2"",array);try {gson.fromJson(obj,Nested.class);fail(""Nested has field BagOfPrimitives which is not an array"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.JsonParserTest.testChangingCustomTreeAndDeserializing",0,"public void testChangingCustomTreeAndDeserializing(){StringReader json=new StringReader(""{'stringValue':'no message','intValue':10,'longValue':20}"");JsonObject obj=(JsonObject)new JsonParser().parse(json);obj.remove(""stringValue"");obj.addProperty(""stringValue"",""fooBar"");BagOfPrimitives target=gson.fromJson(obj,BagOfPrimitives.class);assertEquals(10,target.intValue);assertEquals(20,target.longValue);assertEquals(""fooBar"",target.stringValue);}"
"com.google.gson.functional.JsonParserTest.testExtraCommasInArrays",0,"public void testExtraCommasInArrays(){Type type=new TypeToken<List<String>>(){}.getType();assertEquals(list(""a"",null,""b"",null,null),gson.fromJson(""[a,,b,,]"",type));assertEquals(list(null,null),gson.fromJson(""[,]"",type));assertEquals(list(""a"",null),gson.fromJson(""[a,]"",type));}"
"com.google.gson.functional.JsonParserTest.testExtraCommasInMaps",0,"public void testExtraCommasInMaps(){Type type=new TypeToken<Map<String,String>>(){}.getType();try {gson.fromJson(""{a:b,}"",type);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.RuntimeTypeAdapterFactoryFunctionalTest.testSubclassesAutomaticallySerialzed",0,"/** * This test also ensures that  {@link TypeAdapterFactory}registered through {@link JsonAdapter}work correctly for  {@link Gson#getDelegateAdapter(TypeAdapterFactory,TypeToken)}.*/public void testSubclassesAutomaticallySerialzed()throws Exception {Shape shape=new Circle(25);String json=gson.toJson(shape);shape=gson.fromJson(json,Shape.class);assertEquals(25,((Circle)shape).radius);shape=new Square(15);json=gson.toJson(shape);shape=gson.fromJson(json,Shape.class);assertEquals(15,((Square)shape).side);assertEquals(ShapeType.SQUARE,shape.type);}"
"com.google.gson.internal.LinkedHashTreeMapTest.testIterationOrder",0,"public void testIterationOrder(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();map.put(""a"",""android"");map.put(""c"",""cola"");map.put(""b"",""bbq"");assertIterationOrder(map.keySet(),""a"",""c"",""b"");assertIterationOrder(map.values(),""android"",""cola"",""bbq"");}"
"com.google.gson.internal.LinkedHashTreeMapTest.testRemoveRootDoesNotDoubleUnlink",0,"public void testRemoveRootDoesNotDoubleUnlink(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();map.put(""a"",""android"");map.put(""c"",""cola"");map.put(""b"",""bbq"");Iterator<Map.Entry<String,String>> it=map.entrySet().iterator();it.next();it.next();it.next();it.remove();assertIterationOrder(map.keySet(),""a"",""c"");}"
"com.google.gson.internal.LinkedHashTreeMapTest.testPutNullKeyFails",0,"public void testPutNullKeyFails(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();try {map.put(null,""android"");fail();}catch(NullPointerException expected){}}"
"com.google.gson.internal.LinkedHashTreeMapTest.testPutNonComparableKeyFails",0,"public void testPutNonComparableKeyFails(){LinkedHashTreeMap<Object,String> map=new LinkedHashTreeMap<Object,String>();try {map.put(new Object(),""android"");fail();}catch(ClassCastException expected){}}"
"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNonComparableKeyReturnsFalse",0,"public void testContainsNonComparableKeyReturnsFalse(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();map.put(""a"",""android"");assertFalse(map.containsKey(new Object()));}"
"com.google.gson.internal.LinkedHashTreeMapTest.testContainsNullKeyIsAlwaysFalse",0,"public void testContainsNullKeyIsAlwaysFalse(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();map.put(""a"",""android"");assertFalse(map.containsKey(null));}"
"com.google.gson.internal.LinkedHashTreeMapTest.testPutOverrides",0,"public void testPutOverrides()throws Exception {LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();assertNull(map.put(""d"",""donut""));assertNull(map.put(""e"",""eclair""));assertNull(map.put(""f"",""froyo""));assertEquals(3,map.size());assertEquals(""donut"",map.get(""d""));assertEquals(""donut"",map.put(""d"",""done""));assertEquals(3,map.size());}"
"com.google.gson.internal.LinkedHashTreeMapTest.testEmptyStringValues",0,"public void testEmptyStringValues(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();map.put(""a"","""");assertTrue(map.containsKey(""a""));assertEquals("""",map.get(""a""));}"
"com.google.gson.internal.LinkedHashTreeMapTest.testForceDoublingAndRehash",0,"public void testForceDoublingAndRehash()throws Exception {Random random=new Random(1367593214724L);LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();String[]keys=new String[1000];for (int i=0;i < keys.length;i++){keys[i]=Integer.toString(Math.abs(random.nextInt()),36)+ ""-"" + i;map.put(keys[i],"""" + i);}for (int i=0;i < keys.length;i++){String key=keys[i];assertTrue(map.containsKey(key));assertEquals("""" + i,map.get(key));}}"
"com.google.gson.internal.LinkedHashTreeMapTest.testClear",0,"public void testClear(){LinkedHashTreeMap<String,String> map=new LinkedHashTreeMap<String,String>();map.put(""a"",""android"");map.put(""c"",""cola"");map.put(""b"",""bbq"");map.clear();assertIterationOrder(map.keySet());assertEquals(0,map.size());}"
"com.google.gson.internal.LinkedHashTreeMapTest.testEqualsAndHashCode",0,"public void testEqualsAndHashCode()throws Exception {LinkedHashTreeMap<String,Integer> map1=new LinkedHashTreeMap<String,Integer>();map1.put(""A"",1);map1.put(""B"",2);map1.put(""C"",3);map1.put(""D"",4);LinkedHashTreeMap<String,Integer> map2=new LinkedHashTreeMap<String,Integer>();map2.put(""C"",3);map2.put(""B"",2);map2.put(""D"",4);map2.put(""A"",1);MoreAsserts.assertEqualsAndHashCode(map1,map2);}"
"com.google.gson.internal.LinkedHashTreeMapTest.testAvlWalker",0,"public void testAvlWalker(){assertAvlWalker(node(node(""a""),""b"",node(""c"")),""a"",""b"",""c"");assertAvlWalker(node(node(node(""a""),""b"",node(""c"")),""d"",node(node(""e""),""f"",node(""g""))),""a"",""b"",""c"",""d"",""e"",""f"",""g"");assertAvlWalker(node(node(null,""a"",node(""b"")),""c"",node(node(""d""),""e"",null)),""a"",""b"",""c"",""d"",""e"");assertAvlWalker(node(null,""a"",node(null,""b"",node(null,""c"",node(""d"")))),""a"",""b"",""c"",""d"");assertAvlWalker(node(node(node(node(""a""),""b"",null),""c"",null),""d"",null),""a"",""b"",""c"",""d"");}"
"com.google.gson.internal.LinkedHashTreeMapTest.testAvlBuilder",0,"public void testAvlBuilder(){assertAvlBuilder(1,""a"");assertAvlBuilder(2,""(. a b)"");assertAvlBuilder(3,""(a b c)"");assertAvlBuilder(4,""(a b (. c d))"");assertAvlBuilder(5,""(a b (c d e))"");assertAvlBuilder(6,""((. a b)c (d e f))"");assertAvlBuilder(7,""((a b c)d (e f g))"");assertAvlBuilder(8,""((a b c)d (e f (. g h)))"");assertAvlBuilder(9,""((a b c)d (e f (g h i)))"");assertAvlBuilder(10,""((a b c)d ((. e f)g (h i j)))"");assertAvlBuilder(11,""((a b c)d ((e f g)h (i j k)))"");assertAvlBuilder(12,""((a b (. c d))e ((f g h)i (j k l)))"");assertAvlBuilder(13,""((a b (c d e))f ((g h i)j (k l m)))"");assertAvlBuilder(14,""(((. a b)c (d e f))g ((h i j)k (l m n)))"");assertAvlBuilder(15,""(((a b c)d (e f g))h ((i j k)l (m n o)))"");assertAvlBuilder(16,""(((a b c)d (e f g))h ((i j k)l (m n (. o p))))"");assertAvlBuilder(30,""((((. a b)c (d e f))g ((h i j)k (l m n)))o "" + ""(((p q r)s (t u v))w ((x y z)A (B C D))))"");assertAvlBuilder(31,""((((a b c)d (e f g))h ((i j k)l (m n o)))p "" + ""(((q r s)t (u v w))x ((y z A)B (C D E))))"");}"
"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacity",0,"public void testDoubleCapacity(){@SuppressWarnings(""unchecked"")Node<String,String>[]oldTable=new Node[1];oldTable[0]=node(node(node(""a""),""b"",node(""c"")),""d"",node(node(""e""),""f"",node(""g"")));Node<String,String>[]newTable=LinkedHashTreeMap.doubleCapacity(oldTable);assertTree(""(b d f)"",newTable[0]);assertTree(""(a c (. e g))"",newTable[1]);}"
"com.google.gson.internal.LinkedHashTreeMapTest.testDoubleCapacityAllNodesOnLeft",0,"public void testDoubleCapacityAllNodesOnLeft(){@SuppressWarnings(""unchecked"")Node<String,String>[]oldTable=new Node[1];oldTable[0]=node(node(""b""),""d"",node(""f""));Node<String,String>[]newTable=LinkedHashTreeMap.doubleCapacity(oldTable);assertTree(""(b d f)"",newTable[0]);assertNull(newTable[1]);for(Node<?,?> node : newTable){if (node != null){assertConsistent(node);}}}"
"com.google.gson.functional.SerializedNameTest.testFirstNameIsChosenForSerialization",0,"public void testFirstNameIsChosenForSerialization(){MyClass target=new MyClass(""v1"",""v2"");assertEquals(""{\""name\"":\""v1\"",\""name1\"":\""v2\""}"",gson.toJson(target));}"
"com.google.gson.functional.SerializedNameTest.testMultipleNamesDeserializedCorrectly",0,"public void testMultipleNamesDeserializedCorrectly(){assertEquals(""v1"",gson.fromJson(""{'name':'v1'}"",MyClass.class).a);assertEquals(""v11"",gson.fromJson(""{'name1':'v11'}"",MyClass.class).b);assertEquals(""v2"",gson.fromJson(""{'name2':'v2'}"",MyClass.class).b);assertEquals(""v3"",gson.fromJson(""{'name3':'v3'}"",MyClass.class).b);}"
"com.google.gson.functional.SerializedNameTest.testMultipleNamesInTheSameString",0,"public void testMultipleNamesInTheSameString(){assertEquals(""v3"",gson.fromJson(""{'name1':'v1','name2':'v2','name3':'v3'}"",MyClass.class).b);}"
"com.google.gson.JsonParserTest.testParseInvalidJson",0,"public void testParseInvalidJson(){try {parser.parse(""[[]"");fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.JsonParserTest.testParseUnquotedStringArrayFails",0,"public void testParseUnquotedStringArrayFails(){JsonElement element=parser.parse(""[a,b,c]"");assertEquals(""a"",element.getAsJsonArray().get(0).getAsString());assertEquals(""b"",element.getAsJsonArray().get(1).getAsString());assertEquals(""c"",element.getAsJsonArray().get(2).getAsString());assertEquals(3,element.getAsJsonArray().size());}"
"com.google.gson.JsonParserTest.testParseString",0,"public void testParseString(){String json=""{a:10,b:'c'}"";JsonElement e=parser.parse(json);assertTrue(e.isJsonObject());assertEquals(10,e.getAsJsonObject().get(""a"").getAsInt());assertEquals(""c"",e.getAsJsonObject().get(""b"").getAsString());}"
"com.google.gson.JsonParserTest.testParseEmptyString",0,"public void testParseEmptyString(){JsonElement e=parser.parse(""\""   \"""");assertTrue(e.isJsonPrimitive());assertEquals(""   "",e.getAsString());}"
"com.google.gson.JsonParserTest.testParseEmptyWhitespaceInput",0,"public void testParseEmptyWhitespaceInput(){JsonElement e=parser.parse(""     "");assertTrue(e.isJsonNull());}"
"com.google.gson.JsonParserTest.testParseUnquotedSingleWordStringFails",0,"public void testParseUnquotedSingleWordStringFails(){assertEquals(""Test"",parser.parse(""Test"").getAsString());}"
"com.google.gson.JsonParserTest.testParseUnquotedMultiWordStringFails",0,"public void testParseUnquotedMultiWordStringFails(){String unquotedSentence=""Test is a test..blah blah"";try {parser.parse(unquotedSentence);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.JsonParserTest.testParseMixedArray",0,"public void testParseMixedArray(){String json=""[{},13,\""stringValue\""]"";JsonElement e=parser.parse(json);assertTrue(e.isJsonArray());JsonArray array=e.getAsJsonArray();assertEquals(""{}"",array.get(0).toString());assertEquals(13,array.get(1).getAsInt());assertEquals(""stringValue"",array.get(2).getAsString());}"
"com.google.gson.JsonParserTest.testParseReader",0,"public void testParseReader(){StringReader reader=new StringReader(""{a:10,b:'c'}"");JsonElement e=parser.parse(reader);assertTrue(e.isJsonObject());assertEquals(10,e.getAsJsonObject().get(""a"").getAsInt());assertEquals(""c"",e.getAsJsonObject().get(""b"").getAsString());}"
"com.google.gson.JsonParserTest.testReadWriteTwoObjects",0,"public void testReadWriteTwoObjects()throws Exception {Gson gson=new Gson();CharArrayWriter writer=new CharArrayWriter();BagOfPrimitives expectedOne=new BagOfPrimitives(1,1,true,""one"");writer.write(gson.toJson(expectedOne).toCharArray());BagOfPrimitives expectedTwo=new BagOfPrimitives(2,2,false,""two"");writer.write(gson.toJson(expectedTwo).toCharArray());CharArrayReader reader=new CharArrayReader(writer.toCharArray());JsonReader parser=new JsonReader(reader);parser.setLenient(true);JsonElement element1=Streams.parse(parser);JsonElement element2=Streams.parse(parser);BagOfPrimitives actualOne=gson.fromJson(element1,BagOfPrimitives.class);assertEquals(""one"",actualOne.stringValue);BagOfPrimitives actualTwo=gson.fromJson(element2,BagOfPrimitives.class);assertEquals(""two"",actualTwo.stringValue);}"
"com.google.gson.functional.RawSerializationTest.testCollectionOfPrimitives",0,"public void testCollectionOfPrimitives(){Collection<Integer> ints=Arrays.asList(1,2,3,4,5);String json=gson.toJson(ints);assertEquals(""[1,2,3,4,5]"",json);}"
"com.google.gson.functional.RawSerializationTest.testCollectionOfObjects",0,"public void testCollectionOfObjects(){Collection<Foo> foos=Arrays.asList(new Foo(1),new Foo(2));String json=gson.toJson(foos);assertEquals(""[{\""b\"":1},{\""b\"":2}]"",json);}"
"com.google.gson.functional.RawSerializationTest.testParameterizedObject",0,"public void testParameterizedObject(){Bar<Foo> bar=new Bar<Foo>(new Foo(1));String expectedJson=""{\""t\"":{\""b\"":1}}"";String json=gson.toJson(bar);assertEquals(expectedJson,json);json=gson.toJson(bar,new TypeToken<Bar<Foo>>(){}.getType());assertEquals(expectedJson,json);}"
"com.google.gson.functional.RawSerializationTest.testTwoLevelParameterizedObject",0,"public void testTwoLevelParameterizedObject(){Bar<Bar<Foo>> bar=new Bar<Bar<Foo>>(new Bar<Foo>(new Foo(1)));String expectedJson=""{\""t\"":{\""t\"":{\""b\"":1}}}"";String json=gson.toJson(bar);assertEquals(expectedJson,json);json=gson.toJson(bar,new TypeToken<Bar<Bar<Foo>>>(){}.getType());assertEquals(expectedJson,json);}"
"com.google.gson.functional.RawSerializationTest.testThreeLevelParameterizedObject",0,"public void testThreeLevelParameterizedObject(){Bar<Bar<Bar<Foo>>> bar=new Bar<Bar<Bar<Foo>>>(new Bar<Bar<Foo>>(new Bar<Foo>(new Foo(1))));String expectedJson=""{\""t\"":{\""t\"":{\""t\"":{\""b\"":1}}}}"";String json=gson.toJson(bar);assertEquals(expectedJson,json);json=gson.toJson(bar,new TypeToken<Bar<Bar<Bar<Foo>>>>(){}.getType());assertEquals(expectedJson,json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testClassSerialization",0,"public void testClassSerialization(){try {gson.toJson(String.class);}catch(UnsupportedOperationException expected){}gson=new GsonBuilder().registerTypeAdapter(Class.class,new MyClassTypeAdapter()).create();assertEquals(""\""java.lang.String\"""",gson.toJson(String.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testClassDeserialization",0,"public void testClassDeserialization(){try {gson.fromJson(""String.class"",String.class.getClass());}catch(UnsupportedOperationException expected){}gson=new GsonBuilder().registerTypeAdapter(Class.class,new MyClassTypeAdapter()).create();assertEquals(String.class,gson.fromJson(""java.lang.String"",Class.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlSerialization",0,"public void testUrlSerialization()throws Exception {String urlValue=""http://google.com/"";URL url=new URL(urlValue);assertEquals(""\""http://google.com/\"""",gson.toJson(url));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlDeserialization",0,"public void testUrlDeserialization(){String urlValue=""http://google.com/"";String json=""'http:\\/\\/google.com\\/'"";URL target=gson.fromJson(json,URL.class);assertEquals(urlValue,target.toExternalForm());gson.fromJson('""' + urlValue + '""',URL.class);assertEquals(urlValue,target.toExternalForm());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullSerialization",0,"public void testUrlNullSerialization()throws Exception {ClassWithUrlField target=new ClassWithUrlField();assertEquals(""{}"",gson.toJson(target));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUrlNullDeserialization",0,"public void testUrlNullDeserialization(){String json=""{}"";ClassWithUrlField target=gson.fromJson(json,ClassWithUrlField.class);assertNull(target.url);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUriSerialization",0,"public void testUriSerialization()throws Exception {String uriValue=""http://google.com/"";URI uri=new URI(uriValue);assertEquals(""\""http://google.com/\"""",gson.toJson(uri));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUriDeserialization",0,"public void testUriDeserialization(){String uriValue=""http://google.com/"";String json='""' + uriValue + '""';URI target=gson.fromJson(json,URI.class);assertEquals(uriValue,target.toASCIIString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testNullSerialization",0,"public void testNullSerialization()throws Exception {testNullSerializationAndDeserialization(Boolean.class);testNullSerializationAndDeserialization(Byte.class);testNullSerializationAndDeserialization(Short.class);testNullSerializationAndDeserialization(Integer.class);testNullSerializationAndDeserialization(Long.class);testNullSerializationAndDeserialization(Double.class);testNullSerializationAndDeserialization(Float.class);testNullSerializationAndDeserialization(Number.class);testNullSerializationAndDeserialization(Character.class);testNullSerializationAndDeserialization(String.class);testNullSerializationAndDeserialization(StringBuilder.class);testNullSerializationAndDeserialization(StringBuffer.class);testNullSerializationAndDeserialization(BigDecimal.class);testNullSerializationAndDeserialization(BigInteger.class);testNullSerializationAndDeserialization(TreeSet.class);testNullSerializationAndDeserialization(ArrayList.class);testNullSerializationAndDeserialization(HashSet.class);testNullSerializationAndDeserialization(Properties.class);testNullSerializationAndDeserialization(URL.class);testNullSerializationAndDeserialization(URI.class);testNullSerializationAndDeserialization(UUID.class);testNullSerializationAndDeserialization(Locale.class);testNullSerializationAndDeserialization(InetAddress.class);testNullSerializationAndDeserialization(BitSet.class);testNullSerializationAndDeserialization(Date.class);testNullSerializationAndDeserialization(GregorianCalendar.class);testNullSerializationAndDeserialization(Calendar.class);testNullSerializationAndDeserialization(Time.class);testNullSerializationAndDeserialization(Timestamp.class);testNullSerializationAndDeserialization(java.sql.Date.class);testNullSerializationAndDeserialization(Enum.class);testNullSerializationAndDeserialization(Class.class);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidSerialization",0,"public void testUuidSerialization()throws Exception {String uuidValue=""c237bec1-19ef-4858-a98e-521cf0aad4c0"";UUID uuid=UUID.fromString(uuidValue);assertEquals('""' + uuidValue + '""',gson.toJson(uuid));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testUuidDeserialization",0,"public void testUuidDeserialization(){String uuidValue=""c237bec1-19ef-4858-a98e-521cf0aad4c0"";String json='""' + uuidValue + '""';UUID target=gson.fromJson(json,UUID.class);assertEquals(uuidValue,target.toString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguage",0,"public void testLocaleSerializationWithLanguage(){Locale target=new Locale(""en"");assertEquals(""\""en\"""",gson.toJson(target));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguage",0,"public void testLocaleDeserializationWithLanguage(){String json=""\""en\"""";Locale locale=gson.fromJson(json,Locale.class);assertEquals(""en"",locale.getLanguage());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountry",0,"public void testLocaleSerializationWithLanguageCountry(){Locale target=Locale.CANADA_FRENCH;assertEquals(""\""fr_CA\"""",gson.toJson(target));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountry",0,"public void testLocaleDeserializationWithLanguageCountry(){String json=""\""fr_CA\"""";Locale locale=gson.fromJson(json,Locale.class);assertEquals(Locale.CANADA_FRENCH,locale);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleSerializationWithLanguageCountryVariant",0,"public void testLocaleSerializationWithLanguageCountryVariant(){Locale target=new Locale(""de"",""DE"",""EURO"");String json=gson.toJson(target);assertEquals(""\""de_DE_EURO\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testLocaleDeserializationWithLanguageCountryVariant",0,"public void testLocaleDeserializationWithLanguageCountryVariant(){String json=""\""de_DE_EURO\"""";Locale locale=gson.fromJson(json,Locale.class);assertEquals(""de"",locale.getLanguage());assertEquals(""DE"",locale.getCountry());assertEquals(""EURO"",locale.getVariant());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldSerialization",0,"public void testBigDecimalFieldSerialization(){ClassWithBigDecimal target=new ClassWithBigDecimal(""-122.01e-21"");String json=gson.toJson(target);String actual=json.substring(json.indexOf(':')+ 1,json.indexOf('}'));assertEquals(target.value,new BigDecimal(actual));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigDecimalFieldDeserialization",0,"public void testBigDecimalFieldDeserialization(){ClassWithBigDecimal expected=new ClassWithBigDecimal(""-122.01e-21"");String json=expected.getExpectedJson();ClassWithBigDecimal actual=gson.fromJson(json,ClassWithBigDecimal.class);assertEquals(expected.value,actual.value);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBadValueForBigDecimalDeserialization",0,"public void testBadValueForBigDecimalDeserialization(){try {gson.fromJson(""{\""value\""=1.5e-1.0031}"",ClassWithBigDecimal.class);fail(""Exponent of a BigDecimal must be an integer value."");}catch(JsonParseException expected){}}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldSerialization",0,"public void testBigIntegerFieldSerialization(){ClassWithBigInteger target=new ClassWithBigInteger(""23232323215323234234324324324324324324"");String json=gson.toJson(target);assertEquals(target.getExpectedJson(),json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBigIntegerFieldDeserialization",0,"public void testBigIntegerFieldDeserialization(){ClassWithBigInteger expected=new ClassWithBigInteger(""879697697697697697697697697697697697"");String json=expected.getExpectedJson();ClassWithBigInteger actual=gson.fromJson(json,ClassWithBigInteger.class);assertEquals(expected.value,actual.value);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigIntegerTypeAdapter",0,"public void testOverrideBigIntegerTypeAdapter()throws Exception {gson=new GsonBuilder().registerTypeAdapter(BigInteger.class,new NumberAsStringAdapter(BigInteger.class)).create();assertEquals(""\""123\"""",gson.toJson(new BigInteger(""123""),BigInteger.class));assertEquals(new BigInteger(""123""),gson.fromJson(""\""123\"""",BigInteger.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testOverrideBigDecimalTypeAdapter",0,"public void testOverrideBigDecimalTypeAdapter()throws Exception {gson=new GsonBuilder().registerTypeAdapter(BigDecimal.class,new NumberAsStringAdapter(BigDecimal.class)).create();assertEquals(""\""1.1\"""",gson.toJson(new BigDecimal(""1.1""),BigDecimal.class));assertEquals(new BigDecimal(""1.1""),gson.fromJson(""\""1.1\"""",BigDecimal.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testSetSerialization",0,"public void testSetSerialization()throws Exception {Gson gson=new Gson();HashSet<String> s=new HashSet<String>();s.add(""blah"");String json=gson.toJson(s);assertEquals(""[\""blah\""]"",json);json=gson.toJson(s,Set.class);assertEquals(""[\""blah\""]"",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetSerialization",0,"public void testBitSetSerialization()throws Exception {Gson gson=new Gson();BitSet bits=new BitSet();bits.set(1);bits.set(3,6);bits.set(9);String json=gson.toJson(bits);assertEquals(""[0,1,0,1,1,1,0,0,0,1]"",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testBitSetDeserialization",0,"public void testBitSetDeserialization()throws Exception {BitSet expected=new BitSet();expected.set(0);expected.set(2,6);expected.set(8);Gson gson=new Gson();String json=gson.toJson(expected);assertEquals(expected,gson.fromJson(json,BitSet.class));json=""[1,0,1,1,1,1,0,0,1,0,0,0]"";assertEquals(expected,gson.fromJson(json,BitSet.class));json=""[\""1\"",\""0\"",\""1\"",\""1\"",\""1\"",\""1\"",\""0\"",\""0\"",\""1\""]"";assertEquals(expected,gson.fromJson(json,BitSet.class));json=""[true,false,true,true,true,true,false,false,true,false,false]"";assertEquals(expected,gson.fromJson(json,BitSet.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerialization",0,"public void testDefaultDateSerialization(){Date now=new Date(1315806903103L);String json=gson.toJson(now);assertEquals(""\""Sep 11,2011 10:55:03 PM\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserialization",0,"public void testDefaultDateDeserialization(){String json=""'Dec 13,2009 07:18:02 AM'"";Date extracted=gson.fromJson(json,Date.class);assertEqualsDate(extracted,2009,11,13);assertEqualsTime(extracted,7,18,2);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateSerialization",0,"public void testDefaultJavaSqlDateSerialization(){java.sql.Date instant=new java.sql.Date(1259875082000L);String json=gson.toJson(instant);assertEquals(""\""Dec 3,2009\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlDateDeserialization",0,"public void testDefaultJavaSqlDateDeserialization(){String json=""'Dec 3,2009'"";java.sql.Date extracted=gson.fromJson(json,java.sql.Date.class);assertEqualsDate(extracted,2009,11,3);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSerialization",0,"public void testDefaultJavaSqlTimestampSerialization(){Timestamp now=new java.sql.Timestamp(1259875082000L);String json=gson.toJson(now);assertEquals(""\""Dec 3,2009 1:18:02 PM\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampDeserialization",0,"public void testDefaultJavaSqlTimestampDeserialization(){String json=""'Dec 3,2009 1:18:02 PM'"";Timestamp extracted=gson.fromJson(json,Timestamp.class);assertEqualsDate(extracted,2009,11,3);assertEqualsTime(extracted,13,18,2);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSerialization",0,"public void testDefaultJavaSqlTimeSerialization(){Time now=new Time(1259875082000L);String json=gson.toJson(now);assertEquals(""\""01:18:02 PM\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeDeserialization",0,"public void testDefaultJavaSqlTimeDeserialization(){String json=""'1:18:02 PM'"";Time extracted=gson.fromJson(json,Time.class);assertEqualsTime(extracted,13,18,2);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateSerializationUsingBuilder",0,"public void testDefaultDateSerializationUsingBuilder()throws Exception {Gson gson=new GsonBuilder().create();Date now=new Date(1315806903103L);String json=gson.toJson(now);assertEquals(""\""Sep 11,2011 10:55:03 PM\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultDateDeserializationUsingBuilder",0,"public void testDefaultDateDeserializationUsingBuilder()throws Exception {Gson gson=new GsonBuilder().create();Date now=new Date(1315806903103L);String json=gson.toJson(now);Date extracted=gson.fromJson(json,Date.class);assertEquals(now.toString(),extracted.toString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarSerialization",0,"public void testDefaultCalendarSerialization()throws Exception {Gson gson=new GsonBuilder().create();String json=gson.toJson(Calendar.getInstance());assertTrue(json.contains(""year""));assertTrue(json.contains(""month""));assertTrue(json.contains(""dayOfMonth""));assertTrue(json.contains(""hourOfDay""));assertTrue(json.contains(""minute""));assertTrue(json.contains(""second""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultCalendarDeserialization",0,"public void testDefaultCalendarDeserialization()throws Exception {Gson gson=new GsonBuilder().create();String json=""{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"";Calendar cal=gson.fromJson(json,Calendar.class);assertEquals(2009,cal.get(Calendar.YEAR));assertEquals(2,cal.get(Calendar.MONTH));assertEquals(11,cal.get(Calendar.DAY_OF_MONTH));assertEquals(14,cal.get(Calendar.HOUR_OF_DAY));assertEquals(29,cal.get(Calendar.MINUTE));assertEquals(23,cal.get(Calendar.SECOND));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarSerialization",0,"public void testDefaultGregorianCalendarSerialization()throws Exception {Gson gson=new GsonBuilder().create();GregorianCalendar cal=new GregorianCalendar();String json=gson.toJson(cal);assertTrue(json.contains(""year""));assertTrue(json.contains(""month""));assertTrue(json.contains(""dayOfMonth""));assertTrue(json.contains(""hourOfDay""));assertTrue(json.contains(""minute""));assertTrue(json.contains(""second""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDefaultGregorianCalendarDeserialization",0,"public void testDefaultGregorianCalendarDeserialization()throws Exception {Gson gson=new GsonBuilder().create();String json=""{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"";GregorianCalendar cal=gson.fromJson(json,GregorianCalendar.class);assertEquals(2009,cal.get(Calendar.YEAR));assertEquals(2,cal.get(Calendar.MONTH));assertEquals(11,cal.get(Calendar.DAY_OF_MONTH));assertEquals(14,cal.get(Calendar.HOUR_OF_DAY));assertEquals(29,cal.get(Calendar.MINUTE));assertEquals(23,cal.get(Calendar.SECOND));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPattern",0,"public void testDateSerializationWithPattern()throws Exception {String pattern=""yyyy-MM-dd"";Gson gson=new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();Date now=new Date(1315806903103L);String json=gson.toJson(now);assertEquals(""\""2011-09-11\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateDeserializationWithPattern",0,"@SuppressWarnings(""deprecation"")public void testDateDeserializationWithPattern()throws Exception {String pattern=""yyyy-MM-dd"";Gson gson=new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();Date now=new Date(1315806903103L);String json=gson.toJson(now);Date extracted=gson.fromJson(json,Date.class);assertEquals(now.getYear(),extracted.getYear());assertEquals(now.getMonth(),extracted.getMonth());assertEquals(now.getDay(),extracted.getDay());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationWithPatternNotOverridenByTypeAdapter",0,"public void testDateSerializationWithPatternNotOverridenByTypeAdapter()throws Exception {String pattern=""yyyy-MM-dd"";Gson gson=new GsonBuilder().setDateFormat(pattern).registerTypeAdapter(Date.class,new JsonDeserializer<Date>(){public Date deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context)throws JsonParseException {return new Date(1315806903103L);}}).create();Date now=new Date(1315806903103L);String json=gson.toJson(now);assertEquals(""\""2011-09-11\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testDateSerializationInCollection",0,"public void testDateSerializationInCollection()throws Exception {Type listOfDates=new TypeToken<List<Date>>(){}.getType();TimeZone defaultTimeZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));Locale defaultLocale=Locale.getDefault();Locale.setDefault(Locale.US);try {Gson gson=new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create();List<Date> dates=Arrays.asList(new Date(0));String json=gson.toJson(dates,listOfDates);assertEquals(""[\""1970-01-01\""]"",json);assertEquals(0L,gson.<List<Date>>fromJson(""[\""1970-01-01\""]"",listOfDates).get(0).getTime());}finally {TimeZone.setDefault(defaultTimeZone);Locale.setDefault(defaultLocale);}}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testTimestampSerialization",0,"public void testTimestampSerialization()throws Exception {TimeZone defaultTimeZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));Locale defaultLocale=Locale.getDefault();Locale.setDefault(Locale.US);try {Timestamp timestamp=new Timestamp(0L);Gson gson=new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create();String json=gson.toJson(timestamp,Timestamp.class);assertEquals(""\""1970-01-01\"""",json);assertEquals(0,gson.fromJson(""\""1970-01-01\"""",Timestamp.class).getTime());}finally {TimeZone.setDefault(defaultTimeZone);Locale.setDefault(defaultLocale);}}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testSqlDateSerialization",0,"public void testSqlDateSerialization()throws Exception {TimeZone defaultTimeZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""UTC""));Locale defaultLocale=Locale.getDefault();Locale.setDefault(Locale.US);try {java.sql.Date sqlDate=new java.sql.Date(0L);Gson gson=new GsonBuilder().setDateFormat(""yyyy-MM-dd"").create();String json=gson.toJson(sqlDate,Timestamp.class);assertEquals(""\""1970-01-01\"""",json);assertEquals(0,gson.fromJson(""\""1970-01-01\"""",java.sql.Date.class).getTime());}finally {TimeZone.setDefault(defaultTimeZone);Locale.setDefault(defaultLocale);}}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveSerialization",0,"public void testJsonPrimitiveSerialization(){assertEquals(""5"",gson.toJson(new JsonPrimitive(5),JsonElement.class));assertEquals(""true"",gson.toJson(new JsonPrimitive(true),JsonElement.class));assertEquals(""\""foo\"""",gson.toJson(new JsonPrimitive(""foo""),JsonElement.class));assertEquals(""\""a\"""",gson.toJson(new JsonPrimitive('a'),JsonElement.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonPrimitiveDeserialization",0,"public void testJsonPrimitiveDeserialization(){assertEquals(new JsonPrimitive(5),gson.fromJson(""5"",JsonElement.class));assertEquals(new JsonPrimitive(5),gson.fromJson(""5"",JsonPrimitive.class));assertEquals(new JsonPrimitive(true),gson.fromJson(""true"",JsonElement.class));assertEquals(new JsonPrimitive(true),gson.fromJson(""true"",JsonPrimitive.class));assertEquals(new JsonPrimitive(""foo""),gson.fromJson(""\""foo\"""",JsonElement.class));assertEquals(new JsonPrimitive(""foo""),gson.fromJson(""\""foo\"""",JsonPrimitive.class));assertEquals(new JsonPrimitive('a'),gson.fromJson(""\""a\"""",JsonElement.class));assertEquals(new JsonPrimitive('a'),gson.fromJson(""\""a\"""",JsonPrimitive.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullSerialization",0,"public void testJsonNullSerialization(){assertEquals(""null"",gson.toJson(JsonNull.INSTANCE,JsonElement.class));assertEquals(""null"",gson.toJson(JsonNull.INSTANCE,JsonNull.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testNullJsonElementSerialization",0,"public void testNullJsonElementSerialization(){assertEquals(""null"",gson.toJson(null,JsonElement.class));assertEquals(""null"",gson.toJson(null,JsonNull.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArraySerialization",0,"public void testJsonArraySerialization(){JsonArray array=new JsonArray();array.add(new JsonPrimitive(1));array.add(new JsonPrimitive(2));array.add(new JsonPrimitive(3));assertEquals(""[1,2,3]"",gson.toJson(array,JsonElement.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonArrayDeserialization",0,"public void testJsonArrayDeserialization(){JsonArray array=new JsonArray();array.add(new JsonPrimitive(1));array.add(new JsonPrimitive(2));array.add(new JsonPrimitive(3));String json=""[1,2,3]"";assertEquals(array,gson.fromJson(json,JsonElement.class));assertEquals(array,gson.fromJson(json,JsonArray.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectSerialization",0,"public void testJsonObjectSerialization(){JsonObject object=new JsonObject();object.add(""foo"",new JsonPrimitive(1));object.add(""bar"",new JsonPrimitive(2));assertEquals(""{\""foo\"":1,\""bar\"":2}"",gson.toJson(object,JsonElement.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonObjectDeserialization",0,"public void testJsonObjectDeserialization(){JsonObject object=new JsonObject();object.add(""foo"",new JsonPrimitive(1));object.add(""bar"",new JsonPrimitive(2));String json=""{\""foo\"":1,\""bar\"":2}"";JsonElement actual=gson.fromJson(json,JsonElement.class);assertEquals(object,actual);JsonObject actualObj=gson.fromJson(json,JsonObject.class);assertEquals(object,actualObj);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonNullDeserialization",0,"public void testJsonNullDeserialization(){assertEquals(JsonNull.INSTANCE,gson.fromJson(""null"",JsonElement.class));assertEquals(JsonNull.INSTANCE,gson.fromJson(""null"",JsonNull.class));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testJsonElementTypeMismatch",0,"public void testJsonElementTypeMismatch(){try {gson.fromJson(""\""abc\"""",JsonObject.class);fail();}catch(JsonSyntaxException expected){assertEquals(""Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive"",expected.getMessage());}}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesSerialization",0,"public void testPropertiesSerialization(){Properties props=new Properties();props.setProperty(""foo"",""bar"");String json=gson.toJson(props);String expected=""{\""foo\"":\""bar\""}"";assertEquals(expected,json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testPropertiesDeserialization",0,"public void testPropertiesDeserialization(){String json=""{foo:'bar'}"";Properties props=gson.fromJson(json,Properties.class);assertEquals(""bar"",props.getProperty(""foo""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetSerialization",0,"public void testTreeSetSerialization(){TreeSet<String> treeSet=new TreeSet<String>();treeSet.add(""Value1"");String json=gson.toJson(treeSet);assertEquals(""[\""Value1\""]"",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testTreeSetDeserialization",0,"public void testTreeSetDeserialization(){String json=""['Value1']"";Type type=new TypeToken<TreeSet<String>>(){}.getType();TreeSet<String> treeSet=gson.fromJson(json,type);assertTrue(treeSet.contains(""Value1""));}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderSerialization",0,"public void testStringBuilderSerialization(){StringBuilder sb=new StringBuilder(""abc"");String json=gson.toJson(sb);assertEquals(""\""abc\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBuilderDeserialization",0,"public void testStringBuilderDeserialization(){StringBuilder sb=gson.fromJson(""'abc'"",StringBuilder.class);assertEquals(""abc"",sb.toString());}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferSerialization",0,"public void testStringBufferSerialization(){StringBuffer sb=new StringBuffer(""abc"");String json=gson.toJson(sb);assertEquals(""\""abc\"""",json);}"
"com.google.gson.functional.DefaultTypeAdaptersTest.testStringBufferDeserialization",0,"public void testStringBufferDeserialization(){StringBuffer sb=gson.fromJson(""'abc'"",StringBuffer.class);assertEquals(""abc"",sb.toString());}"
"com.google.gson.ObjectTypeAdapterTest.testDeserialize",0,"public void testDeserialize()throws Exception {Map<?,?> map=(Map<?,?>)adapter.fromJson(""{\""a\"":5,\""b\"":[1,2,null],\""c\"":{\""x\"":\""y\""}}"");assertEquals(5.0,map.get(""a""));assertEquals(Arrays.asList(1.0,2.0,null),map.get(""b""));assertEquals(Collections.singletonMap(""x"",""y""),map.get(""c""));assertEquals(3,map.size());}"
"com.google.gson.ObjectTypeAdapterTest.testSerialize",0,"public void testSerialize()throws Exception {Object object=new RuntimeType();assertEquals(""{'a':5,'b':[1,2,null]}"",adapter.toJson(object).replace(""\"""",""'""));}"
"com.google.gson.ObjectTypeAdapterTest.testSerializeNullValue",0,"public void testSerializeNullValue()throws Exception {Map<String,Object> map=new LinkedHashMap<String,Object>();map.put(""a"",null);assertEquals(""{'a':null}"",adapter.toJson(map).replace('""','\''));}"
"com.google.gson.ObjectTypeAdapterTest.testDeserializeNullValue",0,"public void testDeserializeNullValue()throws Exception {Map<String,Object> map=new LinkedHashMap<String,Object>();map.put(""a"",null);assertEquals(map,adapter.fromJson(""{\""a\"":null}""));}"
"com.google.gson.ObjectTypeAdapterTest.testSerializeObject",0,"public void testSerializeObject()throws Exception {assertEquals(""{}"",adapter.toJson(new Object()));}"
"com.google.gson.functional.InheritanceTest.testSubClassSerialization",0,"public void testSubClassSerialization()throws Exception {SubTypeOfNested target=new SubTypeOfNested(new BagOfPrimitives(10,20,false,""stringValue""),new BagOfPrimitives(30,40,true,""stringValue""));assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.InheritanceTest.testSubClassDeserialization",0,"public void testSubClassDeserialization()throws Exception {String json=""{\""value\"":5,\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,"" + ""\""booleanValue\"":false,\""stringValue\"":\""stringValue\""},\""primitive2\"":"" + ""{\""longValue\"":30,\""intValue\"":40,\""booleanValue\"":true,""+ ""\""stringValue\"":\""stringValue\""}}"";SubTypeOfNested target=gson.fromJson(json,SubTypeOfNested.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.InheritanceTest.testClassWithBaseFieldSerialization",0,"public void testClassWithBaseFieldSerialization(){ClassWithBaseField sub=new ClassWithBaseField(new Sub());JsonObject json=(JsonObject)gson.toJsonTree(sub);JsonElement base=json.getAsJsonObject().get(ClassWithBaseField.FIELD_KEY);assertEquals(Sub.SUB_NAME,base.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());}"
"com.google.gson.functional.InheritanceTest.testClassWithBaseArrayFieldSerialization",0,"public void testClassWithBaseArrayFieldSerialization(){Base[]baseClasses=new Base[]{new Sub(),new Sub()};ClassWithBaseArrayField sub=new ClassWithBaseArrayField(baseClasses);JsonObject json=gson.toJsonTree(sub).getAsJsonObject();JsonArray bases=json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();for(JsonElement element : bases){assertEquals(Sub.SUB_NAME,element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());}}"
"com.google.gson.functional.InheritanceTest.testClassWithBaseCollectionFieldSerialization",0,"public void testClassWithBaseCollectionFieldSerialization(){Collection<Base> baseClasses=new ArrayList<Base>();baseClasses.add(new Sub());baseClasses.add(new Sub());ClassWithBaseCollectionField sub=new ClassWithBaseCollectionField(baseClasses);JsonObject json=gson.toJsonTree(sub).getAsJsonObject();JsonArray bases=json.get(ClassWithBaseArrayField.FIELD_KEY).getAsJsonArray();for(JsonElement element : bases){assertEquals(Sub.SUB_NAME,element.getAsJsonObject().get(Sub.SUB_FIELD_KEY).getAsString());}}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSub",0,"public void testBaseSerializedAsSub(){Base base=new Sub();JsonObject json=gson.toJsonTree(base).getAsJsonObject();assertEquals(Sub.SUB_NAME,json.get(Sub.SUB_FIELD_KEY).getAsString());}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubForToJsonMethod",0,"public void testBaseSerializedAsSubForToJsonMethod(){Base base=new Sub();String json=gson.toJson(base);assertTrue(json.contains(Sub.SUB_NAME));}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitType",0,"public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitType(){Base base=new Sub();JsonObject json=gson.toJsonTree(base,Base.class).getAsJsonObject();assertEquals(Base.BASE_NAME,json.get(Base.BASE_FIELD_KEY).getAsString());assertNull(json.get(Sub.SUB_FIELD_KEY));}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod",0,"public void testBaseSerializedAsBaseWhenSpecifiedWithExplicitTypeForToJsonMethod(){Base base=new Sub();String json=gson.toJson(base,Base.class);assertTrue(json.contains(Base.BASE_NAME));assertFalse(json.contains(Sub.SUB_FIELD_KEY));}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitType",0,"public void testBaseSerializedAsSubWhenSpecifiedWithExplicitType(){Base base=new Sub();JsonObject json=gson.toJsonTree(base,Sub.class).getAsJsonObject();assertEquals(Sub.SUB_NAME,json.get(Sub.SUB_FIELD_KEY).getAsString());}"
"com.google.gson.functional.InheritanceTest.testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod",0,"public void testBaseSerializedAsSubWhenSpecifiedWithExplicitTypeForToJsonMethod(){Base base=new Sub();String json=gson.toJson(base,Sub.class);assertTrue(json.contains(Sub.SUB_NAME));}"
"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionSerialization",0,"public void testSubInterfacesOfCollectionSerialization()throws Exception {List<Integer> list=new LinkedList<Integer>();list.add(0);list.add(1);list.add(2);list.add(3);Queue<Long> queue=new LinkedList<Long>();queue.add(0L);queue.add(1L);queue.add(2L);queue.add(3L);Set<Float> set=new TreeSet<Float>();set.add(0.1F);set.add(0.2F);set.add(0.3F);set.add(0.4F);SortedSet<Character> sortedSet=new TreeSet<Character>();sortedSet.add('a');sortedSet.add('b');sortedSet.add('c');sortedSet.add('d');ClassWithSubInterfacesOfCollection target=new ClassWithSubInterfacesOfCollection(list,queue,set,sortedSet);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.InheritanceTest.testSubInterfacesOfCollectionDeserialization",0,"public void testSubInterfacesOfCollectionDeserialization()throws Exception {String json=""{\""list\"":[0,1,2,3],\""queue\"":[0,1,2,3],\""set\"":[0.1,0.2,0.3,0.4],"" + ""\""sortedSet\"":[\""a\"",\""b\"",\""c\"",\""d\""]"" + ""}"";ClassWithSubInterfacesOfCollection target=gson.fromJson(json,ClassWithSubInterfacesOfCollection.class);assertTrue(target.listContains(0,1,2,3));assertTrue(target.queueContains(0,1,2,3));assertTrue(target.setContains(0.1F,0.2F,0.3F,0.4F));assertTrue(target.sortedSetContains('a','b','c','d'));}"
"com.google.gson.stream.JsonReaderPathTest.testPath",0,"public void testPath()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":[2,true,false,null,\""b\"",{\""c\"":\""d\""},[3]]}""));assertEquals(""$"",reader.getPath());reader.beginObject();assertEquals(""$."",reader.getPath());reader.nextName();assertEquals(""$.a"",reader.getPath());reader.beginArray();assertEquals(""$.a[0]"",reader.getPath());reader.nextInt();assertEquals(""$.a[1]"",reader.getPath());reader.nextBoolean();assertEquals(""$.a[2]"",reader.getPath());reader.nextBoolean();assertEquals(""$.a[3]"",reader.getPath());reader.nextNull();assertEquals(""$.a[4]"",reader.getPath());reader.nextString();assertEquals(""$.a[5]"",reader.getPath());reader.beginObject();assertEquals(""$.a[5]."",reader.getPath());reader.nextName();assertEquals(""$.a[5].c"",reader.getPath());reader.nextString();assertEquals(""$.a[5].c"",reader.getPath());reader.endObject();assertEquals(""$.a[6]"",reader.getPath());reader.beginArray();assertEquals(""$.a[6][0]"",reader.getPath());reader.nextInt();assertEquals(""$.a[6][1]"",reader.getPath());reader.endArray();assertEquals(""$.a[7]"",reader.getPath());reader.endArray();assertEquals(""$.a"",reader.getPath());reader.endObject();assertEquals(""$"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testObjectPath",0,"public void testObjectPath()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":1,\""b\"":2}""));assertEquals(""$"",reader.getPath());reader.peek();assertEquals(""$"",reader.getPath());reader.beginObject();assertEquals(""$."",reader.getPath());reader.peek();assertEquals(""$."",reader.getPath());reader.nextName();assertEquals(""$.a"",reader.getPath());reader.peek();assertEquals(""$.a"",reader.getPath());reader.nextInt();assertEquals(""$.a"",reader.getPath());reader.peek();assertEquals(""$.a"",reader.getPath());reader.nextName();assertEquals(""$.b"",reader.getPath());reader.peek();assertEquals(""$.b"",reader.getPath());reader.nextInt();assertEquals(""$.b"",reader.getPath());reader.peek();assertEquals(""$.b"",reader.getPath());reader.endObject();assertEquals(""$"",reader.getPath());reader.peek();assertEquals(""$"",reader.getPath());reader.close();assertEquals(""$"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testArrayPath",0,"public void testArrayPath()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[1,2]""));assertEquals(""$"",reader.getPath());reader.peek();assertEquals(""$"",reader.getPath());reader.beginArray();assertEquals(""$[0]"",reader.getPath());reader.peek();assertEquals(""$[0]"",reader.getPath());reader.nextInt();assertEquals(""$[1]"",reader.getPath());reader.peek();assertEquals(""$[1]"",reader.getPath());reader.nextInt();assertEquals(""$[2]"",reader.getPath());reader.peek();assertEquals(""$[2]"",reader.getPath());reader.endArray();assertEquals(""$"",reader.getPath());reader.peek();assertEquals(""$"",reader.getPath());reader.close();assertEquals(""$"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testMultipleTopLevelValuesInOneDocument",0,"public void testMultipleTopLevelValuesInOneDocument()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[][]""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(""$"",reader.getPath());reader.beginArray();reader.endArray();assertEquals(""$"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testSkipArrayElements",0,"public void testSkipArrayElements()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[1,2,3]""));reader.beginArray();reader.skipValue();reader.skipValue();assertEquals(""$[2]"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testSkipObjectNames",0,"public void testSkipObjectNames()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":1}""));reader.beginObject();reader.skipValue();assertEquals(""$.null"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testSkipObjectValues",0,"public void testSkipObjectValues()throws IOException {JsonReader reader=new JsonReader(new StringReader(""{\""a\"":1,\""b\"":2}""));reader.beginObject();reader.nextName();reader.skipValue();assertEquals(""$.null"",reader.getPath());reader.nextName();assertEquals(""$.b"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testSkipNestedStructures",0,"public void testSkipNestedStructures()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[[1,2,3],4]""));reader.beginArray();reader.skipValue();assertEquals(""$[1]"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testArrayOfObjects",0,"public void testArrayOfObjects()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[{},{},{}]""));reader.beginArray();assertEquals(""$[0]"",reader.getPath());reader.beginObject();assertEquals(""$[0]."",reader.getPath());reader.endObject();assertEquals(""$[1]"",reader.getPath());reader.beginObject();assertEquals(""$[1]."",reader.getPath());reader.endObject();assertEquals(""$[2]"",reader.getPath());reader.beginObject();assertEquals(""$[2]."",reader.getPath());reader.endObject();assertEquals(""$[3]"",reader.getPath());reader.endArray();assertEquals(""$"",reader.getPath());}"
"com.google.gson.stream.JsonReaderPathTest.testArrayOfArrays",0,"public void testArrayOfArrays()throws IOException {JsonReader reader=new JsonReader(new StringReader(""[[],[],[]]""));reader.beginArray();assertEquals(""$[0]"",reader.getPath());reader.beginArray();assertEquals(""$[0][0]"",reader.getPath());reader.endArray();assertEquals(""$[1]"",reader.getPath());reader.beginArray();assertEquals(""$[1][0]"",reader.getPath());reader.endArray();assertEquals(""$[2]"",reader.getPath());reader.beginArray();assertEquals(""$[2][0]"",reader.getPath());reader.endArray();assertEquals(""$[3]"",reader.getPath());reader.endArray();assertEquals(""$"",reader.getPath());}"
"com.google.gson.functional.ConcurrencyTest.testSingleThreadSerialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testSingleThreadSerialization(){MyObject myObj=new MyObject();for (int i=0;i < 10;i++){gson.toJson(myObj);}}"
"com.google.gson.functional.ConcurrencyTest.testSingleThreadDeserialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testSingleThreadDeserialization(){for (int i=0;i < 10;i++){gson.fromJson(""{'a':'hello','b':'world','i':1}"",MyObject.class);}}"
"com.google.gson.functional.ConcurrencyTest.testMultiThreadSerialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testMultiThreadSerialization()throws InterruptedException {final CountDownLatch startLatch=new CountDownLatch(1);final CountDownLatch finishedLatch=new CountDownLatch(10);final AtomicBoolean failed=new AtomicBoolean(false);ExecutorService executor=Executors.newFixedThreadPool(10);for (int taskCount=0;taskCount < 10;taskCount++){executor.execute(new Runnable(){public void run(){MyObject myObj=new MyObject();try {startLatch.await();for (int i=0;i < 10;i++){gson.toJson(myObj);}}catch(Throwable t){failed.set(true);}finally {finishedLatch.countDown();}}});}startLatch.countDown();finishedLatch.await();assertFalse(failed.get());}"
"com.google.gson.functional.ConcurrencyTest.testMultiThreadDeserialization",0,"/** * Source-code based on http://groups.google.com/group/google-gson/browse_thread/thread/563bb51ee2495081*/public void testMultiThreadDeserialization()throws InterruptedException {final CountDownLatch startLatch=new CountDownLatch(1);final CountDownLatch finishedLatch=new CountDownLatch(10);final AtomicBoolean failed=new AtomicBoolean(false);ExecutorService executor=Executors.newFixedThreadPool(10);for (int taskCount=0;taskCount < 10;taskCount++){executor.execute(new Runnable(){public void run(){try {startLatch.await();for (int i=0;i < 10;i++){gson.fromJson(""{'a':'hello','b':'world','i':1}"",MyObject.class);}}catch(Throwable t){failed.set(true);}finally {finishedLatch.countDown();}}});}startLatch.countDown();finishedLatch.await();assertFalse(failed.get());}"
"com.google.gson.functional.MapAsArrayTypeAdapterTest.testSerializeComplexMapWithTypeAdapter",0,"public void testSerializeComplexMapWithTypeAdapter(){Type type=new TypeToken<Map<Point,String>>(){}.getType();Gson gson=new GsonBuilder().enableComplexMapKeySerialization().create();Map<Point,String> original=new LinkedHashMap<Point,String>();original.put(new Point(5,5),""a"");original.put(new Point(8,8),""b"");String json=gson.toJson(original,type);assertEquals(""[[{\""x\"":5,\""y\"":5},\""a\""],[{\""x\"":8,\""y\"":8},\""b\""]]"",json);assertEquals(original,gson.<Map<Point,String>>fromJson(json,type));Map<String,Boolean> otherMap=new LinkedHashMap<String,Boolean>();otherMap.put(""t"",true);otherMap.put(""f"",false);assertEquals(""{\""t\"":true,\""f\"":false}"",gson.toJson(otherMap,Map.class));assertEquals(""{\""t\"":true,\""f\"":false}"",gson.toJson(otherMap,new TypeToken<Map<String,Boolean>>(){}.getType()));assertEquals(otherMap,gson.<Object>fromJson(""{\""t\"":true,\""f\"":false}"",new TypeToken<Map<String,Boolean>>(){}.getType()));}"
"com.google.gson.functional.MapAsArrayTypeAdapterTest.testTwoTypesCollapseToOneDeserialize",0,"public void testTwoTypesCollapseToOneDeserialize(){Gson gson=new GsonBuilder().enableComplexMapKeySerialization().create();String s=""[[\""1.00\"",\""a\""],[\""1.0\"",\""b\""]]"";try {gson.fromJson(s,new TypeToken<Map<Double,String>>(){}.getType());fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMultipleEnableComplexKeyRegistrationHasNoEffect",0,"public void testMultipleEnableComplexKeyRegistrationHasNoEffect()throws Exception {Type type=new TypeToken<Map<Point,String>>(){}.getType();Gson gson=new GsonBuilder().enableComplexMapKeySerialization().enableComplexMapKeySerialization().create();Map<Point,String> original=new LinkedHashMap<Point,String>();original.put(new Point(6,5),""abc"");original.put(new Point(1,8),""def"");String json=gson.toJson(original,type);assertEquals(""[[{\""x\"":6,\""y\"":5},\""abc\""],[{\""x\"":1,\""y\"":8},\""def\""]]"",json);assertEquals(original,gson.<Map<Point,String>>fromJson(json,type));}"
"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableSerialization",0,"public void testMapWithTypeVariableSerialization(){Gson gson=new GsonBuilder().enableComplexMapKeySerialization().create();PointWithProperty<Point> map=new PointWithProperty<Point>();map.map.put(new Point(2,3),new Point(4,5));Type type=new TypeToken<PointWithProperty<Point>>(){}.getType();String json=gson.toJson(map,type);assertEquals(""{\""map\"":[[{\""x\"":2,\""y\"":3},{\""x\"":4,\""y\"":5}]]}"",json);}"
"com.google.gson.functional.MapAsArrayTypeAdapterTest.testMapWithTypeVariableDeserialization",0,"public void testMapWithTypeVariableDeserialization(){Gson gson=new GsonBuilder().enableComplexMapKeySerialization().create();String json=""{map:[[{x:2,y:3},{x:4,y:5}]]}"";Type type=new TypeToken<PointWithProperty<Point>>(){}.getType();PointWithProperty<Point> map=gson.fromJson(json,type);Point key=map.map.keySet().iterator().next();Point value=map.map.values().iterator().next();assertEquals(new Point(2,3),key);assertEquals(new Point(4,5),value);}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testArray",0,"public void testArray()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.beginArray();writer.value(1);writer.value(2);writer.value(3);writer.endArray();assertEquals(""[1,2,3]"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedArray",0,"public void testNestedArray()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.beginArray();writer.beginArray();writer.endArray();writer.beginArray();writer.beginArray();writer.endArray();writer.endArray();writer.endArray();assertEquals(""[[],[[]]]"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testObject",0,"public void testObject()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.beginObject();writer.name(""A"").value(1);writer.name(""B"").value(2);writer.endObject();assertEquals(""{\""A\"":1,\""B\"":2}"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testNestedObject",0,"public void testNestedObject()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.beginObject();writer.name(""A"");writer.beginObject();writer.name(""B"");writer.beginObject();writer.endObject();writer.endObject();writer.name(""C"");writer.beginObject();writer.endObject();writer.endObject();assertEquals(""{\""A\"":{\""B\"":{}},\""C\"":{}}"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testWriteAfterClose",0,"public void testWriteAfterClose()throws Exception {JsonTreeWriter writer=new JsonTreeWriter();writer.setLenient(true);writer.beginArray();writer.value(""A"");writer.endArray();writer.close();try {writer.beginArray();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testPrematureClose",0,"public void testPrematureClose()throws Exception {JsonTreeWriter writer=new JsonTreeWriter();writer.setLenient(true);writer.beginArray();try {writer.close();fail();}catch(IOException expected){}}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsFalse",0,"public void testSerializeNullsFalse()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.setSerializeNulls(false);writer.beginObject();writer.name(""A"");writer.nullValue();writer.endObject();assertEquals(""{}"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testSerializeNullsTrue",0,"public void testSerializeNullsTrue()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.setSerializeNulls(true);writer.beginObject();writer.name(""A"");writer.nullValue();writer.endObject();assertEquals(""{\""A\"":null}"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testEmptyWriter",0,"public void testEmptyWriter(){JsonTreeWriter writer=new JsonTreeWriter();assertEquals(JsonNull.INSTANCE,writer.get());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testLenientNansAndInfinities",0,"public void testLenientNansAndInfinities()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.setLenient(true);writer.beginArray();writer.value(Double.NaN);writer.value(Double.NEGATIVE_INFINITY);writer.value(Double.POSITIVE_INFINITY);writer.endArray();assertEquals(""[NaN,-Infinity,Infinity]"",writer.get().toString());}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictNansAndInfinities",0,"public void testStrictNansAndInfinities()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.setLenient(false);writer.beginArray();try {writer.value(Double.NaN);fail();}catch(IllegalArgumentException expected){}try {writer.value(Double.NEGATIVE_INFINITY);fail();}catch(IllegalArgumentException expected){}try {writer.value(Double.POSITIVE_INFINITY);fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.internal.bind.JsonTreeWriterTest.testStrictBoxedNansAndInfinities",0,"public void testStrictBoxedNansAndInfinities()throws IOException {JsonTreeWriter writer=new JsonTreeWriter();writer.setLenient(false);writer.beginArray();try {writer.value(new Double(Double.NaN));fail();}catch(IllegalArgumentException expected){}try {writer.value(new Double(Double.NEGATIVE_INFINITY));fail();}catch(IllegalArgumentException expected){}try {writer.value(new Double(Double.POSITIVE_INFINITY));fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.InternationalizationTest.testStringsWithRawChineseCharactersDeserialization",0,"public void testStringsWithRawChineseCharactersDeserialization()throws Exception {String expected=""好好好"";String json=""\"""" + expected + ""\"""";String actual=gson.fromJson(json,String.class);assertEquals(expected,actual);}"
"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersSerialization",0,"public void testStringsWithUnicodeChineseCharactersSerialization()throws Exception {String target=""\u597d\u597d\u597d"";String json=gson.toJson(target);String expected=""\""\u597d\u597d\u597d\"""";assertEquals(expected,json);}"
"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersDeserialization",0,"public void testStringsWithUnicodeChineseCharactersDeserialization()throws Exception {String expected=""\u597d\u597d\u597d"";String json=""\"""" + expected + ""\"""";String actual=gson.fromJson(json,String.class);assertEquals(expected,actual);}"
"com.google.gson.functional.InternationalizationTest.testStringsWithUnicodeChineseCharactersEscapedDeserialization",0,"public void testStringsWithUnicodeChineseCharactersEscapedDeserialization()throws Exception {String actual=gson.fromJson(""'\\u597d\\u597d\\u597d'"",String.class);assertEquals(""\u597d\u597d\u597d"",actual);}"
"com.google.gson.internal.LazilyParsedNumberTest.testHashCode",0,"public void testHashCode(){LazilyParsedNumber n1=new LazilyParsedNumber(""1"");LazilyParsedNumber n1Another=new LazilyParsedNumber(""1"");assertEquals(n1.hashCode(),n1Another.hashCode());}"
"com.google.gson.internal.LazilyParsedNumberTest.testEquals",0,"public void testEquals(){LazilyParsedNumber n1=new LazilyParsedNumber(""1"");LazilyParsedNumber n1Another=new LazilyParsedNumber(""1"");assertTrue(n1.equals(n1Another));}"
"com.google.gson.functional.ExposeFieldsTest.testNullExposeFieldSerialization",0,"public void testNullExposeFieldSerialization()throws Exception {ClassWithExposedFields object=new ClassWithExposedFields(null,1);String json=gson.toJson(object);assertEquals(object.getExpectedJson(),json);}"
"com.google.gson.functional.ExposeFieldsTest.testArrayWithOneNullExposeFieldObjectSerialization",0,"public void testArrayWithOneNullExposeFieldObjectSerialization()throws Exception {ClassWithExposedFields object1=new ClassWithExposedFields(1,1);ClassWithExposedFields object2=new ClassWithExposedFields(null,1);ClassWithExposedFields object3=new ClassWithExposedFields(2,2);ClassWithExposedFields[]objects={object1,object2,object3};String json=gson.toJson(objects);String expected=new StringBuilder().append('[').append(object1.getExpectedJson()).append(',').append(object2.getExpectedJson()).append(',').append(object3.getExpectedJson()).append(']').toString();assertEquals(expected,json);}"
"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationSerialization",0,"public void testExposeAnnotationSerialization()throws Exception {ClassWithExposedFields target=new ClassWithExposedFields(1,2);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ExposeFieldsTest.testExposeAnnotationDeserialization",0,"public void testExposeAnnotationDeserialization()throws Exception {String json=""{a:3,b:4,d:20.0}"";ClassWithExposedFields target=gson.fromJson(json,ClassWithExposedFields.class);assertEquals(3,(int)target.a);assertNull(target.b);assertFalse(target.d == 20);}"
"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldSerialization",0,"public void testNoExposedFieldSerialization()throws Exception {ClassWithNoExposedFields obj=new ClassWithNoExposedFields();String json=gson.toJson(obj);assertEquals(""{}"",json);}"
"com.google.gson.functional.ExposeFieldsTest.testNoExposedFieldDeserialization",0,"public void testNoExposedFieldDeserialization()throws Exception {String json=""{a:4,b:5}"";ClassWithNoExposedFields obj=gson.fromJson(json,ClassWithNoExposedFields.class);assertEquals(0,obj.a);assertEquals(1,obj.b);}"
"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldSerialization",0,"public void testExposedInterfaceFieldSerialization()throws Exception {String expected=""{\""interfaceField\"":{}}"";ClassWithInterfaceField target=new ClassWithInterfaceField(new SomeObject());String actual=gson.toJson(target);assertEquals(expected,actual);}"
"com.google.gson.functional.ExposeFieldsTest.testExposedInterfaceFieldDeserialization",0,"public void testExposedInterfaceFieldDeserialization()throws Exception {String json=""{\""interfaceField\"":{}}"";ClassWithInterfaceField obj=gson.fromJson(json,ClassWithInterfaceField.class);assertNotNull(obj.interfaceField);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingFollowedByNonstreaming",0,"public void testNonstreamingFollowedByNonstreaming(){Gson gson=new GsonBuilder().registerTypeAdapter(Foo.class,newSerializer(""serializer 1"")).registerTypeAdapter(Foo.class,newSerializer(""serializer 2"")).registerTypeAdapter(Foo.class,newDeserializer(""deserializer 1"")).registerTypeAdapter(Foo.class,newDeserializer(""deserializer 2"")).create();assertEquals(""\""foo via serializer 2\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via deserializer 2"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByStreaming",0,"public void testStreamingFollowedByStreaming(){Gson gson=new GsonBuilder().registerTypeAdapter(Foo.class,newTypeAdapter(""type adapter 1"")).registerTypeAdapter(Foo.class,newTypeAdapter(""type adapter 2"")).create();assertEquals(""\""foo via type adapter 2\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via type adapter 2"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter",0,"public void testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter(){Gson gson=new GsonBuilder().registerTypeAdapter(Foo.class,newSerializer(""serializer"")).registerTypeAdapter(Foo.class,newDeserializer(""deserializer"")).registerTypeAdapter(Foo.class,newTypeAdapter(""type adapter"")).create();assertEquals(""\""foo via type adapter\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via type adapter"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreaming",0,"public void testStreamingFollowedByNonstreaming(){Gson gson=new GsonBuilder().registerTypeAdapter(Foo.class,newTypeAdapter(""type adapter"")).registerTypeAdapter(Foo.class,newSerializer(""serializer"")).registerTypeAdapter(Foo.class,newDeserializer(""deserializer"")).create();assertEquals(""\""foo via serializer\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via deserializer"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreaming",0,"public void testStreamingHierarchicalFollowedByNonstreaming(){Gson gson=new GsonBuilder().registerTypeHierarchyAdapter(Foo.class,newTypeAdapter(""type adapter"")).registerTypeAdapter(Foo.class,newSerializer(""serializer"")).registerTypeAdapter(Foo.class,newDeserializer(""deserializer"")).create();assertEquals(""\""foo via serializer\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via deserializer"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingFollowedByNonstreamingHierarchical",0,"public void testStreamingFollowedByNonstreamingHierarchical(){Gson gson=new GsonBuilder().registerTypeAdapter(Foo.class,newTypeAdapter(""type adapter"")).registerTypeHierarchyAdapter(Foo.class,newSerializer(""serializer"")).registerTypeHierarchyAdapter(Foo.class,newDeserializer(""deserializer"")).create();assertEquals(""\""foo via type adapter\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via type adapter"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testStreamingHierarchicalFollowedByNonstreamingHierarchical",0,"public void testStreamingHierarchicalFollowedByNonstreamingHierarchical(){Gson gson=new GsonBuilder().registerTypeHierarchyAdapter(Foo.class,newSerializer(""serializer"")).registerTypeHierarchyAdapter(Foo.class,newDeserializer(""deserializer"")).registerTypeHierarchyAdapter(Foo.class,newTypeAdapter(""type adapter"")).create();assertEquals(""\""foo via type adapter\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via type adapter"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.TypeAdapterPrecedenceTest.testNonstreamingHierarchicalFollowedByNonstreaming",0,"public void testNonstreamingHierarchicalFollowedByNonstreaming(){Gson gson=new GsonBuilder().registerTypeHierarchyAdapter(Foo.class,newSerializer(""hierarchical"")).registerTypeHierarchyAdapter(Foo.class,newDeserializer(""hierarchical"")).registerTypeAdapter(Foo.class,newSerializer(""non hierarchical"")).registerTypeAdapter(Foo.class,newDeserializer(""non hierarchical"")).create();assertEquals(""\""foo via non hierarchical\"""",gson.toJson(new Foo(""foo"")));assertEquals(""foo via non hierarchical"",gson.fromJson(""foo"",Foo.class).name);}"
"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectSerialization",0,"public void testTopLevelNullObjectSerialization(){Gson gson=gsonBuilder.create();String actual=gson.toJson(null);assertEquals(""null"",actual);actual=gson.toJson(null,String.class);assertEquals(""null"",actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testTopLevelNullObjectDeserialization",0,"public void testTopLevelNullObjectDeserialization()throws Exception {Gson gson=gsonBuilder.create();String actual=gson.fromJson(""null"",String.class);assertNull(actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNulls",0,"public void testExplicitSerializationOfNulls(){Gson gson=gsonBuilder.create();ClassWithObjects target=new ClassWithObjects(null);String actual=gson.toJson(target);String expected=""{\""bag\"":null}"";assertEquals(expected,actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitDeserializationOfNulls",0,"public void testExplicitDeserializationOfNulls()throws Exception {Gson gson=gsonBuilder.create();ClassWithObjects target=gson.fromJson(""{\""bag\"":null}"",ClassWithObjects.class);assertNull(target.bag);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullArrayMembers",0,"public void testExplicitSerializationOfNullArrayMembers(){Gson gson=gsonBuilder.create();ClassWithMembers target=new ClassWithMembers();String json=gson.toJson(target);assertTrue(json.contains(""\""array\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberSerialization",0,"/** * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68*/public void testNullWrappedPrimitiveMemberSerialization(){Gson gson=gsonBuilder.serializeNulls().create();ClassWithNullWrappedPrimitive target=new ClassWithNullWrappedPrimitive();String json=gson.toJson(target);assertTrue(json.contains(""\""value\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testNullWrappedPrimitiveMemberDeserialization",0,"/** * Added to verify http://code.google.com/p/google-gson/issues/detail?id=68*/public void testNullWrappedPrimitiveMemberDeserialization(){Gson gson=gsonBuilder.create();String json=""{'value':null}"";ClassWithNullWrappedPrimitive target=gson.fromJson(json,ClassWithNullWrappedPrimitive.class);assertNull(target.value);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullCollectionMembers",0,"public void testExplicitSerializationOfNullCollectionMembers(){Gson gson=gsonBuilder.create();ClassWithMembers target=new ClassWithMembers();String json=gson.toJson(target);assertTrue(json.contains(""\""col\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitSerializationOfNullStringMembers",0,"public void testExplicitSerializationOfNullStringMembers(){Gson gson=gsonBuilder.create();ClassWithMembers target=new ClassWithMembers();String json=gson.toJson(target);assertTrue(json.contains(""\""str\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testCustomSerializationOfNulls",0,"public void testCustomSerializationOfNulls(){gsonBuilder.registerTypeAdapter(ClassWithObjects.class,new ClassWithObjectsSerializer());Gson gson=gsonBuilder.create();ClassWithObjects target=new ClassWithObjects(new BagOfPrimitives());String actual=gson.toJson(target);String expected=""{\""bag\"":null}"";assertEquals(expected,actual);}"
"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingObjectWithNulls",0,"public void testPrintPrintingObjectWithNulls()throws Exception {gsonBuilder=new GsonBuilder();Gson gson=gsonBuilder.create();String result=gson.toJson(new ClassWithMembers());assertEquals(""{}"",result);gson=gsonBuilder.serializeNulls().create();result=gson.toJson(new ClassWithMembers());assertTrue(result.contains(""\""str\"":null""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testPrintPrintingArraysWithNulls",0,"public void testPrintPrintingArraysWithNulls()throws Exception {gsonBuilder=new GsonBuilder();Gson gson=gsonBuilder.create();String result=gson.toJson(new String[]{""1"",null,""3""});assertEquals(""[\""1\"",null,\""3\""]"",result);gson=gsonBuilder.serializeNulls().create();result=gson.toJson(new String[]{""1"",null,""3""});assertEquals(""[\""1\"",null,\""3\""]"",result);}"
"com.google.gson.functional.NullObjectAndFieldTest.testAbsentJsonElementsAreSetToNull",0,"public void testAbsentJsonElementsAreSetToNull(){Gson gson=new Gson();ClassWithInitializedMembers target=gson.fromJson(""{array:[1,2,3]}"",ClassWithInitializedMembers.class);assertTrue(target.array.length == 3 && target.array[1]== 2);assertEquals(ClassWithInitializedMembers.MY_STRING_DEFAULT,target.str1);assertNull(target.str2);assertEquals(ClassWithInitializedMembers.MY_INT_DEFAULT,target.int1);assertEquals(0,target.int2);assertEquals(ClassWithInitializedMembers.MY_BOOLEAN_DEFAULT,target.bool1);assertFalse(target.bool2);}"
"com.google.gson.functional.NullObjectAndFieldTest.testExplicitNullSetsFieldToNullDuringDeserialization",0,"public void testExplicitNullSetsFieldToNullDuringDeserialization(){Gson gson=new Gson();String json=""{value:null}"";ObjectWithField obj=gson.fromJson(json,ObjectWithField.class);assertNull(obj.value);}"
"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullSerialization",0,"public void testCustomTypeAdapterPassesNullSerialization(){Gson gson=new GsonBuilder().registerTypeAdapter(ObjectWithField.class,new JsonSerializer<ObjectWithField>(){@Override public JsonElement serialize(ObjectWithField src,Type typeOfSrc,JsonSerializationContext context){return context.serialize(null);}}).create();ObjectWithField target=new ObjectWithField();target.value=""value1"";String json=gson.toJson(target);assertFalse(json.contains(""value1""));}"
"com.google.gson.functional.NullObjectAndFieldTest.testCustomTypeAdapterPassesNullDesrialization",0,"public void testCustomTypeAdapterPassesNullDesrialization(){Gson gson=new GsonBuilder().registerTypeAdapter(ObjectWithField.class,new JsonDeserializer<ObjectWithField>(){@Override public ObjectWithField deserialize(JsonElement json,Type type,JsonDeserializationContext context){return context.deserialize(null,type);}}).create();String json=""{value:'value1'}"";ObjectWithField target=gson.fromJson(json,ObjectWithField.class);assertNull(target);}"
"com.google.gson.functional.CircularReferenceTest.testCircularSerialization",0,"public void testCircularSerialization()throws Exception {ContainsReferenceToSelfType a=new ContainsReferenceToSelfType();ContainsReferenceToSelfType b=new ContainsReferenceToSelfType();a.children.add(b);b.children.add(a);try {gson.toJson(a);fail(""Circular types should not get printed!"");}catch(StackOverflowError expected){}}"
"com.google.gson.functional.CircularReferenceTest.testSelfReferenceIgnoredInSerialization",0,"public void testSelfReferenceIgnoredInSerialization()throws Exception {ClassOverridingEquals objA=new ClassOverridingEquals();objA.ref=objA;String json=gson.toJson(objA);assertFalse(json.contains(""ref""));}"
"com.google.gson.functional.CircularReferenceTest.testSelfReferenceArrayFieldSerialization",0,"public void testSelfReferenceArrayFieldSerialization()throws Exception {ClassWithSelfReferenceArray objA=new ClassWithSelfReferenceArray();objA.children=new ClassWithSelfReferenceArray[]{objA};try {gson.toJson(objA);fail(""Circular reference to self can not be serialized!"");}catch(StackOverflowError expected){}}"
"com.google.gson.functional.CircularReferenceTest.testSelfReferenceCustomHandlerSerialization",0,"public void testSelfReferenceCustomHandlerSerialization()throws Exception {ClassWithSelfReference obj=new ClassWithSelfReference();obj.child=obj;Gson gson=new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class,new JsonSerializer<ClassWithSelfReference>(){public JsonElement serialize(ClassWithSelfReference src,Type typeOfSrc,JsonSerializationContext context){JsonObject obj=new JsonObject();obj.addProperty(""property"",""value"");obj.add(""child"",context.serialize(src.child));return obj;}}).create();try {gson.toJson(obj);fail(""Circular reference to self can not be serialized!"");}catch(StackOverflowError expected){}}"
"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphSerialization",0,"public void testDirectedAcyclicGraphSerialization()throws Exception {ContainsReferenceToSelfType a=new ContainsReferenceToSelfType();ContainsReferenceToSelfType b=new ContainsReferenceToSelfType();ContainsReferenceToSelfType c=new ContainsReferenceToSelfType();a.children.add(b);a.children.add(c);b.children.add(c);assertNotNull(gson.toJson(a));}"
"com.google.gson.functional.CircularReferenceTest.testDirectedAcyclicGraphDeserialization",0,"public void testDirectedAcyclicGraphDeserialization()throws Exception {String json=""{\""children\"":[{\""children\"":[{\""children\"":[]}]},{\""children\"":[]}]}"";ContainsReferenceToSelfType target=gson.fromJson(json,ContainsReferenceToSelfType.class);assertNotNull(target);assertEquals(2,target.children.size());}"
"com.google.gson.JavaSerializationTest.testMapIsSerializable",0,"public void testMapIsSerializable()throws Exception {Type type=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{\""b\"":1,\""c\"":2,\""a\"":3}"",type);Map<String,Integer> serialized=serializedCopy(map);assertEquals(map,serialized);assertEquals(Arrays.asList(""b"",""c"",""a""),new ArrayList<String>(serialized.keySet()));}"
"com.google.gson.JavaSerializationTest.testListIsSerializable",0,"public void testListIsSerializable()throws Exception {Type type=new TypeToken<List<String>>(){}.getType();List<String> list=gson.fromJson(""[\""a\"",\""b\"",\""c\""]"",type);List<String> serialized=serializedCopy(list);assertEquals(list,serialized);}"
"com.google.gson.JavaSerializationTest.testNumberIsSerializable",0,"public void testNumberIsSerializable()throws Exception {Type type=new TypeToken<List<Number>>(){}.getType();List<Number> list=gson.fromJson(""[1,3.14,6.673e-11]"",type);List<Number> serialized=serializedCopy(list);assertEquals(1.0,serialized.get(0).doubleValue());assertEquals(3.14,serialized.get(1).doubleValue());assertEquals(6.673e-11,serialized.get(2).doubleValue());}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintList",0,"public void testPrettyPrintList(){BagOfPrimitives b=new BagOfPrimitives();List<BagOfPrimitives> listOfB=new LinkedList<BagOfPrimitives>();for (int i=0;i < 15;++i){listOfB.add(b);}Type typeOfSrc=new TypeToken<List<BagOfPrimitives>>(){}.getType();String json=gson.toJson(listOfB,typeOfSrc);print(json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfObjects",0,"public void testPrettyPrintArrayOfObjects(){ArrayOfObjects target=new ArrayOfObjects();String json=gson.toJson(target);print(json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitives",0,"public void testPrettyPrintArrayOfPrimitives(){int[]ints=new int[]{1,2,3,4,5};String json=gson.toJson(ints);assertEquals(""[\n  1,\n  2,\n  3,\n  4,\n  5\n]"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintArrayOfPrimitiveArrays",0,"public void testPrettyPrintArrayOfPrimitiveArrays(){int[][]ints=new int[][]{{1,2},{3,4},{5,6},{7,8},{9,0},{10}};String json=gson.toJson(ints);assertEquals(""[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    5,\n    6\n  ],"" + ""\n  [\n    7,\n    8\n  ],\n  [\n    9,\n    0\n  ],\n  [\n    10\n  ]\n]"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testPrettyPrintListOfPrimitiveArrays",0,"public void testPrettyPrintListOfPrimitiveArrays(){List<Integer[]> list=Arrays.asList(new Integer[][]{{1,2},{3,4},{5,6},{7,8},{9,0},{10}});String json=gson.toJson(list);assertEquals(""[\n  [\n    1,\n    2\n  ],\n  [\n    3,\n    4\n  ],\n  [\n    5,\n    6\n  ],"" + ""\n  [\n    7,\n    8\n  ],\n  [\n    9,\n    0\n  ],\n  [\n    10\n  ]\n]"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testMap",0,"public void testMap(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""abc"",1);map.put(""def"",5);String json=gson.toJson(map);assertEquals(""{\n  \""abc\"": 1,\n  \""def\"": 5\n}"",json);}"
"com.google.gson.functional.PrettyPrintingTest.testEmptyMapField",0,"public void testEmptyMapField(){ClassWithMap obj=new ClassWithMap();obj.map=new LinkedHashMap<String,Integer>();String json=gson.toJson(obj);assertTrue(json.contains(""{\n  \""map\"": {},\n  \""value\"": 2\n}""));}"
"com.google.gson.functional.PrettyPrintingTest.testMultipleArrays",0,"public void testMultipleArrays(){int[][][]ints=new int[][][]{{{1},{2}}};String json=gson.toJson(ints);assertEquals(""[\n  [\n    [\n      1\n    ],\n    [\n      2\n    ]\n  ]\n]"",json);}"
"com.google.gson.functional.VersioningTest.testVersionedUntilSerialization",0,"public void testVersionedUntilSerialization(){Version1 target=new Version1();Gson gson=builder.setVersion(1.29).create();String json=gson.toJson(target);assertTrue(json.contains(""\""a\"":"" + A));gson=builder.setVersion(1.3).create();json=gson.toJson(target);assertFalse(json.contains(""\""a\"":"" + A));}"
"com.google.gson.functional.VersioningTest.testVersionedUntilDeserialization",0,"public void testVersionedUntilDeserialization(){Gson gson=builder.setVersion(1.3).create();String json=""{\""a\"":3,\""b\"":4,\""c\"":5}"";Version1 version1=gson.fromJson(json,Version1.class);assertEquals(A,version1.a);}"
"com.google.gson.functional.VersioningTest.testVersionedClassesSerialization",0,"public void testVersionedClassesSerialization(){Gson gson=builder.setVersion(1.0).create();String json1=gson.toJson(new Version1());String json2=gson.toJson(new Version1_1());assertEquals(json1,json2);}"
"com.google.gson.functional.VersioningTest.testVersionedClassesDeserialization",0,"public void testVersionedClassesDeserialization(){Gson gson=builder.setVersion(1.0).create();String json=""{\""a\"":3,\""b\"":4,\""c\"":5}"";Version1 version1=gson.fromJson(json,Version1.class);assertEquals(3,version1.a);assertEquals(4,version1.b);Version1_1 version1_1=gson.fromJson(json,Version1_1.class);assertEquals(3,version1_1.a);assertEquals(4,version1_1.b);assertEquals(C,version1_1.c);}"
"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassSerialization",0,"public void testIgnoreLaterVersionClassSerialization(){Gson gson=builder.setVersion(1.0).create();assertEquals(""null"",gson.toJson(new Version1_2()));}"
"com.google.gson.functional.VersioningTest.testIgnoreLaterVersionClassDeserialization",0,"public void testIgnoreLaterVersionClassDeserialization(){Gson gson=builder.setVersion(1.0).create();String json=""{\""a\"":3,\""b\"":4,\""c\"":5,\""d\"":6}"";Version1_2 version1_2=gson.fromJson(json,Version1_2.class);assertNull(version1_2);}"
"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesSerialization",0,"public void testVersionedGsonWithUnversionedClassesSerialization(){Gson gson=builder.setVersion(1.0).create();BagOfPrimitives target=new BagOfPrimitives(10,20,false,""stringValue"");assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.VersioningTest.testVersionedGsonWithUnversionedClassesDeserialization",0,"public void testVersionedGsonWithUnversionedClassesDeserialization(){Gson gson=builder.setVersion(1.0).create();String json=""{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false}"";BagOfPrimitives expected=new BagOfPrimitives();expected.longValue=10;expected.intValue=20;expected.booleanValue=false;BagOfPrimitives actual=gson.fromJson(json,BagOfPrimitives.class);assertEquals(expected,actual);}"
"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilSerialization",0,"public void testVersionedGsonMixingSinceAndUntilSerialization(){Gson gson=builder.setVersion(1.0).create();SinceUntilMixing target=new SinceUntilMixing();String json=gson.toJson(target);assertFalse(json.contains(""\""b\"":"" + B));gson=builder.setVersion(1.2).create();json=gson.toJson(target);assertTrue(json.contains(""\""b\"":"" + B));gson=builder.setVersion(1.3).create();json=gson.toJson(target);assertFalse(json.contains(""\""b\"":"" + B));}"
"com.google.gson.functional.VersioningTest.testVersionedGsonMixingSinceAndUntilDeserialization",0,"public void testVersionedGsonMixingSinceAndUntilDeserialization(){String json=""{\""a\"":5,\""b\"":6}"";Gson gson=builder.setVersion(1.0).create();SinceUntilMixing result=gson.fromJson(json,SinceUntilMixing.class);assertEquals(5,result.a);assertEquals(B,result.b);gson=builder.setVersion(1.2).create();result=gson.fromJson(json,SinceUntilMixing.class);assertEquals(5,result.a);assertEquals(6,result.b);gson=builder.setVersion(1.3).create();result=gson.fromJson(json,SinceUntilMixing.class);assertEquals(5,result.a);assertEquals(B,result.b);}"
"com.google.gson.JsonObjectTest.testAddingAndRemovingObjectProperties",0,"public void testAddingAndRemovingObjectProperties()throws Exception {JsonObject jsonObj=new JsonObject();String propertyName=""property"";assertFalse(jsonObj.has(propertyName));assertNull(jsonObj.get(propertyName));JsonPrimitive value=new JsonPrimitive(""blah"");jsonObj.add(propertyName,value);assertEquals(value,jsonObj.get(propertyName));JsonElement removedElement=jsonObj.remove(propertyName);assertEquals(value,removedElement);assertFalse(jsonObj.has(propertyName));assertNull(jsonObj.get(propertyName));}"
"com.google.gson.JsonObjectTest.testAddingNullPropertyValue",0,"public void testAddingNullPropertyValue()throws Exception {String propertyName=""property"";JsonObject jsonObj=new JsonObject();jsonObj.add(propertyName,null);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertTrue(jsonElement.isJsonNull());}"
"com.google.gson.JsonObjectTest.testAddingNullOrEmptyPropertyName",0,"public void testAddingNullOrEmptyPropertyName()throws Exception {JsonObject jsonObj=new JsonObject();try {jsonObj.add(null,JsonNull.INSTANCE);fail(""Should not allow null property names."");}catch(NullPointerException expected){}jsonObj.add("""",JsonNull.INSTANCE);jsonObj.add(""   \t"",JsonNull.INSTANCE);}"
"com.google.gson.JsonObjectTest.testAddingBooleanProperties",0,"public void testAddingBooleanProperties()throws Exception {String propertyName=""property"";JsonObject jsonObj=new JsonObject();jsonObj.addProperty(propertyName,true);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertTrue(jsonElement.getAsBoolean());}"
"com.google.gson.JsonObjectTest.testAddingStringProperties",0,"public void testAddingStringProperties()throws Exception {String propertyName=""property"";String value=""blah"";JsonObject jsonObj=new JsonObject();jsonObj.addProperty(propertyName,value);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertEquals(value,jsonElement.getAsString());}"
"com.google.gson.JsonObjectTest.testAddingCharacterProperties",0,"public void testAddingCharacterProperties()throws Exception {String propertyName=""property"";char value='a';JsonObject jsonObj=new JsonObject();jsonObj.addProperty(propertyName,value);assertTrue(jsonObj.has(propertyName));JsonElement jsonElement=jsonObj.get(propertyName);assertNotNull(jsonElement);assertEquals(String.valueOf(value),jsonElement.getAsString());assertEquals(value,jsonElement.getAsCharacter());}"
"com.google.gson.JsonObjectTest.testPropertyWithQuotes",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=182*/public void testPropertyWithQuotes(){JsonObject jsonObj=new JsonObject();jsonObj.add(""a\""b"",new JsonPrimitive(""c\""d""));String json=new Gson().toJson(jsonObj);assertEquals(""{\""a\\\""b\"":\""c\\\""d\""}"",json);}"
"com.google.gson.JsonObjectTest.testWritePropertyWithEmptyStringName",0,"/** * From issue 227.*/public void testWritePropertyWithEmptyStringName(){JsonObject jsonObj=new JsonObject();jsonObj.add("""",new JsonPrimitive(true));assertEquals(""{\""\"":true}"",new Gson().toJson(jsonObj));}"
"com.google.gson.JsonObjectTest.testReadPropertyWithEmptyStringName",0,"public void testReadPropertyWithEmptyStringName(){JsonObject jsonObj=new JsonParser().parse(""{\""\"":true}"").getAsJsonObject();assertEquals(true,jsonObj.get("""").getAsBoolean());}"
"com.google.gson.JsonObjectTest.testEqualsOnEmptyObject",0,"public void testEqualsOnEmptyObject(){MoreAsserts.assertEqualsAndHashCode(new JsonObject(),new JsonObject());}"
"com.google.gson.JsonObjectTest.testEqualsNonEmptyObject",0,"public void testEqualsNonEmptyObject(){JsonObject a=new JsonObject();JsonObject b=new JsonObject();assertEquals(a,a);a.add(""foo"",new JsonObject());assertFalse(a.equals(b));assertFalse(b.equals(a));b.add(""foo"",new JsonObject());MoreAsserts.assertEqualsAndHashCode(a,b);a.add(""bar"",new JsonObject());assertFalse(a.equals(b));assertFalse(b.equals(a));b.add(""bar"",JsonNull.INSTANCE);assertFalse(a.equals(b));assertFalse(b.equals(a));}"
"com.google.gson.JsonObjectTest.testDeepCopy",0,"public void testDeepCopy(){JsonObject original=new JsonObject();JsonArray firstEntry=new JsonArray();original.add(""key"",firstEntry);JsonObject copy=original.deepCopy();firstEntry.add(new JsonPrimitive(""z""));assertEquals(1,original.get(""key"").getAsJsonArray().size());assertEquals(0,copy.get(""key"").getAsJsonArray().size());}"
"com.google.gson.functional.ObjectTest.testJsonInSingleQuotesDeserialization",0,"public void testJsonInSingleQuotesDeserialization(){String json=""{'stringValue':'no message','intValue':10,'longValue':20}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""no message"",target.stringValue);assertEquals(10,target.intValue);assertEquals(20,target.longValue);}"
"com.google.gson.functional.ObjectTest.testJsonInMixedQuotesDeserialization",0,"public void testJsonInMixedQuotesDeserialization(){String json=""{\""stringValue\"":'no message','intValue':10,'longValue':20}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""no message"",target.stringValue);assertEquals(10,target.intValue);assertEquals(20,target.longValue);}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitivesSerialization",0,"public void testBagOfPrimitivesSerialization()throws Exception {BagOfPrimitives target=new BagOfPrimitives(10,20,false,""stringValue"");assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitivesDeserialization",0,"public void testBagOfPrimitivesDeserialization()throws Exception {BagOfPrimitives src=new BagOfPrimitives(10,20,false,""stringValue"");String json=src.getExpectedJson();BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersSerialization",0,"public void testBagOfPrimitiveWrappersSerialization()throws Exception {BagOfPrimitiveWrappers target=new BagOfPrimitiveWrappers(10L,20,false);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testBagOfPrimitiveWrappersDeserialization",0,"public void testBagOfPrimitiveWrappersDeserialization()throws Exception {BagOfPrimitiveWrappers target=new BagOfPrimitiveWrappers(10L,20,false);String jsonString=target.getExpectedJson();target=gson.fromJson(jsonString,BagOfPrimitiveWrappers.class);assertEquals(jsonString,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsSerialization",0,"public void testClassWithTransientFieldsSerialization()throws Exception {ClassWithTransientFields<Long> target=new ClassWithTransientFields<Long>(1L);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserialization",0,"@SuppressWarnings(""rawtypes"")public void testClassWithTransientFieldsDeserialization()throws Exception {String json=""{\""longValue\"":[1]}"";ClassWithTransientFields target=gson.fromJson(json,ClassWithTransientFields.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored",0,"@SuppressWarnings(""rawtypes"")public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()throws Exception {String json=""{\""transientLongValue\"":1,\""longValue\"":[1]}"";ClassWithTransientFields target=gson.fromJson(json,ClassWithTransientFields.class);assertFalse(target.transientLongValue != 1);}"
"com.google.gson.functional.ObjectTest.testClassWithNoFieldsSerialization",0,"public void testClassWithNoFieldsSerialization()throws Exception {assertEquals(""{}"",gson.toJson(new ClassWithNoFields()));}"
"com.google.gson.functional.ObjectTest.testClassWithNoFieldsDeserialization",0,"public void testClassWithNoFieldsDeserialization()throws Exception {String json=""{}"";ClassWithNoFields target=gson.fromJson(json,ClassWithNoFields.class);ClassWithNoFields expected=new ClassWithNoFields();assertEquals(expected,target);}"
"com.google.gson.functional.ObjectTest.testNestedSerialization",0,"public void testNestedSerialization()throws Exception {Nested target=new Nested(new BagOfPrimitives(10,20,false,""stringValue""),new BagOfPrimitives(30,40,true,""stringValue""));assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testNestedDeserialization",0,"public void testNestedDeserialization()throws Exception {String json=""{\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false,"" + ""\""stringValue\"":\""stringValue\""},\""primitive2\"":{\""longValue\"":30,\""intValue\"":40,"" + ""\""booleanValue\"":true,\""stringValue\"":\""stringValue\""}}"";Nested target=gson.fromJson(json,Nested.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testNullSerialization",0,"public void testNullSerialization()throws Exception {assertEquals(""null"",gson.toJson(null));}"
"com.google.gson.functional.ObjectTest.testEmptyStringDeserialization",0,"public void testEmptyStringDeserialization()throws Exception {Object object=gson.fromJson("""",Object.class);assertNull(object);}"
"com.google.gson.functional.ObjectTest.testTruncatedDeserialization",0,"public void testTruncatedDeserialization(){try {gson.fromJson(""[\""a\"",\""b\"","",new TypeToken<List<String>>(){}.getType());fail();}catch(JsonParseException expected){}}"
"com.google.gson.functional.ObjectTest.testNullDeserialization",0,"public void testNullDeserialization()throws Exception {String myNullObject=null;Object object=gson.fromJson(myNullObject,Object.class);assertNull(object);}"
"com.google.gson.functional.ObjectTest.testNullFieldsSerialization",0,"public void testNullFieldsSerialization()throws Exception {Nested target=new Nested(new BagOfPrimitives(10,20,false,""stringValue""),null);assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testNullFieldsDeserialization",0,"public void testNullFieldsDeserialization()throws Exception {String json=""{\""primitive1\"":{\""longValue\"":10,\""intValue\"":20,\""booleanValue\"":false"" + "",\""stringValue\"":\""stringValue\""}}"";Nested target=gson.fromJson(json,Nested.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testArrayOfObjectsSerialization",0,"public void testArrayOfObjectsSerialization()throws Exception {ArrayOfObjects target=new ArrayOfObjects();assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testArrayOfObjectsDeserialization",0,"public void testArrayOfObjectsDeserialization()throws Exception {String json=new ArrayOfObjects().getExpectedJson();ArrayOfObjects target=gson.fromJson(json,ArrayOfObjects.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testArrayOfArraysSerialization",0,"public void testArrayOfArraysSerialization()throws Exception {ArrayOfArrays target=new ArrayOfArrays();assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testArrayOfArraysDeserialization",0,"public void testArrayOfArraysDeserialization()throws Exception {String json=new ArrayOfArrays().getExpectedJson();ArrayOfArrays target=gson.fromJson(json,ArrayOfArrays.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testArrayOfObjectsAsFields",0,"public void testArrayOfObjectsAsFields()throws Exception {ClassWithObjects classWithObjects=new ClassWithObjects();BagOfPrimitives bagOfPrimitives=new BagOfPrimitives();String stringValue=""someStringValueInArray"";String classWithObjectsJson=gson.toJson(classWithObjects);String bagOfPrimitivesJson=gson.toJson(bagOfPrimitives);ClassWithArray classWithArray=new ClassWithArray(new Object[]{stringValue,classWithObjects,bagOfPrimitives});String json=gson.toJson(classWithArray);assertTrue(json.contains(classWithObjectsJson));assertTrue(json.contains(bagOfPrimitivesJson));assertTrue(json.contains(""\"""" + stringValue + ""\""""));}"
"com.google.gson.functional.ObjectTest.testNullArraysDeserialization",0,"/** * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14*/public void testNullArraysDeserialization()throws Exception {String json=""{\""array\"": null}"";ClassWithArray target=gson.fromJson(json,ClassWithArray.class);assertNull(target.array);}"
"com.google.gson.functional.ObjectTest.testNullObjectFieldsDeserialization",0,"/** * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14*/public void testNullObjectFieldsDeserialization()throws Exception {String json=""{\""bag\"": null}"";ClassWithObjects target=gson.fromJson(json,ClassWithObjects.class);assertNull(target.bag);}"
"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectDeserialization",0,"public void testEmptyCollectionInAnObjectDeserialization()throws Exception {String json=""{\""children\"":[]}"";ClassWithCollectionField target=gson.fromJson(json,ClassWithCollectionField.class);assertNotNull(target);assertTrue(target.children.isEmpty());}"
"com.google.gson.functional.ObjectTest.testPrimitiveArrayInAnObjectDeserialization",0,"public void testPrimitiveArrayInAnObjectDeserialization()throws Exception {String json=""{\""longArray\"":[0,1,2,3,4,5,6,7,8,9]}"";PrimitiveArray target=gson.fromJson(json,PrimitiveArray.class);assertEquals(json,target.getExpectedJson());}"
"com.google.gson.functional.ObjectTest.testNullPrimitiveFieldsDeserialization",0,"/** * Created in response to Issue 14: http://code.google.com/p/google-gson/issues/detail?id=14*/public void testNullPrimitiveFieldsDeserialization()throws Exception {String json=""{\""longValue\"":null}"";BagOfPrimitives target=gson.fromJson(json,BagOfPrimitives.class);assertEquals(BagOfPrimitives.DEFAULT_VALUE,target.longValue);}"
"com.google.gson.functional.ObjectTest.testEmptyCollectionInAnObjectSerialization",0,"public void testEmptyCollectionInAnObjectSerialization()throws Exception {ClassWithCollectionField target=new ClassWithCollectionField();assertEquals(""{\""children\"":[]}"",gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testPrivateNoArgConstructorDeserialization",0,"public void testPrivateNoArgConstructorDeserialization()throws Exception {ClassWithPrivateNoArgsConstructor target=gson.fromJson(""{\""a\"":20}"",ClassWithPrivateNoArgsConstructor.class);assertEquals(20,target.a);}"
"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesSerialization",0,"public void testAnonymousLocalClassesSerialization()throws Exception {assertEquals(""null"",gson.toJson(new ClassWithNoFields(){}));}"
"com.google.gson.functional.ObjectTest.testAnonymousLocalClassesCustomSerialization",0,"public void testAnonymousLocalClassesCustomSerialization()throws Exception {gson=new GsonBuilder().registerTypeHierarchyAdapter(ClassWithNoFields.class,new JsonSerializer<ClassWithNoFields>(){public JsonElement serialize(ClassWithNoFields src,Type typeOfSrc,JsonSerializationContext context){return new JsonObject();}}).create();assertEquals(""null"",gson.toJson(new ClassWithNoFields(){}));}"
"com.google.gson.functional.ObjectTest.testPrimitiveArrayFieldSerialization",0,"public void testPrimitiveArrayFieldSerialization(){PrimitiveArray target=new PrimitiveArray(new long[]{1L,2L,3L});assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.ObjectTest.testClassWithObjectFieldSerialization",0,"/** * Tests that a class field with type Object can be serialized properly. See issue 54*/public void testClassWithObjectFieldSerialization(){ClassWithObjectField obj=new ClassWithObjectField();obj.member=""abc"";String json=gson.toJson(obj);assertTrue(json.contains(""abc""));}"
"com.google.gson.functional.ObjectTest.testInnerClassSerialization",0,"public void testInnerClassSerialization(){Parent p=new Parent();Parent.Child c=p.new Child();String json=gson.toJson(c);assertTrue(json.contains(""value2""));assertFalse(json.contains(""value1""));}"
"com.google.gson.functional.ObjectTest.testInnerClassDeserialization",0,"public void testInnerClassDeserialization(){final Parent p=new Parent();Gson gson=new GsonBuilder().registerTypeAdapter(Parent.Child.class,new InstanceCreator<Parent.Child>(){public Parent.Child createInstance(Type type){return p.new Child();}}).create();String json=""{'value2':3}"";Parent.Child c=gson.fromJson(json,Parent.Child.class);assertEquals(3,c.value2);}"
"com.google.gson.functional.ObjectTest.testObjectFieldNamesWithoutQuotesDeserialization",0,"/** * In response to Issue 41 http://code.google.com/p/google-gson/issues/detail?id=41*/public void testObjectFieldNamesWithoutQuotesDeserialization(){String json=""{longValue:1,'booleanValue':true,\""stringValue\"":'bar'}"";BagOfPrimitives bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(1,bag.longValue);assertTrue(bag.booleanValue);assertEquals(""bar"",bag.stringValue);}"
"com.google.gson.functional.ObjectTest.testStringFieldWithNumberValueDeserialization",0,"public void testStringFieldWithNumberValueDeserialization(){String json=""{\""stringValue\"":1}"";BagOfPrimitives bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""1"",bag.stringValue);json=""{\""stringValue\"":1.5E+6}"";bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""1.5E+6"",bag.stringValue);json=""{\""stringValue\"":true}"";bag=gson.fromJson(json,BagOfPrimitives.class);assertEquals(""true"",bag.stringValue);}"
"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueSerialization",0,"/** * Created to reproduce issue 140*/public void testStringFieldWithEmptyValueSerialization(){ClassWithEmptyStringFields target=new ClassWithEmptyStringFields();target.a=""5794749"";String json=gson.toJson(target);assertTrue(json.contains(""\""a\"":\""5794749\""""));assertTrue(json.contains(""\""b\"":\""\""""));assertTrue(json.contains(""\""c\"":\""\""""));}"
"com.google.gson.functional.ObjectTest.testStringFieldWithEmptyValueDeserialization",0,"/** * Created to reproduce issue 140*/public void testStringFieldWithEmptyValueDeserialization(){String json=""{a:\""5794749\"",b:\""\"",c:\""\""}"";ClassWithEmptyStringFields target=gson.fromJson(json,ClassWithEmptyStringFields.class);assertEquals(""5794749"",target.a);assertEquals("""",target.b);assertEquals("""",target.c);}"
"com.google.gson.functional.ObjectTest.testJsonObjectSerialization",0,"public void testJsonObjectSerialization(){Gson gson=new GsonBuilder().serializeNulls().create();JsonObject obj=new JsonObject();String json=gson.toJson(obj);assertEquals(""{}"",json);}"
"com.google.gson.functional.ObjectTest.testSingletonLists",0,"/** * Test for issue 215.*/public void testSingletonLists(){Gson gson=new Gson();Product product=new Product();assertEquals(""{\""attributes\"":[],\""departments\"":[]}"",gson.toJson(product));gson.fromJson(gson.toJson(product),Product.class);product.departments.add(new Department());assertEquals(""{\""attributes\"":[],\""departments\"":[{\""name\"":\""abc\"",\""code\"":\""123\""}]}"",gson.toJson(product));gson.fromJson(gson.toJson(product),Product.class);product.attributes.add(""456"");assertEquals(""{\""attributes\"":[\""456\""],\""departments\"":[{\""name\"":\""abc\"",\""code\"":\""123\""}]}"",gson.toJson(product));gson.fromJson(gson.toJson(product),Product.class);}"
"com.google.gson.functional.ObjectTest.testDateAsMapObjectField",0,"public void testDateAsMapObjectField(){HasObjectMap a=new HasObjectMap();a.map.put(""date"",new Date(0));assertEquals(""{\""map\"":{\""date\"":\""Dec 31,1969 4:00:00 PM\""}}"",gson.toJson(a));}"
"com.google.gson.stream.JsonReaderTest.testReadArray",0,"public void testReadArray()throws IOException {JsonReader reader=new JsonReader(reader(""[true,true]""));reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(true,reader.nextBoolean());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testReadEmptyArray",0,"public void testReadEmptyArray()throws IOException {JsonReader reader=new JsonReader(reader(""[]""));reader.beginArray();assertFalse(reader.hasNext());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testReadObject",0,"public void testReadObject()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"": \""android\"",\""b\"": \""banana\""}""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(""android"",reader.nextString());assertEquals(""b"",reader.nextName());assertEquals(""banana"",reader.nextString());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testReadEmptyObject",0,"public void testReadEmptyObject()throws IOException {JsonReader reader=new JsonReader(reader(""{}""));reader.beginObject();assertFalse(reader.hasNext());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipArray",0,"public void testSkipArray()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"": [\""one\"",\""two\"",\""three\""],\""b\"": 123}""));reader.beginObject();assertEquals(""a"",reader.nextName());reader.skipValue();assertEquals(""b"",reader.nextName());assertEquals(123,reader.nextInt());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipArrayAfterPeek",0,"public void testSkipArrayAfterPeek()throws Exception {JsonReader reader=new JsonReader(reader(""{\""a\"": [\""one\"",\""two\"",\""three\""],\""b\"": 123}""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(BEGIN_ARRAY,reader.peek());reader.skipValue();assertEquals(""b"",reader.nextName());assertEquals(123,reader.nextInt());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipTopLevelObject",0,"public void testSkipTopLevelObject()throws Exception {JsonReader reader=new JsonReader(reader(""{\""a\"": [\""one\"",\""two\"",\""three\""],\""b\"": 123}""));reader.skipValue();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipObject",0,"public void testSkipObject()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":{\""c\"": [],\""d\"": [true,true,{}]},\""b\"": \""banana\""}""));reader.beginObject();assertEquals(""a"",reader.nextName());reader.skipValue();assertEquals(""b"",reader.nextName());reader.skipValue();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipObjectAfterPeek",0,"public void testSkipObjectAfterPeek()throws Exception {String json=""{"" + ""  \""one\"":{\""num\"": 1 }"" + "",\""two\"":{\""num\"": 2 }""+ "",\""three\"":{\""num\"": 3 }""+ ""}"";JsonReader reader=new JsonReader(reader(json));reader.beginObject();assertEquals(""one"",reader.nextName());assertEquals(BEGIN_OBJECT,reader.peek());reader.skipValue();assertEquals(""two"",reader.nextName());assertEquals(BEGIN_OBJECT,reader.peek());reader.skipValue();assertEquals(""three"",reader.nextName());reader.skipValue();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipInteger",0,"public void testSkipInteger()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":123456789,\""b\"":-123456789}""));reader.beginObject();assertEquals(""a"",reader.nextName());reader.skipValue();assertEquals(""b"",reader.nextName());reader.skipValue();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipDouble",0,"public void testSkipDouble()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":-123.456e-789,\""b\"":123456789.0}""));reader.beginObject();assertEquals(""a"",reader.nextName());reader.skipValue();assertEquals(""b"",reader.nextName());reader.skipValue();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testHelloWorld",0,"public void testHelloWorld()throws IOException {String json=""{\n"" + ""   \""hello\"": true,\n"" + ""   \""foo\"": [\""world\""]\n""+ ""}"";JsonReader reader=new JsonReader(reader(json));reader.beginObject();assertEquals(""hello"",reader.nextName());assertEquals(true,reader.nextBoolean());assertEquals(""foo"",reader.nextName());reader.beginArray();assertEquals(""world"",reader.nextString());reader.endArray();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testNulls",0,"public void testNulls(){try {new JsonReader(null);fail();}catch(NullPointerException expected){}}"
"com.google.gson.stream.JsonReaderTest.testEmptyString",0,"public void testEmptyString(){try {new JsonReader(reader("""")).beginArray();fail();}catch(IOException expected){}try {new JsonReader(reader("""")).beginObject();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testCharacterUnescaping",0,"public void testCharacterUnescaping()throws IOException {String json=""[\""a\"","" + ""\""a\\\""\"","" + ""\""\\\""\"",""+ ""\"":\"",""+ ""\"",\"",""+ ""\""\\b\"",""+ ""\""\\f\"",""+ ""\""\\n\"",""+ ""\""\\r\"",""+ ""\""\\t\"",""+ ""\"" \"",""+ ""\""\\\\\"",""+ ""\""{\"",""+ ""\""}\"",""+ ""\""[\"",""+ ""\""]\"",""+ ""\""\\u0000\"",""+ ""\""\\u0019\"",""+ ""\""\\u20AC\""""+ ""]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();assertEquals(""a"",reader.nextString());assertEquals(""a\"""",reader.nextString());assertEquals(""\"""",reader.nextString());assertEquals("":"",reader.nextString());assertEquals("","",reader.nextString());assertEquals(""\b"",reader.nextString());assertEquals(""\f"",reader.nextString());assertEquals(""\n"",reader.nextString());assertEquals(""\r"",reader.nextString());assertEquals(""\t"",reader.nextString());assertEquals("" "",reader.nextString());assertEquals(""\\"",reader.nextString());assertEquals(""{"",reader.nextString());assertEquals(""}"",reader.nextString());assertEquals(""["",reader.nextString());assertEquals(""]"",reader.nextString());assertEquals(""\0"",reader.nextString());assertEquals(""\u0019"",reader.nextString());assertEquals(""\u20AC"",reader.nextString());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testUnescapingInvalidCharacters",0,"public void testUnescapingInvalidCharacters()throws IOException {String json=""[\""\\u000g\""]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();try {reader.nextString();fail();}catch(NumberFormatException expected){}}"
"com.google.gson.stream.JsonReaderTest.testUnescapingTruncatedCharacters",0,"public void testUnescapingTruncatedCharacters()throws IOException {String json=""[\""\\u000"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testUnescapingTruncatedSequence",0,"public void testUnescapingTruncatedSequence()throws IOException {String json=""[\""\\"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testIntegersWithFractionalPartSpecified",0,"public void testIntegersWithFractionalPartSpecified()throws IOException {JsonReader reader=new JsonReader(reader(""[1.0,1.0,1.0]""));reader.beginArray();assertEquals(1.0,reader.nextDouble());assertEquals(1,reader.nextInt());assertEquals(1L,reader.nextLong());}"
"com.google.gson.stream.JsonReaderTest.testDoubles",0,"public void testDoubles()throws IOException {String json=""[-0.0,"" + ""1.0,"" + ""1.7976931348623157E308,""+ ""4.9E-324,""+ ""0.0,""+ ""-0.5,""+ ""2.2250738585072014E-308,""+ ""3.141592653589793,""+ ""2.718281828459045]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();assertEquals(-0.0,reader.nextDouble());assertEquals(1.0,reader.nextDouble());assertEquals(1.7976931348623157E308,reader.nextDouble());assertEquals(4.9E-324,reader.nextDouble());assertEquals(0.0,reader.nextDouble());assertEquals(-0.5,reader.nextDouble());assertEquals(2.2250738585072014E-308,reader.nextDouble());assertEquals(3.141592653589793,reader.nextDouble());assertEquals(2.718281828459045,reader.nextDouble());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoubles",0,"public void testStrictNonFiniteDoubles()throws IOException {String json=""[NaN]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();try {reader.nextDouble();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictQuotedNonFiniteDoubles",0,"public void testStrictQuotedNonFiniteDoubles()throws IOException {String json=""[\""NaN\""]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();try {reader.nextDouble();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientNonFiniteDoubles",0,"public void testLenientNonFiniteDoubles()throws IOException {String json=""[NaN,-Infinity,Infinity]"";JsonReader reader=new JsonReader(reader(json));reader.setLenient(true);reader.beginArray();assertTrue(Double.isNaN(reader.nextDouble()));assertEquals(Double.NEGATIVE_INFINITY,reader.nextDouble());assertEquals(Double.POSITIVE_INFINITY,reader.nextDouble());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testLenientQuotedNonFiniteDoubles",0,"public void testLenientQuotedNonFiniteDoubles()throws IOException {String json=""[\""NaN\"",\""-Infinity\"",\""Infinity\""]"";JsonReader reader=new JsonReader(reader(json));reader.setLenient(true);reader.beginArray();assertTrue(Double.isNaN(reader.nextDouble()));assertEquals(Double.NEGATIVE_INFINITY,reader.nextDouble());assertEquals(Double.POSITIVE_INFINITY,reader.nextDouble());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testStrictNonFiniteDoublesWithSkipValue",0,"public void testStrictNonFiniteDoublesWithSkipValue()throws IOException {String json=""[NaN]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();try {reader.skipValue();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLongs",0,"public void testLongs()throws IOException {String json=""[0,0,0,"" + ""1,1,1,"" + ""-1,-1,-1,""+ ""-9223372036854775808,""+ ""9223372036854775807]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();assertEquals(0L,reader.nextLong());assertEquals(0,reader.nextInt());assertEquals(0.0,reader.nextDouble());assertEquals(1L,reader.nextLong());assertEquals(1,reader.nextInt());assertEquals(1.0,reader.nextDouble());assertEquals(-1L,reader.nextLong());assertEquals(-1,reader.nextInt());assertEquals(-1.0,reader.nextDouble());try {reader.nextInt();fail();}catch(NumberFormatException expected){}assertEquals(Long.MIN_VALUE,reader.nextLong());try {reader.nextInt();fail();}catch(NumberFormatException expected){}assertEquals(Long.MAX_VALUE,reader.nextLong());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testBooleans",0,"public void testBooleans()throws IOException {JsonReader reader=new JsonReader(reader(""[true,false]""));reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(false,reader.nextBoolean());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithBooleans",0,"public void testPeekingUnquotedStringsPrefixedWithBooleans()throws IOException {JsonReader reader=new JsonReader(reader(""[truey]""));reader.setLenient(true);reader.beginArray();assertEquals(STRING,reader.peek());try {reader.nextBoolean();fail();}catch(IllegalStateException expected){}assertEquals(""truey"",reader.nextString());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testMalformedNumbers",0,"public void testMalformedNumbers()throws IOException {assertNotANumber(""-"");assertNotANumber(""."");assertNotANumber(""e"");assertNotANumber(""0e"");assertNotANumber("".e"");assertNotANumber(""0.e"");assertNotANumber(""-.0e"");assertNotANumber(""e1"");assertNotANumber("".e1"");assertNotANumber(""-e1"");assertNotANumber(""1x"");assertNotANumber(""1.1x"");assertNotANumber(""1e1x"");assertNotANumber(""1ex"");assertNotANumber(""1.1ex"");assertNotANumber(""1.1e1x"");assertNotANumber(""0."");assertNotANumber(""-0."");assertNotANumber(""0.e1"");assertNotANumber(""-0.e1"");assertNotANumber("".0"");assertNotANumber(""-.0"");assertNotANumber("".0e1"");assertNotANumber(""-.0e1"");}"
"com.google.gson.stream.JsonReaderTest.testPeekingUnquotedStringsPrefixedWithIntegers",0,"public void testPeekingUnquotedStringsPrefixedWithIntegers()throws IOException {JsonReader reader=new JsonReader(reader(""[12.34e5x]""));reader.setLenient(true);reader.beginArray();assertEquals(STRING,reader.peek());try {reader.nextInt();fail();}catch(IllegalStateException expected){}assertEquals(""12.34e5x"",reader.nextString());}"
"com.google.gson.stream.JsonReaderTest.testPeekLongMinValue",0,"public void testPeekLongMinValue()throws IOException {JsonReader reader=new JsonReader(reader(""[-9223372036854775808]""));reader.setLenient(true);reader.beginArray();assertEquals(NUMBER,reader.peek());assertEquals(-9223372036854775808L,reader.nextLong());}"
"com.google.gson.stream.JsonReaderTest.testPeekLongMaxValue",0,"public void testPeekLongMaxValue()throws IOException {JsonReader reader=new JsonReader(reader(""[9223372036854775807]""));reader.setLenient(true);reader.beginArray();assertEquals(NUMBER,reader.peek());assertEquals(9223372036854775807L,reader.nextLong());}"
"com.google.gson.stream.JsonReaderTest.testLongLargerThanMaxLongThatWrapsAround",0,"public void testLongLargerThanMaxLongThatWrapsAround()throws IOException {JsonReader reader=new JsonReader(reader(""[22233720368547758070]""));reader.setLenient(true);reader.beginArray();assertEquals(NUMBER,reader.peek());try {reader.nextLong();fail();}catch(NumberFormatException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLongLargerThanMinLongThatWrapsAround",0,"public void testLongLargerThanMinLongThatWrapsAround()throws IOException {JsonReader reader=new JsonReader(reader(""[-22233720368547758070]""));reader.setLenient(true);reader.beginArray();assertEquals(NUMBER,reader.peek());try {reader.nextLong();fail();}catch(NumberFormatException expected){}}"
"com.google.gson.stream.JsonReaderTest.testPeekMuchLargerThanLongMinValue",0,"public void testPeekMuchLargerThanLongMinValue()throws IOException {JsonReader reader=new JsonReader(reader(""[-92233720368547758080]""));reader.setLenient(true);reader.beginArray();assertEquals(NUMBER,reader.peek());try {reader.nextLong();fail();}catch(NumberFormatException expected){}assertEquals(-92233720368547758080d,reader.nextDouble());}"
"com.google.gson.stream.JsonReaderTest.testQuotedNumberWithEscape",0,"public void testQuotedNumberWithEscape()throws IOException {JsonReader reader=new JsonReader(reader(""[\""12\u00334\""]""));reader.setLenient(true);reader.beginArray();assertEquals(STRING,reader.peek());assertEquals(1234,reader.nextInt());}"
"com.google.gson.stream.JsonReaderTest.testMixedCaseLiterals",0,"public void testMixedCaseLiterals()throws IOException {JsonReader reader=new JsonReader(reader(""[True,TruE,False,FALSE,NULL,nulL]""));reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(true,reader.nextBoolean());assertEquals(false,reader.nextBoolean());assertEquals(false,reader.nextBoolean());reader.nextNull();reader.nextNull();reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testMissingValue",0,"public void testMissingValue()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testPrematureEndOfInput",0,"public void testPrematureEndOfInput()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":true,""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());try {reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testPrematurelyClosed",0,"public void testPrematurelyClosed()throws IOException {try {JsonReader reader=new JsonReader(reader(""{\""a\"":[]}""));reader.beginObject();reader.close();reader.nextName();fail();}catch(IllegalStateException expected){}try {JsonReader reader=new JsonReader(reader(""{\""a\"":[]}""));reader.close();reader.beginObject();fail();}catch(IllegalStateException expected){}try {JsonReader reader=new JsonReader(reader(""{\""a\"":true}""));reader.beginObject();reader.nextName();reader.peek();reader.close();reader.nextBoolean();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonReaderTest.testNextFailuresDoNotAdvance",0,"public void testNextFailuresDoNotAdvance()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":true}""));reader.beginObject();try {reader.nextString();fail();}catch(IllegalStateException expected){}assertEquals(""a"",reader.nextName());try {reader.nextName();fail();}catch(IllegalStateException expected){}try {reader.beginArray();fail();}catch(IllegalStateException expected){}try {reader.endArray();fail();}catch(IllegalStateException expected){}try {reader.beginObject();fail();}catch(IllegalStateException expected){}try {reader.endObject();fail();}catch(IllegalStateException expected){}assertEquals(true,reader.nextBoolean());try {reader.nextString();fail();}catch(IllegalStateException expected){}try {reader.nextName();fail();}catch(IllegalStateException expected){}try {reader.beginArray();fail();}catch(IllegalStateException expected){}try {reader.endArray();fail();}catch(IllegalStateException expected){}reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());reader.close();}"
"com.google.gson.stream.JsonReaderTest.testIntegerMismatchFailuresDoNotAdvance",0,"public void testIntegerMismatchFailuresDoNotAdvance()throws IOException {JsonReader reader=new JsonReader(reader(""[1.5]""));reader.beginArray();try {reader.nextInt();fail();}catch(NumberFormatException expected){}assertEquals(1.5d,reader.nextDouble());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testStringNullIsNotNull",0,"public void testStringNullIsNotNull()throws IOException {JsonReader reader=new JsonReader(reader(""[\""null\""]""));reader.beginArray();try {reader.nextNull();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonReaderTest.testNullLiteralIsNotAString",0,"public void testNullLiteralIsNotAString()throws IOException {JsonReader reader=new JsonReader(reader(""[null]""));reader.beginArray();try {reader.nextString();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparator",0,"public void testStrictNameValueSeparator()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\""=true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextBoolean();fail();}catch(IOException expected){}reader=new JsonReader(reader(""{\""a\""=>true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientNameValueSeparator",0,"public void testLenientNameValueSeparator()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\""=true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());reader=new JsonReader(reader(""{\""a\""=>true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictNameValueSeparatorWithSkipValue",0,"public void testStrictNameValueSeparatorWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\""=true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.skipValue();fail();}catch(IOException expected){}reader=new JsonReader(reader(""{\""a\""=>true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testCommentsInStringValue",0,"public void testCommentsInStringValue()throws Exception {JsonReader reader=new JsonReader(reader(""[\""// comment\""]""));reader.beginArray();assertEquals(""// comment"",reader.nextString());reader.endArray();reader=new JsonReader(reader(""{\""a\"":\""#someComment\""}""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(""#someComment"",reader.nextString());reader.endObject();reader=new JsonReader(reader(""{\""#//a\"":\""#some //Comment\""}""));reader.beginObject();assertEquals(""#//a"",reader.nextName());assertEquals(""#some //Comment"",reader.nextString());reader.endObject();}"
"com.google.gson.stream.JsonReaderTest.testStrictComments",0,"public void testStrictComments()throws IOException {JsonReader reader=new JsonReader(reader(""[// comment \n true]""));reader.beginArray();try {reader.nextBoolean();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[# comment \n true]""));reader.beginArray();try {reader.nextBoolean();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[/* comment */ true]""));reader.beginArray();try {reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientComments",0,"public void testLenientComments()throws IOException {JsonReader reader=new JsonReader(reader(""[// comment \n true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader=new JsonReader(reader(""[# comment \n true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader=new JsonReader(reader(""[/* comment */ true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictCommentsWithSkipValue",0,"public void testStrictCommentsWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""[// comment \n true]""));reader.beginArray();try {reader.skipValue();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[# comment \n true]""));reader.beginArray();try {reader.skipValue();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[/* comment */ true]""));reader.beginArray();try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictUnquotedNames",0,"public void testStrictUnquotedNames()throws IOException {JsonReader reader=new JsonReader(reader(""{a:true}""));reader.beginObject();try {reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientUnquotedNames",0,"public void testLenientUnquotedNames()throws IOException {JsonReader reader=new JsonReader(reader(""{a:true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());}"
"com.google.gson.stream.JsonReaderTest.testStrictUnquotedNamesWithSkipValue",0,"public void testStrictUnquotedNamesWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""{a:true}""));reader.beginObject();try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNames",0,"public void testStrictSingleQuotedNames()throws IOException {JsonReader reader=new JsonReader(reader(""{'a':true}""));reader.beginObject();try {reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedNames",0,"public void testLenientSingleQuotedNames()throws IOException {JsonReader reader=new JsonReader(reader(""{'a':true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());}"
"com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedNamesWithSkipValue",0,"public void testStrictSingleQuotedNamesWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""{'a':true}""));reader.beginObject();try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictUnquotedStrings",0,"public void testStrictUnquotedStrings()throws IOException {JsonReader reader=new JsonReader(reader(""[a]""));reader.beginArray();try {reader.nextString();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictUnquotedStringsWithSkipValue",0,"public void testStrictUnquotedStringsWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""[a]""));reader.beginArray();try {reader.skipValue();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientUnquotedStrings",0,"public void testLenientUnquotedStrings()throws IOException {JsonReader reader=new JsonReader(reader(""[a]""));reader.setLenient(true);reader.beginArray();assertEquals(""a"",reader.nextString());}"
"com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStrings",0,"public void testStrictSingleQuotedStrings()throws IOException {JsonReader reader=new JsonReader(reader(""['a']""));reader.beginArray();try {reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSingleQuotedStrings",0,"public void testLenientSingleQuotedStrings()throws IOException {JsonReader reader=new JsonReader(reader(""['a']""));reader.setLenient(true);reader.beginArray();assertEquals(""a"",reader.nextString());}"
"com.google.gson.stream.JsonReaderTest.testStrictSingleQuotedStringsWithSkipValue",0,"public void testStrictSingleQuotedStringsWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""['a']""));reader.beginArray();try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArray",0,"public void testStrictSemicolonDelimitedArray()throws IOException {JsonReader reader=new JsonReader(reader(""[true;true]""));reader.beginArray();try {reader.nextBoolean();reader.nextBoolean();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedArray",0,"public void testLenientSemicolonDelimitedArray()throws IOException {JsonReader reader=new JsonReader(reader(""[true;true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());assertEquals(true,reader.nextBoolean());}"
"com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedArrayWithSkipValue",0,"public void testStrictSemicolonDelimitedArrayWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""[true;true]""));reader.beginArray();try {reader.skipValue();reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePair",0,"public void testStrictSemicolonDelimitedNameValuePair()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":true;\""b\"":true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.nextBoolean();reader.nextName();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientSemicolonDelimitedNameValuePair",0,"public void testLenientSemicolonDelimitedNameValuePair()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":true;\""b\"":true}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(true,reader.nextBoolean());assertEquals(""b"",reader.nextName());}"
"com.google.gson.stream.JsonReaderTest.testStrictSemicolonDelimitedNameValuePairWithSkipValue",0,"public void testStrictSemicolonDelimitedNameValuePairWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":true;\""b\"":true}""));reader.beginObject();assertEquals(""a"",reader.nextName());try {reader.skipValue();reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparators",0,"public void testStrictUnnecessaryArraySeparators()throws IOException {JsonReader reader=new JsonReader(reader(""[true,,true]""));reader.beginArray();assertEquals(true,reader.nextBoolean());try {reader.nextNull();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[,true]""));reader.beginArray();try {reader.nextNull();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[true,]""));reader.beginArray();assertEquals(true,reader.nextBoolean());try {reader.nextNull();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[,]""));reader.beginArray();try {reader.nextNull();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientUnnecessaryArraySeparators",0,"public void testLenientUnnecessaryArraySeparators()throws IOException {JsonReader reader=new JsonReader(reader(""[true,,true]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader.nextNull();assertEquals(true,reader.nextBoolean());reader.endArray();reader=new JsonReader(reader(""[,true]""));reader.setLenient(true);reader.beginArray();reader.nextNull();assertEquals(true,reader.nextBoolean());reader.endArray();reader=new JsonReader(reader(""[true,]""));reader.setLenient(true);reader.beginArray();assertEquals(true,reader.nextBoolean());reader.nextNull();reader.endArray();reader=new JsonReader(reader(""[,]""));reader.setLenient(true);reader.beginArray();reader.nextNull();reader.nextNull();reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testStrictUnnecessaryArraySeparatorsWithSkipValue",0,"public void testStrictUnnecessaryArraySeparatorsWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""[true,,true]""));reader.beginArray();assertEquals(true,reader.nextBoolean());try {reader.skipValue();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[,true]""));reader.beginArray();try {reader.skipValue();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[true,]""));reader.beginArray();assertEquals(true,reader.nextBoolean());try {reader.skipValue();fail();}catch(IOException expected){}reader=new JsonReader(reader(""[,]""));reader.beginArray();try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValues",0,"public void testStrictMultipleTopLevelValues()throws IOException {JsonReader reader=new JsonReader(reader(""[][]""));reader.beginArray();reader.endArray();try {reader.peek();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientMultipleTopLevelValues",0,"public void testLenientMultipleTopLevelValues()throws IOException {JsonReader reader=new JsonReader(reader(""[]true {}""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(true,reader.nextBoolean());reader.beginObject();reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStrictMultipleTopLevelValuesWithSkipValue",0,"public void testStrictMultipleTopLevelValuesWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""[][]""));reader.beginArray();reader.endArray();try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testTopLevelValueTypes",1,"public void testTopLevelValueTypes()throws IOException {JsonReader reader1=new JsonReader(reader(""true""));assertTrue(reader1.nextBoolean());assertEquals(JsonToken.END_DOCUMENT,reader1.peek());JsonReader reader2=new JsonReader(reader(""false""));assertFalse(reader2.nextBoolean());assertEquals(JsonToken.END_DOCUMENT,reader2.peek());JsonReader reader3=new JsonReader(reader(""null""));assertEquals(JsonToken.NULL,reader3.peek());reader3.nextNull();assertEquals(JsonToken.END_DOCUMENT,reader3.peek());JsonReader reader4=new JsonReader(reader(""123""));assertEquals(123,reader4.nextInt());assertEquals(JsonToken.END_DOCUMENT,reader4.peek());JsonReader reader5=new JsonReader(reader(""123.4""));assertEquals(123.4,reader5.nextDouble());assertEquals(JsonToken.END_DOCUMENT,reader5.peek());JsonReader reader6=new JsonReader(reader(""\""a\""""));assertEquals(""a"",reader6.nextString());assertEquals(JsonToken.END_DOCUMENT,reader6.peek());}"
"com.google.gson.stream.JsonReaderTest.testTopLevelValueTypeWithSkipValue",1,"public void testTopLevelValueTypeWithSkipValue()throws IOException {JsonReader reader=new JsonReader(reader(""true""));reader.skipValue();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefix",0,"public void testStrictNonExecutePrefix(){JsonReader reader=new JsonReader(reader("")]}'\n []""));try {reader.beginArray();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStrictNonExecutePrefixWithSkipValue",0,"public void testStrictNonExecutePrefixWithSkipValue(){JsonReader reader=new JsonReader(reader("")]}'\n []""));try {reader.skipValue();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefix",0,"public void testLenientNonExecutePrefix()throws IOException {JsonReader reader=new JsonReader(reader("")]}'\n []""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testLenientNonExecutePrefixWithLeadingWhitespace",0,"public void testLenientNonExecutePrefixWithLeadingWhitespace()throws IOException {JsonReader reader=new JsonReader(reader(""\r\n \t)]}'\n []""));reader.setLenient(true);reader.beginArray();reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testLenientPartialNonExecutePrefix",0,"public void testLenientPartialNonExecutePrefix(){JsonReader reader=new JsonReader(reader("")]}' []""));reader.setLenient(true);try {assertEquals("")"",reader.nextString());reader.nextString();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testBomIgnoredAsFirstCharacterOfDocument",0,"public void testBomIgnoredAsFirstCharacterOfDocument()throws IOException {JsonReader reader=new JsonReader(reader(""\ufeff[]""));reader.beginArray();reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testBomForbiddenAsOtherCharacterInDocument",0,"public void testBomForbiddenAsOtherCharacterInDocument()throws IOException {JsonReader reader=new JsonReader(reader(""[\ufeff]""));reader.beginArray();try {reader.endArray();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testFailWithPosition",0,"public void testFailWithPosition()throws IOException {testFailWithPosition(""Expected value at line 6 column 5 path $[1]"",""[\n\n\n\n\n\""a\"",}]"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionGreaterThanBufferSize",0,"public void testFailWithPositionGreaterThanBufferSize()throws IOException {String spaces=repeat(' ',8192);testFailWithPosition(""Expected value at line 6 column 5 path $[1]"",""[\n\n"" + spaces + ""\n\n\n\""a\"",}]"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionOverSlashSlashEndOfLineComment",0,"public void testFailWithPositionOverSlashSlashEndOfLineComment()throws IOException {testFailWithPosition(""Expected value at line 5 column 6 path $[1]"",""\n// foo\n\n//bar\r\n[\""a\"",}"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionOverHashEndOfLineComment",0,"public void testFailWithPositionOverHashEndOfLineComment()throws IOException {testFailWithPosition(""Expected value at line 5 column 6 path $[1]"",""\n# foo\n\n#bar\r\n[\""a\"",}"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionOverCStyleComment",0,"public void testFailWithPositionOverCStyleComment()throws IOException {testFailWithPosition(""Expected value at line 6 column 12 path $[1]"",""\n\n/* foo\n*\n*\r\nbar */[\""a\"",}"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionOverQuotedString",0,"public void testFailWithPositionOverQuotedString()throws IOException {testFailWithPosition(""Expected value at line 5 column 3 path $[1]"",""[\""foo\nbar\r\nbaz\n\"",\n  }"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionOverUnquotedString",0,"public void testFailWithPositionOverUnquotedString()throws IOException {testFailWithPosition(""Expected value at line 5 column 2 path $[1]"",""[\n\nabcd\n\n,}"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithEscapedNewlineCharacter",0,"public void testFailWithEscapedNewlineCharacter()throws IOException {testFailWithPosition(""Expected value at line 5 column 3 path $[1]"",""[\n\n\""\\\n\n\"",}"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionIsOffsetByBom",0,"public void testFailWithPositionIsOffsetByBom()throws IOException {testFailWithPosition(""Expected value at line 1 column 6 path $[1]"",""\ufeff[\""a\"",}]"");}"
"com.google.gson.stream.JsonReaderTest.testFailWithPositionDeepPath",0,"public void testFailWithPositionDeepPath()throws IOException {JsonReader reader=new JsonReader(reader(""[1,{\""a\"":[2,3,}""));reader.beginArray();reader.nextInt();reader.beginObject();reader.nextName();reader.beginArray();reader.nextInt();reader.nextInt();try {reader.peek();fail();}catch(IOException expected){assertEquals(""Expected value at line 1 column 14 path $[1].a[2]"",expected.getMessage());}}"
"com.google.gson.stream.JsonReaderTest.testStrictVeryLongNumber",0,"public void testStrictVeryLongNumber()throws IOException {JsonReader reader=new JsonReader(reader(""[0."" + repeat('9',8192)+ ""]""));reader.beginArray();try {assertEquals(1d,reader.nextDouble());fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientVeryLongNumber",0,"public void testLenientVeryLongNumber()throws IOException {JsonReader reader=new JsonReader(reader(""[0."" + repeat('9',8192)+ ""]""));reader.setLenient(true);reader.beginArray();assertEquals(JsonToken.STRING,reader.peek());assertEquals(1d,reader.nextDouble());reader.endArray();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedLiteral",0,"public void testVeryLongUnquotedLiteral()throws IOException {String literal=""a"" + repeat('b',8192)+ ""c"";JsonReader reader=new JsonReader(reader(""["" + literal + ""]""));reader.setLenient(true);reader.beginArray();assertEquals(literal,reader.nextString());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testDeeplyNestedArrays",0,"public void testDeeplyNestedArrays()throws IOException {JsonReader reader=new JsonReader(reader(""[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]""));for (int i=0;i < 40;i++){reader.beginArray();}assertEquals(""$[0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0][0]"" + ""[0][0][0][0][0][0][0][0][0][0][0][0][0][0]"",reader.getPath());for (int i=0;i < 40;i++){reader.endArray();}assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testDeeplyNestedObjects",0,"public void testDeeplyNestedObjects()throws IOException {String array=""{\""a\"":%s}"";String json=""true"";for (int i=0;i < 40;i++){json=String.format(array,json);}JsonReader reader=new JsonReader(reader(json));for (int i=0;i < 40;i++){reader.beginObject();assertEquals(""a"",reader.nextName());}assertEquals(""$.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"" + "".a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a"",reader.getPath());assertEquals(true,reader.nextBoolean());for (int i=0;i < 40;i++){reader.endObject();}assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStringEndingInSlash",0,"public void testStringEndingInSlash()throws IOException {JsonReader reader=new JsonReader(reader(""/""));reader.setLenient(true);try {reader.peek();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testDocumentWithCommentEndingInSlash",0,"public void testDocumentWithCommentEndingInSlash()throws IOException {JsonReader reader=new JsonReader(reader(""/* foo *//""));reader.setLenient(true);try {reader.peek();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testStringWithLeadingSlash",0,"public void testStringWithLeadingSlash()throws IOException {JsonReader reader=new JsonReader(reader(""/x""));reader.setLenient(true);try {reader.peek();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testUnterminatedObject",0,"public void testUnterminatedObject()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":\""android\""x""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(""android"",reader.nextString());try {reader.peek();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.stream.JsonReaderTest.testVeryLongQuotedString",0,"public void testVeryLongQuotedString()throws IOException {char[]stringChars=new char[1024 * 16];Arrays.fill(stringChars,'x');String string=new String(stringChars);String json=""[\"""" + string + ""\""]"";JsonReader reader=new JsonReader(reader(json));reader.beginArray();assertEquals(string,reader.nextString());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testVeryLongUnquotedString",0,"public void testVeryLongUnquotedString()throws IOException {char[]stringChars=new char[1024 * 16];Arrays.fill(stringChars,'x');String string=new String(stringChars);String json=""["" + string + ""]"";JsonReader reader=new JsonReader(reader(json));reader.setLenient(true);reader.beginArray();assertEquals(string,reader.nextString());reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testVeryLongUnterminatedString",0,"public void testVeryLongUnterminatedString()throws IOException {char[]stringChars=new char[1024 * 16];Arrays.fill(stringChars,'x');String string=new String(stringChars);String json=""["" + string;JsonReader reader=new JsonReader(reader(json));reader.setLenient(true);reader.beginArray();assertEquals(string,reader.nextString());try {reader.peek();fail();}catch(EOFException expected){}}"
"com.google.gson.stream.JsonReaderTest.testSkipVeryLongUnquotedString",0,"public void testSkipVeryLongUnquotedString()throws IOException {JsonReader reader=new JsonReader(reader(""["" + repeat('x',8192)+ ""]""));reader.setLenient(true);reader.beginArray();reader.skipValue();reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testSkipTopLevelUnquotedString",0,"public void testSkipTopLevelUnquotedString()throws IOException {JsonReader reader=new JsonReader(reader(repeat('x',8192)));reader.setLenient(true);reader.skipValue();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testSkipVeryLongQuotedString",0,"public void testSkipVeryLongQuotedString()throws IOException {JsonReader reader=new JsonReader(reader(""[\"""" + repeat('x',8192)+ ""\""]""));reader.beginArray();reader.skipValue();reader.endArray();}"
"com.google.gson.stream.JsonReaderTest.testSkipTopLevelQuotedString",0,"public void testSkipTopLevelQuotedString()throws IOException {JsonReader reader=new JsonReader(reader(""\"""" + repeat('x',8192)+ ""\""""));reader.setLenient(true);reader.skipValue();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStringAsNumberWithTruncatedExponent",0,"public void testStringAsNumberWithTruncatedExponent()throws IOException {JsonReader reader=new JsonReader(reader(""[123e]""));reader.setLenient(true);reader.beginArray();assertEquals(STRING,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStringAsNumberWithDigitAndNonDigitExponent",0,"public void testStringAsNumberWithDigitAndNonDigitExponent()throws IOException {JsonReader reader=new JsonReader(reader(""[123e4b]""));reader.setLenient(true);reader.beginArray();assertEquals(STRING,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStringAsNumberWithNonDigitExponent",0,"public void testStringAsNumberWithNonDigitExponent()throws IOException {JsonReader reader=new JsonReader(reader(""[123eb]""));reader.setLenient(true);reader.beginArray();assertEquals(STRING,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testEmptyStringName",0,"public void testEmptyStringName()throws IOException {JsonReader reader=new JsonReader(reader(""{\""\"":true}""));reader.setLenient(true);assertEquals(BEGIN_OBJECT,reader.peek());reader.beginObject();assertEquals(NAME,reader.peek());assertEquals("""",reader.nextName());assertEquals(JsonToken.BOOLEAN,reader.peek());assertEquals(true,reader.nextBoolean());assertEquals(JsonToken.END_OBJECT,reader.peek());reader.endObject();assertEquals(JsonToken.END_DOCUMENT,reader.peek());}"
"com.google.gson.stream.JsonReaderTest.testStrictExtraCommasInMaps",0,"public void testStrictExtraCommasInMaps()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":\""b\"",}""));reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(""b"",reader.nextString());try {reader.peek();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testLenientExtraCommasInMaps",0,"public void testLenientExtraCommasInMaps()throws IOException {JsonReader reader=new JsonReader(reader(""{\""a\"":\""b\"",}""));reader.setLenient(true);reader.beginObject();assertEquals(""a"",reader.nextName());assertEquals(""b"",reader.nextString());try {reader.peek();fail();}catch(IOException expected){}}"
"com.google.gson.stream.JsonReaderTest.testMalformedDocuments",0,"public void testMalformedDocuments()throws IOException {assertDocument(""{]"",BEGIN_OBJECT,IOException.class);assertDocument(""{,"",BEGIN_OBJECT,IOException.class);assertDocument(""{{"",BEGIN_OBJECT,IOException.class);assertDocument(""{["",BEGIN_OBJECT,IOException.class);assertDocument(""{:"",BEGIN_OBJECT,IOException.class);assertDocument(""{\""name\"","",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\"","",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\"":}"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\""::"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\"":,"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\""=}"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\""=>}"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\""=>\""string\"":"",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\""=>\""string\""="",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\""=>\""string\""=>"",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\""=>\""string\"","",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\""=>\""string\"",\""name\"""",BEGIN_OBJECT,NAME,STRING,NAME);assertDocument(""[}"",BEGIN_ARRAY,IOException.class);assertDocument(""[,]"",BEGIN_ARRAY,NULL,NULL,END_ARRAY);assertDocument(""{"",BEGIN_OBJECT,IOException.class);assertDocument(""{\""name\"""",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{\""name\"","",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{'name'"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{'name',"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""{name"",BEGIN_OBJECT,NAME,IOException.class);assertDocument(""["",BEGIN_ARRAY,IOException.class);assertDocument(""[string"",BEGIN_ARRAY,STRING,IOException.class);assertDocument(""[\""string\"""",BEGIN_ARRAY,STRING,IOException.class);assertDocument(""['string'"",BEGIN_ARRAY,STRING,IOException.class);assertDocument(""[123"",BEGIN_ARRAY,NUMBER,IOException.class);assertDocument(""[123,"",BEGIN_ARRAY,NUMBER,IOException.class);assertDocument(""{\""name\"":123"",BEGIN_OBJECT,NAME,NUMBER,IOException.class);assertDocument(""{\""name\"":123,"",BEGIN_OBJECT,NAME,NUMBER,IOException.class);assertDocument(""{\""name\"":\""string\"""",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\"":\""string\"","",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\"":'string'"",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\"":'string',"",BEGIN_OBJECT,NAME,STRING,IOException.class);assertDocument(""{\""name\"":false"",BEGIN_OBJECT,NAME,BOOLEAN,IOException.class);assertDocument(""{\""name\"":false,,"",BEGIN_OBJECT,NAME,BOOLEAN,IOException.class);}"
"com.google.gson.stream.JsonReaderTest.testUnterminatedStringFailure",0,"/** * This test behave slightly differently in Gson 2.2 and earlier. It fails during peek rather than during nextString().*/public void testUnterminatedStringFailure()throws IOException {JsonReader reader=new JsonReader(reader(""[\""string""));reader.setLenient(true);reader.beginArray();assertEquals(JsonToken.STRING,reader.peek());try {reader.nextString();fail();}catch(MalformedJsonException expected){}}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize",0,"public void testSerialize()throws IOException {Truck truck=new Truck();truck.passengers=Arrays.asList(new Person(""Jesse"",29),new Person(""Jodie"",29));truck.horsePower=300;assertEquals(""{'horsePower':300.0,"" + ""'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}"",toJson(truckAdapter,truck).replace('\""','\''));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize",0,"public void testDeserialize()throws IOException {String json=""{'horsePower':300.0,"" + ""'passengers':[{'age':29,'name':'Jesse'},{'age':29,'name':'Jodie'}]}"";Truck truck=fromJson(truckAdapter,json);assertEquals(300.0,truck.horsePower);assertEquals(Arrays.asList(new Person(""Jesse"",29),new Person(""Jodie"",29)),truck.passengers);}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullField",0,"public void testSerializeNullField()throws IOException {Truck truck=new Truck();truck.passengers=null;assertEquals(""{'horsePower':0.0,'passengers':null}"",toJson(truckAdapter,truck).replace('\""','\''));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullField",0,"public void testDeserializeNullField()throws IOException {Truck truck=fromJson(truckAdapter,""{'horsePower':0.0,'passengers':null}"");assertNull(truck.passengers);}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeNullObject",0,"public void testSerializeNullObject()throws IOException {Truck truck=new Truck();truck.passengers=Arrays.asList((Person)null);assertEquals(""{'horsePower':0.0,'passengers':[null]}"",toJson(truckAdapter,truck).replace('\""','\''));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeNullObject",0,"public void testDeserializeNullObject()throws IOException {Truck truck=fromJson(truckAdapter,""{'horsePower':0.0,'passengers':[null]}"");assertEquals(Arrays.asList((Person)null),truck.passengers);}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeWithCustomTypeAdapter",0,"public void testSerializeWithCustomTypeAdapter()throws IOException {usePersonNameAdapter();Truck truck=new Truck();truck.passengers=Arrays.asList(new Person(""Jesse"",29),new Person(""Jodie"",29));assertEquals(""{'horsePower':0.0,'passengers':['Jesse','Jodie']}"",toJson(truckAdapter,truck).replace('\""','\''));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeWithCustomTypeAdapter",0,"public void testDeserializeWithCustomTypeAdapter()throws IOException {usePersonNameAdapter();Truck truck=fromJson(truckAdapter,""{'horsePower':0.0,'passengers':['Jesse','Jodie']}"");assertEquals(Arrays.asList(new Person(""Jesse"",-1),new Person(""Jodie"",-1)),truck.passengers);}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeMap",0,"public void testSerializeMap()throws IOException {Map<String,Double> map=new LinkedHashMap<String,Double>();map.put(""a"",5.0);map.put(""b"",10.0);assertEquals(""{'a':5.0,'b':10.0}"",toJson(mapAdapter,map).replace('""','\''));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserializeMap",0,"public void testDeserializeMap()throws IOException {Map<String,Double> map=new LinkedHashMap<String,Double>();map.put(""a"",5.0);map.put(""b"",10.0);assertEquals(map,fromJson(mapAdapter,""{'a':5.0,'b':10.0}""));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize1dArray",0,"public void testSerialize1dArray()throws IOException {TypeAdapter<double[]> arrayAdapter=miniGson.getAdapter(new TypeToken<double[]>(){});assertEquals(""[1.0,2.0,3.0]"",toJson(arrayAdapter,new double[]{1.0,2.0,3.0}));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize1dArray",0,"public void testDeserialize1dArray()throws IOException {TypeAdapter<double[]> arrayAdapter=miniGson.getAdapter(new TypeToken<double[]>(){});double[]array=fromJson(arrayAdapter,""[1.0,2.0,3.0]"");assertTrue(Arrays.toString(array),Arrays.equals(new double[]{1.0,2.0,3.0},array));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerialize2dArray",0,"public void testSerialize2dArray()throws IOException {TypeAdapter<double[][]> arrayAdapter=miniGson.getAdapter(new TypeToken<double[][]>(){});double[][]array={{1.0,2.0},{3.0}};assertEquals(""[[1.0,2.0],[3.0]]"",toJson(arrayAdapter,array));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testDeserialize2dArray",0,"public void testDeserialize2dArray()throws IOException {TypeAdapter<double[][]> arrayAdapter=miniGson.getAdapter(new TypeToken<double[][]>(){});double[][]array=fromJson(arrayAdapter,""[[1.0,2.0],[3.0]]"");double[][]expected={{1.0,2.0},{3.0}};assertTrue(Arrays.toString(array),Arrays.deepEquals(expected,array));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testNullSafe",0,"public void testNullSafe(){TypeAdapter<Person> typeAdapter=new TypeAdapter<Person>(){@Override public Person read(JsonReader in)throws IOException {String[]values=in.nextString().split("","");return new Person(values[0],Integer.parseInt(values[1]));}public void write(JsonWriter out,Person person)throws IOException {out.value(person.name + "","" + person.age);}};Gson gson=new GsonBuilder().registerTypeAdapter(Person.class,typeAdapter).create();Truck truck=new Truck();truck.horsePower=1.0D;truck.passengers=new ArrayList<Person>();truck.passengers.add(null);truck.passengers.add(new Person(""jesse"",30));try {gson.toJson(truck,Truck.class);fail();}catch(NullPointerException expected){}String json=""{horsePower:1.0,passengers:[null,'jesse,30']}"";try {gson.fromJson(json,Truck.class);fail();}catch(JsonSyntaxException expected){}gson=new GsonBuilder().registerTypeAdapter(Person.class,typeAdapter.nullSafe()).create();assertEquals(""{\""horsePower\"":1.0,\""passengers\"":[null,\""jesse,30\""]}"",gson.toJson(truck,Truck.class));truck=gson.fromJson(json,Truck.class);assertEquals(1.0D,truck.horsePower);assertNull(truck.passengers.get(0));assertEquals(""jesse"",truck.passengers.get(1).name);}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testSerializeRecursive",0,"public void testSerializeRecursive()throws IOException {TypeAdapter<Node> nodeAdapter=miniGson.getAdapter(Node.class);Node root=new Node(""root"");root.left=new Node(""left"");root.right=new Node(""right"");assertEquals(""{'label':'root',"" + ""'left':{'label':'left','left':null,'right':null},"" + ""'right':{'label':'right','left':null,'right':null}}"",toJson(nodeAdapter,root).replace('""','\''));}"
"com.google.gson.functional.StreamingTypeAdaptersTest.testFromJsonTree",0,"public void testFromJsonTree(){JsonObject truckObject=new JsonObject();truckObject.add(""horsePower"",new JsonPrimitive(300));JsonArray passengersArray=new JsonArray();JsonObject jesseObject=new JsonObject();jesseObject.add(""age"",new JsonPrimitive(30));jesseObject.add(""name"",new JsonPrimitive(""Jesse""));passengersArray.add(jesseObject);truckObject.add(""passengers"",passengersArray);Truck truck=truckAdapter.fromJsonTree(truckObject);assertEquals(300.0,truck.horsePower);assertEquals(Arrays.asList(new Person(""Jesse"",30)),truck.passengers);}"
"com.google.gson.GenericArrayTypeTest.testOurTypeFunctionality",0,"public void testOurTypeFunctionality()throws Exception {Type parameterizedType=new TypeToken<List<String>>(){}.getType();Type genericArrayType=new TypeToken<List<String>[]>(){}.getType();assertEquals(parameterizedType,ourType.getGenericComponentType());assertEquals(genericArrayType,ourType);assertEquals(genericArrayType.hashCode(),ourType.hashCode());}"
"com.google.gson.GenericArrayTypeTest.testNotEquals",0,"public void testNotEquals()throws Exception {Type differentGenericArrayType=new TypeToken<List<String>[][]>(){}.getType();assertFalse(differentGenericArrayType.equals(ourType));assertFalse(ourType.equals(differentGenericArrayType));}"
"com.google.gson.functional.FieldNamingTest.testIdentity",0,"public void testIdentity(){Gson gson=getGsonWithNamingPolicy(IDENTITY);assertEquals(""{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3,"" + ""'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6,"" + ""'annotatedName':7,'lowerId':8}"",gson.toJson(new TestNames()).replace('\""','\''));}"
"com.google.gson.functional.FieldNamingTest.testUpperCamelCase",0,"public void testUpperCamelCase(){Gson gson=getGsonWithNamingPolicy(UPPER_CAMEL_CASE);assertEquals(""{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3,"" + ""'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6,"" + ""'annotatedName':7,'LowerId':8}"",gson.toJson(new TestNames()).replace('\""','\''));}"
"com.google.gson.functional.FieldNamingTest.testUpperCamelCaseWithSpaces",0,"public void testUpperCamelCaseWithSpaces(){Gson gson=getGsonWithNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES);assertEquals(""{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3,"" + ""'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6,"" + ""'annotatedName':7,'Lower Id':8}"",gson.toJson(new TestNames()).replace('\""','\''));}"
"com.google.gson.functional.FieldNamingTest.testLowerCaseWithUnderscores",0,"public void testLowerCaseWithUnderscores(){Gson gson=getGsonWithNamingPolicy(LOWER_CASE_WITH_UNDERSCORES);assertEquals(""{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3,"" + ""'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6,"" + ""'annotatedName':7,'lower_id':8}"",gson.toJson(new TestNames()).replace('\""','\''));}"
"com.google.gson.functional.FieldNamingTest.testLowerCaseWithDashes",0,"public void testLowerCaseWithDashes(){Gson gson=getGsonWithNamingPolicy(LOWER_CASE_WITH_DASHES);assertEquals(""{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3,"" + ""'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6,"" + ""'annotatedName':7,'lower-id':8}"",gson.toJson(new TestNames()).replace('\""','\''));}"
"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAtSameVersion",0,"public void testClassAndFieldAreAtSameVersion()throws Exception {Excluder excluder=Excluder.DEFAULT.withVersion(VERSION);assertFalse(excluder.excludeClass(MockObject.class,true));assertFalse(excluder.excludeField(MockObject.class.getField(""someField""),true));}"
"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreBehindInVersion",0,"public void testClassAndFieldAreBehindInVersion()throws Exception {Excluder excluder=Excluder.DEFAULT.withVersion(VERSION + 1);assertFalse(excluder.excludeClass(MockObject.class,true));assertFalse(excluder.excludeField(MockObject.class.getField(""someField""),true));}"
"com.google.gson.VersionExclusionStrategyTest.testClassAndFieldAreAheadInVersion",0,"public void testClassAndFieldAreAheadInVersion()throws Exception {Excluder excluder=Excluder.DEFAULT.withVersion(VERSION - 1);assertTrue(excluder.excludeClass(MockObject.class,true));assertTrue(excluder.excludeField(MockObject.class.getField(""someField""),true));}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsBaseType",0,"public void testInstanceCreatorReturnsBaseType(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new InstanceCreator<Base>(){@Override public Base createInstance(Type type){return new Base();}}).create();String json=""{baseName:'BaseRevised',subName:'Sub'}"";Base base=gson.fromJson(json,Base.class);assertEquals(""BaseRevised"",base.baseName);}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForTopLevelObject",0,"public void testInstanceCreatorReturnsSubTypeForTopLevelObject(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new InstanceCreator<Base>(){@Override public Base createInstance(Type type){return new Sub();}}).create();String json=""{baseName:'Base',subName:'SubRevised'}"";Base base=gson.fromJson(json,Base.class);assertTrue(base instanceof Sub);Sub sub=(Sub)base;assertFalse(""SubRevised"".equals(sub.subName));assertEquals(Sub.SUB_NAME,sub.subName);}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorReturnsSubTypeForField",0,"public void testInstanceCreatorReturnsSubTypeForField(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new InstanceCreator<Base>(){@Override public Base createInstance(Type type){return new Sub();}}).create();String json=""{base:{baseName:'Base',subName:'SubRevised'}}"";ClassWithBaseField target=gson.fromJson(json,ClassWithBaseField.class);assertTrue(target.base instanceof Sub);assertEquals(Sub.SUB_NAME,((Sub)target.base).subName);}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForCollectionType",0,"public void testInstanceCreatorForCollectionType(){@SuppressWarnings(""serial"")class SubArrayList<T> extends ArrayList<T> {}InstanceCreator<List<String>> listCreator=new InstanceCreator<List<String>>(){@Override public List<String> createInstance(Type type){return new SubArrayList<String>();}};Type listOfStringType=new TypeToken<List<String>>(){}.getType();Gson gson=new GsonBuilder().registerTypeAdapter(listOfStringType,listCreator).create();List<String> list=gson.fromJson(""[\""a\""]"",listOfStringType);assertEquals(SubArrayList.class,list.getClass());}"
"com.google.gson.functional.InstanceCreatorTest.testInstanceCreatorForParametrizedType",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testInstanceCreatorForParametrizedType()throws Exception {@SuppressWarnings(""serial"")class SubTreeSet<T> extends TreeSet<T> {}InstanceCreator<SortedSet> sortedSetCreator=new InstanceCreator<SortedSet>(){@Override public SortedSet createInstance(Type type){return new SubTreeSet();}};Gson gson=new GsonBuilder().registerTypeAdapter(SortedSet.class,sortedSetCreator).create();Type sortedSetType=new TypeToken<SortedSet<String>>(){}.getType();SortedSet<String> set=gson.fromJson(""[\""a\""]"",sortedSetType);assertEquals(set.first(),""a"");assertEquals(SubTreeSet.class,set.getClass());set=gson.fromJson(""[\""b\""]"",SortedSet.class);assertEquals(set.first(),""b"");assertEquals(SubTreeSet.class,set.getClass());}"
"com.google.gson.FieldAttributesTest.testNullField",0,"public void testNullField()throws Exception {try {new FieldAttributes(null);fail(""Field parameter can not be null"");}catch(NullPointerException expected){}}"
"com.google.gson.FieldAttributesTest.testDeclaringClass",0,"public void testDeclaringClass()throws Exception {assertEquals(Foo.class,fieldAttributes.getDeclaringClass());}"
"com.google.gson.FieldAttributesTest.testModifiers",0,"public void testModifiers()throws Exception {assertFalse(fieldAttributes.hasModifier(Modifier.STATIC));assertFalse(fieldAttributes.hasModifier(Modifier.FINAL));assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT));assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE));assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED));assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC));assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT));}"
"com.google.gson.FieldAttributesTest.testIsSynthetic",0,"public void testIsSynthetic()throws Exception {assertFalse(fieldAttributes.isSynthetic());}"
"com.google.gson.FieldAttributesTest.testName",0,"public void testName()throws Exception {assertEquals(""bar"",fieldAttributes.getName());}"
"com.google.gson.FieldAttributesTest.testDeclaredTypeAndClass",0,"public void testDeclaredTypeAndClass()throws Exception {Type expectedType=new TypeToken<List<String>>(){}.getType();assertEquals(expectedType,fieldAttributes.getDeclaredType());assertEquals(List.class,fieldAttributes.getDeclaredClass());}"
"com.google.gson.functional.EnumTest.testTopLevelEnumSerialization",0,"public void testTopLevelEnumSerialization()throws Exception {String result=gson.toJson(MyEnum.VALUE1);assertEquals('""' + MyEnum.VALUE1.toString()+ '""',result);}"
"com.google.gson.functional.EnumTest.testTopLevelEnumDeserialization",0,"public void testTopLevelEnumDeserialization()throws Exception {MyEnum result=gson.fromJson('""' + MyEnum.VALUE1.toString()+ '""',MyEnum.class);assertEquals(MyEnum.VALUE1,result);}"
"com.google.gson.functional.EnumTest.testCollectionOfEnumsSerialization",0,"public void testCollectionOfEnumsSerialization(){Type type=new TypeToken<Collection<MyEnum>>(){}.getType();Collection<MyEnum> target=new ArrayList<MyEnum>();target.add(MyEnum.VALUE1);target.add(MyEnum.VALUE2);String expectedJson=""[\""VALUE1\"",\""VALUE2\""]"";String actualJson=gson.toJson(target);assertEquals(expectedJson,actualJson);actualJson=gson.toJson(target,type);assertEquals(expectedJson,actualJson);}"
"com.google.gson.functional.EnumTest.testCollectionOfEnumsDeserialization",0,"public void testCollectionOfEnumsDeserialization(){Type type=new TypeToken<Collection<MyEnum>>(){}.getType();String json=""[\""VALUE1\"",\""VALUE2\""]"";Collection<MyEnum> target=gson.fromJson(json,type);MoreAsserts.assertContains(target,MyEnum.VALUE1);MoreAsserts.assertContains(target,MyEnum.VALUE2);}"
"com.google.gson.functional.EnumTest.testClassWithEnumFieldSerialization",0,"public void testClassWithEnumFieldSerialization()throws Exception {ClassWithEnumFields target=new ClassWithEnumFields();assertEquals(target.getExpectedJson(),gson.toJson(target));}"
"com.google.gson.functional.EnumTest.testClassWithEnumFieldDeserialization",0,"public void testClassWithEnumFieldDeserialization()throws Exception {String json=""{value1:'VALUE1',value2:'VALUE2'}"";ClassWithEnumFields target=gson.fromJson(json,ClassWithEnumFields.class);assertEquals(MyEnum.VALUE1,target.value1);assertEquals(MyEnum.VALUE2,target.value2);}"
"com.google.gson.functional.EnumTest.testEnumSubclass",0,"/** * Test for issue 226.*/public void testEnumSubclass(){assertFalse(Roshambo.class == Roshambo.ROCK.getClass());assertEquals(""\""ROCK\"""",gson.toJson(Roshambo.ROCK));assertEquals(""[\""ROCK\"",\""PAPER\"",\""SCISSORS\""]"",gson.toJson(EnumSet.allOf(Roshambo.class)));assertEquals(Roshambo.ROCK,gson.fromJson(""\""ROCK\"""",Roshambo.class));assertEquals(EnumSet.allOf(Roshambo.class),gson.fromJson(""[\""ROCK\"",\""PAPER\"",\""SCISSORS\""]"",new TypeToken<Set<Roshambo>>(){}.getType()));}"
"com.google.gson.functional.EnumTest.testEnumSubclassWithRegisteredTypeAdapter",0,"public void testEnumSubclassWithRegisteredTypeAdapter(){gson=new GsonBuilder().registerTypeHierarchyAdapter(Roshambo.class,new MyEnumTypeAdapter()).create();assertFalse(Roshambo.class == Roshambo.ROCK.getClass());assertEquals(""\""123ROCK\"""",gson.toJson(Roshambo.ROCK));assertEquals(""[\""123ROCK\"",\""123PAPER\"",\""123SCISSORS\""]"",gson.toJson(EnumSet.allOf(Roshambo.class)));assertEquals(Roshambo.ROCK,gson.fromJson(""\""123ROCK\"""",Roshambo.class));assertEquals(EnumSet.allOf(Roshambo.class),gson.fromJson(""[\""123ROCK\"",\""123PAPER\"",\""123SCISSORS\""]"",new TypeToken<Set<Roshambo>>(){}.getType()));}"
"com.google.gson.functional.EnumTest.testEnumSubclassAsParameterizedType",0,"public void testEnumSubclassAsParameterizedType(){Collection<Roshambo> list=new ArrayList<Roshambo>();list.add(Roshambo.ROCK);list.add(Roshambo.PAPER);String json=gson.toJson(list);assertEquals(""[\""ROCK\"",\""PAPER\""]"",json);Type collectionType=new TypeToken<Collection<Roshambo>>(){}.getType();Collection<Roshambo> actualJsonList=gson.fromJson(json,collectionType);MoreAsserts.assertContains(actualJsonList,Roshambo.ROCK);MoreAsserts.assertContains(actualJsonList,Roshambo.PAPER);}"
"com.google.gson.functional.EnumTest.testEnumCaseMapping",0,"public void testEnumCaseMapping(){assertEquals(Gender.MALE,gson.fromJson(""\""boy\"""",Gender.class));assertEquals(""\""boy\"""",gson.toJson(Gender.MALE,Gender.class));}"
"com.google.gson.functional.EnumTest.testEnumSet",0,"public void testEnumSet(){EnumSet<Roshambo> foo=EnumSet.of(Roshambo.ROCK,Roshambo.PAPER);String json=gson.toJson(foo);Type type=new TypeToken<EnumSet<Roshambo>>(){}.getType();EnumSet<Roshambo> bar=gson.fromJson(json,type);assertTrue(bar.contains(Roshambo.ROCK));assertTrue(bar.contains(Roshambo.PAPER));assertFalse(bar.contains(Roshambo.SCISSORS));}"
"com.google.gson.functional.ReadersWritersTest.testWriterForSerialization",0,"public void testWriterForSerialization()throws Exception {Writer writer=new StringWriter();BagOfPrimitives src=new BagOfPrimitives();gson.toJson(src,writer);assertEquals(src.getExpectedJson(),writer.toString());}"
"com.google.gson.functional.ReadersWritersTest.testReaderForDeserialization",0,"public void testReaderForDeserialization()throws Exception {BagOfPrimitives expected=new BagOfPrimitives();Reader json=new StringReader(expected.getExpectedJson());BagOfPrimitives actual=gson.fromJson(json,BagOfPrimitives.class);assertEquals(expected,actual);}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriter",0,"public void testTopLevelNullObjectSerializationWithWriter(){StringWriter writer=new StringWriter();gson.toJson(null,writer);assertEquals(""null"",writer.toString());}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReader",0,"public void testTopLevelNullObjectDeserializationWithReader(){StringReader reader=new StringReader(""null"");Integer nullIntObject=gson.fromJson(reader,Integer.class);assertNull(nullIntObject);}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectSerializationWithWriterAndSerializeNulls",0,"public void testTopLevelNullObjectSerializationWithWriterAndSerializeNulls(){Gson gson=new GsonBuilder().serializeNulls().create();StringWriter writer=new StringWriter();gson.toJson(null,writer);assertEquals(""null"",writer.toString());}"
"com.google.gson.functional.ReadersWritersTest.testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls",0,"public void testTopLevelNullObjectDeserializationWithReaderAndSerializeNulls(){Gson gson=new GsonBuilder().serializeNulls().create();StringReader reader=new StringReader(""null"");Integer nullIntObject=gson.fromJson(reader,Integer.class);assertNull(nullIntObject);}"
"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoStrings",0,"public void testReadWriteTwoStrings()throws IOException {Gson gson=new Gson();CharArrayWriter writer=new CharArrayWriter();writer.write(gson.toJson(""one"").toCharArray());writer.write(gson.toJson(""two"").toCharArray());CharArrayReader reader=new CharArrayReader(writer.toCharArray());JsonStreamParser parser=new JsonStreamParser(reader);String actualOne=gson.fromJson(parser.next(),String.class);assertEquals(""one"",actualOne);String actualTwo=gson.fromJson(parser.next(),String.class);assertEquals(""two"",actualTwo);}"
"com.google.gson.functional.ReadersWritersTest.testReadWriteTwoObjects",0,"public void testReadWriteTwoObjects()throws IOException {Gson gson=new Gson();CharArrayWriter writer=new CharArrayWriter();BagOfPrimitives expectedOne=new BagOfPrimitives(1,1,true,""one"");writer.write(gson.toJson(expectedOne).toCharArray());BagOfPrimitives expectedTwo=new BagOfPrimitives(2,2,false,""two"");writer.write(gson.toJson(expectedTwo).toCharArray());CharArrayReader reader=new CharArrayReader(writer.toCharArray());JsonStreamParser parser=new JsonStreamParser(reader);BagOfPrimitives actualOne=gson.fromJson(parser.next(),BagOfPrimitives.class);assertEquals(""one"",actualOne.stringValue);BagOfPrimitives actualTwo=gson.fromJson(parser.next(),BagOfPrimitives.class);assertEquals(""two"",actualTwo.stringValue);assertFalse(parser.hasNext());}"
"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForStrings",0,"public void testTypeMismatchThrowsJsonSyntaxExceptionForStrings(){try {gson.fromJson(""true"",new TypeToken<Map<String,String>>(){}.getType());fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.ReadersWritersTest.testTypeMismatchThrowsJsonSyntaxExceptionForReaders",0,"public void testTypeMismatchThrowsJsonSyntaxExceptionForReaders(){try {gson.fromJson(new StringReader(""true""),new TypeToken<Map<String,String>>(){}.getType());fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithoutCause",0,"public void testExceptionWithoutCause(){RuntimeException e=new RuntimeException(""hello"");String json=gson.toJson(e);assertTrue(json.contains(""hello""));e=gson.fromJson(""{'detailMessage':'hello'}"",RuntimeException.class);assertEquals(""hello"",e.getMessage());}"
"com.google.gson.functional.ThrowableFunctionalTest.testExceptionWithCause",0,"public void testExceptionWithCause(){Exception e=new Exception(""top level"",new IOException(""io error""));String json=gson.toJson(e);assertTrue(json.contains(""{\""detailMessage\"":\""top level\"",\""cause\"":{\""detailMessage\"":\""io error\""""));e=gson.fromJson(""{'detailMessage':'top level','cause':{'detailMessage':'io error'}}"",Exception.class);assertEquals(""top level"",e.getMessage());assertTrue(e.getCause()instanceof Throwable);assertEquals(""io error"",e.getCause().getMessage());}"
"com.google.gson.functional.ThrowableFunctionalTest.testSerializedNameOnExceptionFields",0,"public void testSerializedNameOnExceptionFields(){MyException e=new MyException();String json=gson.toJson(e);assertTrue(json.contains(""{\""my_custom_name\"":\""myCustomMessageValue\""""));}"
"com.google.gson.functional.ThrowableFunctionalTest.testErrorWithoutCause",0,"public void testErrorWithoutCause(){OutOfMemoryError e=new OutOfMemoryError(""hello"");String json=gson.toJson(e);assertTrue(json.contains(""hello""));e=gson.fromJson(""{'detailMessage':'hello'}"",OutOfMemoryError.class);assertEquals(""hello"",e.getMessage());}"
"com.google.gson.functional.ThrowableFunctionalTest.testErrornWithCause",0,"public void testErrornWithCause(){Error e=new Error(""top level"",new IOException(""io error""));String json=gson.toJson(e);assertTrue(json.contains(""top level""));assertTrue(json.contains(""io error""));e=gson.fromJson(""{'detailMessage':'top level','cause':{'detailMessage':'io error'}}"",Error.class);assertEquals(""top level"",e.getMessage());assertTrue(e.getCause()instanceof Throwable);assertEquals(""io error"",e.getCause().getMessage());}"
"com.google.gson.internal.GsonTypesTest.testNewParameterizedTypeWithoutOwner",0,"public void testNewParameterizedTypeWithoutOwner()throws Exception {Type type=$Gson$Types.newParameterizedTypeWithOwner(null,List.class,A.class);assertEquals(A.class,getFirstTypeArgument(type));type=$Gson$Types.newParameterizedTypeWithOwner(null,A.class,B.class);assertEquals(B.class,getFirstTypeArgument(type));final class D {}try {$Gson$Types.newParameterizedTypeWithOwner(null,D.class,A.class);fail();}catch(IllegalArgumentException expected){}type=$Gson$Types.newParameterizedTypeWithOwner(null,A.class,D.class);assertEquals(D.class,getFirstTypeArgument(type));}"
"com.google.gson.internal.GsonTypesTest.testGetFirstTypeArgument",0,"public void testGetFirstTypeArgument()throws Exception {assertNull(getFirstTypeArgument(A.class));Type type=$Gson$Types.newParameterizedTypeWithOwner(null,A.class,B.class,C.class);assertEquals(B.class,getFirstTypeArgument(type));}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesSerialization",0,"public void testParameterizedTypesSerialization()throws Exception {MyParameterizedType<Integer> src=new MyParameterizedType<Integer>(10);Type typeOfSrc=new TypeToken<MyParameterizedType<Integer>>(){}.getType();String json=gson.toJson(src,typeOfSrc);assertEquals(src.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeDeserialization",0,"public void testParameterizedTypeDeserialization()throws Exception {BagOfPrimitives bag=new BagOfPrimitives();MyParameterizedType<BagOfPrimitives> expected=new MyParameterizedType<BagOfPrimitives>(bag);Type expectedType=new TypeToken<MyParameterizedType<BagOfPrimitives>>(){}.getType();BagOfPrimitives bagDefaultInstance=new BagOfPrimitives();Gson gson=new GsonBuilder().registerTypeAdapter(expectedType,new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance)).create();String json=expected.getExpectedJson();MyParameterizedType<BagOfPrimitives> actual=gson.fromJson(json,expectedType);assertEquals(expected,actual);}"
"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersSerialization",0,"public void testTypesWithMultipleParametersSerialization()throws Exception {MultiParameters<Integer,Float,Double,String,BagOfPrimitives> src=new MultiParameters<Integer,Float,Double,String,BagOfPrimitives>(10,1.0F,2.1D,""abc"",new BagOfPrimitives());Type typeOfSrc=new TypeToken<MultiParameters<Integer,Float,Double,String,BagOfPrimitives>>(){}.getType();String json=gson.toJson(src,typeOfSrc);String expected=""{\""a\"":10,\""b\"":1.0,\""c\"":2.1,\""d\"":\""abc\"","" + ""\""e\"":{\""longValue\"":0,\""intValue\"":0,\""booleanValue\"":false,\""stringValue\"":\""\""}}"";assertEquals(expected,json);}"
"com.google.gson.functional.ParameterizedTypesTest.testTypesWithMultipleParametersDeserialization",0,"public void testTypesWithMultipleParametersDeserialization()throws Exception {Type typeOfTarget=new TypeToken<MultiParameters<Integer,Float,Double,String,BagOfPrimitives>>(){}.getType();String json=""{\""a\"":10,\""b\"":1.0,\""c\"":2.1,\""d\"":\""abc\"","" + ""\""e\"":{\""longValue\"":0,\""intValue\"":0,\""booleanValue\"":false,\""stringValue\"":\""\""}}"";MultiParameters<Integer,Float,Double,String,BagOfPrimitives> target=gson.fromJson(json,typeOfTarget);MultiParameters<Integer,Float,Double,String,BagOfPrimitives> expected=new MultiParameters<Integer,Float,Double,String,BagOfPrimitives>(10,1.0F,2.1D,""abc"",new BagOfPrimitives());assertEquals(expected,target);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithCustomSerializer",0,"public void testParameterizedTypeWithCustomSerializer(){Type ptIntegerType=new TypeToken<MyParameterizedType<Integer>>(){}.getType();Type ptStringType=new TypeToken<MyParameterizedType<String>>(){}.getType();Gson gson=new GsonBuilder().registerTypeAdapter(ptIntegerType,new MyParameterizedTypeAdapter<Integer>()).registerTypeAdapter(ptStringType,new MyParameterizedTypeAdapter<String>()).create();MyParameterizedType<Integer> intTarget=new MyParameterizedType<Integer>(10);String json=gson.toJson(intTarget,ptIntegerType);assertEquals(MyParameterizedTypeAdapter.<Integer>getExpectedJson(intTarget),json);MyParameterizedType<String> stringTarget=new MyParameterizedType<String>(""abc"");json=gson.toJson(stringTarget,ptStringType);assertEquals(MyParameterizedTypeAdapter.<String>getExpectedJson(stringTarget),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithCustomDeserializer",0,"public void testParameterizedTypesWithCustomDeserializer(){Type ptIntegerType=new TypeToken<MyParameterizedType<Integer>>(){}.getType();Type ptStringType=new TypeToken<MyParameterizedType<String>>(){}.getType();Gson gson=new GsonBuilder().registerTypeAdapter(ptIntegerType,new MyParameterizedTypeAdapter<Integer>()).registerTypeAdapter(ptStringType,new MyParameterizedTypeAdapter<String>()).registerTypeAdapter(ptStringType,new MyParameterizedTypeInstanceCreator<String>("""")).registerTypeAdapter(ptIntegerType,new MyParameterizedTypeInstanceCreator<Integer>(new Integer(0))).create();MyParameterizedType<Integer> src=new MyParameterizedType<Integer>(10);String json=MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);MyParameterizedType<Integer> intTarget=gson.fromJson(json,ptIntegerType);assertEquals(10,intTarget.value.intValue());MyParameterizedType<String> srcStr=new MyParameterizedType<String>(""abc"");json=MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);MyParameterizedType<String> stringTarget=gson.fromJson(json,ptStringType);assertEquals(""abc"",stringTarget.value);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypesWithWriterSerialization",0,"public void testParameterizedTypesWithWriterSerialization()throws Exception {Writer writer=new StringWriter();MyParameterizedType<Integer> src=new MyParameterizedType<Integer>(10);Type typeOfSrc=new TypeToken<MyParameterizedType<Integer>>(){}.getType();gson.toJson(src,typeOfSrc,writer);assertEquals(src.getExpectedJson(),writer.toString());}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithReaderDeserialization",0,"public void testParameterizedTypeWithReaderDeserialization()throws Exception {BagOfPrimitives bag=new BagOfPrimitives();MyParameterizedType<BagOfPrimitives> expected=new MyParameterizedType<BagOfPrimitives>(bag);Type expectedType=new TypeToken<MyParameterizedType<BagOfPrimitives>>(){}.getType();BagOfPrimitives bagDefaultInstance=new BagOfPrimitives();Gson gson=new GsonBuilder().registerTypeAdapter(expectedType,new MyParameterizedTypeInstanceCreator<BagOfPrimitives>(bagDefaultInstance)).create();Reader json=new StringReader(expected.getExpectedJson());MyParameterizedType<Integer> actual=gson.fromJson(json,expectedType);assertEquals(expected,actual);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysSerialization",0,"@SuppressWarnings(""unchecked"")public void testVariableTypeFieldsAndGenericArraysSerialization()throws Exception {Integer obj=0;Integer[]array={1,2,3};List<Integer> list=new ArrayList<Integer>();list.add(4);list.add(5);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(obj,array,list,arrayOfLists,list,arrayOfLists);String json=gson.toJson(objToSerialize,typeOfSrc);assertEquals(objToSerialize.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeFieldsAndGenericArraysDeserialization",0,"@SuppressWarnings(""unchecked"")public void testVariableTypeFieldsAndGenericArraysDeserialization()throws Exception {Integer obj=0;Integer[]array={1,2,3};List<Integer> list=new ArrayList<Integer>();list.add(4);list.add(5);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(obj,array,list,arrayOfLists,list,arrayOfLists);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeDeserialization",0,"public void testVariableTypeDeserialization()throws Exception {Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(0,null,null,null,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testVariableTypeArrayDeserialization",0,"public void testVariableTypeArrayDeserialization()throws Exception {Integer[]array={1,2,3};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,array,null,null,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeWithVariableTypeDeserialization",0,"public void testParameterizedTypeWithVariableTypeDeserialization()throws Exception {List<Integer> list=new ArrayList<Integer>();list.add(4);list.add(5);Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,null,list,null,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysSerialization",0,"@SuppressWarnings(""unchecked"")public void testParameterizedTypeGenericArraysSerialization()throws Exception {List<Integer> list=new ArrayList<Integer>();list.add(1);list.add(2);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,null,null,arrayOfLists,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);assertEquals(""{\""arrayOfListOfTypeParameters\"":[[1,2],[1,2]]}"",json);}"
"com.google.gson.functional.ParameterizedTypesTest.testParameterizedTypeGenericArraysDeserialization",0,"@SuppressWarnings(""unchecked"")public void testParameterizedTypeGenericArraysDeserialization()throws Exception {List<Integer> list=new ArrayList<Integer>();list.add(1);list.add(2);List<Integer>[]arrayOfLists=new List[]{list,list};Type typeOfSrc=new TypeToken<ObjectWithTypeVariables<Integer>>(){}.getType();ObjectWithTypeVariables<Integer> objToSerialize=new ObjectWithTypeVariables<Integer>(null,null,null,arrayOfLists,null,null);String json=gson.toJson(objToSerialize,typeOfSrc);ObjectWithTypeVariables<Integer> objAfterDeserialization=gson.fromJson(json,typeOfSrc);assertEquals(objAfterDeserialization.getExpectedJson(),json);}"
"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeSerialization",0,"public void testDeepParameterizedTypeSerialization(){Amount<MyQuantity> amount=new Amount<MyQuantity>();String json=gson.toJson(amount);assertTrue(json.contains(""value""));assertTrue(json.contains(""30""));}"
"com.google.gson.functional.ParameterizedTypesTest.testDeepParameterizedTypeDeserialization",0,"public void testDeepParameterizedTypeDeserialization(){String json=""{value:30}"";Type type=new TypeToken<Amount<MyQuantity>>(){}.getType();Amount<MyQuantity> amount=gson.fromJson(json,type);assertEquals(30,amount.value);}"
"com.google.gson.functional.MapTest.testMapSerialization",0,"public void testMapSerialization(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""a"",1);map.put(""b"",2);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertTrue(json.contains(""\""a\"":1""));assertTrue(json.contains(""\""b\"":2""));}"
"com.google.gson.functional.MapTest.testMapDeserialization",0,"public void testMapDeserialization(){String json=""{\""a\"":1,\""b\"":2}"";Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> target=gson.fromJson(json,typeOfMap);assertEquals(1,target.get(""a"").intValue());assertEquals(2,target.get(""b"").intValue());}"
"com.google.gson.functional.MapTest.testRawMapSerialization",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testRawMapSerialization(){Map map=new LinkedHashMap();map.put(""a"",1);map.put(""b"",""string"");String json=gson.toJson(map);assertTrue(json.contains(""\""a\"":1""));assertTrue(json.contains(""\""b\"":\""string\""""));}"
"com.google.gson.functional.MapTest.testMapSerializationEmpty",0,"public void testMapSerializationEmpty(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationEmpty",0,"public void testMapDeserializationEmpty(){Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{}"",typeOfMap);assertTrue(map.isEmpty());}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValue",0,"public void testMapSerializationWithNullValue(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""abc"",null);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithNullValue",0,"public void testMapDeserializationWithNullValue(){Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{\""abc\"":null}"",typeOfMap);assertEquals(1,map.size());assertNull(map.get(""abc""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValueButSerializeNulls",0,"public void testMapSerializationWithNullValueButSerializeNulls(){gson=new GsonBuilder().serializeNulls().create();Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""abc"",null);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{\""abc\"":null}"",json);}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullKey",0,"public void testMapSerializationWithNullKey(){Map<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(null,123);Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{\""null\"":123}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithNullKey",0,"public void testMapDeserializationWithNullKey(){Type typeOfMap=new TypeToken<Map<String,Integer>>(){}.getType();Map<String,Integer> map=gson.fromJson(""{\""null\"":123}"",typeOfMap);assertEquals(1,map.size());assertEquals(123,map.get(""null"").intValue());assertNull(map.get(null));map=gson.fromJson(""{null:123}"",typeOfMap);assertEquals(1,map.size());assertEquals(123,map.get(""null"").intValue());assertNull(map.get(null));}"
"com.google.gson.functional.MapTest.testMapSerializationWithIntegerKeys",0,"public void testMapSerializationWithIntegerKeys(){Map<Integer,String> map=new LinkedHashMap<Integer,String>();map.put(123,""456"");Type typeOfMap=new TypeToken<Map<Integer,String>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{\""123\"":\""456\""}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithIntegerKeys",0,"public void testMapDeserializationWithIntegerKeys(){Type typeOfMap=new TypeToken<Map<Integer,String>>(){}.getType();Map<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));}"
"com.google.gson.functional.MapTest.testHashMapDeserialization",0,"public void testHashMapDeserialization()throws Exception {Type typeOfMap=new TypeToken<HashMap<Integer,String>>(){}.getType();HashMap<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));}"
"com.google.gson.functional.MapTest.testSortedMap",0,"public void testSortedMap()throws Exception {Type typeOfMap=new TypeToken<SortedMap<Integer,String>>(){}.getType();SortedMap<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));}"
"com.google.gson.functional.MapTest.testConcurrentMap",0,"public void testConcurrentMap()throws Exception {Type typeOfMap=new TypeToken<ConcurrentMap<Integer,String>>(){}.getType();ConcurrentMap<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));String json=gson.toJson(map);assertEquals(""{\""123\"":\""456\""}"",json);}"
"com.google.gson.functional.MapTest.testConcurrentHashMap",0,"public void testConcurrentHashMap()throws Exception {Type typeOfMap=new TypeToken<ConcurrentHashMap<Integer,String>>(){}.getType();ConcurrentHashMap<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));String json=gson.toJson(map);assertEquals(""{\""123\"":\""456\""}"",json);}"
"com.google.gson.functional.MapTest.testConcurrentNavigableMap",0,"public void testConcurrentNavigableMap()throws Exception {Type typeOfMap=new TypeToken<ConcurrentNavigableMap<Integer,String>>(){}.getType();ConcurrentNavigableMap<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));String json=gson.toJson(map);assertEquals(""{\""123\"":\""456\""}"",json);}"
"com.google.gson.functional.MapTest.testConcurrentSkipListMap",0,"public void testConcurrentSkipListMap()throws Exception {Type typeOfMap=new TypeToken<ConcurrentSkipListMap<Integer,String>>(){}.getType();ConcurrentSkipListMap<Integer,String> map=gson.fromJson(""{\""123\"":\""456\""}"",typeOfMap);assertEquals(1,map.size());assertTrue(map.containsKey(123));assertEquals(""456"",map.get(123));String json=gson.toJson(map);assertEquals(""{\""123\"":\""456\""}"",json);}"
"com.google.gson.functional.MapTest.testParameterizedMapSubclassSerialization",0,"public void testParameterizedMapSubclassSerialization(){MyParameterizedMap<String,String> map=new MyParameterizedMap<String,String>(10);map.put(""a"",""b"");Type type=new TypeToken<MyParameterizedMap<String,String>>(){}.getType();String json=gson.toJson(map,type);assertTrue(json.contains(""\""a\"":\""b\""""));}"
"com.google.gson.functional.MapTest.testMapSubclassSerialization",0,"public void testMapSubclassSerialization(){MyMap map=new MyMap();map.put(""a"",""b"");String json=gson.toJson(map,MyMap.class);assertTrue(json.contains(""\""a\"":\""b\""""));}"
"com.google.gson.functional.MapTest.testMapStandardSubclassDeserialization",0,"public void testMapStandardSubclassDeserialization(){String json=""{a:'1',b:'2'}"";Type type=new TypeToken<LinkedHashMap<String,String>>(){}.getType();LinkedHashMap<String,Integer> map=gson.fromJson(json,type);assertEquals(""1"",map.get(""a""));assertEquals(""2"",map.get(""b""));}"
"com.google.gson.functional.MapTest.testMapSubclassDeserialization",0,"public void testMapSubclassDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(MyMap.class,new InstanceCreator<MyMap>(){public MyMap createInstance(Type type){return new MyMap();}}).create();String json=""{\""a\"":1,\""b\"":2}"";MyMap map=gson.fromJson(json,MyMap.class);assertEquals(""1"",map.get(""a""));assertEquals(""2"",map.get(""b""));}"
"com.google.gson.functional.MapTest.testCustomSerializerForSpecificMapType",0,"public void testCustomSerializerForSpecificMapType(){Type type=$Gson$Types.newParameterizedTypeWithOwner(null,Map.class,String.class,Long.class);Gson gson=new GsonBuilder().registerTypeAdapter(type,new JsonSerializer<Map<String,Long>>(){public JsonElement serialize(Map<String,Long> src,Type typeOfSrc,JsonSerializationContext context){JsonArray array=new JsonArray();for(long value : src.values()){array.add(new JsonPrimitive(value));}return array;}}).create();Map<String,Long> src=new LinkedHashMap<String,Long>();src.put(""one"",1L);src.put(""two"",2L);src.put(""three"",3L);assertEquals(""[1,2,3]"",gson.toJson(src,type));}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValues",0,"/** * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99*/public void testMapSerializationWithNullValues(){ClassWithAMap target=new ClassWithAMap();target.map.put(""name1"",null);target.map.put(""name2"",""value2"");String json=gson.toJson(target);assertFalse(json.contains(""name1""));assertTrue(json.contains(""name2""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithNullValuesSerialized",0,"/** * Created in response to http://code.google.com/p/google-gson/issues/detail?id=99*/public void testMapSerializationWithNullValuesSerialized(){Gson gson=new GsonBuilder().serializeNulls().create();ClassWithAMap target=new ClassWithAMap();target.map.put(""name1"",null);target.map.put(""name2"",""value2"");String json=gson.toJson(target);assertTrue(json.contains(""name1""));assertTrue(json.contains(""name2""));}"
"com.google.gson.functional.MapTest.testMapSerializationWithWildcardValues",0,"public void testMapSerializationWithWildcardValues(){Map<String,? extends Collection<? extends Integer>> map=new LinkedHashMap<String,Collection<Integer>>();map.put(""test"",null);Type typeOfMap=new TypeToken<Map<String,? extends Collection<? extends Integer>>>(){}.getType();String json=gson.toJson(map,typeOfMap);assertEquals(""{}"",json);}"
"com.google.gson.functional.MapTest.testMapDeserializationWithWildcardValues",0,"public void testMapDeserializationWithWildcardValues(){Type typeOfMap=new TypeToken<Map<String,? extends Long>>(){}.getType();Map<String,? extends Long> map=gson.fromJson(""{\""test\"":123}"",typeOfMap);assertEquals(1,map.size());assertEquals(new Long(123L),map.get(""test""));}"
"com.google.gson.functional.MapTest.testMapOfMapSerialization",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=95*/public void testMapOfMapSerialization(){Map<String,Map<String,String>> map=new HashMap<String,Map<String,String>>();Map<String,String> nestedMap=new HashMap<String,String>();nestedMap.put(""1"",""1"");nestedMap.put(""2"",""2"");map.put(""nestedMap"",nestedMap);String json=gson.toJson(map);assertTrue(json.contains(""nestedMap""));assertTrue(json.contains(""\""1\"":\""1\""""));assertTrue(json.contains(""\""2\"":\""2\""""));}"
"com.google.gson.functional.MapTest.testMapOfMapDeserialization",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=95*/public void testMapOfMapDeserialization(){String json=""{nestedMap:{'2':'2','1':'1'}}"";Type type=new TypeToken<Map<String,Map<String,String>>>(){}.getType();Map<String,Map<String,String>> map=gson.fromJson(json,type);Map<String,String> nested=map.get(""nestedMap"");assertEquals(""1"",nested.get(""1""));assertEquals(""2"",nested.get(""2""));}"
"com.google.gson.functional.MapTest.testMapWithQuotes",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=178*/public void testMapWithQuotes(){Map<String,String> map=new HashMap<String,String>();map.put(""a\""b"",""c\""d"");String json=gson.toJson(map);assertEquals(""{\""a\\\""b\"":\""c\\\""d\""}"",json);}"
"com.google.gson.functional.MapTest.testWriteMapsWithEmptyStringKey",0,"/** * From issue 227.*/public void testWriteMapsWithEmptyStringKey(){Map<String,Boolean> map=new HashMap<String,Boolean>();map.put("""",true);assertEquals(""{\""\"":true}"",gson.toJson(map));}"
"com.google.gson.functional.MapTest.testReadMapsWithEmptyStringKey",0,"public void testReadMapsWithEmptyStringKey(){Map<String,Boolean> map=gson.fromJson(""{\""\"":true}"",new TypeToken<Map<String,Boolean>>(){}.getType());assertEquals(Boolean.TRUE,map.get(""""));}"
"com.google.gson.functional.MapTest.testSerializeMaps",0,"/** * From bug report http://code.google.com/p/google-gson/issues/detail?id=204*/public void testSerializeMaps(){Map<String,Object> map=new LinkedHashMap<String,Object>();map.put(""a"",12);map.put(""b"",null);LinkedHashMap<String,Object> innerMap=new LinkedHashMap<String,Object>();innerMap.put(""test"",1);innerMap.put(""TestStringArray"",new String[]{""one"",""two""});map.put(""c"",innerMap);assertEquals(""{\""a\"":12,\""b\"":null,\""c\"":{\""test\"":1,\""TestStringArray\"":[\""one\"",\""two\""]}}"",new GsonBuilder().serializeNulls().create().toJson(map));assertEquals(""{\n  \""a\"": 12,\n  \""b\"": null,\n  \""c\"": "" + ""{\n    \""test\"": 1,\n    \""TestStringArray\"": "" + ""[\n      \""one\"",\n      \""two\""\n    ]\n  }\n}"",new GsonBuilder().setPrettyPrinting().serializeNulls().create().toJson(map));assertEquals(""{\""a\"":12,\""c\"":{\""test\"":1,\""TestStringArray\"":[\""one\"",\""two\""]}}"",new GsonBuilder().create().toJson(map));assertEquals(""{\n  \""a\"": 12,\n  \""c\"": "" + ""{\n    \""test\"": 1,\n    \""TestStringArray\"": "" + ""[\n      \""one\"",\n      \""two\""\n    ]\n  }\n}"",new GsonBuilder().setPrettyPrinting().create().toJson(map));innerMap.put(""d"",""e"");assertEquals(""{\""a\"":12,\""c\"":{\""test\"":1,\""TestStringArray\"":[\""one\"",\""two\""],\""d\"":\""e\""}}"",new Gson().toJson(map));}"
"com.google.gson.functional.MapTest.testInterfaceTypeMap",0,"public final void testInterfaceTypeMap(){MapClass element=new MapClass();TestTypes.Sub subType=new TestTypes.Sub();element.addBase(""Test"",subType);element.addSub(""Test"",subType);String subTypeJson=new Gson().toJson(subType);String expected=""{\""bases\"":{\""Test\"":"" + subTypeJson + ""},""+ ""\""subs\"":{\""Test\"":""+ subTypeJson+ ""}}"";Gson gsonWithComplexKeys=new GsonBuilder().enableComplexMapKeySerialization().create();String json=gsonWithComplexKeys.toJson(element);assertEquals(expected,json);Gson gson=new Gson();json=gson.toJson(element);assertEquals(expected,json);}"
"com.google.gson.functional.MapTest.testInterfaceTypeMapWithSerializer",0,"public final void testInterfaceTypeMapWithSerializer(){MapClass element=new MapClass();TestTypes.Sub subType=new TestTypes.Sub();element.addBase(""Test"",subType);element.addSub(""Test"",subType);Gson tempGson=new Gson();String subTypeJson=tempGson.toJson(subType);final JsonElement baseTypeJsonElement=tempGson.toJsonTree(subType,TestTypes.Base.class);String baseTypeJson=tempGson.toJson(baseTypeJsonElement);String expected=""{\""bases\"":{\""Test\"":"" + baseTypeJson + ""},""+ ""\""subs\"":{\""Test\"":""+ subTypeJson+ ""}}"";JsonSerializer<TestTypes.Base> baseTypeAdapter=new JsonSerializer<TestTypes.Base>(){public JsonElement serialize(TestTypes.Base src,Type typeOfSrc,JsonSerializationContext context){return baseTypeJsonElement;}};Gson gson=new GsonBuilder().enableComplexMapKeySerialization().registerTypeAdapter(TestTypes.Base.class,baseTypeAdapter).create();String json=gson.toJson(element);assertEquals(expected,json);gson=new GsonBuilder().registerTypeAdapter(TestTypes.Base.class,baseTypeAdapter).create();json=gson.toJson(element);assertEquals(expected,json);}"
"com.google.gson.functional.MapTest.testGeneralMapField",0,"public void testGeneralMapField()throws Exception {MapWithGeneralMapParameters map=new MapWithGeneralMapParameters();map.map.put(""string"",""testString"");map.map.put(""stringArray"",new String[]{""one"",""two""});map.map.put(""objectArray"",new Object[]{1,2L,""three""});String expected=""{\""map\"":{\""string\"":\""testString\"",\""stringArray\"":"" + ""[\""one\"",\""two\""],\""objectArray\"":[1,2,\""three\""]}}"";assertEquals(expected,gson.toJson(map));gson=new GsonBuilder().enableComplexMapKeySerialization().create();assertEquals(expected,gson.toJson(map));}"
"com.google.gson.functional.MapTest.testComplexKeysSerialization",0,"public void testComplexKeysSerialization(){Map<Point,String> map=new LinkedHashMap<Point,String>();map.put(new Point(2,3),""a"");map.put(new Point(5,7),""b"");String json=""{\""2,3\"":\""a\"",\""5,7\"":\""b\""}"";assertEquals(json,gson.toJson(map,new TypeToken<Map<Point,String>>(){}.getType()));assertEquals(json,gson.toJson(map,Map.class));}"
"com.google.gson.functional.MapTest.testComplexKeysDeserialization",0,"public void testComplexKeysDeserialization(){String json=""{'2,3':'a','5,7':'b'}"";try {gson.fromJson(json,new TypeToken<Map<Point,String>>(){}.getType());fail();}catch(JsonParseException expected){}}"
"com.google.gson.functional.MapTest.testStringKeyDeserialization",0,"public void testStringKeyDeserialization(){String json=""{'2,3':'a','5,7':'b'}"";Map<String,String> map=new LinkedHashMap<String,String>();map.put(""2,3"",""a"");map.put(""5,7"",""b"");assertEquals(map,gson.fromJson(json,new TypeToken<Map<String,String>>(){}.getType()));}"
"com.google.gson.functional.MapTest.testNumberKeyDeserialization",0,"public void testNumberKeyDeserialization(){String json=""{'2.3':'a','5.7':'b'}"";Map<Double,String> map=new LinkedHashMap<Double,String>();map.put(2.3,""a"");map.put(5.7,""b"");assertEquals(map,gson.fromJson(json,new TypeToken<Map<Double,String>>(){}.getType()));}"
"com.google.gson.functional.MapTest.testBooleanKeyDeserialization",0,"public void testBooleanKeyDeserialization(){String json=""{'true':'a','false':'b'}"";Map<Boolean,String> map=new LinkedHashMap<Boolean,String>();map.put(true,""a"");map.put(false,""b"");assertEquals(map,gson.fromJson(json,new TypeToken<Map<Boolean,String>>(){}.getType()));}"
"com.google.gson.functional.MapTest.testMapDeserializationWithDuplicateKeys",0,"public void testMapDeserializationWithDuplicateKeys(){try {gson.fromJson(""{'a':1,'a':2}"",new TypeToken<Map<String,Integer>>(){}.getType());fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.MapTest.testSerializeMapOfMaps",0,"public void testSerializeMapOfMaps(){Type type=new TypeToken<Map<String,Map<String,String>>>(){}.getType();Map<String,Map<String,String>> map=newMap(""a"",newMap(""ka1"",""va1"",""ka2"",""va2""),""b"",newMap(""kb1"",""vb1"",""kb2"",""vb2""));assertEquals(""{'a':{'ka1':'va1','ka2':'va2'},'b':{'kb1':'vb1','kb2':'vb2'}}"",gson.toJson(map,type).replace('""','\''));}"
"com.google.gson.functional.MapTest.testDeerializeMapOfMaps",0,"public void testDeerializeMapOfMaps(){Type type=new TypeToken<Map<String,Map<String,String>>>(){}.getType();Map<String,Map<String,String>> map=newMap(""a"",newMap(""ka1"",""va1"",""ka2"",""va2""),""b"",newMap(""kb1"",""vb1"",""kb2"",""vb2""));String json=""{'a':{'ka1':'va1','ka2':'va2'},'b':{'kb1':'vb1','kb2':'vb2'}}"";assertEquals(map,gson.fromJson(json,type));}"
"com.google.gson.functional.MapTest.testMapNamePromotionWithJsonElementReader",0,"public void testMapNamePromotionWithJsonElementReader(){String json=""{'2.3':'a'}"";Map<Double,String> map=new LinkedHashMap<Double,String>();map.put(2.3,""a"");JsonElement tree=new JsonParser().parse(json);assertEquals(map,gson.fromJson(tree,new TypeToken<Map<Double,String>>(){}.getType()));}"
"com.google.gson.stream.JsonWriterTest.testTopLevelValueTypes",1,"public void testTopLevelValueTypes()throws IOException {StringWriter string1=new StringWriter();JsonWriter writer1=new JsonWriter(string1);writer1.value(true);writer1.close();assertEquals(""true"",string1.toString());StringWriter string2=new StringWriter();JsonWriter writer2=new JsonWriter(string2);writer2.nullValue();writer2.close();assertEquals(""null"",string2.toString());StringWriter string3=new StringWriter();JsonWriter writer3=new JsonWriter(string3);writer3.value(123);writer3.close();assertEquals(""123"",string3.toString());StringWriter string4=new StringWriter();JsonWriter writer4=new JsonWriter(string4);writer4.value(123.4);writer4.close();assertEquals(""123.4"",string4.toString());StringWriter string5=new StringWriter();JsonWriter writert=new JsonWriter(string5);writert.value(""a"");writert.close();assertEquals(""\""a\"""",string5.toString());}"
"com.google.gson.stream.JsonWriterTest.testInvalidTopLevelTypes",0,"public void testInvalidTopLevelTypes()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.name(""hello"");try {jsonWriter.value(""world"");fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testTwoNames",0,"public void testTwoNames()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");try {jsonWriter.name(""a"");fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNameWithoutValue",0,"public void testNameWithoutValue()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");try {jsonWriter.endObject();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testValueWithoutName",0,"public void testValueWithoutName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();try {jsonWriter.value(true);fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testMultipleTopLevelValues",0,"public void testMultipleTopLevelValues()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray().endArray();try {jsonWriter.beginArray();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testBadNestingObject",0,"public void testBadNestingObject()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.beginObject();try {jsonWriter.endArray();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testBadNestingArray",0,"public void testBadNestingArray()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.beginArray();try {jsonWriter.endObject();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNullName",0,"public void testNullName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();try {jsonWriter.name(null);fail();}catch(NullPointerException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNullStringValue",0,"public void testNullStringValue()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");jsonWriter.value((String)null);jsonWriter.endObject();assertEquals(""{\""a\"":null}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testJsonValue",0,"public void testJsonValue()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");jsonWriter.jsonValue(""{\""b\"":true}"");jsonWriter.name(""c"");jsonWriter.value(1);jsonWriter.endObject();assertEquals(""{\""a\"":{\""b\"":true},\""c\"":1}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testNonFiniteDoubles",0,"public void testNonFiniteDoubles()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();try {jsonWriter.value(Double.NaN);fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(Double.NEGATIVE_INFINITY);fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(Double.POSITIVE_INFINITY);fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.stream.JsonWriterTest.testNonFiniteBoxedDoubles",0,"public void testNonFiniteBoxedDoubles()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();try {jsonWriter.value(new Double(Double.NaN));fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(new Double(Double.NEGATIVE_INFINITY));fail();}catch(IllegalArgumentException expected){}try {jsonWriter.value(new Double(Double.POSITIVE_INFINITY));fail();}catch(IllegalArgumentException expected){}}"
"com.google.gson.stream.JsonWriterTest.testDoubles",0,"public void testDoubles()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(-0.0);jsonWriter.value(1.0);jsonWriter.value(Double.MAX_VALUE);jsonWriter.value(Double.MIN_VALUE);jsonWriter.value(0.0);jsonWriter.value(-0.5);jsonWriter.value(2.2250738585072014E-308);jsonWriter.value(Math.PI);jsonWriter.value(Math.E);jsonWriter.endArray();jsonWriter.close();assertEquals(""[-0.0,"" + ""1.0,"" + ""1.7976931348623157E308,""+ ""4.9E-324,""+ ""0.0,""+ ""-0.5,""+ ""2.2250738585072014E-308,""+ ""3.141592653589793,""+ ""2.718281828459045]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testLongs",0,"public void testLongs()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(0);jsonWriter.value(1);jsonWriter.value(-1);jsonWriter.value(Long.MIN_VALUE);jsonWriter.value(Long.MAX_VALUE);jsonWriter.endArray();jsonWriter.close();assertEquals(""[0,"" + ""1,"" + ""-1,""+ ""-9223372036854775808,""+ ""9223372036854775807]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testNumbers",0,"public void testNumbers()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(new BigInteger(""0""));jsonWriter.value(new BigInteger(""9223372036854775808""));jsonWriter.value(new BigInteger(""-9223372036854775809""));jsonWriter.value(new BigDecimal(""3.141592653589793238462643383""));jsonWriter.endArray();jsonWriter.close();assertEquals(""[0,"" + ""9223372036854775808,"" + ""-9223372036854775809,""+ ""3.141592653589793238462643383]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testBooleans",0,"public void testBooleans()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(true);jsonWriter.value(false);jsonWriter.endArray();assertEquals(""[true,false]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testNulls",0,"public void testNulls()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.nullValue();jsonWriter.endArray();assertEquals(""[null]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testStrings",0,"public void testStrings()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(""a"");jsonWriter.value(""a\"""");jsonWriter.value(""\"""");jsonWriter.value("":"");jsonWriter.value("","");jsonWriter.value(""\b"");jsonWriter.value(""\f"");jsonWriter.value(""\n"");jsonWriter.value(""\r"");jsonWriter.value(""\t"");jsonWriter.value("" "");jsonWriter.value(""\\"");jsonWriter.value(""{"");jsonWriter.value(""}"");jsonWriter.value(""["");jsonWriter.value(""]"");jsonWriter.value(""\0"");jsonWriter.value(""\u0019"");jsonWriter.endArray();assertEquals(""[\""a\"","" + ""\""a\\\""\"","" + ""\""\\\""\"",""+ ""\"":\"",""+ ""\"",\"",""+ ""\""\\b\"",""+ ""\""\\f\"",""+ ""\""\\n\"",""+ ""\""\\r\"",""+ ""\""\\t\"",""+ ""\"" \"",""+ ""\""\\\\\"",""+ ""\""{\"",""+ ""\""}\"",""+ ""\""[\"",""+ ""\""]\"",""+ ""\""\\u0000\"",""+ ""\""\\u0019\""]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testUnicodeLineBreaksEscaped",0,"public void testUnicodeLineBreaksEscaped()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.value(""\u2028 \u2029"");jsonWriter.endArray();assertEquals(""[\""\\u2028 \\u2029\""]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testEmptyArray",0,"public void testEmptyArray()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.endArray();assertEquals(""[]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testEmptyObject",0,"public void testEmptyObject()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.endObject();assertEquals(""{}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testObjectsInArrays",0,"public void testObjectsInArrays()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginArray();jsonWriter.beginObject();jsonWriter.name(""a"").value(5);jsonWriter.name(""b"").value(false);jsonWriter.endObject();jsonWriter.beginObject();jsonWriter.name(""c"").value(6);jsonWriter.name(""d"").value(true);jsonWriter.endObject();jsonWriter.endArray();assertEquals(""[{\""a\"":5,\""b\"":false},"" + ""{\""c\"":6,\""d\"":true}]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testArraysInObjects",0,"public void testArraysInObjects()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"");jsonWriter.beginArray();jsonWriter.value(5);jsonWriter.value(false);jsonWriter.endArray();jsonWriter.name(""b"");jsonWriter.beginArray();jsonWriter.value(6);jsonWriter.value(true);jsonWriter.endArray();jsonWriter.endObject();assertEquals(""{\""a\"":[5,false],"" + ""\""b\"":[6,true]}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testDeepNestingArrays",0,"public void testDeepNestingArrays()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);for (int i=0;i < 20;i++){jsonWriter.beginArray();}for (int i=0;i < 20;i++){jsonWriter.endArray();}assertEquals(""[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testDeepNestingObjects",0,"public void testDeepNestingObjects()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();for (int i=0;i < 20;i++){jsonWriter.name(""a"");jsonWriter.beginObject();}for (int i=0;i < 20;i++){jsonWriter.endObject();}jsonWriter.endObject();assertEquals(""{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":"" + ""{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{\""a\"":{"" + ""}}}}}}}}}}}}}}}}}}}}}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testRepeatedName",0,"public void testRepeatedName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.beginObject();jsonWriter.name(""a"").value(true);jsonWriter.name(""a"").value(false);jsonWriter.endObject();assertEquals(""{\""a\"":true,\""a\"":false}"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testPrettyPrintObject",0,"public void testPrettyPrintObject()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.setIndent(""   "");jsonWriter.beginObject();jsonWriter.name(""a"").value(true);jsonWriter.name(""b"").value(false);jsonWriter.name(""c"").value(5.0);jsonWriter.name(""e"").nullValue();jsonWriter.name(""f"").beginArray();jsonWriter.value(6.0);jsonWriter.value(7.0);jsonWriter.endArray();jsonWriter.name(""g"").beginObject();jsonWriter.name(""h"").value(8.0);jsonWriter.name(""i"").value(9.0);jsonWriter.endObject();jsonWriter.endObject();String expected=""{\n"" + ""   \""a\"": true,\n"" + ""   \""b\"": false,\n""+ ""   \""c\"": 5.0,\n""+ ""   \""e\"": null,\n""+ ""   \""f\"": [\n""+ ""      6.0,\n""+ ""      7.0\n""+ ""   ],\n""+ ""   \""g\"": {\n""+ ""      \""h\"": 8.0,\n""+ ""      \""i\"": 9.0\n""+ ""   }\n""+ ""}"";assertEquals(expected,stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testPrettyPrintArray",0,"public void testPrettyPrintArray()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter jsonWriter=new JsonWriter(stringWriter);jsonWriter.setIndent(""   "");jsonWriter.beginArray();jsonWriter.value(true);jsonWriter.value(false);jsonWriter.value(5.0);jsonWriter.nullValue();jsonWriter.beginObject();jsonWriter.name(""a"").value(6.0);jsonWriter.name(""b"").value(7.0);jsonWriter.endObject();jsonWriter.beginArray();jsonWriter.value(8.0);jsonWriter.value(9.0);jsonWriter.endArray();jsonWriter.endArray();String expected=""[\n"" + ""   true,\n"" + ""   false,\n""+ ""   5.0,\n""+ ""   null,\n""+ ""   {\n""+ ""      \""a\"": 6.0,\n""+ ""      \""b\"": 7.0\n""+ ""   },\n""+ ""   [\n""+ ""      8.0,\n""+ ""      9.0\n""+ ""   ]\n""+ ""]"";assertEquals(expected,stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testLenientWriterPermitsMultipleTopLevelValues",0,"public void testLenientWriterPermitsMultipleTopLevelValues()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.setLenient(true);writer.beginArray();writer.endArray();writer.beginArray();writer.endArray();writer.close();assertEquals(""[][]"",stringWriter.toString());}"
"com.google.gson.stream.JsonWriterTest.testStrictWriterDoesNotPermitMultipleTopLevelValues",0,"public void testStrictWriterDoesNotPermitMultipleTopLevelValues()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.beginArray();writer.endArray();try {writer.beginArray();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnStructure",0,"public void testClosedWriterThrowsOnStructure()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.beginArray();writer.endArray();writer.close();try {writer.beginArray();fail();}catch(IllegalStateException expected){}try {writer.endArray();fail();}catch(IllegalStateException expected){}try {writer.beginObject();fail();}catch(IllegalStateException expected){}try {writer.endObject();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnName",0,"public void testClosedWriterThrowsOnName()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.beginArray();writer.endArray();writer.close();try {writer.name(""a"");fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnValue",0,"public void testClosedWriterThrowsOnValue()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.beginArray();writer.endArray();writer.close();try {writer.value(""a"");fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testClosedWriterThrowsOnFlush",0,"public void testClosedWriterThrowsOnFlush()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.beginArray();writer.endArray();writer.close();try {writer.flush();fail();}catch(IllegalStateException expected){}}"
"com.google.gson.stream.JsonWriterTest.testWriterCloseIsIdempotent",0,"public void testWriterCloseIsIdempotent()throws IOException {StringWriter stringWriter=new StringWriter();JsonWriter writer=new JsonWriter(stringWriter);writer.beginArray();writer.endArray();writer.close();writer.close();}"
"com.google.gson.functional.UncategorizedTest.testInvalidJsonDeserializationFails",0,"public void testInvalidJsonDeserializationFails()throws Exception {try {gson.fromJson(""adfasdf1112,,,\"":"",BagOfPrimitives.class);fail(""Bad JSON should throw a ParseException"");}catch(JsonParseException expected){}try {gson.fromJson(""{adfasdf1112,,,\"":}"",BagOfPrimitives.class);fail(""Bad JSON should throw a ParseException"");}catch(JsonParseException expected){}}"
"com.google.gson.functional.UncategorizedTest.testObjectEqualButNotSameSerialization",0,"public void testObjectEqualButNotSameSerialization()throws Exception {ClassOverridingEquals objA=new ClassOverridingEquals();ClassOverridingEquals objB=new ClassOverridingEquals();objB.ref=objA;String json=gson.toJson(objB);assertEquals(objB.getExpectedJson(),json);}"
"com.google.gson.functional.UncategorizedTest.testStaticFieldsAreNotSerialized",0,"public void testStaticFieldsAreNotSerialized(){BagOfPrimitives target=new BagOfPrimitives();assertFalse(gson.toJson(target).contains(""DEFAULT_VALUE""));}"
"com.google.gson.functional.UncategorizedTest.testGsonInstanceReusableForSerializationAndDeserialization",0,"public void testGsonInstanceReusableForSerializationAndDeserialization(){BagOfPrimitives bag=new BagOfPrimitives();String json=gson.toJson(bag);BagOfPrimitives deserialized=gson.fromJson(json,BagOfPrimitives.class);assertEquals(bag,deserialized);}"
"com.google.gson.functional.UncategorizedTest.testReturningDerivedClassesDuringDeserialization",0,"/** * This test ensures that a custom deserializer is able to return a derived class instance for a base class object. For a motivation for this test,see Issue 37 and http://groups.google.com/group/google-gson/browse_thread/thread/677d56e9976d7761*/public void testReturningDerivedClassesDuringDeserialization(){Gson gson=new GsonBuilder().registerTypeAdapter(Base.class,new BaseTypeAdapter()).create();String json=""{\""opType\"":\""OP1\""}"";Base base=gson.fromJson(json,Base.class);assertTrue(base instanceof Derived1);assertEquals(OperationType.OP1,base.opType);json=""{\""opType\"":\""OP2\""}"";base=gson.fromJson(json,Base.class);assertTrue(base instanceof Derived2);assertEquals(OperationType.OP2,base.opType);}"
"com.google.gson.functional.UncategorizedTest.testTrailingWhitespace",0,"/** * Test that trailing whitespace is ignored. http://code.google.com/p/google-gson/issues/detail?id=302*/public void testTrailingWhitespace()throws Exception {List<Integer> integers=gson.fromJson(""[1,2,3]\n\n  "",new TypeToken<List<Integer>>(){}.getType());assertEquals(Arrays.asList(1,2,3),integers);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedSerialization",0,"public void testPrimitiveIntegerAutoboxedSerialization(){assertEquals(""1"",gson.toJson(1));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedDeserialization",0,"public void testPrimitiveIntegerAutoboxedDeserialization(){int expected=1;int actual=gson.fromJson(""1"",int.class);assertEquals(expected,actual);actual=gson.fromJson(""1"",Integer.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testByteSerialization",0,"public void testByteSerialization(){assertEquals(""1"",gson.toJson(1,byte.class));assertEquals(""1"",gson.toJson(1,Byte.class));}"
"com.google.gson.functional.PrimitiveTest.testShortSerialization",0,"public void testShortSerialization(){assertEquals(""1"",gson.toJson(1,short.class));assertEquals(""1"",gson.toJson(1,Short.class));}"
"com.google.gson.functional.PrimitiveTest.testByteDeserialization",0,"public void testByteDeserialization(){Byte target=gson.fromJson(""1"",Byte.class);assertEquals(1,(byte)target);byte primitive=gson.fromJson(""1"",byte.class);assertEquals(1,primitive);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveIntegerAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveIntegerAutoboxedInASingleElementArraySerialization(){int target[]={-9332};assertEquals(""[-9332]"",gson.toJson(target));assertEquals(""[-9332]"",gson.toJson(target,int[].class));assertEquals(""[-9332]"",gson.toJson(target,Integer[].class));}"
"com.google.gson.functional.PrimitiveTest.testReallyLongValuesSerialization",0,"public void testReallyLongValuesSerialization(){long value=333961828784581L;assertEquals(""333961828784581"",gson.toJson(value));}"
"com.google.gson.functional.PrimitiveTest.testReallyLongValuesDeserialization",0,"public void testReallyLongValuesDeserialization(){String json=""333961828784581"";long value=gson.fromJson(json,Long.class);assertEquals(333961828784581L,value);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedSerialization",0,"public void testPrimitiveLongAutoboxedSerialization(){assertEquals(""1"",gson.toJson(1L,long.class));assertEquals(""1"",gson.toJson(1L,Long.class));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedDeserialization",0,"public void testPrimitiveLongAutoboxedDeserialization(){long expected=1L;long actual=gson.fromJson(""1"",long.class);assertEquals(expected,actual);actual=gson.fromJson(""1"",Long.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveLongAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveLongAutoboxedInASingleElementArraySerialization(){long[]target={-23L};assertEquals(""[-23]"",gson.toJson(target));assertEquals(""[-23]"",gson.toJson(target,long[].class));assertEquals(""[-23]"",gson.toJson(target,Long[].class));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedSerialization",0,"public void testPrimitiveBooleanAutoboxedSerialization(){assertEquals(""true"",gson.toJson(true));assertEquals(""false"",gson.toJson(false));}"
"com.google.gson.functional.PrimitiveTest.testBooleanDeserialization",0,"public void testBooleanDeserialization(){boolean value=gson.fromJson(""false"",boolean.class);assertEquals(false,value);value=gson.fromJson(""true"",boolean.class);assertEquals(true,value);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveBooleanAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveBooleanAutoboxedInASingleElementArraySerialization(){boolean target[]={false};assertEquals(""[false]"",gson.toJson(target));assertEquals(""[false]"",gson.toJson(target,boolean[].class));assertEquals(""[false]"",gson.toJson(target,Boolean[].class));}"
"com.google.gson.functional.PrimitiveTest.testNumberSerialization",0,"public void testNumberSerialization(){Number expected=1L;String json=gson.toJson(expected);assertEquals(expected.toString(),json);json=gson.toJson(expected,Number.class);assertEquals(expected.toString(),json);}"
"com.google.gson.functional.PrimitiveTest.testNumberDeserialization",0,"public void testNumberDeserialization(){String json=""1"";Number expected=new Integer(json);Number actual=gson.fromJson(json,Number.class);assertEquals(expected.intValue(),actual.intValue());json=String.valueOf(Long.MAX_VALUE);expected=new Long(json);actual=gson.fromJson(json,Number.class);assertEquals(expected.longValue(),actual.longValue());json=""1.0"";actual=gson.fromJson(json,Number.class);assertEquals(1L,actual.longValue());}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedSerialization",0,"public void testPrimitiveDoubleAutoboxedSerialization(){assertEquals(""-122.08234335"",gson.toJson(-122.08234335));assertEquals(""122.08112002"",gson.toJson(new Double(122.08112002)));}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedDeserialization",0,"public void testPrimitiveDoubleAutoboxedDeserialization(){double actual=gson.fromJson(""-122.08858585"",double.class);assertEquals(-122.08858585,actual);actual=gson.fromJson(""122.023900008000"",Double.class);assertEquals(122.023900008,actual);}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveDoubleAutoboxedInASingleElementArraySerialization",0,"public void testPrimitiveDoubleAutoboxedInASingleElementArraySerialization(){double[]target={-122.08D};assertEquals(""[-122.08]"",gson.toJson(target));assertEquals(""[-122.08]"",gson.toJson(target,double[].class));assertEquals(""[-122.08]"",gson.toJson(target,Double[].class));}"
"com.google.gson.functional.PrimitiveTest.testDoubleAsStringRepresentationDeserialization",0,"public void testDoubleAsStringRepresentationDeserialization(){String doubleValue=""1.0043E+5"";Double expected=Double.valueOf(doubleValue);Double actual=gson.fromJson(doubleValue,Double.class);assertEquals(expected,actual);double actual1=gson.fromJson(doubleValue,double.class);assertEquals(expected.doubleValue(),actual1);}"
"com.google.gson.functional.PrimitiveTest.testDoubleNoFractAsStringRepresentationDeserialization",0,"public void testDoubleNoFractAsStringRepresentationDeserialization(){String doubleValue=""1E+5"";Double expected=Double.valueOf(doubleValue);Double actual=gson.fromJson(doubleValue,Double.class);assertEquals(expected,actual);double actual1=gson.fromJson(doubleValue,double.class);assertEquals(expected.doubleValue(),actual1);}"
"com.google.gson.functional.PrimitiveTest.testDoubleArrayDeserialization",0,"public void testDoubleArrayDeserialization(){String json=""[0.0,0.004761904761904762,3.4013606962703525E-4,7.936508173034305E-4,"" + ""0.0011904761904761906,0.0]"";double[]values=gson.fromJson(json,double[].class);assertEquals(6,values.length);assertEquals(0.0,values[0]);assertEquals(0.004761904761904762,values[1]);assertEquals(3.4013606962703525E-4,values[2]);assertEquals(7.936508173034305E-4,values[3]);assertEquals(0.0011904761904761906,values[4]);assertEquals(0.0,values[5]);}"
"com.google.gson.functional.PrimitiveTest.testLargeDoubleDeserialization",0,"public void testLargeDoubleDeserialization(){String doubleValue=""1.234567899E8"";Double expected=Double.valueOf(doubleValue);Double actual=gson.fromJson(doubleValue,Double.class);assertEquals(expected,actual);double actual1=gson.fromJson(doubleValue,double.class);assertEquals(expected.doubleValue(),actual1);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalSerialization",0,"public void testBigDecimalSerialization(){BigDecimal target=new BigDecimal(""-122.0e-21"");String json=gson.toJson(target);assertEquals(target,new BigDecimal(json));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalDeserialization",0,"public void testBigDecimalDeserialization(){BigDecimal target=new BigDecimal(""-122.0e-21"");String json=""-122.0e-21"";assertEquals(target,gson.fromJson(json,BigDecimal.class));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalInASingleElementArraySerialization",0,"public void testBigDecimalInASingleElementArraySerialization(){BigDecimal[]target={new BigDecimal(""-122.08e-21"")};String json=gson.toJson(target);String actual=extractElementFromArray(json);assertEquals(target[0],new BigDecimal(actual));json=gson.toJson(target,BigDecimal[].class);actual=extractElementFromArray(json);assertEquals(target[0],new BigDecimal(actual));}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalSerialization",0,"public void testSmallValueForBigDecimalSerialization(){BigDecimal target=new BigDecimal(""1.55"");String actual=gson.toJson(target);assertEquals(target.toString(),actual);}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigDecimalDeserialization",0,"public void testSmallValueForBigDecimalDeserialization(){BigDecimal expected=new BigDecimal(""1.55"");BigDecimal actual=gson.fromJson(""1.55"",BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionSerialization",0,"public void testBigDecimalPreservePrecisionSerialization(){String expectedValue=""1.000"";BigDecimal obj=new BigDecimal(expectedValue);String actualValue=gson.toJson(obj);assertEquals(expectedValue,actualValue);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalPreservePrecisionDeserialization",0,"public void testBigDecimalPreservePrecisionDeserialization(){String json=""1.000"";BigDecimal expected=new BigDecimal(json);BigDecimal actual=gson.fromJson(json,BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalAsStringRepresentationDeserialization",0,"public void testBigDecimalAsStringRepresentationDeserialization(){String doubleValue=""0.05E+5"";BigDecimal expected=new BigDecimal(doubleValue);BigDecimal actual=gson.fromJson(doubleValue,BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalNoFractAsStringRepresentationDeserialization",0,"public void testBigDecimalNoFractAsStringRepresentationDeserialization(){String doubleValue=""5E+5"";BigDecimal expected=new BigDecimal(doubleValue);BigDecimal actual=gson.fromJson(doubleValue,BigDecimal.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerSerialization",0,"public void testBigIntegerSerialization(){BigInteger target=new BigInteger(""12121211243123245845384534687435634558945453489543985435"");assertEquals(target.toString(),gson.toJson(target));}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerDeserialization",0,"public void testBigIntegerDeserialization(){String json=""12121211243123245845384534687435634558945453489543985435"";BigInteger target=new BigInteger(json);assertEquals(target,gson.fromJson(json,BigInteger.class));}"
"com.google.gson.functional.PrimitiveTest.testBigIntegerInASingleElementArraySerialization",0,"public void testBigIntegerInASingleElementArraySerialization(){BigInteger[]target={new BigInteger(""1212121243434324323254365345367456456456465464564564"")};String json=gson.toJson(target);String actual=extractElementFromArray(json);assertEquals(target[0],new BigInteger(actual));json=gson.toJson(target,BigInteger[].class);actual=extractElementFromArray(json);assertEquals(target[0],new BigInteger(actual));}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerSerialization",0,"public void testSmallValueForBigIntegerSerialization(){BigInteger target=new BigInteger(""15"");String actual=gson.toJson(target);assertEquals(target.toString(),actual);}"
"com.google.gson.functional.PrimitiveTest.testSmallValueForBigIntegerDeserialization",0,"public void testSmallValueForBigIntegerDeserialization(){BigInteger expected=new BigInteger(""15"");BigInteger actual=gson.fromJson(""15"",BigInteger.class);assertEquals(expected,actual);}"
"com.google.gson.functional.PrimitiveTest.testBadValueForBigIntegerDeserialization",0,"public void testBadValueForBigIntegerDeserialization(){try {gson.fromJson(""15.099"",BigInteger.class);fail(""BigInteger can not be decimal values."");}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testMoreSpecificSerialization",0,"public void testMoreSpecificSerialization(){Gson gson=new Gson();String expected=""This is a string"";String expectedJson=gson.toJson(expected);Serializable serializableString=expected;String actualJson=gson.toJson(serializableString,Serializable.class);assertFalse(expectedJson.equals(actualJson));}"
"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerializationNotSupportedByDefault",0,"public void testDoubleNaNSerializationNotSupportedByDefault(){try {double nan=Double.NaN;gson.toJson(nan);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}try {gson.toJson(Double.NaN);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDoubleNaNSerialization",0,"public void testDoubleNaNSerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();double nan=Double.NaN;assertEquals(""NaN"",gson.toJson(nan));assertEquals(""NaN"",gson.toJson(Double.NaN));}"
"com.google.gson.functional.PrimitiveTest.testDoubleNaNDeserialization",0,"public void testDoubleNaNDeserialization(){assertTrue(Double.isNaN(gson.fromJson(""NaN"",Double.class)));assertTrue(Double.isNaN(gson.fromJson(""NaN"",double.class)));}"
"com.google.gson.functional.PrimitiveTest.testFloatNaNSerializationNotSupportedByDefault",0,"public void testFloatNaNSerializationNotSupportedByDefault(){try {float nan=Float.NaN;gson.toJson(nan);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}try {gson.toJson(Float.NaN);fail(""Gson should not accept NaN for serialization"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testFloatNaNSerialization",0,"public void testFloatNaNSerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();float nan=Float.NaN;assertEquals(""NaN"",gson.toJson(nan));assertEquals(""NaN"",gson.toJson(Float.NaN));}"
"com.google.gson.functional.PrimitiveTest.testFloatNaNDeserialization",0,"public void testFloatNaNDeserialization(){assertTrue(Float.isNaN(gson.fromJson(""NaN"",Float.class)));assertTrue(Float.isNaN(gson.fromJson(""NaN"",float.class)));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalNaNDeserializationNotSupported",0,"public void testBigDecimalNaNDeserializationNotSupported(){try {gson.fromJson(""NaN"",BigDecimal.class);fail(""Gson should not accept NaN for deserialization by default."");}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerializationNotSupportedByDefault",0,"public void testDoubleInfinitySerializationNotSupportedByDefault(){try {double infinity=Double.POSITIVE_INFINITY;gson.toJson(infinity);fail(""Gson should not accept positive infinity for serialization by default."");}catch(IllegalArgumentException expected){}try {gson.toJson(Double.POSITIVE_INFINITY);fail(""Gson should not accept positive infinity for serialization by default."");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDoubleInfinitySerialization",0,"public void testDoubleInfinitySerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();double infinity=Double.POSITIVE_INFINITY;assertEquals(""Infinity"",gson.toJson(infinity));assertEquals(""Infinity"",gson.toJson(Double.POSITIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testDoubleInfinityDeserialization",0,"public void testDoubleInfinityDeserialization(){assertTrue(Double.isInfinite(gson.fromJson(""Infinity"",Double.class)));assertTrue(Double.isInfinite(gson.fromJson(""Infinity"",double.class)));}"
"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerializationNotSupportedByDefault",0,"public void testFloatInfinitySerializationNotSupportedByDefault(){try {float infinity=Float.POSITIVE_INFINITY;gson.toJson(infinity);fail(""Gson should not accept positive infinity for serialization by default"");}catch(IllegalArgumentException expected){}try {gson.toJson(Float.POSITIVE_INFINITY);fail(""Gson should not accept positive infinity for serialization by default"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testFloatInfinitySerialization",0,"public void testFloatInfinitySerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();float infinity=Float.POSITIVE_INFINITY;assertEquals(""Infinity"",gson.toJson(infinity));assertEquals(""Infinity"",gson.toJson(Float.POSITIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testFloatInfinityDeserialization",0,"public void testFloatInfinityDeserialization(){assertTrue(Float.isInfinite(gson.fromJson(""Infinity"",Float.class)));assertTrue(Float.isInfinite(gson.fromJson(""Infinity"",float.class)));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalInfinityDeserializationNotSupported",0,"public void testBigDecimalInfinityDeserializationNotSupported(){try {gson.fromJson(""Infinity"",BigDecimal.class);fail(""Gson should not accept positive infinity for deserialization with BigDecimal"");}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerializationNotSupportedByDefault",0,"public void testNegativeInfinitySerializationNotSupportedByDefault(){try {double negativeInfinity=Double.NEGATIVE_INFINITY;gson.toJson(negativeInfinity);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}try {gson.toJson(Double.NEGATIVE_INFINITY);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinitySerialization",0,"public void testNegativeInfinitySerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();double negativeInfinity=Double.NEGATIVE_INFINITY;assertEquals(""-Infinity"",gson.toJson(negativeInfinity));assertEquals(""-Infinity"",gson.toJson(Double.NEGATIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityDeserialization",0,"public void testNegativeInfinityDeserialization(){assertTrue(Double.isInfinite(gson.fromJson(""-Infinity"",double.class)));assertTrue(Double.isInfinite(gson.fromJson(""-Infinity"",Double.class)));}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerializationNotSupportedByDefault",0,"public void testNegativeInfinityFloatSerializationNotSupportedByDefault(){try {float negativeInfinity=Float.NEGATIVE_INFINITY;gson.toJson(negativeInfinity);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}try {gson.toJson(Float.NEGATIVE_INFINITY);fail(""Gson should not accept negative infinity for serialization by default"");}catch(IllegalArgumentException expected){}}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatSerialization",0,"public void testNegativeInfinityFloatSerialization(){Gson gson=new GsonBuilder().serializeSpecialFloatingPointValues().create();float negativeInfinity=Float.NEGATIVE_INFINITY;assertEquals(""-Infinity"",gson.toJson(negativeInfinity));assertEquals(""-Infinity"",gson.toJson(Float.NEGATIVE_INFINITY));}"
"com.google.gson.functional.PrimitiveTest.testNegativeInfinityFloatDeserialization",0,"public void testNegativeInfinityFloatDeserialization(){assertTrue(Float.isInfinite(gson.fromJson(""-Infinity"",float.class)));assertTrue(Float.isInfinite(gson.fromJson(""-Infinity"",Float.class)));}"
"com.google.gson.functional.PrimitiveTest.testBigDecimalNegativeInfinityDeserializationNotSupported",0,"public void testBigDecimalNegativeInfinityDeserializationNotSupported(){try {gson.fromJson(""-Infinity"",BigDecimal.class);fail(""Gson should not accept positive infinity for deserialization"");}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testLongAsStringSerialization",0,"public void testLongAsStringSerialization()throws Exception {gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();String result=gson.toJson(15L);assertEquals(""\""15\"""",result);result=gson.toJson(2);assertEquals(""2"",result);}"
"com.google.gson.functional.PrimitiveTest.testLongAsStringDeserialization",0,"public void testLongAsStringDeserialization()throws Exception {long value=gson.fromJson(""\""15\"""",long.class);assertEquals(15,value);gson=new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create();value=gson.fromJson(""\""25\"""",long.class);assertEquals(25,value);}"
"com.google.gson.functional.PrimitiveTest.testQuotedStringSerializationAndDeserialization",0,"public void testQuotedStringSerializationAndDeserialization()throws Exception {String value=""String Blah Blah Blah...1,2,3"";String serializedForm=gson.toJson(value);assertEquals(""\"""" + value + ""\"""",serializedForm);String actual=gson.fromJson(serializedForm,String.class);assertEquals(value,actual);}"
"com.google.gson.functional.PrimitiveTest.testUnquotedStringDeserializationFails",0,"public void testUnquotedStringDeserializationFails()throws Exception {assertEquals(""UnquotedSingleWord"",gson.fromJson(""UnquotedSingleWord"",String.class));String value=""String Blah Blah Blah...1,2,3"";try {gson.fromJson(value,String.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testHtmlCharacterSerialization",0,"public void testHtmlCharacterSerialization()throws Exception {String target=""<script>var a = 12;</script>"";String result=gson.toJson(target);assertFalse(result.equals('""' + target + '""'));gson=new GsonBuilder().disableHtmlEscaping().create();result=gson.toJson(target);assertTrue(result.equals('""' + target + '""'));}"
"com.google.gson.functional.PrimitiveTest.testDeserializePrimitiveWrapperAsObjectField",0,"public void testDeserializePrimitiveWrapperAsObjectField(){String json=""{i:10}"";ClassWithIntegerField target=gson.fromJson(json,ClassWithIntegerField.class);assertEquals(10,target.i.intValue());}"
"com.google.gson.functional.PrimitiveTest.testPrimitiveClassLiteral",0,"public void testPrimitiveClassLiteral(){assertEquals(1,gson.fromJson(""1"",int.class).intValue());assertEquals(1,gson.fromJson(new StringReader(""1""),int.class).intValue());assertEquals(1,gson.fromJson(new JsonPrimitive(1),int.class).intValue());}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsLongPrimitive",0,"public void testDeserializeJsonObjectAsLongPrimitive(){try {gson.fromJson(""{'abc':1}"",long.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsLongWrapper",0,"public void testDeserializeJsonArrayAsLongWrapper(){try {gson.fromJson(""[1,2,3]"",Long.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsInt",0,"public void testDeserializeJsonArrayAsInt(){try {gson.fromJson(""[1,2,3,4]"",int.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsInteger",0,"public void testDeserializeJsonObjectAsInteger(){try {gson.fromJson(""{}"",Integer.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsShortPrimitive",0,"public void testDeserializeJsonObjectAsShortPrimitive(){try {gson.fromJson(""{'abc':1}"",short.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsShortWrapper",0,"public void testDeserializeJsonArrayAsShortWrapper(){try {gson.fromJson(""['a','b']"",Short.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsDoublePrimitive",0,"public void testDeserializeJsonArrayAsDoublePrimitive(){try {gson.fromJson(""[1,2]"",double.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsDoubleWrapper",0,"public void testDeserializeJsonObjectAsDoubleWrapper(){try {gson.fromJson(""{'abc':1}"",Double.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsFloatPrimitive",0,"public void testDeserializeJsonObjectAsFloatPrimitive(){try {gson.fromJson(""{'abc':1}"",float.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsFloatWrapper",0,"public void testDeserializeJsonArrayAsFloatWrapper(){try {gson.fromJson(""[1,2,3]"",Float.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBytePrimitive",0,"public void testDeserializeJsonObjectAsBytePrimitive(){try {gson.fromJson(""{'abc':1}"",byte.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsByteWrapper",0,"public void testDeserializeJsonArrayAsByteWrapper(){try {gson.fromJson(""[1,2,3,4]"",Byte.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBooleanPrimitive",0,"public void testDeserializeJsonObjectAsBooleanPrimitive(){try {gson.fromJson(""{'abc':1}"",boolean.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBooleanWrapper",0,"public void testDeserializeJsonArrayAsBooleanWrapper(){try {gson.fromJson(""[1,2,3,4]"",Boolean.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigDecimal",0,"public void testDeserializeJsonArrayAsBigDecimal(){try {gson.fromJson(""[1,2,3,4]"",BigDecimal.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigDecimal",0,"public void testDeserializeJsonObjectAsBigDecimal(){try {gson.fromJson(""{'a':1}"",BigDecimal.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsBigInteger",0,"public void testDeserializeJsonArrayAsBigInteger(){try {gson.fromJson(""[1,2,3,4]"",BigInteger.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsBigInteger",0,"public void testDeserializeJsonObjectAsBigInteger(){try {gson.fromJson(""{'c':2}"",BigInteger.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonArrayAsNumber",0,"public void testDeserializeJsonArrayAsNumber(){try {gson.fromJson(""[1,2,3,4]"",Number.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializeJsonObjectAsNumber",0,"public void testDeserializeJsonObjectAsNumber(){try {gson.fromJson(""{'c':2}"",Number.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializingDecimalPointValueZeroSucceeds",0,"public void testDeserializingDecimalPointValueZeroSucceeds(){assertEquals(1,(int)gson.fromJson(""1.0"",Integer.class));}"
"com.google.gson.functional.PrimitiveTest.testDeserializingNonZeroDecimalPointValuesAsIntegerFails",0,"public void testDeserializingNonZeroDecimalPointValuesAsIntegerFails(){try {gson.fromJson(""1.02"",Byte.class);fail();}catch(JsonSyntaxException expected){}try {gson.fromJson(""1.02"",Short.class);fail();}catch(JsonSyntaxException expected){}try {gson.fromJson(""1.02"",Integer.class);fail();}catch(JsonSyntaxException expected){}try {gson.fromJson(""1.02"",Long.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsIntegerFails",0,"public void testDeserializingBigDecimalAsIntegerFails(){try {gson.fromJson(""-122.08e-213"",Integer.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsInteger",0,"public void testDeserializingBigIntegerAsInteger(){try {gson.fromJson(""12121211243123245845384534687435634558945453489543985435"",Integer.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsLong",0,"public void testDeserializingBigIntegerAsLong(){try {gson.fromJson(""12121211243123245845384534687435634558945453489543985435"",Long.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testValueVeryCloseToZeroIsZero",0,"public void testValueVeryCloseToZeroIsZero(){assertEquals(0,(byte)gson.fromJson(""-122.08e-2132"",byte.class));assertEquals(0,(short)gson.fromJson(""-122.08e-2132"",short.class));assertEquals(0,(int)gson.fromJson(""-122.08e-2132"",int.class));assertEquals(0,(long)gson.fromJson(""-122.08e-2132"",long.class));assertEquals(-0.0f,gson.fromJson(""-122.08e-2132"",float.class));assertEquals(-0.0,gson.fromJson(""-122.08e-2132"",double.class));assertEquals(0.0f,gson.fromJson(""122.08e-2132"",float.class));assertEquals(0.0,gson.fromJson(""122.08e-2132"",double.class));}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsFloat",0,"public void testDeserializingBigDecimalAsFloat(){String json=""-122.08e-2132332"";float actual=gson.fromJson(json,float.class);assertEquals(-0.0f,actual);}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsDouble",0,"public void testDeserializingBigDecimalAsDouble(){String json=""-122.08e-2132332"";double actual=gson.fromJson(json,double.class);assertEquals(-0.0d,actual);}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigDecimalAsBigIntegerFails",0,"public void testDeserializingBigDecimalAsBigIntegerFails(){try {gson.fromJson(""-122.08e-213"",BigInteger.class);fail();}catch(JsonSyntaxException expected){}}"
"com.google.gson.functional.PrimitiveTest.testDeserializingBigIntegerAsBigDecimal",0,"public void testDeserializingBigIntegerAsBigDecimal(){BigDecimal actual=gson.fromJson(""12121211243123245845384534687435634558945453489543985435"",BigDecimal.class);assertEquals(""12121211243123245845384534687435634558945453489543985435"",actual.toPlainString());}"
"com.google.gson.functional.PrimitiveTest.testStringsAsBooleans",0,"public void testStringsAsBooleans(){String json=""['true','false','TRUE','yes','1']"";assertEquals(Arrays.asList(true,false,true,false,false),gson.<List<Boolean>>fromJson(json,new TypeToken<List<Boolean>>(){}.getType()));}"
