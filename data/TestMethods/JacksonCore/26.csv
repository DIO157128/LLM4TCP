test_case,faulty,test_code
"com.fasterxml.jackson.core.json.GeneratorFailFromReaderTest.testFailOnWritingStringNotFieldNameBytes",0,"public void testFailOnWritingStringNotFieldNameBytes()throws Exception {_testFailOnWritingStringNotFieldName(F,false);}"
"com.fasterxml.jackson.core.json.GeneratorFailFromReaderTest.testFailOnWritingStringNotFieldNameChars",0,"public void testFailOnWritingStringNotFieldNameChars()throws Exception {_testFailOnWritingStringNotFieldName(F,true);}"
"com.fasterxml.jackson.core.json.GeneratorFailFromReaderTest.testFailOnWritingStringFromReaderWithTooFewCharacters",0,"public void testFailOnWritingStringFromReaderWithTooFewCharacters()throws Exception {_testFailOnWritingStringFromReaderWithTooFewCharacters(F,true);_testFailOnWritingStringFromReaderWithTooFewCharacters(F,false);}"
"com.fasterxml.jackson.core.json.GeneratorFailFromReaderTest.testFailOnWritingStringFromNullReader",0,"public void testFailOnWritingStringFromNullReader()throws Exception {_testFailOnWritingStringFromNullReader(F,true);_testFailOnWritingStringFromNullReader(F,false);}"
"com.fasterxml.jackson.core.util.TestNumberPrinting.testIntPrinting",0,"public void testIntPrinting()throws Exception {assertIntPrint(0);assertIntPrint(-3);assertIntPrint(1234);assertIntPrint(-1234);assertIntPrint(56789);assertIntPrint(-56789);assertIntPrint(999999);assertIntPrint(-999999);assertIntPrint(1000000);assertIntPrint(-1000000);assertIntPrint(10000001);assertIntPrint(-10000001);assertIntPrint(-100000012);assertIntPrint(100000012);assertIntPrint(1999888777);assertIntPrint(-1999888777);assertIntPrint(Integer.MAX_VALUE);assertIntPrint(Integer.MIN_VALUE);Random rnd=new Random(12345L);for (int i=0;i < 251000;++i){assertIntPrint(rnd.nextInt());}}"
"com.fasterxml.jackson.core.util.TestNumberPrinting.testLongPrinting",0,"public void testLongPrinting()throws Exception {assertLongPrint(0L,0);assertLongPrint(1L,0);assertLongPrint(-1L,0);assertLongPrint(Long.MAX_VALUE,0);assertLongPrint(Long.MIN_VALUE,0);assertLongPrint(Long.MAX_VALUE - 1L,0);assertLongPrint(Long.MIN_VALUE + 1L,0);Random rnd=new Random(12345L);for (int i=0;i < 678000;++i){long l=((long)rnd.nextInt()<< 32)| (long)rnd.nextInt();assertLongPrint(l,i);}}"
"com.fasterxml.jackson.core.read.NumberOverflowTest.testSimpleLongOverflow",0,"public void testSimpleLongOverflow()throws Exception {BigInteger below=BigInteger.valueOf(Long.MIN_VALUE);below=below.subtract(BigInteger.ONE);BigInteger above=BigInteger.valueOf(Long.MAX_VALUE);above=above.add(BigInteger.ONE);String DOC_BELOW=below.toString()+ "" "";String DOC_ABOVE=below.toString()+ "" "";for(int mode : ALL_MODES){JsonParser p=createParser(FACTORY,mode,DOC_BELOW);p.nextToken();try {long x=p.getLongValue();fail(""Expected an exception for underflow (input "" + p.getText()+ ""): instead,got long value: ""+ x);}catch(InputCoercionException e){verifyException(e,""out of range of long"");}p.close();p=createParser(mode,DOC_ABOVE);p.nextToken();try {long x=p.getLongValue();fail(""Expected an exception for underflow (input "" + p.getText()+ ""): instead,got long value: ""+ x);}catch(InputCoercionException e){verifyException(e,""out of range of long"");}p.close();}}"
"com.fasterxml.jackson.core.read.NumberOverflowTest.testMaliciousLongOverflow",0,"public void testMaliciousLongOverflow()throws Exception {for(int mode : ALL_STREAMING_MODES){for(String doc : new String[]{BIG_POS_DOC,BIG_NEG_DOC}){JsonParser p=createParser(mode,doc);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());try {p.getLongValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of long"");verifyException(e,""Integer with "" + BIG_NUM_LEN + "" digits"");}p.close();}}}"
"com.fasterxml.jackson.core.read.NumberOverflowTest.testMaliciousIntOverflow",0,"public void testMaliciousIntOverflow()throws Exception {for(int mode : ALL_STREAMING_MODES){for(String doc : new String[]{BIG_POS_DOC,BIG_NEG_DOC}){JsonParser p=createParser(mode,doc);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");verifyException(e,""Integer with "" + BIG_NUM_LEN + "" digits"");}p.close();}}}"
"com.fasterxml.jackson.core.read.NumberOverflowTest.testMaliciousBigIntToDouble",0,"public void testMaliciousBigIntToDouble()throws Exception {for(int mode : ALL_STREAMING_MODES){final String doc=BIG_POS_DOC;JsonParser p=createParser(mode,doc);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());double d=p.getDoubleValue();assertEquals(Double.valueOf(BIG_POS_INTEGER),d);assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.read.NumberOverflowTest.testMaliciousBigIntToFloat",0,"public void testMaliciousBigIntToFloat()throws Exception {for(int mode : ALL_STREAMING_MODES){final String doc=BIG_POS_DOC;JsonParser p=createParser(mode,doc);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());float f=p.getFloatValue();assertEquals(Float.valueOf(BIG_POS_INTEGER),f);assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.json.async.ConfigTest.testFactoryDefaults",0,"public void testFactoryDefaults()throws IOException {assertTrue(DEFAULT_F.canParseAsync());}"
"com.fasterxml.jackson.core.json.async.ConfigTest.testAsyncParerDefaults",0,"public void testAsyncParerDefaults()throws IOException {byte[]data=_jsonDoc(""[true,false]"");AsyncReaderWrapper r=asyncForBytes(DEFAULT_F,100,data,0);JsonParser p=r.parser();assertTrue(p.canParseAsync());assertNull(p.getCodec());assertNull(p.getInputSource());assertEquals(-1,p.releaseBuffered(new StringWriter()));assertEquals(0,p.releaseBuffered(new ByteArrayOutputStream()));assertToken(JsonToken.START_ARRAY,r.nextToken());assertEquals(11,p.releaseBuffered(new ByteArrayOutputStream()));p.close();}"
"com.fasterxml.jackson.core.main.TestRawStringWriting.testUtf8RawStrings",0,"/** * Unit test for ""JsonGenerator.writeRawUTF8String()""*/public void testUtf8RawStrings()throws Exception {List<byte[]> strings=generateStrings(new Random(28),750000,false);ByteArrayOutputStream out=new ByteArrayOutputStream(16000);JsonFactory jf=new JsonFactory();JsonGenerator jgen=jf.createGenerator(out,JsonEncoding.UTF8);jgen.writeStartArray();for(byte[]str : strings){jgen.writeRawUTF8String(str,0,str.length);}jgen.writeEndArray();jgen.close();byte[]json=out.toByteArray();JsonParser jp=jf.createParser(json);assertToken(JsonToken.START_ARRAY,jp.nextToken());for(byte[]inputBytes : strings){assertToken(JsonToken.VALUE_STRING,jp.nextToken());String string=jp.getText();byte[]outputBytes=string.getBytes(""UTF-8"");assertEquals(inputBytes.length,outputBytes.length);assertArrayEquals(inputBytes,outputBytes);}assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestRawStringWriting.testUtf8StringsWithEscaping",0,"/** * Unit test for ""JsonGenerator.writeUTF8String()"",which needs to handle escaping properly*/public void testUtf8StringsWithEscaping()throws Exception {List<byte[]> strings=generateStrings(new Random(28),720000,true);ByteArrayOutputStream out=new ByteArrayOutputStream(16000);JsonFactory jf=new JsonFactory();JsonGenerator jgen=jf.createGenerator(out,JsonEncoding.UTF8);jgen.writeStartArray();for(byte[]str : strings){jgen.writeUTF8String(str,0,str.length);jgen.writeRaw('\n');}jgen.writeEndArray();jgen.close();byte[]json=out.toByteArray();JsonParser jp=jf.createParser(json);assertToken(JsonToken.START_ARRAY,jp.nextToken());for(byte[]inputBytes : strings){assertToken(JsonToken.VALUE_STRING,jp.nextToken());String string=jp.getText();byte[]outputBytes=string.getBytes(""UTF-8"");assertEquals(inputBytes.length,outputBytes.length);assertArrayEquals(inputBytes,outputBytes);}assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestRawStringWriting.testWriteRawWithSerializable",0,"public void testWriteRawWithSerializable()throws Exception {JsonFactory jf=new JsonFactory();_testWithRaw(jf,true);_testWithRaw(jf,false);}"
"com.fasterxml.jackson.core.json.async.AsyncTokenFilterTest.testFilteredNonBlockingParserAllContent",0,"public void testFilteredNonBlockingParserAllContent()throws IOException {NonBlockingJsonParser nonBlockingParser=(NonBlockingJsonParser)JSON_F.createNonBlockingByteArrayParser();FilteringParserDelegate filteredParser=new FilteringParserDelegate(nonBlockingParser,TOKEN_FILTER,true,true);nonBlockingParser.feedInput(INPUT_BYTES,0,INPUT_BYTES.length);int expectedIdx=0;while (expectedIdx < EXPECTED_TOKENS.length){JsonToken actual=filteredParser.nextToken();assertToken(EXPECTED_TOKENS[expectedIdx],actual);expectedIdx++;}filteredParser.close();nonBlockingParser.close();}"
"com.fasterxml.jackson.core.json.async.AsyncTokenFilterTest.testSkipChildrenFailOnSplit",0,"public void testSkipChildrenFailOnSplit()throws IOException {NonBlockingJsonParser nbParser=(NonBlockingJsonParser)JSON_F.createNonBlockingByteArrayParser();@SuppressWarnings(""resource"")FilteringParserDelegate filteredParser=new FilteringParserDelegate(nbParser,TOKEN_FILTER,true,true);nbParser.feedInput(INPUT_BYTES,0,5);assertToken(JsonToken.START_OBJECT,nbParser.nextToken());try {nbParser.skipChildren();fail(""Should not pass!"");}catch(JsonParseException e){verifyException(e,""not enough content available"");verifyException(e,""skipChildren()"");}nbParser.close();filteredParser.close();}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testStringWrite",0,"public void testStringWrite()throws Exception {String[]inputStrings=new String[]{"""",""X"",""1234567890""};for (int useReader=0;useReader < 2;++useReader){for (int writeString=0;writeString < 2;++writeString){for (int strIx=0;strIx < inputStrings.length;++strIx){String input=inputStrings[strIx];JsonGenerator gen;ByteArrayOutputStream bout=new ByteArrayOutputStream();if (useReader != 0){gen=JSON_F.createGenerator(new OutputStreamWriter(bout,""UTF-8""));}else {gen=JSON_F.createGenerator(bout,JsonEncoding.UTF8);}if (writeString > 0){gen.writeString(input);}else {int len=input.length();char[]buffer=new char[len + 20];input.getChars(0,len,buffer,strIx);gen.writeString(buffer,strIx,len);}gen.flush();gen.close();JsonParser jp=JSON_F.createParser(new ByteArrayInputStream(bout.toByteArray()));JsonToken t=jp.nextToken();assertNotNull(""Document \"""" + bout.toString(""UTF-8"")+ ""\"" yielded no tokens"",t);assertEquals(JsonToken.VALUE_STRING,t);assertEquals(input,jp.getText());assertEquals(null,jp.nextToken());jp.close();}}}}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testIntValueWrite",0,"public void testIntValueWrite()throws Exception {doTestIntValueWrite(false,false);doTestIntValueWrite(true,false);doTestIntValueWrite(false,true);doTestIntValueWrite(true,true);}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testLongValueWrite",0,"public void testLongValueWrite()throws Exception {doTestLongValueWrite(false,false);doTestLongValueWrite(true,false);doTestLongValueWrite(false,true);doTestLongValueWrite(true,true);}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testBooleanWrite",0,"public void testBooleanWrite()throws Exception {for (int i=0;i < 4;++i){boolean state=(i & 1)== 0;boolean pad=(i & 2)== 0;StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeBoolean(state);if (pad){gen.writeRaw("" "");}gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);JsonToken t=jp.nextToken();String exp=Boolean.valueOf(state).toString();if (!exp.equals(jp.getText())){fail(""Expected '"" + exp + ""',got '""+ jp.getText());}assertEquals(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE,t);assertEquals(null,jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testNullWrite",0,"public void testNullWrite()throws Exception {for (int i=0;i < 2;++i){boolean pad=(i & 1)== 0;StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeNull();if (pad){gen.writeRaw("" "");}gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);JsonToken t=jp.nextToken();String exp=""null"";if (!exp.equals(jp.getText())){fail(""Expected '"" + exp + ""',got '""+ jp.getText());}assertEquals(JsonToken.VALUE_NULL,t);assertEquals(null,jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testRootIntsWrite",0,"public void testRootIntsWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeNumber(1);gen.writeNumber(2);gen.writeNumber(-13);gen.close();String docStr=sw.toString();try {JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(1,jp.getIntValue());assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(2,jp.getIntValue());assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(-13,jp.getIntValue());jp.close();}catch(IOException e){fail(""Problem with document ["" + docStr + ""]: ""+ e.getMessage());}}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testFieldValueWrites",0,"public void testFieldValueWrites()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeStartObject();gen.writeNumberField(""long"",3L);gen.writeNumberField(""double"",0.25);gen.writeNumberField(""float"",-0.25f);gen.writeEndObject();gen.close();assertEquals(""{\""long\"":3,\""double\"":0.25,\""float\"":-0.25}"",sw.toString().trim());}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testOutputContext",0,"/** * Test to verify that output context actually contains useful information*/public void testOutputContext()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);JsonStreamContext ctxt=gen.getOutputContext();assertTrue(ctxt.inRoot());gen.writeStartObject();assertTrue(gen.getOutputContext().inObject());gen.writeFieldName(""a"");assertEquals(""a"",gen.getOutputContext().getCurrentName());gen.writeStartArray();assertTrue(gen.getOutputContext().inArray());gen.writeStartObject();assertTrue(gen.getOutputContext().inObject());gen.writeFieldName(""b"");ctxt=gen.getOutputContext();assertEquals(""b"",ctxt.getCurrentName());gen.writeNumber(123);assertEquals(""b"",ctxt.getCurrentName());gen.writeFieldName(""c"");assertEquals(""c"",gen.getOutputContext().getCurrentName());gen.writeNumber(5);gen.writeFieldName(""d"");assertEquals(""d"",gen.getOutputContext().getCurrentName());gen.writeStartArray();ctxt=gen.getOutputContext();assertTrue(ctxt.inArray());assertEquals(0,ctxt.getCurrentIndex());assertEquals(0,ctxt.getEntryCount());gen.writeBoolean(true);ctxt=gen.getOutputContext();assertTrue(ctxt.inArray());assertEquals(0,ctxt.getCurrentIndex());assertEquals(1,ctxt.getEntryCount());gen.writeNumber(3);ctxt=gen.getOutputContext();assertTrue(ctxt.inArray());assertEquals(1,ctxt.getCurrentIndex());assertEquals(2,ctxt.getEntryCount());gen.writeEndArray();assertTrue(gen.getOutputContext().inObject());gen.writeEndObject();assertTrue(gen.getOutputContext().inArray());gen.writeEndArray();assertTrue(gen.getOutputContext().inObject());gen.writeEndObject();assertTrue(gen.getOutputContext().inRoot());gen.close();}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testGetOutputTarget",0,"public void testGetOutputTarget()throws Exception {OutputStream out=new ByteArrayOutputStream();JsonGenerator gen=JSON_F.createGenerator(out);assertSame(out,gen.getOutputTarget());gen.close();StringWriter sw=new StringWriter();gen=JSON_F.createGenerator(sw);assertSame(sw,gen.getOutputTarget());gen.close();}"
"com.fasterxml.jackson.core.json.GeneratorBasicTest.testGetOutputBufferd",0,"public void testGetOutputBufferd()throws Exception {OutputStream out=new ByteArrayOutputStream();JsonGenerator gen=JSON_F.createGenerator(out);_testOutputBuffered(gen);gen.close();StringWriter sw=new StringWriter();gen=JSON_F.createGenerator(sw);_testOutputBuffered(gen);gen.close();}"
"com.fasterxml.jackson.core.filter.JsonPointerGeneratorFilteringTest.testSimplePropertyWithPath",0,"public void testSimplePropertyWithPath()throws Exception {_assert(SIMPLE_INPUT,""/c"",true,""{'c':{'d':{'a':true}}}"");_assert(SIMPLE_INPUT,""/c/d"",true,""{'c':{'d':{'a':true}}}"");_assert(SIMPLE_INPUT,""/c/d/a"",true,""{'c':{'d':{'a':true}}}"");_assert(SIMPLE_INPUT,""/c/d/a"",true,""{'c':{'d':{'a':true}}}"");_assert(SIMPLE_INPUT,""/a"",true,""{'a':1}"");_assert(SIMPLE_INPUT,""/d"",true,""{'d':null}"");_assert(SIMPLE_INPUT,""/x"",true,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerGeneratorFilteringTest.testSimplePropertyWithoutPath",0,"public void testSimplePropertyWithoutPath()throws Exception {_assert(SIMPLE_INPUT,""/c"",false,""{'d':{'a':true}}"");_assert(SIMPLE_INPUT,""/c/d"",false,""{'a':true}"");_assert(SIMPLE_INPUT,""/c/d/a"",false,""true"");_assert(SIMPLE_INPUT,""/a"",false,""1"");_assert(SIMPLE_INPUT,""/d"",false,""null"");_assert(SIMPLE_INPUT,""/x"",false,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerGeneratorFilteringTest.testArrayElementWithPath",0,"public void testArrayElementWithPath()throws Exception {_assert(SIMPLE_INPUT,""/b"",true,""{'b':[1,2,3]}"");_assert(SIMPLE_INPUT,""/b/1"",true,""{'b':[2]}"");_assert(SIMPLE_INPUT,""/b/2"",true,""{'b':[3]}"");_assert(SIMPLE_INPUT,""/b/8"",true,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerGeneratorFilteringTest.testArrayNestedWithPath",0,"public void testArrayNestedWithPath()throws Exception {_assert(""{'a':[true,{'b':3,'d':2},false]}"",""/a/1/b"",true,""{'a':[{'b':3}]}"");_assert(""[true,[1]]"",""/0"",true,""[true]"");_assert(""[true,[1]]"",""/1"",true,""[[1]]"");_assert(""[true,[1,2,[true],3],0]"",""/0"",true,""[true]"");_assert(""[true,[1,2,[true],3],0]"",""/1"",true,""[[1,2,[true],3]]"");_assert(""[true,[1,2,[true],3],0]"",""/1/2"",true,""[[[true]]]"");_assert(""[true,[1,2,[true],3],0]"",""/1/2/0"",true,""[[[true]]]"");_assert(""[true,[1,2,[true],3],0]"",""/1/3/0"",true,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerGeneratorFilteringTest.testArrayNestedWithoutPath",0,"public void testArrayNestedWithoutPath()throws Exception {_assert(""{'a':[true,{'b':3,'d':2},false]}"",""/a/1/b"",false,""3"");_assert(""[true,[1,2,[true],3],0]"",""/0"",false,""true"");_assert(""[true,[1,2,[true],3],0]"",""/1"",false,""[1,2,[true],3]"");_assert(""[true,[1,2,[true],3],0]"",""/1/2"",false,""[true]"");_assert(""[true,[1,2,[true],3],0]"",""/1/2/0"",false,""true"");_assert(""[true,[1,2,[true],3],0]"",""/1/3/0"",false,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerGeneratorFilteringTest.testArrayElementWithoutPath",0,"public void testArrayElementWithoutPath()throws Exception {_assert(SIMPLE_INPUT,""/b"",false,""[1,2,3]"");_assert(SIMPLE_INPUT,""/b/1"",false,""2"");_assert(SIMPLE_INPUT,""/b/2"",false,""3"");_assert(SIMPLE_INPUT,""/b/8"",false,"""");_assert(SIMPLE_INPUT,""/x"",false,"""");}"
"com.fasterxml.jackson.core.io.SegmentedStringWriterTest.testSimple",0,"public void testSimple()throws Exception {BufferRecycler br=new BufferRecycler();SegmentedStringWriter w=new SegmentedStringWriter(br);StringBuilder exp=new StringBuilder();for (int i=0;exp.length()< 100;++i){String nr=String.valueOf(i);exp.append(' ').append(nr);w.append(' ');switch (i % 4){case 0:      w.append(nr);break;case 1:{String str=""  "" + nr;w.append(str,2,str.length());}break;case 2:w.write(nr.toCharArray());break;default:{char[]ch=("" "" + nr + "" "").toCharArray();w.write(ch,1,nr.length());}break;}}w.flush();w.close();String act=w.getAndClear();assertEquals(exp.toString(),act);}"
"com.fasterxml.jackson.core.json.LocationInArrayTest.testOffsetInArraysBytes",0,"public void testOffsetInArraysBytes()throws Exception {_testOffsetInArrays(true);}"
"com.fasterxml.jackson.core.json.LocationInArrayTest.testOffsetInArraysChars",0,"public void testOffsetInArraysChars()throws Exception {_testOffsetInArrays(false);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testDefaultSettings",0,"/** * Unit test for verifying that by default comments are not recognized.*/public void testDefaultSettings()throws Exception {JsonFactory jf=new JsonFactory();assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));JsonParser p=jf.createParser(new StringReader(""[1 ]""));assertFalse(p.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));p.close();}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCommentsDisabled",0,"public void testCommentsDisabled()throws Exception {_testDisabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_INPUT_STREAM);_testDisabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_INPUT_STREAM);_testDisabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_INPUT_STREAM_THROTTLED);_testDisabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_INPUT_STREAM_THROTTLED);_testDisabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_READER);_testDisabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_READER);_testDisabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_DATA_INPUT);_testDisabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCommentsEnabled",0,"public void testCommentsEnabled()throws Exception {_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_INPUT_STREAM);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_INPUT_STREAM);_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_INPUT_STREAM_THROTTLED);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_INPUT_STREAM_THROTTLED);_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_READER);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_READER);_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,MODE_DATA_INPUT);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCommentsWithUTF8",0,"public void testCommentsWithUTF8()throws Exception {final String JSON=""/* \u00a9 2099 Yoyodyne Inc. */\n[\""bar? \u00a9\"" ]\n"";_testWithUTF8Chars(JSON,MODE_INPUT_STREAM);_testWithUTF8Chars(JSON,MODE_INPUT_STREAM_THROTTLED);_testWithUTF8Chars(JSON,MODE_READER);_testWithUTF8Chars(JSON,MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testYAMLCommentsBytes",0,"public void testYAMLCommentsBytes()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_YAML_COMMENTS).build();_testYAMLComments(f,MODE_INPUT_STREAM);_testCommentsBeforePropValue(f,MODE_INPUT_STREAM,""# foo\n"");_testYAMLComments(f,MODE_INPUT_STREAM_THROTTLED);_testCommentsBeforePropValue(f,MODE_INPUT_STREAM_THROTTLED,""# foo\n"");_testYAMLComments(f,MODE_DATA_INPUT);_testCommentsBeforePropValue(f,MODE_DATA_INPUT,""# foo\n"");}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testYAMLCommentsChars",0,"public void testYAMLCommentsChars()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_YAML_COMMENTS).build();_testYAMLComments(f,MODE_READER);final String COMMENT=""# foo\n"";_testCommentsBeforePropValue(f,MODE_READER,COMMENT);_testCommentsBetweenArrayValues(f,MODE_READER,COMMENT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCCommentsBytes",0,"public void testCCommentsBytes()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).build();final String COMMENT=""/* foo */\n"";_testCommentsBeforePropValue(f,MODE_INPUT_STREAM,COMMENT);_testCommentsBeforePropValue(f,MODE_INPUT_STREAM_THROTTLED,COMMENT);_testCommentsBeforePropValue(f,MODE_DATA_INPUT,COMMENT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCCommentsChars",0,"public void testCCommentsChars()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).build();final String COMMENT=""/* foo */\n"";_testCommentsBeforePropValue(f,MODE_READER,COMMENT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCppCommentsBytes",0,"public void testCppCommentsBytes()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).build();final String COMMENT=""// foo\n"";_testCommentsBeforePropValue(f,MODE_INPUT_STREAM,COMMENT);_testCommentsBeforePropValue(f,MODE_INPUT_STREAM_THROTTLED,COMMENT);_testCommentsBeforePropValue(f,MODE_DATA_INPUT,COMMENT);}"
"com.fasterxml.jackson.core.read.CommentParsingTest.testCppCommentsChars",0,"public void testCppCommentsChars()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).build();final String COMMENT=""// foo \n"";_testCommentsBeforePropValue(f,MODE_READER,COMMENT);}"
"com.fasterxml.jackson.core.io.TestCharTypes.testAppendQuoted0_31",0,"public void testAppendQuoted0_31(){}"
"com.fasterxml.jackson.core.TestLocation.testBasics",0,"public void testBasics(){JsonLocation loc1=new JsonLocation(""src"",10L,10L,1,2);JsonLocation loc2=new JsonLocation(null,10L,10L,3,2);assertEquals(loc1,loc1);assertFalse(loc1.equals(null));assertFalse(loc1.equals(loc2));assertFalse(loc2.equals(loc1));assertTrue(loc1.hashCode()!= 0);assertTrue(loc2.hashCode()!= 0);}"
"com.fasterxml.jackson.core.TestLocation.testBasicToString",0,"public void testBasicToString()throws Exception {assertEquals(""[Source: UNKNOWN;line: 3,column: 2]"",new JsonLocation(null,10L,10L,3,2).toString());assertEquals(""[Source: (String)\""string-source\"";line: 1,column: 2]"",new JsonLocation(""string-source"",10L,10L,1,2).toString());assertEquals(""[Source: (char[])\""chars-source\"";line: 1,column: 2]"",new JsonLocation(""chars-source"".toCharArray(),10L,10L,1,2).toString());assertEquals(""[Source: (byte[])\""bytes-source\"";line: 1,column: 2]"",new JsonLocation(""bytes-source"".getBytes(""UTF-8""),10L,10L,1,2).toString());assertEquals(""[Source: (ByteArrayInputStream);line: 1,column: 2]"",new JsonLocation(new ByteArrayInputStream(new byte[0]),10L,10L,1,2).toString());assertEquals(""[Source: (InputStream);line: 1,column: 2]"",new JsonLocation(InputStream.class,10L,10L,1,2).toString());Foobar srcRef=new Foobar();assertEquals(""[Source: ("" + srcRef.getClass().getName()+ "");line: 1,column: 2]"",new JsonLocation(srcRef,10L,10L,1,2).toString());}"
"com.fasterxml.jackson.core.TestLocation.testTruncatedSource",0,"public void testTruncatedSource()throws Exception {StringBuilder sb=new StringBuilder();for (int i=0;i < JsonLocation.MAX_CONTENT_SNIPPET;++i){sb.append(""x"");}String main=sb.toString();String json=main + ""yyy"";JsonLocation loc=new JsonLocation(json,0L,0L,1,1);String desc=loc.sourceDescription();assertEquals(String.format(""(String)\""%s\""[truncated 3 chars]"",main),desc);loc=new JsonLocation(json.getBytes(""UTF-8""),0L,0L,1,1);desc=loc.sourceDescription();assertEquals(String.format(""(byte[])\""%s\""[truncated 3 bytes]"",main),desc);}"
"com.fasterxml.jackson.core.TestLocation.testDisableSourceInclusion",0,"public void testDisableSourceInclusion()throws Exception {JsonFactory f=JsonFactory.builder().disable(StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION).build();JsonParser p=f.createParser(""[foobar ]"");assertToken(JsonToken.START_ARRAY,p.nextToken());try {p.nextToken();fail(""Shouldn't have passed"");}catch(JsonParseException e){verifyException(e,""unrecognized token"");JsonLocation loc=e.getLocation();assertNull(loc.getSourceRef());assertEquals(""UNKNOWN"",loc.sourceDescription());}p.close();p=f.createParser(""[foobar ]"".getBytes(""UTF-8""));assertToken(JsonToken.START_ARRAY,p.nextToken());try {p.nextToken();fail(""Shouldn't have passed"");}catch(JsonParseException e){verifyException(e,""unrecognized token"");JsonLocation loc=e.getLocation();assertNull(loc.getSourceRef());assertEquals(""UNKNOWN"",loc.sourceDescription());}p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncUnicodeHandlingTest.testShortUnicodeWithSurrogates",0,"public void testShortUnicodeWithSurrogates()throws IOException {JsonFactory f=JSON_F;_testUnicodeWithSurrogates(f,28,99);_testUnicodeWithSurrogates(f,53,99);_testUnicodeWithSurrogates(f,28,3);_testUnicodeWithSurrogates(f,53,5);_testUnicodeWithSurrogates(f,28,1);_testUnicodeWithSurrogates(f,53,1);}"
"com.fasterxml.jackson.core.json.async.AsyncUnicodeHandlingTest.testLongUnicodeWithSurrogates",0,"public void testLongUnicodeWithSurrogates()throws IOException {JsonFactory f=JSON_F;_testUnicodeWithSurrogates(f,230,Integer.MAX_VALUE);_testUnicodeWithSurrogates(f,700,Integer.MAX_VALUE);_testUnicodeWithSurrogates(f,9600,Integer.MAX_VALUE);_testUnicodeWithSurrogates(f,230,3);_testUnicodeWithSurrogates(f,700,3);_testUnicodeWithSurrogates(f,9600,3);_testUnicodeWithSurrogates(f,230,1);_testUnicodeWithSurrogates(f,700,1);_testUnicodeWithSurrogates(f,9600,1);}"
"com.fasterxml.jackson.core.util.TestCharTypes.testQuoting",0,"public void testQuoting(){StringBuilder sb=new StringBuilder();CharTypes.appendQuoted(sb,""\n"");assertEquals(""\\n"",sb.toString());sb=new StringBuilder();CharTypes.appendQuoted(sb,""\u0000"");assertEquals(""\\u0000"",sb.toString());}"
"com.fasterxml.jackson.core.json.async.AsyncStringArrayTest.testShortAsciiStrings",0,"public void testShortAsciiStrings()throws IOException {final String[]input=new String[]{""Test"","""",""1"",String.format(""%s%s%s%s%s%s"",str0to9,str0to9,str0to9,str0to9,str0to9,str0to9,str0to9),""Test"",""124""};JsonFactory f=JSON_F;byte[]data=_stringDoc(f,input);_testStrings(f,input,data,0,100);_testStrings(f,input,data,0,3);_testStrings(f,input,data,0,1);_testStrings(f,input,data,1,100);_testStrings(f,input,data,1,3);_testStrings(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncStringArrayTest.testShortUnicodeStrings",0,"public void testShortUnicodeStrings()throws IOException {final String repeat=""Test: "" + UNICODE_2BYTES;final String[]input=new String[]{repeat,"""","""" + UNICODE_3BYTES,"""" + UNICODE_2BYTES,String.format(""%s %c %s %c %s"",str0to9,UNICODE_3BYTES,str0to9,UNICODE_2BYTES,str0to9),""Test"",repeat,""!""};JsonFactory f=JSON_F;byte[]data=_stringDoc(f,input);_testStrings(f,input,data,0,100);_testStrings(f,input,data,0,3);_testStrings(f,input,data,0,1);_testStrings(f,input,data,1,100);_testStrings(f,input,data,1,3);_testStrings(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncStringArrayTest.testLongAsciiStrings",0,"public void testLongAsciiStrings()throws IOException {final String[]input=new String[]{String.format(""%s %s %s %s %s %s %s %s %s %s %s %s"",str0to9,str0to9,""..."",str0to9,""/"",str0to9,str0to9,"""",str0to9,str0to9,""..."",str0to9),LONG_ASCII};JsonFactory f=JSON_F;byte[]data=_stringDoc(f,input);_testStrings(f,input,data,0,9000);_testStrings(f,input,data,0,1);_testStrings(f,input,data,0,3);_testStrings(f,input,data,1,9000);_testStrings(f,input,data,1,3);_testStrings(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncStringArrayTest.testLongUnicodeStrings",0,"public void testLongUnicodeStrings()throws IOException {final String LONG=String.format(""%s %s %s %s %s%s %s %s %s %s %s %s%c %s"",str0to9,str0to9,UNICODE_2BYTES,str0to9,UNICODE_3BYTES,UNICODE_3BYTES,str0to9,str0to9,UNICODE_3BYTES,str0to9,str0to9,UNICODE_2BYTES,UNICODE_2BYTES,str0to9);final String[]input=new String[]{LONG,LONG + ""."",LONG + "".."",LONG + ""...""};JsonFactory f=JSON_F;byte[]data=_stringDoc(f,input);_testStrings(f,input,data,0,9000);_testStrings(f,input,data,0,3);_testStrings(f,input,data,0,1);_testStrings(f,input,data,1,9000);_testStrings(f,input,data,1,3);_testStrings(f,input,data,1,1);}"
"com.fasterxml.jackson.core.TestExceptions.testOriginalMesssage",0,"public void testOriginalMesssage(){JsonProcessingException exc=new JsonParseException(null,""Foobar"",JsonLocation.NA);String msg=exc.getMessage();String orig=exc.getOriginalMessage();assertEquals(""Foobar"",orig);assertTrue(msg.length()> orig.length());JsonProcessingException exc2=new JsonProcessingException(""Second"",JsonLocation.NA,exc);assertSame(exc,exc2.getCause());exc2.clearLocation();assertNull(exc2.getLocation());JsonProcessingException exc3=new JsonProcessingException(exc);assertNull(exc3.getOriginalMessage());assertEquals(""N/A"",exc3.getMessage());assertEquals(""com.fasterxml.jackson.core.JsonProcessingException: N/A"",exc3.toString());}"
"com.fasterxml.jackson.core.TestExceptions.testAccessToParser",0,"public void testAccessToParser()throws Exception {JsonParser p=JSON_F.createParser(""{}"");assertToken(JsonToken.START_OBJECT,p.nextToken());JsonParseException e=new JsonParseException(p,""Test!"");assertSame(p,e.getProcessor());assertEquals(""Test!"",e.getOriginalMessage());JsonLocation loc=e.getLocation();assertNotNull(loc);assertEquals(2,loc.getColumnNr());assertEquals(1,loc.getLineNr());p.close();}"
"com.fasterxml.jackson.core.TestExceptions.testAccessToGenerator",0,"public void testAccessToGenerator()throws Exception {StringWriter w=new StringWriter();JsonGenerator g=JSON_F.createGenerator(w);g.writeStartObject();JsonGenerationException e=new JsonGenerationException(""Test!"",g);assertSame(g,e.getProcessor());assertEquals(""Test!"",e.getOriginalMessage());g.close();}"
"com.fasterxml.jackson.core.TestExceptions.testEofExceptionsBytes",0,"public void testEofExceptionsBytes()throws Exception {_testEofExceptions(MODE_INPUT_STREAM);}"
"com.fasterxml.jackson.core.TestExceptions.testEofExceptionsChars",0,"public void testEofExceptionsChars()throws Exception {_testEofExceptions(MODE_READER);}"
"com.fasterxml.jackson.core.json.JsonParserClosedCaseTest.testNullReturnedOnClosedParserOnNextFieldName",0,"@Test public void testNullReturnedOnClosedParserOnNextFieldName()throws Exception {Assert.assertNull(parser.nextFieldName());}"
"com.fasterxml.jackson.core.json.JsonParserClosedCaseTest.testFalseReturnedOnClosedParserOnNextFieldNameSerializedString",0,"@Test public void testFalseReturnedOnClosedParserOnNextFieldNameSerializedString()throws Exception {Assert.assertFalse(parser.nextFieldName(new SerializedString("""")));}"
"com.fasterxml.jackson.core.json.JsonParserClosedCaseTest.testNullReturnedOnClosedParserOnNextToken",0,"@Test public void testNullReturnedOnClosedParserOnNextToken()throws Exception {Assert.assertNull(parser.nextToken());}"
"com.fasterxml.jackson.core.json.JsonParserClosedCaseTest.testNullReturnedOnClosedParserOnNextValue",0,"@Test public void testNullReturnedOnClosedParserOnNextValue()throws Exception {Assert.assertNull(parser.nextValue());}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testIsNextTokenName",0,"public void testIsNextTokenName()throws Exception {_testIsNextTokenName1(MODE_INPUT_STREAM);_testIsNextTokenName1(MODE_INPUT_STREAM_THROTTLED);_testIsNextTokenName1(MODE_DATA_INPUT);_testIsNextTokenName1(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testIsNextTokenName2",0,"public void testIsNextTokenName2()throws Exception {_testIsNextTokenName2(MODE_INPUT_STREAM);_testIsNextTokenName2(MODE_INPUT_STREAM_THROTTLED);_testIsNextTokenName2(MODE_DATA_INPUT);_testIsNextTokenName2(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testIsNextTokenName3",0,"public void testIsNextTokenName3()throws Exception {_testIsNextTokenName3(MODE_INPUT_STREAM);_testIsNextTokenName3(MODE_INPUT_STREAM_THROTTLED);_testIsNextTokenName3(MODE_DATA_INPUT);_testIsNextTokenName3(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testIsNextTokenName4",0,"public void testIsNextTokenName4()throws Exception {_testIsNextTokenName4(MODE_INPUT_STREAM);_testIsNextTokenName4(MODE_INPUT_STREAM_THROTTLED);_testIsNextTokenName4(MODE_DATA_INPUT);_testIsNextTokenName4(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testIssue34",0,"public void testIssue34()throws Exception {_testIssue34(MODE_INPUT_STREAM);_testIssue34(MODE_INPUT_STREAM_THROTTLED);_testIssue34(MODE_DATA_INPUT);_testIssue34(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testIssue38",0,"public void testIssue38()throws Exception {_testIssue38(MODE_INPUT_STREAM);_testIssue38(MODE_INPUT_STREAM_THROTTLED);_testIssue38(MODE_DATA_INPUT);_testIssue38(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testNextNameWithLongContent",0,"public void testNextNameWithLongContent()throws Exception {_testNextNameWithLong(MODE_INPUT_STREAM);_testNextNameWithLong(MODE_INPUT_STREAM_THROTTLED);_testNextNameWithLong(MODE_DATA_INPUT);_testNextNameWithLong(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testNextNameWithIndentation",0,"public void testNextNameWithIndentation()throws Exception {_testNextFieldNameIndent(MODE_INPUT_STREAM);_testNextFieldNameIndent(MODE_INPUT_STREAM_THROTTLED);_testNextFieldNameIndent(MODE_DATA_INPUT);_testNextFieldNameIndent(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testNextTextValue",0,"public void testNextTextValue()throws Exception {_textNextText(MODE_INPUT_STREAM);_textNextText(MODE_INPUT_STREAM_THROTTLED);_textNextText(MODE_DATA_INPUT);_textNextText(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testNextIntValue",0,"public void testNextIntValue()throws Exception {_textNextInt(MODE_INPUT_STREAM);_textNextInt(MODE_INPUT_STREAM_THROTTLED);_textNextInt(MODE_DATA_INPUT);_textNextInt(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testNextLongValue",0,"public void testNextLongValue()throws Exception {_textNextLong(MODE_INPUT_STREAM);_textNextLong(MODE_INPUT_STREAM_THROTTLED);_textNextLong(MODE_DATA_INPUT);_textNextLong(MODE_READER);}"
"com.fasterxml.jackson.core.read.NextXxxAccessTest.testNextBooleanValue",0,"public void testNextBooleanValue()throws Exception {_textNextBoolean(MODE_INPUT_STREAM);_textNextBoolean(MODE_INPUT_STREAM_THROTTLED);_textNextBoolean(MODE_DATA_INPUT);_textNextBoolean(MODE_READER);}"
"com.fasterxml.jackson.core.read.ParserDupHandlingTest.testSimpleDupCheckDisabled",0,"public void testSimpleDupCheckDisabled()throws Exception {final JsonFactory f=new JsonFactory();assertFalse(f.isEnabled(JsonParser.Feature.STRICT_DUPLICATE_DETECTION));for(String doc : DUP_DOCS){_testSimpleDupsOk(doc,f,MODE_INPUT_STREAM);_testSimpleDupsOk(doc,f,MODE_INPUT_STREAM_THROTTLED);_testSimpleDupsOk(doc,f,MODE_READER);_testSimpleDupsOk(doc,f,MODE_DATA_INPUT);}}"
"com.fasterxml.jackson.core.read.ParserDupHandlingTest.testSimpleDupsBytes",0,"public void testSimpleDupsBytes()throws Exception {JsonFactory nonDupF=new JsonFactory();JsonFactory dupF=new JsonFactory();dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);for(String doc : DUP_DOCS){_testSimpleDupsFail(doc,dupF,MODE_INPUT_STREAM,""a"",false);_testSimpleDupsFail(doc,nonDupF,MODE_INPUT_STREAM,""a"",true);_testSimpleDupsFail(doc,dupF,MODE_INPUT_STREAM_THROTTLED,""a"",false);_testSimpleDupsFail(doc,nonDupF,MODE_INPUT_STREAM_THROTTLED,""a"",true);}}"
"com.fasterxml.jackson.core.read.ParserDupHandlingTest.testSimpleDupsDataInput",0,"public void testSimpleDupsDataInput()throws Exception {JsonFactory nonDupF=new JsonFactory();JsonFactory dupF=new JsonFactory();dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);for(String doc : DUP_DOCS){_testSimpleDupsFail(doc,dupF,MODE_DATA_INPUT,""a"",false);_testSimpleDupsFail(doc,nonDupF,MODE_DATA_INPUT,""a"",true);}}"
"com.fasterxml.jackson.core.read.ParserDupHandlingTest.testSimpleDupsChars",0,"public void testSimpleDupsChars()throws Exception {JsonFactory nonDupF=new JsonFactory();JsonFactory dupF=new JsonFactory();dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);for(String doc : DUP_DOCS){_testSimpleDupsFail(doc,dupF,MODE_READER,""a"",false);_testSimpleDupsFail(doc,nonDupF,MODE_READER,""a"",true);}}"
"com.fasterxml.jackson.core.json.async.AsyncStringObjectTest.testBasicFieldsNames",0,"public void testBasicFieldsNames()throws IOException {final String json=aposToQuotes(String.format(""{'%s':'%s','%s':'%s','%s':'%s'}"",UNICODE_SHORT_NAME,UNICODE_LONG_NAME,UNICODE_LONG_NAME,UNICODE_SHORT_NAME,ASCII_SHORT_NAME,ASCII_SHORT_NAME));final JsonFactory f=JSON_F;byte[]data=_jsonDoc(json);_testBasicFieldsNames(f,data,0,100);_testBasicFieldsNames(f,data,0,3);_testBasicFieldsNames(f,data,0,1);_testBasicFieldsNames(f,data,1,100);_testBasicFieldsNames(f,data,1,3);_testBasicFieldsNames(f,data,1,1);}"
"com.fasterxml.jackson.core.json.GeneratorFailTest.testDupFieldNameWrites",0,"public void testDupFieldNameWrites()throws Exception {_testDupFieldNameWrites(F,false);_testDupFieldNameWrites(F,true);}"
"com.fasterxml.jackson.core.json.GeneratorFailTest.testFailOnWritingStringNotFieldNameBytes",0,"public void testFailOnWritingStringNotFieldNameBytes()throws Exception {_testFailOnWritingStringNotFieldName(F,false);}"
"com.fasterxml.jackson.core.json.GeneratorFailTest.testFailOnWritingStringNotFieldNameChars",0,"public void testFailOnWritingStringNotFieldNameChars()throws Exception {_testFailOnWritingStringNotFieldName(F,true);}"
"com.fasterxml.jackson.core.json.GeneratorFailTest.testFailOnWritingFieldNameInRoot",0,"public void testFailOnWritingFieldNameInRoot()throws Exception {_testFailOnWritingFieldNameInRoot(F,false);_testFailOnWritingFieldNameInRoot(F,true);}"
"com.fasterxml.jackson.core.json.ParserSequenceTest.testSimple",0,"public void testSimple()throws Exception {JsonParser p1=JSON_FACTORY.createParser(""[1 ]"");JsonParser p2=JSON_FACTORY.createParser(""[2 ]"");JsonParserSequence seq=JsonParserSequence.createFlattened(false,p1,p2);assertEquals(2,seq.containedParsersCount());assertFalse(p1.isClosed());assertFalse(p2.isClosed());assertFalse(seq.isClosed());assertToken(JsonToken.START_ARRAY,seq.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertEquals(1,seq.getIntValue());assertToken(JsonToken.END_ARRAY,seq.nextToken());assertFalse(p1.isClosed());assertFalse(p2.isClosed());assertFalse(seq.isClosed());assertToken(JsonToken.START_ARRAY,seq.nextToken());assertTrue(p1.isClosed());assertFalse(p2.isClosed());assertFalse(seq.isClosed());assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertEquals(2,seq.getIntValue());assertToken(JsonToken.END_ARRAY,seq.nextToken());assertTrue(p1.isClosed());assertFalse(p2.isClosed());assertFalse(seq.isClosed());assertNull(seq.nextToken());assertTrue(p1.isClosed());assertTrue(p2.isClosed());assertTrue(seq.isClosed());seq.close();}"
"com.fasterxml.jackson.core.json.ParserSequenceTest.testMultiLevel",0,"public void testMultiLevel()throws Exception {JsonParser p1=JSON_FACTORY.createParser(""[1]"");JsonParser p2=JSON_FACTORY.createParser("" 5"");JsonParser p3=JSON_FACTORY.createParser(""{}"");JsonParserSequence seq1=JsonParserSequence.createFlattened(true,p1,p2);JsonParserSequence seq=JsonParserSequence.createFlattened(false,seq1,p3);assertEquals(3,seq.containedParsersCount());assertToken(JsonToken.START_ARRAY,seq.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertToken(JsonToken.END_ARRAY,seq.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertToken(JsonToken.START_OBJECT,seq.nextToken());assertToken(JsonToken.END_OBJECT,seq.nextToken());assertNull(seq.nextToken());assertTrue(p1.isClosed());assertTrue(p2.isClosed());assertTrue(p3.isClosed());assertTrue(seq.isClosed());}"
"com.fasterxml.jackson.core.json.ParserSequenceTest.testInitializationDisabled",0,"public void testInitializationDisabled()throws Exception {JsonParser p1=JSON_FACTORY.createParser(""1 2"");JsonParser p2=JSON_FACTORY.createParser(""3 true"");assertToken(JsonToken.VALUE_NUMBER_INT,p1.nextToken());assertEquals(1,p1.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,p2.nextToken());assertEquals(3,p2.getIntValue());JsonParserSequence seq=JsonParserSequence.createFlattened(false,p1,p2);assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertEquals(2,seq.getIntValue());assertToken(JsonToken.VALUE_TRUE,seq.nextToken());assertNull(seq.nextToken());seq.close();}"
"com.fasterxml.jackson.core.json.ParserSequenceTest.testInitializationEnabled",0,"public void testInitializationEnabled()throws Exception {JsonParser p1=JSON_FACTORY.createParser(""1 2"");JsonParser p2=JSON_FACTORY.createParser(""3 true"");assertToken(JsonToken.VALUE_NUMBER_INT,p1.nextToken());assertEquals(1,p1.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,p2.nextToken());assertEquals(3,p2.getIntValue());JsonParserSequence seq=JsonParserSequence.createFlattened(true,p1,p2);assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertEquals(1,seq.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertEquals(2,seq.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,seq.nextToken());assertEquals(3,seq.getIntValue());assertToken(JsonToken.VALUE_TRUE,seq.nextToken());assertNull(seq.nextToken());seq.close();}"
"com.fasterxml.jackson.core.TestVersions.testCoreVersions",0,"public void testCoreVersions()throws Exception {assertVersion(new JsonFactory().version());ReaderBasedJsonParser jp=new ReaderBasedJsonParser(getIOContext(),0,null,null,CharsToNameCanonicalizer.createRoot());assertVersion(jp.version());jp.close();JsonGenerator jgen=new WriterBasedJsonGenerator(getIOContext(),0,null,null);assertVersion(jgen.version());jgen.close();}"
"com.fasterxml.jackson.core.TestVersions.testMisc",0,"public void testMisc(){Version unk=Version.unknownVersion();assertEquals(""0.0.0"",unk.toString());assertEquals(""//0.0.0"",unk.toFullString());assertTrue(unk.equals(unk));Version other=new Version(2,8,4,"""",""groupId"",""artifactId"");assertEquals(""2.8.4"",other.toString());assertEquals(""groupId/artifactId/2.8.4"",other.toFullString());}"
"com.fasterxml.jackson.core.json.async.AsyncParserNamesTest.testLongNames",0,"public void testLongNames()throws IOException {_testWithName(generateName(5000));}"
"com.fasterxml.jackson.core.json.async.AsyncParserNamesTest.testEvenLongerName",0,"public void testEvenLongerName()throws Exception {StringBuilder nameBuf=new StringBuilder(""longString"");int minLength=9000;for (int i=1;nameBuf.length()< minLength;++i){nameBuf.append(""."" + i);}String name=nameBuf.toString();_testWithName(name);}"
"com.fasterxml.jackson.core.json.async.AsyncParserNamesTest.testSymbolTable",0,"public void testSymbolTable()throws IOException {final String STR1=""a"";byte[]doc=_jsonDoc(""{"" + quote(STR1)+ "":1,\""foobar\"":2,\""longername\"":3 }"");JsonFactory f=JSON_F;AsyncReaderWrapper p=asyncForBytes(f,5,doc,0);final ByteQuadsCanonicalizer symbols1=((NonBlockingJsonParserBase)p.parser()).symbolTableForTests();assertEquals(0,symbols1.size());assertEquals(JsonToken.START_OBJECT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertSame(STR1,p.currentName());assertEquals(1,symbols1.size());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertSame(""foobar"",p.currentName());assertEquals(2,symbols1.size());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertSame(""longername"",p.currentName());assertEquals(3,symbols1.size());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.END_OBJECT,p.nextToken());assertNull(p.nextToken());assertEquals(3,symbols1.size());p.close();p=asyncForBytes(f,5,doc,0);final ByteQuadsCanonicalizer symbols2=((NonBlockingJsonParserBase)p.parser()).symbolTableForTests();assertNotSame(symbols1,symbols2);assertEquals(3,symbols2.size());assertEquals(JsonToken.START_OBJECT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertSame(STR1,p.currentName());assertEquals(3,symbols2.size());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertSame(""foobar"",p.currentName());assertEquals(3,symbols2.size());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertSame(""longername"",p.currentName());assertEquals(3,symbols2.size());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.END_OBJECT,p.nextToken());assertNull(p.nextToken());assertEquals(3,symbols2.size());p.close();assertEquals(3,symbols2.size());p.close();}"
"com.fasterxml.jackson.core.main.TestParserWithObjects.testNextValue",0,"public void testNextValue()throws IOException {_testNextValueBasic(false);_testNextValueBasic(true);}"
"com.fasterxml.jackson.core.main.TestParserWithObjects.testNextValueNested",0,"public void testNextValueNested()throws IOException {_testNextValueNested(false);_testNextValueNested(true);}"
"com.fasterxml.jackson.core.main.TestParserWithObjects.testIsClosed",0,"@SuppressWarnings(""resource"")public void testIsClosed()throws IOException {for (int i=0;i < 4;++i){String JSON=""[1,2,3 ]"";boolean stream=((i & 1)== 0);JsonParser jp=stream ? createParserUsingStream(JSON,""UTF-8""): createParserUsingReader(JSON);boolean partial=((i & 2)== 0);assertFalse(jp.isClosed());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertFalse(jp.isClosed());if (partial){jp.close();assertTrue(jp.isClosed());}else {assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());assertTrue(jp.isClosed());}}}"
"com.fasterxml.jackson.core.json.async.AsyncInvalidCharsTest.testUtf8BOMHandling",0,"public void testUtf8BOMHandling()throws Exception {_testUtf8BOMHandling(0,99);_testUtf8BOMHandling(0,5);_testUtf8BOMHandling(0,3);_testUtf8BOMHandling(0,2);_testUtf8BOMHandling(0,1);_testUtf8BOMHandling(2,99);_testUtf8BOMHandling(2,1);}"
"com.fasterxml.jackson.core.json.async.AsyncInvalidCharsTest.testHandlingOfInvalidSpace",0,"public void testHandlingOfInvalidSpace()throws Exception {_testHandlingOfInvalidSpace(0,99);_testHandlingOfInvalidSpace(0,3);_testHandlingOfInvalidSpace(0,1);_testHandlingOfInvalidSpace(1,99);_testHandlingOfInvalidSpace(2,1);}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testQuoteAsString",0,"public void testQuoteAsString()throws Exception {JsonStringEncoder encoder=new JsonStringEncoder();char[]result=encoder.quoteAsString(""foobar"");assertArrayEquals(""foobar"".toCharArray(),result);result=encoder.quoteAsString(""\""x\"""");assertArrayEquals(""\\\""x\\\"""".toCharArray(),result);}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testQuoteCharSequenceAsString",0,"public void testQuoteCharSequenceAsString()throws Exception {StringBuilder output=new StringBuilder();StringBuilder builder=new StringBuilder();builder.append(""foobar"");BufferRecyclers.quoteAsJsonText(builder,output);assertEquals(""foobar"",output.toString());builder.setLength(0);output.setLength(0);builder.append(""\""x\"""");BufferRecyclers.quoteAsJsonText(builder,output);assertEquals(""\\\""x\\\"""",output.toString());}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testQuoteLongAsString",0,"public void testQuoteLongAsString()throws Exception {JsonStringEncoder encoder=new JsonStringEncoder();StringBuilder sb=new StringBuilder();StringBuilder sb2=new StringBuilder();for (int i=0;i < 1111;++i){sb.append('""');sb2.append(""\\\"""");}String input=sb.toString();String exp=sb2.toString();char[]result=encoder.quoteAsString(input);assertEquals(2 * input.length(),result.length);assertEquals(exp,new String(result));}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testQuoteLongCharSequenceAsString",0,"public void testQuoteLongCharSequenceAsString()throws Exception {StringBuilder output=new StringBuilder();StringBuilder input=new StringBuilder();StringBuilder sb2=new StringBuilder();for (int i=0;i < 1111;++i){input.append('""');sb2.append(""\\\"""");}String exp=sb2.toString();BufferRecyclers.quoteAsJsonText(input,output);assertEquals(2 * input.length(),output.length());assertEquals(exp,output.toString());}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testQuoteAsUTF8",0,"public void testQuoteAsUTF8()throws Exception {JsonFactory f=new JsonFactory();JsonStringEncoder encoder=new JsonStringEncoder();int[]lengths=new int[]{5,19,200,7000,21000,37000};for(int length : lengths){String str=generateRandom(length);StringWriter sw=new StringWriter(length * 2);JsonGenerator jgen=f.createGenerator(sw);jgen.writeString(str);jgen.close();String encoded=sw.toString();encoded=encoded.substring(1,encoded.length()- 1);byte[]expected=encoded.getBytes(""UTF-8"");byte[]actual=encoder.quoteAsUTF8(str);assertArrayEquals(expected,actual);}}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testEncodeAsUTF8",0,"public void testEncodeAsUTF8()throws Exception {JsonStringEncoder encoder=new JsonStringEncoder();String[]strings=new String[]{""a"",""foobar"",""p\u00f6ll\u00f6"",""\""foo\"""",generateRandom(200),generateRandom(5000),generateRandom(39000)};for(String str : strings){assertArrayEquals(str.getBytes(""UTF-8""),encoder.encodeAsUTF8(str));}}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testCtrlChars",0,"public void testCtrlChars()throws Exception {char[]input=new char[]{0,1,2,3,4};char[]quoted=BufferRecyclers.quoteAsJsonText(new String(input));assertEquals(""\\u0000\\u0001\\u0002\\u0003\\u0004"",new String(quoted));}"
"com.fasterxml.jackson.core.io.TestJsonStringEncoder.testCharSequenceWithCtrlChars",0,"public void testCharSequenceWithCtrlChars()throws Exception {char[]input=new char[]{0,1,2,3,4};StringBuilder builder=new StringBuilder();builder.append(input);StringBuilder output=new StringBuilder();BufferRecyclers.quoteAsJsonText(builder,output);assertEquals(""\\u0000\\u0001\\u0002\\u0003\\u0004"",output.toString());}"
"com.fasterxml.jackson.core.json.async.AsyncConcurrencyTest.testConcurrentAsync",0,"public void testConcurrentAsync()throws Exception {final int MAX_ROUNDS=30;for (int i=0;i < MAX_ROUNDS;++i){_testConcurrentAsyncOnce(i,MAX_ROUNDS);}}"
"com.fasterxml.jackson.core.util.VersionUtilTest.testParseVersionPartReturningPositive",0,"@Test public void testParseVersionPartReturningPositive(){assertEquals(66,VersionUtil.parseVersionPart(""66R""));}"
"com.fasterxml.jackson.core.util.VersionUtilTest.testParseVersionReturningVersionWhereGetMajorVersionIsZero",0,"@Test public void testParseVersionReturningVersionWhereGetMajorVersionIsZero(){Version version=VersionUtil.parseVersion(""#M&+m@569P"",""#M&+m@569P"",""com.fasterxml.jackson.core.util.VersionUtil"");assertEquals(0,version.getMinorVersion());assertEquals(0,version.getPatchLevel());assertEquals(0,version.getMajorVersion());assertFalse(version.isSnapshot());assertFalse(version.isUnknownVersion());}"
"com.fasterxml.jackson.core.util.VersionUtilTest.testParseVersionWithEmptyStringAndEmptyString",0,"@Test public void testParseVersionWithEmptyStringAndEmptyString(){Version version=VersionUtil.parseVersion("""","""",""\""g2AT"");assertTrue(version.isUnknownVersion());}"
"com.fasterxml.jackson.core.util.VersionUtilTest.testParseVersionWithNullAndEmptyString",0,"@Test public void testParseVersionWithNullAndEmptyString(){Version version=VersionUtil.parseVersion(null,""/nUmRN)3"","""");assertFalse(version.isSnapshot());}"
"com.fasterxml.jackson.core.PointerFromContextTest.testViaParser",0,"public void testViaParser()throws Exception {final String SIMPLE=aposToQuotes(""{'a':123,'array':[1,2,[3],5,{'obInArray':4}],"" + ""'ob':{'first':[false,true],'second':{'sub':37}},'b':true}"");JsonParser p=JSON_F.createParser(SIMPLE);assertSame(JsonPointer.EMPTY,p.getParsingContext().pathAsPointer());assertToken(JsonToken.START_OBJECT,p.nextToken());assertSame(JsonPointer.EMPTY,p.getParsingContext().pathAsPointer());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/a"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/a"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/array"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.START_ARRAY,p.nextToken());assertEquals(""/array"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/array/0"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/array/1"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.START_ARRAY,p.nextToken());assertEquals(""/array/2"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/array/2/0"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_ARRAY,p.nextToken());assertEquals(""/array/2"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/array/3"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(""/array/4"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/array/4/obInArray"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/array/4/obInArray"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(""/array/4"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_ARRAY,p.nextToken());assertEquals(""/array"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/ob"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(""/ob"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/ob/first"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.START_ARRAY,p.nextToken());assertEquals(""/ob/first"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_FALSE,p.nextToken());assertEquals(""/ob/first/0"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_TRUE,p.nextToken());assertEquals(""/ob/first/1"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_ARRAY,p.nextToken());assertEquals(""/ob/first"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/ob/second"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(""/ob/second"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/ob/second/sub"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/ob/second/sub"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(""/ob/second"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(""/ob"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/b"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.VALUE_TRUE,p.nextToken());assertEquals(""/b"",p.getParsingContext().pathAsPointer().toString());assertToken(JsonToken.END_OBJECT,p.nextToken());assertSame(JsonPointer.EMPTY,p.getParsingContext().pathAsPointer());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.PointerFromContextTest.testViaGenerator",0,"public void testViaGenerator()throws Exception {StringWriter w=new StringWriter();JsonGenerator g=JSON_F.createGenerator(w);assertSame(JsonPointer.EMPTY,g.getOutputContext().pathAsPointer());g.writeStartArray();assertSame(JsonPointer.EMPTY,g.getOutputContext().pathAsPointer());g.writeBoolean(true);assertEquals(""/0"",g.getOutputContext().pathAsPointer().toString());g.writeStartObject();assertEquals(""/1"",g.getOutputContext().pathAsPointer().toString());g.writeFieldName(""x"");assertEquals(""/1/x"",g.getOutputContext().pathAsPointer().toString());g.writeString(""foo"");assertEquals(""/1/x"",g.getOutputContext().pathAsPointer().toString());g.writeFieldName(""stats"");assertEquals(""/1/stats"",g.getOutputContext().pathAsPointer().toString());g.writeStartObject();assertEquals(""/1/stats"",g.getOutputContext().pathAsPointer().toString());g.writeFieldName(""rate"");assertEquals(""/1/stats/rate"",g.getOutputContext().pathAsPointer().toString());g.writeNumber(13);assertEquals(""/1/stats/rate"",g.getOutputContext().pathAsPointer().toString());g.writeEndObject();assertEquals(""/1/stats"",g.getOutputContext().pathAsPointer().toString());g.writeEndObject();assertEquals(""/1"",g.getOutputContext().pathAsPointer().toString());g.writeEndArray();assertSame(JsonPointer.EMPTY,g.getOutputContext().pathAsPointer());g.close();w.close();}"
"com.fasterxml.jackson.core.PointerFromContextTest.testParserWithRoot",0,"public void testParserWithRoot()throws Exception {final String JSON=aposToQuotes(""{'a':1,'b':3}\n"" + ""{'a':5,'c':[1,2]}\n[1,2]\n"");JsonParser p=JSON_F.createParser(JSON);assertSame(JsonPointer.EMPTY,p.getParsingContext().pathAsPointer(true));assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(""/0"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/0/a"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/0/a"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/0/b"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/0/b"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(""/0"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(""/1"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/1/a"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/1/a"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""/1/c"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.START_ARRAY,p.nextToken());assertEquals(""/1/c"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/1/c/0"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/1/c/1"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.END_ARRAY,p.nextToken());assertEquals(""/1/c"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(""/1"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.START_ARRAY,p.nextToken());assertEquals(""/2"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/2/0"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""/2/1"",p.getParsingContext().pathAsPointer(true).toString());assertToken(JsonToken.END_ARRAY,p.nextToken());assertEquals(""/2"",p.getParsingContext().pathAsPointer(true).toString());assertNull(p.nextToken());assertEquals(""/2"",p.getParsingContext().pathAsPointer(true).toString());p.close();}"
"com.fasterxml.jackson.core.PointerFromContextTest.testGeneratorWithRoot",0,"public void testGeneratorWithRoot()throws Exception {StringWriter w=new StringWriter();JsonGenerator g=JSON_F.createGenerator(w);assertSame(JsonPointer.EMPTY,g.getOutputContext().pathAsPointer(true));g.writeStartArray();assertEquals(""/0"",g.getOutputContext().pathAsPointer(true).toString());g.writeBoolean(true);assertEquals(""/0/0"",g.getOutputContext().pathAsPointer(true).toString());g.writeStartObject();assertEquals(""/0/1"",g.getOutputContext().pathAsPointer(true).toString());g.writeFieldName(""x"");assertEquals(""/0/1/x"",g.getOutputContext().pathAsPointer(true).toString());g.writeString(""foo"");assertEquals(""/0/1/x"",g.getOutputContext().pathAsPointer(true).toString());g.writeEndObject();assertEquals(""/0/1"",g.getOutputContext().pathAsPointer(true).toString());g.writeEndArray();assertEquals(""/0"",g.getOutputContext().pathAsPointer(true).toString());g.writeBoolean(true);assertEquals(""/1"",g.getOutputContext().pathAsPointer(true).toString());g.writeStartArray();assertEquals(""/2"",g.getOutputContext().pathAsPointer(true).toString());g.writeString(""foo"");assertEquals(""/2/0"",g.getOutputContext().pathAsPointer(true).toString());g.writeString(""bar"");assertEquals(""/2/1"",g.getOutputContext().pathAsPointer(true).toString());g.writeEndArray();assertEquals(""/2"",g.getOutputContext().pathAsPointer(true).toString());assertEquals(""/2"",g.getOutputContext().pathAsPointer(true).toString());g.close();}"
"com.fasterxml.jackson.core.VersionTest.testCompareToOne",0,"@Test public void testCompareToOne(){Version version=Version.unknownVersion();Version versionTwo=new Version(0,(-263),(-1820),"""","""","""");assertEquals(263,version.compareTo(versionTwo));}"
"com.fasterxml.jackson.core.VersionTest.testCompareToReturningZero",0,"@Test public void testCompareToReturningZero(){Version version=Version.unknownVersion();Version versionTwo=new Version(0,0,0,"""","""","""");assertEquals(0,version.compareTo(versionTwo));}"
"com.fasterxml.jackson.core.VersionTest.testCreatesVersionTaking6ArgumentsAndCallsCompareTo",0,"@Test public void testCreatesVersionTaking6ArgumentsAndCallsCompareTo(){Version version=new Version(0,0,0,null,null,"""");Version versionTwo=new Version(0,0,0,"""","""",""//0.0.0"");assertTrue(version.compareTo(versionTwo)< 0);}"
"com.fasterxml.jackson.core.VersionTest.testCompareToTwo",0,"@Test public void testCompareToTwo(){Version version=Version.unknownVersion();Version versionTwo=new Version((-1),0,0,""0.0.0"","""","""");assertTrue(version.compareTo(versionTwo)> 0);}"
"com.fasterxml.jackson.core.VersionTest.testCompareToAndCreatesVersionTaking6ArgumentsAndUnknownVersion",0,"@Test public void testCompareToAndCreatesVersionTaking6ArgumentsAndUnknownVersion(){Version version=Version.unknownVersion();Version versionTwo=new Version(0,0,0,""//0.0.0"",""//0.0.0"","""");assertTrue(version.compareTo(versionTwo)< 0);}"
"com.fasterxml.jackson.core.json.JsonFactoryTest.testGeneratorFeatures",0,"@SuppressWarnings(""deprecation"")public void testGeneratorFeatures()throws Exception {JsonFactory f=new JsonFactory();assertNull(f.getCodec());f=JsonFactory.builder().configure(JsonWriteFeature.QUOTE_FIELD_NAMES,true).build();assertTrue(f.isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));f=JsonFactory.builder().configure(JsonWriteFeature.QUOTE_FIELD_NAMES,false).build();assertFalse(f.isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));}"
"com.fasterxml.jackson.core.json.JsonFactoryTest.testFactoryFeatures",0,"public void testFactoryFeatures()throws Exception {JsonFactory f=JsonFactory.builder().configure(JsonFactory.Feature.INTERN_FIELD_NAMES,false).build();assertFalse(f.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));assertTrue(f.isEnabled(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING));}"
"com.fasterxml.jackson.core.json.JsonFactoryTest.testDisablingBufferRecycling",0,"public void testDisablingBufferRecycling()throws Exception {JsonFactory f=JsonFactory.builder().disable(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING).build();assertFalse(f.isEnabled(JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING));for (int i=0;i < 3;++i){StringWriter w=new StringWriter();JsonGenerator gen=f.createGenerator(w);gen.writeStartObject();gen.writeEndObject();gen.close();assertEquals(""{}"",w.toString());}for (int i=0;i < 3;++i){ByteArrayOutputStream bytes=new ByteArrayOutputStream();JsonGenerator gen=f.createGenerator(bytes);gen.writeStartArray();gen.writeEndArray();gen.close();assertEquals(""[]"",bytes.toString(""UTF-8""));}for (int i=0;i < 3;++i){JsonParser p=f.createParser(""{}"");assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.nextToken());p.close();p=f.createParser(""{}"".getBytes(""UTF-8""));assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.json.JsonFactoryTest.testJsonWithFiles",0,"public void testJsonWithFiles()throws Exception {File file=File.createTempFile(""jackson-test"",null);file.deleteOnExit();JsonFactory f=new JsonFactory();JsonGenerator jg=f.createGenerator(file,JsonEncoding.UTF16_LE);jg.writeStartObject();jg.writeRaw(""   "");jg.writeEndObject();jg.close();JsonParser jp=f.createParser(file);assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.END_OBJECT,jp.nextToken());assertNull(jp.nextToken());jp.close();jp=f.createParser(file.toURI().toURL());assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.END_OBJECT,jp.nextToken());assertNull(jp.nextToken());jp.close();file.delete();}"
"com.fasterxml.jackson.core.json.JsonFactoryTest.testCopy",0,"@SuppressWarnings(""deprecation"")public void testCopy()throws Exception {JsonFactory jf=new JsonFactory();assertNull(jf.getCodec());assertTrue(jf.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));assertFalse(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));jf=JsonFactory.builder().disable(JsonFactory.Feature.INTERN_FIELD_NAMES).enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).enable(JsonWriteFeature.ESCAPE_NON_ASCII).build();ObjectCodec codec=new BogusCodec();jf.setCodec(codec);assertFalse(jf.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));assertTrue(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));assertTrue(jf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertSame(codec,jf.getCodec());JsonFactory jf2=jf.copy();assertFalse(jf2.isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));assertTrue(jf2.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));assertTrue(jf2.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertNull(jf2.getCodec());JsonFactory jf3=new CustomFactory(jf,codec);assertSame(codec,jf3.getCodec());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testSyntheticWithChars",0,"public void testSyntheticWithChars(){CharsToNameCanonicalizer symbols=CharsToNameCanonicalizer.createRoot(1).makeChild(-1);final int COUNT=12000;for (int i=0;i < COUNT;++i){String id=fieldNameFor(i);char[]ch=id.toCharArray();symbols.findSymbol(ch,0,ch.length,symbols.calcHash(id));}assertEquals(16384,symbols.bucketCount());assertEquals(COUNT,symbols.size());assertEquals(3431,symbols.collisionCount());assertEquals(6,symbols.maxCollisionLength());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testSyntheticWithBytesNew",0,"public void testSyntheticWithBytesNew()throws IOException {final int SEED=33333;ByteQuadsCanonicalizer symbols=ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());final int COUNT=12000;for (int i=0;i < COUNT;++i){String id=fieldNameFor(i);int[]quads=calcQuads(id.getBytes(""UTF-8""));symbols.addName(id,quads,quads.length);}assertEquals(COUNT,symbols.size());assertEquals(16384,symbols.bucketCount());assertEquals(8534,symbols.primaryCount());assertEquals(2534,symbols.secondaryCount());assertEquals(932,symbols.tertiaryCount());assertEquals(0,symbols.spilloverCount());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testThousandsOfSymbolsWithChars",0,"public void testThousandsOfSymbolsWithChars()throws IOException {final int SEED=33333;CharsToNameCanonicalizer symbolsCRoot=CharsToNameCanonicalizer.createRoot(SEED);int exp=0;for (int doc=0;doc < 100;++doc){CharsToNameCanonicalizer symbolsC=symbolsCRoot.makeChild(JsonFactory.Feature.collectDefaults());for (int i=0;i < 250;++i){String name=""f_"" + doc + ""_""+ i;char[]ch=name.toCharArray();String str=symbolsC.findSymbol(ch,0,ch.length,symbolsC.calcHash(name));assertNotNull(str);}symbolsC.release();exp+=250;if (exp > CharsToNameCanonicalizer.MAX_ENTRIES_FOR_REUSE){exp=0;}assertEquals(exp,symbolsCRoot.size());}}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testThousandsOfSymbolsWithNew",0,"public void testThousandsOfSymbolsWithNew()throws IOException {final int SEED=33333;ByteQuadsCanonicalizer symbolsBRoot=ByteQuadsCanonicalizer.createRoot(SEED);final Charset utf8=Charset.forName(""UTF-8"");int exp=0;ByteQuadsCanonicalizer symbolsB=null;for (int doc=0;doc < 100;++doc){symbolsB=symbolsBRoot.makeChild(JsonFactory.Feature.collectDefaults());for (int i=0;i < 250;++i){String name=""f_"" + doc + ""_""+ i;int[]quads=calcQuads(name.getBytes(utf8));symbolsB.addName(name,quads,quads.length);String n=symbolsB.findName(quads,quads.length);assertEquals(name,n);}symbolsB.release();exp+=250;if (exp > ByteQuadsCanonicalizer.MAX_ENTRIES_FOR_REUSE){exp=0;}assertEquals(exp,symbolsBRoot.size());}assertEquals(6250,symbolsB.size());assertEquals(4761,symbolsB.primaryCount());assertEquals(1190,symbolsB.secondaryCount());assertEquals(299,symbolsB.tertiaryCount());assertEquals(0,symbolsB.spilloverCount());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testByteBasedSymbolTable",0,"public void testByteBasedSymbolTable()throws Exception {final String JSON=aposToQuotes(""{'abc':1,'abc\\u0000':2,'\\u0000abc':3,"" + ""'abc123':4,'abcd1234':5,"" + ""'abcd1234a':6,'abcd1234abcd':7,""+ ""'abcd1234abcd1':8""+ ""}"");JsonFactory f=new JsonFactory();JsonParser p=f.createParser(JSON.getBytes(""UTF-8""));ByteQuadsCanonicalizer symbols=_findSymbols(p);assertEquals(0,symbols.size());_streamThrough(p);assertEquals(8,symbols.size());p.close();p=f.createParser(JSON.getBytes(""UTF-8""));_streamThrough(p);symbols=_findSymbols(p);assertEquals(8,symbols.size());p.close();p=f.createParser(JSON.getBytes(""UTF-8""));_streamThrough(p);symbols=_findSymbols(p);assertEquals(8,symbols.size());p.close();}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testCollisionsWithChars187",0,"public void testCollisionsWithChars187()throws IOException {CharsToNameCanonicalizer symbols=CharsToNameCanonicalizer.createRoot(1).makeChild(-1);final int COUNT=30000;for (int i=0;i < COUNT;++i){String id=String.valueOf(10000 + i);char[]ch=id.toCharArray();symbols.findSymbol(ch,0,ch.length,symbols.calcHash(id));}assertEquals(COUNT,symbols.size());assertEquals(65536,symbols.bucketCount());assertEquals(7127,symbols.collisionCount());assertEquals(4,symbols.maxCollisionLength());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testCollisionsWithBytesNew187a",0,"public void testCollisionsWithBytesNew187a()throws IOException {ByteQuadsCanonicalizer symbols=ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());final int COUNT=43000;for (int i=0;i < COUNT;++i){String id=String.valueOf(10000 + i);int[]quads=calcQuads(id.getBytes(""UTF-8""));symbols.addName(id,quads,quads.length);}assertEquals(COUNT,symbols.size());assertEquals(65536,symbols.bucketCount());assertEquals(32342,symbols.primaryCount());assertEquals(8863,symbols.secondaryCount());assertEquals(1795,symbols.tertiaryCount());assertEquals(0,symbols.spilloverCount());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testCollisionsWithBytesNew187b",0,"public void testCollisionsWithBytesNew187b()throws IOException {ByteQuadsCanonicalizer symbols=ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());final int COUNT=10000;for (int i=0;i < COUNT;++i){String id=String.valueOf(i);int[]quads=calcQuads(id.getBytes(""UTF-8""));symbols.addName(id,quads,quads.length);}assertEquals(COUNT,symbols.size());assertEquals(16384,symbols.bucketCount());assertEquals(5402,symbols.primaryCount());assertEquals(2744,symbols.secondaryCount());assertEquals(1834,symbols.tertiaryCount());assertEquals(20,symbols.spilloverCount());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testShortNameCollisionsViaParser",0,"public void testShortNameCollisionsViaParser()throws Exception {JsonFactory f=new JsonFactory();String json=_shortDoc191();JsonParser p;p=f.createParser(json);while (p.nextToken()!= null){}p.close();p=f.createParser(json.getBytes(""UTF-8""));while (p.nextToken()!= null){}p.close();}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testShortQuotedDirectChars",0,"public void testShortQuotedDirectChars()throws IOException {final int COUNT=400;CharsToNameCanonicalizer symbols=CharsToNameCanonicalizer.createRoot(1).makeChild(-1);for (int i=0;i < COUNT;++i){String id=String.format(""\\u%04x"",i);char[]ch=id.toCharArray();symbols.findSymbol(ch,0,ch.length,symbols.calcHash(id));}assertEquals(COUNT,symbols.size());assertEquals(1024,symbols.bucketCount());assertEquals(50,symbols.collisionCount());assertEquals(2,symbols.maxCollisionLength());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testShortQuotedDirectBytes",0,"public void testShortQuotedDirectBytes()throws IOException {final int COUNT=400;ByteQuadsCanonicalizer symbols=ByteQuadsCanonicalizer.createRoot(123).makeChild(JsonFactory.Feature.collectDefaults());for (int i=0;i < COUNT;++i){String id=String.format(""\\u%04x"",i);int[]quads=calcQuads(id.getBytes(""UTF-8""));symbols.addName(id,quads,quads.length);}assertEquals(COUNT,symbols.size());assertEquals(512,symbols.bucketCount());assertEquals(285,symbols.primaryCount());assertEquals(90,symbols.secondaryCount());assertEquals(25,symbols.tertiaryCount());assertEquals(0,symbols.spilloverCount());}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testShortNameCollisionsDirect",0,"public void testShortNameCollisionsDirect()throws IOException {final int COUNT=600;{CharsToNameCanonicalizer symbols=CharsToNameCanonicalizer.createRoot(1).makeChild(-1);for (int i=0;i < COUNT;++i){String id=String.valueOf((char)i);char[]ch=id.toCharArray();symbols.findSymbol(ch,0,ch.length,symbols.calcHash(id));}assertEquals(COUNT,symbols.size());assertEquals(1024,symbols.bucketCount());assertEquals(16,symbols.collisionCount());assertEquals(1,symbols.maxCollisionLength());}}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testShortNameCollisionsDirectNew",0,"public void testShortNameCollisionsDirectNew()throws IOException {final int COUNT=700;{ByteQuadsCanonicalizer symbols=ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());for (int i=0;i < COUNT;++i){String id=String.valueOf((char)i);int[]quads=calcQuads(id.getBytes(""UTF-8""));symbols.addName(id,quads,quads.length);}assertEquals(COUNT,symbols.size());assertEquals(1024,symbols.bucketCount());assertEquals(564,symbols.primaryCount());assertEquals(122,symbols.secondaryCount());assertEquals(14,symbols.tertiaryCount());assertEquals(0,symbols.spilloverCount());assertEquals(COUNT,symbols.primaryCount()+ symbols.secondaryCount()+ symbols.tertiaryCount()+ symbols.spilloverCount());}}"
"com.fasterxml.jackson.core.sym.TestSymbolTables.testLongSymbols17Bytes",0,"public void testLongSymbols17Bytes()throws Exception {ByteQuadsCanonicalizer symbolsB=ByteQuadsCanonicalizer.createRoot(3).makeChild(JsonFactory.Feature.collectDefaults());CharsToNameCanonicalizer symbolsC=CharsToNameCanonicalizer.createRoot(3).makeChild(-1);for (int i=1001;i <= 1050;++i){String id=""lengthmatters"" + i;int[]quads=calcQuads(id.getBytes(""UTF-8""));symbolsB.addName(id,quads,quads.length);char[]idChars=id.toCharArray();symbolsC.findSymbol(idChars,0,idChars.length,symbolsC.calcHash(id));}assertEquals(50,symbolsB.size());assertEquals(50,symbolsC.size());}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testConfigDefaults",0,"public void testConfigDefaults()throws IOException {JsonGenerator g=JSON_F.createGenerator(new StringWriter());assertFalse(g.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));assertFalse(g.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));assertTrue(g.canOmitFields());assertFalse(g.canWriteBinaryNatively());assertTrue(g.canWriteFormattedNumbers());assertFalse(g.canWriteObjectId());assertFalse(g.canWriteTypeId());g.close();}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testConfigOverrides",0,"@SuppressWarnings(""deprecation"")public void testConfigOverrides()throws IOException {JsonGenerator g=JSON_F.createGenerator(new StringWriter());int mask=JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.getMask()| JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();g.overrideStdFeatures(mask,mask);assertTrue(g.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));assertTrue(g.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));g.setFeatureMask(0);assertFalse(g.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));assertFalse(g.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));g.close();}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testFieldNameQuoting",0,"public void testFieldNameQuoting()throws IOException {JsonFactory f=new JsonFactory();_testFieldNameQuoting(f,true);f=JsonFactory.builder().disable(JsonWriteFeature.QUOTE_FIELD_NAMES).build();_testFieldNameQuoting(f,false);f=JsonFactory.builder().enable(JsonWriteFeature.QUOTE_FIELD_NAMES).build();_testFieldNameQuoting(f,true);}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testNonNumericQuoting",0,"public void testNonNumericQuoting()throws IOException {JsonFactory f=new JsonFactory();_testNonNumericQuoting(f,true);f=JsonFactory.builder().disable(JsonWriteFeature.WRITE_NAN_AS_STRINGS).build();_testNonNumericQuoting(f,false);f=JsonFactory.builder().enable(JsonWriteFeature.WRITE_NAN_AS_STRINGS).build();_testNonNumericQuoting(f,true);}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testNumbersAsJSONStrings",0,"/** * Testing for [JACKSON-176],ability to force serializing numbers as JSON Strings.*/public void testNumbersAsJSONStrings()throws IOException {JsonFactory f=new JsonFactory();assertEquals(""[1,2,1.25,2.25,3001,0.5,-1]"",_writeNumbers(f));f.configure(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS,true);assertEquals(""[\""1\"",\""2\"",\""1.25\"",\""2.25\"",\""3001\"",\""0.5\"",\""-1\""]"",_writeNumbers(f));}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testBigDecimalAsPlain",0,"public void testBigDecimalAsPlain()throws IOException {JsonFactory f=new JsonFactory();BigDecimal ENG=new BigDecimal(""1E+2"");StringWriter sw=new StringWriter();JsonGenerator g=f.createGenerator(sw);g.writeNumber(ENG);g.close();assertEquals(""1E+2"",sw.toString());f.configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN,true);sw=new StringWriter();g=f.createGenerator(sw);g.writeNumber(ENG);g.close();assertEquals(""100"",sw.toString());}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testBigDecimalAsPlainString",0,"public void testBigDecimalAsPlainString()throws Exception {JsonFactory f=new JsonFactory();BigDecimal ENG=new BigDecimal(""1E+2"");f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);f.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);StringWriter sw=new StringWriter();JsonGenerator g=f.createGenerator(sw);g.writeNumber(ENG);g.close();assertEquals(quote(""100""),sw.toString());ByteArrayOutputStream bos=new ByteArrayOutputStream();g=f.createGenerator(bos);g.writeNumber(ENG);g.close();assertEquals(quote(""100""),bos.toString(""UTF-8""));}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testTooBigBigDecimal",0,"public void testTooBigBigDecimal()throws Exception {JsonFactory f=new JsonFactory();f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);BigDecimal BIG=new BigDecimal(""1E+9999"");BigDecimal TOO_BIG=new BigDecimal(""1E+10000"");BigDecimal SMALL=new BigDecimal(""1E-9999"");BigDecimal TOO_SMALL=new BigDecimal(""1E-10000"");for(boolean useBytes : new boolean[]{false,true}){for(boolean asString : new boolean[]{false,true}){JsonGenerator g;if (useBytes){g=f.createGenerator(new ByteArrayOutputStream());}else {g=f.createGenerator(new StringWriter());}if (asString){g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);}g.writeStartArray();g.writeNumber(BIG);g.writeNumber(SMALL);g.writeEndArray();g.close();for(BigDecimal input : new BigDecimal[]{TOO_BIG,TOO_SMALL}){if (useBytes){g=f.createGenerator(new ByteArrayOutputStream());}else {g=f.createGenerator(new StringWriter());}if (asString){g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);}try {g.writeNumber(input);fail(""Should not have written without exception: "" + input);}catch(JsonGenerationException e){verifyException(e,""Attempt to write plain `java.math.BigDecimal`"");verifyException(e,""illegal scale"");}g.close();}}}}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testFieldNameQuotingEnabled",0,"public void testFieldNameQuotingEnabled()throws IOException {_testFieldNameQuotingEnabled(JSON_F,true,true,""{\""foo\"":1}"");_testFieldNameQuotingEnabled(JSON_F,false,true,""{\""foo\"":1}"");_testFieldNameQuotingEnabled(JSON_F,true,false,""{foo:1}"");_testFieldNameQuotingEnabled(JSON_F,false,false,""{foo:1}"");JsonFactory f2=JsonFactory.builder().disable(JsonWriteFeature.QUOTE_FIELD_NAMES).build();_testFieldNameQuotingEnabled(f2,true,true,""{\""foo\"":1}"");_testFieldNameQuotingEnabled(f2,false,true,""{\""foo\"":1}"");_testFieldNameQuotingEnabled(f2,true,false,""{foo:1}"");_testFieldNameQuotingEnabled(f2,false,false,""{foo:1}"");}"
"com.fasterxml.jackson.core.json.GeneratorFeaturesTest.testChangeOnGenerator",0,"public void testChangeOnGenerator()throws IOException {StringWriter w=new StringWriter();JsonGenerator g=JSON_F.createGenerator(w);g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);g.writeNumber(123);g.close();assertEquals(quote(""123""),w.toString());w=new StringWriter();g=JSON_F.createGenerator(w);g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);g.disable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);g.writeNumber(123);g.close();assertEquals(""123"",w.toString());}"
"com.fasterxml.jackson.core.json.async.AsyncCharEscapingTest.testMissingLinefeedEscaping",0,"public void testMissingLinefeedEscaping()throws Exception {byte[]doc=_jsonDoc(aposToQuotes(""['Linefeed: \n.']""));_testMissingLinefeedEscaping(doc,0,99);_testMissingLinefeedEscaping(doc,0,5);_testMissingLinefeedEscaping(doc,0,3);_testMissingLinefeedEscaping(doc,0,2);_testMissingLinefeedEscaping(doc,0,1);_testMissingLinefeedEscaping(doc,1,99);_testMissingLinefeedEscaping(doc,1,3);_testMissingLinefeedEscaping(doc,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncCharEscapingTest.testSimpleEscaping",0,"public void testSimpleEscaping()throws Exception {_testSimpleEscaping(0,99);_testSimpleEscaping(0,5);_testSimpleEscaping(0,3);_testSimpleEscaping(0,2);_testSimpleEscaping(0,1);_testSimpleEscaping(1,99);_testSimpleEscaping(1,3);_testSimpleEscaping(1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncCharEscapingTest.test8DigitSequence",0,"public void test8DigitSequence()throws Exception {String DOC=""[\""\\u00411234\""]"";AsyncReaderWrapper r=asyncForBytes(JSON_F,1,_jsonDoc(DOC),1);assertToken(JsonToken.START_ARRAY,r.nextToken());assertToken(JsonToken.VALUE_STRING,r.nextToken());assertEquals(""A1234"",r.currentText());r.close();}"
"com.fasterxml.jackson.core.json.RequestPayloadOnExceptionTest.testRequestPayloadAsBytesOnParseException",0,"/** * Tests for Request payload data (bytes)on parsing error*/public void testRequestPayloadAsBytesOnParseException()throws Exception {testRequestPayloadAsBytesOnParseExceptionInternal(true,""nul"");testRequestPayloadAsBytesOnParseExceptionInternal(false,""nul"");}"
"com.fasterxml.jackson.core.json.RequestPayloadOnExceptionTest.testRequestPayloadAsStringOnParseException",0,"/** * Tests for Request payload data (String)on parsing error*/public void testRequestPayloadAsStringOnParseException()throws Exception {testRequestPayloadAsStringOnParseExceptionInternal(true,""nul"");testRequestPayloadAsStringOnParseExceptionInternal(false,""nul"");}"
"com.fasterxml.jackson.core.json.RequestPayloadOnExceptionTest.testRawRequestPayloadOnParseException",0,"/** * Tests for Raw Request payload data on parsing error*/public void testRawRequestPayloadOnParseException()throws Exception {testRawRequestPayloadOnParseExceptionInternal(true,""nul"");testRawRequestPayloadOnParseExceptionInternal(false,""nul"");}"
"com.fasterxml.jackson.core.json.RequestPayloadOnExceptionTest.testNoRequestPayloadOnParseException",0,"/** * Tests for no Request payload data on parsing error*/public void testNoRequestPayloadOnParseException()throws Exception {testNoRequestPayloadOnParseExceptionInternal(true,""nul"");testNoRequestPayloadOnParseExceptionInternal(false,""nul"");}"
"com.fasterxml.jackson.core.json.RequestPayloadOnExceptionTest.testNullRequestPayloadOnParseException",0,"/** * Tests for Request payload data which is null*/public void testNullRequestPayloadOnParseException()throws Exception {testNullRequestPayloadOnParseExceptionInternal(true,""nul"");testNullRequestPayloadOnParseExceptionInternal(false,""nul"");}"
"com.fasterxml.jackson.core.json.RequestPayloadOnExceptionTest.testNullCharsetOnParseException",0,"/** * Tests for null Charset in Request payload data*/public void testNullCharsetOnParseException()throws Exception {testNullCharsetOnParseExceptionInternal(true,""nul"");testNullCharsetOnParseExceptionInternal(false,""nul"");}"
"com.fasterxml.jackson.core.util.TestVersionUtil.testVersionPartParsing",0,"public void testVersionPartParsing(){assertEquals(13,VersionUtil.parseVersionPart(""13""));assertEquals(27,VersionUtil.parseVersionPart(""27.8""));assertEquals(0,VersionUtil.parseVersionPart(""-3""));}"
"com.fasterxml.jackson.core.util.TestVersionUtil.testVersionParsing",0,"public void testVersionParsing(){assertEquals(new Version(1,2,15,""foo"",""group"",""artifact""),VersionUtil.parseVersion(""1.2.15-foo"",""group"",""artifact""));}"
"com.fasterxml.jackson.core.util.TestVersionUtil.testMavenVersionParsing",0,"@SuppressWarnings(""deprecation"")public void testMavenVersionParsing(){assertEquals(new Version(1,2,3,""SNAPSHOT"",""foo.bar"",""foo-bar""),VersionUtil.mavenVersionFor(TestVersionUtil.class.getClassLoader(),""foo.bar"",""foo-bar""));}"
"com.fasterxml.jackson.core.util.TestVersionUtil.testPackageVersionMatches",0,"public void testPackageVersionMatches(){assertEquals(PackageVersion.VERSION,VersionUtil.versionFor(UTF8JsonGenerator.class));}"
"com.fasterxml.jackson.core.util.TestVersionUtil.testVersionForUnknownVersion",0,"public void testVersionForUnknownVersion(){assertEquals(Version.unknownVersion(),VersionUtil.versionFor(TestVersionUtil.class));}"
"com.fasterxml.jackson.core.json.LocationInObjectTest.testOffsetWithObjectFieldsUsingUTF8",0,"public void testOffsetWithObjectFieldsUsingUTF8()throws Exception {final JsonFactory f=new JsonFactory();byte[]b=""{\""f1\"":\""v1\"",\""f2\"":{\""f3\"":\""v3\""},\""f4\"":[true,false],\""f5\"":5}"".getBytes(""UTF-8"");JsonParser p=f.createParser(b);assertEquals(JsonToken.START_OBJECT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertEquals(1L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.VALUE_STRING,p.nextToken());assertEquals(6L,p.getTokenLocation().getByteOffset());assertEquals(""f2"",p.nextFieldName());assertEquals(11L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.START_OBJECT,p.nextValue());assertEquals(16L,p.getTokenLocation().getByteOffset());assertEquals(""f3"",p.nextFieldName());assertEquals(17L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.VALUE_STRING,p.nextValue());assertEquals(22L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.END_OBJECT,p.nextToken());assertEquals(""f4"",p.nextFieldName());assertEquals(28L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.START_ARRAY,p.nextValue());assertEquals(33L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.VALUE_TRUE,p.nextValue());assertEquals(34L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.VALUE_FALSE,p.nextValue());assertEquals(39L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.END_ARRAY,p.nextToken());assertEquals(""f5"",p.nextFieldName());assertEquals(46L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(51L,p.getTokenLocation().getByteOffset());assertEquals(JsonToken.END_OBJECT,p.nextToken());p.close();}"
"com.fasterxml.jackson.core.json.LocationInObjectTest.testOffsetWithObjectFieldsUsingReader",0,"public void testOffsetWithObjectFieldsUsingReader()throws Exception {final JsonFactory f=new JsonFactory();char[]c=""{\""f1\"":\""v1\"",\""f2\"":{\""f3\"":\""v3\""},\""f4\"":[true,false],\""f5\"":5}"".toCharArray();JsonParser p=f.createParser(c);assertEquals(JsonToken.START_OBJECT,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.nextToken());assertEquals(1L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.VALUE_STRING,p.nextToken());assertEquals(6L,p.getTokenLocation().getCharOffset());assertEquals(""f2"",p.nextFieldName());assertEquals(11L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.START_OBJECT,p.nextValue());assertEquals(16L,p.getTokenLocation().getCharOffset());assertEquals(""f3"",p.nextFieldName());assertEquals(17L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.VALUE_STRING,p.nextValue());assertEquals(22L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.END_OBJECT,p.nextToken());assertEquals(""f4"",p.nextFieldName());assertEquals(28L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.START_ARRAY,p.nextValue());assertEquals(33L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.VALUE_TRUE,p.nextValue());assertEquals(34L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.VALUE_FALSE,p.nextValue());assertEquals(39L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.END_ARRAY,p.nextToken());assertEquals(""f5"",p.nextFieldName());assertEquals(46L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(51L,p.getTokenLocation().getCharOffset());assertEquals(JsonToken.END_OBJECT,p.nextToken());p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncFieldNamesTest.testSimpleFieldNames",0,"public void testSimpleFieldNames()throws IOException {for(String name : new String[]{"""",""a"",""ab"",""abc"",""abcd"",""abcd1"",""abcd12"",""abcd123"",""abcd1234"",""abcd1234a"",""abcd1234ab"",""abcd1234abc"",""abcd1234abcd"",""abcd1234abcd1""}){_testSimpleFieldName(name);}}"
"com.fasterxml.jackson.core.json.async.AsyncFieldNamesTest.testEscapedFieldNames",0,"public void testEscapedFieldNames()throws IOException {_testEscapedFieldNames(""\\'foo\\'"",""'foo'"");_testEscapedFieldNames(""\\'foobar\\'"",""'foobar'"");_testEscapedFieldNames(""\\'foo \\u0026 bar\\'"",""'foo & bar'"");_testEscapedFieldNames(""Something \\'longer\\'?"",""Something 'longer'?"");_testEscapedFieldNames(""\\u00A7"",""\u00A7"");_testEscapedFieldNames(""\\u4567"",""\u4567"");_testEscapedFieldNames(""Unicode: \\u00A7 and \\u4567?"",""Unicode: \u00A7 and \u4567?"");}"
"com.fasterxml.jackson.core.json.TestDecorators.testInputDecoration",0,"public void testInputDecoration()throws IOException {JsonFactory f=JsonFactory.builder().inputDecorator(new SimpleInputDecorator()).build();JsonParser p;p=f.createParser(new StringReader(""{}""));assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(789,p.getIntValue());p.close();p=f.createParser(new ByteArrayInputStream(""[]"".getBytes(""UTF-8"")));assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(123,p.getIntValue());p.close();p=f.createParser(""[]"".getBytes(""UTF-8""));assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(456,p.getIntValue());p.close();}"
"com.fasterxml.jackson.core.json.TestDecorators.testOutputDecoration",0,"public void testOutputDecoration()throws IOException {JsonFactory f=JsonFactory.builder().outputDecorator(new SimpleOutputDecorator()).build();JsonGenerator g;StringWriter sw=new StringWriter();g=f.createGenerator(sw);g.close();assertEquals(""567"",sw.toString());ByteArrayOutputStream out=new ByteArrayOutputStream();g=f.createGenerator(out,JsonEncoding.UTF8);g.close();assertEquals(""123"",out.toString(""UTF-8""));}"
"com.fasterxml.jackson.core.read.JsonParserTest.testConfig",0,"public void testConfig()throws Exception {JsonParser p=createParserUsingReader(""[]"");p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);assertTrue(p.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));p.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);assertFalse(p.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));p.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE,true);assertTrue(p.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));p.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE,false);assertFalse(p.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));p.close();}"
"com.fasterxml.jackson.core.read.JsonParserTest.testInterningWithStreams",0,"public void testInterningWithStreams()throws Exception {_testIntern(true,true,""a"");_testIntern(true,false,""b"");}"
"com.fasterxml.jackson.core.read.JsonParserTest.testInterningWithReaders",0,"public void testInterningWithReaders()throws Exception {_testIntern(false,true,""c"");_testIntern(false,false,""d"");}"
"com.fasterxml.jackson.core.read.JsonParserTest.testSpecExampleSkipping",0,"/** * This basic unit test verifies that example given in the JSON specification (RFC-4627 or later)is properly parsed at high-level,without verifying values.*/public void testSpecExampleSkipping()throws Exception {_doTestSpec(false);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testSpecExampleFully",0,"/** * Unit test that verifies that the spec example JSON is completely parsed,and proper values are given for contents of all events/tokens.*/public void testSpecExampleFully()throws Exception {_doTestSpec(true);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testKeywords",0,"/** * Unit test that verifies that 3 basic keywords (null,true,false)are properly parsed in various contexts.*/public void testKeywords()throws Exception {final String DOC=""{\n"" + ""\""key1\"" : null,\n"" + ""\""key2\"" : true,\n""+ ""\""key3\"" : false,\n""+ ""\""key4\"" :[false,null,true ]\n""+ ""}"";JsonParser p=createParserUsingStream(JSON_FACTORY,DOC,""UTF-8"");_testKeywords(p,true);p.close();p=createParserUsingReader(JSON_FACTORY,DOC);_testKeywords(p,true);p.close();p=createParserForDataInput(JSON_FACTORY,new MockDataInput(DOC));_testKeywords(p,false);p.close();}"
"com.fasterxml.jackson.core.read.JsonParserTest.testSkipping",0,"public void testSkipping()throws Exception {_testSkipping(MODE_INPUT_STREAM);_testSkipping(MODE_INPUT_STREAM_THROTTLED);_testSkipping(MODE_READER);_testSkipping(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testNameEscaping",0,"public void testNameEscaping()throws IOException {_testNameEscaping(MODE_INPUT_STREAM);_testNameEscaping(MODE_READER);_testNameEscaping(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testLongText",0,"/** * Unit test that verifies that long text segments are handled correctly;mostly to stress-test underlying segment-based text buffer(s).*/public void testLongText()throws Exception {_testLongText(310);_testLongText(7700);_testLongText(49000);_testLongText(96000);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testBytesAsSource",0,"/** * Simple unit test that verifies that passing in a byte array as source works as expected.*/public void testBytesAsSource()throws Exception {String JSON=""[1,2,3,4 ]"";byte[]b=JSON.getBytes(""UTF-8"");int offset=50;int len=b.length;byte[]src=new byte[offset + len + offset];System.arraycopy(b,0,src,offset,len);JsonParser p=JSON_FACTORY.createParser(src,offset,len);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(2,p.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(3,p.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(4,p.getIntValue());assertToken(JsonToken.END_ARRAY,p.nextToken());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.read.JsonParserTest.testUtf8BOMHandling",0,"public void testUtf8BOMHandling()throws Exception {ByteArrayOutputStream bytes=new ByteArrayOutputStream();bytes.write(0xEF);bytes.write(0xBB);bytes.write(0xBF);bytes.write(""[1 ]"".getBytes(""UTF-8""));byte[]input=bytes.toByteArray();JsonParser p=JSON_FACTORY.createParser(input);assertEquals(JsonToken.START_ARRAY,p.nextToken());JsonLocation loc=p.getTokenLocation();assertEquals(0,loc.getByteOffset());assertEquals(-1,loc.getCharOffset());assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.END_ARRAY,p.nextToken());p.close();p=JSON_FACTORY.createParser(new MockDataInput(input));assertEquals(JsonToken.START_ARRAY,p.nextToken());loc=p.getTokenLocation();assertNotNull(loc);assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.END_ARRAY,p.nextToken());p.close();}"
"com.fasterxml.jackson.core.read.JsonParserTest.testSpacesInURL",0,"public void testSpacesInURL()throws Exception {File f=File.createTempFile(""pre fix&stuff"","".txt"");BufferedWriter w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(f),""UTF-8""));w.write(""{}"");w.close();URL url=f.toURI().toURL();JsonParser p=JSON_FACTORY.createParser(url);assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());p.close();}"
"com.fasterxml.jackson.core.read.JsonParserTest.testHandlingOfInvalidSpaceByteStream",0,"public void testHandlingOfInvalidSpaceByteStream()throws Exception {_testHandlingOfInvalidSpace(MODE_INPUT_STREAM);_testHandlingOfInvalidSpaceFromResource(true);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testHandlingOfInvalidSpaceChars",0,"public void testHandlingOfInvalidSpaceChars()throws Exception {_testHandlingOfInvalidSpace(MODE_READER);_testHandlingOfInvalidSpaceFromResource(false);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testHandlingOfInvalidSpaceDataInput",0,"public void testHandlingOfInvalidSpaceDataInput()throws Exception {_testHandlingOfInvalidSpace(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testGetValueAsTextBytes",0,"public void testGetValueAsTextBytes()throws Exception {_testGetValueAsText(MODE_INPUT_STREAM,false);_testGetValueAsText(MODE_INPUT_STREAM,true);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testGetValueAsTextDataInput",0,"public void testGetValueAsTextDataInput()throws Exception {_testGetValueAsText(MODE_DATA_INPUT,false);_testGetValueAsText(MODE_DATA_INPUT,true);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testGetValueAsTextChars",0,"public void testGetValueAsTextChars()throws Exception {_testGetValueAsText(MODE_READER,false);_testGetValueAsText(MODE_READER,true);}"
"com.fasterxml.jackson.core.read.JsonParserTest.testGetTextViaWriter",0,"public void testGetTextViaWriter()throws Exception {for(int mode : ALL_MODES){_testGetTextViaWriter(mode);}}"
"com.fasterxml.jackson.core.read.JsonParserTest.testLongerReadText",0,"public void testLongerReadText()throws Exception {for(int mode : ALL_MODES){_testLongerReadText(mode);}}"
"com.fasterxml.jackson.core.sym.SymbolTableMergingTest.testByteSymbolsWithClose",0,"public void testByteSymbolsWithClose()throws Exception {_testWithClose(true);}"
"com.fasterxml.jackson.core.sym.SymbolTableMergingTest.testByteSymbolsWithEOF",0,"public void testByteSymbolsWithEOF()throws Exception {MyJsonFactory f=new MyJsonFactory();JsonParser jp=_getParser(f,JSON,true);while (jp.nextToken()!= null){assertEquals(0,f.byteSymbolCount());}assertEquals(3,f.byteSymbolCount());jp.close();assertEquals(3,f.byteSymbolCount());}"
"com.fasterxml.jackson.core.sym.SymbolTableMergingTest.testHashCalc",0,"public void testHashCalc()throws Exception {CharsToNameCanonicalizer sym=CharsToNameCanonicalizer.createRoot(123);char[]str1=""foo"".toCharArray();char[]str2="" foo "".toCharArray();assertEquals(sym.calcHash(str1,0,3),sym.calcHash(str2,1,3));}"
"com.fasterxml.jackson.core.sym.SymbolTableMergingTest.testCharSymbolsWithClose",0,"public void testCharSymbolsWithClose()throws Exception {_testWithClose(false);}"
"com.fasterxml.jackson.core.sym.SymbolTableMergingTest.testCharSymbolsWithEOF",0,"public void testCharSymbolsWithEOF()throws Exception {MyJsonFactory f=new MyJsonFactory();JsonParser jp=_getParser(f,JSON,false);while (jp.nextToken()!= null){assertEquals(0,f.charSymbolCount());}assertEquals(3,f.charSymbolCount());jp.close();assertEquals(3,f.charSymbolCount());}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToIntCoercion",0,"public void testToIntCoercion()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;p=createParser(mode,""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1L,p.getLongValue());assertEquals(1,p.getIntValue());p.close();p=createParser(mode,""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.TEN,p.getBigIntegerValue());assertEquals(10,p.getIntValue());p.close();p=createParser(mode,""2"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(2.0,p.getDoubleValue());assertEquals(2,p.getIntValue());p.close();p=createParser(mode,""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigDecimal.TEN,p.getDecimalValue());assertEquals(10,p.getIntValue());p.close();}}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToIntFailing",0,"@SuppressWarnings(""resource"")public void testToIntFailing()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;long big=1L + Integer.MAX_VALUE;p=createParser(mode,String.valueOf(big));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(big,p.getLongValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}long small=-1L + Integer.MIN_VALUE;p=createParser(mode,String.valueOf(small));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(Long.valueOf(small),p.getNumberValue());assertEquals(small,p.getLongValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(mode,String.valueOf(big)+ "".0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals((double)big,p.getDoubleValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(mode,String.valueOf(small)+ "".0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals((double)small,p.getDoubleValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(mode,String.valueOf(big));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.valueOf(big),p.getBigIntegerValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(mode,String.valueOf(small));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.valueOf(small),p.getBigIntegerValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}}}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToLongCoercion",0,"public void testToLongCoercion()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;p=createParser(mode,""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertEquals(1L,p.getLongValue());p.close();long biggish=12345678901L;p=createParser(mode,String.valueOf(biggish));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.valueOf(biggish),p.getBigIntegerValue());assertEquals(biggish,p.getLongValue());p.close();p=createParser(mode,""2"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(2.0,p.getDoubleValue());assertEquals(2L,p.getLongValue());p.close();p=createParser(mode,""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigDecimal.TEN,p.getDecimalValue());assertEquals(10,p.getLongValue());p.close();}}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToLongFailing",0,"@SuppressWarnings(""resource"")public void testToLongFailing()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;BigInteger big=BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.TEN);p=createParser(mode,String.valueOf(big));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(NumberType.BIG_INTEGER,p.getNumberType());assertEquals(big,p.getBigIntegerValue());assertEquals(big,p.getNumberValue());try {p.getLongValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of long"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Long.TYPE,e.getTargetType());}BigInteger small=BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.TEN);p=createParser(mode,String.valueOf(small));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(small,p.getBigIntegerValue());try {p.getLongValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of long"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Long.TYPE,e.getTargetType());}}}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToBigIntegerCoercion",0,"public void testToBigIntegerCoercion()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;p=createParser(mode,""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertEquals(BigInteger.ONE,p.getBigIntegerValue());p.close();p=createParser(mode,""2.0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(2.0,p.getDoubleValue());assertEquals(BigInteger.valueOf(2L),p.getBigIntegerValue());p.close();p=createParser(mode,String.valueOf(Long.MAX_VALUE));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(Long.MAX_VALUE,p.getLongValue());assertEquals(BigInteger.valueOf(Long.MAX_VALUE),p.getBigIntegerValue());p.close();p=createParser(mode,"" 200.0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(new BigDecimal(""200.0""),p.getDecimalValue());assertEquals(BigInteger.valueOf(200L),p.getBigIntegerValue());p.close();}}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToDoubleCoercion",0,"public void testToDoubleCoercion()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;p=createParser(mode,""100.5"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(new BigDecimal(""100.5""),p.getDecimalValue());assertEquals(100.5,p.getDoubleValue());p.close();p=createParser(mode,""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.TEN,p.getBigIntegerValue());assertEquals(10.0,p.getDoubleValue());p.close();}}"
"com.fasterxml.jackson.core.read.NumberCoercionTest.testToBigDecimalCoercion",0,"public void testToBigDecimalCoercion()throws Exception {for(int mode : ALL_STREAMING_MODES){JsonParser p;p=createParser(mode,""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertEquals(BigDecimal.ONE,p.getDecimalValue());p.close();p=createParser(mode,String.valueOf(Long.MAX_VALUE));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(Long.MAX_VALUE,p.getLongValue());assertEquals(BigDecimal.valueOf(Long.MAX_VALUE),p.getDecimalValue());p.close();BigInteger biggie=BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.TEN);p=createParser(mode,String.valueOf(biggie));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(biggie,p.getBigIntegerValue());assertEquals(new BigDecimal(biggie),p.getDecimalValue());p.close();}}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testObjectCount",0,"public void testObjectCount()throws Exception {final String EXP=""{\""x\"":{\""a\"":1,\""b\"":2(2)}(1)}"";final JsonFactory jf=new JsonFactory();for (int i=0;i < 2;++i){boolean useBytes=(i > 0);ByteArrayOutputStream bytes=new ByteArrayOutputStream();StringWriter sw=new StringWriter();JsonGenerator gen=useBytes ? jf.createGenerator(bytes): jf.createGenerator(sw);gen.setPrettyPrinter(new CountPrinter());gen.writeStartObject();gen.writeFieldName(""x"");gen.writeStartObject();gen.writeNumberField(""a"",1);gen.writeNumberField(""b"",2);gen.writeEndObject();gen.writeEndObject();gen.close();String json=useBytes ? bytes.toString(""UTF-8""): sw.toString();assertEquals(EXP,json);}}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testArrayCount",0,"public void testArrayCount()throws Exception {final String EXP=""[6,[1,2,9(3)](2)]"";final JsonFactory jf=new JsonFactory();for (int i=0;i < 2;++i){boolean useBytes=(i > 0);ByteArrayOutputStream bytes=new ByteArrayOutputStream();StringWriter sw=new StringWriter();JsonGenerator gen=useBytes ? jf.createGenerator(bytes): jf.createGenerator(sw);gen.setPrettyPrinter(new CountPrinter());gen.writeStartArray();gen.writeNumber(6);gen.writeStartArray();gen.writeNumber(1);gen.writeNumber(2);gen.writeNumber(9);gen.writeEndArray();gen.writeEndArray();gen.close();String json=useBytes ? bytes.toString(""UTF-8""): sw.toString();assertEquals(EXP,json);}}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testSimpleDocWithDefault",0,"public void testSimpleDocWithDefault()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.useDefaultPrettyPrinter();_verifyPrettyPrinter(gen,sw);gen.close();}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testSimpleDocWithMinimal",0,"@SuppressWarnings(""resource"")public void testSimpleDocWithMinimal()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.setPrettyPrinter(new MinimalPrettyPrinter());String docStr=_verifyPrettyPrinter(gen,sw);assertEquals(-1,docStr.indexOf('\n'));assertEquals(-1,docStr.indexOf('\t'));gen=new JsonFactory().createGenerator(sw);gen.setPrettyPrinter(new MinimalPrettyPrinter(){@Override public void beforeArrayValues(JsonGenerator jg)throws IOException,JsonGenerationException {jg.writeRaw(""\t"");}});docStr=_verifyPrettyPrinter(gen,sw);assertEquals(-1,docStr.indexOf('\n'));assertTrue(docStr.indexOf('\t')>= 0);gen.close();}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testCustomRootSeparatorWithPP",0,"public void testCustomRootSeparatorWithPP()throws Exception {JsonFactory jf=new JsonFactory();assertEquals(""{}{}[]"",_generateRoot(jf,null));assertEquals(""{}{}[]"",_generateRoot(jf,new DefaultPrettyPrinter()));assertEquals(""{}|{}|[]"",_generateRoot(jf,new DefaultPrettyPrinter(""|"")));}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testCustomRootSeparatorWithFactory",0,"public void testCustomRootSeparatorWithFactory()throws Exception {JsonFactory f=((JsonFactoryBuilder)JsonFactory.builder()).rootValueSeparator(""##"").build();StringWriter sw=new StringWriter();JsonGenerator gen=f.createGenerator(sw);gen.writeNumber(13);gen.writeBoolean(false);gen.writeNull();gen.close();assertEquals(""13##false##null"",sw.toString());}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testCustomSeparatorsWithMinimal",0,"public void testCustomSeparatorsWithMinimal()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.setPrettyPrinter(new MinimalPrettyPrinter().setSeparators(Separators.createDefaultInstance().withObjectFieldValueSeparator('=').withObjectEntrySeparator(';').withArrayValueSeparator('|')));_writeTestDocument(gen);assertEquals(""[3|\""abc\""|[true]|{\""f\""=null;\""f2\""=null}]"",sw.toString());gen.close();}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testCustomSeparatorsWithPP",0,"public void testCustomSeparatorsWithPP()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.setPrettyPrinter(new DefaultPrettyPrinter().withSeparators(Separators.createDefaultInstance().withObjectFieldValueSeparator('=').withObjectEntrySeparator(';').withArrayValueSeparator('|')));_writeTestDocument(gen);gen.close();assertEquals(""[3| \""abc\""|[true ]| {"" + DefaultIndenter.SYS_LF + ""  \""f\"" = null;""+ DefaultIndenter.SYS_LF+ ""  \""f2\"" = null""+ DefaultIndenter.SYS_LF+ ""}]"",sw.toString());}"
"com.fasterxml.jackson.core.main.TestPrettyPrinter.testCustomSeparatorsWithPPWithoutSpaces",0,"public void testCustomSeparatorsWithPPWithoutSpaces()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.setPrettyPrinter(new DefaultPrettyPrinter().withSeparators(Separators.createDefaultInstance().withObjectFieldValueSeparator('=').withObjectEntrySeparator(';').withArrayValueSeparator('|')).withoutSpacesInObjectEntries());_writeTestDocument(gen);gen.close();assertEquals(""[3| \""abc\""|[true ]| {"" + DefaultIndenter.SYS_LF + ""  \""f\""=null;""+ DefaultIndenter.SYS_LF+ ""  \""f2\""=null""+ DefaultIndenter.SYS_LF+ ""}]"",sw.toString());}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testLargeUnquotedNames",0,"public void testLargeUnquotedNames()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES).build();StringBuilder sb=new StringBuilder(5000);sb.append(""[\n"");final int REPS=1050;for (int i=0;i < REPS;++i){if (i > 0){sb.append(',');if ((i & 7)== 0){sb.append('\n');}}sb.append(""{"");sb.append(""abc"").append(i & 127).append(':');sb.append((i & 1)!= 0);sb.append(""}\n"");}sb.append(""]"");String doc=sb.toString();_testLargeUnquoted(f,REPS,doc,0,99);_testLargeUnquoted(f,REPS,doc,0,5);_testLargeUnquoted(f,REPS,doc,0,3);_testLargeUnquoted(f,REPS,doc,0,2);_testLargeUnquoted(f,REPS,doc,0,1);_testLargeUnquoted(f,REPS,doc,1,99);_testLargeUnquoted(f,REPS,doc,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testSimpleUnquotedNames",0,"public void testSimpleUnquotedNames()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES).build();_testSimpleUnquoted(f,0,99);_testSimpleUnquoted(f,0,5);_testSimpleUnquoted(f,0,3);_testSimpleUnquoted(f,0,2);_testSimpleUnquoted(f,0,1);_testSimpleUnquoted(f,1,99);_testSimpleUnquoted(f,1,3);_testSimpleUnquoted(f,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testAposQuotingDisabled",0,"/** * Test to verify that the default parser settings do not accept single-quotes for String values (field names,textual values)*/public void testAposQuotingDisabled()throws Exception {JsonFactory f=new JsonFactory();_testSingleQuotesDefault(f,0,99);_testSingleQuotesDefault(f,0,5);_testSingleQuotesDefault(f,0,3);_testSingleQuotesDefault(f,0,1);_testSingleQuotesDefault(f,1,99);_testSingleQuotesDefault(f,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testAposQuotingEnabled",0,"/** * Test to verify optional handling of single quotes,to allow handling invalid (but,alas,common)JSON.*/public void testAposQuotingEnabled()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_SINGLE_QUOTES).build();_testAposQuotingEnabled(f,0,99);_testAposQuotingEnabled(f,0,5);_testAposQuotingEnabled(f,0,3);_testAposQuotingEnabled(f,0,2);_testAposQuotingEnabled(f,0,1);_testAposQuotingEnabled(f,1,99);_testAposQuotingEnabled(f,2,1);_testAposQuotingEnabled(f,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testSingleQuotesEscaped",0,"public void testSingleQuotesEscaped()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_SINGLE_QUOTES).build();_testSingleQuotesEscaped(f,0,99);_testSingleQuotesEscaped(f,0,5);_testSingleQuotesEscaped(f,0,3);_testSingleQuotesEscaped(f,0,1);_testSingleQuotesEscaped(f,1,99);_testSingleQuotesEscaped(f,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testNonStandardNameChars",0,"public void testNonStandardNameChars()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES).build();_testNonStandardNameChars(f,0,99);_testNonStandardNameChars(f,0,6);_testNonStandardNameChars(f,0,3);_testNonStandardNameChars(f,0,1);_testNonStandardNameChars(f,1,99);_testNonStandardNameChars(f,2,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdParsingTest.testNonStandarBackslashQuotingForValues",0,"public void testNonStandarBackslashQuotingForValues(int mode)throws Exception {_testNonStandarBackslashQuoting(0,99);_testNonStandarBackslashQuoting(0,6);_testNonStandarBackslashQuoting(0,3);_testNonStandarBackslashQuoting(0,1);_testNonStandarBackslashQuoting(2,99);_testNonStandarBackslashQuoting(1,1);}"
"com.fasterxml.jackson.core.main.TestParserFeatures.testDefaultSettings",0,"public void testDefaultSettings()throws Exception {JsonFactory f=new JsonFactory();assertTrue(f.isEnabled(StreamReadFeature.AUTO_CLOSE_SOURCE));JsonParser p=f.createParser(new StringReader(""{}""));_testDefaultSettings(p);p.close();p=f.createParser(new ByteArrayInputStream(""{}"".getBytes(""UTF-8"")));_testDefaultSettings(p);p.close();}"
"com.fasterxml.jackson.core.main.TestParserFeatures.testDeprecatedDefaultSettings",0,"@SuppressWarnings(""deprecation"")public void testDeprecatedDefaultSettings()throws Exception {JsonFactory f=sharedStreamFactory();assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS));assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES));assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES));}"
"com.fasterxml.jackson.core.main.TestParserFeatures.testQuotesRequired",0,"public void testQuotesRequired()throws Exception {_testQuotesRequired(false);_testQuotesRequired(true);}"
"com.fasterxml.jackson.core.main.TestParserFeatures.testTabsDefault",0,"public void testTabsDefault()throws Exception {_testTabsDefault(false);_testTabsDefault(true);}"
"com.fasterxml.jackson.core.main.TestParserFeatures.testTabsEnabled",0,"public void testTabsEnabled()throws Exception {_testTabsEnabled(false);_testTabsEnabled(true);}"
"com.fasterxml.jackson.core.json.TestRootValues.testSimpleNumbers",0,"public void testSimpleNumbers()throws Exception {_testSimpleNumbers(false);_testSimpleNumbers(true);}"
"com.fasterxml.jackson.core.json.TestRootValues.testBrokenNumber",0,"public void testBrokenNumber()throws Exception {_testBrokenNumber(false);_testBrokenNumber(true);}"
"com.fasterxml.jackson.core.json.TestRootValues.testSimpleBooleans",0,"public void testSimpleBooleans()throws Exception {_testSimpleBooleans(false);_testSimpleBooleans(true);}"
"com.fasterxml.jackson.core.json.TestRootValues.testSimpleWrites",0,"public void testSimpleWrites()throws Exception {_testSimpleWrites(false);_testSimpleWrites(true);}"
"com.fasterxml.jackson.core.json.TestRootValues.testRootOffsetIssue516Bytes",0,"public void testRootOffsetIssue516Bytes()throws Exception {final InputStream in=new Issue516InputStream(new byte[][]{""1234"".getBytes(""UTF-8""),""5 true"".getBytes(""UTF-8"")});JsonParser parser=JSON_F.createParser(in);assertEquals(12345,parser.nextIntValue(0));assertTrue(parser.nextBooleanValue());parser.close();in.close();}"
"com.fasterxml.jackson.core.json.TestRootValues.testRootOffsetIssue516Chars",0,"public void testRootOffsetIssue516Chars()throws Exception {final Reader in=new Issue516Reader(new char[][]{""1234"".toCharArray(),""5 true"".toCharArray()});JsonParser parser=JSON_F.createParser(in);assertEquals(12345,parser.nextIntValue(0));assertTrue(parser.nextBooleanValue());parser.close();in.close();}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testSystemLinefeed",0,"public void testSystemLinefeed()throws IOException {PrettyPrinter pp=new DefaultPrettyPrinter();String LF=System.getProperty(""line.separator"");String EXP=""{"" + LF + ""  \""name\"" : \""John Doe\"",""+ LF+ ""  \""age\"" : 3.14""+ LF+ ""}"";assertEquals(EXP,_printTestData(pp,false));assertEquals(EXP,_printTestData(pp,true));}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testWithLineFeed",0,"public void testWithLineFeed()throws IOException {PrettyPrinter pp=new DefaultPrettyPrinter().withObjectIndenter(new DefaultIndenter().withLinefeed(""\n""));String EXP=""{\n"" + ""  \""name\"" : \""John Doe\"",\n"" + ""  \""age\"" : 3.14\n""+ ""}"";assertEquals(EXP,_printTestData(pp,false));assertEquals(EXP,_printTestData(pp,true));}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testWithIndent",0,"public void testWithIndent()throws IOException {PrettyPrinter pp=new DefaultPrettyPrinter().withObjectIndenter(new DefaultIndenter().withLinefeed(""\n"").withIndent("" ""));String EXP=""{\n"" + "" \""name\"" : \""John Doe\"",\n"" + "" \""age\"" : 3.14\n""+ ""}"";assertEquals(EXP,_printTestData(pp,false));assertEquals(EXP,_printTestData(pp,true));}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testUnixLinefeed",0,"public void testUnixLinefeed()throws IOException {PrettyPrinter pp=new DefaultPrettyPrinter().withObjectIndenter(new DefaultIndenter(""  "",""\n""));String EXP=""{\n"" + ""  \""name\"" : \""John Doe\"",\n"" + ""  \""age\"" : 3.14\n""+ ""}"";assertEquals(EXP,_printTestData(pp,false));assertEquals(EXP,_printTestData(pp,true));}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testWindowsLinefeed",0,"public void testWindowsLinefeed()throws IOException {PrettyPrinter pp=new DefaultPrettyPrinter().withObjectIndenter(new DefaultIndenter(""  "",""\r\n""));String EXP=""{\r\n"" + ""  \""name\"" : \""John Doe\"",\r\n"" + ""  \""age\"" : 3.14\r\n""+ ""}"";assertEquals(EXP,_printTestData(pp,false));assertEquals(EXP,_printTestData(pp,true));}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testTabIndent",0,"public void testTabIndent()throws IOException {PrettyPrinter pp=new DefaultPrettyPrinter().withObjectIndenter(new DefaultIndenter(""\t"",""\n""));String EXP=""{\n"" + ""\t\""name\"" : \""John Doe\"",\n"" + ""\t\""age\"" : 3.14\n""+ ""}"";assertEquals(EXP,_printTestData(pp,false));assertEquals(EXP,_printTestData(pp,true));}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testRootSeparator",0,"public void testRootSeparator()throws IOException {DefaultPrettyPrinter pp=new DefaultPrettyPrinter().withRootSeparator(""|"");final String EXP=""1|2|3"";StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.setPrettyPrinter(pp);gen.writeNumber(1);gen.writeNumber(2);gen.writeNumber(3);gen.close();assertEquals(EXP,sw.toString());ByteArrayOutputStream bytes=new ByteArrayOutputStream();gen=JSON_F.createGenerator(bytes);gen.setPrettyPrinter(pp);gen.writeNumber(1);gen.writeNumber(2);gen.writeNumber(3);gen.close();assertEquals(EXP,bytes.toString(""UTF-8""));pp=pp.withRootSeparator((String)null).withArrayIndenter(null).withObjectIndenter(null).withoutSpacesInObjectEntries();sw=new StringWriter();gen=JSON_F.createGenerator(sw);gen.setPrettyPrinter(pp);gen.writeNumber(1);gen.writeStartArray();gen.writeNumber(2);gen.writeEndArray();gen.writeStartObject();gen.writeFieldName(""a"");gen.writeNumber(3);gen.writeEndObject();gen.close();assertEquals(""1[2]{\""a\"":3}"",sw.toString());}"
"com.fasterxml.jackson.core.util.TestDefaultPrettyPrinter.testInvalidSubClass",0,"public void testInvalidSubClass()throws Exception {DefaultPrettyPrinter pp=new MyPrettyPrinter();try {pp.createInstance();fail(""Should not pass"");}catch(IllegalStateException e){verifyException(e,""does not override"");}}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleObjectTest.testBooleans",0,"public void testBooleans()throws IOException {final JsonFactory f=JSON_F;byte[]data=_jsonDoc(aposToQuotes(""{'a':true,'b':false,'acdc':true,'"" + UNICODE_SHORT_NAME + ""':true,'a1234567':false,""+ ""'""+ UNICODE_LONG_NAME+ ""':   true }""));_testBooleans(f,data,0,100);_testBooleans(f,data,0,3);_testBooleans(f,data,0,1);_testBooleans(f,data,1,100);_testBooleans(f,data,1,3);_testBooleans(f,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleObjectTest.testNumbers",0,"public void testNumbers()throws IOException {ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);JsonFactory f=JSON_F;JsonGenerator g=f.createGenerator(bytes);g.writeStartObject();g.writeNumberField(""i1"",NUMBER_EXP_I);g.writeNumberField(""doubley"",NUMBER_EXP_D);g.writeFieldName(""biggieDecimal"");g.writeNumber(NUMBER_EXP_BD.toString());g.writeEndObject();g.close();byte[]data=bytes.toByteArray();_testNumbers(f,data,0,100);_testNumbers(f,data,0,5);_testNumbers(f,data,0,3);_testNumbers(f,data,0,2);_testNumbers(f,data,0,1);_testNumbers(f,data,1,100);_testNumbers(f,data,1,3);_testNumbers(f,data,1,1);}"
"com.fasterxml.jackson.core.util.DefaultIndenterTest.testWithLinefeed",0,"@Test public void testWithLinefeed(){DefaultIndenter defaultIndenter=new DefaultIndenter();DefaultIndenter defaultIndenterTwo=defaultIndenter.withLinefeed(""-XG'#x"");DefaultIndenter defaultIndenterThree=defaultIndenterTwo.withLinefeed(""-XG'#x"");assertEquals(""-XG'#x"",defaultIndenterThree.getEol());assertNotSame(defaultIndenterThree,defaultIndenter);assertSame(defaultIndenterThree,defaultIndenterTwo);}"
"com.fasterxml.jackson.core.util.DefaultIndenterTest.testWithIndent",0,"@Test public void testWithIndent(){DefaultIndenter defaultIndenter=new DefaultIndenter();DefaultIndenter defaultIndenterTwo=defaultIndenter.withIndent(""9Qh/6,~n"");DefaultIndenter defaultIndenterThree=defaultIndenterTwo.withIndent(""9Qh/6,~n"");assertEquals(""\n"",defaultIndenterThree.getEol());assertNotSame(defaultIndenterThree,defaultIndenter);assertSame(defaultIndenterThree,defaultIndenterTwo);}"
"com.fasterxml.jackson.core.json.TestParserOverrides.testTokenAccess",0,"public void testTokenAccess()throws Exception {JsonFactory jf=new JsonFactory();_testTokenAccess(jf,false);_testTokenAccess(jf,true);}"
"com.fasterxml.jackson.core.json.TestParserOverrides.testCurrentName",0,"public void testCurrentName()throws Exception {JsonFactory jf=new JsonFactory();_testCurrentName(jf,false);_testCurrentName(jf,true);}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testMissingEscaping",0,"public void testMissingEscaping()throws Exception {final String DOC=""["" + ""\""Linefeed: \n.\"""" + ""]"";JsonParser jp=createParserUsingReader(DOC);assertToken(JsonToken.START_ARRAY,jp.nextToken());try {JsonToken t=jp.nextToken();assertToken(JsonToken.VALUE_STRING,t);jp.getText();fail(""Expected an exception for un-escaped linefeed in string value"");}catch(JsonParseException jex){verifyException(jex,""has to be escaped"");}jp.close();}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testSimpleEscaping",0,"public void testSimpleEscaping()throws Exception {String DOC=""["" + ""\""LF=\\n\"""" + ""]"";JsonParser jp=createParserUsingReader(DOC);assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""LF=\n"",jp.getText());jp.close();DOC=""[\""NULL:\\u0000!\""]"";jp=createParserUsingReader(DOC);assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""NULL:\0!"",jp.getText());jp.close();jp=createParserUsingReader(""[\""\\u0123\""]"");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""\u0123"",jp.getText());jp.close();jp=createParserUsingReader(""[\""\\u0041\\u0043\""]"");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""AC"",jp.getText());jp.close();}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testInvalid",0,"public void testInvalid()throws Exception {String DOC=""[\""\\u41=A\""]"";JsonParser jp=createParserUsingReader(DOC);assertToken(JsonToken.START_ARRAY,jp.nextToken());try {jp.nextToken();jp.getText();fail(""Expected an exception for unclosed ARRAY"");}catch(JsonParseException jpe){verifyException(jpe,""for character escape"");}jp.close();}"
"com.fasterxml.jackson.core.json.TestCharEscaping.test8DigitSequence",0,"/** * Test to verify that decoder does not allow 8-digit escapes (non-BMP characters must be escaped using two 4-digit sequences)*/public void test8DigitSequence()throws Exception {String DOC=""[\""\\u00411234\""]"";JsonParser jp=createParserUsingReader(DOC);assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""A1234"",jp.getText());jp.close();}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testWriteLongCustomEscapes",0,"public void testWriteLongCustomEscapes()throws Exception {JsonFactory jf=new JsonFactory();jf.setCharacterEscapes(ESC_627);StringBuilder longString=new StringBuilder();while (longString.length()< 2000){longString.append(""\u65e5\u672c\u8a9e"");}StringWriter writer=new StringWriter();JsonGenerator jgen=jf.createGenerator(writer);jgen.setHighestNonEscapedChar(127);jgen.writeString(longString.toString());jgen.close();}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testEscapesForCharArrays",0,"public void testEscapesForCharArrays()throws Exception {JsonFactory jf=new JsonFactory();StringWriter writer=new StringWriter();JsonGenerator jgen=jf.createGenerator(writer);jgen.writeString(new char[]{'\0'},0,1);jgen.close();assertEquals(""\""\\u0000\"""",writer.toString());}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testEscapeNonLatin1Chars",0,"public void testEscapeNonLatin1Chars()throws Exception {_testEscapeNonLatin1ViaChars(false);}"
"com.fasterxml.jackson.core.json.TestCharEscaping.testEscapeNonLatin1Bytes",0,"public void testEscapeNonLatin1Bytes()throws Exception {_testEscapeNonLatin1ViaChars(true);}"
"com.fasterxml.jackson.core.main.TestGeneratorCopy.testCopyRootTokens",0,"public void testCopyRootTokens()throws IOException {JsonFactory jf=new JsonFactory();final String DOC=""\""text\\non two lines\"" true false 2.0"";JsonParser jp=jf.createParser(new StringReader(DOC));StringWriter sw=new StringWriter();JsonGenerator gen=jf.createGenerator(sw);JsonToken t;while ((t=jp.nextToken())!= null){gen.copyCurrentEvent(jp);assertToken(t,jp.currentToken());}jp.close();gen.close();assertEquals(""\""text\\non two lines\"" true false 2.0"",sw.toString());}"
"com.fasterxml.jackson.core.main.TestGeneratorCopy.testCopyArrayTokens",0,"public void testCopyArrayTokens()throws IOException {JsonFactory jf=new JsonFactory();final String DOC=""123[1,null,[false]]"";JsonParser jp=jf.createParser(new StringReader(DOC));StringWriter sw=new StringWriter();JsonGenerator gen=jf.createGenerator(sw);assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());gen.copyCurrentEvent(jp);assertToken(JsonToken.VALUE_NUMBER_INT,jp.currentToken());assertEquals(123,jp.getIntValue());assertToken(JsonToken.START_ARRAY,jp.nextToken());gen.copyCurrentStructure(jp);assertToken(JsonToken.END_ARRAY,jp.currentToken());jp.close();gen.close();assertEquals(""123 [1,null,[false]]"",sw.toString());}"
"com.fasterxml.jackson.core.main.TestGeneratorCopy.testCopyObjectTokens",0,"public void testCopyObjectTokens()throws IOException {JsonFactory jf=new JsonFactory();final String DOC=""{\""a\"":1,\""b\"":[{\""c\"" : null }]}"";JsonParser jp=jf.createParser(new StringReader(DOC));StringWriter sw=new StringWriter();JsonGenerator gen=jf.createGenerator(sw);assertToken(JsonToken.START_OBJECT,jp.nextToken());gen.copyCurrentStructure(jp);assertToken(JsonToken.END_OBJECT,jp.currentToken());jp.close();gen.close();assertEquals(""{\""a\"":1,\""b\"":[{\""c\"":null}]}"",sw.toString());}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToIntCoercion",0,"public void testToIntCoercion()throws Exception {AsyncReaderWrapper p;p=createParser(""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1L,p.getLongValue());assertEquals(1,p.getIntValue());p.close();p=createParser(""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.TEN,p.getBigIntegerValue());assertEquals(10,p.getIntValue());p.close();p=createParser(""2"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(2.0,p.getDoubleValue());assertEquals(2,p.getIntValue());p.close();p=createParser(""0.1"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(0.1,p.getDoubleValue());assertEquals(0,p.getIntValue());p.close();p=createParser(""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigDecimal.TEN,p.getDecimalValue());assertEquals(10,p.getIntValue());p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToIntFailing",0,"public void testToIntFailing()throws Exception {AsyncReaderWrapper p;long big=1L + Integer.MAX_VALUE;p=createParser(String.valueOf(big));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(big,p.getLongValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}long small=-1L + Integer.MIN_VALUE;p=createParser(String.valueOf(small));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(Long.valueOf(small),p.getNumberValue());assertEquals(small,p.getLongValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(String.valueOf(big)+ "".0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals((double)big,p.getDoubleValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(String.valueOf(small)+ "".0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals((double)small,p.getDoubleValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(String.valueOf(big));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.valueOf(big),p.getBigIntegerValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}p=createParser(String.valueOf(small));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.valueOf(small),p.getBigIntegerValue());try {p.getIntValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of int"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Integer.TYPE,e.getTargetType());}}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToLongCoercion",0,"public void testToLongCoercion()throws Exception {AsyncReaderWrapper p;p=createParser(""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertEquals(1L,p.getLongValue());p.close();long biggish=12345678901L;p=createParser(String.valueOf(biggish));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.valueOf(biggish),p.getBigIntegerValue());assertEquals(biggish,p.getLongValue());p.close();p=createParser(""2"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(2.0,p.getDoubleValue());assertEquals(2L,p.getLongValue());p.close();p=createParser(""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigDecimal.TEN,p.getDecimalValue());assertEquals(10,p.getLongValue());p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToLongFailing",0,"public void testToLongFailing()throws Exception {AsyncReaderWrapper p;BigInteger big=BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.TEN);p=createParser(String.valueOf(big));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(NumberType.BIG_INTEGER,p.getNumberType());assertEquals(big,p.getBigIntegerValue());assertEquals(big,p.getNumberValue());try {p.getLongValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of long"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Long.TYPE,e.getTargetType());}BigInteger small=BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.TEN);p=createParser(String.valueOf(small));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(small,p.getBigIntegerValue());try {p.getLongValue();fail(""Should not pass"");}catch(InputCoercionException e){verifyException(e,""out of range of long"");assertEquals(JsonToken.VALUE_NUMBER_INT,e.getInputType());assertEquals(Long.TYPE,e.getTargetType());}}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToBigIntegerCoercion",0,"public void testToBigIntegerCoercion()throws Exception {AsyncReaderWrapper p;p=createParser(""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertEquals(BigInteger.ONE,p.getBigIntegerValue());p.close();p=createParser(""2.0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(2.0,p.getDoubleValue());assertEquals(BigInteger.valueOf(2L),p.getBigIntegerValue());p.close();p=createParser(String.valueOf(Long.MAX_VALUE));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(Long.MAX_VALUE,p.getLongValue());assertEquals(BigInteger.valueOf(Long.MAX_VALUE),p.getBigIntegerValue());p.close();p=createParser("" 200.0"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(new BigDecimal(""200.0""),p.getDecimalValue());assertEquals(BigInteger.valueOf(200L),p.getBigIntegerValue());p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToDoubleCoercion",0,"public void testToDoubleCoercion()throws Exception {AsyncReaderWrapper p;p=createParser(""100.5"");assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(new BigDecimal(""100.5""),p.getDecimalValue());assertEquals(100.5,p.getDoubleValue());p.close();p=createParser(""10"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(BigInteger.TEN,p.getBigIntegerValue());assertEquals(10.0,p.getDoubleValue());p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncNumberCoercionTest.testToBigDecimalCoercion",0,"public void testToBigDecimalCoercion()throws Exception {AsyncReaderWrapper p;p=createParser(""1"");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());assertEquals(BigDecimal.ONE,p.getDecimalValue());p.close();p=createParser(String.valueOf(Long.MAX_VALUE));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(Long.MAX_VALUE,p.getLongValue());assertEquals(BigDecimal.valueOf(Long.MAX_VALUE),p.getDecimalValue());p.close();BigInteger biggie=BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.TEN);p=createParser(String.valueOf(biggie));assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(biggie,p.getBigIntegerValue());assertEquals(new BigDecimal(biggie),p.getDecimalValue());p.close();}"
"com.fasterxml.jackson.core.main.TestParserLinefeeds.testCR",0,"public void testCR()throws Exception {_testLinefeeds(""\r"",true);_testLinefeeds(""\r"",false);}"
"com.fasterxml.jackson.core.main.TestParserLinefeeds.testLF",0,"public void testLF()throws Exception {_testLinefeeds(""\n"",true);_testLinefeeds(""\n"",false);}"
"com.fasterxml.jackson.core.main.TestParserLinefeeds.testCRLF",0,"public void testCRLF()throws Exception {_testLinefeeds(""\r\n"",true);_testLinefeeds(""\r\n"",false);}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testNonFiltering",0,"public void testNonFiltering()throws Exception {StringWriter w=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(w);final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}""),w.toString());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testSingleMatchFilteringWithoutPath",0,"public void testSingleMatchFilteringWithoutPath()throws Exception {StringWriter w=new StringWriter();JsonGenerator gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new NameMatchFilter(""value""),false,false);final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""3""),w.toString());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testSingleMatchFilteringWithPath",0,"public void testSingleMatchFilteringWithPath()throws Exception {StringWriter w=new StringWriter();JsonGenerator origGen=JSON_F.createGenerator(w);NameMatchFilter filter=new NameMatchFilter(""value"");FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(origGen,filter,true,false);assertSame(w,gen.getOutputTarget());assertNotNull(gen.getFilterContext());assertSame(filter,gen.getFilter());final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'ob':{'value':3}}""),w.toString());assertEquals(1,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testSingleMatchFilteringWithPathSkippedArray",0,"public void testSingleMatchFilteringWithPathSkippedArray()throws Exception {StringWriter w=new StringWriter();JsonGenerator origGen=JSON_F.createGenerator(w);NameMatchFilter filter=new NameMatchFilter(""value"");FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(origGen,filter,true,false);assertSame(w,gen.getOutputTarget());assertNotNull(gen.getFilterContext());assertSame(filter,gen.getFilter());final String JSON=""{'array':[1,[2,3]],'ob':[{'value':'bar'}],'b':{'foo':[1,'foo']}}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'ob':[{'value':'bar'}]}""),w.toString());assertEquals(1,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testSingleMatchFilteringWithPathAlternate1",0,"public void testSingleMatchFilteringWithPathAlternate1()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new NameMatchFilter(""value""),true,false);gen.writeStartObject();gen.writeFieldName(new SerializedString(""a""));gen.writeNumber(123);gen.writeFieldName(""array"");gen.writeStartArray(2);gen.writeNumber(""1"");gen.writeNumber((short)2);gen.writeEndArray();gen.writeFieldName(new SerializedString(""ob""));gen.writeStartObject();gen.writeNumberField(""value0"",2);gen.writeFieldName(new SerializedString(""value""));gen.writeStartArray(1);gen.writeString(new SerializedString(""x""));gen.writeEndArray();gen.writeStringField(""value2"",""foo"");gen.writeEndObject();gen.writeBooleanField(""b"",true);gen.writeEndObject();gen.close();assertEquals(aposToQuotes(""{'ob':{'value':['x']}}""),w.toString());assertEquals(1,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testSingleMatchFilteringWithPathRawBinary",0,"public void testSingleMatchFilteringWithPathRawBinary()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new NameMatchFilter(""array""),true,false);gen.writeStartObject();gen.writeFieldName(""header"");gen.writeStartArray();gen.writeBinary(new byte[]{1});gen.writeRawValue(new SerializedString(""1""));gen.writeRawValue(""2"");gen.writeEndArray();gen.writeFieldName(""array"");gen.writeStartArray();gen.writeBinary(new byte[]{1});gen.writeNumber((short)1);gen.writeNumber((int)2);gen.writeNumber((long)3);gen.writeNumber(BigInteger.valueOf(4));gen.writeRaw("" "");gen.writeNumber(new BigDecimal(""5.0""));gen.writeRaw(new SerializedString("" /*x*/""));gen.writeNumber(6.25f);gen.writeNumber(7.5);gen.writeEndArray();gen.writeArrayFieldStart(""extra"");gen.writeNumber((short)1);gen.writeNumber((int)2);gen.writeNumber((long)3);gen.writeNumber(BigInteger.valueOf(4));gen.writeNumber(new BigDecimal(""5.0""));gen.writeNumber(6.25f);gen.writeNumber(7.5);gen.writeEndArray();gen.writeEndObject();gen.close();assertEquals(aposToQuotes(""{'array':['AQ==',1,2,3,4 ,5.0 /*x*/,6.25,7.5]}""),w.toString());assertEquals(1,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testMultipleMatchFilteringWithPath1",0,"public void testMultipleMatchFilteringWithPath1()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new NameMatchFilter(""value0"",""value2""),true,true);final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'ob':{'value0':2,'value2':4}}""),w.toString());assertEquals(2,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testMultipleMatchFilteringWithPath2",0,"public void testMultipleMatchFilteringWithPath2()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new NameMatchFilter(""array"",""b"",""value""),true,true);final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'array':[1,2],'ob':{'value':3},'b':true}""),w.toString());assertEquals(3,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testMultipleMatchFilteringWithPath3",0,"public void testMultipleMatchFilteringWithPath3()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new NameMatchFilter(""value""),true,true);final String JSON=""{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'root':{'a':{'value':3},'b':{'value':4}}}""),w.toString());assertEquals(2,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testIndexMatchWithPath1",0,"public void testIndexMatchWithPath1()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new IndexMatchFilter(1),true,true);final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'array':[2]}""),w.toString());w=new StringWriter();gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new IndexMatchFilter(0),true,true);writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'array':[1]}""),w.toString());assertEquals(1,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testIndexMatchWithPath2",0,"public void testIndexMatchWithPath2()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),new IndexMatchFilter(0,1),true,true);final String JSON=""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"";writeJsonDoc(JSON_F,JSON,gen);assertEquals(aposToQuotes(""{'array':[1,2]}""),w.toString());assertEquals(2,gen.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicGeneratorFilteringTest.testWriteStartObjectWithObject",0,"public void testWriteStartObjectWithObject()throws Exception {StringWriter w=new StringWriter();FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(JSON_F.createGenerator(w),TokenFilter.INCLUDE_ALL,true,true);String value=""val"";gen.writeStartObject(new Object());gen.writeFieldName(""field1"");{gen.writeStartObject(value);gen.writeEndObject();}gen.writeFieldName(""field2"");gen.writeString(""val2"");gen.writeEndObject();gen.close();assertEquals(aposToQuotes(""{'field1':{},'field2':'val2'}""),w.toString());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testSimple",0,"/** * Trivially simple basic test to ensure all basic append methods work*/public void testSimple(){TextBuffer tb=new TextBuffer(new BufferRecycler());tb.append('a');tb.append(new char[]{'X','b'},1,1);tb.append(""c"",0,1);assertTrue(tb.hasTextAsCharacters());assertEquals(3,tb.contentsAsArray().length);assertEquals(""abc"",tb.toString());assertNotNull(tb.expandCurrentSegment());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testLonger",0,"public void testLonger(){TextBuffer tb=new TextBuffer(null);for (int i=0;i < 2000;++i){tb.append(""abc"",0,3);}String str=tb.contentsAsString();assertEquals(6000,str.length());assertEquals(6000,tb.contentsAsArray().length);tb.resetWithShared(new char[]{'a'},0,1);assertEquals(1,tb.toString().length());assertTrue(tb.hasTextAsCharacters());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testLongAppend",0,"public void testLongAppend(){final int len=TextBuffer.MAX_SEGMENT_LEN * 3 / 2;StringBuilder sb=new StringBuilder(len);for (int i=0;i < len;++i){sb.append('x');}final String STR=sb.toString();final String EXP=""a"" + STR + ""c"";TextBuffer tb=new TextBuffer(new BufferRecycler());tb.append('a');tb.append(STR,0,len);tb.append('c');assertEquals(len + 2,tb.size());assertEquals(EXP,tb.contentsAsString());tb=new TextBuffer(new BufferRecycler());tb.append('a');tb.append(STR.toCharArray(),0,len);tb.append('c');assertEquals(len + 2,tb.size());assertEquals(EXP,tb.contentsAsString());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testExpand",0,"public void testExpand(){TextBuffer tb=new TextBuffer(new BufferRecycler());char[]buf=tb.getCurrentSegment();while (buf.length < 500 * 1000){char[]old=buf;buf=tb.expandCurrentSegment();if (old.length >= buf.length){fail(""Expected buffer of "" + old.length + "" to expand,did not,length now ""+ buf.length);}}tb.resetWithString(""Foobar"");assertEquals(""Foobar"",tb.contentsAsString());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testEmpty",0,"public void testEmpty(){TextBuffer tb=new TextBuffer(new BufferRecycler());tb.resetWithEmpty();assertTrue(tb.getTextBuffer().length == 0);tb.contentsAsString();assertTrue(tb.getTextBuffer().length == 0);}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testResetWithAndSetCurrentAndReturn",0,"public void testResetWithAndSetCurrentAndReturn(){TextBuffer textBuffer=new TextBuffer(null);textBuffer.resetWith('l');textBuffer.setCurrentAndReturn(349);}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testGetCurrentSegment",0,"public void testGetCurrentSegment(){TextBuffer textBuffer=new TextBuffer(null);textBuffer.emptyAndGetCurrentSegment();textBuffer.setCurrentAndReturn(1000);textBuffer.getCurrentSegment();assertEquals(1000,textBuffer.size());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testAppendTakingTwoAndThreeInts",0,"public void testAppendTakingTwoAndThreeInts(){BufferRecycler bufferRecycler=new BufferRecycler();TextBuffer textBuffer=new TextBuffer(bufferRecycler);textBuffer.ensureNotShared();char[]charArray=textBuffer.getTextBuffer();textBuffer.append(charArray,0,200);textBuffer.append(""5rmk0rx(C@aVYGN@Q"",2,3);assertEquals(3,textBuffer.getCurrentSegmentSize());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testEnsureNotSharedAndResetWithString",0,"public void testEnsureNotSharedAndResetWithString(){BufferRecycler bufferRecycler=new BufferRecycler();TextBuffer textBuffer=new TextBuffer(bufferRecycler);textBuffer.resetWithString("""");assertFalse(textBuffer.hasTextAsCharacters());textBuffer.ensureNotShared();assertEquals(0,textBuffer.getCurrentSegmentSize());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testContentsAsDecimalThrowsNumberFormatException",0,"public void testContentsAsDecimalThrowsNumberFormatException(){TextBuffer textBuffer=new TextBuffer(null);try {textBuffer.contentsAsDecimal();fail(""Expecting exception: NumberFormatException"");}catch(NumberFormatException e){assertEquals(NumberInput.class.getName(),e.getStackTrace()[0].getClassName());}}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testGetTextBufferAndEmptyAndGetCurrentSegmentAndFinishCurrentSegment",0,"public void testGetTextBufferAndEmptyAndGetCurrentSegmentAndFinishCurrentSegment(){BufferRecycler bufferRecycler=new BufferRecycler();TextBuffer textBuffer=new TextBuffer(bufferRecycler);textBuffer.emptyAndGetCurrentSegment();textBuffer.finishCurrentSegment();textBuffer.getTextBuffer();assertEquals(200,textBuffer.size());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testGetTextBufferAndAppendTakingCharAndContentsAsArray",0,"public void testGetTextBufferAndAppendTakingCharAndContentsAsArray(){BufferRecycler bufferRecycler=new BufferRecycler();TextBuffer textBuffer=new TextBuffer(bufferRecycler);textBuffer.append('(');textBuffer.contentsAsArray();textBuffer.getTextBuffer();assertEquals(1,textBuffer.getCurrentSegmentSize());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testGetTextBufferAndResetWithString",0,"public void testGetTextBufferAndResetWithString(){BufferRecycler bufferRecycler=new BufferRecycler();TextBuffer textBuffer=new TextBuffer(bufferRecycler);textBuffer.resetWithString("""");assertFalse(textBuffer.hasTextAsCharacters());textBuffer.getTextBuffer();assertTrue(textBuffer.hasTextAsCharacters());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testResetWithString",0,"public void testResetWithString(){BufferRecycler bufferRecycler=new BufferRecycler();TextBuffer textBuffer=new TextBuffer(bufferRecycler);textBuffer.ensureNotShared();textBuffer.finishCurrentSegment();assertEquals(200,textBuffer.size());textBuffer.resetWithString(""asdf"");assertEquals(0,textBuffer.getTextOffset());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testGetCurrentSegmentSizeResetWith",0,"public void testGetCurrentSegmentSizeResetWith(){TextBuffer textBuffer=new TextBuffer(null);textBuffer.resetWith('.');textBuffer.resetWith('q');assertEquals(1,textBuffer.getCurrentSegmentSize());}"
"com.fasterxml.jackson.core.util.TestTextBuffer.testGetSizeFinishCurrentSegmentAndResetWith",0,"public void testGetSizeFinishCurrentSegmentAndResetWith(){TextBuffer textBuffer=new TextBuffer(null);textBuffer.resetWith('.');textBuffer.finishCurrentSegment();textBuffer.resetWith('q');assertEquals(2,textBuffer.size());}"
"com.fasterxml.jackson.core.read.UTF8NamesParseTest.testEmptyName",0,"public void testEmptyName()throws Exception {_testEmptyName(MODE_INPUT_STREAM);_testEmptyName(MODE_INPUT_STREAM_THROTTLED);_testEmptyName(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.UTF8NamesParseTest.testUtf8Name2Bytes",0,"public void testUtf8Name2Bytes()throws Exception {_testUtf8Name2Bytes(MODE_INPUT_STREAM);_testUtf8Name2Bytes(MODE_INPUT_STREAM_THROTTLED);_testUtf8Name2Bytes(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.UTF8NamesParseTest.testUtf8Name3Bytes",0,"public void testUtf8Name3Bytes()throws Exception {_testUtf8Name3Bytes(MODE_INPUT_STREAM);_testUtf8Name3Bytes(MODE_DATA_INPUT);_testUtf8Name3Bytes(MODE_INPUT_STREAM_THROTTLED);}"
"com.fasterxml.jackson.core.read.UTF8NamesParseTest.testUtf8StringTrivial",0,"public void testUtf8StringTrivial()throws Exception {_testUtf8StringTrivial(MODE_INPUT_STREAM);_testUtf8StringTrivial(MODE_DATA_INPUT);_testUtf8StringTrivial(MODE_INPUT_STREAM_THROTTLED);}"
"com.fasterxml.jackson.core.read.UTF8NamesParseTest.testUtf8StringValue",0,"public void testUtf8StringValue()throws Exception {_testUtf8StringValue(MODE_INPUT_STREAM);_testUtf8StringValue(MODE_DATA_INPUT);_testUtf8StringValue(MODE_INPUT_STREAM_THROTTLED);}"
"com.fasterxml.jackson.core.read.UTF8NamesParseTest.testNextFieldName",0,"public void testNextFieldName()throws IOException {ByteArrayOutputStream os=new ByteArrayOutputStream();os.write('{');for (int i=0;i < 3994;i++){os.write(' ');}os.write(""\""id\"":2"".getBytes(""UTF-8""));os.write('}');byte[]data=os.toByteArray();_testNextFieldName(MODE_INPUT_STREAM,data);_testNextFieldName(MODE_DATA_INPUT,data);_testNextFieldName(MODE_INPUT_STREAM_THROTTLED,data);}"
"com.fasterxml.jackson.core.read.ValueConversionsTest.testAsInt",0,"public void testAsInt()throws Exception {for(int mode : ALL_MODES){_testAsInt(mode);}}"
"com.fasterxml.jackson.core.read.ValueConversionsTest.testAsBoolean",0,"public void testAsBoolean()throws Exception {for(int mode : ALL_MODES){_testAsBoolean(mode);}}"
"com.fasterxml.jackson.core.read.ValueConversionsTest.testAsLong",0,"public void testAsLong()throws Exception {for(int mode : ALL_MODES){_testAsLong(mode);}}"
"com.fasterxml.jackson.core.read.ValueConversionsTest.testAsDouble",0,"public void testAsDouble()throws Exception {for(int mode : ALL_MODES){_testAsDouble(mode);}}"
"com.fasterxml.jackson.core.json.StringGenerationTest.testBasicEscaping",0,"public void testBasicEscaping()throws Exception {doTestBasicEscaping(false);doTestBasicEscaping(true);}"
"com.fasterxml.jackson.core.json.StringGenerationTest.testMediumStringsBytes",0,"public void testMediumStringsBytes()throws Exception {for(int mode : ALL_BINARY_MODES){for(int size : new int[]{1100,2300,3800,7500,19000}){_testMediumStrings(mode,size);}}}"
"com.fasterxml.jackson.core.json.StringGenerationTest.testMediumStringsChars",0,"public void testMediumStringsChars()throws Exception {for(int mode : ALL_TEXT_MODES){for(int size : new int[]{1100,2300,3800,7500,19000}){_testMediumStrings(mode,size);}}}"
"com.fasterxml.jackson.core.json.StringGenerationTest.testLongerRandomSingleChunk",0,"public void testLongerRandomSingleChunk()throws Exception {for(int mode : ALL_TEXT_MODES){for (int round=0;round < 80;++round){String content=generateRandom(75000 + round);_testLongerRandom(mode,content,false);_testLongerRandom(mode,content,true);}}}"
"com.fasterxml.jackson.core.json.StringGenerationTest.testLongerRandomMultiChunk",0,"public void testLongerRandomMultiChunk()throws Exception {for(int mode : ALL_TEXT_MODES){for (int round=0;round < 70;++round){String content=generateRandom(73000 + round);_testLongerRandomMulti(mode,content,false,round);_testLongerRandomMulti(mode,content,true,round);}}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testBase64UsingInputStream",0,"public void testBase64UsingInputStream()throws Exception {_testBase64Text(MODE_INPUT_STREAM);_testBase64Text(MODE_INPUT_STREAM_THROTTLED);_testBase64Text(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testBase64UsingReader",0,"public void testBase64UsingReader()throws Exception {_testBase64Text(MODE_READER);}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testStreaming",0,"public void testStreaming()throws IOException {_testStreaming(MODE_INPUT_STREAM);_testStreaming(MODE_INPUT_STREAM_THROTTLED);_testStreaming(MODE_DATA_INPUT);_testStreaming(MODE_READER);}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testSimple",0,"public void testSimple()throws IOException {for(int mode : ALL_MODES){_testSimple(mode,false,false);_testSimple(mode,true,false);_testSimple(mode,false,true);_testSimple(mode,true,true);}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testInArray",0,"public void testInArray()throws IOException {for(int mode : ALL_MODES){_testInArray(mode);}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testWithEscaped",0,"public void testWithEscaped()throws IOException {for(int mode : ALL_MODES){_testEscaped(mode);}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testWithEscapedPadding",0,"public void testWithEscapedPadding()throws IOException {for(int mode : ALL_MODES){_testEscapedPadding(mode);}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testInvalidTokenForBase64",0,"public void testInvalidTokenForBase64()throws IOException {for(int mode : ALL_MODES){JsonParser p=createParser(mode,""[]"");assertToken(JsonToken.START_ARRAY,p.nextToken());try {p.getBinaryValue();fail(""Should not pass"");}catch(JsonParseException e){verifyException(e,""current token"");verifyException(e,""can not access as binary"");}p.close();}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testInvalidChar",0,"public void testInvalidChar()throws IOException {for(int mode : ALL_MODES){JsonParser p=createParser(mode,quote(""a===""));assertToken(JsonToken.VALUE_STRING,p.nextToken());try {p.getBinaryValue(Base64Variants.MIME);fail(""Should not pass"");}catch(JsonParseException e){verifyException(e,""padding only legal"");}p.close();p=createParser(mode,quote(""ab de""));assertToken(JsonToken.VALUE_STRING,p.nextToken());try {p.getBinaryValue(Base64Variants.MIME);fail(""Should not pass"");}catch(JsonParseException e){verifyException(e,""illegal white space"");}p.close();p=createParser(mode,quote(""ab#?""));assertToken(JsonToken.VALUE_STRING,p.nextToken());try {p.getBinaryValue(Base64Variants.MIME);fail(""Should not pass"");}catch(JsonParseException e){verifyException(e,""illegal character '#'"");}p.close();}}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testOkMissingPadding",0,"public void testOkMissingPadding()throws IOException {final byte[]DOC1=new byte[]{(byte)0xAD};_testOkMissingPadding(DOC1,MODE_INPUT_STREAM);_testOkMissingPadding(DOC1,MODE_INPUT_STREAM_THROTTLED);_testOkMissingPadding(DOC1,MODE_READER);_testOkMissingPadding(DOC1,MODE_DATA_INPUT);final byte[]DOC2=new byte[]{(byte)0xAC,(byte)0xDC};_testOkMissingPadding(DOC2,MODE_INPUT_STREAM);_testOkMissingPadding(DOC2,MODE_INPUT_STREAM_THROTTLED);_testOkMissingPadding(DOC2,MODE_READER);_testOkMissingPadding(DOC2,MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.base64.Base64BinaryParsingTest.testFailDueToMissingPadding",0,"public void testFailDueToMissingPadding()throws IOException {final String DOC1=quote(""fQ"");_testFailDueToMissingPadding(DOC1,MODE_INPUT_STREAM);_testFailDueToMissingPadding(DOC1,MODE_INPUT_STREAM_THROTTLED);_testFailDueToMissingPadding(DOC1,MODE_READER);_testFailDueToMissingPadding(DOC1,MODE_DATA_INPUT);final String DOC2=quote(""A/A"");_testFailDueToMissingPadding(DOC2,MODE_INPUT_STREAM);_testFailDueToMissingPadding(DOC2,MODE_INPUT_STREAM_THROTTLED);_testFailDueToMissingPadding(DOC2,MODE_READER);_testFailDueToMissingPadding(DOC2,MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testDefaults",0,"@SuppressWarnings(""deprecation"")public void testDefaults(){JsonFactory f=new JsonFactory();assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testSingleQuotesDefault",0,"public void testSingleQuotesDefault()throws Exception {_testSingleQuotesDefault(MODE_INPUT_STREAM);_testSingleQuotesDefault(MODE_INPUT_STREAM_THROTTLED);_testSingleQuotesDefault(MODE_DATA_INPUT);_testSingleQuotesDefault(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testSingleQuotesEnabled",0,"public void testSingleQuotesEnabled()throws Exception {_testSingleQuotesEnabled(MODE_INPUT_STREAM);_testSingleQuotesEnabled(MODE_INPUT_STREAM_THROTTLED);_testSingleQuotesEnabled(MODE_DATA_INPUT);_testSingleQuotesEnabled(MODE_READER);_testSingleQuotesEscaped(MODE_INPUT_STREAM);_testSingleQuotesEscaped(MODE_INPUT_STREAM_THROTTLED);_testSingleQuotesEscaped(MODE_DATA_INPUT);_testSingleQuotesEscaped(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testNonStandardNameChars",0,"public void testNonStandardNameChars()throws Exception {_testNonStandardNameChars(MODE_INPUT_STREAM);_testNonStandardNameChars(MODE_INPUT_STREAM_THROTTLED);_testNonStandardNameChars(MODE_DATA_INPUT);_testNonStandardNameChars(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testNonStandardAnyCharQuoting",0,"public void testNonStandardAnyCharQuoting()throws Exception {_testNonStandarBackslashQuoting(MODE_INPUT_STREAM);_testNonStandarBackslashQuoting(MODE_INPUT_STREAM_THROTTLED);_testNonStandarBackslashQuoting(MODE_DATA_INPUT);_testNonStandarBackslashQuoting(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testLeadingZeroesUTF8",0,"public void testLeadingZeroesUTF8()throws Exception {_testLeadingZeroes(MODE_INPUT_STREAM,false);_testLeadingZeroes(MODE_INPUT_STREAM,true);_testLeadingZeroes(MODE_INPUT_STREAM_THROTTLED,false);_testLeadingZeroes(MODE_INPUT_STREAM_THROTTLED,true);_testLeadingZeroes(MODE_DATA_INPUT,true);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testLeadingZeroesReader",0,"public void testLeadingZeroesReader()throws Exception {_testLeadingZeroes(MODE_READER,false);_testLeadingZeroes(MODE_READER,true);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testAllowNaN",0,"public void testAllowNaN()throws Exception {_testAllowNaN(MODE_INPUT_STREAM);_testAllowNaN(MODE_INPUT_STREAM_THROTTLED);_testAllowNaN(MODE_DATA_INPUT);_testAllowNaN(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardParserFeaturesTest.testAllowInfinity",0,"public void testAllowInfinity()throws Exception {_testAllowInf(MODE_INPUT_STREAM);_testAllowInf(MODE_INPUT_STREAM_THROTTLED);_testAllowInf(MODE_DATA_INPUT);_testAllowInf(MODE_READER);}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testValidEmpty",0,"public void testValidEmpty()throws Exception {final String DOC=""[\n  ]"";JsonParser jp=createParserUsingStream(DOC,""UTF-8"");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testInvalidEmptyMissingClose",0,"public void testInvalidEmptyMissingClose()throws Exception {final String DOC=""["";JsonParser jp=createParserUsingStream(DOC,""UTF-8"");assertToken(JsonToken.START_ARRAY,jp.nextToken());try {jp.nextToken();fail(""Expected a parsing error for missing array close marker"");}catch(JsonParseException jex){verifyException(jex,""expected close marker for ARRAY"");}jp.close();}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testInvalidMissingFieldName",0,"public void testInvalidMissingFieldName()throws Exception {final String DOC=""[: 3]"";JsonParser jp=createParserUsingStream(DOC,""UTF-8"");assertToken(JsonToken.START_ARRAY,jp.nextToken());try {jp.nextToken();fail(""Expected a parsing error for odd character"");}catch(JsonParseException jex){verifyException(jex,""Unexpected character"");}jp.close();}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testInvalidExtraComma",0,"public void testInvalidExtraComma()throws Exception {final String DOC=""[24,]"";JsonParser jp=createParserUsingStream(DOC,""UTF-8"");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(24,jp.getIntValue());try {jp.nextToken();fail(""Expected a parsing error for missing array close marker"");}catch(JsonParseException jex){verifyException(jex,""expected a value"");}jp.close();}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testMissingValueAsNullByEnablingFeature",0,"/** * Tests the missing value as 'null' in an array  This needs enabling of the Feature.ALLOW_MISSING_VALUES in JsonParser This tests both Stream based parsing and the Reader based parsing* @throws Exception*/public void testMissingValueAsNullByEnablingFeature()throws Exception {_testMissingValueByEnablingFeature(true);_testMissingValueByEnablingFeature(false);}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testMissingValueAsNullByNotEnablingFeature",0,"/** * Tests the missing value in an array by not enabling  the Feature.ALLOW_MISSING_VALUES* @throws Exception*/public void testMissingValueAsNullByNotEnablingFeature()throws Exception {_testMissingValueNotEnablingFeature(true);_testMissingValueNotEnablingFeature(false);}"
"com.fasterxml.jackson.core.main.TestArrayParsing.testNotMissingValueByEnablingFeature",0,"/** * Tests the not missing any value in an array by enabling the  Feature.ALLOW_MISSING_VALUES in JsonParser This tests both Stream based parsing and the Reader based parsing for not missing any value* @throws Exception*/public void testNotMissingValueByEnablingFeature()throws Exception {_testNotMissingValueByEnablingFeature(true);_testNotMissingValueByEnablingFeature(false);}"
"com.fasterxml.jackson.core.json.TestGeneratorWithSerializedString.testSimpleFieldNames",0,"public void testSimpleFieldNames()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);_writeSimple(gen);gen.close();String json=sw.toString();_verifySimple(JSON_F.createParser(json));ByteArrayOutputStream out=new ByteArrayOutputStream();gen=JSON_F.createGenerator(out,JsonEncoding.UTF8);_writeSimple(gen);gen.close();byte[]jsonB=out.toByteArray();_verifySimple(JSON_F.createParser(jsonB));}"
"com.fasterxml.jackson.core.json.TestGeneratorWithSerializedString.testSimpleValues",0,"public void testSimpleValues()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);_writeSimpleValues(gen);gen.close();_verifySimpleValues(JSON_F.createParser(new StringReader(sw.toString())));ByteArrayOutputStream out=new ByteArrayOutputStream();gen=JSON_F.createGenerator(out,JsonEncoding.UTF8);_writeSimpleValues(gen);gen.close();_verifySimpleValues(JSON_F.createParser(new ByteArrayInputStream(out.toByteArray())));}"
"com.fasterxml.jackson.core.json.async.AsyncLocationTest.testLocationOffsets",1,"public void testLocationOffsets()throws Exception {JsonParser parser=DEFAULT_F.createNonBlockingByteArrayParser();ByteArrayFeeder feeder=(ByteArrayFeeder)parser.getNonBlockingInputFeeder();byte[]input=utf8Bytes(""[[["");feeder.feedInput(input,2,3);assertEquals(JsonToken.START_ARRAY,parser.nextToken());assertEquals(1,parser.getCurrentLocation().getByteOffset());assertEquals(1,parser.getTokenLocation().getByteOffset());assertEquals(1,parser.getCurrentLocation().getLineNr());assertEquals(1,parser.getTokenLocation().getLineNr());assertEquals(2,parser.getCurrentLocation().getColumnNr());assertEquals(1,parser.getTokenLocation().getColumnNr());feeder.feedInput(input,0,1);assertEquals(JsonToken.START_ARRAY,parser.nextToken());assertEquals(2,parser.getCurrentLocation().getByteOffset());assertEquals(2,parser.getTokenLocation().getByteOffset());assertEquals(1,parser.getCurrentLocation().getLineNr());assertEquals(1,parser.getTokenLocation().getLineNr());assertEquals(3,parser.getCurrentLocation().getColumnNr());assertEquals(2,parser.getTokenLocation().getColumnNr());parser.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorObject.testEmptyObjectWrite",0,"public void testEmptyObjectWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);JsonStreamContext ctxt=gen.getOutputContext();assertTrue(ctxt.inRoot());assertFalse(ctxt.inArray());assertFalse(ctxt.inObject());assertEquals(0,ctxt.getEntryCount());assertEquals(0,ctxt.getCurrentIndex());gen.writeStartObject();ctxt=gen.getOutputContext();assertFalse(ctxt.inRoot());assertFalse(ctxt.inArray());assertTrue(ctxt.inObject());assertEquals(0,ctxt.getEntryCount());assertEquals(0,ctxt.getCurrentIndex());gen.writeEndObject();ctxt=gen.getOutputContext();assertTrue(ctxt.inRoot());assertFalse(ctxt.inArray());assertFalse(ctxt.inObject());assertEquals(1,ctxt.getEntryCount());assertEquals(0,ctxt.getCurrentIndex());gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.END_OBJECT,jp.nextToken());assertEquals(null,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorObject.testInvalidObjectWrite",0,"public void testInvalidObjectWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.writeStartObject();try {gen.writeEndArray();fail(""Expected an exception for mismatched array/object write"");}catch(JsonGenerationException e){verifyException(e,""Current context not Array"");}gen.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorObject.testSimpleObjectWrite",0,"public void testSimpleObjectWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.writeStartObject();gen.writeFieldName(""first"");gen.writeNumber(-901);gen.writeFieldName(""sec"");gen.writeBoolean(false);gen.writeFieldName(""3rd!"");gen.writeString(""yee-haw"");gen.writeEndObject();gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""first"",jp.getText());assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(-901,jp.getIntValue());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""sec"",jp.getText());assertEquals(JsonToken.VALUE_FALSE,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""3rd!"",jp.getText());assertEquals(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""yee-haw"",jp.getText());assertEquals(JsonToken.END_OBJECT,jp.nextToken());assertEquals(null,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorObject.testConvenienceMethods",0,"/** * Methods to test functionality added for [JACKSON-26]*/public void testConvenienceMethods()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.writeStartObject();final BigDecimal dec=new BigDecimal(""0.1"");final String TEXT=""\""some\nString!\"""";gen.writeNullField(""null"");gen.writeBooleanField(""bt"",true);gen.writeBooleanField(""bf"",false);gen.writeNumberField(""int"",-1289);gen.writeNumberField(""dec"",dec);gen.writeObjectFieldStart(""ob"");gen.writeStringField(""str"",TEXT);gen.writeEndObject();gen.writeArrayFieldStart(""arr"");gen.writeEndArray();gen.writeEndObject();gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""null"",jp.getText());assertEquals(JsonToken.VALUE_NULL,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""bt"",jp.getText());assertEquals(JsonToken.VALUE_TRUE,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""bf"",jp.getText());assertEquals(JsonToken.VALUE_FALSE,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""int"",jp.getText());assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""dec"",jp.getText());assertEquals(JsonToken.VALUE_NUMBER_FLOAT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""ob"",jp.getText());assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""str"",jp.getText());assertEquals(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(TEXT,getAndVerifyText(jp));assertEquals(JsonToken.END_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""arr"",jp.getText());assertEquals(JsonToken.START_ARRAY,jp.nextToken());assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertEquals(JsonToken.END_OBJECT,jp.nextToken());assertEquals(null,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorObject.testConvenienceMethodsWithNulls",0,"/** * Tests to cover [JACKSON-164]*/public void testConvenienceMethodsWithNulls()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.writeStartObject();gen.writeStringField(""str"",null);gen.writeNumberField(""num"",null);gen.writeObjectField(""obj"",null);gen.writeEndObject();gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""str"",jp.getCurrentName());assertEquals(JsonToken.VALUE_NULL,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""num"",jp.getCurrentName());assertEquals(JsonToken.VALUE_NULL,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""obj"",jp.getCurrentName());assertEquals(JsonToken.VALUE_NULL,jp.nextToken());assertEquals(JsonToken.END_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.util.RequestPayloadTest.testFailsToCreateTakingCharSequenceThrowsIllegalArgumentExceptionOne",0,"@SuppressWarnings(""unused"")@Test(expected=IllegalArgumentException.class)public void testFailsToCreateTakingCharSequenceThrowsIllegalArgumentExceptionOne(){new RequestPayload(null);}"
"com.fasterxml.jackson.core.util.RequestPayloadTest.testFailsToCreateTakingCharSequenceThrowsIllegalArgumentExceptionTwo",0,"@SuppressWarnings(""unused"")@Test(expected=IllegalArgumentException.class)public void testFailsToCreateTakingCharSequenceThrowsIllegalArgumentExceptionTwo(){new RequestPayload(null,""UTF-8"");}"
"com.fasterxml.jackson.core.util.RequestPayloadTest.testCreateTakingCharSequenceAndCallsGetRawPayload",0,"@Test public void testCreateTakingCharSequenceAndCallsGetRawPayload(){CharSequence charSequence=new String();RequestPayload requestPayload=new RequestPayload(charSequence);assertEquals("""",requestPayload.getRawPayload());}"
"com.fasterxml.jackson.core.util.RequestPayloadTest.testCreateTaking2ArgumentsAndCallsGetRawPayload",0,"@Test public void testCreateTaking2ArgumentsAndCallsGetRawPayload(){byte[]byteArray=new byte[5];RequestPayload requestPayload=new RequestPayload(byteArray,""/ _ \"" €"");assertSame(byteArray,requestPayload.getRawPayload());}"
"com.fasterxml.jackson.core.main.TestGeneratorClosing.testNoAutoCloseGenerator",0,"/** * This unit test checks the default behaviour;with no auto-close,no automatic closing should occur,nor explicit one unless specific forcing method is used.*/public void testNoAutoCloseGenerator()throws Exception {JsonFactory f=new JsonFactory();assertTrue(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);assertFalse(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));@SuppressWarnings(""resource"")ByteOutputStreamForTesting output=new ByteOutputStreamForTesting();JsonGenerator jg=f.createGenerator(output);assertFalse(output.isClosed());jg.writeNumber(39);jg.close();assertFalse(output.isClosed());}"
"com.fasterxml.jackson.core.main.TestGeneratorClosing.testCloseGenerator",0,"public void testCloseGenerator()throws Exception {JsonFactory f=new JsonFactory();f.enable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);@SuppressWarnings(""resource"")ByteOutputStreamForTesting output=new ByteOutputStreamForTesting();JsonGenerator jg=f.createGenerator(output);assertFalse(output.isClosed());jg.writeNumber(39);jg.close();assertTrue(output.isClosed());}"
"com.fasterxml.jackson.core.main.TestGeneratorClosing.testNoAutoCloseOutputStream",0,"public void testNoAutoCloseOutputStream()throws Exception {JsonFactory f=new JsonFactory();f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);@SuppressWarnings(""resource"")ByteOutputStreamForTesting output=new ByteOutputStreamForTesting();JsonGenerator jg=f.createGenerator(output,JsonEncoding.UTF8);assertFalse(output.isClosed());jg.writeNumber(39);jg.close();assertFalse(output.isClosed());}"
"com.fasterxml.jackson.core.main.TestGeneratorClosing.testAutoCloseArraysAndObjects",0,"public void testAutoCloseArraysAndObjects()throws Exception {JsonFactory f=new JsonFactory();assertTrue(f.isEnabled(StreamWriteFeature.AUTO_CLOSE_CONTENT));StringWriter sw=new StringWriter();JsonGenerator jg=f.createGenerator(sw);jg.writeStartArray();jg.close();assertEquals(""[]"",sw.toString());sw=new StringWriter();jg=f.createGenerator(sw);jg.writeStartObject();jg.close();assertEquals(""{}"",sw.toString());}"
"com.fasterxml.jackson.core.main.TestGeneratorClosing.testNoAutoCloseArraysAndObjects",0,"public void testNoAutoCloseArraysAndObjects()throws Exception {JsonFactory f=JsonFactory.builder().disable(StreamWriteFeature.AUTO_CLOSE_CONTENT).build();StringWriter sw=new StringWriter();JsonGenerator jg=f.createGenerator(sw);jg.writeStartArray();jg.close();assertEquals(""["",sw.toString());sw=new StringWriter();jg=f.createGenerator(sw);jg.writeStartObject();jg.close();assertEquals(""{"",sw.toString());}"
"com.fasterxml.jackson.core.main.TestGeneratorClosing.testAutoFlushOrNot",0,"@SuppressWarnings(""resource"")public void testAutoFlushOrNot()throws Exception {JsonFactory f=new JsonFactory();assertTrue(f.isEnabled(StreamWriteFeature.FLUSH_PASSED_TO_STREAM));StringWriterForTesting sw=new StringWriterForTesting();JsonGenerator jg=f.createGenerator(sw);jg.writeStartArray();jg.writeEndArray();assertEquals(0,sw.flushCount);jg.flush();assertEquals(1,sw.flushCount);jg.close();ByteOutputStreamForTesting bytes=new ByteOutputStreamForTesting();jg=f.createGenerator(bytes,JsonEncoding.UTF8);jg.writeStartArray();jg.writeEndArray();assertEquals(0,bytes.flushCount);jg.flush();assertEquals(1,bytes.flushCount);assertEquals(2,bytes.toByteArray().length);jg.close();f=JsonFactory.builder().disable(StreamWriteFeature.FLUSH_PASSED_TO_STREAM).build();sw=new StringWriterForTesting();jg=f.createGenerator(sw);jg.writeStartArray();jg.writeEndArray();assertEquals(0,sw.flushCount);jg.flush();assertEquals(0,sw.flushCount);jg.close();assertEquals(""[]"",sw.toString());bytes=new ByteOutputStreamForTesting();jg=f.createGenerator(bytes,JsonEncoding.UTF8);jg.writeStartArray();jg.writeEndArray();assertEquals(0,bytes.flushCount);jg.flush();assertEquals(0,bytes.flushCount);jg.close();assertEquals(2,bytes.toByteArray().length);}"
"com.fasterxml.jackson.core.json.ArrayGenerationTest.testIntArray",0,"public void testIntArray()throws Exception {_testIntArray(false);_testIntArray(true);}"
"com.fasterxml.jackson.core.json.ArrayGenerationTest.testLongArray",0,"public void testLongArray()throws Exception {_testLongArray(false);_testLongArray(true);}"
"com.fasterxml.jackson.core.json.ArrayGenerationTest.testDoubleArray",0,"public void testDoubleArray()throws Exception {_testDoubleArray(false);_testDoubleArray(true);}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleNestedTest.testStuffInObject",0,"public void testStuffInObject()throws Exception {byte[]data=_jsonDoc(aposToQuotes(""{'foobar':[1,2,-999],'emptyObject':{},'emptyArray':[],'other':{'':null}}""));JsonFactory f=JSON_F;_testStuffInObject(f,data,0,100);_testStuffInObject(f,data,0,3);_testStuffInObject(f,data,0,1);_testStuffInObject(f,data,1,100);_testStuffInObject(f,data,1,3);_testStuffInObject(f,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleNestedTest.testStuffInArray",0,"public void testStuffInArray()throws Exception {byte[]data=_jsonDoc(aposToQuotes(""[true,{'moreStuff':0},[null],{'extraOrdinary':23}]""));JsonFactory f=JSON_F;_testStuffInArray(f,data,0,100);_testStuffInArray(f,data,0,3);_testStuffInArray(f,data,0,1);_testStuffInArray(f,data,3,100);_testStuffInArray(f,data,3,3);_testStuffInArray(f,data,3,1);}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleNestedTest.testStuffInArray2",0,"public void testStuffInArray2()throws Exception {byte[]data=_jsonDoc(aposToQuotes(String.format(""[{'%s':true},{'%s':false},{'%s':true},{'%s':false}]"",SHORT_NAME,LONG_NAME,LONG_NAME,SHORT_NAME)));JsonFactory f=JSON_F;_testStuffInArray2(f,data,0,100);_testStuffInArray2(f,data,0,3);_testStuffInArray2(f,data,0,1);_testStuffInArray2(f,data,3,100);_testStuffInArray2(f,data,3,3);_testStuffInArray2(f,data,3,1);}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleNestedTest.testMismatchedArray",0,"public void testMismatchedArray()throws Exception {byte[]data=_jsonDoc(aposToQuotes(""[}""));JsonFactory f=JSON_F;_testMismatchedArray(f,data,0,99);_testMismatchedArray(f,data,0,3);_testMismatchedArray(f,data,0,2);_testMismatchedArray(f,data,0,1);_testMismatchedArray(f,data,1,3);_testMismatchedArray(f,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncSimpleNestedTest.testMismatchedObject",0,"public void testMismatchedObject()throws Exception {byte[]data=_jsonDoc(aposToQuotes(""{]""));JsonFactory f=JSON_F;_testMismatchedObject(f,data,0,99);_testMismatchedObject(f,data,0,3);_testMismatchedObject(f,data,0,2);_testMismatchedObject(f,data,0,1);_testMismatchedObject(f,data,1,3);_testMismatchedObject(f,data,1,1);}"
"com.fasterxml.jackson.core.format.TestJsonFormatDetection.testSimpleValidArray",0,"public void testSimpleValidArray()throws Exception {JsonFactory jsonF=new JsonFactory();DataFormatDetector detector=new DataFormatDetector(jsonF);final String ARRAY_JSON=""[1,2 ]"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(ARRAY_JSON.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""JSON"",matcher.getMatchedFormatName());assertSame(jsonF,matcher.getMatch());assertEquals(MatchStrength.SOLID_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.format.TestJsonFormatDetection.testSimpleValidObject",0,"public void testSimpleValidObject()throws Exception {JsonFactory jsonF=new JsonFactory();DataFormatDetector detector=new DataFormatDetector(jsonF);final String JSON=""{\""field\"" : true }"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(JSON.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""JSON"",matcher.getMatchedFormatName());assertSame(jsonF,matcher.getMatch());assertEquals(MatchStrength.SOLID_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""field"",jp.getCurrentName());assertToken(JsonToken.VALUE_TRUE,jp.nextToken());assertToken(JsonToken.END_OBJECT,jp.nextToken());assertNull(jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.format.TestJsonFormatDetection.testSimpleValidString",0,"/** * While JSON String is not a strong match alone,it should be detected unless some better match is available*/public void testSimpleValidString()throws Exception {JsonFactory jsonF=new JsonFactory();DataFormatDetector detector=new DataFormatDetector(jsonF);final String JSON=""\""JSON!\"""";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(JSON.getBytes(""UTF-8"")));assertTrue(matcher.hasMatch());assertEquals(""JSON"",matcher.getMatchedFormatName());assertSame(jsonF,matcher.getMatch());assertEquals(MatchStrength.WEAK_MATCH,matcher.getMatchStrength());JsonParser jp=matcher.createParserWithMatch();assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""JSON!"",jp.getText());assertNull(jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.format.TestJsonFormatDetection.testSimpleInvalid",0,"public void testSimpleInvalid()throws Exception {DataFormatDetector detector=new DataFormatDetector(new JsonFactory());final String NON_JSON=""<root />"";DataFormatMatcher matcher=detector.findFormat(new ByteArrayInputStream(NON_JSON.getBytes(""UTF-8"")));assertFalse(matcher.hasMatch());assertEquals(MatchStrength.INCONCLUSIVE,matcher.getMatchStrength());assertNull(matcher.createParserWithMatch());}"
"com.fasterxml.jackson.core.json.TestCustomEscaping.testAboveAsciiEscapeWithReader",0,"/** * Test to ensure that it is possible to force escaping of non-ASCII characters. Related to [JACKSON-102]*/public void testAboveAsciiEscapeWithReader()throws Exception {_testEscapeAboveAscii(false);}"
"com.fasterxml.jackson.core.json.TestCustomEscaping.testAboveAsciiEscapeWithUTF8Stream",0,"public void testAboveAsciiEscapeWithUTF8Stream()throws Exception {_testEscapeAboveAscii(true);}"
"com.fasterxml.jackson.core.json.TestCustomEscaping.testEscapeCustomWithReader",0,"public void testEscapeCustomWithReader()throws Exception {_testEscapeCustom(false);}"
"com.fasterxml.jackson.core.json.TestCustomEscaping.testEscapeCustomWithUTF8Stream",0,"public void testEscapeCustomWithUTF8Stream()throws Exception {_testEscapeCustom(true);}"
"com.fasterxml.jackson.core.json.TestCustomEscaping.testJsonpEscapes",0,"public void testJsonpEscapes()throws Exception {_testJsonpEscapes(false);_testJsonpEscapes(true);}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNonFiltering",0,"public void testNonFiltering()throws Exception {JsonParser p=JSON_F.createParser(SIMPLE);String result=readAndWrite(JSON_F,p);assertEquals(SIMPLE,result);}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testSingleMatchFilteringWithoutPath",0,"public void testSingleMatchFilteringWithoutPath()throws Exception {JsonParser p0=JSON_F.createParser(SIMPLE);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),false,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""3""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testSingleMatchFilteringWithPath1",0,"public void testSingleMatchFilteringWithPath1()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""a""),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'a':123}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testSingleMatchFilteringWithPath2",0,"public void testSingleMatchFilteringWithPath2()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{\""ob\"":{\""value\"":3}}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testSingleMatchFilteringWithPath3",0,"public void testSingleMatchFilteringWithPath3()throws Exception {String jsonString=aposToQuotes(""{'a':123,'ob':{'value0':2,'value':3,'value2':4},'array':[1,2],'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""ob""),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'ob':{'value0':2,'value':3,'value2':4}}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatchesWithoutPath1",0,"public void testNotAllowMultipleMatchesWithoutPath1()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),false,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""3""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatchesWithoutPath2",0,"public void testNotAllowMultipleMatchesWithoutPath2()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\""val\"",'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new IndexMatchFilter(1),false,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""2""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatchesWithPath1",0,"public void testNotAllowMultipleMatchesWithPath1()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'array':[3,4],'ob':{'value':3,'array':[5,6],'value':{'value0':2}},'value':\""val\"",'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new IndexMatchFilter(1),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{\""array\"":[2]}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatchesWithPath2",0,"public void testNotAllowMultipleMatchesWithPath2()throws Exception {String jsonString=aposToQuotes(""{'a':123,'ob':{'value':3,'array':[1,2],'value':{'value0':2}},'array':[3,4]}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new IndexMatchFilter(1),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{\""ob\"":{\""array\"":[2]}}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatchesWithPath3",0,"public void testNotAllowMultipleMatchesWithPath3()throws Exception {String jsonString=aposToQuotes(""{'ob':{'value':3,'ob':{'value':2}},'value':\""val\""}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'ob':{'value':3}}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testNotAllowMultipleMatchesWithPath4",0,"public void testNotAllowMultipleMatchesWithPath4()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value1':1},'ob2':{'ob':{'value2':2}},'value':\""val\"",'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""ob""),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'ob':{'value1':1}}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testAllowMultipleMatchesWithoutPath",0,"public void testAllowMultipleMatchesWithoutPath()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\""val\"",'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),false,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""3 {\""value0\"":2}\""val\""""),result);assertEquals(3,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testAllowMultipleMatchesWithPath1",0,"public void testAllowMultipleMatchesWithPath1()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\""val\"",'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{\""ob\"":{\""value\"":3,\""value\"":{\""value0\"":2}},\""value\"":\""val\""}""),result);assertEquals(3,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testAllowMultipleMatchesWithPath2",0,"public void testAllowMultipleMatchesWithPath2()throws Exception {String jsonString=aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'array':[3,4],'value':{'value0':2}},'value':\""val\"",'b':true}"");JsonParser p0=JSON_F.createParser(jsonString);FilteringParserDelegate p=new FilteringParserDelegate(p0,new IndexMatchFilter(1),true,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{\""array\"":[2],\""ob\"":{\""array\"":[4]}}""),result);assertEquals(2,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testMultipleMatchFilteringWithPath1",0,"public void testMultipleMatchFilteringWithPath1()throws Exception {JsonParser p0=JSON_F.createParser(SIMPLE);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value0"",""value2""),true,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'ob':{'value0':2,'value2':4}}""),result);assertEquals(2,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testMultipleMatchFilteringWithPath2",0,"public void testMultipleMatchFilteringWithPath2()throws Exception {String INPUT=aposToQuotes(""{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}"");JsonParser p0=JSON_F.createParser(INPUT);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""b"",""value""),true,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'ob':{'value':3},'b':true}""),result);assertEquals(2,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testMultipleMatchFilteringWithPath3",0,"public void testMultipleMatchFilteringWithPath3()throws Exception {final String JSON=aposToQuotes(""{'root':{'a0':true,'a':{'value':3},'b':{'value':\""foo\""}},'b0':false}"");JsonParser p0=JSON_F.createParser(JSON);FilteringParserDelegate p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'root':{'a':{'value':3},'b':{'value':\""foo\""}}}""),result);assertEquals(2,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testIndexMatchWithPath1",0,"public void testIndexMatchWithPath1()throws Exception {FilteringParserDelegate p=new FilteringParserDelegate(JSON_F.createParser(SIMPLE),new IndexMatchFilter(1),true,true);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'array':[2]}""),result);assertEquals(1,p.getMatchCount());p=new FilteringParserDelegate(JSON_F.createParser(SIMPLE),new IndexMatchFilter(0),true,true);result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'array':[1]}""),result);assertEquals(1,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testIndexMatchWithPath2",0,"public void testIndexMatchWithPath2()throws Exception {FilteringParserDelegate p=new FilteringParserDelegate(JSON_F.createParser(SIMPLE),new IndexMatchFilter(0,1),true,true);assertEquals(aposToQuotes(""{'array':[1,2]}""),readAndWrite(JSON_F,p));assertEquals(2,p.getMatchCount());String JSON=aposToQuotes(""{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}"");p=new FilteringParserDelegate(JSON_F.createParser(JSON),new IndexMatchFilter(1,3),true,true);assertEquals(aposToQuotes(""{'array':[2,4],'b':[2]}""),readAndWrite(JSON_F,p));assertEquals(3,p.getMatchCount());}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testBasicSingleMatchFilteringWithPath",0,"public void testBasicSingleMatchFilteringWithPath()throws Exception {JsonParser p0=JSON_F.createParser(SIMPLE);JsonParser p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,false);String result=readAndWrite(JSON_F,p);assertEquals(aposToQuotes(""{'ob':{'value':3}}""),result);}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testTokensSingleMatchWithPath",0,"public void testTokensSingleMatchWithPath()throws Exception {JsonParser p0=JSON_F.createParser(SIMPLE);JsonParser p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,false);assertFalse(p.hasCurrentToken());assertNull(p.getCurrentToken());assertEquals(JsonTokenId.ID_NO_TOKEN,p.getCurrentTokenId());assertFalse(p.isExpectedStartObjectToken());assertFalse(p.isExpectedStartArrayToken());assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(JsonToken.START_OBJECT,p.getCurrentToken());assertTrue(p.isExpectedStartObjectToken());assertFalse(p.isExpectedStartArrayToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(JsonToken.FIELD_NAME,p.getCurrentToken());assertEquals(""ob"",p.getCurrentName());assertToken(JsonToken.START_OBJECT,p.nextToken());assertEquals(""ob"",p.getCurrentName());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""value"",p.getCurrentName());assertEquals(""value"",p.getText());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonToken.VALUE_NUMBER_INT,p.getCurrentToken());assertEquals(JsonParser.NumberType.INT,p.getNumberType());assertEquals(3,p.getIntValue());assertEquals(""value"",p.getCurrentName());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(JsonToken.END_OBJECT,p.getCurrentToken());assertToken(JsonToken.END_OBJECT,p.nextToken());assertEquals(JsonToken.END_OBJECT,p.getCurrentToken());p.clearCurrentToken();assertNull(p.getCurrentToken());p.close();}"
"com.fasterxml.jackson.core.filter.BasicParserFilteringTest.testSkippingForSingleWithPath",0,"public void testSkippingForSingleWithPath()throws Exception {JsonParser p0=JSON_F.createParser(SIMPLE);JsonParser p=new FilteringParserDelegate(p0,new NameMatchFilter(""value""),true,false);assertToken(JsonToken.START_OBJECT,p.nextToken());p.skipChildren();assertEquals(JsonToken.END_OBJECT,p.getCurrentToken());assertNull(p.nextToken());}"
"com.fasterxml.jackson.core.TestJsonPointer.testSimplePath",0,"public void testSimplePath()throws Exception {final String INPUT=""/Image/15/name"";JsonPointer ptr=JsonPointer.compile(INPUT);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(""Image"",ptr.getMatchingProperty());assertEquals(""/Image/15"",ptr.head().toString());assertEquals(INPUT,ptr.toString());ptr=ptr.tail();assertNotNull(ptr);assertFalse(ptr.matches());assertEquals(15,ptr.getMatchingIndex());assertEquals(""15"",ptr.getMatchingProperty());assertEquals(""/15/name"",ptr.toString());assertEquals(""/15"",ptr.head().toString());assertEquals("""",ptr.head().head().toString());assertNull(ptr.head().head().head());ptr=ptr.tail();assertNotNull(ptr);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(""name"",ptr.getMatchingProperty());assertEquals(""/name"",ptr.toString());assertEquals("""",ptr.head().toString());assertSame(JsonPointer.EMPTY,ptr.head());ptr=ptr.tail();assertTrue(ptr.matches());assertNull(ptr.tail());assertNull(ptr.head());assertEquals("""",ptr.getMatchingProperty());assertEquals(-1,ptr.getMatchingIndex());}"
"com.fasterxml.jackson.core.TestJsonPointer.testSimplePathLonger",0,"public void testSimplePathLonger()throws Exception {final String INPUT=""/a/b/c/d/e/f/0"";JsonPointer ptr=JsonPointer.compile(INPUT);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(""a"",ptr.getMatchingProperty());assertEquals(""/a/b/c/d/e/f"",ptr.head().toString());assertEquals(""/b/c/d/e/f/0"",ptr.tail().toString());assertEquals(""/0"",ptr.last().toString());assertEquals(INPUT,ptr.toString());}"
"com.fasterxml.jackson.core.TestJsonPointer.testWonkyNumber173",0,"public void testWonkyNumber173()throws Exception {JsonPointer ptr=JsonPointer.compile(""/1e0"");assertFalse(ptr.matches());}"
"com.fasterxml.jackson.core.TestJsonPointer.testIZeroIndex",0,"public void testIZeroIndex()throws Exception {JsonPointer ptr=JsonPointer.compile(""/0"");assertEquals(0,ptr.getMatchingIndex());ptr=JsonPointer.compile(""/00"");assertEquals(-1,ptr.getMatchingIndex());}"
"com.fasterxml.jackson.core.TestJsonPointer.testLast",0,"public void testLast(){final String INPUT=""/Image/15/name"";JsonPointer ptr=JsonPointer.compile(INPUT);JsonPointer leaf=ptr.last();assertEquals(""name"",leaf.getMatchingProperty());}"
"com.fasterxml.jackson.core.TestJsonPointer.testEmpty",0,"public void testEmpty(){JsonPointer ptr=JsonPointer.compile(""/"");assertNotNull(ptr);assertNotSame(JsonPointer.EMPTY,ptr);assertEquals(""/"",ptr.toString());}"
"com.fasterxml.jackson.core.TestJsonPointer.testAppend",0,"public void testAppend(){final String INPUT=""/Image/15/name"";final String APPEND=""/extension"";JsonPointer ptr=JsonPointer.compile(INPUT);JsonPointer apd=JsonPointer.compile(APPEND);JsonPointer appended=ptr.append(apd);assertEquals(""extension"",appended.last().getMatchingProperty());}"
"com.fasterxml.jackson.core.TestJsonPointer.testAppendWithFinalSlash",0,"public void testAppendWithFinalSlash(){final String INPUT=""/Image/15/name/"";final String APPEND=""/extension"";JsonPointer ptr=JsonPointer.compile(INPUT);JsonPointer apd=JsonPointer.compile(APPEND);JsonPointer appended=ptr.append(apd);assertEquals(""extension"",appended.last().getMatchingProperty());}"
"com.fasterxml.jackson.core.TestJsonPointer.testQuotedPath",0,"public void testQuotedPath()throws Exception {final String INPUT=""/w~1out/til~0de/a~1b"";JsonPointer ptr=JsonPointer.compile(INPUT);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(""w/out"",ptr.getMatchingProperty());assertEquals(""/w~1out/til~0de"",ptr.head().toString());assertEquals(INPUT,ptr.toString());ptr=ptr.tail();assertNotNull(ptr);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(""til~de"",ptr.getMatchingProperty());assertEquals(""/til~0de"",ptr.head().toString());assertEquals(""/til~0de/a~1b"",ptr.toString());ptr=ptr.tail();assertNotNull(ptr);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(""a/b"",ptr.getMatchingProperty());assertEquals(""/a~1b"",ptr.toString());assertEquals("""",ptr.head().toString());ptr=ptr.tail();assertTrue(ptr.matches());assertNull(ptr.tail());}"
"com.fasterxml.jackson.core.TestJsonPointer.testLongNumbers",0,"public void testLongNumbers()throws Exception {final long LONG_ID=((long)Integer.MAX_VALUE)+ 1L;final String INPUT=""/User/"" + LONG_ID;JsonPointer ptr=JsonPointer.compile(INPUT);assertEquals(""User"",ptr.getMatchingProperty());assertEquals(INPUT,ptr.toString());ptr=ptr.tail();assertNotNull(ptr);assertFalse(ptr.matches());assertEquals(-1,ptr.getMatchingIndex());assertEquals(String.valueOf(LONG_ID),ptr.getMatchingProperty());ptr=ptr.tail();assertTrue(ptr.matches());assertNull(ptr.tail());}"
"com.fasterxml.jackson.core.JsonpCharacterEscapesTest.testGetEscapeSequenceOne",0,"@Test public void testGetEscapeSequenceOne(){JsonpCharacterEscapes jsonpCharacterEscapes=JsonpCharacterEscapes.instance();assertEquals(new SerializedString(""\\u2028""),jsonpCharacterEscapes.getEscapeSequence(0x2028));}"
"com.fasterxml.jackson.core.JsonpCharacterEscapesTest.testGetEscapeSequenceTwo",0,"@Test public void testGetEscapeSequenceTwo(){JsonpCharacterEscapes jsonpCharacterEscapes=JsonpCharacterEscapes.instance();assertEquals(new SerializedString(""\\u2029""),jsonpCharacterEscapes.getEscapeSequence(0x2029));}"
"com.fasterxml.jackson.core.json.TestUnicode.testSurrogates",0,"public void testSurrogates()throws Exception {JsonFactory f=new JsonFactory();_testSurrogates(f,true);_testSurrogates(f,false);}"
"com.fasterxml.jackson.core.sym.TestByteBasedSymbols.testSharedSymbols",0,"/** * This unit test checks that [JACKSON-5]is fixed;if not,a symbol table corruption should result in odd problems.*/public void testSharedSymbols()throws Exception {JsonFactory jf=new JsonFactory();String DOC0=""{\""a\"" : 1,\""x\"" :[]}"";JsonParser jp0=createParser(jf,DOC0);while (jp0.nextToken()!= JsonToken.START_ARRAY){}String doc1=createDoc(FIELD_NAMES,true);String doc2=createDoc(FIELD_NAMES,false);for (int x=0;x < 2;++x){JsonParser jp1=createParser(jf,doc1);JsonParser jp2=createParser(jf,doc2);assertToken(JsonToken.START_OBJECT,jp1.nextToken());assertToken(JsonToken.START_OBJECT,jp2.nextToken());int len=FIELD_NAMES.length;for (int i=0;i < len;++i){assertToken(JsonToken.FIELD_NAME,jp1.nextToken());assertToken(JsonToken.FIELD_NAME,jp2.nextToken());assertEquals(FIELD_NAMES[i],jp1.getCurrentName());assertEquals(FIELD_NAMES[len - (i + 1)],jp2.getCurrentName());assertToken(JsonToken.VALUE_NUMBER_INT,jp1.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp2.nextToken());assertEquals(i,jp1.getIntValue());assertEquals(i,jp2.getIntValue());}assertToken(JsonToken.END_OBJECT,jp1.nextToken());assertToken(JsonToken.END_OBJECT,jp2.nextToken());jp1.close();jp2.close();}jp0.close();}"
"com.fasterxml.jackson.core.sym.TestByteBasedSymbols.testAuxMethodsWithNewSymboTable",0,"public void testAuxMethodsWithNewSymboTable()throws Exception {final int A_BYTES=0x41414141;final int B_BYTES=0x42424242;ByteQuadsCanonicalizer nc=ByteQuadsCanonicalizer.createRoot().makeChild(JsonFactory.Feature.collectDefaults());assertNull(nc.findName(A_BYTES));assertNull(nc.findName(A_BYTES,B_BYTES));nc.addName(""AAAA"",new int[]{A_BYTES},1);String n1=nc.findName(A_BYTES);assertEquals(""AAAA"",n1);nc.addName(""AAAABBBB"",new int[]{A_BYTES,B_BYTES},2);String n2=nc.findName(A_BYTES,B_BYTES);assertEquals(""AAAABBBB"",n2);assertNotNull(n2);assertNotNull(nc.toString());}"
"com.fasterxml.jackson.core.sym.TestByteBasedSymbols.testIssue207",0,"public void testIssue207()throws Exception {ByteQuadsCanonicalizer nc=ByteQuadsCanonicalizer.createRoot(-523743345);Field byteSymbolCanonicalizerField=JsonFactory.class.getDeclaredField(""_byteSymbolCanonicalizer"");byteSymbolCanonicalizerField.setAccessible(true);JsonFactory jsonF=new JsonFactory();byteSymbolCanonicalizerField.set(jsonF,nc);StringBuilder stringBuilder=new StringBuilder();stringBuilder.append(""{\n"");stringBuilder.append(""    \""expectedGCperPosition\"": null"");for (int i=0;i < 60;++i){stringBuilder.append("",\n    \"""").append(i + 1).append(""\"": null"");}stringBuilder.append(""\n}"");JsonParser p=jsonF.createParser(stringBuilder.toString().getBytes(""UTF-8""));while (p.nextToken()!= null){}p.close();}"
"com.fasterxml.jackson.core.json.LocationOffsetsTest.testSimpleInitialOffsets",0,"public void testSimpleInitialOffsets()throws Exception {JsonLocation loc;JsonParser p;final String DOC=""{}"";p=JSON_F.createParser(DOC);assertToken(JsonToken.START_OBJECT,p.nextToken());loc=p.getTokenLocation();assertEquals(-1L,loc.getByteOffset());assertEquals(0L,loc.getCharOffset());assertEquals(1,loc.getLineNr());assertEquals(1,loc.getColumnNr());loc=p.getCurrentLocation();assertEquals(-1L,loc.getByteOffset());assertEquals(1L,loc.getCharOffset());assertEquals(1,loc.getLineNr());assertEquals(2,loc.getColumnNr());p.close();p=JSON_F.createParser(DOC.getBytes(""UTF-8""));assertToken(JsonToken.START_OBJECT,p.nextToken());loc=p.getTokenLocation();assertEquals(0L,loc.getByteOffset());assertEquals(-1L,loc.getCharOffset());assertEquals(1,loc.getLineNr());assertEquals(1,loc.getColumnNr());loc=p.getCurrentLocation();assertEquals(1L,loc.getByteOffset());assertEquals(-1L,loc.getCharOffset());assertEquals(1,loc.getLineNr());assertEquals(2,loc.getColumnNr());p.close();}"
"com.fasterxml.jackson.core.json.LocationOffsetsTest.testOffsetWithInputOffset",0,"public void testOffsetWithInputOffset()throws Exception {JsonLocation loc;JsonParser p;byte[]b=""{}"".getBytes(""UTF-8"");p=JSON_F.createParser(b,3,b.length - 5);assertToken(JsonToken.START_OBJECT,p.nextToken());loc=p.getTokenLocation();assertEquals(0L,loc.getByteOffset());assertEquals(-1L,loc.getCharOffset());assertEquals(1,loc.getLineNr());assertEquals(1,loc.getColumnNr());loc=p.getCurrentLocation();assertEquals(1L,loc.getByteOffset());assertEquals(-1L,loc.getCharOffset());assertEquals(1,loc.getLineNr());assertEquals(2,loc.getColumnNr());p.close();}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testSimpleBoolean",0,"public void testSimpleBoolean()throws Exception {_testSimpleBoolean(MODE_INPUT_STREAM);_testSimpleBoolean(MODE_INPUT_STREAM_THROTTLED);_testSimpleBoolean(MODE_READER);_testSimpleBoolean(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testSimpleInt",0,"public void testSimpleInt()throws Exception {for(int EXP_I : new int[]{1234,-999,0,1,-2}){_testSimpleInt(EXP_I,MODE_INPUT_STREAM);_testSimpleInt(EXP_I,MODE_INPUT_STREAM_THROTTLED);_testSimpleInt(EXP_I,MODE_READER);_testSimpleInt(EXP_I,MODE_DATA_INPUT);}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testIntRange",0,"public void testIntRange()throws Exception {for(int mode : ALL_MODES){String DOC=""["" + Integer.MAX_VALUE + "",""+ Integer.MIN_VALUE+ "" ]"";JsonParser p=createParser(mode,DOC);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.INT,p.getNumberType());assertEquals(Integer.MAX_VALUE,p.getIntValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.INT,p.getNumberType());assertEquals(Integer.MIN_VALUE,p.getIntValue());p.close();}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testSimpleLong",0,"public void testSimpleLong()throws Exception {_testSimpleLong(MODE_INPUT_STREAM);_testSimpleLong(MODE_INPUT_STREAM_THROTTLED);_testSimpleLong(MODE_READER);_testSimpleLong(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testLongRange",0,"public void testLongRange()throws Exception {for(int mode : ALL_MODES){long belowMinInt=-1L + Integer.MIN_VALUE;long aboveMaxInt=1L + Integer.MAX_VALUE;String input=""["" + Long.MAX_VALUE + "",""+ Long.MIN_VALUE+ "",""+ aboveMaxInt+ "",""+ belowMinInt+ "" ]"";JsonParser p=createParser(mode,input);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.LONG,p.getNumberType());assertEquals(Long.MAX_VALUE,p.getLongValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.LONG,p.getNumberType());assertEquals(Long.MIN_VALUE,p.getLongValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.LONG,p.getNumberType());assertEquals(aboveMaxInt,p.getLongValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.LONG,p.getNumberType());assertEquals(belowMinInt,p.getLongValue());assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testBigDecimalRange",0,"public void testBigDecimalRange()throws Exception {for(int mode : ALL_MODES){BigInteger small=new BigDecimal(Long.MIN_VALUE).toBigInteger();small=small.subtract(BigInteger.ONE);BigInteger big=new BigDecimal(Long.MAX_VALUE).toBigInteger();big=big.add(BigInteger.ONE);String input=""["" + small + "",""+ big+ ""]"";JsonParser p=createParser(mode,input);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.BIG_INTEGER,p.getNumberType());assertEquals(small,p.getBigIntegerValue());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.BIG_INTEGER,p.getNumberType());assertEquals(big,p.getBigIntegerValue());assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testBigNumbers",0,"public void testBigNumbers()throws Exception {StringBuilder sb=new StringBuilder();for (int i=0;i < 520;++i){sb.append('1');}final String NUMBER_STR=sb.toString();BigInteger biggie=new BigInteger(NUMBER_STR);for(int mode : ALL_MODES){JsonParser p=createParser(mode,NUMBER_STR + "" "");assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.BIG_INTEGER,p.getNumberType());assertEquals(NUMBER_STR,p.getText());assertEquals(biggie,p.getBigIntegerValue());p.close();}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testSimpleDouble",0,"public void testSimpleDouble()throws Exception {final String[]INPUTS=new String[]{""1234.00"",""2.1101567E-16"",""1.0e5"",""0.0"",""1.0"",""-1.0"",""-0.5"",""-12.9"",""-999.0"",""2.5e+5"",""9e4"",""-12e-3"",""0.25""};for(int mode : ALL_MODES){for (int i=0;i < INPUTS.length;++i){String STR=INPUTS[i];double EXP_D=Double.parseDouble(STR);String DOC=""["" + STR + ""]"";JsonParser p=createParser(mode,DOC + "" "");assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(STR,p.getText());assertEquals(EXP_D,p.getDoubleValue());assertToken(JsonToken.END_ARRAY,p.nextToken());if (mode != MODE_DATA_INPUT){assertNull(p.nextToken());}p.close();p=createParser(mode,STR + "" "");JsonToken t=null;try {t=p.nextToken();}catch(Exception e){throw new Exception(""Failed to parse input '"" + STR + ""' (parser of type ""+ p.getClass().getSimpleName()+ "")"",e);}assertToken(JsonToken.VALUE_NUMBER_FLOAT,t);assertEquals(STR,p.getText());if (mode != MODE_DATA_INPUT){assertNull(p.nextToken());}p.close();}}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testNumbers",0,"public void testNumbers()throws Exception {_testNumbers(MODE_INPUT_STREAM);_testNumbers(MODE_INPUT_STREAM_THROTTLED);_testNumbers(MODE_READER);_testNumbers(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testParsingOfLongerSequences",0,"/** * Method that tries to test that number parsing works in cases where input is split between buffer boundaries.*/public void testParsingOfLongerSequences()throws Exception {double[]values=new double[]{0.01,-10.5,2.1e9,4.0e-8};StringBuilder sb=new StringBuilder();for (int i=0;i < values.length;++i){if (i > 0){sb.append(',');}sb.append(values[i]);}String segment=sb.toString();int COUNT=1000;sb=new StringBuilder(COUNT * segment.length()+ 20);sb.append(""["");for (int i=0;i < COUNT;++i){if (i > 0){sb.append(',');}sb.append(segment);sb.append('\n');int x=(i & 3);if (i > 300){x+=i % 5;}while (--x > 0){sb.append(' ');}}sb.append(""]"");String DOC=sb.toString();for (int input=0;input < 2;++input){JsonParser p;if (input == 0){p=createParserUsingStream(DOC,""UTF-8"");}else {p=FACTORY.createParser(DOC);}assertToken(JsonToken.START_ARRAY,p.nextToken());for (int i=0;i < COUNT;++i){for(double d : values){assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(d,p.getDoubleValue());}}assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testLongNumbers",0,"public void testLongNumbers()throws Exception {StringBuilder sb=new StringBuilder(9000);for (int i=0;i < 9000;++i){sb.append('9');}String NUM=sb.toString();JsonFactory f=new JsonFactory();_testLongNumbers(f,NUM,false);_testLongNumbers(f,NUM,true);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testLongNumbers2",0,"public void testLongNumbers2()throws Exception {StringBuilder input=new StringBuilder();input.append('-');for (int i=0;i < 2100;i++){input.append(1);}final String DOC=input.toString();JsonFactory f=new JsonFactory();_testIssue160LongNumbers(f,DOC,false);_testIssue160LongNumbers(f,DOC,true);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testParsingOfLongerSequencesWithNonNumeric",0,"/** * Method that tries to test that number parsing works in cases where input is split between buffer boundaries.*/public void testParsingOfLongerSequencesWithNonNumeric()throws Exception {JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS).build();_testParsingOfLongerSequencesWithNonNumeric(f,MODE_INPUT_STREAM);_testParsingOfLongerSequencesWithNonNumeric(f,MODE_INPUT_STREAM_THROTTLED);_testParsingOfLongerSequencesWithNonNumeric(f,MODE_READER);_testParsingOfLongerSequencesWithNonNumeric(f,MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testInvalidBooleanAccess",0,"public void testInvalidBooleanAccess()throws Exception {_testInvalidBooleanAccess(MODE_INPUT_STREAM);_testInvalidBooleanAccess(MODE_INPUT_STREAM_THROTTLED);_testInvalidBooleanAccess(MODE_READER);_testInvalidBooleanAccess(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testInvalidIntAccess",0,"public void testInvalidIntAccess()throws Exception {_testInvalidIntAccess(MODE_INPUT_STREAM);_testInvalidIntAccess(MODE_INPUT_STREAM_THROTTLED);_testInvalidIntAccess(MODE_READER);_testInvalidIntAccess(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testInvalidLongAccess",0,"public void testInvalidLongAccess()throws Exception {_testInvalidLongAccess(MODE_INPUT_STREAM);_testInvalidLongAccess(MODE_INPUT_STREAM_THROTTLED);_testInvalidLongAccess(MODE_READER);_testInvalidLongAccess(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testLongerFloatingPoint",0,"public void testLongerFloatingPoint()throws Exception {StringBuilder input=new StringBuilder();for (int i=1;i < 201;i++){input.append(1);}input.append("".0"");final String DOC=input.toString();JsonParser p;p=FACTORY.createParser(new StringReader(DOC));_testLongerFloat(p,DOC);p.close();p=FACTORY.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")));_testLongerFloat(p,DOC);p.close();}"
"com.fasterxml.jackson.core.read.NumberParsingTest.testInvalidNumber",0,"public void testInvalidNumber()throws Exception {for(int mode : ALL_MODES){JsonParser p=createParser(mode,"" -foo "");try {p.nextToken();fail(""Should not pass"");}catch(JsonParseException e){verifyException(e,""Unexpected character ('f'"");}p.close();}}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testTokens",0,"public void testTokens()throws IOException {byte[]data=_jsonDoc(""[true,false  ,true,null,false,null]"");JsonFactory f=JSON_F;_testTokens(f,data,0,100);_testTokens(f,data,0,5);_testTokens(f,data,0,3);_testTokens(f,data,0,2);_testTokens(f,data,0,1);_testTokens(f,data,1,100);_testTokens(f,data,1,3);_testTokens(f,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testInts",0,"public void testInts()throws IOException {final int[]input=new int[]{1,-1,16,-17,0,131,-0,-155,1000,-3000,0xFFFF,-99999,Integer.MAX_VALUE,0,Integer.MIN_VALUE};StringBuilder sb=new StringBuilder().append(""["");for (int i=0;i < input.length;++i){if (i > 0)sb.append(',');sb.append(input[i]);}byte[]data=_jsonDoc(sb.append(']').toString());JsonFactory f=JSON_F;_testInts(f,input,data,0,100);_testInts(f,input,data,0,3);_testInts(f,input,data,0,1);_testInts(f,input,data,1,100);_testInts(f,input,data,1,3);_testInts(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testLong",0,"public void testLong()throws IOException {final long[]input=new long[]{-1L + Integer.MIN_VALUE,1L + Integer.MAX_VALUE,19L * Integer.MIN_VALUE,27L * Integer.MAX_VALUE,Long.MIN_VALUE,Long.MAX_VALUE};ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);JsonFactory f=JSON_F;JsonGenerator g=f.createGenerator(bytes);g.writeStartArray();for (int i=0;i < input.length;++i){g.writeNumber(input[i]);}g.writeEndArray();g.close();byte[]data=bytes.toByteArray();_testLong(f,input,data,0,100);_testLong(f,input,data,0,3);_testLong(f,input,data,0,1);_testLong(f,input,data,1,100);_testLong(f,input,data,1,3);_testLong(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testFloats",0,"public void testFloats()throws IOException {final float[]input=new float[]{0.0f,0.25f,-0.5f,10000.125f,-99999.075f};ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);JsonFactory f=JSON_F;JsonGenerator g=f.createGenerator(bytes);g.writeStartArray();for (int i=0;i < input.length;++i){g.writeNumber(input[i]);}g.writeEndArray();g.close();byte[]data=bytes.toByteArray();_testFloats(f,input,data,0,100);_testFloats(f,input,data,0,3);_testFloats(f,input,data,0,1);_testFloats(f,input,data,1,100);_testFloats(f,input,data,1,3);_testFloats(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testDoubles",0,"public void testDoubles()throws IOException {final double[]input=new double[]{0.0,0.25,-0.5,10000.125,-99999.075};ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);JsonFactory f=JSON_F;JsonGenerator g=f.createGenerator(bytes);g.writeStartArray();for (int i=0;i < input.length;++i){g.writeNumber(input[i]);}g.writeEndArray();g.close();byte[]data=bytes.toByteArray();_testDoubles(f,input,data,0,99);_testDoubles(f,input,data,0,3);_testDoubles(f,input,data,0,1);_testDoubles(f,input,data,1,99);_testDoubles(f,input,data,1,3);_testDoubles(f,input,data,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testBigIntegers",0,"public void testBigIntegers()throws IOException {BigInteger bigBase=BigInteger.valueOf(Long.MAX_VALUE);final BigInteger[]input=new BigInteger[]{bigBase.shiftLeft(100).add(BigInteger.valueOf(123456789L)),bigBase.add(bigBase),bigBase.multiply(BigInteger.valueOf(17)),bigBase.negate().subtract(BigInteger.TEN)};ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);JsonFactory f=JSON_F;JsonGenerator g=f.createGenerator(bytes);g.writeStartArray();for (int i=0;i < input.length;++i){g.writeNumber(input[i]);}g.writeEndArray();g.close();byte[]data=bytes.toByteArray();_testBigIntegers(f,input,data,0,100);_testBigIntegers(f,input,data,0,3);_testBigIntegers(f,input,data,0,1);_testBigIntegers(f,input,data,1,100);_testBigIntegers(f,input,data,2,3);_testBigIntegers(f,input,data,3,1);}"
"com.fasterxml.jackson.core.json.async.AsyncScalarArrayTest.testBigDecimals",0,"public void testBigDecimals()throws IOException {BigDecimal bigBase=new BigDecimal(""1234567890344656736.125"");final BigDecimal[]input=new BigDecimal[]{BigDecimal.valueOf(-999.25),bigBase,bigBase.divide(new BigDecimal(""5"")),bigBase.add(bigBase),bigBase.multiply(new BigDecimal(""1.23"")),bigBase.negate()};ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);JsonFactory f=JSON_F;JsonGenerator g=f.createGenerator(bytes);g.writeStartArray();for (int i=0;i < input.length;++i){g.writeNumber(input[i]);}g.writeEndArray();g.close();byte[]data=bytes.toByteArray();_testBigDecimals(f,input,data,0,100);_testBigDecimals(f,input,data,0,3);_testBigDecimals(f,input,data,0,1);_testBigDecimals(f,input,data,1,100);_testBigDecimals(f,input,data,2,3);_testBigDecimals(f,input,data,3,1);}"
"com.fasterxml.jackson.core.sym.TestSymbolsWithMediaItem.testSmallSymbolSetWithBytes",0,"public void testSmallSymbolSetWithBytes()throws IOException {final int SEED=33333;ByteQuadsCanonicalizer symbolsRoot=ByteQuadsCanonicalizer.createRoot(SEED);ByteQuadsCanonicalizer symbols=symbolsRoot.makeChild(JsonFactory.Feature.collectDefaults());JsonFactory f=new JsonFactory();JsonParser p=f.createParser(JSON.getBytes(""UTF-8""));JsonToken t;while ((t=p.nextToken())!= null){if (t != JsonToken.FIELD_NAME){continue;}String name=p.getCurrentName();int[]quads=calcQuads(name.getBytes(""UTF-8""));if (symbols.findName(quads,quads.length)!= null){continue;}symbols.addName(name,quads,quads.length);}p.close();assertEquals(13,symbols.size());assertEquals(12,symbols.primaryCount());assertEquals(1,symbols.secondaryCount());assertEquals(0,symbols.tertiaryCount());assertEquals(0,symbols.spilloverCount());}"
"com.fasterxml.jackson.core.sym.TestSymbolsWithMediaItem.testSmallSymbolSetWithChars",0,"public void testSmallSymbolSetWithChars()throws IOException {final int SEED=33333;CharsToNameCanonicalizer symbols=CharsToNameCanonicalizer.createRoot(SEED).makeChild(-1);JsonFactory f=new JsonFactory();JsonParser p=f.createParser(JSON);JsonToken t;while ((t=p.nextToken())!= null){if (t != JsonToken.FIELD_NAME){continue;}String name=p.getCurrentName();char[]ch=name.toCharArray();symbols.findSymbol(ch,0,ch.length,symbols.calcHash(name));}p.close();assertEquals(13,symbols.size());assertEquals(13,symbols.size());assertEquals(64,symbols.bucketCount());assertEquals(0,symbols.collisionCount());assertEquals(0,symbols.maxCollisionLength());}"
"com.fasterxml.jackson.core.io.UTF8WriterTest.testSimple",0,"public void testSimple()throws Exception {BufferRecycler rec=new BufferRecycler();IOContext ctxt=new IOContext(rec,null,false);ByteArrayOutputStream out=new ByteArrayOutputStream();UTF8Writer w=new UTF8Writer(ctxt,out);String str=""AB\u00A0\u1AE9\uFFFC"";char[]ch=str.toCharArray();w.write(str);w.append(ch[0]);w.write(ch[1]);w.write(ch,2,3);w.flush();w.write(str,0,str.length());w.close();byte[]data=out.toByteArray();assertEquals(3 * 10,data.length);String act=out.toString(""UTF-8"");assertEquals(15,act.length());assertEquals(3 * str.length(),act.length());assertEquals(str + str + str,act);}"
"com.fasterxml.jackson.core.io.UTF8WriterTest.testSimpleAscii",0,"public void testSimpleAscii()throws Exception {BufferRecycler rec=new BufferRecycler();IOContext ctxt=new IOContext(rec,null,false);ByteArrayOutputStream out=new ByteArrayOutputStream();UTF8Writer w=new UTF8Writer(ctxt,out);String str=""abcdefghijklmnopqrst\u00A0"";char[]ch=str.toCharArray();w.write(ch,0,ch.length);w.flush();w.close();byte[]data=out.toByteArray();assertEquals(ch.length + 1,data.length);String act=out.toString(""UTF-8"");assertEquals(str,act);}"
"com.fasterxml.jackson.core.io.UTF8WriterTest.testFlushAfterClose",0,"public void testFlushAfterClose()throws Exception {BufferRecycler rec=new BufferRecycler();IOContext ctxt=new IOContext(rec,null,false);ByteArrayOutputStream out=new ByteArrayOutputStream();UTF8Writer w=new UTF8Writer(ctxt,out);w.write('X');char[]ch={'Y'};w.write(ch);w.close();assertEquals(2,out.size());w.flush();w.close();w.flush();}"
"com.fasterxml.jackson.core.io.UTF8WriterTest.testSurrogatesOk",0,"public void testSurrogatesOk()throws Exception {BufferRecycler rec=new BufferRecycler();IOContext ctxt=new IOContext(rec,null,false);ByteArrayOutputStream out=new ByteArrayOutputStream();UTF8Writer w=new UTF8Writer(ctxt,out);w.write(0xD83D);w.write(0xDE03);w.close();assertEquals(4,out.size());final byte[]EXP_SURROGATES=new byte[]{(byte)0xF0,(byte)0x9F,(byte)0x98,(byte)0x83};Assert.assertArrayEquals(EXP_SURROGATES,out.toByteArray());ctxt=new IOContext(rec,null,false);out=new ByteArrayOutputStream();w=new UTF8Writer(ctxt,out);w.write(""\uD83D\uDE03"");w.close();assertEquals(4,out.size());Assert.assertArrayEquals(EXP_SURROGATES,out.toByteArray());}"
"com.fasterxml.jackson.core.io.UTF8WriterTest.testSurrogatesFail",0,"@SuppressWarnings(""resource"")public void testSurrogatesFail()throws Exception {BufferRecycler rec=new BufferRecycler();IOContext ctxt;ByteArrayOutputStream out;UTF8Writer w;ctxt=new IOContext(rec,null,false);out=new ByteArrayOutputStream();w=new UTF8Writer(ctxt,out);try {w.write(0xDE03);fail(""should not pass"");}catch(IOException e){verifyException(e,""Unmatched second part"");}ctxt=new IOContext(rec,null,false);out=new ByteArrayOutputStream();w=new UTF8Writer(ctxt,out);w.write(0xD83D);try {w.write('a');fail(""should not pass"");}catch(IOException e){verifyException(e,""Broken surrogate pair"");}ctxt=new IOContext(rec,null,false);out=new ByteArrayOutputStream();w=new UTF8Writer(ctxt,out);try {w.write(""\uDE03"");fail(""should not pass"");}catch(IOException e){verifyException(e,""Unmatched second part"");}ctxt=new IOContext(rec,null,false);out=new ByteArrayOutputStream();w=new UTF8Writer(ctxt,out);try {w.write(""\uD83Da"");fail(""should not pass"");}catch(IOException e){verifyException(e,""Broken surrogate pair"");}}"
"com.fasterxml.jackson.core.json.TestGeneratorDupHandling.testSimpleDupsEagerlyBytes",0,"public void testSimpleDupsEagerlyBytes()throws Exception {_testSimpleDups(true,false,new JsonFactory());}"
"com.fasterxml.jackson.core.json.TestGeneratorDupHandling.testSimpleDupsEagerlyChars",0,"public void testSimpleDupsEagerlyChars()throws Exception {_testSimpleDups(false,false,new JsonFactory());}"
"com.fasterxml.jackson.core.json.TestGeneratorDupHandling.testSimpleDupsLazilyBytes",0,"public void testSimpleDupsLazilyBytes()throws Exception {final JsonFactory f=new JsonFactory();assertFalse(f.isEnabled(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION));_testSimpleDups(true,true,f);}"
"com.fasterxml.jackson.core.json.TestGeneratorDupHandling.testSimpleDupsLazilyChars",0,"public void testSimpleDupsLazilyChars()throws Exception {final JsonFactory f=new JsonFactory();_testSimpleDups(false,true,f);}"
"com.fasterxml.jackson.core.sym.SymbolsViaParserTest.test17CharSymbols",0,"public void test17CharSymbols()throws Exception {_test17Chars(false);}"
"com.fasterxml.jackson.core.sym.SymbolsViaParserTest.test17ByteSymbols",0,"public void test17ByteSymbols()throws Exception {_test17Chars(true);}"
"com.fasterxml.jackson.core.sym.SymbolsViaParserTest.testSymbolTableExpansionChars",0,"public void testSymbolTableExpansionChars()throws Exception {_testSymbolTableExpansion(false);}"
"com.fasterxml.jackson.core.sym.SymbolsViaParserTest.testSymbolTableExpansionBytes",0,"public void testSymbolTableExpansionBytes()throws Exception {_testSymbolTableExpansion(true);}"
"com.fasterxml.jackson.core.read.ParserSymbolHandlingTest.testSymbolsWithNullBytes",0,"public void testSymbolsWithNullBytes()throws Exception {JsonFactory f=new JsonFactory();_testSymbolsWithNull(f,true);_testSymbolsWithNull(f,true);}"
"com.fasterxml.jackson.core.read.ParserSymbolHandlingTest.testSymbolsWithNullChars",0,"public void testSymbolsWithNullChars()throws Exception {JsonFactory f=new JsonFactory();_testSymbolsWithNull(f,false);_testSymbolsWithNull(f,false);}"
"com.fasterxml.jackson.core.util.ByteArrayBuilderTest.testSimple",0,"public void testSimple()throws Exception {ByteArrayBuilder b=new ByteArrayBuilder(null,20);Assert.assertArrayEquals(new byte[0],b.toByteArray());b.write((byte)0);b.append(1);byte[]foo=new byte[98];for (int i=0;i < foo.length;++i){foo[i]=(byte)(2 + i);}b.write(foo);byte[]result=b.toByteArray();assertEquals(100,result.length);for (int i=0;i < 100;++i){assertEquals(i,(int)result[i]);}b.release();b.close();}"
"com.fasterxml.jackson.core.main.TestParserClosing.testNoAutoCloseReader",0,"/** * This unit test checks the default behaviour;with no auto-close,no automatic closing should occur,nor explicit one unless specific forcing method is used.*/public void testNoAutoCloseReader()throws Exception {final String DOC=""[1 ]"";assertTrue(sharedStreamFactory().isEnabled(StreamReadFeature.AUTO_CLOSE_SOURCE));JsonFactory f=JsonFactory.builder().disable(StreamReadFeature.AUTO_CLOSE_SOURCE).build();assertFalse(f.isEnabled(StreamReadFeature.AUTO_CLOSE_SOURCE));{assertFalse(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));}@SuppressWarnings(""resource"")MyReader input=new MyReader(DOC);JsonParser jp=f.createParser(input);assertFalse(input.isClosed());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());assertFalse(input.isClosed());jp.close();assertFalse(input.isClosed());}"
"com.fasterxml.jackson.core.main.TestParserClosing.testAutoCloseReader",0,"@SuppressWarnings(""resource"")public void testAutoCloseReader()throws Exception {final String DOC=""[1 ]"";JsonFactory f=JsonFactory.builder().enable(StreamReadFeature.AUTO_CLOSE_SOURCE).build();MyReader input=new MyReader(DOC);JsonParser jp=f.createParser(input);assertFalse(input.isClosed());assertToken(JsonToken.START_ARRAY,jp.nextToken());jp.close();assertTrue(input.isClosed());input=new MyReader(DOC);jp=f.createParser(input);assertFalse(input.isClosed());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());assertTrue(input.isClosed());}"
"com.fasterxml.jackson.core.main.TestParserClosing.testNoAutoCloseInputStream",0,"@SuppressWarnings(""resource"")public void testNoAutoCloseInputStream()throws Exception {final String DOC=""[1 ]"";JsonFactory f=JsonFactory.builder().disable(StreamReadFeature.AUTO_CLOSE_SOURCE).build();MyStream input=new MyStream(DOC.getBytes(""UTF-8""));JsonParser jp=f.createParser(input);assertFalse(input.isClosed());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());assertFalse(input.isClosed());jp.close();assertFalse(input.isClosed());}"
"com.fasterxml.jackson.core.main.TestParserClosing.testReleaseContentBytes",0,"public void testReleaseContentBytes()throws Exception {byte[]input=""[1]foobar"".getBytes(""UTF-8"");JsonParser jp=new JsonFactory().createParser(input);assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());ByteArrayOutputStream out=new ByteArrayOutputStream();assertEquals(6,jp.releaseBuffered(out));assertArrayEquals(""foobar"".getBytes(""UTF-8""),out.toByteArray());jp.close();}"
"com.fasterxml.jackson.core.main.TestParserClosing.testReleaseContentChars",0,"public void testReleaseContentChars()throws Exception {JsonParser jp=new JsonFactory().createParser(""[true]xyz"");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_TRUE,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());StringWriter sw=new StringWriter();assertEquals(3,jp.releaseBuffered(sw));assertEquals(""xyz"",sw.toString());jp.close();}"
"com.fasterxml.jackson.core.json.async.AsyncBinaryParseTest.testRawAsRootValue",0,"public void testRawAsRootValue()throws IOException {_testBinaryAsRoot(JSON_F);}"
"com.fasterxml.jackson.core.json.async.AsyncBinaryParseTest.testRawAsArray",0,"public void testRawAsArray()throws IOException {_testBinaryAsArray(JSON_F);}"
"com.fasterxml.jackson.core.json.async.AsyncBinaryParseTest.testRawAsObject",0,"public void testRawAsObject()throws IOException {_testBinaryAsObject(JSON_F);}"
"com.fasterxml.jackson.core.json.TestMaxErrorSize.testLongErrorMessage",0,"public void testLongErrorMessage()throws Exception {_testLongErrorMessage(MODE_INPUT_STREAM);_testLongErrorMessage(MODE_INPUT_STREAM_THROTTLED);}"
"com.fasterxml.jackson.core.json.TestMaxErrorSize.testLongErrorMessageReader",0,"public void testLongErrorMessageReader()throws Exception {_testLongErrorMessage(MODE_READER);}"
"com.fasterxml.jackson.core.json.TestMaxErrorSize.testShortErrorMessage",0,"public void testShortErrorMessage()throws Exception {_testShortErrorMessage(MODE_INPUT_STREAM);_testShortErrorMessage(MODE_INPUT_STREAM_THROTTLED);_testShortErrorMessage(MODE_READER);}"
"com.fasterxml.jackson.core.base64.Base64CodecTest.testVariantAccess",0,"public void testVariantAccess(){for(Base64Variant var : new Base64Variant[]{Base64Variants.MIME,Base64Variants.MIME_NO_LINEFEEDS,Base64Variants.MODIFIED_FOR_URL,Base64Variants.PEM}){assertSame(var,Base64Variants.valueOf(var.getName()));}try {Base64Variants.valueOf(""foobar"");fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""No Base64Variant with name 'foobar'"");}}"
"com.fasterxml.jackson.core.base64.Base64CodecTest.testProps",0,"public void testProps(){Base64Variant std=Base64Variants.MIME;assertEquals(""MIME"",std.getName());assertEquals(""MIME"",std.toString());assertTrue(std.usesPadding());assertFalse(std.usesPaddingChar('X'));assertEquals('=',std.getPaddingChar());assertTrue(std.usesPaddingChar('='));assertEquals((byte)'=',std.getPaddingByte());assertEquals(76,std.getMaxLineLength());}"
"com.fasterxml.jackson.core.base64.Base64CodecTest.testCharEncoding",0,"public void testCharEncoding()throws Exception {Base64Variant std=Base64Variants.MIME;assertEquals(Base64Variant.BASE64_VALUE_INVALID,std.decodeBase64Char('?'));assertEquals(Base64Variant.BASE64_VALUE_INVALID,std.decodeBase64Char((int)'?'));assertEquals(Base64Variant.BASE64_VALUE_INVALID,std.decodeBase64Char((char)0xA0));assertEquals(Base64Variant.BASE64_VALUE_INVALID,std.decodeBase64Char(0xA0));assertEquals(Base64Variant.BASE64_VALUE_INVALID,std.decodeBase64Byte((byte)'?'));assertEquals(Base64Variant.BASE64_VALUE_INVALID,std.decodeBase64Byte((byte)0xA0));assertEquals(0,std.decodeBase64Char('A'));assertEquals(1,std.decodeBase64Char((int)'B'));assertEquals(2,std.decodeBase64Char((byte)'C'));assertEquals(0,std.decodeBase64Byte((byte)'A'));assertEquals(1,std.decodeBase64Byte((byte)'B'));assertEquals(2,std.decodeBase64Byte((byte)'C'));assertEquals('/',std.encodeBase64BitsAsChar(63));assertEquals((byte)'b',std.encodeBase64BitsAsByte(27));String EXP_STR=""HwdJ"";int TRIPLET=0x1F0749;StringBuilder sb=new StringBuilder();std.encodeBase64Chunk(sb,TRIPLET);assertEquals(EXP_STR,sb.toString());byte[]exp=EXP_STR.getBytes(""UTF-8"");byte[]act=new byte[exp.length];std.encodeBase64Chunk(TRIPLET,act,0);Assert.assertArrayEquals(exp,act);}"
"com.fasterxml.jackson.core.base64.Base64CodecTest.testConvenienceMethods",0,"public void testConvenienceMethods()throws Exception {final Base64Variant std=Base64Variants.MIME;byte[]input=new byte[]{1,2,34,127,-1};String encoded=std.encode(input,false);byte[]decoded=std.decode(encoded);Assert.assertArrayEquals(input,decoded);assertEquals(quote(encoded),std.encode(input,true));decoded=std.decode(""\n"" + encoded);Assert.assertArrayEquals(input,decoded);decoded=std.decode(""   "" + encoded);Assert.assertArrayEquals(input,decoded);decoded=std.decode(encoded + ""   "");Assert.assertArrayEquals(input,decoded);decoded=std.decode(encoded + ""\n"");Assert.assertArrayEquals(input,decoded);}"
"com.fasterxml.jackson.core.base64.Base64CodecTest.testConvenienceMethodWithLFs",0,"public void testConvenienceMethodWithLFs()throws Exception {final Base64Variant std=Base64Variants.MIME;final int length=100;final byte[]data=new byte[length];Arrays.fill(data,(byte)1);final StringBuilder sb=new StringBuilder(140);for (int i=0;i < 100 / 3;++i){sb.append(""AQEB"");if (sb.length()== 76){sb.append(""##"");}}sb.append(""AQ=="");final String exp=sb.toString();assertEquals(exp.replace(""##"",""\\n""),std.encode(data,false));assertEquals(exp.replace(""##"",""<%>""),std.encode(data,false,""<%>""));}"
"com.fasterxml.jackson.core.base64.Base64CodecTest.testErrors",0,"@SuppressWarnings(""unused"")public void testErrors()throws Exception {try {Base64Variant b=new Base64Variant(""foobar"",""xyz"",false,'!',24);fail(""Should not pass"");}catch(IllegalArgumentException iae){verifyException(iae,""length must be exactly"");}try {Base64Variants.MIME.decode(""!@##@%$#%&*^(&)(*"");}catch(IllegalArgumentException iae){verifyException(iae,""Illegal character"");}final String BASE64_HELLO=""aGVsbG8=!"";try {Base64Variants.MIME.decode(BASE64_HELLO);fail(""Should not pass"");}catch(IllegalArgumentException iae){verifyException(iae,""Illegal character"");}}"
"com.fasterxml.jackson.core.read.UTF32ParseTest.testSimpleEOFs",0,"public void testSimpleEOFs()throws Exception {byte[]data={0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20};for (int len=5;len <= 7;++len){JsonParser parser=FACTORY.createParser(data,0,len);try {parser.nextToken();fail(""Should not pass"");}catch(CharConversionException e){verifyException(e,""Unexpected EOF"");verifyException(e,""of a 4-byte UTF-32 char"");}parser.close();}}"
"com.fasterxml.jackson.core.read.UTF32ParseTest.testSimpleInvalidUTF32",0,"public void testSimpleInvalidUTF32()throws Exception {byte[]data={0x00,0x00,0x00,0x20,(byte)0xFE,(byte)0xFF,0x00,0x01};JsonParser parser=FACTORY.createParser(data);try {parser.nextToken();fail(""Should not pass"");}catch(CharConversionException e){verifyException(e,""Invalid UTF-32 character 0xfefe0001"");}parser.close();}"
"com.fasterxml.jackson.core.read.UTF32ParseTest.testSimpleSevenNullBytes",0,"public void testSimpleSevenNullBytes()throws Exception {byte[]data=new byte[7];JsonParser parser=FACTORY.createParser(data);try {parser.nextToken();fail(""Should not pass"");}catch(JsonParseException e){verifyException(e,""Illegal character ((CTRL-CHAR,code 0))"");}parser.close();}"
"com.fasterxml.jackson.core.io.TestMergedStream.testSimple",0,"public void testSimple()throws Exception {BufferRecycler rec=new BufferRecycler();IOContext ctxt=new IOContext(rec,null,false);byte[]first=ctxt.allocReadIOBuffer();System.arraycopy(""ABCDE"".getBytes(""UTF-8""),0,first,99,5);byte[]second=""FGHIJ"".getBytes(""UTF-8"");assertNull(ctxt.getSourceReference());assertFalse(ctxt.isResourceManaged());ctxt.setEncoding(JsonEncoding.UTF8);MergedStream ms=new MergedStream(ctxt,new ByteArrayInputStream(second),first,99,99 + 5);assertEquals(5,ms.available());assertFalse(ms.markSupported());ms.mark(1);assertEquals((byte)'A',ms.read());assertEquals(3,ms.skip(3));byte[]buffer=new byte[5];assertEquals(1,ms.read(buffer,1,3));assertEquals((byte)'E',buffer[1]);assertEquals(3,ms.read(buffer,0,3));assertEquals((byte)'F',buffer[0]);assertEquals((byte)'G',buffer[1]);assertEquals((byte)'H',buffer[2]);assertEquals(2,ms.available());assertEquals(2,ms.skip(200));ms.close();}"
"com.fasterxml.jackson.core.type.TypeReferenceTest.testSimple",0,"public void testSimple(){TypeReference<?> ref=new TypeReference<List<String>>(){};assertNotNull(ref);ref.equals(null);}"
"com.fasterxml.jackson.core.type.TypeReferenceTest.testInvalid",0,"@SuppressWarnings(""rawtypes"")public void testInvalid(){try {Object ob=new TypeReference(){};fail(""Should not pass,got: "" + ob);}catch(IllegalArgumentException e){verifyException(e,""without actual type information"");}}"
"com.fasterxml.jackson.core.type.TypeReferenceTest.testResolvedType",0,"public void testResolvedType(){ResolvedType type1=new BogusResolvedType(false);assertFalse(type1.isReferenceType());ResolvedType type2=new BogusResolvedType(true);assertTrue(type2.isReferenceType());}"
"com.fasterxml.jackson.core.util.TestDelegates.testParserDelegate",0,"/** * Test default,non-overridden parser delegate.*/public void testParserDelegate()throws IOException {final String TOKEN=""foo"";JsonParser parser=JSON_F.createParser(""[1,true,null,{}]"");JsonParserDelegate del=new JsonParserDelegate(parser);assertNull(del.currentToken());assertToken(JsonToken.START_ARRAY,del.nextToken());assertEquals(""["",del.getText());assertToken(JsonToken.VALUE_NUMBER_INT,del.nextToken());assertEquals(1,del.getIntValue());assertToken(JsonToken.VALUE_TRUE,del.nextToken());assertTrue(del.getBooleanValue());assertToken(JsonToken.VALUE_NULL,del.nextToken());assertNull(del.getCurrentValue());del.setCurrentValue(TOKEN);assertToken(JsonToken.START_OBJECT,del.nextToken());assertNull(del.getCurrentValue());assertToken(JsonToken.END_OBJECT,del.nextToken());assertEquals(TOKEN,del.getCurrentValue());assertToken(JsonToken.END_ARRAY,del.nextToken());del.close();assertTrue(del.isClosed());assertTrue(parser.isClosed());parser.close();}"
"com.fasterxml.jackson.core.util.TestDelegates.testGeneratorDelegate",0,"/** * Test default,non-overridden generator delegate.*/public void testGeneratorDelegate()throws IOException {final String TOKEN=""foo"";StringWriter sw=new StringWriter();JsonGenerator g0=JSON_F.createGenerator(sw);JsonGeneratorDelegate del=new JsonGeneratorDelegate(g0);del.writeStartArray();assertEquals(1,del.getOutputBuffered());del.writeNumber(13);del.writeNull();del.writeBoolean(false);del.writeString(""foo"");assertNull(del.getCurrentValue());del.setCurrentValue(TOKEN);del.writeStartObject();assertNull(del.getCurrentValue());del.writeEndObject();assertEquals(TOKEN,del.getCurrentValue());del.writeStartArray(0);del.writeEndArray();del.writeEndArray();del.flush();del.close();assertTrue(del.isClosed());assertTrue(g0.isClosed());assertEquals(""[13,null,false,\""foo\"",{},[]]"",sw.toString());g0.close();}"
"com.fasterxml.jackson.core.util.TestDelegates.testNotDelegateCopyMethods",0,"public void testNotDelegateCopyMethods()throws IOException {JsonParser jp=JSON_F.createParser(""[{\""a\"":[1,2,{\""b\"":3}],\""c\"":\""d\""},{\""e\"":false},null]"");StringWriter sw=new StringWriter();JsonGenerator jg=new JsonGeneratorDelegate(JSON_F.createGenerator(sw),false){@Override public void writeFieldName(String name)throws IOException {super.writeFieldName(name + ""-test"");super.writeBoolean(true);super.writeFieldName(name);}};jp.nextToken();jg.copyCurrentStructure(jp);jg.flush();assertEquals(""[{\""a-test\"":true,\""a\"":[1,2,{\""b-test\"":true,\""b\"":3}],\""c-test\"":true,\""c\"":\""d\""},{\""e-test\"":true,\""e\"":false},null]"",sw.toString());jp.close();jg.close();}"
"com.fasterxml.jackson.core.util.TestDelegates.testGeneratorWithCodec",0,"@SuppressWarnings(""resource"")public void testGeneratorWithCodec()throws IOException {BogusCodec codec=new BogusCodec();StringWriter sw=new StringWriter();JsonGenerator g0=JSON_F.createGenerator(sw);g0.setCodec(codec);JsonGeneratorDelegate del=new JsonGeneratorDelegate(g0,false);del.writeStartArray();POJO pojo=new POJO();del.writeObject(pojo);TreeNode tree=new BogusTree();del.writeTree(tree);del.writeEndArray();del.close();assertEquals(""[\""pojo\"",\""tree\""]"",sw.toString());assertSame(tree,codec.treeWritten);assertSame(pojo,codec.pojoWritten);}"
"com.fasterxml.jackson.core.json.async.AsyncScopeMatchingTest.testUnclosedArray",0,"public void testUnclosedArray(int mode)throws Exception {AsyncReaderWrapper p=asyncForBytes(JSON_F,3,_jsonDoc(""[1,2 ""),0);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(2,p.getIntValue());try {p.nextToken();fail(""Expected an exception for unclosed ARRAY (mode: "" + mode + "")"");}catch(JsonParseException pe){verifyException(pe,""expected close marker for ARRAY"");}}"
"com.fasterxml.jackson.core.json.async.AsyncScopeMatchingTest.testUnclosedObject",0,"public void testUnclosedObject(int mode)throws Exception {AsyncReaderWrapper p=asyncForBytes(JSON_F,3,_jsonDoc(""{\""key\"" : 3  ""),0);assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());try {p.nextToken();fail(""Expected an exception for unclosed OBJECT (mode: "" + mode + "")"");}catch(JsonParseException pe){verifyException(pe,""expected close marker for OBJECT"");}}"
"com.fasterxml.jackson.core.json.async.AsyncScopeMatchingTest.testEOFInName",0,"public void testEOFInName(int mode)throws Exception {final String JSON=""{\""abcd"";AsyncReaderWrapper p=asyncForBytes(JSON_F,3,_jsonDoc(JSON),0);assertToken(JsonToken.START_OBJECT,p.nextToken());try {p.nextToken();fail(""Expected an exception for EOF"");}catch(JsonParseException pe){verifyException(pe,""Unexpected end-of-input"");}catch(IOException ie){if (mode == MODE_DATA_INPUT){verifyException(ie,""end-of-input"");return;}}}"
"com.fasterxml.jackson.core.json.async.AsyncScopeMatchingTest.testMismatchArrayToObject",0,"public void testMismatchArrayToObject()throws Exception {final String JSON=""[1,2 }"";AsyncReaderWrapper p=asyncForBytes(JSON_F,3,_jsonDoc(JSON),0);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());try {p.nextToken();fail(""Expected an exception for incorrectly closed ARRAY"");}catch(JsonParseException pe){verifyException(pe,""Unexpected close marker '}': expected ']'"");}p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncScopeMatchingTest.testMismatchObjectToArray",0,"public void testMismatchObjectToArray()throws Exception {final String JSON=""{]"";AsyncReaderWrapper p=asyncForBytes(JSON_F,3,_jsonDoc(JSON),0);assertToken(JsonToken.START_OBJECT,p.nextToken());try {p.nextToken();fail(""Expected an exception for incorrectly closed OBJECT"");}catch(JsonParseException pe){verifyException(pe,""Unexpected close marker ']': expected '}'"");}p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncScopeMatchingTest.testMisssingColon",0,"public void testMisssingColon(int mode)throws Exception {final String JSON=""{\""a\"" \""b\"" }"";AsyncReaderWrapper p=asyncForBytes(JSON_F,3,_jsonDoc(JSON),0);assertToken(JsonToken.START_OBJECT,p.nextToken());try {assertToken(JsonToken.FIELD_NAME,p.nextToken());p.nextToken();fail(""Expected an exception for missing semicolon"");}catch(JsonParseException pe){verifyException(pe,""was expecting a colon"");}p.close();}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdNumbersTest.testDefaultsForAsync",0,"@SuppressWarnings(""deprecation"")public void testDefaultsForAsync()throws Exception {assertFalse(DEFAULT_F.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdNumbersTest.testDisallowNaN",0,"public void testDisallowNaN()throws Exception {final String JSON=""[NaN]"";AsyncReaderWrapper p=createParser(DEFAULT_F,JSON,1);assertToken(JsonToken.START_ARRAY,p.nextToken());try {p.nextToken();fail(""Expected exception"");}catch(Exception e){verifyException(e,""non-standard"");}finally {p.close();}}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdNumbersTest.testAllowNaN",0,"public void testAllowNaN()throws Exception {final String JSON=""[NaN]"";JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS).build();_testAllowNaN(f,JSON,99);_testAllowNaN(f,JSON,5);_testAllowNaN(f,JSON,3);_testAllowNaN(f,JSON,2);_testAllowNaN(f,JSON,1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdNumbersTest.testDisallowInf",0,"public void testDisallowInf()throws Exception {_testDisallowInf(DEFAULT_F,""Infinity"",99);_testDisallowInf(DEFAULT_F,""Infinity"",1);_testDisallowInf(DEFAULT_F,""-Infinity"",99);_testDisallowInf(DEFAULT_F,""-Infinity"",1);_testDisallowInf(DEFAULT_F,""+Infinity"",99);_testDisallowInf(DEFAULT_F,""+Infinity"",1);}"
"com.fasterxml.jackson.core.json.async.AsyncNonStdNumbersTest.testAllowInf",0,"public void testAllowInf()throws Exception {JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS).build();String JSON=""[Infinity,+Infinity,-Infinity ]"";_testAllowInf(f,JSON,99);_testAllowInf(f,JSON,5);_testAllowInf(f,JSON,3);_testAllowInf(f,JSON,2);_testAllowInf(f,JSON,1);JSON=""[Infinity,+Infinity,-Infinity]"";_testAllowInf(f,JSON,99);_testAllowInf(f,JSON,1);JSON=""[Infinity,+Infinity,-Infinity]"";_testAllowInf(f,JSON,99);_testAllowInf(f,JSON,1);}"
"com.fasterxml.jackson.core.read.NonStandardUnquotedNamesTest.testSimpleUnquotedBytes",0,"public void testSimpleUnquotedBytes()throws Exception {_testSimpleUnquoted(MODE_INPUT_STREAM);_testSimpleUnquoted(MODE_INPUT_STREAM_THROTTLED);_testSimpleUnquoted(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.NonStandardUnquotedNamesTest.testSimpleUnquotedChars",0,"public void testSimpleUnquotedChars()throws Exception {_testSimpleUnquoted(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardUnquotedNamesTest.testLargeUnquoted",0,"public void testLargeUnquoted()throws Exception {_testLargeUnquoted(MODE_INPUT_STREAM);_testLargeUnquoted(MODE_INPUT_STREAM_THROTTLED);_testLargeUnquoted(MODE_DATA_INPUT);_testLargeUnquoted(MODE_READER);}"
"com.fasterxml.jackson.core.read.NonStandardUnquotedNamesTest.testUnquotedIssue510",0,"public void testUnquotedIssue510()throws Exception {char[]fullChars=new char[4001];for (int i=0;i < 3998;i++){fullChars[i]=' ';}fullChars[3998]='{';fullChars[3999]='a';fullChars[4000]=256;JsonParser p=UNQUOTED_FIELDS_F.createParser(new java.io.StringReader(new String(fullChars)));assertToken(JsonToken.START_OBJECT,p.nextToken());try {p.nextToken();fail(""Should not pass"");}catch(JsonParseException e){;}p.close();}"
"com.fasterxml.jackson.core.main.TestNumberParsing.testIntParsing",0,"public void testIntParsing()throws Exception {char[]testChars=""123456789"".toCharArray();assertEquals(3,NumberInput.parseInt(testChars,2,1));assertEquals(123,NumberInput.parseInt(testChars,0,3));assertEquals(2345,NumberInput.parseInt(testChars,1,4));assertEquals(9,NumberInput.parseInt(testChars,8,1));assertEquals(456789,NumberInput.parseInt(testChars,3,6));assertEquals(23456,NumberInput.parseInt(testChars,1,5));assertEquals(123456789,NumberInput.parseInt(testChars,0,9));testChars=""32"".toCharArray();assertEquals(32,NumberInput.parseInt(testChars,0,2));testChars=""189"".toCharArray();assertEquals(189,NumberInput.parseInt(testChars,0,3));testChars=""10"".toCharArray();assertEquals(10,NumberInput.parseInt(testChars,0,2));assertEquals(0,NumberInput.parseInt(testChars,1,1));}"
"com.fasterxml.jackson.core.main.TestNumberParsing.testIntParsingWithStrings",0,"public void testIntParsingWithStrings()throws Exception {assertEquals(3,NumberInput.parseInt(""3""));assertEquals(0,NumberInput.parseInt(""0""));assertEquals(-3,NumberInput.parseInt(""-3""));assertEquals(27,NumberInput.parseInt(""27""));assertEquals(-31,NumberInput.parseInt(""-31""));assertEquals(271,NumberInput.parseInt(""271""));assertEquals(-131,NumberInput.parseInt(""-131""));assertEquals(2709,NumberInput.parseInt(""2709""));assertEquals(-9999,NumberInput.parseInt(""-9999""));assertEquals(Integer.MIN_VALUE,NumberInput.parseInt("""" + Integer.MIN_VALUE));assertEquals(Integer.MAX_VALUE,NumberInput.parseInt("""" + Integer.MAX_VALUE));}"
"com.fasterxml.jackson.core.main.TestNumberParsing.testLongParsing",0,"public void testLongParsing()throws Exception {char[]testChars=""123456789012345678"".toCharArray();assertEquals(123456789012345678L,NumberInput.parseLong(testChars,0,testChars.length));}"
"com.fasterxml.jackson.core.main.TestNumberParsing.testLongBoundsChecks",0,"public void testLongBoundsChecks()throws Exception {String minLong=String.valueOf(Long.MIN_VALUE).substring(1);String maxLong=String.valueOf(Long.MAX_VALUE);final String VALUE_491=""1323372036854775807"";final String OVERFLOW=""9999999999999999999"";assertTrue(NumberInput.inLongRange(minLong,true));assertTrue(NumberInput.inLongRange(maxLong,false));assertTrue(NumberInput.inLongRange(VALUE_491,true));assertTrue(NumberInput.inLongRange(VALUE_491,false));assertFalse(NumberInput.inLongRange(OVERFLOW,false));assertFalse(NumberInput.inLongRange(OVERFLOW,true));char[]cbuf=minLong.toCharArray();assertTrue(NumberInput.inLongRange(cbuf,0,cbuf.length,true));cbuf=maxLong.toCharArray();assertTrue(NumberInput.inLongRange(cbuf,0,cbuf.length,false));cbuf=VALUE_491.toCharArray();assertTrue(NumberInput.inLongRange(cbuf,0,cbuf.length,true));assertTrue(NumberInput.inLongRange(cbuf,0,cbuf.length,false));cbuf=OVERFLOW.toCharArray();assertFalse(NumberInput.inLongRange(cbuf,0,cbuf.length,true));assertFalse(NumberInput.inLongRange(cbuf,0,cbuf.length,false));}"
"com.fasterxml.jackson.core.main.TestNumberParsing.testFloatBoundary146Chars",0,"public void testFloatBoundary146Chars()throws Exception {final char[]arr=new char[50005];final JsonFactory f=new JsonFactory();for (int i=500;i != 9000;++i){java.util.Arrays.fill(arr,0,i,' ');arr[i]='-';arr[i + 1]='1';arr[i + 2]='e';arr[i + 3]='-';arr[i + 4]='1';CharArrayReader r=new CharArrayReader(arr,0,i + 5);JsonParser p=f.createParser(r);assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.main.TestNumberParsing.testFloatBoundary146Bytes",0,"public void testFloatBoundary146Bytes()throws Exception {final byte[]arr=new byte[50005];final JsonFactory f=new JsonFactory();for (int i=500;i != 9000;++i){java.util.Arrays.fill(arr,0,i,(byte)0x20);arr[i]='-';arr[i + 1]='1';arr[i + 2]='e';arr[i + 3]='-';arr[i + 4]='1';ByteArrayInputStream in=new ByteArrayInputStream(arr,0,i + 5);JsonParser p=f.createParser(in);assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());p.close();}}"
"com.fasterxml.jackson.core.TestJDKSerializability.testJsonFactorySerializable",0,"public void testJsonFactorySerializable()throws Exception {JsonFactory f=new JsonFactory();String origJson=""{\""simple\"":[1,true,{}]}"";assertEquals(origJson,_copyJson(f,origJson,false));byte[]frozen=jdkSerialize(f);JsonFactory f2=jdkDeserialize(frozen);assertNotNull(f2);assertEquals(origJson,_copyJson(f2,origJson,false));assertEquals(origJson,_copyJson(f2,origJson,true));}"
"com.fasterxml.jackson.core.TestJDKSerializability.testBase64Variant",0,"public void testBase64Variant()throws Exception {Base64Variant orig=Base64Variants.PEM;byte[]stuff=jdkSerialize(orig);Base64Variant back=jdkDeserialize(stuff);assertSame(orig,back);}"
"com.fasterxml.jackson.core.TestJDKSerializability.testPrettyPrinter",0,"public void testPrettyPrinter()throws Exception {PrettyPrinter p=new DefaultPrettyPrinter();byte[]stuff=jdkSerialize(p);PrettyPrinter back=jdkDeserialize(stuff);assertNotNull(back);}"
"com.fasterxml.jackson.core.TestJDKSerializability.testLocation",0,"public void testLocation()throws Exception {JsonFactory jf=new JsonFactory();JsonParser jp=jf.createParser(""{}"");assertToken(JsonToken.START_OBJECT,jp.nextToken());JsonLocation loc=jp.getCurrentLocation();byte[]stuff=jdkSerialize(loc);JsonLocation loc2=jdkDeserialize(stuff);assertNotNull(loc2);assertEquals(loc.getLineNr(),loc2.getLineNr());assertEquals(loc.getColumnNr(),loc2.getColumnNr());jp.close();}"
"com.fasterxml.jackson.core.TestJDKSerializability.testParseException",0,"public void testParseException()throws Exception {JsonFactory jf=new JsonFactory();JsonParser p=jf.createParser(""{garbage! }"");JsonParseException exc=null;try {p.nextToken();p.nextToken();fail(""Should not get here"");}catch(JsonParseException e){exc=e;}p.close();byte[]stuff=jdkSerialize(exc);JsonParseException result=jdkDeserialize(stuff);assertNotNull(result);}"
"com.fasterxml.jackson.core.TestJDKSerializability.testGenerationException",0,"public void testGenerationException()throws Exception {JsonFactory jf=new JsonFactory();JsonGenerator g=jf.createGenerator(new ByteArrayOutputStream());JsonGenerationException exc=null;g.writeStartObject();try {g.writeNumber(4);fail(""Should not get here"");}catch(JsonGenerationException e){exc=e;}g.close();byte[]stuff=jdkSerialize(exc);JsonGenerationException result=jdkDeserialize(stuff);assertNotNull(result);}"
"com.fasterxml.jackson.core.json.JsonReadContextTest.testSetCurrentNameTwiceWithSameNameRaisesJsonParseException",0,"@Test(expected=JsonParseException.class)public void testSetCurrentNameTwiceWithSameNameRaisesJsonParseException()throws JsonProcessingException {DupDetector dupDetector=DupDetector.rootDetector((JsonGenerator)null);JsonReadContext jsonReadContext=new JsonReadContext((JsonReadContext)null,dupDetector,2441,2441,2441);jsonReadContext.setCurrentName(""4'Du>icate field'"");jsonReadContext.setCurrentName(""4'Du>icate field'"");}"
"com.fasterxml.jackson.core.json.JsonReadContextTest.testSetCurrentName",0,"@Test public void testSetCurrentName()throws JsonProcessingException {JsonReadContext jsonReadContext=JsonReadContext.createRootContext(0,0,(DupDetector)null);jsonReadContext.setCurrentName(""asd / \"" € < - _"");assertEquals(""asd / \"" € < - _"",jsonReadContext.getCurrentName());jsonReadContext.setCurrentName(null);assertNull(jsonReadContext.getCurrentName());}"
"com.fasterxml.jackson.core.json.JsonReadContextTest.testReset",0,"@Test public void testReset(){DupDetector dupDetector=DupDetector.rootDetector((JsonGenerator)null);JsonReadContext jsonReadContext=JsonReadContext.createRootContext(dupDetector);assertTrue(jsonReadContext.inRoot());assertEquals(""root"",jsonReadContext.typeDesc());assertEquals(1,jsonReadContext.getStartLocation(jsonReadContext).getLineNr());assertEquals(0,jsonReadContext.getStartLocation(jsonReadContext).getColumnNr());jsonReadContext.reset(200,500,200);assertFalse(jsonReadContext.inRoot());assertEquals(""?"",jsonReadContext.typeDesc());assertEquals(500,jsonReadContext.getStartLocation(jsonReadContext).getLineNr());assertEquals(200,jsonReadContext.getStartLocation(jsonReadContext).getColumnNr());}"
"com.fasterxml.jackson.core.read.DataInputTest.testEOFAfterArray",0,"public void testEOFAfterArray()throws Exception {JsonParser p=createParser(JSON_F,MODE_DATA_INPUT,""[1]"");assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.read.DataInputTest.testEOFAfterObject",0,"public void testEOFAfterObject()throws Exception {JsonParser p=createParser(JSON_F,MODE_DATA_INPUT,""{\""value\"" : true }"");assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertToken(JsonToken.VALUE_TRUE,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.read.DataInputTest.testEOFAfterScalar",0,"public void testEOFAfterScalar()throws Exception {JsonParser p=createParser(JSON_F,MODE_DATA_INPUT,""\""foobar\"" "");assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(""foobar"",p.getText());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorArray.testEmptyArrayWrite",0,"public void testEmptyArrayWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);JsonStreamContext ctxt=gen.getOutputContext();assertTrue(ctxt.inRoot());assertFalse(ctxt.inArray());assertFalse(ctxt.inObject());assertEquals(0,ctxt.getEntryCount());assertEquals(0,ctxt.getCurrentIndex());gen.writeStartArray();ctxt=gen.getOutputContext();assertFalse(ctxt.inRoot());assertTrue(ctxt.inArray());assertFalse(ctxt.inObject());assertEquals(0,ctxt.getEntryCount());assertEquals(0,ctxt.getCurrentIndex());gen.writeEndArray();ctxt=gen.getOutputContext();assertTrue(""Should be in root,was "" + ctxt.typeDesc(),ctxt.inRoot());assertFalse(ctxt.inArray());assertFalse(ctxt.inObject());assertEquals(1,ctxt.getEntryCount());assertEquals(0,ctxt.getCurrentIndex());gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_ARRAY,jp.nextToken());assertEquals(JsonToken.END_ARRAY,jp.nextToken());jp.close();sw=new StringWriter();gen=new JsonFactory().createGenerator(sw);gen.writeStartArray();gen.writeStartArray();gen.writeEndArray();gen.writeEndArray();gen.close();docStr=sw.toString();jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_ARRAY,jp.nextToken());assertEquals(JsonToken.START_ARRAY,jp.nextToken());assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertEquals(null,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorArray.testInvalidArrayWrite",0,"public void testInvalidArrayWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.writeStartArray();try {gen.writeEndObject();fail(""Expected an exception for mismatched array/object write"");}catch(JsonGenerationException e){verifyException(e,""Current context not Object"");}gen.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorArray.testSimpleArrayWrite",0,"public void testSimpleArrayWrite()throws Exception {StringWriter sw=new StringWriter();JsonGenerator gen=new JsonFactory().createGenerator(sw);gen.writeStartArray();gen.writeNumber(13);gen.writeBoolean(true);gen.writeString(""foobar"");gen.writeEndArray();gen.close();String docStr=sw.toString();JsonParser jp=createParserUsingReader(docStr);assertEquals(JsonToken.START_ARRAY,jp.nextToken());assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(13,jp.getIntValue());assertEquals(JsonToken.VALUE_TRUE,jp.nextToken());assertEquals(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""foobar"",jp.getText());assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertEquals(null,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.util.TestSerializedString.testAppending",0,"public void testAppending()throws IOException {final String INPUT=""\""quo\\ted\"""";final String QUOTED=""\\\""quo\\\\ted\\\"""";SerializableString sstr=new SerializedString(INPUT);assertEquals(sstr.getValue(),INPUT);assertEquals(QUOTED,new String(sstr.asQuotedChars()));ByteArrayOutputStream bytes=new ByteArrayOutputStream();assertEquals(QUOTED.length(),sstr.writeQuotedUTF8(bytes));assertEquals(QUOTED,bytes.toString(""UTF-8""));bytes.reset();assertEquals(INPUT.length(),sstr.writeUnquotedUTF8(bytes));assertEquals(INPUT,bytes.toString(""UTF-8""));byte[]buffer=new byte[100];assertEquals(QUOTED.length(),sstr.appendQuotedUTF8(buffer,3));assertEquals(QUOTED,new String(buffer,3,QUOTED.length()));Arrays.fill(buffer,(byte)0);assertEquals(INPUT.length(),sstr.appendUnquotedUTF8(buffer,5));assertEquals(INPUT,new String(buffer,5,INPUT.length()));}"
"com.fasterxml.jackson.core.util.TestSerializedString.testFailedAccess",0,"public void testFailedAccess()throws IOException {final String INPUT=""Bit longer text"";SerializableString sstr=new SerializedString(INPUT);final byte[]buffer=new byte[INPUT.length()- 2];final char[]ch=new char[INPUT.length()- 2];final ByteBuffer bbuf=ByteBuffer.allocate(INPUT.length()- 2);assertEquals(-1,sstr.appendQuotedUTF8(buffer,0));assertEquals(-1,sstr.appendQuoted(ch,0));assertEquals(-1,sstr.putQuotedUTF8(bbuf));bbuf.rewind();assertEquals(-1,sstr.appendUnquotedUTF8(buffer,0));assertEquals(-1,sstr.appendUnquoted(ch,0));assertEquals(-1,sstr.putUnquotedUTF8(bbuf));}"
"com.fasterxml.jackson.core.json.TestUtf8Generator.testUtf8Issue462",0,"public void testUtf8Issue462()throws Exception {ByteArrayOutputStream bytes=new ByteArrayOutputStream();IOContext ioc=new IOContext(new BufferRecycler(),bytes,true);JsonGenerator gen=new UTF8JsonGenerator(ioc,0,null,bytes);String str=""Natuurlijk is alles gelukt en weer een tevreden klant\uD83D\uDE04"";int length=4000 - 38;for (int i=1;i <= length;++i){gen.writeNumber(1);}gen.writeString(str);gen.flush();gen.close();JsonParser p=JSON_F.createParser(bytes.toByteArray());for (int i=1;i <= length;++i){assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(1,p.getIntValue());}assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(str,p.getText());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.json.TestUtf8Generator.testSurrogatesWithRaw",0,"public void testSurrogatesWithRaw()throws Exception {final String VALUE=quote(""\ud83d\ude0c"");ByteArrayOutputStream out=new ByteArrayOutputStream();JsonGenerator g=JSON_F.createGenerator(out);g.writeStartArray();g.writeRaw(VALUE);g.writeEndArray();g.close();final byte[]JSON=out.toByteArray();JsonParser jp=JSON_F.createParser(JSON);assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());String str=jp.getText();assertEquals(2,str.length());assertEquals((char)0xD83D,str.charAt(0));assertEquals((char)0xDE0C,str.charAt(1));assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.json.TestUtf8Generator.testFilteringWithEscapedChars",0,"public void testFilteringWithEscapedChars()throws Exception {final String SAMPLE_WITH_QUOTES=""\b\t\f\n\r\""foo\""\u0000"";ByteArrayOutputStream out=new ByteArrayOutputStream();@SuppressWarnings(""resource"")JsonGenerator g=JSON_F.createGenerator(out);FilteringGeneratorDelegate gen=new FilteringGeneratorDelegate(g,new JsonPointerBasedFilter(""/escapes""),true,false);gen.writeStartObject();gen.writeFieldName(""a"");gen.writeNumber((int)123);gen.writeFieldName(""array"");gen.writeStartArray();gen.writeNumber((short)1);gen.writeNumber((short)2);gen.writeEndArray();gen.writeFieldName(""escapes"");final byte[]raw=SAMPLE_WITH_QUOTES.toString().getBytes(""UTF-8"");gen.writeUTF8String(raw,0,raw.length);gen.writeEndObject();gen.close();JsonParser p=JSON_F.createParser(out.toByteArray());assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""escapes"",p.getCurrentName());assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(SAMPLE_WITH_QUOTES,p.getText());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.core.base64.Base64GenerationTest.testStreamingBinaryWrites",0,"public void testStreamingBinaryWrites()throws Exception {_testStreamingWrites(JSON_F,true);_testStreamingWrites(JSON_F,false);}"
"com.fasterxml.jackson.core.base64.Base64GenerationTest.testIssue55",0,"public void testIssue55()throws Exception {final JsonFactory f=new JsonFactory();ByteArrayOutputStream bytes=new ByteArrayOutputStream();JsonGenerator gen=f.createGenerator(bytes);ByteArrayInputStream data=new ByteArrayInputStream(new byte[2000]);gen.writeBinary(data,1999);gen.close();final int EXP_LEN=2670;assertEquals(EXP_LEN,bytes.size());StringWriter sw=new StringWriter();gen=f.createGenerator(sw);data=new ByteArrayInputStream(new byte[2000]);gen.writeBinary(data,1999);gen.close();assertEquals(EXP_LEN,sw.toString().length());}"
"com.fasterxml.jackson.core.base64.Base64GenerationTest.testSimpleBinaryWrite",0,"/** * This is really inadequate test,all in all,but should serve as some kind of sanity check. Reader-side should more thoroughly test things,as it does need writers to construct the data first.*/public void testSimpleBinaryWrite()throws Exception {_testSimpleBinaryWrite(false);_testSimpleBinaryWrite(true);}"
"com.fasterxml.jackson.core.base64.Base64GenerationTest.testBinaryAsEmbeddedObject",0,"public void testBinaryAsEmbeddedObject()throws Exception {JsonGenerator g;StringWriter sw=new StringWriter();g=JSON_F.createGenerator(sw);g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);g.close();assertEquals(quote(WIKIPEDIA_BASE64_ENCODED),sw.toString());ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);g=JSON_F.createGenerator(bytes);g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);g.close();assertEquals(quote(WIKIPEDIA_BASE64_ENCODED),bytes.toString(""UTF-8""));}"
"com.fasterxml.jackson.core.json.RawValueWithSurrogatesTest.testRawWithSurrogatesString",0,"public void testRawWithSurrogatesString()throws Exception {_testRawWithSurrogatesString(false);}"
"com.fasterxml.jackson.core.json.RawValueWithSurrogatesTest.testRawWithSurrogatesCharArray",0,"public void testRawWithSurrogatesCharArray()throws Exception {_testRawWithSurrogatesString(true);}"
"com.fasterxml.jackson.core.util.SeparatorsTest.testWithArrayValueSeparatorWithDigit",0,"@Test public void testWithArrayValueSeparatorWithDigit(){Separators separators=new Separators('5','5','5');Separators separatorsTwo=separators.withArrayValueSeparator('5');assertEquals('5',separatorsTwo.getObjectEntrySeparator());assertEquals('5',separatorsTwo.getObjectFieldValueSeparator());assertEquals('5',separatorsTwo.getArrayValueSeparator());assertSame(separatorsTwo,separators);separatorsTwo=separators.withArrayValueSeparator('6');assertEquals('5',separatorsTwo.getObjectEntrySeparator());assertEquals('5',separatorsTwo.getObjectFieldValueSeparator());assertEquals('6',separatorsTwo.getArrayValueSeparator());assertNotSame(separatorsTwo,separators);}"
"com.fasterxml.jackson.core.util.SeparatorsTest.testWithObjectEntrySeparator",0,"@Test public void testWithObjectEntrySeparator(){Separators separators=new Separators('5','5','5');Separators separatorsTwo=separators.withObjectEntrySeparator('!');Separators separatorsThree=separatorsTwo.withObjectEntrySeparator('!');assertEquals('!',separatorsThree.getObjectEntrySeparator());assertEquals('5',separatorsThree.getObjectFieldValueSeparator());assertSame(separatorsThree,separatorsTwo);assertEquals('5',separators.getArrayValueSeparator());assertEquals('5',separatorsThree.getArrayValueSeparator());assertEquals('5',separators.getObjectFieldValueSeparator());}"
"com.fasterxml.jackson.core.util.SeparatorsTest.testWithObjectFieldValueSeparatorWithDigit",0,"@Test public void testWithObjectFieldValueSeparatorWithDigit(){Separators separators=new Separators('5','5','5');Separators separatorsTwo=separators.withObjectFieldValueSeparator('5');assertEquals('5',separatorsTwo.getArrayValueSeparator());assertSame(separatorsTwo,separators);assertEquals('5',separatorsTwo.getObjectEntrySeparator());assertEquals('5',separatorsTwo.getObjectFieldValueSeparator());separatorsTwo=separators.withObjectFieldValueSeparator('6');assertEquals('5',separatorsTwo.getArrayValueSeparator());assertNotSame(separatorsTwo,separators);assertEquals('5',separatorsTwo.getObjectEntrySeparator());assertEquals('6',separatorsTwo.getObjectFieldValueSeparator());}"
"com.fasterxml.jackson.core.json.async.AsyncCommentParsingTest.testCommentsDisabled",0,"public void testCommentsDisabled()throws Exception {_testDisabled(DOC_WITH_SLASHSTAR_COMMENT);_testDisabled(DOC_WITH_SLASHSLASH_COMMENT);}"
"com.fasterxml.jackson.core.json.async.AsyncCommentParsingTest.testCommentsEnabled",0,"public void testCommentsEnabled()throws Exception {_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,99);_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,3);_testEnabled(DOC_WITH_SLASHSTAR_COMMENT,1);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,99);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,3);_testEnabled(DOC_WITH_SLASHSLASH_COMMENT,1);}"
"com.fasterxml.jackson.core.json.async.AsyncCommentParsingTest.testCCommentsWithUTF8",0,"public void testCCommentsWithUTF8()throws Exception {final String JSON=""/* \u00a9 2099 Yoyodyne Inc. */\n[\""bar? \u00a9\"" ]\n"";_testWithUTF8Chars(JSON,99);_testWithUTF8Chars(JSON,5);_testWithUTF8Chars(JSON,3);_testWithUTF8Chars(JSON,2);_testWithUTF8Chars(JSON,1);}"
"com.fasterxml.jackson.core.json.async.AsyncCommentParsingTest.testYAMLCommentsEnabled",0,"public void testYAMLCommentsEnabled()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_YAML_COMMENTS).build();_testYAMLComments(f,99);_testYAMLComments(f,3);_testYAMLComments(f,1);_testCommentsBeforePropValue(f,""# foo\n"",99);_testCommentsBeforePropValue(f,""# foo\n"",3);_testCommentsBeforePropValue(f,""# foo\n"",1);_testCommentsBetweenArrayValues(f,""# foo\n"",99);_testCommentsBetweenArrayValues(f,""# foo\n"",3);_testCommentsBetweenArrayValues(f,""# foo\n"",1);}"
"com.fasterxml.jackson.core.json.async.AsyncCommentParsingTest.testCCommentsEnabled",0,"public void testCCommentsEnabled()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).build();final String COMMENT=""/* foo */\n"";_testCommentsBeforePropValue(f,COMMENT,99);_testCommentsBeforePropValue(f,COMMENT,3);_testCommentsBeforePropValue(f,COMMENT,1);}"
"com.fasterxml.jackson.core.json.async.AsyncCommentParsingTest.testCppCommentsEnabled",0,"public void testCppCommentsEnabled()throws Exception {final JsonFactory f=JsonFactory.builder().enable(JsonReadFeature.ALLOW_JAVA_COMMENTS).build();final String COMMENT=""// foo\n"";_testCommentsBeforePropValue(f,COMMENT,99);_testCommentsBeforePropValue(f,COMMENT,3);_testCommentsBeforePropValue(f,COMMENT,1);}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testUnclosedArray",0,"public void testUnclosedArray()throws Exception {for(int mode : ALL_MODES){_testUnclosedArray(mode);}}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testUnclosedObject",0,"public void testUnclosedObject()throws Exception {for(int mode : ALL_MODES){_testUnclosedObject(mode);}}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testEOFInName",0,"public void testEOFInName()throws Exception {for(int mode : ALL_MODES){_testEOFInName(mode);}}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testWeirdToken",0,"public void testWeirdToken()throws Exception {for(int mode : ALL_MODES){_testWeirdToken(mode);}}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testMismatchArrayToObject",0,"public void testMismatchArrayToObject()throws Exception {for(int mode : ALL_MODES){_testMismatchArrayToObject(mode);}}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testMismatchObjectToArray",0,"public void testMismatchObjectToArray()throws Exception {for(int mode : ALL_MODES){_testMismatchObjectToArray(mode);}}"
"com.fasterxml.jackson.core.read.ParserScopeMatchingTest.testMisssingColon",0,"public void testMisssingColon()throws Exception {for(int mode : ALL_MODES){_testMisssingColon(mode);}}"
"com.fasterxml.jackson.core.json.TestWithTonsaSymbols.testStreamReaderParser",0,"public void testStreamReaderParser()throws Exception {_testWith(true);}"
"com.fasterxml.jackson.core.json.TestWithTonsaSymbols.testReaderParser",0,"public void testReaderParser()throws Exception {_testWith(false);}"
"com.fasterxml.jackson.core.json.async.AsyncRootValuesTest.testTokenRootTokens",0,"public void testTokenRootTokens()throws Exception {_testTokenRootTokens(JsonToken.VALUE_TRUE,""true"");_testTokenRootTokens(JsonToken.VALUE_FALSE,""false"");_testTokenRootTokens(JsonToken.VALUE_NULL,""null"");_testTokenRootTokens(JsonToken.VALUE_TRUE,""true  "");_testTokenRootTokens(JsonToken.VALUE_FALSE,""false  "");_testTokenRootTokens(JsonToken.VALUE_NULL,""null  "");}"
"com.fasterxml.jackson.core.json.async.AsyncRootValuesTest.testTokenRootSequence",0,"public void testTokenRootSequence()throws Exception {byte[]input=_jsonDoc(""\n[true,false,\nnull  ,null\n,true,false]"");JsonFactory f=JSON_F;_testTokenRootSequence(f,input,0,900);_testTokenRootSequence(f,input,0,3);_testTokenRootSequence(f,input,0,1);_testTokenRootSequence(f,input,1,900);_testTokenRootSequence(f,input,1,3);_testTokenRootSequence(f,input,1,1);}"
"com.fasterxml.jackson.core.json.async.AsyncRootValuesTest.testMixedRootSequence",0,"public void testMixedRootSequence()throws Exception {ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);bytes.write(_jsonDoc(""{\""a\"" : 4 }""));bytes.write(_jsonDoc(""[12,-987,false ]""));bytes.write(_jsonDoc("" 12356""));bytes.write(_jsonDoc("" true""));byte[]input=bytes.toByteArray();JsonFactory f=JSON_F;_testMixedRootSequence(f,input,0,100);_testMixedRootSequence(f,input,0,3);_testMixedRootSequence(f,input,0,1);_testMixedRootSequence(f,input,1,100);_testMixedRootSequence(f,input,1,3);_testMixedRootSequence(f,input,1,1);}"
"com.fasterxml.jackson.core.filter.JsonPointerParserFilteringTest.testSimplestWithPath",0,"public void testSimplestWithPath()throws Exception {_assert(SIMPLEST_INPUT,""/a"",true,""{'a':1}"");_assert(SIMPLEST_INPUT,""/b"",true,""{'b':2}"");_assert(SIMPLEST_INPUT,""/c"",true,""{'c':3}"");_assert(SIMPLEST_INPUT,""/c/0"",true,"""");_assert(SIMPLEST_INPUT,""/d"",true,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerParserFilteringTest.testSimplestNoPath",0,"public void testSimplestNoPath()throws Exception {_assert(SIMPLEST_INPUT,""/a"",false,""1"");_assert(SIMPLEST_INPUT,""/b"",false,""2"");_assert(SIMPLEST_INPUT,""/b/2"",false,"""");_assert(SIMPLEST_INPUT,""/c"",false,""3"");_assert(SIMPLEST_INPUT,""/d"",false,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerParserFilteringTest.testSimpleWithPath",0,"public void testSimpleWithPath()throws Exception {_assert(SIMPLE_INPUT,""/c"",true,""{'c':{'d':{'a':true}}}"");_assert(SIMPLE_INPUT,""/c/d"",true,""{'c':{'d':{'a':true}}}"");_assert(SIMPLE_INPUT,""/a"",true,""{'a':1}"");_assert(SIMPLE_INPUT,""/b"",true,""{'b':[1,2,3]}"");_assert(SIMPLE_INPUT,""/b/0"",true,""{'b':[1]}"");_assert(SIMPLE_INPUT,""/b/1"",true,""{'b':[2]}"");_assert(SIMPLE_INPUT,""/b/2"",true,""{'b':[3]}"");_assert(SIMPLE_INPUT,""/b/3"",true,"""");}"
"com.fasterxml.jackson.core.filter.JsonPointerParserFilteringTest.testSimpleNoPath",0,"public void testSimpleNoPath()throws Exception {_assert(SIMPLE_INPUT,""/c"",false,""{'d':{'a':true}}"");_assert(SIMPLE_INPUT,""/c/d"",false,""{'a':true}"");_assert(SIMPLE_INPUT,""/a"",false,""1"");_assert(SIMPLE_INPUT,""/b"",false,""[1,2,3]"");_assert(SIMPLE_INPUT,""/b/0"",false,""1"");_assert(SIMPLE_INPUT,""/b/1"",false,""2"");_assert(SIMPLE_INPUT,""/b/2"",false,""3"");_assert(SIMPLE_INPUT,""/b/3"",false,"""");}"
"com.fasterxml.jackson.core.json.async.AsyncRootNumbersTest.testRootInts",0,"public void testRootInts()throws Exception {_testRootInts(""10"",10);_testRootInts("" 10"",10);_testRootInts(""10   "",10);_testRootInts(""0"",0);_testRootInts(""    0"",0);_testRootInts(""0 "",0);_testRootInts(""-1234"",-1234);_testRootInts(""  -1234"",-1234);_testRootInts("" -1234  "",-1234);}"
"com.fasterxml.jackson.core.json.async.AsyncRootNumbersTest.testRootDoublesSimple",0,"public void testRootDoublesSimple()throws Exception {_testRootDoubles(""10.0"",10.0);_testRootDoubles("" 10.0"",10.0);_testRootDoubles(""10.0   "",10.0);_testRootDoubles(""-1234.25"",-1234.25);_testRootDoubles(""  -1234.25"",-1234.25);_testRootDoubles("" -1234.25  "",-1234.25);_testRootDoubles(""0.25"",0.25);_testRootDoubles("" 0.25"",0.25);_testRootDoubles(""0.25   "",0.25);}"
"com.fasterxml.jackson.core.json.async.AsyncRootNumbersTest.testRootDoublesScientific",0,"public void testRootDoublesScientific()throws Exception {_testRootDoubles(""9e3"",9e3);_testRootDoubles(""  9e3"",9e3);_testRootDoubles(""9e3  "",9e3);_testRootDoubles(""9e-2"",9e-2);_testRootDoubles(""  9e-2"",9e-2);_testRootDoubles(""9e-2  "",9e-2);_testRootDoubles(""-12.5e3"",-12.5e3);_testRootDoubles(""  -12.5e3"",-12.5e3);_testRootDoubles("" -12.5e3  "",-12.5e3);_testRootDoubles(""-12.5E3"",-12.5e3);_testRootDoubles(""  -12.5E3"",-12.5e3);_testRootDoubles(""-12.5E3  "",-12.5e3);_testRootDoubles(""-12.5E-2"",-12.5e-2);_testRootDoubles(""  -12.5E-2"",-12.5e-2);_testRootDoubles("" -12.5E-2  "",-12.5e-2);_testRootDoubles(""0e-05"",0e-5);_testRootDoubles(""0e-5  "",0e-5);_testRootDoubles(""  0e-5"",0e-5);_testRootDoubles(""0e1"",0e1);_testRootDoubles(""0e1  "",0e1);_testRootDoubles(""  0e1"",0e1);}"
"com.fasterxml.jackson.core.io.TestIOContext.testAllocations",0,"public void testAllocations()throws Exception {IOContext ctxt=new IOContext(new BufferRecycler(),""N/A"",true);assertNotNull(ctxt.allocReadIOBuffer());try {ctxt.allocReadIOBuffer();}catch(IllegalStateException e){verifyException(e,""second time"");}try {ctxt.releaseReadIOBuffer(new byte[1]);}catch(IllegalArgumentException e){verifyException(e,""smaller than original"");}ctxt.releaseReadIOBuffer(null);assertNotNull(ctxt.allocWriteEncodingBuffer());try {ctxt.allocWriteEncodingBuffer();}catch(IllegalStateException e){verifyException(e,""second time"");}try {ctxt.releaseWriteEncodingBuffer(new byte[1]);}catch(IllegalArgumentException e){verifyException(e,""smaller than original"");}ctxt.releaseWriteEncodingBuffer(null);assertNotNull(ctxt.allocTokenBuffer());try {ctxt.allocTokenBuffer();}catch(IllegalStateException e){verifyException(e,""second time"");}try {ctxt.releaseTokenBuffer(new char[1]);}catch(IllegalArgumentException e){verifyException(e,""smaller than original"");}ctxt.releaseTokenBuffer(null);assertNotNull(ctxt.allocConcatBuffer());try {ctxt.allocConcatBuffer();}catch(IllegalStateException e){verifyException(e,""second time"");}try {ctxt.releaseConcatBuffer(new char[1]);}catch(IllegalArgumentException e){verifyException(e,""smaller than original"");}ctxt.releaseConcatBuffer(null);assertNotNull(ctxt.allocNameCopyBuffer(100));try {ctxt.allocNameCopyBuffer(100);}catch(IllegalStateException e){verifyException(e,""second time"");}try {ctxt.releaseNameCopyBuffer(new char[1]);}catch(IllegalArgumentException e){verifyException(e,""smaller than original"");}ctxt.releaseNameCopyBuffer(null);}"
"com.fasterxml.jackson.core.format.DataFormatMatcherTest.testGetDataStream",0,"public void testGetDataStream()throws IOException {byte[]byteArray=new byte[2];MatchStrength matchStrength=MatchStrength.WEAK_MATCH;DataFormatMatcher dataFormatMatcher=new DataFormatMatcher(null,byteArray,1,0,null,matchStrength);InputStream inputStream=dataFormatMatcher.getDataStream();assertEquals(0,inputStream.available());inputStream.close();}"
"com.fasterxml.jackson.core.format.DataFormatMatcherTest.testCreatesDataFormatMatcherTwo",0,"public void testCreatesDataFormatMatcherTwo()throws IOException {JsonFactory jsonFactory=new JsonFactory();try {@SuppressWarnings(""unused"")DataFormatMatcher dataFormatMatcher=new DataFormatMatcher(null,new byte[0],2,1,jsonFactory,MatchStrength.NO_MATCH);}catch(IllegalArgumentException e){verifyException(e,""Illegal start/length"");}}"
"com.fasterxml.jackson.core.sym.TestHashCollisionChars.testReaderCollisions",0,"public void testReaderCollisions()throws Exception {StringBuilder sb=new StringBuilder();List<String> coll=collisions();for(String field : coll){if (sb.length()== 0){sb.append(""{"");}else {sb.append("",\n"");}sb.append('""');sb.append(field);sb.append(""\"":3"");}sb.append(""}"");JsonFactory f=JsonFactory.builder().enable(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW).build();JsonParser p=f.createParser(sb.toString());try {while (p.nextToken()!= null){;}fail(""Should have failed"");}catch(IllegalStateException e){verifyException(e,""hash collision"");}p.close();f=JsonFactory.builder().disable(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW).build();p=f.createParser(sb.toString());while (p.nextToken()!= null){;}p.close();}"
"com.fasterxml.jackson.core.read.ParserErrorHandlingTest.testInvalidKeywordsBytes",0,"public void testInvalidKeywordsBytes()throws Exception {_testInvalidKeywords(MODE_INPUT_STREAM);_testInvalidKeywords(MODE_INPUT_STREAM_THROTTLED);_testInvalidKeywords(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.ParserErrorHandlingTest.testInvalidKeywordsChars",0,"public void testInvalidKeywordsChars()throws Exception {_testInvalidKeywords(MODE_READER);}"
"com.fasterxml.jackson.core.read.ParserErrorHandlingTest.testMangledIntsBytes",0,"public void testMangledIntsBytes()throws Exception {_testMangledNumbersInt(MODE_INPUT_STREAM);_testMangledNumbersInt(MODE_INPUT_STREAM_THROTTLED);}"
"com.fasterxml.jackson.core.read.ParserErrorHandlingTest.testMangledFloatsBytes",0,"public void testMangledFloatsBytes()throws Exception {_testMangledNumbersFloat(MODE_INPUT_STREAM);_testMangledNumbersFloat(MODE_INPUT_STREAM_THROTTLED);_testMangledNumbersFloat(MODE_DATA_INPUT);}"
"com.fasterxml.jackson.core.read.ParserErrorHandlingTest.testMangledNumbersChars",0,"public void testMangledNumbersChars()throws Exception {_testMangledNumbersInt(MODE_READER);_testMangledNumbersFloat(MODE_READER);}"
"com.fasterxml.jackson.core.json.async.AsyncNumberLeadingZeroesTest.testDefaultsForAsync",0,"@SuppressWarnings(""deprecation"")public void testDefaultsForAsync()throws Exception {JsonFactory f=new JsonFactory();assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS));}"
"com.fasterxml.jackson.core.json.async.AsyncNumberLeadingZeroesTest.testLeadingZeroesInt",0,"public void testLeadingZeroesInt()throws Exception {_testLeadingZeroesInt(""00003"",3);_testLeadingZeroesInt(""00003 "",3);_testLeadingZeroesInt("" 00003"",3);_testLeadingZeroesInt(""-00007"",-7);_testLeadingZeroesInt(""-00007 "",-7);_testLeadingZeroesInt("" -00007"",-7);_testLeadingZeroesInt(""056"",56);_testLeadingZeroesInt(""056 "",56);_testLeadingZeroesInt("" 056"",56);_testLeadingZeroesInt(""-04"",-4);_testLeadingZeroesInt(""-04  "",-4);_testLeadingZeroesInt("" -04"",-4);_testLeadingZeroesInt(""0"" + Integer.MAX_VALUE,Integer.MAX_VALUE);_testLeadingZeroesInt("" 0"" + Integer.MAX_VALUE,Integer.MAX_VALUE);_testLeadingZeroesInt(""0"" + Integer.MAX_VALUE + "" "",Integer.MAX_VALUE);}"
"com.fasterxml.jackson.core.json.async.AsyncNumberLeadingZeroesTest.testLeadingZeroesFloat",0,"public void testLeadingZeroesFloat()throws Exception {_testLeadingZeroesFloat(""00.25"",0.25);_testLeadingZeroesFloat(""  00.25"",0.25);_testLeadingZeroesFloat(""00.25  "",0.25);_testLeadingZeroesFloat(""-000.5"",-0.5);_testLeadingZeroesFloat(""  -000.5"",-0.5);_testLeadingZeroesFloat(""-000.5  "",-0.5);}"
"com.fasterxml.jackson.core.json.StringGenerationFromReaderTest.testBasicEscaping",0,"public void testBasicEscaping()throws Exception {doTestBasicEscaping();}"
"com.fasterxml.jackson.core.json.StringGenerationFromReaderTest.testMediumStringsBytes",0,"public void testMediumStringsBytes()throws Exception {for(int mode : ALL_BINARY_MODES){for(int size : new int[]{1100,2300,3800,7500,19000}){_testMediumStrings(mode,size);}}}"
"com.fasterxml.jackson.core.json.StringGenerationFromReaderTest.testMediumStringsChars",0,"public void testMediumStringsChars()throws Exception {for(int mode : ALL_TEXT_MODES){for(int size : new int[]{1100,2300,3800,7500,19000}){_testMediumStrings(mode,size);}}}"
"com.fasterxml.jackson.core.json.StringGenerationFromReaderTest.testLongerRandomSingleChunk",0,"public void testLongerRandomSingleChunk()throws Exception {for(int mode : ALL_TEXT_MODES){for (int round=0;round < 80;++round){String content=generateRandom(75000 + round);_testLongerRandom(mode,content);}}}"
"com.fasterxml.jackson.core.json.StringGenerationFromReaderTest.testLongerRandomMultiChunk",0,"public void testLongerRandomMultiChunk()throws Exception {for(int mode : ALL_TEXT_MODES){for (int round=0;round < 70;++round){String content=generateRandom(73000 + round);_testLongerRandomMulti(mode,content,round);}}}"
"com.fasterxml.jackson.core.main.TestGeneratorMisc.testIsClosed",0,"public void testIsClosed()throws IOException {for (int i=0;i < 2;++i){boolean stream=((i & 1)== 0);JsonGenerator jg=stream ? JSON_F.createGenerator(new StringWriter()): JSON_F.createGenerator(new ByteArrayOutputStream(),JsonEncoding.UTF8);assertFalse(jg.isClosed());jg.writeStartArray();jg.writeNumber(-1);jg.writeEndArray();assertFalse(jg.isClosed());jg.close();assertTrue(jg.isClosed());jg.close();assertTrue(jg.isClosed());}}"
"com.fasterxml.jackson.core.main.TestGeneratorMisc.testSimpleWriteObject",0,"public void testSimpleWriteObject()throws IOException {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeStartArray();gen.writeObject(1);gen.writeObject((short)-2);gen.writeObject((long)3);gen.writeObject((byte)-4);gen.writeObject(0.25);gen.writeObject(-0.125f);gen.writeObject(Boolean.TRUE);gen.close();String act=sw.toString().trim();assertEquals(""[1,-2,3,-4,0.25,-0.125,true]"",act);sw=new StringWriter();gen=JSON_F.createGenerator(sw);gen.writeStartArray();gen.writeObject(BigInteger.valueOf(1234));gen.writeObject(new BigDecimal(0.5));gen.writeEndArray();gen.close();act=sw.toString().trim();assertEquals(""[1234,0.5]"",act);sw=new StringWriter();gen=JSON_F.createGenerator(sw);gen.writeStartArray();gen.writeObject(new AtomicBoolean(false));gen.writeObject(new AtomicInteger(13));gen.writeObject(new AtomicLong(-127L));gen.writeEndArray();gen.close();act=sw.toString().trim();assertEquals(""[false,13,-127]"",act);}"
"com.fasterxml.jackson.core.main.TestGeneratorMisc.testRaw",0,"public void testRaw()throws IOException {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeStartArray();gen.writeRaw(""-123,true"");gen.writeRaw("",\""x\""  "");gen.writeEndArray();gen.close();JsonParser jp=createParserUsingReader(sw.toString());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(-123,jp.getIntValue());assertToken(JsonToken.VALUE_TRUE,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""x"",jp.getText());assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorMisc.testRawValue",0,"public void testRawValue()throws IOException {StringWriter sw=new StringWriter();JsonGenerator gen=JSON_F.createGenerator(sw);gen.writeStartArray();gen.writeRawValue(""7"");gen.writeRawValue(""[null ]"");gen.writeRawValue(""false"");gen.writeEndArray();gen.close();JsonParser jp=createParserUsingReader(sw.toString());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(7,jp.getIntValue());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NULL,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_FALSE,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.core.main.TestGeneratorMisc.testLongerObjects",0,"/** * Unit test that tries to trigger buffer-boundary conditions*/public void testLongerObjects()throws Exception {_testLongerObjects(JSON_F,0);_testLongerObjects(JSON_F,1);_testLongerObjects(JSON_F,2);}"
"com.fasterxml.jackson.core.main.TestGeneratorMisc.testAsEmbedded",0,"public void testAsEmbedded()throws Exception {JsonGenerator g;StringWriter sw=new StringWriter();g=JSON_F.createGenerator(sw);g.writeEmbeddedObject(null);g.close();assertEquals(""null"",sw.toString());ByteArrayOutputStream bytes=new ByteArrayOutputStream(100);g=JSON_F.createGenerator(bytes);g.writeEmbeddedObject(null);g.close();assertEquals(""null"",bytes.toString(""UTF-8""));try {g=JSON_F.createGenerator(bytes);g.writeEmbeddedObject(getClass());fail(""Expected an exception"");g.close();}catch(JsonGenerationException e){verifyException(e,""No native support for"");}}"
