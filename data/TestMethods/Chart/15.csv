test_case,faulty,test_code
"org.jfree.data.xy.junit.TableXYDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultTableXYDataset d1=new DefaultTableXYDataset();DefaultTableXYDataset d2=new DefaultTableXYDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1.addSeries(createSeries1());assertFalse(d1.equals(d2));d2.addSeries(createSeries1());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.TableXYDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultTableXYDataset d1=new DefaultTableXYDataset();d1.addSeries(createSeries1());DefaultTableXYDataset d2=null;try {d2=(DefaultTableXYDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.TableXYDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultTableXYDataset d1=new DefaultTableXYDataset();d1.addSeries(createSeries2());DefaultTableXYDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultTableXYDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.TableXYDatasetTests.testTableXYDataset",0,"/** * Assorted tests.*/public void testTableXYDataset(){XYSeries series1=createSeries1();XYSeries series2=createSeries2();DefaultTableXYDataset dataset=new DefaultTableXYDataset();dataset.addSeries(series1);dataset.addSeries(series2);assertEquals(6,dataset.getItemCount());assertEquals(6,dataset.getX(0,5).intValue());assertEquals(null,dataset.getY(0,5));assertEquals(6,dataset.getX(1,5).intValue());assertEquals(2,dataset.getY(1,5).intValue());series2.add(7,2);assertEquals(7,dataset.getItemCount());assertEquals(null,dataset.getY(0,6));assertEquals(2,dataset.getY(1,6).intValue());dataset.removeSeries(series1);assertEquals(7,dataset.getItemCount());dataset.removeSeries(series2);series1=createSeries1();dataset.addSeries(series1);assertEquals(4,dataset.getItemCount());}"
"org.jfree.data.xy.junit.TableXYDatasetTests.test788597",0,"/** * A test for bug report 788597.*/public void test788597(){DefaultTableXYDataset dataset=new DefaultTableXYDataset();dataset.addSeries(createSeries1());assertEquals(4,dataset.getItemCount());dataset.removeAllSeries();assertEquals(0,dataset.getItemCount());}"
"org.jfree.data.xy.junit.TableXYDatasetTests.testRemoveAllValuesForX",0,"/** * Test that removing all values for a given x works.*/public void testRemoveAllValuesForX(){DefaultTableXYDataset dataset=new DefaultTableXYDataset();dataset.addSeries(createSeries1());dataset.addSeries(createSeries2());dataset.removeAllValuesForX(new Double(2.0));assertEquals(5,dataset.getItemCount());assertEquals(new Double(1.0),dataset.getX(0,0));assertEquals(new Double(3.0),dataset.getX(0,1));assertEquals(new Double(4.0),dataset.getX(0,2));assertEquals(new Double(5.0),dataset.getX(0,3));assertEquals(new Double(6.0),dataset.getX(0,4));}"
"org.jfree.data.xy.junit.TableXYDatasetTests.testPrune",0,"/** * Tests to see that pruning removes unwanted x values.*/public void testPrune(){DefaultTableXYDataset dataset=new DefaultTableXYDataset();dataset.addSeries(createSeries1());dataset.addSeries(createSeries2());dataset.removeSeries(1);dataset.prune();assertEquals(4,dataset.getItemCount());}"
"org.jfree.data.xy.junit.TableXYDatasetTests.testAutoPrune",0,"/** * Tests the auto-pruning feature.*/public void testAutoPrune(){DefaultTableXYDataset dataset=new DefaultTableXYDataset(true);dataset.addSeries(createSeriesA());assertEquals(2,dataset.getItemCount());dataset.addSeries(createSeriesB());assertEquals(2,dataset.getItemCount());dataset.removeSeries(1);assertEquals(1,dataset.getItemCount());DefaultTableXYDataset dataset2=new DefaultTableXYDataset(true);dataset2.addSeries(createSeriesA());assertEquals(2,dataset2.getItemCount());dataset2.addSeries(createSeriesB());assertEquals(2,dataset2.getItemCount());dataset2.removeSeries(1);assertEquals(1,dataset2.getItemCount());}"
"org.jfree.chart.needle.junit.MeterNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){MeterNeedle n1=new LineNeedle();MeterNeedle n2=new LineNeedle();assertTrue(n1.equals(n2));n1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(n1.equals(n2));n2.setFillPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(n1.equals(n2));n1.setOutlinePaint(new GradientPaint(5.0f,6.0f,Color.red,7.0f,8.0f,Color.blue));assertFalse(n1.equals(n2));n2.setOutlinePaint(new GradientPaint(5.0f,6.0f,Color.red,7.0f,8.0f,Color.blue));assertTrue(n1.equals(n2));n1.setHighlightPaint(new GradientPaint(9.0f,0.0f,Color.red,1.0f,2.0f,Color.blue));assertFalse(n1.equals(n2));n2.setHighlightPaint(new GradientPaint(9.0f,0.0f,Color.red,1.0f,2.0f,Color.blue));assertTrue(n1.equals(n2));Stroke s=new BasicStroke(1.23f);n1.setOutlineStroke(s);assertFalse(n1.equals(n2));n2.setOutlineStroke(s);assertTrue(n1.equals(n2));n1.setRotateX(1.23);assertFalse(n1.equals(n2));n2.setRotateX(1.23);assertTrue(n1.equals(n2));n1.setRotateY(4.56);assertFalse(n1.equals(n2));n2.setRotateY(4.56);assertTrue(n1.equals(n2));n1.setSize(11);assertFalse(n1.equals(n2));n2.setSize(11);assertTrue(n1.equals(n2));}"
"org.jfree.chart.entity.junit.StandardEntityCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){StandardEntityCollection c1=new StandardEntityCollection();StandardEntityCollection c2=new StandardEntityCollection();assertTrue(c1.equals(c2));PieSectionEntity e1=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),0,1,""Key"",""ToolTip"",""URL"");c1.add(e1);assertFalse(c1.equals(c2));PieSectionEntity e2=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),0,1,""Key"",""ToolTip"",""URL"");c2.add(e2);assertTrue(c1.equals(c2));}"
"org.jfree.chart.entity.junit.StandardEntityCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PieSectionEntity e1=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),0,1,""Key"",""ToolTip"",""URL"");StandardEntityCollection c1=new StandardEntityCollection();c1.add(e1);StandardEntityCollection c2=null;try {c2=(StandardEntityCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));c1.clear();assertFalse(c1.equals(c2));c2.clear();assertTrue(c1.equals(c2));}"
"org.jfree.chart.entity.junit.StandardEntityCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PieSectionEntity e1=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),0,1,""Key"",""ToolTip"",""URL"");StandardEntityCollection c1=new StandardEntityCollection();c1.add(e1);StandardEntityCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(StandardEntityCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.chart.plot.dial.junit.DialBackgroundTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialBackground b1=new DialBackground();DialBackground b2=new DialBackground();assertTrue(b1.equals(b2));b1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(b1.equals(b2));b2.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(b1.equals(b2));b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));assertFalse(b1.equals(b2));b2.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));assertTrue(b1.equals(b2));b1.setVisible(false);assertFalse(b1.equals(b2));b2.setVisible(false);assertTrue(b1.equals(b2));}"
"org.jfree.chart.plot.dial.junit.DialBackgroundTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DialBackground b1=new DialBackground(Color.red);DialBackground b2=new DialBackground(Color.red);assertTrue(b1.equals(b2));int h1=b1.hashCode();int h2=b2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.DialBackgroundTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialBackground b1=new DialBackground();DialBackground b2=null;try {b2=(DialBackground)b1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));b1=new DialBackground();b1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));b2=null;try {b2=(DialBackground)b1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();b1.addChangeListener(l1);assertTrue(b1.hasListener(l1));assertFalse(b2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.DialBackgroundTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialBackground b1=new DialBackground();DialBackground b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(DialBackground)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(b1,b2);b1=new DialBackground();b1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));b1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(DialBackground)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(b1,b2);}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){XYBarRenderer r1=new XYBarRenderer();XYBarRenderer r2=new XYBarRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setBase(1.0);assertFalse(r1.equals(r2));r2.setBase(1.0);assertTrue(r1.equals(r2));r1.setUseYInterval(!r1.getUseYInterval());assertFalse(r1.equals(r2));r2.setUseYInterval(!r2.getUseYInterval());assertTrue(r1.equals(r2));r1.setMargin(0.10);assertFalse(r1.equals(r2));r2.setMargin(0.10);assertTrue(r1.equals(r2));r1.setDrawBarOutline(!r1.isDrawBarOutline());assertFalse(r1.equals(r2));r2.setDrawBarOutline(!r2.isDrawBarOutline());assertTrue(r1.equals(r2));r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_HORIZONTAL));assertFalse(r1.equals(r2));r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_HORIZONTAL));assertTrue(r1.equals(r2));r1.setLegendBar(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setLegendBar(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition());assertFalse(r1.equals(r2));r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition());assertTrue(r1.equals(r2));r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition());assertFalse(r1.equals(r2));r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYBarRenderer r1=new XYBarRenderer();XYBarRenderer r2=new XYBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYBarRenderer r1=new XYBarRenderer();Rectangle2D rect=new Rectangle2D.Double(1.0,2.0,3.0,4.0);r1.setLegendBar(rect);XYBarRenderer r2=null;try {r2=(XYBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));rect.setRect(4.0,3.0,2.0,1.0);assertFalse(r1.equals(r2));r2.setLegendBar(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYBarRenderer r1=new XYBarRenderer();XYBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYBarRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){XYBarRenderer r1=new XYBarRenderer();r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition());XYBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYBarRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testFindDomainBounds",0,"/** * Check that the renderer is calculating the domain bounds correctly.*/public void testFindDomainBounds(){XYSeriesCollection dataset=RendererXYPackageTests.createTestXYSeriesCollection();JFreeChart chart=ChartFactory.createXYBarChart(""Test Chart"",""X"",false,""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();NumberAxis domainAxis=(NumberAxis)plot.getDomainAxis();domainAxis.setAutoRangeIncludesZero(false);Range bounds=domainAxis.getRange();assertFalse(bounds.contains(0.3));assertTrue(bounds.contains(0.5));assertTrue(bounds.contains(2.5));assertFalse(bounds.contains(2.8));}"
"org.jfree.chart.renderer.xy.junit.XYBarRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);XYBarRenderer r=new XYBarRenderer();XYPlot plot=new XYPlot(new XYBarDataset(d1,1.0),new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,new XYBarDataset(d2,2.0));new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.axis.junit.CategoryLabelPositionsTests.testEquals",0,"/** * Check that the equals method distinguishes all fields.*/public void testEquals(){CategoryLabelPositions p1=new CategoryLabelPositions(new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));CategoryLabelPositions p2=new CategoryLabelPositions(new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertEquals(p1,p2);p1=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(!p1.equals(p2));p2=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(p1.equals(p2));p1=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(!p1.equals(p2));p2=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(p1.equals(p2));p1=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(!p1.equals(p2));p2=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(p1.equals(p2));p1=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER));assertTrue(!p1.equals(p2));p2=new CategoryLabelPositions(new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER),new CategoryLabelPosition(RA_BOTTOM,TextBlockAnchor.TOP_CENTER));assertTrue(p1.equals(p2));}"
"org.jfree.chart.axis.junit.CategoryLabelPositionsTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CategoryLabelPositions p1=new CategoryLabelPositions(new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));CategoryLabelPositions p2=new CategoryLabelPositions(new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER),new CategoryLabelPosition(RA_TOP,TextBlockAnchor.CENTER));assertTrue(p1.equals(p2));int h1=p1.hashCode();int h2=p2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CategoryLabelPositionsTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryLabelPositions p1=CategoryLabelPositions.STANDARD;CategoryLabelPositions p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(CategoryLabelPositions)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.junit.MeterChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a single range.  At one point,this caused a null pointer exception (fixed now).*/public void testDrawWithNullInfo(){boolean success=false;MeterPlot plot=new MeterPlot(new DefaultValueDataset(60.0));plot.addInterval(new MeterInterval(""Normal"",new Range(0.0,80.0)));JFreeChart chart=new JFreeChart(plot);try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYShapeAnnotation a1=new XYShapeAnnotation(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(1.2f),Color.red,Color.blue);XYShapeAnnotation a2=new XYShapeAnnotation(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(1.2f),Color.red,Color.blue);assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(1.2f),Color.red,Color.blue);assertFalse(a1.equals(a2));a2=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(1.2f),Color.red,Color.blue);assertTrue(a1.equals(a2));a1=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.3f),Color.red,Color.blue);assertFalse(a1.equals(a2));a2=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.3f),Color.red,Color.blue);assertTrue(a1.equals(a2));GradientPaint gp1a=new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red);GradientPaint gp1b=new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red);GradientPaint gp2a=new GradientPaint(5.0f,6.0f,Color.pink,7.0f,8.0f,Color.white);GradientPaint gp2b=new GradientPaint(5.0f,6.0f,Color.pink,7.0f,8.0f,Color.white);a1=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.3f),gp1a,Color.blue);assertFalse(a1.equals(a2));a2=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.3f),gp1b,Color.blue);assertTrue(a1.equals(a2));a1=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.3f),gp1a,gp2a);assertFalse(a1.equals(a2));a2=new XYShapeAnnotation(new Rectangle2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.3f),gp1b,gp2b);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){XYShapeAnnotation a1=new XYShapeAnnotation(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(1.2f),Color.red,Color.blue);XYShapeAnnotation a2=new XYShapeAnnotation(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(1.2f),Color.red,Color.blue);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYShapeAnnotation a1=new XYShapeAnnotation(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(1.2f),Color.red,Color.blue);XYShapeAnnotation a2=null;try {a2=(XYShapeAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYShapeAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYShapeAnnotation a1=new XYShapeAnnotation(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(1.2f),Color.red,Color.blue);XYShapeAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYShapeAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.junit.XYStepAreaChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.XYStepAreaChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.XYStepAreaChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.data.xy.junit.XYBarDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultXYDataset d1=new DefaultXYDataset();double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[][]data1=new double[][]{x1,y1};d1.addSeries(""S1"",data1);DefaultXYDataset d2=new DefaultXYDataset();double[]x2=new double[]{1.0,2.0,3.0};double[]y2=new double[]{4.0,5.0,6.0};double[][]data2=new double[][]{x2,y2};d2.addSeries(""S1"",data2);XYBarDataset bd1=new XYBarDataset(d1,5.0);XYBarDataset bd2=new XYBarDataset(d2,5.0);assertTrue(bd1.equals(bd2));assertTrue(bd2.equals(bd1));}"
"org.jfree.data.xy.junit.XYBarDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultXYDataset d1=new DefaultXYDataset();double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[][]data1=new double[][]{x1,y1};d1.addSeries(""S1"",data1);XYBarDataset bd1=new XYBarDataset(d1,5.0);XYBarDataset bd2=null;try {bd2=(XYBarDataset)bd1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(bd1 != bd2);assertTrue(bd1.getClass()== bd2.getClass());assertTrue(bd1.equals(bd2));d1=(DefaultXYDataset)bd1.getUnderlyingDataset();d1.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertFalse(bd1.equals(bd2));DefaultXYDataset d2=(DefaultXYDataset)bd2.getUnderlyingDataset();d2.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertTrue(bd1.equals(bd2));}"
"org.jfree.data.xy.junit.XYBarDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultXYDataset d1=new DefaultXYDataset();double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[][]data1=new double[][]{x1,y1};d1.addSeries(""S1"",data1);XYBarDataset bd1=new XYBarDataset(d1,5.0);XYBarDataset bd2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(bd1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));bd2=(XYBarDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(bd1,bd2);}"
"org.jfree.data.xy.junit.YIntervalTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){YInterval i1=new YInterval(1.0,0.5,1.5);YInterval i2=new YInterval(1.0,0.5,1.5);assertEquals(i1,i2);i1=new YInterval(1.1,0.5,1.5);assertFalse(i1.equals(i2));i2=new YInterval(1.1,0.5,1.5);assertTrue(i1.equals(i2));i1=new YInterval(1.1,0.55,1.5);assertFalse(i1.equals(i2));i2=new YInterval(1.1,0.55,1.5);assertTrue(i1.equals(i2));i1=new YInterval(1.1,0.55,1.55);assertFalse(i1.equals(i2));i2=new YInterval(1.1,0.55,1.55);assertTrue(i1.equals(i2));}"
"org.jfree.data.xy.junit.YIntervalTests.testCloning",0,"/** * This class is immutable.*/public void testCloning(){YInterval i1=new YInterval(1.0,0.5,1.5);assertFalse(i1 instanceof Cloneable);}"
"org.jfree.data.xy.junit.YIntervalTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){YInterval i1=new YInterval(1.0,0.5,1.5);YInterval i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(YInterval)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.data.xy.junit.IntervalXYDelegateTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYSeries s1=new XYSeries(""Series"");s1.add(1.2,3.4);XYSeriesCollection c1=new XYSeriesCollection();c1.addSeries(s1);IntervalXYDelegate d1=new IntervalXYDelegate(c1);XYSeries s2=new XYSeries(""Series"");XYSeriesCollection c2=new XYSeriesCollection();s2.add(1.2,3.4);c2.addSeries(s2);IntervalXYDelegate d2=new IntervalXYDelegate(c2);assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1.setAutoWidth(false);assertFalse(d1.equals(d2));d2.setAutoWidth(false);assertTrue(d1.equals(d2));d1.setIntervalPositionFactor(0.123);assertFalse(d1.equals(d2));d2.setIntervalPositionFactor(0.123);assertTrue(d1.equals(d2));d1.setFixedIntervalWidth(1.23);assertFalse(d1.equals(d2));d2.setFixedIntervalWidth(1.23);assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.IntervalXYDelegateTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYSeries s1=new XYSeries(""Series"");s1.add(1.2,3.4);XYSeriesCollection c1=new XYSeriesCollection();c1.addSeries(s1);IntervalXYDelegate d1=new IntervalXYDelegate(c1);IntervalXYDelegate d2=null;try {d2=(IntervalXYDelegate)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.IntervalXYDelegateTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYSeries s1=new XYSeries(""Series"");s1.add(1.2,3.4);XYSeriesCollection c1=new XYSeriesCollection();c1.addSeries(s1);IntervalXYDelegate d1=new IntervalXYDelegate(c1);IntervalXYDelegate d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(IntervalXYDelegate)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultKeyedValuesDataset d1=new DefaultKeyedValuesDataset();d1.setValue(""V1"",new Integer(1));d1.setValue(""V2"",null);d1.setValue(""V3"",new Integer(3));DefaultKeyedValuesDataset d2=null;try {d2=(DefaultKeyedValuesDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultKeyedValuesDataset d1=new DefaultKeyedValuesDataset();d1.setValue(""C1"",new Double(234.2));d1.setValue(""C2"",null);d1.setValue(""C3"",new Double(345.9));d1.setValue(""C4"",new Double(452.7));KeyedValuesDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(KeyedValuesDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.chart.plot.junit.ThermometerPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){ThermometerPlot p1=new ThermometerPlot();ThermometerPlot p2=new ThermometerPlot();assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1.setPadding(new RectangleInsets(1.0,2.0,3.0,4.0));assertFalse(p1.equals(p2));p2.setPadding(new RectangleInsets(1.0,2.0,3.0,4.0));assertTrue(p2.equals(p1));BasicStroke s=new BasicStroke(1.23f);p1.setThermometerStroke(s);assertFalse(p1.equals(p2));p2.setThermometerStroke(s);assertTrue(p2.equals(p1));p1.setThermometerPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(p1.equals(p2));p2.setThermometerPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(p2.equals(p1));p1.setUnits(ThermometerPlot.UNITS_KELVIN);assertFalse(p1.equals(p2));p2.setUnits(ThermometerPlot.UNITS_KELVIN);assertTrue(p2.equals(p1));p1.setValueLocation(ThermometerPlot.LEFT);assertFalse(p1.equals(p2));p2.setValueLocation(ThermometerPlot.LEFT);assertTrue(p2.equals(p1));p1.setAxisLocation(ThermometerPlot.RIGHT);assertFalse(p1.equals(p2));p2.setAxisLocation(ThermometerPlot.RIGHT);assertTrue(p2.equals(p1));p1.setValueFont(new Font(""Serif"",Font.PLAIN,9));assertFalse(p1.equals(p2));p2.setValueFont(new Font(""Serif"",Font.PLAIN,9));assertTrue(p2.equals(p1));p1.setValuePaint(new GradientPaint(4.0f,5.0f,Color.red,6.0f,7.0f,Color.white));assertFalse(p1.equals(p2));p2.setValuePaint(new GradientPaint(4.0f,5.0f,Color.red,6.0f,7.0f,Color.white));assertTrue(p2.equals(p1));p1.setValueFormat(new DecimalFormat(""0.0000""));assertFalse(p1.equals(p2));p2.setValueFormat(new DecimalFormat(""0.0000""));assertTrue(p2.equals(p1));p1.setMercuryPaint(new GradientPaint(9.0f,8.0f,Color.red,7.0f,6.0f,Color.blue));assertFalse(p1.equals(p2));p2.setMercuryPaint(new GradientPaint(9.0f,8.0f,Color.red,7.0f,6.0f,Color.blue));assertTrue(p2.equals(p1));p1.setSubrange(1,1.0,2.0);assertFalse(p1.equals(p2));p2.setSubrange(1,1.0,2.0);assertTrue(p2.equals(p1));p1.setSubrangePaint(1,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(p1.equals(p2));p2.setSubrangePaint(1,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(p2.equals(p1));p1.setBulbRadius(9);assertFalse(p1.equals(p2));p2.setBulbRadius(9);assertTrue(p2.equals(p1));p1.setColumnRadius(8);assertFalse(p1.equals(p2));p2.setColumnRadius(8);assertTrue(p2.equals(p1));p1.setGap(7);assertFalse(p1.equals(p2));p2.setGap(7);assertTrue(p2.equals(p1));}"
"org.jfree.chart.plot.junit.ThermometerPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ThermometerPlot p1=new ThermometerPlot();ThermometerPlot p2=null;try {p2=(ThermometerPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.ThermometerPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ThermometerPlot p1=new ThermometerPlot();ThermometerPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(ThermometerPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.ThermometerPlotTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){ThermometerPlot p1=new ThermometerPlot();p1.setSubrangePaint(1,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));ThermometerPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(ThermometerPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(p1.equals(p2));}"
"org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.testGenerateURL",0,"/** * A basic check for the generateURL()method.*/public void testGenerateURL(){TimeSeriesURLGenerator g=new TimeSeriesURLGenerator();DefaultXYDataset dataset=new DefaultXYDataset();dataset.addSeries(""Series '1'"",new double[][]{{1.0,2.0},{3.0,4.0}});String s=g.generateURL(dataset,0,0);assertTrue(s.startsWith(""index.html?series=Series+%271%27&amp;item=""));}"
"org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){TimeSeriesURLGenerator g1=new TimeSeriesURLGenerator();TimeSeriesURLGenerator g2=new TimeSeriesURLGenerator();assertTrue(g1.equals(g2));g1=new TimeSeriesURLGenerator(new SimpleDateFormat(""yyyy""),""prefix"",""series"",""item"");assertFalse(g1.equals(g2));g2=new TimeSeriesURLGenerator(new SimpleDateFormat(""yyyy""),""prefix"",""series"",""item"");assertTrue(g1.equals(g2));g1=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix"",""series"",""item"");assertFalse(g1.equals(g2));g2=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix"",""series"",""item"");assertTrue(g1.equals(g2));g1=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix1"",""series"",""item"");assertFalse(g1.equals(g2));g2=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix1"",""series"",""item"");assertTrue(g1.equals(g2));g1=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix1"",""series1"",""item"");assertFalse(g1.equals(g2));g2=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix1"",""series1"",""item"");assertTrue(g1.equals(g2));g1=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix1"",""series1"",""item1"");assertFalse(g1.equals(g2));g2=new TimeSeriesURLGenerator(new SimpleDateFormat(""yy""),""prefix1"",""series1"",""item1"");assertTrue(g1.equals(g2));}"
"org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimeSeriesURLGenerator g1=new TimeSeriesURLGenerator();TimeSeriesURLGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(TimeSeriesURLGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.junit.XYLineChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.XYLineChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.XYLineChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){BasicStroke s1=new BasicStroke(1.0f);BasicStroke s2=new BasicStroke(2.0f);CategoryLineAnnotation a1=new CategoryLineAnnotation(""Category 1"",1.0,""Category 2"",2.0,Color.red,s1);CategoryLineAnnotation a2=new CategoryLineAnnotation(""Category 1"",1.0,""Category 2"",2.0,Color.red,s1);assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1.setCategory1(""Category A"");assertFalse(a1.equals(a2));a2.setCategory1(""Category A"");assertTrue(a1.equals(a2));a1.setValue1(0.15);assertFalse(a1.equals(a2));a2.setValue1(0.15);assertTrue(a1.equals(a2));a1.setCategory2(""Category B"");assertFalse(a1.equals(a2));a2.setCategory2(""Category B"");assertTrue(a1.equals(a2));a1.setValue2(0.25);assertFalse(a1.equals(a2));a2.setValue2(0.25);assertTrue(a1.equals(a2));a1.setPaint(Color.yellow);assertFalse(a1.equals(a2));a2.setPaint(Color.yellow);assertTrue(a1.equals(a2));a1.setStroke(s2);assertFalse(a1.equals(a2));a2.setStroke(s2);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){CategoryLineAnnotation a1=new CategoryLineAnnotation(""Category 1"",1.0,""Category 2"",2.0,Color.red,new BasicStroke(1.0f));CategoryLineAnnotation a2=new CategoryLineAnnotation(""Category 1"",1.0,""Category 2"",2.0,Color.red,new BasicStroke(1.0f));assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryLineAnnotation a1=new CategoryLineAnnotation(""Category 1"",1.0,""Category 2"",2.0,Color.red,new BasicStroke(1.0f));CategoryLineAnnotation a2=null;try {a2=(CategoryLineAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.CategoryLineAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryLineAnnotation a1=new CategoryLineAnnotation(""Category 1"",1.0,""Category 2"",2.0,Color.red,new BasicStroke(1.0f));CategoryLineAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CategoryLineAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.CategoryAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){CategoryAxis a1=new CategoryAxis(""Test"");CategoryAxis a2=new CategoryAxis(""Test"");assertTrue(a1.equals(a2));a1.setLowerMargin(0.15);assertFalse(a1.equals(a2));a2.setLowerMargin(0.15);assertTrue(a1.equals(a2));a1.setUpperMargin(0.15);assertFalse(a1.equals(a2));a2.setUpperMargin(0.15);assertTrue(a1.equals(a2));a1.setCategoryMargin(0.15);assertFalse(a1.equals(a2));a2.setCategoryMargin(0.15);assertTrue(a1.equals(a2));a1.setMaximumCategoryLabelWidthRatio(0.98f);assertFalse(a1.equals(a2));a2.setMaximumCategoryLabelWidthRatio(0.98f);assertTrue(a1.equals(a2));a1.setCategoryLabelPositionOffset(11);assertFalse(a1.equals(a2));a2.setCategoryLabelPositionOffset(11);assertTrue(a1.equals(a2));a1.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);assertFalse(a1.equals(a2));a2.setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);assertTrue(a1.equals(a2));a1.addCategoryLabelToolTip(""Test"",""Check"");assertFalse(a1.equals(a2));a2.addCategoryLabelToolTip(""Test"",""Check"");assertTrue(a1.equals(a2));a1.setTickLabelFont(""C1"",new Font(""Dialog"",Font.PLAIN,21));assertFalse(a1.equals(a2));a2.setTickLabelFont(""C1"",new Font(""Dialog"",Font.PLAIN,21));assertTrue(a1.equals(a2));a1.setTickLabelPaint(""C1"",Color.red);assertFalse(a1.equals(a2));a2.setTickLabelPaint(""C1"",Color.red);assertTrue(a1.equals(a2));a1.setTickLabelPaint(""C1"",new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(a1.equals(a2));a2.setTickLabelPaint(""C1"",new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.CategoryAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CategoryAxis a1=new CategoryAxis(""Test"");CategoryAxis a2=new CategoryAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CategoryAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryAxis a1=new CategoryAxis(""Test"");CategoryAxis a2=null;try {a2=(CategoryAxis)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.CategoryAxisTests.testCloning2",0,"/** * Confirm that cloning works.  This test customises the font and paint per category label.*/public void testCloning2(){CategoryAxis a1=new CategoryAxis(""Test"");a1.setTickLabelFont(""C1"",new Font(""Dialog"",Font.PLAIN,15));a1.setTickLabelPaint(""C1"",new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));CategoryAxis a2=null;try {a2=(CategoryAxis)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));a1.setTickLabelFont(""C1"",null);assertFalse(a1.equals(a2));a2.setTickLabelFont(""C1"",null);assertTrue(a1.equals(a2));a1.setTickLabelPaint(""C1"",Color.yellow);assertFalse(a1.equals(a2));a2.setTickLabelPaint(""C1"",Color.yellow);assertTrue(a1.equals(a2));a1.addCategoryLabelToolTip(""C1"",""XYZ"");assertFalse(a1.equals(a2));a2.addCategoryLabelToolTip(""C1"",""XYZ"");assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.CategoryAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryAxis a1=new CategoryAxis(""Test Axis"");a1.setTickLabelPaint(""C1"",new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));CategoryAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CategoryAxis)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.CategoryAnchorTests.testEquals",0,"/** * Check that the equals()method distinguishes known instances.*/public void testEquals(){assertEquals(CategoryAnchor.START,CategoryAnchor.START);assertEquals(CategoryAnchor.MIDDLE,CategoryAnchor.MIDDLE);assertEquals(CategoryAnchor.END,CategoryAnchor.END);assertFalse(CategoryAnchor.START.equals(CategoryAnchor.END));assertFalse(CategoryAnchor.MIDDLE.equals(CategoryAnchor.END));}"
"org.jfree.chart.axis.junit.CategoryAnchorTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CategoryAnchor a1=CategoryAnchor.START;CategoryAnchor a2=CategoryAnchor.START;assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CategoryAnchorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryAnchor a1=CategoryAnchor.MIDDLE;CategoryAnchor a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CategoryAnchor)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);assertTrue(a1 == a2);}"
"org.jfree.chart.axis.junit.CategoryLabelPositionTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){CategoryLabelPosition p1=new CategoryLabelPosition(RectangleAnchor.BOTTOM_LEFT,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);CategoryLabelPosition p2=new CategoryLabelPosition(RectangleAnchor.BOTTOM_LEFT,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertFalse(p1.equals(p2));p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER_RIGHT,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertTrue(p1.equals(p2));p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertFalse(p1.equals(p2));p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.BASELINE_LEFT,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertTrue(p1.equals(p2));p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertFalse(p1.equals(p2));p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 4.0,CategoryLabelWidthType.RANGE,0.44f);assertTrue(p1.equals(p2));p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.RANGE,0.44f);assertFalse(p1.equals(p2));p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.RANGE,0.44f);assertTrue(p1.equals(p2));p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.44f);assertFalse(p1.equals(p2));p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.44f);assertTrue(p1.equals(p2));p1=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.55f);assertFalse(p1.equals(p2));p2=new CategoryLabelPosition(RectangleAnchor.TOP,TextBlockAnchor.CENTER,TextAnchor.CENTER,Math.PI / 6.0,CategoryLabelWidthType.CATEGORY,0.55f);assertTrue(p1.equals(p2));}"
"org.jfree.chart.axis.junit.CategoryLabelPositionTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CategoryLabelPosition a1=new CategoryLabelPosition();CategoryLabelPosition a2=new CategoryLabelPosition();assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CategoryLabelPositionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryLabelPosition p1=new CategoryLabelPosition();CategoryLabelPosition p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(CategoryLabelPosition)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.data.statistics.junit.SimpleHistogramBinTests.testAccepts",0,"/** * Some checks for the accepts()method.*/public void testAccepts(){SimpleHistogramBin bin1=new SimpleHistogramBin(1.0,2.0);assertFalse(bin1.accepts(0.0));assertTrue(bin1.accepts(1.0));assertTrue(bin1.accepts(1.5));assertTrue(bin1.accepts(2.0));assertFalse(bin1.accepts(2.1));assertFalse(bin1.accepts(Double.NaN));SimpleHistogramBin bin2=new SimpleHistogramBin(1.0,2.0,false,false);assertFalse(bin2.accepts(0.0));assertFalse(bin2.accepts(1.0));assertTrue(bin2.accepts(1.5));assertFalse(bin2.accepts(2.0));assertFalse(bin2.accepts(2.1));assertFalse(bin2.accepts(Double.NaN));}"
"org.jfree.data.statistics.junit.SimpleHistogramBinTests.testOverlapsWidth",0,"/** * Some checks for the overlapsWith()method.*/public void testOverlapsWidth(){SimpleHistogramBin b1=new SimpleHistogramBin(1.0,2.0);SimpleHistogramBin b2=new SimpleHistogramBin(2.0,3.0);SimpleHistogramBin b3=new SimpleHistogramBin(3.0,4.0);SimpleHistogramBin b4=new SimpleHistogramBin(0.0,5.0);SimpleHistogramBin b5=new SimpleHistogramBin(2.0,3.0,false,true);SimpleHistogramBin b6=new SimpleHistogramBin(2.0,3.0,true,false);assertTrue(b1.overlapsWith(b2));assertTrue(b2.overlapsWith(b1));assertFalse(b1.overlapsWith(b3));assertFalse(b3.overlapsWith(b1));assertTrue(b1.overlapsWith(b4));assertTrue(b4.overlapsWith(b1));assertFalse(b1.overlapsWith(b5));assertFalse(b5.overlapsWith(b1));assertTrue(b1.overlapsWith(b6));assertTrue(b6.overlapsWith(b1));}"
"org.jfree.data.statistics.junit.SimpleHistogramBinTests.testEquals",0,"/** * Ensure that the equals()method can distinguish all fields.*/public void testEquals(){SimpleHistogramBin b1=new SimpleHistogramBin(1.0,2.0);SimpleHistogramBin b2=new SimpleHistogramBin(1.0,2.0);assertTrue(b1.equals(b2));assertTrue(b2.equals(b1));b1=new SimpleHistogramBin(1.1,2.0,true,true);assertFalse(b1.equals(b2));b2=new SimpleHistogramBin(1.1,2.0,true,true);assertTrue(b1.equals(b2));b1=new SimpleHistogramBin(1.1,2.2,true,true);assertFalse(b1.equals(b2));b2=new SimpleHistogramBin(1.1,2.2,true,true);assertTrue(b1.equals(b2));b1=new SimpleHistogramBin(1.1,2.2,false,true);assertFalse(b1.equals(b2));b2=new SimpleHistogramBin(1.1,2.2,false,true);assertTrue(b1.equals(b2));b1=new SimpleHistogramBin(1.1,2.2,false,false);assertFalse(b1.equals(b2));b2=new SimpleHistogramBin(1.1,2.2,false,false);assertTrue(b1.equals(b2));b1.setItemCount(99);assertFalse(b1.equals(b2));b2.setItemCount(99);assertTrue(b1.equals(b2));}"
"org.jfree.data.statistics.junit.SimpleHistogramBinTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){SimpleHistogramBin b1=new SimpleHistogramBin(1.1,2.2,false,true);b1.setItemCount(99);SimpleHistogramBin b2=null;try {b2=(SimpleHistogramBin)b1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));b2.setItemCount(111);assertFalse(b1.equals(b2));}"
"org.jfree.data.statistics.junit.SimpleHistogramBinTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){SimpleHistogramBin b1=new SimpleHistogramBin(1.0,2.0,false,true);b1.setItemCount(123);SimpleHistogramBin b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(SimpleHistogramBin)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(b1,b2);}"
"org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.testEquals",0,"/** * A series of tests for the equals()method.*/public void testEquals(){MultipleXYSeriesLabelGenerator g1=new MultipleXYSeriesLabelGenerator();MultipleXYSeriesLabelGenerator g2=new MultipleXYSeriesLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new MultipleXYSeriesLabelGenerator(""Series {0}"");assertFalse(g1.equals(g2));g2=new MultipleXYSeriesLabelGenerator(""Series {0}"");assertTrue(g1.equals(g2));g1.addSeriesLabel(1,""Additional 1"");assertFalse(g1.equals(g2));g2.addSeriesLabel(1,""Additional 1"");assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){MultipleXYSeriesLabelGenerator g1=new MultipleXYSeriesLabelGenerator();MultipleXYSeriesLabelGenerator g2=null;try {g2=(MultipleXYSeriesLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));g1.addSeriesLabel(3,""Add3"");assertFalse(g1.equals(g2));g2.addSeriesLabel(3,""Add3"");assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MultipleXYSeriesLabelGenerator g1=new MultipleXYSeriesLabelGenerator();g1.addSeriesLabel(0,""Add0"");g1.addSeriesLabel(0,""Add0b"");g1.addSeriesLabel(1,""Add1"");MultipleXYSeriesLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(MultipleXYSeriesLabelGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();StandardPieSectionLabelGenerator g2=new StandardPieSectionLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardPieSectionLabelGenerator(""{0}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertFalse(g1.equals(g2));g2=new StandardPieSectionLabelGenerator(""{0}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertTrue(g1.equals(g2));g1=new StandardPieSectionLabelGenerator(""{0}{1}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertFalse(g1.equals(g2));g2=new StandardPieSectionLabelGenerator(""{0}{1}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertTrue(g1.equals(g2));g1=new StandardPieSectionLabelGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),NumberFormat.getPercentInstance());assertFalse(g1.equals(g2));g2=new StandardPieSectionLabelGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),NumberFormat.getPercentInstance());assertTrue(g1.equals(g2));g1=new StandardPieSectionLabelGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),new DecimalFormat(""0.000%""));assertFalse(g1.equals(g2));g2=new StandardPieSectionLabelGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),new DecimalFormat(""0.000%""));assertTrue(g1.equals(g2));AttributedString as=new AttributedString(""XYZ"");g1.setAttributedLabel(0,as);assertFalse(g1.equals(g2));g2.setAttributedLabel(0,as);assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();StandardPieSectionLabelGenerator g2=null;try {g2=(StandardPieSectionLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardPieSectionLabelGenerator g1=new StandardPieSectionLabelGenerator();StandardPieSectionLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardPieSectionLabelGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.axis.junit.NumberTickUnitTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){NumberTickUnit t1=new NumberTickUnit(1.23,new DecimalFormat(""0.00""));NumberTickUnit t2=new NumberTickUnit(1.23,new DecimalFormat(""0.00""));assertTrue(t1.equals(t2));assertTrue(t2.equals(t1));t1=new NumberTickUnit(3.21,new DecimalFormat(""0.00""));assertFalse(t1.equals(t2));t2=new NumberTickUnit(3.21,new DecimalFormat(""0.00""));assertTrue(t1.equals(t2));t1=new NumberTickUnit(3.21,new DecimalFormat(""0.000""));assertFalse(t1.equals(t2));t2=new NumberTickUnit(3.21,new DecimalFormat(""0.000""));assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.NumberTickUnitTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){NumberTickUnit t1=new NumberTickUnit(1.23,new DecimalFormat(""0.00""));NumberTickUnit t2=new NumberTickUnit(1.23,new DecimalFormat(""0.00""));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.NumberTickUnitTests.testCloning",0,"/** * This is an immutable class so it doesn't need to be cloneable.*/public void testCloning(){NumberTickUnit t1=new NumberTickUnit(1.23,new DecimalFormat(""0.00""));assertFalse(t1 instanceof Cloneable);}"
"org.jfree.chart.axis.junit.NumberTickUnitTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){NumberTickUnit t1=new NumberTickUnit(1.23,new DecimalFormat(""0.00""));NumberTickUnit t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(NumberTickUnit)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(t1,t2);}"
"org.jfree.data.time.junit.WeekTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Week w1=new Week(1,2002);Week w2=new Week(1,2002);assertTrue(w1.equals(w2));assertTrue(w2.equals(w1));w1=new Week(2,2002);assertFalse(w1.equals(w2));w2=new Week(2,2002);assertTrue(w1.equals(w2));w1=new Week(2,2003);assertFalse(w1.equals(w2));w2=new Week(2,2003);assertTrue(w1.equals(w2));}"
"org.jfree.data.time.junit.WeekTests.testW1Y1900Previous",0,"/** * Request the week before week 1,1900: it should be <code>null</code>.*/public void testW1Y1900Previous(){Week previous=(Week)this.w1Y1900.previous();assertNull(previous);}"
"org.jfree.data.time.junit.WeekTests.testW1Y1900Next",0,"/** * Request the week after week 1,1900: it should be week 2,1900.*/public void testW1Y1900Next(){Week next=(Week)this.w1Y1900.next();assertEquals(this.w2Y1900,next);}"
"org.jfree.data.time.junit.WeekTests.testW52Y9999Previous",0,"/** * Request the week before w52,9999: it should be week 51,9999.*/public void testW52Y9999Previous(){Week previous=(Week)this.w52Y9999.previous();assertEquals(this.w51Y9999,previous);}"
"org.jfree.data.time.junit.WeekTests.testW52Y9999Next",0,"/** * Request the week after w52,9999: it should be <code>null</code>.*/public void testW52Y9999Next(){Week next=(Week)this.w52Y9999.next();assertNull(next);}"
"org.jfree.data.time.junit.WeekTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Week w1=new Week(24,1999);Week w2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(w1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));w2=(Week)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(w1,w2);}"
"org.jfree.data.time.junit.WeekTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Week w1=new Week(2,2003);Week w2=new Week(2,2003);assertTrue(w1.equals(w2));int h1=w1.hashCode();int h2=w2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.WeekTests.testNotCloneable",0,"/** * The  {@link Week}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Week w=new Week(1,1999);assertFalse(w instanceof Cloneable);}"
"org.jfree.data.time.junit.WeekTests.testWeek12005",0,"/** * The first week in 2005 should span the range: TimeZone         | Start Millis  | End Millis    | Start Date  | End Date -----------------+---------------+---------------+-------------+------------ Europe/London    | 1104710400000 | 1105315199999 |  3-Jan-2005 | 9-Jan-2005 Europe/Paris     | 1104706800000 | 1105311599999 |  3-Jan-2005 | 2-Jan-2005 America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005 In London and Paris,Monday is the first day of the week,while in the  US it is Sunday. Previously,we were using these values,but see Java Bug ID 4960215: TimeZone         | Start Millis  | End Millis    | Start Date  | End Date -----------------+---------------+---------------+-------------+------------ Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 2-Jan-2005 Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 2-Jan-2005 America/New_York | 1104037200000 | 1104641999999 | 26-Dec-2004 | 1-Jan-2005*/public void testWeek12005(){Week w1=new Week(1,2005);Calendar c1=Calendar.getInstance(TimeZone.getTimeZone(""Europe/London""),Locale.UK);c1.setMinimalDaysInFirstWeek(4);assertEquals(1104710400000L,w1.getFirstMillisecond(c1));assertEquals(1105315199999L,w1.getLastMillisecond(c1));Calendar c2=Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""),Locale.FRANCE);c2.setMinimalDaysInFirstWeek(4);assertEquals(1104706800000L,w1.getFirstMillisecond(c2));assertEquals(1105311599999L,w1.getLastMillisecond(c2));Calendar c3=Calendar.getInstance(TimeZone.getTimeZone(""America/New_York""),Locale.US);assertEquals(1104037200000L,w1.getFirstMillisecond(c3));assertEquals(1104641999999L,w1.getLastMillisecond(c3));}"
"org.jfree.data.time.junit.WeekTests.testWeek532005",0,"/** * The 53rd week in 2004 in London and Paris should span the range: TimeZone         | Start Millis  | End Millis    | Start Date  | End Date -----------------+---------------+---------------+-------------+------------ Europe/London    | 1104105600000 | 1104710399999 | 27-Dec-2004 | 02-Jan-2005 Europe/Paris     | 1104102000000 | 1104706799999 | 27-Dec-2004 | 02-Jan-2005 The 53rd week in 2005 in New York should span the range: TimeZone         | Start Millis  | End Millis    | Start Date  | End Date -----------------+---------------+---------------+-------------+------------ America/New_York | 1135486800000 | 1136091599999 | 25-Dec-2005 | 31-Dec-2005 In London and Paris,Monday is the first day of the week,while in the  US it is Sunday.*/public void testWeek532005(){Week w1=new Week(53,2004);Calendar c1=Calendar.getInstance(TimeZone.getTimeZone(""Europe/London""),Locale.UK);c1.setMinimalDaysInFirstWeek(4);assertEquals(1104105600000L,w1.getFirstMillisecond(c1));assertEquals(1104710399999L,w1.getLastMillisecond(c1));Calendar c2=Calendar.getInstance(TimeZone.getTimeZone(""Europe/Paris""),Locale.FRANCE);c2.setMinimalDaysInFirstWeek(4);assertEquals(1104102000000L,w1.getFirstMillisecond(c2));assertEquals(1104706799999L,w1.getLastMillisecond(c2));w1=new Week(53,2005);Calendar c3=Calendar.getInstance(TimeZone.getTimeZone(""America/New_York""),Locale.US);assertEquals(1135486800000L,w1.getFirstMillisecond(c3));assertEquals(1136091599999L,w1.getLastMillisecond(c3));}"
"org.jfree.data.time.junit.WeekTests.testBug1448828",0,"/** * A test case for bug 1448828.*/public void testBug1448828(){}"
"org.jfree.data.time.junit.WeekTests.testBug1498805",0,"/** * A test case for bug 1498805.*/public void testBug1498805(){}"
"org.jfree.data.time.junit.WeekTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Week w=new Week(3,1970);assertEquals(946800000L,w.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.WeekTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){}"
"org.jfree.data.time.junit.WeekTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Week w=new Week(1,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(978307200000L,w.getFirstMillisecond(calendar));boolean pass=false;try {w.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.WeekTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Week w=new Week(31,1970);assertEquals(18485999999L,w.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.WeekTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){}"
"org.jfree.data.time.junit.WeekTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Week w=new Week(52,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(1009756799999L,w.getLastMillisecond(calendar));boolean pass=false;try {w.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.WeekTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Week w=new Week(1,2000);assertEquals(106001L,w.getSerialIndex());w=new Week(1,1900);assertEquals(100701L,w.getSerialIndex());}"
"org.jfree.data.time.junit.WeekTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Week w=new Week(12,2000);w=(Week)w.next();assertEquals(new Year(2000),w.getYear());assertEquals(13,w.getWeek());w=new Week(53,9999);assertNull(w.next());}"
"org.jfree.data.time.junit.WeekTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,0,0,0);cal.set(Calendar.MILLISECOND,0);Week w=new Week(3,2006);assertEquals(cal.getTime(),w.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.WeekTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,8,23,59,59);cal.set(Calendar.MILLISECOND,999);Week w=new Week(1,2006);assertEquals(cal.getTime(),w.getEnd());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.WeekTests.testConstructor",0,"/** * A test for a problem in constructing a new Week instance.*/public void testConstructor(){}"
"org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultKeyedValueDataset d1=new DefaultKeyedValueDataset(""Test"",new Double(45.5));DefaultKeyedValueDataset d2=new DefaultKeyedValueDataset(""Test"",new Double(45.5));assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1=new DefaultKeyedValueDataset(""Test 1"",new Double(45.5));d2=new DefaultKeyedValueDataset(""Test 2"",new Double(45.5));assertFalse(d1.equals(d2));d1=new DefaultKeyedValueDataset(""Test"",new Double(45.5));d2=new DefaultKeyedValueDataset(""Test"",new Double(45.6));assertFalse(d1.equals(d2));}"
"org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultKeyedValueDataset d1=new DefaultKeyedValueDataset(""Test"",new Double(45.5));DefaultKeyedValueDataset d2=null;try {d2=(DefaultKeyedValueDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testCloneIndependence",0,"/** * Confirm that the clone is independent of the original.*/public void testCloneIndependence(){DefaultKeyedValueDataset d1=new DefaultKeyedValueDataset(""Key"",new Double(10.0));DefaultKeyedValueDataset d2=null;try {d2=(DefaultKeyedValueDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1.equals(d2));d2.updateValue(new Double(99.9));assertFalse(d1.equals(d2));d2.updateValue(new Double(10.0));assertTrue(d1.equals(d2));}"
"org.jfree.data.general.junit.DefaultKeyedValueDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultKeyedValueDataset d1=new DefaultKeyedValueDataset(""Test"",new Double(25.3));DefaultKeyedValueDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultKeyedValueDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.time.junit.TimeSeriesTests.testClone",0,"/** * Check that cloning works.*/public void testClone(){TimeSeries series=new TimeSeries(""Test Series"");RegularTimePeriod jan1st2002=new Day(1,MonthConstants.JANUARY,2002);try {series.add(jan1st2002,new Integer(42));}catch(SeriesException e){System.err.println(""Problem adding to series."");}TimeSeries clone=null;try {clone=(TimeSeries)series.clone();clone.setKey(""Clone Series"");try {clone.update(jan1st2002,new Integer(10));}catch(SeriesException e){e.printStackTrace();}}catch(CloneNotSupportedException e){assertTrue(false);}int seriesValue=series.getValue(jan1st2002).intValue();int cloneValue=Integer.MAX_VALUE;if (clone != null){cloneValue=clone.getValue(jan1st2002).intValue();}assertEquals(42,seriesValue);assertEquals(10,cloneValue);assertEquals(""Test Series"",series.getKey());if (clone != null){assertEquals(""Clone Series"",clone.getKey());}else {assertTrue(false);}}"
"org.jfree.data.time.junit.TimeSeriesTests.testClone2",0,"/** * Another test of the clone()method.*/public void testClone2(){TimeSeries s1=new TimeSeries(""S1"",Year.class);s1.add(new Year(2007),100.0);s1.add(new Year(2008),null);s1.add(new Year(2009),200.0);TimeSeries s2=null;try {s2=(TimeSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1.equals(s2));s2.addOrUpdate(new Year(2009),300.0);assertFalse(s1.equals(s2));s1.addOrUpdate(new Year(2009),300.0);assertTrue(s1.equals(s2));}"
"org.jfree.data.time.junit.TimeSeriesTests.testAddValue",0,"/** * Add a value to series A for 1999.  It should be added at index 0.*/public void testAddValue(){try {this.seriesA.add(new Year(1999),new Integer(1));}catch(SeriesException e){System.err.println(""Problem adding to series."");}int value=this.seriesA.getValue(0).intValue();assertEquals(1,value);}"
"org.jfree.data.time.junit.TimeSeriesTests.testGetValue",0,"/** * Tests the retrieval of values.*/public void testGetValue(){Number value1=this.seriesA.getValue(new Year(1999));assertNull(value1);int value2=this.seriesA.getValue(new Year(2000)).intValue();assertEquals(102000,value2);}"
"org.jfree.data.time.junit.TimeSeriesTests.testDelete",0,"/** * Tests the deletion of values.*/public void testDelete(){this.seriesA.delete(0,0);assertEquals(5,this.seriesA.getItemCount());Number value=this.seriesA.getValue(new Year(2000));assertNull(value);}"
"org.jfree.data.time.junit.TimeSeriesTests.testDelete2",0,"/** * Basic tests for the delete()method.*/public void testDelete2(){TimeSeries s1=new TimeSeries(""Series"",Year.class);s1.add(new Year(2000),13.75);s1.add(new Year(2001),11.90);s1.add(new Year(2002),null);s1.addChangeListener(this);this.gotSeriesChangeEvent=false;s1.delete(new Year(2001));assertTrue(this.gotSeriesChangeEvent);assertEquals(2,s1.getItemCount());assertEquals(null,s1.getValue(new Year(2001)));this.gotSeriesChangeEvent=false;s1.delete(new Year(2006));assertFalse(this.gotSeriesChangeEvent);try {s1.delete(null);fail(""Expected IllegalArgumentException."");}catch(IllegalArgumentException e){}}"
"org.jfree.data.time.junit.TimeSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimeSeries s1=new TimeSeries(""A test"",Year.class);s1.add(new Year(2000),13.75);s1.add(new Year(2001),11.90);s1.add(new Year(2002),null);s1.add(new Year(2005),19.32);s1.add(new Year(2007),16.89);TimeSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(TimeSeries)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertTrue(s1.equals(s2));}"
"org.jfree.data.time.junit.TimeSeriesTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){TimeSeries s1=new TimeSeries(""Time Series 1"");TimeSeries s2=new TimeSeries(""Time Series 2"");boolean b1=s1.equals(s2);assertFalse(""b1"",b1);s2.setKey(""Time Series 1"");boolean b2=s1.equals(s2);assertTrue(""b2"",b2);RegularTimePeriod p1=new Day();RegularTimePeriod p2=p1.next();s1.add(p1,100.0);s1.add(p2,200.0);boolean b3=s1.equals(s2);assertFalse(""b3"",b3);s2.add(p1,100.0);s2.add(p2,200.0);boolean b4=s1.equals(s2);assertTrue(""b4"",b4);s1.setMaximumItemCount(100);boolean b5=s1.equals(s2);assertFalse(""b5"",b5);s2.setMaximumItemCount(100);boolean b6=s1.equals(s2);assertTrue(""b6"",b6);s1.setMaximumItemAge(100);boolean b7=s1.equals(s2);assertFalse(""b7"",b7);s2.setMaximumItemAge(100);boolean b8=s1.equals(s2);assertTrue(""b8"",b8);}"
"org.jfree.data.time.junit.TimeSeriesTests.testEquals2",0,"/** * Tests a specific bug report where null arguments in the constructor  cause the equals()method to fail.  Fixed for 0.9.21.*/public void testEquals2(){TimeSeries s1=new TimeSeries(""Series"",null,null,Day.class);TimeSeries s2=new TimeSeries(""Series"",null,null,Day.class);assertTrue(s1.equals(s2));}"
"org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy1",0,"/** * Some tests to ensure that the createCopy(RegularTimePeriod,RegularTimePeriod)method is functioning correctly.*/public void testCreateCopy1(){TimeSeries series=new TimeSeries(""Series"",Month.class);series.add(new Month(MonthConstants.JANUARY,2003),45.0);series.add(new Month(MonthConstants.FEBRUARY,2003),55.0);series.add(new Month(MonthConstants.JUNE,2003),35.0);series.add(new Month(MonthConstants.NOVEMBER,2003),85.0);series.add(new Month(MonthConstants.DECEMBER,2003),75.0);try {TimeSeries result1=series.createCopy(new Month(MonthConstants.NOVEMBER,2002),new Month(MonthConstants.DECEMBER,2002));assertEquals(0,result1.getItemCount());TimeSeries result2=series.createCopy(new Month(MonthConstants.NOVEMBER,2002),new Month(MonthConstants.JANUARY,2003));assertEquals(1,result2.getItemCount());TimeSeries result3=series.createCopy(new Month(MonthConstants.NOVEMBER,2002),new Month(MonthConstants.APRIL,2003));assertEquals(2,result3.getItemCount());TimeSeries result4=series.createCopy(new Month(MonthConstants.NOVEMBER,2002),new Month(MonthConstants.DECEMBER,2003));assertEquals(5,result4.getItemCount());TimeSeries result5=series.createCopy(new Month(MonthConstants.NOVEMBER,2002),new Month(MonthConstants.MARCH,2004));assertEquals(5,result5.getItemCount());TimeSeries result6=series.createCopy(new Month(MonthConstants.JANUARY,2003),new Month(MonthConstants.JANUARY,2003));assertEquals(1,result6.getItemCount());TimeSeries result7=series.createCopy(new Month(MonthConstants.JANUARY,2003),new Month(MonthConstants.APRIL,2003));assertEquals(2,result7.getItemCount());TimeSeries result8=series.createCopy(new Month(MonthConstants.JANUARY,2003),new Month(MonthConstants.DECEMBER,2003));assertEquals(5,result8.getItemCount());TimeSeries result9=series.createCopy(new Month(MonthConstants.JANUARY,2003),new Month(MonthConstants.MARCH,2004));assertEquals(5,result9.getItemCount());TimeSeries result10=series.createCopy(new Month(MonthConstants.MAY,2003),new Month(MonthConstants.DECEMBER,2003));assertEquals(3,result10.getItemCount());TimeSeries result11=series.createCopy(new Month(MonthConstants.MAY,2003),new Month(MonthConstants.MARCH,2004));assertEquals(3,result11.getItemCount());TimeSeries result12=series.createCopy(new Month(MonthConstants.DECEMBER,2003),new Month(MonthConstants.DECEMBER,2003));assertEquals(1,result12.getItemCount());TimeSeries result13=series.createCopy(new Month(MonthConstants.DECEMBER,2003),new Month(MonthConstants.MARCH,2004));assertEquals(1,result13.getItemCount());TimeSeries result14=series.createCopy(new Month(MonthConstants.JANUARY,2004),new Month(MonthConstants.MARCH,2004));assertEquals(0,result14.getItemCount());}catch(CloneNotSupportedException e){assertTrue(false);}}"
"org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy2",0,"/** * Some tests to ensure that the createCopy(int,int)method is  functioning correctly.*/public void testCreateCopy2(){TimeSeries series=new TimeSeries(""Series"",Month.class);series.add(new Month(MonthConstants.JANUARY,2003),45.0);series.add(new Month(MonthConstants.FEBRUARY,2003),55.0);series.add(new Month(MonthConstants.JUNE,2003),35.0);series.add(new Month(MonthConstants.NOVEMBER,2003),85.0);series.add(new Month(MonthConstants.DECEMBER,2003),75.0);try {TimeSeries result1=series.createCopy(0,0);assertEquals(new Month(1,2003),result1.getTimePeriod(0));result1=series.createCopy(0,1);assertEquals(new Month(2,2003),result1.getTimePeriod(1));result1=series.createCopy(1,3);assertEquals(new Month(2,2003),result1.getTimePeriod(0));assertEquals(new Month(11,2003),result1.getTimePeriod(2));result1=series.createCopy(3,4);assertEquals(new Month(11,2003),result1.getTimePeriod(0));assertEquals(new Month(12,2003),result1.getTimePeriod(1));result1=series.createCopy(4,4);assertEquals(new Month(12,2003),result1.getTimePeriod(0));}catch(CloneNotSupportedException e){assertTrue(false);}boolean pass=false;try {series.createCopy(-1,1);}catch(IllegalArgumentException e){pass=true;}catch(CloneNotSupportedException e){pass=false;}assertTrue(pass);pass=false;try {series.createCopy(1,0);}catch(IllegalArgumentException e){pass=true;}catch(CloneNotSupportedException e){pass=false;}assertTrue(pass);TimeSeries series2=new TimeSeries(""Series 2"");try {TimeSeries series3=series2.createCopy(99,999);assertEquals(0,series3.getItemCount());}catch(CloneNotSupportedException e){assertTrue(false);}}"
"org.jfree.data.time.junit.TimeSeriesTests.testSetMaximumItemCount",0,"/** * Test the setMaximumItemCount()method to ensure that it removes items  from the series if necessary.*/public void testSetMaximumItemCount(){TimeSeries s1=new TimeSeries(""S1"",Year.class);s1.add(new Year(2000),13.75);s1.add(new Year(2001),11.90);s1.add(new Year(2002),null);s1.add(new Year(2005),19.32);s1.add(new Year(2007),16.89);assertTrue(s1.getItemCount()== 5);s1.setMaximumItemCount(3);assertTrue(s1.getItemCount()== 3);TimeSeriesDataItem item=s1.getDataItem(0);assertTrue(item.getPeriod().equals(new Year(2002)));}"
"org.jfree.data.time.junit.TimeSeriesTests.testAddOrUpdate",0,"/** * Some checks for the addOrUpdate()method.*/public void testAddOrUpdate(){TimeSeries s1=new TimeSeries(""S1"",Year.class);s1.setMaximumItemCount(2);s1.addOrUpdate(new Year(2000),100.0);assertEquals(1,s1.getItemCount());s1.addOrUpdate(new Year(2001),101.0);assertEquals(2,s1.getItemCount());s1.addOrUpdate(new Year(2001),102.0);assertEquals(2,s1.getItemCount());s1.addOrUpdate(new Year(2002),103.0);assertEquals(2,s1.getItemCount());}"
"org.jfree.data.time.junit.TimeSeriesTests.testBug1075255",0,"/** * A test for the bug report 1075255.*/public void testBug1075255(){TimeSeries ts=new TimeSeries(""dummy"",FixedMillisecond.class);ts.add(new FixedMillisecond(0L),0.0);TimeSeries ts2=new TimeSeries(""dummy2"",FixedMillisecond.class);ts2.add(new FixedMillisecond(0L),1.0);try {ts.addAndOrUpdate(ts2);}catch(Exception e){e.printStackTrace();assertTrue(false);}assertEquals(1,ts.getItemCount());}"
"org.jfree.data.time.junit.TimeSeriesTests.testBug1832432",0,"/** * A test for bug 1832432.*/public void testBug1832432(){TimeSeries s1=new TimeSeries(""Series"");TimeSeries s2=null;try {s2=(TimeSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));s1.add(new Day(1,1,2007),100.0);assertFalse(s1.equals(s2));}"
"org.jfree.data.time.junit.TimeSeriesTests.testGetIndex",0,"/** * Some checks for the getIndex()method.*/public void testGetIndex(){TimeSeries series=new TimeSeries(""Series"",Month.class);assertEquals(-1,series.getIndex(new Month(1,2003)));series.add(new Month(1,2003),45.0);assertEquals(0,series.getIndex(new Month(1,2003)));assertEquals(-1,series.getIndex(new Month(12,2002)));assertEquals(-2,series.getIndex(new Month(2,2003)));series.add(new Month(3,2003),55.0);assertEquals(-1,series.getIndex(new Month(12,2002)));assertEquals(0,series.getIndex(new Month(1,2003)));assertEquals(-2,series.getIndex(new Month(2,2003)));assertEquals(1,series.getIndex(new Month(3,2003)));assertEquals(-3,series.getIndex(new Month(4,2003)));}"
"org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem1",0,"/** * Some checks for the getDataItem(int)method.*/public void testGetDataItem1(){TimeSeries series=new TimeSeries(""S"",Year.class);boolean pass=false;try {series.getDataItem(0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);series.add(new Year(2006),100.0);TimeSeriesDataItem item=series.getDataItem(0);assertEquals(new Year(2006),item.getPeriod());pass=false;try {series.getDataItem(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {series.getDataItem(1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.TimeSeriesTests.testGetDataItem2",0,"/** * Some checks for the getDataItem(RegularTimePeriod)method.*/public void testGetDataItem2(){TimeSeries series=new TimeSeries(""S"",Year.class);assertNull(series.getDataItem(new Year(2006)));boolean pass=false;try {series.getDataItem(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems",0,"/** * Some checks for the removeAgedItems()method.*/public void testRemoveAgedItems(){TimeSeries series=new TimeSeries(""Test Series"",Year.class);series.addChangeListener(this);assertEquals(Long.MAX_VALUE,series.getMaximumItemAge());assertEquals(Integer.MAX_VALUE,series.getMaximumItemCount());this.gotSeriesChangeEvent=false;series.removeAgedItems(true);assertEquals(0,series.getItemCount());assertFalse(this.gotSeriesChangeEvent);series.add(new Year(1999),1.0);series.setMaximumItemAge(0);this.gotSeriesChangeEvent=false;series.removeAgedItems(true);assertEquals(1,series.getItemCount());assertFalse(this.gotSeriesChangeEvent);series.setMaximumItemAge(10);series.add(new Year(2001),2.0);this.gotSeriesChangeEvent=false;series.setMaximumItemAge(2);assertEquals(2,series.getItemCount());assertEquals(0,series.getIndex(new Year(1999)));assertFalse(this.gotSeriesChangeEvent);series.setMaximumItemAge(1);assertEquals(1,series.getItemCount());assertEquals(0,series.getIndex(new Year(2001)));assertTrue(this.gotSeriesChangeEvent);}"
"org.jfree.data.time.junit.TimeSeriesTests.testRemoveAgedItems2",0,"/** * Some checks for the removeAgedItems(long,boolean)method.*/public void testRemoveAgedItems2(){long y2006=1157087372534L;TimeSeries series=new TimeSeries(""Test Series"",Year.class);series.addChangeListener(this);assertEquals(Long.MAX_VALUE,series.getMaximumItemAge());assertEquals(Integer.MAX_VALUE,series.getMaximumItemCount());this.gotSeriesChangeEvent=false;series.removeAgedItems(y2006,true);assertEquals(0,series.getItemCount());assertFalse(this.gotSeriesChangeEvent);series.add(new Year(2004),1.0);series.setMaximumItemAge(1);this.gotSeriesChangeEvent=false;series.removeAgedItems(new Year(2005).getMiddleMillisecond(),true);assertEquals(1,series.getItemCount());assertFalse(this.gotSeriesChangeEvent);series.removeAgedItems(y2006,true);assertEquals(0,series.getItemCount());assertTrue(this.gotSeriesChangeEvent);series.setMaximumItemAge(2);series.add(new Year(2003),1.0);series.add(new Year(2005),2.0);assertEquals(2,series.getItemCount());this.gotSeriesChangeEvent=false;assertEquals(2,series.getItemCount());series.removeAgedItems(new Year(2005).getMiddleMillisecond(),true);assertEquals(2,series.getItemCount());assertFalse(this.gotSeriesChangeEvent);series.removeAgedItems(y2006,true);assertEquals(1,series.getItemCount());assertTrue(this.gotSeriesChangeEvent);}"
"org.jfree.data.time.junit.TimeSeriesTests.testHashCode",0,"/** * Some simple checks for the hashCode()method.*/public void testHashCode(){TimeSeries s1=new TimeSeries(""Test"");TimeSeries s2=new TimeSeries(""Test"");assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(new Day(1,1,2007),500.0);s2.add(new Day(1,1,2007),500.0);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(new Day(2,1,2007),null);s2.add(new Day(2,1,2007),null);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(new Day(5,1,2007),111.0);s2.add(new Day(5,1,2007),111.0);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(new Day(9,1,2007),1.0);s2.add(new Day(9,1,2007),1.0);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());}"
"org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){CategoryTextAnnotation a1=new CategoryTextAnnotation(""Test"",""Category"",1.0);CategoryTextAnnotation a2=new CategoryTextAnnotation(""Test"",""Category"",1.0);assertTrue(a1.equals(a2));a1.setCategory(""Category 2"");assertFalse(a1.equals(a2));a2.setCategory(""Category 2"");assertTrue(a1.equals(a2));a1.setCategoryAnchor(CategoryAnchor.START);assertFalse(a1.equals(a2));a2.setCategoryAnchor(CategoryAnchor.START);assertTrue(a1.equals(a2));a1.setValue(0.15);assertFalse(a1.equals(a2));a2.setValue(0.15);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){CategoryTextAnnotation a1=new CategoryTextAnnotation(""Test"",""Category"",1.0);CategoryTextAnnotation a2=new CategoryTextAnnotation(""Test"",""Category"",1.0);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryTextAnnotation a1=new CategoryTextAnnotation(""Test"",""Category"",1.0);CategoryTextAnnotation a2=null;try {a2=(CategoryTextAnnotation)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.CategoryTextAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryTextAnnotation a1=new CategoryTextAnnotation(""Test"",""Category"",1.0);CategoryTextAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CategoryTextAnnotation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){WaterfallBarRenderer r1=new WaterfallBarRenderer();WaterfallBarRenderer r2=new WaterfallBarRenderer();assertEquals(r1,r2);r1.setFirstBarPaint(Color.cyan);assertFalse(r1.equals(r2));r2.setFirstBarPaint(Color.cyan);assertTrue(r1.equals(r2));r1.setLastBarPaint(Color.cyan);assertFalse(r1.equals(r2));r2.setLastBarPaint(Color.cyan);assertTrue(r1.equals(r2));r1.setPositiveBarPaint(Color.cyan);assertFalse(r1.equals(r2));r2.setPositiveBarPaint(Color.cyan);assertTrue(r1.equals(r2));r1.setNegativeBarPaint(Color.cyan);assertFalse(r1.equals(r2));r2.setNegativeBarPaint(Color.cyan);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){WaterfallBarRenderer r1=new WaterfallBarRenderer();WaterfallBarRenderer r2=new WaterfallBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){WaterfallBarRenderer r1=new WaterfallBarRenderer();WaterfallBarRenderer r2=null;try {r2=(WaterfallBarRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1.setFirstBarPaint(Color.yellow);assertFalse(r1.equals(r2));r2.setFirstBarPaint(Color.yellow);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){WaterfallBarRenderer r1=new WaterfallBarRenderer();WaterfallBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(WaterfallBarRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.red,Color.blue,false);XYDifferenceRenderer r2=new XYDifferenceRenderer(Color.red,Color.blue,false);assertEquals(r1,r2);r1.setPositivePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(r1.equals(r2));r2.setPositivePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(r1.equals(r2));r1.setNegativePaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.blue));assertFalse(r1.equals(r2));r2.setNegativePaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.blue));assertTrue(r1.equals(r2));r1=new XYDifferenceRenderer(Color.green,Color.yellow,true);assertFalse(r1.equals(r2));r2=new XYDifferenceRenderer(Color.green,Color.yellow,true);assertTrue(r1.equals(r2));r1.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));r1.setRoundXCoordinates(true);assertFalse(r1.equals(r2));r2.setRoundXCoordinates(true);assertTrue(r1.equals(r2));assertFalse(r1.equals(null));}"
"org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.red,Color.blue,false);XYDifferenceRenderer r2=new XYDifferenceRenderer(Color.red,Color.blue,false);assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.red,Color.blue,false);XYDifferenceRenderer r2=null;try {r2=(XYDifferenceRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));Shape s=r1.getLegendLine();if (s instanceof Line2D){Line2D l=(Line2D)s;l.setLine(1.0,2.0,3.0,4.0);assertFalse(r1.equals(r2));}}"
"org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYDifferenceRenderer r1=new XYDifferenceRenderer(Color.red,Color.blue,false);XYDifferenceRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYDifferenceRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);XYDifferenceRenderer r=new XYDifferenceRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.plot.junit.PlotRenderingInfoTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){PlotRenderingInfo p1=new PlotRenderingInfo(new ChartRenderingInfo());PlotRenderingInfo p2=new PlotRenderingInfo(new ChartRenderingInfo());assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1.setPlotArea(new Rectangle(2,3,4,5));assertFalse(p1.equals(p2));p2.setPlotArea(new Rectangle(2,3,4,5));assertTrue(p1.equals(p2));p1.setDataArea(new Rectangle(2,4,6,8));assertFalse(p1.equals(p2));p2.setDataArea(new Rectangle(2,4,6,8));assertTrue(p1.equals(p2));p1.addSubplotInfo(new PlotRenderingInfo(null));assertFalse(p1.equals(p2));p2.addSubplotInfo(new PlotRenderingInfo(null));assertTrue(p1.equals(p2));p1.getSubplotInfo(0).setDataArea(new Rectangle(1,2,3,4));assertFalse(p1.equals(p2));p2.getSubplotInfo(0).setDataArea(new Rectangle(1,2,3,4));assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PlotRenderingInfoTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PlotRenderingInfo p1=new PlotRenderingInfo(new ChartRenderingInfo());p1.setPlotArea(new Rectangle2D.Double());PlotRenderingInfo p2=null;try {p2=(PlotRenderingInfo)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));p1.getPlotArea().setRect(1.0,2.0,3.0,4.0);assertFalse(p1.equals(p2));p2.getPlotArea().setRect(1.0,2.0,3.0,4.0);assertTrue(p1.equals(p2));p1.getDataArea().setRect(4.0,3.0,2.0,1.0);assertFalse(p1.equals(p2));p2.getDataArea().setRect(4.0,3.0,2.0,1.0);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PlotRenderingInfoTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PlotRenderingInfo p1=new PlotRenderingInfo(new ChartRenderingInfo());PlotRenderingInfo p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(PlotRenderingInfo)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.testEquals",0,"/** * Check that the equals()method can distinguish all required fields.*/public void testEquals(){DefaultDrawingSupplier r1=new DefaultDrawingSupplier();DefaultDrawingSupplier r2=new DefaultDrawingSupplier();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));Paint[]ps1A=new Paint[]{Color.red,Color.blue};Paint[]ps2A=new Paint[]{Color.green,Color.yellow,Color.white};Paint[]ops1A=new Paint[]{Color.lightGray,Color.blue};Paint[]ops2A=new Paint[]{Color.black,Color.yellow,Color.cyan};Stroke[]ss1A=new Stroke[]{new BasicStroke(1.1f)};Stroke[]ss2A=new Stroke[]{new BasicStroke(2.2f),new BasicStroke(3.3f)};Stroke[]oss1A=new Stroke[]{new BasicStroke(4.4f)};Stroke[]oss2A=new Stroke[]{new BasicStroke(5.5f),new BasicStroke(6.6f)};Shape[]shapes1A=new Shape[]{new Rectangle2D.Double(1.0,1.0,1.0,1.0)};Shape[]shapes2A=new Shape[]{new Rectangle2D.Double(2.0,2.0,2.0,2.0),new Rectangle2D.Double(2.0,2.0,2.0,2.0)};Paint[]ps1B=new Paint[]{Color.red,Color.blue};Paint[]ps2B=new Paint[]{Color.green,Color.yellow,Color.white};Paint[]ops1B=new Paint[]{Color.lightGray,Color.blue};Paint[]ops2B=new Paint[]{Color.black,Color.yellow,Color.cyan};Stroke[]ss1B=new Stroke[]{new BasicStroke(1.1f)};Stroke[]ss2B=new Stroke[]{new BasicStroke(2.2f),new BasicStroke(3.3f)};Stroke[]oss1B=new Stroke[]{new BasicStroke(4.4f)};Stroke[]oss2B=new Stroke[]{new BasicStroke(5.5f),new BasicStroke(6.6f)};Shape[]shapes1B=new Shape[]{new Rectangle2D.Double(1.0,1.0,1.0,1.0)};Shape[]shapes2B=new Shape[]{new Rectangle2D.Double(2.0,2.0,2.0,2.0),new Rectangle2D.Double(2.0,2.0,2.0,2.0)};r1=new DefaultDrawingSupplier(ps1A,ops1A,ss1A,oss1A,shapes1A);r2=new DefaultDrawingSupplier(ps1B,ops1B,ss1B,oss1B,shapes1B);assertTrue(r1.equals(r2));r1=new DefaultDrawingSupplier(ps2A,ops1A,ss1A,oss1A,shapes1A);assertFalse(r1.equals(r2));r2=new DefaultDrawingSupplier(ps2B,ops1B,ss1B,oss1B,shapes1B);assertTrue(r1.equals(r2));r1=new DefaultDrawingSupplier(ps2A,ops2A,ss1A,oss1A,shapes1A);assertFalse(r1.equals(r2));r2=new DefaultDrawingSupplier(ps2B,ops2B,ss1B,oss1B,shapes1B);assertTrue(r1.equals(r2));r1=new DefaultDrawingSupplier(ps2A,ops2A,ss2A,oss1A,shapes1A);assertFalse(r1.equals(r2));r2=new DefaultDrawingSupplier(ps2B,ops2B,ss2B,oss1B,shapes1B);assertTrue(r1.equals(r2));r1=new DefaultDrawingSupplier(ps2A,ops2A,ss2A,oss2A,shapes1A);assertFalse(r1.equals(r2));r2=new DefaultDrawingSupplier(ps2B,ops2B,ss2B,oss2B,shapes1B);assertTrue(r1.equals(r2));r1=new DefaultDrawingSupplier(ps2A,ops2A,ss2A,oss2A,shapes2A);assertFalse(r1.equals(r2));r2=new DefaultDrawingSupplier(ps2B,ops2B,ss2B,oss2B,shapes2B);assertTrue(r1.equals(r2));r1.getNextPaint();assertFalse(r1.equals(r2));r2.getNextPaint();assertTrue(r1.equals(r2));r1.getNextOutlinePaint();assertFalse(r1.equals(r2));r2.getNextOutlinePaint();assertTrue(r1.equals(r2));r1.getNextStroke();assertFalse(r1.equals(r2));r2.getNextStroke();assertTrue(r1.equals(r2));r1.getNextOutlineStroke();assertFalse(r1.equals(r2));r2.getNextOutlineStroke();assertTrue(r1.equals(r2));r1.getNextShape();assertFalse(r1.equals(r2));r2.getNextShape();assertTrue(r1.equals(r2));}"
"org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.testCloning",0,"/** * Some basic checks for the clone()method.*/public void testCloning(){DefaultDrawingSupplier r1=new DefaultDrawingSupplier();DefaultDrawingSupplier r2=null;try {r2=(DefaultDrawingSupplier)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.plot.junit.DefaultDrawingSupplierTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultDrawingSupplier r1=new DefaultDrawingSupplier();DefaultDrawingSupplier r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(DefaultDrawingSupplier)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){PeriodAxisLabelInfo info1=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));PeriodAxisLabelInfo info2=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));assertTrue(info1.equals(info2));assertTrue(info2.equals(info1));Class c1=Day.class;Class c2=Month.class;DateFormat df1=new SimpleDateFormat(""d"");DateFormat df2=new SimpleDateFormat(""MMM"");RectangleInsets sp1=new RectangleInsets(1,1,1,1);RectangleInsets sp2=new RectangleInsets(2,2,2,2);Font lf1=new Font(""SansSerif"",Font.PLAIN,10);Font lf2=new Font(""SansSerif"",Font.BOLD,9);Paint lp1=Color.black;Paint lp2=Color.blue;boolean b1=true;boolean b2=false;Stroke s1=new BasicStroke(0.5f);Stroke s2=new BasicStroke(0.25f);Paint dp1=Color.red;Paint dp2=Color.green;info1=new PeriodAxisLabelInfo(c2,df1,sp1,lf1,lp1,b1,s1,dp1);info2=new PeriodAxisLabelInfo(c1,df1,sp1,lf1,lp1,b1,s1,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df1,sp1,lf1,lp1,b1,s1,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp1,lf1,lp1,b1,s1,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp1,lf1,lp1,b1,s1,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp2,lf1,lp1,b1,s1,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp2,lf1,lp1,b1,s1,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp1,b1,s1,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp1,b1,s1,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b1,s1,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b1,s1,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b2,s1,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b2,s1,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b2,s2,dp1);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b2,s2,dp1);assertTrue(info1.equals(info2));info1=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b2,s2,dp2);assertFalse(info1.equals(info2));info2=new PeriodAxisLabelInfo(c2,df2,sp2,lf2,lp2,b2,s2,dp2);assertTrue(info1.equals(info2));}"
"org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){PeriodAxisLabelInfo info1=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));PeriodAxisLabelInfo info2=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));assertTrue(info1.equals(info2));int h1=info1.hashCode();int h2=info2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PeriodAxisLabelInfo info1=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));PeriodAxisLabelInfo info2=null;try {info2=(PeriodAxisLabelInfo)info1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(info1 != info2);assertTrue(info1.getClass()== info2.getClass());assertTrue(info1.equals(info2));}"
"org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PeriodAxisLabelInfo info1=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));PeriodAxisLabelInfo info2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(info1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));info2=(PeriodAxisLabelInfo)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=info1.equals(info2);assertTrue(b);}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSeriesCount",0,"/** * A test for the getSeriesCount()method.*/public void testGetSeriesCount(){TaskSeriesCollection c=createCollection1();assertEquals(2,c.getSeriesCount());}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSeriesKey",0,"/** * Some tests for the getSeriesKey()method.*/public void testGetSeriesKey(){TaskSeriesCollection c=createCollection1();assertEquals(""S1"",c.getSeriesKey(0));assertEquals(""S2"",c.getSeriesKey(1));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetRowCount",0,"/** * A test for the getRowCount()method.*/public void testGetRowCount(){TaskSeriesCollection c=createCollection1();assertEquals(2,c.getRowCount());}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetRowKey",0,"/** * Some tests for the getRowKey()method.*/public void testGetRowKey(){TaskSeriesCollection c=createCollection1();assertEquals(""S1"",c.getRowKey(0));assertEquals(""S2"",c.getRowKey(1));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetRowIndex",0,"/** * Some tests for the getRowIndex()method.*/public void testGetRowIndex(){TaskSeriesCollection c=createCollection1();assertEquals(0,c.getRowIndex(""S1""));assertEquals(1,c.getRowIndex(""S2""));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetValue",0,"/** * Some tests for the getValue()method.*/public void testGetValue(){TaskSeriesCollection c=createCollection1();assertEquals(new Long(1L),c.getValue(""S1"",""Task 1""));assertEquals(new Long(3L),c.getValue(""S1"",""Task 2""));assertEquals(new Long(5L),c.getValue(""S2"",""Task 3""));assertEquals(new Long(1L),c.getValue(0,0));assertEquals(new Long(3L),c.getValue(0,1));assertEquals(null,c.getValue(0,2));assertEquals(null,c.getValue(1,0));assertEquals(null,c.getValue(1,1));assertEquals(new Long(5L),c.getValue(1,2));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetStartValue",0,"/** * Some tests for the getStartValue()method.*/public void testGetStartValue(){TaskSeriesCollection c=createCollection1();assertEquals(new Long(1L),c.getStartValue(""S1"",""Task 1""));assertEquals(new Long(3L),c.getStartValue(""S1"",""Task 2""));assertEquals(new Long(5L),c.getStartValue(""S2"",""Task 3""));assertEquals(new Long(1L),c.getStartValue(0,0));assertEquals(new Long(3L),c.getStartValue(0,1));assertEquals(null,c.getStartValue(0,2));assertEquals(null,c.getStartValue(1,0));assertEquals(null,c.getStartValue(1,1));assertEquals(new Long(5L),c.getStartValue(1,2));TaskSeriesCollection c3=createCollection3();assertEquals(new Long(100),c3.getStartValue(0,0));assertEquals(new Long(220),c3.getStartValue(0,1));assertTrue(c3.getStartValue(1,0)== null);assertEquals(new Long(2220),c3.getStartValue(1,1));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetStartValue2",0,"/** * Some tests for the getStartValue()method for sub-intervals.*/public void testGetStartValue2(){TaskSeriesCollection c=createCollection2();assertEquals(new Long(10L),c.getStartValue(""S1"",""Task 1"",0));assertEquals(new Long(16L),c.getStartValue(""S1"",""Task 1"",1));assertEquals(new Long(30L),c.getStartValue(""S1"",""Task 2"",0));assertEquals(new Long(36L),c.getStartValue(""S1"",""Task 2"",1));assertEquals(new Long(50L),c.getStartValue(""S2"",""Task 3"",0));assertEquals(new Long(56L),c.getStartValue(""S2"",""Task 3"",1));assertEquals(new Long(10L),c.getStartValue(0,0,0));assertEquals(new Long(16L),c.getStartValue(0,0,1));assertEquals(new Long(30L),c.getStartValue(0,1,0));assertEquals(new Long(36L),c.getStartValue(0,1,1));assertEquals(new Long(50L),c.getStartValue(1,2,0));assertEquals(new Long(56L),c.getStartValue(1,2,1));TaskSeriesCollection c3=createCollection3();assertEquals(new Long(11),c3.getStartValue(0,0,0));assertEquals(new Long(22),c3.getStartValue(0,1,0));assertEquals(new Long(33),c3.getStartValue(0,1,1));assertTrue(c3.getStartValue(1,0,0)== null);assertEquals(new Long(44),c3.getStartValue(1,1,0));assertEquals(new Long(55),c3.getStartValue(1,1,1));assertEquals(new Long(66),c3.getStartValue(1,1,2));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetStartValue3",0,"/** * A check for a null task duration.*/public void testGetStartValue3(){TaskSeriesCollection c=new TaskSeriesCollection();TaskSeries s=new TaskSeries(""Series 1"");s.add(new Task(""Task with null duration"",null));c.add(s);Number millis=c.getStartValue(""Series 1"",""Task with null duration"");assertTrue(millis == null);}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetEndValue",0,"/** * Some tests for the getEndValue()method.*/public void testGetEndValue(){TaskSeriesCollection c=createCollection1();assertEquals(new Long(2L),c.getEndValue(""S1"",""Task 1""));assertEquals(new Long(4L),c.getEndValue(""S1"",""Task 2""));assertEquals(new Long(6L),c.getEndValue(""S2"",""Task 3""));assertEquals(new Long(2L),c.getEndValue(0,0));assertEquals(new Long(4L),c.getEndValue(0,1));assertEquals(null,c.getEndValue(0,2));assertEquals(null,c.getEndValue(1,0));assertEquals(null,c.getEndValue(1,1));assertEquals(new Long(6L),c.getEndValue(1,2));TaskSeriesCollection c3=createCollection3();assertEquals(new Long(200),c3.getEndValue(0,0));assertEquals(new Long(350),c3.getEndValue(0,1));assertTrue(c3.getEndValue(1,0)== null);assertEquals(new Long(3350),c3.getEndValue(1,1));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetEndValue2",0,"/** * Some tests for the getEndValue()method for sub-intervals.*/public void testGetEndValue2(){TaskSeriesCollection c=createCollection2();assertEquals(new Long(15L),c.getEndValue(""S1"",""Task 1"",0));assertEquals(new Long(20L),c.getEndValue(""S1"",""Task 1"",1));assertEquals(new Long(35L),c.getEndValue(""S1"",""Task 2"",0));assertEquals(new Long(40L),c.getEndValue(""S1"",""Task 2"",1));assertEquals(new Long(55L),c.getEndValue(""S2"",""Task 3"",0));assertEquals(new Long(60L),c.getEndValue(""S2"",""Task 3"",1));assertEquals(new Long(15L),c.getEndValue(0,0,0));assertEquals(new Long(20L),c.getEndValue(0,0,1));assertEquals(new Long(35L),c.getEndValue(0,1,0));assertEquals(new Long(40L),c.getEndValue(0,1,1));assertEquals(new Long(55L),c.getEndValue(1,2,0));assertEquals(new Long(60L),c.getEndValue(1,2,1));TaskSeriesCollection c3=createCollection3();assertEquals(new Long(111),c3.getEndValue(0,0,0));assertEquals(new Long(222),c3.getEndValue(0,1,0));assertEquals(new Long(333),c3.getEndValue(0,1,1));assertTrue(c3.getEndValue(1,0,0)== null);assertEquals(new Long(444),c3.getEndValue(1,1,0));assertEquals(new Long(555),c3.getEndValue(1,1,1));assertEquals(new Long(666),c3.getEndValue(1,1,2));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetEndValue3",0,"/** * A check for a null task duration.*/public void testGetEndValue3(){TaskSeriesCollection c=new TaskSeriesCollection();TaskSeries s=new TaskSeries(""Series 1"");s.add(new Task(""Task with null duration"",null));c.add(s);Number millis=c.getEndValue(""Series 1"",""Task with null duration"");assertTrue(millis == null);}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetPercentComplete",0,"/** * Some tests for the getPercentComplete()method.*/public void testGetPercentComplete(){TaskSeriesCollection c=createCollection2();assertEquals(new Double(0.10),c.getPercentComplete(""S1"",""Task 1""));assertEquals(new Double(0.20),c.getPercentComplete(""S1"",""Task 2""));assertEquals(new Double(0.30),c.getPercentComplete(""S2"",""Task 3""));assertEquals(new Double(0.10),c.getPercentComplete(0,0));assertEquals(new Double(0.20),c.getPercentComplete(0,1));assertEquals(null,c.getPercentComplete(0,2));assertEquals(null,c.getPercentComplete(1,0));assertEquals(null,c.getPercentComplete(1,1));assertEquals(new Double(0.30),c.getPercentComplete(1,2));TaskSeriesCollection c3=createCollection3();assertEquals(new Double(0.1),c3.getPercentComplete(0,0));assertEquals(new Double(0.2),c3.getPercentComplete(0,1));assertTrue(c3.getPercentComplete(1,0)== null);assertEquals(new Double(0.3),c3.getPercentComplete(1,1));assertEquals(new Double(0.111),c3.getPercentComplete(0,0,0));assertEquals(new Double(0.222),c3.getPercentComplete(0,1,0));assertEquals(new Double(0.333),c3.getPercentComplete(0,1,1));assertEquals(new Double(0.444),c3.getPercentComplete(1,1,0));assertEquals(new Double(0.555),c3.getPercentComplete(1,1,1));assertEquals(new Double(0.666),c3.getPercentComplete(1,1,2));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetColumnCount",0,"/** * A test for the getColumnCount()method.*/public void testGetColumnCount(){TaskSeriesCollection c=createCollection1();assertEquals(3,c.getColumnCount());}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetColumnKey",0,"/** * Some tests for the getColumnKey()method.*/public void testGetColumnKey(){TaskSeriesCollection c=createCollection1();assertEquals(""Task 1"",c.getColumnKey(0));assertEquals(""Task 2"",c.getColumnKey(1));assertEquals(""Task 3"",c.getColumnKey(2));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetColumnIndex",0,"/** * Some tests for the getColumnIndex()method.*/public void testGetColumnIndex(){TaskSeriesCollection c=createCollection1();assertEquals(0,c.getColumnIndex(""Task 1""));assertEquals(1,c.getColumnIndex(""Task 2""));assertEquals(2,c.getColumnIndex(""Task 3""));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2=new TaskSeries(""S"");s2.add(new Task(""T1"",new Date(1),new Date(2)));s2.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeriesCollection c1=new TaskSeriesCollection();c1.add(s1);c1.add(s2);TaskSeries s1b=new TaskSeries(""S"");s1b.add(new Task(""T1"",new Date(1),new Date(2)));s1b.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2b=new TaskSeries(""S"");s2b.add(new Task(""T1"",new Date(1),new Date(2)));s2b.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeriesCollection c2=new TaskSeriesCollection();c2.add(s1b);c2.add(s2b);assertTrue(c1.equals(c2));assertTrue(c2.equals(c1));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2=new TaskSeries(""S"");s2.add(new Task(""T1"",new Date(1),new Date(2)));s2.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeriesCollection c1=new TaskSeriesCollection();c1.add(s1);c1.add(s2);TaskSeriesCollection c2=null;try {c2=(TaskSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2=new TaskSeries(""S"");s2.add(new Task(""T1"",new Date(1),new Date(2)));s2.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeriesCollection c1=new TaskSeriesCollection();c1.add(s1);c1.add(s2);TaskSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(TaskSeriesCollection)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(c1,c2);}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.test697153",0,"/** * A test for bug report 697153.*/public void test697153(){TaskSeries s1=new TaskSeries(""S1"");s1.add(new Task(""Task 1"",new SimpleTimePeriod(new Date(),new Date())));s1.add(new Task(""Task 2"",new SimpleTimePeriod(new Date(),new Date())));s1.add(new Task(""Task 3"",new SimpleTimePeriod(new Date(),new Date())));TaskSeries s2=new TaskSeries(""S2"");s2.add(new Task(""Task 2"",new SimpleTimePeriod(new Date(),new Date())));s2.add(new Task(""Task 3"",new SimpleTimePeriod(new Date(),new Date())));s2.add(new Task(""Task 4"",new SimpleTimePeriod(new Date(),new Date())));TaskSeriesCollection tsc=new TaskSeriesCollection();tsc.add(s1);tsc.add(s2);s1.removeAll();int taskCount=tsc.getColumnCount();assertEquals(3,taskCount);}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.test800324",0,"/** * A test for bug report 800324.*/public void test800324(){TaskSeries s1=new TaskSeries(""S1"");s1.add(new Task(""Task 1"",new SimpleTimePeriod(new Date(),new Date())));s1.add(new Task(""Task 2"",new SimpleTimePeriod(new Date(),new Date())));s1.add(new Task(""Task 3"",new SimpleTimePeriod(new Date(),new Date())));TaskSeriesCollection tsc=new TaskSeriesCollection();tsc.add(s1);try {tsc.getStartValue(0,3);assertTrue(false);}catch(IndexOutOfBoundsException e){}try {tsc.getEndValue(0,3);assertTrue(false);}catch(IndexOutOfBoundsException e){}try {tsc.getSubIntervalCount(0,3);assertTrue(false);}catch(IndexOutOfBoundsException e){}}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSubIntervalCount",0,"/** * Some tests for the bug report 1099331.  We create a TaskSeriesCollection  with two series - the first series has two tasks,but the second has  only one.  The key is to ensure that the methods in TaskSeriesCollection  translate the index values to key values *before* accessing the tasks  in the series.*/public void testGetSubIntervalCount(){TaskSeriesCollection tsc=createCollection3();assertEquals(1,tsc.getSubIntervalCount(0,0));assertEquals(2,tsc.getSubIntervalCount(0,1));assertEquals(0,tsc.getSubIntervalCount(1,0));assertEquals(3,tsc.getSubIntervalCount(1,1));}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testGetSeries",0,"/** * Some basic tests for the getSeries()methods.*/public void testGetSeries(){TaskSeries s1=new TaskSeries(""S1"");TaskSeries s2=new TaskSeries(""S2"");TaskSeriesCollection c=new TaskSeriesCollection();c.add(s1);assertEquals(c.getSeries(0),s1);assertEquals(c.getSeries(""S1""),s1);assertEquals(c.getSeries(""XX""),null);c.add(s2);assertEquals(c.getSeries(1),s2);assertEquals(c.getSeries(""S2""),s2);boolean pass=false;try {c.getSeries(null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.gantt.junit.TaskSeriesCollectionTests.testRemove",0,"/** * Some basic checks for the remove()method.*/public void testRemove(){TaskSeriesCollection c=new TaskSeriesCollection();TaskSeries s1=new TaskSeries(""S1"");c.add(s1);assertEquals(""S1"",c.getSeries(0).getKey());c.remove(0);assertEquals(0,c.getSeriesCount());c.add(s1);boolean pass=false;try {c.remove(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {c.remove(1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XIntervalSeries s1=new XIntervalSeries(""s1"");XIntervalSeries s2=new XIntervalSeries(""s1"");assertTrue(s1.equals(s2));s1=new XIntervalSeries(""s2"");assertFalse(s1.equals(s2));s2=new XIntervalSeries(""s2"");assertTrue(s1.equals(s2));s1=new XIntervalSeries(""s2"",false,true);assertFalse(s1.equals(s2));s2=new XIntervalSeries(""s2"",false,true);assertTrue(s1.equals(s2));s1=new XIntervalSeries(""s2"",false,false);assertFalse(s1.equals(s2));s2=new XIntervalSeries(""s2"",false,false);assertTrue(s1.equals(s2));s1.add(1.0,0.5,1.5,2.0);assertFalse(s1.equals(s2));s2.add(1.0,0.5,1.5,2.0);assertTrue(s2.equals(s1));s1.add(2.0,0.5,1.5,2.0);assertFalse(s1.equals(s2));s2.add(2.0,0.5,1.5,2.0);assertTrue(s2.equals(s1));s1.remove(new Double(1.0));assertFalse(s1.equals(s2));s2.remove(new Double(1.0));assertTrue(s2.equals(s1));}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XIntervalSeries s1=new XIntervalSeries(""s1"");s1.add(1.0,0.5,1.5,2.0);XIntervalSeries s2=null;try {s2=(XIntervalSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XIntervalSeries s1=new XIntervalSeries(""s1"");s1.add(1.0,0.5,1.5,2.0);XIntervalSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(XIntervalSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testIndexOf",0,"/** * Simple test for the indexOf()method.*/public void testIndexOf(){XIntervalSeries s1=new XIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(2.0,2.0,2.0,3.0);s1.add(3.0,3.0,3.0,4.0);assertEquals(0,s1.indexOf(new Double(1.0)));}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testIndexOf2",0,"/** * A check for the indexOf()method for an unsorted series.*/public void testIndexOf2(){XIntervalSeries s1=new XIntervalSeries(""Series 1"",false,true);s1.add(1.0,1.0,1.0,2.0);s1.add(3.0,3.0,3.0,3.0);s1.add(2.0,2.0,2.0,2.0);assertEquals(0,s1.indexOf(new Double(1.0)));assertEquals(1,s1.indexOf(new Double(3.0)));assertEquals(2,s1.indexOf(new Double(2.0)));}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testRemove",0,"/** * Simple test for the remove()method.*/public void testRemove(){XIntervalSeries s1=new XIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(2.0,2.0,2.0,2.0);s1.add(3.0,3.0,3.0,3.0);assertEquals(3,s1.getItemCount());s1.remove(new Double(2.0));assertEquals(new Double(3.0),s1.getX(1));s1.remove(new Double(1.0));assertEquals(new Double(3.0),s1.getX(0));}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testAdditionOfDuplicateXValues",0,"/** * When items are added with duplicate x-values,we expect them to remain in the order they were added.*/public void testAdditionOfDuplicateXValues(){XIntervalSeries s1=new XIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,1.0);s1.add(2.0,2.0,2.0,2.0);s1.add(2.0,3.0,3.0,3.0);s1.add(2.0,4.0,4.0,4.0);s1.add(3.0,5.0,5.0,5.0);assertEquals(1.0,s1.getYValue(0),EPSILON);assertEquals(2.0,s1.getYValue(1),EPSILON);assertEquals(3.0,s1.getYValue(2),EPSILON);assertEquals(4.0,s1.getYValue(3),EPSILON);assertEquals(5.0,s1.getYValue(4),EPSILON);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testAdd",0,"/** * Some checks for the add()method for an UNSORTED series.*/public void testAdd(){XIntervalSeries series=new XIntervalSeries(""Series"",false,true);series.add(5.0,5.50,5.50,5.50);series.add(5.1,5.51,5.51,5.51);series.add(6.0,6.6,6.6,6.6);series.add(3.0,3.3,3.3,3.3);series.add(4.0,4.4,4.4,4.4);series.add(2.0,2.2,2.2,2.2);series.add(1.0,1.1,1.1,1.1);assertEquals(5.5,series.getYValue(0),EPSILON);assertEquals(5.51,series.getYValue(1),EPSILON);assertEquals(6.6,series.getYValue(2),EPSILON);assertEquals(3.3,series.getYValue(3),EPSILON);assertEquals(4.4,series.getYValue(4),EPSILON);assertEquals(2.2,series.getYValue(5),EPSILON);assertEquals(1.1,series.getYValue(6),EPSILON);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testSetMaximumItemCount",0,"/** * A simple check that the maximumItemCount attribute is working.*/public void testSetMaximumItemCount(){XIntervalSeries s1=new XIntervalSeries(""S1"");assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());s1.setMaximumItemCount(2);assertEquals(2,s1.getMaximumItemCount());s1.add(1.0,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testSetMaximumItemCount2",0,"/** * Check that the maximum item count can be applied retrospectively.*/public void testSetMaximumItemCount2(){XIntervalSeries s1=new XIntervalSeries(""S1"");s1.add(1.0,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3);s1.setMaximumItemCount(2);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testClear",0,"/** * Some checks for the clear()method.*/public void testClear(){XIntervalSeries s1=new XIntervalSeries(""S1"");s1.addChangeListener(this);s1.clear();assertNull(this.lastEvent);assertTrue(s1.isEmpty());s1.add(1.0,2.0,3.0,4.0);assertFalse(s1.isEmpty());s1.clear();assertNotNull(this.lastEvent);assertTrue(s1.isEmpty());}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testGetXLowValue",0,"/** * A simple check for getXLowValue().*/public void testGetXLowValue(){XIntervalSeries s1=new XIntervalSeries(""S1"");s1.add(1.0,2.0,3.0,4.0);assertEquals(2.0,s1.getXLowValue(0),EPSILON);s1.add(2.0,1.0,4.0,2.5);assertEquals(1.0,s1.getXLowValue(1),EPSILON);}"
"org.jfree.data.xy.junit.XIntervalSeriesTests.testGetXHighValue",0,"/** * A simple check for getXHighValue().*/public void testGetXHighValue(){XIntervalSeries s1=new XIntervalSeries(""S1"");s1.add(1.0,2.0,3.0,4.0);assertEquals(3.0,s1.getXHighValue(0),EPSILON);s1.add(2.0,1.0,4.0,2.5);assertEquals(4.0,s1.getXHighValue(1),EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxis3DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){NumberAxis3D a1=new NumberAxis3D(""Test Axis"");NumberAxis3D a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(NumberAxis3D)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.data.time.junit.QuarterTests.testEqualsSelf",0,"/** * Check that a Quarter instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Quarter quarter=new Quarter();assertTrue(quarter.equals(quarter));}"
"org.jfree.data.time.junit.QuarterTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Quarter q1=new Quarter(2,2002);Quarter q2=new Quarter(2,2002);assertTrue(q1.equals(q2));}"
"org.jfree.data.time.junit.QuarterTests.testDateConstructor1",0,"/** * In GMT,the end of Q1 2002 is java.util.Date(1017619199999L).  Use this to check the quarter constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Quarter q1=new Quarter(new Date(1017619199999L),zone);Quarter q2=new Quarter(new Date(1017619200000L),zone);assertEquals(1,q1.getQuarter());assertEquals(1017619199999L,q1.getLastMillisecond(c));assertEquals(2,q2.getQuarter());assertEquals(1017619200000L,q2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.QuarterTests.testDateConstructor2",0,"/** * In Istanbul,the end of Q1 2002 is java.util.Date(1017608399999L).  Use this to check the quarter constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""Europe/Istanbul"");Calendar c=new GregorianCalendar(zone);Quarter q1=new Quarter(new Date(1017608399999L),zone);Quarter q2=new Quarter(new Date(1017608400000L),zone);assertEquals(1,q1.getQuarter());assertEquals(1017608399999L,q1.getLastMillisecond(c));assertEquals(2,q2.getQuarter());assertEquals(1017608400000L,q2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.QuarterTests.testQ1Y1900Previous",0,"/** * Set up a quarter equal to Q1 1900.  Request the previous quarter,it  should be null.*/public void testQ1Y1900Previous(){Quarter previous=(Quarter)this.q1Y1900.previous();assertNull(previous);}"
"org.jfree.data.time.junit.QuarterTests.testQ1Y1900Next",0,"/** * Set up a quarter equal to Q1 1900.  Request the next quarter,it should be Q2 1900.*/public void testQ1Y1900Next(){Quarter next=(Quarter)this.q1Y1900.next();assertEquals(this.q2Y1900,next);}"
"org.jfree.data.time.junit.QuarterTests.testQ4Y9999Previous",0,"/** * Set up a quarter equal to Q4 9999.  Request the previous quarter,it  should be Q3 9999.*/public void testQ4Y9999Previous(){Quarter previous=(Quarter)this.q4Y9999.previous();assertEquals(this.q3Y9999,previous);}"
"org.jfree.data.time.junit.QuarterTests.testQ4Y9999Next",0,"/** * Set up a quarter equal to Q4 9999.  Request the next quarter,it should  be null.*/public void testQ4Y9999Next(){Quarter next=(Quarter)this.q4Y9999.next();assertNull(next);}"
"org.jfree.data.time.junit.QuarterTests.testParseQuarter",0,"/** * Test the string parsing code...*/public void testParseQuarter(){Quarter quarter=null;try {quarter=Quarter.parseQuarter(""Q1-2000"");}catch(TimePeriodFormatException e){quarter=new Quarter(1,1900);}assertEquals(1,quarter.getQuarter());assertEquals(2000,quarter.getYear().getYear());try {quarter=Quarter.parseQuarter(""2001-Q2"");}catch(TimePeriodFormatException e){quarter=new Quarter(1,1900);}assertEquals(2,quarter.getQuarter());assertEquals(2001,quarter.getYear().getYear());try {quarter=Quarter.parseQuarter(""Q3,2002"");}catch(TimePeriodFormatException e){quarter=new Quarter(1,1900);}assertEquals(3,quarter.getQuarter());assertEquals(2002,quarter.getYear().getYear());}"
"org.jfree.data.time.junit.QuarterTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Quarter q1=new Quarter(4,1999);Quarter q2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(q1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));q2=(Quarter)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(q1,q2);}"
"org.jfree.data.time.junit.QuarterTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Quarter q1=new Quarter(2,2003);Quarter q2=new Quarter(2,2003);assertTrue(q1.equals(q2));int h1=q1.hashCode();int h2=q2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.QuarterTests.testNotCloneable",0,"/** * The  {@link Quarter}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Quarter q=new Quarter(2,2003);assertFalse(q instanceof Cloneable);}"
"org.jfree.data.time.junit.QuarterTests.testConstructor",0,"/** * Some tests for the constructor with (int,int)arguments.  Covers bug  report 1377239.*/public void testConstructor(){boolean pass=false;try {new Quarter(0,2005);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {new Quarter(5,2005);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.QuarterTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Quarter q=new Quarter(3,1970);assertEquals(15634800000L,q.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.QuarterTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Quarter q=new Quarter(2,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-623347200000L,q.getFirstMillisecond(c));boolean pass=false;try {q.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.QuarterTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Quarter q=new Quarter(1,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(978307200000L,q.getFirstMillisecond(calendar));boolean pass=false;try {q.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.QuarterTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Quarter q=new Quarter(3,1970);assertEquals(23583599999L,q.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.QuarterTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Quarter q=new Quarter(2,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-615488400001L,q.getLastMillisecond(c));boolean pass=false;try {q.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.QuarterTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Quarter q=new Quarter(3,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(1001894399999L,q.getLastMillisecond(calendar));boolean pass=false;try {q.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.QuarterTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Quarter q=new Quarter(1,2000);assertEquals(8001L,q.getSerialIndex());q=new Quarter(1,1900);assertEquals(7601L,q.getSerialIndex());}"
"org.jfree.data.time.junit.QuarterTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Quarter q=new Quarter(1,2000);q=(Quarter)q.next();assertEquals(new Year(2000),q.getYear());assertEquals(2,q.getQuarter());q=new Quarter(4,9999);assertNull(q.next());}"
"org.jfree.data.time.junit.QuarterTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JULY,1,0,0,0);cal.set(Calendar.MILLISECOND,0);Quarter q=new Quarter(3,2006);assertEquals(cal.getTime(),q.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.QuarterTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.MARCH,31,23,59,59);cal.set(Calendar.MILLISECOND,999);Quarter q=new Quarter(1,2006);assertEquals(cal.getTime(),q.getEnd());Locale.setDefault(saved);}"
"org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testEquals",0,"/** * Ensure that the equals()method can distinguish all fields.*/public void testEquals(){SimpleHistogramDataset d1=new SimpleHistogramDataset(""Dataset 1"");SimpleHistogramDataset d2=new SimpleHistogramDataset(""Dataset 1"");assertTrue(d1.equals(d2));d1.addBin(new SimpleHistogramBin(1.0,2.0));assertFalse(d1.equals(d2));d2.addBin(new SimpleHistogramBin(1.0,2.0));assertTrue(d1.equals(d2));}"
"org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){SimpleHistogramDataset d1=new SimpleHistogramDataset(""Dataset 1"");SimpleHistogramDataset d2=null;try {d2=(SimpleHistogramDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d2.addBin(new SimpleHistogramBin(2.0,3.0));d2.addObservation(2.3);assertFalse(d1.equals(d2));}"
"org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){SimpleHistogramDataset d1=new SimpleHistogramDataset(""D1"");SimpleHistogramDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(SimpleHistogramDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testClearObservations",0,"/** * Some checks for the clearObservations()method.*/public void testClearObservations(){SimpleHistogramDataset d1=new SimpleHistogramDataset(""D1"");d1.clearObservations();assertEquals(0,d1.getItemCount(0));d1.addBin(new SimpleHistogramBin(0.0,1.0));d1.addObservation(0.5);assertEquals(1.0,d1.getYValue(0,0),EPSILON);}"
"org.jfree.data.statistics.junit.SimpleHistogramDatasetTests.testRemoveAllBins",0,"/** * Some checks for the removeAllBins()method.*/public void testRemoveAllBins(){SimpleHistogramDataset d1=new SimpleHistogramDataset(""D1"");d1.addBin(new SimpleHistogramBin(0.0,1.0));d1.addObservation(0.5);d1.addBin(new SimpleHistogramBin(2.0,3.0));assertEquals(2,d1.getItemCount(0));d1.removeAllBins();assertEquals(0,d1.getItemCount(0));}"
"org.jfree.data.xy.junit.VectorTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){Vector v1=new Vector(1.0,2.0);Vector v2=new Vector(1.0,2.0);assertTrue(v1.equals(v2));assertTrue(v2.equals(v1));v1=new Vector(1.1,2.0);assertFalse(v1.equals(v2));v2=new Vector(1.1,2.0);assertTrue(v1.equals(v2));v1=new Vector(1.1,2.2);assertFalse(v1.equals(v2));v2=new Vector(1.1,2.2);assertTrue(v1.equals(v2));}"
"org.jfree.data.xy.junit.VectorTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Vector v1=new Vector(1.0,2.0);Vector v2=new Vector(1.0,2.0);assertTrue(v1.equals(v2));int h1=v1.hashCode();int h2=v2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.xy.junit.VectorTests.testCloning",0,"/** * Immutable class is not cloneable.*/public void testCloning(){Vector v1=new Vector(1.0,2.0);assertFalse(v1 instanceof Cloneable);}"
"org.jfree.data.xy.junit.VectorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Vector v1=new Vector(1.0,2.0);Vector v2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(v1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));v2=(Vector)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(v1,v2);}"
"org.jfree.data.junit.ComparableObjectItemTests.testConstructor",0,"/** * Some checks for the constructor.*/public void testConstructor(){boolean pass=false;try {new ComparableObjectItem(null,""XYZ"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.ComparableObjectItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){ComparableObjectItem item1=new ComparableObjectItem(new Integer(1),""XYZ"");ComparableObjectItem item2=new ComparableObjectItem(new Integer(1),""XYZ"");assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1=new ComparableObjectItem(new Integer(2),""XYZ"");assertFalse(item1.equals(item2));item2=new ComparableObjectItem(new Integer(2),""XYZ"");assertTrue(item1.equals(item2));item1=new ComparableObjectItem(new Integer(2),null);assertFalse(item1.equals(item2));item2=new ComparableObjectItem(new Integer(2),null);assertTrue(item1.equals(item2));}"
"org.jfree.data.junit.ComparableObjectItemTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){ComparableObjectItem item1=new ComparableObjectItem(new Integer(1),""XYZ"");ComparableObjectItem item2=null;try {item2=(ComparableObjectItem)item1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(item1 != item2);assertTrue(item1.getClass()== item2.getClass());assertTrue(item1.equals(item2));}"
"org.jfree.data.junit.ComparableObjectItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ComparableObjectItem item1=new ComparableObjectItem(new Integer(1),""XYZ"");ComparableObjectItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(ComparableObjectItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.data.junit.ComparableObjectItemTests.testCompareTo",0,"/** * Some checks for the compareTo()method.*/public void testCompareTo(){ComparableObjectItem item1=new ComparableObjectItem(new Integer(1),""XYZ"");ComparableObjectItem item2=new ComparableObjectItem(new Integer(2),""XYZ"");ComparableObjectItem item3=new ComparableObjectItem(new Integer(3),""XYZ"");ComparableObjectItem item4=new ComparableObjectItem(new Integer(1),""XYZ"");assertTrue(item2.compareTo(item1)> 0);assertTrue(item3.compareTo(item1)> 0);assertTrue(item4.compareTo(item1)== 0);assertTrue(item1.compareTo(item2)< 0);}"
"org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){XYSplineAndShapeRenderer r1=new XYSplineAndShapeRenderer();XYSplineAndShapeRenderer r2=new XYSplineAndShapeRenderer();assertEquals(r1,r2);assertEquals(r2,r1);r1.setPrecision(9);assertFalse(r1.equals(r2));r2.setPrecision(9);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYSplineAndShapeRenderer r1=new XYSplineAndShapeRenderer();XYSplineAndShapeRenderer r2=new XYSplineAndShapeRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){Rectangle2D legendShape=new Rectangle2D.Double(1.0,2.0,3.0,4.0);XYSplineAndShapeRenderer r1=new XYSplineAndShapeRenderer();r1.setLegendLine(legendShape);XYSplineAndShapeRenderer r2=null;try {r2=(XYSplineAndShapeRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYSplineAndShapeRenderer r1=new XYSplineAndShapeRenderer();XYSplineAndShapeRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYSplineAndShapeRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.data.xy.junit.YWithXIntervalTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){YWithXInterval i1=new YWithXInterval(1.0,0.5,1.5);YWithXInterval i2=new YWithXInterval(1.0,0.5,1.5);assertEquals(i1,i2);i1=new YWithXInterval(1.1,0.5,1.5);assertFalse(i1.equals(i2));i2=new YWithXInterval(1.1,0.5,1.5);assertTrue(i1.equals(i2));i1=new YWithXInterval(1.1,0.55,1.5);assertFalse(i1.equals(i2));i2=new YWithXInterval(1.1,0.55,1.5);assertTrue(i1.equals(i2));i1=new YWithXInterval(1.1,0.55,1.55);assertFalse(i1.equals(i2));i2=new YWithXInterval(1.1,0.55,1.55);assertTrue(i1.equals(i2));}"
"org.jfree.data.xy.junit.YWithXIntervalTests.testCloning",0,"/** * This class is immutable.*/public void testCloning(){YWithXInterval i1=new YWithXInterval(1.0,0.5,1.5);assertFalse(i1 instanceof Cloneable);}"
"org.jfree.data.xy.junit.YWithXIntervalTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){YWithXInterval i1=new YWithXInterval(1.0,0.5,1.5);YWithXInterval i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(YWithXInterval)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultTableXYDataset d1=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(1.0,1.1);s1.add(2.0,2.2);d1.addSeries(s1);DefaultTableXYDataset d2=new DefaultTableXYDataset();XYSeries s2=new XYSeries(""Series 1"",true,false);s2.add(1.0,1.1);s2.add(2.0,2.2);d2.addSeries(s2);assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));s1.add(3.0,3.3);assertFalse(d1.equals(d2));s2.add(3.0,3.3);assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultTableXYDataset d1=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(1.0,1.1);s1.add(2.0,2.2);d1.addSeries(s1);DefaultTableXYDataset d2=null;try {d2=(DefaultTableXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultTableXYDataset d1=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(1.0,1.1);s1.add(2.0,2.2);d1.addSeries(s1);DefaultTableXYDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultTableXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testAddSeries",0,"/** * This is a test for bug 1312066 - adding a new series should trigger a recalculation of the interval width,if it is being automatically calculated.*/public void testAddSeries(){DefaultTableXYDataset d1=new DefaultTableXYDataset();d1.setAutoWidth(true);XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(3.0,1.1);s1.add(7.0,2.2);d1.addSeries(s1);assertEquals(3.0,d1.getXValue(0,0),EPSILON);assertEquals(7.0,d1.getXValue(0,1),EPSILON);assertEquals(1.0,d1.getStartXValue(0,0),EPSILON);assertEquals(5.0,d1.getStartXValue(0,1),EPSILON);assertEquals(5.0,d1.getEndXValue(0,0),EPSILON);assertEquals(9.0,d1.getEndXValue(0,1),EPSILON);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(7.5,1.1);s2.add(9.0,2.2);d1.addSeries(s2);assertEquals(3.0,d1.getXValue(1,0),EPSILON);assertEquals(7.0,d1.getXValue(1,1),EPSILON);assertEquals(7.5,d1.getXValue(1,2),EPSILON);assertEquals(9.0,d1.getXValue(1,3),EPSILON);assertEquals(7.25,d1.getStartXValue(1,2),EPSILON);assertEquals(8.75,d1.getStartXValue(1,3),EPSILON);assertEquals(7.75,d1.getEndXValue(1,2),EPSILON);assertEquals(9.25,d1.getEndXValue(1,3),EPSILON);assertEquals(2.75,d1.getStartXValue(0,0),EPSILON);assertEquals(6.75,d1.getStartXValue(0,1),EPSILON);assertEquals(3.25,d1.getEndXValue(0,0),EPSILON);assertEquals(7.25,d1.getEndXValue(0,1),EPSILON);}"
"org.jfree.data.xy.junit.DefaultTableXYDatasetTests.testGetSeries",0,"/** * Some basic checks for the getSeries()method.*/public void testGetSeries(){DefaultTableXYDataset d1=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);d1.addSeries(s1);assertEquals(""Series 1"",d1.getSeries(0).getKey());boolean pass=false;try {d1.getSeries(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d1.getSeries(1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYAreaRenderer r1=new XYAreaRenderer();XYAreaRenderer r2=new XYAreaRenderer();assertEquals(r1,r2);r1=new XYAreaRenderer(XYAreaRenderer.AREA_AND_SHAPES);assertFalse(r1.equals(r2));r2=new XYAreaRenderer(XYAreaRenderer.AREA_AND_SHAPES);assertTrue(r1.equals(r2));r1=new XYAreaRenderer(XYAreaRenderer.AREA);assertFalse(r1.equals(r2));r2=new XYAreaRenderer(XYAreaRenderer.AREA);assertTrue(r1.equals(r2));r1=new XYAreaRenderer(XYAreaRenderer.LINES);assertFalse(r1.equals(r2));r2=new XYAreaRenderer(XYAreaRenderer.LINES);assertTrue(r1.equals(r2));r1=new XYAreaRenderer(XYAreaRenderer.SHAPES);assertFalse(r1.equals(r2));r2=new XYAreaRenderer(XYAreaRenderer.SHAPES);assertTrue(r1.equals(r2));r1=new XYAreaRenderer(XYAreaRenderer.SHAPES_AND_LINES);assertFalse(r1.equals(r2));r2=new XYAreaRenderer(XYAreaRenderer.SHAPES_AND_LINES);assertTrue(r1.equals(r2));r1.setOutline(true);assertFalse(r1.equals(r2));r2.setOutline(true);assertTrue(r1.equals(r2));r1.setLegendArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setLegendArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYAreaRenderer r1=new XYAreaRenderer();XYAreaRenderer r2=new XYAreaRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYAreaRenderer r1=new XYAreaRenderer();Rectangle2D rect1=new Rectangle2D.Double(1.0,2.0,3.0,4.0);r1.setLegendArea(rect1);XYAreaRenderer r2=null;try {r2=(XYAreaRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));rect1.setRect(4.0,3.0,2.0,1.0);assertFalse(r1.equals(r2));r2.setLegendArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYAreaRenderer r1=new XYAreaRenderer();XYAreaRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYAreaRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new XYAreaRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);XYAreaRenderer r=new XYAreaRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.axis.junit.QuarterDateFormatTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){QuarterDateFormat qf1=new QuarterDateFormat(TimeZone.getTimeZone(""GMT""),new String[]{""1"",""2"",""3"",""4""});QuarterDateFormat qf2=new QuarterDateFormat(TimeZone.getTimeZone(""GMT""),new String[]{""1"",""2"",""3"",""4""});assertTrue(qf1.equals(qf2));assertTrue(qf2.equals(qf1));qf1=new QuarterDateFormat(TimeZone.getTimeZone(""PST""),new String[]{""1"",""2"",""3"",""4""});assertFalse(qf1.equals(qf2));qf2=new QuarterDateFormat(TimeZone.getTimeZone(""PST""),new String[]{""1"",""2"",""3"",""4""});assertTrue(qf1.equals(qf2));qf1=new QuarterDateFormat(TimeZone.getTimeZone(""PST""),new String[]{""A"",""2"",""3"",""4""});assertFalse(qf1.equals(qf2));qf2=new QuarterDateFormat(TimeZone.getTimeZone(""PST""),new String[]{""A"",""2"",""3"",""4""});assertTrue(qf1.equals(qf2));qf1=new QuarterDateFormat(TimeZone.getTimeZone(""PST""),new String[]{""A"",""2"",""3"",""4""},true);assertFalse(qf1.equals(qf2));qf2=new QuarterDateFormat(TimeZone.getTimeZone(""PST""),new String[]{""A"",""2"",""3"",""4""},true);assertTrue(qf1.equals(qf2));}"
"org.jfree.chart.axis.junit.QuarterDateFormatTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){QuarterDateFormat qf1=new QuarterDateFormat(TimeZone.getTimeZone(""GMT""),new String[]{""1"",""2"",""3"",""4""});QuarterDateFormat qf2=new QuarterDateFormat(TimeZone.getTimeZone(""GMT""),new String[]{""1"",""2"",""3"",""4""});assertTrue(qf1.equals(qf2));int h1=qf1.hashCode();int h2=qf2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.QuarterDateFormatTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){QuarterDateFormat qf1=new QuarterDateFormat(TimeZone.getTimeZone(""GMT""),new String[]{""1"",""2"",""3"",""4""});QuarterDateFormat qf2=null;qf2=(QuarterDateFormat)qf1.clone();assertTrue(qf1 != qf2);assertTrue(qf1.getClass()== qf2.getClass());assertTrue(qf1.equals(qf2));}"
"org.jfree.chart.axis.junit.QuarterDateFormatTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){QuarterDateFormat qf1=new QuarterDateFormat(TimeZone.getTimeZone(""GMT""),new String[]{""1"",""2"",""3"",""4""});QuarterDateFormat qf2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(qf1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));qf2=(QuarterDateFormat)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertTrue(qf1.equals(qf2));}"
"org.jfree.chart.renderer.category.junit.LevelRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){LevelRenderer r1=new LevelRenderer();LevelRenderer r2=new LevelRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setItemMargin(0.123);assertFalse(r1.equals(r2));r2.setItemMargin(0.123);assertTrue(r1.equals(r2));r1.setMaximumItemWidth(0.234);assertFalse(r1.equals(r2));r2.setMaximumItemWidth(0.234);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.LevelRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){LevelRenderer r1=new LevelRenderer();LevelRenderer r2=new LevelRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.LevelRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LevelRenderer r1=new LevelRenderer();r1.setItemMargin(0.123);r1.setMaximumItemWidth(0.234);LevelRenderer r2=null;try {r2=(LevelRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(checkIndependence(r1,r2));}"
"org.jfree.chart.renderer.category.junit.LevelRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LevelRenderer r1=new LevelRenderer();LevelRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(LevelRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.LevelRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new LevelRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.LevelRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultCategoryDataset dataset0=new DefaultCategoryDataset();dataset0.addValue(21.0,""R1"",""C1"");dataset0.addValue(22.0,""R2"",""C1"");DefaultCategoryDataset dataset1=new DefaultCategoryDataset();dataset1.addValue(23.0,""R3"",""C1"");dataset1.addValue(24.0,""R4"",""C1"");dataset1.addValue(25.0,""R5"",""C1"");LevelRenderer r=new LevelRenderer();CategoryPlot plot=new CategoryPlot(dataset0,new CategoryAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,dataset1);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""R5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.entity.junit.XYItemEntityTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYItemEntity e1=new XYItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new TimeSeriesCollection(),1,9,""ToolTip"",""URL"");XYItemEntity e2=new XYItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new TimeSeriesCollection(),1,9,""ToolTip"",""URL"");assertTrue(e1.equals(e2));e1.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertFalse(e1.equals(e2));e2.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(e1.equals(e2));e1.setToolTipText(""New ToolTip"");assertFalse(e1.equals(e2));e2.setToolTipText(""New ToolTip"");assertTrue(e1.equals(e2));e1.setURLText(""New URL"");assertFalse(e1.equals(e2));e2.setURLText(""New URL"");assertTrue(e1.equals(e2));e1.setSeriesIndex(88);assertFalse(e1.equals(e2));e2.setSeriesIndex(88);assertTrue(e1.equals(e2));e1.setItem(88);assertFalse(e1.equals(e2));e2.setItem(88);assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.XYItemEntityTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYItemEntity e1=new XYItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new TimeSeriesCollection(),1,9,""ToolTip"",""URL"");XYItemEntity e2=null;try {e2=(XYItemEntity)e1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(e1 != e2);assertTrue(e1.getClass()== e2.getClass());assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.XYItemEntityTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYItemEntity e1=new XYItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new TimeSeriesCollection(),1,9,""ToolTip"",""URL"");XYItemEntity e2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(e1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));e2=(XYItemEntity)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(e1,e2);}"
"org.jfree.chart.annotations.junit.XYTextAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYTextAnnotation a1=new XYTextAnnotation(""Text"",10.0,20.0);XYTextAnnotation a2=new XYTextAnnotation(""Text"",10.0,20.0);assertTrue(a1.equals(a2));a1=new XYTextAnnotation(""ABC"",10.0,20.0);assertFalse(a1.equals(a2));a2=new XYTextAnnotation(""ABC"",10.0,20.0);assertTrue(a1.equals(a2));a1=new XYTextAnnotation(""ABC"",11.0,20.0);assertFalse(a1.equals(a2));a2=new XYTextAnnotation(""ABC"",11.0,20.0);assertTrue(a1.equals(a2));a1=new XYTextAnnotation(""ABC"",11.0,22.0);assertFalse(a1.equals(a2));a2=new XYTextAnnotation(""ABC"",11.0,22.0);assertTrue(a1.equals(a2));a1.setFont(new Font(""Serif"",Font.PLAIN,23));assertFalse(a1.equals(a2));a2.setFont(new Font(""Serif"",Font.PLAIN,23));assertTrue(a1.equals(a2));GradientPaint gp1=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow);GradientPaint gp2=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow);a1.setPaint(gp1);assertFalse(a1.equals(a2));a2.setPaint(gp2);assertTrue(a1.equals(a2));a1.setRotationAnchor(TextAnchor.BASELINE_RIGHT);assertFalse(a1.equals(a2));a2.setRotationAnchor(TextAnchor.BASELINE_RIGHT);assertTrue(a1.equals(a2));a1.setRotationAngle(12.3);assertFalse(a1.equals(a2));a2.setRotationAngle(12.3);assertTrue(a1.equals(a2));a1.setTextAnchor(TextAnchor.BASELINE_RIGHT);assertFalse(a1.equals(a2));a2.setTextAnchor(TextAnchor.BASELINE_RIGHT);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYTextAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){XYTextAnnotation a1=new XYTextAnnotation(""Text"",10.0,20.0);XYTextAnnotation a2=new XYTextAnnotation(""Text"",10.0,20.0);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYTextAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYTextAnnotation a1=new XYTextAnnotation(""Text"",10.0,20.0);XYTextAnnotation a2=null;try {a2=(XYTextAnnotation)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYTextAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYTextAnnotation a1=new XYTextAnnotation(""Text"",10.0,20.0);XYTextAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYTextAnnotation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testConstructor1",0,"/** * Confirm that the constructor will accept a null axis.*/public void testConstructor1(){CombinedDomainXYPlot plot=new CombinedDomainXYPlot(null);assertEquals(null,plot.getDomainAxis());}"
"org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testRemoveSubplot",0,"/** * This is a test to replicate the bug report 987080.*/public void testRemoveSubplot(){CombinedDomainXYPlot plot=new CombinedDomainXYPlot();XYPlot plot1=new XYPlot();XYPlot plot2=new XYPlot();plot.add(plot1);plot.add(plot2);plot.remove(plot2);List plots=plot.getSubplots();assertTrue(plots.get(0)== plot1);}"
"org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){CombinedDomainXYPlot plot1=createPlot();CombinedDomainXYPlot plot2=createPlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));}"
"org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CombinedDomainXYPlot plot1=createPlot();CombinedDomainXYPlot plot2=null;try {plot2=(CombinedDomainXYPlot)plot1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(plot1 != plot2);assertTrue(plot1.getClass()== plot2.getClass());assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CombinedDomainXYPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CombinedDomainXYPlot plot1=createPlot();CombinedDomainXYPlot plot2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(plot1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));plot2=(CombinedDomainXYPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(plot1,plot2);}"
"org.jfree.chart.renderer.xy.junit.VectorRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){VectorRenderer r1=new VectorRenderer();VectorRenderer r2=new VectorRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setSeriesFillPaint(0,Color.green);assertFalse(r1.equals(r2));r2.setSeriesFillPaint(0,Color.green);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.VectorRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){VectorRenderer r1=new VectorRenderer();VectorRenderer r2=new VectorRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.VectorRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){VectorRenderer r1=new VectorRenderer();VectorRenderer r2=null;try {r2=(VectorRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.VectorRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){VectorRenderer r1=new VectorRenderer();VectorRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(VectorRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());XYDrawableAnnotation a2=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());XYDrawableAnnotation a2=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());XYDrawableAnnotation a2=null;try {a2=(XYDrawableAnnotation)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYDrawableAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYDrawableAnnotation a1=new XYDrawableAnnotation(10.0,20.0,100.0,200.0,new TestDrawable());XYDrawableAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYDrawableAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testConstructor",0,"/** * Some checks for the constructor.*/public void testConstructor(){CategoryPlot plot=new CategoryPlot();assertEquals(new RectangleInsets(4.0,4.0,4.0,4.0),plot.getAxisOffset());}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testAxisRange",0,"/** * A test for a bug reported in the forum.*/public void testAxisRange(){DefaultCategoryDataset datasetA=new DefaultCategoryDataset();DefaultCategoryDataset datasetB=new DefaultCategoryDataset();datasetB.addValue(50.0,""R1"",""C1"");datasetB.addValue(80.0,""R1"",""C1"");CategoryPlot plot=new CategoryPlot(datasetA,new CategoryAxis(null),new NumberAxis(null),new LineAndShapeRenderer());plot.setDataset(1,datasetB);plot.setRenderer(1,new LineAndShapeRenderer());Range r=plot.getRangeAxis().getRange();assertEquals(84.0,r.getUpperBound(),0.00001);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testEquals",0,"/** * Test that the equals()method differentiates all the required fields.*/public void testEquals(){CategoryPlot plot1=new CategoryPlot();CategoryPlot plot2=new CategoryPlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));plot1.setOrientation(PlotOrientation.HORIZONTAL);assertFalse(plot1.equals(plot2));plot2.setOrientation(PlotOrientation.HORIZONTAL);assertTrue(plot1.equals(plot2));plot1.setAxisOffset(new RectangleInsets(0.05,0.05,0.05,0.05));assertFalse(plot1.equals(plot2));plot2.setAxisOffset(new RectangleInsets(0.05,0.05,0.05,0.05));assertTrue(plot1.equals(plot2));plot1.setDomainAxis(new CategoryAxis(""Category Axis""));assertFalse(plot1.equals(plot2));plot2.setDomainAxis(new CategoryAxis(""Category Axis""));assertTrue(plot1.equals(plot2));plot1.setDomainAxis(11,new CategoryAxis(""Secondary Axis""));assertFalse(plot1.equals(plot2));plot2.setDomainAxis(11,new CategoryAxis(""Secondary Axis""));assertTrue(plot1.equals(plot2));plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.setDomainAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setDomainAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());assertFalse(plot1.equals(plot2));plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());assertTrue(plot1.equals(plot2));plot1.setRangeAxis(new NumberAxis(""Range Axis""));assertFalse(plot1.equals(plot2));plot2.setRangeAxis(new NumberAxis(""Range Axis""));assertTrue(plot1.equals(plot2));plot1.setRangeAxis(11,new NumberAxis(""Secondary Range Axis""));assertFalse(plot1.equals(plot2));plot2.setRangeAxis(11,new NumberAxis(""Secondary Range Axis""));assertTrue(plot1.equals(plot2));plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.setRangeAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setRangeAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.mapDatasetToDomainAxis(11,11);assertFalse(plot1.equals(plot2));plot2.mapDatasetToDomainAxis(11,11);assertTrue(plot1.equals(plot2));plot1.mapDatasetToRangeAxis(11,11);assertFalse(plot1.equals(plot2));plot2.mapDatasetToRangeAxis(11,11);assertTrue(plot1.equals(plot2));plot1.setRenderer(new AreaRenderer());assertFalse(plot1.equals(plot2));plot2.setRenderer(new AreaRenderer());assertTrue(plot1.equals(plot2));plot1.setRenderer(11,new AreaRenderer());assertFalse(plot1.equals(plot2));plot2.setRenderer(11,new AreaRenderer());assertTrue(plot1.equals(plot2));plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);assertFalse(plot1.equals(plot2));plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);assertTrue(plot1.equals(plot2));plot1.setColumnRenderingOrder(SortOrder.DESCENDING);assertFalse(plot1.equals(plot2));plot2.setColumnRenderingOrder(SortOrder.DESCENDING);assertTrue(plot1.equals(plot2));plot1.setRowRenderingOrder(SortOrder.DESCENDING);assertFalse(plot1.equals(plot2));plot2.setRowRenderingOrder(SortOrder.DESCENDING);assertTrue(plot1.equals(plot2));plot1.setDomainGridlinesVisible(true);assertFalse(plot1.equals(plot2));plot2.setDomainGridlinesVisible(true);assertTrue(plot1.equals(plot2));plot1.setDomainGridlinePosition(CategoryAnchor.END);assertFalse(plot1.equals(plot2));plot2.setDomainGridlinePosition(CategoryAnchor.END);assertTrue(plot1.equals(plot2));Stroke stroke=new BasicStroke(2.0f);plot1.setDomainGridlineStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setDomainGridlineStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setDomainGridlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setDomainGridlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));plot1.setRangeGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setRangeGridlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.setRangeGridlineStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setRangeGridlineStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setRangeGridlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setRangeGridlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));plot1.setAnchorValue(100.0);assertFalse(plot1.equals(plot2));plot2.setAnchorValue(100.0);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairVisible(true);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairVisible(true);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairValue(100.0);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairValue(100.0);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairLockedOnData(false);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairLockedOnData(false);assertTrue(plot1.equals(plot2));plot1.addRangeMarker(new ValueMarker(4.0),Layer.FOREGROUND);assertFalse(plot1.equals(plot2));plot2.addRangeMarker(new ValueMarker(4.0),Layer.FOREGROUND);assertTrue(plot1.equals(plot2));plot1.addRangeMarker(new ValueMarker(5.0),Layer.BACKGROUND);assertFalse(plot1.equals(plot2));plot2.addRangeMarker(new ValueMarker(5.0),Layer.BACKGROUND);assertTrue(plot1.equals(plot2));plot1.addRangeMarker(1,new ValueMarker(4.0),Layer.FOREGROUND);assertFalse(plot1.equals(plot2));plot2.addRangeMarker(1,new ValueMarker(4.0),Layer.FOREGROUND);assertTrue(plot1.equals(plot2));plot1.addRangeMarker(1,new ValueMarker(5.0),Layer.BACKGROUND);assertFalse(plot1.equals(plot2));plot2.addRangeMarker(1,new ValueMarker(5.0),Layer.BACKGROUND);assertTrue(plot1.equals(plot2));plot1.addAnnotation(new CategoryTextAnnotation(""Text"",""Category"",43.0));assertFalse(plot1.equals(plot2));plot2.addAnnotation(new CategoryTextAnnotation(""Text"",""Category"",43.0));assertTrue(plot1.equals(plot2));plot1.setWeight(3);assertFalse(plot1.equals(plot2));plot2.setWeight(3);assertTrue(plot1.equals(plot2));plot1.setFixedDomainAxisSpace(new AxisSpace());assertFalse(plot1.equals(plot2));plot2.setFixedDomainAxisSpace(new AxisSpace());assertTrue(plot1.equals(plot2));plot1.setFixedRangeAxisSpace(new AxisSpace());assertFalse(plot1.equals(plot2));plot2.setFixedRangeAxisSpace(new AxisSpace());assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryPlot p1=new CategoryPlot();p1.setRangeCrosshairPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow));CategoryPlot p2=null;try {p2=(CategoryPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();CategoryAxis domainAxis=new CategoryAxis(""Domain"");NumberAxis rangeAxis=new NumberAxis(""Range"");BarRenderer renderer=new BarRenderer();CategoryPlot p1=new CategoryPlot(dataset,domainAxis,rangeAxis,renderer);p1.setOrientation(PlotOrientation.HORIZONTAL);CategoryPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(CategoryPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){DefaultCategoryDataset data=new DefaultCategoryDataset();CategoryAxis domainAxis=new CategoryAxis(""Domain"");NumberAxis rangeAxis=new NumberAxis(""Range"");BarRenderer renderer=new BarRenderer();CategoryPlot p1=new CategoryPlot(data,domainAxis,rangeAxis,renderer);p1.setOrientation(PlotOrientation.VERTICAL);CategoryPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(CategoryPlot)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization3(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();JFreeChart chart=ChartFactory.createBarChart(""Test Chart"",""Category Axis"",""Value Axis"",dataset,PlotOrientation.VERTICAL,true,true,false);JFreeChart chart2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(chart);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));chart2=(JFreeChart)in.readObject();in.close();}catch(Exception e){fail(e.toString());}boolean passed=true;try {chart2.createBufferedImage(300,200);}catch(Exception e){passed=false;e.printStackTrace();}assertTrue(passed);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4",0,"/** * This test ensures that a plot with markers is serialized correctly.*/public void testSerialization4(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();JFreeChart chart=ChartFactory.createBarChart(""Test Chart"",""Category Axis"",""Value Axis"",dataset,PlotOrientation.VERTICAL,true,true,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();plot.addRangeMarker(new ValueMarker(1.1),Layer.FOREGROUND);plot.addRangeMarker(new IntervalMarker(2.2,3.3),Layer.BACKGROUND);JFreeChart chart2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(chart);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));chart2=(JFreeChart)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(chart,chart2);boolean passed=true;try {chart2.createBufferedImage(300,200);}catch(Exception e){passed=false;e.printStackTrace();}assertTrue(passed);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization5",0,"/** * Tests a bug where the plot is no longer registered as a listener with the dataset(s)and axes after deserialization.  See patch 1209475 at SourceForge.*/public void testSerialization5(){DefaultCategoryDataset dataset1=new DefaultCategoryDataset();CategoryAxis domainAxis1=new CategoryAxis(""Domain 1"");NumberAxis rangeAxis1=new NumberAxis(""Range 1"");BarRenderer renderer1=new BarRenderer();CategoryPlot p1=new CategoryPlot(dataset1,domainAxis1,rangeAxis1,renderer1);CategoryAxis domainAxis2=new CategoryAxis(""Domain 2"");NumberAxis rangeAxis2=new NumberAxis(""Range 2"");BarRenderer renderer2=new BarRenderer();DefaultCategoryDataset dataset2=new DefaultCategoryDataset();p1.setDataset(1,dataset2);p1.setDomainAxis(1,domainAxis2);p1.setRangeAxis(1,rangeAxis2);p1.setRenderer(1,renderer2);CategoryPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(CategoryPlot)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(p1,p2);CategoryAxis domainAxisA=p2.getDomainAxis(0);NumberAxis rangeAxisA=(NumberAxis)p2.getRangeAxis(0);DefaultCategoryDataset datasetA=(DefaultCategoryDataset)p2.getDataset(0);BarRenderer rendererA=(BarRenderer)p2.getRenderer(0);CategoryAxis domainAxisB=p2.getDomainAxis(1);NumberAxis rangeAxisB=(NumberAxis)p2.getRangeAxis(1);DefaultCategoryDataset datasetB=(DefaultCategoryDataset)p2.getDataset(1);BarRenderer rendererB=(BarRenderer)p2.getRenderer(1);assertTrue(datasetA.hasListener(p2));assertTrue(domainAxisA.hasListener(p2));assertTrue(rangeAxisA.hasListener(p2));assertTrue(rendererA.hasListener(p2));assertTrue(datasetB.hasListener(p2));assertTrue(domainAxisB.hasListener(p2));assertTrue(rangeAxisB.hasListener(p2));assertTrue(rendererB.hasListener(p2));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testSetRenderer",0,"/** * A test for a bug where setting the renderer doesn't register the plot as a RendererChangeListener.*/public void testSetRenderer(){CategoryPlot plot=new CategoryPlot();CategoryItemRenderer renderer=new LineAndShapeRenderer();plot.setRenderer(renderer);MyPlotChangeListener listener=new MyPlotChangeListener();plot.addChangeListener(listener);renderer.setSeriesPaint(0,Color.black);assertTrue(listener.getEvent()!= null);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.test1169972",0,"/** * A test for bug report 1169972.*/public void test1169972(){CategoryPlot plot=new CategoryPlot(null,null,null,null);plot.setDomainAxis(new CategoryAxis(""C""));plot.setRangeAxis(new NumberAxis(""Y""));plot.setRenderer(new BarRenderer());plot.setDataset(new DefaultCategoryDataset());assertTrue(plot != null);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testAddDomainMarker",0,"/** * Some tests for the addDomainMarker()method(s).*/public void testAddDomainMarker(){CategoryPlot plot=new CategoryPlot();CategoryMarker m=new CategoryMarker(""C1"");plot.addDomainMarker(m);List listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertTrue(listeners.contains(plot));plot.clearDomainMarkers();listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertFalse(listeners.contains(plot));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testAddRangeMarker",0,"/** * Some tests for the addRangeMarker()method(s).*/public void testAddRangeMarker(){CategoryPlot plot=new CategoryPlot();Marker m=new ValueMarker(1.0);plot.addRangeMarker(m);List listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertTrue(listeners.contains(plot));plot.clearRangeMarkers();listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertFalse(listeners.contains(plot));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.test1654215",0,"/** * A test for bug 1654215 (where a renderer is added to the plot without a corresponding dataset and it throws an exception at drawing time).*/public void test1654215(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();JFreeChart chart=ChartFactory.createLineChart(""Title"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,true,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();plot.setRenderer(1,new LineAndShapeRenderer());boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex",0,"/** * Some checks for the getDomainAxisIndex()method.*/public void testGetDomainAxisIndex(){CategoryAxis domainAxis1=new CategoryAxis(""X1"");CategoryAxis domainAxis2=new CategoryAxis(""X2"");NumberAxis rangeAxis1=new NumberAxis(""Y1"");CategoryPlot plot=new CategoryPlot(null,domainAxis1,rangeAxis1,null);assertEquals(0,plot.getDomainAxisIndex(domainAxis1));assertEquals(-1,plot.getDomainAxisIndex(domainAxis2));plot.setDomainAxis(1,domainAxis2);assertEquals(1,plot.getDomainAxisIndex(domainAxis2));assertEquals(-1,plot.getDomainAxisIndex(new CategoryAxis(""X2"")));boolean pass=false;try {plot.getDomainAxisIndex(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex",0,"/** * Some checks for the getRangeAxisIndex()method.*/public void testGetRangeAxisIndex(){CategoryAxis domainAxis1=new CategoryAxis(""X1"");NumberAxis rangeAxis1=new NumberAxis(""Y1"");NumberAxis rangeAxis2=new NumberAxis(""Y2"");CategoryPlot plot=new CategoryPlot(null,domainAxis1,rangeAxis1,null);assertEquals(0,plot.getRangeAxisIndex(rangeAxis1));assertEquals(-1,plot.getRangeAxisIndex(rangeAxis2));plot.setRangeAxis(1,rangeAxis2);assertEquals(1,plot.getRangeAxisIndex(rangeAxis2));assertEquals(-1,plot.getRangeAxisIndex(new NumberAxis(""Y2"")));boolean pass=false;try {plot.getRangeAxisIndex(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveDomainMarker",0,"/** * Check that removing a marker that isn't assigned to the plot returns  false.*/public void testRemoveDomainMarker(){CategoryPlot plot=new CategoryPlot();assertFalse(plot.removeDomainMarker(new CategoryMarker(""Category 1"")));}"
"org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveRangeMarker",0,"/** * Check that removing a marker that isn't assigned to the plot returns  false.*/public void testRemoveRangeMarker(){CategoryPlot plot=new CategoryPlot();assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));}"
"org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialValueIndicator i1=new DialValueIndicator(0);DialValueIndicator i2=new DialValueIndicator(0);assertTrue(i1.equals(i2));i1.setDatasetIndex(99);assertFalse(i1.equals(i2));i2.setDatasetIndex(99);assertTrue(i1.equals(i2));i1.setAngle(43);assertFalse(i1.equals(i2));i2.setAngle(43);assertTrue(i1.equals(i2));i1.setRadius(0.77);assertFalse(i1.equals(i2));i2.setRadius(0.77);assertTrue(i1.equals(i2));i1.setFrameAnchor(RectangleAnchor.TOP_LEFT);assertFalse(i1.equals(i2));i2.setFrameAnchor(RectangleAnchor.TOP_LEFT);assertTrue(i1.equals(i2));i1.setTemplateValue(new Double(1.23));assertFalse(i1.equals(i2));i2.setTemplateValue(new Double(1.23));assertTrue(i1.equals(i2));i1.setFont(new Font(""Dialog"",Font.PLAIN,7));assertFalse(i1.equals(i2));i2.setFont(new Font(""Dialog"",Font.PLAIN,7));assertTrue(i1.equals(i2));i1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertFalse(i1.equals(i2));i2.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertTrue(i1.equals(i2));i1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertFalse(i1.equals(i2));i2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertTrue(i1.equals(i2));i1.setOutlineStroke(new BasicStroke(1.1f));assertFalse(i1.equals(i2));i2.setOutlineStroke(new BasicStroke(1.1f));assertTrue(i1.equals(i2));i1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertFalse(i1.equals(i2));i2.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertTrue(i1.equals(i2));i1.setInsets(new RectangleInsets(1,2,3,4));assertFalse(i1.equals(i2));i2.setInsets(new RectangleInsets(1,2,3,4));assertTrue(i1.equals(i2));i1.setValueAnchor(RectangleAnchor.BOTTOM_LEFT);assertFalse(i1.equals(i2));i2.setValueAnchor(RectangleAnchor.BOTTOM_LEFT);assertTrue(i1.equals(i2));i1.setTextAnchor(TextAnchor.TOP_LEFT);assertFalse(i1.equals(i2));i2.setTextAnchor(TextAnchor.TOP_LEFT);assertTrue(i1.equals(i2));i1.setVisible(false);assertFalse(i1.equals(i2));i2.setVisible(false);assertTrue(i1.equals(i2));}"
"org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DialValueIndicator i1=new DialValueIndicator(0);DialValueIndicator i2=new DialValueIndicator(0);assertTrue(i1.equals(i2));int h1=i1.hashCode();int h2=i2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialValueIndicator i1=new DialValueIndicator(0);DialValueIndicator i2=null;try {i2=(DialValueIndicator)i1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(i1 != i2);assertTrue(i1.getClass()== i2.getClass());assertTrue(i1.equals(i2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();i1.addChangeListener(l1);assertTrue(i1.hasListener(l1));assertFalse(i2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.DialValueIndicatorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialValueIndicator i1=new DialValueIndicator(0);DialValueIndicator i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(DialValueIndicator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsSegmentedTimeline",0,"/** * Tests that the new method that created the msTimeline segmented timeline did so correctly.*/public void testMsSegmentedTimeline(){assertEquals(1,this.msTimeline.getSegmentSize());assertEquals(0,this.msTimeline.getStartTime());assertEquals(5,this.msTimeline.getSegmentsIncluded());assertEquals(2,this.msTimeline.getSegmentsExcluded());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2SegmentedTimeline",0,"/** * Tests that the new method that created the ms2Timeline segmented timeline did so correctly.*/public void testMs2SegmentedTimeline(){assertEquals(1,this.ms2Timeline.getSegmentSize());assertEquals(1,this.ms2Timeline.getStartTime());assertEquals(2,this.ms2Timeline.getSegmentsIncluded());assertEquals(2,this.ms2Timeline.getSegmentsExcluded());assertEquals(this.ms2BaseTimeline,this.ms2Timeline.getBaseTimeline());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridaySegmentedTimeline",0,"/** * Tests that the factory method that creates Monday through Friday  segmented timeline does so correctly.*/public void testMondayThroughFridaySegmentedTimeline(){assertEquals(SegmentedTimeline.DAY_SEGMENT_SIZE,this.mondayFridayTimeline.getSegmentSize());assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900,this.mondayFridayTimeline.getStartTime());assertEquals(5,this.mondayFridayTimeline.getSegmentsIncluded());assertEquals(2,this.mondayFridayTimeline.getSegmentsExcluded());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinSegmentedTimeline",0,"/** * Tests that the factory method that creates a 15-min 9:00 AM  4:00 PM segmented axis does so correctly.*/public void testFifteenMinSegmentedTimeline(){assertEquals(SegmentedTimeline.FIFTEEN_MINUTE_SEGMENT_SIZE,this.fifteenMinTimeline.getSegmentSize());assertEquals(SegmentedTimeline.FIRST_MONDAY_AFTER_1900 + 36 * this.fifteenMinTimeline.getSegmentSize(),this.fifteenMinTimeline.getStartTime());assertEquals(28,this.fifteenMinTimeline.getSegmentsIncluded());assertEquals(68,this.fifteenMinTimeline.getSegmentsExcluded());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsSegment",0,"/** * Tests one segment of the ms timeline. Internal indices inside one segment as well as adjacent segments are verified.*/public void testMsSegment(){verifyOneSegment(this.msTimeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2Segment",0,"/** * Tests one segment of the ms timeline. Internal indices inside one segment as well as adjacent segments are verified.*/public void testMs2Segment(){verifyOneSegment(this.ms2Timeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridaySegment",0,"/** * Tests one segment of the Monday through Friday timeline. Internal indices inside one segment as well as adjacent segments are verified.*/public void testMondayThroughFridaySegment(){verifyOneSegment(this.mondayFridayTimeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinSegment",0,"/** * Tests one segment of the Fifteen timeline. Internal indices inside one segment as well as adjacent segments are verified.*/public void testFifteenMinSegment(){verifyOneSegment(this.fifteenMinTimeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsInc",0,"/** * Tests the inc methods on the msTimeline.*/public void testMsInc(){verifyInc(this.msTimeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2Inc",0,"/** * Tests the inc methods on the msTimeline.*/public void testMs2Inc(){verifyInc(this.ms2Timeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridayInc",0,"/** * Tests the inc methods on the Monday through Friday timeline.*/public void testMondayThroughFridayInc(){verifyInc(this.mondayFridayTimeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinInc",0,"/** * Tests the inc methods on the Fifteen minute timeline.*/public void testFifteenMinInc(){verifyInc(this.fifteenMinTimeline);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsIncludedAndExcludedSegments",0,"/** * Tests that the msTimeline's included and excluded segments are being calculated correctly.*/public void testMsIncludedAndExcludedSegments(){verifyIncludedAndExcludedSegments(this.msTimeline,0);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2IncludedAndExcludedSegments",0,"/** * Tests that the ms2Timeline's included and excluded segments are being calculated correctly.*/public void testMs2IncludedAndExcludedSegments(){verifyIncludedAndExcludedSegments(this.ms2Timeline,1);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThroughFridayIncludedAndExcludedSegments",0,"/** * Tests that the Monday through Friday timeline's included and excluded segments are being calculated correctly. The test is performed starting on the first monday after 1/1/2000 and for five years.*/public void testMondayThroughFridayIncludedAndExcludedSegments(){verifyIncludedAndExcludedSegments(this.mondayFridayTimeline,this.monday.getTime().getTime());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinIncludedAndExcludedSegments",0,"/** * Tests that the Fifteen-Min timeline's included and excluded segments are being calculated correctly. The test is performed starting on the first monday after 1/1/2000 and for five years.*/public void testFifteenMinIncludedAndExcludedSegments(){verifyIncludedAndExcludedSegments(this.fifteenMinTimeline,this.monday9am.getTime().getTime());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsExceptionSegments",0,"/** * Tests methods related to exceptions methods in the msTimeline.* @throws ParseException if there is a parsing error.*/public void testMsExceptionSegments()throws ParseException {verifyExceptionSegments(this.msTimeline,MS_EXCEPTIONS,NUMBER_FORMAT);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2BaseTimelineExceptionSegments",0,"/** * Tests methods related to exceptions methods in the ms2BaseTimeline.* @throws ParseException if there is a parsing error.*/public void testMs2BaseTimelineExceptionSegments()throws ParseException {verifyExceptionSegments(this.ms2BaseTimeline,MS2_BASE_TIMELINE_EXCEPTIONS,NUMBER_FORMAT);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMondayThoughFridayExceptionSegments",0,"/** * Tests methods related to exceptions methods in the mondayFridayTimeline.* @throws ParseException if there is a parsing error.*/public void testMondayThoughFridayExceptionSegments()throws ParseException {verifyExceptionSegments(this.mondayFridayTimeline,US_HOLIDAYS,DATE_FORMAT);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinExceptionSegments",0,"/** * Tests methods related to exceptions methods in the fifteenMinTimeline.* @throws ParseException if there is a parsing error.*/public void testFifteenMinExceptionSegments()throws ParseException {verifyExceptionSegments(this.fifteenMinTimeline,FIFTEEN_MIN_EXCEPTIONS,DATE_TIME_FORMAT);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMsTranslations",0,"/** * Tests translations for 1-ms timeline* @throws ParseException if there is a parsing error.*/public void testMsTranslations()throws ParseException {verifyFillInExceptions(this.msTimeline,MS_EXCEPTIONS,NUMBER_FORMAT);verifyTranslations(this.msTimeline,0);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2BaseTimelineTranslations",0,"/** * Tests translations for the base timeline used for the ms2Timeline* @throws ParseException if there is a parsing error.*/public void testMs2BaseTimelineTranslations()throws ParseException {verifyFillInExceptions(this.ms2BaseTimeline,MS2_BASE_TIMELINE_EXCEPTIONS,NUMBER_FORMAT);verifyTranslations(this.ms2BaseTimeline,0);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testMs2Translations",0,"/** * Tests translations for the Monday through Friday timeline* @throws ParseException if there is a parsing error.*/public void testMs2Translations()throws ParseException {fillInBaseTimelineExceptions(this.ms2Timeline,MS2_BASE_TIMELINE_EXCEPTIONS,NUMBER_FORMAT);fillInBaseTimelineExclusionsAsExceptions(this.ms2Timeline,0,5000);verifyTranslations(this.ms2Timeline,1);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testFifteenMinTranslations",0,"/** * Tests translations for the Fifteen Min timeline* @throws ParseException if there is a parsing error.*/public void testFifteenMinTranslations()throws ParseException {verifyFillInExceptions(this.fifteenMinTimeline,FIFTEEN_MIN_EXCEPTIONS,DATE_TIME_FORMAT);fillInBaseTimelineExceptions(this.fifteenMinTimeline,US_HOLIDAYS,DATE_FORMAT);fillInBaseTimelineExclusionsAsExceptions(this.fifteenMinTimeline,this.monday9am.getTime().getTime(),this.monday9am.getTime().getTime()+ FIVE_YEARS);verifyTranslations(this.fifteenMinTimeline,this.monday9am.getTime().getTime());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){verifySerialization(this.msTimeline);verifySerialization(this.ms2Timeline);verifySerialization(this.ms2BaseTimeline);verifySerialization(SegmentedTimeline.newMondayThroughFridayTimeline());verifySerialization(SegmentedTimeline.newFifteenMinuteTimeline());}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){SegmentedTimeline l1=new SegmentedTimeline(1000,5,2);SegmentedTimeline l2=null;try {l2=(SegmentedTimeline)l1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(l1 != l2);assertTrue(l1.getClass()== l2.getClass());assertTrue(l1.equals(l2));}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){SegmentedTimeline l1=new SegmentedTimeline(1000,5,2);SegmentedTimeline l2=new SegmentedTimeline(1000,5,2);assertTrue(l1.equals(l2));l1=new SegmentedTimeline(1000,5,2);l2=new SegmentedTimeline(1001,5,2);assertFalse(l1.equals(l2));l1=new SegmentedTimeline(1000,5,2);l2=new SegmentedTimeline(1000,4,2);assertFalse(l1.equals(l2));l1=new SegmentedTimeline(1000,5,2);l2=new SegmentedTimeline(1000,5,1);assertFalse(l1.equals(l2));l1=new SegmentedTimeline(1000,5,2);l2=new SegmentedTimeline(1000,5,2);l1.setStartTime(1234L);assertFalse(l1.equals(l2));l2.setStartTime(1234L);assertTrue(l1.equals(l2));}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){SegmentedTimeline l1=new SegmentedTimeline(1000,5,2);SegmentedTimeline l2=new SegmentedTimeline(1000,5,2);assertTrue(l1.equals(l2));int h1=l1.hashCode();int h2=l2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){SegmentedTimeline l1=new SegmentedTimeline(1000,5,2);SegmentedTimeline l2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(l1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));l2=(SegmentedTimeline)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=l1.equals(l2);assertTrue(b);}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testBasicSegmentedTimeline",0,"/** * Tests a basic segmented timeline.*/public void testBasicSegmentedTimeline(){SegmentedTimeline stl=new SegmentedTimeline(10,2,3);stl.setStartTime(946684800000L);assertFalse(stl.containsDomainValue(946684799999L));assertTrue(stl.containsDomainValue(946684800000L));assertTrue(stl.containsDomainValue(946684800019L));assertFalse(stl.containsDomainValue(946684800020L));assertFalse(stl.containsDomainValue(946684800049L));assertTrue(stl.containsDomainValue(946684800050L));assertTrue(stl.containsDomainValue(946684800069L));assertFalse(stl.containsDomainValue(946684800070L));assertFalse(stl.containsDomainValue(946684800099L));assertTrue(stl.containsDomainValue(946684800100L));assertEquals(0,stl.toTimelineValue(946684800000L));assertEquals(19,stl.toTimelineValue(946684800019L));assertEquals(20,stl.toTimelineValue(946684800020L));assertEquals(20,stl.toTimelineValue(946684800049L));assertEquals(20,stl.toTimelineValue(946684800050L));assertEquals(39,stl.toTimelineValue(946684800069L));assertEquals(40,stl.toTimelineValue(946684800070L));assertEquals(40,stl.toTimelineValue(946684800099L));assertEquals(40,stl.toTimelineValue(946684800100L));assertEquals(946684800000L,stl.toMillisecond(0));assertEquals(946684800019L,stl.toMillisecond(19));assertEquals(946684800050L,stl.toMillisecond(20));assertEquals(946684800069L,stl.toMillisecond(39));assertEquals(946684800100L,stl.toMillisecond(40));}"
"org.jfree.chart.axis.junit.SegmentedTimelineTests.testSegmentedTimelineWithException1",0,"/** * Tests a basic time line with one exception.*/public void testSegmentedTimelineWithException1(){SegmentedTimeline stl=new SegmentedTimeline(10,2,3);stl.setStartTime(946684800000L);stl.addException(946684800050L);assertFalse(stl.containsDomainValue(946684799999L));assertTrue(stl.containsDomainValue(946684800000L));assertTrue(stl.containsDomainValue(946684800019L));assertFalse(stl.containsDomainValue(946684800020L));assertFalse(stl.containsDomainValue(946684800049L));assertFalse(stl.containsDomainValue(946684800050L));assertFalse(stl.containsDomainValue(946684800059L));assertTrue(stl.containsDomainValue(946684800060L));assertTrue(stl.containsDomainValue(946684800069L));assertFalse(stl.containsDomainValue(946684800070L));assertFalse(stl.containsDomainValue(946684800099L));assertTrue(stl.containsDomainValue(946684800100L));assertEquals(0,stl.toTimelineValue(946684800000L));assertEquals(19,stl.toTimelineValue(946684800019L));assertEquals(20,stl.toTimelineValue(946684800020L));assertEquals(20,stl.toTimelineValue(946684800049L));assertEquals(20,stl.toTimelineValue(946684800050L));assertEquals(29,stl.toTimelineValue(946684800069L));assertEquals(30,stl.toTimelineValue(946684800070L));assertEquals(30,stl.toTimelineValue(946684800099L));assertEquals(30,stl.toTimelineValue(946684800100L));assertEquals(946684800000L,stl.toMillisecond(0));assertEquals(946684800019L,stl.toMillisecond(19));assertEquals(946684800060L,stl.toMillisecond(20));assertEquals(946684800069L,stl.toMillisecond(29));assertEquals(946684800100L,stl.toMillisecond(30));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testConstructor",0,"/** * Checks that a new instance is empty.*/public void testConstructor(){DefaultKeyedValues d=new DefaultKeyedValues();assertEquals(0,d.getItemCount());}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testGetItemCount",0,"/** * Some checks for the getItemCount()method.*/public void testGetItemCount(){DefaultKeyedValues d=new DefaultKeyedValues();assertEquals(0,d.getItemCount());d.addValue(""A"",1.0);assertEquals(1,d.getItemCount());d.addValue(""B"",2.0);assertEquals(2,d.getItemCount());d.clear();assertEquals(0,d.getItemCount());}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testGetKeys",0,"/** * Some checks for the getKeys()method.*/public void testGetKeys(){DefaultKeyedValues d=new DefaultKeyedValues();List keys=d.getKeys();assertTrue(keys.isEmpty());d.addValue(""A"",1.0);keys=d.getKeys();assertEquals(1,keys.size());assertTrue(keys.contains(""A""));d.addValue(""B"",2.0);keys=d.getKeys();assertEquals(2,keys.size());assertTrue(keys.contains(""A""));assertTrue(keys.contains(""B""));d.clear();keys=d.getKeys();assertEquals(0,keys.size());}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testClear",0,"/** * A simple test for the clear()method.*/public void testClear(){DefaultKeyedValues v1=new DefaultKeyedValues();v1.addValue(""A"",1.0);v1.addValue(""B"",2.0);assertEquals(2,v1.getItemCount());v1.clear();assertEquals(0,v1.getItemCount());}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testGetValue",0,"/** * Some checks for the getValue()methods.*/public void testGetValue(){DefaultKeyedValues v1=new DefaultKeyedValues();try {v1.getValue(-1);assertTrue(false);}catch(IndexOutOfBoundsException e){}try {v1.getValue(0);assertTrue(false);}catch(IndexOutOfBoundsException e){}DefaultKeyedValues v2=new DefaultKeyedValues();v2.addValue(""K1"",new Integer(1));v2.addValue(""K2"",new Integer(2));v2.addValue(""K3"",new Integer(3));assertEquals(new Integer(3),v2.getValue(2));boolean pass=false;try {v2.getValue(""KK"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testGetKey",0,"/** * Some checks for the getKey()methods.*/public void testGetKey(){DefaultKeyedValues v1=new DefaultKeyedValues();try {v1.getKey(-1);assertTrue(false);}catch(IndexOutOfBoundsException e){}try {v1.getKey(0);assertTrue(false);}catch(IndexOutOfBoundsException e){}DefaultKeyedValues v2=new DefaultKeyedValues();v2.addValue(""K1"",new Integer(1));v2.addValue(""K2"",new Integer(2));v2.addValue(""K3"",new Integer(3));assertEquals(""K2"",v2.getKey(1));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex",0,"/** * Some checks for the getIndex()methods.*/public void testGetIndex(){DefaultKeyedValues v1=new DefaultKeyedValues();assertEquals(-1,v1.getIndex(""K1""));DefaultKeyedValues v2=new DefaultKeyedValues();v2.addValue(""K1"",new Integer(1));v2.addValue(""K2"",new Integer(2));v2.addValue(""K3"",new Integer(3));assertEquals(2,v2.getIndex(""K3""));boolean pass=false;try {v2.getIndex(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testGetIndex2",0,"/** * Another check for the getIndex(Comparable)method.*/public void testGetIndex2(){DefaultKeyedValues v=new DefaultKeyedValues();assertEquals(-1,v.getIndex(""K1""));v.addValue(""K1"",1.0);assertEquals(0,v.getIndex(""K1""));v.removeValue(""K1"");assertEquals(-1,v.getIndex(""K1""));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testAddValue",0,"/** * Some checks for the addValue()method.*/public void testAddValue(){DefaultKeyedValues v1=new DefaultKeyedValues();v1.addValue(""A"",1.0);assertEquals(new Double(1.0),v1.getValue(""A""));v1.addValue(""B"",2.0);assertEquals(new Double(2.0),v1.getValue(""B""));v1.addValue(""B"",3.0);assertEquals(new Double(3.0),v1.getValue(""B""));assertEquals(2,v1.getItemCount());v1.addValue(""A"",null);assertNull(v1.getValue(""A""));assertEquals(2,v1.getItemCount());boolean pass=false;try {v1.addValue(null,99.9);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testInsertValue",0,"/** * Some checks for the insertValue()method.*/public void testInsertValue(){DefaultKeyedValues v1=new DefaultKeyedValues();v1.insertValue(0,""A"",1.0);assertEquals(new Double(1.0),v1.getValue(0));v1.insertValue(0,""B"",2.0);assertEquals(new Double(2.0),v1.getValue(0));assertEquals(new Double(1.0),v1.getValue(1));v1.insertValue(2,""C"",3.0);assertEquals(new Double(2.0),v1.getValue(0));assertEquals(new Double(1.0),v1.getValue(1));assertEquals(new Double(3.0),v1.getValue(2));v1.insertValue(2,""B"",4.0);assertEquals(new Double(1.0),v1.getValue(0));assertEquals(new Double(3.0),v1.getValue(1));assertEquals(new Double(4.0),v1.getValue(2));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){DefaultKeyedValues v1=new DefaultKeyedValues();v1.addValue(""V1"",new Integer(1));v1.addValue(""V2"",null);v1.addValue(""V3"",new Integer(3));DefaultKeyedValues v2=null;try {v2=(DefaultKeyedValues)v1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(v1 != v2);assertTrue(v1.getClass()== v2.getClass());assertTrue(v1.equals(v2));v2.setValue(""V1"",new Integer(44));assertFalse(v1.equals(v2));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testInsertAndRetrieve",0,"/** * Check that inserting and retrieving values works as expected.*/public void testInsertAndRetrieve(){DefaultKeyedValues data=new DefaultKeyedValues();data.addValue(""A"",new Double(1.0));data.addValue(""B"",new Double(2.0));data.addValue(""C"",new Double(3.0));data.addValue(""D"",null);assertEquals(data.getKey(0),""A"");assertEquals(data.getKey(1),""B"");assertEquals(data.getKey(2),""C"");assertEquals(data.getKey(3),""D"");assertEquals(data.getValue(""A""),new Double(1.0));assertEquals(data.getValue(""B""),new Double(2.0));assertEquals(data.getValue(""C""),new Double(3.0));assertEquals(data.getValue(""D""),null);assertEquals(data.getValue(0),new Double(1.0));assertEquals(data.getValue(1),new Double(2.0));assertEquals(data.getValue(2),new Double(3.0));assertEquals(data.getValue(3),null);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testRemoveValue",0,"/** * Some tests for the removeValue()method.*/public void testRemoveValue(){DefaultKeyedValues data=new DefaultKeyedValues();data.addValue(""A"",new Double(1.0));data.addValue(""B"",null);data.addValue(""C"",new Double(3.0));data.addValue(""D"",new Double(2.0));assertEquals(1,data.getIndex(""B""));data.removeValue(""B"");assertEquals(-1,data.getIndex(""B""));boolean pass=false;try {data.removeValue(""XXX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testSortByKeyAscending",0,"/** * Tests sorting of data by key (ascending).*/public void testSortByKeyAscending(){DefaultKeyedValues data=new DefaultKeyedValues();data.addValue(""C"",new Double(1.0));data.addValue(""B"",null);data.addValue(""D"",new Double(3.0));data.addValue(""A"",new Double(2.0));data.sortByKeys(SortOrder.ASCENDING);assertEquals(data.getKey(0),""A"");assertEquals(data.getKey(1),""B"");assertEquals(data.getKey(2),""C"");assertEquals(data.getKey(3),""D"");assertEquals(data.getValue(""A""),new Double(2.0));assertEquals(data.getValue(""B""),null);assertEquals(data.getValue(""C""),new Double(1.0));assertEquals(data.getValue(""D""),new Double(3.0));assertEquals(data.getValue(0),new Double(2.0));assertEquals(data.getValue(1),null);assertEquals(data.getValue(2),new Double(1.0));assertEquals(data.getValue(3),new Double(3.0));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testSortByKeyDescending",0,"/** * Tests sorting of data by key (descending).*/public void testSortByKeyDescending(){DefaultKeyedValues data=new DefaultKeyedValues();data.addValue(""C"",new Double(1.0));data.addValue(""B"",null);data.addValue(""D"",new Double(3.0));data.addValue(""A"",new Double(2.0));data.sortByKeys(SortOrder.DESCENDING);assertEquals(data.getKey(0),""D"");assertEquals(data.getKey(1),""C"");assertEquals(data.getKey(2),""B"");assertEquals(data.getKey(3),""A"");assertEquals(data.getValue(""A""),new Double(2.0));assertEquals(data.getValue(""B""),null);assertEquals(data.getValue(""C""),new Double(1.0));assertEquals(data.getValue(""D""),new Double(3.0));assertEquals(data.getValue(0),new Double(3.0));assertEquals(data.getValue(1),new Double(1.0));assertEquals(data.getValue(2),null);assertEquals(data.getValue(3),new Double(2.0));}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testSortByValueAscending",0,"/** * Tests sorting of data by value (ascending).*/public void testSortByValueAscending(){DefaultKeyedValues data=new DefaultKeyedValues();data.addValue(""C"",new Double(1.0));data.addValue(""B"",null);data.addValue(""D"",new Double(3.0));data.addValue(""A"",new Double(2.0));data.sortByValues(SortOrder.ASCENDING);assertEquals(data.getKey(0),""C"");assertEquals(data.getKey(1),""A"");assertEquals(data.getKey(2),""D"");assertEquals(data.getKey(3),""B"");assertEquals(data.getValue(""A""),new Double(2.0));assertEquals(data.getValue(""B""),null);assertEquals(data.getValue(""C""),new Double(1.0));assertEquals(data.getValue(""D""),new Double(3.0));assertEquals(data.getValue(0),new Double(1.0));assertEquals(data.getValue(1),new Double(2.0));assertEquals(data.getValue(2),new Double(3.0));assertEquals(data.getValue(3),null);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testSortByValueDescending",0,"/** * Tests sorting of data by key (descending).*/public void testSortByValueDescending(){DefaultKeyedValues data=new DefaultKeyedValues();data.addValue(""C"",new Double(1.0));data.addValue(""B"",null);data.addValue(""D"",new Double(3.0));data.addValue(""A"",new Double(2.0));data.sortByValues(SortOrder.DESCENDING);assertEquals(data.getKey(0),""D"");assertEquals(data.getKey(1),""A"");assertEquals(data.getKey(2),""C"");assertEquals(data.getKey(3),""B"");assertEquals(data.getValue(""A""),new Double(2.0));assertEquals(data.getValue(""B""),null);assertEquals(data.getValue(""C""),new Double(1.0));assertEquals(data.getValue(""D""),new Double(3.0));assertEquals(data.getValue(0),new Double(3.0));assertEquals(data.getValue(1),new Double(2.0));assertEquals(data.getValue(2),new Double(1.0));assertEquals(data.getValue(3),null);}"
"org.jfree.data.junit.DefaultKeyedValuesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultKeyedValues v1=new DefaultKeyedValues();v1.addValue(""Key 1"",new Double(23));v1.addValue(""Key 2"",null);v1.addValue(""Key 3"",new Double(42));DefaultKeyedValues v2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(v1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));v2=(DefaultKeyedValues)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(v1,v2);}"
"org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.testEquals",0,"/** * Tests that the equals method can distinguish all fields.*/public void testEquals(){HighLowItemLabelGenerator g1=new HighLowItemLabelGenerator();HighLowItemLabelGenerator g2=new HighLowItemLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new HighLowItemLabelGenerator(new SimpleDateFormat(""d-MMM-yyyy""),NumberFormat.getInstance());assertFalse(g1.equals(g2));g2=new HighLowItemLabelGenerator(new SimpleDateFormat(""d-MMM-yyyy""),NumberFormat.getInstance());assertTrue(g1.equals(g2));g1=new HighLowItemLabelGenerator(new SimpleDateFormat(""d-MMM-yyyy""),new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2=new HighLowItemLabelGenerator(new SimpleDateFormat(""d-MMM-yyyy""),new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){HighLowItemLabelGenerator g1=new HighLowItemLabelGenerator();HighLowItemLabelGenerator g2=null;try {g2=(HighLowItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){HighLowItemLabelGenerator g1=new HighLowItemLabelGenerator();HighLowItemLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(HighLowItemLabelGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){StandardDialRange r1=new StandardDialRange();StandardDialRange r2=new StandardDialRange();assertTrue(r1.equals(r2));r1.setLowerBound(1.1);assertFalse(r1.equals(r2));r2.setLowerBound(1.1);assertTrue(r1.equals(r2));r1.setUpperBound(11.1);assertFalse(r1.equals(r2));r2.setUpperBound(11.1);assertTrue(r1.equals(r2));r1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(r1.equals(r2));r2.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(r1.equals(r2));r1.setVisible(false);assertFalse(r1.equals(r2));r2.setVisible(false);assertTrue(r1.equals(r2));}"
"org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){StandardDialRange r1=new StandardDialRange();StandardDialRange r2=new StandardDialRange();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardDialRange r1=new StandardDialRange();StandardDialRange r2=null;try {r2=(StandardDialRange)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();r1.addChangeListener(l1);assertTrue(r1.hasListener(l1));assertFalse(r2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.StandardDialRangeTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardDialRange r1=new StandardDialRange();StandardDialRange r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StandardDialRange)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.data.xy.junit.OHLCDataItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){OHLCDataItem i1=new OHLCDataItem(new Date(1L),1.0,2.0,3.0,4.0,5.0);OHLCDataItem i2=new OHLCDataItem(new Date(1L),1.0,2.0,3.0,4.0,5.0);assertTrue(i1.equals(i2));assertTrue(i2.equals(i1));}"
"org.jfree.data.xy.junit.OHLCDataItemTests.testCloning",0,"/** * Instances of this class are immutable - cloning not required.*/public void testCloning(){OHLCDataItem i1=new OHLCDataItem(new Date(1L),1.0,2.0,3.0,4.0,5.0);assertFalse(i1 instanceof Cloneable);}"
"org.jfree.data.xy.junit.OHLCDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){OHLCDataItem i1=new OHLCDataItem(new Date(1L),1.0,2.0,3.0,4.0,5.0);OHLCDataItem i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(OHLCDataItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){OHLCSeries s1=new OHLCSeries(""s1"");OHLCSeries s2=new OHLCSeries(""s1"");assertTrue(s1.equals(s2));s1=new OHLCSeries(""s2"");assertFalse(s1.equals(s2));s2=new OHLCSeries(""s2"");assertTrue(s1.equals(s2));s1.add(new Year(2006),2.0,4.0,1.0,3.0);assertFalse(s1.equals(s2));s2.add(new Year(2006),2.0,4.0,1.0,3.0);assertTrue(s2.equals(s1));s1.add(new Year(2008),2.0,4.0,1.0,3.0);assertFalse(s1.equals(s2));s2.add(new Year(2008),2.0,4.0,1.0,3.0);assertTrue(s2.equals(s1));s1.remove(new Year(2008));assertFalse(s1.equals(s2));s2.remove(new Year(2008));assertTrue(s2.equals(s1));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){OHLCSeries s1=new OHLCSeries(""s1"");s1.add(new Year(2006),2.0,4.0,1.0,3.0);OHLCSeries s2=null;try {s2=(OHLCSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){OHLCSeries s1=new OHLCSeries(""s1"");s1.add(new Year(2006),2.0,4.0,1.0,3.0);OHLCSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(OHLCSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testIndexOf",0,"/** * Simple test for the indexOf()method.*/public void testIndexOf(){OHLCSeries s1=new OHLCSeries(""s1"");s1.add(new Year(2006),2.0,4.0,1.0,3.0);s1.add(new Year(2011),2.0,4.0,1.0,3.0);s1.add(new Year(2010),2.0,4.0,1.0,3.0);assertEquals(0,s1.indexOf(new Year(2006)));assertEquals(1,s1.indexOf(new Year(2010)));assertEquals(2,s1.indexOf(new Year(2011)));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testRemove",0,"/** * Simple test for the remove()method.*/public void testRemove(){OHLCSeries s1=new OHLCSeries(""s1"");s1.add(new Year(2006),2.0,4.0,1.0,3.0);s1.add(new Year(2011),2.1,4.1,1.1,3.1);s1.add(new Year(2010),2.2,4.2,1.2,3.2);assertEquals(3,s1.getItemCount());s1.remove(new Year(2010));assertEquals(new Year(2011),s1.getPeriod(1));s1.remove(new Year(2006));assertEquals(new Year(2011),s1.getPeriod(0));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testAdditionOfDuplicatePeriod",0,"/** * If you add a duplicate period,an exception should be thrown.*/public void testAdditionOfDuplicatePeriod(){OHLCSeries s1=new OHLCSeries(""s1"");s1.add(new Year(2006),1.0,1.0,1.0,1.0);boolean pass=false;try {s1.add(new Year(2006),1.0,1.0,1.0,1.0);}catch(SeriesException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testSetMaximumItemCount",0,"/** * A simple check that the maximumItemCount attribute is working.*/public void testSetMaximumItemCount(){OHLCSeries s1=new OHLCSeries(""s1"");assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());s1.setMaximumItemCount(2);assertEquals(2,s1.getMaximumItemCount());s1.add(new Year(2006),1.0,1.1,1.1,1.1);s1.add(new Year(2007),2.0,2.2,2.2,2.2);s1.add(new Year(2008),3.0,3.3,3.3,3.3);assertEquals(new Year(2007),s1.getPeriod(0));assertEquals(new Year(2008),s1.getPeriod(1));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testSetMaximumItemCount2",0,"/** * Check that the maximum item count can be applied retrospectively.*/public void testSetMaximumItemCount2(){OHLCSeries s1=new OHLCSeries(""s1"");s1.add(new Year(2006),1.0,1.1,1.1,1.1);s1.add(new Year(2007),2.0,2.2,2.2,2.2);s1.add(new Year(2008),3.0,3.3,3.3,3.3);s1.setMaximumItemCount(2);assertEquals(new Year(2007),s1.getPeriod(0));assertEquals(new Year(2008),s1.getPeriod(1));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesTests.testClear",0,"/** * Some checks for the clear()method.*/public void testClear(){OHLCSeries s1=new OHLCSeries(""S1"");s1.addChangeListener(this);s1.clear();assertNull(this.lastEvent);assertTrue(s1.isEmpty());s1.add(new Year(2006),1.0,1.1,1.1,1.1);assertFalse(s1.isEmpty());s1.clear();assertNotNull(this.lastEvent);assertTrue(s1.isEmpty());}"
"org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testEquals",0,"/** * A series of tests for the equals()method.*/public void testEquals(){String f1=""{1}"";String f2=""{2}"";NumberFormat xnf1=new DecimalFormat(""0.00"");NumberFormat xnf2=new DecimalFormat(""0.000"");NumberFormat ynf1=new DecimalFormat(""0.00"");NumberFormat ynf2=new DecimalFormat(""0.000"");NumberFormat znf1=new DecimalFormat(""0.00"");NumberFormat znf2=new DecimalFormat(""0.000"");BubbleXYItemLabelGenerator g1=null;BubbleXYItemLabelGenerator g2=null;g1=new BubbleXYItemLabelGenerator(f1,xnf1,ynf1,znf1);g2=new BubbleXYItemLabelGenerator(f1,xnf1,ynf1,znf1);assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new BubbleXYItemLabelGenerator(f2,xnf1,ynf1,znf1);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f2,xnf1,ynf1,znf1);assertTrue(g1.equals(g2));g1=new BubbleXYItemLabelGenerator(f2,xnf2,ynf1,znf1);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f2,xnf2,ynf1,znf1);assertTrue(g1.equals(g2));g1=new BubbleXYItemLabelGenerator(f2,xnf2,ynf2,znf1);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f2,xnf2,ynf2,znf1);assertTrue(g1.equals(g2));g1=new BubbleXYItemLabelGenerator(f2,xnf2,ynf2,znf2);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f2,xnf2,ynf2,znf2);assertTrue(g1.equals(g2));DateFormat xdf1=new SimpleDateFormat(""d-MMM"");DateFormat xdf2=new SimpleDateFormat(""d-MMM-yyyy"");DateFormat ydf1=new SimpleDateFormat(""d-MMM"");DateFormat ydf2=new SimpleDateFormat(""d-MMM-yyyy"");DateFormat zdf1=new SimpleDateFormat(""d-MMM"");DateFormat zdf2=new SimpleDateFormat(""d-MMM-yyyy"");g1=new BubbleXYItemLabelGenerator(f1,xdf1,ydf1,zdf1);g2=new BubbleXYItemLabelGenerator(f1,xdf1,ydf1,zdf1);assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new BubbleXYItemLabelGenerator(f1,xdf2,ydf1,zdf1);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f1,xdf2,ydf1,zdf1);assertTrue(g1.equals(g2));g1=new BubbleXYItemLabelGenerator(f1,xdf2,ydf2,zdf1);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f1,xdf2,ydf2,zdf1);assertTrue(g1.equals(g2));g1=new BubbleXYItemLabelGenerator(f1,xdf2,ydf2,zdf2);assertFalse(g1.equals(g2));g2=new BubbleXYItemLabelGenerator(f1,xdf2,ydf2,zdf2);assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BubbleXYItemLabelGenerator g1=new BubbleXYItemLabelGenerator();BubbleXYItemLabelGenerator g2=null;try {g2=(BubbleXYItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Clone failed."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BubbleXYItemLabelGenerator g1=new BubbleXYItemLabelGenerator();BubbleXYItemLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(BubbleXYItemLabelGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests.testGenerateLabel",0,"/** * Some checks for the testGenerateLabel()method.*/public void testGenerateLabel(){XYSeries s1=new XYSeries(""S1"");s1.add(1.0,2.0);s1.add(2.2,3.3);XYSeriesCollection dataset=new XYSeriesCollection(s1);BubbleXYItemLabelGenerator g=new BubbleXYItemLabelGenerator();assertEquals(""{3}"",g.generateLabel(dataset,0,0));assertEquals(""{3}"",g.generateLabel(dataset,0,1));}"
"org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){MinMaxCategoryRenderer r1=new MinMaxCategoryRenderer();MinMaxCategoryRenderer r2=new MinMaxCategoryRenderer();assertEquals(r1,r2);r1.setDrawLines(true);assertFalse(r1.equals(r2));r2.setDrawLines(true);assertTrue(r1.equals(r2));r1.setGroupPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(r1.equals(r2));r2.setGroupPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(r1.equals(r2));r1.setGroupStroke(new BasicStroke(1.2f));assertFalse(r1.equals(r2));r2.setGroupStroke(new BasicStroke(1.2f));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){MinMaxCategoryRenderer r1=new MinMaxCategoryRenderer();MinMaxCategoryRenderer r2=new MinMaxCategoryRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){MinMaxCategoryRenderer r1=new MinMaxCategoryRenderer();MinMaxCategoryRenderer r2=null;try {r2=(MinMaxCategoryRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MinMaxCategoryRenderer r1=new MinMaxCategoryRenderer();MinMaxCategoryRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(MinMaxCategoryRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new MinMaxCategoryRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.block.junit.BlockContainerTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){BlockContainer c1=new BlockContainer(new FlowArrangement());BlockContainer c2=new BlockContainer(new FlowArrangement());assertTrue(c1.equals(c2));assertTrue(c2.equals(c2));c1.setArrangement(new ColumnArrangement());assertFalse(c1.equals(c2));c2.setArrangement(new ColumnArrangement());assertTrue(c1.equals(c2));c1.add(new EmptyBlock(1.2,3.4));assertFalse(c1.equals(c2));c2.add(new EmptyBlock(1.2,3.4));assertTrue(c1.equals(c2));}"
"org.jfree.chart.block.junit.BlockContainerTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BlockContainer c1=new BlockContainer(new FlowArrangement());c1.add(new EmptyBlock(1.2,3.4));BlockContainer c2=null;try {c2=(BlockContainer)c1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));}"
"org.jfree.chart.block.junit.BlockContainerTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BlockContainer c1=new BlockContainer();c1.add(new EmptyBlock(1.2,3.4));BlockContainer c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(BlockContainer)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(c1,c2);}"
"org.jfree.data.xy.junit.XYIntervalTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYInterval i1=new XYInterval(1.0,2.0,3.0,2.5,3.5);XYInterval i2=new XYInterval(1.0,2.0,3.0,2.5,3.5);assertEquals(i1,i2);i1=new XYInterval(1.1,2.0,3.0,2.5,3.5);assertFalse(i1.equals(i2));i2=new XYInterval(1.1,2.0,3.0,2.5,3.5);assertTrue(i1.equals(i2));i1=new XYInterval(1.1,2.2,3.0,2.5,3.5);assertFalse(i1.equals(i2));i2=new XYInterval(1.1,2.2,3.0,2.5,3.5);assertTrue(i1.equals(i2));i1=new XYInterval(1.1,2.2,3.3,2.5,3.5);assertFalse(i1.equals(i2));i2=new XYInterval(1.1,2.2,3.3,2.5,3.5);assertTrue(i1.equals(i2));i1=new XYInterval(1.1,2.2,3.3,2.6,3.5);assertFalse(i1.equals(i2));i2=new XYInterval(1.1,2.2,3.3,2.6,3.5);assertTrue(i1.equals(i2));i1=new XYInterval(1.1,2.2,3.3,2.6,3.6);assertFalse(i1.equals(i2));i2=new XYInterval(1.1,2.2,3.3,2.6,3.6);assertTrue(i1.equals(i2));}"
"org.jfree.data.xy.junit.XYIntervalTests.testCloning",0,"/** * This class is immutable.*/public void testCloning(){XYInterval i1=new XYInterval(1.0,2.0,3.0,2.5,3.5);assertFalse(i1 instanceof Cloneable);}"
"org.jfree.data.xy.junit.XYIntervalTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYInterval i1=new XYInterval(1.0,2.0,3.0,2.5,3.5);XYInterval i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(XYInterval)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.chart.needle.junit.PlumNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){PlumNeedle n1=new PlumNeedle();PlumNeedle n2=new PlumNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.PlumNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){PlumNeedle n1=new PlumNeedle();PlumNeedle n2=null;try {n2=(PlumNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.PlumNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PlumNeedle n1=new PlumNeedle();PlumNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(PlumNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.data.time.junit.MovingAverageTests.test1",0,"/** * A test for the values calculated from a time series.*/public void test1(){TimeSeries source=createDailyTimeSeries1();TimeSeries maverage=MovingAverage.createMovingAverage(source,""Moving Average"",3,3);assertEquals(7,maverage.getItemCount());double value=maverage.getValue(0).doubleValue();assertEquals(14.1,value,EPSILON);value=maverage.getValue(1).doubleValue();assertEquals(13.4,value,EPSILON);value=maverage.getValue(2).doubleValue();assertEquals(14.433333333333,value,EPSILON);value=maverage.getValue(3).doubleValue();assertEquals(14.933333333333,value,EPSILON);value=maverage.getValue(4).doubleValue();assertEquals(19.8,value,EPSILON);value=maverage.getValue(5).doubleValue();assertEquals(15.25,value,EPSILON);value=maverage.getValue(6).doubleValue();assertEquals(12.5,value,EPSILON);}"
"org.jfree.chart.axis.junit.DateAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DateAxis a1=new DateAxis(""Test"");DateAxis a2=new DateAxis(""Test"");assertTrue(a1.equals(a2));assertFalse(a1.equals(null));assertFalse(a1.equals(""Some non-DateAxis object""));a1.setTickUnit(new DateTickUnit(DateTickUnit.DAY,7));assertFalse(a1.equals(a2));a2.setTickUnit(new DateTickUnit(DateTickUnit.DAY,7));assertTrue(a1.equals(a2));a1.setDateFormatOverride(new SimpleDateFormat(""yyyy""));assertFalse(a1.equals(a2));a2.setDateFormatOverride(new SimpleDateFormat(""yyyy""));assertTrue(a1.equals(a2));a1.setTickMarkPosition(DateTickMarkPosition.END);assertFalse(a1.equals(a2));a2.setTickMarkPosition(DateTickMarkPosition.END);assertTrue(a1.equals(a2));a1.setTimeline(SegmentedTimeline.newMondayThroughFridayTimeline());assertFalse(a1.equals(a2));a2.setTimeline(SegmentedTimeline.newMondayThroughFridayTimeline());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.DateAxisTests.test1472942",0,"/** * A test for bug report 1472942.  The DateFormat.equals()method is not checking the range attribute.*/public void test1472942(){DateAxis a1=new DateAxis(""Test"");DateAxis a2=new DateAxis(""Test"");assertTrue(a1.equals(a2));a1.setRange(new Date(1L),new Date(2L));assertFalse(a1.equals(a2));a2.setRange(new Date(1L),new Date(2L));assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.DateAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DateAxis a1=new DateAxis(""Test"");DateAxis a2=new DateAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.DateAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DateAxis a1=new DateAxis(""Test"");DateAxis a2=null;try {a2=(DateAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.DateAxisTests.testSetRange",0,"/** * Test that the setRange()method works.*/public void testSetRange(){DateAxis axis=new DateAxis(""Test Axis"");Calendar calendar=Calendar.getInstance();calendar.set(1999,Calendar.JANUARY,3);Date d1=calendar.getTime();calendar.set(1999,Calendar.JANUARY,31);Date d2=calendar.getTime();axis.setRange(d1,d2);DateRange range=(DateRange)axis.getRange();assertEquals(d1,range.getLowerDate());assertEquals(d2,range.getUpperDate());}"
"org.jfree.chart.axis.junit.DateAxisTests.testSetMaximumDate",0,"/** * Test that the setMaximumDate()method works.*/public void testSetMaximumDate(){DateAxis axis=new DateAxis(""Test Axis"");Date date=new Date();axis.setMaximumDate(date);assertEquals(date,axis.getMaximumDate());Date d1=new Date();Date d2=new Date(d1.getTime()+ 1);Date d0=new Date(d1.getTime()- 1);axis.setMaximumDate(d2);axis.setMinimumDate(d1);axis.setMaximumDate(d1);assertEquals(d0,axis.getMinimumDate());}"
"org.jfree.chart.axis.junit.DateAxisTests.testSetMinimumDate",0,"/** * Test that the setMinimumDate()method works.*/public void testSetMinimumDate(){DateAxis axis=new DateAxis(""Test Axis"");Date d1=new Date();Date d2=new Date(d1.getTime()+ 1);axis.setMaximumDate(d2);axis.setMinimumDate(d1);assertEquals(d1,axis.getMinimumDate());Date d3=new Date(d2.getTime()+ 1);axis.setMinimumDate(d2);assertEquals(d3,axis.getMaximumDate());}"
"org.jfree.chart.axis.junit.DateAxisTests.testJava2DToValue",0,"/** * Test the translation of Java2D values to data values.*/public void testJava2DToValue(){DateAxis axis=new DateAxis();axis.setRange(50.0,100.0);Rectangle2D dataArea=new Rectangle2D.Double(10.0,50.0,400.0,300.0);double y1=axis.java2DToValue(75.0,dataArea,RectangleEdge.LEFT);assertTrue(same(y1,95.8333333,1.0));double y2=axis.java2DToValue(75.0,dataArea,RectangleEdge.RIGHT);assertTrue(same(y2,95.8333333,1.0));double x1=axis.java2DToValue(75.0,dataArea,RectangleEdge.TOP);assertTrue(same(x1,58.125,1.0));double x2=axis.java2DToValue(75.0,dataArea,RectangleEdge.BOTTOM);assertTrue(same(x2,58.125,1.0));axis.setInverted(true);double y3=axis.java2DToValue(75.0,dataArea,RectangleEdge.LEFT);assertTrue(same(y3,54.1666667,1.0));double y4=axis.java2DToValue(75.0,dataArea,RectangleEdge.RIGHT);assertTrue(same(y4,54.1666667,1.0));double x3=axis.java2DToValue(75.0,dataArea,RectangleEdge.TOP);assertTrue(same(x3,91.875,1.0));double x4=axis.java2DToValue(75.0,dataArea,RectangleEdge.BOTTOM);assertTrue(same(x4,91.875,1.0));}"
"org.jfree.chart.axis.junit.DateAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DateAxis a1=new DateAxis(""Test Axis"");DateAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(DateAxis)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=a1.equals(a2);assertTrue(b);}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateYearA",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 1 year.*/public void testPreviousStandardDateYearA(){MyDateAxis axis=new MyDateAxis(""Year"");Year y2006=new Year(2006);Year y2007=new Year(2007);Date d0=new Date(y2006.getFirstMillisecond());Date d1=new Date(y2006.getFirstMillisecond()+ 500L);Date d2=new Date(y2006.getMiddleMillisecond());Date d3=new Date(y2006.getMiddleMillisecond()+ 500L);Date d4=new Date(y2006.getLastMillisecond());Date end=new Date(y2007.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.YEAR,1);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateYearB",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 10 years (just for the sake of having a multiple).*/public void testPreviousStandardDateYearB(){MyDateAxis axis=new MyDateAxis(""Year"");Year y2006=new Year(2006);Year y2007=new Year(2007);Date d0=new Date(y2006.getFirstMillisecond());Date d1=new Date(y2006.getFirstMillisecond()+ 500L);Date d2=new Date(y2006.getMiddleMillisecond());Date d3=new Date(y2006.getMiddleMillisecond()+ 500L);Date d4=new Date(y2006.getLastMillisecond());Date end=new Date(y2007.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.YEAR,10);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMonthA",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 1 month.*/public void testPreviousStandardDateMonthA(){MyDateAxis axis=new MyDateAxis(""Month"");Month nov2006=new Month(11,2006);Month dec2006=new Month(12,2006);Date d0=new Date(nov2006.getFirstMillisecond());Date d1=new Date(nov2006.getFirstMillisecond()+ 500L);Date d2=new Date(nov2006.getMiddleMillisecond());Date d3=new Date(nov2006.getMiddleMillisecond()+ 500L);Date d4=new Date(nov2006.getLastMillisecond());Date end=new Date(dec2006.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.MONTH,1);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMonthB",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 3 months (just for the sake of having a multiple).*/public void testPreviousStandardDateMonthB(){MyDateAxis axis=new MyDateAxis(""Month"");Month nov2006=new Month(11,2006);Month dec2006=new Month(12,2006);Date d0=new Date(nov2006.getFirstMillisecond());Date d1=new Date(nov2006.getFirstMillisecond()+ 500L);Date d2=new Date(nov2006.getMiddleMillisecond());Date d3=new Date(nov2006.getMiddleMillisecond()+ 500L);Date d4=new Date(nov2006.getLastMillisecond());Date end=new Date(dec2006.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.MONTH,3);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateDayA",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 1 day.*/public void testPreviousStandardDateDayA(){MyDateAxis axis=new MyDateAxis(""Day"");Day apr12007=new Day(1,4,2007);Day apr22007=new Day(2,4,2007);Date d0=new Date(apr12007.getFirstMillisecond());Date d1=new Date(apr12007.getFirstMillisecond()+ 500L);Date d2=new Date(apr12007.getMiddleMillisecond());Date d3=new Date(apr12007.getMiddleMillisecond()+ 500L);Date d4=new Date(apr12007.getLastMillisecond());Date end=new Date(apr22007.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.DAY,1);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateDayB",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 7 days (just for the sake of having a multiple).*/public void testPreviousStandardDateDayB(){MyDateAxis axis=new MyDateAxis(""Day"");Day apr12007=new Day(1,4,2007);Day apr22007=new Day(2,4,2007);Date d0=new Date(apr12007.getFirstMillisecond());Date d1=new Date(apr12007.getFirstMillisecond()+ 500L);Date d2=new Date(apr12007.getMiddleMillisecond());Date d3=new Date(apr12007.getMiddleMillisecond()+ 500L);Date d4=new Date(apr12007.getLastMillisecond());Date end=new Date(apr22007.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.DAY,7);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateHourA",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 1 hour.*/public void testPreviousStandardDateHourA(){MyDateAxis axis=new MyDateAxis(""Hour"");Hour h0=new Hour(12,1,4,2007);Hour h1=new Hour(13,1,4,2007);Date d0=new Date(h0.getFirstMillisecond());Date d1=new Date(h0.getFirstMillisecond()+ 500L);Date d2=new Date(h0.getMiddleMillisecond());Date d3=new Date(h0.getMiddleMillisecond()+ 500L);Date d4=new Date(h0.getLastMillisecond());Date end=new Date(h1.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.HOUR,1);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateHourB",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 6 hours (just for the sake of having a multiple).*/public void testPreviousStandardDateHourB(){MyDateAxis axis=new MyDateAxis(""Hour"");Hour h0=new Hour(12,1,4,2007);Hour h1=new Hour(13,1,4,2007);Date d0=new Date(h0.getFirstMillisecond());Date d1=new Date(h0.getFirstMillisecond()+ 500L);Date d2=new Date(h0.getMiddleMillisecond());Date d3=new Date(h0.getMiddleMillisecond()+ 500L);Date d4=new Date(h0.getLastMillisecond());Date end=new Date(h1.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.HOUR,6);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateSecondA",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 1 second.*/public void testPreviousStandardDateSecondA(){MyDateAxis axis=new MyDateAxis(""Second"");Second s0=new Second(58,31,12,1,4,2007);Second s1=new Second(59,31,12,1,4,2007);Date d0=new Date(s0.getFirstMillisecond());Date d1=new Date(s0.getFirstMillisecond()+ 50L);Date d2=new Date(s0.getMiddleMillisecond());Date d3=new Date(s0.getMiddleMillisecond()+ 50L);Date d4=new Date(s0.getLastMillisecond());Date end=new Date(s1.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.SECOND,1);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateSecondB",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 5 seconds (just for the sake of having a multiple).*/public void testPreviousStandardDateSecondB(){MyDateAxis axis=new MyDateAxis(""Second"");Second s0=new Second(58,31,12,1,4,2007);Second s1=new Second(59,31,12,1,4,2007);Date d0=new Date(s0.getFirstMillisecond());Date d1=new Date(s0.getFirstMillisecond()+ 50L);Date d2=new Date(s0.getMiddleMillisecond());Date d3=new Date(s0.getMiddleMillisecond()+ 50L);Date d4=new Date(s0.getLastMillisecond());Date end=new Date(s1.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.SECOND,5);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d1,end);psd=axis.previousStandardDate(d1,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d1.getTime());assertTrue(nsd.getTime()>= d1.getTime());axis.setRange(d2,end);psd=axis.previousStandardDate(d2,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d2.getTime());assertTrue(nsd.getTime()>= d2.getTime());axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d3,end);psd=axis.previousStandardDate(d3,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d3.getTime());assertTrue(nsd.getTime()>= d3.getTime());axis.setRange(d4,end);psd=axis.previousStandardDate(d4,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d4.getTime());assertTrue(nsd.getTime()>= d4.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMillisecondA",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 1 millisecond.*/public void testPreviousStandardDateMillisecondA(){MyDateAxis axis=new MyDateAxis(""Millisecond"");Millisecond m0=new Millisecond(458,58,31,12,1,4,2007);Millisecond m1=new Millisecond(459,58,31,12,1,4,2007);Date d0=new Date(m0.getFirstMillisecond());Date end=new Date(m1.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.MILLISECOND,1);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d0,end);psd=axis.previousStandardDate(d0,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d0,end);psd=axis.previousStandardDate(d0,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());}"
"org.jfree.chart.axis.junit.DateAxisTests.testPreviousStandardDateMillisecondB",0,"/** * A basic check for the testPreviousStandardDate()method when the tick unit is 10 milliseconds (just for the sake of having a multiple).*/public void testPreviousStandardDateMillisecondB(){MyDateAxis axis=new MyDateAxis(""Millisecond"");Millisecond m0=new Millisecond(458,58,31,12,1,4,2007);Millisecond m1=new Millisecond(459,58,31,12,1,4,2007);Date d0=new Date(m0.getFirstMillisecond());Date end=new Date(m1.getLastMillisecond());DateTickUnit unit=new DateTickUnit(DateTickUnit.MILLISECOND,10);axis.setTickUnit(unit);axis.setTickMarkPosition(DateTickMarkPosition.START);axis.setRange(d0,end);Date psd=axis.previousStandardDate(d0,unit);Date nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);axis.setRange(d0,end);psd=axis.previousStandardDate(d0,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());axis.setTickMarkPosition(DateTickMarkPosition.END);axis.setRange(d0,end);psd=axis.previousStandardDate(d0,unit);nsd=unit.addToDate(psd);assertTrue(psd.getTime()< d0.getTime());assertTrue(nsd.getTime()>= d0.getTime());}"
"org.jfree.chart.plot.junit.PlotTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields (note that  the dataset is NOT considered in the equals()method).*/public void testEquals(){PiePlot plot1=new PiePlot();PiePlot plot2=new PiePlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));plot1.setNoDataMessage(""No data XYZ"");assertFalse(plot1.equals(plot2));plot2.setNoDataMessage(""No data XYZ"");assertTrue(plot1.equals(plot2));plot1.setNoDataMessageFont(new Font(""SansSerif"",Font.PLAIN,13));assertFalse(plot1.equals(plot2));plot2.setNoDataMessageFont(new Font(""SansSerif"",Font.PLAIN,13));assertTrue(plot1.equals(plot2));plot1.setNoDataMessagePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setNoDataMessagePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setInsets(new RectangleInsets(1.0,2.0,3.0,4.0));assertFalse(plot1.equals(plot2));plot2.setInsets(new RectangleInsets(1.0,2.0,3.0,4.0));assertTrue(plot1.equals(plot2));plot1.setOutlineVisible(false);assertFalse(plot1.equals(plot2));plot2.setOutlineVisible(false);assertTrue(plot1.equals(plot2));BasicStroke s=new BasicStroke(1.23f);plot1.setOutlineStroke(s);assertFalse(plot1.equals(plot2));plot2.setOutlineStroke(s);assertTrue(plot1.equals(plot2));plot1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.green));assertFalse(plot1.equals(plot2));plot2.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.green));assertTrue(plot1.equals(plot2));plot1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.cyan,3.0f,4.0f,Color.green));assertFalse(plot1.equals(plot2));plot2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.cyan,3.0f,4.0f,Color.green));assertTrue(plot1.equals(plot2));plot1.setBackgroundImage(JFreeChart.INFO.getLogo());assertFalse(plot1.equals(plot2));plot2.setBackgroundImage(JFreeChart.INFO.getLogo());assertTrue(plot1.equals(plot2));plot1.setBackgroundImageAlignment(Align.BOTTOM_RIGHT);assertFalse(plot1.equals(plot2));plot2.setBackgroundImageAlignment(Align.BOTTOM_RIGHT);assertTrue(plot1.equals(plot2));plot1.setBackgroundImageAlpha(0.77f);assertFalse(plot1.equals(plot2));plot2.setBackgroundImageAlpha(0.77f);assertTrue(plot1.equals(plot2));plot1.setForegroundAlpha(0.99f);assertFalse(plot1.equals(plot2));plot2.setForegroundAlpha(0.99f);assertTrue(plot1.equals(plot2));plot1.setBackgroundAlpha(0.99f);assertFalse(plot1.equals(plot2));plot2.setBackgroundAlpha(0.99f);assertTrue(plot1.equals(plot2));plot1.setDrawingSupplier(new DefaultDrawingSupplier(new Paint[]{Color.blue},new Paint[]{Color.red},new Stroke[]{new BasicStroke(1.1f)},new Stroke[]{new BasicStroke(9.9f)},new Shape[]{new Rectangle(1,2,3,4)}));assertFalse(plot1.equals(plot2));plot2.setDrawingSupplier(new DefaultDrawingSupplier(new Paint[]{Color.blue},new Paint[]{Color.red},new Stroke[]{new BasicStroke(1.1f)},new Stroke[]{new BasicStroke(9.9f)},new Shape[]{new Rectangle(1,2,3,4)}));assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.title.junit.TextTitleTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){TextTitle t1=new TextTitle();TextTitle t2=new TextTitle();assertEquals(t1,t2);t1.setText(""Test 1"");assertFalse(t1.equals(t2));t2.setText(""Test 1"");assertTrue(t1.equals(t2));Font f=new Font(""SansSerif"",Font.PLAIN,15);t1.setFont(f);assertFalse(t1.equals(t2));t2.setFont(f);assertTrue(t1.equals(t2));t1.setTextAlignment(HorizontalAlignment.RIGHT);assertFalse(t1.equals(t2));t2.setTextAlignment(HorizontalAlignment.RIGHT);assertTrue(t1.equals(t2));t1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(t1.equals(t2));t2.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(t1.equals(t2));t1.setBackgroundPaint(new GradientPaint(4.0f,3.0f,Color.red,2.0f,1.0f,Color.blue));assertFalse(t1.equals(t2));t2.setBackgroundPaint(new GradientPaint(4.0f,3.0f,Color.red,2.0f,1.0f,Color.blue));assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.TextTitleTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){TextTitle t1=new TextTitle();TextTitle t2=new TextTitle();assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.TextTitleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){TextTitle t1=new TextTitle();TextTitle t2=null;try {t2=(TextTitle)t1.clone();}catch(CloneNotSupportedException e){System.err.println(""TextTitleTests.testCloning: failed to clone."");}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.TextTitleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TextTitle t1=new TextTitle(""Test"");TextTitle t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(TextTitle)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);}"
"org.jfree.chart.junit.XYAreaChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.XYAreaChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.XYAreaChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.testEquals",0,"/** * A series of tests for the equals()method.*/public void testEquals(){String f1=""{1}"";String f2=""{2}"";NumberFormat xnf1=new DecimalFormat(""0.00"");NumberFormat xnf2=new DecimalFormat(""0.000"");NumberFormat ynf1=new DecimalFormat(""0.00"");NumberFormat ynf2=new DecimalFormat(""0.000"");StandardXYItemLabelGenerator g1=null;StandardXYItemLabelGenerator g2=null;g1=new StandardXYItemLabelGenerator(f1,xnf1,ynf1);g2=new StandardXYItemLabelGenerator(f1,xnf1,ynf1);assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardXYItemLabelGenerator(f2,xnf1,ynf1);assertFalse(g1.equals(g2));g2=new StandardXYItemLabelGenerator(f2,xnf1,ynf1);assertTrue(g1.equals(g2));g1=new StandardXYItemLabelGenerator(f2,xnf2,ynf1);assertFalse(g1.equals(g2));g2=new StandardXYItemLabelGenerator(f2,xnf2,ynf1);assertTrue(g1.equals(g2));g1=new StandardXYItemLabelGenerator(f2,xnf2,ynf2);assertFalse(g1.equals(g2));g2=new StandardXYItemLabelGenerator(f2,xnf2,ynf2);assertTrue(g1.equals(g2));DateFormat xdf1=new SimpleDateFormat(""d-MMM"");DateFormat xdf2=new SimpleDateFormat(""d-MMM-yyyy"");DateFormat ydf1=new SimpleDateFormat(""d-MMM"");DateFormat ydf2=new SimpleDateFormat(""d-MMM-yyyy"");g1=new StandardXYItemLabelGenerator(f1,xdf1,ydf1);g2=new StandardXYItemLabelGenerator(f1,xdf1,ydf1);assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardXYItemLabelGenerator(f1,xdf2,ydf1);assertFalse(g1.equals(g2));g2=new StandardXYItemLabelGenerator(f1,xdf2,ydf1);assertTrue(g1.equals(g2));g1=new StandardXYItemLabelGenerator(f1,xdf2,ydf2);assertFalse(g1.equals(g2));g2=new StandardXYItemLabelGenerator(f1,xdf2,ydf2);assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardXYItemLabelGenerator g1=new StandardXYItemLabelGenerator();StandardXYItemLabelGenerator g2=null;try {g2=(StandardXYItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));g1.getXFormat().setMinimumIntegerDigits(2);assertFalse(g1.equals(g2));g2.getXFormat().setMinimumIntegerDigits(2);assertTrue(g1.equals(g2));g1.getYFormat().setMinimumIntegerDigits(2);assertFalse(g1.equals(g2));g2.getYFormat().setMinimumIntegerDigits(2);assertTrue(g1.equals(g2));g1=new StandardXYItemLabelGenerator(""{0}{1}{2}"",DateFormat.getInstance(),DateFormat.getInstance());try {g2=(StandardXYItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));g1.getXDateFormat().setNumberFormat(new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2.getXDateFormat().setNumberFormat(new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));g1.getYDateFormat().setNumberFormat(new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2.getYDateFormat().setNumberFormat(new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardXYItemLabelGenerator g1=new StandardXYItemLabelGenerator();StandardXYItemLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardXYItemLabelGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){OHLCSeriesCollection c1=new OHLCSeriesCollection();OHLCSeriesCollection c2=new OHLCSeriesCollection();assertEquals(c1,c2);OHLCSeries s1=new OHLCSeries(""Series"");s1.add(new Year(2006),1.0,1.1,1.2,1.3);c1.addSeries(s1);assertFalse(c1.equals(c2));OHLCSeries s2=new OHLCSeries(""Series"");s2.add(new Year(2006),1.0,1.1,1.2,1.3);c2.addSeries(s2);assertTrue(c1.equals(c2));c1.addSeries(new OHLCSeries(""Empty Series""));assertFalse(c1.equals(c2));c2.addSeries(new OHLCSeries(""Empty Series""));assertTrue(c1.equals(c2));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){OHLCSeriesCollection c1=new OHLCSeriesCollection();OHLCSeries s1=new OHLCSeries(""Series"");s1.add(new Year(2006),1.0,1.1,1.2,1.3);c1.addSeries(s1);OHLCSeriesCollection c2=null;try {c2=(OHLCSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));s1.setDescription(""XYZ"");assertFalse(c1.equals(c2));}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){OHLCSeriesCollection c1=new OHLCSeriesCollection();OHLCSeries s1=new OHLCSeries(""Series"");s1.add(new Year(2006),1.0,1.1,1.2,1.3);c1.addSeries(s1);OHLCSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(OHLCSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests.test1170825",0,"/** * A test for bug report 1170825 (originally affected XYSeriesCollection,this test is just copied over).*/public void test1170825(){OHLCSeries s1=new OHLCSeries(""Series1"");OHLCSeriesCollection dataset=new OHLCSeriesCollection();dataset.addSeries(s1);try {dataset.getSeries(1);}catch(IllegalArgumentException e){}catch(IndexOutOfBoundsException e){assertTrue(false);}}"
"org.jfree.data.time.ohlc.junit.OHLCItemTests.testConstructor1",0,"/** * Some checks for the constructor.*/public void testConstructor1(){OHLCItem item1=new OHLCItem(new Year(2006),2.0,4.0,1.0,3.0);assertEquals(new Year(2006),item1.getPeriod());assertEquals(2.0,item1.getOpenValue(),EPSILON);assertEquals(4.0,item1.getHighValue(),EPSILON);assertEquals(1.0,item1.getLowValue(),EPSILON);assertEquals(3.0,item1.getCloseValue(),EPSILON);}"
"org.jfree.data.time.ohlc.junit.OHLCItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){OHLCItem item1=new OHLCItem(new Year(2006),2.0,4.0,1.0,3.0);OHLCItem item2=new OHLCItem(new Year(2006),2.0,4.0,1.0,3.0);assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1=new OHLCItem(new Year(2007),2.0,4.0,1.0,3.0);assertFalse(item1.equals(item2));item2=new OHLCItem(new Year(2007),2.0,4.0,1.0,3.0);assertTrue(item1.equals(item2));item1=new OHLCItem(new Year(2007),2.2,4.0,1.0,3.0);assertFalse(item1.equals(item2));item2=new OHLCItem(new Year(2007),2.2,4.0,1.0,3.0);assertTrue(item1.equals(item2));item1=new OHLCItem(new Year(2007),2.2,4.4,1.0,3.0);assertFalse(item1.equals(item2));item2=new OHLCItem(new Year(2007),2.2,4.4,1.0,3.0);assertTrue(item1.equals(item2));item1=new OHLCItem(new Year(2007),2.2,4.4,1.1,3.0);assertFalse(item1.equals(item2));item2=new OHLCItem(new Year(2007),2.2,4.4,1.1,3.0);assertTrue(item1.equals(item2));item1=new OHLCItem(new Year(2007),2.2,4.4,1.1,3.3);assertFalse(item1.equals(item2));item2=new OHLCItem(new Year(2007),2.2,4.4,1.1,3.3);assertTrue(item1.equals(item2));}"
"org.jfree.data.time.ohlc.junit.OHLCItemTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){OHLCItem item1=new OHLCItem(new Year(2006),2.0,4.0,1.0,3.0);OHLCItem item2=null;try {item2=(OHLCItem)item1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(item1 != item2);assertTrue(item1.getClass()== item2.getClass());assertTrue(item1.equals(item2));}"
"org.jfree.data.time.ohlc.junit.OHLCItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){OHLCItem item1=new OHLCItem(new Year(2006),2.0,4.0,1.0,3.0);OHLCItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(OHLCItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.chart.block.junit.EmptyBlockTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){EmptyBlock b1=new EmptyBlock(1.0,2.0);EmptyBlock b2=new EmptyBlock(1.0,2.0);assertTrue(b1.equals(b2));assertTrue(b2.equals(b2));b1=new EmptyBlock(1.1,2.0);assertFalse(b1.equals(b2));b2=new EmptyBlock(1.1,2.0);assertTrue(b1.equals(b2));b1=new EmptyBlock(1.1,2.2);assertFalse(b1.equals(b2));b2=new EmptyBlock(1.1,2.2);assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.EmptyBlockTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){EmptyBlock b1=new EmptyBlock(1.0,2.0);EmptyBlock b2=null;try {b2=(EmptyBlock)b1.clone();}catch(CloneNotSupportedException e){fail(e.toString());}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.EmptyBlockTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){EmptyBlock b1=new EmptyBlock(1.0,2.0);EmptyBlock b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(EmptyBlock)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(b1,b2);}"
"org.jfree.data.time.junit.MonthTests.testEqualsSelf",0,"/** * Check that a Month instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Month month=new Month();assertTrue(month.equals(month));}"
"org.jfree.data.time.junit.MonthTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Month m1=new Month(MonthConstants.MAY,2002);Month m2=new Month(MonthConstants.MAY,2002);assertTrue(m1.equals(m2));}"
"org.jfree.data.time.junit.MonthTests.testDateConstructor1",0,"/** * In GMT,the end of Feb 2000 is java.util.Date(951,868,799,999L).  Use  this to check the Month constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Month m1=new Month(new Date(951868799999L),zone);Month m2=new Month(new Date(951868800000L),zone);assertEquals(MonthConstants.FEBRUARY,m1.getMonth());assertEquals(951868799999L,m1.getLastMillisecond(c));assertEquals(MonthConstants.MARCH,m2.getMonth());assertEquals(951868800000L,m2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.MonthTests.testDateConstructor2",0,"/** * In Auckland,the end of Feb 2000 is java.util.Date(951,821,999,999L). Use this to check the Month constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""Pacific/Auckland"");Calendar c=new GregorianCalendar(zone);Month m1=new Month(new Date(951821999999L),zone);Month m2=new Month(new Date(951822000000L),zone);assertEquals(MonthConstants.FEBRUARY,m1.getMonth());assertEquals(951821999999L,m1.getLastMillisecond(c));assertEquals(MonthConstants.MARCH,m2.getMonth());assertEquals(951822000000L,m2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.MonthTests.testJan1900Previous",0,"/** * Set up a month equal to Jan 1900.  Request the previous month,it should be null.*/public void testJan1900Previous(){Month previous=(Month)this.jan1900.previous();assertNull(previous);}"
"org.jfree.data.time.junit.MonthTests.testJan1900Next",0,"/** * Set up a month equal to Jan 1900.  Request the next month,it should be  Feb 1900.*/public void testJan1900Next(){Month next=(Month)this.jan1900.next();assertEquals(this.feb1900,next);}"
"org.jfree.data.time.junit.MonthTests.testDec9999Previous",0,"/** * Set up a month equal to Dec 9999.  Request the previous month,it should be Nov 9999.*/public void testDec9999Previous(){Month previous=(Month)this.dec9999.previous();assertEquals(this.nov9999,previous);}"
"org.jfree.data.time.junit.MonthTests.testDec9999Next",0,"/** * Set up a month equal to Dec 9999.  Request the next month,it should be null.*/public void testDec9999Next(){Month next=(Month)this.dec9999.next();assertNull(next);}"
"org.jfree.data.time.junit.MonthTests.testParseMonth",0,"/** * Tests the string parsing code...*/public void testParseMonth(){Month month=null;try {month=Month.parseMonth(""1990-01"");}catch(TimePeriodFormatException e){month=new Month(1,1900);}assertEquals(1,month.getMonth());assertEquals(1990,month.getYear().getYear());try {month=Month.parseMonth(""02-1991"");}catch(TimePeriodFormatException e){month=new Month(1,1900);}assertEquals(2,month.getMonth());assertEquals(1991,month.getYear().getYear());try {month=Month.parseMonth(""March 1993"");}catch(TimePeriodFormatException e){month=new Month(1,1900);}assertEquals(3,month.getMonth());assertEquals(1993,month.getYear().getYear());}"
"org.jfree.data.time.junit.MonthTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Month m1=new Month(12,1999);Month m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(Month)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(m1,m2);}"
"org.jfree.data.time.junit.MonthTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Month m1=new Month(2,2003);Month m2=new Month(2,2003);assertTrue(m1.equals(m2));int h1=m1.hashCode();int h2=m2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.MonthTests.testNotCloneable",0,"/** * The  {@link Month}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Month m=new Month(2,2003);assertFalse(m instanceof Cloneable);}"
"org.jfree.data.time.junit.MonthTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Month m=new Month(3,1970);assertEquals(5094000000L,m.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MonthTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Month m=new Month(2,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-628444800000L,m.getFirstMillisecond(c));boolean pass=false;try {m.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MonthTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Month m=new Month(1,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(978307200000L,m.getFirstMillisecond(calendar));boolean pass=false;try {m.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MonthTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Month m=new Month(3,1970);assertEquals(7772399999L,m.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MonthTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Month m=new Month(2,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-626025600001L,m.getLastMillisecond(c));boolean pass=false;try {m.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MonthTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Month m=new Month(3,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(986083199999L,m.getLastMillisecond(calendar));boolean pass=false;try {m.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MonthTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Month m=new Month(1,2000);assertEquals(24001L,m.getSerialIndex());m=new Month(1,1900);assertEquals(22801L,m.getSerialIndex());}"
"org.jfree.data.time.junit.MonthTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Month m=new Month(12,2000);m=(Month)m.next();assertEquals(new Year(2001),m.getYear());assertEquals(1,m.getMonth());m=new Month(12,9999);assertNull(m.next());}"
"org.jfree.data.time.junit.MonthTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.MARCH,1,0,0,0);cal.set(Calendar.MILLISECOND,0);Month m=new Month(3,2006);assertEquals(cal.getTime(),m.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.MonthTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,31,23,59,59);cal.set(Calendar.MILLISECOND,999);Month m=new Month(1,2006);assertEquals(cal.getTime(),m.getEnd());Locale.setDefault(saved);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetValue",0,"/** * Some checks for the getValue()method.*/public void testGetValue(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""R1"",""C1"");assertEquals(new Double(1.0),d.getValue(""R1"",""C1""));boolean pass=false;try {d.getValue(""XX"",""C1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {d.getValue(""R1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetValue2",0,"/** * A simple check for the getValue(int,int)method.*/public void testGetValue2(){DefaultCategoryDataset d=new DefaultCategoryDataset();boolean pass=false;try {d.getValue(0,0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testIncrementValue",0,"/** * Some checks for the incrementValue()method.*/public void testIncrementValue(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""R1"",""C1"");d.incrementValue(2.0,""R1"",""C1"");assertEquals(new Double(3.0),d.getValue(""R1"",""C1""));d.addValue(null,""R2"",""C1"");d.incrementValue(2.0,""R2"",""C1"");assertEquals(new Double(2.0),d.getValue(""R2"",""C1""));boolean pass=false;try {d.incrementValue(1.0,""XX"",""C1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {d.incrementValue(1.0,""R1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetRowCount",0,"/** * Some tests for the getRowCount()method.*/public void testGetRowCount(){DefaultCategoryDataset d=new DefaultCategoryDataset();assertTrue(d.getRowCount()== 0);d.addValue(1.0,""R1"",""C1"");assertTrue(d.getRowCount()== 1);d.addValue(1.0,""R2"",""C1"");assertTrue(d.getRowCount()== 2);d.addValue(2.0,""R2"",""C1"");assertTrue(d.getRowCount()== 2);d.setValue(null,""R2"",""C1"");assertTrue(d.getRowCount()== 2);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testGetColumnCount",0,"/** * Some tests for the getColumnCount()method.*/public void testGetColumnCount(){DefaultCategoryDataset d=new DefaultCategoryDataset();assertTrue(d.getColumnCount()== 0);d.addValue(1.0,""R1"",""C1"");assertTrue(d.getColumnCount()== 1);d.addValue(1.0,""R1"",""C2"");assertTrue(d.getColumnCount()== 2);d.addValue(2.0,""R1"",""C2"");assertTrue(d.getColumnCount()== 2);d.setValue(null,""R1"",""C2"");assertTrue(d.getColumnCount()== 2);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultCategoryDataset d1=new DefaultCategoryDataset();d1.setValue(23.4,""R1"",""C1"");DefaultCategoryDataset d2=new DefaultCategoryDataset();d2.setValue(23.4,""R1"",""C1"");assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1.setValue(36.5,""R1"",""C2"");assertFalse(d1.equals(d2));d2.setValue(36.5,""R1"",""C2"");assertTrue(d1.equals(d2));d1.setValue(null,""R1"",""C1"");assertFalse(d1.equals(d2));d2.setValue(null,""R1"",""C1"");assertTrue(d1.equals(d2));}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultCategoryDataset d1=new DefaultCategoryDataset();d1.setValue(23.4,""R1"",""C1"");DefaultCategoryDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultCategoryDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testAddValue",0,"/** * Some checks for the addValue()method.*/public void testAddValue(){DefaultCategoryDataset d1=new DefaultCategoryDataset();d1.addValue(null,""R1"",""C1"");assertNull(d1.getValue(""R1"",""C1""));d1.addValue(new Double(1.0),""R2"",""C1"");assertEquals(new Double(1.0),d1.getValue(""R2"",""C1""));boolean pass=false;try {d1.addValue(new Double(1.1),null,""C2"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testRemoveValue",0,"/** * Some basic checks for the removeValue()method.*/public void testRemoveValue(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.removeValue(""R1"",""C1"");d.addValue(new Double(1.0),""R1"",""C1"");d.removeValue(""R1"",""C1"");assertEquals(0,d.getRowCount());assertEquals(0,d.getColumnCount());d.addValue(new Double(1.0),""R1"",""C1"");d.addValue(new Double(2.0),""R2"",""C1"");d.removeValue(""R1"",""C1"");assertEquals(new Double(2.0),d.getValue(0,0));boolean pass=false;try {d.removeValue(null,""C1"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d.removeValue(""R1"",null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultCategoryDataset d1=new DefaultCategoryDataset();DefaultCategoryDataset d2=null;try {d2=(DefaultCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1.addValue(1.0,""R1"",""C1"");d1.addValue(2.0,""R1"",""C2"");try {d2=(DefaultCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1.addValue(3.0,""R1"",""C1"");assertFalse(d1.equals(d2));d2.addValue(3.0,""R1"",""C1"");assertTrue(d1.equals(d2));}"
"org.jfree.data.category.junit.DefaultCategoryDatasetTests.testBug1835955",0,"/** * A test for bug 1835955.*/public void testBug1835955(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""R1"",""C1"");d.addValue(2.0,""R2"",""C2"");d.removeColumn(""C2"");d.addValue(3.0,""R2"",""C2"");assertEquals(3.0,d.getValue(""R2"",""C2"").doubleValue(),EPSILON);}"
"org.jfree.chart.title.junit.PaintScaleLegendTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis(""X""));PaintScaleLegend l2=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis(""X""));assertTrue(l1.equals(l2));assertTrue(l2.equals(l1));l1.setScale(new LookupPaintScale());assertFalse(l1.equals(l2));l2.setScale(new LookupPaintScale());assertTrue(l1.equals(l2));l1.setAxis(new NumberAxis(""Axis 2""));assertFalse(l1.equals(l2));l2.setAxis(new NumberAxis(""Axis 2""));assertTrue(l1.equals(l2));l1.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);assertFalse(l1.equals(l2));l2.setAxisLocation(AxisLocation.BOTTOM_OR_RIGHT);assertTrue(l1.equals(l2));l1.setAxisOffset(99.0);assertFalse(l1.equals(l2));l2.setAxisOffset(99.0);assertTrue(l1.equals(l2));l1.setStripWidth(99.0);assertFalse(l1.equals(l2));l2.setStripWidth(99.0);assertTrue(l1.equals(l2));l1.setStripOutlineVisible(!l1.isStripOutlineVisible());assertFalse(l1.equals(l2));l2.setStripOutlineVisible(l1.isStripOutlineVisible());assertTrue(l1.equals(l2));l1.setStripOutlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(l1.equals(l2));l2.setStripOutlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(l1.equals(l2));l1.setStripOutlineStroke(new BasicStroke(1.1f));assertFalse(l1.equals(l2));l2.setStripOutlineStroke(new BasicStroke(1.1f));assertTrue(l1.equals(l2));l1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(l1.equals(l2));l2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(l1.equals(l2));}"
"org.jfree.chart.title.junit.PaintScaleLegendTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis(""X""));PaintScaleLegend l2=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis(""X""));assertTrue(l1.equals(l2));int h1=l1.hashCode();int h2=l2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.PaintScaleLegendTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis(""X""));PaintScaleLegend l2=null;try {l2=(PaintScaleLegend)l1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(l1 != l2);assertTrue(l1.getClass()== l2.getClass());assertTrue(l1.equals(l2));}"
"org.jfree.chart.title.junit.PaintScaleLegendTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PaintScaleLegend l1=new PaintScaleLegend(new GrayPaintScale(),new NumberAxis(""X""));PaintScaleLegend l2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(l1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));l2=(PaintScaleLegend)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(l1,l2);}"
"org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){ArcDialFrame f1=new ArcDialFrame();ArcDialFrame f2=new ArcDialFrame();assertTrue(f1.equals(f2));f1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(f1.equals(f2));f2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(f1.equals(f2));f1.setForegroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(f1.equals(f2));f2.setForegroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(f1.equals(f2));f1.setStroke(new BasicStroke(1.1f));assertFalse(f1.equals(f2));f2.setStroke(new BasicStroke(1.1f));assertTrue(f1.equals(f2));f1.setInnerRadius(0.11);assertFalse(f1.equals(f2));f2.setInnerRadius(0.11);assertTrue(f1.equals(f2));f1.setOuterRadius(0.88);assertFalse(f1.equals(f2));f2.setOuterRadius(0.88);assertTrue(f1.equals(f2));f1.setStartAngle(99);assertFalse(f1.equals(f2));f2.setStartAngle(99);assertTrue(f1.equals(f2));f1.setExtent(33);assertFalse(f1.equals(f2));f2.setExtent(33);assertTrue(f1.equals(f2));f1.setVisible(false);assertFalse(f1.equals(f2));f2.setVisible(false);assertTrue(f1.equals(f2));}"
"org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){ArcDialFrame f1=new ArcDialFrame();ArcDialFrame f2=new ArcDialFrame();assertTrue(f1.equals(f2));int h1=f1.hashCode();int h2=f2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ArcDialFrame f1=new ArcDialFrame();ArcDialFrame f2=null;try {f2=(ArcDialFrame)f1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(f1 != f2);assertTrue(f1.getClass()== f2.getClass());assertTrue(f1.equals(f2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();f1.addChangeListener(l1);assertTrue(f1.hasListener(l1));assertFalse(f2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.ArcDialFrameTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ArcDialFrame f1=new ArcDialFrame();ArcDialFrame f2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(f1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));f2=(ArcDialFrame)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(f1,f2);}"
"org.jfree.data.gantt.junit.TaskTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Task t1=new Task(""T"",new Date(1),new Date(2));Task t2=new Task(""T"",new Date(1),new Date(2));assertTrue(t1.equals(t2));assertTrue(t2.equals(t1));t1.setDescription(""X"");assertFalse(t1.equals(t2));t2.setDescription(""X"");assertTrue(t1.equals(t2));t1.setDuration(new SimpleTimePeriod(new Date(2),new Date(3)));assertFalse(t1.equals(t2));t2.setDuration(new SimpleTimePeriod(new Date(2),new Date(3)));assertTrue(t1.equals(t2));t1.setPercentComplete(0.5);assertFalse(t1.equals(t2));t2.setPercentComplete(0.5);assertTrue(t1.equals(t2));t1.addSubtask(new Task(""T"",new Date(22),new Date(33)));assertFalse(t1.equals(t2));t2.addSubtask(new Task(""T"",new Date(22),new Date(33)));assertTrue(t1.equals(t2));}"
"org.jfree.data.gantt.junit.TaskTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){Task t1=new Task(""T"",new Date(1),new Date(2));Task t2=null;try {t2=(Task)t1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.data.gantt.junit.TaskTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Task t1=new Task(""T"",new Date(1),new Date(2));Task t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(Task)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);}"
"org.jfree.data.gantt.junit.TaskTests.testGetSubTaskCount",0,"/** * Check the getSubTaskCount()method.*/public void testGetSubTaskCount(){Task t1=new Task(""T"",new Date(100),new Date(200));assertEquals(0,t1.getSubtaskCount());t1.addSubtask(new Task(""S1"",new Date(100),new Date(110)));assertEquals(1,t1.getSubtaskCount());Task s2=new Task(""S2"",new Date(111),new Date(120));t1.addSubtask(s2);assertEquals(2,t1.getSubtaskCount());t1.addSubtask(new Task(""S3"",new Date(121),new Date(130)));assertEquals(3,t1.getSubtaskCount());t1.removeSubtask(s2);assertEquals(2,t1.getSubtaskCount());}"
"org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYBoxAndWhiskerRenderer r1=new XYBoxAndWhiskerRenderer();XYBoxAndWhiskerRenderer r2=new XYBoxAndWhiskerRenderer();assertEquals(r1,r2);r1.setArtifactPaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertFalse(r1.equals(r2));r2.setArtifactPaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertEquals(r1,r2);r1.setBoxWidth(0.55);assertFalse(r1.equals(r2));r2.setBoxWidth(0.55);assertEquals(r1,r2);r1.setFillBox(!r1.getFillBox());assertFalse(r1.equals(r2));r2.setFillBox(!r2.getFillBox());assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYBoxAndWhiskerRenderer r1=new XYBoxAndWhiskerRenderer();XYBoxAndWhiskerRenderer r2=new XYBoxAndWhiskerRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYBoxAndWhiskerRenderer r1=new XYBoxAndWhiskerRenderer();XYBoxAndWhiskerRenderer r2=null;try {r2=(XYBoxAndWhiskerRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYBoxAndWhiskerRenderer r1=new XYBoxAndWhiskerRenderer();XYBoxAndWhiskerRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYBoxAndWhiskerRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.data.statistics.junit.HistogramBinTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){double start=10.0;double end=20.0;HistogramBin b1=new HistogramBin(start,end);HistogramBin b2=new HistogramBin(start,end);assertTrue(b1.equals(b2));assertTrue(b2.equals(b1));}"
"org.jfree.data.statistics.junit.HistogramBinTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){double start=10.0;double end=20.0;HistogramBin b1=new HistogramBin(start,end);HistogramBin b2=null;try {b2=(HistogramBin)b1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));}"
"org.jfree.data.statistics.junit.HistogramBinTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){double start=10.0;double end=20.0;HistogramBin b1=new HistogramBin(start,end);HistogramBin b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(HistogramBin)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(b1,b2);}"
"org.jfree.chart.util.junit.HashUtilitiesTests.testHashCodeForDoubleArray",0,"/** * Some sanity checks for the hashCodeForDoubleArray()method.*/public void testHashCodeForDoubleArray(){double[]a1=new double[]{1.0};double[]a2=new double[]{1.0};int h1=HashUtilities.hashCodeForDoubleArray(a1);int h2=HashUtilities.hashCodeForDoubleArray(a2);assertTrue(h1 == h2);double[]a3=new double[]{0.5,1.0};int h3=HashUtilities.hashCodeForDoubleArray(a3);assertFalse(h1 == h3);}"
"org.jfree.chart.annotations.junit.XYLineAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Stroke stroke=new BasicStroke(2.0f);XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.blue);XYLineAnnotation a2=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.blue);assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1=new XYLineAnnotation(11.0,20.0,100.0,200.0,stroke,Color.blue);assertFalse(a1.equals(a2));a2=new XYLineAnnotation(11.0,20.0,100.0,200.0,stroke,Color.blue);assertTrue(a1.equals(a2));a1=new XYLineAnnotation(11.0,21.0,100.0,200.0,stroke,Color.blue);assertFalse(a1.equals(a2));a2=new XYLineAnnotation(11.0,21.0,100.0,200.0,stroke,Color.blue);assertTrue(a1.equals(a2));a1=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke,Color.blue);assertFalse(a1.equals(a2));a2=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke,Color.blue);assertTrue(a1.equals(a2));a1=new XYLineAnnotation(11.0,21.0,101.0,201.0,stroke,Color.blue);assertFalse(a1.equals(a2));a2=new XYLineAnnotation(11.0,21.0,101.0,201.0,stroke,Color.blue);assertTrue(a1.equals(a2));Stroke stroke2=new BasicStroke(0.99f);a1=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,Color.blue);assertFalse(a1.equals(a2));a2=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,Color.blue);assertTrue(a1.equals(a2));GradientPaint g1=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white);GradientPaint g2=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white);a1=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,g1);assertFalse(a1.equals(a2));a2=new XYLineAnnotation(11.0,21.0,101.0,200.0,stroke2,g2);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYLineAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Stroke stroke=new BasicStroke(2.0f);XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.blue);XYLineAnnotation a2=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.blue);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYLineAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){Stroke stroke=new BasicStroke(2.0f);XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.blue);XYLineAnnotation a2=null;try {a2=(XYLineAnnotation)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYLineAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Stroke stroke=new BasicStroke(2.0f);XYLineAnnotation a1=new XYLineAnnotation(10.0,20.0,100.0,200.0,stroke,Color.blue);XYLineAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYLineAnnotation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.block.junit.ColumnArrangementTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){ColumnArrangement c1=new ColumnArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);ColumnArrangement c2=new ColumnArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);assertTrue(c1.equals(c2));assertTrue(c2.equals(c1));c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.TOP,1.0,2.0);assertFalse(c1.equals(c2));c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.TOP,1.0,2.0);assertTrue(c1.equals(c2));c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.0,2.0);assertFalse(c1.equals(c2));c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.0,2.0);assertTrue(c1.equals(c2));c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.0);assertFalse(c1.equals(c2));c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.0);assertTrue(c1.equals(c2));c1=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.2);assertFalse(c1.equals(c2));c2=new ColumnArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.2);assertTrue(c1.equals(c2));}"
"org.jfree.chart.block.junit.ColumnArrangementTests.testCloning",0,"/** * Immutable - cloning is not necessary.*/public void testCloning(){FlowArrangement f1=new FlowArrangement();assertFalse(f1 instanceof Cloneable);}"
"org.jfree.chart.block.junit.ColumnArrangementTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){FlowArrangement f1=new FlowArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);FlowArrangement f2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(f1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));f2=(FlowArrangement)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(f1,f2);}"
"org.jfree.chart.title.junit.ImageTitleTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){ImageTitle t1=new ImageTitle(JFreeChart.INFO.getLogo());ImageTitle t2=new ImageTitle(JFreeChart.INFO.getLogo());assertEquals(t1,t2);}"
"org.jfree.chart.title.junit.ImageTitleTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){ImageTitle t1=new ImageTitle(JFreeChart.INFO.getLogo());ImageTitle t2=new ImageTitle(JFreeChart.INFO.getLogo());assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.ImageTitleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ImageTitle t1=new ImageTitle(JFreeChart.INFO.getLogo());ImageTitle t2=null;try {t2=(ImageTitle)t1.clone();}catch(CloneNotSupportedException e){System.err.println(""ImageTitleTests.testCloning: failed to clone."");}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.ImageTitleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){}"
"org.jfree.chart.title.junit.ImageTitleTests.testWidthAndHeight",0,"/** * Check the width and height.*/public void testWidthAndHeight(){ImageTitle t1=new ImageTitle(JFreeChart.INFO.getLogo());assertEquals(100,t1.getWidth(),EPSILON);assertEquals(100,t1.getHeight(),EPSILON);}"
"org.jfree.chart.plot.junit.PieLabelRecordTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){PieLabelRecord p1=new PieLabelRecord(""A"",1.0,2.0,new TextBox(""B""),3.0,4.0,5.0);PieLabelRecord p2=new PieLabelRecord(""A"",1.0,2.0,new TextBox(""B""),3.0,4.0,5.0);assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1=new PieLabelRecord(""B"",1.0,2.0,new TextBox(""B""),3.0,4.0,5.0);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.0,2.0,new TextBox(""B""),3.0,4.0,5.0);assertTrue(p1.equals(p2));p1=new PieLabelRecord(""B"",1.1,2.0,new TextBox(""B""),3.0,4.0,5.0);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.1,2.0,new TextBox(""B""),3.0,4.0,5.0);assertTrue(p1.equals(p2));p1=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""B""),3.0,4.0,5.0);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""B""),3.0,4.0,5.0);assertTrue(p1.equals(p2));p1=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.0,4.0,5.0);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.0,4.0,5.0);assertTrue(p1.equals(p2));p1=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.3,4.0,5.0);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.3,4.0,5.0);assertTrue(p1.equals(p2));p1=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.3,4.4,5.0);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.3,4.4,5.0);assertTrue(p1.equals(p2));p1=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.3,4.4,5.5);assertFalse(p1.equals(p2));p2=new PieLabelRecord(""B"",1.1,2.2,new TextBox(""C""),3.3,4.4,5.5);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PieLabelRecordTests.testCloning",0,"/** * Confirm that cloning is not implemented.*/public void testCloning(){PieLabelRecord p1=new PieLabelRecord(""A"",1.0,2.0,new TextBox(""B""),3.0,4.0,5.0);assertFalse(p1 instanceof Cloneable);}"
"org.jfree.chart.plot.junit.PieLabelRecordTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PieLabelRecord p1=new PieLabelRecord(""A"",1.0,2.0,new TextBox(""B""),3.0,4.0,5.0);PieLabelRecord p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(PieLabelRecord)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=p1.equals(p2);assertTrue(b);}"
"org.jfree.data.time.junit.SecondTests.testEqualsSelf",0,"/** * Test that a Second instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Second second=new Second();assertTrue(second.equals(second));}"
"org.jfree.data.time.junit.SecondTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Day day1=new Day(29,MonthConstants.MARCH,2002);Hour hour1=new Hour(15,day1);Minute minute1=new Minute(15,hour1);Second second1=new Second(34,minute1);Day day2=new Day(29,MonthConstants.MARCH,2002);Hour hour2=new Hour(15,day2);Minute minute2=new Minute(15,hour2);Second second2=new Second(34,minute2);assertTrue(second1.equals(second2));}"
"org.jfree.data.time.junit.SecondTests.testDateConstructor1",0,"/** * In GMT,the 4.55:59pm on 21 Mar 2002 is java.util.Date(1016729759000L). Use this to check the Second constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Second s1=new Second(new Date(1016729758999L),zone);Second s2=new Second(new Date(1016729759000L),zone);assertEquals(58,s1.getSecond());assertEquals(1016729758999L,s1.getLastMillisecond(c));assertEquals(59,s2.getSecond());assertEquals(1016729759000L,s2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.SecondTests.testDateConstructor2",0,"/** * In Chicago,the 4.55:59pm on 21 Mar 2002 is  java.util.Date(1016751359000L). Use this to check the Second constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""America/Chicago"");Calendar c=new GregorianCalendar(zone);Second s1=new Second(new Date(1016751358999L),zone);Second s2=new Second(new Date(1016751359000L),zone);assertEquals(58,s1.getSecond());assertEquals(1016751358999L,s1.getLastMillisecond(c));assertEquals(59,s2.getSecond());assertEquals(1016751359000L,s2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.SecondTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Second s1=new Second();Second s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(Second)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(s1,s2);}"
"org.jfree.data.time.junit.SecondTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Second s1=new Second(13,45,5,1,2,2003);Second s2=new Second(13,45,5,1,2,2003);assertTrue(s1.equals(s2));int h1=s1.hashCode();int h2=s2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.SecondTests.testNotCloneable",0,"/** * The  {@link Second}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Second s=new Second(13,45,5,1,2,2003);assertFalse(s instanceof Cloneable);}"
"org.jfree.data.time.junit.SecondTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Second s=new Second(15,43,15,1,4,2006);assertEquals(1143902595000L,s.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.SecondTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Second s=new Second(50,59,15,1,4,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-623289610000L,s.getFirstMillisecond(c));boolean pass=false;try {s.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.SecondTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Second s=new Second(55,40,2,15,4,2000);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(955766455000L,s.getFirstMillisecond(calendar));boolean pass=false;try {s.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.SecondTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Second s=new Second(1,1,1,1,1,1970);assertEquals(61999L,s.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.SecondTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Second s=new Second(55,1,2,7,7,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-614962684001L,s.getLastMillisecond(c));boolean pass=false;try {s.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.SecondTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Second s=new Second(50,45,21,21,4,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(987889550999L,s.getLastMillisecond(calendar));boolean pass=false;try {s.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.SecondTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Second s=new Second(1,1,1,1,1,2000);assertEquals(3155850061L,s.getSerialIndex());s=new Second(1,1,1,1,1,1900);assertEquals(176461L,s.getSerialIndex());}"
"org.jfree.data.time.junit.SecondTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Second s=new Second(55,30,1,12,12,2000);s=(Second)s.next();assertEquals(2000,s.getMinute().getHour().getYear());assertEquals(12,s.getMinute().getHour().getMonth());assertEquals(12,s.getMinute().getHour().getDayOfMonth());assertEquals(1,s.getMinute().getHour().getHour());assertEquals(30,s.getMinute().getMinute());assertEquals(56,s.getSecond());s=new Second(59,59,23,31,12,9999);assertNull(s.next());}"
"org.jfree.data.time.junit.SecondTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,47,55);cal.set(Calendar.MILLISECOND,0);Second s=new Second(55,47,3,16,1,2006);assertEquals(cal.getTime(),s.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.SecondTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,47,55);cal.set(Calendar.MILLISECOND,999);Second s=new Second(55,47,3,16,1,2006);assertEquals(cal.getTime(),s.getEnd());Locale.setDefault(saved);}"
"org.jfree.chart.renderer.junit.GrayPaintScaleTests.testConstructor",0,"/** * Simple check for the default constructor.*/public void testConstructor(){GrayPaintScale gps=new GrayPaintScale();assertEquals(0.0,gps.getLowerBound(),EPSILON);assertEquals(1.0,gps.getUpperBound(),EPSILON);}"
"org.jfree.chart.renderer.junit.GrayPaintScaleTests.testGetPaint",0,"/** * Some checks for the getPaint()method.*/public void testGetPaint(){GrayPaintScale gps=new GrayPaintScale();Color c=(Color)gps.getPaint(0.0);assertTrue(c.equals(Color.black));c=(Color)gps.getPaint(1.0);assertTrue(c.equals(Color.white));c=(Color)gps.getPaint(-0.5);assertTrue(c.equals(Color.black));c=(Color)gps.getPaint(1.5);assertTrue(c.equals(Color.white));}"
"org.jfree.chart.renderer.junit.GrayPaintScaleTests.testEquals",0,"/** * A test for the equals()method.*/public void testEquals(){GrayPaintScale g1=new GrayPaintScale();GrayPaintScale g2=new GrayPaintScale();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new GrayPaintScale(0.0,1.0);g2=new GrayPaintScale(0.0,1.0);assertTrue(g1.equals(g2));g1=new GrayPaintScale(0.1,1.0);assertFalse(g1.equals(g2));g2=new GrayPaintScale(0.1,1.0);assertTrue(g1.equals(g2));g1=new GrayPaintScale(0.1,0.9);assertFalse(g1.equals(g2));g2=new GrayPaintScale(0.1,0.9);assertTrue(g1.equals(g2));}"
"org.jfree.chart.renderer.junit.GrayPaintScaleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){GrayPaintScale g1=new GrayPaintScale();GrayPaintScale g2=null;try {g2=(GrayPaintScale)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.renderer.junit.GrayPaintScaleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){GrayPaintScale g1=new GrayPaintScale();GrayPaintScale g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(GrayPaintScale)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.plot.junit.CategoryMarkerTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){CategoryMarker m1=new CategoryMarker(""A"");CategoryMarker m2=new CategoryMarker(""A"");assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1=new CategoryMarker(""B"");assertFalse(m1.equals(m2));m2=new CategoryMarker(""B"");assertTrue(m1.equals(m2));m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(1.1f));assertFalse(m1.equals(m2));m2=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(1.1f));assertTrue(m1.equals(m2));m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f));assertFalse(m1.equals(m2));m2=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f));assertTrue(m1.equals(m2));m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f),Color.red,new BasicStroke(1.0f),1.0f);assertFalse(m1.equals(m2));m2=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f),Color.red,new BasicStroke(1.0f),1.0f);assertTrue(m1.equals(m2));m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f),Color.red,new BasicStroke(3.3f),1.0f);assertFalse(m1.equals(m2));m2=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f),Color.red,new BasicStroke(3.3f),1.0f);assertTrue(m1.equals(m2));m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f),Color.red,new BasicStroke(1.0f),0.5f);assertFalse(m1.equals(m2));m2=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(2.2f),Color.red,new BasicStroke(1.0f),0.5f);assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.CategoryMarkerTests.testCloning",0,"/** * Check cloning.*/public void testCloning(){CategoryMarker m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(1.1f));CategoryMarker m2=null;try {m2=(CategoryMarker)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1 != m2);assertTrue(m1.getClass()== m2.getClass());assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.CategoryMarkerTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryMarker m1=new CategoryMarker(""A"",new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow),new BasicStroke(1.1f));CategoryMarker m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(CategoryMarker)in.readObject();in.close();}catch(Exception e){fail(e.toString());}boolean b=m1.equals(m2);assertTrue(b);}"
"org.jfree.chart.plot.junit.CategoryMarkerTests.testGetSetKey",0,"/** * Some checks for the getKey()and setKey()methods.*/public void testGetSetKey(){CategoryMarker m=new CategoryMarker(""X"");m.addChangeListener(this);this.lastEvent=null;assertEquals(""X"",m.getKey());m.setKey(""Y"");assertEquals(""Y"",m.getKey());assertEquals(m,this.lastEvent.getMarker());try {m.setKey(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.CategoryMarkerTests.testGetSetDrawAsLine",0,"/** * Some checks for the getDrawAsLine()and setDrawAsLine()methods.*/public void testGetSetDrawAsLine(){CategoryMarker m=new CategoryMarker(""X"");m.addChangeListener(this);this.lastEvent=null;assertEquals(false,m.getDrawAsLine());m.setDrawAsLine(true);assertEquals(true,m.getDrawAsLine());assertEquals(m,this.lastEvent.getMarker());}"
"org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.testEquals",0,"/** * A series of tests for the equals()method.*/public void testEquals(){BoxAndWhiskerToolTipGenerator g1=new BoxAndWhiskerToolTipGenerator();BoxAndWhiskerToolTipGenerator g2=new BoxAndWhiskerToolTipGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new BoxAndWhiskerToolTipGenerator(""{0}--> {1}{2}"",new DecimalFormat(""0.0""));g2=new BoxAndWhiskerToolTipGenerator(""{1}{2}"",new DecimalFormat(""0.0""));assertFalse(g1.equals(g2));g2=new BoxAndWhiskerToolTipGenerator(""{0}--> {1}{2}"",new DecimalFormat(""0.0""));assertTrue(g1.equals(g2));g1=new BoxAndWhiskerToolTipGenerator(""{0}--> {1}{2}"",new DecimalFormat(""0.0""));g2=new BoxAndWhiskerToolTipGenerator(""{0}--> {1}{2}"",new DecimalFormat(""0.00""));assertFalse(g1.equals(g2));g2=new BoxAndWhiskerToolTipGenerator(""{0}--> {1}{2}"",new DecimalFormat(""0.0""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BoxAndWhiskerToolTipGenerator g1=new BoxAndWhiskerToolTipGenerator();BoxAndWhiskerToolTipGenerator g2=null;try {g2=(BoxAndWhiskerToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BoxAndWhiskerToolTipGenerator g1=new BoxAndWhiskerToolTipGenerator();BoxAndWhiskerToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(BoxAndWhiskerToolTipGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){StandardXYItemRenderer r1=new StandardXYItemRenderer();StandardXYItemRenderer r2=new StandardXYItemRenderer();assertEquals(r1,r2);r1.setBaseShapesVisible(true);assertFalse(r1.equals(r2));r2.setBaseShapesVisible(true);assertTrue(r1.equals(r2));r1.setPlotLines(false);assertFalse(r1.equals(r2));r2.setPlotLines(false);assertTrue(r1.equals(r2));r1.setPlotImages(true);assertFalse(r1.equals(r2));r2.setPlotImages(true);assertTrue(r1.equals(r2));r1.setPlotDiscontinuous(true);assertFalse(r1.equals(r2));r2.setPlotDiscontinuous(true);assertTrue(r1.equals(r2));r1.setGapThresholdType(UnitType.ABSOLUTE);assertFalse(r1.equals(r2));r2.setGapThresholdType(UnitType.ABSOLUTE);assertTrue(r1.equals(r2));r1.setGapThreshold(1.23);assertFalse(r1.equals(r2));r2.setGapThreshold(1.23);assertTrue(r1.equals(r2));r1.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));r1.setSeriesShapesFilled(1,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesShapesFilled(1,Boolean.TRUE);assertTrue(r1.equals(r2));r1.setBaseShapesFilled(false);assertFalse(r1.equals(r2));r2.setBaseShapesFilled(false);assertTrue(r1.equals(r2));r1.setDrawSeriesLineAsPath(true);assertFalse(r1.equals(r2));r2.setDrawSeriesLineAsPath(true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StandardXYItemRenderer r1=new StandardXYItemRenderer();StandardXYItemRenderer r2=new StandardXYItemRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardXYItemRenderer r1=new StandardXYItemRenderer();Rectangle2D rect1=new Rectangle2D.Double(1.0,2.0,3.0,4.0);r1.setLegendLine(rect1);StandardXYItemRenderer r2=null;try {r2=(StandardXYItemRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));rect1.setRect(4.0,3.0,2.0,1.0);assertFalse(r1.equals(r2));r2.setLegendLine(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(r1.equals(r2));r1.setSeriesShapesFilled(1,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesShapesFilled(1,Boolean.TRUE);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardXYItemRenderer r1=new StandardXYItemRenderer();StandardXYItemRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StandardXYItemRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);StandardXYItemRenderer r=new StandardXYItemRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests.testNoDisplayedItem",0,"/** * A check to ensure that an item that falls outside the plot's data area does NOT generate an item entity.*/public void testNoDisplayedItem(){XYSeriesCollection dataset=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(10.0,10.0);dataset.addSeries(s1);JFreeChart chart=ChartFactory.createXYLineChart(""Title"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,true,false);XYPlot plot=(XYPlot)chart.getPlot();plot.setRenderer(new StandardXYItemRenderer());NumberAxis xAxis=(NumberAxis)plot.getDomainAxis();xAxis.setRange(0.0,5.0);NumberAxis yAxis=(NumberAxis)plot.getRangeAxis();yAxis.setRange(0.0,5.0);BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();ChartRenderingInfo info=new ChartRenderingInfo();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,info);g2.dispose();EntityCollection ec=info.getEntityCollection();assertFalse(TestUtilities.containsInstanceOf(ec.getEntities(),XYItemEntity.class));}"
"org.jfree.chart.needle.junit.LineNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){LineNeedle n1=new LineNeedle();LineNeedle n2=new LineNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.LineNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){LineNeedle n1=new LineNeedle();LineNeedle n2=null;try {n2=(LineNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.LineNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LineNeedle n1=new LineNeedle();LineNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(LineNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){StatisticalBarRenderer r1=new StatisticalBarRenderer();StatisticalBarRenderer r2=new StatisticalBarRenderer();assertEquals(r1,r2);r1.setErrorIndicatorPaint(Color.red);assertFalse(r1.equals(r2));r2.setErrorIndicatorPaint(Color.red);assertTrue(r2.equals(r1));}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StatisticalBarRenderer r1=new StatisticalBarRenderer();StatisticalBarRenderer r2=new StatisticalBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StatisticalBarRenderer r1=new StatisticalBarRenderer();StatisticalBarRenderer r2=null;try {r2=(StatisticalBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StatisticalBarRenderer r1=new StatisticalBarRenderer();StatisticalBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StatisticalBarRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultStatisticalCategoryDataset dataset=new DefaultStatisticalCategoryDataset();dataset.add(1.0,2.0,""S1"",""C1"");dataset.add(3.0,4.0,""S1"",""C2"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new StatisticalBarRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanVertical",0,"/** * Draws the chart with a <code>null</code> mean value to make sure that  no exceptions are thrown (particularly by code in the renderer).  See bug report 1779941.*/public void testDrawWithNullMeanVertical(){boolean success=false;try {DefaultStatisticalCategoryDataset dataset=new DefaultStatisticalCategoryDataset();dataset.add(1.0,2.0,""S1"",""C1"");dataset.add(null,new Double(4.0),""S1"",""C2"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new StatisticalBarRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullMeanHorizontal",0,"/** * Draws the chart with a <code>null</code> mean value to make sure that  no exceptions are thrown (particularly by code in the renderer).  See bug report 1779941.*/public void testDrawWithNullMeanHorizontal(){boolean success=false;try {DefaultStatisticalCategoryDataset dataset=new DefaultStatisticalCategoryDataset();dataset.add(1.0,2.0,""S1"",""C1"");dataset.add(null,new Double(4.0),""S1"",""C2"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new StatisticalBarRenderer());plot.setOrientation(PlotOrientation.HORIZONTAL);JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationVertical",0,"/** * Draws the chart with a <code>null</code> standard deviation to make sure  that no exceptions are thrown (particularly by code in the renderer).   See bug report 1779941.*/public void testDrawWithNullDeviationVertical(){boolean success=false;try {DefaultStatisticalCategoryDataset dataset=new DefaultStatisticalCategoryDataset();dataset.add(1.0,2.0,""S1"",""C1"");dataset.add(new Double(4.0),null,""S1"",""C2"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new StatisticalBarRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullDeviationHorizontal",0,"/** * Draws the chart with a <code>null</code> standard deviation to make sure  that no exceptions are thrown (particularly by code in the renderer).   See bug report 1779941.*/public void testDrawWithNullDeviationHorizontal(){boolean success=false;try {DefaultStatisticalCategoryDataset dataset=new DefaultStatisticalCategoryDataset();dataset.add(1.0,2.0,""S1"",""C1"");dataset.add(new Double(4.0),null,""S1"",""C2"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new StatisticalBarRenderer());plot.setOrientation(PlotOrientation.HORIZONTAL);JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){DefaultCategoryItemRenderer r1=new DefaultCategoryItemRenderer();DefaultCategoryItemRenderer r2=new DefaultCategoryItemRenderer();assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){DefaultCategoryItemRenderer r1=new DefaultCategoryItemRenderer();DefaultCategoryItemRenderer r2=new DefaultCategoryItemRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultCategoryItemRenderer r1=new DefaultCategoryItemRenderer();DefaultCategoryItemRenderer r2=null;try {r2=(DefaultCategoryItemRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultCategoryItemRenderer r1=new DefaultCategoryItemRenderer();DefaultCategoryItemRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(DefaultCategoryItemRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.data.xy.junit.XYDataItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYDataItem i1=new XYDataItem(1.0,1.1);XYDataItem i2=new XYDataItem(1.0,1.1);assertTrue(i1.equals(i2));assertTrue(i2.equals(i1));i1.setY(new Double(9.9));assertFalse(i1.equals(i2));i2.setY(new Double(9.9));assertTrue(i1.equals(i2));}"
"org.jfree.data.xy.junit.XYDataItemTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYDataItem i1=new XYDataItem(1.0,1.1);XYDataItem i2=null;try {i2=(XYDataItem)i1.clone();}catch(CloneNotSupportedException e){System.err.println(""XYDataItemTests.testCloning: failed to clone."");}assertTrue(i1 != i2);assertTrue(i1.getClass()== i2.getClass());assertTrue(i1.equals(i2));}"
"org.jfree.data.xy.junit.XYDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYDataItem i1=new XYDataItem(1.0,1.1);XYDataItem i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(XYDataItem)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(i1,i2);}"
"org.jfree.data.junit.KeyedObjectsTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){KeyedObjects ko1=new KeyedObjects();ko1.addObject(""V1"",new Integer(1));ko1.addObject(""V2"",null);ko1.addObject(""V3"",new Integer(3));KeyedObjects ko2=null;try {ko2=(KeyedObjects)ko1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(ko1 != ko2);assertTrue(ko1.getClass()== ko2.getClass());assertTrue(ko1.equals(ko2));}"
"org.jfree.data.junit.KeyedObjectsTests.testCloning2",0,"/** * Confirm special features of cloning.*/public void testCloning2(){Object obj1=new ArrayList();KeyedObjects ko1=new KeyedObjects();ko1.addObject(""K1"",obj1);KeyedObjects ko2=null;try {ko2=(KeyedObjects)ko1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(ko1 != ko2);assertTrue(ko1.getClass()== ko2.getClass());assertTrue(ko1.equals(ko2));assertTrue(ko2.getObject(""K1"")== obj1);obj1=new DefaultPieDataset();ko1=new KeyedObjects();ko1.addObject(""K1"",obj1);ko2=null;try {ko2=(KeyedObjects)ko1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(ko1 != ko2);assertTrue(ko1.getClass()== ko2.getClass());assertTrue(ko1.equals(ko2));assertTrue(ko2.getObject(""K1"")!= obj1);}"
"org.jfree.data.junit.KeyedObjectsTests.testInsertAndRetrieve",0,"/** * Check that inserting and retrieving values works as expected.*/public void testInsertAndRetrieve(){KeyedObjects data=new KeyedObjects();data.addObject(""A"",new Double(1.0));data.addObject(""B"",new Double(2.0));data.addObject(""C"",new Double(3.0));data.addObject(""D"",null);assertEquals(data.getKey(0),""A"");assertEquals(data.getKey(1),""B"");assertEquals(data.getKey(2),""C"");assertEquals(data.getKey(3),""D"");assertEquals(data.getObject(""A""),new Double(1.0));assertEquals(data.getObject(""B""),new Double(2.0));assertEquals(data.getObject(""C""),new Double(3.0));assertEquals(data.getObject(""D""),null);boolean pass=false;try {data.getObject(""Not a key"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);assertEquals(data.getObject(0),new Double(1.0));assertEquals(data.getObject(1),new Double(2.0));assertEquals(data.getObject(2),new Double(3.0));assertEquals(data.getObject(3),null);}"
"org.jfree.data.junit.KeyedObjectsTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){KeyedObjects ko1=new KeyedObjects();ko1.addObject(""Key 1"",""Object 1"");ko1.addObject(""Key 2"",null);ko1.addObject(""Key 3"",""Object 2"");KeyedObjects ko2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(ko1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));ko2=(KeyedObjects)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(ko1,ko2);}"
"org.jfree.data.junit.KeyedObjectsTests.testGetObject",0,"/** * Simple checks for the getObject(int)method.*/public void testGetObject(){KeyedObjects ko1=new KeyedObjects();ko1.addObject(""Key 1"",""Object 1"");ko1.addObject(""Key 2"",null);ko1.addObject(""Key 3"",""Object 2"");assertEquals(""Object 1"",ko1.getObject(0));assertNull(ko1.getObject(1));assertEquals(""Object 2"",ko1.getObject(2));boolean pass=false;try {ko1.getObject(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {ko1.getObject(3);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjectsTests.testGetKey",0,"/** * Simple checks for the getKey(int)method.*/public void testGetKey(){KeyedObjects ko1=new KeyedObjects();ko1.addObject(""Key 1"",""Object 1"");ko1.addObject(""Key 2"",null);ko1.addObject(""Key 3"",""Object 2"");assertEquals(""Key 1"",ko1.getKey(0));assertEquals(""Key 2"",ko1.getKey(1));assertEquals(""Key 3"",ko1.getKey(2));boolean pass=false;try {ko1.getKey(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {ko1.getKey(3);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjectsTests.testGetIndex",0,"/** * Simple checks for the getIndex(Comparable)method.*/public void testGetIndex(){KeyedObjects ko1=new KeyedObjects();ko1.addObject(""Key 1"",""Object 1"");ko1.addObject(""Key 2"",null);ko1.addObject(""Key 3"",""Object 2"");assertEquals(0,ko1.getIndex(""Key 1""));assertEquals(1,ko1.getIndex(""Key 2""));assertEquals(2,ko1.getIndex(""Key 3""));boolean pass=false;try {ko1.getIndex(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjectsTests.testSetObject",0,"/** * Some checks for the setObject(Comparable,Object)method.*/public void testSetObject(){KeyedObjects ko1=new KeyedObjects();ko1.setObject(""Key 1"",""Object 1"");ko1.setObject(""Key 2"",null);ko1.setObject(""Key 3"",""Object 2"");assertEquals(""Object 1"",ko1.getObject(""Key 1""));assertEquals(null,ko1.getObject(""Key 2""));assertEquals(""Object 2"",ko1.getObject(""Key 3""));ko1.setObject(""Key 2"",""AAA"");ko1.setObject(""Key 3"",""BBB"");assertEquals(""AAA"",ko1.getObject(""Key 2""));assertEquals(""BBB"",ko1.getObject(""Key 3""));boolean pass=false;try {ko1.setObject(null,""XX"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjectsTests.testRemoveValue",0,"/** * Some checks for the removeValue()methods.*/public void testRemoveValue(){KeyedObjects ko1=new KeyedObjects();ko1.setObject(""Key 1"",""Object 1"");ko1.setObject(""Key 2"",null);ko1.setObject(""Key 3"",""Object 2"");ko1.removeValue(1);assertEquals(2,ko1.getItemCount());assertEquals(1,ko1.getIndex(""Key 3""));ko1.removeValue(""Key 1"");assertEquals(1,ko1.getItemCount());assertEquals(0,ko1.getIndex(""Key 3""));boolean pass=false;try {ko1.removeValue(""UNKNOWN"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {ko1.removeValue(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjectsTests.testRemoveValueInt",0,"/** * Some checks for the removeValue(int)method.*/public void testRemoveValueInt(){KeyedObjects ko1=new KeyedObjects();ko1.setObject(""Key 1"",""Object 1"");ko1.setObject(""Key 2"",null);ko1.setObject(""Key 3"",""Object 2"");ko1.removeValue(1);assertEquals(2,ko1.getItemCount());assertEquals(1,ko1.getIndex(""Key 3""));boolean pass=false;try {ko1.removeValue(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {ko1.removeValue(2);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetPaint",0,"/** * Some checks for the getPaint()and setPaint()methods.*/public void testGetSetPaint(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(Color.gray,m.getPaint());m.setPaint(Color.blue);assertEquals(Color.blue,m.getPaint());assertEquals(m,this.lastEvent.getMarker());try {m.setPaint(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetStroke",0,"/** * Some checks for the getStroke()and setStroke()methods.*/public void testGetSetStroke(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(new BasicStroke(0.5f),m.getStroke());m.setStroke(new BasicStroke(1.1f));assertEquals(new BasicStroke(1.1f),m.getStroke());assertEquals(m,this.lastEvent.getMarker());try {m.setStroke(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetOutlinePaint",0,"/** * Some checks for the getOutlinePaint()and setOutlinePaint()methods.*/public void testGetSetOutlinePaint(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(Color.gray,m.getOutlinePaint());m.setOutlinePaint(Color.yellow);assertEquals(Color.yellow,m.getOutlinePaint());assertEquals(m,this.lastEvent.getMarker());m.setOutlinePaint(null);assertEquals(null,m.getOutlinePaint());}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetOutlineStroke",0,"/** * Some checks for the getOutlineStroke()and setOutlineStroke()methods.*/public void testGetSetOutlineStroke(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(new BasicStroke(0.5f),m.getOutlineStroke());m.setOutlineStroke(new BasicStroke(1.1f));assertEquals(new BasicStroke(1.1f),m.getOutlineStroke());assertEquals(m,this.lastEvent.getMarker());m.setOutlineStroke(null);assertEquals(null,m.getOutlineStroke());}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetAlpha",0,"/** * Some checks for the getAlpha()and setAlpha()methods.*/public void testGetSetAlpha(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(0.8f,m.getAlpha(),EPSILON);m.setAlpha(0.5f);assertEquals(0.5f,m.getAlpha(),EPSILON);assertEquals(m,this.lastEvent.getMarker());}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabel",0,"/** * Some checks for the getLabel()and setLabel()methods.*/public void testGetSetLabel(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(null,m.getLabel());m.setLabel(""XYZ"");assertEquals(""XYZ"",m.getLabel());assertEquals(m,this.lastEvent.getMarker());m.setLabel(null);assertEquals(null,m.getLabel());}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelFont",0,"/** * Some checks for the getLabelFont()and setLabelFont()methods.*/public void testGetSetLabelFont(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(new Font(""SansSerif"",Font.PLAIN,9),m.getLabelFont());m.setLabelFont(new Font(""SansSerif"",Font.BOLD,10));assertEquals(new Font(""SansSerif"",Font.BOLD,10),m.getLabelFont());assertEquals(m,this.lastEvent.getMarker());try {m.setLabelFont(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelPaint",0,"/** * Some checks for the getLabelPaint()and setLabelPaint()methods.*/public void testGetSetLabelPaint(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(Color.black,m.getLabelPaint());m.setLabelPaint(Color.red);assertEquals(Color.red,m.getLabelPaint());assertEquals(m,this.lastEvent.getMarker());try {m.setLabelPaint(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelAnchor",0,"/** * Some checks for the getLabelAnchor()and setLabelAnchor()methods.*/public void testGetSetLabelAnchor(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(RectangleAnchor.TOP_LEFT,m.getLabelAnchor());m.setLabelAnchor(RectangleAnchor.TOP);assertEquals(RectangleAnchor.TOP,m.getLabelAnchor());assertEquals(m,this.lastEvent.getMarker());try {m.setLabelAnchor(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelOffset",0,"/** * Some checks for the getLabelOffset()and setLabelOffset()methods.*/public void testGetSetLabelOffset(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(new RectangleInsets(3,3,3,3),m.getLabelOffset());m.setLabelOffset(new RectangleInsets(1,2,3,4));assertEquals(new RectangleInsets(1,2,3,4),m.getLabelOffset());assertEquals(m,this.lastEvent.getMarker());try {m.setLabelOffset(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelOffsetType",0,"/** * Some checks for the getLabelOffsetType()and setLabelOffsetType()methods.*/public void testGetSetLabelOffsetType(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(LengthAdjustmentType.CONTRACT,m.getLabelOffsetType());m.setLabelOffsetType(LengthAdjustmentType.EXPAND);assertEquals(LengthAdjustmentType.EXPAND,m.getLabelOffsetType());assertEquals(m,this.lastEvent.getMarker());try {m.setLabelOffsetType(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testGetSetLabelTextAnchor",0,"/** * Some checks for the getLabelTextAnchor()and setLabelTextAnchor()methods.*/public void testGetSetLabelTextAnchor(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(TextAnchor.CENTER,m.getLabelTextAnchor());m.setLabelTextAnchor(TextAnchor.BASELINE_LEFT);assertEquals(TextAnchor.BASELINE_LEFT,m.getLabelTextAnchor());assertEquals(m,this.lastEvent.getMarker());try {m.setLabelTextAnchor(null);fail(""Expected an IllegalArgumentException for null."");}catch(IllegalArgumentException e){assertTrue(true);}}"
"org.jfree.chart.plot.junit.MarkerTests.testListenersWithCategoryPlot",0,"/** * Checks that a CategoryPlot deregisters listeners when clearing markers.*/public void testListenersWithCategoryPlot(){CategoryPlot plot=new CategoryPlot();CategoryMarker marker1=new CategoryMarker(""X"");ValueMarker marker2=new ValueMarker(1.0);plot.addDomainMarker(marker1);plot.addRangeMarker(marker2);EventListener[]listeners1=marker1.getListeners(MarkerChangeListener.class);assertTrue(Arrays.asList(listeners1).contains(plot));EventListener[]listeners2=marker1.getListeners(MarkerChangeListener.class);assertTrue(Arrays.asList(listeners2).contains(plot));plot.clearDomainMarkers();plot.clearRangeMarkers();listeners1=marker1.getListeners(MarkerChangeListener.class);assertFalse(Arrays.asList(listeners1).contains(plot));listeners2=marker1.getListeners(MarkerChangeListener.class);assertFalse(Arrays.asList(listeners2).contains(plot));}"
"org.jfree.chart.plot.junit.MarkerTests.testListenersWithXYPlot",0,"/** * Checks that an XYPlot deregisters listeners when clearing markers.*/public void testListenersWithXYPlot(){XYPlot plot=new XYPlot();ValueMarker marker1=new ValueMarker(1.0);ValueMarker marker2=new ValueMarker(2.0);plot.addDomainMarker(marker1);plot.addRangeMarker(marker2);EventListener[]listeners1=marker1.getListeners(MarkerChangeListener.class);assertTrue(Arrays.asList(listeners1).contains(plot));EventListener[]listeners2=marker1.getListeners(MarkerChangeListener.class);assertTrue(Arrays.asList(listeners2).contains(plot));plot.clearDomainMarkers();plot.clearRangeMarkers();listeners1=marker1.getListeners(MarkerChangeListener.class);assertFalse(Arrays.asList(listeners1).contains(plot));listeners2=marker1.getListeners(MarkerChangeListener.class);assertFalse(Arrays.asList(listeners2).contains(plot));}"
"org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testDataRange",0,"/** * A small test for the data range calculated on this dataset.*/public void testDataRange(){}"
"org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultOHLCDataset d1=new DefaultOHLCDataset(""Series 1"",new OHLCDataItem[0]);DefaultOHLCDataset d2=new DefaultOHLCDataset(""Series 1"",new OHLCDataItem[0]);assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1=new DefaultOHLCDataset(""Series 2"",new OHLCDataItem[0]);assertFalse(d1.equals(d2));d2=new DefaultOHLCDataset(""Series 2"",new OHLCDataItem[0]);assertTrue(d1.equals(d2));d1=new DefaultOHLCDataset(""Series 2"",new OHLCDataItem[]{new OHLCDataItem(new Date(123L),1.2,3.4,5.6,7.8,99.9)});assertFalse(d1.equals(d2));d2=new DefaultOHLCDataset(""Series 2"",new OHLCDataItem[]{new OHLCDataItem(new Date(123L),1.2,3.4,5.6,7.8,99.9)});assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultOHLCDataset d1=new DefaultOHLCDataset(""Series 1"",new OHLCDataItem[0]);DefaultOHLCDataset d2=null;try {d2=(DefaultOHLCDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultOHLCDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultOHLCDataset d1=new DefaultOHLCDataset(""Series 1"",new OHLCDataItem[0]);DefaultOHLCDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultOHLCDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.chart.renderer.category.junit.AreaRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){AreaRenderer r1=new AreaRenderer();AreaRenderer r2=new AreaRenderer();assertEquals(r1,r2);r1.setEndType(AreaRendererEndType.LEVEL);assertFalse(r1.equals(r2));r2.setEndType(AreaRendererEndType.LEVEL);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.AreaRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){AreaRenderer r1=new AreaRenderer();AreaRenderer r2=new AreaRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.AreaRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){AreaRenderer r1=new AreaRenderer();AreaRenderer r2=null;try {r2=(AreaRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.AreaRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){AreaRenderer r1=new AreaRenderer();AreaRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(AreaRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.AreaRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultCategoryDataset dataset0=new DefaultCategoryDataset();dataset0.addValue(21.0,""R1"",""C1"");dataset0.addValue(22.0,""R2"",""C1"");DefaultCategoryDataset dataset1=new DefaultCategoryDataset();dataset1.addValue(23.0,""R3"",""C1"");dataset1.addValue(24.0,""R4"",""C1"");dataset1.addValue(25.0,""R5"",""C1"");AreaRenderer r=new AreaRenderer();CategoryPlot plot=new CategoryPlot(dataset0,new CategoryAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,dataset1);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""R5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.plot.junit.ValueMarkerTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Marker m1=new ValueMarker(45.0);Marker m2=new ValueMarker(45.0);assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1.setPaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertFalse(m1.equals(m2));m2.setPaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertTrue(m1.equals(m2));BasicStroke stroke=new BasicStroke(2.2f);m1.setStroke(stroke);assertFalse(m1.equals(m2));m2.setStroke(stroke);assertTrue(m1.equals(m2));m1.setOutlinePaint(new GradientPaint(4.0f,3.0f,Color.yellow,2.0f,1.0f,Color.white));assertFalse(m1.equals(m2));m2.setOutlinePaint(new GradientPaint(4.0f,3.0f,Color.yellow,2.0f,1.0f,Color.white));assertTrue(m1.equals(m2));m1.setOutlineStroke(stroke);assertFalse(m1.equals(m2));m2.setOutlineStroke(stroke);assertTrue(m1.equals(m2));m1.setAlpha(0.1f);assertFalse(m1.equals(m2));m2.setAlpha(0.1f);assertTrue(m1.equals(m2));m1.setLabel(""New Label"");assertFalse(m1.equals(m2));m2.setLabel(""New Label"");assertTrue(m1.equals(m2));m1.setLabelFont(new Font(""SansSerif"",Font.PLAIN,10));assertFalse(m1.equals(m2));m2.setLabelFont(new Font(""SansSerif"",Font.PLAIN,10));assertTrue(m1.equals(m2));m1.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertFalse(m1.equals(m2));m2.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertTrue(m1.equals(m2));m1.setLabelAnchor(RectangleAnchor.TOP_RIGHT);assertFalse(m1.equals(m2));m2.setLabelAnchor(RectangleAnchor.TOP_RIGHT);assertTrue(m1.equals(m2));m1.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);assertFalse(m1.equals(m2));m2.setLabelTextAnchor(TextAnchor.BASELINE_RIGHT);assertTrue(m1.equals(m2));m1.setLabelOffset(new RectangleInsets(10.0,10.0,10.0,10.0));assertFalse(m1.equals(m2));m2.setLabelOffset(new RectangleInsets(10.0,10.0,10.0,10.0));assertTrue(m1.equals(m2));m1.setLabelOffsetType(LengthAdjustmentType.EXPAND);assertFalse(m1.equals(m2));m2.setLabelOffsetType(LengthAdjustmentType.EXPAND);assertTrue(m1.equals(m2));m1=new ValueMarker(12.3);m2=new ValueMarker(45.6);assertFalse(m1.equals(m2));m2=new ValueMarker(12.3);assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.ValueMarkerTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ValueMarker m1=new ValueMarker(25.0);ValueMarker m2=null;try {m2=(ValueMarker)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1 != m2);assertTrue(m1.getClass()== m2.getClass());assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.ValueMarkerTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ValueMarker m1=new ValueMarker(25.0);ValueMarker m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(ValueMarker)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=m1.equals(m2);assertTrue(b);}"
"org.jfree.chart.plot.junit.ValueMarkerTests.testGetSetValue",0,"/** * Some checks for the getValue()and setValue()methods.*/public void testGetSetValue(){ValueMarker m=new ValueMarker(1.1);m.addChangeListener(this);this.lastEvent=null;assertEquals(1.1,m.getValue(),EPSILON);m.setValue(33.3);assertEquals(33.3,m.getValue(),EPSILON);assertEquals(m,this.lastEvent.getMarker());}"
"org.jfree.chart.plot.junit.ValueMarkerTests.test1802195",0,"/** * A test for bug 1802195.*/public void test1802195(){ValueMarker m1=new ValueMarker(25.0);ValueMarker m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(ValueMarker)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=m1.equals(m2);assertTrue(b);boolean pass=true;try {m2.setValue(-10.0);}catch(NullPointerException e){pass=false;}assertTrue(pass);}"
"org.jfree.chart.plot.junit.ValueMarkerTests.test1808376",0,"/** * A test for bug report 1808376.*/public void test1808376(){Stroke stroke=new BasicStroke(1.0f);Stroke outlineStroke=new BasicStroke(2.0f);ValueMarker m=new ValueMarker(1.0,Color.red,stroke,Color.blue,outlineStroke,0.5f);assertEquals(1.0,m.getValue(),EPSILON);assertEquals(Color.red,m.getPaint());assertEquals(stroke,m.getStroke());assertEquals(Color.blue,m.getOutlinePaint());assertEquals(outlineStroke,m.getOutlineStroke());assertEquals(0.5f,m.getAlpha(),EPSILON);}"
"org.jfree.chart.entity.junit.LegendItemEntityTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){LegendItemEntity e1=new LegendItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0));LegendItemEntity e2=new LegendItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(e1.equals(e2));e1.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertFalse(e1.equals(e2));e2.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(e1.equals(e2));e1.setToolTipText(""New ToolTip"");assertFalse(e1.equals(e2));e2.setToolTipText(""New ToolTip"");assertTrue(e1.equals(e2));e1.setURLText(""New URL"");assertFalse(e1.equals(e2));e2.setURLText(""New URL"");assertTrue(e1.equals(e2));e1.setDataset(new DefaultCategoryDataset());assertFalse(e1.equals(e2));e2.setDataset(new DefaultCategoryDataset());assertTrue(e1.equals(e2));e1.setSeriesKey(""A"");assertFalse(e1.equals(e2));e2.setSeriesKey(""A"");assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.LegendItemEntityTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LegendItemEntity e1=new LegendItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0));LegendItemEntity e2=null;try {e2=(LegendItemEntity)e1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(e1 != e2);assertTrue(e1.getClass()== e2.getClass());assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.LegendItemEntityTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LegendItemEntity e1=new LegendItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0));LegendItemEntity e2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(e1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));e2=(LegendItemEntity)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(e1,e2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testDrawWithEmptyDataset",0,"/** * Test chart drawing with an empty dataset to ensure that this special case doesn't cause any exceptions.*/public void testDrawWithEmptyDataset(){boolean success=false;JFreeChart chart=ChartFactory.createStackedXYAreaChart(""title"",""x"",""y"",new DefaultTableXYDataset(),PlotOrientation.VERTICAL,true,false,false);XYPlot plot=(XYPlot)chart.getPlot();plot.setRenderer(new StackedXYAreaRenderer2());try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){StackedXYAreaRenderer2 r1=new StackedXYAreaRenderer2();StackedXYAreaRenderer2 r2=new StackedXYAreaRenderer2();assertEquals(r1,r2);assertEquals(r2,r1);r1.setRoundXCoordinates(!r1.getRoundXCoordinates());assertFalse(r1.equals(r2));r2.setRoundXCoordinates(r1.getRoundXCoordinates());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StackedXYAreaRenderer2 r1=new StackedXYAreaRenderer2();StackedXYAreaRenderer2 r2=new StackedXYAreaRenderer2();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StackedXYAreaRenderer2 r1=new StackedXYAreaRenderer2();StackedXYAreaRenderer2 r2=null;try {r2=(StackedXYAreaRenderer2)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StackedXYAreaRenderer2 r1=new StackedXYAreaRenderer2();StackedXYAreaRenderer2 r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StackedXYAreaRenderer2)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests.testFindRangeBounds",0,"/** * Check that the renderer is calculating the range bounds correctly.*/public void testFindRangeBounds(){TableXYDataset dataset=RendererXYPackageTests.createTestTableXYDataset();JFreeChart chart=ChartFactory.createStackedXYAreaChart(""Test Chart"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();StackedXYAreaRenderer2 renderer=new StackedXYAreaRenderer2();plot.setRenderer(renderer);NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();Range bounds=rangeAxis.getRange();assertTrue(bounds.contains(6.0));assertTrue(bounds.contains(8.0));assertNull(renderer.findRangeBounds(null));assertNull(renderer.findRangeBounds(new DefaultTableXYDataset()));}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetSeriesCount",0,"/** * Some checks for the getSeriesCount()method.*/public void testGetSeriesCount(){DefaultIntervalXYDataset d=new DefaultIntervalXYDataset();assertEquals(0,d.getSeriesCount());d=createSampleDataset1();assertEquals(2,d.getSeriesCount());}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetSeriesKey",0,"/** * Some checks for the getSeriesKey(int)method.*/public void testGetSeriesKey(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(""S1"",d.getSeriesKey(0));assertEquals(""S2"",d.getSeriesKey(1));boolean pass=false;try {d.getSeriesKey(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d.getSeriesKey(2);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetItemCount",0,"/** * Some checks for the getItemCount()method.*/public void testGetItemCount(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(3,d.getItemCount(0));assertEquals(3,d.getItemCount(1));boolean pass=false;try {d.getItemCount(2);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetXValue",0,"/** * Some checks for the getXValue()method.*/public void testGetXValue(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(1.0,d.getXValue(0,0),EPSILON);assertEquals(2.0,d.getXValue(0,1),EPSILON);assertEquals(3.0,d.getXValue(0,2),EPSILON);assertEquals(11.0,d.getXValue(1,0),EPSILON);assertEquals(12.0,d.getXValue(1,1),EPSILON);assertEquals(13.0,d.getXValue(1,2),EPSILON);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetYValue",0,"/** * Some checks for the getYValue()method.*/public void testGetYValue(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(4.0,d.getYValue(0,0),EPSILON);assertEquals(5.0,d.getYValue(0,1),EPSILON);assertEquals(6.0,d.getYValue(0,2),EPSILON);assertEquals(14.0,d.getYValue(1,0),EPSILON);assertEquals(15.0,d.getYValue(1,1),EPSILON);assertEquals(16.0,d.getYValue(1,2),EPSILON);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetStartXValue",0,"/** * Some checks for the getStartXValue()method.*/public void testGetStartXValue(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(0.9,d.getStartXValue(0,0),EPSILON);assertEquals(1.9,d.getStartXValue(0,1),EPSILON);assertEquals(2.9,d.getStartXValue(0,2),EPSILON);assertEquals(10.9,d.getStartXValue(1,0),EPSILON);assertEquals(11.9,d.getStartXValue(1,1),EPSILON);assertEquals(12.9,d.getStartXValue(1,2),EPSILON);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetEndXValue",0,"/** * Some checks for the getEndXValue()method.*/public void testGetEndXValue(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(1.1,d.getEndXValue(0,0),EPSILON);assertEquals(2.1,d.getEndXValue(0,1),EPSILON);assertEquals(3.1,d.getEndXValue(0,2),EPSILON);assertEquals(11.1,d.getEndXValue(1,0),EPSILON);assertEquals(12.1,d.getEndXValue(1,1),EPSILON);assertEquals(13.1,d.getEndXValue(1,2),EPSILON);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetStartYValue",0,"/** * Some checks for the getStartYValue()method.*/public void testGetStartYValue(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(1.09,d.getStartYValue(0,0),EPSILON);assertEquals(2.09,d.getStartYValue(0,1),EPSILON);assertEquals(3.09,d.getStartYValue(0,2),EPSILON);assertEquals(11.09,d.getStartYValue(1,0),EPSILON);assertEquals(12.09,d.getStartYValue(1,1),EPSILON);assertEquals(13.09,d.getStartYValue(1,2),EPSILON);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testGetEndYValue",0,"/** * Some checks for the getEndYValue()method.*/public void testGetEndYValue(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(1.11,d.getEndYValue(0,0),EPSILON);assertEquals(2.11,d.getEndYValue(0,1),EPSILON);assertEquals(3.11,d.getEndYValue(0,2),EPSILON);assertEquals(11.11,d.getEndYValue(1,0),EPSILON);assertEquals(12.11,d.getEndYValue(1,1),EPSILON);assertEquals(13.11,d.getEndYValue(1,2),EPSILON);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultIntervalXYDataset d1=new DefaultIntervalXYDataset();DefaultIntervalXYDataset d2=new DefaultIntervalXYDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1=createSampleDataset1();assertFalse(d1.equals(d2));d2=createSampleDataset1();assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultIntervalXYDataset d1=new DefaultIntervalXYDataset();DefaultIntervalXYDataset d2=null;try {d2=(DefaultIntervalXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1=createSampleDataset1();try {d2=(DefaultIntervalXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testCloning2",0,"/** * Another test for cloning.*/public void testCloning2(){DefaultIntervalXYDataset d1=new DefaultIntervalXYDataset();double[]x1=new double[]{1.0,2.0,3.0};double[]x1Start=new double[]{0.9,1.9,2.9};double[]x1End=new double[]{1.1,2.1,3.1};double[]y1=new double[]{4.0,5.0,6.0};double[]y1Start=new double[]{1.09,2.09,3.09};double[]y1End=new double[]{1.11,2.11,3.11};double[][]data1=new double[][]{x1,x1Start,x1End,y1,y1Start,y1End};d1.addSeries(""S1"",data1);DefaultIntervalXYDataset d2=null;try {d2=(DefaultIntervalXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));x1[0]=111.1;assertFalse(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultIntervalXYDataset d1=new DefaultIntervalXYDataset();DefaultIntervalXYDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultIntervalXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);d1=createSampleDataset1();try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultIntervalXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testIndexOf",0,"/** * Some checks for the indexOf(Comparable)method.*/public void testIndexOf(){DefaultIntervalXYDataset d=createSampleDataset1();assertEquals(0,d.indexOf(""S1""));assertEquals(1,d.indexOf(""S2""));assertEquals(-1,d.indexOf(""Green Eggs and Ham""));assertEquals(-1,d.indexOf(null));}"
"org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests.testAddSeries",0,"/** * Some tests for the addSeries()method.*/public void testAddSeries(){DefaultIntervalXYDataset d=new DefaultIntervalXYDataset();d.addSeries(""S1"",new double[][]{{1.0},{0.5},{1.5},{2.0},{2.5},{1.5}});assertEquals(1,d.getSeriesCount());assertEquals(""S1"",d.getSeriesKey(0));d.addSeries(""S1"",new double[][]{{1.1},{0.6},{1.6},{2.1},{2.6},{1.6}});assertEquals(1,d.getSeriesCount());assertEquals(2.1,d.getYValue(0,0),EPSILON);boolean pass=false;try {d.addSeries(null,new double[][]{{1.1},{0.6},{1.6},{2.1},{2.6},{1.6}});}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.XYCoordinateTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){XYCoordinate v1=new XYCoordinate(1.0,2.0);XYCoordinate v2=new XYCoordinate(1.0,2.0);assertTrue(v1.equals(v2));assertTrue(v2.equals(v1));v1=new XYCoordinate(1.1,2.0);assertFalse(v1.equals(v2));v2=new XYCoordinate(1.1,2.0);assertTrue(v1.equals(v2));v1=new XYCoordinate(1.1,2.2);assertFalse(v1.equals(v2));v2=new XYCoordinate(1.1,2.2);assertTrue(v1.equals(v2));}"
"org.jfree.data.xy.junit.XYCoordinateTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYCoordinate v1=new XYCoordinate(1.0,2.0);XYCoordinate v2=new XYCoordinate(1.0,2.0);assertTrue(v1.equals(v2));int h1=v1.hashCode();int h2=v2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.xy.junit.XYCoordinateTests.testCloning",0,"/** * Immutable class is not cloneable.*/public void testCloning(){XYCoordinate v1=new XYCoordinate(1.0,2.0);assertFalse(v1 instanceof Cloneable);}"
"org.jfree.data.xy.junit.XYCoordinateTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYCoordinate v1=new XYCoordinate(1.0,2.0);XYCoordinate v2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(v1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));v2=(XYCoordinate)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(v1,v2);}"
"org.jfree.data.junit.ComparableObjectSeriesTests.testConstructor1",0,"/** * Some checks for the constructor.*/public void testConstructor1(){ComparableObjectSeries s1=new ComparableObjectSeries(""s1"");assertEquals(""s1"",s1.getKey());assertNull(s1.getDescription());assertTrue(s1.getAllowDuplicateXValues());assertTrue(s1.getAutoSort());assertEquals(0,s1.getItemCount());assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());boolean pass=false;try {s1=new ComparableObjectSeries(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.ComparableObjectSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){MyComparableObjectSeries s1=new MyComparableObjectSeries(""A"");MyComparableObjectSeries s2=new MyComparableObjectSeries(""A"");assertTrue(s1.equals(s2));assertTrue(s2.equals(s1));s1=new MyComparableObjectSeries(""B"");assertFalse(s1.equals(s2));s2=new MyComparableObjectSeries(""B"");assertTrue(s1.equals(s2));s1=new MyComparableObjectSeries(""B"",false,true);assertFalse(s1.equals(s2));s2=new MyComparableObjectSeries(""B"",false,true);assertTrue(s1.equals(s2));s1=new MyComparableObjectSeries(""B"",false,false);assertFalse(s1.equals(s2));s2=new MyComparableObjectSeries(""B"",false,false);assertTrue(s1.equals(s2));s1.add(new Integer(1),""ABC"");assertFalse(s1.equals(s2));s2.add(new Integer(1),""ABC"");assertTrue(s1.equals(s2));s1.add(new Integer(0),""DEF"");assertFalse(s1.equals(s2));s2.add(new Integer(0),""DEF"");assertTrue(s1.equals(s2));s1.remove(new Integer(1));assertFalse(s1.equals(s2));s2.remove(new Integer(1));assertTrue(s1.equals(s2));}"
"org.jfree.data.junit.ComparableObjectSeriesTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){MyComparableObjectSeries s1=new MyComparableObjectSeries(""A"");s1.add(new Integer(1),""ABC"");MyComparableObjectSeries s2=null;try {s2=(MyComparableObjectSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.junit.ComparableObjectSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MyComparableObjectSeries s1=new MyComparableObjectSeries(""A"");s1.add(new Integer(1),""ABC"");MyComparableObjectSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(MyComparableObjectSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.junit.ComparableObjectSeriesTests.testHashCode",0,"/** * Some simple checks for the hashCode()method.*/public void testHashCode(){MyComparableObjectSeries s1=new MyComparableObjectSeries(""Test"");MyComparableObjectSeries s2=new MyComparableObjectSeries(""Test"");assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(""A"",""1"");s2.add(""A"",""1"");assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(""B"",null);s2.add(""B"",null);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(""C"",""3"");s2.add(""C"",""3"");assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(""D"",""4"");s2.add(""D"",""4"");assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());}"
"org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){ClusteredXYBarRenderer r1=new ClusteredXYBarRenderer();ClusteredXYBarRenderer r2=new ClusteredXYBarRenderer();assertEquals(r1,r2);assertEquals(r2,r1);r1=new ClusteredXYBarRenderer(1.2,false);assertFalse(r1.equals(r2));r2=new ClusteredXYBarRenderer(1.2,false);assertTrue(r1.equals(r2));r1=new ClusteredXYBarRenderer(1.2,true);assertFalse(r1.equals(r2));r2=new ClusteredXYBarRenderer(1.2,true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){ClusteredXYBarRenderer r1=new ClusteredXYBarRenderer();ClusteredXYBarRenderer r2=new ClusteredXYBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ClusteredXYBarRenderer r1=new ClusteredXYBarRenderer();ClusteredXYBarRenderer r2=null;try {r2=(ClusteredXYBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ClusteredXYBarRenderer r1=new ClusteredXYBarRenderer();ClusteredXYBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(ClusteredXYBarRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests.testFindDomainBounds",0,"/** * Some checks for the findDomainBounds()method (which requires special handling when the centerBarAtStartValue flag is set to true).*/public void testFindDomainBounds(){AbstractXYItemRenderer renderer=new ClusteredXYBarRenderer();XYDataset dataset=createSampleDataset1();Range r=renderer.findDomainBounds(dataset);assertEquals(0.9,r.getLowerBound(),EPSILON);assertEquals(13.1,r.getUpperBound(),EPSILON);renderer=new ClusteredXYBarRenderer(0.0,true);r=renderer.findDomainBounds(dataset);assertEquals(0.8,r.getLowerBound(),EPSILON);assertEquals(13.0,r.getUpperBound(),EPSILON);assertTrue(renderer.findDomainBounds(null)== null);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){NumberAxis a1=new NumberAxis(""Test"");NumberAxis a2=null;try {a2=(NumberAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.NumberAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){NumberAxis a1=new NumberAxis(""Test"");NumberAxis a2=new NumberAxis(""Test"");assertTrue(a1.equals(a2));a1.setAutoRangeIncludesZero(false);assertFalse(a1.equals(a2));a2.setAutoRangeIncludesZero(false);assertTrue(a1.equals(a2));a1.setAutoRangeStickyZero(false);assertFalse(a1.equals(a2));a2.setAutoRangeStickyZero(false);assertTrue(a1.equals(a2));a1.setTickUnit(new NumberTickUnit(25.0));assertFalse(a1.equals(a2));a2.setTickUnit(new NumberTickUnit(25.0));assertTrue(a1.equals(a2));a1.setNumberFormatOverride(new DecimalFormat(""0.00""));assertFalse(a1.equals(a2));a2.setNumberFormatOverride(new DecimalFormat(""0.00""));assertTrue(a1.equals(a2));a1.setRangeType(RangeType.POSITIVE);assertFalse(a1.equals(a2));a2.setRangeType(RangeType.POSITIVE);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.NumberAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){NumberAxis a1=new NumberAxis(""Test"");NumberAxis a2=new NumberAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testTranslateJava2DToValue",0,"/** * Test the translation of Java2D values to data values.*/public void testTranslateJava2DToValue(){NumberAxis axis=new NumberAxis();axis.setRange(50.0,100.0);Rectangle2D dataArea=new Rectangle2D.Double(10.0,50.0,400.0,300.0);double y1=axis.java2DToValue(75.0,dataArea,RectangleEdge.LEFT);assertEquals(y1,95.8333333,EPSILON);double y2=axis.java2DToValue(75.0,dataArea,RectangleEdge.RIGHT);assertEquals(y2,95.8333333,EPSILON);double x1=axis.java2DToValue(75.0,dataArea,RectangleEdge.TOP);assertEquals(x1,58.125,EPSILON);double x2=axis.java2DToValue(75.0,dataArea,RectangleEdge.BOTTOM);assertEquals(x2,58.125,EPSILON);axis.setInverted(true);double y3=axis.java2DToValue(75.0,dataArea,RectangleEdge.LEFT);assertEquals(y3,54.1666667,EPSILON);double y4=axis.java2DToValue(75.0,dataArea,RectangleEdge.RIGHT);assertEquals(y4,54.1666667,EPSILON);double x3=axis.java2DToValue(75.0,dataArea,RectangleEdge.TOP);assertEquals(x3,91.875,EPSILON);double x4=axis.java2DToValue(75.0,dataArea,RectangleEdge.BOTTOM);assertEquals(x4,91.875,EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){NumberAxis a1=new NumberAxis(""Test Axis"");NumberAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(NumberAxis)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange1",0,"/** * A simple test for the auto-range calculation looking at a NumberAxis used as the range axis for a CategoryPlot.*/public void testAutoRange1(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.setValue(100.0,""Row 1"",""Column 1"");dataset.setValue(200.0,""Row 1"",""Column 2"");JFreeChart chart=ChartFactory.createBarChart(""Test"",""Categories"",""Value"",dataset,PlotOrientation.VERTICAL,false,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();NumberAxis axis=(NumberAxis)plot.getRangeAxis();assertEquals(axis.getLowerBound(),0.0,EPSILON);assertEquals(axis.getUpperBound(),210.0,EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange2",0,"/** * A simple test for the auto-range calculation looking at a NumberAxis used as the range axis for a CategoryPlot.  In this case,the 'autoRangeIncludesZero' flag is set to false.*/public void testAutoRange2(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.setValue(100.0,""Row 1"",""Column 1"");dataset.setValue(200.0,""Row 1"",""Column 2"");JFreeChart chart=ChartFactory.createLineChart(""Test"",""Categories"",""Value"",dataset,PlotOrientation.VERTICAL,false,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();NumberAxis axis=(NumberAxis)plot.getRangeAxis();axis.setAutoRangeIncludesZero(false);assertEquals(axis.getLowerBound(),95.0,EPSILON);assertEquals(axis.getUpperBound(),205.0,EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange3",0,"/** * A simple test for the auto-range calculation looking at a NumberAxis used as the range axis for a CategoryPlot.  In this case,the 'autoRangeIncludesZero' flag is set to false AND the original dataset is replaced with a new dataset.*/public void testAutoRange3(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.setValue(100.0,""Row 1"",""Column 1"");dataset.setValue(200.0,""Row 1"",""Column 2"");JFreeChart chart=ChartFactory.createLineChart(""Test"",""Categories"",""Value"",dataset,PlotOrientation.VERTICAL,false,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();NumberAxis axis=(NumberAxis)plot.getRangeAxis();axis.setAutoRangeIncludesZero(false);assertEquals(axis.getLowerBound(),95.0,EPSILON);assertEquals(axis.getUpperBound(),205.0,EPSILON);DefaultCategoryDataset dataset2=new DefaultCategoryDataset();dataset2.setValue(900.0,""Row 1"",""Column 1"");dataset2.setValue(1000.0,""Row 1"",""Column 2"");plot.setDataset(dataset2);assertEquals(axis.getLowerBound(),895.0,EPSILON);assertEquals(axis.getUpperBound(),1005.0,EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testAutoRange4",0,"/** * A check for the interaction between the 'autoRangeIncludesZero' flag and the base setting in the BarRenderer.*/public void testAutoRange4(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.setValue(100.0,""Row 1"",""Column 1"");dataset.setValue(200.0,""Row 1"",""Column 2"");JFreeChart chart=ChartFactory.createBarChart(""Test"",""Categories"",""Value"",dataset,PlotOrientation.VERTICAL,false,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();NumberAxis axis=(NumberAxis)plot.getRangeAxis();axis.setAutoRangeIncludesZero(false);BarRenderer br=(BarRenderer)plot.getRenderer();br.setIncludeBaseInRange(false);assertEquals(95.0,axis.getLowerBound(),EPSILON);assertEquals(205.0,axis.getUpperBound(),EPSILON);br.setIncludeBaseInRange(true);assertEquals(0.0,axis.getLowerBound(),EPSILON);assertEquals(210.0,axis.getUpperBound(),EPSILON);axis.setAutoRangeIncludesZero(true);assertEquals(0.0,axis.getLowerBound(),EPSILON);assertEquals(210.0,axis.getUpperBound(),EPSILON);br.setIncludeBaseInRange(true);assertEquals(0.0,axis.getLowerBound(),EPSILON);assertEquals(210.0,axis.getUpperBound(),EPSILON);DefaultCategoryDataset dataset2=new DefaultCategoryDataset();dataset2.setValue(900.0,""Row 1"",""Column 1"");dataset2.setValue(1000.0,""Row 1"",""Column 2"");plot.setDataset(dataset2);assertEquals(0.0,axis.getLowerBound(),EPSILON);assertEquals(1050.0,axis.getUpperBound(),EPSILON);br.setIncludeBaseInRange(false);assertEquals(0.0,axis.getLowerBound(),EPSILON);assertEquals(1050.0,axis.getUpperBound(),EPSILON);axis.setAutoRangeIncludesZero(false);assertEquals(895.0,axis.getLowerBound(),EPSILON);assertEquals(1005.0,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange1",0,"/** * Checks that the auto-range for the domain axis on an XYPlot is working as expected.*/public void testXYAutoRange1(){XYSeries series=new XYSeries(""Series 1"");series.add(1.0,1.0);series.add(2.0,2.0);series.add(3.0,3.0);XYSeriesCollection dataset=new XYSeriesCollection();dataset.addSeries(series);JFreeChart chart=ChartFactory.createScatterPlot(""Test"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();NumberAxis axis=(NumberAxis)plot.getDomainAxis();axis.setAutoRangeIncludesZero(false);assertEquals(0.9,axis.getLowerBound(),EPSILON);assertEquals(3.1,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange2",0,"/** * Checks that the auto-range for the range axis on an XYPlot is working as expected.*/public void testXYAutoRange2(){XYSeries series=new XYSeries(""Series 1"");series.add(1.0,1.0);series.add(2.0,2.0);series.add(3.0,3.0);XYSeriesCollection dataset=new XYSeriesCollection();dataset.addSeries(series);JFreeChart chart=ChartFactory.createScatterPlot(""Test"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();NumberAxis axis=(NumberAxis)plot.getRangeAxis();axis.setAutoRangeIncludesZero(false);assertEquals(0.9,axis.getLowerBound(),EPSILON);assertEquals(3.1,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.NumberAxisTests.testSetLowerBound",0,"/** * Some checks for the setLowerBound()method.*/public void testSetLowerBound(){NumberAxis axis=new NumberAxis(""X"");axis.setRange(0.0,10.0);axis.setLowerBound(5.0);assertEquals(5.0,axis.getLowerBound(),EPSILON);axis.setLowerBound(10.0);assertEquals(10.0,axis.getLowerBound(),EPSILON);assertEquals(11.0,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYAreaRenderer2 r1=new XYAreaRenderer2();XYAreaRenderer2 r2=new XYAreaRenderer2();assertEquals(r1,r2);r1.setOutline(!r1.isOutline());assertFalse(r1.equals(r2));r2.setOutline(r1.isOutline());assertTrue(r1.equals(r2));r1.setLegendArea(new Rectangle(1,2,3,4));assertFalse(r1.equals(r2));r2.setLegendArea(new Rectangle(1,2,3,4));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYAreaRenderer2 r1=new XYAreaRenderer2();XYAreaRenderer2 r2=new XYAreaRenderer2();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYAreaRenderer2 r1=new XYAreaRenderer2();Rectangle rect=new Rectangle(1,2,3,4);r1.setLegendArea(rect);XYAreaRenderer2 r2=null;try {r2=(XYAreaRenderer2)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));rect.setBounds(99,99,99,99);assertFalse(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYAreaRenderer2 r1=new XYAreaRenderer2();XYAreaRenderer2 r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYAreaRenderer2)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new XYAreaRenderer2());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);XYAreaRenderer2 r=new XYAreaRenderer2();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.data.time.junit.TimeSeriesDataItemTests.testEqualsSelf",0,"/** * Test that an instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){TimeSeriesDataItem item=new TimeSeriesDataItem(new Day(23,9,2001),99.7);assertTrue(item.equals(item));}"
"org.jfree.data.time.junit.TimeSeriesDataItemTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){TimeSeriesDataItem item1=new TimeSeriesDataItem(new Day(23,9,2001),99.7);TimeSeriesDataItem item2=new TimeSeriesDataItem(new Day(23,9,2001),99.7);assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1.setValue(new Integer(5));assertFalse(item1.equals(item2));item2.setValue(new Integer(5));assertTrue(item1.equals(item2));}"
"org.jfree.data.time.junit.TimeSeriesDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimeSeriesDataItem item1=new TimeSeriesDataItem(new Day(23,9,2001),99.7);TimeSeriesDataItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(TimeSeriesDataItem)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(item1,item2);}"
"org.jfree.chart.plot.junit.PlotOrientationTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){assertEquals(PlotOrientation.HORIZONTAL,PlotOrientation.HORIZONTAL);assertEquals(PlotOrientation.VERTICAL,PlotOrientation.VERTICAL);assertFalse(PlotOrientation.HORIZONTAL.equals(PlotOrientation.VERTICAL));assertFalse(PlotOrientation.VERTICAL.equals(PlotOrientation.HORIZONTAL));}"
"org.jfree.chart.plot.junit.PlotOrientationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PlotOrientation orientation1=PlotOrientation.HORIZONTAL;PlotOrientation orientation2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(orientation1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));orientation2=(PlotOrientation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(orientation1,orientation2);boolean same=orientation1 == orientation2;assertEquals(true,same);}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){XYLineAndShapeRenderer r1=new XYLineAndShapeRenderer();XYLineAndShapeRenderer r2=new XYLineAndShapeRenderer();assertEquals(r1,r2);assertEquals(r2,r1);r1.setSeriesLinesVisible(3,true);assertFalse(r1.equals(r2));r2.setSeriesLinesVisible(3,true);assertTrue(r1.equals(r2));r1.setBaseLinesVisible(false);assertFalse(r1.equals(r2));r2.setBaseLinesVisible(false);assertTrue(r1.equals(r2));r1.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setLegendLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));r1.setSeriesShapesVisible(3,true);assertFalse(r1.equals(r2));r2.setSeriesShapesVisible(3,true);assertTrue(r1.equals(r2));r1.setBaseShapesVisible(false);assertFalse(r1.equals(r2));r2.setBaseShapesVisible(false);assertTrue(r1.equals(r2));r1.setSeriesShapesFilled(3,true);assertFalse(r1.equals(r2));r2.setSeriesShapesFilled(3,true);assertTrue(r1.equals(r2));r1.setBaseShapesFilled(false);assertFalse(r1.equals(r2));r2.setBaseShapesFilled(false);assertTrue(r1.equals(r2));r1.setDrawOutlines(!r1.getDrawOutlines());assertFalse(r1.equals(r2));r2.setDrawOutlines(r1.getDrawOutlines());assertTrue(r1.equals(r2));r1.setUseOutlinePaint(true);assertFalse(r1.equals(r2));r2.setUseOutlinePaint(true);assertTrue(r1.equals(r2));r1.setUseFillPaint(true);assertFalse(r1.equals(r2));r2.setUseFillPaint(true);assertTrue(r1.equals(r2));r1.setDrawSeriesLineAsPath(true);assertFalse(r1.equals(r2));r2.setDrawSeriesLineAsPath(true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testEquals2",0,"/** * Test that the equals()method works for a TimeSeriesURLGenerator.*/public void testEquals2(){XYLineAndShapeRenderer r1=new XYLineAndShapeRenderer();XYLineAndShapeRenderer r2=new XYLineAndShapeRenderer();assertEquals(r1,r2);assertEquals(r2,r1);r1.setBaseURLGenerator(new TimeSeriesURLGenerator());assertFalse(r1.equals(r2));r2.setBaseURLGenerator(new TimeSeriesURLGenerator());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYLineAndShapeRenderer r1=new XYLineAndShapeRenderer();XYLineAndShapeRenderer r2=new XYLineAndShapeRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){Rectangle2D legendShape=new Rectangle2D.Double(1.0,2.0,3.0,4.0);XYLineAndShapeRenderer r1=new XYLineAndShapeRenderer();r1.setLegendLine(legendShape);XYLineAndShapeRenderer r2=null;try {r2=(XYLineAndShapeRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1.setSeriesLinesVisible(0,false);assertFalse(r1.equals(r2));r2.setSeriesLinesVisible(0,false);assertTrue(r1.equals(r2));legendShape.setRect(4.0,3.0,2.0,1.0);assertFalse(r1.equals(r2));r2.setLegendLine(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(r1.equals(r2));r1.setSeriesShapesVisible(1,true);assertFalse(r1.equals(r2));r2.setSeriesShapesVisible(1,true);assertTrue(r1.equals(r2));r1.setSeriesShapesFilled(1,true);assertFalse(r1.equals(r2));r2.setSeriesShapesFilled(1,true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYLineAndShapeRenderer r1=new XYLineAndShapeRenderer();XYLineAndShapeRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYLineAndShapeRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testFindDomainBounds",0,"/** * Check that the renderer is calculating the domain bounds correctly.*/public void testFindDomainBounds(){XYSeriesCollection dataset=RendererXYPackageTests.createTestXYSeriesCollection();JFreeChart chart=ChartFactory.createXYLineChart(""Test Chart"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();NumberAxis domainAxis=(NumberAxis)plot.getDomainAxis();domainAxis.setAutoRangeIncludesZero(false);Range bounds=domainAxis.getRange();assertFalse(bounds.contains(0.9));assertTrue(bounds.contains(1.0));assertTrue(bounds.contains(2.0));assertFalse(bounds.contains(2.10));}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testFindRangeBounds",0,"/** * Check that the renderer is calculating the range bounds correctly.*/public void testFindRangeBounds(){TableXYDataset dataset=RendererXYPackageTests.createTestTableXYDataset();JFreeChart chart=ChartFactory.createXYLineChart(""Test Chart"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();rangeAxis.setAutoRangeIncludesZero(false);Range bounds=rangeAxis.getRange();assertFalse(bounds.contains(1.0));assertTrue(bounds.contains(2.0));assertTrue(bounds.contains(5.0));assertFalse(bounds.contains(6.0));}"
"org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);XYLineAndShapeRenderer r=new XYLineAndShapeRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){LineAndShapeRenderer r1=new LineAndShapeRenderer();LineAndShapeRenderer r2=new LineAndShapeRenderer();assertEquals(r1,r2);r1.setBaseLinesVisible(!r1.getBaseLinesVisible());assertFalse(r1.equals(r2));r2.setBaseLinesVisible(r1.getBaseLinesVisible());assertTrue(r1.equals(r2));r1.setSeriesLinesVisible(1,true);assertFalse(r1.equals(r2));r2.setSeriesLinesVisible(1,true);assertTrue(r1.equals(r2));r1.setBaseShapesVisible(!r1.getBaseShapesVisible());assertFalse(r1.equals(r2));r2.setBaseShapesVisible(r1.getBaseShapesVisible());assertTrue(r1.equals(r2));r1.setSeriesShapesVisible(1,true);assertFalse(r1.equals(r2));r2.setSeriesShapesVisible(1,true);assertTrue(r1.equals(r2));r1.setSeriesShapesFilled(1,true);assertFalse(r1.equals(r2));r2.setSeriesShapesFilled(1,true);assertTrue(r1.equals(r2));r1.setBaseShapesFilled(false);assertFalse(r1.equals(r2));r2.setBaseShapesFilled(false);assertTrue(r1.equals(r2));r1.setUseOutlinePaint(true);assertFalse(r1.equals(r2));r2.setUseOutlinePaint(true);assertTrue(r1.equals(r2));r1.setUseSeriesOffset(true);assertFalse(r1.equals(r2));r2.setUseSeriesOffset(true);assertTrue(r1.equals(r2));r1.setItemMargin(0.14);assertFalse(r1.equals(r2));r2.setItemMargin(0.14);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){LineAndShapeRenderer r1=new LineAndShapeRenderer();LineAndShapeRenderer r2=new LineAndShapeRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LineAndShapeRenderer r1=new LineAndShapeRenderer();LineAndShapeRenderer r2=null;try {r2=(LineAndShapeRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(checkIndependence(r1,r2));}"
"org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LineAndShapeRenderer r1=new LineAndShapeRenderer();LineAndShapeRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(LineAndShapeRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultCategoryDataset dataset0=new DefaultCategoryDataset();dataset0.addValue(21.0,""R1"",""C1"");dataset0.addValue(22.0,""R2"",""C1"");DefaultCategoryDataset dataset1=new DefaultCategoryDataset();dataset1.addValue(23.0,""R3"",""C1"");dataset1.addValue(24.0,""R4"",""C1"");dataset1.addValue(25.0,""R5"",""C1"");LineAndShapeRenderer r=new LineAndShapeRenderer();CategoryPlot plot=new CategoryPlot(dataset0,new CategoryAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,dataset1);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""R5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.axis.junit.CategoryAxis3DTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryAxis3D a1=new CategoryAxis3D(""Test"");CategoryAxis3D a2=null;try {a2=(CategoryAxis3D)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.CategoryAxis3DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryAxis3D a1=new CategoryAxis3D(""Test Axis"");CategoryAxis3D a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CategoryAxis3D)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.block.junit.BlockBorderTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){BlockBorder b1=new BlockBorder(new RectangleInsets(1.0,2.0,3.0,4.0),Color.red);BlockBorder b2=new BlockBorder(new RectangleInsets(1.0,2.0,3.0,4.0),Color.red);assertTrue(b1.equals(b2));assertTrue(b2.equals(b2));b1=new BlockBorder(new RectangleInsets(UnitType.RELATIVE,1.0,2.0,3.0,4.0),Color.red);assertFalse(b1.equals(b2));b2=new BlockBorder(new RectangleInsets(UnitType.RELATIVE,1.0,2.0,3.0,4.0),Color.red);assertTrue(b1.equals(b2));b1=new BlockBorder(new RectangleInsets(1.0,2.0,3.0,4.0),Color.blue);assertFalse(b1.equals(b2));b2=new BlockBorder(new RectangleInsets(1.0,2.0,3.0,4.0),Color.blue);assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.BlockBorderTests.testCloning",0,"/** * Immutable - cloning not necessary.*/public void testCloning(){BlockBorder b1=new BlockBorder();assertFalse(b1 instanceof Cloneable);}"
"org.jfree.chart.block.junit.BlockBorderTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BlockBorder b1=new BlockBorder(new RectangleInsets(1.0,2.0,3.0,4.0),new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));BlockBorder b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(BlockBorder)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertTrue(b1.equals(b2));}"
"org.jfree.data.category.junit.CategoryToPieDatasetTests.testConstructor",0,"/** * Some tests for the constructor.*/public void testConstructor(){CategoryToPieDataset p1=new CategoryToPieDataset(null,TableOrder.BY_COLUMN,0);assertNull(p1.getUnderlyingDataset());assertEquals(p1.getItemCount(),0);assertTrue(p1.getKeys().isEmpty());assertNull(p1.getValue(""R1""));}"
"org.jfree.data.category.junit.CategoryToPieDatasetTests.testGetValue",0,"/** * Some checks for the getValue()method.*/public void testGetValue(){DefaultCategoryDataset underlying=new DefaultCategoryDataset();underlying.addValue(1.1,""R1"",""C1"");underlying.addValue(2.2,""R1"",""C2"");CategoryToPieDataset d1=new CategoryToPieDataset(underlying,TableOrder.BY_ROW,0);assertEquals(d1.getValue(""C1""),new Double(1.1));assertEquals(d1.getValue(""C2""),new Double(2.2));try {d1.getValue(-1);fail(""Expected IndexOutOfBoundsException."");}catch(IndexOutOfBoundsException e){}try {d1.getValue(d1.getItemCount());fail(""Expected IndexOutOfBoundsException."");}catch(IndexOutOfBoundsException e){}CategoryToPieDataset p1=new CategoryToPieDataset(null,TableOrder.BY_COLUMN,0);try {p1.getValue(0);fail(""Expected IndexOutOfBoundsException."");}catch(IndexOutOfBoundsException e){}}"
"org.jfree.data.category.junit.CategoryToPieDatasetTests.testGetKey",0,"/** * Some checks for the getKey(int)method.*/public void testGetKey(){DefaultCategoryDataset underlying=new DefaultCategoryDataset();underlying.addValue(1.1,""R1"",""C1"");underlying.addValue(2.2,""R1"",""C2"");CategoryToPieDataset d1=new CategoryToPieDataset(underlying,TableOrder.BY_ROW,0);assertEquals(d1.getKey(0),""C1"");assertEquals(d1.getKey(1),""C2"");try {d1.getKey(-1);fail(""Expected IndexOutOfBoundsException."");}catch(IndexOutOfBoundsException e){}try {d1.getKey(d1.getItemCount());fail(""Expected IndexOutOfBoundsException."");}catch(IndexOutOfBoundsException e){}CategoryToPieDataset p1=new CategoryToPieDataset(null,TableOrder.BY_COLUMN,0);try {p1.getKey(0);fail(""Expected IndexOutOfBoundsException."");}catch(IndexOutOfBoundsException e){}}"
"org.jfree.data.category.junit.CategoryToPieDatasetTests.testGetIndex",0,"/** * Some checks for the getIndex()method.*/public void testGetIndex(){DefaultCategoryDataset underlying=new DefaultCategoryDataset();underlying.addValue(1.1,""R1"",""C1"");underlying.addValue(2.2,""R1"",""C2"");CategoryToPieDataset d1=new CategoryToPieDataset(underlying,TableOrder.BY_ROW,0);assertEquals(0,d1.getIndex(""C1""));assertEquals(1,d1.getIndex(""C2""));assertEquals(-1,d1.getIndex(""XX""));boolean pass=false;try {d1.getIndex(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.CategoryToPieDatasetTests.testEquals",0,"/** * For datasets,the equals()method just checks keys and values.*/public void testEquals(){DefaultCategoryDataset underlying=new DefaultCategoryDataset();underlying.addValue(1.1,""R1"",""C1"");underlying.addValue(2.2,""R1"",""C2"");CategoryToPieDataset d1=new CategoryToPieDataset(underlying,TableOrder.BY_COLUMN,1);DefaultPieDataset d2=new DefaultPieDataset();d2.setValue(""R1"",2.2);assertTrue(d1.equals(d2));}"
"org.jfree.data.category.junit.CategoryToPieDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultCategoryDataset underlying=new DefaultCategoryDataset();underlying.addValue(1.1,""R1"",""C1"");underlying.addValue(2.2,""R1"",""C2"");CategoryToPieDataset d1=new CategoryToPieDataset(underlying,TableOrder.BY_COLUMN,1);CategoryToPieDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(CategoryToPieDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);assertEquals(d1.getUnderlyingDataset(),d2.getUnderlyingDataset());assertEquals(d1.getExtractType(),d2.getExtractType());assertEquals(d1.getExtractIndex(),d2.getExtractIndex());}"
"org.jfree.data.xy.junit.DefaultWindDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultWindDataset d1=new DefaultWindDataset();DefaultWindDataset d2=new DefaultWindDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1=createSampleDataset1();assertFalse(d1.equals(d2));d2=createSampleDataset1();assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultWindDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultWindDataset d1=new DefaultWindDataset();DefaultWindDataset d2=null;try {d2=(DefaultWindDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1=createSampleDataset1();d2=null;try {d2=(DefaultWindDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultWindDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultWindDataset d1=new DefaultWindDataset();DefaultWindDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultWindDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);d1=createSampleDataset1();try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultWindDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.DefaultWindDatasetTests.testGetSeriesKey",0,"/** * Some checks for the getSeriesKey(int)method.*/public void testGetSeriesKey(){DefaultWindDataset d=createSampleDataset1();assertEquals(""Series 1"",d.getSeriesKey(0));assertEquals(""Series 2"",d.getSeriesKey(1));boolean pass=false;try {d.getSeriesKey(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d.getSeriesKey(2);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.DefaultWindDatasetTests.testIndexOf",0,"/** * Some checks for the indexOf(Comparable)method.*/public void testIndexOf(){DefaultWindDataset d=createSampleDataset1();assertEquals(0,d.indexOf(""Series 1""));assertEquals(1,d.indexOf(""Series 2""));assertEquals(-1,d.indexOf(""Green Eggs and Ham""));assertEquals(-1,d.indexOf(null));}"
"org.jfree.data.junit.DataUtilitiesTests.testCreateNumberArray2D",0,"/** * Tests the createNumberArray2D()method.*/public void testCreateNumberArray2D(){double[][]d=new double[2][];d[0]=new double[]{1.1,2.2,3.3,4.4};d[1]=new double[]{1.1,2.2,3.3,4.4,5.5};Number[][]n=DataUtilities.createNumberArray2D(d);assertEquals(2,n.length);assertEquals(4,n[0].length);assertEquals(5,n[1].length);}"
"org.jfree.data.junit.DataUtilitiesTests.testCalculateColumnTotal",0,"/** * Some checks for the calculateColumnTotal()method.*/public void testCalculateColumnTotal(){DefaultKeyedValues2D table=new DefaultKeyedValues2D();table.addValue(new Double(1.0),""R0"",""C0"");table.addValue(new Double(2.0),""R0"",""C1"");table.addValue(new Double(3.0),""R1"",""C0"");table.addValue(new Double(4.0),""R1"",""C1"");assertEquals(4.0,DataUtilities.calculateColumnTotal(table,0),EPSILON);assertEquals(6.0,DataUtilities.calculateColumnTotal(table,1),EPSILON);table.setValue(null,""R1"",""C1"");assertEquals(2.0,DataUtilities.calculateColumnTotal(table,1),EPSILON);}"
"org.jfree.data.junit.DataUtilitiesTests.testCalculateRowTotal",0,"/** * Some checks for the calculateRowTotal()method.*/public void testCalculateRowTotal(){DefaultKeyedValues2D table=new DefaultKeyedValues2D();table.addValue(new Double(1.0),""R0"",""C0"");table.addValue(new Double(2.0),""R0"",""C1"");table.addValue(new Double(3.0),""R1"",""C0"");table.addValue(new Double(4.0),""R1"",""C1"");assertEquals(3.0,DataUtilities.calculateRowTotal(table,0),EPSILON);assertEquals(7.0,DataUtilities.calculateRowTotal(table,1),EPSILON);table.setValue(null,""R1"",""C1"");assertEquals(3.0,DataUtilities.calculateRowTotal(table,1),EPSILON);}"
"org.jfree.chart.renderer.junit.AreaRendererEndTypeTests.testEquals",0,"/** * A test for the equals()method.*/public void testEquals(){assertEquals(AreaRendererEndType.LEVEL,AreaRendererEndType.LEVEL);assertEquals(AreaRendererEndType.TAPER,AreaRendererEndType.TAPER);assertEquals(AreaRendererEndType.TRUNCATE,AreaRendererEndType.TRUNCATE);}"
"org.jfree.chart.renderer.junit.AreaRendererEndTypeTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){AreaRendererEndType t1=AreaRendererEndType.TAPER;AreaRendererEndType t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(AreaRendererEndType)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);boolean same=t1 == t2;assertEquals(true,same);}"
"org.jfree.chart.axis.junit.LogAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LogAxis a1=new LogAxis(""Test"");LogAxis a2=null;try {a2=(LogAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.LogAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){}"
"org.jfree.chart.axis.junit.LogAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){LogAxis a1=new LogAxis(""Test"");LogAxis a2=new LogAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.LogAxisTests.testTranslateJava2DToValue",0,"/** * Test the translation of Java2D values to data values.*/public void testTranslateJava2DToValue(){LogAxis axis=new LogAxis();axis.setRange(50.0,100.0);Rectangle2D dataArea=new Rectangle2D.Double(10.0,50.0,400.0,300.0);double y1=axis.java2DToValue(75.0,dataArea,RectangleEdge.LEFT);assertEquals(94.3874312681693,y1,EPSILON);double y2=axis.java2DToValue(75.0,dataArea,RectangleEdge.RIGHT);assertEquals(94.3874312681693,y2,EPSILON);double x1=axis.java2DToValue(75.0,dataArea,RectangleEdge.TOP);assertEquals(55.961246381405,x1,EPSILON);double x2=axis.java2DToValue(75.0,dataArea,RectangleEdge.BOTTOM);assertEquals(55.961246381405,x2,EPSILON);axis.setInverted(true);double y3=axis.java2DToValue(75.0,dataArea,RectangleEdge.LEFT);assertEquals(52.9731547179647,y3,EPSILON);double y4=axis.java2DToValue(75.0,dataArea,RectangleEdge.RIGHT);assertEquals(52.9731547179647,y4,EPSILON);double x3=axis.java2DToValue(75.0,dataArea,RectangleEdge.TOP);assertEquals(89.3475453695651,x3,EPSILON);double x4=axis.java2DToValue(75.0,dataArea,RectangleEdge.BOTTOM);assertEquals(89.3475453695651,x4,EPSILON);}"
"org.jfree.chart.axis.junit.LogAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LogAxis a1=new LogAxis(""Test Axis"");LogAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(LogAxis)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.LogAxisTests.testAutoRange1",0,"/** * A simple test for the auto-range calculation looking at a LogAxis used as the range axis for a CategoryPlot.*/public void testAutoRange1(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.setValue(100.0,""Row 1"",""Column 1"");dataset.setValue(200.0,""Row 1"",""Column 2"");JFreeChart chart=ChartFactory.createBarChart(""Test"",""Categories"",""Value"",dataset,PlotOrientation.VERTICAL,false,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();LogAxis axis=new LogAxis(""Log(Y)"");plot.setRangeAxis(axis);assertEquals(0.0,axis.getLowerBound(),EPSILON);assertEquals(2.6066426411261268E7,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.LogAxisTests.testAutoRange3",0,"/** * A simple test for the auto-range calculation looking at a NumberAxis used as the range axis for a CategoryPlot.  In this case,the original dataset is replaced with a new dataset.*/public void testAutoRange3(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.setValue(100.0,""Row 1"",""Column 1"");dataset.setValue(200.0,""Row 1"",""Column 2"");JFreeChart chart=ChartFactory.createLineChart(""Test"",""Categories"",""Value"",dataset,PlotOrientation.VERTICAL,false,false,false);CategoryPlot plot=(CategoryPlot)chart.getPlot();LogAxis axis=new LogAxis(""Log(Y)"");plot.setRangeAxis(axis);assertEquals(96.59363289248458,axis.getLowerBound(),EPSILON);assertEquals(207.0529847682752,axis.getUpperBound(),EPSILON);DefaultCategoryDataset dataset2=new DefaultCategoryDataset();dataset2.setValue(900.0,""Row 1"",""Column 1"");dataset2.setValue(1000.0,""Row 1"",""Column 2"");plot.setDataset(dataset2);assertEquals(895.2712433374774,axis.getLowerBound(),EPSILON);assertEquals(1005.2819262292991,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange1",0,"/** * Checks that the auto-range for the domain axis on an XYPlot is working as expected.*/public void testXYAutoRange1(){XYSeries series=new XYSeries(""Series 1"");series.add(1.0,1.0);series.add(2.0,2.0);series.add(3.0,3.0);XYSeriesCollection dataset=new XYSeriesCollection();dataset.addSeries(series);JFreeChart chart=ChartFactory.createScatterPlot(""Test"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();LogAxis axis=new LogAxis(""Log(Y)"");plot.setRangeAxis(axis);assertEquals(0.9465508226401592,axis.getLowerBound(),EPSILON);assertEquals(3.1694019256486126,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange2",0,"/** * Checks that the auto-range for the range axis on an XYPlot is working as expected.*/public void testXYAutoRange2(){XYSeries series=new XYSeries(""Series 1"");series.add(1.0,1.0);series.add(2.0,2.0);series.add(3.0,3.0);XYSeriesCollection dataset=new XYSeriesCollection();dataset.addSeries(series);JFreeChart chart=ChartFactory.createScatterPlot(""Test"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();LogAxis axis=new LogAxis(""Log(Y)"");plot.setRangeAxis(axis);assertEquals(0.9465508226401592,axis.getLowerBound(),EPSILON);assertEquals(3.1694019256486126,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.LogAxisTests.testSetLowerBound",0,"/** * Some checks for the setLowerBound()method.*/public void testSetLowerBound(){LogAxis axis=new LogAxis(""X"");axis.setRange(0.0,10.0);axis.setLowerBound(5.0);assertEquals(5.0,axis.getLowerBound(),EPSILON);axis.setLowerBound(10.0);assertEquals(10.0,axis.getLowerBound(),EPSILON);assertEquals(11.0,axis.getUpperBound(),EPSILON);}"
"org.jfree.chart.axis.junit.LogAxisTests.testTickMarksVisibleDefault",0,"/** * Checks the default value for the tickMarksVisible flag.*/public void testTickMarksVisibleDefault(){LogAxis axis=new LogAxis(""Log Axis"");assertTrue(axis.isTickMarksVisible());}"
"org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsLowerBoundUnordered",0,"/** * Some checks for the findLiveItemsLowerBound()method when the dataset is unordered.*/public void testFindLiveItemsLowerBoundUnordered(){DefaultXYDataset d=new DefaultXYDataset();d.addSeries(""S1"",new double[][]{{},{}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,0,10.0,11.0));d.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,1,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,1,2.0,3.3));d.addSeries(""S3"",new double[][]{{1.0,2.0},{2.0,2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,1.0,2.2));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,2.0,3.3));assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,2,3.0,4.4));d.addSeries(""S4"",new double[][]{{1.0,2.0,1.5},{2.0,2.0,2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,1.0,2.2));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,2.0,3.3));assertEquals(2,RendererUtilities.findLiveItemsLowerBound(d,3,3.0,4.4));d.addSeries(""S5"",new double[][]{{1.0,2.0,1.5,1.8},{2.0,2.0,2.0,2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,1.0,2.2));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,2.0,3.3));assertEquals(3,RendererUtilities.findLiveItemsLowerBound(d,4,3.0,4.4));assertEquals(3,RendererUtilities.findLiveItemsLowerBound(d,4,4.0,5.5));}"
"org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsLowerBoundAscending",0,"/** * Some checks for the findLiveItemsLowerBound()method when the dataset is ASCENDING.*/public void testFindLiveItemsLowerBoundAscending(){DefaultXYDataset d=new DefaultXYDataset(){public DomainOrder getDomainOrder(){return DomainOrder.ASCENDING;}};d.addSeries(""S1"",new double[][]{{},{}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,0,10.0,11.1));d.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,1,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,1,2.0,2.2));d.addSeries(""S3"",new double[][]{{1.0,2.0},{2.0,2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,1.0,2.2));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,2.0,3.3));assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,2,3.0,4.4));d.addSeries(""S4"",new double[][]{{1.0,2.0,3.0},{2.0,2.0,2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,1.0,2.2));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,2.0,3.3));assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,3,3.0,4.4));d.addSeries(""S5"",new double[][]{{1.0,2.0,3.0,4.0},{2.0,2.0,2.0,2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,1.0,2.2));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,2.0,3.3));assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,4,3.0,4.4));assertEquals(2,RendererUtilities.findLiveItemsLowerBound(d,4,4.0,5.5));}"
"org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsLowerBoundDescending",0,"/** * Some checks for the findLiveItemsLowerBound()method when the dataset is DESCENDING.*/public void testFindLiveItemsLowerBoundDescending(){DefaultXYDataset d=new DefaultXYDataset(){public DomainOrder getDomainOrder(){return DomainOrder.DESCENDING;}};d.addSeries(""S1"",new double[][]{{},{}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,0,10.0,11.0));d.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,1,0.0,1.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,1,1.1,2.0));d.addSeries(""S3"",new double[][]{{2.0,1.0},{2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,2,0.1,0.5));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,0.1,1.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,1.1,2.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,2.2,3.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,2,3.3,4.0));d.addSeries(""S4"",new double[][]{{3.0,2.0,1.0},{2.0,2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,3,0.0,1.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,1.0,2.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,2.0,3.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,3,3.0,4.0));d.addSeries(""S5"",new double[][]{{4.0,3.0,2.0,1.0},{2.0,2.0,2.0,2.0}});assertEquals(3,RendererUtilities.findLiveItemsLowerBound(d,4,0.1,0.5));assertEquals(2,RendererUtilities.findLiveItemsLowerBound(d,4,0.1,1.0));assertEquals(1,RendererUtilities.findLiveItemsLowerBound(d,4,1.1,2.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,2.2,3.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,3.3,4.0));assertEquals(0,RendererUtilities.findLiveItemsLowerBound(d,4,4.4,5.0));}"
"org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsUpperBoundUnordered",0,"/** * Some checks for the findLiveItemsUpperBound()method when the dataset is unordered.*/public void testFindLiveItemsUpperBoundUnordered(){DefaultXYDataset d=new DefaultXYDataset();d.addSeries(""S1"",new double[][]{{},{}});assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,0,10.0,11.0));d.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,1,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,1,2.0,3.3));d.addSeries(""S3"",new double[][]{{1.0,2.0},{2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,0.0,1.1));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,1.0,2.2));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,2.0,3.3));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,3.0,4.4));d.addSeries(""S4"",new double[][]{{1.0,2.0,1.5},{2.0,2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,3,0.0,1.1));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,1.0,2.2));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,2.0,3.3));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,3.0,4.4));d.addSeries(""S5"",new double[][]{{1.0,2.0,1.5,1.8},{2.0,2.0,2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,4,0.0,1.1));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,1.0,2.2));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,2.0,3.3));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,3.0,4.4));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,4.0,5.5));}"
"org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsUpperBoundAscending",0,"/** * Some checks for the findLiveItemsUpperBound()method when the dataset is ASCENDING.*/public void testFindLiveItemsUpperBoundAscending(){DefaultXYDataset d=new DefaultXYDataset(){public DomainOrder getDomainOrder(){return DomainOrder.ASCENDING;}};d.addSeries(""S1"",new double[][]{{},{}});assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,0,10.0,11.1));d.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,1,0.0,1.1));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,1,2.0,2.2));d.addSeries(""S3"",new double[][]{{1.0,2.0},{2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,0.0,1.0));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,1.0,2.2));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,2.0,3.3));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,3.0,4.4));d.addSeries(""S4"",new double[][]{{1.0,2.0,3.0},{2.0,2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,3,0.0,1.1));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,1.0,2.2));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,2.0,3.3));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,3.0,4.4));d.addSeries(""S5"",new double[][]{{1.0,2.0,3.0,4.0},{2.0,2.0,2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,4,0.0,1.1));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,4,1.0,2.2));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,2.0,3.3));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,3.0,4.4));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,4.0,5.5));}"
"org.jfree.chart.renderer.junit.RendererUtilitiesTests.testFindLiveItemsUpperBoundDescending",0,"/** * Some checks for the findLiveItemsUpperBound()method when the dataset is DESCENDING.*/public void testFindLiveItemsUpperBoundDescending(){DefaultXYDataset d=new DefaultXYDataset(){public DomainOrder getDomainOrder(){return DomainOrder.DESCENDING;}};d.addSeries(""S1"",new double[][]{{},{}});assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,0,10.0,11.0));d.addSeries(""S2"",new double[][]{{1.0},{2.0}});assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,1,0.0,1.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,1,1.1,2.0));d.addSeries(""S3"",new double[][]{{2.0,1.0},{2.0,2.0}});assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,0.1,0.5));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,2,0.1,1.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,2,1.1,2.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,2,2.2,3.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,2,3.3,4.0));d.addSeries(""S4"",new double[][]{{3.0,2.0,1.0},{2.0,2.0,2.0}});assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,0.0,1.0));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,3,1.0,2.0));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,3,2.0,3.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,3,3.0,4.0));d.addSeries(""S5"",new double[][]{{4.0,3.0,2.0,1.0},{2.0,2.0,2.0,2.0}});assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,0.1,0.5));assertEquals(3,RendererUtilities.findLiveItemsUpperBound(d,4,0.1,1.0));assertEquals(2,RendererUtilities.findLiveItemsUpperBound(d,4,1.1,2.0));assertEquals(1,RendererUtilities.findLiveItemsUpperBound(d,4,2.2,3.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,4,3.3,4.0));assertEquals(0,RendererUtilities.findLiveItemsUpperBound(d,4,4.4,5.0));}"
"org.jfree.chart.plot.junit.FastScatterPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){FastScatterPlot plot1=new FastScatterPlot();FastScatterPlot plot2=new FastScatterPlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));plot1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));plot1.setDomainGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setDomainGridlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.setDomainGridlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setDomainGridlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));Stroke s=new BasicStroke(1.5f);plot1.setDomainGridlineStroke(s);assertFalse(plot1.equals(plot2));plot2.setDomainGridlineStroke(s);assertTrue(plot1.equals(plot2));plot1.setRangeGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setRangeGridlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.setRangeGridlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setRangeGridlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));Stroke s2=new BasicStroke(1.5f);plot1.setRangeGridlineStroke(s2);assertFalse(plot1.equals(plot2));plot2.setRangeGridlineStroke(s2);assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.FastScatterPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){FastScatterPlot p1=new FastScatterPlot();FastScatterPlot p2=null;try {p2=(FastScatterPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.FastScatterPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){float[][]data=createData();ValueAxis domainAxis=new NumberAxis(""X"");ValueAxis rangeAxis=new NumberAxis(""Y"");FastScatterPlot p1=new FastScatterPlot(data,domainAxis,rangeAxis);FastScatterPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(FastScatterPlot)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.FastScatterPlotTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown.*/public void testDrawWithNullInfo(){boolean success=false;try {float[][]data=createData();ValueAxis domainAxis=new NumberAxis(""X"");ValueAxis rangeAxis=new NumberAxis(""Y"");FastScatterPlot plot=new FastScatterPlot(data,domainAxis,rangeAxis);JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialCap c1=new DialCap();DialCap c2=new DialCap();assertTrue(c1.equals(c2));c1.setVisible(false);assertFalse(c1.equals(c2));c2.setVisible(false);assertTrue(c1.equals(c2));}"
"org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialCap c1=new DialCap();DialCap c2=null;try {c2=(DialCap)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();c1.addChangeListener(l1);assertTrue(c1.hasListener(l1));assertFalse(c2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.AbstractDialLayerTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialCap c1=new DialCap();DialCap c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(DialCap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);MyDialLayerChangeListener l1=new MyDialLayerChangeListener();c1.addChangeListener(l1);assertTrue(c1.hasListener(l1));assertFalse(c2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialPlot p1=new DialPlot();DialPlot p2=new DialPlot();assertTrue(p1.equals(p2));p1.setBackground(new DialBackground(Color.green));assertFalse(p1.equals(p2));p2.setBackground(new DialBackground(Color.green));assertTrue(p1.equals(p2));p1.setBackground(null);assertFalse(p1.equals(p2));p2.setBackground(null);assertTrue(p1.equals(p2));DialCap cap1=new DialCap();cap1.setFillPaint(Color.red);p1.setCap(cap1);assertFalse(p1.equals(p2));DialCap cap2=new DialCap();cap2.setFillPaint(Color.red);p2.setCap(cap2);assertTrue(p1.equals(p2));p1.setCap(null);assertFalse(p1.equals(p2));p2.setCap(null);assertTrue(p1.equals(p2));StandardDialFrame f1=new StandardDialFrame();f1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));p1.setDialFrame(f1);assertFalse(p1.equals(p2));StandardDialFrame f2=new StandardDialFrame();f2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));p2.setDialFrame(f2);assertTrue(p1.equals(p2));p1.setView(0.2,0.0,0.8,1.0);assertFalse(p1.equals(p2));p2.setView(0.2,0.0,0.8,1.0);assertTrue(p1.equals(p2));p1.addLayer(new StandardDialScale());assertFalse(p1.equals(p2));p2.addLayer(new StandardDialScale());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DialPlot p1=new DialPlot();DialPlot p2=new DialPlot();assertTrue(p1.equals(p2));int h1=p1.hashCode();int h2=p2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialPlot p1=new DialPlot();DialPlot p2=null;try {p2=(DialPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialPlot p1=new DialPlot();DialPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(DialPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testBackgroundListener",0,"/** * Check the notification event mechanism for the dial background.*/public void testBackgroundListener(){DialPlot p=new DialPlot();DialBackground b1=new DialBackground(Color.red);p.setBackground(b1);p.addChangeListener(this);this.lastEvent=null;b1.setPaint(Color.blue);assertNotNull(this.lastEvent);DialBackground b2=new DialBackground(Color.green);p.setBackground(b2);this.lastEvent=null;b1.setPaint(Color.red);assertNull(this.lastEvent);b2.setPaint(Color.red);assertNotNull(this.lastEvent);}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testCapListener",0,"/** * Check the notification event mechanism for the dial cap.*/public void testCapListener(){DialPlot p=new DialPlot();DialCap c1=new DialCap();p.setCap(c1);p.addChangeListener(this);this.lastEvent=null;c1.setFillPaint(Color.red);assertNotNull(this.lastEvent);DialCap c2=new DialCap();p.setCap(c2);this.lastEvent=null;c1.setFillPaint(Color.blue);assertNull(this.lastEvent);c2.setFillPaint(Color.green);assertNotNull(this.lastEvent);}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testFrameListener",0,"/** * Check the notification event mechanism for the dial frame.*/public void testFrameListener(){DialPlot p=new DialPlot();ArcDialFrame f1=new ArcDialFrame();p.setDialFrame(f1);p.addChangeListener(this);this.lastEvent=null;f1.setBackgroundPaint(Color.gray);assertNotNull(this.lastEvent);ArcDialFrame f2=new ArcDialFrame();p.setDialFrame(f2);this.lastEvent=null;f1.setBackgroundPaint(Color.blue);assertNull(this.lastEvent);f2.setBackgroundPaint(Color.green);assertNotNull(this.lastEvent);}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testScaleListener",0,"/** * Check the notification event mechanism for the dial scales.*/public void testScaleListener(){DialPlot p=new DialPlot();StandardDialScale s1=new StandardDialScale();p.addScale(0,s1);p.addChangeListener(this);this.lastEvent=null;s1.setStartAngle(22.0);assertNotNull(this.lastEvent);StandardDialScale s2=new StandardDialScale();p.addScale(0,s2);this.lastEvent=null;s1.setStartAngle(33.0);assertNull(this.lastEvent);s2.setStartAngle(33.0);assertNotNull(this.lastEvent);}"
"org.jfree.chart.plot.dial.junit.DialPlotTests.testLayerListener",0,"/** * Check the notification event mechanism for a layer.*/public void testLayerListener(){DialPlot p=new DialPlot();DialBackground b1=new DialBackground(Color.red);p.addLayer(b1);p.addChangeListener(this);this.lastEvent=null;b1.setPaint(Color.blue);assertNotNull(this.lastEvent);DialBackground b2=new DialBackground(Color.green);p.addLayer(b2);this.lastEvent=null;b1.setPaint(Color.red);assertNotNull(this.lastEvent);b2.setPaint(Color.green);assertNotNull(this.lastEvent);p.removeLayer(b2);this.lastEvent=null;b2.setPaint(Color.red);assertNull(this.lastEvent);}"
"org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){LayeredBarRenderer r1=new LayeredBarRenderer();LayeredBarRenderer r2=new LayeredBarRenderer();assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){LayeredBarRenderer r1=new LayeredBarRenderer();LayeredBarRenderer r2=new LayeredBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LayeredBarRenderer r1=new LayeredBarRenderer();LayeredBarRenderer r2=null;try {r2=(LayeredBarRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LayeredBarRenderer r1=new LayeredBarRenderer();LayeredBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(LayeredBarRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new LayeredBarRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.testEquals",0,"/** * Tests that the equals()method can distinguish all fields.*/public void testEquals(){String f1=""{1}"";String f2=""{2}"";NumberFormat xnf1=new DecimalFormat(""0.00"");NumberFormat xnf2=new DecimalFormat(""0.000"");NumberFormat ynf1=new DecimalFormat(""0.00"");NumberFormat ynf2=new DecimalFormat(""0.000"");NumberFormat znf1=new DecimalFormat(""0.00"");NumberFormat znf2=new DecimalFormat(""0.000"");DateFormat xdf1=new SimpleDateFormat(""d-MMM"");DateFormat xdf2=new SimpleDateFormat(""d-MMM-yyyy"");DateFormat ydf1=new SimpleDateFormat(""d-MMM"");DateFormat ydf2=new SimpleDateFormat(""d-MMM-yyyy"");DateFormat zdf1=new SimpleDateFormat(""d-MMM"");DateFormat zdf2=new SimpleDateFormat(""d-MMM-yyyy"");StandardXYZToolTipGenerator g1=null;StandardXYZToolTipGenerator g2=null;g1=new StandardXYZToolTipGenerator(f1,xnf1,ynf1,znf1);g2=new StandardXYZToolTipGenerator(f1,xnf1,ynf1,znf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xnf1,ynf1,znf1);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xnf1,ynf1,znf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xnf2,ynf1,znf1);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xnf2,ynf1,znf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf1);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf2);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xnf2,ynf2,znf2);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xdf1,ydf1,zdf1);g2=new StandardXYZToolTipGenerator(f2,xdf1,ydf1,zdf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xdf2,ydf1,zdf1);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xdf2,ydf1,zdf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf1);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf1);assertTrue(g1.equals(g2));g1=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf2);assertFalse(g1.equals(g2));g2=new StandardXYZToolTipGenerator(f2,xdf2,ydf2,zdf2);assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardXYZToolTipGenerator g1=new StandardXYZToolTipGenerator();StandardXYZToolTipGenerator g2=null;try {g2=(StandardXYZToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardXYZToolTipGenerator g1=new StandardXYZToolTipGenerator();StandardXYZToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardXYZToolTipGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.data.junit.RangeTypeTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){assertEquals(RangeType.FULL,RangeType.FULL);assertEquals(RangeType.NEGATIVE,RangeType.NEGATIVE);assertEquals(RangeType.POSITIVE,RangeType.POSITIVE);assertFalse(RangeType.FULL.equals(RangeType.NEGATIVE));assertFalse(RangeType.FULL.equals(RangeType.POSITIVE));assertFalse(RangeType.FULL.equals(null));assertFalse(RangeType.NEGATIVE.equals(RangeType.FULL));assertFalse(RangeType.NEGATIVE.equals(RangeType.POSITIVE));assertFalse(RangeType.NEGATIVE.equals(null));assertFalse(RangeType.POSITIVE.equals(RangeType.NEGATIVE));assertFalse(RangeType.POSITIVE.equals(RangeType.FULL));assertFalse(RangeType.POSITIVE.equals(null));}"
"org.jfree.data.junit.RangeTypeTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){RangeType r1=RangeType.FULL;RangeType r2=RangeType.FULL;assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.junit.RangeTypeTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){RangeType r1=RangeType.FULL;RangeType r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(RangeType)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);boolean same=r1 == r2;assertEquals(true,same);}"
"org.jfree.chart.junit.LegendItemCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){LegendItemCollection c1=new LegendItemCollection();LegendItemCollection c2=new LegendItemCollection();assertTrue(c1.equals(c2));assertTrue(c2.equals(c1));LegendItem item1=new LegendItem(""Label"",""Description"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);LegendItem item2=new LegendItem(""Label"",""Description"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);c1.add(item1);c2.add(item2);assertTrue(c1.equals(c2));}"
"org.jfree.chart.junit.LegendItemCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LegendItemCollection c1=new LegendItemCollection();c1.add(new LegendItem(""Item"",""Description"",""ToolTip"",""URL"",new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.red));LegendItemCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(LegendItemCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.chart.junit.LegendItemCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LegendItemCollection c1=new LegendItemCollection();c1.add(new LegendItem(""Item"",""Description"",""ToolTip"",""URL"",new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.red));LegendItemCollection c2=null;try {c2=(LegendItemCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.YIntervalDataItemTests.testConstructor1",0,"/** * Some checks for the constructor.*/public void testConstructor1(){YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,3.0,4.0);assertEquals(new Double(1.0),item1.getX());assertEquals(2.0,item1.getYValue(),EPSILON);assertEquals(3.0,item1.getYLowValue(),EPSILON);assertEquals(4.0,item1.getYHighValue(),EPSILON);}"
"org.jfree.data.xy.junit.YIntervalDataItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,1.5,2.5);YIntervalDataItem item2=new YIntervalDataItem(1.0,2.0,1.5,2.5);assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1=new YIntervalDataItem(1.1,2.0,1.5,2.5);assertFalse(item1.equals(item2));item2=new YIntervalDataItem(1.1,2.0,1.5,2.5);assertTrue(item1.equals(item2));item1=new YIntervalDataItem(1.1,2.2,1.5,2.5);assertFalse(item1.equals(item2));item2=new YIntervalDataItem(1.1,2.2,1.5,2.5);assertTrue(item1.equals(item2));item1=new YIntervalDataItem(1.1,2.2,1.55,2.5);assertFalse(item1.equals(item2));item2=new YIntervalDataItem(1.1,2.2,1.55,2.5);assertTrue(item1.equals(item2));item1=new YIntervalDataItem(1.1,2.2,1.55,2.55);assertFalse(item1.equals(item2));item2=new YIntervalDataItem(1.1,2.2,1.55,2.55);assertTrue(item1.equals(item2));}"
"org.jfree.data.xy.junit.YIntervalDataItemTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,1.5,2.5);YIntervalDataItem item2=null;try {item2=(YIntervalDataItem)item1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(item1 != item2);assertTrue(item1.getClass()== item2.getClass());assertTrue(item1.equals(item2));}"
"org.jfree.data.xy.junit.YIntervalDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){YIntervalDataItem item1=new YIntervalDataItem(1.0,2.0,1.5,2.5);YIntervalDataItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(YIntervalDataItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.chart.junit.LegendItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){LegendItem item1=new LegendItem(""Label"",""Description"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);LegendItem item2=new LegendItem(""Label"",""Description"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1=new LegendItem(""Label2"",""Description"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",true,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(1.0,2.0,3.0,4.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),true,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.red,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,true,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.blue,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(1.2f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),true,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(1.0,2.0,3.0,4.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.1f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(2.1f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(3.3f),Color.green);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(3.3f),Color.green);assertTrue(item1.equals(item2));item1=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(3.3f),Color.white);assertFalse(item1.equals(item2));item2=new LegendItem(""Label2"",""Description2"",""ToolTip"",""URL"",false,new Rectangle2D.Double(4.0,3.0,2.0,1.0),false,Color.black,false,Color.yellow,new BasicStroke(2.1f),false,new Line2D.Double(4.0,3.0,2.0,1.0),new BasicStroke(3.3f),Color.white);assertTrue(item1.equals(item2));item1.setFillPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));assertFalse(item1.equals(item2));item2.setFillPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));assertTrue(item1.equals(item2));}"
"org.jfree.chart.junit.LegendItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LegendItem item1=new LegendItem(""Item"",""Description"",""ToolTip"",""URL"",new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.red);LegendItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(LegendItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.chart.junit.LegendItemTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){AttributedString as=new AttributedString(""Test String"");as.addAttribute(TextAttribute.FONT,new Font(""Dialog"",Font.PLAIN,12));LegendItem item1=new LegendItem(as,""Description"",""ToolTip"",""URL"",new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.red);LegendItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(LegendItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.chart.junit.LegendItemTests.testCloning",0,"/** * Cloning is not required for this class as it is designed to be  immutable.*/public void testCloning(){LegendItem item=new LegendItem(""Item"",""Description"",""ToolTip"",""URL"",new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.red);assertFalse(item instanceof Cloneable);}"
"org.jfree.data.time.junit.TimePeriodValueTests.testEqualsSelf",0,"/** * Test that an instance is equal to itself.*/public void testEqualsSelf(){TimePeriodValue tpv=new TimePeriodValue(new Day(),55.75);assertTrue(tpv.equals(tpv));}"
"org.jfree.data.time.junit.TimePeriodValueTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){TimePeriodValue tpv1=new TimePeriodValue(new Day(30,7,2003),55.75);TimePeriodValue tpv2=new TimePeriodValue(new Day(30,7,2003),55.75);assertTrue(tpv1.equals(tpv2));assertTrue(tpv2.equals(tpv1));}"
"org.jfree.data.time.junit.TimePeriodValueTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimePeriodValue tpv1=new TimePeriodValue(new Day(30,7,2003),55.75);TimePeriodValue tpv2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(tpv1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));tpv2=(TimePeriodValue)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(tpv1,tpv2);}"
"org.jfree.chart.renderer.junit.OutlierTests.testConstructor",0,"/** * Simple check for the default constructor.*/public void testConstructor(){Outlier out=new Outlier(1.0,2.0,3.0);assertEquals(-2.0,out.getX(),EPSILON);assertEquals(-1.0,out.getY(),EPSILON);assertEquals(3.0,out.getRadius(),EPSILON);}"
"org.jfree.chart.renderer.junit.OutlierTests.testEquals",0,"/** * A test for the equals()method.*/public void testEquals(){Outlier out1=new Outlier(1.0,2.0,3.0);Outlier out2=new Outlier(1.0,2.0,3.0);assertTrue(out1.equals(out2));assertTrue(out2.equals(out1));out1.setPoint(new Point2D.Double(2.0,2.0));assertFalse(out1.equals(out2));out2.setPoint(new Point2D.Double(2.0,2.0));assertTrue(out1.equals(out2));out1.setPoint(new Point2D.Double(2.0,3.0));assertFalse(out1.equals(out2));out2.setPoint(new Point2D.Double(2.0,3.0));assertTrue(out1.equals(out2));out1.setRadius(4.0);assertFalse(out1.equals(out2));out2.setRadius(4.0);assertTrue(out1.equals(out2));}"
"org.jfree.chart.renderer.junit.OutlierTests.testCloning",0,"/** * Confirm that cloning is not implemented.*/public void testCloning(){Outlier out1=new Outlier(1.0,2.0,3.0);assertFalse(out1 instanceof Cloneable);}"
"org.jfree.chart.renderer.junit.OutlierTests.testSerialization",0,"/** * Confirm that serialization is not implemented.*/public void testSerialization(){Outlier out1=new Outlier(1.0,2.0,3.0);assertFalse(out1 instanceof Serializable);}"
"org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();StandardPieToolTipGenerator g2=new StandardPieToolTipGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardPieToolTipGenerator(""{0}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertFalse(g1.equals(g2));g2=new StandardPieToolTipGenerator(""{0}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertTrue(g1.equals(g2));g1=new StandardPieToolTipGenerator(""{0}{1}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertFalse(g1.equals(g2));g2=new StandardPieToolTipGenerator(""{0}{1}"",new DecimalFormat(""#,##0.00""),NumberFormat.getPercentInstance());assertTrue(g1.equals(g2));g1=new StandardPieToolTipGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),NumberFormat.getPercentInstance());assertFalse(g1.equals(g2));g2=new StandardPieToolTipGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),NumberFormat.getPercentInstance());assertTrue(g1.equals(g2));g1=new StandardPieToolTipGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),new DecimalFormat(""0.000%""));assertFalse(g1.equals(g2));g2=new StandardPieToolTipGenerator(""{0}{1}"",new DecimalFormat(""#,##0""),new DecimalFormat(""0.000%""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.testCloning",0,"/** * Some checks for cloning.*/public void testCloning(){StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();StandardPieToolTipGenerator g2=null;try {g2=(StandardPieToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));assertTrue(g1.getNumberFormat()!= g2.getNumberFormat());assertTrue(g1.getPercentFormat()!= g2.getPercentFormat());}"
"org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardPieToolTipGenerator g1=new StandardPieToolTipGenerator();StandardPieToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardPieToolTipGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.junit.StackedAreaChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.StackedAreaChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.StackedAreaChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.StackedAreaChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.axis.junit.MarkerAxisBandTests.testEquals",0,"/** * Test that the equals()method can distinguish all fields.*/public void testEquals(){Font font1=new Font(""SansSerif"",Font.PLAIN,12);Font font2=new Font(""SansSerif"",Font.PLAIN,14);MarkerAxisBand a1=new MarkerAxisBand(null,1.0,1.0,1.0,1.0,font1);MarkerAxisBand a2=new MarkerAxisBand(null,1.0,1.0,1.0,1.0,font1);assertEquals(a1,a2);a1=new MarkerAxisBand(null,2.0,1.0,1.0,1.0,font1);assertFalse(a1.equals(a2));a2=new MarkerAxisBand(null,2.0,1.0,1.0,1.0,font1);assertTrue(a1.equals(a2));a1=new MarkerAxisBand(null,2.0,3.0,1.0,1.0,font1);assertFalse(a1.equals(a2));a2=new MarkerAxisBand(null,2.0,3.0,1.0,1.0,font1);assertTrue(a1.equals(a2));a1=new MarkerAxisBand(null,2.0,3.0,4.0,1.0,font1);assertFalse(a1.equals(a2));a2=new MarkerAxisBand(null,2.0,3.0,4.0,1.0,font1);assertTrue(a1.equals(a2));a1=new MarkerAxisBand(null,2.0,3.0,4.0,5.0,font1);assertFalse(a1.equals(a2));a2=new MarkerAxisBand(null,2.0,3.0,4.0,5.0,font1);assertTrue(a1.equals(a2));a1=new MarkerAxisBand(null,2.0,3.0,4.0,5.0,font2);assertFalse(a1.equals(a2));a2=new MarkerAxisBand(null,2.0,3.0,4.0,5.0,font2);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.MarkerAxisBandTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Font font1=new Font(""SansSerif"",Font.PLAIN,12);MarkerAxisBand a1=new MarkerAxisBand(null,1.0,1.0,1.0,1.0,font1);MarkerAxisBand a2=new MarkerAxisBand(null,1.0,1.0,1.0,1.0,font1);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.MarkerAxisBandTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MarkerAxisBand a1=new MarkerAxisBand(null,1.0,1.0,1.0,1.0,null);MarkerAxisBand a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(MarkerAxisBand)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.plot.junit.RingPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){RingPlot plot1=new RingPlot(null);RingPlot plot2=new RingPlot(null);assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));plot1.setSeparatorsVisible(false);assertFalse(plot1.equals(plot2));plot2.setSeparatorsVisible(false);assertTrue(plot1.equals(plot2));Stroke s=new BasicStroke(1.1f);plot1.setSeparatorStroke(s);assertFalse(plot1.equals(plot2));plot2.setSeparatorStroke(s);assertTrue(plot1.equals(plot2));plot1.setSeparatorPaint(new GradientPaint(1.0f,2.0f,Color.red,2.0f,1.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setSeparatorPaint(new GradientPaint(1.0f,2.0f,Color.red,2.0f,1.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setInnerSeparatorExtension(0.01);assertFalse(plot1.equals(plot2));plot2.setInnerSeparatorExtension(0.01);assertTrue(plot1.equals(plot2));plot1.setOuterSeparatorExtension(0.02);assertFalse(plot1.equals(plot2));plot2.setOuterSeparatorExtension(0.02);assertTrue(plot1.equals(plot2));plot1.setSectionDepth(0.12);assertFalse(plot1.equals(plot2));plot2.setSectionDepth(0.12);assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.RingPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){RingPlot p1=new RingPlot(null);GradientPaint gp=new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.red);p1.setSeparatorPaint(gp);RingPlot p2=null;try {p2=(RingPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.RingPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){RingPlot p1=new RingPlot(null);GradientPaint gp=new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.red);p1.setSeparatorPaint(gp);RingPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(RingPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialTextAnnotation a1=new DialTextAnnotation(""A1"");DialTextAnnotation a2=new DialTextAnnotation(""A1"");assertTrue(a1.equals(a2));a1.setAngle(1.1);assertFalse(a1.equals(a2));a2.setAngle(1.1);assertTrue(a1.equals(a2));a1.setRadius(9.9);assertFalse(a1.equals(a2));a2.setRadius(9.9);assertTrue(a1.equals(a2));Font f=new Font(""SansSerif"",Font.PLAIN,14);a1.setFont(f);assertFalse(a1.equals(a2));a2.setFont(f);assertTrue(a1.equals(a2));a1.setPaint(Color.red);assertFalse(a1.equals(a2));a2.setPaint(Color.red);assertTrue(a1.equals(a2));a1.setLabel(""ABC"");assertFalse(a1.equals(a2));a2.setLabel(""ABC"");assertTrue(a1.equals(a2));a1.setVisible(false);assertFalse(a1.equals(a2));a2.setVisible(false);assertTrue(a1.equals(a2));}"
"org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DialTextAnnotation a1=new DialTextAnnotation(""A1"");DialTextAnnotation a2=new DialTextAnnotation(""A1"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialTextAnnotation a1=new DialTextAnnotation(""A1"");DialTextAnnotation a2=null;try {a2=(DialTextAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();a1.addChangeListener(l1);assertTrue(a1.hasListener(l1));assertFalse(a2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.DialTextAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialTextAnnotation a1=new DialTextAnnotation(""A1"");DialTextAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(DialTextAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);a1=new DialTextAnnotation(""A1"");a1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(DialTextAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){CategoryPointerAnnotation a1=new CategoryPointerAnnotation(""Label"",""Key 1"",20.0,Math.PI);CategoryPointerAnnotation a2=new CategoryPointerAnnotation(""Label"",""Key 1"",20.0,Math.PI);assertTrue(a1.equals(a2));a1=new CategoryPointerAnnotation(""Label2"",""Key 1"",20.0,Math.PI);assertFalse(a1.equals(a2));a2=new CategoryPointerAnnotation(""Label2"",""Key 1"",20.0,Math.PI);assertTrue(a1.equals(a2));a1.setCategory(""Key 2"");assertFalse(a1.equals(a2));a2.setCategory(""Key 2"");assertTrue(a1.equals(a2));a1.setValue(22.0);assertFalse(a1.equals(a2));a2.setValue(22.0);assertTrue(a1.equals(a2));a1.setAngle(Math.PI / 4.0);assertFalse(a1.equals(a2));a2.setAngle(Math.PI / 4.0);assertTrue(a1.equals(a2));a1.setTipRadius(20.0);assertFalse(a1.equals(a2));a2.setTipRadius(20.0);assertTrue(a1.equals(a2));a1.setBaseRadius(5.0);assertFalse(a1.equals(a2));a2.setBaseRadius(5.0);assertTrue(a1.equals(a2));a1.setArrowLength(33.0);assertFalse(a1.equals(a2));a2.setArrowLength(33.0);assertTrue(a1.equals(a2));a1.setArrowWidth(9.0);assertFalse(a1.equals(a2));a2.setArrowWidth(9.0);assertTrue(a1.equals(a2));Stroke stroke=new BasicStroke(1.5f);a1.setArrowStroke(stroke);assertFalse(a1.equals(a2));a2.setArrowStroke(stroke);assertTrue(a1.equals(a2));a1.setArrowPaint(Color.blue);assertFalse(a1.equals(a2));a2.setArrowPaint(Color.blue);assertTrue(a1.equals(a2));a1.setLabelOffset(10.0);assertFalse(a1.equals(a2));a2.setLabelOffset(10.0);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CategoryPointerAnnotation a1=new CategoryPointerAnnotation(""Label"",""A"",20.0,Math.PI);CategoryPointerAnnotation a2=new CategoryPointerAnnotation(""Label"",""A"",20.0,Math.PI);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryPointerAnnotation a1=new CategoryPointerAnnotation(""Label"",""A"",20.0,Math.PI);CategoryPointerAnnotation a2=null;try {a2=(CategoryPointerAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryPointerAnnotation a1=new CategoryPointerAnnotation(""Label"",""A"",20.0,Math.PI);CategoryPointerAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CategoryPointerAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.plot.junit.CompassPlotTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){CompassPlot plot1=new CompassPlot();CompassPlot plot2=new CompassPlot();assertTrue(plot1.equals(plot2));plot1.setLabelType(CompassPlot.VALUE_LABELS);assertFalse(plot1.equals(plot2));plot2.setLabelType(CompassPlot.VALUE_LABELS);assertTrue(plot1.equals(plot2));plot1.setLabelFont(new Font(""Serif"",Font.PLAIN,10));assertFalse(plot1.equals(plot2));plot2.setLabelFont(new Font(""Serif"",Font.PLAIN,10));assertTrue(plot1.equals(plot2));plot1.setDrawBorder(true);assertFalse(plot1.equals(plot2));plot2.setDrawBorder(true);assertTrue(plot1.equals(plot2));plot1.setRosePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setRosePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));plot1.setRoseCenterPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setRoseCenterPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));plot1.setRoseHighlightPaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertFalse(plot1.equals(plot2));plot2.setRoseHighlightPaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CompassPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CompassPlot p1=new CompassPlot(null);p1.setRosePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));p1.setRoseCenterPaint(new GradientPaint(4.0f,3.0f,Color.red,2.0f,1.0f,Color.green));p1.setRoseHighlightPaint(new GradientPaint(4.0f,3.0f,Color.red,2.0f,1.0f,Color.green));CompassPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(CompassPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.CompassPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CompassPlot p1=new CompassPlot(new DefaultValueDataset(15.0));CompassPlot p2=null;try {p2=(CompassPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.data.time.junit.TimeTableXYDatasetTests.testStandard",0,"/** * Some checks for a simple dataset.*/public void testStandard(){TimeTableXYDataset d=new TimeTableXYDataset();d.add(new Year(1999),1.0,""Series 1"");assertEquals(d.getItemCount(),1);assertEquals(d.getSeriesCount(),1);d.add(new Year(2000),2.0,""Series 2"");assertEquals(d.getItemCount(),2);assertEquals(d.getSeriesCount(),2);assertEquals(d.getYValue(0,0),1.0,DELTA);assertTrue(Double.isNaN(d.getYValue(0,1)));assertTrue(Double.isNaN(d.getYValue(1,0)));assertEquals(d.getYValue(1,1),2.0,DELTA);}"
"org.jfree.data.time.junit.TimeTableXYDatasetTests.testGetTimePeriod",0,"/** * Some checks for the getTimePeriod()method.*/public void testGetTimePeriod(){TimeTableXYDataset d=new TimeTableXYDataset();d.add(new Year(1999),1.0,""Series 1"");d.add(new Year(1998),2.0,""Series 1"");d.add(new Year(1996),3.0,""Series 1"");assertEquals(d.getTimePeriod(0),new Year(1996));assertEquals(d.getTimePeriod(1),new Year(1998));assertEquals(d.getTimePeriod(2),new Year(1999));}"
"org.jfree.data.time.junit.TimeTableXYDatasetTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){TimeTableXYDataset d1=new TimeTableXYDataset();TimeTableXYDataset d2=new TimeTableXYDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1.add(new Year(1999),123.4,""S1"");assertFalse(d1.equals(d2));d2.add(new Year(1999),123.4,""S1"");assertTrue(d1.equals(d2));d1.setDomainIsPointsInTime(!d1.getDomainIsPointsInTime());assertFalse(d1.equals(d2));d2.setDomainIsPointsInTime(!d2.getDomainIsPointsInTime());assertTrue(d1.equals(d2));d1=new TimeTableXYDataset(TimeZone.getTimeZone(""GMT""));d2=new TimeTableXYDataset(TimeZone.getTimeZone(""America/Los_Angeles""));assertFalse(d1.equals(d2));}"
"org.jfree.data.time.junit.TimeTableXYDatasetTests.testClone",0,"/** * Some checks for cloning.*/public void testClone(){TimeTableXYDataset d=new TimeTableXYDataset();d.add(new Year(1999),25.0,""Series"");TimeTableXYDataset clone=null;try {clone=(TimeTableXYDataset)d.clone();}catch(CloneNotSupportedException e){assertTrue(false);}assertTrue(clone.equals(d));clone.add(new Year(2004),1.2,""SS"");assertFalse(clone.equals(d));}"
"org.jfree.data.time.junit.TimeTableXYDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimeTableXYDataset d1=new TimeTableXYDataset();d1.add(new Year(1999),123.4,""S1"");TimeTableXYDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(TimeTableXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(d1.equals(d2));}"
"org.jfree.data.time.junit.TimeTableXYDatasetTests.testClear",0,"/** * Test clearing data.*/public void testClear(){TimeTableXYDataset d=new TimeTableXYDataset();d.add(new Year(1999),1.0,""Series 1"");assertEquals(d.getItemCount(),1);assertEquals(d.getSeriesCount(),1);d.add(new Year(2000),2.0,""Series 2"");d.clear();assertEquals(0,d.getItemCount());assertEquals(0,d.getSeriesCount());}"
"org.jfree.chart.urls.junit.CustomXYURLGeneratorTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){CustomXYURLGenerator g1=new CustomXYURLGenerator();CustomXYURLGenerator g2=new CustomXYURLGenerator();assertTrue(g1.equals(g2));List u1=new java.util.ArrayList();u1.add(""URL A1"");u1.add(""URL A2"");u1.add(""URL A3"");g1.addURLSeries(u1);assertFalse(g1.equals(g2));List u2=new java.util.ArrayList();u2.add(""URL A1"");u2.add(""URL A2"");u2.add(""URL A3"");g2.addURLSeries(u2);assertTrue(g1.equals(g2));}"
"org.jfree.chart.urls.junit.CustomXYURLGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CustomXYURLGenerator g1=new CustomXYURLGenerator();List u1=new java.util.ArrayList();u1.add(""URL A1"");u1.add(""URL A2"");u1.add(""URL A3"");g1.addURLSeries(u1);CustomXYURLGenerator g2=null;try {g2=(CustomXYURLGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));List u2=new java.util.ArrayList();u2.add(""URL XXX"");g1.addURLSeries(u2);assertFalse(g1.equals(g2));}"
"org.jfree.chart.urls.junit.CustomXYURLGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){List u1=new java.util.ArrayList();u1.add(""URL A1"");u1.add(""URL A2"");u1.add(""URL A3"");List u2=new java.util.ArrayList();u2.add(""URL B1"");u2.add(""URL B2"");u2.add(""URL B3"");CustomXYURLGenerator g1=new CustomXYURLGenerator();CustomXYURLGenerator g2=null;g1.addURLSeries(u1);g1.addURLSeries(u2);try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(CustomXYURLGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.axis.junit.AxisSpaceTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){AxisSpace a1=new AxisSpace();AxisSpace a2=new AxisSpace();assertEquals(a1,a2);a1.setTop(1.11);assertFalse(a1.equals(a2));a2.setTop(1.11);assertTrue(a1.equals(a2));a1.setBottom(2.22);assertFalse(a1.equals(a2));a2.setBottom(2.22);assertTrue(a1.equals(a2));a1.setLeft(3.33);assertFalse(a1.equals(a2));a2.setLeft(3.33);assertTrue(a1.equals(a2));a1.setRight(4.44);assertFalse(a1.equals(a2));a2.setRight(4.44);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.AxisSpaceTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){AxisSpace s1=new AxisSpace();AxisSpace s2=new AxisSpace();assertTrue(s1.equals(s2));int h1=s1.hashCode();int h2=s2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.AxisSpaceTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){AxisSpace s1=new AxisSpace();AxisSpace s2=null;try {s2=(AxisSpace)s1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.time.junit.YearTests.testEqualsSelf",0,"/** * Check that a Year instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Year year=new Year();assertTrue(year.equals(year));}"
"org.jfree.data.time.junit.YearTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Year year1=new Year(2002);Year year2=new Year(2002);assertTrue(year1.equals(year2));}"
"org.jfree.data.time.junit.YearTests.testDateConstructor1",0,"/** * In GMT,the end of 2001 is java.util.Date(1009843199999L).  Use this to  check the year constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Date d1=new Date(1009843199999L);Date d2=new Date(1009843200000L);Year y1=new Year(d1,zone);Year y2=new Year(d2,zone);assertEquals(2001,y1.getYear());assertEquals(1009843199999L,y1.getLastMillisecond(c));assertEquals(2002,y2.getYear());assertEquals(1009843200000L,y2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.YearTests.testDateConstructor2",0,"/** * In Los Angeles,the end of 2001 is java.util.Date(1009871999999L).  Use  this to check the year constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);Year y1=new Year(new Date(1009871999999L),zone);Year y2=new Year(new Date(1009872000000L),zone);assertEquals(2001,y1.getYear());assertEquals(1009871999999L,y1.getLastMillisecond(c));assertEquals(2002,y2.getYear());assertEquals(1009872000000L,y2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.YearTests.test1900Previous",0,"/** * Set up a year equal to 1900.  Request the previous year,it should be null.*/public void test1900Previous(){Year current=new Year(1900);Year previous=(Year)current.previous();assertNull(previous);}"
"org.jfree.data.time.junit.YearTests.test1900Next",0,"/** * Set up a year equal to 1900.  Request the next year,it should be 1901.*/public void test1900Next(){Year current=new Year(1900);Year next=(Year)current.next();assertEquals(1901,next.getYear());}"
"org.jfree.data.time.junit.YearTests.test9999Previous",0,"/** * Set up a year equal to 9999.  Request the previous year,it should be  9998.*/public void test9999Previous(){Year current=new Year(9999);Year previous=(Year)current.previous();assertEquals(9998,previous.getYear());}"
"org.jfree.data.time.junit.YearTests.test9999Next",0,"/** * Set up a year equal to 9999.  Request the next year,it should be null.*/public void test9999Next(){Year current=new Year(9999);Year next=(Year)current.next();assertNull(next);}"
"org.jfree.data.time.junit.YearTests.testParseYear",0,"/** * Tests the year string parser.*/public void testParseYear(){Year year=null;try {year=Year.parseYear(""2000"");}catch(TimePeriodFormatException e){year=new Year(1900);}assertEquals(2000,year.getYear());try {year=Year.parseYear("" 2001 "");}catch(TimePeriodFormatException e){year=new Year(1900);}assertEquals(2001,year.getYear());try {year=Year.parseYear(""99"");}catch(TimePeriodFormatException e){year=new Year(1900);}assertEquals(1900,year.getYear());}"
"org.jfree.data.time.junit.YearTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Year y1=new Year(1999);Year y2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(y1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));y2=(Year)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(y1,y2);}"
"org.jfree.data.time.junit.YearTests.testNotCloneable",0,"/** * The  {@link Year}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Year y=new Year(1999);assertFalse(y instanceof Cloneable);}"
"org.jfree.data.time.junit.YearTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Year y1=new Year(1988);Year y2=new Year(1988);assertTrue(y1.equals(y2));int h1=y1.hashCode();int h2=y2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.YearTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Year y=new Year(1970);assertEquals(-3600000L,y.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.YearTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Year y=new Year(1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-631123200000L,y.getFirstMillisecond(c));boolean pass=false;try {y.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.YearTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Year y=new Year(2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(978307200000L,y.getFirstMillisecond(calendar));boolean pass=false;try {y.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.YearTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Year y=new Year(1970);assertEquals(31532399999L,y.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.YearTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Year y=new Year(1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-599587200001L,y.getLastMillisecond(c));boolean pass=false;try {y.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.YearTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Year y=new Year(2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(1009843199999L,y.getLastMillisecond(calendar));boolean pass=false;try {y.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.YearTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Year y=new Year(2000);assertEquals(2000L,y.getSerialIndex());}"
"org.jfree.data.time.junit.YearTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Year y=new Year(2000);y=(Year)y.next();assertEquals(2001,y.getYear());y=new Year(9999);assertNull(y.next());}"
"org.jfree.data.time.junit.YearTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,1,0,0,0);cal.set(Calendar.MILLISECOND,0);Year y=new Year(2006);assertEquals(cal.getTime(),y.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.YearTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.DECEMBER,31,23,59,59);cal.set(Calendar.MILLISECOND,999);Year y=new Year(2006);assertEquals(cal.getTime(),y.getEnd());Locale.setDefault(saved);}"
"org.jfree.chart.title.junit.LegendGraphicTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){LegendGraphic g1=new LegendGraphic(new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.black);LegendGraphic g2=new LegendGraphic(new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.black);assertEquals(g1,g2);assertEquals(g2,g1);g1.setShapeVisible(!g1.isShapeVisible());assertFalse(g1.equals(g2));g2.setShapeVisible(!g2.isShapeVisible());assertTrue(g1.equals(g2));g1.setShape(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertFalse(g1.equals(g2));g2.setShape(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(g1.equals(g2));g1.setShapeFilled(!g1.isShapeFilled());assertFalse(g1.equals(g2));g2.setShapeFilled(!g2.isShapeFilled());assertTrue(g1.equals(g2));g1.setFillPaint(Color.green);assertFalse(g1.equals(g2));g2.setFillPaint(Color.green);assertTrue(g1.equals(g2));g1.setShapeOutlineVisible(!g1.isShapeOutlineVisible());assertFalse(g1.equals(g2));g2.setShapeOutlineVisible(!g2.isShapeOutlineVisible());assertTrue(g1.equals(g2));g1.setOutlinePaint(Color.green);assertFalse(g1.equals(g2));g2.setOutlinePaint(Color.green);assertTrue(g1.equals(g2));g1.setOutlineStroke(new BasicStroke(1.23f));assertFalse(g1.equals(g2));g2.setOutlineStroke(new BasicStroke(1.23f));assertTrue(g1.equals(g2));g1.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT);assertFalse(g1.equals(g2));g2.setShapeAnchor(RectangleAnchor.BOTTOM_RIGHT);assertTrue(g1.equals(g2));g1.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT);assertFalse(g1.equals(g2));g2.setShapeLocation(RectangleAnchor.BOTTOM_RIGHT);assertTrue(g1.equals(g2));g1.setLineVisible(!g1.isLineVisible());assertFalse(g1.equals(g2));g2.setLineVisible(!g2.isLineVisible());assertTrue(g1.equals(g2));g1.setLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertFalse(g1.equals(g2));g2.setLine(new Line2D.Double(1.0,2.0,3.0,4.0));assertTrue(g1.equals(g2));g1.setLinePaint(Color.green);assertFalse(g1.equals(g2));g2.setLinePaint(Color.green);assertTrue(g1.equals(g2));g1.setLineStroke(new BasicStroke(1.23f));assertFalse(g1.equals(g2));g2.setLineStroke(new BasicStroke(1.23f));assertTrue(g1.equals(g2));g1.setFillPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_HORIZONTAL));assertFalse(g1.equals(g2));g2.setFillPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_HORIZONTAL));assertTrue(g1.equals(g2));}"
"org.jfree.chart.title.junit.LegendGraphicTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){LegendGraphic g1=new LegendGraphic(new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.black);LegendGraphic g2=new LegendGraphic(new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.black);assertTrue(g1.equals(g2));int h1=g1.hashCode();int h2=g2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.LegendGraphicTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){Rectangle r=new Rectangle(1,2,3,4);LegendGraphic g1=new LegendGraphic(r,Color.black);LegendGraphic g2=null;try {g2=(LegendGraphic)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));r.setBounds(4,3,2,1);assertFalse(g1.equals(g2));}"
"org.jfree.chart.title.junit.LegendGraphicTests.testCloning2",0,"/** * A test for cloning - checks that the line shape is cloned correctly.*/public void testCloning2(){Rectangle r=new Rectangle(1,2,3,4);LegendGraphic g1=new LegendGraphic(r,Color.black);Line2D l=new Line2D.Double(1.0,2.0,3.0,4.0);g1.setLine(l);LegendGraphic g2=null;try {g2=(LegendGraphic)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));l.setLine(4.0,3.0,2.0,1.0);assertFalse(g1.equals(g2));}"
"org.jfree.chart.title.junit.LegendGraphicTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Stroke s=new BasicStroke(1.23f);LegendGraphic g1=new LegendGraphic(new Rectangle2D.Double(1.0,2.0,3.0,4.0),Color.black);g1.setOutlineStroke(s);LegendGraphic g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(LegendGraphic)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertTrue(g1.equals(g2));}"
"org.jfree.data.time.junit.DateRangeTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DateRange r1=new DateRange(new Date(1000L),new Date(2000L));DateRange r2=new DateRange(new Date(1000L),new Date(2000L));assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1=new DateRange(new Date(1111L),new Date(2000L));assertFalse(r1.equals(r2));r2=new DateRange(new Date(1111L),new Date(2000L));assertTrue(r1.equals(r2));r1=new DateRange(new Date(1111L),new Date(2222L));assertFalse(r1.equals(r2));r2=new DateRange(new Date(1111L),new Date(2222L));assertTrue(r1.equals(r2));}"
"org.jfree.data.time.junit.DateRangeTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DateRange r1=new DateRange(new Date(1000L),new Date(2000L));DateRange r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(DateRange)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.data.time.junit.DateRangeTests.testClone",0,"/** * The  {@link DateRange}class is immutable,so it doesn't need to be cloneable.*/public void testClone(){DateRange r1=new DateRange(new Date(1000L),new Date(2000L));assertFalse(r1 instanceof Cloneable);}"
"org.jfree.chart.junit.ScatterPlotTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.ScatterPlotTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.ScatterPlotTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){StatisticalLineAndShapeRenderer r1=new StatisticalLineAndShapeRenderer();StatisticalLineAndShapeRenderer r2=new StatisticalLineAndShapeRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setErrorIndicatorPaint(Color.red);assertFalse(r1.equals(r2));r2.setErrorIndicatorPaint(Color.red);assertTrue(r2.equals(r1));}"
"org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StatisticalLineAndShapeRenderer r1=new StatisticalLineAndShapeRenderer();StatisticalLineAndShapeRenderer r2=new StatisticalLineAndShapeRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StatisticalLineAndShapeRenderer r1=new StatisticalLineAndShapeRenderer();StatisticalLineAndShapeRenderer r2=null;try {r2=(StatisticalLineAndShapeRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StatisticalLineAndShapeRenderer r1=new StatisticalLineAndShapeRenderer();StatisticalLineAndShapeRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StatisticalLineAndShapeRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultStatisticalCategoryDataset dataset=new DefaultStatisticalCategoryDataset();dataset.add(1.0,2.0,""S1"",""C1"");dataset.add(3.0,4.0,""S1"",""C2"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new StatisticalLineAndShapeRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.test1562759",0,"/** * A simple test for bug report 1562759.*/public void test1562759(){StatisticalLineAndShapeRenderer r=new StatisticalLineAndShapeRenderer(true,false);assertTrue(r.getBaseLinesVisible());assertFalse(r.getBaseShapesVisible());r=new StatisticalLineAndShapeRenderer(false,true);assertFalse(r.getBaseLinesVisible());assertTrue(r.getBaseShapesVisible());}"
"org.jfree.data.time.junit.DayTests.testEqualsSelf",0,"/** * Check that a Day instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Day day=new Day();assertTrue(day.equals(day));}"
"org.jfree.data.time.junit.DayTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Day day1=new Day(29,MonthConstants.MARCH,2002);Day day2=new Day(29,MonthConstants.MARCH,2002);assertTrue(day1.equals(day2));}"
"org.jfree.data.time.junit.DayTests.testDateConstructor1",0,"/** * In GMT,the end of 29 Feb 2004 is java.util.Date(1,078,099,199,999L).   Use this to check the day constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Day d1=new Day(new Date(1078099199999L),zone);Day d2=new Day(new Date(1078099200000L),zone);assertEquals(MonthConstants.FEBRUARY,d1.getMonth());assertEquals(1078099199999L,d1.getLastMillisecond(c));assertEquals(MonthConstants.MARCH,d2.getMonth());assertEquals(1078099200000L,d2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.DayTests.testDateConstructor2",0,"/** * In Helsinki,the end of 29 Feb 2004 is  java.util.Date(1,078,091,999,999L).  Use this to check the Day  constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""Europe/Helsinki"");Calendar c=new GregorianCalendar(zone);Day d1=new Day(new Date(1078091999999L),zone);Day d2=new Day(new Date(1078092000000L),zone);assertEquals(MonthConstants.FEBRUARY,d1.getMonth());assertEquals(1078091999999L,d1.getLastMillisecond(c));assertEquals(MonthConstants.MARCH,d2.getMonth());assertEquals(1078092000000L,d2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.DayTests.test1Jan1900Previous",0,"/** * Set up a day equal to 1 January 1900.  Request the previous day,it  should be null.*/public void test1Jan1900Previous(){Day jan1st1900=new Day(1,MonthConstants.JANUARY,1900);Day previous=(Day)jan1st1900.previous();assertNull(previous);}"
"org.jfree.data.time.junit.DayTests.test1Jan1900Next",0,"/** * Set up a day equal to 1 January 1900.  Request the next day,it should  be 2 January 1900.*/public void test1Jan1900Next(){Day jan1st1900=new Day(1,MonthConstants.JANUARY,1900);Day next=(Day)jan1st1900.next();assertEquals(2,next.getDayOfMonth());}"
"org.jfree.data.time.junit.DayTests.test31Dec9999Previous",0,"/** * Set up a day equal to 31 December 9999.  Request the previous day,it  should be 30 December 9999.*/public void test31Dec9999Previous(){Day dec31st9999=new Day(31,MonthConstants.DECEMBER,9999);Day previous=(Day)dec31st9999.previous();assertEquals(30,previous.getDayOfMonth());}"
"org.jfree.data.time.junit.DayTests.test31Dec9999Next",0,"/** * Set up a day equal to 31 December 9999.  Request the next day,it should be null.*/public void test31Dec9999Next(){Day dec31st9999=new Day(31,MonthConstants.DECEMBER,9999);Day next=(Day)dec31st9999.next();assertNull(next);}"
"org.jfree.data.time.junit.DayTests.testParseDay",0,"/** * Problem for date parsing. <p> This test works only correct if the short pattern of the date format is ""dd/MM/yyyy"". If not,this test will result in a false negative.* @throws ParseException on parsing errors.*/public void testParseDay()throws ParseException {GregorianCalendar gc=new GregorianCalendar(2001,12,31);SimpleDateFormat format=new SimpleDateFormat(""dd/MM/yyyy"");Date reference=format.parse(""31/12/2001"");if (reference.equals(gc.getTime())){Day d=Day.parseDay(""31/12/2001"");assertEquals(37256,d.getSerialDate().toSerial());}Day d=Day.parseDay(""2001-12-31"");assertEquals(37256,d.getSerialDate().toSerial());}"
"org.jfree.data.time.junit.DayTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Day d1=new Day(15,4,2000);Day d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(Day)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.time.junit.DayTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Day d1=new Day(1,2,2003);Day d2=new Day(1,2,2003);assertTrue(d1.equals(d2));int h1=d1.hashCode();int h2=d2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.DayTests.testNotCloneable",0,"/** * The  {@link Day}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Day d=new Day(1,2,2003);assertFalse(d instanceof Cloneable);}"
"org.jfree.data.time.junit.DayTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Day d=new Day(1,1,1900);assertEquals(2,d.getSerialIndex());d=new Day(15,4,2000);assertEquals(36631,d.getSerialIndex());}"
"org.jfree.data.time.junit.DayTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Day d=new Day(1,3,1970);assertEquals(5094000000L,d.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.DayTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Day d=new Day(26,4,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-621187200000L,d.getFirstMillisecond(c));boolean pass=false;try {d.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.DayTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Day d=new Day(1,12,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(1007164800000L,d.getFirstMillisecond(calendar));boolean pass=false;try {d.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.DayTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Day d=new Day(1,1,1970);assertEquals(82799999L,d.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.DayTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Day d=new Day(1,2,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-628358400001L,d.getLastMillisecond(c));boolean pass=false;try {d.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.DayTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Day d=new Day(4,5,2001);Calendar calendar=Calendar.getInstance(TimeZone.getTimeZone(""Europe/London""),Locale.UK);assertEquals(989017199999L,d.getLastMillisecond(calendar));boolean pass=false;try {d.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.DayTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Day d=new Day(25,12,2000);d=(Day)d.next();assertEquals(2000,d.getYear());assertEquals(12,d.getMonth());assertEquals(26,d.getDayOfMonth());d=new Day(31,12,9999);assertNull(d.next());}"
"org.jfree.data.time.junit.DayTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.NOVEMBER,3,0,0,0);cal.set(Calendar.MILLISECOND,0);Day d=new Day(3,11,2006);assertEquals(cal.getTime(),d.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.DayTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(1900,Calendar.JANUARY,1,23,59,59);cal.set(Calendar.MILLISECOND,999);Day d=new Day(1,1,1900);assertEquals(cal.getTime(),d.getEnd());Locale.setDefault(saved);}"
"org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){StackedBarRenderer r1=new StackedBarRenderer();StackedBarRenderer r2=new StackedBarRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setRenderAsPercentages(true);assertFalse(r1.equals(r2));r2.setRenderAsPercentages(true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){StackedBarRenderer r1=new StackedBarRenderer();StackedBarRenderer r2=new StackedBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StackedBarRenderer r1=new StackedBarRenderer();StackedBarRenderer r2=null;try {r2=(StackedBarRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StackedBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StackedBarRenderer r1=new StackedBarRenderer();StackedBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StackedBarRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.plot.junit.SpiderWebPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){SpiderWebPlot p1=new SpiderWebPlot(new DefaultCategoryDataset());SpiderWebPlot p2=new SpiderWebPlot(new DefaultCategoryDataset());assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1.setDataExtractOrder(TableOrder.BY_COLUMN);assertFalse(p1.equals(p2));p2.setDataExtractOrder(TableOrder.BY_COLUMN);assertTrue(p1.equals(p2));p1.setHeadPercent(0.321);assertFalse(p1.equals(p2));p2.setHeadPercent(0.321);assertTrue(p1.equals(p2));p1.setInteriorGap(0.123);assertFalse(p1.equals(p2));p2.setInteriorGap(0.123);assertTrue(p1.equals(p2));p1.setStartAngle(0.456);assertFalse(p1.equals(p2));p2.setStartAngle(0.456);assertTrue(p1.equals(p2));p1.setDirection(Rotation.ANTICLOCKWISE);assertFalse(p1.equals(p2));p2.setDirection(Rotation.ANTICLOCKWISE);assertTrue(p1.equals(p2));p1.setMaxValue(123.4);assertFalse(p1.equals(p2));p2.setMaxValue(123.4);assertTrue(p1.equals(p2));p1.setLegendItemShape(new Rectangle(1,2,3,4));assertFalse(p1.equals(p2));p2.setLegendItemShape(new Rectangle(1,2,3,4));assertTrue(p1.equals(p2));p1.setSeriesPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertFalse(p1.equals(p2));p2.setSeriesPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertTrue(p1.equals(p2));p1.setSeriesPaint(1,new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.white));assertFalse(p1.equals(p2));p2.setSeriesPaint(1,new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.white));assertTrue(p1.equals(p2));p1.setBaseSeriesPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.black));assertFalse(p1.equals(p2));p2.setBaseSeriesPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.black));assertTrue(p1.equals(p2));p1.setSeriesOutlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.black));assertFalse(p1.equals(p2));p2.setSeriesOutlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.black));assertTrue(p1.equals(p2));p1.setSeriesOutlinePaint(1,new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));assertFalse(p1.equals(p2));p2.setSeriesOutlinePaint(1,new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));assertTrue(p1.equals(p2));p1.setBaseSeriesOutlinePaint(new GradientPaint(1.0f,2.0f,Color.cyan,3.0f,4.0f,Color.green));assertFalse(p1.equals(p2));p2.setBaseSeriesOutlinePaint(new GradientPaint(1.0f,2.0f,Color.cyan,3.0f,4.0f,Color.green));assertTrue(p1.equals(p2));BasicStroke s=new BasicStroke(1.23f);p1.setSeriesOutlineStroke(s);assertFalse(p1.equals(p2));p2.setSeriesOutlineStroke(s);assertTrue(p1.equals(p2));p1.setSeriesOutlineStroke(1,s);assertFalse(p1.equals(p2));p2.setSeriesOutlineStroke(1,s);assertTrue(p1.equals(p2));p1.setBaseSeriesOutlineStroke(s);assertFalse(p1.equals(p2));p2.setBaseSeriesOutlineStroke(s);assertTrue(p1.equals(p2));p1.setWebFilled(false);assertFalse(p1.equals(p2));p2.setWebFilled(false);assertTrue(p1.equals(p2));p1.setAxisLabelGap(0.11);assertFalse(p1.equals(p2));p2.setAxisLabelGap(0.11);assertTrue(p1.equals(p2));p1.setLabelFont(new Font(""Serif"",Font.PLAIN,9));assertFalse(p1.equals(p2));p2.setLabelFont(new Font(""Serif"",Font.PLAIN,9));assertTrue(p1.equals(p2));p1.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(p1.equals(p2));p2.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(p1.equals(p2));p1.setLabelGenerator(new StandardCategoryItemLabelGenerator(""XYZ: {0}"",new DecimalFormat(""0.000"")));assertFalse(p1.equals(p2));p2.setLabelGenerator(new StandardCategoryItemLabelGenerator(""XYZ: {0}"",new DecimalFormat(""0.000"")));assertTrue(p1.equals(p2));p1.setToolTipGenerator(new StandardCategoryToolTipGenerator());assertFalse(p1.equals(p2));p2.setToolTipGenerator(new StandardCategoryToolTipGenerator());assertTrue(p1.equals(p2));p1.setURLGenerator(new StandardCategoryURLGenerator());assertFalse(p1.equals(p2));p2.setURLGenerator(new StandardCategoryURLGenerator());assertTrue(p1.equals(p2));p1.setAxisLinePaint(Color.red);assertFalse(p1.equals(p2));p2.setAxisLinePaint(Color.red);assertTrue(p1.equals(p2));p1.setAxisLineStroke(new BasicStroke(1.1f));assertFalse(p1.equals(p2));p2.setAxisLineStroke(new BasicStroke(1.1f));assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.SpiderWebPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){SpiderWebPlot p1=new SpiderWebPlot(new DefaultCategoryDataset());Rectangle2D legendShape=new Rectangle2D.Double(1.0,2.0,3.0,4.0);p1.setLegendItemShape(legendShape);SpiderWebPlot p2=null;try {p2=(SpiderWebPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));legendShape.setRect(4.0,3.0,2.0,1.0);assertFalse(p1.equals(p2));p2.setLegendItemShape(legendShape);assertTrue(p1.equals(p2));p1.setSeriesPaint(1,Color.black);assertFalse(p1.equals(p2));p2.setSeriesPaint(1,Color.black);assertTrue(p1.equals(p2));p1.setSeriesOutlinePaint(0,Color.red);assertFalse(p1.equals(p2));p2.setSeriesOutlinePaint(0,Color.red);assertTrue(p1.equals(p2));p1.setSeriesOutlineStroke(0,new BasicStroke(1.1f));assertFalse(p1.equals(p2));p2.setSeriesOutlineStroke(0,new BasicStroke(1.1f));assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.SpiderWebPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){SpiderWebPlot p1=new SpiderWebPlot(new DefaultCategoryDataset());SpiderWebPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(SpiderWebPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.SpiderWebPlotTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown.*/public void testDrawWithNullInfo(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(35.0,""S1"",""C1"");dataset.addValue(45.0,""S1"",""C2"");dataset.addValue(55.0,""S1"",""C3"");dataset.addValue(15.0,""S1"",""C4"");dataset.addValue(25.0,""S1"",""C5"");SpiderWebPlot plot=new SpiderWebPlot(dataset);JFreeChart chart=new JFreeChart(plot);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){BarRenderer r1=new BarRenderer();BarRenderer r2=new BarRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setBase(0.123);assertFalse(r1.equals(r2));r2.setBase(0.123);assertTrue(r1.equals(r2));r1.setItemMargin(0.22);assertFalse(r1.equals(r2));r2.setItemMargin(0.22);assertTrue(r1.equals(r2));r1.setDrawBarOutline(!r1.isDrawBarOutline());assertFalse(r1.equals(r2));r2.setDrawBarOutline(!r2.isDrawBarOutline());assertTrue(r1.equals(r2));r1.setMaximumBarWidth(0.11);assertFalse(r1.equals(r2));r2.setMaximumBarWidth(0.11);assertTrue(r1.equals(r2));r1.setMinimumBarLength(0.04);assertFalse(r1.equals(r2));r2.setMinimumBarLength(0.04);assertTrue(r1.equals(r2));r1.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));assertFalse(r1.equals(r2));r2.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));assertTrue(r1.equals(r2));r1.setPositiveItemLabelPositionFallback(new ItemLabelPosition(ItemLabelAnchor.INSIDE1,TextAnchor.CENTER));assertFalse(r1.equals(r2));r2.setPositiveItemLabelPositionFallback(new ItemLabelPosition(ItemLabelAnchor.INSIDE1,TextAnchor.CENTER));assertTrue(r1.equals(r2));r1.setNegativeItemLabelPositionFallback(new ItemLabelPosition(ItemLabelAnchor.INSIDE1,TextAnchor.CENTER));assertFalse(r1.equals(r2));r2.setNegativeItemLabelPositionFallback(new ItemLabelPosition(ItemLabelAnchor.INSIDE1,TextAnchor.CENTER));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){BarRenderer r1=new BarRenderer();BarRenderer r2=new BarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BarRenderer r1=new BarRenderer();r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());BarRenderer r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BarRenderer r1=new BarRenderer();BarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(BarRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testEventNotification",0,"/** * Tests each setter method to ensure that it sends an event notification.*/public void testEventNotification(){RendererChangeDetector detector=new RendererChangeDetector();BarRenderer r1=new BarRenderer();r1.addChangeListener(detector);detector.setNotified(false);r1.setBasePaint(Color.red);assertTrue(detector.getNotified());}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testGetLegendItem",0,"/** * Some checks for the getLegendItem()method.*/public void testGetLegendItem(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(21.0,""R1"",""C1"");BarRenderer r=new BarRenderer();CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""x""),new NumberAxis(""y""),r);new JFreeChart(plot);LegendItem li=r.getLegendItem(0,0);assertNotNull(li);r.setSeriesVisibleInLegend(0,Boolean.FALSE);li=r.getLegendItem(0,0);assertNull(li);}"
"org.jfree.chart.renderer.category.junit.BarRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultCategoryDataset dataset0=new DefaultCategoryDataset();dataset0.addValue(21.0,""R1"",""C1"");dataset0.addValue(22.0,""R2"",""C1"");DefaultCategoryDataset dataset1=new DefaultCategoryDataset();dataset1.addValue(23.0,""R3"",""C1"");dataset1.addValue(24.0,""R4"",""C1"");dataset1.addValue(25.0,""R5"",""C1"");BarRenderer r=new BarRenderer();CategoryPlot plot=new CategoryPlot(dataset0,new CategoryAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,dataset1);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""R5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYStepRenderer r1=new XYStepRenderer();XYStepRenderer r2=new XYStepRenderer();assertEquals(r1,r2);r1.setStepPoint(0.44);assertFalse(r1.equals(r2));r2.setStepPoint(0.44);assertTrue(r1.equals(r2));r1.setBaseCreateEntities(false);assertFalse(r1.equals(r2));r2.setBaseCreateEntities(false);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYStepRenderer r1=new XYStepRenderer();r1.setStepPoint(0.123);XYStepRenderer r2=new XYStepRenderer();r2.setStepPoint(0.123);assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYStepRenderer r1=new XYStepRenderer();XYStepRenderer r2=null;try {r2=(XYStepRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYStepRenderer r1=new XYStepRenderer();r1.setStepPoint(0.123);XYStepRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYStepRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new XYStepRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.XYStepRendererTests.testDrawWithNullValue",0,"/** * Draws the chart with a <code>null</code> value in the dataset to make  sure that no exceptions are thrown.*/public void testDrawWithNullValue(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,null);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,null);s2.add(20.0,null);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new XYStepRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){StackedXYAreaRenderer r1=new StackedXYAreaRenderer();StackedXYAreaRenderer r2=new StackedXYAreaRenderer();assertEquals(r1,r2);assertEquals(r2,r1);r1.setShapePaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.green));assertFalse(r1.equals(r2));r2.setShapePaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.green));assertTrue(r1.equals(r2));Stroke s=new BasicStroke(1.23f);r1.setShapeStroke(s);assertFalse(r1.equals(r2));r2.setShapeStroke(s);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StackedXYAreaRenderer r1=new StackedXYAreaRenderer();StackedXYAreaRenderer r2=new StackedXYAreaRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StackedXYAreaRenderer r1=new StackedXYAreaRenderer();StackedXYAreaRenderer r2=null;try {r2=(StackedXYAreaRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StackedXYAreaRenderer r1=new StackedXYAreaRenderer();r1.setShapePaint(Color.red);r1.setShapeStroke(new BasicStroke(1.23f));StackedXYAreaRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StackedXYAreaRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testFindRangeBounds",0,"/** * Check that the renderer is calculating the range bounds correctly.*/public void testFindRangeBounds(){TableXYDataset dataset=RendererXYPackageTests.createTestTableXYDataset();JFreeChart chart=ChartFactory.createStackedXYAreaChart(""Test Chart"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();Range bounds=rangeAxis.getRange();assertTrue(bounds.contains(6.0));assertTrue(bounds.contains(8.0));}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new StackedXYAreaRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests.testBug1593156",0,"/** * A test for bug 1593156.*/public void testBug1593156(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);StackedXYAreaRenderer renderer=new StackedXYAreaRenderer(XYAreaRenderer.LINES);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),renderer);JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testFindDomainBounds",0,"/** * Some checks for the findDomainBounds()method.*/public void testFindDomainBounds(){AbstractXYItemRenderer renderer=new StandardXYItemRenderer();XYDataset dataset=createDataset1();Range r=renderer.findDomainBounds(dataset);assertEquals(1.0,r.getLowerBound(),EPSILON);assertEquals(3.0,r.getUpperBound(),EPSILON);assertTrue(renderer.findDomainBounds(null)== null);}"
"org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testFindRangeBounds",0,"/** * Some checks for the findRangeBounds()method.*/public void testFindRangeBounds(){AbstractXYItemRenderer renderer=new StandardXYItemRenderer();assertTrue(renderer.findRangeBounds(null)== null);}"
"org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testCloning_LegendItemLabelGenerator",0,"/** * Check that the legendItemLabelGenerator is cloned.*/public void testCloning_LegendItemLabelGenerator(){StandardXYSeriesLabelGenerator generator=new StandardXYSeriesLabelGenerator(""Series {0}"");XYBarRenderer r1=new XYBarRenderer();r1.setLegendItemLabelGenerator(generator);XYBarRenderer r2=null;try {r2=(XYBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(r1.getLegendItemLabelGenerator()!= r2.getLegendItemLabelGenerator());}"
"org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testCloning_LegendItemToolTipGenerator",0,"/** * Check that the legendItemToolTipGenerator is cloned.*/public void testCloning_LegendItemToolTipGenerator(){StandardXYSeriesLabelGenerator generator=new StandardXYSeriesLabelGenerator(""Series {0}"");XYBarRenderer r1=new XYBarRenderer();r1.setLegendItemToolTipGenerator(generator);XYBarRenderer r2=null;try {r2=(XYBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(r1.getLegendItemToolTipGenerator()!= r2.getLegendItemToolTipGenerator());}"
"org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testCloning_LegendItemURLGenerator",0,"/** * Check that the legendItemURLGenerator is cloned.*/public void testCloning_LegendItemURLGenerator(){StandardXYSeriesLabelGenerator generator=new StandardXYSeriesLabelGenerator(""Series {0}"");XYBarRenderer r1=new XYBarRenderer();r1.setLegendItemURLGenerator(generator);XYBarRenderer r2=null;try {r2=(XYBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(r1.getLegendItemURLGenerator()!= r2.getLegendItemURLGenerator());}"
"org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){XYBarRenderer r1=new XYBarRenderer();XYBarRenderer r2=new XYBarRenderer();assertTrue(r1.equals(r2));r1.addAnnotation(new XYTextAnnotation(""ABC"",1.0,2.0),Layer.BACKGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new XYTextAnnotation(""ABC"",1.0,2.0),Layer.BACKGROUND);assertTrue(r1.equals(r2));r1.addAnnotation(new XYTextAnnotation(""DEF"",3.0,4.0),Layer.FOREGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new XYTextAnnotation(""DEF"",3.0,4.0),Layer.FOREGROUND);assertTrue(r1.equals(r2));r1.setDefaultEntityRadius(99);assertFalse(r1.equals(r2));r2.setDefaultEntityRadius(99);assertTrue(r1.equals(r2));r1.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(""X:{0}""));assertFalse(r1.equals(r2));r2.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(""X:{0}""));assertTrue(r1.equals(r2));r1.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator(""X:{0}""));assertFalse(r1.equals(r2));r2.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator(""X:{0}""));assertTrue(r1.equals(r2));r1.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator(""X:{0}""));assertFalse(r1.equals(r2));r2.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator(""X:{0}""));assertTrue(r1.equals(r2));}"
"org.jfree.chart.junit.StrokeMapTests.testGetStroke",0,"/** * Some checks for the getStroke()method.*/public void testGetStroke(){StrokeMap m1=new StrokeMap();assertEquals(null,m1.getStroke(""A""));m1.put(""A"",new BasicStroke(1.1f));assertEquals(new BasicStroke(1.1f),m1.getStroke(""A""));m1.put(""A"",null);assertEquals(null,m1.getStroke(""A""));boolean pass=false;try {m1.getStroke(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.junit.StrokeMapTests.testPut",0,"/** * Some checks for the put()method.*/public void testPut(){StrokeMap m1=new StrokeMap();m1.put(""A"",new BasicStroke(1.1f));assertEquals(new BasicStroke(1.1f),m1.getStroke(""A""));boolean pass=false;try {m1.put(null,new BasicStroke(1.1f));}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.junit.StrokeMapTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){StrokeMap m1=new StrokeMap();StrokeMap m2=new StrokeMap();assertTrue(m1.equals(m1));assertTrue(m1.equals(m2));assertFalse(m1.equals(null));assertFalse(m1.equals(""ABC""));m1.put(""K1"",new BasicStroke(1.1f));assertFalse(m1.equals(m2));m2.put(""K1"",new BasicStroke(1.1f));assertTrue(m1.equals(m2));m1.put(""K2"",new BasicStroke(2.2f));assertFalse(m1.equals(m2));m2.put(""K2"",new BasicStroke(2.2f));assertTrue(m1.equals(m2));m1.put(""K2"",null);assertFalse(m1.equals(m2));m2.put(""K2"",null);assertTrue(m1.equals(m2));}"
"org.jfree.chart.junit.StrokeMapTests.testCloning",0,"/** * Some checks for cloning.*/public void testCloning(){StrokeMap m1=new StrokeMap();StrokeMap m2=null;try {m2=(StrokeMap)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1.equals(m2));m1.put(""K1"",new BasicStroke(1.1f));m1.put(""K2"",new BasicStroke(2.2f));try {m2=(StrokeMap)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1.equals(m2));}"
"org.jfree.chart.junit.StrokeMapTests.testSerialization1",0,"/** * A check for serialization.*/public void testSerialization1(){StrokeMap m1=new StrokeMap();StrokeMap m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(StrokeMap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(m1,m2);}"
"org.jfree.chart.junit.StrokeMapTests.testSerialization2",0,"/** * A check for serialization.*/public void testSerialization2(){StrokeMap m1=new StrokeMap();m1.put(""K1"",new BasicStroke(1.1f));m1.put(""K2"",new BasicStroke(2.2f));StrokeMap m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(StrokeMap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(m1,m2);}"
"org.jfree.data.time.ohlc.junit.OHLCTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){OHLC i1=new OHLC(2.0,4.0,1.0,3.0);OHLC i2=new OHLC(2.0,4.0,1.0,3.0);assertEquals(i1,i2);i1=new OHLC(2.2,4.0,1.0,3.0);assertFalse(i1.equals(i2));i2=new OHLC(2.2,4.0,1.0,3.0);assertTrue(i1.equals(i2));i1=new OHLC(2.2,4.4,1.0,3.0);assertFalse(i1.equals(i2));i2=new OHLC(2.2,4.4,1.0,3.0);assertTrue(i1.equals(i2));i1=new OHLC(2.2,4.4,1.1,3.0);assertFalse(i1.equals(i2));i2=new OHLC(2.2,4.4,1.1,3.0);assertTrue(i1.equals(i2));i1=new OHLC(2.2,4.4,1.1,3.3);assertFalse(i1.equals(i2));i2=new OHLC(2.2,4.4,1.1,3.3);assertTrue(i1.equals(i2));}"
"org.jfree.data.time.ohlc.junit.OHLCTests.testCloning",0,"/** * This class is immutable.*/public void testCloning(){OHLC i1=new OHLC(2.0,4.0,1.0,3.0);assertFalse(i1 instanceof Cloneable);}"
"org.jfree.data.time.ohlc.junit.OHLCTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){OHLC i1=new OHLC(2.0,4.0,1.0,3.0);OHLC i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(OHLC)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYDotRenderer r1=new XYDotRenderer();XYDotRenderer r2=new XYDotRenderer();assertEquals(r1,r2);r1.setDotWidth(11);assertFalse(r1.equals(r2));r2.setDotWidth(11);assertTrue(r1.equals(r2));r1.setDotHeight(12);assertFalse(r1.equals(r2));r2.setDotHeight(12);assertTrue(r1.equals(r2));r1.setLegendShape(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setLegendShape(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYDotRenderer r1=new XYDotRenderer();XYDotRenderer r2=new XYDotRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);r1.setDotHeight(12);r2.setDotHeight(12);assertTrue(r1.equals(r2));h1=r1.hashCode();h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYDotRenderer r1=new XYDotRenderer();XYDotRenderer r2=null;try {r2=(XYDotRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYDotRenderer r1=new XYDotRenderer();XYDotRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYDotRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYDotRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){XYSeriesCollection d1=new XYSeriesCollection();XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""S2"");s2.add(1.0,1.1);d1.addSeries(s1);d1.addSeries(s2);XYSeriesCollection d2=new XYSeriesCollection();XYSeries s3=new XYSeries(""S3"");s3.add(1.0,1.1);XYSeries s4=new XYSeries(""S4"");s4.add(1.0,1.1);XYSeries s5=new XYSeries(""S5"");s5.add(1.0,1.1);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);XYDotRenderer r=new XYDotRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.data.gantt.junit.TaskSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2=new TaskSeries(""S"");s2.add(new Task(""T1"",new Date(1),new Date(2)));s2.add(new Task(""T2"",new Date(11),new Date(22)));assertTrue(s1.equals(s2));assertTrue(s2.equals(s1));s1.add(new Task(""T3"",new Date(22),new Date(33)));assertFalse(s1.equals(s2));s2.add(new Task(""T3"",new Date(22),new Date(33)));assertTrue(s1.equals(s2));}"
"org.jfree.data.gantt.junit.TaskSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2=null;try {s2=(TaskSeries)s1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.gantt.junit.TaskSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));TaskSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(TaskSeries)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(s1,s2);}"
"org.jfree.data.gantt.junit.TaskSeriesTests.testGetTask",0,"/** * Some checks for the getTask()method.*/public void testGetTask(){TaskSeries s1=new TaskSeries(""S"");s1.add(new Task(""T1"",new Date(1),new Date(2)));s1.add(new Task(""T2"",new Date(11),new Date(22)));Task t1=s1.get(""T1"");assertTrue(t1.equals(new Task(""T1"",new Date(1),new Date(2))));Task t2=s1.get(""T2"");assertTrue(t2.equals(new Task(""T2"",new Date(11),new Date(22))));Task t3=s1.get(""T3"");assertTrue(t3 == null);}"
"org.jfree.chart.axis.junit.LogarithmicAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LogarithmicAxis a1=new LogarithmicAxis(""Test Axis"");LogarithmicAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(LogarithmicAxis)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.LogarithmicAxisTests.testAdjustedLog10",0,"/** * Test if adjustedLog10 and adjustedPow10 are inverses of each other */public void testAdjustedLog10(){checkLogPowRoundTrip(20);checkLogPowRoundTrip(10);checkLogPowRoundTrip(5);checkLogPowRoundTrip(2);checkLogPowRoundTrip(1);checkLogPowRoundTrip(0.5);checkLogPowRoundTrip(0.2);checkLogPowRoundTrip(0.0001);}"
"org.jfree.chart.axis.junit.LogarithmicAxisTests.testSwitchedLog10",0,"/** * Test if switchedLog10 and switchedPow10 are inverses of each other */public void testSwitchedLog10(){assertFalse(""Axis should not allow negative values"",this.axis.getAllowNegativesFlag());assertEquals(Math.log(0.5)/ LogarithmicAxis.LOG10_VALUE,this.axis.switchedLog10(0.5),EPSILON);checkSwitchedLogPowRoundTrip(20);checkSwitchedLogPowRoundTrip(10);checkSwitchedLogPowRoundTrip(5);checkSwitchedLogPowRoundTrip(2);checkSwitchedLogPowRoundTrip(1);checkSwitchedLogPowRoundTrip(0.5);checkSwitchedLogPowRoundTrip(0.2);checkSwitchedLogPowRoundTrip(0.0001);}"
"org.jfree.chart.axis.junit.LogarithmicAxisTests.testJava2DToValue",0,"/** * Test of java2DToValue method.*/public void testJava2DToValue(){Rectangle2D plotArea=new Rectangle2D.Double(22,33,500,500);RectangleEdge edge=RectangleEdge.BOTTOM;this.axis.setRange(10,20);checkPointsToValue(edge,plotArea);this.axis.setRange(0.5,10);checkPointsToValue(edge,plotArea);this.axis.setRange(0.2,20);checkPointsToValue(edge,plotArea);this.axis.setRange(0.2,0.7);checkPointsToValue(edge,plotArea);}"
"org.jfree.chart.axis.junit.LogarithmicAxisTests.testValueToJava2D",0,"/** * Test of valueToJava2D method.*/public void testValueToJava2D(){Rectangle2D plotArea=new Rectangle2D.Double(22,33,500,500);RectangleEdge edge=RectangleEdge.BOTTOM;this.axis.setRange(10,20);checkPointsToJava2D(edge,plotArea);this.axis.setRange(0.5,10);checkPointsToJava2D(edge,plotArea);this.axis.setRange(0.2,20);checkPointsToJava2D(edge,plotArea);this.axis.setRange(0.2,0.7);checkPointsToJava2D(edge,plotArea);}"
"org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CustomXYToolTipGenerator g1=new CustomXYToolTipGenerator();CustomXYToolTipGenerator g2=null;try {g2=(CustomXYToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){List t1=new java.util.ArrayList();t1.add(""Tooltip A1"");t1.add(""Tooltip A2"");t1.add(""Tooltip A3"");List t2=new java.util.ArrayList();t2.add(""Tooltip B1"");t2.add(""Tooltip B2"");t2.add(""Tooltip B3"");CustomXYToolTipGenerator g1=new CustomXYToolTipGenerator();g1.addToolTipSeries(t1);g1.addToolTipSeries(t2);CustomXYToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(CustomXYToolTipGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){StandardCategoryToolTipGenerator g1=new StandardCategoryToolTipGenerator();StandardCategoryToolTipGenerator g2=new StandardCategoryToolTipGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardCategoryToolTipGenerator(""{0}"",new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2=new StandardCategoryToolTipGenerator(""{0}"",new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));g1=new StandardCategoryToolTipGenerator(""{1}"",new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2=new StandardCategoryToolTipGenerator(""{1}"",new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));g1=new StandardCategoryToolTipGenerator(""{2}"",new SimpleDateFormat(""d-MMM""));assertFalse(g1.equals(g2));g2=new StandardCategoryToolTipGenerator(""{2}"",new SimpleDateFormat(""d-MMM""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardCategoryToolTipGenerator g1=new StandardCategoryToolTipGenerator();StandardCategoryToolTipGenerator g2=null;try {g2=(StandardCategoryToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardCategoryToolTipGenerator g1=new StandardCategoryToolTipGenerator(""{2}"",DateFormat.getInstance());StandardCategoryToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardCategoryToolTipGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests.testEquals1481087",0,"/** * A test for bug 1481087.*/public void testEquals1481087(){StandardCategoryToolTipGenerator g1=new StandardCategoryToolTipGenerator(""{0}"",new DecimalFormat(""0.00""));StandardCategoryItemLabelGenerator g2=new StandardCategoryItemLabelGenerator(""{0}"",new DecimalFormat(""0.00""));assertFalse(g1.equals(g2));}"
"org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo2",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo2(){boolean success=false;try {JFreeChart chart=createGanttChart();CategoryPlot plot=(CategoryPlot)chart.getPlot();plot.setDataset(createDataset());chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.GanttChartTests.testReplaceDataset",0,"/** * Replaces the chart's dataset and then checks that the new dataset is OK.*/public void testReplaceDataset(){LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(null);assertEquals(true,l.flag);}"
"org.jfree.chart.junit.GanttChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.GanttChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.plot.junit.PiePlot3DTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){PiePlot3D p1=new PiePlot3D();PiePlot3D p2=new PiePlot3D();assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1.setDepthFactor(1.23);assertFalse(p1.equals(p2));p2.setDepthFactor(1.23);assertTrue(p1.equals(p2));p1.setDarkerSides(true);assertFalse(p1.equals(p2));p2.setDarkerSides(true);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PiePlot3DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PiePlot3D p1=new PiePlot3D(null);PiePlot3D p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(PiePlot3D)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.PiePlot3DTests.testDrawWithNullDataset",0,"/** * Draws a pie chart where the label generator returns null.*/public void testDrawWithNullDataset(){JFreeChart chart=ChartFactory.createPieChart3D(""Test"",null,true,false,false);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testRemoveSubplot",0,"/** * This is a test to replicate the bug report 987080.*/public void testRemoveSubplot(){CombinedDomainCategoryPlot plot=new CombinedDomainCategoryPlot();CategoryPlot plot1=new CategoryPlot();CategoryPlot plot2=new CategoryPlot();plot.add(plot1);plot.add(plot2);plot.remove(plot2);List plots=plot.getSubplots();assertTrue(plots.get(0)== plot1);assertEquals(1,plots.size());}"
"org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){CombinedDomainCategoryPlot plot1=createPlot();CombinedDomainCategoryPlot plot2=createPlot();assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testCloning",0,"/** * Some checks for cloning.*/public void testCloning(){CombinedDomainCategoryPlot plot1=createPlot();CombinedDomainCategoryPlot plot2=null;try {plot2=(CombinedDomainCategoryPlot)plot1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(plot1 != plot2);assertTrue(plot1.getClass()== plot2.getClass());assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CombinedDomainCategoryPlot plot1=createPlot();CombinedDomainCategoryPlot plot2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(plot1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));plot2=(CombinedDomainCategoryPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(plot1,plot2);}"
"org.jfree.chart.urls.junit.StandardXYURLGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardXYURLGenerator g1=new StandardXYURLGenerator(""index.html?"");StandardXYURLGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardXYURLGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.data.xy.junit.DefaultXYZDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultXYZDataset d1=new DefaultXYZDataset();DefaultXYZDataset d2=new DefaultXYZDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[]z1=new double[]{7.0,8.0,9.0};double[][]data1=new double[][]{x1,y1,z1};double[]x2=new double[]{1.0,2.0,3.0};double[]y2=new double[]{4.0,5.0,6.0};double[]z2=new double[]{7.0,8.0,9.0};double[][]data2=new double[][]{x2,y2,z2};d1.addSeries(""S1"",data1);assertFalse(d1.equals(d2));d2.addSeries(""S1"",data2);assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultXYZDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultXYZDataset d1=new DefaultXYZDataset();DefaultXYZDataset d2=null;try {d2=(DefaultXYZDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[]z1=new double[]{7.0,8.0,9.0};double[][]data1=new double[][]{x1,y1,z1};d1.addSeries(""S1"",data1);try {d2=(DefaultXYZDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));x1[1]=2.2;assertFalse(d1.equals(d2));x1[1]=2.0;assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultXYZDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultXYZDataset d1=new DefaultXYZDataset();DefaultXYZDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultXYZDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[]z1=new double[]{7.0,8.0,9.0};double[][]data1=new double[][]{x1,y1,z1};d1.addSeries(""S1"",data1);try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultXYZDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.DefaultXYZDatasetTests.testGetSeriesKey",0,"/** * Some checks for the getSeriesKey(int)method.*/public void testGetSeriesKey(){DefaultXYZDataset d=createSampleDataset1();assertEquals(""S1"",d.getSeriesKey(0));assertEquals(""S2"",d.getSeriesKey(1));boolean pass=false;try {d.getSeriesKey(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d.getSeriesKey(2);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.DefaultXYZDatasetTests.testIndexOf",0,"/** * Some checks for the indexOf(Comparable)method.*/public void testIndexOf(){DefaultXYZDataset d=createSampleDataset1();assertEquals(0,d.indexOf(""S1""));assertEquals(1,d.indexOf(""S2""));assertEquals(-1,d.indexOf(""Green Eggs and Ham""));assertEquals(-1,d.indexOf(null));}"
"org.jfree.data.xy.junit.DefaultXYZDatasetTests.testAddSeries",0,"/** * Some tests for the addSeries()method.*/public void testAddSeries(){DefaultXYZDataset d=new DefaultXYZDataset();d.addSeries(""S1"",new double[][]{{1.0},{2.0},{3.0}});assertEquals(1,d.getSeriesCount());assertEquals(""S1"",d.getSeriesKey(0));d.addSeries(""S1"",new double[][]{{11.0},{12.0},{13.0}});assertEquals(1,d.getSeriesCount());assertEquals(12.0,d.getYValue(0,0),EPSILON);boolean pass=false;try {d.addSeries(null,new double[][]{{1.0},{2.0},{3.0}});}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMean_Array",0,"/** * Some checks for the calculateMean(Number[])and  calculateMean(Number[],boolean)methods.*/public void testCalculateMean_Array(){boolean pass=false;try {Statistics.calculateMean((Number[])null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {Statistics.calculateMean((Number[])null,false);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0])));assertTrue(Double.isNaN(Statistics.calculateMean(new Number[0],false)));Number[]values=new Number[]{new Double(1.0)};assertEquals(1.0,Statistics.calculateMean(values),EPSILON);assertEquals(1.0,Statistics.calculateMean(values,true),EPSILON);assertEquals(1.0,Statistics.calculateMean(values,false),EPSILON);values=new Number[]{new Double(1.0),null};assertTrue(Double.isNaN(Statistics.calculateMean(values)));assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));assertEquals(1.0,Statistics.calculateMean(values,false),EPSILON);values=new Number[]{new Double(1.0),new Double(Double.NaN)};assertTrue(Double.isNaN(Statistics.calculateMean(values)));assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));assertEquals(1.0,Statistics.calculateMean(values,false),EPSILON);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMean_Collection",0,"/** * Some checks for the calculateMean(Collection)and  calculateMean(Collection,boolean)methods.*/public void testCalculateMean_Collection(){boolean pass=false;try {Statistics.calculateMean((Collection)null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {Statistics.calculateMean((Collection)null,false);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);List values=new ArrayList();assertTrue(Double.isNaN(Statistics.calculateMean(values)));assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));assertTrue(Double.isNaN(Statistics.calculateMean(values,false)));values.add(new Double(9.0));assertEquals(9.0,Statistics.calculateMean(values),EPSILON);assertEquals(9.0,Statistics.calculateMean(values,true),EPSILON);assertEquals(9.0,Statistics.calculateMean(values,false),EPSILON);values.add(null);assertTrue(Double.isNaN(Statistics.calculateMean(values)));assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));assertEquals(9.0,Statistics.calculateMean(values,false),EPSILON);values.clear();values.add(new Double(9.0));values.add(new Double(Double.NaN));assertTrue(Double.isNaN(Statistics.calculateMean(values)));assertTrue(Double.isNaN(Statistics.calculateMean(values,true)));assertEquals(9.0,Statistics.calculateMean(values,false),EPSILON);values=new ArrayList();values.add(new Double(9.0));values.add(new Double(3.0));values.add(new Double(2.0));values.add(new Double(2.0));double mean=Statistics.calculateMean(values);assertEquals(4.0,mean,EPSILON);values.add(new Double(Double.NaN));assertTrue(Double.isNaN(Statistics.calculateMean(values)));}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian",0,"/** * Some checks for the calculateMedian(List,boolean)method.*/public void testCalculateMedian(){assertTrue(Double.isNaN(Statistics.calculateMedian(null,false)));assertTrue(Double.isNaN(Statistics.calculateMedian(null,true)));List list=new ArrayList();assertTrue(Double.isNaN(Statistics.calculateMedian(list,false)));assertTrue(Double.isNaN(Statistics.calculateMedian(list,true)));list.add(null);boolean pass=false;try {Statistics.calculateMedian(list,false);}catch(NullPointerException e){pass=true;}assertTrue(pass);pass=false;try {Statistics.calculateMedian(list,true);}catch(NullPointerException e){pass=true;}assertTrue(pass);list.clear();list.add(""Not a number"");pass=false;try {Statistics.calculateMedian(list,false);}catch(ClassCastException e){pass=true;}assertTrue(pass);pass=false;try {Statistics.calculateMedian(list,true);}catch(ClassCastException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian1",0,"/** * A test for the calculateMedian()method.*/public void testCalculateMedian1(){List values=new ArrayList();values.add(new Double(1.0));double median=Statistics.calculateMedian(values);assertEquals(1.0,median,0.0000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian2",0,"/** * A test for the calculateMedian()method.*/public void testCalculateMedian2(){List values=new ArrayList();values.add(new Double(2.0));values.add(new Double(1.0));double median=Statistics.calculateMedian(values);assertEquals(1.5,median,0.0000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian3",0,"/** * A test for the calculateMedian()method.*/public void testCalculateMedian3(){List values=new ArrayList();values.add(new Double(1.0));values.add(new Double(2.0));values.add(new Double(3.0));values.add(new Double(6.0));values.add(new Double(5.0));values.add(new Double(4.0));double median=Statistics.calculateMedian(values);assertEquals(3.5,median,0.0000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian4",0,"/** * A test for the calculateMedian()method.*/public void testCalculateMedian4(){List values=new ArrayList();values.add(new Double(7.0));values.add(new Double(2.0));values.add(new Double(3.0));values.add(new Double(5.0));values.add(new Double(4.0));values.add(new Double(6.0));values.add(new Double(1.0));double median=Statistics.calculateMedian(values);assertEquals(4.0,median,0.0000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian5",0,"/** * A test using some real data that caused a problem at one point.*/public void testCalculateMedian5(){List values=new ArrayList();values.add(new Double(11.228692993861783));values.add(new Double(11.30823353859889));values.add(new Double(11.75312904769314));values.add(new Double(11.825102897465314));values.add(new Double(10.184252778401783));values.add(new Double(12.207951828057766));values.add(new Double(10.68841994040566));values.add(new Double(12.099522004479438));values.add(new Double(11.508874945056881));values.add(new Double(12.052517729558513));values.add(new Double(12.401481645578734));values.add(new Double(12.185377793028543));values.add(new Double(10.666372951930315));values.add(new Double(11.680978041499548));values.add(new Double(11.06528277406718));values.add(new Double(11.36876492904596));values.add(new Double(11.927565516175939));values.add(new Double(11.39307785978655));values.add(new Double(11.989603679523857));values.add(new Double(12.009834360354864));values.add(new Double(10.653351822461559));values.add(new Double(11.851776254376754));values.add(new Double(11.045441544755946));values.add(new Double(11.993674040560624));values.add(new Double(12.898219965238944));values.add(new Double(11.97095782819647));values.add(new Double(11.73234406745488));values.add(new Double(11.649006017243991));values.add(new Double(12.20549704915365));values.add(new Double(11.799723639384919));values.add(new Double(11.896208658005628));values.add(new Double(12.164149111823424));values.add(new Double(12.042795103513766));values.add(new Double(12.114839532596426));values.add(new Double(12.166609097075824));values.add(new Double(12.183017546225935));values.add(new Double(11.622009125845342));values.add(new Double(11.289365786738633));values.add(new Double(12.462984323671568));values.add(new Double(11.573494921030598));values.add(new Double(10.862867940485804));values.add(new Double(12.018186939664872));values.add(new Double(10.418046849313018));values.add(new Double(11.326344465881341));double median=Statistics.calculateMedian(values,true);assertEquals(11.812413268425116,median,0.000001);Collections.sort(values);double median2=Statistics.calculateMedian(values,false);assertEquals(11.812413268425116,median2,0.000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCalculateMedian6",0,"/** * A test for the calculateMedian()method.*/public void testCalculateMedian6(){List values=new ArrayList();values.add(new Double(7.0));values.add(new Double(2.0));values.add(new Double(3.0));values.add(new Double(5.0));values.add(new Double(4.0));values.add(new Double(6.0));values.add(new Double(1.0));double median=Statistics.calculateMedian(values,0,2);assertEquals(3.0,median,0.0000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCorrelation1",0,"/** * A simple test for the correlation calculation.*/public void testCorrelation1(){Number[]data1=new Number[3];data1[0]=new Double(1);data1[1]=new Double(2);data1[2]=new Double(3);Number[]data2=new Number[3];data2[0]=new Double(1);data2[1]=new Double(2);data2[2]=new Double(3);double r=Statistics.getCorrelation(data1,data2);assertEquals(1.0,r,0.00000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testCorrelation2",0,"/** * A simple test for the correlation calculation. http://trochim.human.cornell.edu/kb/statcorr.htm*/public void testCorrelation2(){Number[]data1=new Number[20];data1[0]=new Double(68);data1[1]=new Double(71);data1[2]=new Double(62);data1[3]=new Double(75);data1[4]=new Double(58);data1[5]=new Double(60);data1[6]=new Double(67);data1[7]=new Double(68);data1[8]=new Double(71);data1[9]=new Double(69);data1[10]=new Double(68);data1[11]=new Double(67);data1[12]=new Double(63);data1[13]=new Double(62);data1[14]=new Double(60);data1[15]=new Double(63);data1[16]=new Double(65);data1[17]=new Double(67);data1[18]=new Double(63);data1[19]=new Double(61);Number[]data2=new Number[20];data2[0]=new Double(4.1);data2[1]=new Double(4.6);data2[2]=new Double(3.8);data2[3]=new Double(4.4);data2[4]=new Double(3.2);data2[5]=new Double(3.1);data2[6]=new Double(3.8);data2[7]=new Double(4.1);data2[8]=new Double(4.3);data2[9]=new Double(3.7);data2[10]=new Double(3.5);data2[11]=new Double(3.2);data2[12]=new Double(3.7);data2[13]=new Double(3.3);data2[14]=new Double(3.4);data2[15]=new Double(4.0);data2[16]=new Double(4.1);data2[17]=new Double(3.8);data2[18]=new Double(3.4);data2[19]=new Double(3.6);double r=Statistics.getCorrelation(data1,data2);assertEquals(0.7306356862792885,r,0.000000000001);}"
"org.jfree.data.statistics.junit.StatisticsTests.testGetStdDev",0,"/** * Some checks for the getStdDev()method.*/public void testGetStdDev(){boolean pass=false;try {Statistics.getStdDev(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {Statistics.getStdDev(new Double[0]);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);assertTrue(Double.isNaN(Statistics.getStdDev(new Double[]{new Double(1.0)})));}"
"org.jfree.chart.block.junit.GridArrangementTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){GridArrangement f1=new GridArrangement(11,22);GridArrangement f2=new GridArrangement(11,22);assertTrue(f1.equals(f2));assertTrue(f2.equals(f1));f1=new GridArrangement(33,22);assertFalse(f1.equals(f2));f2=new GridArrangement(33,22);assertTrue(f1.equals(f2));f1=new GridArrangement(33,44);assertFalse(f1.equals(f2));f2=new GridArrangement(33,44);assertTrue(f1.equals(f2));}"
"org.jfree.chart.block.junit.GridArrangementTests.testCloning",0,"/** * Immutable - cloning is not necessary.*/public void testCloning(){GridArrangement f1=new GridArrangement(1,2);assertFalse(f1 instanceof Cloneable);}"
"org.jfree.chart.block.junit.GridArrangementTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){GridArrangement f1=new GridArrangement(33,44);GridArrangement f2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(f1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));f2=(GridArrangement)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(f1,f2);}"
"org.jfree.chart.block.junit.GridArrangementTests.testNN",0,"/** * Test arrangement with no constraints.*/public void testNN(){BlockContainer c=createTestContainer1();Size2D s=c.arrange(null,RectangleConstraint.NONE);assertEquals(90.0,s.width,EPSILON);assertEquals(33.0,s.height,EPSILON);}"
"org.jfree.chart.block.junit.GridArrangementTests.testFN",0,"/** * Test arrangement with no constraints.*/public void testFN(){BlockContainer c=createTestContainer1();RectangleConstraint constraint=new RectangleConstraint(100.0,null,LengthConstraintType.FIXED,0.0,null,LengthConstraintType.NONE);Size2D s=c.arrange(null,constraint);assertEquals(100.0,s.width,EPSILON);assertEquals(33.0,s.height,EPSILON);}"
"org.jfree.data.junit.KeyedObjectTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){KeyedObject ko1=new KeyedObject(""Test"",""Object"");KeyedObject ko2=new KeyedObject(""Test"",""Object"");assertTrue(ko1.equals(ko2));assertTrue(ko2.equals(ko1));ko1=new KeyedObject(""Test 1"",""Object"");ko2=new KeyedObject(""Test 2"",""Object"");assertFalse(ko1.equals(ko2));ko1=new KeyedObject(""Test"",""Object 1"");ko2=new KeyedObject(""Test"",""Object 2"");assertFalse(ko1.equals(ko2));}"
"org.jfree.data.junit.KeyedObjectTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){KeyedObject ko1=new KeyedObject(""Test"",""Object"");KeyedObject ko2=null;try {ko2=(KeyedObject)ko1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(ko1 != ko2);assertTrue(ko1.getClass()== ko2.getClass());assertTrue(ko1.equals(ko2));}"
"org.jfree.data.junit.KeyedObjectTests.testCloning2",0,"/** * Confirm special features of cloning.*/public void testCloning2(){Object obj1=new ArrayList();KeyedObject ko1=new KeyedObject(""Test"",obj1);KeyedObject ko2=null;try {ko2=(KeyedObject)ko1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(ko1 != ko2);assertTrue(ko1.getClass()== ko2.getClass());assertTrue(ko1.equals(ko2));assertTrue(ko2.getObject()== obj1);obj1=new DefaultPieDataset();ko1=new KeyedObject(""Test"",obj1);ko2=null;try {ko2=(KeyedObject)ko1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(ko1 != ko2);assertTrue(ko1.getClass()== ko2.getClass());assertTrue(ko1.equals(ko2));assertTrue(ko2.getObject()!= obj1);}"
"org.jfree.data.junit.KeyedObjectTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){KeyedObject ko1=new KeyedObject(""Test"",""Object"");KeyedObject ko2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(ko1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));ko2=(KeyedObject)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(ko1,ko2);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYIntervalSeries s1=new XYIntervalSeries(""s1"");XYIntervalSeries s2=new XYIntervalSeries(""s1"");assertTrue(s1.equals(s2));s1=new XYIntervalSeries(""s2"");assertFalse(s1.equals(s2));s2=new XYIntervalSeries(""s2"");assertTrue(s1.equals(s2));s1=new XYIntervalSeries(""s2"",false,true);assertFalse(s1.equals(s2));s2=new XYIntervalSeries(""s2"",false,true);assertTrue(s1.equals(s2));s1=new XYIntervalSeries(""s2"",false,false);assertFalse(s1.equals(s2));s2=new XYIntervalSeries(""s2"",false,false);assertTrue(s1.equals(s2));s1.add(1.0,0.5,1.5,2.0,1.9,2.1);assertFalse(s1.equals(s2));s2.add(1.0,0.5,1.5,2.0,1.9,2.1);assertTrue(s2.equals(s1));s1.add(2.0,0.5,1.5,2.0,1.9,2.1);assertFalse(s1.equals(s2));s2.add(2.0,0.5,1.5,2.0,1.9,2.1);assertTrue(s2.equals(s1));s1.remove(new Double(1.0));assertFalse(s1.equals(s2));s2.remove(new Double(1.0));assertTrue(s2.equals(s1));}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYIntervalSeries s1=new XYIntervalSeries(""s1"");s1.add(1.0,0.5,1.5,2.0,1.9,2.01);XYIntervalSeries s2=null;try {s2=(XYIntervalSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYIntervalSeries s1=new XYIntervalSeries(""s1"");s1.add(1.0,0.5,1.5,2.0,1.9,2.1);XYIntervalSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(XYIntervalSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testIndexOf",0,"/** * Simple test for the indexOf()method.*/public void testIndexOf(){XYIntervalSeries s1=new XYIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0,1.9,2.1);s1.add(2.0,2.0,2.0,3.0,2.9,3.1);s1.add(3.0,3.0,3.0,4.0,3.9,4.1);assertEquals(0,s1.indexOf(new Double(1.0)));}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testIndexOf2",0,"/** * A check for the indexOf()method for an unsorted series.*/public void testIndexOf2(){XYIntervalSeries s1=new XYIntervalSeries(""Series 1"",false,true);s1.add(1.0,1.0,1.0,2.0,1.9,2.1);s1.add(3.0,3.0,3.0,3.0,2.9,3.1);s1.add(2.0,2.0,2.0,2.0,1.9,2.1);assertEquals(0,s1.indexOf(new Double(1.0)));assertEquals(1,s1.indexOf(new Double(3.0)));assertEquals(2,s1.indexOf(new Double(2.0)));}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testRemove",0,"/** * Simple test for the remove()method.*/public void testRemove(){XYIntervalSeries s1=new XYIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0,1.9,2.1);s1.add(2.0,2.0,2.0,2.0,1.9,2.1);s1.add(3.0,3.0,3.0,3.0,2.9,3.1);assertEquals(3,s1.getItemCount());s1.remove(new Double(2.0));assertEquals(new Double(3.0),s1.getX(1));s1.remove(new Double(1.0));assertEquals(new Double(3.0),s1.getX(0));}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testAdditionOfDuplicateXValues",0,"/** * When items are added with duplicate x-values,we expect them to remain  in the order they were added.*/public void testAdditionOfDuplicateXValues(){XYIntervalSeries s1=new XYIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,1.0,1.0,1.0);s1.add(2.0,2.0,2.0,2.0,2.0,2.0);s1.add(2.0,3.0,3.0,3.0,3.0,3.0);s1.add(2.0,4.0,4.0,4.0,4.0,4.0);s1.add(3.0,5.0,5.0,5.0,5.0,5.0);assertEquals(1.0,s1.getYValue(0),EPSILON);assertEquals(2.0,s1.getYValue(1),EPSILON);assertEquals(3.0,s1.getYValue(2),EPSILON);assertEquals(4.0,s1.getYValue(3),EPSILON);assertEquals(5.0,s1.getYValue(4),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testAdd",0,"/** * Some checks for the add()method for an UNSORTED series.*/public void testAdd(){XYIntervalSeries series=new XYIntervalSeries(""Series"",false,true);series.add(5.0,5.50,5.50,5.50,5.50,5.50);series.add(5.1,5.51,5.51,5.51,5.51,5.51);series.add(6.0,6.6,6.6,6.6,6.6,6.6);series.add(3.0,3.3,3.3,3.3,3.3,3.3);series.add(4.0,4.4,4.4,4.4,4.4,4.4);series.add(2.0,2.2,2.2,2.2,2.2,2.2);series.add(1.0,1.1,1.1,1.1,1.1,1.1);assertEquals(5.5,series.getYValue(0),EPSILON);assertEquals(5.51,series.getYValue(1),EPSILON);assertEquals(6.6,series.getYValue(2),EPSILON);assertEquals(3.3,series.getYValue(3),EPSILON);assertEquals(4.4,series.getYValue(4),EPSILON);assertEquals(2.2,series.getYValue(5),EPSILON);assertEquals(1.1,series.getYValue(6),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testSetMaximumItemCount",0,"/** * A simple check that the maximumItemCount attribute is working.*/public void testSetMaximumItemCount(){XYIntervalSeries s1=new XYIntervalSeries(""S1"");assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());s1.setMaximumItemCount(2);assertEquals(2,s1.getMaximumItemCount());s1.add(1.0,1.1,1.1,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3,3.3,3.3);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testSetMaximumItemCount2",0,"/** * Check that the maximum item count can be applied retrospectively.*/public void testSetMaximumItemCount2(){XYIntervalSeries s1=new XYIntervalSeries(""S1"");s1.add(1.0,1.1,1.1,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3,2.2,2.2);s1.setMaximumItemCount(2);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testValues",0,"/** * Some checks for the new accessor methods added in 1.0.5.*/public void testValues(){XYIntervalSeries s1=new XYIntervalSeries(""S1"");s1.add(2.0,1.0,3.0,5.0,4.0,6.0);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(1.0,s1.getXLowValue(0),EPSILON);assertEquals(3.0,s1.getXHighValue(0),EPSILON);assertEquals(5.0,s1.getYValue(0),EPSILON);assertEquals(4.0,s1.getYLowValue(0),EPSILON);assertEquals(6.0,s1.getYHighValue(0),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalSeriesTests.testClear",0,"/** * Some checks for the clear()method.*/public void testClear(){XYIntervalSeries s1=new XYIntervalSeries(""S1"");s1.addChangeListener(this);s1.clear();assertNull(this.lastEvent);assertTrue(s1.isEmpty());s1.add(1.0,2.0,3.0,4.0,5.0,6.0);assertFalse(s1.isEmpty());s1.clear();assertNotNull(this.lastEvent);assertTrue(s1.isEmpty());}"
"org.jfree.chart.plot.junit.MeterPlotTests.testEquals",0,"/** * Test the equals method to ensure that it can distinguish the required  fields.  Note that the dataset is NOT considered in the equals test.*/public void testEquals(){MeterPlot plot1=new MeterPlot();MeterPlot plot2=new MeterPlot();assertTrue(plot1.equals(plot2));plot1.setUnits(""mph"");assertFalse(plot1.equals(plot2));plot2.setUnits(""mph"");assertTrue(plot1.equals(plot2));plot1.setRange(new Range(50.0,70.0));assertFalse(plot1.equals(plot2));plot2.setRange(new Range(50.0,70.0));assertTrue(plot1.equals(plot2));plot1.addInterval(new MeterInterval(""Normal"",new Range(55.0,60.0)));assertFalse(plot1.equals(plot2));plot2.addInterval(new MeterInterval(""Normal"",new Range(55.0,60.0)));assertTrue(plot1.equals(plot2));plot1.setDialOutlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setDialOutlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setDialShape(DialShape.CHORD);assertFalse(plot1.equals(plot2));plot2.setDialShape(DialShape.CHORD);assertTrue(plot1.equals(plot2));plot1.setDialBackgroundPaint(new GradientPaint(9.0f,8.0f,Color.red,7.0f,6.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setDialBackgroundPaint(new GradientPaint(9.0f,8.0f,Color.red,7.0f,6.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setDialOutlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertFalse(plot1.equals(plot2));plot2.setDialOutlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertTrue(plot1.equals(plot2));plot1.setNeedlePaint(new GradientPaint(9.0f,8.0f,Color.red,7.0f,6.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setNeedlePaint(new GradientPaint(9.0f,8.0f,Color.red,7.0f,6.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setValueFont(new Font(""Serif"",Font.PLAIN,6));assertFalse(plot1.equals(plot2));plot2.setValueFont(new Font(""Serif"",Font.PLAIN,6));assertTrue(plot1.equals(plot2));plot1.setValuePaint(new GradientPaint(1.0f,2.0f,Color.black,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setValuePaint(new GradientPaint(1.0f,2.0f,Color.black,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setTickLabelsVisible(false);assertFalse(plot1.equals(plot2));plot2.setTickLabelsVisible(false);assertTrue(plot1.equals(plot2));plot1.setTickLabelFont(new Font(""Serif"",Font.PLAIN,6));assertFalse(plot1.equals(plot2));plot2.setTickLabelFont(new Font(""Serif"",Font.PLAIN,6));assertTrue(plot1.equals(plot2));plot1.setTickLabelPaint(Color.red);assertFalse(plot1.equals(plot2));plot2.setTickLabelPaint(Color.red);assertTrue(plot1.equals(plot2));plot1.setTickLabelFormat(new DecimalFormat(""0""));assertFalse(plot1.equals(plot2));plot2.setTickLabelFormat(new DecimalFormat(""0""));assertTrue(plot1.equals(plot2));plot1.setTickPaint(Color.green);assertFalse(plot1.equals(plot2));plot2.setTickPaint(Color.green);assertTrue(plot1.equals(plot2));plot1.setTickSize(1.23);assertFalse(plot1.equals(plot2));plot2.setTickSize(1.23);assertTrue(plot1.equals(plot2));plot1.setDrawBorder(!plot1.getDrawBorder());assertFalse(plot1.equals(plot2));plot2.setDrawBorder(plot1.getDrawBorder());assertTrue(plot1.equals(plot2));plot1.setMeterAngle(22);assertFalse(plot1.equals(plot2));plot2.setMeterAngle(22);assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.MeterPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){MeterPlot p1=new MeterPlot();MeterPlot p2=null;try {p2=(MeterPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));assertTrue(p1.getDataset()== p2.getDataset());p1.getTickLabelFormat().setMinimumIntegerDigits(99);assertFalse(p1.equals(p2));p2.getTickLabelFormat().setMinimumIntegerDigits(99);assertTrue(p1.equals(p2));p1.addInterval(new MeterInterval(""Test"",new Range(1.234,5.678)));assertFalse(p1.equals(p2));p2.addInterval(new MeterInterval(""Test"",new Range(1.234,5.678)));assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.MeterPlotTests.testSerialization1",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization1(){MeterPlot p1=new MeterPlot(null);p1.setDialBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));p1.setDialOutlinePaint(new GradientPaint(4.0f,3.0f,Color.red,2.0f,1.0f,Color.blue));p1.setNeedlePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));p1.setTickLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));p1.setTickPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));MeterPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(MeterPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.MeterPlotTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){MeterPlot p1=new MeterPlot(new DefaultValueDataset(1.23));MeterPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(MeterPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Stroke stroke1=new BasicStroke(2.0f);Stroke stroke2=new BasicStroke(2.5f);XYPolygonAnnotation a1=new XYPolygonAnnotation(new double[]{1.0,2.0,3.0,4.0,5.0,6.0},stroke1,Color.red,Color.blue);XYPolygonAnnotation a2=new XYPolygonAnnotation(new double[]{1.0,2.0,3.0,4.0,5.0,6.0},stroke1,Color.red,Color.blue);assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke1,Color.red,Color.blue);assertFalse(a1.equals(a2));a2=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke1,Color.red,Color.blue);assertTrue(a1.equals(a2));a1=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke2,Color.red,Color.blue);assertFalse(a1.equals(a2));a2=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke2,Color.red,Color.blue);assertTrue(a1.equals(a2));GradientPaint gp1=new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.white);GradientPaint gp2=new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.white);a1=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke2,gp1,Color.blue);assertFalse(a1.equals(a2));a2=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke2,gp2,Color.blue);assertTrue(a1.equals(a2));GradientPaint gp3=new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.white);GradientPaint gp4=new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.white);a1=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke2,gp1,gp3);assertFalse(a1.equals(a2));a2=new XYPolygonAnnotation(new double[]{99.0,2.0,3.0,4.0,5.0,6.0},stroke2,gp2,gp4);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Stroke stroke=new BasicStroke(2.0f);XYPolygonAnnotation a1=new XYPolygonAnnotation(new double[]{1.0,2.0,3.0,4.0,5.0,6.0},stroke,Color.red,Color.blue);XYPolygonAnnotation a2=new XYPolygonAnnotation(new double[]{1.0,2.0,3.0,4.0,5.0,6.0},stroke,Color.red,Color.blue);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){Stroke stroke1=new BasicStroke(2.0f);XYPolygonAnnotation a1=new XYPolygonAnnotation(new double[]{1.0,2.0,3.0,4.0,5.0,6.0},stroke1,Color.red,Color.blue);XYPolygonAnnotation a2=null;try {a2=(XYPolygonAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYPolygonAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Stroke stroke1=new BasicStroke(2.0f);XYPolygonAnnotation a1=new XYPolygonAnnotation(new double[]{1.0,2.0,3.0,4.0,5.0,6.0},stroke1,Color.red,Color.blue);XYPolygonAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYPolygonAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.block.junit.LabelBlockTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){LabelBlock b1=new LabelBlock(""ABC"",new Font(""Dialog"",Font.PLAIN,12),Color.red);LabelBlock b2=new LabelBlock(""ABC"",new Font(""Dialog"",Font.PLAIN,12),Color.red);assertTrue(b1.equals(b2));assertTrue(b2.equals(b2));b1=new LabelBlock(""XYZ"",new Font(""Dialog"",Font.PLAIN,12),Color.red);assertFalse(b1.equals(b2));b2=new LabelBlock(""XYZ"",new Font(""Dialog"",Font.PLAIN,12),Color.red);assertTrue(b1.equals(b2));b1=new LabelBlock(""XYZ"",new Font(""Dialog"",Font.BOLD,12),Color.red);assertFalse(b1.equals(b2));b2=new LabelBlock(""XYZ"",new Font(""Dialog"",Font.BOLD,12),Color.red);assertTrue(b1.equals(b2));b1=new LabelBlock(""XYZ"",new Font(""Dialog"",Font.BOLD,12),Color.blue);assertFalse(b1.equals(b2));b2=new LabelBlock(""XYZ"",new Font(""Dialog"",Font.BOLD,12),Color.blue);assertTrue(b1.equals(b2));b1.setToolTipText(""Tooltip"");assertFalse(b1.equals(b2));b2.setToolTipText(""Tooltip"");assertTrue(b1.equals(b2));b1.setURLText(""URL"");assertFalse(b1.equals(b2));b2.setURLText(""URL"");assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.LabelBlockTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LabelBlock b1=new LabelBlock(""ABC"",new Font(""Dialog"",Font.PLAIN,12),Color.red);LabelBlock b2=null;try {b2=(LabelBlock)b1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.LabelBlockTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){GradientPaint gp=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue);LabelBlock b1=new LabelBlock(""ABC"",new Font(""Dialog"",Font.PLAIN,12),gp);LabelBlock b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(LabelBlock)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(b1,b2);}"
"org.jfree.data.xy.junit.VectorDataItemTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);VectorDataItem v2=new VectorDataItem(1.0,2.0,3.0,4.0);assertTrue(v1.equals(v2));assertTrue(v2.equals(v1));v1=new VectorDataItem(1.1,2.0,3.0,4.0);assertFalse(v1.equals(v2));v2=new VectorDataItem(1.1,2.0,3.0,4.0);assertTrue(v1.equals(v2));v1=new VectorDataItem(1.1,2.2,3.0,4.0);assertFalse(v1.equals(v2));v2=new VectorDataItem(1.1,2.2,3.0,4.0);assertTrue(v1.equals(v2));v1=new VectorDataItem(1.1,2.2,3.3,4.0);assertFalse(v1.equals(v2));v2=new VectorDataItem(1.1,2.2,3.3,4.0);assertTrue(v1.equals(v2));v1=new VectorDataItem(1.1,2.2,3.3,4.4);assertFalse(v1.equals(v2));v2=new VectorDataItem(1.1,2.2,3.3,4.4);assertTrue(v1.equals(v2));}"
"org.jfree.data.xy.junit.VectorDataItemTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);VectorDataItem v2=new VectorDataItem(1.0,2.0,3.0,4.0);assertTrue(v1.equals(v2));int h1=v1.hashCode();int h2=v2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.xy.junit.VectorDataItemTests.testCloning",0,"/** * Check cloning.*/public void testCloning(){VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);VectorDataItem v2=null;try {v2=(VectorDataItem)v1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(v1 != v2);assertTrue(v1.getClass()== v2.getClass());assertTrue(v1.equals(v2));}"
"org.jfree.data.xy.junit.VectorDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){VectorDataItem v1=new VectorDataItem(1.0,2.0,3.0,4.0);VectorDataItem v2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(v1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));v2=(VectorDataItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(v1,v2);}"
"org.jfree.chart.needle.junit.MiddlePinNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){MiddlePinNeedle n1=new MiddlePinNeedle();MiddlePinNeedle n2=new MiddlePinNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.MiddlePinNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){MiddlePinNeedle n1=new MiddlePinNeedle();MiddlePinNeedle n2=null;try {n2=(MiddlePinNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.MiddlePinNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MiddlePinNeedle n1=new MiddlePinNeedle();MiddlePinNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(MiddlePinNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYSeries s1=new XYSeries(""Series"");s1.add(1.0,1.1);XYSeriesCollection c1=new XYSeriesCollection();c1.addSeries(s1);XYSeries s2=new XYSeries(""Series"");s2.add(1.0,1.1);XYSeriesCollection c2=new XYSeriesCollection();c2.addSeries(s2);assertTrue(c1.equals(c2));assertTrue(c2.equals(c1));c1.addSeries(new XYSeries(""Empty Series""));assertFalse(c1.equals(c2));c2.addSeries(new XYSeries(""Empty Series""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYSeries s1=new XYSeries(""Series"");s1.add(1.0,1.1);XYSeriesCollection c1=new XYSeriesCollection();c1.addSeries(s1);XYSeriesCollection c2=null;try {c2=(XYSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));s1.setDescription(""XYZ"");assertFalse(c1.equals(c2));}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYSeries s1=new XYSeries(""Series"");s1.add(1.0,1.1);XYSeriesCollection c1=new XYSeriesCollection();c1.addSeries(s1);XYSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(XYSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.test1170825",0,"/** * A test for bug report 1170825.*/public void test1170825(){XYSeries s1=new XYSeries(""Series1"");XYSeriesCollection dataset=new XYSeriesCollection();dataset.addSeries(s1);try {dataset.getSeries(1);}catch(IllegalArgumentException e){}catch(IndexOutOfBoundsException e){assertTrue(false);}}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testGetSeries",0,"/** * Some basic checks for the getSeries()method.*/public void testGetSeries(){XYSeriesCollection c=new XYSeriesCollection();XYSeries s1=new XYSeries(""s1"");c.addSeries(s1);assertEquals(""s1"",c.getSeries(0).getKey());boolean pass=false;try {c.getSeries(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {c.getSeries(1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testGetSeriesByKey",0,"/** * Some checks for the getSeries(Comparable)method.*/public void testGetSeriesByKey(){XYSeriesCollection c=new XYSeriesCollection();XYSeries s1=new XYSeries(""s1"");c.addSeries(s1);assertEquals(""s1"",c.getSeries(""s1"").getKey());boolean pass=false;try {c.getSeries(""s2"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {c.getSeries(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testRemoveSeries",0,"/** * Some basic checks for the removeSeries()method.*/public void testRemoveSeries(){XYSeriesCollection c=new XYSeriesCollection();XYSeries s1=new XYSeries(""s1"");c.addSeries(s1);c.removeSeries(0);assertEquals(0,c.getSeriesCount());c.addSeries(s1);boolean pass=false;try {c.removeSeries(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {c.removeSeries(1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.XYSeriesCollectionTests.testIndexOf",0,"/** * Some tests for the indexOf()method.*/public void testIndexOf(){XYSeries s1=new XYSeries(""S1"");XYSeries s2=new XYSeries(""S2"");XYSeriesCollection dataset=new XYSeriesCollection();assertEquals(-1,dataset.indexOf(s1));assertEquals(-1,dataset.indexOf(s2));dataset.addSeries(s1);assertEquals(0,dataset.indexOf(s1));assertEquals(-1,dataset.indexOf(s2));dataset.addSeries(s2);assertEquals(0,dataset.indexOf(s1));assertEquals(1,dataset.indexOf(s2));dataset.removeSeries(s1);assertEquals(-1,dataset.indexOf(s1));assertEquals(0,dataset.indexOf(s2));XYSeries s2b=new XYSeries(""S2"");assertEquals(0,dataset.indexOf(s2b));}"
"org.jfree.chart.title.junit.DateTitleTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){DateTitle t1=new DateTitle();DateTitle t2=new DateTitle();assertEquals(t1,t2);t1.setText(""Test 1"");assertFalse(t1.equals(t2));t2.setText(""Test 1"");assertTrue(t1.equals(t2));Font f=new Font(""SansSerif"",Font.PLAIN,15);t1.setFont(f);assertFalse(t1.equals(t2));t2.setFont(f);assertTrue(t1.equals(t2));t1.setPaint(Color.blue);assertFalse(t1.equals(t2));t2.setPaint(Color.blue);assertTrue(t1.equals(t2));t1.setBackgroundPaint(Color.blue);assertFalse(t1.equals(t2));t2.setBackgroundPaint(Color.blue);assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.DateTitleTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){DateTitle t1=new DateTitle();DateTitle t2=new DateTitle();assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.DateTitleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DateTitle t1=new DateTitle();DateTitle t2=null;try {t2=(DateTitle)t1.clone();}catch(CloneNotSupportedException e){System.err.println(""DateTitleTests.testCloning: failed to clone."");}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.DateTitleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DateTitle t1=new DateTitle();DateTitle t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(DateTitle)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeBounds",0,"/** * Some checks for the getRangeBounds()method.*/public void testGetRangeBounds(){DefaultStatisticalCategoryDataset d=new DefaultStatisticalCategoryDataset();assertNull(d.getRangeBounds(true));d.add(4.5,1.0,""R1"",""C1"");assertEquals(new Range(4.5,4.5),d.getRangeBounds(false));assertEquals(new Range(3.5,5.5),d.getRangeBounds(true));d.add(0.5,2.0,""R1"",""C2"");assertEquals(new Range(0.5,4.5),d.getRangeBounds(false));assertEquals(new Range(-1.5,5.5),d.getRangeBounds(true));d.add(Double.NaN,0.0,""R1"",""C3"");assertEquals(new Range(0.5,4.5),d.getRangeBounds(false));assertEquals(new Range(-1.5,5.5),d.getRangeBounds(true));d.add(Double.NEGATIVE_INFINITY,0.0,""R1"",""C3"");assertEquals(new Range(Double.NEGATIVE_INFINITY,4.5),d.getRangeBounds(false));assertEquals(new Range(Double.NEGATIVE_INFINITY,5.5),d.getRangeBounds(true));d.add(Double.POSITIVE_INFINITY,0.0,""R1"",""C3"");assertEquals(new Range(0.5,Double.POSITIVE_INFINITY),d.getRangeBounds(false));assertEquals(new Range(-1.5,Double.POSITIVE_INFINITY),d.getRangeBounds(true));}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();DefaultStatisticalCategoryDataset d2=new DefaultStatisticalCategoryDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testCloning",0,"/** * Some checks for cloning.*/public void testCloning(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.1,2.2,""R1"",""C1"");d1.add(3.3,4.4,""R1"",""C2"");d1.add(null,new Double(5.5),""R1"",""C3"");d1.add(new Double(6.6),null,""R2"",""C3"");DefaultStatisticalCategoryDataset d2=null;try {d2=(DefaultStatisticalCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){fail(e.toString());}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1.add(1.1,2.2,""R3"",""C1"");assertFalse(d1.equals(d2));}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testSerialization1",0,"/** * Check serialization of a default instance.*/public void testSerialization1(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.1,2.2,""R1"",""C1"");d1.add(3.3,4.4,""R1"",""C2"");d1.add(null,new Double(5.5),""R1"",""C3"");d1.add(new Double(6.6),null,""R2"",""C3"");DefaultStatisticalCategoryDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultStatisticalCategoryDataset)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testSerialization2",0,"/** * Check serialization of a more complex instance.*/public void testSerialization2(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.2,3.4,""Row 1"",""Column 1"");DefaultStatisticalCategoryDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultStatisticalCategoryDataset)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testAdd",0,"/** * Some checks for the add()method.*/public void testAdd(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.0,2.0,""R1"",""C1"");assertEquals(1.0,d1.getValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(2.0,d1.getStdDevValue(""R1"",""C1"").doubleValue(),EPSILON);d1.add(10.0,20.0,""R1"",""C1"");assertEquals(10.0,d1.getValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(20.0,d1.getStdDevValue(""R1"",""C1"").doubleValue(),EPSILON);}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeLowerBound",0,"/** * Some checks for the getRangeLowerBound()method.*/public void testGetRangeLowerBound(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.0,2.0,""R1"",""C1"");assertEquals(1.0,d1.getRangeLowerBound(false),EPSILON);assertEquals(-1.0,d1.getRangeLowerBound(true),EPSILON);}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeUpperBound",0,"/** * Some checks for the getRangeUpperBound()method.*/public void testGetRangeUpperBound(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.0,2.0,""R1"",""C1"");assertEquals(1.0,d1.getRangeUpperBound(false),EPSILON);assertEquals(3.0,d1.getRangeUpperBound(true),EPSILON);}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testGetRangeBounds2",0,"/** * Some checks for the getRangeBounds()method.*/public void testGetRangeBounds2(){DefaultStatisticalCategoryDataset d1=new DefaultStatisticalCategoryDataset();d1.add(1.0,2.0,""R1"",""C1"");assertEquals(new Range(1.0,1.0),d1.getRangeBounds(false));assertEquals(new Range(-1.0,3.0),d1.getRangeBounds(true));d1.add(10.0,20.0,""R1"",""C1"");assertEquals(new Range(10.0,10.0),d1.getRangeBounds(false));assertEquals(new Range(-10.0,30.0),d1.getRangeBounds(true));}"
"org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests.testRemove",0,"/** * Some checks for the remove method.*/public void testRemove(){DefaultStatisticalCategoryDataset data=new DefaultStatisticalCategoryDataset();boolean pass=false;try {data.remove(""R1"",""R2"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);data.add(1.0,0.5,""R1"",""C1"");assertEquals(new Range(1.0,1.0),data.getRangeBounds(false));assertEquals(new Range(0.5,1.5),data.getRangeBounds(true));data.add(1.4,0.2,""R2"",""C1"");assertEquals(1.0,data.getRangeLowerBound(false),EPSILON);assertEquals(1.4,data.getRangeUpperBound(false),EPSILON);assertEquals(0.5,data.getRangeLowerBound(true),EPSILON);assertEquals(1.6,data.getRangeUpperBound(true),EPSILON);data.remove(""R1"",""C1"");assertEquals(1.4,data.getRangeLowerBound(false),EPSILON);assertEquals(1.4,data.getRangeUpperBound(false),EPSILON);assertEquals(1.2,data.getRangeLowerBound(true),EPSILON);assertEquals(1.6,data.getRangeUpperBound(true),EPSILON);}"
"org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.testEquals",0,"/** * Confirm that the equals()method distinguishes the known values.*/public void testEquals(){assertEquals(CategoryLabelWidthType.CATEGORY,CategoryLabelWidthType.CATEGORY);assertEquals(CategoryLabelWidthType.RANGE,CategoryLabelWidthType.RANGE);}"
"org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CategoryLabelWidthType a1=CategoryLabelWidthType.CATEGORY;CategoryLabelWidthType a2=CategoryLabelWidthType.CATEGORY;assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryLabelWidthType w1=CategoryLabelWidthType.RANGE;CategoryLabelWidthType w2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(w1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));w2=(CategoryLabelWidthType)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(w1,w2);assertTrue(w1 == w2);}"
"org.jfree.data.time.junit.MinuteTests.testEqualsSelf",0,"/** * Check that a Minute instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Minute minute=new Minute();assertTrue(minute.equals(minute));}"
"org.jfree.data.time.junit.MinuteTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Day day1=new Day(29,MonthConstants.MARCH,2002);Hour hour1=new Hour(15,day1);Minute minute1=new Minute(15,hour1);Day day2=new Day(29,MonthConstants.MARCH,2002);Hour hour2=new Hour(15,day2);Minute minute2=new Minute(15,hour2);assertTrue(minute1.equals(minute2));}"
"org.jfree.data.time.junit.MinuteTests.testDateConstructor1",0,"/** * In GMT,the 4.55pm on 21 Mar 2002 is java.util.Date(1016729700000L). Use this to check the Minute constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Minute m1=new Minute(new Date(1016729699999L),zone);Minute m2=new Minute(new Date(1016729700000L),zone);assertEquals(54,m1.getMinute());assertEquals(1016729699999L,m1.getLastMillisecond(c));assertEquals(55,m2.getMinute());assertEquals(1016729700000L,m2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.MinuteTests.testDateConstructor2",0,"/** * In Singapore,the 4.55pm on 21 Mar 2002 is  java.util.Date(1,014,281,700,000L). Use this to check the Minute  constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""Asia/Singapore"");Calendar c=new GregorianCalendar(zone);Minute m1=new Minute(new Date(1016700899999L),zone);Minute m2=new Minute(new Date(1016700900000L),zone);assertEquals(54,m1.getMinute());assertEquals(1016700899999L,m1.getLastMillisecond(c));assertEquals(55,m2.getMinute());assertEquals(1016700900000L,m2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.MinuteTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Minute m1=new Minute();Minute m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(Minute)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(m1,m2);}"
"org.jfree.data.time.junit.MinuteTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Minute m1=new Minute(45,5,1,2,2003);Minute m2=new Minute(45,5,1,2,2003);assertTrue(m1.equals(m2));int h1=m1.hashCode();int h2=m2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.MinuteTests.testNotCloneable",0,"/** * The  {@link Minute}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Minute m=new Minute(45,5,1,2,2003);assertFalse(m instanceof Cloneable);}"
"org.jfree.data.time.junit.MinuteTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Minute m=new Minute(43,15,1,4,2006);assertEquals(1143902580000L,m.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MinuteTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Minute m=new Minute(59,15,1,4,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-623289660000L,m.getFirstMillisecond(c));boolean pass=false;try {m.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MinuteTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Minute m=new Minute(40,2,15,4,2000);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(955766400000L,m.getFirstMillisecond(calendar));boolean pass=false;try {m.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MinuteTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Minute m=new Minute(1,1,1,1,1970);assertEquals(119999L,m.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MinuteTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Minute m=new Minute(1,2,7,7,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-614962680001L,m.getLastMillisecond(c));boolean pass=false;try {m.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MinuteTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Minute m=new Minute(45,21,21,4,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(987889559999L,m.getLastMillisecond(calendar));boolean pass=false;try {m.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MinuteTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Minute m=new Minute(1,1,1,1,2000);assertEquals(52597501L,m.getSerialIndex());m=new Minute(1,1,1,1,1900);assertEquals(2941L,m.getSerialIndex());}"
"org.jfree.data.time.junit.MinuteTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Minute m=new Minute(30,1,12,12,2000);m=(Minute)m.next();assertEquals(2000,m.getHour().getYear());assertEquals(12,m.getHour().getMonth());assertEquals(12,m.getHour().getDayOfMonth());assertEquals(1,m.getHour().getHour());assertEquals(31,m.getMinute());m=new Minute(59,23,31,12,9999);assertNull(m.next());}"
"org.jfree.data.time.junit.MinuteTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/Rome""));Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,47,0);cal.set(Calendar.MILLISECOND,0);Minute m=new Minute(47,3,16,1,2006);assertEquals(cal.getTime(),m.getStart());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MinuteTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/Rome""));Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,47,59);cal.set(Calendar.MILLISECOND,999);Minute m=new Minute(47,3,16,1,2006);assertEquals(cal.getTime(),m.getEnd());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MinuteTests.test1611872",0,"/** * Test for bug 1611872 - previous()fails for first minute in hour.*/public void test1611872(){Minute m1=new Minute(0,10,15,4,2000);Minute m2=(Minute)m1.previous();assertEquals(m2,new Minute(59,9,15,4,2000));}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialPointer i1=new DialPointer.Pin(1);DialPointer i2=new DialPointer.Pin(1);assertTrue(i1.equals(i2));i1=new DialPointer.Pin(2);assertFalse(i1.equals(i2));i2=new DialPointer.Pin(2);assertTrue(i1.equals(i2));i1.setVisible(false);assertFalse(i1.equals(i2));i2.setVisible(false);assertTrue(i1.equals(i2));}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testEqualsPin",0,"/** * Check the equals()method for the DialPointer.Pin class.*/public void testEqualsPin(){DialPointer.Pin p1=new DialPointer.Pin();DialPointer.Pin p2=new DialPointer.Pin();assertEquals(p1,p2);p1.setPaint(Color.green);assertFalse(p1.equals(p2));p2.setPaint(Color.green);assertTrue(p1.equals(p2));BasicStroke s=new BasicStroke(4.4f);p1.setStroke(s);assertFalse(p1.equals(p2));p2.setStroke(s);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testEqualsPointer",0,"/** * Check the equals()method for the DialPointer.Pointer class.*/public void testEqualsPointer(){DialPointer.Pointer p1=new DialPointer.Pointer();DialPointer.Pointer p2=new DialPointer.Pointer();assertEquals(p1,p2);p1.setFillPaint(Color.green);assertFalse(p1.equals(p2));p2.setFillPaint(Color.green);assertTrue(p1.equals(p2));p1.setOutlinePaint(Color.green);assertFalse(p1.equals(p2));p2.setOutlinePaint(Color.green);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DialPointer i1=new DialPointer.Pin(1);DialPointer i2=new DialPointer.Pin(1);assertTrue(i1.equals(i2));int h1=i1.hashCode();int h2=i2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialPointer i1=new DialPointer.Pin(1);DialPointer i2=null;try {i2=(DialPointer)i1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(i1 != i2);assertTrue(i1.getClass()== i2.getClass());assertTrue(i1.equals(i2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();i1.addChangeListener(l1);assertTrue(i1.hasListener(l1));assertFalse(i2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialPointer i1=new DialPointer.Pin(1);DialPointer i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(DialPointer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.chart.plot.dial.junit.DialPointerTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){DialPointer i1=new DialPointer.Pointer(1);DialPointer i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(DialPointer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){DefaultPolarItemRenderer r1=new DefaultPolarItemRenderer();DefaultPolarItemRenderer r2=new DefaultPolarItemRenderer();assertEquals(r1,r2);r1.setSeriesFilled(1,true);assertFalse(r1.equals(r2));r2.setSeriesFilled(1,true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){DefaultPolarItemRenderer r1=new DefaultPolarItemRenderer();DefaultPolarItemRenderer r2=new DefaultPolarItemRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultPolarItemRenderer r1=new DefaultPolarItemRenderer();DefaultPolarItemRenderer r2=null;try {r2=(DefaultPolarItemRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1.setSeriesFilled(1,true);assertFalse(r1.equals(r2));r2.setSeriesFilled(1,true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultPolarItemRenderer r1=new DefaultPolarItemRenderer();DefaultPolarItemRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(DefaultPolarItemRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYBubbleRenderer r1=new XYBubbleRenderer();XYBubbleRenderer r2=new XYBubbleRenderer();assertEquals(r1,r2);r1=new XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS);assertFalse(r1.equals(r2));r2=new XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYBubbleRenderer r1=new XYBubbleRenderer();XYBubbleRenderer r2=new XYBubbleRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYBubbleRenderer r1=new XYBubbleRenderer();XYBubbleRenderer r2=null;try {r2=(XYBubbleRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYBubbleRenderer r1=new XYBubbleRenderer();XYBubbleRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYBubbleRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultXYZDataset d1=new DefaultXYZDataset();double[]x={2.1,2.3,2.3,2.2,2.2,1.8,1.8,1.9,2.3,3.8};double[]y={14.1,11.1,10.0,8.8,8.7,8.4,5.4,4.1,4.1,25};double[]z={2.4,2.7,2.7,2.2,2.2,2.2,2.1,2.2,1.6,4};double[][]s1=new double[][]{x,y,z};d1.addSeries(""S1"",s1);x=new double[]{2.1};y=new double[]{14.1};z=new double[]{2.4};double[][]s2=new double[][]{x,y,z};d1.addSeries(""S2"",s2);DefaultXYZDataset d2=new DefaultXYZDataset();x=new double[]{2.1};y=new double[]{14.1};z=new double[]{2.4};double[][]s3=new double[][]{x,y,z};d2.addSeries(""S3"",s3);x=new double[]{2.1};y=new double[]{14.1};z=new double[]{2.4};double[][]s4=new double[][]{x,y,z};d2.addSeries(""S4"",s4);x=new double[]{2.1};y=new double[]{14.1};z=new double[]{2.4};double[][]s5=new double[][]{x,y,z};d2.addSeries(""S5"",s5);XYBubbleRenderer r=new XYBubbleRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.renderer.category.junit.GanttRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){GanttRenderer r1=new GanttRenderer();GanttRenderer r2=new GanttRenderer();assertEquals(r1,r2);r1.setCompletePaint(Color.yellow);assertFalse(r1.equals(r2));r2.setCompletePaint(Color.yellow);assertTrue(r1.equals(r2));r1.setIncompletePaint(Color.green);assertFalse(r1.equals(r2));r2.setIncompletePaint(Color.green);assertTrue(r1.equals(r2));r1.setStartPercent(0.11);assertFalse(r1.equals(r2));r2.setStartPercent(0.11);assertTrue(r1.equals(r2));r1.setEndPercent(0.88);assertFalse(r1.equals(r2));r2.setEndPercent(0.88);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.GanttRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){GanttRenderer r1=new GanttRenderer();GanttRenderer r2=new GanttRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.GanttRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){GanttRenderer r1=new GanttRenderer();GanttRenderer r2=null;try {r2=(GanttRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.GanttRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){GanttRenderer r1=new GanttRenderer();r1.setCompletePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));r1.setIncompletePaint(new GradientPaint(4.0f,3.0f,Color.red,2.0f,1.0f,Color.blue));GanttRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(GanttRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.util.junit.RelativeDateFormatTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){RelativeDateFormat df1=new RelativeDateFormat();RelativeDateFormat df2=new RelativeDateFormat();assertEquals(df1,df2);df1.setBaseMillis(123L);assertFalse(df1.equals(df2));df2.setBaseMillis(123L);assertTrue(df1.equals(df2));df1.setDaySuffix(""D"");assertFalse(df1.equals(df2));df2.setDaySuffix(""D"");assertTrue(df1.equals(df2));df1.setHourSuffix(""H"");assertFalse(df1.equals(df2));df2.setHourSuffix(""H"");assertTrue(df1.equals(df2));df1.setMinuteSuffix(""M"");assertFalse(df1.equals(df2));df2.setMinuteSuffix(""M"");assertTrue(df1.equals(df2));df1.setSecondSuffix(""S"");assertFalse(df1.equals(df2));df2.setSecondSuffix(""S"");assertTrue(df1.equals(df2));df1.setShowZeroDays(!df1.getShowZeroDays());assertFalse(df1.equals(df2));df2.setShowZeroDays(!df2.getShowZeroDays());assertTrue(df1.equals(df2));df1.setSecondFormatter(new DecimalFormat(""0.0""));assertFalse(df1.equals(df2));df2.setSecondFormatter(new DecimalFormat(""0.0""));assertTrue(df1.equals(df2));}"
"org.jfree.chart.util.junit.RelativeDateFormatTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){RelativeDateFormat df1=new RelativeDateFormat(123L);RelativeDateFormat df2=new RelativeDateFormat(123L);assertTrue(df1.equals(df2));int h1=df1.hashCode();int h2=df2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.util.junit.RelativeDateFormatTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){NumberFormat nf=new DecimalFormat(""0"");RelativeDateFormat df1=new RelativeDateFormat();df1.setSecondFormatter(nf);RelativeDateFormat df2=null;df2=(RelativeDateFormat)df1.clone();assertTrue(df1 != df2);assertTrue(df1.getClass()== df2.getClass());assertTrue(df1.equals(df2));nf.setMinimumFractionDigits(2);assertFalse(df1.equals(df2));}"
"org.jfree.chart.util.junit.RelativeDateFormatTests.testNegative",0,"/** * Some tests for negative dates.*/public void testNegative(){NumberFormat nf=new DecimalFormat(""0"");RelativeDateFormat df1=new RelativeDateFormat();df1.setSecondFormatter(nf);assertEquals(""-0h0m1s"",df1.format(new Date(-1000L)));}"
"org.jfree.data.xy.junit.XYSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYSeries s1=new XYSeries(""Series"");s1.add(1.0,1.1);XYSeries s2=new XYSeries(""Series"");s2.add(1.0,1.1);assertTrue(s1.equals(s2));assertTrue(s2.equals(s1));s1.setKey(""Series X"");assertFalse(s1.equals(s2));s2.setKey(""Series X"");assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.XYSeriesTests.testHashCode",0,"/** * Some simple checks for the hashCode()method.*/public void testHashCode(){XYSeries s1=new XYSeries(""Test"");XYSeries s2=new XYSeries(""Test"");assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(1.0,500.0);s2.add(1.0,500.0);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(2.0,null);s2.add(2.0,null);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(5.0,111.0);s2.add(5.0,111.0);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());s1.add(9.0,1.0);s2.add(9.0,1.0);assertEquals(s1,s2);assertEquals(s1.hashCode(),s2.hashCode());}"
"org.jfree.data.xy.junit.XYSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYSeries s1=new XYSeries(""Series"");s1.add(1.0,1.1);XYSeries s2=null;try {s2=(XYSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.XYSeriesTests.testCloning2",0,"/** * Another test of the clone()method.*/public void testCloning2(){XYSeries s1=new XYSeries(""S1"");s1.add(1.0,100.0);s1.add(2.0,null);s1.add(3.0,200.0);XYSeries s2=null;try {s2=(XYSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1.equals(s2));s2.add(4.0,300.0);assertFalse(s1.equals(s2));s1.add(4.0,300.0);assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.XYSeriesTests.testCloning3",0,"/** * Another test of the clone()method.*/public void testCloning3(){XYSeries s1=new XYSeries(""S1"");XYSeries s2=null;try {s2=(XYSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1.equals(s2));s2.add(4.0,300.0);assertFalse(s1.equals(s2));s1.add(4.0,300.0);assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.XYSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYSeries s1=new XYSeries(""Series"");s1.add(1.0,1.1);XYSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(XYSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.xy.junit.XYSeriesTests.testIndexOf",0,"/** * Simple test for the indexOf()method.*/public void testIndexOf(){XYSeries s1=new XYSeries(""Series 1"");s1.add(1.0,1.0);s1.add(2.0,2.0);s1.add(3.0,3.0);assertEquals(0,s1.indexOf(new Double(1.0)));}"
"org.jfree.data.xy.junit.XYSeriesTests.testIndexOf2",0,"/** * A check for the indexOf()method for an unsorted series.*/public void testIndexOf2(){XYSeries s1=new XYSeries(""Series 1"",false,true);s1.add(1.0,1.0);s1.add(3.0,3.0);s1.add(2.0,2.0);assertEquals(0,s1.indexOf(new Double(1.0)));assertEquals(1,s1.indexOf(new Double(3.0)));assertEquals(2,s1.indexOf(new Double(2.0)));}"
"org.jfree.data.xy.junit.XYSeriesTests.testRemove",0,"/** * Simple test for the remove()method.*/public void testRemove(){XYSeries s1=new XYSeries(""Series 1"");s1.add(1.0,1.0);s1.add(2.0,2.0);s1.add(3.0,3.0);assertEquals(3,s1.getItemCount());s1.remove(new Double(2.0));assertEquals(new Double(3.0),s1.getX(1));s1.remove(0);assertEquals(new Double(3.0),s1.getX(0));}"
"org.jfree.data.xy.junit.XYSeriesTests.testAdditionOfDuplicateXValues",0,"/** * When items are added with duplicate x-values,we expect them to remain  in the order they were added.*/public void testAdditionOfDuplicateXValues(){XYSeries s1=new XYSeries(""Series 1"");s1.add(1.0,1.0);s1.add(2.0,2.0);s1.add(2.0,3.0);s1.add(2.0,4.0);s1.add(3.0,5.0);assertEquals(1.0,s1.getY(0).doubleValue(),EPSILON);assertEquals(2.0,s1.getY(1).doubleValue(),EPSILON);assertEquals(3.0,s1.getY(2).doubleValue(),EPSILON);assertEquals(4.0,s1.getY(3).doubleValue(),EPSILON);assertEquals(5.0,s1.getY(4).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYSeriesTests.testUpdate",0,"/** * Some checks for the update(Number,Number)method.*/public void testUpdate(){XYSeries series=new XYSeries(""S1"");series.add(new Integer(1),new Integer(2));assertEquals(new Integer(2),series.getY(0));series.update(new Integer(1),new Integer(3));assertEquals(new Integer(3),series.getY(0));try {series.update(new Integer(2),new Integer(99));assertTrue(false);}catch(SeriesException e){}}"
"org.jfree.data.xy.junit.XYSeriesTests.testUpdate2",0,"/** * Some checks for the update()method for an unsorted series.*/public void testUpdate2(){XYSeries series=new XYSeries(""Series"",false,true);series.add(5.0,55.0);series.add(4.0,44.0);series.add(6.0,66.0);series.update(new Double(4.0),new Double(99.0));assertEquals(new Double(99.0),series.getY(1));}"
"org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate",0,"/** * Some checks for the addOrUpdate()method.*/public void testAddOrUpdate(){XYSeries series=new XYSeries(""S1"");XYDataItem old=series.addOrUpdate(new Long(1),new Long(2));assertTrue(old == null);assertEquals(1,series.getItemCount());assertEquals(new Long(2),series.getY(0));old=series.addOrUpdate(new Long(2),new Long(3));assertTrue(old == null);assertEquals(2,series.getItemCount());assertEquals(new Long(3),series.getY(1));old=series.addOrUpdate(new Long(1),new Long(99));assertEquals(new XYDataItem(new Long(1),new Long(2)),old);assertEquals(2,series.getItemCount());assertEquals(new Long(99),series.getY(0));assertEquals(new Long(3),series.getY(1));}"
"org.jfree.data.xy.junit.XYSeriesTests.testAddOrUpdate2",0,"/** * Some checks for the addOrUpdate()method for an UNSORTED series.*/public void testAddOrUpdate2(){XYSeries series=new XYSeries(""Series"",false,true);series.add(5.0,5.5);series.add(6.0,6.6);series.add(3.0,3.3);series.add(4.0,4.4);series.add(2.0,2.2);series.add(1.0,1.1);series.addOrUpdate(new Double(3.0),new Double(33.3));series.addOrUpdate(new Double(2.0),new Double(22.2));assertEquals(33.3,series.getY(2).doubleValue(),EPSILON);assertEquals(22.2,series.getY(4).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYSeriesTests.testAdd",0,"/** * Some checks for the add()method for an UNSORTED series.*/public void testAdd(){XYSeries series=new XYSeries(""Series"",false,true);series.add(5.0,5.50);series.add(5.1,5.51);series.add(6.0,6.6);series.add(3.0,3.3);series.add(4.0,4.4);series.add(2.0,2.2);series.add(1.0,1.1);assertEquals(5.5,series.getY(0).doubleValue(),EPSILON);assertEquals(5.51,series.getY(1).doubleValue(),EPSILON);assertEquals(6.6,series.getY(2).doubleValue(),EPSILON);assertEquals(3.3,series.getY(3).doubleValue(),EPSILON);assertEquals(4.4,series.getY(4).doubleValue(),EPSILON);assertEquals(2.2,series.getY(5).doubleValue(),EPSILON);assertEquals(1.1,series.getY(6).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYSeriesTests.testSetMaximumItemCount",0,"/** * A simple check that the maximumItemCount attribute is working.*/public void testSetMaximumItemCount(){XYSeries s1=new XYSeries(""S1"");assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());s1.setMaximumItemCount(2);assertEquals(2,s1.getMaximumItemCount());s1.add(1.0,1.1);s1.add(2.0,2.2);s1.add(3.0,3.3);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYSeriesTests.testSetMaximumItemCount2",0,"/** * Check that the maximum item count can be applied retrospectively.*/public void testSetMaximumItemCount2(){XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);s1.add(2.0,2.2);s1.add(3.0,3.3);s1.setMaximumItemCount(2);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYSeriesTests.testToArray",0,"/** * Some checks for the toArray()method.*/public void testToArray(){XYSeries s=new XYSeries(""S1"");double[][]array=s.toArray();assertEquals(2,array.length);assertEquals(0,array[0].length);assertEquals(0,array[1].length);s.add(1.0,2.0);array=s.toArray();assertEquals(1,array[0].length);assertEquals(1,array[1].length);assertEquals(2,array.length);assertEquals(1.0,array[0][0],EPSILON);assertEquals(2.0,array[1][0],EPSILON);s.add(2.0,null);array=s.toArray();assertEquals(2,array.length);assertEquals(2,array[0].length);assertEquals(2,array[1].length);assertEquals(2.0,array[0][1],EPSILON);assertTrue(Double.isNaN(array[1][1]));}"
"org.jfree.data.xy.junit.XYSeriesTests.testToArrayExample",0,"/** * Some checks for an example using the toArray()method.*/public void testToArrayExample(){XYSeries s=new XYSeries(""S"");s.add(1.0,11.0);s.add(2.0,22.0);s.add(3.5,35.0);s.add(5.0,null);DefaultXYDataset dataset=new DefaultXYDataset();dataset.addSeries(""S"",s.toArray());assertEquals(1,dataset.getSeriesCount());assertEquals(4,dataset.getItemCount(0));assertEquals(""S"",dataset.getSeriesKey(0));assertEquals(1.0,dataset.getXValue(0,0),EPSILON);assertEquals(2.0,dataset.getXValue(0,1),EPSILON);assertEquals(3.5,dataset.getXValue(0,2),EPSILON);assertEquals(5.0,dataset.getXValue(0,3),EPSILON);assertEquals(11.0,dataset.getYValue(0,0),EPSILON);assertEquals(22.0,dataset.getYValue(0,1),EPSILON);assertEquals(35.0,dataset.getYValue(0,2),EPSILON);assertTrue(Double.isNaN(dataset.getYValue(0,3)));}"
"org.jfree.chart.util.junit.LogFormatTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){LogFormat f1=new LogFormat(10.0,""10"",true);LogFormat f2=new LogFormat(10.0,""10"",true);assertEquals(f1,f2);f1=new LogFormat(11.0,""10"",true);assertFalse(f1.equals(f2));f2=new LogFormat(11.0,""10"",true);assertTrue(f1.equals(f2));f1=new LogFormat(11.0,""11"",true);assertFalse(f1.equals(f2));f2=new LogFormat(11.0,""11"",true);assertTrue(f1.equals(f2));f1=new LogFormat(11.0,""11"",false);assertFalse(f1.equals(f2));f2=new LogFormat(11.0,""11"",false);assertTrue(f1.equals(f2));}"
"org.jfree.chart.util.junit.LogFormatTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){LogFormat f1=new LogFormat(10.0,""10"",true);LogFormat f2=new LogFormat(10.0,""10"",true);assertTrue(f1.equals(f2));int h1=f1.hashCode();int h2=f2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.util.junit.LogFormatTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LogFormat f1=new LogFormat(10.0,""10"",true);LogFormat f2=null;try {f2=(LogFormat)f1.clone();}catch(Exception e){e.printStackTrace();}assertTrue(f1 != f2);assertTrue(f1.getClass()== f2.getClass());assertTrue(f1.equals(f2));}"
"org.jfree.chart.util.junit.LogFormatTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LogFormat f1=new LogFormat(10.0,""10"",true);LogFormat f2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(f1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));f2=(LogFormat)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(f1,f2);}"
"org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){MeanAndStandardDeviation m1=new MeanAndStandardDeviation(1.2,3.4);MeanAndStandardDeviation m2=new MeanAndStandardDeviation(1.2,3.4);assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1=new MeanAndStandardDeviation(1.0,3.4);assertFalse(m1.equals(m2));m2=new MeanAndStandardDeviation(1.0,3.4);assertTrue(m1.equals(m2));m1=new MeanAndStandardDeviation(1.0,3.0);assertFalse(m1.equals(m2));m2=new MeanAndStandardDeviation(1.0,3.0);assertTrue(m1.equals(m2));}"
"org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.testCloning",0,"/** * Immutable class - should not be cloneable.*/public void testCloning(){MeanAndStandardDeviation m1=new MeanAndStandardDeviation(1.2,3.4);assertFalse(m1 instanceof Cloneable);}"
"org.jfree.data.statistics.junit.MeanAndStandardDeviationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MeanAndStandardDeviation m1=new MeanAndStandardDeviation(1.2,3.4);MeanAndStandardDeviation m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(MeanAndStandardDeviation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(m1,m2);}"
"org.jfree.chart.block.junit.FlowArrangementTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){FlowArrangement f1=new FlowArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);FlowArrangement f2=new FlowArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);assertTrue(f1.equals(f2));assertTrue(f2.equals(f1));f1=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.TOP,1.0,2.0);assertFalse(f1.equals(f2));f2=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.TOP,1.0,2.0);assertTrue(f1.equals(f2));f1=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.0,2.0);assertFalse(f1.equals(f2));f2=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.0,2.0);assertTrue(f1.equals(f2));f1=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.0);assertFalse(f1.equals(f2));f2=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.0);assertTrue(f1.equals(f2));f1=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.2);assertFalse(f1.equals(f2));f2=new FlowArrangement(HorizontalAlignment.RIGHT,VerticalAlignment.BOTTOM,1.1,2.2);assertTrue(f1.equals(f2));}"
"org.jfree.chart.block.junit.FlowArrangementTests.testCloning",0,"/** * Immutable - cloning is not necessary.*/public void testCloning(){FlowArrangement f1=new FlowArrangement();assertFalse(f1 instanceof Cloneable);}"
"org.jfree.chart.block.junit.FlowArrangementTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){FlowArrangement f1=new FlowArrangement(HorizontalAlignment.LEFT,VerticalAlignment.TOP,1.0,2.0);FlowArrangement f2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(f1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));f2=(FlowArrangement)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(f1,f2);}"
"org.jfree.chart.axis.junit.AxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryAxis a1=new CategoryAxis(""Test"");a1.setAxisLinePaint(Color.red);CategoryAxis a2=null;try {a2=(CategoryAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.AxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Axis a1=new CategoryAxis(""Test"");Axis a2=new CategoryAxis(""Test"");assertTrue(a1.equals(a2));a1.setVisible(false);assertFalse(a1.equals(a2));a2.setVisible(false);assertTrue(a1.equals(a2));a1.setLabel(""New Label"");assertFalse(a1.equals(a2));a2.setLabel(""New Label"");assertTrue(a1.equals(a2));a1.setLabelFont(new Font(""Dialog"",Font.PLAIN,8));assertFalse(a1.equals(a2));a2.setLabelFont(new Font(""Dialog"",Font.PLAIN,8));assertTrue(a1.equals(a2));a1.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.black));assertFalse(a1.equals(a2));a2.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.black));assertTrue(a1.equals(a2));a1.setLabelInsets(new RectangleInsets(10.0,10.0,10.0,10.0));assertFalse(a1.equals(a2));a2.setLabelInsets(new RectangleInsets(10.0,10.0,10.0,10.0));assertTrue(a1.equals(a2));a1.setLabelAngle(1.23);assertFalse(a1.equals(a2));a2.setLabelAngle(1.23);assertTrue(a1.equals(a2));a1.setLabelToolTip(""123"");assertFalse(a1.equals(a2));a2.setLabelToolTip(""123"");assertTrue(a1.equals(a2));a1.setLabelURL(""ABC"");assertFalse(a1.equals(a2));a2.setLabelURL(""ABC"");assertTrue(a1.equals(a2));a1.setAxisLineVisible(false);assertFalse(a1.equals(a2));a2.setAxisLineVisible(false);assertTrue(a1.equals(a2));BasicStroke s=new BasicStroke(1.1f);a1.setAxisLineStroke(s);assertFalse(a1.equals(a2));a2.setAxisLineStroke(s);assertTrue(a1.equals(a2));a1.setAxisLinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.black));assertFalse(a1.equals(a2));a2.setAxisLinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.black));assertTrue(a1.equals(a2));a1.setTickLabelsVisible(false);assertFalse(a1.equals(a2));a2.setTickLabelsVisible(false);assertTrue(a1.equals(a2));a1.setTickLabelFont(new Font(""Dialog"",Font.PLAIN,12));assertFalse(a1.equals(a2));a2.setTickLabelFont(new Font(""Dialog"",Font.PLAIN,12));assertTrue(a1.equals(a2));a1.setTickLabelPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.black));assertFalse(a1.equals(a2));a2.setTickLabelPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.black));assertTrue(a1.equals(a2));a1.setTickLabelInsets(new RectangleInsets(10.0,10.0,10.0,10.0));assertFalse(a1.equals(a2));a2.setTickLabelInsets(new RectangleInsets(10.0,10.0,10.0,10.0));assertTrue(a1.equals(a2));a1.setTickMarksVisible(true);assertFalse(a1.equals(a2));a2.setTickMarksVisible(true);assertTrue(a1.equals(a2));a1.setTickMarkInsideLength(1.23f);assertFalse(a1.equals(a2));a2.setTickMarkInsideLength(1.23f);assertTrue(a1.equals(a2));a1.setTickMarkOutsideLength(1.23f);assertFalse(a1.equals(a2));a2.setTickMarkOutsideLength(1.23f);assertTrue(a1.equals(a2));a1.setTickMarkStroke(new BasicStroke(2.0f));assertFalse(a1.equals(a2));a2.setTickMarkStroke(new BasicStroke(2.0f));assertTrue(a1.equals(a2));a1.setTickMarkPaint(new GradientPaint(1.0f,2.0f,Color.cyan,3.0f,4.0f,Color.black));assertFalse(a1.equals(a2));a2.setTickMarkPaint(new GradientPaint(1.0f,2.0f,Color.cyan,3.0f,4.0f,Color.black));assertTrue(a1.equals(a2));a1.setFixedDimension(3.21f);assertFalse(a1.equals(a2));a2.setFixedDimension(3.21f);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.AxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Axis a1=new CategoryAxis(""Test"");Axis a2=new CategoryAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.StandardTickUnitSourceTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){StandardTickUnitSource t1=new StandardTickUnitSource();StandardTickUnitSource t2=new StandardTickUnitSource();assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.StandardTickUnitSourceTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardTickUnitSource t1=new StandardTickUnitSource();StandardTickUnitSource t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(StandardTickUnitSource)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(t1,t2);}"
"org.jfree.chart.annotations.junit.TextAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){TextAnnotation a1=new CategoryTextAnnotation(""Test"",""Category"",1.0);TextAnnotation a2=new CategoryTextAnnotation(""Test"",""Category"",1.0);assertTrue(a1.equals(a2));a1.setText(""Text"");assertFalse(a1.equals(a2));a2.setText(""Text"");assertTrue(a1.equals(a2));a1.setFont(new Font(""Serif"",Font.BOLD,18));assertFalse(a1.equals(a2));a2.setFont(new Font(""Serif"",Font.BOLD,18));assertTrue(a1.equals(a2));a1.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.pink));assertFalse(a1.equals(a2));a2.setPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.pink));assertTrue(a1.equals(a2));a1.setTextAnchor(TextAnchor.BOTTOM_LEFT);assertFalse(a1.equals(a2));a2.setTextAnchor(TextAnchor.BOTTOM_LEFT);assertTrue(a1.equals(a2));a1.setRotationAnchor(TextAnchor.BOTTOM_LEFT);assertFalse(a1.equals(a2));a2.setRotationAnchor(TextAnchor.BOTTOM_LEFT);assertTrue(a1.equals(a2));a1.setRotationAngle(Math.PI);assertFalse(a1.equals(a2));a2.setRotationAngle(Math.PI);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.TextAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){TextAnnotation a1=new CategoryTextAnnotation(""Test"",""Category"",1.0);TextAnnotation a2=new CategoryTextAnnotation(""Test"",""Category"",1.0);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){String f1=""{1}"";String f2=""{2}"";NumberFormat xnf1=new DecimalFormat(""0.00"");NumberFormat xnf2=new DecimalFormat(""0.000"");NumberFormat ynf1=new DecimalFormat(""0.00"");NumberFormat ynf2=new DecimalFormat(""0.000"");StandardXYToolTipGenerator g1=null;StandardXYToolTipGenerator g2=null;g1=new StandardXYToolTipGenerator(f1,xnf1,ynf1);g2=new StandardXYToolTipGenerator(f1,xnf1,ynf1);assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardXYToolTipGenerator(f2,xnf1,ynf1);assertFalse(g1.equals(g2));g2=new StandardXYToolTipGenerator(f2,xnf1,ynf1);assertTrue(g1.equals(g2));g1=new StandardXYToolTipGenerator(f2,xnf2,ynf1);assertFalse(g1.equals(g2));g2=new StandardXYToolTipGenerator(f2,xnf2,ynf1);assertTrue(g1.equals(g2));g1=new StandardXYToolTipGenerator(f2,xnf2,ynf2);assertFalse(g1.equals(g2));g2=new StandardXYToolTipGenerator(f2,xnf2,ynf2);assertTrue(g1.equals(g2));DateFormat xdf1=new SimpleDateFormat(""d-MMM"");DateFormat xdf2=new SimpleDateFormat(""d-MMM-yyyy"");DateFormat ydf1=new SimpleDateFormat(""d-MMM"");DateFormat ydf2=new SimpleDateFormat(""d-MMM-yyyy"");g1=new StandardXYToolTipGenerator(f1,xdf1,ydf1);g2=new StandardXYToolTipGenerator(f1,xdf1,ydf1);assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardXYToolTipGenerator(f1,xdf2,ydf1);assertFalse(g1.equals(g2));g2=new StandardXYToolTipGenerator(f1,xdf2,ydf1);assertTrue(g1.equals(g2));g1=new StandardXYToolTipGenerator(f1,xdf2,ydf2);assertFalse(g1.equals(g2));g2=new StandardXYToolTipGenerator(f1,xdf2,ydf2);assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardXYToolTipGenerator g1=new StandardXYToolTipGenerator();StandardXYToolTipGenerator g2=null;try {g2=(StandardXYToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardXYToolTipGenerator g1=new StandardXYToolTipGenerator();StandardXYToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardXYToolTipGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.junit.PieChart3DTests.testReplaceDatasetOnPieChart",0,"/** * Using a regular pie chart,we replace the dataset with null.  Expect to  receive notification of a chart change event,and (of course)the  dataset should be null.*/public void testReplaceDatasetOnPieChart(){LocalListener l=new LocalListener();this.pieChart.addChangeListener(l);PiePlot plot=(PiePlot)this.pieChart.getPlot();plot.setDataset(null);assertEquals(true,l.flag);assertNull(plot.getDataset());}"
"org.jfree.chart.junit.PieChart3DTests.testNullValueInDataset",0,"/** * Tests that no exceptions are thrown when there is a <code>null</code>  value in the dataset.*/public void testNullValueInDataset(){DefaultPieDataset dataset=new DefaultPieDataset();dataset.setValue(""Section 1"",10.0);dataset.setValue(""Section 2"",11.0);dataset.setValue(""Section 3"",null);JFreeChart chart=createPieChart3D(dataset);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Throwable t){success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.XYPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){XYPlot plot1=new XYPlot();XYPlot plot2=new XYPlot();assertTrue(plot1.equals(plot2));plot1.setOrientation(PlotOrientation.HORIZONTAL);assertFalse(plot1.equals(plot2));plot2.setOrientation(PlotOrientation.HORIZONTAL);assertTrue(plot1.equals(plot2));plot1.setAxisOffset(new RectangleInsets(0.05,0.05,0.05,0.05));assertFalse(plot1.equals(plot2));plot2.setAxisOffset(new RectangleInsets(0.05,0.05,0.05,0.05));assertTrue(plot1.equals(plot2));plot1.setDomainAxis(new NumberAxis(""Domain Axis""));assertFalse(plot1.equals(plot2));plot2.setDomainAxis(new NumberAxis(""Domain Axis""));assertTrue(plot1.equals(plot2));plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.setDomainAxis(11,new NumberAxis(""Secondary Domain Axis""));assertFalse(plot1.equals(plot2));plot2.setDomainAxis(11,new NumberAxis(""Secondary Domain Axis""));assertTrue(plot1.equals(plot2));plot1.setDomainAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setDomainAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.setRangeAxis(new NumberAxis(""Range Axis""));assertFalse(plot1.equals(plot2));plot2.setRangeAxis(new NumberAxis(""Range Axis""));assertTrue(plot1.equals(plot2));plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.setRangeAxis(11,new NumberAxis(""Secondary Range Axis""));assertFalse(plot1.equals(plot2));plot2.setRangeAxis(11,new NumberAxis(""Secondary Range Axis""));assertTrue(plot1.equals(plot2));plot1.setRangeAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertFalse(plot1.equals(plot2));plot2.setRangeAxisLocation(11,AxisLocation.TOP_OR_RIGHT);assertTrue(plot1.equals(plot2));plot1.mapDatasetToDomainAxis(11,11);assertFalse(plot1.equals(plot2));plot2.mapDatasetToDomainAxis(11,11);assertTrue(plot1.equals(plot2));plot1.mapDatasetToRangeAxis(11,11);assertFalse(plot1.equals(plot2));plot2.mapDatasetToRangeAxis(11,11);assertTrue(plot1.equals(plot2));plot1.setRenderer(new DefaultXYItemRenderer());assertFalse(plot1.equals(plot2));plot2.setRenderer(new DefaultXYItemRenderer());assertTrue(plot1.equals(plot2));plot1.setRenderer(11,new DefaultXYItemRenderer());assertFalse(plot1.equals(plot2));plot2.setRenderer(11,new DefaultXYItemRenderer());assertTrue(plot1.equals(plot2));plot1.setDomainGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setDomainGridlinesVisible(false);assertTrue(plot1.equals(plot2));Stroke stroke=new BasicStroke(2.0f);plot1.setDomainGridlineStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setDomainGridlineStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setDomainGridlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(plot1.equals(plot2));plot2.setDomainGridlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(plot1.equals(plot2));plot1.setRangeGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setRangeGridlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.setRangeGridlineStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setRangeGridlineStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setRangeGridlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertFalse(plot1.equals(plot2));plot2.setRangeGridlinePaint(new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.red));assertTrue(plot1.equals(plot2));plot1.setRangeZeroBaselineVisible(true);assertFalse(plot1.equals(plot2));plot2.setRangeZeroBaselineVisible(true);assertTrue(plot1.equals(plot2));plot1.setRangeZeroBaselineStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setRangeZeroBaselineStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setRangeZeroBaselinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.red));assertFalse(plot1.equals(plot2));plot2.setRangeZeroBaselinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.red));assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairVisible(true);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairVisible(true);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairValue(100.0);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairValue(100.0);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairStroke(stroke);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairStroke(stroke);assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairPaint(new GradientPaint(1.0f,2.0f,Color.pink,3.0f,4.0f,Color.red));assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairPaint(new GradientPaint(1.0f,2.0f,Color.pink,3.0f,4.0f,Color.red));assertTrue(plot1.equals(plot2));plot1.setRangeCrosshairLockedOnData(false);assertFalse(plot1.equals(plot2));plot2.setRangeCrosshairLockedOnData(false);assertTrue(plot1.equals(plot2));plot1.addRangeMarker(new ValueMarker(4.0));assertFalse(plot1.equals(plot2));plot2.addRangeMarker(new ValueMarker(4.0));assertTrue(plot1.equals(plot2));plot1.addRangeMarker(1,new ValueMarker(4.0),Layer.FOREGROUND);assertFalse(plot1.equals(plot2));plot2.addRangeMarker(1,new ValueMarker(4.0),Layer.FOREGROUND);assertTrue(plot1.equals(plot2));plot1.addRangeMarker(1,new ValueMarker(99.0),Layer.BACKGROUND);assertFalse(plot1.equals(plot2));plot2.addRangeMarker(1,new ValueMarker(99.0),Layer.BACKGROUND);assertTrue(plot1.equals(plot2));plot1.setWeight(3);assertFalse(plot1.equals(plot2));plot2.setWeight(3);assertTrue(plot1.equals(plot2));plot1.setQuadrantOrigin(new Point2D.Double(12.3,45.6));assertFalse(plot1.equals(plot2));plot2.setQuadrantOrigin(new Point2D.Double(12.3,45.6));assertTrue(plot1.equals(plot2));plot1.setQuadrantPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setQuadrantPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setQuadrantPaint(1,new GradientPaint(2.0f,3.0f,Color.red,4.0f,5.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setQuadrantPaint(1,new GradientPaint(2.0f,3.0f,Color.red,4.0f,5.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setQuadrantPaint(2,new GradientPaint(3.0f,4.0f,Color.red,5.0f,6.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setQuadrantPaint(2,new GradientPaint(3.0f,4.0f,Color.red,5.0f,6.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setQuadrantPaint(3,new GradientPaint(4.0f,5.0f,Color.red,6.0f,7.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setQuadrantPaint(3,new GradientPaint(4.0f,5.0f,Color.red,6.0f,7.0f,Color.blue));assertTrue(plot1.equals(plot2));plot1.setDomainTickBandPaint(Color.red);assertFalse(plot1.equals(plot2));plot2.setDomainTickBandPaint(Color.red);assertTrue(plot1.equals(plot2));plot1.setRangeTickBandPaint(Color.blue);assertFalse(plot1.equals(plot2));plot2.setRangeTickBandPaint(Color.blue);assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.XYPlotTests.testCloning",0,"/** * Confirm that basic cloning works.*/public void testCloning(){XYPlot p1=new XYPlot();XYPlot p2=null;try {p2=(XYPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.XYPlotTests.testCloning2",0,"/** * Tests cloning for a more complex plot.*/public void testCloning2(){XYPlot p1=new XYPlot(null,new NumberAxis(""Domain Axis""),new NumberAxis(""Range Axis""),new StandardXYItemRenderer());p1.setRangeAxis(1,new NumberAxis(""Range Axis 2""));p1.setRenderer(1,new XYBarRenderer());XYPlot p2=null;try {p2=(XYPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin",0,"/** * Confirm that cloning captures the quadrantOrigin field.*/public void testCloning_QuadrantOrigin(){XYPlot p1=new XYPlot();Point2D p=new Point2D.Double(1.2,3.4);p1.setQuadrantOrigin(p);XYPlot p2=null;try {p2=(XYPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));assertTrue(p2.getQuadrantOrigin()!= p);}"
"org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint",0,"/** * Confirm that cloning captures the quadrantOrigin field.*/public void testCloning_QuadrantPaint(){XYPlot p1=new XYPlot();p1.setQuadrantPaint(3,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));XYPlot p2=null;try {p2=(XYPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));p1.setQuadrantPaint(1,Color.red);assertFalse(p1.equals(p2));p2.setQuadrantPaint(1,Color.red);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence",0,"/** * Tests the independence of the clones.*/public void testCloneIndependence(){XYPlot p1=new XYPlot(null,new NumberAxis(""Domain Axis""),new NumberAxis(""Range Axis""),new StandardXYItemRenderer());p1.setDomainAxis(1,new NumberAxis(""Domain Axis 2""));p1.setDomainAxisLocation(1,AxisLocation.BOTTOM_OR_LEFT);p1.setRangeAxis(1,new NumberAxis(""Range Axis 2""));p1.setRangeAxisLocation(1,AxisLocation.TOP_OR_RIGHT);p1.setRenderer(1,new XYBarRenderer());XYPlot p2=null;try {p2=(XYPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(p1.equals(p2));p1.getDomainAxis().setLabel(""Label"");assertFalse(p1.equals(p2));p2.getDomainAxis().setLabel(""Label"");assertTrue(p1.equals(p2));p1.getDomainAxis(1).setLabel(""S1"");assertFalse(p1.equals(p2));p2.getDomainAxis(1).setLabel(""S1"");assertTrue(p1.equals(p2));p1.setDomainAxisLocation(1,AxisLocation.TOP_OR_RIGHT);assertFalse(p1.equals(p2));p2.setDomainAxisLocation(1,AxisLocation.TOP_OR_RIGHT);assertTrue(p1.equals(p2));p1.mapDatasetToDomainAxis(2,1);assertFalse(p1.equals(p2));p2.mapDatasetToDomainAxis(2,1);assertTrue(p1.equals(p2));p1.getRangeAxis().setLabel(""Label"");assertFalse(p1.equals(p2));p2.getRangeAxis().setLabel(""Label"");assertTrue(p1.equals(p2));p1.getRangeAxis(1).setLabel(""S1"");assertFalse(p1.equals(p2));p2.getRangeAxis(1).setLabel(""S1"");assertTrue(p1.equals(p2));p1.setRangeAxisLocation(1,AxisLocation.TOP_OR_LEFT);assertFalse(p1.equals(p2));p2.setRangeAxisLocation(1,AxisLocation.TOP_OR_LEFT);assertTrue(p1.equals(p2));p1.mapDatasetToRangeAxis(2,1);assertFalse(p1.equals(p2));p2.mapDatasetToRangeAxis(2,1);assertTrue(p1.equals(p2));p1.getRenderer().setBaseOutlinePaint(Color.cyan);assertFalse(p1.equals(p2));p2.getRenderer().setBaseOutlinePaint(Color.cyan);assertTrue(p1.equals(p2));p1.getRenderer(1).setBaseOutlinePaint(Color.red);assertFalse(p1.equals(p2));p2.getRenderer(1).setBaseOutlinePaint(Color.red);assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer",0,"/** * Setting a null renderer should be allowed,but is generating a null  pointer exception in 0.9.7.*/public void testSetNullRenderer(){boolean failed=false;try {XYPlot plot=new XYPlot(null,new NumberAxis(""X""),new NumberAxis(""Y""),null);plot.setRenderer(null);}catch(Exception e){failed=true;}assertTrue(!failed);}"
"org.jfree.chart.plot.junit.XYPlotTests.testSerialization1",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization1(){XYDataset data=new XYSeriesCollection();NumberAxis domainAxis=new NumberAxis(""Domain"");NumberAxis rangeAxis=new NumberAxis(""Range"");StandardXYItemRenderer renderer=new StandardXYItemRenderer();XYPlot p1=new XYPlot(data,domainAxis,rangeAxis,renderer);XYPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(XYPlot)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.XYPlotTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.  This test  uses a  {@link DateAxis}and a {@link StandardXYToolTipGenerator}.*/public void testSerialization2(){IntervalXYDataset data1=createDataset1();XYItemRenderer renderer1=new XYBarRenderer(0.20);renderer1.setBaseToolTipGenerator(StandardXYToolTipGenerator.getTimeSeriesInstance());XYPlot p1=new XYPlot(data1,new DateAxis(""Date""),null,renderer1);XYPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(XYPlot)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.XYPlotTests.testSerialization3",0,"/** * Problem to reproduce a bug in serialization.  The bug (first reported  against the  {@link org.jfree.chart.plot.CategoryPlot}class)is a null pointer exception that occurs when drawing a plot after deserialization. It is caused by four temporary storage structures (axesAtTop,axesAtBottom,axesAtLeft and axesAtRight - all initialized as empty  lists in the constructor)not being initialized by the readObject()method following deserialization.  This test has been written to  reproduce the bug (now fixed).*/public void testSerialization3(){XYSeriesCollection dataset=new XYSeriesCollection();JFreeChart chart=ChartFactory.createXYLineChart(""Test Chart"",""Domain Axis"",""Range Axis"",dataset,PlotOrientation.VERTICAL,true,true,false);JFreeChart chart2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(chart);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));chart2=(JFreeChart)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(chart,chart2);boolean passed=true;try {chart2.createBufferedImage(300,200);}catch(Exception e){passed=false;e.printStackTrace();}assertTrue(passed);}"
"org.jfree.chart.plot.junit.XYPlotTests.testSerialization4",0,"/** * A test to reproduce a bug in serialization: the domain and/or range markers for a plot are not being serialized.*/public void testSerialization4(){XYSeriesCollection dataset=new XYSeriesCollection();JFreeChart chart=ChartFactory.createXYLineChart(""Test Chart"",""Domain Axis"",""Range Axis"",dataset,PlotOrientation.VERTICAL,true,true,false);XYPlot plot=(XYPlot)chart.getPlot();plot.addDomainMarker(new ValueMarker(1.0),Layer.FOREGROUND);plot.addDomainMarker(new IntervalMarker(2.0,3.0),Layer.BACKGROUND);plot.addRangeMarker(new ValueMarker(4.0),Layer.FOREGROUND);plot.addRangeMarker(new IntervalMarker(5.0,6.0),Layer.BACKGROUND);JFreeChart chart2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(chart);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));chart2=(JFreeChart)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(chart,chart2);boolean passed=true;try {chart2.createBufferedImage(300,200);}catch(Exception e){passed=false;e.printStackTrace();}assertTrue(passed);}"
"org.jfree.chart.plot.junit.XYPlotTests.testSerialization5",0,"/** * Tests a bug where the plot is no longer registered as a listener with the dataset(s)and axes after deserialization.  See patch 1209475 at SourceForge.*/public void testSerialization5(){XYSeriesCollection dataset1=new XYSeriesCollection();NumberAxis domainAxis1=new NumberAxis(""Domain 1"");NumberAxis rangeAxis1=new NumberAxis(""Range 1"");StandardXYItemRenderer renderer1=new StandardXYItemRenderer();XYPlot p1=new XYPlot(dataset1,domainAxis1,rangeAxis1,renderer1);NumberAxis domainAxis2=new NumberAxis(""Domain 2"");NumberAxis rangeAxis2=new NumberAxis(""Range 2"");StandardXYItemRenderer renderer2=new StandardXYItemRenderer();XYSeriesCollection dataset2=new XYSeriesCollection();p1.setDataset(1,dataset2);p1.setDomainAxis(1,domainAxis2);p1.setRangeAxis(1,rangeAxis2);p1.setRenderer(1,renderer2);XYPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(XYPlot)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(p1,p2);NumberAxis domainAxisA=(NumberAxis)p2.getDomainAxis(0);NumberAxis rangeAxisA=(NumberAxis)p2.getRangeAxis(0);XYSeriesCollection datasetA=(XYSeriesCollection)p2.getDataset(0);StandardXYItemRenderer rendererA=(StandardXYItemRenderer)p2.getRenderer(0);NumberAxis domainAxisB=(NumberAxis)p2.getDomainAxis(1);NumberAxis rangeAxisB=(NumberAxis)p2.getRangeAxis(1);XYSeriesCollection datasetB=(XYSeriesCollection)p2.getDataset(1);StandardXYItemRenderer rendererB=(StandardXYItemRenderer)p2.getRenderer(1);assertTrue(datasetA.hasListener(p2));assertTrue(domainAxisA.hasListener(p2));assertTrue(rangeAxisA.hasListener(p2));assertTrue(rendererA.hasListener(p2));assertTrue(datasetB.hasListener(p2));assertTrue(domainAxisB.hasListener(p2));assertTrue(rangeAxisB.hasListener(p2));assertTrue(rendererB.hasListener(p2));}"
"org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset",0,"/** * Some checks for the getRendererForDataset()method.*/public void testGetRendererForDataset(){XYDataset d0=new XYSeriesCollection();XYDataset d1=new XYSeriesCollection();XYDataset d2=new XYSeriesCollection();XYDataset d3=new XYSeriesCollection();XYItemRenderer r0=new XYLineAndShapeRenderer();XYItemRenderer r2=new XYLineAndShapeRenderer();XYPlot plot=new XYPlot();plot.setDataset(0,d0);plot.setDataset(1,d1);plot.setDataset(2,d2);plot.setRenderer(0,r0);plot.setRenderer(2,r2);assertEquals(r0,plot.getRendererForDataset(d0));assertEquals(r0,plot.getRendererForDataset(d1));assertEquals(r2,plot.getRendererForDataset(d2));assertEquals(null,plot.getRendererForDataset(d3));assertEquals(null,plot.getRendererForDataset(null));}"
"org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems",0,"/** * Some checks for the getLegendItems()method.*/public void testGetLegendItems(){XYDataset d0=createDataset1();XYDataset d1=createDataset2();XYItemRenderer r0=new XYLineAndShapeRenderer();XYPlot plot=new XYPlot();plot.setDataset(0,d0);plot.setDataset(1,d1);plot.setRenderer(0,r0);LegendItemCollection items=plot.getLegendItems();assertEquals(2,items.getItemCount());}"
"org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer",0,"/** * A test for a bug where setting the renderer doesn't register the plot as a RendererChangeListener.*/public void testSetRenderer(){XYPlot plot=new XYPlot();XYItemRenderer renderer=new XYLineAndShapeRenderer();plot.setRenderer(renderer);MyPlotChangeListener listener=new MyPlotChangeListener();plot.addChangeListener(listener);renderer.setSeriesPaint(0,Color.black);assertTrue(listener.getEvent()!= null);}"
"org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation",0,"/** * Some checks for the removeAnnotation()method.*/public void testRemoveAnnotation(){XYPlot plot=new XYPlot();XYTextAnnotation a1=new XYTextAnnotation(""X"",1.0,2.0);XYTextAnnotation a2=new XYTextAnnotation(""X"",3.0,4.0);XYTextAnnotation a3=new XYTextAnnotation(""X"",1.0,2.0);plot.addAnnotation(a1);plot.addAnnotation(a2);plot.addAnnotation(a3);plot.removeAnnotation(a2);XYTextAnnotation x=(XYTextAnnotation)plot.getAnnotations().get(0);assertEquals(x,a1);assertTrue(a1.equals(a3));plot.removeAnnotation(a3);x=(XYTextAnnotation)plot.getAnnotations().get(0);assertEquals(x,a3);}"
"org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker",0,"/** * Some tests for the addDomainMarker()method(s).*/public void testAddDomainMarker(){XYPlot plot=new XYPlot();Marker m=new ValueMarker(1.0);plot.addDomainMarker(m);List listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertTrue(listeners.contains(plot));plot.clearDomainMarkers();listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertFalse(listeners.contains(plot));}"
"org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker",0,"/** * Some tests for the addRangeMarker()method(s).*/public void testAddRangeMarker(){XYPlot plot=new XYPlot();Marker m=new ValueMarker(1.0);plot.addRangeMarker(m);List listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertTrue(listeners.contains(plot));plot.clearRangeMarkers();listeners=Arrays.asList(m.getListeners(MarkerChangeListener.class));assertFalse(listeners.contains(plot));}"
"org.jfree.chart.plot.junit.XYPlotTests.test1654215",0,"/** * A test for bug 1654215 (where a renderer is added to the plot without a corresponding dataset and it throws an exception at drawing time).*/public void test1654215(){DefaultXYDataset dataset=new DefaultXYDataset();JFreeChart chart=ChartFactory.createXYLineChart(""Title"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,true,false,false);XYPlot plot=(XYPlot)chart.getPlot();plot.setRenderer(1,new XYLineAndShapeRenderer());boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines",0,"/** * A test for drawing range grid lines when there is no primary renderer. In 1.0.4,this is throwing a NullPointerException.*/public void testDrawRangeGridlines(){DefaultXYDataset dataset=new DefaultXYDataset();JFreeChart chart=ChartFactory.createXYLineChart(""Title"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,true,false,false);XYPlot plot=(XYPlot)chart.getPlot();plot.setRenderer(null);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems",0,"/** * A test for drawing a plot where a series has zero items.  With JFreeChart 1.0.5+cvs this was throwing an exception at one point.*/public void testDrawSeriesWithZeroItems(){DefaultXYDataset dataset=new DefaultXYDataset();dataset.addSeries(""Series 1"",new double[][]{{1.0,2.0},{3.0,4.0}});dataset.addSeries(""Series 2"",new double[][]{{},{}});JFreeChart chart=ChartFactory.createXYLineChart(""Title"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,true,false,false);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker",0,"/** * Check that removing a marker that isn't assigned to the plot returns  false.*/public void testRemoveDomainMarker(){XYPlot plot=new XYPlot();assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));}"
"org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker",0,"/** * Check that removing a marker that isn't assigned to the plot returns  false.*/public void testRemoveRangeMarker(){XYPlot plot=new XYPlot();assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));}"
"org.jfree.data.time.junit.FixedMillisecondTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){FixedMillisecond m1=new FixedMillisecond();FixedMillisecond m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(FixedMillisecond)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(m1,m2);}"
"org.jfree.data.time.junit.FixedMillisecondTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){FixedMillisecond m1=new FixedMillisecond(500000L);FixedMillisecond m2=new FixedMillisecond(500000L);assertTrue(m1.equals(m2));int h1=m1.hashCode();int h2=m2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.FixedMillisecondTests.testNotCloneable",0,"/** * The  {@link FixedMillisecond}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){FixedMillisecond m=new FixedMillisecond(500000L);assertFalse(m instanceof Cloneable);}"
"org.jfree.chart.axis.junit.PeriodAxisTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){PeriodAxis a1=new PeriodAxis(""Test"");PeriodAxis a2=new PeriodAxis(""Test"");assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1.setFirst(new Year(2000));assertFalse(a1.equals(a2));a2.setFirst(new Year(2000));assertTrue(a1.equals(a2));a1.setLast(new Year(2004));assertFalse(a1.equals(a2));a2.setLast(new Year(2004));assertTrue(a1.equals(a2));a1.setTimeZone(TimeZone.getTimeZone(""Pacific/Auckland""));assertFalse(a1.equals(a2));a2.setTimeZone(TimeZone.getTimeZone(""Pacific/Auckland""));assertTrue(a1.equals(a2));a1.setAutoRangeTimePeriodClass(Quarter.class);assertFalse(a1.equals(a2));a2.setAutoRangeTimePeriodClass(Quarter.class);assertTrue(a1.equals(a2));PeriodAxisLabelInfo info[]=new PeriodAxisLabelInfo[1];info[0]=new PeriodAxisLabelInfo(Month.class,new SimpleDateFormat(""MMM""));a1.setLabelInfo(info);assertFalse(a1.equals(a2));a2.setLabelInfo(info);assertTrue(a1.equals(a2));a1.setMajorTickTimePeriodClass(Minute.class);assertFalse(a1.equals(a2));a2.setMajorTickTimePeriodClass(Minute.class);assertTrue(a1.equals(a2));a1.setMinorTickMarksVisible(!a1.isMinorTickMarksVisible());assertFalse(a1.equals(a2));a2.setMinorTickMarksVisible(a1.isMinorTickMarksVisible());assertTrue(a1.equals(a2));a1.setMinorTickTimePeriodClass(Minute.class);assertFalse(a1.equals(a2));a2.setMinorTickTimePeriodClass(Minute.class);assertTrue(a1.equals(a2));Stroke s=new BasicStroke(1.23f);a1.setMinorTickMarkStroke(s);assertFalse(a1.equals(a2));a2.setMinorTickMarkStroke(s);assertTrue(a1.equals(a2));a1.setMinorTickMarkPaint(Color.blue);assertFalse(a1.equals(a2));a2.setMinorTickMarkPaint(Color.blue);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.PeriodAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){PeriodAxis a1=new PeriodAxis(""Test"");PeriodAxis a2=new PeriodAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.PeriodAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PeriodAxis a1=new PeriodAxis(""Test"");PeriodAxis a2=null;try {a2=(PeriodAxis)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));a1.setLabel(""New Label"");assertFalse(a1.equals(a2));a2.setLabel(""New Label"");assertTrue(a1.equals(a2));a1.setFirst(new Year(1920));assertFalse(a1.equals(a2));a2.setFirst(new Year(1920));assertTrue(a1.equals(a2));a1.setLast(new Year(2020));assertFalse(a1.equals(a2));a2.setLast(new Year(2020));assertTrue(a1.equals(a2));PeriodAxisLabelInfo[]info=new PeriodAxisLabelInfo[2];info[0]=new PeriodAxisLabelInfo(Day.class,new SimpleDateFormat(""d""));info[1]=new PeriodAxisLabelInfo(Year.class,new SimpleDateFormat(""yyyy""));a1.setLabelInfo(info);assertFalse(a1.equals(a2));a2.setLabelInfo(info);assertTrue(a1.equals(a2));a1.setAutoRangeTimePeriodClass(Second.class);assertFalse(a1.equals(a2));a2.setAutoRangeTimePeriodClass(Second.class);assertTrue(a1.equals(a2));a1.setTimeZone(new SimpleTimeZone(123,""Bogus""));assertFalse(a1.equals(a2));a2.setTimeZone(new SimpleTimeZone(123,""Bogus""));assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.PeriodAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PeriodAxis a1=new PeriodAxis(""Test Axis"");PeriodAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(PeriodAxis)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}boolean b=a1.equals(a2);assertTrue(b);}"
"org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){CategoryStepRenderer r1=new CategoryStepRenderer(false);CategoryStepRenderer r2=new CategoryStepRenderer(false);assertEquals(r1,r2);r1=new CategoryStepRenderer(true);assertFalse(r1.equals(r2));r2=new CategoryStepRenderer(true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryStepRenderer r1=new CategoryStepRenderer(false);CategoryStepRenderer r2=null;try {r2=(CategoryStepRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryStepRenderer r1=new CategoryStepRenderer();CategoryStepRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(CategoryStepRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.CategoryStepRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultCategoryDataset dataset0=new DefaultCategoryDataset();dataset0.addValue(21.0,""R1"",""C1"");dataset0.addValue(22.0,""R2"",""C1"");DefaultCategoryDataset dataset1=new DefaultCategoryDataset();dataset1.addValue(23.0,""R3"",""C1"");dataset1.addValue(24.0,""R4"",""C1"");dataset1.addValue(25.0,""R5"",""C1"");CategoryStepRenderer r=new CategoryStepRenderer();CategoryPlot plot=new CategoryPlot(dataset0,new CategoryAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,dataset1);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""R5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.data.statistics.junit.BoxAndWhiskerItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){BoxAndWhiskerItem i1=new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList());BoxAndWhiskerItem i2=new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList());assertTrue(i1.equals(i2));assertTrue(i2.equals(i1));}"
"org.jfree.data.statistics.junit.BoxAndWhiskerItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BoxAndWhiskerItem i1=new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList());BoxAndWhiskerItem i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(BoxAndWhiskerItem)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(i1,i2);}"
"org.jfree.chart.axis.junit.CyclicNumberAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CyclicNumberAxis a1=new CyclicNumberAxis(10,0,""Test"");CyclicNumberAxis a2=null;try {a2=(CyclicNumberAxis)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.CyclicNumberAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){CyclicNumberAxis a1=new CyclicNumberAxis(10,0,""Test"");CyclicNumberAxis a2=new CyclicNumberAxis(10,0,""Test"");assertTrue(a1.equals(a2));a1.setPeriod(5);assertFalse(a1.equals(a2));a2.setPeriod(5);assertTrue(a1.equals(a2));a1.setOffset(2.0);assertFalse(a1.equals(a2));a2.setOffset(2.0);assertTrue(a1.equals(a2));a1.setAdvanceLinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.black));assertFalse(a1.equals(a2));a2.setAdvanceLinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.black));assertTrue(a1.equals(a2));Stroke stroke=new BasicStroke(0.2f);a1.setAdvanceLineStroke(stroke);assertFalse(a1.equals(a2));a2.setAdvanceLineStroke(stroke);assertTrue(a1.equals(a2));a1.setAdvanceLineVisible(!a1.isAdvanceLineVisible());assertFalse(a1.equals(a2));a2.setAdvanceLineVisible(a1.isAdvanceLineVisible());assertTrue(a1.equals(a2));a1.setBoundMappedToLastCycle(!a1.isBoundMappedToLastCycle());assertFalse(a1.equals(a2));a2.setBoundMappedToLastCycle(a1.isBoundMappedToLastCycle());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.CyclicNumberAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){CyclicNumberAxis a1=new CyclicNumberAxis(10,0,""Test"");CyclicNumberAxis a2=new CyclicNumberAxis(10,0,""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CyclicNumberAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CyclicNumberAxis a1=new CyclicNumberAxis(10,0,""Test Axis"");CyclicNumberAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(CyclicNumberAxis)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.renderer.category.junit.ScatterRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){ScatterRenderer r1=new ScatterRenderer();ScatterRenderer r2=new ScatterRenderer();assertEquals(r1,r2);r1.setSeriesShapesFilled(1,true);assertFalse(r1.equals(r2));r2.setSeriesShapesFilled(1,true);assertTrue(r1.equals(r2));r1.setBaseShapesFilled(false);assertFalse(r1.equals(r2));r2.setBaseShapesFilled(false);assertTrue(r1.equals(r2));r1.setUseFillPaint(true);assertFalse(r1.equals(r2));r2.setUseFillPaint(true);assertTrue(r1.equals(r2));r1.setDrawOutlines(true);assertFalse(r1.equals(r2));r2.setDrawOutlines(true);assertTrue(r1.equals(r2));r1.setUseOutlinePaint(true);assertFalse(r1.equals(r2));r2.setUseOutlinePaint(true);assertTrue(r1.equals(r2));r1.setUseSeriesOffset(false);assertFalse(r1.equals(r2));r2.setUseSeriesOffset(false);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.ScatterRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){ScatterRenderer r1=new ScatterRenderer();ScatterRenderer r2=new ScatterRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.ScatterRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ScatterRenderer r1=new ScatterRenderer();ScatterRenderer r2=null;try {r2=(ScatterRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(checkIndependence(r1,r2));}"
"org.jfree.chart.renderer.category.junit.ScatterRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ScatterRenderer r1=new ScatterRenderer();ScatterRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(ScatterRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){StandardPieURLGenerator g1=new StandardPieURLGenerator();StandardPieURLGenerator g2=new StandardPieURLGenerator();assertTrue(g1.equals(g2));g1=new StandardPieURLGenerator(""prefix"",""category"",""index"");assertFalse(g1.equals(g2));g2=new StandardPieURLGenerator(""prefix"",""category"",""index"");assertTrue(g1.equals(g2));g1=new StandardPieURLGenerator(""prefix2"",""category"",""index"");assertFalse(g1.equals(g2));g2=new StandardPieURLGenerator(""prefix2"",""category"",""index"");assertTrue(g1.equals(g2));g1=new StandardPieURLGenerator(""prefix2"",""category2"",""index"");assertFalse(g1.equals(g2));g2=new StandardPieURLGenerator(""prefix2"",""category2"",""index"");assertTrue(g1.equals(g2));g1=new StandardPieURLGenerator(""prefix2"",""category2"",""index2"");assertFalse(g1.equals(g2));g2=new StandardPieURLGenerator(""prefix2"",""category2"",""index2"");assertTrue(g1.equals(g2));g1=new StandardPieURLGenerator(""prefix2"",""category2"",null);assertFalse(g1.equals(g2));g2=new StandardPieURLGenerator(""prefix2"",""category2"",null);assertTrue(g1.equals(g2));}"
"org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardPieURLGenerator g1=new StandardPieURLGenerator(""index.html?"",""cat"");StandardPieURLGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardPieURLGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.urls.junit.StandardPieURLGeneratorTests.testURL",0,"/** * Test that the generated URL is as expected.*/public void testURL(){DefaultPieDataset dataset=new DefaultPieDataset();dataset.setValue(""Alpha '1'"",new Double(5.0));dataset.setValue(""Beta"",new Double(5.5));StandardPieURLGenerator g1=new StandardPieURLGenerator(""chart.jsp"",""category"");String url=g1.generateURL(dataset,""Beta"",0);assertEquals(""chart.jsp?category=Beta&amp;pieIndex=0"",url);url=g1.generateURL(dataset,""Alpha '1'"",0);assertEquals(""chart.jsp?category=Alpha+%271%27&amp;pieIndex=0"",url);}"
"org.jfree.chart.plot.junit.MeterIntervalTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){MeterInterval m1=new MeterInterval(""Label 1"",new Range(1.2,3.4),Color.red,new BasicStroke(1.0f),Color.blue);MeterInterval m2=new MeterInterval(""Label 1"",new Range(1.2,3.4),Color.red,new BasicStroke(1.0f),Color.blue);assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1=new MeterInterval(""Label 2"",new Range(1.2,3.4),Color.red,new BasicStroke(1.0f),Color.blue);assertFalse(m1.equals(m2));m2=new MeterInterval(""Label 2"",new Range(1.2,3.4),Color.red,new BasicStroke(1.0f),Color.blue);assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.MeterIntervalTests.testCloning",0,"/** * This class is immutable so cloning isn't required.*/public void testCloning(){MeterInterval m1=new MeterInterval(""X"",new Range(1.0,2.0));assertFalse(m1 instanceof Cloneable);}"
"org.jfree.chart.plot.junit.MeterIntervalTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MeterInterval m1=new MeterInterval(""X"",new Range(1.0,2.0));MeterInterval m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(MeterInterval)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}boolean b=m1.equals(m2);assertTrue(b);}"
"org.jfree.chart.junit.XYBarChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.XYBarChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.XYBarChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.data.general.junit.DefaultPieDatasetTests.testClear",0,"/** * Some tests for the clear()method.*/public void testClear(){DefaultPieDataset d=new DefaultPieDataset();d.addChangeListener(this);d.clear();assertNull(this.lastEvent);d.setValue(""A"",1.0);assertEquals(1,d.getItemCount());this.lastEvent=null;d.clear();assertNotNull(this.lastEvent);assertEquals(0,d.getItemCount());}"
"org.jfree.data.general.junit.DefaultPieDatasetTests.testGetKey",0,"/** * Some checks for the getKey(int)method.*/public void testGetKey(){DefaultPieDataset d=new DefaultPieDataset();d.setValue(""A"",1.0);d.setValue(""B"",2.0);assertEquals(""A"",d.getKey(0));assertEquals(""B"",d.getKey(1));boolean pass=false;try {d.getKey(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {d.getKey(2);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.general.junit.DefaultPieDatasetTests.testGetIndex",0,"/** * Some checks for the getIndex()method.*/public void testGetIndex(){DefaultPieDataset d=new DefaultPieDataset();d.setValue(""A"",1.0);d.setValue(""B"",2.0);assertEquals(0,d.getIndex(""A""));assertEquals(1,d.getIndex(""B""));assertEquals(-1,d.getIndex(""XX""));boolean pass=false;try {d.getIndex(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.general.junit.DefaultPieDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultPieDataset d1=new DefaultPieDataset();d1.setValue(""V1"",new Integer(1));d1.setValue(""V2"",null);d1.setValue(""V3"",new Integer(3));DefaultPieDataset d2=null;try {d2=(DefaultPieDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.general.junit.DefaultPieDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultPieDataset d1=new DefaultPieDataset();d1.setValue(""C1"",new Double(234.2));d1.setValue(""C2"",null);d1.setValue(""C3"",new Double(345.9));d1.setValue(""C4"",new Double(452.7));DefaultPieDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultPieDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.chart.junit.AreaChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.AreaChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.junit.AreaChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.AreaChartTests.testReplaceDataset",0,"/** * Replaces the chart's dataset and then checks that the new dataset is OK.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testBins",0,"/** * Some checks that the correct values are assigned to bins.*/public void testBins(){double[]values={1.0,2.0,3.0,4.0,6.0,12.0,5.0,6.3,4.5};HistogramDataset hd=new HistogramDataset();hd.addSeries(""Series 1"",values,5);assertEquals(hd.getYValue(0,0),3.0,EPSILON);assertEquals(hd.getYValue(0,1),3.0,EPSILON);assertEquals(hd.getYValue(0,2),2.0,EPSILON);assertEquals(hd.getYValue(0,3),0.0,EPSILON);assertEquals(hd.getYValue(0,4),1.0,EPSILON);}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){double[]values={1.0,2.0,3.0,4.0,6.0,12.0,5.0,6.3,4.5};HistogramDataset d1=new HistogramDataset();d1.addSeries(""Series 1"",values,5);HistogramDataset d2=new HistogramDataset();d2.addSeries(""Series 1"",values,5);assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){double[]values={1.0,2.0,3.0,4.0,6.0,12.0,5.0,6.3,4.5};HistogramDataset d1=new HistogramDataset();d1.addSeries(""Series 1"",values,5);HistogramDataset d2=null;try {d2=(HistogramDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){double[]values={1.0,2.0,3.0,4.0,6.0,12.0,5.0,6.3,4.5};HistogramDataset d1=new HistogramDataset();d1.addSeries(""Series 1"",values,5);HistogramDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(HistogramDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testGetSeriesKey",0,"/** * A test for a bug reported in the forum where the series name isn't being returned correctly.*/public void testGetSeriesKey(){double[]values={1.0,2.0,3.0,4.0,6.0,12.0,5.0,6.3,4.5};HistogramDataset d1=new HistogramDataset();d1.addSeries(""Series 1"",values,5);assertEquals(""Series 1"",d1.getSeriesKey(0));}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testAddSeries",0,"/** * Some checks for the addSeries()method.*/public void testAddSeries(){double[]values={-1.0,0.0,0.1,0.9,1.0,1.1,1.9,2.0,3.0};HistogramDataset d=new HistogramDataset();d.addSeries(""S1"",values,2,0.0,2.0);assertEquals(0.0,d.getStartXValue(0,0),EPSILON);assertEquals(1.0,d.getEndXValue(0,0),EPSILON);assertEquals(4.0,d.getYValue(0,0),EPSILON);assertEquals(1.0,d.getStartXValue(0,1),EPSILON);assertEquals(2.0,d.getEndXValue(0,1),EPSILON);assertEquals(5.0,d.getYValue(0,1),EPSILON);}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.testBinBoundaries",0,"/** * This test is derived from a reported bug.*/public void testBinBoundaries(){double[]values={-5.000000000000286E-5};int bins=1260;double minimum=-0.06307522528160199;double maximum=0.06297522528160199;HistogramDataset d=new HistogramDataset();d.addSeries(""S1"",values,bins,minimum,maximum);assertEquals(0.0,d.getYValue(0,629),EPSILON);assertEquals(1.0,d.getYValue(0,630),EPSILON);assertEquals(0.0,d.getYValue(0,631),EPSILON);assertTrue(values[0]> d.getStartXValue(0,630));assertTrue(values[0]< d.getEndXValue(0,630));}"
"org.jfree.data.statistics.junit.HistogramDatasetTests.test1553088",0,"/** * Some checks for bug 1553088.  An IndexOutOfBoundsException is thrown  when a data value is *very* close to the upper limit of the last bin.*/public void test1553088(){double[]values={-1.0,0.0,-Double.MIN_VALUE,3.0};HistogramDataset d=new HistogramDataset();d.addSeries(""S1"",values,2,-1.0,0.0);assertEquals(-1.0,d.getStartXValue(0,0),EPSILON);assertEquals(-0.5,d.getEndXValue(0,0),EPSILON);assertEquals(1.0,d.getYValue(0,0),EPSILON);assertEquals(-0.5,d.getStartXValue(0,1),EPSILON);assertEquals(0.0,d.getEndXValue(0,1),EPSILON);assertEquals(3.0,d.getYValue(0,1),EPSILON);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){VectorSeries s1=new VectorSeries(""s1"");VectorSeries s2=new VectorSeries(""s1"");assertTrue(s1.equals(s2));s1=new VectorSeries(""s2"");assertFalse(s1.equals(s2));s2=new VectorSeries(""s2"");assertTrue(s1.equals(s2));s1=new VectorSeries(""s2"",true,true);assertFalse(s1.equals(s2));s2=new VectorSeries(""s2"",true,true);assertTrue(s1.equals(s2));s1=new VectorSeries(""s2"",false,false);assertFalse(s1.equals(s2));s2=new VectorSeries(""s2"",false,false);assertTrue(s1.equals(s2));s1.add(1.0,0.5,1.5,2.0);assertFalse(s1.equals(s2));s2.add(1.0,0.5,1.5,2.0);assertTrue(s2.equals(s1));s1.add(2.0,0.5,1.5,2.0);assertFalse(s1.equals(s2));s2.add(2.0,0.5,1.5,2.0);assertTrue(s2.equals(s1));s1.remove(new XYCoordinate(1.0,0.5));assertFalse(s1.equals(s2));s2.remove(new XYCoordinate(1.0,0.5));assertTrue(s2.equals(s1));}"
"org.jfree.data.xy.junit.VectorSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){VectorSeries s1=new VectorSeries(""s1"");s1.add(1.0,0.5,1.5,2.0);VectorSeries s2=null;try {s2=(VectorSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.VectorSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){VectorSeries s1=new VectorSeries(""s1"");s1.add(1.0,0.5,1.5,2.0);VectorSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(VectorSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testIndexOf",0,"/** * Simple test for the indexOf()method.*/public void testIndexOf(){VectorSeries s1=new VectorSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(2.0,2.0,2.0,3.0);s1.add(3.0,3.0,3.0,4.0);assertEquals(0,s1.indexOf(new XYCoordinate(1.0,1.0)));}"
"org.jfree.data.xy.junit.VectorSeriesTests.testIndexOf2",0,"/** * A check for the indexOf()method for an unsorted series.*/public void testIndexOf2(){VectorSeries s1=new VectorSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(3.0,3.0,3.0,3.0);s1.add(2.0,2.0,2.0,2.0);assertEquals(0,s1.indexOf(new XYCoordinate(1.0,1.0)));assertEquals(1,s1.indexOf(new XYCoordinate(3.0,3.0)));assertEquals(2,s1.indexOf(new XYCoordinate(2.0,2.0)));}"
"org.jfree.data.xy.junit.VectorSeriesTests.testRemove",0,"/** * Simple test for the remove()method.*/public void testRemove(){VectorSeries s1=new VectorSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(3.0,3.0,3.0,3.0);s1.add(2.0,2.0,2.0,2.0);assertEquals(3,s1.getItemCount());s1.remove(new XYCoordinate(2.0,2.0));assertEquals(3.0,s1.getXValue(1),EPSILON);s1.remove(new XYCoordinate(1.0,1.0));assertEquals(3.0,s1.getXValue(0),EPSILON);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testAdditionOfDuplicateXValues",0,"/** * When items are added with duplicate x-values,we expect them to remain  in the order they were added.*/public void testAdditionOfDuplicateXValues(){VectorSeries s1=new VectorSeries(""Series 1"");s1.add(1.0,1.0,1.0,1.0);s1.add(2.0,2.0,2.0,2.0);s1.add(2.0,2.0,3.0,3.0);s1.add(2.0,3.0,4.0,4.0);s1.add(3.0,5.0,5.0,5.0);assertEquals(1.0,s1.getVectorXValue(0),EPSILON);assertEquals(2.0,s1.getVectorXValue(1),EPSILON);assertEquals(3.0,s1.getVectorXValue(2),EPSILON);assertEquals(4.0,s1.getVectorXValue(3),EPSILON);assertEquals(5.0,s1.getVectorXValue(4),EPSILON);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testAdd",0,"/** * Some checks for the add()method for an UNSORTED series.*/public void testAdd(){VectorSeries series=new VectorSeries(""Series"",false,true);series.add(5.0,5.50,5.50,5.50);series.add(5.1,5.51,5.51,5.51);series.add(6.0,6.6,6.6,6.6);series.add(3.0,3.3,3.3,3.3);series.add(4.0,4.4,4.4,4.4);series.add(2.0,2.2,2.2,2.2);series.add(1.0,1.1,1.1,1.1);assertEquals(5.5,series.getVectorXValue(0),EPSILON);assertEquals(5.51,series.getVectorXValue(1),EPSILON);assertEquals(6.6,series.getVectorXValue(2),EPSILON);assertEquals(3.3,series.getVectorXValue(3),EPSILON);assertEquals(4.4,series.getVectorXValue(4),EPSILON);assertEquals(2.2,series.getVectorXValue(5),EPSILON);assertEquals(1.1,series.getVectorXValue(6),EPSILON);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testSetMaximumItemCount",0,"/** * A simple check that the maximumItemCount attribute is working.*/public void testSetMaximumItemCount(){VectorSeries s1=new VectorSeries(""S1"");assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());s1.setMaximumItemCount(2);assertEquals(2,s1.getMaximumItemCount());s1.add(1.0,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3);assertEquals(2.0,s1.getXValue(0),EPSILON);assertEquals(3.0,s1.getXValue(1),EPSILON);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testSetMaximumItemCount2",0,"/** * Check that the maximum item count can be applied retrospectively.*/public void testSetMaximumItemCount2(){VectorSeries s1=new VectorSeries(""S1"");s1.add(1.0,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3);s1.setMaximumItemCount(2);assertEquals(2.0,s1.getXValue(0),EPSILON);assertEquals(3.0,s1.getXValue(1),EPSILON);}"
"org.jfree.data.xy.junit.VectorSeriesTests.testClear",0,"/** * Some checks for the clear()method.*/public void testClear(){VectorSeries s1=new VectorSeries(""S1"");s1.addChangeListener(this);s1.clear();assertNull(this.lastEvent);assertTrue(s1.isEmpty());s1.add(1.0,2.0,3.0,4.0);assertFalse(s1.isEmpty());s1.clear();assertNotNull(this.lastEvent);assertTrue(s1.isEmpty());}"
"org.jfree.chart.axis.junit.ValueAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ValueAxis a1=new NumberAxis(""Test"");ValueAxis a2=null;try {a2=(NumberAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.ValueAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){NumberAxis a1=new NumberAxis(""Test"");NumberAxis a2=new NumberAxis(""Test"");assertTrue(a1.equals(a2));a1.setAxisLineVisible(false);assertFalse(a1.equals(a2));a2.setAxisLineVisible(false);assertTrue(a1.equals(a2));a1.setPositiveArrowVisible(true);assertFalse(a1.equals(a2));a2.setPositiveArrowVisible(true);assertTrue(a1.equals(a2));a1.setNegativeArrowVisible(true);assertFalse(a1.equals(a2));a2.setNegativeArrowVisible(true);assertTrue(a1.equals(a2));a1.setAxisLinePaint(Color.blue);assertFalse(a1.equals(a2));a2.setAxisLinePaint(Color.blue);assertTrue(a1.equals(a2));Stroke stroke=new BasicStroke(2.0f);a1.setAxisLineStroke(stroke);assertFalse(a1.equals(a2));a2.setAxisLineStroke(stroke);assertTrue(a1.equals(a2));a1.setInverted(true);assertFalse(a1.equals(a2));a2.setInverted(true);assertTrue(a1.equals(a2));a1.setRange(new Range(50.0,75.0));assertFalse(a1.equals(a2));a2.setRange(new Range(50.0,75.0));assertTrue(a1.equals(a2));a1.setAutoRange(true);assertFalse(a1.equals(a2));a2.setAutoRange(true);assertTrue(a1.equals(a2));a1.setAutoRangeMinimumSize(3.33);assertFalse(a1.equals(a2));a2.setAutoRangeMinimumSize(3.33);assertTrue(a1.equals(a2));a1.setDefaultAutoRange(new Range(1.2,3.4));assertFalse(a1.equals(a2));a2.setDefaultAutoRange(new Range(1.2,3.4));assertTrue(a1.equals(a2));a1.setUpperMargin(0.09);assertFalse(a1.equals(a2));a2.setUpperMargin(0.09);assertTrue(a1.equals(a2));a1.setLowerMargin(0.09);assertFalse(a1.equals(a2));a2.setLowerMargin(0.09);assertTrue(a1.equals(a2));a1.setFixedAutoRange(50.0);assertFalse(a1.equals(a2));a2.setFixedAutoRange(50.0);assertTrue(a1.equals(a2));a1.setAutoTickUnitSelection(false);assertFalse(a1.equals(a2));a2.setAutoTickUnitSelection(false);assertTrue(a1.equals(a2));a1.setStandardTickUnits(NumberAxis.createIntegerTickUnits());assertFalse(a1.equals(a2));a2.setStandardTickUnits(NumberAxis.createIntegerTickUnits());assertTrue(a1.equals(a2));a1.setVerticalTickLabels(true);assertFalse(a1.equals(a2));a2.setVerticalTickLabels(true);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.ValueAxisTests.testAxisMargins",0,"/** * Tests the the lower and upper margin settings produce the expected  results.*/public void testAxisMargins(){XYSeries series=new XYSeries(""S1"");series.add(100.0,1.1);series.add(200.0,2.2);XYSeriesCollection dataset=new XYSeriesCollection(series);dataset.setIntervalWidth(0.0);JFreeChart chart=ChartFactory.createScatterPlot(""Title"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);ValueAxis domainAxis=((XYPlot)chart.getPlot()).getDomainAxis();Range r=domainAxis.getRange();assertEquals(110.0,r.getLength(),EPSILON);domainAxis.setLowerMargin(0.10);domainAxis.setUpperMargin(0.10);r=domainAxis.getRange();assertEquals(120.0,r.getLength(),EPSILON);}"
"org.jfree.chart.plot.dial.junit.DialCapTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DialCap c1=new DialCap();DialCap c2=new DialCap();assertTrue(c1.equals(c2));c1.setRadius(0.5);assertFalse(c1.equals(c2));c2.setRadius(0.5);assertTrue(c1.equals(c2));c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));assertFalse(c1.equals(c2));c2.setFillPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.gray));assertFalse(c1.equals(c2));c2.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.gray));assertTrue(c1.equals(c2));c1.setOutlineStroke(new BasicStroke(1.1f));assertFalse(c1.equals(c2));c2.setOutlineStroke(new BasicStroke(1.1f));assertTrue(c1.equals(c2));c1.setVisible(false);assertFalse(c1.equals(c2));c2.setVisible(false);assertTrue(c1.equals(c2));}"
"org.jfree.chart.plot.dial.junit.DialCapTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DialCap c1=new DialCap();DialCap c2=new DialCap();assertTrue(c1.equals(c2));int h1=c1.hashCode();int h2=c2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.DialCapTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DialCap c1=new DialCap();DialCap c2=null;try {c2=(DialCap)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));c1=new DialCap();c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.gray));c1.setOutlineStroke(new BasicStroke(2.0f));c2=null;try {c2=(DialCap)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();c1.addChangeListener(l1);assertTrue(c1.hasListener(l1));assertFalse(c2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.DialCapTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DialCap c1=new DialCap();DialCap c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(DialCap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);c1=new DialCap();c1.setFillPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));c1.setOutlinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.gray));c1.setOutlineStroke(new BasicStroke(2.0f));c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(DialCap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.chart.axis.junit.DateTickUnitTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DateTickUnit t1=new DateTickUnit(DateTickUnit.DAY,1);DateTickUnit t2=new DateTickUnit(DateTickUnit.DAY,1);assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.DateTickUnitTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DateTickUnit t1=new DateTickUnit(DateTickUnit.DAY,1);DateTickUnit t2=new DateTickUnit(DateTickUnit.DAY,1);assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.DateTickUnitTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DateTickUnit a1=new DateTickUnit(DateTickUnit.DAY,7);DateTickUnit a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(DateTickUnit)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.data.junit.RangeTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Range r1=new Range(0.0,1.0);Range r2=new Range(0.0,1.0);assertEquals(r1,r2);assertEquals(r2,r1);r1=new Range(0.0,1.0);r2=new Range(0.5,1.0);assertFalse(r1.equals(r2));r1=new Range(0.0,1.0);r2=new Range(0.0,2.0);assertFalse(r1.equals(r2));}"
"org.jfree.data.junit.RangeTests.testContains",0,"/** * Simple tests for the contains()method.*/public void testContains(){Range r1=new Range(0.0,1.0);assertFalse(r1.contains(Double.NaN));assertFalse(r1.contains(Double.NEGATIVE_INFINITY));assertFalse(r1.contains(-1.0));assertTrue(r1.contains(0.0));assertTrue(r1.contains(0.5));assertTrue(r1.contains(1.0));assertFalse(r1.contains(2.0));assertFalse(r1.contains(Double.POSITIVE_INFINITY));}"
"org.jfree.data.junit.RangeTests.testConstrain",0,"/** * Tests the constrain()method for various values.*/public void testConstrain(){Range r1=new Range(0.0,1.0);double d=r1.constrain(0.5);assertEquals(0.5,d,0.0000001);d=r1.constrain(0.0);assertEquals(0.0,d,0.0000001);d=r1.constrain(1.0);assertEquals(1.0,d,0.0000001);d=r1.constrain(-1.0);assertEquals(0.0,d,0.0000001);d=r1.constrain(2.0);assertEquals(1.0,d,0.0000001);d=r1.constrain(Double.POSITIVE_INFINITY);assertEquals(1.0,d,0.0000001);d=r1.constrain(Double.NEGATIVE_INFINITY);assertEquals(0.0,d,0.0000001);d=r1.constrain(Double.NaN);assertTrue(Double.isNaN(d));}"
"org.jfree.data.junit.RangeTests.testIntersects",0,"/** * Simple tests for the intersects()method.*/public void testIntersects(){Range r1=new Range(0.0,1.0);assertFalse(r1.intersects(-2.0,-1.0));assertFalse(r1.intersects(-2.0,0.0));assertTrue(r1.intersects(-2.0,0.5));assertTrue(r1.intersects(-2.0,1.0));assertTrue(r1.intersects(-2.0,1.5));assertTrue(r1.intersects(0.0,0.5));assertTrue(r1.intersects(0.0,1.0));assertTrue(r1.intersects(0.0,1.5));assertTrue(r1.intersects(0.5,0.6));assertTrue(r1.intersects(0.5,1.0));assertTrue(r1.intersects(0.5,1.5));assertFalse(r1.intersects(1.0,1.1));assertFalse(r1.intersects(1.5,2.0));}"
"org.jfree.data.junit.RangeTests.testExpand",0,"/** * A simple test for the expand()method.*/public void testExpand(){Range r1=new Range(0.0,100.0);Range r2=Range.expand(r1,0.10,0.10);assertEquals(-10.0,r2.getLowerBound(),0.001);assertEquals(110.0,r2.getUpperBound(),0.001);}"
"org.jfree.data.junit.RangeTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Range r1=new Range(25.0,133.42);Range r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(Range)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.block.junit.LineBorderTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){LineBorder b1=new LineBorder(Color.red,new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));LineBorder b2=new LineBorder(Color.red,new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));assertTrue(b1.equals(b2));assertTrue(b2.equals(b2));b1=new LineBorder(Color.blue,new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));assertFalse(b1.equals(b2));b2=new LineBorder(Color.blue,new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));assertTrue(b1.equals(b2));b1=new LineBorder(Color.blue,new BasicStroke(1.1f),new RectangleInsets(1.0,1.0,1.0,1.0));assertFalse(b1.equals(b2));b2=new LineBorder(Color.blue,new BasicStroke(1.1f),new RectangleInsets(1.0,1.0,1.0,1.0));assertTrue(b1.equals(b2));b1=new LineBorder(Color.blue,new BasicStroke(1.1f),new RectangleInsets(1.0,2.0,3.0,4.0));assertFalse(b1.equals(b2));b2=new LineBorder(Color.blue,new BasicStroke(1.1f),new RectangleInsets(1.0,2.0,3.0,4.0));assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.LineBorderTests.testCloning",0,"/** * Immutable - cloning not necessary.*/public void testCloning(){LineBorder b1=new LineBorder();assertFalse(b1 instanceof Cloneable);}"
"org.jfree.chart.block.junit.LineBorderTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LineBorder b1=new LineBorder(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow),new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));LineBorder b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(LineBorder)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertTrue(b1.equals(b2));}"
"org.jfree.chart.junit.LineChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.LineChartTests.testReplaceDataset",0,"/** * Replaces the chart's dataset and then checks that the new dataset is OK.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.LineChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.LineChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.data.general.junit.DatasetGroupTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DatasetGroup g1=new DatasetGroup();DatasetGroup g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(DatasetGroup)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.data.time.junit.TimePeriodValuesTests.testClone",0,"/** * Set up a quarter equal to Q1 1900.  Request the previous quarter,it  should be null.*/public void testClone(){TimePeriodValues series=new TimePeriodValues(""Test Series"");RegularTimePeriod jan1st2002=new Day(1,MonthConstants.JANUARY,2002);try {series.add(jan1st2002,new Integer(42));}catch(SeriesException e){System.err.println(""Problem adding to collection."");}TimePeriodValues clone=null;try {clone=(TimePeriodValues)series.clone();clone.setKey(""Clone Series"");try {clone.update(0,new Integer(10));}catch(SeriesException e){System.err.println(""Problem updating series."");}}catch(CloneNotSupportedException e){assertTrue(false);}int seriesValue=series.getValue(0).intValue();int cloneValue=clone.getValue(0).intValue();assertEquals(42,seriesValue);assertEquals(10,cloneValue);assertEquals(""Test Series"",series.getKey());assertEquals(""Clone Series"",clone.getKey());}"
"org.jfree.data.time.junit.TimePeriodValuesTests.testAddValue",0,"/** * Add a value to series A for 1999.  It should be added at index 0.*/public void testAddValue(){TimePeriodValues tpvs=new TimePeriodValues(""Test"");try {tpvs.add(new Year(1999),new Integer(1));}catch(SeriesException e){System.err.println(""Problem adding to series."");}int value=tpvs.getValue(0).intValue();assertEquals(1,value);}"
"org.jfree.data.time.junit.TimePeriodValuesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimePeriodValues s1=new TimePeriodValues(""A test"");s1.add(new Year(2000),13.75);s1.add(new Year(2001),11.90);s1.add(new Year(2002),null);s1.add(new Year(2005),19.32);s1.add(new Year(2007),16.89);TimePeriodValues s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(TimePeriodValues)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(s1.equals(s2));}"
"org.jfree.data.time.junit.TimePeriodValuesTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){TimePeriodValues s1=new TimePeriodValues(""Time Series 1"");TimePeriodValues s2=new TimePeriodValues(""Time Series 2"");boolean b1=s1.equals(s2);assertFalse(""b1"",b1);s2.setKey(""Time Series 1"");boolean b2=s1.equals(s2);assertTrue(""b2"",b2);s1.setDomainDescription(""XYZ"");assertFalse(s1.equals(s2));s2.setDomainDescription(""XYZ"");assertTrue(s1.equals(s2));s1.setDomainDescription(null);assertFalse(s1.equals(s2));s2.setDomainDescription(null);assertTrue(s1.equals(s2));s1.setRangeDescription(""XYZ"");assertFalse(s1.equals(s2));s2.setRangeDescription(""XYZ"");assertTrue(s1.equals(s2));s1.setRangeDescription(null);assertFalse(s1.equals(s2));s2.setRangeDescription(null);assertTrue(s1.equals(s2));RegularTimePeriod p1=new Day();RegularTimePeriod p2=p1.next();s1.add(p1,100.0);s1.add(p2,200.0);boolean b3=s1.equals(s2);assertFalse(""b3"",b3);s2.add(p1,100.0);s2.add(p2,200.0);boolean b4=s1.equals(s2);assertTrue(""b4"",b4);}"
"org.jfree.data.time.junit.TimePeriodValuesTests.test1161329",0,"/** * A test for bug report 1161329.*/public void test1161329(){TimePeriodValues tpv=new TimePeriodValues(""Test"");RegularTimePeriod t=new Day();tpv.add(t,1.0);t=t.next();tpv.add(t,2.0);tpv.delete(0,1);assertEquals(0,tpv.getItemCount());tpv.add(t,2.0);assertEquals(1,tpv.getItemCount());}"
"org.jfree.data.time.junit.TimePeriodValuesTests.testAdd",0,"/** * Some checks for the add()methods.*/public void testAdd(){TimePeriodValues tpv=new TimePeriodValues(""Test"");MySeriesChangeListener listener=new MySeriesChangeListener();tpv.addChangeListener(listener);tpv.add(new TimePeriodValue(new SimpleTimePeriod(new Date(1L),new Date(3L)),99.0));assertEquals(99.0,tpv.getValue(0).doubleValue(),EPSILON);assertEquals(tpv,listener.getLastEvent().getSource());boolean pass=false;try {tpv.add((TimePeriodValue)null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.TimeSeriesCollectionTests.testEquals",0,"/** * Some tests for the equals()method.*/public void testEquals(){TimeSeriesCollection c1=new TimeSeriesCollection();TimeSeriesCollection c2=new TimeSeriesCollection();TimeSeries s1=new TimeSeries(""Series 1"");TimeSeries s2=new TimeSeries(""Series 2"");boolean b1=c1.equals(c2);assertTrue(""b1"",b1);c1.addSeries(s1);c1.addSeries(s2);boolean b2=c1.equals(c2);assertFalse(""b2"",b2);c2.addSeries(s1);c2.addSeries(s2);boolean b3=c1.equals(c2);assertTrue(""b3"",b3);c2.removeSeries(s2);boolean b4=c1.equals(c2);assertFalse(""b4"",b4);c1.removeSeries(s2);boolean b5=c1.equals(c2);assertTrue(""b5"",b5);}"
"org.jfree.data.time.junit.TimeSeriesCollectionTests.testRemoveSeries",0,"/** * Tests the remove series method.*/public void testRemoveSeries(){TimeSeriesCollection c1=new TimeSeriesCollection();TimeSeries s1=new TimeSeries(""Series 1"");TimeSeries s2=new TimeSeries(""Series 2"");TimeSeries s3=new TimeSeries(""Series 3"");TimeSeries s4=new TimeSeries(""Series 4"");c1.addSeries(s1);c1.addSeries(s2);c1.addSeries(s3);c1.addSeries(s4);c1.removeSeries(s3);TimeSeries s=c1.getSeries(2);boolean b1=s.equals(s4);assertTrue(b1);}"
"org.jfree.data.time.junit.TimeSeriesCollectionTests.testGetSurroundingItems",0,"/** * Test the getSurroundingItems()method to ensure it is returning the  values we expect.*/public void testGetSurroundingItems(){TimeSeries series=new TimeSeries(""Series 1"",Day.class);TimeSeriesCollection collection=new TimeSeriesCollection(series);collection.setXPosition(TimePeriodAnchor.MIDDLE);int[]result=collection.getSurroundingItems(0,1000L);assertTrue(result[0]== -1);assertTrue(result[1]== -1);Day today=new Day();long start1=today.getFirstMillisecond();long middle1=today.getMiddleMillisecond();long end1=today.getLastMillisecond();series.add(today,99.9);result=collection.getSurroundingItems(0,start1);assertTrue(result[0]== -1);assertTrue(result[1]== 0);result=collection.getSurroundingItems(0,middle1);assertTrue(result[0]== 0);assertTrue(result[1]== 0);result=collection.getSurroundingItems(0,end1);assertTrue(result[0]== 0);assertTrue(result[1]== -1);Day tomorrow=(Day)today.next();long start2=tomorrow.getFirstMillisecond();long middle2=tomorrow.getMiddleMillisecond();long end2=tomorrow.getLastMillisecond();series.add(tomorrow,199.9);result=collection.getSurroundingItems(0,start2);assertTrue(result[0]== 0);assertTrue(result[1]== 1);result=collection.getSurroundingItems(0,middle2);assertTrue(result[0]== 1);assertTrue(result[1]== 1);result=collection.getSurroundingItems(0,end2);assertTrue(result[0]== 1);assertTrue(result[1]== -1);Day yesterday=(Day)today.previous();long start3=yesterday.getFirstMillisecond();long middle3=yesterday.getMiddleMillisecond();long end3=yesterday.getLastMillisecond();series.add(yesterday,1.23);result=collection.getSurroundingItems(0,start3);assertTrue(result[0]== -1);assertTrue(result[1]== 0);result=collection.getSurroundingItems(0,middle3);assertTrue(result[0]== 0);assertTrue(result[1]== 0);result=collection.getSurroundingItems(0,end3);assertTrue(result[0]== 0);assertTrue(result[1]== 1);}"
"org.jfree.data.time.junit.TimeSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimeSeriesCollection c1=new TimeSeriesCollection(createSeries());TimeSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(TimeSeriesCollection)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(c1,c2);}"
"org.jfree.data.time.junit.TimeSeriesCollectionTests.test1170825",0,"/** * A test for bug report 1170825.*/public void test1170825(){TimeSeries s1=new TimeSeries(""Series1"");TimeSeriesCollection dataset=new TimeSeriesCollection();dataset.addSeries(s1);try {dataset.getSeries(1);}catch(IllegalArgumentException e){}catch(IndexOutOfBoundsException e){assertTrue(false);}}"
"org.jfree.data.time.junit.TimeSeriesCollectionTests.testIndexOf",0,"/** * Some tests for the indexOf()method.*/public void testIndexOf(){TimeSeries s1=new TimeSeries(""S1"");TimeSeries s2=new TimeSeries(""S2"");TimeSeriesCollection dataset=new TimeSeriesCollection();assertEquals(-1,dataset.indexOf(s1));assertEquals(-1,dataset.indexOf(s2));dataset.addSeries(s1);assertEquals(0,dataset.indexOf(s1));assertEquals(-1,dataset.indexOf(s2));dataset.addSeries(s2);assertEquals(0,dataset.indexOf(s1));assertEquals(1,dataset.indexOf(s2));dataset.removeSeries(s1);assertEquals(-1,dataset.indexOf(s1));assertEquals(0,dataset.indexOf(s2));TimeSeries s2b=new TimeSeries(""S2"");assertEquals(0,dataset.indexOf(s2b));}"
"org.jfree.data.xy.junit.XIntervalDataItemTests.testConstructor1",0,"/** * Some checks for the constructor.*/public void testConstructor1(){XIntervalDataItem item1=new XIntervalDataItem(1.0,2.0,3.0,4.0);assertEquals(new Double(1.0),item1.getX());assertEquals(2.0,item1.getXLowValue(),EPSILON);assertEquals(3.0,item1.getXHighValue(),EPSILON);assertEquals(4.0,item1.getYValue(),EPSILON);}"
"org.jfree.data.xy.junit.XIntervalDataItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XIntervalDataItem item1=new XIntervalDataItem(1.0,2.0,3.0,4.0);XIntervalDataItem item2=new XIntervalDataItem(1.0,2.0,3.0,4.0);assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1=new XIntervalDataItem(1.1,2.0,3.0,4.0);assertFalse(item1.equals(item2));item2=new XIntervalDataItem(1.1,2.0,3.0,4.0);assertTrue(item1.equals(item2));item1=new XIntervalDataItem(1.1,2.2,3.0,4.0);assertFalse(item1.equals(item2));item2=new XIntervalDataItem(1.1,2.2,3.0,4.0);assertTrue(item1.equals(item2));item1=new XIntervalDataItem(1.1,2.2,3.3,4.0);assertFalse(item1.equals(item2));item2=new XIntervalDataItem(1.1,2.2,3.3,4.0);assertTrue(item1.equals(item2));item1=new XIntervalDataItem(1.1,2.2,3.3,4.4);assertFalse(item1.equals(item2));item2=new XIntervalDataItem(1.1,2.2,3.3,4.4);assertTrue(item1.equals(item2));}"
"org.jfree.data.xy.junit.XIntervalDataItemTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){XIntervalDataItem item1=new XIntervalDataItem(1.0,2.0,3.0,4.0);XIntervalDataItem item2=null;try {item2=(XIntervalDataItem)item1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(item1 != item2);assertTrue(item1.getClass()== item2.getClass());assertTrue(item1.equals(item2));}"
"org.jfree.data.xy.junit.XIntervalDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XIntervalDataItem item1=new XIntervalDataItem(1.0,2.0,3.0,4.0);XIntervalDataItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(XIntervalDataItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.chart.axis.junit.SubCategoryAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){SubCategoryAxis a1=new SubCategoryAxis(""Test"");SubCategoryAxis a2=new SubCategoryAxis(""Test"");assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1.addSubCategory(""Sub 1"");assertFalse(a1.equals(a2));a2.addSubCategory(""Sub 1"");assertTrue(a1.equals(a2));a1.setSubLabelFont(new Font(""Serif"",Font.BOLD,15));assertFalse(a1.equals(a2));a2.setSubLabelFont(new Font(""Serif"",Font.BOLD,15));assertTrue(a1.equals(a2));a1.setSubLabelPaint(Color.red);assertFalse(a1.equals(a2));a2.setSubLabelPaint(Color.red);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.SubCategoryAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){SubCategoryAxis a1=new SubCategoryAxis(""Test"");SubCategoryAxis a2=new SubCategoryAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.SubCategoryAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){SubCategoryAxis a1=new SubCategoryAxis(""Test"");SubCategoryAxis a2=null;try {a2=(SubCategoryAxis)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.SubCategoryAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){SubCategoryAxis a1=new SubCategoryAxis(""Test Axis"");SubCategoryAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(SubCategoryAxis)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){YIntervalSeries s1=new YIntervalSeries(""s1"");YIntervalSeries s2=new YIntervalSeries(""s1"");assertTrue(s1.equals(s2));s1=new YIntervalSeries(""s2"");assertFalse(s1.equals(s2));s2=new YIntervalSeries(""s2"");assertTrue(s1.equals(s2));s1=new YIntervalSeries(""s2"",false,true);assertFalse(s1.equals(s2));s2=new YIntervalSeries(""s2"",false,true);assertTrue(s1.equals(s2));s1=new YIntervalSeries(""s2"",false,false);assertFalse(s1.equals(s2));s2=new YIntervalSeries(""s2"",false,false);assertTrue(s1.equals(s2));s1.add(1.0,0.5,1.5,2.0);assertFalse(s1.equals(s2));s2.add(1.0,0.5,1.5,2.0);assertTrue(s2.equals(s1));s1.add(2.0,0.5,1.5,2.0);assertFalse(s1.equals(s2));s2.add(2.0,0.5,1.5,2.0);assertTrue(s2.equals(s1));s1.remove(new Double(1.0));assertFalse(s1.equals(s2));s2.remove(new Double(1.0));assertTrue(s2.equals(s1));}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){YIntervalSeries s1=new YIntervalSeries(""s1"");s1.add(1.0,0.5,1.5,2.0);YIntervalSeries s2=null;try {s2=(YIntervalSeries)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){YIntervalSeries s1=new YIntervalSeries(""s1"");s1.add(1.0,0.5,1.5,2.0);YIntervalSeries s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(YIntervalSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testIndexOf",0,"/** * Simple test for the indexOf()method.*/public void testIndexOf(){YIntervalSeries s1=new YIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(2.0,2.0,2.0,3.0);s1.add(3.0,3.0,3.0,4.0);assertEquals(0,s1.indexOf(new Double(1.0)));}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testIndexOf2",0,"/** * A check for the indexOf()method for an unsorted series.*/public void testIndexOf2(){YIntervalSeries s1=new YIntervalSeries(""Series 1"",false,true);s1.add(1.0,1.0,1.0,2.0);s1.add(3.0,3.0,3.0,3.0);s1.add(2.0,2.0,2.0,2.0);assertEquals(0,s1.indexOf(new Double(1.0)));assertEquals(1,s1.indexOf(new Double(3.0)));assertEquals(2,s1.indexOf(new Double(2.0)));}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testRemove",0,"/** * Simple test for the remove()method.*/public void testRemove(){YIntervalSeries s1=new YIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,2.0);s1.add(2.0,2.0,2.0,2.0);s1.add(3.0,3.0,3.0,3.0);assertEquals(3,s1.getItemCount());s1.remove(new Double(2.0));assertEquals(new Double(3.0),s1.getX(1));s1.remove(new Double(1.0));assertEquals(new Double(3.0),s1.getX(0));}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testAdditionOfDuplicateXValues",0,"/** * When items are added with duplicate x-values,we expect them to remain  in the order they were added.*/public void testAdditionOfDuplicateXValues(){YIntervalSeries s1=new YIntervalSeries(""Series 1"");s1.add(1.0,1.0,1.0,1.0);s1.add(2.0,2.0,2.0,2.0);s1.add(2.0,3.0,3.0,3.0);s1.add(2.0,4.0,4.0,4.0);s1.add(3.0,5.0,5.0,5.0);assertEquals(1.0,s1.getYValue(0),EPSILON);assertEquals(2.0,s1.getYValue(1),EPSILON);assertEquals(3.0,s1.getYValue(2),EPSILON);assertEquals(4.0,s1.getYValue(3),EPSILON);assertEquals(5.0,s1.getYValue(4),EPSILON);}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testAdd",0,"/** * Some checks for the add()method for an UNSORTED series.*/public void testAdd(){YIntervalSeries series=new YIntervalSeries(""Series"",false,true);series.add(5.0,5.50,5.50,5.50);series.add(5.1,5.51,5.51,5.51);series.add(6.0,6.6,6.6,6.6);series.add(3.0,3.3,3.3,3.3);series.add(4.0,4.4,4.4,4.4);series.add(2.0,2.2,2.2,2.2);series.add(1.0,1.1,1.1,1.1);assertEquals(5.5,series.getYValue(0),EPSILON);assertEquals(5.51,series.getYValue(1),EPSILON);assertEquals(6.6,series.getYValue(2),EPSILON);assertEquals(3.3,series.getYValue(3),EPSILON);assertEquals(4.4,series.getYValue(4),EPSILON);assertEquals(2.2,series.getYValue(5),EPSILON);assertEquals(1.1,series.getYValue(6),EPSILON);}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testSetMaximumItemCount",0,"/** * A simple check that the maximumItemCount attribute is working.*/public void testSetMaximumItemCount(){YIntervalSeries s1=new YIntervalSeries(""S1"");assertEquals(Integer.MAX_VALUE,s1.getMaximumItemCount());s1.setMaximumItemCount(2);assertEquals(2,s1.getMaximumItemCount());s1.add(1.0,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testSetMaximumItemCount2",0,"/** * Check that the maximum item count can be applied retrospectively.*/public void testSetMaximumItemCount2(){YIntervalSeries s1=new YIntervalSeries(""S1"");s1.add(1.0,1.1,1.1,1.1);s1.add(2.0,2.2,2.2,2.2);s1.add(3.0,3.3,3.3,3.3);s1.setMaximumItemCount(2);assertEquals(2.0,s1.getX(0).doubleValue(),EPSILON);assertEquals(3.0,s1.getX(1).doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.YIntervalSeriesTests.testClear",0,"/** * Some checks for the clear()method.*/public void testClear(){YIntervalSeries s1=new YIntervalSeries(""S1"");s1.addChangeListener(this);s1.clear();assertNull(this.lastEvent);assertTrue(s1.isEmpty());s1.add(1.0,2.0,3.0,4.0);assertFalse(s1.isEmpty());s1.clear();assertNotNull(this.lastEvent);assertTrue(s1.isEmpty());}"
"org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){SymbolicXYItemLabelGenerator g1=new SymbolicXYItemLabelGenerator();SymbolicXYItemLabelGenerator g2=new SymbolicXYItemLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));}"
"org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){SymbolicXYItemLabelGenerator g1=new SymbolicXYItemLabelGenerator();SymbolicXYItemLabelGenerator g2=null;try {g2=(SymbolicXYItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){SymbolicXYItemLabelGenerator g1=new SymbolicXYItemLabelGenerator();SymbolicXYItemLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(SymbolicXYItemLabelGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){StandardDialFrame f1=new StandardDialFrame();StandardDialFrame f2=new StandardDialFrame();assertTrue(f1.equals(f2));f1.setRadius(0.2);assertFalse(f1.equals(f2));f2.setRadius(0.2);assertTrue(f1.equals(f2));f1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow));assertFalse(f1.equals(f2));f2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.yellow));assertTrue(f1.equals(f2));f1.setForegroundPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));assertFalse(f1.equals(f2));f2.setForegroundPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.green));assertTrue(f1.equals(f2));f1.setStroke(new BasicStroke(2.4f));assertFalse(f1.equals(f2));f2.setStroke(new BasicStroke(2.4f));assertTrue(f1.equals(f2));f1.setVisible(false);assertFalse(f1.equals(f2));f2.setVisible(false);assertTrue(f1.equals(f2));}"
"org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){StandardDialFrame f1=new StandardDialFrame();StandardDialFrame f2=new StandardDialFrame();assertTrue(f1.equals(f2));int h1=f1.hashCode();int h2=f2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardDialFrame f1=new StandardDialFrame();StandardDialFrame f2=null;try {f2=(StandardDialFrame)f1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(f1 != f2);assertTrue(f1.getClass()== f2.getClass());assertTrue(f1.equals(f2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();f1.addChangeListener(l1);assertTrue(f1.hasListener(l1));assertFalse(f2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.StandardDialFrameTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardDialFrame f1=new StandardDialFrame();StandardDialFrame f2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(f1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));f2=(StandardDialFrame)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(f1,f2);}"
"org.jfree.chart.junit.ChartRenderingInfoTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){ChartRenderingInfo i1=new ChartRenderingInfo();ChartRenderingInfo i2=new ChartRenderingInfo();assertTrue(i1.equals(i2));i1.setChartArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(i1.equals(i2));i2.setChartArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(i1.equals(i2));i1.getPlotInfo().setDataArea(new Rectangle(1,2,3,4));assertFalse(i1.equals(i2));i2.getPlotInfo().setDataArea(new Rectangle(1,2,3,4));assertTrue(i1.equals(i2));StandardEntityCollection e1=new StandardEntityCollection();e1.add(new ChartEntity(new Rectangle(1,2,3,4)));i1.setEntityCollection(e1);assertFalse(i1.equals(i2));StandardEntityCollection e2=new StandardEntityCollection();e2.add(new ChartEntity(new Rectangle(1,2,3,4)));i2.setEntityCollection(e2);}"
"org.jfree.chart.junit.ChartRenderingInfoTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ChartRenderingInfo i1=new ChartRenderingInfo();ChartRenderingInfo i2=null;try {i2=(ChartRenderingInfo)i1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(i1 != i2);assertTrue(i1.getClass()== i2.getClass());assertTrue(i1.equals(i2));i1.getChartArea().setRect(4.0,3.0,2.0,1.0);assertFalse(i1.equals(i2));i2.getChartArea().setRect(4.0,3.0,2.0,1.0);assertTrue(i1.equals(i2));i1.getEntityCollection().add(new ChartEntity(new Rectangle(1,2,2,1)));assertFalse(i1.equals(i2));i2.getEntityCollection().add(new ChartEntity(new Rectangle(1,2,2,1)));assertTrue(i1.equals(i2));}"
"org.jfree.chart.junit.ChartRenderingInfoTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ChartRenderingInfo i1=new ChartRenderingInfo();i1.setChartArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));ChartRenderingInfo i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(ChartRenderingInfo)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);}"
"org.jfree.chart.junit.ChartRenderingInfoTests.testSerialization2",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization2(){ChartRenderingInfo i1=new ChartRenderingInfo();i1.getPlotInfo().setDataArea(new Rectangle2D.Double(1.0,2.0,3.0,4.0));ChartRenderingInfo i2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(i1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));i2=(ChartRenderingInfo)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(i1,i2);assertEquals(i2,i2.getPlotInfo().getOwner());}"
"org.jfree.chart.needle.junit.ArrowNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){ArrowNeedle n1=new ArrowNeedle(false);ArrowNeedle n2=new ArrowNeedle(false);assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));n1=new ArrowNeedle(true);assertFalse(n1.equals(n2));n2=new ArrowNeedle(true);assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.ArrowNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){ArrowNeedle n1=new ArrowNeedle(false);ArrowNeedle n2=null;try {n2=(ArrowNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.ArrowNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ArrowNeedle n1=new ArrowNeedle(false);ArrowNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(ArrowNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testConstructor",0,"/** * Some checks for the constructor.*/public void testConstructor(){CandlestickRenderer r1=new CandlestickRenderer();assertEquals(Color.green,r1.getUpPaint());assertEquals(Color.red,r1.getDownPaint());assertFalse(r1.getUseOutlinePaint());assertTrue(r1.getDrawVolume());assertEquals(Color.gray,r1.getVolumePaint());assertEquals(-1.0,r1.getCandleWidth(),EPSILON);}"
"org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){CandlestickRenderer r1=new CandlestickRenderer();CandlestickRenderer r2=new CandlestickRenderer();assertEquals(r1,r2);r1.setUpPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertFalse(r1.equals(r2));r2.setUpPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertTrue(r1.equals(r2));r1.setDownPaint(new GradientPaint(5.0f,6.0f,Color.green,7.0f,8.0f,Color.yellow));assertFalse(r1.equals(r2));r2.setDownPaint(new GradientPaint(5.0f,6.0f,Color.green,7.0f,8.0f,Color.yellow));assertTrue(r1.equals(r2));r1.setDrawVolume(false);assertFalse(r1.equals(r2));r2.setDrawVolume(false);assertTrue(r1.equals(r2));r1.setCandleWidth(3.3);assertFalse(r1.equals(r2));r2.setCandleWidth(3.3);assertTrue(r1.equals(r2));r1.setMaxCandleWidthInMilliseconds(123);assertFalse(r1.equals(r2));r2.setMaxCandleWidthInMilliseconds(123);assertTrue(r1.equals(r2));r1.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST);assertFalse(r1.equals(r2));r2.setAutoWidthMethod(CandlestickRenderer.WIDTHMETHOD_SMALLEST);assertTrue(r1.equals(r2));r1.setAutoWidthFactor(0.22);assertFalse(r1.equals(r2));r2.setAutoWidthFactor(0.22);assertTrue(r1.equals(r2));r1.setAutoWidthGap(1.1);assertFalse(r1.equals(r2));r2.setAutoWidthGap(1.1);assertTrue(r1.equals(r2));r1.setUseOutlinePaint(true);assertFalse(r1.equals(r2));r2.setUseOutlinePaint(true);assertTrue(r1.equals(r2));r1.setVolumePaint(Color.blue);assertFalse(r1.equals(r2));r2.setVolumePaint(Color.blue);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){CandlestickRenderer r1=new CandlestickRenderer();CandlestickRenderer r2=new CandlestickRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CandlestickRenderer r1=new CandlestickRenderer();CandlestickRenderer r2=null;try {r2=(CandlestickRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CandlestickRenderer r1=new CandlestickRenderer();CandlestickRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(CandlestickRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.CandlestickRendererTests.testFindRangeBounds",0,"/** * Some checks for the findRangeBounds()method.*/public void testFindRangeBounds(){CandlestickRenderer renderer=new CandlestickRenderer();OHLCDataItem item1=new OHLCDataItem(new Date(1L),2.0,4.0,1.0,3.0,100);OHLCDataset dataset=new DefaultOHLCDataset(""S1"",new OHLCDataItem[]{item1});Range range=renderer.findRangeBounds(dataset);assertEquals(new Range(1.0,4.0),range);OHLCDataItem item2=new OHLCDataItem(new Date(1L),-1.0,3.0,-1.0,3.0,100);dataset=new DefaultOHLCDataset(""S1"",new OHLCDataItem[]{item1,item2});range=renderer.findRangeBounds(dataset);assertEquals(new Range(-1.0,4.0),range);dataset=new DefaultOHLCDataset(""S1"",new OHLCDataItem[]{});range=renderer.findRangeBounds(dataset);assertNull(range);range=renderer.findRangeBounds(null);assertNull(range);}"
"org.jfree.chart.entity.junit.CategoryItemEntityTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""R1"",""C1"");d.addValue(2.0,""R1"",""C2"");d.addValue(3.0,""R2"",""C1"");d.addValue(4.0,""R2"",""C2"");CategoryItemEntity e1=new CategoryItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"",d,""R2"",""C2"");CategoryItemEntity e2=new CategoryItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"",d,""R2"",""C2"");assertTrue(e1.equals(e2));e1.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertFalse(e1.equals(e2));e2.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(e1.equals(e2));e1.setToolTipText(""New ToolTip"");assertFalse(e1.equals(e2));e2.setToolTipText(""New ToolTip"");assertTrue(e1.equals(e2));e1.setURLText(""New URL"");assertFalse(e1.equals(e2));e2.setURLText(""New URL"");assertTrue(e1.equals(e2));e1.setColumnKey(""C1"");assertFalse(e1.equals(e2));e2.setColumnKey(""C1"");assertTrue(e1.equals(e2));e1.setRowKey(""R1"");assertFalse(e1.equals(e2));e2.setRowKey(""R1"");assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.CategoryItemEntityTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""R1"",""C1"");d.addValue(2.0,""R1"",""C2"");d.addValue(3.0,""R2"",""C1"");d.addValue(4.0,""R2"",""C2"");CategoryItemEntity e1=new CategoryItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"",d,""C2"",""C2"");CategoryItemEntity e2=null;try {e2=(CategoryItemEntity)e1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(e1 != e2);assertTrue(e1.getClass()== e2.getClass());assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.CategoryItemEntityTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""R1"",""C1"");d.addValue(2.0,""R1"",""C2"");d.addValue(3.0,""R2"",""C1"");d.addValue(4.0,""R2"",""C2"");CategoryItemEntity e1=new CategoryItemEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"",d,""R2"",""C2"");CategoryItemEntity e2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(e1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));e2=(CategoryItemEntity)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(e1,e2);}"
"org.jfree.chart.junit.PaintMapTests.testGetPaint",0,"/** * Some checks for the getPaint()method.*/public void testGetPaint(){PaintMap m1=new PaintMap();assertEquals(null,m1.getPaint(""A""));m1.put(""A"",Color.red);assertEquals(Color.red,m1.getPaint(""A""));m1.put(""A"",null);assertEquals(null,m1.getPaint(""A""));boolean pass=false;try {m1.getPaint(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.junit.PaintMapTests.testPut",0,"/** * Some checks for the put()method.*/public void testPut(){PaintMap m1=new PaintMap();m1.put(""A"",Color.red);assertEquals(Color.red,m1.getPaint(""A""));boolean pass=false;try {m1.put(null,Color.blue);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.junit.PaintMapTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){PaintMap m1=new PaintMap();PaintMap m2=new PaintMap();assertTrue(m1.equals(m1));assertTrue(m1.equals(m2));assertFalse(m1.equals(null));assertFalse(m1.equals(""ABC""));m1.put(""K1"",Color.red);assertFalse(m1.equals(m2));m2.put(""K1"",Color.red);assertTrue(m1.equals(m2));m1.put(""K2"",new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertFalse(m1.equals(m2));m2.put(""K2"",new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));assertTrue(m1.equals(m2));m1.put(""K2"",null);assertFalse(m1.equals(m2));m2.put(""K2"",null);assertTrue(m1.equals(m2));}"
"org.jfree.chart.junit.PaintMapTests.testCloning",0,"/** * Some checks for cloning.*/public void testCloning(){PaintMap m1=new PaintMap();PaintMap m2=null;try {m2=(PaintMap)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1.equals(m2));m1.put(""K1"",Color.red);m1.put(""K2"",new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));try {m2=(PaintMap)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1.equals(m2));}"
"org.jfree.chart.junit.PaintMapTests.testSerialization1",0,"/** * A check for serialization.*/public void testSerialization1(){PaintMap m1=new PaintMap();PaintMap m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(PaintMap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(m1,m2);}"
"org.jfree.chart.junit.PaintMapTests.testSerialization2",0,"/** * A check for serialization.*/public void testSerialization2(){PaintMap m1=new PaintMap();m1.put(""K1"",Color.red);m1.put(""K2"",new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.yellow));PaintMap m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(PaintMap)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(m1,m2);}"
"org.jfree.chart.junit.PaintMapTests.testKeysOfDifferentClasses",0,"/** * This test covers a bug reported in the forum: http://www.jfree.org/phpBB2/viewtopic.php?t=19980*/public void testKeysOfDifferentClasses(){PaintMap m=new PaintMap();m.put(""ABC"",Color.red);m.put(new Integer(99),Color.blue);assertEquals(Color.blue,m.getPaint(new Integer(99)));}"
"org.jfree.chart.title.junit.LegendTitleTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYPlot plot1=new XYPlot();LegendTitle t1=new LegendTitle(plot1);LegendTitle t2=new LegendTitle(plot1);assertEquals(t1,t2);t1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(t1.equals(t2));t2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(t1.equals(t2));t1.setLegendItemGraphicEdge(RectangleEdge.BOTTOM);assertFalse(t1.equals(t2));t2.setLegendItemGraphicEdge(RectangleEdge.BOTTOM);assertTrue(t1.equals(t2));t1.setLegendItemGraphicAnchor(RectangleAnchor.BOTTOM_LEFT);assertFalse(t1.equals(t2));t2.setLegendItemGraphicAnchor(RectangleAnchor.BOTTOM_LEFT);assertTrue(t1.equals(t2));t1.setLegendItemGraphicLocation(RectangleAnchor.TOP_LEFT);assertFalse(t1.equals(t2));t2.setLegendItemGraphicLocation(RectangleAnchor.TOP_LEFT);assertTrue(t1.equals(t2));t1.setItemFont(new Font(""Dialog"",Font.PLAIN,19));assertFalse(t1.equals(t2));t2.setItemFont(new Font(""Dialog"",Font.PLAIN,19));assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.LegendTitleTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYPlot plot1=new XYPlot();LegendTitle t1=new LegendTitle(plot1);LegendTitle t2=new LegendTitle(plot1);assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.LegendTitleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYPlot plot=new XYPlot();Rectangle2D bounds1=new Rectangle2D.Double(10.0,20.0,30.0,40.0);LegendTitle t1=new LegendTitle(plot);t1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));t1.setBounds(bounds1);LegendTitle t2=null;try {t2=(LegendTitle)t1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));bounds1.setFrame(40.0,30.0,20.0,10.0);assertFalse(t1.equals(t2));t2.setBounds(new Rectangle2D.Double(40.0,30.0,20.0,10.0));assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.LegendTitleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYPlot plot=new XYPlot();LegendTitle t1=new LegendTitle(plot);LegendTitle t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(LegendTitle)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertTrue(t1.equals(t2));assertTrue(t2.getSources()[0].equals(plot));}"
"org.jfree.chart.util.junit.PaintListTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){PaintList l1=new PaintList();l1.setPaint(0,Color.red);l1.setPaint(1,Color.blue);l1.setPaint(2,null);PaintList l2=new PaintList();l2.setPaint(0,Color.red);l2.setPaint(1,Color.blue);l2.setPaint(2,null);assertTrue(l1.equals(l2));assertTrue(l2.equals(l2));}"
"org.jfree.chart.util.junit.PaintListTests.testEquals2",0,"/** * Tests the equals method.*/public void testEquals2(){PaintList l1=new PaintList();Color color1=new Color(200,200,200);l1.setPaint(0,color1);PaintList l2=new PaintList();Color color2=new Color(200,200,200);l2.setPaint(0,color2);assertEquals(l1,l2);}"
"org.jfree.chart.util.junit.PaintListTests.testEquals3",0,"/** * Tests the equals()method when the list contains a GradientPaint  instance.*/public void testEquals3(){PaintList l1=new PaintList();Paint p1=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue);l1.setPaint(0,p1);PaintList l2=new PaintList();Paint p2=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue);l2.setPaint(0,p2);assertEquals(l1,l2);}"
"org.jfree.chart.util.junit.PaintListTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PaintList l1=new PaintList();l1.setPaint(0,Color.red);l1.setPaint(1,Color.blue);l1.setPaint(2,null);PaintList l2=null;try {l2=(PaintList)l1.clone();}catch(CloneNotSupportedException e){System.err.println(""PaintListTests.testCloning: failed to clone."");}assertTrue(l1 != l2);assertTrue(l1.getClass()== l2.getClass());assertTrue(l1.equals(l2));l2.setPaint(0,Color.green);assertFalse(l1.equals(l2));}"
"org.jfree.chart.util.junit.PaintListTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PaintList l1=new PaintList();l1.setPaint(0,Color.red);l1.setPaint(1,Color.blue);l1.setPaint(2,null);PaintList l2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(l1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));l2=(PaintList)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(l1,l2);}"
"org.jfree.chart.util.junit.PaintListTests.testHashCode",0,"/** * Some checks for the testHashCode()method.*/public void testHashCode(){}"
"org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){StandardDialScale s1=new StandardDialScale();StandardDialScale s2=new StandardDialScale();assertTrue(s1.equals(s2));s1=new StandardDialScale(10.0,100.0,0.0,270.0,10.0,4);assertFalse(s1.equals(s2));s2=new StandardDialScale(10.0,100.0,0.0,270.0,10.0,4);assertTrue(s1.equals(s2));s1=new StandardDialScale(10.0,200.0,0.0,270.0,10.0,4);assertFalse(s1.equals(s2));s2=new StandardDialScale(10.0,200.0,0.0,270.0,10.0,4);assertTrue(s1.equals(s2));s1=new StandardDialScale(10.0,200.0,20.0,270.0,10.0,4);assertFalse(s1.equals(s2));s2=new StandardDialScale(10.0,200.0,20.0,270.0,10.0,4);assertTrue(s1.equals(s2));s1=new StandardDialScale(10.0,200.0,20.0,99.0,10.0,4);assertFalse(s1.equals(s2));s2=new StandardDialScale(10.0,200.0,20.0,99.0,10.0,4);assertTrue(s1.equals(s2));s1.setTickRadius(0.99);assertFalse(s1.equals(s2));s2.setTickRadius(0.99);assertTrue(s1.equals(s2));s1.setMajorTickIncrement(11.1);assertFalse(s1.equals(s2));s2.setMajorTickIncrement(11.1);assertTrue(s1.equals(s2));s1.setMajorTickLength(0.09);assertFalse(s1.equals(s2));s2.setMajorTickLength(0.09);assertTrue(s1.equals(s2));s1.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(s1.equals(s2));s2.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(s1.equals(s2));s1.setMajorTickStroke(new BasicStroke(1.1f));assertFalse(s1.equals(s2));s2.setMajorTickStroke(new BasicStroke(1.1f));assertTrue(s1.equals(s2));s1.setMinorTickCount(7);assertFalse(s1.equals(s2));s2.setMinorTickCount(7);assertTrue(s1.equals(s2));s1.setMinorTickLength(0.09);assertFalse(s1.equals(s2));s2.setMinorTickLength(0.09);assertTrue(s1.equals(s2));s1.setTickLabelOffset(0.11);assertFalse(s1.equals(s2));s2.setTickLabelOffset(0.11);assertTrue(s1.equals(s2));s1.setTickLabelFont(new Font(""Dialog"",Font.PLAIN,15));assertFalse(s1.equals(s2));s2.setTickLabelFont(new Font(""Dialog"",Font.PLAIN,15));assertTrue(s1.equals(s2));s1.setTickLabelPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.green));assertFalse(s1.equals(s2));s2.setTickLabelPaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.green));assertTrue(s1.equals(s2));s1.setTickLabelsVisible(false);assertFalse(s1.equals(s2));s2.setTickLabelsVisible(false);assertTrue(s1.equals(s2));s1.setVisible(false);assertFalse(s1.equals(s2));s2.setVisible(false);assertTrue(s1.equals(s2));}"
"org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){StandardDialScale s1=new StandardDialScale();StandardDialScale s2=new StandardDialScale();assertTrue(s1.equals(s2));int h1=s1.hashCode();int h2=s2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardDialScale s1=new StandardDialScale();StandardDialScale s2=null;try {s2=(StandardDialScale)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));s1=new StandardDialScale();s1.setExtent(123.4);s1.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));s1.setMajorTickStroke(new BasicStroke(2.0f));s2=null;try {s2=(StandardDialScale)s1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(s1 != s2);assertTrue(s1.getClass()== s2.getClass());assertTrue(s1.equals(s2));MyDialLayerChangeListener l1=new MyDialLayerChangeListener();s1.addChangeListener(l1);assertTrue(s1.hasListener(l1));assertFalse(s2.hasListener(l1));}"
"org.jfree.chart.plot.dial.junit.StandardDialScaleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardDialScale s1=new StandardDialScale();StandardDialScale s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(StandardDialScale)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);s1=new StandardDialScale();s1.setExtent(123.4);s1.setMajorTickPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));s1.setMajorTickStroke(new BasicStroke(2.0f));s2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(s1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));s2=(StandardDialScale)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(s1,s2);}"
"org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){YIntervalSeriesCollection c1=new YIntervalSeriesCollection();YIntervalSeriesCollection c2=new YIntervalSeriesCollection();assertEquals(c1,c2);YIntervalSeries s1=new YIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);c1.addSeries(s1);assertFalse(c1.equals(c2));YIntervalSeries s2=new YIntervalSeries(""Series"");s2.add(1.0,1.1,1.2,1.3);c2.addSeries(s2);assertTrue(c1.equals(c2));c1.addSeries(new YIntervalSeries(""Empty Series""));assertFalse(c1.equals(c2));c2.addSeries(new YIntervalSeries(""Empty Series""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){YIntervalSeriesCollection c1=new YIntervalSeriesCollection();YIntervalSeries s1=new YIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);c1.addSeries(s1);YIntervalSeriesCollection c2=null;try {c2=(YIntervalSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));s1.setDescription(""XYZ"");assertFalse(c1.equals(c2));}"
"org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){YIntervalSeriesCollection c1=new YIntervalSeriesCollection();YIntervalSeries s1=new YIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);YIntervalSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(YIntervalSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.xy.junit.YIntervalSeriesCollectionTests.test1170825",0,"/** * A test for bug report 1170825 (originally affected XYSeriesCollection,this test is just copied over).*/public void test1170825(){YIntervalSeries s1=new YIntervalSeries(""Series1"");YIntervalSeriesCollection dataset=new YIntervalSeriesCollection();dataset.addSeries(s1);try {dataset.getSeries(1);}catch(IllegalArgumentException e){}catch(IndexOutOfBoundsException e){assertTrue(false);}}"
"org.jfree.chart.junit.LineChart3DTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.LineChart3DTests.testReplaceDataset",0,"/** * Replaces the chart's dataset and then checks that the new dataset is OK.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.LineChart3DTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.LineChart3DTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.data.time.junit.TimePeriodValuesCollectionTests.test1161340",0,"/** * A test for bug report 1161340.  I wasn't able to reproduce the problem with this test.*/public void test1161340(){TimePeriodValuesCollection dataset=new TimePeriodValuesCollection();TimePeriodValues v1=new TimePeriodValues(""V1"");v1.add(new Day(11,3,2005),1.2);v1.add(new Day(12,3,2005),3.4);dataset.addSeries(v1);assertEquals(1,dataset.getSeriesCount());dataset.removeSeries(v1);assertEquals(0,dataset.getSeriesCount());TimePeriodValues v2=new TimePeriodValues(""V2"");v1.add(new Day(5,3,2005),1.2);v1.add(new Day(6,3,2005),3.4);dataset.addSeries(v2);assertEquals(1,dataset.getSeriesCount());}"
"org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){TimePeriodValuesCollection c1=new TimePeriodValuesCollection();TimePeriodValuesCollection c2=new TimePeriodValuesCollection();assertTrue(c1.equals(c2));c1.setXPosition(TimePeriodAnchor.END);assertFalse(c1.equals(c2));c2.setXPosition(TimePeriodAnchor.END);assertTrue(c1.equals(c2));TimePeriodValues v1=new TimePeriodValues(""Test"");TimePeriodValues v2=new TimePeriodValues(""Test"");c1.addSeries(v1);assertFalse(c1.equals(c2));c2.addSeries(v2);assertTrue(c1.equals(c2));}"
"org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TimePeriodValuesCollection c1=new TimePeriodValuesCollection();TimePeriodValuesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(TimePeriodValuesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testGetSeries",0,"/** * Some basic checks for the getSeries()method.*/public void testGetSeries(){TimePeriodValuesCollection c1=new TimePeriodValuesCollection();TimePeriodValues s1=new TimePeriodValues(""Series 1"");c1.addSeries(s1);assertEquals(""Series 1"",c1.getSeries(0).getKey());boolean pass=false;try {c1.getSeries(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {c1.getSeries(1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testGetDomainBoundsWithoutInterval",0,"/** * Some checks for the getDomainBounds()method.*/public void testGetDomainBoundsWithoutInterval(){TimePeriodValuesCollection dataset=new TimePeriodValuesCollection();Range r=dataset.getDomainBounds(false);assertNull(r);TimePeriodValues s1=new TimePeriodValues(""S1"");s1.add(new SimpleTimePeriod(1000L,2000L),1.0);dataset.addSeries(s1);r=dataset.getDomainBounds(false);assertEquals(1500.0,r.getLowerBound(),EPSILON);assertEquals(1500.0,r.getUpperBound(),EPSILON);s1.add(new SimpleTimePeriod(1500L,3000L),2.0);r=dataset.getDomainBounds(false);assertEquals(1500.0,r.getLowerBound(),EPSILON);assertEquals(2250.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.time.junit.TimePeriodValuesCollectionTests.testGetDomainBoundsWithInterval",0,"/** * Some more checks for the getDomainBounds()method.* @see #testGetDomainBoundsWithoutInterval()*/public void testGetDomainBoundsWithInterval(){TimePeriodValuesCollection dataset=new TimePeriodValuesCollection();Range r=dataset.getDomainBounds(true);assertNull(r);TimePeriodValues s1=new TimePeriodValues(""S1"");s1.add(new SimpleTimePeriod(1000L,2000L),1.0);dataset.addSeries(s1);r=dataset.getDomainBounds(true);assertEquals(1000.0,r.getLowerBound(),EPSILON);assertEquals(2000.0,r.getUpperBound(),EPSILON);s1.add(new SimpleTimePeriod(1500L,3000L),2.0);r=dataset.getDomainBounds(true);assertEquals(1000.0,r.getLowerBound(),EPSILON);assertEquals(3000.0,r.getUpperBound(),EPSILON);}"
"org.jfree.chart.block.junit.BorderArrangementTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){BorderArrangement b1=new BorderArrangement();BorderArrangement b2=new BorderArrangement();assertTrue(b1.equals(b2));assertTrue(b2.equals(b1));b1.add(new EmptyBlock(99.0,99.0),null);assertFalse(b1.equals(b2));b2.add(new EmptyBlock(99.0,99.0),null);assertTrue(b1.equals(b2));b1.add(new EmptyBlock(1.0,1.0),RectangleEdge.LEFT);assertFalse(b1.equals(b2));b2.add(new EmptyBlock(1.0,1.0),RectangleEdge.LEFT);assertTrue(b1.equals(b2));b1.add(new EmptyBlock(2.0,2.0),RectangleEdge.RIGHT);assertFalse(b1.equals(b2));b2.add(new EmptyBlock(2.0,2.0),RectangleEdge.RIGHT);assertTrue(b1.equals(b2));b1.add(new EmptyBlock(3.0,3.0),RectangleEdge.TOP);assertFalse(b1.equals(b2));b2.add(new EmptyBlock(3.0,3.0),RectangleEdge.TOP);assertTrue(b1.equals(b2));b1.add(new EmptyBlock(4.0,4.0),RectangleEdge.BOTTOM);assertFalse(b1.equals(b2));b2.add(new EmptyBlock(4.0,4.0),RectangleEdge.BOTTOM);assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.BorderArrangementTests.testCloning",0,"/** * Immutable - cloning is not necessary.*/public void testCloning(){BorderArrangement b1=new BorderArrangement();assertFalse(b1 instanceof Cloneable);}"
"org.jfree.chart.block.junit.BorderArrangementTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BorderArrangement b1=new BorderArrangement();BorderArrangement b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(BorderArrangement)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(b1,b2);}"
"org.jfree.chart.block.junit.BorderArrangementTests.testSizing",0,"/** * Run some checks on sizing.*/public void testSizing(){BlockContainer container=new BlockContainer(new BorderArrangement());BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();Size2D size=container.arrange(g2);assertEquals(0.0,size.width,EPSILON);assertEquals(0.0,size.height,EPSILON);container.add(new EmptyBlock(123.4,567.8));size=container.arrange(g2);assertEquals(123.4,size.width,EPSILON);assertEquals(567.8,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);size=container.arrange(g2);assertEquals(22.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();Block rb=new EmptyBlock(12.3,15.6);container.add(new EmptyBlock(10.0,20.0));container.add(rb,RectangleEdge.RIGHT);size=container.arrange(g2);assertEquals(22.3,size.width,EPSILON);assertEquals(20.0,size.height,EPSILON);assertEquals(20.0,rb.getBounds().getHeight(),EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2);assertEquals(22.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();Block lb=new EmptyBlock(12.3,15.6);container.add(new EmptyBlock(10.0,20.0));container.add(lb,RectangleEdge.LEFT);size=container.arrange(g2);assertEquals(22.3,size.width,EPSILON);assertEquals(20.0,size.height,EPSILON);assertEquals(20.0,lb.getBounds().getHeight(),EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2);assertEquals(22.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);container.add(new EmptyBlock(5.4,3.2),RectangleEdge.RIGHT);size=container.arrange(g2);assertEquals(27.7,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(31.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(31.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(31.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2);assertEquals(21.0,size.width,EPSILON);assertEquals(14.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);size=container.arrange(g2);assertEquals(33.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2);assertEquals(33.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2);assertEquals(33.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2);assertEquals(21.0,size.width,EPSILON);assertEquals(12.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(12.3,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(21.0,size.width,EPSILON);assertEquals(77.9,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(21.0,size.width,EPSILON);assertEquals(77.9,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2);assertEquals(16.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.LEFT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2);assertEquals(21.0,size.width,EPSILON);assertEquals(77.9,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2);assertEquals(14.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);size=container.arrange(g2);assertEquals(12.0,size.width,EPSILON);assertEquals(14.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2);assertEquals(21.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);}"
"org.jfree.chart.block.junit.BorderArrangementTests.testSizingWithWidthConstraint",0,"/** * Run some checks on sizing when there is a fixed width constraint.*/public void testSizingWithWidthConstraint(){RectangleConstraint constraint=new RectangleConstraint(10.0,new Range(10.0,10.0),LengthConstraintType.FIXED,0.0,new Range(0.0,0.0),LengthConstraintType.NONE);BlockContainer container=new BlockContainer(new BorderArrangement());BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();container.add(new EmptyBlock(5.0,6.0));Size2D size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(6.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(15.0,16.0));size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(7.0,20.0));container.add(new EmptyBlock(8.0,45.6),RectangleEdge.RIGHT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);container.add(new EmptyBlock(5.4,3.2),RectangleEdge.RIGHT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(14.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(45.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0));container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.RIGHT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.LEFT);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.TOP);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.LEFT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(12.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(65.6,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3));container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(77.9,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.RIGHT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(77.9,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(21.0,12.3),RectangleEdge.LEFT);container.add(new EmptyBlock(10.0,20.0),RectangleEdge.TOP);container.add(new EmptyBlock(12.3,45.6),RectangleEdge.BOTTOM);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(77.9,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(14.0,size.height,EPSILON);container.clear();container.add(new EmptyBlock(1.0,2.0),RectangleEdge.TOP);container.add(new EmptyBlock(3.0,4.0),RectangleEdge.BOTTOM);container.add(new EmptyBlock(5.0,6.0),RectangleEdge.LEFT);container.add(new EmptyBlock(7.0,8.0),RectangleEdge.RIGHT);container.add(new EmptyBlock(9.0,10.0));size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(16.0,size.height,EPSILON);container.clear();size=container.arrange(g2,constraint);assertEquals(10.0,size.width,EPSILON);assertEquals(0.0,size.height,EPSILON);}"
"org.jfree.data.xy.junit.MatrixSeriesTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){MatrixSeries m1=new MatrixSeries(""Test"",8,3);m1.update(0,0,11.0);m1.update(7,2,22.0);MatrixSeries m2=new MatrixSeries(""Test"",8,3);m2.update(0,0,11.0);m2.update(7,2,22.0);assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1=new MatrixSeries(""Test 2"",8,3);assertFalse(m1.equals(m2));m2=new MatrixSeries(""Test 2"",8,3);assertTrue(m1.equals(m2));m1=new MatrixSeries(""Test 2"",10,3);assertFalse(m1.equals(m2));m2=new MatrixSeries(""Test 2"",10,3);assertTrue(m1.equals(m2));m1=new MatrixSeries(""Test 2"",10,5);assertFalse(m1.equals(m2));m2=new MatrixSeries(""Test 2"",10,5);assertTrue(m1.equals(m2));m1.update(0,0,99);assertFalse(m1.equals(m2));m2.update(0,0,99);assertTrue(m1.equals(m2));}"
"org.jfree.data.xy.junit.MatrixSeriesTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){MatrixSeries m1=new MatrixSeries(""Test"",8,3);m1.update(0,0,11.0);m1.update(7,2,22.0);MatrixSeries m2=null;try {m2=(MatrixSeries)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1 != m2);assertTrue(m1.getClass()== m2.getClass());assertTrue(m1.equals(m2));}"
"org.jfree.data.xy.junit.MatrixSeriesTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MatrixSeries m1=new MatrixSeries(""Test"",8,3);m1.update(0,0,11.0);m1.update(7,2,22.0);MatrixSeries m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(MatrixSeries)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(m1,m2);}"
"org.jfree.data.xy.junit.MatrixSeriesTests.testGetItemColumn",0,"/** * Tests the getItemColumn()method.*/public void testGetItemColumn(){MatrixSeries m=new MatrixSeries(""Test"",3,2);assertEquals(0,m.getItemColumn(0));assertEquals(1,m.getItemColumn(1));assertEquals(0,m.getItemColumn(2));assertEquals(1,m.getItemColumn(3));assertEquals(0,m.getItemColumn(4));assertEquals(1,m.getItemColumn(5));}"
"org.jfree.data.xy.junit.MatrixSeriesTests.testGetItemRow",0,"/** * Tests the getItemRow()method.*/public void testGetItemRow(){MatrixSeries m=new MatrixSeries(""Test"",3,2);assertEquals(0,m.getItemRow(0));assertEquals(0,m.getItemRow(1));assertEquals(1,m.getItemRow(2));assertEquals(1,m.getItemRow(3));assertEquals(2,m.getItemRow(4));assertEquals(2,m.getItemRow(5));}"
"org.jfree.data.xy.junit.MatrixSeriesTests.testGetItem",0,"/** * Tests the getItem()method.*/public void testGetItem(){MatrixSeries m=new MatrixSeries(""Test"",3,2);m.update(0,0,0.0);m.update(0,1,1.0);m.update(1,0,2.0);m.update(1,1,3.0);m.update(2,0,4.0);m.update(2,1,5.0);assertEquals(0.0,m.getItem(0).doubleValue(),0.001);assertEquals(1.0,m.getItem(1).doubleValue(),0.001);assertEquals(2.0,m.getItem(2).doubleValue(),0.001);assertEquals(3.0,m.getItem(3).doubleValue(),0.001);assertEquals(4.0,m.getItem(4).doubleValue(),0.001);assertEquals(5.0,m.getItem(5).doubleValue(),0.001);}"
"org.jfree.chart.junit.StackedBarChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.StackedBarChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.StackedBarChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.StackedBarChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.annotations.junit.XYImageAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Image image=JFreeChart.INFO.getLogo();XYImageAnnotation a1=new XYImageAnnotation(10.0,20.0,image);XYImageAnnotation a2=new XYImageAnnotation(10.0,20.0,image);assertTrue(a1.equals(a2));a1=new XYImageAnnotation(10.0,20.0,image,RectangleAnchor.LEFT);assertFalse(a1.equals(a2));a2=new XYImageAnnotation(10.0,20.0,image,RectangleAnchor.LEFT);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYImageAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Image image=JFreeChart.INFO.getLogo();XYImageAnnotation a1=new XYImageAnnotation(10.0,20.0,image);XYImageAnnotation a2=new XYImageAnnotation(10.0,20.0,image);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYImageAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYImageAnnotation a1=new XYImageAnnotation(10.0,20.0,JFreeChart.INFO.getLogo());XYImageAnnotation a2=null;try {a2=(XYImageAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.block.junit.AbstractBlockTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){EmptyBlock b1=new EmptyBlock(1.0,2.0);EmptyBlock b2=new EmptyBlock(1.0,2.0);assertTrue(b1.equals(b2));assertTrue(b2.equals(b2));b1.setID(""Test"");assertFalse(b1.equals(b2));b2.setID(""Test"");assertTrue(b1.equals(b2));b1.setMargin(new RectangleInsets(1.0,2.0,3.0,4.0));assertFalse(b1.equals(b2));b2.setMargin(new RectangleInsets(1.0,2.0,3.0,4.0));assertTrue(b1.equals(b2));b1.setFrame(new BlockBorder(Color.red));assertFalse(b1.equals(b2));b2.setFrame(new BlockBorder(Color.red));assertTrue(b1.equals(b2));b1.setPadding(new RectangleInsets(2.0,4.0,6.0,8.0));assertFalse(b1.equals(b2));b2.setPadding(new RectangleInsets(2.0,4.0,6.0,8.0));assertTrue(b1.equals(b2));b1.setWidth(1.23);assertFalse(b1.equals(b2));b2.setWidth(1.23);assertTrue(b1.equals(b2));b1.setHeight(4.56);assertFalse(b1.equals(b2));b2.setHeight(4.56);assertTrue(b1.equals(b2));b1.setBounds(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(b1.equals(b2));b2.setBounds(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(b1.equals(b2));b1=new EmptyBlock(1.1,2.0);assertFalse(b1.equals(b2));b2=new EmptyBlock(1.1,2.0);assertTrue(b1.equals(b2));b1=new EmptyBlock(1.1,2.2);assertFalse(b1.equals(b2));b2=new EmptyBlock(1.1,2.2);assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.AbstractBlockTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){EmptyBlock b1=new EmptyBlock(1.0,2.0);Rectangle2D bounds1=new Rectangle2D.Double(1.0,2.0,3.0,4.0);b1.setBounds(bounds1);EmptyBlock b2=null;try {b2=(EmptyBlock)b1.clone();}catch(CloneNotSupportedException e){fail(e.toString());}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));bounds1.setFrame(2.0,4.0,6.0,8.0);assertFalse(b1.equals(b2));b2.setBounds(new Rectangle2D.Double(2.0,4.0,6.0,8.0));assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.AbstractBlockTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){EmptyBlock b1=new EmptyBlock(1.0,2.0);EmptyBlock b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(EmptyBlock)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(b1,b2);}"
"org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){CombinedRangeCategoryPlot plot1=createPlot();CombinedRangeCategoryPlot plot2=createPlot();assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CombinedRangeCategoryPlot plot1=createPlot();CombinedRangeCategoryPlot plot2=null;try {plot2=(CombinedRangeCategoryPlot)plot1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(plot1 != plot2);assertTrue(plot1.getClass()== plot2.getClass());assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CombinedRangeCategoryPlot plot1=createPlot();CombinedRangeCategoryPlot plot2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(plot1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));plot2=(CombinedRangeCategoryPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(plot1,plot2);}"
"org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests.testRemoveSubplot",0,"/** * This is a test to replicate the bug report 1121172.*/public void testRemoveSubplot(){CombinedRangeCategoryPlot plot=new CombinedRangeCategoryPlot();CategoryPlot plot1=new CategoryPlot();CategoryPlot plot2=new CategoryPlot();CategoryPlot plot3=new CategoryPlot();plot.add(plot1);plot.add(plot2);plot.add(plot3);plot.remove(plot2);List plots=plot.getSubplots();assertEquals(2,plots.size());}"
"org.jfree.data.time.junit.HourTests.testEqualsSelf",0,"/** * Check that an Hour instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Hour hour=new Hour();assertTrue(hour.equals(hour));}"
"org.jfree.data.time.junit.HourTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Hour hour1=new Hour(15,new Day(29,MonthConstants.MARCH,2002));Hour hour2=new Hour(15,new Day(29,MonthConstants.MARCH,2002));assertTrue(hour1.equals(hour2));}"
"org.jfree.data.time.junit.HourTests.testDateConstructor1",0,"/** * In GMT,the 4pm on 21 Mar 2002 is java.util.Date(1,014,307,200,000L).   Use this to check the hour constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Hour h1=new Hour(new Date(1014307199999L),zone);Hour h2=new Hour(new Date(1014307200000L),zone);assertEquals(15,h1.getHour());assertEquals(1014307199999L,h1.getLastMillisecond(c));assertEquals(16,h2.getHour());assertEquals(1014307200000L,h2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.HourTests.testDateConstructor2",0,"/** * In Sydney,the 4pm on 21 Mar 2002 is java.util.Date(1,014,267,600,000L). Use this to check the hour constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""Australia/Sydney"");Calendar c=new GregorianCalendar(zone);Hour h1=new Hour(new Date(1014267599999L),zone);Hour h2=new Hour(new Date(1014267600000L),zone);assertEquals(15,h1.getHour());assertEquals(1014267599999L,h1.getLastMillisecond(c));assertEquals(16,h2.getHour());assertEquals(1014267600000L,h2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.HourTests.testFirstHourPrevious",0,"/** * Set up an hour equal to hour zero,1 January 1900.  Request the  previous hour,it should be null.*/public void testFirstHourPrevious(){Hour first=new Hour(0,new Day(1,MonthConstants.JANUARY,1900));Hour previous=(Hour)first.previous();assertNull(previous);}"
"org.jfree.data.time.junit.HourTests.testFirstHourNext",0,"/** * Set up an hour equal to hour zero,1 January 1900.  Request the next  hour,it should be null.*/public void testFirstHourNext(){Hour first=new Hour(0,new Day(1,MonthConstants.JANUARY,1900));Hour next=(Hour)first.next();assertEquals(1,next.getHour());assertEquals(1900,next.getYear());}"
"org.jfree.data.time.junit.HourTests.testLastHourPrevious",0,"/** * Set up an hour equal to hour zero,1 January 1900.  Request the previous hour,it should be null.*/public void testLastHourPrevious(){Hour last=new Hour(23,new Day(31,MonthConstants.DECEMBER,9999));Hour previous=(Hour)last.previous();assertEquals(22,previous.getHour());assertEquals(9999,previous.getYear());}"
"org.jfree.data.time.junit.HourTests.testLastHourNext",0,"/** * Set up an hour equal to hour zero,1 January 1900.  Request the next  hour,it should be null.*/public void testLastHourNext(){Hour last=new Hour(23,new Day(31,MonthConstants.DECEMBER,9999));Hour next=(Hour)last.next();assertNull(next);}"
"org.jfree.data.time.junit.HourTests.testParseHour",0,"/** * Problem for date parsing.*/public void testParseHour(){Hour h=Hour.parseHour(""2002-01-29 13"");assertEquals(13,h.getHour());}"
"org.jfree.data.time.junit.HourTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Hour h1=new Hour();Hour h2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(h1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));h2=(Hour)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(h1,h2);}"
"org.jfree.data.time.junit.HourTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Hour h1=new Hour(7,9,10,1999);Hour h2=new Hour(7,9,10,1999);assertTrue(h1.equals(h2));int hash1=h1.hashCode();int hash2=h2.hashCode();assertEquals(hash1,hash2);}"
"org.jfree.data.time.junit.HourTests.testNotCloneable",0,"/** * The  {@link Hour}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Hour h=new Hour(7,9,10,1999);assertFalse(h instanceof Cloneable);}"
"org.jfree.data.time.junit.HourTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Hour h=new Hour(15,1,4,2006);assertEquals(1143900000000L,h.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.HourTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Hour h=new Hour(15,1,4,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-623293200000L,h.getFirstMillisecond(c));boolean pass=false;try {h.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.HourTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Hour h=new Hour(2,15,4,2000);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(955764000000L,h.getFirstMillisecond(calendar));boolean pass=false;try {h.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.HourTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Hour h=new Hour(1,1,1,1970);assertEquals(3599999L,h.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.HourTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Hour h=new Hour(2,7,7,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-614959200001L,h.getLastMillisecond(c));boolean pass=false;try {h.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.HourTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Hour h=new Hour(21,21,4,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(987890399999L,h.getLastMillisecond(calendar));boolean pass=false;try {h.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.HourTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Hour h=new Hour(1,1,1,2000);assertEquals(876625L,h.getSerialIndex());h=new Hour(1,1,1,1900);assertEquals(49L,h.getSerialIndex());}"
"org.jfree.data.time.junit.HourTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Hour h=new Hour(1,12,12,2000);h=(Hour)h.next();assertEquals(2000,h.getYear());assertEquals(12,h.getMonth());assertEquals(12,h.getDayOfMonth());assertEquals(2,h.getHour());h=new Hour(23,31,12,9999);assertNull(h.next());}"
"org.jfree.data.time.junit.HourTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,0,0);cal.set(Calendar.MILLISECOND,0);Hour h=new Hour(3,16,1,2006);assertEquals(cal.getTime(),h.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.HourTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,8,1,59,59);cal.set(Calendar.MILLISECOND,999);Hour h=new Hour(1,8,1,2006);assertEquals(cal.getTime(),h.getEnd());Locale.setDefault(saved);}"
"org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){LineRenderer3D r1=new LineRenderer3D();LineRenderer3D r2=new LineRenderer3D();assertEquals(r1,r2);r1.setXOffset(99.9);assertFalse(r1.equals(r2));r2.setXOffset(99.9);assertTrue(r1.equals(r2));r1.setYOffset(111.1);assertFalse(r1.equals(r2));r2.setYOffset(111.1);assertTrue(r1.equals(r2));r1.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(r1.equals(r2));r2.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){LineRenderer3D r1=new LineRenderer3D();LineRenderer3D r2=new LineRenderer3D();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LineRenderer3D r1=new LineRenderer3D();LineRenderer3D r2=null;try {r2=(LineRenderer3D)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(checkIndependence(r1,r2));}"
"org.jfree.chart.renderer.category.junit.LineRenderer3DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LineRenderer3D r1=new LineRenderer3D();LineRenderer3D r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(LineRenderer3D)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.junit.PieChartTests.testReplaceDatasetOnPieChart",0,"/** * Using a regular pie chart,we replace the dataset with null.  Expect to  receive notification of a chart change event,and (of course)the  dataset should be null.*/public void testReplaceDatasetOnPieChart(){LocalListener l=new LocalListener();this.pieChart.addChangeListener(l);PiePlot plot=(PiePlot)this.pieChart.getPlot();plot.setDataset(null);assertEquals(true,l.flag);assertNull(plot.getDataset());}"
"org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){StackedAreaRenderer r1=new StackedAreaRenderer();StackedAreaRenderer r2=new StackedAreaRenderer();assertEquals(r1,r2);r1.setRenderAsPercentages(true);assertFalse(r1.equals(r2));r2.setRenderAsPercentages(true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StackedAreaRenderer r1=new StackedAreaRenderer();StackedAreaRenderer r2=new StackedAreaRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StackedAreaRenderer r1=new StackedAreaRenderer();StackedAreaRenderer r2=null;try {r2=(StackedAreaRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StackedAreaRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StackedAreaRenderer r1=new StackedAreaRenderer();StackedAreaRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StackedAreaRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testGenerateLabel",0,"/** * Some checks for the generalLabel()method.*/public void testGenerateLabel(){StandardCategorySeriesLabelGenerator g=new StandardCategorySeriesLabelGenerator(""{0}"");DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,""R0"",""C0"");dataset.addValue(2.0,""R0"",""C1"");dataset.addValue(3.0,""R1"",""C0"");dataset.addValue(null,""R1"",""C1"");String s=g.generateLabel(dataset,0);assertEquals(""R0"",s);}"
"org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){StandardCategorySeriesLabelGenerator g1=new StandardCategorySeriesLabelGenerator();StandardCategorySeriesLabelGenerator g2=new StandardCategorySeriesLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardCategorySeriesLabelGenerator(""{1}"");assertFalse(g1.equals(g2));g2=new StandardCategorySeriesLabelGenerator(""{1}"");assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardCategorySeriesLabelGenerator g1=new StandardCategorySeriesLabelGenerator(""{1}"");StandardCategorySeriesLabelGenerator g2=null;try {g2=(StandardCategorySeriesLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardCategorySeriesLabelGenerator g1=new StandardCategorySeriesLabelGenerator(""{2}"");StandardCategorySeriesLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardCategorySeriesLabelGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultBoxAndWhiskerCategoryDataset d1=new DefaultBoxAndWhiskerCategoryDataset();d1.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList()),""ROW1"",""COLUMN1"");DefaultBoxAndWhiskerCategoryDataset d2=new DefaultBoxAndWhiskerCategoryDataset();d2.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList()),""ROW1"",""COLUMN1"");assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultBoxAndWhiskerCategoryDataset d1=new DefaultBoxAndWhiskerCategoryDataset();d1.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList()),""ROW1"",""COLUMN1"");DefaultBoxAndWhiskerCategoryDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultBoxAndWhiskerCategoryDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultBoxAndWhiskerCategoryDataset d1=new DefaultBoxAndWhiskerCategoryDataset();d1.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList()),""ROW1"",""COLUMN1"");DefaultBoxAndWhiskerCategoryDataset d2=null;try {d2=(DefaultBoxAndWhiskerCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),new Double(8.0),new ArrayList()),""ROW2"",""COLUMN1"");assertFalse(d1.equals(d2));}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.test1701822",0,"/** * A simple test for bug report 1701822.*/public void test1701822(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();try {dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),null,new Double(8.0),new ArrayList()),""ROW1"",""COLUMN1"");dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(5.0),new Double(6.0),new Double(7.0),null,new ArrayList()),""ROW1"",""COLUMN2"");}catch(NullPointerException e){assertTrue(false);}}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testAdd",0,"/** * Some checks for the add()method.*/public void testAdd(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();BoxAndWhiskerItem item1=new BoxAndWhiskerItem(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,new ArrayList());dataset.add(item1,""R1"",""C1"");assertEquals(2.0,dataset.getValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(1.0,dataset.getMeanValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(2.0,dataset.getMedianValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(3.0,dataset.getQ1Value(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(4.0,dataset.getQ3Value(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(5.0,dataset.getMinRegularValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(6.0,dataset.getMaxRegularValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(7.0,dataset.getMinOutlier(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(8.0,dataset.getMaxOutlier(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(new Range(7.0,8.0),dataset.getRangeBounds(false));}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testAddUpdatesCachedRange",0,"/** * Some checks for the add()method.*/public void testAddUpdatesCachedRange(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();BoxAndWhiskerItem item1=new BoxAndWhiskerItem(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,new ArrayList());dataset.add(item1,""R1"",""C1"");BoxAndWhiskerItem item2=new BoxAndWhiskerItem(1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,new ArrayList());dataset.add(item2,""R1"",""C1"");assertEquals(2.5,dataset.getValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(1.5,dataset.getMeanValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(2.5,dataset.getMedianValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(3.5,dataset.getQ1Value(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(4.5,dataset.getQ3Value(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(5.5,dataset.getMinRegularValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(6.5,dataset.getMaxRegularValue(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(7.5,dataset.getMinOutlier(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(8.5,dataset.getMaxOutlier(""R1"",""C1"").doubleValue(),EPSILON);assertEquals(new Range(7.5,8.5),dataset.getRangeBounds(false));}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testConstructor",0,"/** * Some basic checks for the constructor.*/public void testConstructor(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();assertEquals(0,dataset.getColumnCount());assertEquals(0,dataset.getRowCount());assertTrue(Double.isNaN(dataset.getRangeLowerBound(false)));assertTrue(Double.isNaN(dataset.getRangeUpperBound(false)));}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testGetRangeBounds",0,"/** * Some checks for the getRangeBounds()method.*/public void testGetRangeBounds(){DefaultBoxAndWhiskerCategoryDataset d1=new DefaultBoxAndWhiskerCategoryDataset();d1.add(new BoxAndWhiskerItem(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,new ArrayList()),""R1"",""C1"");assertEquals(new Range(7.0,8.0),d1.getRangeBounds(false));assertEquals(new Range(7.0,8.0),d1.getRangeBounds(true));d1.add(new BoxAndWhiskerItem(1.5,2.5,3.5,4.5,5.5,6.5,7.5,8.5,new ArrayList()),""R1"",""C1"");assertEquals(new Range(7.5,8.5),d1.getRangeBounds(false));assertEquals(new Range(7.5,8.5),d1.getRangeBounds(true));d1.add(new BoxAndWhiskerItem(2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,new ArrayList()),""R2"",""C1"");assertEquals(new Range(7.5,9.5),d1.getRangeBounds(false));assertEquals(new Range(7.5,9.5),d1.getRangeBounds(true));d1.add(new BoxAndWhiskerItem(1.5,2.5,3.5,4.5,5.5,6.5,8.6,9.6,new ArrayList()),""R1"",""C1"");assertEquals(new Range(8.5,9.6),d1.getRangeBounds(false));assertEquals(new Range(8.5,9.6),d1.getRangeBounds(true));}"
"org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests.testRemove",0,"/** * Some checks for the remove method.*/public void testRemove(){DefaultBoxAndWhiskerCategoryDataset data=new DefaultBoxAndWhiskerCategoryDataset();boolean pass=false;try {data.remove(""R1"",""R2"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);data.add(new BoxAndWhiskerItem(1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,new ArrayList()),""R1"",""C1"");assertEquals(new Range(7.0,8.0),data.getRangeBounds(false));assertEquals(new Range(7.0,8.0),data.getRangeBounds(true));data.add(new BoxAndWhiskerItem(2.5,3.5,4.5,5.5,6.5,7.5,8.5,9.5,new ArrayList()),""R2"",""C1"");assertEquals(new Range(7.0,9.5),data.getRangeBounds(false));assertEquals(new Range(7.0,9.5),data.getRangeBounds(true));data.remove(""R1"",""C1"");assertEquals(new Range(8.5,9.5),data.getRangeBounds(false));assertEquals(new Range(8.5,9.5),data.getRangeBounds(true));}"
"org.jfree.chart.util.junit.BooleanListTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){BooleanList l1=new BooleanList();l1.setBoolean(0,Boolean.TRUE);l1.setBoolean(1,Boolean.FALSE);l1.setBoolean(2,null);BooleanList l2=new BooleanList();l2.setBoolean(0,Boolean.TRUE);l2.setBoolean(1,Boolean.FALSE);l2.setBoolean(2,null);assertTrue(l1.equals(l2));assertTrue(l2.equals(l2));}"
"org.jfree.chart.util.junit.BooleanListTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BooleanList l1=new BooleanList();l1.setBoolean(0,Boolean.TRUE);l1.setBoolean(1,Boolean.FALSE);l1.setBoolean(2,null);BooleanList l2=null;try {l2=(BooleanList)l1.clone();}catch(CloneNotSupportedException e){System.err.println(""BooleanListTests.testCloning: failed to clone."");}assertTrue(l1 != l2);assertTrue(l1.getClass()== l2.getClass());assertTrue(l1.equals(l2));l2.setBoolean(0,Boolean.FALSE);assertFalse(l1.equals(l2));}"
"org.jfree.chart.util.junit.BooleanListTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BooleanList l1=new BooleanList();l1.setBoolean(0,Boolean.TRUE);l1.setBoolean(1,Boolean.FALSE);l1.setBoolean(2,null);BooleanList l2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(l1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));l2=(BooleanList)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(l1,l2);}"
"org.jfree.chart.util.junit.BooleanListTests.testHashCode",0,"/** * Some checks for the hashCode()method.*/public void testHashCode(){BooleanList l1=new BooleanList();BooleanList l2=new BooleanList();assertTrue(l1.hashCode()== l2.hashCode());l1.setBoolean(0,Boolean.TRUE);assertFalse(l1.hashCode()== l2.hashCode());l2.setBoolean(0,Boolean.TRUE);assertTrue(l1.hashCode()== l2.hashCode());}"
"org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.testEquals",0,"/** * A series of tests for the equals()method.*/public void testEquals(){BoxAndWhiskerXYToolTipGenerator g1=new BoxAndWhiskerXYToolTipGenerator();BoxAndWhiskerXYToolTipGenerator g2=new BoxAndWhiskerXYToolTipGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));g2=new BoxAndWhiskerXYToolTipGenerator(""{1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));assertFalse(g1.equals(g2));g2=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));assertTrue(g1.equals(g2));g1=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));g2=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""MMM-yyyy""),new DecimalFormat(""0.0""));assertFalse(g1.equals(g2));g2=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));assertTrue(g1.equals(g2));g1=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));g2=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.00""));assertFalse(g1.equals(g2));g2=new BoxAndWhiskerXYToolTipGenerator(""{0}--> {1}{2}"",new SimpleDateFormat(""yyyy""),new DecimalFormat(""0.0""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BoxAndWhiskerXYToolTipGenerator g1=new BoxAndWhiskerXYToolTipGenerator();BoxAndWhiskerXYToolTipGenerator g2=null;try {g2=(BoxAndWhiskerXYToolTipGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BoxAndWhiskerXYToolTipGenerator g1=new BoxAndWhiskerXYToolTipGenerator();BoxAndWhiskerXYToolTipGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(BoxAndWhiskerXYToolTipGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.junit.BarChart3DTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.BarChart3DTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that the data range is as expected.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.BarChart3DTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.BarChart3DTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testEquals",0,"/** * Problem that the equals()method distinguishes all fields.*/public void testEquals(){IntervalBarRenderer r1=new IntervalBarRenderer();IntervalBarRenderer r2=new IntervalBarRenderer();assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){IntervalBarRenderer r1=new IntervalBarRenderer();IntervalBarRenderer r2=new IntervalBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){IntervalBarRenderer r1=new IntervalBarRenderer();IntervalBarRenderer r2=null;try {r2=(IntervalBarRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){IntervalBarRenderer r1=new IntervalBarRenderer();IntervalBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(IntervalBarRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {double[][]starts=new double[][]{{0.1,0.2,0.3},{0.3,0.4,0.5}};double[][]ends=new double[][]{{0.5,0.6,0.7},{0.7,0.8,0.9}};DefaultIntervalCategoryDataset dataset=new DefaultIntervalCategoryDataset(starts,ends);IntervalBarRenderer renderer=new IntervalBarRenderer();CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),renderer);JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardCategoryURLGenerator g1=new StandardCategoryURLGenerator(""index.html?"");StandardCategoryURLGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardCategoryURLGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){IntervalCategoryItemLabelGenerator g1=new IntervalCategoryItemLabelGenerator();IntervalCategoryItemLabelGenerator g2=new IntervalCategoryItemLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new IntervalCategoryItemLabelGenerator(""{3}- {4}"",new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2=new IntervalCategoryItemLabelGenerator(""{3}- {4}"",new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));g1=new IntervalCategoryItemLabelGenerator(""{3}- {4}"",new SimpleDateFormat(""d-MMM""));assertFalse(g1.equals(g2));g2=new IntervalCategoryItemLabelGenerator(""{3}- {4}"",new SimpleDateFormat(""d-MMM""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){IntervalCategoryItemLabelGenerator g1=new IntervalCategoryItemLabelGenerator();IntervalCategoryItemLabelGenerator g2=null;try {g2=(IntervalCategoryItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){IntervalCategoryItemLabelGenerator g1=new IntervalCategoryItemLabelGenerator(""{3}- {4}"",DateFormat.getInstance());IntervalCategoryItemLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(IntervalCategoryItemLabelGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.ItemLabelAnchorTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){assertTrue(ItemLabelAnchor.INSIDE1.equals(ItemLabelAnchor.INSIDE1));assertFalse(ItemLabelAnchor.INSIDE1.equals(ItemLabelAnchor.INSIDE2));}"
"org.jfree.chart.labels.junit.ItemLabelAnchorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for identity.*/public void testSerialization(){ItemLabelAnchor a1=ItemLabelAnchor.INSIDE1;ItemLabelAnchor a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(ItemLabelAnchor)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertTrue(a1 == a2);}"
"org.jfree.chart.needle.junit.PointerNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){PointerNeedle n1=new PointerNeedle();PointerNeedle n2=new PointerNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.PointerNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){PointerNeedle n1=new PointerNeedle();PointerNeedle n2=null;try {n2=(PointerNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.PointerNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PointerNeedle n1=new PointerNeedle();PointerNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(PointerNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.chart.plot.junit.PiePlotTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){PiePlot plot1=new PiePlot();PiePlot plot2=new PiePlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));plot1.setPieIndex(99);assertFalse(plot1.equals(plot2));plot2.setPieIndex(99);assertTrue(plot1.equals(plot2));plot1.setInteriorGap(0.15);assertFalse(plot1.equals(plot2));plot2.setInteriorGap(0.15);assertTrue(plot1.equals(plot2));plot1.setCircular(!plot1.isCircular());assertFalse(plot1.equals(plot2));plot2.setCircular(false);assertTrue(plot1.equals(plot2));plot1.setStartAngle(Math.PI);assertFalse(plot1.equals(plot2));plot2.setStartAngle(Math.PI);assertTrue(plot1.equals(plot2));plot1.setDirection(Rotation.ANTICLOCKWISE);assertFalse(plot1.equals(plot2));plot2.setDirection(Rotation.ANTICLOCKWISE);assertTrue(plot1.equals(plot2));plot1.setIgnoreZeroValues(true);plot2.setIgnoreZeroValues(false);assertFalse(plot1.equals(plot2));plot2.setIgnoreZeroValues(true);assertTrue(plot1.equals(plot2));plot1.setIgnoreNullValues(true);plot2.setIgnoreNullValues(false);assertFalse(plot1.equals(plot2));plot2.setIgnoreNullValues(true);assertTrue(plot1.equals(plot2));plot1.setSectionPaint(""A"",new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setSectionPaint(""A"",new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setBaseSectionPaint(new GradientPaint(1.0f,2.0f,Color.black,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setBaseSectionPaint(new GradientPaint(1.0f,2.0f,Color.black,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setSectionOutlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setSectionOutlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.setSectionOutlinePaint(""A"",new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setSectionOutlinePaint(""A"",new GradientPaint(1.0f,2.0f,Color.green,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setBaseSectionOutlinePaint(new GradientPaint(1.0f,2.0f,Color.gray,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setBaseSectionOutlinePaint(new GradientPaint(1.0f,2.0f,Color.gray,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setSectionOutlineStroke(""A"",new BasicStroke(1.0f));assertFalse(plot1.equals(plot2));plot2.setSectionOutlineStroke(""A"",new BasicStroke(1.0f));assertTrue(plot1.equals(plot2));plot1.setBaseSectionOutlineStroke(new BasicStroke(1.0f));assertFalse(plot1.equals(plot2));plot2.setBaseSectionOutlineStroke(new BasicStroke(1.0f));assertTrue(plot1.equals(plot2));plot1.setShadowPaint(new GradientPaint(1.0f,2.0f,Color.orange,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setShadowPaint(new GradientPaint(1.0f,2.0f,Color.orange,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setShadowXOffset(4.4);assertFalse(plot1.equals(plot2));plot2.setShadowXOffset(4.4);assertTrue(plot1.equals(plot2));plot1.setShadowYOffset(4.4);assertFalse(plot1.equals(plot2));plot2.setShadowYOffset(4.4);assertTrue(plot1.equals(plot2));plot1.setLabelFont(new Font(""Serif"",Font.PLAIN,18));assertFalse(plot1.equals(plot2));plot2.setLabelFont(new Font(""Serif"",Font.PLAIN,18));assertTrue(plot1.equals(plot2));plot1.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.darkGray,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.darkGray,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setLabelBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setLabelBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setLabelOutlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setLabelOutlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));Stroke s=new BasicStroke(1.1f);plot1.setLabelOutlineStroke(s);assertFalse(plot1.equals(plot2));plot2.setLabelOutlineStroke(s);assertTrue(plot1.equals(plot2));plot1.setLabelShadowPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setLabelShadowPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setExplodePercent(""A"",0.33);assertFalse(plot1.equals(plot2));plot2.setExplodePercent(""A"",0.33);assertTrue(plot1.equals(plot2));plot1.setLabelGenerator(new StandardPieSectionLabelGenerator(""{2}{1}{0}""));assertFalse(plot1.equals(plot2));plot2.setLabelGenerator(new StandardPieSectionLabelGenerator(""{2}{1}{0}""));assertTrue(plot1.equals(plot2));Font f=new Font(""SansSerif"",Font.PLAIN,20);plot1.setLabelFont(f);assertFalse(plot1.equals(plot2));plot2.setLabelFont(f);assertTrue(plot1.equals(plot2));plot1.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.magenta,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setLabelPaint(new GradientPaint(1.0f,2.0f,Color.magenta,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setMaximumLabelWidth(0.33);assertFalse(plot1.equals(plot2));plot2.setMaximumLabelWidth(0.33);assertTrue(plot1.equals(plot2));plot1.setLabelGap(0.11);assertFalse(plot1.equals(plot2));plot2.setLabelGap(0.11);assertTrue(plot1.equals(plot2));plot1.setLabelLinksVisible(false);assertFalse(plot1.equals(plot2));plot2.setLabelLinksVisible(false);assertTrue(plot1.equals(plot2));plot1.setLabelLinkMargin(0.11);assertFalse(plot1.equals(plot2));plot2.setLabelLinkMargin(0.11);assertTrue(plot1.equals(plot2));plot1.setLabelLinkPaint(new GradientPaint(1.0f,2.0f,Color.magenta,3.0f,4.0f,Color.white));assertFalse(plot1.equals(plot2));plot2.setLabelLinkPaint(new GradientPaint(1.0f,2.0f,Color.magenta,3.0f,4.0f,Color.white));assertTrue(plot1.equals(plot2));plot1.setLabelLinkStroke(new BasicStroke(1.0f));assertFalse(plot1.equals(plot2));plot2.setLabelLinkStroke(new BasicStroke(1.0f));assertTrue(plot1.equals(plot2));plot1.setToolTipGenerator(new StandardPieToolTipGenerator(""{2}{1}{0}""));assertFalse(plot1.equals(plot2));plot2.setToolTipGenerator(new StandardPieToolTipGenerator(""{2}{1}{0}""));assertTrue(plot1.equals(plot2));plot1.setURLGenerator(new StandardPieURLGenerator(""xx""));assertFalse(plot1.equals(plot2));plot2.setURLGenerator(new StandardPieURLGenerator(""xx""));assertTrue(plot1.equals(plot2));plot1.setMinimumArcAngleToDraw(1.0);assertFalse(plot1.equals(plot2));plot2.setMinimumArcAngleToDraw(1.0);assertTrue(plot1.equals(plot2));plot1.setLegendItemShape(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(plot1.equals(plot2));plot2.setLegendItemShape(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(plot1.equals(plot2));plot1.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(""{0}--> {1}""));assertFalse(plot1.equals(plot2));plot2.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(""{0}--> {1}""));assertTrue(plot1.equals(plot2));plot1.setLegendLabelToolTipGenerator(new StandardPieSectionLabelGenerator(""{0}is {1}""));assertFalse(plot1.equals(plot2));plot2.setLegendLabelToolTipGenerator(new StandardPieSectionLabelGenerator(""{0}is {1}""));assertTrue(plot1.equals(plot2));plot1.setLegendLabelURLGenerator(new StandardPieURLGenerator(""index.html""));assertFalse(plot1.equals(plot2));plot2.setLegendLabelURLGenerator(new StandardPieURLGenerator(""index.html""));assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.PiePlotTests.testCloning",0,"/** * Some basic checks for the clone()method.*/public void testCloning(){PiePlot p1=new PiePlot();PiePlot p2=null;try {p2=(PiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PiePlotTests.testCloning_URLGenerator",0,"/** * Check cloning of the urlGenerator field.*/public void testCloning_URLGenerator(){CustomPieURLGenerator generator=new CustomPieURLGenerator();PiePlot p1=new PiePlot();p1.setURLGenerator(generator);PiePlot p2=null;try {p2=(PiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));assertTrue(p1.getURLGenerator()!= p2.getURLGenerator());}"
"org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendItemShape",0,"/** * Check cloning of the legendItemShape field.*/public void testCloning_LegendItemShape(){Rectangle shape=new Rectangle(-4,-4,8,8);PiePlot p1=new PiePlot();p1.setLegendItemShape(shape);PiePlot p2=null;try {p2=(PiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));shape.setRect(1.0,2.0,3.0,4.0);assertFalse(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendLabelGenerator",0,"/** * Check cloning of the legendLabelGenerator field.*/public void testCloning_LegendLabelGenerator(){StandardPieSectionLabelGenerator generator=new StandardPieSectionLabelGenerator();PiePlot p1=new PiePlot();p1.setLegendLabelGenerator(generator);PiePlot p2=null;try {p2=(PiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));generator.getNumberFormat().setMinimumFractionDigits(2);assertFalse(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendLabelToolTipGenerator",0,"/** * Check cloning of the legendLabelToolTipGenerator field.*/public void testCloning_LegendLabelToolTipGenerator(){StandardPieSectionLabelGenerator generator=new StandardPieSectionLabelGenerator();PiePlot p1=new PiePlot();p1.setLegendLabelToolTipGenerator(generator);PiePlot p2=null;try {p2=(PiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));generator.getNumberFormat().setMinimumFractionDigits(2);assertFalse(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PiePlotTests.testCloning_LegendLabelURLGenerator",0,"/** * Check cloning of the legendLabelURLGenerator field.*/public void testCloning_LegendLabelURLGenerator(){CustomPieURLGenerator generator=new CustomPieURLGenerator();PiePlot p1=new PiePlot();p1.setLegendLabelURLGenerator(generator);PiePlot p2=null;try {p2=(PiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));assertTrue(p1.getLegendLabelURLGenerator()!= p2.getLegendLabelURLGenerator());}"
"org.jfree.chart.plot.junit.PiePlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PiePlot p1=new PiePlot(null);PiePlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(PiePlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.plot.junit.PiePlotTests.testGetLegendItems",0,"/** * Some checks for the getLegendItems()method.*/public void testGetLegendItems(){DefaultPieDataset dataset=new DefaultPieDataset();dataset.setValue(""Item 1"",1.0);dataset.setValue(""Item 2"",2.0);dataset.setValue(""Item 3"",0.0);dataset.setValue(""Item 4"",null);PiePlot plot=new PiePlot(dataset);plot.setIgnoreNullValues(false);plot.setIgnoreZeroValues(false);LegendItemCollection items=plot.getLegendItems();assertEquals(4,items.getItemCount());plot.setIgnoreNullValues(true);items=plot.getLegendItems();assertEquals(3,items.getItemCount());plot.setIgnoreZeroValues(true);items=plot.getLegendItems();assertEquals(2,items.getItemCount());dataset.setValue(""Item 5"",-1.0);items=plot.getLegendItems();assertEquals(2,items.getItemCount());}"
"org.jfree.chart.plot.junit.PiePlotTests.testGetBaseSectionPaint",0,"/** * Check that the default base section paint is not null,and that you  can never set it to null.*/public void testGetBaseSectionPaint(){PiePlot plot=new PiePlot();assertNotNull(plot.getBaseSectionPaint());boolean pass=false;try {plot.setBaseSectionPaint(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.plot.junit.PiePlotTests.testDrawWithNullLegendLabels",0,"/** * Draws a pie chart where the label generator returns null.*/public void testDrawWithNullLegendLabels(){DefaultPieDataset dataset=new DefaultPieDataset();dataset.setValue(""L1"",12.0);dataset.setValue(""L2"",11.0);JFreeChart chart=ChartFactory.createPieChart(""Test"",dataset,true,false,false);PiePlot plot=(PiePlot)chart.getPlot();plot.setLegendLabelGenerator(new NullLegendLabelGenerator());boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.plot.junit.PolarPlotTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){PolarPlot plot1=new PolarPlot();PolarPlot plot2=new PolarPlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));plot1.setAngleGridlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(plot1.equals(plot2));plot2.setAngleGridlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(plot1.equals(plot2));Stroke s=new BasicStroke(1.23f);plot1.setAngleGridlineStroke(s);assertFalse(plot1.equals(plot2));plot2.setAngleGridlineStroke(s);assertTrue(plot1.equals(plot2));plot1.setAngleTickUnit(new NumberTickUnit(11.0));assertFalse(plot1.equals(plot2));plot2.setAngleTickUnit(new NumberTickUnit(11.0));assertTrue(plot1.equals(plot2));plot1.setAngleGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setAngleGridlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.setAngleLabelFont(new Font(""Serif"",Font.PLAIN,9));assertFalse(plot1.equals(plot2));plot2.setAngleLabelFont(new Font(""Serif"",Font.PLAIN,9));assertTrue(plot1.equals(plot2));plot1.setAngleLabelPaint(new GradientPaint(9.0f,8.0f,Color.blue,7.0f,6.0f,Color.red));assertFalse(plot1.equals(plot2));plot2.setAngleLabelPaint(new GradientPaint(9.0f,8.0f,Color.blue,7.0f,6.0f,Color.red));assertTrue(plot1.equals(plot2));plot1.setAngleLabelsVisible(false);assertFalse(plot1.equals(plot2));plot2.setAngleLabelsVisible(false);assertTrue(plot1.equals(plot2));plot1.setAxis(new NumberAxis(""Test""));assertFalse(plot1.equals(plot2));plot2.setAxis(new NumberAxis(""Test""));assertTrue(plot1.equals(plot2));plot1.setRadiusGridlinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.black));assertFalse(plot1.equals(plot2));plot2.setRadiusGridlinePaint(new GradientPaint(1.0f,2.0f,Color.white,3.0f,4.0f,Color.black));assertTrue(plot1.equals(plot2));plot1.setRadiusGridlineStroke(s);assertFalse(plot1.equals(plot2));plot2.setRadiusGridlineStroke(s);assertTrue(plot1.equals(plot2));plot1.setRadiusGridlinesVisible(false);assertFalse(plot1.equals(plot2));plot2.setRadiusGridlinesVisible(false);assertTrue(plot1.equals(plot2));plot1.addCornerTextItem(""XYZ"");assertFalse(plot1.equals(plot2));plot2.addCornerTextItem(""XYZ"");assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.PolarPlotTests.testCloning",0,"/** * Some basic checks for the clone()method.*/public void testCloning(){PolarPlot p1=new PolarPlot();PolarPlot p2=null;try {p2=(PolarPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));p1.addCornerTextItem(""XYZ"");assertFalse(p1.equals(p2));p2.addCornerTextItem(""XYZ"");assertTrue(p1.equals(p2));p1=new PolarPlot(new DefaultXYDataset(),new NumberAxis(""A1""),new DefaultPolarItemRenderer());p2=null;try {p2=(PolarPlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));p1.getAxis().setLabel(""ABC"");assertFalse(p1.equals(p2));p2.getAxis().setLabel(""ABC"");assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.PolarPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PolarPlot p1=new PolarPlot();p1.setAngleGridlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));p1.setAngleLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));p1.setRadiusGridlinePaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));PolarPlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(PolarPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.chart.axis.junit.AxisLocationTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){assertEquals(AxisLocation.TOP_OR_RIGHT,AxisLocation.TOP_OR_RIGHT);assertEquals(AxisLocation.BOTTOM_OR_RIGHT,AxisLocation.BOTTOM_OR_RIGHT);assertEquals(AxisLocation.TOP_OR_LEFT,AxisLocation.TOP_OR_LEFT);assertEquals(AxisLocation.BOTTOM_OR_LEFT,AxisLocation.BOTTOM_OR_LEFT);}"
"org.jfree.chart.axis.junit.AxisLocationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){AxisLocation a1=AxisLocation.TOP_OR_RIGHT;AxisLocation a2=AxisLocation.TOP_OR_RIGHT;assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.AxisLocationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){AxisLocation location1=AxisLocation.BOTTOM_OR_RIGHT;AxisLocation location2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(location1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));location2=(AxisLocation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(location1,location2);boolean same=location1 == location2;assertEquals(true,same);}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){BarRenderer r1=new BarRenderer();BarRenderer r2=new BarRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setSeriesVisible(2,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesVisible(2,Boolean.TRUE);assertTrue(r1.equals(r2));r1.setBaseSeriesVisible(false);assertFalse(r1.equals(r2));r2.setBaseSeriesVisible(false);assertTrue(r1.equals(r2));r1.setSeriesVisibleInLegend(1,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesVisibleInLegend(1,Boolean.TRUE);assertTrue(r1.equals(r2));r1.setBaseSeriesVisibleInLegend(false);assertFalse(r1.equals(r2));r2.setBaseSeriesVisibleInLegend(false);assertTrue(r1.equals(r2));r1.setSeriesPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertFalse(r1.equals(r2));r2.setSeriesPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));assertTrue(r1.equals(r2));r1.setBasePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(r1.equals(r2));r2.setBasePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(r1.equals(r2));r1.setSeriesFillPaint(0,new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(r1.equals(r2));r2.setSeriesFillPaint(0,new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(r1.equals(r2));r1.setBaseFillPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(r1.equals(r2));r2.setBaseFillPaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(r1.equals(r2));r1.setSeriesOutlinePaint(0,new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(r1.equals(r2));r2.setSeriesOutlinePaint(0,new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(r1.equals(r2));r1.setBaseOutlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertFalse(r1.equals(r2));r2.setBaseOutlinePaint(new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red));assertTrue(r1.equals(r2));Stroke s=new BasicStroke(3.21f);r1.setSeriesStroke(1,s);assertFalse(r1.equals(r2));r2.setSeriesStroke(1,s);assertTrue(r1.equals(r2));r1.setBaseStroke(s);assertFalse(r1.equals(r2));r2.setBaseStroke(s);assertTrue(r1.equals(r2));r1.setSeriesOutlineStroke(0,s);assertFalse(r1.equals(r2));r2.setSeriesOutlineStroke(0,s);assertTrue(r1.equals(r2));r1.setBaseOutlineStroke(s);assertFalse(r1.equals(r2));r2.setBaseOutlineStroke(s);assertTrue(r1.equals(r2));r1.setSeriesShape(1,new Rectangle(1,2,3,4));assertFalse(r1.equals(r2));r2.setSeriesShape(1,new Rectangle(1,2,3,4));assertTrue(r1.equals(r2));r1.setBaseShape(new Rectangle(1,2,3,4));assertFalse(r1.equals(r2));r2.setBaseShape(new Rectangle(1,2,3,4));assertTrue(r1.equals(r2));r1.setSeriesItemLabelsVisible(1,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesItemLabelsVisible(1,Boolean.TRUE);assertTrue(r1.equals(r2));r1.setBaseItemLabelsVisible(true);assertFalse(r1.equals(r2));r2.setBaseItemLabelsVisible(true);assertTrue(r1.equals(r2));r1.setSeriesItemLabelFont(1,new Font(""Serif"",Font.BOLD,9));assertFalse(r1.equals(r2));r2.setSeriesItemLabelFont(1,new Font(""Serif"",Font.BOLD,9));assertTrue(r1.equals(r2));r1.setBaseItemLabelFont(new Font(""Serif"",Font.PLAIN,10));assertFalse(r1.equals(r2));r2.setBaseItemLabelFont(new Font(""Serif"",Font.PLAIN,10));assertTrue(r1.equals(r2));r1.setSeriesItemLabelPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.gray));assertFalse(r1.equals(r2));r2.setSeriesItemLabelPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.gray));assertTrue(r1.equals(r2));r1.setBaseItemLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.gray));assertFalse(r1.equals(r2));r2.setBaseItemLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.gray));assertTrue(r1.equals(r2));r1.setSeriesPositiveItemLabelPosition(0,new ItemLabelPosition());assertFalse(r1.equals(r2));r2.setSeriesPositiveItemLabelPosition(0,new ItemLabelPosition());assertTrue(r1.equals(r2));r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10,TextAnchor.BASELINE_RIGHT));assertFalse(r1.equals(r2));r2.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10,TextAnchor.BASELINE_RIGHT));assertTrue(r1.equals(r2));r1.setSeriesNegativeItemLabelPosition(1,new ItemLabelPosition(ItemLabelAnchor.INSIDE10,TextAnchor.BASELINE_RIGHT));assertFalse(r1.equals(r2));r2.setSeriesNegativeItemLabelPosition(1,new ItemLabelPosition(ItemLabelAnchor.INSIDE10,TextAnchor.BASELINE_RIGHT));assertTrue(r1.equals(r2));r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10,TextAnchor.BASELINE_RIGHT));assertFalse(r1.equals(r2));r2.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.INSIDE10,TextAnchor.BASELINE_RIGHT));assertTrue(r1.equals(r2));r1.setItemLabelAnchorOffset(3.0);assertFalse(r1.equals(r2));r2.setItemLabelAnchorOffset(3.0);assertTrue(r1.equals(r2));r1.setSeriesCreateEntities(0,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesCreateEntities(0,Boolean.TRUE);assertTrue(r1.equals(r2));r1.setBaseCreateEntities(false);assertFalse(r1.equals(r2));r2.setBaseCreateEntities(false);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LineAndShapeRenderer r1=new LineAndShapeRenderer();Rectangle2D baseShape=new Rectangle2D.Double(11.0,12.0,13.0,14.0);r1.setBaseShape(baseShape);LineAndShapeRenderer r2=null;try {r2=(LineAndShapeRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1.setSeriesVisible(0,Boolean.FALSE);assertFalse(r1.equals(r2));r2.setSeriesVisible(0,Boolean.FALSE);assertTrue(r1.equals(r2));r1.setSeriesVisibleInLegend(0,Boolean.FALSE);assertFalse(r1.equals(r2));r2.setSeriesVisibleInLegend(0,Boolean.FALSE);assertTrue(r1.equals(r2));r1.setSeriesPaint(0,Color.black);assertFalse(r1.equals(r2));r2.setSeriesPaint(0,Color.black);assertTrue(r1.equals(r2));r1.setSeriesFillPaint(0,Color.yellow);assertFalse(r1.equals(r2));r2.setSeriesFillPaint(0,Color.yellow);assertTrue(r1.equals(r2));r1.setSeriesOutlinePaint(0,Color.yellow);assertFalse(r1.equals(r2));r2.setSeriesOutlinePaint(0,Color.yellow);assertTrue(r1.equals(r2));r1.setSeriesStroke(0,new BasicStroke(2.2f));assertFalse(r1.equals(r2));r2.setSeriesStroke(0,new BasicStroke(2.2f));assertTrue(r1.equals(r2));r1.setSeriesOutlineStroke(0,new BasicStroke(2.2f));assertFalse(r1.equals(r2));r2.setSeriesOutlineStroke(0,new BasicStroke(2.2f));assertTrue(r1.equals(r2));baseShape.setRect(4.0,3.0,2.0,1.0);assertFalse(r1.equals(r2));r2.setBaseShape(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(r1.equals(r2));r1.setSeriesShape(0,new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertFalse(r1.equals(r2));r2.setSeriesShape(0,new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(r1.equals(r2));r1.setSeriesItemLabelsVisible(0,Boolean.TRUE);assertFalse(r1.equals(r2));r2.setSeriesItemLabelsVisible(0,Boolean.TRUE);assertTrue(r1.equals(r2));r1.setSeriesItemLabelPaint(0,Color.red);assertFalse(r1.equals(r2));r2.setSeriesItemLabelPaint(0,Color.red);assertTrue(r1.equals(r2));r1.setSeriesPositiveItemLabelPosition(0,new ItemLabelPosition());assertFalse(r1.equals(r2));r2.setSeriesPositiveItemLabelPosition(0,new ItemLabelPosition());assertTrue(r1.equals(r2));r1.setSeriesNegativeItemLabelPosition(0,new ItemLabelPosition());assertFalse(r1.equals(r2));r2.setSeriesNegativeItemLabelPosition(0,new ItemLabelPosition());assertTrue(r1.equals(r2));r1.setSeriesCreateEntities(0,Boolean.FALSE);assertFalse(r1.equals(r2));r2.setSeriesCreateEntities(0,Boolean.FALSE);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testCloning2",0,"/** * A check for cloning.*/public void testCloning2(){LineAndShapeRenderer r1=new LineAndShapeRenderer();r1.setBasePaint(Color.blue);LineAndShapeRenderer r2=null;try {r2=(LineAndShapeRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));MyRendererChangeListener listener=new MyRendererChangeListener();r2.addChangeListener(listener);r2.setBasePaint(Color.red);assertTrue(listener.lastEvent.getRenderer()== r2);assertFalse(r1.hasListener(listener));}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testEventNotification",0,"/** * Tests each setter method to ensure that it sends an event notification.*/public void testEventNotification(){RendererChangeDetector detector=new RendererChangeDetector();BarRenderer r1=new BarRenderer();r1.addChangeListener(detector);detector.setNotified(false);r1.setSeriesPaint(0,Color.red);assertTrue(detector.getNotified());detector.setNotified(false);r1.setBasePaint(Color.red);assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesOutlinePaint(0,Color.red);assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseOutlinePaint(Color.red);assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesStroke(0,new BasicStroke(1.0f));assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseStroke(new BasicStroke(1.0f));assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesOutlineStroke(0,new BasicStroke(1.0f));assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseOutlineStroke(new BasicStroke(1.0f));assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesShape(0,new Rectangle2D.Float());assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseShape(new Rectangle2D.Float());assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesItemLabelsVisible(0,Boolean.TRUE);assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseItemLabelsVisible(true);assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesItemLabelFont(0,new Font(""Serif"",Font.PLAIN,12));assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseItemLabelFont(new Font(""Serif"",Font.PLAIN,12));assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesItemLabelPaint(0,Color.blue);assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseItemLabelPaint(Color.blue);assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesPositiveItemLabelPosition(0,new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));assertTrue(detector.getNotified());detector.setNotified(false);r1.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));assertTrue(detector.getNotified());detector.setNotified(false);r1.setSeriesNegativeItemLabelPosition(0,new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));assertTrue(detector.getNotified());detector.setNotified(false);r1.setBaseNegativeItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER));assertTrue(detector.getNotified());}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.  In addition,test for a bug that was reported where the listener list is 'null' after  deserialization.*/public void testSerialization(){BarRenderer r1=new BarRenderer();BarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(BarRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);try {r2.notifyListeners(new RendererChangeEvent(r2));}catch(NullPointerException e){assertTrue(false);}}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testAutoPopulateFlagDefaults",0,"/** * Some checks for the autoPopulate flag default values.*/public void testAutoPopulateFlagDefaults(){BarRenderer r=new BarRenderer();assertEquals(true,r.getAutoPopulateSeriesPaint());assertEquals(false,r.getAutoPopulateSeriesFillPaint());assertEquals(false,r.getAutoPopulateSeriesOutlinePaint());assertEquals(false,r.getAutoPopulateSeriesStroke());assertEquals(false,r.getAutoPopulateSeriesOutlineStroke());assertEquals(true,r.getAutoPopulateSeriesShape());}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testPaintLookup",0,"/** * Some checks for the paint lookup mechanism.*/public void testPaintLookup(){BarRenderer r=new BarRenderer();assertEquals(Color.blue,r.getBasePaint());r.setAutoPopulateSeriesPaint(false);assertEquals(Color.blue,r.lookupSeriesPaint(0));assertNull(r.getSeriesPaint(0));r.setAutoPopulateSeriesPaint(true);new CategoryPlot(null,new CategoryAxis(""Category""),new NumberAxis(""Value""),r);assertEquals(DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE[0],r.lookupSeriesPaint(0));assertNotNull(r.getSeriesPaint(0));}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testFillPaintLookup",0,"/** * Some checks for the fill paint lookup mechanism.*/public void testFillPaintLookup(){BarRenderer r=new BarRenderer();assertEquals(Color.white,r.getBaseFillPaint());r.setAutoPopulateSeriesFillPaint(false);assertEquals(Color.white,r.lookupSeriesFillPaint(0));assertNull(r.getSeriesFillPaint(0));r.setAutoPopulateSeriesFillPaint(true);new CategoryPlot(null,new CategoryAxis(""Category""),new NumberAxis(""Value""),r);assertEquals(DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE[0],r.lookupSeriesFillPaint(0));assertNotNull(r.getSeriesFillPaint(0));}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testOutlinePaintLookup",0,"/** * Some checks for the outline paint lookup mechanism.*/public void testOutlinePaintLookup(){BarRenderer r=new BarRenderer();assertEquals(Color.gray,r.getBaseOutlinePaint());r.setAutoPopulateSeriesOutlinePaint(false);assertEquals(Color.gray,r.lookupSeriesOutlinePaint(0));assertNull(r.getSeriesOutlinePaint(0));r.setAutoPopulateSeriesOutlinePaint(true);new CategoryPlot(null,new CategoryAxis(""Category""),new NumberAxis(""Value""),r);assertEquals(DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE[0],r.lookupSeriesOutlinePaint(0));assertNotNull(r.getSeriesOutlinePaint(0));}"
"org.jfree.chart.renderer.junit.AbstractRendererTests.testHashCode",0,"/** * Some checks for the hashCode()method.*/public void testHashCode(){}"
"org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){XYBlockRenderer r1=new XYBlockRenderer();XYBlockRenderer r2=new XYBlockRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setBlockHeight(2.0);assertFalse(r1.equals(r2));r2.setBlockHeight(2.0);assertTrue(r1.equals(r2));r1.setBlockWidth(2.0);assertFalse(r1.equals(r2));r2.setBlockWidth(2.0);assertTrue(r1.equals(r2));r1.setPaintScale(new GrayPaintScale(0.0,1.0));assertFalse(r1.equals(r2));r2.setPaintScale(new GrayPaintScale(0.0,1.0));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYBlockRenderer r1=new XYBlockRenderer();XYBlockRenderer r2=new XYBlockRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYBlockRenderer r1=new XYBlockRenderer();LookupPaintScale scale1=new LookupPaintScale();r1.setPaintScale(scale1);XYBlockRenderer r2=null;try {r2=(XYBlockRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));scale1.add(0.5,Color.red);assertFalse(r1.equals(r2));LookupPaintScale scale2=(LookupPaintScale)r2.getPaintScale();scale2.add(0.5,Color.red);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYBlockRenderer r1=new XYBlockRenderer();XYBlockRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYBlockRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testBug1766646A",0,"/** * A simple test for bug 1766646.*/public void testBug1766646A(){XYBlockRenderer r=new XYBlockRenderer();Range range=r.findDomainBounds(null);assertTrue(range == null);DefaultXYZDataset emptyDataset=new DefaultXYZDataset();range=r.findDomainBounds(emptyDataset);assertTrue(range == null);}"
"org.jfree.chart.renderer.xy.junit.XYBlockRendererTests.testBug1766646B",0,"/** * A simple test for bug 1766646.*/public void testBug1766646B(){XYBlockRenderer r=new XYBlockRenderer();Range range=r.findRangeBounds(null);assertTrue(range == null);DefaultXYZDataset emptyDataset=new DefaultXYZDataset();range=r.findRangeBounds(emptyDataset);assertTrue(range == null);}"
"org.jfree.chart.needle.junit.WindNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){WindNeedle n1=new WindNeedle();WindNeedle n2=new WindNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.WindNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){WindNeedle n1=new WindNeedle();WindNeedle n2=null;try {n2=(WindNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.WindNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){WindNeedle n1=new WindNeedle();WindNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(WindNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testJava",0,"/** * Some tests to verify that Java does what I think it does!*/public void testJava(){assertTrue(Double.isNaN(Math.min(1.0,Double.NaN)));assertTrue(Double.isNaN(Math.max(1.0,Double.NaN)));}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testCalculatePieDatasetTotal",0,"/** * Some tests for the calculatePieDatasetTotal()method.*/public void testCalculatePieDatasetTotal(){DefaultPieDataset d=new DefaultPieDataset();assertEquals(0.0,DatasetUtilities.calculatePieDatasetTotal(d),EPSILON);d.setValue(""A"",1.0);assertEquals(1.0,DatasetUtilities.calculatePieDatasetTotal(d),EPSILON);d.setValue(""B"",3.0);assertEquals(4.0,DatasetUtilities.calculatePieDatasetTotal(d),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindDomainBounds",0,"/** * Some tests for the findDomainBounds()method.*/public void testFindDomainBounds(){XYDataset dataset=createXYDataset1();Range r=DatasetUtilities.findDomainBounds(dataset);assertEquals(1.0,r.getLowerBound(),EPSILON);assertEquals(3.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateDomainBounds",0,"/** * Some tests for the iterateDomainBounds()method.*/public void testIterateDomainBounds(){XYDataset dataset=createXYDataset1();Range r=DatasetUtilities.iterateDomainBounds(dataset);assertEquals(1.0,r.getLowerBound(),EPSILON);assertEquals(3.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds1",0,"/** * Some tests for the findRangeExtent()method.*/public void testFindRangeBounds1(){CategoryDataset dataset=createCategoryDataset1();Range r=DatasetUtilities.findRangeBounds(dataset);assertEquals(1.0,r.getLowerBound(),EPSILON);assertEquals(6.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds2",0,"/** * Some tests for the findRangeBounds()method.*/public void testFindRangeBounds2(){XYDataset dataset=createXYDataset1();Range r=DatasetUtilities.findRangeBounds(dataset);assertEquals(100.0,r.getLowerBound(),EPSILON);assertEquals(105.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateCategoryRangeBounds",0,"/** * Some tests for the iterateCategoryRangeBounds()method.*/public void testIterateCategoryRangeBounds(){CategoryDataset dataset=createCategoryDataset1();Range r=DatasetUtilities.iterateRangeBounds(dataset,false);assertEquals(1.0,r.getLowerBound(),EPSILON);assertEquals(6.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds",0,"/** * Some tests for the iterateRangeBounds()method.*/public void testIterateRangeBounds(){XYDataset dataset=createXYDataset1();Range r=DatasetUtilities.iterateRangeBounds(dataset);assertEquals(100.0,r.getLowerBound(),EPSILON);assertEquals(105.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds2",0,"/** * Check the range returned when a series contains a null value.*/public void testIterateRangeBounds2(){XYSeries s1=new XYSeries(""S1"");s1.add(1.0,1.1);s1.add(2.0,null);s1.add(3.0,3.3);XYSeriesCollection dataset=new XYSeriesCollection(s1);Range r=DatasetUtilities.iterateRangeBounds(dataset);assertEquals(1.1,r.getLowerBound(),EPSILON);assertEquals(3.3,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumDomainValue",0,"/** * Some tests for the findMinimumDomainValue()method.*/public void testFindMinimumDomainValue(){XYDataset dataset=createXYDataset1();Number minimum=DatasetUtilities.findMinimumDomainValue(dataset);assertEquals(new Double(1.0),minimum);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumDomainValue",0,"/** * Some tests for the findMaximumDomainValue()method.*/public void testFindMaximumDomainValue(){XYDataset dataset=createXYDataset1();Number maximum=DatasetUtilities.findMaximumDomainValue(dataset);assertEquals(new Double(3.0),maximum);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumRangeValue",0,"/** * Some tests for the findMinimumRangeValue()method.*/public void testFindMinimumRangeValue(){CategoryDataset d1=createCategoryDataset1();Number min1=DatasetUtilities.findMinimumRangeValue(d1);assertEquals(new Double(1.0),min1);XYDataset d2=createXYDataset1();Number min2=DatasetUtilities.findMinimumRangeValue(d2);assertEquals(new Double(100.0),min2);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumRangeValue",0,"/** * Some tests for the findMaximumRangeValue()method.*/public void testFindMaximumRangeValue(){CategoryDataset d1=createCategoryDataset1();Number max1=DatasetUtilities.findMaximumRangeValue(d1);assertEquals(new Double(6.0),max1);XYDataset dataset=createXYDataset1();Number maximum=DatasetUtilities.findMaximumRangeValue(dataset);assertEquals(new Double(105.0),maximum);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testMinMaxRange",0,"/** * A quick test of the min and max range value methods.*/public void testMinMaxRange(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(100.0,""Series 1"",""Type 1"");dataset.addValue(101.1,""Series 1"",""Type 2"");Number min=DatasetUtilities.findMinimumRangeValue(dataset);assertTrue(min.doubleValue()< 100.1);Number max=DatasetUtilities.findMaximumRangeValue(dataset);assertTrue(max.doubleValue()> 101.0);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.test803660",0,"/** * A test to reproduce bug report 803660.*/public void test803660(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(100.0,""Series 1"",""Type 1"");dataset.addValue(101.1,""Series 1"",""Type 2"");Number n=DatasetUtilities.findMaximumRangeValue(dataset);assertTrue(n.doubleValue()> 101.0);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange1",0,"/** * A simple test for the cumulative range calculation.  The sequence of  ""cumulative"" values are considered to be{0.0,10.0,25.0,18.0}so  the range should be 0.0 -> 25.0.*/public void testCumulativeRange1(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(10.0,""Series 1"",""Start"");dataset.addValue(15.0,""Series 1"",""Delta 1"");dataset.addValue(-7.0,""Series 1"",""Delta 2"");Range range=DatasetUtilities.findCumulativeRangeBounds(dataset);assertEquals(0.0,range.getLowerBound(),0.00000001);assertEquals(25.0,range.getUpperBound(),0.00000001);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange2",0,"/** * A further test for the cumulative range calculation.*/public void testCumulativeRange2(){DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(-21.4,""Series 1"",""Start Value"");dataset.addValue(11.57,""Series 1"",""Delta 1"");dataset.addValue(3.51,""Series 1"",""Delta 2"");dataset.addValue(-12.36,""Series 1"",""Delta 3"");dataset.addValue(3.39,""Series 1"",""Delta 4"");dataset.addValue(38.68,""Series 1"",""Delta 5"");dataset.addValue(-43.31,""Series 1"",""Delta 6"");dataset.addValue(-29.59,""Series 1"",""Delta 7"");dataset.addValue(35.30,""Series 1"",""Delta 8"");dataset.addValue(5.0,""Series 1"",""Delta 9"");Range range=DatasetUtilities.findCumulativeRangeBounds(dataset);assertEquals(-49.51,range.getLowerBound(),0.00000001);assertEquals(23.39,range.getUpperBound(),0.00000001);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testCreateCategoryDataset1",0,"/** * Test the creation of a dataset from an array.*/public void testCreateCategoryDataset1(){String[]rowKeys={""R1"",""R2"",""R3""};String[]columnKeys={""C1"",""C2""};double[][]data=new double[3][];data[0]=new double[]{1.1,1.2};data[1]=new double[]{2.1,2.2};data[2]=new double[]{3.1,3.2};CategoryDataset dataset=DatasetUtilities.createCategoryDataset(rowKeys,columnKeys,data);assertTrue(dataset.getRowCount()== 3);assertTrue(dataset.getColumnCount()== 2);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testCreateCategoryDataset2",0,"/** * Test the creation of a dataset from an array.  This time is should fail  because the array dimensions are around the wrong way.*/public void testCreateCategoryDataset2(){boolean pass=false;String[]rowKeys={""R1"",""R2"",""R3""};String[]columnKeys={""C1"",""C2""};double[][]data=new double[2][];data[0]=new double[]{1.1,1.2,1.3};data[1]=new double[]{2.1,2.2,2.3};CategoryDataset dataset=null;try {dataset=DatasetUtilities.createCategoryDataset(rowKeys,columnKeys,data);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);assertTrue(dataset == null);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testMaximumStackedRangeValue",0,"/** * Test for a bug reported in the forum: http://www.jfree.org/phpBB2/viewtopic.php?t=7903*/public void testMaximumStackedRangeValue(){double v1=24.3;double v2=14.2;double v3=33.2;double v4=32.4;double v5=26.3;double v6=22.6;Number answer=new Double(Math.max(v1 + v2 + v3,v4 + v5 + v6));DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(v1,""Row 0"",""Column 0"");d.addValue(v2,""Row 1"",""Column 0"");d.addValue(v3,""Row 2"",""Column 0"");d.addValue(v4,""Row 0"",""Column 1"");d.addValue(v5,""Row 1"",""Column 1"");d.addValue(v6,""Row 2"",""Column 1"");Number max=DatasetUtilities.findMaximumStackedRangeValue(d);assertTrue(max.equals(answer));}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForCategoryDataset1",0,"/** * Some checks for the findStackedRangeBounds()method.*/public void testFindStackedRangeBoundsForCategoryDataset1(){CategoryDataset d1=createCategoryDataset1();Range r=DatasetUtilities.findStackedRangeBounds(d1);assertEquals(0.0,r.getLowerBound(),EPSILON);assertEquals(15.0,r.getUpperBound(),EPSILON);d1=createCategoryDataset2();r=DatasetUtilities.findStackedRangeBounds(d1);assertEquals(-2.0,r.getLowerBound(),EPSILON);assertEquals(2.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForCategoryDataset2",0,"/** * Some checks for the findStackedRangeBounds()method.*/public void testFindStackedRangeBoundsForCategoryDataset2(){CategoryDataset d1=new DefaultCategoryDataset();Range r=DatasetUtilities.findStackedRangeBounds(d1);assertTrue(r == null);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForTableXYDataset1",0,"/** * Some checks for the findStackedRangeBounds()method.*/public void testFindStackedRangeBoundsForTableXYDataset1(){TableXYDataset d2=createTableXYDataset1();Range r=DatasetUtilities.findStackedRangeBounds(d2);assertEquals(-2.0,r.getLowerBound(),EPSILON);assertEquals(2.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForTableXYDataset2",0,"/** * Some checks for the findStackedRangeBounds()method.*/public void testFindStackedRangeBoundsForTableXYDataset2(){DefaultTableXYDataset d=new DefaultTableXYDataset();Range r=DatasetUtilities.findStackedRangeBounds(d);assertEquals(r,new Range(0.0,0.0));}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testStackedRangeWithMap",0,"/** * Tests the stacked range extent calculation.*/public void testStackedRangeWithMap(){CategoryDataset d=createCategoryDataset1();KeyToGroupMap map=new KeyToGroupMap(""G0"");map.mapKeyToGroup(""R2"",""G1"");Range r=DatasetUtilities.findStackedRangeBounds(d,map);assertEquals(0.0,r.getLowerBound(),EPSILON);assertEquals(9.0,r.getUpperBound(),EPSILON);}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testIsEmptyOrNullXYDataset",0,"/** * Some checks for the isEmptyOrNull(XYDataset)method.*/public void testIsEmptyOrNullXYDataset(){XYSeriesCollection dataset=null;assertTrue(DatasetUtilities.isEmptyOrNull(dataset));dataset=new XYSeriesCollection();assertTrue(DatasetUtilities.isEmptyOrNull(dataset));XYSeries s1=new XYSeries(""S1"");dataset.addSeries(s1);assertTrue(DatasetUtilities.isEmptyOrNull(dataset));s1.add(1.0,2.0);assertFalse(DatasetUtilities.isEmptyOrNull(dataset));s1.clear();assertTrue(DatasetUtilities.isEmptyOrNull(dataset));}"
"org.jfree.data.general.junit.DatasetUtilitiesTests.testLimitPieDataset",0,"/** * Some checks for the limitPieDataset()methods.*/public void testLimitPieDataset(){DefaultPieDataset d1=new DefaultPieDataset();PieDataset d2=DatasetUtilities.createConsolidatedPieDataset(d1,""Other"",0.05);assertEquals(0,d2.getItemCount());d1.setValue(""Item 1"",1.0);d1.setValue(""Item 2"",49.50);d1.setValue(""Item 3"",49.50);d2=DatasetUtilities.createConsolidatedPieDataset(d1,""Other"",0.05);assertEquals(3,d2.getItemCount());assertEquals(""Item 1"",d2.getKey(0));assertEquals(""Item 2"",d2.getKey(1));assertEquals(""Item 3"",d2.getKey(2));d1.setValue(""Item 4"",1.0);d2=DatasetUtilities.createConsolidatedPieDataset(d1,""Other"",0.05,2);assertEquals(3,d2.getItemCount());assertEquals(""Item 2"",d2.getKey(0));assertEquals(""Item 3"",d2.getKey(1));assertEquals(""Other"",d2.getKey(2));assertEquals(new Double(2.0),d2.getValue(""Other""));}"
"org.jfree.chart.needle.junit.ShipNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){ShipNeedle n1=new ShipNeedle();ShipNeedle n2=new ShipNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.ShipNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){ShipNeedle n1=new ShipNeedle();ShipNeedle n2=null;try {n2=(ShipNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.ShipNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ShipNeedle n1=new ShipNeedle();ShipNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(ShipNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYLine3DRenderer r1=new XYLine3DRenderer();XYLine3DRenderer r2=new XYLine3DRenderer();assertEquals(r1,r2);r1.setXOffset(11.1);assertFalse(r1.equals(r2));r2.setXOffset(11.1);assertTrue(r1.equals(r2));r1.setYOffset(11.1);assertFalse(r1.equals(r2));r2.setYOffset(11.1);assertTrue(r1.equals(r2));r1.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(r1.equals(r2));r2.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYLine3DRenderer r1=new XYLine3DRenderer();XYLine3DRenderer r2=new XYLine3DRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYLine3DRenderer r1=new XYLine3DRenderer();r1.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));XYLine3DRenderer r2=null;try {r2=(XYLine3DRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYLine3DRenderer r1=new XYLine3DRenderer();r1.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));XYLine3DRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYLine3DRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.data.xy.junit.VectorSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){VectorSeries s1=new VectorSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);VectorSeriesCollection c1=new VectorSeriesCollection();c1.addSeries(s1);VectorSeries s2=new VectorSeries(""Series"");s2.add(1.0,1.1,1.2,1.3);VectorSeriesCollection c2=new VectorSeriesCollection();c2.addSeries(s2);assertTrue(c1.equals(c2));assertTrue(c2.equals(c1));c1.addSeries(new VectorSeries(""Empty Series""));assertFalse(c1.equals(c2));c2.addSeries(new VectorSeries(""Empty Series""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.VectorSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){VectorSeries s1=new VectorSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);VectorSeriesCollection c1=new VectorSeriesCollection();c1.addSeries(s1);VectorSeriesCollection c2=null;try {c2=(VectorSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));s1.setDescription(""XYZ"");assertFalse(c1.equals(c2));}"
"org.jfree.data.xy.junit.VectorSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){VectorSeries s1=new VectorSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);VectorSeriesCollection c1=new VectorSeriesCollection();c1.addSeries(s1);VectorSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(VectorSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.xy.junit.VectorSeriesCollectionTests.testRemoveSeries",0,"/** * Some checks for the removeSeries()method.*/public void testRemoveSeries(){VectorSeries s1=new VectorSeries(""S1"");VectorSeries s2=new VectorSeries(""S2"");VectorSeriesCollection vsc=new VectorSeriesCollection();vsc.addSeries(s1);vsc.addSeries(s2);assertEquals(2,vsc.getSeriesCount());boolean b=vsc.removeSeries(s1);assertTrue(b);assertEquals(1,vsc.getSeriesCount());assertEquals(""S2"",vsc.getSeriesKey(0));b=vsc.removeSeries(new VectorSeries(""NotInDataset""));assertFalse(b);assertEquals(1,vsc.getSeriesCount());b=vsc.removeSeries(s2);assertEquals(0,vsc.getSeriesCount());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetValue",0,"/** * Some checks for the getValue()method.*/public void testGetValue(){double[]starts_S1=new double[]{0.1,0.2,0.3};double[]starts_S2=new double[]{0.3,0.4,0.5};double[]ends_S1=new double[]{0.5,0.6,0.7};double[]ends_S2=new double[]{0.7,0.8,0.9};double[][]starts=new double[][]{starts_S1,starts_S2};double[][]ends=new double[][]{ends_S1,ends_S2};DefaultIntervalCategoryDataset d=new DefaultIntervalCategoryDataset(starts,ends);assertEquals(new Double(0.1),d.getStartValue(""Series 1"",""Category 1""));assertEquals(new Double(0.2),d.getStartValue(""Series 1"",""Category 2""));assertEquals(new Double(0.3),d.getStartValue(""Series 1"",""Category 3""));assertEquals(new Double(0.3),d.getStartValue(""Series 2"",""Category 1""));assertEquals(new Double(0.4),d.getStartValue(""Series 2"",""Category 2""));assertEquals(new Double(0.5),d.getStartValue(""Series 2"",""Category 3""));assertEquals(new Double(0.5),d.getEndValue(""Series 1"",""Category 1""));assertEquals(new Double(0.6),d.getEndValue(""Series 1"",""Category 2""));assertEquals(new Double(0.7),d.getEndValue(""Series 1"",""Category 3""));assertEquals(new Double(0.7),d.getEndValue(""Series 2"",""Category 1""));assertEquals(new Double(0.8),d.getEndValue(""Series 2"",""Category 2""));assertEquals(new Double(0.9),d.getEndValue(""Series 2"",""Category 3""));boolean pass=false;try {d.getValue(""XX"",""Category 1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {d.getValue(""Series 1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowAndColumnCount",0,"/** * Some tests for the getRowCount()method.*/public void testGetRowAndColumnCount(){double[]starts_S1=new double[]{0.1,0.2,0.3};double[]starts_S2=new double[]{0.3,0.4,0.5};double[]ends_S1=new double[]{0.5,0.6,0.7};double[]ends_S2=new double[]{0.7,0.8,0.9};double[][]starts=new double[][]{starts_S1,starts_S2};double[][]ends=new double[][]{ends_S1,ends_S2};DefaultIntervalCategoryDataset d=new DefaultIntervalCategoryDataset(starts,ends);assertEquals(2,d.getRowCount());assertEquals(3,d.getColumnCount());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){double[]starts_S1A=new double[]{0.1,0.2,0.3};double[]starts_S2A=new double[]{0.3,0.4,0.5};double[]ends_S1A=new double[]{0.5,0.6,0.7};double[]ends_S2A=new double[]{0.7,0.8,0.9};double[][]startsA=new double[][]{starts_S1A,starts_S2A};double[][]endsA=new double[][]{ends_S1A,ends_S2A};DefaultIntervalCategoryDataset dA=new DefaultIntervalCategoryDataset(startsA,endsA);double[]starts_S1B=new double[]{0.1,0.2,0.3};double[]starts_S2B=new double[]{0.3,0.4,0.5};double[]ends_S1B=new double[]{0.5,0.6,0.7};double[]ends_S2B=new double[]{0.7,0.8,0.9};double[][]startsB=new double[][]{starts_S1B,starts_S2B};double[][]endsB=new double[][]{ends_S1B,ends_S2B};DefaultIntervalCategoryDataset dB=new DefaultIntervalCategoryDataset(startsB,endsB);assertTrue(dA.equals(dB));assertTrue(dB.equals(dA));DefaultIntervalCategoryDataset empty1=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);DefaultIntervalCategoryDataset empty2=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertTrue(empty1.equals(empty2));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){double[]starts_S1=new double[]{0.1,0.2,0.3};double[]starts_S2=new double[]{0.3,0.4,0.5};double[]ends_S1=new double[]{0.5,0.6,0.7};double[]ends_S2=new double[]{0.7,0.8,0.9};double[][]starts=new double[][]{starts_S1,starts_S2};double[][]ends=new double[][]{ends_S1,ends_S2};DefaultIntervalCategoryDataset d1=new DefaultIntervalCategoryDataset(starts,ends);DefaultIntervalCategoryDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultIntervalCategoryDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){double[]starts_S1=new double[]{0.1,0.2,0.3};double[]starts_S2=new double[]{0.3,0.4,0.5};double[]ends_S1=new double[]{0.5,0.6,0.7};double[]ends_S2=new double[]{0.7,0.8,0.9};double[][]starts=new double[][]{starts_S1,starts_S2};double[][]ends=new double[][]{ends_S1,ends_S2};DefaultIntervalCategoryDataset d1=new DefaultIntervalCategoryDataset(starts,ends);DefaultIntervalCategoryDataset d2=null;try {d2=(DefaultIntervalCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));d1.setStartValue(0,""Category 1"",new Double(0.99));assertFalse(d1.equals(d2));d2.setStartValue(0,""Category 1"",new Double(0.99));assertTrue(d1.equals(d2));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testCloning2",0,"/** * A check to ensure that an empty dataset can be cloned.*/public void testCloning2(){DefaultIntervalCategoryDataset d1=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);DefaultIntervalCategoryDataset d2=null;try {d2=(DefaultIntervalCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetStartValue",0,"/** * Some basic checks for the setStartValue()method.*/public void testSetStartValue(){double[]starts_S1=new double[]{0.1,0.2,0.3};double[]starts_S2=new double[]{0.3,0.4,0.5};double[]ends_S1=new double[]{0.5,0.6,0.7};double[]ends_S2=new double[]{0.7,0.8,0.9};double[][]starts=new double[][]{starts_S1,starts_S2};double[][]ends=new double[][]{ends_S1,ends_S2};DefaultIntervalCategoryDataset d1=new DefaultIntervalCategoryDataset(starts,ends);d1.setStartValue(0,""Category 2"",new Double(99.9));assertEquals(new Double(99.9),d1.getStartValue(""Series 1"",""Category 2""));boolean pass=false;try {d1.setStartValue(-1,""Category 2"",new Double(99.9));}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d1.setStartValue(2,""Category 2"",new Double(99.9));}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetEndValue",0,"/** * Some basic checks for the setEndValue()method.*/public void testSetEndValue(){double[]starts_S1=new double[]{0.1,0.2,0.3};double[]starts_S2=new double[]{0.3,0.4,0.5};double[]ends_S1=new double[]{0.5,0.6,0.7};double[]ends_S2=new double[]{0.7,0.8,0.9};double[][]starts=new double[][]{starts_S1,starts_S2};double[][]ends=new double[][]{ends_S1,ends_S2};DefaultIntervalCategoryDataset d1=new DefaultIntervalCategoryDataset(starts,ends);d1.setEndValue(0,""Category 2"",new Double(99.9));assertEquals(new Double(99.9),d1.getEndValue(""Series 1"",""Category 2""));boolean pass=false;try {d1.setEndValue(-1,""Category 2"",new Double(99.9));}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d1.setEndValue(2,""Category 2"",new Double(99.9));}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesCount",0,"/** * Some checks for the getSeriesCount()method.*/public void testGetSeriesCount(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(0,empty.getSeriesCount());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryCount",0,"/** * Some checks for the getCategoryCount()method.*/public void testGetCategoryCount(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(0,empty.getCategoryCount());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetSeriesIndex",0,"/** * Some checks for the getSeriesIndex()method.*/public void testGetSeriesIndex(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(-1,empty.getSeriesIndex(""ABC""));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowIndex",0,"/** * Some checks for the getRowIndex()method.*/public void testGetRowIndex(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(-1,empty.getRowIndex(""ABC""));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetSeriesKeys",0,"/** * Some checks for the setSeriesKeys()method.*/public void testSetSeriesKeys(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);boolean pass=true;try {empty.setSeriesKeys(new String[0]);}catch(RuntimeException e){pass=false;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetCategoryIndex",0,"/** * Some checks for the getCategoryIndex()method.*/public void testGetCategoryIndex(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(-1,empty.getCategoryIndex(""ABC""));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnIndex",0,"/** * Some checks for the getColumnIndex()method.*/public void testGetColumnIndex(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(-1,empty.getColumnIndex(""ABC""));}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testSetCategoryKeys",0,"/** * Some checks for the setCategoryKeys()method.*/public void testSetCategoryKeys(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);boolean pass=true;try {empty.setCategoryKeys(new String[0]);}catch(RuntimeException e){pass=false;}assertTrue(pass);}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnKeys",0,"/** * Some checks for the getColumnKeys()method.*/public void testGetColumnKeys(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);List keys=empty.getColumnKeys();assertEquals(0,keys.size());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowKeys",0,"/** * Some checks for the getRowKeys()method.*/public void testGetRowKeys(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);List keys=empty.getRowKeys();assertEquals(0,keys.size());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetColumnCount",0,"/** * Some checks for the getColumnCount()method.*/public void testGetColumnCount(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(0,empty.getColumnCount());}"
"org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests.testGetRowCount",0,"/** * Some checks for the getRowCount()method.*/public void testGetRowCount(){DefaultIntervalCategoryDataset empty=new DefaultIntervalCategoryDataset(new double[0][0],new double[0][0]);assertEquals(0,empty.getColumnCount());}"
"org.jfree.data.time.junit.MillisecondTests.testEqualsSelf",0,"/** * Check that a  {@link Millisecond}instance is equal to itself.SourceForge Bug ID: 558850.*/public void testEqualsSelf(){Millisecond millisecond=new Millisecond();assertTrue(millisecond.equals(millisecond));}"
"org.jfree.data.time.junit.MillisecondTests.testEquals",0,"/** * Tests the equals method.*/public void testEquals(){Day day1=new Day(29,MonthConstants.MARCH,2002);Hour hour1=new Hour(15,day1);Minute minute1=new Minute(15,hour1);Second second1=new Second(34,minute1);Millisecond milli1=new Millisecond(999,second1);Day day2=new Day(29,MonthConstants.MARCH,2002);Hour hour2=new Hour(15,day2);Minute minute2=new Minute(15,hour2);Second second2=new Second(34,minute2);Millisecond milli2=new Millisecond(999,second2);assertTrue(milli1.equals(milli2));}"
"org.jfree.data.time.junit.MillisecondTests.testDateConstructor1",0,"/** * In GMT,the 4.55:59.123pm on 21 Mar 2002 is  java.util.Date(1016729759123L).  Use this to check the Millisecond  constructor.*/public void testDateConstructor1(){TimeZone zone=TimeZone.getTimeZone(""GMT"");Calendar c=new GregorianCalendar(zone);Millisecond m1=new Millisecond(new Date(1016729759122L),zone);Millisecond m2=new Millisecond(new Date(1016729759123L),zone);assertEquals(122,m1.getMillisecond());assertEquals(1016729759122L,m1.getLastMillisecond(c));assertEquals(123,m2.getMillisecond());assertEquals(1016729759123L,m2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.MillisecondTests.testDateConstructor2",0,"/** * In Tallinn,the 4.55:59.123pm on 21 Mar 2002 is  java.util.Date(1016722559123L).  Use this to check the Millisecond  constructor.*/public void testDateConstructor2(){TimeZone zone=TimeZone.getTimeZone(""Europe/Tallinn"");Calendar c=new GregorianCalendar(zone);Millisecond m1=new Millisecond(new Date(1016722559122L),zone);Millisecond m2=new Millisecond(new Date(1016722559123L),zone);assertEquals(122,m1.getMillisecond());assertEquals(1016722559122L,m1.getLastMillisecond(c));assertEquals(123,m2.getMillisecond());assertEquals(1016722559123L,m2.getFirstMillisecond(c));}"
"org.jfree.data.time.junit.MillisecondTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){Millisecond m1=new Millisecond();Millisecond m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(Millisecond)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(m1,m2);}"
"org.jfree.data.time.junit.MillisecondTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){Millisecond m1=new Millisecond(599,23,45,7,9,10,2007);Millisecond m2=new Millisecond(599,23,45,7,9,10,2007);assertTrue(m1.equals(m2));int hash1=m1.hashCode();int hash2=m2.hashCode();assertEquals(hash1,hash2);}"
"org.jfree.data.time.junit.MillisecondTests.test943985",0,"/** * A test for bug report 943985 - the calculation for the middle  millisecond is incorrect for odd milliseconds.*/public void test943985(){Millisecond ms=new Millisecond(new java.util.Date(4));assertEquals(ms.getFirstMillisecond(),ms.getMiddleMillisecond());assertEquals(ms.getMiddleMillisecond(),ms.getLastMillisecond());ms=new Millisecond(new java.util.Date(5));assertEquals(ms.getFirstMillisecond(),ms.getMiddleMillisecond());assertEquals(ms.getMiddleMillisecond(),ms.getLastMillisecond());}"
"org.jfree.data.time.junit.MillisecondTests.testNotCloneable",0,"/** * The  {@link Millisecond}class is immutable,so should not be {@link Cloneable}.*/public void testNotCloneable(){Millisecond m=new Millisecond(599,23,45,7,9,10,2007);assertFalse(m instanceof Cloneable);}"
"org.jfree.data.time.junit.MillisecondTests.testGetFirstMillisecond",0,"/** * Some checks for the getFirstMillisecond()method.*/public void testGetFirstMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Millisecond m=new Millisecond(500,15,43,15,1,4,2006);assertEquals(1143902595500L,m.getFirstMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MillisecondTests.testGetFirstMillisecondWithTimeZone",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithTimeZone(){Millisecond m=new Millisecond(500,50,59,15,1,4,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-623289609500L,m.getFirstMillisecond(c));boolean pass=false;try {m.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MillisecondTests.testGetFirstMillisecondWithCalendar",0,"/** * Some checks for the getFirstMillisecond(TimeZone)method.*/public void testGetFirstMillisecondWithCalendar(){Millisecond m=new Millisecond(500,55,40,2,15,4,2000);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(955766455500L,m.getFirstMillisecond(calendar));boolean pass=false;try {m.getFirstMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MillisecondTests.testGetLastMillisecond",0,"/** * Some checks for the getLastMillisecond()method.*/public void testGetLastMillisecond(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.UK);TimeZone savedZone=TimeZone.getDefault();TimeZone.setDefault(TimeZone.getTimeZone(""Europe/London""));Millisecond m=new Millisecond(750,1,1,1,1,1,1970);assertEquals(61750L,m.getLastMillisecond());Locale.setDefault(saved);TimeZone.setDefault(savedZone);}"
"org.jfree.data.time.junit.MillisecondTests.testGetLastMillisecondWithTimeZone",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithTimeZone(){Millisecond m=new Millisecond(750,55,1,2,7,7,1950);TimeZone zone=TimeZone.getTimeZone(""America/Los_Angeles"");Calendar c=new GregorianCalendar(zone);assertEquals(-614962684250L,m.getLastMillisecond(c));boolean pass=false;try {m.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MillisecondTests.testGetLastMillisecondWithCalendar",0,"/** * Some checks for the getLastMillisecond(TimeZone)method.*/public void testGetLastMillisecondWithCalendar(){Millisecond m=new Millisecond(250,50,45,21,21,4,2001);GregorianCalendar calendar=new GregorianCalendar(Locale.GERMANY);calendar.setTimeZone(TimeZone.getTimeZone(""Europe/Frankfurt""));assertEquals(987889550250L,m.getLastMillisecond(calendar));boolean pass=false;try {m.getLastMillisecond((Calendar)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.time.junit.MillisecondTests.testGetSerialIndex",0,"/** * Some checks for the getSerialIndex()method.*/public void testGetSerialIndex(){Millisecond m=new Millisecond(500,1,1,1,1,1,2000);assertEquals(3155850061500L,m.getSerialIndex());m=new Millisecond(500,1,1,1,1,1,1900);assertEquals(176461500L,m.getSerialIndex());}"
"org.jfree.data.time.junit.MillisecondTests.testNext",0,"/** * Some checks for the testNext()method.*/public void testNext(){Millisecond m=new Millisecond(555,55,30,1,12,12,2000);m=(Millisecond)m.next();assertEquals(2000,m.getSecond().getMinute().getHour().getYear());assertEquals(12,m.getSecond().getMinute().getHour().getMonth());assertEquals(12,m.getSecond().getMinute().getHour().getDayOfMonth());assertEquals(1,m.getSecond().getMinute().getHour().getHour());assertEquals(30,m.getSecond().getMinute().getMinute());assertEquals(55,m.getSecond().getSecond());assertEquals(556,m.getMillisecond());m=new Millisecond(999,59,59,23,31,12,9999);assertNull(m.next());}"
"org.jfree.data.time.junit.MillisecondTests.testGetStart",0,"/** * Some checks for the getStart()method.*/public void testGetStart(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,47,55);cal.set(Calendar.MILLISECOND,555);Millisecond m=new Millisecond(555,55,47,3,16,1,2006);assertEquals(cal.getTime(),m.getStart());Locale.setDefault(saved);}"
"org.jfree.data.time.junit.MillisecondTests.testGetEnd",0,"/** * Some checks for the getEnd()method.*/public void testGetEnd(){Locale saved=Locale.getDefault();Locale.setDefault(Locale.ITALY);Calendar cal=Calendar.getInstance(Locale.ITALY);cal.set(2006,Calendar.JANUARY,16,3,47,55);cal.set(Calendar.MILLISECOND,555);Millisecond m=new Millisecond(555,55,47,3,16,1,2006);assertEquals(cal.getTime(),m.getEnd());Locale.setDefault(saved);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){StackedBarRenderer3D r1=new StackedBarRenderer3D();StackedBarRenderer3D r2=new StackedBarRenderer3D();assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StackedBarRenderer3D r1=new StackedBarRenderer3D();StackedBarRenderer3D r2=new StackedBarRenderer3D();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StackedBarRenderer3D r1=new StackedBarRenderer3D();StackedBarRenderer3D r2=null;try {r2=(StackedBarRenderer3D)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StackedBarRenderer3D r1=new StackedBarRenderer3D();StackedBarRenderer3D r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StackedBarRenderer3D)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList1(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""s0"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(2,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(1.0),((Object[])l.get(1))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList2(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(-1.0,""s0"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(2,l.size());assertEquals(new Double(-1.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList3(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(0.0,""s0"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(2,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList4",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList4(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(null,""s0"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(0,l.size());}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1a",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList1a(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""s0"",""c0"");d.addValue(1.1,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(1.0),((Object[])l.get(1))[1]);assertEquals(new Double(2.1),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1b",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList1b(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""s0"",""c0"");d.addValue(-1.1,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(-1.1),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);assertEquals(new Double(1.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1c",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList1c(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""s0"",""c0"");d.addValue(0.0,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(1.0),((Object[])l.get(1))[1]);assertEquals(new Double(1.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList1d",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList1d(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""s0"",""c0"");d.addValue(null,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(2,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(1.0),((Object[])l.get(1))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2a",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList2a(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(-1.0,""s0"",""c0"");d.addValue(1.1,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(-1.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);assertEquals(new Double(1.1),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2b",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList2b(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(-1.0,""s0"",""c0"");d.addValue(-1.1,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(-2.1),((Object[])l.get(0))[1]);assertEquals(new Double(-1.0),((Object[])l.get(1))[1]);assertEquals(new Double(0.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2c",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList2c(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(-1.0,""s0"",""c0"");d.addValue(0.0,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(-1.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);assertEquals(new Double(0.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList2d",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList2d(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(-1.0,""s0"",""c0"");d.addValue(null,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(2,l.size());assertEquals(new Double(-1.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3a",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList3a(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(0.0,""s0"",""c0"");d.addValue(1.1,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);assertEquals(new Double(1.1),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3b",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList3b(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(0.0,""s0"",""c0"");d.addValue(-1.1,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(-1.1),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);assertEquals(new Double(0.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3c",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList3c(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(0.0,""s0"",""c0"");d.addValue(0.0,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);assertEquals(new Double(0.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList3d",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList3d(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(0.0,""s0"",""c0"");d.addValue(null,""s1"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(2,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(0.0),((Object[])l.get(1))[1]);}"
"org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests.testCreateStackedValueList5",0,"/** * A test for the createStackedValueList()method.*/public void testCreateStackedValueList5(){DefaultCategoryDataset d=new DefaultCategoryDataset();d.addValue(1.0,""s0"",""c0"");d.addValue(null,""s1"",""c0"");d.addValue(2.0,""s2"",""c0"");MyRenderer r=new MyRenderer();List l=r.createStackedValueList(d,""c0"",0.0,false);assertEquals(3,l.size());assertEquals(new Double(0.0),((Object[])l.get(0))[1]);assertEquals(new Double(1.0),((Object[])l.get(1))[1]);assertEquals(new Double(3.0),((Object[])l.get(2))[1]);}"
"org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYErrorRenderer r1=new XYErrorRenderer();XYErrorRenderer r2=new XYErrorRenderer();assertEquals(r1,r2);r1.setDrawXError(false);assertFalse(r1.equals(r2));r2.setDrawXError(false);assertTrue(r1.equals(r2));r1.setDrawYError(false);assertFalse(r1.equals(r2));r2.setDrawYError(false);assertTrue(r1.equals(r2));r1.setCapLength(9.0);assertFalse(r1.equals(r2));r2.setCapLength(9.0);assertTrue(r1.equals(r2));r1.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertFalse(r1.equals(r2));r2.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYErrorRenderer r1=new XYErrorRenderer();XYErrorRenderer r2=new XYErrorRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYErrorRenderer r1=new XYErrorRenderer();r1.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));XYErrorRenderer r2=null;try {r2=(XYErrorRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYErrorRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYErrorRenderer r1=new XYErrorRenderer();r1.setErrorPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));XYErrorRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYErrorRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.entity.junit.PieSectionEntityTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){PieSectionEntity e1=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),1,2,""Key"",""ToolTip"",""URL"");PieSectionEntity e2=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),1,2,""Key"",""ToolTip"",""URL"");assertTrue(e1.equals(e2));e1.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertFalse(e1.equals(e2));e2.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(e1.equals(e2));e1.setToolTipText(""New ToolTip"");assertFalse(e1.equals(e2));e2.setToolTipText(""New ToolTip"");assertTrue(e1.equals(e2));e1.setURLText(""New URL"");assertFalse(e1.equals(e2));e2.setURLText(""New URL"");assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.PieSectionEntityTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){PieSectionEntity e1=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),1,2,""Key"",""ToolTip"",""URL"");PieSectionEntity e2=null;try {e2=(PieSectionEntity)e1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(e1 != e2);assertTrue(e1.getClass()== e2.getClass());assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.PieSectionEntityTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PieSectionEntity e1=new PieSectionEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),new DefaultPieDataset(),1,2,""Key"",""ToolTip"",""URL"");PieSectionEntity e2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(e1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));e2=(PieSectionEntity)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(e1,e2);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetValue",0,"/** * Some checks for the getValue()method.*/public void testGetValue(){DefaultMultiValueCategoryDataset d=new DefaultMultiValueCategoryDataset();List values=new ArrayList();values.add(new Integer(1));values.add(new Integer(2));d.add(values,""R1"",""C1"");assertEquals(new Double(1.5),d.getValue(""R1"",""C1""));boolean pass=false;try {d.getValue(""XX"",""C1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {d.getValue(""R1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetValue2",0,"/** * A simple check for the getValue(int,int)method.*/public void testGetValue2(){DefaultMultiValueCategoryDataset d=new DefaultMultiValueCategoryDataset();boolean pass=false;try {d.getValue(0,0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetRowCount",0,"/** * Some tests for the getRowCount()method.*/public void testGetRowCount(){DefaultMultiValueCategoryDataset d=new DefaultMultiValueCategoryDataset();assertTrue(d.getRowCount()== 0);List values=new ArrayList();d.add(values,""R1"",""C1"");assertTrue(d.getRowCount()== 1);d.add(values,""R2"",""C1"");assertTrue(d.getRowCount()== 2);d.add(values,""R2"",""C1"");assertTrue(d.getRowCount()== 2);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testGetColumnCount",0,"/** * Some tests for the getColumnCount()method.*/public void testGetColumnCount(){DefaultMultiValueCategoryDataset d=new DefaultMultiValueCategoryDataset();assertTrue(d.getColumnCount()== 0);List values=new ArrayList();d.add(values,""R1"",""C1"");assertTrue(d.getColumnCount()== 1);d.add(values,""R1"",""C2"");assertTrue(d.getColumnCount()== 2);d.add(values,""R1"",""C2"");assertTrue(d.getColumnCount()== 2);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultMultiValueCategoryDataset d1=new DefaultMultiValueCategoryDataset();DefaultMultiValueCategoryDataset d2=new DefaultMultiValueCategoryDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));List values=new ArrayList();d1.add(values,""R1"",""C1"");assertFalse(d1.equals(d2));d2.add(values,""R1"",""C1"");assertTrue(d1.equals(d2));values.add(new Integer(99));d1.add(values,""R1"",""C1"");assertFalse(d1.equals(d2));d2.add(values,""R1"",""C1"");assertTrue(d1.equals(d2));values.add(new Integer(99));d1.add(values,""R1"",""C2"");assertFalse(d1.equals(d2));d2.add(values,""R1"",""C2"");assertTrue(d1.equals(d2));}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultMultiValueCategoryDataset d1=new DefaultMultiValueCategoryDataset();DefaultMultiValueCategoryDataset d2=new DefaultMultiValueCategoryDataset();try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultMultiValueCategoryDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testAddValue",0,"/** * Some checks for the add()method.*/public void testAddValue(){DefaultMultiValueCategoryDataset d1=new DefaultMultiValueCategoryDataset();boolean pass=false;try {d1.add(null,""R1"",""C1"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);List values=new ArrayList();d1.add(values,""R2"",""C1"");assertEquals(values,d1.getValues(""R2"",""C1""));pass=false;try {d1.add(values,null,""C2"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultMultiValueCategoryDataset d1=new DefaultMultiValueCategoryDataset();DefaultMultiValueCategoryDataset d2=null;try {d2=(DefaultMultiValueCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));List values=new ArrayList();values.add(new Integer(99));d1.add(values,""R1"",""C1"");try {d2=(DefaultMultiValueCategoryDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));List values2=new ArrayList();values2.add(new Integer(111));d1.add(values2,""R2"",""C2"");assertFalse(d1.equals(d2));d2.add(values2,""R2"",""C2"");assertTrue(d1.equals(d2));}"
"org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){ExtendedCategoryAxis a1=new ExtendedCategoryAxis(""Test"");ExtendedCategoryAxis a2=new ExtendedCategoryAxis(""Test"");assertTrue(a1.equals(a2));a1.addSubLabel(""C1"",""C1-sublabel"");assertFalse(a1.equals(a2));a2.addSubLabel(""C1"",""C1-sublabel"");assertTrue(a1.equals(a2));a1.setSubLabelFont(new Font(""Dialog"",Font.BOLD,8));assertFalse(a1.equals(a2));a2.setSubLabelFont(new Font(""Dialog"",Font.BOLD,8));assertTrue(a1.equals(a2));a1.setSubLabelPaint(Color.red);assertFalse(a1.equals(a2));a2.setSubLabelPaint(Color.red);assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){ExtendedCategoryAxis a1=new ExtendedCategoryAxis(""Test"");ExtendedCategoryAxis a2=new ExtendedCategoryAxis(""Test"");assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){ExtendedCategoryAxis a1=new ExtendedCategoryAxis(""Test"");ExtendedCategoryAxis a2=null;try {a2=(ExtendedCategoryAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));a1.addSubLabel(""C1"",""ABC"");assertFalse(a1.equals(a2));a2.addSubLabel(""C1"",""ABC"");assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testCloning2",0,"/** * Confirm that cloning works.  This test customises the font and paint per category label.*/public void testCloning2(){ExtendedCategoryAxis a1=new ExtendedCategoryAxis(""Test"");a1.setTickLabelFont(""C1"",new Font(""Dialog"",Font.PLAIN,15));a1.setTickLabelPaint(""C1"",new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.white));ExtendedCategoryAxis a2=null;try {a2=(ExtendedCategoryAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));a1.setTickLabelFont(""C1"",null);assertFalse(a1.equals(a2));a2.setTickLabelFont(""C1"",null);assertTrue(a1.equals(a2));a1.setTickLabelPaint(""C1"",Color.yellow);assertFalse(a1.equals(a2));a2.setTickLabelPaint(""C1"",Color.yellow);assertTrue(a1.equals(a2));a1.addCategoryLabelToolTip(""C1"",""XYZ"");assertFalse(a1.equals(a2));a2.addCategoryLabelToolTip(""C1"",""XYZ"");assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.ExtendedCategoryAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ExtendedCategoryAxis a1=new ExtendedCategoryAxis(""Test"");a1.setSubLabelPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));ExtendedCategoryAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(ExtendedCategoryAxis)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.plot.junit.IntervalMarkerTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){IntervalMarker m1=new IntervalMarker(45.0,50.0);IntervalMarker m2=new IntervalMarker(45.0,50.0);assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1=new IntervalMarker(44.0,50.0);assertFalse(m1.equals(m2));m2=new IntervalMarker(44.0,50.0);assertTrue(m1.equals(m2));m1=new IntervalMarker(44.0,55.0);assertFalse(m1.equals(m2));m2=new IntervalMarker(44.0,55.0);assertTrue(m1.equals(m2));GradientPaintTransformer t=new StandardGradientPaintTransformer(GradientPaintTransformType.HORIZONTAL);m1.setGradientPaintTransformer(t);assertFalse(m1.equals(m2));m2.setGradientPaintTransformer(t);assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.IntervalMarkerTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){IntervalMarker m1=new IntervalMarker(45.0,50.0);IntervalMarker m2=null;try {m2=(IntervalMarker)m1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(m1 != m2);assertTrue(m1.getClass()== m2.getClass());assertTrue(m1.equals(m2));}"
"org.jfree.chart.plot.junit.IntervalMarkerTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){IntervalMarker m1=new IntervalMarker(45.0,50.0);IntervalMarker m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(IntervalMarker)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}boolean b=m1.equals(m2);assertTrue(b);}"
"org.jfree.chart.plot.junit.IntervalMarkerTests.testGetSetStartValue",0,"/** * Some checks for the getStartValue()and setStartValue()methods.*/public void testGetSetStartValue(){IntervalMarker m=new IntervalMarker(1.0,2.0);m.addChangeListener(this);this.lastEvent=null;assertEquals(1.0,m.getStartValue(),EPSILON);m.setStartValue(0.5);assertEquals(0.5,m.getStartValue(),EPSILON);assertEquals(m,this.lastEvent.getMarker());}"
"org.jfree.chart.plot.junit.IntervalMarkerTests.testGetSetEndValue",0,"/** * Some checks for the getEndValue()and setEndValue()methods.*/public void testGetSetEndValue(){IntervalMarker m=new IntervalMarker(1.0,2.0);m.addChangeListener(this);this.lastEvent=null;assertEquals(2.0,m.getEndValue(),EPSILON);m.setEndValue(0.5);assertEquals(0.5,m.getEndValue(),EPSILON);assertEquals(m,this.lastEvent.getMarker());}"
"org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultKeyedValues2DDataset d1=new DefaultKeyedValues2DDataset();d1.setValue(new Integer(1),""V1"",""C1"");d1.setValue(null,""V2"",""C1"");d1.setValue(new Integer(3),""V3"",""C2"");DefaultKeyedValues2DDataset d2=null;try {d2=(DefaultKeyedValues2DDataset)d1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultKeyedValues2DDataset d1=new DefaultKeyedValues2DDataset();d1.addValue(new Double(234.2),""Row1"",""Col1"");d1.addValue(null,""Row1"",""Col2"");d1.addValue(new Double(345.9),""Row2"",""Col1"");d1.addValue(new Double(452.7),""Row2"",""Col2"");DefaultKeyedValues2DDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultKeyedValues2DDataset)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);}"
"org.jfree.data.time.junit.SimpleTimePeriodTests.testEqualsSelf",0,"/** * Check that an instance is equal to itself. SourceForge Bug ID: 558850.*/public void testEqualsSelf(){SimpleTimePeriod p=new SimpleTimePeriod(new Date(1000L),new Date(1001L));assertTrue(p.equals(p));}"
"org.jfree.data.time.junit.SimpleTimePeriodTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){SimpleTimePeriod p1=new SimpleTimePeriod(new Date(1000L),new Date(1004L));SimpleTimePeriod p2=new SimpleTimePeriod(new Date(1000L),new Date(1004L));assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1=new SimpleTimePeriod(new Date(1002L),new Date(1004L));assertFalse(p1.equals(p2));p2=new SimpleTimePeriod(new Date(1002L),new Date(1004L));assertTrue(p1.equals(p2));p1=new SimpleTimePeriod(new Date(1002L),new Date(1003L));assertFalse(p1.equals(p2));p2=new SimpleTimePeriod(new Date(1002L),new Date(1003L));assertTrue(p1.equals(p2));}"
"org.jfree.data.time.junit.SimpleTimePeriodTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){SimpleTimePeriod p1=new SimpleTimePeriod(new Date(1000L),new Date(1001L));SimpleTimePeriod p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(SimpleTimePeriod)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(p1,p2);}"
"org.jfree.data.time.junit.SimpleTimePeriodTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){SimpleTimePeriod s1=new SimpleTimePeriod(new Date(10L),new Date(20L));SimpleTimePeriod s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertTrue(s1.equals(s2));int h1=s1.hashCode();int h2=s2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.time.junit.SimpleTimePeriodTests.testClone",0,"/** * This class is immutable,so it should not implement Cloneable.*/public void testClone(){SimpleTimePeriod s1=new SimpleTimePeriod(new Date(10L),new Date(20L));assertFalse(s1 instanceof Cloneable);}"
"org.jfree.data.time.junit.SimpleTimePeriodTests.testCompareTo",0,"/** * Some checks for the compareTo()method.*/public void testCompareTo(){SimpleTimePeriod s1=new SimpleTimePeriod(new Date(10L),new Date(20L));SimpleTimePeriod s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(0,s1.compareTo(s2));s1=new SimpleTimePeriod(new Date(9L),new Date(21L));s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(-1,s1.compareTo(s2));s1=new SimpleTimePeriod(new Date(11L),new Date(19L));s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(1,s1.compareTo(s2));s1=new SimpleTimePeriod(new Date(9L),new Date(19L));s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(-1,s1.compareTo(s2));s1=new SimpleTimePeriod(new Date(11L),new Date(21));s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(1,s1.compareTo(s2));s1=new SimpleTimePeriod(new Date(10L),new Date(18));s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(-1,s1.compareTo(s2));s1=new SimpleTimePeriod(new Date(10L),new Date(22));s2=new SimpleTimePeriod(new Date(10L),new Date(20L));assertEquals(1,s1.compareTo(s2));}"
"org.jfree.chart.axis.junit.DateTickTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Date d1=new Date(0L);Date d2=new Date(1L);String l1=""Label 1"";String l2=""Label 2"";TextAnchor ta1=TextAnchor.CENTER;TextAnchor ta2=TextAnchor.BASELINE_LEFT;DateTick t1=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);DateTick t2=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);assertTrue(t1.equals(t2));t1=new DateTick(d2,l1,ta1,ta1,Math.PI / 2.0);assertFalse(t1.equals(t2));t2=new DateTick(d2,l1,ta1,ta1,Math.PI / 2.0);assertTrue(t1.equals(t2));t1=new DateTick(d1,l2,ta1,ta1,Math.PI / 2.0);assertFalse(t1.equals(t2));t2=new DateTick(d1,l2,ta1,ta1,Math.PI / 2.0);assertTrue(t1.equals(t2));t1=new DateTick(d1,l1,ta2,ta1,Math.PI / 2.0);assertFalse(t1.equals(t2));t2=new DateTick(d1,l1,ta2,ta1,Math.PI / 2.0);assertTrue(t1.equals(t2));t1=new DateTick(d1,l1,ta1,ta2,Math.PI / 2.0);assertFalse(t1.equals(t2));t2=new DateTick(d1,l1,ta1,ta2,Math.PI / 2.0);assertTrue(t1.equals(t2));t1=new DateTick(d1,l1,ta1,ta1,Math.PI / 3.0);assertFalse(t1.equals(t2));t2=new DateTick(d1,l1,ta1,ta1,Math.PI / 3.0);assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.DateTickTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Date d1=new Date(0L);String l1=""Label 1"";TextAnchor ta1=TextAnchor.CENTER;DateTick t1=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);DateTick t2=new DateTick(d1,l1,ta1,ta1,Math.PI / 2.0);assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.DateTickTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DateTick t1=new DateTick(new Date(0L),""Label"",TextAnchor.CENTER,TextAnchor.CENTER,10.0);DateTick t2=null;try {t2=(DateTick)t1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.DateTickTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DateTick t1=new DateTick(new Date(0L),""Label"",TextAnchor.CENTER,TextAnchor.CENTER,10.0);DateTick t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(DateTick)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);}"
"org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYPointerAnnotation a1=new XYPointerAnnotation(""Label"",10.0,20.0,Math.PI);XYPointerAnnotation a2=new XYPointerAnnotation(""Label"",10.0,20.0,Math.PI);assertTrue(a1.equals(a2));a1=new XYPointerAnnotation(""Label2"",10.0,20.0,Math.PI);assertFalse(a1.equals(a2));a2=new XYPointerAnnotation(""Label2"",10.0,20.0,Math.PI);assertTrue(a1.equals(a2));a1.setX(11.0);assertFalse(a1.equals(a2));a2.setX(11.0);assertTrue(a1.equals(a2));a1.setY(22.0);assertFalse(a1.equals(a2));a2.setY(22.0);assertTrue(a1.equals(a2));a1.setAngle(Math.PI / 4.0);assertFalse(a1.equals(a2));a2.setAngle(Math.PI / 4.0);assertTrue(a1.equals(a2));a1.setTipRadius(20.0);assertFalse(a1.equals(a2));a2.setTipRadius(20.0);assertTrue(a1.equals(a2));a1.setBaseRadius(5.0);assertFalse(a1.equals(a2));a2.setBaseRadius(5.0);assertTrue(a1.equals(a2));a1.setArrowLength(33.0);assertFalse(a1.equals(a2));a2.setArrowLength(33.0);assertTrue(a1.equals(a2));a1.setArrowWidth(9.0);assertFalse(a1.equals(a2));a2.setArrowWidth(9.0);assertTrue(a1.equals(a2));Stroke stroke=new BasicStroke(1.5f);a1.setArrowStroke(stroke);assertFalse(a1.equals(a2));a2.setArrowStroke(stroke);assertTrue(a1.equals(a2));a1.setArrowPaint(Color.blue);assertFalse(a1.equals(a2));a2.setArrowPaint(Color.blue);assertTrue(a1.equals(a2));a1.setLabelOffset(10.0);assertFalse(a1.equals(a2));a2.setLabelOffset(10.0);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){XYPointerAnnotation a1=new XYPointerAnnotation(""Label"",10.0,20.0,Math.PI);XYPointerAnnotation a2=new XYPointerAnnotation(""Label"",10.0,20.0,Math.PI);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYPointerAnnotation a1=new XYPointerAnnotation(""Label"",10.0,20.0,Math.PI);XYPointerAnnotation a2=null;try {a2=(XYPointerAnnotation)a1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYPointerAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYPointerAnnotation a1=new XYPointerAnnotation(""Label"",10.0,20.0,Math.PI);XYPointerAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYPointerAnnotation)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.SymbolAxisTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){String[]tickLabels=new String[]{""One"",""Two"",""Three""};SymbolAxis a1=new SymbolAxis(""Test Axis"",tickLabels);SymbolAxis a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(SymbolAxis)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.axis.junit.SymbolAxisTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){SymbolAxis a1=new SymbolAxis(""Axis"",new String[]{""A"",""B""});SymbolAxis a2=null;try {a2=(SymbolAxis)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.axis.junit.SymbolAxisTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){SymbolAxis a1=new SymbolAxis(""Axis"",new String[]{""A"",""B""});SymbolAxis a2=new SymbolAxis(""Axis"",new String[]{""A"",""B""});assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1=new SymbolAxis(""Axis 2"",new String[]{""A"",""B""});assertFalse(a1.equals(a2));a2=new SymbolAxis(""Axis 2"",new String[]{""A"",""B""});assertTrue(a1.equals(a2));a1=new SymbolAxis(""Axis 2"",new String[]{""C"",""B""});assertFalse(a1.equals(a2));a2=new SymbolAxis(""Axis 2"",new String[]{""C"",""B""});assertTrue(a1.equals(a2));a1.setGridBandsVisible(false);assertFalse(a1.equals(a2));a2.setGridBandsVisible(false);assertTrue(a1.equals(a2));a1.setGridBandPaint(Color.black);assertFalse(a1.equals(a2));a2.setGridBandPaint(Color.black);assertTrue(a1.equals(a2));a1.setGridBandAlternatePaint(Color.red);assertFalse(a1.equals(a2));a2.setGridBandAlternatePaint(Color.red);assertTrue(a1.equals(a2));}"
"org.jfree.data.junit.DomainOrderTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){assertEquals(DomainOrder.NONE,DomainOrder.NONE);assertEquals(DomainOrder.ASCENDING,DomainOrder.ASCENDING);assertEquals(DomainOrder.DESCENDING,DomainOrder.DESCENDING);assertFalse(DomainOrder.NONE.equals(DomainOrder.ASCENDING));assertFalse(DomainOrder.NONE.equals(DomainOrder.DESCENDING));assertFalse(DomainOrder.NONE.equals(null));assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.NONE));assertFalse(DomainOrder.ASCENDING.equals(DomainOrder.DESCENDING));assertFalse(DomainOrder.ASCENDING.equals(null));assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.NONE));assertFalse(DomainOrder.DESCENDING.equals(DomainOrder.ASCENDING));assertFalse(DomainOrder.DESCENDING.equals(null));}"
"org.jfree.data.junit.DomainOrderTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DomainOrder d1=DomainOrder.ASCENDING;DomainOrder d2=DomainOrder.ASCENDING;assertTrue(d1.equals(d2));int h1=d1.hashCode();int h2=d2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.junit.DomainOrderTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DomainOrder d1=DomainOrder.ASCENDING;DomainOrder d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DomainOrder)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(d1,d2);boolean same=d1 == d2;assertEquals(true,same);}"
"org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){GroupedStackedBarRenderer r1=new GroupedStackedBarRenderer();GroupedStackedBarRenderer r2=new GroupedStackedBarRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));KeyToGroupMap m1=new KeyToGroupMap(""G1"");m1.mapKeyToGroup(""S1"",""G2"");r1.setSeriesToGroupMap(m1);assertFalse(r1.equals(r2));KeyToGroupMap m2=new KeyToGroupMap(""G1"");m2.mapKeyToGroup(""S1"",""G2"");r2.setSeriesToGroupMap(m2);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){GroupedStackedBarRenderer r1=new GroupedStackedBarRenderer();GroupedStackedBarRenderer r2=null;try {r2=(GroupedStackedBarRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){GroupedStackedBarRenderer r1=new GroupedStackedBarRenderer();GroupedStackedBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(GroupedStackedBarRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,""S1"",""C1"");dataset.addValue(2.0,""S1"",""C2"");dataset.addValue(3.0,""S2"",""C1"");dataset.addValue(4.0,""S2"",""C2"");GroupedStackedBarRenderer renderer=new GroupedStackedBarRenderer();CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),renderer);JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.axis.junit.DateTickMarkPositionTests.testEquals",0,"/** * Test equals()method.*/public void testEquals(){assertEquals(DateTickMarkPosition.START,DateTickMarkPosition.START);assertEquals(DateTickMarkPosition.MIDDLE,DateTickMarkPosition.MIDDLE);assertEquals(DateTickMarkPosition.END,DateTickMarkPosition.END);assertFalse(DateTickMarkPosition.START.equals(null));assertFalse(DateTickMarkPosition.START.equals(DateTickMarkPosition.END));assertFalse(DateTickMarkPosition.MIDDLE.equals(DateTickMarkPosition.END));}"
"org.jfree.chart.axis.junit.DateTickMarkPositionTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){DateTickMarkPosition a1=DateTickMarkPosition.END;DateTickMarkPosition a2=DateTickMarkPosition.END;assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.DateTickMarkPositionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DateTickMarkPosition p1=DateTickMarkPosition.MIDDLE;DateTickMarkPosition p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(DateTickMarkPosition)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(p1,p2);assertTrue(p1 == p2);}"
"org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){HighLowRenderer r1=new HighLowRenderer();HighLowRenderer r2=new HighLowRenderer();assertEquals(r1,r2);r1.setDrawOpenTicks(false);assertFalse(r1.equals(r2));r2.setDrawOpenTicks(false);assertTrue(r1.equals(r2));r1.setDrawCloseTicks(false);assertFalse(r1.equals(r2));r2.setDrawCloseTicks(false);assertTrue(r1.equals(r2));r1.setOpenTickPaint(Color.red);assertFalse(r1.equals(r2));r2.setOpenTickPaint(Color.red);assertTrue(r1.equals(r2));r1.setCloseTickPaint(Color.blue);assertFalse(r1.equals(r2));r2.setCloseTickPaint(Color.blue);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){HighLowRenderer r1=new HighLowRenderer();HighLowRenderer r2=new HighLowRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){HighLowRenderer r1=new HighLowRenderer();r1.setCloseTickPaint(Color.green);HighLowRenderer r2=null;try {r2=(HighLowRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){HighLowRenderer r1=new HighLowRenderer();r1.setCloseTickPaint(Color.green);HighLowRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(HighLowRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.HighLowRendererTests.testFindRangeBounds",0,"/** * Some checks for the findRangeBounds()method.*/public void testFindRangeBounds(){}"
"org.jfree.chart.axis.junit.TickUnitsTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TickUnits t1=(TickUnits)NumberAxis.createIntegerTickUnits();TickUnits t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(TickUnits)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(t1,t2);}"
"org.jfree.chart.axis.junit.TickUnitsTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){TickUnits t1=(TickUnits)NumberAxis.createIntegerTickUnits();TickUnits t2=null;try {t2=(TickUnits)t1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.TickUnitsTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){TickUnits t1=(TickUnits)NumberAxis.createIntegerTickUnits();TickUnits t2=(TickUnits)NumberAxis.createIntegerTickUnits();assertTrue(t1.equals(t2));assertTrue(t2.equals(t1));}"
"org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){BarRenderer3D r1=new BarRenderer3D(1.0,2.0);BarRenderer3D r2=new BarRenderer3D(1.0,2.0);assertEquals(r1,r2);r1=new BarRenderer3D(1.1,2.0);assertFalse(r1.equals(r2));r2=new BarRenderer3D(1.1,2.0);assertTrue(r1.equals(r2));r1=new BarRenderer3D(1.1,2.2);assertFalse(r1.equals(r2));r2=new BarRenderer3D(1.1,2.2);assertTrue(r1.equals(r2));r1.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,4.0f,3.0f,Color.blue));assertFalse(r1.equals(r2));r2.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,4.0f,3.0f,Color.blue));assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){BarRenderer3D r1=new BarRenderer3D();BarRenderer3D r2=new BarRenderer3D();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BarRenderer3D r1=new BarRenderer3D();BarRenderer3D r2=null;try {r2=(BarRenderer3D)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.BarRenderer3DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BarRenderer3D r1=new BarRenderer3D();r1.setWallPaint(new GradientPaint(1.0f,2.0f,Color.red,4.0f,3.0f,Color.blue));BarRenderer3D r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(BarRenderer3D)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testEquals",0,"/** * Checks that all fields are distinguished.*/public void testEquals(){BarRenderer r1=new BarRenderer();BarRenderer r2=new BarRenderer();assertEquals(r1,r2);r1.setSeriesToolTipGenerator(1,new StandardCategoryToolTipGenerator());assertFalse(r1.equals(r2));r2.setSeriesToolTipGenerator(1,new StandardCategoryToolTipGenerator());assertTrue(r1.equals(r2));r1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(""{2}"",NumberFormat.getInstance()));assertFalse(r1.equals(r2));r2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(""{2}"",NumberFormat.getInstance()));assertTrue(r1.equals(r2));r1.setSeriesItemLabelGenerator(1,new StandardCategoryItemLabelGenerator());assertFalse(r1.equals(r2));r2.setSeriesItemLabelGenerator(1,new StandardCategoryItemLabelGenerator());assertTrue(r1.equals(r2));r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(""{2}"",NumberFormat.getInstance()));assertFalse(r1.equals(r2));r2.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(""{2}"",NumberFormat.getInstance()));assertTrue(r1.equals(r2));r1.setSeriesURLGenerator(1,new StandardCategoryURLGenerator());assertFalse(r1.equals(r2));r2.setSeriesURLGenerator(1,new StandardCategoryURLGenerator());assertTrue(r1.equals(r2));r1.setBaseURLGenerator(new StandardCategoryURLGenerator(""abc.html""));assertFalse(r1.equals(r2));r2.setBaseURLGenerator(new StandardCategoryURLGenerator(""abc.html""));assertTrue(r1.equals(r2));r1.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator(""XYZ""));assertFalse(r1.equals(r2));r2.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator(""XYZ""));assertTrue(r1.equals(r2));r1.setLegendItemToolTipGenerator(new StandardCategorySeriesLabelGenerator(""ToolTip""));assertFalse(r1.equals(r2));r2.setLegendItemToolTipGenerator(new StandardCategorySeriesLabelGenerator(""ToolTip""));assertTrue(r1.equals(r2));r1.setLegendItemURLGenerator(new StandardCategorySeriesLabelGenerator(""URL""));assertFalse(r1.equals(r2));r2.setLegendItemURLGenerator(new StandardCategorySeriesLabelGenerator(""URL""));assertTrue(r1.equals(r2));r1.addAnnotation(new CategoryTextAnnotation(""ABC"",""A"",2.0),Layer.BACKGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new CategoryTextAnnotation(""ABC"",""A"",2.0),Layer.BACKGROUND);assertTrue(r1.equals(r2));r1.addAnnotation(new CategoryTextAnnotation(""DEF"",""B"",4.0),Layer.FOREGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new CategoryTextAnnotation(""DEF"",""B"",4.0),Layer.FOREGROUND);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning1",0,"/** * Confirm that cloning works.*/public void testCloning1(){AbstractCategoryItemRenderer r1=new BarRenderer();r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());AbstractCategoryItemRenderer r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1=new BarRenderer();r1.setSeriesItemLabelGenerator(0,new StandardCategoryItemLabelGenerator());r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning2",0,"/** * Confirm that cloning works.*/public void testCloning2(){BarRenderer r1=new BarRenderer();r1.setBaseItemLabelGenerator(new IntervalCategoryItemLabelGenerator());BarRenderer r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1=new BarRenderer();r1.setSeriesItemLabelGenerator(0,new IntervalCategoryItemLabelGenerator());r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemLabelGenerator",0,"/** * Check that the legendItemLabelGenerator is cloned.*/public void testCloning_LegendItemLabelGenerator(){StandardCategorySeriesLabelGenerator generator=new StandardCategorySeriesLabelGenerator(""Series {0}"");BarRenderer r1=new BarRenderer();r1.setLegendItemLabelGenerator(generator);BarRenderer r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(r1.getLegendItemLabelGenerator()!= r2.getLegendItemLabelGenerator());}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemToolTipGenerator",0,"/** * Check that the legendItemToolTipGenerator is cloned.*/public void testCloning_LegendItemToolTipGenerator(){StandardCategorySeriesLabelGenerator generator=new StandardCategorySeriesLabelGenerator(""Series {0}"");BarRenderer r1=new BarRenderer();r1.setLegendItemToolTipGenerator(generator);BarRenderer r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(r1.getLegendItemToolTipGenerator()!= r2.getLegendItemToolTipGenerator());}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemURLGenerator",0,"/** * Check that the legendItemURLGenerator is cloned.*/public void testCloning_LegendItemURLGenerator(){StandardCategorySeriesLabelGenerator generator=new StandardCategorySeriesLabelGenerator(""Series {0}"");BarRenderer r1=new BarRenderer();r1.setLegendItemURLGenerator(generator);BarRenderer r2=null;try {r2=(BarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));assertTrue(r1.getLegendItemURLGenerator()!= r2.getLegendItemURLGenerator());}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testGetSeriesItemLabelGenerator",0,"/** * Check that the getSeriesItemLabelGenerator()method behaves as  expected.*/public void testGetSeriesItemLabelGenerator(){CategoryItemRenderer r=new BarRenderer();assertNull(r.getSeriesItemLabelGenerator(2));r.setSeriesItemLabelGenerator(2,new StandardCategoryItemLabelGenerator());assertNotNull(r.getSeriesItemLabelGenerator(2));r.setSeriesItemLabelGenerator(2,null);assertNull(r.getSeriesItemLabelGenerator(2));r.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());assertNull(r.getSeriesItemLabelGenerator(2));}"
"org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testGetSeriesURLGenerator",0,"/** * Check that the getSeriesURLGenerator()method behaves as expected.*/public void testGetSeriesURLGenerator(){CategoryItemRenderer r=new BarRenderer();assertNull(r.getSeriesURLGenerator(2));r.setSeriesURLGenerator(2,new StandardCategoryURLGenerator());assertNotNull(r.getSeriesURLGenerator(2));r.setSeriesURLGenerator(2,null);assertNull(r.getSeriesURLGenerator(2));r.setBaseURLGenerator(new StandardCategoryURLGenerator());assertNull(r.getSeriesURLGenerator(2));}"
"org.jfree.data.junit.KeyedObjects2DTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){KeyedObjects2D k1=new KeyedObjects2D();KeyedObjects2D k2=new KeyedObjects2D();assertTrue(k1.equals(k2));assertTrue(k2.equals(k1));k1.addObject(new Integer(99),""R1"",""C1"");assertFalse(k1.equals(k2));k2.addObject(new Integer(99),""R1"",""C1"");assertTrue(k1.equals(k2));}"
"org.jfree.data.junit.KeyedObjects2DTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){KeyedObjects2D o1=new KeyedObjects2D();o1.setObject(new Integer(1),""V1"",""C1"");o1.setObject(null,""V2"",""C1"");o1.setObject(new Integer(3),""V3"",""C2"");KeyedObjects2D o2=null;try {o2=(KeyedObjects2D)o1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(o1 != o2);assertTrue(o1.getClass()== o2.getClass());assertTrue(o1.equals(o2));o1.addObject(""XX"",""R1"",""C1"");assertFalse(o1.equals(o2));}"
"org.jfree.data.junit.KeyedObjects2DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){KeyedObjects2D ko2D1=new KeyedObjects2D();ko2D1.addObject(new Double(234.2),""Row1"",""Col1"");ko2D1.addObject(null,""Row1"",""Col2"");ko2D1.addObject(new Double(345.9),""Row2"",""Col1"");ko2D1.addObject(new Double(452.7),""Row2"",""Col2"");KeyedObjects2D ko2D2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(ko2D1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));ko2D2=(KeyedObjects2D)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(ko2D1,ko2D2);}"
"org.jfree.data.junit.KeyedObjects2DTests.testGetValueByIndex",0,"/** * Some checks for the getValue(int,int)method.*/public void testGetValueByIndex(){KeyedObjects2D data=new KeyedObjects2D();data.addObject(""Obj1"",""R1"",""C1"");data.addObject(""Obj2"",""R2"",""C2"");assertEquals(""Obj1"",data.getObject(0,0));assertEquals(""Obj2"",data.getObject(1,1));assertNull(data.getObject(0,1));assertNull(data.getObject(1,0));boolean pass=false;try {data.getObject(-1,0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {data.getObject(0,-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {data.getObject(2,0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {data.getObject(0,2);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testGetValueByKey",0,"/** * Some checks for the getValue(Comparable,Comparable)method.*/public void testGetValueByKey(){KeyedObjects2D data=new KeyedObjects2D();data.addObject(""Obj1"",""R1"",""C1"");data.addObject(""Obj2"",""R2"",""C2"");assertEquals(""Obj1"",data.getObject(""R1"",""C1""));assertEquals(""Obj2"",data.getObject(""R2"",""C2""));assertNull(data.getObject(""R1"",""C2""));assertNull(data.getObject(""R2"",""C1""));boolean pass=false;try {data.getObject(""XX"",""C1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {data.getObject(""R1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {data.getObject(""XX"",""C1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {data.getObject(""R1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testSetObject",0,"/** * Some checks for the setObject(Object,Comparable,Comparable)method.*/public void testSetObject(){KeyedObjects2D data=new KeyedObjects2D();data.setObject(""Obj1"",""R1"",""C1"");data.setObject(""Obj2"",""R2"",""C2"");assertEquals(""Obj1"",data.getObject(""R1"",""C1""));assertEquals(""Obj2"",data.getObject(""R2"",""C2""));assertNull(data.getObject(""R1"",""C2""));assertNull(data.getObject(""R2"",""C1""));data.setObject(""ABC"",""R2"",""C2"");assertEquals(""ABC"",data.getObject(""R2"",""C2""));boolean pass=false;try {data.setObject(""X"",null,""C1"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {data.setObject(""X"",""R1"",null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByIndex",0,"/** * Some checks for the removeRow(int)method.*/public void testRemoveRowByIndex(){KeyedObjects2D data=new KeyedObjects2D();data.setObject(""Obj1"",""R1"",""C1"");data.setObject(""Obj2"",""R2"",""C2"");data.removeRow(0);assertEquals(1,data.getRowCount());assertEquals(""Obj2"",data.getObject(0,1));boolean pass=false;try {data.removeRow(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {data.removeRow(data.getRowCount());}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByIndex",0,"/** * Some checks for the removeColumn(int)method.*/public void testRemoveColumnByIndex(){KeyedObjects2D data=new KeyedObjects2D();data.setObject(""Obj1"",""R1"",""C1"");data.setObject(""Obj2"",""R2"",""C2"");data.removeColumn(0);assertEquals(1,data.getColumnCount());assertEquals(""Obj2"",data.getObject(1,0));boolean pass=false;try {data.removeColumn(-1);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);pass=false;try {data.removeColumn(data.getColumnCount());}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testRemoveRowByKey",0,"/** * Some checks for the removeRow(Comparable)method.*/public void testRemoveRowByKey(){KeyedObjects2D data=new KeyedObjects2D();data.setObject(""Obj1"",""R1"",""C1"");data.setObject(""Obj2"",""R2"",""C2"");data.removeRow(""R2"");assertEquals(1,data.getRowCount());assertEquals(""Obj1"",data.getObject(0,0));boolean pass=false;try {data.removeRow(""XXX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {data.removeRow(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testRemoveColumnByKey",0,"/** * Some checks for the removeColumn(Comparable)method.*/public void testRemoveColumnByKey(){KeyedObjects2D data=new KeyedObjects2D();data.setObject(""Obj1"",""R1"",""C1"");data.setObject(""Obj2"",""R2"",""C2"");data.removeColumn(""C2"");assertEquals(1,data.getColumnCount());assertEquals(""Obj1"",data.getObject(0,0));boolean pass=false;try {data.removeColumn(""XXX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {data.removeColumn(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyedObjects2DTests.testRemoveValue",0,"/** * A simple check for the removeValue()method.*/public void testRemoveValue(){KeyedObjects2D data=new KeyedObjects2D();data.setObject(""Obj1"",""R1"",""C1"");data.setObject(""Obj2"",""R2"",""C2"");data.removeObject(""R2"",""C2"");assertEquals(1,data.getRowCount());assertEquals(1,data.getColumnCount());assertEquals(""Obj1"",data.getObject(0,0));}"
"org.jfree.data.xy.junit.XYIntervalDataItemTests.testConstructor1",0,"/** * Some checks for the constructor.*/public void testConstructor1(){XYIntervalDataItem item1=new XYIntervalDataItem(1.0,0.5,1.5,2.0,1.9,2.1);assertEquals(new Double(1.0),item1.getX());assertEquals(0.5,item1.getXLowValue(),EPSILON);assertEquals(1.5,item1.getXHighValue(),EPSILON);assertEquals(2.0,item1.getYValue(),EPSILON);assertEquals(1.9,item1.getYLowValue(),EPSILON);assertEquals(2.1,item1.getYHighValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalDataItemTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYIntervalDataItem item1=new XYIntervalDataItem(1.0,0.5,1.5,2.0,1.9,2.1);XYIntervalDataItem item2=new XYIntervalDataItem(1.0,0.5,1.5,2.0,1.9,2.1);assertTrue(item1.equals(item2));assertTrue(item2.equals(item1));item1=new XYIntervalDataItem(1.1,0.5,1.5,2.0,1.9,2.1);assertFalse(item1.equals(item2));item2=new XYIntervalDataItem(1.1,0.5,1.5,2.0,1.9,2.1);assertTrue(item1.equals(item2));item1=new XYIntervalDataItem(1.1,0.55,1.5,2.0,1.9,2.1);assertFalse(item1.equals(item2));item2=new XYIntervalDataItem(1.1,0.55,1.5,2.0,1.9,2.1);assertTrue(item1.equals(item2));item1=new XYIntervalDataItem(1.1,0.55,1.55,2.0,1.9,2.1);assertFalse(item1.equals(item2));item2=new XYIntervalDataItem(1.1,0.55,1.55,2.0,1.9,2.1);assertTrue(item1.equals(item2));item1=new XYIntervalDataItem(1.1,0.55,1.55,2.2,1.9,2.1);assertFalse(item1.equals(item2));item2=new XYIntervalDataItem(1.1,0.55,1.55,2.2,1.9,2.1);assertTrue(item1.equals(item2));item1=new XYIntervalDataItem(1.1,0.55,1.55,2.2,1.99,2.1);assertFalse(item1.equals(item2));item2=new XYIntervalDataItem(1.1,0.55,1.55,2.2,1.99,2.1);assertTrue(item1.equals(item2));item1=new XYIntervalDataItem(1.1,0.55,1.55,2.2,1.99,2.11);assertFalse(item1.equals(item2));item2=new XYIntervalDataItem(1.1,0.55,1.55,2.2,1.99,2.11);assertTrue(item1.equals(item2));}"
"org.jfree.data.xy.junit.XYIntervalDataItemTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){XYIntervalDataItem item1=new XYIntervalDataItem(1.0,0.5,1.5,2.0,1.9,2.1);XYIntervalDataItem item2=null;try {item2=(XYIntervalDataItem)item1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(item1 != item2);assertTrue(item1.getClass()== item2.getClass());assertTrue(item1.equals(item2));}"
"org.jfree.data.xy.junit.XYIntervalDataItemTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYIntervalDataItem item1=new XYIntervalDataItem(1.0,0.5,1.5,2.0,1.9,2.1);XYIntervalDataItem item2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(item1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));item2=(XYIntervalDataItem)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(item1,item2);}"
"org.jfree.data.xy.junit.MatrixSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){MatrixSeries s1=new MatrixSeries(""Series"",2,3);s1.update(0,0,1.1);MatrixSeriesCollection c1=new MatrixSeriesCollection();c1.addSeries(s1);MatrixSeries s2=new MatrixSeries(""Series"",2,3);s2.update(0,0,1.1);MatrixSeriesCollection c2=new MatrixSeriesCollection();c2.addSeries(s2);assertTrue(c1.equals(c2));assertTrue(c2.equals(c1));c1.addSeries(new MatrixSeries(""Empty Series"",1,1));assertFalse(c1.equals(c2));c2.addSeries(new MatrixSeries(""Empty Series"",1,1));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.MatrixSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){MatrixSeries s1=new MatrixSeries(""Series"",2,3);s1.update(0,0,1.1);MatrixSeriesCollection c1=new MatrixSeriesCollection();c1.addSeries(s1);MatrixSeriesCollection c2=null;try {c2=(MatrixSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));s1.setDescription(""XYZ"");assertFalse(c1.equals(c2));}"
"org.jfree.data.xy.junit.MatrixSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MatrixSeries s1=new MatrixSeries(""Series"",2,3);s1.update(0,0,1.1);MatrixSeriesCollection c1=new MatrixSeriesCollection();c1.addSeries(s1);MatrixSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(MatrixSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.xy.junit.DefaultXYDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultXYDataset d1=new DefaultXYDataset();DefaultXYDataset d2=new DefaultXYDataset();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[][]data1=new double[][]{x1,y1};double[]x2=new double[]{1.0,2.0,3.0};double[]y2=new double[]{4.0,5.0,6.0};double[][]data2=new double[][]{x2,y2};d1.addSeries(""S1"",data1);assertFalse(d1.equals(d2));d2.addSeries(""S1"",data2);assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultXYDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultXYDataset d1=new DefaultXYDataset();DefaultXYDataset d2=null;try {d2=(DefaultXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[][]data1=new double[][]{x1,y1};d1.addSeries(""S1"",data1);try {d2=(DefaultXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));x1[1]=2.2;assertFalse(d1.equals(d2));x1[1]=2.0;assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultXYDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultXYDataset d1=new DefaultXYDataset();DefaultXYDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);double[]x1=new double[]{1.0,2.0,3.0};double[]y1=new double[]{4.0,5.0,6.0};double[][]data1=new double[][]{x1,y1};d1.addSeries(""S1"",data1);try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.DefaultXYDatasetTests.testGetSeriesKey",0,"/** * Some checks for the getSeriesKey(int)method.*/public void testGetSeriesKey(){DefaultXYDataset d=createSampleDataset1();assertEquals(""S1"",d.getSeriesKey(0));assertEquals(""S2"",d.getSeriesKey(1));boolean pass=false;try {d.getSeriesKey(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {d.getSeriesKey(2);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.DefaultXYDatasetTests.testIndexOf",0,"/** * Some checks for the indexOf(Comparable)method.*/public void testIndexOf(){DefaultXYDataset d=createSampleDataset1();assertEquals(0,d.indexOf(""S1""));assertEquals(1,d.indexOf(""S2""));assertEquals(-1,d.indexOf(""Green Eggs and Ham""));assertEquals(-1,d.indexOf(null));}"
"org.jfree.data.xy.junit.DefaultXYDatasetTests.testAddSeries",0,"/** * Some tests for the addSeries()method.*/public void testAddSeries(){DefaultXYDataset d=new DefaultXYDataset();d.addSeries(""S1"",new double[][]{{1.0},{2.0}});assertEquals(1,d.getSeriesCount());assertEquals(""S1"",d.getSeriesKey(0));d.addSeries(""S1"",new double[][]{{11.0},{12.0}});assertEquals(1,d.getSeriesCount());assertEquals(12.0,d.getYValue(0,0),EPSILON);boolean pass=false;try {d.addSeries(null,new double[][]{{1.0},{2.0}});}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.xy.junit.DefaultHighLowDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultHighLowDataset d1=new DefaultHighLowDataset(""Series 1"",new Date[0],new double[0],new double[0],new double[0],new double[0],new double[0]);DefaultHighLowDataset d2=new DefaultHighLowDataset(""Series 1"",new Date[0],new double[0],new double[0],new double[0],new double[0],new double[0]);assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1=new DefaultHighLowDataset(""Series 2"",new Date[0],new double[0],new double[0],new double[0],new double[0],new double[0]);assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[0],new double[0],new double[0],new double[0],new double[0],new double[0]);assertTrue(d1.equals(d2));d1=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[1],new double[1],new double[1],new double[1],new double[1]);assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[1],new double[1],new double[1],new double[1],new double[1]);assertTrue(d1.equals(d2));d1=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[1],new double[1],new double[1],new double[1]);assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[1],new double[1],new double[1],new double[1]);assertTrue(d1.equals(d2));d1=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[1],new double[1],new double[1]);assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[1],new double[1],new double[1]);assertTrue(d1.equals(d2));d1=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[1],new double[1]);assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[1],new double[1]);assertTrue(d1.equals(d2));d1=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[]{7.8},new double[1]);assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[]{7.8},new double[1]);assertTrue(d1.equals(d2));d1=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[]{7.8},new double[]{99.9});assertFalse(d1.equals(d2));d2=new DefaultHighLowDataset(""Series 2"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[]{7.8},new double[]{99.9});assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultHighLowDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DefaultHighLowDataset d1=new DefaultHighLowDataset(""Series 1"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[]{7.8},new double[]{99.9});DefaultHighLowDataset d2=null;try {d2=(DefaultHighLowDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.DefaultHighLowDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultHighLowDataset d1=new DefaultHighLowDataset(""Series 1"",new Date[]{new Date(123L)},new double[]{1.2},new double[]{3.4},new double[]{5.6},new double[]{7.8},new double[]{99.9});DefaultHighLowDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(DefaultHighLowDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testGenerateLabel",0,"/** * Some checks for the generalLabel()method.*/public void testGenerateLabel(){StandardCategoryItemLabelGenerator g=new StandardCategoryItemLabelGenerator(""{2}"",new DecimalFormat(""0.000""));DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,""R0"",""C0"");dataset.addValue(2.0,""R0"",""C1"");dataset.addValue(3.0,""R1"",""C0"");dataset.addValue(null,""R1"",""C1"");String s=g.generateLabel(dataset,0,0);assertEquals(""1.000"",s);s=g.generateLabel(dataset,1,1);assertEquals(""-"",s);}"
"org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){StandardCategoryItemLabelGenerator g1=new StandardCategoryItemLabelGenerator();StandardCategoryItemLabelGenerator g2=new StandardCategoryItemLabelGenerator();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardCategoryItemLabelGenerator(""{0}"",new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2=new StandardCategoryItemLabelGenerator(""{0}"",new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));g1=new StandardCategoryItemLabelGenerator(""{1}"",new DecimalFormat(""0.000""));assertFalse(g1.equals(g2));g2=new StandardCategoryItemLabelGenerator(""{1}"",new DecimalFormat(""0.000""));assertTrue(g1.equals(g2));g1=new StandardCategoryItemLabelGenerator(""{2}"",new SimpleDateFormat(""d-MMM""));assertFalse(g1.equals(g2));g2=new StandardCategoryItemLabelGenerator(""{2}"",new SimpleDateFormat(""d-MMM""));assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardCategoryItemLabelGenerator g1=new StandardCategoryItemLabelGenerator();StandardCategoryItemLabelGenerator g2=null;try {g2=(StandardCategoryItemLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardCategoryItemLabelGenerator g1=new StandardCategoryItemLabelGenerator(""{2}"",DateFormat.getInstance());StandardCategoryItemLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardCategoryItemLabelGenerator)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(g1,g2);}"
"org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests.testEquals1481087",0,"/** * A test for bug 1481087.*/public void testEquals1481087(){StandardCategoryItemLabelGenerator g1=new StandardCategoryItemLabelGenerator(""{0}"",new DecimalFormat(""0.00""));StandardCategoryToolTipGenerator g2=new StandardCategoryToolTipGenerator(""{0}"",new DecimalFormat(""0.00""));assertFalse(g1.equals(g2));}"
"org.jfree.chart.junit.JFreeChartTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){JFreeChart chart1=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new PiePlot(),true);JFreeChart chart2=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new PiePlot(),true);assertTrue(chart1.equals(chart2));assertTrue(chart2.equals(chart1));chart1.setRenderingHints(new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON));assertFalse(chart1.equals(chart2));chart2.setRenderingHints(new RenderingHints(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON));assertTrue(chart1.equals(chart2));chart1.setBorderVisible(true);assertFalse(chart1.equals(chart2));chart2.setBorderVisible(true);assertTrue(chart1.equals(chart2));BasicStroke s=new BasicStroke(2.0f);chart1.setBorderStroke(s);assertFalse(chart1.equals(chart2));chart2.setBorderStroke(s);assertTrue(chart1.equals(chart2));chart1.setBorderPaint(Color.red);assertFalse(chart1.equals(chart2));chart2.setBorderPaint(Color.red);assertTrue(chart1.equals(chart2));chart1.setPadding(new RectangleInsets(1,2,3,4));assertFalse(chart1.equals(chart2));chart2.setPadding(new RectangleInsets(1,2,3,4));assertTrue(chart1.equals(chart2));chart1.setTitle(""XYZ"");assertFalse(chart1.equals(chart2));chart2.setTitle(""XYZ"");assertTrue(chart1.equals(chart2));chart1.addSubtitle(new TextTitle(""Subtitle""));assertFalse(chart1.equals(chart2));chart2.addSubtitle(new TextTitle(""Subtitle""));assertTrue(chart1.equals(chart2));chart1=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new RingPlot(),false);chart2=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new PiePlot(),false);assertFalse(chart1.equals(chart2));chart2=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new RingPlot(),false);assertTrue(chart1.equals(chart2));chart1.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(chart1.equals(chart2));chart2.setBackgroundPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(chart1.equals(chart2));chart1.setBackgroundImage(JFreeChart.INFO.getLogo());assertFalse(chart1.equals(chart2));chart2.setBackgroundImage(JFreeChart.INFO.getLogo());assertTrue(chart1.equals(chart2));chart1.setBackgroundImageAlignment(Align.BOTTOM_LEFT);assertFalse(chart1.equals(chart2));chart2.setBackgroundImageAlignment(Align.BOTTOM_LEFT);assertTrue(chart1.equals(chart2));chart1.setBackgroundImageAlpha(0.1f);assertFalse(chart1.equals(chart2));chart2.setBackgroundImageAlpha(0.1f);assertTrue(chart1.equals(chart2));}"
"org.jfree.chart.junit.JFreeChartTests.testEquals2",0,"/** * A test to make sure that the legend is being picked up in the equals()testing.*/public void testEquals2(){JFreeChart chart1=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new PiePlot(),true);JFreeChart chart2=new JFreeChart(""Title"",new Font(""SansSerif"",Font.PLAIN,12),new PiePlot(),false);assertFalse(chart1.equals(chart2));assertFalse(chart2.equals(chart1));}"
"org.jfree.chart.junit.JFreeChartTests.testSubtitleCount",0,"/** * Checks the subtitle count - should be 1 (the legend).*/public void testSubtitleCount(){int count=this.pieChart.getSubtitleCount();assertEquals(1,count);}"
"org.jfree.chart.junit.JFreeChartTests.testGetSubtitle",0,"/** * Some checks for the getSubtitle()method.*/public void testGetSubtitle(){DefaultPieDataset dataset=new DefaultPieDataset();JFreeChart chart=ChartFactory.createPieChart(""title"",dataset,true,false,false);Title t=chart.getSubtitle(0);assertTrue(t instanceof LegendTitle);boolean pass=false;try {t=chart.getSubtitle(-1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {t=chart.getSubtitle(1);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {t=chart.getSubtitle(2);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.junit.JFreeChartTests.testSerialization1",0,"/** * Serialize a pie chart,restore it,and check for equality.*/public void testSerialization1(){DefaultPieDataset data=new DefaultPieDataset();data.setValue(""Type 1"",54.5);data.setValue(""Type 2"",23.9);data.setValue(""Type 3"",45.8);JFreeChart c1=ChartFactory.createPieChart(""Test"",data,true,true,true);JFreeChart c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(JFreeChart)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);LegendTitle lt2=c2.getLegend();assertTrue(lt2.getSources()[0]== c2.getPlot());}"
"org.jfree.chart.junit.JFreeChartTests.testSerialization2",0,"/** * Serialize a 3D pie chart,restore it,and check for equality.*/public void testSerialization2(){DefaultPieDataset data=new DefaultPieDataset();data.setValue(""Type 1"",54.5);data.setValue(""Type 2"",23.9);data.setValue(""Type 3"",45.8);JFreeChart c1=ChartFactory.createPieChart3D(""Test"",data,true,true,true);JFreeChart c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(JFreeChart)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.chart.junit.JFreeChartTests.testSerialization3",0,"/** * Serialize a bar chart,restore it,and check for equality.*/public void testSerialization3(){String series1=""First"";String series2=""Second"";String series3=""Third"";String category1=""Category 1"";String category2=""Category 2"";String category3=""Category 3"";String category4=""Category 4"";String category5=""Category 5"";String category6=""Category 6"";String category7=""Category 7"";String category8=""Category 8"";DefaultCategoryDataset dataset=new DefaultCategoryDataset();dataset.addValue(1.0,series1,category1);dataset.addValue(4.0,series1,category2);dataset.addValue(3.0,series1,category3);dataset.addValue(5.0,series1,category4);dataset.addValue(5.0,series1,category5);dataset.addValue(7.0,series1,category6);dataset.addValue(7.0,series1,category7);dataset.addValue(8.0,series1,category8);dataset.addValue(5.0,series2,category1);dataset.addValue(7.0,series2,category2);dataset.addValue(6.0,series2,category3);dataset.addValue(8.0,series2,category4);dataset.addValue(4.0,series2,category5);dataset.addValue(4.0,series2,category6);dataset.addValue(2.0,series2,category7);dataset.addValue(1.0,series2,category8);dataset.addValue(4.0,series3,category1);dataset.addValue(3.0,series3,category2);dataset.addValue(2.0,series3,category3);dataset.addValue(3.0,series3,category4);dataset.addValue(6.0,series3,category5);dataset.addValue(3.0,series3,category6);dataset.addValue(4.0,series3,category7);dataset.addValue(3.0,series3,category8);JFreeChart c1=ChartFactory.createBarChart(""Vertical Bar Chart"",""Category"",""Value"",dataset,PlotOrientation.VERTICAL,true,true,false);JFreeChart c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(JFreeChart)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.chart.junit.JFreeChartTests.testSerialization4",0,"/** * Serialize a time seroes chart,restore it,and check for equality.*/public void testSerialization4(){RegularTimePeriod t=new Day();TimeSeries series=new TimeSeries(""Series 1"");series.add(t,36.4);t=t.next();series.add(t,63.5);TimeSeriesCollection dataset=new TimeSeriesCollection();dataset.addSeries(series);JFreeChart c1=ChartFactory.createTimeSeriesChart(""Test"",""Date"",""Value"",dataset,true,true,true);JFreeChart c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(JFreeChart)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.chart.junit.JFreeChartTests.testAddSubtitle",0,"/** * Some checks for the addSubtitle()methods.*/public void testAddSubtitle(){DefaultPieDataset dataset=new DefaultPieDataset();JFreeChart chart=ChartFactory.createPieChart(""title"",dataset,true,false,false);TextTitle t0=new TextTitle(""T0"");chart.addSubtitle(0,t0);assertEquals(t0,chart.getSubtitle(0));TextTitle t1=new TextTitle(""T1"");chart.addSubtitle(t1);assertEquals(t1,chart.getSubtitle(2));boolean pass=false;try {chart.addSubtitle(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {chart.addSubtitle(-1,t0);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);pass=false;try {chart.addSubtitle(4,t0);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.junit.JFreeChartTests.testGetSubtitles",0,"/** * Some checks for the getSubtitles()method.*/public void testGetSubtitles(){DefaultPieDataset dataset=new DefaultPieDataset();JFreeChart chart=ChartFactory.createPieChart(""title"",dataset,true,false,false);List subtitles=chart.getSubtitles();assertEquals(1,chart.getSubtitleCount());subtitles.add(new TextTitle(""T""));assertEquals(1,chart.getSubtitleCount());}"
"org.jfree.chart.junit.JFreeChartTests.testLegendEvents",0,"/** * Some checks for the default legend firing change events.*/public void testLegendEvents(){DefaultPieDataset dataset=new DefaultPieDataset();JFreeChart chart=ChartFactory.createPieChart(""title"",dataset,true,false,false);chart.addChangeListener(this);this.lastChartChangeEvent=null;LegendTitle legend=chart.getLegend();legend.setPosition(RectangleEdge.TOP);assertNotNull(this.lastChartChangeEvent);}"
"org.jfree.chart.junit.JFreeChartTests.testTitleChangeEvent",0,"/** * Some checks for title changes and event notification.*/public void testTitleChangeEvent(){DefaultPieDataset dataset=new DefaultPieDataset();JFreeChart chart=ChartFactory.createPieChart(""title"",dataset,true,false,false);chart.addChangeListener(this);this.lastChartChangeEvent=null;TextTitle t=chart.getTitle();t.setFont(new Font(""Dialog"",Font.BOLD,9));assertNotNull(this.lastChartChangeEvent);this.lastChartChangeEvent=null;TextTitle t2=new TextTitle(""T2"");chart.setTitle(t2);assertNotNull(this.lastChartChangeEvent);this.lastChartChangeEvent=null;t2.setFont(new Font(""Dialog"",Font.BOLD,9));assertNotNull(this.lastChartChangeEvent);this.lastChartChangeEvent=null;t.setFont(new Font(""Dialog"",Font.BOLD,9));assertNull(this.lastChartChangeEvent);this.lastChartChangeEvent=null;}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testGetValue",0,"/** * Some checks for the getValue()method.*/public void testGetValue(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();d.addValue(new Double(1.0),""R1"",""C1"");assertEquals(new Double(1.0),d.getValue(""R1"",""C1""));boolean pass=false;try {d.getValue(""XX"",""C1"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);pass=false;try {d.getValue(""R1"",""XX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){DefaultKeyedValues2D v1=new DefaultKeyedValues2D();v1.setValue(new Integer(1),""V1"",""C1"");v1.setValue(null,""V2"",""C1"");v1.setValue(new Integer(3),""V3"",""C2"");DefaultKeyedValues2D v2=null;try {v2=(DefaultKeyedValues2D)v1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(v1 != v2);assertTrue(v1.getClass()== v2.getClass());assertTrue(v1.equals(v2));v2.setValue(new Integer(2),""V2"",""C1"");assertFalse(v1.equals(v2));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultKeyedValues2D kv2D1=new DefaultKeyedValues2D();kv2D1.addValue(new Double(234.2),""Row1"",""Col1"");kv2D1.addValue(null,""Row1"",""Col2"");kv2D1.addValue(new Double(345.9),""Row2"",""Col1"");kv2D1.addValue(new Double(452.7),""Row2"",""Col2"");DefaultKeyedValues2D kv2D2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(kv2D1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));kv2D2=(DefaultKeyedValues2D)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(kv2D1,kv2D2);}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){DefaultKeyedValues2D d1=new DefaultKeyedValues2D();DefaultKeyedValues2D d2=new DefaultKeyedValues2D();assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1.addValue(new Double(1.0),new Double(2.0),""S1"");assertFalse(d1.equals(d2));d2.addValue(new Double(1.0),new Double(2.0),""S1"");assertTrue(d1.equals(d2));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testSparsePopulation",0,"/** * Populates a data structure with sparse entries,then checks that the unspecified entries return null.*/public void testSparsePopulation(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();d.addValue(new Integer(11),""R1"",""C1"");d.addValue(new Integer(22),""R2"",""C2"");assertEquals(new Integer(11),d.getValue(""R1"",""C1""));assertNull(d.getValue(""R1"",""C2""));assertEquals(new Integer(22),d.getValue(""R2"",""C2""));assertNull(d.getValue(""R2"",""C1""));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testRowCount",0,"/** * Some basic checks for the getRowCount()method.*/public void testRowCount(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();assertEquals(0,d.getRowCount());d.addValue(new Double(1.0),""R1"",""C1"");assertEquals(1,d.getRowCount());d.addValue(new Double(2.0),""R2"",""C1"");assertEquals(2,d.getRowCount());}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testColumnCount",0,"/** * Some basic checks for the getColumnCount()method.*/public void testColumnCount(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();assertEquals(0,d.getColumnCount());d.addValue(new Double(1.0),""R1"",""C1"");assertEquals(1,d.getColumnCount());d.addValue(new Double(2.0),""R1"",""C2"");assertEquals(2,d.getColumnCount());}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testGetValue2",0,"/** * Some basic checks for the getValue(int,int)method.*/public void testGetValue2(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();boolean pass=false;try {d.getValue(0,0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);d.addValue(new Double(1.0),""R1"",""C1"");assertEquals(1.0,d.getValue(0,0).doubleValue(),EPSILON);d.addValue(new Double(2.0),""R2"",""C2"");assertEquals(2.0,d.getValue(1,1).doubleValue(),EPSILON);assertNull(d.getValue(1,0));assertNull(d.getValue(0,1));pass=false;try {d.getValue(2,0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testGetRowKey",0,"/** * Some basic checks for the getRowKey()method.*/public void testGetRowKey(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();boolean pass=false;try {d.getRowKey(0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);d.addValue(new Double(1.0),""R1"",""C1"");d.addValue(new Double(1.0),""R2"",""C1"");assertEquals(""R1"",d.getRowKey(0));assertEquals(""R2"",d.getRowKey(1));d=new DefaultKeyedValues2D(true);d.addValue(new Double(1.0),""R1"",""C1"");assertEquals(""R1"",d.getRowKey(0));d.addValue(new Double(0.0),""R0"",""C1"");assertEquals(""R0"",d.getRowKey(0));assertEquals(""R1"",d.getRowKey(1));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testGetColumnKey",0,"/** * Some basic checks for the getColumnKey()method.*/public void testGetColumnKey(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();boolean pass=false;try {d.getColumnKey(0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);d.addValue(new Double(1.0),""R1"",""C1"");d.addValue(new Double(1.0),""R1"",""C2"");assertEquals(""C1"",d.getColumnKey(0));assertEquals(""C2"",d.getColumnKey(1));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveValue",0,"/** * Some basic checks for the removeValue()method.*/public void testRemoveValue(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();d.removeValue(""R1"",""C1"");d.addValue(new Double(1.0),""R1"",""C1"");d.removeValue(""R1"",""C1"");assertEquals(0,d.getRowCount());assertEquals(0,d.getColumnCount());d.addValue(new Double(1.0),""R1"",""C1"");d.addValue(new Double(2.0),""R2"",""C1"");d.removeValue(""R1"",""C1"");assertEquals(new Double(2.0),d.getValue(0,0));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveValueBug1690654",0,"/** * A test for bug 1690654.*/public void testRemoveValueBug1690654(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();d.addValue(new Double(1.0),""R1"",""C1"");d.addValue(new Double(2.0),""R2"",""C2"");assertEquals(2,d.getColumnCount());assertEquals(2,d.getRowCount());d.removeValue(""R2"",""C2"");assertEquals(1,d.getColumnCount());assertEquals(1,d.getRowCount());assertEquals(new Double(1.0),d.getValue(0,0));}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveRow",0,"/** * Some basic checks for the removeRow()method.*/public void testRemoveRow(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();boolean pass=false;try {d.removeRow(0);}catch(IndexOutOfBoundsException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.DefaultKeyedValues2DTests.testRemoveColumnByKey",0,"/** * Some basic checks for the removeColumn(Comparable)method.*/public void testRemoveColumnByKey(){DefaultKeyedValues2D d=new DefaultKeyedValues2D();d.addValue(new Double(1.0),""R1"",""C1"");d.addValue(new Double(2.0),""R2"",""C2"");d.removeColumn(""C2"");d.addValue(new Double(3.0),""R2"",""C2"");assertEquals(3.0,d.getValue(""R2"",""C2"").doubleValue(),EPSILON);boolean pass=false;try {d.removeColumn(""XXX"");}catch(UnknownKeyException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.labels.junit.ItemLabelPositionTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){ItemLabelPosition p1=new ItemLabelPosition();ItemLabelPosition p2=new ItemLabelPosition();assertEquals(p1,p2);}"
"org.jfree.chart.labels.junit.ItemLabelPositionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){ItemLabelPosition p1=new ItemLabelPosition();ItemLabelPosition p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(ItemLabelPosition)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(p1,p2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){StackedXYBarRenderer r1=new StackedXYBarRenderer();StackedXYBarRenderer r2=new StackedXYBarRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setRenderAsPercentages(true);assertFalse(r1.equals(r2));r2.setRenderAsPercentages(true);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){StackedXYBarRenderer r1=new StackedXYBarRenderer();StackedXYBarRenderer r2=new StackedXYBarRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);r1.setRenderAsPercentages(true);h1=r1.hashCode();h2=r2.hashCode();assertFalse(h1 == h2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StackedXYBarRenderer r1=new StackedXYBarRenderer();StackedXYBarRenderer r2=null;try {r2=(StackedXYBarRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StackedXYBarRenderer r1=new StackedXYBarRenderer();r1.setSeriesPaint(0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));StackedXYBarRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(StackedXYBarRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testFindDomainBounds",0,"/** * Check that the renderer is calculating the domain bounds correctly.*/public void testFindDomainBounds(){TableXYDataset dataset=RendererXYPackageTests.createTestTableXYDataset();JFreeChart chart=ChartFactory.createStackedXYAreaChart(""Test Chart"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();plot.setRenderer(new StackedXYBarRenderer());NumberAxis domainAxis=(NumberAxis)plot.getDomainAxis();domainAxis.setAutoRangeIncludesZero(false);Range bounds=domainAxis.getRange();assertFalse(bounds.contains(0.3));assertTrue(bounds.contains(0.5));assertTrue(bounds.contains(2.5));assertFalse(bounds.contains(2.8));}"
"org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests.testFindRangeBounds",0,"/** * Check that the renderer is calculating the range bounds correctly.*/public void testFindRangeBounds(){TableXYDataset dataset=RendererXYPackageTests.createTestTableXYDataset();JFreeChart chart=ChartFactory.createStackedXYAreaChart(""Test Chart"",""X"",""Y"",dataset,PlotOrientation.VERTICAL,false,false,false);XYPlot plot=(XYPlot)chart.getPlot();plot.setRenderer(new StackedXYBarRenderer());NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();Range bounds=rangeAxis.getRange();assertTrue(bounds.contains(6.0));assertTrue(bounds.contains(8.0));}"
"org.jfree.chart.junit.TimeSeriesChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.TimeSeriesChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.TimeSeriesChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.entity.junit.TickLabelEntityTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){TickLabelEntity e1=new TickLabelEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"");TickLabelEntity e2=new TickLabelEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"");assertTrue(e1.equals(e2));e1.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertFalse(e1.equals(e2));e2.setArea(new Rectangle2D.Double(4.0,3.0,2.0,1.0));assertTrue(e1.equals(e2));e1.setToolTipText(""New ToolTip"");assertFalse(e1.equals(e2));e2.setToolTipText(""New ToolTip"");assertTrue(e1.equals(e2));e1.setURLText(""New URL"");assertFalse(e1.equals(e2));e2.setURLText(""New URL"");assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.TickLabelEntityTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){TickLabelEntity e1=new TickLabelEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"");TickLabelEntity e2=null;try {e2=(TickLabelEntity)e1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(e1 != e2);assertTrue(e1.getClass()== e2.getClass());assertTrue(e1.equals(e2));}"
"org.jfree.chart.entity.junit.TickLabelEntityTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){TickLabelEntity e1=new TickLabelEntity(new Rectangle2D.Double(1.0,2.0,3.0,4.0),""ToolTip"",""URL"");TickLabelEntity e2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(e1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));e2=(TickLabelEntity)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(e1,e2);}"
"org.jfree.chart.junit.XYStepChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;e.printStackTrace();}assertTrue(success);}"
"org.jfree.chart.junit.XYStepChartTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){XYSeries series1=new XYSeries(""Series 1"");series1.add(10.0,10.0);series1.add(20.0,20.0);series1.add(30.0,30.0);XYDataset dataset=new XYSeriesCollection(series1);LocalListener l=new LocalListener();this.chart.addChangeListener(l);XYPlot plot=(XYPlot)this.chart.getPlot();plot.setDataset(dataset);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around 10: "" + range.getLowerBound(),range.getLowerBound()<= 10);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.XYStepChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){XYPlot plot=(XYPlot)this.chart.getPlot();XYItemRenderer renderer=plot.getRenderer();StandardXYToolTipGenerator tt=new StandardXYToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);XYToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.util.junit.StrokeListTests.testEquals",0,"/** * Tests the equals()method.*/public void testEquals(){StrokeList l1=new StrokeList();StrokeList l2=new StrokeList();assertEquals(l1,l2);l1.setStroke(0,new BasicStroke(1.0f));assertFalse(l1.equals(l2));l2.setStroke(0,new BasicStroke(1.0f));assertTrue(l1.equals(l2));l1.setStroke(1,new BasicStroke(1.5f));assertFalse(l1.equals(l2));l2.setStroke(1,new BasicStroke(1.5f));assertTrue(l1.equals(l2));l1.setStroke(1,null);assertFalse(l1.equals(l2));l2.setStroke(1,null);assertTrue(l1.equals(l2));}"
"org.jfree.chart.util.junit.StrokeListTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StrokeList l1=new StrokeList();l1.setStroke(0,new BasicStroke(1.0f));l1.setStroke(1,new BasicStroke(1.5f));l1.setStroke(2,null);StrokeList l2=null;try {l2=(StrokeList)l1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(l1 != l2);assertTrue(l1.getClass()== l2.getClass());assertTrue(l1.equals(l2));l2.setStroke(0,new BasicStroke(0.5f));assertFalse(l1.equals(l2));}"
"org.jfree.chart.util.junit.StrokeListTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StrokeList l1=new StrokeList();l1.setStroke(0,new BasicStroke(1.0f));l1.setStroke(1,new BasicStroke(1.5f));l1.setStroke(2,null);StrokeList l2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(l1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));l2=(StrokeList)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(l1,l2);}"
"org.jfree.chart.util.junit.StrokeListTests.testHashCode",0,"/** * Some checks for the testHashCode()method.*/public void testHashCode(){StrokeList p1=new StrokeList();StrokeList p2=new StrokeList();assertTrue(p1.hashCode()== p2.hashCode());p1.setStroke(0,new BasicStroke(0.5f));assertFalse(p1.hashCode()== p2.hashCode());p2.setStroke(0,new BasicStroke(0.5f));assertTrue(p1.hashCode()== p2.hashCode());p1.setStroke(1,null);assertFalse(p1.hashCode()== p2.hashCode());p2.setStroke(1,null);assertTrue(p1.hashCode()== p2.hashCode());}"
"org.jfree.chart.renderer.junit.LookupPaintScaleTests.testEquals",0,"/** * A test for the equals()method.*/public void testEquals(){LookupPaintScale g1=new LookupPaintScale();LookupPaintScale g2=new LookupPaintScale();assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new LookupPaintScale(1.0,2.0,Color.red);assertFalse(g1.equals(g2));g2=new LookupPaintScale(1.0,2.0,Color.red);assertTrue(g1.equals(g2));g1.add(1.5,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertFalse(g1.equals(g2));g2.add(1.5,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));assertTrue(g1.equals(g2));}"
"org.jfree.chart.renderer.junit.LookupPaintScaleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){LookupPaintScale g1=new LookupPaintScale();LookupPaintScale g2=null;try {g2=(LookupPaintScale)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));g1.add(0.5,Color.red);assertFalse(g1.equals(g2));g2.add(0.5,Color.red);assertTrue(g1.equals(g2));g1=new LookupPaintScale(1.0,2.0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.green));g1.add(1.5,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue));g2=null;try {g2=(LookupPaintScale)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.renderer.junit.LookupPaintScaleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LookupPaintScale g1=new LookupPaintScale();LookupPaintScale g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(LookupPaintScale)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);g1=new LookupPaintScale(1.0,2.0,new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));g1.add(1.5,new GradientPaint(1.1f,2.2f,Color.red,3.3f,4.4f,Color.blue));g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(LookupPaintScale)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.renderer.junit.LookupPaintScaleTests.testConstructor1",0,"/** * Some checks for the default constructor.*/public void testConstructor1(){LookupPaintScale s=new LookupPaintScale();assertEquals(0.0,s.getLowerBound(),EPSILON);assertEquals(1.0,s.getUpperBound(),EPSILON);}"
"org.jfree.chart.renderer.junit.LookupPaintScaleTests.testConstructor2",0,"/** * Some checks for the other constructor.*/public void testConstructor2(){LookupPaintScale s=new LookupPaintScale(1.0,2.0,Color.red);assertEquals(1.0,s.getLowerBound(),EPSILON);assertEquals(2.0,s.getUpperBound(),EPSILON);assertEquals(Color.red,s.getDefaultPaint());}"
"org.jfree.chart.renderer.junit.LookupPaintScaleTests.testGeneral",0,"/** * Some general checks for the lookup table.*/public void testGeneral(){LookupPaintScale s=new LookupPaintScale(0.0,100.0,Color.black);assertEquals(Color.black,s.getPaint(-1.0));assertEquals(Color.black,s.getPaint(0.0));assertEquals(Color.black,s.getPaint(50.0));assertEquals(Color.black,s.getPaint(100.0));assertEquals(Color.black,s.getPaint(101.0));s.add(50.0,Color.blue);assertEquals(Color.black,s.getPaint(-1.0));assertEquals(Color.black,s.getPaint(0.0));assertEquals(Color.blue,s.getPaint(50.0));assertEquals(Color.blue,s.getPaint(100.0));assertEquals(Color.black,s.getPaint(101.0));s.add(50.0,Color.red);assertEquals(Color.black,s.getPaint(-1.0));assertEquals(Color.black,s.getPaint(0.0));assertEquals(Color.red,s.getPaint(50.0));assertEquals(Color.red,s.getPaint(100.0));assertEquals(Color.black,s.getPaint(101.0));s.add(25.0,Color.green);assertEquals(Color.black,s.getPaint(-1.0));assertEquals(Color.black,s.getPaint(0.0));assertEquals(Color.green,s.getPaint(25.0));assertEquals(Color.red,s.getPaint(50.0));assertEquals(Color.red,s.getPaint(100.0));assertEquals(Color.black,s.getPaint(101.0));s.add(75.0,Color.yellow);assertEquals(Color.black,s.getPaint(-1.0));assertEquals(Color.black,s.getPaint(0.0));assertEquals(Color.green,s.getPaint(25.0));assertEquals(Color.red,s.getPaint(50.0));assertEquals(Color.yellow,s.getPaint(75.0));assertEquals(Color.yellow,s.getPaint(100.0));assertEquals(Color.black,s.getPaint(101.0));}"
"org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.testCalculateBoxAndWhiskerStatistics",0,"/** * Some checks for the calculateBoxAndWhiskerStatistics()method.*/public void testCalculateBoxAndWhiskerStatistics(){boolean pass=false;try {BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);List values=new ArrayList();values.add(new Double(1.1));BoxAndWhiskerItem item=BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(values);assertEquals(1.1,item.getMean().doubleValue(),EPSILON);assertEquals(1.1,item.getMedian().doubleValue(),EPSILON);assertEquals(1.1,item.getQ1().doubleValue(),EPSILON);assertEquals(1.1,item.getQ3().doubleValue(),EPSILON);}"
"org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.testCalculateQ1",0,"/** * Tests the Q1 calculation.*/public void testCalculateQ1(){boolean pass=false;try {BoxAndWhiskerCalculator.calculateQ1(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);List values=new ArrayList();double q1=BoxAndWhiskerCalculator.calculateQ1(values);assertTrue(Double.isNaN(q1));values.add(new Double(1.0));q1=BoxAndWhiskerCalculator.calculateQ1(values);assertEquals(q1,1.0,EPSILON);values.add(new Double(2.0));q1=BoxAndWhiskerCalculator.calculateQ1(values);assertEquals(q1,1.0,EPSILON);values.add(new Double(3.0));q1=BoxAndWhiskerCalculator.calculateQ1(values);assertEquals(q1,1.5,EPSILON);values.add(new Double(4.0));q1=BoxAndWhiskerCalculator.calculateQ1(values);assertEquals(q1,1.5,EPSILON);}"
"org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.testCalculateQ3",0,"/** * Tests the Q3 calculation.*/public void testCalculateQ3(){boolean pass=false;try {BoxAndWhiskerCalculator.calculateQ3(null);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);List values=new ArrayList();double q3=BoxAndWhiskerCalculator.calculateQ3(values);assertTrue(Double.isNaN(q3));values.add(new Double(1.0));q3=BoxAndWhiskerCalculator.calculateQ3(values);assertEquals(q3,1.0,EPSILON);values.add(new Double(2.0));q3=BoxAndWhiskerCalculator.calculateQ3(values);assertEquals(q3,2.0,EPSILON);values.add(new Double(3.0));q3=BoxAndWhiskerCalculator.calculateQ3(values);assertEquals(q3,2.5,EPSILON);values.add(new Double(4.0));q3=BoxAndWhiskerCalculator.calculateQ3(values);assertEquals(q3,3.5,EPSILON);}"
"org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests.test1593149",0,"/** * The test case included in bug report 1593149.*/public void test1593149(){ArrayList theList=new ArrayList(5);theList.add(0,new Double(1.0));theList.add(1,new Double(2.0));theList.add(2,new Double(Double.NaN));theList.add(3,new Double(3.0));theList.add(4,new Double(4.0));BoxAndWhiskerItem theItem=BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(theList);assertEquals(1.0,theItem.getMinRegularValue().doubleValue(),EPSILON);assertEquals(4.0,theItem.getMaxRegularValue().doubleValue(),EPSILON);}"
"org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYIntervalSeriesCollection c1=new XYIntervalSeriesCollection();XYIntervalSeriesCollection c2=new XYIntervalSeriesCollection();assertEquals(c1,c2);XYIntervalSeries s1=new XYIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3,1.4,1.5);c1.addSeries(s1);assertFalse(c1.equals(c2));XYIntervalSeries s2=new XYIntervalSeries(""Series"");s2.add(1.0,1.1,1.2,1.3,1.4,1.5);c2.addSeries(s2);assertTrue(c1.equals(c2));c1.addSeries(new XYIntervalSeries(""Empty Series""));assertFalse(c1.equals(c2));c2.addSeries(new XYIntervalSeries(""Empty Series""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYIntervalSeriesCollection c1=new XYIntervalSeriesCollection();XYIntervalSeries s1=new XYIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3,1.4,1.5);XYIntervalSeriesCollection c2=null;try {c2=(XYIntervalSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));c1.addSeries(new XYIntervalSeries(""Empty""));assertFalse(c1.equals(c2));c2.addSeries(new XYIntervalSeries(""Empty""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYIntervalSeriesCollection c1=new XYIntervalSeriesCollection();XYIntervalSeries s1=new XYIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3,1.4,1.5);XYIntervalSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(XYIntervalSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);c1.addSeries(new XYIntervalSeries(""Empty""));assertFalse(c1.equals(c2));c2.addSeries(new XYIntervalSeries(""Empty""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests.test1170825",0,"/** * A test for bug report 1170825 (originally affected XYSeriesCollection,this test is just copied over).*/public void test1170825(){XYIntervalSeries s1=new XYIntervalSeries(""Series1"");XYIntervalSeriesCollection dataset=new XYIntervalSeriesCollection();dataset.addSeries(s1);try {dataset.getSeries(1);}catch(IllegalArgumentException e){}catch(IndexOutOfBoundsException e){assertTrue(false);}}"
"org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){WindItemRenderer r1=new WindItemRenderer();WindItemRenderer r2=new WindItemRenderer();assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){WindItemRenderer r1=new WindItemRenderer();WindItemRenderer r2=new WindItemRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){WindItemRenderer r1=new WindItemRenderer();WindItemRenderer r2=null;try {r2=(WindItemRenderer)r1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.WindItemRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){WindItemRenderer r1=new WindItemRenderer();WindItemRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(WindItemRenderer)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){BoxAndWhiskerRenderer r1=new BoxAndWhiskerRenderer();BoxAndWhiskerRenderer r2=new BoxAndWhiskerRenderer();assertEquals(r1,r2);r1.setArtifactPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.blue));assertFalse(r1.equals(r2));r2.setArtifactPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.blue));assertEquals(r1,r2);r1.setFillBox(!r1.getFillBox());assertFalse(r1.equals(r2));r2.setFillBox(!r2.getFillBox());assertEquals(r1,r2);r1.setItemMargin(0.11);assertFalse(r1.equals(r2));r2.setItemMargin(0.11);assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){BoxAndWhiskerRenderer r1=new BoxAndWhiskerRenderer();BoxAndWhiskerRenderer r2=new BoxAndWhiskerRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){BoxAndWhiskerRenderer r1=new BoxAndWhiskerRenderer();BoxAndWhiskerRenderer r2=null;try {r2=(BoxAndWhiskerRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){BoxAndWhiskerRenderer r1=new BoxAndWhiskerRenderer();BoxAndWhiskerRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(BoxAndWhiskerRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(0.0),new Double(4.0),new Double(0.5),new Double(4.5),new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testBug1572478Vertical",0,"/** * A check for bug 1572478 (for the vertical orientation).*/public void testBug1572478Vertical(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset(){public Number getQ1Value(int row,int column){return null;}public Number getQ1Value(Comparable rowKey,Comparable columnKey){return null;}};List values=new ArrayList();values.add(new Double(1.0));values.add(new Double(10.0));values.add(new Double(100.0));dataset.add(values,""row"",""column"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""x""),new NumberAxis(""y""),new BoxAndWhiskerRenderer());JFreeChart chart=new JFreeChart(plot);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,new ChartRenderingInfo());g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testBug1572478Horizontal",0,"/** * A check for bug 1572478 (for the horizontal orientation).*/public void testBug1572478Horizontal(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset(){public Number getQ1Value(int row,int column){return null;}public Number getQ1Value(Comparable rowKey,Comparable columnKey){return null;}};List values=new ArrayList();values.add(new Double(1.0));values.add(new Double(10.0));values.add(new Double(100.0));dataset.add(values,""row"",""column"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""x""),new NumberAxis(""y""),new BoxAndWhiskerRenderer());plot.setOrientation(PlotOrientation.HORIZONTAL);JFreeChart chart=new JFreeChart(plot);boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,new ChartRenderingInfo());g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testGetLegendItem",0,"/** * Some checks for the getLegendItem()method.*/public void testGetLegendItem(){DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();List values=new ArrayList();values.add(new Double(1.10));values.add(new Double(1.45));values.add(new Double(1.33));values.add(new Double(1.23));dataset.add(values,""R1"",""C1"");BoxAndWhiskerRenderer r=new BoxAndWhiskerRenderer();CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""x""),new NumberAxis(""y""),r);new JFreeChart(plot);LegendItem li=r.getLegendItem(0,0);assertNotNull(li);r.setSeriesVisibleInLegend(0,Boolean.FALSE);li=r.getLegendItem(0,0);assertNull(li);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){DefaultCategoryDataset dataset0=new DefaultCategoryDataset();dataset0.addValue(21.0,""R1"",""C1"");dataset0.addValue(22.0,""R2"",""C1"");DefaultCategoryDataset dataset1=new DefaultCategoryDataset();dataset1.addValue(23.0,""R3"",""C1"");dataset1.addValue(24.0,""R4"",""C1"");dataset1.addValue(25.0,""R5"",""C1"");BoxAndWhiskerRenderer r=new BoxAndWhiskerRenderer();CategoryPlot plot=new CategoryPlot(dataset0,new CategoryAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,dataset1);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""R5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMean",0,"/** * Draws a chart where the dataset contains a null mean value.*/public void testDrawWithNullMean(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(null,new Double(2.0),new Double(0.0),new Double(4.0),new Double(0.5),new Double(4.5),new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMedian",0,"/** * Draws a chart where the dataset contains a null median value.*/public void testDrawWithNullMedian(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),null,new Double(0.0),new Double(4.0),new Double(0.5),new Double(4.5),new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullQ1",0,"/** * Draws a chart where the dataset contains a null Q1 value.*/public void testDrawWithNullQ1(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),null,new Double(4.0),new Double(0.5),new Double(4.5),new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullQ3",0,"/** * Draws a chart where the dataset contains a null Q3 value.*/public void testDrawWithNullQ3(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),null,new Double(0.5),new Double(4.5),new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMinRegular",0,"/** * Draws a chart where the dataset contains a null min regular value.*/public void testDrawWithNullMinRegular(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),null,new Double(4.5),new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMaxRegular",0,"/** * Draws a chart where the dataset contains a null max regular value.*/public void testDrawWithNullMaxRegular(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(0.5),null,new Double(-0.5),new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMinOutlier",0,"/** * Draws a chart where the dataset contains a null min outlier value.*/public void testDrawWithNullMinOutlier(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(0.5),new Double(4.5),null,new Double(5.5),null),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullMaxOutlier",0,"/** * Draws a chart where the dataset contains a null max outlier value.*/public void testDrawWithNullMaxOutlier(){boolean success=false;try {DefaultBoxAndWhiskerCategoryDataset dataset=new DefaultBoxAndWhiskerCategoryDataset();dataset.add(new BoxAndWhiskerItem(new Double(1.0),new Double(2.0),new Double(3.0),new Double(4.0),new Double(0.5),new Double(4.5),new Double(-0.5),null,new java.util.ArrayList()),""S1"",""C1"");CategoryPlot plot=new CategoryPlot(dataset,new CategoryAxis(""Category""),new NumberAxis(""Value""),new BoxAndWhiskerRenderer());ChartRenderingInfo info=new ChartRenderingInfo();JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,info);success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.ChartPanelTests.testConstructor1",0,"/** * Test that the constructor will accept a null chart.*/public void testConstructor1(){ChartPanel panel=new ChartPanel(null);assertEquals(null,panel.getChart());}"
"org.jfree.chart.junit.ChartPanelTests.testSetChart",0,"/** * Test that it is possible to set the panel's chart to null.*/public void testSetChart(){JFreeChart chart=new JFreeChart(new XYPlot());ChartPanel panel=new ChartPanel(chart);panel.setChart(null);assertEquals(null,panel.getChart());}"
"org.jfree.chart.junit.ChartPanelTests.testGetListeners",0,"/** * Check the behaviour of the getListeners()method.*/public void testGetListeners(){ChartPanel p=new ChartPanel(null);p.addChartMouseListener(this);EventListener[]listeners=p.getListeners(ChartMouseListener.class);assertEquals(1,listeners.length);assertEquals(this,listeners[0]);listeners=p.getListeners(CaretListener.class);assertEquals(0,listeners.length);p.removeChartMouseListener(this);listeners=p.getListeners(ChartMouseListener.class);assertEquals(0,listeners.length);boolean pass=false;try {listeners=p.getListeners((Class)null);}catch(NullPointerException e){pass=true;}assertTrue(pass);pass=false;try {listeners=p.getListeners(Integer.class);}catch(ClassCastException e){pass=true;}assertTrue(pass);}"
"org.jfree.chart.block.junit.ColorBlockTests.testEquals",0,"/** * Confirm that the equals()method can distinguish all the required fields.*/public void testEquals(){ColorBlock b1=new ColorBlock(Color.red,1.0,2.0);ColorBlock b2=new ColorBlock(Color.red,1.0,2.0);assertTrue(b1.equals(b2));assertTrue(b2.equals(b2));b1=new ColorBlock(Color.blue,1.0,2.0);assertFalse(b1.equals(b2));b2=new ColorBlock(Color.blue,1.0,2.0);assertTrue(b1.equals(b2));b1=new ColorBlock(Color.blue,1.1,2.0);assertFalse(b1.equals(b2));b2=new ColorBlock(Color.blue,1.1,2.0);assertTrue(b1.equals(b2));b1=new ColorBlock(Color.blue,1.1,2.2);assertFalse(b1.equals(b2));b2=new ColorBlock(Color.blue,1.1,2.2);assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.ColorBlockTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){GradientPaint gp=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue);Rectangle2D bounds1=new Rectangle2D.Double(10.0,20.0,30.0,40.0);ColorBlock b1=new ColorBlock(gp,1.0,2.0);b1.setBounds(bounds1);ColorBlock b2=null;try {b2=(ColorBlock)b1.clone();}catch(CloneNotSupportedException e){fail(e.toString());}assertTrue(b1 != b2);assertTrue(b1.getClass()== b2.getClass());assertTrue(b1.equals(b2));bounds1.setRect(1.0,2.0,3.0,4.0);assertFalse(b1.equals(b2));b2.setBounds(new Rectangle2D.Double(1.0,2.0,3.0,4.0));assertTrue(b1.equals(b2));}"
"org.jfree.chart.block.junit.ColorBlockTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){GradientPaint gp=new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.blue);ColorBlock b1=new ColorBlock(gp,1.0,2.0);ColorBlock b2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(b1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));b2=(ColorBlock)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertEquals(b1,b2);}"
"org.jfree.chart.needle.junit.PinNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){PinNeedle n1=new PinNeedle();PinNeedle n2=new PinNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.PinNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){PinNeedle n1=new PinNeedle();PinNeedle n2=null;try {n2=(PinNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.PinNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){PinNeedle n1=new PinNeedle();PinNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(PinNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testEquals",0,"/** * Test the equals method.*/public void testEquals(){CombinedRangeXYPlot plot1=createPlot();CombinedRangeXYPlot plot2=createPlot();assertTrue(plot1.equals(plot2));assertTrue(plot2.equals(plot1));}"
"org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testRemoveSubplot",0,"/** * This is a test to replicate the bug report 987080.*/public void testRemoveSubplot(){CombinedRangeXYPlot plot=new CombinedRangeXYPlot();XYPlot plot1=new XYPlot();XYPlot plot2=new XYPlot();plot.add(plot1);plot.add(plot2);plot.remove(plot2);List plots=plot.getSubplots();assertTrue(plots.get(0)== plot1);}"
"org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CombinedRangeXYPlot plot1=createPlot();CombinedRangeXYPlot plot2=null;try {plot2=(CombinedRangeXYPlot)plot1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(plot1 != plot2);assertTrue(plot1.getClass()== plot2.getClass());assertTrue(plot1.equals(plot2));}"
"org.jfree.chart.plot.junit.CombinedRangeXYPlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CombinedRangeXYPlot plot1=createPlot();CombinedRangeXYPlot plot2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(plot1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));plot2=(CombinedRangeXYPlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(plot1,plot2);}"
"org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){XYStepAreaRenderer r1=new XYStepAreaRenderer();XYStepAreaRenderer r2=new XYStepAreaRenderer();assertEquals(r1,r2);r1.setOutline(true);assertFalse(r1.equals(r2));r2.setOutline(true);assertTrue(r1.equals(r2));r1.setShapesVisible(true);assertFalse(r1.equals(r2));r2.setShapesVisible(true);assertTrue(r1.equals(r2));r1.setShapesFilled(true);assertFalse(r1.equals(r2));r2.setShapesFilled(true);assertTrue(r1.equals(r2));r1.setPlotArea(false);assertFalse(r1.equals(r2));r2.setPlotArea(false);assertTrue(r1.equals(r2));r1.setRangeBase(-1.0);assertFalse(r1.equals(r2));r2.setRangeBase(-1.0);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){XYStepAreaRenderer r1=new XYStepAreaRenderer();XYStepAreaRenderer r2=new XYStepAreaRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYStepAreaRenderer r1=new XYStepAreaRenderer();XYStepAreaRenderer r2=null;try {r2=(XYStepAreaRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYStepAreaRenderer r1=new XYStepAreaRenderer();XYStepAreaRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(XYStepAreaRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown (particularly by code in the renderer).*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new XYStepAreaRenderer());JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testEquals",0,"/** * Test that the equals()method distinguishes all fields.*/public void testEquals(){DeviationRenderer r1=new DeviationRenderer();DeviationRenderer r2=new DeviationRenderer();assertTrue(r1.equals(r2));assertTrue(r2.equals(r1));r1.setAlpha(0.1f);assertFalse(r1.equals(r2));r2.setAlpha(0.1f);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){DeviationRenderer r1=new DeviationRenderer();DeviationRenderer r2=new DeviationRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){DeviationRenderer r1=new DeviationRenderer();DeviationRenderer r2=null;try {r2=(DeviationRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.DeviationRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DeviationRenderer r1=new DeviationRenderer();DeviationRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(DeviationRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.title.junit.CompositeTitleTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){CompositeTitle t1=new CompositeTitle(new BlockContainer());CompositeTitle t2=new CompositeTitle(new BlockContainer());assertEquals(t1,t2);assertEquals(t2,t1);t1.setMargin(new RectangleInsets(1.0,2.0,3.0,4.0));assertFalse(t1.equals(t2));t2.setMargin(new RectangleInsets(1.0,2.0,3.0,4.0));assertTrue(t1.equals(t2));t1.setFrame(new BlockBorder(Color.red));assertFalse(t1.equals(t2));t2.setFrame(new BlockBorder(Color.red));assertTrue(t1.equals(t2));t1.setPadding(new RectangleInsets(1.0,2.0,3.0,4.0));assertFalse(t1.equals(t2));t2.setPadding(new RectangleInsets(1.0,2.0,3.0,4.0));assertTrue(t1.equals(t2));t1.getContainer().add(new TextTitle(""T1""));assertFalse(t1.equals(t2));t2.getContainer().add(new TextTitle(""T1""));assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.CompositeTitleTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){CompositeTitle t1=new CompositeTitle(new BlockContainer());t1.getContainer().add(new TextTitle(""T1""));CompositeTitle t2=new CompositeTitle(new BlockContainer());t2.getContainer().add(new TextTitle(""T1""));assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.title.junit.CompositeTitleTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CompositeTitle t1=new CompositeTitle(new BlockContainer());t1.getContainer().add(new TextTitle(""T1""));CompositeTitle t2=null;try {t2=(CompositeTitle)t1.clone();}catch(CloneNotSupportedException e){fail(e.toString());}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.CompositeTitleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CompositeTitle t1=new CompositeTitle(new BlockContainer());t1.getContainer().add(new TextTitle(""T1""));CompositeTitle t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(CompositeTitle)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);}"
"org.jfree.chart.title.junit.TitleTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){Title t1=new TextTitle();Title t2=new TextTitle();assertEquals(t1,t2);t1.setPosition(RectangleEdge.LEFT);assertFalse(t1.equals(t2));t2.setPosition(RectangleEdge.LEFT);assertTrue(t1.equals(t2));t1.setHorizontalAlignment(HorizontalAlignment.RIGHT);assertFalse(t1.equals(t2));t2.setHorizontalAlignment(HorizontalAlignment.RIGHT);assertTrue(t1.equals(t2));t1.setVerticalAlignment(VerticalAlignment.BOTTOM);assertFalse(t1.equals(t2));t2.setVerticalAlignment(VerticalAlignment.BOTTOM);assertTrue(t1.equals(t2));}"
"org.jfree.chart.title.junit.TitleTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){TextTitle t1=new TextTitle();TextTitle t2=new TextTitle();assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XIntervalSeriesCollection c1=new XIntervalSeriesCollection();XIntervalSeriesCollection c2=new XIntervalSeriesCollection();assertEquals(c1,c2);XIntervalSeries s1=new XIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);c1.addSeries(s1);assertFalse(c1.equals(c2));XIntervalSeries s2=new XIntervalSeries(""Series"");s2.add(1.0,1.1,1.2,1.3);c2.addSeries(s2);assertTrue(c1.equals(c2));c1.addSeries(new XIntervalSeries(""Empty Series""));assertFalse(c1.equals(c2));c2.addSeries(new XIntervalSeries(""Empty Series""));assertTrue(c1.equals(c2));}"
"org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XIntervalSeriesCollection c1=new XIntervalSeriesCollection();XIntervalSeries s1=new XIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);c1.addSeries(s1);XIntervalSeriesCollection c2=null;try {c2=(XIntervalSeriesCollection)c1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(c1 != c2);assertTrue(c1.getClass()== c2.getClass());assertTrue(c1.equals(c2));s1.setDescription(""XYZ"");assertFalse(c1.equals(c2));}"
"org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XIntervalSeriesCollection c1=new XIntervalSeriesCollection();XIntervalSeries s1=new XIntervalSeries(""Series"");s1.add(1.0,1.1,1.2,1.3);XIntervalSeriesCollection c2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(c1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));c2=(XIntervalSeriesCollection)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(c1,c2);}"
"org.jfree.data.xy.junit.XIntervalSeriesCollectionTests.test1170825",0,"/** * A test for bug report 1170825 (originally affected XYSeriesCollection,this test is just copied over).*/public void test1170825(){XIntervalSeries s1=new XIntervalSeries(""Series1"");XIntervalSeriesCollection dataset=new XIntervalSeriesCollection();dataset.addSeries(s1);try {dataset.getSeries(1);}catch(IllegalArgumentException e){}catch(IndexOutOfBoundsException e){assertTrue(false);}}"
"org.jfree.chart.plot.junit.MultiplePiePlotTests.testConstructor",1,"/** * Some checks for the constructors.*/public void testConstructor(){MultiplePiePlot plot=new MultiplePiePlot();assertNull(plot.getDataset());DefaultCategoryDataset dataset=new DefaultCategoryDataset();plot=new MultiplePiePlot(dataset);assertTrue(dataset.hasListener(plot));}"
"org.jfree.chart.plot.junit.MultiplePiePlotTests.testEquals",0,"/** * Check that the equals()method distinguishes the required fields.*/public void testEquals(){MultiplePiePlot p1=new MultiplePiePlot();MultiplePiePlot p2=new MultiplePiePlot();assertTrue(p1.equals(p2));assertTrue(p2.equals(p1));p1.setDataExtractOrder(TableOrder.BY_ROW);assertFalse(p1.equals(p2));p2.setDataExtractOrder(TableOrder.BY_ROW);assertTrue(p1.equals(p2));p1.setLimit(1.23);assertFalse(p1.equals(p2));p2.setLimit(1.23);assertTrue(p1.equals(p2));p1.setAggregatedItemsKey(""Aggregated Items"");assertFalse(p1.equals(p2));p2.setAggregatedItemsKey(""Aggregated Items"");assertTrue(p1.equals(p2));p1.setAggregatedItemsPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertFalse(p1.equals(p2));p2.setAggregatedItemsPaint(new GradientPaint(1.0f,2.0f,Color.red,3.0f,4.0f,Color.yellow));assertTrue(p1.equals(p2));p1.setPieChart(ChartFactory.createPieChart(""Title"",null,true,true,true));assertFalse(p1.equals(p2));p2.setPieChart(ChartFactory.createPieChart(""Title"",null,true,true,true));assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.MultiplePiePlotTests.testCloning",0,"/** * Some basic checks for the clone()method.*/public void testCloning(){MultiplePiePlot p1=new MultiplePiePlot();MultiplePiePlot p2=null;try {p2=(MultiplePiePlot)p1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(p1 != p2);assertTrue(p1.getClass()== p2.getClass());assertTrue(p1.equals(p2));}"
"org.jfree.chart.plot.junit.MultiplePiePlotTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MultiplePiePlot p1=new MultiplePiePlot(null);p1.setAggregatedItemsPaint(new GradientPaint(1.0f,2.0f,Color.yellow,3.0f,4.0f,Color.red));MultiplePiePlot p2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(p1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));p2=(MultiplePiePlot)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(p1,p2);}"
"org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){CategoryTableXYDataset d1=new CategoryTableXYDataset();d1.add(1.0,1.1,""Series 1"");d1.add(2.0,2.2,""Series 1"");CategoryTableXYDataset d2=new CategoryTableXYDataset();d2.add(1.0,1.1,""Series 1"");d2.add(2.0,2.2,""Series 1"");assertTrue(d1.equals(d2));assertTrue(d2.equals(d1));d1.add(3.0,3.3,""Series 1"");assertFalse(d1.equals(d2));d2.add(3.0,3.3,""Series 1"");assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryTableXYDataset d1=new CategoryTableXYDataset();d1.add(1.0,1.1,""Series 1"");d1.add(2.0,2.2,""Series 1"");CategoryTableXYDataset d2=null;try {d2=(CategoryTableXYDataset)d1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(d1 != d2);assertTrue(d1.getClass()== d2.getClass());assertTrue(d1.equals(d2));}"
"org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryTableXYDataset d1=new CategoryTableXYDataset();d1.add(1.0,1.1,""Series 1"");d1.add(2.0,2.2,""Series 1"");CategoryTableXYDataset d2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(d1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));d2=(CategoryTableXYDataset)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(d1,d2);}"
"org.jfree.data.xy.junit.CategoryTableXYDatasetTests.testAddSeries",0,"/** * This is a test for bug 1312066 - adding a new series should trigger a recalculation of the interval width,if it is being automatically calculated.*/public void testAddSeries(){CategoryTableXYDataset d1=new CategoryTableXYDataset();d1.setAutoWidth(true);d1.add(3.0,1.1,""Series 1"");d1.add(7.0,2.2,""Series 1"");assertEquals(3.0,d1.getXValue(0,0),EPSILON);assertEquals(7.0,d1.getXValue(0,1),EPSILON);assertEquals(1.0,d1.getStartXValue(0,0),EPSILON);assertEquals(5.0,d1.getStartXValue(0,1),EPSILON);assertEquals(5.0,d1.getEndXValue(0,0),EPSILON);assertEquals(9.0,d1.getEndXValue(0,1),EPSILON);d1.add(7.5,1.1,""Series 2"");d1.add(9.0,2.2,""Series 2"");assertEquals(3.0,d1.getXValue(1,0),EPSILON);assertEquals(7.0,d1.getXValue(1,1),EPSILON);assertEquals(7.5,d1.getXValue(1,2),EPSILON);assertEquals(9.0,d1.getXValue(1,3),EPSILON);assertEquals(7.25,d1.getStartXValue(1,2),EPSILON);assertEquals(8.75,d1.getStartXValue(1,3),EPSILON);assertEquals(7.75,d1.getEndXValue(1,2),EPSILON);assertEquals(9.25,d1.getEndXValue(1,3),EPSILON);assertEquals(2.75,d1.getStartXValue(0,0),EPSILON);assertEquals(6.75,d1.getStartXValue(0,1),EPSILON);assertEquals(3.25,d1.getEndXValue(0,0),EPSILON);assertEquals(7.25,d1.getEndXValue(0,1),EPSILON);}"
"org.jfree.data.junit.DefaultKeyedValueTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){DefaultKeyedValue v1=new DefaultKeyedValue(""Test"",new Double(45.5));DefaultKeyedValue v2=new DefaultKeyedValue(""Test"",new Double(45.5));assertTrue(v1.equals(v2));assertTrue(v2.equals(v1));v1=new DefaultKeyedValue(""Test 1"",new Double(45.5));v2=new DefaultKeyedValue(""Test 2"",new Double(45.5));assertFalse(v1.equals(v2));v1=new DefaultKeyedValue(""Test"",new Double(45.5));v2=new DefaultKeyedValue(""Test"",new Double(45.6));assertFalse(v1.equals(v2));}"
"org.jfree.data.junit.DefaultKeyedValueTests.testCloning",0,"/** * Some checks for the clone()method.*/public void testCloning(){DefaultKeyedValue v1=new DefaultKeyedValue(""Test"",new Double(45.5));DefaultKeyedValue v2=null;try {v2=(DefaultKeyedValue)v1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(v1 != v2);assertTrue(v1.getClass()== v2.getClass());assertTrue(v1.equals(v2));v2.setValue(new Double(12.3));assertFalse(v1.equals(v2));}"
"org.jfree.data.junit.DefaultKeyedValueTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){DefaultKeyedValue v1=new DefaultKeyedValue(""Test"",new Double(25.3));DefaultKeyedValue v2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(v1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));v2=(DefaultKeyedValue)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(v1,v2);}"
"org.jfree.chart.junit.StackedBarChart3DTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.StackedBarChart3DTests.testReplaceDataset",0,"/** * Replaces the dataset and checks that it has changed as expected.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.StackedBarChart3DTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.StackedBarChart3DTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.junit.BarChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.BarChartTests.testReplaceDataset",0,"/** * Replaces the chart's dataset and then checks that the new dataset is OK.*/public void testReplaceDataset(){Number[][]data=new Integer[][]{{new Integer(-30),new Integer(-20)},{new Integer(-10),new Integer(10)},{new Integer(20),new Integer(30)}};CategoryDataset newData=DatasetUtilities.createCategoryDataset(""S"",""C"",data);LocalListener l=new LocalListener();this.chart.addChangeListener(l);CategoryPlot plot=(CategoryPlot)this.chart.getPlot();plot.setDataset(newData);assertEquals(true,l.flag);ValueAxis axis=plot.getRangeAxis();Range range=axis.getRange();assertTrue(""Expecting the lower bound of the range to be around -30: "" + range.getLowerBound(),range.getLowerBound()<= -30);assertTrue(""Expecting the upper bound of the range to be around 30: "" + range.getUpperBound(),range.getUpperBound()>= 30);}"
"org.jfree.chart.junit.BarChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.BarChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testEquals",0,"/** * Check that the equals()method distinguishes all fields.*/public void testEquals(){YIntervalRenderer r1=new YIntervalRenderer();YIntervalRenderer r2=new YIntervalRenderer();assertEquals(r1,r2);r1.setSeriesItemLabelGenerator(0,new StandardXYItemLabelGenerator());assertFalse(r1.equals(r2));r2.setSeriesItemLabelGenerator(0,new StandardXYItemLabelGenerator());assertTrue(r1.equals(r2));r1.setBaseItemLabelGenerator(new StandardXYItemLabelGenerator());assertFalse(r1.equals(r2));r2.setBaseItemLabelGenerator(new StandardXYItemLabelGenerator());assertTrue(r1.equals(r2));r1.setSeriesToolTipGenerator(0,new StandardXYToolTipGenerator());assertFalse(r1.equals(r2));r2.setSeriesToolTipGenerator(0,new StandardXYToolTipGenerator());assertTrue(r1.equals(r2));r1.setBaseToolTipGenerator(new StandardXYToolTipGenerator());assertFalse(r1.equals(r2));r2.setBaseToolTipGenerator(new StandardXYToolTipGenerator());assertTrue(r1.equals(r2));r1.setSeriesURLGenerator(0,new StandardXYURLGenerator());assertFalse(r1.equals(r2));r2.setSeriesURLGenerator(0,new StandardXYURLGenerator());assertTrue(r1.equals(r2));r1.setBaseURLGenerator(new StandardXYURLGenerator());assertFalse(r1.equals(r2));r2.setBaseURLGenerator(new StandardXYURLGenerator());assertTrue(r1.equals(r2));r1.addAnnotation(new XYTextAnnotation(""X"",1.0,2.0),Layer.FOREGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new XYTextAnnotation(""X"",1.0,2.0),Layer.FOREGROUND);assertTrue(r1.equals(r2));r1.addAnnotation(new XYTextAnnotation(""X"",1.0,2.0),Layer.BACKGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new XYTextAnnotation(""X"",1.0,2.0),Layer.BACKGROUND);assertTrue(r1.equals(r2));r1.setDefaultEntityRadius(99);assertFalse(r1.equals(r2));r2.setDefaultEntityRadius(99);assertTrue(r1.equals(r2));r1.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(""{0}{1}""));assertFalse(r1.equals(r2));r2.setLegendItemLabelGenerator(new StandardXYSeriesLabelGenerator(""{0}{1}""));assertTrue(r1.equals(r2));r1.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator());assertFalse(r1.equals(r2));r2.setLegendItemToolTipGenerator(new StandardXYSeriesLabelGenerator());assertTrue(r1.equals(r2));r1.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator());assertFalse(r1.equals(r2));r2.setLegendItemURLGenerator(new StandardXYSeriesLabelGenerator());assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testHashcode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashcode(){YIntervalRenderer r1=new YIntervalRenderer();YIntervalRenderer r2=new YIntervalRenderer();assertTrue(r1.equals(r2));int h1=r1.hashCode();int h2=r2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){YIntervalRenderer r1=new YIntervalRenderer();YIntervalRenderer r2=null;try {r2=(YIntervalRenderer)r1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(r1 != r2);assertTrue(r1.getClass()== r2.getClass());assertTrue(r1.equals(r2));r1.setSeriesItemLabelGenerator(0,new StandardXYItemLabelGenerator());assertFalse(r1.equals(r2));r2.setSeriesItemLabelGenerator(0,new StandardXYItemLabelGenerator());assertTrue(r1.equals(r2));r1.setSeriesToolTipGenerator(0,new StandardXYToolTipGenerator());assertFalse(r1.equals(r2));r2.setSeriesToolTipGenerator(0,new StandardXYToolTipGenerator());assertTrue(r1.equals(r2));r1.addAnnotation(new XYTextAnnotation(""ABC"",1.0,2.0),Layer.FOREGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new XYTextAnnotation(""ABC"",1.0,2.0),Layer.FOREGROUND);assertTrue(r1.equals(r2));r1.addAnnotation(new XYTextAnnotation(""ABC"",1.0,2.0),Layer.BACKGROUND);assertFalse(r1.equals(r2));r2.addAnnotation(new XYTextAnnotation(""ABC"",1.0,2.0),Layer.BACKGROUND);assertTrue(r1.equals(r2));}"
"org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){YIntervalRenderer r1=new YIntervalRenderer();YIntervalRenderer r2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(r1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));r2=(YIntervalRenderer)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(r1,r2);}"
"org.jfree.chart.renderer.xy.junit.YIntervalRendererTests.testGetLegendItemSeriesIndex",0,"/** * A check for the datasetIndex and seriesIndex fields in the LegendItem returned by the getLegendItem()method.*/public void testGetLegendItemSeriesIndex(){YIntervalSeriesCollection d1=new YIntervalSeriesCollection();YIntervalSeries s1=new YIntervalSeries(""S1"");s1.add(1.0,1.1,1.2,1.3);YIntervalSeries s2=new YIntervalSeries(""S2"");s2.add(1.0,1.1,1.2,1.3);d1.addSeries(s1);d1.addSeries(s2);YIntervalSeriesCollection d2=new YIntervalSeriesCollection();YIntervalSeries s3=new YIntervalSeries(""S3"");s3.add(1.0,1.1,1.2,1.3);YIntervalSeries s4=new YIntervalSeries(""S4"");s4.add(1.0,1.1,1.2,1.3);YIntervalSeries s5=new YIntervalSeries(""S5"");s5.add(1.0,1.1,1.2,1.3);d2.addSeries(s3);d2.addSeries(s4);d2.addSeries(s5);YIntervalRenderer r=new YIntervalRenderer();XYPlot plot=new XYPlot(d1,new NumberAxis(""x""),new NumberAxis(""y""),r);plot.setDataset(1,d2);new JFreeChart(plot);LegendItem li=r.getLegendItem(1,2);assertEquals(""S5"",li.getLabel());assertEquals(1,li.getDatasetIndex());assertEquals(2,li.getSeriesIndex());}"
"org.jfree.chart.needle.junit.LongNeedleTests.testEquals",0,"/** * Check that the equals()method can distinguish all fields.*/public void testEquals(){LongNeedle n1=new LongNeedle();LongNeedle n2=new LongNeedle();assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"org.jfree.chart.needle.junit.LongNeedleTests.testCloning",0,"/** * Check that cloning works.*/public void testCloning(){LongNeedle n1=new LongNeedle();LongNeedle n2=null;try {n2=(LongNeedle)n1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();System.err.println(""Failed to clone."");}assertTrue(n1 != n2);assertTrue(n1.getClass()== n2.getClass());assertTrue(n1.equals(n2));}"
"org.jfree.chart.needle.junit.LongNeedleTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){LongNeedle n1=new LongNeedle();LongNeedle n2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(n1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));n2=(LongNeedle)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertTrue(n1.equals(n2));}"
"org.jfree.data.junit.KeyToGroupMapTests.testMapKeyToGroup",0,"/** * Tests the mapKeyToGroup()method.*/public void testMapKeyToGroup(){KeyToGroupMap m1=new KeyToGroupMap(""G1"");m1.mapKeyToGroup(""K1"",""G1"");assertEquals(""G1"",m1.getGroup(""K1""));m1.mapKeyToGroup(""K2"",""G2"");assertEquals(""G2"",m1.getGroup(""K2""));m1.mapKeyToGroup(""K2"",null);assertEquals(""G1"",m1.getGroup(""K2""));boolean pass=false;try {m1.mapKeyToGroup(null,""G1"");}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyToGroupMapTests.testGroupCount",0,"/** * Tests that the getGroupCount()method returns the correct values under  various circumstances.*/public void testGroupCount(){KeyToGroupMap m1=new KeyToGroupMap(""Default Group"");assertEquals(1,m1.getGroupCount());m1.mapKeyToGroup(""C1"",""G1"");assertEquals(2,m1.getGroupCount());m1.mapKeyToGroup(""C2"",""Default Group"");assertEquals(2,m1.getGroupCount());m1.mapKeyToGroup(""C3"",""Default Group"");m1.mapKeyToGroup(""C4"",""G2"");m1.mapKeyToGroup(""C5"",""G2"");m1.mapKeyToGroup(""C6"",""Default Group"");assertEquals(3,m1.getGroupCount());m1.mapKeyToGroup(""C4"",""G1"");m1.mapKeyToGroup(""C5"",""G1"");assertEquals(2,m1.getGroupCount());}"
"org.jfree.data.junit.KeyToGroupMapTests.testKeyCount",0,"/** * Tests that the getKeyCount()method returns the correct values under  various circumstances.*/public void testKeyCount(){KeyToGroupMap m1=new KeyToGroupMap(""Default Group"");assertEquals(0,m1.getKeyCount(""Default Group""));m1.mapKeyToGroup(""K1"",""G1"");assertEquals(1,m1.getKeyCount(""G1""));m1.mapKeyToGroup(""K1"",null);assertEquals(0,m1.getKeyCount(""G1""));m1.mapKeyToGroup(""K2"",""Default Group"");assertEquals(1,m1.getKeyCount(""Default Group""));m1.mapKeyToGroup(""K3"",""Default Group"");m1.mapKeyToGroup(""K4"",""G2"");m1.mapKeyToGroup(""K5"",""G2"");m1.mapKeyToGroup(""K6"",""Default Group"");assertEquals(3,m1.getKeyCount(""Default Group""));assertEquals(2,m1.getKeyCount(""G2""));m1.mapKeyToGroup(""K4"",""G1"");m1.mapKeyToGroup(""K5"",""G1"");assertEquals(2,m1.getKeyCount(""G1""));assertEquals(0,m1.getKeyCount(""G2""));}"
"org.jfree.data.junit.KeyToGroupMapTests.testGetGroupIndex",0,"/** * Tests the getGroupIndex()method.*/public void testGetGroupIndex(){KeyToGroupMap m1=new KeyToGroupMap(""Default Group"");assertEquals(0,m1.getGroupIndex(""Default Group""));assertEquals(-1,m1.getGroupIndex(""G3""));m1.mapKeyToGroup(""K3"",""G3"");m1.mapKeyToGroup(""K1"",""G1"");m1.mapKeyToGroup(""K2"",""G2"");assertEquals(1,m1.getGroupIndex(""G3""));assertEquals(2,m1.getGroupIndex(""G1""));assertEquals(3,m1.getGroupIndex(""G2""));}"
"org.jfree.data.junit.KeyToGroupMapTests.testGetGroup",0,"/** * Tests the getGroup()method.*/public void testGetGroup(){KeyToGroupMap m1=new KeyToGroupMap(""Default Group"");assertEquals(""Default Group"",m1.getGroup(""K1""));m1.mapKeyToGroup(""K1"",""G1"");assertEquals(""G1"",m1.getGroup(""K1""));m1.mapKeyToGroup(""K1"",""G2"");assertEquals(""G2"",m1.getGroup(""K1""));m1.mapKeyToGroup(""K1"",null);assertEquals(""Default Group"",m1.getGroup(""K1""));boolean pass=false;try {Comparable g=m1.getGroup(null);System.out.println(g);}catch(IllegalArgumentException e){pass=true;}assertTrue(pass);}"
"org.jfree.data.junit.KeyToGroupMapTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){KeyToGroupMap m1=new KeyToGroupMap(""Default Group"");KeyToGroupMap m2=new KeyToGroupMap(""Default Group"");assertTrue(m1.equals(m2));assertTrue(m2.equals(m1));m1.mapKeyToGroup(""K1"",""G1"");assertFalse(m1.equals(m2));m2.mapKeyToGroup(""K1"",""G1"");assertTrue(m1.equals(m2));}"
"org.jfree.data.junit.KeyToGroupMapTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){KeyToGroupMap m1=new KeyToGroupMap(""Test"");m1.mapKeyToGroup(""K1"",""G1"");KeyToGroupMap m2=null;try {m2=(KeyToGroupMap)m1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(m1 != m2);assertTrue(m1.getClass()== m2.getClass());assertTrue(m1.equals(m2));m1.mapKeyToGroup(""K1"",""G2"");assertFalse(m1.equals(m2));m2.mapKeyToGroup(""K1"",""G2"");assertTrue(m1.equals(m2));}"
"org.jfree.data.junit.KeyToGroupMapTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){KeyToGroupMap m1=new KeyToGroupMap(""Test"");KeyToGroupMap m2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(m1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));m2=(KeyToGroupMap)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(m1,m2);}"
"org.jfree.chart.junit.WaterfallChartTests.testDrawWithNullInfo",0,"/** * Draws the chart with a null info object to make sure that no exceptions  are thrown (a problem that was occurring at one point).*/public void testDrawWithNullInfo(){boolean success=false;try {BufferedImage image=new BufferedImage(200,100,BufferedImage.TYPE_INT_RGB);Graphics2D g2=image.createGraphics();this.chart.draw(g2,new Rectangle2D.Double(0,0,200,100),null,null);g2.dispose();success=true;}catch(Exception e){success=false;}assertTrue(success);}"
"org.jfree.chart.junit.WaterfallChartTests.testSetSeriesToolTipGenerator",0,"/** * Check that setting a tool tip generator for a series does override the default generator.*/public void testSetSeriesToolTipGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryToolTipGenerator tt=new StandardCategoryToolTipGenerator();renderer.setSeriesToolTipGenerator(0,tt);CategoryToolTipGenerator tt2=renderer.getToolTipGenerator(0,0);assertTrue(tt2 == tt);}"
"org.jfree.chart.junit.WaterfallChartTests.testSetSeriesURLGenerator",0,"/** * Check that setting a URL generator for a series does override the default generator.*/public void testSetSeriesURLGenerator(){CategoryPlot plot=(CategoryPlot)this.chart.getPlot();CategoryItemRenderer renderer=plot.getRenderer();StandardCategoryURLGenerator url1=new StandardCategoryURLGenerator();renderer.setSeriesURLGenerator(0,url1);CategoryURLGenerator url2=renderer.getURLGenerator(0,0);assertTrue(url2 == url1);}"
"org.jfree.chart.axis.junit.MonthDateFormatTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){MonthDateFormat mf1=new MonthDateFormat();MonthDateFormat mf2=new MonthDateFormat();assertTrue(mf1.equals(mf2));assertTrue(mf2.equals(mf1));boolean[]showYear1=new boolean[12];showYear1[0]=true;boolean[]showYear2=new boolean[12];showYear1[1]=true;mf1=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.US,1,showYear1,new SimpleDateFormat(""yy""));assertFalse(mf1.equals(mf2));mf2=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.US,1,showYear1,new SimpleDateFormat(""yy""));assertTrue(mf1.equals(mf2));mf1=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,1,showYear1,new SimpleDateFormat(""yy""));assertFalse(mf1.equals(mf2));mf2=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,1,showYear1,new SimpleDateFormat(""yy""));assertTrue(mf1.equals(mf2));mf1=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,2,showYear1,new SimpleDateFormat(""yy""));assertFalse(mf1.equals(mf2));mf2=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,2,showYear1,new SimpleDateFormat(""yy""));assertTrue(mf1.equals(mf2));mf1=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,2,showYear2,new SimpleDateFormat(""yy""));assertFalse(mf1.equals(mf2));mf2=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,2,showYear2,new SimpleDateFormat(""yy""));assertTrue(mf1.equals(mf2));mf1=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,2,showYear2,new SimpleDateFormat(""yyyy""));assertFalse(mf1.equals(mf2));mf2=new MonthDateFormat(TimeZone.getTimeZone(""PST""),Locale.FRANCE,2,showYear2,new SimpleDateFormat(""yyyy""));assertTrue(mf1.equals(mf2));}"
"org.jfree.chart.axis.junit.MonthDateFormatTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){MonthDateFormat mf1=new MonthDateFormat();MonthDateFormat mf2=new MonthDateFormat();assertTrue(mf1.equals(mf2));int h1=mf1.hashCode();int h2=mf2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.MonthDateFormatTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){MonthDateFormat mf1=new MonthDateFormat();MonthDateFormat mf2=null;mf2=(MonthDateFormat)mf1.clone();assertTrue(mf1 != mf2);assertTrue(mf1.getClass()== mf2.getClass());assertTrue(mf1.equals(mf2));}"
"org.jfree.chart.axis.junit.MonthDateFormatTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){MonthDateFormat mf1=new MonthDateFormat();MonthDateFormat mf2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(mf1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));mf2=(MonthDateFormat)in.readObject();in.close();}catch(Exception e){fail(e.toString());}assertTrue(mf1.equals(mf2));}"
"org.jfree.chart.axis.junit.CategoryTickTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){Comparable c1=""C1"";Comparable c2=""C2"";TextBlock tb1=new TextBlock();tb1.addLine(new TextLine(""Block 1""));TextBlock tb2=new TextBlock();tb1.addLine(new TextLine(""Block 2""));TextBlockAnchor tba1=TextBlockAnchor.CENTER;TextBlockAnchor tba2=TextBlockAnchor.BOTTOM_CENTER;TextAnchor ta1=TextAnchor.CENTER;TextAnchor ta2=TextAnchor.BASELINE_LEFT;CategoryTick t1=new CategoryTick(c1,tb1,tba1,ta1,1.0f);CategoryTick t2=new CategoryTick(c1,tb1,tba1,ta1,1.0f);assertTrue(t1.equals(t2));t1=new CategoryTick(c2,tb1,tba1,ta1,1.0f);assertFalse(t1.equals(t2));t2=new CategoryTick(c2,tb1,tba1,ta1,1.0f);assertTrue(t1.equals(t2));t1=new CategoryTick(c2,tb2,tba1,ta1,1.0f);assertFalse(t1.equals(t2));t2=new CategoryTick(c2,tb2,tba1,ta1,1.0f);assertTrue(t1.equals(t2));t1=new CategoryTick(c2,tb2,tba2,ta1,1.0f);assertFalse(t1.equals(t2));t2=new CategoryTick(c2,tb2,tba2,ta1,1.0f);assertTrue(t1.equals(t2));t1=new CategoryTick(c2,tb2,tba2,ta2,1.0f);assertFalse(t1.equals(t2));t2=new CategoryTick(c2,tb2,tba2,ta2,1.0f);assertTrue(t1.equals(t2));t1=new CategoryTick(c2,tb2,tba2,ta2,2.0f);assertFalse(t1.equals(t2));t2=new CategoryTick(c2,tb2,tba2,ta2,2.0f);assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.CategoryTickTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){Comparable c1=""C1"";TextBlock tb1=new TextBlock();tb1.addLine(new TextLine(""Block 1""));tb1.addLine(new TextLine(""Block 2""));TextBlockAnchor tba1=TextBlockAnchor.CENTER;TextAnchor ta1=TextAnchor.CENTER;CategoryTick t1=new CategoryTick(c1,tb1,tba1,ta1,1.0f);CategoryTick t2=new CategoryTick(c1,tb1,tba1,ta1,1.0f);assertTrue(t1.equals(t2));int h1=t1.hashCode();int h2=t2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.axis.junit.CategoryTickTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CategoryTick t1=new CategoryTick(""C1"",new TextBlock(),TextBlockAnchor.CENTER,TextAnchor.CENTER,1.5f);CategoryTick t2=null;try {t2=(CategoryTick)t1.clone();}catch(CloneNotSupportedException e){System.err.println(""Failed to clone."");}assertTrue(t1 != t2);assertTrue(t1.getClass()== t2.getClass());assertTrue(t1.equals(t2));}"
"org.jfree.chart.axis.junit.CategoryTickTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CategoryTick t1=new CategoryTick(""C1"",new TextBlock(),TextBlockAnchor.CENTER,TextAnchor.CENTER,1.5f);CategoryTick t2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(t1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));t2=(CategoryTick)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertEquals(t1,t2);}"
"org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testGenerateLabel",0,"/** * Some checks for the generalLabel()method.*/public void testGenerateLabel(){StandardXYSeriesLabelGenerator g=new StandardXYSeriesLabelGenerator(""Series {0}"");XYSeriesCollection dataset=new XYSeriesCollection();dataset.addSeries(new XYSeries(""1""));dataset.addSeries(new XYSeries(""2""));assertEquals(""Series 1"",g.generateLabel(dataset,0));assertEquals(""Series 2"",g.generateLabel(dataset,1));}"
"org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){StandardXYSeriesLabelGenerator g1=new StandardXYSeriesLabelGenerator(""Series {0}"");StandardXYSeriesLabelGenerator g2=new StandardXYSeriesLabelGenerator(""Series {0}"");assertTrue(g1.equals(g2));assertTrue(g2.equals(g1));g1=new StandardXYSeriesLabelGenerator(""{1}"");assertFalse(g1.equals(g2));g2=new StandardXYSeriesLabelGenerator(""{1}"");assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){StandardXYSeriesLabelGenerator g1=new StandardXYSeriesLabelGenerator(""Series {0}"");StandardXYSeriesLabelGenerator g2=null;try {g2=(StandardXYSeriesLabelGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));}"
"org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){StandardXYSeriesLabelGenerator g1=new StandardXYSeriesLabelGenerator(""Series {0}"");StandardXYSeriesLabelGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(StandardXYSeriesLabelGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.block.junit.RectangleConstraintTests.testCalculateConstrainedSize",0,"/** * Run some checks on the constrained size calculation.*/public void testCalculateConstrainedSize(){Size2D s;RectangleConstraint c1=RectangleConstraint.NONE;s=c1.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,3.4,EPSILON);RectangleConstraint c2=new RectangleConstraint(0.0,new Range(0.0,0.0),LengthConstraintType.NONE,0.0,new Range(2.0,3.0),LengthConstraintType.RANGE);s=c2.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,3.0,EPSILON);RectangleConstraint c3=new RectangleConstraint(0.0,null,LengthConstraintType.NONE,9.9,null,LengthConstraintType.FIXED);s=c3.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,9.9,EPSILON);RectangleConstraint c4=new RectangleConstraint(0.0,new Range(2.0,3.0),LengthConstraintType.RANGE,0.0,new Range(0.0,0.0),LengthConstraintType.NONE);s=c4.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,2.0,EPSILON);assertEquals(s.height,3.4,EPSILON);RectangleConstraint c5=new RectangleConstraint(0.0,new Range(2.0,3.0),LengthConstraintType.RANGE,0.0,new Range(2.0,3.0),LengthConstraintType.RANGE);s=c5.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,2.0,EPSILON);assertEquals(s.height,3.0,EPSILON);RectangleConstraint c6=new RectangleConstraint(0.0,null,LengthConstraintType.NONE,9.9,null,LengthConstraintType.FIXED);s=c6.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,9.9,EPSILON);RectangleConstraint c7=RectangleConstraint.NONE;s=c7.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,3.4,EPSILON);RectangleConstraint c8=new RectangleConstraint(0.0,new Range(0.0,0.0),LengthConstraintType.NONE,0.0,new Range(2.0,3.0),LengthConstraintType.RANGE);s=c8.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,3.0,EPSILON);RectangleConstraint c9=new RectangleConstraint(0.0,null,LengthConstraintType.NONE,9.9,null,LengthConstraintType.FIXED);s=c9.calculateConstrainedSize(new Size2D(1.2,3.4));assertEquals(s.width,1.2,EPSILON);assertEquals(s.height,9.9,EPSILON);}"
"org.jfree.data.statistics.junit.RegressionTests.testOLSRegression1a",0,"/** * Checks the results of an OLS regression on sample dataset 1.*/public void testOLSRegression1a(){double[][]data=createSampleData1();double[]result1=Regression.getOLSRegression(data);assertEquals(.25680930,result1[0],0.0000001);assertEquals(0.72792106,result1[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testOLSRegression1b",0,"/** * Checks the results of an OLS regression on sample dataset 1 AFTER  converting it to an XYSeries.*/public void testOLSRegression1b(){double[][]data=createSampleData1();XYSeries series=new XYSeries(""Test"");for (int i=0;i < 11;i++){series.add(data[i][0],data[i][1]);}XYDataset ds=new XYSeriesCollection(series);double[]result2=Regression.getOLSRegression(ds,0);assertEquals(.25680930,result2[0],0.0000001);assertEquals(0.72792106,result2[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testPowerRegression1a",0,"/** * Checks the results of a power regression on sample dataset 1.*/public void testPowerRegression1a(){double[][]data=createSampleData1();double[]result=Regression.getPowerRegression(data);assertEquals(0.91045813,result[0],0.0000001);assertEquals(0.88918346,result[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testPowerRegression1b",0,"/** * Checks the results of a power regression on sample dataset 1 AFTER  converting it to an XYSeries.*/public void testPowerRegression1b(){double[][]data=createSampleData1();XYSeries series=new XYSeries(""Test"");for (int i=0;i < 11;i++){series.add(data[i][0],data[i][1]);}XYDataset ds=new XYSeriesCollection(series);double[]result=Regression.getPowerRegression(ds,0);assertEquals(0.91045813,result[0],0.0000001);assertEquals(0.88918346,result[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testOLSRegression2a",0,"/** * Checks the results of an OLS regression on sample dataset 2.*/public void testOLSRegression2a(){double[][]data=createSampleData2();double[]result=Regression.getOLSRegression(data);assertEquals(53.9729697,result[0],0.0000001);assertEquals(-4.1823030,result[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testOLSRegression2b",0,"/** * Checks the results of an OLS regression on sample dataset 2 AFTER  converting it to an XYSeries.*/public void testOLSRegression2b(){double[][]data=createSampleData2();XYSeries series=new XYSeries(""Test"");for (int i=0;i < 10;i++){series.add(data[i][0],data[i][1]);}XYDataset ds=new XYSeriesCollection(series);double[]result=Regression.getOLSRegression(ds,0);assertEquals(53.9729697,result[0],0.0000001);assertEquals(-4.1823030,result[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testPowerRegression2a",0,"/** * Checks the results of a power regression on sample dataset 2.*/public void testPowerRegression2a(){double[][]data=createSampleData2();double[]result=Regression.getPowerRegression(data);assertEquals(106.1241681,result[0],0.0000001);assertEquals(-0.8466615,result[1],0.0000001);}"
"org.jfree.data.statistics.junit.RegressionTests.testPowerRegression2b",0,"/** * Checks the results of a power regression on sample dataset 2 AFTER  converting it to an XYSeries.*/public void testPowerRegression2b(){double[][]data=createSampleData2();XYSeries series=new XYSeries(""Test"");for (int i=0;i < 10;i++){series.add(data[i][0],data[i][1]);}XYDataset ds=new XYSeriesCollection(series);double[]result=Regression.getPowerRegression(ds,0);assertEquals(106.1241681,result[0],0.0000001);assertEquals(-0.8466615,result[1],0.0000001);}"
"org.jfree.chart.urls.junit.CustomPieURLGeneratorTests.testEquals",0,"/** * Some checks for the equals()method.*/public void testEquals(){CustomPieURLGenerator g1=new CustomPieURLGenerator();CustomPieURLGenerator g2=new CustomPieURLGenerator();assertTrue(g1.equals(g2));Map m1=new HashMap();m1.put(""A"",""http://www.jfree.org/"");g1.addURLs(m1);assertFalse(g1.equals(g2));g2.addURLs(m1);assertTrue(g1.equals(g2));}"
"org.jfree.chart.urls.junit.CustomPieURLGeneratorTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){CustomPieURLGenerator g1=new CustomPieURLGenerator();Map m1=new HashMap();m1.put(""A"",""http://www.jfree.org/"");g1.addURLs(m1);CustomPieURLGenerator g2=null;try {g2=(CustomPieURLGenerator)g1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(g1 != g2);assertTrue(g1.getClass()== g2.getClass());assertTrue(g1.equals(g2));Map m2=new HashMap();m2.put(""B"",""XYZ"");g1.addURLs(m2);assertFalse(g1.equals(g2));}"
"org.jfree.chart.urls.junit.CustomPieURLGeneratorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){CustomPieURLGenerator g1=new CustomPieURLGenerator();Map m1=new HashMap();m1.put(""A"",""http://www.jfree.org/"");g1.addURLs(m1);CustomPieURLGenerator g2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(g1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));g2=(CustomPieURLGenerator)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(g1,g2);}"
"org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testEquals",0,"/** * Confirm that the equals method can distinguish all the required fields.*/public void testEquals(){XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);XYBoxAnnotation a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);assertTrue(a1.equals(a2));assertTrue(a2.equals(a1));a1=new XYBoxAnnotation(2.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);assertFalse(a1.equals(a2));a2=new XYBoxAnnotation(2.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);assertTrue(a1.equals(a2));a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),Color.red,Color.blue);assertFalse(a1.equals(a2));a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),Color.red,Color.blue);assertTrue(a1.equals(a2));GradientPaint gp1a=new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red);GradientPaint gp1b=new GradientPaint(1.0f,2.0f,Color.blue,3.0f,4.0f,Color.red);GradientPaint gp2a=new GradientPaint(5.0f,6.0f,Color.pink,7.0f,8.0f,Color.white);GradientPaint gp2b=new GradientPaint(5.0f,6.0f,Color.pink,7.0f,8.0f,Color.white);a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1a,Color.blue);assertFalse(a1.equals(a2));a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1b,Color.blue);assertTrue(a1.equals(a2));a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1a,gp2a);assertFalse(a1.equals(a2));a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(2.3f),gp1b,gp2b);assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testHashCode",0,"/** * Two objects that are equal are required to return the same hashCode. */public void testHashCode(){XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);XYBoxAnnotation a2=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);assertTrue(a1.equals(a2));int h1=a1.hashCode();int h2=a2.hashCode();assertEquals(h1,h2);}"
"org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testCloning",0,"/** * Confirm that cloning works.*/public void testCloning(){XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);XYBoxAnnotation a2=null;try {a2=(XYBoxAnnotation)a1.clone();}catch(CloneNotSupportedException e){e.printStackTrace();}assertTrue(a1 != a2);assertTrue(a1.getClass()== a2.getClass());assertTrue(a1.equals(a2));}"
"org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for equality.*/public void testSerialization(){XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);XYBoxAnnotation a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(XYBoxAnnotation)in.readObject();in.close();}catch(Exception e){e.printStackTrace();}assertEquals(a1,a2);}"
"org.jfree.chart.annotations.junit.XYBoxAnnotationTests.testDrawWithNullInfo",0,"/** * Draws the chart with a <code>null</code> info object to make sure that  no exceptions are thrown.*/public void testDrawWithNullInfo(){boolean success=false;try {DefaultTableXYDataset dataset=new DefaultTableXYDataset();XYSeries s1=new XYSeries(""Series 1"",true,false);s1.add(5.0,5.0);s1.add(10.0,15.5);s1.add(15.0,9.5);s1.add(20.0,7.5);dataset.addSeries(s1);XYSeries s2=new XYSeries(""Series 2"",true,false);s2.add(5.0,5.0);s2.add(10.0,15.5);s2.add(15.0,9.5);s2.add(20.0,3.5);dataset.addSeries(s2);XYPlot plot=new XYPlot(dataset,new NumberAxis(""X""),new NumberAxis(""Y""),new XYLineAndShapeRenderer());plot.addAnnotation(new XYBoxAnnotation(10.0,12.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue));JFreeChart chart=new JFreeChart(plot);chart.createBufferedImage(300,200,null);success=true;}catch(NullPointerException e){e.printStackTrace();success=false;}assertTrue(success);}"
"org.jfree.data.time.junit.TimePeriodAnchorTests.testEquals",0,"/** * Test the equals()method.*/public void testEquals(){assertTrue(TimePeriodAnchor.START.equals(TimePeriodAnchor.START));assertTrue(TimePeriodAnchor.MIDDLE.equals(TimePeriodAnchor.MIDDLE));assertTrue(TimePeriodAnchor.END.equals(TimePeriodAnchor.END));}"
"org.jfree.data.time.junit.TimePeriodAnchorTests.testSerialization",0,"/** * Serialize an instance,restore it,and check for identity.*/public void testSerialization(){TimePeriodAnchor a1=TimePeriodAnchor.START;TimePeriodAnchor a2=null;try {ByteArrayOutputStream buffer=new ByteArrayOutputStream();ObjectOutput out=new ObjectOutputStream(buffer);out.writeObject(a1);out.close();ObjectInput in=new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));a2=(TimePeriodAnchor)in.readObject();in.close();}catch(Exception e){System.out.println(e.toString());}assertTrue(a1 == a2);}"
