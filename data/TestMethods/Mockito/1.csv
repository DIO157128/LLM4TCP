test_case,faulty,test_code
"org.mockitousage.matchers.AssertingMatchersTest.shouldUseCustomCharMatcher1",0,"@Test public void shouldUseCustomCharMatcher1(){mock.simpleMethod(new Article(12,""Fabulous article""));Article articleOnPage12=argThat(new ArgumentMatcher<Article>(){public boolean matches(Object argument){Article o=(Article)argument;assertEquals(12,o.getPageNumber());return true;}});verify(mock).simpleMethod(articleOnPage12);}"
"org.mockito.internal.util.MockUtilTest.shouldValidate",0,"@Test public void shouldValidate(){assertFalse(creationValidator.extraInterfacesValidated);assertFalse(creationValidator.typeValidated);mockUtil.createMock(IMethods.class,new ThreadSafeMockingProgress(),new MockSettingsImpl());assertTrue(creationValidator.extraInterfacesValidated);assertTrue(creationValidator.typeValidated);}"
"org.mockito.internal.util.MockUtilTest.shouldGetHandler",0,"@Test public void shouldGetHandler(){List mock=Mockito.mock(List.class);assertNotNull(mockUtil.getMockHandler(mock));}"
"org.mockito.internal.util.MockUtilTest.shouldScreamWhenEnhancedButNotAMockPassed",0,"@Test public void shouldScreamWhenEnhancedButNotAMockPassed(){Object o=Enhancer.create(ArrayList.class,NoOp.INSTANCE);try {mockUtil.getMockHandler(o);fail();}catch(NotAMockException e){}}"
"org.mockito.internal.util.MockUtilTest.shouldScreamWhenNotAMockPassed",0,"@Test(expected=NotAMockException.class)public void shouldScreamWhenNotAMockPassed(){mockUtil.getMockHandler("""");}"
"org.mockito.internal.util.MockUtilTest.shouldScreamWhenNullPassed",0,"@Test(expected=MockitoException.class)public void shouldScreamWhenNullPassed(){mockUtil.getMockHandler(null);}"
"org.mockito.internal.util.MockUtilTest.shouldValidateMock",0,"@Test public void shouldValidateMock(){assertFalse(mockUtil.isMock(""i mock a mock""));assertTrue(mockUtil.isMock(Mockito.mock(List.class)));}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubWithThrowable",0,"@Test public void shouldStubWithThrowable()throws Exception {IllegalArgumentException expected=new IllegalArgumentException(""thrown by mock"");when(mock.add(""throw"")).thenThrow(expected);try {mock.add(""throw"");fail();}catch(IllegalArgumentException e){assertEquals(expected,e);}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldSetThrowableToVoidMethod",0,"@Test public void shouldSetThrowableToVoidMethod()throws Exception {IllegalArgumentException expected=new IllegalArgumentException(""thrown by mock"");stubVoid(mock).toThrow(expected).on().clear();try {mock.clear();fail();}catch(Exception e){assertEquals(expected,e);}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldLastStubbingVoidBeImportant",0,"@Test public void shouldLastStubbingVoidBeImportant()throws Exception {stubVoid(mock).toThrow(new ExceptionOne()).on().clear();stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();try {mock.clear();fail();}catch(ExceptionTwo e){}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation",0,"@Test public void shouldFailStubbingThrowableOnTheSameInvocationDueToAcceptableLimitation()throws Exception {when(mock.get(1)).thenThrow(new ExceptionOne());try {when(mock.get(1)).thenThrow(new ExceptionTwo());fail();}catch(ExceptionOne e){}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldAllowSettingCheckedException",0,"@Test public void shouldAllowSettingCheckedException()throws Exception {Reader reader=mock(Reader.class);IOException ioException=new IOException();when(reader.read()).thenThrow(ioException);try {reader.read();fail();}catch(Exception e){assertEquals(ioException,e);}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldAllowSettingError",0,"@Test public void shouldAllowSettingError()throws Exception {Error error=new Error();when(mock.add(""quake"")).thenThrow(error);try {mock.add(""quake"");fail();}catch(Error e){assertEquals(error,e);}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingInvalidCheckedException",0,"@Test(expected=MockitoException.class)public void shouldNotAllowSettingInvalidCheckedException()throws Exception {when(mock.add(""monkey island"")).thenThrow(new Exception());}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldNotAllowSettingNullThrowable",0,"@Test(expected=MockitoException.class)public void shouldNotAllowSettingNullThrowable()throws Exception {when(mock.add(""monkey island"")).thenThrow(null);}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldMixThrowablesAndReturnsOnDifferentMocks",0,"@Test public void shouldMixThrowablesAndReturnsOnDifferentMocks()throws Exception {when(mock.add(""ExceptionOne"")).thenThrow(new ExceptionOne());when(mock.getLast()).thenReturn(""last"");stubVoid(mock).toThrow(new ExceptionTwo()).on().clear();stubVoid(mockTwo).toThrow(new ExceptionThree()).on().clear();when(mockTwo.containsValue(""ExceptionFour"")).thenThrow(new ExceptionFour());when(mockTwo.get(""Are you there?"")).thenReturn(""Yes!"");assertNull(mockTwo.get(""foo""));assertTrue(mockTwo.keySet().isEmpty());assertEquals(""Yes!"",mockTwo.get(""Are you there?""));try {mockTwo.clear();fail();}catch(ExceptionThree e){}try {mockTwo.containsValue(""ExceptionFour"");fail();}catch(ExceptionFour e){}assertNull(mock.getFirst());assertEquals(""last"",mock.getLast());try {mock.add(""ExceptionOne"");fail();}catch(ExceptionOne e){}try {mock.clear();fail();}catch(ExceptionTwo e){}}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubbingWithThrowableBeVerifiable",0,"@Test public void shouldStubbingWithThrowableBeVerifiable(){when(mock.size()).thenThrow(new RuntimeException());stubVoid(mock).toThrow(new RuntimeException()).on().clone();try {mock.size();fail();}catch(RuntimeException e){}try {mock.clone();fail();}catch(RuntimeException e){}verify(mock).size();verify(mock).clone();verifyNoMoreInteractions(mock);}"
"org.mockitousage.stubbing.StubbingWithThrowablesTest.shouldStubbingWithThrowableFailVerification",0,"@Test public void shouldStubbingWithThrowableFailVerification(){when(mock.size()).thenThrow(new RuntimeException());stubVoid(mock).toThrow(new RuntimeException()).on().clone();verifyZeroInteractions(mock);mock.add(""test"");try {verify(mock).size();fail();}catch(WantedButNotInvoked e){}try {verify(mock).clone();fail();}catch(WantedButNotInvoked e){}try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldFilterOutCglibGarbage",0,"@Test public void shouldFilterOutCglibGarbage(){StackTraceElement[]t=new TraceBuilder().classes(""MockitoExampleTest"",""List$$EnhancerByMockitoWithCGLIB$$2c406024"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,false);assertThat(filtered,hasOnlyThoseClasses(""MockitoExampleTest""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldFilterOutMockitoPackage",0,"@Test public void shouldFilterOutMockitoPackage(){StackTraceElement[]t=new TraceBuilder().classes(""org.test.MockitoSampleTest"",""org.mockito.Mockito"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,false);assertThat(filtered,hasOnlyThoseClasses(""org.test.MockitoSampleTest""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldFilterOutTracesMiddleBadTraces",0,"@Test public void shouldFilterOutTracesMiddleBadTraces(){StackTraceElement[]t=new TraceBuilder().classes(""org.test.MockitoSampleTest"",""org.test.TestSupport"",""org.mockito.Mockito"",""org.test.TestSupport"",""org.mockito.Mockito"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,false);assertThat(filtered,hasOnlyThoseClasses(""org.test.TestSupport"",""org.test.MockitoSampleTest""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldKeepRunners",0,"@Test public void shouldKeepRunners(){StackTraceElement[]t=new TraceBuilder().classes(""org.mockito.runners.Runner"",""junit.stuff"",""org.test.MockitoSampleTest"",""org.mockito.Mockito"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,false);assertThat(filtered,hasOnlyThoseClasses(""org.test.MockitoSampleTest"",""junit.stuff"",""org.mockito.runners.Runner""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldKeepInternalRunners",0,"@Test public void shouldKeepInternalRunners(){StackTraceElement[]t=new TraceBuilder().classes(""org.mockito.internal.runners.Runner"",""org.test.MockitoSampleTest"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,false);assertThat(filtered,hasOnlyThoseClasses(""org.test.MockitoSampleTest"",""org.mockito.internal.runners.Runner""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldStartFilteringAndKeepTop",0,"@Test public void shouldStartFilteringAndKeepTop(){StackTraceElement[]t=new TraceBuilder().classes(""org.test.Good"",""org.mockito.internal.Bad"",""org.test.MockitoSampleTest"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,true);assertThat(filtered,hasOnlyThoseClasses(""org.test.MockitoSampleTest"",""org.test.Good""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions",0,"@Test public void shouldKeepGoodTraceFromTheTopBecauseRealImplementationsOfSpiesSometimesThrowExceptions(){StackTraceElement[]t=new TraceBuilder().classes(""org.good.Trace"",""org.yet.another.good.Trace"",""org.mockito.internal.to.be.Filtered"",""org.test.MockitoSampleTest"").toTraceArray();StackTraceElement[]filtered=filter.filter(t,true);assertThat(filtered,hasOnlyThoseClasses(""org.test.MockitoSampleTest"",""org.yet.another.good.Trace"",""org.good.Trace""));}"
"org.mockito.internal.exceptions.base.StackTraceFilterTest.shouldReturnEmptyArrayWhenInputIsEmpty",0,"@Test public void shouldReturnEmptyArrayWhenInputIsEmpty()throws Exception {StackTraceElement[]filtered=filter.filter(new StackTraceElement[0],false);assertEquals(0,filtered.length);}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValues",0,"@Test public void shouldReturnConsecutiveValues()throws Exception {when(mock.simpleMethod()).thenReturn(""one"").thenReturn(""two"").thenReturn(""three"");assertEquals(""one"",mock.simpleMethod());assertEquals(""two"",mock.simpleMethod());assertEquals(""three"",mock.simpleMethod());assertEquals(""three"",mock.simpleMethod());assertEquals(""three"",mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValuesForTwoNulls",0,"@SuppressWarnings(""all"")@Test public void shouldReturnConsecutiveValuesForTwoNulls()throws Exception {when(mock.simpleMethod()).thenReturn(null,null);assertNull(mock.simpleMethod());assertNull(mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValuesSetByShortenThenReturnMethod",0,"@Test public void shouldReturnConsecutiveValuesSetByShortenThenReturnMethod()throws Exception {when(mock.simpleMethod()).thenReturn(""one"",""two"",""three"");assertEquals(""one"",mock.simpleMethod());assertEquals(""two"",mock.simpleMethod());assertEquals(""three"",mock.simpleMethod());assertEquals(""three"",mock.simpleMethod());assertEquals(""three"",mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods",0,"@Test public void shouldReturnConsecutiveValueAndThrowExceptionssSetByShortenReturnMethods()throws Exception {when(mock.simpleMethod()).thenReturn(""zero"").thenReturn(""one"",""two"").thenThrow(new NullPointerException(),new RuntimeException()).thenReturn(""three"").thenThrow(new IllegalArgumentException());assertEquals(""zero"",mock.simpleMethod());assertEquals(""one"",mock.simpleMethod());assertEquals(""two"",mock.simpleMethod());try {mock.simpleMethod();fail();}catch(NullPointerException e){}try {mock.simpleMethod();fail();}catch(RuntimeException e){}assertEquals(""three"",mock.simpleMethod());try {mock.simpleMethod();fail();}catch(IllegalArgumentException e){}}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldThrowConsecutively",0,"@Test public void shouldThrowConsecutively()throws Exception {when(mock.simpleMethod()).thenThrow(new RuntimeException()).thenThrow(new IllegalArgumentException()).thenThrow(new NullPointerException());try {mock.simpleMethod();fail();}catch(RuntimeException e){}try {mock.simpleMethod();fail();}catch(IllegalArgumentException e){}try {mock.simpleMethod();fail();}catch(NullPointerException e){}try {mock.simpleMethod();fail();}catch(NullPointerException e){}}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldThrowConsecutivelySetByShortenThenThrowMethod",0,"@Test public void shouldThrowConsecutivelySetByShortenThenThrowMethod()throws Exception {when(mock.simpleMethod()).thenThrow(new RuntimeException(),new IllegalArgumentException(),new NullPointerException());try {mock.simpleMethod();fail();}catch(RuntimeException e){}try {mock.simpleMethod();fail();}catch(IllegalArgumentException e){}try {mock.simpleMethod();fail();}catch(NullPointerException e){}try {mock.simpleMethod();fail();}catch(NullPointerException e){}}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldMixConsecutiveReturnsWithExcepions",0,"@Test public void shouldMixConsecutiveReturnsWithExcepions()throws Exception {when(mock.simpleMethod()).thenThrow(new IllegalArgumentException()).thenReturn(""one"").thenThrow(new NullPointerException()).thenReturn(null);try {mock.simpleMethod();fail();}catch(IllegalArgumentException e){}assertEquals(""one"",mock.simpleMethod());try {mock.simpleMethod();fail();}catch(NullPointerException e){}assertEquals(null,mock.simpleMethod());assertEquals(null,mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldValidateConsecutiveException",0,"@Test(expected=MockitoException.class)public void shouldValidateConsecutiveException()throws Exception {when(mock.simpleMethod()).thenReturn(""one"").thenThrow(new Exception());}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldStubVoidMethodAndContinueThrowing",0,"@Test public void shouldStubVoidMethodAndContinueThrowing()throws Exception {stubVoid(mock).toThrow(new IllegalArgumentException()).toReturn().toThrow(new NullPointerException()).on().voidMethod();try {mock.voidMethod();fail();}catch(IllegalArgumentException e){}mock.voidMethod();try {mock.voidMethod();fail();}catch(NullPointerException e){}try {mock.voidMethod();fail();}catch(NullPointerException e){}}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldStubVoidMethod",0,"@Test public void shouldStubVoidMethod()throws Exception {stubVoid(mock).toReturn().toThrow(new NullPointerException()).toReturn().on().voidMethod();mock.voidMethod();try {mock.voidMethod();fail();}catch(NullPointerException e){}mock.voidMethod();mock.voidMethod();}"
"org.mockitousage.stubbing.StubbingConsecutiveAnswersTest.shouldValidateConsecutiveExceptionForVoidMethod",0,"@Test(expected=MockitoException.class)public void shouldValidateConsecutiveExceptionForVoidMethod()throws Exception {stubVoid(mock).toReturn().toThrow(new Exception()).on().voidMethod();}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.shouldPointToTooManyInvocationsChunkOnError",0,"@Test public void shouldPointToTooManyInvocationsChunkOnError(){try {verify(mock,times(0)).simpleMethod(1);fail();}catch(NeverWantedButInvoked e){assertContains(""first("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationTest.shouldNotPointStackTracesToRunnersCode",0,"@Test public void shouldNotPointStackTracesToRunnersCode(){try {verify(mock,times(0)).simpleMethod(1);fail();}catch(NeverWantedButInvoked e){assertNotContains("".runners."",e.getMessage());}}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldStubStringVarargs",0,"@SuppressWarnings(""deprecation"")@Test public void shouldStubStringVarargs(){when(mock.withStringVarargsReturningString(1)).thenReturn(""1"");when(mock.withStringVarargsReturningString(2,""1"",""2"",""3"")).thenReturn(""2"");RuntimeException expected=new RuntimeException();stubVoid(mock).toThrow(expected).on().withStringVarargs(3,""1"",""2"",""3"",""4"");assertEquals(""1"",mock.withStringVarargsReturningString(1));assertEquals(null,mock.withStringVarargsReturningString(2));assertEquals(""2"",mock.withStringVarargsReturningString(2,""1"",""2"",""3""));assertEquals(null,mock.withStringVarargsReturningString(2,""1"",""2""));assertEquals(null,mock.withStringVarargsReturningString(2,""1"",""2"",""3"",""4""));assertEquals(null,mock.withStringVarargsReturningString(2,""1"",""2"",""9999""));mock.withStringVarargs(3,""1"",""2"",""3"",""9999"");mock.withStringVarargs(9999,""1"",""2"",""3"",""4"");try {mock.withStringVarargs(3,""1"",""2"",""3"",""4"");fail();}catch(Exception e){assertEquals(expected,e);}}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldStubBooleanVarargs",0,"@Test public void shouldStubBooleanVarargs(){when(mock.withBooleanVarargs(1)).thenReturn(true);when(mock.withBooleanVarargs(1,true,false)).thenReturn(true);assertEquals(true,mock.withBooleanVarargs(1));assertEquals(false,mock.withBooleanVarargs(9999));assertEquals(true,mock.withBooleanVarargs(1,true,false));assertEquals(false,mock.withBooleanVarargs(1,true,false,true));assertEquals(false,mock.withBooleanVarargs(2,true,false));assertEquals(false,mock.withBooleanVarargs(1,true));assertEquals(false,mock.withBooleanVarargs(1,false,false));}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyStringVarargs",0,"@Test public void shouldVerifyStringVarargs(){mock.withStringVarargs(1);mock.withStringVarargs(2,""1"",""2"",""3"");mock.withStringVarargs(3,""1"",""2"",""3"",""4"");verify(mock).withStringVarargs(1);verify(mock).withStringVarargs(2,""1"",""2"",""3"");try {verify(mock).withStringVarargs(2,""1"",""2"",""79"",""4"");fail();}catch(ArgumentsAreDifferent e){}}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyObjectVarargs",0,"@Test public void shouldVerifyObjectVarargs(){mock.withObjectVarargs(1);mock.withObjectVarargs(2,""1"",new ArrayList<Object>(),new Integer(1));mock.withObjectVarargs(3,new Integer(1));verify(mock).withObjectVarargs(1);verify(mock).withObjectVarargs(2,""1"",new ArrayList<Object>(),new Integer(1));try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyBooleanVarargs",0,"@Test public void shouldVerifyBooleanVarargs(){mock.withBooleanVarargs(1);mock.withBooleanVarargs(2,true,false,true);mock.withBooleanVarargs(3,true,true,true);verify(mock).withBooleanVarargs(1);verify(mock).withBooleanVarargs(2,true,false,true);try {verify(mock).withBooleanVarargs(3,true,true,true,true);fail();}catch(ArgumentsAreDifferent e){}}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithAnyObject",0,"@Test public void shouldVerifyWithAnyObject(){Foo foo=Mockito.mock(Foo.class);foo.varArgs("""");Mockito.verify(foo).varArgs((String[])Mockito.anyObject());Mockito.verify(foo).varArgs((String)Mockito.anyObject());}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldVerifyWithNullVarArgArray",0,"@Test public void shouldVerifyWithNullVarArgArray(){Foo foo=Mockito.mock(Foo.class);foo.varArgs((String[])null);Mockito.verify(foo).varArgs((String[])Mockito.anyObject());Mockito.verify(foo).varArgs((String[])null);}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldStubCorrectlyWhenMixedVarargsUsed",0,"@SuppressWarnings(""all"")@Test public void shouldStubCorrectlyWhenMixedVarargsUsed(){MixedVarargs mixedVarargs=mock(MixedVarargs.class);when(mixedVarargs.doSomething(""hello"",null)).thenReturn(""hello"");when(mixedVarargs.doSomething(""goodbye"",null)).thenReturn(""goodbye"");String result=mixedVarargs.doSomething(""hello"",null);assertEquals(""hello"",result);verify(mixedVarargs).doSomething(""hello"",null);}"
"org.mockitousage.basicapi.UsingVarargsTest.shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed",0,"@SuppressWarnings(""all"")@Test public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed(){MixedVarargs mixedVarargs=mock(MixedVarargs.class);when(mixedVarargs.doSomething(""one"",""two"",null)).thenReturn(""hello"");when(mixedVarargs.doSomething(""1"",""2"",null)).thenReturn(""goodbye"");String result=mixedVarargs.doSomething(""one"",""two"",null);assertEquals(""hello"",result);}"
"org.mockitousage.matchers.GenericMatchersTest.shouldCompile",0,"@SuppressWarnings(""unchecked"")@Test public void shouldCompile(){when(sorter.convertDate(new Date())).thenReturn(""one"");when(sorter.convertDate((Date)anyObject())).thenReturn(""two"");when(sorter.sort(anyList())).thenReturn(null);}"
"org.mockito.exceptions.base.MockitoAssertionErrorTest.shouldKeepUnfilteredStackTrace",0,"@Test public void shouldKeepUnfilteredStackTrace(){try {throwIt();fail();}catch(MockitoAssertionError e){assertEquals(""throwIt"",e.getUnfilteredStackTrace()[0].getMethodName());}}"
"org.mockito.internal.invocation.InvocationTest.shouldKnowIfIsEqualTo",0,"@Test public void shouldKnowIfIsEqualTo(){Invocation equal=new InvocationBuilder().args("" "").mock(""mock"").toInvocation();Invocation nonEqual=new InvocationBuilder().args(""X"").mock(""mock"").toInvocation();Invocation withNewStringInstance=new InvocationBuilder().args(new String("" "")).mock(""mock"").toInvocation();assertFalse(invocation.equals(null));assertFalse(invocation.equals(""""));assertTrue(invocation.equals(equal));assertFalse(invocation.equals(nonEqual));assertTrue(invocation.equals(withNewStringInstance));}"
"org.mockito.internal.invocation.InvocationTest.shouldEqualToNotConsiderSequenceNumber",0,"@Test public void shouldEqualToNotConsiderSequenceNumber(){Invocation equal=new InvocationBuilder().args("" "").mock(""mock"").seq(2).toInvocation();assertTrue(invocation.equals(equal));assertTrue(invocation.getSequenceNumber()!= equal.getSequenceNumber());}"
"org.mockito.internal.invocation.InvocationTest.shouldNotBeACitizenOfHashes",0,"@Test public void shouldNotBeACitizenOfHashes(){Map map=new HashMap();try {map.put(invocation,""one"");fail();}catch(RuntimeException e){assertEquals(""hashCode()is not implemented"",e.getMessage());}}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintMethodName",0,"@Test public void shouldPrintMethodName(){invocation=new InvocationBuilder().toInvocation();assertEquals(""iMethods.simpleMethod();"",invocation.toString());}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintMethodArgs",0,"@Test public void shouldPrintMethodArgs(){invocation=new InvocationBuilder().args(""foo"").toInvocation();assertThat(invocation.toString(),endsWith(""simpleMethod(\""foo\"");""));}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintMethodIntegerArgAndString",0,"@Test public void shouldPrintMethodIntegerArgAndString(){invocation=new InvocationBuilder().args(""foo"",1).toInvocation();assertThat(invocation.toString(),endsWith(""simpleMethod(\""foo\"",1);""));}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintNull",0,"@Test public void shouldPrintNull(){invocation=new InvocationBuilder().args((String)null).toInvocation();assertThat(invocation.toString(),endsWith(""simpleMethod(null);""));}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintArray",0,"@Test public void shouldPrintArray(){invocation=new InvocationBuilder().method(""oneArray"").args(new int[]{1,2,3}).toInvocation();assertThat(invocation.toString(),endsWith(""oneArray([1,2,3]);""));}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintNullIfArrayIsNull",0,"@Test public void shouldPrintNullIfArrayIsNull()throws Exception {Method m=IMethods.class.getMethod(""oneArray"",Object[].class);invocation=new InvocationBuilder().method(m).args((Object)null).toInvocation();assertThat(invocation.toString(),endsWith(""oneArray(null);""));}"
"org.mockito.internal.invocation.InvocationTest.shouldPrintArgumentsInMultilinesWhenGetsTooBig",0,"@Test public void shouldPrintArgumentsInMultilinesWhenGetsTooBig(){invocation=new InvocationBuilder().args(""veeeeery long string that makes it ugly in one line"",1).toInvocation();assertThat(invocation.toString(),endsWith(""simpleMethod("" + ""\n"" + ""    \""veeeeery long string that makes it ugly in one line\"",""+ ""\n""+ ""    1""+ ""\n""+ "");""));}"
"org.mockito.internal.invocation.InvocationTest.shouldMarkVerifiedWhenMarkingVerifiedInOrder",0,"@Test public void shouldMarkVerifiedWhenMarkingVerifiedInOrder()throws Exception {assertFalse(invocation.isVerified());assertFalse(invocation.isVerifiedInOrder());invocation.markVerifiedInOrder();assertTrue(invocation.isVerified());assertTrue(invocation.isVerifiedInOrder());}"
"org.mockito.internal.invocation.InvocationTest.shouldTransformArgumentsToMatchers",0,"@Test public void shouldTransformArgumentsToMatchers()throws Exception {Invocation i=new InvocationBuilder().args(""foo"",new String[]{""bar""}).toInvocation();List matchers=i.argumentsToMatchers();assertEquals(2,matchers.size());assertEquals(Equals.class,matchers.get(0).getClass());assertEquals(ArrayEquals.class,matchers.get(1).getClass());}"
"org.mockito.internal.invocation.InvocationTest.shouldKnowIfIsToString",0,"@Test public void shouldKnowIfIsToString()throws Exception {Invocation toString=new InvocationBuilder().method(""toString"").toInvocation();assertTrue(Invocation.isToString(toString));Invocation notToString=new InvocationBuilder().method(""toString"").arg(""foo"").toInvocation();assertFalse(Invocation.isToString(notToString));}"
"org.mockito.internal.invocation.InvocationTest.shouldKnowValidThrowables",0,"@Test public void shouldKnowValidThrowables()throws Exception {Invocation invocation=new InvocationBuilder().method(""canThrowException"").toInvocation();assertFalse(invocation.isValidException(new Exception()));assertTrue(invocation.isValidException(new CharacterCodingException()));}"
"org.mockito.internal.invocation.InvocationTest.shouldBeAbleToCallRealMethod",0,"@Test public void shouldBeAbleToCallRealMethod()throws Throwable {Invocation invocation=invocationOf(Foo.class,""bark"",new RealMethod(){public Object invoke(Object target,Object[]arguments)throws Throwable {return new Foo().bark();}});assertEquals(""woof"",invocation.callRealMethod());}"
"org.mockitousage.stubbing.BasicStubbingTest.shouldEvaluateLatestStubbingFirst",0,"@Test public void shouldEvaluateLatestStubbingFirst()throws Exception {when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);when(mock.objectReturningMethod(200)).thenReturn(200);assertEquals(200,mock.objectReturningMethod(200));assertEquals(100,mock.objectReturningMethod(666));assertEquals(""default behavior should return null"",null,mock.objectReturningMethod(""blah""));}"
"org.mockitousage.stubbing.BasicStubbingTest.shouldStubbingBeTreatedAsInteraction",0,"@Test public void shouldStubbingBeTreatedAsInteraction()throws Exception {when(mock.booleanReturningMethod()).thenReturn(true);mock.booleanReturningMethod();try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.stubbing.BasicStubbingTest.shouldAllowStubbingToString",0,"@Test public void shouldAllowStubbingToString()throws Exception {IMethods mockTwo=mock(IMethods.class);when(mockTwo.toString()).thenReturn(""test"");assertContains(""Mock for IMethods"",mock.toString());assertEquals(""test"",mockTwo.toString());}"
"org.mockitousage.stubbing.BasicStubbingTest.shouldStubbingNotBeTreatedAsInteraction",0,"@Test public void shouldStubbingNotBeTreatedAsInteraction(){when(mock.simpleMethod(""one"")).thenThrow(new RuntimeException());doThrow(new RuntimeException()).when(mock).simpleMethod(""two"");verifyZeroInteractions(mock);}"
"org.mockitousage.stubbing.BasicStubbingTest.unfinishedStubbingCleansUpTheState",0,"@Test public void unfinishedStubbingCleansUpTheState(){try {when("""").thenReturn("""");fail();}catch(MissingMethodInvocationException e){}verifyZeroInteractions(mock);}"
"org.mockitousage.stubbing.BasicStubbingTest.shouldToStringMockName",0,"@Test public void shouldToStringMockName(){IMethods mock=mock(IMethods.class,""mockie"");IMethods mockTwo=mock(IMethods.class);assertContains(""Mock for IMethods"","""" + mockTwo);assertEquals(""mockie"","""" + mock);}"
"org.mockitousage.stubbing.BasicStubbingTest.shouldAllowMockingWhenToStringIsFinal",0,"@Test public void shouldAllowMockingWhenToStringIsFinal()throws Exception {mock(Foo.class);}"
"org.mockitousage.bugs.NPEWithIsAClassMatcherTest.shouldNotThrowNPEWhenIntegerPassed",0,"@Test public void shouldNotThrowNPEWhenIntegerPassed(){mock.intArgumentMethod(100);verify(mock).intArgumentMethod(isA(Integer.class));}"
"org.mockitousage.bugs.NPEWithIsAClassMatcherTest.shouldNotThrowNPEWhenIntPassed",0,"@Test public void shouldNotThrowNPEWhenIntPassed(){mock.intArgumentMethod(100);verify(mock).intArgumentMethod(isA(Integer.class));}"
"org.mockitousage.bugs.NPEWithIsAClassMatcherTest.shouldNotThrowNPEWhenIntegerPassedToEq",0,"@Test public void shouldNotThrowNPEWhenIntegerPassedToEq(){mock.intArgumentMethod(100);verify(mock).intArgumentMethod(eq(new Integer(100)));}"
"org.mockitousage.junitrunner.JUnit45RunnerTest.shouldInitMocksUsingRunner",0,"@Test public void shouldInitMocksUsingRunner(){list.add(""test"");verify(list).add(""test"");}"
"org.mockito.exceptions.base.MockitoExceptionTest.shouldKeepUnfilteredStackTrace",0,"@Test public void shouldKeepUnfilteredStackTrace(){try {throwIt();fail();}catch(MockitoException e){assertEquals(""throwIt"",e.getUnfilteredStackTrace()[0].getMethodName());}}"
"org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnVerify",0,"@Test public void shouldResetOngoingStubbingOnVerify(){mock.booleanReturningMethod();verify(mock).booleanReturningMethod();assertOngoingStubbingIsReset();}"
"org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnMock",0,"@Test public void shouldResetOngoingStubbingOnMock(){mock.booleanReturningMethod();mock(IMethods.class);assertOngoingStubbingIsReset();}"
"org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnInOrder",0,"@Test public void shouldResetOngoingStubbingOnInOrder(){mock.booleanReturningMethod();InOrder inOrder=inOrder(mock);inOrder.verify(mock).booleanReturningMethod();assertOngoingStubbingIsReset();}"
"org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnDoReturn",0,"@Test public void shouldResetOngoingStubbingOnDoReturn(){mock.booleanReturningMethod();doReturn(false).when(mock).booleanReturningMethod();assertOngoingStubbingIsReset();}"
"org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnVerifyNoMoreInteractions",0,"@Test public void shouldResetOngoingStubbingOnVerifyNoMoreInteractions(){mock.booleanReturningMethod();IMethods mock2=mock(IMethods.class);verifyNoMoreInteractions(mock2);assertOngoingStubbingIsReset();}"
"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch",0,"@Test public void shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch(){List<Matcher> matchers=(List)Arrays.asList(new Equals(1));Integer[]suspicious=tool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10,20});assertEquals(0,suspicious.length);}"
"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch",0,"@Test public void shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch(){List<Matcher> matchers=(List)Arrays.asList(new Equals(10),new Equals(20));Integer[]suspicious=tool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10,20});assertEquals(0,suspicious.length);}"
"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldFindSuspiciousMatchers",0,"@Test public void shouldFindSuspiciousMatchers(){Equals matcherInt20=new Equals(20);Long longPretendingAnInt=new Long(20);List<Matcher> matchers=(List)Arrays.asList(new Equals(10),matcherInt20);Integer[]suspicious=tool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10,longPretendingAnInt});assertEquals(1,suspicious.length);assertEquals(new Integer(1),suspicious[0]);}"
"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindSuspiciousMatchersWhenTypesAreTheSame",0,"@Test public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame(){Equals matcherWithBadDescription=new Equals(20){public void describeTo(Description desc){desc.appendText(""10"");}};Integer argument=10;Integer[]suspicious=tool.getSuspiciouslyNotMatchingArgsIndexes((List)Arrays.asList(matcherWithBadDescription),new Object[]{argument});assertEquals(0,suspicious.length);}"
"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldWorkFineWhenGivenArgIsNull",1,"@Test public void shouldWorkFineWhenGivenArgIsNull(){Integer[]suspicious=tool.getSuspiciouslyNotMatchingArgsIndexes((List)Arrays.asList(new Equals(20)),new Object[]{null});assertEquals(0,suspicious.length);}"
"org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldUseMatchersSafely",0,"@Test public void shouldUseMatchersSafely(){List<Matcher> matchers=(List)Arrays.asList(new BaseMatcher(){public boolean matches(Object item){throw new ClassCastException(""nasty matcher"");}public void describeTo(Description description){}});Integer[]suspicious=tool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10});assertEquals(0,suspicious.length);}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerify",0,"@Test public void shouldFilterStackTraceOnVerify(){try {verify(mock).simpleMethod();fail();}catch(WantedButNotInvoked e){assertThat(e,hasFirstMethodInStackTrace(""shouldFilterStackTraceOnVerify""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerifyNoMoreInteractions",0,"@Test public void shouldFilterStackTraceOnVerifyNoMoreInteractions(){mock.oneArg(true);try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){assertThat(e,hasFirstMethodInStackTrace(""shouldFilterStackTraceOnVerifyNoMoreInteractions""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceOnVerifyZeroInteractions",0,"@Test public void shouldFilterStackTraceOnVerifyZeroInteractions(){mock.oneArg(true);try {verifyZeroInteractions(mock);fail();}catch(NoInteractionsWanted e){assertThat(e,hasFirstMethodInStackTrace(""shouldFilterStackTraceOnVerifyZeroInteractions""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceOnMockitoException",0,"@Test public void shouldFilterStacktraceOnMockitoException(){verify(mock);try {verify(mock).oneArg(true);fail();}catch(MockitoException expected){assertThat(expected,hasFirstMethodInStackTrace(""shouldFilterStacktraceOnMockitoException""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenVerifyingInOrder",0,"@Test public void shouldFilterStacktraceWhenVerifyingInOrder(){InOrder inOrder=inOrder(mock);mock.oneArg(true);mock.oneArg(false);inOrder.verify(mock).oneArg(false);try {inOrder.verify(mock).oneArg(true);fail();}catch(VerificationInOrderFailure e){assertThat(e,hasFirstMethodInStackTrace(""shouldFilterStacktraceWhenVerifyingInOrder""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenInOrderThrowsMockitoException",0,"@Test public void shouldFilterStacktraceWhenInOrderThrowsMockitoException(){try {inOrder();fail();}catch(MockitoException expected){assertThat(expected,hasFirstMethodInStackTrace(""shouldFilterStacktraceWhenInOrderThrowsMockitoException""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStacktraceWhenInOrderVerifies",0,"@Test public void shouldFilterStacktraceWhenInOrderVerifies(){try {InOrder inOrder=inOrder(mock);inOrder.verify(null);fail();}catch(MockitoException expected){assertThat(expected,hasFirstMethodInStackTrace(""shouldFilterStacktraceWhenInOrderVerifies""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldFilterStackTraceWhenThrowingExceptionFromMockHandler",0,"@Test public void shouldFilterStackTraceWhenThrowingExceptionFromMockHandler(){try {when(mock.oneArg(true)).thenThrow(new Exception());fail();}catch(MockitoException expected){assertThat(expected,hasFirstMethodInStackTrace(""shouldFilterStackTraceWhenThrowingExceptionFromMockHandler""));}}"
"org.mockitousage.stacktrace.StackTraceFilteringTest.shouldShowProperExceptionStackTrace",0,"@Test public void shouldShowProperExceptionStackTrace()throws Exception {when(mock.simpleMethod()).thenThrow(new RuntimeException());try {mock.simpleMethod();fail();}catch(RuntimeException e){assertThat(e,hasFirstMethodInStackTrace(""shouldShowProperExceptionStackTrace""));}}"
"org.mockitousage.junitrunner.JUnit44RunnerTest.shouldInitMocksUsingRunner",0,"@Test public void shouldInitMocksUsingRunner(){list.add(""test"");verify(list).add(""test"");}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderAllInvocations",0,"@Test public void shouldVerifyInOrderAllInvocations(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderAndBeRelaxed",0,"@Test public void shouldVerifyInOrderAndBeRelaxed(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);verifyNoMoreInteractions(mockThree);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowFirstChunkBeforeLastInvocation",0,"@Test public void shouldAllowFirstChunkBeforeLastInvocation(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);try {verifyNoMoreInteractions(mockTwo);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowAllChunksBeforeLastInvocation",0,"@Test public void shouldAllowAllChunksBeforeLastInvocation(){inOrder.verify(mockTwo,times(3)).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyDetectFirstChunkOfInvocationThatExistInManyChunks",0,"@Test public void shouldVerifyDetectFirstChunkOfInvocationThatExistInManyChunks(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);try {verifyNoMoreInteractions(mockTwo);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyDetectAllChunksOfInvocationThatExistInManyChunks",0,"@Test public void shouldVerifyDetectAllChunksOfInvocationThatExistInManyChunks(){inOrder.verify(mockTwo,times(3)).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInteractionsFromAllChunksWhenAtLeastOnceMode",0,"@Test public void shouldVerifyInteractionsFromAllChunksWhenAtLeastOnceMode(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);verifyNoMoreInteractions(mockTwo);try {inOrder.verify(mockThree).simpleMethod(3);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInteractionsFromFirstChunk",0,"@Test public void shouldVerifyInteractionsFromFirstChunk(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);try {verifyNoMoreInteractions(mockTwo);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailVerificationOfNonFirstChunk",0,"@Test(expected=VerificationInOrderFailure.class)public void shouldFailVerificationOfNonFirstChunk(){inOrder.verify(mockTwo,times(1)).simpleMethod(2);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldPassOnCombinationOfTimesAndAtLeastOnce",0,"@Test public void shouldPassOnCombinationOfTimesAndAtLeastOnce(){mockTwo.simpleMethod(2);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldPassOnEdgyCombinationOfTimesAndAtLeastOnce",0,"@Test public void shouldPassOnEdgyCombinationOfTimesAndAtLeastOnce(){mockTwo.simpleMethod(2);mockThree.simpleMethod(3);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);verifyNoMoreInteractions(mockThree);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderMockTwoAndThree",0,"@Test public void shouldVerifyInOrderMockTwoAndThree(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);verifyNoMoreInteractions(mockTwo,mockThree);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderMockOneAndThree",0,"@Test public void shouldVerifyInOrderMockOneAndThree(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockThree);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderOnlyTwoInvocations",0,"@Test public void shouldVerifyInOrderOnlyTwoInvocations(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyInOrderOnlyMockTwo",0,"@Test public void shouldVerifyInOrderOnlyMockTwo(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockTwo).simpleMethod(2);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyMockTwoCalledTwice",0,"@Test public void shouldVerifyMockTwoCalledTwice(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyMockTwoCalledAtLeastOnce",0,"@Test public void shouldVerifyMockTwoCalledAtLeastOnce(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnWrongMethodCalledOnMockTwo",0,"@Test(expected=WantedButNotInvoked.class)public void shouldFailOnWrongMethodCalledOnMockTwo(){inOrder.verify(mockTwo,atLeastOnce()).differentMethod();}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldAllowTimesZeroButOnlyInOrder",0,"@Test public void shouldAllowTimesZeroButOnlyInOrder(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);inOrder.verify(mockOne,times(0)).simpleMethod(1);try {verify(mockOne,times(0)).simpleMethod(1);fail();}catch(NeverWantedButInvoked e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailTimesZeroInOrder",0,"@Test public void shouldFailTimesZeroInOrder(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);try {inOrder.verify(mockThree,times(0)).simpleMethod(3);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailWhenMockTwoWantedZeroTimes",0,"@Test(expected=VerificationInOrderFailure.class)public void shouldFailWhenMockTwoWantedZeroTimes(){inOrder.verify(mockTwo,times(0)).simpleMethod(2);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifyLastInvocation",0,"@Test public void shouldVerifyLastInvocation(){inOrder.verify(mockOne).simpleMethod(4);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifySecondAndLastInvocation",0,"@Test public void shouldVerifySecondAndLastInvocation(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldVerifySecondAndLastInvocationWhenAtLeastOnceUsed",0,"@Test public void shouldVerifySecondAndLastInvocationWhenAtLeastOnceUsed(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnLastTwoInvocationsInWrongOrder",0,"@Test public void shouldFailOnLastTwoInvocationsInWrongOrder(){inOrder.verify(mockOne).simpleMethod(4);try {inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnLastAndFirstInWrongOrder",0,"@Test public void shouldFailOnLastAndFirstInWrongOrder(){inOrder.verify(mockOne).simpleMethod(4);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.RelaxedVerificationInOrderTest.shouldFailOnWrongMethodAfterLastInvocation",0,"@Test public void shouldFailOnWrongMethodAfterLastInvocation(){inOrder.verify(mockOne).simpleMethod(4);try {inOrder.verify(mockOne).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnMockValueForInterface",0,"@Test public void shouldReturnMockValueForInterface()throws Exception {Object interfaceMock=values.returnValueFor(FooInterface.class);assertTrue(new MockUtil().isMock(interfaceMock));}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnNullForFinalClass",0,"@Test public void shouldReturnNullForFinalClass()throws Exception {assertNull(values.returnValueFor(Baz.class));}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnTheUsualDefaultValuesForPrimitives",0,"@Test public void shouldReturnTheUsualDefaultValuesForPrimitives()throws Throwable {ReturnsMocks answer=new ReturnsMocks();assertEquals(false,answer.answer(invocationOf(HasPrimitiveMethods.class,""booleanMethod"")));assertEquals((char)0,answer.answer(invocationOf(HasPrimitiveMethods.class,""charMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""intMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""longMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""floatMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""doubleMethod"")));}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnEmptyArray",0,"@Test public void shouldReturnEmptyArray()throws Throwable {String[]ret=(String[])values.answer(invocationOf(StringMethods.class,""stringArrayMethod""));assertTrue(ret.getClass().isArray());assertTrue(ret.length == 0);}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMocksTest.shouldReturnEmptyString",0,"@Test public void shouldReturnEmptyString()throws Throwable {assertEquals("""",values.answer(invocationOf(StringMethods.class,""stringMethod"")));}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointStackTraceToPreviousVerified",0,"@Test public void shouldPointStackTraceToPreviousVerified(){inOrder.verify(mock,atLeastOnce()).simpleMethod(anyInt());inOrder.verify(mockTwo).simpleMethod(anyInt());try {inOrder.verify(mock).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){assertContains(""fourth("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToThirdMethod",0,"@Test public void shouldPointToThirdMethod(){inOrder.verify(mock,atLeastOnce()).simpleMethod(anyInt());try {inOrder.verify(mockTwo).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){assertContains(""third("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToSecondMethod",0,"@Test public void shouldPointToSecondMethod(){inOrder.verify(mock).simpleMethod(anyInt());inOrder.verify(mockTwo).simpleMethod(anyInt());try {inOrder.verify(mockTwo,times(3)).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){assertContains(""second("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToFirstMethodBecauseOfTooManyActualInvocations",0,"@Test public void shouldPointToFirstMethodBecauseOfTooManyActualInvocations(){try {inOrder.verify(mock,times(0)).simpleMethod(anyInt());fail();}catch(VerificationInOrderFailure e){assertContains(""first("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToSecondMethodBecauseOfTooManyActualInvocations",0,"@Test public void shouldPointToSecondMethodBecauseOfTooManyActualInvocations(){inOrder.verify(mock).simpleMethod(anyInt());try {inOrder.verify(mockTwo,times(0)).simpleMethod(anyInt());fail();}catch(VerificationInOrderFailure e){assertContains(""second("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationInOrderTest.shouldPointToFourthMethodBecauseOfTooLittleActualInvocations",0,"@Test public void shouldPointToFourthMethodBecauseOfTooLittleActualInvocations(){inOrder.verify(mock).simpleMethod(anyInt());inOrder.verify(mockTwo).simpleMethod(anyInt());inOrder.verify(mock).simpleMethod(anyInt());try {inOrder.verify(mockTwo,times(3)).simpleMethod(anyInt());fail();}catch(VerificationInOrderFailure e){assertContains(""fourth("",e.getMessage());}}"
"org.mockitousage.basicapi.AnnotationsTest.shouldInitMocks",0,"@Test public void shouldInitMocks()throws Exception {list.clear();map.clear();listTwo.clear();verify(list).clear();verify(map).clear();verify(listTwo).clear();}"
"org.mockitousage.basicapi.AnnotationsTest.shouldScreamWhenInitializingMocksForNullClass",0,"@Test public void shouldScreamWhenInitializingMocksForNullClass()throws Exception {try {MockitoAnnotations.initMocks(null);fail();}catch(MockitoException e){assertEquals(""testClass cannot be null. For info how to use @Mock annotations see examples in javadoc for MockitoAnnotations class"",e.getMessage());}}"
"org.mockitousage.basicapi.AnnotationsTest.shouldLookForAnnotatedMocksInSuperClasses",0,"@Test public void shouldLookForAnnotatedMocksInSuperClasses()throws Exception {Sub sub=new Sub();MockitoAnnotations.initMocks(sub);assertNotNull(sub.getMock());assertNotNull(sub.getBaseMock());assertNotNull(sub.getSuperBaseMock());}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodName",0,"@Test public void shouldPrintMethodName(){try {verify(mock).simpleMethod();fail();}catch(WantedButNotInvoked e){String actualMessage=e.getMessage();String expectedMessage=""\n"" + ""Wanted but not invoked:"" + ""\n""+ ""iMethods.simpleMethod();""+ ""\n""+ ""-> at"";assertContains(expectedMessage,actualMessage);}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodNameAndArguments",0,"@Test public void shouldPrintMethodNameAndArguments(){try {verify(mock).threeArgumentMethod(12,new Foo(),""xx"");fail();}catch(WantedButNotInvoked e){assertContains(""iMethods.threeArgumentMethod(12,foo,\""xx\"")"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndWantedInLine",0,"@Test public void shouldPrintActualAndWantedInLine(){mock.varargs(1,2);try {verify(mock).varargs(1,1000);fail();}catch(ArgumentsAreDifferent e){String wanted=""\n"" + ""Argument(s)are different! Wanted:"" + ""\n""+ ""iMethods.varargs(1,1000);"";assertContains(wanted,e.getMessage());String actual=""\n"" + ""Actual invocation has different arguments:"" + ""\n""+ ""iMethods.varargs(1,2);"";assertContains(actual,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndWantedInMultipleLines",0,"@Test public void shouldPrintActualAndWantedInMultipleLines(){mock.varargs(""this is very long string"",""this is another very long string"");try {verify(mock).varargs(""x"",""y"",""z"");fail();}catch(ArgumentsAreDifferent e){String wanted=""\n"" + ""Argument(s)are different! Wanted:"" + ""\n""+ ""iMethods.varargs(""+ ""\n""+ ""    \""x\"",""+ ""\n""+ ""    \""y\"",""+ ""\n""+ ""    \""z\""""+ ""\n""+ "");"";assertContains(wanted,e.getMessage());String actual=""\n"" + ""Actual invocation has different arguments:"" + ""\n""+ ""iMethods.varargs(""+ ""\n""+ ""    \""this is very long string\"",""+ ""\n""+ ""    \""this is another very long string\""""+ ""\n""+ "");"";assertContains(actual,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndWantedWhenActualMethodNameAndWantedMethodNameAreTheSame",0,"@Test public void shouldPrintActualAndWantedWhenActualMethodNameAndWantedMethodNameAreTheSame(){mock.simpleMethod();try {verify(mock).simpleMethod(10);fail();}catch(ArgumentsAreDifferent e){assertContains(""simpleMethod(10)"",e.getMessage());assertContains(""simpleMethod()"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintActualAndUnverifiedWantedWhenTheDifferenceIsAboutArguments",0,"@Test public void shouldPrintActualAndUnverifiedWantedWhenTheDifferenceIsAboutArguments(){mock.twoArgumentMethod(1,1);mock.twoArgumentMethod(2,2);verify(mock).twoArgumentMethod(1,1);try {verify(mock).twoArgumentMethod(2,1000);fail();}catch(ArgumentsAreDifferent e){assertContains(""(2,1000)"",e.getMessage());assertContains(""(2,2)"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintFirstUnexpectedInvocation",0,"@Test public void shouldPrintFirstUnexpectedInvocation(){mock.oneArg(true);mock.oneArg(false);mock.threeArgumentMethod(1,""2"",""3"");verify(mock).oneArg(true);try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){String expectedMessage=""\n"" + ""No interactions wanted here:"" + ""\n""+ ""-> at"";assertContains(expectedMessage,e.getMessage());String expectedCause=""\n"" + ""But found this interaction:"" + ""\n""+ ""-> at"";assertContains(expectedCause,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions",0,"@Test public void shouldPrintFirstUnexpectedInvocationWhenVerifyingZeroInteractions(){mock.twoArgumentMethod(1,2);mock.threeArgumentMethod(1,""2"",""3"");try {verifyZeroInteractions(mock);fail();}catch(NoInteractionsWanted e){String expected=""\n"" + ""No interactions wanted here:"" + ""\n""+ ""-> at"";assertContains(expected,e.getMessage());String expectedCause=""\n"" + ""But found this interaction:"" + ""\n""+ ""-> at"";assertContains(expectedCause,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodNameWhenVerifyingAtLeastOnce",0,"@Test public void shouldPrintMethodNameWhenVerifyingAtLeastOnce()throws Exception {try {verify(mock,atLeastOnce()).twoArgumentMethod(1,2);fail();}catch(WantedButNotInvoked e){assertContains(""twoArgumentMethod(1,2)"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMatcherUsed",0,"@Test public void shouldPrintMethodWhenMatcherUsed()throws Exception {try {verify(mock,atLeastOnce()).twoArgumentMethod(anyInt(),eq(100));fail();}catch(WantedButNotInvoked e){String actualMessage=e.getMessage();String expectedMessage=""\n"" + ""Wanted but not invoked:"" + ""\n""+ ""iMethods.twoArgumentMethod(<any>,100);"";assertContains(expectedMessage,actualMessage);}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMissingInvocationWithArrayMatcher",0,"@Test public void shouldPrintMethodWhenMissingInvocationWithArrayMatcher(){mock.oneArray(new boolean[]{true,false,false});try {verify(mock).oneArray(aryEq(new boolean[]{false,false,false}));fail();}catch(ArgumentsAreDifferent e){assertContains(""[false,false,false]"",e.getMessage());assertContains(""[true,false,false]"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMissingInvocationWithVarargMatcher",0,"@Test public void shouldPrintMethodWhenMissingInvocationWithVarargMatcher(){mock.varargsString(10,""xxx"",""yyy"",""zzz"");try {verify(mock).varargsString(10,""111"",""222"",""333"");fail();}catch(ArgumentsAreDifferent e){assertContains(""111"",e.getMessage());assertContains(""\""xxx\"""",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintMethodWhenMissingInvocationWithMatcher",0,"@Test public void shouldPrintMethodWhenMissingInvocationWithMatcher(){mock.simpleMethod(""foo"");try {verify(mock).simpleMethod(matches(""burrito from Exmouth""));fail();}catch(ArgumentsAreDifferent e){assertContains(""matches(\""burrito from Exmouth\"")"",e.getMessage());assertContains(""\""foo\"""",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintNullArguments",0,"@Test public void shouldPrintNullArguments()throws Exception {mock.simpleMethod(null,(Integer)null);try {verify(mock).simpleMethod(""test"");fail();}catch(ArgumentsAreDifferent e){assertContains(""simpleMethod(null,null);"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldSayNeverWantedButInvoked",0,"@Test public void shouldSayNeverWantedButInvoked()throws Exception {mock.simpleMethod(1);verify(mock,never()).simpleMethod(2);try {verify(mock,never()).simpleMethod(1);fail();}catch(NeverWantedButInvoked e){assertContains(""Never wanted here:"",e.getMessage());assertContains(""But invoked here:"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldShowRightActualMethod",0,"@Test public void shouldShowRightActualMethod()throws Exception {mock.simpleMethod(9191);mock.simpleMethod(""foo"");try {verify(mock).simpleMethod(""bar"");fail();}catch(ArgumentsAreDifferent e){assertContains(""bar"",e.getMessage());assertContains(""foo"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintFieldNameWhenAnnotationsUsed",0,"@Test public void shouldPrintFieldNameWhenAnnotationsUsed()throws Exception {iHavefunkyName.simpleMethod(10);try {verify(iHavefunkyName).simpleMethod(20);fail();}catch(ArgumentsAreDifferent e){assertContains(""iHavefunkyName.simpleMethod(20)"",e.getMessage());assertContains(""iHavefunkyName.simpleMethod(10)"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldPrintInteractionsOnMockWhenOrdinaryVerificationFail",0,"@Test public void shouldPrintInteractionsOnMockWhenOrdinaryVerificationFail()throws Exception {mock.otherMethod();mock.booleanReturningMethod();try {verify(mock).simpleMethod();fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.shouldNeverBreakMethodStringWhenNoArgsInMethod",0,"@Test public void shouldNeverBreakMethodStringWhenNoArgsInMethod()throws Exception {try {verify(veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock).simpleMethod();fail();}catch(WantedButNotInvoked e){assertContains(""veeeeeeeeeeeeeeeeeeeeeeeerylongNameMock.simpleMethod()"",e.getMessage());}}"
"org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldStubUsingMatchers",0,"@Test public void shouldStubUsingMatchers(){when(one.simpleMethod(2)).thenReturn(""2"");when(two.simpleMethod(anyString())).thenReturn(""any"");when(three.simpleMethod(startsWith(""test""))).thenThrow(new RuntimeException());assertEquals(null,one.simpleMethod(1));assertEquals(""2"",one.simpleMethod(2));assertEquals(""any"",two.simpleMethod(""two""));assertEquals(""any"",two.simpleMethod(""two again""));assertEquals(null,three.simpleMethod(""three""));assertEquals(null,three.simpleMethod(""three again""));try {three.simpleMethod(""test three again"");fail();}catch(RuntimeException e){}}"
"org.mockitousage.matchers.VerificationAndStubbingUsingMatchersTest.shouldVerifyUsingMatchers",0,"@SuppressWarnings(""deprecation"")@Test public void shouldVerifyUsingMatchers(){stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);when(three.varargsObject(5,""first arg"",""second arg"")).thenReturn(""stubbed"");try {one.oneArg(true);fail();}catch(RuntimeException e){}one.simpleMethod(100);two.simpleMethod(""test Mockito"");three.varargsObject(10,""first arg"",""second arg"");assertEquals(""stubbed"",three.varargsObject(5,""first arg"",""second arg""));verify(one).oneArg(eq(true));verify(one).simpleMethod(anyInt());verify(two).simpleMethod(startsWith(""test""));verify(three).varargsObject(5,""first arg"",""second arg"");verify(three).varargsObject(eq(10),eq(""first arg""),startsWith(""second""));verifyNoMoreInteractions(one,two,three);try {verify(three).varargsObject(eq(10),eq(""first arg""),startsWith(""third""));fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomBooleanMatcher",0,"@Test public void shouldUseCustomBooleanMatcher(){when(mock.oneArg(booleanThat(new IsAnyBoolean()))).thenReturn(""foo"");assertEquals(""foo"",mock.oneArg(true));assertEquals(""foo"",mock.oneArg(false));assertEquals(null,mock.oneArg(""x""));}"
"org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomCharMatcher",0,"@Test public void shouldUseCustomCharMatcher(){when(mock.oneArg(charThat(new IsSorZ()))).thenReturn(""foo"");assertEquals(""foo"",mock.oneArg('s'));assertEquals(""foo"",mock.oneArg('z'));assertEquals(null,mock.oneArg('x'));}"
"org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomPrimitiveNumberMatchers",0,"@Test public void shouldUseCustomPrimitiveNumberMatchers(){when(mock.oneArg(byteThat(new IsZeroOrOne<Byte>()))).thenReturn(""byte"");when(mock.oneArg(shortThat(new IsZeroOrOne<Short>()))).thenReturn(""short"");when(mock.oneArg(intThat(new IsZeroOrOne<Integer>()))).thenReturn(""int"");when(mock.oneArg(longThat(new IsZeroOrOne<Long>()))).thenReturn(""long"");when(mock.oneArg(floatThat(new IsZeroOrOne<Float>()))).thenReturn(""float"");when(mock.oneArg(doubleThat(new IsZeroOrOne<Double>()))).thenReturn(""double"");assertEquals(""byte"",mock.oneArg((byte)0));assertEquals(""short"",mock.oneArg((short)1));assertEquals(""int"",mock.oneArg(0));assertEquals(""long"",mock.oneArg(1L));assertEquals(""float"",mock.oneArg(0F));assertEquals(""double"",mock.oneArg(1.0));assertEquals(null,mock.oneArg(2));assertEquals(null,mock.oneArg(""foo""));}"
"org.mockitousage.matchers.CustomMatchersTest.shouldUseCustomObjectMatcher",0,"@Test public void shouldUseCustomObjectMatcher(){when(mock.oneArg(argThat(new ContainsFoo()))).thenReturn(""foo"");assertEquals(""foo"",mock.oneArg(""foo""));assertEquals(null,mock.oneArg(""bar""));}"
"org.mockitousage.matchers.CustomMatchersTest.shouldCustomMatcherPrintDescriptionBasedOnName",0,"@Test public void shouldCustomMatcherPrintDescriptionBasedOnName(){mock.simpleMethod(""foo"");try {verify(mock).simpleMethod(containsTest());fail();}catch(AssertionError e){assertContains(""<String that contains xxx>"",e.getMessage());}}"
"org.mockitousage.matchers.CustomMatchersTest.shouldAnonymousCustomMatcherPrintDefaultDescription",0,"@Test public void shouldAnonymousCustomMatcherPrintDefaultDescription(){mock.simpleMethod(""foo"");try {verify(mock).simpleMethod((String)argThat(new ArgumentMatcher<Object>(){@Override public boolean matches(Object argument){return false;}}));fail();}catch(AssertionError e){assertContains(""<custom argument matcher>"",e.getMessage());assertContains(""foo"",e.getMessage());}}"
"org.mockitousage.ThreadReuseTest.test1",0,"@Test(timeout=100)public void test1()throws Exception {when(mock.simpleMethod()).thenReturn(""foo"");assertNull(l.get());l.set(getClass());}"
"org.mockitousage.ThreadReuseTest.test2",0,"@Test public void test2()throws Exception {System.out.println(mock.simpleMethod());assertNull(l.get());l.set(getClass());}"
"org.mockitousage.ThreadReuseTest.test3",0,"@Test(timeout=100)public void test3()throws Exception {doThrow(new RuntimeException()).when(mock).voidMethod();assertNull(l.get());l.set(getClass());}"
"org.mockitousage.ThreadReuseTest.test4",0,"@Test(timeout=100)public void test4()throws Exception {mock.voidMethod();assertNull(l.get());l.set(getClass());}"
"org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswer",0,"@Test public void shouldAnswer()throws Exception {when(mock.simpleMethod(anyString())).thenAnswer(new Answer<String>(){public String answer(InvocationOnMock invocation)throws Throwable {String arg=(String)invocation.getArguments()[0];return invocation.getMethod().getName()+ ""-"" + arg;}});assertEquals(""simpleMethod-test"",mock.simpleMethod(""test""));}"
"org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerConsecutively",0,"@Test public void shouldAnswerConsecutively()throws Exception {when(mock.simpleMethod()).thenAnswer(new Answer<String>(){public String answer(InvocationOnMock invocation)throws Throwable {return invocation.getMethod().getName();}}).thenReturn(""Hello"").thenAnswer(new Answer<String>(){public String answer(InvocationOnMock invocation)throws Throwable {return invocation.getMethod().getName()+ ""-1"";}});assertEquals(""simpleMethod"",mock.simpleMethod());assertEquals(""Hello"",mock.simpleMethod());assertEquals(""simpleMethod-1"",mock.simpleMethod());assertEquals(""simpleMethod-1"",mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shoudAnswerVoidMethod",0,"@Test public void shoudAnswerVoidMethod()throws Exception {RecordCall recordCall=new RecordCall();stubVoid(mock).toAnswer(recordCall).on().voidMethod();mock.voidMethod();assertTrue(recordCall.isCalled());}"
"org.mockitousage.stubbing.StubbingWithCustomAnswerTest.shouldAnswerVoidMethodConsecutively",0,"@Test public void shouldAnswerVoidMethodConsecutively()throws Exception {RecordCall call1=new RecordCall();RecordCall call2=new RecordCall();stubVoid(mock).toAnswer(call1).toThrow(new UnsupportedOperationException()).toAnswer(call2).on().voidMethod();mock.voidMethod();assertTrue(call1.isCalled());assertFalse(call2.isCalled());try {mock.voidMethod();fail();}catch(UnsupportedOperationException e){}mock.voidMethod();assertTrue(call2.isCalled());}"
"org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAnyXMatchersAcceptNull",0,"@Test public void shouldAnyXMatchersAcceptNull(){when(mock.oneArg(anyObject())).thenReturn(""0"");when(mock.oneArg(anyString())).thenReturn(""1"");when(mock.forList(anyList())).thenReturn(""2"");when(mock.forMap(anyMap())).thenReturn(""3"");when(mock.forCollection(anyCollection())).thenReturn(""4"");when(mock.forSet(anySet())).thenReturn(""5"");assertEquals(""0"",mock.oneArg((Object)null));assertEquals(""1"",mock.oneArg((String)null));assertEquals(""2"",mock.forList(null));assertEquals(""3"",mock.forMap(null));assertEquals(""4"",mock.forCollection(null));assertEquals(""5"",mock.forSet(null));}"
"org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAnyPrimiteWraperMatchersAcceptNull",0,"@Test public void shouldAnyPrimiteWraperMatchersAcceptNull(){when(mock.forInteger(anyInt())).thenReturn(""0"");when(mock.forCharacter(anyChar())).thenReturn(""1"");when(mock.forShort(anyShort())).thenReturn(""2"");when(mock.forByte(anyByte())).thenReturn(""3"");when(mock.forBoolean(anyBoolean())).thenReturn(""4"");when(mock.forLong(anyLong())).thenReturn(""5"");when(mock.forFloat(anyFloat())).thenReturn(""6"");when(mock.forDouble(anyDouble())).thenReturn(""7"");assertEquals(""0"",mock.forInteger(null));assertEquals(""1"",mock.forCharacter(null));assertEquals(""2"",mock.forShort(null));assertEquals(""3"",mock.forByte(null));assertEquals(""4"",mock.forBoolean(null));assertEquals(""5"",mock.forLong(null));assertEquals(""6"",mock.forFloat(null));assertEquals(""7"",mock.forDouble(null));}"
"org.mockitousage.misuse.DetectingMisusedMatchersTest.shouldFailFastWhenArgumentMatchersAbused",0,"@Test public void shouldFailFastWhenArgumentMatchersAbused(){misplacedArgumentMatcher();try {mock(IMethods.class);fail();}catch(InvalidUseOfMatchersException e){assertContains(""Misplaced argument matcher"",e.getMessage());}}"
"org.mockitousage.misuse.DetectingMisusedMatchersTest.shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers",0,"@Test public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers(){verify(withFinal).finalMethod(anyObject());try {verify(withFinal);fail();}catch(UnfinishedVerificationException e){}}"
"org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldPointOutMisplacedMatcher",0,"@Test public void shouldPointOutMisplacedMatcher(){misplacedArgumentMatcherHere();try {verify(mock).simpleMethod();fail();}catch(InvalidUseOfMatchersException e){assertContains(""-> at "",e.getMessage());assertContains(""misplacedArgumentMatcherHere("",e.getMessage());}}"
"org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldPointOutUnfinishedStubbing",0,"@Test public void shouldPointOutUnfinishedStubbing(){unfinishedStubbingHere();try {verify(mock).simpleMethod();fail();}catch(UnfinishedStubbingException e){assertContains(""-> at "",e.getMessage());assertContains(""unfinishedStubbingHere("",e.getMessage());}}"
"org.mockitousage.stacktrace.ClickableStackTracesWhenFrameworkMisusedTest.shouldShowWhereIsUnfinishedVerification",0,"@Test public void shouldShowWhereIsUnfinishedVerification()throws Exception {unfinishedVerificationHere();try {mock(IMethods.class);fail();}catch(UnfinishedVerificationException e){assertContains(""unfinishedVerificationHere("",e.getMessage());}}"
"org.mockito.internal.debugging.WarningsPrinterTest.shouldPrintUnusedStub",0,"@Test public void shouldPrintUnusedStub(){Invocation unusedStub=new InvocationBuilder().simpleMethod().toInvocation();WarningsPrinter p=new WarningsPrinter(asList(unusedStub),Arrays.<InvocationMatcher>asList());p.print(logger);assertContains(""stub was not used"",logger.getLoggedInfo());assertContains(""simpleMethod()"",logger.getLoggedInfo());}"
"org.mockito.internal.debugging.WarningsPrinterTest.shouldPrintUnstubbedInvocation",0,"@Test public void shouldPrintUnstubbedInvocation(){InvocationMatcher unstubbedInvocation=new InvocationBuilder().differentMethod().toInvocationMatcher();WarningsPrinter p=new WarningsPrinter(Arrays.<Invocation>asList(),Arrays.<InvocationMatcher>asList(unstubbedInvocation));p.print(logger);assertContains(""was not stubbed"",logger.getLoggedInfo());assertContains(""differentMethod()"",logger.getLoggedInfo());}"
"org.mockito.internal.debugging.WarningsPrinterTest.shouldPrintStubWasUsedWithDifferentArgs",0,"@Test public void shouldPrintStubWasUsedWithDifferentArgs(){Invocation stub=new InvocationBuilder().arg(""foo"").mock(mock).toInvocation();InvocationMatcher wrongArg=new InvocationBuilder().arg(""bar"").mock(mock).toInvocationMatcher();WarningsPrinter p=new WarningsPrinter(Arrays.<Invocation>asList(stub),Arrays.<InvocationMatcher>asList(wrongArg));p.print(logger);assertContains(""Stubbed this way"",logger.getLoggedInfo());assertContains(""simpleMethod(\""foo\"")"",logger.getLoggedInfo());assertContains(""called with different arguments"",logger.getLoggedInfo());assertContains(""simpleMethod(\""bar\"")"",logger.getLoggedInfo());}"
"org.mockito.internal.debugging.WarningsPrinterTest.shouldNotPrintRedundantInformation",0,"@Test public void shouldNotPrintRedundantInformation(){Invocation stub=new InvocationBuilder().arg(""foo"").mock(mock).toInvocation();InvocationMatcher wrongArg=new InvocationBuilder().arg(""bar"").mock(mock).toInvocationMatcher();WarningsPrinter p=new WarningsPrinter(Arrays.<Invocation>asList(stub),Arrays.<InvocationMatcher>asList(wrongArg));p.print(logger);assertNotContains(""stub was not used"",logger.getLoggedInfo());assertNotContains(""was not stubbed"",logger.getLoggedInfo());}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldCallRealMethdsEvenDelegatedToOtherSelfMethod",0,"@Test public void shouldCallRealMethdsEvenDelegatedToOtherSelfMethod(){String name=spy.getName();assertEquals(""Default name"",name);}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldAllowStubbingOfMethodsThatDelegateToOtherMethods",0,"@Test public void shouldAllowStubbingOfMethodsThatDelegateToOtherMethods(){when(spy.getName()).thenReturn(""foo"");assertEquals(""foo"",spy.getName());}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods",0,"@Test public void shouldAllowStubbingWithThrowablesMethodsThatDelegateToOtherMethods(){doThrow(new RuntimeException(""appetite for destruction"")).when(spy).getNameButDelegateToMethodThatThrows();try {spy.getNameButDelegateToMethodThatThrows();fail();}catch(Exception e){assertEquals(""appetite for destruction"",e.getMessage());}}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldStackTraceGetFilteredOnUserExceptions",0,"@Test public void shouldStackTraceGetFilteredOnUserExceptions(){try {spy.getNameButDelegateToMethodThatThrows();fail();}catch(Throwable t){assertThat(t,ExtraMatchers.hasMethodsInStackTrace(""throwSomeException"",""getNameButDelegateToMethodThatThrows"",""shouldStackTraceGetFilteredOnUserExceptions""));}}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldVerify",0,"@Test public void shouldVerify(){spy.getName();verify(spy).guessName();}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldStub",0,"@Test public void shouldStub(){when(spy.guessName()).thenReturn(new Name(""John""));String name=spy.getName();assertEquals(""John"",name);}"
"org.mockitousage.spies.PartialMockingWithSpiesTest.shouldDealWithPrivateFieldsOfSubclasses",0,"@Test public void shouldDealWithPrivateFieldsOfSubclasses(){assertEquals(""100$"",spy.howMuchDidYouInherit());}"
"org.mockito.internal.runners.util.RunnerProviderTest.shouldKnowAboutJUnit45",0,"@Test public void shouldKnowAboutJUnit45()throws Exception {RunnerProvider provider=new RunnerProvider();assertTrue(provider.isJUnit45OrHigherAvailable());}"
"org.mockito.internal.runners.util.RunnerProviderTest.shouldCreateRunnerInstance",0,"@Test public void shouldCreateRunnerInstance()throws Throwable {RunnerProvider provider=new RunnerProvider();RunnerImpl runner=provider.newInstance(""org.mockito.internal.runners.JUnit45AndHigherRunnerImpl"",this.getClass());assertNotNull(runner);}"
"org.mockitousage.matchers.ArgumentMatchingWithFancyAssertionsTest.shouldUseAssertor",0,"@Ignore(""assertion idea is not for current release I guess"")@Test public void shouldUseAssertor(){Foo foo=new Foo(mock);foo.bar();verify(mock).simpleMethod(argThat(new Assertion<Person>(){public void asserts(Person person){assertEquals(12,person.getAge());}}));}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest.shouldReturnEmptyArray",0,"@Test public void shouldReturnEmptyArray(){String[]ret=(String[])rv.returnValueFor((new String[0]).getClass());assertTrue(ret.getClass().isArray());assertTrue(ret.length == 0);}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsMoreEmptyValuesTest.shouldReturnEmptyString",0,"@Test public void shouldReturnEmptyString(){assertEquals("""",rv.returnValueFor(String.class));}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointStackTraceToPreviousInvocation",0,"@Test public void shouldPointStackTraceToPreviousInvocation(){inOrder.verify(mock,times(2)).simpleMethod(anyInt());inOrder.verify(mockTwo,times(2)).simpleMethod(anyInt());try {inOrder.verify(mock).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){assertContains(""secondChunk("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToThirdInteractionBecauseAtLeastOnceUsed",0,"@Test public void shouldPointToThirdInteractionBecauseAtLeastOnceUsed(){inOrder.verify(mock,atLeastOnce()).simpleMethod(anyInt());try {inOrder.verify(mockTwo).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){assertContains(""thirdChunk("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToThirdChunkWhenTooLittleActualInvocations",0,"@Test public void shouldPointToThirdChunkWhenTooLittleActualInvocations(){inOrder.verify(mock,times(2)).simpleMethod(anyInt());inOrder.verify(mockTwo,times(2)).simpleMethod(anyInt());inOrder.verify(mock,atLeastOnce()).simpleMethod(anyInt());try {inOrder.verify(mockTwo,times(3)).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){assertContains(""thirdChunk("",e.getMessage());}}"
"org.mockitousage.stacktrace.PointingStackTraceToActualInvocationChunkInOrderTest.shouldPointToFourthChunkBecauseTooManyActualInvocations",0,"@Test public void shouldPointToFourthChunkBecauseTooManyActualInvocations(){inOrder.verify(mock,atLeastOnce()).simpleMethod(anyInt());try {inOrder.verify(mockTwo,times(0)).simpleMethod(anyInt());fail();}catch(VerificationInOrderFailure e){assertContains(""fourthChunk("",e.getMessage());}}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldStubbingNotRegisterRedundantInteractions",0,"@Test public void shouldStubbingNotRegisterRedundantInteractions()throws Exception {when(mock.add(""one"")).thenReturn(true);when(mock.add(""two"")).thenReturn(true);mock.add(""one"");verify(mock).add(""one"");verifyNoMoreInteractions(mock);}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyWhenWantedNumberOfInvocationsUsed",0,"@Test public void shouldVerifyWhenWantedNumberOfInvocationsUsed()throws Exception {mock.add(""one"");mock.add(""one"");mock.add(""one"");verify(mock,times(3)).add(""one"");verifyNoMoreInteractions(mock);}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyNoInteractionsAsManyTimesAsYouWant",0,"@Test public void shouldVerifyNoInteractionsAsManyTimesAsYouWant()throws Exception {verifyNoMoreInteractions(mock);verifyNoMoreInteractions(mock);verifyZeroInteractions(mock);verifyZeroInteractions(mock);}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldFailZeroInteractionsVerification",0,"@Test public void shouldFailZeroInteractionsVerification()throws Exception {mock.clear();try {verifyZeroInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldFailNoMoreInteractionsVerification",0,"@Test public void shouldFailNoMoreInteractionsVerification()throws Exception {mock.clear();try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.shouldVerifyOneMockButFailOnOther",0,"@Test public void shouldVerifyOneMockButFailOnOther()throws Exception {List list=mock(List.class);Map map=mock(Map.class);list.add(""one"");list.add(""one"");map.put(""one"",1);verify(list,times(2)).add(""one"");verifyNoMoreInteractions(list);try {verifyZeroInteractions(map);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.NoMoreInteractionsVerificationTest.verifyNoMoreInteractionsShouldScreamWhenNullPassed",0,"@SuppressWarnings(""all"")@Test(expected=MockitoException.class)public void verifyNoMoreInteractionsShouldScreamWhenNullPassed()throws Exception {verifyNoMoreInteractions(null);}"
"org.mockitousage.spies.StubbingSpiesDoesNotYieldNPETest.shouldNotThrowNPE",0,"@Test public void shouldNotThrowNPE()throws Exception {Foo foo=new Foo();Foo spy=spy(foo);spy.len(anyString());spy.size(anyMap());spy.size(anyList());spy.size(anyCollection());spy.size(anySet());}"
"org.mockitousage.stubbing.SmartNullsStubbingTest.shouldSmartNPEPointToUnstubbedCall",0,"@Test public void shouldSmartNPEPointToUnstubbedCall()throws Exception {IMethods methods=unstubbedMethodInvokedHere(mock);try {methods.simpleMethod();fail();}catch(SmartNullPointerException e){assertContains(""unstubbedMethodInvokedHere("",e.getMessage());}}"
"org.mockitousage.stubbing.SmartNullsStubbingTest.shouldThrowSmartNPEWhenMethodReturnsClass",0,"@Test public void shouldThrowSmartNPEWhenMethodReturnsClass()throws Exception {Foo mock=mock(Foo.class,RETURNS_SMART_NULLS);Foo foo=mock.getSomeClass();try {foo.boo();fail();}catch(SmartNullPointerException e){}}"
"org.mockitousage.stubbing.SmartNullsStubbingTest.shouldThrowSmartNPEWhenMethodReturnsInterface",0,"@Test public void shouldThrowSmartNPEWhenMethodReturnsInterface()throws Exception {Foo mock=mock(Foo.class,RETURNS_SMART_NULLS);Bar bar=mock.getSomeInterface();try {bar.boo();fail();}catch(SmartNullPointerException e){}}"
"org.mockitousage.stubbing.SmartNullsStubbingTest.shouldReturnOrdinaryEmptyValuesForOrdinaryTypes",0,"@Test public void shouldReturnOrdinaryEmptyValuesForOrdinaryTypes()throws Exception {IMethods mock=mock(IMethods.class,RETURNS_SMART_NULLS);assertEquals("""",mock.stringReturningMethod());assertEquals(0,mock.intReturningMethod());assertEquals(true,mock.listReturningMethod().isEmpty());assertEquals(0,mock.arrayReturningMethod().length);}"
"org.mockitousage.stubbing.SmartNullsStubbingTest.shouldNotThrowSmartNullPointerOnToString",0,"@Test public void shouldNotThrowSmartNullPointerOnToString(){Object smartNull=mock.objectReturningMethod();try {verify(mock).simpleMethod(smartNull);fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.stubbing.SmartNullsStubbingTest.shouldNotThrowSmartNullPointerOnObjectMethods",0,"@Test public void shouldNotThrowSmartNullPointerOnObjectMethods(){Object smartNull=mock.objectReturningMethod();smartNull.toString();}"
"org.mockitousage.examples.use.ExampleTest.managerCountsArticlesAndSavesThemInTheDatabase",0,"@Test public void managerCountsArticlesAndSavesThemInTheDatabase(){when(mockCalculator.countArticles(""Guardian"")).thenReturn(12);when(mockCalculator.countArticlesInPolish(anyString())).thenReturn(5);articleManager.updateArticleCounters(""Guardian"");verify(mockDatabase).updateNumberOfArticles(""Guardian"",12);verify(mockDatabase).updateNumberOfPolishArticles(""Guardian"",5);verify(mockDatabase).updateNumberOfEnglishArticles(""Guardian"",7);}"
"org.mockitousage.examples.use.ExampleTest.managerCountsArticlesUsingCalculator",0,"@Test public void managerCountsArticlesUsingCalculator(){articleManager.updateArticleCounters(""Guardian"");verify(mockCalculator).countArticles(""Guardian"");verify(mockCalculator).countArticlesInPolish(""Guardian"");}"
"org.mockitousage.examples.use.ExampleTest.managerSavesArticlesInTheDatabase",0,"@Test public void managerSavesArticlesInTheDatabase(){articleManager.updateArticleCounters(""Guardian"");verify(mockDatabase).updateNumberOfArticles(""Guardian"",0);verify(mockDatabase).updateNumberOfPolishArticles(""Guardian"",0);verify(mockDatabase).updateNumberOfEnglishArticles(""Guardian"",0);}"
"org.mockitousage.examples.use.ExampleTest.managerUpdatesNumberOfRelatedArticles",0,"@Test public void managerUpdatesNumberOfRelatedArticles(){Article articleOne=new Article();Article articleTwo=new Article();Article articleThree=new Article();when(mockCalculator.countNumberOfRelatedArticles(articleOne)).thenReturn(1);when(mockCalculator.countNumberOfRelatedArticles(articleTwo)).thenReturn(12);when(mockCalculator.countNumberOfRelatedArticles(articleThree)).thenReturn(0);when(mockDatabase.getArticlesFor(""Guardian"")).thenReturn(Arrays.asList(articleOne,articleTwo,articleThree));articleManager.updateRelatedArticlesCounters(""Guardian"");verify(mockDatabase).save(articleOne);verify(mockDatabase).save(articleTwo);verify(mockDatabase).save(articleThree);}"
"org.mockitousage.examples.use.ExampleTest.shouldPersistRecalculatedArticle",0,"@Test public void shouldPersistRecalculatedArticle(){Article articleOne=new Article();Article articleTwo=new Article();when(mockCalculator.countNumberOfRelatedArticles(articleOne)).thenReturn(1);when(mockCalculator.countNumberOfRelatedArticles(articleTwo)).thenReturn(12);when(mockDatabase.getArticlesFor(""Guardian"")).thenReturn(Arrays.asList(articleOne,articleTwo));articleManager.updateRelatedArticlesCounters(""Guardian"");InOrder inOrder=inOrder(mockDatabase,mockCalculator);inOrder.verify(mockCalculator).countNumberOfRelatedArticles((Article)anyObject());inOrder.verify(mockDatabase,atLeastOnce()).save((Article)anyObject());}"
"org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldCreateMockFromInterface",0,"@Test public void shouldCreateMockFromInterface()throws Exception {SomeInterface proxy=ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(),SomeInterface.class);Class superClass=proxy.getClass().getSuperclass();assertEquals(Object.class,superClass);}"
"org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldCreateMockFromClass",0,"@Test public void shouldCreateMockFromClass()throws Exception {ClassWithoutConstructor proxy=ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(),ClassWithoutConstructor.class);Class superClass=proxy.getClass().getSuperclass();assertEquals(ClassWithoutConstructor.class,superClass);}"
"org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldCreateMockFromClassEvenWhenConstructorIsDodgy",0,"@Test public void shouldCreateMockFromClassEvenWhenConstructorIsDodgy()throws Exception {try {new ClassWithDodgyConstructor();fail();}catch(Exception e){}ClassWithDodgyConstructor mock=ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(),ClassWithDodgyConstructor.class);assertNotNull(mock);}"
"org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldMocksHaveDifferentInterceptors",0,"@Test public void shouldMocksHaveDifferentInterceptors()throws Exception {SomeClass mockOne=ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(),SomeClass.class);SomeClass mockTwo=ClassImposterizer.INSTANCE.imposterise(new MethodInterceptorStub(),SomeClass.class);Factory cglibFactoryOne=(Factory)mockOne;Factory cglibFactoryTwo=(Factory)mockTwo;assertNotSame(cglibFactoryOne.getCallback(0),cglibFactoryTwo.getCallback(0));}"
"org.mockito.internal.creation.jmock.ClassImposterizerTest.shouldUseAnicilliaryTypes",0,"@Test public void shouldUseAnicilliaryTypes(){}"
"org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowSettingNullInterface",0,"@Test(expected=MockitoException.class)public void shouldNotAllowSettingNullInterface(){mockSettingsImpl.extraInterfaces(List.class,null);}"
"org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNonInterfaces",0,"@Test(expected=MockitoException.class)public void shouldNotAllowNonInterfaces(){mockSettingsImpl.extraInterfaces(List.class,LinkedList.class);}"
"org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowUsingTheSameInterfaceAsExtra",0,"@Test(expected=MockitoException.class)public void shouldNotAllowUsingTheSameInterfaceAsExtra(){mockSettingsImpl.extraInterfaces(List.class,LinkedList.class);}"
"org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowEmptyExtraInterfaces",0,"@Test(expected=MockitoException.class)public void shouldNotAllowEmptyExtraInterfaces(){mockSettingsImpl.extraInterfaces();}"
"org.mockito.internal.creation.MockSettingsImplTest.shouldNotAllowNullArrayOfExtraInterfaces",0,"@Test(expected=MockitoException.class)public void shouldNotAllowNullArrayOfExtraInterfaces(){mockSettingsImpl.extraInterfaces((Class[])null);}"
"org.mockito.internal.creation.MockSettingsImplTest.shouldAllowMultipleInterfaces",0,"@Test public void shouldAllowMultipleInterfaces(){mockSettingsImpl.extraInterfaces(List.class,Set.class);assertEquals(List.class,mockSettingsImpl.getExtraInterfaces()[0]);assertEquals(Set.class,mockSettingsImpl.getExtraInterfaces()[1]);}"
"org.mockitousage.performance.LoadsOfMocksTest.testSomething",0,"@Ignore(""Use it for performance checks"")@Test public void testSomething(){List mocks=new LinkedList();for (int i=0;i < 50000;i++){System.out.println(""Mock no: "" + i);IMethods mock=mock(IMethods.class);mocks.add(mock);when(mock.simpleMethod(1)).thenReturn(""one"");when(mock.simpleMethod(2)).thenReturn(""two"");assertEquals(""one"",mock.simpleMethod(1));assertEquals(""two"",mock.simpleMethod(2));verify(mock).simpleMethod(1);verify(mock).simpleMethod(2);}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStub",0,"@Test public void shouldStub()throws Exception {doReturn(""foo"").when(mock).simpleMethod();doReturn(""bar"").when(mock).simpleMethod();assertEquals(""bar"",mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithArgs",0,"@Test public void shouldStubWithArgs()throws Exception {doReturn(""foo"").when(mock).simpleMethod(""foo"");doReturn(""bar"").when(mock).simpleMethod(eq(""one""),anyInt());assertEquals(""foo"",mock.simpleMethod(""foo""));assertEquals(""bar"",mock.simpleMethod(""one"",234));assertEquals(null,mock.simpleMethod(""xxx"",234));}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithThrowable",0,"@Test public void shouldStubWithThrowable()throws Exception {doThrow(new FooRuntimeException()).when(mock).voidMethod();try {mock.voidMethod();fail();}catch(FooRuntimeException e){}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowSettingValidCheckedException",0,"@Test public void shouldAllowSettingValidCheckedException()throws Exception {doThrow(new IOException()).when(mock).throwsIOException(0);try {mock.throwsIOException(0);fail();}catch(IOException e){}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectInvalidCheckedException",0,"@Test public void shouldDetectInvalidCheckedException()throws Exception {try {doThrow(new FooCheckedException()).when(mock).throwsIOException(0);fail();}catch(Exception e){assertContains(""Checked exception is invalid"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenReturnSetForVoid",0,"@Test public void shouldScreamWhenReturnSetForVoid()throws Exception {try {doReturn(""foo"").when(mock).voidMethod();fail();}catch(MockitoException e){assertContains(""Cannot stub a void method with a return value"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenNotAMockPassed",0,"@Test public void shouldScreamWhenNotAMockPassed()throws Exception {try {doReturn(""foo"").when(""foo"").toString();fail();}catch(Exception e){assertContains(""Argument passed to when()is not a mock"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldScreamWhenNullPassed",0,"@Test public void shouldScreamWhenNullPassed()throws Exception {try {doReturn(""foo"").when((Object)null).toString();fail();}catch(Exception e){assertContains(""Argument passed to when()is null"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbing",0,"@Test public void shouldAllowChainedStubbing(){doReturn(""foo"").doThrow(new RuntimeException()).doReturn(""bar"").when(mock).simpleMethod();assertEquals(""foo"",mock.simpleMethod());try {mock.simpleMethod();fail();}catch(RuntimeException e){}assertEquals(""bar"",mock.simpleMethod());assertEquals(""bar"",mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowChainedStubbingOnVoidMethods",0,"@Test public void shouldAllowChainedStubbingOnVoidMethods(){doNothing().doNothing().doThrow(new RuntimeException()).when(mock).voidMethod();mock.voidMethod();mock.voidMethod();try {mock.voidMethod();fail();}catch(RuntimeException e){}try {mock.voidMethod();fail();}catch(RuntimeException e){}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubWithGenericAnswer",0,"@Test public void shouldStubWithGenericAnswer(){doAnswer(new Answer<Object>(){public Object answer(InvocationOnMock invocation)throws Throwable {return ""foo"";}}).when(mock).simpleMethod();assertEquals(""foo"",mock.simpleMethod());}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldNotAllowDoNothingOnNonVoids",0,"@Test public void shouldNotAllowDoNothingOnNonVoids(){try {doNothing().when(mock).simpleMethod();fail();}catch(MockitoException e){assertContains(""Only void methods can doNothing()"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldStubbingBeTreatedAsInteraction",0,"@Test public void shouldStubbingBeTreatedAsInteraction()throws Exception {doReturn(""foo"").when(mock).simpleMethod();mock.simpleMethod();try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldVerifyStubbedCall",0,"@Test public void shouldVerifyStubbedCall()throws Exception {doReturn(""foo"").when(mock).simpleMethod();mock.simpleMethod();mock.simpleMethod();verify(mock,times(2)).simpleMethod();verifyNoMoreInteractions(mock);}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowStubbingToString",0,"@Test public void shouldAllowStubbingToString()throws Exception {doReturn(""test"").when(mock).toString();assertEquals(""test"",mock.toString());}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectInvalidReturnType",0,"@Test public void shouldDetectInvalidReturnType()throws Exception {try {doReturn(""foo"").when(mock).booleanObjectReturningMethod();fail();}catch(Exception e){assertContains(""String cannot be returned by booleanObjectReturningMethod()"" + ""\n"" + ""booleanObjectReturningMethod()should return Boolean"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldDetectWhenNullAssignedToBoolean",0,"@Test public void shouldDetectWhenNullAssignedToBoolean()throws Exception {try {doReturn(null).when(mock).intReturningMethod();fail();}catch(Exception e){assertContains(""null cannot be returned by intReturningMethod"",e.getMessage());}}"
"org.mockitousage.stubbing.StubbingUsingDoReturnTest.shouldAllowStubbingWhenTypesMatchSignature",0,"@Test public void shouldAllowStubbingWhenTypesMatchSignature()throws Exception {doReturn(""foo"").when(mock).objectReturningMethodNoArgs();doReturn(""foo"").when(mock).simpleMethod();doReturn(1).when(mock).intReturningMethod();doReturn(new Integer(2)).when(mock).intReturningMethod();}"
"org.mockitousage.internal.debugging.LocationTest.shouldLocationNotContainGetStackTraceMethod",0,"@Test public void shouldLocationNotContainGetStackTraceMethod(){assertContains(""shouldLocationNotContainGetStackTraceMethod"",new Location().toString());}"
"org.mockito.internal.matchers.MatchersPrinterTest.shouldGetArgumentsLine",0,"@Test public void shouldGetArgumentsLine(){String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1),new Equals(2)),new PrintSettings());assertEquals(""(1,2);"",line);}"
"org.mockito.internal.matchers.MatchersPrinterTest.shouldGetArgumentsBlock",0,"@Test public void shouldGetArgumentsBlock(){String line=printer.getArgumentsBlock((List)Arrays.asList(new Equals(1),new Equals(2)),new PrintSettings());assertEquals(""(\n    1,\n    2\n);"",line);}"
"org.mockito.internal.matchers.MatchersPrinterTest.shouldDescribeTypeInfoOnlyMarkedMatchers",0,"@Test public void shouldDescribeTypeInfoOnlyMarkedMatchers(){String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1L),new Equals(2)),PrintSettings.verboseMatchers(1));assertEquals(""(1,(Integer)2);"",line);}"
"org.mockito.internal.matchers.MatchersPrinterTest.shouldGetVerboseArgumentsInBlock",0,"@Test public void shouldGetVerboseArgumentsInBlock(){String line=printer.getArgumentsBlock((List)Arrays.asList(new Equals(1L),new Equals(2)),PrintSettings.verboseMatchers(0,1));assertEquals(""(\n    (Long)1,\n    (Integer)2\n);"",line);}"
"org.mockito.internal.matchers.MatchersPrinterTest.shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose",0,"@Test public void shouldGetVerboseArgumentsEvenIfSomeMatchersAreNotVerbose(){String line=printer.getArgumentsLine((List)Arrays.asList(new Equals(1L),NotNull.NOT_NULL),PrintSettings.verboseMatchers(0));assertEquals(""((Long)1,notNull());"",line);}"
"org.mockito.internal.AllInvocationsFinderTest.shouldGetAllInvocationsInOrder",0,"@Test public void shouldGetAllInvocationsInOrder()throws Exception {mockOne.simpleMethod(100);mockTwo.simpleMethod(200);mockOne.simpleMethod(300);List<Invocation> invocations=finder.getAllInvocations(asList(mockOne,mockTwo));assertEquals(3,invocations.size());assertArgumentEquals(100,invocations.get(0));assertArgumentEquals(200,invocations.get(1));assertArgumentEquals(300,invocations.get(2));}"
"org.mockito.internal.verification.RegisteredInvocationsTest.shouldNotReturnToStringMethod",0,"@Test public void shouldNotReturnToStringMethod()throws Exception {Invocation toString=new InvocationBuilder().method(""toString"").toInvocation();Invocation simpleMethod=new InvocationBuilder().simpleMethod().toInvocation();invocations.add(toString);invocations.add(simpleMethod);assertTrue(invocations.getAll().contains(simpleMethod));assertFalse(invocations.getAll().contains(toString));}"
"org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument",1,"@Test public void shouldAllowPassingNullArgument(){Fun mockFun=mock(Fun.class);when(mockFun.doFun((String)anyObject())).thenReturn(""value"");mockFun.doFun(null);try {verify(mockFun).doFun(""hello"");}catch(AssertionError r){}}"
"org.mockitousage.stacktrace.ClickableStackTracesTest.shouldShowActualAndExpectedWhenArgumentsAreDifferent",0,"@Test public void shouldShowActualAndExpectedWhenArgumentsAreDifferent(){callMethodOnMock(""foo"");try {verifyTheMock(1,""not foo"");fail();}catch(ArgumentsAreDifferent e){assertContains(""callMethodOnMock("",e.getMessage());assertContains(""verifyTheMock("",e.getMessage());}}"
"org.mockitousage.junitrunner.ModellingVerboseMockitoTest.shouldLogUnusedStubbingWarningWhenTestFails",0,"@Ignore @Test public void shouldLogUnusedStubbingWarningWhenTestFails()throws Exception {when(mock.simpleMethod()).thenReturn(""foo"");fail();}"
"org.mockitousage.stubbing.ReturningMockValuesTest.should",0,"@Test public void should()throws Exception {}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldMixVerificationInOrderAndOrdinaryVerification",0,"@Test public void shouldMixVerificationInOrderAndOrdinaryVerification(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockThree).simpleMethod(4);verify(mockTwo).simpleMethod(2);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowOrdinarilyVerifyingMockPassedToInOrderObject",0,"@Test public void shouldAllowOrdinarilyVerifyingMockPassedToInOrderObject(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);verify(mockThree).simpleMethod(3);verify(mockThree).simpleMethod(4);verify(mockTwo).simpleMethod(2);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowRedundantVerifications",0,"@Test public void shouldAllowRedundantVerifications(){verify(mockOne,atLeastOnce()).simpleMethod(1);verify(mockTwo).simpleMethod(2);verify(mockThree).simpleMethod(3);verify(mockThree).simpleMethod(4);inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockThree).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnNoMoreInteractions",0,"@Test public void shouldFailOnNoMoreInteractions(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockThree).simpleMethod(4);try {verifyNoMoreInteractions(mockOne,mockTwo,mockThree);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnNoMoreInteractionsOnMockVerifiedInOrder",0,"@Test public void shouldFailOnNoMoreInteractionsOnMockVerifiedInOrder(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockThree).simpleMethod(3);verify(mockTwo).simpleMethod(2);try {verifyNoMoreInteractions(mockOne,mockTwo,mockThree);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldAllowOneMethodVerifiedInOrder",0,"@Test public void shouldAllowOneMethodVerifiedInOrder(){verify(mockTwo).simpleMethod(2);verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldFailOnLastInvocationTooEarly",0,"@Test public void shouldFailOnLastInvocationTooEarly(){inOrder.verify(mockThree).simpleMethod(4);verify(mockThree).simpleMethod(4);verify(mockTwo).simpleMethod(2);try {inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldScreamWhenUnfamiliarMockPassedToInOrderObject",0,"@Test(expected=MockitoException.class)public void shouldScreamWhenUnfamiliarMockPassedToInOrderObject(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(1);}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldUseEqualsToVerifyMethodArguments",0,"@Test public void shouldUseEqualsToVerifyMethodArguments(){mockOne=mock(IMethods.class);String textOne=""test"";String textTwo=new String(textOne);assertEquals(textOne,textTwo);assertNotSame(textOne,textTwo);mockOne.simpleMethod(textOne);mockOne.simpleMethod(textTwo);verify(mockOne,times(2)).simpleMethod(textOne);inOrder=inOrder(mockOne);inOrder.verify(mockOne,times(2)).simpleMethod(textOne);}"
"org.mockitousage.verification.VerificationInOrderMixedWithOrdiraryVerificationTest.shouldUseEqualsToVerifyMethodVarargs",0,"@Test public void shouldUseEqualsToVerifyMethodVarargs(){mockOne=mock(IMethods.class);String textOne=""test"";String textTwo=new String(textOne);assertEquals(textOne,textTwo);assertNotSame(textOne,textTwo);mockOne.varargsObject(1,textOne,textOne);mockOne.varargsObject(1,textTwo,textTwo);verify(mockOne,times(2)).varargsObject(1,textOne,textOne);inOrder=inOrder(mockOne);inOrder.verify(mockOne,times(2)).varargsObject(1,textOne,textOne);}"
"org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest.shouldVerifyActualNumberOfInvocationsSmallerThanWanted",0,"@Test public void shouldVerifyActualNumberOfInvocationsSmallerThanWanted()throws Exception {mock.clear();mock.clear();mock.clear();Mockito.verify(mock,times(3)).clear();try {Mockito.verify(mock,times(100)).clear();fail();}catch(TooLittleActualInvocations e){assertContains(""mock.clear();"",e.getMessage());assertContains(""Wanted 100 times"",e.getMessage());assertContains(""was 3"",e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesWhenTimesXVerificationFailsTest.shouldVerifyActualNumberOfInvocationsLargerThanWanted",0,"@Test public void shouldVerifyActualNumberOfInvocationsLargerThanWanted()throws Exception {mock.clear();mock.clear();mock.clear();mock.clear();Mockito.verify(mock,times(4)).clear();try {Mockito.verify(mock,times(1)).clear();fail();}catch(TooManyActualInvocations e){assertContains(""mock.clear();"",e.getMessage());assertContains(""Wanted 1 time"",e.getMessage());assertContains(""was 4"",e.getMessage());}}"
"org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail",0,"@Test public void shouldShowAllInteractionsOnMockWhenOrdinaryVerificationFail()throws Exception {firstInteraction();secondInteraction();try {verify(mock).simpleMethod();fail();}catch(WantedButNotInvoked e){assertContains(""However,there were other interactions with this mock"",e.getMessage());assertContains(""firstInteraction("",e.getMessage());assertContains(""secondInteraction("",e.getMessage());}}"
"org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldNotShowAllInteractionsOnDifferentMock",0,"@Test public void shouldNotShowAllInteractionsOnDifferentMock()throws Exception {differentMockInteraction();firstInteraction();try {verify(mock).simpleMethod();fail();}catch(WantedButNotInvoked e){assertContains(""firstInteraction("",e.getMessage());assertNotContains(""differentMockInteraction("",e.getMessage());}}"
"org.mockitousage.verification.OrdinaryVerificationPrintsAllInteractionsTest.shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions",0,"@Test public void shouldNotShowAllInteractionsHeaderWhenNoOtherInteractions()throws Exception {try {verify(mock).simpleMethod();fail();}catch(WantedButNotInvoked e){assertContains(""there were zero interactions with this mock."",e.getMessage());}}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportTooLittleActual",0,"@Test public void shouldReportTooLittleActual()throws Exception {finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());checker.check(invocations,wanted,100);assertEquals(1,reporterStub.actualCount);assertEquals(100,reporterStub.wantedCount);assertEquals(wanted,reporterStub.wanted);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportWithLastInvocationStackTrace",0,"@Test public void shouldReportWithLastInvocationStackTrace()throws Exception {Invocation first=new InvocationBuilder().toInvocation();Invocation second=new InvocationBuilder().toInvocation();finderStub.actualToReturn.addAll(asList(first,second));checker.check(invocations,wanted,100);assertSame(second.getLocation(),reporterStub.location);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound",0,"@Test public void shouldNotReportWithLastInvocationStackTraceIfNoInvocationsFound()throws Exception {assertTrue(finderStub.actualToReturn.isEmpty());checker.check(invocations,wanted,100);assertNull(reporterStub.location);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportWithFirstUndesiredInvocationStackTrace",0,"@Test public void shouldReportWithFirstUndesiredInvocationStackTrace()throws Exception {Invocation first=new InvocationBuilder().toInvocation();Invocation second=new InvocationBuilder().toInvocation();Invocation third=new InvocationBuilder().toInvocation();finderStub.actualToReturn.addAll(asList(first,second,third));checker.check(invocations,wanted,2);assertSame(third.getLocation(),reporterStub.location);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportTooManyActual",0,"@Test public void shouldReportTooManyActual()throws Exception {finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());checker.check(invocations,wanted,1);assertEquals(2,reporterStub.actualCount);assertEquals(1,reporterStub.wantedCount);assertEquals(wanted,reporterStub.wanted);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldReportNeverWantedButInvoked",0,"@Test public void shouldReportNeverWantedButInvoked()throws Exception {Invocation invocation=new InvocationBuilder().toInvocation();finderStub.actualToReturn.add(invocation);checker.check(invocations,wanted,0);assertEquals(wanted,reporterStub.wanted);assertEquals(invocation.getLocation(),reporterStub.location);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsCheckerTest.shouldMarkInvocationsAsVerified",0,"@Test public void shouldMarkInvocationsAsVerified()throws Exception {Invocation invocation=new InvocationBuilder().toInvocation();finderStub.actualToReturn.add(invocation);assertFalse(invocation.isVerified());checker.check(invocations,wanted,1);assertTrue(invocation.isVerified());}"
"org.mockitousage.matchers.MatchersTest.andOverloaded",0,"@Test public void andOverloaded(){when(mock.oneArg(and(eq(false),eq(false)))).thenReturn(""0"");when(mock.oneArg(and(eq((byte)1),eq((byte)1)))).thenReturn(""1"");when(mock.oneArg(and(eq('a'),eq('a')))).thenReturn(""2"");when(mock.oneArg(and(eq((double)1),eq((double)1)))).thenReturn(""3"");when(mock.oneArg(and(eq((float)1),eq((float)1)))).thenReturn(""4"");when(mock.oneArg(and(eq((int)1),eq((int)1)))).thenReturn(""5"");when(mock.oneArg(and(eq((long)1),eq((long)1)))).thenReturn(""6"");when(mock.oneArg(and(eq((short)1),eq((short)1)))).thenReturn(""7"");when(mock.oneArg(and(Matchers.contains(""a""),Matchers.contains(""d"")))).thenReturn(""8"");when(mock.oneArg(and(isA(Class.class),eq(Object.class)))).thenReturn(""9"");assertEquals(""0"",mock.oneArg(false));assertEquals(null,mock.oneArg(true));assertEquals(""1"",mock.oneArg((byte)1));assertEquals(""2"",mock.oneArg('a'));assertEquals(""3"",mock.oneArg((double)1));assertEquals(""4"",mock.oneArg((float)1));assertEquals(""5"",mock.oneArg((int)1));assertEquals(""6"",mock.oneArg((long)1));assertEquals(""7"",mock.oneArg((short)1));assertEquals(""8"",mock.oneArg(""abcde""));assertEquals(null,mock.oneArg(""aaaaa""));assertEquals(""9"",mock.oneArg(Object.class));}"
"org.mockitousage.matchers.MatchersTest.orOverloaded",0,"@Test public void orOverloaded(){when(mock.oneArg(or(eq(false),eq(true)))).thenReturn(""0"");when(mock.oneArg(or(eq((byte)1),eq((byte)2)))).thenReturn(""1"");when(mock.oneArg(or(eq((char)1),eq((char)2)))).thenReturn(""2"");when(mock.oneArg(or(eq((double)1),eq((double)2)))).thenReturn(""3"");when(mock.oneArg(or(eq((float)1),eq((float)2)))).thenReturn(""4"");when(mock.oneArg(or(eq((int)1),eq((int)2)))).thenReturn(""5"");when(mock.oneArg(or(eq((long)1),eq((long)2)))).thenReturn(""6"");when(mock.oneArg(or(eq((short)1),eq((short)2)))).thenReturn(""7"");when(mock.oneArg(or(eq(""asd""),eq(""jkl"")))).thenReturn(""8"");when(mock.oneArg(or(eq(this.getClass()),eq(Object.class)))).thenReturn(""9"");assertEquals(""0"",mock.oneArg(true));assertEquals(""0"",mock.oneArg(false));assertEquals(""1"",mock.oneArg((byte)2));assertEquals(""2"",mock.oneArg((char)1));assertEquals(""3"",mock.oneArg((double)2));assertEquals(""4"",mock.oneArg((float)1));assertEquals(""5"",mock.oneArg((int)2));assertEquals(""6"",mock.oneArg((long)1));assertEquals(""7"",mock.oneArg((short)1));assertEquals(""8"",mock.oneArg(""jkl""));assertEquals(""8"",mock.oneArg(""asd""));assertEquals(null,mock.oneArg(""asdjkl""));assertEquals(""9"",mock.oneArg(Object.class));assertEquals(null,mock.oneArg(String.class));}"
"org.mockitousage.matchers.MatchersTest.notOverloaded",0,"@Test public void notOverloaded(){when(mock.oneArg(not(eq(false)))).thenReturn(""0"");when(mock.oneArg(not(eq((byte)1)))).thenReturn(""1"");when(mock.oneArg(not(eq('a')))).thenReturn(""2"");when(mock.oneArg(not(eq((double)1)))).thenReturn(""3"");when(mock.oneArg(not(eq((float)1)))).thenReturn(""4"");when(mock.oneArg(not(eq((int)1)))).thenReturn(""5"");when(mock.oneArg(not(eq((long)1)))).thenReturn(""6"");when(mock.oneArg(not(eq((short)1)))).thenReturn(""7"");when(mock.oneArg(not(Matchers.contains(""a"")))).thenReturn(""8"");when(mock.oneArg(not(isA(Class.class)))).thenReturn(""9"");assertEquals(""0"",mock.oneArg(true));assertEquals(null,mock.oneArg(false));assertEquals(""1"",mock.oneArg((byte)2));assertEquals(""2"",mock.oneArg('b'));assertEquals(""3"",mock.oneArg((double)2));assertEquals(""4"",mock.oneArg((float)2));assertEquals(""5"",mock.oneArg((int)2));assertEquals(""6"",mock.oneArg((long)2));assertEquals(""7"",mock.oneArg((short)2));assertEquals(""8"",mock.oneArg(""bcde""));assertEquals(""9"",mock.oneArg(new Object()));assertEquals(null,mock.oneArg(Class.class));}"
"org.mockitousage.matchers.MatchersTest.lessOrEqualOverloaded",0,"@Test public void lessOrEqualOverloaded(){when(mock.oneArg(leq((byte)1))).thenReturn(""1"");when(mock.oneArg(leq((double)1))).thenReturn(""3"");when(mock.oneArg(leq((float)1))).thenReturn(""4"");when(mock.oneArg(leq((int)1))).thenReturn(""5"");when(mock.oneArg(leq((long)1))).thenReturn(""6"");when(mock.oneArg(leq((short)1))).thenReturn(""7"");when(mock.oneArg(leq(new BigDecimal(""1"")))).thenReturn(""8"");assertEquals(""1"",mock.oneArg((byte)1));assertEquals(null,mock.oneArg((byte)2));assertEquals(""3"",mock.oneArg((double)1));assertEquals(""7"",mock.oneArg((short)0));assertEquals(""4"",mock.oneArg((float)-5));assertEquals(""5"",mock.oneArg((int)-2));assertEquals(""6"",mock.oneArg((long)-3));assertEquals(""8"",mock.oneArg(new BigDecimal(""0.5"")));assertEquals(null,mock.oneArg(new BigDecimal(""1.1"")));}"
"org.mockitousage.matchers.MatchersTest.lessThanOverloaded",0,"@Test public void lessThanOverloaded(){when(mock.oneArg(lt((byte)1))).thenReturn(""1"");when(mock.oneArg(lt((double)1))).thenReturn(""3"");when(mock.oneArg(lt((float)1))).thenReturn(""4"");when(mock.oneArg(lt((int)1))).thenReturn(""5"");when(mock.oneArg(lt((long)1))).thenReturn(""6"");when(mock.oneArg(lt((short)1))).thenReturn(""7"");when(mock.oneArg(lt(new BigDecimal(""1"")))).thenReturn(""8"");assertEquals(""1"",mock.oneArg((byte)0));assertEquals(null,mock.oneArg((byte)1));assertEquals(""3"",mock.oneArg((double)0));assertEquals(""7"",mock.oneArg((short)0));assertEquals(""4"",mock.oneArg((float)-4));assertEquals(""5"",mock.oneArg((int)-34));assertEquals(""6"",mock.oneArg((long)-6));assertEquals(""8"",mock.oneArg(new BigDecimal(""0.5"")));assertEquals(null,mock.oneArg(new BigDecimal(""23"")));}"
"org.mockitousage.matchers.MatchersTest.greaterOrEqualMatcherOverloaded",0,"@Test public void greaterOrEqualMatcherOverloaded(){when(mock.oneArg(geq((byte)1))).thenReturn(""1"");when(mock.oneArg(geq((double)1))).thenReturn(""3"");when(mock.oneArg(geq((float)1))).thenReturn(""4"");when(mock.oneArg(geq((int)1))).thenReturn(""5"");when(mock.oneArg(geq((long)1))).thenReturn(""6"");when(mock.oneArg(geq((short)1))).thenReturn(""7"");when(mock.oneArg(geq(new BigDecimal(""1"")))).thenReturn(""8"");assertEquals(""1"",mock.oneArg((byte)2));assertEquals(null,mock.oneArg((byte)0));assertEquals(""3"",mock.oneArg((double)1));assertEquals(""7"",mock.oneArg((short)2));assertEquals(""4"",mock.oneArg((float)3));assertEquals(""5"",mock.oneArg((int)4));assertEquals(""6"",mock.oneArg((long)5));assertEquals(""8"",mock.oneArg(new BigDecimal(""1.00"")));assertEquals(null,mock.oneArg(new BigDecimal(""0.9"")));}"
"org.mockitousage.matchers.MatchersTest.greaterThanMatcherOverloaded",0,"@Test public void greaterThanMatcherOverloaded(){when(mock.oneArg(gt((byte)1))).thenReturn(""1"");when(mock.oneArg(gt((double)1))).thenReturn(""3"");when(mock.oneArg(gt((float)1))).thenReturn(""4"");when(mock.oneArg(gt((int)1))).thenReturn(""5"");when(mock.oneArg(gt((long)1))).thenReturn(""6"");when(mock.oneArg(gt((short)1))).thenReturn(""7"");when(mock.oneArg(gt(new BigDecimal(""1"")))).thenReturn(""8"");assertEquals(""1"",mock.oneArg((byte)2));assertEquals(null,mock.oneArg((byte)1));assertEquals(""3"",mock.oneArg((double)2));assertEquals(""7"",mock.oneArg((short)2));assertEquals(""4"",mock.oneArg((float)3));assertEquals(""5"",mock.oneArg((int)2));assertEquals(""6"",mock.oneArg((long)5));assertEquals(""8"",mock.oneArg(new BigDecimal(""1.5"")));assertEquals(null,mock.oneArg(new BigDecimal(""0.9"")));}"
"org.mockitousage.matchers.MatchersTest.compareToMatcher",0,"@Test public void compareToMatcher(){when(mock.oneArg(cmpEq(new BigDecimal(""1.5"")))).thenReturn(""0"");assertEquals(""0"",mock.oneArg(new BigDecimal(""1.50"")));assertEquals(null,mock.oneArg(new BigDecimal(""1.51"")));}"
"org.mockitousage.matchers.MatchersTest.anyStringMatcher",0,"@Test public void anyStringMatcher(){when(mock.oneArg(anyString())).thenReturn(""1"");assertEquals(""1"",mock.oneArg(""""));assertEquals(""1"",mock.oneArg(""any string""));assertEquals(null,mock.oneArg((Object)null));}"
"org.mockitousage.matchers.MatchersTest.anyMatcher",0,"@Test public void anyMatcher(){when(mock.oneArg(anyBoolean())).thenReturn(""0"");when(mock.oneArg(anyByte())).thenReturn(""1"");when(mock.oneArg(anyChar())).thenReturn(""2"");when(mock.oneArg(anyDouble())).thenReturn(""3"");when(mock.oneArg(anyFloat())).thenReturn(""4"");when(mock.oneArg(anyInt())).thenReturn(""5"");when(mock.oneArg(anyLong())).thenReturn(""6"");when(mock.oneArg(anyShort())).thenReturn(""7"");when(mock.oneArg((String)anyObject())).thenReturn(""8"");when(mock.oneArg(anyObject())).thenReturn(""9"");assertEquals(""0"",mock.oneArg(true));assertEquals(""0"",mock.oneArg(false));assertEquals(""1"",mock.oneArg((byte)1));assertEquals(""2"",mock.oneArg((char)1));assertEquals(""3"",mock.oneArg((double)1));assertEquals(""4"",mock.oneArg((float)889));assertEquals(""5"",mock.oneArg((int)1));assertEquals(""6"",mock.oneArg((long)1));assertEquals(""7"",mock.oneArg((short)1));assertEquals(""8"",mock.oneArg(""Test""));assertEquals(""9"",mock.oneArg(new Object()));assertEquals(""9"",mock.oneArg(new HashMap()));}"
"org.mockitousage.matchers.MatchersTest.shouldArrayEqualsDealWithNullArray",0,"@Test public void shouldArrayEqualsDealWithNullArray()throws Exception {Object[]nullArray=null;when(mock.oneArray(aryEq(nullArray))).thenReturn(""null"");assertEquals(""null"",mock.oneArray(nullArray));mock=mock(IMethods.class);try {verify(mock).oneArray(aryEq(nullArray));fail();}catch(WantedButNotInvoked e){assertContains(""oneArray(null)"",e.getMessage());}}"
"org.mockitousage.matchers.MatchersTest.arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments",0,"@Test(expected=ArgumentsAreDifferent.class)public void arrayEqualsShouldThrowArgumentsAreDifferentExceptionForNonMatchingArguments(){List list=Mockito.mock(List.class);list.add(""test"");list.contains(new Object[]{""1""});Mockito.verify(list).contains(new Object[]{""1"",""2"",""3""});}"
"org.mockitousage.matchers.MatchersTest.arrayEqualsMatcher",0,"@Test public void arrayEqualsMatcher(){when(mock.oneArray(aryEq(new boolean[]{true,false,false}))).thenReturn(""0"");when(mock.oneArray(aryEq(new byte[]{1}))).thenReturn(""1"");when(mock.oneArray(aryEq(new char[]{1}))).thenReturn(""2"");when(mock.oneArray(aryEq(new double[]{1}))).thenReturn(""3"");when(mock.oneArray(aryEq(new float[]{1}))).thenReturn(""4"");when(mock.oneArray(aryEq(new int[]{1}))).thenReturn(""5"");when(mock.oneArray(aryEq(new long[]{1}))).thenReturn(""6"");when(mock.oneArray(aryEq(new short[]{1}))).thenReturn(""7"");when(mock.oneArray(aryEq(new String[]{""Test""}))).thenReturn(""8"");when(mock.oneArray(aryEq(new Object[]{""Test"",new Integer(4)}))).thenReturn(""9"");assertEquals(""0"",mock.oneArray(new boolean[]{true,false,false}));assertEquals(""1"",mock.oneArray(new byte[]{1}));assertEquals(""2"",mock.oneArray(new char[]{1}));assertEquals(""3"",mock.oneArray(new double[]{1}));assertEquals(""4"",mock.oneArray(new float[]{1}));assertEquals(""5"",mock.oneArray(new int[]{1}));assertEquals(""6"",mock.oneArray(new long[]{1}));assertEquals(""7"",mock.oneArray(new short[]{1}));assertEquals(""8"",mock.oneArray(new String[]{""Test""}));assertEquals(""9"",mock.oneArray(new Object[]{""Test"",new Integer(4)}));assertEquals(null,mock.oneArray(new Object[]{""Test"",new Integer(999)}));assertEquals(null,mock.oneArray(new Object[]{""Test"",new Integer(4),""x""}));assertEquals(null,mock.oneArray(new boolean[]{true,false}));assertEquals(null,mock.oneArray(new boolean[]{true,true,false}));}"
"org.mockitousage.matchers.MatchersTest.greaterOrEqualMatcher",0,"@Test public void greaterOrEqualMatcher(){when(mock.oneArg(geq(7))).thenReturn("">= 7"");when(mock.oneArg(lt(7))).thenReturn(""< 7"");assertEquals("">= 7"",mock.oneArg(7));assertEquals("">= 7"",mock.oneArg(8));assertEquals("">= 7"",mock.oneArg(9));assertEquals(""< 7"",mock.oneArg(6));assertEquals(""< 7"",mock.oneArg(6));}"
"org.mockitousage.matchers.MatchersTest.greaterThanMatcher",0,"@Test public void greaterThanMatcher(){when(mock.oneArg(gt(7))).thenReturn(""> 7"");when(mock.oneArg(leq(7))).thenReturn(""<= 7"");assertEquals(""> 7"",mock.oneArg(8));assertEquals(""> 7"",mock.oneArg(9));assertEquals(""> 7"",mock.oneArg(10));assertEquals(""<= 7"",mock.oneArg(7));assertEquals(""<= 7"",mock.oneArg(6));}"
"org.mockitousage.matchers.MatchersTest.lessOrEqualMatcher",0,"@Test public void lessOrEqualMatcher(){when(mock.oneArg(leq(7))).thenReturn(""<= 7"");when(mock.oneArg(gt(7))).thenReturn(""> 7"");assertEquals(""<= 7"",mock.oneArg(7));assertEquals(""<= 7"",mock.oneArg(6));assertEquals(""<= 7"",mock.oneArg(5));assertEquals(""> 7"",mock.oneArg(8));assertEquals(""> 7"",mock.oneArg(9));}"
"org.mockitousage.matchers.MatchersTest.lessThanMatcher",0,"@Test public void lessThanMatcher(){when(mock.oneArg(lt(7))).thenReturn(""< 7"");when(mock.oneArg(geq(7))).thenReturn("">= 7"");assertEquals(""< 7"",mock.oneArg(5));assertEquals(""< 7"",mock.oneArg(6));assertEquals(""< 7"",mock.oneArg(4));assertEquals("">= 7"",mock.oneArg(7));assertEquals("">= 7"",mock.oneArg(8));}"
"org.mockitousage.matchers.MatchersTest.orMatcher",0,"@Test public void orMatcher(){when(mock.oneArg(anyInt())).thenReturn(""other"");when(mock.oneArg(or(eq(7),eq(9)))).thenReturn(""7 or 9"");assertEquals(""other"",mock.oneArg(10));assertEquals(""7 or 9"",mock.oneArg(7));assertEquals(""7 or 9"",mock.oneArg(9));}"
"org.mockitousage.matchers.MatchersTest.nullMatcher",0,"@Test public void nullMatcher(){when(mock.threeArgumentMethod(eq(1),isNull(),eq(""""))).thenReturn(""1"");when(mock.threeArgumentMethod(eq(1),not(isNull()),eq(""""))).thenReturn(""2"");assertEquals(""1"",mock.threeArgumentMethod(1,null,""""));assertEquals(""2"",mock.threeArgumentMethod(1,new Object(),""""));}"
"org.mockitousage.matchers.MatchersTest.notNullMatcher",0,"@Test public void notNullMatcher(){when(mock.threeArgumentMethod(eq(1),notNull(),eq(""""))).thenReturn(""1"");when(mock.threeArgumentMethod(eq(1),not(isNotNull()),eq(""""))).thenReturn(""2"");assertEquals(""1"",mock.threeArgumentMethod(1,new Object(),""""));assertEquals(""2"",mock.threeArgumentMethod(1,null,""""));}"
"org.mockitousage.matchers.MatchersTest.findMatcher",0,"@Test public void findMatcher(){when(mock.oneArg(find(""([a-z]+)\\d""))).thenReturn(""1"");assertEquals(""1"",mock.oneArg(""ab12""));assertEquals(null,mock.oneArg(""12345""));assertEquals(null,mock.oneArg((Object)null));}"
"org.mockitousage.matchers.MatchersTest.matchesMatcher",0,"@Test public void matchesMatcher(){when(mock.oneArg(matches(""[a-z]+\\d\\d""))).thenReturn(""1"");when(mock.oneArg(matches(""\\d\\d\\d""))).thenReturn(""2"");assertEquals(""1"",mock.oneArg(""a12""));assertEquals(""2"",mock.oneArg(""131""));assertEquals(null,mock.oneArg(""blah""));}"
"org.mockitousage.matchers.MatchersTest.containsMatcher",0,"@Test public void containsMatcher(){when(mock.oneArg(Matchers.contains(""ell""))).thenReturn(""1"");when(mock.oneArg(Matchers.contains(""ld""))).thenReturn(""2"");assertEquals(""1"",mock.oneArg(""hello""));assertEquals(""2"",mock.oneArg(""world""));assertEquals(null,mock.oneArg(""xlx""));}"
"org.mockitousage.matchers.MatchersTest.startsWithMatcher",0,"@Test public void startsWithMatcher(){when(mock.oneArg(startsWith(""ab""))).thenReturn(""1"");when(mock.oneArg(startsWith(""bc""))).thenReturn(""2"");assertEquals(""1"",mock.oneArg(""ab quake""));assertEquals(""2"",mock.oneArg(""bc quake""));assertEquals(null,mock.oneArg(""ba quake""));}"
"org.mockitousage.matchers.MatchersTest.endsWithMatcher",0,"@Test public void endsWithMatcher(){when(mock.oneArg(Matchers.endsWith(""ab""))).thenReturn(""1"");when(mock.oneArg(Matchers.endsWith(""bc""))).thenReturn(""2"");assertEquals(""1"",mock.oneArg(""xab""));assertEquals(""2"",mock.oneArg(""xbc""));assertEquals(null,mock.oneArg(""ac""));}"
"org.mockitousage.matchers.MatchersTest.deltaMatcher",0,"@Test public void deltaMatcher(){when(mock.oneArg(eq(1.0D,0.1D))).thenReturn(""1"");when(mock.oneArg(eq(2.0D,0.1D))).thenReturn(""2"");when(mock.oneArg(eq(1.0F,0.1F))).thenReturn(""3"");when(mock.oneArg(eq(2.0F,0.1F))).thenReturn(""4"");when(mock.oneArg(eq(2.0F,0.1F))).thenReturn(""4"");assertEquals(""1"",mock.oneArg(1.0));assertEquals(""1"",mock.oneArg(0.91));assertEquals(""1"",mock.oneArg(1.09));assertEquals(""2"",mock.oneArg(2.0));assertEquals(""3"",mock.oneArg(1.0F));assertEquals(""3"",mock.oneArg(0.91F));assertEquals(""3"",mock.oneArg(1.09F));assertEquals(""4"",mock.oneArg(2.1F));assertEquals(null,mock.oneArg(2.2F));}"
"org.mockitousage.matchers.MatchersTest.deltaMatcherPrintsItself",0,"@Test public void deltaMatcherPrintsItself(){try {verify(mock).oneArg(eq(1.0D,0.1D));fail();}catch(WantedButNotInvoked e){assertContains(""eq(1.0,0.1)"",e.getMessage());}}"
"org.mockitousage.matchers.MatchersTest.sameMatcher",0,"@Test public void sameMatcher(){Object one=new String(""1243"");Object two=new String(""1243"");Object three=new String(""1243"");assertNotSame(one,two);assertEquals(one,two);assertEquals(two,three);when(mock.oneArg(same(one))).thenReturn(""1"");when(mock.oneArg(same(two))).thenReturn(""2"");assertEquals(""1"",mock.oneArg(one));assertEquals(""2"",mock.oneArg(two));assertEquals(null,mock.oneArg(three));}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerify",0,"@Test public void shouldVerify(){spy.add(""one"");spy.add(""two"");assertEquals(""one"",spy.get(0));assertEquals(""two"",spy.get(1));verify(spy).add(""one"");verify(spy).add(""two"");}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStub",0,"@Test public void shouldStub(){spy.add(""one"");when(spy.get(0)).thenReturn(""1"").thenReturn(""1 again"");assertEquals(""1"",spy.get(0));assertEquals(""1 again"",spy.get(0));assertEquals(""one"",spy.iterator().next());assertEquals(1,spy.size());}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldAllowOverridingStubs",0,"@Test public void shouldAllowOverridingStubs(){when(spy.contains(anyObject())).thenReturn(true);when(spy.contains(""foo"")).thenReturn(false);assertTrue(spy.contains(""bar""));assertFalse(spy.contains(""foo""));}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStubVoid",0,"@SuppressWarnings(""deprecation"")@Test public void shouldStubVoid(){stubVoid(spy).toReturn().toThrow(new RuntimeException()).on().clear();spy.add(""one"");spy.clear();try {spy.clear();fail();}catch(RuntimeException e){}assertEquals(1,spy.size());}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldStubWithDoReturnAndVerify",0,"@Test public void shouldStubWithDoReturnAndVerify(){doReturn(""foo"").doReturn(""bar"").when(spy).get(0);assertEquals(""foo"",spy.get(0));assertEquals(""bar"",spy.get(0));verify(spy,times(2)).get(0);verifyNoMoreInteractions(spy);}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyInOrder",0,"@Test public void shouldVerifyInOrder(){spy.add(""one"");spy.add(""two"");InOrder inOrder=inOrder(spy);inOrder.verify(spy).add(""one"");inOrder.verify(spy).add(""two"");verifyNoMoreInteractions(spy);}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyInOrderAndFail",0,"@Test public void shouldVerifyInOrderAndFail(){spy.add(""one"");spy.add(""two"");InOrder inOrder=inOrder(spy);inOrder.verify(spy).add(""two"");try {inOrder.verify(spy).add(""one"");fail();}catch(VerificationInOrderFailure f){}}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNumberOfTimes",0,"@Test public void shouldVerifyNumberOfTimes(){spy.add(""one"");spy.add(""one"");verify(spy,times(2)).add(""one"");verifyNoMoreInteractions(spy);}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNumberOfTimesAndFail",0,"@Test public void shouldVerifyNumberOfTimesAndFail(){spy.add(""one"");spy.add(""one"");try {verify(spy,times(3)).add(""one"");fail();}catch(TooLittleActualInvocations e){}}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldVerifyNoMoreInteractionsAndFail",0,"@Test public void shouldVerifyNoMoreInteractionsAndFail(){spy.add(""one"");spy.add(""two"");verify(spy).add(""one"");try {verifyNoMoreInteractions(spy);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldToString",0,"@Test public void shouldToString(){spy.add(""foo"");assertEquals(""[foo]"",spy.toString());}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldDealWithAnonymousClasses",0,"@Test public void shouldDealWithAnonymousClasses(){try {spy(new Foo(){});fail();}catch(MockitoException e){assertContains(""cannot mock"",e.getMessage());}}"
"org.mockitousage.spies.SpyingOnRealObjectsTest.shouldSayNiceMessageWhenSpyingOnPrivateClass",0,"@Test public void shouldSayNiceMessageWhenSpyingOnPrivateClass()throws Exception {List real=Arrays.asList(new String[]{""first"",""second""});try {spy(real);fail();}catch(MockitoException e){assertContains(""Most likely it is a private class that is not visible by Mockito"",e.getMessage());}}"
"org.concurrentmockito.ThreadsRunAllTestsHalfManualTest.shouldRunInMultipleThreads",0,"@Test public void shouldRunInMultipleThreads(){}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testname",0,"@Test public void testname()throws Exception {}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEquals",0,"@Test public void testReflectionEquals(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertTrue(EqualsBuilder.reflectionEquals(o1,o1));assertTrue(!EqualsBuilder.reflectionEquals(o1,o2));o2.setA(4);assertTrue(EqualsBuilder.reflectionEquals(o1,o2));assertTrue(!EqualsBuilder.reflectionEquals(o1,this));assertTrue(!EqualsBuilder.reflectionEquals(o1,null));assertTrue(!EqualsBuilder.reflectionEquals(null,o2));assertTrue(EqualsBuilder.reflectionEquals((Object)null,(Object)null));}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionHierarchyEquals",0,"@Test public void testReflectionHierarchyEquals(){testReflectionHierarchyEquals(false);testReflectionHierarchyEquals(true);assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,4),true));assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,4),false));assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,0,0,4),new TestTTLeafObject(1,2,3,4),true));assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1,2,3,4),new TestTTLeafObject(1,2,3,0),true));assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0,2,3,4),new TestTTLeafObject(1,2,3,4),true));}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testSuper",0,"@Test public void testSuper(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertEquals(true,new EqualsBuilder().appendSuper(true).append(o1,o1).isEquals());assertEquals(false,new EqualsBuilder().appendSuper(false).append(o1,o1).isEquals());assertEquals(false,new EqualsBuilder().appendSuper(true).append(o1,o2).isEquals());assertEquals(false,new EqualsBuilder().appendSuper(false).append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObject",0,"@Test public void testObject(){TestObject o1=new TestObject(4);TestObject o2=new TestObject(5);assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());o2.setA(4);assertTrue(new EqualsBuilder().append(o1,o2).isEquals());assertTrue(!new EqualsBuilder().append(o1,this).isEquals());assertTrue(!new EqualsBuilder().append(o1,null).isEquals());assertTrue(!new EqualsBuilder().append(null,o2).isEquals());assertTrue(new EqualsBuilder().append((Object)null,(Object)null).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLong",0,"@Test public void testLong(){long o1=1L;long o2=2L;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testInt",0,"@Test public void testInt(){int o1=1;int o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShort",0,"@Test public void testShort(){short o1=1;short o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testChar",0,"@Test public void testChar(){char o1=1;char o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByte",0,"@Test public void testByte(){byte o1=1;byte o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDouble",0,"@Test public void testDouble(){double o1=1;double o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());assertTrue(!new EqualsBuilder().append(o1,Double.NaN).isEquals());assertTrue(new EqualsBuilder().append(Double.NaN,Double.NaN).isEquals());assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloat",0,"@Test public void testFloat(){float o1=1;float o2=2;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());assertTrue(!new EqualsBuilder().append(o1,Float.NaN).isEquals());assertTrue(new EqualsBuilder().append(Float.NaN,Float.NaN).isEquals());assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBigDecimal",0,"@Test public void testBigDecimal(){BigDecimal o1=new BigDecimal(""2.0"");BigDecimal o2=new BigDecimal(""2.00"");assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testAccessors",0,"@Test public void testAccessors(){EqualsBuilder equalsBuilder=new EqualsBuilder();assertTrue(equalsBuilder.isEquals());equalsBuilder.setEquals(true);assertTrue(equalsBuilder.isEquals());equalsBuilder.setEquals(false);assertFalse(equalsBuilder.isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBoolean",0,"@Test public void testBoolean(){boolean o1=true;boolean o2=false;assertTrue(new EqualsBuilder().append(o1,o1).isEquals());assertTrue(!new EqualsBuilder().append(o1,o2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObjectArray",0,"@Test public void testObjectArray(){TestObject[]obj1=new TestObject[3];obj1[0]=new TestObject(4);obj1[1]=new TestObject(5);obj1[2]=null;TestObject[]obj2=new TestObject[3];obj2[0]=new TestObject(4);obj2[1]=new TestObject(5);obj2[2]=null;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj2,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1].setA(6);assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1].setA(5);assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[2]=obj1[1];assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1[2]=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLongArray",0,"@Test public void testLongArray(){long[]obj1=new long[2];obj1[0]=5L;obj1[1]=6L;long[]obj2=new long[2];obj2[0]=5L;obj2[1]=6L;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testIntArray",0,"@Test public void testIntArray(){int[]obj1=new int[2];obj1[0]=5;obj1[1]=6;int[]obj2=new int[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShortArray",0,"@Test public void testShortArray(){short[]obj1=new short[2];obj1[0]=5;obj1[1]=6;short[]obj2=new short[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testCharArray",0,"@Test public void testCharArray(){char[]obj1=new char[2];obj1[0]=5;obj1[1]=6;char[]obj2=new char[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByteArray",0,"@Test public void testByteArray(){byte[]obj1=new byte[2];obj1[0]=5;obj1[1]=6;byte[]obj2=new byte[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDoubleArray",0,"@Test public void testDoubleArray(){double[]obj1=new double[2];obj1[0]=5;obj1[1]=6;double[]obj2=new double[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloatArray",0,"@Test public void testFloatArray(){float[]obj1=new float[2];obj1[0]=5;obj1[1]=6;float[]obj2=new float[2];obj2[0]=5;obj2[1]=6;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBooleanArray",0,"@Test public void testBooleanArray(){boolean[]obj1=new boolean[2];obj1[0]=true;obj1[1]=false;boolean[]obj2=new boolean[2];obj2[0]=true;obj2[1]=false;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());obj1[1]=true;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj2=null;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());obj1=null;assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiLongArray",0,"@Test public void testMultiLongArray(){long[][]array1=new long[2][2];long[][]array2=new long[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiIntArray",0,"@Test public void testMultiIntArray(){int[][]array1=new int[2][2];int[][]array2=new int[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiShortArray",0,"@Test public void testMultiShortArray(){short[][]array1=new short[2][2];short[][]array2=new short[2][2];for (short i=0;i < array1.length;++i){for (short j=0;j < array1[0].length;j++){array1[i][j]=i;array2[i][j]=i;}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiCharArray",0,"@Test public void testMultiCharArray(){char[][]array1=new char[2][2];char[][]array2=new char[2][2];for (char i=0;i < array1.length;++i){for (char j=0;j < array1[0].length;j++){array1[i][j]=i;array2[i][j]=i;}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiByteArray",0,"@Test public void testMultiByteArray(){byte[][]array1=new byte[2][2];byte[][]array2=new byte[2][2];for (byte i=0;i < array1.length;++i){for (byte j=0;j < array1[0].length;j++){array1[i][j]=i;array2[i][j]=i;}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiFloatArray",0,"@Test public void testMultiFloatArray(){float[][]array1=new float[2][2];float[][]array2=new float[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiDoubleArray",0,"@Test public void testMultiDoubleArray(){double[][]array1=new double[2][2];double[][]array2=new double[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMultiBooleanArray",0,"@Test public void testMultiBooleanArray(){boolean[][]array1=new boolean[2][2];boolean[][]array2=new boolean[2][2];for (int i=0;i < array1.length;++i){for (int j=0;j < array1[0].length;j++){array1[i][j]=(i == 1)|| (j == 1);array2[i][j]=(i == 1)|| (j == 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=false;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());boolean[]array3=new boolean[]{true,true};assertFalse(new EqualsBuilder().append(array1,array3).isEquals());assertFalse(new EqualsBuilder().append(array3,array1).isEquals());assertFalse(new EqualsBuilder().append(array2,array3).isEquals());assertFalse(new EqualsBuilder().append(array3,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testRaggedArray",0,"@Test public void testRaggedArray(){long[][]array1=new long[2][];long[][]array2=new long[2][];for (int i=0;i < array1.length;++i){array1[i]=new long[2];array2[i]=new long[2];for (int j=0;j < array1[i].length;++j){array1[i][j]=(i + 1)* (j + 1);array2[i][j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());array1[1][1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testMixedArray",0,"@Test public void testMixedArray(){Object[]array1=new Object[2];Object[]array2=new Object[2];for (int i=0;i < array1.length;++i){array1[i]=new long[2];array2[i]=new long[2];for (int j=0;j < 2;++j){((long[])array1[i])[j]=(i + 1)* (j + 1);((long[])array2[i])[j]=(i + 1)* (j + 1);}}assertTrue(new EqualsBuilder().append(array1,array1).isEquals());assertTrue(new EqualsBuilder().append(array1,array2).isEquals());((long[])array1[1])[1]=0;assertTrue(!new EqualsBuilder().append(array1,array2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testObjectArrayHiddenByObject",0,"@Test public void testObjectArrayHiddenByObject(){TestObject[]array1=new TestObject[2];array1[0]=new TestObject(4);array1[1]=new TestObject(5);TestObject[]array2=new TestObject[2];array2[0]=new TestObject(4);array2[1]=new TestObject(5);Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1].setA(6);assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testLongArrayHiddenByObject",0,"@Test public void testLongArrayHiddenByObject(){long[]array1=new long[2];array1[0]=5L;array1[1]=6L;long[]array2=new long[2];array2[0]=5L;array2[1]=6L;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testIntArrayHiddenByObject",0,"@Test public void testIntArrayHiddenByObject(){int[]array1=new int[2];array1[0]=5;array1[1]=6;int[]array2=new int[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testShortArrayHiddenByObject",0,"@Test public void testShortArrayHiddenByObject(){short[]array1=new short[2];array1[0]=5;array1[1]=6;short[]array2=new short[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testCharArrayHiddenByObject",0,"@Test public void testCharArrayHiddenByObject(){char[]array1=new char[2];array1[0]=5;array1[1]=6;char[]array2=new char[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testByteArrayHiddenByObject",0,"@Test public void testByteArrayHiddenByObject(){byte[]array1=new byte[2];array1[0]=5;array1[1]=6;byte[]array2=new byte[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testDoubleArrayHiddenByObject",0,"@Test public void testDoubleArrayHiddenByObject(){double[]array1=new double[2];array1[0]=5;array1[1]=6;double[]array2=new double[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testFloatArrayHiddenByObject",0,"@Test public void testFloatArrayHiddenByObject(){float[]array1=new float[2];array1[0]=5;array1[1]=6;float[]array2=new float[2];array2[0]=5;array2[1]=6;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=7;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testBooleanArrayHiddenByObject",0,"@Test public void testBooleanArrayHiddenByObject(){boolean[]array1=new boolean[2];array1[0]=true;array1[1]=false;boolean[]array2=new boolean[2];array2[0]=true;array2[1]=false;Object obj1=array1;Object obj2=array2;assertTrue(new EqualsBuilder().append(obj1,obj1).isEquals());assertTrue(new EqualsBuilder().append(obj1,array1).isEquals());assertTrue(new EqualsBuilder().append(obj1,obj2).isEquals());assertTrue(new EqualsBuilder().append(obj1,array2).isEquals());array1[1]=true;assertTrue(!new EqualsBuilder().append(obj1,obj2).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testUnrelatedClasses",0,"/** * Tests two instances of classes that can be equal and that are not ""related"". The two classes are not subclasses of each other and do not share a parent aside from Object. See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069*/@Test public void testUnrelatedClasses(){Object[]x=new Object[]{new TestACanEqualB(1)};Object[]y=new Object[]{new TestBCanEqualA(1)};assertTrue(Arrays.equals(x,x));assertTrue(Arrays.equals(y,y));assertTrue(Arrays.equals(x,y));assertTrue(Arrays.equals(y,x));assertTrue(x[0].equals(x[0]));assertTrue(y[0].equals(y[0]));assertTrue(x[0].equals(y[0]));assertTrue(y[0].equals(x[0]));assertTrue(new EqualsBuilder().append(x,x).isEquals());assertTrue(new EqualsBuilder().append(y,y).isEquals());assertTrue(new EqualsBuilder().append(x,y).isEquals());assertTrue(new EqualsBuilder().append(y,x).isEquals());}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testNpeForNullElement",0,"/** * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067*/@Test public void testNpeForNullElement(){Object[]x1=new Object[]{new Integer(1),null,new Integer(3)};Object[]x2=new Object[]{new Integer(1),new Integer(2),new Integer(3)};new EqualsBuilder().append(x1,x2);}"
"org.mockito.internal.matchers.apachecommons.EqualsBuilderTest.testReflectionEqualsExcludeFields",0,"@Test public void testReflectionEqualsExcludeFields()throws Exception {TestObjectWithMultipleFields x1=new TestObjectWithMultipleFields(1,2,3);TestObjectWithMultipleFields x2=new TestObjectWithMultipleFields(1,3,4);assertTrue(!EqualsBuilder.reflectionEquals(x1,x2));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,(String[])null));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{}));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{""xxx""}));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{""two""}));assertTrue(!EqualsBuilder.reflectionEquals(x1,x2,new String[]{""three""}));assertTrue(EqualsBuilder.reflectionEquals(x1,x2,new String[]{""two"",""three""}));assertTrue(EqualsBuilder.reflectionEquals(x1,x2,new String[]{""one"",""two"",""three""}));assertTrue(EqualsBuilder.reflectionEquals(x1,x2,new String[]{""one"",""two"",""three"",""xxx""}));}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyBasicFinalField",0,"@Test public void shouldShallowCopyBasicFinalField()throws Exception {assertEquals(100,from.finalField);assertNotEquals(100,to.finalField);tool.copyToMock(from,to);assertEquals(100,to.finalField);}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyTransientPrivateFields",0,"@Test public void shouldShallowCopyTransientPrivateFields()throws Exception {from.privateTransientField=1000;assertNotEquals(1000,to.privateTransientField);tool.copyToMock(from,to);assertEquals(1000,to.privateTransientField);}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyLinkedListIntoMock",0,"@Test public void shouldShallowCopyLinkedListIntoMock()throws Exception {LinkedList fromList=new LinkedList();LinkedList toList=mock(LinkedList.class);tool.copyToMock(fromList,toList);}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldShallowCopyFieldValuesIntoMock",0,"@Test public void shouldShallowCopyFieldValuesIntoMock()throws Exception {from.defaultField=""foo"";from.instancePublicField=new SomeOtherObject();from.privateField=1;from.privateTransientField=2;from.protectedField=3;assertNotEquals(from.defaultField,to.defaultField);assertNotEquals(from.instancePublicField,to.instancePublicField);assertNotEquals(from.privateField,to.privateField);assertNotEquals(from.privateTransientField,to.privateTransientField);assertNotEquals(from.protectedField,to.protectedField);tool.copyToMock(from,to);assertEquals(from.defaultField,to.defaultField);assertEquals(from.instancePublicField,to.instancePublicField);assertEquals(from.privateField,to.privateField);assertEquals(from.privateTransientField,to.privateTransientField);assertEquals(from.protectedField,to.protectedField);}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldCopyValuesOfInheritedFields",0,"@Test public void shouldCopyValuesOfInheritedFields()throws Exception {((InheritMe)from).privateInherited=""foo"";((InheritMe)from).protectedInherited=""bar"";assertNotEquals(((InheritMe)from).privateInherited,((InheritMe)to).privateInherited);assertNotEquals(((InheritMe)from).privateInherited,((InheritMe)to).privateInherited);tool.copyToMock(from,to);assertEquals(((InheritMe)from).privateInherited,((InheritMe)to).privateInherited);assertEquals(((InheritMe)from).privateInherited,((InheritMe)to).privateInherited);}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldEnableAndThenDisableAccessibility",0,"@Test public void shouldEnableAndThenDisableAccessibility()throws Exception {Field privateField=SomeObject.class.getDeclaredField(""privateField"");assertFalse(privateField.isAccessible());tool.copyToMock(from,to);privateField=SomeObject.class.getDeclaredField(""privateField"");assertFalse(privateField.isAccessible());}"
"org.mockito.internal.util.copy.LenientCopyToolTest.shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue",0,"@Test public void shouldContinueEvenIfThereAreProblemsCopyingSingleFieldValue()throws Exception {tool.fieldCopier=mock(FieldCopier.class);doNothing().doThrow(new IllegalAccessException()).doNothing().when(tool.fieldCopier).copyValue(anyObject(),anyObject(),any(Field.class));tool.copyToMock(from,to);verify(tool.fieldCopier,atLeast(3)).copyValue(any(),any(),any(Field.class));}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnCapturedArgument",0,"@Test public void shouldAllowAssertionsOnCapturedArgument(){emailer.email(12);ArgumentCaptor<Person> argument=new ArgumentCaptor<Person>();verify(emailService).sendEmailTo(argument.capture());assertEquals(12,argument.getValue().getAge());}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnAllCapturedArguments",0,"@Test public void shouldAllowAssertionsOnAllCapturedArguments(){emailer.email(11,12);ArgumentCaptor<Person> argument=new ArgumentCaptor<Person>();verify(emailService,atLeastOnce()).sendEmailTo(argument.capture());List<Person> allValues=argument.getAllValues();assertEquals(11,allValues.get(0).getAge());assertEquals(12,allValues.get(1).getAge());}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnLastArgument",0,"@Test public void shouldAllowAssertionsOnLastArgument(){emailer.email(11,12,13);ArgumentCaptor<Person> argument=new ArgumentCaptor<Person>();verify(emailService,atLeastOnce()).sendEmailTo(argument.capture());assertEquals(13,argument.getValue().getAge());}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldPrintCaptorMatcher",0,"@Test public void shouldPrintCaptorMatcher(){ArgumentCaptor<Person> person=new ArgumentCaptor<Person>();try {verify(emailService).sendEmailTo(person.capture());fail();}catch(WantedButNotInvoked e){assertContains(""<Capturing argument>"",e.getMessage());}}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowAssertionsOnCapturedNull",0,"@Test public void shouldAllowAssertionsOnCapturedNull(){emailService.sendEmailTo(null);ArgumentCaptor<Person> argument=new ArgumentCaptor<Person>();verify(emailService).sendEmailTo(argument.capture());assertEquals(null,argument.getValue());}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldAllowCapturingForStubbing",0,"@Test public void shouldAllowCapturingForStubbing(){ArgumentCaptor<Person> argument=new ArgumentCaptor<Person>();when(emailService.sendEmailTo(argument.capture())).thenReturn(false);emailService.sendEmailTo(new Person(10));assertEquals(10,argument.getValue().getAge());}"
"org.mockitousage.matchers.CapturingArgumentsTest.shouldSaySomethingSmartWhenMisused",0,"@Test public void shouldSaySomethingSmartWhenMisused(){ArgumentCaptor<Person> argument=new ArgumentCaptor<Person>();try {argument.getValue();fail();}catch(MockitoException e){}}"
"org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest.shouldAllowAnyObjectForVarArgs",0,"@Ignore @Test public void shouldAllowAnyObjectForVarArgs(){mock.run(""a"",""b"");verify(mock).run((String[])anyObject());verify(mock).run(anyString(),anyString());verify(mock).run((String)anyObject(),(String)anyObject());verify(mock).run(new String[]{anyObject()});verify(mock,never()).run();verify(mock,never()).run(anyString(),eq(""f""));}"
"org.mockitousage.bugs.VarargsNotPlayingWithAnyObjectTest.shouldAllowAnyObjectForVarArgsStubbing",0,"@Ignore @Test public void shouldAllowAnyObjectForVarArgsStubbing(){when(mock.run((String[])anyObject())).thenReturn(""foo"");assertEquals(""foo"",mock.run(""a"",""b""));}"
"org.mockito.internal.creation.cglib.CGLIBHackerTest.shouldSetMockitoNamingPolicy",0,"@Test public void shouldSetMockitoNamingPolicy()throws Exception {MethodProxy methodProxy=new MethodProxyBuilder().build();new CGLIBHacker().setMockitoNamingPolicy(methodProxy);Object createInfo=Whitebox.getInternalState(methodProxy,""createInfo"");NamingPolicy namingPolicy=(NamingPolicy)Whitebox.getInternalState(createInfo,""namingPolicy"");assertEquals(namingPolicy,MockitoNamingPolicy.INSTANCE);}"
"org.mockito.internal.creation.cglib.CGLIBHackerTest.shouldSetMockitoNamingPolicyEvenIfMethodProxyIsProxied",0,"@Test public void shouldSetMockitoNamingPolicyEvenIfMethodProxyIsProxied()throws Exception {MethodProxy proxiedMethodProxy=spy(new MethodProxyBuilder().build());new CGLIBHacker().setMockitoNamingPolicy(proxiedMethodProxy);Object createInfo=Whitebox.getInternalState(proxiedMethodProxy,""createInfo"");NamingPolicy namingPolicy=(NamingPolicy)Whitebox.getInternalState(createInfo,""namingPolicy"");assertEquals(namingPolicy,MockitoNamingPolicy.INSTANCE);}"
"org.mockito.MockitoTest.shouldRemoveStubbableFromProgressAfterStubbing",0,"@Test public void shouldRemoveStubbableFromProgressAfterStubbing(){List mock=Mockito.mock(List.class);Mockito.when(mock.add(""test"")).thenReturn(true);assertNull(new ThreadSafeMockingProgress().pullOngoingStubbing());}"
"org.mockito.MockitoTest.shouldValidateMockWhenVerifying",0,"@Test(expected=NotAMockException.class)public void shouldValidateMockWhenVerifying(){Mockito.verify(""notMock"");}"
"org.mockito.MockitoTest.shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations",0,"@Test(expected=NotAMockException.class)public void shouldValidateMockWhenVerifyingWithExpectedNumberOfInvocations(){Mockito.verify(""notMock"",times(19));}"
"org.mockito.MockitoTest.shouldValidateMockWhenVerifyingNoMoreInteractions",0,"@Test(expected=NotAMockException.class)public void shouldValidateMockWhenVerifyingNoMoreInteractions(){Mockito.verifyNoMoreInteractions(""notMock"");}"
"org.mockito.MockitoTest.shouldValidateMockWhenVerifyingZeroInteractions",0,"@Test(expected=NotAMockException.class)public void shouldValidateMockWhenVerifyingZeroInteractions(){Mockito.verifyZeroInteractions(""notMock"");}"
"org.mockito.MockitoTest.shouldValidateMockWhenStubbingVoid",0,"@SuppressWarnings(""deprecation"")@Test(expected=NotAMockException.class)public void shouldValidateMockWhenStubbingVoid(){Mockito.stubVoid(""notMock"");}"
"org.mockito.MockitoTest.shouldValidateMockWhenCreatingInOrderObject",0,"@Test(expected=NotAMockException.class)public void shouldValidateMockWhenCreatingInOrderObject(){Mockito.inOrder(""notMock"");}"
"org.mockito.MockitoTest.shouldStartingMockSettingsContainDefaultBehavior",0,"@Test public void shouldStartingMockSettingsContainDefaultBehavior(){MockSettingsImpl settings=(MockSettingsImpl)Mockito.withSettings();assertEquals(Mockito.RETURNS_DEFAULTS,settings.getDefaultAnswer());}"
"org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnAllKindsOfPrimitives",0,"@Test public void shouldReturnAllKindsOfPrimitives()throws Exception {assertEquals((byte)0,mock.byteReturningMethod());assertEquals((short)0,mock.shortReturningMethod());assertEquals(0,mock.intReturningMethod());assertEquals(0L,mock.longReturningMethod());assertEquals(0.0F,mock.floatReturningMethod(),0.0F);assertEquals(0.0D,mock.doubleReturningMethod(),0.0D);assertEquals((char)0,mock.charReturningMethod());assertEquals(false,mock.booleanReturningMethod());assertEquals(null,mock.objectReturningMethod());}"
"org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnTheSameValuesForWrapperClasses",0,"@Test public void shouldReturnTheSameValuesForWrapperClasses()throws Exception {assertEquals(new Byte((byte)0),mock.byteObjectReturningMethod());assertEquals(new Short((short)0),mock.shortObjectReturningMethod());assertEquals(new Integer(0),mock.integerReturningMethod());assertEquals(new Long(0L),mock.longObjectReturningMethod());assertEquals(new Float(0.0F),mock.floatObjectReturningMethod(),0.0F);assertEquals(new Double(0.0D),mock.doubleObjectReturningMethod(),0.0D);assertEquals(new Character((char)0),mock.charObjectReturningMethod());assertEquals(new Boolean(false),mock.booleanObjectReturningMethod());}"
"org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnEmptyCollections",0,"@Test public void shouldReturnEmptyCollections(){CollectionsServer mock=Mockito.mock(CollectionsServer.class);assertTrue(mock.list().isEmpty());assertTrue(mock.linkedList().isEmpty());assertTrue(mock.map().isEmpty());assertTrue(mock.hashSet().isEmpty());}"
"org.mockitousage.stubbing.ReturningDefaultValuesTest.shouldReturnMutableEmptyCollection",0,"@Test public void shouldReturnMutableEmptyCollection(){CollectionsServer mock=Mockito.mock(CollectionsServer.class);List list=mock.list();list.add(""test"");assertTrue(mock.list().isEmpty());}"
"org.mockito.internal.runners.RunnerFactoryTest.shouldCreateRunnerForJUnit44",0,"@Test public void shouldCreateRunnerForJUnit44(){}"
"org.mockito.internal.runners.RunnerFactoryTest.shouldCreateRunnerForJUnit45",0,"@Test public void shouldCreateRunnerForJUnit45(){}"
"org.mockito.internal.runners.RunnerFactoryTest.shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound",0,"@Test public void shouldThrowMeaningfulMockitoExceptionIfNoValidJUnitFound(){RunnerProvider provider=new RunnerProvider(){public boolean isJUnit45OrHigherAvailable(){return false;}public RunnerImpl newInstance(String runnerClassName,Class<?> constructorParam)throws Exception {throw new InitializationError(""Where is JUnit,dude?"");}};RunnerFactory factory=new RunnerFactory(provider);try {factory.create(RunnerFactoryTest.class);fail();}catch(MockitoException e){assertContains(""upgrade your JUnit version"",e.getMessage());}}"
"org.mockito.exceptions.PluralizerTest.shouldGetPluralizedNumber",0,"@Test public void shouldGetPluralizedNumber(){new Pluralizer();assertEquals(""0 times"",Pluralizer.pluralize(0));assertEquals(""1 time"",Pluralizer.pluralize(1));assertEquals(""2 times"",Pluralizer.pluralize(2));assertEquals(""20 times"",Pluralizer.pluralize(20));}"
"org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldProvideMockyImplementationOfToString",0,"@Test public void shouldProvideMockyImplementationOfToString(){DummyClass dummyClass=Mockito.mock(DummyClass.class);assertEquals(""Mock for DummyClass,hashCode: "" + dummyClass.hashCode(),dummyClass.toString());DummyInterface dummyInterface=Mockito.mock(DummyInterface.class);assertEquals(""Mock for DummyInterface,hashCode: "" + dummyInterface.hashCode(),dummyInterface.toString());}"
"org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldReplaceObjectMethods",0,"@Test public void shouldReplaceObjectMethods(){}"
"org.mockitousage.basicapi.ReplacingObjectMethodsTest.shouldReplaceObjectMethodsWhenOverridden",0,"@Test public void shouldReplaceObjectMethodsWhenOverridden(){}"
"org.mockito.internal.progress.MockingProgressImplTest.shouldStartVerificationAndPullVerificationMode",0,"@Test public void shouldStartVerificationAndPullVerificationMode()throws Exception {assertNull(mockingProgress.pullVerificationMode());VerificationMode mode=VerificationModeFactory.times(19);mockingProgress.verificationStarted(mode);assertSame(mode,mockingProgress.pullVerificationMode());assertNull(mockingProgress.pullVerificationMode());}"
"org.mockito.internal.progress.MockingProgressImplTest.shouldCheckIfVerificationWasFinished",0,"@Test public void shouldCheckIfVerificationWasFinished()throws Exception {mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());try {mockingProgress.verificationStarted(VerificationModeFactory.atLeastOnce());fail();}catch(MockitoException e){}}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner",0,"@Test public void makeSureStateIsValidatedInTheVeryFirstTestThanksToTheRunner(){verify(mock);}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayWantedButNotInvoked",0,"@Test public void shouldSayWantedButNotInvoked(){verify(mock).otherMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails",0,"@Test public void shouldPointOutInteractionsOnMockWhenOrdinaryVerificationFails(){mock.otherMethod();mock.booleanObjectReturningMethod();verify(mock).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldShowActualAndExpected",0,"@Test public void shouldShowActualAndExpected(){mock.simpleMethod(""blah"");verify(mock).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocations",0,"@Test public void shouldSayTooLittleInvocations(){mock.simpleMethod();verify(mock,times(2)).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooManyInvocations",0,"@Test public void shouldSayTooManyInvocations(){mock.simpleMethod();mock.simpleMethod();verify(mock,times(1)).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayWantedButNotInvokedInOrder",0,"@Test public void shouldSayWantedButNotInvokedInOrder(){mock.simpleMethod();mock.otherMethod();InOrder inOrder=inOrder(mock);inOrder.verify(mock).otherMethod();inOrder.verify(mock).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInOrder",0,"@Test public void shouldSayTooLittleInvocationsInOrder(){mock.simpleMethod();mock.otherMethod();mock.otherMethod();InOrder inOrder=inOrder(mock);inOrder.verify(mock).simpleMethod();inOrder.verify(mock,times(3)).otherMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooManyInvocationsInOrder",0,"@Test public void shouldSayTooManyInvocationsInOrder(){mock.otherMethod();mock.otherMethod();InOrder inOrder=inOrder(mock);inOrder.verify(mock,times(1)).otherMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayNeverWantedButInvokedHere",0,"@Test public void shouldSayNeverWantedButInvokedHere(){mock.otherMethod();verify(mock,never()).otherMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInAtLeastModeInOrder",0,"@Test public void shouldSayTooLittleInvocationsInAtLeastModeInOrder(){mock.simpleMethod();InOrder inOrder=inOrder(mock);inOrder.verify(mock,atLeast(2)).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayTooLittleInvocationsInAtLeastMode",0,"@Test public void shouldSayTooLittleInvocationsInAtLeastMode(){mock.simpleMethod();verify(mock,atLeast(2)).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayNoMoreInteractions",0,"@Test public void shouldSayNoMoreInteractions(){mock.simpleMethod();verifyNoMoreInteractions(mock);}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldSayUnstubbedMethodWasInvokedHere",0,"@Test public void shouldSayUnstubbedMethodWasInvokedHere(){mock=mock(IMethods.class,RETURNS_SMART_NULLS);IMethods m=mock.iMethodsReturningMethod();m.simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldPointOutUnfinishedStubbing",0,"@Test public void shouldPointOutUnfinishedStubbing(){when(mock.simpleMethod());verify(mock).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenMissingMockCall",0,"@Test public void shouldMentionFinalAndObjectMethodsWhenMissingMockCall(){when(mock.equals(null)).thenReturn(false);}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenVerifying",0,"@Test public void shouldMentionFinalAndObjectMethodsWhenVerifying(){verify(mock).equals(null);verify(mock).simpleMethod();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher",0,"@Test public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher(){when(mock.equals(anyObject())).thenReturn(false);}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldShowExampleOfCorrectArgumentCapturing",0,"@Test public void shouldShowExampleOfCorrectArgumentCapturing(){ArgumentCaptor<String> argument=new ArgumentCaptor<String>();argument.capture();argument.getValue();}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenNullPassedInsteadOfAnInterface",0,"@Test public void shouldScreamWhenNullPassedInsteadOfAnInterface(){mock(IMethods.class,withSettings().extraInterfaces(List.class,null));}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenNonInterfacePassed",0,"@Test public void shouldScreamWhenNonInterfacePassed(){mock(IMethods.class,withSettings().extraInterfaces(LinkedList.class));}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraIsTheSame",0,"@Test public void shouldScreamWhenExtraIsTheSame(){mock(IMethods.class,withSettings().extraInterfaces(IMethods.class));}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraInterfacesEmpty",0,"@Test public void shouldScreamWhenExtraInterfacesEmpty(){mock(IMethods.class,withSettings().extraInterfaces());}"
"org.mockitousage.stacktrace.ModellingDescriptiveMessagesTest.shouldScreamWhenExtraInterfacesIsANullArray",0,"@Test public void shouldScreamWhenExtraInterfacesIsANullArray(){mock(IMethods.class,withSettings().extraInterfaces((Class[])null));}"
"org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedStubbing",0,"@Test public void shouldDetectUnfinishedStubbing(){when(mock.simpleMethod());detectsAndCleansUp(new OnMethodCallOnMock(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnStub(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnStubVoid(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnVerify(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnVerifyInOrder(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnVerifyZeroInteractions(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnVerifyNoMoreInteractions(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnDoAnswer(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnMockCreation(),UnfinishedStubbingException.class);when(mock.simpleMethod());detectsAndCleansUp(new OnSpyCreation(),UnfinishedStubbingException.class);}"
"org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedStubbingVoid",0,"@Test public void shouldDetectUnfinishedStubbingVoid(){stubVoid(mock);detectsAndCleansUp(new OnMethodCallOnMock(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnStub(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnStubVoid(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnVerify(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnVerifyInOrder(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnVerifyZeroInteractions(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnVerifyNoMoreInteractions(),UnfinishedStubbingException.class);stubVoid(mock);detectsAndCleansUp(new OnDoAnswer(),UnfinishedStubbingException.class);}"
"org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedDoAnswerStubbing",0,"@Test public void shouldDetectUnfinishedDoAnswerStubbing(){doAnswer(null);detectsAndCleansUp(new OnMethodCallOnMock(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnStub(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnStubVoid(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnVerify(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnVerifyInOrder(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnVerifyZeroInteractions(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnVerifyNoMoreInteractions(),UnfinishedStubbingException.class);doAnswer(null);detectsAndCleansUp(new OnDoAnswer(),UnfinishedStubbingException.class);}"
"org.mockito.internal.InvalidStateDetectionTest.shouldDetectUnfinishedVerification",0,"@Test public void shouldDetectUnfinishedVerification(){verify(mock);detectsAndCleansUp(new OnStub(),UnfinishedVerificationException.class);verify(mock);detectsAndCleansUp(new OnStubVoid(),UnfinishedVerificationException.class);verify(mock);detectsAndCleansUp(new OnVerify(),UnfinishedVerificationException.class);verify(mock);detectsAndCleansUp(new OnVerifyInOrder(),UnfinishedVerificationException.class);verify(mock);detectsAndCleansUp(new OnVerifyZeroInteractions(),UnfinishedVerificationException.class);verify(mock);detectsAndCleansUp(new OnVerifyNoMoreInteractions(),UnfinishedVerificationException.class);verify(mock);detectsAndCleansUp(new OnDoAnswer(),UnfinishedVerificationException.class);}"
"org.mockito.internal.InvalidStateDetectionTest.shouldDetectMisplacedArgumentMatcher",0,"@Test public void shouldDetectMisplacedArgumentMatcher(){anyObject();detectsAndCleansUp(new OnStubVoid(),InvalidUseOfMatchersException.class);anyObject();detectsAndCleansUp(new OnVerify(),InvalidUseOfMatchersException.class);anyObject();detectsAndCleansUp(new OnVerifyInOrder(),InvalidUseOfMatchersException.class);anyObject();detectsAndCleansUp(new OnVerifyZeroInteractions(),InvalidUseOfMatchersException.class);anyObject();detectsAndCleansUp(new OnVerifyNoMoreInteractions(),InvalidUseOfMatchersException.class);anyObject();detectsAndCleansUp(new OnDoAnswer(),InvalidUseOfMatchersException.class);}"
"org.mockito.internal.InvalidStateDetectionTest.shouldCorrectStateAfterDetectingUnfinishedStubbing",0,"@Test public void shouldCorrectStateAfterDetectingUnfinishedStubbing(){stubVoid(mock).toThrow(new RuntimeException());try {stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);fail();}catch(UnfinishedStubbingException e){}stubVoid(mock).toThrow(new RuntimeException()).on().oneArg(true);try {mock.oneArg(true);fail();}catch(RuntimeException e){}}"
"org.mockito.internal.InvalidStateDetectionTest.shouldCorrectStateAfterDetectingUnfinishedVerification",0,"@Test public void shouldCorrectStateAfterDetectingUnfinishedVerification(){mock.simpleMethod();verify(mock);try {verify(mock).simpleMethod();fail();}catch(UnfinishedVerificationException e){}verify(mock).simpleMethod();}"
"org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldLogUnusedStubbingWarningWhenTestFails",0,"@Test public void shouldLogUnusedStubbingWarningWhenTestFails()throws Exception {runner=new ConsoleSpammingMockitoJUnitRunner(this.getClass(),loggerStub,new RunnerImplStub(){@Override public void run(RunNotifier notifier){unusedStubbingThatQualifiesForWarning();notifier.fireTestFailure(null);String loggedInfo=loggerStub.getLoggedInfo();assertContains(""[Mockito]Warning - this stub was not used"",loggedInfo);assertContains(""mock.simpleMethod(123);"",loggedInfo);assertContains("".unusedStubbingThatQualifiesForWarning("",loggedInfo);}});runner.run(notifier);}"
"org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldLogUnstubbedMethodWarningWhenTestFails",0,"@Test public void shouldLogUnstubbedMethodWarningWhenTestFails()throws Exception {runner=new ConsoleSpammingMockitoJUnitRunner(this.getClass(),loggerStub,new RunnerImplStub(){@Override public void run(RunNotifier notifier){callUnstubbedMethodThatQualifiesForWarning();notifier.fireTestFailure(null);String loggedInfo=loggerStub.getLoggedInfo();assertContains(""[Mockito]Warning - this method was not stubbed"",loggedInfo);assertContains(""mock.simpleMethod(456);"",loggedInfo);assertContains("".callUnstubbedMethodThatQualifiesForWarning("",loggedInfo);}});runner.run(notifier);}"
"org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldLogStubCalledWithDifferentArgumentsWhenTestFails",0,"@Test public void shouldLogStubCalledWithDifferentArgumentsWhenTestFails()throws Exception {runner=new ConsoleSpammingMockitoJUnitRunner(this.getClass(),loggerStub,new RunnerImplStub(){@Override public void run(RunNotifier notifier){someStubbing();callStubbedMethodWithDifferentArgs();notifier.fireTestFailure(null);String loggedInfo=loggerStub.getLoggedInfo();assertContains(""[Mockito]Warning - stubbed method called with different arguments"",loggedInfo);assertContains(""Stubbed this way:"",loggedInfo);assertContains(""mock.simpleMethod(789);"",loggedInfo);assertContains("".someStubbing("",loggedInfo);assertContains(""But called with different arguments:"",loggedInfo);assertContains(""mock.simpleMethod(10);"",loggedInfo);assertContains("".callStubbedMethodWithDifferentArgs("",loggedInfo);}});runner.run(notifier);}"
"org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldNotLogAnythingWhenStubCalledCorrectly",0,"@Test public void shouldNotLogAnythingWhenStubCalledCorrectly()throws Exception {runner=new ConsoleSpammingMockitoJUnitRunner(this.getClass(),loggerStub,new RunnerImplStub(){@Override public void run(RunNotifier notifier){when(mock.simpleMethod(1)).thenReturn(""foo"");mock.simpleMethod(1);notifier.fireTestFailure(null);assertEquals("""",loggerStub.getLoggedInfo());}});runner.run(notifier);}"
"org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldNotLogWhenTestPasses",0,"@Test public void shouldNotLogWhenTestPasses()throws Exception {runner=new ConsoleSpammingMockitoJUnitRunner(this.getClass(),loggerStub,new RunnerImplStub(){@Override public void run(RunNotifier notifier){when(mock.simpleMethod()).thenReturn(""foo"");notifier.fireTestFinished(null);assertEquals("""",loggerStub.getLoggedInfo());}});runner.run(notifier);}"
"org.mockito.runners.ConsoleSpammingMockitoJUnitRunnerTest.shouldDelegateToGetDescription",0,"@Test public void shouldDelegateToGetDescription()throws Exception {final Description expectedDescription=Description.createSuiteDescription(this.getClass());runner=new ConsoleSpammingMockitoJUnitRunner(this.getClass(),loggerStub,new RunnerImplStub(){public Description getDescription(){return expectedDescription;}});Description description=runner.getDescription();assertEquals(expectedDescription,description);}"
"org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowBothWantedAndPrevious",0,"@Test public void shouldPrintVerificationInOrderErrorAndShowBothWantedAndPrevious(){inOrder.verify(one).simpleMethod(1);inOrder.verify(two,atLeastOnce()).simpleMethod(2);try {inOrder.verify(one,atLeastOnce()).simpleMethod(11);fail();}catch(VerificationInOrderFailure e){String expected=""\n"" + ""Verification in order failure"" + ""\n""+ ""Wanted but not invoked:""+ ""\n""+ ""iMethods.simpleMethod(11);""+ ""\n""+ ""-> at "";assertContains(expected,e.getMessage());String expectedCause=""\n"" + ""Wanted anywhere AFTER following interaction:"" + ""\n""+ ""iMethods.simpleMethod(2);""+ ""\n""+ ""-> at "";assertContains(expectedCause,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowWantedOnly",0,"@Test public void shouldPrintVerificationInOrderErrorAndShowWantedOnly(){try {inOrder.verify(one).differentMethod();fail();}catch(WantedButNotInvoked e){String expected=""\n"" + ""Wanted but not invoked:"" + ""\n""+ ""iMethods.differentMethod();""+ ""\n""+ ""-> at"";assertContains(expected,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintVerificationInOrderErrorAndShowWantedAndActual",0,"@Ignore(""i don't know how to implement it nicely... yet. See the enhancement 27"")@Test public void shouldPrintVerificationInOrderErrorAndShowWantedAndActual(){try {inOrder.verify(one).simpleMethod(999);fail();}catch(ArgumentsAreDifferent e){String expected=""\n"" + ""Arguments are different!"" + ""\n""+ ""IMethods.simpleMethod(999);"";assertEquals(expected,e.getMessage());assertEquals(null,e.getCause());}}"
"org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintMethodThatWasNotInvoked",0,"@Test public void shouldPrintMethodThatWasNotInvoked(){inOrder.verify(one).simpleMethod(1);inOrder.verify(one).simpleMethod(11);inOrder.verify(two,times(2)).simpleMethod(2);inOrder.verify(three).simpleMethod(3);try {inOrder.verify(three).simpleMethod(999);fail();}catch(VerificationInOrderFailure e){String actualMessage=e.getMessage();String expectedMessage=""\n"" + ""Verification in order failure"" + ""\n""+ ""Wanted but not invoked:""+ ""\n""+ ""iMethods.simpleMethod(999);"";assertContains(expectedMessage,actualMessage);}}"
"org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintTooManyInvocations",0,"@Test public void shouldPrintTooManyInvocations(){inOrder.verify(one).simpleMethod(1);inOrder.verify(one).simpleMethod(11);try {inOrder.verify(two,times(1)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){String actualMessage=e.getMessage();String expectedMessage=""\n"" + ""Verification in order failure:"" + ""\n""+ ""iMethods.simpleMethod(2);""+ ""\n""+ ""Wanted 1 time:""+ ""\n""+ ""-> at"";assertContains(expectedMessage,actualMessage);String expectedCause=""\n"" + ""But was 2 times. Undesired invocation:"" + ""\n""+ ""-> at"";assertContains(expectedCause,e.getMessage());}}"
"org.mockitousage.verification.DescriptiveMessagesOnVerificationInOrderErrorsTest.shouldPrintTooLittleInvocations",0,"@Test public void shouldPrintTooLittleInvocations(){two.simpleMethod(2);inOrder.verify(one,atLeastOnce()).simpleMethod(anyInt());inOrder.verify(two,times(2)).simpleMethod(2);inOrder.verify(three,atLeastOnce()).simpleMethod(3);try {inOrder.verify(two,times(2)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){String actualMessage=e.getMessage();String expectedMessage=""\n"" + ""Verification in order failure:"" + ""\n""+ ""iMethods.simpleMethod(2);""+ ""\n""+ ""Wanted 2 times:""+ ""\n""+ ""-> at"";assertContains(expectedMessage,actualMessage);String expectedCause=""\n"" + ""But was 1 time:"" + ""\n""+ ""-> at"";assertContains(expectedCause,e.getMessage());}}"
"org.mockitousage.bugs.NPEWhenMockingThrowablesTest.shouldNotThrowNPE",0,"@Test public void shouldNotThrowNPE(){when(mock.simpleMethod()).thenThrow(mock2);try {mock.simpleMethod();fail();}catch(DummyException e){}}"
"org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldAskFinderForActualInvocations",0,"@Test public void shouldAskFinderForActualInvocations(){finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());checker.check(invocations,wanted);assertSame(invocations,finderStub.invocations);}"
"org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldPassBecauseActualInvocationFound",0,"@Test public void shouldPassBecauseActualInvocationFound(){finderStub.actualToReturn.add(new InvocationBuilder().toInvocation());checker.check(invocations,wanted);}"
"org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldAskAnalyzerForSimilarInvocation",0,"@Test public void shouldAskAnalyzerForSimilarInvocation(){checker.check(invocations,wanted);assertSame(invocations,finderStub.invocations);}"
"org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldReportWantedButNotInvoked",0,"@Test public void shouldReportWantedButNotInvoked(){assertTrue(finderStub.actualToReturn.isEmpty());finderStub.similarToReturn=null;checker.check(invocations,wanted);assertEquals(wanted,reporterStub.wanted);assertNull(reporterStub.actualLocation);}"
"org.mockito.internal.verification.checkers.MissingInvocationCheckerTest.shouldReportWantedInvocationDiffersFromActual",0,"@Test public void shouldReportWantedInvocationDiffersFromActual(){assertTrue(finderStub.actualToReturn.isEmpty());Invocation actualInvocation=new InvocationBuilder().toInvocation();finderStub.similarToReturn=actualInvocation;checker.check(invocations,wanted);assertNotNull(reporterStub.wanted);assertNotNull(reporterStub.actual);assertSame(actualInvocation.getLocation(),reporterStub.actualLocation);}"
"org.mockitousage.misuse.InvalidUsageTest.shouldRequireArgumentsWhenVerifyingNoMoreInteractions",0,"@Test(expected=MockitoException.class)public void shouldRequireArgumentsWhenVerifyingNoMoreInteractions(){verifyNoMoreInteractions();}"
"org.mockitousage.misuse.InvalidUsageTest.shouldRequireArgumentsWhenVerifyingZeroInteractions",0,"@Test(expected=MockitoException.class)public void shouldRequireArgumentsWhenVerifyingZeroInteractions(){verifyZeroInteractions();}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotCreateInOrderObjectWithoutMocks",0,"@Test(expected=MockitoException.class)public void shouldNotCreateInOrderObjectWithoutMocks(){inOrder();}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowVerifyingInOrderUnfamilarMocks",0,"@Test(expected=MockitoException.class)public void shouldNotAllowVerifyingInOrderUnfamilarMocks(){InOrder inOrder=inOrder(mock);inOrder.verify(mockTwo).simpleMethod();}"
"org.mockitousage.misuse.InvalidUsageTest.shouldReportMissingMethodInvocationWhenStubbing",0,"@Test(expected=MissingMethodInvocationException.class)public void shouldReportMissingMethodInvocationWhenStubbing(){when(mock.simpleMethod()).thenReturn(""this stubbing is required to make sure Stubbable is pulled"");when("""".toString()).thenReturn(""x"");}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingInvalidCheckedException",0,"@Test(expected=MockitoException.class)public void shouldNotAllowSettingInvalidCheckedException()throws Exception {when(mock.simpleMethod()).thenThrow(new Exception());}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullThrowable",0,"@Test(expected=MockitoException.class)public void shouldNotAllowSettingNullThrowable()throws Exception {when(mock.simpleMethod()).thenThrow(new Throwable[]{null});}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullThrowableVararg",0,"@SuppressWarnings(""all"")@Test(expected=MockitoException.class)public void shouldNotAllowSettingNullThrowableVararg()throws Exception {when(mock.simpleMethod()).thenThrow(null);}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowSettingNullConsecutiveThrowable",0,"@Test(expected=MockitoException.class)public void shouldNotAllowSettingNullConsecutiveThrowable()throws Exception {when(mock.simpleMethod()).thenThrow(new RuntimeException(),null);}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowMockingFinalClasses",0,"@Test(expected=MockitoException.class)public void shouldNotAllowMockingFinalClasses()throws Exception {mock(FinalClass.class);}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotAllowMockingPrimitves",0,"@Test(expected=MockitoException.class)public void shouldNotAllowMockingPrimitves()throws Exception {mock(Integer.TYPE);}"
"org.mockitousage.misuse.InvalidUsageTest.shouldNotMockObjectMethodsOnInterface",0,"@Test public void shouldNotMockObjectMethodsOnInterface()throws Exception {ObjectLikeInterface inter=mock(ObjectLikeInterface.class);inter.equals(null);inter.toString();inter.hashCode();verifyZeroInteractions(inter);}"
"org.mockito.internal.matchers.LocalizedMatcherTest.shouldMatchTypesWhenActualMatcherHasCorrectType",0,"@Test public void shouldMatchTypesWhenActualMatcherHasCorrectType()throws Exception {ContainsExtraTypeInformation equals10=new Equals(10);LocalizedMatcher m=new LocalizedMatcher((Matcher)equals10);assertTrue(m.typeMatches(10));assertFalse(m.typeMatches(10L));}"
"org.mockito.internal.matchers.LocalizedMatcherTest.shouldNotMatchTypesWhenActualMatcherDoesNotHaveCorrectType",0,"@Test public void shouldNotMatchTypesWhenActualMatcherDoesNotHaveCorrectType()throws Exception {LocalizedMatcher m=new LocalizedMatcher(Any.ANY);assertFalse(m.typeMatches(10));}"
"org.mockito.internal.matchers.LocalizedMatcherTest.shouldDescribeWithTypeInfoWhenActualMatcherHasCorrectType",0,"@Test public void shouldDescribeWithTypeInfoWhenActualMatcherHasCorrectType()throws Exception {ContainsExtraTypeInformation equals10=new Equals(10);LocalizedMatcher m=new LocalizedMatcher((Matcher)equals10);assertEquals(""(Integer)10"",describe(m.withExtraTypeInfo()));}"
"org.mockito.internal.matchers.LocalizedMatcherTest.shouldNotDescribeWithTypeInfoWhenActualMatcherDoesNotHaveCorrectType",0,"@Test public void shouldNotDescribeWithTypeInfoWhenActualMatcherDoesNotHaveCorrectType()throws Exception {LocalizedMatcher m=new LocalizedMatcher(Any.ANY);assertSame(m,m.withExtraTypeInfo());}"
"org.mockitousage.verification.VerificationInOrderTest.shouldVerifySingleMockInOrderAndNotInOrder",0,"@Test public void shouldVerifySingleMockInOrderAndNotInOrder(){mockOne=mock(IMethods.class);inOrder=inOrder(mockOne);mockOne.simpleMethod(1);mockOne.simpleMethod(2);verify(mockOne).simpleMethod(2);verify(mockOne).simpleMethod(1);inOrder.verify(mockOne).simpleMethod(2);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.VerificationInOrderTest.shouldMessagesPointToProperMethod",0,"@Test public void shouldMessagesPointToProperMethod(){mockTwo.differentMethod();mockOne.simpleMethod();try {inOrder.verify(mockOne,atLeastOnce()).differentMethod();fail();}catch(WantedButNotInvoked e){assertContains(""differentMethod()"",e.getMessage());}}"
"org.mockitousage.verification.VerificationInOrderTest.shouldVerifyInOrderWhenTwoChunksAreEqual",0,"@Test public void shouldVerifyInOrderWhenTwoChunksAreEqual(){mockOne.simpleMethod();mockOne.simpleMethod();mockTwo.differentMethod();mockOne.simpleMethod();mockOne.simpleMethod();inOrder.verify(mockOne,times(2)).simpleMethod();inOrder.verify(mockTwo).differentMethod();inOrder.verify(mockOne,times(2)).simpleMethod();try {inOrder.verify(mockOne,atLeastOnce()).simpleMethod();fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.VerificationInOrderTest.shouldVerifyInOrderUsingMatcher",0,"@Test public void shouldVerifyInOrderUsingMatcher(){mockOne.simpleMethod(1);mockOne.simpleMethod(2);mockTwo.differentMethod();mockOne.simpleMethod(3);mockOne.simpleMethod(4);verify(mockOne,times(4)).simpleMethod(anyInt());inOrder.verify(mockOne,times(2)).simpleMethod(anyInt());inOrder.verify(mockTwo).differentMethod();inOrder.verify(mockOne,times(2)).simpleMethod(anyInt());try {inOrder.verify(mockOne,times(3)).simpleMethod(anyInt());fail();}catch(VerificationInOrderFailure e){}}"
"org.concurrentmockito.VerificationInOrderFromMultipleThreadsTest.shouldVerifyInOrderWhenMultipleThreadsInteractWithMock",0,"@Test public void shouldVerifyInOrderWhenMultipleThreadsInteractWithMock()throws Exception {final Foo testInf=mock(Foo.class);Thread threadOne=new Thread(new Runnable(){public void run(){testInf.methodOne();}});threadOne.start();threadOne.join();Thread threadTwo=new Thread(new Runnable(){public void run(){testInf.methodTwo();}});threadTwo.start();threadTwo.join();InOrder inOrder=inOrder(testInf);inOrder.verify(testInf).methodOne();inOrder.verify(testInf).methodTwo();}"
"org.mockitousage.misuse.RestrictedObjectMethodsTest.shouldNotAllowVerifyingRestrictedMethods",0,"@Ignore @Test public void shouldNotAllowVerifyingRestrictedMethods(){verify(mock).toString();verify(mock).hashCode();verify(mock).equals(null);}"
"org.mockitousage.matchers.HamcrestMatchersTest.shouldAcceptHamcrestMatcher",0,"@Test public void shouldAcceptHamcrestMatcher(){when(mock.simpleMethod(argThat(new ContainsX()))).thenReturn(""X"");assertNull(mock.simpleMethod(""blah""));assertEquals(""X"",mock.simpleMethod(""blah X blah""));}"
"org.mockitousage.matchers.HamcrestMatchersTest.shouldVerifyUsingHamcrestMatcher",0,"@Test public void shouldVerifyUsingHamcrestMatcher(){mock.simpleMethod(""blah"");try {verify(mock).simpleMethod(argThat(new ContainsX()));fail();}catch(ArgumentsAreDifferent e){assertContains(""contains 'X'"",e.getMessage());}}"
"org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList",0,"@Test public void shouldAllowAnyList(){when(mock.forList(anyList())).thenReturn(""x"");assertEquals(""x"",mock.forList(null));assertEquals(""x"",mock.forList(Arrays.asList(""x"",""y"")));verify(mock,times(2)).forList(anyList());}"
"org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyCollection",0,"@Test public void shouldAllowAnyCollection(){when(mock.forCollection(anyCollection())).thenReturn(""x"");assertEquals(""x"",mock.forCollection(null));assertEquals(""x"",mock.forCollection(Arrays.asList(""x"",""y"")));verify(mock,times(2)).forCollection(anyCollection());}"
"org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap",0,"@Test public void shouldAllowAnyMap(){when(mock.forMap(anyMap())).thenReturn(""x"");assertEquals(""x"",mock.forMap(null));assertEquals(""x"",mock.forMap(new HashMap<String,String>()));verify(mock,times(2)).forMap(anyMap());}"
"org.mockitousage.matchers.NewMatchersTest.shouldAllowAnySet",0,"@Test public void shouldAllowAnySet(){when(mock.forSet(anySet())).thenReturn(""x"");assertEquals(""x"",mock.forSet(null));assertEquals(""x"",mock.forSet(new HashSet<String>()));verify(mock,times(2)).forSet(anySet());}"
"org.mockito.internal.matchers.ComparableMatchersTest.testLessThan",0,"@Test public void testLessThan(){test(new LessThan<String>(""b""),true,false,false,""lt"");}"
"org.mockito.internal.matchers.ComparableMatchersTest.testGreateThan",0,"@Test public void testGreateThan(){test(new GreaterThan<String>(""b""),false,true,false,""gt"");}"
"org.mockito.internal.matchers.ComparableMatchersTest.testLessOrEqual",0,"@Test public void testLessOrEqual(){test(new LessOrEqual<String>(""b""),true,false,true,""leq"");}"
"org.mockito.internal.matchers.ComparableMatchersTest.testGreateOrEqual",0,"@Test public void testGreateOrEqual(){test(new GreaterOrEqual<String>(""b""),false,true,true,""geq"");}"
"org.mockito.internal.matchers.ComparableMatchersTest.testCompareEqual",0,"@Test public void testCompareEqual(){test(new CompareEqual<String>(""b""),false,false,true,""cmpEq"");CompareEqual<BigDecimal> cmpEq=new CompareEqual<BigDecimal>(new BigDecimal(""5.00""));assertTrue(cmpEq.matches(new BigDecimal(""5"")));}"
"org.mockitousage.PlaygroundTest.should",0,"@Test public void should()throws Exception {Boo boo=mock(Boo.class);boo.withLong(100);verify(boo).withLong(new Long(100));}"
"org.mockitousage.PlaygroundTest.spyInAction",0,"@Ignore @Test public void spyInAction(){mock=spy(new Foo());when(mock.getStuff()).thenReturn(""aha!"");mock.doSomeThing();}"
"org.mockitousage.PlaygroundTest.partialMockInAction",0,"@Test public void partialMockInAction(){}"
"org.concurrentmockito.ThreadsStubSharedMockTest.shouldStubFineConcurrently",0,"@Ignore(""stubbing from multiple threads is not supported"")@Test public void shouldStubFineConcurrently()throws Exception {for (int i=0;i < 100;i++){performTest();}}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldVerifyAtMostXTimes",0,"@Test public void shouldVerifyAtMostXTimes()throws Exception {mock.clear();mock.clear();verify(mock,atMost(2)).clear();verify(mock,atMost(3)).clear();try {verify(mock,atMost(1)).clear();fail();}catch(MockitoAssertionError e){}}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldWorkWithArgumentMatchers",0,"@Test public void shouldWorkWithArgumentMatchers()throws Exception {mock.add(""one"");verify(mock,atMost(5)).add(anyString());try {verify(mock,atMost(0)).add(anyString());fail();}catch(MockitoAssertionError e){}}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldNotAllowNegativeNumber",0,"@Test public void shouldNotAllowNegativeNumber()throws Exception {try {verify(mock,atMost(-1)).clear();fail();}catch(MockitoException e){assertEquals(""Negative value is not allowed here"",e.getMessage());}}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldPrintDecentMessage",0,"@Test public void shouldPrintDecentMessage()throws Exception {mock.clear();mock.clear();try {verify(mock,atMost(1)).clear();fail();}catch(MockitoAssertionError e){assertEquals(""\nWanted at most 1 time but was 2"",e.getMessage());}}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldNotAllowInOrderMode",0,"@Test public void shouldNotAllowInOrderMode()throws Exception {mock.clear();InOrder inOrder=inOrder(mock);try {inOrder.verify(mock,atMost(1)).clear();fail();}catch(MockitoException e){assertEquals(""AtMost is not implemented to work with InOrder"",e.getMessage());}}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldMarkInteractionsAsVerified",0,"@Test public void shouldMarkInteractionsAsVerified()throws Exception {mock.clear();mock.clear();verify(mock,atMost(3)).clear();verifyNoMoreInteractions(mock);}"
"org.mockitousage.verification.AtMostXVerificationTest.shouldDetectUnverifiedInMarkInteractionsAsVerified",0,"@Test public void shouldDetectUnverifiedInMarkInteractionsAsVerified()throws Exception {mock.clear();mock.clear();undesiredInteraction();verify(mock,atMost(3)).clear();try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){assertContains(""undesiredInteraction("",e.getMessage());}}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindActualInvocations",0,"@Test public void shouldFindActualInvocations()throws Exception {List<Invocation> actual=finder.findInvocations(invocations,new InvocationMatcher(simpleMethodInvocation));assertThat(actual,hasExactlyInOrder(simpleMethodInvocation,simpleMethodInvocationTwo));actual=finder.findInvocations(invocations,new InvocationMatcher(differentMethodInvocation));assertThat(actual,hasExactlyInOrder(differentMethodInvocation));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInvocation",0,"@Test public void shouldFindFirstUnverifiedInvocation()throws Exception {assertSame(simpleMethodInvocation,finder.findFirstUnverified(invocations));simpleMethodInvocationTwo.markVerified();simpleMethodInvocation.markVerified();assertSame(differentMethodInvocation,finder.findFirstUnverified(invocations));differentMethodInvocation.markVerified();assertNull(finder.findFirstUnverified(invocations));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstUnverifiedInvocationOnMock",0,"@Test public void shouldFindFirstUnverifiedInvocationOnMock()throws Exception {assertSame(simpleMethodInvocation,finder.findFirstUnverified(invocations,simpleMethodInvocation.getMock()));assertNull(finder.findFirstUnverified(invocations,""different mock""));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindFirstSimilarInvocationByName",0,"@Test public void shouldFindFirstSimilarInvocationByName()throws Exception {Invocation overloadedSimpleMethod=new InvocationBuilder().mock(mock).simpleMethod().arg(""test"").toInvocation();Invocation found=finder.findSimilarInvocation(invocations,new InvocationMatcher(overloadedSimpleMethod));assertSame(found,simpleMethodInvocation);}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindInvocationWithTheSameMethod",0,"@Test public void shouldFindInvocationWithTheSameMethod()throws Exception {Invocation overloadedDifferentMethod=new InvocationBuilder().differentMethod().arg(""test"").toInvocation();invocations.add(overloadedDifferentMethod);Invocation found=finder.findSimilarInvocation(invocations,new InvocationMatcher(overloadedDifferentMethod));assertSame(found,overloadedDifferentMethod);}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldGetLastStackTrace",0,"@Test public void shouldGetLastStackTrace()throws Exception {Location last=finder.getLastLocation(invocations);assertSame(differentMethodInvocation.getLocation(),last);assertNull(finder.getLastLocation(Collections.<Invocation>emptyList()));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindAllMatchingUnverifiedChunks",0,"@Test public void shouldFindAllMatchingUnverifiedChunks()throws Exception {List<Invocation> allMatching=finder.findAllMatchingUnverifiedChunks(invocations,new InvocationMatcher(simpleMethodInvocation));assertThat(allMatching,hasExactlyInOrder(simpleMethodInvocation,simpleMethodInvocationTwo));simpleMethodInvocation.markVerifiedInOrder();allMatching=finder.findAllMatchingUnverifiedChunks(invocations,new InvocationMatcher(simpleMethodInvocation));assertThat(allMatching,hasExactlyInOrder(simpleMethodInvocationTwo));simpleMethodInvocationTwo.markVerifiedInOrder();allMatching=finder.findAllMatchingUnverifiedChunks(invocations,new InvocationMatcher(simpleMethodInvocation));assertTrue(allMatching.isEmpty());}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindMatchingChunk",0,"@Test public void shouldFindMatchingChunk()throws Exception {List<Invocation> chunk=finder.findMatchingChunk(invocations,new InvocationMatcher(simpleMethodInvocation),2);assertThat(chunk,hasExactlyInOrder(simpleMethodInvocation,simpleMethodInvocationTwo));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldReturnAllChunksWhenModeIsAtLeastOnce",0,"@Test public void shouldReturnAllChunksWhenModeIsAtLeastOnce()throws Exception {Invocation simpleMethodInvocationThree=new InvocationBuilder().mock(mock).toInvocation();invocations.add(simpleMethodInvocationThree);List<Invocation> chunk=finder.findMatchingChunk(invocations,new InvocationMatcher(simpleMethodInvocation),1);assertThat(chunk,hasExactlyInOrder(simpleMethodInvocation,simpleMethodInvocationTwo,simpleMethodInvocationThree));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldReturnAllChunksWhenWantedCountDoesntMatch",0,"@Test public void shouldReturnAllChunksWhenWantedCountDoesntMatch()throws Exception {Invocation simpleMethodInvocationThree=new InvocationBuilder().mock(mock).toInvocation();invocations.add(simpleMethodInvocationThree);List<Invocation> chunk=finder.findMatchingChunk(invocations,new InvocationMatcher(simpleMethodInvocation),1);assertThat(chunk,hasExactlyInOrder(simpleMethodInvocation,simpleMethodInvocationTwo,simpleMethodInvocationThree));}"
"org.mockito.internal.invocation.InvocationsFinderTest.shouldFindPreviousInOrder",0,"@Test public void shouldFindPreviousInOrder()throws Exception {Invocation previous=finder.findPreviousVerifiedInOrder(invocations);assertNull(previous);simpleMethodInvocation.markVerifiedInOrder();simpleMethodInvocationTwo.markVerifiedInOrder();previous=finder.findPreviousVerifiedInOrder(invocations);assertSame(simpleMethodInvocationTwo,previous);}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldValidateNullThrowable",0,"@Test public void shouldValidateNullThrowable()throws Throwable {try {validator.validate(new ThrowsException(null),null);fail();}catch(MockitoException e){}}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldPassProperCheckedException",0,"@Test public void shouldPassProperCheckedException()throws Throwable {validator.validate(new ThrowsException(new CharacterCodingException()),invocation);}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailInvalidCheckedException",0,"@Test(expected=MockitoException.class)public void shouldFailInvalidCheckedException()throws Throwable {validator.validate(new ThrowsException(new IOException()),invocation);}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldPassRuntimeExceptions",0,"@Test public void shouldPassRuntimeExceptions()throws Throwable {validator.validate(new ThrowsException(new Error()),invocation);validator.validate(new ThrowsException(new RuntimeException()),invocation);}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailWhenReturnValueIsSetForVoidMethod",0,"@Test(expected=MockitoException.class)public void shouldFailWhenReturnValueIsSetForVoidMethod()throws Throwable {validator.validate(new Returns(""one""),new InvocationBuilder().method(""voidMethod"").toInvocation());}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailWhenNonVoidMethodDoesNothing",0,"@Test(expected=MockitoException.class)public void shouldFailWhenNonVoidMethodDoesNothing()throws Throwable {validator.validate(new DoesNothing(),new InvocationBuilder().simpleMethod().toInvocation());}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldAllowVoidReturnForVoidMethod",0,"@Test public void shouldAllowVoidReturnForVoidMethod()throws Throwable {validator.validate(new DoesNothing(),new InvocationBuilder().method(""voidMethod"").toInvocation());}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldAllowCorrectTypeOfReturnValue",0,"@Test public void shouldAllowCorrectTypeOfReturnValue()throws Throwable {validator.validate(new Returns(""one""),new InvocationBuilder().simpleMethod().toInvocation());validator.validate(new Returns(false),new InvocationBuilder().method(""booleanReturningMethod"").toInvocation());validator.validate(new Returns(new Boolean(true)),new InvocationBuilder().method(""booleanObjectReturningMethod"").toInvocation());validator.validate(new Returns(1),new InvocationBuilder().method(""integerReturningMethod"").toInvocation());validator.validate(new Returns(1L),new InvocationBuilder().method(""longReturningMethod"").toInvocation());validator.validate(new Returns(1L),new InvocationBuilder().method(""longObjectReturningMethod"").toInvocation());validator.validate(new Returns(null),new InvocationBuilder().method(""objectReturningMethodNoArgs"").toInvocation());validator.validate(new Returns(1),new InvocationBuilder().method(""objectReturningMethodNoArgs"").toInvocation());}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailOnReturnTypeMismatch",0,"@Test(expected=MockitoException.class)public void shouldFailOnReturnTypeMismatch()throws Throwable {validator.validate(new Returns(""String""),new InvocationBuilder().method(""booleanReturningMethod"").toInvocation());}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailOnWrongPrimitive",0,"@Test(expected=MockitoException.class)public void shouldFailOnWrongPrimitive()throws Throwable {validator.validate(new Returns(1),new InvocationBuilder().method(""doubleReturningMethod"").toInvocation());}"
"org.mockito.internal.stubbing.answers.AnswersValidatorTest.shouldFailOnNullWithPrimitive",0,"@Test(expected=MockitoException.class)public void shouldFailOnNullWithPrimitive()throws Throwable {validator.validate(new Returns(null),new InvocationBuilder().method(""booleanReturningMethod"").toInvocation());}"
"org.mockitousage.basicapi.MocksCreationTest.shouldCreateMockWhenConstructorIsPrivate",0,"@Test public void shouldCreateMockWhenConstructorIsPrivate(){assertNotNull(Mockito.mock(HasPrivateConstructor.class));}"
"org.mockitousage.basicapi.MocksCreationTest.shouldCombineMockNameAndSmartNulls",0,"@Test public void shouldCombineMockNameAndSmartNulls(){IMethods mock=mock(IMethods.class,withSettings().defaultAnswer(RETURNS_SMART_NULLS).name(""great mockie""));IMethods smartNull=mock.iMethodsReturningMethod();String name=mock.toString();assertContains(""great mockie"",name);try {smartNull.simpleMethod();fail();}catch(SmartNullPointerException e){}}"
"org.mockitousage.basicapi.MocksCreationTest.shouldCombineMockNameAndExtraInterfaces",0,"@Test public void shouldCombineMockNameAndExtraInterfaces(){}"
"org.mockitousage.basicapi.MocksCreationTest.shouldSpecifyMockNameViaSettings",0,"@Test public void shouldSpecifyMockNameViaSettings(){IMethods mock=mock(IMethods.class,withSettings().name(""great mockie""));String name=mock.toString();assertContains(""great mockie"",name);}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldReturnTheUsualDefaultValuesForPrimitives",0,"@Test public void shouldReturnTheUsualDefaultValuesForPrimitives()throws Throwable {Answer<Object> answer=new ReturnsSmartNulls();assertEquals(false,answer.answer(invocationOf(HasPrimitiveMethods.class,""booleanMethod"")));assertEquals((char)0,answer.answer(invocationOf(HasPrimitiveMethods.class,""charMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""intMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""longMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""floatMethod"")));assertEquals(0,answer.answer(invocationOf(HasPrimitiveMethods.class,""doubleMethod"")));}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives",0,"@Test public void shouldReturnAnObjectThatFailsOnAnyMethodInvocationForNonPrimitives()throws Throwable {Answer<Object> answer=new ReturnsSmartNulls();Foo smartNull=(Foo)answer.answer(invocationOf(Foo.class,""get""));try {smartNull.get();fail();}catch(SmartNullPointerException expected){}}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsSmartNullsTest.shouldReturnAnObjectThatAllowsObjectMethods",0,"@Test public void shouldReturnAnObjectThatAllowsObjectMethods()throws Throwable {Answer<Object> answer=new ReturnsSmartNulls();Foo smartNull=(Foo)answer.answer(invocationOf(Foo.class,""get""));assertEquals(""SmartNull returned by unstubbed get()method on mock"",smartNull + """");}"
"org.mockito.internal.util.ListUtilTest.shouldFilterList",0,"@Test public void shouldFilterList()throws Exception {List list=asList(""one"",""x"",""two"",""x"",""three"");List filtered=ListUtil.filter(list,new Filter(){public boolean isOut(Object object){return object == ""x"";}});assertThat(filtered,hasExactlyInOrder(""one"",""two"",""three""));}"
"org.mockito.internal.util.ListUtilTest.shouldReturnEmptyIfEmptyListGiven",0,"@Test public void shouldReturnEmptyIfEmptyListGiven()throws Exception {List list=new LinkedList();List filtered=ListUtil.filter(list,null);assertTrue(filtered.isEmpty());}"
"org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyWithAnyObjectSubstitutingVarargs",0,"@Ignore @Test public void shouldVerifyCorrectlyWithAnyObjectSubstitutingVarargs(){table.newRow(""qux"",""foo"",""bar"",""baz"");table.newRow(""abc"",""def"");verify(table,times(2)).newRow(anyString(),(String[])anyObject());}"
"org.mockitousage.bugs.VarargsAndAnyObjectPicksUpExtraInvocationsTest.shouldVerifyCorrectlyWithVarargs",0,"@Test public void shouldVerifyCorrectlyWithVarargs(){table.newRow(""qux"",""foo"",""bar"",""baz"");table.newRow(""abc"",""def"");verify(table).newRow(anyString(),eq(""foo""),anyString(),anyString());verify(table).newRow(anyString(),anyString());}"
"org.mockitousage.stubbing.CallingRealMethodTest.shouldAllowCallingInternalMethod",0,"@Test public void shouldAllowCallingInternalMethod(){when(mock.getValue()).thenReturn(""foo"");when(mock.callInternalMethod()).thenCallRealMethod();assertEquals(""foo"",mock.callInternalMethod());}"
"org.mockitousage.stubbing.CallingRealMethodTest.shouldReturnRealValue",0,"@Test public void shouldReturnRealValue(){when(mock.getValue()).thenCallRealMethod();Assert.assertEquals(""HARD_CODED_RETURN_VALUE"",mock.getValue());}"
"org.mockitousage.stubbing.CallingRealMethodTest.shouldExecuteRealMethod",0,"@Test public void shouldExecuteRealMethod(){doCallRealMethod().when(mock).setValue(anyString());mock.setValue(""REAL_VALUE"");Assert.assertEquals(""REAL_VALUE"",mock.value);}"
"org.mockitousage.stubbing.CallingRealMethodTest.shouldCallRealMethodByDefault",0,"@Test public void shouldCallRealMethodByDefault(){TestedObject mock=mock(TestedObject.class,CALLS_REAL_METHODS);Assert.assertEquals(""HARD_CODED_RETURN_VALUE"",mock.getValue());}"
"org.mockitousage.stubbing.CallingRealMethodTest.shouldNotCallRealMethodWhenStubbedLater",0,"@Test public void shouldNotCallRealMethodWhenStubbedLater(){TestedObject mock=mock(TestedObject.class);when(mock.getValue()).thenCallRealMethod();when(mock.getValue()).thenReturn(""FAKE_VALUE"");Assert.assertEquals(""FAKE_VALUE"",mock.getValue());}"
"org.concurrentmockito.ThreadsShareGenerouslyStubbedMockTest.shouldAllowVerifyingInThreads",0,"@Test public void shouldAllowVerifyingInThreads()throws Exception {for (int i=0;i < 50;i++){performTest();}}"
"org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCasting",0,"@Test public void shouldHelpOutWithUnnecessaryCasting(){when(mock.objectArgMethod(any(String.class))).thenReturn(""string"");assertEquals(""string"",mock.objectArgMethod(""foo""));}"
"org.mockitousage.matchers.MoreMatchersTest.shouldAnyBeActualAliasToAnyObject",0,"@Test public void shouldAnyBeActualAliasToAnyObject(){mock.simpleMethod((Object)null);verify(mock).simpleMethod(anyObject());verify(mock).simpleMethod(any(Object.class));}"
"org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfLists",0,"@Test public void shouldHelpOutWithUnnecessaryCastingOfLists(){when(mock.listArgMethod(anyListOf(String.class))).thenReturn(""list"");assertEquals(""list"",mock.listArgMethod(new LinkedList<String>()));assertEquals(""list"",mock.listArgMethod(Collections.<String>emptyList()));}"
"org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfSets",0,"@Test public void shouldHelpOutWithUnnecessaryCastingOfSets(){when(mock.setArgMethod(anySetOf(String.class))).thenReturn(""set"");assertEquals(""set"",mock.setArgMethod(new HashSet<String>()));assertEquals(""set"",mock.setArgMethod(Collections.<String>emptySet()));}"
"org.mockitousage.matchers.MoreMatchersTest.shouldHelpOutWithUnnecessaryCastingOfCollections",0,"@Test public void shouldHelpOutWithUnnecessaryCastingOfCollections(){when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn(""col"");assertEquals(""col"",mock.collectionArgMethod(new ArrayList<String>()));assertEquals(""col"",mock.collectionArgMethod(Collections.<String>emptyList()));}"
"org.mockitousage.puzzlers.OverloadingPuzzleTest.shouldUseArgumentTypeWhenOverloadingPuzzleDetected",0,"@Test public void shouldUseArgumentTypeWhenOverloadingPuzzleDetected()throws Exception {Sub sub=mock(Sub.class);setMockWithDowncast(sub);say(""Hello"");try {verify(sub).say(""Hello"");fail();}catch(WantedButNotInvoked e){}}"
"org.mockito.internal.MockHandlerTest.shouldRemoveVerificationModeEvenWhenInvalidMatchers",0,"@Test public void shouldRemoveVerificationModeEvenWhenInvalidMatchers()throws Throwable {MockingProgress state=new MockingProgressImpl();state.verificationStarted(VerificationModeFactory.atLeastOnce());MockHandler handler=new MockHandler(null,state,new ExceptionThrowingBinder(),null);try {handler.intercept(null,String.class.getDeclaredMethod(""toString""),new Object[]{},null);fail();}catch(InvalidUseOfMatchersException e){}assertNull(state.pullVerificationMode());}"
"org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest.shouldNotFilterWhenConfigurationSaysNo",0,"@Test public void shouldNotFilterWhenConfigurationSaysNo(){ConfigurationAccess.getConfig().overrideCleansStackTrace(false);Throwable t=new TraceBuilder().classes(""org.test.MockitoSampleTest"",""org.mockito.Mockito"").toThrowable();filter.filter(t);assertThat(t,hasOnlyThoseClassesInStackTrace(""org.mockito.Mockito"",""org.test.MockitoSampleTest""));}"
"org.mockito.internal.exceptions.base.ConditionalStackTraceFilterTest.shouldFilterWhenConfigurationSaysYes",0,"@Test public void shouldFilterWhenConfigurationSaysYes(){ConfigurationAccess.getConfig().overrideCleansStackTrace(true);Throwable t=new TraceBuilder().classes(""org.test.MockitoSampleTest"",""org.mockito.Mockito"").toThrowable();filter.filter(t);assertThat(t,hasOnlyThoseClassesInStackTrace(""org.test.MockitoSampleTest""));}"
"org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenFirstIsMulti",0,"@Test public void shouldPrintBothInMultilinesWhenFirstIsMulti(){SmartPrinter printer=new SmartPrinter(multi,shortie);assertContains(""\n"",printer.getWanted().toString());assertContains(""\n"",printer.getActual().toString());}"
"org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenSecondIsMulti",0,"@Test public void shouldPrintBothInMultilinesWhenSecondIsMulti(){SmartPrinter printer=new SmartPrinter(shortie,multi);assertContains(""\n"",printer.getWanted().toString());assertContains(""\n"",printer.getActual().toString());}"
"org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInMultilinesWhenBothAreMulti",0,"@Test public void shouldPrintBothInMultilinesWhenBothAreMulti(){SmartPrinter printer=new SmartPrinter(multi,multi);assertContains(""\n"",printer.getWanted().toString());assertContains(""\n"",printer.getActual().toString());}"
"org.mockito.internal.verification.SmartPrinterTest.shouldPrintBothInSingleLineWhenBothAreShort",0,"@Test public void shouldPrintBothInSingleLineWhenBothAreShort(){SmartPrinter printer=new SmartPrinter(shortie,shortie);assertNotContains(""\n"",printer.getWanted().toString());assertNotContains(""\n"",printer.getActual().toString());}"
"org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyExactNumberOfInvocationsUsingMatcher",0,"@Test public void shouldVerifyExactNumberOfInvocationsUsingMatcher(){mock.simpleMethod(1);mock.simpleMethod(2);mock.simpleMethod(3);verify(mock,times(3)).simpleMethod(anyInt());}"
"org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyUsingSameMatcher",0,"@Test public void shouldVerifyUsingSameMatcher(){Object one=new String(""1243"");Object two=new String(""1243"");Object three=new String(""1243"");assertNotSame(one,two);assertEquals(one,two);assertEquals(two,three);mock.oneArg(one);mock.oneArg(two);verify(mock).oneArg(same(one));verify(mock,times(2)).oneArg(two);try {verify(mock).oneArg(same(three));fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.verification.VerificationUsingMatchersTest.shouldVerifyUsingMixedMatchers",0,"@Test public void shouldVerifyUsingMixedMatchers(){mock.threeArgumentMethod(11,"""",""01234"");try {verify(mock).threeArgumentMethod(and(geq(7),leq(10)),isA(String.class),Matchers.contains(""123""));fail();}catch(ArgumentsAreDifferent e){}mock.threeArgumentMethod(8,new Object(),""01234"");try {verify(mock).threeArgumentMethod(and(geq(7),leq(10)),isA(String.class),Matchers.contains(""123""));fail();}catch(ArgumentsAreDifferent e){}mock.threeArgumentMethod(8,"""",""no match"");try {verify(mock).threeArgumentMethod(and(geq(7),leq(10)),isA(String.class),Matchers.contains(""123""));fail();}catch(ArgumentsAreDifferent e){}mock.threeArgumentMethod(8,"""",""123"");verify(mock).threeArgumentMethod(and(geq(7),leq(10)),isA(String.class),Matchers.contains(""123""));}"
"org.mockito.internal.configuration.ReadingConfigurationFromClasspathTest.shouldReadConfigurationClassFromClassPath",0,"@Test public void shouldReadConfigurationClassFromClassPath(){ConfigurationAccess.getConfig().overrideDefaultAnswer(new Answer<Object>(){public Object answer(InvocationOnMock invocation){return ""foo"";}});IMethods mock=mock(IMethods.class);assertEquals(""foo"",mock.simpleMethod());}"
"org.mockito.internal.stubbing.MockitoStubberTest.shouldFinishStubbingWhenWrongThrowableIsSet",0,"@Test public void shouldFinishStubbingWhenWrongThrowableIsSet()throws Exception {state.stubbingStarted();try {mockitoStubber.addAnswer(new ThrowsException(new Exception()));fail();}catch(MockitoException e){state.validateState();}}"
"org.mockito.internal.stubbing.MockitoStubberTest.shouldFinishStubbingOnAddingReturnValue",0,"@Test public void shouldFinishStubbingOnAddingReturnValue()throws Exception {state.stubbingStarted();mockitoStubber.addAnswer(new Returns(""test""));state.validateState();}"
"org.mockito.internal.stubbing.MockitoStubberTest.shouldGetResultsForMethods",0,"@Test public void shouldGetResultsForMethods()throws Throwable {mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(simpleMethod));mockitoStubber.addAnswer(new Returns(""simpleMethod""));Invocation differentMethod=new InvocationBuilder().differentMethod().toInvocation();mockitoStubber.setInvocationForPotentialStubbing(new InvocationMatcher(differentMethod));mockitoStubber.addAnswer(new ThrowsException(new MyException()));assertEquals(""simpleMethod"",mockitoStubber.answerTo(simpleMethod));try {mockitoStubber.answerTo(differentMethod);fail();}catch(MyException e){}}"
"org.mockito.internal.stubbing.MockitoStubberTest.shouldAddThrowableForVoidMethod",0,"@Test public void shouldAddThrowableForVoidMethod()throws Throwable {mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new MyException()));mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));try {mockitoStubber.answerTo(simpleMethod);fail();}catch(MyException e){}}"
"org.mockito.internal.stubbing.MockitoStubberTest.shouldValidateThrowableForVoidMethod",0,"@Test public void shouldValidateThrowableForVoidMethod()throws Throwable {mockitoStubber.addAnswerForVoidMethod(new ThrowsException(new Exception()));try {mockitoStubber.setMethodForStubbing(new InvocationMatcher(simpleMethod));fail();}catch(MockitoException e){}}"
"org.mockito.internal.stubbing.MockitoStubberTest.shouldValidateThrowable",0,"@Test public void shouldValidateThrowable()throws Throwable {try {mockitoStubber.addAnswer(new ThrowsException(null));fail();}catch(MockitoException e){}}"
"org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithString",0,"@Test public void sameToStringWithString(){assertEquals(""same(\""X\"")"",describe(new Same(""X"")));}"
"org.mockito.internal.matchers.MatchersToStringTest.nullToString",0,"@Test public void nullToString(){assertEquals(""isNull()"",describe(Null.NULL));}"
"org.mockito.internal.matchers.MatchersToStringTest.notNullToString",0,"@Test public void notNullToString(){assertEquals(""notNull()"",describe(NotNull.NOT_NULL));}"
"org.mockito.internal.matchers.MatchersToStringTest.anyToString",0,"@Test public void anyToString(){assertEquals(""<any>"",describe(Any.ANY));}"
"org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithChar",0,"@Test public void sameToStringWithChar(){assertEquals(""same('x')"",describe(new Same('x')));}"
"org.mockito.internal.matchers.MatchersToStringTest.sameToStringWithObject",0,"@Test public void sameToStringWithObject(){Object o=new Object(){@Override public String toString(){return ""X"";}};assertEquals(""same(X)"",describe(new Same(o)));}"
"org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithString",0,"@Test public void equalsToStringWithString(){assertEquals(""\""X\"""",describe(new Equals(""X"")));}"
"org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithChar",0,"@Test public void equalsToStringWithChar(){assertEquals(""'x'"",describe(new Equals('x')));}"
"org.mockito.internal.matchers.MatchersToStringTest.equalsToStringWithObject",0,"@Test public void equalsToStringWithObject(){Object o=new Object(){@Override public String toString(){return ""X"";}};assertEquals(""X"",describe(new Equals(o)));}"
"org.mockito.internal.matchers.MatchersToStringTest.orToString",0,"@Test public void orToString(){List<Matcher> matchers=new ArrayList<Matcher>();matchers.add(new Equals(1));matchers.add(new Equals(2));assertEquals(""or(1,2)"",describe(new Or(matchers)));}"
"org.mockito.internal.matchers.MatchersToStringTest.notToString",0,"@Test public void notToString(){assertEquals(""not(1)"",describe(new Not(new Equals(1))));}"
"org.mockito.internal.matchers.MatchersToStringTest.andToString",0,"@Test public void andToString(){List<Matcher> matchers=new ArrayList<Matcher>();matchers.add(new Equals(1));matchers.add(new Equals(2));assertEquals(""and(1,2)"",describe(new And(matchers)));}"
"org.mockito.internal.matchers.MatchersToStringTest.startsWithToString",0,"@Test public void startsWithToString(){assertEquals(""startsWith(\""AB\"")"",describe(new StartsWith(""AB"")));}"
"org.mockito.internal.matchers.MatchersToStringTest.endsWithToString",0,"@Test public void endsWithToString(){assertEquals(""endsWith(\""AB\"")"",describe(new EndsWith(""AB"")));}"
"org.mockito.internal.matchers.MatchersToStringTest.containsToString",0,"@Test public void containsToString(){assertEquals(""contains(\""AB\"")"",describe(new Contains(""AB"")));}"
"org.mockito.internal.matchers.MatchersToStringTest.findToString",0,"@Test public void findToString(){assertEquals(""find(\""\\\\s+\"")"",describe(new Find(""\\s+"")));}"
"org.mockito.internal.matchers.MatchersToStringTest.matchesToString",0,"@Test public void matchesToString(){assertEquals(""matches(\""\\\\s+\"")"",describe(new Matches(""\\s+"")));}"
"org.mockitousage.verification.VerificationWithTimeoutTest.shouldVerify",0,"@Test public void shouldVerify()throws Exception {mock.clear();}"
"org.mockitousage.misuse.DetectingFinalMethodsTest.shouldFailWithUnfinishedVerification",0,"@Test public void shouldFailWithUnfinishedVerification(){withFinal=mock(WithFinal.class);verify(withFinal).foo();try {verify(withFinal).foo();fail();}catch(UnfinishedVerificationException e){}}"
"org.mockitousage.misuse.DetectingFinalMethodsTest.shouldFailWithUnfinishedStubbing",0,"@Test public void shouldFailWithUnfinishedStubbing(){withFinal=mock(WithFinal.class);try {when(withFinal.foo()).thenReturn(null);fail();}catch(MissingMethodInvocationException e){}}"
"org.mockitousage.stubbing.DeprecatedStubbingTest.shouldEvaluateLatestStubbingFirst",0,"@Test public void shouldEvaluateLatestStubbingFirst()throws Exception {stub(mock.objectReturningMethod(isA(Integer.class))).toReturn(100);stub(mock.objectReturningMethod(200)).toReturn(200);assertEquals(200,mock.objectReturningMethod(200));assertEquals(100,mock.objectReturningMethod(666));assertEquals(""default behavior should return null"",null,mock.objectReturningMethod(""blah""));}"
"org.mockitousage.stubbing.DeprecatedStubbingTest.shouldStubbingBeTreatedAsInteraction",0,"@Test public void shouldStubbingBeTreatedAsInteraction()throws Exception {stub(mock.booleanReturningMethod()).toReturn(true);mock.booleanReturningMethod();try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.stubbing.DeprecatedStubbingTest.shouldAllowStubbingToString",0,"@Test public void shouldAllowStubbingToString()throws Exception {IMethods mockTwo=mock(IMethods.class);stub(mockTwo.toString()).toReturn(""test"");assertContains(""Mock for IMethods"",mock.toString());assertEquals(""test"",mockTwo.toString());}"
"org.mockitousage.stubbing.DeprecatedStubbingTest.shouldStubbingNotBeTreatedAsInteraction",0,"@Test public void shouldStubbingNotBeTreatedAsInteraction(){stub(mock.simpleMethod(""one"")).toThrow(new RuntimeException());stubVoid(mock).toThrow(new RuntimeException()).on().simpleMethod(""two"");verifyZeroInteractions(mock);}"
"org.mockitousage.stubbing.DeprecatedStubbingTest.shouldAllowConsecutiveStubbing",0,"@Test public void shouldAllowConsecutiveStubbing()throws Exception {stub(mock.simpleMethod()).toReturn(""100"").toReturn(""200"");assertEquals(""100"",mock.simpleMethod());assertEquals(""200"",mock.simpleMethod());}"
"org.concurrentmockito.ThreadsShareAMockTest.shouldAllowVerifyingInThreads",0,"@Test public void shouldAllowVerifyingInThreads()throws Exception {for (int i=0;i < 100;i++){performTest();}}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.shouldReturnEmptyCollectionsOrNullForNonCollections",0,"@SuppressWarnings(""unchecked"")@Test public void shouldReturnEmptyCollectionsOrNullForNonCollections(){ReturnsEmptyValues values=new ReturnsEmptyValues();assertTrue(((Collection)values.returnValueFor(Collection.class)).isEmpty());assertTrue(((Set)values.returnValueFor(Set.class)).isEmpty());assertTrue(((SortedSet)values.returnValueFor(SortedSet.class)).isEmpty());assertTrue(((HashSet)values.returnValueFor(HashSet.class)).isEmpty());assertTrue(((TreeSet)values.returnValueFor(TreeSet.class)).isEmpty());assertTrue(((LinkedHashSet)values.returnValueFor(LinkedHashSet.class)).isEmpty());assertTrue(((List)values.returnValueFor(List.class)).isEmpty());assertTrue(((ArrayList)values.returnValueFor(ArrayList.class)).isEmpty());assertTrue(((LinkedList)values.returnValueFor(LinkedList.class)).isEmpty());assertTrue(((Map)values.returnValueFor(Map.class)).isEmpty());assertTrue(((SortedMap)values.returnValueFor(SortedMap.class)).isEmpty());assertTrue(((HashMap)values.returnValueFor(HashMap.class)).isEmpty());assertTrue(((TreeMap)values.returnValueFor(TreeMap.class)).isEmpty());assertTrue(((LinkedHashMap)values.returnValueFor(LinkedHashMap.class)).isEmpty());assertNull(values.returnValueFor(String.class));}"
"org.mockito.internal.stubbing.defaultanswers.ReturnsEmptyValuesTest.shouldReturnPrimitive",0,"@Test public void shouldReturnPrimitive(){ReturnsEmptyValues values=new ReturnsEmptyValues();assertEquals(false,values.returnValueFor(Boolean.TYPE));assertEquals((char)0,values.returnValueFor(Character.TYPE));assertEquals(0,values.returnValueFor(Byte.TYPE));assertEquals(0,values.returnValueFor(Short.TYPE));assertEquals(0,values.returnValueFor(Integer.TYPE));assertEquals(0,values.returnValueFor(Long.TYPE));assertEquals(0,values.returnValueFor(Float.TYPE));assertEquals(0,values.returnValueFor(Double.TYPE));}"
"org.mockitousage.basicapi.ResetTest.shouldResetOngoingStubbingSoThatMoreMeaningfulExceptionsAreRaised",0,"@Test public void shouldResetOngoingStubbingSoThatMoreMeaningfulExceptionsAreRaised(){mock(IMethods.class);mock.booleanReturningMethod();reset(mock);try {when(null).thenReturn(""anything"");fail();}catch(MissingMethodInvocationException e){}}"
"org.mockitousage.basicapi.ResetTest.shouldRemoveAllStubbing",0,"@Test public void shouldRemoveAllStubbing()throws Exception {when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);when(mock.objectReturningMethod(200)).thenReturn(200);reset(mock);assertNull(mock.objectReturningMethod(200));assertEquals(""default behavior should return null"",null,mock.objectReturningMethod(""blah""));}"
"org.mockitousage.basicapi.ResetTest.shouldRemoveAllInteractions",0,"@Test public void shouldRemoveAllInteractions()throws Exception {mock.simpleMethod(1);reset(mock);verifyZeroInteractions(mock);}"
"org.mockitousage.basicapi.ResetTest.shouldRemoveStubbingToString",0,"@Test public void shouldRemoveStubbingToString()throws Exception {IMethods mockTwo=mock(IMethods.class);when(mockTwo.toString()).thenReturn(""test"");reset(mockTwo);assertContains(""Mock for IMethods"",mockTwo.toString());}"
"org.mockitousage.basicapi.ResetTest.shouldStubbingNotBeTreatedAsInteraction",0,"@Test public void shouldStubbingNotBeTreatedAsInteraction(){when(mock.simpleMethod(""one"")).thenThrow(new RuntimeException());doThrow(new RuntimeException()).when(mock).simpleMethod(""two"");reset(mock);verifyZeroInteractions(mock);}"
"org.mockitousage.basicapi.ResetTest.shouldNotAffectMockName",0,"@Test public void shouldNotAffectMockName(){IMethods mock=mock(IMethods.class,""mockie"");IMethods mockTwo=mock(IMethods.class);reset(mock);assertContains(""Mock for IMethods"","""" + mockTwo);assertEquals(""mockie"","""" + mock);}"
"org.mockitousage.basicapi.ResetTest.shouldResetMultipleMocks",0,"@Test public void shouldResetMultipleMocks(){mock.simpleMethod();mockTwo.simpleMethod();reset(mock,mockTwo);verifyNoMoreInteractions(mock,mockTwo);}"
"org.mockitousage.basicapi.ResetTest.shouldValidateStateWhenResetting",0,"@Test public void shouldValidateStateWhenResetting(){verify(mock);try {reset(mockTwo);fail();}catch(UnfinishedVerificationException e){}}"
"org.mockitousage.basicapi.ResetTest.shouldMaintainPreviousDefaultAnswer",0,"@Test public void shouldMaintainPreviousDefaultAnswer(){mock=mock(IMethods.class,RETURNS_MOCKS);reset(mock);assertNotNull(mock.iMethodsReturningMethod());}"
"org.mockito.runners.RunnersValidateFrameworkUsageTest.dummy",0,"@Test public void dummy()throws Exception {}"
"org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithDefaultRunner",0,"@Test public void shouldValidateWithDefaultRunner()throws Exception {runner=new MockitoJUnitRunner(DummyTest.class);runner.run(notifier);assertThat(notifier.addedListeners,contains(clazz(FrameworkUsageValidator.class)));}"
"org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithD44Runner",0,"@Test public void shouldValidateWithD44Runner()throws Exception {runner=new MockitoJUnit44Runner(DummyTest.class);runner.run(notifier);assertThat(notifier.addedListeners,contains(clazz(FrameworkUsageValidator.class)));}"
"org.mockito.runners.RunnersValidateFrameworkUsageTest.shouldValidateWithVerboseRunner",0,"@Test public void shouldValidateWithVerboseRunner()throws Exception {runner=new ConsoleSpammingMockitoJUnitRunner(DummyTest.class);runner.run(notifier);assertEquals(2,notifier.addedListeners.size());assertThat(notifier.addedListeners,contains(clazz(FrameworkUsageValidator.class)));}"
"org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldPassWhenMatchingInteractionFound",0,"@Test public void shouldPassWhenMatchingInteractionFound()throws Exception {Invocation actual=new InvocationBuilder().toInvocation();finderStub.allMatchingUnverifiedChunksToReturn.add(actual);checker.check(invocations,wanted,new VerificationModeBuilder().inOrder());}"
"org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportWantedButNotInvoked",0,"@Test public void shouldReportWantedButNotInvoked()throws Exception {assertTrue(finderStub.allMatchingUnverifiedChunksToReturn.isEmpty());checker.check(invocations,wanted,new VerificationModeBuilder().inOrder());assertEquals(wanted,reporterStub.wanted);}"
"org.mockito.internal.verification.checkers.MissingInvocationInOrderCheckerTest.shouldReportWantedDiffersFromActual",0,"@Test public void shouldReportWantedDiffersFromActual()throws Exception {Invocation previous=new InvocationBuilder().toInvocation();finderStub.previousInOrderToReturn=previous;checker.check(invocations,wanted,new VerificationModeBuilder().inOrder());assertEquals(wanted,reporterStub.wanted);assertEquals(previous,reporterStub.previous);}"
"org.mockitousage.internal.invocation.realmethod.FilteredCGLIBProxyRealMethodTest.shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows",0,"@Test public void shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows()throws Throwable {FilteredCGLIBProxyRealMethod realMethod=new FilteredCGLIBProxyRealMethod(new RealMethod(){public Object invoke(Object target,Object[]arguments)throws Throwable {return new Foo().throwSomething();}});try {realMethod.invoke(null,null);fail();}catch(Exception e){assertThat(e,hasMethodInStackTraceAt(0,""throwSomething""));assertThat(e,hasMethodInStackTraceAt(1,""invoke""));assertThat(e,hasMethodInStackTraceAt(2,""shouldRemoveMockitoInternalsFromStackTraceWhenRealMethodThrows""));}}"
"org.mockito.internal.progress.TimesTest.shouldNotAllowNegativeNumberOfInvocations",0,"@Test public void shouldNotAllowNegativeNumberOfInvocations()throws Exception {try {VerificationModeFactory.times(-50);fail();}catch(MockitoException e){assertEquals(""Negative value is not allowed here"",e.getMessage());}}"
"org.mockito.internal.progress.TimesTest.shouldNotAllowNegativeNumberOfMinimumInvocations",0,"@Test public void shouldNotAllowNegativeNumberOfMinimumInvocations()throws Exception {try {VerificationModeFactory.atLeast(-50);fail();}catch(MockitoException e){assertEquals(""Negative value or zero are not allowed here"",e.getMessage());}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrder",0,"@Test public void shouldVerifyInOrder(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrderUsingAtLeastOnce",0,"@Test public void shouldVerifyInOrderUsingAtLeastOnce(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);inOrder.verify(mockOne,atLeastOnce()).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldVerifyInOrderWhenExpectingSomeInvocationsToBeCalledZeroTimes",0,"@Test public void shouldVerifyInOrderWhenExpectingSomeInvocationsToBeCalledZeroTimes(){inOrder.verify(mockOne,times(0)).oneArg(false);inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockTwo,times(0)).simpleMethod(22);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);inOrder.verify(mockThree,times(0)).oneArg(false);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenFirstMockCalledTwice",0,"@Test public void shouldFailWhenFirstMockCalledTwice(){inOrder.verify(mockOne).simpleMethod(1);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenLastMockCalledTwice",0,"@Test public void shouldFailWhenLastMockCalledTwice(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);try {inOrder.verify(mockOne).simpleMethod(4);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseOneInvocationWanted",0,"@Test(expected=VerificationInOrderFailure.class)public void shouldFailOnFirstMethodBecauseOneInvocationWanted(){inOrder.verify(mockOne,times(0)).simpleMethod(1);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseOneInvocationWantedAgain",0,"@Test(expected=VerificationInOrderFailure.class)public void shouldFailOnFirstMethodBecauseOneInvocationWantedAgain(){inOrder.verify(mockOne,times(2)).simpleMethod(1);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseFourInvocationsWanted",0,"@Test public void shouldFailOnSecondMethodBecauseFourInvocationsWanted(){inOrder.verify(mockOne,times(1)).simpleMethod(1);try {inOrder.verify(mockTwo,times(4)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain",0,"@Test public void shouldFailOnSecondMethodBecauseTwoInvocationsWantedAgain(){inOrder.verify(mockOne,times(1)).simpleMethod(1);try {inOrder.verify(mockTwo,times(0)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseOneInvocationWanted",0,"@Test public void shouldFailOnLastMethodBecauseOneInvocationWanted(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree,atLeastOnce()).simpleMethod(3);inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);try {inOrder.verify(mockOne,times(0)).simpleMethod(4);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseOneInvocationWantedAgain",0,"@Test public void shouldFailOnLastMethodBecauseOneInvocationWantedAgain(){inOrder.verify(mockOne,atLeastOnce()).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree,atLeastOnce()).simpleMethod(3);inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);try {inOrder.verify(mockOne,times(2)).simpleMethod(4);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseDifferentArgsWanted",0,"@Test(expected=WantedButNotInvoked.class)public void shouldFailOnFirstMethodBecauseDifferentArgsWanted(){inOrder.verify(mockOne).simpleMethod(100);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnFirstMethodBecauseDifferentMethodWanted",0,"@Test(expected=WantedButNotInvoked.class)public void shouldFailOnFirstMethodBecauseDifferentMethodWanted(){inOrder.verify(mockOne).oneArg(true);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseDifferentArgsWanted",0,"@Test public void shouldFailOnSecondMethodBecauseDifferentArgsWanted(){inOrder.verify(mockOne).simpleMethod(1);try {inOrder.verify(mockTwo,times(2)).simpleMethod(-999);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnSecondMethodBecauseDifferentMethodWanted",0,"@Test public void shouldFailOnSecondMethodBecauseDifferentMethodWanted(){inOrder.verify(mockOne,times(1)).simpleMethod(1);try {inOrder.verify(mockTwo,times(2)).oneArg(true);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseDifferentArgsWanted",0,"@Test public void shouldFailOnLastMethodBecauseDifferentArgsWanted(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);try {inOrder.verify(mockOne).simpleMethod(-666);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnLastMethodBecauseDifferentMethodWanted",0,"@Test public void shouldFailOnLastMethodBecauseDifferentMethodWanted(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);try {inOrder.verify(mockOne).oneArg(false);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenLastMethodVerifiedFirst",0,"@Test public void shouldFailWhenLastMethodVerifiedFirst(){inOrder.verify(mockOne).simpleMethod(4);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenMiddleMethodVerifiedFirst",0,"@Test public void shouldFailWhenMiddleMethodVerifiedFirst(){inOrder.verify(mockTwo,times(2)).simpleMethod(2);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailWhenMiddleMethodVerifiedFirstInAtLeastOnceMode",0,"@Test public void shouldFailWhenMiddleMethodVerifiedFirstInAtLeastOnceMode(){inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnVerifyNoMoreInteractions",0,"@Test public void shouldFailOnVerifyNoMoreInteractions(){inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);try {verifyNoMoreInteractions(mockOne,mockTwo,mockThree);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldFailOnVerifyZeroInteractions",0,"@Test(expected=NoInteractionsWanted.class)public void shouldFailOnVerifyZeroInteractions(){verifyZeroInteractions(mockOne);}"
"org.mockitousage.verification.BasicVerificationInOrderTest.shouldScreamWhenNullPassed",0,"@SuppressWarnings(""all"")@Test(expected=MockitoException.class)public void shouldScreamWhenNullPassed(){inOrder(null);}"
"org.mockitousage.packageprotected.MockingPackageProtectedTest.shouldMockPackageProtectedClasses",0,"@Test public void shouldMockPackageProtectedClasses(){mock(PackageProtected.class);mock(Foo.class);mock(Bar.class);}"
"org.mockito.internal.runners.CollectingDebugDataTest.shouldNotCollectWhenNoJUnitRunner",0,"@Test public void shouldNotCollectWhenNoJUnitRunner()throws Throwable {when(mock.simpleMethod()).thenReturn(""foo"");mock.differentMethod();MockingProgress progress=new ThreadSafeMockingProgress();assertFalse(progress.getDebuggingInfo().hasData());}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqual",0,"@Test public void shouldMatchWhenFieldValuesEqual()throws Exception {Child wanted=new Child(1,""foo"",2,""bar"");verify(mock).run(refEq(wanted));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchWhenFieldValuesDiffer",0,"@Test(expected=ArgumentsAreDifferent.class)public void shouldNotMatchWhenFieldValuesDiffer()throws Exception {Child wanted=new Child(1,""foo"",2,""bar XXX"");verify(mock).run(refEq(wanted));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchAgain",0,"@Test(expected=ArgumentsAreDifferent.class)public void shouldNotMatchAgain()throws Exception {Child wanted=new Child(1,""foo"",999,""bar"");verify(mock).run(refEq(wanted));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchYetAgain",0,"@Test(expected=ArgumentsAreDifferent.class)public void shouldNotMatchYetAgain()throws Exception {Child wanted=new Child(1,""XXXXX"",2,""bar"");verify(mock).run(refEq(wanted));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatch",0,"@Test(expected=ArgumentsAreDifferent.class)public void shouldNotMatch()throws Exception {Child wanted=new Child(234234,""foo"",2,""bar"");verify(mock).run(refEq(wanted));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqualWithOneFieldExcluded",0,"@Test public void shouldMatchWhenFieldValuesEqualWithOneFieldExcluded()throws Exception {Child wanted=new Child(1,""foo"",2,""excluded"");verify(mock).run(refEq(wanted,""childFieldTwo""));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded",0,"@Test public void shouldMatchWhenFieldValuesEqualWithTwoFieldsExcluded()throws Exception {Child wanted=new Child(234234,""foo"",2,""excluded"");verify(mock).run(refEq(wanted,""childFieldTwo"",""parentField""));verify(mock).run(refEq(wanted,""parentField"",""childFieldTwo""));}"
"org.mockitousage.matchers.ReflectionMatchersTest.shouldNotMatchWithFieldsExclusion",0,"@Test(expected=ArgumentsAreDifferent.class)public void shouldNotMatchWithFieldsExclusion()throws Exception {Child wanted=new Child(234234,""foo"",2,""excluded"");verify(mock).run(refEq(wanted,""childFieldTwo""));}"
"org.mockitousage.matchers.CustomMatcherDoesYieldCCETest.shouldNotThrowCCE",0,"@Test public void shouldNotThrowCCE(){mock.simpleMethod(new Object());try {verify(mock).simpleMethod(argThat(isStringWithTextFoo()));fail();}catch(ArgumentsAreDifferent e){}}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectTooLittleActualInvocations",0,"@Test public void shouldDetectTooLittleActualInvocations()throws Exception {mock.clear();mock.clear();verify(mock,times(2)).clear();try {verify(mock,times(100)).clear();fail();}catch(TooLittleActualInvocations e){assertContains(""Wanted 100 times"",e.getMessage());assertContains(""was 2"",e.getMessage());}}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectTooManyActualInvocations",0,"@Test public void shouldDetectTooManyActualInvocations()throws Exception {mock.clear();mock.clear();verify(mock,times(2)).clear();try {verify(mock,times(1)).clear();fail();}catch(TooManyActualInvocations e){assertContains(""Wanted 1 time"",e.getMessage());assertContains(""was 2 times"",e.getMessage());}}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectActualInvocationsCountIsMoreThanZero",0,"@Test public void shouldDetectActualInvocationsCountIsMoreThanZero()throws Exception {verify(mock,times(0)).clear();try {verify(mock,times(15)).clear();fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldDetectActuallyCalledOnce",0,"@Test public void shouldDetectActuallyCalledOnce()throws Exception {mock.clear();try {verify(mock,times(0)).clear();fail();}catch(NeverWantedButInvoked e){assertContains(""Never wanted here"",e.getMessage());}}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldPassWhenMethodsActuallyNotCalled",0,"@Test public void shouldPassWhenMethodsActuallyNotCalled()throws Exception {verify(mock,times(0)).clear();verify(mock,times(0)).add(""yes,I wasn't called"");}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldNotCountInStubbedInvocations",0,"@Test public void shouldNotCountInStubbedInvocations()throws Exception {when(mock.add(""test"")).thenReturn(false);when(mock.add(""test"")).thenReturn(true);mock.add(""test"");mock.add(""test"");verify(mock,times(2)).add(""test"");}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldAllowVerifyingInteractionNeverHappened",0,"@Test public void shouldAllowVerifyingInteractionNeverHappened()throws Exception {mock.add(""one"");verify(mock,never()).add(""two"");verify(mock,never()).clear();try {verify(mock,never()).add(""one"");fail();}catch(NeverWantedButInvoked e){}}"
"org.mockitousage.verification.ExactNumberOfTimesVerificationTest.shouldAllowVerifyingInteractionNeverHappenedInOrder",0,"@Test public void shouldAllowVerifyingInteractionNeverHappenedInOrder()throws Exception {mock.add(""one"");mock.add(""two"");InOrder inOrder=inOrder(mock);inOrder.verify(mock,never()).add(""xxx"");inOrder.verify(mock).add(""one"");inOrder.verify(mock,never()).add(""one"");try {inOrder.verify(mock,never()).add(""two"");fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldHaveBridgeMethod",0,"@Test public void shouldHaveBridgeMethod()throws Exception {Super s=new Sub();assertEquals(""Dummy says: Hello"",s.say(""Hello""));assertThat(Sub.class,hasBridgeMethod(""say""));assertThat(s,hasBridgeMethod(""say""));}"
"org.mockitousage.puzzlers.BridgeMethodPuzzleTest.shouldVerifyCorrectlyWhenBridgeMethodCalled",0,"@Test public void shouldVerifyCorrectlyWhenBridgeMethodCalled()throws Exception {Sub s=mock(Sub.class);setMockWithDownCast(s);say(""Hello"");verify(s).say(""Hello"");}"
"org.mockitousage.matchers.MatchersMixedWithRawArgumentsTest.shouldAllowMixingRawArgumentsWithMatchers",0,"@Ignore(""prototyping new feature that allows to avoid eq()matchers when raw args passed"")@Test public void shouldAllowMixingRawArgumentsWithMatchers(){mock.varargs(""1"",""2"",""3"");verify(mock).varargs(""1"",anyString(),""3"");verify(mock).varargs(anyBoolean(),false);}"
"org.mockito.exceptions.ReporterTest.shouldLetPassingNullLastActualStackTrace",0,"@Test(expected=TooLittleActualInvocations.class)public void shouldLetPassingNullLastActualStackTrace()throws Exception {new Reporter().tooLittleActualInvocations(new Discrepancy(1,2),new InvocationBuilder().toInvocation(),null);}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.tryDescriptiveMessagesOnMisuse",0,"@SuppressWarnings(""all"")@Test public void tryDescriptiveMessagesOnMisuse(){Foo foo=mock(Foo.class);}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenWholeMethodPassedToVerify",0,"@Test(expected=NotAMockException.class)public void shouldScreamWhenWholeMethodPassedToVerify(){verify(mock.booleanReturningMethod());}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions",0,"@Test(expected=NotAMockException.class)public void shouldScreamWhenWholeMethodPassedToVerifyNoMoreInteractions(){verifyNoMoreInteractions(mock.byteReturningMethod());}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenInOrderCreatedWithDodgyMock",0,"@Test(expected=NotAMockException.class)public void shouldScreamWhenInOrderCreatedWithDodgyMock(){inOrder(""not a mock"");}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenInOrderCreatedWithNulls",0,"@Test(expected=NullInsteadOfMockException.class)public void shouldScreamWhenInOrderCreatedWithNulls(){inOrder(mock,null);}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamNullPassedToVerify",0,"@Test(expected=NullInsteadOfMockException.class)public void shouldScreamNullPassedToVerify(){verify(null);}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions",0,"@Test(expected=NullInsteadOfMockException.class)public void shouldScreamWhenNotMockPassedToVerifyNoMoreInteractions(){verifyNoMoreInteractions(null,""blah"");}"
"org.mockitousage.misuse.DescriptiveMessagesOnMisuseTest.shouldScreamWhenNullPassedToVerifyNoMoreInteractions",0,"@SuppressWarnings(""all"")@Test(expected=MockitoException.class)public void shouldScreamWhenNullPassedToVerifyNoMoreInteractions(){verifyNoMoreInteractions(null);}"
"org.mockitousage.verification.BasicVerificationTest.shouldVerify",0,"@Test public void shouldVerify()throws Exception {mock.clear();verify(mock).clear();mock.add(""test"");verify(mock).add(""test"");verifyNoMoreInteractions(mock);}"
"org.mockitousage.verification.BasicVerificationTest.shouldFailVerification",0,"@Test(expected=WantedButNotInvoked.class)public void shouldFailVerification()throws Exception {verify(mock).clear();}"
"org.mockitousage.verification.BasicVerificationTest.shouldFailVerificationOnMethodArgument",0,"@Test public void shouldFailVerificationOnMethodArgument()throws Exception {mock.clear();mock.add(""foo"");verify(mock).clear();try {verify(mock).add(""bar"");fail();}catch(AssertionError expected){}}"
"org.mockitousage.verification.BasicVerificationTest.shouldFailOnWrongMethod",0,"@Test public void shouldFailOnWrongMethod()throws Exception {mock.clear();mock.clear();mockTwo.add(""add"");verify(mock,atLeastOnce()).clear();verify(mockTwo,atLeastOnce()).add(""add"");try {verify(mockTwo,atLeastOnce()).add(""foo"");fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.verification.BasicVerificationTest.shouldDetectRedundantInvocation",0,"@Test public void shouldDetectRedundantInvocation()throws Exception {mock.clear();mock.add(""foo"");mock.add(""bar"");verify(mock).clear();verify(mock).add(""foo"");try {verifyNoMoreInteractions(mock);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.BasicVerificationTest.shouldDetectWhenInvokedMoreThanOnce",0,"@Test public void shouldDetectWhenInvokedMoreThanOnce()throws Exception {mock.add(""foo"");mock.clear();mock.clear();verify(mock).add(""foo"");try {verify(mock).clear();fail();}catch(TooManyActualInvocations e){}}"
"org.mockitousage.verification.BasicVerificationTest.shouldVerifyStubbedMethods",0,"@Test public void shouldVerifyStubbedMethods()throws Exception {when(mock.add(""test"")).thenReturn(Boolean.FALSE);mock.add(""test"");verify(mock).add(""test"");}"
"org.mockitousage.verification.BasicVerificationTest.shouldDetectWhenOverloadedMethodCalled",0,"@Test public void shouldDetectWhenOverloadedMethodCalled()throws Exception {IMethods mockThree=mock(IMethods.class);mockThree.varargs((Object[])new Object[]{});try {verify(mockThree).varargs((String[])new String[]{});fail();}catch(WantedButNotInvoked e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyAllInvocationsInOrder",0,"@Test public void shouldVerifyAllInvocationsInOrder(){InOrder inOrder=inOrder(mockOne,mockTwo,mockThree);inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockTwo,mockThree);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyInOrderMockTwoAndThree",0,"@Test public void shouldVerifyInOrderMockTwoAndThree(){InOrder inOrder=inOrder(mockTwo,mockThree);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);verifyNoMoreInteractions(mockTwo,mockThree);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyInOrderMockOneAndThree",0,"@Test public void shouldVerifyInOrderMockOneAndThree(){InOrder inOrder=inOrder(mockOne,mockThree);inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockOne,mockThree);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockOneInOrder",0,"@Test public void shouldVerifyMockOneInOrder(){InOrder inOrder=inOrder(mockOne);inOrder.verify(mockOne).simpleMethod(1);inOrder.verify(mockOne).simpleMethod(4);verifyNoMoreInteractions(mockOne);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockOne",0,"@Test public void shouldFailVerificationForMockOne(){InOrder inOrder=inOrder(mockOne);inOrder.verify(mockOne).simpleMethod(1);try {inOrder.verify(mockOne).differentMethod();fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockOneBecauseOfWrongOrder",0,"@Test public void shouldFailVerificationForMockOneBecauseOfWrongOrder(){InOrder inOrder=inOrder(mockOne);inOrder.verify(mockOne).simpleMethod(4);try {inOrder.verify(mockOne).simpleMethod(1);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwoWhenThreeTimesUsed",0,"@Test public void shouldVerifyMockTwoWhenThreeTimesUsed(){InOrder inOrder=inOrder(mockTwo);inOrder.verify(mockTwo,times(3)).simpleMethod(2);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwo",0,"@Test public void shouldVerifyMockTwo(){InOrder inOrder=inOrder(mockTwo);inOrder.verify(mockTwo,atLeastOnce()).simpleMethod(2);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldFailVerificationForMockTwo",0,"@Test public void shouldFailVerificationForMockTwo(){InOrder inOrder=inOrder(mockTwo);try {inOrder.verify(mockTwo).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowNoMoreInvocationsForMockTwo",0,"@Test public void shouldThrowNoMoreInvocationsForMockTwo(){InOrder inOrder=inOrder(mockTwo);try {inOrder.verify(mockTwo,times(2)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowTooLittleInvocationsForMockTwo",0,"@Test public void shouldThrowTooLittleInvocationsForMockTwo(){InOrder inOrder=inOrder(mockTwo);try {inOrder.verify(mockTwo,times(4)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldThrowTooManyInvocationsForMockTwo",0,"@Test public void shouldThrowTooManyInvocationsForMockTwo(){InOrder inOrder=inOrder(mockTwo);try {inOrder.verify(mockTwo,times(2)).simpleMethod(2);fail();}catch(VerificationInOrderFailure e){}}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldAllowThreeTimesOnMockTwo",0,"@Test public void shouldAllowThreeTimesOnMockTwo(){InOrder inOrder=inOrder(mockTwo);inOrder.verify(mockTwo,times(3)).simpleMethod(2);verifyNoMoreInteractions(mockTwo);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldVerifyMockTwoCompletely",0,"@Test public void shouldVerifyMockTwoCompletely(){InOrder inOrder=inOrder(mockTwo,mockThree);inOrder.verify(mockTwo,times(2)).simpleMethod(2);inOrder.verify(mockThree).simpleMethod(3);inOrder.verify(mockTwo).simpleMethod(2);verifyNoMoreInteractions(mockTwo,mockThree);}"
"org.mockitousage.verification.SelectedMocksInOrderVerificationTest.shouldAllowTwoTimesOnMockTwo",0,"@Test public void shouldAllowTwoTimesOnMockTwo(){InOrder inOrder=inOrder(mockTwo,mockThree);inOrder.verify(mockTwo,times(2)).simpleMethod(2);try {verifyNoMoreInteractions(mockTwo);fail();}catch(NoInteractionsWanted e){}}"
"org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest.shouldVerifyUsingMatchers",0,"@Test public void shouldVerifyUsingMatchers()throws Exception {List list=Mockito.mock(List.class);HashMap map=Mockito.mock(HashMap.class);list.add(""test"");list.add(1,""test two"");map.put(""test"",100);map.put(""test two"",200);verify(list).add(anyObject());verify(list).add(anyInt(),eq(""test two""));verify(map,times(2)).put(anyObject(),anyObject());verify(map).put(eq(""test two""),eq(200));verifyNoMoreInteractions(list,map);}"
"org.mockitousage.verification.VerificationOnMultipleMocksUsingMatchersTest.shouldVerifyMultipleMocks",0,"@Test public void shouldVerifyMultipleMocks()throws Exception {List list=mock(List.class);Map map=mock(Map.class);Set set=mock(Set.class);list.add(""one"");list.add(""one"");list.add(""two"");map.put(""one"",1);map.put(""one"",1);verify(list,times(2)).add(""one"");verify(list,times(1)).add(""two"");verify(list,times(0)).add(""three"");verify(map,times(2)).put(anyObject(),anyInt());verifyNoMoreInteractions(list,map);verifyZeroInteractions(set);}"
"org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldValidateExplicitly",0,"@Test public void shouldValidateExplicitly(){verify(mock);try {Mockito.validateMockitoUsage();fail();}catch(UnfinishedVerificationException e){}}"
"org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldDetectUnfinishedStubbing",0,"@Test public void shouldDetectUnfinishedStubbing(){when(mock.simpleMethod());try {Mockito.validateMockitoUsage();fail();}catch(UnfinishedStubbingException e){}}"
"org.mockitousage.misuse.ExplicitFrameworkValidationTest.shouldDetectMisplacedArgumentMatcher",0,"@Test public void shouldDetectMisplacedArgumentMatcher(){anyObject();try {Mockito.validateMockitoUsage();fail();}catch(InvalidUseOfMatchersException e){}}"
"org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest.shouldUseCustomAnnotation",0,"@Test public void shouldUseCustomAnnotation(){assertEquals(""SmartMock should return empty String by default"","""",smartMock.simpleMethod(1));verify(smartMock).simpleMethod(1);}"
"org.concurrentmockito.ThreadVerifiesContinuoslyInteractingMockTest.shouldAllowVerifyingInThreads",0,"@Test public void shouldAllowVerifyingInThreads()throws Exception {for (int i=0;i < 100;i++){performTest();}}"
"org.mockito.internal.util.CreationValidatorTest.shouldNotAllowExtraInterfaceThatIsTheSameAsTheMockedType",0,"@Test public void shouldNotAllowExtraInterfaceThatIsTheSameAsTheMockedType()throws Exception {CreationValidator validator=new CreationValidator();try {validator.validateExtraInterfaces(IMethods.class,new Class<?>[]{IMethods.class});fail();}catch(MockitoException e){assertContains(""You mocked following type: IMethods"",e.getMessage());}}"
"org.mockito.internal.util.CreationValidatorTest.shouldIgnoreIfExtraInterfacesAreNull",0,"@Test public void shouldIgnoreIfExtraInterfacesAreNull()throws Exception {CreationValidator validator=new CreationValidator();validator.validateExtraInterfaces(IMethods.class,(Class[])null);}"
"org.mockito.internal.util.CreationValidatorTest.shouldNotAllowFinalClasses",0,"@Test public void shouldNotAllowFinalClasses()throws Exception {CreationValidator validator=new CreationValidator();try {validator.validateType(FinalClass.class);fail();}catch(MockitoException e){assertContains(""Cannot mock/spy"",e.getMessage());}}"
"org.mockitousage.matchers.InvalidUseOfMatchersTest.shouldDetectWrongNumberOfMatchersWhenStubbing",0,"@Test public void shouldDetectWrongNumberOfMatchersWhenStubbing(){Mockito.when(mock.threeArgumentMethod(1,""2"",""3"")).thenReturn(null);try {Mockito.when(mock.threeArgumentMethod(1,eq(""2""),""3"")).thenReturn(null);fail();}catch(InvalidUseOfMatchersException e){}}"
"org.mockitousage.matchers.InvalidUseOfMatchersTest.shouldDetectStupidUseOfMatchersWhenVerifying",0,"@Test public void shouldDetectStupidUseOfMatchersWhenVerifying(){mock.oneArg(true);eq(""that's the stupid way"");eq(""of using matchers"");try {Mockito.verify(mock).oneArg(true);fail();}catch(InvalidUseOfMatchersException e){}}"
"org.mockitousage.matchers.InvalidUseOfMatchersTest.shouldScreamWhenMatchersAreInvalid",0,"@Test public void shouldScreamWhenMatchersAreInvalid(){mock.simpleMethod(AdditionalMatchers.not(eq(""asd"")));try {mock.simpleMethod(AdditionalMatchers.not(""jkl""));fail();}catch(InvalidUseOfMatchersException e){assertContains(""No matchers found for Not(?)."",e.getMessage());}try {mock.simpleMethod(AdditionalMatchers.or(eq(""jkl""),""asd""));fail();}catch(InvalidUseOfMatchersException e){assertContains(""2 matchers expected,1 recorded."",e.getMessage());}try {mock.threeArgumentMethod(1,""asd"",eq(""asd""));fail();}catch(InvalidUseOfMatchersException e){assertContains(""3 matchers expected,1 recorded."",e.getMessage());}}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty",0,"@Test public void shouldPassIfWantedIsZeroAndMatchingChunkIsEmpty()throws Exception {assertTrue(finderStub.validMatchingChunkToReturn.isEmpty());checker.check(invocations,wanted,0);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldPassIfChunkMatches",0,"@Test public void shouldPassIfChunkMatches()throws Exception {finderStub.validMatchingChunkToReturn.add(wanted.getInvocation());checker.check(invocations,wanted,1);}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldReportTooLittleInvocations",0,"@Test public void shouldReportTooLittleInvocations()throws Exception {Invocation first=new InvocationBuilder().toInvocation();Invocation second=new InvocationBuilder().toInvocation();finderStub.validMatchingChunkToReturn.addAll(asList(first,second));try {checker.check(invocations,wanted,4);fail();}catch(VerificationInOrderFailure e){assertContains(""Wanted 4 times"",e.getMessage());assertContains(""But was 2 times"",e.getMessage());}}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldReportTooManyInvocations",0,"@Test public void shouldReportTooManyInvocations()throws Exception {Invocation first=new InvocationBuilder().toInvocation();Invocation second=new InvocationBuilder().toInvocation();finderStub.validMatchingChunkToReturn.addAll(asList(first,second));try {checker.check(invocations,wanted,1);fail();}catch(VerificationInOrderFailure e){assertContains(""Wanted 1 time"",e.getMessage());assertContains(""But was 2 times"",e.getMessage());}}"
"org.mockito.internal.verification.checkers.NumberOfInvocationsInOrderCheckerTest.shouldMarkAsVerifiedInOrder",0,"@Test public void shouldMarkAsVerifiedInOrder()throws Exception {Invocation invocation=new InvocationBuilder().toInvocation();assertFalse(invocation.isVerifiedInOrder());finderStub.validMatchingChunkToReturn.addAll(asList(invocation));checker.check(invocations,wanted,1);assertTrue(invocation.isVerifiedInOrder());}"
"org.mockitousage.customization.BDDMockitoTest.shouldStub",0,"@Test public void shouldStub()throws Exception {given(mock.simpleMethod(""foo"")).willReturn(""bar"");assertEquals(""bar"",mock.simpleMethod(""foo""));assertEquals(null,mock.simpleMethod(""whatever""));}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubWithThrowable",0,"@Test public void shouldStubWithThrowable()throws Exception {given(mock.simpleMethod(""foo"")).willThrow(new RuntimeException());try {assertEquals(""foo"",mock.simpleMethod(""foo""));fail();}catch(RuntimeException e){}}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubWithAnswer",0,"@Test public void shouldStubWithAnswer()throws Exception {given(mock.simpleMethod(anyString())).willAnswer(new Answer<String>(){public String answer(InvocationOnMock invocation)throws Throwable {return (String)invocation.getArguments()[0];}});assertEquals(""foo"",mock.simpleMethod(""foo""));}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubConsecutively",0,"@Test public void shouldStubConsecutively()throws Exception {given(mock.simpleMethod(anyString())).willReturn(""foo"").willReturn(""bar"");assertEquals(""foo"",mock.simpleMethod(""whatever""));assertEquals(""bar"",mock.simpleMethod(""whatever""));}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubVoid",0,"@Test public void shouldStubVoid()throws Exception {willThrow(new RuntimeException()).given(mock).voidMethod();try {mock.voidMethod();fail();}catch(RuntimeException e){}}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubVoidConsecutively",0,"@Test public void shouldStubVoidConsecutively()throws Exception {willDoNothing().willThrow(new RuntimeException()).given(mock).voidMethod();mock.voidMethod();try {mock.voidMethod();fail();}catch(RuntimeException e){}}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubUsingDoReturnStyle",0,"@Test public void shouldStubUsingDoReturnStyle()throws Exception {willReturn(""foo"").given(mock).simpleMethod(""bar"");assertEquals(null,mock.simpleMethod(""boooo""));assertEquals(""foo"",mock.simpleMethod(""bar""));}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubUsingDoAnswerStyle",0,"@Test public void shouldStubUsingDoAnswerStyle()throws Exception {willAnswer(new Answer<String>(){public String answer(InvocationOnMock invocation)throws Throwable {return (String)invocation.getArguments()[0];}}).given(mock).simpleMethod(anyString());assertEquals(""foo"",mock.simpleMethod(""foo""));}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubByDelegatingToRealMethod",0,"@Test @SuppressWarnings(""unchecked"")public void shouldStubByDelegatingToRealMethod()throws Exception {Dog dog=mock(Dog.class);willCallRealMethod().given(dog).bark();assertEquals(""woof"",dog.bark());}"
"org.mockitousage.customization.BDDMockitoTest.shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax",0,"@Test @SuppressWarnings(""unchecked"")public void shouldStubByDelegatingToRealMethodUsingTypicalStubbingSyntax()throws Exception {Dog dog=mock(Dog.class);given(dog.bark()).willCallRealMethod();assertEquals(""woof"",dog.bark());}"
"org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotReportArgumentTypesWhenToStringIsTheSame",0,"@Test public void shouldNotReportArgumentTypesWhenToStringIsTheSame()throws Exception {Boo boo=mock(Boo.class);boo.withLong(100);try {verify(boo).withLong(eq(100));fail();}catch(ArgumentsAreDifferent e){assertContains(""withLong((Integer)100);"",e.getMessage());assertContains(""withLong((Long)100);"",e.getMessage());}}"
"org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch",0,"@Test public void shouldShowTheTypeOfOnlyTheArgumentThatDoesntMatch()throws Exception {Boo boo=mock(Boo.class);boo.withLongAndInt(100,200);try {verify(boo).withLongAndInt(eq(100),eq(200));fail();}catch(ArgumentsAreDifferent e){assertContains(""withLongAndInt((Integer)100,200)"",e.getMessage());assertContains(""withLongAndInt((Long)100,200)"",e.getMessage());}}"
"org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent",0,"@Test public void shouldShowTheTypeOfTheMismatchingArgumentWhenOutputDescriptionsForInvocationsAreDifferent()throws Exception {Boo boo=mock(Boo.class);boo.withLongAndInt(100,200);try {verify(boo).withLongAndInt(eq(100),anyInt());fail();}catch(ArgumentsAreDifferent e){assertContains(""withLongAndInt((Long)100,200)"",e.getMessage());assertContains(""withLongAndInt((Integer)100,<any>)"",e.getMessage());}}"
"org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotShowTypesWhenArgumentValueIsDifferent",0,"@Test public void shouldNotShowTypesWhenArgumentValueIsDifferent()throws Exception {Boo boo=mock(Boo.class);boo.withLongAndInt(100,200);try {verify(boo).withLongAndInt(eq(100L),eq(230));fail();}catch(ArgumentsAreDifferent e){assertContains(""withLongAndInt(100,200)"",e.getMessage());assertContains(""withLongAndInt(100,230)"",e.getMessage());}}"
"org.mockitousage.verification.PrintingVerboseTypesWithArgumentsTest.shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult",0,"@Test public void shouldNotShowTypesWhenTypesAreTheSameEvenIfToStringGivesTheSameResult()throws Exception {IMethods mock=mock(IMethods.class);mock.simpleMethod(new Foo(10));try {verify(mock).simpleMethod(new Foo(20));fail();}catch(ArgumentsAreDifferent e){assertContains(""simpleMethod(foo)"",e.getMessage());}}"
"org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldAllowMultipleInterfaces",0,"@Test public void shouldAllowMultipleInterfaces(){}"
"org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNullPassedInsteadOfAnInterface",0,"@Test public void shouldScreamWhenNullPassedInsteadOfAnInterface(){try {mock(Foo.class,withSettings().extraInterfaces(IFoo.class,null));fail();}catch(MockitoException e){assertContains(""extraInterfaces()does not accept null parameters"",e.getMessage());}}"
"org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNoArgsPassed",0,"@Test public void shouldScreamWhenNoArgsPassed(){try {mock(Foo.class,withSettings().extraInterfaces());fail();}catch(MockitoException e){assertContains(""extraInterfaces()requires at least one interface"",e.getMessage());}}"
"org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNullPassedInsteadOfAnArray",0,"@Test public void shouldScreamWhenNullPassedInsteadOfAnArray(){try {mock(Foo.class,withSettings().extraInterfaces((Class[])null));fail();}catch(MockitoException e){assertContains(""extraInterfaces()requires at least one interface"",e.getMessage());}}"
"org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenNonInterfacePassed",0,"@Test public void shouldScreamWhenNonInterfacePassed(){try {mock(Foo.class,withSettings().extraInterfaces(Foo.class));fail();}catch(MockitoException e){assertContains(""Foo which is not an interface"",e.getMessage());}}"
"org.mockitousage.basicapi.MockingMultipleInterfacesTest.shouldScreamWhenTheSameInterfacesPassed",0,"@Test public void shouldScreamWhenTheSameInterfacesPassed(){try {mock(IMethods.class,withSettings().extraInterfaces(IMethods.class));fail();}catch(MockitoException e){assertContains(""You mocked following type: IMethods"",e.getMessage());}}"
"org.mockito.internal.matchers.EqualsTest.shouldDescribeWithExtraTypeInfo",0,"@Test public void shouldDescribeWithExtraTypeInfo()throws Exception {String descStr=describe(new Equals(100).withExtraTypeInfo());assertEquals(""(Integer)100"",descStr);}"
"org.mockito.internal.matchers.EqualsTest.shouldDescribeWithExtraTypeInfoOfLong",0,"@Test public void shouldDescribeWithExtraTypeInfoOfLong()throws Exception {String descStr=describe(new Equals(100L).withExtraTypeInfo());assertEquals(""(Long)100"",descStr);}"
"org.mockito.internal.matchers.EqualsTest.shouldAppendQuotingForString",0,"@Test public void shouldAppendQuotingForString(){String descStr=describe(new Equals(""str""));assertEquals(""\""str\"""",descStr);}"
"org.mockito.internal.matchers.EqualsTest.shouldAppendQuotingForChar",0,"@Test public void shouldAppendQuotingForChar(){String descStr=describe(new Equals('s'));assertEquals(""'s'"",descStr);}"
"org.mockito.internal.matchers.EqualsTest.shouldDescribeUsingToString",0,"@Test public void shouldDescribeUsingToString(){String descStr=describe(new Equals(100));assertEquals(""100"",descStr);}"
"org.mockito.internal.matchers.EqualsTest.shouldDescribeNull",0,"@Test public void shouldDescribeNull(){String descStr=describe(new Equals(null));assertEquals(""null"",descStr);}"
"org.mockito.internal.matchers.EqualsTest.shouldMatchTypes",0,"@Test public void shouldMatchTypes()throws Exception {ContainsExtraTypeInformation equals=new Equals(10);assertTrue(equals.typeMatches(10));assertFalse(equals.typeMatches(10L));}"
"org.mockito.internal.matchers.EqualsTest.shouldMatchTypesSafelyWhenActualIsNull",0,"@Test public void shouldMatchTypesSafelyWhenActualIsNull()throws Exception {ContainsExtraTypeInformation equals=new Equals(null);assertFalse(equals.typeMatches(10));}"
"org.mockito.internal.matchers.EqualsTest.shouldMatchTypesSafelyWhenGivenIsNull",0,"@Test public void shouldMatchTypesSafelyWhenGivenIsNull()throws Exception {ContainsExtraTypeInformation equals=new Equals(10);assertFalse(equals.typeMatches(null));}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldBeACitizenOfHashes",0,"@Test public void shouldBeACitizenOfHashes()throws Exception {Invocation invocation=new InvocationBuilder().toInvocation();Invocation invocationTwo=new InvocationBuilder().args(""blah"").toInvocation();Map map=new HashMap();map.put(new InvocationMatcher(invocation),""one"");map.put(new InvocationMatcher(invocationTwo),""two"");assertEquals(2,map.size());}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldNotEqualIfNumberOfArgumentsDiffer",0,"@Test public void shouldNotEqualIfNumberOfArgumentsDiffer()throws Exception {PrintingFriendlyInvocation withOneArg=new InvocationMatcher(new InvocationBuilder().args(""test"").toInvocation());PrintingFriendlyInvocation withTwoArgs=new InvocationMatcher(new InvocationBuilder().args(""test"",100).toInvocation());assertFalse(withOneArg.equals(null));assertFalse(withOneArg.equals(withTwoArgs));}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldToStringWithMatchers",0,"@Test public void shouldToStringWithMatchers()throws Exception {Matcher m=NotNull.NOT_NULL;InvocationMatcher notNull=new InvocationMatcher(new InvocationBuilder().toInvocation(),asList(m));Matcher mTwo=new Equals('x');InvocationMatcher equals=new InvocationMatcher(new InvocationBuilder().toInvocation(),asList(mTwo));assertContains(""simpleMethod(notNull())"",notNull.toString());assertContains(""simpleMethod('x')"",equals.toString());}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldKnowIfIsSimilarTo",0,"@Test public void shouldKnowIfIsSimilarTo()throws Exception {Invocation same=new InvocationBuilder().mock(mock).simpleMethod().toInvocation();assertTrue(simpleMethod.hasSimilarMethod(same));Invocation different=new InvocationBuilder().mock(mock).differentMethod().toInvocation();assertFalse(simpleMethod.hasSimilarMethod(different));}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldNotBeSimilarToVerifiedInvocation",0,"@Test public void shouldNotBeSimilarToVerifiedInvocation()throws Exception {Invocation verified=new InvocationBuilder().simpleMethod().verified().toInvocation();assertFalse(simpleMethod.hasSimilarMethod(verified));}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldNotBeSimilarIfMocksAreDifferent",0,"@Test public void shouldNotBeSimilarIfMocksAreDifferent()throws Exception {Invocation onDifferentMock=new InvocationBuilder().simpleMethod().mock(""different mock"").toInvocation();assertFalse(simpleMethod.hasSimilarMethod(onDifferentMock));}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldNotBeSimilarIfIsOverloadedButUsedWithTheSameArg",0,"@Test public void shouldNotBeSimilarIfIsOverloadedButUsedWithTheSameArg()throws Exception {Method method=IMethods.class.getMethod(""simpleMethod"",String.class);Method overloadedMethod=IMethods.class.getMethod(""simpleMethod"",Object.class);String sameArg=""test"";InvocationMatcher invocation=new InvocationBuilder().method(method).arg(sameArg).toInvocationMatcher();Invocation overloadedInvocation=new InvocationBuilder().method(overloadedMethod).arg(sameArg).toInvocation();assertFalse(invocation.hasSimilarMethod(overloadedInvocation));}"
"org.mockito.internal.invocation.InvocationMatcherTest.shouldBeSimilarIfIsOverloadedButUsedWithDifferentArg",0,"@Test public void shouldBeSimilarIfIsOverloadedButUsedWithDifferentArg()throws Exception {Method method=IMethods.class.getMethod(""simpleMethod"",String.class);Method overloadedMethod=IMethods.class.getMethod(""simpleMethod"",Object.class);InvocationMatcher invocation=new InvocationBuilder().mock(mock).method(method).arg(""foo"").toInvocationMatcher();Invocation overloadedInvocation=new InvocationBuilder().mock(mock).method(overloadedMethod).arg(""bar"").toInvocation();assertTrue(invocation.hasSimilarMethod(overloadedInvocation));}"
"org.mockito.internal.util.DecamelizerTest.shouldProduceDecentDescription",0,"@Test public void shouldProduceDecentDescription()throws Exception {assertEquals(""<Sentence with strong language>"",decamelizeMatcher(""SentenceWithStrongLanguage""));assertEquals(""<W e i r d o 1>"",decamelizeMatcher(""WEIRDO1""));assertEquals(""<_>"",decamelizeMatcher(""_""));assertEquals(""<Has exactly 3 elements>"",decamelizeMatcher(""HasExactly3Elements""));assertEquals(""<custom argument matcher>"",decamelizeMatcher(""""));}"
