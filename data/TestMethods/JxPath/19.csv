test_case,faulty,test_code
"org.apache.commons.jxpath.BasicNodeSetTest.testAdd",0,"/** * Test adding pointers.*/public void testAdd(){addPointers(""/bean/integers"");assertEquals(nodeSet.getPointers().toString(),list(""/bean/integers[1]"",""/bean/integers[2]"",""/bean/integers[3]"",""/bean/integers[4]"").toString());assertEquals(list(new Integer(1),new Integer(2),new Integer(3),new Integer(4)),nodeSet.getValues());assertEquals(list(new Integer(1),new Integer(2),new Integer(3),new Integer(4)),nodeSet.getNodes());}"
"org.apache.commons.jxpath.BasicNodeSetTest.testRemove",0,"/** * Test removing a pointer.*/public void testRemove(){addPointers(""/bean/integers"");removePointers(""/bean/integers[4]"");assertEquals(list(""/bean/integers[1]"",""/bean/integers[2]"",""/bean/integers[3]"").toString(),nodeSet.getPointers().toString());assertEquals(list(new Integer(1),new Integer(2),new Integer(3)),nodeSet.getValues());assertEquals(list(new Integer(1),new Integer(2),new Integer(3)),nodeSet.getNodes());}"
"org.apache.commons.jxpath.BasicNodeSetTest.testNodes",0,"/** * Demonstrate when nodes != values:  in XML models.*/public void testNodes(){addPointers(""/document/vendor/contact"");assertEquals(list(""/document/vendor[1]/contact[1]"",""/document/vendor[1]/contact[2]"",""/document/vendor[1]/contact[3]"",""/document/vendor[1]/contact[4]"").toString(),nodeSet.getPointers().toString());assertEquals(list(""John"",""Jack"",""Jim"",""Jack Black""),nodeSet.getValues());assertElementNames(list(""contact"",""contact"",""contact"",""contact""),nodeSet.getNodes());assertElementValues(list(""John"",""Jack"",""Jim"",""Jack Black""),nodeSet.getNodes());}"
"org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testInfoSetTypes",0,"public void testInfoSetTypes(){assertXPathValue(context,""1"",new Double(1.0));assertXPathPointer(context,""1"",""1"");assertXPathValueIterator(context,""1"",list(new Double(1.0)));assertXPathPointerIterator(context,""1"",list(""1""));assertXPathValue(context,""-1"",new Double(-1.0));assertXPathValue(context,""2 + 2"",new Double(4.0));assertXPathValue(context,""3 - 2"",new Double(1.0));assertXPathValue(context,""1 + 2 + 3 - 4 + 5"",new Double(7.0));assertXPathValue(context,""3 * 2"",new Double(3.0 * 2.0));assertXPathValue(context,""3 div 2"",new Double(3.0 / 2.0));assertXPathValue(context,""5 mod 2"",new Double(1.0));assertXPathValue(context,""5.9 mod 2.1"",new Double(1.0));assertXPathValue(context,""5 mod -2"",new Double(1.0));assertXPathValue(context,""-5 mod 2"",new Double(-1.0));assertXPathValue(context,""-5 mod -2"",new Double(-1.0));assertXPathValue(context,""1 < 2"",Boolean.TRUE);assertXPathValue(context,""1 > 2"",Boolean.FALSE);assertXPathValue(context,""1 <= 1"",Boolean.TRUE);assertXPathValue(context,""1 >= 2"",Boolean.FALSE);assertXPathValue(context,""3 > 2 > 1"",Boolean.FALSE);assertXPathValue(context,""3 > 2 and 2 > 1"",Boolean.TRUE);assertXPathValue(context,""3 > 2 and 2 < 1"",Boolean.FALSE);assertXPathValue(context,""3 < 2 or 2 > 1"",Boolean.TRUE);assertXPathValue(context,""3 < 2 or 2 < 1"",Boolean.FALSE);assertXPathValue(context,""1 = 1"",Boolean.TRUE);assertXPathValue(context,""1 = '1'"",Boolean.TRUE);assertXPathValue(context,""1 > 2 = 2 > 3"",Boolean.TRUE);assertXPathValue(context,""1 > 2 = 0"",Boolean.TRUE);assertXPathValue(context,""1 = 2"",Boolean.FALSE);assertXPathValue(context,""$integer"",new Double(1),Double.class);assertXPathValue(context,""2 + 3"",""5.0"",String.class);assertXPathValue(context,""2 + 3"",Boolean.TRUE,boolean.class);assertXPathValue(context,""'true'"",Boolean.TRUE,Boolean.class);}"
"org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testNodeSetOperations",0,"public void testNodeSetOperations(){assertXPathValue(context,""$array > 0"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array >= 0"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array = 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array = 0.25"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array = 0.5"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array = 0.50000"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array = 0.75"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array < 1"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array <= 1"",Boolean.TRUE,Boolean.class);assertXPathValue(context,""$array = 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array > 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array < 0"",Boolean.FALSE,Boolean.class);}"
"org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testEmptyNodeSetOperations",0,"public void testEmptyNodeSetOperations(){assertXPathValue(context,""/idonotexist = 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""/idonotexist != 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""/idonotexist < 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""/idonotexist > 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""/idonotexist >= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""/idonotexist <= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array[position()< 1]= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array[position()< 1]!= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array[position()< 1]< 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array[position()< 1]> 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array[position()< 1]>= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$array[position()< 1]<= 0"",Boolean.FALSE,Boolean.class);}"
"org.apache.commons.jxpath.ri.compiler.CoreOperationTest.testNan",0,"public void testNan(){assertXPathValue(context,""$nan > $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan < $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan >= $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan <= $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan >= $nan and $nan <= $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan = $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan != $nan"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan > 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan < 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan >= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan <= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan >= 0 and $nan <= 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan = 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan != 0"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan > 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan < 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan >= 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan <= 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan >= 1 and $nan <= 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan = 1"",Boolean.FALSE,Boolean.class);assertXPathValue(context,""$nan != 1"",Boolean.FALSE,Boolean.class);}"
"org.apache.commons.jxpath.ri.model.beans.BadlyImplementedFactoryTest.testBadFactoryImplementation",0,"public void testBadFactoryImplementation(){try {context.createPath(""foo/bar"");fail(""should fail with JXPathException caused by JXPathAbstractFactoryException"");}catch(JXPathException e){assertTrue(e.getCause()instanceof JXPathAbstractFactoryException);}}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testAxisChild",0,"public void testAxisChild(){assertXPathValue(context,""map/Key1"",""Value 1"");assertXPathPointer(context,""map/Key1"",""/map[@name='Key1']"");assertXPathValue(context,""map/Key2/name"",""Name 6"");assertXPathPointer(context,""map/Key2/name"",""/map[@name='Key2']/name"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testAxisDescendant",0,"public void testAxisDescendant(){assertXPathValue(context,""//Key1"",""Value 1"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testAttributeName",0,"/** * Testing the pseudo-attribute ""name"" that dynamic property objects appear to have.*/public void testAttributeName(){assertXPathValue(context,""map[@name = 'Key1']"",""Value 1"");assertXPathPointer(context,""map[@name = 'Key1']"",""/map[@name='Key1']"");assertXPathPointerLenient(context,""map[@name = 'Key&quot;&apos;&quot;&apos;1']"",""/map[@name='Key&quot;&apos;&quot;&apos;1']"");assertXPathValue(context,""/.[@name='map']/Key2/name"",""Name 6"");assertXPathPointer(context,""/.[@name='map']/Key2/name"",""/map[@name='Key2']/name"");assertXPathValue(context,""/map[@name='Key2'][@name='name']"",""Name 6"");assertXPathPointer(context,""/map[@name='Key2'][@name='name']"",""/map[@name='Key2']/name"");assertXPathValue(context,""/.[@name='map'][@name='Key2'][@name='name']"",""Name 6"");assertXPathPointer(context,""/.[@name='map'][@name='Key2'][@name='name']"",""/map[@name='Key2']/name"");((Map)context.getValue(""map"")).put(""Key:3"",""value3"");assertXPathValueAndPointer(context,""/map[@name='Key:3']"",""value3"",""/map[@name='Key:3']"");assertXPathValueAndPointer(context,""/map[@name='Key:4:5']"",null,""/map[@name='Key:4:5']"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testSetPrimitiveValue",0,"public void testSetPrimitiveValue(){assertXPathSetValue(context,""map/Key1"",new Integer(6));}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testSetCollection",0,"public void testSetCollection(){context.setValue(""map/Key1"",new Integer[]{new Integer(7),new Integer(8)});assertXPathSetValue(context,""map/Key1[1]"",new Integer(9));}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testSetNewKey",0,"/** * The key does not exist,but the assignment should succeed anyway,because you should always be able to store anything in a Map.*/public void testSetNewKey(){assertXPathSetValue(context,""map/Key4"",new Integer(7));assertXPathPointerLenient(context,""//map/Key5"",""/map/Key5"");assertXPathSetValue(context,""//map/Key5"",new Integer(8));}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePath",0,"public void testCreatePath(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePath(context,""/map[@name='TestKey1']"","""",""/map[@name='TestKey1']"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathAndSetValue",0,"public void testCreatePathAndSetValue(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePathAndSetValue(context,""/map[@name='TestKey1']"",""Test"",""/map[@name='TestKey1']"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathCreateBean",0,"public void testCreatePathCreateBean(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePath(context,""/map[@name='TestKey2']/int"",new Integer(1),""/map[@name='TestKey2']/int"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathAndSetValueCreateBean",0,"public void testCreatePathAndSetValueCreateBean(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePathAndSetValue(context,""/map[@name='TestKey2']/int"",new Integer(4),""/map[@name='TestKey2']/int"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathCollectionElement",0,"public void testCreatePathCollectionElement(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePath(context,""/map/TestKey3[2]"",null,""/map[@name='TestKey3'][2]"");assertXPathCreatePath(context,""/map[@name='TestKey3'][3]"",null,""/map[@name='TestKey3'][3]"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathAndSetValueCollectionElement",0,"public void testCreatePathAndSetValueCollectionElement(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePathAndSetValue(context,""/map/TestKey3[2]"",""Test1"",""/map[@name='TestKey3'][2]"");assertXPathCreatePathAndSetValue(context,""/map[@name='TestKey3'][3]"",""Test2"",""/map[@name='TestKey3'][3]"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathNewCollectionElement",0,"public void testCreatePathNewCollectionElement(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePath(context,""/map/TestKey4[1]/int"",new Integer(1),""/map[@name='TestKey4'][1]/int"");bean.getMap().remove(""TestKey4"");assertXPathCreatePath(context,""/map/TestKey4[1]/int"",new Integer(1),""/map[@name='TestKey4'][1]/int"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCreatePathAndSetValueNewCollectionElement",0,"public void testCreatePathAndSetValueNewCollectionElement(){TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePathAndSetValue(context,""/map/TestKey4[1]/int"",new Integer(2),""/map[@name='TestKey4'][1]/int"");bean.getMap().remove(""TestKey4"");assertXPathCreatePathAndSetValue(context,""/map/TestKey4[1]/int"",new Integer(3),""/map[@name='TestKey4'][1]/int"");}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testRemovePath",0,"public void testRemovePath(){TestBean bean=(TestBean)context.getContextBean();bean.getMap().put(""TestKey1"",""test"");context.removePath(""map[@name = 'TestKey1']"");assertEquals(""Remove dynamic property value"",null,context.getValue(""map[@name = 'TestKey1']""));}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testRemovePathArrayElement",0,"public void testRemovePathArrayElement(){TestBean bean=(TestBean)context.getContextBean();bean.getMap().put(""TestKey2"",new String[]{""temp1"",""temp2""});context.removePath(""map[@name = 'TestKey2'][1]"");assertEquals(""Remove dynamic property collection element"",""temp2"",context.getValue(""map[@name = 'TestKey2'][1]""));}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testCollectionOfMaps",0,"public void testCollectionOfMaps(){TestBean bean=(TestBean)context.getContextBean();List list=new ArrayList();bean.getMap().put(""stuff"",list);Map m=new HashMap();m.put(""fruit"",""apple"");list.add(m);m=new HashMap();m.put(""berry"",""watermelon"");list.add(m);m=new HashMap();m.put(""fruit"",""banana"");list.add(m);assertXPathValueIterator(context,""/map/stuff/fruit"",list(""apple"",""banana""));assertXPathValueIterator(context,""/map/stuff[@name='fruit']"",list(""apple"",""banana""));}"
"org.apache.commons.jxpath.ri.model.dynamic.DynamicPropertiesModelTest.testMapOfMaps",0,"public void testMapOfMaps(){TestBean bean=(TestBean)context.getContextBean();Map fruit=new HashMap();fruit.put(""apple"",""green"");fruit.put(""orange"",""red"");Map meat=new HashMap();meat.put(""pork"",""pig"");meat.put(""beef"",""cow"");bean.getMap().put(""fruit"",fruit);bean.getMap().put(""meat"",meat);assertXPathPointer(context,""//beef"",""/map[@name='meat'][@name='beef']"");assertXPathPointer(context,""map//apple"",""/map[@name='fruit'][@name='apple']"");assertXPathPointerLenient(context,""map//banana"",""null()"");assertXPathPointerLenient(context,""//fruit/pear"",""/map[@name='fruit']/pear"");}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testPrimitiveToString",0,"public void testPrimitiveToString(){assertConversion(new Integer(1),String.class,""1"");}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testArrayToList",0,"public void testArrayToList(){assertConversion(new int[]{1,2},List.class,Arrays.asList(new Object[]{new Integer(1),new Integer(2)}));}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testArrayToArray",0,"public void testArrayToArray(){assertConversion(new int[]{1,2},String[].class,Arrays.asList(new String[]{""1"",""2""}));}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testListToArray",0,"public void testListToArray(){assertConversion(Arrays.asList(new Integer[]{new Integer(1),new Integer(2)}),String[].class,Arrays.asList(new String[]{""1"",""2""}));assertConversion(Arrays.asList(new String[]{""1"",""2""}),int[].class,Arrays.asList(new Integer[]{new Integer(1),new Integer(2)}));}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testInvalidConversion",0,"public void testInvalidConversion(){boolean exception=false;try {TypeUtils.convert(""'foo'"",Date.class);}catch(Throwable ex){exception=true;}assertTrue(""Type conversion exception"",exception);}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testSingletonCollectionToString",0,"public void testSingletonCollectionToString(){assertConversion(Collections.singleton(""Earth""),String.class,""Earth"");}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testSingletonArrayToString",0,"public void testSingletonArrayToString(){assertConversion(new String[]{""Earth""},String.class,""Earth"");}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testPointerToString",0,"public void testPointerToString(){assertConversion(new Pointer(){public Object getValue(){return ""value"";}public Object getNode(){return null;}public void setValue(Object value){}public Object getRootNode(){return null;}public String asPath(){return null;}public Object clone(){return null;}public int compareTo(Object o){return 0;}},String.class,""value"");}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testNodeSetToString",0,"public void testNodeSetToString(){assertConversion(new NodeSet(){public List getNodes(){return null;}public List getPointers(){return null;}public List getValues(){List list=new ArrayList();list.add(""hello"");list.add(""goodbye"");return Collections.singletonList(list);}},String.class,""hello"");}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testNodeSetToInteger",0,"public void testNodeSetToInteger(){assertConversion(new NodeSet(){public List getNodes(){return null;}public List getPointers(){return null;}public List getValues(){return Collections.singletonList(""9"");}},Integer.class,new Integer(9));}"
"org.apache.commons.jxpath.util.BasicTypeConverterTest.testBeanUtilsConverter",0,"public void testBeanUtilsConverter(){assertConversion(""12"",BigDecimal.class,new BigDecimal(12));}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVar",0,"public void testVar(){context.getVariables().declareVariable(""foo:bar"",""baz"");assertXPathValueAndPointer(context,""$foo:bar"",""baz"",""$foo:bar"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarPrimitive",0,"public void testVarPrimitive(){assertXPathValueAndPointer(context,""$string"",""string"",""$string"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarBean",0,"public void testVarBean(){assertXPathValueAndPointer(context,""$bean/int"",new Integer(1),""$bean/int"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarMap",0,"public void testVarMap(){assertXPathValueAndPointer(context,""$map/string"",""string"",""$map[@name='string']"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarList",0,"public void testVarList(){assertXPathValueAndPointer(context,""$list[1]"",""string"",""$list[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarDocument",0,"public void testVarDocument(){assertXPathValueAndPointer(context,""$document/vendor/location/address/city"",""Fruit Market"",""$document/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarElement",0,"public void testVarElement(){assertXPathValueAndPointer(context,""$element/location/address/city"",""Fruit Market"",""$element/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testVarContainer",0,"public void testVarContainer(){assertXPathValueAndPointer(context,""$container/vendor/location/address/city"",""Fruit Market"",""$container/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanPrimitive",0,"public void testBeanPrimitive(){assertXPathValueAndPointer(context,""string"",""string"",""/string"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanBean",0,"public void testBeanBean(){assertXPathValueAndPointer(context,""bean/int"",new Integer(1),""/bean/int"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanMap",0,"public void testBeanMap(){assertXPathValueAndPointer(context,""map/string"",""string"",""/map[@name='string']"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanList",0,"public void testBeanList(){assertXPathValueAndPointer(context,""list[1]"",""string"",""/list[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanDocument",0,"public void testBeanDocument(){assertXPathValueAndPointer(context,""document/vendor/location/address/city"",""Fruit Market"",""/document/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanElement",0,"public void testBeanElement(){assertXPathValueAndPointer(context,""element/location/address/city"",""Fruit Market"",""/element/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testBeanContainer",0,"public void testBeanContainer(){assertXPathValueAndPointer(context,""container/vendor/location/address/city"",""Fruit Market"",""/container/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapPrimitive",0,"public void testMapPrimitive(){assertXPathValueAndPointer(context,""map/string"",""string"",""/map[@name='string']"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapBean",0,"public void testMapBean(){assertXPathValueAndPointer(context,""map/bean/int"",new Integer(1),""/map[@name='bean']/int"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapMap",0,"public void testMapMap(){assertXPathValueAndPointer(context,""map/map/string"",""string"",""/map[@name='map'][@name='string']"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapList",0,"public void testMapList(){assertXPathValueAndPointer(context,""map/list[1]"",""string"",""/map[@name='list'][1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapDocument",0,"public void testMapDocument(){assertXPathValueAndPointer(context,""map/document/vendor/location/address/city"",""Fruit Market"",""/map[@name='document']"" + ""/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapElement",0,"public void testMapElement(){assertXPathValueAndPointer(context,""map/element/location/address/city"",""Fruit Market"",""/map[@name='element']/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMapContainer",0,"public void testMapContainer(){assertXPathValueAndPointer(context,""map/container/vendor/location/address/city"",""Fruit Market"",""/map[@name='container']"" + ""/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListPrimitive",0,"public void testListPrimitive(){assertXPathValueAndPointer(context,""list[1]"",""string"",""/list[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListBean",0,"public void testListBean(){assertXPathValueAndPointer(context,""list[2]/int"",new Integer(1),""/list[2]/int"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListMap",0,"public void testListMap(){assertXPathValueAndPointer(context,""list[3]/string"",""string"",""/list[3][@name='string']"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListList",0,"public void testListList(){assertXPathValueAndPointer(context,""list[4]/.[1]"",""string2"",""/list[4]/.[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListDocument",0,"public void testListDocument(){assertXPathValueAndPointer(context,""list[5]/vendor/location/address/city"",""Fruit Market"",""/list[5]/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListElement",0,"public void testListElement(){assertXPathValueAndPointer(context,""list[6]/location/address/city"",""Fruit Market"",""/list[6]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testListContainer",0,"public void testListContainer(){assertXPathValueAndPointer(context,""list[7]/vendor/location/address/city"",""Fruit Market"",""/list[7]/vendor[1]/location[2]/address[1]/city[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testNull",0,"public void testNull(){assertXPathPointerLenient(context,""$null"",""$null"");assertXPathPointerLenient(context,""$null[3]"",""$null[3]"");assertXPathPointerLenient(context,""$testnull/nothing"",""$testnull/nothing"");assertXPathPointerLenient(context,""$testnull/nothing[2]"",""$testnull/nothing[2]"");assertXPathPointerLenient(context,""beans[8]/int"",""/beans[8]/int"");assertXPathValueIterator(context,""$testnull/nothing[1]"",Collections.EMPTY_LIST);JXPathContext ctx=JXPathContext.newContext(new TestNull());assertXPathValue(ctx,""nothing"",null);assertXPathValue(ctx,""child/nothing"",null);assertXPathValue(ctx,""array[2]"",null);assertXPathValueLenient(ctx,""nothing/something"",null);assertXPathValueLenient(ctx,""array[2]/something"",null);}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testRootAsCollection",0,"public void testRootAsCollection(){assertXPathValue(context,"".[1]/string"",""string"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testCreatePath",0,"public void testCreatePath(){context=JXPathContext.newContext(new TestBean());context.setFactory(new TestMixedModelFactory());TestBean bean=(TestBean)context.getContextBean();bean.setMap(null);assertXPathCreatePath(context,""/map[@name='TestKey5']/nestedBean/int"",new Integer(1),""/map[@name='TestKey5']/nestedBean/int"");bean.setMap(null);assertXPathCreatePath(context,""/map[@name='TestKey5']/beans[2]/int"",new Integer(1),""/map[@name='TestKey5']/beans[2]/int"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testIterateArray",0,"/** * Test JXPath.iterate()with map containing an array*/public void testIterateArray(){Map map=new HashMap();map.put(""foo"",new String[]{""a"",""b"",""c""});JXPathContext context=JXPathContext.newContext(map);assertXPathValueIterator(context,""foo"",list(""a"",""b"",""c""));}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testIteratePointersArray",0,"public void testIteratePointersArray(){Map map=new HashMap();map.put(""foo"",new String[]{""a"",""b"",""c""});JXPathContext context=JXPathContext.newContext(map);Iterator it=context.iteratePointers(""foo"");List actual=new ArrayList();while (it.hasNext()){Pointer ptr=(Pointer)it.next();actual.add(context.getValue(ptr.asPath()));}assertEquals(""Iterating pointers <"" + ""foo"" + "">"",list(""a"",""b"",""c""),actual);}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testIteratePointersArrayElementWithVariable",0,"public void testIteratePointersArrayElementWithVariable(){Map map=new HashMap();map.put(""foo"",new String[]{""a"",""b"",""c""});JXPathContext context=JXPathContext.newContext(map);context.getVariables().declareVariable(""x"",new Integer(2));Iterator it=context.iteratePointers(""foo[$x]"");List actual=new ArrayList();while (it.hasNext()){Pointer ptr=(Pointer)it.next();actual.add(context.getValue(ptr.asPath()));}assertEquals(""Iterating pointers <"" + ""foo"" + "">"",list(""b""),actual);}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testIterateVector",0,"public void testIterateVector(){Map map=new HashMap();Vector vec=new Vector();vec.add(new HashMap());vec.add(new HashMap());map.put(""vec"",vec);JXPathContext context=JXPathContext.newContext(map);assertXPathPointerIterator(context,""/vec"",list(""/.[@name='vec'][1]"",""/.[@name='vec'][2]""));}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testErrorProperty",0,"public void testErrorProperty(){context.getVariables().declareVariable(""e"",new ExceptionPropertyTestBean());boolean ex=false;try {assertXPathValue(context,""$e/errorString"",null);}catch(Throwable t){ex=true;}assertTrue(""Legitimate exception accessing property"",ex);assertXPathPointer(context,""$e/errorString"",""$e/errorString"");assertXPathPointerLenient(context,""$e/errorStringArray[1]"",""$e/errorStringArray[1]"");assertXPathPointerIterator(context,""$e/errorString"",list(""$e/errorString""));assertXPathPointerIterator(context,""$e//error"",Collections.EMPTY_LIST);}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testMatrix",0,"public void testMatrix(){assertXPathValueAndPointer(context,""$matrix[1]/.[1]"",new Integer(3),""$matrix[1]/.[1]"");context.setValue(""$matrix[1]/.[1]"",new Integer(2));assertXPathValueAndPointer(context,""matrix[1]/.[1]"",new Integer(3),""/matrix[1]/.[1]"");context.setValue(""matrix[1]/.[1]"",""2"");assertXPathValue(context,""matrix[1]/.[1]"",new Integer(2));context.getVariables().declareVariable(""wholebean"",context.getContextBean());assertXPathValueAndPointer(context,""$wholebean/matrix[1]/.[1]"",new Integer(2),""$wholebean/matrix[1]/.[1]"");boolean ex=false;try {context.setValue(""$wholebean/matrix[1]/.[2]"",""4"");}catch(Exception e){ex=true;}assertTrue(""Exception setting value of non-existent element"",ex);ex=false;try {context.setValue(""$wholebean/matrix[2]/.[1]"",""4"");}catch(Exception e){ex=true;}assertTrue(""Exception setting value of non-existent element"",ex);}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testCreatePathAndSetValueWithMatrix",0,"public void testCreatePathAndSetValueWithMatrix(){context.setValue(""matrix"",null);assertXPathCreatePathAndSetValue(context,""/matrix[1]/.[1]"",new Integer(4),""/matrix[1]/.[1]"");}"
"org.apache.commons.jxpath.ri.model.MixedModelTest.testCollectionPointer",0,"/** * Scott Heaberlin's test - collection of collections*/public void testCollectionPointer(){List list=new ArrayList();Map map=new HashMap();map.put(""KeyOne"",""SomeStringOne"");map.put(""KeyTwo"",""SomeStringTwo"");Map map2=new HashMap();map2.put(""KeyA"",""StringA"");map2.put(""KeyB"",""StringB"");map.put(""KeyThree"",map2);list.add(map);List list2=new ArrayList();list2.add(""foo"");list2.add(map);list2.add(map);list.add(list2);context=JXPathContext.newContext(list);assertEquals(""SomeStringOne"",context.getValue("".[1]/KeyOne""));assertEquals(""StringA"",context.getValue("".[1]/KeyThree/KeyA""));assertEquals(new Integer(3),context.getValue(""size(.[1]/KeyThree)""));assertEquals(new Double(6.0),context.getValue(""count(.[1]/KeyThree/*)""));assertEquals(new Double(3.0),context.getValue(""count(.[1]/KeyThree/KeyA)""));}"
"org.apache.commons.jxpath.ri.model.beans.BeanModelTest.testIndexedProperty",0,"public void testIndexedProperty(){JXPathContext context=JXPathContext.newContext(null,new TestIndexedPropertyBean());assertXPathValueAndPointer(context,""indexed[1]"",new Integer(0),""/indexed[1]"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testConstant",0,"public void testConstant(){assertXPathExpression(""1"",Constant.class);assertXPathExpression(""1.5"",Constant.class);assertXPathExpression(""'foo'"",Constant.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreFunction",0,"public void testCoreFunction(){assertXPathExpression(""last()"",CoreFunction.class);assertXPathExpression(""position()"",CoreFunction.class);assertXPathExpression(""count(book)"",CoreFunction.class);assertXPathExpression(""id(13)"",CoreFunction.class);assertXPathExpression(""local-name()"",CoreFunction.class);assertXPathExpression(""local-name(book)"",CoreFunction.class);assertXPathExpression(""namespace-uri()"",CoreFunction.class);assertXPathExpression(""namespace-uri(book)"",CoreFunction.class);assertXPathExpression(""name()"",CoreFunction.class);assertXPathExpression(""name(book)"",CoreFunction.class);assertXPathExpression(""string(3)"",CoreFunction.class);assertXPathExpression(""concat('a','b')"",CoreFunction.class);assertXPathExpression(""starts-with('a','b')"",CoreFunction.class);assertXPathExpression(""ends-with('a','b')"",CoreFunction.class);assertXPathExpression(""contains('a','b')"",CoreFunction.class);assertXPathExpression(""substring-before('a',1)"",CoreFunction.class);assertXPathExpression(""substring-after('a',2)"",CoreFunction.class);assertXPathExpression(""substring('a',2)"",CoreFunction.class);assertXPathExpression(""substring('a',2,3)"",CoreFunction.class);assertXPathExpression(""string-length('a')"",CoreFunction.class);assertXPathExpression(""normalize-space('a')"",CoreFunction.class);assertXPathExpression(""translate('a','b','c')"",CoreFunction.class);assertXPathExpression(""boolean('true')"",CoreFunction.class);assertXPathExpression(""not(1)"",CoreFunction.class);assertXPathExpression(""true()"",CoreFunction.class);assertXPathExpression(""false()"",CoreFunction.class);assertXPathExpression(""lang('fr')"",CoreFunction.class);assertXPathExpression(""number('12')"",CoreFunction.class);assertXPathExpression(""sum(book/price)"",CoreFunction.class);assertXPathExpression(""floor(11.4)"",CoreFunction.class);assertXPathExpression(""ceiling(11.4)"",CoreFunction.class);assertXPathExpression(""round(11.4)"",CoreFunction.class);assertXPathExpression(""key('title','Hobbit')"",CoreFunction.class);assertXPathExpression(""format-number(12,'##')"",CoreFunction.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationAnd",0,"public void testCoreOperationAnd(){assertXPathExpression(""2 and 4"",CoreOperationAnd.class);assertXPathExpression(""2 > 1 and 4 < 5"",CoreOperationAnd.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationOr",0,"public void testCoreOperationOr(){assertXPathExpression(""2 or 4"",CoreOperationOr.class);assertXPathExpression(""2 > 1 or 4 < 5"",CoreOperationOr.class);assertXPathExpression(""1 > 1 and 2 <= 2 or 3 = 4"",CoreOperationOr.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationEqual",0,"public void testCoreOperationEqual(){assertXPathExpression(""2 = 4"",CoreOperationEqual.class);assertXPathExpression(""2 + 1 = 3"",CoreOperationEqual.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationNameAttributeTest",0,"public void testCoreOperationNameAttributeTest(){assertXPathExpression(""@name = 'bar'"",NameAttributeTest.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationNotEqual",0,"public void testCoreOperationNotEqual(){assertXPathExpression(""2 != 4"",CoreOperationNotEqual.class);assertXPathExpression(""2 + 1 != 3"",CoreOperationNotEqual.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationLessThan",0,"public void testCoreOperationLessThan(){assertXPathExpression(""3<4"",CoreOperationLessThan.class,""3 < 4"");assertXPathExpression(""3<(2>=1)"",CoreOperationLessThan.class,""3 < (2 >= 1)"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationLessThanOrEqual",0,"public void testCoreOperationLessThanOrEqual(){assertXPathExpression(""3<=4"",CoreOperationLessThanOrEqual.class,""3 <= 4"");assertXPathExpression(""3<=(2>=1)"",CoreOperationLessThanOrEqual.class,""3 <= (2 >= 1)"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationGreaterThan",0,"public void testCoreOperationGreaterThan(){assertXPathExpression(""3>4"",CoreOperationGreaterThan.class,""3 > 4"");assertXPathExpression(""3>(2>=1)"",CoreOperationGreaterThan.class,""3 > (2 >= 1)"");assertXPathExpression(""1 > (1 and 2 <= (2 or 3)= 4)"",CoreOperationGreaterThan.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationGreaterThanOrEqual",0,"public void testCoreOperationGreaterThanOrEqual(){assertXPathExpression(""3>=4"",CoreOperationGreaterThanOrEqual.class,""3 >= 4"");assertXPathExpression(""3>=(2>=1)"",CoreOperationGreaterThanOrEqual.class,""3 >= (2 >= 1)"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationDivide",0,"public void testCoreOperationDivide(){assertXPathExpression(""2 div 4"",CoreOperationDivide.class);assertXPathExpression(""2|3 div -3"",CoreOperationDivide.class,""2 | 3 div -3"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationMod",0,"public void testCoreOperationMod(){assertXPathExpression(""2 mod 4"",CoreOperationMod.class);assertXPathExpression(""2|3 mod -3"",CoreOperationMod.class,""2 | 3 mod -3"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationMultiply",0,"public void testCoreOperationMultiply(){assertXPathExpression(""2*4"",CoreOperationMultiply.class,""2 * 4"");assertXPathExpression(""2*(3 + 1)"",CoreOperationMultiply.class,""2 * (3 + 1)"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationMinus",0,"public void testCoreOperationMinus(){assertXPathExpression(""1 - 1"",CoreOperationSubtract.class);assertXPathExpression(""1 - 1 - 2"",CoreOperationSubtract.class);assertXPathExpression(""1 - (1 - 2)"",CoreOperationSubtract.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationSum",0,"public void testCoreOperationSum(){assertXPathExpression(""3 + 1 + 4"",CoreOperationAdd.class);assertXPathExpression(""(3 + 1)+ 4"",CoreOperationAdd.class,""3 + 1 + 4"");assertXPathExpression(""3 + (1 + 4)"",CoreOperationAdd.class,""3 + 1 + 4"");assertXPathExpression(""3 + -1"",CoreOperationAdd.class,""3 + -1"");assertXPathExpression(""2*-3 + -1"",CoreOperationAdd.class,""2 * -3 + -1"");}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationUnaryMinus",0,"public void testCoreOperationUnaryMinus(){assertXPathExpression(""-3"",CoreOperationNegate.class);assertXPathExpression(""-(3 + 1)"",CoreOperationNegate.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testCoreOperationUnion",0,"public void testCoreOperationUnion(){assertXPathExpression(""3 | 1 | 4"",CoreOperationUnion.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testExpressionPath",0,"public void testExpressionPath(){assertXPathExpression(""$x/foo/bar"",ExpressionPath.class);assertXPathExpression(""(2 + 2)/foo/bar"",ExpressionPath.class);assertXPathExpression(""$x[3][2 + 2]/foo/bar"",ExpressionPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testExtensionFunction",0,"public void testExtensionFunction(){assertXPathExpression(""my:function(3,other.function())"",ExtensionFunction.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisSelf",0,"public void testLocationPathAxisSelf(){assertXPathExpression(""self::foo:bar"",LocationPath.class);assertXPathExpression(""."",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisChild",0,"public void testLocationPathAxisChild(){assertXPathExpression(""child::foo:bar"",LocationPath.class,""foo:bar"");assertXPathExpression(""foo:bar"",LocationPath.class);assertXPathExpression(""/foo:bar"",LocationPath.class);assertXPathExpression(""/foo/bar"",LocationPath.class);assertXPathExpression(""*"",LocationPath.class);assertXPathExpression(""foo:*"",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisParent",0,"public void testLocationPathAxisParent(){assertXPathExpression(""parent::foo:bar"",LocationPath.class);assertXPathExpression("".."",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisAttribute",0,"public void testLocationPathAxisAttribute(){assertXPathExpression(""attribute::foo:bar"",LocationPath.class,""@foo:bar"");assertXPathExpression(""@foo:bar"",LocationPath.class);assertXPathExpression(""../@foo:bar"",LocationPath.class);assertXPathExpression(""@*"",LocationPath.class);assertXPathExpression(""@*[last()]"",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisDescendant",0,"public void testLocationPathAxisDescendant(){assertXPathExpression(""descendant::foo:bar"",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisDescendantOrSelf",0,"public void testLocationPathAxisDescendantOrSelf(){assertXPathExpression(""descendant-or-self::foo:bar"",LocationPath.class);assertXPathExpression(""//foo"",LocationPath.class);assertXPathExpression(""foo//bar"",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathAxisOther",0,"public void testLocationPathAxisOther(){assertXPathExpression(""ancestor::foo:bar"",LocationPath.class);assertXPathExpression(""ancestor-or-self::foo:bar"",LocationPath.class);assertXPathExpression(""namespace::foo:bar"",LocationPath.class);assertXPathExpression(""preceding::foo:bar"",LocationPath.class);assertXPathExpression(""preceding-sibling::foo:bar"",LocationPath.class);assertXPathExpression(""following::foo:bar"",LocationPath.class);assertXPathExpression(""following-sibling::foo:bar"",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testLocationPathNodeTest",0,"public void testLocationPathNodeTest(){assertXPathExpression(""node()"",LocationPath.class);assertXPathExpression(""text()"",LocationPath.class);assertXPathExpression(""comment()"",LocationPath.class);assertXPathExpression(""processing-instruction()"",LocationPath.class);assertXPathExpression(""processing-instruction('test')"",LocationPath.class);}"
"org.apache.commons.jxpath.ri.JXPathCompiledExpressionTest.testVariableReference",0,"public void testVariableReference(){assertXPathExpression(""$x"",VariableReference.class);assertXPathExpression(""$x:y"",VariableReference.class);}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.doTest",0,"protected void doTest(String id,String model,String expectedValue){JXPathContext context=JXPathContext.newContext(createDocumentContainer(model));assertEquals(context.getValue(""test/text[@id='"" + id + ""']""),expectedValue);}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testUnspecifiedDOM",0,"public void testUnspecifiedDOM(){doTest(""unspecified"",DocumentContainer.MODEL_DOM,"" foo "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testDefaultDOM",0,"public void testDefaultDOM(){doTest(""default"",DocumentContainer.MODEL_DOM,""foo"");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testPreserveDOM",0,"public void testPreserveDOM(){doTest(""preserve"",DocumentContainer.MODEL_DOM,"" foo "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testNestedDOM",0,"public void testNestedDOM(){doTest(""nested"",DocumentContainer.MODEL_DOM,"" foo ;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testNestedWithCommentsDOM",0,"public void testNestedWithCommentsDOM(){doTest(""nested-with-comments"",DocumentContainer.MODEL_DOM,"" foo ;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testUnspecifiedJDOM",0,"public void testUnspecifiedJDOM(){doTest(""unspecified"",DocumentContainer.MODEL_JDOM,"" foo "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testDefaultJDOM",0,"public void testDefaultJDOM(){doTest(""default"",DocumentContainer.MODEL_JDOM,""foo"");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testPreserveJDOM",0,"public void testPreserveJDOM(){doTest(""preserve"",DocumentContainer.MODEL_JDOM,"" foo "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testNestedJDOM",0,"public void testNestedJDOM(){doTest(""nested"",DocumentContainer.MODEL_JDOM,"" foo ;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.XMLPreserveSpaceTest.testNestedWithCommentsJDOM",0,"public void testNestedWithCommentsJDOM(){doTest(""nested-with-comments"",DocumentContainer.MODEL_JDOM,"" foo ;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testGetNode",0,"public void testGetNode(){assertXPathNodeType(context,""/"",Document.class);assertXPathNodeType(context,""/vendor/location"",Element.class);assertXPathNodeType(context,""//location/@name"",Attribute.class);assertXPathNodeType(context,""//vendor"",Element.class);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testGetElementDescendantOrSelf",0,"public void testGetElementDescendantOrSelf(){JXPathContext childContext=context.getRelativeContext(context.getPointer(""/vendor""));assertTrue(childContext.getContextBean()instanceof Element);assertXPathNodeType(childContext,""//vendor"",Element.class);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testID",0,"public void testID(){}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testDocumentOrder",0,"public void testDocumentOrder(){assertDocumentOrder(context,""vendor/location"",""vendor/location/address/street"",-1);assertDocumentOrder(context,""vendor/location[@id = '100']"",""vendor/location[@id = '101']"",-1);assertDocumentOrder(context,""vendor//price:amount"",""vendor/location"",1);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testSetValue",0,"public void testSetValue(){assertXPathSetValue(context,""vendor/location[@id = '100']"",""New Text"");assertXMLSignature(context,""vendor/location[@id = '100']"",""<E>New Text</E>"",false,false,true,false);assertXPathSetValue(context,""vendor/location[@id = '101']"",""Replacement Text"");assertXMLSignature(context,""vendor/location[@id = '101']"",""<E>Replacement Text</E>"",false,false,true,false);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testCreatePath",0,"/** * Test JXPathContext.createPath()with various arguments*/public void testCreatePath(){assertXPathCreatePath(context,""/vendor[1]/location[3]"","""",""/vendor[1]/location[3]"");assertXPathCreatePath(context,""/vendor[1]/location[3]/address/street"","""",""/vendor[1]/location[3]/address[1]/street[1]"");assertXPathCreatePath(context,""/vendor[1]/location[2]/@manager"","""",""/vendor[1]/location[2]/@manager"");assertXPathCreatePath(context,""/vendor[1]/location[1]/@name"",""local"",""/vendor[1]/location[1]/@name"");assertXPathCreatePathAndSetValue(context,""/vendor[1]/location[4]/@manager"","""",""/vendor[1]/location[4]/@manager"");context.registerNamespace(""price"",""priceNS"");assertXPathCreatePath(context,""/vendor[1]/price:foo/price:bar"","""",""/vendor[1]/price:foo[1]/price:bar[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testCreatePathAndSetValue",0,"/** * Test JXPath.createPathAndSetValue()with various arguments*/public void testCreatePathAndSetValue(){assertXPathCreatePathAndSetValue(context,""vendor/location[3]"","""",""/vendor[1]/location[3]"");assertXPathCreatePathAndSetValue(context,""vendor/location[3]/address/street"",""Lemon Circle"",""/vendor[1]/location[3]/address[1]/street[1]"");assertXPathCreatePathAndSetValue(context,""vendor/location[2]/@manager"",""John Doe"",""/vendor[1]/location[2]/@manager"");assertXPathCreatePathAndSetValue(context,""vendor/location[1]/@manager"",""John Doe"",""/vendor[1]/location[1]/@manager"");assertXPathCreatePathAndSetValue(context,""/vendor[1]/location[4]/@manager"",""James Dow"",""/vendor[1]/location[4]/@manager"");assertXPathCreatePathAndSetValue(context,""vendor/product/product:name/attribute::price:language"",""English"",""/vendor[1]/product[1]/product:name[1]/@price:language"");context.registerNamespace(""price"",""priceNS"");assertXPathCreatePathAndSetValue(context,""/vendor[1]/price:foo/price:bar"",""123.20"",""/vendor[1]/price:foo[1]/price:bar[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testRemovePath",0,"/** * Test JXPathContext.removePath()with various arguments*/public void testRemovePath(){context.removePath(""vendor/location[@id = '101']//street/text()"");assertEquals(""Remove DOM text"","""",context.getValue(""vendor/location[@id = '101']//street""));context.removePath(""vendor/location[@id = '101']//street"");assertEquals(""Remove DOM element"",new Double(0),context.getValue(""count(vendor/location[@id = '101']//street)""));context.removePath(""vendor/location[@id = '100']/@name"");assertEquals(""Remove DOM attribute"",new Double(0),context.getValue(""count(vendor/location[@id = '100']/@name)""));}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisChild",0,"public void testAxisChild(){assertXPathValue(context,""vendor/location/address/street"",""Orchard Road"");assertXPathValue(context,""vendor/location/address/city"",""Fruit Market"");assertXPathValue(context,""local-name(vendor/product/price:amount)"",""amount"");assertXPathValue(context,""local-name(vendor/location)"",""location"");assertXPathValue(context,""name(vendor/product/price:amount)"",""value:amount"");assertXPathValue(context,""name(vendor/location)"",""location"");assertXPathValue(context,""namespace-uri(vendor/product/price:amount)"",""priceNS"");assertXPathValue(context,""vendor/product/prix"",""934.99"");assertXPathValue(context,""/vendor/contact[@name='jim']"",""Jim"");boolean nsv=false;try {context.setLenient(false);context.getValue(""/vendor/contact[@name='jane']"");}catch(JXPathException ex){nsv=true;}assertTrue(""No such value: /vendor/contact[@name='jim']"",nsv);nsv=false;try {context.setLenient(false);context.getValue(""/vendor/contact[@name='jane']/*"");}catch(JXPathException ex){nsv=true;}assertTrue(""No such value: /vendor/contact[@name='jane']/*"",nsv);assertXPathValue(context,""count(vendor/product/price:*)"",new Double(2));assertXPathValue(context,""count(vendor/product/*)"",new Double(4));assertXPathValue(context,""vendor/product/price:amount"",""45.95"");context.registerNamespace(""x"",""temp"");assertXPathValue(context,""vendor/x:pos//number"",""109"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisChildIndexPredicate",0,"public void testAxisChildIndexPredicate(){assertXPathValue(context,""vendor/location[2]/address/street"",""Tangerine Drive"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisDescendant",0,"public void testAxisDescendant(){assertXPathValue(context,""//street"",""Orchard Road"");assertXPathValue(context,""count(//price:*)"",new Double(2));assertXPathValueIterator(context,""vendor//saleEnds"",list(""never""));assertXPathValueIterator(context,""vendor//promotion"",list(""""));assertXPathValueIterator(context,""vendor//saleEnds[../@stores = 'all']"",list(""never""));assertXPathValueIterator(context,""vendor//promotion[../@stores = 'all']"",list(""""));}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisParent",0,"public void testAxisParent(){assertXPathPointer(context,""//street/.."",""/vendor[1]/location[1]/address[1]"");assertXPathPointerIterator(context,""//street/.."",list(""/vendor[1]/location[2]/address[1]"",""/vendor[1]/location[1]/address[1]""));assertXPathValue(context,""vendor/product/price:sale/saleEnds/parent::price:*"" + ""/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisFollowingSibling",0,"public void testAxisFollowingSibling(){assertXPathValue(context,""vendor/location[.//employeeCount = 10]/"" + ""following-sibling::location//street"",""Tangerine Drive"");assertXPathPointer(context,""vendor/location[.//employeeCount = 10]/"" + ""following-sibling::location//street"",""/vendor[1]/location[2]/address[1]/street[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisPrecedingSibling",0,"public void testAxisPrecedingSibling(){assertXPathPointer(context,""//location[2]/preceding-sibling::location//street"",""/vendor[1]/location[1]/address[1]/street[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisPreceding",0,"public void testAxisPreceding(){assertXPathPointer(context,""//location[2]/preceding-sibling::location//street"",""/vendor[1]/location[1]/address[1]/street[1]"");assertXPathPointer(context,""//location[2]/preceding::*[1]"",""/vendor[1]/location[1]/employeeCount[1]"");assertXPathPointer(context,""//location[2]/preceding::node()[3]"",""/vendor[1]/location[1]/employeeCount[1]/text()[1]"");assertXPathPointer(context,""//location[2]/preceding::node()[4]"",""/vendor[1]/location[1]/employeeCount[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisAttribute",0,"public void testAxisAttribute(){assertXPathValue(context,""vendor/location/@id"",""100"");assertXPathPointer(context,""vendor/location/@id"",""/vendor[1]/location[1]/@id"");assertXPathValueIterator(context,""vendor/location/@id"",list(""100"",""101""));assertXPathValue(context,""vendor/product/price:amount/@price:discount"",""10%"");assertXPathValue(context,""namespace-uri(vendor/product/price:amount/@price:discount)"",""priceNS"");assertXPathValue(context,""local-name(vendor/product/price:amount/@price:discount)"",""discount"");assertXPathValue(context,""name(vendor/product/price:amount/@price:discount)"",""price:discount"");assertXPathValue(context,""vendor/product/price:amount/@discount"",""20%"");assertXPathValue(context,""namespace-uri(vendor/product/price:amount/@discount)"","""");assertXPathValue(context,""local-name(vendor/product/price:amount/@discount)"",""discount"");assertXPathValue(context,""name(vendor/product/price:amount/@discount)"",""discount"");assertXPathValueIterator(context,""vendor/product/price:amount/@price:*"",list(""10%""));assertXPathValueIterator(context,""vendor/location[1]/@*"",set(""100"","""",""local""));assertXPathValueIterator(context,""vendor/product/price:amount/@*"",set(""10%"",""20%""));assertXPathValueIterator(context,""vendor/product/price:amount/attribute::node()"",set(""10%"",""20%""));assertXPathValueIterator(context,""vendor/product/price:amount/@*[namespace-uri()= '']"",list(""20%""));assertXPathValue(context,""vendor/location/@manager"","""");assertXPathValueLenient(context,""vendor/location/@missing"",null);assertXPathValueLenient(context,""vendor/location/@miss:missing"",null);assertXPathValue(context,""vendor/location[@id='101']//street"",""Tangerine Drive"");assertXPathValueIterator(context,""/vendor/location[1]/@*[name()!= 'manager']"",list(""100"",""local""));}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisNamespace",0,"public void testAxisNamespace(){assertXPathValueAndPointer(context,""vendor/product/prix/namespace::price"",""priceNS"",""/vendor[1]/product[1]/prix[1]/namespace::price"");assertXPathValue(context,""count(vendor/product/namespace::*)"",new Double(3));assertXPathValue(context,""name(vendor/product/prix/namespace::price)"",""price"");assertXPathValue(context,""local-name(vendor/product/prix/namespace::price)"",""price"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisAncestor",0,"public void testAxisAncestor(){assertXPathValue(context,""vendor/product/price:sale/saleEnds/"" + ""ancestor::price:sale/saleEnds"",""never"");assertXPathValue(context,""vendor/product/price:sale/saleEnds/ancestor::price:*"" + ""/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisAncestorOrSelf",0,"public void testAxisAncestorOrSelf(){assertXPathValue(context,""vendor/product/price:sale/"" + ""ancestor-or-self::price:sale/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisFollowing",0,"public void testAxisFollowing(){assertXPathValueIterator(context,""vendor/contact/following::location//street"",list(""Orchard Road"",""Tangerine Drive""));assertXPathValue(context,""//location/following::price:sale/saleEnds"",""never"");assertXPathPointer(context,""//location[2]/following::node()[2]"",""/vendor[1]/product[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testAxisSelf",0,"public void testAxisSelf(){assertXPathValue(context,""//price:sale/self::price:sale/saleEnds"",""never"");assertXPathValueLenient(context,""//price:sale/self::x/saleEnds"",null);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testNodeTypeComment",0,"public void testNodeTypeComment(){assertXPathValue(context,""//product/comment()"",""We are not buying this product,ever"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testNodeTypeText",0,"public void testNodeTypeText(){assertXPathValue(context,""//product/text()[. != '']"",""We love this product."");assertXPathPointer(context,""//product/text()"",""/vendor[1]/product[1]/text()[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testNodeTypeProcessingInstruction",0,"public void testNodeTypeProcessingInstruction(){assertXPathValue(context,""//product/processing-instruction()"",""do not show anybody"");assertXPathValue(context,""//product/processing-instruction('report')"",""average only"");assertXPathPointer(context,""//product/processing-instruction('report')"",""/vendor[1]/product[1]/processing-instruction('report')[1]"");assertXPathValue(context,""name(//product/processing-instruction()[1])"",""security"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testLang",0,"public void testLang(){assertXPathValue(context,""//product/prix/@xml:lang"",""fr"");assertXPathValue(context,""//product/prix[lang('fr')]"",""934.99"");assertXPathValue(context,""//product/price:sale[lang('en')]/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testDocument",0,"public void testDocument(){assertXPathValue(context,""$document/vendor/location[1]//street"",""Orchard Road"");assertXPathPointer(context,""$document/vendor/location[1]//street"",""$document/vendor[1]/location[1]/address[1]/street[1]"");assertXPathValue(context,""$document/vendor//street"",""Orchard Road"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testContainer",0,"public void testContainer(){assertXPathValue(context,""$container/vendor//street"",""Orchard Road"");assertXPathValue(context,""$container//street"",""Orchard Road"");assertXPathPointer(context,""$container//street"",""$container/vendor[1]/location[1]/address[1]/street[1]"");assertXPathValue(context,""number(vendor/location/employeeCount)"",new Double(10));}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testElementInVariable",0,"public void testElementInVariable(){assertXPathValue(context,""$element"",""Orchard Road"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testTypeConversions",0,"public void testTypeConversions(){assertXPathValue(context,""vendor/location/employeeCount + 1"",new Double(11));assertXPathValue(context,""vendor/location/employeeCount and true()"",Boolean.TRUE);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testBooleanFunction",0,"public void testBooleanFunction(){assertXPathValue(context,""boolean(vendor//saleEnds[../@stores = 'all'])"",Boolean.TRUE);assertXPathValue(context,""boolean(vendor//promotion[../@stores = 'all'])"",Boolean.TRUE);assertXPathValue(context,""boolean(vendor//promotion[../@stores = 'some'])"",Boolean.FALSE);}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testFunctionsLastAndPosition",0,"public void testFunctionsLastAndPosition(){assertXPathPointer(context,""vendor//location[last()]"",""/vendor[1]/location[2]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testNamespaceMapping",0,"public void testNamespaceMapping(){context.registerNamespace(""rate"",""priceNS"");context.registerNamespace(""goods"",""productNS"");assertEquals(""Context node namespace resolution"",""priceNS"",context.getNamespaceURI(""price""));assertEquals(""Registered namespace resolution"",""priceNS"",context.getNamespaceURI(""rate""));assertXPathValue(context,""count(vendor/product/rate:*)"",new Double(2));assertXPathValue(context,""vendor[1]/product[1]/rate:amount[1]/@rate:discount"",""10%"");assertXPathValue(context,""vendor[1]/product[1]/rate:amount[1]/@price:discount"",""10%"");assertXPathValue(context,""vendor[1]/product[1]/price:amount[1]/@rate:discount"",""10%"");assertXPathValue(context,""vendor[1]/product[1]/price:amount[1]/@price:discount"",""10%"");assertXPathValueAndPointer(context,""//product:name"",""Box of oranges"",""/vendor[1]/product[1]/goods:name[1]"");JXPathContext childCtx=JXPathContext.newContext(context,context.getContextBean());assertXPathValueAndPointer(childCtx,""//product:name"",""Box of oranges"",""/vendor[1]/product[1]/goods:name[1]"");JXPathContext relativeCtx=context.getRelativeContext(context.getPointer(""/vendor""));assertXPathValueAndPointer(relativeCtx,""product/product:name"",""Box of oranges"",""/vendor[1]/product[1]/goods:name[1]"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testUnion",0,"public void testUnion(){assertXPathValue(context,""/vendor[1]/contact[1]| /vendor[1]/contact[4]"",""John"");assertXPathValue(context,""/vendor[1]/contact[4]| /vendor[1]/contact[1]"",""John"");}"
"org.apache.commons.jxpath.ri.model.jdom.JDOMModelTest.testNodes",0,"public void testNodes(){Pointer pointer=context.getPointer(""/vendor[1]/contact[1]"");assertFalse(pointer.getNode().equals(pointer.getValue()));}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoStepNoPredicatesPropertyOwner",0,"public void testDoStepNoPredicatesPropertyOwner(){assertValueAndPointer(""/int"",new Integer(1),""/int"",""Bb"",""BbB"");assertValueAndPointer(""/./int"",new Integer(1),""/int"",""Bb"",""BbB"");assertNullPointer(""/foo"",""/foo"",""Bn"");assertValueAndPointer(""/nestedBean/int"",new Integer(1),""/nestedBean/int"",""BbBb"",""BbBbB"");assertValueAndPointer(""/nestedBean/strings"",bean.getNestedBean().getStrings(),""/nestedBean/strings"",""BbBb"",""BbBbC"");assertNullPointer(""/nestedBean/foo"",""/nestedBean/foo"",""BbBn"");assertNullPointer(""/map/foo"",""/map[@name='foo']"",""BbDd"");assertValueAndPointer(""/list/int"",new Integer(1),""/list[3]/int"",""BbBb"",""BbBbB"");assertNullPointer(""/list/foo"",""/list[1]/foo"",""BbBn"");assertNullPointer(""/nestedBean/foo/bar"",""/nestedBean/foo/bar"",""BbBnNn"");assertNullPointer(""/list/int/bar"",""/list[3]/int/bar"",""BbBbBn"");assertNullPointer(""/list/foo/bar"",""/list[1]/foo/bar"",""BbBnNn"");assertNullPointer(""/map/foo/bar"",""/map[@name='foo']/bar"",""BbDdNn"");assertValueAndPointer(""/map/Key1"",""Value 1"",""/map[@name='Key1']"",""BbDd"",""BbDdB"");assertValueAndPointer(""/integers"",bean.getIntegers(),""/integers"",""Bb"",""BbC"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoStepNoPredicatesStandard",0,"public void testDoStepNoPredicatesStandard(){assertValueAndPointer(""/vendor/location/address/city"",""Fruit Market"",""/vendor/location[2]/address[1]/city[1]"",""BbMMMM"");assertNullPointer(""/vendor/location/address/pity"",""/vendor/location[1]/address[1]/pity"",""BbMMMn"");assertNullPointer(""/vendor/location/address/itty/bitty"",""/vendor/location[1]/address[1]/itty/bitty"",""BbMMMnNn"");assertNullPointer(""/vendor/location/address/city/pretty"",""/vendor/location[2]/address[1]/city[1]/pretty"",""BbMMMMn"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoStepPredicatesPropertyOwner",0,"public void testDoStepPredicatesPropertyOwner(){assertNullPointer(""/foo[@name='foo']"",""/foo[@name='foo']"",""BnNn"");assertNullPointer(""/foo[3]"",""/foo[3]"",""Bn"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoStepPredicatesStandard",0,"public void testDoStepPredicatesStandard(){assertValueAndPointer(""/vendor/contact[@name='jack']"",""Jack"",""/vendor/contact[2]"",""BbMM"");assertValueAndPointer(""/vendor/contact[2]"",""Jack"",""/vendor/contact[2]"",""BbMM"");assertNullPointer(""/vendor/contact[5]"",""/vendor/contact[5]"",""BbMn"");assertValueAndPointer(""/vendor/contact[@name='jack'][2]"",""Jack Black"",""/vendor/contact[4]"",""BbMM"");assertValueAndPointer(""/vendor/contact[@name='jack'][2]"",""Jack Black"",""/vendor/contact[4]"",""BbMM"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoPredicateName",0,"public void testDoPredicateName(){assertValueAndPointer(""/nestedBean[@name='int']"",new Integer(1),""/nestedBean/int"",""BbBb"",""BbBbB"");assertValueAndPointer(""/.[@name='int']"",new Integer(1),""/int"",""Bb"",""BbB"");assertValueAndPointer(""/map[@name='Key1']"",""Value 1"",""/map[@name='Key1']"",""BbDd"",""BbDdB"");assertValueAndPointer(""/nestedBean[@name='strings']"",bean.getNestedBean().getStrings(),""/nestedBean/strings"",""BbBb"",""BbBbC"");assertNullPointer(""/nestedBean[@name='foo']"",""/nestedBean[@name='foo']"",""BbBn"");assertValueAndPointer(""/map[@name='Key3']"",bean.getMap().get(""Key3""),""/map[@name='Key3']"",""BbDd"",""BbDdC"");assertNullPointer(""/map[@name='foo']"",""/map[@name='foo']"",""BbDd"");assertValueAndPointer(""/list[@name='fruitco']"",context.getValue(""/vendor""),""/list[5]"",""BbCM"");assertValueAndPointer(""/map/Key3[@name='key']/name"",""Name 9"",""/map[@name='Key3'][4][@name='key']/name"",""BbDdCDdBb"",""BbDdCDdBbB"");assertValueAndPointer(""map/Key3[@name='fruitco']"",context.getValue(""/vendor""),""/map[@name='Key3'][3]"",""BbDdCM"");assertValueAndPointer(""/vendor[@name='fruitco']"",context.getValue(""/vendor""),""/vendor"",""BbM"");assertNullPointer(""/vendor[@name='foo']"",""/vendor[@name='foo']"",""BbMn"");assertNullPointer(""/vendor[@name='foo'][3]"",""/vendor[@name='foo'][3]"",""BbMn"");assertNullPointer(""/nestedBean[@name='foo']/bar"",""/nestedBean[@name='foo']/bar"",""BbBnNn"");assertNullPointer(""/map[@name='foo']/bar"",""/map[@name='foo']/bar"",""BbDdNn"");assertNullPointer(""/vendor[@name='foo']/bar"",""/vendor[@name='foo']/bar"",""BbMnNn"");assertNullPointer(""/vendor[@name='foo'][3]/bar"",""/vendor[@name='foo'][3]/bar"",""BbMnNn"");assertValueAndPointer(""/map[@name='Key2'][@name='name']"",""Name 6"",""/map[@name='Key2']/name"",""BbDdBb"",""BbDdBbB"");assertValueAndPointer(""/map[@name='Key2'][@name='strings'][2]"",""String 2"",""/map[@name='Key2']/strings[2]"",""BbDdBb"",""BbDdBbB"");assertValueAndPointer(""map[@name='Key5'][@name='key']/name"",""Name 9"",""/map[@name='Key5'][@name='key']/name"",""BbDdDdBb"",""BbDdDdBbB"");assertNullPointer(""map[@name='Key2'][@name='foo']"",""/map[@name='Key2'][@name='foo']"",""BbDdBn"");assertNullPointer(""map[@name='Key2'][@name='foo'][@name='bar']"",""/map[@name='Key2'][@name='foo'][@name='bar']"",""BbDdBnNn"");assertValueAndPointer(""map[@name='Key4'][@name='fruitco']"",context.getValue(""/vendor""),""/map[@name='Key4']"",""BbDdM"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoPredicatesStandard",0,"public void testDoPredicatesStandard(){assertValueAndPointer(""map[@name='Key3'][@name='fruitco']"",context.getValue(""/vendor""),""/map[@name='Key3'][3]"",""BbDdCM"");assertNullPointer(""map[@name='Key3'][@name='foo']"",""/map[@name='Key3'][4][@name='foo']"",""BbDdCDd"");assertValueAndPointer(""map[@name='Key4'][@name='fruitco']"",context.getValue(""/vendor""),""/map[@name='Key4']"",""BbDdM"");assertNullPointer(""map[@name='Key6'][@name='fruitco']"",""/map[@name='Key6'][@name='fruitco']"",""BbDdCn"");assertValueAndPointer(""/vendor/contact[@name='jack'][2]"",""Jack Black"",""/vendor/contact[4]"",""BbMM"");assertNullPointer(""/vendor/contact[@name='jack'][5]"",""/vendor/contact[@name='jack'][5]"",""BbMnNn"");assertValueAndPointer(""/vendor/contact/.[@name='jack']"",""Jack"",""/vendor/contact[2]"",""BbMM"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testDoPredicateIndex",0,"public void testDoPredicateIndex(){assertValueAndPointer(""/map[@name='Key2'][@name='strings'][2]"",""String 2"",""/map[@name='Key2']/strings[2]"",""BbDdBb"",""BbDdBbB"");assertValueAndPointer(""/nestedBean[@name='strings'][2]"",bean.getNestedBean().getStrings()[1],""/nestedBean/strings[2]"",""BbBb"",""BbBbB"");assertNullPointer(""/nestedBean[@name='foo'][3]"",""/nestedBean[@name='foo'][3]"",""BbBn"");assertNullPointer(""/nestedBean[@name='strings'][5]"",""/nestedBean/strings[5]"",""BbBbE"");assertValueAndPointer(""/map[@name='Key3'][2]"",new Integer(2),""/map[@name='Key3'][2]"",""BbDd"",""BbDdB"");assertNullPointer(""/map[@name='Key3'][5]"",""/map[@name='Key3'][5]"",""BbDdE"");assertNullPointer(""/map[@name='Key3'][5]/foo"",""/map[@name='Key3'][5]/foo"",""BbDdENn"");assertValueAndPointer(""/map[@name='Key5'][@name='strings'][2]"",""String 2"",""/map[@name='Key5'][@name='strings'][2]"",""BbDdDd"",""BbDdDdB"");assertNullPointer(""/map[@name='Key5'][@name='strings'][5]"",""/map[@name='Key5'][@name='strings'][5]"",""BbDdDdE"");assertValueAndPointer(""/map[@name='Key3'][2]"",new Integer(2),""/map[@name='Key3'][2]"",""BbDd"",""BbDdB"");assertValueAndPointer(""/map[@name='Key3'][1]/name"",""some"",""/map[@name='Key3'][1]/name"",""BbDdBb"",""BbDdBbB"");assertNullPointer(""/map[@name='foo'][3]"",""/map[@name='foo'][3]"",""BbDdE"");assertValueAndPointer(""/integers[2]"",new Integer(2),""/integers[2]"",""Bb"",""BbB"");assertValueAndPointer(""/nestedBean/strings[2]"",bean.getNestedBean().getStrings()[1],""/nestedBean/strings[2]"",""BbBb"",""BbBbB"");assertValueAndPointer(""/list[3]/int"",new Integer(1),""/list[3]/int"",""BbBb"",""BbBbB"");assertNullPointer(""/list[6]"",""/list[6]"",""BbE"");assertNullPointer(""/nestedBean/foo[3]"",""/nestedBean/foo[3]"",""BbBn"");assertNullPointer(""/map/foo[3]"",""/map[@name='foo'][3]"",""BbDdE"");assertNullPointer(""/nestedBean/strings[5]"",""/nestedBean/strings[5]"",""BbBbE"");assertNullPointer(""/map/Key3[5]/foo"",""/map[@name='Key3'][5]/foo"",""BbDdENn"");assertValueAndPointer(""/map[@name='Key5']/strings[2]"",""String 2"",""/map[@name='Key5'][@name='strings'][2]"",""BbDdDd"",""BbDdDdB"");assertNullPointer(""/map[@name='Key5']/strings[5]"",""/map[@name='Key5'][@name='strings'][5]"",""BbDdDdE"");assertValueAndPointer(""/int[1]"",new Integer(1),""/int"",""Bb"",""BbB"");assertValueAndPointer("".[1]/int"",new Integer(1),""/int"",""Bb"",""BbB"");}"
"org.apache.commons.jxpath.ri.axes.SimplePathInterpreterTest.testInterpretExpressionPath",0,"public void testInterpretExpressionPath(){context.getVariables().declareVariable(""array"",new String[]{""Value1""});context.getVariables().declareVariable(""testnull"",new TestNull());assertNullPointer(""$testnull/nothing[2]"",""$testnull/nothing[2]"",""VBbE"");}"
"org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testCoreFunctions",0,"public void testCoreFunctions(){assertXPathValue(context,""string(2)"",""2"");assertXPathValue(context,""string($nan)"",""NaN"");assertXPathValue(context,""string(-$nan)"",""NaN"");assertXPathValue(context,""string(-2 div 0)"",""-Infinity"");assertXPathValue(context,""string(2 div 0)"",""Infinity"");assertXPathValue(context,""concat('a','b','c')"",""abc"");assertXPathValue(context,""starts-with('abc','ab')"",Boolean.TRUE);assertXPathValue(context,""starts-with('xabc','ab')"",Boolean.FALSE);assertXPathValue(context,""ends-with('abc','bc')"",Boolean.TRUE);assertXPathValue(context,""ends-with('xabc','ab')"",Boolean.FALSE);assertXPathValue(context,""contains('xabc','ab')"",Boolean.TRUE);assertXPathValue(context,""contains('xabc','ba')"",Boolean.FALSE);assertXPathValue(context,""substring-before('1999/04/01','/')"",""1999"");assertXPathValue(context,""substring-after('1999/04/01','/')"",""04/01"");assertXPathValue(context,""substring('12345',2,3)"",""234"");assertXPathValue(context,""substring('12345',2)"",""2345"");assertXPathValue(context,""substring('12345',1.5,2.6)"",""234"");assertXPathValue(context,""substring('12345',0,3)"",""12"");assertXPathValue(context,""substring('12345',0 div 0,3)"","""");assertXPathValue(context,""substring('12345',1,0 div 0)"","""");assertXPathValue(context,""substring('12345',-42,1 div 0)"",""12345"");assertXPathValue(context,""substring('12345',-1 div 0,1 div 0)"","""");assertXPathValue(context,""substring('12345',6,6)"","""");assertXPathValue(context,""substring('12345',7,8)"","""");assertXPathValue(context,""substring('12345',7)"","""");assertXPathValue(context,""string-length('12345')"",new Double(5));assertXPathValue(context,""normalize-space(' abc  def  ')"",""abc def"");assertXPathValue(context,""normalize-space('abc def')"",""abc def"");assertXPathValue(context,""normalize-space('   ')"","""");assertXPathValue(context,""translate('--aaa--','abc-','ABC')"",""AAA"");assertXPathValue(context,""boolean(1)"",Boolean.TRUE);assertXPathValue(context,""boolean(0)"",Boolean.FALSE);assertXPathValue(context,""boolean('x')"",Boolean.TRUE);assertXPathValue(context,""boolean('')"",Boolean.FALSE);assertXPathValue(context,""boolean(/list)"",Boolean.TRUE);assertXPathValue(context,""boolean(/list[position()< 1])"",Boolean.FALSE);assertXPathValue(context,""true()"",Boolean.TRUE);assertXPathValue(context,""false()"",Boolean.FALSE);assertXPathValue(context,""not(false())"",Boolean.TRUE);assertXPathValue(context,""not(true())"",Boolean.FALSE);assertXPathValue(context,""null()"",null);assertXPathValue(context,""number('1')"",new Double(1));assertXPathValue(context,""number($bool_true)"",new Double(1));assertXPathValue(context,""number($bool_false)"",new Double(0));assertXPathValue(context,""floor(1.5)"",new Double(1));assertXPathValue(context,""floor(-1.5)"",new Double(-2));assertXPathValue(context,""ceiling(1.5)"",new Double(2));assertXPathValue(context,""ceiling(-1.5)"",new Double(-1));assertXPathValue(context,""round(1.5)"",new Double(2));assertXPathValue(context,""round(-1.5)"",new Double(-1));assertXPathValue(context,""floor('NaN')"",new Double(Double.NaN));assertXPathValue(context,""floor(-2 div 0)"",new Double(Double.NEGATIVE_INFINITY));assertXPathValue(context,""floor(2 div 0)"",new Double(Double.POSITIVE_INFINITY));assertXPathValue(context,""ceiling('NaN')"",new Double(Double.NaN));assertXPathValue(context,""ceiling(-2 div 0)"",new Double(Double.NEGATIVE_INFINITY));assertXPathValue(context,""ceiling(2 div 0)"",new Double(Double.POSITIVE_INFINITY));assertXPathValue(context,""round('NaN')"",new Double(Double.NaN));assertXPathValue(context,""round(-2 div 0)"",new Double(Double.NEGATIVE_INFINITY));assertXPathValue(context,""round(2 div 0)"",new Double(Double.POSITIVE_INFINITY));}"
"org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testIDFunction",0,"public void testIDFunction(){context.setIdentityManager(new IdentityManager(){public Pointer getPointerByID(JXPathContext context,String id){NodePointer ptr=(NodePointer)context.getPointer(""/document"");ptr=ptr.getValuePointer();return ptr.getPointerByID(context,id);}});assertXPathValueAndPointer(context,""id(101)//street"",""Tangerine Drive"",""id('101')/address[1]/street[1]"");assertXPathPointerLenient(context,""id(105)/address/street"",""id(105)/address/street"");}"
"org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testKeyFunction",0,"public void testKeyFunction(){context.setKeyManager(new KeyManager(){public Pointer getPointerByKey(JXPathContext context,String key,String value){return NodePointer.newNodePointer(null,""42"",null);}});assertXPathValue(context,""key('a','b')"",""42"");}"
"org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testExtendedKeyFunction",0,"public void testExtendedKeyFunction(){context.setKeyManager(new ExtendedKeyManager(){public Pointer getPointerByKey(JXPathContext context,String key,String value){return NodePointer.newNodePointer(null,""incorrect"",null);}public NodeSet getNodeSetByKey(JXPathContext context,String keyName,Object keyValue){return new NodeSet(){public List getNodes(){return Arrays.asList(new Object[]{""53"",""64""});}public List getPointers(){return Arrays.asList(new NodePointer[]{NodePointer.newNodePointer(null,""53"",null),NodePointer.newNodePointer(null,""64"",null)});}public List getValues(){return Arrays.asList(new Object[]{""53"",""64""});}};}});assertXPathValue(context,""key('a','b')"",""53"");assertXPathValue(context,""key('a','b')[1]"",""53"");assertXPathValue(context,""key('a','b')[2]"",""64"");assertXPathValueIterator(context,""key('a','b')"",list(""53"",""64""));assertXPathValueIterator(context,""'x' | 'y'"",list(""x"",""y""));assertXPathValueIterator(context,""key('a','x' | 'y')"",list(""53"",""64"",""53"",""64""));assertXPathValueIterator(context,""key('a',/list[position()< 4])"",list(""53"",""64"",""53"",""64"",""53"",""64""));context.getVariables().declareVariable(""ints"",new int[]{0,0});assertXPathValueIterator(context,""key('a',$ints)"",list(""53"",""64"",""53"",""64""));}"
"org.apache.commons.jxpath.ri.compiler.CoreFunctionTest.testFormatNumberFunction",0,"public void testFormatNumberFunction(){DecimalFormatSymbols symbols=new DecimalFormatSymbols();symbols.setDigit('D');context.setDecimalFormatSymbols(""test"",symbols);assertXPathValue(context,""format-number(123456789,'#.000000000')"",""123456789.000000000"");assertXPathValue(context,""format-number(123456789,'#.0')"",""123456789.0"");assertXPathValue(context,""format-number(0.123456789,'##%')"",""12%"");assertXPathValue(context,""format-number(123456789,'################')"",""123456789"");assertXPathValue(context,""format-number(123456789,'D.0','test')"",""123456789.0"");assertXPathValue(context,""format-number(123456789,'$DDD,DDD,DDD.DD','test')"",""$123,456,789"");}"
"org.apache.commons.jxpath.servlet.JXPathServletContextTest.testServletContext",0,"public void testServletContext(){ServletContext context=getServletContext();JXPathContext appContext=JXPathServletContexts.getApplicationContext(context);assertSame(""Cached context not property returned"",appContext,JXPathServletContexts.getApplicationContext(context));assertEquals(""Application Context"",""OK"",appContext.getValue(""app""));checkPointerIterator(appContext);appContext.setValue(""/foo"",""bar"");assertEquals(""Context property"",""bar"",appContext.getValue(""/foo""));Variables variables=appContext.getVariables();assertNotNull(""$application variable"",variables.getVariable(""application""));assertNull(""$foo variable"",variables.getVariable(""$foo""));}"
"org.apache.commons.jxpath.servlet.JXPathServletContextTest.testServletRequest",0,"public void testServletRequest(){ServletContext context=getServletContext();MockHttpSession session=new MockHttpSession();session.setupServletContext(context);session.setUpIsNew(true);Integer count=new Integer(10);session.setAttribute(""count"",count);MockHttpServletRequest request=new MockHttpServletRequest();request.setSession(session);request.setAttribute(""attr"",""OK"");request.setupAddParameter(""parm"",""OK"");request.setupAddParameter(""multiparam"",new String[]{""value1"",""value2""});request.setupAddParameter(""emptyparam"",new String[0]);assertSame(""Request session"",session,request.getSession());JXPathContext reqContext=JXPathServletContexts.getRequestContext(request,context);assertSame(""Cached context not property returned"",reqContext,JXPathServletContexts.getRequestContext(request,context));JXPathContext sessionContext=JXPathServletContexts.getSessionContext(session,context);assertSame(""Cached context not property returned"",sessionContext,JXPathServletContexts.getSessionContext(session,context));assertEquals(""Request Context Attribute"",""OK"",reqContext.getValue(""attr""));assertEquals(""Request Context Parameter"",""OK"",reqContext.getValue(""parm""));assertTrue(""Request Context Parameter (Array)"",reqContext.getValue(""multiparam"").getClass().isArray());assertEquals(""Request Context Parameter (Empty)"",null,reqContext.getValue(""emptyparam""));assertEquals(""Session Context Parameter"",count,sessionContext.getValue(""count""));assertEquals(""Application Context via Request Context"",""OK"",reqContext.getValue(""app""));assertEquals(""Session Context via Request Context"",count,reqContext.getValue(""count""));assertEquals(""Application Context via Session Context"",""OK"",sessionContext.getValue(""app""));checkPointerIterator(reqContext);checkPointerIterator(sessionContext);reqContext.setValue(""/foo1"",""bar1"");assertEquals(""Context property"",""bar1"",reqContext.getValue(""/foo1""));sessionContext.setValue(""/foo2"",""bar2"");assertEquals(""Context property"",""bar2"",sessionContext.getValue(""/foo2""));}"
"org.apache.commons.jxpath.servlet.JXPathServletContextTest.testServletRequestWithoutSession",0,"public void testServletRequestWithoutSession(){ServletContext context=getServletContext();MockHttpServletRequest request=new MockHttpServletRequest();JXPathContext reqContext=JXPathServletContexts.getRequestContext(request,context);assertEquals(""Application Context via Request Context"",""OK"",reqContext.getValue(""app""));}"
"org.apache.commons.jxpath.servlet.JXPathServletContextTest.testPageContext",0,"public void testPageContext(){MockServletContext servletContext=new MockServletContext();servletContext.setAttribute(""app"",""app"");MockServletConfig servletConfig=new MockServletConfig();servletConfig.setServletContext(servletContext);MockHttpSession session=new MockHttpSession();session.setupServletContext(servletContext);session.setAttribute(""session"",""session"");MockHttpServletRequest request=new MockHttpServletRequest();request.setAttribute(""request"",""request"");request.setSession(session);MockPageContext pageContext=new MockPageContext();pageContext.setServletConfig(servletConfig);pageContext.setServletRequest(request);pageContext.setAttribute(""page"",""page"");assertSame(""Request session"",session,request.getSession());JXPathContext context=JXPathServletContexts.getPageContext(pageContext);context.setLenient(true);checkPointerIterator(context);assertEquals(""Page Scope"",""page"",context.getValue(""page""));assertEquals(""Request Scope"",""request"",context.getValue(""request""));assertEquals(""Session Scope"",""session"",context.getValue(""session""));assertEquals(""Application Scope"",""app"",context.getValue(""app""));assertEquals(""Explicit Page Scope"",""page"",context.getValue(""$page/page""));assertEquals(""Explicit Request Scope"",""request"",context.getValue(""$request/request""));assertEquals(""Explicit Session Scope"",""session"",context.getValue(""$session/session""));assertEquals(""Explicit Application Scope"",""app"",context.getValue(""$application/app""));Iterator it=context.iteratePointers(""$page/*"");assertTrue(""element not found"",it.hasNext());it.next();it.next();assertFalse(""too many elements"",it.hasNext());context.setValue(""/foo1"",""bar1"");assertEquals(""Context property"",""bar1"",context.getValue(""/foo1""));context.setValue(""$page/foo2"",""bar2"");assertEquals(""Context property"",""bar2"",context.getValue(""$page/foo2""));}"
"org.apache.commons.jxpath.ri.model.EmbeddedColonMapKeysTest.testSelectNodes",0,"public void testSelectNodes()throws Exception {assertXPathValueIterator(context,""/.[@name='foo:key']"",list(""value""));assertXPathValueIterator(context,""/foo:key"",list());}"
"org.apache.commons.jxpath.ri.model.EmbeddedColonMapKeysTest.testSelectSingleNode",0,"public void testSelectSingleNode()throws Exception {assertXPathValue(context,""/.[@name='foo:key']"",""value"");assertXPathValueLenient(context,""/foo:key"",null);}"
"org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.doTest",0,"protected void doTest(String xpath,String model,String expected){assertXPathValue(createContext(model),xpath,expected);}"
"org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.testAttributeDOM",0,"public void testAttributeDOM(){doTestAttribute(DocumentContainer.MODEL_DOM);}"
"org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.testElementDOM",0,"public void testElementDOM(){doTestElement(DocumentContainer.MODEL_DOM);}"
"org.apache.commons.jxpath.ri.model.ExternalXMLNamespaceTest.testCreateAndSetAttributeDOM",0,"public void testCreateAndSetAttributeDOM(){doTestCreateAndSetAttribute(DocumentContainer.MODEL_DOM);}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testConstructorLookup",0,"public void testConstructorLookup(){Object[]args=new Object[]{new Integer(1),""x""};Function func=functions.getFunction(""test"",""new"",args);assertEquals(""test:new(1,x)"",func.invoke(new Context(null),args).toString(),""foo=1;bar=x"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testConstructorLookupWithExpressionContext",0,"public void testConstructorLookupWithExpressionContext(){Object[]args=new Object[]{""baz""};Function func=functions.getFunction(""test"",""new"",args);assertEquals(""test:new('baz')"",func.invoke(new Context(new Integer(1)),args).toString(),""foo=1;bar=baz"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testStaticMethodLookup",0,"public void testStaticMethodLookup(){Object[]args=new Object[]{new Integer(1),""x""};Function func=functions.getFunction(""test"",""build"",args);assertEquals(""test:build(1,x)"",func.invoke(new Context(null),args).toString(),""foo=1;bar=x"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testStaticMethodLookupWithConversion",0,"public void testStaticMethodLookupWithConversion(){Object[]args=new Object[]{""7"",new Integer(1)};Function func=functions.getFunction(""test"",""build"",args);assertEquals(""test:build('7',1)"",func.invoke(new Context(null),args).toString(),""foo=7;bar=1"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testMethodLookup",0,"public void testMethodLookup(){Object[]args=new Object[]{new TestFunctions()};Function func=functions.getFunction(""test"",""getFoo"",args);assertEquals(""test:getFoo($test,1,x)"",func.invoke(new Context(null),args).toString(),""0"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testStaticMethodLookupWithExpressionContext",0,"public void testStaticMethodLookupWithExpressionContext(){Object[]args=new Object[0];Function func=functions.getFunction(""test"",""path"",args);assertEquals(""test:path()"",func.invoke(new Context(new Integer(1)),args),""1"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testMethodLookupWithExpressionContext",0,"public void testMethodLookupWithExpressionContext(){Object[]args=new Object[]{new TestFunctions()};Function func=functions.getFunction(""test"",""instancePath"",args);assertEquals(""test:instancePath()"",func.invoke(new Context(new Integer(1)),args),""1"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testMethodLookupWithExpressionContextAndArgument",0,"public void testMethodLookupWithExpressionContextAndArgument(){Object[]args=new Object[]{new TestFunctions(),""*""};Function func=functions.getFunction(""test"",""pathWithSuffix"",args);assertEquals(""test:pathWithSuffix('*')"",func.invoke(new Context(new Integer(1)),args),""1*"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testAllocation",0,"public void testAllocation(){assertXPathValue(context,""string(test:new())"",""foo=0;bar=null"");assertXPathValue(context,""string(jxpathtest:TestFunctions.new())"",""foo=0;bar=null"");assertXPathValue(context,""string("" + TestFunctions.class.getName()+ "".new())"",""foo=0;bar=null"");assertXPathValue(context,""string(test:new(3,'baz'))"",""foo=3;bar=baz"");assertXPathValue(context,""string(test:new('3',4))"",""foo=3;bar=4.0"");context.getVariables().declareVariable(""A"",""baz"");assertXPathValue(context,""string(test:new(2,$A,false))"",""foo=2;bar=baz"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testMethodCall",0,"public void testMethodCall(){assertXPathValue(context,""length('foo')"",new Integer(3));assertXPathValue(context,""call:substring('foo',1,2)"",""o"");assertXPathValue(context,""string(test:getFoo($test))"",""4"");assertXPathValue(context,""string(call:getFoo($test))"",""4"");assertXPathValue(context,""string(getFoo($test))"",""4"");assertXPathValue(context,""string(test:setFooAndBar($test,7,'biz'))"",""foo=7;bar=biz"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testCollectionMethodCall",0,"public void testCollectionMethodCall(){List list=new ArrayList();list.add(""foo"");context.getVariables().declareVariable(""myList"",list);assertXPathValue(context,""size($myList)"",new Integer(1));assertXPathValue(context,""size(beans)"",new Integer(2));context.getValue(""add($myList,'hello')"");assertEquals(""After adding an element"",2,list.size());JXPathContext context=JXPathContext.newContext(new ArrayList());assertEquals(""Extension function on root collection"",""0"",String.valueOf(context.getValue(""size(/)"")));}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testStaticMethodCall",0,"public void testStaticMethodCall(){assertXPathValue(context,""string(test:build(8,'goober'))"",""foo=8;bar=goober"");assertXPathValue(context,""string(jxpathtest:TestFunctions.build(8,'goober'))"",""foo=8;bar=goober"");assertXPathValue(context,""string("" + TestFunctions.class.getName()+ "".build(8,'goober'))"",""foo=8;bar=goober"");assertXPathValue(context,""string(test:increment(8))"",""9"");assertXPathValue(context,""test:string(/beans/name)"",""Name 1"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testExpressionContext",0,"public void testExpressionContext(){assertXPathValue(context,""//.[test:isMap()]/Key1"",""Value 1"");assertXPathValue(context,""count(//.[test:count(strings)= 3])"",new Double(7));assertXPathValue(context,""test:count(//strings)"",new Integer(21));assertXPathValue(context,""test:countPointers(//strings)"",new Integer(21));assertXPathValue(context,""/beans[contains(test:path(),'[2]')]/name"",""Name 2"");}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testCollectionReturn",0,"public void testCollectionReturn(){assertXPathValueIterator(context,""test:collection()/name"",list(""foo"",""bar""));assertXPathPointerIterator(context,""test:collection()/name"",list(""/.[1]/name"",""/.[2]/name""));assertXPathValue(context,""test:collection()/name"",""foo"");assertXPathValue(context,""test:collection()/@name"",""foo"");List list=new ArrayList();list.add(""foo"");list.add(""bar"");context.getVariables().declareVariable(""list"",list);Object values=context.getValue(""test:items($list)"");assertTrue(""Return type: "",values instanceof Collection);assertEquals(""Return values: "",list,new ArrayList((Collection)values));}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testNodeSetReturn",0,"public void testNodeSetReturn(){assertXPathValueIterator(context,""test:nodeSet()/name"",list(""Name 1"",""Name 2""));assertXPathValueIterator(context,""test:nodeSet()"",list(testBean.getBeans()[0],testBean.getBeans()[1]));assertXPathPointerIterator(context,""test:nodeSet()/name"",list(""/beans[1]/name"",""/beans[2]/name""));assertXPathValueAndPointer(context,""test:nodeSet()/name"",""Name 1"",""/beans[1]/name"");assertXPathValueAndPointer(context,""test:nodeSet()/@name"",""Name 1"",""/beans[1]/@name"");assertEquals(2,((Number)context.getValue(""count(test:nodeSet())"")).intValue());assertXPathValue(context,""test:nodeSet()"",testBean.getBeans()[0]);}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testEstablishNodeSetBaseline",0,"public void testEstablishNodeSetBaseline(){assertXPathValue(context,""test:isInstance(//strings,$List.class)"",Boolean.TRUE);assertXPathValue(context,""test:isInstance(//strings,$NodeSet.class)"",Boolean.FALSE);}"
"org.apache.commons.jxpath.ri.compiler.ExtensionFunctionTest.testBCNodeSetHack",0,"public void testBCNodeSetHack(){TypeUtils.setTypeConverter(new JXPath11CompatibleTypeConverter());assertXPathValue(context,""test:isInstance(//strings,$List.class)"",Boolean.FALSE);assertXPathValue(context,""test:isInstance(//strings,$NodeSet.class)"",Boolean.TRUE);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testGetNode",0,"public void testGetNode(){assertXPathNodeType(context,""/"",Document.class);assertXPathNodeType(context,""/vendor/location"",Element.class);assertXPathNodeType(context,""//location/@name"",Attr.class);assertXPathNodeType(context,""//vendor"",Element.class);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testGetElementDescendantOrSelf",0,"public void testGetElementDescendantOrSelf(){JXPathContext childContext=context.getRelativeContext(context.getPointer(""/vendor""));assertTrue(childContext.getContextBean()instanceof Element);assertXPathNodeType(childContext,""//vendor"",Element.class);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testDocumentOrder",0,"public void testDocumentOrder(){assertDocumentOrder(context,""vendor/location"",""vendor/location/address/street"",-1);assertDocumentOrder(context,""vendor/location[@id = '100']"",""vendor/location[@id = '101']"",-1);assertDocumentOrder(context,""vendor//price:amount"",""vendor/location"",1);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testSetValue",0,"public void testSetValue(){assertXPathSetValue(context,""vendor/location[@id = '100']"",""New Text"");assertXMLSignature(context,""vendor/location[@id = '100']"",""<E>New Text</E>"",false,false,true,false);assertXPathSetValue(context,""vendor/location[@id = '101']"",""Replacement Text"");assertXMLSignature(context,""vendor/location[@id = '101']"",""<E>Replacement Text</E>"",false,false,true,false);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testCreatePath",0,"/** * Test JXPathContext.createPath()with various arguments*/public void testCreatePath(){assertXPathCreatePath(context,""/vendor[1]/location[3]"","""",""/vendor[1]/location[3]"");assertXPathCreatePath(context,""/vendor[1]/location[3]/address/street"","""",""/vendor[1]/location[3]/address[1]/street[1]"");assertXPathCreatePath(context,""/vendor[1]/location[2]/@manager"","""",""/vendor[1]/location[2]/@manager"");assertXPathCreatePath(context,""/vendor[1]/location[1]/@name"",""local"",""/vendor[1]/location[1]/@name"");assertXPathCreatePathAndSetValue(context,""/vendor[1]/location[4]/@manager"","""",""/vendor[1]/location[4]/@manager"");context.registerNamespace(""price"",""priceNS"");assertXPathCreatePath(context,""/vendor[1]/price:foo/price:bar"","""",""/vendor[1]/price:foo[1]/price:bar[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testCreatePathAndSetValue",0,"/** * Test JXPath.createPathAndSetValue()with various arguments*/public void testCreatePathAndSetValue(){assertXPathCreatePathAndSetValue(context,""vendor/location[3]"","""",""/vendor[1]/location[3]"");assertXPathCreatePathAndSetValue(context,""vendor/location[3]/address/street"",""Lemon Circle"",""/vendor[1]/location[3]/address[1]/street[1]"");assertXPathCreatePathAndSetValue(context,""vendor/location[2]/@manager"",""John Doe"",""/vendor[1]/location[2]/@manager"");assertXPathCreatePathAndSetValue(context,""vendor/location[1]/@manager"",""John Doe"",""/vendor[1]/location[1]/@manager"");assertXPathCreatePathAndSetValue(context,""/vendor[1]/location[4]/@manager"",""James Dow"",""/vendor[1]/location[4]/@manager"");assertXPathCreatePathAndSetValue(context,""vendor/product/product:name/attribute::price:language"",""English"",""/vendor[1]/product[1]/product:name[1]/@price:language"");context.registerNamespace(""price"",""priceNS"");assertXPathCreatePathAndSetValue(context,""/vendor[1]/price:foo/price:bar"",""123.20"",""/vendor[1]/price:foo[1]/price:bar[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testRemovePath",0,"/** * Test JXPathContext.removePath()with various arguments*/public void testRemovePath(){context.removePath(""vendor/location[@id = '101']//street/text()"");assertEquals(""Remove DOM text"","""",context.getValue(""vendor/location[@id = '101']//street""));context.removePath(""vendor/location[@id = '101']//street"");assertEquals(""Remove DOM element"",new Double(0),context.getValue(""count(vendor/location[@id = '101']//street)""));context.removePath(""vendor/location[@id = '100']/@name"");assertEquals(""Remove DOM attribute"",new Double(0),context.getValue(""count(vendor/location[@id = '100']/@name)""));}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testID",0,"public void testID(){context.setIdentityManager(new IdentityManager(){public Pointer getPointerByID(JXPathContext context,String id){NodePointer ptr=(NodePointer)context.getPointer(""/"");ptr=ptr.getValuePointer();return ptr.getPointerByID(context,id);}});assertXPathValueAndPointer(context,""id(101)//street"",""Tangerine Drive"",""id('101')/address[1]/street[1]"");assertXPathPointerLenient(context,""id(105)/address/street"",""id(105)/address/street"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisChild",0,"public void testAxisChild(){assertXPathValue(context,""vendor/location/address/street"",""Orchard Road"");assertXPathValue(context,""vendor/location/address/city"",""Fruit Market"");assertXPathValue(context,""local-name(vendor/product/price:amount)"",""amount"");assertXPathValue(context,""local-name(vendor/location)"",""location"");assertXPathValue(context,""name(vendor/product/price:amount)"",""value:amount"");assertXPathValue(context,""name(vendor/location)"",""location"");assertXPathValue(context,""namespace-uri(vendor/product/price:amount)"",""priceNS"");assertXPathValue(context,""vendor/product/prix"",""934.99"");assertXPathValue(context,""/vendor/contact[@name='jim']"",""Jim"");boolean nsv=false;try {context.setLenient(false);context.getValue(""/vendor/contact[@name='jane']"");}catch(JXPathException ex){nsv=true;}assertTrue(""No such value: /vendor/contact[@name='jim']"",nsv);nsv=false;try {context.setLenient(false);context.getValue(""/vendor/contact[@name='jane']/*"");}catch(JXPathException ex){nsv=true;}assertTrue(""No such value: /vendor/contact[@name='jane']/*"",nsv);assertXPathValue(context,""count(vendor/product/price:*)"",new Double(2));assertXPathValue(context,""count(vendor/product/*)"",new Double(4));assertXPathValue(context,""vendor/product/price:amount"",""45.95"");context.registerNamespace(""x"",""temp"");assertXPathValue(context,""vendor/x:pos//number"",""109"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisChildIndexPredicate",0,"public void testAxisChildIndexPredicate(){assertXPathValue(context,""vendor/location[2]/address/street"",""Tangerine Drive"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisDescendant",0,"public void testAxisDescendant(){assertXPathValue(context,""//street"",""Orchard Road"");assertXPathValue(context,""count(//price:*)"",new Double(2));assertXPathValueIterator(context,""vendor//saleEnds"",list(""never""));assertXPathValueIterator(context,""vendor//promotion"",list(""""));assertXPathValueIterator(context,""vendor//saleEnds[../@stores = 'all']"",list(""never""));assertXPathValueIterator(context,""vendor//promotion[../@stores = 'all']"",list(""""));}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisParent",0,"public void testAxisParent(){assertXPathPointer(context,""//street/.."",""/vendor[1]/location[1]/address[1]"");assertXPathPointerIterator(context,""//street/.."",list(""/vendor[1]/location[2]/address[1]"",""/vendor[1]/location[1]/address[1]""));assertXPathValue(context,""vendor/product/price:sale/saleEnds/parent::price:*"" + ""/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisFollowingSibling",0,"public void testAxisFollowingSibling(){assertXPathValue(context,""vendor/location[.//employeeCount = 10]/"" + ""following-sibling::location//street"",""Tangerine Drive"");assertXPathPointer(context,""vendor/location[.//employeeCount = 10]/"" + ""following-sibling::location//street"",""/vendor[1]/location[2]/address[1]/street[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisPrecedingSibling",0,"public void testAxisPrecedingSibling(){assertXPathPointer(context,""//location[2]/preceding-sibling::location//street"",""/vendor[1]/location[1]/address[1]/street[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisPreceding",0,"public void testAxisPreceding(){assertXPathPointer(context,""//location[2]/preceding-sibling::location//street"",""/vendor[1]/location[1]/address[1]/street[1]"");assertXPathPointer(context,""//location[2]/preceding::*[1]"",""/vendor[1]/location[1]/employeeCount[1]"");assertXPathPointer(context,""//location[2]/preceding::node()[3]"",""/vendor[1]/location[1]/employeeCount[1]/text()[1]"");assertXPathPointer(context,""//location[2]/preceding::node()[4]"",""/vendor[1]/location[1]/employeeCount[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisAttribute",0,"public void testAxisAttribute(){assertXPathValue(context,""vendor/location/@id"",""100"");assertXPathPointer(context,""vendor/location/@id"",""/vendor[1]/location[1]/@id"");assertXPathValueIterator(context,""vendor/location/@id"",list(""100"",""101""));assertXPathValue(context,""vendor/product/price:amount/@price:discount"",""10%"");assertXPathValue(context,""namespace-uri(vendor/product/price:amount/@price:discount)"",""priceNS"");assertXPathValue(context,""local-name(vendor/product/price:amount/@price:discount)"",""discount"");assertXPathValue(context,""name(vendor/product/price:amount/@price:discount)"",""price:discount"");assertXPathValue(context,""vendor/product/price:amount/@discount"",""20%"");assertXPathValue(context,""namespace-uri(vendor/product/price:amount/@discount)"","""");assertXPathValue(context,""local-name(vendor/product/price:amount/@discount)"",""discount"");assertXPathValue(context,""name(vendor/product/price:amount/@discount)"",""discount"");assertXPathValueIterator(context,""vendor/product/price:amount/@price:*"",list(""10%""));assertXPathValueIterator(context,""vendor/location[1]/@*"",set(""100"","""",""local""));assertXPathValueIterator(context,""vendor/product/price:amount/@*"",set(""10%"",""20%""));assertXPathValueIterator(context,""vendor/product/price:amount/attribute::node()"",set(""10%"",""20%""));assertXPathValueIterator(context,""vendor/product/price:amount/@*[namespace-uri()= '']"",list(""20%""));assertXPathValue(context,""vendor/location/@manager"","""");assertXPathValueLenient(context,""vendor/location/@missing"",null);assertXPathValueLenient(context,""vendor/location/@miss:missing"",null);assertXPathValue(context,""vendor/location[@id='101']//street"",""Tangerine Drive"");assertXPathValueIterator(context,""/vendor/location[1]/@*[name()!= 'manager']"",list(""100"",""local""));}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisNamespace",0,"public void testAxisNamespace(){assertXPathValueAndPointer(context,""vendor/product/prix/namespace::price"",""priceNS"",""/vendor[1]/product[1]/prix[1]/namespace::price"");assertXPathValue(context,""count(vendor/product/namespace::*)"",new Double(3));assertXPathValue(context,""name(vendor/product/prix/namespace::price)"",""price"");assertXPathValue(context,""local-name(vendor/product/prix/namespace::price)"",""price"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisAncestor",0,"public void testAxisAncestor(){assertXPathValue(context,""vendor/product/price:sale/saleEnds/"" + ""ancestor::price:sale/saleEnds"",""never"");assertXPathValue(context,""vendor/product/price:sale/saleEnds/ancestor::price:*"" + ""/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisAncestorOrSelf",0,"public void testAxisAncestorOrSelf(){assertXPathValue(context,""vendor/product/price:sale/"" + ""ancestor-or-self::price:sale/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisFollowing",0,"public void testAxisFollowing(){assertXPathValueIterator(context,""vendor/contact/following::location//street"",list(""Orchard Road"",""Tangerine Drive""));assertXPathValue(context,""//location/following::price:sale/saleEnds"",""never"");assertXPathPointer(context,""//location[2]/following::node()[2]"",""/vendor[1]/product[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testAxisSelf",0,"public void testAxisSelf(){assertXPathValue(context,""//price:sale/self::price:sale/saleEnds"",""never"");assertXPathValueLenient(context,""//price:sale/self::x/saleEnds"",null);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testNodeTypeComment",0,"public void testNodeTypeComment(){assertXPathValue(context,""//product/comment()"",""We are not buying this product,ever"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testNodeTypeText",0,"public void testNodeTypeText(){assertXPathValue(context,""//product/text()[. != '']"",""We love this product."");assertXPathPointer(context,""//product/text()"",""/vendor[1]/product[1]/text()[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testNodeTypeProcessingInstruction",0,"public void testNodeTypeProcessingInstruction(){assertXPathValue(context,""//product/processing-instruction()"",""do not show anybody"");assertXPathValue(context,""//product/processing-instruction('report')"",""average only"");assertXPathPointer(context,""//product/processing-instruction('report')"",""/vendor[1]/product[1]/processing-instruction('report')[1]"");assertXPathValue(context,""name(//product/processing-instruction()[1])"",""security"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testLang",0,"public void testLang(){assertXPathValue(context,""//product/prix/@xml:lang"",""fr"");assertXPathValue(context,""//product/prix[lang('fr')]"",""934.99"");assertXPathValue(context,""//product/price:sale[lang('en')]/saleEnds"",""never"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testDocument",0,"public void testDocument(){assertXPathValue(context,""$document/vendor/location[1]//street"",""Orchard Road"");assertXPathPointer(context,""$document/vendor/location[1]//street"",""$document/vendor[1]/location[1]/address[1]/street[1]"");assertXPathValue(context,""$document/vendor//street"",""Orchard Road"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testContainer",0,"public void testContainer(){assertXPathValue(context,""$container/vendor//street"",""Orchard Road"");assertXPathValue(context,""$container//street"",""Orchard Road"");assertXPathPointer(context,""$container//street"",""$container/vendor[1]/location[1]/address[1]/street[1]"");assertXPathValue(context,""number(vendor/location/employeeCount)"",new Double(10));}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testElementInVariable",0,"public void testElementInVariable(){assertXPathValue(context,""$element"",""Orchard Road"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testTypeConversions",0,"public void testTypeConversions(){assertXPathValue(context,""vendor/location/employeeCount + 1"",new Double(11));assertXPathValue(context,""vendor/location/employeeCount and true()"",Boolean.TRUE);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testBooleanFunction",0,"public void testBooleanFunction(){assertXPathValue(context,""boolean(vendor//saleEnds[../@stores = 'all'])"",Boolean.TRUE);assertXPathValue(context,""boolean(vendor//promotion[../@stores = 'all'])"",Boolean.TRUE);assertXPathValue(context,""boolean(vendor//promotion[../@stores = 'some'])"",Boolean.FALSE);}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testFunctionsLastAndPosition",0,"public void testFunctionsLastAndPosition(){assertXPathPointer(context,""vendor//location[last()]"",""/vendor[1]/location[2]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testNamespaceMapping",0,"public void testNamespaceMapping(){context.registerNamespace(""rate"",""priceNS"");context.registerNamespace(""goods"",""productNS"");assertEquals(""Context node namespace resolution"",""priceNS"",context.getNamespaceURI(""price""));assertEquals(""Registered namespace resolution"",""priceNS"",context.getNamespaceURI(""rate""));assertXPathValue(context,""count(vendor/product/rate:*)"",new Double(2));assertXPathValue(context,""vendor[1]/product[1]/rate:amount[1]/@rate:discount"",""10%"");assertXPathValue(context,""vendor[1]/product[1]/rate:amount[1]/@price:discount"",""10%"");assertXPathValue(context,""vendor[1]/product[1]/price:amount[1]/@rate:discount"",""10%"");assertXPathValue(context,""vendor[1]/product[1]/price:amount[1]/@price:discount"",""10%"");assertXPathValueAndPointer(context,""//product:name"",""Box of oranges"",""/vendor[1]/product[1]/goods:name[1]"");JXPathContext childCtx=JXPathContext.newContext(context,context.getContextBean());assertXPathValueAndPointer(childCtx,""//product:name"",""Box of oranges"",""/vendor[1]/product[1]/goods:name[1]"");JXPathContext relativeCtx=context.getRelativeContext(context.getPointer(""/vendor""));assertXPathValueAndPointer(relativeCtx,""product/product:name"",""Box of oranges"",""/vendor[1]/product[1]/goods:name[1]"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testUnion",0,"public void testUnion(){assertXPathValue(context,""/vendor[1]/contact[1]| /vendor[1]/contact[4]"",""John"");assertXPathValue(context,""/vendor[1]/contact[4]| /vendor[1]/contact[1]"",""John"");}"
"org.apache.commons.jxpath.ri.model.dom.DOMModelTest.testNodes",0,"public void testNodes(){Pointer pointer=context.getPointer(""/vendor[1]/contact[1]"");assertFalse(pointer.getNode().equals(pointer.getValue()));}"
"org.apache.commons.jxpath.ri.model.container.ContainerModelTest.testContainerVariableWithCollection",0,"public void testContainerVariableWithCollection(){ArrayContainer container=new ArrayContainer();String[]array=(String[])container.getValue();JXPathContext context=JXPathContext.newContext(null);context.getVariables().declareVariable(""list"",container);assertXPathValueAndPointer(context,""$list"",array,""$list"");assertXPathValueAndPointer(context,""$list[1]"",""foo"",""$list[1]"");assertXPathValueAndPointer(context,""$list[2]"",""bar"",""$list[2]"");assertXPathSetValue(context,""$list[1]"",""baz"");assertEquals(""Checking setValue(index)"",""baz"",array[0]);}"
"org.apache.commons.jxpath.ri.model.container.ContainerModelTest.testContainerPropertyWithCollection",0,"public void testContainerPropertyWithCollection(){Bean bean=new Bean();List list=(List)bean.getContainer().getValue();JXPathContext context=JXPathContext.newContext(bean);assertXPathValueAndPointer(context,""/container"",list,""/container"");assertXPathValueAndPointer(context,""/container[1]"",list.get(0),""/container[1]"");assertXPathValueAndPointer(context,""/container[2]"",list.get(1),""/container[2]"");assertXPathSetValue(context,""/container[1]"",""baz"");assertEquals(""Checking setValue(index)"",""baz"",list.get(0));}"
"org.apache.commons.jxpath.ri.model.container.ContainerModelTest.testContainerMapWithCollection",0,"public void testContainerMapWithCollection(){ListContainer container=new ListContainer();List list=(List)container.getValue();Map map=new HashMap();map.put(""container"",container);JXPathContext context=JXPathContext.newContext(map);assertXPathValueAndPointer(context,""/container"",list,""/.[@name='container']"");assertXPathValueAndPointer(context,""/container[1]"",list.get(0),""/.[@name='container'][1]"");assertXPathValueAndPointer(context,""/container[2]"",list.get(1),""/.[@name='container'][2]"");assertXPathSetValue(context,""/container[1]"",""baz"");assertEquals(""Checking setValue(index)"",""baz"",list.get(0));}"
"org.apache.commons.jxpath.ri.model.container.ContainerModelTest.testContainerRootWithCollection",0,"public void testContainerRootWithCollection(){ArrayContainer container=new ArrayContainer();String[]array=(String[])container.getValue();JXPathContext context=JXPathContext.newContext(container);context.getVariables().declareVariable(""list"",container);assertXPathValueAndPointer(context,""/"",array,""/"");assertXPathValueAndPointer(context,""/.[1]"",""foo"",""/.[1]"");assertXPathValueAndPointer(context,""/.[2]"",""bar"",""/.[2]"");assertXPathSetValue(context,""/.[1]"",""baz"");assertEquals(""Checking setValue(index)"",""baz"",array[0]);}"
"org.apache.commons.jxpath.ri.StressTest.testThreads",0,"public void testThreads()throws Throwable {context=JXPathContext.newContext(null,new Double(100));Thread[]threadArray=new Thread[THREAD_COUNT];for (int i=0;i < THREAD_COUNT;i++){threadArray[i]=new Thread(new StressRunnable());}for (int i=0;i < threadArray.length;i++){threadArray[i].start();}for (int i=0;i < threadArray.length;i++){try {threadArray[i].join();}catch(InterruptedException e){assertTrue(""Interrupted"",false);}}if (exception != null){throw exception;}assertEquals(""Test count"",THREAD_COUNT * THREAD_DURATION,count);}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.doTest",0,"protected void doTest(String id,String model,String expectedValue){JXPathContext context=JXPathContext.newContext(createDocumentContainer(model));assertEquals(context.getValue(""test/text[@id='"" + id + ""']""),expectedValue);}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testUnspecifiedDOM",0,"public void testUnspecifiedDOM(){doTest(""unspecified"",DocumentContainer.MODEL_DOM,""foo"");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testDefaultDOM",0,"public void testDefaultDOM(){doTest(""default"",DocumentContainer.MODEL_DOM,""foo"");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testPreserveDOM",0,"public void testPreserveDOM(){doTest(""preserve"",DocumentContainer.MODEL_DOM,"" foo "");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedDOM",0,"public void testNestedDOM(){doTest(""nested"",DocumentContainer.MODEL_DOM,""foo;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedWithCommentsDOM",0,"public void testNestedWithCommentsDOM(){doTest(""nested-with-comments"",DocumentContainer.MODEL_DOM,""foo;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testUnspecifiedJDOM",0,"public void testUnspecifiedJDOM(){doTest(""unspecified"",DocumentContainer.MODEL_JDOM,""foo"");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testDefaultJDOM",0,"public void testDefaultJDOM(){doTest(""default"",DocumentContainer.MODEL_JDOM,""foo"");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testPreserveJDOM",0,"public void testPreserveJDOM(){doTest(""preserve"",DocumentContainer.MODEL_JDOM,"" foo "");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedJDOM",0,"public void testNestedJDOM(){doTest(""nested"",DocumentContainer.MODEL_JDOM,""foo;bar;baz "");}"
"org.apache.commons.jxpath.ri.model.XMLSpaceTest.testNestedWithCommentsJDOM",0,"public void testNestedWithCommentsJDOM(){doTest(""nested-with-comments"",DocumentContainer.MODEL_JDOM,""foo;bar;baz "");}"
"org.apache.commons.jxpath.ri.compiler.ContextDependencyTest.testContextDependency",0,"public void testContextDependency(){testContextDependency(""1"",false);testContextDependency(""$x"",false);testContextDependency(""/foo"",false);testContextDependency(""foo"",true);testContextDependency(""/foo[3]"",false);testContextDependency(""/foo[$x]"",false);testContextDependency(""/foo[bar]"",true);testContextDependency(""3 + 5"",false);testContextDependency(""test:func(3,5)"",true);testContextDependency(""test:func(3,foo)"",true);}"
"org.apache.commons.jxpath.ri.model.EmptyCollectionTest.testEmptyList",0,"public void testEmptyList(){assertXPathPointerIterator(JXPathContext.newContext(Collections.EMPTY_LIST),""/*"",Collections.EMPTY_LIST);}"
"org.apache.commons.jxpath.ri.model.EmptyCollectionTest.testEmptyArray",0,"public void testEmptyArray(){assertXPathPointerIterator(JXPathContext.newContext(new Object[0]),""/*"",list());}"
"org.apache.commons.jxpath.ri.model.EmptyCollectionTest.testEmptySet",0,"public void testEmptySet(){assertXPathPointerIterator(JXPathContext.newContext(Collections.EMPTY_SET),""/*"",Collections.EMPTY_SET);}"
"org.apache.commons.jxpath.ri.model.EmptyCollectionTest.testEmptyChildList",0,"public void testEmptyChildList(){assertXPathPointerIterator(JXPathContext.newContext(new HasChild(Collections.EMPTY_LIST)),""/child/*"",Collections.EMPTY_LIST);}"
"org.apache.commons.jxpath.ri.model.EmptyCollectionTest.testEmptyChildArray",0,"public void testEmptyChildArray(){assertXPathPointerIterator(JXPathContext.newContext(new HasChild(new Object[0])),""/child/*"",list());}"
"org.apache.commons.jxpath.ri.model.EmptyCollectionTest.testEmptyChildSet",0,"public void testEmptyChildSet(){assertXPathPointerIterator(JXPathContext.newContext(new HasChild(Collections.EMPTY_SET)),""/child/*"",Collections.EMPTY_SET);}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testVariables",0,"public void testVariables(){assertXPathValueAndPointer(context,""$a"",new Double(1),""$a"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testVariablesInExpressions",0,"public void testVariablesInExpressions(){assertXPathValue(context,""$a = $b"",Boolean.TRUE);assertXPathValue(context,""$a = $nan"",Boolean.FALSE);assertXPathValue(context,""$a + 1"",new Double(2));assertXPathValue(context,""$c"",null);assertXPathValue(context,""$d[2]"",""b"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testInvalidVariableName",0,"public void testInvalidVariableName(){boolean exception=false;try {context.getValue(""$none"");}catch(Exception ex){exception=true;}assertTrue(""Evaluating '$none',expected exception - did not get it"",exception);exception=false;try {context.setValue(""$none"",new Integer(1));}catch(Exception ex){exception=true;}assertTrue(""Setting '$none = 1',expected exception - did not get it"",exception);}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testNestedContext",0,"public void testNestedContext(){JXPathContext nestedContext=JXPathContext.newContext(context,null);assertXPathValue(nestedContext,""$a"",new Double(1));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testSetValue",0,"public void testSetValue(){assertXPathSetValue(context,""$x"",new Integer(1));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathDeclareVariable",0,"public void testCreatePathDeclareVariable(){assertXPathCreatePath(context,""$string"",null,""$string"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathAndSetValueDeclareVariable",0,"public void testCreatePathAndSetValueDeclareVariable(){assertXPathCreatePathAndSetValue(context,""$string"",""Value"",""$string"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathDeclareVariableSetCollectionElement",0,"public void testCreatePathDeclareVariableSetCollectionElement(){assertXPathCreatePath(context,""$stringArray[2]"","""",""$stringArray[2]"");assertEquals(""Created <"" + ""$stringArray[1]"" + "">"",""Value1"",context.getValue(""$stringArray[1]""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreateAndSetValuePathDeclareVariableSetCollectionElement",0,"public void testCreateAndSetValuePathDeclareVariableSetCollectionElement(){assertXPathCreatePathAndSetValue(context,""$stringArray[2]"",""Value2"",""$stringArray[2]"");assertEquals(""Created <"" + ""$stringArray[1]"" + "">"",""Value1"",context.getValue(""$stringArray[1]""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathExpandCollection",0,"public void testCreatePathExpandCollection(){context.getVariables().declareVariable(""array"",new String[]{""Value1""});assertXPathCreatePath(context,""$array[2]"","""",""$array[2]"");assertEquals(""Created <"" + ""$array[1]"" + "">"",""Value1"",context.getValue(""$array[1]""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathAndSetValueExpandCollection",0,"public void testCreatePathAndSetValueExpandCollection(){context.getVariables().declareVariable(""array"",new String[]{""Value1""});assertXPathCreatePathAndSetValue(context,""$array[2]"",""Value2"",""$array[2]"");assertEquals(""Created <"" + ""$array[1]"" + "">"",""Value1"",context.getValue(""$array[1]""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathDeclareVariableSetProperty",0,"public void testCreatePathDeclareVariableSetProperty(){assertXPathCreatePath(context,""$test/boolean"",Boolean.FALSE,""$test/boolean"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathAndSetValueDeclareVariableSetProperty",0,"public void testCreatePathAndSetValueDeclareVariableSetProperty(){assertXPathCreatePathAndSetValue(context,""$test/boolean"",Boolean.TRUE,""$test/boolean"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathDeclareVariableSetCollectionElementProperty",0,"public void testCreatePathDeclareVariableSetCollectionElementProperty(){assertXPathCreatePath(context,""$testArray[2]/boolean"",Boolean.FALSE,""$testArray[2]/boolean"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testCreatePathAndSetValueDeclVarSetCollectionElementProperty",0,"public void testCreatePathAndSetValueDeclVarSetCollectionElementProperty(){assertXPathCreatePathAndSetValue(context,""$testArray[2]/boolean"",Boolean.TRUE,""$testArray[2]/boolean"");}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testRemovePathUndeclareVariable",0,"public void testRemovePathUndeclareVariable(){context.getVariables().declareVariable(""temp"",""temp"");context.removePath(""$temp"");assertTrue(""Undeclare variable"",!context.getVariables().isDeclaredVariable(""temp""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testRemovePathArrayElement",0,"public void testRemovePathArrayElement(){context.getVariables().declareVariable(""temp"",new String[]{""temp1"",""temp2""});context.removePath(""$temp[1]"");assertEquals(""Remove array element"",""temp2"",context.getValue(""$temp[1]""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testRemovePathCollectionElement",0,"public void testRemovePathCollectionElement(){context.getVariables().declareVariable(""temp"",list(""temp1"",""temp2""));context.removePath(""$temp[1]"");assertEquals(""Remove collection element"",""temp2"",context.getValue(""$temp[1]""));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testUnionOfVariableAndNode",0,"public void testUnionOfVariableAndNode()throws Exception {assertXPathValue(context,""count($a | /document/vendor/location)"",new Double(3));assertXPathValue(context,""count($a | /list)"",new Double(7));}"
"org.apache.commons.jxpath.ri.compiler.VariableTest.testIterateVariable",0,"public void testIterateVariable()throws Exception {assertXPathValueIterator(context,""$d"",list(""a"",""b""));assertXPathValue(context,""$d = 'a'"",Boolean.TRUE);assertXPathValue(context,""$d = 'b'"",Boolean.TRUE);}"
"org.apache.commons.jxpath.ri.axes.RecursiveAxesTest.testInfiniteDescent",0,"public void testInfiniteDescent(){assertXPathPointer(context,""//.[name = 'three']"",""/first/first/second"");}"
"org.apache.commons.jxpath.ri.model.AliasedNamespaceIterationTest.testIterateDOM",1,"public void testIterateDOM(){doTestIterate(DocumentContainer.MODEL_DOM);}"
"org.apache.commons.jxpath.ri.model.AliasedNamespaceIterationTest.testIterateJDOM",1,"public void testIterateJDOM(){doTestIterate(DocumentContainer.MODEL_JDOM);}"
"org.apache.commons.jxpath.util.ClassLoaderUtilTest.testClassLoadFailWithoutContextClassLoader",0,"/** * Tests that JXPath cannot dynamically load a class,which is not visible to its class loader,when the context class loader is null.*/public void testClassLoadFailWithoutContextClassLoader(){Thread.currentThread().setContextClassLoader(null);ClassLoader cl=new TestClassLoader(getClass().getClassLoader());executeTestMethodUnderClassLoader(cl,""callExampleMessageMethodAndAssertClassNotFoundJXPathException"");}"
"org.apache.commons.jxpath.util.ClassLoaderUtilTest.testClassLoadSuccessWithContextClassLoader",0,"/** * Tests that JXPath can dynamically load a class,which is not visible to  its class loader,when the context class loader is set and can load the class.*/public void testClassLoadSuccessWithContextClassLoader(){Thread.currentThread().setContextClassLoader(getClass().getClassLoader());ClassLoader cl=new TestClassLoader(getClass().getClassLoader());executeTestMethodUnderClassLoader(cl,""callExampleMessageMethodAndAssertSuccess"");}"
"org.apache.commons.jxpath.util.ClassLoaderUtilTest.testCurrentClassLoaderFallback",0,"/** * Tests that JXPath will use its class loader to dynamically load a  requested class when the context class loader is set but unable to load the class.*/public void testCurrentClassLoaderFallback(){ClassLoader cl=new TestClassLoader(getClass().getClassLoader());Thread.currentThread().setContextClassLoader(cl);callExampleMessageMethodAndAssertSuccess();}"
"org.apache.commons.jxpath.util.ClassLoaderUtilTest.testClassLoadSuccessWithoutContextClassLoader",0,"/** * Tests that JXPath can dynamically load a class,which is visible to its class loader,when there is no context class loader set.*/public void testClassLoadSuccessWithoutContextClassLoader(){Thread.currentThread().setContextClassLoader(null);callExampleMessageMethodAndAssertSuccess();}"
