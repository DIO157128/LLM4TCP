test_case,faulty,test_code
"org.apache.commons.compress.archivers.ArTestCase.testArArchiveCreation",0,"public void testArArchiveCreation()throws Exception {final File output=new File(dir,""bla.ar"");final File file1=getFile(""test1.xml"");final File file2=getFile(""test2.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""ar"",out);os.putArchiveEntry(new ArArchiveEntry(""test1.xml"",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry(""test2.xml"",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}"
"org.apache.commons.compress.archivers.ArTestCase.testArUnarchive",0,"public void testArUnarchive()throws Exception {final File output=new File(dir,""bla.ar"");{final File file1=getFile(""test1.xml"");final File file2=getFile(""test2.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""ar"",out);os.putArchiveEntry(new ArArchiveEntry(""test1.xml"",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ArArchiveEntry(""test2.xml"",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""ar"",is);final ArArchiveEntry entry=(ArArchiveEntry)in.getNextEntry();File target=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(target);IOUtils.copy(in,out);out.close();in.close();}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteDir",0,"/** * Tries to delete the folder ""bla"" from a zip file. This should result in the deletion of bla/*,which actually means bla/test4.xml should be removed from this zipfile. The file something/bla (without ending,named like the folder)should not be deleted.* @throws Exception*/public void testDeleteDir()throws Exception {File input=this.createArchive(""zip"");ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile(""test"","".zip"");try {final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete(""bla"");changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""testdata/test1.xml"");expected.add(""testdata/test2.xml"");expected.add(""test/test3.xml"");expected.add(""test.txt"");expected.add(""something/bla"");expected.add(""test with spaces.txt"");this.checkArchiveContent(result,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFile",0,"/** * Tries to delete the file ""bla/test5.xml"" from a zip file. This should result in the deletion of ""bla/test5.xml"".* @throws Exception*/public void testDeleteFile()throws Exception {File input=this.createArchive(""zip"");ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile(""test"","".zip"");try {final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete(""bla/test5.xml"");changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""testdata/test1.xml"");expected.add(""testdata/test2.xml"");expected.add(""test/test3.xml"");expected.add(""test.txt"");expected.add(""something/bla"");expected.add(""test with spaces.txt"");expected.add(""bla/test4.xml"");expected.add(""bla/blubber/test6.xml"");this.checkArchiveContent(result,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeletePlusAdd",0,"/** * Tries to delete a directory with a file and adds a new directory with a new file and with the same name. Should delete dir1/* and add dir1/test.txt at the end* @throws Exception*/public void testDeletePlusAdd()throws Exception {File input=this.createArchive(""zip"");ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile(""test"","".zip"");try {final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete(""bla"");final File file1=getFile(""test.txt"");ArchiveEntry entry=new ZipArchiveEntry(""bla/test.txt"");changes.add(entry,new FileInputStream(file1));changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""testdata/test1.xml"");expected.add(""testdata/test2.xml"");expected.add(""test/test3.xml"");expected.add(""test.txt"");expected.add(""something/bla"");expected.add(""bla/test.txt"");expected.add(""test with spaces.txt"");this.checkArchiveContent(result,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToZip",0,"/** * Adds a file to a zip archive. Deletes an other file.* @throws Exception*/public void testDeleteFromAndAddToZip()throws Exception {File input=this.createArchive(""zip"");ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile(""test"","".zip"");try {final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile(""test.txt"");ArchiveEntry entry=new ZipArchiveEntry(""blub/test.txt"");changes.add(entry,new FileInputStream(file1));changes.delete(""testdata/test1.xml"");changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""testdata/test2.xml"");expected.add(""test/test3.xml"");expected.add(""blub/test.txt"");expected.add(""bla/test5.xml"");expected.add(""bla/blubber/test6.xml"");expected.add(""test.txt"");expected.add(""something/bla"");expected.add(""bla/test4.xml"");expected.add(""test with spaces.txt"");this.checkArchiveContent(result,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testAddDeleteAdd",0,"/** * add blub/test.txt + delete blub Should add dir1/test.txt and delete it afterwards. In this example,the zip archive should stay untouched.* @throws Exception*/public void testAddDeleteAdd()throws Exception {File input=this.createArchive(""zip"");ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile(""test"","".zip"");try {final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(result));ChangeSet changes=new ChangeSet();final File file1=getFile(""test.txt"");ArchiveEntry entry=new ZipArchiveEntry(""blub/test.txt"");changes.add(entry,new FileInputStream(file1));changes.delete(""blub"");changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""testdata/test1.xml"");expected.add(""testdata/test2.xml"");expected.add(""test/test3.xml"");expected.add(""test.txt"");expected.add(""bla/test5.xml"");expected.add(""bla/blubber/test6.xml"");expected.add(""something/bla"");expected.add(""bla/test4.xml"");expected.add(""test with spaces.txt"");this.checkArchiveContent(result,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteAddDelete",0,"/** * delete bla + add bla/test.txt + delete bla Deletes dir1/* first,then surpresses the add of bla.txt cause there is a delete operation later.* @throws Exception*/public void testDeleteAddDelete()throws Exception {File input=this.createArchive(""zip"");ArchiveOutputStream out=null;ArchiveInputStream ais=null;File result=File.createTempFile(""test"","".zip"");try {final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(result));ChangeSet changes=new ChangeSet();changes.delete(""bla"");final File file1=getFile(""test.txt"");ArchiveEntry entry=new ZipArchiveEntry(""bla/test.txt"");changes.add(entry,new FileInputStream(file1));changes.delete(""bla"");changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""testdata/test1.xml"");expected.add(""testdata/test2.xml"");expected.add(""test/test3.xml"");expected.add(""test.txt"");expected.add(""something/bla"");expected.add(""test with spaces.txt"");this.checkArchiveContent(result,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromZip",0,"/** * Simple Delete from a zip file.* @throws Exception*/public void testDeleteFromZip()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete(""test2.xml"");final File input=getFile(""bla.zip"");final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);temp=File.createTempFile(""test"","".zip"");out=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",new FileOutputStream(temp));changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""test1.xml"");this.checkArchiveContent(temp,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromTar",0,"/** * Simple delete from a tar file* @throws Exception*/public void testDeleteFromTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete(""test2.xml"");final File input=getFile(""bla.tar"");final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""tar"",is);temp=new File(dir,""bla.tar"");out=new ArchiveStreamFactory().createArchiveOutputStream(""tar"",new FileOutputStream(temp));changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""test1.xml"");this.checkArchiveContent(temp,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromJar",0,"/** * Simple delete from a jar file* @throws Exception*/public void testDeleteFromJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete(""test2.xml"");changes.delete(""META-INF"");changes.delete("".classpath"");changes.delete("".project"");final File input=getFile(""bla.jar"");final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""jar"",is);temp=new File(dir,""bla.jar"");out=new ArchiveStreamFactory().createArchiveOutputStream(""jar"",new FileOutputStream(temp));changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""test1.xml"");this.checkArchiveContent(temp,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToTar",0,"public void testDeleteFromAndAddToTar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete(""test2.xml"");final File file1=getFile(""test.txt"");final TarArchiveEntry entry=new TarArchiveEntry(""testdata/test.txt"");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName(""avalon"");entry.setGroupName(""excalibur"");entry.setMode(0100000);changes.add(entry,new FileInputStream(file1));final File input=getFile(""bla.tar"");final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""tar"",is);temp=new File(dir,""bla.tar"");out=new ArchiveStreamFactory().createArchiveOutputStream(""tar"",new FileOutputStream(temp));changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""test1.xml"");expected.add(""testdata/test.txt"");final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""tar"",new FileInputStream(temp));this.checkArchiveContent(in,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testDeleteFromAndAddToJar",0,"/** * Delete from a jar file and add another file* @throws Exception*/public void testDeleteFromAndAddToJar()throws Exception {ArchiveOutputStream out=null;ArchiveInputStream ais=null;File temp=null;try {ChangeSet changes=new ChangeSet();changes.delete(""test2.xml"");changes.delete(""META-INF"");changes.delete("".classpath"");changes.delete("".project"");final File file1=getFile(""test.txt"");JarArchiveEntry entry=new JarArchiveEntry(""testdata/test.txt"");changes.add(entry,new FileInputStream(file1));final File input=getFile(""bla.jar"");final InputStream is=new FileInputStream(input);ais=new ArchiveStreamFactory().createArchiveInputStream(""jar"",is);temp=new File(dir,""bla.jar"");out=new ArchiveStreamFactory().createArchiveOutputStream(""jar"",new FileOutputStream(temp));changes.perform(ais,out);}finally {if (out != null)out.close();if (ais != null)ais.close();}List expected=new ArrayList();expected.add(""test1.xml"");expected.add(""testdata/test.txt"");this.checkArchiveContent(temp,expected);}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testRenameAndDelete",0,"/** * TODO: Move operations are not supported currently mv dir1/test.text dir2/test.txt + delete dir1 Moves the file to dir2 and deletes everything in dir1* @throws Exception*/public void testRenameAndDelete()throws Exception {}"
"org.apache.commons.compress.changes.ChangeSetTestCase.testAddMoveDelete",0,"/** * TODO: Move operations are not supported currently add dir1/bla.txt + mv dir1/test.text dir2/test.txt + delete dir1 Add dir1/bla.txt should be surpressed. All other dir1 files will be deleted,except dir1/test.text will be moved* @throws Exception*/public void testAddMoveDelete()throws Exception {}"
"org.apache.commons.compress.compressors.GZipTestCase.testGzipCreation",0,"public void testGzipCreation()throws Exception {final File input=getFile(""test1.xml"");final File output=new File(dir,""test1.xml.gz"");final OutputStream out=new FileOutputStream(output);final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream(""gz"",out);IOUtils.copy(new FileInputStream(input),cos);cos.close();}"
"org.apache.commons.compress.compressors.GZipTestCase.testGzipUnarchive",0,"public void testGzipUnarchive()throws Exception {final File input=getFile(""bla.tgz"");final File output=new File(dir,""bla.tar"");final InputStream is=new FileInputStream(input);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream(""gz"",is);IOUtils.copy(in,new FileOutputStream(output));in.close();}"
"org.apache.commons.compress.DetectCompressorTestCase.testDetection",0,"public void testDetection()throws Exception {}"
"org.apache.commons.compress.archivers.JarTestCase.testJarArchiveCreation",0,"public void testJarArchiveCreation()throws Exception {final File output=new File(dir,""bla.jar"");final File file1=getFile(""test1.xml"");final File file2=getFile(""test2.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""jar"",out);os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}"
"org.apache.commons.compress.archivers.JarTestCase.testJarUnarchive",0,"public void testJarUnarchive()throws Exception {final File input=getFile(""bla.jar"");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""jar"",is);ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();File o=new File(dir,entry.getName());o.getParentFile().mkdirs();OutputStream out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();entry=(ZipArchiveEntry)in.getNextEntry();o=new File(dir,entry.getName());o.getParentFile().mkdirs();out=new FileOutputStream(o);IOUtils.copy(in,out);out.close();in.close();}"
"org.apache.commons.compress.archivers.JarTestCase.testJarUnarchiveAll",0,"public void testJarUnarchiveAll()throws Exception {final File input=getFile(""bla.jar"");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""jar"",is);ArchiveEntry entry=in.getNextEntry();while (entry != null){File archiveEntry=new File(dir,entry.getName());archiveEntry.getParentFile().mkdirs();if (entry.isDirectory()){archiveEntry.mkdir();entry=in.getNextEntry();continue;}OutputStream out=new FileOutputStream(archiveEntry);IOUtils.copy(in,out);out.close();entry=in.getNextEntry();}in.close();}"
"org.apache.commons.compress.archivers.jar.JarArchiveOutputStreamTest.testJarMarker",0,"public void testJarMarker()throws IOException {File testArchive=File.createTempFile(""jar-aostest"","".jar"");JarArchiveOutputStream out=null;ZipFile zf=null;try {out=new JarArchiveOutputStream(new FileOutputStream(testArchive));out.putArchiveEntry(new ZipArchiveEntry(""foo/""));out.closeEntry();out.putArchiveEntry(new ZipArchiveEntry(""bar/""));out.closeEntry();out.close();out=null;zf=new ZipFile(testArchive);ZipArchiveEntry ze=zf.getEntry(""foo/"");assertNotNull(ze);ZipExtraField[]fes=ze.getExtraFields();assertEquals(1,fes.length);assertTrue(fes[0]instanceof JarMarker);ze=zf.getEntry(""bar/"");assertNotNull(ze);fes=ze.getExtraFields();assertEquals(0,fes.length);}finally {if (out != null){try {out.close();}catch(IOException e){}}ZipFile.closeQuietly(zf);if (testArchive.exists()){testArchive.delete();}}}"
"org.apache.commons.compress.archivers.cpio.CpioArchiveInputStreamTest.testCpioUnarchive",0,"public void testCpioUnarchive()throws Exception {StringBuffer expected=new StringBuffer();expected.append(""./test1.xml<?xml version=\""1.0\""?>\n"");expected.append(""<empty/>./test2.xml<?xml version=\""1.0\""?>\n"");expected.append(""<empty/>\n"");CpioArchiveInputStream in=new CpioArchiveInputStream(new FileInputStream(getFile(""bla.cpio"")));CpioArchiveEntry entry=null;StringBuffer result=new StringBuffer();while ((entry=(CpioArchiveEntry)in.getNextEntry())!= null){result.append(entry.getName());int tmp;while ((tmp=in.read())!= -1){result.append((char)tmp);}}in.close();assertEquals(result.toString(),expected.toString());}"
"org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testModes",0,"/** * Test file mode magic.*/public void testModes(){AsiExtraField a=new AsiExtraField();a.setMode(0123);assertEquals(""plain file"",0100123,a.getMode());a.setDirectory(true);assertEquals(""directory"",040123,a.getMode());a.setLinkedFile(""test"");assertEquals(""symbolic link"",0120123,a.getMode());}"
"org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testContent",0,"/** * Test content.*/public void testContent(){AsiExtraField a=new AsiExtraField();a.setMode(0123);a.setUserId(5);a.setGroupId(6);byte[]b=a.getLocalFileDataData();byte[]expect={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};assertEquals(""no link"",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals(""no link,byte "" + i,expect[i],b[i]);}a.setLinkedFile(""test"");expect=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};b=a.getLocalFileDataData();assertEquals(""no link"",expect.length,b.length);for (int i=0;i < expect.length;i++){assertEquals(""no link,byte "" + i,expect[i],b[i]);}}"
"org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testReparse",0,"/** * Test reparse*/public void testReparse()throws Exception {byte[]data={(byte)0xC6,0x02,0x78,(byte)0xB6,0123,(byte)0x80,0,0,0,0,5,0,6,0};AsiExtraField a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals(""length plain file"",data.length,a.getLocalFileDataLength().getValue());assertTrue(""plain file,no link"",!a.isLink());assertTrue(""plain file,no dir"",!a.isDirectory());assertEquals(""mode plain file"",FILE_FLAG | 0123,a.getMode());assertEquals(""uid plain file"",5,a.getUserId());assertEquals(""gid plain file"",6,a.getGroupId());data=new byte[]{0x75,(byte)0x8E,0x41,(byte)0xFD,0123,(byte)0xA0,4,0,0,0,5,0,6,0,(byte)'t',(byte)'e',(byte)'s',(byte)'t'};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals(""length link"",data.length,a.getLocalFileDataLength().getValue());assertTrue(""link,is link"",a.isLink());assertTrue(""link,no dir"",!a.isDirectory());assertEquals(""mode link"",LINK_FLAG | 0123,a.getMode());assertEquals(""uid link"",5,a.getUserId());assertEquals(""gid link"",6,a.getGroupId());assertEquals(""test"",a.getLinkedFile());data=new byte[]{(byte)0x8E,0x01,(byte)0xBF,(byte)0x0E,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();a.parseFromLocalFileData(data,0,data.length);assertEquals(""length dir"",data.length,a.getLocalFileDataLength().getValue());assertTrue(""dir,no link"",!a.isLink());assertTrue(""dir,is dir"",a.isDirectory());assertEquals(""mode dir"",DIR_FLAG | 0123,a.getMode());assertEquals(""uid dir"",5,a.getUserId());assertEquals(""gid dir"",6,a.getGroupId());data=new byte[]{0,0,0,0,0123,(byte)0x40,0,0,0,0,5,0,6,0};a=new AsiExtraField();try {a.parseFromLocalFileData(data,0,data.length);fail(""should raise bad CRC exception"");}catch(Exception e){assertEquals(""bad CRC checksum 0 instead of ebf018e"",e.getMessage());}}"
"org.apache.commons.compress.archivers.zip.AsiExtraFieldTest.testClone",0,"public void testClone(){AsiExtraField s1=new AsiExtraField();s1.setUserId(42);s1.setGroupId(12);s1.setLinkedFile(""foo"");s1.setMode(0644);s1.setDirectory(true);AsiExtraField s2=(AsiExtraField)s1.clone();assertNotSame(s1,s2);assertEquals(s1.getUserId(),s2.getUserId());assertEquals(s1.getGroupId(),s2.getGroupId());assertEquals(s1.getLinkedFile(),s2.getLinkedFile());assertEquals(s1.getMode(),s2.getMode());assertEquals(s1.isDirectory(),s2.isDirectory());}"
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFields",0,"/** * test handling of extra fields*/public void testExtraFields(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(new ZipShort(1));u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry(""test/"");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]data1=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals(""first pass"",2,result.length);assertSame(a,result[0]);assertSame(u,result[1]);UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(new ZipShort(1));u2.setLocalFileDataData(new byte[]{1});ze.addExtraField(u2);byte[]data2=ze.getExtra();result=ze.getExtraFields();assertEquals(""second pass"",2,result.length);assertSame(a,result[0]);assertSame(u2,result[1]);assertEquals(""length second pass"",data1.length + 1,data2.length);UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addExtraField(u3);result=ze.getExtraFields();assertEquals(""third pass"",3,result.length);ze.removeExtraField(new ZipShort(1));byte[]data3=ze.getExtra();result=ze.getExtraFields();assertEquals(""fourth pass"",2,result.length);assertSame(a,result[0]);assertSame(u3,result[1]);assertEquals(""length fourth pass"",data2.length,data3.length);try {ze.removeExtraField(new ZipShort(1));fail(""should be no such element"");}catch(java.util.NoSuchElementException nse){}}"
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testExtraFieldMerging",0,"/** * test handling of extra fields via central directory*/public void testExtraFieldMerging(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(new ZipShort(1));u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry(""test/"");ze.setExtraFields(new ZipExtraField[]{a,u});ze.setCentralDirectoryExtra(new byte[]{1,0,1,0,127});ZipExtraField[]result=ze.getExtraFields();assertEquals(""first pass"",2,result.length);assertSame(a,result[0]);assertEquals(new ZipShort(1),result[1].getHeaderId());assertEquals(new ZipShort(0),result[1].getLocalFileDataLength());assertEquals(new ZipShort(1),result[1].getCentralDirectoryLength());ze.setCentralDirectoryExtra(new byte[]{2,0,0,0});result=ze.getExtraFields();assertEquals(""second pass"",3,result.length);ze.setExtra(new byte[]{2,0,1,0,127});result=ze.getExtraFields();assertEquals(""third pass"",3,result.length);assertSame(a,result[0]);assertEquals(new ZipShort(2),result[2].getHeaderId());assertEquals(new ZipShort(1),result[2].getLocalFileDataLength());assertEquals(new ZipShort(0),result[2].getCentralDirectoryLength());}"
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testAddAsFirstExtraField",0,"/** * test handling of extra fields*/public void testAddAsFirstExtraField(){AsiExtraField a=new AsiExtraField();a.setDirectory(true);a.setMode(0755);UnrecognizedExtraField u=new UnrecognizedExtraField();u.setHeaderId(new ZipShort(1));u.setLocalFileDataData(new byte[0]);ZipArchiveEntry ze=new ZipArchiveEntry(""test/"");ze.setExtraFields(new ZipExtraField[]{a,u});byte[]data1=ze.getExtra();UnrecognizedExtraField u2=new UnrecognizedExtraField();u2.setHeaderId(new ZipShort(1));u2.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u2);byte[]data2=ze.getExtra();ZipExtraField[]result=ze.getExtraFields();assertEquals(""second pass"",2,result.length);assertSame(u2,result[0]);assertSame(a,result[1]);assertEquals(""length second pass"",data1.length + 1,data2.length);UnrecognizedExtraField u3=new UnrecognizedExtraField();u3.setHeaderId(new ZipShort(2));u3.setLocalFileDataData(new byte[]{1});ze.addAsFirstExtraField(u3);result=ze.getExtraFields();assertEquals(""third pass"",3,result.length);assertSame(u3,result[0]);assertSame(u2,result[1]);assertSame(a,result[2]);}"
"org.apache.commons.compress.archivers.zip.ZipArchiveEntryTest.testUnixMode",0,"public void testUnixMode(){ZipArchiveEntry ze=new ZipArchiveEntry(""foo"");assertEquals(0,ze.getPlatform());ze.setUnixMode(0755);assertEquals(3,ze.getPlatform());assertEquals(0755,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0444);assertEquals(3,ze.getPlatform());assertEquals(0444,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(1,ze.getExternalAttributes()& 0xFFFF);ze=new ZipArchiveEntry(""foo/"");assertEquals(0,ze.getPlatform());ze.setUnixMode(0777);assertEquals(3,ze.getPlatform());assertEquals(0777,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x10,ze.getExternalAttributes()& 0xFFFF);ze.setUnixMode(0577);assertEquals(3,ze.getPlatform());assertEquals(0577,(ze.getExternalAttributes()>> 16)& 0xFFFF);assertEquals(0x11,ze.getExternalAttributes()& 0xFFFF);}"
"org.apache.commons.compress.archivers.CpioTestCase.testCpioArchiveCreation",0,"public void testCpioArchiveCreation()throws Exception {final File output=new File(dir,""bla.cpio"");final File file1=getFile(""test1.xml"");final File file2=getFile(""test2.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""cpio"",out);os.putArchiveEntry(new CpioArchiveEntry(""test1.xml"",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new CpioArchiveEntry(""test2.xml"",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}"
"org.apache.commons.compress.archivers.CpioTestCase.testCpioUnarchive",1,"public void testCpioUnarchive()throws Exception {final File output=new File(dir,""bla.cpio"");{final File file1=getFile(""test1.xml"");final File file2=getFile(""test2.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""cpio"",out);os.putArchiveEntry(new CpioArchiveEntry(""test1.xml"",file1.length()));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new CpioArchiveEntry(""test2.xml"",file2.length()));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();out.close();}final File input=output;final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""cpio"",is);Map result=new HashMap();ArchiveEntry entry=null;while ((entry=in.getNextEntry())!= null){File target=new File(dir,entry.getName());final OutputStream out=new FileOutputStream(target);IOUtils.copy(in,out);out.close();result.put(entry.getName(),target);}in.close();int lineSepLength=System.getProperty(""line.separator"").length();File t=(File)result.get(""test1.xml"");assertTrue(""Expected "" + t.getAbsolutePath()+ "" to exist"",t.exists());assertEquals(""length of "" + t.getAbsolutePath(),72 + 4 * lineSepLength,t.length());t=(File)result.get(""test2.xml"");assertTrue(""Expected "" + t.getAbsolutePath()+ "" to exist"",t.exists());assertEquals(""length of "" + t.getAbsolutePath(),73 + 5 * lineSepLength,t.length());}"
"org.apache.commons.compress.archivers.zip.ZipShortTest.testToBytes",0,"/** * Test conversion to bytes.*/public void testToBytes(){ZipShort zs=new ZipShort(0x1234);byte[]result=zs.getBytes();assertEquals(""length getBytes"",2,result.length);assertEquals(""first byte getBytes"",0x34,result[0]);assertEquals(""second byte getBytes"",0x12,result[1]);}"
"org.apache.commons.compress.archivers.zip.ZipShortTest.testFromBytes",0,"/** * Test conversion from bytes.*/public void testFromBytes(){byte[]val=new byte[]{0x34,0x12};ZipShort zs=new ZipShort(val);assertEquals(""value from bytes"",0x1234,zs.getValue());}"
"org.apache.commons.compress.archivers.zip.ZipShortTest.testEquals",0,"/** * Test the contract of the equals method.*/public void testEquals(){ZipShort zs=new ZipShort(0x1234);ZipShort zs2=new ZipShort(0x1234);ZipShort zs3=new ZipShort(0x5678);assertTrue(""reflexive"",zs.equals(zs));assertTrue(""works"",zs.equals(zs2));assertTrue(""works,part two"",!zs.equals(zs3));assertTrue(""symmetric"",zs2.equals(zs));assertTrue(""null handling"",!zs.equals(null));assertTrue(""non ZipShort handling"",!zs.equals(new Integer(0x1234)));}"
"org.apache.commons.compress.archivers.zip.ZipShortTest.testSign",0,"/** * Test sign handling.*/public void testSign(){ZipShort zs=new ZipShort(new byte[]{(byte)0xFF,(byte)0xFF});assertEquals(0x0000FFFF,zs.getValue());}"
"org.apache.commons.compress.archivers.zip.ZipShortTest.testClone",0,"public void testClone(){ZipShort s1=new ZipShort(42);ZipShort s2=(ZipShort)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}"
"org.apache.commons.compress.archivers.zip.ZipUtilTest.testZipLong",0,"public void testZipLong()throws Exception {ZipLong test=ZipUtil.toDosTime(time);assertEquals(test.getValue(),zl.getValue());}"
"org.apache.commons.compress.archivers.zip.ZipUtilTest.testAdjustToLong",0,"public void testAdjustToLong(){assertEquals(Integer.MAX_VALUE,ZipUtil.adjustToLong(Integer.MAX_VALUE));assertEquals(((long)Integer.MAX_VALUE)+ 1,ZipUtil.adjustToLong(Integer.MAX_VALUE + 1));assertEquals(2 * ((long)Integer.MAX_VALUE),ZipUtil.adjustToLong(2 * Integer.MAX_VALUE));}"
"org.apache.commons.compress.archivers.zip.ZipLongTest.testToBytes",0,"/** * Test conversion to bytes.*/public void testToBytes(){ZipLong zl=new ZipLong(0x12345678);byte[]result=zl.getBytes();assertEquals(""length getBytes"",4,result.length);assertEquals(""first byte getBytes"",0x78,result[0]);assertEquals(""second byte getBytes"",0x56,result[1]);assertEquals(""third byte getBytes"",0x34,result[2]);assertEquals(""fourth byte getBytes"",0x12,result[3]);}"
"org.apache.commons.compress.archivers.zip.ZipLongTest.testFromBytes",0,"/** * Test conversion from bytes.*/public void testFromBytes(){byte[]val=new byte[]{0x78,0x56,0x34,0x12};ZipLong zl=new ZipLong(val);assertEquals(""value from bytes"",0x12345678,zl.getValue());}"
"org.apache.commons.compress.archivers.zip.ZipLongTest.testEquals",0,"/** * Test the contract of the equals method.*/public void testEquals(){ZipLong zl=new ZipLong(0x12345678);ZipLong zl2=new ZipLong(0x12345678);ZipLong zl3=new ZipLong(0x87654321);assertTrue(""reflexive"",zl.equals(zl));assertTrue(""works"",zl.equals(zl2));assertTrue(""works,part two"",!zl.equals(zl3));assertTrue(""symmetric"",zl2.equals(zl));assertTrue(""null handling"",!zl.equals(null));assertTrue(""non ZipLong handling"",!zl.equals(new Integer(0x1234)));}"
"org.apache.commons.compress.archivers.zip.ZipLongTest.testSign",0,"/** * Test sign handling.*/public void testSign(){ZipLong zl=new ZipLong(new byte[]{(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF});assertEquals(0x00000000FFFFFFFFl,zl.getValue());}"
"org.apache.commons.compress.archivers.zip.ZipLongTest.testClone",0,"public void testClone(){ZipLong s1=new ZipLong(42);ZipLong s2=(ZipLong)s1.clone();assertNotSame(s1,s2);assertEquals(s1,s2);assertEquals(s1.getValue(),s2.getValue());}"
"org.apache.commons.compress.compressors.BZip2TestCase.testBzipCreation",0,"public void testBzipCreation()throws Exception {final File input=getFile(""test.txt"");final File output=new File(dir,""test.txt.bz2"");final OutputStream out=new FileOutputStream(output);final CompressorOutputStream cos=new CompressorStreamFactory().createCompressorOutputStream(""bzip2"",out);IOUtils.copy(new FileInputStream(input),cos);cos.close();}"
"org.apache.commons.compress.compressors.BZip2TestCase.testBzip2Unarchive",0,"public void testBzip2Unarchive()throws Exception {final File input=getFile(""bla.txt.bz2"");final File output=new File(dir,""bla.txt"");final InputStream is=new FileInputStream(input);final CompressorInputStream in=new CompressorStreamFactory().createCompressorInputStream(""bzip2"",is);IOUtils.copy(in,new FileOutputStream(output));in.close();}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripExplicitUnicodeExtra",0,"public void testUtf8FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,true,true);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSExplicitUnicodeExtra",0,"public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,false,true);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripExplicitUnicodeExtra",0,"public void testCP437FileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,true);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripExplicitUnicodeExtra",0,"public void testASCIIFileRoundtripExplicitUnicodeExtra()throws IOException {testFileRoundtrip(US_ASCII,false,true);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripImplicitUnicodeExtra",0,"public void testUtf8FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,true,false);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8FileRoundtripNoEFSImplicitUnicodeExtra",0,"public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()throws IOException {testFileRoundtrip(UTF_8,false,false);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testCP437FileRoundtripImplicitUnicodeExtra",0,"public void testCP437FileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(CP437,false,false);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testASCIIFileRoundtripImplicitUnicodeExtra",0,"public void testASCIIFileRoundtripImplicitUnicodeExtra()throws IOException {testFileRoundtrip(US_ASCII,false,false);}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testRead7ZipArchive",0,"public void testRead7ZipArchive()throws IOException,URISyntaxException {URL zip=getClass().getResource(""/utf8-7zip-test.zip"");File archive=new File(new URI(zip.toString()));ZipFile zf=null;try {zf=new ZipFile(archive,CP437,false);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);}}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testReadWinZipArchive",0,"public void testReadWinZipArchive()throws IOException,URISyntaxException {URL zip=getClass().getResource(""/utf8-winzip-test.zip"");File archive=new File(new URI(zip.toString()));ZipFile zf=null;try {zf=new ZipFile(archive,null,true);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);}}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testZipFileReadsUnicodeFields",0,"public void testZipFileReadsUnicodeFields()throws IOException {File file=File.createTempFile(""unicode-test"","".zip"");ZipFile zf=null;try {createTestFile(file,US_ASCII,false,true);zf=new ZipFile(file,US_ASCII,true);assertNotNull(zf.getEntry(ASCII_TXT));assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));assertNotNull(zf.getEntry(OIL_BARREL_TXT));}finally {ZipFile.closeQuietly(zf);if (file.exists()){file.delete();}}}"
"org.apache.commons.compress.archivers.zip.UTF8ZipFilesTest.testUtf8Interoperability",0,"public void testUtf8Interoperability()throws IOException {File file1=super.getFile(""utf8-7zip-test.zip"");File file2=super.getFile(""utf8-winzip-test.zip"");testFile(file1,CP437);testFile(file2,CP437);}"
"org.apache.commons.compress.archivers.TarTestCase.testTarArchiveCreation",0,"public void testTarArchiveCreation()throws Exception {final File output=new File(dir,""bla.tar"");final File file1=getFile(""test1.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""tar"",out);final TarArchiveEntry entry=new TarArchiveEntry(""testdata/test1.xml"");entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName(""avalon"");entry.setGroupName(""excalibur"");entry.setMode(0100000);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.close();}"
"org.apache.commons.compress.archivers.TarTestCase.testTarArchiveLongNameCreation",0,"public void testTarArchiveLongNameCreation()throws Exception {String name=""testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml"";byte[]bytes=name.getBytes();assertEquals(bytes.length,99);final File output=new File(dir,""bla.tar"");final File file1=getFile(""test1.xml"");final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""tar"",out);final TarArchiveEntry entry=new TarArchiveEntry(name);entry.setModTime(0);entry.setSize(file1.length());entry.setUserId(0);entry.setGroupId(0);entry.setUserName(""avalon"");entry.setGroupName(""excalibur"");entry.setMode(0100000);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.close();ArchiveOutputStream os2=null;try {String toLongName=""testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml"";final File output2=new File(dir,""bla.tar"");final OutputStream out2=new FileOutputStream(output2);os2=new ArchiveStreamFactory().createArchiveOutputStream(""tar"",out2);final TarArchiveEntry entry2=new TarArchiveEntry(toLongName);entry2.setModTime(0);entry2.setSize(file1.length());entry2.setUserId(0);entry2.setGroupId(0);entry2.setUserName(""avalon"");entry2.setGroupName(""excalibur"");entry2.setMode(0100000);os.putArchiveEntry(entry);IOUtils.copy(new FileInputStream(file1),os2);}catch(IOException e){assertTrue(true);}finally {if (os2 != null){os2.closeArchiveEntry();}}}"
"org.apache.commons.compress.archivers.TarTestCase.testTarUnarchive",0,"public void testTarUnarchive()throws Exception {final File input=getFile(""bla.tar"");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""tar"",is);final TarArchiveEntry entry=(TarArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);out.close();in.close();}"
"org.apache.commons.compress.archivers.zip.TestZipEncodings.testSimpleCp437Encoding",0,"public void testSimpleCp437Encoding()throws IOException {doSimpleEncodingTest(""Cp437"",null);}"
"org.apache.commons.compress.archivers.zip.TestZipEncodings.testSimpleCp850Encoding",0,"public void testSimpleCp850Encoding()throws IOException {doSimpleEncodingTest(""Cp850"",null);}"
"org.apache.commons.compress.archivers.zip.TestZipEncodings.testNioCp1252Encoding",0,"public void testNioCp1252Encoding()throws IOException {byte[]b=new byte[]{0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C,0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C,0x3D,0x3E,0x3F,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C,0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5A,0x5B,0x5C,0x5D,0x5E,0x5F,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A,0x7B,0x7C,0x7D,0x7E,0x7F,(byte)0x80,(byte)0x82,(byte)0x83,(byte)0x84,(byte)0x85,(byte)0x86,(byte)0x87,(byte)0x88,(byte)0x89,(byte)0x8A,(byte)0x8B,(byte)0x8C,(byte)0x8E,(byte)0x91,(byte)0x92,(byte)0x93,(byte)0x94,(byte)0x95,(byte)0x96,(byte)0x97,(byte)0x98,(byte)0x99,(byte)0x9A,(byte)0x9B,(byte)0x9C,(byte)0x9E,(byte)0x9F,(byte)0xA0,(byte)0xA1,(byte)0xA2,(byte)0xA3,(byte)0xA4,(byte)0xA5,(byte)0xA6,(byte)0xA7,(byte)0xA8,(byte)0xA9,(byte)0xAA,(byte)0xAB,(byte)0xAC,(byte)0xAD,(byte)0xAE,(byte)0xAF,(byte)0xB0,(byte)0xB1,(byte)0xB2,(byte)0xB3,(byte)0xB4,(byte)0xB5,(byte)0xB6,(byte)0xB7,(byte)0xB8,(byte)0xB9,(byte)0xBA,(byte)0xBB,(byte)0xBC,(byte)0xBD,(byte)0xBE,(byte)0xBF,(byte)0xC0,(byte)0xC1,(byte)0xC2,(byte)0xC3,(byte)0xC4,(byte)0xC5,(byte)0xC6,(byte)0xC7,(byte)0xC8,(byte)0xC9,(byte)0xCA,(byte)0xCB,(byte)0xCC,(byte)0xCD,(byte)0xCE,(byte)0xCF,(byte)0xD0,(byte)0xD1,(byte)0xD2,(byte)0xD3,(byte)0xD4,(byte)0xD5,(byte)0xD6,(byte)0xD7,(byte)0xD8,(byte)0xD9,(byte)0xDA,(byte)0xDB,(byte)0xDC,(byte)0xDD,(byte)0xDE,(byte)0xDF,(byte)0xE0,(byte)0xE1,(byte)0xE2,(byte)0xE3,(byte)0xE4,(byte)0xE5,(byte)0xE6,(byte)0xE7,(byte)0xE8,(byte)0xE9,(byte)0xEA,(byte)0xEB,(byte)0xEC,(byte)0xED,(byte)0xEE,(byte)0xEF,(byte)0xF0,(byte)0xF1,(byte)0xF2,(byte)0xF3,(byte)0xF4,(byte)0xF5,(byte)0xF6,(byte)0xF7,(byte)0xF8,(byte)0xF9,(byte)0xFA,(byte)0xFB,(byte)0xFC,(byte)0xFD,(byte)0xFE,(byte)0xFF};doSimpleEncodingTest(""Cp1252"",b);}"
"org.apache.commons.compress.archivers.ZipTestCase.testZipArchiveCreation",0,"/** * Archives 2 files and unarchives it again. If the file length of result and source is the same,it looks like the operations have worked* @throws Exception*/public void testZipArchiveCreation()throws Exception {final File output=new File(dir,""bla.zip"");final File file1=getFile(""test1.xml"");final File file2=getFile(""test2.xml"");{final OutputStream out=new FileOutputStream(output);final ArchiveOutputStream os=new ArchiveStreamFactory().createArchiveOutputStream(""zip"",out);os.putArchiveEntry(new ZipArchiveEntry(""testdata/test1.xml""));IOUtils.copy(new FileInputStream(file1),os);os.closeArchiveEntry();os.putArchiveEntry(new ZipArchiveEntry(""testdata/test2.xml""));IOUtils.copy(new FileInputStream(file2),os);os.closeArchiveEntry();os.close();}List results=new ArrayList();{final InputStream is=new FileInputStream(output);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);File result=File.createTempFile(""dir-result"","""");result.delete();result.mkdir();ZipArchiveEntry entry=null;while ((entry=(ZipArchiveEntry)in.getNextEntry())!= null){File outfile=new File(result.getCanonicalPath()+ ""/result/"" + entry.getName());outfile.getParentFile().mkdirs();OutputStream out=new FileOutputStream(outfile);IOUtils.copy(in,out);out.close();results.add(outfile);}in.close();}assertEquals(results.size(),2);File result=(File)results.get(0);assertEquals(file1.length(),result.length());result=(File)results.get(1);assertEquals(file2.length(),result.length());}"
"org.apache.commons.compress.archivers.ZipTestCase.testZipUnarchive",0,"/** * Simple unarchive test. Asserts nothing.* @throws Exception*/public void testZipUnarchive()throws Exception {final File input=getFile(""bla.zip"");final InputStream is=new FileInputStream(input);final ArchiveInputStream in=new ArchiveStreamFactory().createArchiveInputStream(""zip"",is);final ZipArchiveEntry entry=(ZipArchiveEntry)in.getNextEntry();final OutputStream out=new FileOutputStream(new File(dir,entry.getName()));IOUtils.copy(in,out);out.close();in.close();}"
"org.apache.commons.compress.DetectArchiverTestCase.testDetection",0,"public void testDetection()throws Exception {final ArchiveStreamFactory factory=new ArchiveStreamFactory();final ArchiveInputStream ar=factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(""bla.ar"").getFile()))));assertNotNull(ar);assertTrue(ar instanceof ArArchiveInputStream);final ArchiveInputStream tar=factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(""bla.tar"").getFile()))));assertNotNull(tar);assertTrue(tar instanceof TarArchiveInputStream);final ArchiveInputStream zip=factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(""bla.zip"").getFile()))));assertNotNull(zip);assertTrue(zip instanceof ZipArchiveInputStream);final ArchiveInputStream jar=factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(""bla.jar"").getFile()))));assertNotNull(jar);assertTrue(jar instanceof ZipArchiveInputStream);final ArchiveInputStream cpio=factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(new File(getClass().getClassLoader().getResource(""bla.cpio"").getFile()))));assertNotNull(cpio);assertTrue(cpio instanceof CpioArchiveInputStream);}"
"org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testParse",0,"/** * test parser.*/public void testParse()throws Exception {ZipExtraField[]ze=ExtraFieldUtils.parse(data);assertEquals(""number of fields"",2,ze.length);assertTrue(""type field 1"",ze[0]instanceof AsiExtraField);assertEquals(""mode field 1"",040755,((AsiExtraField)ze[0]).getMode());assertTrue(""type field 2"",ze[1]instanceof UnrecognizedExtraField);assertEquals(""data length field 2"",1,ze[1].getLocalFileDataLength().getValue());byte[]data2=new byte[data.length - 1];System.arraycopy(data,0,data2,0,data2.length);try {ExtraFieldUtils.parse(data2);fail(""data should be invalid"");}catch(Exception e){assertEquals(""message"",""data starting at "" + (4 + aLocal.length)+ "" is in unknown format"",e.getMessage());}}"
"org.apache.commons.compress.archivers.zip.ExtraFieldUtilsTest.testMerge",0,"/** * Test merge methods*/public void testMerge(){byte[]local=ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[]{a,dummy});assertEquals(""local length"",data.length,local.length);for (int i=0;i < local.length;i++){assertEquals(""local byte "" + i,data[i],local[i]);}byte[]dummyCentral=dummy.getCentralDirectoryData();byte[]data2=new byte[4 + aLocal.length + 4+ dummyCentral.length];System.arraycopy(data,0,data2,0,4 + aLocal.length + 2);System.arraycopy(dummy.getCentralDirectoryLength().getBytes(),0,data2,4 + aLocal.length + 2,2);System.arraycopy(dummyCentral,0,data2,4 + aLocal.length + 4,dummyCentral.length);byte[]central=ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[]{a,dummy});assertEquals(""central length"",data2.length,central.length);for (int i=0;i < central.length;i++){assertEquals(""central byte "" + i,data2[i],central[i]);}}"
"org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testFileSystemRoot",0,"/** * JIRA issue SANDBOX-284* @see ""https://issues.apache.org/jira/browse/SANDBOX-284""*/public void testFileSystemRoot(){TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));assertEquals(""/"",t.getName());}"
"org.apache.commons.compress.archivers.tar.TarArchiveEntryTest.testTarFileWithFSRoot",0,"public void testTarFileWithFSRoot()throws IOException {File f=File.createTempFile(""taetest"","".tar"");f.deleteOnExit();TarArchiveOutputStream tout=null;TarArchiveInputStream tin=null;try {tout=new TarArchiveOutputStream(new FileOutputStream(f));TarArchiveEntry t=new TarArchiveEntry(new File(ROOT));tout.putNextEntry(t);tout.closeEntry();t=new TarArchiveEntry(new File(new File(ROOT),""foo.txt""));t.setSize(6);tout.putNextEntry(t);tout.write(new byte[]{'h','e','l','l','o',' '});tout.closeEntry();t=new TarArchiveEntry(new File(new File(ROOT),""bar.txt"").getAbsolutePath());t.setSize(5);tout.putNextEntry(t);tout.write(new byte[]{'w','o','r','l','d'});tout.closeEntry();t=new TarArchiveEntry(""dummy"");t.setName(new File(new File(ROOT),""baz.txt"").getAbsolutePath());t.setSize(1);tout.putNextEntry(t);tout.write(new byte[]{'!'});tout.closeEntry();tout.close();tout=null;tin=new TarArchiveInputStream(new FileInputStream(f));t=tin.getNextTarEntry();assertNotNull(t);assertEquals(""/"",t.getName());t=tin.getNextTarEntry();assertNotNull(t);assertEquals(""foo.txt"",t.getName());t=tin.getNextTarEntry();assertNotNull(t);assertEquals(""bar.txt"",t.getName());t=tin.getNextTarEntry();assertNotNull(t);assertEquals(""baz.txt"",t.getName());}finally {if (tin != null){tin.close();}if (tout != null){tout.close();}}}"
"org.apache.commons.compress.archivers.memory.MemoryArchiveTestCase.testReading",0,"public void testReading()throws IOException {final MemoryArchiveInputStream is=new MemoryArchiveInputStream(new String[][]{{""test1"",""content1""},{""test2"",""content2""}});final ArchiveEntry entry1=is.getNextEntry();assertNotNull(entry1);assertEquals(""test1"",entry1.getName());final String content1=is.readString();assertEquals(""content1"",content1);final ArchiveEntry entry2=is.getNextEntry();assertNotNull(entry2);assertEquals(""test2"",entry2.getName());final String content2=is.readString();assertEquals(""content2"",content2);final ArchiveEntry entry3=is.getNextEntry();assertNull(entry3);}"
