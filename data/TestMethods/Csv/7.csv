test_case,faulty,test_code
"org.apache.commons.csv.CSVFileParserTest.testCSVFile",0,"@Test public void testCSVFile()throws Exception {String line=readTestData();assertNotNull(""file must contain config line"",line);final String[]split=line.split("" "");assertTrue(testName + "" require 1 param"",split.length >= 1);CSVFormat format=CSVFormat.newFormat(',').withQuoteChar('""');boolean checkComments=false;for (int i=1;i < split.length;i++){final String option=split[i];final String[]option_parts=option.split(""="",2);if (""IgnoreEmpty"".equalsIgnoreCase(option_parts[0])){format=format.withIgnoreEmptyLines(Boolean.parseBoolean(option_parts[1]));}else     if (""IgnoreSpaces"".equalsIgnoreCase(option_parts[0])){format=format.withIgnoreSurroundingSpaces(Boolean.parseBoolean(option_parts[1]));}else     if (""CommentStart"".equalsIgnoreCase(option_parts[0])){format=format.withCommentStart(option_parts[1].charAt(0));}else     if (""CheckComments"".equalsIgnoreCase(option_parts[0])){checkComments=true;}else {fail(testName + "" unexpected option: "" + option);}}line=readTestData();assertEquals(testName + "" Expected format "",line,format.toString());final CSVParser parser=CSVParser.parse(new File(BASE,split[0]),format);for(final CSVRecord record : parser){String parsed=record.toString();if (checkComments){final String comment=record.getComment().replace(""\n"",""\\n"");if (comment != null){parsed+=""#"" + comment;}}final int count=record.size();assertEquals(testName,readTestData(),count + "":"" + parsed);}parser.close();}"
"org.apache.commons.csv.CSVFileParserTest.testCSVUrl",0,"@Test public void testCSVUrl(){}"
"org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted",0,"@Test public void testSurroundingSpacesAreDeleted()throws IOException {final String code=""noSpaces,leadingSpaces,trailingSpaces,surroundingSpaces,,,"";final Lexer parser=getLexer(code,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));assertThat(parser.nextToken(new Token()),matches(TOKEN,""noSpaces""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""leadingSpaces""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""trailingSpaces""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""surroundingSpaces""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));}"
"org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted",0,"@Test public void testSurroundingTabsAreDeleted()throws IOException {final String code=""noTabs,\tleadingTab,trailingTab\t,\tsurroundingTabs\t,\t\t,,"";final Lexer parser=getLexer(code,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));assertThat(parser.nextToken(new Token()),matches(TOKEN,""noTabs""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""leadingTab""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""trailingTab""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""surroundingTabs""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));}"
"org.apache.commons.csv.LexerTest.testIgnoreEmptyLines",0,"@Test public void testIgnoreEmptyLines()throws IOException {final String code=""first,line,\n"" + ""\n"" + ""\n""+ ""second,line\n""+ ""\n""+ ""\n""+ ""third line \n""+ ""\n""+ ""\n""+ ""last,line \n""+ ""\n""+ ""\n""+ ""\n"";final CSVFormat format=CSVFormat.DEFAULT.withIgnoreEmptyLines(true);final Lexer parser=getLexer(code,format);assertThat(parser.nextToken(new Token()),matches(TOKEN,""first""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""line""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""second""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""line""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""third line ""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""last""));assertThat(parser.nextToken(new Token()),matches(EORECORD,"" line ""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));}"
"org.apache.commons.csv.LexerTest.testComments",0,"@Test public void testComments()throws IOException {final String code=""first,line,\n"" + ""second,line,tokenWith#no-comment\n"" + ""# comment line \n""+ ""third,line,#no-comment\n""+ ""# penultimate comment\n""+ ""# Final comment\n"";final CSVFormat format=CSVFormat.DEFAULT.withCommentStart('#');final Lexer parser=getLexer(code,format);assertThat(parser.nextToken(new Token()),matches(TOKEN,""first""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""line""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""second""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""line""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""tokenWith#no-comment""));assertThat(parser.nextToken(new Token()),matches(COMMENT,""comment line""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""third""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""line""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""#no-comment""));assertThat(parser.nextToken(new Token()),matches(COMMENT,""penultimate comment""));assertThat(parser.nextToken(new Token()),matches(COMMENT,""Final comment""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));}"
"org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines",0,"@Test public void testCommentsAndEmptyLines()throws IOException {final String code=""1,2,3,\n"" + ""\n"" + ""\n""+ ""a,b x,c#no-comment\n""+ ""#foo\n""+ ""\n""+ ""\n""+ ""d,e,#no-comment\n""+ ""\n""+ ""\n""+ ""# penultimate comment\n""+ ""\n""+ ""\n""+ ""# Final comment\n"";final CSVFormat format=CSVFormat.DEFAULT.withCommentStart('#').withIgnoreEmptyLines(false);assertFalse(""Should not ignore empty lines"",format.getIgnoreEmptyLines());final Lexer parser=getLexer(code,format);assertThat(parser.nextToken(new Token()),matches(TOKEN,""1""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""2""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""3""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""b x""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""c#no-comment""));assertThat(parser.nextToken(new Token()),matches(COMMENT,""foo""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""d""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""e""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""#no-comment""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(COMMENT,""penultimate comment""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""""));assertThat(parser.nextToken(new Token()),matches(COMMENT,""Final comment""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));}"
"org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping",0,"@Test public void testBackslashWithoutEscaping()throws IOException {final String code=""a,\\,,b\\\n\\,,"";final CSVFormat format=CSVFormat.DEFAULT;assertFalse(format.isEscaping());final Lexer parser=getLexer(code,format);assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""\\""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b\\""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""\\""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(EOF,""""));}"
"org.apache.commons.csv.LexerTest.testBackslashWithEscaping",0,"@Test public void testBackslashWithEscaping()throws IOException {final String code=""a,\\,,b\\\\\n\\,,\\\nc,d\\\r\ne"";final CSVFormat format=formatWithEscaping.withIgnoreEmptyLines(false);assertTrue(format.isEscaping());final Lexer parser=getLexer(code,format);assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"",""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b\\""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"",""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""\nc""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""d\r""));assertThat(parser.nextToken(new Token()),matches(EOF,""e""));}"
"org.apache.commons.csv.LexerTest.testNextToken4",0,"@Test public void testNextToken4()throws IOException {final String code=""a,\""foo\"",b\na,\"" foo\"",b\na,\""foo \""  ,b\na,\"" foo \""  ,b"";final Lexer parser=getLexer(code,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""foo""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"" foo""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""foo ""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,"" foo ""));assertThat(parser.nextToken(new Token()),matches(EOF,""b""));}"
"org.apache.commons.csv.LexerTest.testNextToken5",0,"@Test public void testNextToken5()throws IOException {final String code=""a,\""foo\n\"",b\n\""foo\n  baar ,,,\""\n\""\n\t \n\"""";final Lexer parser=getLexer(code,CSVFormat.DEFAULT);assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""foo\n""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""foo\n  baar ,,,""));assertThat(parser.nextToken(new Token()),matches(EOF,""\n\t \n""));}"
"org.apache.commons.csv.LexerTest.testNextToken6",0,"@Test public void testNextToken6()throws IOException {final String code=""a;'b and '' more\n'\n!comment;;;;\n;;"";final CSVFormat format=CSVFormat.DEFAULT.withQuoteChar('\'').withCommentStart('!').withDelimiter(';');final Lexer parser=getLexer(code,format);assertThat(parser.nextToken(new Token()),matches(TOKEN,""a""));assertThat(parser.nextToken(new Token()),matches(EORECORD,""b and ' more\n""));}"
"org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace",0,"@Test public void testDelimiterIsWhitespace()throws IOException {final String code=""one\ttwo\t\tfour \t five\t six"";final Lexer parser=getLexer(code,CSVFormat.TDF);assertThat(parser.nextToken(new Token()),matches(TOKEN,""one""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""two""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""four""));assertThat(parser.nextToken(new Token()),matches(TOKEN,""five""));assertThat(parser.nextToken(new Token()),matches(EOF,""six""));}"
"org.apache.commons.csv.LexerTest.testEscapedCR",0,"@Test public void testEscapedCR()throws Exception {final Lexer lexer=getLexer(""character\\"" + CR + ""Escaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + CR + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testCR",0,"@Test public void testCR()throws Exception {final Lexer lexer=getLexer(""character"" + CR + ""NotEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character""));assertThat(lexer.nextToken(new Token()),hasContent(""NotEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedLF",0,"@Test public void testEscapedLF()throws Exception {final Lexer lexer=getLexer(""character\\"" + LF + ""Escaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + LF + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testLF",0,"@Test public void testLF()throws Exception {final Lexer lexer=getLexer(""character"" + LF + ""NotEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character""));assertThat(lexer.nextToken(new Token()),hasContent(""NotEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedTab",0,"@Test public void testEscapedTab()throws Exception {final Lexer lexer=getLexer(""character\\"" + TAB + ""Escaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + TAB + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testTab",0,"@Test public void testTab()throws Exception {final Lexer lexer=getLexer(""character"" + TAB + ""NotEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + TAB + ""NotEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedBackspace",0,"@Test public void testEscapedBackspace()throws Exception {final Lexer lexer=getLexer(""character\\"" + BACKSPACE + ""Escaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + BACKSPACE + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testBackspace",0,"@Test public void testBackspace()throws Exception {final Lexer lexer=getLexer(""character"" + BACKSPACE + ""NotEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + BACKSPACE + ""NotEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedFF",0,"@Test public void testEscapedFF()throws Exception {final Lexer lexer=getLexer(""character\\"" + FF + ""Escaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + FF + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testFF",0,"@Test public void testFF()throws Exception {final Lexer lexer=getLexer(""character"" + FF + ""NotEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character"" + FF + ""NotEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue",0,"@Test public void testEscapedMySqlNullValue()throws Exception {final Lexer lexer=getLexer(""character\\NEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character\\NEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedCharacter",0,"@Test public void testEscapedCharacter()throws Exception {final Lexer lexer=getLexer(""character\\aEscaped"",formatWithEscaping);assertThat(lexer.nextToken(new Token()),hasContent(""character\\aEscaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedControlCharacter",0,"@Test public void testEscapedControlCharacter()throws Exception {final Lexer lexer=getLexer(""character!rEscaped"",CSVFormat.DEFAULT.withEscape('!'));assertThat(lexer.nextToken(new Token()),hasContent(""character"" + CR + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testEscapedControlCharacter2",0,"@Test public void testEscapedControlCharacter2()throws Exception {final Lexer lexer=getLexer(""character\\rEscaped"",CSVFormat.DEFAULT.withEscape('\\'));assertThat(lexer.nextToken(new Token()),hasContent(""character"" + CR + ""Escaped""));}"
"org.apache.commons.csv.LexerTest.testEscapingAtEOF",0,"@Test(expected=IOException.class)public void testEscapingAtEOF()throws Exception {final String code=""escaping at EOF is evil\\"";final Lexer lexer=getLexer(code,formatWithEscaping);lexer.nextToken(new Token());}"
"org.apache.commons.csv.CSVRecordTest.testGetInt",0,"@Test public void testGetInt(){assertEquals(values[0],record.get(0));assertEquals(values[1],record.get(1));assertEquals(values[2],record.get(2));}"
"org.apache.commons.csv.CSVRecordTest.testGetString",0,"@Test public void testGetString(){assertEquals(values[0],recordWithHeader.get(""first""));assertEquals(values[1],recordWithHeader.get(""second""));assertEquals(values[2],recordWithHeader.get(""third""));}"
"org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord",0,"@Test(expected=IllegalArgumentException.class)public void testGetStringInconsistentRecord(){header.put(""fourth"",Integer.valueOf(4));recordWithHeader.get(""fourth"");}"
"org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader",0,"@Test(expected=IllegalStateException.class)public void testGetStringNoHeader(){record.get(""first"");}"
"org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum",0,"@Test(expected=IllegalArgumentException.class)public void testGetUnmappedEnum(){assertNull(recordWithHeader.get(EnumFixture.UNKNOWN_COLUMN));}"
"org.apache.commons.csv.CSVRecordTest.testGetUnmappedName",0,"@Test(expected=IllegalArgumentException.class)public void testGetUnmappedName(){assertNull(recordWithHeader.get(""fourth""));}"
"org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt",0,"@Test(expected=ArrayIndexOutOfBoundsException.class)public void testGetUnmappedNegativeInt(){assertNull(recordWithHeader.get(Integer.MIN_VALUE));}"
"org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt",0,"@Test(expected=ArrayIndexOutOfBoundsException.class)public void testGetUnmappedPositiveInt(){assertNull(recordWithHeader.get(Integer.MAX_VALUE));}"
"org.apache.commons.csv.CSVRecordTest.testIsConsistent",0,"@Test public void testIsConsistent(){assertTrue(record.isConsistent());assertTrue(recordWithHeader.isConsistent());header.put(""fourth"",Integer.valueOf(4));assertFalse(recordWithHeader.isConsistent());}"
"org.apache.commons.csv.CSVRecordTest.testIsMapped",0,"@Test public void testIsMapped(){assertFalse(record.isMapped(""first""));assertTrue(recordWithHeader.isMapped(""first""));assertFalse(recordWithHeader.isMapped(""fourth""));}"
"org.apache.commons.csv.CSVRecordTest.testIsSet",0,"@Test public void testIsSet(){assertFalse(record.isSet(""first""));assertTrue(recordWithHeader.isSet(""first""));assertFalse(recordWithHeader.isSet(""fourth""));}"
"org.apache.commons.csv.CSVRecordTest.testIterator",0,"@Test public void testIterator(){int i=0;for(final String value : record){assertEquals(values[i],value);i++;}}"
"org.apache.commons.csv.CSVRecordTest.testPutInMap",0,"@Test public void testPutInMap(){final Map<String,String> map=new ConcurrentHashMap<String,String>();this.recordWithHeader.putIn(map);this.validateMap(map,false);final TreeMap<String,String> map2=recordWithHeader.putIn(new TreeMap<String,String>());this.validateMap(map2,false);}"
"org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns",0,"@Test public void testRemoveAndAddColumns()throws IOException {final CSVPrinter printer=new CSVPrinter(new StringBuilder(),CSVFormat.DEFAULT);final Map<String,String> map=recordWithHeader.toMap();map.remove(""OldColumn"");map.put(""ZColumn"",""NewValue"");final ArrayList<String> list=new ArrayList<String>(map.values());Collections.sort(list);printer.printRecord(list);Assert.assertEquals(""A,B,C,NewValue"" + CSVFormat.DEFAULT.getRecordSeparator(),printer.getOut().toString());printer.close();}"
"org.apache.commons.csv.CSVRecordTest.testToMap",0,"@Test public void testToMap(){final Map<String,String> map=this.recordWithHeader.toMap();this.validateMap(map,true);}"
"org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord",0,"@Test public void testToMapWithShortRecord()throws Exception {final CSVParser parser=CSVParser.parse(""a,b"",CSVFormat.DEFAULT.withHeader(""A"",""B"",""C""));final CSVRecord shortRec=parser.iterator().next();shortRec.toMap();}"
"org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException",0,"@Test(expected=IllegalStateException.class)public void testDelimiterSameAsCommentStartThrowsException(){CSVFormat.DEFAULT.withDelimiter('!').withCommentStart('!').validate();}"
"org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException",0,"@Test(expected=IllegalStateException.class)public void testDelimiterSameAsEscapeThrowsException(){CSVFormat.DEFAULT.withDelimiter('!').withEscape('!').validate();}"
"org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements",0,"@Test(expected=IllegalStateException.class)public void testDuplicateHeaderElements(){CSVFormat.DEFAULT.withHeader(""A"",""A"").validate();}"
"org.apache.commons.csv.CSVFormatTest.testEquals",0,"@Test public void testEquals(){final CSVFormat right=CSVFormat.DEFAULT;final CSVFormat left=copy(right);assertFalse(right.equals(null));assertFalse(right.equals(""A String Instance""));assertEquals(right,right);assertEquals(right,left);assertEquals(left,right);assertEquals(right.hashCode(),right.hashCode());assertEquals(right.hashCode(),left.hashCode());}"
"org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart",0,"@Test public void testEqualsCommentStart(){final CSVFormat right=CSVFormat.newFormat('\'').withQuoteChar('""').withCommentStart('#').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withCommentStart('!');assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter",0,"@Test public void testEqualsDelimiter(){final CSVFormat right=CSVFormat.newFormat('!');final CSVFormat left=CSVFormat.newFormat('?');assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsEscape",0,"@Test public void testEqualsEscape(){final CSVFormat right=CSVFormat.newFormat('\'').withQuoteChar('""').withCommentStart('#').withEscape('+').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withEscape('!');assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsHeader",0,"@Test public void testEqualsHeader(){final CSVFormat right=CSVFormat.newFormat('\'').withRecordSeparator('*').withCommentStart('#').withEscape('+').withHeader(""One"",""Two"",""Three"").withIgnoreEmptyLines(true).withIgnoreSurroundingSpaces(true).withQuoteChar('""').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withHeader(""Three"",""Two"",""One"");assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines",0,"@Test public void testEqualsIgnoreEmptyLines(){final CSVFormat right=CSVFormat.newFormat('\'').withCommentStart('#').withEscape('+').withIgnoreEmptyLines(true).withIgnoreSurroundingSpaces(true).withQuoteChar('""').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withIgnoreEmptyLines(false);assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces",0,"@Test public void testEqualsIgnoreSurroundingSpaces(){final CSVFormat right=CSVFormat.newFormat('\'').withCommentStart('#').withEscape('+').withIgnoreSurroundingSpaces(true).withQuoteChar('""').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withIgnoreSurroundingSpaces(false);assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar",0,"@Test public void testEqualsQuoteChar(){final CSVFormat right=CSVFormat.newFormat('\'').withQuoteChar('""');final CSVFormat left=right.withQuoteChar('!');assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy",0,"@Test public void testEqualsQuotePolicy(){final CSVFormat right=CSVFormat.newFormat('\'').withQuoteChar('""').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withQuotePolicy(Quote.MINIMAL);assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator",0,"@Test public void testEqualsRecordSeparator(){final CSVFormat right=CSVFormat.newFormat('\'').withRecordSeparator('*').withCommentStart('#').withEscape('+').withIgnoreEmptyLines(true).withIgnoreSurroundingSpaces(true).withQuoteChar('""').withQuotePolicy(Quote.ALL);final CSVFormat left=right.withRecordSeparator('!');assertNotEquals(right,left);}"
"org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException",0,"@Test(expected=IllegalStateException.class)public void testEscapeSameAsCommentStartThrowsException(){CSVFormat.DEFAULT.withEscape('!').withCommentStart('!').validate();}"
"org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType",0,"@Test(expected=IllegalStateException.class)public void testEscapeSameAsCommentStartThrowsExceptionForWrapperType(){CSVFormat.DEFAULT.withEscape(new Character('!')).withCommentStart(new Character('!')).validate();}"
"org.apache.commons.csv.CSVFormatTest.testFormat",0,"@Test public void testFormat(){final CSVFormat format=CSVFormat.DEFAULT;assertEquals("""",format.format());assertEquals(""a,b,c"",format.format(""a"",""b"",""c""));assertEquals(""\""x,y\"",z"",format.format(""x,y"",""z""));}"
"org.apache.commons.csv.CSVFormatTest.testGetHeader",0,"@Test public void testGetHeader()throws Exception {final String[]header=new String[]{""one"",""two"",""three""};final CSVFormat formatWithHeader=CSVFormat.DEFAULT.withHeader(header);final String[]headerCopy=formatWithHeader.getHeader();headerCopy[0]=""A"";headerCopy[1]=""B"";headerCopy[2]=""C"";assertFalse(Arrays.equals(formatWithHeader.getHeader(),headerCopy));assertNotSame(formatWithHeader.getHeader(),headerCopy);}"
"org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106",0,"@Test public void testNullRecordSeparatorCsv106(){final CSVFormat format=CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(""H1"",""H2"");final String formatStr=format.format(""A"",""B"");assertNotNull(formatStr);assertFalse(formatStr.endsWith(""null""));}"
"org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException",0,"@Test(expected=IllegalStateException.class)public void testQuoteCharSameAsCommentStartThrowsException(){CSVFormat.DEFAULT.withQuoteChar('!').withCommentStart('!').validate();}"
"org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType",0,"@Test(expected=IllegalStateException.class)public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType(){CSVFormat.DEFAULT.withQuoteChar(new Character('!')).withCommentStart('!').validate();}"
"org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException",0,"@Test(expected=IllegalStateException.class)public void testQuoteCharSameAsDelimiterThrowsException(){CSVFormat.DEFAULT.withQuoteChar('!').withDelimiter('!').validate();}"
"org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException",0,"@Test(expected=IllegalStateException.class)public void testQuotePolicyNoneWithoutEscapeThrowsException(){CSVFormat.newFormat('!').withQuotePolicy(Quote.NONE).validate();}"
"org.apache.commons.csv.CSVFormatTest.testRFC4180",0,"@Test public void testRFC4180(){assertEquals(null,RFC4180.getCommentStart());assertEquals(',',RFC4180.getDelimiter());assertEquals(null,RFC4180.getEscape());assertFalse(RFC4180.getIgnoreEmptyLines());assertEquals(Character.valueOf('""'),RFC4180.getQuoteChar());assertEquals(null,RFC4180.getQuotePolicy());assertEquals(""\r\n"",RFC4180.getRecordSeparator());}"
"org.apache.commons.csv.CSVFormatTest.testSerialization",0,"@SuppressWarnings(""boxing"")@Test public void testSerialization()throws Exception {final ByteArrayOutputStream out=new ByteArrayOutputStream();final ObjectOutputStream oos=new ObjectOutputStream(out);oos.writeObject(CSVFormat.DEFAULT);oos.flush();oos.close();final ObjectInputStream in=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));final CSVFormat format=(CSVFormat)in.readObject();assertNotNull(format);assertEquals(""delimiter"",CSVFormat.DEFAULT.getDelimiter(),format.getDelimiter());assertEquals(""encapsulator"",CSVFormat.DEFAULT.getQuoteChar(),format.getQuoteChar());assertEquals(""comment start"",CSVFormat.DEFAULT.getCommentStart(),format.getCommentStart());assertEquals(""line separator"",CSVFormat.DEFAULT.getRecordSeparator(),format.getRecordSeparator());assertEquals(""escape"",CSVFormat.DEFAULT.getEscape(),format.getEscape());assertEquals(""trim"",CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(),format.getIgnoreSurroundingSpaces());assertEquals(""empty lines"",CSVFormat.DEFAULT.getIgnoreEmptyLines(),format.getIgnoreEmptyLines());}"
"org.apache.commons.csv.CSVFormatTest.testWithCommentStart",0,"@Test public void testWithCommentStart()throws Exception {final CSVFormat formatWithCommentStart=CSVFormat.DEFAULT.withCommentStart('#');assertEquals(Character.valueOf('#'),formatWithCommentStart.getCommentStart());}"
"org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException",0,"@Test(expected=IllegalArgumentException.class)public void testWithCommentStartCRThrowsException(){CSVFormat.DEFAULT.withCommentStart(CR).validate();}"
"org.apache.commons.csv.CSVFormatTest.testWithDelimiter",0,"@Test public void testWithDelimiter()throws Exception {final CSVFormat formatWithDelimiter=CSVFormat.DEFAULT.withDelimiter('!');assertEquals('!',formatWithDelimiter.getDelimiter());}"
"org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException",0,"@Test(expected=IllegalArgumentException.class)public void testWithDelimiterLFThrowsException(){CSVFormat.DEFAULT.withDelimiter(LF).validate();}"
"org.apache.commons.csv.CSVFormatTest.testWithEscape",0,"@Test public void testWithEscape()throws Exception {final CSVFormat formatWithEscape=CSVFormat.DEFAULT.withEscape('&');assertEquals(Character.valueOf('&'),formatWithEscape.getEscape());}"
"org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions",0,"@Test(expected=IllegalArgumentException.class)public void testWithEscapeCRThrowsExceptions(){CSVFormat.DEFAULT.withEscape(CR).validate();}"
"org.apache.commons.csv.CSVFormatTest.testWithHeader",0,"@Test public void testWithHeader()throws Exception {final String[]header=new String[]{""one"",""two"",""three""};final CSVFormat formatWithHeader=CSVFormat.DEFAULT.withHeader(header);assertArrayEquals(header,formatWithHeader.getHeader());assertNotSame(header,formatWithHeader.getHeader());header[0]=""A"";header[1]=""B"";header[2]=""C"";assertFalse(Arrays.equals(formatWithHeader.getHeader(),header));}"
"org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines",0,"@Test public void testWithIgnoreEmptyLines()throws Exception {assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines());}"
"org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround",0,"@Test public void testWithIgnoreSurround()throws Exception {assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces());assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true).getIgnoreSurroundingSpaces());}"
"org.apache.commons.csv.CSVFormatTest.testWithNullString",0,"@Test public void testWithNullString()throws Exception {final CSVFormat formatWithNullString=CSVFormat.DEFAULT.withNullString(""null"");assertEquals(""null"",formatWithNullString.getNullString());}"
"org.apache.commons.csv.CSVFormatTest.testWithQuoteChar",0,"@Test public void testWithQuoteChar()throws Exception {final CSVFormat formatWithQuoteChar=CSVFormat.DEFAULT.withQuoteChar('""');assertEquals(Character.valueOf('""'),formatWithQuoteChar.getQuoteChar());}"
"org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException",0,"@Test(expected=IllegalArgumentException.class)public void testWithQuoteLFThrowsException(){CSVFormat.DEFAULT.withQuoteChar(LF).validate();}"
"org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy",0,"@Test public void testWithQuotePolicy()throws Exception {final CSVFormat formatWithQuotePolicy=CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL);assertEquals(Quote.ALL,formatWithQuotePolicy.getQuotePolicy());}"
"org.apache.commons.csv.CSVFormatTest.testWithRecordSeparator",0,"@Test public void testWithRecordSeparator()throws Exception {final CSVFormat formatWithRecordSeparator=CSVFormat.DEFAULT.withRecordSeparator('!');assertEquals(""!"",formatWithRecordSeparator.getRecordSeparator());}"
"org.apache.commons.csv.AssertionsTest.testNotNull",0,"@Test public void testNotNull()throws Exception {Assertions.notNull(new Object(),""object"");}"
"org.apache.commons.csv.AssertionsTest.testNotNullNull",0,"@Test(expected=IllegalArgumentException.class)public void testNotNullNull()throws Exception {Assertions.notNull(null,""object"");}"
"org.apache.commons.csv.FercGovTest.testContractFile",0,"@Test public void testContractFile(){}"
"org.apache.commons.csv.FercGovTest.testTransactionFile",0,"@Test public void testTransactionFile(){}"
"org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput",0,"@Test public void testEmptyInput()throws Exception {final ExtendedBufferedReader br=getBufferedReader("""");assertEquals(END_OF_STREAM,br.read());assertEquals(END_OF_STREAM,br.lookAhead());assertEquals(END_OF_STREAM,br.getLastChar());assertNull(br.readLine());assertEquals(0,br.read(new char[10],0,0));br.close();}"
"org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1",0,"@Test public void testReadLookahead1()throws Exception {final ExtendedBufferedReader br=getBufferedReader(""1\n2\r3\n"");assertEquals(0,br.getCurrentLineNumber());assertEquals('1',br.lookAhead());assertEquals(UNDEFINED,br.getLastChar());assertEquals(0,br.getCurrentLineNumber());assertEquals('1',br.read());assertEquals('1',br.getLastChar());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.lookAhead());assertEquals(1,br.getCurrentLineNumber());assertEquals('1',br.getLastChar());assertEquals('\n',br.read());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.getLastChar());assertEquals(1,br.getCurrentLineNumber());assertEquals('2',br.lookAhead());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.getLastChar());assertEquals(1,br.getCurrentLineNumber());assertEquals('2',br.read());assertEquals(2,br.getCurrentLineNumber());assertEquals('2',br.getLastChar());assertEquals('\r',br.lookAhead());assertEquals(2,br.getCurrentLineNumber());assertEquals('2',br.getLastChar());assertEquals('\r',br.read());assertEquals('\r',br.getLastChar());assertEquals(2,br.getCurrentLineNumber());assertEquals('3',br.lookAhead());assertEquals('\r',br.getLastChar());assertEquals('3',br.read());assertEquals('3',br.getLastChar());assertEquals(3,br.getCurrentLineNumber());assertEquals('\n',br.lookAhead());assertEquals(3,br.getCurrentLineNumber());assertEquals('3',br.getLastChar());assertEquals('\n',br.read());assertEquals(3,br.getCurrentLineNumber());assertEquals('\n',br.getLastChar());assertEquals(3,br.getCurrentLineNumber());assertEquals(END_OF_STREAM,br.lookAhead());assertEquals('\n',br.getLastChar());assertEquals(END_OF_STREAM,br.read());assertEquals(END_OF_STREAM,br.getLastChar());assertEquals(END_OF_STREAM,br.read());assertEquals(END_OF_STREAM,br.lookAhead());assertEquals(3,br.getCurrentLineNumber());br.close();}"
"org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2",0,"@Test public void testReadLookahead2()throws Exception {final char[]ref=new char[5];final char[]res=new char[5];final ExtendedBufferedReader br=getBufferedReader(""abcdefg"");ref[0]='a';ref[1]='b';ref[2]='c';assertEquals(3,br.read(res,0,3));assertArrayEquals(ref,res);assertEquals('c',br.getLastChar());assertEquals('d',br.lookAhead());ref[4]='d';assertEquals(1,br.read(res,4,1));assertArrayEquals(ref,res);assertEquals('d',br.getLastChar());br.close();}"
"org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine",0,"@Test public void testReadLine()throws Exception {ExtendedBufferedReader br=getBufferedReader("""");assertNull(br.readLine());br.close();br=getBufferedReader(""\n"");assertEquals("""",br.readLine());assertNull(br.readLine());br.close();br=getBufferedReader(""foo\n\nhello"");assertEquals(0,br.getCurrentLineNumber());assertEquals(""foo"",br.readLine());assertEquals(1,br.getCurrentLineNumber());assertEquals("""",br.readLine());assertEquals(2,br.getCurrentLineNumber());assertEquals(""hello"",br.readLine());assertEquals(3,br.getCurrentLineNumber());assertNull(br.readLine());assertEquals(3,br.getCurrentLineNumber());br.close();br=getBufferedReader(""foo\n\nhello"");assertEquals('f',br.read());assertEquals('o',br.lookAhead());assertEquals(""oo"",br.readLine());assertEquals(1,br.getCurrentLineNumber());assertEquals('\n',br.lookAhead());assertEquals("""",br.readLine());assertEquals(2,br.getCurrentLineNumber());assertEquals('h',br.lookAhead());assertEquals(""hello"",br.readLine());assertNull(br.readLine());assertEquals(3,br.getCurrentLineNumber());br.close();br=getBufferedReader(""foo\rbaar\r\nfoo"");assertEquals(""foo"",br.readLine());assertEquals('b',br.lookAhead());assertEquals(""baar"",br.readLine());assertEquals('f',br.lookAhead());assertEquals(""foo"",br.readLine());assertNull(br.readLine());br.close();}"
"org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar",0,"@Test public void testReadChar()throws Exception {final String LF=""\n"";final String CR=""\r"";final String CRLF=CR + LF;final String LFCR=LF + CR;final String test=""a"" + LF + ""b""+ CR+ ""c""+ LF+ LF+ ""d""+ CR+ CR+ ""e""+ LFCR+ ""f ""+ CRLF;final int EOLeolct=9;ExtendedBufferedReader br;br=getBufferedReader(test);assertEquals(0,br.getCurrentLineNumber());while (br.readLine()!= null){}assertEquals(EOLeolct,br.getCurrentLineNumber());br.close();br=getBufferedReader(test);assertEquals(0,br.getCurrentLineNumber());while (br.read()!= -1){}assertEquals(EOLeolct,br.getCurrentLineNumber());br.close();br=getBufferedReader(test);assertEquals(0,br.getCurrentLineNumber());final char[]buff=new char[10];while (br.read(buff,0,3)!= -1){}assertEquals(EOLeolct,br.getCurrentLineNumber());br.close();}"
"org.apache.commons.csv.CSVParserTest.testBackslashEscaping",0,"@Test public void testBackslashEscaping()throws IOException {final String code=""one,two,three\n"" + ""'',''\n"" + ""/',/'\n""+ ""'/'','/''\n""+ ""'''',''''\n""+ ""/,,/,\n""+ ""//,//\n""+ ""'//','//'\n""+ ""   8,\""quoted \""\"" /\"" // string\""   \n""+ ""9,/\n   \n""+ """";final String[][]res={{""one"",""two"",""three""},{"""",""""},{""'"",""'""},{""'"",""'""},{""'"",""'""},{"","","",""},{""/"",""/""},{""/"",""/""},{""   8   "",""   \""quoted \""\"" /\"" / string\""   ""},{""9"",""   \n   ""}};final CSVFormat format=CSVFormat.newFormat(',').withQuoteChar('\'').withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines(true);final CSVParser parser=CSVParser.parse(code,format);final List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);Utils.compare(""Records do not match expected result"",res,records);parser.close();}"
"org.apache.commons.csv.CSVParserTest.testBackslashEscaping2",0,"@Test public void testBackslashEscaping2()throws IOException {final String code="""" + "",,\n"" + "" \t,,\n""+ "" //,/,,/,\n""+ """";final String[][]res={{"" "","" "","" ""},{"" \t "",""  "","" ""},{"" / "","","","" ,""}};final CSVFormat format=CSVFormat.newFormat(',').withRecordSeparator(CRLF).withEscape('/').withIgnoreEmptyLines(true);final CSVParser parser=CSVParser.parse(code,format);final List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);Utils.compare("""",res,records);parser.close();}"
"org.apache.commons.csv.CSVParserTest.testBackslashEscapingOld",0,"@Test @Ignore public void testBackslashEscapingOld()throws IOException {final String code=""one,two,three\n"" + ""on\\\""e,two\n"" + ""on\""e,two\n""+ ""one,\""tw\\\""o\""\n""+ ""one,\""t\\,wo\""\n""+ ""one,two,\""th,ree\""\n""+ ""\""a\\\\\""\n""+ ""a\\,b\n""+ ""\""a\\\\,b\"""";final String[][]res={{""one"",""two"",""three""},{""on\\\""e"",""two""},{""on\""e"",""two""},{""one"",""tw\""o""},{""one"",""t\\,wo""},{""one"",""two"",""th,ree""},{""a\\\\""},{""a\\"",""b""},{""a\\\\,b""}};final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}"
"org.apache.commons.csv.CSVParserTest.testBOM",0,"@Test @Ignore(""CSV-107"")public void testBOM()throws IOException {URL url=ClassLoader.getSystemClassLoader().getResource(""CSVFileParser/bom.csv"");final CSVParser parser=CSVParser.parse(url,null,CSVFormat.EXCEL.withHeader());try {for(CSVRecord record : parser){final String string=record.get(""Date"");Assert.assertNotNull(string);}}finally {parser.close();}}"
"org.apache.commons.csv.CSVParserTest.testBOMInputStream",0,"@Test public void testBOMInputStream(){}"
"org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings",0,"@Test public void testCarriageReturnEndings()throws IOException {final String code=""foo\rbaar,\rhello,world\r,kanu"";final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings",0,"@Test public void testCarriageReturnLineFeedEndings()throws IOException {final String code=""foo\r\nbaar,\r\nhello,world\r\n,kanu"";final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testClose",0,"@Test(expected=NoSuchElementException.class)public void testClose()throws Exception {final Reader in=new StringReader(""# comment\na,b,c\n1,2,3\nx,y,z"");final CSVParser parser=CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in);final Iterator<CSVRecord> records=parser.iterator();assertTrue(records.hasNext());parser.close();assertFalse(records.hasNext());records.next();}"
"org.apache.commons.csv.CSVParserTest.testCSV57",0,"@Test public void testCSV57()throws Exception {final CSVParser parser=CSVParser.parse("""",CSVFormat.DEFAULT);final List<CSVRecord> list=parser.getRecords();assertNotNull(list);assertEquals(0,list.size());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testDefaultFormat",0,"@Test public void testDefaultFormat()throws IOException {final String code="""" + ""a,b#\n"" + ""\""\n\"",\"" \"",#\n""+ ""#,\""\""\n""+ ""# Final comment\n"";final String[][]res={{""a"",""b#""},{""\n"","" "",""#""},{""#"",""""},{""# Final comment""}};CSVFormat format=CSVFormat.DEFAULT;assertFalse(format.isCommentingEnabled());CSVParser parser=CSVParser.parse(code,format);List<CSVRecord> records=parser.getRecords();assertTrue(records.size()> 0);Utils.compare(""Failed to parse without comments"",res,records);final String[][]res_comments={{""a"",""b#""},{""\n"","" "",""#""}};format=CSVFormat.DEFAULT.withCommentStart('#');parser.close();parser=CSVParser.parse(code,format);records=parser.getRecords();Utils.compare(""Failed to parse with comments"",res_comments,records);parser.close();}"
"org.apache.commons.csv.CSVParserTest.testEmptyFile",0,"@Test public void testEmptyFile()throws Exception {final CSVParser parser=CSVParser.parse("""",CSVFormat.DEFAULT);assertNull(parser.nextRecord());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourCSV",0,"@Test public void testEmptyLineBehaviourCSV()throws Exception {final String[]codes={""hello,\r\n\r\n\r\n"",""hello,\n\n\n"",""hello,\""\""\r\n\r\n\r\n"",""hello,\""\""\n\n\n""};final String[][]res={{""hello"",""""}};for(final String code : codes){final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}}"
"org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviourExcel",0,"@Test public void testEmptyLineBehaviourExcel()throws Exception {final String[]codes={""hello,\r\n\r\n\r\n"",""hello,\n\n\n"",""hello,\""\""\r\n\r\n\r\n"",""hello,\""\""\n\n\n""};final String[][]res={{""hello"",""""},{""""},{""""}};for(final String code : codes){final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}}"
"org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV",0,"@Test public void testEndOfFileBehaviorCSV()throws Exception {final String[]codes={""hello,\r\n\r\nworld,\r\n"",""hello,\r\n\r\nworld,"",""hello,\r\n\r\nworld,\""\""\r\n"",""hello,\r\n\r\nworld,\""\"""",""hello,\r\n\r\nworld,\n"",""hello,\r\n\r\nworld,"",""hello,\r\n\r\nworld,\""\""\n"",""hello,\r\n\r\nworld,\""\""""};final String[][]res={{""hello"",""""},{""world"",""""}};for(final String code : codes){final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}}"
"org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviourExcel",0,"@Test public void testEndOfFileBehaviourExcel()throws Exception {final String[]codes={""hello,\r\n\r\nworld,\r\n"",""hello,\r\n\r\nworld,"",""hello,\r\n\r\nworld,\""\""\r\n"",""hello,\r\n\r\nworld,\""\"""",""hello,\r\n\r\nworld,\n"",""hello,\r\n\r\nworld,"",""hello,\r\n\r\nworld,\""\""\n"",""hello,\r\n\r\nworld,\""\""""};final String[][]res={{""hello"",""""},{""""},{""world"",""""}};for(final String code : codes){final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}}"
"org.apache.commons.csv.CSVParserTest.testExcelFormat1",0,"@Test public void testExcelFormat1()throws IOException {final String code=""value1,value2,value3,value4\r\na,b,c,d\r\n  x,,,"" + ""\r\n\r\n\""\""\""hello\""\""\"",\""  \""\""world\""\""\"",\""abc\ndef\"",\r\n"";final String[][]res={{""value1"",""value2"",""value3"",""value4""},{""a"",""b"",""c"",""d""},{""  x"","""","""",""""},{""""},{""\""hello\"""",""  \""world\"""",""abc\ndef"",""""}};final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}"
"org.apache.commons.csv.CSVParserTest.testExcelFormat2",0,"@Test public void testExcelFormat2()throws Exception {final String code=""foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n"";final String[][]res={{""foo"",""baar""},{""""},{""hello"",""""},{""""},{""world"",""""}};final CSVParser parser=CSVParser.parse(code,CSVFormat.EXCEL);final List<CSVRecord> records=parser.getRecords();assertEquals(res.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < res.length;i++){assertArrayEquals(res[i],records.get(i).values());}parser.close();}"
"org.apache.commons.csv.CSVParserTest.testForEach",0,"@Test public void testForEach()throws Exception {final List<CSVRecord> records=new ArrayList<CSVRecord>();final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");for(final CSVRecord record : CSVFormat.DEFAULT.parse(in)){records.add(record);}assertEquals(3,records.size());assertArrayEquals(new String[]{""a"",""b"",""c""},records.get(0).values());assertArrayEquals(new String[]{""1"",""2"",""3""},records.get(1).values());assertArrayEquals(new String[]{""x"",""y"",""z""},records.get(2).values());}"
"org.apache.commons.csv.CSVParserTest.testGetHeaderMap",0,"@Test public void testGetHeaderMap()throws Exception {final CSVParser parser=CSVParser.parse(""a,b,c\n1,2,3\nx,y,z"",CSVFormat.DEFAULT.withHeader(""A"",""B"",""C""));final Map<String,Integer> headerMap=parser.getHeaderMap();final Iterator<String> columnNames=headerMap.keySet().iterator();Assert.assertEquals(""A"",columnNames.next());Assert.assertEquals(""B"",columnNames.next());Assert.assertEquals(""C"",columnNames.next());final Iterator<CSVRecord> records=parser.iterator();for (int i=0;i < 3;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get(""A""));assertEquals(record.get(1),record.get(""B""));assertEquals(record.get(2),record.get(""C""));}assertFalse(records.hasNext());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testDuplicateHeaderEntries",1,"@Test(expected=IllegalStateException.class)public void testDuplicateHeaderEntries()throws Exception {CSVParser.parse(""a,b,a\n1,2,3\nx,y,z"",CSVFormat.DEFAULT.withHeader(new String[]{}));}"
"org.apache.commons.csv.CSVParserTest.testGetLine",0,"@Test public void testGetLine()throws IOException {final CSVParser parser=CSVParser.parse(CSV_INPUT,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));for(final String[]re : RESULT){assertArrayEquals(re,parser.nextRecord().values());}assertNull(parser.nextRecord());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR",0,"@Test public void testGetLineNumberWithCR()throws Exception {this.validateLineNumbers(String.valueOf(CR));}"
"org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF",0,"@Test public void testGetLineNumberWithCRLF()throws Exception {this.validateLineNumbers(CRLF);}"
"org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF",0,"@Test public void testGetLineNumberWithLF()throws Exception {this.validateLineNumbers(String.valueOf(LF));}"
"org.apache.commons.csv.CSVParserTest.testGetOneLine",0,"@Test public void testGetOneLine()throws IOException {final CSVParser parser=CSVParser.parse(CSV_INPUT_1,CSVFormat.DEFAULT);final CSVRecord record=parser.getRecords().get(0);assertArrayEquals(RESULT[0],record.values());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testGetOneLineCustomCollection",0,"@Test public void testGetOneLineCustomCollection()throws IOException {final CSVParser parser=CSVParser.parse(CSV_INPUT_1,CSVFormat.DEFAULT);final CSVRecord record=parser.getRecords(new LinkedList<CSVRecord>()).getFirst();assertArrayEquals(RESULT[0],record.values());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser",0,"/** * Tests reusing a parser to process new string records one at a time as they are being discovered. See [CSV-110].* @throws IOException*/@Test public void testGetOneLineOneParser()throws IOException {PipedWriter writer=new PipedWriter();PipedReader reader=new PipedReader(writer);final CSVFormat format=CSVFormat.DEFAULT;final CSVParser parser=new CSVParser(reader,format);try {writer.append(CSV_INPUT_1);writer.append(format.getRecordSeparator());final CSVRecord record1=parser.nextRecord();assertArrayEquals(RESULT[0],record1.values());writer.append(CSV_INPUT_2);writer.append(format.getRecordSeparator());final CSVRecord record2=parser.nextRecord();assertArrayEquals(RESULT[1],record2.values());}finally {parser.close();}}"
"org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR",0,"@Test public void testGetRecordNumberWithCR()throws Exception {this.validateRecordNumbers(String.valueOf(CR));}"
"org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF",0,"@Test public void testGetRecordNumberWithCRLF()throws Exception {this.validateRecordNumbers(CRLF);}"
"org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF",0,"@Test public void testGetRecordNumberWithLF()throws Exception {this.validateRecordNumbers(String.valueOf(LF));}"
"org.apache.commons.csv.CSVParserTest.testGetRecords",0,"@Test public void testGetRecords()throws IOException {final CSVParser parser=CSVParser.parse(CSV_INPUT,CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true));final List<CSVRecord> records=parser.getRecords();assertEquals(RESULT.length,records.size());assertTrue(records.size()> 0);for (int i=0;i < RESULT.length;i++){assertArrayEquals(RESULT[i],records.get(i).values());}parser.close();}"
"org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues",0,"@Test public void testGetRecordWithMultiLineValues()throws Exception {final CSVParser parser=CSVParser.parse(""\""a\r\n1\"",\""a\r\n2\"""" + CRLF + ""\""b\r\n1\"",\""b\r\n2\""""+ CRLF+ ""\""c\r\n1\"",\""c\r\n2\"""",CSVFormat.DEFAULT.withRecordSeparator(CRLF));CSVRecord record;assertEquals(0,parser.getRecordNumber());assertEquals(0,parser.getCurrentLineNumber());assertNotNull(record=parser.nextRecord());assertEquals(3,parser.getCurrentLineNumber());assertEquals(1,record.getRecordNumber());assertEquals(1,parser.getRecordNumber());assertNotNull(record=parser.nextRecord());assertEquals(6,parser.getCurrentLineNumber());assertEquals(2,record.getRecordNumber());assertEquals(2,parser.getRecordNumber());assertNotNull(record=parser.nextRecord());assertEquals(8,parser.getCurrentLineNumber());assertEquals(3,record.getRecordNumber());assertEquals(3,parser.getRecordNumber());assertNull(record=parser.nextRecord());assertEquals(8,parser.getCurrentLineNumber());assertEquals(3,parser.getRecordNumber());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testHeader",0,"@Test public void testHeader()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get(""a""));assertEquals(record.get(1),record.get(""b""));assertEquals(record.get(2),record.get(""c""));}assertFalse(records.hasNext());}"
"org.apache.commons.csv.CSVParserTest.testHeaderComment",0,"@Test public void testHeaderComment()throws Exception {final Reader in=new StringReader(""# comment\na,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertEquals(record.get(0),record.get(""a""));assertEquals(record.get(1),record.get(""b""));assertEquals(record.get(2),record.get(""c""));}assertFalse(records.hasNext());}"
"org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines",0,"@Test public void testIgnoreEmptyLines()throws IOException {final String code=""\nfoo,baar\n\r\n,\n\n,world\r\n\n"";final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(3,records.size());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testInvalidFormat",0,"@Test(expected=IllegalArgumentException.class)public void testInvalidFormat()throws Exception {final CSVFormat invalidFormat=CSVFormat.DEFAULT.withDelimiter(CR);new CSVParser(null,invalidFormat).close();}"
"org.apache.commons.csv.CSVParserTest.testIterator",0,"@Test public void testIterator()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> iterator=CSVFormat.DEFAULT.parse(in).iterator();assertTrue(iterator.hasNext());try {iterator.remove();fail(""expected UnsupportedOperationException"");}catch(final UnsupportedOperationException expected){}assertArrayEquals(new String[]{""a"",""b"",""c""},iterator.next().values());assertArrayEquals(new String[]{""1"",""2"",""3""},iterator.next().values());assertTrue(iterator.hasNext());assertTrue(iterator.hasNext());assertTrue(iterator.hasNext());assertArrayEquals(new String[]{""x"",""y"",""z""},iterator.next().values());assertFalse(iterator.hasNext());try {iterator.next();fail(""NoSuchElementException expected"");}catch(final NoSuchElementException e){}}"
"org.apache.commons.csv.CSVParserTest.testLineFeedEndings",0,"@Test public void testLineFeedEndings()throws IOException {final String code=""foo\nbaar,\nhello,world\n,kanu"";final CSVParser parser=CSVParser.parse(code,CSVFormat.DEFAULT);final List<CSVRecord> records=parser.getRecords();assertEquals(4,records.size());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport",0,"@Test public void testMappedButNotSetAsOutlook2007ContactExport()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader(""A"",""B"",""C"").withSkipHeaderRecord(true).parse(in).iterator();CSVRecord record;record=records.next();assertTrue(record.isMapped(""A""));assertTrue(record.isMapped(""B""));assertTrue(record.isMapped(""C""));assertTrue(record.isSet(""A""));assertTrue(record.isSet(""B""));assertFalse(record.isSet(""C""));assertEquals(""1"",record.get(""A""));assertEquals(""2"",record.get(""B""));assertFalse(record.isConsistent());record=records.next();assertTrue(record.isMapped(""A""));assertTrue(record.isMapped(""B""));assertTrue(record.isMapped(""C""));assertTrue(record.isSet(""A""));assertTrue(record.isSet(""B""));assertTrue(record.isSet(""C""));assertEquals(""x"",record.get(""A""));assertEquals(""y"",record.get(""B""));assertEquals(""z"",record.get(""C""));assertTrue(record.isConsistent());assertFalse(records.hasNext());}"
"org.apache.commons.csv.CSVParserTest.testMultipleIterators",0,"@Test public void testMultipleIterators()throws Exception {final CSVParser parser=CSVParser.parse(""a,b,c"" + CR + ""d,e,f"",CSVFormat.DEFAULT);final Iterator<CSVRecord> itr1=parser.iterator();final Iterator<CSVRecord> itr2=parser.iterator();final CSVRecord first=itr1.next();assertEquals(""a"",first.get(0));assertEquals(""b"",first.get(1));assertEquals(""c"",first.get(2));final CSVRecord second=itr2.next();assertEquals(""d"",second.get(0));assertEquals(""e"",second.get(1));assertEquals(""f"",second.get(2));parser.close();}"
"org.apache.commons.csv.CSVParserTest.testNewCSVParserNullReaderFormat",0,"@Test(expected=IllegalArgumentException.class)public void testNewCSVParserNullReaderFormat()throws Exception {new CSVParser(null,CSVFormat.DEFAULT).close();}"
"org.apache.commons.csv.CSVParserTest.testNewCSVParserReaderNullFormat",0,"@Test(expected=IllegalArgumentException.class)public void testNewCSVParserReaderNullFormat()throws Exception {new CSVParser(new StringReader(""""),null).close();}"
"org.apache.commons.csv.CSVParserTest.testNoHeaderMap",0,"@Test public void testNoHeaderMap()throws Exception {final CSVParser parser=CSVParser.parse(""a,b,c\n1,2,3\nx,y,z"",CSVFormat.DEFAULT);Assert.assertNull(parser.getHeaderMap());parser.close();}"
"org.apache.commons.csv.CSVParserTest.testParseFileNullFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParseFileNullFormat()throws Exception {CSVParser.parse(new File(""""),null);}"
"org.apache.commons.csv.CSVParserTest.testParseNullFileFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParseNullFileFormat()throws Exception {CSVParser.parse((File)null,CSVFormat.DEFAULT);}"
"org.apache.commons.csv.CSVParserTest.testParseNullStringFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParseNullStringFormat()throws Exception {CSVParser.parse((String)null,CSVFormat.DEFAULT);}"
"org.apache.commons.csv.CSVParserTest.testParseNullUrlCharsetFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParseNullUrlCharsetFormat()throws Exception {CSVParser.parse(null,Charset.defaultCharset(),CSVFormat.DEFAULT);}"
"org.apache.commons.csv.CSVParserTest.testParserUrlNullCharsetFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParserUrlNullCharsetFormat()throws Exception {final CSVParser parser=CSVParser.parse(new URL(""http://commons.apache.org""),null,CSVFormat.DEFAULT);parser.close();}"
"org.apache.commons.csv.CSVParserTest.testParseStringNullFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParseStringNullFormat()throws Exception {CSVParser.parse(""csv data"",null);}"
"org.apache.commons.csv.CSVParserTest.testParseUrlCharsetNullFormat",0,"@Test(expected=IllegalArgumentException.class)public void testParseUrlCharsetNullFormat()throws Exception {final CSVParser parser=CSVParser.parse(new URL(""http://commons.apache.org""),Charset.defaultCharset(),null);parser.close();}"
"org.apache.commons.csv.CSVParserTest.testProvidedHeader",0,"@Test public void testProvidedHeader()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader(""A"",""B"",""C"").parse(in).iterator();for (int i=0;i < 3;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertTrue(record.isMapped(""A""));assertTrue(record.isMapped(""B""));assertTrue(record.isMapped(""C""));assertFalse(record.isMapped(""NOT MAPPED""));assertEquals(record.get(0),record.get(""A""));assertEquals(record.get(1),record.get(""B""));assertEquals(record.get(2),record.get(""C""));}assertFalse(records.hasNext());}"
"org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto",0,"@Test public void testProvidedHeaderAuto()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();for (int i=0;i < 2;i++){assertTrue(records.hasNext());final CSVRecord record=records.next();assertTrue(record.isMapped(""a""));assertTrue(record.isMapped(""b""));assertTrue(record.isMapped(""c""));assertFalse(record.isMapped(""NOT MAPPED""));assertEquals(record.get(0),record.get(""a""));assertEquals(record.get(1),record.get(""b""));assertEquals(record.get(2),record.get(""c""));}assertFalse(records.hasNext());}"
"org.apache.commons.csv.CSVParserTest.testRoundtrip",0,"@Test public void testRoundtrip()throws Exception {final StringWriter out=new StringWriter();final CSVPrinter printer=new CSVPrinter(out,CSVFormat.DEFAULT);final String input=""a,b,c\r\n1,2,3\r\nx,y,z\r\n"";for(final CSVRecord record : CSVParser.parse(input,CSVFormat.DEFAULT)){printer.printRecord(record);}assertEquals(input,out.toString());printer.close();}"
"org.apache.commons.csv.CSVParserTest.testSkipAutoHeader",0,"@Test public void testSkipAutoHeader()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader().parse(in).iterator();final CSVRecord record=records.next();assertEquals(""1"",record.get(""a""));assertEquals(""2"",record.get(""b""));assertEquals(""3"",record.get(""c""));}"
"org.apache.commons.csv.CSVParserTest.testSkipSetHeader",0,"@Test public void testSkipSetHeader()throws Exception {final Reader in=new StringReader(""a,b,c\n1,2,3\nx,y,z"");final Iterator<CSVRecord> records=CSVFormat.DEFAULT.withHeader(""a"",""b"",""c"").withSkipHeaderRecord(true).parse(in).iterator();final CSVRecord record=records.next();assertEquals(""1"",record.get(""a""));assertEquals(""2"",record.get(""b""));assertEquals(""3"",record.get(""c""));}"
"org.apache.commons.csv.TokenMatchersTest.testHasType",0,"@Test public void testHasType(){assertFalse(hasType(Token.Type.COMMENT).matches(token));assertFalse(hasType(Token.Type.EOF).matches(token));assertFalse(hasType(Token.Type.EORECORD).matches(token));assertTrue(hasType(Token.Type.TOKEN).matches(token));}"
"org.apache.commons.csv.TokenMatchersTest.testHasContent",0,"@Test public void testHasContent(){assertFalse(hasContent(""This is not the token's content"").matches(token));assertTrue(hasContent(""content"").matches(token));}"
"org.apache.commons.csv.TokenMatchersTest.testIsReady",0,"@Test public void testIsReady(){assertTrue(isReady().matches(token));token.isReady=false;assertFalse(isReady().matches(token));}"
"org.apache.commons.csv.TokenMatchersTest.testMatches",0,"@Test public void testMatches(){assertTrue(matches(Token.Type.TOKEN,""content"").matches(token));assertFalse(matches(Token.Type.EOF,""content"").matches(token));assertFalse(matches(Token.Type.TOKEN,""not the content"").matches(token));assertFalse(matches(Token.Type.EORECORD,""not the content"").matches(token));}"
"org.apache.commons.csv.CSVPrinterTest.testDisabledComment",0,"@Test public void testDisabledComment()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printComment(""This is a comment"");assertEquals("""",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays",0,"@Test public void testExcelPrintAllArrayOfArrays()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.printRecords(new String[][]{{""r1c1"",""r1c2""},{""r2c1"",""r2c2""}});assertEquals(""r1c1,r1c2"" + recordSeparator + ""r2c1,r2c2""+ recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists",0,"@Test public void testExcelPrintAllArrayOfLists()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.printRecords(new List[]{Arrays.asList(""r1c1"",""r1c2""),Arrays.asList(""r2c1"",""r2c2"")});assertEquals(""r1c1,r1c2"" + recordSeparator + ""r2c1,r2c2""+ recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays",0,"@Test public void testExcelPrintAllIterableOfArrays()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.printRecords(Arrays.asList(new String[][]{{""r1c1"",""r1c2""},{""r2c1"",""r2c2""}}));assertEquals(""r1c1,r1c2"" + recordSeparator + ""r2c1,r2c2""+ recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists",0,"@Test public void testExcelPrintAllIterableOfLists()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.printRecords(Arrays.asList(new List[]{Arrays.asList(""r1c1"",""r1c2""),Arrays.asList(""r2c1"",""r2c2"")}));assertEquals(""r1c1,r1c2"" + recordSeparator + ""r2c1,r2c2""+ recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1",0,"@Test public void testExcelPrinter1()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.printRecord(""a"",""b"");assertEquals(""a,b"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2",0,"@Test public void testExcelPrinter2()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.EXCEL);printer.printRecord(""a,b"",""b"");assertEquals(""\""a,b\"",b"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter",0,"@Test public void testJdbcPrinter()throws IOException,ClassNotFoundException,SQLException {final StringWriter sw=new StringWriter();Class.forName(""org.h2.Driver"");final Connection connection=DriverManager.getConnection(""jdbc:h2:mem:my_test;"",""sa"","""");try {final Statement stmt=connection.createStatement();stmt.execute(""CREATE TABLE TEST(ID INT PRIMARY KEY,NAME VARCHAR(255))"");stmt.execute(""insert into TEST values(1,'r1')"");stmt.execute(""insert into TEST values(2,'r2')"");final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecords(stmt.executeQuery(""select ID,NAME from TEST""));assertEquals(""1,r1"" + recordSeparator + ""2,r2""+ recordSeparator,sw.toString());printer.close();}finally {connection.close();}}"
"org.apache.commons.csv.CSVPrinterTest.testMultiLineComment",0,"@Test public void testMultiLineComment()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withCommentStart('#'));printer.printComment(""This is a comment\non multiple lines"");assertEquals(""# This is a comment"" + recordSeparator + ""# on multiple lines""+ recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter1",0,"@Test public void testPrinter1()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a"",""b"");assertEquals(""a,b"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter2",0,"@Test public void testPrinter2()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a,b"",""b"");assertEquals(""\""a,b\"",b"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter3",0,"@Test public void testPrinter3()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a,b"",""b "");assertEquals(""\""a,b\"",\""b \"""" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter4",0,"@Test public void testPrinter4()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a"",""b\""c"");assertEquals(""a,\""b\""\""c\"""" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter5",0,"@Test public void testPrinter5()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a"",""b\nc"");assertEquals(""a,\""b\nc\"""" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter6",0,"@Test public void testPrinter6()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a"",""b\r\nc"");assertEquals(""a,\""b\r\nc\"""" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrinter7",0,"@Test public void testPrinter7()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a"",""b\\c"");assertEquals(""a,b\\c"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrintNullValues",0,"@Test public void testPrintNullValues()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT);printer.printRecord(""a"",null,""b"");assertEquals(""a,,b"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues",0,"@Test public void testPrintCustomNullValues()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withNullString(""NULL""));printer.printRecord(""a"",null,""b"");assertEquals(""a,NULL,b"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues",0,"@Test public void testParseCustomNullValues()throws IOException {final StringWriter sw=new StringWriter();final CSVFormat format=CSVFormat.DEFAULT.withNullString(""NULL"");final CSVPrinter printer=new CSVPrinter(sw,format);printer.printRecord(""a"",null,""b"");printer.close();final String csvString=sw.toString();assertEquals(""a,NULL,b"" + recordSeparator,csvString);final Iterable<CSVRecord> iterable=format.parse(new StringReader(csvString));final Iterator<CSVRecord> iterator=iterable.iterator();final CSVRecord record=iterator.next();assertEquals(""a"",record.get(0));assertEquals(null,record.get(1));assertEquals(""b"",record.get(2));assertFalse(iterator.hasNext());((CSVParser)iterable).close();}"
"org.apache.commons.csv.CSVPrinterTest.testQuoteAll",0,"@Test public void testQuoteAll()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));printer.printRecord(""a"",""b\nc"",""d"");assertEquals(""\""a\"",\""b\nc\"",\""d\"""" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric",0,"@Test public void testQuoteNonNumeric()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuotePolicy(Quote.NON_NUMERIC));printer.printRecord(""a"",""b\nc"",Integer.valueOf(1));assertEquals(""\""a\"",\""b\nc\"",1"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testRandom",0,"@Test public void testRandom()throws Exception {final int iter=10000;doRandom(CSVFormat.DEFAULT,iter);doRandom(CSVFormat.EXCEL,iter);doRandom(CSVFormat.MYSQL,iter);}"
"org.apache.commons.csv.CSVPrinterTest.testPlainQuoted",0,"@Test public void testPlainQuoted()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar('\''));printer.print(""abc"");assertEquals(""abc"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testSingleLineComment",0,"@Test public void testSingleLineComment()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withCommentStart('#'));printer.printComment(""This is a comment"");assertEquals(""# This is a comment"" + recordSeparator,sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted",0,"@Test public void testSingleQuoteQuoted()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar('\''));printer.print(""a'b'c"");printer.print(""xyz"");assertEquals(""'a''b''c',xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted",0,"@Test public void testDelimeterQuoted()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar('\''));printer.print(""a,b,c"");printer.print(""xyz"");assertEquals(""'a,b,c',xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNONE",0,"@Test public void testDelimeterQuoteNONE()throws IOException {final StringWriter sw=new StringWriter();final CSVFormat format=CSVFormat.DEFAULT.withEscape('!').withQuotePolicy(Quote.NONE);final CSVPrinter printer=new CSVPrinter(sw,format);printer.print(""a,b,c"");printer.print(""xyz"");assertEquals(""a!,b!,c,xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testEOLQuoted",0,"@Test public void testEOLQuoted()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar('\''));printer.print(""a\rb\nc"");printer.print(""x\by\fz"");assertEquals(""'a\rb\nc',x\by\fz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPlainEscaped",0,"@Test public void testPlainEscaped()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar(null).withEscape('!'));printer.print(""abc"");printer.print(""xyz"");assertEquals(""abc,xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped",0,"@Test public void testDelimiterEscaped()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withEscape('!').withQuoteChar(null));printer.print(""a,b,c"");printer.print(""xyz"");assertEquals(""a!,b!,c,xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testEOLEscaped",0,"@Test public void testEOLEscaped()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar(null).withEscape('!'));printer.print(""a\rb\nc"");printer.print(""x\fy\bz"");assertEquals(""a!rb!nc,x\fy\bz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testPlainPlain",0,"@Test public void testPlainPlain()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar(null));printer.print(""abc"");printer.print(""xyz"");assertEquals(""abc,xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain",0,"@Test public void testDelimiterPlain()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar(null));printer.print(""a,b,c"");printer.print(""xyz"");assertEquals(""a,b,c,xyz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testEOLPlain",0,"@Test public void testEOLPlain()throws IOException {final StringWriter sw=new StringWriter();final CSVPrinter printer=new CSVPrinter(sw,CSVFormat.DEFAULT.withQuoteChar(null));printer.print(""a\rb\nc"");printer.print(""x\fy\bz"");assertEquals(""a\rb\nc,x\fy\bz"",sw.toString());printer.close();}"
"org.apache.commons.csv.CSVPrinterTest.testInvalidFormat",0,"@Test(expected=IllegalArgumentException.class)public void testInvalidFormat()throws Exception {final CSVFormat invalidFormat=CSVFormat.DEFAULT.withDelimiter(CR);new CSVPrinter(new StringWriter(),invalidFormat).close();}"
"org.apache.commons.csv.CSVPrinterTest.testNewCSVPrinterNullAppendableFormat",0,"@Test(expected=IllegalArgumentException.class)public void testNewCSVPrinterNullAppendableFormat()throws Exception {new CSVPrinter(null,CSVFormat.DEFAULT).close();}"
"org.apache.commons.csv.CSVPrinterTest.testNewCsvPrinterAppendableNullFormat",0,"@Test(expected=IllegalArgumentException.class)public void testNewCsvPrinterAppendableNullFormat()throws Exception {new CSVPrinter(new StringWriter(),null).close();}"
