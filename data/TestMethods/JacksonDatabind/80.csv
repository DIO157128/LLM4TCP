test_case,faulty,test_code
"com.fasterxml.jackson.databind.exc.TestExceptionsDuringWriting.testCatchAndRethrow",0,"/** * Unit test that verifies that by default all exceptions except for JsonMappingException are caught and wrapped.*/public void testCatchAndRethrow()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test-exceptions"",Version.unknownVersion());module.addSerializer(Bean.class,new SerializerWithErrors());mapper.registerModule(module);try {StringWriter sw=new StringWriter();Bean[]b={new Bean()};List<Bean[]> l=new ArrayList<Bean[]>();l.add(b);mapper.writeValue(sw,l);fail(""Should have gotten an exception"");}catch(IOException e){verifyException(e,""test string"");Throwable root=e.getCause();assertNotNull(root);if (!(root instanceof IllegalArgumentException)){fail(""Wrapped exception not IAE,but "" + root.getClass());}}}"
"com.fasterxml.jackson.databind.exc.TestExceptionsDuringWriting.testExceptionWithSimpleMapper",0,"/** * Unit test for verifying that regular IOExceptions are not wrapped but are passed through as is.*/@SuppressWarnings(""resource"")public void testExceptionWithSimpleMapper()throws Exception {ObjectMapper mapper=new ObjectMapper();try {BrokenStringWriter sw=new BrokenStringWriter(""TEST"");mapper.writeValue(sw,createLongObject());fail(""Should have gotten an exception"");}catch(IOException e){verifyException(e,IOException.class,""TEST"");}}"
"com.fasterxml.jackson.databind.exc.TestExceptionsDuringWriting.testExceptionWithMapperAndGenerator",0,"@SuppressWarnings(""resource"")public void testExceptionWithMapperAndGenerator()throws Exception {ObjectMapper mapper=new ObjectMapper();JsonFactory f=new MappingJsonFactory();BrokenStringWriter sw=new BrokenStringWriter(""TEST"");JsonGenerator jg=f.createGenerator(sw);try {mapper.writeValue(jg,createLongObject());fail(""Should have gotten an exception"");}catch(IOException e){verifyException(e,IOException.class,""TEST"");}}"
"com.fasterxml.jackson.databind.exc.TestExceptionsDuringWriting.testExceptionWithGeneratorMapping",0,"@SuppressWarnings(""resource"")public void testExceptionWithGeneratorMapping()throws Exception {JsonFactory f=new MappingJsonFactory();JsonGenerator jg=f.createGenerator(new BrokenStringWriter(""TEST""));try {jg.writeObject(createLongObject());fail(""Should have gotten an exception"");}catch(Exception e){verifyException(e,IOException.class,""TEST"");}}"
"com.fasterxml.jackson.databind.exc.TestExceptionsDuringWriting.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.BasicExceptionTest.testBadDefinition",0,"public void testBadDefinition()throws Exception {JavaType t=TypeFactory.defaultInstance().constructType(String.class);JsonParser p=JSON_F.createParser(""[]"");InvalidDefinitionException e=new InvalidDefinitionException(p,""Testing"",t);assertEquals(""Testing"",e.getOriginalMessage());assertEquals(String.class,e.getType().getRawClass());assertNull(e.getBeanDescription());assertNull(e.getProperty());assertSame(p,e.getProcessor());p.close();BeanDescription beanDef=MAPPER.getSerializationConfig().introspectClassAnnotations(getClass());e=InvalidDefinitionException.from(p,""Testing"",beanDef,(BeanPropertyDefinition)null);assertEquals(beanDef.getType(),e.getType());assertNotNull(e);JsonGenerator g=JSON_F.createGenerator(new StringWriter());e=new InvalidDefinitionException(p,""Testing"",t);assertEquals(""Testing"",e.getOriginalMessage());assertEquals(String.class,e.getType().getRawClass());e=InvalidDefinitionException.from(g,""Testing"",beanDef,(BeanPropertyDefinition)null);assertEquals(beanDef.getType(),e.getType());assertNotNull(e);g.close();}"
"com.fasterxml.jackson.databind.exc.BasicExceptionTest.testInvalidFormat",0,"@SuppressWarnings(""deprecation"")public void testInvalidFormat()throws Exception {InvalidFormatException e=new InvalidFormatException(""Testing"",Boolean.TRUE,String.class);assertSame(Boolean.TRUE,e.getValue());assertNull(e.getProcessor());assertNotNull(e);e=new InvalidFormatException(""Testing"",JsonLocation.NA,Boolean.TRUE,String.class);assertSame(Boolean.TRUE,e.getValue());assertNull(e.getProcessor());assertNotNull(e);}"
"com.fasterxml.jackson.databind.exc.BasicExceptionTest.testIgnoredProperty",0,"public void testIgnoredProperty()throws Exception {JsonParser p=JSON_F.createParser(""{}"");IgnoredPropertyException e=IgnoredPropertyException.from(p,this,""testProp"",Collections.<Object>singletonList(""x""));assertNotNull(e);e=IgnoredPropertyException.from(p,getClass(),""testProp"",null);assertNotNull(e);assertNull(e.getKnownPropertyIds());p.close();try {IgnoredPropertyException.from(p,null,""testProp"",Collections.<Object>singletonList(""x""));fail(""Should not pass"");}catch(NullPointerException e2){}}"
"com.fasterxml.jackson.databind.exc.BasicExceptionTest.testUnrecognizedProperty",0,"public void testUnrecognizedProperty()throws Exception {JsonParser p=JSON_F.createParser(""{}"");UnrecognizedPropertyException e=UnrecognizedPropertyException.from(p,this,""testProp"",Collections.<Object>singletonList(""y""));assertNotNull(e);assertEquals(getClass(),e.getReferringClass());Collection<Object> ids=e.getKnownPropertyIds();assertNotNull(ids);assertEquals(1,ids.size());assertTrue(ids.contains(""y""));e=UnrecognizedPropertyException.from(p,getClass(),""testProp"",Collections.<Object>singletonList(""y""));assertEquals(getClass(),e.getReferringClass());p.close();}"
"com.fasterxml.jackson.databind.exc.BasicExceptionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer.testWithEnumKeys",0,"public void testWithEnumKeys()throws Exception {ObjectMapper plainObjectMapper=new ObjectMapper();JsonNode tree=plainObjectMapper.readTree(aposToQuotes(""{'red' :['a','b']}""));ObjectMapper fancyObjectMapper=new ObjectMapper().registerModule(new TestEnumModule());Map<TestEnum,Set<String>> map=fancyObjectMapper.convertValue(tree,new TypeReference<Map<TestEnum,Set<String>>>(){});assertNotNull(map);}"
"com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer.testCustomEnumKeySerializerWithPolymorphic",0,"public void testCustomEnumKeySerializerWithPolymorphic()throws IOException {SimpleModule simpleModule=new SimpleModule();simpleModule.addDeserializer(SuperTypeEnum.class,new JsonDeserializer<SuperTypeEnum>(){@Override public SuperTypeEnum deserialize(JsonParser p,DeserializationContext deserializationContext)throws IOException {return SuperTypeEnum.valueOf(p.getText());}});ObjectMapper mapper=new ObjectMapper().registerModule(simpleModule);SuperType superType=mapper.readValue(""{\""someMap\"": {\""FOO\"": \""bar\""}}"",SuperType.class);assertEquals(""Deserialized someMap.FOO should equal bar"",""bar"",superType.someMap.get(SuperTypeEnum.FOO));}"
"com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer.testCustomEnumValueAndKeyViaModifier",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testCustomEnumValueAndKeyViaModifier()throws IOException {SimpleModule module=new SimpleModule();module.setDeserializerModifier(new BeanDeserializerModifier(){@Override public JsonDeserializer<Enum> modifyEnumDeserializer(DeserializationConfig config,final JavaType type,BeanDescription beanDesc,final JsonDeserializer<?> deserializer){return new JsonDeserializer<Enum>(){@Override public Enum deserialize(JsonParser p,DeserializationContext ctxt)throws IOException {Class<? extends Enum> rawClass=(Class<Enum<?>>)type.getRawClass();final String str=p.getValueAsString().toLowerCase();return KeyEnum.valueOf(rawClass,str);}};}@Override public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config,final JavaType type,KeyDeserializer deserializer){if (!type.isEnumType()){return deserializer;}return new KeyDeserializer(){@Override public Object deserializeKey(String key,DeserializationContext ctxt)throws IOException {Class<? extends Enum> rawClass=(Class<Enum<?>>)type.getRawClass();return Enum.valueOf(rawClass,key.toLowerCase());}};}});ObjectMapper mapper=new ObjectMapper().registerModule(module);KeyEnum key=mapper.readValue(quote(KeyEnum.replacements.name().toUpperCase()),KeyEnum.class);assertSame(KeyEnum.replacements,key);EnumMap<KeyEnum,String> map=mapper.readValue(aposToQuotes(""{'REPlaceMENTS':'foobar'}""),new TypeReference<EnumMap<KeyEnum,String>>(){});assertEquals(1,map.size());assertSame(KeyEnum.replacements,map.keySet().iterator().next());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testFactorFeatures",0,"public void testFactorFeatures(){assertTrue(MAPPER.isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testGeneratorFeatures",0,"public void testGeneratorFeatures(){ObjectMapper mapper=new ObjectMapper();assertFalse(mapper.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertTrue(mapper.isEnabled(JsonGenerator.Feature.QUOTE_FIELD_NAMES));mapper.disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM,JsonGenerator.Feature.QUOTE_FIELD_NAMES);}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testParserFeatures",0,"public void testParserFeatures(){ObjectMapper mapper=new ObjectMapper();assertTrue(mapper.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));assertFalse(mapper.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));mapper.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE,JsonParser.Feature.STRICT_DUPLICATE_DETECTION);assertFalse(mapper.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testCopy",0,"public void testCopy()throws Exception {ObjectMapper m=new ObjectMapper();assertTrue(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));m.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));InjectableValues inj=new InjectableValues.Std();m.setInjectableValues(inj);assertFalse(m.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));m.enable(JsonParser.Feature.ALLOW_COMMENTS);assertTrue(m.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));ObjectMapper m2=m.copy();assertFalse(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));m2.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);assertTrue(m2.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));assertSame(inj,m2.getInjectableValues());assertFalse(m.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));assertFalse(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));m.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);assertTrue(m.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));assertFalse(m2.isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE));assertNotSame(m.getFactory(),m2.getFactory());assertEquals(0,m.getSerializationConfig().mixInCount());assertEquals(0,m2.getSerializationConfig().mixInCount());assertEquals(0,m.getDeserializationConfig().mixInCount());assertEquals(0,m2.getDeserializationConfig().mixInCount());m.addMixIn(String.class,Integer.class);assertEquals(1,m.getSerializationConfig().mixInCount());assertEquals(0,m2.getSerializationConfig().mixInCount());assertEquals(1,m.getDeserializationConfig().mixInCount());assertEquals(0,m2.getDeserializationConfig().mixInCount());assertTrue(m2.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testCopyOfConfigOverrides",0,"public void testCopyOfConfigOverrides()throws Exception {ObjectMapper m=new ObjectMapper();SerializationConfig config=m.getSerializationConfig();assertEquals(JsonInclude.Value.empty(),config.getDefaultPropertyInclusion());assertEquals(JsonSetter.Value.empty(),config.getDefaultSetterInfo());assertNull(config.getDefaultMergeable());VisibilityChecker<?> defaultVis=config.getDefaultVisibilityChecker();assertEquals(VisibilityChecker.Std.class,defaultVis.getClass());JsonInclude.Value customIncl=JsonInclude.Value.empty().withValueInclusion(JsonInclude.Include.NON_DEFAULT);m.setDefaultPropertyInclusion(customIncl);JsonSetter.Value customSetter=JsonSetter.Value.forValueNulls(Nulls.SKIP);m.setDefaultSetterInfo(customSetter);m.setDefaultMergeable(Boolean.TRUE);VisibilityChecker<?> customVis=VisibilityChecker.Std.defaultInstance().withFieldVisibility(Visibility.ANY);m.setVisibility(customVis);assertSame(customVis,m.getVisibilityChecker());ObjectMapper m2=m.copy();SerializationConfig config2=m2.getSerializationConfig();assertSame(customIncl,config2.getDefaultPropertyInclusion());assertSame(customSetter,config2.getDefaultSetterInfo());assertEquals(Boolean.TRUE,config2.getDefaultMergeable());assertSame(customVis,config2.getDefaultVisibilityChecker());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testFailedCopy",0,"public void testFailedCopy()throws Exception {NoCopyMapper src=new NoCopyMapper();try {src.copy();fail(""Should not pass"");}catch(IllegalStateException e){verifyException(e,""does not override copy()"");}}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testAnnotationIntrospectorCopyin",0,"public void testAnnotationIntrospectorCopyin(){ObjectMapper m=new ObjectMapper();m.setAnnotationIntrospector(new MyAnnotationIntrospector());assertEquals(MyAnnotationIntrospector.class,m.getDeserializationConfig().getAnnotationIntrospector().getClass());ObjectMapper m2=m.copy();assertEquals(MyAnnotationIntrospector.class,m2.getDeserializationConfig().getAnnotationIntrospector().getClass());assertEquals(MyAnnotationIntrospector.class,m2.getSerializationConfig().getAnnotationIntrospector().getClass());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testProps",0,"public void testProps(){ObjectMapper m=new ObjectMapper();assertNotNull(m.getNodeFactory());JsonNodeFactory nf=new JsonNodeFactory(true);m.setNodeFactory(nf);assertNull(m.getInjectableValues());assertSame(nf,m.getNodeFactory());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testConfigForPropertySorting",0,"public void testConfigForPropertySorting()throws Exception {ObjectMapper m=new ObjectMapper();assertFalse(m.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));SerializationConfig sc=m.getSerializationConfig();assertFalse(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));assertFalse(sc.shouldSortPropertiesAlphabetically());DeserializationConfig dc=m.getDeserializationConfig();assertFalse(dc.shouldSortPropertiesAlphabetically());m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);sc=m.getSerializationConfig();assertTrue(sc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));assertTrue(sc.shouldSortPropertiesAlphabetically());dc=m.getDeserializationConfig();assertTrue(dc.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY));assertTrue(dc.shouldSortPropertiesAlphabetically());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testJsonFactoryLinkage",0,"public void testJsonFactoryLinkage(){assertSame(MAPPER,MAPPER.getFactory().getCodec());JsonFactory f=new JsonFactory();ObjectMapper m=new ObjectMapper(f);assertSame(f,m.getFactory());assertSame(m,f.getCodec());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testProviderConfig",0,"public void testProviderConfig()throws Exception {ObjectMapper m=new ObjectMapper();final String JSON=""{\""x\"" : 3 }"";assertEquals(0,m._deserializationContext._cache.cachedDeserializersCount());Bean bean=m.readValue(JSON,Bean.class);assertNotNull(bean);assertEquals(2,m._deserializationContext._cache.cachedDeserializersCount());m._deserializationContext._cache.flushCachedDeserializers();assertEquals(0,m._deserializationContext._cache.cachedDeserializersCount());m=new ObjectMapper();List<?> stuff=m.readValue(""[]"",List.class);assertNotNull(stuff);assertEquals(4,m._deserializationContext._cache.cachedDeserializersCount());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testCustomDefaultPrettyPrinter",0,"public void testCustomDefaultPrettyPrinter()throws Exception {final ObjectMapper m=new ObjectMapper();final int[]input=new int[]{1,2};assertEquals(""[1,2]"",m.writeValueAsString(input));m.enable(SerializationFeature.INDENT_OUTPUT);assertEquals(""[1,2 ]"",m.writeValueAsString(input));assertEquals(""[1,2 ]"",m.writerWithDefaultPrettyPrinter().writeValueAsString(input));assertEquals(""[1,2 ]"",m.writer().withDefaultPrettyPrinter().writeValueAsString(input));m.setDefaultPrettyPrinter(new FooPrettyPrinter());assertEquals(""[1,2]"",m.writeValueAsString(input));assertEquals(""[1,2]"",m.writerWithDefaultPrettyPrinter().writeValueAsString(input));assertEquals(""[1,2]"",m.writer().withDefaultPrettyPrinter().writeValueAsString(input));assertEquals(""[1,2]"",m.writer().without(SerializationFeature.INDENT_OUTPUT).writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testNonSerializabilityOfObject",0,"public void testNonSerializabilityOfObject(){ObjectMapper m=new ObjectMapper();assertFalse(m.canSerialize(Object.class));assertFalse(m.canSerialize(Object.class));m=new ObjectMapper();m.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);assertTrue(m.canSerialize(Object.class));assertTrue(MAPPER.writer().without(SerializationFeature.FAIL_ON_EMPTY_BEANS).canSerialize(Object.class));assertFalse(MAPPER.writer().with(SerializationFeature.FAIL_ON_EMPTY_BEANS).canSerialize(Object.class));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testEmptyBeanSerializability",0,"public void testEmptyBeanSerializability(){assertFalse(MAPPER.writer().with(SerializationFeature.FAIL_ON_EMPTY_BEANS).canSerialize(EmptyBean.class));assertTrue(MAPPER.writer().without(SerializationFeature.FAIL_ON_EMPTY_BEANS).canSerialize(EmptyBean.class));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testSerializerProviderAccess",0,"public void testSerializerProviderAccess()throws Exception {ObjectMapper mapper=new ObjectMapper();JsonSerializer<?> ser=mapper.getSerializerProviderInstance().findValueSerializer(Bean.class);assertNotNull(ser);assertEquals(Bean.class,ser.handledType());}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testCopyOfParserFeatures",0,"public void testCopyOfParserFeatures()throws Exception {ObjectMapper mapper=new ObjectMapper();assertFalse(mapper.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));mapper.configure(JsonParser.Feature.ALLOW_COMMENTS,true);assertTrue(mapper.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));ObjectMapper copy=mapper.copy();assertTrue(copy.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));copy.configure(JsonParser.Feature.ALLOW_COMMENTS,false);assertFalse(copy.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));assertTrue(mapper.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testDataOutputViaMapper",0,"public void testDataOutputViaMapper()throws Exception {ByteArrayOutputStream bytes=new ByteArrayOutputStream();ObjectNode input=MAPPER.createObjectNode();input.put(""a"",1);DataOutput data=new DataOutputStream(bytes);final String exp=""{\""a\"":1}"";MAPPER.writeValue(data,input);assertEquals(exp,bytes.toString(""UTF-8""));bytes.reset();data=new DataOutputStream(bytes);MAPPER.writer().writeValue(data,input);assertEquals(exp,bytes.toString(""UTF-8""));}"
"com.fasterxml.jackson.databind.ObjectMapperTest.testDataInputViaMapper",0,"@SuppressWarnings(""unchecked"")public void testDataInputViaMapper()throws Exception {byte[]src=""{\""a\"":1}"".getBytes(""UTF-8"");DataInput input=new DataInputStream(new ByteArrayInputStream(src));Map<String,Object> map=(Map<String,Object>)MAPPER.readValue(input,Map.class);assertEquals(Integer.valueOf(1),map.get(""a""));input=new DataInputStream(new ByteArrayInputStream(src));map=MAPPER.readerFor(Map.class).readValue(input);assertEquals(Integer.valueOf(1),map.get(""a""));input=new DataInputStream(new ByteArrayInputStream(src));JsonNode n=MAPPER.readerFor(Map.class).readTree(input);assertNotNull(n);}"
"com.fasterxml.jackson.databind.ObjectMapperTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderFailTest.testBuilderMethodReturnInvalidType",0,"public void testBuilderMethodReturnInvalidType()throws Exception {final String json=""{\""x\"":1}"";try {MAPPER.readValue(json,ValueClassWrongBuildType.class);fail(""Missing expected JsonProcessingException exception"");}catch(InvalidDefinitionException e){verifyException(e,""Build method"");verifyException(e,""has wrong return type"");}}"
"com.fasterxml.jackson.databind.deser.builder.BuilderFailTest.testExtraFields",0,"public void testExtraFields()throws Exception {final String json=aposToQuotes(""{'x':1,'y':2,'z':3}"");try {MAPPER.readValue(json,ValueClassXY.class);fail(""should not pass"");}catch(UnrecognizedPropertyException e){verifyException(e,""Unrecognized field \""z\"""");}}"
"com.fasterxml.jackson.databind.deser.builder.BuilderFailTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestJsonNode.testBoolean",0,"public void testBoolean()throws Exception {BooleanNode f=BooleanNode.getFalse();assertNotNull(f);assertTrue(f.isBoolean());assertSame(f,BooleanNode.valueOf(false));assertStandardEquals(f);assertFalse(f.booleanValue());assertFalse(f.asBoolean());assertEquals(""false"",f.asText());assertEquals(JsonToken.VALUE_FALSE,f.asToken());BooleanNode t=BooleanNode.getTrue();assertNotNull(t);assertTrue(t.isBoolean());assertSame(t,BooleanNode.valueOf(true));assertStandardEquals(t);assertTrue(t.booleanValue());assertTrue(t.asBoolean());assertEquals(""true"",t.asText());assertEquals(JsonToken.VALUE_TRUE,t.asToken());assertNodeNumbers(f,0,0.0);assertNodeNumbers(t,1,1.0);JsonNode result=objectMapper().readTree(""true\n"");assertFalse(result.isNull());assertFalse(result.isNumber());assertFalse(result.isTextual());assertTrue(result.isBoolean());assertType(result,BooleanNode.class);assertTrue(result.booleanValue());assertEquals(""true"",result.asText());assertFalse(result.isMissingNode());assertEquals(result,BooleanNode.valueOf(true));assertEquals(result,BooleanNode.getTrue());}"
"com.fasterxml.jackson.databind.node.TestJsonNode.testBinary",0,"public void testBinary()throws Exception {assertNull(BinaryNode.valueOf(null));assertNull(BinaryNode.valueOf(null,0,0));BinaryNode empty=BinaryNode.valueOf(new byte[1],0,0);assertSame(BinaryNode.EMPTY_BINARY_NODE,empty);assertStandardEquals(empty);byte[]data=new byte[3];data[1]=(byte)3;BinaryNode n=BinaryNode.valueOf(data,1,1);data[2]=(byte)3;BinaryNode n2=BinaryNode.valueOf(data,2,1);assertTrue(n.equals(n2));assertEquals(""\""Aw==\"""",n.toString());assertEquals(""AAMD"",new BinaryNode(data).asText());assertNodeNumbersForNonNumeric(n);}"
"com.fasterxml.jackson.databind.node.TestJsonNode.testPOJO",0,"public void testPOJO(){POJONode n=new POJONode(""x"");assertStandardEquals(n);assertEquals(n,new POJONode(""x""));assertEquals(""x"",n.asText());assertEquals(""x"",n.toString());assertEquals(new POJONode(null),new POJONode(null));assertNodeNumbersForNonNumeric(n);assertNodeNumbers(new POJONode(Integer.valueOf(123)),123,123.0);}"
"com.fasterxml.jackson.databind.node.TestJsonNode.testRawValue",0,"public void testRawValue()throws Exception {ObjectNode root=MAPPER.createObjectNode();root.putRawValue(""a"",new RawValue(new SerializedString(""[1,2,3]"")));assertEquals(""{\""a\"":[1,2,3]}"",MAPPER.writeValueAsString(root));}"
"com.fasterxml.jackson.databind.node.TestJsonNode.testCustomComparators",0,"public void testCustomComparators()throws Exception {ObjectNode nestedObject1=MAPPER.createObjectNode();nestedObject1.put(""value"",6);ArrayNode nestedArray1=MAPPER.createArrayNode();nestedArray1.add(7);ObjectNode root1=MAPPER.createObjectNode();root1.put(""value"",5);root1.set(""nested_object"",nestedObject1);root1.set(""nested_array"",nestedArray1);ObjectNode nestedObject2=MAPPER.createObjectNode();nestedObject2.put(""value"",6.9);ArrayNode nestedArray2=MAPPER.createArrayNode();nestedArray2.add(7.0);ObjectNode root2=MAPPER.createObjectNode();root2.put(""value"",5.0);root2.set(""nested_object"",nestedObject2);root2.set(""nested_array"",nestedArray2);assertFalse(root1.equals(root2));assertFalse(root2.equals(root1));assertTrue(root1.equals(root1));assertTrue(root2.equals(root2));assertTrue(nestedArray1.equals(nestedArray1));assertFalse(nestedArray1.equals(nestedArray2));assertFalse(nestedArray2.equals(nestedArray1));Comparator<JsonNode> cmp=new Comparator<JsonNode>(){@Override public int compare(JsonNode o1,JsonNode o2){if (o1 instanceof ContainerNode || o2 instanceof ContainerNode){fail(""container nodes should be traversed,comparator should not be invoked"");}if (o1.equals(o2)){return 0;}if ((o1 instanceof NumericNode)&& (o2 instanceof NumericNode)){int d1=((NumericNode)o1).asInt();int d2=((NumericNode)o2).asInt();if (d1 == d2){return 0;}if (d1 < d2){return -1;}return 1;}return 0;}};assertTrue(root1.equals(cmp,root2));assertTrue(root2.equals(cmp,root1));assertTrue(root1.equals(cmp,root1));assertTrue(root2.equals(cmp,root2));ArrayNode array3=MAPPER.createArrayNode();array3.add(123);assertFalse(root2.equals(cmp,nestedArray1));assertTrue(nestedArray1.equals(cmp,nestedArray1));assertFalse(nestedArray1.equals(cmp,root2));assertFalse(nestedArray1.equals(cmp,array3));}"
"com.fasterxml.jackson.databind.node.TestJsonNode.testArrayWithDefaultTyping",0,"public void testArrayWithDefaultTyping()throws Exception {ObjectMapper mapper=new ObjectMapper().enableDefaultTyping();JsonNode array=mapper.readTree(""[1,2 ]"");assertTrue(array.isArray());assertEquals(2,array.size());JsonNode obj=mapper.readTree(""{\""a\"" : 2 }"");assertTrue(obj.isObject());assertEquals(1,obj.size());assertEquals(2,obj.path(""a"").asInt());}"
"com.fasterxml.jackson.databind.node.TestJsonNode.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testSimpleObject",0,"public void testSimpleObject()throws Exception {String JSON=""{\""key\"" : 1,\""b\"" : \""x\"" }"";JsonNode root=MAPPER.readTree(JSON);assertFalse(root.isValueNode());assertTrue(root.isContainerNode());assertFalse(root.isArray());assertTrue(root.isObject());assertEquals(2,root.size());Iterator<JsonNode> it=root.iterator();assertNotNull(it);assertTrue(it.hasNext());JsonNode n=it.next();assertNotNull(n);assertEquals(IntNode.valueOf(1),n);assertTrue(it.hasNext());n=it.next();assertNotNull(n);assertEquals(TextNode.valueOf(""x""),n);assertFalse(it.hasNext());ObjectNode obNode=(ObjectNode)root;Iterator<Map.Entry<String,JsonNode>> fit=obNode.fields();assertTrue(fit.hasNext());Map.Entry<String,JsonNode> en=fit.next();assertEquals(""key"",en.getKey());assertEquals(IntNode.valueOf(1),en.getValue());assertTrue(fit.hasNext());en=fit.next();assertEquals(""b"",en.getKey());assertEquals(TextNode.valueOf(""x""),en.getValue());fit.remove();assertEquals(1,obNode.size());assertEquals(IntNode.valueOf(1),root.get(""key""));assertNull(root.get(""b""));}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testEmptyNodeAsValue",0,"public void testEmptyNodeAsValue()throws Exception {Data w=MAPPER.readValue(""{}"",Data.class);assertNotNull(w);}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testBasics",0,"public void testBasics(){ObjectNode n=new ObjectNode(JsonNodeFactory.instance);assertStandardEquals(n);assertFalse(n.elements().hasNext());assertFalse(n.fields().hasNext());assertFalse(n.fieldNames().hasNext());assertNull(n.get(""a""));assertTrue(n.path(""a"").isMissingNode());TextNode text=TextNode.valueOf(""x"");assertSame(n,n.set(""a"",text));assertEquals(1,n.size());assertTrue(n.elements().hasNext());assertTrue(n.fields().hasNext());assertTrue(n.fieldNames().hasNext());assertSame(text,n.get(""a""));assertSame(text,n.path(""a""));assertNull(n.get(""b""));assertNull(n.get(0));assertFalse(n.has(0));assertFalse(n.hasNonNull(0));assertTrue(n.has(""a""));assertTrue(n.hasNonNull(""a""));assertFalse(n.has(""b""));assertFalse(n.hasNonNull(""b""));ObjectNode n2=new ObjectNode(JsonNodeFactory.instance);n2.put(""b"",13);assertFalse(n.equals(n2));n.setAll(n2);assertEquals(2,n.size());n.set(""null"",(JsonNode)null);assertEquals(3,n.size());assertTrue(n.has(""null""));assertFalse(n.hasNonNull(""null""));n.put(""null"",""notReallNull"");assertEquals(3,n.size());assertNotNull(n.remove(""null""));assertEquals(2,n.size());Map<String,JsonNode> nodes=new HashMap<String,JsonNode>();nodes.put(""d"",text);n.setAll(nodes);assertEquals(3,n.size());n.removeAll();assertEquals(0,n.size());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testBigNumbers",0,"public void testBigNumbers(){ObjectNode n=new ObjectNode(JsonNodeFactory.instance);assertStandardEquals(n);BigInteger I=BigInteger.valueOf(3);BigDecimal DEC=new BigDecimal(""0.1"");n.put(""a"",DEC);n.put(""b"",I);assertEquals(2,n.size());assertTrue(n.path(""a"").isBigDecimal());assertEquals(DEC,n.get(""a"").decimalValue());assertTrue(n.path(""b"").isBigInteger());assertEquals(I,n.get(""b"").bigIntegerValue());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testNullChecking",0,"/** * Verify null handling*/public void testNullChecking(){ObjectNode o1=JsonNodeFactory.instance.objectNode();ObjectNode o2=JsonNodeFactory.instance.objectNode();o1.setAll(o2);assertEquals(0,o1.size());assertEquals(0,o2.size());o1.set(""x"",null);JsonNode n=o1.get(""x"");assertNotNull(n);assertSame(n,NullNode.instance);o1.put(""str"",(String)null);n=o1.get(""str"");assertNotNull(n);assertSame(n,NullNode.instance);o1.put(""d"",(BigDecimal)null);n=o1.get(""d"");assertNotNull(n);assertSame(n,NullNode.instance);o1.put(""3"",(BigInteger)null);n=o1.get(""3"");assertNotNull(3);assertSame(n,NullNode.instance);assertEquals(4,o1.size());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testNullChecking2",0,"/** * Another test to verify [JACKSON-227]...*/public void testNullChecking2(){ObjectNode src=MAPPER.createObjectNode();ObjectNode dest=MAPPER.createObjectNode();src.put(""a"",""b"");dest.setAll(src);}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testRemove",0,"public void testRemove(){ObjectNode ob=MAPPER.createObjectNode();ob.put(""a"",""a"");ob.put(""b"",""b"");ob.put(""c"",""c"");assertEquals(3,ob.size());assertSame(ob,ob.without(Arrays.asList(""a"",""c"")));assertEquals(1,ob.size());assertEquals(""b"",ob.get(""b"").textValue());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testRetain",0,"public void testRetain(){ObjectNode ob=MAPPER.createObjectNode();ob.put(""a"",""a"");ob.put(""b"",""b"");ob.put(""c"",""c"");assertEquals(3,ob.size());assertSame(ob,ob.retain(""a"",""c""));assertEquals(2,ob.size());assertEquals(""a"",ob.get(""a"").textValue());assertNull(ob.get(""b""));assertEquals(""c"",ob.get(""c"").textValue());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testValidWith",0,"public void testValidWith()throws Exception {ObjectNode root=MAPPER.createObjectNode();assertEquals(""{}"",MAPPER.writeValueAsString(root));JsonNode child=root.with(""prop"");assertTrue(child instanceof ObjectNode);assertEquals(""{\""prop\"":{}}"",MAPPER.writeValueAsString(root));}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testValidWithArray",0,"public void testValidWithArray()throws Exception {ObjectNode root=MAPPER.createObjectNode();assertEquals(""{}"",MAPPER.writeValueAsString(root));JsonNode child=root.withArray(""arr"");assertTrue(child instanceof ArrayNode);assertEquals(""{\""arr\"":[]}"",MAPPER.writeValueAsString(root));}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testInvalidWith",0,"public void testInvalidWith()throws Exception {JsonNode root=MAPPER.createArrayNode();try {root.with(""prop"");fail(""Expected exception"");}catch(UnsupportedOperationException e){verifyException(e,""not of type ObjectNode"");}ObjectNode root2=MAPPER.createObjectNode();root2.put(""prop"",13);try {root2.with(""prop"");fail(""Expected exception"");}catch(UnsupportedOperationException e){verifyException(e,""has value that is not"");}}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testInvalidWithArray",0,"public void testInvalidWithArray()throws Exception {JsonNode root=MAPPER.createArrayNode();try {root.withArray(""prop"");fail(""Expected exception"");}catch(UnsupportedOperationException e){verifyException(e,""not of type ObjectNode"");}ObjectNode root2=MAPPER.createObjectNode();root2.put(""prop"",13);try {root2.withArray(""prop"");fail(""Expected exception"");}catch(UnsupportedOperationException e){verifyException(e,""has value that is not"");}}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testSetAll",0,"public void testSetAll()throws Exception {ObjectNode root=MAPPER.createObjectNode();assertEquals(0,root.size());HashMap<String,JsonNode> map=new HashMap<String,JsonNode>();map.put(""a"",root.numberNode(1));root.setAll(map);assertEquals(1,root.size());assertTrue(root.has(""a""));assertFalse(root.has(""b""));map.put(""b"",root.numberNode(2));root.setAll(map);assertEquals(2,root.size());assertTrue(root.has(""a""));assertTrue(root.has(""b""));assertEquals(2,root.path(""b"").intValue());ObjectNode root2=MAPPER.createObjectNode();root2.setAll(root);assertEquals(2,root.size());assertEquals(2,root2.size());root2.setAll(root);assertEquals(2,root.size());assertEquals(2,root2.size());ObjectNode root3=MAPPER.createObjectNode();root3.put(""a"",2);root3.put(""c"",3);assertEquals(2,root3.path(""a"").intValue());root3.setAll(root2);assertEquals(3,root3.size());assertEquals(1,root3.path(""a"").intValue());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testFailOnDupKeys",0,"public void testFailOnDupKeys()throws Exception {final String DUP_JSON=""{\""a\"":1,\""a\"":2 }"";ObjectMapper mapper=new ObjectMapper();assertFalse(mapper.isEnabled(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY));ObjectNode root=(ObjectNode)mapper.readTree(DUP_JSON);assertEquals(2,root.path(""a"").asInt());try {mapper.reader(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY).readTree(DUP_JSON);fail(""Should have thrown exception!"");}catch(JsonMappingException e){verifyException(e,""duplicate field 'a'"");}}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testEqualityWrtOrder",0,"public void testEqualityWrtOrder()throws Exception {ObjectNode ob1=MAPPER.createObjectNode();ObjectNode ob2=MAPPER.createObjectNode();ob1.put(""a"",1);ob1.put(""b"",2);ob1.put(""c"",3);ob2.put(""b"",2);ob2.put(""c"",3);ob2.put(""a"",1);assertTrue(ob1.equals(ob2));assertTrue(ob2.equals(ob1));}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testSimplePath",0,"public void testSimplePath()throws Exception {JsonNode root=MAPPER.readTree(""{\""results\"" :{\""a\"" : 3}}"");assertTrue(root.isObject());JsonNode rnode=root.path(""results"");assertNotNull(rnode);assertTrue(rnode.isObject());assertEquals(3,rnode.path(""a"").intValue());}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testNonEmptySerialization",0,"public void testNonEmptySerialization()throws Exception {ObNodeWrapper w=new ObNodeWrapper(MAPPER.createObjectNode().put(""a"",3));assertEquals(""{\""node\"":{\""a\"":3}}"",MAPPER.writeValueAsString(w));w=new ObNodeWrapper(MAPPER.createObjectNode());assertEquals(""{}"",MAPPER.writeValueAsString(w));}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testIssue941",0,"public void testIssue941()throws Exception {ObjectNode object=MAPPER.createObjectNode();String json=MAPPER.writeValueAsString(object);ObjectNode de1=MAPPER.readValue(json,ObjectNode.class);assertNotNull(de1);MyValue de2=MAPPER.readValue(json,MyValue.class);assertNotNull(de2);}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.testSimpleMismatch",0,"public void testSimpleMismatch()throws Exception {ObjectMapper mapper=objectMapper();try {mapper.readValue(""[1,2,3 ]"",ObjectNode.class);fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""out of START_ARRAY token"");}}"
"com.fasterxml.jackson.databind.node.ObjectNodeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.UnwrappedCreatorParam265Test.testUnwrappedWithUnnamedCreatorParam",0,"public void testUnwrappedWithUnnamedCreatorParam()throws Exception {JPersonWithoutName person=new JPersonWithoutName(""MyName"",new JAddress(""main street"",""springfield"",""WA""));ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(person);try {mapper.readValue(json,JPersonWithoutName.class);fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Can not define Creator parameter"");verifyException(e,""@JsonUnwrapped"");}}"
"com.fasterxml.jackson.databind.struct.UnwrappedCreatorParam265Test.testUnwrappedWithNamedCreatorParam",0,"public void testUnwrappedWithNamedCreatorParam()throws Exception {JPersonWithName person=new JPersonWithName(""MyName"",new JAddress(""main street"",""springfield"",""WA""));ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(person);try {mapper.readValue(json,JPersonWithName.class);fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Can not define Creator property \""address\"""");verifyException(e,""@JsonUnwrapped"");}}"
"com.fasterxml.jackson.databind.struct.UnwrappedCreatorParam265Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.interop.TestJDKProxy.testSimple",0,"public void testSimple()throws Exception {IPlanet input=getProxy(IPlanet.class,new Planet(""Foo""));String json=MAPPER.writeValueAsString(input);assertEquals(""{\""name\"":\""Foo\""}"",json);Planet output=MAPPER.readValue(json,Planet.class);assertEquals(""Foo"",output.getName());}"
"com.fasterxml.jackson.databind.interop.TestJDKProxy.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.interop.TestExternalizable.testSerializeAsExternalizable",0,"@SuppressWarnings(""unused"")public void testSerializeAsExternalizable()throws Exception {ByteArrayOutputStream bytes=new ByteArrayOutputStream();ObjectOutputStream obs=new ObjectOutputStream(bytes);final MyPojo input=new MyPojo(13,""Foobar"",new int[]{1,2,3});obs.writeObject(input);obs.close();byte[]ser=bytes.toByteArray();byte[]json=MapperHolder.mapper().writeValueAsBytes(input);int ix=indexOf(ser,json);if (ix < 0){fail(""Serialization ("" + ser.length + "")does NOT contain JSON (of ""+ json.length+ "")"");}if (false){bytes=new ByteArrayOutputStream();obs=new ObjectOutputStream(bytes);MyPojoNative p=new MyPojoNative(13,""Foobar"",new int[]{1,2,3});obs.writeObject(p);obs.close();System.out.println(""Native size: "" + bytes.size()+ "",vs JSON: ""+ ser.length);}ObjectInputStream ins=new ObjectInputStream(new ByteArrayInputStream(ser));MyPojo output=(MyPojo)ins.readObject();ins.close();assertNotNull(output);assertEquals(input,output);}"
"com.fasterxml.jackson.databind.interop.TestExternalizable.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.testMapLikeTypeConstruction",0,"/** * Basic test for ensuring that we can get ""xxx-like"" types recognized.*/public void testMapLikeTypeConstruction()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));JavaType type=mapper.constructType(MyMapLikeType.class);assertTrue(type.isMapLikeType());JavaType param=((MapLikeType)type).getKeyType();assertNotNull(param);assertSame(String.class,param.getRawClass());param=((MapLikeType)type).getContentType();assertNotNull(param);assertSame(Integer.class,param.getRawClass());}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.testCollectionLikeTypeConstruction",0,"public void testCollectionLikeTypeConstruction()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));JavaType type=mapper.constructType(MyCollectionLikeType.class);assertTrue(type.isCollectionLikeType());JavaType param=((CollectionLikeType)type).getContentType();assertNotNull(param);assertSame(Integer.class,param.getRawClass());}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.testCollectionLikeSerialization",0,"public void testCollectionLikeSerialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));mapper.registerModule(new ModifierModule());assertEquals(""[19]"",mapper.writeValueAsString(new MyCollectionLikeType(19)));}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.testMapLikeSerialization",0,"public void testMapLikeSerialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));mapper.registerModule(new ModifierModule());assertEquals(""{\""x\"":\""xxx:3\""}"",mapper.writeValueAsString(new MyMapLikeType(""x"",3)));}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.testCollectionLikeDeserialization",0,"public void testCollectionLikeDeserialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));mapper.registerModule(new ModifierModule());MyMapLikeType result=mapper.readValue(""{\""a\"":13}"",MyMapLikeType.class);assertEquals(""a"",result.getKey());assertEquals(Integer.valueOf(13),result.getValue());}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.testMapLikeDeserialization",0,"public void testMapLikeDeserialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));mapper.registerModule(new ModifierModule());MyCollectionLikeType result=mapper.readValue(""[-37]"",MyCollectionLikeType.class);assertEquals(Integer.valueOf(-37),result.getValue());}"
"com.fasterxml.jackson.databind.module.TestTypeModifiers.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testShort",0,"public void testShort(){ShortNode n=ShortNode.valueOf((short)1);assertStandardEquals(n);assertTrue(0 != n.hashCode());assertEquals(JsonToken.VALUE_NUMBER_INT,n.asToken());assertEquals(JsonParser.NumberType.INT,n.numberType());assertEquals(1,n.intValue());assertEquals(1L,n.longValue());assertEquals(BigDecimal.ONE,n.decimalValue());assertEquals(BigInteger.ONE,n.bigIntegerValue());assertEquals(""1"",n.asText());assertNodeNumbers(n,1,1.0);assertTrue(ShortNode.valueOf((short)0).canConvertToInt());assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt());assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt());assertTrue(ShortNode.valueOf((short)0).canConvertToLong());assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong());assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong());}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testIntViaMapper",0,"public void testIntViaMapper()throws Exception {int value=-90184;JsonNode result=MAPPER.readTree(String.valueOf(value));assertTrue(result.isNumber());assertTrue(result.isIntegralNumber());assertTrue(result.isInt());assertType(result,IntNode.class);assertFalse(result.isLong());assertFalse(result.isFloatingPointNumber());assertFalse(result.isDouble());assertFalse(result.isNull());assertFalse(result.isTextual());assertFalse(result.isMissingNode());assertEquals(value,result.numberValue().intValue());assertEquals(value,result.intValue());assertEquals(String.valueOf(value),result.asText());assertEquals((double)value,result.doubleValue());assertEquals((long)value,result.longValue());assertEquals(result,IntNode.valueOf(value));}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testInt",0,"public void testInt(){IntNode n=IntNode.valueOf(1);assertStandardEquals(n);assertTrue(0 != n.hashCode());assertEquals(JsonToken.VALUE_NUMBER_INT,n.asToken());assertEquals(JsonParser.NumberType.INT,n.numberType());assertEquals(1,n.intValue());assertEquals(1L,n.longValue());assertEquals(BigDecimal.ONE,n.decimalValue());assertEquals(BigInteger.ONE,n.bigIntegerValue());assertEquals(""1"",n.asText());assertEquals(""1"",n.asText(""foo""));assertNodeNumbers(n,1,1.0);assertTrue(IntNode.valueOf(0).canConvertToInt());assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToInt());assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToInt());assertTrue(IntNode.valueOf(0).canConvertToLong());assertTrue(IntNode.valueOf(Integer.MAX_VALUE).canConvertToLong());assertTrue(IntNode.valueOf(Integer.MIN_VALUE).canConvertToLong());}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testLong",0,"public void testLong(){LongNode n=LongNode.valueOf(1L);assertStandardEquals(n);assertTrue(0 != n.hashCode());assertEquals(JsonToken.VALUE_NUMBER_INT,n.asToken());assertEquals(JsonParser.NumberType.LONG,n.numberType());assertEquals(1,n.intValue());assertEquals(1L,n.longValue());assertEquals(BigDecimal.ONE,n.decimalValue());assertEquals(BigInteger.ONE,n.bigIntegerValue());assertEquals(""1"",n.asText());assertNodeNumbers(n,1,1.0);assertTrue(LongNode.valueOf(0).canConvertToInt());assertTrue(LongNode.valueOf(Integer.MAX_VALUE).canConvertToInt());assertTrue(LongNode.valueOf(Integer.MIN_VALUE).canConvertToInt());assertFalse(LongNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt());assertFalse(LongNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt());assertTrue(LongNode.valueOf(0L).canConvertToLong());assertTrue(LongNode.valueOf(Long.MAX_VALUE).canConvertToLong());assertTrue(LongNode.valueOf(Long.MIN_VALUE).canConvertToLong());}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testLongViaMapper",0,"public void testLongViaMapper()throws Exception {long value=12345678L << 32;JsonNode result=MAPPER.readTree(String.valueOf(value));assertTrue(result.isNumber());assertTrue(result.isIntegralNumber());assertTrue(result.isLong());assertType(result,LongNode.class);assertFalse(result.isInt());assertFalse(result.isFloatingPointNumber());assertFalse(result.isDouble());assertFalse(result.isNull());assertFalse(result.isTextual());assertFalse(result.isMissingNode());assertEquals(value,result.numberValue().longValue());assertEquals(value,result.longValue());assertEquals(String.valueOf(value),result.asText());assertEquals((double)value,result.doubleValue());assertEquals(result,LongNode.valueOf(value));}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testDouble",0,"public void testDouble()throws Exception {DoubleNode n=DoubleNode.valueOf(0.25);assertStandardEquals(n);assertTrue(0 != n.hashCode());assertEquals(JsonToken.VALUE_NUMBER_FLOAT,n.asToken());assertEquals(JsonParser.NumberType.DOUBLE,n.numberType());assertEquals(0,n.intValue());assertEquals(0.25,n.doubleValue());assertNotNull(n.decimalValue());assertEquals(BigInteger.ZERO,n.bigIntegerValue());assertEquals(""0.25"",n.asText());assertNodeNumbers(DoubleNode.valueOf(4.5),4,4.5);assertTrue(DoubleNode.valueOf(0).canConvertToInt());assertTrue(DoubleNode.valueOf(Integer.MAX_VALUE).canConvertToInt());assertTrue(DoubleNode.valueOf(Integer.MIN_VALUE).canConvertToInt());assertFalse(DoubleNode.valueOf(1L + Integer.MAX_VALUE).canConvertToInt());assertFalse(DoubleNode.valueOf(-1L + Integer.MIN_VALUE).canConvertToInt());assertTrue(DoubleNode.valueOf(0L).canConvertToLong());assertTrue(DoubleNode.valueOf(Long.MAX_VALUE).canConvertToLong());assertTrue(DoubleNode.valueOf(Long.MIN_VALUE).canConvertToLong());JsonNode num=objectMapper().readTree("" -0.0"");assertTrue(num.isDouble());n=(DoubleNode)num;assertEquals(-0.0,n.doubleValue());assertEquals(""-0.0"",String.valueOf(n.doubleValue()));}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testDoubleViaMapper",0,"public void testDoubleViaMapper()throws Exception {double value=3.04;JsonNode result=MAPPER.readTree(String.valueOf(value));assertTrue(result.isNumber());assertFalse(result.isNull());assertType(result,DoubleNode.class);assertTrue(result.isFloatingPointNumber());assertTrue(result.isDouble());assertFalse(result.isInt());assertFalse(result.isLong());assertFalse(result.isIntegralNumber());assertFalse(result.isTextual());assertFalse(result.isMissingNode());assertEquals(value,result.doubleValue());assertEquals(value,result.numberValue().doubleValue());assertEquals((int)value,result.intValue());assertEquals((long)value,result.longValue());assertEquals(String.valueOf(value),result.asText());assertEquals(result,DoubleNode.valueOf(value));}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testFloat",0,"public void testFloat(){FloatNode n=FloatNode.valueOf(0.45f);assertStandardEquals(n);assertTrue(0 != n.hashCode());assertEquals(JsonToken.VALUE_NUMBER_FLOAT,n.asToken());assertEquals(JsonParser.NumberType.FLOAT,n.numberType());assertEquals(0,n.intValue());assertEquals(0.45f,n.floatValue());assertEquals(""0.45"",n.asText());assertEquals(""0.45"",String.valueOf((float)n.doubleValue()));assertNotNull(n.decimalValue());assertEquals(BigInteger.ZERO,n.bigIntegerValue());assertEquals(""0.45"",n.asText());assertNodeNumbers(FloatNode.valueOf(4.5f),4,4.5f);assertTrue(FloatNode.valueOf(0).canConvertToInt());assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToInt());assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToInt());assertFalse(FloatNode.valueOf(1000L + Integer.MAX_VALUE).canConvertToInt());assertFalse(FloatNode.valueOf(-1000L + Integer.MIN_VALUE).canConvertToInt());assertTrue(FloatNode.valueOf(0L).canConvertToLong());assertTrue(FloatNode.valueOf(Integer.MAX_VALUE).canConvertToLong());assertTrue(FloatNode.valueOf(Integer.MIN_VALUE).canConvertToLong());}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testDecimalNode",0,"public void testDecimalNode()throws Exception {DecimalNode n=DecimalNode.valueOf(BigDecimal.ONE);assertStandardEquals(n);assertTrue(n.equals(new DecimalNode(BigDecimal.ONE)));assertEquals(JsonToken.VALUE_NUMBER_FLOAT,n.asToken());assertEquals(JsonParser.NumberType.BIG_DECIMAL,n.numberType());assertTrue(n.isNumber());assertFalse(n.isIntegralNumber());assertFalse(n.isArray());assertTrue(n.isBigDecimal());assertEquals(BigDecimal.ONE,n.numberValue());assertEquals(1,n.intValue());assertEquals(1L,n.longValue());assertEquals(BigDecimal.ONE,n.decimalValue());assertEquals(""1"",n.asText());assertNodeNumbers(n,1,1.0);assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToInt());assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MAX_VALUE)).canConvertToInt());assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Integer.MIN_VALUE)).canConvertToInt());assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt());assertFalse(DecimalNode.valueOf(BigDecimal.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt());assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong());assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong());assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong());BigDecimal value=new BigDecimal(""0.1"");JsonNode result=DecimalNode.valueOf(value);assertFalse(result.isObject());assertTrue(result.isNumber());assertFalse(result.isIntegralNumber());assertFalse(result.isLong());assertType(result,DecimalNode.class);assertFalse(result.isInt());assertTrue(result.isFloatingPointNumber());assertTrue(result.isBigDecimal());assertFalse(result.isDouble());assertFalse(result.isNull());assertFalse(result.isTextual());assertFalse(result.isMissingNode());assertEquals(value,result.numberValue());assertEquals(value.toString(),result.asText());assertEquals(result,DecimalNode.valueOf(value));}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testDecimalNodeEqualsHashCode",0,"public void testDecimalNodeEqualsHashCode(){BigDecimal b1=BigDecimal.ONE;BigDecimal b2=new BigDecimal(""1.0"");BigDecimal b3=new BigDecimal(""0.01e2"");BigDecimal b4=new BigDecimal(""1000e-3"");DecimalNode node1=new DecimalNode(b1);DecimalNode node2=new DecimalNode(b2);DecimalNode node3=new DecimalNode(b3);DecimalNode node4=new DecimalNode(b4);assertEquals(node1.hashCode(),node2.hashCode());assertEquals(node2.hashCode(),node3.hashCode());assertEquals(node3.hashCode(),node4.hashCode());assertEquals(node1,node2);assertEquals(node2,node1);assertEquals(node2,node3);assertEquals(node3,node4);}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testBigIntegerNode",0,"public void testBigIntegerNode()throws Exception {BigIntegerNode n=BigIntegerNode.valueOf(BigInteger.ONE);assertStandardEquals(n);assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE)));assertEquals(JsonToken.VALUE_NUMBER_INT,n.asToken());assertEquals(JsonParser.NumberType.BIG_INTEGER,n.numberType());assertTrue(n.isNumber());assertTrue(n.isIntegralNumber());assertTrue(n.isBigInteger());assertEquals(BigInteger.ONE,n.numberValue());assertEquals(1,n.intValue());assertEquals(1L,n.longValue());assertEquals(BigInteger.ONE,n.bigIntegerValue());assertEquals(""1"",n.asText());assertNodeNumbers(n,1,1.0);BigInteger maxLong=BigInteger.valueOf(Long.MAX_VALUE);n=BigIntegerNode.valueOf(maxLong);assertEquals(Long.MAX_VALUE,n.longValue());ObjectMapper mapper=new ObjectMapper();JsonNode n2=mapper.readTree(maxLong.toString());assertEquals(Long.MAX_VALUE,n2.longValue());BigInteger beyondLong=maxLong.shiftLeft(2);n2=mapper.readTree(beyondLong.toString());assertEquals(beyondLong,n2.bigIntegerValue());assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt());assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt());assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt());assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt());assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt());assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong());assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong());assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong());}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testBigDecimalAsPlain",0,"public void testBigDecimalAsPlain()throws Exception {ObjectMapper mapper=new ObjectMapper().enable(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS).enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);final String INPUT=""{\""x\"":1e2}"";final JsonNode node=mapper.readTree(INPUT);String result=mapper.writeValueAsString(node);assertEquals(""{\""x\"":100}"",result);assertEquals(""{\""x\"":100}"",mapper.writer().writeValueAsString(node));BigDecimal bigDecimal=new BigDecimal(100);JsonNode tree=mapper.valueToTree(bigDecimal);assertEquals(""100"",mapper.writeValueAsString(tree));}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.testCanonicalNumbers",0,"public void testCanonicalNumbers()throws Exception {JsonNodeFactory f=new JsonNodeFactory();NumericNode n=f.numberNode(123);assertTrue(n.isInt());n=f.numberNode(1L + Integer.MAX_VALUE);assertFalse(n.isInt());assertTrue(n.isLong());n=f.numberNode(123L);assertTrue(n.isLong());}"
"com.fasterxml.jackson.databind.node.NumberNodesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestTypedContainerSerialization.testPolymorphicWithContainer",0,"public void testPolymorphicWithContainer()throws Exception {Dog dog=new Dog(""medor"");dog.setBoneCount(3);Container1 c1=new Container1();c1.setAnimal(dog);String s1=mapper.writeValueAsString(c1);Assert.assertTrue(""polymorphic type info is kept (1)"",s1.indexOf(""\""object-type\"":\""doggy\"""")>= 0);Container2<Animal> c2=new Container2<Animal>();c2.setAnimal(dog);String s2=mapper.writeValueAsString(c2);Assert.assertTrue(""polymorphic type info is kept (2)"",s2.indexOf(""\""object-type\"":\""doggy\"""")>= 0);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedContainerSerialization.testIssue329",0,"public void testIssue329()throws Exception {ArrayList<Animal> animals=new ArrayList<Animal>();animals.add(new Dog(""Spot""));JavaType rootType=TypeFactory.defaultInstance().constructParametrizedType(Iterator.class,Iterator.class,Animal.class);String json=mapper.writerFor(rootType).writeValueAsString(animals.iterator());if (json.indexOf(""\""object-type\"":\""doggy\"""")< 0){fail(""No polymorphic type retained,should be;JSON = '"" + json + ""'"");}}"
"com.fasterxml.jackson.databind.jsontype.TestTypedContainerSerialization.testIssue508",0,"public void testIssue508()throws Exception {List<List<Issue508A>> l=new ArrayList<List<Issue508A>>();List<Issue508A> l2=new ArrayList<Issue508A>();l2.add(new Issue508A());l.add(l2);TypeReference<?> typeRef=new TypeReference<List<List<Issue508A>>>(){};String json=mapper.writerFor(typeRef).writeValueAsString(l);List<?> output=mapper.readValue(json,typeRef);assertEquals(1,output.size());Object ob=output.get(0);assertTrue(ob instanceof List<?>);List<?> list2=(List<?>)ob;assertEquals(1,list2.size());ob=list2.get(0);assertSame(Issue508A.class,ob.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestTypedContainerSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TypeRefinementForMapTest.testMapRefinement",0,"public void testMapRefinement()throws Exception {String ID1=""3a6383d4-8123-4c43-8b8d-7cedf3e59404"";String ID2=""81c3d978-90c4-4b00-8da1-1c39ffcab02c"";String json=aposToQuotes(""{'id':'"" + ID1 + ""','items':[{'id':'""+ ID2+ ""','property':'value'}]}"");ObjectMapper m=new ObjectMapper();Data data=m.readValue(json,Data.class);assertEquals(ID1,data.id);assertNotNull(data.items);assertEquals(1,data.items.size());Item value=data.items.get(ID2);assertNotNull(value);assertEquals(""value"",value.property);}"
"com.fasterxml.jackson.databind.jsontype.TypeRefinementForMapTest.testMapKeyRefinement1384",0,"public void testMapKeyRefinement1384()throws Exception {final String TEST_INSTANCE_SERIALIZED=""{\""mapProperty\"":[\""java.util.HashMap\"",{\""Compound|Key\"":\""Value\""}]}"";ObjectMapper mapper=new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);TestClass testInstance=mapper.readValue(TEST_INSTANCE_SERIALIZED,TestClass.class);assertEquals(1,testInstance.mapProperty.size());Object key=testInstance.mapProperty.keySet().iterator().next();assertEquals(CompoundKey.class,key.getClass());String testInstanceSerialized=mapper.writeValueAsString(testInstance);assertEquals(TEST_INSTANCE_SERIALIZED,testInstanceSerialized);}"
"com.fasterxml.jackson.databind.jsontype.TypeRefinementForMapTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testSimpleValueDefinition",0,"@SuppressWarnings(""unchecked"")public void testSimpleValueDefinition()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new WrapperClassForAs());assertEquals(1,result.size());Object ob=result.get(""value"");result=(Map<String,Object>)ob;assertEquals(1,result.size());assertEquals(Integer.valueOf(3),result.get(""x""));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testBrokenAnnotation",0,"public void testBrokenAnnotation()throws Exception {try {serializeAsString(MAPPER,new BrokenClass());fail(""Should not succeed"");}catch(Exception e){verifyException(e,""types not related"");}}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testStaticTypingForClass",0,"@SuppressWarnings(""unchecked"")public void testStaticTypingForClass()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new WrapperClassForStaticTyping());assertEquals(1,result.size());Object ob=result.get(""value"");result=(Map<String,Object>)ob;assertEquals(1,result.size());assertEquals(Integer.valueOf(3),result.get(""x""));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testMixedTypingForClass",0,"@SuppressWarnings(""unchecked"")public void testMixedTypingForClass()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new WrapperClassForStaticTyping2());assertEquals(2,result.size());Object obStatic=result.get(""staticValue"");Map<String,Object> stat=(Map<String,Object>)obStatic;assertEquals(1,stat.size());assertEquals(Integer.valueOf(3),stat.get(""x""));Object obDynamic=result.get(""dynamicValue"");Map<String,Object> dyn=(Map<String,Object>)obDynamic;assertEquals(2,dyn.size());assertEquals(Integer.valueOf(3),dyn.get(""x""));assertEquals(Integer.valueOf(5),dyn.get(""y""));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testStaticTypingWithMap",0,"public void testStaticTypingWithMap()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_STATIC_TYPING,true);ValueMap map=new ValueMap();map.put(""a"",new ValueClass());assertEquals(""{\""a\"":{\""x\"":3}}"",serializeAsString(m,map));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testStaticTypingWithArrayList",0,"public void testStaticTypingWithArrayList()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_STATIC_TYPING,true);ValueList list=new ValueList();list.add(new ValueClass());assertEquals(""[{\""x\"":3}]"",m.writeValueAsString(list));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testStaticTypingWithLinkedList",0,"public void testStaticTypingWithLinkedList()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_STATIC_TYPING,true);ValueLinkedList list=new ValueLinkedList();list.add(new ValueClass());assertEquals(""[{\""x\"":3}]"",serializeAsString(m,list));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testStaticTypingWithArray",0,"public void testStaticTypingWithArray()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_STATIC_TYPING,true);ValueInterface[]array=new ValueInterface[]{new ValueClass()};assertEquals(""[{\""x\"":3}]"",serializeAsString(m,array));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testIssue294",0,"public void testIssue294()throws Exception {assertEquals(""{\""id\"":\""fooId\"",\""bar\"":\""barId\""}"",MAPPER.writeValueAsString(new Foo294(""fooId"",""barId"")));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.testWithIsGetter",0,"public void testWithIsGetter()throws Exception {ObjectMapper m=new ObjectMapper();m.setVisibility(PropertyAccessor.GETTER,Visibility.NONE).setVisibility(PropertyAccessor.FIELD,Visibility.ANY).setVisibility(PropertyAccessor.CREATOR,Visibility.NONE).setVisibility(PropertyAccessor.IS_GETTER,Visibility.NONE).setVisibility(PropertyAccessor.SETTER,Visibility.NONE);final String JSON=m.writeValueAsString(new Response());assertEquals(aposToQuotes(""{'a':'x','something':true}""),JSON);}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.DelegatingCreatorImplicitNames1001Test.testWithoutNamedParameters",0,"public void testWithoutNamedParameters()throws Exception {ObjectMapper sut=new ObjectMapper();D d=D.make(""abc:def"");String actualJson=sut.writeValueAsString(d);D actualD=sut.readValue(actualJson,D.class);assertEquals(""\""abc:def\"""",actualJson);assertEquals(d,actualD);}"
"com.fasterxml.jackson.databind.creators.DelegatingCreatorImplicitNames1001Test.testWithNamedParameters",0,"public void testWithNamedParameters()throws Exception {ObjectMapper sut=new ObjectMapper().setAnnotationIntrospector(new CreatorNameIntrospector());D d=D.make(""abc:def"");String actualJson=sut.writeValueAsString(d);D actualD=sut.readValue(actualJson,D.class);assertEquals(""\""abc:def\"""",actualJson);assertEquals(d,actualD);}"
"com.fasterxml.jackson.databind.creators.DelegatingCreatorImplicitNames1001Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestTypeBindings.testInnerType",0,"public void testInnerType()throws Exception {TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(InnerGenericTyping.InnerClass.class);assertEquals(MapType.class,type.getClass());JavaType keyType=type.getKeyType();assertEquals(Object.class,keyType.getRawClass());JavaType valueType=type.getContentType();assertEquals(Collection.class,valueType.getRawClass());JavaType vt2=valueType.getContentType();assertEquals(Object.class,vt2.getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeBindings.testRecursiveType",0,"public void testRecursiveType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(HashTree.class);assertNotNull(type);}"
"com.fasterxml.jackson.databind.type.TestTypeBindings.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.RequiredCreatorTest.testRequiredAnnotatedParam",0,"public void testRequiredAnnotatedParam()throws Exception {FascistPoint p;p=POINT_READER.readValue(aposToQuotes(""{'y':2,'x':1}""));assertEquals(1,p.x);assertEquals(2,p.y);p=POINT_READER.readValue(aposToQuotes(""{'x':3,'y':4}""));assertEquals(3,p.x);assertEquals(4,p.y);p=POINT_READER.readValue(aposToQuotes(""{'x':3}""));assertEquals(3,p.x);assertEquals(0,p.y);try {POINT_READER.readValue(aposToQuotes(""{'y':3}""));fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Missing required creator property 'x' (index 0)"");}}"
"com.fasterxml.jackson.databind.creators.RequiredCreatorTest.testRequiredGloballyParam",0,"public void testRequiredGloballyParam()throws Exception {FascistPoint p;p=POINT_READER.readValue(aposToQuotes(""{'x':2}""));assertEquals(2,p.x);assertEquals(0,p.y);ObjectReader r=POINT_READER.with(DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES);try {r.readValue(aposToQuotes(""{'x':6}""));fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Missing creator property 'y' (index 1)"");}}"
"com.fasterxml.jackson.databind.creators.RequiredCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest.testReadOnlyAndWriteOnly",0,"public void testReadOnlyAndWriteOnly()throws Exception {String json=MAPPER.writeValueAsString(new ReadXWriteY());assertEquals(""{\""x\"":1}"",json);ReadXWriteY result=MAPPER.readValue(""{\""x\"":5,\""y\"":6}"",ReadXWriteY.class);assertNotNull(result);assertEquals(1,result.x);assertEquals(6,result.y);}"
"com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest.testReadOnly935",0,"public void testReadOnly935()throws Exception {String json=MAPPER.writeValueAsString(new Pojo935());Pojo935 result=MAPPER.readValue(json,Pojo935.class);assertNotNull(result);}"
"com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest.testReadOnly1345",0,"public void testReadOnly1345()throws Exception {Foo1345 result=MAPPER.readValue(""{\""name\"":\""test\""}"",Foo1345.class);assertNotNull(result);assertEquals(""test"",result.name);assertNull(result.id);}"
"com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testBasicConfig",0,"public void testBasicConfig()throws IOException {TokenBuffer buf;buf=new TokenBuffer(MAPPER,false);assertEquals(MAPPER.version(),buf.version());assertSame(MAPPER,buf.getCodec());assertNotNull(buf.getOutputContext());assertFalse(buf.isClosed());buf.setCodec(null);assertNull(buf.getCodec());assertFalse(buf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));buf.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);assertTrue(buf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));buf.disable(JsonGenerator.Feature.ESCAPE_NON_ASCII);assertFalse(buf.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));buf.close();assertTrue(buf.isClosed());}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testSimpleWrites",0,"/** * Test writing of individual simple values*/public void testSimpleWrites()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);JsonParser p=buf.asParser();assertNull(p.getCurrentToken());assertNull(p.nextToken());p.close();buf.writeString(""abc"");p=buf.asParser();assertNull(p.getCurrentToken());assertToken(JsonToken.VALUE_STRING,p.nextToken());assertEquals(""abc"",p.getText());assertNull(p.nextToken());p.close();buf.writeNumber(13);p=buf.asParser();assertNull(p.getCurrentToken());assertToken(JsonToken.VALUE_STRING,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(13,p.getIntValue());assertNull(p.nextToken());p.close();buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testSimpleNumberWrites",0,"public void testSimpleNumberWrites()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);double[]values1=new double[]{0.25,Double.NaN,-2.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY};float[]values2=new float[]{Float.NEGATIVE_INFINITY,0.25f,Float.POSITIVE_INFINITY};for(double v : values1){buf.writeNumber(v);}for(float v : values2){buf.writeNumber(v);}JsonParser p=buf.asParser();assertNull(p.getCurrentToken());for(double v : values1){assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());double actual=p.getDoubleValue();boolean expNan=Double.isNaN(v)|| Double.isInfinite(v);assertEquals(expNan,p.isNaN());assertEquals(0,Double.compare(v,actual));}for(float v : values2){assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());float actual=p.getFloatValue();boolean expNan=Float.isNaN(v)|| Float.isInfinite(v);assertEquals(expNan,p.isNaN());assertEquals(0,Float.compare(v,actual));}p.close();buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testParentContext",0,"public void testParentContext()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);buf.writeStartObject();buf.writeFieldName(""b"");buf.writeStartObject();buf.writeFieldName(""c"");assertEquals(""b"",buf.getOutputContext().getParent().getCurrentName());buf.writeString(""cval"");buf.writeEndObject();buf.writeEndObject();buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testSimpleArray",0,"public void testSimpleArray()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);assertTrue(buf.getOutputContext().inRoot());buf.writeStartArray();assertTrue(buf.getOutputContext().inArray());buf.writeEndArray();assertTrue(buf.getOutputContext().inRoot());JsonParser p=buf.asParser();assertNull(p.getCurrentToken());assertTrue(p.getParsingContext().inRoot());assertToken(JsonToken.START_ARRAY,p.nextToken());assertTrue(p.getParsingContext().inArray());assertToken(JsonToken.END_ARRAY,p.nextToken());assertTrue(p.getParsingContext().inRoot());assertNull(p.nextToken());p.close();buf.close();buf=new TokenBuffer(null,false);buf.writeStartArray();buf.writeBoolean(true);buf.writeNull();buf.writeEndArray();p=buf.asParser();assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_TRUE,p.nextToken());assertTrue(p.getBooleanValue());assertToken(JsonToken.VALUE_NULL,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertNull(p.nextToken());p.close();buf.close();buf=new TokenBuffer(null,false);buf.writeStartArray();buf.writeStartArray();buf.writeBinary(new byte[3]);buf.writeEndArray();buf.writeEndArray();p=buf.asParser();assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_EMBEDDED_OBJECT,p.nextToken());Object ob=p.getEmbeddedObject();assertNotNull(ob);assertTrue(ob instanceof byte[]);assertEquals(3,((byte[])ob).length);assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertNull(p.nextToken());p.close();buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testSimpleObject",0,"public void testSimpleObject()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);assertTrue(buf.getOutputContext().inRoot());buf.writeStartObject();assertTrue(buf.getOutputContext().inObject());buf.writeEndObject();assertTrue(buf.getOutputContext().inRoot());JsonParser p=buf.asParser();assertNull(p.getCurrentToken());assertTrue(p.getParsingContext().inRoot());assertToken(JsonToken.START_OBJECT,p.nextToken());assertTrue(p.getParsingContext().inObject());assertToken(JsonToken.END_OBJECT,p.nextToken());assertTrue(p.getParsingContext().inRoot());assertNull(p.nextToken());p.close();buf.close();buf=new TokenBuffer(null,false);buf.writeStartObject();buf.writeNumberField(""num"",1.25);buf.writeEndObject();p=buf.asParser();assertNull(p.getCurrentToken());assertToken(JsonToken.START_OBJECT,p.nextToken());assertNull(p.getCurrentName());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""num"",p.getCurrentName());p.overrideCurrentName(""bah"");assertEquals(""bah"",p.getCurrentName());assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertEquals(1.25,p.getDoubleValue());assertEquals(""bah"",p.getCurrentName());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.getCurrentName());assertNull(p.nextToken());p.close();buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testWithJSONSampleDoc",0,"/** * Verify handling of that ""standard"" test document (from JSON specification)*/public void testWithJSONSampleDoc()throws Exception {JsonParser p=createParserUsingReader(SAMPLE_DOC_JSON_SPEC);TokenBuffer tb=new TokenBuffer(null,false);while (p.nextToken()!= null){tb.copyCurrentEvent(p);}verifyJsonSpecSampleDoc(tb.asParser(),false);verifyJsonSpecSampleDoc(tb.asParser(),true);tb.close();p.close();String desc=tb.toString();assertNotNull(desc);}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testAppend",0,"public void testAppend()throws IOException {TokenBuffer buf1=new TokenBuffer(null,false);buf1.writeStartObject();buf1.writeFieldName(""a"");buf1.writeBoolean(true);TokenBuffer buf2=new TokenBuffer(null,false);buf2.writeFieldName(""b"");buf2.writeNumber(13);buf2.writeEndObject();buf1.append(buf2);JsonParser p=buf1.asParser();assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""a"",p.getCurrentName());assertToken(JsonToken.VALUE_TRUE,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""b"",p.getCurrentName());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(13,p.getIntValue());assertToken(JsonToken.END_OBJECT,p.nextToken());p.close();buf1.close();buf2.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testWithUUID",0,"public void testWithUUID()throws IOException {for(String value : new String[]{""00000007-0000-0000-0000-000000000000"",""76e6d183-5f68-4afa-b94a-922c1fdb83f8"",""540a88d1-e2d8-4fb1-9396-9212280d0a7f"",""2c9e441d-1cd0-472d-9bab-69838f877574"",""591b2869-146e-41d7-8048-e8131f1fdec5"",""82994ac2-7b23-49f2-8cc5-e24cf6ed77be""}){TokenBuffer buf=new TokenBuffer(MAPPER,false);UUID uuid=UUID.fromString(value);MAPPER.writeValue(buf,uuid);buf.close();UUID out=MAPPER.readValue(buf.asParser(),UUID.class);assertEquals(uuid.toString(),out.toString());JsonParser p=buf.asParser();assertEquals(JsonToken.VALUE_STRING,p.nextToken());String str=p.getText();assertEquals(value,str);p.close();}}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testOutputContext",0,"public void testOutputContext()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);StringWriter w=new StringWriter();JsonGenerator gen=MAPPER.getFactory().createGenerator(w);buf.writeStartArray();gen.writeStartArray();_verifyOutputContext(buf,gen);buf.writeStartObject();gen.writeStartObject();_verifyOutputContext(buf,gen);buf.writeFieldName(""a"");gen.writeFieldName(""a"");_verifyOutputContext(buf,gen);buf.writeNumber(1);gen.writeNumber(1);_verifyOutputContext(buf,gen);buf.writeFieldName(""b"");gen.writeFieldName(""b"");_verifyOutputContext(buf,gen);buf.writeStartObject();gen.writeStartObject();_verifyOutputContext(buf,gen);buf.writeFieldName(""c"");gen.writeFieldName(""c"");_verifyOutputContext(buf,gen);buf.writeNumber(2);gen.writeNumber(2);_verifyOutputContext(buf,gen);buf.writeEndObject();gen.writeEndObject();_verifyOutputContext(buf,gen);buf.writeEndObject();gen.writeEndObject();_verifyOutputContext(buf,gen);buf.writeEndArray();gen.writeEndArray();_verifyOutputContext(buf,gen);buf.close();gen.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testParentSiblingContext",0,"public void testParentSiblingContext()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);buf.writeStartObject();buf.writeFieldName(""a"");buf.writeStartObject();buf.writeEndObject();buf.writeFieldName(""b"");buf.writeStartObject();buf.writeFieldName(""c"");assertEquals(""b"",buf.getOutputContext().getParent().getCurrentName());buf.writeString(""cval"");buf.writeEndObject();buf.writeEndObject();buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testBasicSerialize",0,"public void testBasicSerialize()throws IOException {TokenBuffer buf;buf=new TokenBuffer(MAPPER,false);assertEquals("""",MAPPER.writeValueAsString(buf));buf.close();buf=new TokenBuffer(MAPPER,false);buf.writeStartArray();buf.writeBoolean(true);buf.writeBoolean(false);long l=1L + Integer.MAX_VALUE;buf.writeNumber(l);buf.writeNumber((short)4);buf.writeNumber(0.5);buf.writeEndArray();assertEquals(aposToQuotes(""[true,false,"" + l + "",4,0.5]""),MAPPER.writeValueAsString(buf));buf.close();buf=new TokenBuffer(MAPPER,false);buf.writeStartObject();buf.writeFieldName(new SerializedString(""foo""));buf.writeNull();buf.writeFieldName(""bar"");buf.writeNumber(BigInteger.valueOf(123));buf.writeFieldName(""dec"");buf.writeNumber(BigDecimal.valueOf(5).movePointLeft(2));assertEquals(aposToQuotes(""{'foo':null,'bar':123,'dec':0.05}""),MAPPER.writeValueAsString(buf));buf.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testWithJsonParserSequenceSimple",0,"public void testWithJsonParserSequenceSimple()throws IOException {TokenBuffer buf=new TokenBuffer(null,false);buf.writeStartArray();buf.writeString(""test"");JsonParser p=createParserUsingReader(""[true,null ]"");JsonParserSequence seq=JsonParserSequence.createFlattened(false,buf.asParser(),p);assertEquals(2,seq.containedParsersCount());assertFalse(p.isClosed());assertFalse(seq.hasCurrentToken());assertNull(seq.getCurrentToken());assertNull(seq.getCurrentName());assertToken(JsonToken.START_ARRAY,seq.nextToken());assertToken(JsonToken.VALUE_STRING,seq.nextToken());assertEquals(""test"",seq.getText());assertToken(JsonToken.START_ARRAY,seq.nextToken());assertToken(JsonToken.VALUE_TRUE,seq.nextToken());assertToken(JsonToken.VALUE_NULL,seq.nextToken());assertToken(JsonToken.END_ARRAY,seq.nextToken());assertNull(seq.nextToken());assertNull(seq.nextToken());assertTrue(p.isClosed());p.close();buf.close();seq.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testWithMultipleJsonParserSequences",0,"/** * Test to verify that TokenBuffer and JsonParserSequence work together as expected.*/@SuppressWarnings(""resource"")public void testWithMultipleJsonParserSequences()throws IOException {TokenBuffer buf1=new TokenBuffer(null,false);buf1.writeStartArray();TokenBuffer buf2=new TokenBuffer(null,false);buf2.writeString(""a"");TokenBuffer buf3=new TokenBuffer(null,false);buf3.writeNumber(13);TokenBuffer buf4=new TokenBuffer(null,false);buf4.writeEndArray();JsonParserSequence seq1=JsonParserSequence.createFlattened(false,buf1.asParser(),buf2.asParser());assertEquals(2,seq1.containedParsersCount());JsonParserSequence seq2=JsonParserSequence.createFlattened(false,buf3.asParser(),buf4.asParser());assertEquals(2,seq2.containedParsersCount());JsonParserSequence combo=JsonParserSequence.createFlattened(false,seq1,seq2);assertEquals(4,combo.containedParsersCount());assertToken(JsonToken.START_ARRAY,combo.nextToken());assertToken(JsonToken.VALUE_STRING,combo.nextToken());assertEquals(""a"",combo.getText());assertToken(JsonToken.VALUE_NUMBER_INT,combo.nextToken());assertEquals(13,combo.getIntValue());assertToken(JsonToken.END_ARRAY,combo.nextToken());assertNull(combo.nextToken());buf1.close();buf2.close();buf3.close();buf4.close();}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.testRawValues",0,"public void testRawValues()throws Exception {final String RAW=""{\""a\"":1}"";TokenBuffer buf=new TokenBuffer(null,false);buf.writeRawValue(RAW);JsonParser p=buf.asParser();assertToken(JsonToken.VALUE_EMBEDDED_OBJECT,p.nextToken());assertEquals(RawValue.class,p.getEmbeddedObject().getClass());assertNull(p.nextToken());p.close();buf.close();assertEquals(RAW,MAPPER.writeValueAsString(buf));}"
"com.fasterxml.jackson.databind.util.TestTokenBuffer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testNotKarl",0,"public void testNotKarl()throws IOException {final String serialized=MAPPER.writeValueAsString(new NotKarlBean());assertEquals(""{\""map\"":{\""Not Karl\"":1}}"",serialized);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testKarl",0,"public void testKarl()throws IOException {final String serialized=MAPPER.writeValueAsString(new KarlBean());assertEquals(""{\""map\"":{\""Karl\"":1}}"",serialized);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testBoth",0,"public void testBoth()throws IOException {final ObjectMapper mapper=new ObjectMapper();final String value1=mapper.writeValueAsString(new NotKarlBean());assertEquals(""{\""map\"":{\""Not Karl\"":1}}"",value1);final String value2=mapper.writeValueAsString(new KarlBean());assertEquals(""{\""map\"":{\""Karl\"":1}}"",value2);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testCustomForEnum",0,"public void testCustomForEnum()throws IOException {final ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"");mod.addKeySerializer(ABC.class,new ABCKeySerializer());mapper.registerModule(mod);String json=mapper.writeValueAsString(new ABCMapWrapper());assertEquals(""{\""stuff\"":{\""xxxB\"":\""bar\""}}"",json);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testCustomNullSerializers",0,"public void testCustomNullSerializers()throws IOException {final ObjectMapper mapper=new ObjectMapper();mapper.getSerializerProvider().setNullKeySerializer(new NullKeySerializer(""NULL-KEY""));mapper.getSerializerProvider().setNullValueSerializer(new NullValueSerializer(""NULL""));Map<String,Integer> input=new HashMap<>();input.put(null,3);String json=mapper.writeValueAsString(input);assertEquals(""{\""NULL-KEY\"":3}"",json);json=mapper.writeValueAsString(new Object[]{1,null,true});assertEquals(""[1,\""NULL\"",true]"",json);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testCustomEnumInnerMapKey",0,"public void testCustomEnumInnerMapKey()throws Exception {Map<Outer,Object> outerMap=new HashMap<Outer,Object>();Map<ABC,Map<String,String>> map=new EnumMap<ABC,Map<String,String>>(ABC.class);Map<String,String> innerMap=new HashMap<String,String>();innerMap.put(""one"",""1"");map.put(ABC.A,innerMap);outerMap.put(Outer.inner,map);final ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"");mod.setMixInAnnotation(ABC.class,ABCMixin.class);mod.addKeySerializer(ABC.class,new ABCKeySerializer());mapper.registerModule(mod);JsonNode tree=mapper.convertValue(outerMap,JsonNode.class);JsonNode innerNode=tree.get(""inner"");String key=innerNode.fieldNames().next();assertEquals(""xxxA"",key);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testUnWrappedMapWithDefaultType",0,"public void testUnWrappedMapWithDefaultType()throws Exception {final ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"");mod.addKeySerializer(ABC.class,new ABCKeySerializer());mapper.registerModule(mod);TypeResolverBuilder<?> typer=new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL);typer=typer.init(JsonTypeInfo.Id.NAME,null);typer=typer.inclusion(JsonTypeInfo.As.PROPERTY);typer=typer.typeIdVisibility(true);mapper.setDefaultTyping(typer);Map<ABC,String> stuff=new HashMap<ABC,String>();stuff.put(ABC.B,""bar"");String json=mapper.writerFor(new TypeReference<Map<ABC,String>>(){}).writeValueAsString(stuff);assertEquals(""{\""@type\"":\""HashMap\"",\""xxxB\"":\""bar\""}"",json);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testUnWrappedMapWithKeySerializer",0,"@SuppressWarnings(""deprecation"")public void testUnWrappedMapWithKeySerializer()throws Exception {SimpleModule mod=new SimpleModule(""test"");mod.addKeySerializer(ABC.class,new ABCKeySerializer());final ObjectMapper mapper=new ObjectMapper().registerModule(mod).enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT).disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS).disable(SerializationFeature.WRITE_NULL_MAP_VALUES).setSerializationInclusion(JsonInclude.Include.NON_EMPTY);Map<ABC,BAR<?>> stuff=new HashMap<ABC,BAR<?>>();stuff.put(ABC.B,new BAR<String>(""bar""));String json=mapper.writerFor(new TypeReference<Map<ABC,BAR<?>>>(){}).writeValueAsString(stuff);assertEquals(""{\""xxxB\"":\""bar\""}"",json);}"
"com.fasterxml.jackson.databind.ser.TestKeySerializers.testDynamicMapKeys",0,"public void testDynamicMapKeys()throws Exception {Map<Object,Integer> stuff=new LinkedHashMap<Object,Integer>();stuff.put(AbcLC.B,Integer.valueOf(3));stuff.put(new UCString(""foo""),Integer.valueOf(4));String json=MAPPER.writeValueAsString(stuff);assertEquals(aposToQuotes(""{'b':3,'FOO':4}""),json);}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testQNameSer",0,"public void testQNameSer()throws Exception {QName qn=new QName(""http://abc"",""tag"",""prefix"");assertEquals(quote(qn.toString()),serializeAsString(qn));}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testDurationSer",0,"public void testDurationSer()throws Exception {DatatypeFactory dtf=DatatypeFactory.newInstance();Duration dur=dtf.newDurationDayTime(false,15,19,58,1);assertEquals(quote(dur.toString()),serializeAsString(dur));}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testXMLGregorianCalendarSerAndDeser",0,"public void testXMLGregorianCalendarSerAndDeser()throws Exception {DatatypeFactory dtf=DatatypeFactory.newInstance();XMLGregorianCalendar cal=dtf.newXMLGregorianCalendar(1974,10,10,18,15,17,123,0);ObjectMapper mapper=new ObjectMapper();long timestamp=cal.toGregorianCalendar().getTimeInMillis();String numStr=String.valueOf(timestamp);assertEquals(numStr,mapper.writeValueAsString(cal));XMLGregorianCalendar calOut=mapper.readValue(numStr,XMLGregorianCalendar.class);assertNotNull(calOut);assertEquals(timestamp,calOut.toGregorianCalendar().getTimeInMillis());mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false);String exp=cal.toXMLFormat();String act=mapper.writeValueAsString(cal);act=act.substring(1,act.length()- 1);exp=removeZ(exp);act=removeZ(act);assertEquals(exp,act);}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testDeserializerLoading",0,"public void testDeserializerLoading(){CoreXMLDeserializers sers=new CoreXMLDeserializers();TypeFactory f=TypeFactory.defaultInstance();sers.findBeanDeserializer(f.constructType(Duration.class),null,null);sers.findBeanDeserializer(f.constructType(XMLGregorianCalendar.class),null,null);sers.findBeanDeserializer(f.constructType(QName.class),null,null);}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testQNameDeser",0,"public void testQNameDeser()throws Exception {QName qn=new QName(""http://abc"",""tag"",""prefix"");String qstr=qn.toString();ObjectMapper mapper=new ObjectMapper();assertEquals(""Should deserialize to equal QName (exp serialization: '"" + qstr + ""')"",qn,mapper.readValue(quote(qstr),QName.class));}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testCalendarDeser",0,"public void testCalendarDeser()throws Exception {DatatypeFactory dtf=DatatypeFactory.newInstance();XMLGregorianCalendar cal=dtf.newXMLGregorianCalendar(1974,10,10,18,15,17,123,0);String exp=cal.toXMLFormat();assertEquals(""Should deserialize to equal XMLGregorianCalendar ('"" + exp + ""')"",cal,new ObjectMapper().readValue(quote(exp),XMLGregorianCalendar.class));}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.testDurationDeser",0,"public void testDurationDeser()throws Exception {DatatypeFactory dtf=DatatypeFactory.newInstance();Duration dur=dtf.newDurationDayTime(true,27,5,15,59);String exp=dur.toString();assertEquals(""Should deserialize to equal Duration ('"" + exp + ""')"",dur,new ObjectMapper().readValue(quote(exp),Duration.class));}"
"com.fasterxml.jackson.databind.ext.TestCoreXMLTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TypeDeserializerTest.testUtilMethods",0,"public void testUtilMethods()throws Exception {final JsonFactory f=new JsonFactory();JsonParser p=f.createParser(""true"");assertNull(TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.nextToken();assertEquals(Boolean.TRUE,TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.close();p=f.createParser(""false "");p.nextToken();assertEquals(Boolean.FALSE,TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.close();p=f.createParser(""1"");p.nextToken();assertEquals(Integer.valueOf(1),TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.close();p=f.createParser(""0.5 "");p.nextToken();assertEquals(Double.valueOf(0.5),TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.close();p=f.createParser(""\""foo\""[]"");p.nextToken();assertEquals(""foo"",TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.nextToken();assertNull(TypeDeserializer.deserializeIfNatural(p,null,Object.class));p.close();}"
"com.fasterxml.jackson.databind.jsontype.TypeDeserializerTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.BeanNamingTest.testSimple",0,"public void testSimple()throws Exception {ObjectMapper mapper=new ObjectMapper();assertFalse(mapper.isEnabled(MapperFeature.USE_STD_BEAN_NAMING));assertEquals(aposToQuotes(""{'url':'http://foo'}""),mapper.writeValueAsString(new URLBean()));assertEquals(aposToQuotes(""{'a':3}""),mapper.writeValueAsString(new ABean()));mapper=new ObjectMapper();mapper.enable(MapperFeature.USE_STD_BEAN_NAMING);assertEquals(aposToQuotes(""{'URL':'http://foo'}""),mapper.writeValueAsString(new URLBean()));assertEquals(aposToQuotes(""{'a':3}""),mapper.writeValueAsString(new ABean()));}"
"com.fasterxml.jackson.databind.introspect.BeanNamingTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.ObjectIdReordering1388Test.testDeserializationFinalClassJSOG",0,"public void testDeserializationFinalClassJSOG()throws Exception {final ObjectMapper mapper=new ObjectMapper();final UUID id=UUID.fromString(""a59aa02c-fe3c-43f8-9b5a-5fe01878a818"");final NamedThing thing=new NamedThing(id,""Hello"");final TypeReference<?> namedThingListType=new TypeReference<List<NamedThing>>(){};{final String jsog=mapper.writeValueAsString(Arrays.asList(thing,thing,thing));final List<NamedThing> list=mapper.readValue(jsog,namedThingListType);_assertAllSame(list);assertTrue(jsog.equals(""[{\""@id\"":1,\""id\"":\""a59aa02c-fe3c-43f8-9b5a-5fe01878a818\"",\""name\"":\""Hello\""},1,1]""));}{final String json=""[1,1,{\""@id\"":1,\""id\"":\""a59aa02c-fe3c-43f8-9b5a-5fe01878a818\"",\""name\"":\""Hello\""}]"";final List<NamedThing> forward=mapper.readValue(json,namedThingListType);_assertAllSame(forward);}{final String json=aposToQuotes(""[{'id':'a59aa02c-fe3c-43f8-9b5a-5fe01878a818','@id':1,'name':'Hello'},1,1]"");final List<NamedThing> forward=mapper.readValue(json,namedThingListType);_assertAllSame(forward);}{final String json=aposToQuotes(""[{'id':'a59aa02c-fe3c-43f8-9b5a-5fe01878a818','name':'Hello','@id':1},1,1]"");final List<NamedThing> forward=mapper.readValue(json,namedThingListType);_assertAllSame(forward);}}"
"com.fasterxml.jackson.databind.objectid.ObjectIdReordering1388Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.DelegatingExternalProperty1003Test.testExtrnalPropertyDelegatingCreator",0,"public void testExtrnalPropertyDelegatingCreator()throws Exception {ObjectMapper mapper=new ObjectMapper();final String json=mapper.writeValueAsString(new HeroBattle(new Superman()));final HeroBattle battle=mapper.readValue(json,HeroBattle.class);assertTrue(battle.getHero()instanceof Superman);}"
"com.fasterxml.jackson.databind.creators.DelegatingExternalProperty1003Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestAutoDetect.testDefaults",0,"public void testDefaults()throws Exception {ObjectMapper m=new ObjectMapper();assertEquals(""{\""p1\"":\""public\""}"",m.writeValueAsString(new FieldBean()));assertEquals(""{\""a\"":\""a\""}"",m.writeValueAsString(new MethodBean()));}"
"com.fasterxml.jackson.databind.ser.TestAutoDetect.testProtectedViaAnnotations",0,"public void testProtectedViaAnnotations()throws Exception {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new ProtFieldBean());assertEquals(2,result.size());assertEquals(""public"",result.get(""p1""));assertEquals(""protected"",result.get(""p2""));assertNull(result.get(""p3""));result=writeAndMap(m,new ProtMethodBean());assertEquals(2,result.size());assertEquals(""a"",result.get(""a""));assertEquals(""b"",result.get(""b""));assertNull(result.get(""c""));}"
"com.fasterxml.jackson.databind.ser.TestAutoDetect.testPrivateUsingGlobals",0,"public void testPrivateUsingGlobals()throws Exception {ObjectMapper m=new ObjectMapper();VisibilityChecker<?> vc=m.getVisibilityChecker();vc=vc.withFieldVisibility(JsonAutoDetect.Visibility.ANY);m.setVisibility(vc);Map<String,Object> result=writeAndMap(m,new FieldBean());assertEquals(3,result.size());assertEquals(""public"",result.get(""p1""));assertEquals(""protected"",result.get(""p2""));assertEquals(""private"",result.get(""p3""));m=new ObjectMapper();vc=m.getVisibilityChecker();vc=vc.withGetterVisibility(JsonAutoDetect.Visibility.ANY);m.setVisibility(vc);result=writeAndMap(m,new MethodBean());assertEquals(3,result.size());assertEquals(""a"",result.get(""a""));assertEquals(""b"",result.get(""b""));assertEquals(""c"",result.get(""c""));}"
"com.fasterxml.jackson.databind.ser.TestAutoDetect.testBasicSetup",0,"public void testBasicSetup()throws Exception {ObjectMapper m=new ObjectMapper();VisibilityChecker<?> vc=m.getVisibilityChecker();vc=vc.with(JsonAutoDetect.Visibility.ANY);m.setVisibility(vc);Map<String,Object> result=writeAndMap(m,new FieldBean());assertEquals(3,result.size());assertEquals(""public"",result.get(""p1""));assertEquals(""protected"",result.get(""p2""));assertEquals(""private"",result.get(""p3""));}"
"com.fasterxml.jackson.databind.ser.TestAutoDetect.testMapperShortcutMethods",0,"public void testMapperShortcutMethods()throws Exception {ObjectMapper m=new ObjectMapper();m.setVisibility(PropertyAccessor.FIELD,JsonAutoDetect.Visibility.ANY);Map<String,Object> result=writeAndMap(m,new FieldBean());assertEquals(3,result.size());assertEquals(""public"",result.get(""p1""));assertEquals(""protected"",result.get(""p2""));assertEquals(""private"",result.get(""p3""));}"
"com.fasterxml.jackson.databind.ser.TestAutoDetect.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.inject.TestInjectables.testSimple",0,"public void testSimple()throws Exception {ObjectMapper mapper=newObjectMapper();mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class,""stuffValue"").addValue(""myId"",""xyz"").addValue(Long.TYPE,Long.valueOf(37)));InjectedBean bean=mapper.readValue(""{\""value\"":3}"",InjectedBean.class);assertEquals(3,bean.value);assertEquals(""stuffValue"",bean.stuff);assertEquals(""xyz"",bean.otherStuff);assertEquals(37L,bean.third);}"
"com.fasterxml.jackson.databind.deser.inject.TestInjectables.testWithCtors",0,"public void testWithCtors()throws Exception {CtorBean bean=MAPPER.readerFor(CtorBean.class).with(new InjectableValues.Std().addValue(String.class,""Bubba"")).readValue(""{\""age\"":55}"");assertEquals(55,bean.age);assertEquals(""Bubba"",bean.name);}"
"com.fasterxml.jackson.databind.deser.inject.TestInjectables.testTwoInjectablesViaCreator",0,"public void testTwoInjectablesViaCreator()throws Exception {CtorBean2 bean=MAPPER.readerFor(CtorBean2.class).with(new InjectableValues.Std().addValue(String.class,""Bob"").addValue(""number"",Integer.valueOf(13))).readValue(""{}"");assertEquals(Integer.valueOf(13),bean.age);assertEquals(""Bob"",bean.name);}"
"com.fasterxml.jackson.databind.deser.inject.TestInjectables.testIssueGH471",0,"public void testIssueGH471()throws Exception {final Object constructorInjected=""constructorInjected"";final Object methodInjected=""methodInjected"";final Object fieldInjected=""fieldInjected"";ObjectMapper mapper=newObjectMapper().setInjectableValues(new InjectableValues.Std().addValue(""constructor_injected"",constructorInjected).addValue(""method_injected"",methodInjected).addValue(""field_injected"",fieldInjected));IssueGH471Bean bean=mapper.readValue(""{\""x\"":13,\""constructor_value\"":\""constructor\"",\""method_value\"":\""method\"",\""field_value\"":\""field\""}"",IssueGH471Bean.class);assertSame(constructorInjected,bean.constructorInjected);assertSame(methodInjected,bean.methodInjected);assertSame(fieldInjected,bean.fieldInjected);assertEquals(""constructor"",bean.constructorValue);assertEquals(""method"",bean.methodValue);assertEquals(""field"",bean.fieldValue);assertEquals(13,bean.x);}"
"com.fasterxml.jackson.databind.deser.inject.TestInjectables.testTransientField",0,"public void testTransientField()throws Exception {TransientBean bean=MAPPER.readerFor(TransientBean.class).with(new InjectableValues.Std().addValue(""transient"",""Injected!"")).readValue(""{\""value\"":28}"");assertEquals(28,bean.value);assertEquals(""Injected!"",bean.injected);}"
"com.fasterxml.jackson.databind.deser.inject.TestInjectables.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testPrettyPrinter",0,"public void testPrettyPrinter()throws Exception {ObjectWriter writer=MAPPER.writer();HashMap<String,Integer> data=new HashMap<String,Integer>();data.put(""a"",1);assertEquals(""{\""a\"":1}"",writer.writeValueAsString(data));writer=writer.withDefaultPrettyPrinter();String lf=System.getProperty(""line.separator"");assertEquals(""{"" + lf + ""  \""a\"" : 1""+ lf+ ""}"",writer.writeValueAsString(data));writer=writer.with((PrettyPrinter)null);assertEquals(""{\""a\"":1}"",writer.writeValueAsString(data));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testPrefetch",0,"public void testPrefetch()throws Exception {ObjectWriter writer=MAPPER.writer();assertFalse(writer.hasPrefetchedSerializer());writer=writer.forType(String.class);assertTrue(writer.hasPrefetchedSerializer());}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testObjectWriterFeatures",0,"public void testObjectWriterFeatures()throws Exception {ObjectWriter writer=MAPPER.writer().without(JsonGenerator.Feature.QUOTE_FIELD_NAMES);Map<String,Integer> map=new HashMap<String,Integer>();map.put(""a"",1);assertEquals(""{a:1}"",writer.writeValueAsString(map));assertEquals(""{\""a\"":1}"",writer.with(JsonGenerator.Feature.QUOTE_FIELD_NAMES).writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testObjectWriterWithNode",0,"public void testObjectWriterWithNode()throws Exception {ObjectNode stuff=MAPPER.createObjectNode();stuff.put(""a"",5);ObjectWriter writer=MAPPER.writerFor(JsonNode.class);String json=writer.writeValueAsString(stuff);assertEquals(""{\""a\"":5}"",json);}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testPolymorphicWithTyping",0,"public void testPolymorphicWithTyping()throws Exception {ObjectWriter writer=MAPPER.writerFor(PolyBase.class);String json;json=writer.writeValueAsString(new ImplA(3));assertEquals(aposToQuotes(""{'type':'A','value':3}""),json);json=writer.writeValueAsString(new ImplB(-5));assertEquals(aposToQuotes(""{'type':'B','b':-5}""),json);}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testCanSerialize",0,"public void testCanSerialize()throws Exception {assertTrue(MAPPER.writer().canSerialize(String.class));assertTrue(MAPPER.writer().canSerialize(String.class,null));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testNoPrefetch",0,"public void testNoPrefetch()throws Exception {ObjectWriter w=MAPPER.writer().without(SerializationFeature.EAGER_SERIALIZER_FETCH);ByteArrayOutputStream out=new ByteArrayOutputStream();w.writeValue(out,Integer.valueOf(3));out.close();assertEquals(""3"",out.toString(""UTF-8""));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testWithCloseCloseable",0,"public void testWithCloseCloseable()throws Exception {ObjectWriter w=MAPPER.writer().with(SerializationFeature.CLOSE_CLOSEABLE);assertTrue(w.isEnabled(SerializationFeature.CLOSE_CLOSEABLE));CloseableValue input=new CloseableValue();assertFalse(input.closed);byte[]json=w.writeValueAsBytes(input);assertNotNull(json);assertTrue(input.closed);input.close();JsonGenerator g=MAPPER.getFactory().createGenerator(new StringWriter());input=new CloseableValue();assertFalse(input.closed);w.writeValue(g,input);assertTrue(input.closed);g.close();input.close();}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testViewSettings",0,"public void testViewSettings()throws Exception {ObjectWriter w=MAPPER.writer();ObjectWriter newW=w.withView(String.class);assertNotSame(w,newW);assertSame(newW,newW.withView(String.class));newW=w.with(Locale.CANADA);assertNotSame(w,newW);assertSame(newW,newW.with(Locale.CANADA));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testMiscSettings",0,"public void testMiscSettings()throws Exception {ObjectWriter w=MAPPER.writer();assertSame(MAPPER.getFactory(),w.getFactory());assertFalse(w.hasPrefetchedSerializer());assertNotNull(w.getTypeFactory());JsonFactory f=new JsonFactory();w=w.with(f);assertSame(f,w.getFactory());ObjectWriter newW=w.with(Base64Variants.MODIFIED_FOR_URL);assertNotSame(w,newW);assertSame(newW,newW.with(Base64Variants.MODIFIED_FOR_URL));w=w.withAttributes(Collections.emptyMap());w=w.withAttribute(""a"",""b"");assertEquals(""b"",w.getAttributes().getAttribute(""a""));w=w.withoutAttribute(""a"");assertNull(w.getAttributes().getAttribute(""a""));FormatSchema schema=new BogusSchema();try {newW=w.with(schema);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not use FormatSchema"");}}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testRootValueSettings",0,"public void testRootValueSettings()throws Exception {ObjectWriter w=MAPPER.writer();ObjectWriter newW=w.withRootName(""foo"");assertNotSame(w,newW);assertSame(newW,newW.withRootName(PropertyName.construct(""foo"")));w=newW;newW=w.withRootName((String)null);assertNotSame(w,newW);assertSame(newW,newW.withRootName((PropertyName)null));w=w.withRootValueSeparator(new SerializedString("",""));assertSame(w,w.withRootValueSeparator(new SerializedString("","")));assertSame(w,w.withRootValueSeparator("",""));newW=w.withRootValueSeparator(""/"");assertNotSame(w,newW);assertSame(newW,newW.withRootValueSeparator(""/""));newW=w.withRootValueSeparator((String)null);assertNotSame(w,newW);newW=w.withRootValueSeparator((SerializableString)null);assertNotSame(w,newW);}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testFeatureSettings",0,"public void testFeatureSettings()throws Exception {ObjectWriter w=MAPPER.writer();assertFalse(w.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));assertFalse(w.isEnabled(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION));ObjectWriter newW=w.with(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS,SerializationFeature.INDENT_OUTPUT);assertNotSame(w,newW);assertTrue(newW.isEnabled(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS));assertTrue(newW.isEnabled(SerializationFeature.INDENT_OUTPUT));assertSame(newW,newW.with(SerializationFeature.INDENT_OUTPUT));assertSame(newW,newW.withFeatures(SerializationFeature.INDENT_OUTPUT));newW=w.withFeatures(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS,SerializationFeature.INDENT_OUTPUT);assertNotSame(w,newW);newW=w.without(SerializationFeature.FAIL_ON_EMPTY_BEANS,SerializationFeature.EAGER_SERIALIZER_FETCH);assertNotSame(w,newW);assertFalse(newW.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS));assertFalse(newW.isEnabled(SerializationFeature.EAGER_SERIALIZER_FETCH));assertSame(newW,newW.without(SerializationFeature.FAIL_ON_EMPTY_BEANS));assertSame(newW,newW.withoutFeatures(SerializationFeature.FAIL_ON_EMPTY_BEANS));assertNotSame(w,w.withoutFeatures(SerializationFeature.FAIL_ON_EMPTY_BEANS,SerializationFeature.EAGER_SERIALIZER_FETCH));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testGeneratorFeatures",0,"public void testGeneratorFeatures()throws Exception {ObjectWriter w=MAPPER.writer();assertFalse(w.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertNotSame(w,w.with(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertNotSame(w,w.withFeatures(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertTrue(w.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));assertNotSame(w,w.without(JsonGenerator.Feature.AUTO_CLOSE_TARGET));assertNotSame(w,w.withoutFeatures(JsonGenerator.Feature.AUTO_CLOSE_TARGET));}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testArgumentChecking",0,"public void testArgumentChecking()throws Exception {final ObjectWriter w=MAPPER.writer();try {w.acceptJsonFormatVisitor((JavaType)null,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""type must be provided"");}}"
"com.fasterxml.jackson.databind.ObjectWriterTest.testSchema",0,"public void testSchema()throws Exception {try {MAPPER.writerFor(String.class).with(new BogusSchema()).writeValueAsBytes(""foo"");fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not use FormatSchema"");}}"
"com.fasterxml.jackson.databind.ObjectWriterTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestStringConversions.testSimple",0,"public void testSimple(){assertEquals(Boolean.TRUE,MAPPER.convertValue(""true"",Boolean.class));assertEquals(Integer.valueOf(-3),MAPPER.convertValue(""  -3 "",Integer.class));assertEquals(Long.valueOf(77),MAPPER.convertValue(""77"",Long.class));int[]ints={1,2,3};List<Integer> Ints=new ArrayList<Integer>();Ints.add(1);Ints.add(2);Ints.add(3);assertArrayEquals(ints,MAPPER.convertValue(Ints,int[].class));}"
"com.fasterxml.jackson.databind.convert.TestStringConversions.testStringsToInts",0,"public void testStringsToInts(){assertArrayEquals(new int[]{1,2,3,4,-1,0},MAPPER.convertValue(""1  2 3    4  -1 0"".split(""\\s+""),int[].class));}"
"com.fasterxml.jackson.databind.convert.TestStringConversions.testBytesToBase64AndBack",0,"public void testBytesToBase64AndBack()throws Exception {byte[]input=new byte[]{1,2,3,4,5,6,7};String encoded=MAPPER.convertValue(input,String.class);assertNotNull(encoded);assertEquals(""AQIDBAUGBw=="",encoded);assertEquals(Base64Variants.MIME.encode(input),encoded);byte[]result=MAPPER.convertValue(encoded,byte[].class);assertArrayEquals(input,result);}"
"com.fasterxml.jackson.databind.convert.TestStringConversions.testBytestoCharArray",0,"public void testBytestoCharArray()throws Exception {byte[]input=new byte[]{1,2,3,4,5,6,7};char[]expEncoded=MAPPER.convertValue(input,String.class).toCharArray();char[]actEncoded=MAPPER.convertValue(input,char[].class);assertArrayEquals(expEncoded,actEncoded);}"
"com.fasterxml.jackson.databind.convert.TestStringConversions.testLowerCasingSerializer",0,"public void testLowerCasingSerializer()throws Exception {assertEquals(""{\""value\"":\""abc\""}"",MAPPER.writeValueAsString(new StringWrapperWithConvert(""ABC"")));}"
"com.fasterxml.jackson.databind.convert.TestStringConversions.testLowerCasingDeserializer",0,"public void testLowerCasingDeserializer()throws Exception {StringWrapperWithConvert value=MAPPER.readValue(""{\""value\"":\""XyZ\""}"",StringWrapperWithConvert.class);assertNotNull(value);assertEquals(""xyz"",value.value);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testFailWhenCaseSensitiveAndNameIsNotUpperCase",0,"public void testFailWhenCaseSensitiveAndNameIsNotUpperCase()throws IOException {try {READER_DEFAULT.forType(TestEnum.class).readValue(""\""Jackson\"""");fail(""InvalidFormatException expected"");}catch(InvalidFormatException e){verifyException(e,""value not one of declared Enum instance names: [JACKSON,OK,RULES]"");}}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testFailWhenCaseSensitiveAndToStringIsUpperCase",0,"public void testFailWhenCaseSensitiveAndToStringIsUpperCase()throws IOException {ObjectReader r=READER_DEFAULT.forType(LowerCaseEnum.class).with(DeserializationFeature.READ_ENUMS_USING_TO_STRING);try {r.readValue(""\""A\"""");fail(""InvalidFormatException expected"");}catch(InvalidFormatException e){verifyException(e,""value not one of declared Enum instance names: [a,b,c]"");}}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testEnumDesIgnoringCaseWithLowerCaseContent",0,"public void testEnumDesIgnoringCaseWithLowerCaseContent()throws IOException {assertEquals(TestEnum.JACKSON,READER_IGNORE_CASE.forType(TestEnum.class).readValue(quote(""jackson"")));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testEnumDesIgnoringCaseWithUpperCaseToString",0,"public void testEnumDesIgnoringCaseWithUpperCaseToString()throws IOException {ObjectReader r=MAPPER_IGNORE_CASE.readerFor(LowerCaseEnum.class).with(DeserializationFeature.READ_ENUMS_USING_TO_STRING);assertEquals(LowerCaseEnum.A,r.readValue(""\""A\""""));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testIgnoreCaseInEnumList",0,"public void testIgnoreCaseInEnumList()throws Exception {TestEnum[]enums=READER_IGNORE_CASE.forType(TestEnum[].class).readValue(""[\""jacksON\"",\""ruLes\""]"");assertEquals(2,enums.length);assertEquals(TestEnum.JACKSON,enums[0]);assertEquals(TestEnum.RULES,enums[1]);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testIgnoreCaseInEnumSet",0,"public void testIgnoreCaseInEnumSet()throws IOException {ObjectReader r=READER_IGNORE_CASE.forType(new TypeReference<EnumSet<TestEnum>>(){});EnumSet<TestEnum> set=r.readValue(""[\""jackson\""]"");assertEquals(1,set.size());assertTrue(set.contains(TestEnum.JACKSON));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumAltIdTest.testIgnoreCaseViaFormat",0,"public void testIgnoreCaseViaFormat()throws Exception {final String JSON=aposToQuotes(""{'value':'ok'}"");EnumBean pojo=READER_DEFAULT.forType(EnumBean.class).readValue(JSON);assertEquals(TestEnum.OK,pojo.value);try {READER_DEFAULT.forType(StrictCaseBean.class).readValue(JSON);fail(""Should not pass"");}catch(InvalidFormatException e){verifyException(e,""value not one of declared Enum instance names: [JACKSON,OK,RULES]"");}}"
"com.fasterxml.jackson.databind.contextual.TestContextualKeyTypes.testSimpleKeySer",0,"public void testSimpleKeySer()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addKeySerializer(String.class,new ContextualKeySerializer(""prefix""));mapper.registerModule(module);Map<String,Object> input=new HashMap<String,Object>();input.put(""a"",Integer.valueOf(3));String json=mapper.writerFor(TypeFactory.defaultInstance().constructMapType(HashMap.class,String.class,Object.class)).writeValueAsString(input);assertEquals(""{\""prefix:a\"":3}"",json);}"
"com.fasterxml.jackson.databind.contextual.TestContextualKeyTypes.testSimpleKeyDeser",0,"public void testSimpleKeyDeser()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addKeyDeserializer(String.class,new ContextualDeser(""???""));mapper.registerModule(module);MapBean result=mapper.readValue(""{\""map\"":{\""a\"":3}}"",MapBean.class);Map<String,Integer> map=result.map;assertNotNull(map);assertEquals(1,map.size());Map.Entry<String,Integer> entry=map.entrySet().iterator().next();assertEquals(Integer.valueOf(3),entry.getValue());assertEquals(""map:a"",entry.getKey());}"
"com.fasterxml.jackson.databind.contextual.TestContextualKeyTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.testSimpleAnyBean",0,"public void testSimpleAnyBean()throws Exception {String json=MAPPER.writeValueAsString(new Bean());Map<?,?> map=MAPPER.readValue(json,Map.class);assertEquals(2,map.size());assertEquals(Integer.valueOf(3),map.get(""x""));assertEquals(Boolean.TRUE,map.get(""a""));}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.testAnyOnly",0,"public void testAnyOnly()throws Exception {ObjectMapper m;m=new ObjectMapper();m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,true);String json=serializeAsString(m,new AnyOnlyBean());assertEquals(""{\""a\"":3}"",json);m=new ObjectMapper();m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);json=serializeAsString(m,new AnyOnlyBean());assertEquals(""{\""a\"":3}"",json);}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.testAnyDisabling",0,"public void testAnyDisabling()throws Exception {String json=MAPPER.writeValueAsString(new NotEvenAnyBean());assertEquals(aposToQuotes(""{'value':42}""),json);}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.testAnyWithNull",0,"public void testAnyWithNull()throws Exception {MapAsAny input=new MapAsAny();input.add(""bar"",null);assertEquals(aposToQuotes(""{'bar':null}""),MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.testIssue705",0,"public void testIssue705()throws Exception {Issue705Bean input=new Issue705Bean(""key"",""value"");String json=MAPPER.writeValueAsString(input);assertEquals(""{\""stuff\"":\""[key/value]\""}"",json);}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.testAnyGetterWithValueSerializer",0,"public void testAnyGetterWithValueSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();Bean1124 input=new Bean1124();input.addAdditionalProperty(""key"",""value"");String json=mapper.writeValueAsString(input);assertEquals(""{\""key\"":\""VALUE\""}"",json);}"
"com.fasterxml.jackson.databind.ser.AnyGetterTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestIterable.testIterator",0,"public void testIterator()throws IOException {ArrayList<Integer> l=new ArrayList<Integer>();l.add(1);l.add(null);l.add(-9);l.add(0);assertEquals(""[1,null,-9,0]"",MAPPER.writeValueAsString(l.iterator()));l.clear();assertEquals(""[]"",MAPPER.writeValueAsString(l.iterator()));}"
"com.fasterxml.jackson.databind.ser.TestIterable.testIterable",0,"public void testIterable()throws IOException {assertEquals(""[1,2,3]"",MAPPER.writeValueAsString(new IterableWrapper(new int[]{1,2,3})));}"
"com.fasterxml.jackson.databind.ser.TestIterable.testWithIterable",0,"public void testWithIterable()throws IOException {assertEquals(""{\""values\"":[\""value\""]}"",STATIC_MAPPER.writeValueAsString(new BeanWithIterable()));assertEquals(""[1,2,3]"",STATIC_MAPPER.writeValueAsString(new IntIterable()));}"
"com.fasterxml.jackson.databind.ser.TestIterable.testWithIterator",0,"public void testWithIterator()throws IOException {assertEquals(""{\""values\"":[\""itValue\""]}"",STATIC_MAPPER.writeValueAsString(new BeanWithIterator()));}"
"com.fasterxml.jackson.databind.ser.TestIterable.testIterable358",0,"public void testIterable358()throws Exception {String json=MAPPER.writeValueAsString(new B());assertEquals(""{\""list\"":[[\""Hello world.\""]]}"",json);}"
"com.fasterxml.jackson.databind.ser.TestIterable.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testByteArray",0,"public void testByteArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyByteArray()));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testShortArray",0,"public void testShortArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyShortArray()));assertEquals(""{\""value\"":[1]}"",MAPPER.writeValueAsString(new NonEmptyShortArray((short)1)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testCharArray",0,"public void testCharArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyCharArray()));assertEquals(""{\""value\"":\""ab\""}"",MAPPER.writeValueAsString(new NonEmptyCharArray('a','b')));assertEquals(""{\""value\"":[\""a\"",\""b\""]}"",MAPPER.writer().with(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS).writeValueAsString(new NonEmptyCharArray('a','b')));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testIntArray",0,"public void testIntArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyIntArray()));assertEquals(""{\""value\"":[2]}"",MAPPER.writeValueAsString(new NonEmptyIntArray(2)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testLongArray",0,"public void testLongArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyLongArray()));assertEquals(""{\""value\"":[3,4]}"",MAPPER.writeValueAsString(new NonEmptyLongArray(3,4)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testBooleanArray",0,"public void testBooleanArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyBooleanArray()));assertEquals(""{\""value\"":[true,false]}"",MAPPER.writeValueAsString(new NonEmptyBooleanArray(true,false)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testDoubleArray",0,"public void testDoubleArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyDoubleArray()));assertEquals(""{\""value\"":[0.25,-1.0]}"",MAPPER.writeValueAsString(new NonEmptyDoubleArray(0.25,-1.0)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.testFloatArray",0,"public void testFloatArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyFloatArray()));assertEquals(""{\""value\"":[0.5]}"",MAPPER.writeValueAsString(new NonEmptyFloatArray(0.5f)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeArrayTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testObjectArrayMerging",0,"public void testObjectArrayMerging()throws Exception {MergedX<Object[]> input=new MergedX<Object[]>(new Object[]{""foo""});final JavaType type=MAPPER.getTypeFactory().constructType(new TypeReference<MergedX<Object[]>>(){});MergedX<Object[]> result=MAPPER.readerFor(type).withValueToUpdate(input).readValue(aposToQuotes(""{'value':['bar']}""));assertSame(input,result);assertEquals(2,result.value.length);assertEquals(""foo"",result.value[0]);assertEquals(""bar"",result.value[1]);result=MAPPER.readerFor(type).with(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY).withValueToUpdate(input).readValue(aposToQuotes(""{'value':'zap'}""));assertSame(input,result);assertEquals(3,result.value.length);assertEquals(""foo"",result.value[0]);assertEquals(""bar"",result.value[1]);assertEquals(""zap"",result.value[2]);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testStringArrayMerging",0,"public void testStringArrayMerging()throws Exception {MergedX<String[]> input=new MergedX<String[]>(new String[]{""foo""});MergedX<String[]> result=MAPPER.readerFor(new TypeReference<MergedX<String[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':['bar']}""));assertSame(input,result);assertEquals(2,result.value.length);assertEquals(""foo"",result.value[0]);assertEquals(""bar"",result.value[1]);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testBooleanArrayMerging",0,"public void testBooleanArrayMerging(){}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testByteArrayMerging",0,"public void testByteArrayMerging()throws Exception {MergedX<byte[]> input=new MergedX<byte[]>(new byte[]{1,2});MergedX<byte[]> result=MAPPER.readerFor(new TypeReference<MergedX<byte[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':[4,6.0,null]}""));assertSame(input,result);assertEquals(5,result.value.length);Assert.assertArrayEquals(new byte[]{1,2,4,6,0},result.value);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testShortArrayMerging",0,"public void testShortArrayMerging()throws Exception {MergedX<short[]> input=new MergedX<short[]>(new short[]{1,2});MergedX<short[]> result=MAPPER.readerFor(new TypeReference<MergedX<short[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':[4,6]}""));assertSame(input,result);assertEquals(4,result.value.length);Assert.assertArrayEquals(new short[]{1,2,4,6},result.value);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testCharArrayMerging",0,"public void testCharArrayMerging()throws Exception {MergedX<char[]> input=new MergedX<char[]>(new char[]{'a','b'});MergedX<char[]> result=MAPPER.readerFor(new TypeReference<MergedX<char[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':['c']}""));assertSame(input,result);Assert.assertArrayEquals(new char[]{'a','b','c'},result.value);input=new MergedX<char[]>(new char[]{});result=MAPPER.readerFor(new TypeReference<MergedX<char[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':['c']}""));assertSame(input,result);Assert.assertArrayEquals(new char[]{'c'},result.value);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testIntArrayMerging",0,"public void testIntArrayMerging()throws Exception {MergedX<int[]> input=new MergedX<int[]>(new int[]{1,2});MergedX<int[]> result=MAPPER.readerFor(new TypeReference<MergedX<int[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':[4,6]}""));assertSame(input,result);assertEquals(4,result.value.length);Assert.assertArrayEquals(new int[]{1,2,4,6},result.value);input=new MergedX<int[]>(new int[]{3,4,6});result=MAPPER.readerFor(new TypeReference<MergedX<int[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':[]}""));assertSame(input,result);Assert.assertArrayEquals(new int[]{3,4,6},result.value);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.testLongArrayMerging",0,"public void testLongArrayMerging()throws Exception {MergedX<long[]> input=new MergedX<long[]>(new long[]{1,2});MergedX<long[]> result=MAPPER.readerFor(new TypeReference<MergedX<long[]>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':[4,6]}""));assertSame(input,result);assertEquals(4,result.value.length);Assert.assertArrayEquals(new long[]{1,2,4,6},result.value);}"
"com.fasterxml.jackson.databind.deser.merge.ArrayMergeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultWithCreators.testWithCreators",0,"public void testWithCreators()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);UrlJob input=new UrlJob(123L,""http://foo"",3);String json=mapper.writeValueAsString(input);assertNotNull(json);Job output=mapper.readValue(json,Job.class);assertNotNull(output);assertSame(UrlJob.class,output.getClass());UrlJob o2=(UrlJob)output;assertEquals(123L,o2.id);assertEquals(""http://foo"",o2.getUrl());assertEquals(3,o2.getCount());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultWithCreators.testWithCreatorAndJsonValue",0,"public void testWithCreatorAndJsonValue()throws Exception {final byte[]BYTES=new byte[]{1,2,3,4,5};ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping();String json=mapper.writeValueAsString(new Bean1385Wrapper(new Bean1385(BYTES)));Bean1385Wrapper result=mapper.readValue(json,Bean1385Wrapper.class);assertNotNull(result);assertNotNull(result.value);assertEquals(Bean1385.class,result.value.getClass());Bean1385 b=(Bean1385)result.value;Assert.assertArrayEquals(BYTES,b.raw);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultWithCreators.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestKeyDeserializers.testKeyDeserializers",0,"public void testKeyDeserializers()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addKeyDeserializer(Foo.class,new FooKeyDeserializer());mapper.registerModule(mod);Map<Foo,Integer> map=mapper.readValue(""{\""a\"":3}"",new TypeReference<Map<Foo,Integer>>(){});assertNotNull(map);assertEquals(1,map.size());Foo foo=map.keySet().iterator().next();assertEquals(""a"",foo.value);}"
"com.fasterxml.jackson.databind.module.TestKeyDeserializers.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.merge.NodeMergeTest.testObjectNodeUpdateValue",0,"public void testObjectNodeUpdateValue()throws Exception {ObjectNode base=MAPPER.createObjectNode();base.put(""first"",""foo"");assertSame(base,MAPPER.readerForUpdating(base).readValue(aposToQuotes(""{'second':'bar','third':5,'fourth':true}"")));assertEquals(4,base.size());assertEquals(""bar"",base.path(""second"").asText());assertEquals(""foo"",base.path(""first"").asText());assertEquals(5,base.path(""third"").asInt());assertTrue(base.path(""fourth"").asBoolean());}"
"com.fasterxml.jackson.databind.deser.merge.NodeMergeTest.testObjectNodeMerge",0,"public void testObjectNodeMerge()throws Exception {ObjectNodeWrapper w=MAPPER.readValue(aposToQuotes(""{'props':{'stuff':'xyz'}}""),ObjectNodeWrapper.class);assertEquals(2,w.props.size());assertEquals(""enabled"",w.props.path(""default"").asText());assertEquals(""xyz"",w.props.path(""stuff"").asText());}"
"com.fasterxml.jackson.databind.deser.merge.NodeMergeTest.testObjectDeepUpdate",0,"public void testObjectDeepUpdate()throws Exception {ObjectNode base=MAPPER.createObjectNode();ObjectNode props=base.putObject(""props"");props.put(""base"",123);props.put(""value"",456);ArrayNode a=props.putArray(""array"");a.add(true);base.putNull(""misc"");assertSame(base,MAPPER.readerForUpdating(base).readValue(aposToQuotes(""{'props':{'value':true,'extra':25.5,'array' :[3 ]}}"")));assertEquals(2,base.size());ObjectNode resultProps=(ObjectNode)base.get(""props"");assertEquals(4,resultProps.size());assertEquals(123,resultProps.path(""base"").asInt());assertTrue(resultProps.path(""value"").asBoolean());assertEquals(25.5,resultProps.path(""extra"").asDouble());JsonNode n=resultProps.get(""array"");assertEquals(ArrayNode.class,n.getClass());assertEquals(2,n.size());assertEquals(3,n.get(1).asInt());}"
"com.fasterxml.jackson.databind.deser.merge.NodeMergeTest.testArrayNodeUpdateValue",0,"public void testArrayNodeUpdateValue()throws Exception {ArrayNode base=MAPPER.createArrayNode();base.add(""first"");assertSame(base,MAPPER.readerForUpdating(base).readValue(aposToQuotes(""['second',false,null]"")));assertEquals(4,base.size());assertEquals(""first"",base.path(0).asText());assertEquals(""second"",base.path(1).asText());assertFalse(base.path(2).asBoolean());assertTrue(base.path(3).isNull());}"
"com.fasterxml.jackson.databind.deser.merge.NodeMergeTest.testArrayNodeMerge",0,"public void testArrayNodeMerge()throws Exception {ArrayNodeWrapper w=MAPPER.readValue(aposToQuotes(""{'list':[456,true,{},[],'foo']}""),ArrayNodeWrapper.class);assertEquals(6,w.list.size());assertEquals(123,w.list.get(0).asInt());assertEquals(456,w.list.get(1).asInt());assertTrue(w.list.get(2).asBoolean());JsonNode n=w.list.get(3);assertTrue(n.isObject());assertEquals(0,n.size());n=w.list.get(4);assertTrue(n.isArray());assertEquals(0,n.size());assertEquals(""foo"",w.list.get(5).asText());}"
"com.fasterxml.jackson.databind.deser.merge.NodeMergeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TypeResolverTest.testSubtypeResolution",0,"public static void testSubtypeResolution()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleAbstractTypeResolver resolver=new SimpleAbstractTypeResolver();resolver.addMapping(Map.class,MyMap.class);SimpleModule basicModule=new SimpleModule();basicModule.setAbstractTypes(resolver);mapper.registerModule(basicModule);String value=""{\""z\"": {\""zz\"": {\""a\"": 42}}}"";A a=mapper.readValue(value,A.class);Map map=a.getMap();assertEquals(MyMap.class,map.getClass());Object ob=map.get(""zz"");assertEquals(B.class,ob.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TypeResolverTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest.testIssue1255",0,"public void testIssue1255()throws Exception {Foo mo=new Foo();mo.bar1=new Bar();mo.bar2=mo.bar1;String json=MAPPER.writeValueAsString(mo);Foo result=MAPPER.readValue(json,Foo.class);assertNotNull(result);}"
"com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest.testIssue1607",0,"public void testIssue1607()throws Exception {String json=MAPPER.writeValueAsString(new ReallyAlwaysContainer());assertEquals(aposToQuotes(""{'alwaysClass':1,'alwaysProp':2}""),json);}"
"com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestTypeModifierNameResolution.testTypeModiferNameResolution",0,"public void testTypeModiferNameResolution()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new CustomTypeModifier()));mapper.addMixIn(MyType.class,Mixin.class);MyType obj=new MyTypeImpl();obj.setData(""something"");String s=mapper.writer().writeValueAsString(obj);assertTrue(s.startsWith(""{\""TestTypeModifierNameResolution$MyType\"":""));}"
"com.fasterxml.jackson.databind.module.TestTypeModifierNameResolution.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.testNull",0,"public void testNull()throws Exception {Object result=MAPPER.readValue(""   null"",Object.class);assertNull(result);}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.testAnySetterNulls",0,"public void testAnySetterNulls()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(String.class,new FunnyNullDeserializer());mapper.registerModule(module);String fieldName=""fieldName"";String nullValue=""{\"""" + fieldName + ""\"":null}"";AnySetter result=mapper.readValue(nullValue,AnySetter.class);assertEquals(1,result.getAny().size());assertNotNull(result.getAny().get(fieldName));assertEquals(""funny"",result.getAny().get(fieldName));ObjectReader reader=mapper.readerFor(AnySetter.class);result=reader.readValue(nullValue);assertEquals(1,result.getAny().size());assertNotNull(result.getAny().get(fieldName));assertEquals(""funny"",result.getAny().get(fieldName));}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.testCustomRootNulls",0,"public void testCustomRootNulls()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(String.class,new FunnyNullDeserializer());mapper.registerModule(module);String str=mapper.readValue(""null"",String.class);assertNotNull(str);assertEquals(""funny"",str);ObjectReader reader=mapper.readerFor(String.class);str=reader.readValue(""null"");assertNotNull(str);assertEquals(""funny"",str);}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.testListOfNulls",0,"public void testListOfNulls()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(String.class,new FunnyNullDeserializer());mapper.registerModule(module);List<String> list=Arrays.asList(""funny"");JavaType type=mapper.getTypeFactory().constructCollectionType(List.class,String.class);List<?> deser=mapper.readValue(""[null]"",type);assertNotNull(deser);assertEquals(1,deser.size());assertEquals(list.get(0),deser.get(0));ObjectReader reader=mapper.readerFor(type);deser=reader.readValue(""[null]"");assertNotNull(deser);assertEquals(1,deser.size());assertEquals(list.get(0),deser.get(0));}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.testMapOfNulls",0,"public void testMapOfNulls()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(String.class,new FunnyNullDeserializer());mapper.registerModule(module);JavaType type=mapper.getTypeFactory().constructMapType(Map.class,String.class,String.class);Map<?,?> deser=mapper.readValue(""{\""key\"":null}"",type);assertNotNull(deser);assertEquals(1,deser.size());assertEquals(""funny"",deser.get(""key""));ObjectReader reader=mapper.readerFor(type);deser=reader.readValue(""{\""key\"":null}"");assertNotNull(deser);assertEquals(1,deser.size());assertEquals(""funny"",deser.get(""key""));}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.testPolymorphicDataNull",0,"public void testPolymorphicDataNull()throws Exception {String typeA=""{\""name\"":\""TypeAData\"",\""type\"":\""TypeA\"",\""proxy\"":{\""aValue\"":\""This works!\""}}"";RootData typeAData=MAPPER.readValue(typeA,RootData.class);assertEquals(""No value for aValue!?"",""This works!"",((TypeA)typeAData.proxy).aValue);String typeB=""{\""name\"":\""TypeBData\"",\""type\"":\""TypeB\"",\""proxy\"":{\""bValue\"":\""This works too!\""}}"";RootData typeBData=MAPPER.readValue(typeB,RootData.class);assertEquals(""No value for bValue!?"",""This works too!"",((TypeB)typeBData.proxy).bValue);String typeBNull=""{\""name\"":\""TypeBData\"",\""type\"":\""TypeB\"",\""proxy\"": null}"";RootData typeBNullData=MAPPER.readValue(typeBNull,RootData.class);assertNull(""Proxy should be null!"",typeBNullData.proxy);}"
"com.fasterxml.jackson.databind.deser.NullHandlingTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testUsesCorrectClassLoaderWhenThreadClassLoaderIsNull",0,"@Test public void testUsesCorrectClassLoaderWhenThreadClassLoaderIsNull()throws ClassNotFoundException {Thread.currentThread().setContextClassLoader(null);TypeFactory spySut=spy(objectMapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader));Class<?> clazz=spySut.findClass(aClassName);verify(spySut).getClassLoader();verify(spySut).classForName(any(String.class),any(Boolean.class),eq(classLoader));Assert.assertNotNull(clazz);Assert.assertEquals(classLoader,spySut.getClassLoader());Assert.assertEquals(typeModifier,spySut._modifiers[0]);Assert.assertEquals(null,Thread.currentThread().getContextClassLoader());}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testUsesCorrectClassLoaderWhenThreadClassLoaderIsNotNull",0,"@Test public void testUsesCorrectClassLoaderWhenThreadClassLoaderIsNotNull()throws ClassNotFoundException {TypeFactory spySut=spy(objectMapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader));Class<?> clazz=spySut.findClass(aClassName);verify(spySut).getClassLoader();verify(spySut).classForName(any(String.class),any(Boolean.class),eq(classLoader));Assert.assertNotNull(clazz);Assert.assertEquals(classLoader,spySut.getClassLoader());Assert.assertEquals(typeModifier,spySut._modifiers[0]);}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testCallingOnlyWithModifierGivesExpectedResults",0,"@Test public void testCallingOnlyWithModifierGivesExpectedResults(){TypeFactory sut=objectMapper.getTypeFactory().withModifier(typeModifier);Assert.assertNull(sut.getClassLoader());Assert.assertEquals(typeModifier,sut._modifiers[0]);}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testCallingOnlyWithClassLoaderGivesExpectedResults",0,"@Test public void testCallingOnlyWithClassLoaderGivesExpectedResults(){TypeFactory sut=objectMapper.getTypeFactory().withClassLoader(classLoader);Assert.assertNotNull(sut.getClassLoader());Assert.assertArrayEquals(null,sut._modifiers);}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testDefaultTypeFactoryNotAffectedByWithConstructors",0,"@Test public void testDefaultTypeFactoryNotAffectedByWithConstructors(){TypeFactory sut=objectMapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader);Assert.assertEquals(classLoader,sut.getClassLoader());Assert.assertEquals(typeModifier,sut._modifiers[0]);Assert.assertNull(objectMapper.getTypeFactory().getClassLoader());Assert.assertArrayEquals(null,objectMapper.getTypeFactory()._modifiers);}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testSetsTheCorrectClassLoderIfUsingWithModifierFollowedByWithClassLoader",0,"@Test public void testSetsTheCorrectClassLoderIfUsingWithModifierFollowedByWithClassLoader(){TypeFactory sut=objectMapper.getTypeFactory().withModifier(typeModifier).withClassLoader(classLoader);Assert.assertNotNull(sut.getClassLoader());}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testSetsTheCorrectClassLoderIfUsingWithClassLoaderFollowedByWithModifier",0,"@Test public void testSetsTheCorrectClassLoderIfUsingWithClassLoaderFollowedByWithModifier(){TypeFactory sut=objectMapper.getTypeFactory().withClassLoader(classLoader).withModifier(typeModifier);Assert.assertNotNull(sut.getClassLoader());}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testThreadContextClassLoaderIsUsedIfNotUsingWithClassLoader",0,"@Test public void testThreadContextClassLoaderIsUsedIfNotUsingWithClassLoader()throws ClassNotFoundException {TypeFactory spySut=spy(objectMapper.getTypeFactory());Assert.assertNull(spySut.getClassLoader());Class<?> clazz=spySut.findClass(aClassName);Assert.assertNotNull(clazz);verify(spySut).classForName(any(String.class),any(Boolean.class),eq(threadClassLoader));}"
"com.fasterxml.jackson.databind.type.TestTypeFactoryWithClassLoader.testUsesFallBackClassLoaderIfNoThreadClassLoaderAndNoWithClassLoader",0,"@Test public void testUsesFallBackClassLoaderIfNoThreadClassLoaderAndNoWithClassLoader()throws ClassNotFoundException {Thread.currentThread().setContextClassLoader(null);TypeFactory spySut=spy(objectMapper.getTypeFactory());Assert.assertNull(spySut.getClassLoader());Assert.assertArrayEquals(null,spySut._modifiers);Class<?> clazz=spySut.findClass(aClassName);Assert.assertNotNull(clazz);verify(spySut).classForName(any(String.class));}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForClass.testClassMixInsTopLevel",0,"public void testClassMixInsTopLevel()throws IOException {ObjectMapper m=new ObjectMapper();LeafClass result=m.readValue(""{\""a\"":\""value\""}"",LeafClass.class);assertEquals(""XXXvalue"",result.a);m=new ObjectMapper();m.addMixIn(LeafClass.class,MixIn.class);result=m.readValue(""{\""a\"":\""value\""}"",LeafClass.class);assertEquals(""value"",result.a);}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForClass.testClassMixInsMidLevel",0,"public void testClassMixInsMidLevel()throws IOException {ObjectMapper m=new ObjectMapper();m.addMixIn(BaseClass.class,MixIn.class);{BaseClass result=m.readValue(""{\""a\"":\""value\""}"",BaseClass.class);assertEquals(""value"",result.a);}{LeafClass result=m.readValue(""{\""a\"":\""value\""}"",LeafClass.class);assertEquals(""XXXvalue"",result.a);}}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForClass.testClassMixInsForObjectClass",0,"public void testClassMixInsForObjectClass()throws IOException {ObjectMapper m=new ObjectMapper();m.addMixIn(Object.class,MixIn.class);{BaseClass result=m.readValue(""{\""a\"":\""\""}"",BaseClass.class);assertEquals("""",result.a);}{LeafClass result=m.readValue(""{\""a\"":\""\""}"",LeafClass.class);assertEquals(""XXX"",result.a);}}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForClass.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestMixinMerging.testDisappearingMixins515",0,"public void testDisappearingMixins515()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS).disable(MapperFeature.AUTO_DETECT_FIELDS).disable(MapperFeature.AUTO_DETECT_GETTERS).disable(MapperFeature.AUTO_DETECT_IS_GETTERS).disable(MapperFeature.INFER_PROPERTY_MUTATORS);SimpleModule module=new SimpleModule(""Test"");module.setMixInAnnotation(Person.class,PersonMixin.class);mapper.registerModule(module);assertEquals(""{\""city\"":\""Seattle\""}"",mapper.writeValueAsString(new PersonImpl()));}"
"com.fasterxml.jackson.databind.introspect.TestMixinMerging.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.IgnoreWithDeserTest.testSimpleIgnore",0,"public void testSimpleIgnore()throws Exception {SizeClassIgnore result=MAPPER.readValue(""{\""x\"":1,\""y\"" : 2 }"",SizeClassIgnore.class);assertEquals(1,result._x);assertEquals(0,result._y);}"
"com.fasterxml.jackson.databind.deser.IgnoreWithDeserTest.testFailOnIgnore",0,"public void testFailOnIgnore()throws Exception {ObjectReader r=MAPPER.readerFor(NoYOrZ.class);NoYOrZ result=r.readValue(aposToQuotes(""{'x':3}""));assertEquals(3,result.x);assertEquals(1,result.y);r=r.with(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);try {result=r.readValue(aposToQuotes(""{'x':3,'y':4}""));fail(""Should fail"");}catch(JsonMappingException e){verifyException(e,""Ignored field"");}try {result=r.readValue(aposToQuotes(""{'z':2 }""));fail(""Should fail"");}catch(JsonMappingException e){verifyException(e,""Ignored field"");}}"
"com.fasterxml.jackson.databind.deser.IgnoreWithDeserTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.testListWithPolymorphic",0,"public void testListWithPolymorphic()throws Exception {BeanListWrapper beans=new BeanListWrapper();assertEquals(""{\""beans\"":[{\""@type\"":\""bean\"",\""x\"":0}]}"",MAPPER.writeValueAsString(beans));ObjectWriter w=MAPPER.writerWithView(Object.class);assertEquals(""{\""beans\"":[{\""@type\"":\""bean\"",\""x\"":0}]}"",w.writeValueAsString(beans));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.testIntList",0,"public void testIntList()throws Exception {TypedList<Integer> input=new TypedList<Integer>();input.add(5);input.add(13);assertEquals(""[\"""" + TypedList.class.getName()+ ""\"",[5,13]]"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.testStringListAsProp",0,"public void testStringListAsProp()throws Exception {TypedListAsProp<String> input=new TypedListAsProp<String>();input.add(""a"");input.add(""b"");assertEquals(""[\"""" + TypedListAsProp.class.getName()+ ""\"",[\""a\"",\""b\""]]"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.testStringListAsObjectWrapper",0,"public void testStringListAsObjectWrapper()throws Exception {TypedListAsWrapper<Boolean> input=new TypedListAsWrapper<Boolean>();input.add(true);input.add(null);input.add(false);String expName=""TestTypedArraySerialization$TypedListAsWrapper"";assertEquals(""{\"""" + expName + ""\"":[true,null,false]}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.testIntArray",0,"public void testIntArray()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(int[].class,WrapperMixIn.class);int[]input=new int[]{1,2,3};String clsName=int[].class.getName();assertEquals(""{\"""" + clsName + ""\"":[1,2,3]}"",m.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.testGenericArray",0,"public void testGenericArray()throws Exception {final A[]input=new A[]{new B()};final String EXP=""[{\""BB\"":{\""value\"":2}}]"";assertEquals(EXP,MAPPER.writeValueAsString(input));ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_STATIC_TYPING,true);assertEquals(EXP,m.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArraySerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.UpdateValueTest.testMapUpdate",0,"public void testMapUpdate()throws Exception {Map<String,Object> base=new LinkedHashMap<>();base.put(""a"",345);Map<String,Object> overrides=new LinkedHashMap<>();overrides.put(""xyz"",Boolean.TRUE);overrides.put(""foo"",""bar"");Map<String,Object> ob=MAPPER.updateValue(base,overrides);assertSame(base,ob);assertEquals(3,ob.size());assertEquals(Integer.valueOf(345),ob.get(""a""));assertEquals(""bar"",ob.get(""foo""));assertEquals(Boolean.TRUE,ob.get(""xyz""));}"
"com.fasterxml.jackson.databind.convert.UpdateValueTest.testListUpdate",0,"public void testListUpdate()throws Exception {List<Object> base=new ArrayList<>();base.add(123456);base.add(Boolean.FALSE);Object[]overrides=new Object[]{Boolean.TRUE,""zoink!""};List<Object> ob=MAPPER.updateValue(base,overrides);assertSame(base,ob);assertEquals(4,ob.size());assertEquals(Integer.valueOf(123456),ob.get(0));assertEquals(Boolean.FALSE,ob.get(1));assertEquals(overrides[0],ob.get(2));assertEquals(overrides[1],ob.get(3));}"
"com.fasterxml.jackson.databind.convert.UpdateValueTest.testArrayUpdate",0,"public void testArrayUpdate()throws Exception {Object[]base=new Object[]{Boolean.FALSE,Integer.valueOf(3)};Object[]overrides=new Object[]{Boolean.TRUE,""zoink!""};Object[]ob=MAPPER.updateValue(base,overrides);assertEquals(4,ob.length);assertEquals(base[0],ob[0]);assertEquals(base[1],ob[1]);assertEquals(overrides[0],ob[2]);assertEquals(overrides[1],ob[3]);}"
"com.fasterxml.jackson.databind.convert.UpdateValueTest.testPOJO",0,"public void testPOJO()throws Exception {Point base=new Point(42,28);Map<String,Object> overrides=new LinkedHashMap<>();overrides.put(""y"",1234);Point result=MAPPER.updateValue(base,overrides);assertSame(base,result);assertEquals(42,result.x);assertEquals(1234,result.y);}"
"com.fasterxml.jackson.databind.convert.UpdateValueTest.testMisc",0,"public void testMisc()throws Exception {assertNull(MAPPER.updateValue(null,""foo""));List<String> input=new ArrayList<>();assertSame(input,MAPPER.updateValue(input,null));}"
"com.fasterxml.jackson.databind.convert.UpdateValueTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.RawValueTest.testEquality",0,"public void testEquality(){RawValue raw1=new RawValue(""foo"");RawValue raw1b=new RawValue(""foo"");RawValue raw2=new RawValue(""bar"");assertTrue(raw1.equals(raw1));assertTrue(raw1.equals(raw1b));assertFalse(raw1.equals(raw2));assertFalse(raw1.equals(null));assertFalse(new RawValue((JsonSerializable)null).equals(raw1));assertNotNull(raw1.toString());}"
"com.fasterxml.jackson.databind.util.RawValueTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestJacksonTypes.testJsonLocation",0,"public void testJsonLocation()throws Exception {ObjectMapper m=new ObjectMapper();JsonLocation loc=new JsonLocation(""whatever"",-1,-1,100,13);String ser=serializeAsString(m,loc);JsonLocation result=m.readValue(ser,JsonLocation.class);assertNotNull(result);assertEquals(loc.getSourceRef(),result.getSourceRef());assertEquals(loc.getByteOffset(),result.getByteOffset());assertEquals(loc.getCharOffset(),result.getCharOffset());assertEquals(loc.getColumnNr(),result.getColumnNr());assertEquals(loc.getLineNr(),result.getLineNr());}"
"com.fasterxml.jackson.databind.deser.TestJacksonTypes.testJsonLocationProps",0,"public void testJsonLocationProps(){JsonLocation loc=new JsonLocation(null,-1,-1,100,13);assertTrue(loc.equals(loc));assertFalse(loc.equals(null));assertFalse(loc.equals(""abx""));loc.hashCode();}"
"com.fasterxml.jackson.databind.deser.TestJacksonTypes.testTokenBufferWithSample",0,"/** * Verify that  {@link TokenBuffer}can be properly deserializedautomatically,using the ""standard"" JSON sample document*/public void testTokenBufferWithSample()throws Exception {ObjectMapper m=new ObjectMapper();TokenBuffer result=m.readValue(SAMPLE_DOC_JSON_SPEC,TokenBuffer.class);verifyJsonSpecSampleDoc(result.asParser(),true);result.close();}"
"com.fasterxml.jackson.databind.deser.TestJacksonTypes.testTokenBufferWithSequence",0,"@SuppressWarnings(""resource"")public void testTokenBufferWithSequence()throws Exception {ObjectMapper m=new ObjectMapper();JsonParser jp=createParserUsingReader(""[32,[1 ],\""abc\"",{\""a\"" : true}]"");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());TokenBuffer buf=m.readValue(jp,TokenBuffer.class);JsonParser bufParser=buf.asParser();assertToken(JsonToken.VALUE_NUMBER_INT,bufParser.nextToken());assertEquals(32,bufParser.getIntValue());assertNull(bufParser.nextToken());buf=m.readValue(jp,TokenBuffer.class);bufParser=buf.asParser();assertToken(JsonToken.START_ARRAY,bufParser.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,bufParser.nextToken());assertEquals(1,bufParser.getIntValue());assertToken(JsonToken.END_ARRAY,bufParser.nextToken());assertNull(bufParser.nextToken());buf=m.readValue(jp,TokenBuffer.class);String str=m.readValue(buf.asParser(),String.class);assertEquals(""abc"",str);buf=m.readValue(jp,TokenBuffer.class);Map<?,?> map=m.readValue(buf.asParser(),Map.class);assertEquals(1,map.size());assertEquals(Boolean.TRUE,map.get(""a""));assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());}"
"com.fasterxml.jackson.databind.deser.TestJacksonTypes.testJavaType",0,"public void testJavaType()throws Exception {ObjectMapper mapper=new ObjectMapper();TypeFactory tf=TypeFactory.defaultInstance();String json=mapper.writeValueAsString(tf.constructType(String.class));assertEquals(quote(java.lang.String.class.getName()),json);JavaType t=mapper.readValue(json,JavaType.class);assertNotNull(t);assertEquals(String.class,t.getRawClass());}"
"com.fasterxml.jackson.databind.creators.TestCreators421.testMultiCtor421",0,"public void testMultiCtor421()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector());MultiCtor bean=mapper.readValue(aposToQuotes(""{'a':'123','b':'foo'}""),MultiCtor.class);assertNotNull(bean);assertEquals(""123"",bean._a);assertEquals(""foo"",bean._b);}"
"com.fasterxml.jackson.databind.creators.TestCreators421.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreatorsDelegating.testBooleanDelegate",0,"public void testBooleanDelegate()throws Exception {BooleanBean bb=MAPPER.readValue(""true"",BooleanBean.class);assertEquals(Boolean.TRUE,bb.value);bb=MAPPER.readValue(quote(""true""),BooleanBean.class);assertEquals(Boolean.TRUE,bb.value);}"
"com.fasterxml.jackson.databind.creators.TestCreatorsDelegating.testWithCtorAndDelegate",0,"public void testWithCtorAndDelegate()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class,""Pooka""));CtorBean711 bean=null;try {bean=mapper.readValue(""38"",CtorBean711.class);}catch(JsonMappingException e){fail(""Did not expect problems,got: "" + e.getMessage());}assertEquals(38,bean.age);assertEquals(""Pooka"",bean.name);}"
"com.fasterxml.jackson.databind.creators.TestCreatorsDelegating.testWithFactoryAndDelegate",0,"public void testWithFactoryAndDelegate()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class,""Fygar""));FactoryBean711 bean=null;try {bean=mapper.readValue(""38"",FactoryBean711.class);}catch(JsonMappingException e){fail(""Did not expect problems,got: "" + e.getMessage());}assertEquals(38,bean.age);assertEquals(""Fygar"",bean.name1);assertEquals(""Fygar"",bean.name2);}"
"com.fasterxml.jackson.databind.creators.TestCreatorsDelegating.testDelegateWithTokenBuffer",0,"public void testDelegateWithTokenBuffer()throws Exception {Value592 value=MAPPER.readValue(""{\""a\"":1,\""b\"":2}"",Value592.class);assertNotNull(value);Object ob=value.stuff;assertEquals(TokenBuffer.class,ob.getClass());JsonParser jp=((TokenBuffer)ob).asParser();assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""a"",jp.getCurrentName());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(1,jp.getIntValue());assertToken(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""b"",jp.getCurrentName());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(2,jp.getIntValue());assertToken(JsonToken.END_OBJECT,jp.nextToken());jp.close();}"
"com.fasterxml.jackson.databind.creators.TestCreatorsDelegating.testIssue465",0,"@SuppressWarnings(""unchecked"")public void testIssue465()throws Exception {final String JSON=""{\""A\"":12}"";Map<String,Long> map=MAPPER.readValue(JSON,Map.class);assertEquals(1,map.size());assertEquals(Integer.valueOf(12),map.get(""A""));MapBean bean=MAPPER.readValue(JSON,MapBean.class);assertEquals(1,bean.map.size());assertEquals(Long.valueOf(12L),bean.map.get(""A""));final String EMPTY_JSON=""{}"";map=MAPPER.readValue(EMPTY_JSON,Map.class);assertEquals(0,map.size());bean=MAPPER.readValue(EMPTY_JSON,MapBean.class);assertEquals(0,bean.map.size());}"
"com.fasterxml.jackson.databind.creators.TestCreatorsDelegating.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.misc.BeanPropertyMapTest.testArrayOutOfBounds884",0,"public void testArrayOutOfBounds884()throws Exception {List<SettableBeanProperty> props=new ArrayList<SettableBeanProperty>();PropertyMetadata md=PropertyMetadata.STD_REQUIRED;props.add(new ObjectIdValueProperty(new MyObjectIdReader(""pk""),md));props.add(new ObjectIdValueProperty(new MyObjectIdReader(""firstName""),md));BeanPropertyMap propMap=new BeanPropertyMap(false,props,new HashMap<String,List<PropertyName>>());propMap=propMap.withProperty(new ObjectIdValueProperty(new MyObjectIdReader(""@id""),md));assertNotNull(propMap);}"
"com.fasterxml.jackson.databind.misc.BeanPropertyMapTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testSimpleViaParser",0,"public void testSimpleViaParser()throws Exception {final String JSON=""[1]"";JsonParser p=MAPPER.getFactory().createParser(JSON);Object ob=MAPPER.readerFor(Object.class).readValue(p);p.close();assertTrue(ob instanceof List<?>);}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testSimpleAltSources",0,"public void testSimpleAltSources()throws Exception {final String JSON=""[1]"";final byte[]BYTES=JSON.getBytes(""UTF-8"");Object ob=MAPPER.readerFor(Object.class).readValue(BYTES);assertTrue(ob instanceof List<?>);ob=MAPPER.readerFor(Object.class).readValue(BYTES,0,BYTES.length);assertTrue(ob instanceof List<?>);assertEquals(1,((List<?>)ob).size());}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testParserFeatures",0,"public void testParserFeatures()throws Exception {final String JSON=""[/* foo */ 7 ]"";ObjectReader reader=MAPPER.readerFor(int[].class).with(JsonParser.Feature.ALLOW_COMMENTS);int[]value=reader.readValue(JSON);assertNotNull(value);assertEquals(1,value.length);assertEquals(7,value[0]);try {reader.without(JsonParser.Feature.ALLOW_COMMENTS).readValue(JSON);fail(""Should not have passed"");}catch(JsonProcessingException e){verifyException(e,""foo"");}}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testNoPointerLoading",0,"public void testNoPointerLoading()throws Exception {final String source=""{\""foo\"":{\""bar\"":{\""caller\"":{\""name\"":{\""value\"":1234}}}}}"";JsonNode tree=MAPPER.readTree(source);JsonNode node=tree.at(""/foo/bar/caller"");POJO pojo=MAPPER.treeToValue(node,POJO.class);assertTrue(pojo.name.containsKey(""value""));assertEquals(1234,pojo.name.get(""value""));}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testPointerLoading",0,"public void testPointerLoading()throws Exception {final String source=""{\""foo\"":{\""bar\"":{\""caller\"":{\""name\"":{\""value\"":1234}}}}}"";ObjectReader reader=MAPPER.readerFor(POJO.class).at(""/foo/bar/caller"");POJO pojo=reader.readValue(source);assertTrue(pojo.name.containsKey(""value""));assertEquals(1234,pojo.name.get(""value""));}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testPointerLoadingAsJsonNode",0,"public void testPointerLoadingAsJsonNode()throws Exception {final String source=""{\""foo\"":{\""bar\"":{\""caller\"":{\""name\"":{\""value\"":1234}}}}}"";ObjectReader reader=MAPPER.readerFor(POJO.class).at(JsonPointer.compile(""/foo/bar/caller""));JsonNode node=reader.readTree(source);assertTrue(node.has(""name""));assertEquals(""{\""value\"":1234}"",node.get(""name"").toString());}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testPointerLoadingMappingIteratorOne",0,"public void testPointerLoadingMappingIteratorOne()throws Exception {final String source=""{\""foo\"":{\""bar\"":{\""caller\"":{\""name\"":{\""value\"":1234}}}}}"";ObjectReader reader=MAPPER.readerFor(POJO.class).at(""/foo/bar/caller"");MappingIterator<POJO> itr=reader.readValues(source);POJO pojo=itr.next();assertTrue(pojo.name.containsKey(""value""));assertEquals(1234,pojo.name.get(""value""));assertFalse(itr.hasNext());itr.close();}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testPointerLoadingMappingIteratorMany",0,"public void testPointerLoadingMappingIteratorMany()throws Exception {final String source=""{\""foo\"":{\""bar\"":{\""caller\"":[{\""name\"":{\""value\"":1234}},{\""name\"":{\""value\"":5678}}]}}}"";ObjectReader reader=MAPPER.readerFor(POJO.class).at(""/foo/bar/caller"");MappingIterator<POJO> itr=reader.readValues(source);POJO pojo=itr.next();assertTrue(pojo.name.containsKey(""value""));assertEquals(1234,pojo.name.get(""value""));assertTrue(itr.hasNext());pojo=itr.next();assertNotNull(pojo.name);assertTrue(pojo.name.containsKey(""value""));assertEquals(5678,pojo.name.get(""value""));assertFalse(itr.hasNext());itr.close();}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testNodeHandling",0,"public void testNodeHandling()throws Exception {JsonNodeFactory nodes=new JsonNodeFactory(true);ObjectReader r=MAPPER.reader().with(nodes);assertSame(r,r.with(nodes));assertTrue(r.createArrayNode().isArray());assertTrue(r.createObjectNode().isObject());}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testFeatureSettings",0,"public void testFeatureSettings()throws Exception {ObjectReader r=MAPPER.reader();assertFalse(r.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));assertFalse(r.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));r=r.withoutFeatures(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES,DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);assertFalse(r.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES));assertFalse(r.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE));r=r.withFeatures(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES,DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);assertTrue(r.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES));assertTrue(r.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE));assertSame(r,r.with(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES,DeserializationFeature.FAIL_ON_INVALID_SUBTYPE));}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testMiscSettings",0,"public void testMiscSettings()throws Exception {ObjectReader r=MAPPER.reader();assertSame(MAPPER.getFactory(),r.getFactory());JsonFactory f=new JsonFactory();r=r.with(f);assertSame(f,r.getFactory());assertSame(r,r.with(f));assertNotNull(r.getTypeFactory());assertNull(r.getInjectableValues());r=r.withAttributes(Collections.emptyMap());ContextAttributes attrs=r.getAttributes();assertNotNull(attrs);assertNull(attrs.getAttribute(""abc""));assertSame(r,r.withoutAttribute(""foo""));ObjectReader newR=r.forType(MAPPER.constructType(String.class));assertNotSame(r,newR);assertSame(newR,newR.forType(String.class));DeserializationProblemHandler probH=new DeserializationProblemHandler(){};newR=r.withHandler(probH);assertNotSame(r,newR);assertSame(newR,newR.withHandler(probH));r=newR;}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testDeprecatedSettings",0,"@SuppressWarnings(""deprecation"")public void testDeprecatedSettings()throws Exception {ObjectReader r=MAPPER.reader();ObjectReader newR=r.forType(MAPPER.constructType(String.class));assertSame(newR,newR.withType(String.class));assertSame(newR,newR.withType(MAPPER.constructType(String.class)));newR=newR.withRootName(PropertyName.construct(""foo""));assertNotSame(r,newR);assertSame(newR,newR.withRootName(PropertyName.construct(""foo"")));}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testNoPrefetch",0,"public void testNoPrefetch()throws Exception {ObjectReader r=MAPPER.reader().without(DeserializationFeature.EAGER_DESERIALIZER_FETCH);Number n=r.forType(Integer.class).readValue(""123 "");assertEquals(Integer.valueOf(123),n);}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testTreeToValue",0,"public void testTreeToValue()throws Exception {ArrayNode n=MAPPER.createArrayNode();n.add(""xyz"");ObjectReader r=MAPPER.readerFor(String.class);List<?> list=r.treeToValue(n,List.class);assertEquals(1,list.size());}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testCodecUnsupportedWrites",0,"public void testCodecUnsupportedWrites()throws Exception {ObjectReader r=MAPPER.readerFor(String.class);JsonGenerator g=MAPPER.getFactory().createGenerator(new StringWriter());ObjectNode n=MAPPER.createObjectNode();try {r.writeTree(g,n);fail(""Should not pass"");}catch(UnsupportedOperationException e){;}try {r.writeValue(g,""Foo"");fail(""Should not pass"");}catch(UnsupportedOperationException e){;}g.close();g.close();}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testMissingType",0,"public void testMissingType()throws Exception {ObjectReader r=MAPPER.reader();try {r.readValue(""1"");fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""No value type configured"");}}"
"com.fasterxml.jackson.databind.ObjectReaderTest.testSchema",0,"public void testSchema()throws Exception {ObjectReader r=MAPPER.readerFor(String.class);r=r.with((FormatSchema)null);try {r=r.with(new BogusSchema()).readValue(quote(""foo""));fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not use FormatSchema"");}}"
"com.fasterxml.jackson.databind.ObjectReaderTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.TestVersions.testMapperVersions",0,"public void testMapperVersions(){ObjectMapper mapper=new ObjectMapper();assertVersion(mapper);assertVersion(mapper.reader());assertVersion(mapper.writer());assertVersion(new JacksonAnnotationIntrospector());}"
"com.fasterxml.jackson.databind.TestVersions.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.SetterConflictTest.testSetterPriority",0,"public void testSetterPriority()throws Exception {Issue1033Bean bean=MAPPER.readValue(aposToQuotes(""{'value':42}""),Issue1033Bean.class);assertEquals(42,bean.value);}"
"com.fasterxml.jackson.databind.introspect.SetterConflictTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.MapKeySerializationTest.testMapJsonValueKey47",0,"public void testMapJsonValueKey47()throws Exception {WatMap input=new WatMap();input.put(new Wat(""3""),true);String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'3':true}""),json);}"
"com.fasterxml.jackson.databind.ser.jdk.MapKeySerializationTest.testClassKey",0,"public void testClassKey()throws IOException {Map<Class<?>,Integer> map=new LinkedHashMap<Class<?>,Integer>();map.put(String.class,2);String json=MAPPER.writeValueAsString(map);assertEquals(aposToQuotes(""{'java.lang.String':2}""),json);}"
"com.fasterxml.jackson.databind.ser.jdk.MapKeySerializationTest.testDefaultKeySerializer",0,"public void testDefaultKeySerializer()throws IOException {ObjectMapper m=new ObjectMapper();m.getSerializerProvider().setDefaultKeySerializer(new DefaultKeySerializer());Map<String,String> map=new HashMap<String,String>();map.put(""a"",""b"");assertEquals(""{\""DEFAULT:a\"":\""b\""}"",m.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.jdk.MapKeySerializationTest.testMapsWithBinaryKeys",0,"public void testMapsWithBinaryKeys()throws Exception {byte[]binary=new byte[]{1,2,3,4,5};MapWrapper<byte[],String> input=new MapWrapper<>(binary,""stuff"");String expBase64=Base64Variants.MIME.encode(binary);assertEquals(aposToQuotes(""{'map':{'"" + expBase64 + ""':'stuff'}}""),MAPPER.writeValueAsString(input));Map<byte[],String> map=new LinkedHashMap<>();map.put(binary,""xyz"");assertEquals(aposToQuotes(""{'"" + expBase64 + ""':'xyz'}""),MAPPER.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.jdk.MapKeySerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderViaUpdateTest.testBuilderUpdateWithValue",0,"public void testBuilderUpdateWithValue()throws Exception {try {MAPPER.readerFor(ValueClassXY.class).withValueToUpdate(new ValueClassXY(6,7)).readValue(aposToQuotes(""{'x':1,'y:'2'}""));fail(""Should not have passed"");}catch(InvalidDefinitionException e){verifyException(e,""Deserialization of"");verifyException(e,""by passing existing instance"");verifyException(e,""ValueClassXY"");}}"
"com.fasterxml.jackson.databind.deser.builder.BuilderViaUpdateTest.testBuilderWithWrongType",0,"public void testBuilderWithWrongType()throws Exception {try {MAPPER.readerFor(ValueClassXY.class).withValueToUpdate(new SimpleBuilderXY()).readValue(aposToQuotes(""{'x':1,'y:'2'}""));fail(""Should not have passed"");}catch(InvalidDefinitionException e){verifyException(e,""Deserialization of"");verifyException(e,""by passing existing Builder"");verifyException(e,""SimpleBuilderXY"");}}"
"com.fasterxml.jackson.databind.deser.builder.BuilderViaUpdateTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.DefaultTypingWithPrimitivesTest.testDefaultTypingWithLong",0,"public void testDefaultTypingWithLong()throws Exception {Data data=new Data();data.key=1L;Map<String,Object> mapData=new HashMap<String,Object>();mapData.put(""longInMap"",2L);mapData.put(""longAsField"",data);ObjectMapper mapper=new ObjectMapper();StdTypeResolverBuilder resolver=new StdTypeResolverBuilder();resolver.init(JsonTypeInfo.Id.CLASS,null);resolver.inclusion(JsonTypeInfo.As.PROPERTY);resolver.typeProperty(""__t"");mapper.setDefaultTyping(resolver);mapper.enable(SerializationFeature.INDENT_OUTPUT);String json=mapper.writeValueAsString(mapData);Map<?,?> result=mapper.readValue(json,Map.class);assertNotNull(result);assertEquals(2,result.size());}"
"com.fasterxml.jackson.databind.jsontype.DefaultTypingWithPrimitivesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testPropertyRemoval",0,"public void testPropertyRemoval()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SerializerModifierModule(new RemovingModifier(""a"")));Bean bean=new Bean();assertEquals(""{\""b\"":\""b\""}"",mapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testPropertyReorder",0,"public void testPropertyReorder()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SerializerModifierModule(new ReorderingModifier()));Bean bean=new Bean();assertEquals(""{\""a\"":\""a\"",\""b\"":\""b\""}"",mapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testBuilderReplacement",0,"public void testBuilderReplacement()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SerializerModifierModule(new BuilderModifier(new BogusBeanSerializer(17))));Bean bean=new Bean();assertEquals(""17"",mapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testSerializerReplacement",0,"public void testSerializerReplacement()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SerializerModifierModule(new ReplacingModifier(new BogusBeanSerializer(123))));Bean bean=new Bean();assertEquals(""123"",mapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testEmptyBean",0,"public void testEmptyBean()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"",Version.unknownVersion()){@Override public void setupModule(SetupContext context){super.setupModule(context);context.addBeanSerializerModifier(new EmptyBeanModifier());}});String json=mapper.writeValueAsString(new EmptyBean());assertEquals(""{\""bogus\"":\""foo\""}"",json);}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testEmptyBean539",0,"public void testEmptyBean539()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"",Version.unknownVersion()){@Override public void setupModule(SetupContext context){super.setupModule(context);context.addBeanSerializerModifier(new EmptyBeanModifier539());}});String json=mapper.writeValueAsString(new EmptyBean());assertEquals(""42"",json);}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testModifyArraySerializer",0,"public void testModifyArraySerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setSerializerModifier(new ArraySerializerModifier()));assertEquals(""123"",mapper.writeValueAsString(new Integer[]{1,2}));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testModifyCollectionSerializer",0,"public void testModifyCollectionSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setSerializerModifier(new CollectionSerializerModifier()));assertEquals(""123"",mapper.writeValueAsString(new ArrayList<Integer>()));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testModifyMapSerializer",0,"public void testModifyMapSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setSerializerModifier(new MapSerializerModifier()));assertEquals(""123"",mapper.writeValueAsString(new HashMap<String,String>()));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testModifyEnumSerializer",0,"public void testModifyEnumSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setSerializerModifier(new EnumSerializerModifier()));assertEquals(""123"",mapper.writeValueAsString(ABC.C));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.testModifyKeySerializer",0,"public void testModifyKeySerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setSerializerModifier(new KeySerializerModifier()));Map<String,Integer> map=new HashMap<String,Integer>();map.put(""x"",3);assertEquals(""{\""foo\"":3}"",mapper.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifierTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithSer.testSimplePerCall",0,"public void testSimplePerCall()throws Exception {final String EXP=aposToQuotes(""[{'value':'0:a'},{'value':'1:b'}]"");ObjectWriter w=MAPPER.writer();final TestPOJO[]INPUT=new TestPOJO[]{new TestPOJO(""a""),new TestPOJO(""b"")};assertEquals(EXP,w.writeValueAsString(INPUT));assertEquals(EXP,w.writeValueAsString(INPUT));}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithSer.testSimpleDefaults",0,"public void testSimpleDefaults()throws Exception {final String EXP=aposToQuotes(""{'value':'3:xyz'}"");final TestPOJO INPUT=new TestPOJO(""xyz"");String json=MAPPER.writer().withAttribute(KEY,Integer.valueOf(3)).writeValueAsString(INPUT);assertEquals(EXP,json);String json2=MAPPER.writer().withAttribute(KEY,Integer.valueOf(3)).writeValueAsString(INPUT);assertEquals(EXP,json2);}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithSer.testHierarchic",0,"public void testHierarchic()throws Exception {final TestPOJO[]INPUT=new TestPOJO[]{new TestPOJO(""a""),new TestPOJO(""b"")};final String EXP=aposToQuotes(""[{'value':'2:a'},{'value':'3:b'}]"");ObjectWriter w=MAPPER.writer().withAttribute(KEY,Integer.valueOf(2));assertEquals(EXP,w.writeValueAsString(INPUT));assertEquals(EXP,w.writeValueAsString(INPUT));}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithSer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.ScalarCoercionTest.testNullValueFromEmpty",0,"public void testNullValueFromEmpty()throws Exception {_verifyNullOkFromEmpty(Boolean.class,null);_verifyNullOkFromEmpty(Boolean.TYPE,Boolean.FALSE);_verifyNullOkFromEmpty(Byte.class,null);_verifyNullOkFromEmpty(Byte.TYPE,Byte.valueOf((byte)0));_verifyNullOkFromEmpty(Short.class,null);_verifyNullOkFromEmpty(Short.TYPE,Short.valueOf((short)0));_verifyNullOkFromEmpty(Character.class,null);_verifyNullOkFromEmpty(Character.TYPE,Character.valueOf((char)0));_verifyNullOkFromEmpty(Integer.class,null);_verifyNullOkFromEmpty(Integer.TYPE,Integer.valueOf(0));_verifyNullOkFromEmpty(Long.class,null);_verifyNullOkFromEmpty(Long.TYPE,Long.valueOf(0L));_verifyNullOkFromEmpty(Float.class,null);_verifyNullOkFromEmpty(Float.TYPE,Float.valueOf(0.0f));_verifyNullOkFromEmpty(Double.class,null);_verifyNullOkFromEmpty(Double.TYPE,Double.valueOf(0.0));_verifyNullOkFromEmpty(BigInteger.class,null);_verifyNullOkFromEmpty(BigDecimal.class,null);}"
"com.fasterxml.jackson.databind.struct.ScalarCoercionTest.testNullFailFromEmpty",0,"public void testNullFailFromEmpty()throws Exception {_verifyNullFail(Boolean.class);_verifyNullFail(Boolean.TYPE);_verifyNullFail(Byte.class);_verifyNullFail(Byte.TYPE);_verifyNullFail(Short.class);_verifyNullFail(Short.TYPE);_verifyNullFail(Character.class);_verifyNullFail(Character.TYPE);_verifyNullFail(Integer.class);_verifyNullFail(Integer.TYPE);_verifyNullFail(Long.class);_verifyNullFail(Long.TYPE);_verifyNullFail(Float.class);_verifyNullFail(Float.TYPE);_verifyNullFail(Double.class);_verifyNullFail(Double.TYPE);_verifyNullFail(BigInteger.class);_verifyNullFail(BigDecimal.class);}"
"com.fasterxml.jackson.databind.struct.ScalarCoercionTest.testStringCoercionOk",0,"public void testStringCoercionOk()throws Exception {_verifyCoerceSuccess(""1"",Boolean.TYPE,Boolean.TRUE);_verifyCoerceSuccess(""1"",Boolean.class,Boolean.TRUE);_verifyCoerceSuccess(quote(""true""),Boolean.TYPE,Boolean.TRUE);_verifyCoerceSuccess(quote(""true""),Boolean.class,Boolean.TRUE);_verifyCoerceSuccess(quote(""True""),Boolean.TYPE,Boolean.TRUE);_verifyCoerceSuccess(quote(""True""),Boolean.class,Boolean.TRUE);_verifyCoerceSuccess(""0"",Boolean.TYPE,Boolean.FALSE);_verifyCoerceSuccess(""0"",Boolean.class,Boolean.FALSE);_verifyCoerceSuccess(quote(""false""),Boolean.TYPE,Boolean.FALSE);_verifyCoerceSuccess(quote(""false""),Boolean.class,Boolean.FALSE);_verifyCoerceSuccess(quote(""False""),Boolean.TYPE,Boolean.FALSE);_verifyCoerceSuccess(quote(""False""),Boolean.class,Boolean.FALSE);_verifyCoerceSuccess(quote(""123""),Byte.TYPE,Byte.valueOf((byte)123));_verifyCoerceSuccess(quote(""123""),Byte.class,Byte.valueOf((byte)123));_verifyCoerceSuccess(quote(""123""),Short.TYPE,Short.valueOf((short)123));_verifyCoerceSuccess(quote(""123""),Short.class,Short.valueOf((short)123));_verifyCoerceSuccess(quote(""123""),Integer.TYPE,Integer.valueOf(123));_verifyCoerceSuccess(quote(""123""),Integer.class,Integer.valueOf(123));_verifyCoerceSuccess(quote(""123""),Long.TYPE,Long.valueOf(123));_verifyCoerceSuccess(quote(""123""),Long.class,Long.valueOf(123));_verifyCoerceSuccess(quote(""123.5""),Float.TYPE,Float.valueOf(123.5f));_verifyCoerceSuccess(quote(""123.5""),Float.class,Float.valueOf(123.5f));_verifyCoerceSuccess(quote(""123.5""),Double.TYPE,Double.valueOf(123.5));_verifyCoerceSuccess(quote(""123.5""),Double.class,Double.valueOf(123.5));_verifyCoerceSuccess(quote(""123""),BigInteger.class,BigInteger.valueOf(123));_verifyCoerceSuccess(quote(""123.0""),BigDecimal.class,new BigDecimal(""123.0""));}"
"com.fasterxml.jackson.databind.struct.ScalarCoercionTest.testStringCoercionFail",0,"public void testStringCoercionFail()throws Exception {_verifyCoerceFail(quote(""true""),Boolean.TYPE);_verifyCoerceFail(quote(""true""),Boolean.class);_verifyCoerceFail(quote(""123""),Byte.TYPE);_verifyCoerceFail(quote(""123""),Byte.class);_verifyCoerceFail(quote(""123""),Short.TYPE);_verifyCoerceFail(quote(""123""),Short.class);_verifyCoerceFail(quote(""123""),Integer.TYPE);_verifyCoerceFail(quote(""123""),Integer.class);_verifyCoerceFail(quote(""123""),Long.TYPE);_verifyCoerceFail(quote(""123""),Long.class);_verifyCoerceFail(quote(""123.5""),Float.TYPE);_verifyCoerceFail(quote(""123.5""),Float.class);_verifyCoerceFail(quote(""123.5""),Double.TYPE);_verifyCoerceFail(quote(""123.5""),Double.class);_verifyCoerceFail(quote(""123""),BigInteger.class);_verifyCoerceFail(quote(""123.0""),BigDecimal.class);}"
"com.fasterxml.jackson.databind.struct.ScalarCoercionTest.testMiscCoercionFail",0,"public void testMiscCoercionFail()throws Exception {_verifyCoerceFail(""1"",Boolean.TYPE);_verifyCoerceFail(""1"",Boolean.class);_verifyCoerceFail(""65"",Character.class);_verifyCoerceFail(""65"",Character.TYPE);}"
"com.fasterxml.jackson.databind.struct.ScalarCoercionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testBigUntypedMap",0,"public void testBigUntypedMap()throws Exception {Map<String,Object> map=new LinkedHashMap<String,Object>();for (int i=0;i < 1100;++i){if ((i & 1)== 0){map.put(String.valueOf(i),Integer.valueOf(i));}else {Map<String,Object> map2=new LinkedHashMap<String,Object>();map2.put(""x"",Integer.valueOf(i));map.put(String.valueOf(i),map2);}}String json=MAPPER.writeValueAsString(map);Object bound=MAPPER.readValue(json,Object.class);assertEquals(map,bound);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testUntypedMap2",0,"/** * Let's also try another way to express ""gimme a Map"" deserialization;this time by specifying a Map class,to reduce need to cast*/public void testUntypedMap2()throws Exception {String JSON=""{\""a\"" : \""x\"" }"";@SuppressWarnings(""unchecked"")HashMap<String,Object> result=MAPPER.readValue(JSON,HashMap.class);assertNotNull(result);assertTrue(result instanceof Map<?,?>);assertEquals(1,result.size());assertEquals(""x"",result.get(""a""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testUntypedMap3",0,"/** * Unit test for [JACKSON-185]*/public void testUntypedMap3()throws Exception {String JSON=""{\""a\"":[{\""a\"":\""b\""},\""value\""]}"";Map<?,?> result=MAPPER.readValue(JSON,Map.class);assertTrue(result instanceof Map<?,?>);assertEquals(1,result.size());Object ob=result.get(""a"");assertNotNull(ob);Collection<?> list=(Collection<?>)ob;assertEquals(2,list.size());JSON=""{\""var1\"":\""val1\"",\""var2\"":\""val2\"","" + ""\""subvars\"": ["" + ""{\""subvar1\"" : \""subvar2\"",\""x\"" : \""y\"" },""+ ""{\""a\"":1}]""+ "" }"";result=MAPPER.readValue(JSON,Map.class);assertTrue(result instanceof Map<?,?>);assertEquals(3,result.size());}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testSpecialMap",0,"public void testSpecialMap()throws IOException {final ObjectWrapperMap map=MAPPER.readValue(UNTYPED_MAP_JSON,ObjectWrapperMap.class);assertNotNull(map);_doTestUntyped(map);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testGenericMap",0,"public void testGenericMap()throws IOException {final Map<String,ObjectWrapper> map=MAPPER.readValue(UNTYPED_MAP_JSON,new TypeReference<Map<String,ObjectWrapper>>(){});_doTestUntyped(map);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testFromEmptyString",0,"public void testFromEmptyString()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);Map<?,?> result=m.readValue(quote(""""),Map.class);assertNull(result);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testExactStringIntMap",0,"public void testExactStringIntMap()throws Exception {String JSON=""{\""foo\"" : 13,\""bar\"" : -39,\n \""\"" : 0 }"";Map<String,Integer> result=MAPPER.readValue(JSON,new TypeReference<HashMap<String,Integer>>(){});assertNotNull(result);assertEquals(HashMap.class,result.getClass());assertEquals(3,result.size());assertEquals(Integer.valueOf(13),result.get(""foo""));assertEquals(Integer.valueOf(-39),result.get(""bar""));assertEquals(Integer.valueOf(0),result.get(""""));assertNull(result.get(""foobar""));assertNull(result.get("" ""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testIntBooleanMap",0,"/** * Let's also check that it is possible to do type conversions to allow use of non-String Map keys.*/public void testIntBooleanMap()throws Exception {String JSON=""{\""1\"" : true,\""-1\"" : false }"";Map<String,Integer> result=MAPPER.readValue(JSON,new TypeReference<HashMap<Integer,Boolean>>(){});assertNotNull(result);assertEquals(HashMap.class,result.getClass());assertEquals(2,result.size());assertEquals(Boolean.TRUE,result.get(Integer.valueOf(1)));assertEquals(Boolean.FALSE,result.get(Integer.valueOf(-1)));assertNull(result.get(""foobar""));assertNull(result.get(0));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testExactStringStringMap",0,"public void testExactStringStringMap()throws Exception {String JSON=""{\""a\"" : \""b\"" }"";Map<String,Integer> result=MAPPER.readValue(JSON,new TypeReference<TreeMap<String,String>>(){});assertNotNull(result);assertEquals(TreeMap.class,result.getClass());assertEquals(1,result.size());assertEquals(""b"",result.get(""a""));assertNull(result.get(""b""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testGenericStringIntMap",0,"/** * Unit test that verifies that it's ok to have incomplete information about Map class itself,as long as it's something we good guess about: for example,<code>Map.Class</code> will be replaced by something like <code>HashMap.class</code>,if given.*/public void testGenericStringIntMap()throws Exception {String JSON=""{\""a\"" : 1,\""b\"" : 2,\""c\"" : -99 }"";Map<String,Integer> result=MAPPER.readValue(JSON,new TypeReference<Map<String,Integer>>(){});assertNotNull(result);assertTrue(result instanceof Map<?,?>);assertEquals(3,result.size());assertEquals(Integer.valueOf(-99),result.get(""c""));assertEquals(Integer.valueOf(2),result.get(""b""));assertEquals(Integer.valueOf(1),result.get(""a""));assertNull(result.get(""""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testEnumMap",0,"public void testEnumMap()throws Exception {String JSON=""{\""KEY1\"" : \""\"",\""WHATEVER\"" : null }"";EnumMap<Key,String> result=MAPPER.readValue(JSON,new TypeReference<EnumMap<Key,String>>(){});assertNotNull(result);assertEquals(EnumMap.class,result.getClass());assertEquals(2,result.size());assertEquals("""",result.get(Key.KEY1));assertTrue(result.containsKey(Key.WHATEVER));assertNull(result.get(Key.WHATEVER));assertFalse(result.containsKey(Key.KEY2));assertNull(result.get(Key.KEY2));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testMapWithEnums",0,"public void testMapWithEnums()throws Exception {String JSON=""{\""KEY2\"" : \""WHATEVER\"" }"";Map<Enum<?>,Enum<?>> result=MAPPER.readValue(JSON,new TypeReference<Map<Key,Key>>(){});assertNotNull(result);assertTrue(result instanceof Map<?,?>);assertEquals(1,result.size());assertEquals(Key.WHATEVER,result.get(Key.KEY2));assertNull(result.get(Key.WHATEVER));assertNull(result.get(Key.KEY1));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testEnumPolymorphicSerializationTest",0,"public void testEnumPolymorphicSerializationTest()throws Exception {ObjectMapper mapper=new ObjectMapper();List<ITestType> testTypesList=new ArrayList<ITestType>();testTypesList.add(ConcreteType.ONE);testTypesList.add(ConcreteType.TWO);ListContainer listContainer=new ListContainer();listContainer.testTypes=testTypesList;String json=mapper.writeValueAsString(listContainer);listContainer=mapper.readValue(json,ListContainer.class);EnumMapContainer enumMapContainer=new EnumMapContainer();EnumMap<KeyEnum,ITestType> testTypesMap=new EnumMap<KeyEnum,ITestType>(KeyEnum.class);testTypesMap.put(KeyEnum.A,ConcreteType.ONE);testTypesMap.put(KeyEnum.B,ConcreteType.TWO);enumMapContainer.testTypes=testTypesMap;json=mapper.writeValueAsString(enumMapContainer);enumMapContainer=mapper.readValue(json,EnumMapContainer.class);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testDateMap",0,"public void testDateMap()throws Exception {Date date1=new Date(123456000L);DateFormat fmt=new SimpleDateFormat(""EEE,dd MMM yyyy HH:mm:ss zzz"",Locale.US);String JSON=""{\"""" + fmt.format(date1)+ ""\"" : \""\"",\""""+ new Date(0).getTime()+ ""\"" : null }"";HashMap<Date,String> result=MAPPER.readValue(JSON,new TypeReference<HashMap<Date,String>>(){});assertNotNull(result);assertEquals(HashMap.class,result.getClass());assertEquals(2,result.size());assertTrue(result.containsKey(date1));assertEquals("""",result.get(new Date(123456000L)));assertTrue(result.containsKey(new Date(0)));assertNull(result.get(new Date(0)));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testCalendarMap",0,"public void testCalendarMap()throws Exception {TimeZone tz=MAPPER.getSerializationConfig().getTimeZone();Calendar c=Calendar.getInstance(tz);c.setTimeInMillis(123456000L);DateFormat fmt=new SimpleDateFormat(""EEE,dd MMM yyyy HH:mm:ss zzz"",Locale.US);String JSON=""{\"""" + fmt.format(c.getTime())+ ""\"" : \""\"",\""""+ new Date(0).getTime()+ ""\"" : null }"";HashMap<Calendar,String> result=MAPPER.readValue(JSON,new TypeReference<HashMap<Calendar,String>>(){});assertNotNull(result);assertEquals(HashMap.class,result.getClass());assertEquals(2,result.size());assertTrue(result.containsKey(c));assertEquals("""",result.get(c));c.setTimeInMillis(0);assertTrue(result.containsKey(c));assertNull(result.get(c));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testUUIDKeyMap",0,"public void testUUIDKeyMap()throws Exception {UUID key=UUID.nameUUIDFromBytes(""foobar"".getBytes(""UTF-8""));String JSON=""{\"""" + key + ""\"":4}"";Map<UUID,Object> result=MAPPER.readValue(JSON,new TypeReference<Map<UUID,Object>>(){});assertNotNull(result);assertEquals(1,result.size());Object ob=result.keySet().iterator().next();assertNotNull(ob);assertEquals(UUID.class,ob.getClass());assertEquals(key,ob);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testLocaleKeyMap",0,"public void testLocaleKeyMap()throws Exception {Locale key=Locale.CHINA;String JSON=""{\"""" + key + ""\"":4}"";Map<Locale,Object> result=MAPPER.readValue(JSON,new TypeReference<Map<Locale,Object>>(){});assertNotNull(result);assertEquals(1,result.size());Object ob=result.keySet().iterator().next();assertNotNull(ob);assertEquals(Locale.class,ob.getClass());assertEquals(key,ob);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testCurrencyKeyMap",0,"public void testCurrencyKeyMap()throws Exception {Currency key=Currency.getInstance(""USD"");String JSON=""{\"""" + key + ""\"":4}"";Map<Currency,Object> result=MAPPER.readValue(JSON,new TypeReference<Map<Currency,Object>>(){});assertNotNull(result);assertEquals(1,result.size());Object ob=result.keySet().iterator().next();assertNotNull(ob);assertEquals(Currency.class,ob.getClass());assertEquals(key,ob);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testKeyWithCreator",0,"public void testKeyWithCreator()throws Exception {KeyType key=MAPPER.readValue(quote(""abc""),KeyType.class);assertEquals(""abc"",key.value);Map<KeyType,Integer> map=MAPPER.readValue(""{\""foo\"":3}"",new TypeReference<Map<KeyType,Integer>>(){});assertEquals(1,map.size());key=map.keySet().iterator().next();assertEquals(""foo"",key.value);}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testClassKeyMap",0,"public void testClassKeyMap()throws Exception {ClassStringMap map=MAPPER.readValue(aposToQuotes(""{'java.lang.String':'foo'}""),ClassStringMap.class);assertNotNull(map);assertEquals(1,map.size());assertEquals(""foo"",map.get(String.class));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testcharSequenceKeyMap",0,"public void testcharSequenceKeyMap()throws Exception {String JSON=aposToQuotes(""{'a':'b'}"");Map<CharSequence,String> result=MAPPER.readValue(JSON,new TypeReference<Map<CharSequence,String>>(){});assertNotNull(result);assertEquals(1,result.size());assertEquals(""b"",result.get(""a""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testMapWithDeserializer",0,"/** * Simple test to ensure that @JsonDeserialize.using is recognized*/public void testMapWithDeserializer()throws Exception {CustomMap result=MAPPER.readValue(quote(""xyz""),CustomMap.class);assertEquals(1,result.size());assertEquals(""xyz"",result.get(""x""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testMapError",0,"public void testMapError()throws Exception {try {Object result=MAPPER.readValue(""[1,2 ]"",new TypeReference<Map<String,String>>(){});fail(""Expected an exception,but got result value: "" + result);}catch(JsonMappingException jex){verifyException(jex,""START_ARRAY"");}}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.testNoCtorMap",0,"public void testNoCtorMap()throws Exception {try {BrokenMap result=MAPPER.readValue(""{\""a\"" : 3 }"",BrokenMap.class);assertNull(result);}catch(JsonMappingException e){verifyException(e,""no default constructor found"");}}"
"com.fasterxml.jackson.databind.deser.jdk.MapDeserializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testSampleDoc",0,"@SuppressWarnings(""unchecked"")public void testSampleDoc()throws Exception {final String JSON=SAMPLE_DOC_JSON_SPEC;Object root=MAPPER.readValue(JSON,Object.class);assertType(root,Map.class);Map<?,?> rootMap=(Map<?,?>)root;assertEquals(1,rootMap.size());Map.Entry<?,?> rootEntry=rootMap.entrySet().iterator().next();assertEquals(""Image"",rootEntry.getKey());Object image=rootEntry.getValue();assertType(image,Map.class);Map<?,?> imageMap=(Map<?,?>)image;assertEquals(5,imageMap.size());Object value=imageMap.get(""Width"");assertType(value,Integer.class);assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_WIDTH),value);value=imageMap.get(""Height"");assertType(value,Integer.class);assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_HEIGHT),value);assertEquals(SAMPLE_SPEC_VALUE_TITLE,imageMap.get(""Title""));value=imageMap.get(""Thumbnail"");assertType(value,Map.class);Map<?,?> tnMap=(Map<?,?>)value;assertEquals(3,tnMap.size());assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_HEIGHT),tnMap.get(""Height""));assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH,tnMap.get(""Width""));assertEquals(SAMPLE_SPEC_VALUE_TN_URL,tnMap.get(""Url""));value=imageMap.get(""IDs"");assertType(value,List.class);List<Object> ids=(List<Object>)value;assertEquals(4,ids.size());assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID1),ids.get(0));assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID2),ids.get(1));assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID3),ids.get(2));assertEquals(Integer.valueOf(SAMPLE_SPEC_VALUE_TN_ID4),ids.get(3));}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testUntypedMap",0,"public void testUntypedMap()throws Exception {String JSON=""{\""foo\"" : \""bar\"",\""crazy\"" : true,\""null\"" : null }"";@SuppressWarnings(""unchecked"")Map<String,Object> result=(Map<String,Object>)MAPPER.readValue(JSON,Object.class);assertNotNull(result);assertTrue(result instanceof Map<?,?>);assertEquals(3,result.size());assertEquals(""bar"",result.get(""foo""));assertEquals(Boolean.TRUE,result.get(""crazy""));assertNull(result.get(""null""));assertNull(result.get(""bar""));assertNull(result.get(3));}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testNestedUntypes",0,"public void testNestedUntypes()throws IOException {Object root=MAPPER.readValue(aposToQuotes(""{'a':3,'b':[1,2]}""),Object.class);assertTrue(root instanceof Map<?,?>);Map<?,?> map=(Map<?,?>)root;assertEquals(2,map.size());assertEquals(Integer.valueOf(3),map.get(""a""));Object ob=map.get(""b"");assertTrue(ob instanceof List<?>);List<?> l=(List<?>)ob;assertEquals(2,l.size());assertEquals(Integer.valueOf(2),l.get(1));}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testObjectSerializeWithLong",0,"public void testObjectSerializeWithLong()throws IOException {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT,As.PROPERTY);final long VALUE=1337800584532L;String serialized=""{\""timestamp\"":"" + VALUE + ""}"";JsonNode deserialized=mapper.readTree(serialized);assertEquals(VALUE,deserialized.get(""timestamp"").asLong());Map<?,?> deserMap=mapper.readValue(serialized,Map.class);Number n=(Number)deserMap.get(""timestamp"");assertNotNull(n);assertSame(Long.class,n.getClass());assertEquals(Long.valueOf(VALUE),n);}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testUntypedWithCustomScalarDesers",0,"public void testUntypedWithCustomScalarDesers()throws IOException {SimpleModule m=new SimpleModule(""test-module"");m.addDeserializer(String.class,new UCStringDeserializer());m.addDeserializer(Number.class,new CustomNumberDeserializer(13));final ObjectMapper mapper=new ObjectMapper().registerModule(m);Object ob=mapper.readValue(""{\""a\"":\""b\"",\""nr\"":1 }"",Object.class);assertTrue(ob instanceof Map);Object value=((Map<?,?>)ob).get(""a"");assertNotNull(value);assertTrue(value instanceof String);assertEquals(""B"",value);value=((Map<?,?>)ob).get(""nr"");assertNotNull(value);assertTrue(value instanceof Number);assertEquals(Integer.valueOf(13),value);}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testNonVanilla",0,"public void testNonVanilla()throws IOException {SimpleModule m=new SimpleModule(""test-module"");m.addDeserializer(String.class,new UCStringDeserializer());final ObjectMapper mapper=new ObjectMapper().registerModule(m);List<?> l=(List<?>)mapper.readValue(""[true,false,7,0.5,\""foo\""]"",Object.class);assertEquals(5,l.size());assertEquals(Boolean.TRUE,l.get(0));assertEquals(Boolean.FALSE,l.get(1));assertEquals(Integer.valueOf(7),l.get(2));assertEquals(Double.valueOf(0.5),l.get(3));assertEquals(""FOO"",l.get(4));l=(List<?>)mapper.readValue(""[{},[]]"",Object.class);assertEquals(2,l.size());assertTrue(l.get(0)instanceof Map<?,?>);assertTrue(l.get(1)instanceof List<?>);ObjectReader rDefault=mapper.readerFor(WrappedPolymorphicUntyped.class);ObjectReader rAlt=rDefault.with(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS,DeserializationFeature.USE_BIG_INTEGER_FOR_INTS);WrappedPolymorphicUntyped w;w=rDefault.readValue(aposToQuotes(""{'value':10}""));assertEquals(Integer.valueOf(10),w.value);w=rAlt.readValue(aposToQuotes(""{'value':10}""));assertEquals(BigInteger.TEN,w.value);w=rDefault.readValue(aposToQuotes(""{'value':5.0}""));assertEquals(Double.valueOf(5.0),w.value);w=rAlt.readValue(aposToQuotes(""{'value':5.0}""));assertEquals(new BigDecimal(""5.0""),w.value);StringBuilder sb=new StringBuilder(100).append(""[0"");for (int i=1;i < 100;++i){sb.append("","").append(i);}sb.append(""]"");final String INT_ARRAY_JSON=sb.toString();Object ob=mapper.readerFor(Object.class).with(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY).readValue(INT_ARRAY_JSON);assertTrue(ob instanceof Object[]);Object[]obs=(Object[])ob;for (int i=0;i < 100;++i){assertEquals(Integer.valueOf(i),obs[i]);}}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testUntypedWithListDeser",0,"public void testUntypedWithListDeser()throws IOException {SimpleModule m=new SimpleModule(""test-module"");m.addDeserializer(List.class,new ListDeserializer());final ObjectMapper mapper=new ObjectMapper().registerModule(m);Object ob=mapper.readValue(""[1,2,true]"",Object.class);assertTrue(ob instanceof List<?>);List<?> l=(List<?>)ob;assertEquals(3,l.size());assertEquals(""X1"",l.get(0));assertEquals(""X2"",l.get(1));assertEquals(""Xtrue"",l.get(2));}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testUntypedWithMapDeser",0,"public void testUntypedWithMapDeser()throws IOException {SimpleModule m=new SimpleModule(""test-module"");m.addDeserializer(Map.class,new YMapDeserializer());final ObjectMapper mapper=new ObjectMapper().registerModule(m);Object ob=mapper.readValue(""{\""a\"":true}"",Object.class);assertTrue(ob instanceof Map<?,?>);Map<?,?> map=(Map<?,?>)ob;assertEquals(1,map.size());assertEquals(""Ytrue"",map.get(""a""));}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testNestedUntyped989",0,"public void testNestedUntyped989()throws IOException {DelegatingUntyped pojo;ObjectReader r=MAPPER.readerFor(DelegatingUntyped.class);pojo=r.readValue(""[]"");assertTrue(pojo.value instanceof List);pojo=r.readValue(""[{}]"");assertTrue(pojo.value instanceof List);pojo=r.readValue(""{}"");assertTrue(pojo.value instanceof Map);pojo=r.readValue(""{\""a\"":[]}"");assertTrue(pojo.value instanceof Map);}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testUntypedWithJsonArrays",0,"public void testUntypedWithJsonArrays()throws Exception {Object ob=MAPPER.readValue(""[1]"",Object.class);assertTrue(ob instanceof List<?>);MAPPER.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY,true);ob=MAPPER.readValue(""[1]"",Object.class);assertEquals(Object[].class,ob.getClass());}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.testUntypedIntAsLong",0,"public void testUntypedIntAsLong()throws Exception {final String JSON=aposToQuotes(""{'value':3}"");WrappedUntyped1460 w=MAPPER.readerFor(WrappedUntyped1460.class).readValue(JSON);assertEquals(Integer.valueOf(3),w.value);w=MAPPER.readerFor(WrappedUntyped1460.class).with(DeserializationFeature.USE_LONG_FOR_INTS).readValue(JSON);assertEquals(Long.valueOf(3),w.value);}"
"com.fasterxml.jackson.databind.deser.jdk.UntypedDeserializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestNullNode.testBasicsWithNullNode",0,"public void testBasicsWithNullNode()throws Exception {NullNode n=NullNode.instance;assertFalse(n.isContainerNode());assertFalse(n.isBigDecimal());assertFalse(n.isBigInteger());assertFalse(n.isBinary());assertFalse(n.isBoolean());assertFalse(n.isPojo());assertFalse(n.isMissingNode());assertFalse(n.booleanValue());assertNull(n.numberValue());assertEquals(0,n.intValue());assertEquals(0L,n.longValue());assertEquals(BigDecimal.ZERO,n.decimalValue());assertEquals(BigInteger.ZERO,n.bigIntegerValue());assertEquals(0,n.size());assertFalse(n.elements().hasNext());assertFalse(n.fieldNames().hasNext());assertNotNull(n.path(""xyz""));assertTrue(n.path(""xyz"").isMissingNode());assertFalse(n.has(""field""));assertFalse(n.has(3));assertNodeNumbersForNonNumeric(n);assertEquals(""foo"",n.asText(""foo""));}"
"com.fasterxml.jackson.databind.node.TestNullNode.testNullHandling",0,"public void testNullHandling()throws Exception {JsonNode n=objectReader().readTree(""null"");assertNotNull(n);assertTrue(n.isNull());assertFalse(n.isNumber());assertFalse(n.isTextual());assertEquals(""null"",n.asText());assertEquals(n,NullNode.instance);n=objectMapper().readTree(""null"");assertNotNull(n);assertTrue(n.isNull());ObjectNode root=(ObjectNode)objectReader().readTree(""{\""x\"":null}"");assertEquals(1,root.size());n=root.get(""x"");assertNotNull(n);assertTrue(n.isNull());}"
"com.fasterxml.jackson.databind.node.TestNullNode.testNullSerialization",0,"public void testNullSerialization()throws Exception {ObjectMapper mapper=new ObjectMapper();StringWriter sw=new StringWriter();mapper.writeValue(sw,NullNode.instance);assertEquals(""null"",sw.toString());}"
"com.fasterxml.jackson.databind.node.TestNullNode.testNullHandlingCovariance",0,"public void testNullHandlingCovariance()throws Exception {String JSON=""{\""object\"" : null,\""array\"" : null }"";CovarianceBean bean=objectMapper().readValue(JSON,CovarianceBean.class);ObjectNode on=bean._object;assertNull(on);ArrayNode an=bean._array;assertNull(an);}"
"com.fasterxml.jackson.databind.node.TestNullNode.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreatorNullValue.testUsesDeserializersNullValue",0,"public void testUsesDeserializersNullValue()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new TestModule());Container container=mapper.readValue(""{}"",Container.class);assertEquals(NULL_CONTAINED,container.contained);}"
"com.fasterxml.jackson.databind.creators.TestCreatorNullValue.testCreatorReturningNull",0,"public void testCreatorReturningNull()throws IOException {ObjectMapper objectMapper=new ObjectMapper();String json=""{\""type\"" : \""     \"",\""id\"" : \""000c0ffb-a0d6-4d2e-a379-4aeaaf283599\"" }"";try {objectMapper.readValue(json,JsonEntity.class);fail(""Should not have succeeded"");}catch(JsonMappingException e){verifyException(e,""JSON creator returned null"");}}"
"com.fasterxml.jackson.databind.creators.TestCreatorNullValue.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.testIssue1599",0,"public void testIssue1599()throws Exception {final String NASTY_CLASS=""com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl"";final String JSON=aposToQuotes(""{'id': 124,\n"" + "" 'obj':['"" + NASTY_CLASS + ""',\n""+ ""  {\n""+ ""    'transletBytecodes' :['AAIAZQ==' ],\n""+ ""    'transletName' : 'a.b',\n""+ ""    'outputProperties' :{}\n""+ ""  }\n""+ "" ]\n""+ ""}"");ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping();try {mapper.readValue(JSON,Bean1599.class);fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Illegal type"");verifyException(e,""to deserialize"");verifyException(e,""prevented for security reasons"");BeanDescription desc=e.getBeanDescription();assertNotNull(desc);assertEquals(NASTY_CLASS,desc.getBeanClass().getName());}}"
"com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestAutoDetect.testPrivateCtor",0,"public void testPrivateCtor()throws Exception {ObjectMapper m=new ObjectMapper();PrivateBean bean=m.readValue(""\""abc\"""",PrivateBean.class);assertEquals(""abc"",bean.a);m=new ObjectMapper();VisibilityChecker<?> vc=m.getVisibilityChecker();vc=vc.withCreatorVisibility(JsonAutoDetect.Visibility.PUBLIC_ONLY);m.setVisibility(vc);try {m.readValue(""\""abc\"""",PrivateBean.class);fail(""Expected exception for missing constructor"");}catch(JsonProcessingException e){verifyException(e,""no String-argument constructor/factory"");}}"
"com.fasterxml.jackson.databind.introspect.TestAutoDetect.testVisibilityConfigOverridesForSer",0,"public void testVisibilityConfigOverridesForSer()throws Exception {final Feature1347SerBean input=new Feature1347SerBean();assertEquals(aposToQuotes(""{'field':2,'value':3}""),MAPPER.writeValueAsString(input));ObjectMapper mapper=new ObjectMapper();mapper.configOverride(Feature1347SerBean.class).setVisibility(JsonAutoDetect.Value.construct(PropertyAccessor.GETTER,Visibility.NONE));assertEquals(aposToQuotes(""{'field':2}""),mapper.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.introspect.TestAutoDetect.testVisibilityConfigOverridesForDeser",0,"public void testVisibilityConfigOverridesForDeser()throws Exception {final String JSON=aposToQuotes(""{'value':3}"");try {MAPPER.readValue(JSON,Feature1347DeserBean.class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Should NOT get called"");}ObjectMapper mapper=new ObjectMapper();mapper.configOverride(Feature1347DeserBean.class).setVisibility(JsonAutoDetect.Value.construct(PropertyAccessor.SETTER,Visibility.NONE));Feature1347DeserBean result=mapper.readValue(JSON,Feature1347DeserBean.class);assertEquals(3,result.value);}"
"com.fasterxml.jackson.databind.introspect.TestAutoDetect.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestAbstractContainers.testAbstractLists",0,"public void testAbstractLists()throws Exception {ListWrapper w=new ListWrapper();w.list.add(""x"");String json=MAPPER.writeValueAsString(w);Object o=MAPPER.readValue(json,ListWrapper.class);assertEquals(ListWrapper.class,o.getClass());ListWrapper out=(ListWrapper)o;assertNotNull(out.list);assertEquals(1,out.list.size());assertEquals(""x"",out.list.get(0));}"
"com.fasterxml.jackson.databind.jsontype.TestAbstractContainers.testAbstractMaps",0,"public void testAbstractMaps()throws Exception {MapWrapper w=new MapWrapper();w.map.put(""key1"",""name1"");String json=MAPPER.writeValueAsString(w);Object o=MAPPER.readValue(json,MapWrapper.class);assertEquals(MapWrapper.class,o.getClass());MapWrapper out=(MapWrapper)o;assertEquals(1,out.map.size());}"
"com.fasterxml.jackson.databind.jsontype.TestAbstractContainers.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testCheckSiblingContextFilter",0,"public void testCheckSiblingContextFilter(){FilterProvider prov=new SimpleFilterProvider().addFilter(""checkSiblingContextFilter"",new CheckSiblingContextFilter());ObjectMapper mapper=new ObjectMapper();mapper.setFilterProvider(prov);mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);mapper.valueToTree(new CheckSiblingContextBean());}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testSimpleInclusionFilter",0,"public void testSimpleInclusionFilter()throws Exception {FilterProvider prov=new SimpleFilterProvider().addFilter(""RootFilter"",SimpleBeanPropertyFilter.filterOutAllExcept(""a""));assertEquals(""{\""a\"":\""a\""}"",MAPPER.writer(prov).writeValueAsString(new Bean()));ObjectMapper mapper=new ObjectMapper();mapper.setFilterProvider(prov);assertEquals(""{\""a\"":\""a\""}"",mapper.writeValueAsString(new Bean()));}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testIncludeAllFilter",0,"public void testIncludeAllFilter()throws Exception {FilterProvider prov=new SimpleFilterProvider().addFilter(""RootFilter"",SimpleBeanPropertyFilter.serializeAll());assertEquals(""{\""a\"":\""a\"",\""b\"":\""b\""}"",MAPPER.writer(prov).writeValueAsString(new Bean()));}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testSimpleExclusionFilter",0,"public void testSimpleExclusionFilter()throws Exception {FilterProvider prov=new SimpleFilterProvider().addFilter(""RootFilter"",SimpleBeanPropertyFilter.serializeAllExcept(""a""));assertEquals(""{\""b\"":\""b\""}"",MAPPER.writer(prov).writeValueAsString(new Bean()));}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testMissingFilter",0,"public void testMissingFilter()throws Exception {try {MAPPER.writeValueAsString(new Bean());fail(""Should have failed without configured filter"");}catch(JsonMappingException e){verifyException(e,""Can not resolve PropertyFilter with id 'RootFilter'"");}SimpleFilterProvider fp=new SimpleFilterProvider().setFailOnUnknownId(false);ObjectMapper mapper=new ObjectMapper();mapper.setFilterProvider(fp);String json=mapper.writeValueAsString(new Bean());assertEquals(""{\""a\"":\""a\"",\""b\"":\""b\""}"",json);}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testDefaultFilter",0,"public void testDefaultFilter()throws Exception {FilterProvider prov=new SimpleFilterProvider().setDefaultFilter(SimpleBeanPropertyFilter.filterOutAllExcept(""b""));assertEquals(""{\""b\"":\""b\""}"",MAPPER.writer(prov).writeValueAsString(new Bean()));}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testIssue89",0,"public void testIssue89()throws Exception {ObjectMapper mapper=new ObjectMapper();Pod pod=new Pod();pod.username=""Bob"";pod.userPassword=""s3cr3t!"";String json=mapper.writeValueAsString(pod);assertEquals(""{\""username\"":\""Bob\""}"",json);Pod pod2=mapper.readValue(""{\""username\"":\""Bill\"",\""user_password\"":\""foo!\""}"",Pod.class);assertEquals(""Bill"",pod2.username);assertEquals(""foo!"",pod2.userPassword);}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.testFilterOnProperty",0,"public void testFilterOnProperty()throws Exception {FilterProvider prov=new SimpleFilterProvider().addFilter(""RootFilter"",SimpleBeanPropertyFilter.filterOutAllExcept(""a"")).addFilter(""b"",SimpleBeanPropertyFilter.filterOutAllExcept(""b""));assertEquals(""{\""first\"":{\""a\"":\""a\""},\""second\"":{\""b\"":\""b\""}}"",MAPPER.writer(prov).writeValueAsString(new FilteredProps()));}"
"com.fasterxml.jackson.databind.ser.filter.TestJsonFilter.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderAdvancedTest.testWithInjectable",0,"public void testWithInjectable()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setInjectableValues(new InjectableValues.Std().addValue(String.class,""stuffValue""));InjectableXY bean=mapper.readValue(aposToQuotes(""{'y':3,'x':7}""),InjectableXY.class);assertEquals(8,bean._x);assertEquals(4,bean._y);assertEquals(""stuffValue"",bean._stuff);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderAdvancedTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.inject.InvalidInjectionTest.testInvalidDup",0,"public void testInvalidDup()throws Exception {try {MAPPER.readValue(""{}"",BadBean1.class);fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Duplicate injectable value"");}try {MAPPER.readValue(""{}"",BadBean2.class);fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Duplicate injectable value"");}}"
"com.fasterxml.jackson.databind.deser.inject.InvalidInjectionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsonschema.NewSchemaTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsonschema.NewSchemaTest.testBasicTraversal",0,"public void testBasicTraversal()throws Exception {MAPPER.acceptJsonFormatVisitor(POJO.class,new BogusJsonFormatVisitorWrapper());MAPPER.acceptJsonFormatVisitor(POJOWithScalars.class,new BogusJsonFormatVisitorWrapper());MAPPER.acceptJsonFormatVisitor(LinkedHashMap.class,new BogusJsonFormatVisitorWrapper());MAPPER.acceptJsonFormatVisitor(ArrayList.class,new BogusJsonFormatVisitorWrapper());MAPPER.acceptJsonFormatVisitor(EnumSet.class,new BogusJsonFormatVisitorWrapper());MAPPER.acceptJsonFormatVisitor(POJOWithRefs.class,new BogusJsonFormatVisitorWrapper());}"
"com.fasterxml.jackson.databind.jsonschema.NewSchemaTest.testSimpleEnum",0,"public void testSimpleEnum()throws Exception {final Set<String> values=new TreeSet<String>();ObjectWriter w=MAPPER.writer(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);w.acceptJsonFormatVisitor(TestEnum.class,new JsonFormatVisitorWrapper.Base(){@Override public JsonStringFormatVisitor expectStringFormat(JavaType type){return new JsonStringFormatVisitor(){@Override public void enumTypes(Set<String> enums){values.addAll(enums);}@Override public void format(JsonValueFormat format){}};}});assertEquals(3,values.size());TreeSet<String> exp=new TreeSet<String>(Arrays.asList(""ToString:A"",""ToString:B"",""ToString:C""));assertEquals(exp,values);}"
"com.fasterxml.jackson.databind.jsonschema.NewSchemaTest.testEnumWithJsonValue",0,"public void testEnumWithJsonValue()throws Exception {final Set<String> values=new TreeSet<String>();MAPPER.acceptJsonFormatVisitor(TestEnumWithJsonValue.class,new JsonFormatVisitorWrapper.Base(){@Override public JsonStringFormatVisitor expectStringFormat(JavaType type){return new JsonStringFormatVisitor(){@Override public void enumTypes(Set<String> enums){values.addAll(enums);}@Override public void format(JsonValueFormat format){}};}});assertEquals(3,values.size());TreeSet<String> exp=new TreeSet<String>(Arrays.asList(""value-A"",""value-B"",""value-C""));assertEquals(exp,values);}"
"com.fasterxml.jackson.databind.jsonschema.NewSchemaTest.testJsonValueFormatHandling",0,"public void testJsonValueFormatHandling()throws Exception {final String EXP=quote(""host-name"");assertEquals(EXP,MAPPER.writeValueAsString(JsonValueFormat.HOST_NAME));assertSame(JsonValueFormat.HOST_NAME,MAPPER.readValue(EXP,JsonValueFormat.class));}"
"com.fasterxml.jackson.databind.jsonschema.NewSchemaTest.testSimpleNumbers",0,"public void testSimpleNumbers()throws Exception {final StringBuilder sb=new StringBuilder();MAPPER.acceptJsonFormatVisitor(Numbers.class,new JsonFormatVisitorWrapper.Base(){@Override public JsonObjectFormatVisitor expectObjectFormat(final JavaType type){return new JsonObjectFormatVisitor.Base(getProvider()){@Override public void optionalProperty(BeanProperty prop)throws JsonMappingException {sb.append(""[optProp "").append(prop.getName()).append(""("");JsonSerializer<Object> ser=null;if (prop instanceof BeanPropertyWriter){BeanPropertyWriter bpw=(BeanPropertyWriter)prop;ser=bpw.getSerializer();}final SerializerProvider prov=getProvider();if (ser == null){ser=prov.findValueSerializer(prop.getType(),prop);}ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base(){@Override public JsonNumberFormatVisitor expectNumberFormat(JavaType t)throws JsonMappingException {return new JsonNumberFormatVisitor(){@Override public void format(JsonValueFormat format){sb.append(""[numberFormat="").append(format).append(""]"");}@Override public void enumTypes(Set<String> enums){}@Override public void numberType(NumberType numberType){sb.append(""[numberType="").append(numberType).append(""]"");}};}@Override public JsonIntegerFormatVisitor expectIntegerFormat(JavaType t)throws JsonMappingException {return new JsonIntegerFormatVisitor(){@Override public void format(JsonValueFormat format){sb.append(""[integerFormat="").append(format).append(""]"");}@Override public void enumTypes(Set<String> enums){}@Override public void numberType(NumberType numberType){sb.append(""[numberType="").append(numberType).append(""]"");}};}},prop.getType());sb.append("")]"");}};}});assertEquals(""[optProp dec([numberType=BIG_DECIMAL])][optProp bigInt([numberType=BIG_INTEGER])]"",sb.toString());}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.testExistingPropertySerializationFruits",0,"/** * Fruits - serialization tests for simple property on sub-classes*/public void testExistingPropertySerializationFruits()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,pinguo);assertEquals(3,result.size());assertEquals(pinguo.name,result.get(""name""));assertEquals(pinguo.seedCount,result.get(""seedCount""));assertEquals(pinguo.type,result.get(""type""));result=writeAndMap(MAPPER,mandarin);assertEquals(3,result.size());assertEquals(mandarin.name,result.get(""name""));assertEquals(mandarin.color,result.get(""color""));assertEquals(mandarin.type,result.get(""type""));String pinguoSerialized=MAPPER.writeValueAsString(pinguo);assertEquals(pinguoSerialized,pinguoJson);String mandarinSerialized=MAPPER.writeValueAsString(mandarin);assertEquals(mandarinSerialized,mandarinJson);String fruitWrapperSerialized=MAPPER.writeValueAsString(pinguoWrapper);assertEquals(fruitWrapperSerialized,pinguoWrapperJson);String fruitListSerialized=MAPPER.writeValueAsString(fruitList);assertEquals(fruitListSerialized,fruitListJson);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.testSimpleClassAsExistingPropertyDeserializationFruits",0,"/** * Fruits - deserialization tests for simple property on sub-classes*/public void testSimpleClassAsExistingPropertyDeserializationFruits()throws Exception {Fruit pinguoDeserialized=MAPPER.readValue(pinguoJson,Fruit.class);assertTrue(pinguoDeserialized instanceof Apple);assertSame(pinguoDeserialized.getClass(),Apple.class);assertEquals(pinguo.name,pinguoDeserialized.name);assertEquals(pinguo.seedCount,((Apple)pinguoDeserialized).seedCount);assertEquals(pinguo.type,((Apple)pinguoDeserialized).type);FruitWrapper pinguoWrapperDeserialized=MAPPER.readValue(pinguoWrapperJson,FruitWrapper.class);Fruit pinguoExtracted=pinguoWrapperDeserialized.fruit;assertTrue(pinguoExtracted instanceof Apple);assertSame(pinguoExtracted.getClass(),Apple.class);assertEquals(pinguo.name,pinguoExtracted.name);assertEquals(pinguo.seedCount,((Apple)pinguoExtracted).seedCount);assertEquals(pinguo.type,((Apple)pinguoExtracted).type);Fruit[]fruits=MAPPER.readValue(fruitListJson,Fruit[].class);assertEquals(2,fruits.length);assertEquals(Apple.class,fruits[0].getClass());assertEquals(""apple"",((Apple)fruits[0]).type);assertEquals(Orange.class,fruits[1].getClass());assertEquals(""orange"",((Orange)fruits[1]).type);List<Fruit> f2=MAPPER.readValue(fruitListJson,new TypeReference<List<Fruit>>(){});assertNotNull(f2);assertTrue(f2.size()== 2);assertEquals(Apple.class,f2.get(0).getClass());assertEquals(Orange.class,f2.get(1).getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.testExistingPropertySerializationAnimals",0,"/** * Animals - serialization tests for abstract method in base class*/public void testExistingPropertySerializationAnimals()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,beelzebub);assertEquals(3,result.size());assertEquals(beelzebub.name,result.get(""name""));assertEquals(beelzebub.furColor,result.get(""furColor""));assertEquals(beelzebub.getType(),result.get(""type""));result=writeAndMap(MAPPER,rover);assertEquals(3,result.size());assertEquals(rover.name,result.get(""name""));assertEquals(rover.boneCount,result.get(""boneCount""));assertEquals(rover.getType(),result.get(""type""));String beelzebubSerialized=MAPPER.writeValueAsString(beelzebub);assertEquals(beelzebubSerialized,beelzebubJson);String roverSerialized=MAPPER.writeValueAsString(rover);assertEquals(roverSerialized,roverJson);String animalWrapperSerialized=MAPPER.writeValueAsString(beelzebubWrapper);assertEquals(animalWrapperSerialized,beelzebubWrapperJson);String animalListSerialized=MAPPER.writeValueAsString(animalList);assertEquals(animalListSerialized,animalListJson);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.testSimpleClassAsExistingPropertyDeserializationAnimals",0,"/** * Animals - deserialization tests for abstract method in base class*/public void testSimpleClassAsExistingPropertyDeserializationAnimals()throws Exception {Animal beelzebubDeserialized=MAPPER.readValue(beelzebubJson,Animal.class);assertTrue(beelzebubDeserialized instanceof Cat);assertSame(beelzebubDeserialized.getClass(),Cat.class);assertEquals(beelzebub.name,beelzebubDeserialized.name);assertEquals(beelzebub.furColor,((Cat)beelzebubDeserialized).furColor);assertEquals(beelzebub.getType(),beelzebubDeserialized.getType());AnimalWrapper beelzebubWrapperDeserialized=MAPPER.readValue(beelzebubWrapperJson,AnimalWrapper.class);Animal beelzebubExtracted=beelzebubWrapperDeserialized.animal;assertTrue(beelzebubExtracted instanceof Cat);assertSame(beelzebubExtracted.getClass(),Cat.class);assertEquals(beelzebub.name,beelzebubExtracted.name);assertEquals(beelzebub.furColor,((Cat)beelzebubExtracted).furColor);assertEquals(beelzebub.getType(),beelzebubExtracted.getType());@SuppressWarnings(""unchecked"")List<Animal> animalListDeserialized=MAPPER.readValue(animalListJson,List.class);assertNotNull(animalListDeserialized);assertTrue(animalListDeserialized.size()== 2);Animal cat=MAPPER.convertValue(animalListDeserialized.get(0),Animal.class);assertTrue(cat instanceof Cat);assertSame(cat.getClass(),Cat.class);Animal dog=MAPPER.convertValue(animalListDeserialized.get(1),Animal.class);assertTrue(dog instanceof Dog);assertSame(dog.getClass(),Dog.class);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.testExistingPropertySerializationCars",0,"/** * Cars - serialization tests for no abstract method or type variable in base class*/public void testExistingPropertySerializationCars()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,camry);assertEquals(3,result.size());assertEquals(camry.name,result.get(""name""));assertEquals(camry.exteriorColor,result.get(""exteriorColor""));assertEquals(camry.getType(),result.get(""type""));result=writeAndMap(MAPPER,accord);assertEquals(3,result.size());assertEquals(accord.name,result.get(""name""));assertEquals(accord.speakerCount,result.get(""speakerCount""));assertEquals(accord.getType(),result.get(""type""));String camrySerialized=MAPPER.writeValueAsString(camry);assertEquals(camrySerialized,camryJson);String accordSerialized=MAPPER.writeValueAsString(accord);assertEquals(accordSerialized,accordJson);String carWrapperSerialized=MAPPER.writeValueAsString(camryWrapper);assertEquals(carWrapperSerialized,camryWrapperJson);String carListSerialized=MAPPER.writeValueAsString(carList);assertEquals(carListSerialized,carListJson);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.testSimpleClassAsExistingPropertyDeserializationCars",0,"/** * Cars - deserialization tests for no abstract method or type variable in base class*/public void testSimpleClassAsExistingPropertyDeserializationCars()throws Exception {Car camryDeserialized=MAPPER.readValue(camryJson,Camry.class);assertTrue(camryDeserialized instanceof Camry);assertSame(camryDeserialized.getClass(),Camry.class);assertEquals(camry.name,camryDeserialized.name);assertEquals(camry.exteriorColor,((Camry)camryDeserialized).exteriorColor);assertEquals(camry.getType(),((Camry)camryDeserialized).getType());CarWrapper camryWrapperDeserialized=MAPPER.readValue(camryWrapperJson,CarWrapper.class);Car camryExtracted=camryWrapperDeserialized.car;assertTrue(camryExtracted instanceof Camry);assertSame(camryExtracted.getClass(),Camry.class);assertEquals(camry.name,camryExtracted.name);assertEquals(camry.exteriorColor,((Camry)camryExtracted).exteriorColor);assertEquals(camry.getType(),((Camry)camryExtracted).getType());@SuppressWarnings(""unchecked"")List<Car> carListDeserialized=MAPPER.readValue(carListJson,List.class);assertNotNull(carListDeserialized);assertTrue(carListDeserialized.size()== 2);Car result=MAPPER.convertValue(carListDeserialized.get(0),Car.class);assertTrue(result instanceof Camry);assertSame(result.getClass(),Camry.class);result=MAPPER.convertValue(carListDeserialized.get(1),Car.class);assertTrue(result instanceof Accord);assertSame(result.getClass(),Accord.class);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypesExistingProperty.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicDeserialization676.testDeSerFail",0,"/** * If the class was first deserialized as polymorphic field,deserialization will fail at complex type.*/public void testDeSerFail()throws IOException {ObjectMapper mapper=new ObjectMapper();MapContainer deserMapBad=createDeSerMapContainer(originMap,mapper);assertEquals(originMap,deserMapBad);assertEquals(originMap,mapper.readValue(mapper.writeValueAsString(originMap),MapContainer.class));}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicDeserialization676.testDeSerCorrect",0,"public void testDeSerCorrect()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.enable(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);Map<String,Object> map=new HashMap<String,Object>();map.put(""1"",1);assertEquals(new MapContainer(map),mapper.readValue(mapper.writeValueAsString(new MapContainer(map)),MapContainer.class));MapContainer deserMapGood=createDeSerMapContainer(originMap,mapper);assertEquals(originMap,deserMapGood);assertEquals(new Date(TIMESTAMP),deserMapGood.map.get(""DateValue""));assertEquals(originMap,mapper.readValue(mapper.writeValueAsString(originMap),MapContainer.class));}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicDeserialization676.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testSimple",0,"public void testSimple()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(StringValue.class,new MyContextualDeserializer());mapper.registerModule(module);ContextualBean bean=mapper.readValue(""{\""a\"":\""1\"",\""b\"":\""2\""}"",ContextualBean.class);assertEquals(""a=1"",bean.a.value);assertEquals(""b=2"",bean.b.value);bean=mapper.readValue(""{\""a\"":\""3\"",\""b\"":\""4\""}"",ContextualBean.class);assertEquals(""a=3"",bean.a.value);assertEquals(""b=4"",bean.b.value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testSimpleWithAnnotations",0,"public void testSimpleWithAnnotations()throws Exception {ObjectMapper mapper=_mapperWithAnnotatedContextual();ContextualBean bean=mapper.readValue(""{\""a\"":\""1\"",\""b\"":\""2\""}"",ContextualBean.class);assertEquals(""NameA=1"",bean.a.value);assertEquals(""NameB=2"",bean.b.value);bean=mapper.readValue(""{\""a\"":\""x\"",\""b\"":\""y\""}"",ContextualBean.class);assertEquals(""NameA=x"",bean.a.value);assertEquals(""NameB=y"",bean.b.value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testSimpleWithClassAnnotations",0,"public void testSimpleWithClassAnnotations()throws Exception {ObjectMapper mapper=_mapperWithAnnotatedContextual();ContextualClassBean bean=mapper.readValue(""{\""a\"":\""1\"",\""b\"":\""2\""}"",ContextualClassBean.class);assertEquals(""Class=1"",bean.a.value);assertEquals(""NameB=2"",bean.b.value);bean=mapper.readValue(""{\""a\"":\""123\"",\""b\"":\""345\""}"",ContextualClassBean.class);assertEquals(""Class=123"",bean.a.value);assertEquals(""NameB=345"",bean.b.value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testAnnotatedCtor",0,"public void testAnnotatedCtor()throws Exception {ObjectMapper mapper=_mapperWithAnnotatedContextual();ContextualCtorBean bean=mapper.readValue(""{\""a\"":\""foo\"",\""b\"":\""bar\""}"",ContextualCtorBean.class);assertEquals(""CtorA=foo"",bean.a);assertEquals(""CtorB=bar"",bean.b);bean=mapper.readValue(""{\""a\"":\""1\"",\""b\"":\""0\""}"",ContextualCtorBean.class);assertEquals(""CtorA=1"",bean.a);assertEquals(""CtorB=0"",bean.b);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testAnnotatedArray",0,"public void testAnnotatedArray()throws Exception {ObjectMapper mapper=_mapperWithAnnotatedContextual();ContextualArrayBean bean=mapper.readValue(""{\""beans\"":[\""x\""]}"",ContextualArrayBean.class);assertEquals(1,bean.beans.length);assertEquals(""array=x"",bean.beans[0].value);bean=mapper.readValue(""{\""beans\"":[\""a\"",\""b\""]}"",ContextualArrayBean.class);assertEquals(2,bean.beans.length);assertEquals(""array=a"",bean.beans[0].value);assertEquals(""array=b"",bean.beans[1].value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testAnnotatedList",0,"public void testAnnotatedList()throws Exception {ObjectMapper mapper=_mapperWithAnnotatedContextual();ContextualListBean bean=mapper.readValue(""{\""beans\"":[\""x\""]}"",ContextualListBean.class);assertEquals(1,bean.beans.size());assertEquals(""list=x"",bean.beans.get(0).value);bean=mapper.readValue(""{\""beans\"":[\""x\"",\""y\"",\""z\""]}"",ContextualListBean.class);assertEquals(3,bean.beans.size());assertEquals(""list=x"",bean.beans.get(0).value);assertEquals(""list=y"",bean.beans.get(1).value);assertEquals(""list=z"",bean.beans.get(2).value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testAnnotatedMap",0,"public void testAnnotatedMap()throws Exception {ObjectMapper mapper=_mapperWithAnnotatedContextual();ContextualMapBean bean=mapper.readValue(""{\""beans\"":{\""a\"":\""b\""}}"",ContextualMapBean.class);assertEquals(1,bean.beans.size());Map.Entry<String,StringValue> entry=bean.beans.entrySet().iterator().next();assertEquals(""a"",entry.getKey());assertEquals(""map=b"",entry.getValue().value);bean=mapper.readValue(""{\""beans\"":{\""x\"":\""y\"",\""1\"":\""2\""}}"",ContextualMapBean.class);assertEquals(2,bean.beans.size());Iterator<Map.Entry<String,StringValue>> it=bean.beans.entrySet().iterator();entry=it.next();assertEquals(""x"",entry.getKey());assertEquals(""map=y"",entry.getValue().value);entry=it.next();assertEquals(""1"",entry.getKey());assertEquals(""map=2"",entry.getValue().value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.testContextualType",0,"public void testContextualType()throws Exception {GenericBean bean=new ObjectMapper().readValue(aposToQuotes(""{'stuff':{'1':'b'}}""),GenericBean.class);assertNotNull(bean.stuff);assertEquals(1,bean.stuff.size());assertEquals(""String"",bean.stuff.get(Integer.valueOf(1)));}"
"com.fasterxml.jackson.databind.contextual.TestContextualDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayAdvanced.testWithView",0,"public void testWithView()throws Exception {AsArrayWithView input=new AsArrayWithView();input.a=1;input.b=2;input.c=3;String json=MAPPER.writerWithView(ViewA.class).writeValueAsString(input);assertEquals(""[1,null,3]"",json);AsArrayWithView result=MAPPER.readerFor(AsArrayWithView.class).withView(ViewB.class).readValue(""[1,2,3]"");assertEquals(3,result.c);assertEquals(2,result.b);assertEquals(0,result.a);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayAdvanced.testWithViewAndCreator",0,"public void testWithViewAndCreator()throws Exception {AsArrayWithViewAndCreator result=MAPPER.readerFor(AsArrayWithViewAndCreator.class).withView(ViewB.class).readValue(""[1,2,3]"");assertEquals(3,result.c);assertEquals(2,result.b);assertEquals(0,result.a);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayAdvanced.testWithCreatorsOrdered",0,"public void testWithCreatorsOrdered()throws Exception {CreatorAsArray input=new CreatorAsArray(3,4);input.a=1;input.b=2;String json=MAPPER.writeValueAsString(input);assertEquals(""[3,4,1,2]"",json);CreatorAsArray output=MAPPER.readValue(json,CreatorAsArray.class);assertEquals(1,output.a);assertEquals(2,output.b);assertEquals(3,output.x);assertEquals(4,output.y);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayAdvanced.testWithCreatorsShuffled",0,"public void testWithCreatorsShuffled()throws Exception {CreatorAsArrayShuffled input=new CreatorAsArrayShuffled(3,4);input.a=1;input.b=2;String json=MAPPER.writeValueAsString(input);assertEquals(""[1,2,3,4]"",json);CreatorAsArrayShuffled output=MAPPER.readValue(json,CreatorAsArrayShuffled.class);assertEquals(1,output.a);assertEquals(2,output.b);assertEquals(3,output.x);assertEquals(4,output.y);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayAdvanced.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testSimpleClassAsProperty",0,"/** * First things first,let's ensure we can serialize using class name,written as main-level property name*/public void testSimpleClassAsProperty()throws Exception {ObjectMapper m=new ObjectMapper();Animal a=m.readValue(asJSONObjectValueString(""@classy"",Cat.class.getName(),""furColor"",""tabby"",""name"",""Garfield""),Animal.class);assertNotNull(a);assertEquals(Cat.class,a.getClass());Cat c=(Cat)a;assertEquals(""Garfield"",c.name);assertEquals(""tabby"",c.furColor);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testTypeAsWrapper",0,"public void testTypeAsWrapper()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(Animal.class,TypeWithWrapper.class);String JSON=""{\"".TestTypedDeserialization$Dog\"" : "" + asJSONObjectValueString(m,""name"",""Scooby"",""boneCount"",""6"")+ "" }"";Animal a=m.readValue(JSON,Animal.class);assertTrue(a instanceof Animal);assertEquals(Dog.class,a.getClass());Dog d=(Dog)a;assertEquals(""Scooby"",d.name);assertEquals(6,d.boneCount);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testTypeAsArray",0,"public void testTypeAsArray()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(Animal.class,TypeWithArray.class);String JSON=""[\"""" + Dog.class.getName()+ ""\"",""+ asJSONObjectValueString(m,""name"",""Martti"",""boneCount"",""11"")+ "" ]"";Animal a=m.readValue(JSON,Animal.class);assertEquals(Dog.class,a.getClass());Dog d=(Dog)a;assertEquals(""Martti"",d.name);assertEquals(11,d.boneCount);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testListAsArray",0,"public void testListAsArray()throws Exception {ObjectMapper m=new ObjectMapper();String JSON=""[\n"" + asJSONObjectValueString(m,""@classy"",Cat.class.getName(),""name"",""Hello"",""furColor"",""white"")+ "",\n""+ asJSONObjectValueString(m,""boneCount"",Integer.valueOf(1),""@classy"",Dog.class.getName(),""name"",""Bob"")+ "",\n""+ asJSONObjectValueString(m,""@classy"",Fish.class.getName())+ "",null\n]"";JavaType expType=TypeFactory.defaultInstance().constructCollectionType(ArrayList.class,Animal.class);List<Animal> animals=m.readValue(JSON,expType);assertNotNull(animals);assertEquals(4,animals.size());Cat c=(Cat)animals.get(0);assertEquals(""Hello"",c.name);assertEquals(""white"",c.furColor);Dog d=(Dog)animals.get(1);assertEquals(""Bob"",d.name);assertEquals(1,d.boneCount);Fish f=(Fish)animals.get(2);assertNotNull(f);assertNull(animals.get(3));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testCagedAnimal",0,"public void testCagedAnimal()throws Exception {ObjectMapper m=new ObjectMapper();String jsonCat=asJSONObjectValueString(m,""@classy"",Cat.class.getName(),""name"",""Nilson"",""furColor"",""black"");String JSON=""{\""animal\"":"" + jsonCat + ""}"";AnimalContainer cont=m.readValue(JSON,AnimalContainer.class);assertNotNull(cont);Animal a=cont.animal;assertNotNull(a);Cat c=(Cat)a;assertEquals(""Nilson"",c.name);assertEquals(""black"",c.furColor);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testAbstractEmptyBaseClass",0,"/** * Test that verifies that there are few limitations on polymorphic base class.*/public void testAbstractEmptyBaseClass()throws Exception {DummyBase result=new ObjectMapper().readValue(""[\"""" + DummyImpl.class.getName()+ ""\"",{\""x\"":3}]"",DummyBase.class);assertNotNull(result);assertEquals(DummyImpl.class,result.getClass());assertEquals(3,((DummyImpl)result).x);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testIssue506WithDate",0,"public void testIssue506WithDate()throws Exception {Issue506DateBean input=new Issue506DateBean();input.date=new Date(1234L);ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(input);Issue506DateBean output=mapper.readValue(json,Issue506DateBean.class);assertEquals(input.date,output.date);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.testIssue506WithNumber",0,"public void testIssue506WithNumber()throws Exception {Issue506NumberBean input=new Issue506NumberBean();input.number=Long.valueOf(4567L);ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(input);Issue506NumberBean output=mapper.readValue(json,Issue506NumberBean.class);assertEquals(input.number,output.number);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.format.ColletionFormatShapeTest.testListAsObjectRoundtrip",0,"public void testListAsObjectRoundtrip()throws Exception {CollectionAsPOJO list=new CollectionAsPOJO();list.add(""a"");list.add(""b"");String json=MAPPER.writeValueAsString(list);assertEquals(""{\""size\"":2,\""values\"":[\""a\"",\""b\""]}"",json);CollectionAsPOJO result=MAPPER.readValue(json,CollectionAsPOJO.class);assertEquals(2,result.size());}"
"com.fasterxml.jackson.databind.format.ColletionFormatShapeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDeserializationWithObject",0,"public void testDeserializationWithObject()throws Exception {Inter inter=MAPPER.readerFor(Inter.class).readValue(""{\""type\"": \""mine\"",\""blah\"": [\""a\"",\""b\"",\""c\""]}"");assertTrue(inter instanceof MyInter);assertFalse(inter instanceof LegacyInter);assertEquals(Arrays.asList(""a"",""b"",""c""),((MyInter)inter).blah);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDeserializationWithString",0,"public void testDeserializationWithString()throws Exception {Inter inter=MAPPER.readerFor(Inter.class).readValue(""\""a,b,c,d\"""");assertTrue(inter instanceof LegacyInter);assertEquals(Arrays.asList(""a"",""b"",""c"",""d""),((MyInter)inter).blah);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDeserializationWithArray",0,"public void testDeserializationWithArray()throws Exception {Inter inter=MAPPER.readerFor(Inter.class).readValue(""[\""a\"",\""b\"",\""c\"",\""d\""]"");assertTrue(inter instanceof LegacyInter);assertEquals(Arrays.asList(""a"",""b"",""c"",""d""),((MyInter)inter).blah);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDeserializationWithArrayOfSize2",0,"public void testDeserializationWithArrayOfSize2()throws Exception {Inter inter=MAPPER.readerFor(Inter.class).readValue(""[\""a\"",\""b\""]"");assertTrue(inter instanceof LegacyInter);assertEquals(Arrays.asList(""a"",""b""),((MyInter)inter).blah);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDefaultAsNoClass",0,"public void testDefaultAsNoClass()throws Exception {Object ob=MAPPER.readerFor(DefaultWithNoClass.class).readValue(""{}"");assertNull(ob);ob=MAPPER.readerFor(DefaultWithNoClass.class).readValue(""{\""bogus\"":3 }"");assertNull(ob);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDefaultAsVoid",0,"public void testDefaultAsVoid()throws Exception {Object ob=MAPPER.readerFor(DefaultWithVoidAsDefault.class).readValue(""{}"");assertNull(ob);ob=MAPPER.readerFor(DefaultWithVoidAsDefault.class).readValue(""{\""bogus\"":3 }"");assertNull(ob);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testBadTypeAsNull",0,"public void testBadTypeAsNull()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);Object ob=mapper.readValue(""{}"",MysteryPolymorphic.class);assertNull(ob);ob=mapper.readValue(""{\""whatever\"":13}"",MysteryPolymorphic.class);assertNull(ob);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testInvalidTypeId511",0,"public void testInvalidTypeId511()throws Exception {ObjectReader reader=MAPPER.reader().without(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);String json=""{\""many\"":[{\""sub1\"":{\""a\"":\""foo\""}},{\""sub2\"":{\""b\"":\""bar\""}}]}"";Good goodResult=reader.forType(Good.class).readValue(json);assertNotNull(goodResult);Bad badResult=reader.forType(Bad.class).readValue(json);assertNotNull(badResult);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testDefaultImplWithObjectWrapper",0,"public void testDefaultImplWithObjectWrapper()throws Exception {BaseFor656 value=MAPPER.readValue(aposToQuotes(""{'foobar':{'a':3}}""),BaseFor656.class);assertNotNull(value);assertEquals(ImplFor656.class,value.getClass());assertEquals(3,((ImplFor656)value).a);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testUnknownTypeIDRecovery",0,"public void testUnknownTypeIDRecovery()throws Exception {ObjectReader reader=MAPPER.readerFor(CallRecord.class).without(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);String json=aposToQuotes(""{'version':0.0,'application':'123',"" + ""'item':{'type':'xevent','location':'location1'},"" + ""'item2':{'type':'event','location':'location1'}}"");CallRecord r=reader.readValue(json);assertNull(r.item);assertNotNull(r.item2);json=aposToQuotes(""{'item':{'type':'xevent','location':'location1'},'version':0.0,'application':'123'}"");CallRecord r3=reader.readValue(json);assertNull(r3.item);assertEquals(""123"",r3.application);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testUnknownClassAsSubtype",0,"public void testUnknownClassAsSubtype()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,false);BaseWrapper w=mapper.readValue(aposToQuotes(""{'value':{'clazz':'com.foobar.Nothing'}}'""),BaseWrapper.class);assertNotNull(w);assertNull(w.value);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testWithoutEmptyStringAsNullObject1533",0,"public void testWithoutEmptyStringAsNullObject1533()throws Exception {ObjectReader r=MAPPER.readerFor(AsPropertyWrapper.class).without(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);try {r.readValue(""{\""value\"": \""\"" }"");fail(""Expected "" + JsonMappingException.class);}catch(InvalidTypeIdException e){verifyException(e,""missing type id property 'type'"");}}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.testWithEmptyStringAsNullObject1533",0,"public void testWithEmptyStringAsNullObject1533()throws Exception {ObjectReader r=MAPPER.readerFor(AsPropertyWrapper.class).with(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);AsPropertyWrapper wrapper=r.readValue(""{\""value\"": \""\"" }"");assertNull(wrapper.value);}"
"com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestMissingNode.testMissing",0,"public void testMissing(){MissingNode n=MissingNode.getInstance();assertTrue(n.isMissingNode());assertEquals(JsonToken.NOT_AVAILABLE,n.asToken());assertEquals("""",n.asText());assertStandardEquals(n);assertEquals("""",n.toString());assertNodeNumbersForNonNumeric(n);assertTrue(n.asBoolean(true));assertEquals(4,n.asInt(4));assertEquals(5L,n.asLong(5));assertEquals(0.25,n.asDouble(0.25));assertEquals(""foo"",n.asText(""foo""));}"
"com.fasterxml.jackson.databind.node.TestMissingNode.testMissingViaMapper",0,"/** * Let's also verify behavior of ""MissingNode"" -- one needs to be able to traverse such bogus nodes with appropriate methods.*/@SuppressWarnings(""unused"")public void testMissingViaMapper()throws Exception {String JSON=""[{},[]]"";JsonNode result=objectMapper().readTree(new StringReader(JSON));assertTrue(result.isContainerNode());assertTrue(result.isArray());assertEquals(2,result.size());int count=0;for(JsonNode node : result){++count;}assertEquals(2,count);Iterator<JsonNode> it=result.iterator();JsonNode onode=it.next();assertTrue(onode.isContainerNode());assertTrue(onode.isObject());assertEquals(0,onode.size());assertFalse(onode.isMissingNode());assertNull(onode.textValue());assertNull(onode.get(0));JsonNode dummyNode=onode.path(0);assertNotNull(dummyNode);assertTrue(dummyNode.isMissingNode());assertNull(dummyNode.get(3));assertNull(dummyNode.get(""whatever""));JsonNode dummyNode2=dummyNode.path(98);assertNotNull(dummyNode2);assertTrue(dummyNode2.isMissingNode());JsonNode dummyNode3=dummyNode.path(""field"");assertNotNull(dummyNode3);assertTrue(dummyNode3.isMissingNode());JsonNode anode=it.next();assertTrue(anode.isContainerNode());assertTrue(anode.isArray());assertFalse(anode.isMissingNode());assertEquals(0,anode.size());assertNull(anode.get(0));dummyNode=anode.path(0);assertNotNull(dummyNode);assertTrue(dummyNode.isMissingNode());assertNull(dummyNode.get(0));assertNull(dummyNode.get(""myfield""));dummyNode2=dummyNode.path(98);assertNotNull(dummyNode2);assertTrue(dummyNode2.isMissingNode());dummyNode3=dummyNode.path(""f"");assertNotNull(dummyNode3);assertTrue(dummyNode3.isMissingNode());}"
"com.fasterxml.jackson.databind.node.TestMissingNode.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.ReferentialWithObjectIdTest.testAtomicWithObjectId",0,"public void testAtomicWithObjectId()throws Exception {Employee first=new Employee();first.id=1;first.name=""Alice"";Employee second=new Employee();second.id=2;second.name=""Bob"";first.next(second);second.next(first);EmployeeList input=new EmployeeList();input.first=new AtomicReference<Employee>(first);String json=MAPPER.writeValueAsString(input);EmployeeList result=MAPPER.readValue(json,EmployeeList.class);Employee firstB=result.first.get();assertNotNull(firstB);assertEquals(""Alice"",firstB.name);Employee secondB=firstB.next.get();assertNotNull(secondB);assertEquals(""Bob"",secondB.name);assertNotNull(secondB.next.get());assertSame(firstB,secondB.next.get());}"
"com.fasterxml.jackson.databind.objectid.ReferentialWithObjectIdTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testSimpleTypes",0,"public void testSimpleTypes(){Class<?>[]classes=new Class<?>[]{boolean.class,byte.class,char.class,short.class,int.class,long.class,float.class,double.class,Boolean.class,Byte.class,Character.class,Short.class,Integer.class,Long.class,Float.class,Double.class,String.class,Object.class,Calendar.class,Date.class};TypeFactory tf=TypeFactory.defaultInstance();for(Class<?> clz : classes){assertSame(clz,tf.constructType(clz).getRawClass());assertSame(clz,tf.constructType(clz).getRawClass());}}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testArrays",0,"public void testArrays(){Class<?>[]classes=new Class<?>[]{boolean[].class,byte[].class,char[].class,short[].class,int[].class,long[].class,float[].class,double[].class,String[].class,Object[].class,Calendar[].class};TypeFactory tf=TypeFactory.defaultInstance();for(Class<?> clz : classes){assertSame(clz,tf.constructType(clz).getRawClass());Class<?> elemType=clz.getComponentType();assertSame(clz,tf.constructArrayType(elemType).getRawClass());}}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testProperties",0,"public void testProperties(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(Properties.class);assertEquals(MapType.class,t.getClass());assertSame(Properties.class,t.getRawClass());MapType mt=(MapType)t;assertSame(String.class,mt.getKeyType().getRawClass());assertSame(String.class,mt.getContentType().getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testIterator",0,"public void testIterator(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(new TypeReference<Iterator<String>>(){});assertEquals(SimpleType.class,t.getClass());assertSame(Iterator.class,t.getRawClass());assertEquals(1,t.containedTypeCount());assertEquals(tf.constructType(String.class),t.containedType(0));assertNull(t.containedType(1));}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testParametricTypes",0,"/** * Test for verifying that parametric types can be constructed programmatically*/@SuppressWarnings(""deprecation"")public void testParametricTypes(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructParametrizedType(ArrayList.class,Collection.class,String.class);assertEquals(CollectionType.class,t.getClass());JavaType strC=tf.constructType(String.class);assertEquals(1,t.containedTypeCount());assertEquals(strC,t.containedType(0));assertNull(t.containedType(1));JavaType t2=tf.constructParametrizedType(Map.class,Map.class,strC,t);assertEquals(MapType.class,t2.getClass());assertEquals(2,t2.containedTypeCount());assertEquals(strC,t2.containedType(0));assertEquals(t,t2.containedType(1));assertNull(t2.containedType(2));JavaType custom=tf.constructParametrizedType(SingleArgGeneric.class,SingleArgGeneric.class,String.class);assertEquals(SimpleType.class,custom.getClass());assertEquals(1,custom.containedTypeCount());assertEquals(strC,custom.containedType(0));assertNull(custom.containedType(1));assertEquals(""X"",custom.containedTypeName(0));try {tf.constructParametrizedType(Map.class,Map.class,strC);}catch(IllegalArgumentException e){verifyException(e,""Can not create TypeBindings for class java.util.Map"");}try {tf.constructParametrizedType(SingleArgGeneric.class,SingleArgGeneric.class,strC,strC);}catch(IllegalArgumentException e){verifyException(e,""Can not create TypeBindings for class "");}}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testCanonicalNames",0,"/** * Test for checking that canonical name handling works ok*/public void testCanonicalNames(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(java.util.Calendar.class);String can=t.toCanonical();assertEquals(""java.util.Calendar"",can);assertEquals(t,tf.constructFromCanonical(can));t=tf.constructType(java.util.ArrayList.class);can=t.toCanonical();assertEquals(""java.util.ArrayList<java.lang.Object>"",can);assertEquals(t,tf.constructFromCanonical(can));t=tf.constructType(java.util.TreeMap.class);can=t.toCanonical();assertEquals(""java.util.TreeMap<java.lang.Object,java.lang.Object>"",can);assertEquals(t,tf.constructFromCanonical(can));t=tf.constructMapType(EnumMap.class,EnumForCanonical.class,String.class);can=t.toCanonical();assertEquals(""java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>"",can);assertEquals(t,tf.constructFromCanonical(can));}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testCollections",0,"public void testCollections(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(ArrayList.class);assertEquals(CollectionType.class,t.getClass());assertSame(ArrayList.class,t.getRawClass());t=tf.constructType(new TypeReference<ArrayList<String>>(){});assertEquals(CollectionType.class,t.getClass());assertSame(ArrayList.class,t.getRawClass());JavaType elemType=((CollectionType)t).getContentType();assertNotNull(elemType);assertSame(SimpleType.class,elemType.getClass());assertSame(String.class,elemType.getRawClass());t=tf.constructCollectionType(ArrayList.class,String.class);assertEquals(CollectionType.class,t.getClass());assertSame(String.class,((CollectionType)t).getContentType().getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testCollectionTypesRefined",0,"public void testCollectionTypesRefined(){TypeFactory tf=newTypeFactory();JavaType type=tf.constructType(new TypeReference<List<Long>>(){});assertEquals(List.class,type.getRawClass());assertEquals(Long.class,type.getContentType().getRawClass());assertNull(type.getSuperClass());JavaType subtype=tf.constructSpecializedType(type,ArrayList.class);assertEquals(ArrayList.class,subtype.getRawClass());assertEquals(Long.class,subtype.getContentType().getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMaps",0,"public void testMaps(){TypeFactory tf=newTypeFactory();JavaType t=tf.constructType(HashMap.class);assertEquals(MapType.class,t.getClass());assertSame(HashMap.class,t.getRawClass());t=tf.constructMapType(TreeMap.class,String.class,Integer.class);assertEquals(MapType.class,t.getClass());assertSame(String.class,((MapType)t).getKeyType().getRawClass());assertSame(Integer.class,((MapType)t).getContentType().getRawClass());t=tf.constructType(new TypeReference<HashMap<String,Integer>>(){});assertEquals(MapType.class,t.getClass());assertSame(HashMap.class,t.getRawClass());MapType mt=(MapType)t;assertEquals(tf.constructType(String.class),mt.getKeyType());assertEquals(tf.constructType(Integer.class),mt.getContentType());t=tf.constructType(new TypeReference<LongValuedMap<Boolean>>(){});assertEquals(MapType.class,t.getClass());assertSame(LongValuedMap.class,t.getRawClass());mt=(MapType)t;assertEquals(tf.constructType(Boolean.class),mt.getKeyType());assertEquals(tf.constructType(Long.class),mt.getContentType());JavaType type=tf.constructType(new TypeReference<Map<String,Boolean>>(){});MapType mapType=(MapType)type;assertEquals(tf.constructType(String.class),mapType.getKeyType());assertEquals(tf.constructType(Boolean.class),mapType.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesRefined",0,"public void testMapTypesRefined(){TypeFactory tf=newTypeFactory();JavaType type=tf.constructType(new TypeReference<Map<String,List<Integer>>>(){});MapType mapType=(MapType)type;assertEquals(Map.class,mapType.getRawClass());assertEquals(String.class,mapType.getKeyType().getRawClass());assertEquals(List.class,mapType.getContentType().getRawClass());assertEquals(Integer.class,mapType.getContentType().getContentType().getRawClass());assertNull(type.getSuperClass());JavaType subtype=tf.constructSpecializedType(type,LinkedHashMap.class);assertEquals(LinkedHashMap.class,subtype.getRawClass());assertEquals(String.class,subtype.getKeyType().getRawClass());assertEquals(List.class,subtype.getContentType().getRawClass());assertEquals(Integer.class,subtype.getContentType().getContentType().getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesRaw",0,"public void testMapTypesRaw(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(HashMap.class);MapType mapType=(MapType)type;assertEquals(tf.constructType(Object.class),mapType.getKeyType());assertEquals(tf.constructType(Object.class),mapType.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesAdvanced",0,"public void testMapTypesAdvanced(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(MyMap.class);MapType mapType=(MapType)type;assertEquals(tf.constructType(String.class),mapType.getKeyType());assertEquals(tf.constructType(Long.class),mapType.getContentType());type=tf.constructType(MapInterface.class);mapType=(MapType)type;assertEquals(tf.constructType(String.class),mapType.getKeyType());assertEquals(tf.constructType(Integer.class),mapType.getContentType());type=tf.constructType(MyStringIntMap.class);mapType=(MapType)type;assertEquals(tf.constructType(String.class),mapType.getKeyType());assertEquals(tf.constructType(Integer.class),mapType.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMapTypesSneaky",0,"/** * Specific test to verify that complicate name mangling schemes do not fool type resolver*/public void testMapTypesSneaky(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(IntLongMap.class);MapType mapType=(MapType)type;assertEquals(tf.constructType(Integer.class),mapType.getKeyType());assertEquals(tf.constructType(Long.class),mapType.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testSneakyFieldTypes",0,"/** * Plus sneaky types may be found via introspection as well.*/public void testSneakyFieldTypes()throws Exception {TypeFactory tf=TypeFactory.defaultInstance();Field field=SneakyBean.class.getDeclaredField(""intMap"");JavaType type=tf.constructType(field.getGenericType());assertTrue(type instanceof MapType);MapType mapType=(MapType)type;assertEquals(tf.constructType(Integer.class),mapType.getKeyType());assertEquals(tf.constructType(Long.class),mapType.getContentType());field=SneakyBean.class.getDeclaredField(""longList"");type=tf.constructType(field.getGenericType());assertTrue(type instanceof CollectionType);CollectionType collectionType=(CollectionType)type;assertEquals(tf.constructType(Long.class),collectionType.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testSneakyBeanProperties",0,"/** * Looks like type handling actually differs for properties,too.*/public void testSneakyBeanProperties()throws Exception {ObjectMapper mapper=new ObjectMapper();StringLongMapBean bean=mapper.readValue(""{\""value\"":{\""a\"":123}}"",StringLongMapBean.class);assertNotNull(bean);Map<String,Long> map=bean.value;assertEquals(1,map.size());assertEquals(Long.valueOf(123),map.get(""a""));StringListBean bean2=mapper.readValue(""{\""value\"":[\""...\""]}"",StringListBean.class);assertNotNull(bean2);List<String> list=bean2.value;assertSame(GenericList.class,list.getClass());assertEquals(1,list.size());assertEquals(""..."",list.get(0));}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testSneakySelfRefs",0,"public void testSneakySelfRefs()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new SneakyBean2());assertEquals(""{\""foobar\"":null}"",json);}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testAtomicArrayRefParameters",0,"public void testAtomicArrayRefParameters(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(new TypeReference<AtomicReference<long[]>>(){});JavaType[]params=tf.findTypeParameters(type,AtomicReference.class);assertNotNull(params);assertEquals(1,params.length);assertEquals(tf.constructType(long[].class),params[0]);}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMapEntryResolution",0,"public void testMapEntryResolution(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(StringIntMapEntry.class);JavaType mapEntryType=t.findSuperType(Map.Entry.class);assertNotNull(mapEntryType);assertTrue(mapEntryType.hasGenericTypes());assertEquals(2,mapEntryType.containedTypeCount());assertEquals(String.class,mapEntryType.containedType(0).getRawClass());assertEquals(Integer.class,mapEntryType.containedType(1).getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testRawCollections",0,"public void testRawCollections(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructRawCollectionType(ArrayList.class);assertTrue(type.isContainerType());assertEquals(TypeFactory.unknownType(),type.getContentType());type=tf.constructRawCollectionLikeType(CollectionLike.class);assertTrue(type.isCollectionLikeType());assertEquals(TypeFactory.unknownType(),type.getContentType());type=tf.constructRawCollectionLikeType(String.class);assertTrue(type.isCollectionLikeType());assertEquals(TypeFactory.unknownType(),type.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testRawMaps",0,"public void testRawMaps(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructRawMapType(HashMap.class);assertTrue(type.isContainerType());assertEquals(TypeFactory.unknownType(),type.getKeyType());assertEquals(TypeFactory.unknownType(),type.getContentType());type=tf.constructRawMapLikeType(MapLike.class);assertTrue(type.isMapLikeType());assertEquals(TypeFactory.unknownType(),type.getKeyType());assertEquals(TypeFactory.unknownType(),type.getContentType());type=tf.constructRawMapLikeType(String.class);assertTrue(type.isMapLikeType());assertEquals(TypeFactory.unknownType(),type.getKeyType());assertEquals(TypeFactory.unknownType(),type.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testMoreSpecificType",0,"public void testMoreSpecificType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t1=tf.constructCollectionType(Collection.class,Object.class);JavaType t2=tf.constructCollectionType(List.class,Object.class);assertSame(t2,tf.moreSpecificType(t1,t2));assertSame(t2,tf.moreSpecificType(t2,t1));t1=tf.constructType(Double.class);t2=tf.constructType(Number.class);assertSame(t1,tf.moreSpecificType(t1,t2));assertSame(t1,tf.moreSpecificType(t2,t1));t1=tf.constructType(Double.class);t2=tf.constructType(String.class);assertSame(t1,tf.moreSpecificType(t1,t2));assertSame(t2,tf.moreSpecificType(t2,t1));}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testCacheClearing",0,"public void testCacheClearing(){TypeFactory tf=TypeFactory.defaultInstance().withModifier(null);assertEquals(0,tf._typeCache.size());tf.constructType(getClass());assertEquals(6,tf._typeCache.size());tf.clearCache();assertEquals(0,tf._typeCache.size());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.testRawMapType",0,"public void testRawMapType(){TypeFactory tf=TypeFactory.defaultInstance().withModifier(null);JavaType type=tf.constructParametricType(Wrapper1297.class,Map.class);assertNotNull(type);assertEquals(Wrapper1297.class,type.getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeFactory.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testUsingObjectWriter",0,"public void testUsingObjectWriter()throws IOException {ObjectWriter w=MAPPER.writerFor(Object.class);Map<String,Object> map=new LinkedHashMap<String,Object>();map.put(""a"",1);String json=w.writeValueAsString(map);assertEquals(aposToQuotes(""{'a':1}""),json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testMapSerializer",0,"public void testMapSerializer()throws IOException {assertEquals(""\""{a=b,c=d}\"""",MAPPER.writeValueAsString(new PseudoMap(""a"",""b"",""c"",""d"")));}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testMapKeySetValuesSerialization",0,"public void testMapKeySetValuesSerialization()throws IOException {Map<String,String> map=new HashMap<String,String>();map.put(""a"",""b"");assertEquals(""[\""a\""]"",MAPPER.writeValueAsString(map.keySet()));assertEquals(""[\""b\""]"",MAPPER.writeValueAsString(map.values()));map=new TreeMap<String,String>();map.put(""c"",""d"");assertEquals(""[\""c\""]"",MAPPER.writeValueAsString(map.keySet()));assertEquals(""[\""d\""]"",MAPPER.writeValueAsString(map.values()));map=new ConcurrentHashMap<String,String>();map.put(""e"",""f"");assertEquals(""[\""e\""]"",MAPPER.writeValueAsString(map.keySet()));assertEquals(""[\""f\""]"",MAPPER.writeValueAsString(map.values()));}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testOrderByKey",0,"public void testOrderByKey()throws IOException {ObjectMapper m=new ObjectMapper();assertFalse(m.isEnabled(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS));LinkedHashMap<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""b"",3);map.put(""a"",6);assertEquals(""{\""b\"":3,\""a\"":6}"",m.writeValueAsString(map));ObjectWriter sortingW=m.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);assertEquals(""{\""a\"":6,\""b\"":3}"",sortingW.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testOrderByWithNulls",0,"public void testOrderByWithNulls()throws IOException {ObjectWriter sortingW=MAPPER.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);Map<String,Integer> mapWithNullKey=new LinkedHashMap<String,Integer>();mapWithNullKey.put(null,1);mapWithNullKey.put(""b"",2);try {sortingW.writeValueAsString(mapWithNullKey);}catch(JsonMappingException e){verifyException(e,""Null key for a Map not allowed"");}}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testOrderByKeyViaProperty",0,"public void testOrderByKeyViaProperty()throws IOException {MapOrderingBean input=new MapOrderingBean(""c"",""b"",""a"");String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'map':{'a':3,'b':2,'c':1}}""),json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testMapEntry",0,"public void testMapEntry()throws IOException {StringIntMapEntry input=new StringIntMapEntry(""answer"",42);String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'answer':42}""),json);StringIntMapEntry[]array=new StringIntMapEntry[]{input};json=MAPPER.writeValueAsString(array);assertEquals(aposToQuotes(""[{'answer':42}]""),json);ObjectMapper mapper=new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);json=mapper.writeValueAsString(input);assertEquals(aposToQuotes(""['"" + StringIntMapEntry.class.getName()+ ""',{'answer':42}]""),json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testMapEntryWrapper",0,"public void testMapEntryWrapper()throws IOException {StringIntMapEntryWrapper input=new StringIntMapEntryWrapper(""answer"",42);String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'value':{'answer':42}}""),json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testNullJsonMapping691",0,"public void testNullJsonMapping691()throws Exception {MapWithTypedValues input=new MapWithTypedValues();input.put(""id"",""Test"");input.put(""NULL"",null);String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'@type':'mymap','id':'Test','NULL':null}""),json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testNullJsonInTypedMap691",0,"public void testNullJsonInTypedMap691()throws Exception {Map<String,String> map=new HashMap<String,String>();map.put(""NULL"",null);ObjectMapper mapper=new ObjectMapper();mapper.addMixIn(Object.class,Mixin691.class);String json=mapper.writeValueAsString(map);assertEquals(""{\""@class\"":\""java.util.HashMap\"",\""NULL\"":null}"",json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.testConcurrentMaps",0,"public void testConcurrentMaps()throws Exception {final ObjectWriter w=MAPPER.writer(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS);Map<String,String> input=new ConcurrentSkipListMap<String,String>();input.put(""x"",""y"");input.put(""a"",""b"");String json=w.writeValueAsString(input);assertEquals(aposToQuotes(""{'a':'b','x':'y'}""),json);input=new ConcurrentHashMap<String,String>();input.put(""x"",""y"");input.put(""a"",""b"");json=w.writeValueAsString(input);assertEquals(aposToQuotes(""{'a':'b','x':'y'}""),json);input=new Hashtable<String,String>();input.put(""x"",""y"");input.put(""a"",""b"");json=w.writeValueAsString(input);assertEquals(aposToQuotes(""{'a':'b','x':'y'}""),json);}"
"com.fasterxml.jackson.databind.ser.TestMapSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testVersion",0,"public void testVersion()throws Exception {Version v=new Version(1,2,3,null,""com.fasterxml"",""IntrospectorPairTest"");IntrospectorWithMap withVersion=new IntrospectorWithMap().version(v);assertEquals(v,new AnnotationIntrospectorPair(withVersion,NO_ANNOTATIONS).version());assertEquals(Version.unknownVersion(),new AnnotationIntrospectorPair(NO_ANNOTATIONS,withVersion).version());}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testAccess",0,"public void testAccess()throws Exception {IntrospectorWithMap intr1=new IntrospectorWithMap();AnnotationIntrospectorPair pair=new AnnotationIntrospectorPair(intr1,NO_ANNOTATIONS);Collection<AnnotationIntrospector> intrs=pair.allIntrospectors();assertEquals(2,intrs.size());Iterator<AnnotationIntrospector> it=intrs.iterator();assertSame(intr1,it.next());assertSame(NO_ANNOTATIONS,it.next());}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testAnnotationBundle",0,"public void testAnnotationBundle()throws Exception {IntrospectorWithMap isBundle=new IntrospectorWithMap().add(""isAnnotationBundle"",true);assertTrue(new AnnotationIntrospectorPair(NO_ANNOTATIONS,isBundle).isAnnotationBundle(null));assertTrue(new AnnotationIntrospectorPair(isBundle,NO_ANNOTATIONS).isAnnotationBundle(null));assertFalse(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).isAnnotationBundle(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindRootName",0,"public void testFindRootName()throws Exception {PropertyName name=new PropertyName(""test"");IntrospectorWithMap intr=new IntrospectorWithMap().add(""findRootName"",name);assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).findRootName(null));assertEquals(name,new AnnotationIntrospectorPair(NO_ANNOTATIONS,intr).findRootName(null));assertEquals(name,new AnnotationIntrospectorPair(intr,NO_ANNOTATIONS).findRootName(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testPropertyIgnorals",0,"public void testPropertyIgnorals()throws Exception {JsonIgnoreProperties.Value incl=JsonIgnoreProperties.Value.forIgnoredProperties(""foo"");IntrospectorWithMap intr=new IntrospectorWithMap().add(""findPropertyIgnorals"",incl);IntrospectorWithMap intrEmpty=new IntrospectorWithMap().add(""findPropertyIgnorals"",JsonIgnoreProperties.Value.empty());assertEquals(JsonIgnoreProperties.Value.empty(),new AnnotationIntrospectorPair(intrEmpty,intrEmpty).findPropertyIgnorals(null));assertEquals(incl,new AnnotationIntrospectorPair(intrEmpty,intr).findPropertyIgnorals(null));assertEquals(incl,new AnnotationIntrospectorPair(intr,intrEmpty).findPropertyIgnorals(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testIsIgnorableType",0,"public void testIsIgnorableType()throws Exception {IntrospectorWithMap intr1=new IntrospectorWithMap().add(""isIgnorableType"",Boolean.TRUE);IntrospectorWithMap intr2=new IntrospectorWithMap().add(""isIgnorableType"",Boolean.FALSE);assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).isIgnorableType(null));assertEquals(Boolean.TRUE,new AnnotationIntrospectorPair(intr1,intr2).isIgnorableType(null));assertEquals(Boolean.FALSE,new AnnotationIntrospectorPair(intr2,intr1).isIgnorableType(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindFilterId",0,"public void testFindFilterId()throws Exception {IntrospectorWithMap intr1=new IntrospectorWithMap().add(""findFilterId"",""a"");IntrospectorWithMap intr2=new IntrospectorWithMap().add(""findFilterId"",""b"");assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).findFilterId(null));assertEquals(""a"",new AnnotationIntrospectorPair(intr1,intr2).findFilterId(null));assertEquals(""b"",new AnnotationIntrospectorPair(intr2,intr1).findFilterId(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindNamingStrategy",0,"public void testFindNamingStrategy()throws Exception {IntrospectorWithMap intr1=new IntrospectorWithMap().add(""findNamingStrategy"",Integer.class);IntrospectorWithMap intr2=new IntrospectorWithMap().add(""findNamingStrategy"",String.class);assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).findNamingStrategy(null));assertEquals(Integer.class,new AnnotationIntrospectorPair(intr1,intr2).findNamingStrategy(null));assertEquals(String.class,new AnnotationIntrospectorPair(intr2,intr1).findNamingStrategy(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindClassDescription",0,"public void testFindClassDescription()throws Exception {IntrospectorWithMap intr1=new IntrospectorWithMap().add(""findClassDescription"",""Desc1"");IntrospectorWithMap intr2=new IntrospectorWithMap().add(""findClassDescription"",""Desc2"");assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).findClassDescription(null));assertEquals(""Desc1"",new AnnotationIntrospectorPair(intr1,intr2).findClassDescription(null));assertEquals(""Desc2"",new AnnotationIntrospectorPair(intr2,intr1).findClassDescription(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindSerializer",0,"public void testFindSerializer()throws Exception {final JsonSerializer<?> serString=new StringSerializer();final JsonSerializer<?> serToString=ToStringSerializer.instance;AnnotationIntrospector intr1=new IntrospectorWithHandlers(null,serString);AnnotationIntrospector intr2=new IntrospectorWithHandlers(null,serToString);AnnotationIntrospector nop=AnnotationIntrospector.nopInstance();AnnotationIntrospector nop2=new IntrospectorWithHandlers(null,JsonSerializer.None.class);assertSame(serString,new AnnotationIntrospectorPair(intr1,intr2).findSerializer(null));assertSame(serToString,new AnnotationIntrospectorPair(intr2,intr1).findSerializer(null));assertSame(serString,new AnnotationIntrospectorPair(nop,intr1).findSerializer(null));assertSame(serString,new AnnotationIntrospectorPair(nop2,intr1).findSerializer(null));assertNull(new AnnotationIntrospectorPair(nop,nop2).findSerializer(null));assertNull(new AnnotationIntrospectorPair(nop2,nop).findSerializer(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindDeserializer",0,"public void testFindDeserializer()throws Exception {final JsonDeserializer<?> deserString=StringDeserializer.instance;final JsonDeserializer<?> deserObject=UntypedObjectDeserializer.Vanilla.std;AnnotationIntrospector intr1=new IntrospectorWithHandlers(deserString,null);AnnotationIntrospector intr2=new IntrospectorWithHandlers(deserObject,null);AnnotationIntrospector nop=AnnotationIntrospector.nopInstance();AnnotationIntrospector nop2=new IntrospectorWithHandlers(JsonDeserializer.None.class,null);assertSame(deserString,new AnnotationIntrospectorPair(intr1,intr2).findDeserializer(null));assertSame(deserObject,new AnnotationIntrospectorPair(intr2,intr1).findDeserializer(null));assertSame(deserString,new AnnotationIntrospectorPair(nop,intr1).findDeserializer(null));assertSame(deserString,new AnnotationIntrospectorPair(nop2,intr1).findDeserializer(null));assertNull(new AnnotationIntrospectorPair(nop,nop2).findDeserializer(null));assertNull(new AnnotationIntrospectorPair(nop2,nop).findDeserializer(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindAutoDetectVisibility",0,"public void testFindAutoDetectVisibility()throws Exception {VisibilityChecker<?> vc=VisibilityChecker.Std.defaultInstance();IntrospectorWithMap intr1=new IntrospectorWithMap().add(""findAutoDetectVisibility"",vc);assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).findAutoDetectVisibility(null,null));assertSame(vc,new AnnotationIntrospectorPair(intr1,NO_ANNOTATIONS).findAutoDetectVisibility(null,null));assertSame(vc,new AnnotationIntrospectorPair(NO_ANNOTATIONS,intr1).findAutoDetectVisibility(null,null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindTypeResolver",0,"public void testFindTypeResolver()throws Exception {}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindPropertyTypeResolver",0,"public void testFindPropertyTypeResolver(){}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindPropertyContentTypeResolver",0,"public void testFindPropertyContentTypeResolver(){}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindSubtypes",0,"public void testFindSubtypes(){}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testFindTypeName",0,"public void testFindTypeName(){IntrospectorWithMap intr1=new IntrospectorWithMap().add(""findTypeName"",""type1"");IntrospectorWithMap intr2=new IntrospectorWithMap().add(""findTypeName"",""type2"");assertNull(new AnnotationIntrospectorPair(NO_ANNOTATIONS,NO_ANNOTATIONS).findTypeName(null));assertEquals(""type1"",new AnnotationIntrospectorPair(intr1,intr2).findTypeName(null));assertEquals(""type2"",new AnnotationIntrospectorPair(intr2,intr1).findTypeName(null));}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.testInclusionMerging",0,"public void testInclusionMerging()throws Exception {JsonInclude.Value v12=introPair12.findPropertyInclusion(null);JsonInclude.Value v21=introPair21.findPropertyInclusion(null);assertEquals(JsonInclude.Include.ALWAYS,v12.getContentInclusion());assertEquals(JsonInclude.Include.NON_ABSENT,v12.getValueInclusion());assertEquals(JsonInclude.Include.NON_EMPTY,v21.getContentInclusion());assertEquals(JsonInclude.Include.NON_ABSENT,v21.getValueInclusion());}"
"com.fasterxml.jackson.databind.introspect.IntrospectorPairTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideClassValid",0,"public void testOverrideClassValid()throws Exception {ObjectMapper m=new ObjectMapper();CollectionHolder result=m.readValue(""{\""strings\"" :[\""test\""]}"",CollectionHolder.class);Collection<String> strs=result._strings;assertEquals(1,strs.size());assertEquals(TreeSet.class,strs.getClass());assertEquals(""test"",strs.iterator().next());}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideMapValid",0,"public void testOverrideMapValid()throws Exception {ObjectMapper m=new ObjectMapper();MapHolder result=m.readValue(""{\""strings\"" :{\""a\"" : 3}}"",MapHolder.class);Map<String,String> strs=result._data;assertEquals(1,strs.size());assertEquals(TreeMap.class,strs.getClass());String value=strs.get(""a"");assertEquals(""3"",value);}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideArrayClass",0,"public void testOverrideArrayClass()throws Exception {ObjectMapper m=new ObjectMapper();ArrayHolder result=m.readValue(""{\""strings\"" :[\""test\""]}"",ArrayHolder.class);String[]strs=result._strings;assertEquals(1,strs.length);assertEquals(String[].class,strs.getClass());assertEquals(""test"",strs[0]);}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideClassInvalid",0,"public void testOverrideClassInvalid()throws Exception {try {BrokenCollectionHolder result=new ObjectMapper().readValue(""{\""strings\"" :[]}"",BrokenCollectionHolder.class);fail(""Expected a failure,but got results: "" + result);}catch(JsonMappingException jme){verifyException(jme,""not subtype of"");}}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testRootInterfaceAs",0,"public void testRootInterfaceAs()throws Exception {RootInterface value=new ObjectMapper().readValue(""{\""a\"":\""abc\"" }"",RootInterface.class);assertTrue(value instanceof RootInterfaceImpl);assertEquals(""abc"",value.getA());}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testRootInterfaceUsing",0,"public void testRootInterfaceUsing()throws Exception {RootString value=new ObjectMapper().readValue(""\""xxx\"""",RootString.class);assertTrue(value instanceof RootString);assertEquals(""xxx"",value.contents());}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testRootListAs",0,"public void testRootListAs()throws Exception {RootMap value=new ObjectMapper().readValue(""{\""a\"":\""b\""}"",RootMap.class);assertEquals(1,value.size());Object v2=value.get(""a"");assertEquals(RootStringImpl.class,v2.getClass());assertEquals(""b"",((RootString)v2).contents());}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testRootMapAs",0,"public void testRootMapAs()throws Exception {RootList value=new ObjectMapper().readValue(""[\""c\"" ]"",RootList.class);assertEquals(1,value.size());Object v2=value.get(0);assertEquals(RootStringImpl.class,v2.getClass());assertEquals(""c"",((RootString)v2).contents());}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideKeyClassValid",0,"@SuppressWarnings(""unchecked"")public void testOverrideKeyClassValid()throws Exception {ObjectMapper m=new ObjectMapper();MapKeyHolder result=m.readValue(""{\""map\"" :{\""xxx\"" : \""yyy\""}}"",MapKeyHolder.class);Map<StringWrapper,String> map=(Map<StringWrapper,String>)(Map<?,?>)result._map;assertEquals(1,map.size());Map.Entry<StringWrapper,String> en=map.entrySet().iterator().next();StringWrapper key=en.getKey();assertEquals(StringWrapper.class,key.getClass());assertEquals(""xxx"",key._string);assertEquals(""yyy"",en.getValue());}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideKeyClassInvalid",0,"public void testOverrideKeyClassInvalid()throws Exception {try {BrokenMapKeyHolder result=new ObjectMapper().readValue(""{\""123\"" : \""xxx\"" }"",BrokenMapKeyHolder.class);fail(""Expected a failure,but got results: "" + result);}catch(JsonMappingException jme){verifyException(jme,""not subtype of"");}}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideContentClassValid",0,"@SuppressWarnings(""unchecked"")public void testOverrideContentClassValid()throws Exception {ObjectMapper m=new ObjectMapper();ListContentHolder result=m.readValue(""{\""list\"" :[\""abc\""]}"",ListContentHolder.class);List<StringWrapper> list=(List<StringWrapper>)result._list;assertEquals(1,list.size());Object value=list.get(0);assertEquals(StringWrapper.class,value.getClass());assertEquals(""abc"",((StringWrapper)value)._string);}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideArrayContents",0,"public void testOverrideArrayContents()throws Exception {ObjectMapper m=new ObjectMapper();ArrayContentHolder result=m.readValue(""{\""data\"" :[1,2,3]}"",ArrayContentHolder.class);Object[]data=result._data;assertEquals(3,data.length);assertEquals(Long[].class,data.getClass());assertEquals(1L,data[0]);assertEquals(2L,data[1]);assertEquals(3L,data[2]);}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.testOverrideMapContents",0,"public void testOverrideMapContents()throws Exception {ObjectMapper m=new ObjectMapper();MapContentHolder result=m.readValue(""{\""map\"" :{\""a\"" : 9}}"",MapContentHolder.class);Map<Object,Object> map=result._map;assertEquals(1,map.size());Object ob=map.values().iterator().next();assertEquals(Integer.class,ob.getClass());assertEquals(Integer.valueOf(9),ob);}"
"com.fasterxml.jackson.databind.deser.TestValueAnnotations.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestOverlappingTypeIdNames.testOverlappingNameDeser",0,"public void testOverlappingNameDeser()throws Exception {Base312 value;value=MAPPER.readValue(aposToQuotes(""{'type':'a','x':7}""),Base312.class);assertNotNull(value);assertEquals(Impl312.class,value.getClass());assertEquals(7,((Impl312)value).x);value=MAPPER.readValue(aposToQuotes(""{'type':'b','x':3}""),Base312.class);assertNotNull(value);assertEquals(Impl312.class,value.getClass());assertEquals(3,((Impl312)value).x);}"
"com.fasterxml.jackson.databind.jsontype.TestOverlappingTypeIdNames.testOverlappingNameSer",0,"public void testOverlappingNameSer()throws Exception {assertEquals(aposToQuotes(""{'type':'a','value':1}""),MAPPER.writeValueAsString(new Impl312B1()));assertEquals(aposToQuotes(""{'type':'a','value':1}""),MAPPER.writeValueAsString(new Impl312B2()));}"
"com.fasterxml.jackson.databind.jsontype.TestOverlappingTypeIdNames.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.EnumValuesTest.testConstructFromName",0,"@SuppressWarnings(""unchecked"")public void testConstructFromName(){SerializationConfig cfg=MAPPER.getSerializationConfig().without(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);Class<Enum<?>> enumClass=(Class<Enum<?>>)(Class<?>)ABC.class;EnumValues values=EnumValues.construct(cfg,enumClass);assertEquals(""A"",values.serializedValueFor(ABC.A).toString());assertEquals(""B"",values.serializedValueFor(ABC.B).toString());assertEquals(""C"",values.serializedValueFor(ABC.C).toString());assertEquals(3,values.values().size());assertEquals(3,values.internalMap().size());}"
"com.fasterxml.jackson.databind.util.EnumValuesTest.testConstructWithToString",0,"@SuppressWarnings(""unchecked"")public void testConstructWithToString(){SerializationConfig cfg=MAPPER.getSerializationConfig().with(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);Class<Enum<?>> enumClass=(Class<Enum<?>>)(Class<?>)ABC.class;EnumValues values=EnumValues.construct(cfg,enumClass);assertEquals(""A"",values.serializedValueFor(ABC.A).toString());assertEquals(""b"",values.serializedValueFor(ABC.B).toString());assertEquals(""C"",values.serializedValueFor(ABC.C).toString());assertEquals(3,values.values().size());assertEquals(3,values.internalMap().size());}"
"com.fasterxml.jackson.databind.util.EnumValuesTest.testEnumResolver",0,"public void testEnumResolver(){EnumResolver enumRes=EnumResolver.constructUnsafeUsingToString(ABC.class,null);assertEquals(ABC.B,enumRes.getEnum(1));assertNull(enumRes.getEnum(-1));assertNull(enumRes.getEnum(3));assertEquals(2,enumRes.lastValidIndex());List<Enum<?>> enums=enumRes.getEnums();assertEquals(3,enums.size());assertEquals(ABC.A,enums.get(0));assertEquals(ABC.B,enums.get(1));assertEquals(ABC.C,enums.get(2));}"
"com.fasterxml.jackson.databind.util.EnumValuesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.testSimple",0,"public void testSimple()throws Exception {final String JSON=SAMPLE_DOC_JSON_SPEC;for (int type=0;type < 2;++type){JsonNode result;if (type == 0){result=objectMapper().readTree(new StringReader(JSON));}else {result=objectMapper().readTree(JSON);}assertType(result,ObjectNode.class);assertEquals(1,result.size());assertTrue(result.isObject());ObjectNode main=(ObjectNode)result;assertEquals(""Image"",main.fieldNames().next());JsonNode ob=main.elements().next();assertType(ob,ObjectNode.class);ObjectNode imageMap=(ObjectNode)ob;assertEquals(5,imageMap.size());ob=imageMap.get(""Width"");assertTrue(ob.isIntegralNumber());assertFalse(ob.isFloatingPointNumber());assertEquals(SAMPLE_SPEC_VALUE_WIDTH,ob.intValue());ob=imageMap.get(""Height"");assertTrue(ob.isIntegralNumber());assertEquals(SAMPLE_SPEC_VALUE_HEIGHT,ob.intValue());ob=imageMap.get(""Title"");assertTrue(ob.isTextual());assertEquals(SAMPLE_SPEC_VALUE_TITLE,ob.textValue());ob=imageMap.get(""Thumbnail"");assertType(ob,ObjectNode.class);ObjectNode tn=(ObjectNode)ob;ob=tn.get(""Url"");assertTrue(ob.isTextual());assertEquals(SAMPLE_SPEC_VALUE_TN_URL,ob.textValue());ob=tn.get(""Height"");assertTrue(ob.isIntegralNumber());assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT,ob.intValue());ob=tn.get(""Width"");assertTrue(ob.isTextual());assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH,ob.textValue());ob=imageMap.get(""IDs"");assertTrue(ob.isArray());ArrayNode idList=(ArrayNode)ob;assertEquals(4,idList.size());assertEquals(4,calcLength(idList.elements()));assertEquals(4,calcLength(idList.iterator()));{int[]values=new int[]{SAMPLE_SPEC_VALUE_TN_ID1,SAMPLE_SPEC_VALUE_TN_ID2,SAMPLE_SPEC_VALUE_TN_ID3,SAMPLE_SPEC_VALUE_TN_ID4};for (int i=0;i < values.length;++i){assertEquals(values[i],idList.get(i).intValue());}int i=0;for(JsonNode n : idList){assertEquals(values[i],n.intValue());++i;}}}}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.testMixed",0,"public void testMixed()throws IOException {ObjectMapper om=new ObjectMapper();String JSON=""{\""node\"" :{\""a\"" : 3 },\""x\"" : 9 }"";Bean bean=om.readValue(JSON,Bean.class);assertEquals(9,bean._x);JsonNode n=bean._node;assertNotNull(n);assertEquals(1,n.size());ObjectNode on=(ObjectNode)n;assertEquals(3,on.get(""a"").intValue());}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.testEOF",0,"/** * Type mappers should be able to gracefully deal with end of input.*/public void testEOF()throws Exception {String JSON=""{\""key\"": [{\""a\"" :{\""name\"": \""foo\"",\""type\"": 1\n"" + ""},\""type\"": 3,\""url\"": \""http://www.google.com\""}],\n"" + ""\""name\"": \""xyz\"",\""type\"": 1,\""url\"" : null }\n  "";JsonFactory jf=new JsonFactory();JsonParser p=jf.createParser(new StringReader(JSON));JsonNode result=objectMapper().readTree(p);assertTrue(result.isObject());assertEquals(4,result.size());assertNull(objectMapper().readTree(p));p.close();}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.testMultiple",0,"public void testMultiple()throws Exception {String JSON=""12  \""string\""[1,2,3 ]"";JsonFactory jf=new JsonFactory();JsonParser p=jf.createParser(new StringReader(JSON));final ObjectMapper mapper=objectMapper();JsonNode result=mapper.readTree(p);assertTrue(result.isIntegralNumber());assertTrue(result.isInt());assertFalse(result.isTextual());assertEquals(12,result.intValue());result=mapper.readTree(p);assertTrue(result.isTextual());assertFalse(result.isIntegralNumber());assertFalse(result.isInt());assertEquals(""string"",result.textValue());result=mapper.readTree(p);assertTrue(result.isArray());assertEquals(3,result.size());assertNull(mapper.readTree(p));p.close();}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.testNullFromEOFViaMapper",0,"public void testNullFromEOFViaMapper()throws Exception {final ObjectMapper mapper=objectMapper();assertNull(mapper.readTree(new StringReader("""")));assertNull(mapper.readTree(new ByteArrayInputStream(new byte[0])));}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.testNullFromEOFViaObjectReader",0,"public void testNullFromEOFViaObjectReader()throws Exception {final ObjectMapper mapper=objectMapper();assertNull(mapper.readTree(new StringReader("""")));assertNull(mapper.readTree(new ByteArrayInputStream(new byte[0])));assertNull(mapper.readerFor(JsonNode.class).readTree(new StringReader("""")));assertNull(mapper.readerFor(JsonNode.class).readTree(new ByteArrayInputStream(new byte[0])));}"
"com.fasterxml.jackson.databind.node.TreeReadViaMapperTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testSimpleAutoDetect",0,"public void testSimpleAutoDetect()throws Exception {ObjectMapper m=new ObjectMapper();SimpleFieldBean result=m.readValue(""{\""x\"" : -13 }"",SimpleFieldBean.class);assertEquals(-13,result.x);assertEquals(0,result.y);}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testSimpleAnnotation",0,"public void testSimpleAnnotation()throws Exception {ObjectMapper m=new ObjectMapper();SimpleFieldBean2 bean=m.readValue(""{\""values\"" :[\""x\"",\""y\""]}"",SimpleFieldBean2.class);String[]values=bean.values;assertNotNull(values);assertEquals(2,values.length);assertEquals(""x"",values[0]);assertEquals(""y"",values[1]);}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testNoAutoDetect",0,"public void testNoAutoDetect()throws Exception {ObjectMapper m=new ObjectMapper();NoAutoDetectBean bean=m.readValue(""{\""z\"" : 7 }"",NoAutoDetectBean.class);assertEquals(7,bean._z);}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testTypeAnnotation",0,"public void testTypeAnnotation()throws Exception {ObjectMapper m=new ObjectMapper();AbstractWrapper w=m.readValue(""{\""value\"" : \""abc\"" }"",AbstractWrapper.class);Abstract bean=w.value;assertNotNull(bean);assertEquals(Concrete.class,bean.getClass());assertEquals(""abc"",((Concrete)bean).value);}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testFailureDueToDups",0,"public void testFailureDueToDups()throws Exception {try {writeAndMap(new ObjectMapper(),new DupFieldBean());}catch(JsonMappingException e){verifyException(e,""Multiple fields representing property"");}}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testFailureDueToDups2",0,"public void testFailureDueToDups2()throws Exception {try {writeAndMap(new ObjectMapper(),new DupFieldBean2());}catch(JsonMappingException e){verifyException(e,""Multiple fields representing property"");}}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.testOkFieldOverride",0,"public void testOkFieldOverride()throws Exception {ObjectMapper m=new ObjectMapper();OkDupFieldBean result=m.readValue(""{\""x\"" : 1,\""y\"" : 2 }"",OkDupFieldBean.class);assertEquals(1,result.myX);assertEquals(2,result.y);}"
"com.fasterxml.jackson.databind.deser.TestFieldDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testUntypedArray",0,"public void testUntypedArray()throws Exception {String JSON=""[1,null,\""x\"",true,2.0 ]"";Object[]result=MAPPER.readValue(JSON,Object[].class);assertNotNull(result);assertEquals(5,result.length);assertEquals(Integer.valueOf(1),result[0]);assertNull(result[1]);assertEquals(""x"",result[2]);assertEquals(Boolean.TRUE,result[3]);assertEquals(Double.valueOf(2.0),result[4]);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testIntegerArray",0,"public void testIntegerArray()throws Exception {final int LEN=90000;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){if (i > 0){sb.append(',');}sb.append(i);}sb.append(']');Integer[]result=MAPPER.readValue(sb.toString(),Integer[].class);assertNotNull(result);assertEquals(LEN,result.length);for (int i=0;i < LEN;++i){assertEquals(i,result[i].intValue());}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testFromEmptyString",0,"public void testFromEmptyString()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);assertNull(m.readValue(quote(""""),Object[].class));assertNull(m.readValue(quote(""""),String[].class));assertNull(m.readValue(quote(""""),int[].class));}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testFromEmptyString2",0,"public void testFromEmptyString2()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);m.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,true);Product p=m.readValue(""{\""thelist\"":\""\""}"",Product.class);assertNotNull(p);assertNull(p.thelist);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testUntypedArrayOfArrays",0,"public void testUntypedArrayOfArrays()throws Exception {final String JSON=""[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"";Object result=MAPPER.readValue(JSON,Object.class);assertEquals(ArrayList.class,result.getClass());assertNotNull(result);Object[]array=MAPPER.readValue(JSON,Object[].class);assertNotNull(array);assertEquals(Object[].class,array.getClass());ObjectWrapper w=MAPPER.readValue(""{\""wrapped\"":"" + JSON + ""}"",ObjectWrapper.class);assertNotNull(w);assertNotNull(w.wrapped);assertEquals(ArrayList.class,w.wrapped.getClass());ObjectArrayWrapper aw=MAPPER.readValue(""{\""wrapped\"":"" + JSON + ""}"",ObjectArrayWrapper.class);assertNotNull(aw);assertNotNull(aw.wrapped);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testStringArray",0,"public void testStringArray()throws Exception {final String[]STRS=new String[]{""a"",""b"",""abcd"","""",""???"",""\""quoted\"""",""lf: \n""};StringWriter sw=new StringWriter();JsonGenerator jg=MAPPER.getFactory().createGenerator(sw);jg.writeStartArray();for(String str : STRS){jg.writeString(str);}jg.writeEndArray();jg.close();String[]result=MAPPER.readValue(sw.toString(),String[].class);assertNotNull(result);assertEquals(STRS.length,result.length);for (int i=0;i < STRS.length;++i){assertEquals(STRS[i],result[i]);}result=MAPPER.readValue(""[null ]"",String[].class);assertNotNull(result);assertEquals(1,result.length);assertNull(result[0]);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testCharArray",0,"public void testCharArray()throws Exception {final String TEST_STR=""Let's just test it? Ok!"";char[]result=MAPPER.readValue(""\"""" + TEST_STR + ""\"""",char[].class);assertEquals(TEST_STR,new String(result));result=MAPPER.readValue(""[\""a\"",\""b\"",\""c\""]"",char[].class);assertEquals(""abc"",new String(result));}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testBooleanArray",0,"public void testBooleanArray()throws Exception {boolean[]result=MAPPER.readValue(""[true,false,false ]"",boolean[].class);assertNotNull(result);assertEquals(3,result.length);assertTrue(result[0]);assertFalse(result[1]);assertFalse(result[2]);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArrayAsNumbers",0,"public void testByteArrayAsNumbers()throws Exception {final int LEN=37000;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){int value=i - 128;sb.append((value < 256)? value : (value & 0x7F));sb.append(',');}sb.append(""0]"");byte[]result=MAPPER.readValue(sb.toString(),byte[].class);assertNotNull(result);assertEquals(LEN + 1,result.length);for (int i=0;i < LEN;++i){int value=i - 128;byte exp=(byte)((value < 256)? value : (value & 0x7F));if (exp != result[i]){fail(""At offset #"" + i + "" (""+ result.length+ ""),expected ""+ exp+ "",got ""+ result[i]);}assertEquals(exp,result[i]);}assertEquals(0,result[LEN]);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArrayAsBase64",0,"public void testByteArrayAsBase64()throws Exception {JsonFactory jf=new JsonFactory();StringWriter sw=new StringWriter();int LEN=9000;byte[]TEST=new byte[LEN];for (int i=0;i < LEN;++i){TEST[i]=(byte)i;}JsonGenerator jg=jf.createGenerator(sw);jg.writeBinary(TEST);jg.close();String inputData=sw.toString();byte[]result=MAPPER.readValue(inputData,byte[].class);assertNotNull(result);assertArrayEquals(TEST,result);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArraysAsBase64",0,"/** * And then bit more challenging case;let's try decoding multiple byte arrays from an array...*/public void testByteArraysAsBase64()throws Exception {JsonFactory jf=new JsonFactory();StringWriter sw=new StringWriter(1000);final int entryCount=15;JsonGenerator jg=jf.createGenerator(sw);jg.writeStartArray();byte[][]entries=new byte[entryCount][];for (int i=0;i < entryCount;++i){byte[]b=new byte[1000 - i * 20];for (int x=0;x < b.length;++x){b[x]=(byte)(i + x);}entries[i]=b;jg.writeBinary(b);}jg.writeEndArray();jg.close();String inputData=sw.toString();byte[][]result=MAPPER.readValue(inputData,byte[][].class);assertNotNull(result);assertEquals(entryCount,result.length);for (int i=0;i < entryCount;++i){byte[]b=result[i];assertArrayEquals(""Comparing entry #"" + i + ""/""+ entryCount,entries[i],b);}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArraysWith763",0,"public void testByteArraysWith763()throws Exception {String[]input=new String[]{""YQ=="",""Yg=="",""Yw==""};byte[][]data=MAPPER.convertValue(input,byte[][].class);assertEquals(""a"",new String(data[0],""US-ASCII""));assertEquals(""b"",new String(data[1],""US-ASCII""));assertEquals(""c"",new String(data[2],""US-ASCII""));}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testShortArray",0,"public void testShortArray()throws Exception {final int LEN=31001;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){if (i > 0){sb.append(',');}sb.append(i);}sb.append(']');short[]result=MAPPER.readValue(sb.toString(),short[].class);assertNotNull(result);assertEquals(LEN,result.length);for (int i=0;i < LEN;++i){short exp=(short)i;assertEquals(exp,result[i]);}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testIntArray",0,"public void testIntArray()throws Exception {final int LEN=70000;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){if (i > 0){sb.append(',');}sb.append(-i);}sb.append(']');int[]result=MAPPER.readValue(sb.toString(),int[].class);assertNotNull(result);assertEquals(LEN,result.length);for (int i=0;i < LEN;++i){assertEquals(-i,result[i]);}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testLongArray",0,"public void testLongArray()throws Exception {final int LEN=12300;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){if (i > 0){sb.append(',');}sb.append(i);}sb.append(']');long[]result=MAPPER.readValue(sb.toString(),long[].class);assertNotNull(result);assertEquals(LEN,result.length);for (int i=0;i < LEN;++i){long exp=(long)i;assertEquals(exp,result[i]);}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testDoubleArray",0,"public void testDoubleArray()throws Exception {final int LEN=7000;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){if (i > 0){sb.append(',');}sb.append(i).append('.').append(i % 10);}sb.append(']');double[]result=MAPPER.readValue(sb.toString(),double[].class);assertNotNull(result);assertEquals(LEN,result.length);for (int i=0;i < LEN;++i){String expStr=String.valueOf(i)+ ""."" + String.valueOf(i % 10);String actStr=String.valueOf(result[i]);if (!expStr.equals(actStr)){fail(""Entry #"" + i + ""/""+ LEN+ "";exp '""+ expStr+ ""',got '""+ actStr+ ""'"");}}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testFloatArray",0,"public void testFloatArray()throws Exception {final int LEN=7000;StringBuilder sb=new StringBuilder();sb.append('[');for (int i=0;i < LEN;++i){if (i > 0){sb.append(',');}sb.append(i).append('.').append(i % 10);}sb.append(']');float[]result=MAPPER.readValue(sb.toString(),float[].class);assertNotNull(result);assertEquals(LEN,result.length);for (int i=0;i < LEN;++i){String expStr=String.valueOf(i)+ ""."" + String.valueOf(i % 10);assertEquals(expStr,String.valueOf(result[i]));}}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testBeanArray",0,"public void testBeanArray()throws Exception {List<Bean1> src=new ArrayList<Bean1>();List<Bean2> b2=new ArrayList<Bean2>();b2.add(new Bean2(""a""));b2.add(new Bean2(""foobar""));src.add(new Bean1(1,2,b2));b2=new ArrayList<Bean2>();b2.add(null);src.add(new Bean1(4,5,b2));StringWriter sw=new StringWriter();MAPPER.writeValue(sw,src);List<Bean1> result=MAPPER.readValue(sw.toString(),new TypeReference<List<Bean1>>(){});assertNotNull(result);assertEquals(src,result);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testByteArrayTypeOverride890",0,"public void testByteArrayTypeOverride890()throws Exception {HiddenBinaryBean890 result=MAPPER.readValue(aposToQuotes(""{'someBytes':'AQIDBA=='}""),HiddenBinaryBean890.class);assertNotNull(result);assertNotNull(result.someBytes);assertEquals(byte[].class,result.someBytes.getClass());}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.testCustomDeserializers",0,"public void testCustomDeserializers()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule testModule=new SimpleModule(""test"",Version.unknownVersion());testModule.addDeserializer(NonDeserializable[].class,new CustomNonDeserArrayDeserializer());mapper.registerModule(testModule);NonDeserializable[]result=mapper.readValue(""[\""a\""]"",NonDeserializable[].class);assertNotNull(result);assertEquals(1,result.length);assertEquals(""a"",result[0].value);}"
"com.fasterxml.jackson.databind.deser.TestArrayDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testSimpleNonArray",0,"public void testSimpleNonArray()throws Exception {StringWriter strw=new StringWriter();SequenceWriter w=WRITER.forType(Bean.class).writeValues(strw);w.write(new Bean(13)).write(new Bean(-6)).writeAll(new Bean[]{new Bean(3),new Bean(1)}).writeAll(Arrays.asList(new Bean(5),new Bean(7)));w.close();assertEquals(aposToQuotes(""{'a':13}\n{'a':-6}\n{'a':3}\n{'a':1}\n{'a':5}\n{'a':7}""),strw.toString());strw=new StringWriter();JsonGenerator gen=WRITER.getFactory().createGenerator(strw);w=WRITER.withRootValueSeparator(new SerializedString(""/"")).writeValues(gen);w.write(new Bean(1)).write(new Bean(2));w.close();gen.close();assertEquals(aposToQuotes(""{'a':1}/{'a':2}""),strw.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testSimpleArray",0,"public void testSimpleArray()throws Exception {StringWriter strw=new StringWriter();SequenceWriter w=WRITER.writeValuesAsArray(strw);w.write(new Bean(1)).write(new Bean(2)).writeAll(new Bean[]{new Bean(-7),new Bean(2)});w.close();assertEquals(aposToQuotes(""[{'a':1},{'a':2},{'a':-7},{'a':2}]""),strw.toString());strw=new StringWriter();JsonGenerator gen=WRITER.getFactory().createGenerator(strw);w=WRITER.writeValuesAsArray(gen);Collection<Bean> bean=Collections.singleton(new Bean(3));w.write(new Bean(1)).write(null).writeAll((Iterable<Bean>)bean);w.close();gen.close();assertEquals(aposToQuotes(""[{'a':1},null,{'a':3}]""),strw.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testPolymorphicNonArrayWithoutType",0,"@SuppressWarnings(""resource"")public void testPolymorphicNonArrayWithoutType()throws Exception {StringWriter strw=new StringWriter();SequenceWriter w=WRITER.writeValues(strw);w.write(new ImplA(3)).write(new ImplA(4)).close();assertEquals(aposToQuotes(""{'type':'A','value':3}\n{'type':'A','value':4}""),strw.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testPolymorphicArrayWithoutType",0,"@SuppressWarnings(""resource"")public void testPolymorphicArrayWithoutType()throws Exception {StringWriter strw=new StringWriter();SequenceWriter w=WRITER.writeValuesAsArray(strw);w.write(new ImplA(-1)).write(new ImplA(6)).close();assertEquals(aposToQuotes(""[{'type':'A','value':-1},{'type':'A','value':6}]""),strw.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testPolymorphicArrayWithType",0,"public void testPolymorphicArrayWithType()throws Exception {StringWriter strw=new StringWriter();SequenceWriter w=WRITER.forType(PolyBase.class).writeValuesAsArray(strw);w.write(new ImplA(-1)).write(new ImplB(3)).write(new ImplA(7));w.flush();w.close();assertEquals(aposToQuotes(""[{'type':'A','value':-1},{'type':'B','b':3},{'type':'A','value':7}]""),strw.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testSimpleCloseable",0,"@SuppressWarnings(""resource"")public void testSimpleCloseable()throws Exception {ObjectWriter w=MAPPER.writer().with(SerializationFeature.CLOSE_CLOSEABLE);CloseableValue input=new CloseableValue();assertFalse(input.closed);StringWriter out=new StringWriter();SequenceWriter seq=w.writeValues(out);input=new CloseableValue();assertFalse(input.closed);seq.write(input);assertTrue(input.closed);seq.close();input.close();assertEquals(aposToQuotes(""{'x':0,'closed':false}""),out.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.testWithExplicitType",0,"public void testWithExplicitType()throws Exception {ObjectWriter w=MAPPER.writer().without(SerializationFeature.FLUSH_AFTER_WRITE_VALUE).with(SerializationFeature.CLOSE_CLOSEABLE);StringWriter out=new StringWriter();SequenceWriter seq=w.writeValues(out);seq.write(new BareBaseExt());seq.write(new BareBaseExt(),MAPPER.constructType(BareBase.class));BareBaseCloseable cl=new BareBaseCloseable();seq.write(cl,MAPPER.constructType(BareBase.class));assertTrue(cl.closed);cl.close();seq.close();seq.flush();assertEquals(aposToQuotes(""{'a':1,'b':2}{'a':1}{'a':1}""),out.toString());}"
"com.fasterxml.jackson.databind.seq.SequenceWriterTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestTypeNames.testBaseTypeId1616",1,"public void testBaseTypeId1616()throws Exception {ObjectMapper mapper=new ObjectMapper();Collection<NamedType> subtypes=new StdSubtypeResolver().collectAndResolveSubtypesByTypeId(mapper.getDeserializationConfig(),null,mapper.constructType(Base1616.class));assertEquals(2,subtypes.size());Set<String> ok=new HashSet<>(Arrays.asList(""A"",""B""));for(NamedType type : subtypes){String id=type.getName();if (!ok.contains(id)){fail(""Unexpected id '"" + id + ""' (mapping to: ""+ type.getType()+ ""),should be one of: ""+ ok);}}}"
"com.fasterxml.jackson.databind.jsontype.TestTypeNames.testSerialization",0,"public void testSerialization()throws Exception {assertEquals(""[{\""doggy\"":{\""name\"":\""Spot\"",\""ageInYears\"":3}}]"",MAPPER.writeValueAsString(new Animal[]{new Dog(""Spot"",3)}));assertEquals(""[{\""MaineCoon\"":{\""name\"":\""Belzebub\"",\""purrs\"":true}}]"",MAPPER.writeValueAsString(new Animal[]{new MaineCoon(""Belzebub"",true)}));}"
"com.fasterxml.jackson.databind.jsontype.TestTypeNames.testRoundTrip",0,"public void testRoundTrip()throws Exception {Animal[]input=new Animal[]{new Dog(""Odie"",7),null,new MaineCoon(""Piru"",false),new Persian(""Khomeini"",true)};String json=MAPPER.writeValueAsString(input);List<Animal> output=MAPPER.readValue(json,TypeFactory.defaultInstance().constructCollectionType(ArrayList.class,Animal.class));assertEquals(input.length,output.size());for (int i=0,len=input.length;i < len;++i){assertEquals(""Entry #"" + i + "" differs,input = '""+ json+ ""'"",input[i],output.get(i));}}"
"com.fasterxml.jackson.databind.jsontype.TestTypeNames.testRoundTripMap",0,"public void testRoundTripMap()throws Exception {AnimalMap input=new AnimalMap();input.put(""venla"",new MaineCoon(""Venla"",true));input.put(""ama"",new Dog(""Amadeus"",13));String json=MAPPER.writeValueAsString(input);AnimalMap output=MAPPER.readValue(json,AnimalMap.class);assertNotNull(output);assertEquals(AnimalMap.class,output.getClass());assertEquals(input.size(),output.size());for(String name : input.keySet()){Animal in=input.get(name);Animal out=output.get(name);if (!in.equals(out)){fail(""Animal in input was ["" + in + ""];output not matching: [""+ out+ ""]"");}}}"
"com.fasterxml.jackson.databind.jsontype.TestTypeNames.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.testEnumMaps",0,"public void testEnumMaps()throws Exception {EnumMap<TestEnum,String> value=MAPPER.readValue(""{\""OK\"":\""value\""}"",new TypeReference<EnumMap<TestEnum,String>>(){});assertEquals(""value"",value.get(TestEnum.OK));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.testToStringEnumMaps",0,"public void testToStringEnumMaps()throws Exception {ObjectReader r=MAPPER.reader().with(DeserializationFeature.READ_ENUMS_USING_TO_STRING);EnumMap<LowerCaseEnum,String> value=r.forType(new TypeReference<EnumMap<LowerCaseEnum,String>>(){}).readValue(""{\""a\"":\""value\""}"");assertEquals(""value"",value.get(LowerCaseEnum.A));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.testCustomEnumMapWithDefaultCtor",0,"public void testCustomEnumMapWithDefaultCtor()throws Exception {MySimpleEnumMap map=MAPPER.readValue(aposToQuotes(""{'RULES':'waves'}""),MySimpleEnumMap.class);assertEquals(1,map.size());assertEquals(""waves"",map.get(TestEnum.RULES));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.testCustomEnumMapFromString",0,"public void testCustomEnumMapFromString()throws Exception {FromStringEnumMap map=MAPPER.readValue(quote(""kewl""),FromStringEnumMap.class);assertEquals(1,map.size());assertEquals(""kewl"",map.get(TestEnum.JACKSON));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.testCustomEnumMapWithDelegate",0,"public void testCustomEnumMapWithDelegate()throws Exception {FromDelegateEnumMap map=MAPPER.readValue(aposToQuotes(""{'foo':'bar'}""),FromDelegateEnumMap.class);assertEquals(1,map.size());assertEquals(""{foo=bar}"",map.get(TestEnum.OK));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumMapDeserializationTest.testCustomEnumMapFromProps",0,"public void testCustomEnumMapFromProps()throws Exception {FromPropertiesEnumMap map=MAPPER.readValue(aposToQuotes(""{'a':13,'RULES':'jackson','b':-731,'OK':'yes'}""),FromPropertiesEnumMap.class);assertEquals(13,map.a0);assertEquals(-731,map.b0);assertEquals(""jackson"",map.get(TestEnum.RULES));assertEquals(""yes"",map.get(TestEnum.OK));assertEquals(2,map.size());}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testNullXform",0,"public void testNullXform()throws Exception {assertNull(mapper.convertValue(null,Integer.class));assertNull(mapper.convertValue(null,String.class));assertNull(mapper.convertValue(null,byte[].class));}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testArrayIdentityTransforms",0,"/** * Tests to verify that primitive number arrays round-trip correctly,i.e. type -> type gives equal (although not necessarily same)output*/public void testArrayIdentityTransforms()throws Exception {verifyByteArrayConversion(bytes(),byte[].class);verifyShortArrayConversion(shorts(),short[].class);verifyIntArrayConversion(ints(),int[].class);verifyLongArrayConversion(longs(),long[].class);verifyFloatArrayConversion(floats(),float[].class);verifyDoubleArrayConversion(doubles(),float[].class);}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testByteArrayFrom",0,"public void testByteArrayFrom()throws Exception {byte[]data=_convert(""c3VyZS4="",byte[].class);byte[]exp=""sure."".getBytes(""Ascii"");verifyIntegralArrays(exp,data,exp.length);}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testShortArrayToX",0,"public void testShortArrayToX()throws Exception {short[]data=shorts();verifyShortArrayConversion(data,byte[].class);verifyShortArrayConversion(data,int[].class);verifyShortArrayConversion(data,long[].class);}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testIntArrayToX",0,"public void testIntArrayToX()throws Exception {int[]data=ints();verifyIntArrayConversion(data,byte[].class);verifyIntArrayConversion(data,short[].class);verifyIntArrayConversion(data,long[].class);List<Number> expNums=_numberList(data,data.length);List<Integer> actNums=mapper.convertValue(data,new TypeReference<List<Integer>>(){});assertEquals(expNums,actNums);}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testLongArrayToX",0,"public void testLongArrayToX()throws Exception {long[]data=longs();verifyLongArrayConversion(data,byte[].class);verifyLongArrayConversion(data,short[].class);verifyLongArrayConversion(data,int[].class);List<Number> expNums=_numberList(data,data.length);List<Long> actNums=mapper.convertValue(data,new TypeReference<List<Long>>(){});assertEquals(expNums,actNums);}"
"com.fasterxml.jackson.databind.convert.TestArrayConversions.testOverflows",0,"public void testOverflows(){try {mapper.convertValue(new int[]{1000},byte[].class);}catch(IllegalArgumentException e){verifyException(e,OVERFLOW_MSG_BYTE);}try {mapper.convertValue(new int[]{-99999},short[].class);}catch(IllegalArgumentException e){verifyException(e,OVERFLOW_MSG);}try {mapper.convertValue(new long[]{Long.MAX_VALUE},int[].class);}catch(IllegalArgumentException e){verifyException(e,OVERFLOW_MSG);}BigInteger biggie=BigInteger.valueOf(Long.MAX_VALUE);biggie.add(BigInteger.ONE);List<BigInteger> l=new ArrayList<BigInteger>();l.add(biggie);try {mapper.convertValue(l,int[].class);}catch(IllegalArgumentException e){verifyException(e,OVERFLOW_MSG);}}"
"com.fasterxml.jackson.databind.deser.jdk.MapRelatedTypesDeserTest.testMapEntrySimpleTypes",0,"public void testMapEntrySimpleTypes()throws Exception {List<Map.Entry<String,Long>> stuff=MAPPER.readValue(aposToQuotes(""[{'a':15},{'b':42}]""),new TypeReference<List<Map.Entry<String,Long>>>(){});assertNotNull(stuff);assertEquals(2,stuff.size());assertNotNull(stuff.get(1));assertEquals(""b"",stuff.get(1).getKey());assertEquals(Long.valueOf(42),stuff.get(1).getValue());}"
"com.fasterxml.jackson.databind.deser.jdk.MapRelatedTypesDeserTest.testMapEntryWithStringBean",0,"public void testMapEntryWithStringBean()throws Exception {List<Map.Entry<Integer,StringWrapper>> stuff=MAPPER.readValue(aposToQuotes(""[{'28':'Foo'},{'13':'Bar'}]""),new TypeReference<List<Map.Entry<Integer,StringWrapper>>>(){});assertNotNull(stuff);assertEquals(2,stuff.size());assertNotNull(stuff.get(1));assertEquals(Integer.valueOf(13),stuff.get(1).getKey());StringWrapper sw=stuff.get(1).getValue();assertEquals(""Bar"",sw.str);}"
"com.fasterxml.jackson.databind.deser.jdk.MapRelatedTypesDeserTest.testMapEntryFail",0,"public void testMapEntryFail()throws Exception {try {MAPPER.readValue(aposToQuotes(""[{'28':'Foo','13':'Bar'}]""),new TypeReference<List<Map.Entry<Integer,StringWrapper>>>(){});fail(""Should not have passed"");}catch(Exception e){verifyException(e,""more than one entry in JSON"");}}"
"com.fasterxml.jackson.databind.deser.jdk.MapRelatedTypesDeserTest.testReadProperties",0,"public void testReadProperties()throws Exception {Properties props=MAPPER.readValue(aposToQuotes(""{'a':'foo','b':123,'c':true}""),Properties.class);assertEquals(3,props.size());assertEquals(""foo"",props.getProperty(""a""));assertEquals(""123"",props.getProperty(""b""));assertEquals(""true"",props.getProperty(""c""));}"
"com.fasterxml.jackson.databind.deser.jdk.MapRelatedTypesDeserTest.testSingletonMapRoundtrip",0,"public void testSingletonMapRoundtrip()throws Exception {final TypeReference<?> type=new TypeReference<Map<String,IntWrapper>>(){};String json=MAPPER.writeValueAsString(Collections.singletonMap(""value"",new IntWrapper(5)));Map<String,IntWrapper> result=MAPPER.readValue(json,type);assertNotNull(result);assertEquals(1,result.size());IntWrapper w=result.get(""value"");assertNotNull(w);assertEquals(5,w.i);}"
"com.fasterxml.jackson.databind.deser.jdk.MapRelatedTypesDeserTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.NoClassDefFoundWorkaroundTest.testClassIsMissing",0,"public void testClassIsMissing(){}"
"com.fasterxml.jackson.databind.introspect.NoClassDefFoundWorkaroundTest.testDeserialize",0,"public void testDeserialize()throws Exception {ObjectMapper m=new ObjectMapper();Parent result=null;try {result=m.readValue(""{}"",Parent.class);}catch(Exception e){fail(""Should not have had issues,got: "" + e);}assertNotNull(result);}"
"com.fasterxml.jackson.databind.introspect.NoClassDefFoundWorkaroundTest.testUseMissingClass",0,"public void testUseMissingClass(){}"
"com.fasterxml.jackson.databind.introspect.NoClassDefFoundWorkaroundTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.TestRootName.testRootViaMapper",0,"public void testRootViaMapper()throws Exception {ObjectMapper mapper=rootMapper();String json=mapper.writeValueAsString(new Bean());assertEquals(""{\""rudy\"":{\""a\"":3}}"",json);Bean bean=mapper.readValue(json,Bean.class);assertNotNull(bean);json=mapper.writeValueAsString(new RootBeanWithEmpty());assertEquals(""{\""RootBeanWithEmpty\"":{\""a\"":2}}"",json);RootBeanWithEmpty bean2=mapper.readValue(json,RootBeanWithEmpty.class);assertNotNull(bean2);assertEquals(2,bean2.a);}"
"com.fasterxml.jackson.databind.TestRootName.testRootViaWriterAndReader",0,"public void testRootViaWriterAndReader()throws Exception {ObjectMapper mapper=rootMapper();String json=mapper.writer().writeValueAsString(new Bean());assertEquals(""{\""rudy\"":{\""a\"":3}}"",json);Bean bean=mapper.readerFor(Bean.class).readValue(json);assertNotNull(bean);}"
"com.fasterxml.jackson.databind.TestRootName.testReconfiguringOfWrapping",0,"public void testReconfiguringOfWrapping()throws Exception {ObjectMapper mapper=new ObjectMapper();final Bean input=new Bean();String jsonUnwrapped=mapper.writeValueAsString(input);assertEquals(""{\""a\"":3}"",jsonUnwrapped);String jsonWrapped=mapper.writer(SerializationFeature.WRAP_ROOT_VALUE).writeValueAsString(input);assertEquals(""{\""rudy\"":{\""a\"":3}}"",jsonWrapped);Bean result=mapper.readValue(jsonUnwrapped,Bean.class);assertNotNull(result);try {result=mapper.readerFor(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonUnwrapped);fail(""Should have failed"");}catch(JsonMappingException e){verifyException(e,""Root name 'a'"");}result=mapper.readerFor(Bean.class).with(DeserializationFeature.UNWRAP_ROOT_VALUE).readValue(jsonWrapped);assertNotNull(result);}"
"com.fasterxml.jackson.databind.TestRootName.testRootUsingExplicitConfig",0,"public void testRootUsingExplicitConfig()throws Exception {ObjectMapper mapper=new ObjectMapper();ObjectWriter writer=mapper.writer().withRootName(""wrapper"");String json=writer.writeValueAsString(new Bean());assertEquals(""{\""wrapper\"":{\""a\"":3}}"",json);ObjectReader reader=mapper.readerFor(Bean.class).withRootName(""wrapper"");Bean bean=reader.readValue(json);assertNotNull(bean);ObjectMapper wrapping=rootMapper();json=wrapping.writer().withRootName(""something"").writeValueAsString(new Bean());assertEquals(""{\""something\"":{\""a\"":3}}"",json);json=wrapping.writer().withRootName("""").writeValueAsString(new Bean());assertEquals(""{\""a\"":3}"",json);json=wrapping.writer().withoutRootName().writeValueAsString(new Bean());assertEquals(""{\""a\"":3}"",json);bean=wrapping.readerFor(Bean.class).withRootName("""").readValue(json);assertNotNull(bean);assertEquals(3,bean.a);bean=wrapping.readerFor(Bean.class).withoutRootName().readValue(""{\""a\"":4}"");assertNotNull(bean);assertEquals(4,bean.a);bean=wrapping.readerFor(Bean.class).readValue(""{\""rudy\"":{\""a\"":7}}"");assertNotNull(bean);assertEquals(7,bean.a);}"
"com.fasterxml.jackson.databind.TestRootName.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestStatics.testStaticFields",0,"public void testStaticFields()throws Exception {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new FieldBean());assertEquals(1,result.size());assertEquals(Integer.valueOf(1),result.get(""x""));}"
"com.fasterxml.jackson.databind.ser.TestStatics.testStaticMethods",0,"public void testStaticMethods()throws Exception {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new GetterBean());assertEquals(1,result.size());assertEquals(Integer.valueOf(3),result.get(""x""));}"
"com.fasterxml.jackson.databind.ser.TestStatics.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testClassAnnotationSimple",0,"public void testClassAnnotationSimple()throws Exception {String json=objectWriter().writeValueAsString(new ConvertingBean(1,2));assertEquals(""[1,2]"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testClassAnnotationForLists",0,"public void testClassAnnotationForLists()throws Exception {String json=objectWriter().writeValueAsString(new ConvertingBeanContainer(new ConvertingBean(1,2),new ConvertingBean(3,4)));assertEquals(""{\""values\"":[[1,2],[3,4]]}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testPropertyAnnotationSimple",0,"public void testPropertyAnnotationSimple()throws Exception {String json=objectWriter().writeValueAsString(new PointWrapper(3,4));assertEquals(""{\""value\"":[3,4]}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testPropertyAnnotationForArrays",0,"public void testPropertyAnnotationForArrays()throws Exception {String json=objectWriter().writeValueAsString(new PointListWrapperArray(4,5));assertEquals(""{\""values\"":[[4,5],[5,4]]}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testPropertyAnnotationForLists",0,"public void testPropertyAnnotationForLists()throws Exception {String json=objectWriter().writeValueAsString(new PointListWrapperList(7,8));assertEquals(""{\""values\"":[[7,8],[8,7]]}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testPropertyAnnotationForMaps",0,"public void testPropertyAnnotationForMaps()throws Exception {String json=objectWriter().writeValueAsString(new PointListWrapperMap(""a"",1,2));assertEquals(""{\""values\"":{\""a\"":[1,2]}}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testConverterForList357",0,"public void testConverterForList357()throws Exception {String json=objectWriter().writeValueAsString(new ListWrapper());assertEquals(""{\""list\"":[[\""Hello world!\""]]}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testIssue359",0,"public void testIssue359()throws Exception {String json=objectWriter().writeValueAsString(new Bean359());assertEquals(""{\""stuff\"":[\""Target\""]}"",json);}"
"com.fasterxml.jackson.databind.convert.TestConvertingSerializer.testIssue731",0,"public void testIssue731()throws Exception {String json=objectWriter().writeValueAsString(new ConvertingBeanWithUntypedConverter(1,2));assertEquals(""{\""a\"":2,\""b\"":4}"",json);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testAllPresent",0,"public void testAllPresent()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new BucketModule());Bucket allPresent=mapper.readValue(""{\""a\"":8,\""b\"":9,\""c\"":\""y\"",\""d\"":\""z\""}"",Bucket.class);assertEquals(8,allPresent.a);assertEquals(9,allPresent.b);assertEquals(""y"",allPresent.c);assertEquals(""z"",allPresent.d);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testAllAbsent",0,"public void testAllAbsent()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new BucketModule());Bucket allAbsent=mapper.readValue(""{}"",Bucket.class);assertEquals(Bucket.DEFAULT_A,allAbsent.a);assertEquals(Bucket.DEFAULT_B,allAbsent.b);assertEquals(Bucket.DEFAULT_C,allAbsent.c);assertEquals(Bucket.DEFAULT_D,allAbsent.d);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testMixedPresentAndAbsent",0,"public void testMixedPresentAndAbsent()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new BucketModule());Bucket aAbsent=mapper.readValue(""{\""b\"":9,\""c\"":\""y\"",\""d\"":\""z\""}"",Bucket.class);assertEquals(Bucket.DEFAULT_A,aAbsent.a);assertEquals(9,aAbsent.b);assertEquals(""y"",aAbsent.c);assertEquals(""z"",aAbsent.d);Bucket bAbsent=mapper.readValue(""{\""a\"":8,\""c\"":\""y\"",\""d\"":\""z\""}"",Bucket.class);assertEquals(8,bAbsent.a);assertEquals(Bucket.DEFAULT_B,bAbsent.b);assertEquals(""y"",bAbsent.c);assertEquals(""z"",bAbsent.d);Bucket cAbsent=mapper.readValue(""{\""a\"":8,\""b\"":9,\""d\"":\""z\""}"",Bucket.class);assertEquals(8,cAbsent.a);assertEquals(9,cAbsent.b);assertEquals(Bucket.DEFAULT_C,cAbsent.c);assertEquals(""z"",cAbsent.d);Bucket dAbsent=mapper.readValue(""{\""a\"":8,\""b\"":9,\""c\"":\""y\""}"",Bucket.class);assertEquals(8,dAbsent.a);assertEquals(9,dAbsent.b);assertEquals(""y"",dAbsent.c);assertEquals(Bucket.DEFAULT_D,dAbsent.d);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testPresentZeroPrimitive",0,"public void testPresentZeroPrimitive()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new BucketModule());Bucket aZeroRestAbsent=mapper.readValue(""{\""a\"":0}"",Bucket.class);assertEquals(0,aZeroRestAbsent.a);assertEquals(Bucket.DEFAULT_B,aZeroRestAbsent.b);assertEquals(Bucket.DEFAULT_C,aZeroRestAbsent.c);assertEquals(Bucket.DEFAULT_D,aZeroRestAbsent.d);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testPresentNullReference",0,"public void testPresentNullReference()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new BucketModule());Bucket cNullRestAbsent=mapper.readValue(""{\""c\"":null}"",Bucket.class);assertEquals(Bucket.DEFAULT_A,cNullRestAbsent.a);assertEquals(Bucket.DEFAULT_B,cNullRestAbsent.b);assertEquals(null,cNullRestAbsent.c);assertEquals(Bucket.DEFAULT_D,cNullRestAbsent.d);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testMoreThan32CreatorParams",0,"public void testMoreThan32CreatorParams()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new BucketModule());BigBucket big=mapper.readValue(""{\""i03\"":0,\""i11\"":1,\""s05\"":null,\""s08\"":\""x\""}"",BigBucket.class);assertEquals(BigBucket.DEFAULT_I,big.i01);assertEquals(BigBucket.DEFAULT_I,big.i02);assertEquals(0,big.i03);assertEquals(BigBucket.DEFAULT_I,big.i04);assertEquals(BigBucket.DEFAULT_I,big.i05);assertEquals(BigBucket.DEFAULT_I,big.i06);assertEquals(BigBucket.DEFAULT_I,big.i07);assertEquals(BigBucket.DEFAULT_I,big.i08);assertEquals(BigBucket.DEFAULT_I,big.i09);assertEquals(BigBucket.DEFAULT_I,big.i10);assertEquals(1,big.i11);assertEquals(BigBucket.DEFAULT_I,big.i12);assertEquals(BigBucket.DEFAULT_I,big.i13);assertEquals(BigBucket.DEFAULT_I,big.i14);assertEquals(BigBucket.DEFAULT_I,big.i15);assertEquals(BigBucket.DEFAULT_I,big.i16);assertEquals(BigBucket.DEFAULT_S,big.s01);assertEquals(BigBucket.DEFAULT_S,big.s02);assertEquals(BigBucket.DEFAULT_S,big.s03);assertEquals(BigBucket.DEFAULT_S,big.s04);assertEquals(null,big.s05);assertEquals(BigBucket.DEFAULT_S,big.s06);assertEquals(BigBucket.DEFAULT_S,big.s07);assertEquals(""x"",big.s08);assertEquals(BigBucket.DEFAULT_S,big.s09);assertEquals(BigBucket.DEFAULT_S,big.s10);assertEquals(BigBucket.DEFAULT_S,big.s11);assertEquals(BigBucket.DEFAULT_S,big.s12);assertEquals(BigBucket.DEFAULT_S,big.s13);assertEquals(BigBucket.DEFAULT_S,big.s14);assertEquals(BigBucket.DEFAULT_S,big.s15);assertEquals(BigBucket.DEFAULT_S,big.s16);}"
"com.fasterxml.jackson.databind.creators.TestCustomValueInstDefaults.testClassWith32CreatorParams",0,"public void testClassWith32CreatorParams()throws Exception {StringBuilder sb=new StringBuilder().append(""{\n"");for (int i=1;i <= 32;++i){sb.append(""\""p"").append(i).append(""\"" : \""NotNull"").append(i).append(""\"""");if (i < 32){sb.append("",\n"");}}sb.append(""\n}\n"");String json=sb.toString();ObjectMapper mapper=new ObjectMapper().registerModule(new ClassWith32Module());ClassWith32Props result=mapper.readValue(json,ClassWith32Props.class);assertEquals(""NotNull1"",result.p1);assertEquals(""NotNull2"",result.p2);assertEquals(""NotNull31"",result.p31);assertEquals(""NotNull32"",result.p32);}"
"com.fasterxml.jackson.databind.format.MapEntryFormatTest.testAsNaturalRoundtrip",0,"public void testAsNaturalRoundtrip()throws Exception {BeanWithMapEntry input=new BeanWithMapEntry(""foo"",""bar"");String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'entry':{'foo':'bar'}}""),json);BeanWithMapEntry result=MAPPER.readValue(json,BeanWithMapEntry.class);assertEquals(""foo"",result.entry.getKey());assertEquals(""bar"",result.entry.getValue());}"
"com.fasterxml.jackson.databind.format.MapEntryFormatTest.testAsObjectRoundtrip",0,"public void testAsObjectRoundtrip()throws Exception {MapEntryAsObject input=new MapEntryAsObject(""foo"",""bar"");String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'key':'foo','value':'bar'}""),json);MapEntryAsObject result=MAPPER.readValue(json,MapEntryAsObject.class);assertEquals(""foo"",result.getKey());assertEquals(""bar"",result.getValue());}"
"com.fasterxml.jackson.databind.format.MapEntryFormatTest.testInclusion",0,"public void testInclusion()throws Exception {assertEquals(aposToQuotes(""{'entry':{'a':'b'}}""),MAPPER.writeValueAsString(new EmptyEntryWrapper(""a"",""b"")));assertEquals(aposToQuotes(""{'entry':{'a':'b'}}""),MAPPER.writeValueAsString(new EntryWithDefaultWrapper(""a"",""b"")));assertEquals(aposToQuotes(""{'entry':{'a':'b'}}""),MAPPER.writeValueAsString(new EntryWithNullWrapper(""a"",""b"")));assertEquals(aposToQuotes(""{}""),MAPPER.writeValueAsString(new EmptyEntryWrapper(""a"","""")));assertEquals(aposToQuotes(""{}""),MAPPER.writeValueAsString(new EntryWithDefaultWrapper(""a"","""")));assertEquals(aposToQuotes(""{'entry':{'a':''}}""),MAPPER.writeValueAsString(new EntryWithNullWrapper(""a"","""")));assertEquals(aposToQuotes(""{}""),MAPPER.writeValueAsString(new EntryWithNullWrapper(""a"",null)));}"
"com.fasterxml.jackson.databind.format.MapEntryFormatTest.testInclusionWithReference",0,"public void testInclusionWithReference()throws Exception {assertEquals(aposToQuotes(""{'entry':{'a':'b'}}""),MAPPER.writeValueAsString(new EntryWithNonAbsentWrapper(""a"",""b"")));assertEquals(aposToQuotes(""{'entry':{'a':''}}""),MAPPER.writeValueAsString(new EntryWithNonAbsentWrapper(""a"","""")));assertEquals(aposToQuotes(""{}""),MAPPER.writeValueAsString(new EntryWithNonAbsentWrapper(""a"",null)));}"
"com.fasterxml.jackson.databind.format.MapEntryFormatTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.testValueAsStringWithoutDefaultTyping",0,"public void testValueAsStringWithoutDefaultTyping()throws Exception {Foo foo=new Foo(""baz"");String json=MAPPER.writeValueAsString(foo);JsonNode jsonNode=MAPPER.readTree(json);assertEquals(jsonNode.get(""bar"").textValue(),foo.bar);}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.testValueAsStringWithDefaultTyping",0,"public void testValueAsStringWithDefaultTyping()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);Foo foo=new Foo(""baz"");String json=mapper.writeValueAsString(foo);JsonNode jsonNode=mapper.readTree(json);assertEquals(jsonNode.get(""bar"").textValue(),foo.bar);}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.testReadTreeWithDefaultTyping",0,"public void testReadTreeWithDefaultTyping()throws Exception {final String CLASS=Foo.class.getName();final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);String json=""{\""@class\"":\"""" + CLASS + ""\"",\""bar\"":\""baz\""}"";JsonNode jsonNode=mapper.readTree(json);assertEquals(jsonNode.get(""bar"").textValue(),""baz"");}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.testValueToTreeWithoutDefaultTyping",0,"public void testValueToTreeWithoutDefaultTyping()throws Exception {Foo foo=new Foo(""baz"");JsonNode jsonNode=MAPPER.valueToTree(foo);assertEquals(jsonNode.get(""bar"").textValue(),foo.bar);}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.testValueToTreeWithDefaultTyping",0,"public void testValueToTreeWithDefaultTyping()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);Foo foo=new Foo(""baz"");JsonNode jsonNode=mapper.valueToTree(foo);assertEquals(jsonNode.get(""bar"").textValue(),foo.bar);}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.testIssue353",0,"public void testIssue353()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL,""@class"");SimpleModule testModule=new SimpleModule(""MyModule"",new Version(1,0,0,null,""TEST"",""TEST""));testModule.addDeserializer(SavedCookie.class,new SavedCookieDeserializer());mapper.registerModule(testModule);SavedCookie savedCookie=new SavedCookie(""key"",""v"");String json=mapper.writeValueAsString(savedCookie);SavedCookie out=mapper.readerFor(SavedCookie.class).readValue(json);assertEquals(""key"",out.name);assertEquals(""v"",out.value);}"
"com.fasterxml.jackson.databind.node.TestTreeWithType.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testBooleanPrimitive",0,"public void testBooleanPrimitive()throws Exception {BooleanBean result=MAPPER.readValue(""{\""v\"":true}"",BooleanBean.class);assertTrue(result._v);result=MAPPER.readValue(""{\""v\"":null}"",BooleanBean.class);assertNotNull(result);assertFalse(result._v);result=MAPPER.readValue(""{\""v\"":1}"",BooleanBean.class);assertNotNull(result);assertTrue(result._v);boolean[]array=MAPPER.readValue(""[null,false ]"",boolean[].class);assertNotNull(array);assertEquals(2,array.length);assertFalse(array[0]);assertFalse(array[1]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testBooleanWrapper",0,"/** * Simple unit test to verify that we can map boolean values to java.lang.Boolean.*/public void testBooleanWrapper()throws Exception {Boolean result=MAPPER.readValue(""true"",Boolean.class);assertEquals(Boolean.TRUE,result);result=MAPPER.readValue(""false"",Boolean.class);assertEquals(Boolean.FALSE,result);result=MAPPER.readValue(""0"",Boolean.class);assertEquals(Boolean.FALSE,result);result=MAPPER.readValue(""1"",Boolean.class);assertEquals(Boolean.TRUE,result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testLongToBoolean",0,"public void testLongToBoolean()throws Exception {long value=1L + Integer.MAX_VALUE;BooleanWrapper b=MAPPER.readValue(""{\""primitive\"" : "" + value + "",\""wrapper\"":""+ value+ "",\""ctor\"":""+ value+ ""}"",BooleanWrapper.class);assertEquals(Boolean.TRUE,b.wrapper);assertTrue(b.primitive);assertEquals(Boolean.TRUE,b.ctor);b=MAPPER.readValue(""{\""primitive\"" : 0,\""wrapper\"":0,\""ctor\"":0}"",BooleanWrapper.class);assertEquals(Boolean.FALSE,b.wrapper);assertFalse(b.primitive);assertEquals(Boolean.FALSE,b.ctor);boolean[]boo=MAPPER.readValue(""[0,15,\""\"",\""false\"",\""True\"" ]"",boolean[].class);assertEquals(5,boo.length);assertFalse(boo[0]);assertTrue(boo[1]);assertFalse(boo[2]);assertFalse(boo[3]);assertTrue(boo[4]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testByteWrapper",0,"public void testByteWrapper()throws Exception {Byte result=MAPPER.readValue(""   -42\t"",Byte.class);assertEquals(Byte.valueOf((byte)-42),result);result=MAPPER.readValue("" \""-12\"""",Byte.class);assertEquals(Byte.valueOf((byte)-12),result);result=MAPPER.readValue("" 39.07"",Byte.class);assertEquals(Byte.valueOf((byte)39),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testShortWrapper",0,"public void testShortWrapper()throws Exception {Short result=MAPPER.readValue(""37"",Short.class);assertEquals(Short.valueOf((short)37),result);result=MAPPER.readValue("" \""-1009\"""",Short.class);assertEquals(Short.valueOf((short)-1009),result);result=MAPPER.readValue(""-12.9"",Short.class);assertEquals(Short.valueOf((short)-12),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testCharacterWrapper",0,"public void testCharacterWrapper()throws Exception {Character result=MAPPER.readValue(""\""a\"""",Character.class);assertEquals(Character.valueOf('a'),result);result=MAPPER.readValue("" "" + ((int)'X'),Character.class);assertEquals(Character.valueOf('X'),result);final CharacterWrapperBean wrapper=MAPPER.readValue(""{\""v\"":null}"",CharacterWrapperBean.class);assertNotNull(wrapper);assertNull(wrapper.getV());final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);try {mapper.readValue(""{\""v\"":null}"",CharacterBean.class);fail(""Attempting to deserialize a 'null' JSON reference into a 'char' property did not throw an exception"");}catch(JsonMappingException e){verifyException(e,""can not map `null`"");}mapper.disable(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);final CharacterBean charBean=MAPPER.readValue(""{\""v\"":null}"",CharacterBean.class);assertNotNull(wrapper);assertEquals('\u0000',charBean.getV());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testIntWrapper",0,"public void testIntWrapper()throws Exception {Integer result=MAPPER.readValue(""   -42\t"",Integer.class);assertEquals(Integer.valueOf(-42),result);result=MAPPER.readValue("" \""-1200\"""",Integer.class);assertEquals(Integer.valueOf(-1200),result);result=MAPPER.readValue("" 39.07"",Integer.class);assertEquals(Integer.valueOf(39),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testIntPrimitive",0,"public void testIntPrimitive()throws Exception {IntBean result=MAPPER.readValue(""{\""v\"":3}"",IntBean.class);assertEquals(3,result._v);result=MAPPER.readValue(""{\""v\"":null}"",IntBean.class);assertNotNull(result);assertEquals(0,result._v);int[]array=MAPPER.readValue(""[null ]"",int[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(0,array[0]);final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);try {mapper.readValue(""{\""v\"":[3]}"",IntBean.class);fail(""Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled"");}catch(JsonMappingException exp){}mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);result=mapper.readValue(""{\""v\"":[3]}"",IntBean.class);assertEquals(3,result._v);result=mapper.readValue(""[{\""v\"":[3]}]"",IntBean.class);assertEquals(3,result._v);try {mapper.readValue(""[{\""v\"":[3,3]}]"",IntBean.class);fail(""Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled"");}catch(JsonMappingException exp){}result=mapper.readValue(""{\""v\"":[null]}"",IntBean.class);assertNotNull(result);assertEquals(0,result._v);array=mapper.readValue(""[[null]]"",int[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(0,array[0]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testLongWrapper",0,"public void testLongWrapper()throws Exception {Long result=MAPPER.readValue(""12345678901"",Long.class);assertEquals(Long.valueOf(12345678901L),result);result=MAPPER.readValue("" \""-9876\"""",Long.class);assertEquals(Long.valueOf(-9876),result);result=MAPPER.readValue(""1918.3"",Long.class);assertEquals(Long.valueOf(1918),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testLongPrimitive",0,"public void testLongPrimitive()throws Exception {LongBean result=MAPPER.readValue(""{\""v\"":3}"",LongBean.class);assertEquals(3,result._v);result=MAPPER.readValue(""{\""v\"":null}"",LongBean.class);assertNotNull(result);assertEquals(0,result._v);long[]array=MAPPER.readValue(""[null ]"",long[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(0,array[0]);final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);try {mapper.readValue(""{\""v\"":[3]}"",LongBean.class);fail(""Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled"");}catch(JsonMappingException exp){}mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);result=mapper.readValue(""{\""v\"":[3]}"",LongBean.class);assertEquals(3,result._v);result=mapper.readValue(""[{\""v\"":[3]}]"",LongBean.class);assertEquals(3,result._v);try {mapper.readValue(""[{\""v\"":[3,3]}]"",LongBean.class);fail(""Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled"");}catch(JsonMappingException exp){}result=mapper.readValue(""{\""v\"":[null]}"",LongBean.class);assertNotNull(result);assertEquals(0,result._v);array=mapper.readValue(""[[null]]"",long[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(0,array[0]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testIntWithOverride",0,"/** * Beyond simple case,let's also ensure that method overriding works as expected.*/public void testIntWithOverride()throws Exception {IntBean2 result=MAPPER.readValue(""{\""v\"":8}"",IntBean2.class);assertEquals(9,result._v);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testDoublePrimitive",0,"public void testDoublePrimitive()throws Exception {final double value=0.016;DoubleBean result=MAPPER.readValue(""{\""v\"":"" + value + ""}"",DoubleBean.class);assertEquals(value,result._v);result=MAPPER.readValue(""{\""v\"":null}"",DoubleBean.class);assertNotNull(result);assertEquals(0.0,result._v);double[]array=MAPPER.readValue(""[null ]"",double[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(0.0,array[0]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testFloatWrapper",0,"public void testFloatWrapper()throws Exception {String[]STRS=new String[]{""1.0"",""0.0"",""-0.3"",""0.7"",""42.012"",""-999.0"",NAN_STRING};for(String str : STRS){Float exp=Float.valueOf(str);Float result;if (NAN_STRING != str){result=MAPPER.readValue(str,Float.class);assertEquals(exp,result);}result=MAPPER.readValue("" \"""" + str + ""\"""",Float.class);assertEquals(exp,result);}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testDoubleWrapper",0,"public void testDoubleWrapper()throws Exception {String[]STRS=new String[]{""1.0"",""0.0"",""-0.3"",""0.7"",""42.012"",""-999.0"",NAN_STRING};for(String str : STRS){Double exp=Double.valueOf(str);Double result;if (NAN_STRING != str){result=MAPPER.readValue(str,Double.class);assertEquals(exp,result);}result=MAPPER.readValue("" \"""" + str + ""\"""",Double.class);assertEquals(exp,result);}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testDoubleAsArray",0,"public void testDoubleAsArray()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);final double value=0.016;try {mapper.readValue(""{\""v\"":["" + value + ""]}"",DoubleBean.class);fail(""Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled"");}catch(JsonMappingException exp){}mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);DoubleBean result=mapper.readValue(""{\""v\"":["" + value + ""]}"",DoubleBean.class);assertEquals(value,result._v);result=mapper.readValue(""[{\""v\"":["" + value + ""]}]"",DoubleBean.class);assertEquals(value,result._v);try {mapper.readValue(""[{\""v\"":["" + value + "",""+ value+ ""]}]"",DoubleBean.class);fail(""Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled"");}catch(JsonMappingException exp){}result=mapper.readValue(""{\""v\"":[null]}"",DoubleBean.class);assertNotNull(result);assertEquals(0d,result._v);double[]array=mapper.readValue(""[[null]]"",double[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(0d,array[0]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testDoublePrimitiveNonNumeric",0,"public void testDoublePrimitiveNonNumeric()throws Exception {double value=Double.POSITIVE_INFINITY;DoubleBean result=MAPPER.readValue(""{\""v\"":\"""" + value + ""\""}"",DoubleBean.class);assertEquals(value,result._v);double[]array=MAPPER.readValue(""[\""Infinity\"" ]"",double[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(Double.POSITIVE_INFINITY,array[0]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testFloatPrimitiveNonNumeric",0,"public void testFloatPrimitiveNonNumeric()throws Exception {float value=Float.POSITIVE_INFINITY;FloatBean result=MAPPER.readValue(""{\""v\"":\"""" + value + ""\""}"",FloatBean.class);assertEquals(value,result._v);float[]array=MAPPER.readValue(""[\""Infinity\"" ]"",float[].class);assertNotNull(array);assertEquals(1,array.length);assertEquals(Float.POSITIVE_INFINITY,array[0]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testEmptyToNullCoercionForPrimitives",0,"public void testEmptyToNullCoercionForPrimitives()throws Exception {_testEmptyToNullCoercion(int.class,Integer.valueOf(0));_testEmptyToNullCoercion(long.class,Long.valueOf(0));_testEmptyToNullCoercion(double.class,Double.valueOf(0.0));_testEmptyToNullCoercion(float.class,Float.valueOf(0.0f));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testBase64Variants",0,"public void testBase64Variants()throws Exception {final byte[]INPUT=""abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X"".getBytes(""UTF-8"");Assert.assertArrayEquals(INPUT,MAPPER.readValue(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA==""),byte[].class));ObjectReader reader=MAPPER.readerFor(byte[].class);Assert.assertArrayEquals(INPUT,(byte[])reader.with(Base64Variants.MIME_NO_LINEFEEDS).readValue(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="")));Assert.assertArrayEquals(INPUT,(byte[])reader.with(Base64Variants.MIME).readValue(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="")));Assert.assertArrayEquals(INPUT,(byte[])reader.with(Base64Variants.MODIFIED_FOR_URL).readValue(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"")));Assert.assertArrayEquals(INPUT,(byte[])reader.with(Base64Variants.PEM).readValue(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="")));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testSequenceOfInts",0,"/** * Then a unit test to verify that we can conveniently bind sequence of space-separate simple values*/public void testSequenceOfInts()throws Exception {final int NR_OF_INTS=100;StringBuilder sb=new StringBuilder();for (int i=0;i < NR_OF_INTS;++i){sb.append("" "");sb.append(i);}JsonParser jp=MAPPER.getFactory().createParser(sb.toString());for (int i=0;i < NR_OF_INTS;++i){Integer result=MAPPER.readValue(jp,Integer.class);assertEquals(Integer.valueOf(i),result);}jp.close();}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testEmptyStringForWrappers",0,"public void testEmptyStringForWrappers()throws IOException {WrappersBean bean;bean=MAPPER.readValue(""{\""booleanValue\"":\""\""}"",WrappersBean.class);assertNull(bean.booleanValue);bean=MAPPER.readValue(""{\""byteValue\"":\""\""}"",WrappersBean.class);assertNull(bean.byteValue);bean=MAPPER.readValue(""{\""charValue\"":\""\""}"",WrappersBean.class);assertNull(bean.charValue);bean=MAPPER.readValue(""{\""shortValue\"":\""\""}"",WrappersBean.class);assertNull(bean.shortValue);bean=MAPPER.readValue(""{\""intValue\"":\""\""}"",WrappersBean.class);assertNull(bean.intValue);bean=MAPPER.readValue(""{\""longValue\"":\""\""}"",WrappersBean.class);assertNull(bean.longValue);bean=MAPPER.readValue(""{\""floatValue\"":\""\""}"",WrappersBean.class);assertNull(bean.floatValue);bean=MAPPER.readValue(""{\""doubleValue\"":\""\""}"",WrappersBean.class);assertNull(bean.doubleValue);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testEmptyStringForPrimitives",0,"public void testEmptyStringForPrimitives()throws IOException {PrimitivesBean bean;bean=MAPPER.readValue(""{\""booleanValue\"":\""\""}"",PrimitivesBean.class);assertFalse(bean.booleanValue);bean=MAPPER.readValue(""{\""byteValue\"":\""\""}"",PrimitivesBean.class);assertEquals((byte)0,bean.byteValue);bean=MAPPER.readValue(""{\""charValue\"":\""\""}"",PrimitivesBean.class);assertEquals((char)0,bean.charValue);bean=MAPPER.readValue(""{\""shortValue\"":\""\""}"",PrimitivesBean.class);assertEquals((short)0,bean.shortValue);bean=MAPPER.readValue(""{\""intValue\"":\""\""}"",PrimitivesBean.class);assertEquals(0,bean.intValue);bean=MAPPER.readValue(""{\""longValue\"":\""\""}"",PrimitivesBean.class);assertEquals(0L,bean.longValue);bean=MAPPER.readValue(""{\""floatValue\"":\""\""}"",PrimitivesBean.class);assertEquals(0.0f,bean.floatValue);bean=MAPPER.readValue(""{\""doubleValue\"":\""\""}"",PrimitivesBean.class);assertEquals(0.0,bean.doubleValue);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testEmptyStringFailForPrimitives",0,"public void testEmptyStringFailForPrimitives()throws IOException {_verifyEmptyStringFailForPrimitives(""booleanValue"");_verifyEmptyStringFailForPrimitives(""byteValue"");_verifyEmptyStringFailForPrimitives(""charValue"");_verifyEmptyStringFailForPrimitives(""shortValue"");_verifyEmptyStringFailForPrimitives(""intValue"");_verifyEmptyStringFailForPrimitives(""longValue"");_verifyEmptyStringFailForPrimitives(""floatValue"");_verifyEmptyStringFailForPrimitives(""doubleValue"");}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testNullForPrimitives",0,"public void testNullForPrimitives()throws IOException {PrimitivesBean bean=MAPPER.readValue(""{\""intValue\"":null,\""booleanValue\"":null,\""doubleValue\"":null}"",PrimitivesBean.class);assertNotNull(bean);assertEquals(0,bean.intValue);assertEquals(false,bean.booleanValue);assertEquals(0.0,bean.doubleValue);bean=MAPPER.readValue(""{\""byteValue\"":null,\""longValue\"":null,\""floatValue\"":null}"",PrimitivesBean.class);assertNotNull(bean);assertEquals((byte)0,bean.byteValue);assertEquals(0L,bean.longValue);assertEquals(0.0f,bean.floatValue);final ObjectReader reader=MAPPER.readerFor(PrimitivesBean.class).with(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES);try {reader.readValue(""{\""booleanValue\"":null}"");fail(""Expected failure for boolean + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type boolean"");}try {reader.readValue(""{\""byteValue\"":null}"");fail(""Expected failure for byte + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type byte"");}try {reader.readValue(""{\""charValue\"":null}"");fail(""Expected failure for char + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type char"");}try {reader.readValue(""{\""shortValue\"":null}"");fail(""Expected failure for short + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type short"");}try {reader.readValue(""{\""intValue\"":null}"");fail(""Expected failure for int + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type int"");}try {reader.readValue(""{\""longValue\"":null}"");fail(""Expected failure for long + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type long"");}try {reader.readValue(""{\""floatValue\"":null}"");fail(""Expected failure for float + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type float"");}try {reader.readValue(""{\""doubleValue\"":null}"");fail(""Expected failure for double + null"");}catch(JsonMappingException e){verifyException(e,""Can not map `null` into type double"");}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testNullForPrimitiveArrays",0,"public void testNullForPrimitiveArrays()throws IOException {_testNullForPrimitiveArrays(boolean[].class,Boolean.FALSE);_testNullForPrimitiveArrays(byte[].class,Byte.valueOf((byte)0));_testNullForPrimitiveArrays(char[].class,Character.valueOf((char)0),false);_testNullForPrimitiveArrays(short[].class,Short.valueOf((short)0));_testNullForPrimitiveArrays(int[].class,Integer.valueOf(0));_testNullForPrimitiveArrays(long[].class,Long.valueOf(0L));_testNullForPrimitiveArrays(float[].class,Float.valueOf(0f));_testNullForPrimitiveArrays(double[].class,Double.valueOf(0d));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.testInvalidStringCoercionFail",0,"public void testInvalidStringCoercionFail()throws IOException {_testInvalidStringCoercionFail(boolean[].class);_testInvalidStringCoercionFail(byte[].class);_testInvalidStringCoercionFail(short[].class);_testInvalidStringCoercionFail(int[].class);_testInvalidStringCoercionFail(long[].class);_testInvalidStringCoercionFail(float[].class);_testInvalidStringCoercionFail(double[].class);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKScalarsTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestSerializerProvider.testFindExplicit",0,"public void testFindExplicit()throws JsonMappingException {ObjectMapper mapper=new ObjectMapper();SerializationConfig config=mapper.getSerializationConfig();SerializerFactory f=new BeanSerializerFactory(null);DefaultSerializerProvider prov=new DefaultSerializerProvider.Impl().createInstance(config,f);assertNotNull(prov.findKeySerializer(mapper.constructType(String.class),null));assertNotNull(prov.getDefaultNullKeySerializer());assertNotNull(prov.getDefaultNullValueSerializer());assertNotNull(prov.getUnknownTypeSerializer(getClass()));assertTrue(prov.createInstance(config,f).hasSerializerFor(String.class,null));assertTrue(prov.createInstance(config,f).hasSerializerFor(String.class,null));assertTrue(prov.createInstance(config,f).hasSerializerFor(MyBean.class,null));assertTrue(prov.createInstance(config,f).hasSerializerFor(MyBean.class,null));AtomicReference<Throwable> cause=new AtomicReference<Throwable>();assertFalse(prov.createInstance(config,f).hasSerializerFor(NoPropsBean.class,cause));Throwable t=cause.get();assertNull(t);}"
"com.fasterxml.jackson.databind.ser.jdk.UntypedSerializationTest.testFromArray",0,"public void testFromArray()throws Exception {ArrayList<Object> doc=new ArrayList<Object>();doc.add(""Elem1"");doc.add(Integer.valueOf(3));Map<String,Object> struct=new LinkedHashMap<String,Object>();struct.put(""first"",Boolean.TRUE);struct.put(""Second"",new ArrayList<Object>());doc.add(struct);doc.add(Boolean.FALSE);ObjectMapper mapper=new ObjectMapper();JsonFactory f=new JsonFactory();for (int i=0;i < 3;++i){String str=mapper.writeValueAsString(doc);JsonParser jp=f.createParser(str);assertEquals(JsonToken.START_ARRAY,jp.nextToken());assertEquals(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""Elem1"",getAndVerifyText(jp));assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(3,jp.getIntValue());assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""first"",getAndVerifyText(jp));assertEquals(JsonToken.VALUE_TRUE,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""Second"",getAndVerifyText(jp));if (jp.nextToken()!= JsonToken.START_ARRAY){fail(""Expected START_ARRAY: JSON == '"" + str + ""'"");}assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertEquals(JsonToken.END_OBJECT,jp.nextToken());assertEquals(JsonToken.VALUE_FALSE,jp.nextToken());assertEquals(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.databind.ser.jdk.UntypedSerializationTest.testFromMap",0,"public void testFromMap()throws Exception {LinkedHashMap<String,Object> doc=new LinkedHashMap<String,Object>();JsonFactory f=new JsonFactory();doc.put(""a1"",""\""text\"""");doc.put(""int"",Integer.valueOf(137));doc.put(""foo bar"",Long.valueOf(1234567890L));ObjectMapper mapper=new ObjectMapper();for (int i=0;i < 3;++i){String str=mapper.writeValueAsString(doc);JsonParser jp=f.createParser(str);assertEquals(JsonToken.START_OBJECT,jp.nextToken());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""a1"",getAndVerifyText(jp));assertEquals(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""\""text\"""",getAndVerifyText(jp));assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""int"",getAndVerifyText(jp));assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(137,jp.getIntValue());assertEquals(JsonToken.FIELD_NAME,jp.nextToken());assertEquals(""foo bar"",getAndVerifyText(jp));assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(1234567890L,jp.getLongValue());assertEquals(JsonToken.END_OBJECT,jp.nextToken());assertNull(jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.databind.ser.jdk.UntypedSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithViewTest.testSimpleViews",0,"public void testSimpleViews()throws Exception {final String json=aposToQuotes(""{'x':5,'y':10}"");ValueClassXY resultX=MAPPER.readerFor(ValueClassXY.class).withView(ViewX.class).readValue(json);assertEquals(6,resultX._x);assertEquals(1,resultX._y);ValueClassXY resultY=MAPPER.readerFor(ValueClassXY.class).withView(ViewY.class).readValue(json);assertEquals(1,resultY._x);assertEquals(11,resultY._y);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithViewTest.testCreatorViews",0,"public void testCreatorViews()throws Exception {final String json=aposToQuotes(""{'x':5,'y':10,'bogus':false}"");CreatorValueXY resultX=MAPPER.readerFor(CreatorValueXY.class).withView(ViewX.class).readValue(json);assertEquals(5,resultX._x);assertEquals(0,resultX._y);CreatorValueXY resultY=MAPPER.readerFor(CreatorValueXY.class).withView(ViewY.class).readValue(json);assertEquals(0,resultY._x);assertEquals(10,resultY._y);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithViewTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithSameName647.testUnwrappedWithSamePropertyName",0,"public void testUnwrappedWithSamePropertyName()throws Exception {final String JSON=""{'mail': {'mail': 'the mail text'}}"";UnwrappedWithSamePropertyName result=MAPPER.readValue(aposToQuotes(JSON),UnwrappedWithSamePropertyName.class);assertNotNull(result.mail);assertNotNull(result.mail.mail);assertEquals(""the mail text"",result.mail.mail.mail);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithSameName647.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.cfg.SerConfigTest.testSerConfig",0,"public void testSerConfig()throws Exception {SerializationConfig config=MAPPER.getSerializationConfig();assertTrue(config.hasSerializationFeatures(SerializationFeature.FAIL_ON_EMPTY_BEANS.getMask()));assertFalse(config.hasSerializationFeatures(SerializationFeature.CLOSE_CLOSEABLE.getMask()));assertEquals(JsonInclude.Value.empty(),config.getDefaultPropertyInclusion());assertEquals(JsonInclude.Value.empty(),config.getDefaultPropertyInclusion(String.class));assertFalse(config.useRootWrapping());assertSame(config,config.without());assertSame(config,config.with());assertSame(config,config.with(MAPPER.getSubtypeResolver()));SerializationConfig newConfig=config.with(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES,true);assertNotSame(config,newConfig);config=newConfig;assertSame(config,config.with(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));assertNotSame(config,config.with(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES,false));assertNotSame(config,config.with(SerializationFeature.INDENT_OUTPUT,SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS));assertSame(config,config.withRootName((PropertyName)null));newConfig=config.withRootName(PropertyName.construct(""foobar""));assertNotSame(config,newConfig);assertTrue(newConfig.useRootWrapping());assertSame(config,config.with(config.getAttributes()));assertNotSame(config,config.with(new ContextAttributes.Impl(Collections.singletonMap(""a"",""b""))));assertNotNull(config.introspectDirectClassAnnotations(getClass()));}"
"com.fasterxml.jackson.databind.cfg.SerConfigTest.testGeneratorFeatures",0,"public void testGeneratorFeatures()throws Exception {SerializationConfig config=MAPPER.getSerializationConfig();JsonFactory f=MAPPER.getFactory();assertFalse(config.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII,f));assertNotSame(config,config.with(JsonGenerator.Feature.ESCAPE_NON_ASCII));SerializationConfig newConfig=config.withFeatures(JsonGenerator.Feature.ESCAPE_NON_ASCII,JsonGenerator.Feature.IGNORE_UNKNOWN);assertNotSame(config,newConfig);assertTrue(newConfig.isEnabled(JsonGenerator.Feature.ESCAPE_NON_ASCII,f));assertNotSame(config,config.without(JsonGenerator.Feature.ESCAPE_NON_ASCII));assertNotSame(config,config.withoutFeatures(JsonGenerator.Feature.ESCAPE_NON_ASCII,JsonGenerator.Feature.IGNORE_UNKNOWN));}"
"com.fasterxml.jackson.databind.cfg.SerConfigTest.testFormatFeatures",0,"public void testFormatFeatures()throws Exception {SerializationConfig config=MAPPER.getSerializationConfig();assertNotSame(config,config.with(BogusFormatFeature.FF_DISABLED_BY_DEFAULT));assertNotSame(config,config.withFeatures(BogusFormatFeature.FF_DISABLED_BY_DEFAULT,BogusFormatFeature.FF_ENABLED_BY_DEFAULT));assertNotSame(config,config.without(BogusFormatFeature.FF_ENABLED_BY_DEFAULT));assertNotSame(config,config.withoutFeatures(BogusFormatFeature.FF_DISABLED_BY_DEFAULT,BogusFormatFeature.FF_ENABLED_BY_DEFAULT));}"
"com.fasterxml.jackson.databind.cfg.SerConfigTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest.testSuccessfulDeserializationOfObjectWithChainedArrayCreators",0,"public void testSuccessfulDeserializationOfObjectWithChainedArrayCreators()throws IOException {Bean1421A result=MAPPER.readValue(JSON,Bean1421A.class);assertNotNull(result);}"
"com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest.testWithSingleString",0,"public void testWithSingleString()throws Exception {Bean1421B<List<String>> a=MAPPER.readValue(quote(""test2""),new TypeReference<Bean1421B<List<String>>>(){});List<String> expected=new ArrayList<>();expected.add(""test2"");assertEquals(expected,a.value);}"
"com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest.testPrimitives",0,"public void testPrimitives()throws Exception {int[]i=MAPPER.readValue(""16"",int[].class);assertEquals(1,i.length);assertEquals(16,i[0]);long[]l=MAPPER.readValue(""1234"",long[].class);assertEquals(1,l.length);assertEquals(1234L,l[0]);double[]d=MAPPER.readValue(""12.5"",double[].class);assertEquals(1,d.length);assertEquals(12.5,d[0]);boolean[]b=MAPPER.readValue(""true"",boolean[].class);assertEquals(1,d.length);assertEquals(true,b[0]);}"
"com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.InnerClassCreatorTest.testIssue1501",0,"public void testIssue1501()throws Exception {String ser=MAPPER.writeValueAsString(new Something1501(false));try {MAPPER.readValue(ser,Something1501.class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not construct instance"");verifyException(e,""InnerSomething1501"");verifyException(e,""can only instantiate non-static inner class by using default"");}}"
"com.fasterxml.jackson.databind.creators.InnerClassCreatorTest.testIssue1502",0,"public void testIssue1502()throws Exception {String ser=MAPPER.writeValueAsString(new Something1502(null));try {MAPPER.readValue(ser,Something1502.class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not construct instance"");verifyException(e,""InnerSomething1502"");verifyException(e,""can only instantiate non-static inner class by using default"");}}"
"com.fasterxml.jackson.databind.creators.InnerClassCreatorTest.testIssue1503",0,"public void testIssue1503()throws Exception {String ser=MAPPER.writeValueAsString(new Outer1503());Outer1503 result=MAPPER.readValue(ser,Outer1503.class);assertNotNull(result);}"
"com.fasterxml.jackson.databind.creators.InnerClassCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.ISO8601DateFormatTest.testFormat",0,"public void testFormat(){String result=df.format(date);assertEquals(""2007-08-13T19:51:23Z"",result);}"
"com.fasterxml.jackson.databind.util.ISO8601DateFormatTest.testParse",0,"public void testParse()throws Exception {Date result=df.parse(""2007-08-13T19:51:23Z"");assertEquals(date,result);Date dateOnly=df.parse(""2007-08-14"");Calendar cal=new GregorianCalendar(2007,8 - 1,14);assertEquals(cal.getTime(),dateOnly);dateOnly=df.parse(""2007-08-14Z"");cal=new GregorianCalendar(2007,8 - 1,14);cal.setTimeZone(TimeZone.getTimeZone(""GMT""));assertEquals(cal.getTime(),dateOnly);}"
"com.fasterxml.jackson.databind.util.ISO8601DateFormatTest.testPartialParse",0,"public void testPartialParse()throws Exception {java.text.ParsePosition pos=new java.text.ParsePosition(0);String timestamp=""2007-08-13T19:51:23Z"";Date result=df.parse(timestamp + ""hello"",pos);assertEquals(date,result);assertEquals(timestamp.length(),pos.getIndex());}"
"com.fasterxml.jackson.databind.util.ISO8601DateFormatTest.testCloneObject",0,"public void testCloneObject()throws Exception {DateFormat clone=(DateFormat)df.clone();assertSame(df,clone);}"
"com.fasterxml.jackson.databind.util.ISO8601DateFormatTest.testHashCodeEquals",0,"public void testHashCodeEquals()throws Exception {DateFormat defaultDF=StdDateFormat.instance;defaultDF.hashCode();assertTrue(defaultDF.equals(defaultDF));}"
"com.fasterxml.jackson.databind.util.ISO8601DateFormatTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.PojoAsArray646Test.testWithCustomTypeId",0,"public void testWithCustomTypeId()throws Exception {List<TheItem.NestedItem> nestedList=new ArrayList<TheItem.NestedItem>();nestedList.add(new TheItem.NestedItem(""foo1""));nestedList.add(new TheItem.NestedItem(""foo2""));TheItem item=new TheItem(""first"",false,nestedList);Outer outer=new Outer();outer.getAttributes().put(""entry1"",item);String json=MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(outer);Outer result=MAPPER.readValue(json,Outer.class);assertNotNull(result);assertNotNull(result.attributes);assertEquals(1,result.attributes.size());}"
"com.fasterxml.jackson.databind.struct.PojoAsArray646Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testGlobal",0,"public void testGlobal()throws IOException {Map<String,Object> result=writeAndMap(MAPPER,new SimpleBean());assertEquals(2,result.size());assertEquals(""a"",result.get(""a""));assertNull(result.get(""b""));assertTrue(result.containsKey(""b""));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testNonNullByClass",0,"public void testNonNullByClass()throws IOException {Map<String,Object> result=writeAndMap(MAPPER,new NoNullsBean());assertEquals(1,result.size());assertFalse(result.containsKey(""a""));assertNull(result.get(""a""));assertTrue(result.containsKey(""b""));assertNull(result.get(""b""));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testNonDefaultByClass",0,"public void testNonDefaultByClass()throws IOException {NonDefaultBean bean=new NonDefaultBean();bean._a=""notA"";Map<String,Object> result=writeAndMap(MAPPER,bean);assertEquals(1,result.size());assertTrue(result.containsKey(""a""));assertEquals(""notA"",result.get(""a""));assertFalse(result.containsKey(""b""));assertNull(result.get(""b""));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testNonDefaultByClassNoCtor",0,"public void testNonDefaultByClassNoCtor()throws IOException {NonDefaultBeanXYZ bean=new NonDefaultBeanXYZ(1,2,0);String json=MAPPER.writeValueAsString(bean);assertEquals(aposToQuotes(""{'x':1,'y':2}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testMixedMethod",0,"public void testMixedMethod()throws IOException {MixedBean bean=new MixedBean();bean._a=""xyz"";bean._b=null;Map<String,Object> result=writeAndMap(MAPPER,bean);assertEquals(1,result.size());assertEquals(""xyz"",result.get(""a""));assertFalse(result.containsKey(""b""));bean._a=""a"";bean._b=""b"";result=writeAndMap(MAPPER,bean);assertEquals(1,result.size());assertEquals(""b"",result.get(""b""));assertFalse(result.containsKey(""a""));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testDefaultForEmptyList",0,"public void testDefaultForEmptyList()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new ListBean()));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testNonEmptyDefaultArray",0,"public void testNonEmptyDefaultArray()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new ArrayBean()));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testDefaultForIntegers",0,"public void testDefaultForIntegers()throws IOException {assertEquals(""{}"",MAPPER.writeValueAsString(new DefaultIntBean(0,Integer.valueOf(0))));assertEquals(""{\""i2\"":1}"",MAPPER.writeValueAsString(new DefaultIntBean(0,Integer.valueOf(1))));assertEquals(""{\""i1\"":3}"",MAPPER.writeValueAsString(new DefaultIntBean(3,Integer.valueOf(0))));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testEmptyInclusionScalars",0,"public void testEmptyInclusionScalars()throws IOException {ObjectMapper defMapper=MAPPER;ObjectMapper inclMapper=new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);StringWrapper str=new StringWrapper("""");assertEquals(""{\""str\"":\""\""}"",defMapper.writeValueAsString(str));assertEquals(""{}"",inclMapper.writeValueAsString(str));assertEquals(""{}"",inclMapper.writeValueAsString(new StringWrapper()));assertEquals(""{\""value\"":\""x\""}"",defMapper.writeValueAsString(new NonEmptyString(""x"")));assertEquals(""{}"",defMapper.writeValueAsString(new NonEmptyString("""")));assertEquals(""{\""value\"":12}"",defMapper.writeValueAsString(new NonEmptyInt(12)));assertEquals(""{\""value\"":0}"",defMapper.writeValueAsString(new NonEmptyInt(0)));assertEquals(""{\""value\"":1.25}"",defMapper.writeValueAsString(new NonEmptyDouble(1.25)));assertEquals(""{\""value\"":0.0}"",defMapper.writeValueAsString(new NonEmptyDouble(0.0)));IntWrapper zero=new IntWrapper(0);assertEquals(""{\""i\"":0}"",defMapper.writeValueAsString(zero));assertEquals(""{\""i\"":0}"",inclMapper.writeValueAsString(zero));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testPropConfigOverridesForInclude",0,"public void testPropConfigOverridesForInclude()throws IOException {EmptyListMapBean empty=new EmptyListMapBean();assertEquals(aposToQuotes(""{'list':[],'map':{}}""),MAPPER.writeValueAsString(empty));ObjectMapper mapper;mapper=new ObjectMapper();mapper.configOverride(Map.class).setInclude(JsonInclude.Value.construct(JsonInclude.Include.NON_EMPTY,null));assertEquals(aposToQuotes(""{'list':[]}""),mapper.writeValueAsString(empty));mapper=new ObjectMapper();mapper.configOverride(List.class).setInclude(JsonInclude.Value.construct(JsonInclude.Include.NON_EMPTY,null));assertEquals(aposToQuotes(""{'map':{}}""),mapper.writeValueAsString(empty));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testIssue1351",0,"public void testIssue1351()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);assertEquals(aposToQuotes(""{}""),mapper.writeValueAsString(new Issue1351Bean(null,(double)0)));assertEquals(aposToQuotes(""{}""),mapper.writeValueAsString(new Issue1351NonBean(0)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testInclusionOfDate",0,"public void testInclusionOfDate()throws Exception {final Date input=new Date(0L);assertEquals(aposToQuotes(""{'value':0}""),MAPPER.writeValueAsString(new NonEmptyDate(input)));assertEquals(""{}"",MAPPER.writeValueAsString(new NonDefaultDate(input)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.testInclusionOfCalendar",0,"public void testInclusionOfCalendar()throws Exception {final Calendar input=new GregorianCalendar();input.setTimeInMillis(0L);assertEquals(aposToQuotes(""{'value':0}""),MAPPER.writeValueAsString(new NonEmptyCalendar(input)));assertEquals(""{}"",MAPPER.writeValueAsString(new NonDefaultCalendar(input)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.MultiArgConstructorTest.testMultiArgVisible",0,"public void testMultiArgVisible()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector());MultiArgCtorBean bean=mapper.readValue(aposToQuotes(""{'b':13,'c':2,'a':-99}""),MultiArgCtorBean.class);assertNotNull(bean);assertEquals(13,bean._b);assertEquals(-99,bean._a);assertEquals(2,bean.c);}"
"com.fasterxml.jackson.databind.creators.MultiArgConstructorTest.testMultiArgWithPartialOverride",0,"public void testMultiArgWithPartialOverride()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector());MultiArgCtorBeanWithAnnotations bean=mapper.readValue(aposToQuotes(""{'b2':7,'c':222,'a':-99}""),MultiArgCtorBeanWithAnnotations.class);assertNotNull(bean);assertEquals(7,bean._b);assertEquals(-99,bean._a);assertEquals(222,bean.c);}"
"com.fasterxml.jackson.databind.creators.MultiArgConstructorTest.testMultiArgNotVisible",0,"public void testMultiArgNotVisible()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector());mapper.setDefaultVisibility(JsonAutoDetect.Value.noOverrides().withCreatorVisibility(Visibility.NONE));try {mapper.readValue(aposToQuotes(""{'b':13,'a':-99}""),MultiArgCtorBean.class);fail(""Should not have passed"");}catch(InvalidDefinitionException e){verifyException(e,""no Creators"");}}"
"com.fasterxml.jackson.databind.creators.MultiArgConstructorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestConcurrency.testDeserializerResolution",0,"public void testDeserializerResolution()throws Exception {final String JSON=""{\""value\"":42}"";for (int i=0;i < 5;++i){final ObjectMapper mapper=new ObjectMapper();Runnable r=new Runnable(){@Override public void run(){try {mapper.readValue(JSON,Bean.class);}catch(Exception e){}}};Thread t=new Thread(r);t.start();Thread.sleep(10L);Bean b=mapper.readValue(JSON,Bean.class);assertEquals(13,b.value);t.join();}}"
"com.fasterxml.jackson.databind.deser.TestConcurrency.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.DateAdjustment204Test.testContextTimezone",0,"public void testContextTimezone()throws Exception {String inputStr=""1997-07-16T19:20:30.45+0100"";assertTrue(MAPPER.isEnabled(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE));final ObjectReader r=MAPPER.readerFor(Calendar.class).with(TimeZone.getTimeZone(""PST""));Calendar cal=r.readValue(quote(inputStr));TimeZone tz=cal.getTimeZone();assertEquals(""PST"",tz.getID());assertEquals(1997,cal.get(Calendar.YEAR));assertEquals(Calendar.JULY,cal.get(Calendar.MONTH));assertEquals(16,cal.get(Calendar.DAY_OF_MONTH));assertEquals(11,cal.get(Calendar.HOUR_OF_DAY));assertEquals(20,cal.get(Calendar.MINUTE));assertEquals(30,cal.get(Calendar.SECOND));cal=r.without(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE).readValue(quote(inputStr));}"
"com.fasterxml.jackson.databind.deser.jdk.DateAdjustment204Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestConstructFromMap.testViaConstructor",0,"public void testViaConstructor()throws Exception {ObjectMapper m=new ObjectMapper();ConstructorFromMap result=m.readValue(""{\""x\"":1,\""y\"" : \""abc\"" }"",ConstructorFromMap.class);assertEquals(1,result._x);assertEquals(""abc"",result._y);}"
"com.fasterxml.jackson.databind.creators.TestConstructFromMap.testViaFactory",0,"public void testViaFactory()throws Exception {ObjectMapper m=new ObjectMapper();FactoryFromPoint result=m.readValue(""{\""x\"" : 3,\""y\"" : 4 }"",FactoryFromPoint.class);assertEquals(3,result._x);assertEquals(4,result._y);}"
"com.fasterxml.jackson.databind.creators.TestConstructFromMap.testViaFactoryUsingString",0,"public void testViaFactoryUsingString()throws Exception {ObjectMapper m=new ObjectMapper();FactoryFromDecimalString result=m.readValue(""\""12.57\"""",FactoryFromDecimalString.class);assertNotNull(result);assertEquals(12,result._value);}"
"com.fasterxml.jackson.databind.creators.TestConstructFromMap.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestConfig.testEnumIndexes",0,"public void testEnumIndexes(){int max=0;for(SerializationFeature f : SerializationFeature.values()){max=Math.max(max,f.ordinal());}if (max >= 31){fail(""Max number of SerializationFeature enums reached: "" + max);}}"
"com.fasterxml.jackson.databind.ser.TestConfig.testDefaults",0,"public void testDefaults(){SerializationConfig cfg=MAPPER.getSerializationConfig();assertTrue(cfg.isEnabled(MapperFeature.USE_ANNOTATIONS));assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));assertTrue(cfg.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS));assertTrue(cfg.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS));assertFalse(cfg.isEnabled(SerializationFeature.INDENT_OUTPUT));assertFalse(cfg.isEnabled(MapperFeature.USE_STATIC_TYPING));assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS));assertTrue(cfg.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS));assertTrue(cfg.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION));}"
"com.fasterxml.jackson.databind.ser.TestConfig.testOverrideIntrospectors",0,"public void testOverrideIntrospectors(){SerializationConfig cfg=MAPPER.getSerializationConfig();cfg=cfg.with((ClassIntrospector)null);cfg=cfg.with((AnnotationIntrospector)null);assertNull(cfg.getAnnotationIntrospector());}"
"com.fasterxml.jackson.databind.ser.TestConfig.testMisc",0,"public void testMisc(){ObjectMapper m=new ObjectMapper();m.setDateFormat(null);assertNotNull(m.getSerializationConfig().toString());}"
"com.fasterxml.jackson.databind.ser.TestConfig.testIndentation",0,"public void testIndentation()throws Exception {Map<String,Integer> map=new HashMap<String,Integer>();map.put(""a"",Integer.valueOf(2));String result=MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT).writeValueAsString(map);String lf=getLF();assertEquals(""{"" + lf + ""  \""a\"" : 2""+ lf+ ""}"",result);}"
"com.fasterxml.jackson.databind.ser.TestConfig.testAnnotationsDisabled",0,"public void testAnnotationsDisabled()throws Exception {assertTrue(MAPPER.isEnabled(MapperFeature.USE_ANNOTATIONS));Map<String,Object> result=writeAndMap(MAPPER,new AnnoBean());assertEquals(2,result.size());ObjectMapper m2=new ObjectMapper();m2.configure(MapperFeature.USE_ANNOTATIONS,false);result=writeAndMap(m2,new AnnoBean());assertEquals(1,result.size());}"
"com.fasterxml.jackson.databind.ser.TestConfig.testProviderConfig",0,"/** * Test for verifying working of [JACKSON-191]*/public void testProviderConfig()throws Exception {ObjectMapper mapper=new ObjectMapper();DefaultSerializerProvider prov=(DefaultSerializerProvider)mapper.getSerializerProvider();assertEquals(0,prov.cachedSerializersCount());Map<String,Object> result=this.writeAndMap(mapper,new AnnoBean());assertEquals(2,result.size());assertEquals(Integer.valueOf(1),result.get(""x""));assertEquals(Integer.valueOf(2),result.get(""y""));int count=prov.cachedSerializersCount();if (count < 2){fail(""Should have at least 2 cached serializers,got "" + count);}prov.flushCachedSerializers();assertEquals(0,prov.cachedSerializersCount());}"
"com.fasterxml.jackson.databind.ser.TestConfig.testIndentWithPassedGenerator",0,"public void testIndentWithPassedGenerator()throws Exception {Indentable input=new Indentable();assertEquals(""{\""a\"":3}"",MAPPER.writeValueAsString(input));String LF=getLF();String INDENTED=""{"" + LF + ""  \""a\"" : 3""+ LF+ ""}"";final ObjectWriter indentWriter=MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT);assertEquals(INDENTED,indentWriter.writeValueAsString(input));StringWriter sw=new StringWriter();JsonGenerator jgen=MAPPER.getFactory().createGenerator(sw);indentWriter.writeValue(jgen,input);jgen.close();assertEquals(INDENTED,sw.toString());sw=new StringWriter();ObjectMapper m2=new ObjectMapper();m2.enable(SerializationFeature.INDENT_OUTPUT);jgen=m2.getFactory().createGenerator(sw);m2.writeValue(jgen,input);jgen.close();assertEquals(INDENTED,sw.toString());}"
"com.fasterxml.jackson.databind.ser.TestConfig.testNoAccessOverrides",0,"public void testNoAccessOverrides()throws Exception {ObjectMapper m=new ObjectMapper();m.disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS);assertEquals(""{\""x\"":1}"",m.writeValueAsString(new SimpleBean()));}"
"com.fasterxml.jackson.databind.ser.TestConfig.testDateFormatConfig",0,"public void testDateFormatConfig()throws Exception {ObjectMapper mapper=new ObjectMapper();TimeZone tz1=TimeZone.getTimeZone(""America/Los_Angeles"");TimeZone tz2=TimeZone.getTimeZone(""Central Standard Time"");assertEquals(tz1,tz1);assertEquals(tz2,tz2);if (tz1.equals(tz2)){fail();}mapper.setTimeZone(tz1);assertEquals(tz1,mapper.getSerializationConfig().getTimeZone());assertEquals(tz1,mapper.getDeserializationConfig().getTimeZone());assertEquals(tz1,mapper.writer().getConfig().getTimeZone());assertEquals(tz1,mapper.reader().getConfig().getTimeZone());SimpleDateFormat f=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");f.setTimeZone(tz2);mapper.setDateFormat(f);assertEquals(tz1,mapper.getSerializationConfig().getTimeZone());assertEquals(tz1,mapper.getDeserializationConfig().getTimeZone());assertEquals(tz1,mapper.writer().getConfig().getTimeZone());assertEquals(tz1,mapper.reader().getConfig().getTimeZone());}"
"com.fasterxml.jackson.databind.ser.TestConfig.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId999Test.testExternalTypeId",0,"public void testExternalTypeId()throws Exception {TypeReference<?> type=new TypeReference<Message<FooPayload>>(){};Message<?> msg=MAPPER.readValue(aposToQuotes(""{'type':'foo','payload': {}}""),type);assertNotNull(msg);assertNotNull(msg.payload);assertEquals(""foo"",msg.type);msg=MAPPER.readValue(aposToQuotes(""{'payload': {},'type':'foo' }""),type);assertNotNull(msg);assertNotNull(msg.payload);assertEquals(""foo"",msg.type);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId999Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.JSONPObjectTest.testU2028Escaped",0,"/** * Unit tests for checking that JSONP breaking characters U+2028 and U+2029 are escaped when creating a  {@link JSONPObject}.*/public void testU2028Escaped()throws IOException {String containsU2028=String.format(""This string contains %c char"",'\u2028');JSONPObject jsonpObject=new JSONPObject(CALLBACK,containsU2028);String valueAsString=MAPPER.writeValueAsString(jsonpObject);assertFalse(valueAsString.contains(""\u2028""));}"
"com.fasterxml.jackson.databind.util.JSONPObjectTest.testU2029Escaped",0,"public void testU2029Escaped()throws IOException {String containsU2029=String.format(""This string contains %c char"",'\u2029');JSONPObject jsonpObject=new JSONPObject(CALLBACK,containsU2029);String valueAsString=MAPPER.writeValueAsString(jsonpObject);assertFalse(valueAsString.contains(""\u2029""));}"
"com.fasterxml.jackson.databind.util.JSONPObjectTest.testU2030NotEscaped",0,"public void testU2030NotEscaped()throws IOException {String containsU2030=String.format(""This string contains %c char"",'\u2030');JSONPObject jsonpObject=new JSONPObject(CALLBACK,containsU2030);String valueAsString=MAPPER.writeValueAsString(jsonpObject);assertTrue(valueAsString.contains(""\u2030""));}"
"com.fasterxml.jackson.databind.util.JSONPObjectTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testRootBeans",0,"public void testRootBeans()throws Exception {for(Source src : Source.values()){_testRootBeans(src);}}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testRootBeansInArray",0,"public void testRootBeansInArray()throws Exception {final String JSON=""[{\""a\"":6},{\""a\"":-7}]"";MappingIterator<Bean> it=MAPPER.readerFor(Bean.class).readValues(JSON);assertNotNull(it.getCurrentLocation());assertTrue(it.hasNext());Bean b=it.next();assertEquals(6,b.a);assertTrue(it.hasNext());b=it.next();assertEquals(-7,b.a);assertFalse(it.hasNext());it.close();it=MAPPER.readerFor(Bean.class).readValues(JSON);List<Bean> all=it.readAll();assertEquals(2,all.size());it.close();it=MAPPER.readerFor(Bean.class).readValues(""[{\""a\"":4},{\""a\"":4}]"");Set<Bean> set=it.readAll(new HashSet<Bean>());assertEquals(HashSet.class,set.getClass());assertEquals(1,set.size());assertEquals(4,set.iterator().next().a);}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testRootMaps",0,"public void testRootMaps()throws Exception {final String JSON=""{\""a\"":3}{\""a\"":27}"";Iterator<Map<?,?>> it=MAPPER.readerFor(Map.class).readValues(JSON);assertNotNull(((MappingIterator<?>)it).getCurrentLocation());assertTrue(it.hasNext());Map<?,?> map=it.next();assertEquals(1,map.size());assertEquals(Integer.valueOf(3),map.get(""a""));assertTrue(it.hasNext());assertNotNull(((MappingIterator<?>)it).getCurrentLocation());map=it.next();assertEquals(1,map.size());assertEquals(Integer.valueOf(27),map.get(""a""));assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testRootBeansWithParser",0,"public void testRootBeansWithParser()throws Exception {final String JSON=""{\""a\"":3}{\""a\"":27}"";JsonParser jp=MAPPER.getFactory().createParser(JSON);Iterator<Bean> it=jp.readValuesAs(Bean.class);assertTrue(it.hasNext());Bean b=it.next();assertEquals(3,b.a);assertTrue(it.hasNext());b=it.next();assertEquals(27,b.a);assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testRootArraysWithParser",0,"public void testRootArraysWithParser()throws Exception {final String JSON=""[1][3]"";JsonParser jp=MAPPER.getFactory().createParser(JSON);assertToken(JsonToken.START_ARRAY,jp.nextToken());Iterator<int[]> it=MAPPER.readerFor(int[].class).readValues(jp);assertTrue(it.hasNext());int[]array=it.next();assertEquals(1,array.length);assertEquals(1,array[0]);assertTrue(it.hasNext());array=it.next();assertEquals(1,array.length);assertEquals(3,array[0]);assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testHasNextWithEndArray",0,"public void testHasNextWithEndArray()throws Exception {final String JSON=""[1,3]"";JsonParser jp=MAPPER.getFactory().createParser(JSON);assertToken(JsonToken.START_ARRAY,jp.nextToken());jp.nextToken();Iterator<Integer> it=MAPPER.readerFor(Integer.class).readValues(jp);assertTrue(it.hasNext());int value=it.next();assertEquals(1,value);assertTrue(it.hasNext());value=it.next();assertEquals(3,value);assertFalse(it.hasNext());assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testHasNextWithEndArrayManagedParser",0,"public void testHasNextWithEndArrayManagedParser()throws Exception {final String JSON=""[1,3]"";Iterator<Integer> it=MAPPER.readerFor(Integer.class).readValues(JSON);assertTrue(it.hasNext());int value=it.next();assertEquals(1,value);assertTrue(it.hasNext());value=it.next();assertEquals(3,value);assertFalse(it.hasNext());assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testNonRootBeans",0,"public void testNonRootBeans()throws Exception {final String JSON=""{\""leaf\"":[{\""a\"":3},{\""a\"":27}]}"";JsonParser jp=MAPPER.getFactory().createParser(JSON);assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.FIELD_NAME,jp.nextToken());assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.START_OBJECT,jp.nextToken());Iterator<Bean> it=MAPPER.readerFor(Bean.class).readValues(jp);assertTrue(it.hasNext());Bean b=it.next();assertEquals(3,b.a);assertTrue(it.hasNext());b=it.next();assertEquals(27,b.a);assertFalse(it.hasNext());jp.close();}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testNonRootMapsWithParser",0,"public void testNonRootMapsWithParser()throws Exception {final String JSON=""[{\""a\"":3},{\""a\"":27}]"";JsonParser jp=MAPPER.getFactory().createParser(JSON);assertToken(JsonToken.START_ARRAY,jp.nextToken());jp.clearCurrentToken();Iterator<Map<?,?>> it=MAPPER.readerFor(Map.class).readValues(jp);assertTrue(it.hasNext());Map<?,?> map=it.next();assertEquals(1,map.size());assertEquals(Integer.valueOf(3),map.get(""a""));assertTrue(it.hasNext());map=it.next();assertEquals(1,map.size());assertEquals(Integer.valueOf(27),map.get(""a""));assertFalse(it.hasNext());jp.close();}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testNonRootMapsWithObjectReader",0,"public void testNonRootMapsWithObjectReader()throws Exception {String JSON=""[{\""hi\"": \""ho\"",\""neighbor\"": \""Joe\"" },\n"" + ""{\""boy\"": \""howdy\"",\""huh\"": \""what\""}]"";final MappingIterator<Map<String,Object>> iterator=MAPPER.reader().forType(new TypeReference<Map<String,Object>>(){}).readValues(JSON);Map<String,Object> map;assertTrue(iterator.hasNext());map=iterator.nextValue();assertEquals(2,map.size());assertTrue(iterator.hasNext());map=iterator.nextValue();assertEquals(2,map.size());assertFalse(iterator.hasNext());}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.testNonRootArraysUsingParser",0,"public void testNonRootArraysUsingParser()throws Exception {final String JSON=""[[1],[3]]"";JsonParser p=MAPPER.getFactory().createParser(JSON);assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());Iterator<int[]> it=MAPPER.readValues(p,int[].class);assertTrue(it.hasNext());int[]array=it.next();assertEquals(1,array.length);assertEquals(1,array[0]);assertTrue(it.hasNext());array=it.next();assertEquals(1,array.length);assertEquals(3,array[0]);assertFalse(it.hasNext());p.close();}"
"com.fasterxml.jackson.databind.seq.ReadValuesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.IgnorePropertyOnDeser1217Test.testIgnoreOnProperty",0,"public void testIgnoreOnProperty()throws Exception {TestIgnoreObject result=MAPPER.readValue(aposToQuotes(""{'obj':{'x': 10,'y': 20},'obj2':{'x': 10,'y': 20}}""),TestIgnoreObject.class);assertEquals(20,result.obj.y);assertEquals(10,result.obj2.x);assertEquals(1,result.obj.x);assertEquals(2,result.obj2.y);TestIgnoreObject result1=MAPPER.readValue(aposToQuotes(""{'obj':{'x': 20,'y': 30},'obj2':{'x': 20,'y': 40}}""),TestIgnoreObject.class);assertEquals(1,result1.obj.x);assertEquals(30,result1.obj.y);assertEquals(20,result1.obj2.x);assertEquals(2,result1.obj2.y);}"
"com.fasterxml.jackson.databind.deser.filter.IgnorePropertyOnDeser1217Test.testIgnoreViaConfigOverride",0,"public void testIgnoreViaConfigOverride()throws Exception {ObjectMapper mapper=newObjectMapper();mapper.configOverride(Point.class).setIgnorals(JsonIgnoreProperties.Value.forIgnoredProperties(""y""));Point p=mapper.readValue(aposToQuotes(""{'x':1,'y':2}""),Point.class);assertEquals(1,p.x);assertEquals(0,p.y);}"
"com.fasterxml.jackson.databind.deser.filter.IgnorePropertyOnDeser1217Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestStatics.testSimpleIgnore",0,"public void testSimpleIgnore()throws Exception {ObjectMapper m=new ObjectMapper();Bean result=m.readValue(""{\""x\"":3}"",Bean.class);assertEquals(3,result._x);}"
"com.fasterxml.jackson.databind.deser.TestStatics.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testIOException",0,"public void testIOException()throws IOException {IOException ioe=new IOException(""TEST"");String json=MAPPER.writeValueAsString(ioe);IOException result=MAPPER.readValue(json,IOException.class);assertEquals(ioe.getMessage(),result.getMessage());}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testWithCreator",0,"public void testWithCreator()throws IOException {final String MSG=""the message"";String json=MAPPER.writeValueAsString(new MyException(MSG,3));MyException result=MAPPER.readValue(json,MyException.class);assertEquals(MSG,result.getMessage());assertEquals(3,result.value);assertEquals(1,result.stuff.size());assertEquals(result.getFoo(),result.stuff.get(""foo""));}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testWithNullMessage",0,"public void testWithNullMessage()throws IOException {final ObjectMapper mapper=new ObjectMapper();mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);String json=mapper.writeValueAsString(new IOException((String)null));IOException result=mapper.readValue(json,IOException.class);assertNotNull(result);assertNull(result.getMessage());}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testNoArgsException",0,"public void testNoArgsException()throws IOException {MyNoArgException exc=MAPPER.readValue(""{}"",MyNoArgException.class);assertNotNull(exc);}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testJDK7SuppressionProperty",0,"public void testJDK7SuppressionProperty()throws IOException {Exception exc=MAPPER.readValue(""{\""suppressed\"":[]}"",IOException.class);assertNotNull(exc);}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testSingleValueArrayDeserialization",0,"public void testSingleValueArrayDeserialization(){}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.testSingleValueArrayDeserializationException",0,"public void testSingleValueArrayDeserializationException()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);final IOException exp;try {throw new IOException(""testing"");}catch(IOException internal){exp=internal;}final String value=""["" + mapper.writeValueAsString(exp)+ ""]"";try {mapper.readValue(value,IOException.class);fail(""Exception not thrown when attempting to deserialize an IOException wrapped in a single value array with UNWRAP_SINGLE_VALUE_ARRAYS disabled"");}catch(JsonMappingException exp2){}}"
"com.fasterxml.jackson.databind.exc.TestExceptionDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.TestAnyGetterFiltering.testAnyGetterFiltering",0,"public void testAnyGetterFiltering()throws Exception {ObjectMapper mapper=new ObjectMapper();FilterProvider prov=new SimpleFilterProvider().addFilter(""anyFilter"",SimpleBeanPropertyFilter.filterOutAllExcept(""b""));assertEquals(""{\""b\"":\""2\""}"",mapper.writer(prov).writeValueAsString(new AnyBean()));}"
"com.fasterxml.jackson.databind.ser.filter.TestAnyGetterFiltering.testAnyGetterIgnore",0,"public void testAnyGetterIgnore()throws Exception {ObjectMapper mapper=new ObjectMapper();assertEquals(aposToQuotes(""{'a':'1','b':'3'}""),mapper.writeValueAsString(new AnyBeanWithIgnores()));}"
"com.fasterxml.jackson.databind.ser.filter.TestAnyGetterFiltering.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.DeserExceptionTypeTest.testHandlingOfUnrecognized",0,"public void testHandlingOfUnrecognized()throws Exception {UnrecognizedPropertyException exc=null;try {MAPPER.readValue(""{\""bar\"":3}"",Bean.class);}catch(UnrecognizedPropertyException e){exc=e;}if (exc == null){fail(""Should have failed binding"");}assertEquals(""bar"",exc.getPropertyName());assertEquals(Bean.class,exc.getReferringClass());verifyException(exc,""propX"");}"
"com.fasterxml.jackson.databind.exc.DeserExceptionTypeTest.testExceptionWithEmpty",0,"/** * Simple test to check behavior when end-of-stream is encountered without content. Used to expect EOFException (Jackson 1.x);but nowadays ought to be JsonMappingException*/public void testExceptionWithEmpty()throws Exception {try {Object result=MAPPER.readValue(""    "",Object.class);fail(""Expected an exception,but got result value: "" + result);}catch(Exception e){verifyException(e,MismatchedInputException.class,""No content"");}}"
"com.fasterxml.jackson.databind.exc.DeserExceptionTypeTest.testExceptionWithIncomplete",0,"@SuppressWarnings(""resource"")public void testExceptionWithIncomplete()throws Exception {BrokenStringReader r=new BrokenStringReader(""[1,"",""TEST"");JsonParser p=MAPPER.getFactory().createParser(r);try {@SuppressWarnings(""unused"")Object ob=MAPPER.readValue(p,Object.class);fail(""Should have gotten an exception"");}catch(IOException e){verifyException(e,IOException.class,""TEST"");}}"
"com.fasterxml.jackson.databind.exc.DeserExceptionTypeTest.testExceptionWithEOF",0,"public void testExceptionWithEOF()throws Exception {JsonParser p=MAPPER.getFactory().createParser(""  3"");Integer I=MAPPER.readValue(p,Integer.class);assertEquals(3,I.intValue());try {I=MAPPER.readValue(p,Integer.class);fail(""Should have gotten an exception"");}catch(IOException e){verifyException(e,MismatchedInputException.class,""No content"");}JsonToken t=p.getCurrentToken();if (t != null){fail(""Expected current token to be null after end-of-stream,was: "" + t);}p.close();}"
"com.fasterxml.jackson.databind.exc.DeserExceptionTypeTest.testExceptionForNoCreators",0,"public void testExceptionForNoCreators()throws Exception {try {NoCreatorsBean b=MAPPER.readValue(""{}"",NoCreatorsBean.class);fail(""Should not succeed,got: "" + b);}catch(JsonMappingException e){verifyException(e,InvalidDefinitionException.class,""no Creators"");}}"
"com.fasterxml.jackson.databind.exc.DeserExceptionTypeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testUnknownHandlingDefault",0,"/** * By default we should just get an exception if an unknown property is encountered*/public void testUnknownHandlingDefault()throws Exception {try {MAPPER.readValue(new StringReader(JSON_UNKNOWN_FIELD),TestBean.class);}catch(JsonMappingException jex){verifyException(jex,""Unrecognized field \""foo\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testUnknownHandlingIgnoreWithHandler",0,"/** * Test that verifies that it is possible to ignore unknown properties using {@link DeserializationProblemHandler}.*/public void testUnknownHandlingIgnoreWithHandler()throws Exception {ObjectMapper mapper=newObjectMapper();mapper.clearProblemHandlers();mapper.addHandler(new MyHandler());TestBean result=mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD),TestBean.class);assertNotNull(result);assertEquals(1,result._a);assertEquals(-1,result._b);assertEquals(""foo:START_ARRAY"",result._unknown);}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testUnknownHandlingIgnoreWithHandlerAndObjectReader",0,"/** * Test that verifies that it is possible to ignore unknown properties using {@link DeserializationProblemHandler}and an ObjectReader.*/public void testUnknownHandlingIgnoreWithHandlerAndObjectReader()throws Exception {ObjectMapper mapper=newObjectMapper();mapper.clearProblemHandlers();TestBean result=mapper.readerFor(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD));assertNotNull(result);assertEquals(1,result._a);assertEquals(-1,result._b);assertEquals(""foo:START_ARRAY"",result._unknown);}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testUnknownHandlingIgnoreWithFeature",0,"/** * Test for checking that it is also possible to simply suppress error reporting for unknown properties.*/public void testUnknownHandlingIgnoreWithFeature()throws Exception {ObjectMapper mapper=newObjectMapper();mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);TestBean result=null;try {result=mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD),TestBean.class);}catch(JsonMappingException jex){fail(""Did not expect a problem,got: "" + jex.getMessage());}assertNotNull(result);assertEquals(1,result._a);assertNull(result._unknown);assertEquals(-1,result._b);}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testWithClassIgnore",0,"public void testWithClassIgnore()throws Exception {IgnoreSome result=MAPPER.readValue(""{\""a\"":1,\""b\"":2,\""c\"":\""x\"",\""d\"":\""y\""}"",IgnoreSome.class);assertEquals(1,result.a);assertEquals(""y"",result.d());assertEquals(0,result.b);assertNull(result.c());}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testClassIgnoreWithMap",0,"public void testClassIgnoreWithMap()throws Exception {IgnoreMap result=MAPPER.readValue(""{\""a\"":[1],\n"" + ""\""b\"":2,\n"" + ""\""c\"": \""x\"",\n""+ ""\""d\"":false }"",IgnoreMap.class);assertEquals(2,result.size());Object ob=result.get(""b"");assertEquals(Integer.class,ob.getClass());assertEquals(Integer.valueOf(2),ob);assertEquals(""x"",result.get(""c""));assertFalse(result.containsKey(""a""));assertFalse(result.containsKey(""d""));}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testClassWithIgnoreUnknown",0,"public void testClassWithIgnoreUnknown()throws Exception {IgnoreUnknown result=MAPPER.readValue(""{\""b\"":3,\""c\"":[1,2],\""x\"":{},\""a\"":-3}"",IgnoreUnknown.class);assertEquals(-3,result.a);}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testClassWithUnknownAndIgnore",0,"/** * Test that verifies that use of  {@link JsonIgnore}will add implicitskipping of matching properties.*/public void testClassWithUnknownAndIgnore()throws Exception {ImplicitIgnores result=MAPPER.readValue(""{\""a\"":1,\""b\"":2,\""c\"":3 }"",ImplicitIgnores.class);assertEquals(3,result.c);try {MAPPER.readValue(""{\""a\"":1,\""b\"":2,\""c\"":3,\""d\"":4 }"",ImplicitIgnores.class);}catch(JsonMappingException e){verifyException(e,""Unrecognized field \""d\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testPropertyIgnoral",0,"public void testPropertyIgnoral()throws Exception {XYZWrapper1 result=MAPPER.readValue(""{\""value\"":{\""y\"":2,\""x\"":1,\""z\"":3}}"",XYZWrapper1.class);assertEquals(2,result.value.y);assertEquals(3,result.value.z);}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testPropertyIgnoralWithClass",0,"public void testPropertyIgnoralWithClass()throws Exception {XYZWrapper2 result=MAPPER.readValue(""{\""value\"":{\""y\"":2,\""x\"":1,\""z\"":3}}"",XYZWrapper2.class);assertEquals(1,result.value.x);}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testPropertyIgnoralForMap",0,"public void testPropertyIgnoralForMap()throws Exception {MapWithoutX result=MAPPER.readValue(""{\""values\"":{\""x\"":1,\""y\"":2}}"",MapWithoutX.class);assertNotNull(result.values);assertEquals(1,result.values.size());assertEquals(Integer.valueOf(2),result.values.get(""y""));}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.testIssue987",0,"public void testIssue987()throws Exception {ObjectMapper jsonMapper=newObjectMapper();jsonMapper.addHandler(new DeserializationProblemHandler(){@Override public boolean handleUnknownProperty(DeserializationContext ctxt,JsonParser p,JsonDeserializer<?> deserializer,Object beanOrClass,String propertyName)throws IOException,JsonProcessingException {p.skipChildren();return true;}});String input=""[{\""aProperty\"":\""x\"",\""unknown\"":{\""unknown\"":{}}}]"";List<Bean987> deserializedList=jsonMapper.readValue(input,new TypeReference<List<Bean987>>(){});assertEquals(1,deserializedList.size());}"
"com.fasterxml.jackson.databind.deser.filter.TestUnknownPropertyDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.TestExceptionHandlingWithDefaultDeserialization.testShouldThrowJsonMappingExceptionWithPathReference",0,"public void testShouldThrowJsonMappingExceptionWithPathReference()throws IOException {ObjectMapper mapper=new ObjectMapper();String input=""{\""bar\"":{\""baz\"":{qux:\""quxValue\""))}"";final String THIS=getClass().getName();try {mapper.readValue(input,Foo.class);fail(""Upsss! Exception has not been thrown."");}catch(JsonMappingException ex){assertEquals(THIS + ""$Foo[\""bar\""]->"" + THIS+ ""$Bar[\""baz\""]"",ex.getPathReference());}}"
"com.fasterxml.jackson.databind.exc.TestExceptionHandlingWithDefaultDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestTypedRootValueSerialization.testTypedSerialization",0,"public void testTypedSerialization()throws Exception {ObjectMapper mapper=new ObjectMapper();String singleJson=mapper.writerFor(Issue822Interface.class).writeValueAsString(new Issue822Impl());assertEquals(""{\""a\"":3}"",singleJson);}"
"com.fasterxml.jackson.databind.ser.TestTypedRootValueSerialization.testTypedArrays",0,"public void testTypedArrays()throws Exception {ObjectMapper mapper=new ObjectMapper();assertEquals(""[{\""a\"":3}]"",mapper.writerFor(Issue822Interface[].class).writeValueAsString(new Issue822Interface[]{new Issue822Impl()}));}"
"com.fasterxml.jackson.databind.ser.TestTypedRootValueSerialization.testTypedLists",0,"public void testTypedLists()throws Exception {ObjectMapper mapper=new ObjectMapper();List<Issue822Interface> list=new ArrayList<Issue822Interface>();list.add(new Issue822Impl());String listJson=mapper.writerFor(new TypeReference<List<Issue822Interface>>(){}).writeValueAsString(list);assertEquals(""[{\""a\"":3}]"",listJson);}"
"com.fasterxml.jackson.databind.ser.TestTypedRootValueSerialization.testTypedMaps",0,"public void testTypedMaps()throws Exception {ObjectMapper mapper=new ObjectMapper();Map<String,Issue822Interface> map=new HashMap<String,Issue822Interface>();map.put(""a"",new Issue822Impl());String listJson=mapper.writerFor(new TypeReference<Map<String,Issue822Interface>>(){}).writeValueAsString(map);assertEquals(""{\""a\"":{\""a\"":3}}"",listJson);}"
"com.fasterxml.jackson.databind.ser.TestTypedRootValueSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForMethods.testWithAnySetter",0,"/** * Unit test that verifies that we can mix in @JsonAnySetter annotation,as expected.*/public void testWithAnySetter()throws IOException {ObjectMapper m=new ObjectMapper();m.addMixIn(BaseClass.class,MixIn.class);BaseClass result=m.readValue(""{\""a\"" : 3,\""b\"" : true }"",BaseClass.class);assertNotNull(result);assertEquals(2,result.values.size());assertEquals(Integer.valueOf(3),result.values.get(""a""));assertEquals(Boolean.TRUE,result.values.get(""b""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForMethods.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testPropertyWithSubtypes",0,"public void testPropertyWithSubtypes()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(SubB.class,SubC.class,SubD.class);String json=mapper.writeValueAsString(new PropertyBean(new SubC()));PropertyBean result=mapper.readValue(json,PropertyBean.class);assertSame(SubC.class,result.value.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testSubtypesViaModule",0,"public void testSubtypesViaModule()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule();module.registerSubtypes(SubB.class,SubC.class,SubD.class);mapper.registerModule(module);String json=mapper.writeValueAsString(new PropertyBean(new SubC()));PropertyBean result=mapper.readValue(json,PropertyBean.class);assertSame(SubC.class,result.value.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testSerialization",0,"public void testSerialization()throws Exception {SubB bean=new SubB();assertEquals(""{\""@type\"":\""TypeB\"",\""b\"":1}"",MAPPER.writeValueAsString(bean));ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(new NamedType(SubB.class,""typeB""));assertEquals(""{\""@type\"":\""typeB\"",\""b\"":1}"",mapper.writeValueAsString(bean));assertEquals(""{\""@type\"":\""TestSubtypes$SubD\"",\""d\"":0}"",mapper.writeValueAsString(new SubD()));}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testDeserializationNonNamed",0,"public void testDeserializationNonNamed()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(SubC.class);SuperType bean=mapper.readValue(""{\""@type\"":\""TestSubtypes$SubC\"",\""c\"":1}"",SuperType.class);assertSame(SubC.class,bean.getClass());assertEquals(1,((SubC)bean).c);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testDeserializatioNamed",0,"public void testDeserializatioNamed()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(SubB.class);mapper.registerSubtypes(new NamedType(SubD.class,""TypeD""));SuperType bean=mapper.readValue(""{\""@type\"":\""TypeB\"",\""b\"":13}"",SuperType.class);assertSame(SubB.class,bean.getClass());assertEquals(13,((SubB)bean).b);bean=mapper.readValue(""{\""@type\"":\""TypeD\"",\""d\"":-4}"",SuperType.class);assertSame(SubD.class,bean.getClass());assertEquals(-4,((SubD)bean).d);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testEmptyBean",0,"public void testEmptyBean()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,true);String json=mapper.writeValueAsString(new EmptyBean());assertEquals(""{\""@type\"":\""TestSubtypes$EmptyBean\""}"",json);mapper=new ObjectMapper();mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);json=mapper.writeValueAsString(new EmptyBean());assertEquals(""{\""@type\"":\""TestSubtypes$EmptyBean\""}"",json);mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);json=mapper.writeValueAsString(new EmptyNonFinal());assertEquals(""[\""com.fasterxml.jackson.databind.jsontype.TestSubtypes$EmptyNonFinal\"",{}]"",json);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testDefaultImpl",0,"public void testDefaultImpl()throws Exception {SuperTypeWithDefault bean=MAPPER.readValue(""{\""a\"":13}"",SuperTypeWithDefault.class);assertEquals(DefaultImpl.class,bean.getClass());assertEquals(13,((DefaultImpl)bean).a);bean=MAPPER.readValue(""{\""a\"":14,\""#type\"":\""foobar\""}"",SuperTypeWithDefault.class);assertEquals(DefaultImpl.class,bean.getClass());assertEquals(14,((DefaultImpl)bean).a);bean=MAPPER.readValue(""{\""#type\"":\""foobar\"",\""a\"":15}"",SuperTypeWithDefault.class);assertEquals(DefaultImpl.class,bean.getClass());assertEquals(15,((DefaultImpl)bean).a);bean=MAPPER.readValue(""{\""#type\"":\""foobar\""}"",SuperTypeWithDefault.class);assertEquals(DefaultImpl.class,bean.getClass());assertEquals(0,((DefaultImpl)bean).a);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testDefaultImplViaModule",0,"public void testDefaultImplViaModule()throws Exception {final String JSON=""{\""a\"":123}"";try {MAPPER.readValue(JSON,SuperTypeWithoutDefault.class);fail(""Expected an exception"");}catch(InvalidTypeIdException e){verifyException(e,""missing type id property '#type'"");}ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addAbstractTypeMapping(SuperTypeWithoutDefault.class,DefaultImpl505.class);mapper.registerModule(module);SuperTypeWithoutDefault bean=mapper.readValue(JSON,SuperTypeWithoutDefault.class);assertNotNull(bean);assertEquals(DefaultImpl505.class,bean.getClass());assertEquals(123,((DefaultImpl505)bean).a);bean=mapper.readValue(""{\""#type\"":\""foobar\""}"",SuperTypeWithoutDefault.class);assertEquals(DefaultImpl505.class,bean.getClass());assertEquals(0,((DefaultImpl505)bean).a);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testErrorMessage",0,"public void testErrorMessage()throws Exception {ObjectMapper mapper=new ObjectMapper();try {mapper.readValue(""{\""type\"": \""z\""}"",BaseX.class);fail(""Should have failed"");}catch(JsonMappingException e){verifyException(e,""known type ids ="");}}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testViaAtomic",0,"public void testViaAtomic()throws Exception {AtomicWrapper input=new AtomicWrapper(3);String json=MAPPER.writeValueAsString(input);AtomicWrapper output=MAPPER.readValue(json,AtomicWrapper.class);assertNotNull(output);assertEquals(ImplX.class,output.value.getClass());assertEquals(3,((ImplX)output.value).x);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testIssue1125NonDefault",0,"public void testIssue1125NonDefault()throws Exception {String json=MAPPER.writeValueAsString(new Issue1125Wrapper(new Impl1125(1,2,3)));Issue1125Wrapper result=MAPPER.readValue(json,Issue1125Wrapper.class);assertNotNull(result.value);assertEquals(Impl1125.class,result.value.getClass());Impl1125 impl=(Impl1125)result.value;assertEquals(1,impl.a);assertEquals(2,impl.b);assertEquals(3,impl.c);}"
"com.fasterxml.jackson.databind.jsontype.TestSubtypes.testIssue1125WithDefault",0,"public void testIssue1125WithDefault()throws Exception {Issue1125Wrapper result=MAPPER.readValue(aposToQuotes(""{'value':{'a':3,'def':9,'b':5}}""),Issue1125Wrapper.class);assertNotNull(result.value);assertEquals(Default1125.class,result.value.getClass());Default1125 impl=(Default1125)result.value;assertEquals(3,impl.a);assertEquals(5,impl.b);assertEquals(9,impl.def);}"
"com.fasterxml.jackson.databind.node.TestTreeMapperSerializer.testFromArray",0,"public void testFromArray()throws Exception {ObjectMapper mapper=new ObjectMapper();ArrayNode root=mapper.createArrayNode();root.add(TEXT1);root.add(3);ObjectNode obj=root.addObject();obj.put(FIELD1,true);obj.putArray(FIELD2);root.add(false);for (int i=0;i < 2;++i){StringWriter sw=new StringWriter();if (i == 0){JsonGenerator gen=new JsonFactory().createGenerator(sw);root.serialize(gen,null);gen.close();}else {mapper.writeValue(sw,root);}verifyFromArray(sw.toString());}verifyFromArray(root.toString());}"
"com.fasterxml.jackson.databind.node.TestTreeMapperSerializer.testFromMap",0,"public void testFromMap()throws Exception {ObjectMapper mapper=new ObjectMapper();ObjectNode root=mapper.createObjectNode();root.put(FIELD4,TEXT2);root.put(FIELD3,-1);root.putArray(FIELD2);root.put(FIELD1,DOUBLE_VALUE);for (int i=0;i < 2;++i){StringWriter sw=new StringWriter();if (i == 0){JsonGenerator gen=new JsonFactory().createGenerator(sw);root.serialize(gen,null);gen.close();}else {mapper.writeValue(sw,root);}verifyFromMap(sw.toString());}verifyFromMap(root.toString());}"
"com.fasterxml.jackson.databind.node.TestTreeMapperSerializer.testSmallNumbers",0,"/** * Unit test to check for regression of [JACKSON-18].*/public void testSmallNumbers()throws Exception {ObjectMapper mapper=new ObjectMapper();ArrayNode root=mapper.createArrayNode();for (int i=-20;i <= 20;++i){JsonNode n=root.numberNode(i);root.add(n);assertEquals(String.valueOf(i),n.toString());}for (int type=0;type < 2;++type){StringWriter sw=new StringWriter();if (type == 0){JsonGenerator gen=new JsonFactory().createGenerator(sw);root.serialize(gen,null);gen.close();}else {mapper.writeValue(sw,root);}String doc=sw.toString();JsonParser p=new JsonFactory().createParser(new StringReader(doc));assertEquals(JsonToken.START_ARRAY,p.nextToken());for (int i=-20;i <= 20;++i){assertEquals(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(i,p.getIntValue());assertEquals("""" + i,p.getText());}assertEquals(JsonToken.END_ARRAY,p.nextToken());p.close();}}"
"com.fasterxml.jackson.databind.node.TestTreeMapperSerializer.testBinary",0,"public void testBinary()throws Exception {ObjectMapper mapper=new ObjectMapper();final int LENGTH=13045;byte[]data=new byte[LENGTH];for (int i=0;i < LENGTH;++i){data[i]=(byte)i;}StringWriter sw=new StringWriter();mapper.writeValue(sw,BinaryNode.valueOf(data));JsonParser p=new JsonFactory().createParser(sw.toString());assertToken(JsonToken.VALUE_STRING,p.nextToken());assertArrayEquals(data,p.getBinaryValue());p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeMapperSerializer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithCreatorTest.testWithPropertiesCreator",0,"public void testWithPropertiesCreator()throws Exception {final String json=aposToQuotes(""{'a':1,'c':3,'b':2}"");PropertyCreatorValue value=MAPPER.readValue(json,PropertyCreatorValue.class);assertEquals(1,value.a);assertEquals(2,value.b);assertEquals(3,value.c);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithCreatorTest.testWithDelegatingStringCreator",0,"public void testWithDelegatingStringCreator()throws Exception {final int EXP=139;IntCreatorValue value=MAPPER.readValue(String.valueOf(EXP),IntCreatorValue.class);assertEquals(EXP,value.value);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithCreatorTest.testWithDelegatingIntCreator",0,"public void testWithDelegatingIntCreator()throws Exception {final double EXP=-3.75;DoubleCreatorValue value=MAPPER.readValue(String.valueOf(EXP),DoubleCreatorValue.class);assertEquals(EXP,value.value);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithCreatorTest.testWithDelegatingBooleanCreator",0,"public void testWithDelegatingBooleanCreator()throws Exception {final boolean EXP=true;BooleanCreatorValue value=MAPPER.readValue(String.valueOf(EXP),BooleanCreatorValue.class);assertEquals(EXP,value.value);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.ByteBufferUtilsTest.testByteBufferInput",0,"public void testByteBufferInput()throws Exception {byte[]input=new byte[]{1,2,3};ByteBufferBackedInputStream wrapped=new ByteBufferBackedInputStream(ByteBuffer.wrap(input));assertEquals(3,wrapped.available());assertEquals(1,wrapped.read());byte[]buffer=new byte[10];assertEquals(2,wrapped.read(buffer,0,5));wrapped.close();}"
"com.fasterxml.jackson.databind.util.ByteBufferUtilsTest.testByteBufferOutput",0,"public void testByteBufferOutput()throws Exception {ByteBuffer b=ByteBuffer.wrap(new byte[10]);ByteBufferBackedOutputStream wrappedOut=new ByteBufferBackedOutputStream(b);wrappedOut.write(1);wrappedOut.write(new byte[]{2,3});assertEquals(3,b.position());assertEquals(7,b.remaining());wrappedOut.close();}"
"com.fasterxml.jackson.databind.util.ByteBufferUtilsTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testVisibleWithProperty",0,"public void testVisibleWithProperty()throws Exception {String json=MAPPER.writeValueAsString(new PropertyBean());assertEquals(""{\""type\"":\""BaseType\"",\""a\"":3}"",json);PropertyBean result=MAPPER.readValue(json,PropertyBean.class);assertEquals(""BaseType"",result.type);result=MAPPER.readValue(""{\""a\"":7,\""type\"":\""BaseType\""}"",PropertyBean.class);assertEquals(7,result.a);assertEquals(""BaseType"",result.type);}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testVisibleWithWrapperArray",0,"public void testVisibleWithWrapperArray()throws Exception {String json=MAPPER.writeValueAsString(new WrapperArrayBean());assertEquals(""[\""ArrayType\"",{\""a\"":1}]"",json);WrapperArrayBean result=MAPPER.readValue(json,WrapperArrayBean.class);assertEquals(""ArrayType"",result.type);assertEquals(1,result.a);}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testVisibleWithWrapperObject",0,"public void testVisibleWithWrapperObject()throws Exception {String json=MAPPER.writeValueAsString(new WrapperObjectBean());assertEquals(""{\""ObjectType\"":{\""a\"":2}}"",json);WrapperObjectBean result=MAPPER.readValue(json,WrapperObjectBean.class);assertEquals(""ObjectType"",result.type);}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testTypeIdFromProperty",0,"public void testTypeIdFromProperty()throws Exception {assertEquals(""{\""type\"":\""SomeType\"",\""a\"":3}"",MAPPER.writeValueAsString(new TypeIdFromFieldProperty()));}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testTypeIdFromArray",0,"public void testTypeIdFromArray()throws Exception {assertEquals(""[\""SomeType\"",{\""a\"":3}]"",MAPPER.writeValueAsString(new TypeIdFromFieldArray()));}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testTypeIdFromObject",0,"public void testTypeIdFromObject()throws Exception {assertEquals(""{\""SomeType\"":{\""a\"":3}}"",MAPPER.writeValueAsString(new TypeIdFromMethodObject()));}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testTypeIdFromExternal",0,"public void testTypeIdFromExternal()throws Exception {String json=MAPPER.writeValueAsString(new ExternalIdWrapper2());assertEquals(""{\""bean\"":{\""a\"":2},\""type\"":\""SomeType\""}"",json);}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testIssue263",0,"public void testIssue263()throws Exception {assertEquals(""{\""name\"":\""bob\"",\""age\"":41}"",MAPPER.writeValueAsString(new I263Impl()));I263Base result=MAPPER.readValue(""{\""age\"":19,\""name\"":\""bob\""}"",I263Base.class);assertTrue(result instanceof I263Impl);assertEquals(19,((I263Impl)result).age);}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testVisibleTypeId408",0,"public void testVisibleTypeId408()throws Exception {String json=MAPPER.writeValueAsString(new ExternalBeanWithId(3));ExternalBeanWithId result=MAPPER.readValue(json,ExternalBeanWithId.class);assertNotNull(result);assertNotNull(result.bean);assertEquals(3,result.bean.value);assertEquals(""vbean"",result._type);}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.testInvalidMultipleTypeIds",0,"public void testInvalidMultipleTypeIds()throws Exception {try {MAPPER.writeValueAsString(new MultipleIds());fail(""Should have failed"");}catch(JsonMappingException e){verifyException(e,""multiple type ids"");}}"
"com.fasterxml.jackson.databind.jsontype.TestVisibleTypeId.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testWithoutModule",0,"/** * Basic test to ensure we do not have functioning default serializers for custom types used in tests.*/public void testWithoutModule(){ObjectMapper mapper=new ObjectMapper();try {mapper.writeValueAsString(new CustomBean(""foo"",3));fail(""Should have caused an exception"");}catch(IOException e){verifyException(e,""No serializer found"");}try {mapper.readValue(""{\""str\"":\""ab\"",\""num\"":2}"",CustomBean.class);fail(""Should have caused an exception"");}catch(IOException e){verifyException(e,""Can not construct"");verifyException(e,""no creators"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testSimpleBeanSerializer",0,"public void testSimpleBeanSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addSerializer(new CustomBeanSerializer());mapper.registerModule(mod);assertEquals(quote(""abcde|5""),mapper.writeValueAsString(new CustomBean(""abcde"",5)));}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testSimpleEnumSerializer",0,"public void testSimpleEnumSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addSerializer(new SimpleEnumSerializer());mapper.registerModules(mod);assertEquals(quote(""b""),mapper.writeValueAsString(SimpleEnum.B));}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testSimpleInterfaceSerializer",0,"public void testSimpleInterfaceSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addSerializer(new BaseSerializer());List<Module> mods=Arrays.asList((Module)mod);mapper.registerModules(mods);assertEquals(quote(""Base:1""),mapper.writeValueAsString(new Impl1()));assertEquals(quote(""Base:2""),mapper.writeValueAsString(new Impl2()));}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testSimpleBeanDeserializer",0,"public void testSimpleBeanDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addDeserializer(CustomBean.class,new CustomBeanDeserializer());mapper.registerModule(mod);CustomBean bean=mapper.readValue(quote(""xyz|3""),CustomBean.class);assertEquals(""xyz"",bean.str);assertEquals(3,bean.num);}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testSimpleEnumDeserializer",0,"public void testSimpleEnumDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addDeserializer(SimpleEnum.class,new SimpleEnumDeserializer());mapper.registerModule(mod);SimpleEnum result=mapper.readValue(quote(""a""),SimpleEnum.class);assertSame(SimpleEnum.A,result);}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testMultipleModules",0,"public void testMultipleModules()throws Exception {MySimpleModule mod1=new MySimpleModule(""test1"",Version.unknownVersion());SimpleModule mod2=new SimpleModule(""test2"",Version.unknownVersion());mod1.addSerializer(SimpleEnum.class,new SimpleEnumSerializer());mod1.addDeserializer(CustomBean.class,new CustomBeanDeserializer());Map<Class<?>,JsonDeserializer<?>> desers=new HashMap<>();desers.put(SimpleEnum.class,new SimpleEnumDeserializer());mod2.setDeserializers(new SimpleDeserializers(desers));mod2.addSerializer(CustomBean.class,new CustomBeanSerializer());ObjectMapper mapper=new ObjectMapper();mapper.registerModule(mod1);mapper.registerModule(mod2);assertEquals(quote(""b""),mapper.writeValueAsString(SimpleEnum.B));SimpleEnum result=mapper.readValue(quote(""a""),SimpleEnum.class);assertSame(SimpleEnum.A,result);mapper=new ObjectMapper();mapper.registerModule(mod2);mapper.registerModule(mod1);assertEquals(quote(""b""),mapper.writeValueAsString(SimpleEnum.B));result=mapper.readValue(quote(""a""),SimpleEnum.class);assertSame(SimpleEnum.A,result);}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testMixIns",0,"public void testMixIns()throws Exception {SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.setMixInAnnotation(MixableBean.class,MixInForOrder.class);ObjectMapper mapper=new ObjectMapper();mapper.registerModule(module);Map<String,Object> props=this.writeAndMap(mapper,new MixableBean());assertEquals(3,props.size());assertEquals(Integer.valueOf(3),props.get(""c""));assertEquals(Integer.valueOf(1),props.get(""a""));assertEquals(Integer.valueOf(2),props.get(""b""));}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testAccessToMapper",0,"public void testAccessToMapper()throws Exception {ContextVerifierModule module=new ContextVerifierModule();ObjectMapper mapper=new ObjectMapper();mapper.registerModule(module);}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testMixIns626",0,"public void testMixIns626()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new TestModule626(Object.class,String.class));Class<?> found=mapper.findMixInClassFor(Object.class);assertEquals(String.class,found);}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.testAutoDiscovery",0,"public void testAutoDiscovery()throws Exception {List<Module> mods=ObjectMapper.findModules();assertEquals(0,mods.size());}"
"com.fasterxml.jackson.databind.module.SimpleModuleTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreatorWithPolymorphic113.testSubtypes",0,"public void testSubtypes()throws Exception {ObjectMapper mapper=new ObjectMapper();String id=""nice dogy"";String json=mapper.writeValueAsString(new AnimalWrapper(new Dog(id)));AnimalWrapper wrapper=mapper.readValue(json,AnimalWrapper.class);assertEquals(id,wrapper.getAnimal().getId());}"
"com.fasterxml.jackson.databind.creators.TestCreatorWithPolymorphic113.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.ImplicitNameMatch792Test.testValue",0,"public int testValue(){return value;}"
"com.fasterxml.jackson.databind.creators.ImplicitNameMatch792Test.testBindingOfImplicitCreatorNames",0,"public void testBindingOfImplicitCreatorNames()throws Exception {ObjectMapper m=new ObjectMapper();m.setAnnotationIntrospector(new ConstructorNameAI());String json=m.writeValueAsString(new Issue792Bean(""a"",""b""));assertEquals(aposToQuotes(""{'first':'a','other':3}""),json);}"
"com.fasterxml.jackson.databind.creators.ImplicitNameMatch792Test.testImplicitWithSetterGetter",0,"public void testImplicitWithSetterGetter()throws Exception {String json=MAPPER.writeValueAsString(new Bean2());assertEquals(aposToQuotes(""{'stuff':3}""),json);}"
"com.fasterxml.jackson.databind.creators.ImplicitNameMatch792Test.testReadWriteWithPrivateField",0,"public void testReadWriteWithPrivateField()throws Exception {String json=MAPPER.writeValueAsString(new ReadWriteBean(3));assertEquals(""{\""value\"":3}"",json);}"
"com.fasterxml.jackson.databind.creators.ImplicitNameMatch792Test.testWriteOnly",0,"public void testWriteOnly()throws Exception {PasswordBean bean=MAPPER.readValue(aposToQuotes(""{'value':7,'password':'foo'}""),PasswordBean.class);assertEquals(""[password='foo',value=7]"",bean.asString());String json=MAPPER.writeValueAsString(bean);assertEquals(""{\""value\"":7}"",json);}"
"com.fasterxml.jackson.databind.creators.ImplicitNameMatch792Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestDeepCopy.testWithObjectSimple",0,"public void testWithObjectSimple(){ObjectNode root=mapper.createObjectNode();root.put(""a"",3);assertEquals(1,root.size());ObjectNode copy=root.deepCopy();assertEquals(1,copy.size());root.put(""b"",7);assertEquals(2,root.size());assertEquals(1,copy.size());copy.put(""c"",3);assertEquals(2,root.size());assertEquals(2,copy.size());}"
"com.fasterxml.jackson.databind.node.TestDeepCopy.testWithArraySimple",0,"public void testWithArraySimple(){ArrayNode root=mapper.createArrayNode();root.add(""a"");assertEquals(1,root.size());ArrayNode copy=root.deepCopy();assertEquals(1,copy.size());root.add(7);assertEquals(2,root.size());assertEquals(1,copy.size());copy.add(3);assertEquals(2,root.size());assertEquals(2,copy.size());}"
"com.fasterxml.jackson.databind.node.TestDeepCopy.testWithNested",0,"public void testWithNested(){ObjectNode root=mapper.createObjectNode();ObjectNode leafObject=root.putObject(""ob"");ArrayNode leafArray=root.putArray(""arr"");assertEquals(2,root.size());leafObject.put(""a"",3);assertEquals(1,leafObject.size());leafArray.add(true);assertEquals(1,leafArray.size());ObjectNode copy=root.deepCopy();assertNotSame(copy,root);assertEquals(2,copy.size());leafObject.put(""x"",9);assertEquals(2,leafObject.size());assertEquals(1,copy.get(""ob"").size());leafArray.add(""foobar"");assertEquals(2,leafArray.size());assertEquals(1,copy.get(""arr"").size());((ObjectNode)copy.get(""ob"")).put(""c"",3);assertEquals(2,leafObject.size());assertEquals(2,copy.get(""ob"").size());((ArrayNode)copy.get(""arr"")).add(13);assertEquals(2,leafArray.size());assertEquals(2,copy.get(""arr"").size());}"
"com.fasterxml.jackson.databind.node.TestDeepCopy.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testImplicitOrderByCreator",0,"public void testImplicitOrderByCreator()throws Exception {assertEquals(""{\""c\"":1,\""a\"":2,\""b\"":0}"",MAPPER.writeValueAsString(new BeanWithCreator(1,2)));}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testExplicitOrder",0,"public void testExplicitOrder()throws Exception {assertEquals(""{\""c\"":3,\""a\"":1,\""b\"":2,\""d\"":4}"",MAPPER.writeValueAsString(new BeanWithOrder(1,2,3,4)));}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testAlphabeticOrder",0,"public void testAlphabeticOrder()throws Exception {assertEquals(""{\""d\"":4,\""a\"":1,\""b\"":2,\""c\"":3}"",MAPPER.writeValueAsString(new SubBeanWithOrder(1,2,3,4)));}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testOrderWithMixins",0,"public void testOrderWithMixins()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(BeanWithOrder.class,OrderMixIn.class);assertEquals(""{\""b\"":2,\""a\"":1,\""c\"":3,\""d\"":4}"",serializeAsString(m,new BeanWithOrder(1,2,3,4)));}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testOrderWrt268",0,"public void testOrderWrt268()throws Exception {assertEquals(""{\""a\"":\""a\"",\""b\"":\""b\"",\""x\"":\""x\"",\""z\"":\""z\""}"",MAPPER.writeValueAsString(new BeanFor268()));}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testOrderWithFeature",0,"public void testOrderWithFeature()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY,true);assertEquals(""{\""a\"":1,\""b\"":2,\""c\"":3,\""d\"":4}"",m.writeValueAsString(new BeanFor459()));}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.testAlphaAndCreatorOrdering",0,"public void testAlphaAndCreatorOrdering()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY,true);String json=m.writeValueAsString(new BeanForGH311(2,1));assertEquals(""{\""a\"":1,\""b\"":2}"",json);}"
"com.fasterxml.jackson.databind.ser.TestSerializationOrder.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.TestAbstractWithObjectId.testIssue877",0,"public void testIssue877()throws Exception {BaseInterfaceImpl one=new BaseInterfaceImpl();BaseInterfaceImpl two=new BaseInterfaceImpl();one.addInstance(two);two.addInstance(one);ListWrapper<BaseInterfaceImpl> myList=new ListWrapper<BaseInterfaceImpl>();myList.add(one);myList.add(two);ObjectMapper om=new ObjectMapper();om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL,""@class"");String json=om.writerWithDefaultPrettyPrinter().writeValueAsString(myList);ListWrapper<BaseInterfaceImpl> result;result=om.readValue(json,new TypeReference<ListWrapper<BaseInterfaceImpl>>(){});assertNotNull(result);assertEquals(2,result.size());}"
"com.fasterxml.jackson.databind.objectid.TestAbstractWithObjectId.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testLongStringArray",0,"public void testLongStringArray()throws Exception {final int SIZE=40000;StringBuilder sb=new StringBuilder(SIZE * 2);for (int i=0;i < SIZE;++i){sb.append((char)i);}String str=sb.toString();byte[]data=MAPPER.writeValueAsBytes(new String[]{""abc"",str,null,str});JsonParser jp=MAPPER.getFactory().createParser(data);assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(""abc"",jp.getText());assertToken(JsonToken.VALUE_STRING,jp.nextToken());String actual=jp.getText();assertEquals(str.length(),actual.length());assertEquals(str,actual);assertToken(JsonToken.VALUE_NULL,jp.nextToken());assertToken(JsonToken.VALUE_STRING,jp.nextToken());assertEquals(str,jp.getText());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());jp.close();}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testIntArray",0,"public void testIntArray()throws Exception {String json=MAPPER.writeValueAsString(new int[]{1,2,3,-7});assertEquals(""[1,2,3,-7]"",json);}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testBigIntArray",0,"public void testBigIntArray()throws Exception {final int SIZE=99999;int[]ints=new int[SIZE];for (int i=0;i < ints.length;++i){ints[i]=i;}JsonFactory f=MAPPER.getFactory();for (int round=0;round < 3;++round){byte[]data=MAPPER.writeValueAsBytes(ints);JsonParser jp=f.createParser(data);assertToken(JsonToken.START_ARRAY,jp.nextToken());for (int i=0;i < SIZE;++i){assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(i,jp.getIntValue());}assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testLongArray",0,"public void testLongArray()throws Exception {String json=MAPPER.writeValueAsString(new long[]{Long.MIN_VALUE,0,Long.MAX_VALUE});assertEquals(""["" + Long.MIN_VALUE + "",0,""+ Long.MAX_VALUE+ ""]"",json);}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testStringArray",0,"public void testStringArray()throws Exception {assertEquals(""[\""a\"",\""\\\""foo\\\""\"",null]"",MAPPER.writeValueAsString(new String[]{""a"",""\""foo\"""",null}));assertEquals(""[]"",MAPPER.writeValueAsString(new String[]{}));}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testDoubleArray",0,"public void testDoubleArray()throws Exception {String json=MAPPER.writeValueAsString(new double[]{1.01,2.0,-7,Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});assertEquals(""[1.01,2.0,-7.0,\""NaN\"",\""-Infinity\"",\""Infinity\""]"",json);}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.testFloatArray",0,"public void testFloatArray()throws Exception {String json=MAPPER.writeValueAsString(new float[]{1.01f,2.0f,-7f,Float.NaN,Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY});assertEquals(""[1.01,2.0,-7.0,\""NaN\"",\""-Infinity\"",\""Infinity\""]"",json);}"
"com.fasterxml.jackson.databind.ser.TestArraySerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestAnnotationInheritance.testSimpleGetterInheritance",0,"public void testSimpleGetterInheritance()throws Exception {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new PojoSubclass());assertEquals(2,result.size());assertEquals(Integer.valueOf(7),result.get(""length""));assertEquals(Integer.valueOf(9),result.get(""width""));}"
"com.fasterxml.jackson.databind.ser.TestAnnotationInheritance.testSimpleGetterInterfaceImpl",0,"public void testSimpleGetterInterfaceImpl()throws Exception {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new PojoImpl());assertEquals(3,result.size());assertEquals(Integer.valueOf(5),result.get(""foobar""));assertEquals(Integer.valueOf(1),result.get(""width""));assertEquals(Integer.valueOf(2),result.get(""length""));}"
"com.fasterxml.jackson.databind.ser.TestAnnotationInheritance.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize3.testCustomContentSerializer",0,"public void testCustomContentSerializer()throws Exception {ObjectMapper m=new ObjectMapper();MyObject object=new MyObject();object.list=Arrays.asList(""foo"");String json=m.writeValueAsString(object);assertEquals(""{\""list\"":[\""bar\""]}"",json);}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize3.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithInjectables538.testWithInjectables538",0,"public void testWithInjectables538()throws Exception {A a=new A(""a"");B b=new B(""b"");a.b=b;b.a=a;String json=MAPPER.writeValueAsString(a);InjectableValues.Std inject=new InjectableValues.Std();inject.addValue(""i1"",""e1"");inject.addValue(""i2"",""e2"");A output=null;try {output=MAPPER.reader(inject).forType(A.class).readValue(json);}catch(Exception e){throw new IllegalStateException(""Failed to deserialize from JSON '"" + json + ""'"",e);}assertNotNull(output);assertNotNull(output.b);assertSame(output,output.b.a);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithInjectables538.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.RoundtripTest.testMedaItemRoundtrip",0,"public void testMedaItemRoundtrip()throws Exception {MediaItem.Content c=new MediaItem.Content();c.setBitrate(9600);c.setCopyright(""none"");c.setDuration(360000L);c.setFormat(""lzf"");c.setHeight(640);c.setSize(128000L);c.setTitle(""Amazing Stuff For Something Or Oth\u00CBr!"");c.setUri(""http://multi.fario.us/index.html"");c.setWidth(1400);c.addPerson(""Joe Sixp\u00e2ck"");c.addPerson(""Ezekiel"");c.addPerson(""Sponge-Bob Squarepant\u00DF"");MediaItem input=new MediaItem(c);input.addPhoto(new MediaItem.Photo());input.addPhoto(new MediaItem.Photo());input.addPhoto(new MediaItem.Photo());String json=MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(input);MediaItem output=MAPPER.readValue(new java.io.StringReader(json),MediaItem.class);assertNotNull(output);assertNotNull(output.getImages());assertEquals(input.getImages().size(),output.getImages().size());assertNotNull(output.getContent());assertEquals(input.getContent().getTitle(),output.getContent().getTitle());assertEquals(input.getContent().getUri(),output.getContent().getUri());assertEquals(json,MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(output));}"
"com.fasterxml.jackson.databind.RoundtripTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testCustomization",0,"public void testCustomization()throws Exception {ObjectMapper objectMapper=new ObjectMapper();objectMapper.addMixIn(Element.class,ElementMixin.class);Element element=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument().createElement(""el"");StringWriter sw=new StringWriter();objectMapper.writeValue(sw,element);assertEquals(sw.toString(),""\""element\"""");}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testCustomLists",0,"@SuppressWarnings({""unchecked"",""rawtypes""})public void testCustomLists()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());JsonSerializer<?> ser=new CollectionSerializer(null,false,null,null);final JsonSerializer<Object> collectionSerializer=(JsonSerializer<Object>)ser;module.addSerializer(Collection.class,new JsonSerializer<Collection>(){@Override public void serialize(Collection value,JsonGenerator gen,SerializerProvider provider)throws IOException {if (value.size()!= 0){collectionSerializer.serialize(value,gen,provider);}else {gen.writeNull();}}});mapper.registerModule(module);assertEquals(""null"",mapper.writeValueAsString(new ArrayList<Object>()));}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testDelegating",0,"public void testDelegating()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(new StdDelegatingSerializer(Immutable.class,new StdConverter<Immutable,Map<String,Integer>>(){@Override public Map<String,Integer> convert(Immutable value){HashMap<String,Integer> map=new LinkedHashMap<String,Integer>();map.put(""x"",value.x());map.put(""y"",value.y());return map;}}));mapper.registerModule(module);assertEquals(""{\""x\"":3,\""y\"":7}"",mapper.writeValueAsString(new Immutable()));}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testCustomEscapes",0,"public void testCustomEscapes()throws Exception {assertEquals(quote(""foo\\u0062\\Ar""),MAPPER.writer(new CustomEscapes()).writeValueAsString(""foobar""));}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testNumberSubclass",0,"public void testNumberSubclass()throws Exception {assertEquals(aposToQuotes(""{'x':42}""),MAPPER.writeValueAsString(new LikeNumber(42)));}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testWithCurrentValue",0,"public void testWithCurrentValue()throws Exception {assertEquals(aposToQuotes(""{'prop':'Issue631Bean/42'}""),MAPPER.writeValueAsString(new Issue631Bean(42)));}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.testWithCustomElements",0,"public void testWithCustomElements()throws Exception {StringListWrapper wr=new StringListWrapper(""a"",null,""b"");assertEquals(aposToQuotes(""{'list':['A',null,'B']}""),MAPPER.writeValueAsString(wr));SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new UCStringSerializer());ObjectMapper mapper=new ObjectMapper().registerModule(module);assertEquals(quote(""FOOBAR""),mapper.writeValueAsString(""foobar""));assertEquals(aposToQuotes(""['FOO',null]""),mapper.writeValueAsString(new String[]{""foo"",null}));List<String> list=Arrays.asList(""foo"",null);assertEquals(aposToQuotes(""['FOO',null]""),mapper.writeValueAsString(list));Set<String> set=new LinkedHashSet<String>(Arrays.asList(""foo"",null));assertEquals(aposToQuotes(""['FOO',null]""),mapper.writeValueAsString(set));}"
"com.fasterxml.jackson.databind.ser.TestCustomSerializers.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestSetterlessProperties.testSimpleSetterlessCollectionOk",0,"public void testSimpleSetterlessCollectionOk()throws Exception {CollectionBean result=new ObjectMapper().readValue(""{\""values\"":[\""abc\"",\""def\"" ]}"",CollectionBean.class);List<String> l=result._values;assertEquals(2,l.size());assertEquals(""abc"",l.get(0));assertEquals(""def"",l.get(1));}"
"com.fasterxml.jackson.databind.deser.TestSetterlessProperties.testSimpleSetterlessCollectionFailure",0,"/** * Let's also verify that disabling the feature makes deserialization fail for setterless bean*/public void testSimpleSetterlessCollectionFailure()throws Exception {ObjectMapper m=new ObjectMapper();assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));m.configure(MapperFeature.USE_GETTERS_AS_SETTERS,false);assertFalse(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));try {m.readValue(""{\""values\"":[\""abc\"",\""def\"" ]}"",CollectionBean.class);fail(""Expected an exception"");}catch(JsonMappingException e){verifyException(e,""Unrecognized field"");}}"
"com.fasterxml.jackson.databind.deser.TestSetterlessProperties.testSimpleSetterlessMapOk",0,"public void testSimpleSetterlessMapOk()throws Exception {MapBean result=new ObjectMapper().readValue(""{\""values\"":{\""a\"": 15,\""b\"" : -3 }}"",MapBean.class);Map<String,Integer> m=result._values;assertEquals(2,m.size());assertEquals(Integer.valueOf(15),m.get(""a""));assertEquals(Integer.valueOf(-3),m.get(""b""));}"
"com.fasterxml.jackson.databind.deser.TestSetterlessProperties.testSimpleSetterlessMapFailure",0,"public void testSimpleSetterlessMapFailure()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_GETTERS_AS_SETTERS,false);try {m.readValue(""{\""values\"":{\""a\"":3 }}"",MapBean.class);fail(""Expected an exception"");}catch(JsonMappingException e){verifyException(e,""Unrecognized field"");}}"
"com.fasterxml.jackson.databind.deser.TestSetterlessProperties.testSetterlessPrecedence",0,"public void testSetterlessPrecedence()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_GETTERS_AS_SETTERS,true);Dual value=m.readValue(""{\""list\"":[1,2,3]},valueType)"",Dual.class);assertNotNull(value);assertEquals(3,value.values.size());}"
"com.fasterxml.jackson.databind.deser.TestSetterlessProperties.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testCollections",0,"public void testCollections()throws IOException {final int entryLen=98;for (int type=0;type < 4;++type){Object value;if (type == 0){int[]ints=new int[entryLen];for (int i=0;i < entryLen;++i){ints[i]=Integer.valueOf(i);}value=ints;}else {Collection<Integer> c;switch (type){case 1:        c=new LinkedList<Integer>();break;case 2:    c=new TreeSet<Integer>();break;default:c=new ArrayList<Integer>();break;}for (int i=0;i < entryLen;++i){c.add(Integer.valueOf(i));}value=c;}String json=MAPPER.writeValueAsString(value);JsonParser jp=new JsonFactory().createParser(json);assertToken(JsonToken.START_ARRAY,jp.nextToken());for (int i=0;i < entryLen;++i){assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(i,jp.getIntValue());}assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testBigCollection",0,"@SuppressWarnings(""resource"")public void testBigCollection()throws IOException {final int COUNT=9999;ArrayList<Integer> value=new ArrayList<Integer>();for (int i=0;i <= COUNT;++i){value.add(i);}for (int mode=0;mode < 3;++mode){JsonParser jp=null;switch (mode){case 0:{byte[]data=MAPPER.writeValueAsBytes(value);jp=new JsonFactory().createParser(data);}break;case 1:{StringWriter sw=new StringWriter(value.size());MAPPER.writeValue(sw,value);jp=createParserUsingReader(sw.toString());}break;case 2:{String str=MAPPER.writeValueAsString(value);jp=createParserUsingReader(str);}break;}assertToken(JsonToken.START_ARRAY,jp.nextToken());for (int i=0;i <= COUNT;++i){assertEquals(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(i,jp.getIntValue());}assertToken(JsonToken.END_ARRAY,jp.nextToken());jp.close();}}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testEnumMap",0,"public void testEnumMap()throws IOException {EnumMap<Key,String> map=new EnumMap<Key,String>(Key.class);map.put(Key.B,""xyz"");map.put(Key.C,""abc"");String json=MAPPER.writeValueAsString(map);assertEquals(""{\""B\"":\""xyz\"",\""C\"":\""abc\""}"",json.trim());}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testEmptyBeanCollection",0,"@SuppressWarnings(""unchecked"")public void testEmptyBeanCollection()throws IOException {Collection<Object> x=new ArrayList<Object>();x.add(""foobar"");CollectionBean cb=new CollectionBean(x);Map<String,Object> result=writeAndMap(MAPPER,cb);assertEquals(1,result.size());assertTrue(result.containsKey(""values""));Collection<Object> x2=(Collection<Object>)result.get(""values"");assertNotNull(x2);assertEquals(x,x2);}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testNullBeanCollection",0,"public void testNullBeanCollection()throws IOException {CollectionBean cb=new CollectionBean(null);Map<String,Object> result=writeAndMap(MAPPER,cb);assertEquals(1,result.size());assertTrue(result.containsKey(""values""));assertNull(result.get(""values""));}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testEmptyBeanEnumMap",0,"@SuppressWarnings(""unchecked"")public void testEmptyBeanEnumMap()throws IOException {EnumMap<Key,String> map=new EnumMap<Key,String>(Key.class);EnumMapBean b=new EnumMapBean(map);Map<String,Object> result=writeAndMap(MAPPER,b);assertEquals(1,result.size());assertTrue(result.containsKey(""map""));Map<Object,Object> map2=(Map<Object,Object>)result.get(""map"");assertNotNull(map2);assertEquals(0,map2.size());}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testNullBeanEnumMap",0,"public void testNullBeanEnumMap()throws IOException {EnumMapBean b=new EnumMapBean(null);Map<String,Object> result=writeAndMap(MAPPER,b);assertEquals(1,result.size());assertTrue(result.containsKey(""map""));assertNull(result.get(""map""));}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testListSerializer",0,"public void testListSerializer()throws IOException {assertEquals(quote(""[ab,cd,ef]""),MAPPER.writeValueAsString(new PseudoList(""ab"",""cd"",""ef"")));assertEquals(quote(""[]""),MAPPER.writeValueAsString(new PseudoList()));}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testEmptyListOrArray",0,"@SuppressWarnings(""deprecation"")public void testEmptyListOrArray()throws IOException {EmptyListBean list=new EmptyListBean();EmptyArrayBean array=new EmptyArrayBean();assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS));assertEquals(""{\""empty\"":[]}"",MAPPER.writeValueAsString(list));assertEquals(""{\""empty\"":[]}"",MAPPER.writeValueAsString(array));ObjectMapper m=new ObjectMapper();m.configure(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS,false);assertEquals(""{}"",m.writeValueAsString(list));assertEquals(""{}"",m.writeValueAsString(array));}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.testStaticList",0,"public void testStaticList()throws IOException {StaticListWrapper w=new StaticListWrapper(""a"",""b"",""c"");String json=MAPPER.writeValueAsString(w);assertEquals(aposToQuotes(""{'list':['a','b','c']}""),json);ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);json=mapper.writeValueAsString(w);assertEquals(aposToQuotes(String.format(""['%s',{'list':['%s',['a','b','c']]}]"",w.getClass().getName(),w.list.getClass().getName())),json);}"
"com.fasterxml.jackson.databind.ser.jdk.CollectionSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.ExceptionSerializationTest.testSimple",0,"public void testSimple()throws Exception {String TEST=""test exception"";Map<String,Object> result=writeAndMap(MAPPER,new Exception(TEST));Object ob=result.get(""suppressed"");if (ob != null){assertEquals(5,result.size());}else {assertEquals(4,result.size());}assertEquals(TEST,result.get(""message""));assertNull(result.get(""cause""));assertEquals(TEST,result.get(""localizedMessage""));Object traces=result.get(""stackTrace"");if (!(traces instanceof List<?>)){fail(""Expected a List for exception member 'stackTrace',got: "" + traces);}}"
"com.fasterxml.jackson.databind.exc.ExceptionSerializationTest.testSimpleOther",0,"public void testSimpleOther()throws Exception {JsonParser p=MAPPER.getFactory().createParser(""{}"");InvalidFormatException exc=InvalidFormatException.from(p,""Test"",getClass(),String.class);String json=MAPPER.writeValueAsString(exc);p.close();assertNotNull(json);}"
"com.fasterxml.jackson.databind.exc.ExceptionSerializationTest.testIgnorals",0,"@SuppressWarnings(""unchecked"")public void testIgnorals()throws Exception {ExceptionWithIgnoral input=new ExceptionWithIgnoral(""foobar"");input.initCause(new IOException(""surprise!""));String json=MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(input);Map<String,Object> result=MAPPER.readValue(json,Map.class);assertEquals(""foobar"",result.get(""message""));assertNull(result.get(""bogus1""));assertNotNull(result.get(""bogus2""));ObjectMapper mapper=new ObjectMapper();mapper.configOverride(ExceptionWithIgnoral.class).setIgnorals(JsonIgnoreProperties.Value.forIgnoredProperties(""bogus2""));String json2=mapper.writeValueAsString(new ExceptionWithIgnoral(""foobar""));Map<String,Object> result2=mapper.readValue(json2,Map.class);assertNull(result2.get(""bogus1""));assertNull(result2.get(""bogus2""));ExceptionWithIgnoral output=mapper.readValue(json2,ExceptionWithIgnoral.class);assertNotNull(output);assertEquals(""foobar"",output.getMessage());}"
"com.fasterxml.jackson.databind.exc.ExceptionSerializationTest.testJsonMappingExceptionSerialization",0,"public void testJsonMappingExceptionSerialization()throws IOException {Exception e=null;try {MAPPER.readValue(""{\""val\"": \""foo\"" }"",NoSerdeConstructor.class);fail(""Should not pass"");}catch(JsonMappingException e0){verifyException(e0,""can not deserialize from Object"");e=e0;}String json=MAPPER.writeValueAsString(e);JsonNode root=MAPPER.readTree(json);String msg=root.path(""message"").asText();String MATCH=""can not construct instance"";if (!msg.toLowerCase().contains(MATCH)){fail(""Exception should contain '"" + MATCH + ""',does not: '""+ msg+ ""'"");}}"
"com.fasterxml.jackson.databind.exc.ExceptionSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test.testIssue1612",0,"public void testIssue1612()throws Exception {SimpleModule mod=new SimpleModule();mod.setSerializerModifier(new Modifier1612());ObjectMapper objectMapper=new ObjectMapper().registerModule(mod);try {objectMapper.writeValueAsString(new Bean1612(0,1,2d));fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Failed to construct BeanSerializer"");verifyException(e,Bean1612.class.getName());}}"
"com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestInferredMutators.testFinalFieldIgnoral",0,"public void testFinalFieldIgnoral()throws Exception {ObjectMapper mapper=new ObjectMapper();assertTrue(mapper.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS));mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);try {mapper.readValue(""{\""x\"":2}"",FixedPoint.class);fail(""Should not try to use final field"");}catch(JsonMappingException e){verifyException(e,""unrecognized field \""x\"""");}}"
"com.fasterxml.jackson.databind.introspect.TestInferredMutators.testDeserializationInference",0,"public void testDeserializationInference()throws Exception {final String JSON=""{\""x\"":2}"";ObjectMapper mapper=new ObjectMapper();assertTrue(mapper.isEnabled(MapperFeature.INFER_PROPERTY_MUTATORS));Point p=mapper.readValue(JSON,Point.class);assertEquals(2,p.x);mapper=new ObjectMapper();mapper.disable(MapperFeature.INFER_PROPERTY_MUTATORS);try {p=mapper.readValue(JSON,Point.class);fail(""Should not succeeed"");}catch(JsonMappingException e){verifyException(e,""unrecognized field \""x\"""");}}"
"com.fasterxml.jackson.databind.introspect.TestInferredMutators.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestNoTypeInfo.testWithIdNone",0,"public void testWithIdNone()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping();String json=mapper.writeValueAsString(new NoType());assertEquals(""{\""a\"":3}"",json);NoTypeInterface bean=mapper.readValue(""{\""a\"":6}"",NoTypeInterface.class);assertNotNull(bean);NoType impl=(NoType)bean;assertEquals(6,impl.a);}"
"com.fasterxml.jackson.databind.jsontype.TestNoTypeInfo.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestCustomTypeIdResolver.testCustomTypeIdResolver",0,"public void testCustomTypeIdResolver()throws Exception {List<JavaType> types=new ArrayList<JavaType>();CustomResolver.initTypes=types;String json=MAPPER.writeValueAsString(new CustomBean[]{new CustomBeanImpl(28)});assertEquals(""[{\""*\"":{\""x\"":28}}]"",json);assertEquals(1,types.size());assertEquals(CustomBean.class,types.get(0).getRawClass());types=new ArrayList<JavaType>();CustomResolver.initTypes=types;CustomBean[]result=MAPPER.readValue(json,CustomBean[].class);assertNotNull(result);assertEquals(1,result.length);assertEquals(28,((CustomBeanImpl)result[0]).x);assertEquals(1,types.size());assertEquals(CustomBean.class,types.get(0).getRawClass());}"
"com.fasterxml.jackson.databind.jsontype.TestCustomTypeIdResolver.testCustomWithExternal",0,"public void testCustomWithExternal()throws Exception {ExtBeanWrapper w=new ExtBeanWrapper();w.value=new ExtBeanImpl(12);String json=MAPPER.writeValueAsString(w);ExtBeanWrapper out=MAPPER.readValue(json,ExtBeanWrapper.class);assertNotNull(out);assertEquals(12,((ExtBeanImpl)out.value).y);}"
"com.fasterxml.jackson.databind.jsontype.TestCustomTypeIdResolver.testPolymorphicTypeViaCustom",0,"public void testPolymorphicTypeViaCustom()throws Exception {Base1270<Poly1> req=new Base1270<Poly1>();Poly1 o=new Poly1();o.val=""optionValue"";req.options=o;req.val=""some value"";Top1270 top=new Top1270();top.b=req;String json=MAPPER.writeValueAsString(top);JsonNode tree=MAPPER.readTree(json);assertNotNull(tree.get(""b""));assertNotNull(tree.get(""b"").get(""options""));assertNotNull(tree.get(""b"").get(""options"").get(""val""));Top1270 itemRead=MAPPER.readValue(json,Top1270.class);assertNotNull(itemRead);assertNotNull(itemRead.b);}"
"com.fasterxml.jackson.databind.jsontype.TestCustomTypeIdResolver.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.seq.ReadRecoveryTest.testRootBeans",0,"public void testRootBeans()throws Exception {final String JSON=aposToQuotes(""{'a':3}{'x':5}"");MappingIterator<Bean> it=MAPPER.readerFor(Bean.class).readValues(JSON);assertTrue(it.hasNextValue());Bean bean=it.nextValue();assertEquals(3,bean.a);try {bean=it.nextValue();fail(""Should not have succeeded"");}catch(JsonMappingException e){verifyException(e,""Unrecognized field \""x\"""");}assertFalse(it.hasNextValue());it.close();}"
"com.fasterxml.jackson.databind.seq.ReadRecoveryTest.testSimpleRootRecovery",0,"public void testSimpleRootRecovery()throws Exception {final String JSON=aposToQuotes(""{'a':3}{'a':27,'foo':[1,2],'b':{'x':3}}{'a':1,'b':2}"");MappingIterator<Bean> it=MAPPER.readerFor(Bean.class).readValues(JSON);Bean bean=it.nextValue();assertNotNull(bean);assertEquals(3,bean.a);try {it.nextValue();}catch(JsonMappingException e){verifyException(e,""Unrecognized field \""foo\"""");}bean=it.nextValue();assertNotNull(bean);assertEquals(1,bean.a);assertEquals(2,bean.b);assertFalse(it.hasNextValue());it.close();}"
"com.fasterxml.jackson.databind.seq.ReadRecoveryTest.testSimpleArrayRecovery",0,"public void testSimpleArrayRecovery()throws Exception {final String JSON=aposToQuotes(""[{'a':3},{'a':27,'foo':[1,2],'b':{'x':3}},{'a':1,'b':2}]"");MappingIterator<Bean> it=MAPPER.readerFor(Bean.class).readValues(JSON);Bean bean=it.nextValue();assertNotNull(bean);assertEquals(3,bean.a);try {it.nextValue();}catch(JsonMappingException e){verifyException(e,""Unrecognized field \""foo\"""");}bean=it.nextValue();assertNotNull(bean);assertEquals(1,bean.a);assertEquals(2,bean.b);assertFalse(it.hasNextValue());it.close();}"
"com.fasterxml.jackson.databind.seq.ReadRecoveryTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testWeirdKeyHandling",0,"public void testWeirdKeyHandling()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new WeirdKeyHandler(7));IntKeyMapWrapper w=mapper.readValue(""{\""stuff\"":{\""foo\"":\""abc\""}}"",IntKeyMapWrapper.class);Map<Integer,String> map=w.stuff;assertEquals(1,map.size());assertEquals(""abc"",map.values().iterator().next());assertEquals(Integer.valueOf(7),map.keySet().iterator().next());}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testWeirdNumberHandling",0,"public void testWeirdNumberHandling()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new WeirdNumberHandler(SingleValuedEnum.A));SingleValuedEnum result=mapper.readValue(""3"",SingleValuedEnum.class);assertEquals(SingleValuedEnum.A,result);}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testWeirdStringHandling",0,"public void testWeirdStringHandling()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new WeirdStringHandler(SingleValuedEnum.A));SingleValuedEnum result=mapper.readValue(""\""B\"""",SingleValuedEnum.class);assertEquals(SingleValuedEnum.A,result);}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testInvalidTypeId",0,"public void testInvalidTypeId()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new UnknownTypeIdHandler(BaseImpl.class));BaseWrapper w=mapper.readValue(""{\""value\"":{\""type\"":\""foo\"",\""a\"":4}}"",BaseWrapper.class);assertNotNull(w);assertEquals(BaseImpl.class,w.value.getClass());}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testInvalidClassAsId",0,"public void testInvalidClassAsId()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new UnknownTypeIdHandler(Base2Impl.class));Base2Wrapper w=mapper.readValue(""{\""value\"":{\""clazz\"":\""com.fizz\"",\""a\"":4}}"",Base2Wrapper.class);assertNotNull(w);assertEquals(Base2Impl.class,w.value.getClass());}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testMissingTypeId",0,"public void testMissingTypeId()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new MissingTypeIdHandler(BaseImpl.class));BaseWrapper w=mapper.readValue(""{\""value\"":{\""a\"":4}}"",BaseWrapper.class);assertNotNull(w);assertEquals(BaseImpl.class,w.value.getClass());}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testMissingClassAsId",0,"public void testMissingClassAsId()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new MissingTypeIdHandler(Base2Impl.class));Base2Wrapper w=mapper.readValue(""{\""value\"":{\""a\"":4}}"",Base2Wrapper.class);assertNotNull(w);assertEquals(Base2Impl.class,w.value.getClass());}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testInvalidTypeIdFail",0,"public void testInvalidTypeIdFail()throws Exception {try {MAPPER.readValue(""{\""value\"":{\""type\"":\""foo\"",\""a\"":4}}"",BaseWrapper.class);fail(""Should not pass"");}catch(InvalidTypeIdException e){verifyException(e,""Could not resolve type id 'foo'"");assertEquals(Base.class,e.getBaseType().getRawClass());assertEquals(""foo"",e.getTypeId());}}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testInstantiationExceptionHandling",0,"public void testInstantiationExceptionHandling()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new InstantiationProblemHandler(BustedCtor.INST));BustedCtor w=mapper.readValue(""{}"",BustedCtor.class);assertNotNull(w);}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testMissingInstantiatorHandling",0,"public void testMissingInstantiatorHandling()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new MissingInstantiationHandler(new NoDefaultCtor(13)));NoDefaultCtor w=mapper.readValue(""{\""x\"" : true }"",NoDefaultCtor.class);assertNotNull(w);assertEquals(13,w.value);}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.testUnexpectedTokenHandling",0,"public void testUnexpectedTokenHandling()throws Exception {ObjectMapper mapper=newObjectMapper().addHandler(new WeirdTokenHandler(Integer.valueOf(13)));Integer v=mapper.readValue(""true"",Integer.class);assertEquals(Integer.valueOf(13),v);}"
"com.fasterxml.jackson.databind.deser.filter.ProblemHandlerTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.BeanDescriptionTest.testClassDesc",0,"public void testClassDesc()throws Exception {BeanDescription beanDesc=MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(DocumentedBean.class));assertEquals(CLASS_DESC,beanDesc.findClassDescription());}"
"com.fasterxml.jackson.databind.introspect.BeanDescriptionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.testArrayTypingSimple",0,"/** * Simple unit test for verifying that we get String array back,even though declared type is Object array*/public void testArrayTypingSimple()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);ArrayBean bean=new ArrayBean(new String[0]);String json=m.writeValueAsString(bean);ArrayBean result=m.readValue(json,ArrayBean.class);assertNotNull(result.values);assertEquals(String[].class,result.values.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.testArrayTypingNested",0,"public void testArrayTypingNested()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);ArrayBean bean=new ArrayBean(new String[0][0]);String json=m.writeValueAsString(bean);ArrayBean result=m.readValue(json,ArrayBean.class);assertNotNull(result.values);assertEquals(String[][].class,result.values.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.testNodeInArray",0,"public void testNodeInArray()throws Exception {JsonNode node=new ObjectMapper().readTree(""{\""a\"":3}"");ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);Object[]obs=new Object[]{node};String json=m.writeValueAsString(obs);Object[]result=m.readValue(json,Object[].class);assertEquals(1,result.length);Object ob=result[0];assertTrue(ob instanceof JsonNode);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.testNodeInEmptyArray",0,"@SuppressWarnings(""deprecation"")public void testNodeInEmptyArray()throws Exception {Map<String,List<String>> outerMap=new HashMap<String,List<String>>();outerMap.put(""inner"",new ArrayList<String>());ObjectMapper m=new ObjectMapper().disable(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS);JsonNode tree=m.convertValue(outerMap,JsonNode.class);String json=m.writeValueAsString(tree);assertEquals(""{}"",json);JsonNode node=new ObjectMapper().readTree(""{\""a\"":[]}"");m.enableDefaultTyping(DefaultTyping.JAVA_LANG_OBJECT);Object[]obs=new Object[]{node};json=m.writeValueAsString(obs);Object[]result=m.readValue(json,Object[].class);assertEquals(""{}"",result[0].toString());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.testArraysOfArrays",0,"public void testArraysOfArrays()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);Object value=new Object[][]{new Object[]{}};String json=mapper.writeValueAsString(value);_testArraysAs(mapper,json,Object[][].class);_testArraysAs(mapper,json,Object[].class);_testArraysAs(mapper,json,Object.class);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.testArrayTypingForPrimitiveArrays",0,"public void testArrayTypingForPrimitiveArrays()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(DefaultTyping.NON_CONCRETE_AND_ARRAYS);_testArrayTypingForPrimitiveArrays(m,new int[]{1,2,3});_testArrayTypingForPrimitiveArrays(m,new long[]{1,2,3});_testArrayTypingForPrimitiveArrays(m,new short[]{1,2,3});_testArrayTypingForPrimitiveArrays(m,new double[]{0.5,5.5,-1.0});_testArrayTypingForPrimitiveArrays(m,new float[]{0.5f,5.5f,-1.0f});_testArrayTypingForPrimitiveArrays(m,new boolean[]{true,false});_testArrayTypingForPrimitiveArrays(m,new char[]{'a','b'});}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForArrays.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.cfg.ConfigObjectsTest.testSubtypeResolver",0,"public void testSubtypeResolver()throws Exception {ObjectMapper mapper=new ObjectMapper();SubtypeResolver res=mapper.getSubtypeResolver();assertTrue(res instanceof StdSubtypeResolver);StdSubtypeResolver repl=new StdSubtypeResolver();repl.registerSubtypes(Sub.class);mapper.setSubtypeResolver(repl);assertSame(repl,mapper.getSubtypeResolver());}"
"com.fasterxml.jackson.databind.cfg.ConfigObjectsTest.testMics",0,"public void testMics()throws Exception {assertFalse(MapperFeature.AUTO_DETECT_FIELDS.enabledIn(0));assertTrue(MapperFeature.AUTO_DETECT_FIELDS.enabledIn(-1));}"
"com.fasterxml.jackson.databind.cfg.ConfigObjectsTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestPolymorphicUpdateValue.testPolymorphicTest",0,"public void testPolymorphicTest()throws Exception {Child c=new Child();c.w=10;c.h=11;MAPPER.readerForUpdating(c).readValue(""{\""x\"":3,\""y\"":4,\""w\"":111}"");assertEquals(3,c.x);assertEquals(4,c.y);assertEquals(111,c.w);}"
"com.fasterxml.jackson.databind.convert.TestPolymorphicUpdateValue.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.AbstracTypeMapping1186Test.testDeserializeMyContainer",0,"public void testDeserializeMyContainer()throws Exception {Module module=new SimpleModule().addAbstractTypeMapping(IContainer.class,MyContainer.class);final ObjectMapper mapper=new ObjectMapper().registerModule(module);String json=""{\""ts\"": [{\""msg\"": \""hello\""}]}"";final Object o=mapper.readValue(json,mapper.getTypeFactory().constructParametricType(IContainer.class,MyObject.class));assertEquals(MyContainer.class,o.getClass());MyContainer<?> myc=(MyContainer<?>)o;assertEquals(1,myc.ts.size());Object value=myc.ts.get(0);assertEquals(MyObject.class,value.getClass());}"
"com.fasterxml.jackson.databind.jsontype.AbstracTypeMapping1186Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestRootType.testSuperClass",0,"@SuppressWarnings(""unchecked"")public void testSuperClass()throws Exception {ObjectMapper mapper=objectMapper();SubType bean=new SubType();Map<String,Object> result=writeAndMap(mapper,bean);assertEquals(4,result.size());assertEquals(""a"",result.get(""a""));assertEquals(Integer.valueOf(3),result.get(""b""));assertEquals(""x"",result.get(""a2""));assertEquals(Boolean.TRUE,result.get(""b2""));ObjectWriter w=mapper.writerFor(BaseType.class);String json=w.writeValueAsString(bean);result=(Map<String,Object>)mapper.readValue(json,Map.class);assertEquals(2,result.size());assertEquals(""a"",result.get(""a""));assertEquals(Integer.valueOf(3),result.get(""b""));}"
"com.fasterxml.jackson.databind.ser.TestRootType.testSuperInterface",0,"public void testSuperInterface()throws Exception {ObjectMapper mapper=objectMapper();SubType bean=new SubType();ObjectWriter w=mapper.writerFor(BaseInterface.class);String json=w.writeValueAsString(bean);@SuppressWarnings(""unchecked"")Map<String,Object> result=mapper.readValue(json,Map.class);assertEquals(1,result.size());assertEquals(Integer.valueOf(3),result.get(""b""));}"
"com.fasterxml.jackson.databind.ser.TestRootType.testInArray",0,"public void testInArray()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(MapperFeature.USE_STATIC_TYPING,true);SubType[]ob=new SubType[]{new SubType()};String json=mapper.writerFor(BaseInterface[].class).writeValueAsString(ob);assertEquals(""[{\""b\"":3}]"",json);}"
"com.fasterxml.jackson.databind.ser.TestRootType.testIncompatibleRootType",0,"/** * Unit test to ensure that proper exception is thrown if declared root type is not compatible with given value instance.*/public void testIncompatibleRootType()throws Exception {ObjectMapper mapper=objectMapper();SubType bean=new SubType();ObjectWriter w=mapper.writerFor(HashMap.class);try {w.writeValueAsString(bean);fail(""Should have failed due to incompatible type"");}catch(JsonProcessingException e){verifyException(e,""Incompatible types"");}try {w.writeValueAsBytes(bean);fail(""Should have failed due to incompatible type"");}catch(JsonProcessingException e){verifyException(e,""Incompatible types"");}}"
"com.fasterxml.jackson.databind.ser.TestRootType.testJackson398",0,"public void testJackson398()throws Exception {ObjectMapper mapper=objectMapper();JavaType collectionType=TypeFactory.defaultInstance().constructCollectionType(ArrayList.class,BaseClass398.class);List<TestClass398> typedList=new ArrayList<TestClass398>();typedList.add(new TestClass398());final String EXP=""[{\""beanClass\"":\""TestRootType$TestClass398\"",\""property\"":\""aa\""}]"";String json=mapper.writerFor(collectionType).writeValueAsString(typedList);assertEquals(EXP,json);StringWriter out=new StringWriter();JsonFactory f=new JsonFactory();mapper.writerFor(collectionType).writeValue(f.createGenerator(out),typedList);assertEquals(EXP,out.toString());}"
"com.fasterxml.jackson.databind.ser.TestRootType.testRootWrapping",0,"public void testRootWrapping()throws Exception {String json=WRAP_ROOT_MAPPER.writeValueAsString(new StringWrapper(""abc""));assertEquals(""{\""StringWrapper\"":{\""str\"":\""abc\""}}"",json);}"
"com.fasterxml.jackson.databind.ser.TestRootType.testIssue456WrapperPart",0,"/** * Test to verify that there is support for specifying root type as primitive,even if wrapper value is passed (there is no way to pass primitive values as Objects);this to support frameworks that may pass unprocessed {@link java.lang.reflect.Type}from field or method.*/public void testIssue456WrapperPart()throws Exception {ObjectMapper mapper=objectMapper();assertEquals(""123"",mapper.writerFor(Integer.TYPE).writeValueAsString(Integer.valueOf(123)));assertEquals(""456"",mapper.writerFor(Long.TYPE).writeValueAsString(Long.valueOf(456L)));}"
"com.fasterxml.jackson.databind.ser.TestRootType.testRootNameAnnotation",0,"public void testRootNameAnnotation()throws Exception {String json=WRAP_ROOT_MAPPER.writeValueAsString(new WithRootName());assertEquals(""{\""root\"":{\""a\"":3}}"",json);}"
"com.fasterxml.jackson.databind.ser.TestRootType.testRootNameWithExplicitType",0,"public void testRootNameWithExplicitType()throws Exception {TestCommandChild cmd=new TestCommandChild();cmd.uuid=""1234"";cmd.type=1;ObjectWriter writer=WRAP_ROOT_MAPPER.writerFor(TestCommandParent.class);String json=writer.writeValueAsString(cmd);assertEquals(""{\""TestCommandParent\"":{\""uuid\"":\""1234\"",\""type\"":1}}"",json);}"
"com.fasterxml.jackson.databind.ser.TestRootType.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.cfg.DatabindContextTest.testDeserializationContext",0,"public void testDeserializationContext()throws Exception {DeserializationContext ctxt=MAPPER.getDeserializationContext();assertNull(ctxt.constructType((Class<?>)null));assertNull(ctxt.constructType((java.lang.reflect.Type)null));}"
"com.fasterxml.jackson.databind.cfg.DatabindContextTest.testSerializationContext",0,"public void testSerializationContext()throws Exception {SerializerProvider ctxt=MAPPER.getSerializerProvider();assertNull(ctxt.constructType(null));}"
"com.fasterxml.jackson.databind.cfg.DatabindContextTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsListWithClassAnnotations",0,"public void testSerializedAsListWithClassAnnotations()throws IOException {SimpleValueList list=new SimpleValueList();list.add(new ActualValue(""foo""));assertEquals(""[{\""value\"":\""foo\""}]"",MAPPER.writeValueAsString(list));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsMapWithClassAnnotations",0,"public void testSerializedAsMapWithClassAnnotations()throws IOException {SimpleValueMap map=new SimpleValueMap();map.put(new SimpleKey(""x""),new ActualValue(""y""));assertEquals(""{\""toString:x\"":{\""value\"":\""y\""}}"",MAPPER.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsListWithClassSerializer",0,"public void testSerializedAsListWithClassSerializer()throws IOException {ObjectMapper m=new ObjectMapper();SimpleValueListWithSerializer list=new SimpleValueListWithSerializer();list.add(new ActualValue(""foo""));assertEquals(""[\""value foo\""]"",m.writeValueAsString(list));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsListWithPropertyAnnotations",0,"public void testSerializedAsListWithPropertyAnnotations()throws IOException {ListWrapperSimple input=new ListWrapperSimple(""bar"");assertEquals(""{\""values\"":[{\""value\"":\""bar\""}]}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsMapWithClassSerializer",0,"public void testSerializedAsMapWithClassSerializer()throws IOException {SimpleValueMapWithSerializer map=new SimpleValueMapWithSerializer();map.put(new SimpleKey(""abc""),new ActualValue(""123""));assertEquals(""{\""key abc\"":\""value 123\""}"",MAPPER.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsMapWithPropertyAnnotations",0,"public void testSerializedAsMapWithPropertyAnnotations()throws IOException {MapWrapperSimple input=new MapWrapperSimple(""a"",""b"");assertEquals(""{\""values\"":{\""toString:a\"":{\""value\"":\""b\""}}}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsListWithPropertyAnnotations2",0,"public void testSerializedAsListWithPropertyAnnotations2()throws IOException {ListWrapperWithSerializer input=new ListWrapperWithSerializer(""abc"");assertEquals(""{\""values\"":[\""value abc\""]}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testSerializedAsMapWithPropertyAnnotations2",0,"public void testSerializedAsMapWithPropertyAnnotations2()throws IOException {MapWrapperWithSerializer input=new MapWrapperWithSerializer(""foo"",""b"");assertEquals(""{\""values\"":{\""key foo\"":\""value b\""}}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testEmptyInclusionContainers",0,"public void testEmptyInclusionContainers()throws IOException {ObjectMapper defMapper=MAPPER;ObjectMapper inclMapper=new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);ListWrapper<String> list=new ListWrapper<String>();assertEquals(""{\""list\"":[]}"",defMapper.writeValueAsString(list));assertEquals(""{}"",inclMapper.writeValueAsString(list));assertEquals(""{}"",inclMapper.writeValueAsString(new ListWrapper<String>()));MapWrapper<String,Integer> map=new MapWrapper<String,Integer>(new HashMap<String,Integer>());assertEquals(""{\""map\"":{}}"",defMapper.writeValueAsString(map));assertEquals(""{}"",inclMapper.writeValueAsString(map));assertEquals(""{}"",inclMapper.writeValueAsString(new MapWrapper<String,Integer>(null)));ArrayWrapper<Integer> array=new ArrayWrapper<Integer>(new Integer[0]);assertEquals(""{\""array\"":[]}"",defMapper.writeValueAsString(array));assertEquals(""{}"",inclMapper.writeValueAsString(array));assertEquals(""{}"",inclMapper.writeValueAsString(new ArrayWrapper<Integer>(null)));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.testNullSerializer",0,"public void testNullSerializer()throws Exception {String json=MAPPER.writeValueAsString(new NullBean());assertEquals(""{\""value\"":null}"",json);}"
"com.fasterxml.jackson.databind.ser.TestJsonSerialize2.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithTypeInfo.testDefaultUnwrappedWithTypeInfo",0,"public void testDefaultUnwrappedWithTypeInfo()throws Exception {Outer outer=new Outer();outer.setP1(""101"");Inner inner=new Inner();inner.setP2(""202"");outer.setInner(inner);ObjectMapper mapper=new ObjectMapper();try {mapper.writeValueAsString(outer);fail(""Expected exception to be thrown."");}catch(JsonMappingException ex){verifyException(ex,""requires use of type information"");}}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithTypeInfo.testUnwrappedWithTypeInfoAndFeatureDisabled",0,"public void testUnwrappedWithTypeInfoAndFeatureDisabled()throws Exception {Outer outer=new Outer();outer.setP1(""101"");Inner inner=new Inner();inner.setP2(""202"");outer.setInner(inner);ObjectMapper mapper=new ObjectMapper();mapper=mapper.disable(SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS);String json=mapper.writeValueAsString(outer);assertEquals(""{\""@type\"":\""OuterType\"",\""p1\"":\""101\"",\""p2\"":\""202\""}"",json);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithTypeInfo.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ext.TestDOM.testSerializeSimpleNonNS",0,"public void testSerializeSimpleNonNS()throws Exception {Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(SIMPLE_XML)));assertNotNull(doc);String outputRaw=MAPPER.writeValueAsString(doc);String output=MAPPER.readValue(outputRaw,String.class);assertEquals(SIMPLE_XML,normalizeOutput(output));}"
"com.fasterxml.jackson.databind.ext.TestDOM.testDeserializeNonNS",0,"public void testDeserializeNonNS()throws Exception {for (int i=0;i < 2;++i){Document doc;if (i == 0){doc=MAPPER.readValue(quote(SIMPLE_XML),Document.class);}else {Node node=MAPPER.readValue(quote(SIMPLE_XML),Node.class);doc=(Document)node;}Element root=doc.getDocumentElement();assertNotNull(root);assertEquals(""root"",root.getTagName());assertEquals(""3"",root.getAttribute(""attr""));assertEquals(1,root.getAttributes().getLength());NodeList nodes=root.getChildNodes();assertEquals(2,nodes.getLength());Element leaf=(Element)nodes.item(0);assertEquals(""leaf"",leaf.getTagName());assertEquals(0,leaf.getAttributes().getLength());ProcessingInstruction pi=(ProcessingInstruction)nodes.item(1);assertEquals(""proc"",pi.getTarget());assertEquals(""instr"",pi.getData());}}"
"com.fasterxml.jackson.databind.ext.TestDOM.testDeserializeNS",0,"public void testDeserializeNS()throws Exception {Document doc=MAPPER.readValue(quote(SIMPLE_XML_NS),Document.class);Element root=doc.getDocumentElement();assertNotNull(root);assertEquals(""root"",root.getTagName());String uri=root.getNamespaceURI();assertTrue((uri == null)|| """".equals(uri));assertEquals(0,root.getChildNodes().getLength());assertEquals(2,root.getAttributes().getLength());assertEquals(""abc"",root.getAttributeNS(""http://foo"",""attr""));}"
"com.fasterxml.jackson.databind.ser.filter.NullSerializationTest.testSimple",0,"public void testSimple()throws Exception {assertEquals(""null"",MAPPER.writeValueAsString(null));}"
"com.fasterxml.jackson.databind.ser.filter.NullSerializationTest.testOverriddenDefaultNulls",0,"public void testOverriddenDefaultNulls()throws Exception {DefaultSerializerProvider sp=new DefaultSerializerProvider.Impl();sp.setNullValueSerializer(new NullSerializer());ObjectMapper m=new ObjectMapper();m.setSerializerProvider(sp);assertEquals(""\""foobar\"""",m.writeValueAsString(null));}"
"com.fasterxml.jackson.databind.ser.filter.NullSerializationTest.testCustomNulls",0,"public void testCustomNulls()throws Exception {ObjectMapper m=new ObjectMapper();m.setSerializerProvider(new MyNullProvider());assertEquals(""{\""name\"":\""foobar\""}"",m.writeValueAsString(new Bean1()));assertEquals(""{\""type\"":null}"",m.writeValueAsString(new Bean2()));}"
"com.fasterxml.jackson.databind.ser.filter.NullSerializationTest.testCustomNullForTrees",0,"public void testCustomNullForTrees()throws Exception {ObjectNode root=MAPPER.createObjectNode();root.putNull(""a"");assertEquals(""{\""a\"":null}"",MAPPER.writeValueAsString(root));DefaultSerializerProvider prov=new MyNullProvider();prov.setNullValueSerializer(new NullSerializer());ObjectMapper m=new ObjectMapper();m.setSerializerProvider(prov);assertEquals(""{\""a\"":\""foobar\""}"",m.writeValueAsString(root));}"
"com.fasterxml.jackson.databind.ser.filter.NullSerializationTest.testNullSerializerForProperty",0,"public void testNullSerializerForProperty()throws Exception {assertEquals(""{\""a\"":\""foobar\""}"",MAPPER.writeValueAsString(new BeanWithNullProps()));}"
"com.fasterxml.jackson.databind.ser.filter.NullSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testSimpleMethodJsonValue",0,"public void testSimpleMethodJsonValue()throws Exception {assertEquals(""\""abc\"""",MAPPER.writeValueAsString(new ValueClass<String>(""abc"")));assertEquals(""null"",MAPPER.writeValueAsString(new ValueClass<String>(null)));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testSimpleFieldJsonValue",0,"public void testSimpleFieldJsonValue()throws Exception {assertEquals(""\""abc\"""",MAPPER.writeValueAsString(new FieldValueClass<String>(""abc"")));assertEquals(""null"",MAPPER.writeValueAsString(new FieldValueClass<String>(null)));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testJsonValueWithUseSerializer",0,"public void testJsonValueWithUseSerializer()throws Exception {String result=serializeAsString(MAPPER,new ToStringValueClass<Integer>(Integer.valueOf(123)));assertEquals(""\""123\"""",result);}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testMixedJsonValue",0,"/** * Test for verifying that additional getters won't confuse serializer.*/public void testMixedJsonValue()throws Exception {String result=serializeAsString(MAPPER,new ToStringValueClass2(""xyz""));assertEquals(""\""xyz\"""",result);}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testDisabling",0,"public void testDisabling()throws Exception {assertEquals(aposToQuotes(""{'x':1,'y':2}""),MAPPER.writeValueAsString(new DisabledJsonValue()));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testValueWithStaticType",0,"public void testValueWithStaticType()throws Exception {assertEquals(""{\""a\"":\""a\"",\""b\"":\""b\""}"",MAPPER.writeValueAsString(new ValueWrapper()));ObjectMapper staticMapper=new ObjectMapper();staticMapper.configure(MapperFeature.USE_STATIC_TYPING,true);assertEquals(""{\""a\"":\""a\""}"",staticMapper.writeValueAsString(new ValueWrapper()));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testMapWithJsonValue",0,"public void testMapWithJsonValue()throws Exception {assertEquals(""{\""a\"":\""1\""}"",MAPPER.writeValueAsString(new MapBean()));assertEquals(""{\""b\"":\""2\""}"",MAPPER.writeValueAsString(new MapFieldBean()));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testWithMap",0,"public void testWithMap()throws Exception {assertEquals(""42"",MAPPER.writeValueAsString(new MapAsNumber()));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testWithList",0,"public void testWithList()throws Exception {assertEquals(""13"",MAPPER.writeValueAsString(new ListAsNumber()));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testInList",0,"public void testInList()throws Exception {IntExtBean bean=new IntExtBean();bean.add(1);bean.add(2);String json=MAPPER.writeValueAsString(bean);assertEquals(json,""{\""values\"":[{\""i\"":1},{\""i\"":2}]}"");}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testPolymorphicSerdeWithDelegate",0,"public void testPolymorphicSerdeWithDelegate()throws Exception {AdditionInterface adder=new AdditionInterfaceImpl(1);assertEquals(2,adder.add(1));String json=MAPPER.writeValueAsString(adder);assertEquals(""{\""boingo\"":\""boopsy\"",\""toAdd\"":1}"",json);assertEquals(2,MAPPER.readValue(json,AdditionInterface.class).add(1));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.testJsonValueWithCustomOverride",0,"public void testJsonValueWithCustomOverride()throws Exception {final Bean838 INPUT=new Bean838();assertEquals(quote(""value""),MAPPER.writeValueAsString(INPUT));ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule().addSerializer(Bean838.class,new Bean838Serializer()));assertEquals(""42"",mapper.writeValueAsString(INPUT));}"
"com.fasterxml.jackson.databind.ser.JsonValueTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestJacksonTypes.testLocation",0,"public void testLocation()throws IOException {File f=new File(""/tmp/test.json"");JsonLocation loc=new JsonLocation(f,-1,100,13);ObjectMapper mapper=new ObjectMapper();Map<String,Object> result=writeAndMap(mapper,loc);assertEquals(5,result.size());assertEquals(f.getAbsolutePath(),result.get(""sourceRef""));assertEquals(Integer.valueOf(-1),result.get(""charOffset""));assertEquals(Integer.valueOf(-1),result.get(""byteOffset""));assertEquals(Integer.valueOf(100),result.get(""lineNr""));assertEquals(Integer.valueOf(13),result.get(""columnNr""));}"
"com.fasterxml.jackson.databind.ser.TestJacksonTypes.testTokenBuffer",0,"/** * Verify that  {@link TokenBuffer}can be properly serializedautomatically,using the ""standard"" JSON sample document*/public void testTokenBuffer()throws Exception {JsonParser jp=createParserUsingReader(SAMPLE_DOC_JSON_SPEC);TokenBuffer tb=new TokenBuffer(null,false);while (jp.nextToken()!= null){tb.copyCurrentEvent(jp);}jp.close();String str=serializeAsString(tb);tb.close();verifyJsonSpecSampleDoc(createParserUsingReader(str),true);}"
"com.fasterxml.jackson.databind.ser.TestJacksonTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestInnerClass.testSimpleNonStaticInner",0,"public void testSimpleNonStaticInner()throws Exception {ObjectMapper mapper=new ObjectMapper();Dog input=new Dog(""Smurf"",true);String json=mapper.writeValueAsString(input);Dog output=mapper.readValue(json,Dog.class);assertEquals(""Smurf"",output.name);assertNotNull(output.brain);assertTrue(output.brain.isThinking);assertEquals(""Smurf"",output.brain.parentName());output.name=""Foo"";assertEquals(""Foo"",output.brain.parentName());input.brain=null;output=mapper.readValue(mapper.writeValueAsString(input),Dog.class);assertNull(output.brain);}"
"com.fasterxml.jackson.databind.deser.TestInnerClass.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.FormatFeatureUnwrapSingleTest.testWithArrayTypes",0,"public void testWithArrayTypes()throws Exception {assertEquals(aposToQuotes(""{'strings':'a','ints':[1],'bools':[true]}""),MAPPER.writeValueAsString(new WrapWriteWithArrays()));assertEquals(aposToQuotes(""{'strings':'a','ints':[1],'bools':true}""),MAPPER.writer().with(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED).writeValueAsString(new WrapWriteWithArrays()));assertEquals(aposToQuotes(""{'strings':'a','ints':[1],'bools':[true]}""),MAPPER.writer().without(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED).writeValueAsString(new WrapWriteWithArrays()));ObjectMapper mapper=new ObjectMapper();mapper.configOverride(String[].class).setFormat(JsonFormat.Value.empty().withFeature(JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED));assertEquals(aposToQuotes(""{'values':'a'}""),mapper.writeValueAsString(new StringArrayNotAnnoted(""a"")));}"
"com.fasterxml.jackson.databind.struct.FormatFeatureUnwrapSingleTest.testWithCollectionTypes",0,"public void testWithCollectionTypes()throws Exception {assertEquals(aposToQuotes(""{'strings':'a','ints':[1],'bools':[true],'enums':'B'}""),MAPPER.writeValueAsString(new WrapWriteWithCollections()));assertEquals(aposToQuotes(""{'strings':'a','ints':[1],'bools':true,'enums':'B'}""),MAPPER.writer().with(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED).writeValueAsString(new WrapWriteWithCollections()));assertEquals(aposToQuotes(""{'strings':'a','ints':[1],'bools':[true],'enums':'B'}""),MAPPER.writer().without(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED).writeValueAsString(new WrapWriteWithCollections()));}"
"com.fasterxml.jackson.databind.struct.FormatFeatureUnwrapSingleTest.testUnwrapWithPrimitiveArraysEtc",0,"public void testUnwrapWithPrimitiveArraysEtc()throws Exception {assertEquals(""{\""v\"":7}"",MAPPER.writeValueAsString(new UnwrapShortArray()));assertEquals(""{\""v\"":3}"",MAPPER.writeValueAsString(new UnwrapIntArray()));assertEquals(""{\""v\"":1}"",MAPPER.writeValueAsString(new UnwrapLongArray()));assertEquals(""{\""v\"":true}"",MAPPER.writeValueAsString(new UnwrapBooleanArray()));assertEquals(""{\""v\"":0.5}"",MAPPER.writeValueAsString(new UnwrapFloatArray()));assertEquals(""{\""v\"":0.25}"",MAPPER.writeValueAsString(new UnwrapDoubleArray()));assertEquals(""0.5"",MAPPER.writer().with(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED).writeValueAsString(new double[]{0.5}));assertEquals(""{\""v\"":\""foo\""}"",MAPPER.writeValueAsString(new UnwrapIterable()));assertEquals(""{\""v\"":\""x\""}"",MAPPER.writeValueAsString(new UnwrapIterable(""x"")));assertEquals(""{\""v\"":[\""x\"",null]}"",MAPPER.writeValueAsString(new UnwrapIterable(""x"",null)));assertEquals(""{\""v\"":\""foo\""}"",MAPPER.writeValueAsString(new UnwrapCollection()));assertEquals(""{\""v\"":\""x\""}"",MAPPER.writeValueAsString(new UnwrapCollection(""x"")));assertEquals(""{\""v\"":[\""x\"",null]}"",MAPPER.writeValueAsString(new UnwrapCollection(""x"",null)));assertEquals(""{\""v\"":\""http://foo\""}"",MAPPER.writeValueAsString(new UnwrapStringLike()));}"
"com.fasterxml.jackson.databind.struct.FormatFeatureUnwrapSingleTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.ext.JsonValueExtTypeIdTest.testDoubleMetadata",0,"public void testDoubleMetadata()throws IOException {DoubleMetadata doub=new DoubleMetadata();String expected=""{\""metadata\"":[{\""key\"":\""num\"",\""value\"":1234.25,\""@type\"":\""doubleValue\""}]}"";String json=MAPPER.writeValueAsString(doub);assertEquals(""Serialized json not equivalent"",expected,json);}"
"com.fasterxml.jackson.databind.jsontype.ext.JsonValueExtTypeIdTest.testDecimalMetadata",0,"public void testDecimalMetadata()throws IOException {DecimalMetadata dec=new DecimalMetadata();String expected=""{\""metadata\"":[{\""key\"":\""num\"",\""value\"":111.1,\""@type\"":\""decimalValue\""}]}"";String json=MAPPER.writeValueAsString(dec);assertEquals(""Serialized json not equivalent"",expected,json);}"
"com.fasterxml.jackson.databind.jsontype.ext.JsonValueExtTypeIdTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testNamedSingleArg",0,"public void testNamedSingleArg()throws Exception {SingleNamedStringBean bean=MAPPER.readValue(quote(""foobar""),SingleNamedStringBean.class);assertEquals(""foobar"",bean._ss);}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testSingleStringArgWithImplicitName",0,"public void testSingleStringArgWithImplicitName()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector(""value""));StringyBean bean=mapper.readValue(quote(""foobar""),StringyBean.class);assertEquals(""foobar"",bean.getValue());}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testSingleImplicitlyNamedNotDelegating",0,"public void testSingleImplicitlyNamedNotDelegating()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector(""value""));StringyBeanWithProps bean=mapper.readValue(""{\""value\"":\""x\""}"",StringyBeanWithProps.class);assertEquals(""x"",bean.getValue());}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testSingleExplicitlyNamedButDelegating",0,"public void testSingleExplicitlyNamedButDelegating()throws Exception {SingleNamedButStillDelegating bean=MAPPER.readValue(quote(""xyz""),SingleNamedButStillDelegating.class);assertEquals(""xyz"",bean.value);}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testExplicitFactory660a",0,"public void testExplicitFactory660a()throws Exception {ExplicitFactoryBeanA bean=MAPPER.readValue(quote(""abc""),ExplicitFactoryBeanA.class);assertNotNull(bean);assertEquals(""abc"",bean.value());}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testExplicitFactory660b",0,"public void testExplicitFactory660b()throws Exception {ExplicitFactoryBeanB bean2=MAPPER.readValue(quote(""def""),ExplicitFactoryBeanB.class);assertNotNull(bean2);assertEquals(""def"",bean2.value());}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.testSingleImplicitDelegating",0,"public void testSingleImplicitDelegating()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector(""value""));SingleArgWithImplicit bean=mapper.readValue(aposToQuotes(""{'x':1,'y':2}""),SingleArgWithImplicit.class);XY v=bean.getFoobar();assertNotNull(v);assertEquals(1,v.x);assertEquals(2,v.y);}"
"com.fasterxml.jackson.databind.creators.SingleArgCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.testAtomicBoolean",0,"public void testAtomicBoolean()throws Exception {assertEquals(""true"",MAPPER.writeValueAsString(new AtomicBoolean(true)));assertEquals(""false"",MAPPER.writeValueAsString(new AtomicBoolean(false)));}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.testAtomicInteger",0,"public void testAtomicInteger()throws Exception {assertEquals(""1"",MAPPER.writeValueAsString(new AtomicInteger(1)));assertEquals(""-9"",MAPPER.writeValueAsString(new AtomicInteger(-9)));}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.testAtomicLong",0,"public void testAtomicLong()throws Exception {assertEquals(""0"",MAPPER.writeValueAsString(new AtomicLong(0)));}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.testAtomicReference",0,"public void testAtomicReference()throws Exception {String[]strs=new String[]{""abc""};assertEquals(""[\""abc\""]"",MAPPER.writeValueAsString(new AtomicReference<String[]>(strs)));}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.testCustomSerializer",0,"public void testCustomSerializer()throws Exception {final String VALUE=""fooBAR"";String json=MAPPER.writeValueAsString(new UCStringWrapper(VALUE));assertEquals(json,aposToQuotes(""{'value':'FOOBAR'}""));}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.testContextualAtomicReference",0,"public void testContextualAtomicReference()throws Exception {SimpleDateFormat df=new SimpleDateFormat(""yyyy/MM/dd"");df.setTimeZone(TimeZone.getTimeZone(""UTC""));final ObjectMapper mapper=objectMapper();mapper.setDateFormat(df);ContextualOptionals input=new ContextualOptionals();input.date=new AtomicReference<>(new Date(0L));input.date1=new AtomicReference<>(new Date(0L));input.date2=new AtomicReference<>(new Date(0L));final String json=mapper.writeValueAsString(input);assertEquals(aposToQuotes(""{'date1':'1970+01+01','date2':'1970*01*01','date':'1970/01/01'}""),json);}"
"com.fasterxml.jackson.databind.ser.jdk.AtomicTypeSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimple",0,"public void testSimple(){POJOPropertiesCollector coll=collector(MAPPER,Simple.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""value"");assertNotNull(prop);assertTrue(prop.hasSetter());assertTrue(prop.hasGetter());assertTrue(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleFieldVisibility",0,"public void testSimpleFieldVisibility(){POJOPropertiesCollector coll=collector(MAPPER,SimpleFieldDeser.class,false);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""values"");assertNotNull(prop);assertFalse(prop.hasSetter());assertFalse(prop.hasGetter());assertTrue(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleGetterVisibility",0,"public void testSimpleGetterVisibility(){POJOPropertiesCollector coll=collector(MAPPER,SimpleGetterVisibility.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""a"");assertNotNull(prop);assertFalse(prop.hasSetter());assertTrue(prop.hasGetter());assertFalse(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testEmpty",0,"public void testEmpty(){POJOPropertiesCollector coll=collector(MAPPER,Empty.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(0,props.size());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testPartialIgnore",0,"public void testPartialIgnore(){POJOPropertiesCollector coll=collector(MAPPER,IgnoredSetter.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""value"");assertNotNull(prop);assertFalse(prop.hasSetter());assertTrue(prop.hasGetter());assertTrue(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleRenamed",0,"public void testSimpleRenamed(){POJOPropertiesCollector coll=collector(MAPPER,RenamedProperties.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""x"");assertNotNull(prop);assertTrue(prop.hasSetter());assertTrue(prop.hasGetter());assertTrue(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleRenamed2",0,"public void testSimpleRenamed2(){POJOPropertiesCollector coll=collector(MAPPER,RenamedProperties2.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""renamed"");assertNotNull(prop);assertTrue(prop.hasSetter());assertTrue(prop.hasGetter());assertFalse(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testMergeWithRename",0,"public void testMergeWithRename(){POJOPropertiesCollector coll=collector(MAPPER,MergedProperties.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""x"");assertNotNull(prop);assertTrue(prop.hasSetter());assertFalse(prop.hasGetter());assertTrue(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleIgnoreAndRename",0,"public void testSimpleIgnoreAndRename(){POJOPropertiesCollector coll=collector(MAPPER,IgnoredRenamedSetter.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""y"");assertNotNull(prop);assertTrue(prop.hasSetter());assertFalse(prop.hasGetter());assertFalse(prop.hasField());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testGlobalVisibilityForGetters",0,"public void testGlobalVisibilityForGetters(){ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.AUTO_DETECT_GETTERS,false);POJOPropertiesCollector coll=collector(m,SimpleGetterVisibility.class,true);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(0,props.size());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testCollectionOfIgnored",0,"public void testCollectionOfIgnored(){POJOPropertiesCollector coll=collector(MAPPER,ImplicitIgnores.class,false);Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());Collection<String> ign=coll.getIgnoredPropertyNames();assertEquals(2,ign.size());assertTrue(ign.contains(""a""));assertTrue(ign.contains(""b""));}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleOrderingForDeserialization",0,"public void testSimpleOrderingForDeserialization(){POJOPropertiesCollector coll=collector(MAPPER,SortedProperties.class,false);List<BeanPropertyDefinition> props=coll.getProperties();assertEquals(4,props.size());assertEquals(""a"",props.get(0).getName());assertEquals(""b"",props.get(1).getName());assertEquals(""c"",props.get(2).getName());assertEquals(""d"",props.get(3).getName());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testSimpleWithType",0,"public void testSimpleWithType(){POJOPropertiesCollector coll=collector(MAPPER,TypeTestBean.class,true);List<BeanPropertyDefinition> props=coll.getProperties();assertEquals(1,props.size());assertEquals(""value"",props.get(0).getName());AnnotatedMember m=props.get(0).getAccessor();assertTrue(m instanceof AnnotatedMethod);assertEquals(Integer.class,m.getRawType());coll=collector(MAPPER,TypeTestBean.class,false);props=coll.getProperties();assertEquals(1,props.size());assertEquals(""value"",props.get(0).getName());m=props.get(0).getMutator();assertEquals(AnnotatedParameter.class,m.getClass());assertEquals(String.class,m.getRawType());}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testInnerClassWithAnnotationsInCreator",0,"public void testInnerClassWithAnnotationsInCreator()throws Exception {BasicBeanDescription beanDesc;beanDesc=MAPPER.getSerializationConfig().introspect(MAPPER.constructType(Issue701Bean.class));assertNotNull(beanDesc);beanDesc=MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(Issue701Bean.class));assertNotNull(beanDesc);}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testUseAnnotationsFalse",0,"public void testUseAnnotationsFalse()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(MapperFeature.USE_ANNOTATIONS,false);BasicBeanDescription beanDesc=mapper.getSerializationConfig().introspect(mapper.constructType(Jackson703.class));assertNotNull(beanDesc);Jackson703 bean=new Jackson703();String json=mapper.writeValueAsString(bean);assertNotNull(json);}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testJackson744",0,"public void testJackson744()throws Exception {BeanDescription beanDesc=MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(Issue744Bean.class));assertNotNull(beanDesc);AnnotatedMember setter=beanDesc.findAnySetterAccessor();assertNotNull(setter);assertEquals(""addAdditionalProperty"",setter.getName());assertTrue(setter instanceof AnnotatedMethod);}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testPropertyDesc",0,"public void testPropertyDesc()throws Exception {BeanDescription beanDesc=MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(PropDescBean.class));_verifyProperty(beanDesc,true,false,""13"");beanDesc=MAPPER.getSerializationConfig().introspect(MAPPER.constructType(PropDescBean.class));_verifyProperty(beanDesc,true,false,""13"");}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testPropertyIndex",0,"public void testPropertyIndex()throws Exception {BeanDescription beanDesc=MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(PropDescBean.class));_verifyProperty(beanDesc,false,true,""13"");beanDesc=MAPPER.getSerializationConfig().introspect(MAPPER.constructType(PropDescBean.class));_verifyProperty(beanDesc,false,true,""13"");}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testDuplicateGetters",0,"public void testDuplicateGetters()throws Exception {POJOPropertiesCollector coll=collector(MAPPER,DuplicateGetterBean.class,true);List<BeanPropertyDefinition> props=coll.getProperties();assertEquals(1,props.size());BeanPropertyDefinition prop=props.get(0);assertEquals(""bloop"",prop.getName());assertTrue(prop.getGetter().hasAnnotation(A.class));assertTrue(prop.getGetter().hasAnnotation(B.class));}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.testDuplicateGettersCreator",0,"public void testDuplicateGettersCreator()throws Exception {POJOPropertiesCollector coll=collector(MAPPER,DuplicateGetterCreatorBean.class,true);List<BeanPropertyDefinition> props=coll.getProperties();assertEquals(1,props.size());POJOPropertyBuilder prop=(POJOPropertyBuilder)props.get(0);assertEquals(""bloop"",prop.getName());assertTrue(prop._getters.value.hasAnnotation(A.class));assertNotNull(prop._getters.next);assertTrue(prop._getters.next.value.hasAnnotation(A.class));}"
"com.fasterxml.jackson.databind.introspect.TestPOJOPropertiesCollector.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestBackRefsWithPolymorphic.testDeserialize",0,"public void testDeserialize()throws IOException {PropertySheet input=MAPPER.readValue(JSON,PropertySheet.class);assertEquals(JSON,MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.struct.TestBackRefsWithPolymorphic.testSerialize",0,"public void testSerialize()throws IOException {PropertySheet sheet=new PropertySheetImpl();sheet.addProperty(new StringPropertyImpl(""p1name"",""p1value""));sheet.addProperty(new StringPropertyImpl(""p2name"",""p2value""));String actual=MAPPER.writeValueAsString(sheet);assertEquals(JSON,actual);}"
"com.fasterxml.jackson.databind.struct.TestBackRefsWithPolymorphic.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.ArrayDelegatorCreatorForCollectionTest.testUnmodifiable",0,"public void testUnmodifiable()throws Exception {ObjectMapper mapper=new ObjectMapper();Class<?> unmodSetType=Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();mapper.addMixIn(unmodSetType,UnmodifiableSetMixin.class);mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);final String EXPECTED_JSON=""[\"""" + unmodSetType.getName()+ ""\"",[]]"";Set<?> foo=mapper.readValue(EXPECTED_JSON,Set.class);assertTrue(foo.isEmpty());}"
"com.fasterxml.jackson.databind.creators.ArrayDelegatorCreatorForCollectionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.ObjectWithCreator1261Test.testObjectIds1261",0,"public void testObjectIds1261()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(SerializationFeature.INDENT_OUTPUT);mapper.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);Answer initialAnswer=createInitialAnswer();String initialAnswerString=mapper.writeValueAsString(initialAnswer);JsonNode tree=mapper.readTree(initialAnswerString);Answer deserializedAnswer=mapper.readValue(initialAnswerString,Answer.class);String reserializedAnswerString=mapper.writeValueAsString(deserializedAnswer);JsonNode newTree=mapper.readTree(reserializedAnswerString);if (!tree.equals(newTree)){fail(""Original and recovered Json are different. Recovered = \n"" + reserializedAnswerString + ""\n"");}}"
"com.fasterxml.jackson.databind.objectid.ObjectWithCreator1261Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.testInvalidForDeserializers",0,"public void testInvalidForDeserializers()throws Exception {SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion(),(Map<Class<?>,JsonDeserializer<?>>)null);try {mod.addDeserializer(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as deserializer"");}try {mod.addKeyDeserializer(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as key deserializer"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.testInvalidForSerializers",0,"public void testInvalidForSerializers()throws Exception {SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion(),(List<JsonSerializer<?>>)null);try {mod.addSerializer(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as serializer"");}try {mod.addSerializer((JsonSerializer<?>)null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as serializer"");}try {mod.addKeySerializer(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as key serializer"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.testInvalidAbstractTypeMapping",0,"public void testInvalidAbstractTypeMapping()throws Exception {Map<Class<?>,JsonDeserializer<?>> desers=Collections.emptyMap();List<JsonSerializer<?>> sers=Collections.emptyList();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion(),desers,sers);try {mod.addAbstractTypeMapping(null,String.class);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as abstract type to map"");}try {mod.addAbstractTypeMapping(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as concrete type to map to"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.testInvalidSubtypeMappings",0,"public void testInvalidSubtypeMappings()throws Exception {SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion(),null,null);try {mod.registerSubtypes(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as subtype to register"");}try {mod.registerSubtypes(new NamedType(Integer.class),(NamedType)null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as subtype to register"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.testInvalidValueInstantiator",0,"public void testInvalidValueInstantiator()throws Exception {SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());try {mod.addValueInstantiator(null,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as class to register value instantiator for"");}try {mod.addValueInstantiator(CharSequence.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as value instantiator"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.testInvalidMixIn",0,"public void testInvalidMixIn()throws Exception {SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());try {mod.setMixInAnnotation(null,String.class);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as target type"");}try {mod.setMixInAnnotation(String.class,null);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""Can not pass `null` as mixin class"");}}"
"com.fasterxml.jackson.databind.module.SimpleModuleArgCheckTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.MixinsWithBundlesTest.testMixinWithBundles",0,"public void testMixinWithBundles()throws Exception {ObjectMapper mapper=new ObjectMapper().addMixIn(Foo.class,FooMixin.class);String result=mapper.writeValueAsString(new Foo(""result""));assertEquals(""{\""bar\"":\""result\""}"",result);}"
"com.fasterxml.jackson.databind.mixins.MixinsWithBundlesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestGenericTypes.testIssue468a",0,"@SuppressWarnings(""unchecked"")public void testIssue468a()throws Exception {Person1 p1=new Person1(""John"");p1.setAccount(new Key<Account>(new Account(""something"",42L)));String json=MAPPER.writeValueAsString(p1);Map<String,Object> map=MAPPER.readValue(json,Map.class);assertEquals(""John"",map.get(""name""));Object ob=map.get(""account"");assertNotNull(ob);Map<String,Object> acct=(Map<String,Object>)ob;Object idOb=acct.get(""id"");assertNotNull(idOb);Map<String,Object> key=(Map<String,Object>)idOb;assertEquals(""something"",key.get(""name""));assertEquals(Integer.valueOf(42),key.get(""id""));}"
"com.fasterxml.jackson.databind.ser.TestGenericTypes.testIssue468b",0,"@SuppressWarnings(""unchecked"")public void testIssue468b()throws Exception {Person2 p2=new Person2(""John"");List<Key<Account>> accounts=new ArrayList<Key<Account>>();accounts.add(new Key<Account>(new Account(""a"",42L)));accounts.add(new Key<Account>(new Account(""b"",43L)));accounts.add(new Key<Account>(new Account(""c"",44L)));p2.setAccounts(accounts);String json=MAPPER.writeValueAsString(p2);Map<String,Object> map=MAPPER.readValue(json,Map.class);assertEquals(""John"",map.get(""name""));Object ob=map.get(""accounts"");assertNotNull(ob);List<?> acctList=(List<?>)ob;assertEquals(3,acctList.size());}"
"com.fasterxml.jackson.databind.ser.TestGenericTypes.testUnboundTypes",0,"/** * Test related to unbound type variables,usually resulting from inner classes of generic classes (like Sets).*/public void testUnboundTypes()throws Exception {GenericBogusWrapper<Integer> list=new GenericBogusWrapper<Integer>(Integer.valueOf(7));String json=MAPPER.writeValueAsString(list);assertEquals(""{\""wrapped\"":{\""value\"":7}}"",json);}"
"com.fasterxml.jackson.databind.ser.TestGenericTypes.testRootTypeForCollections727",0,"public void testRootTypeForCollections727()throws Exception {List<Base727> input=new ArrayList<Base727>();input.add(new Impl727(1,2));final String EXP=aposToQuotes(""[{'a':1,'b':2}]"");assertEquals(EXP,MAPPER.writeValueAsString(input));assertEquals(EXP,MAPPER.writer().writeValueAsString(input));TypeReference<?> typeRef=new TypeReference<List<Base727>>(){};assertEquals(EXP,MAPPER.writer().forType(typeRef).writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestGenericTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testBooleanPrimitiveArrayUnwrap",0,"public void testBooleanPrimitiveArrayUnwrap()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);BooleanBean result=mapper.readValue(new StringReader(""{\""v\"":[true]}""),BooleanBean.class);assertTrue(result._v);_verifyMultiValueArrayFail(""[{\""v\"":[true,true]}]"",BooleanBean.class);result=mapper.readValue(""{\""v\"":[null]}"",BooleanBean.class);assertNotNull(result);assertFalse(result._v);result=mapper.readValue(""[{\""v\"":[null]}]"",BooleanBean.class);assertNotNull(result);assertFalse(result._v);boolean[]array=mapper.readValue(new StringReader(""[[null]]""),boolean[].class);assertNotNull(array);assertEquals(1,array.length);assertFalse(array[0]);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testSingleElementScalarArrays",0,"public void testSingleElementScalarArrays()throws Exception {final int intTest=932832;final double doubleTest=32.3234;final long longTest=2374237428374293423L;final short shortTest=(short)intTest;final float floatTest=84.3743f;final byte byteTest=(byte)43;final char charTest='c';final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);final int intValue=mapper.readValue(asArray(intTest),Integer.TYPE);assertEquals(intTest,intValue);final Integer integerWrapperValue=mapper.readValue(asArray(Integer.valueOf(intTest)),Integer.class);assertEquals(Integer.valueOf(intTest),integerWrapperValue);final double doubleValue=mapper.readValue(asArray(doubleTest),Double.class);assertEquals(doubleTest,doubleValue);final Double doubleWrapperValue=mapper.readValue(asArray(Double.valueOf(doubleTest)),Double.class);assertEquals(Double.valueOf(doubleTest),doubleWrapperValue);final long longValue=mapper.readValue(asArray(longTest),Long.TYPE);assertEquals(longTest,longValue);final Long longWrapperValue=mapper.readValue(asArray(Long.valueOf(longTest)),Long.class);assertEquals(Long.valueOf(longTest),longWrapperValue);final short shortValue=mapper.readValue(asArray(shortTest),Short.TYPE);assertEquals(shortTest,shortValue);final Short shortWrapperValue=mapper.readValue(asArray(Short.valueOf(shortTest)),Short.class);assertEquals(Short.valueOf(shortTest),shortWrapperValue);final float floatValue=mapper.readValue(asArray(floatTest),Float.TYPE);assertEquals(floatTest,floatValue);final Float floatWrapperValue=mapper.readValue(asArray(Float.valueOf(floatTest)),Float.class);assertEquals(Float.valueOf(floatTest),floatWrapperValue);final byte byteValue=mapper.readValue(asArray(byteTest),Byte.TYPE);assertEquals(byteTest,byteValue);final Byte byteWrapperValue=mapper.readValue(asArray(Byte.valueOf(byteTest)),Byte.class);assertEquals(Byte.valueOf(byteTest),byteWrapperValue);final char charValue=mapper.readValue(asArray(quote(String.valueOf(charTest))),Character.TYPE);assertEquals(charTest,charValue);final Character charWrapperValue=mapper.readValue(asArray(quote(String.valueOf(charTest))),Character.class);assertEquals(Character.valueOf(charTest),charWrapperValue);final boolean booleanTrueValue=mapper.readValue(asArray(true),Boolean.TYPE);assertTrue(booleanTrueValue);final boolean booleanFalseValue=mapper.readValue(asArray(false),Boolean.TYPE);assertFalse(booleanFalseValue);final Boolean booleanWrapperTrueValue=mapper.readValue(asArray(Boolean.valueOf(true)),Boolean.class);assertEquals(Boolean.TRUE,booleanWrapperTrueValue);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testSingleElementArrayDisabled",0,"public void testSingleElementArrayDisabled()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);try {mapper.readValue(""[42]"",Integer.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[42]"",Integer.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[42342342342342]"",Long.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[42342342342342342]"",Long.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[42]"",Short.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[42]"",Short.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[327.2323]"",Float.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[82.81902]"",Float.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[22]"",Byte.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[22]"",Byte.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""['d']"",Character.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""['d']"",Character.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[true]"",Boolean.class);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}try {mapper.readValue(""[true]"",Boolean.TYPE);fail(""Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException exp){}}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testMultiValueArrayException",0,"public void testMultiValueArrayException()throws IOException {_verifyMultiValueArrayFail(""[42,42]"",Integer.class);_verifyMultiValueArrayFail(""[42,42]"",Integer.TYPE);_verifyMultiValueArrayFail(""[42342342342342,42342342342342]"",Long.class);_verifyMultiValueArrayFail(""[42342342342342342,42342342342342]"",Long.TYPE);_verifyMultiValueArrayFail(""[42,42]"",Short.class);_verifyMultiValueArrayFail(""[42,42]"",Short.TYPE);_verifyMultiValueArrayFail(""[22,23]"",Byte.class);_verifyMultiValueArrayFail(""[22,23]"",Byte.TYPE);_verifyMultiValueArrayFail(""[327.2323,327.2323]"",Float.class);_verifyMultiValueArrayFail(""[82.81902,327.2323]"",Float.TYPE);_verifyMultiValueArrayFail(""[42.273,42.273]"",Double.class);_verifyMultiValueArrayFail(""[42.2723,42.273]"",Double.TYPE);_verifyMultiValueArrayFail(asArray(quote(""c"")+ "","" + quote(""d"")),Character.class);_verifyMultiValueArrayFail(asArray(quote(""c"")+ "","" + quote(""d"")),Character.TYPE);_verifyMultiValueArrayFail(""[true,false]"",Boolean.class);_verifyMultiValueArrayFail(""[true,false]"",Boolean.TYPE);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testSingleString",0,"public void testSingleString()throws Exception {String value=""FOO!"";String result=MAPPER.readValue(""\"""" + value + ""\"""",String.class);assertEquals(value,result);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testSingleStringWrapped",0,"public void testSingleStringWrapped()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);String value=""FOO!"";try {mapper.readValue(""[\"""" + value + ""\""]"",String.class);fail(""Exception not thrown when attempting to unwrap a single value 'String' array into a simple String"");}catch(MismatchedInputException exp){verifyException(exp,""Can not deserialize"");verifyException(exp,""out of START_ARRAY"");}mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);try {mapper.readValue(""[\"""" + value + ""\"",\""""+ value+ ""\""]"",String.class);fail(""Exception not thrown when attempting to unwrap a single value 'String' array that contained more than one value into a simple String"");}catch(MismatchedInputException exp){verifyException(exp,""Attempted to unwrap"");}String result=mapper.readValue(""[\"""" + value + ""\""]"",String.class);assertEquals(value,result);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testBigDecimal",0,"public void testBigDecimal()throws Exception {final ObjectMapper mapper=objectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);BigDecimal value=new BigDecimal(""0.001"");BigDecimal result=mapper.readValue(value.toString(),BigDecimal.class);assertEquals(value,result);try {mapper.readValue(""["" + value.toString()+ ""]"",BigDecimal.class);fail(""Exception was not thrown when attempting to read a single value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled"");}catch(MismatchedInputException exp){verifyException(exp,""Can not deserialize"");verifyException(exp,""out of START_ARRAY"");}mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);result=mapper.readValue(""["" + value.toString()+ ""]"",BigDecimal.class);assertEquals(value,result);try {mapper.readValue(""["" + value.toString()+ "",""+ value.toString()+ ""]"",BigDecimal.class);fail(""Exception was not thrown when attempting to read a muti value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled"");}catch(MismatchedInputException exp){verifyException(exp,""Attempted to unwrap"");}}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testBigInteger",0,"public void testBigInteger()throws Exception {final ObjectMapper mapper=objectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);BigInteger value=new BigInteger(""-1234567890123456789012345567809"");BigInteger result=mapper.readValue(value.toString(),BigInteger.class);assertEquals(value,result);try {mapper.readValue(""["" + value.toString()+ ""]"",BigInteger.class);fail(""Exception was not thrown when attempting to read a single value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled"");}catch(MismatchedInputException exp){verifyException(exp,""Can not deserialize"");verifyException(exp,""out of START_ARRAY"");}mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);result=mapper.readValue(""["" + value.toString()+ ""]"",BigInteger.class);assertEquals(value,result);try {mapper.readValue(""["" + value.toString()+ "",""+ value.toString()+ ""]"",BigInteger.class);fail(""Exception was not thrown when attempting to read a multi-value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled"");}catch(MismatchedInputException exp){verifyException(exp,""Attempted to unwrap"");}}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testClassAsArray",0,"public void testClassAsArray()throws Exception {Class<?> result=MAPPER.readerFor(Class.class).with(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).readValue(quote(String.class.getName()));assertEquals(String.class,result);try {MAPPER.readerFor(Class.class).without(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).readValue(""["" + quote(String.class.getName())+ ""]"");fail(""Did not throw exception when UNWRAP_SINGLE_VALUE_ARRAYS feature was disabled and attempted to read a Class array containing one element"");}catch(MismatchedInputException e){verifyException(e,""out of START_ARRAY token"");}_verifyMultiValueArrayFail(""["" + quote(Object.class.getName())+ "",""+ quote(Object.class.getName())+ ""]"",Class.class);result=MAPPER.readerFor(Class.class).with(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).readValue(""["" + quote(String.class.getName())+ ""]"");assertEquals(String.class,result);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testURIAsArray",0,"public void testURIAsArray()throws Exception {final ObjectReader reader=MAPPER.readerFor(URI.class);final URI value=new URI(""http://foo.com"");try {reader.without(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).readValue(""[\"""" + value.toString()+ ""\""]"");fail(""Did not throw exception for single value array when UNWRAP_SINGLE_VALUE_ARRAYS is disabled"");}catch(MismatchedInputException e){verifyException(e,""out of START_ARRAY token"");}_verifyMultiValueArrayFail(""[\"""" + value.toString()+ ""\"",\""""+ value.toString()+ ""\""]"",URI.class);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.testUUIDAsArray",0,"public void testUUIDAsArray()throws Exception {final ObjectReader reader=MAPPER.readerFor(UUID.class);final String uuidStr=""76e6d183-5f68-4afa-b94a-922c1fdb83f8"";UUID uuid=UUID.fromString(uuidStr);try {NO_UNWRAPPING_READER.forType(UUID.class).readValue(""["" + quote(uuidStr)+ ""]"");fail(""Exception was not thrown when UNWRAP_SINGLE_VALUE_ARRAYS is disabled and attempted to read a single value array as a single element"");}catch(MismatchedInputException e){verifyException(e,""out of START_ARRAY token"");}assertEquals(uuid,reader.with(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS).readValue(""["" + quote(uuidStr)+ ""]""));_verifyMultiValueArrayFail(""["" + quote(uuidStr)+ "",""+ quote(uuidStr)+ ""]"",UUID.class);}"
"com.fasterxml.jackson.databind.struct.UnwrapSingleArrayScalarsTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDefaultReadTest.testWithoutCustomFeatures",0,"public void testWithoutCustomFeatures()throws Exception {final ObjectReader r=MAPPER.reader();_verifyOkDeserialization(r,""ZERO"",SimpleEnum.class,SimpleEnum.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnum.class,SimpleEnum.ONE);_verifyOkDeserialization(r,""0"",SimpleEnum.class,SimpleEnum.ZERO);_verifyOkDeserialization(r,""1"",SimpleEnum.class,SimpleEnum.ONE);_verifyFailingDeserialization(r,""TWO"",SimpleEnum.class);_verifyFailingDeserialization(r,""2"",SimpleEnum.class);_verifyOkDeserialization(r,""ZERO"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ONE);_verifyFailingDeserialization(r,""TWO"",SimpleEnumWithDefault.class);_verifyOkDeserialization(r,""0"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ONE);_verifyFailingDeserialization(r,""2"",SimpleEnumWithDefault.class);_verifyFailingDeserialization(r,""ZERO"",CustomEnum.class);_verifyFailingDeserialization(r,""ONE"",CustomEnum.class);_verifyFailingDeserialization(r,""TWO"",CustomEnum.class);_verifyOkDeserialization(r,""0"",CustomEnum.class,CustomEnum.ZERO);_verifyOkDeserialization(r,""1"",CustomEnum.class,CustomEnum.ONE);_verifyFailingDeserialization(r,""2"",CustomEnum.class);_verifyFailingDeserialization(r,""ZERO"",CustomEnumWithDefault.class);_verifyFailingDeserialization(r,""ONE"",CustomEnumWithDefault.class);_verifyFailingDeserialization(r,""TWO"",CustomEnumWithDefault.class);_verifyOkDeserialization(r,""0"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",CustomEnumWithDefault.class,CustomEnumWithDefault.ONE);_verifyFailingDeserialization(r,""2"",CustomEnumWithDefault.class);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDefaultReadTest.testWithFailOnNumbers",0,"public void testWithFailOnNumbers()throws Exception {ObjectReader r=MAPPER.reader().with(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);_verifyOkDeserialization(r,""ZERO"",SimpleEnum.class,SimpleEnum.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnum.class,SimpleEnum.ONE);_verifyFailingDeserialization(r,""TWO"",SimpleEnum.class);_verifyFailingDeserialization(r,""0"",SimpleEnum.class);_verifyFailingDeserialization(r,""1"",SimpleEnum.class);_verifyFailingDeserialization(r,""2"",SimpleEnum.class);_verifyOkDeserialization(r,""ZERO"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ONE);_verifyFailingDeserialization(r,""TWO"",SimpleEnumWithDefault.class);_verifyFailingDeserialization(r,""0"",SimpleEnumWithDefault.class);_verifyFailingDeserialization(r,""1"",SimpleEnumWithDefault.class);_verifyFailingDeserialization(r,""2"",SimpleEnumWithDefault.class);_verifyFailingDeserialization(r,""ZERO"",CustomEnum.class);_verifyFailingDeserialization(r,""ONE"",CustomEnum.class);_verifyFailingDeserialization(r,""TWO"",CustomEnum.class);_verifyOkDeserialization(r,""0"",CustomEnum.class,CustomEnum.ZERO);_verifyOkDeserialization(r,""1"",CustomEnum.class,CustomEnum.ONE);_verifyFailingDeserialization(r,""2"",CustomEnum.class);_verifyFailingDeserialization(r,""ZERO"",CustomEnumWithDefault.class);_verifyFailingDeserialization(r,""ONE"",CustomEnumWithDefault.class);_verifyFailingDeserialization(r,""TWO"",CustomEnumWithDefault.class);_verifyOkDeserialization(r,""0"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",CustomEnumWithDefault.class,CustomEnumWithDefault.ONE);_verifyFailingDeserialization(r,""2"",CustomEnumWithDefault.class);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDefaultReadTest.testWithReadUnknownAsDefault",0,"public void testWithReadUnknownAsDefault()throws Exception {ObjectReader r=MAPPER.reader().with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);_verifyOkDeserialization(r,""ZERO"",SimpleEnum.class,SimpleEnum.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnum.class,SimpleEnum.ONE);_verifyFailingDeserialization(r,""TWO"",SimpleEnum.class);_verifyOkDeserialization(r,""0"",SimpleEnum.class,SimpleEnum.ZERO);_verifyOkDeserialization(r,""1"",SimpleEnum.class,SimpleEnum.ONE);_verifyFailingDeserialization(r,""2"",SimpleEnum.class);_verifyOkDeserialization(r,""ZERO"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ONE);_verifyOkDeserialization(r,""TWO"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""0"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ONE);_verifyOkDeserialization(r,""2"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyFailingDeserialization(r,""ZERO"",CustomEnum.class);_verifyFailingDeserialization(r,""ONE"",CustomEnum.class);_verifyFailingDeserialization(r,""TWO"",CustomEnum.class);_verifyOkDeserialization(r,""0"",CustomEnum.class,CustomEnum.ZERO);_verifyOkDeserialization(r,""1"",CustomEnum.class,CustomEnum.ONE);_verifyFailingDeserialization(r,""2"",CustomEnum.class);_verifyOkDeserialization(r,""ZERO"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""ONE"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""TWO"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""0"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",CustomEnumWithDefault.class,CustomEnumWithDefault.ONE);_verifyOkDeserialization(r,""2"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDefaultReadTest.testWithFailOnNumbersAndReadUnknownAsDefault",0,"public void testWithFailOnNumbersAndReadUnknownAsDefault()throws Exception {ObjectReader r=MAPPER.reader().with(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS).with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);_verifyOkDeserialization(r,""ZERO"",SimpleEnum.class,SimpleEnum.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnum.class,SimpleEnum.ONE);_verifyFailingDeserialization(r,""TWO"",SimpleEnum.class);_verifyFailingDeserialization(r,""0"",SimpleEnum.class);_verifyFailingDeserialization(r,""1"",SimpleEnum.class);_verifyFailingDeserialization(r,""2"",SimpleEnum.class);_verifyOkDeserialization(r,""ZERO"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""ONE"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ONE);_verifyOkDeserialization(r,""TWO"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyFailingDeserialization(r,""ZERO"",CustomEnum.class);_verifyFailingDeserialization(r,""ONE"",CustomEnum.class);_verifyFailingDeserialization(r,""TWO"",CustomEnum.class);_verifyOkDeserialization(r,""0"",CustomEnum.class,CustomEnum.ZERO);_verifyOkDeserialization(r,""1"",CustomEnum.class,CustomEnum.ONE);_verifyFailingDeserialization(r,""2"",CustomEnum.class);_verifyOkDeserialization(r,""ZERO"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""ONE"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""TWO"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""0"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",CustomEnumWithDefault.class,CustomEnumWithDefault.ONE);_verifyOkDeserialization(r,""0"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""1"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""2"",SimpleEnumWithDefault.class,SimpleEnumWithDefault.ZERO);_verifyOkDeserialization(r,""2"",CustomEnumWithDefault.class,CustomEnumWithDefault.ZERO);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDefaultReadTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.TestExceptionHandlingWithJsonCreatorDeserialization.testShouldThrowJsonMappingExceptionWithPathReference",0,"public void testShouldThrowJsonMappingExceptionWithPathReference()throws IOException {ObjectMapper mapper=new ObjectMapper();String input=""{\""bar\"":{\""baz\"":{qux:\""quxValue\""))}"";final String THIS=getClass().getName();try {mapper.readValue(input,Foo.class);fail(""Upsss! Exception has not been thrown."");}catch(JsonMappingException ex){assertEquals(THIS + ""$Foo[\""bar\""]->"" + THIS+ ""$Bar[\""baz\""]"",ex.getPathReference());}}"
"com.fasterxml.jackson.databind.exc.TestExceptionHandlingWithJsonCreatorDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testLowerCaseStrategyStandAlone",0,"/** * Unit test to verify translations of  {@link PropertyNamingStrategy#SNAKE_CASE}outside the context of an ObjectMapper.*/public void testLowerCaseStrategyStandAlone(){for(Object[]pair : SNAKE_CASE_NAME_TRANSLATIONS){String translatedJavaName=PropertyNamingStrategy.SNAKE_CASE.nameForField(null,null,(String)pair[0]);assertEquals((String)pair[1],translatedJavaName);}}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testLowerCaseTranslations",0,"public void testLowerCaseTranslations()throws Exception {String json=_lcWithUndescoreMapper.writeValueAsString(new PersonBean(""Joe"",""Sixpack"",42));assertEquals(""{\""first_name\"":\""Joe\"",\""last_name\"":\""Sixpack\"",\""age\"":42}"",json);PersonBean result=_lcWithUndescoreMapper.readValue(json,PersonBean.class);assertEquals(""Joe"",result.firstName);assertEquals(""Sixpack"",result.lastName);assertEquals(42,result.age);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testLowerCaseAcronymsTranslations",0,"public void testLowerCaseAcronymsTranslations()throws Exception {String json=_lcWithUndescoreMapper.writeValueAsString(new Acronyms(""world wide web"",""http://jackson.codehaus.org"",""/path1/,/path2/""));assertEquals(""{\""www\"":\""world wide web\"",\""some_url\"":\""http://jackson.codehaus.org\"",\""some_uris\"":\""/path1/,/path2/\""}"",json);Acronyms result=_lcWithUndescoreMapper.readValue(json,Acronyms.class);assertEquals(""world wide web"",result.WWW);assertEquals(""http://jackson.codehaus.org"",result.someURL);assertEquals(""/path1/,/path2/"",result.someURIs);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testLowerCaseOtherNonStandardNamesTranslations",0,"public void testLowerCaseOtherNonStandardNamesTranslations()throws Exception {String json=_lcWithUndescoreMapper.writeValueAsString(new OtherNonStandardNames(""Results"",""_User"",""___"",""$User""));assertEquals(""{\""results\"":\""Results\"",\""user\"":\""_User\"",\""__\"":\""___\"",\""$_user\"":\""$User\""}"",json);OtherNonStandardNames result=_lcWithUndescoreMapper.readValue(json,OtherNonStandardNames.class);assertEquals(""Results"",result.Results);assertEquals(""_User"",result._User);assertEquals(""___"",result.___);assertEquals(""$User"",result.$User);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testLowerCaseUnchangedNames",0,"public void testLowerCaseUnchangedNames()throws Exception {String json=_lcWithUndescoreMapper.writeValueAsString(new UnchangedNames(""from_user"",""_user"",""from$user"",""from7user"",""_x""));assertEquals(""{\""from_user\"":\""from_user\"",\""user\"":\""_user\"",\""from$user\"":\""from$user\"",\""from7user\"":\""from7user\"",\""x\"":\""_x\""}"",json);UnchangedNames result=_lcWithUndescoreMapper.readValue(json,UnchangedNames.class);assertEquals(""from_user"",result.from_user);assertEquals(""_user"",result._user);assertEquals(""from$user"",result.from$user);assertEquals(""from7user"",result.from7user);assertEquals(""_x"",result._x);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testPascalCaseStandAlone",0,"/** * Unit test to verify translations of  {@link PropertyNamingStrategy#UPPER_CAMEL_CASE}outside the context of an ObjectMapper.*/public void testPascalCaseStandAlone(){String translatedJavaName=PropertyNamingStrategy.UPPER_CAMEL_CASE.nameForField(null,null,""userName"");assertEquals(""UserName"",translatedJavaName);translatedJavaName=PropertyNamingStrategy.UPPER_CAMEL_CASE.nameForField(null,null,""User"");assertEquals(""User"",translatedJavaName);translatedJavaName=PropertyNamingStrategy.UPPER_CAMEL_CASE.nameForField(null,null,""user"");assertEquals(""User"",translatedJavaName);translatedJavaName=PropertyNamingStrategy.UPPER_CAMEL_CASE.nameForField(null,null,""x"");assertEquals(""X"",translatedJavaName);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testIssue428PascalWithOverrides",0,"/** * For [databind#428]*/public void testIssue428PascalWithOverrides()throws Exception {String json=new ObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.UPPER_CAMEL_CASE).writeValueAsString(new Bean428());if (!json.contains(quote(""fooBar""))){fail(""Should use name 'fooBar',does not: "" + json);}}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testSimpleLowerCase",0,"/** * For [databind#461]*/public void testSimpleLowerCase()throws Exception {final BoringBean input=new BoringBean();ObjectMapper m=objectMapper();assertEquals(aposToQuotes(""{'firstname':'Bob','lastname':'Burger'}""),m.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testKebabCaseStrategyStandAlone",0,"public void testKebabCaseStrategyStandAlone(){assertEquals(""some-value"",PropertyNamingStrategy.KEBAB_CASE.nameForField(null,null,""someValue""));assertEquals(""some-value"",PropertyNamingStrategy.KEBAB_CASE.nameForField(null,null,""SomeValue""));assertEquals(""url"",PropertyNamingStrategy.KEBAB_CASE.nameForField(null,null,""URL""));assertEquals(""url-stuff"",PropertyNamingStrategy.KEBAB_CASE.nameForField(null,null,""URLStuff""));assertEquals(""some-url-stuff"",PropertyNamingStrategy.KEBAB_CASE.nameForField(null,null,""SomeURLStuff""));}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testSimpleKebabCase",0,"public void testSimpleKebabCase()throws Exception {final FirstNameBean input=new FirstNameBean(""Bob"");ObjectMapper m=new ObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.KEBAB_CASE);assertEquals(aposToQuotes(""{'first-name':'Bob'}""),m.writeValueAsString(input));FirstNameBean result=m.readValue(aposToQuotes(""{'first-name':'Billy'}""),FirstNameBean.class);assertEquals(""Billy"",result.firstName);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testNamingWithObjectNode",0,"/** * Test [databind#815],problems with ObjectNode,naming strategy*/public void testNamingWithObjectNode()throws Exception {ObjectMapper m=new ObjectMapper().setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);ClassWithObjectNodeField result=m.readValue(""{\""id\"": \""1\"",\""json\"":{\""foo\"": \""bar\"",\""baz\"": \""bing\""}}"",ClassWithObjectNodeField.class);assertNotNull(result);assertEquals(""1"",result.id);assertNotNull(result.json);assertEquals(2,result.json.size());assertEquals(""bing"",result.json.path(""baz"").asText());}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testExplicitRename",0,"public void testExplicitRename()throws Exception {ObjectMapper m=new ObjectMapper();m.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);assertEquals(aposToQuotes(""{'firstName':'Peter','lastName':'Venkman','user_age':'35'}""),m.writeValueAsString(new ExplicitBean()));m=new ObjectMapper();m.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);m.enable(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING);assertEquals(aposToQuotes(""{'first_name':'Peter','last_name':'Venkman','user_age':'35'}""),m.writeValueAsString(new ExplicitBean()));ExplicitBean bean=m.readValue(aposToQuotes(""{'first_name':'Egon','last_name':'Spengler','user_age':'32'}""),ExplicitBean.class);assertNotNull(bean);assertEquals(""Egon"",bean.userFirstName);assertEquals(""Spengler"",bean.userLastName);assertEquals(""32"",bean.userAge);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.testExplicitNoNaming",0,"public void testExplicitNoNaming()throws Exception {ObjectMapper mapper=objectMapper();String json=mapper.writeValueAsString(new DefaultNaming());assertEquals(aposToQuotes(""{'someValue':3}""),json);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyStd.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.misc.TestBlocking.testEagerAdvance",0,"/** * This is an indirect test that should trigger problems if (and only if)underlying parser is advanced beyond the only element array. Basically,although content is invalid,this should be encountered quite yet.*/public void testEagerAdvance()throws IOException {ObjectMapper mapper=new ObjectMapper();JsonParser jp=createParserUsingReader(""[1  "");assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());Integer I=mapper.readValue(jp,Integer.class);assertEquals(Integer.valueOf(1),I);try {jp.nextToken();}catch(IOException ioe){verifyException(ioe,""Unexpected end-of-input: expected close marker for ARRAY"");}jp.close();}"
"com.fasterxml.jackson.databind.misc.TestBlocking.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.BigCreatorTest.testBigPartial",0,"public void testBigPartial()throws Exception {Biggie value=BIGGIE_READER.readValue(aposToQuotes(""{'v7':7,'v8':8,'v29':29,'v35':35}""));int[]stuff=value.stuff;for (int i=0;i < stuff.length;++i){int exp;switch (i){case 6:case 7:case 28:case 34:      exp=i + 1;break;default:  exp=0;}assertEquals(""Entry #"" + i,exp,stuff[i]);}}"
"com.fasterxml.jackson.databind.creators.BigCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForScalars.testNumericScalars",0,"/** * Unit test to verify that limited number of core types do NOT include type information,even if declared as Object. This is only done for types that JSON scalar values natively map to: String,Integer and Boolean (and nulls never have type information)*/public void testNumericScalars()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();assertEquals(""[123]"",m.writeValueAsString(new Object[]{Integer.valueOf(123)}));assertEquals(""[[\""java.lang.Long\"",37]]"",m.writeValueAsString(new Object[]{Long.valueOf(37)}));assertEquals(""[0.25]"",m.writeValueAsString(new Object[]{Double.valueOf(0.25)}));assertEquals(""[[\""java.lang.Float\"",0.5]]"",m.writeValueAsString(new Object[]{Float.valueOf(0.5f)}));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForScalars.testDateScalars",0,"public void testDateScalars()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();long ts=12345678L;assertEquals(""[[\""java.util.Date\"","" + ts + ""]]"",m.writeValueAsString(new Object[]{new Date(ts)}));Calendar c=Calendar.getInstance();c.setTimeInMillis(ts);String json=m.writeValueAsString(new Object[]{c});assertEquals(""[[\"""" + c.getClass().getName()+ ""\"",""+ ts+ ""]]"",json);Object[]result=m.readValue(json,Object[].class);assertEquals(1,result.length);assertTrue(result[0]instanceof Calendar);assertEquals(ts,((Calendar)result[0]).getTimeInMillis());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForScalars.testMiscScalars",0,"public void testMiscScalars()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();assertEquals(""[\""abc\""]"",m.writeValueAsString(new Object[]{""abc""}));assertEquals(""[true,null,false]"",m.writeValueAsString(new Boolean[]{true,null,false}));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForScalars.testScalarArrays",0,"/** * Test for verifying that contents of ""untyped"" homogenous arrays are properly handled,*/public void testScalarArrays()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);Object[]input=new Object[]{""abc"",new Date(1234567),null,Integer.valueOf(456)};String json=m.writeValueAsString(input);assertEquals(""[\""abc\"",[\""java.util.Date\"",1234567],null,456]"",json);Object[]output=m.readValue(json,Object[].class);assertArrayEquals(input,output);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForScalars.test417",0,"/** * Loosely scalar;for [JACKSON-417]*/public void test417()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();Jackson417Bean input=new Jackson417Bean();String json=m.writeValueAsString(input);Jackson417Bean result=m.readValue(json,Jackson417Bean.class);assertEquals(input.foo,result.foo);assertEquals(input.bar,result.bar);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForScalars.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestObjectOrArrayDeserialization.testObjectCase",0,"public void testObjectCase()throws Exception {ArrayOrObject arrayOrObject=new ObjectMapper().readValue(""{}"",ArrayOrObject.class);assertNull(""expected objects field to be null"",arrayOrObject.objects);assertNotNull(""expected object field not to be null"",arrayOrObject.object);}"
"com.fasterxml.jackson.databind.deser.TestObjectOrArrayDeserialization.testEmptyArrayCase",0,"public void testEmptyArrayCase()throws Exception {ArrayOrObject arrayOrObject=new ObjectMapper().readValue(""[]"",ArrayOrObject.class);assertNotNull(""expected objects field not to be null"",arrayOrObject.objects);assertTrue(""expected objects field to be an empty list"",arrayOrObject.objects.isEmpty());assertNull(""expected object field to be null"",arrayOrObject.object);}"
"com.fasterxml.jackson.databind.deser.TestObjectOrArrayDeserialization.testNotEmptyArrayCase",0,"public void testNotEmptyArrayCase()throws Exception {ArrayOrObject arrayOrObject=new ObjectMapper().readValue(""[{},{}]"",ArrayOrObject.class);assertNotNull(""expected objects field not to be null"",arrayOrObject.objects);assertEquals(""expected objects field to have size 2"",2,arrayOrObject.objects.size());assertNull(""expected object field to be null"",arrayOrObject.object);}"
"com.fasterxml.jackson.databind.deser.TestObjectOrArrayDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleField",0,"public void testSimpleField()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new FieldWrapperBean(new StringWrapper(""foo"")));FieldWrapperBean bean=mapper.readValue(json,FieldWrapperBean.class);assertNotNull(bean.value);assertEquals(StringWrapper.class,bean.value.getClass());assertEquals(((StringWrapper)bean.value).str,""foo"");}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleMethod",0,"public void testSimpleMethod()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new FieldWrapperBean(new IntWrapper(37)));FieldWrapperBean bean=mapper.readValue(json,FieldWrapperBean.class);assertNotNull(bean.value);assertEquals(IntWrapper.class,bean.value.getClass());assertEquals(((IntWrapper)bean.value).i,37);}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleListField",0,"public void testSimpleListField()throws Exception {ObjectMapper mapper=new ObjectMapper();FieldWrapperBeanList list=new FieldWrapperBeanList();list.add(new FieldWrapperBean(new OtherBean()));String json=mapper.writeValueAsString(list);FieldWrapperBeanList result=mapper.readValue(json,FieldWrapperBeanList.class);assertNotNull(result);assertEquals(1,result.size());FieldWrapperBean bean=list.get(0);assertEquals(OtherBean.class,bean.value.getClass());assertEquals(((OtherBean)bean.value).x,1);assertEquals(((OtherBean)bean.value).y,1);}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleListMethod",0,"public void testSimpleListMethod()throws Exception {ObjectMapper mapper=new ObjectMapper();MethodWrapperBeanList list=new MethodWrapperBeanList();list.add(new MethodWrapperBean(new BooleanValue(true)));list.add(new MethodWrapperBean(new StringWrapper(""x"")));list.add(new MethodWrapperBean(new OtherBean()));String json=mapper.writeValueAsString(list);MethodWrapperBeanList result=mapper.readValue(json,MethodWrapperBeanList.class);assertNotNull(result);assertEquals(3,result.size());MethodWrapperBean bean=result.get(0);assertEquals(BooleanValue.class,bean.value.getClass());assertEquals(((BooleanValue)bean.value).b,Boolean.TRUE);bean=result.get(1);assertEquals(StringWrapper.class,bean.value.getClass());assertEquals(((StringWrapper)bean.value).str,""x"");bean=result.get(2);assertEquals(OtherBean.class,bean.value.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleArrayField",0,"public void testSimpleArrayField()throws Exception {ObjectMapper mapper=new ObjectMapper();FieldWrapperBeanArray array=new FieldWrapperBeanArray(new FieldWrapperBean[]{new FieldWrapperBean(new BooleanValue(true))});String json=mapper.writeValueAsString(array);FieldWrapperBeanArray result=mapper.readValue(json,FieldWrapperBeanArray.class);assertNotNull(result);FieldWrapperBean[]beans=result.beans;assertEquals(1,beans.length);FieldWrapperBean bean=beans[0];assertEquals(BooleanValue.class,bean.value.getClass());assertEquals(((BooleanValue)bean.value).b,Boolean.TRUE);}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleArrayMethod",0,"public void testSimpleArrayMethod()throws Exception {ObjectMapper mapper=new ObjectMapper();MethodWrapperBeanArray array=new MethodWrapperBeanArray(new MethodWrapperBean[]{new MethodWrapperBean(new StringWrapper(""A""))});String json=mapper.writeValueAsString(array);MethodWrapperBeanArray result=mapper.readValue(json,MethodWrapperBeanArray.class);assertNotNull(result);MethodWrapperBean[]beans=result.beans;assertEquals(1,beans.length);MethodWrapperBean bean=beans[0];assertEquals(StringWrapper.class,bean.value.getClass());assertEquals(((StringWrapper)bean.value).str,""A"");}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleMapField",0,"public void testSimpleMapField()throws Exception {ObjectMapper mapper=new ObjectMapper();FieldWrapperBeanMap map=new FieldWrapperBeanMap();map.put(""foop"",new FieldWrapperBean(new IntWrapper(13)));String json=mapper.writeValueAsString(map);FieldWrapperBeanMap result=mapper.readValue(json,FieldWrapperBeanMap.class);assertNotNull(result);assertEquals(1,result.size());FieldWrapperBean bean=result.get(""foop"");assertNotNull(bean);Object ob=bean.value;assertEquals(IntWrapper.class,ob.getClass());assertEquals(((IntWrapper)ob).i,13);}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.testSimpleMapMethod",0,"public void testSimpleMapMethod()throws Exception {ObjectMapper mapper=new ObjectMapper();MethodWrapperBeanMap map=new MethodWrapperBeanMap();map.put(""xyz"",new MethodWrapperBean(new BooleanValue(true)));String json=mapper.writeValueAsString(map);MethodWrapperBeanMap result=mapper.readValue(json,MethodWrapperBeanMap.class);assertNotNull(result);assertEquals(1,result.size());MethodWrapperBean bean=result.get(""xyz"");assertNotNull(bean);Object ob=bean.value;assertEquals(BooleanValue.class,ob.getClass());assertEquals(((BooleanValue)ob).b,Boolean.TRUE);}"
"com.fasterxml.jackson.databind.jsontype.TestPropertyTypeInfo.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestJavaType.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestJavaType.testLocalType728",0,"public void testLocalType728()throws Exception {TypeFactory tf=TypeFactory.defaultInstance();Method m=Issue728.class.getMethod(""method"",CharSequence.class);assertNotNull(m);JavaType t=tf.constructType(m.getReturnType());assertEquals(CharSequence.class,t.getRawClass());t=tf.constructType(m.getGenericReturnType());assertEquals(CharSequence.class,t.getRawClass());t=tf.constructType(m.getParameterTypes()[0]);assertEquals(CharSequence.class,t.getRawClass());t=tf.constructType(m.getGenericParameterTypes()[0]);assertEquals(CharSequence.class,t.getRawClass());}"
"com.fasterxml.jackson.databind.type.TestJavaType.testSimpleClass",0,"public void testSimpleClass(){TypeFactory tf=TypeFactory.defaultInstance();JavaType baseType=tf.constructType(BaseType.class);assertSame(BaseType.class,baseType.getRawClass());assertTrue(baseType.hasRawClass(BaseType.class));assertFalse(baseType.isTypeOrSubTypeOf(SubType.class));assertFalse(baseType.isArrayType());assertFalse(baseType.isContainerType());assertFalse(baseType.isEnumType());assertFalse(baseType.isInterface());assertFalse(baseType.isPrimitive());assertFalse(baseType.isReferenceType());assertFalse(baseType.hasContentType());assertNull(baseType.getContentType());assertNull(baseType.getKeyType());assertNull(baseType.getValueHandler());assertEquals(""Lcom/fasterxml/jackson/databind/type/TestJavaType$BaseType;"",baseType.getGenericSignature());assertEquals(""Lcom/fasterxml/jackson/databind/type/TestJavaType$BaseType;"",baseType.getErasedSignature());}"
"com.fasterxml.jackson.databind.type.TestJavaType.testDeprecated",0,"@SuppressWarnings(""deprecation"")public void testDeprecated(){TypeFactory tf=TypeFactory.defaultInstance();JavaType baseType=tf.constructType(BaseType.class);assertTrue(baseType.hasRawClass(BaseType.class));assertNull(baseType.getParameterSource());assertNull(baseType.getContentTypeHandler());assertNull(baseType.getContentValueHandler());assertFalse(baseType.hasValueHandler());assertFalse(baseType.hasHandlers());assertSame(baseType,baseType.forcedNarrowBy(BaseType.class));JavaType sub=baseType.forcedNarrowBy(SubType.class);assertTrue(sub.hasRawClass(SubType.class));}"
"com.fasterxml.jackson.databind.type.TestJavaType.testArrayType",0,"public void testArrayType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType arrayT=ArrayType.construct(tf.constructType(String.class),null);assertNotNull(arrayT);assertTrue(arrayT.isContainerType());assertFalse(arrayT.isReferenceType());assertTrue(arrayT.hasContentType());assertNotNull(arrayT.toString());assertNotNull(arrayT.getContentType());assertNull(arrayT.getKeyType());assertTrue(arrayT.equals(arrayT));assertFalse(arrayT.equals(null));assertFalse(arrayT.equals(""xyz""));assertTrue(arrayT.equals(ArrayType.construct(tf.constructType(String.class),null)));assertFalse(arrayT.equals(ArrayType.construct(tf.constructType(Integer.class),null)));}"
"com.fasterxml.jackson.databind.type.TestJavaType.testMapType",0,"public void testMapType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType mapT=tf.constructType(HashMap.class);assertTrue(mapT.isContainerType());assertFalse(mapT.isReferenceType());assertTrue(mapT.hasContentType());assertNotNull(mapT.toString());assertNotNull(mapT.getContentType());assertNotNull(mapT.getKeyType());assertEquals(""Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;"",mapT.getGenericSignature());assertEquals(""Ljava/util/HashMap;"",mapT.getErasedSignature());assertTrue(mapT.equals(mapT));assertFalse(mapT.equals(null));assertFalse(mapT.equals(""xyz""));}"
"com.fasterxml.jackson.databind.type.TestJavaType.testEnumType",0,"public void testEnumType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType enumT=tf.constructType(MyEnum.class);assertTrue(enumT.isEnumType());assertFalse(enumT.hasHandlers());assertTrue(enumT.isTypeOrSubTypeOf(MyEnum.class));assertTrue(enumT.isTypeOrSubTypeOf(Object.class));assertNull(enumT.containedType(3));assertTrue(enumT.containedTypeOrUnknown(3).isJavaLangObject());assertEquals(""Lcom/fasterxml/jackson/databind/type/TestJavaType$MyEnum;"",enumT.getGenericSignature());assertEquals(""Lcom/fasterxml/jackson/databind/type/TestJavaType$MyEnum;"",enumT.getErasedSignature());assertTrue(tf.constructType(MyEnum2.class).isEnumType());assertTrue(tf.constructType(MyEnum.A.getClass()).isEnumType());assertTrue(tf.constructType(MyEnum2.A.getClass()).isEnumType());}"
"com.fasterxml.jackson.databind.type.TestJavaType.testClassKey",0,"public void testClassKey(){ClassKey key=new ClassKey(String.class);assertEquals(0,key.compareTo(key));assertTrue(key.equals(key));assertFalse(key.equals(null));assertFalse(key.equals(""foo""));assertFalse(key.equals(new ClassKey(Integer.class)));assertEquals(String.class.getName(),key.toString());}"
"com.fasterxml.jackson.databind.type.TestJavaType.testJavaTypeAsJLRType",0,"public void testJavaTypeAsJLRType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t1=tf.constructType(getClass());JavaType t2=tf.constructType(t1);assertSame(t1,t2);}"
"com.fasterxml.jackson.databind.type.TestJavaType.testGenericSignature1194",0,"public void testGenericSignature1194()throws Exception {TypeFactory tf=TypeFactory.defaultInstance();Method m;JavaType t;m=Generic1194.class.getMethod(""getList"");t=tf.constructType(m.getGenericReturnType());assertEquals(""Ljava/util/List<Ljava/lang/String;>;"",t.getGenericSignature());assertEquals(""Ljava/util/List;"",t.getErasedSignature());m=Generic1194.class.getMethod(""getMap"");t=tf.constructType(m.getGenericReturnType());assertEquals(""Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;"",t.getGenericSignature());m=Generic1194.class.getMethod(""getGeneric"");t=tf.constructType(m.getGenericReturnType());assertEquals(""Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;"",t.getGenericSignature());}"
"com.fasterxml.jackson.databind.type.TestJavaType.testAnchorTypeForRefTypes",0,"public void testAnchorTypeForRefTypes()throws Exception {TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(AtomicStringReference.class);assertTrue(t.isReferenceType());assertTrue(t.hasContentType());ReferenceType rt=(ReferenceType)t;assertFalse(rt.isAnchorType());assertEquals(AtomicReference.class,rt.getAnchorType().getRawClass());}"
"com.fasterxml.jackson.databind.type.TestJavaType.testObjectToReferenceSpecialization",0,"public void testObjectToReferenceSpecialization()throws Exception {TypeFactory tf=TypeFactory.defaultInstance();JavaType base=tf.constructType(Object.class);assertTrue(base.isJavaLangObject());JavaType sub=tf.constructSpecializedType(base,AtomicReference.class);assertEquals(AtomicReference.class,sub.getRawClass());assertTrue(sub.isReferenceType());}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId198Test.testFails",0,"public void testFails()throws Exception {String json=""{\""name\"": \""foo\"",\""attack\"":\""right\""}}"";Character character=MAPPER.readValue(json,Character.class);assertNotNull(character);assertNotNull(character.attack);assertEquals(""foo"",character.name);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId198Test.testWorks",0,"public void testWorks()throws Exception {String json=""{\""name\"": \""foo\"",\""preferredAttack\"": \""KICK\"",\""attack\"":\""right\""}}"";Character character=MAPPER.readValue(json,Character.class);assertNotNull(character);assertNotNull(character.attack);assertEquals(""foo"",character.name);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeId198Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestEmptyClass.testEmptyWithAnnotations",0,"/** * Test to check that [JACKSON-201]works if there is a recognized annotation (which indicates type is serializable)*/public void testEmptyWithAnnotations()throws Exception {try {serializeAsString(mapper,new Empty());}catch(JsonMappingException e){verifyException(e,""No serializer found for class"");}assertEquals(""{}"",serializeAsString(mapper,new EmptyWithAnno()));ObjectMapper m2=new ObjectMapper();m2.addMixIn(Empty.class,EmptyWithAnno.class);assertEquals(""{}"",m2.writeValueAsString(new Empty()));}"
"com.fasterxml.jackson.databind.ser.TestEmptyClass.testEmptyWithFeature",0,"/** * Alternative it is possible to use a feature to allow serializing empty classes,too*/public void testEmptyWithFeature()throws Exception {assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS));mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);assertEquals(""{}"",serializeAsString(mapper,new Empty()));}"
"com.fasterxml.jackson.databind.ser.TestEmptyClass.testCustomNoEmpty",0,"public void testCustomNoEmpty()throws Exception {assertEquals(""{\""value\"":123}"",mapper.writeValueAsString(new NonZeroWrapper(123)));assertEquals(""{}"",mapper.writeValueAsString(new NonZeroWrapper(0)));}"
"com.fasterxml.jackson.databind.ser.TestEmptyClass.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.ext.TestSubtypesExternalPropertyMissingProperty.testDeserializationPresent",0,"/** * Deserialization tests for external type id property present*/@Test public void testDeserializationPresent()throws Exception {MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBox();checkAppleBox();MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBox();checkAppleBox();}"
"com.fasterxml.jackson.databind.jsontype.ext.TestSubtypesExternalPropertyMissingProperty.testDeserializationNull",0,"/** * Deserialization tests for external type id property null*/@Test public void testDeserializationNull()throws Exception {MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBoxNull(orangeBoxNullJson);checkAppleBoxNull(appleBoxNullJson);MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBoxNull(orangeBoxNullJson);checkAppleBoxNull(appleBoxNullJson);}"
"com.fasterxml.jackson.databind.jsontype.ext.TestSubtypesExternalPropertyMissingProperty.testDeserializationEmpty",0,"/** * Deserialization tests for external type id property empty*/@Test public void testDeserializationEmpty()throws Exception {MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBoxEmpty(orangeBoxEmptyJson);checkAppleBoxEmpty(appleBoxEmptyJson);MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBoxEmpty(orangeBoxEmptyJson);checkAppleBoxEmpty(appleBoxEmptyJson);}"
"com.fasterxml.jackson.databind.jsontype.ext.TestSubtypesExternalPropertyMissingProperty.testDeserializationMissing",0,"/** * Deserialization tests for external type id property missing*/@Test public void testDeserializationMissing()throws Exception {MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkOrangeBoxNull(orangeBoxMissingJson);checkAppleBoxNull(appleBoxMissingJson);MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkBoxJsonMappingException(orangeBoxMissingJson);checkBoxJsonMappingException(appleBoxMissingJson);}"
"com.fasterxml.jackson.databind.jsontype.ext.TestSubtypesExternalPropertyMissingProperty.testDeserializationMissingRequired",0,"/** * Deserialization tests for external type id required property missing*/@Test public void testDeserializationMissingRequired()throws Exception {MAPPER.disable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkReqBoxJsonMappingException(orangeBoxMissingJson);checkReqBoxJsonMappingException(appleBoxMissingJson);MAPPER.enable(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY);checkReqBoxJsonMappingException(orangeBoxMissingJson);checkReqBoxJsonMappingException(appleBoxMissingJson);}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testFailOnNullFromDefaults",0,"public void testFailOnNullFromDefaults()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");TypeReference<?> listType=new TypeReference<NullContentUndefined<List<String>>>(){};NullContentUndefined<List<String>> result=MAPPER.readValue(JSON,listType);assertNotNull(result.values);assertEquals(1,result.values.size());assertNull(result.values.get(0));ObjectMapper mapper=newObjectMapper();mapper.setDefaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.FAIL));try {mapper.readValue(JSON,listType);fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""values\"""");}mapper=newObjectMapper();mapper.configOverride(List.class).setSetterInfo(JsonSetter.Value.forContentNulls(Nulls.FAIL));try {mapper.readValue(JSON,listType);fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""values\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testFailOnNullWithCollections",0,"public void testFailOnNullWithCollections()throws Exception {TypeReference<?> typeRef=new TypeReference<NullContentFail<List<Integer>>>(){};NullContentFail<List<Integer>> result=MAPPER.readValue(aposToQuotes(""{'nullsOk':[null]}""),typeRef);assertNotNull(result.nullsOk);assertEquals(1,result.nullsOk.size());assertNull(result.nullsOk.get(0));final String JSON=aposToQuotes(""{'noNulls':[null]}"");try {MAPPER.readValue(JSON,typeRef);fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}try {MAPPER.readValue(JSON,new TypeReference<NullContentFail<List<String>>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testFailOnNullWithArrays",0,"public void testFailOnNullWithArrays()throws Exception {final String JSON=aposToQuotes(""{'noNulls':[null]}"");try {MAPPER.readValue(JSON,new TypeReference<NullContentFail<Object[]>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}try {MAPPER.readValue(JSON,new TypeReference<NullContentFail<String[]>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testFailOnNullWithPrimitiveArrays",0,"public void testFailOnNullWithPrimitiveArrays()throws Exception {final String JSON=aposToQuotes(""{'noNulls':[null]}"");try {MAPPER.readValue(JSON,new TypeReference<NullContentFail<boolean[]>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}try {MAPPER.readValue(JSON,new TypeReference<NullContentFail<int[]>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}try {MAPPER.readValue(JSON,new TypeReference<NullContentFail<double[]>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testFailOnNullWithMaps",0,"public void testFailOnNullWithMaps()throws Exception {try {final String MAP_JSON=aposToQuotes(""{'noNulls':{'a':null}}"");MAPPER.readValue(MAP_JSON,new TypeReference<NullContentFail<Map<String,String>>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}try {final String MAP_JSON=aposToQuotes(""{'noNulls':{'A':null}}"");MAPPER.readValue(MAP_JSON,new TypeReference<NullContentFail<EnumMap<ABC,String>>>(){});fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsAsEmptyWithCollections",0,"public void testNullsAsEmptyWithCollections()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");{NullContentAsEmpty<List<Integer>> result=MAPPER.readValue(JSON,new TypeReference<NullContentAsEmpty<List<Integer>>>(){});assertEquals(1,result.values.size());assertEquals(Integer.valueOf(0),result.values.get(0));}{NullContentAsEmpty<List<String>> result=MAPPER.readValue(JSON,new TypeReference<NullContentAsEmpty<List<String>>>(){});assertEquals(1,result.values.size());assertEquals("""",result.values.get(0));}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsAsEmptyUsingDefaults",0,"public void testNullsAsEmptyUsingDefaults()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");TypeReference<?> listType=new TypeReference<NullContentUndefined<List<Integer>>>(){};ObjectMapper mapper=newObjectMapper();mapper.setDefaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.AS_EMPTY));NullContentUndefined<List<Integer>> result=mapper.readValue(JSON,listType);assertEquals(1,result.values.size());assertEquals(Integer.valueOf(0),result.values.get(0));mapper=newObjectMapper();mapper.configOverride(List.class).setSetterInfo(JsonSetter.Value.forContentNulls(Nulls.AS_EMPTY));result=mapper.readValue(JSON,listType);assertEquals(1,result.values.size());assertEquals(Integer.valueOf(0),result.values.get(0));}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsAsEmptyWithArrays",0,"public void testNullsAsEmptyWithArrays()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");{NullContentAsEmpty<String[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentAsEmpty<String[]>>(){});assertEquals(1,result.values.length);assertEquals("""",result.values[0]);}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsAsEmptyWithPrimitiveArrays",0,"public void testNullsAsEmptyWithPrimitiveArrays()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");{NullContentAsEmpty<int[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentAsEmpty<int[]>>(){});assertEquals(1,result.values.length);assertEquals(0,result.values[0]);}{NullContentAsEmpty<long[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentAsEmpty<long[]>>(){});assertEquals(1,result.values.length);assertEquals(0L,result.values[0]);}{NullContentAsEmpty<boolean[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentAsEmpty<boolean[]>>(){});assertEquals(1,result.values.length);assertEquals(false,result.values[0]);}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsAsEmptyWithMaps",0,"public void testNullsAsEmptyWithMaps()throws Exception {final String MAP_JSON=aposToQuotes(""{'values':{'A':null}}"");{NullContentAsEmpty<Map<String,String>> result=MAPPER.readValue(MAP_JSON,new TypeReference<NullContentAsEmpty<Map<String,String>>>(){});assertEquals(1,result.values.size());assertEquals(""A"",result.values.entrySet().iterator().next().getKey());assertEquals("""",result.values.entrySet().iterator().next().getValue());}{NullContentAsEmpty<EnumMap<ABC,String>> result=MAPPER.readValue(MAP_JSON,new TypeReference<NullContentAsEmpty<EnumMap<ABC,String>>>(){});assertEquals(1,result.values.size());assertEquals(ABC.A,result.values.entrySet().iterator().next().getKey());assertEquals("""",result.values.entrySet().iterator().next().getValue());}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsSkipUsingDefaults",0,"public void testNullsSkipUsingDefaults()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");TypeReference<?> listType=new TypeReference<NullContentUndefined<List<Long>>>(){};ObjectMapper mapper=newObjectMapper();mapper.setDefaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP));NullContentUndefined<List<Long>> result=mapper.readValue(JSON,listType);assertEquals(0,result.values.size());mapper=newObjectMapper();mapper.configOverride(List.class).setSetterInfo(JsonSetter.Value.forContentNulls(Nulls.SKIP));result=mapper.readValue(JSON,listType);assertEquals(0,result.values.size());}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsSkipWithOverrides",0,"public void testNullsSkipWithOverrides()throws Exception {final String JSON=aposToQuotes(""{'values':[null]}"");TypeReference<?> listType=new TypeReference<NullContentSkip<List<Long>>>(){};ObjectMapper mapper=newObjectMapper();mapper.setDefaultSetterInfo(JsonSetter.Value.forContentNulls(Nulls.FAIL));NullContentSkip<List<Long>> result=mapper.readValue(JSON,listType);assertEquals(0,result.values.size());mapper=newObjectMapper();mapper.configOverride(List.class).setSetterInfo(JsonSetter.Value.forContentNulls(Nulls.FAIL));result=mapper.readValue(JSON,listType);assertEquals(0,result.values.size());}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsSkipWithCollections",0,"public void testNullsSkipWithCollections()throws Exception {{final String JSON=aposToQuotes(""{'values':[1,null,2]}"");NullContentSkip<List<Integer>> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<List<Integer>>>(){});assertEquals(2,result.values.size());assertEquals(Integer.valueOf(1),result.values.get(0));assertEquals(Integer.valueOf(2),result.values.get(1));}{final String JSON=aposToQuotes(""{'values':['ab',null,'xy']}"");NullContentSkip<List<String>> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<List<String>>>(){});assertEquals(2,result.values.size());assertEquals(""ab"",result.values.get(0));assertEquals(""xy"",result.values.get(1));}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsSkipWithArrays",0,"public void testNullsSkipWithArrays()throws Exception {final String JSON=aposToQuotes(""{'values':['a',null,'xy']}"");{NullContentSkip<Object[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<Object[]>>(){});assertEquals(2,result.values.length);assertEquals(""a"",result.values[0]);assertEquals(""xy"",result.values[1]);}{NullContentSkip<String[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<String[]>>(){});assertEquals(2,result.values.length);assertEquals(""a"",result.values[0]);assertEquals(""xy"",result.values[1]);}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsSkipWithPrimitiveArrays",0,"public void testNullsSkipWithPrimitiveArrays()throws Exception {{final String JSON=aposToQuotes(""{'values':[3,null,7]}"");NullContentSkip<int[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<int[]>>(){});assertEquals(2,result.values.length);assertEquals(3,result.values[0]);assertEquals(7,result.values[1]);}{final String JSON=aposToQuotes(""{'values':[-13,null,999]}"");NullContentSkip<long[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<long[]>>(){});assertEquals(2,result.values.length);assertEquals(-13L,result.values[0]);assertEquals(999L,result.values[1]);}{final String JSON=aposToQuotes(""{'values':[true,null,true]}"");NullContentSkip<boolean[]> result=MAPPER.readValue(JSON,new TypeReference<NullContentSkip<boolean[]>>(){});assertEquals(2,result.values.length);assertEquals(true,result.values[0]);assertEquals(true,result.values[1]);}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.testNullsSkipWithMaps",0,"public void testNullsSkipWithMaps()throws Exception {final String MAP_JSON=aposToQuotes(""{'values':{'A':'foo','B':null,'C':'bar'}}"");{NullContentSkip<Map<String,String>> result=MAPPER.readValue(MAP_JSON,new TypeReference<NullContentSkip<Map<String,String>>>(){});assertEquals(2,result.values.size());assertEquals(""foo"",result.values.get(""A""));assertEquals(""bar"",result.values.get(""C""));}{NullContentSkip<EnumMap<ABC,String>> result=MAPPER.readValue(MAP_JSON,new TypeReference<NullContentSkip<EnumMap<ABC,String>>>(){});assertEquals(2,result.values.size());assertEquals(""foo"",result.values.get(ABC.A));assertEquals(""bar"",result.values.get(ABC.C));}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsForContentTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.NumberSerTest.testDouble",0,"public void testDouble()throws Exception {double[]values=new double[]{0.0,1.0,0.1,-37.01,999.99,0.3,33.3,Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY};for(double d : values){String expected=String.valueOf(d);if (Double.isNaN(d)|| Double.isInfinite(d)){expected=""\"""" + d + ""\"""";}assertEquals(expected,MAPPER.writeValueAsString(Double.valueOf(d)));}}"
"com.fasterxml.jackson.databind.ser.jdk.NumberSerTest.testBigInteger",0,"public void testBigInteger()throws Exception {BigInteger[]values=new BigInteger[]{BigInteger.ONE,BigInteger.TEN,BigInteger.ZERO,BigInteger.valueOf(1234567890L),new BigInteger(""123456789012345678901234568""),new BigInteger(""-1250000124326904597090347547457"")};for(BigInteger value : values){String expected=value.toString();assertEquals(expected,MAPPER.writeValueAsString(value));}}"
"com.fasterxml.jackson.databind.ser.jdk.NumberSerTest.testNumbersAsString",0,"public void testNumbersAsString()throws Exception {assertEquals(aposToQuotes(""{'value':'3'}""),MAPPER.writeValueAsString(new IntAsString()));assertEquals(aposToQuotes(""{'value':'4'}""),MAPPER.writeValueAsString(new LongAsString()));assertEquals(aposToQuotes(""{'value':'-0.5'}""),MAPPER.writeValueAsString(new DoubleAsString()));}"
"com.fasterxml.jackson.databind.ser.jdk.NumberSerTest.testConfigOverridesForNumbers",0,"public void testConfigOverridesForNumbers()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configOverride(Integer.TYPE).setFormat(JsonFormat.Value.forShape(JsonFormat.Shape.STRING));assertEquals(aposToQuotes(""{'i':'3'}""),mapper.writeValueAsString(new IntWrapper(3)));}"
"com.fasterxml.jackson.databind.ser.jdk.NumberSerTest.testNumberType",0,"public void testNumberType()throws Exception {assertEquals(aposToQuotes(""{'value':1}""),MAPPER.writeValueAsString(new NumberWrapper(Byte.valueOf((byte)1))));assertEquals(aposToQuotes(""{'value':2}""),MAPPER.writeValueAsString(new NumberWrapper(Short.valueOf((short)2))));assertEquals(aposToQuotes(""{'value':3}""),MAPPER.writeValueAsString(new NumberWrapper(Integer.valueOf(3))));assertEquals(aposToQuotes(""{'value':4}""),MAPPER.writeValueAsString(new NumberWrapper(Long.valueOf(4L))));assertEquals(aposToQuotes(""{'value':0.5}""),MAPPER.writeValueAsString(new NumberWrapper(Float.valueOf(0.5f))));assertEquals(aposToQuotes(""{'value':0.05}""),MAPPER.writeValueAsString(new NumberWrapper(Double.valueOf(0.05))));assertEquals(aposToQuotes(""{'value':123}""),MAPPER.writeValueAsString(new NumberWrapper(BigInteger.valueOf(123))));assertEquals(aposToQuotes(""{'value':0.025}""),MAPPER.writeValueAsString(new NumberWrapper(BigDecimal.valueOf(0.025))));}"
"com.fasterxml.jackson.databind.ser.jdk.NumberSerTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testClassAnnotationSimple",0,"public void testClassAnnotationSimple()throws Exception {ConvertingBean bean=objectReader(ConvertingBean.class).readValue(""[1,2]"");assertNotNull(bean);assertEquals(1,bean.x);assertEquals(2,bean.y);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testClassAnnotationForLists",0,"public void testClassAnnotationForLists()throws Exception {ConvertingBeanContainer container=objectReader(ConvertingBeanContainer.class).readValue(""{\""values\"":[[1,2],[3,4]]}"");assertNotNull(container);assertNotNull(container.values);assertEquals(2,container.values.size());assertEquals(4,container.values.get(1).y);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testPropertyAnnotationSimple",0,"public void testPropertyAnnotationSimple()throws Exception {PointWrapper wrapper=objectReader(PointWrapper.class).readValue(""{\""value\"":[3,4]}"");assertNotNull(wrapper);assertNotNull(wrapper.value);assertEquals(3,wrapper.value.x);assertEquals(4,wrapper.value.y);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testPropertyAnnotationLowerCasing",0,"public void testPropertyAnnotationLowerCasing()throws Exception {LowerCaseText text=objectReader(LowerCaseText.class).readValue(""{\""text\"":\""Yay!\""}"");assertNotNull(text);assertNotNull(text.text);assertEquals(""yay!"",text.text);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testPropertyAnnotationArrayLC",0,"public void testPropertyAnnotationArrayLC()throws Exception {LowerCaseTextArray texts=objectReader(LowerCaseTextArray.class).readValue(""{\""texts\"":[\""ABC\""]}"");assertNotNull(texts);assertNotNull(texts.texts);assertEquals(1,texts.texts.length);assertEquals(""abc"",texts.texts[0]);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testPropertyAnnotationForArrays",0,"public void testPropertyAnnotationForArrays()throws Exception {PointListWrapperArray array=objectReader(PointListWrapperArray.class).readValue(""{\""values\"":[[4,5],[5,4]]}"");assertNotNull(array);assertNotNull(array.values);assertEquals(2,array.values.length);assertEquals(5,array.values[1].x);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testPropertyAnnotationForLists",0,"public void testPropertyAnnotationForLists()throws Exception {PointListWrapperList array=objectReader(PointListWrapperList.class).readValue(""{\""values\"":[[7,8],[8,7]]}"");assertNotNull(array);assertNotNull(array.values);assertEquals(2,array.values.size());assertEquals(7,array.values.get(0).x);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testPropertyAnnotationForMaps",0,"public void testPropertyAnnotationForMaps()throws Exception {PointListWrapperMap map=objectReader(PointListWrapperMap.class).readValue(""{\""values\"":{\""a\"":[1,2]}}"");assertNotNull(map);assertNotNull(map.values);assertEquals(1,map.values.size());Point p=map.values.get(""a"");assertNotNull(p);assertEquals(1,p.x);assertEquals(2,p.y);}"
"com.fasterxml.jackson.databind.convert.TestConvertingDeserializer.testConvertToAbstract",0,"public void testConvertToAbstract()throws Exception {Issue795Bean bean=objectReader(Issue795Bean.class).readValue(""{\""value\"":\""1.25\""}"");assertNotNull(bean.value);assertTrue(""Type not BigDecimal but "" + bean.value.getClass(),bean.value instanceof BigDecimal);assertEquals(new BigDecimal(""1.25""),bean.value);}"
"com.fasterxml.jackson.databind.ser.filter.MapInclusionTest.testNonEmptyValueMapViaProp",0,"public void testNonEmptyValueMapViaProp()throws IOException {String json=MAPPER.writeValueAsString(new NoEmptiesMapContainer().add(""a"",null).add(""b"",""""));assertEquals(aposToQuotes(""{}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.MapInclusionTest.testNoNullsMap",0,"public void testNoNullsMap()throws IOException {NoNullsMapContainer input=new NoNullsMapContainer().add(""a"",null).add(""b"","""");String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'stuff':{'b':''}}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.MapInclusionTest.testNonEmptyNoNullsMap",0,"public void testNonEmptyNoNullsMap()throws IOException {NoNullsNotEmptyMapContainer input=new NoNullsNotEmptyMapContainer().add(""a"",null).add(""b"","""");String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'stuff':{'b':''}}""),json);json=MAPPER.writeValueAsString(new NoNullsNotEmptyMapContainer().add(""a"",null).add(""b"",null));assertEquals(aposToQuotes(""{}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.MapInclusionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.TestIgnoredTypes.testIgnoredType",0,"public void testIgnoredType()throws Exception {final ObjectMapper mapper=objectMapper();NonIgnoredType bean=mapper.readValue(""{\""value\"":13}"",NonIgnoredType.class);assertNotNull(bean);assertEquals(13,bean.value);bean=mapper.readValue(""{\""ignored\"":[1,2,{}],\""value\"":9 }"",NonIgnoredType.class);assertNotNull(bean);assertEquals(9,bean.value);}"
"com.fasterxml.jackson.databind.ser.filter.TestIgnoredTypes.testSingleWithMixins",0,"public void testSingleWithMixins()throws Exception {SimpleModule module=new SimpleModule();module.setMixInAnnotation(Person.class,PersonMixin.class);ObjectMapper mapper=new ObjectMapper();mapper.registerModule(module);PersonWrapper input=new PersonWrapper();String json=mapper.writeValueAsString(input);assertEquals(""{\""value\"":1}"",json);}"
"com.fasterxml.jackson.databind.ser.filter.TestIgnoredTypes.testListWithMixins",0,"public void testListWithMixins()throws Exception {SimpleModule module=new SimpleModule();module.setMixInAnnotation(Person.class,PersonMixin.class);ObjectMapper mapper=new ObjectMapper();mapper.registerModule(module);List<Person> persons=new ArrayList<Person>();persons.add(new Person(""Bob""));String json=mapper.writeValueAsString(persons);assertEquals(""[{\""name\"":\""Bob\""}]"",json);}"
"com.fasterxml.jackson.databind.ser.filter.TestIgnoredTypes.testIgnoreUsingConfigOverride",0,"public void testIgnoreUsingConfigOverride()throws Exception {final ObjectMapper mapper=objectMapper();mapper.configOverride(Wrapped.class).setIsIgnoredType(true);String json=mapper.writeValueAsString(new Wrapper());assertEquals(aposToQuotes(""{'value':3}""),json);Wrapper result=mapper.readValue(aposToQuotes(""{'value':5,'wrapped':false}""),Wrapper.class);assertEquals(5,result.value);}"
"com.fasterxml.jackson.databind.ser.filter.TestIgnoredTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreatorWithNamingStrategy556.testRenameViaCtor",0,"public void testRenameViaCtor()throws Exception {RenamingCtorBean bean=MAPPER.readValue(CTOR_JSON,RenamingCtorBean.class);assertEquals(42,bean.myAge);assertEquals(""NotMyRealName"",bean.myName);}"
"com.fasterxml.jackson.databind.creators.TestCreatorWithNamingStrategy556.testRenameViaFactory",0,"public void testRenameViaFactory()throws Exception {RenamedFactoryBean bean=MAPPER.readValue(CTOR_JSON,RenamedFactoryBean.class);assertEquals(42,bean.myAge);assertEquals(""NotMyRealName"",bean.myName);}"
"com.fasterxml.jackson.databind.creators.TestCreatorWithNamingStrategy556.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestEnumTyping.testTagList",0,"public void testTagList()throws Exception {ObjectMapper m=new ObjectMapper();TagList list=new TagList();list.add(Tag.A);list.add(Tag.B);String json=m.writeValueAsString(list);TagList result=m.readValue(json,TagList.class);assertEquals(2,result.size());assertSame(Tag.A,result.get(0));assertSame(Tag.B,result.get(1));}"
"com.fasterxml.jackson.databind.jsontype.TestEnumTyping.testEnumInterface",0,"public void testEnumInterface()throws Exception {ObjectMapper m=new ObjectMapper();String json=m.writeValueAsString(Tag.B);EnumInterface result=m.readValue(json,EnumInterface.class);assertSame(Tag.B,result);}"
"com.fasterxml.jackson.databind.jsontype.TestEnumTyping.testEnumInterfaceList",0,"public void testEnumInterfaceList()throws Exception {ObjectMapper m=new ObjectMapper();EnumInterfaceList list=new EnumInterfaceList();list.add(Tag.A);list.add(Tag.B);String json=m.writeValueAsString(list);EnumInterfaceList result=m.readValue(json,EnumInterfaceList.class);assertEquals(2,result.size());assertSame(Tag.A,result.get(0));assertSame(Tag.B,result.get(1));}"
"com.fasterxml.jackson.databind.jsontype.TestEnumTyping.testUntypedEnum",0,"public void testUntypedEnum()throws Exception {ObjectMapper mapper=new ObjectMapper();String str=mapper.writeValueAsString(new UntypedEnumBean(TestEnum.B));UntypedEnumBean result=mapper.readValue(str,UntypedEnumBean.class);assertNotNull(result);assertNotNull(result.value);Object ob=result.value;assertSame(TestEnum.class,ob.getClass());assertEquals(TestEnum.B,result.value);}"
"com.fasterxml.jackson.databind.jsontype.TestEnumTyping.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.format.DateFormatTest.testTypeDefaults",0,"public void testTypeDefaults()throws Exception {ObjectMapper mapper=newObjectMapper();mapper.configOverride(Date.class).setFormat(JsonFormat.Value.forPattern(""yyyy.dd.MM""));String json=mapper.writeValueAsString(new DateWrapper(0L));assertEquals(aposToQuotes(""{'value':'1970.01.01'}""),json);DateWrapper w=mapper.readValue(aposToQuotes(""{'value':'1981.13.3'}""),DateWrapper.class);assertNotNull(w);Calendar c=Calendar.getInstance();c.setTime(w.value);assertEquals(1981,c.get(Calendar.YEAR));assertEquals(Calendar.MARCH,c.get(Calendar.MONTH));}"
"com.fasterxml.jackson.databind.format.DateFormatTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayWithBuilder.testSimpleBuilder",0,"public void testSimpleBuilder()throws Exception {ValueClassXY value=MAPPER.readValue(""[1,2]"",ValueClassXY.class);assertEquals(2,value._x);assertEquals(3,value._y);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayWithBuilder.testBuilderWithUpdate",0,"public void testBuilderWithUpdate()throws Exception {try {MAPPER.readerFor(ValueClassXY.class).withValueToUpdate(new ValueClassXY(6,7)).readValue(""[1,2]"");fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""Deserialization of"");verifyException(e,""by passing existing instance"");verifyException(e,""ValueClassXY"");}}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayWithBuilder.testWithCreator",0,"public void testWithCreator()throws Exception {CreatorValue value=MAPPER.readValue(""[1,2,3]"",CreatorValue.class);assertEquals(1,value.a);assertEquals(2,value.b);assertEquals(3,value.c);value=MAPPER.readValue(""[1,2]"",CreatorValue.class);assertEquals(1,value.a);assertEquals(2,value.b);assertEquals(0,value.c);value=MAPPER.readValue(""[1]"",CreatorValue.class);assertEquals(1,value.a);assertEquals(0,value.b);assertEquals(0,value.c);value=MAPPER.readValue(""[]"",CreatorValue.class);assertEquals(0,value.a);assertEquals(0,value.b);assertEquals(0,value.c);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayWithBuilder.testWithCreatorAndView",0,"public void testWithCreatorAndView()throws Exception {ObjectReader reader=MAPPER.readerFor(CreatorValue.class);CreatorValue value;value=reader.withView(String.class).readValue(""[1,2,3]"");assertEquals(1,value.a);assertEquals(2,value.b);assertEquals(3,value.c);value=reader.withView(Character.class).readValue(""[1,2,3]"");assertEquals(1,value.a);assertEquals(2,value.b);assertEquals(0,value.c);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayWithBuilder.testUnknownExtraProp",0,"public void testUnknownExtraProp()throws Exception {String json=""[1,2,3,4]"";try {MAPPER.readValue(json,ValueClassXY.class);fail(""should not pass with extra element"");}catch(MismatchedInputException e){verifyException(e,""Unexpected JSON values"");}ValueClassXY v=MAPPER.readerFor(ValueClassXY.class).without(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES).readValue(json);assertNotNull(v);assertEquals(v._x,2);assertEquals(v._y,3);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArrayWithBuilder.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testBoolean",0,"public void testBoolean()throws Exception {assertEquals(""true"",serializeAsString(MAPPER,Boolean.TRUE));assertEquals(""false"",serializeAsString(MAPPER,Boolean.FALSE));}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testBooleanArray",0,"public void testBooleanArray()throws Exception {assertEquals(""[true,false]"",serializeAsString(MAPPER,new boolean[]{true,false}));assertEquals(""[true,false]"",serializeAsString(MAPPER,new Boolean[]{Boolean.TRUE,Boolean.FALSE}));}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testByteArray",0,"public void testByteArray()throws Exception {byte[]data={1,17,-3,127,-128};Byte[]data2=new Byte[data.length];for (int i=0;i < data.length;++i){data2[i]=data[i];}String str1=serializeAsString(MAPPER,data);String str2=serializeAsString(MAPPER,data2);assertArrayEquals(data,MAPPER.readValue(str1,byte[].class));assertArrayEquals(data2,MAPPER.readValue(str2,Byte[].class));}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testBase64Variants",0,"public void testBase64Variants()throws Exception {final byte[]INPUT=""abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X"".getBytes(""UTF-8"");assertEquals(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA==""),MAPPER.writeValueAsString(INPUT));assertEquals(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA==""),MAPPER.writer(Base64Variants.MIME_NO_LINEFEEDS).writeValueAsString(INPUT));assertEquals(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA==""),MAPPER.writer(Base64Variants.MIME).writeValueAsString(INPUT));assertEquals(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA""),MAPPER.writer(Base64Variants.MODIFIED_FOR_URL).writeValueAsString(INPUT));assertEquals(quote(""YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA==""),MAPPER.writer(Base64Variants.PEM).writeValueAsString(INPUT));}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testShortArray",0,"public void testShortArray()throws Exception {assertEquals(""[0,1]"",serializeAsString(MAPPER,new short[]{0,1}));assertEquals(""[2,3]"",serializeAsString(MAPPER,new Short[]{2,3}));}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testIntArray",0,"public void testIntArray()throws Exception {assertEquals(""[0,-3]"",serializeAsString(MAPPER,new int[]{0,-3}));assertEquals(""[13,9]"",serializeAsString(MAPPER,new Integer[]{13,9}));}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testFloat",0,"public void testFloat()throws Exception {double[]values=new double[]{0.0,1.0,0.1,-37.01,999.99,0.3,33.3,Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY};for(double d : values){float f=(float)d;String expected=String.valueOf(f);if (Float.isNaN(f)|| Float.isInfinite(f)){expected=""\"""" + expected + ""\"""";}assertEquals(expected,serializeAsString(MAPPER,Float.valueOf(f)));}}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.testClass",0,"public void testClass()throws Exception {String result=MAPPER.writeValueAsString(java.util.List.class);assertEquals(""\""java.util.List\"""",result);}"
"com.fasterxml.jackson.databind.ser.TestSimpleTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.FailOnNullCreatorTest.testRequiredNonNullParam",0,"public void testRequiredNonNullParam()throws Exception {Person p;p=POINT_READER.readValue(aposToQuotes(""{}""));assertEquals(null,p.name);assertEquals(Integer.valueOf(0),p.age);ObjectReader r=POINT_READER.with(DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES);p=POINT_READER.readValue(aposToQuotes(""{'name':'John','age': null}""));assertEquals(""John"",p.name);assertEquals(Integer.valueOf(0),p.age);try {r.readValue(aposToQuotes(""{}""));fail(""Should not pass third test"");}catch(JsonMappingException e){verifyException(e,""Null value for creator property 'name'"");}try {r.readValue(aposToQuotes(""{'age': 5,'name': null}""));fail(""Should not pass fourth test"");}catch(JsonMappingException e){verifyException(e,""Null value for creator property 'name'"");}}"
"com.fasterxml.jackson.databind.creators.FailOnNullCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.TestObjectId.testColumnMetadata",0,"public void testColumnMetadata()throws Exception {ColumnMetadata col=new ColumnMetadata(""Billy"",""employee"",""comment"");Wrapper w=new Wrapper();w.a=col;w.b=col;String json=MAPPER.writeValueAsString(w);Wrapper deserialized=MAPPER.readValue(json,Wrapper.class);assertNotNull(deserialized);assertNotNull(deserialized.a);assertNotNull(deserialized.b);assertEquals(""Billy"",deserialized.a.getName());assertEquals(""employee"",deserialized.a.getType());assertEquals(""comment"",deserialized.a.getComment());assertSame(deserialized.a,deserialized.b);}"
"com.fasterxml.jackson.databind.objectid.TestObjectId.testMixedRefsIssue188",0,"public void testMixedRefsIssue188()throws Exception {Company comp=new Company();Employee e1=new Employee(1,""First"",null);Employee e2=new Employee(2,""Second"",e1);e1.addReport(e2);comp.add(e1);comp.add(e2);String json=MAPPER.writeValueAsString(comp);assertEquals(""{\""employees\"":["" + ""{\""id\"":1,\""name\"":\""First\"",\""manager\"":null,\""reports\"":[2]},"" + ""{\""id\"":2,\""name\"":\""Second\"",\""manager\"":1,\""reports\"":[]}""+ ""]}"",json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectId.testObjectAndTypeId",0,"public void testObjectAndTypeId()throws Exception {final ObjectMapper mapper=new ObjectMapper();Bar inputRoot=new Bar();Foo inputChild=new Foo();inputRoot.next=inputChild;inputChild.ref=inputRoot;String json=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(inputRoot);BaseEntity resultRoot=mapper.readValue(json,BaseEntity.class);assertNotNull(resultRoot);assertTrue(resultRoot instanceof Bar);Bar first=(Bar)resultRoot;assertNotNull(first.next);assertTrue(first.next instanceof Foo);Foo second=(Foo)first.next;assertNotNull(second.ref);assertSame(first,second.ref);}"
"com.fasterxml.jackson.databind.objectid.TestObjectId.testWithFieldsInBaseClass1083",0,"public void testWithFieldsInBaseClass1083()throws Exception {final String json=aposToQuotes(""{'schemas': [{\n"" + ""  'name': 'FoodMart'\n"" + ""}]}\n"");MAPPER.readValue(json,JsonRoot.class);}"
"com.fasterxml.jackson.databind.objectid.TestObjectId.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testCustomBeanDeserializer",0,"public void testCustomBeanDeserializer()throws Exception {String json=""{\""beans\"":[{\""c\"":{\""a\"":10,\""b\"":20},\""d\"":\""hello,tatu\""}]}"";TestBeans beans=MAPPER.readValue(json,TestBeans.class);assertNotNull(beans);List<TestBean> results=beans.beans;assertNotNull(results);assertEquals(1,results.size());TestBean bean=results.get(0);assertEquals(""hello,tatu"",bean.d);CustomBean c=bean.c;assertNotNull(c);assertEquals(10,c.a);assertEquals(20,c.b);json=""{\""beans\"":[{\""c\"":{\""b\"":3,\""a\"":-4},\""d\"":\""\""},"" + ""{\""d\"":\""abc\"",\""c\"":{\""b\"":15}}]}"";beans=MAPPER.readValue(json,TestBeans.class);assertNotNull(beans);results=beans.beans;assertNotNull(results);assertEquals(2,results.size());bean=results.get(0);assertEquals("""",bean.d);c=bean.c;assertNotNull(c);assertEquals(-4,c.a);assertEquals(3,c.b);bean=results.get(1);assertEquals(""abc"",bean.d);c=bean.c;assertNotNull(c);assertEquals(0,c.a);assertEquals(15,c.b);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testDelegating",0,"public void testDelegating()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(Immutable.class,new StdDelegatingDeserializer<Immutable>(new StdConverter<JsonNode,Immutable>(){@Override public Immutable convert(JsonNode value){int x=value.path(""x"").asInt();int y=value.path(""y"").asInt();return new Immutable(x,y);}}));mapper.registerModule(module);Immutable imm=mapper.readValue(""{\""x\"":3,\""y\"":7}"",Immutable.class);assertEquals(3,imm.x);assertEquals(7,imm.y);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testJsonNodeDelegating",0,"public void testJsonNodeDelegating()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(Immutable.class,new StdNodeBasedDeserializer<Immutable>(Immutable.class){@Override public Immutable convert(JsonNode root,DeserializationContext ctxt)throws IOException {int x=root.path(""x"").asInt();int y=root.path(""y"").asInt();return new Immutable(x,y);}});mapper.registerModule(module);Immutable imm=mapper.readValue(""{\""x\"":-10,\""y\"":3}"",Immutable.class);assertEquals(-10,imm.x);assertEquals(3,imm.y);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testIssue882",0,"public void testIssue882()throws Exception {Model original=new Model(Collections.singletonMap(new CustomKey(123),""test""));String json=MAPPER.writeValueAsString(original);Model deserialized=MAPPER.readValue(json,Model.class);assertNotNull(deserialized);assertNotNull(deserialized.map);assertEquals(1,deserialized.map.size());}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testContextReadValue",0,"public void testContextReadValue()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addDeserializer(Bean375Outer.class,new Bean375OuterDeserializer());module.addDeserializer(Bean375Inner.class,new Bean375InnerDeserializer());mapper.registerModule(module);Bean375Outer outer=mapper.readValue(""13"",Bean375Outer.class);assertEquals(26,outer.inner.x);Bean375Wrapper w=mapper.readValue(""{\""value\"":13}"",Bean375Wrapper.class);assertNotNull(w.value);assertNotNull(w.value.inner);assertEquals(-13,w.value.inner.x);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testCurrentValueAccess",0,"public void testCurrentValueAccess()throws Exception {Issue631Bean bean=MAPPER.readValue(aposToQuotes(""{'prop':'stuff'}""),Issue631Bean.class);assertNotNull(bean);assertEquals(""prop/Issue631Bean"",bean.prop);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testCustomStringDeser",0,"public void testCustomStringDeser()throws Exception {ObjectMapper mapper=new ObjectMapper().registerModule(new SimpleModule().addDeserializer(String.class,new UCStringDeserializer()));assertEquals(""FOO"",mapper.readValue(quote(""foo""),String.class));StringWrapper sw=mapper.readValue(""{\""str\"":\""foo\""}"",StringWrapper.class);assertNotNull(sw);assertEquals(""FOO"",sw.str);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.testDelegatingDeserializer",0,"public void testDelegatingDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper().registerModule(new DelegatingModuleImpl());String str=mapper.readValue(quote(""foo""),String.class);assertEquals(""MY:foo"",str);}"
"com.fasterxml.jackson.databind.deser.TestCustomDeserializers.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testSimple",0,"public void testSimple()throws Exception {String json=aposToQuotes(""{'x':1,'y':2}"");Object o=MAPPER.readValue(json,ValueClassXY.class);assertNotNull(o);assertSame(ValueClassXY.class,o.getClass());ValueClassXY value=(ValueClassXY)o;assertEquals(value._x,2);assertEquals(value._y,3);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testSimpleWithIgnores",0,"public void testSimpleWithIgnores()throws Exception {final String json=aposToQuotes(""{'x':1,'y':2,'z':4}"");Object o=null;try {o=MAPPER.readValue(json,ValueClassXY.class);fail(""Should not pass"");}catch(UnrecognizedPropertyException e){assertEquals(""z"",e.getPropertyName());verifyException(e,""Unrecognized field \""z\"""");}ObjectMapper ignorantMapper=new ObjectMapper();ignorantMapper.configOverride(SimpleBuilderXY.class).setIgnorals(JsonIgnoreProperties.Value.forIgnoreUnknown(true));o=ignorantMapper.readValue(json,ValueClassXY.class);assertNotNull(o);assertSame(ValueClassXY.class,o.getClass());ValueClassXY value=(ValueClassXY)o;assertEquals(value._x,2);assertEquals(value._y,3);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testMultiAccess",0,"public void testMultiAccess()throws Exception {String json=aposToQuotes(""{'c':3,'a':2,'b':-9}"");ValueClassABC value=MAPPER.readValue(json,ValueClassABC.class);assertNotNull(value);assertEquals(2,value.a);assertEquals(-9,value.b);assertEquals(3,value.c);value=MAPPER.readValue(aposToQuotes(""{'c':3,'d':5,'b':-9}""),ValueClassABC.class);assertNotNull(value);assertEquals(0,value.a);assertEquals(-9,value.b);assertEquals(3,value.c);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testImmutable",0,"public void testImmutable()throws Exception {final String json=""{\""value\"":13}"";ValueImmutable value=MAPPER.readValue(json,ValueImmutable.class);assertEquals(13,value.value);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testCustomWith",0,"public void testCustomWith()throws Exception {final String json=""{\""value\"":1}"";ValueFoo value=MAPPER.readValue(json,ValueFoo.class);assertEquals(1,value.value);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreGeneral",0,"public void testBuilderMethodReturnMoreGeneral()throws Exception {final String json=""{\""x\"":1}"";ValueInterface value=MAPPER.readValue(json,ValueInterface.class);assertEquals(2,value.getX());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testBuilderMethodReturnMoreSpecific",0,"public void testBuilderMethodReturnMoreSpecific()throws Exception {final String json=""{\""x\"":1}"";ValueInterface2 value=MAPPER.readValue(json,ValueInterface2.class);assertEquals(2,value.getX());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testSelfBuilder777",0,"public void testSelfBuilder777()throws Exception {SelfBuilder777 result=MAPPER.readValue(aposToQuotes(""{'x':3}'""),SelfBuilder777.class);assertNotNull(result);assertEquals(3,result.x);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testWithAnySetter822",0,"public void testWithAnySetter822()throws Exception {final String json=""{\""extra\"":3,\""foobar\"":[],\""x\"":1,\""name\"":\""bob\""}"";ValueClass822 value=MAPPER.readValue(json,ValueClass822.class);assertEquals(1,value.x);assertNotNull(value.stuff);assertEquals(3,value.stuff.size());assertEquals(Integer.valueOf(3),value.stuff.get(""extra""));assertEquals(""bob"",value.stuff.get(""name""));Object ob=value.stuff.get(""foobar"");assertNotNull(ob);assertTrue(ob instanceof List);assertTrue(((List<?>)ob).isEmpty());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.testPOJOConfigResolution1557",0,"public void testPOJOConfigResolution1557()throws Exception {final String json=""{\""value\"":1}"";MAPPER.registerModule(new NopModule1557());ValueFoo value=MAPPER.readValue(json,ValueFoo.class);assertEquals(1,value.value);}"
"com.fasterxml.jackson.databind.deser.builder.BuilderSimpleTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestJsonPointer.testIt",0,"public void testIt()throws Exception {final JsonNode SAMPLE_ROOT=objectMapper().readTree(SAMPLE_DOC_JSON_SPEC);assertSame(SAMPLE_ROOT,SAMPLE_ROOT.at(JsonPointer.compile("""")));assertTrue(SAMPLE_ROOT.at(JsonPointer.compile(""/Image"")).isObject());JsonNode n=SAMPLE_ROOT.at(JsonPointer.compile(""/Image/Width""));assertTrue(n.isNumber());assertEquals(SAMPLE_SPEC_VALUE_WIDTH,n.asInt());assertEquals(SAMPLE_SPEC_VALUE_HEIGHT,SAMPLE_ROOT.at(""/Image/Height"").asInt());assertEquals(SAMPLE_SPEC_VALUE_TN_ID3,SAMPLE_ROOT.at(JsonPointer.compile(""/Image/IDs/2"")).asInt());assertTrue(SAMPLE_ROOT.at(""/Image/Depth"").isMissingNode());assertTrue(SAMPLE_ROOT.at(""/Image/1"").isMissingNode());}"
"com.fasterxml.jackson.databind.node.TestJsonPointer.testLongNumbers",0,"public void testLongNumbers()throws Exception {JsonNode root=objectMapper().readTree(""{\""123\"" : 456}"");JsonNode jn2=root.at(""/123"");assertEquals(456,jn2.asInt());root=objectMapper().readTree(""{\""35361706045\"" : 1234}"");jn2=root.at(""/35361706045"");assertEquals(1234,jn2.asInt());}"
"com.fasterxml.jackson.databind.node.TestJsonPointer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.misc.AccessFixTest.testCauseOfThrowableIgnoral",0,"public void testCauseOfThrowableIgnoral()throws Exception {final SecurityManager origSecMan=System.getSecurityManager();ObjectMapper mapper=new ObjectMapper();mapper.disable(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);try {System.setSecurityManager(new CauseBlockingSecurityManager());_testCauseOfThrowableIgnoral(mapper);}finally {System.setSecurityManager(origSecMan);}}"
"com.fasterxml.jackson.databind.misc.AccessFixTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.views.ViewsWithSchemaTest.testSchemaWithViews",0,"public void testSchemaWithViews()throws Exception {ListingVisitor v=new ListingVisitor();MAPPER.writerWithView(ViewBC.class).acceptJsonFormatVisitor(POJO.class,v);assertEquals(Arrays.asList(""b"",""c""),v.names);v=new ListingVisitor();MAPPER.writerWithView(ViewAB.class).acceptJsonFormatVisitor(POJO.class,v);assertEquals(Arrays.asList(""a"",""b""),v.names);}"
"com.fasterxml.jackson.databind.views.ViewsWithSchemaTest.testSchemaWithoutViews",0,"public void testSchemaWithoutViews()throws Exception {ListingVisitor v=new ListingVisitor();MAPPER.acceptJsonFormatVisitor(POJO.class,v);assertEquals(Arrays.asList(""a"",""b"",""c""),v.names);}"
"com.fasterxml.jackson.databind.views.ViewsWithSchemaTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.CreatorPropertiesTest.testCreatorPropertiesAnnotation",0,"public void testCreatorPropertiesAnnotation()throws Exception {Issue905Bean b=MAPPER.readValue(aposToQuotes(""{'y':3,'x':2}""),Issue905Bean.class);assertEquals(2,b._x);assertEquals(3,b._y);}"
"com.fasterxml.jackson.databind.creators.CreatorPropertiesTest.testPossibleNamingConflict",0,"public void testPossibleNamingConflict()throws Exception {String json=""{\""bar\"":3}"";Ambiguity amb=MAPPER.readValue(json,Ambiguity.class);assertNotNull(amb);assertEquals(3,amb.getFoo());}"
"com.fasterxml.jackson.databind.creators.CreatorPropertiesTest.testConstructorPropertiesInference",0,"public void testConstructorPropertiesInference()throws Exception {final String JSON=aposToQuotes(""{'x':3,'y':5}"");assertTrue(MAPPER.isEnabled(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES));Lombok1371Bean result=MAPPER.readValue(JSON,Lombok1371Bean.class);assertEquals(4,result.x);assertEquals(6,result.y);ObjectMapper mapper=new ObjectMapper();mapper.disable(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES);result=mapper.readValue(JSON,Lombok1371Bean.class);assertEquals(3,result.x);assertEquals(5,result.y);}"
"com.fasterxml.jackson.databind.creators.CreatorPropertiesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.big.TestBiggerData.testReading",0,"public void testReading()throws Exception {ObjectMapper mapper=objectMapper();Citm citm=mapper.readValue(getClass().getResourceAsStream(""/data/citm_catalog.json""),Citm.class);assertNotNull(citm);assertNotNull(citm.areaNames);assertEquals(17,citm.areaNames.size());assertNotNull(citm.events);assertEquals(184,citm.events.size());assertNotNull(citm.seatCategoryNames);assertEquals(64,citm.seatCategoryNames.size());assertNotNull(citm.subTopicNames);assertEquals(19,citm.subTopicNames.size());assertNotNull(citm.subjectNames);assertEquals(0,citm.subjectNames.size());assertNotNull(citm.topicNames);assertEquals(4,citm.topicNames.size());assertNotNull(citm.topicSubTopics);assertEquals(4,citm.topicSubTopics.size());assertNotNull(citm.venueNames);assertEquals(1,citm.venueNames.size());}"
"com.fasterxml.jackson.databind.big.TestBiggerData.testRoundTrip",0,"public void testRoundTrip()throws Exception {ObjectMapper mapper=objectMapper();Citm citm=mapper.readValue(getClass().getResourceAsStream(""/data/citm_catalog.json""),Citm.class);ObjectWriter w=mapper.writerWithDefaultPrettyPrinter();String json1=w.writeValueAsString(citm);Citm citm2=mapper.readValue(json1,Citm.class);String json2=w.writeValueAsString(citm2);assertEquals(json1,json2);}"
"com.fasterxml.jackson.databind.big.TestBiggerData.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.testBeanUpdate",0,"public void testBeanUpdate()throws Exception {Bean bean=new Bean();assertEquals(""b"",bean.b);assertEquals(3,bean.c.length);assertNull(bean.child);Object ob=MAPPER.readerForUpdating(bean).readValue(""{\""b\"":\""x\"",\""c\"":[4,5],\""child\"":{\""a\"":\""y\""}}"");assertSame(ob,bean);assertEquals(""a"",bean.a);assertEquals(""x"",bean.b);assertArrayEquals(new int[]{4,5},bean.c);Bean child=bean.child;assertNotNull(child);assertEquals(""y"",child.a);assertEquals(""b"",child.b);assertArrayEquals(new int[]{1,2,3},child.c);assertNull(child.child);}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.testListUpdate",0,"public void testListUpdate()throws Exception {List<String> strs=new ArrayList<String>();strs.add(""a"");Object ob=MAPPER.readerForUpdating(strs).readValue(""[\""b\"",\""c\"",\""d\"" ]"");assertSame(strs,ob);assertEquals(4,strs.size());assertEquals(""a"",strs.get(0));assertEquals(""b"",strs.get(1));assertEquals(""c"",strs.get(2));assertEquals(""d"",strs.get(3));}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.testMapUpdate",0,"public void testMapUpdate()throws Exception {Map<String,String> strs=new HashMap<String,String>();strs.put(""a"",""a"");strs.put(""b"",""b"");Object ob=MAPPER.readerForUpdating(strs).readValue(""{\""c\"" : \""c\"",\""a\"" : \""z\"" }"");assertSame(strs,ob);assertEquals(3,strs.size());assertEquals(""z"",strs.get(""a""));assertEquals(""b"",strs.get(""b""));assertEquals(""c"",strs.get(""c""));}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.testUpdateSequence",0,"@SuppressWarnings(""resource"")public void testUpdateSequence()throws Exception {XYBean toUpdate=new XYBean();Iterator<XYBean> it=MAPPER.readerForUpdating(toUpdate).readValues(""{\""x\"":1,\""y\"":2}\n{\""x\"":16}{\""y\"":37}"");assertTrue(it.hasNext());XYBean value=it.next();assertSame(toUpdate,value);assertEquals(1,value.x);assertEquals(2,value.y);assertTrue(it.hasNext());value=it.next();assertSame(toUpdate,value);assertEquals(16,value.x);assertEquals(2,value.y);assertTrue(it.hasNext());value=it.next();assertSame(toUpdate,value);assertEquals(16,value.x);assertEquals(37,value.y);assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.testUpdatingWithViews",0,"public void testUpdatingWithViews()throws Exception {Updateable bean=new Updateable();bean.num=100;bean.str=""test"";Updateable result=MAPPER.readerForUpdating(bean).withView(TextView.class).readValue(""{\""num\"": 10,\""str\"":\""foobar\""}"");assertSame(bean,result);assertEquals(100,bean.num);assertEquals(""foobar"",bean.str);}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.testIssue744",0,"public void testIssue744()throws IOException {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule();module.addDeserializer(DataA.class,new DataADeserializer());mapper.registerModule(module);DataB db=new DataB();db.da.i=11;db.k=13;String jsonBString=mapper.writeValueAsString(db);JsonNode jsonBNode=mapper.valueToTree(db);DataB dbNewViaString=mapper.readValue(jsonBString,DataB.class);assertEquals(5,dbNewViaString.da.i);assertEquals(13,dbNewViaString.k);DataB dbNewViaNode=mapper.treeToValue(jsonBNode,DataB.class);assertEquals(5,dbNewViaNode.da.i);assertEquals(13,dbNewViaNode.k);DataB dbUpdViaString=new DataB();DataB dbUpdViaNode=new DataB();assertEquals(1,dbUpdViaString.da.i);assertEquals(3,dbUpdViaString.k);mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);assertEquals(5,dbUpdViaString.da.i);assertEquals(13,dbUpdViaString.k);assertEquals(1,dbUpdViaNode.da.i);assertEquals(3,dbUpdViaNode.k);mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);assertEquals(5,dbUpdViaNode.da.i);assertEquals(13,dbUpdViaNode.k);}"
"com.fasterxml.jackson.databind.convert.TestUpdateViaObjectReader.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestBuilderMethods.testSimple",0,"public void testSimple(){POJOPropertiesCollector coll=collector(SimpleBuilder.class,""with"");Map<String,POJOPropertyBuilder> props=coll.getPropertyMap();assertEquals(1,props.size());POJOPropertyBuilder prop=props.get(""x"");assertNotNull(prop);assertTrue(prop.hasField());assertFalse(prop.hasGetter());assertTrue(prop.hasSetter());}"
"com.fasterxml.jackson.databind.introspect.TestBuilderMethods.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testSettings",0,"public void testSettings(){assertFalse(MAPPER.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT));assertFalse(DEFAULT_READER.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT));assertTrue(READER_WITH_ARRAYS.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT));}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testPOJOFromEmptyArray",0,"public void testPOJOFromEmptyArray()throws Exception {try {DEFAULT_READER.forType(Bean.class).readValue(EMPTY_ARRAY);fail(""Should not accept Empty Array for POJO by default"");}catch(JsonMappingException e){verifyException(e,""START_ARRAY token"");assertValidLocation(e.getLocation());}Bean result=READER_WITH_ARRAYS.forType(Bean.class).readValue(EMPTY_ARRAY);assertNull(result);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testMapFromEmptyArray",0,"public void testMapFromEmptyArray()throws Exception {try {DEFAULT_READER.forType(Map.class).readValue(EMPTY_ARRAY);fail(""Should not accept Empty Array for Map by default"");}catch(JsonMappingException e){verifyException(e,""START_ARRAY token"");}Map<?,?> result=READER_WITH_ARRAYS.forType(Map.class).readValue(EMPTY_ARRAY);assertNull(result);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testEnumMapFromEmptyArray",0,"public void testEnumMapFromEmptyArray()throws Exception {EnumMap<?,?> result2=READER_WITH_ARRAYS.forType(new TypeReference<EnumMap<ABC,String>>(){}).readValue(EMPTY_ARRAY);assertNull(result2);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testWrapperFromEmptyArray",0,"public void testWrapperFromEmptyArray()throws Exception {_testNullWrapper(Boolean.class);_testNullWrapper(Byte.class);_testNullWrapper(Character.class);_testNullWrapper(Short.class);_testNullWrapper(Integer.class);_testNullWrapper(Long.class);_testNullWrapper(Float.class);_testNullWrapper(Double.class);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testNullStringFromEmptyArray",0,"public void testNullStringFromEmptyArray()throws Exception {_testNullWrapper(String.class);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testNullEnumFromEmptyArray",0,"public void testNullEnumFromEmptyArray()throws Exception {_testNullWrapper(ABC.class);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.testStdJdkTypesFromEmptyArray",0,"public void testStdJdkTypesFromEmptyArray()throws Exception {_testNullWrapper(BigInteger.class);_testNullWrapper(BigDecimal.class);_testNullWrapper(UUID.class);_testNullWrapper(Date.class);_testNullWrapper(Calendar.class);}"
"com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testSimple",0,"public void testSimple()throws Exception {String JSON=""\""OK\"" \""RULES\""  null"";JsonParser jp=MAPPER.getFactory().createParser(JSON);assertEquals(TestEnum.OK,MAPPER.readValue(jp,TestEnum.class));assertEquals(TestEnum.RULES,MAPPER.readValue(jp,TestEnum.class));assertNull(MAPPER.readValue(jp,TestEnum.class));assertFalse(jp.hasCurrentToken());assertEquals(TestEnum.JACKSON,MAPPER.readValue("" 0 "",TestEnum.class));try {MAPPER.readValue(""\""NO-SUCH-VALUE\"""",TestEnum.class);fail(""Expected an exception for bogus enum value..."");}catch(JsonMappingException jex){verifyException(jex,""value not one of declared"");}jp.close();}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testComplexEnum",0,"/** * Enums are considered complex if they have code (and hence sub-classes)... an example is TimeUnit*/public void testComplexEnum()throws Exception {String json=MAPPER.writeValueAsString(TimeUnit.SECONDS);assertEquals(quote(""SECONDS""),json);TimeUnit result=MAPPER.readValue(json,TimeUnit.class);assertSame(TimeUnit.SECONDS,result);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testAnnotated",0,"/** * Testing to see that annotation override works*/public void testAnnotated()throws Exception {AnnotatedTestEnum e=MAPPER.readValue(""\""JACKSON\"""",AnnotatedTestEnum.class);assertEquals(AnnotatedTestEnum.OK,e);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testSubclassedEnums",0,"public void testSubclassedEnums()throws Exception {EnumWithSubClass value=MAPPER.readValue(""\""A\"""",EnumWithSubClass.class);assertEquals(EnumWithSubClass.A,value);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testToStringEnums",0,"public void testToStringEnums()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING,true);LowerCaseEnum value=m.readValue(""\""c\"""",LowerCaseEnum.class);assertEquals(LowerCaseEnum.C,value);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testNumbersToEnums",0,"public void testNumbersToEnums()throws Exception {assertFalse(MAPPER.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS));TestEnum value=MAPPER.readValue(""1"",TestEnum.class);assertSame(TestEnum.RULES,value);ObjectReader r=MAPPER.readerFor(TestEnum.class).with(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);try {value=r.readValue(""1"");fail(""Expected an error"");}catch(JsonMappingException e){verifyException(e,""Can not deserialize"");verifyException(e,""not allowed to deserialize Enum value out of number: disable"");}try {value=r.readValue(quote(""1""));fail(""Expected an error"");}catch(JsonMappingException e){verifyException(e,""Can not deserialize"");verifyException(e,""value not one of declared Enum"");}}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumsWithIndex",0,"public void testEnumsWithIndex()throws Exception {ObjectMapper m=new ObjectMapper();m.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);String json=m.writeValueAsString(TestEnum.RULES);assertEquals(String.valueOf(TestEnum.RULES.ordinal()),json);TestEnum result=m.readValue(json,TestEnum.class);assertSame(TestEnum.RULES,result);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumsWithJsonValue",0,"public void testEnumsWithJsonValue()throws Exception {EnumWithJsonValue e=MAPPER.readValue(quote(""foo""),EnumWithJsonValue.class);assertSame(EnumWithJsonValue.A,e);e=MAPPER.readValue(quote(""bar""),EnumWithJsonValue.class);assertSame(EnumWithJsonValue.B,e);EnumSet<EnumWithJsonValue> set=MAPPER.readValue(""[\""bar\""]"",new TypeReference<EnumSet<EnumWithJsonValue>>(){});assertNotNull(set);assertEquals(1,set.size());assertTrue(set.contains(EnumWithJsonValue.B));assertFalse(set.contains(EnumWithJsonValue.A));EnumMap<EnumWithJsonValue,Integer> map=MAPPER.readValue(""{\""foo\"":13}"",new TypeReference<EnumMap<EnumWithJsonValue,Integer>>(){});assertNotNull(map);assertEquals(1,map.size());assertEquals(Integer.valueOf(13),map.get(EnumWithJsonValue.A));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testAllowUnknownEnumValuesReadAsNull",0,"public void testAllowUnknownEnumValuesReadAsNull()throws Exception {ObjectReader reader=MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);assertNull(reader.forType(TestEnum.class).readValue(""\""NO-SUCH-VALUE\""""));assertNull(reader.forType(TestEnum.class).readValue("" 4343 ""));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testAllowUnknownEnumValuesForEnumSets",0,"public void testAllowUnknownEnumValuesForEnumSets()throws Exception {ObjectReader reader=MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);EnumSet<TestEnum> result=reader.forType(new TypeReference<EnumSet<TestEnum>>(){}).readValue(""[\""NO-SUCH-VALUE\""]"");assertEquals(0,result.size());}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testAllowUnknownEnumValuesAsMapKeysReadAsNull",0,"public void testAllowUnknownEnumValuesAsMapKeysReadAsNull()throws Exception {ObjectReader reader=MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL);ClassWithEnumMapKey result=reader.forType(ClassWithEnumMapKey.class).readValue(""{\""map\"":{\""NO-SUCH-VALUE\"":\""val\""}}"");assertTrue(result.map.containsKey(null));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled",0,"public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled()throws Exception {assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL));try {MAPPER.readValue(""{\""map\"":{\""NO-SUCH-VALUE\"":\""val\""}}"",ClassWithEnumMapKey.class);fail(""Expected an exception for bogus enum value..."");}catch(JsonMappingException jex){verifyException(jex,""Can not deserialize Map key of type com.fasterxml.jackson.databind.deser"");}}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumsWithEmpty",0,"public void testEnumsWithEmpty()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);TestEnum result=mapper.readValue(""\""\"""",TestEnum.class);assertNull(result);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testGenericEnumDeserialization",0,"public void testGenericEnumDeserialization()throws Exception {final ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""foobar"");module.addDeserializer(Enum.class,new LcEnumDeserializer());mapper.registerModule(module);assertEquals(TestEnum.JACKSON,mapper.readValue(quote(""jackson""),TestEnum.class));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testUnwrappedEnum",0,"public void testUnwrappedEnum()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);assertEquals(TestEnum.JACKSON,mapper.readValue(""["" + quote(""JACKSON"")+ ""]"",TestEnum.class));}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testUnwrappedEnumException",0,"public void testUnwrappedEnumException()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);try {Object v=mapper.readValue(""["" + quote(""JACKSON"")+ ""]"",TestEnum.class);fail(""Exception was not thrown on deserializing a single array element of type enum;instead got: "" + v);}catch(JsonMappingException exp){verifyException(exp,""Can not deserialize"");}}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testIndexAsString",0,"public void testIndexAsString()throws Exception {TestEnum en=MAPPER.readValue(""2"",TestEnum.class);assertSame(TestEnum.values()[2],en);en=MAPPER.readValue(quote(""1""),TestEnum.class);assertSame(TestEnum.values()[1],en);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithJsonPropertyRename",0,"public void testEnumWithJsonPropertyRename()throws Exception {String json=MAPPER.writeValueAsString(new EnumWithPropertyAnno[]{EnumWithPropertyAnno.B,EnumWithPropertyAnno.A});assertEquals(""[\""b\"",\""a\""]"",json);EnumWithPropertyAnno[]result=MAPPER.readValue(json,EnumWithPropertyAnno[].class);assertNotNull(result);assertEquals(2,result.length);assertSame(EnumWithPropertyAnno.B,result[0]);assertSame(EnumWithPropertyAnno.A,result[1]);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testDeserWithToString1161",0,"public void testDeserWithToString1161()throws Exception {Enum1161 result=MAPPER.readerFor(Enum1161.class).readValue(quote(""A""));assertSame(Enum1161.A,result);result=MAPPER.readerFor(Enum1161.class).with(DeserializationFeature.READ_ENUMS_USING_TO_STRING).readValue(quote(""a""));assertSame(Enum1161.A,result);result=MAPPER.readerFor(Enum1161.class).without(DeserializationFeature.READ_ENUMS_USING_TO_STRING).readValue(quote(""A""));assertSame(Enum1161.A,result);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithDefaultAnnotation",0,"public void testEnumWithDefaultAnnotation()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);EnumWithDefaultAnno myEnum=mapper.readValue(""\""foo\"""",EnumWithDefaultAnno.class);assertSame(EnumWithDefaultAnno.OTHER,myEnum);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithDefaultAnnotationUsingIndexInBound1",0,"public void testEnumWithDefaultAnnotationUsingIndexInBound1()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);EnumWithDefaultAnno myEnum=mapper.readValue(""1"",EnumWithDefaultAnno.class);assertSame(EnumWithDefaultAnno.B,myEnum);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithDefaultAnnotationUsingIndexInBound2",0,"public void testEnumWithDefaultAnnotationUsingIndexInBound2()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);EnumWithDefaultAnno myEnum=mapper.readValue(""2"",EnumWithDefaultAnno.class);assertSame(EnumWithDefaultAnno.OTHER,myEnum);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithDefaultAnnotationUsingIndexSameAsLength",0,"public void testEnumWithDefaultAnnotationUsingIndexSameAsLength()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);EnumWithDefaultAnno myEnum=mapper.readValue(""3"",EnumWithDefaultAnno.class);assertSame(EnumWithDefaultAnno.OTHER,myEnum);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithDefaultAnnotationUsingIndexOutOfBound",0,"public void testEnumWithDefaultAnnotationUsingIndexOutOfBound()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);EnumWithDefaultAnno myEnum=mapper.readValue(""4"",EnumWithDefaultAnno.class);assertSame(EnumWithDefaultAnno.OTHER,myEnum);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testEnumWithDefaultAnnotationWithConstructor",0,"public void testEnumWithDefaultAnnotationWithConstructor()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE);EnumWithDefaultAnnoAndConstructor myEnum=mapper.readValue(""\""foo\"""",EnumWithDefaultAnnoAndConstructor.class);assertNull(""When using a constructor,the default value annotation shouldn't be used."",myEnum);}"
"com.fasterxml.jackson.databind.deser.jdk.EnumDeserializationTest.testExceptionFromCustomEnumKeyDeserializer",0,"public void testExceptionFromCustomEnumKeyDeserializer(){ObjectMapper objectMapper=new ObjectMapper();objectMapper.registerModule(new EnumModule());try {objectMapper.readValue(""{\""TWO\"": \""dumpling\""}"",new TypeReference<Map<AnEnum,String>>(){});fail(""No exception"");}catch(IOException e){assertTrue(e.getMessage().contains(""Undefined AnEnum""));}}"
"com.fasterxml.jackson.databind.type.TestGenericsBounded.testLowerBound",0,"public void testLowerBound()throws Exception {IntBeanWrapper<?> result=MAPPER.readValue(""{\""wrapped\"":{\""x\"":3}}"",IntBeanWrapper.class);assertNotNull(result);assertEquals(IntBean.class,result.wrapped.getClass());assertEquals(3,result.wrapped.x);}"
"com.fasterxml.jackson.databind.type.TestGenericsBounded.testBounded",0,"public void testBounded()throws Exception {BoundedWrapper<IntBean> result=MAPPER.readValue(""{\""values\"":[{\""x\"":3}]}"",new TypeReference<BoundedWrapper<IntBean>>(){});List<?> list=result.values;assertEquals(1,list.size());Object ob=list.get(0);assertEquals(IntBean.class,ob.getClass());assertEquals(3,result.values.get(0).x);}"
"com.fasterxml.jackson.databind.type.TestGenericsBounded.testGenericsComplex",0,"public void testGenericsComplex()throws Exception {DoubleRange in=new DoubleRange(-0.5,0.5);String json=MAPPER.writeValueAsString(in);DoubleRange out=MAPPER.readValue(json,DoubleRange.class);assertNotNull(out);assertEquals(-0.5,out.start);assertEquals(0.5,out.end);}"
"com.fasterxml.jackson.databind.type.TestGenericsBounded.testIssue778",0,"public void testIssue778()throws Exception {String json=""{\""rows\"":[{\""d\"":{}}]}"";final TypeReference<?> typeRef=new TypeReference<ResultSetWithDoc<MyDoc>>(){};JavaType type=MAPPER.getTypeFactory().constructType(typeRef);JavaType resultSetType=type.findSuperType(ResultSet.class);assertNotNull(resultSetType);assertEquals(1,resultSetType.containedTypeCount());JavaType rowType=resultSetType.containedType(0);assertNotNull(rowType);assertEquals(RowWithDoc.class,rowType.getRawClass());assertEquals(1,rowType.containedTypeCount());JavaType docType=rowType.containedType(0);assertEquals(MyDoc.class,docType.getRawClass());ResultSetWithDoc<MyDoc> rs=MAPPER.readValue(json,type);Document d=rs.rows.iterator().next().d;assertEquals(MyDoc.class,d.getClass());}"
"com.fasterxml.jackson.databind.type.TestGenericsBounded.test",0,"public void test()throws Exception {AnnotatedValueSimple<Integer> item=new AnnotatedValueSimple<Integer>(5);CbFailing<AnnotatedValueSimple<Integer>,Integer> codebook=new CbFailing<AnnotatedValueSimple<Integer>,Integer>(item);String json=MAPPER.writeValueAsString(codebook);assertNotNull(json);}"
"com.fasterxml.jackson.databind.type.TestGenericsBounded.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.DeprecatedConstructType1456Test.testGenericResolutionUsingDeprecated",0,"@SuppressWarnings(""deprecation"")public void testGenericResolutionUsingDeprecated()throws Exception {Method proceed=BaseController.class.getMethod(""process"",BaseEntity.class);Type entityType=proceed.getGenericParameterTypes()[0];JavaType resolvedType=MAPPER.getTypeFactory().constructType(entityType,ImplController.class);assertEquals(ImplEntity.class,resolvedType.getRawClass());}"
"com.fasterxml.jackson.databind.type.DeprecatedConstructType1456Test.testGenericParameterViaClass",0,"public void testGenericParameterViaClass()throws Exception {BeanDescription desc=MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(ImplController.class));AnnotatedClass ac=desc.getClassInfo();AnnotatedMethod m=ac.findMethod(""process"",new Class<?>[]{BaseEntity.class});assertNotNull(m);assertEquals(1,m.getParameterCount());AnnotatedParameter param=m.getParameter(0);assertEquals(ImplEntity.class,param.getType().getRawClass());}"
"com.fasterxml.jackson.databind.type.DeprecatedConstructType1456Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithDeser.testSimplePerCall",0,"public void testSimplePerCall()throws Exception {final String INPUT=aposToQuotes(""[{'value':'a'},{'value':'b'}]"");TestPOJO[]pojos=MAPPER.readerFor(TestPOJO[].class).readValue(INPUT);assertEquals(2,pojos.length);assertEquals(""a/0"",pojos[0].value);assertEquals(""b/1"",pojos[1].value);TestPOJO[]pojos2=MAPPER.readerFor(TestPOJO[].class).readValue(INPUT);assertEquals(2,pojos2.length);assertEquals(""a/0"",pojos2[0].value);assertEquals(""b/1"",pojos2[1].value);}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithDeser.testSimpleDefaults",0,"public void testSimpleDefaults()throws Exception {final String INPUT=aposToQuotes(""{'value':'x'}"");TestPOJO pojo=MAPPER.readerFor(TestPOJO.class).withAttribute(KEY,Integer.valueOf(3)).readValue(INPUT);assertEquals(""x/3"",pojo.value);TestPOJO pojo2=MAPPER.readerFor(TestPOJO.class).withAttribute(KEY,Integer.valueOf(5)).readValue(INPUT);assertEquals(""x/5"",pojo2.value);}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithDeser.testHierarchic",0,"public void testHierarchic()throws Exception {final String INPUT=aposToQuotes(""[{'value':'x'},{'value':'y'}]"");ObjectReader r=MAPPER.readerFor(TestPOJO[].class).withAttribute(KEY,Integer.valueOf(2));TestPOJO[]pojos=r.readValue(INPUT);assertEquals(2,pojos.length);assertEquals(""x/2"",pojos[0].value);assertEquals(""y/3"",pojos[1].value);TestPOJO[]pojos2=r.readValue(INPUT);assertEquals(2,pojos2.length);assertEquals(""x/2"",pojos2[0].value);assertEquals(""y/3"",pojos2[1].value);}"
"com.fasterxml.jackson.databind.contextual.TestContextAttributeWithDeser.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForClass.testClassMixInsTopLevel",0,"public void testClassMixInsTopLevel()throws IOException {ObjectMapper mapper=new ObjectMapper();Map<String,Object> result;result=writeAndMap(mapper,new LeafClass(""abc""));assertEquals(1,result.size());assertEquals(""abc"",result.get(""a""));mapper=new ObjectMapper();mapper.addMixIn(LeafClass.class,MixIn.class);result=writeAndMap(mapper,new LeafClass(""abc""));assertEquals(2,result.size());assertEquals(""abc"",result.get(""a""));assertEquals(""c"",result.get(""c""));mapper=new ObjectMapper();mapper.addMixIn(BaseClass.class,MixIn.class);result=writeAndMap(mapper,new LeafClass(""abc""));assertEquals(1,result.size());assertEquals(""abc"",result.get(""a""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForClass.testClassMixInsMidLevel",0,"public void testClassMixInsMidLevel()throws IOException {ObjectMapper mapper=new ObjectMapper();Map<String,Object> result;LeafClass bean=new LeafClass(""xyz"");bean._c=""c2"";result=writeAndMap(mapper,bean);assertEquals(2,result.size());assertEquals(""xyz"",result.get(""a""));assertEquals(""c2"",result.get(""c""));mapper=new ObjectMapper();mapper.addMixIn(BaseClass.class,MixInAutoDetect.class);result=writeAndMap(mapper,bean);assertEquals(1,result.size());assertEquals(""c2"",result.get(""c""));ObjectMapper mapper2=new ObjectMapper();result=writeAndMap(mapper2,bean);assertEquals(2,result.size());ObjectMapper mapper3=mapper2.copy();mapper3.addMixIn(BaseClass.class,MixInAutoDetect.class);result=writeAndMap(mapper3,bean);assertEquals(1,result.size());assertEquals(""c2"",result.get(""c""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForClass.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestTimestampDeserialization.testTimestampUtil",0,"public void testTimestampUtil()throws Exception {long now=123456789L;java.sql.Timestamp value=new java.sql.Timestamp(now);assertEquals(value,new ObjectMapper().readValue("""" + now,java.sql.Timestamp.class));String dateStr=serializeTimestampAsString(value);java.sql.Timestamp result=new ObjectMapper().readValue(""\"""" + dateStr + ""\"""",java.sql.Timestamp.class);assertEquals(""Date: expect "" + value + "" (""+ value.getTime()+ ""),got ""+ result+ "" (""+ result.getTime()+ "")"",value.getTime(),result.getTime());}"
"com.fasterxml.jackson.databind.deser.TestTimestampDeserialization.testTimestampUtilSingleElementArray",0,"public void testTimestampUtilSingleElementArray()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);long now=System.currentTimeMillis();java.sql.Timestamp value=new java.sql.Timestamp(now);assertEquals(value,mapper.readValue(""["" + now + ""]"",java.sql.Timestamp.class));String dateStr=serializeTimestampAsString(value);java.sql.Timestamp result=mapper.readValue(""[\"""" + dateStr + ""\""]"",java.sql.Timestamp.class);assertEquals(""Date: expect "" + value + "" (""+ value.getTime()+ ""),got ""+ result+ "" (""+ result.getTime()+ "")"",value.getTime(),result.getTime());}"
"com.fasterxml.jackson.databind.deser.TestTimestampDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestGenericCollectionDeser.testListSubClass",0,"/** * Verifying that sub-classing works ok wrt generics information*/public void testListSubClass()throws Exception {ObjectMapper mapper=new ObjectMapper();ListSubClass result=mapper.readValue(""[\""123\"" ]"",ListSubClass.class);assertEquals(1,result.size());Object value=result.get(0);assertEquals(StringWrapper.class,value.getClass());StringWrapper bw=(StringWrapper)value;assertEquals(""123"",bw.str);}"
"com.fasterxml.jackson.databind.deser.TestGenericCollectionDeser.testAnnotatedLStringist",0,"public void testAnnotatedLStringist()throws Exception {ObjectMapper mapper=new ObjectMapper();AnnotatedStringList result=mapper.readValue(""[\""...\"" ]"",AnnotatedStringList.class);assertEquals(1,result.size());Object ob=result.get(0);assertEquals(StringWrapper.class,ob.getClass());assertEquals(""..."",((StringWrapper)ob).str);}"
"com.fasterxml.jackson.databind.deser.TestGenericCollectionDeser.testAnnotatedBooleanList",0,"public void testAnnotatedBooleanList()throws Exception {ObjectMapper mapper=new ObjectMapper();AnnotatedBooleanList result=mapper.readValue(""[false ]"",AnnotatedBooleanList.class);assertEquals(1,result.size());Object ob=result.get(0);assertEquals(BooleanElement.class,ob.getClass());assertFalse(((BooleanElement)ob).b);}"
"com.fasterxml.jackson.databind.deser.TestGenericCollectionDeser.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testBeanMergingViaProp",0,"public void testBeanMergingViaProp()throws Exception {Config config=MAPPER.readValue(aposToQuotes(""{'loc':{'b':3}}""),Config.class);assertEquals(1,config.loc.a);assertEquals(3,config.loc.b);config=MAPPER.readerForUpdating(new Config(5,7)).readValue(aposToQuotes(""{'loc':{'b':2}}""));assertEquals(5,config.loc.a);assertEquals(2,config.loc.b);}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testBeanMergingViaType",0,"public void testBeanMergingViaType()throws Exception {NonMergeConfig config=MAPPER.readValue(aposToQuotes(""{'loc':{'a':3}}""),NonMergeConfig.class);assertEquals(3,config.loc.a);assertEquals(0,config.loc.b);ObjectMapper mapper=newObjectMapper();mapper.configOverride(AB.class).setMergeable(true);config=mapper.readValue(aposToQuotes(""{'loc':{'a':3}}""),NonMergeConfig.class);assertEquals(3,config.loc.a);assertEquals(2,config.loc.b);}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testBeanMergingViaGlobal",0,"public void testBeanMergingViaGlobal()throws Exception {ObjectMapper mapper=newObjectMapper().setDefaultMergeable(true);NonMergeConfig config=mapper.readValue(aposToQuotes(""{'loc':{'a':3}}""),NonMergeConfig.class);assertEquals(3,config.loc.a);assertEquals(2,config.loc.b);FiveMinuteUser user0=new FiveMinuteUser(""Bob"",""Bush"",true,FiveMinuteUser.Gender.MALE,new byte[]{1,2,3,4,5});FiveMinuteUser user=mapper.readerFor(FiveMinuteUser.class).withValueToUpdate(user0).readValue(aposToQuotes(""{'name':{'last':'Brown'}}""));assertEquals(""Bob"",user.getName().getFirst());assertEquals(""Brown"",user.getName().getLast());}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testBeanMergingWithoutSetter",0,"public void testBeanMergingWithoutSetter()throws Exception {NoSetterConfig config=MAPPER.readValue(aposToQuotes(""{'value':{'b':99}}""),NoSetterConfig.class);assertEquals(99,config._value.b);assertEquals(1,config._value.a);}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testBeanAsArrayMerging",0,"public void testBeanAsArrayMerging()throws Exception {ABAsArray input=new ABAsArray();input.a=4;input.b=6;assertSame(input,MAPPER.readerForUpdating(input).readValue(""[1,3]""));assertEquals(1,input.a);assertEquals(3,input.b);assertSame(input,MAPPER.readerForUpdating(input).readValue(""[9]""));assertEquals(9,input.a);assertEquals(3,input.b);try {MAPPER.readerForUpdating(input).readValue(""[9,8,14]"");fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""expected at most 2 properties"");}try {MAPPER.readerForUpdating(input).readValue(""\""blob\"""");fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""Can not deserialize"");verifyException(e,""from non-Array representation"");}}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testReferenceMerging",0,"public void testReferenceMerging()throws Exception {MergedReference result=MAPPER.readValue(aposToQuotes(""{'value':'override'}""),MergedReference.class);assertEquals(""override"",result.value.get());}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.testInvalidPropertyMerge",0,"public void testInvalidPropertyMerge()throws Exception {ObjectMapper mapper=newObjectMapper().disable(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE);try {mapper.readValue(""{\""value\"":3}"",CantMergeInts.class);fail(""Should not pass"");}catch(InvalidDefinitionException e){verifyException(e,""can not be merged"");}}"
"com.fasterxml.jackson.databind.deser.merge.PropertyMergeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ext.TestJava7Types.testPathRoundtrip",0,"public void testPathRoundtrip(){}"
"com.fasterxml.jackson.databind.ext.TestJava7Types.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestTypeResolution.testMaps",0,"public void testMaps(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(new TypeReference<LongValuedMap<String>>(){});MapType type=(MapType)t;assertSame(LongValuedMap.class,type.getRawClass());assertEquals(tf.constructType(String.class),type.getKeyType());assertEquals(tf.constructType(Long.class),type.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeResolution.testListViaTypeRef",0,"public void testListViaTypeRef(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(new TypeReference<MyLongList<Integer>>(){});CollectionType type=(CollectionType)t;assertSame(MyLongList.class,type.getRawClass());assertEquals(tf.constructType(Long.class),type.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeResolution.testListViaClass",0,"public void testListViaClass(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(LongList.class);JavaType type=(CollectionType)t;assertSame(LongList.class,type.getRawClass());assertEquals(tf.constructType(Long.class),type.getContentType());}"
"com.fasterxml.jackson.databind.type.TestTypeResolution.testGeneric",0,"public void testGeneric(){TypeFactory tf=TypeFactory.defaultInstance();JavaType t=tf.constructType(DoubleRange.class);JavaType rangeParams=t.findSuperType(Range.class);assertEquals(1,rangeParams.containedTypeCount());assertEquals(Double.class,rangeParams.containedType(0).getRawClass());t=tf.constructType(new TypeReference<DoubleRange>(){});rangeParams=t.findSuperType(Range.class);assertEquals(1,rangeParams.containedTypeCount());assertEquals(Double.class,rangeParams.containedType(0).getRawClass());}"
"com.fasterxml.jackson.databind.type.TestTypeResolution.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testEnumAsObjectValid",0,"public void testEnumAsObjectValid()throws Exception {assertEquals(""{\""value\"":\""a1\""}"",MAPPER.writeValueAsString(PoNUM.A));}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testEnumAsIndexViaAnnotations",0,"public void testEnumAsIndexViaAnnotations()throws Exception {assertEquals(""{\""text\"":0}"",MAPPER.writeValueAsString(new PoNUMContainer()));}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testEnumAsObjectBroken",0,"public void testEnumAsObjectBroken()throws Exception {assertEquals(""0"",MAPPER.writeValueAsString(PoAsArray.A));}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testOverrideEnumAsString",0,"public void testOverrideEnumAsString()throws Exception {assertEquals(""{\""value\"":\""B\""}"",MAPPER.writeValueAsString(new PoOverrideAsString()));}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testOverrideEnumAsNumber",0,"public void testOverrideEnumAsNumber()throws Exception {assertEquals(""{\""value\"":1}"",MAPPER.writeValueAsString(new PoOverrideAsNumber()));}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testEnumValueAsNumber",0,"public void testEnumValueAsNumber()throws Exception {assertEquals(String.valueOf(Color.GREEN.ordinal()),MAPPER.writeValueAsString(Color.GREEN));}"
"com.fasterxml.jackson.databind.format.EnumFormatShapeTest.testEnumPropertyAsNumber",0,"public void testEnumPropertyAsNumber()throws Exception {assertEquals(String.format(aposToQuotes(""{'color':%s}""),Color.GREEN.ordinal()),MAPPER.writeValueAsString(new ColorWrapper(Color.GREEN)));}"
"com.fasterxml.jackson.databind.jsontype.UnknownSubClassTest.testUnknownClassAsSubtype",0,"public void testUnknownClassAsSubtype()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,false);BaseWrapper w=mapper.readValue(aposToQuotes(""{'value':{'clazz':'com.foobar.Nothing'}}'""),BaseWrapper.class);assertNotNull(w);}"
"com.fasterxml.jackson.databind.jsontype.UnknownSubClassTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.NumericConversionTest.testDoubleToInt",0,"public void testDoubleToInt()throws Exception {Integer I=MAPPER.readValue("" 1.25 "",Integer.class);assertEquals(1,I.intValue());IntWrapper w=MAPPER.readValue(""{\""i\"":-2.25 }"",IntWrapper.class);assertEquals(-2,w.i);int[]arr=MAPPER.readValue(""[1.25 ]"",int[].class);assertEquals(1,arr[0]);try {R.forType(Integer.class).readValue(""1.5"");fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not coerce a floating-point"");}try {R.forType(Integer.TYPE).readValue(""1.5"");fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not coerce a floating-point"");}try {R.forType(IntWrapper.class).readValue(""{\""i\"":-2.25 }"");fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not coerce a floating-point"");}try {R.forType(int[].class).readValue(""[2.5 ]"");fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not coerce a floating-point"");}}"
"com.fasterxml.jackson.databind.convert.NumericConversionTest.testDoubleToLong",0,"public void testDoubleToLong()throws Exception {Long L=MAPPER.readValue("" 3.33 "",Long.class);assertEquals(3L,L.longValue());LongWrapper w=MAPPER.readValue(""{\""l\"":-2.25 }"",LongWrapper.class);assertEquals(-2L,w.l);long[]arr=MAPPER.readValue(""[1.25 ]"",long[].class);assertEquals(1,arr[0]);try {R.forType(Long.class).readValue(""1.5"");fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""Can not coerce a floating-point"");}try {R.forType(Long.TYPE).readValue(""1.5"");fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""Can not coerce a floating-point"");}try {R.forType(LongWrapper.class).readValue(""{\""l\"": 7.7 }"");fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""Can not coerce a floating-point"");}try {R.forType(long[].class).readValue(""[2.5 ]"");fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""Can not coerce a floating-point"");}}"
"com.fasterxml.jackson.databind.convert.NumericConversionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.ScalarConversionTest.testConvertValueNullPrimitive",0,"public void testConvertValueNullPrimitive()throws Exception {assertEquals(Byte.valueOf((byte)0),MAPPER.convertValue(null,Byte.TYPE));assertEquals(Short.valueOf((short)0),MAPPER.convertValue(null,Short.TYPE));assertEquals(Integer.valueOf(0),MAPPER.convertValue(null,Integer.TYPE));assertEquals(Long.valueOf(0L),MAPPER.convertValue(null,Long.TYPE));assertEquals(Float.valueOf(0f),MAPPER.convertValue(null,Float.TYPE));assertEquals(Double.valueOf(0d),MAPPER.convertValue(null,Double.TYPE));assertEquals(Character.valueOf('\0'),MAPPER.convertValue(null,Character.TYPE));assertEquals(Boolean.FALSE,MAPPER.convertValue(null,Boolean.TYPE));}"
"com.fasterxml.jackson.databind.convert.ScalarConversionTest.testConvertValueNullBoxed",0,"public void testConvertValueNullBoxed()throws Exception {assertNull(MAPPER.convertValue(null,Byte.class));assertNull(MAPPER.convertValue(null,Short.class));assertNull(MAPPER.convertValue(null,Integer.class));assertNull(MAPPER.convertValue(null,Long.class));assertNull(MAPPER.convertValue(null,Float.class));assertNull(MAPPER.convertValue(null,Double.class));assertNull(MAPPER.convertValue(null,Character.class));assertNull(MAPPER.convertValue(null,Boolean.class));}"
"com.fasterxml.jackson.databind.convert.ScalarConversionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.BeanUtilTest.testNameMangle",0,"public void testNameMangle(){assertEquals(""foo"",BeanUtil.legacyManglePropertyName(""getFoo"",3));assertEquals(""foo"",BeanUtil.stdManglePropertyName(""getFoo"",3));assertEquals(""url"",BeanUtil.legacyManglePropertyName(""getURL"",3));assertEquals(""URL"",BeanUtil.stdManglePropertyName(""getURL"",3));}"
"com.fasterxml.jackson.databind.util.BeanUtilTest.testGetDefaultValue",0,"public void testGetDefaultValue(){TypeFactory tf=TypeFactory.defaultInstance();assertEquals(JsonInclude.Include.NON_EMPTY,BeanUtil.getDefaultValue(tf.constructType(Map.class)));assertEquals(JsonInclude.Include.NON_EMPTY,BeanUtil.getDefaultValue(tf.constructType(List.class)));assertEquals(JsonInclude.Include.NON_EMPTY,BeanUtil.getDefaultValue(tf.constructType(Object[].class)));assertEquals(JsonInclude.Include.NON_EMPTY,BeanUtil.getDefaultValue(tf.constructType(AtomicReference.class)));assertEquals("""",BeanUtil.getDefaultValue(tf.constructType(String.class)));assertEquals(Integer.valueOf(0),BeanUtil.getDefaultValue(tf.constructType(Integer.class)));assertNull(BeanUtil.getDefaultValue(tf.constructType(getClass())));}"
"com.fasterxml.jackson.databind.util.BeanUtilTest.testIsGetter",0,"public void testIsGetter()throws Exception {_testIsGetter(""isPrimitive"",""primitive"");_testIsGetter(""isWrapper"",""wrapper"");_testIsGetter(""isNotGetter"",null);_testIsGetter(""is"",null);}"
"com.fasterxml.jackson.databind.util.BeanUtilTest.testOkNameForGetter",0,"public void testOkNameForGetter()throws Exception {_testOkNameForGetter(""getCallbacks"",""callbacks"");_testOkNameForGetter(""getMetaClass"",""metaClass"");_testOkNameForGetter(""get"",null);}"
"com.fasterxml.jackson.databind.util.BeanUtilTest.testOkNameForSetter",0,"public void testOkNameForSetter()throws Exception {_testOkNameForSetter(""setFoo"",""foo"");_testOkNameForSetter(""notSetter"",null);_testOkNameForSetter(""set"",null);}"
"com.fasterxml.jackson.databind.util.BeanUtilTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testSimpleSerialization",0,"public void testSimpleSerialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(ValueBean.class);assertEquals(""{\""bean\"":{\""value\"":11},\""extType\"":\""vbean\""}"",mapper.writeValueAsString(new ExternalBean(11)));}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testImproperExternalIdSerialization",0,"public void testImproperExternalIdSerialization()throws Exception {ObjectMapper mapper=new ObjectMapper();assertEquals(""{\""extType\"":\""funk\"",\""i\"":3}"",mapper.writeValueAsString(new FunkyExternalBean()));}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testExternalTypeIdWithNull",0,"public void testExternalTypeIdWithNull()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(ValueBean.class);ExternalBean b;b=mapper.readValue(aposToQuotes(""{'bean':null,'extType':'vbean'}""),ExternalBean.class);assertNotNull(b);b=mapper.readValue(aposToQuotes(""{'extType':'vbean','bean':null}""),ExternalBean.class);assertNotNull(b);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testSimpleDeserialization",0,"public void testSimpleDeserialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(ValueBean.class);ExternalBean result=mapper.readValue(""{\""bean\"":{\""value\"":11},\""extType\"":\""vbean\""}"",ExternalBean.class);assertNotNull(result);assertNotNull(result.bean);ValueBean vb=(ValueBean)result.bean;assertEquals(11,vb.value);result=mapper.readValue(""{\""extType\"":\""vbean\"",\""bean\"":{\""value\"":13}}"",ExternalBean.class);assertNotNull(result);assertNotNull(result.bean);vb=(ValueBean)result.bean;assertEquals(13,vb.value);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testMultipleTypeIdsDeserialization",0,"public void testMultipleTypeIdsDeserialization()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(ValueBean.class);String json=mapper.writeValueAsString(new ExternalBean3(3));ExternalBean3 result=mapper.readValue(json,ExternalBean3.class);assertNotNull(result);assertNotNull(result.value1);assertNotNull(result.value2);assertNotNull(result.value3);assertEquals(3,((ValueBean)result.value1).value);assertEquals(4,((ValueBean)result.value2).value);assertEquals(5,((ValueBean)result.value3).value);assertEquals(3,result.foo);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testExternalTypeWithCreator",0,"public void testExternalTypeWithCreator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerSubtypes(ValueBean.class);String json=mapper.writeValueAsString(new ExternalBeanWithCreator(7));ExternalBeanWithCreator result=mapper.readValue(json,ExternalBeanWithCreator.class);assertNotNull(result);assertNotNull(result.value);assertEquals(7,((ValueBean)result.value).value);assertEquals(7,result.foo);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testImproperExternalIdDeserialization",0,"public void testImproperExternalIdDeserialization()throws Exception {FunkyExternalBean result=MAPPER.readValue(""{\""extType\"":\""funk\"",\""i\"":3}"",FunkyExternalBean.class);assertNotNull(result);assertEquals(3,result.i);result=MAPPER.readValue(""{\""i\"":4,\""extType\"":\""funk\""}"",FunkyExternalBean.class);assertNotNull(result);assertEquals(4,result.i);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testIssue798",0,"public void testIssue798()throws Exception {Base base=new Derived1(""derived1 prop val"",""base prop val"");BaseContainer baseContainer=new BaseContainer(""bc prop val"",base);String generatedJson=MAPPER.writeValueAsString(baseContainer);BaseContainer baseContainer2=MAPPER.readValue(generatedJson,BaseContainer.class);assertEquals(""bc prop val"",baseContainer.getBaseContainerProperty());Base b=baseContainer2.getBase();assertNotNull(b);if (b.getClass()!= Derived1.class){fail(""Should have type Derived1,was "" + b.getClass().getName());}Derived1 derived1=(Derived1)b;assertEquals(""base prop val"",derived1.getBaseProperty());assertEquals(""derived1 prop val"",derived1.getDerived1Property());}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testIssue831",0,"public void testIssue831()throws Exception {final String JSON=""{\""petType\"": \""dog\"",\n"" + ""\""pet\"":{\""name\"": \""Pluto\"" }\n}"";House831 result=MAPPER.readValue(JSON,House831.class);assertNotNull(result);assertNotNull(result.pet);assertSame(Dog.class,result.pet.getClass());assertEquals(""dog"",result.petType);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testWithScalar118",0,"public void testWithScalar118()throws Exception {ExternalTypeWithNonPOJO input=new ExternalTypeWithNonPOJO(new java.util.Date(123L));String json=MAPPER.writeValueAsString(input);assertNotNull(json);ExternalTypeWithNonPOJO result=MAPPER.readValue(json,ExternalTypeWithNonPOJO.class);assertNotNull(result.value);assertTrue(result.value instanceof java.util.Date);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testWithNaturalScalar118",0,"public void testWithNaturalScalar118()throws Exception {ExternalTypeWithNonPOJO input=new ExternalTypeWithNonPOJO(Integer.valueOf(13));String json=MAPPER.writeValueAsString(input);assertNotNull(json);ExternalTypeWithNonPOJO result=MAPPER.readValue(json,ExternalTypeWithNonPOJO.class);assertNotNull(result.value);assertTrue(result.value instanceof Integer);input=new ExternalTypeWithNonPOJO(Boolean.TRUE);json=MAPPER.writeValueAsString(input);assertNotNull(json);result=MAPPER.readValue(json,ExternalTypeWithNonPOJO.class);assertNotNull(result.value);assertTrue(result.value instanceof Boolean);input=new ExternalTypeWithNonPOJO(""foobar"");json=MAPPER.writeValueAsString(input);assertNotNull(json);result=MAPPER.readValue(json,ExternalTypeWithNonPOJO.class);assertNotNull(result.value);assertTrue(result.value instanceof String);assertEquals(""foobar"",result.value);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testWithAsValue",0,"public void testWithAsValue()throws Exception {ExternalTypeWithNonPOJO input=new ExternalTypeWithNonPOJO(new AsValueThingy(12345L));String json=MAPPER.writeValueAsString(input);assertNotNull(json);assertEquals(""{\""value\"":12345,\""type\"":\""thingy\""}"",json);ExternalTypeWithNonPOJO result=MAPPER.readValue(json,ExternalTypeWithNonPOJO.class);assertNotNull(result);assertNotNull(result.value);assertEquals(AsValueThingy.class,result.value.getClass());assertEquals(12345L,((AsValueThingy)result.value).rawDate);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testExternalTypeWithProp222",0,"public void testExternalTypeWithProp222()throws Exception {final ObjectMapper mapper=new ObjectMapper();Issue222Bean input=new Issue222Bean(13);String json=mapper.writeValueAsString(input);assertEquals(""{\""value\"":{\""x\"":13},\""type\"":\""foo\""}"",json);}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testInverseExternalId928",0,"public void testInverseExternalId928()throws Exception {final String CLASS=Payload928.class.getName();ObjectMapper mapper=new ObjectMapper();final String successCase=""{\""payload\"":{\""something\"":\""test\""},\""class\"":\"""" + CLASS + ""\""}"";Envelope928 envelope1=mapper.readValue(successCase,Envelope928.class);assertNotNull(envelope1);assertEquals(Payload928.class,envelope1._payload.getClass());final String failCase=""{\""class\"":\"""" + CLASS + ""\"",\""payload\"":{\""something\"":\""test\""}}"";Envelope928 envelope2=mapper.readValue(failCase,Envelope928.class);assertNotNull(envelope2);assertEquals(Payload928.class,envelope2._payload.getClass());}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.testBigDecimal965",0,"public void testBigDecimal965()throws Exception {Wrapper965 w=new Wrapper965();w.typeEnum=Type965.BIG_DECIMAL;final String NUM_STR=""-10000000000.0000000001"";w.value=new BigDecimal(NUM_STR);String json=MAPPER.writeValueAsString(w);if (!json.contains(NUM_STR)){fail(""JSON content should contain value '"" + NUM_STR + ""',does not appear to: ""+ json);}Wrapper965 w2=MAPPER.readerFor(Wrapper965.class).with(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS).readValue(json);assertEquals(w.typeEnum,w2.typeEnum);assertTrue(String.format(""Expected %s = %s;got back %s = %s"",w.value.getClass().getSimpleName(),w.value.toString(),w2.value.getClass().getSimpleName(),w2.value.toString()),w.value.equals(w2.value));}"
"com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestConversions.testAsInt",0,"public void testAsInt()throws Exception {assertEquals(9,IntNode.valueOf(9).asInt());assertEquals(7,LongNode.valueOf(7L).asInt());assertEquals(13,new TextNode(""13"").asInt());assertEquals(0,new TextNode(""foobar"").asInt());assertEquals(27,new TextNode(""foobar"").asInt(27));assertEquals(1,BooleanNode.TRUE.asInt());}"
"com.fasterxml.jackson.databind.node.TestConversions.testAsBoolean",0,"public void testAsBoolean()throws Exception {assertEquals(false,BooleanNode.FALSE.asBoolean());assertEquals(true,BooleanNode.TRUE.asBoolean());assertEquals(false,IntNode.valueOf(0).asBoolean());assertEquals(true,IntNode.valueOf(1).asBoolean());assertEquals(false,LongNode.valueOf(0).asBoolean());assertEquals(true,LongNode.valueOf(-34L).asBoolean());assertEquals(true,new TextNode(""true"").asBoolean());assertEquals(false,new TextNode(""false"").asBoolean());assertEquals(false,new TextNode(""barf"").asBoolean());assertEquals(true,new TextNode(""barf"").asBoolean(true));assertEquals(true,new POJONode(Boolean.TRUE).asBoolean());}"
"com.fasterxml.jackson.databind.node.TestConversions.testTreeToValue",0,"public void testTreeToValue()throws Exception {String JSON=""{\""leaf\"":{\""value\"":13}}"";ObjectMapper mapper=new ObjectMapper();mapper.addMixIn(Leaf.class,LeafMixIn.class);JsonNode root=mapper.readTree(JSON);Root r1=mapper.treeToValue(root,Root.class);assertNotNull(r1);assertEquals(13,r1.leaf.value);}"
"com.fasterxml.jackson.databind.node.TestConversions.testTreeToValueWithPOJO",0,"public void testTreeToValueWithPOJO()throws Exception {Calendar c=Calendar.getInstance();c.setTime(new java.util.Date(0));ValueNode pojoNode=MAPPER.getNodeFactory().pojoNode(c);Calendar result=MAPPER.treeToValue(pojoNode,Calendar.class);assertNotNull(result);assertEquals(result.getTimeInMillis(),c.getTimeInMillis());}"
"com.fasterxml.jackson.databind.node.TestConversions.testBase64Text",0,"public void testBase64Text()throws Exception {final int[]LENS={1,2,3,4,7,9,32,33,34,35};final Base64Variant[]VARIANTS={Base64Variants.MIME,Base64Variants.MIME_NO_LINEFEEDS,Base64Variants.MODIFIED_FOR_URL,Base64Variants.PEM};for(int len : LENS){byte[]input=new byte[len];for (int i=0;i < input.length;++i){input[i]=(byte)i;}for(Base64Variant variant : VARIANTS){TextNode n=new TextNode(variant.encode(input));byte[]data=null;try {data=n.getBinaryValue(variant);}catch(Exception e){throw new IOException(""Failed (variant "" + variant + "",data length ""+ len+ ""): ""+ e.getMessage());}assertNotNull(data);assertArrayEquals(data,input);}}}"
"com.fasterxml.jackson.databind.node.TestConversions.testIssue709",0,"/** * Simple test to verify that byte[]values can be handled properly when converting,as long as there is metadata (from POJO definitions).*/public void testIssue709()throws Exception {byte[]inputData=new byte[]{1,2,3};ObjectNode node=MAPPER.createObjectNode();node.put(""data"",inputData);Issue709Bean result=MAPPER.treeToValue(node,Issue709Bean.class);String json=MAPPER.writeValueAsString(node);Issue709Bean resultFromString=MAPPER.readValue(json,Issue709Bean.class);Issue709Bean resultFromConvert=MAPPER.convertValue(node,Issue709Bean.class);Assert.assertArrayEquals(inputData,resultFromString.data);Assert.assertArrayEquals(inputData,resultFromConvert.data);Assert.assertArrayEquals(inputData,result.data);}"
"com.fasterxml.jackson.databind.node.TestConversions.testEmbeddedByteArray",0,"public void testEmbeddedByteArray()throws Exception {TokenBuffer buf=new TokenBuffer(MAPPER,false);buf.writeObject(new byte[3]);JsonNode node=MAPPER.readTree(buf.asParser());buf.close();assertTrue(node.isBinary());byte[]data=node.binaryValue();assertNotNull(data);assertEquals(3,data.length);}"
"com.fasterxml.jackson.databind.node.TestConversions.testBigDecimalAsPlainStringTreeConversion",0,"public void testBigDecimalAsPlainStringTreeConversion()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);Map<String,Object> map=new HashMap<String,Object>();String PI_STR=""3.00000000"";map.put(""pi"",new BigDecimal(PI_STR));JsonNode tree=mapper.valueToTree(map);assertNotNull(tree);assertEquals(1,tree.size());assertTrue(tree.has(""pi""));}"
"com.fasterxml.jackson.databind.node.TestConversions.testBeanToTree",0,"public void testBeanToTree()throws Exception {final CustomSerializedPojo pojo=new CustomSerializedPojo();pojo.setFoo(""bar"");final JsonNode node=MAPPER.valueToTree(pojo);assertEquals(JsonNodeType.OBJECT,node.getNodeType());}"
"com.fasterxml.jackson.databind.node.TestConversions.testConversionOfPojos",0,"public void testConversionOfPojos()throws Exception {final Issue467Bean input=new Issue467Bean(13);final String EXP=""{\""x\"":13}"";String json=MAPPER.writeValueAsString(input);assertEquals(EXP,json);JsonNode tree=MAPPER.valueToTree(input);assertTrue(""Expected Object,got "" + tree.getNodeType(),tree.isObject());assertEquals(EXP,MAPPER.writeValueAsString(tree));}"
"com.fasterxml.jackson.databind.node.TestConversions.testConversionOfTrees",0,"public void testConversionOfTrees()throws Exception {final Issue467Tree input=new Issue467Tree();final String EXP=""true"";String json=MAPPER.writeValueAsString(input);assertEquals(EXP,json);JsonNode tree=MAPPER.valueToTree(input);assertTrue(""Expected Object,got "" + tree.getNodeType(),tree.isBoolean());assertEquals(EXP,MAPPER.writeValueAsString(tree));}"
"com.fasterxml.jackson.databind.node.TestConversions.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest.testObjectIdWithCreator",0,"public void testObjectIdWithCreator()throws Exception {A a=new A(""123"",""A"");ObjectMapper om=new ObjectMapper();String json=om.writeValueAsString(a);A deser=om.readValue(json,A.class);assertEquals(a.name,deser.name);}"
"com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.ObjectId687Test.testSerializeDeserializeWithCreator",0,"public void testSerializeDeserializeWithCreator()throws IOException {ReferredWithCreator base=new ReferredWithCreator(""label1"");ReferringToObjWithCreator r=new ReferringToObjWithCreator();r.addRef(base);EnclosingForRefsWithCreator e=new EnclosingForRefsWithCreator();e.baseRef=base;e.nextRef=r;String json=MAPPER.writeValueAsString(e);EnclosingForRefsWithCreator result=MAPPER.readValue(json,EnclosingForRefsWithCreator.class);assertNotNull(result);assertEquals(result.label,e.label);assertEquals(json,MAPPER.writeValueAsString(result));}"
"com.fasterxml.jackson.databind.objectid.ObjectId687Test.testSerializeDeserializeNoCreator",0,"public void testSerializeDeserializeNoCreator()throws IOException {ReferredWithNoCreator base=new ReferredWithNoCreator();ReferringToObjWithNoCreator r=new ReferringToObjWithNoCreator();r.addRef(base);EnclosingForRefWithNoCreator e=new EnclosingForRefWithNoCreator();e.baseRef=base;e.nextRef=r;String json=MAPPER.writeValueAsString(e);EnclosingForRefWithNoCreator result=MAPPER.readValue(json,EnclosingForRefWithNoCreator.class);assertNotNull(result);assertEquals(result.label,e.label);assertEquals(json,MAPPER.writeValueAsString(result));}"
"com.fasterxml.jackson.databind.objectid.ObjectId687Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TransientTest.testTransientFieldHandling",0,"public void testTransientFieldHandling()throws Exception {assertEquals(aposToQuotes(""{'x':42,'value':3}""),MAPPER.writeValueAsString(new ClassyTransient()));assertEquals(aposToQuotes(""{'a':1}""),MAPPER.writeValueAsString(new SimplePrunableTransient()));ObjectMapper m=new ObjectMapper().enable(MapperFeature.PROPAGATE_TRANSIENT_MARKER);assertEquals(aposToQuotes(""{'x':42}""),m.writeValueAsString(new ClassyTransient()));}"
"com.fasterxml.jackson.databind.introspect.TransientTest.testBeanTransient",0,"public void testBeanTransient()throws Exception {assertEquals(aposToQuotes(""{'y':4}""),MAPPER.writeValueAsString(new BeanTransient()));}"
"com.fasterxml.jackson.databind.introspect.TransientTest.testOverridingTransient",0,"public void testOverridingTransient()throws Exception {assertEquals(aposToQuotes(""{'tValue':38}""),MAPPER.writeValueAsString(new OverridableTransient(38)));}"
"com.fasterxml.jackson.databind.introspect.TransientTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.format.MapFormatShapeTest.testSerializeAsPOJOViaClass",0,"public void testSerializeAsPOJOViaClass()throws Exception {String result=MAPPER.writeValueAsString(new Bean476Container(1,2,0));assertEquals(aposToQuotes(""{'a':{'extra':13,'empty':false},'b':{'value':2}}""),result);}"
"com.fasterxml.jackson.databind.format.MapFormatShapeTest.testRoundTrip",0,"public void testRoundTrip()throws Exception {Map1540Implementation input=new Map1540Implementation();input.property=55;input.put(12,45);input.put(6,88);String json=MAPPER.writeValueAsString(input);assertEquals(aposToQuotes(""{'property':55,'map':{'6':88,'12':45}}""),json);Map1540Implementation result=MAPPER.readValue(json,Map1540Implementation.class);assertEquals(result.property,input.property);assertEquals(input.getMap(),input.getMap());}"
"com.fasterxml.jackson.databind.format.MapFormatShapeTest.testDeserializeAsPOJOViaClass",0,"public void testDeserializeAsPOJOViaClass()throws Exception {Map476AsPOJO result=MAPPER.readValue(aposToQuotes(""{'extra':42}""),Map476AsPOJO.class);assertEquals(0,result.size());assertEquals(42,result.extra);}"
"com.fasterxml.jackson.databind.format.MapFormatShapeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.PolymorphicList1451SerTest.testCollectionWithTypeInfo",0,"public void testCollectionWithTypeInfo()throws Exception {ObjectMapper mapper=new ObjectMapper().disable(SerializationFeature.EAGER_SERIALIZER_FETCH);List<A> input=new ArrayList<A>();A a=new A();a.a=""a1"";input.add(a);B b=new B();b.b=""b"";b.a=""a2"";input.add(b);final TypeReference<?> typeRef=new TypeReference<Collection<A>>(){};ObjectWriter writer=mapper.writerFor(typeRef);String result=writer.writeValueAsString(input);assertEquals(aposToQuotes(""[{'@class':'."" + CLASS_NAME + ""$A','a':'a1'},{'@class':'.""+ CLASS_NAME+ ""$B','a':'a2','b':'b'}]""),result);List<A> output=mapper.readerFor(typeRef).readValue(result);assertEquals(2,output.size());assertEquals(A.class,output.get(0).getClass());assertEquals(B.class,output.get(1).getClass());}"
"com.fasterxml.jackson.databind.jsontype.PolymorphicList1451SerTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testSimpleGetter",0,"public void testSimpleGetter()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new SizeClassGetter());assertEquals(3,result.size());assertEquals(Integer.valueOf(3),result.get(""size""));assertEquals(Integer.valueOf(-17),result.get(""length""));assertEquals(Integer.valueOf(0),result.get(""value""));}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testSimpleGetter2",0,"public void testSimpleGetter2()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new SizeClassGetter2());assertEquals(1,result.size());assertEquals(Integer.valueOf(3),result.get(""x""));}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testSimpleGetter3",0,"public void testSimpleGetter3()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new SizeClassGetter3());assertEquals(1,result.size());assertEquals(Integer.valueOf(8),result.get(""y""));}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testGetterInheritance",0,"/** * Let's also verify that inherited super-class getters are used as expected*/public void testGetterInheritance()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new SubClassBean());assertEquals(3,result.size());assertEquals(Integer.valueOf(1),result.get(""x""));assertEquals(Integer.valueOf(2),result.get(""y""));assertEquals(Integer.valueOf(3),result.get(""z""));}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testClassSerializer",0,"/** * Unit test to verify that  {@link JsonSerialize#using}annotation workswhen applied to a class*/public void testClassSerializer()throws Exception {StringWriter sw=new StringWriter();MAPPER.writeValue(sw,new ClassSerializer());assertEquals(""true"",sw.toString());}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testActiveMethodSerializer",0,"/** * Unit test to verify that @JsonSerializer annotation works when applied to a Method*/public void testActiveMethodSerializer()throws Exception {StringWriter sw=new StringWriter();MAPPER.writeValue(sw,new ClassMethodSerializer(13));assertEquals(""{\""x\"":\""X13X\""}"",sw.toString());}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testInactiveMethodSerializer",0,"public void testInactiveMethodSerializer()throws Exception {String json=MAPPER.writeValueAsString(new InactiveClassMethodSerializer(8));assertEquals(""{\""x\"":8}"",json);}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testGettersWithoutSetters",0,"public void testGettersWithoutSetters()throws Exception {ObjectMapper m=new ObjectMapper();GettersWithoutSetters bean=new GettersWithoutSetters(123);assertFalse(m.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS));assertEquals(""{\""a\"":3,\""b\"":4,\""c\"":5,\""d\"":6}"",m.writeValueAsString(bean));m=new ObjectMapper();m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS);assertEquals(""{\""a\"":3,\""c\"":5,\""d\"":6}"",m.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.testGettersWithoutSettersOverride",0,"public void testGettersWithoutSettersOverride()throws Exception {GettersWithoutSetters2 bean=new GettersWithoutSetters2();ObjectMapper m=new ObjectMapper();m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS);assertEquals(""{\""a\"":123}"",m.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.TestAnnotations.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.RecursiveTypeTest.testRecursiveType",0,"public void testRecursiveType(){TypeFactory tf=TypeFactory.defaultInstance();JavaType type=tf.constructType(HashTree.class);assertNotNull(type);}"
"com.fasterxml.jackson.databind.type.RecursiveTypeTest.testRecursivePair",0,"public void testRecursivePair()throws Exception {JavaType t=MAPPER.constructType(ImmutablePair.class);assertNotNull(t);assertEquals(ImmutablePair.class,t.getRawClass());List<ImmutablePair<String,Double>> list=new ArrayList<ImmutablePair<String,Double>>();list.add(ImmutablePair.of(""Hello World!"",123d));String json=MAPPER.writeValueAsString(list);assertNotNull(json);}"
"com.fasterxml.jackson.databind.type.RecursiveTypeTest.testJavaTypeToString",0,"public void testJavaTypeToString()throws Exception {TypeFactory tf=objectMapper().getTypeFactory();String desc=tf.constructType(DataDefinition.class).toString();assertNotNull(desc);if (!desc.contains(""map type"")){fail(""Description should contain 'map type',did not: "" + desc);}if (!desc.contains(""recursive type"")){fail(""Description should contain 'recursive type',did not: "" + desc);}}"
"com.fasterxml.jackson.databind.type.RecursiveTypeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.PropertyAliasTest.testSimpleAliases",0,"public void testSimpleAliases()throws Exception {AliasBean bean;bean=MAPPER.readValue(aposToQuotes(""{'Name':'Foobar','a':3,'xyz':37}""),AliasBean.class);assertEquals(""Foobar"",bean.name);assertEquals(3,bean._a);assertEquals(37,bean._xyz);bean=MAPPER.readValue(aposToQuotes(""{'name':'Foobar','a':3,'Xyz':37}""),AliasBean.class);assertEquals(""Foobar"",bean.name);assertEquals(3,bean._a);assertEquals(37,bean._xyz);bean=MAPPER.readValue(aposToQuotes(""{'name':'Foobar','A':3,'xyz':37}""),AliasBean.class);assertEquals(""Foobar"",bean.name);assertEquals(3,bean._a);assertEquals(37,bean._xyz);}"
"com.fasterxml.jackson.databind.deser.PropertyAliasTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.misc.TestJSONP.testSimpleScalars",0,"public void testSimpleScalars()throws Exception {assertEquals(""callback(\""abc\"")"",MAPPER.writeValueAsString(new JSONPObject(""callback"",""abc"")));assertEquals(""calc(123)"",MAPPER.writeValueAsString(new JSONPObject(""calc"",Integer.valueOf(123))));assertEquals(""dummy(null)"",MAPPER.writeValueAsString(new JSONPObject(""dummy"",null)));}"
"com.fasterxml.jackson.databind.misc.TestJSONP.testSimpleBean",0,"public void testSimpleBean()throws Exception {assertEquals(""xxx({\""a\"":\""123\"",\""b\"":\""456\""})"",MAPPER.writeValueAsString(new JSONPObject(""xxx"",new Impl(""123"",""456""))));}"
"com.fasterxml.jackson.databind.misc.TestJSONP.testWithType",0,"/** * Test to ensure that it is possible to force a static type for wrapped value.*/public void testWithType()throws Exception {Object ob=new Impl(""abc"",""def"");JavaType type=MAPPER.constructType(Base.class);assertEquals(""do({\""a\"":\""abc\""})"",MAPPER.writeValueAsString(new JSONPObject(""do"",ob,type)));}"
"com.fasterxml.jackson.databind.misc.TestJSONP.testGeneralWrapping",0,"public void testGeneralWrapping()throws Exception {JSONWrappedObject input=new JSONWrappedObject(""/*Foo*/"",""\n// the end"",Arrays.asList());assertEquals(""/*Foo*/[]\n// the end"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.misc.TestJSONP.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.seq.PolyMapWriter827Test.testPolyCustomKeySerializer",0,"public void testPolyCustomKeySerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);mapper.registerModule(new SimpleModule(""keySerializerModule"").addKeySerializer(CustomKey.class,new CustomKeySerializer()));Map<CustomKey,String> map=new HashMap<CustomKey,String>();CustomKey key=new CustomKey();key.a=""foo"";key.b=1;map.put(key,""bar"");final ObjectWriter writer=mapper.writerFor(new TypeReference<Map<CustomKey,String>>(){});String json=writer.writeValueAsString(map);Assert.assertEquals(""[\""java.util.HashMap\"",{\""foo,1\"":\""bar\""}]"",json);}"
"com.fasterxml.jackson.databind.seq.PolyMapWriter827Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.TestObjectBuffer.testUntyped",0,"/** * First a test that treats results as plain old Object[]*/public void testUntyped(){_testObjectBuffer(null);}"
"com.fasterxml.jackson.databind.util.TestObjectBuffer.testTyped",0,"public void testTyped(){_testObjectBuffer(Integer.class);}"
"com.fasterxml.jackson.databind.util.TestObjectBuffer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.Generic1128Test.testIssue1128",0,"public void testIssue1128()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);final DevMContainer devMContainer1=new DevMContainer();final DevM entity=new DevM();final Dev parent=new Dev();parent.id=2L;entity.parent=parent;devMContainer1.entity=entity;String json=mapper.writeValueAsString(devMContainer1);final DevMContainer devMContainer=mapper.readValue(json,DevMContainer.class);long id=devMContainer.entity.parent.id;assertEquals(2,id);}"
"com.fasterxml.jackson.databind.jsontype.Generic1128Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestEndOfInputHandling.testErrorHandling",0,"public void testErrorHandling()throws IOException {ObjectMapper mapper=new ObjectMapper();String json=""{\""A\"":{\""B\"":\n"";JsonParser parser=mapper.getFactory().createParser(json);parser.setCodec(new ObjectMapper());try {parser.readValueAsTree();}catch(JsonParseException e){verifyException(e,""Unexpected end-of-input"");}parser.close();try {mapper.readTree(json);}catch(JsonParseException e){verifyException(e,""Unexpected end-of-input"");}}"
"com.fasterxml.jackson.databind.node.TestEndOfInputHandling.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestForwardReference.testForwardRef",0,"/** * Tests that we can read a hierarchical structure with forward references*/public void testForwardRef()throws IOException {MAPPER.readValue(""{"" + ""  \""@type\"" : \""TestForwardReference$ForwardReferenceContainerClass\"","" + ""  \""frc\"" : \""willBeForwardReferenced\"",""+ ""  \""yac\"" : {""+ ""    \""@type\"" : \""TestForwardReference$YetAnotherClass\"",""+ ""    \""frc\"" : {""+ ""      \""@type\"" : \""One\"",""+ ""      \""id\"" : \""willBeForwardReferenced\""""+ ""    },""+ ""    \""id\"" : \""anId\""""+ ""  },""+ ""  \""id\"" : \""ForwardReferenceContainerClass1\""""+ ""}"",ForwardReferenceContainerClass.class);}"
"com.fasterxml.jackson.databind.struct.TestForwardReference.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.ArrayBuildersTest.testInsertInListNoDup",0,"public void testInsertInListNoDup(){String[]arr=new String[]{""me"",""you"",""him""};String[]newarr;newarr=ArrayBuilders.insertInListNoDup(arr,""you"");Assert.assertArrayEquals(new String[]{""you"",""me"",""him""},newarr);newarr=ArrayBuilders.insertInListNoDup(arr,""me"");Assert.assertArrayEquals(new String[]{""me"",""you"",""him""},newarr);newarr=ArrayBuilders.insertInListNoDup(arr,""him"");Assert.assertArrayEquals(new String[]{""him"",""me"",""you""},newarr);newarr=ArrayBuilders.insertInListNoDup(arr,""foobar"");Assert.assertArrayEquals(new String[]{""foobar"",""me"",""you"",""him""},newarr);}"
"com.fasterxml.jackson.databind.util.ArrayBuildersTest.testBuilderAccess",0,"public void testBuilderAccess(){ArrayBuilders builders=new ArrayBuilders();BooleanBuilder bb=builders.getBooleanBuilder();assertNotNull(bb);assertSame(bb,builders.getBooleanBuilder());ByteBuilder b2=builders.getByteBuilder();assertNotNull(b2);assertSame(b2,builders.getByteBuilder());ShortBuilder sb=builders.getShortBuilder();assertNotNull(sb);assertSame(sb,builders.getShortBuilder());IntBuilder ib=builders.getIntBuilder();assertNotNull(ib);assertSame(ib,builders.getIntBuilder());LongBuilder lb=builders.getLongBuilder();assertNotNull(lb);assertSame(lb,builders.getLongBuilder());FloatBuilder fb=builders.getFloatBuilder();assertNotNull(fb);assertSame(fb,builders.getFloatBuilder());DoubleBuilder db=builders.getDoubleBuilder();assertNotNull(db);assertSame(db,builders.getDoubleBuilder());}"
"com.fasterxml.jackson.databind.util.ArrayBuildersTest.testArrayComparator",0,"public void testArrayComparator(){final int[]INT3=new int[]{3,4,5};Object comp=ArrayBuilders.getArrayComparator(INT3);assertFalse(comp.equals(null));assertTrue(comp.equals(INT3));assertTrue(comp.equals(new int[]{3,4,5}));assertFalse(comp.equals(new int[]{5}));assertFalse(comp.equals(new int[]{3,4}));assertFalse(comp.equals(new int[]{3,5,4}));assertFalse(comp.equals(new int[]{3,4,5,6}));}"
"com.fasterxml.jackson.databind.util.ArrayBuildersTest.testArraySet",0,"public void testArraySet(){HashSet<String> set=ArrayBuilders.arrayToSet(new String[]{""foo"",""bar""});assertEquals(2,set.size());assertEquals(new HashSet<String>(Arrays.asList(""bar"",""foo"")),set);}"
"com.fasterxml.jackson.databind.util.ArrayBuildersTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.RawValueTest.testSimpleStringGetter",0,"public void testSimpleStringGetter()throws Exception {String value=""abc"";String result=MAPPER.writeValueAsString(new ClassGetter<String>(value));String expected=String.format(""{\""nonRaw\"":\""%s\"",\""raw\"":%s,\""value\"":%s}"",value,value,value);assertEquals(expected,result);}"
"com.fasterxml.jackson.databind.ser.RawValueTest.testSimpleNonStringGetter",0,"public void testSimpleNonStringGetter()throws Exception {int value=123;String result=MAPPER.writeValueAsString(new ClassGetter<Integer>(value));String expected=String.format(""{\""nonRaw\"":%d,\""raw\"":%d,\""value\"":%d}"",value,value,value);assertEquals(expected,result);}"
"com.fasterxml.jackson.databind.ser.RawValueTest.testNullStringGetter",0,"public void testNullStringGetter()throws Exception {String result=MAPPER.writeValueAsString(new ClassGetter<String>(null));String expected=""{\""nonRaw\"":null,\""raw\"":null,\""value\"":null}"";assertEquals(expected,result);}"
"com.fasterxml.jackson.databind.ser.RawValueTest.testWithValueToTree",0,"public void testWithValueToTree()throws Exception {JsonNode w=MAPPER.valueToTree(new RawWrapped(""{}""));assertNotNull(w);assertEquals(""{\""json\"":{}}"",MAPPER.writeValueAsString(w));}"
"com.fasterxml.jackson.databind.ser.RawValueTest.testRawFromMapToTree",0,"public void testRawFromMapToTree()throws Exception {RawValue myType=new RawValue(""Jackson"");Map<String,Object> object=new HashMap<String,Object>();object.put(""key"",myType);JsonNode jsonNode=MAPPER.valueToTree(object);String json=MAPPER.writeValueAsString(jsonNode);assertEquals(""{\""key\"":Jackson}"",json);}"
"com.fasterxml.jackson.databind.deser.merge.CollectionMergeTest.testCollectionMerging",0,"public void testCollectionMerging()throws Exception {CollectionWrapper w=MAPPER.readValue(aposToQuotes(""{'bag':['b']}""),CollectionWrapper.class);assertEquals(2,w.bag.size());assertTrue(w.bag.contains(""a""));assertTrue(w.bag.contains(""b""));}"
"com.fasterxml.jackson.databind.deser.merge.CollectionMergeTest.testListMerging",0,"public void testListMerging()throws Exception {MergedList w=MAPPER.readValue(aposToQuotes(""{'values':['x']}""),MergedList.class);assertEquals(2,w.values.size());assertTrue(w.values.contains(""a""));assertTrue(w.values.contains(""x""));}"
"com.fasterxml.jackson.databind.deser.merge.CollectionMergeTest.testGenericListMerging",0,"public void testGenericListMerging()throws Exception {Collection<String> l=new ArrayList<>();l.add(""foo"");MergedX<Collection<String>> input=new MergedX<Collection<String>>(l);MergedX<Collection<String>> result=MAPPER.readerFor(new TypeReference<MergedX<Collection<String>>>(){}).withValueToUpdate(input).readValue(aposToQuotes(""{'value':['bar']}""));assertSame(input,result);assertEquals(2,result.value.size());Iterator<String> it=result.value.iterator();assertEquals(""foo"",it.next());assertEquals(""bar"",it.next());}"
"com.fasterxml.jackson.databind.deser.merge.CollectionMergeTest.testEnumSetMerging",0,"public void testEnumSetMerging()throws Exception {MergedEnumSet result=MAPPER.readValue(aposToQuotes(""{'abc':['A']}""),MergedEnumSet.class);assertEquals(2,result.abc.size());assertTrue(result.abc.contains(ABC.B));assertTrue(result.abc.contains(ABC.A));}"
"com.fasterxml.jackson.databind.deser.merge.CollectionMergeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.views.DefaultViewTest.testDeserialization",0,"public void testDeserialization()throws IOException {final String JSON=aposToQuotes(""{'a':1,'b':2}"");Defaulting result=MAPPER.readerFor(Defaulting.class).readValue(JSON);assertEquals(result.a,1);assertEquals(result.b,2);result=MAPPER.readerFor(Defaulting.class).withView(ViewA.class).readValue(JSON);assertEquals(result.a,1);assertEquals(result.b,5);result=MAPPER.readerFor(Defaulting.class).withView(ViewBB.class).readValue(JSON);assertEquals(result.a,3);assertEquals(result.b,2);}"
"com.fasterxml.jackson.databind.views.DefaultViewTest.testSerialization",0,"public void testSerialization()throws IOException {assertEquals(aposToQuotes(""{'a':3,'b':5}""),MAPPER.writeValueAsString(new Defaulting()));assertEquals(aposToQuotes(""{'a':3}""),MAPPER.writerWithView(ViewA.class).writeValueAsString(new Defaulting()));assertEquals(aposToQuotes(""{'b':5}""),MAPPER.writerWithView(ViewB.class).writeValueAsString(new Defaulting()));}"
"com.fasterxml.jackson.databind.views.DefaultViewTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestFindMethods.testNonMatching",0,"public void testNonMatching()throws Exception {JsonNode root=_buildTree();assertNull(root.findValue(""boogaboo""));assertNull(root.findParent(""boogaboo""));JsonNode n=root.findPath(""boogaboo"");assertNotNull(n);assertTrue(n.isMissingNode());assertTrue(root.findValues(""boogaboo"").isEmpty());assertTrue(root.findParents(""boogaboo"").isEmpty());}"
"com.fasterxml.jackson.databind.node.TestFindMethods.testMatchingSingle",0,"public void testMatchingSingle()throws Exception {JsonNode root=_buildTree();JsonNode node=root.findValue(""b"");assertNotNull(node);assertEquals(3,node.intValue());node=root.findParent(""b"");assertNotNull(node);assertTrue(node.isObject());assertEquals(1,((ObjectNode)node).size());assertEquals(3,node.path(""b"").intValue());}"
"com.fasterxml.jackson.databind.node.TestFindMethods.testMatchingMultiple",0,"public void testMatchingMultiple()throws Exception {JsonNode root=_buildTree();List<JsonNode> nodes=root.findValues(""value"");assertEquals(2,nodes.size());assertEquals(3,nodes.get(0).intValue());assertEquals(42,nodes.get(1).intValue());nodes=root.findParents(""value"");assertEquals(2,nodes.size());assertTrue(nodes.get(0).isObject());assertTrue(nodes.get(1).isObject());assertEquals(3,nodes.get(0).path(""value"").intValue());assertEquals(42,nodes.get(1).path(""value"").intValue());List<String> values=root.findValuesAsText(""value"");assertEquals(2,values.size());assertEquals(""3"",values.get(0));assertEquals(""42"",values.get(1));}"
"com.fasterxml.jackson.databind.node.TestFindMethods.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreators541.testCreator541",0,"public void testCreator541()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);mapper.disable(MapperFeature.AUTO_DETECT_CREATORS,MapperFeature.AUTO_DETECT_FIELDS,MapperFeature.AUTO_DETECT_GETTERS,MapperFeature.AUTO_DETECT_IS_GETTERS,MapperFeature.AUTO_DETECT_SETTERS,MapperFeature.USE_GETTERS_AS_SETTERS);mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);final String JSON=""{\n"" + ""    \""foo\"": {\n"" + ""        \""0\"": {\n""+ ""            \""p\"": 0,\n""+ ""            \""stuff\"": [\n""+ ""              \""a\"",\""b\"" \n""+ ""]\n""+ ""        },\n""+ ""        \""1\"": {\n""+ ""            \""p\"": 1000,\n""+ ""            \""stuff\"": [\n""+ ""              \""c\"",\""d\"" \n""+ ""]\n""+ ""        },\n""+ ""        \""2\"": {\n""+ ""            \""p\"": 2000,\n""+ ""            \""stuff\"": [\n""+ ""]\n""+ ""        }\n""+ ""    },\n""+ ""    \""anumber\"": 25385874\n""+ ""}"";Foo obj=mapper.readValue(JSON,Foo.class);assertNotNull(obj);assertNotNull(obj.foo);assertEquals(3,obj.foo.size());assertEquals(25385874L,obj.getAnumber());}"
"com.fasterxml.jackson.databind.creators.TestCreators541.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.AnySetter349Test.testUnwrappedWithAny",0,"public void testUnwrappedWithAny()throws Exception {final ObjectMapper mapper=objectMapper();Bean349 value=mapper.readValue(UNWRAPPED_JSON_349,Bean349.class);assertNotNull(value);assertEquals(3,value.x);assertEquals(4,value.y);assertEquals(2,value.props.size());}"
"com.fasterxml.jackson.databind.deser.AnySetter349Test.testUnwrappedWithAnyAsUpdate",0,"public void testUnwrappedWithAnyAsUpdate()throws Exception {final ObjectMapper mapper=objectMapper();Bean349 bean=mapper.readerFor(Bean349.class).withValueToUpdate(new Bean349()).readValue(UNWRAPPED_JSON_349);assertEquals(3,bean.x);assertEquals(4,bean.y);assertEquals(2,bean.props.size());}"
"com.fasterxml.jackson.databind.deser.AnySetter349Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.SerializationFeaturesTest.testCloseCloseable",0,"@SuppressWarnings(""resource"")public void testCloseCloseable()throws IOException {ObjectMapper m=new ObjectMapper();CloseableBean bean=new CloseableBean();m.writeValueAsString(bean);assertFalse(bean.wasClosed);m.configure(SerializationFeature.CLOSE_CLOSEABLE,true);bean=new CloseableBean();m.writeValueAsString(bean);assertTrue(bean.wasClosed);bean=new CloseableBean();m.writerFor(CloseableBean.class).writeValueAsString(bean);assertTrue(bean.wasClosed);}"
"com.fasterxml.jackson.databind.ser.SerializationFeaturesTest.testCharArrays",0,"public void testCharArrays()throws IOException {char[]chars=new char[]{'a','b','c'};ObjectMapper m=new ObjectMapper();assertEquals(quote(""abc""),m.writeValueAsString(chars));m.configure(SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS,true);assertEquals(""[\""a\"",\""b\"",\""c\""]"",m.writeValueAsString(chars));}"
"com.fasterxml.jackson.databind.ser.SerializationFeaturesTest.testFlushingAutomatic",0,"public void testFlushingAutomatic()throws IOException {ObjectMapper mapper=new ObjectMapper();assertTrue(mapper.getSerializationConfig().isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE));StringWriter sw=new StringWriter();JsonGenerator g=mapper.getFactory().createGenerator(sw);mapper.writeValue(g,Integer.valueOf(13));assertEquals(""13"",sw.toString());g.close();sw=new StringWriter();g=mapper.getFactory().createGenerator(sw);ObjectWriter ow=mapper.writer();ow.writeValue(g,Integer.valueOf(99));assertEquals(""99"",sw.toString());g.close();}"
"com.fasterxml.jackson.databind.ser.SerializationFeaturesTest.testFlushingNotAutomatic",0,"public void testFlushingNotAutomatic()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE,false);StringWriter sw=new StringWriter();JsonGenerator g=mapper.getFactory().createGenerator(sw);mapper.writeValue(g,Integer.valueOf(13));assertEquals("""",sw.toString());g.flush();assertEquals(""13"",sw.toString());g.close();sw=new StringWriter();g=mapper.getFactory().createGenerator(sw);ObjectWriter ow=mapper.writer();ow.writeValue(g,Integer.valueOf(99));assertEquals("""",sw.toString());g.flush();assertEquals(""99"",sw.toString());g.close();}"
"com.fasterxml.jackson.databind.ser.SerializationFeaturesTest.testSingleElementCollections",0,"public void testSingleElementCollections()throws IOException {final ObjectWriter writer=objectWriter().with(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);ArrayList<String> strs=new ArrayList<String>();strs.add(""xyz"");assertEquals(quote(""xyz""),writer.writeValueAsString(strs));ArrayList<Integer> ints=new ArrayList<Integer>();ints.add(13);assertEquals(""13"",writer.writeValueAsString(ints));HashSet<Long> longs=new HashSet<Long>();longs.add(42L);assertEquals(""42"",writer.writeValueAsString(longs));final String EXP_STRINGS=""{\""values\"":\""foo\""}"";assertEquals(EXP_STRINGS,writer.writeValueAsString(new StringListBean(Collections.singletonList(""foo""))));final Set<String> SET=new HashSet<String>();SET.add(""foo"");assertEquals(EXP_STRINGS,writer.writeValueAsString(new StringListBean(SET)));assertEquals(""true"",writer.writeValueAsString(new boolean[]{true}));assertEquals(""[true,false]"",writer.writeValueAsString(new boolean[]{true,false}));assertEquals(""true"",writer.writeValueAsString(new Boolean[]{Boolean.TRUE}));assertEquals(""3"",writer.writeValueAsString(new short[]{3}));assertEquals(""[3,2]"",writer.writeValueAsString(new short[]{3,2}));assertEquals(""3"",writer.writeValueAsString(new int[]{3}));assertEquals(""[3,2]"",writer.writeValueAsString(new int[]{3,2}));assertEquals(""1"",writer.writeValueAsString(new long[]{1L}));assertEquals(""[-1,4]"",writer.writeValueAsString(new long[]{-1L,4L}));assertEquals(""0.5"",writer.writeValueAsString(new double[]{0.5}));assertEquals(""[0.5,2.5]"",writer.writeValueAsString(new double[]{0.5,2.5}));assertEquals(""0.5"",writer.writeValueAsString(new float[]{0.5f}));assertEquals(""[0.5,2.5]"",writer.writeValueAsString(new float[]{0.5f,2.5f}));assertEquals(quote(""foo""),writer.writeValueAsString(new String[]{""foo""}));}"
"com.fasterxml.jackson.databind.ser.SerializationFeaturesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testMethodAnnotations",0,"public void testMethodAnnotations()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new AnnotatedContextualSerializer());mapper.registerModule(module);assertEquals(""{\""value\"":\""see:foobar\""}"",mapper.writeValueAsString(new ContextualBean(""foobar"")));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testClassAnnotations",0,"public void testClassAnnotations()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new AnnotatedContextualSerializer());mapper.registerModule(module);assertEquals(""{\""value\"":\""Voila->xyz\""}"",mapper.writeValueAsString(new BeanWithClassConfig(""xyz"")));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testWrappedBean",0,"public void testWrappedBean()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new AnnotatedContextualSerializer());mapper.registerModule(module);assertEquals(""{\""wrapped\"":{\""value\"":\""see:xyz\""}}"",mapper.writeValueAsString(new ContextualBeanWrapper(""xyz"")));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testMethodAnnotationInArray",0,"public void testMethodAnnotationInArray()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new AnnotatedContextualSerializer());mapper.registerModule(module);ContextualArrayBean beans=new ContextualArrayBean(""123"");assertEquals(""{\""beans\"":[\""array->123\""]}"",mapper.writeValueAsString(beans));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testMethodAnnotationInList",0,"public void testMethodAnnotationInList()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new AnnotatedContextualSerializer());mapper.registerModule(module);ContextualListBean beans=new ContextualListBean(""abc"");assertEquals(""{\""beans\"":[\""list->abc\""]}"",mapper.writeValueAsString(beans));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testMethodAnnotationInMap",0,"public void testMethodAnnotationInMap()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule(""test"",Version.unknownVersion());module.addSerializer(String.class,new AnnotatedContextualSerializer());mapper.registerModule(module);ContextualMapBean map=new ContextualMapBean();map.beans.put(""first"",""In Map"");assertEquals(""{\""beans\"":{\""first\"":\""map->In Map\""}}"",mapper.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.testContextualViaAnnotation",0,"public void testContextualViaAnnotation()throws Exception {ObjectMapper mapper=new ObjectMapper();AnnotatedContextualBean bean=new AnnotatedContextualBean(""abc"");assertEquals(""{\""value\"":\""prefix->abc\""}"",mapper.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.contextual.TestContextualSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.IgnoreCreatorProp1317Test.testThatJsonIgnoreWorksWithConstructorProperties",0,"public void testThatJsonIgnoreWorksWithConstructorProperties()throws Exception {ObjectMapper om=objectMapper();Testing testing=new Testing(""shouldBeIgnored"",""notIgnore"");String json=om.writeValueAsString(testing);assertFalse(json.contains(""shouldBeIgnored""));}"
"com.fasterxml.jackson.databind.deser.filter.IgnoreCreatorProp1317Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testSimpleSetter",0,"public void testSimpleSetter()throws Exception {SizeClassSetter result=MAPPER.readValue(""{\""other\"":3,\""size\"" : 2,\""length\"" : -999 }"",SizeClassSetter.class);assertEquals(3,result._other);assertEquals(2,result._size);assertEquals(-999,result._length);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testSimpleSetter2",0,"public void testSimpleSetter2()throws Exception {SizeClassSetter2 result=MAPPER.readValue(""{\""x\"": -3 }"",SizeClassSetter2.class);assertEquals(-3,result._x);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testSimpleSetter3",0,"public void testSimpleSetter3()throws Exception {SizeClassSetter3 result=MAPPER.readValue(""{\""x\"": 128 }"",SizeClassSetter3.class);assertEquals(128,result._x);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testSetterInheritance",0,"/** * Test for verifying that super-class setters are used as expected.*/public void testSetterInheritance()throws Exception {BeanSubClass result=MAPPER.readValue(""{\""x\"":1,\""z\"" : 3,\""y\"" : 2 }"",BeanSubClass.class);assertEquals(1,result._x);assertEquals(2,result._y);assertEquals(3,result._z);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testImpliedProperty",0,"public void testImpliedProperty()throws Exception {BeanWithDeserialize bean=MAPPER.readValue(""{\""a\"":3}"",BeanWithDeserialize.class);assertNotNull(bean);assertEquals(3,bean.a);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testIssue442PrivateUnwrapped",0,"public void testIssue442PrivateUnwrapped()throws Exception {Issue442Bean bean=MAPPER.readValue(""{\""i\"":5}"",Issue442Bean.class);assertEquals(5,bean.w.i);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testAnnotationsDisabled",0,"public void testAnnotationsDisabled()throws Exception {assertTrue(MAPPER.getDeserializationConfig().isEnabled(MapperFeature.USE_ANNOTATIONS));AnnoBean bean=MAPPER.readValue(""{\""y\"" : 0 }"",AnnoBean.class);assertEquals(0,bean.value);ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.USE_ANNOTATIONS,false);bean=m.readValue(""{\""x\"" : 0 }"",AnnoBean.class);assertEquals(0,bean.value);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testEnumsWhenDisabled",0,"public void testEnumsWhenDisabled()throws Exception {ObjectMapper m=new ObjectMapper();assertEquals(Alpha.B,m.readValue(quote(""B""),Alpha.class));m=new ObjectMapper();m.configure(MapperFeature.USE_ANNOTATIONS,false);assertEquals(Alpha.B,m.readValue(quote(""B""),Alpha.class));}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.testNoAccessOverrides",0,"public void testNoAccessOverrides()throws Exception {ObjectMapper m=new ObjectMapper();m.disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS);SimpleBean bean=m.readValue(""{\""x\"":1,\""y\"":2}"",SimpleBean.class);assertEquals(1,bean.x);assertEquals(2,bean.y);}"
"com.fasterxml.jackson.databind.deser.TestBasicAnnotations.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsonschema.TestReadJsonSchema.testDeserializeSimple",0,"/** * Verifies that a simple schema that is serialized can be deserialized back to equal schema instance*/public void testDeserializeSimple()throws Exception {ObjectMapper mapper=new ObjectMapper();JsonSchema schema=mapper.generateJsonSchema(Schemable.class);assertNotNull(schema);String schemaStr=mapper.writeValueAsString(schema);assertNotNull(schemaStr);JsonSchema result=mapper.readValue(schemaStr,JsonSchema.class);assertEquals(""Trying to read from '"" + schemaStr + ""'"",schema,result);}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.testMapSubClass",0,"/** * Verifying that sub-classing works ok wrt generics information*/public void testMapSubClass()throws Exception {ObjectMapper mapper=new ObjectMapper();MapSubClass result=mapper.readValue(""{\""a\"":true }"",MapSubClass.class);assertEquals(1,result.size());Object value=result.get(""a"");assertEquals(BooleanWrapper.class,value.getClass());BooleanWrapper bw=(BooleanWrapper)value;assertEquals(Boolean.TRUE,bw.b);}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.testMapWrapper",0,"public void testMapWrapper()throws Exception {StringMap value=new ObjectMapper().readValue(""{\""entries\"":{\""a\"":9}}"",StringMap.class);assertNotNull(value.getEntries());assertEquals(1,value.getEntries().size());assertEquals(Long.valueOf(9),value.getEntries().get(""a""));}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.testIntermediateTypes",0,"public void testIntermediateTypes()throws Exception {StringStringWrapperMap result=new ObjectMapper().readValue(""{\""a\"":\""b\""}"",StringStringWrapperMap.class);assertEquals(1,result.size());Object value=result.get(""a"");assertNotNull(value);assertEquals(value.getClass(),StringWrapper.class);assertEquals(""b"",((StringWrapper)value).str);}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.testAnnotatedMap",0,"/** * Verifying that sub-classing works ok wrt generics information*/public void testAnnotatedMap()throws Exception {ObjectMapper mapper=new ObjectMapper();AnnotatedMap result=mapper.readValue(""{\""a\"":true }"",AnnotatedMap.class);assertEquals(1,result.size());Map.Entry<Object,Object> en=result.entrySet().iterator().next();assertEquals(StringWrapper.class,en.getKey().getClass());assertEquals(BooleanWrapper.class,en.getValue().getClass());assertEquals(""a"",((StringWrapper)en.getKey()).str);assertEquals(Boolean.TRUE,((BooleanWrapper)en.getValue()).b);}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.testKeyViaCtor",0,"public void testKeyViaCtor()throws Exception {ObjectMapper mapper=new ObjectMapper();Map<KeyTypeCtor,Integer> map=mapper.readValue(""{\""a\"":123}"",TypeFactory.defaultInstance().constructMapType(HashMap.class,KeyTypeCtor.class,Integer.class));assertEquals(1,map.size());Map.Entry<?,?> entry=map.entrySet().iterator().next();assertEquals(Integer.valueOf(123),entry.getValue());Object key=entry.getKey();assertEquals(KeyTypeCtor.class,key.getClass());assertEquals(""a"",((KeyTypeCtor)key).value);}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.testKeyViaFactory",0,"public void testKeyViaFactory()throws Exception {ObjectMapper mapper=new ObjectMapper();Map<KeyTypeCtor,Integer> map=mapper.readValue(""{\""a\"":123}"",TypeFactory.defaultInstance().constructMapType(HashMap.class,KeyTypeFactory.class,Integer.class));assertEquals(1,map.size());Map.Entry<?,?> entry=map.entrySet().iterator().next();assertEquals(Integer.valueOf(123),entry.getValue());Object key=entry.getKey();assertEquals(KeyTypeFactory.class,key.getClass());assertEquals(""a"",((KeyTypeFactory)key).value);}"
"com.fasterxml.jackson.databind.deser.TestGenericMapDeser.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestScalars.testScalarsWithTyping",0,"/** * Ensure that per-property dynamic types work,both for ""native"" types and others*/public void testScalarsWithTyping()throws Exception {String json;DynamicWrapper result;ObjectMapper m=MAPPER;json=m.writeValueAsString(new DynamicWrapper(Integer.valueOf(3)));result=m.readValue(json,DynamicWrapper.class);assertEquals(Integer.valueOf(3),result.value);json=m.writeValueAsString(new DynamicWrapper(""abc""));result=m.readValue(json,DynamicWrapper.class);assertEquals(""abc"",result.value);json=m.writeValueAsString(new DynamicWrapper(""abc""));result=m.readValue(json,DynamicWrapper.class);assertEquals(""abc"",result.value);json=m.writeValueAsString(new DynamicWrapper(Boolean.TRUE));result=m.readValue(json,DynamicWrapper.class);assertEquals(Boolean.TRUE,result.value);json=m.writeValueAsString(new DynamicWrapper(Long.valueOf(7L)));result=m.readValue(json,DynamicWrapper.class);assertEquals(Long.valueOf(7),result.value);json=m.writeValueAsString(new DynamicWrapper(TestEnum.B));result=m.readValue(json,DynamicWrapper.class);assertEquals(TestEnum.B,result.value);}"
"com.fasterxml.jackson.databind.jsontype.TestScalars.testScalarsViaAbstractType",0,"public void testScalarsViaAbstractType()throws Exception {ObjectMapper m=MAPPER;String json;AbstractWrapper result;json=m.writeValueAsString(new AbstractWrapper(Integer.valueOf(3)));result=m.readValue(json,AbstractWrapper.class);assertEquals(Integer.valueOf(3),result.value);json=m.writeValueAsString(new AbstractWrapper(""abc""));result=m.readValue(json,AbstractWrapper.class);assertEquals(""abc"",result.value);json=m.writeValueAsString(new AbstractWrapper(""abc""));result=m.readValue(json,AbstractWrapper.class);assertEquals(""abc"",result.value);json=m.writeValueAsString(new AbstractWrapper(Boolean.TRUE));result=m.readValue(json,AbstractWrapper.class);assertEquals(Boolean.TRUE,result.value);json=m.writeValueAsString(new AbstractWrapper(Long.valueOf(7L)));result=m.readValue(json,AbstractWrapper.class);assertEquals(Long.valueOf(7),result.value);json=m.writeValueAsString(new AbstractWrapper(TestEnum.B));result=m.readValue(json,AbstractWrapper.class);assertEquals(TestEnum.B,result.value);}"
"com.fasterxml.jackson.databind.jsontype.TestScalars.testHeterogenousStringScalars",0,"public void testHeterogenousStringScalars()throws Exception {final UUID NULL_UUID=UUID.fromString(""00000000-0000-0000-0000-000000000000"");ScalarList input=new ScalarList().add(""Test"").add(java.lang.Object.class).add(NULL_UUID);String json=MAPPER.writeValueAsString(input);ScalarList result=MAPPER.readValue(json,ScalarList.class);assertNotNull(result.values);assertEquals(3,result.values.size());assertEquals(""Test"",result.values.get(0));assertEquals(Object.class,result.values.get(1));assertEquals(NULL_UUID,result.values.get(2));}"
"com.fasterxml.jackson.databind.jsontype.TestScalars.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestJacksonAnnotationIntrospector.testSerializeDeserializeWithJaxbAnnotations",0,"/** * tests getting serializer/deserializer instances.*/public void testSerializeDeserializeWithJaxbAnnotations()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(SerializationFeature.INDENT_OUTPUT);JacksonExample ex=new JacksonExample();QName qname=new QName(""urn:hi"",""hello"");ex.setQname(qname);ex.setAttributeProperty(""attributeValue"");ex.setElementProperty(""elementValue"");ex.setWrappedElementProperty(Arrays.asList(""wrappedElementValue""));ex.setEnumProperty(EnumExample.VALUE1);StringWriter writer=new StringWriter();mapper.writeValue(writer,ex);writer.flush();writer.close();String json=writer.toString();JacksonExample readEx=mapper.readValue(json,JacksonExample.class);assertEquals(ex.qname,readEx.qname);assertEquals(ex.attributeProperty,readEx.attributeProperty);assertEquals(ex.elementProperty,readEx.elementProperty);assertEquals(ex.wrappedElementProperty,readEx.wrappedElementProperty);assertEquals(ex.enumProperty,readEx.enumProperty);}"
"com.fasterxml.jackson.databind.introspect.TestJacksonAnnotationIntrospector.testJsonTypeResolver",0,"public void testJsonTypeResolver()throws Exception {ObjectMapper mapper=new ObjectMapper();JacksonAnnotationIntrospector ai=new JacksonAnnotationIntrospector();AnnotatedClass ac=AnnotatedClassResolver.resolveWithoutSuperTypes(mapper.getSerializationConfig(),TypeResolverBean.class);JavaType baseType=TypeFactory.defaultInstance().constructType(TypeResolverBean.class);TypeResolverBuilder<?> rb=ai.findTypeResolver(mapper.getDeserializationConfig(),ac,baseType);assertNotNull(rb);assertSame(DummyBuilder.class,rb.getClass());}"
"com.fasterxml.jackson.databind.introspect.TestJacksonAnnotationIntrospector.testEnumHandling",0,"public void testEnumHandling()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new LcEnumIntrospector());assertEquals(""\""value1\"""",mapper.writeValueAsString(EnumExample.VALUE1));EnumExample result=mapper.readValue(quote(""value1""),EnumExample.class);assertEquals(EnumExample.VALUE1,result);}"
"com.fasterxml.jackson.databind.introspect.TestJacksonAnnotationIntrospector.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithEquals.testSimpleEquals",0,"public void testSimpleEquals()throws Exception {ObjectMapper mapper=new ObjectMapper();assertFalse(mapper.isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID));mapper.enable(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID);Foo foo=new Foo(1);Bar bar1=new Bar(1);Bar bar2=new Bar(2);Bar anotherBar1=new Bar(1);foo.bars.add(bar1);foo.bars.add(bar2);foo.otherBars.add(anotherBar1);foo.otherBars.add(bar2);String json=mapper.writeValueAsString(foo);assertEquals(""{\""id\"":1,\""bars\"":[{\""id\"":1},{\""id\"":2}],\""otherBars\"":[1,2]}"",json);Foo foo2=mapper.readValue(json,Foo.class);assertNotNull(foo2);assertEquals(foo.id,foo2.id);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithEquals.testEqualObjectIdsExternal",0,"public void testEqualObjectIdsExternal()throws Exception {Element element=new Element();element.uri=URI.create(""URI"");element.name=""Element1"";Element element2=new Element();element2.uri=URI.create(""URI"");element2.name=""Element2"";List<Element> input=Arrays.asList(element,element2);ObjectMapper mapper=new ObjectMapper();mapper.enable(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID);String json=mapper.writerFor(new TypeReference<List<Element>>(){}).writeValueAsString(input);Element[]output=mapper.readValue(json,Element[].class);assertNotNull(output);assertEquals(2,output.length);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithEquals.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForLists.testListOfLongs",0,"public void testListOfLongs()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();ListOfLongs input=new ListOfLongs(1L,2L,3L);String json=m.writeValueAsString(input);assertEquals(""{\""longs\"":[\""java.util.ArrayList\"",[1,2,3]]}"",json);ListOfLongs output=m.readValue(json,ListOfLongs.class);assertNotNull(output.longs);assertEquals(3,output.longs.size());assertEquals(Long.valueOf(1L),output.longs.get(0));assertEquals(Long.valueOf(2L),output.longs.get(1));assertEquals(Long.valueOf(3L),output.longs.get(2));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForLists.testListOfNumbers",0,"/** * Then bit more heterogenous list;also tests mixing of regular scalar types,and non-typed ones (int and double will never have type info added;other numbers will if necessary)*/public void testListOfNumbers()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();ListOfNumbers input=new ListOfNumbers(Long.valueOf(1L),Integer.valueOf(2),Double.valueOf(3.0));String json=m.writeValueAsString(input);assertEquals(""{\""nums\"":[\""java.util.ArrayList\"",[[\""java.lang.Long\"",1],2,3.0]]}"",json);ListOfNumbers output=m.readValue(json,ListOfNumbers.class);assertNotNull(output.nums);assertEquals(3,output.nums.size());assertEquals(Long.valueOf(1L),output.nums.get(0));assertEquals(Integer.valueOf(2),output.nums.get(1));assertEquals(Double.valueOf(3.0),output.nums.get(2));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForLists.testDateTypes",0,"public void testDateTypes()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();ObjectListBean input=new ObjectListBean();List<Object> inputList=new ArrayList<Object>();inputList.add(TimeZone.getTimeZone(""EST""));inputList.add(Locale.CHINESE);input.values=inputList;String json=m.writeValueAsString(input);ObjectListBean output=m.readValue(json,ObjectListBean.class);List<Object> outputList=output.values;assertEquals(2,outputList.size());assertTrue(outputList.get(0)instanceof TimeZone);assertTrue(outputList.get(1)instanceof Locale);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForLists.testJackson628",0,"public void testJackson628()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);ArrayList<Foo> data=new ArrayList<Foo>();String json=mapper.writeValueAsString(data);List<?> output=mapper.readValue(json,List.class);assertTrue(output.isEmpty());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForLists.testJackson667",0,"public void testJackson667()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);String json=mapper.writeValueAsString(new SetBean(""abc""));SetBean bean=mapper.readValue(json,SetBean.class);assertNotNull(bean);assertTrue(bean.names instanceof HashSet);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForLists.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedRecursive383.testRecursiveUsage",0,"public void testRecursiveUsage()throws Exception {final String JSON=""{'name': 'Bob','age': 45,'gender': 0,'child.name': 'Bob jr','child.age': 15 }"";RecursivePerson p=MAPPER.readValue(aposToQuotes(JSON),RecursivePerson.class);assertNotNull(p);assertEquals(""Bob"",p.name);assertNotNull(p.child);assertEquals(""Bob jr"",p.child.name);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedRecursive383.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.ObjectId825Test.testDeserialize",0,"public void testDeserialize()throws Exception {TestA a=new TestA();a.oidString=""oidA"";TestC c=new TestC();c.oidString=""oidC"";a.testAbst=c;TestD d=new TestD();d.oidString=""oidD"";c.d=d;a.d=d;String json=DEF_TYPING_MAPPER.writeValueAsString(a);TestA testADeserialized=DEF_TYPING_MAPPER.readValue(json,TestA.class);assertNotNull(testADeserialized);assertNotNull(testADeserialized.d);assertEquals(""oidD"",testADeserialized.d.oidString);}"
"com.fasterxml.jackson.databind.objectid.ObjectId825Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestAbstractTypeNames.testEmptyCollection",0,"public void testEmptyCollection()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(SerializationFeature.INDENT_OUTPUT,true);List<User> friends=new ArrayList<User>();friends.add(new DefaultUser(""Joe Hildebrandt"",null));friends.add(new DefaultEmployee(""Richard Nasr"",null,""MDA""));User user=new DefaultEmployee(""John Vanspronssen"",friends,""MDA"");String json=mapper.writeValueAsString(user);mapper=new ObjectMapper();mapper.registerSubtypes(DefaultEmployee.class);mapper.registerSubtypes(DefaultUser.class);User result=mapper.readValue(json,User.class);assertNotNull(result);assertEquals(DefaultEmployee.class,result.getClass());friends=result.getFriends();assertEquals(2,friends.size());assertEquals(DefaultUser.class,friends.get(0).getClass());assertEquals(DefaultEmployee.class,friends.get(1).getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestAbstractTypeNames.testInnerClassWithType",0,"public void testInnerClassWithType()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);String json=mapper.writeValueAsString(new BeanWithAnon());BeanWithAnon result=mapper.readValue(json,BeanWithAnon.class);assertEquals(BeanWithAnon.class,result.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestAbstractTypeNames.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.JsonNodeFactoryTest.testSimpleCreation",0,"public void testSimpleCreation(){JsonNodeFactory f=MAPPER.getNodeFactory();JsonNode n;n=f.numberNode((byte)4);assertTrue(n.isInt());assertEquals(4,n.intValue());assertTrue(f.numberNode((Byte)null).isNull());assertTrue(f.numberNode((Short)null).isNull());assertTrue(f.numberNode((Integer)null).isNull());assertTrue(f.numberNode((Long)null).isNull());assertTrue(f.numberNode((Float)null).isNull());assertTrue(f.numberNode((Double)null).isNull());assertTrue(f.numberNode((BigDecimal)null).isNull());assertTrue(f.numberNode((BigInteger)null).isNull());}"
"com.fasterxml.jackson.databind.node.JsonNodeFactoryTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testSimpleDeserializationClass",0,"public void testSimpleDeserializationClass()throws Exception {Identifiable result=MAPPER.readValue(EXP_SIMPLE_INT_CLASS,Identifiable.class);assertEquals(13,result.value);assertSame(result,result.next);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testMissingObjectId",0,"public void testMissingObjectId()throws Exception {Identifiable result=MAPPER.readValue(aposToQuotes(""{'value':28,'next':{'value':29}}""),Identifiable.class);assertNotNull(result);assertEquals(28,result.value);assertNotNull(result.next);assertEquals(29,result.next.value);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testSimpleUUIDForClassRoundTrip",0,"public void testSimpleUUIDForClassRoundTrip()throws Exception {UUIDNode root=new UUIDNode(1);UUIDNode child1=new UUIDNode(2);UUIDNode child2=new UUIDNode(3);root.first=child1;root.second=child2;child1.parent=root;child2.parent=root;child1.first=child2;String json=MAPPER.writeValueAsString(root);UUIDNode result=MAPPER.readValue(json,UUIDNode.class);assertEquals(1,result.value);UUIDNode result2=result.first;UUIDNode result3=result.second;assertNotNull(result2);assertNotNull(result3);assertEquals(2,result2.value);assertEquals(3,result3.value);assertSame(result,result2.parent);assertSame(result,result3.parent);assertSame(result3,result2.first);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testSimpleDeserializationProperty",0,"public void testSimpleDeserializationProperty()throws Exception {IdWrapper result=MAPPER.readValue(EXP_SIMPLE_INT_PROP,IdWrapper.class);assertEquals(7,result.node.value);assertSame(result.node,result.node.next.node);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testSimpleDeserWithForwardRefs",0,"public void testSimpleDeserWithForwardRefs()throws Exception {IdWrapper result=MAPPER.readValue(""{\""node\"":{\""value\"":7,\""next\"":{\""node\"":1},\""@id\"":1}}"",IdWrapper.class);assertEquals(7,result.node.value);assertSame(result.node,result.node.next.node);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testForwardReference",0,"public void testForwardReference()throws Exception {String json=""{\""employees\"":["" + ""{\""id\"":1,\""name\"":\""First\"",\""manager\"":2,\""reports\"":[]},"" + ""{\""id\"":2,\""name\"":\""Second\"",\""manager\"":null,\""reports\"":[1]}""+ ""]}"";Company company=MAPPER.readValue(json,Company.class);assertEquals(2,company.employees.size());Employee firstEmployee=company.employees.get(0);Employee secondEmployee=company.employees.get(1);assertEquals(1,firstEmployee.id);assertEquals(2,secondEmployee.id);assertEquals(secondEmployee,firstEmployee.manager);assertEquals(firstEmployee,secondEmployee.reports.get(0));}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testForwardReferenceInCollection",0,"public void testForwardReferenceInCollection()throws Exception {String json=""{\""employees\"":["" + ""{\""id\"":1,\""name\"":\""First\"",\""manager\"":null,\""reports\"":[2]},"" + ""{\""id\"":2,\""name\"":\""Second\"",\""manager\"":1,\""reports\"":[]}""+ ""]}"";Company company=MAPPER.readValue(json,Company.class);assertEquals(2,company.employees.size());Employee firstEmployee=company.employees.get(0);Employee secondEmployee=company.employees.get(1);assertEmployees(firstEmployee,secondEmployee);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testForwardReferenceInMap",0,"public void testForwardReferenceInMap()throws Exception {String json=""{\""employees\"":{"" + ""\""1\"":{\""id\"":1,\""name\"":\""First\"",\""manager\"":null,\""reports\"":[2]},"" + ""\""2\"": 2,""+ ""\""3\"":{\""id\"":2,\""name\"":\""Second\"",\""manager\"":1,\""reports\"":[]}""+ ""}}"";MappedCompany company=MAPPER.readValue(json,MappedCompany.class);assertEquals(3,company.employees.size());Employee firstEmployee=company.employees.get(1);Employee secondEmployee=company.employees.get(3);assertEmployees(firstEmployee,secondEmployee);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testForwardReferenceAnySetterCombo",0,"public void testForwardReferenceAnySetterCombo()throws Exception {String json=""{\""@id\"":1,\""foo\"":2,\""bar\"":{\""@id\"":2,\""foo\"":1}}"";AnySetterObjectId value=MAPPER.readValue(json,AnySetterObjectId.class);assertSame(value.values.get(""bar""),value.values.get(""foo""));}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testUnresolvedForwardReference",0,"public void testUnresolvedForwardReference()throws Exception {String json=""{\""employees\"":["" + ""{\""id\"":1,\""name\"":\""First\"",\""manager\"":null,\""reports\"":[3]},"" + ""{\""id\"":2,\""name\"":\""Second\"",\""manager\"":3,\""reports\"":[]}""+ ""]}"";try {MAPPER.readValue(json,Company.class);fail(""Should have thrown."");}catch(UnresolvedForwardReference exception){List<UnresolvedId> unresolvedIds=exception.getUnresolvedIds();assertEquals(2,unresolvedIds.size());UnresolvedId firstUnresolvedId=unresolvedIds.get(0);assertEquals(3,firstUnresolvedId.getId());assertEquals(Employee.class,firstUnresolvedId.getType());UnresolvedId secondUnresolvedId=unresolvedIds.get(1);assertEquals(firstUnresolvedId.getId(),secondUnresolvedId.getId());assertEquals(Employee.class,secondUnresolvedId.getType());}}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testUnresolvableAsNull",0,"public void testUnresolvableAsNull()throws Exception {IdWrapper w=MAPPER.readerFor(IdWrapper.class).without(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS).readValue(aposToQuotes(""{'node':123}""));assertNotNull(w);assertNull(w.node);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testKeepCollectionOrdering",0,"public void testKeepCollectionOrdering()throws Exception {String json=""{\""employees\"":[2,1,"" + ""{\""id\"":1,\""name\"":\""First\"",\""manager\"":null,\""reports\"":[2]},"" + ""{\""id\"":2,\""name\"":\""Second\"",\""manager\"":1,\""reports\"":[]}""+ ""]}"";Company company=MAPPER.readValue(json,Company.class);assertEquals(4,company.employees.size());Employee firstEmployee=company.employees.get(1);Employee secondEmployee=company.employees.get(0);assertSame(firstEmployee,company.employees.get(2));assertSame(secondEmployee,company.employees.get(3));assertEmployees(firstEmployee,secondEmployee);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testKeepMapOrdering",0,"public void testKeepMapOrdering()throws Exception {String json=""{\""employees\"":{"" + ""\""1\"":2,\""2\"":1,"" + ""\""3\"":{\""id\"":1,\""name\"":\""First\"",\""manager\"":null,\""reports\"":[2]},""+ ""\""4\"":{\""id\"":2,\""name\"":\""Second\"",\""manager\"":1,\""reports\"":[]}""+ ""}}"";MappedCompany company=MAPPER.readValue(json,MappedCompany.class);assertEquals(4,company.employees.size());Employee firstEmployee=company.employees.get(2);Employee secondEmployee=company.employees.get(1);assertEmployees(firstEmployee,secondEmployee);Iterator<Entry<Integer,Employee>> iterator=company.employees.entrySet().iterator();assertSame(secondEmployee,iterator.next().getValue());assertSame(firstEmployee,iterator.next().getValue());assertSame(firstEmployee,iterator.next().getValue());assertSame(secondEmployee,iterator.next().getValue());}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testCustomDeserializationClass",0,"public void testCustomDeserializationClass()throws Exception {IdentifiableCustom result=MAPPER.readValue(EXP_CUSTOM_VIA_CLASS,IdentifiableCustom.class);assertEquals(-900,result.value);assertSame(result,result.next);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testCustomDeserializationProperty",0,"public void testCustomDeserializationProperty()throws Exception {IdWrapperExt result=MAPPER.readValue(EXP_CUSTOM_VIA_PROP,IdWrapperExt.class);assertEquals(99,result.node.value);assertSame(result.node,result.node.next.node);assertEquals(3,result.node.customId);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testCustomPoolResolver",0,"public void testCustomPoolResolver()throws Exception {Map<Object,WithCustomResolution> pool=new HashMap<Object,WithCustomResolution>();pool.put(1,new WithCustomResolution(1,1));pool.put(2,new WithCustomResolution(2,2));pool.put(3,new WithCustomResolution(3,3));pool.put(4,new WithCustomResolution(4,4));pool.put(5,new WithCustomResolution(5,5));ContextAttributes attrs=MAPPER.getDeserializationConfig().getAttributes().withSharedAttribute(POOL_KEY,pool);String content=""{\""data\"":[1,2,3,4,5]}"";CustomResolutionWrapper wrapper=MAPPER.readerFor(CustomResolutionWrapper.class).with(attrs).readValue(content);assertFalse(wrapper.data.isEmpty());for(WithCustomResolution ob : wrapper.data){assertSame(pool.get(ob.id),ob);}}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.testNullObjectId",0,"public void testNullObjectId()throws Exception {Identifiable value=MAPPER.readValue(aposToQuotes(""{'value':3,'next':null,'id':null}""),Identifiable.class);assertNotNull(value);assertEquals(3,value.value);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testByteBuffer",0,"public void testByteBuffer()throws Exception {byte[]INPUT=new byte[]{1,3,9,-1,6};String exp=MAPPER.writeValueAsString(INPUT);ByteBuffer result=MAPPER.readValue(exp,ByteBuffer.class);assertNotNull(result);assertEquals(INPUT.length,result.remaining());for (int i=0;i < INPUT.length;++i){assertEquals(INPUT[i],result.get());}assertEquals(0,result.remaining());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testCharset",0,"public void testCharset()throws Exception {Charset UTF8=Charset.forName(""UTF-8"");assertSame(UTF8,MAPPER.readValue(quote(""UTF-8""),Charset.class));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testClass",0,"public void testClass()throws IOException {ObjectMapper mapper=new ObjectMapper();assertSame(String.class,mapper.readValue(quote(""java.lang.String""),Class.class));assertSame(Boolean.TYPE,mapper.readValue(quote(""boolean""),Class.class));assertSame(Byte.TYPE,mapper.readValue(quote(""byte""),Class.class));assertSame(Short.TYPE,mapper.readValue(quote(""short""),Class.class));assertSame(Character.TYPE,mapper.readValue(quote(""char""),Class.class));assertSame(Integer.TYPE,mapper.readValue(quote(""int""),Class.class));assertSame(Long.TYPE,mapper.readValue(quote(""long""),Class.class));assertSame(Float.TYPE,mapper.readValue(quote(""float""),Class.class));assertSame(Double.TYPE,mapper.readValue(quote(""double""),Class.class));assertSame(Void.TYPE,mapper.readValue(quote(""void""),Class.class));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testClassWithParams",0,"public void testClassWithParams()throws IOException {String json=MAPPER.writeValueAsString(new ParamClassBean(""Foobar""));ParamClassBean result=MAPPER.readValue(json,ParamClassBean.class);assertEquals(""Foobar"",result.name);assertSame(String.class,result.clazz);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testCurrency",0,"public void testCurrency()throws IOException {Currency usd=Currency.getInstance(""USD"");assertEquals(usd,new ObjectMapper().readValue(quote(""USD""),Currency.class));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testFile",0,"public void testFile()throws Exception {File src=new File(""/test"").getAbsoluteFile();String abs=src.getAbsolutePath();String json=MAPPER.writeValueAsString(abs);File result=MAPPER.readValue(json,File.class);assertEquals(abs,result.getAbsolutePath());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testLocale",0,"public void testLocale()throws IOException {assertEquals(new Locale(""en""),MAPPER.readValue(quote(""en""),Locale.class));assertEquals(new Locale(""es"",""ES""),MAPPER.readValue(quote(""es_ES""),Locale.class));assertEquals(new Locale(""FI"",""fi"",""savo""),MAPPER.readValue(quote(""fi_FI_savo""),Locale.class));assertEquals(new Locale(""en"",""US""),MAPPER.readValue(quote(""en-US""),Locale.class));Locale loc=MAPPER.readValue(quote(""""),Locale.class);assertSame(Locale.ROOT,loc);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testCharSequence",0,"public void testCharSequence()throws IOException {CharSequence cs=MAPPER.readValue(""\""abc\"""",CharSequence.class);assertEquals(String.class,cs.getClass());assertEquals(""abc"",cs.toString());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testInetAddress",0,"public void testInetAddress()throws IOException {InetAddress address=MAPPER.readValue(quote(""127.0.0.1""),InetAddress.class);assertEquals(""127.0.0.1"",address.getHostAddress());final String HOST=""google.com"";address=MAPPER.readValue(quote(HOST),InetAddress.class);assertEquals(HOST,address.getHostName());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testInetSocketAddress",0,"public void testInetSocketAddress()throws IOException {InetSocketAddress address=MAPPER.readValue(quote(""127.0.0.1""),InetSocketAddress.class);assertEquals(""127.0.0.1"",address.getAddress().getHostAddress());InetSocketAddress ip6=MAPPER.readValue(quote(""2001:db8:85a3:8d3:1319:8a2e:370:7348""),InetSocketAddress.class);assertEquals(""2001:db8:85a3:8d3:1319:8a2e:370:7348"",ip6.getAddress().getHostAddress());InetSocketAddress ip6port=MAPPER.readValue(quote(""[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443""),InetSocketAddress.class);assertEquals(""2001:db8:85a3:8d3:1319:8a2e:370:7348"",ip6port.getAddress().getHostAddress());assertEquals(443,ip6port.getPort());final String HOST=""www.google.com"";address=MAPPER.readValue(quote(HOST),InetSocketAddress.class);assertEquals(HOST,address.getHostName());final String HOST_AND_PORT=HOST + "":80"";address=MAPPER.readValue(quote(HOST_AND_PORT),InetSocketAddress.class);assertEquals(HOST,address.getHostName());assertEquals(80,address.getPort());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testRegexps",0,"public void testRegexps()throws IOException {final String PATTERN_STR=""abc:\\s?(\\d+)"";Pattern exp=Pattern.compile(PATTERN_STR);String json=MAPPER.writeValueAsString(exp);Pattern result=MAPPER.readValue(json,Pattern.class);assertEquals(exp.pattern(),result.pattern());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testStackTraceElement",0,"public void testStackTraceElement()throws Exception {StackTraceElement elem=null;try {throw new IllegalStateException();}catch(Exception e){elem=e.getStackTrace()[0];}String json=MAPPER.writeValueAsString(elem);StackTraceElement back=MAPPER.readValue(json,StackTraceElement.class);assertEquals(""testStackTraceElement"",back.getMethodName());assertEquals(elem.getLineNumber(),back.getLineNumber());assertEquals(elem.getClassName(),back.getClassName());assertEquals(elem.isNativeMethod(),back.isNativeMethod());assertTrue(back.getClassName().endsWith(""JDKStringLikeTypesTest""));assertFalse(back.isNativeMethod());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testStackTraceElementWithCustom",0,"public void testStackTraceElementWithCustom()throws Exception {StackTraceBean bean=MAPPER.readValue(aposToQuotes(""{'Location':'foobar'}""),StackTraceBean.class);assertNotNull(bean);assertNotNull(bean.location);assertEquals(StackTraceBean.NUM,bean.location.getLineNumber());ObjectMapper mapper=new ObjectMapper();SimpleModule module=new SimpleModule();module.addDeserializer(StackTraceElement.class,new MyStackTraceElementDeserializer());mapper.registerModule(module);StackTraceElement elem=mapper.readValue(""123"",StackTraceElement.class);assertNotNull(elem);assertEquals(StackTraceBean.NUM,elem.getLineNumber());IOException ioe=mapper.readValue(aposToQuotes(""{'stackTrace':[123,456 ]}""),IOException.class);assertNotNull(ioe);StackTraceElement[]traces=ioe.getStackTrace();assertNotNull(traces);assertEquals(2,traces.length);assertEquals(StackTraceBean.NUM,traces[0].getLineNumber());assertEquals(StackTraceBean.NUM,traces[1].getLineNumber());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testStringBuilder",0,"public void testStringBuilder()throws Exception {StringBuilder sb=MAPPER.readValue(quote(""abc""),StringBuilder.class);assertEquals(""abc"",sb.toString());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testURI",0,"public void testURI()throws Exception {final ObjectReader reader=MAPPER.readerFor(URI.class);final URI value=new URI(""http://foo.com"");assertEquals(value,reader.readValue(""\"""" + value.toString()+ ""\""""));URI result=reader.readValue(quote(""""));assertNotNull(result);assertEquals(URI.create(""""),result);try {result=reader.readValue(quote(""a b""));fail(""Should not accept malformed URI,instead got: "" + result);}catch(InvalidFormatException e){verifyException(e,""not a valid textual representation"");}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testURL",0,"public void testURL()throws Exception {URL exp=new URL(""http://foo.com"");assertEquals(exp,MAPPER.readValue(""\"""" + exp.toString()+ ""\"""",URL.class));TokenBuffer buf=new TokenBuffer(null,false);buf.writeObject(null);assertNull(MAPPER.readValue(buf.asParser(),URL.class));buf.close();buf=new TokenBuffer(null,false);buf.writeObject(exp);assertSame(exp,MAPPER.readValue(buf.asParser(),URL.class));buf.close();try {URL result=MAPPER.readValue(quote(""a b""),URL.class);fail(""Should not accept malformed URI,instead got: "" + result);}catch(InvalidFormatException e){verifyException(e,""not a valid textual representation"");}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testUUID",0,"public void testUUID()throws Exception {final ObjectMapper mapper=objectMapper();final String NULL_UUID=""00000000-0000-0000-0000-000000000000"";for(String value : new String[]{""76e6d183-5f68-4afa-b94a-922c1fdb83f8"",""540a88d1-e2d8-4fb1-9396-9212280d0a7f"",""2c9e441d-1cd0-472d-9bab-69838f877574"",""591b2869-146e-41d7-8048-e8131f1fdec5"",""82994ac2-7b23-49f2-8cc5-e24cf6ed77be"",""00000007-0000-0000-0000-000000000000""}){mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);UUID uuid=UUID.fromString(value);assertEquals(uuid,mapper.readValue(quote(value),UUID.class));}final String TEMPL=NULL_UUID;final String chars=""123456789abcdefABCDEF"";for (int i=0;i < chars.length();++i){String value=TEMPL.replace('0',chars.charAt(i));assertEquals(UUID.fromString(value).toString(),mapper.readValue(quote(value),UUID.class).toString());}String base64=Base64Variants.getDefaultVariant().encode(new byte[16]);assertEquals(UUID.fromString(NULL_UUID),mapper.readValue(quote(base64),UUID.class));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testUUIDInvalid",0,"public void testUUIDInvalid()throws Exception {try {MAPPER.readValue(quote(""abcde""),UUID.class);fail(""Should fail on invalid UUID string"");}catch(InvalidFormatException e){verifyException(e,""UUID has to be represented by standard"");}try {MAPPER.readValue(quote(""76e6d183-5f68-4afa-b94a-922c1fdb83fx""),UUID.class);fail(""Should fail on invalid UUID string"");}catch(InvalidFormatException e){verifyException(e,""non-hex character 'x'"");}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.testUUIDAux",0,"public void testUUIDAux()throws Exception {final UUID value=UUID.fromString(""76e6d183-5f68-4afa-b94a-922c1fdb83f8"");TokenBuffer buf=new TokenBuffer(null,false);buf.writeObject(null);assertNull(MAPPER.readValue(buf.asParser(),UUID.class));buf.close();buf=new TokenBuffer(null,false);buf.writeObject(value);assertSame(value,MAPPER.readValue(buf.asParser(),UUID.class));ByteArrayOutputStream bytes=new ByteArrayOutputStream();DataOutputStream out=new DataOutputStream(bytes);out.writeLong(value.getMostSignificantBits());out.writeLong(value.getLeastSignificantBits());byte[]data=bytes.toByteArray();assertEquals(16,data.length);buf.writeObject(data);UUID value2=MAPPER.readValue(buf.asParser(),UUID.class);assertEquals(value,value2);buf.close();}"
"com.fasterxml.jackson.databind.deser.jdk.JDKStringLikeTypesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorSingleParameterAtBeginning",0,"public void testWithUnwrappedAndCreatorSingleParameterAtBeginning()throws Exception {final String json=aposToQuotes(""{'person_id':1234,'first_name':'John','last_name':'Doe','years_old':30,'living':true}"");final ObjectMapper mapper=new ObjectMapper();Person person=mapper.readValue(json,Person.class);assertEquals(1234,person.getId());assertNotNull(person.getName());assertEquals(""John"",person.getName().getFirst());assertEquals(""Doe"",person.getName().getLast());assertEquals(30,person.getAge());assertEquals(true,person.isAlive());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorSingleParameterInMiddle",0,"public void testWithUnwrappedAndCreatorSingleParameterInMiddle()throws Exception {final String json=aposToQuotes(""{'first_name':'John','last_name':'Doe','person_id':1234,'years_old':30,'living':true}"");final ObjectMapper mapper=new ObjectMapper();Person person=mapper.readValue(json,Person.class);assertEquals(1234,person.getId());assertNotNull(person.getName());assertEquals(""John"",person.getName().getFirst());assertEquals(""Doe"",person.getName().getLast());assertEquals(30,person.getAge());assertEquals(true,person.isAlive());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorSingleParameterAtEnd",0,"public void testWithUnwrappedAndCreatorSingleParameterAtEnd()throws Exception {final String json=aposToQuotes(""{'first_name':'John','last_name':'Doe','years_old':30,'living':true,'person_id':1234}"");final ObjectMapper mapper=new ObjectMapper();Person person=mapper.readValue(json,Person.class);assertEquals(1234,person.getId());assertNotNull(person.getName());assertEquals(""John"",person.getName().getFirst());assertEquals(""Doe"",person.getName().getLast());assertEquals(30,person.getAge());assertEquals(true,person.isAlive());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorMultipleParametersAtBeginning",0,"public void testWithUnwrappedAndCreatorMultipleParametersAtBeginning()throws Exception {final String json=aposToQuotes(""{'animal_id':1234,'living':true,'first_name':'John','last_name':'Doe','years_old':30}"");final ObjectMapper mapper=new ObjectMapper();Animal animal=mapper.readValue(json,Animal.class);assertEquals(1234,animal.getId());assertNotNull(animal.getName());assertEquals(""John"",animal.getName().getFirst());assertEquals(""Doe"",animal.getName().getLast());assertEquals(30,animal.getAge());assertEquals(true,animal.isAlive());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorMultipleParametersInMiddle",0,"public void testWithUnwrappedAndCreatorMultipleParametersInMiddle()throws Exception {final String json=aposToQuotes(""{'first_name':'John','animal_id':1234,'last_name':'Doe','living':true,'years_old':30}"");final ObjectMapper mapper=new ObjectMapper();Animal animal=mapper.readValue(json,Animal.class);assertEquals(1234,animal.getId());assertNotNull(animal.getName());assertEquals(""John"",animal.getName().getFirst());assertEquals(""Doe"",animal.getName().getLast());assertEquals(30,animal.getAge());assertEquals(true,animal.isAlive());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.testWithUnwrappedAndCreatorMultipleParametersAtEnd",0,"public void testWithUnwrappedAndCreatorMultipleParametersAtEnd()throws Exception {final String json=aposToQuotes(""{'first_name':'John','last_name':'Doe','years_old':30,'living':true,'animal_id':1234}"");final ObjectMapper mapper=new ObjectMapper();Animal animal=mapper.readValue(json,Animal.class);assertEquals(1234,animal.getId());assertNotNull(animal.getName());assertEquals(""John"",animal.getName().getFirst());assertEquals(""Doe"",animal.getName().getLast());assertEquals(30,animal.getAge());assertEquals(true,animal.isAlive());}"
"com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.FormatFeaturesMiscTest.testCaseInsensitive",0,"public void testCaseInsensitive()throws Exception {CaseInsensitiveRoleWrapper w=MAPPER.readValue(aposToQuotes(""{'role':{'id':'12','name':'Foo'}}""),CaseInsensitiveRoleWrapper.class);assertNotNull(w);assertEquals(""12"",w.role.ID);assertEquals(""Foo"",w.role.Name);}"
"com.fasterxml.jackson.databind.struct.FormatFeaturesMiscTest.testOrderedMaps",0,"public void testOrderedMaps()throws Exception {SortedKeysMap map=new SortedKeysMap().put(""b"",2).put(""a"",1);assertEquals(aposToQuotes(""{'values':{'a':1,'b':2}}""),MAPPER.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.struct.FormatFeaturesMiscTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.exc.ExceptionPathTest.testReferenceChainForInnerClass",0,"public void testReferenceChainForInnerClass()throws Exception {String json=MAPPER.writeValueAsString(new Outer());try {MAPPER.readValue(json,Outer.class);fail(""Should not pass"");}catch(JsonMappingException e){JsonMappingException.Reference reference=e.getPath().get(0);assertEquals(getClass().getName()+ ""$Outer[\""inner\""]"",reference.toString());}}"
"com.fasterxml.jackson.databind.exc.ExceptionPathTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testFeatureDefaults",0,"public void testFeatureDefaults(){ObjectMapper m=new ObjectMapper();DeserializationConfig cfg=m.getDeserializationConfig();assertTrue(cfg.isEnabled(MapperFeature.USE_ANNOTATIONS));assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_SETTERS));assertTrue(cfg.isEnabled(MapperFeature.AUTO_DETECT_CREATORS));assertTrue(cfg.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));assertTrue(cfg.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS));assertFalse(cfg.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS));assertFalse(cfg.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS));assertTrue(cfg.isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES));}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testBasicFeatures",0,"public void testBasicFeatures()throws Exception {DeserializationConfig config=MAPPER.getDeserializationConfig();assertTrue(config.hasDeserializationFeatures(DeserializationFeature.EAGER_DESERIALIZER_FETCH.getMask()));assertFalse(config.hasDeserializationFeatures(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY.getMask()));assertTrue(config.hasSomeOfFeatures(DeserializationFeature.EAGER_DESERIALIZER_FETCH.getMask()+ DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY.getMask()));assertFalse(config.hasSomeOfFeatures(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY.getMask()));assertSame(config,config.without());assertSame(config,config.with());assertSame(config,config.with(MAPPER.getSubtypeResolver()));DeserializationConfig newConfig=config.with(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES,true);assertNotSame(config,newConfig);config=newConfig;assertSame(config,config.with(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));assertNotSame(config,config.with(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES,false));assertNotSame(config,config.with(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT,DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES));}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testParserFeatures",0,"public void testParserFeatures()throws Exception {DeserializationConfig config=MAPPER.getDeserializationConfig();assertNotSame(config,config.with(JsonParser.Feature.ALLOW_COMMENTS));assertNotSame(config,config.withFeatures(JsonParser.Feature.ALLOW_COMMENTS,JsonParser.Feature.ALLOW_MISSING_VALUES));assertNotSame(config,config.without(JsonParser.Feature.ALLOW_COMMENTS));assertNotSame(config,config.withoutFeatures(JsonParser.Feature.ALLOW_COMMENTS,JsonParser.Feature.ALLOW_MISSING_VALUES));}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testFormatFeatures",0,"public void testFormatFeatures()throws Exception {DeserializationConfig config=MAPPER.getDeserializationConfig();assertNotSame(config,config.with(BogusFormatFeature.FF_DISABLED_BY_DEFAULT));assertNotSame(config,config.withFeatures(BogusFormatFeature.FF_DISABLED_BY_DEFAULT,BogusFormatFeature.FF_ENABLED_BY_DEFAULT));assertNotSame(config,config.without(BogusFormatFeature.FF_ENABLED_BY_DEFAULT));assertNotSame(config,config.withoutFeatures(BogusFormatFeature.FF_DISABLED_BY_DEFAULT,BogusFormatFeature.FF_ENABLED_BY_DEFAULT));}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testEnumIndexes",0,"public void testEnumIndexes(){int max=0;for(DeserializationFeature f : DeserializationFeature.values()){max=Math.max(max,f.ordinal());}if (max >= 31){fail(""Max number of DeserializationFeature enums reached: "" + max);}}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testOverrideIntrospectors",0,"public void testOverrideIntrospectors(){ObjectMapper m=new ObjectMapper();DeserializationConfig cfg=m.getDeserializationConfig();cfg=cfg.with((ClassIntrospector)null);cfg=cfg.with((AnnotationIntrospector)null);assertNull(cfg.getAnnotationIntrospector());}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.testMisc",0,"public void testMisc()throws Exception {DeserializationConfig config=MAPPER.getDeserializationConfig();assertEquals(JsonInclude.Value.empty(),config.getDefaultPropertyInclusion());assertEquals(JsonInclude.Value.empty(),config.getDefaultPropertyInclusion(String.class));assertSame(config,config.withRootName((PropertyName)null));DeserializationConfig newConfig=config.withRootName(PropertyName.construct(""foobar""));assertNotSame(config,newConfig);config=newConfig;assertSame(config,config.withRootName(PropertyName.construct(""foobar"")));assertSame(config,config.with(config.getAttributes()));assertNotSame(config,config.with(new ContextAttributes.Impl(Collections.singletonMap(""a"",""b""))));assertNotNull(config.introspectDirectClassAnnotations(getClass()));}"
"com.fasterxml.jackson.databind.cfg.DeserializationConfigTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testIsConcrete",0,"public void testIsConcrete()throws Exception {assertTrue(ClassUtil.isConcrete(getClass()));assertFalse(ClassUtil.isConcrete(BaseClass.class));assertFalse(ClassUtil.isConcrete(BaseInt.class));assertFalse(ClassUtil.isConcrete(ConcreteAndAbstract.class.getDeclaredMethod(""a"")));assertTrue(ClassUtil.isConcrete(ConcreteAndAbstract.class.getDeclaredMethod(""c"")));}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testCanBeABeanType",0,"public void testCanBeABeanType(){assertEquals(""annotation"",ClassUtil.canBeABeanType(java.lang.annotation.Retention.class));assertEquals(""array"",ClassUtil.canBeABeanType(String[].class));assertEquals(""enum"",ClassUtil.canBeABeanType(TestEnum.class));assertEquals(""primitive"",ClassUtil.canBeABeanType(Integer.TYPE));assertNull(ClassUtil.canBeABeanType(Integer.class));assertEquals(""non-static member class"",ClassUtil.isLocalType(InnerNonStatic.class,false));assertNull(ClassUtil.isLocalType(Integer.class,false));}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testExceptionHelpers",0,"public void testExceptionHelpers(){RuntimeException e=new RuntimeException(""test"");RuntimeException wrapper=new RuntimeException(e);assertSame(e,ClassUtil.getRootCause(wrapper));try {ClassUtil.throwAsIAE(e);fail(""Shouldn't get this far"");}catch(RuntimeException e2){assertSame(e,e2);}Error err=new Error();try {ClassUtil.throwAsIAE(err);fail(""Shouldn't get this far"");}catch(Error errAct){assertSame(err,errAct);}try {ClassUtil.unwrapAndThrowAsIAE(wrapper);fail(""Shouldn't get this far"");}catch(RuntimeException e2){assertSame(e,e2);}}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testFailedCreateInstance",0,"public void testFailedCreateInstance(){try {ClassUtil.createInstance(BaseClass.class,true);}catch(IllegalArgumentException e){verifyException(e,""has no default"");}try {ClassUtil.createInstance(Inner.class,false);}catch(IllegalArgumentException e){verifyException(e,""is not accessible"");}try {ClassUtil.createInstance(Inner.class,true);}catch(IllegalStateException e){verifyException(e,""test"");}}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testPrimitiveDefaultValue",0,"public void testPrimitiveDefaultValue(){assertEquals(Integer.valueOf(0),ClassUtil.defaultValue(Integer.TYPE));assertEquals(Long.valueOf(0L),ClassUtil.defaultValue(Long.TYPE));assertEquals(Character.valueOf('\0'),ClassUtil.defaultValue(Character.TYPE));assertEquals(Short.valueOf((short)0),ClassUtil.defaultValue(Short.TYPE));assertEquals(Byte.valueOf((byte)0),ClassUtil.defaultValue(Byte.TYPE));assertEquals(Double.valueOf(0.0),ClassUtil.defaultValue(Double.TYPE));assertEquals(Float.valueOf(0.0f),ClassUtil.defaultValue(Float.TYPE));assertEquals(Boolean.FALSE,ClassUtil.defaultValue(Boolean.TYPE));try {ClassUtil.defaultValue(String.class);}catch(IllegalArgumentException e){verifyException(e,""String is not a primitive type"");}}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testPrimitiveWrapperType",0,"public void testPrimitiveWrapperType(){assertEquals(Byte.class,ClassUtil.wrapperType(Byte.TYPE));assertEquals(Short.class,ClassUtil.wrapperType(Short.TYPE));assertEquals(Character.class,ClassUtil.wrapperType(Character.TYPE));assertEquals(Integer.class,ClassUtil.wrapperType(Integer.TYPE));assertEquals(Long.class,ClassUtil.wrapperType(Long.TYPE));assertEquals(Double.class,ClassUtil.wrapperType(Double.TYPE));assertEquals(Float.class,ClassUtil.wrapperType(Float.TYPE));assertEquals(Boolean.class,ClassUtil.wrapperType(Boolean.TYPE));try {ClassUtil.wrapperType(String.class);fail(""Should not pass"");}catch(IllegalArgumentException e){verifyException(e,""String is not a primitive type"");}}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testWrapperToPrimitiveType",0,"public void testWrapperToPrimitiveType(){assertEquals(Integer.TYPE,ClassUtil.primitiveType(Integer.class));assertEquals(Long.TYPE,ClassUtil.primitiveType(Long.class));assertEquals(Character.TYPE,ClassUtil.primitiveType(Character.class));assertEquals(Short.TYPE,ClassUtil.primitiveType(Short.class));assertEquals(Byte.TYPE,ClassUtil.primitiveType(Byte.class));assertEquals(Float.TYPE,ClassUtil.primitiveType(Float.class));assertEquals(Double.TYPE,ClassUtil.primitiveType(Double.class));assertEquals(Boolean.TYPE,ClassUtil.primitiveType(Boolean.class));assertNull(ClassUtil.primitiveType(String.class));}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testFindEnumType",0,"public void testFindEnumType(){assertEquals(TestEnum.class,ClassUtil.findEnumType(TestEnum.A));assertEquals(TestEnum.class,ClassUtil.findEnumType(EnumSet.allOf(TestEnum.class)));assertEquals(TestEnum.class,ClassUtil.findEnumType(EnumSet.noneOf(TestEnum.class)));assertEquals(TestEnum.class,ClassUtil.findEnumType(new EnumMap<TestEnum,Integer>(TestEnum.class)));}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.testDescs",0,"public void testDescs(){final String exp=String.class.getName();assertEquals(exp,ClassUtil.getClassDescription(""foo""));assertEquals(exp,ClassUtil.getClassDescription(String.class));}"
"com.fasterxml.jackson.databind.util.ClassUtilTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testSimple",0,"public void testSimple()throws Exception {assertEquals(""\""B\"""",MAPPER.writeValueAsString(TestEnum.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumSet",0,"public void testEnumSet()throws Exception {StringWriter sw=new StringWriter();EnumSet<TestEnum> value=EnumSet.of(TestEnum.B);MAPPER.writeValue(sw,value);assertEquals(""[\""B\""]"",sw.toString());}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumUsingToString",0,"/** * Whereas regular Enum serializer uses enum names,some users prefer calling toString()instead. So let's verify that this can be done using annotation for enum class.*/public void testEnumUsingToString()throws Exception {StringWriter sw=new StringWriter();MAPPER.writeValue(sw,AnnotatedTestEnum.C2);assertEquals(""\""c2\"""",sw.toString());}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testSubclassedEnums",0,"public void testSubclassedEnums()throws Exception {assertEquals(""\""B\"""",MAPPER.writeValueAsString(EnumWithSubClass.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumsWithJsonValue",0,"public void testEnumsWithJsonValue()throws Exception {assertEquals(""\""value:bar\"""",MAPPER.writeValueAsString(EnumWithJsonValue.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumsWithJsonValueUsingMixin",0,"public void testEnumsWithJsonValueUsingMixin()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(TestEnum.class,ToStringMixin.class);assertEquals(""\""b\"""",m.writeValueAsString(TestEnum.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumsWithJsonValueInMap",0,"public void testEnumsWithJsonValueInMap()throws Exception {EnumMap<EnumWithJsonValue,String> input=new EnumMap<EnumWithJsonValue,String>(EnumWithJsonValue.class);input.put(EnumWithJsonValue.B,""x"");assertEquals(""{\""value:bar\"":\""x\""}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testSerializableEnum",0,"/** * Test for ensuring that @JsonSerializable is used with Enum types as well as with any other types.*/public void testSerializableEnum()throws Exception {assertEquals(""\""foo\"""",MAPPER.writeValueAsString(SerializableEnum.A));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testToStringEnum",0,"public void testToStringEnum()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING,true);assertEquals(""\""b\"""",m.writeValueAsString(LowerCaseEnum.B));assertEquals(""\""B\"""",m.writer().without(SerializationFeature.WRITE_ENUMS_USING_TO_STRING).writeValueAsString(LowerCaseEnum.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testToStringEnumWithEnumMap",0,"public void testToStringEnumWithEnumMap()throws Exception {ObjectMapper m=new ObjectMapper();m.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);EnumMap<LowerCaseEnum,String> enums=new EnumMap<LowerCaseEnum,String>(LowerCaseEnum.class);enums.put(LowerCaseEnum.C,""value"");assertEquals(""{\""c\"":\""value\""}"",m.writeValueAsString(enums));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testMapWithEnumKeys",0,"public void testMapWithEnumKeys()throws Exception {MapBean bean=new MapBean();bean.add(TestEnum.B,3);String json=MAPPER.writeValueAsString(bean);assertEquals(""{\""map\"":{\""B\"":3}}"",json);json=MAPPER.writer().with(SerializationFeature.WRITE_ENUMS_USING_TO_STRING).writeValueAsString(bean);assertEquals(""{\""map\"":{\""b\"":3}}"",json);json=MAPPER.writer().with(SerializationFeature.WRITE_ENUMS_USING_INDEX).writeValueAsString(bean);assertEquals(aposToQuotes(""{'map':{'"" + TestEnum.B.ordinal()+ ""':3}}""),json);}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testAsIndex",0,"public void testAsIndex()throws Exception {ObjectMapper m=new ObjectMapper();assertFalse(m.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX));assertEquals(quote(""B""),m.writeValueAsString(TestEnum.B));m.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);assertEquals(""1"",m.writeValueAsString(TestEnum.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testAnnotationsOnEnumCtor",0,"public void testAnnotationsOnEnumCtor()throws Exception {assertEquals(quote(""V1""),MAPPER.writeValueAsString(OK.V1));assertEquals(quote(""V1""),MAPPER.writeValueAsString(NOT_OK.V1));assertEquals(quote(""V2""),MAPPER.writeValueAsString(NOT_OK2.V2));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testGenericEnumSerializer",0,"public void testGenericEnumSerializer()throws Exception {ObjectMapper m=new ObjectMapper();SimpleModule module=new SimpleModule(""foobar"");module.addSerializer(Enum.class,new LowerCasingEnumSerializer());m.registerModule(module);assertEquals(quote(""b""),m.writeValueAsString(TestEnum.B));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testJsonValueForEnumMapKey",0,"public void testJsonValueForEnumMapKey()throws Exception {assertEquals(aposToQuotes(""{'stuff':{'longValue':'foo'}}""),MAPPER.writeValueAsString(new MyStuff594(""foo"")));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testCustomEnumMapKeySerializer",0,"public void testCustomEnumMapKeySerializer()throws Exception {String json=MAPPER.writeValueAsString(new MyBean661(""abc""));assertEquals(aposToQuotes(""{'X-FOO':'abc'}""),json);}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumMapSerDefault",0,"public void testEnumMapSerDefault()throws Exception {final ObjectMapper mapper=new ObjectMapper();EnumMap<LC749Enum,String> m=new EnumMap<LC749Enum,String>(LC749Enum.class);m.put(LC749Enum.A,""value"");assertEquals(""{\""A\"":\""value\""}"",mapper.writeValueAsString(m));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumMapSerDisableToString",0,"public void testEnumMapSerDisableToString()throws Exception {final ObjectMapper mapper=new ObjectMapper();ObjectWriter w=mapper.writer().without(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);EnumMap<LC749Enum,String> m=new EnumMap<LC749Enum,String>(LC749Enum.class);m.put(LC749Enum.A,""value"");assertEquals(""{\""A\"":\""value\""}"",w.writeValueAsString(m));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumMapSerEnableToString",0,"public void testEnumMapSerEnableToString()throws Exception {final ObjectMapper mapper=new ObjectMapper();ObjectWriter w=mapper.writer().with(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);EnumMap<LC749Enum,String> m=new EnumMap<LC749Enum,String>(LC749Enum.class);m.put(LC749Enum.A,""value"");assertEquals(""{\""a\"":\""value\""}"",w.writeValueAsString(m));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumsWithJsonProperty",0,"public void testEnumsWithJsonProperty()throws Exception {assertEquals(quote(""aleph""),MAPPER.writeValueAsString(EnumWithJsonProperty.A));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumKeysWithJsonProperty",0,"public void testEnumKeysWithJsonProperty()throws Exception {Map<EnumWithJsonProperty,Integer> input=new HashMap<EnumWithJsonProperty,Integer>();input.put(EnumWithJsonProperty.A,13);assertEquals(aposToQuotes(""{'aleph':13}""),MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumsWithJsonPropertyInSet",0,"public void testEnumsWithJsonPropertyInSet()throws Exception {assertEquals(""[\""aleph\""]"",MAPPER.writeValueAsString(EnumSet.of(EnumWithJsonProperty.A)));}"
"com.fasterxml.jackson.databind.ser.TestEnumSerialization.testEnumsWithJsonPropertyAsKey",0,"public void testEnumsWithJsonPropertyAsKey()throws Exception {EnumMap<EnumWithJsonProperty,String> input=new EnumMap<EnumWithJsonProperty,String>(EnumWithJsonProperty.class);input.put(EnumWithJsonProperty.A,""b"");assertEquals(""{\""aleph\"":\""b\""}"",MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.creators.DisablingCreatorsTest.testDisabling",0,"public void testDisabling()throws Exception {final ObjectMapper mapper=objectMapper();NonConflictingCreators value=mapper.readValue(quote(""abc""),NonConflictingCreators.class);assertNotNull(value);assertEquals(""abc"",value._value);try {mapper.readValue(quote(""abc""),ConflictingCreators.class);fail(""Should have failed with JsonCreator conflict"");}catch(JsonProcessingException e){verifyException(e,""Conflicting property-based creators"");}}"
"com.fasterxml.jackson.databind.creators.DisablingCreatorsTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsGenericTest.testNullsToEmptyPojo",0,"public void testNullsToEmptyPojo()throws Exception {GeneralEmpty<Point> result=MAPPER.readValue(aposToQuotes(""{'value':null}""),new TypeReference<GeneralEmpty<Point>>(){});assertNotNull(result.value);Point p=result.value;assertEquals(0,p.x);assertEquals(0,p.y);try {MAPPER.readValue(aposToQuotes(""{'value':null}""),NoCtorWrapper.class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not create empty instance"");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsGenericTest.testNullsToEmptyCollection",0,"public void testNullsToEmptyCollection()throws Exception {GeneralEmpty<List<String>> result=MAPPER.readValue(aposToQuotes(""{'value':null}""),new TypeReference<GeneralEmpty<List<String>>>(){});assertNotNull(result.value);assertEquals(0,result.value.size());GeneralEmpty<List<Integer>> result2=MAPPER.readValue(aposToQuotes(""{'value':null}""),new TypeReference<GeneralEmpty<List<Integer>>>(){});assertNotNull(result2.value);assertEquals(0,result2.value.size());}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsGenericTest.testNullsToEmptyMap",0,"public void testNullsToEmptyMap()throws Exception {GeneralEmpty<Map<String,String>> result=MAPPER.readValue(aposToQuotes(""{'value':null}""),new TypeReference<GeneralEmpty<Map<String,String>>>(){});assertNotNull(result.value);assertEquals(0,result.value.size());}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsGenericTest.testNullsToEmptyArrays",0,"public void testNullsToEmptyArrays()throws Exception {final String json=aposToQuotes(""{'value':null}"");GeneralEmpty<Object[]> result=MAPPER.readValue(json,new TypeReference<GeneralEmpty<Object[]>>(){});assertNotNull(result.value);assertEquals(0,result.value.length);GeneralEmpty<String[]> result2=MAPPER.readValue(json,new TypeReference<GeneralEmpty<String[]>>(){});assertNotNull(result2.value);assertEquals(0,result2.value.length);GeneralEmpty<int[]> result3=MAPPER.readValue(json,new TypeReference<GeneralEmpty<int[]>>(){});assertNotNull(result3.value);assertEquals(0,result3.value.length);GeneralEmpty<double[]> result4=MAPPER.readValue(json,new TypeReference<GeneralEmpty<double[]>>(){});assertNotNull(result4.value);assertEquals(0,result4.value.length);GeneralEmpty<boolean[]> result5=MAPPER.readValue(json,new TypeReference<GeneralEmpty<boolean[]>>(){});assertNotNull(result5.value);assertEquals(0,result5.value.length);}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsGenericTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testUntypedList",0,"public void testUntypedList()throws Exception {String JSON=""[\""text!\"",true,null,23 ]"";Object value=MAPPER.readValue(JSON,Object.class);assertNotNull(value);assertTrue(value instanceof ArrayList<?>);List<?> result=(List<?>)value;assertEquals(4,result.size());assertEquals(""text!"",result.get(0));assertEquals(Boolean.TRUE,result.get(1));assertNull(result.get(2));assertEquals(Integer.valueOf(23),result.get(3));}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testExactStringCollection",0,"public void testExactStringCollection()throws Exception {String JSON=""[\""a\"",\""b\"" ]"";List<String> result=MAPPER.readValue(JSON,new TypeReference<ArrayList<String>>(){});assertNotNull(result);assertEquals(ArrayList.class,result.getClass());assertEquals(2,result.size());assertEquals(""a"",result.get(0));assertEquals(""b"",result.get(1));}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testHashSet",0,"public void testHashSet()throws Exception {String JSON=""[\""KEY1\"",\""KEY2\"" ]"";EnumSet<Key> result=MAPPER.readValue(JSON,new TypeReference<EnumSet<Key>>(){});assertNotNull(result);assertTrue(EnumSet.class.isAssignableFrom(result.getClass()));assertEquals(2,result.size());assertTrue(result.contains(Key.KEY1));assertTrue(result.contains(Key.KEY2));assertFalse(result.contains(Key.WHATEVER));}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testCustomDeserializer",0,"public void testCustomDeserializer()throws IOException {CustomList result=MAPPER.readValue(quote(""abc""),CustomList.class);assertEquals(1,result.size());assertEquals(""abc"",result.get(0));}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testImplicitArrays",0,"@SuppressWarnings(""unchecked"")public void testImplicitArrays()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,true);List<Integer> ints=mapper.readValue(""4"",List.class);assertEquals(1,ints.size());assertEquals(Integer.valueOf(4),ints.get(0));List<String> strings=mapper.readValue(quote(""abc""),new TypeReference<ArrayList<String>>(){});assertEquals(1,strings.size());assertEquals(""abc"",strings.get(0));int[]intArray=mapper.readValue(""-7"",int[].class);assertEquals(1,intArray.length);assertEquals(-7,intArray[0]);String[]stringArray=mapper.readValue(quote(""xyz""),String[].class);assertEquals(1,stringArray.length);assertEquals(""xyz"",stringArray[0]);List<XBean> xbeanList=mapper.readValue(""{\""x\"":4}"",new TypeReference<List<XBean>>(){});assertEquals(1,xbeanList.size());assertEquals(XBean.class,xbeanList.get(0).getClass());Object ob=mapper.readValue(""{\""x\"":29}"",XBean[].class);XBean[]xbeanArray=(XBean[])ob;assertEquals(1,xbeanArray.length);assertEquals(XBean.class,xbeanArray[0].getClass());}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testFromEmptyString",0,"public void testFromEmptyString()throws Exception {ObjectReader r=MAPPER.reader(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);List<?> result=r.forType(List.class).readValue(quote(""""));assertNull(result);}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testArrayBlockingQueue",0,"public void testArrayBlockingQueue()throws Exception {ArrayBlockingQueue<?> q=MAPPER.readValue(""[1,2,3]"",ArrayBlockingQueue.class);assertNotNull(q);assertEquals(3,q.size());assertEquals(Integer.valueOf(1),q.take());assertEquals(Integer.valueOf(2),q.take());assertEquals(Integer.valueOf(3),q.take());}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testIterableWithStrings",0,"public void testIterableWithStrings()throws Exception {String JSON=""{\""values\"":[\""a\"",\""b\""]}"";ListAsIterable w=MAPPER.readValue(JSON,ListAsIterable.class);assertNotNull(w);assertNotNull(w.values);Iterator<String> it=w.values.iterator();assertTrue(it.hasNext());assertEquals(""a"",it.next());assertEquals(""b"",it.next());assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testIterableWithBeans",0,"public void testIterableWithBeans()throws Exception {String JSON=""{\""nums\"":[{\""x\"":1},{\""x\"":2}]}"";ListAsIterableX w=MAPPER.readValue(JSON,ListAsIterableX.class);assertNotNull(w);assertNotNull(w.nums);Iterator<XBean> it=w.nums.iterator();assertTrue(it.hasNext());XBean xb=it.next();assertNotNull(xb);assertEquals(1,xb.x);xb=it.next();assertEquals(2,xb.x);assertFalse(it.hasNext());}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testArrayIndexForExceptions",0,"public void testArrayIndexForExceptions()throws Exception {final String OBJECTS_JSON=""[\""KEY2\"",false ]"";try {MAPPER.readValue(OBJECTS_JSON,Key[].class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not deserialize"");List<JsonMappingException.Reference> refs=e.getPath();assertEquals(1,refs.size());assertEquals(1,refs.get(0).getIndex());}try {MAPPER.readValue(""[\""xyz\"",{}]"",String[].class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not deserialize"");List<JsonMappingException.Reference> refs=e.getPath();assertEquals(1,refs.size());assertEquals(1,refs.get(0).getIndex());}try {MAPPER.readValue(""{\""keys\"":"" + OBJECTS_JSON + ""}"",KeyListBean.class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Can not deserialize"");List<JsonMappingException.Reference> refs=e.getPath();assertEquals(2,refs.size());assertEquals(-1,refs.get(0).getIndex());assertEquals(""keys"",refs.get(0).getFieldName());assertEquals(1,refs.get(1).getIndex());assertNull(refs.get(1).getFieldName());}}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testWrapExceptions",0,"public void testWrapExceptions()throws Exception {}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.testSingletonCollections",0,"public void testSingletonCollections()throws Exception {final TypeReference<?> xbeanListType=new TypeReference<List<XBean>>(){};String json=MAPPER.writeValueAsString(Collections.singleton(new XBean(3)));Collection<XBean> result=MAPPER.readValue(json,xbeanListType);assertNotNull(result);assertEquals(1,result.size());assertEquals(3,result.iterator().next().x);json=MAPPER.writeValueAsString(Collections.singletonList(new XBean(28)));result=MAPPER.readValue(json,xbeanListType);assertNotNull(result);assertEquals(1,result.size());assertEquals(28,result.iterator().next().x);}"
"com.fasterxml.jackson.databind.deser.TestCollectionDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testSimpleSerializationClass",0,"public void testSimpleSerializationClass()throws Exception {Identifiable src=new Identifiable(13);src.next=src;String json=MAPPER.writeValueAsString(src);assertEquals(EXP_SIMPLE_INT_CLASS,json);json=MAPPER.writeValueAsString(src);assertEquals(EXP_SIMPLE_INT_CLASS,json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testSimpleSerializationProperty",0,"public void testSimpleSerializationProperty()throws Exception {IdWrapper src=new IdWrapper(7);src.node.next=src;String json=MAPPER.writeValueAsString(src);assertEquals(EXP_SIMPLE_INT_PROP,json);json=MAPPER.writeValueAsString(src);assertEquals(EXP_SIMPLE_INT_PROP,json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testEmptyObjectWithId",0,"public void testEmptyObjectWithId()throws Exception {final ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new EmptyObject());assertEquals(aposToQuotes(""{'@id':1}""),json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testSerializeWithOpaqueStringId",0,"public void testSerializeWithOpaqueStringId()throws Exception {StringIdentifiable ob1=new StringIdentifiable(12);StringIdentifiable ob2=new StringIdentifiable(34);ob1.next=ob2;ob2.next=ob1;String json=MAPPER.writeValueAsString(ob1);assertNotNull(json);StringIdentifiable output=MAPPER.readValue(json,StringIdentifiable.class);assertNotNull(output);assertEquals(12,output.value);assertNotNull(output.next);assertEquals(34,output.next.value);assertSame(output.next.next,output);String json2=aposToQuotes(""{'id':'foobar','value':3,'next':{'id':'barf','value':5,'next':'foobar'}}"");output=MAPPER.readValue(json2,StringIdentifiable.class);assertNotNull(output);assertEquals(3,output.value);assertNotNull(output.next);assertEquals(5,output.next.value);assertSame(output.next.next,output);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testCustomPropertyForClass",0,"public void testCustomPropertyForClass()throws Exception {IdentifiableWithProp src=new IdentifiableWithProp(123,-19);src.next=src;String json=MAPPER.writeValueAsString(src);assertEquals(EXP_CUSTOM_PROP,json);json=MAPPER.writeValueAsString(src);assertEquals(EXP_CUSTOM_PROP,json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testCustomPropertyViaProperty",0,"public void testCustomPropertyViaProperty()throws Exception {IdWrapperCustom src=new IdWrapperCustom(123,7);src.node.next=src;String json=MAPPER.writeValueAsString(src);assertEquals(EXP_CUSTOM_PROP_VIA_REF,json);json=MAPPER.writeValueAsString(src);assertEquals(EXP_CUSTOM_PROP_VIA_REF,json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testAlwaysAsId",0,"public void testAlwaysAsId()throws Exception {String json=MAPPER.writeValueAsString(new AlwaysContainer());assertEquals(""{\""a\"":1,\""b\"":2}"",json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testAlwaysIdForTree",0,"public void testAlwaysIdForTree()throws Exception {TreeNode root=new TreeNode(null,1,""root"");TreeNode leaf=new TreeNode(root,2,""leaf"");root.child=leaf;String json=MAPPER.writeValueAsString(root);assertEquals(""{\""id\"":1,\""name\"":\""root\"",\""parent\"":null,\""child\"":"" + ""{\""id\"":2,\""name\"":\""leaf\"",\""parent\"":1,\""child\"":null}}"",json);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testNullStringPropertyId",0,"public void testNullStringPropertyId()throws Exception {IdentifiableStringId value=MAPPER.readValue(aposToQuotes(""{'value':3,'next':null,'id':null}""),IdentifiableStringId.class);assertNotNull(value);assertEquals(3,value.value);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.testInvalidProp",0,"public void testInvalidProp()throws Exception {try {MAPPER.writeValueAsString(new Broken());fail(""Should have thrown an exception"");}catch(JsonMappingException e){verifyException(e,""can not find property with name 'id'"");}}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testSimpleNumberBean",0,"public void testSimpleNumberBean()throws Exception {ObjectMapper mapper=new ObjectMapper();NumberBean result=mapper.readValue(""{\""number\"":17}"",NumberBean.class);assertEquals(17,result._number);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testGenericWrapper",0,"/** * Unit test for verifying fix to [JACKSON-109].*/public void testGenericWrapper()throws Exception {ObjectMapper mapper=new ObjectMapper();Wrapper<SimpleBean> result=mapper.readValue(""{\""value\"":{\""x\"" : 13}}"",new TypeReference<Wrapper<SimpleBean>>(){});assertNotNull(result);assertEquals(Wrapper.class,result.getClass());Object contents=result.value;assertNotNull(contents);assertEquals(SimpleBean.class,contents.getClass());SimpleBean bean=(SimpleBean)contents;assertEquals(13,bean.x);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testGenericWrapperWithSingleElementArray",0,"public void testGenericWrapperWithSingleElementArray()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);Wrapper<SimpleBean> result=mapper.readValue(""[{\""value\"": [{\""x\"" : 13 }]}]"",new TypeReference<Wrapper<SimpleBean>>(){});assertNotNull(result);assertEquals(Wrapper.class,result.getClass());Object contents=result.value;assertNotNull(contents);assertEquals(SimpleBean.class,contents.getClass());SimpleBean bean=(SimpleBean)contents;assertEquals(13,bean.x);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testMultipleWrappers",0,"/** * Unit test for verifying that we can use different type bindings for individual generic types;problem with [JACKSON-190]*/public void testMultipleWrappers()throws Exception {ObjectMapper mapper=new ObjectMapper();Wrapper<Boolean> result=mapper.readValue(""{\""value\"": true}"",new TypeReference<Wrapper<Boolean>>(){});assertEquals(new Wrapper<Boolean>(Boolean.TRUE),result);Wrapper<String> result2=mapper.readValue(""{\""value\"": \""abc\""}"",new TypeReference<Wrapper<String>>(){});assertEquals(new Wrapper<String>(""abc""),result2);Wrapper<Long> result3=mapper.readValue(""{\""value\"": 7}"",new TypeReference<Wrapper<Long>>(){});assertEquals(new Wrapper<Long>(7L),result3);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testMultipleWrappersSingleValueArray",0,"public void testMultipleWrappersSingleValueArray()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);Wrapper<Boolean> result=mapper.readValue(""[{\""value\"": [true]}]"",new TypeReference<Wrapper<Boolean>>(){});assertEquals(new Wrapper<Boolean>(Boolean.TRUE),result);Wrapper<String> result2=mapper.readValue(""[{\""value\"": [\""abc\""]}]"",new TypeReference<Wrapper<String>>(){});assertEquals(new Wrapper<String>(""abc""),result2);Wrapper<Long> result3=mapper.readValue(""[{\""value\"": [7]}]"",new TypeReference<Wrapper<Long>>(){});assertEquals(new Wrapper<Long>(7L),result3);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testArrayOfGenericWrappers",0,"/** * Unit test for verifying fix to [JACKSON-109].*/public void testArrayOfGenericWrappers()throws Exception {ObjectMapper mapper=new ObjectMapper();Wrapper<SimpleBean>[]result=mapper.readValue(""[{\""value\"":{\""x\"" : 9}}]"",new TypeReference<Wrapper<SimpleBean>[]>(){});assertNotNull(result);assertEquals(Wrapper[].class,result.getClass());assertEquals(1,result.length);Wrapper<SimpleBean> elem=result[0];Object contents=elem.value;assertNotNull(contents);assertEquals(SimpleBean.class,contents.getClass());SimpleBean bean=(SimpleBean)contents;assertEquals(9,bean.x);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.testArrayOfGenericWrappersSingleValueArray",0,"public void testArrayOfGenericWrappersSingleValueArray()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);Wrapper<SimpleBean>[]result=mapper.readValue(""[{\""value\"": [{\""x\"" :[9 ]}]}]"",new TypeReference<Wrapper<SimpleBean>[]>(){});assertNotNull(result);assertEquals(Wrapper[].class,result.getClass());assertEquals(1,result.length);Wrapper<SimpleBean> elem=result[0];Object contents=elem.value;assertNotNull(contents);assertEquals(SimpleBean.class,contents.getClass());SimpleBean bean=(SimpleBean)contents;assertEquals(9,bean.x);}"
"com.fasterxml.jackson.databind.deser.TestGenerics.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.NameTransformerTest.testSimpleTransformer",0,"public void testSimpleTransformer()throws Exception {NameTransformer xfer;xfer=NameTransformer.simpleTransformer(""a"",null);assertEquals(""aFoo"",xfer.transform(""Foo""));assertEquals(""Foo"",xfer.reverse(""aFoo""));xfer=NameTransformer.simpleTransformer(null,""++"");assertEquals(""foo++"",xfer.transform(""foo""));assertEquals(""foo"",xfer.reverse(""foo++""));xfer=NameTransformer.simpleTransformer(""("","")"");assertEquals(""(foo)"",xfer.transform(""foo""));assertEquals(""foo"",xfer.reverse(""(foo)""));}"
"com.fasterxml.jackson.databind.util.NameTransformerTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDateNumeric",0,"public void testDateNumeric()throws IOException {assertTrue(MAPPER.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS));String json=MAPPER.writeValueAsString(new Date(199L));assertEquals(""199"",json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDateISO8601",0,"public void testDateISO8601()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false);String json=mapper.writeValueAsString(new Date(0L));assertEquals(""\""1970-01-01T00:00:00.000+0000\"""",json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDateOther",0,"public void testDateOther()throws IOException {ObjectMapper mapper=new ObjectMapper();DateFormat df=new SimpleDateFormat(""yyyy-MM-dd'X'HH:mm:ss"");mapper.setDateFormat(df);mapper.setTimeZone(TimeZone.getTimeZone(""PST""));assertEquals(quote(""1969-12-31X16:00:00""),mapper.writeValueAsString(new Date(0L)));}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testTimeZone",0,"public void testTimeZone()throws IOException {TimeZone input=TimeZone.getTimeZone(""PST"");String json=MAPPER.writeValueAsString(input);assertEquals(quote(""PST""),json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testTimeZoneInBean",0,"public void testTimeZoneInBean()throws IOException {String json=MAPPER.writeValueAsString(new TimeZoneBean(""PST""));assertEquals(""{\""tz\"":\""PST\""}"",json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDateUsingObjectWriter",0,"public void testDateUsingObjectWriter()throws IOException {DateFormat df=new SimpleDateFormat(""yyyy-MM-dd'X'HH:mm:ss"");TimeZone tz=TimeZone.getTimeZone(""PST"");assertEquals(quote(""1969-12-31X16:00:00""),MAPPER.writer(df).with(tz).writeValueAsString(new Date(0L)));ObjectWriter w=MAPPER.writer((DateFormat)null);assertEquals(""0"",w.writeValueAsString(new Date(0L)));w=w.with(df).with(tz);assertEquals(quote(""1969-12-31X16:00:00""),w.writeValueAsString(new Date(0L)));w=w.with((DateFormat)null);assertEquals(""0"",w.writeValueAsString(new Date(0L)));}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDatesAsMapKeys",0,"public void testDatesAsMapKeys()throws IOException {ObjectMapper mapper=new ObjectMapper();Map<Date,Integer> map=new HashMap<Date,Integer>();assertFalse(mapper.isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS));map.put(new Date(0L),Integer.valueOf(1));assertEquals(""{\""1970-01-01T00:00:00.000+0000\"":1}"",mapper.writeValueAsString(map));mapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,true);assertEquals(""{\""0\"":1}"",mapper.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDateWithJsonFormat",0,"public void testDateWithJsonFormat()throws Exception {ObjectMapper mapper=new ObjectMapper();String json;mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsNumberBean(0L));assertEquals(aposToQuotes(""{'date':0}""),json);mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L));assertEquals(""{\""date\"":\""1970-01-01\""}"",json);json=mapper.writeValueAsString(new DateInCETBean(0L));assertEquals(""{\""date\"":\""1970-01-01,01:00\""}"",json);json=mapper.writer().with(getUTCTimeZone()).writeValueAsString(new CalendarAsStringBean(0L));assertEquals(""{\""value\"":\""1970-01-01\""}"",json);json=mapper.writeValueAsString(new DateAsDefaultStringBean(0L));assertEquals(""{\""date\"":\""1970-01-01T00:00:00.000+0000\""}"",json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testWithTimeZoneOverride",0,"/** * Test to ensure that setting a TimeZone _after_ dateformat should enforce that timezone on format,regardless of TimeZone format had.*/public void testWithTimeZoneOverride()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setDateFormat(new SimpleDateFormat(""yyyy-MM-dd/HH:mm z""));mapper.setTimeZone(TimeZone.getTimeZone(""PST""));mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);String json=mapper.writeValueAsString(new Date(0));assertEquals(quote(""1969-12-31/16:00 PST""),json);mapper.setLocale(Locale.FRANCE);json=mapper.writeValueAsString(new Date(0));assertEquals(quote(""1969-12-31/16:00 PST""),json);ObjectWriter w=mapper.writer();w=w.with(TimeZone.getTimeZone(""EST""));json=w.writeValueAsString(new Date(0));assertEquals(quote(""1969-12-31/19:00 EST""),json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.testDateDefaultShape",0,"/** * Test to ensure that the default shape is correctly inferred as string or numeric,when this shape is not explicitly set with a <code>@JsonFormat</code> annotation*/public void testDateDefaultShape()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);String json=mapper.writeValueAsString(new DateAsDefaultBean(0L));assertEquals(aposToQuotes(""{'date':0}""),json);mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBean(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""),json);mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));assertEquals(aposToQuotes(""{'date':0}""),json);mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""),json);mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01'}""),json);mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01'}""),json);mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""),json);mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""),json);mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01T01:00:00.000+0100'}""),json);mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);json=mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));assertEquals(aposToQuotes(""{'date':'1970-01-01T01:00:00.000+0100'}""),json);}"
"com.fasterxml.jackson.databind.ser.jdk.DateSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.ReadOnlyProperties95Test.testReadOnlyProp",0,"public void testReadOnlyProp()throws Exception {ObjectMapper m=new ObjectMapper();String json=m.writeValueAsString(new ReadOnlyBean());if (json.indexOf(""computed"")< 0){fail(""Should have property 'computed',didn't: "" + json);}ReadOnlyBean bean=m.readValue(json,ReadOnlyBean.class);assertNotNull(bean);}"
"com.fasterxml.jackson.databind.ser.filter.ReadOnlyProperties95Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testExceptionFromConstructor",0,"public void testExceptionFromConstructor()throws Exception {try {MAPPER.readValue(""{}"",BustedCtor.class);fail(""Expected exception"");}catch(JsonMappingException e){verifyException(e,"": foobar"");Throwable t=e.getCause();if (t == null){fail(""Should have assigned cause for: ("" + e.getClass().getSimpleName()+ "")""+ e);}assertNotNull(t);assertEquals(IllegalArgumentException.class,t.getClass());assertEquals(""foobar"",t.getMessage());}}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testSimpleConstructor",0,"public void testSimpleConstructor()throws Exception {HashTest test=MAPPER.readValue(""{\""type\"":\""custom\"",\""bytes\"":\""abc\"" }"",HashTest.class);assertEquals(""custom"",test.type);assertEquals(""abc"",new String(test.bytes,""UTF-8""));}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testMissingPrimitives",0,"public void testMissingPrimitives()throws Exception {Primitives p=MAPPER.readValue(""{}"",Primitives.class);assertFalse(p.b);assertEquals(0,p.x);assertEquals(0.0,p.d);}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testJackson431",0,"public void testJackson431()throws Exception {final Test431Container foo=MAPPER.readValue(""{\""items\"":\n"" + ""[{\""bar\"": 0,\n"" + ""\""id\"": \""id123\"",\n""+ ""\""foo\"": 1\n""+ ""}]}"",Test431Container.class);assertNotNull(foo);}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testJackson438",0,"public void testJackson438()throws Exception {Exception e=null;try {MAPPER.readValue(""{\""name\"":\""foobar\"" }"",BeanFor438.class);fail(""Should have failed"");}catch(Exception e0){e=e0;}if (!(e instanceof JsonMappingException)){fail(""Should have received JsonMappingException,caught "" + e.getClass().getName());}verifyException(e,""don't like that name"");Throwable t=e.getCause();if (t == null){fail(""Should have assigned cause for: ("" + e.getClass().getSimpleName()+ "")""+ e);}assertEquals(IllegalArgumentException.class,t.getClass());verifyException(e,""don't like that name"");}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testCreatorWithDupNames",0,"public void testCreatorWithDupNames()throws Exception {try {MAPPER.readValue(""{\""bar\"":\""x\""}"",BrokenCreatorBean.class);fail(""Should have caught duplicate creator parameters"");}catch(JsonMappingException e){verifyException(e,""duplicate creator property \""bar\"""");}}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testCreatorMultipleArgumentWithoutAnnotation",0,"public void testCreatorMultipleArgumentWithoutAnnotation()throws Exception {AutoDetectConstructorBean value=MAPPER.readValue(""{\""bar\"":\""bar\"",\""foo\"":\""foo\""}"",AutoDetectConstructorBean.class);assertEquals(""bar"",value.bar);assertEquals(""foo"",value.foo);}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testIgnoredSingleArgCtor",0,"public void testIgnoredSingleArgCtor()throws Exception {try {MAPPER.readValue(quote(""abc""),IgnoredCtor.class);fail(""Should have caught missing constructor problem"");}catch(JsonMappingException e){verifyException(e,""no String-argument constructor/factory method"");}}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testAbstractFactory",0,"public void testAbstractFactory()throws Exception {AbstractBase bean=MAPPER.readValue(""{\""a\"":3}"",AbstractBase.class);assertNotNull(bean);AbstractBaseImpl impl=(AbstractBaseImpl)bean;assertEquals(1,impl.props.size());assertEquals(Integer.valueOf(3),impl.props.get(""a""));}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testCreatorProperties",0,"public void testCreatorProperties()throws Exception {Issue700Bean value=MAPPER.readValue(""{\""item\"" : \""foo\"" }"",Issue700Bean.class);assertNotNull(value);}"
"com.fasterxml.jackson.databind.creators.TestCreators2.testConstructorChoice",0,"public void testConstructorChoice()throws Exception {ObjectMapper mapper=new ObjectMapper();MultiPropCreator1476 pojo=mapper.readValue(""{\""intField\"": 1,\""stringField\"": \""foo\"" }"",MultiPropCreator1476.class);assertEquals(1,pojo.getIntField());assertEquals(""foo"",pojo.getStringField());}"
"com.fasterxml.jackson.databind.creators.TestCreators2.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.UnwrappedWithView1559Test.testCanSerializeSimpleWithDefaultView",0,"public void testCanSerializeSimpleWithDefaultView()throws Exception {String json=new ObjectMapper().configure(MapperFeature.DEFAULT_VIEW_INCLUSION,false).writeValueAsString(new Health());assertEquals(aposToQuotes(""{}""),json);json=new ObjectMapper().configure(MapperFeature.DEFAULT_VIEW_INCLUSION,true).writeValueAsString(new Health());assertEquals(aposToQuotes(""{}""),json);}"
"com.fasterxml.jackson.databind.struct.UnwrappedWithView1559Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.CompactStringObjectMapTest.testBig",0,"public void testBig(){Map<String,String> all=new LinkedHashMap<>();for (int i=0;i < 1000;++i){String key=""key"" + i;all.put(key,key);}CompactStringObjectMap map=CompactStringObjectMap.construct(all);assertEquals(1000,map.keys().size());for(String key : all.keySet()){assertEquals(key,map.find(key));}assertNull(map.find(""key1000""));assertNull(map.find(""keyXXX""));assertNull(map.find(""""));}"
"com.fasterxml.jackson.databind.util.CompactStringObjectMapTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestTreeSerialization.testSimpleViaObjectMapper",0,"@SuppressWarnings(""unchecked"")public void testSimpleViaObjectMapper()throws IOException {ObjectMapper mapper=new ObjectMapper();ObjectNode n=mapper.getNodeFactory().objectNode();n.put(""number"",15);n.put(""string"",""abc"");ObjectNode n2=n.putObject(""ob"");n2.putArray(""arr"");StringWriter sw=new StringWriter();JsonGenerator jg=mapper.getFactory().createGenerator(sw);mapper.writeTree(jg,n);Map<String,Object> result=(Map<String,Object>)mapper.readValue(sw.toString(),Map.class);assertEquals(3,result.size());assertEquals(""abc"",result.get(""string""));assertEquals(Integer.valueOf(15),result.get(""number""));Map<String,Object> ob=(Map<String,Object>)result.get(""ob"");assertEquals(1,ob.size());List<Object> list=(List<Object>)ob.get(""arr"");assertEquals(0,list.size());jg.close();}"
"com.fasterxml.jackson.databind.ser.TestTreeSerialization.testPOJOString",0,"/** * Simple test to verify that POJONodes (JsonNode wrapper around any old Java object)work with serialization*/@SuppressWarnings(""unchecked"")public void testPOJOString()throws Exception {ObjectMapper mapper=new ObjectMapper();ObjectNode n=mapper.getNodeFactory().objectNode();n.set(""pojo"",mapper.getNodeFactory().pojoNode(""abc""));StringWriter sw=new StringWriter();JsonGenerator jg=mapper.getFactory().createGenerator(sw);mapper.writeTree(jg,n);Map<String,Object> result=(Map<String,Object>)mapper.readValue(sw.toString(),Map.class);assertEquals(1,result.size());assertEquals(""abc"",result.get(""pojo""));jg.close();}"
"com.fasterxml.jackson.databind.ser.TestTreeSerialization.testPOJOIntArray",0,"@SuppressWarnings(""unchecked"")public void testPOJOIntArray()throws IOException {ObjectMapper mapper=new ObjectMapper();ObjectNode n=mapper.getNodeFactory().objectNode();n.set(""pojo"",mapper.getNodeFactory().pojoNode(new int[]{1,2,3}));StringWriter sw=new StringWriter();JsonGenerator jg=mapper.getFactory().createGenerator(sw);mapper.writeTree(jg,n);Map<String,Object> result=(Map<String,Object>)mapper.readValue(sw.toString(),Map.class);assertEquals(1,result.size());List<Object> list=(List<Object>)result.get(""pojo"");assertEquals(3,list.size());for (int i=0;i < 3;++i){assertEquals(Integer.valueOf(i + 1),list.get(i));}jg.close();}"
"com.fasterxml.jackson.databind.ser.TestTreeSerialization.testPOJOBean",0,"@SuppressWarnings(""unchecked"")public void testPOJOBean()throws IOException {ObjectMapper mapper=new ObjectMapper();ObjectNode n=mapper.getNodeFactory().objectNode();n.set(""pojo"",mapper.getNodeFactory().pojoNode(new Bean()));StringWriter sw=new StringWriter();JsonGenerator jg=mapper.getFactory().createGenerator(sw);mapper.writeTree(jg,n);Map<String,Object> result=(Map<String,Object>)mapper.readValue(sw.toString(),Map.class);assertEquals(1,result.size());Map<String,Object> bean=(Map<String,Object>)result.get(""pojo"");assertEquals(2,bean.size());assertEquals(""y"",bean.get(""x""));assertEquals(Integer.valueOf(13),bean.get(""y""));jg.close();}"
"com.fasterxml.jackson.databind.ser.TestTreeSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.interop.TestFormatDetection.testSimpleWithJSON",0,"public void testSimpleWithJSON()throws Exception {ObjectReader detecting=READER.forType(POJO.class);detecting=detecting.withFormatDetection(detecting);POJO pojo=detecting.readValue(utf8Bytes(""{\""x\"":1}""));assertNotNull(pojo);assertEquals(1,pojo.x);}"
"com.fasterxml.jackson.databind.interop.TestFormatDetection.testSequenceWithJSON",0,"public void testSequenceWithJSON()throws Exception {ObjectReader detecting=READER.forType(POJO.class);detecting=detecting.withFormatDetection(detecting);MappingIterator<POJO> it=detecting.readValues(utf8Bytes(aposToQuotes(""{'x':1}\n{'x':2,'y':5}"")));assertTrue(it.hasNextValue());POJO pojo=it.nextValue();assertEquals(1,pojo.x);assertTrue(it.hasNextValue());pojo=it.nextValue();assertEquals(2,pojo.x);assertEquals(5,pojo.y);assertFalse(it.hasNextValue());it.close();ObjectReader r2=READER.forType(JsonNode.class);r2=r2.withFormatDetection(r2);MappingIterator<JsonNode> nodes=r2.readValues(utf8Bytes(aposToQuotes(""{'x':1}\n{'x':2,'y':5}"")));assertTrue(nodes.hasNextValue());JsonNode n=nodes.nextValue();assertEquals(1,n.size());assertTrue(nodes.hasNextValue());n=nodes.nextValue();assertEquals(2,n.size());assertEquals(2,n.path(""x"").asInt());assertEquals(5,n.path(""y"").asInt());assertFalse(nodes.hasNextValue());nodes.close();}"
"com.fasterxml.jackson.databind.interop.TestFormatDetection.testInvalid",0,"public void testInvalid()throws Exception {ObjectReader detecting=READER.forType(POJO.class);detecting=detecting.withFormatDetection(detecting);try {detecting.readValue(utf8Bytes(""<POJO><x>1</x></POJO>""));fail(""Should have failed"");}catch(JsonProcessingException e){verifyException(e,""Can not detect format from input"");}}"
"com.fasterxml.jackson.databind.interop.TestFormatDetection.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestAnnotatedClass.testFieldIntrospection",0,"public void testFieldIntrospection(){SerializationConfig config=MAPPER.getSerializationConfig();JavaType t=MAPPER.constructType(FieldBean.class);AnnotatedClass ac=AnnotatedClassResolver.resolve(config,t,config);assertEquals(2,ac.getFieldCount());for(AnnotatedField f : ac.fields()){String fname=f.getName();if (!""bar"".equals(fname)&& !""props"".equals(fname)){fail(""Unexpected field name '"" + fname + ""'"");}}}"
"com.fasterxml.jackson.databind.type.TestAnnotatedClass.testConstructorIntrospection",0,"public void testConstructorIntrospection(){Bean1005 bean=new Bean1005(13);SerializationConfig config=MAPPER.getSerializationConfig();JavaType t=MAPPER.constructType(bean.getClass());AnnotatedClass ac=AnnotatedClassResolver.resolve(config,t,config);assertEquals(1,ac.getConstructors().size());}"
"com.fasterxml.jackson.databind.type.TestAnnotatedClass.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.SqlDateSerializationTest.testSqlDate",0,"@SuppressWarnings(""deprecation"")public void testSqlDate()throws IOException {final java.sql.Date date99=new java.sql.Date(99,Calendar.APRIL,1);final java.sql.Date date0=new java.sql.Date(0);assertEquals(String.valueOf(date99.getTime()),MAPPER.writeValueAsString(date99));assertEquals(aposToQuotes(""{'date':0}""),MAPPER.writeValueAsString(new SqlDateAsDefaultBean(0L)));assertEquals(aposToQuotes(""{'date':0}""),MAPPER.writeValueAsString(new SqlDateAsNumberBean(0L)));ObjectWriter w=MAPPER.writer().without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);assertEquals(quote(""1999-04-01""),w.writeValueAsString(date99));assertEquals(quote(date0.toString()),w.writeValueAsString(date0));assertEquals(aposToQuotes(""{'date':'"" + date0.toString()+ ""'}""),w.writeValueAsString(new SqlDateAsDefaultBean(0L)));}"
"com.fasterxml.jackson.databind.ser.jdk.SqlDateSerializationTest.testSqlTime",0,"public void testSqlTime()throws IOException {java.sql.Time time=new java.sql.Time(0L);assertEquals(quote(time.toString()),MAPPER.writeValueAsString(time));}"
"com.fasterxml.jackson.databind.ser.jdk.SqlDateSerializationTest.testSqlTimestamp",0,"public void testSqlTimestamp()throws IOException {java.sql.Timestamp input=new java.sql.Timestamp(0L);Date altTnput=new Date(0L);assertEquals(MAPPER.writeValueAsString(altTnput),MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.jdk.SqlDateSerializationTest.testPatternWithSqlDate",0,"public void testPatternWithSqlDate()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setTimeZone(TimeZone.getDefault());Person i=new Person();i.dateOfBirth=java.sql.Date.valueOf(""1980-04-14"");assertEquals(aposToQuotes(""{'dateOfBirth':'1980.04.14'}""),mapper.writeValueAsString(i));}"
"com.fasterxml.jackson.databind.ser.jdk.SqlDateSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.testSimpleClassAsProperty",0,"/** * First things first,let's ensure we can serialize using class name,written as main-level property name*/public void testSimpleClassAsProperty()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new Cat(""Beelzebub"",""tabby""));assertEquals(3,result.size());assertEquals(""Beelzebub"",result.get(""name""));assertEquals(""tabby"",result.get(""furColor""));String classProp=Id.CLASS.getDefaultPropertyName();assertEquals(Cat.class.getName(),result.get(classProp));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.testTypeAsWrapper",0,"/** * Test inclusion using wrapper style*/public void testTypeAsWrapper()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(Animal.class,TypeWithWrapper.class);Map<String,Object> result=writeAndMap(m,new Cat(""Venla"",""black""));assertEquals(1,result.size());Map<?,?> cat=(Map<?,?>)result.get("".TestTypedSerialization$Cat"");assertNotNull(cat);assertEquals(2,cat.size());assertEquals(""Venla"",cat.get(""name""));assertEquals(""black"",cat.get(""furColor""));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.testTypeAsArray",0,"/** * Test inclusion using 2-element array*/public void testTypeAsArray()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(Animal.class,TypeWithArray.class);Map<String,Object> result=writeAndMap(m,new AnimalWrapper(new Dog(""Amadeus"",7)));assertEquals(1,result.size());List<?> l=(List<?>)result.get(""animal"");assertNotNull(l);assertEquals(2,l.size());assertEquals(Dog.class.getName(),l.get(0));Map<?,?> doggie=(Map<?,?>)l.get(1);assertNotNull(doggie);assertEquals(2,doggie.size());assertEquals(""Amadeus"",doggie.get(""name""));assertEquals(Integer.valueOf(7),doggie.get(""boneCount""));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.testInArray",0,"@SuppressWarnings(""unchecked"")public void testInArray()throws Exception {ObjectMapper m=new ObjectMapper();m.disableDefaultTyping();Animal[]animals=new Animal[]{new Cat(""Miuku"",""white""),new Dog(""Murre"",9)};Map<String,Object> map=new HashMap<String,Object>();map.put(""a"",animals);String json=m.writeValueAsString(map);Map<String,Object> result=m.readValue(json,Map.class);assertEquals(1,result.size());Object ob=result.get(""a"");if (!(ob instanceof List<?>)){fail(""Did not map to entry with 'a' as List (but as "" + ob.getClass().getName()+ ""): JSON == '""+ json+ ""'"");}List<?> l=(List<?>)ob;assertNotNull(l);assertEquals(2,l.size());Map<?,?> a1=(Map<?,?>)l.get(0);assertEquals(3,a1.size());String classProp=Id.CLASS.getDefaultPropertyName();assertEquals(Cat.class.getName(),a1.get(classProp));Map<?,?> a2=(Map<?,?>)l.get(1);assertEquals(3,a2.size());assertEquals(Dog.class.getName(),a2.get(classProp));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.testEmptyBean",0,"/** * Simple unit test to verify that serializing ""empty"" beans is ok*/public void testEmptyBean()throws Exception {ObjectMapper m=new ObjectMapper();m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);assertEquals(""{\""@type\"":\""empty\""}"",m.writeValueAsString(new Empty()));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.testTypedMaps",0,"/** * Unit test for [JACKSON-543]*/public void testTypedMaps()throws Exception {ObjectMapper mapper=new ObjectMapper();Map<Long,Collection<Super>> map=new HashMap<Long,Collection<Super>>();List<Super> list=new ArrayList<Super>();list.add(new A());map.put(1L,list);String json=mapper.writerFor(new TypeReference<Map<Long,Collection<Super>>>(){}).writeValueAsString(map);assertTrue(""JSON does not contain '@class': "" + json,json.contains(""@class""));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.misc.CaseInsensitiveDeserTest.testCaseInsensitiveDeserialization",0,"public void testCaseInsensitiveDeserialization()throws Exception {final String JSON=""{\""Value1\"" : {\""nAme\"" : \""fruit\"",\""vALUe\"" : \""apple\""},\""valUE2\"" : {\""NAME\"" : \""color\"",\""value\"" : \""red\""}}"";ObjectMapper mapper=new ObjectMapper();assertFalse(mapper.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));try {mapper.readValue(JSON,Issue476Bean.class);fail(""Should not accept improper case properties by default"");}catch(JsonProcessingException e){verifyException(e,""Unrecognized field"");assertValidLocation(e.getLocation());}ObjectReader r=INSENSITIVE_MAPPER.readerFor(Issue476Bean.class);Issue476Bean result=r.readValue(JSON);assertEquals(result.value1.name,""fruit"");assertEquals(result.value1.value,""apple"");}"
"com.fasterxml.jackson.databind.misc.CaseInsensitiveDeserTest.testCaseInsensitive1036",0,"public void testCaseInsensitive1036()throws Exception {final String json=""{\""ErrorCode\"":2,\""DebugMessage\"":\""Signature not valid!\""}"";BaseResponse response=INSENSITIVE_MAPPER.readValue(json,BaseResponse.class);assertEquals(2,response.errorCode);assertEquals(""Signature not valid!"",response.debugMessage);}"
"com.fasterxml.jackson.databind.misc.CaseInsensitiveDeserTest.testCreatorWithInsensitive",0,"public void testCreatorWithInsensitive()throws Exception {final String json=aposToQuotes(""{'VALUE':3}"");InsensitiveCreator bean=INSENSITIVE_MAPPER.readValue(json,InsensitiveCreator.class);assertEquals(3,bean.v);}"
"com.fasterxml.jackson.databind.misc.CaseInsensitiveDeserTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.merge.MergeWithNullTest.testBeanMergingWithNullDefault",0,"public void testBeanMergingWithNullDefault()throws Exception {ConfigDefault config=MAPPER.readerForUpdating(new ConfigDefault(5,7)).readValue(aposToQuotes(""{'loc':null}""));assertNotNull(config);assertNull(config.loc);ObjectMapper mapper=newObjectMapper();mapper.configOverride(AB.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.SKIP));config=mapper.readerForUpdating(new ConfigDefault(137,-3)).readValue(aposToQuotes(""{'loc':null}""));assertNotNull(config.loc);assertEquals(137,config.loc.a);assertEquals(-3,config.loc.b);mapper=newObjectMapper();mapper.setDefaultSetterInfo(JsonSetter.Value.forValueNulls(Nulls.SKIP));config=mapper.readerForUpdating(new ConfigDefault(12,34)).readValue(aposToQuotes(""{'loc':null}""));assertNotNull(config.loc);assertEquals(12,config.loc.a);assertEquals(34,config.loc.b);}"
"com.fasterxml.jackson.databind.deser.merge.MergeWithNullTest.testBeanMergingWithNullSkip",0,"public void testBeanMergingWithNullSkip()throws Exception {ConfigSkipNull config=MAPPER.readerForUpdating(new ConfigSkipNull(5,7)).readValue(aposToQuotes(""{'loc':null}""));assertNotNull(config);assertNotNull(config.loc);assertEquals(5,config.loc.a);assertEquals(7,config.loc.b);}"
"com.fasterxml.jackson.databind.deser.merge.MergeWithNullTest.testBeanMergingWithNullSet",0,"public void testBeanMergingWithNullSet()throws Exception {ConfigAllowNullOverwrite config=MAPPER.readerForUpdating(new ConfigAllowNullOverwrite(5,7)).readValue(aposToQuotes(""{'loc':null}""));assertNotNull(config);assertNull(config.loc);}"
"com.fasterxml.jackson.databind.deser.merge.MergeWithNullTest.testSetterlessMergingWithNull",0,"public void testSetterlessMergingWithNull()throws Exception {NoSetterConfig input=new NoSetterConfig();NoSetterConfig result=MAPPER.readerForUpdating(input).readValue(aposToQuotes(""{'value':null}""));assertNotNull(result.getValue());assertEquals(2,result.getValue().a);assertEquals(3,result.getValue().b);assertSame(input,result);}"
"com.fasterxml.jackson.databind.deser.merge.MergeWithNullTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestGenericListSerialization.testSubTypesFor356",0,"public void testSubTypesFor356()throws Exception {ObjectMapper mapper=new ObjectMapper();JSONResponse<List<Parent>> input=new JSONResponse<List<Parent>>();List<Parent> embedded=new ArrayList<Parent>();embedded.add(new Child1());embedded.add(new Child2());input.setResult(embedded);mapper.configure(MapperFeature.USE_STATIC_TYPING,true);JavaType rootType=TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>(){});byte[]json=mapper.writerFor(rootType).writeValueAsBytes(input);JSONResponse<List<Parent>> out=mapper.readValue(json,0,json.length,rootType);List<Parent> deserializedContent=out.getResult();assertEquals(2,deserializedContent.size());assertTrue(deserializedContent.get(0)instanceof Parent);assertTrue(deserializedContent.get(0)instanceof Child1);assertFalse(deserializedContent.get(0)instanceof Child2);assertTrue(deserializedContent.get(1)instanceof Child2);assertFalse(deserializedContent.get(1)instanceof Child1);assertEquals(""PARENT"",((Child1)deserializedContent.get(0)).parentContent);assertEquals(""PARENT"",((Child2)deserializedContent.get(1)).parentContent);assertEquals(""CHILD1"",((Child1)deserializedContent.get(0)).childContent1);assertEquals(""CHILD2"",((Child2)deserializedContent.get(1)).childContent2);}"
"com.fasterxml.jackson.databind.jsontype.TestGenericListSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testBeanConvert",0,"public void testBeanConvert(){PointStrings input=new PointStrings(""37"",""-9"");PointZ point=MAPPER.convertValue(input,PointZ.class);assertEquals(37,point.x);assertEquals(-9,point.y);assertEquals(-13,point.z);}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testErrorReporting",0,"public void testErrorReporting()throws Exception {try {MAPPER.readValue(""{\""unknownProp\"":true}"",BooleanBean.class);}catch(JsonProcessingException e){verifyException(e,""unknownProp"");}try {MAPPER.readValue(""{\""boolProp\"":\""foobar\""}"",BooleanBean.class);}catch(JsonMappingException e){verifyException(e,""Can not deserialize value of type boolean from String"");}}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testIssue458",0,"public void testIssue458()throws Exception {ObjectWrapper a=new ObjectWrapper(""foo"");ObjectWrapper b=new ObjectWrapper(a);ObjectWrapper b2=MAPPER.convertValue(b,ObjectWrapper.class);ObjectWrapper a2=MAPPER.convertValue(b2.getData(),ObjectWrapper.class);assertEquals(""foo"",a2.getData());}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testWrapping",0,"public void testWrapping()throws Exception {ObjectMapper wrappingMapper=new ObjectMapper();wrappingMapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);wrappingMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);_convertAndVerifyPoint(wrappingMapper);wrappingMapper=new ObjectMapper();wrappingMapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);wrappingMapper.disable(SerializationFeature.WRAP_ROOT_VALUE);_convertAndVerifyPoint(wrappingMapper);wrappingMapper=new ObjectMapper();wrappingMapper.disable(DeserializationFeature.UNWRAP_ROOT_VALUE);wrappingMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);_convertAndVerifyPoint(wrappingMapper);}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testConvertUsingCast",0,"public void testConvertUsingCast()throws Exception {String str=new String(""foo"");CharSequence seq=str;String result=MAPPER.convertValue(seq,String.class);assertSame(str,result);}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testNodeConvert",0,"public void testNodeConvert()throws Exception {ObjectNode src=(ObjectNode)MAPPER.readTree(""{}"");TreeNode node=src;ObjectNode result=MAPPER.treeToValue(node,ObjectNode.class);assertSame(src,result);}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testIssue11",0,"/** * Need to test ""shortcuts"" introduced by [databind#11]*/public void testIssue11()throws Exception {ObjectNode root=MAPPER.createObjectNode();JsonNode n=root;ObjectNode ob2=MAPPER.convertValue(n,ObjectNode.class);assertSame(root,ob2);JsonNode n2=MAPPER.convertValue(n,JsonNode.class);assertSame(root,n2);String STR=""test"";CharSequence seq=MAPPER.convertValue(STR,CharSequence.class);assertSame(STR,seq);Leaf l=new Leaf(13);Map<?,?> m=MAPPER.convertValue(l,Map.class);assertNotNull(m);assertEquals(1,m.size());assertEquals(Integer.valueOf(13),m.get(""value""));Leaf l2=MAPPER.convertValue(m,Leaf.class);assertEquals(13,l2.value);Object ob=MAPPER.convertValue(l,Object.class);assertNotNull(ob);assertEquals(LinkedHashMap.class,ob.getClass());final Object plaino=new Object();try {m=MAPPER.convertValue(plaino,Map.class);fail(""Conversion should have failed"");}catch(IllegalArgumentException e){verifyException(e,""no properties discovered"");}ObjectMapper mapper=new ObjectMapper();mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);try {assertEquals(""{}"",mapper.writeValueAsString(plaino));}catch(Exception e){throw (Exception)e.getCause();}m=mapper.convertValue(plaino,Map.class);assertNotNull(m);assertEquals(0,m.size());}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testConversionIssue288",0,"public void testConversionIssue288()throws Exception {String json=MAPPER.writeValueAsString(new ConvertingBean(1,2));assertEquals(""{\""a\"":2,\""b\"":4}"",json);}"
"com.fasterxml.jackson.databind.convert.TestBeanConversions.testConversionIssue1433",0,"public void testConversionIssue1433()throws Exception {assertNull(MAPPER.convertValue(null,Object.class));assertNull(MAPPER.convertValue(null,PointZ.class));assertSame(NullBean.NULL_INSTANCE,MAPPER.convertValue(null,NullBean.class));}"
"com.fasterxml.jackson.databind.ser.filter.TestSimpleSerializationIgnore.testSimpleIgnore",0,"public void testSimpleIgnore()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new SizeClassEnabledIgnore());assertEquals(1,result.size());assertEquals(Integer.valueOf(1),result.get(""x""));assertNull(result.get(""y""));}"
"com.fasterxml.jackson.databind.ser.filter.TestSimpleSerializationIgnore.testDisabledIgnore",0,"public void testDisabledIgnore()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new SizeClassDisabledIgnore());assertEquals(2,result.size());assertEquals(Integer.valueOf(3),result.get(""x""));assertEquals(Integer.valueOf(4),result.get(""y""));}"
"com.fasterxml.jackson.databind.ser.filter.TestSimpleSerializationIgnore.testIgnoreOver",0,"/** * Test case to verify that ignore tag can also be disabled via inheritance*/public void testIgnoreOver()throws Exception {Map<String,Object> result=writeAndMap(MAPPER,new BaseClassIgnore());assertEquals(1,result.size());assertEquals(Integer.valueOf(2),result.get(""y""));result=writeAndMap(MAPPER,new SubClassNonIgnore());assertEquals(2,result.size());assertEquals(Integer.valueOf(3),result.get(""x""));assertEquals(Integer.valueOf(2),result.get(""y""));}"
"com.fasterxml.jackson.databind.ser.filter.TestSimpleSerializationIgnore.testIgnoreType",0,"public void testIgnoreType()throws Exception {assertEquals(""{\""value\"":13}"",MAPPER.writeValueAsString(new NonIgnoredType()));}"
"com.fasterxml.jackson.databind.ser.filter.TestSimpleSerializationIgnore.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForTreeNodes.testValueAsStringWithDefaultTyping",0,"public void testValueAsStringWithDefaultTyping()throws Exception {Foo foo=new Foo(""baz"");String json=DEFAULT_MAPPER.writeValueAsString(foo);JsonNode jsonNode=DEFAULT_MAPPER.readTree(json);assertEquals(jsonNode.get(""bar"").textValue(),foo.bar);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForTreeNodes.testValueToTreeWithDefaultTyping",0,"public void testValueToTreeWithDefaultTyping()throws Exception {Foo foo=new Foo(""baz"");JsonNode jsonNode=DEFAULT_MAPPER.valueToTree(foo);assertEquals(jsonNode.get(""bar"").textValue(),foo.bar);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForTreeNodes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapFilteringViaProps",0,"public void testMapFilteringViaProps()throws Exception {FilterProvider prov=new SimpleFilterProvider().addFilter(""filterX"",SimpleBeanPropertyFilter.filterOutAllExcept(""b""));String json=MAPPER.writer(prov).writeValueAsString(new MapBean());assertEquals(aposToQuotes(""{'values':{'b':5}}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapFilteringViaClass",0,"public void testMapFilteringViaClass()throws Exception {FilteredBean bean=new FilteredBean();bean.put(""a"",4);bean.put(""b"",3);FilterProvider prov=new SimpleFilterProvider().addFilter(""filterForMaps"",SimpleBeanPropertyFilter.filterOutAllExcept(""b""));String json=MAPPER.writer(prov).writeValueAsString(bean);assertEquals(aposToQuotes(""{'b':3}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testNonNullValueMapViaProp",0,"public void testNonNullValueMapViaProp()throws IOException {String json=MAPPER.writeValueAsString(new NoNullValuesMapContainer().add(""a"",""foo"").add(""b"",null).add(""c"",""bar""));assertEquals(aposToQuotes(""{'stuff':{'a':'foo','c':'bar'}}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapFilteringWithAnnotations",0,"public void testMapFilteringWithAnnotations()throws Exception {FilterProvider prov=new SimpleFilterProvider().addFilter(""filterX"",new TestMapFilter());String json=MAPPER.writer(prov).writeValueAsString(new MapBean());assertEquals(aposToQuotes(""{'values':{'a':2}}""),json);json=MAPPER.writer(prov).writeValueAsString(new MapBeanNoOffset());assertEquals(aposToQuotes(""{'values':{'a':1}}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapNonNullValue",0,"public void testMapNonNullValue()throws IOException {String json=MAPPER.writeValueAsString(new NoNullsStringMap().add(""a"",""foo"").add(""b"",null).add(""c"",""bar""));assertEquals(aposToQuotes(""{'a':'foo','c':'bar'}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapNonEmptyValue",0,"public void testMapNonEmptyValue()throws IOException {String json=MAPPER.writeValueAsString(new NoEmptyStringsMap().add(""a"",""foo"").add(""b"",""bar"").add(""c"",""""));assertEquals(aposToQuotes(""{'a':'foo','b':'bar'}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapAbsentValue",0,"public void testMapAbsentValue()throws IOException {String json=MAPPER.writeValueAsString(new NoAbsentStringMap().add(""a"",""foo"").add(""b"",null));assertEquals(aposToQuotes(""{'a':'foo'}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapNullSerialization",0,"@SuppressWarnings(""deprecation"")public void testMapNullSerialization()throws IOException {ObjectMapper m=new ObjectMapper();Map<String,String> map=new HashMap<String,String>();map.put(""a"",null);assertEquals(""{\""a\"":null}"",m.writeValueAsString(map));m=new ObjectMapper();m.disable(SerializationFeature.WRITE_NULL_MAP_VALUES);assertEquals(""{}"",m.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapWithOnlyEmptyValues",0,"public void testMapWithOnlyEmptyValues()throws IOException {String json;json=MAPPER.writeValueAsString(new Wrapper497(new StringMap497().add(""a"",""123"")));assertEquals(aposToQuotes(""{'values':{'a':'123'}}""),json);json=MAPPER.writeValueAsString(new Wrapper497(new StringMap497().add(""a"","""").add(""b"",null)));assertEquals(aposToQuotes(""{}""),json);}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapViaGlobalNonEmpty",0,"public void testMapViaGlobalNonEmpty()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setDefaultPropertyInclusion(JsonInclude.Value.empty().withContentInclusion(JsonInclude.Include.NON_EMPTY));assertEquals(aposToQuotes(""{'a':'b'}""),mapper.writeValueAsString(new StringMap497().add(""x"","""").add(""a"",""b"")));}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.testMapViaTypeOverride",0,"public void testMapViaTypeOverride()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configOverride(Map.class).setInclude(JsonInclude.Value.empty().withContentInclusion(JsonInclude.Include.NON_EMPTY));assertEquals(aposToQuotes(""{'a':'b'}""),mapper.writeValueAsString(new StringMap497().add(""foo"","""").add(""a"",""b"")));}"
"com.fasterxml.jackson.databind.ser.filter.TestMapFiltering.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.JSOGDeserialize622Test.testStructJSOGRef",0,"public void testStructJSOGRef()throws Exception {IdentifiableExampleJSOG result=MAPPER.readValue(EXP_EXAMPLE_JSOG,IdentifiableExampleJSOG.class);assertEquals(66,result.foo);assertSame(result,result.next);}"
"com.fasterxml.jackson.databind.objectid.JSOGDeserialize622Test.testPolymorphicRoundTrip",0,"public void testPolymorphicRoundTrip()throws Exception {JSOGWrapper w=new JSOGWrapper(15);IdentifiableExampleJSOG ex=new IdentifiableExampleJSOG(123);ex.next=ex;w.jsog=ex;String json=MAPPER.writeValueAsString(w);JSOGWrapper out=MAPPER.readValue(json,JSOGWrapper.class);assertNotNull(out);assertEquals(15,out.value);assertTrue(out.jsog instanceof IdentifiableExampleJSOG);IdentifiableExampleJSOG jsog=(IdentifiableExampleJSOG)out.jsog;assertEquals(123,jsog.foo);assertSame(jsog,jsog.next);}"
"com.fasterxml.jackson.databind.objectid.JSOGDeserialize622Test.testAlterativePolymorphicRoundTrip669",0,"public void testAlterativePolymorphicRoundTrip669()throws Exception {Outer outer=new Outer();outer.foo=""foo"";outer.inner1=outer.inner2=new SubInner(""bar"",""extra"");String jsog=MAPPER.writeValueAsString(outer);Outer back=MAPPER.readValue(jsog,Outer.class);assertSame(back.inner1,back.inner2);}"
"com.fasterxml.jackson.databind.objectid.JSOGDeserialize622Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testCustomBeanInstantiator",0,"public void testCustomBeanInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyBean.class,new MyBeanInstantiator()));MyBean bean=mapper.readValue(""{}"",MyBean.class);assertNotNull(bean);assertEquals(""secret!"",bean._secret);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testCustomListInstantiator",0,"public void testCustomListInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyList.class,new MyListInstantiator()));MyList result=mapper.readValue(""[]"",MyList.class);assertNotNull(result);assertEquals(MyList.class,result.getClass());assertEquals(0,result.size());}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testCustomMapInstantiator",0,"public void testCustomMapInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyMap.class,new MyMapInstantiator()));MyMap result=mapper.readValue(""{\""a\"":\""b\"" }"",MyMap.class);assertNotNull(result);assertEquals(MyMap.class,result.getClass());assertEquals(1,result.size());}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testDelegateBeanInstantiator",0,"public void testDelegateBeanInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyBean.class,new MyDelegateBeanInstantiator()));MyBean bean=mapper.readValue(""123"",MyBean.class);assertNotNull(bean);assertEquals(""123"",bean._secret);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testDelegateListInstantiator",0,"public void testDelegateListInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyList.class,new MyDelegateListInstantiator()));MyList result=mapper.readValue(""123"",MyList.class);assertNotNull(result);assertEquals(1,result.size());assertEquals(Integer.valueOf(123),result.get(0));}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testDelegateMapInstantiator",0,"public void testDelegateMapInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyMap.class,new MyDelegateMapInstantiator()));MyMap result=mapper.readValue(""123"",MyMap.class);assertNotNull(result);assertEquals(1,result.size());assertEquals(Integer.valueOf(123),result.values().iterator().next());}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testCustomDelegateInstantiator",0,"public void testCustomDelegateInstantiator()throws Exception {AnnotatedBeanDelegating value=MAPPER.readValue(""{\""a\"":3}"",AnnotatedBeanDelegating.class);assertNotNull(value);Object ob=value.value;assertNotNull(ob);assertTrue(ob instanceof Map);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testPropertyBasedBeanInstantiator",0,"public void testPropertyBasedBeanInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(CreatorBean.class,new InstantiatorBase(){@Override public boolean canCreateFromObjectWith(){return true;}@Override public CreatorProperty[]getFromObjectArguments(DeserializationConfig config){return new CreatorProperty[]{new CreatorProperty(new PropertyName(""secret""),config.constructType(String.class),null,null,null,null,0,null,PropertyMetadata.STD_REQUIRED)};}@Override public Object createFromObjectWith(DeserializationContext ctxt,Object[]args){return new CreatorBean((String)args[0]);}}));CreatorBean bean=mapper.readValue(""{\""secret\"":123,\""value\"":37}"",CreatorBean.class);assertNotNull(bean);assertEquals(""123"",bean._secret);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testPropertyBasedMapInstantiator",0,"public void testPropertyBasedMapInstantiator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MyMap.class,new CreatorMapInstantiator()));MyMap result=mapper.readValue(""{\""name\"":\""bob\"",\""x\"":\""y\""}"",MyMap.class);assertNotNull(result);assertEquals(2,result.size());assertEquals(""bob"",result.get(""bob""));assertEquals(""y"",result.get(""x""));}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testBeanFromString",0,"public void testBeanFromString()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MysteryBean.class,new InstantiatorBase(){@Override public boolean canCreateFromString(){return true;}@Override public Object createFromString(DeserializationContext ctxt,String value){return new MysteryBean(value);}}));MysteryBean result=mapper.readValue(quote(""abc""),MysteryBean.class);assertNotNull(result);assertEquals(""abc"",result.value);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testBeanFromInt",0,"public void testBeanFromInt()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MysteryBean.class,new InstantiatorBase(){@Override public boolean canCreateFromInt(){return true;}@Override public Object createFromInt(DeserializationContext ctxt,int value){return new MysteryBean(value + 1);}}));MysteryBean result=mapper.readValue(""37"",MysteryBean.class);assertNotNull(result);assertEquals(Integer.valueOf(38),result.value);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testBeanFromLong",0,"public void testBeanFromLong()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MysteryBean.class,new InstantiatorBase(){@Override public boolean canCreateFromLong(){return true;}@Override public Object createFromLong(DeserializationContext ctxt,long value){return new MysteryBean(value + 1L);}}));MysteryBean result=mapper.readValue(""9876543210"",MysteryBean.class);assertNotNull(result);assertEquals(Long.valueOf(9876543211L),result.value);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testBeanFromDouble",0,"public void testBeanFromDouble()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MysteryBean.class,new InstantiatorBase(){@Override public boolean canCreateFromDouble(){return true;}@Override public Object createFromDouble(DeserializationContext ctxt,double value){return new MysteryBean(2.0 * value);}}));MysteryBean result=mapper.readValue(""0.25"",MysteryBean.class);assertNotNull(result);assertEquals(Double.valueOf(0.5),result.value);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testBeanFromBoolean",0,"public void testBeanFromBoolean()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(MysteryBean.class,new InstantiatorBase(){@Override public boolean canCreateFromBoolean(){return true;}@Override public Object createFromBoolean(DeserializationContext ctxt,boolean value){return new MysteryBean(Boolean.valueOf(value));}}));MysteryBean result=mapper.readValue(""true"",MysteryBean.class);assertNotNull(result);assertEquals(Boolean.TRUE,result.value);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testPolymorphicCreatorBean",0,"/** * Beyond basic features,it should be possible to even implement polymorphic handling...*/public void testPolymorphicCreatorBean()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new MyModule(PolymorphicBeanBase.class,new PolymorphicBeanInstantiator()));String JSON=""{\""type\"":"" + quote(PolymorphicBean.class.getName())+ "",\""name\"":\""Axel\""}"";PolymorphicBeanBase result=mapper.readValue(JSON,PolymorphicBeanBase.class);assertNotNull(result);assertSame(PolymorphicBean.class,result.getClass());assertEquals(""Axel"",((PolymorphicBean)result).name);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testEmptyBean",0,"public void testEmptyBean()throws Exception {AnnotatedBean bean=MAPPER.readValue(""{}"",AnnotatedBean.class);assertNotNull(bean);assertEquals(""foo"",bean.a);assertEquals(3,bean.b);}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testErrorMessageForMissingCtor",0,"public void testErrorMessageForMissingCtor()throws Exception {try {MAPPER.readValue(""{}"",MyBean.class);fail(""Should not succeed"");}catch(JsonMappingException e){verifyException(e,""Can not construct instance of"");verifyException(e,""no Creators"");assertEquals(InvalidDefinitionException.class,e.getClass());}}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.testErrorMessageForMissingStringCtor",0,"public void testErrorMessageForMissingStringCtor()throws Exception {try {MAPPER.readValue(""\""foo\"""",MyBean.class);fail(""Should not succeed"");}catch(JsonMappingException e){verifyException(e,""Can not construct instance of"");verifyException(e,""no String-argument constructor/factory"");assertEquals(InvalidDefinitionException.class,e.getClass());}}"
"com.fasterxml.jackson.databind.creators.TestValueInstantiator.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForMethods.testLeafMixin",0,"/** * Unit test for verifying that leaf-level mix-ins work ok;that is,any annotations added properly override all annotations that masked methods (fields etc)have.*/public void testLeafMixin()throws IOException {ObjectMapper mapper=new ObjectMapper();Map<String,Object> result;BaseClass bean=new BaseClass(""a1"",""b2"");result=writeAndMap(mapper,bean);assertEquals(1,result.size());assertEquals(""b2"",result.get(""b""));mapper=new ObjectMapper();mapper.addMixIn(BaseClass.class,MixIn.class);result=writeAndMap(mapper,bean);assertEquals(2,result.size());assertEquals(""b2"",result.get(""b2""));assertEquals(""a1"",result.get(""a""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForMethods.testIntermediateMixin",0,"/** * Unit test for verifying that having a mix-in ""between"" classes (overriding annotations of a base class,but being overridden further by a sub-class)works as expected*/public void testIntermediateMixin()throws IOException {ObjectMapper mapper=new ObjectMapper();Map<String,Object> result;LeafClass bean=new LeafClass(""XXX"",""b2"");mapper.addMixIn(BaseClass.class,MixIn.class);result=writeAndMap(mapper,bean);assertEquals(1,result.size());assertEquals(""XXX"",result.get(""a""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForMethods.testIntermediateMixin2",0,"/** * Another intermediate mix-in,to verify that annotations properly ""trickle up""*/public void testIntermediateMixin2()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.addMixIn(EmptyBean.class,MixInForSimple.class);Map<String,Object> result=writeAndMap(mapper,new SimpleBean());assertEquals(1,result.size());assertEquals(Integer.valueOf(42),result.get(""x""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForMethods.testCustomResolver",0,"public void testCustomResolver()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.setMixInResolver(new ClassIntrospector.MixInResolver(){@Override public Class<?> findMixInClassFor(Class<?> target){if (target == EmptyBean.class){return MixInForSimple.class;}return null;}@Override public MixInResolver copy(){return this;}});Map<String,Object> result=writeAndMap(mapper,new SimpleBean());assertEquals(1,result.size());assertEquals(Integer.valueOf(42),result.get(""x""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForMethods.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationMerging.testSharedNames",0,"public void testSharedNames()throws Exception {ObjectMapper mapper=new ObjectMapper();assertEquals(""{\""x\"":6}"",mapper.writeValueAsString(new SharedName(6)));}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationMerging.testSharedNamesFromGetterToSetter",0,"public void testSharedNamesFromGetterToSetter()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new SharedName2());assertEquals(""{\""x\"":1}"",json);SharedName2 result=mapper.readValue(json,SharedName2.class);assertNotNull(result);}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationMerging.testSharedTypeInfo",0,"public void testSharedTypeInfo()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new Wrapper(13L));Wrapper result=mapper.readValue(json,Wrapper.class);assertEquals(Long.class,result.value.getClass());}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationMerging.testSharedTypeInfoWithCtor",0,"public void testSharedTypeInfoWithCtor()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(new TypeWrapper(13L));TypeWrapper result=mapper.readValue(json,TypeWrapper.class);assertEquals(Long.class,result.value.getClass());}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationMerging.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.VisibilityForSerializationTest.testGlobalAutoDetection",0,"public void testGlobalAutoDetection()throws IOException {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new GetterClass());assertEquals(2,result.size());assertEquals(Integer.valueOf(-2),result.get(""x""));assertEquals(Integer.valueOf(1),result.get(""y""));m=new ObjectMapper();m.configure(MapperFeature.AUTO_DETECT_GETTERS,false);result=writeAndMap(m,new GetterClass());assertEquals(1,result.size());assertTrue(result.containsKey(""x""));}"
"com.fasterxml.jackson.databind.introspect.VisibilityForSerializationTest.testPerClassAutoDetection",0,"public void testPerClassAutoDetection()throws IOException {ObjectMapper m=new ObjectMapper();Map<String,Object> result=writeAndMap(m,new DisabledGetterClass());assertEquals(1,result.size());assertTrue(result.containsKey(""x""));m.configure(MapperFeature.AUTO_DETECT_GETTERS,true);result=writeAndMap(m,new EnabledGetterClass());assertEquals(2,result.size());assertTrue(result.containsKey(""x""));assertTrue(result.containsKey(""y""));}"
"com.fasterxml.jackson.databind.introspect.VisibilityForSerializationTest.testPerClassAutoDetectionForIsGetter",0,"public void testPerClassAutoDetectionForIsGetter()throws IOException {ObjectMapper m=new ObjectMapper();m.configure(MapperFeature.AUTO_DETECT_GETTERS,true);m.configure(MapperFeature.AUTO_DETECT_IS_GETTERS,false);Map<String,Object> result=writeAndMap(m,new EnabledIsGetterClass());assertEquals(0,result.size());assertFalse(result.containsKey(""ok""));}"
"com.fasterxml.jackson.databind.introspect.VisibilityForSerializationTest.testConfigChainability",0,"public void testConfigChainability(){ObjectMapper m=new ObjectMapper();assertTrue(m.isEnabled(MapperFeature.AUTO_DETECT_SETTERS));assertTrue(m.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));m.configure(MapperFeature.AUTO_DETECT_SETTERS,false).configure(MapperFeature.AUTO_DETECT_GETTERS,false);assertFalse(m.isEnabled(MapperFeature.AUTO_DETECT_SETTERS));assertFalse(m.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));}"
"com.fasterxml.jackson.databind.introspect.VisibilityForSerializationTest.testVisibilityFeatures",0,"public void testVisibilityFeatures()throws Exception {ObjectMapper om=new ObjectMapper();om.configure(MapperFeature.AUTO_DETECT_FIELDS,false);om.configure(MapperFeature.AUTO_DETECT_GETTERS,false);om.configure(MapperFeature.AUTO_DETECT_SETTERS,false);om.configure(MapperFeature.AUTO_DETECT_IS_GETTERS,false);om.configure(MapperFeature.USE_GETTERS_AS_SETTERS,false);om.configure(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS,true);om.configure(MapperFeature.INFER_PROPERTY_MUTATORS,false);om.configure(MapperFeature.USE_ANNOTATIONS,true);JavaType javaType=om.getTypeFactory().constructType(TCls.class);BeanDescription desc=(BeanDescription)om.getSerializationConfig().introspect(javaType);List<BeanPropertyDefinition> props=desc.findProperties();if (props.size()!= 1){fail(""Should find 1 property,not "" + props.size()+ "";properties = ""+ props);}}"
"com.fasterxml.jackson.databind.introspect.VisibilityForSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testSimpleGetters",0,"public void testSimpleGetters()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new PrefixStrategy());assertEquals(""{\""Get-key\"":123}"",mapper.writeValueAsString(new GetterBean()));}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testSimpleSetters",0,"public void testSimpleSetters()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new PrefixStrategy());SetterBean bean=mapper.readValue(""{\""Set-key\"":13}"",SetterBean.class);assertEquals(13,bean.value);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testSimpleFields",0,"public void testSimpleFields()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new PrefixStrategy());String json=mapper.writeValueAsString(new FieldBean(999));assertEquals(""{\""Field-key\"":999}"",json);FieldBean result=mapper.readValue(json,FieldBean.class);assertEquals(999,result.key);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testCStyleNaming",0,"public void testCStyleNaming()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new CStyleStrategy());String json=mapper.writeValueAsString(new PersonBean(""Joe"",""Sixpack"",42));assertEquals(""{\""first_name\"":\""Joe\"",\""last_name\"":\""Sixpack\"",\""age\"":42}"",json);PersonBean result=mapper.readValue(json,PersonBean.class);assertEquals(""Joe"",result.firstName);assertEquals(""Sixpack"",result.lastName);assertEquals(42,result.age);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testWithGetterAsSetter",0,"public void testWithGetterAsSetter()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new CStyleStrategy());SetterlessWithValue input=new SetterlessWithValue().add(3);String json=mapper.writeValueAsString(input);assertEquals(""{\""value_list\"":[{\""int_value\"":3}]}"",json);SetterlessWithValue result=mapper.readValue(json,SetterlessWithValue.class);assertNotNull(result.values);assertEquals(1,result.values.size());assertEquals(3,result.values.get(0).intValue);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testLowerCase",0,"public void testLowerCase()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new LcStrategy());RenamedCollectionBean result=mapper.readValue(""{\""thevalues\"":[\""a\""]}"",RenamedCollectionBean.class);assertNotNull(result.getTheValues());assertEquals(1,result.getTheValues().size());assertEquals(""a"",result.getTheValues().get(0));}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.testPerClassAnnotation",0,"public void testPerClassAnnotation()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.setPropertyNamingStrategy(new LcStrategy());BeanWithPrefixNames input=new BeanWithPrefixNames();String json=mapper.writeValueAsString(input);assertEquals(""{\""Get-a\"":3}"",json);BeanWithPrefixNames output=mapper.readValue(""{\""Set-a\"":7}"",BeanWithPrefixNames.class);assertEquals(7,output.a);}"
"com.fasterxml.jackson.databind.introspect.TestNamingStrategyCustom.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicCreators.testManualPolymorphicDog",0,"/** * Simple test to verify that it is possible to implement polymorphic deserialization manually.*/public void testManualPolymorphicDog()throws Exception {Animal animal=MAPPER.readValue(""{\""type\"":\""dog\"",\""name\"":\""Fido\"",\""barkVolume\"" : 95.0 }"",Animal.class);assertEquals(Dog.class,animal.getClass());assertEquals(""Fido"",animal.name);assertEquals(95.0,((Dog)animal).barkVolume);}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicCreators.testManualPolymorphicCatBasic",0,"public void testManualPolymorphicCatBasic()throws Exception {Animal animal=MAPPER.readValue(""{\""name\"" : \""Macavity\"",\""type\"":\""cat\"",\""lives\"":18,\""likesCream\"":false }"",Animal.class);assertEquals(Cat.class,animal.getClass());assertEquals(""Macavity"",animal.name);Cat cat=(Cat)animal;assertEquals(18,cat.lives);assertEquals(false,cat.likesCream);}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicCreators.testManualPolymorphicCatWithReorder",0,"public void testManualPolymorphicCatWithReorder()throws Exception {Animal animal=MAPPER.readValue(""{\""likesCream\"":true,\""name\"" : \""Venla\"",\""type\"":\""cat\"" }"",Animal.class);assertEquals(Cat.class,animal.getClass());assertEquals(""Venla"",animal.name);assertTrue(((Cat)animal).likesCream);}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicCreators.testManualPolymorphicWithNumbered",0,"public void testManualPolymorphicWithNumbered()throws Exception {final ObjectWriter w=MAPPER.writerFor(AbstractRoot.class);final ObjectReader r=MAPPER.readerFor(AbstractRoot.class);AbstractRoot input=AbstractRoot.make(1,""oh hai!"");String json=w.writeValueAsString(input);AbstractRoot result=r.readValue(json);assertNotNull(result);assertEquals(""oh hai!"",result.getOpt());}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicCreators.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TestGenericFieldInSubtype.test677",0,"public void test677()throws Exception {ObjectMapper mapper=new ObjectMapper();JavaType t677=mapper.constructType(Result677.Success677.class);assertNotNull(t677);Result677.Success677<Integer> s=new Result677.Success677<Integer>(Integer.valueOf(4));String json=mapper.writeValueAsString(s);assertEquals(""{\""value\"":4}"",json);}"
"com.fasterxml.jackson.databind.type.TestGenericFieldInSubtype.testInnerType",0,"public void testInnerType()throws Exception {ObjectMapper mapper=new ObjectMapper();BaseType.SubType<?> r=mapper.readValue(""{}"",BaseType.SubType.class);assertNotNull(r);}"
"com.fasterxml.jackson.databind.type.TestGenericFieldInSubtype.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsSkipTest.testSkipNullField",0,"public void testSkipNullField()throws Exception {NullSkipField result=MAPPER.readValue(aposToQuotes(""{'noNulls':'foo','nullsOk':null}""),NullSkipField.class);assertEquals(""foo"",result.noNulls);assertNull(result.nullsOk);result=MAPPER.readValue(aposToQuotes(""{'noNulls':null}""),NullSkipField.class);assertEquals(""b"",result.noNulls);assertEquals(""a"",result.nullsOk);}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsSkipTest.testSkipNullMethod",0,"public void testSkipNullMethod()throws Exception {NullSkipMethod result=MAPPER.readValue(aposToQuotes(""{'noNulls':'foo','nullsOk':null}""),NullSkipMethod.class);assertEquals(""foo"",result._noNulls);assertNull(result._nullsOk);result=MAPPER.readValue(aposToQuotes(""{'noNulls':null}""),NullSkipMethod.class);assertEquals(""b"",result._noNulls);assertEquals(""a"",result._nullsOk);}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsSkipTest.testSkipNullWithDefaults",0,"public void testSkipNullWithDefaults()throws Exception {String json=aposToQuotes(""{'value':null}"");StringValue result=MAPPER.readValue(json,StringValue.class);assertNull(result.value);ObjectMapper mapper=newObjectMapper();mapper.configOverride(String.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.SKIP));result=mapper.readValue(json,StringValue.class);assertEquals(""default"",result.value);}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsSkipTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSerializeAsInClass",0,"public void testSerializeAsInClass()throws IOException {assertEquals(""{\""foo\"":42}"",WRITER.writeValueAsString(new FooImpl()));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSerializeAsForArrayProp",0,"public void testSerializeAsForArrayProp()throws IOException {assertEquals(""{\""foos\"":[{\""foo\"":42}]}"",WRITER.writeValueAsString(new Fooables()));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSerializeAsForSimpleProp",0,"public void testSerializeAsForSimpleProp()throws IOException {assertEquals(""{\""foo\"":{\""foo\"":42}}"",WRITER.writeValueAsString(new FooableWrapper()));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSerializeWithFieldAnno",0,"public void testSerializeWithFieldAnno()throws IOException {assertEquals(""{\""foo\"":{\""foo\"":42}}"",WRITER.writeValueAsString(new FooableWithFieldWrapper()));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSpecializedContentAs",0,"public void testSpecializedContentAs()throws IOException {assertEquals(aposToQuotes(""{'values':[{'a':1,'b':2}]}""),WRITER.writeValueAsString(new Bean1178Wrapper(1)));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.testSpecializedAsIntermediate",0,"public void testSpecializedAsIntermediate()throws IOException {assertEquals(aposToQuotes(""{'value':{'a':1,'b':2}}""),WRITER.writeValueAsString(new Bean1178Holder()));}"
"com.fasterxml.jackson.databind.ser.TestJsonSerializeAs.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.seq.TestInnerClassReaderFor.testReaderFor",0,"public void testReaderFor()throws IOException {X x=new X(""dummy"");objectMapper().readerForUpdating(x).readValue(""{\""value\"": \""updatedX\""}"");assertEquals(x.getValue(),""updatedX"");Y y=new Y(""dummy"");objectMapper().readerForUpdating(y).readValue(""{\""value\"": \""updatedY\""}"");assertEquals(y.getValue(),""updatedY"");}"
"com.fasterxml.jackson.databind.seq.TestInnerClassReaderFor.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.ImplicitParamsForCreatorTest.testNonSingleArgCreator",0,"public void testNonSingleArgCreator()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new MyParamIntrospector());XY value=mapper.readValue(aposToQuotes(""{'paramName0':1,'paramName1':2}""),XY.class);assertNotNull(value);assertEquals(1,value.x);assertEquals(2,value.y);}"
"com.fasterxml.jackson.databind.creators.ImplicitParamsForCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestAbstractTypes.testCollectionDefaulting",0,"public void testCollectionDefaulting()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addAbstractTypeMapping(Collection.class,List.class);mod.addAbstractTypeMapping(List.class,LinkedList.class);mapper.registerModule(mod);Collection<?> result=mapper.readValue(""[]"",Collection.class);assertEquals(LinkedList.class,result.getClass());}"
"com.fasterxml.jackson.databind.module.TestAbstractTypes.testMapDefaultingBasic",0,"public void testMapDefaultingBasic()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addAbstractTypeMapping(Map.class,TreeMap.class);mapper.registerModule(mod);Map<?,?> result=mapper.readValue(""{}"",Map.class);assertEquals(TreeMap.class,result.getClass());}"
"com.fasterxml.jackson.databind.module.TestAbstractTypes.testDefaultingRecursive",0,"public void testDefaultingRecursive()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addAbstractTypeMapping(Map.class,TreeMap.class);mod.addAbstractTypeMapping(List.class,LinkedList.class);mapper.registerModule(mod);Object result;result=mapper.readValue(""[{}]"",Object.class);assertEquals(LinkedList.class,result.getClass());Object v=((List<?>)result).get(0);assertNotNull(v);assertEquals(TreeMap.class,v.getClass());result=mapper.readValue(""{\""x\"":[3]}"",Object.class);assertEquals(TreeMap.class,result.getClass());Map<?,?> map=(Map<?,?>)result;assertEquals(1,map.size());v=map.get(""x"");assertNotNull(v);assertEquals(LinkedList.class,v.getClass());assertEquals(1,((List<?>)v).size());}"
"com.fasterxml.jackson.databind.module.TestAbstractTypes.testInterfaceDefaulting",0,"public void testInterfaceDefaulting()throws Exception {ObjectMapper mapper=new ObjectMapper();SimpleModule mod=new SimpleModule(""test"",Version.unknownVersion());mod.addAbstractTypeMapping(CharSequence.class,MyString.class);mapper.registerModule(mod);Object result=mapper.readValue(quote(""abc""),CharSequence.class);assertEquals(MyString.class,result.getClass());assertEquals(""abc"",((MyString)result).value);}"
"com.fasterxml.jackson.databind.module.TestAbstractTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.testWrapperWithGetter",0,"public void testWrapperWithGetter()throws Exception {Dog dog=new Dog(""Fluffy"",3);String json=MAPPER.writeValueAsString(new ContainerWithGetter<Animal>(dog));if (json.indexOf(""\""object-type\"":\""doggy\"""")< 0){fail(""polymorphic type not kept,result == "" + json + "";should contain 'object-type':'...'"");}}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.testWrapperWithField",0,"public void testWrapperWithField()throws Exception {Dog dog=new Dog(""Fluffy"",3);String json=MAPPER.writeValueAsString(new ContainerWithField<Animal>(dog));if (json.indexOf(""\""object-type\"":\""doggy\"""")< 0){fail(""polymorphic type not kept,result == "" + json + "";should contain 'object-type':'...'"");}}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.testWrapperWithExplicitType",0,"public void testWrapperWithExplicitType()throws Exception {Dog dog=new Dog(""Fluffy"",3);ContainerWithGetter<Animal> c2=new ContainerWithGetter<Animal>(dog);String json=MAPPER.writerFor(MAPPER.getTypeFactory().constructParametrizedType(ContainerWithGetter.class,ContainerWithGetter.class,Animal.class)).writeValueAsString(c2);if (json.indexOf(""\""object-type\"":\""doggy\"""")< 0){fail(""polymorphic type not kept,result == "" + json + "";should contain 'object-type':'...'"");}}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.testJackson387",0,"public void testJackson387()throws Exception {ObjectMapper om=new ObjectMapper();om.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT,JsonTypeInfo.As.PROPERTY);om.setSerializationInclusion(JsonInclude.Include.NON_NULL);om.enable(SerializationFeature.INDENT_OUTPUT);MyClass mc=new MyClass();MyParam<Integer> moc1=new MyParam<Integer>(1);MyParam<String> moc2=new MyParam<String>(""valueX"");SomeObject so=new SomeObject();so.someValue=""xxxxxx"";MyParam<SomeObject> moc3=new MyParam<SomeObject>(so);List<SomeObject> colist=new ArrayList<SomeObject>();colist.add(new SomeObject());colist.add(new SomeObject());colist.add(new SomeObject());MyParam<List<SomeObject>> moc4=new MyParam<List<SomeObject>>(colist);mc.params.add(moc1);mc.params.add(moc2);mc.params.add(moc3);mc.params.add(moc4);String json=om.writeValueAsString(mc);MyClass mc2=om.readValue(json,MyClass.class);assertNotNull(mc2);assertNotNull(mc2.params);assertEquals(4,mc2.params.size());}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.testJackson430",0,"public void testJackson430()throws Exception {ObjectMapper om=new ObjectMapper();om.setSerializerFactory(new CustomJsonSerializerFactory());MyClass mc=new MyClass();mc.params.add(new MyParam<Integer>(1));String str=om.writeValueAsString(mc);MyClass mc2=om.readValue(str,MyClass.class);assertNotNull(mc2);assertNotNull(mc2.params);assertEquals(1,mc2.params.size());}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.testValueWithMoreGenericParameters",0,"public void testValueWithMoreGenericParameters()throws Exception {WrappedContainerWithField wrappedContainerWithField=new WrappedContainerWithField();wrappedContainerWithField.animalContainer=new ContainerWithTwoAnimals<Dog,Dog>(new Dog(""d1"",1),new Dog(""d2"",2));String json=MAPPER.writeValueAsString(wrappedContainerWithField);assertNotNull(json);}"
"com.fasterxml.jackson.databind.jsontype.TestWithGenerics.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ext.TestJava6Types.test16Types",0,"public void test16Types()throws Exception {final ObjectMapper mapper=new ObjectMapper();Deque<?> dq=mapper.readValue(""[1]"",Deque.class);assertNotNull(dq);assertEquals(1,dq.size());assertTrue(dq instanceof Deque<?>);NavigableSet<?> ns=mapper.readValue(""[true ]"",NavigableSet.class);assertEquals(1,ns.size());assertTrue(ns instanceof NavigableSet<?>);}"
"com.fasterxml.jackson.databind.deser.merge.MapMergeTest.testShallowMapMerging",0,"public void testShallowMapMerging()throws Exception {MergedMap v=MAPPER.readValue(aposToQuotes(""{'values':{'c':'y'}}""),MergedMap.class);assertEquals(2,v.values.size());assertEquals(""y"",v.values.get(""c""));assertEquals(""x"",v.values.get(""a""));}"
"com.fasterxml.jackson.databind.deser.merge.MapMergeTest.testDeeperMapMerging",0,"@SuppressWarnings(""unchecked"")public void testDeeperMapMerging()throws Exception {MergedMap base=new MergedMap(""name"",""foobar"");Map<String,Object> props=new LinkedHashMap<>();props.put(""default"",""yes"");props.put(""x"",""abc"");Map<String,Object> innerProps=new LinkedHashMap<>();innerProps.put(""z"",Integer.valueOf(13));props.put(""extra"",innerProps);base.values.put(""props"",props);MergedMap v=MAPPER.readerForUpdating(base).readValue(aposToQuotes(""{'values':{'props':{'x':'xyz','y' : '...','extra':{'ab' : true}}}}""));assertEquals(2,v.values.size());assertEquals(""foobar"",v.values.get(""name""));assertNotNull(v.values.get(""props""));props=(Map<String,Object>)v.values.get(""props"");assertEquals(4,props.size());assertEquals(""yes"",props.get(""default""));assertEquals(""xyz"",props.get(""x""));assertEquals(""..."",props.get(""y""));assertNotNull(props.get(""extra""));innerProps=(Map<String,Object>)props.get(""extra"");assertEquals(2,innerProps.size());assertEquals(Integer.valueOf(13),innerProps.get(""z""));assertEquals(Boolean.TRUE,innerProps.get(""ab""));}"
"com.fasterxml.jackson.databind.deser.merge.MapMergeTest.testMapMergingWithArray",0,"@SuppressWarnings(""unchecked"")public void testMapMergingWithArray()throws Exception {MergedMap base=new MergedMap(""name"",""foobar"");Map<String,Object> props=new LinkedHashMap<>();List<String> names=new ArrayList<>();names.add(""foo"");props.put(""names"",names);base.values.put(""props"",props);props.put(""extra"",""misc"");MergedMap v=MAPPER.readerForUpdating(base).readValue(aposToQuotes(""{'values':{'props':{'names':['bar']}}}""));assertEquals(2,v.values.size());assertEquals(""foobar"",v.values.get(""name""));assertNotNull(v.values.get(""props""));props=(Map<String,Object>)v.values.get(""props"");assertEquals(2,props.size());assertEquals(""misc"",props.get(""extra""));assertNotNull(props.get(""names""));names=(List<String>)props.get(""names"");assertEquals(2,names.size());assertEquals(""foo"",names.get(0));assertEquals(""bar"",names.get(1));}"
"com.fasterxml.jackson.databind.deser.merge.MapMergeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testCreatorEnums",0,"public void testCreatorEnums()throws Exception {EnumWithCreator value=MAPPER.readValue(""\""enumA\"""",EnumWithCreator.class);assertEquals(EnumWithCreator.A,value);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testCreatorEnumsFromBigDecimal",0,"public void testCreatorEnumsFromBigDecimal()throws Exception {EnumWithBDCreator value=MAPPER.readValue(""\""8.0\"""",EnumWithBDCreator.class);assertEquals(EnumWithBDCreator.E8,value);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testEnumWithCreatorEnumMaps",0,"public void testEnumWithCreatorEnumMaps()throws Exception {EnumMap<EnumWithCreator,String> value=MAPPER.readValue(""{\""enumA\"":\""value\""}"",new TypeReference<EnumMap<EnumWithCreator,String>>(){});assertEquals(""value"",value.get(EnumWithCreator.A));}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testEnumWithCreatorMaps",0,"public void testEnumWithCreatorMaps()throws Exception {HashMap<EnumWithCreator,String> value=MAPPER.readValue(""{\""enumA\"":\""value\""}"",new TypeReference<java.util.HashMap<EnumWithCreator,String>>(){});assertEquals(""value"",value.get(EnumWithCreator.A));}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testEnumWithCreatorEnumSets",0,"public void testEnumWithCreatorEnumSets()throws Exception {EnumSet<EnumWithCreator> value=MAPPER.readValue(""[\""enumA\""]"",new TypeReference<EnumSet<EnumWithCreator>>(){});assertTrue(value.contains(EnumWithCreator.A));}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testJsonCreatorPropertiesWithEnum",0,"public void testJsonCreatorPropertiesWithEnum()throws Exception {EnumWithPropertiesModeJsonCreator type1=MAPPER.readValue(""{\""name\"":\""TEST1\"",\""description\"":\""TEST\""}"",EnumWithPropertiesModeJsonCreator.class);assertSame(EnumWithPropertiesModeJsonCreator.TEST1,type1);EnumWithPropertiesModeJsonCreator type2=MAPPER.readValue(""{\""name\"":\""TEST3\"",\""description\"":\""TEST\""}"",EnumWithPropertiesModeJsonCreator.class);assertSame(EnumWithPropertiesModeJsonCreator.TEST3,type2);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testJsonCreatorDelagateWithEnum",0,"public void testJsonCreatorDelagateWithEnum()throws Exception {final ObjectMapper mapper=new ObjectMapper();EnumWithDelegateModeJsonCreator type1=mapper.readValue(""{\""name\"":\""TEST1\"",\""description\"":\""TEST\""}"",EnumWithDelegateModeJsonCreator.class);assertSame(EnumWithDelegateModeJsonCreator.TEST1,type1);EnumWithDelegateModeJsonCreator type2=mapper.readValue(""{\""name\"":\""TEST3\"",\""description\"":\""TEST\""}"",EnumWithDelegateModeJsonCreator.class);assertSame(EnumWithDelegateModeJsonCreator.TEST3,type2);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testEnumsFromInts",0,"public void testEnumsFromInts()throws Exception {Object ob=MAPPER.readValue(""1 "",TestEnumFromInt.class);assertEquals(TestEnumFromInt.class,ob.getClass());assertSame(TestEnumFromInt.ENUM_A,ob);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testExceptionFromCreator",0,"public void testExceptionFromCreator()throws Exception {try {MAPPER.readValue(quote(""xyz""),TestEnum324.class);fail(""Should throw exception"");}catch(JsonMappingException e){verifyException(e,""foobar"");}}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testDeserializerForCreatorWithEnumMaps",0,"public void testDeserializerForCreatorWithEnumMaps()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new DelegatingDeserializersModule());EnumMap<EnumWithCreator,String> value=mapper.readValue(""{\""enumA\"":\""value\""}"",new TypeReference<EnumMap<EnumWithCreator,String>>(){});assertEquals(""value"",value.get(EnumWithCreator.A));}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testMultiArgEnumCreator",0,"public void testMultiArgEnumCreator()throws Exception {Enum929 v=MAPPER.readValue(""{\""id\"":3,\""name\"":\""B\""}"",Enum929.class);assertEquals(Enum929.B,v);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testNoArgEnumCreator",0,"public void testNoArgEnumCreator()throws Exception {MyEnum960 v=MAPPER.readValue(""{\""value\"":\""bogus\""}"",MyEnum960.class);assertEquals(MyEnum960.VALUE,v);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testEnumCreators1291",0,"public void testEnumCreators1291()throws Exception {ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(Enum1291.V2);Enum1291 result=mapper.readValue(json,Enum1291.class);assertSame(Enum1291.V2,result);}"
"com.fasterxml.jackson.databind.creators.EnumCreatorTest.testMultiArgEnumInCollections",0,"public void testMultiArgEnumInCollections()throws Exception {EnumSet<Enum929> valueEnumSet=MAPPER.readValue(""[{\""id\"":3,\""name\"":\""B\""},{\""id\"":3,\""name\"":\""A\""}]"",new TypeReference<EnumSet<Enum929>>(){});assertEquals(2,valueEnumSet.size());assertTrue(valueEnumSet.contains(Enum929.A));assertTrue(valueEnumSet.contains(Enum929.B));List<Enum929> valueList=MAPPER.readValue(""[{\""id\"":3,\""name\"":\""B\""},{\""id\"":3,\""name\"":\""A\""},{\""id\"":3,\""name\"":\""B\""}]"",new TypeReference<List<Enum929>>(){});assertEquals(3,valueList.size());assertEquals(Enum929.B,valueList.get(2));}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testReadSimplePropertyValue",0,"/** * Test that verifies that property annotation works*/public void testReadSimplePropertyValue()throws Exception {String json=""{\""value\"":[true,\""Foobar\"",42,13]}"";PojoAsArrayWrapper p=MAPPER.readValue(json,PojoAsArrayWrapper.class);assertNotNull(p.value);assertTrue(p.value.complete);assertEquals(""Foobar"",p.value.name);assertEquals(42,p.value.x);assertEquals(13,p.value.y);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testReadSimpleRootValue",0,"/** * Test that verifies that Class annotation works*/public void testReadSimpleRootValue()throws Exception {String json=""[false,\""Bubba\"",1,2]"";FlatPojo p=MAPPER.readValue(json,FlatPojo.class);assertFalse(p.complete);assertEquals(""Bubba"",p.name);assertEquals(1,p.x);assertEquals(2,p.y);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testWriteSimplePropertyValue",0,"/** * Test that verifies that property annotation works*/public void testWriteSimplePropertyValue()throws Exception {String json=MAPPER.writeValueAsString(new PojoAsArrayWrapper(""Foobar"",42,13,true));assertEquals(""{\""value\"":[true,\""Foobar\"",42,13]}"",json);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testWriteSimpleRootValue",0,"/** * Test that verifies that Class annotation works*/public void testWriteSimpleRootValue()throws Exception {String json=MAPPER.writeValueAsString(new FlatPojo(""Bubba"",1,2,false));assertEquals(""[false,\""Bubba\"",1,2]"",json);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testNullColumn",0,"public void testNullColumn()throws Exception {assertEquals(""[null,\""bar\""]"",MAPPER.writeValueAsString(new TwoStringsBean()));}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testSerializeAsArrayWithSingleProperty",0,"public void testSerializeAsArrayWithSingleProperty()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);String json=mapper.writeValueAsString(new SingleBean());assertEquals(""\""foo\"""",json);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testBeanAsArrayUnwrapped",0,"public void testBeanAsArrayUnwrapped()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);SingleBean result=mapper.readValue(""[\""foobar\""]"",SingleBean.class);assertNotNull(result);assertEquals(""foobar"",result.name);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testAnnotationOverride",0,"public void testAnnotationOverride()throws Exception {assertEquals(""{\""value\"":{\""x\"":1,\""y\"":2}}"",MAPPER.writeValueAsString(new A()));ObjectMapper mapper2=new ObjectMapper();mapper2.setAnnotationIntrospector(new ForceArraysIntrospector());assertEquals(""[[1,2]]"",mapper2.writeValueAsString(new A()));}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testWithMaps",0,"public void testWithMaps()throws Exception {AsArrayWithMap input=new AsArrayWithMap(1,2);String json=MAPPER.writeValueAsString(input);AsArrayWithMap output=MAPPER.readValue(json,AsArrayWithMap.class);assertNotNull(output);assertNotNull(output.attrs);assertEquals(1,output.attrs.size());assertEquals(Integer.valueOf(2),output.attrs.get(1));}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testSimpleWithIndex",0,"public void testSimpleWithIndex()throws Exception {CreatorWithIndex value=MAPPER.readValue(aposToQuotes(""[2,1]""),CreatorWithIndex.class);assertEquals(2,value._a);assertEquals(1,value._b);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testWithConfigOverrides",0,"public void testWithConfigOverrides()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configOverride(NonAnnotatedXY.class).setFormat(JsonFormat.Value.forShape(JsonFormat.Shape.ARRAY));String json=mapper.writeValueAsString(new NonAnnotatedXY(2,3));assertEquals(""[2,3]"",json);NonAnnotatedXY result=mapper.readValue(json,NonAnnotatedXY.class);assertNotNull(result);assertEquals(3,result.y);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.testUnknownExtraProp",0,"public void testUnknownExtraProp()throws Exception {String json=""{\""value\"":[true,\""Foobar\"",42,13,false]}"";try {MAPPER.readValue(json,PojoAsArrayWrapper.class);fail(""should not pass with extra element"");}catch(MismatchedInputException e){verifyException(e,""Unexpected JSON values"");}PojoAsArrayWrapper v=MAPPER.readerFor(PojoAsArrayWrapper.class).without(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES).readValue(json);assertNotNull(v);assertEquals(v.value.x,42);assertEquals(v.value.y,13);assertTrue(v.value.complete);assertEquals(""Foobar"",v.value.name);}"
"com.fasterxml.jackson.databind.struct.TestPOJOAsArray.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.objectid.ObjectId825BTest.testFull825",0,"public void testFull825()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);String INPUT=aposToQuotes(""{\n"" + ""    '@class': '_PKG_CTC',\n"" + ""     'var': [{\n""+ ""      'ch': {\n""+ ""        '@class': '_PKG_Ch',\n""+ ""         'act': [{\n""+ ""            '@class': '_PKG_CTD',\n""+ ""            'oidString': 'oid1',\n""+ ""            'dec': [{\n""+ ""              '@class': '_PKG_Dec',\n""+ ""                'oidString': 'oid2',\n""+ ""                'outTr': [{\n""+ ""                  '@class': '_PKG_Tr',\n""+ ""                  'target': {\n""+ ""                    '@class': '_PKG_Ti',\n""+ ""                    'oidString': 'oid3',\n""+ ""                    'timer': 'problemoid',\n""+ ""                    'outTr': [{\n""+ ""                      '@class': '_PKG_Tr',\n""+ ""                      'target': {\n""+ ""                        '@class': '_PKG_Ti',\n""+ ""                        'oidString': 'oid4',\n""+ ""                        'timer': {\n""+ ""                          '@class': '_PKG_V',\n""+ ""                          'oidString': 'problemoid'\n""+ ""                        }\n""+ ""                      }\n""+ ""                    }]\n""+ ""                  }\n""+ ""                }]\n""+ ""              }]\n""+ ""         }],\n""+ ""         'oidString': 'oid5'\n""+ ""      },\n""+ ""       '@class': '_PKG_CTV',\n""+ ""       'oidString': 'oid6',\n""+ ""       'locV': ['problemoid']\n""+ ""    }],\n""+ ""     'oidString': 'oid7'\n""+ ""}\n"");final String newPkg=getClass().getName()+ ""\\$"";INPUT=INPUT.replaceAll(""_PKG_"",newPkg);CTC result=mapper.readValue(INPUT,CTC.class);assertNotNull(result);}"
"com.fasterxml.jackson.databind.objectid.ObjectId825BTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testPrefixedUnwrappingSerialize",0,"public void testPrefixedUnwrappingSerialize()throws Exception {assertEquals(""{\""name\"":\""Tatu\"",\""_x\"":1,\""_y\"":2}"",MAPPER.writeValueAsString(new PrefixUnwrap(""Tatu"",1,2)));}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testDeepPrefixedUnwrappingSerialize",0,"public void testDeepPrefixedUnwrappingSerialize()throws Exception {String json=MAPPER.writeValueAsString(new DeepPrefixUnwrap(""Bubba"",1,1));assertEquals(""{\""u.name\"":\""Bubba\"",\""u._x\"":1,\""u._y\"":1}"",json);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testHierarchicConfigSerialize",0,"public void testHierarchicConfigSerialize()throws Exception {String json=MAPPER.writeValueAsString(new ConfigRoot(""Fred"",25));assertEquals(""{\""general.names.name\"":\""Fred\"",\""misc.value\"":25}"",json);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testPrefixedUnwrapping",0,"public void testPrefixedUnwrapping()throws Exception {PrefixUnwrap bean=MAPPER.readValue(""{\""name\"":\""Axel\"",\""_x\"":4,\""_y\"":7}"",PrefixUnwrap.class);assertNotNull(bean);assertEquals(""Axel"",bean.name);assertNotNull(bean.location);assertEquals(4,bean.location.x);assertEquals(7,bean.location.y);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testDeepPrefixedUnwrappingDeserialize",0,"public void testDeepPrefixedUnwrappingDeserialize()throws Exception {DeepPrefixUnwrap bean=MAPPER.readValue(""{\""u.name\"":\""Bubba\"",\""u._x\"":2,\""u._y\"":3}"",DeepPrefixUnwrap.class);assertNotNull(bean.unwrapped);assertNotNull(bean.unwrapped.location);assertEquals(2,bean.unwrapped.location.x);assertEquals(3,bean.unwrapped.location.y);assertEquals(""Bubba"",bean.unwrapped.name);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testHierarchicConfigDeserialize",0,"public void testHierarchicConfigDeserialize()throws Exception {ConfigRoot root=MAPPER.readValue(""{\""general.names.name\"":\""Bob\"",\""misc.value\"":3}"",ConfigRoot.class);assertNotNull(root.general);assertNotNull(root.general.names);assertNotNull(root.misc);assertEquals(3,root.misc.value);assertEquals(""Bob"",root.general.names.name);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testHierarchicConfigRoundTrip",0,"public void testHierarchicConfigRoundTrip()throws Exception {ConfigAlternate input=new ConfigAlternate(123,""Joe"",42);String json=MAPPER.writeValueAsString(input);ConfigAlternate root=MAPPER.readValue(json,ConfigAlternate.class);assertEquals(123,root.id);assertNotNull(root.general);assertNotNull(root.general.names);assertNotNull(root.misc);assertEquals(""Joe"",root.general.names.name);assertEquals(42,root.misc.value);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.testIssue226",0,"public void testIssue226()throws Exception {Parent input=new Parent();input.c1=new Child();input.c1.sc1=new SubChild();input.c1.sc1.value=""a"";input.c2=new Child();input.c2.sc1=new SubChild();input.c2.sc1.value=""b"";String json=MAPPER.writeValueAsString(input);Parent output=MAPPER.readValue(json,Parent.class);assertNotNull(output.c1);assertNotNull(output.c2);assertNotNull(output.c1.sc1);assertNotNull(output.c2.sc1);assertEquals(""a"",output.c1.sc1.value);assertEquals(""b"",output.c2.sc1.value);}"
"com.fasterxml.jackson.databind.struct.TestUnwrappedWithPrefix.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestPropertyConflicts.testFailWithDupProps",0,"public void testFailWithDupProps()throws Exception {BeanWithConflict bean=new BeanWithConflict();try {String json=objectWriter().writeValueAsString(bean);fail(""Should have failed due to conflicting accessor definitions;got JSON = "" + json);}catch(JsonProcessingException e){verifyException(e,""Conflicting getter definitions"");}}"
"com.fasterxml.jackson.databind.introspect.TestPropertyConflicts.testRegularAndIsGetter",0,"public void testRegularAndIsGetter()throws Exception {final ObjectWriter writer=objectWriter();assertEquals(""{\""value\"":4}"",writer.writeValueAsString(new Getters1A()));assertEquals(""{\""value\"":4}"",writer.writeValueAsString(new Getters1B()));ObjectMapper mapper=objectMapper();assertEquals(1,mapper.readValue(""{\""value\"":1}"",Getters1A.class).value);assertEquals(2,mapper.readValue(""{\""value\"":2}"",Getters1B.class).value);}"
"com.fasterxml.jackson.databind.introspect.TestPropertyConflicts.testInferredNameConflictsWithGetters",0,"public void testInferredNameConflictsWithGetters()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new InferingIntrospector());String json=mapper.writeValueAsString(new Infernal());assertEquals(aposToQuotes(""{'name':'Bob'}""),json);}"
"com.fasterxml.jackson.databind.introspect.TestPropertyConflicts.testInferredNameConflictsWithSetters",0,"public void testInferredNameConflictsWithSetters()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setAnnotationIntrospector(new InferingIntrospector());Infernal inf=mapper.readValue(aposToQuotes(""{'stuff':'Bob'}""),Infernal.class);assertNotNull(inf);}"
"com.fasterxml.jackson.databind.introspect.TestPropertyConflicts.testIssue541",0,"public void testIssue541()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.disable(MapperFeature.AUTO_DETECT_CREATORS,MapperFeature.AUTO_DETECT_FIELDS,MapperFeature.AUTO_DETECT_GETTERS,MapperFeature.AUTO_DETECT_IS_GETTERS,MapperFeature.AUTO_DETECT_SETTERS,MapperFeature.USE_GETTERS_AS_SETTERS);Bean541 data=mapper.readValue(""{\""str\"":\""the string\""}"",Bean541.class);if (data == null){throw new IllegalStateException(""data is null"");}if (!""the string"".equals(data.getStr())){throw new IllegalStateException(""bad value for data.str"");}}"
"com.fasterxml.jackson.databind.introspect.TestPropertyConflicts.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeCollectionTest.testEnumSet",0,"public void testEnumSet()throws Exception {assertEquals(""{}"",MAPPER.writeValueAsString(new NonEmptyEnumSet()));assertEquals(""{\""v\"":[\""B\""]}"",MAPPER.writeValueAsString(new NonEmptyEnumSet(ABC.B)));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeCollectionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleStringArrayRead",0,"public void testSingleStringArrayRead()throws Exception {String json=aposToQuotes(""{'values': 'first' }"");StringArrayWrapper result=MAPPER.readValue(json,StringArrayWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.length);assertEquals(""first"",result.values[0]);ObjectMapper mapper=new ObjectMapper();mapper.configOverride(String[].class).setFormat(JsonFormat.Value.empty().withFeature(JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY));StringArrayNotAnnoted result2=mapper.readValue(json,StringArrayNotAnnoted.class);assertNotNull(result2.values);assertEquals(1,result2.values.length);assertEquals(""first"",result2.values[0]);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleIntArrayRead",0,"public void testSingleIntArrayRead()throws Exception {String json=aposToQuotes(""{'values': 123 }"");IntArrayWrapper result=MAPPER.readValue(json,IntArrayWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.length);assertEquals(123,result.values[0]);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleLongArrayRead",0,"public void testSingleLongArrayRead()throws Exception {String json=aposToQuotes(""{'values': -205 }"");LongArrayWrapper result=MAPPER.readValue(json,LongArrayWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.length);assertEquals(-205L,result.values[0]);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleBooleanArrayRead",0,"public void testSingleBooleanArrayRead()throws Exception {String json=aposToQuotes(""{'values': true }"");BooleanArrayWrapper result=MAPPER.readValue(json,BooleanArrayWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.length);assertEquals(true,result.values[0]);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleDoubleArrayRead",0,"public void testSingleDoubleArrayRead()throws Exception {String json=aposToQuotes(""{'values': -0.5 }"");DoubleArrayWrapper result=MAPPER.readValue(json,DoubleArrayWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.length);assertEquals(-0.5,result.values[0]);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleFloatArrayRead",0,"public void testSingleFloatArrayRead()throws Exception {String json=aposToQuotes(""{'values': 0.25 }"");FloatArrayWrapper result=MAPPER.readValue(json,FloatArrayWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.length);assertEquals(0.25f,result.values[0]);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleElementArrayRead",0,"public void testSingleElementArrayRead()throws Exception {String json=aposToQuotes(""{'roles':{'Name': 'User','ID': '333'}}"");RolesInArray response=MAPPER.readValue(json,RolesInArray.class);assertNotNull(response.roles);assertEquals(1,response.roles.length);assertEquals(""333"",response.roles[0].ID);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleStringListRead",0,"public void testSingleStringListRead()throws Exception {String json=aposToQuotes(""{'values': 'first' }"");StringListWrapper result=MAPPER.readValue(json,StringListWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.size());assertEquals(""first"",result.values.get(0));}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleElementListRead",0,"public void testSingleElementListRead()throws Exception {String json=aposToQuotes(""{'roles':{'Name': 'User','ID': '333'}}"");RolesInList response=MAPPER.readValue(json,RolesInList.class);assertNotNull(response.roles);assertEquals(1,response.roles.size());assertEquals(""333"",response.roles.get(0).ID);}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.testSingleEnumSetRead",0,"public void testSingleEnumSetRead()throws Exception {EnumSetWrapper result=MAPPER.readValue(aposToQuotes(""{'values': 'B' }""),EnumSetWrapper.class);assertNotNull(result.values);assertEquals(1,result.values.size());assertEquals(ABC.B,result.values.iterator().next());}"
"com.fasterxml.jackson.databind.struct.FormatFeatureAcceptSingleTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testBeanAsObject",0,"/** * Unit test that verifies that a bean is stored with type information,when declared type is <code>Object.class</code> (since it is within Object[]),and default type information is enabled.*/public void testBeanAsObject()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();String str=m.writeValueAsString(new Object[]{new StringBean(""abc"")});_verifySerializationAsMap(str);Object ob=m.readValue(str,Object[].class);assertNotNull(ob);Object[]result=(Object[])ob;assertNotNull(result[0]);assertEquals(StringBean.class,result[0].getClass());assertEquals(""abc"",((StringBean)result[0]).name);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testBeanAsObjectUsingAsProperty",0,"public void testBeanAsObjectUsingAsProperty()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL,"".hype"");String json=m.writeValueAsString(new StringBean(""abc""));Object result=m.readValue(json,Object.class);assertNotNull(result);assertEquals(StringBean.class,result.getClass());assertEquals(""abc"",((StringBean)result).name);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testAbstractBean",0,"/** * Unit test that verifies that an abstract bean is stored with type information if default type information is enabled for non-concrete types.*/public void testAbstractBean()throws Exception {ObjectMapper m=new ObjectMapper();AbstractBean[]input=new AbstractBean[]{new StringBean(""xyz"")};String serial=m.writeValueAsString(input);try {m.readValue(serial,AbstractBean[].class);fail(""Should have failed"");}catch(JsonMappingException e){verifyException(e,""can not construct"");}m=new ObjectMapper();m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);serial=m.writeValueAsString(input);AbstractBean[]beans=m.readValue(serial,AbstractBean[].class);assertEquals(1,beans.length);assertEquals(StringBean.class,beans[0].getClass());assertEquals(""xyz"",((StringBean)beans[0]).name);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testNonFinalBean",0,"/** * Unit test to verify that type information is included for all non-final types,if default typing suitably configured*/public void testNonFinalBean()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);StringBean bean=new StringBean(""x"");assertEquals(""{\""name\"":\""x\""}"",m.writeValueAsString(bean));m=new ObjectMapper();m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);assertEquals(""[\"""" + StringBean.class.getName()+ ""\"",{\""name\"":\""x\""}]"",m.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testNullValue",0,"public void testNullValue()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);BeanHolder h=new BeanHolder();String json=m.writeValueAsString(h);assertNotNull(json);BeanHolder result=m.readValue(json,BeanHolder.class);assertNotNull(result);assertNull(result.bean);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testEnumAsObject",0,"public void testEnumAsObject()throws Exception {Object[]input=new Object[]{Choice.YES};Object[]input2=new Object[]{ComplexChoice.MAYBE};assertEquals(""[\""YES\""]"",serializeAsString(input));assertEquals(""[\""MAYBE\""]"",serializeAsString(input2));ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();String json=m.writeValueAsString(input);assertEquals(""[[\"""" + Choice.class.getName()+ ""\"",\""YES\""]]"",json);Object[]output=m.readValue(json,Object[].class);assertEquals(1,output.length);assertEquals(Choice.YES,output[0]);json=m.writeValueAsString(input2);assertEquals(""[[\"""" + ComplexChoice.class.getName()+ ""\"",\""MAYBE\""]]"",json);output=m.readValue(json,Object[].class);assertEquals(1,output.length);assertEquals(ComplexChoice.MAYBE,output[0]);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testEnumSet",0,"@SuppressWarnings(""unchecked"")public void testEnumSet()throws Exception {EnumSet<Choice> set=EnumSet.of(Choice.NO);Object[]input=new Object[]{set};ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();String json=m.writeValueAsString(input);Object[]output=m.readValue(json,Object[].class);assertEquals(1,output.length);Object ob=output[0];assertTrue(ob instanceof EnumSet<?>);EnumSet<Choice> set2=(EnumSet<Choice>)ob;assertEquals(1,set2.size());assertTrue(set2.contains(Choice.NO));assertFalse(set2.contains(Choice.YES));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testEnumMap",0,"@SuppressWarnings(""unchecked"")public void testEnumMap()throws Exception {EnumMap<Choice,String> map=new EnumMap<Choice,String>(Choice.class);map.put(Choice.NO,""maybe"");Object[]input=new Object[]{map};ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();String json=m.writeValueAsString(input);Object[]output=m.readValue(json,Object[].class);assertEquals(1,output.length);Object ob=output[0];assertTrue(ob instanceof EnumMap<?,?>);EnumMap<Choice,String> map2=(EnumMap<Choice,String>)ob;assertEquals(1,map2.size());assertEquals(""maybe"",map2.get(Choice.NO));assertNull(map2.get(Choice.YES));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testJackson311",0,"public void testJackson311()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);String json=mapper.writeValueAsString(new PolymorphicType(""hello"",2));PolymorphicType value=mapper.readValue(json,PolymorphicType.class);assertEquals(""hello"",value.foo);assertEquals(Integer.valueOf(2),value.bar);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testTokenBuffer",0,"public void testTokenBuffer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);TokenBuffer buf=new TokenBuffer(mapper,false);buf.writeStartObject();buf.writeNumberField(""num"",42);buf.writeEndObject();String json=mapper.writeValueAsString(new ObjectHolder(buf));ObjectHolder holder=mapper.readValue(json,ObjectHolder.class);assertNotNull(holder.value);assertSame(TokenBuffer.class,holder.value.getClass());JsonParser jp=((TokenBuffer)holder.value).asParser();assertToken(JsonToken.START_OBJECT,jp.nextToken());assertToken(JsonToken.FIELD_NAME,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertToken(JsonToken.END_OBJECT,jp.nextToken());assertNull(jp.nextToken());jp.close();buf.close();buf=new TokenBuffer(mapper,false);buf.writeStartArray();buf.writeBoolean(true);buf.writeEndArray();json=mapper.writeValueAsString(new ObjectHolder(buf));holder=mapper.readValue(json,ObjectHolder.class);assertNotNull(holder.value);assertSame(TokenBuffer.class,holder.value.getClass());jp=((TokenBuffer)holder.value).asParser();assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_TRUE,jp.nextToken());assertToken(JsonToken.END_ARRAY,jp.nextToken());assertNull(jp.nextToken());jp.close();buf.close();buf=new TokenBuffer(mapper,false);buf.writeNumber(321);json=mapper.writeValueAsString(new ObjectHolder(buf));holder=mapper.readValue(json,ObjectHolder.class);assertNotNull(holder.value);assertSame(TokenBuffer.class,holder.value.getClass());jp=((TokenBuffer)holder.value).asParser();assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(321,jp.getIntValue());assertNull(jp.nextToken());jp.close();buf.close();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testIssue352",0,"/** * Test for [JACKSON-352]*/public void testIssue352()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,JsonTypeInfo.As.PROPERTY);DiscussBean d1=new DiscussBean();d1.subject=""mouse"";d1.weight=88;DomainBeanWrapper wrapper=new DomainBeanWrapper();wrapper.name=""mickey"";wrapper.myBean=d1;String json=mapper.writeValueAsString(wrapper);DomainBeanWrapper result=mapper.readValue(json,DomainBeanWrapper.class);assertNotNull(result);assertNotNull(wrapper.myBean);assertSame(DiscussBean.class,wrapper.myBean.getClass());}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testFeature432",0,"public void testFeature432()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,""*CLASS*"");String json=mapper.writeValueAsString(new BeanHolder(new StringBean(""punny"")));assertEquals(""{\""bean\"":{\""*CLASS*\"":\""com.fasterxml.jackson.databind.jsontype.TestDefaultForObject$StringBean\"",\""name\"":\""punny\""}}"",json);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForObject.testNoGoWithExternalProperty",0,"public void testNoGoWithExternalProperty()throws Exception {ObjectMapper mapper=new ObjectMapper();try {mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT,JsonTypeInfo.As.EXTERNAL_PROPERTY);fail(""Should not have passed"");}catch(IllegalArgumentException e){verifyException(e,""Can not use includeAs of EXTERNAL_PROPERTY"");}}"
"com.fasterxml.jackson.databind.introspect.TestNameConflicts.testIssue193",0,"public void testIssue193()throws Exception {String json=objectWriter().writeValueAsString(new Bean193(1,2));assertNotNull(json);}"
"com.fasterxml.jackson.databind.introspect.TestNameConflicts.testNonConflict",0,"public void testNonConflict()throws Exception {String json=MAPPER.writeValueAsString(new BogusConflictBean());assertEquals(aposToQuotes(""{'prop1':2,'prop2':1}""),json);}"
"com.fasterxml.jackson.databind.introspect.TestNameConflicts.testHypotheticalGetters",0,"public void testHypotheticalGetters()throws Exception {String json=objectWriter().writeValueAsString(new MultipleTheoreticalGetters());assertEquals(aposToQuotes(""{'a':3}""),json);}"
"com.fasterxml.jackson.databind.introspect.TestNameConflicts.testOverrideName",0,"public void testOverrideName()throws Exception {final ObjectMapper mapper=objectMapper();String json=mapper.writeValueAsString(new CoreBean158());assertEquals(aposToQuotes(""{'bar':'x'}""),json);CoreBean158 result=null;try {result=mapper.readValue(aposToQuotes(""{'bar':'y'}""),CoreBean158.class);}catch(Exception e){fail(""Unexpected failure when reading CoreBean158: "" + e);}assertNotNull(result);assertEquals(""y"",result.bar);}"
"com.fasterxml.jackson.databind.introspect.TestNameConflicts.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.format.BooleanFormatTest.testShapeViaDefaults",0,"public void testShapeViaDefaults()throws Exception {assertEquals(aposToQuotes(""{'b':true}""),MAPPER.writeValueAsString(new BooleanWrapper(true)));ObjectMapper m=newObjectMapper();m.configOverride(Boolean.class).setFormat(JsonFormat.Value.forShape(JsonFormat.Shape.NUMBER));assertEquals(aposToQuotes(""{'b':1}""),m.writeValueAsString(new BooleanWrapper(true)));}"
"com.fasterxml.jackson.databind.format.BooleanFormatTest.testShapeOnProperty",0,"public void testShapeOnProperty()throws Exception {assertEquals(aposToQuotes(""{'b1':1,'b2':0,'b3':true}""),MAPPER.writeValueAsString(new BeanWithBoolean(true,false,true)));}"
"com.fasterxml.jackson.databind.format.BooleanFormatTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArrayDeserialization.testIntList",0,"public void testIntList()throws Exception {ObjectMapper m=new ObjectMapper();String JSON=""{\"""" + TypedListAsWrapper.class.getName()+ ""\"":[4,5,6]}"";JavaType type=TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class,Integer.class);TypedListAsWrapper<Integer> result=m.readValue(JSON,type);assertNotNull(result);assertEquals(3,result.size());assertEquals(Integer.valueOf(4),result.get(0));assertEquals(Integer.valueOf(5),result.get(1));assertEquals(Integer.valueOf(6),result.get(2));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArrayDeserialization.testBooleanListAsProp",0,"/** * Similar to above,but this time let's request adding type info as property. That would not work (since there's no JSON Object to add property in),so it will basically be same as using WRAPPER_ARRAY*/public void testBooleanListAsProp()throws Exception {ObjectMapper m=new ObjectMapper();String JSON=""[\"""" + TypedListAsProp.class.getName()+ ""\"",[true,false]]"";JavaType type=TypeFactory.defaultInstance().constructCollectionType(TypedListAsProp.class,Boolean.class);TypedListAsProp<Object> result=m.readValue(JSON,type);assertNotNull(result);assertEquals(2,result.size());assertEquals(Boolean.TRUE,result.get(0));assertEquals(Boolean.FALSE,result.get(1));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArrayDeserialization.testLongListAsWrapper",0,"public void testLongListAsWrapper()throws Exception {ObjectMapper m=new ObjectMapper();String JSON=""{\"""" + TypedListAsWrapper.class.getName()+ ""\"":[1,3]}"";JavaType type=TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class,Long.class);TypedListAsWrapper<Object> result=m.readValue(JSON,type);assertNotNull(result);assertEquals(2,result.size());assertEquals(Long.class,result.get(0).getClass());assertEquals(Long.valueOf(1),result.get(0));assertEquals(Long.class,result.get(1).getClass());assertEquals(Long.valueOf(3),result.get(1));}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArrayDeserialization.testLongArray",0,"public void testLongArray()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(long[].class,WrapperMixIn.class);String JSON=""{\"""" + long[].class.getName()+ ""\"":[5,6,7]}"";long[]value=m.readValue(JSON,long[].class);assertNotNull(value);assertEquals(3,value.length);assertArrayEquals(new long[]{5L,6L,7L},value);}"
"com.fasterxml.jackson.databind.jsontype.TestTypedArrayDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.TestStdDateFormat.testFactories",0,"public void testFactories(){TimeZone tz=TimeZone.getTimeZone(""GMT"");Locale loc=Locale.US;assertNotNull(StdDateFormat.getISO8601Format(tz,loc));assertNotNull(StdDateFormat.getRFC1123Format(tz,loc));}"
"com.fasterxml.jackson.databind.TestStdDateFormat.testLenientDefaults",0,"public void testLenientDefaults()throws Exception {StdDateFormat f=StdDateFormat.instance;assertTrue(f.isLenient());StdDateFormat f2=f.clone();assertTrue(f2.isLenient());f2.setLenient(false);assertFalse(f2.isLenient());f2.setLenient(true);assertTrue(f2.isLenient());f2.setLenient(false);assertFalse(f2.isLenient());StdDateFormat f3=f2.clone();assertFalse(f3.isLenient());}"
"com.fasterxml.jackson.databind.TestStdDateFormat.testLenientParsing",0,"public void testLenientParsing()throws Exception {StdDateFormat f=StdDateFormat.instance.clone();f.setLenient(false);Date dt=f.parse(""2015-11-30"");assertNotNull(dt);try {f.parse(""2015-11-32"");fail(""Should not pass"");}catch(ParseException e){verifyException(e,""can not parse date"");}f.setLenient(true);dt=f.parse(""2015-11-32"");assertNotNull(dt);}"
"com.fasterxml.jackson.databind.TestStdDateFormat.testInvalid",0,"public void testInvalid(){StdDateFormat std=new StdDateFormat();try {std.parse(""foobar"");}catch(java.text.ParseException e){verifyException(e,""Can not parse"");}}"
"com.fasterxml.jackson.databind.TestStdDateFormat.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForCreators.testForConstructor",0,"public void testForConstructor()throws IOException {ObjectMapper m=new ObjectMapper();m.addMixIn(BaseClassWithPrivateCtor.class,MixInForPrivate.class);BaseClassWithPrivateCtor result=m.readValue(""\""?\"""",BaseClassWithPrivateCtor.class);assertEquals(""?..."",result._a);}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForCreators.testForFactoryAndCtor",0,"public void testForFactoryAndCtor()throws IOException {ObjectMapper m=new ObjectMapper();BaseClass result;result=m.readValue(""\""string\"""",BaseClass.class);assertEquals(""string..."",result._a);m=new ObjectMapper();m.addMixIn(BaseClass.class,MixIn.class);result=m.readValue(""\""string\"""",BaseClass.class);assertEquals(""stringX"",result._a);}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForCreators.testFactoryMixIn",0,"public void testFactoryMixIn()throws IOException {ObjectMapper m=new ObjectMapper();m.addMixIn(StringWrapper.class,StringWrapperMixIn.class);StringWrapper result=m.readValue(""\""a\"""",StringWrapper.class);assertEquals(""a"",result._value);}"
"com.fasterxml.jackson.databind.mixins.TestMixinDeserForCreators.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testAtomicBoolean",0,"public void testAtomicBoolean()throws Exception {AtomicBoolean b=MAPPER.readValue(""true"",AtomicBoolean.class);assertTrue(b.get());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testAtomicInt",0,"public void testAtomicInt()throws Exception {AtomicInteger value=MAPPER.readValue(""13"",AtomicInteger.class);assertEquals(13,value.get());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testAtomicLong",0,"public void testAtomicLong()throws Exception {AtomicLong value=MAPPER.readValue(""12345678901"",AtomicLong.class);assertEquals(12345678901L,value.get());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testAtomicReference",0,"public void testAtomicReference()throws Exception {AtomicReference<long[]> value=MAPPER.readValue(""[1,2]"",new com.fasterxml.jackson.core.type.TypeReference<AtomicReference<long[]>>(){});Object ob=value.get();assertNotNull(ob);assertEquals(long[].class,ob.getClass());long[]longs=(long[])ob;assertNotNull(longs);assertEquals(2,longs.length);assertEquals(1,longs[0]);assertEquals(2,longs[1]);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testAbsentExclusion",0,"public void testAbsentExclusion()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);assertEquals(aposToQuotes(""{'value':true}""),mapper.writeValueAsString(new SimpleWrapper(Boolean.TRUE)));assertEquals(aposToQuotes(""{}""),mapper.writeValueAsString(new SimpleWrapper(null)));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testSerPropInclusionAlways",0,"public void testSerPropInclusionAlways()throws Exception {JsonInclude.Value incl=JsonInclude.Value.construct(JsonInclude.Include.NON_ABSENT,JsonInclude.Include.ALWAYS);ObjectMapper mapper=new ObjectMapper();mapper.setDefaultPropertyInclusion(incl);assertEquals(aposToQuotes(""{'value':true}""),mapper.writeValueAsString(new SimpleWrapper(Boolean.TRUE)));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testSerPropInclusionNonNull",0,"public void testSerPropInclusionNonNull()throws Exception {JsonInclude.Value incl=JsonInclude.Value.construct(JsonInclude.Include.NON_ABSENT,JsonInclude.Include.NON_NULL);ObjectMapper mapper=new ObjectMapper();mapper.setDefaultPropertyInclusion(incl);assertEquals(aposToQuotes(""{'value':true}""),mapper.writeValueAsString(new SimpleWrapper(Boolean.TRUE)));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testSerPropInclusionNonAbsent",0,"public void testSerPropInclusionNonAbsent()throws Exception {JsonInclude.Value incl=JsonInclude.Value.construct(JsonInclude.Include.NON_ABSENT,JsonInclude.Include.NON_ABSENT);ObjectMapper mapper=new ObjectMapper();mapper.setDefaultPropertyInclusion(incl);assertEquals(aposToQuotes(""{'value':true}""),mapper.writeValueAsString(new SimpleWrapper(Boolean.TRUE)));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testSerPropInclusionNonEmpty",0,"public void testSerPropInclusionNonEmpty()throws Exception {JsonInclude.Value incl=JsonInclude.Value.construct(JsonInclude.Include.NON_ABSENT,JsonInclude.Include.NON_EMPTY);ObjectMapper mapper=new ObjectMapper();mapper.setDefaultPropertyInclusion(incl);assertEquals(aposToQuotes(""{'value':true}""),mapper.writeValueAsString(new SimpleWrapper(Boolean.TRUE)));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testPolymorphicAtomicReference",0,"public void testPolymorphicAtomicReference()throws Exception {RefWrapper input=new RefWrapper(13);String json=MAPPER.writeValueAsString(input);RefWrapper result=MAPPER.readValue(json,RefWrapper.class);assertNotNull(result.w);Object ob=result.w.get();assertEquals(Impl.class,ob.getClass());assertEquals(13,((Impl)ob).value);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testFilteringOfAtomicReference",0,"public void testFilteringOfAtomicReference()throws Exception {SimpleWrapper input=new SimpleWrapper(null);ObjectMapper mapper=MAPPER;assertEquals(""{\""value\"":null}"",mapper.writeValueAsString(input));mapper=new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL);assertEquals(""{\""value\"":null}"",mapper.writeValueAsString(input));mapper=new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);assertEquals(""{}"",mapper.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testTypeRefinement",0,"public void testTypeRefinement()throws Exception {RefiningWrapper input=new RefiningWrapper();BigDecimal bd=new BigDecimal(""0.25"");input.value=new AtomicReference<Serializable>(bd);String json=MAPPER.writeValueAsString(input);RefiningWrapper result=MAPPER.readValue(json,RefiningWrapper.class);assertNotNull(result.value);Object ob=result.value.get();assertEquals(BigDecimal.class,ob.getClass());assertEquals(bd,ob);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testDeserializeWithContentAs",0,"public void testDeserializeWithContentAs()throws Exception {AtomicRefReadWrapper result=MAPPER.readValue(aposToQuotes(""{'value':'abc'}""),AtomicRefReadWrapper.class);Object v=result.value.get();assertNotNull(v);assertEquals(WrappedString.class,v.getClass());assertEquals(""abc"",((WrappedString)v).value);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testWithUnwrapping",0,"public void testWithUnwrapping()throws Exception {String jsonExp=aposToQuotes(""{'XX.name':'Bob'}"");String jsonAct=MAPPER.writeValueAsString(new UnwrappingRefParent());assertEquals(jsonExp,jsonAct);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testWithCustomDeserializer",0,"public void testWithCustomDeserializer()throws Exception {LCStringWrapper w=MAPPER.readValue(aposToQuotes(""{'value':'FoobaR'}""),LCStringWrapper.class);assertEquals(""foobar"",w.value.get());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testEmpty1256",0,"public void testEmpty1256()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);String json=mapper.writeValueAsString(new Issue1256Bean());assertEquals(""{}"",json);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKAtomicTypesTest.testNullValueHandling",0,"@SuppressWarnings(""unchecked"")public void testNullValueHandling()throws Exception {ObjectMapper mapper=new ObjectMapper();AtomicReference<Double> inputData=new AtomicReference<Double>();String json=mapper.writeValueAsString(inputData);AtomicReference<Double> readData=(AtomicReference<Double>)mapper.readValue(json,AtomicReference.class);assertNotNull(readData);assertNull(readData.get());}"
"com.fasterxml.jackson.databind.misc.RaceCondition738Test.testRepeatedly",0,"public void testRepeatedly()throws Exception {final int COUNT=2000;for (int i=0;i < COUNT;i++){runOnce(i,COUNT);}}"
"com.fasterxml.jackson.databind.misc.RaceCondition738Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestTreeDeserialization.testObjectNodeEquality",0,"public void testObjectNodeEquality(){ObjectNode n1=new ObjectNode(null);ObjectNode n2=new ObjectNode(null);assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));n1.set(""x"",TextNode.valueOf(""Test""));assertFalse(n1.equals(n2));assertFalse(n2.equals(n1));n2.set(""x"",TextNode.valueOf(""Test""));assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"com.fasterxml.jackson.databind.node.TestTreeDeserialization.testReadFromString",0,"public void testReadFromString()throws Exception {String json=""{\""field\"":\""{\\\""name\\\"":\\\""John Smith\\\""}\""}"";ObjectMapper mapper=new ObjectMapper();JsonNode jNode=mapper.readValue(json,JsonNode.class);String generated=mapper.writeValueAsString(jNode);JsonNode out=mapper.readValue(generated,JsonNode.class);assertTrue(out.isObject());assertEquals(1,out.size());String value=out.path(""field"").asText();assertNotNull(value);}"
"com.fasterxml.jackson.databind.node.TestTreeDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.views.TestViewDeserialization.testSimple",0,"public void testSimple()throws Exception {Bean bean=mapper.readValue(""{\""a\"":3,\""aa\"":\""foo\"",\""b\"": 9 }"",Bean.class);assertEquals(3,bean.a);assertEquals(""foo"",bean.aa);assertEquals(9,bean.b);bean=mapper.readerWithView(ViewAA.class).forType(Bean.class).readValue(""{\""a\"":3,\""aa\"":\""foo\"",\""b\"": 9 }"");assertEquals(3,bean.a);assertEquals(""foo"",bean.aa);assertEquals(0,bean.b);bean=mapper.readerWithView(ViewA.class).forType(Bean.class).readValue(""{\""a\"":1,\""aa\"":\""x\"",\""b\"": 3 }"");assertEquals(1,bean.a);assertNull(bean.aa);assertEquals(0,bean.b);bean=mapper.readerFor(Bean.class).withView(ViewB.class).readValue(""{\""a\"":-3,\""aa\"":\""y\"",\""b\"": 2 }"");assertEquals(0,bean.a);assertEquals(""y"",bean.aa);assertEquals(2,bean.b);}"
"com.fasterxml.jackson.databind.views.TestViewDeserialization.testWithoutDefaultInclusion",0,"public void testWithoutDefaultInclusion()throws Exception {DefaultsBean bean=mapper.readValue(""{\""a\"":3,\""b\"": 9 }"",DefaultsBean.class);assertEquals(3,bean.a);assertEquals(9,bean.b);ObjectMapper myMapper=new ObjectMapper();myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION);bean=myMapper.readerWithView(ViewAA.class).forType(DefaultsBean.class).readValue(""{\""a\"":1,\""b\"": 2 }"");assertEquals(0,bean.a);assertEquals(2,bean.b);}"
"com.fasterxml.jackson.databind.views.TestViewDeserialization.testWithCreatorAndViews",0,"public void testWithCreatorAndViews()throws Exception {ViewsAndCreatorBean result;result=mapper.readerFor(ViewsAndCreatorBean.class).withView(ViewA.class).readValue(aposToQuotes(""{'a':1,'b':2}""));assertEquals(1,result.a);assertEquals(0,result.b);result=mapper.readerFor(ViewsAndCreatorBean.class).withView(ViewB.class).readValue(aposToQuotes(""{'a':1,'b':2}""));assertEquals(0,result.a);assertEquals(2,result.b);result=mapper.readerFor(ViewsAndCreatorBean.class).withView(ViewB.class).readValue(aposToQuotes(""{'a':[1,23,{}],'b':2}""));assertEquals(0,result.a);assertEquals(2,result.b);}"
"com.fasterxml.jackson.databind.views.TestViewDeserialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.contextual.TestContextualWithAnnDeserializer.testAnnotatedContextual",0,"public void testAnnotatedContextual()throws Exception {ObjectMapper mapper=new ObjectMapper();AnnotatedContextualClassBean bean=mapper.readValue(""{\""value\"":\""a\""}"",AnnotatedContextualClassBean.class);assertNotNull(bean);assertEquals(""xyz=a"",bean.value.value);}"
"com.fasterxml.jackson.databind.contextual.TestContextualWithAnnDeserializer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testDirectCreation",0,"public void testDirectCreation()throws IOException {ArrayNode n=new ArrayNode(JsonNodeFactory.instance);assertStandardEquals(n);assertFalse(n.elements().hasNext());assertFalse(n.fieldNames().hasNext());TextNode text=TextNode.valueOf(""x"");n.add(text);assertEquals(1,n.size());assertFalse(0 == n.hashCode());assertTrue(n.elements().hasNext());assertFalse(n.fieldNames().hasNext());assertNull(n.get(""x""));assertTrue(n.path(""x"").isMissingNode());assertSame(text,n.get(0));assertFalse(n.has(""field""));assertFalse(n.hasNonNull(""field""));assertTrue(n.has(0));assertTrue(n.hasNonNull(0));assertFalse(n.has(1));assertFalse(n.hasNonNull(1));n.add((JsonNode)null);assertEquals(2,n.size());assertTrue(n.get(1).isNull());assertTrue(n.has(1));assertFalse(n.hasNonNull(1));n.set(1,text);assertSame(text,n.get(1));n.set(0,null);assertTrue(n.get(0).isNull());ArrayNode n2=new ArrayNode(JsonNodeFactory.instance);n2.add(""foobar"");assertFalse(n.equals(n2));n.addAll(n2);assertEquals(3,n.size());assertFalse(n.get(0).isTextual());assertNotNull(n.remove(0));assertEquals(2,n.size());assertTrue(n.get(0).isTextual());assertNull(n.remove(-1));assertNull(n.remove(100));assertEquals(2,n.size());ArrayList<JsonNode> nodes=new ArrayList<JsonNode>();nodes.add(text);n.addAll(nodes);assertEquals(3,n.size());assertNull(n.get(10000));assertNull(n.remove(-4));TextNode text2=TextNode.valueOf(""b"");n.insert(0,text2);assertEquals(4,n.size());assertSame(text2,n.get(0));assertNotNull(n.addArray());assertEquals(5,n.size());n.addPOJO(""foo"");assertEquals(6,n.size());JsonGenerator g=objectMapper().getFactory().createGenerator(new StringWriter());n.serialize(g,null);g.close();n.removeAll();assertEquals(0,n.size());}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testDirectCreation2",0,"public void testDirectCreation2()throws IOException {JsonNodeFactory f=objectMapper().getNodeFactory();ArrayList<JsonNode> list=new ArrayList<>();list.add(f.booleanNode(true));list.add(f.textNode(""foo""));ArrayNode n=new ArrayNode(f,list);assertEquals(2,n.size());assertTrue(n.get(0).isBoolean());assertTrue(n.get(1).isTextual());try {n.set(2,f.nullNode());fail(""Should not pass"");}catch(IndexOutOfBoundsException e){verifyException(e,""illegal index"");}n.insert(1,(String)null);assertEquals(3,n.size());assertTrue(n.get(0).isBoolean());assertTrue(n.get(1).isNull());assertTrue(n.get(2).isTextual());n.removeAll();n.insert(0,(JsonNode)null);assertEquals(1,n.size());assertTrue(n.get(0).isNull());}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testArrayViaMapper",0,"public void testArrayViaMapper()throws Exception {final String JSON=""[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"";JsonNode n=objectMapper().readTree(JSON);assertNotNull(n);assertTrue(n.isArray());ArrayNode an=(ArrayNode)n;assertEquals(1,an.size());ArrayNode an2=(ArrayNode)n.get(0);assertTrue(an2.isArray());assertEquals(4,an2.size());}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testAdds",0,"public void testAdds(){ArrayNode n=new ArrayNode(JsonNodeFactory.instance);assertNotNull(n.addArray());assertNotNull(n.addObject());n.addPOJO(""foobar"");n.add(1);n.add(1L);n.add(0.5);n.add(0.5f);n.add(new BigDecimal(""0.2""));n.add(BigInteger.TEN);assertEquals(9,n.size());assertNotNull(n.insertArray(0));assertNotNull(n.insertObject(0));n.insertPOJO(2,""xxx"");assertEquals(12,n.size());n.insert(0,BigInteger.ONE);n.insert(0,new BigDecimal(""0.1""));assertEquals(14,n.size());}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testNullAdds",0,"public void testNullAdds(){JsonNodeFactory f=objectMapper().getNodeFactory();ArrayNode array=f.arrayNode(14);array.add((BigDecimal)null);array.add((BigInteger)null);array.add((Boolean)null);array.add((byte[])null);array.add((Double)null);array.add((Float)null);array.add((Integer)null);array.add((JsonNode)null);array.add((Long)null);array.add((String)null);assertEquals(10,array.size());for(JsonNode node : array){assertTrue(node.isNull());}}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testNullInserts",0,"public void testNullInserts(){JsonNodeFactory f=objectMapper().getNodeFactory();ArrayNode array=f.arrayNode(3);array.insert(0,(BigDecimal)null);array.insert(0,(BigInteger)null);array.insert(0,(Boolean)null);array.insert(-56,(byte[])null);array.insert(0,(Double)null);array.insert(200,(Float)null);array.insert(0,(Integer)null);array.insert(1,(JsonNode)null);array.insert(array.size(),(Long)null);array.insert(1,(String)null);assertEquals(10,array.size());for(JsonNode node : array){assertTrue(node.isNull());}}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testNullChecking",0,"public void testNullChecking(){ArrayNode a1=JsonNodeFactory.instance.arrayNode();ArrayNode a2=JsonNodeFactory.instance.arrayNode();a1.addAll(a2);assertEquals(0,a1.size());assertEquals(0,a2.size());a2.addAll(a1);assertEquals(0,a1.size());assertEquals(0,a2.size());}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testNullChecking2",0,"public void testNullChecking2(){ObjectMapper mapper=new ObjectMapper();ArrayNode src=mapper.createArrayNode();ArrayNode dest=mapper.createArrayNode();src.add(""element"");dest.addAll(src);}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testParser",0,"public void testParser()throws Exception {ArrayNode n=new ArrayNode(JsonNodeFactory.instance);n.add(123);TreeTraversingParser p=new TreeTraversingParser(n,null);p.setCodec(null);assertNull(p.getCodec());assertNotNull(p.getParsingContext());assertNotNull(p.getTokenLocation());assertNotNull(p.getCurrentLocation());assertNull(p.getEmbeddedObject());assertNull(p.currentNode());assertToken(JsonToken.START_ARRAY,p.nextToken());p.skipChildren();assertToken(JsonToken.END_ARRAY,p.getCurrentToken());p.close();p=new TreeTraversingParser(n,null);p.nextToken();assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(JsonParser.NumberType.INT,p.getNumberType());p.close();}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testArrayNodeEquality",0,"public void testArrayNodeEquality(){ArrayNode n1=new ArrayNode(null);ArrayNode n2=new ArrayNode(null);assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));n1.add(TextNode.valueOf(""Test""));assertFalse(n1.equals(n2));assertFalse(n2.equals(n1));n2.add(TextNode.valueOf(""Test""));assertTrue(n1.equals(n2));assertTrue(n2.equals(n1));}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testSimpleArray",0,"public void testSimpleArray()throws Exception {ArrayNode result=objectMapper().createArrayNode();assertTrue(result.isArray());assertType(result,ArrayNode.class);assertFalse(result.isObject());assertFalse(result.isNumber());assertFalse(result.isNull());assertFalse(result.isTextual());result.add(false);result.insertNull(0);assertEquals(result,result);assertFalse(result.equals(null));assertEquals(NullNode.instance,result.path(0));assertEquals(NullNode.instance,result.get(0));assertEquals(BooleanNode.FALSE,result.path(1));assertEquals(BooleanNode.FALSE,result.get(1));assertEquals(2,result.size());assertNull(result.get(-1));assertNull(result.get(2));JsonNode missing=result.path(2);assertTrue(missing.isMissingNode());assertTrue(result.path(-100).isMissingNode());ArrayNode array2=objectMapper().createArrayNode();array2.addNull();array2.add(false);assertEquals(result,array2);JsonNode rm1=array2.remove(0);assertEquals(NullNode.instance,rm1);assertEquals(1,array2.size());assertEquals(BooleanNode.FALSE,array2.get(0));assertFalse(result.equals(array2));JsonNode rm2=array2.remove(0);assertEquals(BooleanNode.FALSE,rm2);assertEquals(0,array2.size());}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.testSimpleMismatch",0,"public void testSimpleMismatch()throws Exception {ObjectMapper mapper=objectMapper();try {mapper.readValue("" 123 "",ArrayNode.class);fail(""Should not pass"");}catch(MismatchedInputException e){verifyException(e,""out of VALUE_NUMBER_INT token"");}}"
"com.fasterxml.jackson.databind.node.ArrayNodeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testClassDeserializer",0,"public void testClassDeserializer()throws Exception {ObjectMapper m=new ObjectMapper();ValueClass result=m.readValue(""  123  "",ValueClass.class);assertEquals(123,result._a);}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testMethodDeserializer",0,"public void testMethodDeserializer()throws Exception {ObjectMapper m=new ObjectMapper();MethodBean result=m.readValue(""{\""ints\"" : 3}"",MethodBean.class);assertNotNull(result);int[]ints=result._ints;assertNotNull(ints);assertEquals(1,ints.length);assertEquals(3,ints[0]);}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testArrayContentUsing",0,"public void testArrayContentUsing()throws Exception {ObjectMapper m=new ObjectMapper();ArrayBean result=m.readValue(""{\""values\"" :[1,2,3 ]}"",ArrayBean.class);assertNotNull(result);Object[]obs=result.values;assertNotNull(obs);assertEquals(3,obs.length);assertEquals(ValueClass.class,obs[0].getClass());assertEquals(1,((ValueClass)obs[0])._a);assertEquals(ValueClass.class,obs[1].getClass());assertEquals(2,((ValueClass)obs[1])._a);assertEquals(ValueClass.class,obs[2].getClass());assertEquals(3,((ValueClass)obs[2])._a);}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testListContentUsing",0,"public void testListContentUsing()throws Exception {ObjectMapper m=new ObjectMapper();ListBean result=m.readValue(""{\""values\"" :[1,2,3 ]}"",ListBean.class);assertNotNull(result);List<Object> obs=result.values;assertNotNull(obs);assertEquals(3,obs.size());assertEquals(ValueClass.class,obs.get(0).getClass());assertEquals(1,((ValueClass)obs.get(0))._a);assertEquals(ValueClass.class,obs.get(1).getClass());assertEquals(2,((ValueClass)obs.get(1))._a);assertEquals(ValueClass.class,obs.get(2).getClass());assertEquals(3,((ValueClass)obs.get(2))._a);}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testMapContentUsing",0,"public void testMapContentUsing()throws Exception {ObjectMapper m=new ObjectMapper();MapBean result=m.readValue(""{\""values\"" :{\""a\"": 1,\""b\"":2}}"",MapBean.class);assertNotNull(result);Map<String,Object> map=result.values;assertNotNull(map);assertEquals(2,map.size());assertEquals(ValueClass.class,map.get(""a"").getClass());assertEquals(1,((ValueClass)map.get(""a""))._a);assertEquals(ValueClass.class,map.get(""b"").getClass());assertEquals(2,((ValueClass)map.get(""b""))._a);}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testMapKeyUsing",0,"public void testMapKeyUsing()throws Exception {ObjectMapper m=new ObjectMapper();MapKeyBean result=m.readValue(""{\""values\"" :{\""a\"": true}}"",MapKeyBean.class);assertNotNull(result);Map<Object,Object> map=result.values;assertNotNull(map);assertEquals(1,map.size());Map.Entry<Object,Object> en=map.entrySet().iterator().next();assertEquals(String[].class,en.getKey().getClass());assertEquals(Boolean.TRUE,en.getValue());}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.testRootValueWithCustomKey",0,"public void testRootValueWithCustomKey()throws Exception {ObjectMapper m=new ObjectMapper();MapKeyMap result=m.readValue(""{\""a\"": 13}"",MapKeyMap.class);assertNotNull(result);assertNotNull(result);assertEquals(1,result.size());Map.Entry<Object,Object> en=result.entrySet().iterator().next();assertEquals(ValueClass.class,en.getValue().getClass());assertEquals(13,((ValueClass)en.getValue())._a);assertEquals(String[].class,en.getKey().getClass());}"
"com.fasterxml.jackson.databind.deser.TestAnnotationUsing.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsPojoTest.testFailOnNull",0,"public void testFailOnNull()throws Exception {NullFail result=MAPPER.readValue(aposToQuotes(""{'noNulls':'foo','nullsOk':null}""),NullFail.class);assertEquals(""foo"",result.noNulls);assertNull(result.nullsOk);try {result=MAPPER.readValue(aposToQuotes(""{'noNulls':null}""),NullFail.class);fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""noNulls\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsPojoTest.testFailOnNullWithDefaults",0,"public void testFailOnNullWithDefaults()throws Exception {String json=aposToQuotes(""{'name':null}"");NullsForString def=MAPPER.readValue(json,NullsForString.class);assertNull(def.getName());ObjectMapper mapper=newObjectMapper();mapper.configOverride(String.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.FAIL));try {mapper.readValue(json,NullsForString.class);fail(""Should not pass"");}catch(InvalidNullException e){verifyException(e,""property \""name\"""");}}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsPojoTest.testNullsToEmptyScalar",0,"public void testNullsToEmptyScalar()throws Exception {NullAsEmpty result=MAPPER.readValue(aposToQuotes(""{'nullAsEmpty':'foo','nullsOk':null}""),NullAsEmpty.class);assertEquals(""foo"",result.nullAsEmpty);assertNull(result.nullsOk);result=MAPPER.readValue(aposToQuotes(""{'nullAsEmpty':null}""),NullAsEmpty.class);assertEquals("""",result.nullAsEmpty);String json=aposToQuotes(""{'name':null}"");NullsForString def=MAPPER.readValue(json,NullsForString.class);assertNull(def.getName());ObjectMapper mapper=newObjectMapper();mapper.configOverride(String.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY));NullsForString named=mapper.readValue(json,NullsForString.class);assertEquals("""",named.getName());}"
"com.fasterxml.jackson.databind.deser.filter.NullConversionsPojoTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.merge.UpdateValueTest.testValueUpdateWithCreator",0,"public void testValueUpdateWithCreator()throws Exception {Bean bean=new Bean(""abc"",""def"");MAPPER.readerFor(Bean.class).withValueToUpdate(bean).readValue(""{\""a\"":\""ghi\"",\""b\"":\""jkl\""}"");assertEquals(""ghi"",bean.getA());assertEquals(""jkl"",bean.getB());}"
"com.fasterxml.jackson.databind.deser.merge.UpdateValueTest.testValueUpdateOther",0,"public void testValueUpdateOther()throws Exception {Bean bean=new Bean(""abc"",""def"");ObjectReader r=MAPPER.readerFor(Bean.class).withValueToUpdate(bean);r=r.withValueToUpdate(null);Bean result=r.readValue(aposToQuotes(""{'a':'x'}""));assertNotNull(result);}"
"com.fasterxml.jackson.databind.deser.merge.UpdateValueTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testSimpleRefs",0,"public void testSimpleRefs()throws Exception {SimpleTreeNode root=new SimpleTreeNode(""root"");SimpleTreeNode child=new SimpleTreeNode(""kid"");root.child=child;child.parent=root;String json=MAPPER.writeValueAsString(root);SimpleTreeNode resultNode=MAPPER.readValue(json,SimpleTreeNode.class);assertEquals(""root"",resultNode.name);SimpleTreeNode resultChild=resultNode.child;assertNotNull(resultChild);assertEquals(""kid"",resultChild.name);assertSame(resultChild.parent,resultNode);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testSimpleRefsWithGetter",0,"public void testSimpleRefsWithGetter()throws Exception {SimpleTreeNode2 root=new SimpleTreeNode2(""root"");SimpleTreeNode2 child=new SimpleTreeNode2(""kid"");root.child=child;child.parent=root;String json=MAPPER.writeValueAsString(root);SimpleTreeNode2 resultNode=MAPPER.readValue(json,SimpleTreeNode2.class);assertEquals(""root"",resultNode.name);SimpleTreeNode2 resultChild=resultNode.child;assertNotNull(resultChild);assertEquals(""kid"",resultChild.name);assertSame(resultChild.parent,resultNode);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testFullRefs",0,"public void testFullRefs()throws Exception {FullTreeNode root=new FullTreeNode(""root"");FullTreeNode child1=new FullTreeNode(""kid1"");FullTreeNode child2=new FullTreeNode(""kid2"");root.firstChild=child1;child1.parent=root;child1.next=child2;child2.prev=child1;String json=MAPPER.writeValueAsString(root);FullTreeNode resultNode=MAPPER.readValue(json,FullTreeNode.class);assertEquals(""root"",resultNode.name);FullTreeNode resultChild=resultNode.firstChild;assertNotNull(resultChild);assertEquals(""kid1"",resultChild.name);assertSame(resultChild.parent,resultNode);assertNull(resultChild.prev);FullTreeNode resultChild2=resultChild.next;assertNotNull(resultChild2);assertEquals(""kid2"",resultChild2.name);assertSame(resultChild,resultChild2.prev);assertNull(resultChild2.next);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testArrayOfRefs",0,"public void testArrayOfRefs()throws Exception {NodeArray root=new NodeArray();ArrayNode node1=new ArrayNode(""a"");ArrayNode node2=new ArrayNode(""b"");root.nodes=new ArrayNode[]{node1,node2};String json=MAPPER.writeValueAsString(root);NodeArray result=MAPPER.readValue(json,NodeArray.class);ArrayNode[]kids=result.nodes;assertNotNull(kids);assertEquals(2,kids.length);assertEquals(""a"",kids[0].name);assertEquals(""b"",kids[1].name);assertSame(result,kids[0].parent);assertSame(result,kids[1].parent);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testListOfRefs",0,"public void testListOfRefs()throws Exception {NodeList root=new NodeList();NodeForList node1=new NodeForList(""a"");NodeForList node2=new NodeForList(""b"");root.nodes=Arrays.asList(node1,node2);String json=MAPPER.writeValueAsString(root);NodeList result=MAPPER.readValue(json,NodeList.class);List<NodeForList> kids=result.nodes;assertNotNull(kids);assertEquals(2,kids.size());assertEquals(""a"",kids.get(0).name);assertEquals(""b"",kids.get(1).name);assertSame(result,kids.get(0).parent);assertSame(result,kids.get(1).parent);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testMapOfRefs",0,"public void testMapOfRefs()throws Exception {NodeMap root=new NodeMap();NodeForMap node1=new NodeForMap(""a"");NodeForMap node2=new NodeForMap(""b"");Map<String,NodeForMap> nodes=new HashMap<String,NodeForMap>();nodes.put(""a1"",node1);nodes.put(""b2"",node2);root.nodes=nodes;String json=MAPPER.writeValueAsString(root);NodeMap result=MAPPER.readValue(json,NodeMap.class);Map<String,NodeForMap> kids=result.nodes;assertNotNull(kids);assertEquals(2,kids.size());assertNotNull(kids.get(""a1""));assertNotNull(kids.get(""b2""));assertEquals(""a"",kids.get(""a1"").name);assertEquals(""b"",kids.get(""b2"").name);assertSame(result,kids.get(""a1"").parent);assertSame(result,kids.get(""b2"").parent);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testAbstract368",0,"public void testAbstract368()throws Exception {AbstractNode parent=new ConcreteNode(""p"");AbstractNode child=new ConcreteNode(""c"");parent.next=child;child.prev=parent;String json=MAPPER.writeValueAsString(parent);AbstractNode root=MAPPER.readValue(json,AbstractNode.class);assertEquals(ConcreteNode.class,root.getClass());assertEquals(""p"",root.id);assertNull(root.prev);AbstractNode leaf=root.next;assertNotNull(leaf);assertEquals(""c"",leaf.id);assertSame(root,leaf.prev);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testIssue693",0,"public void testIssue693()throws Exception {Parent parent=new Parent();parent.addChild(new Child(""foo""));parent.addChild(new Child(""bar""));byte[]bytes=MAPPER.writeValueAsBytes(parent);Parent value=MAPPER.readValue(bytes,Parent.class);for(Child child : value.children){assertEquals(value,child.getParent());}}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.testIssue708",0,"public void testIssue708()throws Exception {Advertisement708 ad=MAPPER.readValue(""{\""title\"":\""Hroch\"",\""photos\"":[{\""id\"":3}]}"",Advertisement708.class);assertNotNull(ad);}"
"com.fasterxml.jackson.databind.struct.TestParentChildReferences.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.Base64DecodingTest.testInvalidBase64",0,"public void testInvalidBase64()throws Exception {byte[]b=MAPPER.readValue(quote(BASE64_HELLO),byte[].class);assertEquals(HELLO_BYTES,b);_testInvalidBase64(MAPPER,BASE64_HELLO + ""!"");_testInvalidBase64(MAPPER,BASE64_HELLO + ""!!"");}"
"com.fasterxml.jackson.databind.deser.jdk.Base64DecodingTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testBigDecimal",0,"public void testBigDecimal()throws Exception {Map<String,Object> map=new HashMap<String,Object>();String PI_STR=""3.14159265"";map.put(""pi"",new BigDecimal(PI_STR));String str=MAPPER.writeValueAsString(map);assertEquals(""{\""pi\"":3.14159265}"",str);}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testBigDecimalAsPlainString",0,"public void testBigDecimalAsPlainString()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);Map<String,Object> map=new HashMap<String,Object>();String PI_STR=""3.00000000"";map.put(""pi"",new BigDecimal(PI_STR));String str=mapper.writeValueAsString(map);assertEquals(""{\""pi\"":3.00000000}"",str);}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testFile",0,"public void testFile()throws IOException {File f=new File(new File(""/tmp""),""foo.text"");String str=MAPPER.writeValueAsString(f);String escapedAbsPath=f.getAbsolutePath().replaceAll(""\\\\"",""\\\\\\\\"");assertEquals(quote(escapedAbsPath),str);}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testRegexps",0,"public void testRegexps()throws IOException {final String PATTERN_STR=""\\s+([a-b]+)\\w?"";Pattern p=Pattern.compile(PATTERN_STR);Map<String,Object> input=new HashMap<String,Object>();input.put(""p"",p);Map<String,Object> result=writeAndMap(MAPPER,input);assertEquals(p.pattern(),result.get(""p""));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testCurrency",0,"public void testCurrency()throws IOException {Currency usd=Currency.getInstance(""USD"");assertEquals(quote(""USD""),MAPPER.writeValueAsString(usd));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testLocale",0,"public void testLocale()throws IOException {assertEquals(quote(""en""),MAPPER.writeValueAsString(new Locale(""en"")));assertEquals(quote(""es_ES""),MAPPER.writeValueAsString(new Locale(""es"",""ES"")));assertEquals(quote(""fi_FI_savo""),MAPPER.writeValueAsString(new Locale(""FI"",""fi"",""savo"")));assertEquals(quote(""en_US""),MAPPER.writeValueAsString(Locale.US));assertEquals(quote(""""),MAPPER.writeValueAsString(Locale.ROOT));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testInetAddress",0,"public void testInetAddress()throws IOException {assertEquals(quote(""127.0.0.1""),MAPPER.writeValueAsString(InetAddress.getByName(""127.0.0.1"")));InetAddress input=InetAddress.getByName(""google.com"");assertEquals(quote(""google.com""),MAPPER.writeValueAsString(input));ObjectMapper mapper=new ObjectMapper();mapper.configOverride(InetAddress.class).setFormat(JsonFormat.Value.forShape(JsonFormat.Shape.NUMBER));String json=mapper.writeValueAsString(input);assertEquals(quote(input.getHostAddress()),json);assertEquals(String.format(""{\""value\"":\""%s\""}"",input.getHostAddress()),mapper.writeValueAsString(new InetAddressBean(input)));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testInetSocketAddress",0,"public void testInetSocketAddress()throws IOException {assertEquals(quote(""127.0.0.1:8080""),MAPPER.writeValueAsString(new InetSocketAddress(""127.0.0.1"",8080)));assertEquals(quote(""google.com:6667""),MAPPER.writeValueAsString(new InetSocketAddress(""google.com"",6667)));assertEquals(quote(""[2001:db8:85a3:8d3:1319:8a2e:370:7348]:443""),MAPPER.writeValueAsString(new InetSocketAddress(""2001:db8:85a3:8d3:1319:8a2e:370:7348"",443)));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testClass",0,"public void testClass()throws IOException {assertEquals(quote(""java.lang.String""),MAPPER.writeValueAsString(String.class));assertEquals(quote(""int""),MAPPER.writeValueAsString(Integer.TYPE));assertEquals(quote(""boolean""),MAPPER.writeValueAsString(Boolean.TYPE));assertEquals(quote(""void""),MAPPER.writeValueAsString(Void.TYPE));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testCharset",0,"public void testCharset()throws IOException {assertEquals(quote(""UTF-8""),MAPPER.writeValueAsString(Charset.forName(""UTF-8"")));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testByteBuffer",0,"public void testByteBuffer()throws IOException {final byte[]INPUT_BYTES=new byte[]{1,2,3,4,5};String exp=MAPPER.writeValueAsString(INPUT_BYTES);ByteBuffer bbuf=ByteBuffer.wrap(INPUT_BYTES);assertEquals(exp,MAPPER.writeValueAsString(bbuf));ByteBuffer bbuf2=ByteBuffer.allocateDirect(5);bbuf2.put(INPUT_BYTES);assertEquals(exp,MAPPER.writeValueAsString(bbuf2));}"
"com.fasterxml.jackson.databind.ser.jdk.JDKTypeSerializationTest.testUUIDs",0,"public void testUUIDs()throws IOException {for(String value : new String[]{""76e6d183-5f68-4afa-b94a-922c1fdb83f8"",""540a88d1-e2d8-4fb1-9396-9212280d0a7f"",""2c9e441d-1cd0-472d-9bab-69838f877574"",""591b2869-146e-41d7-8048-e8131f1fdec5"",""82994ac2-7b23-49f2-8cc5-e24cf6ed77be"",""00000007-0000-0000-0000-000000000000""}){UUID uuid=UUID.fromString(value);String json=MAPPER.writeValueAsString(uuid);assertEquals(quote(uuid.toString()),json);String str=MAPPER.convertValue(uuid,String.class);assertEquals(value,str);}final String TEMPL=""00000000-0000-0000-0000-000000000000"";final String chars=""123456789abcdef"";for (int i=0;i < chars.length();++i){String value=TEMPL.replace('0',chars.charAt(i));UUID uuid=UUID.fromString(value);String json=MAPPER.writeValueAsString(uuid);assertEquals(quote(uuid.toString()),json);}}"
"com.fasterxml.jackson.databind.convert.ConvertingAbstractSerializer795Test.testAbstractTypeDeserialization",0,"public void testAbstractTypeDeserialization()throws Exception {String test=""{\""customField\"": \""customString\""}"";AbstractCustomTypeUser cu=JSON_MAPPER.readValue(test,AbstractCustomTypeUser.class);assertNotNull(cu);}"
"com.fasterxml.jackson.databind.convert.ConvertingAbstractSerializer795Test.testNonAbstractDeserialization",0,"public void testNonAbstractDeserialization()throws Exception {String test=""{\""customField\"": \""customString\""}"";NonAbstractCustomTypeUser cu=JSON_MAPPER.readValue(test,NonAbstractCustomTypeUser.class);assertNotNull(cu);}"
"com.fasterxml.jackson.databind.convert.ConvertingAbstractSerializer795Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums.testSimpleEnumBean",0,"public void testSimpleEnumBean()throws Exception {TimeUnitBean bean=new TimeUnitBean();bean.timeUnit=TimeUnit.SECONDS;ObjectMapper m=new ObjectMapper();String json=m.writeValueAsString(bean);TimeUnitBean result=m.readValue(json,TimeUnitBean.class);assertEquals(TimeUnit.SECONDS,result.timeUnit);m=new ObjectMapper();m.enableDefaultTyping();json=m.writeValueAsString(bean);result=m.readValue(json,TimeUnitBean.class);assertEquals(TimeUnit.SECONDS,result.timeUnit);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums.testSimpleEnumsInObjectArray",0,"public void testSimpleEnumsInObjectArray()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();String json=m.writeValueAsString(new Object[]{TestEnum.A});assertEquals(""[[\""com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\"",\""A\""]]"",json);Object[]value=m.readValue(json,Object[].class);assertEquals(1,value.length);assertSame(TestEnum.A,value[0]);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums.testSimpleEnumsAsField",0,"public void testSimpleEnumsAsField()throws Exception {ObjectMapper m=new ObjectMapper();m.enableDefaultTyping();String json=m.writeValueAsString(new EnumHolder(TestEnum.B));assertEquals(""{\""value\"":[\""com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums$TestEnum\"",\""B\""]}"",json);EnumHolder holder=m.readValue(json,EnumHolder.class);assertSame(TestEnum.B,holder.value);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForEnums.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testAbstractFailure",0,"/** * Test to verify details of how trying to deserialize into abstract type should fail (if there is no way to determine actual type information for the concrete type to use)*/public void testAbstractFailure()throws Exception {try {MAPPER.readValue(""{\""x\"" : 3 }"",Abstract.class);fail(""Should fail on trying to deserialize abstract type"");}catch(JsonProcessingException e){verifyException(e,""can not construct"");}}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testPropertyRemoval",0,"public void testPropertyRemoval()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new ModuleImpl(new RemovingModifier(""a"")));Bean bean=mapper.readValue(""{\""b\"":\""2\""}"",Bean.class);assertEquals(""2"",bean.b);assertEquals(""a"",bean.a);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testDeserializerReplacement",0,"public void testDeserializerReplacement()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new ModuleImpl(new ReplacingModifier(new BogusBeanDeserializer(""foo"",""bar""))));Bean bean=mapper.readValue(""{\""a\"":\""xyz\""}"",Bean.class);assertEquals(""foo"",bean.a);assertEquals(""bar"",bean.b);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testIssue476",0,"public void testIssue476()throws Exception {final String JSON=""{\""value1\"" : {\""name\"" : \""fruit\"",\""value\"" : \""apple\""},\""value2\"" : {\""name\"" : \""color\"",\""value\"" : \""red\""}}"";ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new Issue476Module());mapper.readValue(JSON,Issue476Bean.class);assertEquals(2,Issue476Deserializer.propCount);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testPOJOFromEmptyString",0,"public void testPOJOFromEmptyString()throws Exception {assertFalse(MAPPER.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT));try {MAPPER.readValue(quote(""""),Bean.class);fail(""Should not accept Empty String for POJO"");}catch(JsonProcessingException e){verifyException(e,""from String value"");assertValidLocation(e.getLocation());}ObjectReader r=MAPPER.readerFor(Bean.class).with(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);Bean result=r.readValue(quote(""""));assertNull(result);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testModifyArrayDeserializer",0,"public void testModifyArrayDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setDeserializerModifier(new ArrayDeserializerModifier()));Object[]result=mapper.readValue(""[1,2]"",Object[].class);assertEquals(1,result.length);assertEquals(""foo"",result[0]);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testModifyCollectionDeserializer",0,"public void testModifyCollectionDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setDeserializerModifier(new CollectionDeserializerModifier()));List<?> result=mapper.readValue(""[1,2]"",List.class);assertEquals(1,result.size());assertEquals(""foo"",result.get(0));}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testModifyMapDeserializer",0,"public void testModifyMapDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setDeserializerModifier(new MapDeserializerModifier()));Map<?,?> result=mapper.readValue(""{\""a\"":1,\""b\"":2}"",Map.class);assertEquals(1,result.size());assertEquals(""foo"",result.get(""a""));}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testModifyEnumDeserializer",0,"public void testModifyEnumDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setDeserializerModifier(new EnumDeserializerModifier()));Object result=mapper.readValue(quote(""B""),EnumABC.class);assertEquals(""foo"",result);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testModifyKeyDeserializer",0,"public void testModifyKeyDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setDeserializerModifier(new KeyDeserializerModifier()));Map<?,?> result=mapper.readValue(""{\""a\"":1}"",Map.class);assertEquals(1,result.size());assertEquals(""foo"",result.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.testModifyStdScalarDeserializer",0,"/** * Test to verify that even standard deserializers will result in `modifyDeserializer` getting appropriately called.*/public void testModifyStdScalarDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.registerModule(new SimpleModule(""test"").setDeserializerModifier(new BeanDeserializerModifier(){@Override public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config,BeanDescription beanDesc,JsonDeserializer<?> deser){if (beanDesc.getBeanClass()== String.class){return new UCStringDeserializer(deser);}return deser;}}));Object result=mapper.readValue(quote(""abcDEF""),String.class);assertEquals(""ABCDEF"",result);}"
"com.fasterxml.jackson.databind.deser.TestBeanDeserializer.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreators.testSimpleConstructor",0,"public void testSimpleConstructor()throws Exception {ConstructorBean bean=MAPPER.readValue(""{\""x\"" : 42 }"",ConstructorBean.class);assertEquals(42,bean.x);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testNoArgsFactory",0,"public void testNoArgsFactory()throws Exception {NoArgFactoryBean value=MAPPER.readValue(""{\""y\"":13}"",NoArgFactoryBean.class);assertEquals(13,value.y);assertEquals(123,value.x);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testSimpleDoubleConstructor",0,"public void testSimpleDoubleConstructor()throws Exception {Double exp=new Double(""0.25"");DoubleConstructorBean bean=MAPPER.readValue(exp.toString(),DoubleConstructorBean.class);assertEquals(exp,bean.d);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testSimpleBooleanConstructor",0,"public void testSimpleBooleanConstructor()throws Exception {BooleanConstructorBean bean=MAPPER.readValue("" true "",BooleanConstructorBean.class);assertEquals(Boolean.TRUE,bean.b);BooleanConstructorBean2 bean2=MAPPER.readValue("" true "",BooleanConstructorBean2.class);assertTrue(bean2.b);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testSimpleFactory",0,"public void testSimpleFactory()throws Exception {FactoryBean bean=MAPPER.readValue(""{\""f\"" : 0.25 }"",FactoryBean.class);assertEquals(0.25,bean.d);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testLongFactory",0,"public void testLongFactory()throws Exception {long VALUE=123456789000L;LongFactoryBean bean=MAPPER.readValue(String.valueOf(VALUE),LongFactoryBean.class);assertEquals(VALUE,bean.value);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testStringFactory",0,"public void testStringFactory()throws Exception {String str=""abc"";StringFactoryBean bean=MAPPER.readValue(quote(str),StringFactoryBean.class);assertEquals(str,bean.value);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testStringFactoryAlt",0,"public void testStringFactoryAlt()throws Exception {String str=""xyz"";FromStringBean bean=MAPPER.readValue(quote(str),FromStringBean.class);assertEquals(str,bean.value);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testConstructorCreator",0,"public void testConstructorCreator()throws Exception {CreatorBean bean=MAPPER.readValue(""{\""a\"" : \""xyz\"",\""x\"" : 12 }"",CreatorBean.class);assertEquals(13,bean.x);assertEquals(""ctor:xyz"",bean.a);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testConstructorAndProps",0,"public void testConstructorAndProps()throws Exception {ConstructorAndPropsBean bean=MAPPER.readValue(""{\""a\"" : \""1\"",\""b\"": 2,\""c\"" : true }"",ConstructorAndPropsBean.class);assertEquals(1,bean.a);assertEquals(2,bean.b);assertEquals(true,bean.c);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testFactoryAndProps",0,"public void testFactoryAndProps()throws Exception {FactoryAndPropsBean bean=MAPPER.readValue(""{\""a\"" :[false,true,false ],\""b\"": 2,\""c\"" : -1 }"",FactoryAndPropsBean.class);assertEquals(2,bean.arg2);assertEquals(-1,bean.arg3);boolean[]arg1=bean.arg1;assertNotNull(arg1);assertEquals(3,arg1.length);assertFalse(arg1[0]);assertTrue(arg1[1]);assertFalse(arg1[2]);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testMultipleCreators",0,"/** * Test to verify that multiple creators may co-exist,iff they use different JSON type as input*/public void testMultipleCreators()throws Exception {MultiBean bean=MAPPER.readValue(""123"",MultiBean.class);assertEquals(Integer.valueOf(123),bean.value);bean=MAPPER.readValue(quote(""abc""),MultiBean.class);assertEquals(""abc"",bean.value);bean=MAPPER.readValue(""0.25"",MultiBean.class);assertEquals(Double.valueOf(0.25),bean.value);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testDeferredConstructorAndProps",0,"public void testDeferredConstructorAndProps()throws Exception {DeferredConstructorAndPropsBean bean=MAPPER.readValue(""{\""propB\"" : \""...\"",\""createA\"" :[1 ],\""propA\"" : null }"",DeferredConstructorAndPropsBean.class);assertEquals(""..."",bean.propB);assertNull(bean.propA);assertNotNull(bean.createA);assertEquals(1,bean.createA.length);assertEquals(1,bean.createA[0]);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testDeferredFactoryAndProps",0,"public void testDeferredFactoryAndProps()throws Exception {DeferredFactoryAndPropsBean bean=MAPPER.readValue(""{\""prop\"" : \""1\"",\""ctor\"" : \""2\"" }"",DeferredFactoryAndPropsBean.class);assertEquals(""1"",bean.prop);assertEquals(""2"",bean.ctor);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testFactoryCreatorWithMixin",0,"public void testFactoryCreatorWithMixin()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(CreatorBean.class,MixIn.class);CreatorBean bean=m.readValue(""{\""a\"" : \""xyz\"",\""x\"" : 12 }"",CreatorBean.class);assertEquals(11,bean.x);assertEquals(""factory:xyz"",bean.a);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testFactoryCreatorWithRenamingMixin",0,"public void testFactoryCreatorWithRenamingMixin()throws Exception {ObjectMapper m=new ObjectMapper();m.addMixIn(FactoryBean.class,FactoryBeanMixIn.class);FactoryBean bean=m.readValue(""{\""mixed\"" :  20.5 }"",FactoryBean.class);assertEquals(20.5,bean.d);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testMapWithConstructor",0,"public void testMapWithConstructor()throws Exception {MapWithCtor result=MAPPER.readValue(""{\""text\"":\""abc\"",\""entry\"":true,\""number\"":123,\""xy\"":\""yx\""}"",MapWithCtor.class);assertEquals(Boolean.TRUE,result.get(""entry""));assertEquals(""yx"",result.get(""xy""));assertEquals(2,result.size());assertEquals(""abc"",result._text);assertEquals(123,result._number);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testMapWithFactory",0,"public void testMapWithFactory()throws Exception {MapWithFactory result=MAPPER.readValue(""{\""x\"":\""...\"",\""b\"":true  }"",MapWithFactory.class);assertEquals(""..."",result.get(""x""));assertEquals(1,result.size());assertEquals(Boolean.TRUE,result._b);}"
"com.fasterxml.jackson.databind.creators.TestCreators.testBrokenConstructor",0,"public void testBrokenConstructor()throws Exception {try {MAPPER.readValue(""{\""x\"" : 42 }"",BrokenBean.class);}catch(JsonMappingException je){verifyException(je,""has no property name"");}}"
"com.fasterxml.jackson.databind.creators.TestCreators.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testOldSchemaGeneration",0,"/** * tests generating json-schema stuff.*/public void testOldSchemaGeneration()throws Exception {JsonSchema jsonSchema=MAPPER.generateJsonSchema(SimpleBean.class);assertNotNull(jsonSchema);assertTrue(jsonSchema.equals(jsonSchema));assertFalse(jsonSchema.equals(null));assertFalse(jsonSchema.equals(""foo""));assertNotNull(jsonSchema.toString());assertNotNull(JsonSchema.getDefaultSchemaNode());ObjectNode root=jsonSchema.getSchemaNode();assertEquals(""object"",root.get(""type"").asText());assertEquals(false,root.path(""required"").booleanValue());JsonNode propertiesSchema=root.get(""properties"");assertNotNull(propertiesSchema);JsonNode property1Schema=propertiesSchema.get(""property1"");assertNotNull(property1Schema);assertEquals(""integer"",property1Schema.get(""type"").asText());assertEquals(false,property1Schema.path(""required"").booleanValue());JsonNode property2Schema=propertiesSchema.get(""property2"");assertNotNull(property2Schema);assertEquals(""string"",property2Schema.get(""type"").asText());assertEquals(false,property2Schema.path(""required"").booleanValue());JsonNode property3Schema=propertiesSchema.get(""property3"");assertNotNull(property3Schema);assertEquals(""array"",property3Schema.get(""type"").asText());assertEquals(false,property3Schema.path(""required"").booleanValue());assertEquals(""string"",property3Schema.get(""items"").get(""type"").asText());JsonNode property4Schema=propertiesSchema.get(""property4"");assertNotNull(property4Schema);assertEquals(""array"",property4Schema.get(""type"").asText());assertEquals(false,property4Schema.path(""required"").booleanValue());assertEquals(""number"",property4Schema.get(""items"").get(""type"").asText());}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testGeneratingJsonSchemaWithFilters",0,"public void testGeneratingJsonSchemaWithFilters()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setFilters(secretFilterProvider);JsonSchema schema=mapper.generateJsonSchema(FilteredBean.class);JsonNode node=schema.getSchemaNode().get(""properties"");assertTrue(node.has(""obvious""));assertFalse(node.has(""secret""));}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testSchemaSerialization",0,"/** * Additional unit test for verifying that schema object itself can be properly serialized*/public void testSchemaSerialization()throws Exception {JsonSchema jsonSchema=MAPPER.generateJsonSchema(SimpleBean.class);Map<String,Object> result=writeAndMap(MAPPER,jsonSchema);assertNotNull(result);assertEquals(""object"",result.get(""type""));assertNull(result.get(""required""));assertNotNull(result.get(""properties""));}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testThatObjectsHaveNoItems",0,"public void testThatObjectsHaveNoItems()throws Exception {JsonSchema jsonSchema=MAPPER.generateJsonSchema(TrivialBean.class);String json=jsonSchema.toString().replaceAll(""\"""",""'"");assertEquals(""{'type':'object','properties':{'name':{'type':'string'}}}"",json);}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testSchemaId",0,"public void testSchemaId()throws Exception {JsonSchema jsonSchema=MAPPER.generateJsonSchema(BeanWithId.class);String json=jsonSchema.toString().replaceAll(""\"""",""'"");assertEquals(""{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}"",json);}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testUnwrapping",0,"public void testUnwrapping()throws Exception {JsonSchema jsonSchema=MAPPER.generateJsonSchema(UnwrappingRoot.class);String json=jsonSchema.toString().replaceAll(""\"""",""'"");String EXP=""{'type':'object',"" + ""'properties':{'age':{'type':'integer'},"" + ""'name.first':{'type':'string'},'name.last':{'type':'string'}}}"";assertEquals(EXP,json);}"
"com.fasterxml.jackson.databind.jsonschema.TestGenerateJsonSchema.testNumberTypes",0,"public void testNumberTypes()throws Exception {JsonSchema jsonSchema=MAPPER.generateJsonSchema(Numbers.class);String json=quotesToApos(jsonSchema.toString());String EXP=""{'type':'object',"" + ""'properties':{'dec':{'type':'number'},"" + ""'bigInt':{'type':'integer'}}}"";assertEquals(EXP,json);}"
"com.fasterxml.jackson.databind.introspect.TestPropertyRename.testCreatorPropRenameWithIgnore",0,"public void testCreatorPropRenameWithIgnore()throws Exception {Bean323WithIgnore input=new Bean323WithIgnore(7);assertEquals(""{\""b\"":7}"",objectWriter().writeValueAsString(input));}"
"com.fasterxml.jackson.databind.introspect.TestPropertyRename.testCreatorPropRenameWithCleave",0,"public void testCreatorPropRenameWithCleave()throws Exception {assertEquals(""{\""a\"":7,\""b\"":7}"",objectWriter().writeValueAsString(new Bean323WithExplicitCleave1(7)));assertEquals(""{\""b\"":7}"",objectWriter().writeValueAsString(new Bean323WithExplicitCleave2(7)));}"
"com.fasterxml.jackson.databind.introspect.TestPropertyRename.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.WrapperObjectWithObjectIdTest.testSimple",0,"public void testSimple()throws Exception {Company comp=new Company();comp.addComputer(new DesktopComputer(""computer-1"",""Bangkok""));comp.addComputer(new DesktopComputer(""computer-2"",""Pattaya""));comp.addComputer(new LaptopComputer(""computer-3"",""Apple""));final ObjectMapper mapper=new ObjectMapper();String json=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(comp);Company result=mapper.readValue(json,Company.class);assertNotNull(result);assertNotNull(result.computers);assertEquals(3,result.computers.size());}"
"com.fasterxml.jackson.databind.jsontype.WrapperObjectWithObjectIdTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerWithViews.testDataBindingUsage",0,"public void testDataBindingUsage()throws Exception {ObjectMapper objectMapper=createObjectMapper();ObjectWriter objectWriter=objectMapper.writerWithView(Views.View.class).withDefaultPrettyPrinter();Object object=new ComplexTestData();String json=objectWriter.writeValueAsString(object);assertTrue(json.indexOf(""nameHidden"")== -1);assertTrue(json.indexOf(""\""name\"" : \""shown\"""")> 0);}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerWithViews.testIssue560",0,"public void testIssue560()throws Exception {ObjectMapper mapper=new ObjectMapper();A a=new A(""myname"",29,""mysurname"");mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION,Boolean.FALSE);mapper.addMixIn(A.class,AMixInAnnotation.class);String json=mapper.writerWithView(AView.class).writeValueAsString(a);assertTrue(json.indexOf(""\""name\"""")> 0);}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerWithViews.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestCachingOfDeser.testCustomMapCaching1",0,"public void testCustomMapCaching1()throws Exception {ObjectMapper mapper=new ObjectMapper();TestMapWithCustom mapC=mapper.readValue(MAP_INPUT,TestMapWithCustom.class);TestMapNoCustom mapStd=mapper.readValue(MAP_INPUT,TestMapNoCustom.class);assertNotNull(mapC.map);assertNotNull(mapStd.map);assertEquals(Integer.valueOf(100),mapC.map.get(""a""));assertEquals(Integer.valueOf(1),mapStd.map.get(""a""));}"
"com.fasterxml.jackson.databind.deser.TestCachingOfDeser.testCustomMapCaching2",0,"public void testCustomMapCaching2()throws Exception {ObjectMapper mapper=new ObjectMapper();TestMapNoCustom mapStd=mapper.readValue(MAP_INPUT,TestMapNoCustom.class);TestMapWithCustom mapC=mapper.readValue(MAP_INPUT,TestMapWithCustom.class);assertNotNull(mapStd.map);assertNotNull(mapC.map);assertEquals(Integer.valueOf(1),mapStd.map.get(""a""));assertEquals(Integer.valueOf(100),mapC.map.get(""a""));}"
"com.fasterxml.jackson.databind.deser.TestCachingOfDeser.testCustomListCaching1",0,"public void testCustomListCaching1()throws Exception {ObjectMapper mapper=new ObjectMapper();TestListWithCustom listC=mapper.readValue(LIST_INPUT,TestListWithCustom.class);TestListNoCustom listStd=mapper.readValue(LIST_INPUT,TestListNoCustom.class);assertNotNull(listC.list);assertNotNull(listStd.list);assertEquals(Integer.valueOf(100),listC.list.get(0));assertEquals(Integer.valueOf(1),listStd.list.get(0));}"
"com.fasterxml.jackson.databind.deser.TestCachingOfDeser.testCustomListCaching2",0,"public void testCustomListCaching2()throws Exception {ObjectMapper mapper=new ObjectMapper();TestListNoCustom listStd=mapper.readValue(LIST_INPUT,TestListNoCustom.class);TestListWithCustom listC=mapper.readValue(LIST_INPUT,TestListWithCustom.class);assertNotNull(listC.list);assertNotNull(listStd.list);assertEquals(Integer.valueOf(100),listC.list.get(0));assertEquals(Integer.valueOf(1),listStd.list.get(0));}"
"com.fasterxml.jackson.databind.deser.TestCachingOfDeser.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.TypeAliasesTest.testAliasResolutionIssue743",0,"public void testAliasResolutionIssue743()throws Exception {String s3=""{\""dataObj\"" :[\""one\"",\""two\"",\""three\""]}"";ObjectMapper m=new ObjectMapper();Child.ChildData d=m.readValue(s3,Child.ChildData.class);assertNotNull(d.dataObj);assertEquals(3,d.dataObj.size());}"
"com.fasterxml.jackson.databind.type.TypeAliasesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.filter.RecursiveIgnorePropertiesTest.testRecursiveForDeser",0,"public void testRecursiveForDeser()throws Exception {String st=aposToQuotes(""{'name': 'admin',\n"" + ""    'person_z':{'name': 'admin' }"" + ""}"");ObjectMapper mapper=newObjectMapper();Person result=mapper.readValue(st,Person.class);assertEquals(""admin"",result.name);}"
"com.fasterxml.jackson.databind.deser.filter.RecursiveIgnorePropertiesTest.testRecursiveForSer",0,"public void testRecursiveForSer()throws Exception {ObjectMapper mapper=newObjectMapper();Person input=new Person();input.name=""Bob"";Person p2=new Person();p2.name=""Bill"";input.personZ=p2;p2.personZ=input;String json=mapper.writeValueAsString(input);assertNotNull(json);}"
"com.fasterxml.jackson.databind.deser.filter.RecursiveIgnorePropertiesTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.convert.TestMapConversions.testMapToMap",0,"/** * Test that verifies that we can go between couple of types of Maps...*/public void testMapToMap(){Map<String,Integer> input=new LinkedHashMap<String,Integer>();input.put(""A"",Integer.valueOf(3));input.put(""B"",Integer.valueOf(-4));Map<AB,String> output=MAPPER.convertValue(input,new TypeReference<Map<AB,String>>(){});assertEquals(2,output.size());assertEquals(""3"",output.get(AB.A));assertEquals(""-4"",output.get(AB.B));Map<String,Integer> roundtrip=MAPPER.convertValue(input,new TypeReference<TreeMap<String,Integer>>(){});assertEquals(2,roundtrip.size());assertEquals(Integer.valueOf(3),roundtrip.get(""A""));assertEquals(Integer.valueOf(-4),roundtrip.get(""B""));}"
"com.fasterxml.jackson.databind.convert.TestMapConversions.testMapToBean",0,"public void testMapToBean(){EnumMap<AB,String> map=new EnumMap<AB,String>(AB.class);map.put(AB.A,""   17"");map.put(AB.B,"" -1"");Bean bean=MAPPER.convertValue(map,Bean.class);assertEquals(Integer.valueOf(17),bean.A);assertEquals("" -1"",bean.B);}"
"com.fasterxml.jackson.databind.convert.TestMapConversions.testBeanToMap",0,"public void testBeanToMap(){Bean bean=new Bean();bean.A=129;bean.B=""13"";EnumMap<AB,String> result=MAPPER.convertValue(bean,new TypeReference<EnumMap<AB,String>>(){});assertEquals(""129"",result.get(AB.A));assertEquals(""13"",result.get(AB.B));}"
"com.fasterxml.jackson.databind.convert.TestMapConversions.testIssue287",0,"public void testIssue287()throws Exception {final ObjectMapper mapper=new ObjectMapper();final Request request=new Request();final String retString=mapper.writeValueAsString(request);assertEquals(""{\""hello\"":{\""value\"":1}}"",retString);}"
"com.fasterxml.jackson.databind.convert.TestMapConversions.testMapToProperties",0,"public void testMapToProperties()throws Exception {Bean bean=new Bean();bean.A=129;bean.B=""13"";Properties props=MAPPER.convertValue(bean,Properties.class);assertEquals(2,props.size());assertEquals(""13"",props.getProperty(""B""));assertEquals(""129"",props.getProperty(""A""));}"
"com.fasterxml.jackson.databind.introspect.TestScalaLikeImplicitProperties.testValProperty",0,"public void testValProperty()throws Exception {ObjectMapper m=manglingMapper();assertEquals(""{\""prop\"":\""val\""}"",m.writeValueAsString(new ValProperty(""val"")));}"
"com.fasterxml.jackson.databind.introspect.TestScalaLikeImplicitProperties.testValWithBeanProperty",0,"public void testValWithBeanProperty()throws Exception {ObjectMapper m=manglingMapper();assertEquals(""{\""prop\"":\""val\""}"",m.writeValueAsString(new ValWithBeanProperty(""val"")));}"
"com.fasterxml.jackson.databind.introspect.TestScalaLikeImplicitProperties.testVarProperty",0,"public void testVarProperty()throws Exception {ObjectMapper m=manglingMapper();assertEquals(""{\""prop\"":\""var\""}"",m.writeValueAsString(new VarProperty(""var"")));VarProperty result=m.readValue(""{\""prop\"":\""read\""}"",VarProperty.class);assertEquals(""read"",result.prop());}"
"com.fasterxml.jackson.databind.introspect.TestScalaLikeImplicitProperties.testVarWithBeanProperty",0,"public void testVarWithBeanProperty()throws Exception {ObjectMapper m=manglingMapper();assertEquals(""{\""prop\"":\""var\""}"",m.writeValueAsString(new VarWithBeanProperty(""var"")));VarWithBeanProperty result=m.readValue(""{\""prop\"":\""read\""}"",VarWithBeanProperty.class);assertEquals(""read"",result.prop());}"
"com.fasterxml.jackson.databind.introspect.TestScalaLikeImplicitProperties.testGetterSetterProperty",0,"public void testGetterSetterProperty()throws Exception {ObjectMapper m=manglingMapper();assertEquals(""{\""prop\"":\""get/set\""}"",m.writeValueAsString(new GetterSetterProperty()));GetterSetterProperty result=m.readValue(""{\""prop\"":\""read\""}"",GetterSetterProperty.class);assertEquals(""read"",result.prop());}"
"com.fasterxml.jackson.databind.introspect.TestScalaLikeImplicitProperties.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testFormat",0,"public void testFormat(){String result=ISO8601Utils.format(date);assertEquals(""2007-08-13T19:51:23Z"",result);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testFormatMillis",0,"public void testFormatMillis(){String result=ISO8601Utils.format(date,true);assertEquals(""2007-08-13T19:51:23.789Z"",result);result=ISO8601Utils.format(date,false);assertEquals(""2007-08-13T19:51:23Z"",result);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testFormatTimeZone",0,"public void testFormatTimeZone(){String result=ISO8601Utils.format(date,false,TimeZone.getTimeZone(""GMT+02:00""));assertEquals(""2007-08-13T21:51:23+02:00"",result);result=ISO8601Utils.format(date,true,TimeZone.getTimeZone(""GMT+02:00""));assertEquals(""2007-08-13T21:51:23.789+02:00"",result);result=ISO8601Utils.format(date,true,TimeZone.getTimeZone(""GMT""));assertEquals(""2007-08-13T19:51:23.789Z"",result);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParse",0,"public void testParse()throws java.text.ParseException {Date d=ISO8601Utils.parse(""2007-08-13T19:51:23.789Z"",new ParsePosition(0));assertEquals(date,d);d=ISO8601Utils.parse(""2007-08-13T19:51:23Z"",new ParsePosition(0));assertEquals(dateZeroMillis,d);d=ISO8601Utils.parse(""2007-08-13T21:51:23.789+02:00"",new ParsePosition(0));assertEquals(date,d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParseShortDate",0,"public void testParseShortDate()throws java.text.ParseException {Date d=ISO8601Utils.parse(""20070813T19:51:23.789Z"",new ParsePosition(0));assertEquals(date,d);d=ISO8601Utils.parse(""20070813T19:51:23Z"",new ParsePosition(0));assertEquals(dateZeroMillis,d);d=ISO8601Utils.parse(""20070813T21:51:23.789+02:00"",new ParsePosition(0));assertEquals(date,d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParseShortTime",0,"public void testParseShortTime()throws java.text.ParseException {Date d=ISO8601Utils.parse(""2007-08-13T195123.789Z"",new ParsePosition(0));assertEquals(date,d);d=ISO8601Utils.parse(""2007-08-13T195123Z"",new ParsePosition(0));assertEquals(dateZeroMillis,d);d=ISO8601Utils.parse(""2007-08-13T215123.789+02:00"",new ParsePosition(0));assertEquals(date,d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParseShortDateTime",0,"public void testParseShortDateTime()throws java.text.ParseException {Date d=ISO8601Utils.parse(""20070813T195123.789Z"",new ParsePosition(0));assertEquals(date,d);d=ISO8601Utils.parse(""20070813T195123Z"",new ParsePosition(0));assertEquals(dateZeroMillis,d);d=ISO8601Utils.parse(""20070813T215123.789+02:00"",new ParsePosition(0));assertEquals(date,d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParseWithoutTime",0,"public void testParseWithoutTime()throws ParseException {Date d=ISO8601Utils.parse(""2007-08-13Z"",new ParsePosition(0));assertEquals(dateWithoutTime,d);d=ISO8601Utils.parse(""20070813Z"",new ParsePosition(0));assertEquals(dateWithoutTime,d);d=ISO8601Utils.parse(""2007-08-13+00:00"",new ParsePosition(0));assertEquals(dateWithoutTime,d);d=ISO8601Utils.parse(""20070813+00:00"",new ParsePosition(0));assertEquals(dateWithoutTime,d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParseOptional",0,"public void testParseOptional()throws java.text.ParseException {Date d=ISO8601Utils.parse(""2007-08-13T19:51Z"",new ParsePosition(0));assertEquals(dateZeroSecondAndMillis,d);d=ISO8601Utils.parse(""2007-08-13T1951Z"",new ParsePosition(0));assertEquals(dateZeroSecondAndMillis,d);d=ISO8601Utils.parse(""2007-08-13T21:51+02:00"",new ParsePosition(0));assertEquals(dateZeroSecondAndMillis,d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testParseRfc3339Examples",0,"public void testParseRfc3339Examples()throws java.text.ParseException {Date d=ISO8601Utils.parse(""1985-04-12T23:20:50.52Z"",new ParsePosition(0));assertEquals(newDate(1985,4,12,23,20,50,520,0),d);d=ISO8601Utils.parse(""1996-12-19T16:39:57-08:00"",new ParsePosition(0));assertEquals(newDate(1996,12,19,16,39,57,0,-8 * 60),d);d=ISO8601Utils.parse(""1990-12-31T23:59:60Z"",new ParsePosition(0));assertEquals(newDate(1990,12,31,23,59,59,0,0),d);d=ISO8601Utils.parse(""1990-12-31T15:59:60-08:00"",new ParsePosition(0));assertEquals(newDate(1990,12,31,15,59,59,0,-8 * 60),d);d=ISO8601Utils.parse(""1937-01-01T12:00:27.87+00:20"",new ParsePosition(0));assertEquals(newDate(1937,1,1,12,0,27,870,20),d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testFractionalSeconds",0,"public void testFractionalSeconds()throws java.text.ParseException {Date d=ISO8601Utils.parse(""1970-01-01T00:00:00.9Z"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,900,0),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.09Z"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,90,0),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.009Z"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,9,0),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.0009Z"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,0,0),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.2147483647Z"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,214,0),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.2147483648Z"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,214,0),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.9+02:00"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,900,2 * 60),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.09+02:00"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,90,2 * 60),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.009+02:00"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,9,2 * 60),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.0009+02:00"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,0,2 * 60),d);d=ISO8601Utils.parse(""1970-01-01T00:00:00.2147483648+02:00"",new ParsePosition(0));assertEquals(newDate(1970,1,1,0,0,0,214,2 * 60),d);}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.testDecimalWithoutDecimalPointButNoFractionalSeconds",0,"public void testDecimalWithoutDecimalPointButNoFractionalSeconds()throws java.text.ParseException {try {ISO8601Utils.parse(""1970-01-01T00:00:00.Z"",new ParsePosition(0));fail();}catch(ParseException expected){}}"
"com.fasterxml.jackson.databind.util.ISO8601UtilsTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinInheritance.testMixinFieldInheritance",0,"public void testMixinFieldInheritance()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.addMixIn(Beano.class,BeanoMixinSub.class);Map<String,Object> result;result=writeAndMap(mapper,new Beano());assertEquals(2,result.size());if (!result.containsKey(""id"")|| !result.containsKey(""name"")){fail(""Should have both 'id' and 'name',but content = "" + result);}}"
"com.fasterxml.jackson.databind.mixins.TestMixinInheritance.testMixinMethodInheritance",0,"public void testMixinMethodInheritance()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.addMixIn(Beano2.class,BeanoMixinSub2.class);Map<String,Object> result;result=writeAndMap(mapper,new Beano2());assertEquals(2,result.size());assertTrue(result.containsKey(""id""));assertTrue(result.containsKey(""name""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinInheritance.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testKeepAnnotationBundle",0,"public void testKeepAnnotationBundle()throws Exception {MAPPER.setAnnotationIntrospector(new BundleAnnotationIntrospector());assertEquals(""{\""important\"":42}"",MAPPER.writeValueAsString(new InformingHolder()));}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testRecursiveBundlesField",0,"public void testRecursiveBundlesField()throws Exception {assertEquals(""{\""unimportant\"":42}"",MAPPER.writeValueAsString(new RecursiveHolder()));}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testRecursiveBundlesMethod",0,"public void testRecursiveBundlesMethod()throws Exception {assertEquals(""{\""value\"":28}"",MAPPER.writeValueAsString(new RecursiveHolder2()));}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testRecursiveBundlesConstructor",0,"public void testRecursiveBundlesConstructor()throws Exception {RecursiveHolder3 result=MAPPER.readValue(""17"",RecursiveHolder3.class);assertNotNull(result);assertEquals(17,result.x);}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testBundledIgnore",0,"public void testBundledIgnore()throws Exception {assertEquals(""{\""foobar\"":13}"",MAPPER.writeValueAsString(new Bean()));}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testVisibilityBundle",0,"public void testVisibilityBundle()throws Exception {assertEquals(""{\""b\"":5}"",MAPPER.writeValueAsString(new NoAutoDetect()));}"
"com.fasterxml.jackson.databind.introspect.TestAnnotationBundles.testIssue92",0,"public void testIssue92()throws Exception {assertEquals(""{\""_id\"":\""abc\""}"",MAPPER.writeValueAsString(new Bean92()));}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithPolymorphic.testPolymorphicRoundtrip",0,"public void testPolymorphicRoundtrip()throws Exception {Impl in1=new Impl(123,456);in1.next=new Impl(111,222);in1.next.next=in1;String json=mapper.writeValueAsString(in1);Base result0=mapper.readValue(json,Base.class);assertNotNull(result0);assertSame(Impl.class,result0.getClass());Impl result=(Impl)result0;assertEquals(123,result.value);assertEquals(456,result.extra);Impl result2=(Impl)result.next;assertEquals(111,result2.value);assertEquals(222,result2.extra);assertSame(result,result2.next);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithPolymorphic.testIssue811",0,"public void testIssue811()throws Exception {ObjectMapper om=new ObjectMapper();om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);om.enable(SerializationFeature.INDENT_OUTPUT);om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL,""@class"");Process p=new Process();Scope s=new Scope(p,null);FaultHandler fh=new FaultHandler(p);Catch c=new Catch(p,s);fh.catchBlocks.add(c);s.faultHandlers.add(fh);String json=om.writeValueAsString(p);Process restored=om.readValue(json,Process.class);assertNotNull(restored);assertEquals(0,p.id);assertEquals(3,p.children.size());assertSame(p,p.children.get(0).owner);assertSame(p,p.children.get(1).owner);assertSame(p,p.children.get(2).owner);}"
"com.fasterxml.jackson.databind.objectid.TestObjectIdWithPolymorphic.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.TestFormatSchema.testFormatForParsers",0,"public void testFormatForParsers()throws Exception {ObjectMapper mapper=new ObjectMapper(new FactoryWithSchema());MySchema s=new MySchema();StringReader r=new StringReader(""{}"");try {mapper.reader(s).forType(Object.class).readValue(r);fail(""Excpected exception"");}catch(SchemaException e){assertSame(s,e._schema);}}"
"com.fasterxml.jackson.databind.TestFormatSchema.testFormatForGenerators",0,"public void testFormatForGenerators()throws Exception {ObjectMapper mapper=new ObjectMapper(new FactoryWithSchema());MySchema s=new MySchema();StringWriter sw=new StringWriter();try {mapper.writer(s).writeValue(sw,""Foobar"");fail(""Excpected exception"");}catch(SchemaException e){assertSame(s,e._schema);}}"
"com.fasterxml.jackson.databind.TestFormatSchema.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForMaps.testJackson428",0,"public void testJackson428()throws Exception {ObjectMapper serMapper=new ObjectMapper();TypeResolverBuilder<?> serializerTyper=new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL);serializerTyper=serializerTyper.init(JsonTypeInfo.Id.NAME,createTypeNameIdResolver(true));serializerTyper=serializerTyper.inclusion(JsonTypeInfo.As.PROPERTY);serMapper.setDefaultTyping(serializerTyper);MapHolder holder=new MapHolder();holder.map=new HashMap<MapKey,List<Object>>();List<Object> ints=new ArrayList<Object>();ints.add(Integer.valueOf(3));holder.map.put(new MapKey(""key""),ints);String json=serMapper.writeValueAsString(holder);ObjectMapper deserMapper=new ObjectMapper();TypeResolverBuilder<?> deserializerTyper=new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL);deserializerTyper=deserializerTyper.init(JsonTypeInfo.Id.NAME,createTypeNameIdResolver(false));deserializerTyper=deserializerTyper.inclusion(JsonTypeInfo.As.PROPERTY);deserMapper.setDefaultTyping(deserializerTyper);MapHolder result=deserMapper.readValue(json,MapHolder.class);assertNotNull(result);Map<?,?> map=result.map;assertEquals(1,map.size());Map.Entry<?,?> entry=map.entrySet().iterator().next();Object key=entry.getKey();assertEquals(MapKey.class,key.getClass());Object value=entry.getValue();assertTrue(value instanceof List<?>);List<?> list=(List<?>)value;assertEquals(1,list.size());assertEquals(Integer.class,list.get(0).getClass());assertEquals(Integer.valueOf(3),list.get(0));}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForMaps.testList",0,"public void testList()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,JsonTypeInfo.As.PROPERTY);ItemList child=new ItemList();child.value=""I am child"";ItemList parent=new ItemList();parent.value=""I am parent"";parent.addChildItem(child);String json=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(parent);Object o=mapper.readValue(json,ItemList.class);assertNotNull(o);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForMaps.testMap",0,"public void testMap()throws Exception {final ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE,JsonTypeInfo.As.PROPERTY);ItemMap child=new ItemMap();child.value=""I am child"";ItemMap parent=new ItemMap();parent.value=""I am parent"";parent.addChildItem(""child"",child);String json=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(parent);Object o=mapper.readValue(json,ItemMap.class);assertNotNull(o);}"
"com.fasterxml.jackson.databind.jsontype.TestDefaultForMaps.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.PolymorphicViaRefTypeTest.testPolymorphicAtomicRefProperty",0,"public void testPolymorphicAtomicRefProperty()throws Exception {TypeInfoAtomic data=new TypeInfoAtomic();data.value=new AtomicReference<BaseForAtomic>(new ImplForAtomic(42));String json=MAPPER.writeValueAsString(data);TypeInfoAtomic result=MAPPER.readValue(json,TypeInfoAtomic.class);assertNotNull(result);BaseForAtomic value=result.value.get();assertNotNull(value);assertEquals(ImplForAtomic.class,value.getClass());assertEquals(42,((ImplForAtomic)value).x);}"
"com.fasterxml.jackson.databind.jsontype.PolymorphicViaRefTypeTest.testAtomicRefViaDefaultTyping",0,"public void testAtomicRefViaDefaultTyping()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);AtomicStringWrapper data=new AtomicStringWrapper(""foo"");String json=mapper.writerWithDefaultPrettyPrinter().writeValueAsString(data);AtomicStringWrapper result=mapper.readValue(json,AtomicStringWrapper.class);assertNotNull(result);assertNotNull(result.wrapper);assertEquals(AtomicReference.class,result.wrapper.getClass());StringWrapper w=result.wrapper.get();assertEquals(""foo"",w.str);}"
"com.fasterxml.jackson.databind.jsontype.PolymorphicViaRefTypeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestCyclicTypes.testLinked",0,"public void testLinked()throws Exception {Bean first=MAPPER.readValue(""{\""name\"":\""first\"",\""next\"":{"" + "" \""name\"":\""last\"",\""next\"" : null }}"",Bean.class);assertNotNull(first);assertEquals(""first"",first._name);Bean last=first._next;assertNotNull(last);assertEquals(""last"",last._name);assertNull(last._next);}"
"com.fasterxml.jackson.databind.deser.TestCyclicTypes.testLinkedGeneric",0,"public void testLinkedGeneric()throws Exception {StringLink link=MAPPER.readValue(""{\""next\"":null}"",StringLink.class);assertNotNull(link);assertNull(link.next);}"
"com.fasterxml.jackson.databind.deser.TestCyclicTypes.testCycleWith2Classes",0,"public void testCycleWith2Classes()throws Exception {LinkA a=MAPPER.readValue(""{\""next\"":{\""a\"":null}}"",LinkA.class);assertNotNull(a.next);LinkB b=a.next;assertNull(b.a);}"
"com.fasterxml.jackson.databind.deser.TestCyclicTypes.testIgnoredCycle",0,"public void testIgnoredCycle()throws Exception {Selfie405 self1=new Selfie405(1);self1.parent=self1;assertTrue(MAPPER.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES));try {MAPPER.writeValueAsString(self1);fail(""Should fail with direct self-ref"");}catch(JsonMappingException e){verifyException(e,""Direct self-reference"");}ObjectWriter w=MAPPER.writer().without(SerializationFeature.FAIL_ON_SELF_REFERENCES);String json=w.writeValueAsString(self1);assertNotNull(json);assertEquals(aposToQuotes(""{'id':1,'parent':{'id':1}}""),json);}"
"com.fasterxml.jackson.databind.deser.TestCyclicTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForFields.testFieldMixInsTopLevel",0,"public void testFieldMixInsTopLevel()throws IOException {ObjectMapper mapper=new ObjectMapper();Map<String,Object> result;BaseClass bean=new BaseClass(""1"",""2"");result=writeAndMap(mapper,bean);assertEquals(1,result.size());assertEquals(""1"",result.get(""a""));mapper=new ObjectMapper();mapper.addMixIn(BaseClass.class,MixIn.class);result=writeAndMap(mapper,bean);assertEquals(2,result.size());assertEquals(""1"",result.get(""a""));assertEquals(""2"",result.get(""banana""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForFields.testMultipleFieldMixIns",0,"public void testMultipleFieldMixIns()throws IOException {ObjectMapper mapper=new ObjectMapper();HashMap<Class<?>,Class<?>> mixins=new HashMap<Class<?>,Class<?>>();mixins.put(SubClass.class,MixIn.class);mixins.put(BaseClass.class,MixIn2.class);mapper.setMixIns(mixins);Map<String,Object> result;result=writeAndMap(mapper,new SubClass(""1"",""2""));assertEquals(1,result.size());assertEquals(""2"",result.get(""banana""));}"
"com.fasterxml.jackson.databind.mixins.TestMixinSerForFields.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.PolymorphicList036Test.testPolymorphicWithOverride",0,"public void testPolymorphicWithOverride()throws Exception {JavaType type=MAPPER.getTypeFactory().constructCollectionType(StringyList.class,String.class);StringyList<String> list=new StringyList<String>();list.add(""value 1"");list.add(""value 2"");String serialized=MAPPER.writeValueAsString(list);StringyList<String> deserialized=MAPPER.readValue(serialized,type);assertNotNull(deserialized);}"
"com.fasterxml.jackson.databind.type.PolymorphicList036Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestCreatorsWithIdentity.testSimple",0,"public void testSimple()throws IOException {String parentStr=""{\""id\"" : \""1\"",\""parentProp\"" : \""parent\""}"";String childStr=""{\""childProp\"" : \""child\"",\""parent\"" : "" + parentStr + ""}"";Parent parent=JSON_MAPPER.readValue(parentStr,Parent.class);assertNotNull(parent);Child child=JSON_MAPPER.readValue(childStr,Child.class);assertNotNull(child);assertNotNull(child.parent);}"
"com.fasterxml.jackson.databind.creators.TestCreatorsWithIdentity.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtil",0,"public void testDateUtil()throws Exception {long now=123456789L;java.util.Date value=new java.util.Date(now);assertEquals(value,MAPPER.readValue("""" + now,java.util.Date.class));String dateStr=dateToString(value);java.util.Date result=MAPPER.readValue(""\"""" + dateStr + ""\"""",java.util.Date.class);assertEquals(""Date: expect "" + value + "" (""+ value.getTime()+ ""),got ""+ result+ "" (""+ result.getTime()+ "")"",value.getTime(),result.getTime());}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilWithStringTimestamp",0,"public void testDateUtilWithStringTimestamp()throws Exception {long now=1321992375446L;String json=quote(String.valueOf(now));java.util.Date value=MAPPER.readValue(json,java.util.Date.class);assertEquals(now,value.getTime());long before=-(24 * 3600 * 1000L);json=quote(String.valueOf(before));value=MAPPER.readValue(json,java.util.Date.class);assertEquals(before,value.getTime());}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilRFC1123",0,"public void testDateUtilRFC1123()throws Exception {DateFormat fmt=new SimpleDateFormat(""EEE,dd MMM yyyy HH:mm:ss zzz"",Locale.US);String inputStr=""Sat,17 Jan 2009 06:13:58 +0000"";java.util.Date inputDate=fmt.parse(inputStr);assertEquals(inputDate,MAPPER.readValue(""\"""" + inputStr + ""\"""",java.util.Date.class));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilRFC1123OnNonUSLocales",0,"public void testDateUtilRFC1123OnNonUSLocales()throws Exception {Locale old=Locale.getDefault();Locale.setDefault(Locale.GERMAN);DateFormat fmt=new SimpleDateFormat(""EEE,dd MMM yyyy HH:mm:ss zzz"",Locale.US);String inputStr=""Sat,17 Jan 2009 06:13:58 +0000"";java.util.Date inputDate=fmt.parse(inputStr);assertEquals(inputDate,MAPPER.readValue(""\"""" + inputStr + ""\"""",java.util.Date.class));Locale.setDefault(old);}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilISO8601",0,"/** * ISO8601 is supported as well*/public void testDateUtilISO8601()throws Exception {String inputStr=""1972-12-28T00:00:00.000+0000"";Date inputDate=MAPPER.readValue(""\"""" + inputStr + ""\"""",java.util.Date.class);Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));c.setTime(inputDate);assertEquals(1972,c.get(Calendar.YEAR));assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));assertEquals(28,c.get(Calendar.DAY_OF_MONTH));inputStr=""1972-12-28T00:00:00.000Z"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1972,c.get(Calendar.YEAR));assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));assertEquals(28,c.get(Calendar.DAY_OF_MONTH));inputStr=""1972-12-28T00:00:00.000+00:00"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1972,c.get(Calendar.YEAR));assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));assertEquals(28,c.get(Calendar.DAY_OF_MONTH));inputStr=""1972-12-28T00:00:00.000+00"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1972,c.get(Calendar.YEAR));assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));assertEquals(28,c.get(Calendar.DAY_OF_MONTH));inputStr=""1984-11-30T00:00:00.000Z"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1984,c.get(Calendar.YEAR));assertEquals(Calendar.NOVEMBER,c.get(Calendar.MONTH));assertEquals(30,c.get(Calendar.DAY_OF_MONTH));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testISO8601PartialMilliseconds",0,"public void testISO8601PartialMilliseconds()throws Exception {String inputStr;Date inputDate;Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));inputStr=""2014-10-03T18:00:00.6-05:00"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(2014,c.get(Calendar.YEAR));assertEquals(Calendar.OCTOBER,c.get(Calendar.MONTH));assertEquals(3,c.get(Calendar.DAY_OF_MONTH));assertEquals(600,c.get(Calendar.MILLISECOND));inputStr=""2014-10-03T18:00:00.61-05:00"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(2014,c.get(Calendar.YEAR));assertEquals(Calendar.OCTOBER,c.get(Calendar.MONTH));assertEquals(3,c.get(Calendar.DAY_OF_MONTH));assertEquals(18 + 5,c.get(Calendar.HOUR_OF_DAY));assertEquals(0,c.get(Calendar.MINUTE));assertEquals(0,c.get(Calendar.SECOND));assertEquals(610,c.get(Calendar.MILLISECOND));inputStr=""1997-07-16T19:20:30.45+01:00"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1997,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(16,c.get(Calendar.DAY_OF_MONTH));assertEquals(19 - 1,c.get(Calendar.HOUR_OF_DAY));assertEquals(20,c.get(Calendar.MINUTE));assertEquals(30,c.get(Calendar.SECOND));assertEquals(450,c.get(Calendar.MILLISECOND));inputStr=""1997-07-16T19:20:30.45+0100"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1997,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(16,c.get(Calendar.DAY_OF_MONTH));assertEquals(19 - 1,c.get(Calendar.HOUR_OF_DAY));assertEquals(20,c.get(Calendar.MINUTE));assertEquals(30,c.get(Calendar.SECOND));assertEquals(450,c.get(Calendar.MILLISECOND));inputStr=""1997-07-16T19:20:30.45+01"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1997,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(16,c.get(Calendar.DAY_OF_MONTH));assertEquals(19 - 1,c.get(Calendar.HOUR_OF_DAY));assertEquals(20,c.get(Calendar.MINUTE));assertEquals(30,c.get(Calendar.SECOND));assertEquals(450,c.get(Calendar.MILLISECOND));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testISO8601MissingSeconds",0,"public void testISO8601MissingSeconds()throws Exception {String inputStr;Date inputDate;Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));inputStr=""1997-07-16T19:20+01:00"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1997,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(16,c.get(Calendar.DAY_OF_MONTH));assertEquals(19 - 1,c.get(Calendar.HOUR_OF_DAY));assertEquals(0,c.get(Calendar.SECOND));assertEquals(0,c.get(Calendar.MILLISECOND));inputStr=""1997-07-16T19:20+0200"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1997,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(16,c.get(Calendar.DAY_OF_MONTH));assertEquals(19 - 2,c.get(Calendar.HOUR_OF_DAY));assertEquals(0,c.get(Calendar.SECOND));assertEquals(0,c.get(Calendar.MILLISECOND));inputStr=""1997-07-16T19:20+04"";inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);c.setTime(inputDate);assertEquals(1997,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(16,c.get(Calendar.DAY_OF_MONTH));assertEquals(19 - 4,c.get(Calendar.HOUR_OF_DAY));assertEquals(0,c.get(Calendar.SECOND));assertEquals(0,c.get(Calendar.MILLISECOND));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilISO8601NoTimezone",0,"public void testDateUtilISO8601NoTimezone()throws Exception {String inputStr=""1984-11-13T00:00:09"";Date inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));c.setTime(inputDate);assertEquals(1984,c.get(Calendar.YEAR));assertEquals(Calendar.NOVEMBER,c.get(Calendar.MONTH));assertEquals(13,c.get(Calendar.DAY_OF_MONTH));assertEquals(0,c.get(Calendar.HOUR_OF_DAY));assertEquals(0,c.get(Calendar.MINUTE));assertEquals(9,c.get(Calendar.SECOND));assertEquals(0,c.get(Calendar.MILLISECOND));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilISO8601NoMilliseconds",0,"public void testDateUtilISO8601NoMilliseconds()throws Exception {final String INPUT_STR=""2013-10-31T17:27:00"";Date inputDate;Calendar c;inputDate=MAPPER.readValue(quote(INPUT_STR),java.util.Date.class);c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));c.setTime(inputDate);assertEquals(2013,c.get(Calendar.YEAR));assertEquals(Calendar.OCTOBER,c.get(Calendar.MONTH));assertEquals(31,c.get(Calendar.DAY_OF_MONTH));assertEquals(17,c.get(Calendar.HOUR_OF_DAY));assertEquals(27,c.get(Calendar.MINUTE));assertEquals(0,c.get(Calendar.SECOND));assertEquals(0,c.get(Calendar.MILLISECOND));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateUtilISO8601JustDate",0,"public void testDateUtilISO8601JustDate()throws Exception {String inputStr=""1972-12-28"";Date inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));c.setTime(inputDate);assertEquals(1972,c.get(Calendar.YEAR));assertEquals(Calendar.DECEMBER,c.get(Calendar.MONTH));assertEquals(28,c.get(Calendar.DAY_OF_MONTH));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDateSql",0,"@SuppressWarnings(""deprecation"")public void testDateSql()throws Exception {java.sql.Date value=new java.sql.Date(0L);value.setYear(99);value.setDate(19);value.setMonth(Calendar.APRIL);long now=value.getTime();assertEquals(value,MAPPER.readValue(String.valueOf(now),java.sql.Date.class));java.sql.Date result=MAPPER.readValue(quote(value.toString()),java.sql.Date.class);Calendar c=gmtCalendar(result.getTime());assertEquals(1999,c.get(Calendar.YEAR));assertEquals(Calendar.APRIL,c.get(Calendar.MONTH));assertEquals(19,c.get(Calendar.DAY_OF_MONTH));String expStr=""1981-07-13"";result=MAPPER.readValue(quote(expStr),java.sql.Date.class);c.setTimeInMillis(result.getTime());assertEquals(1981,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(13,c.get(Calendar.DAY_OF_MONTH));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testCalendar",0,"public void testCalendar()throws Exception {java.util.Calendar value=Calendar.getInstance();long l=12345678L;value.setTimeInMillis(l);Calendar result=MAPPER.readValue("""" + l,Calendar.class);assertEquals(l,result.getTimeInMillis());String dateStr=dateToString(new Date(l));result=MAPPER.readValue(quote(dateStr),Calendar.class);assertEquals(l,result.getTimeInMillis());}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testCustom",0,"public void testCustom()throws Exception {final ObjectMapper mapper=new ObjectMapper();DateFormat df=new SimpleDateFormat(""yyyy-MM-dd'X'HH:mm:ss"");df.setTimeZone(TimeZone.getTimeZone(""PST""));mapper.setDateFormat(df);String dateStr=""1972-12-28X15:45:00"";java.util.Date exp=df.parse(dateStr);java.util.Date result=mapper.readValue(""\"""" + dateStr + ""\"""",java.util.Date.class);assertEquals(exp,result);}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testDatesWithEmptyStrings",0,"/** * Test for [JACKSON-203]: make empty Strings deserialize as nulls by default,without need to turn on feature (which may be added in future)*/public void testDatesWithEmptyStrings()throws Exception {assertNull(MAPPER.readValue(quote(""""),java.util.Date.class));assertNull(MAPPER.readValue(quote(""""),java.util.Calendar.class));assertNull(MAPPER.readValue(quote(""""),java.sql.Date.class));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.test8601DateTimeNoMilliSecs",0,"public void test8601DateTimeNoMilliSecs()throws Exception {for(String inputStr : new String[]{""2010-06-28T23:34:22Z"",""2010-06-28T23:34:22+0000"",""2010-06-28T23:34:22+00:00"",""2010-06-28T23:34:22+00""}){Date inputDate=MAPPER.readValue(quote(inputStr),java.util.Date.class);Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));c.setTime(inputDate);assertEquals(2010,c.get(Calendar.YEAR));assertEquals(Calendar.JUNE,c.get(Calendar.MONTH));assertEquals(28,c.get(Calendar.DAY_OF_MONTH));assertEquals(23,c.get(Calendar.HOUR_OF_DAY));assertEquals(34,c.get(Calendar.MINUTE));assertEquals(22,c.get(Calendar.SECOND));assertEquals(0,c.get(Calendar.MILLISECOND));}}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testTimeZone",0,"public void testTimeZone()throws Exception {TimeZone result=MAPPER.readValue(quote(""PST""),TimeZone.class);assertEquals(""PST"",result.getID());}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testCustomDateWithAnnotation",0,"public void testCustomDateWithAnnotation()throws Exception {final String INPUT=""{\""date\"":\""/2005/05/25/\""}"";DateAsStringBean result=MAPPER.readValue(INPUT,DateAsStringBean.class);assertNotNull(result);assertNotNull(result.date);Calendar c=Calendar.getInstance(TimeZone.getTimeZone(""GMT""));long l=result.date.getTime();if (l == 0L){fail(""Should not get null date"");}c.setTimeInMillis(l);assertEquals(2005,c.get(Calendar.YEAR));assertEquals(Calendar.MAY,c.get(Calendar.MONTH));assertEquals(25,c.get(Calendar.DAY_OF_MONTH));result=MAPPER.readerFor(DateAsStringBean.class).with(Locale.GERMANY).readValue(INPUT);assertNotNull(result);assertNotNull(result.date);l=result.date.getTime();if (l == 0L){fail(""Should not get null date"");}c.setTimeInMillis(l);assertEquals(2005,c.get(Calendar.YEAR));assertEquals(Calendar.MAY,c.get(Calendar.MONTH));assertEquals(25,c.get(Calendar.DAY_OF_MONTH));DateAsStringBeanGermany result2=MAPPER.readerFor(DateAsStringBeanGermany.class).readValue(INPUT);assertNotNull(result2);assertNotNull(result2.date);l=result2.date.getTime();if (l == 0L){fail(""Should not get null date"");}c.setTimeInMillis(l);assertEquals(2005,c.get(Calendar.YEAR));assertEquals(Calendar.MAY,c.get(Calendar.MONTH));assertEquals(25,c.get(Calendar.DAY_OF_MONTH));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testCustomCalendarWithAnnotation",0,"public void testCustomCalendarWithAnnotation()throws Exception {CalendarAsStringBean cbean=MAPPER.readValue(""{\""cal\"":\"";2007/07/13;\""}"",CalendarAsStringBean.class);assertNotNull(cbean);assertNotNull(cbean.cal);Calendar c=cbean.cal;assertEquals(2007,c.get(Calendar.YEAR));assertEquals(Calendar.JULY,c.get(Calendar.MONTH));assertEquals(13,c.get(Calendar.DAY_OF_MONTH));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testCustomCalendarWithTimeZone",0,"public void testCustomCalendarWithTimeZone()throws Exception {DateInCETBean cet=MAPPER.readValue(""{\""date\"":\""2001-01-01,10\""}"",DateInCETBean.class);Calendar c=Calendar.getInstance(getUTCTimeZone());c.setTimeInMillis(cet.date.getTime());assertEquals(2001,c.get(Calendar.YEAR));assertEquals(Calendar.JANUARY,c.get(Calendar.MONTH));assertEquals(1,c.get(Calendar.DAY_OF_MONTH));assertEquals(9,c.get(Calendar.HOUR_OF_DAY));}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testISO8601Directly",0,"public void testISO8601Directly()throws Exception {final String TIME_STR=""2015-01-21T08:56:13.533+0000"";Date d=MAPPER.readValue(quote(TIME_STR),Date.class);assertNotNull(d);ISO8601DateFormat f=new ISO8601DateFormat();Date d2=f.parse(TIME_STR);assertNotNull(d2);assertEquals(d.getTime(),d2.getTime());}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testCalendarArrayUnwrap",0,"public void testCalendarArrayUnwrap()throws Exception {ObjectReader reader=new ObjectMapper().readerFor(CalendarBean.class).without(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);final String inputDate=""1972-12-28T00:00:00.000+0000"";final String input=aposToQuotes(""{'v':['"" + inputDate + ""']}"");try {reader.readValue(input);fail(""Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled"");}catch(MismatchedInputException exp){verifyException(exp,""Can not deserialize"");verifyException(exp,""out of START_ARRAY"");}reader=reader.with(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);CalendarBean bean=reader.readValue(input);assertNotNull(bean._v);assertEquals(1972,bean._v.get(Calendar.YEAR));try {reader.readValue(aposToQuotes(""{'v':['"" + inputDate + ""','""+ inputDate+ ""']}""));fail(""Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled"");}catch(JsonMappingException exp){verifyException(exp,""Attempted to unwrap"");}}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testLenientCalendar",0,"public void testLenientCalendar()throws Exception {final String JSON=aposToQuotes(""{'value':'2015-11-32'}"");LenientCalendarBean lenBean=MAPPER.readValue(JSON,LenientCalendarBean.class);assertEquals(Calendar.DECEMBER,lenBean.value.get(Calendar.MONTH));assertEquals(2,lenBean.value.get(Calendar.DAY_OF_MONTH));try {MAPPER.readValue(JSON,StrictCalendarBean.class);fail(""Should not pass with invalid (with strict)date value"");}catch(MismatchedInputException e){verifyException(e,""Can not deserialize value of type java.util.Calendar"");verifyException(e,""from String \""2015-11-32\"""");verifyException(e,""expected format"");}ObjectMapper mapper=new ObjectMapper();mapper.configOverride(java.util.Date.class).setFormat(JsonFormat.Value.forLeniency(Boolean.FALSE));try {mapper.readValue(quote(""2015-11-32""),java.util.Date.class);fail(""Should not pass with invalid (with strict)date value"");}catch(MismatchedInputException e){verifyException(e,""Can not deserialize value of type java.util.Date"");verifyException(e,""from String \""2015-11-32\"""");verifyException(e,""expected format"");}}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.testInvalidFormat",0,"public void testInvalidFormat()throws Exception {try {MAPPER.readValue(quote(""foobar""),Date.class);fail(""Should have failed with an exception"");}catch(InvalidFormatException e){verifyException(e,""Can not deserialize value of type java.util.Date from String"");assertEquals(""foobar"",e.getValue());assertEquals(Date.class,e.getTargetType());}catch(Exception e){fail(""Wrong type of exception ("" + e.getClass().getName()+ ""),should get ""+ InvalidFormatException.class.getName());}}"
"com.fasterxml.jackson.databind.deser.jdk.DateDeserializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.introspect.PropertyMetadataTest.testPropertyName",0,"public void testPropertyName(){PropertyName name=PropertyName.NO_NAME;assertFalse(name.hasSimpleName());assertFalse(name.hasNamespace());assertSame(name,name.internSimpleName());assertSame(name,name.withSimpleName(null));assertSame(name,name.withSimpleName(""""));assertSame(name,name.withNamespace(null));assertEquals("""",name.toString());assertTrue(name.isEmpty());assertFalse(name.hasSimpleName(""foo""));name.hashCode();PropertyName newName=name.withNamespace("""");assertNotSame(name,newName);assertTrue(name.equals(name));assertFalse(name.equals(newName));assertFalse(newName.equals(name));name=name.withSimpleName(""foo"");assertEquals(""foo"",name.toString());assertTrue(name.hasSimpleName(""foo""));assertFalse(name.isEmpty());newName=name.withNamespace(""ns"");assertEquals(""{ns}foo"",newName.toString());assertFalse(newName.equals(name));assertFalse(name.equals(newName));name.hashCode();}"
"com.fasterxml.jackson.databind.introspect.PropertyMetadataTest.testPropertyMetadata",0,"public void testPropertyMetadata(){PropertyMetadata md=PropertyMetadata.STD_OPTIONAL;assertNull(md.getValueNulls());assertNull(md.getContentNulls());assertNull(md.getDefaultValue());assertEquals(Boolean.FALSE,md.getRequired());md=md.withNulls(Nulls.AS_EMPTY,Nulls.FAIL);assertEquals(Nulls.AS_EMPTY,md.getValueNulls());assertEquals(Nulls.FAIL,md.getContentNulls());assertFalse(md.hasDefaultValue());assertSame(md,md.withDefaultValue(null));assertSame(md,md.withDefaultValue(""""));md=md.withDefaultValue(""foo"");assertEquals(""foo"",md.getDefaultValue());assertTrue(md.hasDefaultValue());assertSame(md,md.withDefaultValue(""foo""));md=md.withDefaultValue(null);assertFalse(md.hasDefaultValue());assertNull(md.getDefaultValue());md=md.withRequired(null);assertNull(md.getRequired());assertFalse(md.isRequired());md=md.withRequired(Boolean.TRUE);assertTrue(md.isRequired());assertSame(md,md.withRequired(Boolean.TRUE));md=md.withRequired(null);assertNull(md.getRequired());assertFalse(md.isRequired());assertFalse(md.hasIndex());md=md.withIndex(Integer.valueOf(3));assertTrue(md.hasIndex());assertEquals(Integer.valueOf(3),md.getIndex());}"
"com.fasterxml.jackson.databind.introspect.PropertyMetadataTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.type.LocalTypeTest.testLocalPartialType609",0,"public void testLocalPartialType609()throws Exception {ObjectMapper mapper=new ObjectMapper();EntityContainer input=new EntityContainer();input.entity=new RuleForm(12);String json=mapper.writeValueAsString(input);EntityContainer output=mapper.readValue(json,EntityContainer.class);assertEquals(12,output.getEntity().value);}"
"com.fasterxml.jackson.databind.type.LocalTypeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testExplicitIgnoralWithBean",0,"public void testExplicitIgnoralWithBean()throws Exception {IgnoreSome value=new IgnoreSome();Map<String,Object> result=writeAndMap(MAPPER,value);assertEquals(2,result.size());assertFalse(result.containsKey(""b""));assertFalse(result.containsKey(""c""));assertEquals(Integer.valueOf(value.a),result.get(""a""));assertEquals(value.getD(),result.get(""d""));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testExplicitIgnoralWithMap",0,"public void testExplicitIgnoralWithMap()throws Exception {MyMap value=new MyMap();value.put(""a"",""b"");value.put(""@class"",MyMap.class.getName());Map<String,Object> result=writeAndMap(MAPPER,value);assertEquals(1,result.size());assertFalse(result.containsKey(""@class""));assertEquals(value.get(""a""),result.get(""a""));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testIgnoreViaOnlyProps",0,"public void testIgnoreViaOnlyProps()throws Exception {assertEquals(""{\""value\"":{\""x\"":1}}"",MAPPER.writeValueAsString(new WrapperWithPropIgnore()));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testIgnoreViaPropForUntyped",0,"public void testIgnoreViaPropForUntyped()throws Exception {assertEquals(""{\""value\"":{\""z\"":3}}"",MAPPER.writeValueAsString(new WrapperWithPropIgnoreUntyped()));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testIgnoreWithMapProperty",0,"public void testIgnoreWithMapProperty()throws Exception {assertEquals(""{\""value\"":{\""b\"":2}}"",MAPPER.writeValueAsString(new MapWrapper()));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testIgnoreViaPropsAndClass",0,"public void testIgnoreViaPropsAndClass()throws Exception {assertEquals(""{\""value\"":{\""y\"":2}}"",MAPPER.writeValueAsString(new WrapperWithPropIgnore2()));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.testIgnoreViaConfigOverride",0,"public void testIgnoreViaConfigOverride()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configOverride(Point.class).setIgnorals(JsonIgnoreProperties.Value.forIgnoredProperties(""x""));assertEquals(""{\""y\"":3}"",mapper.writeValueAsString(new Point(2,3)));}"
"com.fasterxml.jackson.databind.ser.filter.IgnorePropsForSerTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.module.TestDuplicateRegistration.testDuplicateRegistration",0,"public void testDuplicateRegistration()throws Exception {ObjectMapper mapper=new ObjectMapper();assertTrue(mapper.isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS));MyModule module=new MyModule();mapper.registerModule(module);mapper.registerModule(module);mapper.registerModule(module);assertEquals(1,module.regCount);mapper.disable(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS);mapper.registerModule(module);assertEquals(2,module.regCount);ObjectMapper mapper2=new ObjectMapper();mapper2.disable(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS);MyModule module2=new MyModule();mapper.registerModule(module2);mapper.registerModule(module2);mapper.registerModule(module2);assertEquals(3,module2.regCount);}"
"com.fasterxml.jackson.databind.module.TestDuplicateRegistration.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.JsonInclude1327Test.testClassDefaultsForEmpty",0,"public void testClassDefaultsForEmpty()throws Exception {ObjectMapper om=new ObjectMapper();om.setSerializationInclusion(JsonInclude.Include.NON_NULL);final String jsonString=om.writeValueAsString(new Issue1327BeanEmpty());if (jsonString.contains(""myList"")){fail(""Should not contain `myList`: "" + jsonString);}}"
"com.fasterxml.jackson.databind.ser.filter.JsonInclude1327Test.testClassDefaultsForAlways",0,"public void testClassDefaultsForAlways()throws Exception {ObjectMapper om=new ObjectMapper();om.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);final String jsonString=om.writeValueAsString(new Issue1327BeanAlways());if (!jsonString.contains(""myList"")){fail(""Should contain `myList` with Include.ALWAYS: "" + jsonString);}}"
"com.fasterxml.jackson.databind.ser.filter.JsonInclude1327Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.jsontype.ext.MultipleExternalIds291Test.testMultipleValuesSingleExtId",0,"public void testMultipleValuesSingleExtId()throws Exception {_testMultipleValuesSingleExtId(""{'type' : '1',\n"" + ""'field1' :{'a' : 'AAA' },\n"" + ""'field2' :{'c' : 'CCC' }\n""+ ""}"");_testMultipleValuesSingleExtId(""{\n"" + ""'field1' :{'a' : 'AAA' },\n"" + ""'field2' :{'c' : 'CCC' },\n""+ ""'type' : '1'\n""+ ""}"");_testMultipleValuesSingleExtId(""{\n"" + ""'field1' :{'a' : 'AAA' },\n"" + ""'type' : '1',\n""+ ""'field2' :{'c' : 'CCC' }\n""+ ""}"");}"
"com.fasterxml.jackson.databind.jsontype.ext.MultipleExternalIds291Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.views.TestViewsSerialization2.testDataBindingUsage",0,"public void testDataBindingUsage()throws Exception {ObjectMapper objectMapper=createObjectMapper(null);String result=serializeWithObjectMapper(new ComplexTestData(),Views.View.class,objectMapper);assertEquals(-1,result.indexOf(""nameHidden""));}"
"com.fasterxml.jackson.databind.views.TestViewsSerialization2.testDataBindingUsageWithoutView",0,"public void testDataBindingUsageWithoutView()throws Exception {ObjectMapper objectMapper=createObjectMapper(null);String json=serializeWithObjectMapper(new ComplexTestData(),null,objectMapper);assertTrue(json.indexOf(""nameHidden"")> 0);}"
"com.fasterxml.jackson.databind.views.TestViewsSerialization2.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testSimple",0,"public void testSimple()throws Exception {final String JSON=""{\""a\"" : 123,\""list\"" :[12.25,null,true,{},[]]}"";ObjectMapper m=new ObjectMapper();JsonNode tree=m.readTree(JSON);JsonParser p=tree.traverse();assertNull(p.getCurrentToken());assertNull(p.getCurrentName());assertToken(JsonToken.START_OBJECT,p.nextToken());assertNull(p.getCurrentName());assertEquals(""Expected START_OBJECT"",JsonToken.START_OBJECT.asString(),p.getText());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""a"",p.getCurrentName());assertEquals(""a"",p.getText());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertEquals(""a"",p.getCurrentName());assertEquals(123,p.getIntValue());assertEquals(""123"",p.getText());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertEquals(""list"",p.getCurrentName());assertEquals(""list"",p.getText());assertToken(JsonToken.START_ARRAY,p.nextToken());assertEquals(""list"",p.getCurrentName());assertEquals(JsonToken.START_ARRAY.asString(),p.getText());assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertNull(p.getCurrentName());assertEquals(12.25,p.getDoubleValue(),0);assertEquals(""12.25"",p.getText());assertToken(JsonToken.VALUE_NULL,p.nextToken());assertNull(p.getCurrentName());assertEquals(JsonToken.VALUE_NULL.asString(),p.getText());assertToken(JsonToken.VALUE_TRUE,p.nextToken());assertNull(p.getCurrentName());assertTrue(p.getBooleanValue());assertEquals(JsonToken.VALUE_TRUE.asString(),p.getText());assertToken(JsonToken.START_OBJECT,p.nextToken());assertNull(p.getCurrentName());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.getCurrentName());assertToken(JsonToken.START_ARRAY,p.nextToken());assertNull(p.getCurrentName());assertToken(JsonToken.END_ARRAY,p.nextToken());assertNull(p.getCurrentName());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());assertNull(p.getCurrentName());assertNull(p.nextToken());p.close();assertTrue(p.isClosed());}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testArray",0,"public void testArray()throws Exception {ObjectMapper m=new ObjectMapper();JsonParser p=m.readTree(""[]"").traverse();assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();p=m.readTree(""[[]]"").traverse();assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();p=m.readTree(""[[12.1 ]]"").traverse();assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testNested",0,"public void testNested()throws Exception {final String JSON=""{\""coordinates\"":[[[-3,\n1],[179.859681,51.175092]]]}"";ObjectMapper m=new ObjectMapper();JsonNode tree=m.readTree(JSON);JsonParser p=tree.traverse();assertToken(JsonToken.START_OBJECT,p.nextToken());assertToken(JsonToken.FIELD_NAME,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.START_ARRAY,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertToken(JsonToken.VALUE_NUMBER_FLOAT,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_ARRAY,p.nextToken());assertToken(JsonToken.END_OBJECT,p.nextToken());p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testSpecDoc",0,"/** * Unit test that verifies that we can (re)parse sample document from JSON specification.*/public void testSpecDoc()throws Exception {ObjectMapper m=new ObjectMapper();JsonNode tree=m.readTree(SAMPLE_DOC_JSON_SPEC);JsonParser p=tree.traverse();verifyJsonSpecSampleDoc(p,true);p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testBinaryPojo",0,"public void testBinaryPojo()throws Exception {byte[]inputBinary=new byte[]{1,2,100};POJONode n=new POJONode(inputBinary);JsonParser p=n.traverse();assertNull(p.getCurrentToken());assertToken(JsonToken.VALUE_EMBEDDED_OBJECT,p.nextToken());byte[]data=p.getBinaryValue();assertNotNull(data);assertArrayEquals(inputBinary,data);Object pojo=p.getEmbeddedObject();assertSame(data,pojo);p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testBinaryNode",0,"public void testBinaryNode()throws Exception {byte[]inputBinary=new byte[]{0,-5};BinaryNode n=new BinaryNode(inputBinary);JsonParser p=n.traverse();assertNull(p.getCurrentToken());assertToken(JsonToken.VALUE_EMBEDDED_OBJECT,p.nextToken());byte[]data=p.getBinaryValue();assertNotNull(data);assertArrayEquals(inputBinary,data);assertEquals(""APs="",p.getText());assertNull(p.nextToken());p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testTextAsBinary",0,"public void testTextAsBinary()throws Exception {TextNode n=new TextNode(""   APs=\n"");JsonParser p=n.traverse();assertNull(p.getCurrentToken());assertToken(JsonToken.VALUE_STRING,p.nextToken());byte[]data=p.getBinaryValue();assertNotNull(data);assertArrayEquals(new byte[]{0,-5},data);assertNull(p.nextToken());p.close();assertTrue(p.isClosed());n=new TextNode(""?!??"");p=n.traverse();assertToken(JsonToken.VALUE_STRING,p.nextToken());try {p.getBinaryValue();}catch(InvalidFormatException e){verifyException(e,""Illegal character"");}p.close();}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testDataBind",0,"/** * Very simple test case to verify that tree-to-POJO conversion works ok*/public void testDataBind()throws Exception {ObjectMapper m=new ObjectMapper();JsonNode tree=m.readTree(""{\""name\"" : \""Tatu\"",\n"" + ""\""magicNumber\"" : 42,"" + ""\""kids\"" :[\""Leo\"",\""Lila\"",\""Leia\""]\n""+ ""}"");Person tatu=m.treeToValue(tree,Person.class);assertNotNull(tatu);assertEquals(42,tatu.magicNumber);assertEquals(""Tatu"",tatu.name);assertNotNull(tatu.kids);assertEquals(3,tatu.kids.size());assertEquals(""Leo"",tatu.kids.get(0));assertEquals(""Lila"",tatu.kids.get(1));assertEquals(""Leia"",tatu.kids.get(2));}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.testSkipChildrenWrt370",0,"public void testSkipChildrenWrt370()throws Exception {ObjectMapper o=new ObjectMapper();ObjectNode n=o.createObjectNode();n.putObject(""inner"").put(""value"",""test"");n.putObject(""unknown"").putNull(""inner"");Jackson370Bean obj=o.readValue(n.traverse(),Jackson370Bean.class);assertNotNull(obj.inner);assertEquals(""test"",obj.inner.value);}"
"com.fasterxml.jackson.databind.node.TestTreeTraversingParser.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testConfigs",0,"public void testConfigs()throws IOException {byte[]base=jdkSerialize(MAPPER.getDeserializationConfig().getBaseSettings());assertNotNull(jdkDeserialize(base));DeserializationConfig origDC=MAPPER.getDeserializationConfig();SerializationConfig origSC=MAPPER.getSerializationConfig();byte[]dcBytes=jdkSerialize(origDC);byte[]scBytes=jdkSerialize(origSC);DeserializationConfig dc=jdkDeserialize(dcBytes);assertNotNull(dc);assertEquals(dc._deserFeatures,origDC._deserFeatures);SerializationConfig sc=jdkDeserialize(scBytes);assertNotNull(sc);assertEquals(sc._serFeatures,origSC._serFeatures);}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testEnumHandlers",0,"public void testEnumHandlers()throws IOException {ObjectMapper mapper=new ObjectMapper();String json=mapper.writerFor(EnumPOJO.class).writeValueAsString(new EnumPOJO());EnumPOJO result=mapper.readerFor(EnumPOJO.class).readValue(json);assertNotNull(result);byte[]bytes=jdkSerialize(mapper);ObjectMapper mapper2=jdkDeserialize(bytes);assertNotNull(mapper2);bytes=jdkSerialize(mapper.readerFor(EnumPOJO.class));ObjectReader r=jdkDeserialize(bytes);assertNotNull(r);bytes=jdkSerialize(mapper.writerFor(EnumPOJO.class));ObjectWriter w=jdkDeserialize(bytes);assertNotNull(w);String json2=w.writeValueAsString(new EnumPOJO());assertEquals(json,json2);EnumPOJO result2=r.readValue(json2);assertNotNull(result2);}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testObjectWriter",0,"public void testObjectWriter()throws IOException {ObjectWriter origWriter=MAPPER.writer();final String EXP_JSON=""{\""x\"":2,\""y\"":3}"";final MyPojo p=new MyPojo(2,3);assertEquals(EXP_JSON,origWriter.writeValueAsString(p));String json=origWriter.writeValueAsString(new AnyBean().addEntry(""a"",""b""));assertNotNull(json);byte[]bytes=jdkSerialize(origWriter);ObjectWriter writer2=jdkDeserialize(bytes);assertEquals(EXP_JSON,writer2.writeValueAsString(p));}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testObjectReader",0,"public void testObjectReader()throws IOException {ObjectReader origReader=MAPPER.readerFor(MyPojo.class);String JSON=""{\""x\"":1,\""y\"":2}"";MyPojo p1=origReader.readValue(JSON);assertEquals(2,p1.y);ObjectReader anyReader=MAPPER.readerFor(AnyBean.class);AnyBean any=anyReader.readValue(JSON);assertEquals(Integer.valueOf(2),any.properties().get(""y""));byte[]readerBytes=jdkSerialize(origReader);ObjectReader reader2=jdkDeserialize(readerBytes);MyPojo p2=reader2.readValue(JSON);assertEquals(2,p2.y);ObjectReader anyReader2=jdkDeserialize(jdkSerialize(anyReader));AnyBean any2=anyReader2.readValue(JSON);assertEquals(Integer.valueOf(2),any2.properties().get(""y""));}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testObjectMapper",0,"public void testObjectMapper()throws IOException {final String EXP_JSON=""{\""x\"":2,\""y\"":3}"";final MyPojo p=new MyPojo(2,3);assertEquals(EXP_JSON,MAPPER.writeValueAsString(p));byte[]bytes=jdkSerialize(MAPPER);ObjectMapper mapper2=jdkDeserialize(bytes);assertEquals(EXP_JSON,mapper2.writeValueAsString(p));MyPojo p2=mapper2.readValue(EXP_JSON,MyPojo.class);assertEquals(p.x,p2.x);assertEquals(p.y,p2.y);}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testTypeFactory",0,"public void testTypeFactory()throws Exception {TypeFactory orig=TypeFactory.defaultInstance();JavaType t=orig.constructType(JavaType.class);assertNotNull(t);byte[]bytes=jdkSerialize(orig);TypeFactory result=jdkDeserialize(bytes);assertNotNull(result);t=orig.constructType(JavaType.class);assertEquals(JavaType.class,t.getRawClass());}"
"com.fasterxml.jackson.databind.TestJDKSerialization.testLRUMap",0,"public void testLRUMap()throws Exception {LRUMap<String,Integer> map=new LRUMap<String,Integer>(32,32);map.put(""a"",1);byte[]bytes=jdkSerialize(map);LRUMap<String,Integer> result=jdkDeserialize(bytes);assertEquals(0,result.size());result.put(""a"",2);assertEquals(1,result.size());}"
"com.fasterxml.jackson.databind.TestJDKSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testNaN",0,"public void testNaN()throws Exception {Float result=MAPPER.readValue("" \""NaN\"""",Float.class);assertEquals(Float.valueOf(Float.NaN),result);Double d=MAPPER.readValue("" \""NaN\"""",Double.class);assertEquals(Double.valueOf(Double.NaN),d);Number num=MAPPER.readValue("" \""NaN\"""",Number.class);assertEquals(Double.valueOf(Double.NaN),num);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testDoubleInf",0,"public void testDoubleInf()throws Exception {Double result=MAPPER.readValue("" \"""" + Double.POSITIVE_INFINITY + ""\"""",Double.class);assertEquals(Double.valueOf(Double.POSITIVE_INFINITY),result);result=MAPPER.readValue("" \"""" + Double.NEGATIVE_INFINITY + ""\"""",Double.class);assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testEmptyAsNumber",0,"public void testEmptyAsNumber()throws Exception {assertNull(MAPPER.readValue(quote(""""),Byte.class));assertNull(MAPPER.readValue(quote(""""),Short.class));assertNull(MAPPER.readValue(quote(""""),Integer.class));assertNull(MAPPER.readValue(quote(""""),Integer.class));assertNull(MAPPER.readValue(quote(""""),Long.class));assertNull(MAPPER.readValue(quote(""""),Float.class));assertNull(MAPPER.readValue(quote(""""),Double.class));assertNull(MAPPER.readValue(quote(""""),BigInteger.class));assertNull(MAPPER.readValue(quote(""""),BigDecimal.class));}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testDeserializeDecimalHappyPath",0,"public void testDeserializeDecimalHappyPath()throws Exception {String json=""{\""defaultValue\"":{\""value\"": 123}}"";MyBeanHolder result=MAPPER.readValue(json,MyBeanHolder.class);assertEquals(BigDecimal.valueOf(123),result.defaultValue.value.decimal);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testDeserializeDecimalProperException",0,"public void testDeserializeDecimalProperException()throws Exception {String json=""{\""defaultValue\"":{\""value\"": \""123\""}}"";try {MAPPER.readValue(json,MyBeanHolder.class);fail(""should have raised exception"");}catch(JsonProcessingException e){verifyException(e,""not numeric"");}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testDeserializeDecimalProperExceptionWhenIdSet",0,"public void testDeserializeDecimalProperExceptionWhenIdSet()throws Exception {String json=""{\""id\"": 5,\""defaultValue\"":{\""value\"": \""123\""}}"";try {MyBeanHolder result=MAPPER.readValue(json,MyBeanHolder.class);fail(""should have raised exception instead value was set to "" + result.defaultValue.value.decimal.toString());}catch(JsonProcessingException e){verifyException(e,""not numeric"");}}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testScientificNotationAsStringForNumber",0,"public void testScientificNotationAsStringForNumber()throws Exception {Object ob=MAPPER.readValue(""\""3E-8\"""",Number.class);assertEquals(Double.class,ob.getClass());ob=MAPPER.readValue(""\""3e-8\"""",Number.class);assertEquals(Double.class,ob.getClass());ob=MAPPER.readValue(""\""300000000\"""",Number.class);assertEquals(Integer.class,ob.getClass());ob=MAPPER.readValue(""\""123456789012\"""",Number.class);assertEquals(Long.class,ob.getClass());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testIntAsNumber",0,"public void testIntAsNumber()throws Exception {Number result=MAPPER.readValue("" 123 "",Number.class);assertEquals(Integer.valueOf(123),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testLongAsNumber",0,"public void testLongAsNumber()throws Exception {long exp=1234567890123L;Number result=MAPPER.readValue(String.valueOf(exp),Number.class);assertEquals(Long.valueOf(exp),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testBigIntAsNumber",0,"public void testBigIntAsNumber()throws Exception {BigInteger biggie=new BigInteger(""1234567890123456789012345678901234567890"");Number result=MAPPER.readValue(biggie.toString(),Number.class);assertEquals(BigInteger.class,biggie.getClass());assertEquals(biggie,result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testIntTypeOverride",0,"public void testIntTypeOverride()throws Exception {ObjectReader r=MAPPER.reader(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS);BigInteger exp=BigInteger.valueOf(123L);Number result=r.forType(Number.class).readValue("" 123 "");assertEquals(BigInteger.class,result.getClass());assertEquals(exp,result);r.forType(Object.class).readValue(""123"");assertEquals(BigInteger.class,result.getClass());assertEquals(exp,result);JsonNode node=r.readTree(""  123"");assertTrue(node.isBigInteger());assertEquals(123,node.asInt());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testDoubleAsNumber",0,"public void testDoubleAsNumber()throws Exception {Number result=MAPPER.readValue(new StringReader("" 1.0 ""),Number.class);assertEquals(Double.valueOf(1.0),result);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testFpTypeOverrideSimple",0,"public void testFpTypeOverrideSimple()throws Exception {ObjectReader r=MAPPER.reader(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);BigDecimal dec=new BigDecimal(""0.1"");Number result=r.forType(Number.class).readValue(dec.toString());assertEquals(BigDecimal.class,result.getClass());assertEquals(dec,result);Object value=r.forType(Object.class).readValue(dec.toString());assertEquals(BigDecimal.class,result.getClass());assertEquals(dec,value);JsonNode node=r.readTree(dec.toString());assertTrue(node.isBigDecimal());assertEquals(dec.doubleValue(),node.asDouble());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testFpTypeOverrideStructured",0,"public void testFpTypeOverrideStructured()throws Exception {ObjectReader r=MAPPER.reader(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS);BigDecimal dec=new BigDecimal(""-19.37"");@SuppressWarnings(""unchecked"")List<Object> list=(List<Object>)r.forType(List.class).readValue(""["" + dec.toString()+ "" ]"");assertEquals(1,list.size());Object val=list.get(0);assertEquals(BigDecimal.class,val.getClass());assertEquals(dec,val);Map<?,?> map=r.forType(Map.class).readValue(""{\""a\"" : "" + dec.toString()+ "" }"");assertEquals(1,map.size());val=map.get(""a"");assertEquals(BigDecimal.class,val.getClass());assertEquals(dec,val);}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.testForceIntsToLongs",0,"public void testForceIntsToLongs()throws Exception {ObjectReader r=MAPPER.reader(DeserializationFeature.USE_LONG_FOR_INTS);Object ob=r.forType(Object.class).readValue(""42"");assertEquals(Long.class,ob.getClass());assertEquals(Long.valueOf(42L),ob);Number n=r.forType(Number.class).readValue(""42"");assertEquals(Long.class,n.getClass());assertEquals(Long.valueOf(42L),n);JsonNode node=r.readTree(""42"");if (!node.isLong()){fail(""Expected LongNode,got: "" + node.getClass().getName());}assertEquals(42,node.asInt());}"
"com.fasterxml.jackson.databind.deser.jdk.JDKNumberDeserTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testBooleanMapKeyDeserialization",0,"public void testBooleanMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Boolean,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'true':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Boolean.TRUE,result.map.entrySet().iterator().next().getKey());result=MAPPER.readValue(aposToQuotes(""{'map':{'false':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Boolean.FALSE,result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testByteMapKeyDeserialization",0,"public void testByteMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Byte,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'13':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Byte.valueOf((byte)13),result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testShortMapKeyDeserialization",0,"public void testShortMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Short,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'13':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Short.valueOf((short)13),result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testIntegerMapKeyDeserialization",0,"public void testIntegerMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Integer,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'-3':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Integer.valueOf(-3),result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testLongMapKeyDeserialization",0,"public void testLongMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Long,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'42':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Long.valueOf(42),result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testFloatMapKeyDeserialization",0,"public void testFloatMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Float,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'3.5':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Float.valueOf(3.5f),result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testDoubleMapKeyDeserialization",0,"public void testDoubleMapKeyDeserialization()throws Exception {TypeReference<?> type=new TypeReference<MapWrapper<Double,String>>(){};MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'0.25':'foobar'}}""),type);assertEquals(1,result.map.size());Assert.assertEquals(Double.valueOf(0.25),result.map.entrySet().iterator().next().getKey());}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testDeserializeKeyViaFactory",0,"public void testDeserializeKeyViaFactory()throws Exception {Map<FullName,Double> map=MAPPER.readValue(""{\""first.last\"": 42}"",new TypeReference<Map<FullName,Double>>(){});Map.Entry<FullName,Double> entry=map.entrySet().iterator().next();FullName key=entry.getKey();assertEquals(key._firstname,""first"");assertEquals(key._lastname,""last"");assertEquals(entry.getValue().doubleValue(),42,0);}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.testByteArrayMapKeyDeserialization",0,"public void testByteArrayMapKeyDeserialization()throws Exception {byte[]binary=new byte[]{1,2,4,8,16,33,79};String encoded=Base64Variants.MIME.encode(binary);MapWrapper<byte[],String> result=MAPPER.readValue(aposToQuotes(""{'map':{'"" + encoded + ""':'foobar'}}""),new TypeReference<MapWrapper<byte[],String>>(){});assertEquals(1,result.map.size());Map.Entry<byte[],String> entry=result.map.entrySet().iterator().next();assertEquals(""foobar"",entry.getValue());byte[]key=entry.getKey();Assert.assertArrayEquals(binary,key);}"
"com.fasterxml.jackson.databind.deser.jdk.MapKeyDeserializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.access.TestAnyGetterAccess.testDynaBean",0,"public void testDynaBean()throws Exception {DynaBean b=new DynaBean();b.id=123;b.set(""name"",""Billy"");assertEquals(""{\""id\"":123,\""name\"":\""Billy\""}"",MAPPER.writeValueAsString(b));DynaBean result=MAPPER.readValue(""{\""id\"":2,\""name\"":\""Joe\""}"",DynaBean.class);assertEquals(2,result.id);assertEquals(""Joe"",result.other.get(""name""));}"
"com.fasterxml.jackson.databind.access.TestAnyGetterAccess.testPrivate",0,"public void testPrivate()throws Exception {String json=MAPPER.writeValueAsString(new PrivateThing());assertEquals(""{\""a\"":\""A\""}"",json);}"
"com.fasterxml.jackson.databind.access.TestAnyGetterAccess.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.NotANumberConversionTest.testBigDecimalWithNaN",0,"public void testBigDecimalWithNaN()throws Exception {JsonNode tree=m.valueToTree(new DoubleWrapper(Double.NaN));assertNotNull(tree);String json=m.writeValueAsString(tree);assertNotNull(json);tree=m.valueToTree(new DoubleWrapper(Double.NEGATIVE_INFINITY));assertNotNull(tree);json=m.writeValueAsString(tree);assertNotNull(json);tree=m.valueToTree(new DoubleWrapper(Double.POSITIVE_INFINITY));assertNotNull(tree);json=m.writeValueAsString(tree);assertNotNull(json);}"
"com.fasterxml.jackson.databind.node.NotANumberConversionTest.testBigDecimalWithoutNaN",0,"public void testBigDecimalWithoutNaN()throws Exception {BigDecimal input=new BigDecimal(Double.MIN_VALUE).divide(new BigDecimal(10L));JsonNode tree=m.readTree(input.toString());assertTrue(tree.isBigDecimal());BigDecimal output=tree.decimalValue();assertEquals(input,output);}"
"com.fasterxml.jackson.databind.node.NotANumberConversionTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestVirtualProperties.testAttributeProperties",0,"public void testAttributeProperties()throws Exception {Map<String,Object> stuff=new LinkedHashMap<String,Object>();stuff.put(""x"",3);stuff.put(""y"",ABC.B);String json=WRITER.withAttribute(""id"",""abc123"").withAttribute(""internal"",stuff).writeValueAsString(new SimpleBean());assertEquals(aposToQuotes(""{'value':13,'id':'abc123','extra':{'x':3,'y':'B'}}""),json);json=WRITER.withAttribute(""id"",""abc123"").withAttribute(""internal"",stuff).writeValueAsString(new SimpleBeanPrepend());assertEquals(aposToQuotes(""{'id':'abc123','extra':{'x':3,'y':'B'},'value':13}""),json);}"
"com.fasterxml.jackson.databind.ser.TestVirtualProperties.testAttributePropInclusion",0,"public void testAttributePropInclusion()throws Exception {String json=WRITER.withAttribute(""desc"",""nice"").writeValueAsString(new OptionalsBean());assertEquals(aposToQuotes(""{'value':28,'desc':'nice'}""),json);json=WRITER.writeValueAsString(new OptionalsBean());assertEquals(aposToQuotes(""{'value':28}""),json);json=WRITER.withAttribute(""desc"","""").writeValueAsString(new OptionalsBean());assertEquals(aposToQuotes(""{'value':28}""),json);}"
"com.fasterxml.jackson.databind.ser.TestVirtualProperties.testCustomProperties",0,"public void testCustomProperties()throws Exception {String json=WRITER.withAttribute(""desc"",""nice"").writeValueAsString(new CustomVBean());assertEquals(aposToQuotes(""{'id':'abc123','extra':[42],'value':72}""),json);}"
"com.fasterxml.jackson.databind.ser.TestVirtualProperties.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testSimpleMapImitation",0,"public void testSimpleMapImitation()throws Exception {MapImitator mapHolder=MAPPER.readValue(""{\""a\"" : 3,\""b\"" : true,\""c\"":[1,2,3]}"",MapImitator.class);Map<String,Object> result=mapHolder._map;assertEquals(3,result.size());assertEquals(Integer.valueOf(3),result.get(""a""));assertEquals(Boolean.TRUE,result.get(""b""));Object ob=result.get(""c"");assertTrue(ob instanceof List<?>);List<?> l=(List<?>)ob;assertEquals(3,l.size());assertEquals(Integer.valueOf(3),l.get(2));}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testAnySetterDisable",0,"public void testAnySetterDisable()throws Exception {try {MAPPER.readValue(aposToQuotes(""{'value':3}""),MapImitatorDisabled.class);fail(""Should not pass"");}catch(JsonMappingException e){verifyException(e,""Unrecognized field \""value\"""");}}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testSimpleTyped",0,"public void testSimpleTyped()throws Exception {MapImitatorWithValue mapHolder=MAPPER.readValue(""{\""a\"" :[3,-1 ],\""b\"" :[]}"",MapImitatorWithValue.class);Map<String,int[]> result=mapHolder._map;assertEquals(2,result.size());assertEquals(new int[]{3,-1},result.get(""a""));assertEquals(new int[0],result.get(""b""));}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testBrokenWithDoubleAnnotations",0,"public void testBrokenWithDoubleAnnotations()throws Exception {try {@SuppressWarnings(""unused"")Broken b=MAPPER.readValue(""{\""a\"" : 3 }"",Broken.class);fail(""Should have gotten an exception"");}catch(JsonMappingException e){verifyException(e,""Multiple 'any-setter' methods"");}}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testIgnored",0,"public void testIgnored()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);_testIgnorals(mapper);}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testIgnoredPart2",0,"public void testIgnoredPart2()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);_testIgnorals(mapper);}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testProblem744",0,"public void testProblem744()throws Exception {Bean744 bean=MAPPER.readValue(""{\""name\"":\""Bob\""}"",Bean744.class);assertNotNull(bean.additionalProperties);assertEquals(1,bean.additionalProperties.size());assertEquals(""Bob"",bean.additionalProperties.get(""name""));}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testIssue797",0,"public void testIssue797()throws Exception {String json=MAPPER.writeValueAsString(new Bean797BaseImpl());assertEquals(""{}"",json);}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testPolymorphic",0,"public void testPolymorphic()throws Exception {PolyAnyBean input=new PolyAnyBean();input.props.put(""a"",new Impl(""xyz""));String json=MAPPER.writeValueAsString(input);PolyAnyBean result=MAPPER.readValue(json,PolyAnyBean.class);assertEquals(1,result.props.size());Base ob=result.props.get(""a"");assertNotNull(ob);assertTrue(ob instanceof Impl);assertEquals(""xyz"",((Impl)ob).value);}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testJsonAnySetterOnMap",0,"public void testJsonAnySetterOnMap()throws Exception {JsonAnySetterOnMap result=MAPPER.readValue(""{\""id\"":2,\""name\"":\""Joe\"",\""city\"":\""New Jersey\""}"",JsonAnySetterOnMap.class);assertEquals(2,result.id);assertEquals(""Joe"",result.other.get(""name""));assertEquals(""New Jersey"",result.other.get(""city""));}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testJsonAnySetterOnNullMap",0,"public void testJsonAnySetterOnNullMap()throws Exception {JsonAnySetterOnNullMap result=MAPPER.readValue(""{\""id\"":2,\""name\"":\""Joe\"",\""city\"":\""New Jersey\""}"",JsonAnySetterOnNullMap.class);assertEquals(2,result.id);assertNull(result.other);}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.testGenericAnySetter",0,"public void testGenericAnySetter()throws Exception {ObjectMapper mapper=new ObjectMapper();Map<String,Integer> stringGenericMap=new HashMap<String,Integer>();stringGenericMap.put(""testStringKey"",5);Map<Integer,Integer> integerGenericMap=new HashMap<Integer,Integer>();integerGenericMap.put(111,6);MyWrapper deserialized=mapper.readValue(aposToQuotes(""{'myStringGeneric':{'staticallyMappedProperty':'Test','testStringKey':5},'myIntegerGeneric':{'staticallyMappedProperty':'Test2','111':6}}""),MyWrapper.class);MyGeneric<String> stringGeneric=deserialized.getMyStringGeneric();MyGeneric<Integer> integerGeneric=deserialized.getMyIntegerGeneric();assertNotNull(stringGeneric);assertEquals(stringGeneric.getStaticallyMappedProperty(),""Test"");for(Map.Entry<String,Integer> entry : stringGeneric.getDynamicallyMappedProperties().entrySet()){assertTrue(""A key in MyGeneric<String> is not an String."",entry.getKey()instanceof String);assertTrue(""A value in MyGeneric<Integer> is not an Integer."",entry.getValue()instanceof Integer);}assertEquals(stringGeneric.getDynamicallyMappedProperties(),stringGenericMap);assertNotNull(integerGeneric);assertEquals(integerGeneric.getStaticallyMappedProperty(),""Test2"");for(Map.Entry<Integer,Integer> entry : integerGeneric.getDynamicallyMappedProperties().entrySet()){Object key=entry.getKey();assertEquals(""A key in MyGeneric<Integer> is not an Integer."",Integer.class,key.getClass());Object value=entry.getValue();assertEquals(""A value in MyGeneric<Integer> is not an Integer."",Integer.class,value.getClass());}assertEquals(integerGeneric.getDynamicallyMappedProperties(),integerGenericMap);}"
"com.fasterxml.jackson.databind.deser.AnySetterTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeCustomTest.testSimpleCustomFilter",0,"public void testSimpleCustomFilter()throws Exception {assertEquals(aposToQuotes(""{'value':'x'}""),MAPPER.writeValueAsString(new FooBean(""x"")));assertEquals(""{}"",MAPPER.writeValueAsString(new FooBean(""foo"")));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeCustomTest.testCustomFilterWithMap",0,"public void testCustomFilterWithMap()throws Exception {FooMapBean input=new FooMapBean().add(""a"",""1"").add(""b"",""foo"").add(""c"",""2"");assertEquals(aposToQuotes(""{'stuff':{'a':'1','c':'2'}}""),MAPPER.writeValueAsString(input));}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeCustomTest.testBrokenFilter",0,"public void testBrokenFilter()throws Exception {try {String json=MAPPER.writeValueAsString(new BrokenBean(""foo""));fail(""Should not pass,produced: "" + json);}catch(InvalidDefinitionException e){verifyException(e,""Problem determining whether filter of type"");verifyException(e,""filter out `null`"");}}"
"com.fasterxml.jackson.databind.ser.filter.JsonIncludeCustomTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicDelegating.testAbstractDelegateWithCreator",0,"public void testAbstractDelegateWithCreator()throws Exception {Issue580Bean input=new Issue580Bean(new Issue580Impl(13));ObjectMapper mapper=new ObjectMapper();String json=mapper.writeValueAsString(input);Issue580Bean result=mapper.readValue(json,Issue580Bean.class);assertNotNull(result);assertNotNull(result.value);assertEquals(13,((Issue580Impl)result.value).id);}"
"com.fasterxml.jackson.databind.creators.TestPolymorphicDelegating.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.TestCyclicTypes.testLinked",0,"public void testLinked()throws Exception {Bean last=new Bean(null,""last"");Bean first=new Bean(last,""first"");Map<String,Object> map=writeAndMap(new ObjectMapper(),first);assertEquals(2,map.size());assertEquals(""first"",map.get(""name""));@SuppressWarnings(""unchecked"")Map<String,Object> map2=(Map<String,Object>)map.get(""next"");assertNotNull(map2);assertEquals(2,map2.size());assertEquals(""last"",map2.get(""name""));assertNull(map2.get(""next""));}"
"com.fasterxml.jackson.databind.ser.TestCyclicTypes.testSelfReference",0,"/** * Test for verifying that [JACKSON-158]works as expected*/public void testSelfReference()throws Exception {Bean selfRef=new Bean(null,""self-refs"");Bean first=new Bean(selfRef,""first"");selfRef.assignNext(selfRef);ObjectMapper m=new ObjectMapper();Bean[]wrapper=new Bean[]{first};try {writeAndMap(m,wrapper);}catch(JsonMappingException e){verifyException(e,""Direct self-reference leading to cycle"");}}"
"com.fasterxml.jackson.databind.ser.TestCyclicTypes.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testSimpleUnwrappingSerialize",0,"public void testSimpleUnwrappingSerialize()throws Exception {assertEquals(""{\""name\"":\""Tatu\"",\""x\"":1,\""y\"":2}"",MAPPER.writeValueAsString(new Unwrapping(""Tatu"",1,2)));}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testDeepUnwrappingSerialize",0,"public void testDeepUnwrappingSerialize()throws Exception {assertEquals(""{\""name\"":\""Tatu\"",\""x\"":1,\""y\"":2}"",MAPPER.writeValueAsString(new DeepUnwrapping(""Tatu"",1,2)));}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testSimpleUnwrappedDeserialize",0,"public void testSimpleUnwrappedDeserialize()throws Exception {Unwrapping bean=MAPPER.readValue(""{\""name\"":\""Tatu\"",\""y\"":7,\""x\"":-13}"",Unwrapping.class);assertEquals(""Tatu"",bean.name);Location loc=bean.location;assertNotNull(loc);assertEquals(-13,loc.x);assertEquals(7,loc.y);}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testDoubleUnwrapping",0,"public void testDoubleUnwrapping()throws Exception {TwoUnwrappedProperties bean=MAPPER.readValue(""{\""first\"":\""Joe\"",\""y\"":7,\""last\"":\""Smith\"",\""x\"":-13}"",TwoUnwrappedProperties.class);Location loc=bean.location;assertNotNull(loc);assertEquals(-13,loc.x);assertEquals(7,loc.y);Name name=bean.name;assertNotNull(name);assertEquals(""Joe"",name.first);assertEquals(""Smith"",name.last);}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testDeepUnwrapping",0,"public void testDeepUnwrapping()throws Exception {DeepUnwrapping bean=MAPPER.readValue(""{\""x\"":3,\""name\"":\""Bob\"",\""y\"":27}"",DeepUnwrapping.class);Unwrapping uw=bean.unwrapped;assertNotNull(uw);assertEquals(""Bob"",uw.name);Location loc=uw.location;assertNotNull(loc);assertEquals(3,loc.x);assertEquals(27,loc.y);}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testUnwrappedDeserializeWithCreator",0,"public void testUnwrappedDeserializeWithCreator()throws Exception {UnwrappingWithCreator bean=MAPPER.readValue(""{\""x\"":1,\""y\"":2,\""name\"":\""Tatu\""}"",UnwrappingWithCreator.class);assertEquals(""Tatu"",bean.name);Location loc=bean.location;assertNotNull(loc);assertEquals(1,loc.x);assertEquals(2,loc.y);}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testIssue615",0,"public void testIssue615()throws Exception {Parent input=new Parent(""name"");String json=MAPPER.writeValueAsString(input);Parent output=MAPPER.readValue(json,Parent.class);assertEquals(""name"",output.c1.field);}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testUnwrappedAsPropertyIndicator",0,"public void testUnwrappedAsPropertyIndicator()throws Exception {Inner inner=new Inner();inner.animal=""Zebra"";Outer outer=new Outer();outer.inner=inner;String actual=MAPPER.writeValueAsString(outer);assertTrue(actual.contains(""animal""));assertTrue(actual.contains(""Zebra""));assertFalse(actual.contains(""inner""));}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.testCaseInsensitiveUnwrap",0,"public void testCaseInsensitiveUnwrap()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);Person p=mapper.readValue(""{}"",Person.class);assertNotNull(p);}"
"com.fasterxml.jackson.databind.struct.TestUnwrapped.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testSimpleAutoDetect",0,"public void testSimpleAutoDetect()throws Exception {SimpleFieldBean bean=new SimpleFieldBean();bean.x=13;Map<String,Object> result=writeAndMap(MAPPER,bean);assertEquals(2,result.size());assertEquals(Integer.valueOf(13),result.get(""x""));assertEquals(Integer.valueOf(0),result.get(""y""));}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testSimpleAnnotation",0,"@SuppressWarnings(""unchecked"")public void testSimpleAnnotation()throws Exception {SimpleFieldBean2 bean=new SimpleFieldBean2();bean.values=new String[]{""a"",""b""};Map<String,Object> result=writeAndMap(MAPPER,bean);assertEquals(1,result.size());List<String> values=(List<String>)result.get(""values"");assertEquals(2,values.size());assertEquals(""a"",values.get(0));assertEquals(""b"",values.get(1));}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testTransientAndStatic",0,"public void testTransientAndStatic()throws Exception {TransientBean bean=new TransientBean();Map<String,Object> result=writeAndMap(MAPPER,bean);assertEquals(1,result.size());assertEquals(Integer.valueOf(0),result.get(""a""));}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testNoAutoDetect",0,"public void testNoAutoDetect()throws Exception {NoAutoDetectBean bean=new NoAutoDetectBean();bean._z=-4;Map<String,Object> result=writeAndMap(MAPPER,bean);assertEquals(1,result.size());assertEquals(Integer.valueOf(-4),result.get(""z""));}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testMethodPrecedence",0,"/** * Unit test that verifies that if both a field and a getter method exist for a logical property (which is allowed),getter has precendence over field.*/public void testMethodPrecedence()throws Exception {FieldAndMethodBean bean=new FieldAndMethodBean();bean.z=9;assertEquals(10,bean.getZ());assertEquals(""{\""z\"":10}"",MAPPER.writeValueAsString(bean));}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testOkDupFields",0,"/** * Testing [JACKSON-226]: it is ok to have ""field override"",as long as there are no intra-class conflicts.*/public void testOkDupFields()throws Exception {OkDupFieldBean bean=new OkDupFieldBean(1,2);Map<String,Object> json=writeAndMap(MAPPER,bean);assertEquals(2,json.size());assertEquals(Integer.valueOf(1),json.get(""x""));assertEquals(Integer.valueOf(2),json.get(""y""));}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testIssue240",0,"public void testIssue240()throws Exception {Item240 bean=new Item240(""a12"",null);assertEquals(MAPPER.writeValueAsString(bean),""{\""id\"":\""a12\""}"");}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testFailureDueToDups",0,"public void testFailureDueToDups()throws Exception {try {writeAndMap(MAPPER,new DupFieldBean());}catch(JsonMappingException e){verifyException(e,""Multiple fields representing"");}}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.testFailureDueToDupField",0,"public void testFailureDueToDupField()throws Exception {try {writeAndMap(MAPPER,new DupFieldBean2());}catch(JsonMappingException e){verifyException(e,""Multiple fields representing"");}}"
"com.fasterxml.jackson.databind.ser.FieldSerializationTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test.testSimplePOJOType",0,"@SuppressWarnings(""deprecation"")public void testSimplePOJOType()throws Exception {JavaType elem=SimpleType.construct(Point.class);Point p=MAPPER.readValue(aposToQuotes(""{'x':1,'y':2}""),elem);assertNotNull(p);assertEquals(1,p.x);assertEquals(2,p.getY());}"
"com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test.testPOJOSubType",0,"@SuppressWarnings(""deprecation"")public void testPOJOSubType()throws Exception {JavaType elem=SimpleType.construct(Point3D.class);Point3D p=MAPPER.readValue(aposToQuotes(""{'x':1,'z':3,'y':2}""),elem);assertNotNull(p);assertEquals(1,p.x);assertEquals(2,p.getY());assertEquals(3,p.z);}"
"com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test.testExplicitCollectionType",0,"@SuppressWarnings(""deprecation"")public void testExplicitCollectionType()throws Exception {JavaType elem=SimpleType.construct(Point.class);JavaType t=CollectionType.construct(List.class,elem);final String json=aposToQuotes(""[{'x':1,'y':2},{'x':3,'y':6 }]"");List<Point> l=MAPPER.readValue(json,t);assertNotNull(l);assertEquals(2,l.size());Object ob=l.get(0);assertEquals(Point.class,ob.getClass());Point p=(Point)ob;assertEquals(1,p.x);assertEquals(2,p.getY());}"
"com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test.testExplicitMapType",0,"@SuppressWarnings(""deprecation"")public void testExplicitMapType()throws Exception {JavaType key=SimpleType.construct(String.class);JavaType elem=SimpleType.construct(Point.class);JavaType t=MapType.construct(Map.class,key,elem);final String json=aposToQuotes(""{'x':{'x':3,'y':5}}"");Map<String,Point> m=MAPPER.readValue(json,t);assertNotNull(m);assertEquals(1,m.size());Object ob=m.values().iterator().next();assertEquals(Point.class,ob.getClass());Point p=(Point)ob;assertEquals(3,p.x);assertEquals(5,p.getY());}"
"com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test.testDeprecatedTypeResolution",0,"@SuppressWarnings(""deprecation"")public void testDeprecatedTypeResolution()throws Exception {TypeFactory tf=MAPPER.getTypeFactory();JavaType t=tf.constructType(Point.class,getClass());assertEquals(Point.class,t.getRawClass());JavaType t2=tf.constructType(Point.class,(Class<?>)null);assertEquals(Point.class,t2.getRawClass());JavaType ctxt=tf.constructType(getClass());JavaType t3=tf.constructType(Point.class,ctxt);assertEquals(Point.class,t3.getRawClass());}"
"com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.node.TextNodeTest.testText",0,"public void testText(){assertNull(TextNode.valueOf(null));TextNode empty=TextNode.valueOf("""");assertStandardEquals(empty);assertSame(TextNode.EMPTY_STRING_NODE,empty);assertNodeNumbers(TextNode.valueOf(""-3""),-3,-3.0);assertNodeNumbers(TextNode.valueOf(""17.75""),17,17.75);long value=127353264013893L;TextNode n=TextNode.valueOf(String.valueOf(value));assertEquals(value,n.asLong());n=TextNode.valueOf(""foobar"");assertNodeNumbersForNonNumeric(n);assertEquals(""foobar"",n.asText(""barf""));assertEquals("""",empty.asText(""xyz""));assertTrue(TextNode.valueOf(""true"").asBoolean(true));assertTrue(TextNode.valueOf(""true"").asBoolean(false));assertFalse(TextNode.valueOf(""false"").asBoolean(true));assertFalse(TextNode.valueOf(""false"").asBoolean(false));}"
"com.fasterxml.jackson.databind.node.TextNodeTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.MapperViaParserTest.testPojoReading",0,"public void testPojoReading()throws IOException {JsonFactory jf=new MappingJsonFactory();final String JSON=""{\""x\"" : 9 }"";JsonParser jp=jf.createParser(new StringReader(JSON));assertToken(JsonToken.START_OBJECT,jp.nextToken());Pojo p=jp.readValueAs(Pojo.class);assertEquals(9,p._x);jp.close();jp=jf.createParser(new StringReader(JSON));p=jp.readValueAs(Pojo.class);assertEquals(9,p._x);jp.close();}"
"com.fasterxml.jackson.databind.MapperViaParserTest.testIncrementalPojoReading",0,"/** * Test similar to above,but instead reads a sequence of values*/public void testIncrementalPojoReading()throws IOException {JsonFactory jf=new MappingJsonFactory();final String JSON=""[1,true,null,\""abc\"" ]"";JsonParser jp=jf.createParser(new StringReader(JSON));assertToken(JsonToken.START_ARRAY,jp.nextToken());assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());assertEquals(Integer.valueOf(1),jp.readValueAs(Integer.class));assertEquals(Boolean.TRUE,jp.readValueAs(Boolean.class));assertNull(jp.readValueAs(Object.class));assertEquals(JsonToken.VALUE_NULL,jp.getLastClearedToken());assertEquals(""abc"",jp.readValueAs(String.class));assertNull(jp.readValueAs(Object.class));assertEquals(JsonToken.END_ARRAY,jp.getLastClearedToken());assertNull(jp.nextToken());jp.close();}"
"com.fasterxml.jackson.databind.MapperViaParserTest.testPojoReadingFailing",0,"@SuppressWarnings(""resource"")public void testPojoReadingFailing()throws IOException {JsonFactory jf=new JsonFactory();try {final String JSON=""{\""x\"" : 9 }"";JsonParser jp=jf.createParser(new StringReader(JSON));Pojo p=jp.readValueAs(Pojo.class);fail(""Expected an exception: got "" + p);}catch(IllegalStateException e){verifyException(e,""No ObjectCodec defined"");}}"
"com.fasterxml.jackson.databind.MapperViaParserTest.testEscapingUsingMapper",0,"public void testEscapingUsingMapper()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII,true);mapper.writeValueAsString(String.valueOf((char)257));}"
"com.fasterxml.jackson.databind.MapperViaParserTest.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestOverloaded.testSpecialization",0,"/** * It should be ok to overload with specialized  version;more specific method should be used.*/public void testSpecialization()throws Exception {ArrayListBean bean=MAPPER.readValue(""{\""list\"":[\""a\"",\""b\"",\""c\""]}"",ArrayListBean.class);assertNotNull(bean.list);assertEquals(3,bean.list.size());assertEquals(ArrayList.class,bean.list.getClass());assertEquals(""a"",bean.list.get(0));assertEquals(""b"",bean.list.get(1));assertEquals(""c"",bean.list.get(2));}"
"com.fasterxml.jackson.databind.deser.TestOverloaded.testOverride",0,"/** * As per [JACKSON-255],should also allow more general overriding,as long as there are no in-class conflicts.*/public void testOverride()throws Exception {WasNumberBean bean=MAPPER.readValue(""{\""value\"" : \""abc\""}"",WasNumberBean.class);assertNotNull(bean);assertEquals(""abc"",bean.value);}"
"com.fasterxml.jackson.databind.deser.TestOverloaded.testConflictResolution",0,"public void testConflictResolution()throws Exception {Overloaded739 bean=MAPPER.readValue(""{\""value\"":\""abc\""}"",Overloaded739.class);assertNotNull(bean);assertEquals(""abc"",bean._value);}"
"com.fasterxml.jackson.databind.deser.TestOverloaded.testSetterConflict",0,"/** * For genuine setter conflict,an exception is to be thrown.*/public void testSetterConflict()throws Exception {try {MAPPER.readValue(""{}"",ConflictBean.class);}catch(Exception e){verifyException(e,""Conflicting setter definitions"");}}"
"com.fasterxml.jackson.databind.deser.TestOverloaded.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.deser.TestCustomFactory.testCustomBeanDeserializer",0,"public void testCustomBeanDeserializer()throws Exception {final ObjectMapper map=new ObjectMapper();String json=""{\""beans\"":[{\""c\"":{\""a\"":10,\""b\"":20},\""d\"":\""hello,tatu\""}]}"";TestBeans beans=map.readValue(json,TestBeans.class);assertNotNull(beans);List<TestBean> results=beans.beans;assertNotNull(results);assertEquals(1,results.size());TestBean bean=results.get(0);assertEquals(""hello,tatu"",bean.d);CustomBean c=bean.c;assertNotNull(c);assertEquals(10,c.a);assertEquals(20,c.b);json=""{\""beans\"":[{\""c\"":{\""b\"":3,\""a\"":-4},\""d\"":\""\""},"" + ""{\""d\"":\""abc\"",\""c\"":{\""b\"":15}}]}"";beans=map.readValue(json,TestBeans.class);assertNotNull(beans);results=beans.beans;assertNotNull(results);assertEquals(2,results.size());bean=results.get(0);assertEquals("""",bean.d);c=bean.c;assertNotNull(c);assertEquals(-4,c.a);assertEquals(3,c.b);bean=results.get(1);assertEquals(""abc"",bean.d);c=bean.c;assertNotNull(c);assertEquals(0,c.a);assertEquals(15,c.b);}"
"com.fasterxml.jackson.databind.deser.TestCustomFactory.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.TestHandlerInstantiation.testDeserializer",0,"public void testDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setHandlerInstantiator(new MyInstantiator(""abc:""));MyBean result=mapper.readValue(quote(""123""),MyBean.class);assertEquals(""abc:123"",result.value);}"
"com.fasterxml.jackson.databind.TestHandlerInstantiation.testKeyDeserializer",0,"public void testKeyDeserializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setHandlerInstantiator(new MyInstantiator(""abc:""));MyMap map=mapper.readValue(""{\""a\"":\""b\""}"",MyMap.class);assertEquals(""{\""KEY\"":\""b\""}"",mapper.writeValueAsString(map));}"
"com.fasterxml.jackson.databind.TestHandlerInstantiation.testSerializer",0,"public void testSerializer()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setHandlerInstantiator(new MyInstantiator(""xyz:""));assertEquals(quote(""xyz:456""),mapper.writeValueAsString(new MyBean(""456"")));}"
"com.fasterxml.jackson.databind.TestHandlerInstantiation.testTypeIdResolver",0,"public void testTypeIdResolver()throws Exception {ObjectMapper mapper=new ObjectMapper();mapper.setHandlerInstantiator(new MyInstantiator(""foobar""));String json=mapper.writeValueAsString(new TypeIdBeanWrapper(new TypeIdBean(123)));assertEquals(""{\""bean\"":[\""!!!\"",{\""x\"":123}]}"",json);TypeIdBeanWrapper result=mapper.readValue(json,TypeIdBeanWrapper.class);TypeIdBean bean=result.bean;assertEquals(123,bean.x);}"
"com.fasterxml.jackson.databind.TestHandlerInstantiation.BaseMapTest",0,"protected void BaseMapTest(){super();}"
"com.fasterxml.jackson.databind.views.TestViewSerialization.testSimple",0,"@SuppressWarnings(""unchecked"")public void testSimple()throws IOException {StringWriter sw=new StringWriter();Bean bean=new Bean();Map<String,Object> map=writeAndMap(MAPPER,bean);assertEquals(3,map.size());sw=new StringWriter();MAPPER.writerWithView(ViewA.class).writeValue(sw,bean);map=MAPPER.readValue(sw.toString(),Map.class);assertEquals(1,map.size());assertEquals(""1"",map.get(""a""));sw=new StringWriter();MAPPER.writerWithView(ViewAA.class).writeValue(sw,bean);map=MAPPER.readValue(sw.toString(),Map.class);assertEquals(2,map.size());assertEquals(""1"",map.get(""a""));assertEquals(""2"",map.get(""aa""));String json=MAPPER.writerWithView(ViewB.class).writeValueAsString(bean);map=MAPPER.readValue(json,Map.class);assertEquals(2,map.size());assertEquals(""2"",map.get(""aa""));assertEquals(""3"",map.get(""b""));json=MAPPER.writerWithView(ViewBB.class).writeValueAsString(bean);map=MAPPER.readValue(json,Map.class);assertEquals(2,map.size());assertEquals(""2"",map.get(""aa""));assertEquals(""3"",map.get(""b""));json=MAPPER.writerWithView(null).writeValueAsString(bean);map=MAPPER.readValue(json,Map.class);assertEquals(3,map.size());}"
"com.fasterxml.jackson.databind.views.TestViewSerialization.testDefaultExclusion",0,"/** * Unit test to verify implementation of [JACKSON-232],to allow ""opt-in"" handling for JSON Views: that is,that default for properties is to exclude unless included in a view.*/@SuppressWarnings(""unchecked"")public void testDefaultExclusion()throws IOException {MixedBean bean=new MixedBean();String json=MAPPER.writerWithView(ViewA.class).writeValueAsString(bean);Map<String,Object> map=MAPPER.readValue(json,Map.class);assertEquals(2,map.size());assertEquals(""1"",map.get(""a""));assertEquals(""2"",map.get(""b""));ObjectMapper mapper=new ObjectMapper();mapper.configure(MapperFeature.DEFAULT_VIEW_INCLUSION,false);json=mapper.writerWithView(ViewA.class).writeValueAsString(bean);map=mapper.readValue(json,Map.class);assertEquals(1,map.size());assertEquals(""1"",map.get(""a""));assertNull(map.get(""b""));json=mapper.writer().withView(null).writeValueAsString(bean);map=mapper.readValue(json,Map.class);assertEquals(2,map.size());assertEquals(""1"",map.get(""a""));assertEquals(""2"",map.get(""b""));}"
"com.fasterxml.jackson.databind.views.TestViewSerialization.testImplicitAutoDetection",0,"/** * As per [JACKSON-261],@JsonView annotation should imply that associated method/field does indicate a property.*/public void testImplicitAutoDetection()throws Exception {assertEquals(""{\""a\"":1}"",MAPPER.writeValueAsString(new ImplicitBean()));}"
"com.fasterxml.jackson.databind.views.TestViewSerialization.testVisibility",0,"public void testVisibility()throws Exception {VisibilityBean bean=new VisibilityBean();String json=MAPPER.writerWithView(Object.class).writeValueAsString(bean);assertEquals(""{\""id\"":\""id\""}"",json);}"
"com.fasterxml.jackson.databind.views.TestViewSerialization.test868",0,"public void test868()throws IOException {ObjectMapper mapper=new ObjectMapper();mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);String json=mapper.writerWithView(OtherView.class).writeValueAsString(new Foo());assertEquals(json,""{}"");}"
"com.fasterxml.jackson.databind.views.TestViewSerialization.BaseMapTest",0,"protected void BaseMapTest(){super();}"
