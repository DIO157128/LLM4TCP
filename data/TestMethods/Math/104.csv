test_case,faulty,test_code
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testPreconditions1",0,"@Test(expected=NumberIsTooSmallException.class)public void testPreconditions1(){HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());fitter.fit();}"
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testNoError",0,"@Test public void testNoError(){final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 1.3;x+=0.01){fitter.addObservedPoint(1,x,f.value(x));}final double[]fitted=fitter.fit();Assert.assertEquals(a,fitted[0],1.0e-13);Assert.assertEquals(w,fitted[1],1.0e-13);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1e-13);HarmonicOscillator ff=new HarmonicOscillator(fitted[0],fitted[1],fitted[2]);for (double x=-1.0;x < 1.0;x+=0.01){Assert.assertTrue(FastMath.abs(f.value(x)- ff.value(x))< 1e-13);}}"
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.test1PercentError",0,"@Test public void test1PercentError(){Random randomizer=new Random(64925784252l);final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 10.0;x+=0.1){fitter.addObservedPoint(1,x,f.value(x)+ 0.01 * randomizer.nextGaussian());}final double[]fitted=fitter.fit();Assert.assertEquals(a,fitted[0],7.6e-4);Assert.assertEquals(w,fitted[1],2.7e-3);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1.3e-2);}"
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testTinyVariationsData",0,"@Test public void testTinyVariationsData(){Random randomizer=new Random(64925784252l);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 10.0;x+=0.1){fitter.addObservedPoint(1,x,1e-7 * randomizer.nextGaussian());}fitter.fit();}"
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testInitialGuess",0,"@Test public void testInitialGuess(){Random randomizer=new Random(45314242l);final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 10.0;x+=0.1){fitter.addObservedPoint(1,x,f.value(x)+ 0.01 * randomizer.nextGaussian());}final double[]fitted=fitter.fit(new double[]{0.15,3.6,4.5});Assert.assertEquals(a,fitted[0],1.2e-3);Assert.assertEquals(w,fitted[1],3.3e-3);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1.7e-2);}"
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testUnsorted",0,"@Test public void testUnsorted(){Random randomizer=new Random(64925784252l);final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());int size=100;double[]xTab=new double[size];double[]yTab=new double[size];for (int i=0;i < size;++i){xTab[i]=0.1 * i;yTab[i]=f.value(xTab[i])+ 0.01 * randomizer.nextGaussian();}for (int i=0;i < size;++i){int i1=randomizer.nextInt(size);int i2=randomizer.nextInt(size);double xTmp=xTab[i1];double yTmp=yTab[i1];xTab[i1]=xTab[i2];yTab[i1]=yTab[i2];xTab[i2]=xTmp;yTab[i2]=yTmp;}for (int i=0;i < size;++i){fitter.addObservedPoint(1,xTab[i],yTab[i]);}final double[]fitted=fitter.fit();Assert.assertEquals(a,fitted[0],7.6e-4);Assert.assertEquals(w,fitted[1],3.5e-3);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1.5e-2);}"
"org.apache.commons.math3.optimization.fitting.HarmonicFitterTest.testMath844",0,"@Test(expected=MathIllegalStateException.class)public void testMath844(){final double[]y={0,1,2,3,2,1,0,-1,-2,-3,-2,-1,0,1,2,3,2,1,0,-1,-2,-3,-2,-1,0,1,2,3,2,1,0};final int len=y.length;final WeightedObservedPoint[]points=new WeightedObservedPoint[len];for (int i=0;i < len;i++){points[i]=new WeightedObservedPoint(1,i,y[i]);}new HarmonicFitter.ParameterGuesser(points);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testSetterInjection",0,"@Test public void testSetterInjection(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(3);Assert.assertEquals(2,stats.getMean(),1E-10);stats.setMeanImpl(new deepMean());Assert.assertEquals(42,stats.getMean(),1E-10);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testCopy",0,"@Test public void testCopy(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(3);DescriptiveStatistics copy=new DescriptiveStatistics(stats);Assert.assertEquals(2,copy.getMean(),1E-10);stats.setMeanImpl(new deepMean());copy=stats.copy();Assert.assertEquals(42,copy.getMean(),1E-10);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testWindowSize",0,"@Test public void testWindowSize(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.setWindowSize(300);for (int i=0;i < 100;++i){stats.addValue(i + 1);}int refSum=(100 * 101)/ 2;Assert.assertEquals(refSum / 100.0,stats.getMean(),1E-10);Assert.assertEquals(300,stats.getWindowSize());try {stats.setWindowSize(-3);Assert.fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}Assert.assertEquals(300,stats.getWindowSize());stats.setWindowSize(50);Assert.assertEquals(50,stats.getWindowSize());int refSum2=refSum - (50 * 51)/ 2;Assert.assertEquals(refSum2 / 50.0,stats.getMean(),1E-10);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testGetValues",0,"@Test public void testGetValues(){DescriptiveStatistics stats=createDescriptiveStatistics();for (int i=100;i > 0;--i){stats.addValue(i);}int refSum=(100 * 101)/ 2;Assert.assertEquals(refSum / 100.0,stats.getMean(),1E-10);double[]v=stats.getValues();for (int i=0;i < v.length;++i){Assert.assertEquals(100.0 - i,v[i],1.0e-10);}double[]s=stats.getSortedValues();for (int i=0;i < s.length;++i){Assert.assertEquals(i + 1.0,s[i],1.0e-10);}Assert.assertEquals(12.0,stats.getElement(88),1.0e-10);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testToString",0,"@Test public void testToString(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(2);stats.addValue(3);Locale d=Locale.getDefault();Locale.setDefault(Locale.US);Assert.assertEquals(""DescriptiveStatistics:\n"" + ""n: 3\n"" + ""min: 1.0\n""+ ""max: 3.0\n""+ ""mean: 2.0\n""+ ""std dev: 1.0\n""+ ""median: 2.0\n""+ ""skewness: 0.0\n""+ ""kurtosis: NaN\n"",stats.toString());Locale.setDefault(d);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testShuffledStatistics",0,"@Test public void testShuffledStatistics(){DescriptiveStatistics reference=createDescriptiveStatistics();DescriptiveStatistics shuffled=createDescriptiveStatistics();UnivariateStatistic tmp=shuffled.getGeometricMeanImpl();shuffled.setGeometricMeanImpl(shuffled.getMeanImpl());shuffled.setMeanImpl(shuffled.getKurtosisImpl());shuffled.setKurtosisImpl(shuffled.getSkewnessImpl());shuffled.setSkewnessImpl(shuffled.getVarianceImpl());shuffled.setVarianceImpl(shuffled.getMaxImpl());shuffled.setMaxImpl(shuffled.getMinImpl());shuffled.setMinImpl(shuffled.getSumImpl());shuffled.setSumImpl(shuffled.getSumsqImpl());shuffled.setSumsqImpl(tmp);for (int i=100;i > 0;--i){reference.addValue(i);shuffled.addValue(i);}Assert.assertEquals(reference.getMean(),shuffled.getGeometricMean(),1.0e-10);Assert.assertEquals(reference.getKurtosis(),shuffled.getMean(),1.0e-10);Assert.assertEquals(reference.getSkewness(),shuffled.getKurtosis(),1.0e-10);Assert.assertEquals(reference.getVariance(),shuffled.getSkewness(),1.0e-10);Assert.assertEquals(reference.getMax(),shuffled.getVariance(),1.0e-10);Assert.assertEquals(reference.getMin(),shuffled.getMax(),1.0e-10);Assert.assertEquals(reference.getSum(),shuffled.getMin(),1.0e-10);Assert.assertEquals(reference.getSumsq(),shuffled.getSum(),1.0e-10);Assert.assertEquals(reference.getGeometricMean(),shuffled.getSumsq(),1.0e-10);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testPercentileSetter",0,"@Test public void testPercentileSetter(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(2);stats.addValue(3);Assert.assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new goodPercentile());Assert.assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new subPercentile());Assert.assertEquals(10.0,stats.getPercentile(10.0),1E-10);try {stats.setPercentileImpl(new badPercentile());Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.test20090720",0,"@Test public void test20090720(){DescriptiveStatistics descriptiveStatistics=new DescriptiveStatistics(100);for (int i=0;i < 161;i++){descriptiveStatistics.addValue(1.2);}descriptiveStatistics.clear();descriptiveStatistics.addValue(1.2);Assert.assertEquals(1,descriptiveStatistics.getN());}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testRemoval",0,"@Test public void testRemoval(){final DescriptiveStatistics dstat=createDescriptiveStatistics();checkremoval(dstat,1,6.0,0.0,Double.NaN);checkremoval(dstat,3,5.0,3.0,4.5);checkremoval(dstat,6,3.5,2.5,3.0);checkremoval(dstat,9,3.5,2.5,3.0);checkremoval(dstat,DescriptiveStatistics.INFINITE_WINDOW,3.5,2.5,3.0);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatisticsTest.testSummaryConsistency",0,"@Test public void testSummaryConsistency(){final DescriptiveStatistics dstats=new DescriptiveStatistics();final SummaryStatistics sstats=new SummaryStatistics();final int windowSize=5;dstats.setWindowSize(windowSize);final double tol=1E-12;for (int i=0;i < 20;i++){dstats.addValue(i);sstats.clear();double[]values=dstats.getValues();for (int j=0;j < values.length;j++){sstats.addValue(values[j]);}TestUtils.assertEquals(dstats.getMean(),sstats.getMean(),tol);TestUtils.assertEquals(new Mean().evaluate(values),dstats.getMean(),tol);TestUtils.assertEquals(dstats.getMax(),sstats.getMax(),tol);TestUtils.assertEquals(new Max().evaluate(values),dstats.getMax(),tol);TestUtils.assertEquals(dstats.getGeometricMean(),sstats.getGeometricMean(),tol);TestUtils.assertEquals(new GeometricMean().evaluate(values),dstats.getGeometricMean(),tol);TestUtils.assertEquals(dstats.getMin(),sstats.getMin(),tol);TestUtils.assertEquals(new Min().evaluate(values),dstats.getMin(),tol);TestUtils.assertEquals(dstats.getStandardDeviation(),sstats.getStandardDeviation(),tol);TestUtils.assertEquals(dstats.getVariance(),sstats.getVariance(),tol);TestUtils.assertEquals(new Variance().evaluate(values),dstats.getVariance(),tol);TestUtils.assertEquals(dstats.getSum(),sstats.getSum(),tol);TestUtils.assertEquals(new Sum().evaluate(values),dstats.getSum(),tol);TestUtils.assertEquals(dstats.getSumsq(),sstats.getSumsq(),tol);TestUtils.assertEquals(new SumOfSquares().evaluate(values),dstats.getSumsq(),tol);TestUtils.assertEquals(dstats.getPopulationVariance(),sstats.getPopulationVariance(),tol);TestUtils.assertEquals(new Variance(false).evaluate(values),dstats.getPopulationVariance(),tol);}}"
"org.apache.commons.math3.ml.clustering.MultiKMeansPlusPlusClustererTest.dimension2",0,"@Test public void dimension2(){MultiKMeansPlusPlusClusterer<DoublePoint> transformer=new MultiKMeansPlusPlusClusterer<DoublePoint>(new KMeansPlusPlusClusterer<DoublePoint>(3,10),5);DoublePoint[]points=new DoublePoint[]{new DoublePoint(new int[]{-15,3}),new DoublePoint(new int[]{-15,4}),new DoublePoint(new int[]{-15,5}),new DoublePoint(new int[]{-14,3}),new DoublePoint(new int[]{-14,5}),new DoublePoint(new int[]{-13,3}),new DoublePoint(new int[]{-13,4}),new DoublePoint(new int[]{-13,5}),new DoublePoint(new int[]{-1,0}),new DoublePoint(new int[]{-1,-1}),new DoublePoint(new int[]{0,-1}),new DoublePoint(new int[]{1,-1}),new DoublePoint(new int[]{1,-2}),new DoublePoint(new int[]{13,3}),new DoublePoint(new int[]{13,4}),new DoublePoint(new int[]{14,4}),new DoublePoint(new int[]{14,7}),new DoublePoint(new int[]{16,5}),new DoublePoint(new int[]{16,6}),new DoublePoint(new int[]{17,4}),new DoublePoint(new int[]{17,7})};List<CentroidCluster<DoublePoint>> clusters=transformer.cluster(Arrays.asList(points));Assert.assertEquals(3,clusters.size());boolean cluster1Found=false;boolean cluster2Found=false;boolean cluster3Found=false;double epsilon=1e-6;for(CentroidCluster<DoublePoint> cluster : clusters){Clusterable center=cluster.getCenter();double[]point=center.getPoint();if (point[0]< 0){cluster1Found=true;Assert.assertEquals(8,cluster.getPoints().size());Assert.assertEquals(-14,point[0],epsilon);Assert.assertEquals(4,point[1],epsilon);}else     if (point[1]< 0){cluster2Found=true;Assert.assertEquals(5,cluster.getPoints().size());Assert.assertEquals(0,point[0],epsilon);Assert.assertEquals(-1,point[1],epsilon);}else {cluster3Found=true;Assert.assertEquals(8,cluster.getPoints().size());Assert.assertEquals(15,point[0],epsilon);Assert.assertEquals(5,point[1],epsilon);}}Assert.assertTrue(cluster1Found);Assert.assertTrue(cluster2Found);Assert.assertTrue(cluster3Found);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testWrongNumberOfPoints",0,"@Test(expected=NumberIsTooSmallException.class)public void testWrongNumberOfPoints(){new FiniteDifferencesDifferentiator(1,1.0);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testWrongStepSize",0,"@Test(expected=NotPositiveException.class)public void testWrongStepSize(){new FiniteDifferencesDifferentiator(3,0.0);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testSerialization",0,"@Test public void testSerialization(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(3,1.0e-3);FiniteDifferencesDifferentiator recovered=(FiniteDifferencesDifferentiator)TestUtils.serializeAndRecover(differentiator);Assert.assertEquals(differentiator.getNbPoints(),recovered.getNbPoints());Assert.assertEquals(differentiator.getStepSize(),recovered.getStepSize(),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testConstant",0,"@Test public void testConstant(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(5,0.01);UnivariateDifferentiableFunction f=differentiator.differentiate(new UnivariateFunction(){public double value(double x){return 42.0;}});for (double x=-10;x < 10;x+=0.1){DerivativeStructure y=f.value(new DerivativeStructure(1,2,0,x));Assert.assertEquals(42.0,y.getValue(),1.0e-15);Assert.assertEquals(0.0,y.getPartialDerivative(1),1.0e-15);Assert.assertEquals(0.0,y.getPartialDerivative(2),1.0e-15);}}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testLinear",0,"@Test public void testLinear(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(5,0.01);UnivariateDifferentiableFunction f=differentiator.differentiate(new UnivariateFunction(){public double value(double x){return 2 - 3 * x;}});for (double x=-10;x < 10;x+=0.1){DerivativeStructure y=f.value(new DerivativeStructure(1,2,0,x));Assert.assertEquals("""" + (2 - 3 * x - y.getValue()),2 - 3 * x,y.getValue(),2.0e-15);Assert.assertEquals(-3.0,y.getPartialDerivative(1),4.0e-13);Assert.assertEquals(0.0,y.getPartialDerivative(2),9.0e-11);}}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testGaussian",0,"@Test public void testGaussian(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(9,0.02);UnivariateDifferentiableFunction gaussian=new Gaussian(1.0,2.0);UnivariateDifferentiableFunction f=differentiator.differentiate(gaussian);double[]expectedError=new double[]{6.939e-18,1.284e-15,2.477e-13,1.168e-11,2.840e-9,7.971e-8};double[]maxError=new double[expectedError.length];for (double x=-10;x < 10;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(1,maxError.length - 1,0,x);DerivativeStructure yRef=gaussian.value(dsX);DerivativeStructure y=f.value(dsX);Assert.assertEquals(f.value(dsX.getValue()),f.value(dsX).getValue(),1.0e-15);for (int order=0;order <= yRef.getOrder();++order){maxError[order]=FastMath.max(maxError[order],FastMath.abs(yRef.getPartialDerivative(order)- y.getPartialDerivative(order)));}}for (int i=0;i < maxError.length;++i){Assert.assertEquals(expectedError[i],maxError[i],0.01 * expectedError[i]);}}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testStepSizeUnstability",0,"@Test public void testStepSizeUnstability(){UnivariateDifferentiableFunction quintic=new QuinticFunction();UnivariateDifferentiableFunction goodStep=new FiniteDifferencesDifferentiator(7,0.25).differentiate(quintic);UnivariateDifferentiableFunction badStep=new FiniteDifferencesDifferentiator(7,1.0e-6).differentiate(quintic);double[]maxErrorGood=new double[7];double[]maxErrorBad=new double[7];for (double x=-10;x < 10;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(1,6,0,x);DerivativeStructure yRef=quintic.value(dsX);DerivativeStructure yGood=goodStep.value(dsX);DerivativeStructure yBad=badStep.value(dsX);for (int order=0;order <= 6;++order){maxErrorGood[order]=FastMath.max(maxErrorGood[order],FastMath.abs(yRef.getPartialDerivative(order)- yGood.getPartialDerivative(order)));maxErrorBad[order]=FastMath.max(maxErrorBad[order],FastMath.abs(yRef.getPartialDerivative(order)- yBad.getPartialDerivative(order)));}}final double[]expectedGood=new double[]{7.276e-12,7.276e-11,9.968e-10,3.092e-9,5.432e-8,8.196e-8,1.818e-6};final double[]expectedBad=new double[]{2.910e-11,2.087e-5,147.7,3.820e7,6.354e14,6.548e19,1.543e27};for (int i=0;i < maxErrorGood.length;++i){Assert.assertEquals(expectedGood[i],maxErrorGood[i],0.01 * expectedGood[i]);Assert.assertEquals(expectedBad[i],maxErrorBad[i],0.01 * expectedBad[i]);}}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testWrongOrder",0,"@Test(expected=NumberIsTooLargeException.class)public void testWrongOrder(){UnivariateDifferentiableFunction f=new FiniteDifferencesDifferentiator(3,0.01).differentiate(new UnivariateFunction(){public double value(double x){throw new MathInternalError();}});f.value(new DerivativeStructure(1,3,0,1.0));}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testWrongOrderVector",0,"@Test(expected=NumberIsTooLargeException.class)public void testWrongOrderVector(){UnivariateDifferentiableVectorFunction f=new FiniteDifferencesDifferentiator(3,0.01).differentiate(new UnivariateVectorFunction(){public double[]value(double x){throw new MathInternalError();}});f.value(new DerivativeStructure(1,3,0,1.0));}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testWrongOrderMatrix",0,"@Test(expected=NumberIsTooLargeException.class)public void testWrongOrderMatrix(){UnivariateDifferentiableMatrixFunction f=new FiniteDifferencesDifferentiator(3,0.01).differentiate(new UnivariateMatrixFunction(){public double[][]value(double x){throw new MathInternalError();}});f.value(new DerivativeStructure(1,3,0,1.0));}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testTooLargeStep",0,"@Test(expected=NumberIsTooLargeException.class)public void testTooLargeStep(){new FiniteDifferencesDifferentiator(3,2.5,0.0,1.0);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testBounds",0,"@Test public void testBounds(){final double slope=2.5;UnivariateFunction f=new UnivariateFunction(){public double value(double x){if (x < 0){throw new NumberIsTooSmallException(x,0,true);}else       if (x > 1){throw new NumberIsTooLargeException(x,1,true);}else {return slope * x;}}};UnivariateDifferentiableFunction missingBounds=new FiniteDifferencesDifferentiator(3,0.1).differentiate(f);UnivariateDifferentiableFunction properlyBounded=new FiniteDifferencesDifferentiator(3,0.1,0.0,1.0).differentiate(f);DerivativeStructure tLow=new DerivativeStructure(1,1,0,0.05);DerivativeStructure tHigh=new DerivativeStructure(1,1,0,0.95);try {missingBounds.value(tLow);Assert.fail(""an exception should have been thrown"");}catch(NumberIsTooSmallException nse){Assert.assertEquals(-0.05,nse.getArgument().doubleValue(),1.0e-10);}catch(Exception e){Assert.fail(""wrong exception caught: "" + e.getClass().getName());}try {missingBounds.value(tHigh);Assert.fail(""an exception should have been thrown"");}catch(NumberIsTooLargeException nle){Assert.assertEquals(1.05,nle.getArgument().doubleValue(),1.0e-10);}catch(Exception e){Assert.fail(""wrong exception caught: "" + e.getClass().getName());}Assert.assertEquals(slope,properlyBounded.value(tLow).getPartialDerivative(1),1.0e-10);Assert.assertEquals(slope,properlyBounded.value(tHigh).getPartialDerivative(1),1.0e-10);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testBoundedSqrt",0,"@Test public void testBoundedSqrt(){UnivariateFunctionDifferentiator differentiator=new FiniteDifferencesDifferentiator(9,1.0 / 32,0.0,Double.POSITIVE_INFINITY);UnivariateDifferentiableFunction sqrt=differentiator.differentiate(new UnivariateFunction(){public double value(double x){return FastMath.sqrt(x);}});DerivativeStructure t001=new DerivativeStructure(1,1,0,0.01);Assert.assertEquals(0.5 / FastMath.sqrt(t001.getValue()),sqrt.value(t001).getPartialDerivative(1),1.6);DerivativeStructure t01=new DerivativeStructure(1,1,0,0.1);Assert.assertEquals(0.5 / FastMath.sqrt(t01.getValue()),sqrt.value(t01).getPartialDerivative(1),7.0e-3);DerivativeStructure t03=new DerivativeStructure(1,1,0,0.3);Assert.assertEquals(0.5 / FastMath.sqrt(t03.getValue()),sqrt.value(t03).getPartialDerivative(1),2.1e-7);}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testVectorFunction",0,"@Test public void testVectorFunction(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(7,0.01);UnivariateDifferentiableVectorFunction f=differentiator.differentiate(new UnivariateVectorFunction(){public double[]value(double x){return new double[]{FastMath.cos(x),FastMath.sin(x)};}});for (double x=-10;x < 10;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(1,2,0,x);DerivativeStructure[]y=f.value(dsX);double cos=FastMath.cos(x);double sin=FastMath.sin(x);double[]f1=f.value(dsX.getValue());DerivativeStructure[]f2=f.value(dsX);Assert.assertEquals(f1.length,f2.length);for (int i=0;i < f1.length;++i){Assert.assertEquals(f1[i],f2[i].getValue(),1.0e-15);}Assert.assertEquals(cos,y[0].getValue(),7.0e-16);Assert.assertEquals(sin,y[1].getValue(),7.0e-16);Assert.assertEquals(-sin,y[0].getPartialDerivative(1),6.0e-14);Assert.assertEquals(cos,y[1].getPartialDerivative(1),6.0e-14);Assert.assertEquals(-cos,y[0].getPartialDerivative(2),2.0e-11);Assert.assertEquals(-sin,y[1].getPartialDerivative(2),2.0e-11);}}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testMatrixFunction",0,"@Test public void testMatrixFunction(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(7,0.01);UnivariateDifferentiableMatrixFunction f=differentiator.differentiate(new UnivariateMatrixFunction(){public double[][]value(double x){return new double[][]{{FastMath.cos(x),FastMath.sin(x)},{FastMath.cosh(x),FastMath.sinh(x)}};}});for (double x=-1;x < 1;x+=0.02){DerivativeStructure dsX=new DerivativeStructure(1,2,0,x);DerivativeStructure[][]y=f.value(dsX);double cos=FastMath.cos(x);double sin=FastMath.sin(x);double cosh=FastMath.cosh(x);double sinh=FastMath.sinh(x);double[][]f1=f.value(dsX.getValue());DerivativeStructure[][]f2=f.value(dsX);Assert.assertEquals(f1.length,f2.length);for (int i=0;i < f1.length;++i){Assert.assertEquals(f1[i].length,f2[i].length);for (int j=0;j < f1[i].length;++j){Assert.assertEquals(f1[i][j],f2[i][j].getValue(),1.0e-15);}}Assert.assertEquals(cos,y[0][0].getValue(),7.0e-18);Assert.assertEquals(sin,y[0][1].getValue(),6.0e-17);Assert.assertEquals(cosh,y[1][0].getValue(),3.0e-16);Assert.assertEquals(sinh,y[1][1].getValue(),3.0e-16);Assert.assertEquals(-sin,y[0][0].getPartialDerivative(1),2.0e-14);Assert.assertEquals(cos,y[0][1].getPartialDerivative(1),2.0e-14);Assert.assertEquals(sinh,y[1][0].getPartialDerivative(1),3.0e-14);Assert.assertEquals(cosh,y[1][1].getPartialDerivative(1),3.0e-14);Assert.assertEquals(-cos,y[0][0].getPartialDerivative(2),3.0e-12);Assert.assertEquals(-sin,y[0][1].getPartialDerivative(2),3.0e-12);Assert.assertEquals(cosh,y[1][0].getPartialDerivative(2),6.0e-12);Assert.assertEquals(sinh,y[1][1].getPartialDerivative(2),6.0e-12);}}"
"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest.testSeveralFreeParameters",0,"@Test public void testSeveralFreeParameters(){FiniteDifferencesDifferentiator differentiator=new FiniteDifferencesDifferentiator(5,0.001);UnivariateDifferentiableFunction sine=new Sin();UnivariateDifferentiableFunction f=differentiator.differentiate(sine);double[]expectedError=new double[]{6.696e-16,1.371e-12,2.007e-8,1.754e-5};double[]maxError=new double[expectedError.length];for (double x=-2;x < 2;x+=0.1){for (double y=-2;y < 2;y+=0.1){DerivativeStructure dsX=new DerivativeStructure(2,maxError.length - 1,0,x);DerivativeStructure dsY=new DerivativeStructure(2,maxError.length - 1,1,y);DerivativeStructure dsT=dsX.multiply(3).subtract(dsY.multiply(2));DerivativeStructure sRef=sine.value(dsT);DerivativeStructure s=f.value(dsT);for (int xOrder=0;xOrder <= sRef.getOrder();++xOrder){for (int yOrder=0;yOrder <= sRef.getOrder();++yOrder){if (xOrder + yOrder <= sRef.getOrder()){maxError[xOrder + yOrder]=FastMath.max(maxError[xOrder + yOrder],FastMath.abs(sRef.getPartialDerivative(xOrder,yOrder)- s.getPartialDerivative(xOrder,yOrder)));}}}}}for (int i=0;i < maxError.length;++i){Assert.assertEquals(expectedError[i],maxError[i],0.01 * expectedError[i]);}}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testHighPercentile",0,"@Test public void testHighPercentile(){double[]d=new double[]{1,2,3};Percentile p=new Percentile(75);Assert.assertEquals(3.0,p.evaluate(d),1.0e-5);}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testLowPercentile",0,"@Test public void testLowPercentile(){double[]d=new double[]{0,1};Percentile p=new Percentile(25);Assert.assertEquals(0d,p.evaluate(d),Double.MIN_VALUE);}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testPercentile",0,"@Test public void testPercentile(){double[]d=new double[]{1,3,2,4};Percentile p=new Percentile(30);Assert.assertEquals(1.5,p.evaluate(d),1.0e-5);p.setQuantile(25);Assert.assertEquals(1.25,p.evaluate(d),1.0e-5);p.setQuantile(75);Assert.assertEquals(3.75,p.evaluate(d),1.0e-5);p.setQuantile(50);Assert.assertEquals(2.5,p.evaluate(d),1.0e-5);try {p.evaluate(d,0,d.length,-1.0);Assert.fail();}catch(MathIllegalArgumentException ex){}try {p.evaluate(d,0,d.length,101.0);Assert.fail();}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testNISTExample",0,"@Test public void testNISTExample(){double[]d=new double[]{95.1772,95.1567,95.1937,95.1959,95.1442,95.0610,95.1591,95.1195,95.1772,95.0925,95.1990,95.1682};Percentile p=new Percentile(90);Assert.assertEquals(95.1981,p.evaluate(d),1.0e-4);Assert.assertEquals(95.1990,p.evaluate(d,0,d.length,100d),0);}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.test5",0,"@Test public void test5(){Percentile percentile=new Percentile(5);Assert.assertEquals(this.percentile5,percentile.evaluate(testArray),getTolerance());}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testNullEmpty",0,"@Test public void testNullEmpty(){Percentile percentile=new Percentile(50);double[]nullArray=null;double[]emptyArray=new double[]{};try {percentile.evaluate(nullArray);Assert.fail(""Expecting MathIllegalArgumentException for null array"");}catch(MathIllegalArgumentException ex){}Assert.assertTrue(Double.isNaN(percentile.evaluate(emptyArray)));}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testSingleton",0,"@Test public void testSingleton(){Percentile percentile=new Percentile(50);double[]singletonArray=new double[]{1d};Assert.assertEquals(1d,percentile.evaluate(singletonArray),0);Assert.assertEquals(1d,percentile.evaluate(singletonArray,0,1),0);Assert.assertEquals(1d,percentile.evaluate(singletonArray,0,1,5),0);Assert.assertEquals(1d,percentile.evaluate(singletonArray,0,1,100),0);Assert.assertTrue(Double.isNaN(percentile.evaluate(singletonArray,0,0)));}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testSpecialValues",0,"@Test public void testSpecialValues(){Percentile percentile=new Percentile(50);double[]specialValues=new double[]{0d,1d,2d,3d,4d,Double.NaN};Assert.assertEquals(2.5d,percentile.evaluate(specialValues),0);specialValues=new double[]{Double.NEGATIVE_INFINITY,1d,2d,3d,Double.NaN,Double.POSITIVE_INFINITY};Assert.assertEquals(2.5d,percentile.evaluate(specialValues),0);specialValues=new double[]{1d,1d,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY};Assert.assertTrue(Double.isInfinite(percentile.evaluate(specialValues)));specialValues=new double[]{1d,1d,Double.NaN,Double.NaN};Assert.assertTrue(Double.isNaN(percentile.evaluate(specialValues)));specialValues=new double[]{1d,1d,Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY};Assert.assertTrue(Double.isNaN(percentile.evaluate(specialValues)));}"
"org.apache.commons.math3.stat.descriptive.rank.PercentileTest.testSetQuantile",0,"@Test public void testSetQuantile(){Percentile percentile=new Percentile(10);percentile.setQuantile(100);Assert.assertEquals(100,percentile.getQuantile(),0);try {percentile.setQuantile(0);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {new Percentile(0);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;ClassicalRungeKuttaIntegrator integ=new ClassicalRungeKuttaIntegrator(step);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;ClassicalRungeKuttaIntegrator integ=new ClassicalRungeKuttaIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 880000);Assert.assertTrue(bos.size()< 900000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError > 0.005);}"
"org.apache.commons.math3.analysis.solvers.MullerSolverTest.testSinFunction",0,"/** * Test of solver for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=FastMath.PI;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.MullerSolverTest.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.MullerSolverTest.testExpm1Function",0,"/** * Test of solver for the exponential function. <p> It takes 10 to 15 iterations for the last two tests to converge. In fact,if not for the bisection alternative,the solver would exceed the default maximal iteration of 100.*/@Test public void testExpm1Function(){UnivariateFunction f=new Expm1();UnivariateSolver solver=new MullerSolver();double min,max,expected,result,tolerance;min=-1.0;max=2.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-20.0;max=10.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-50.0;max=100.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.MullerSolverTest.testParameters",0,"/** * Test of parameters for the solver.*/@Test public void testParameters(){UnivariateFunction f=new Sin();UnivariateSolver solver=new MullerSolver();try {double root=solver.solve(100,f,1,-1);System.out.println(""root="" + root);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {solver.solve(100,f,2,3);Assert.fail(""Expecting NoBracketingException - no bracketing"");}catch(NoBracketingException ex){}}"
"org.apache.commons.math3.dfp.DfpMathTest.testPow",0,"@Test public void testPow(){test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""0"")),factory.newDfp(""1""),0,""pow #1"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""-0"")),factory.newDfp(""1""),0,""pow #2"");test(DfpMath.pow(factory.newDfp(""2""),factory.newDfp(""0"")),factory.newDfp(""1""),0,""pow #3"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""-0"")),factory.newDfp(""1""),0,""pow #4"");test(DfpMath.pow(pinf,factory.newDfp(""-0"")),factory.newDfp(""1""),0,""pow #5"");test(DfpMath.pow(pinf,factory.newDfp(""0"")),factory.newDfp(""1""),0,""pow #6"");test(DfpMath.pow(ninf,factory.newDfp(""-0"")),factory.newDfp(""1""),0,""pow #7"");test(DfpMath.pow(ninf,factory.newDfp(""0"")),factory.newDfp(""1""),0,""pow #8"");test(DfpMath.pow(qnan,factory.newDfp(""0"")),factory.newDfp(""1""),0,""pow #8"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""1"")),factory.newDfp(""0""),0,""pow #9"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""1"")),factory.newDfp(""-0""),0,""pow #10"");test(DfpMath.pow(factory.newDfp(""2""),factory.newDfp(""1"")),factory.newDfp(""2""),0,""pow #11"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""1"")),factory.newDfp(""-2""),0,""pow #12"");test(DfpMath.pow(pinf,factory.newDfp(""1"")),pinf,0,""pow #13"");test(DfpMath.pow(ninf,factory.newDfp(""1"")),ninf,0,""pow #14"");test(DfpMath.pow(qnan,factory.newDfp(""1"")),qnan,DfpField.FLAG_INVALID,""pow #14.1"");test(DfpMath.pow(factory.newDfp(""0""),qnan),qnan,DfpField.FLAG_INVALID,""pow #15"");test(DfpMath.pow(factory.newDfp(""-0""),qnan),qnan,DfpField.FLAG_INVALID,""pow #16"");test(DfpMath.pow(factory.newDfp(""2""),qnan),qnan,DfpField.FLAG_INVALID,""pow #17"");test(DfpMath.pow(factory.newDfp(""-2""),qnan),qnan,DfpField.FLAG_INVALID,""pow #18"");test(DfpMath.pow(pinf,qnan),qnan,DfpField.FLAG_INVALID,""pow #19"");test(DfpMath.pow(ninf,qnan),qnan,DfpField.FLAG_INVALID,""pow #20"");test(DfpMath.pow(qnan,qnan),qnan,DfpField.FLAG_INVALID,""pow #21"");test(DfpMath.pow(qnan,factory.newDfp(""1"")),qnan,DfpField.FLAG_INVALID,""pow #22"");test(DfpMath.pow(qnan,factory.newDfp(""-1"")),qnan,DfpField.FLAG_INVALID,""pow #23"");test(DfpMath.pow(qnan,pinf),qnan,DfpField.FLAG_INVALID,""pow #24"");test(DfpMath.pow(qnan,ninf),qnan,DfpField.FLAG_INVALID,""pow #25"");test(DfpMath.pow(qnan,qnan),qnan,DfpField.FLAG_INVALID,""pow #26"");test(DfpMath.pow(factory.newDfp(""2""),pinf),pinf,0,""pow #27"");test(DfpMath.pow(factory.newDfp(""-2""),pinf),pinf,0,""pow #28"");test(DfpMath.pow(pinf,pinf),pinf,0,""pow #29"");test(DfpMath.pow(ninf,pinf),pinf,0,""pow #30"");test(DfpMath.pow(factory.newDfp(""2""),ninf),factory.getZero(),0,""pow #31"");test(DfpMath.pow(factory.newDfp(""-2""),ninf),factory.getZero(),0,""pow #32"");test(DfpMath.pow(pinf,ninf),factory.getZero(),0,""pow #33"");test(DfpMath.pow(ninf,ninf),factory.getZero(),0,""pow #34"");test(DfpMath.pow(factory.newDfp(""0.5""),pinf),factory.getZero(),0,""pow #35"");test(DfpMath.pow(factory.newDfp(""-0.5""),pinf),factory.getZero(),0,""pow #36"");test(DfpMath.pow(factory.newDfp(""0.5""),ninf),pinf,0,""pow #37"");test(DfpMath.pow(factory.newDfp(""-0.5""),ninf),pinf,0,""pow #38"");test(DfpMath.pow(factory.getOne(),pinf),qnan,DfpField.FLAG_INVALID,""pow #39"");test(DfpMath.pow(factory.getOne(),ninf),qnan,DfpField.FLAG_INVALID,""pow #40"");test(DfpMath.pow(factory.newDfp(""-1""),pinf),qnan,DfpField.FLAG_INVALID,""pow #41"");test(DfpMath.pow(factory.getOne().negate(),ninf),qnan,DfpField.FLAG_INVALID,""pow #42"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""1"")),factory.newDfp(""0""),0,""pow #43"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""1e30"")),factory.newDfp(""0""),0,""pow #44"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""1e-30"")),factory.newDfp(""0""),0,""pow #45"");test(DfpMath.pow(factory.newDfp(""0""),pinf),factory.newDfp(""0""),0,""pow #46"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""2"")),factory.newDfp(""0""),0,""pow #47"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""1e30"")),factory.newDfp(""0""),0,""pow #48"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""1e-30"")),factory.newDfp(""0""),DfpField.FLAG_INEXACT,""pow #49"");test(DfpMath.pow(factory.newDfp(""-0""),pinf),factory.newDfp(""0""),0,""pow #50"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""-1"")),pinf,0,""pow #51"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""-1e30"")),pinf,0,""pow #52"");test(DfpMath.pow(factory.newDfp(""0""),factory.newDfp(""-1e-30"")),pinf,0,""pow #53"");test(DfpMath.pow(factory.newDfp(""0""),ninf),pinf,0,""pow #54"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""-2"")),pinf,0,""pow #55"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""-1e30"")),pinf,0,""pow #56"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""-1e-30"")),pinf,DfpField.FLAG_INEXACT,""pow #57"");test(DfpMath.pow(factory.newDfp(""-0""),ninf),pinf,0,""pow #58"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""-1"")),ninf,DfpField.FLAG_INEXACT,""pow #59"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""-12345"")),ninf,DfpField.FLAG_INEXACT,""pow #60"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""3"")),factory.newDfp(""-0""),DfpField.FLAG_INEXACT,""pow #61"");test(DfpMath.pow(factory.newDfp(""-0""),factory.newDfp(""12345"")),factory.newDfp(""-0""),DfpField.FLAG_INEXACT,""pow #62"");test(DfpMath.pow(pinf,factory.newDfp(""3"")),pinf,0,""pow #63"");test(DfpMath.pow(pinf,factory.newDfp(""1e30"")),pinf,0,""pow #64"");test(DfpMath.pow(pinf,factory.newDfp(""1e-30"")),pinf,0,""pow #65"");test(DfpMath.pow(pinf,pinf),pinf,0,""pow #66"");test(DfpMath.pow(pinf,factory.newDfp(""-3"")),factory.getZero(),0,""pow #67"");test(DfpMath.pow(pinf,factory.newDfp(""-1e30"")),factory.getZero(),0,""pow #68"");test(DfpMath.pow(pinf,factory.newDfp(""-1e-30"")),factory.getZero(),0,""pow #69"");test(DfpMath.pow(pinf,ninf),factory.getZero(),0,""pow #70"");test(DfpMath.pow(ninf,factory.newDfp(""-2"")),factory.newDfp(""0""),0,""pow #71"");test(DfpMath.pow(ninf,factory.newDfp(""-1e30"")),factory.newDfp(""0""),0,""pow #72"");test(DfpMath.pow(ninf,factory.newDfp(""-1e-30"")),factory.newDfp(""0""),DfpField.FLAG_INEXACT,""pow #73"");test(DfpMath.pow(ninf,ninf),factory.newDfp(""0""),0,""pow #74"");test(DfpMath.pow(ninf,factory.newDfp(""2"")),pinf,0,""pow #75"");test(DfpMath.pow(ninf,factory.newDfp(""1e30"")),pinf,0,""pow #76"");test(DfpMath.pow(ninf,factory.newDfp(""1e-30"")),pinf,DfpField.FLAG_INEXACT,""pow #77"");test(DfpMath.pow(ninf,pinf),pinf,0,""pow #78"");test(DfpMath.pow(ninf,factory.newDfp(""3"")),ninf,DfpField.FLAG_INEXACT,""pow #79"");test(DfpMath.pow(ninf,factory.newDfp(""12345"")),ninf,DfpField.FLAG_INEXACT,""pow #80"");test(DfpMath.pow(ninf,factory.newDfp(""-3"")),factory.newDfp(""-0""),DfpField.FLAG_INEXACT,""pow #81"");test(DfpMath.pow(ninf,factory.newDfp(""-12345"")),factory.newDfp(""-0""),DfpField.FLAG_INEXACT,""pow #82"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""3"")),factory.newDfp(""-8""),DfpField.FLAG_INEXACT,""pow #83"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""16"")),factory.newDfp(""65536""),0,""pow #84"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""-3"")),factory.newDfp(""-0.125""),DfpField.FLAG_INEXACT,""pow #85"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""-4"")),factory.newDfp(""0.0625""),0,""pow #86"");test(DfpMath.pow(factory.newDfp(""-2""),factory.newDfp(""-4.1"")),qnan,DfpField.FLAG_INVALID | DfpField.FLAG_INEXACT,""pow #87"");test(DfpMath.pow(factory.newDfp(""2""),factory.newDfp(""1.5"")),factory.newDfp(""2.8284271247461901""),DfpField.FLAG_INEXACT,""pow #88"");}"
"org.apache.commons.math3.dfp.DfpMathTest.testSin",0,"@Test public void testSin(){test(DfpMath.sin(pinf),nan,DfpField.FLAG_INVALID | DfpField.FLAG_INEXACT,""sin #1"");test(DfpMath.sin(nan),nan,DfpField.FLAG_INVALID | DfpField.FLAG_INEXACT,""sin #2"");test(DfpMath.sin(factory.getZero()),factory.getZero(),DfpField.FLAG_INEXACT,""sin #3"");test(DfpMath.sin(factory.getPi()),factory.getZero(),DfpField.FLAG_INEXACT,""sin #4"");test(DfpMath.sin(factory.getPi().negate()),factory.newDfp(""-0""),DfpField.FLAG_INEXACT,""sin #5"");test(DfpMath.sin(factory.getPi().multiply(2)),factory.getZero(),DfpField.FLAG_INEXACT,""sin #6"");test(DfpMath.sin(factory.getPi().divide(2)),factory.getOne(),DfpField.FLAG_INEXACT,""sin #7"");test(DfpMath.sin(factory.getPi().divide(2).negate()),factory.getOne().negate(),DfpField.FLAG_INEXACT,""sin #8"");test(DfpMath.sin(DfpMath.atan(factory.getOne())),factory.newDfp(""0.5"").sqrt(),DfpField.FLAG_INEXACT,""sin #9"");test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),factory.newDfp(""0.5"").sqrt().negate(),DfpField.FLAG_INEXACT,""sin #10"");test(DfpMath.sin(DfpMath.atan(factory.getOne())).negate(),factory.newDfp(""0.5"").sqrt().negate(),DfpField.FLAG_INEXACT,""sin #11"");test(DfpMath.sin(factory.newDfp(""0.1"")),factory.newDfp(""0.0998334166468281523""),DfpField.FLAG_INEXACT,""sin #12"");test(DfpMath.sin(factory.newDfp(""0.2"")),factory.newDfp(""0.19866933079506121546""),DfpField.FLAG_INEXACT,""sin #13"");test(DfpMath.sin(factory.newDfp(""0.3"")),factory.newDfp(""0.2955202066613395751""),DfpField.FLAG_INEXACT,""sin #14"");test(DfpMath.sin(factory.newDfp(""0.4"")),factory.newDfp(""0.38941834230865049166""),DfpField.FLAG_INEXACT,""sin #15"");test(DfpMath.sin(factory.newDfp(""0.5"")),factory.newDfp(""0.47942553860420300026""),DfpField.FLAG_INEXACT,""sin #16"");test(DfpMath.sin(factory.newDfp(""0.6"")),factory.newDfp(""0.56464247339503535721""),DfpField.FLAG_INEXACT,""sin #17"");test(DfpMath.sin(factory.newDfp(""0.7"")),factory.newDfp(""0.64421768723769105367""),DfpField.FLAG_INEXACT,""sin #18"");test(DfpMath.sin(factory.newDfp(""0.8"")),factory.newDfp(""0.71735609089952276163""),DfpField.FLAG_INEXACT,""sin #19"");test(DfpMath.sin(factory.newDfp(""0.9"")),factory.newDfp(""0.78332690962748338847""),DfpField.FLAG_INEXACT,""sin #20"");test(DfpMath.sin(factory.newDfp(""1.0"")),factory.newDfp(""0.84147098480789650666""),DfpField.FLAG_INEXACT,""sin #21"");test(DfpMath.sin(factory.newDfp(""1.1"")),factory.newDfp(""0.89120736006143533995""),DfpField.FLAG_INEXACT,""sin #22"");test(DfpMath.sin(factory.newDfp(""1.2"")),factory.newDfp(""0.93203908596722634968""),DfpField.FLAG_INEXACT,""sin #23"");test(DfpMath.sin(factory.newDfp(""1.3"")),factory.newDfp(""0.9635581854171929647""),DfpField.FLAG_INEXACT,""sin #24"");test(DfpMath.sin(factory.newDfp(""1.4"")),factory.newDfp(""0.98544972998846018066""),DfpField.FLAG_INEXACT,""sin #25"");test(DfpMath.sin(factory.newDfp(""1.5"")),factory.newDfp(""0.99749498660405443096""),DfpField.FLAG_INEXACT,""sin #26"");test(DfpMath.sin(factory.newDfp(""1.6"")),factory.newDfp(""0.99957360304150516323""),DfpField.FLAG_INEXACT,""sin #27"");}"
"org.apache.commons.math3.genetics.GeneticAlgorithmTestPermutations.test",0,"@Test public void test(){GeneticAlgorithm ga=new GeneticAlgorithm(new OnePointCrossover<Integer>(),CROSSOVER_RATE,new RandomKeyMutation(),MUTATION_RATE,new TournamentSelection(TOURNAMENT_ARITY));Population initial=randomPopulation();StoppingCondition stopCond=new FixedGenerationCount(NUM_GENERATIONS);Chromosome bestInitial=initial.getFittestChromosome();Population finalPopulation=ga.evolve(initial,stopCond);Chromosome bestFinal=finalPopulation.getFittestChromosome();Assert.assertTrue(bestFinal.compareTo(bestInitial)> 0);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> m2=createSparseMatrix(testData2);Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());Assert.assertTrue(""testData is square"",m.isSquare());Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);Assert.assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testCopyFunctions",0,"/** * test copy functions */@Test public void testCopyFunctions(){SparseFieldMatrix<Fraction> m1=createSparseMatrix(testData);FieldMatrix<Fraction> m2=m1.copy();Assert.assertEquals(m1.getClass(),m2.getClass());Assert.assertEquals((m2),m1);SparseFieldMatrix<Fraction> m3=createSparseMatrix(testData);FieldMatrix<Fraction> m4=m3.copy();Assert.assertEquals(m3.getClass(),m4.getClass());Assert.assertEquals((m4),m3);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testAdd",0,"/** * test add */@Test public void testAdd(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> mInv=createSparseMatrix(testDataInv);SparseFieldMatrix<Fraction> mDataPlusInv=createSparseMatrix(testDataPlusInv);FieldMatrix<Fraction> mPlusMInv=m.add(mInv);for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){Assert.assertEquals(""sum entry entry"",mDataPlusInv.getEntry(row,col).doubleValue(),mPlusMInv.getEntry(row,col).doubleValue(),entryTolerance);}}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testAddFail",0,"/** * test add failure */@Test public void testAddFail(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> m2=createSparseMatrix(testData2);try {m.add(m2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */@Test public void testPlusMinus(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> n=createSparseMatrix(testDataInv);assertClose(""m-n = m + -n"",m.subtract(n),n.scalarMultiply(new Fraction(-1)).add(m),entryTolerance);try {m.subtract(createSparseMatrix(testData2));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testMultiply",0,"/** * test multiply */@Test public void testMultiply(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> mInv=createSparseMatrix(testDataInv);SparseFieldMatrix<Fraction> identity=createSparseMatrix(id);SparseFieldMatrix<Fraction> m2=createSparseMatrix(testData2);assertClose(""inverse multiply"",m.multiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",m.multiply(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testDataInv)),identity,entryTolerance);assertClose(""inverse multiply"",mInv.multiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.multiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.multiply(mInv),mInv,entryTolerance);assertClose(""identity multiply"",m2.multiply(identity),m2,entryTolerance);try {m.multiply(createSparseMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testMultiply2",0,"@Test public void testMultiply2(){FieldMatrix<Fraction> m3=createSparseMatrix(d3);FieldMatrix<Fraction> m4=createSparseMatrix(d4);FieldMatrix<Fraction> m5=createSparseMatrix(d5);assertClose(""m3*m4=m5"",m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testTrace",0,"/** * test trace */@Test public void testTrace(){FieldMatrix<Fraction> m=createSparseMatrix(id);Assert.assertEquals(""identity trace"",3d,m.getTrace().doubleValue(),entryTolerance);m=createSparseMatrix(testData2);try {m.getTrace();Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testScalarAdd",0,"/** * test sclarAdd */@Test public void testScalarAdd(){FieldMatrix<Fraction> m=createSparseMatrix(testData);assertClose(""scalar add"",createSparseMatrix(testDataPlus2),m.scalarAdd(new Fraction(2)),entryTolerance);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testOperate",0,"/** * test operate */@Test public void testOperate(){FieldMatrix<Fraction> m=createSparseMatrix(id);assertClose(""identity operate"",testVector,m.operate(testVector),entryTolerance);assertClose(""identity operate"",testVector,m.operate(new ArrayFieldVector<Fraction>(testVector)).getData(),entryTolerance);m=createSparseMatrix(bigSingular);try {m.operate(testVector);Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testMath209",0,"/** * test issue MATH-209 */@Test public void testMath209(){FieldMatrix<Fraction> a=createSparseMatrix(new Fraction[][]{{new Fraction(1),new Fraction(2)},{new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6)}});Fraction[]b=a.operate(new Fraction[]{new Fraction(1),new Fraction(1)});Assert.assertEquals(a.getRowDimension(),b.length);Assert.assertEquals(3.0,b[0].doubleValue(),1.0e-12);Assert.assertEquals(7.0,b[1].doubleValue(),1.0e-12);Assert.assertEquals(11.0,b[2].doubleValue(),1.0e-12);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testTranspose",0,"/** * test transpose */@Test public void testTranspose(){FieldMatrix<Fraction> m=createSparseMatrix(testData);FieldMatrix<Fraction> mIT=new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose();FieldMatrix<Fraction> mTI=new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse();assertClose(""inverse-transpose"",mIT,mTI,normTolerance);m=createSparseMatrix(testData2);FieldMatrix<Fraction> mt=createSparseMatrix(testData2T);assertClose(""transpose"",mt,m.transpose(),normTolerance);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */@Test public void testPremultiplyVector(){FieldMatrix<Fraction> m=createSparseMatrix(testData);assertClose(""premultiply"",m.preMultiply(testVector),preMultTest,normTolerance);assertClose(""premultiply"",m.preMultiply(new ArrayFieldVector<Fraction>(testVector).getData()),preMultTest,normTolerance);m=createSparseMatrix(bigSingular);try {m.preMultiply(testVector);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testPremultiply",0,"@Test public void testPremultiply(){FieldMatrix<Fraction> m3=createSparseMatrix(d3);FieldMatrix<Fraction> m4=createSparseMatrix(d4);FieldMatrix<Fraction> m5=createSparseMatrix(d5);assertClose(""m3*m4=m5"",m4.preMultiply(m3),m5,entryTolerance);SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> mInv=createSparseMatrix(testDataInv);SparseFieldMatrix<Fraction> identity=createSparseMatrix(id);assertClose(""inverse multiply"",m.preMultiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.preMultiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.preMultiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(createSparseMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testGetVectors",0,"@Test public void testGetVectors(){FieldMatrix<Fraction> m=createSparseMatrix(testData);assertClose(""get row"",m.getRow(0),testDataRow1,entryTolerance);assertClose(""get col"",m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testGetEntry",0,"@Test public void testGetEntry(){FieldMatrix<Fraction> m=createSparseMatrix(testData);Assert.assertEquals(""get entry"",m.getEntry(0,1).doubleValue(),2d,entryTolerance);try {m.getEntry(10,4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testExamples",0,"/** * test examples in user guide */@Test public void testExamples(){Fraction[][]matrixData={{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(5),new Fraction(3)}};FieldMatrix<Fraction> m=createSparseMatrix(matrixData);Fraction[][]matrixData2={{new Fraction(1),new Fraction(2)},{new Fraction(2),new Fraction(5)},{new Fraction(1),new Fraction(7)}};FieldMatrix<Fraction> n=createSparseMatrix(matrixData2);FieldMatrix<Fraction> p=m.multiply(n);Assert.assertEquals(2,p.getRowDimension());Assert.assertEquals(2,p.getColumnDimension());FieldMatrix<Fraction> pInverse=new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();Assert.assertEquals(2,pInverse.getRowDimension());Assert.assertEquals(2,pInverse.getColumnDimension());Fraction[][]coefficientsData={{new Fraction(2),new Fraction(3),new Fraction(-2)},{new Fraction(-1),new Fraction(7),new Fraction(6)},{new Fraction(4),new Fraction(-3),new Fraction(-5)}};FieldMatrix<Fraction> coefficients=createSparseMatrix(coefficientsData);Fraction[]constants={new Fraction(1),new Fraction(-2),new Fraction(1)};Fraction[]solution;solution=new FieldLUDecomposition<Fraction>(coefficients).getSolver().solve(new ArrayFieldVector<Fraction>(constants,false)).toArray();Assert.assertEquals((new Fraction(2).multiply((solution[0])).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2]))).doubleValue(),constants[0].doubleValue(),1E-12);Assert.assertEquals(((new Fraction(-1).multiply(solution[0])).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2]))).doubleValue(),constants[1].doubleValue(),1E-12);Assert.assertEquals(((new Fraction(4).multiply(solution[0])).subtract(new Fraction(3).multiply(solution[1])).subtract(new Fraction(5).multiply(solution[2]))).doubleValue(),constants[2].doubleValue(),1E-12);}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testSubMatrix",0,"@Test public void testSubMatrix(){FieldMatrix<Fraction> m=createSparseMatrix(subTestData);FieldMatrix<Fraction> mRows23Cols00=createSparseMatrix(subRows23Cols00);FieldMatrix<Fraction> mRows00Cols33=createSparseMatrix(subRows00Cols33);FieldMatrix<Fraction> mRows01Cols23=createSparseMatrix(subRows01Cols23);FieldMatrix<Fraction> mRows02Cols13=createSparseMatrix(subRows02Cols13);FieldMatrix<Fraction> mRows03Cols12=createSparseMatrix(subRows03Cols12);FieldMatrix<Fraction> mRows03Cols123=createSparseMatrix(subRows03Cols123);FieldMatrix<Fraction> mRows20Cols123=createSparseMatrix(subRows20Cols123);FieldMatrix<Fraction> mRows31Cols31=createSparseMatrix(subRows31Cols31);Assert.assertEquals(""Rows23Cols00"",mRows23Cols00,m.getSubMatrix(2,3,0,0));Assert.assertEquals(""Rows00Cols33"",mRows00Cols33,m.getSubMatrix(0,0,3,3));Assert.assertEquals(""Rows01Cols23"",mRows01Cols23,m.getSubMatrix(0,1,2,3));Assert.assertEquals(""Rows02Cols13"",mRows02Cols13,m.getSubMatrix(new int[]{0,2},new int[]{1,3}));Assert.assertEquals(""Rows03Cols12"",mRows03Cols12,m.getSubMatrix(new int[]{0,3},new int[]{1,2}));Assert.assertEquals(""Rows03Cols123"",mRows03Cols123,m.getSubMatrix(new int[]{0,3},new int[]{1,2,3}));Assert.assertEquals(""Rows20Cols123"",mRows20Cols123,m.getSubMatrix(new int[]{2,0},new int[]{1,2,3}));Assert.assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));Assert.assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));try {m.getSubMatrix(1,0,2,4);Assert.fail(""Expecting NumberIsTooSmallException"");}catch(NumberIsTooSmallException ex){}try {m.getSubMatrix(-1,1,2,2);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getSubMatrix(1,0,2,2);Assert.fail(""Expecting NumberIsTooSmallException"");}catch(NumberIsTooSmallException ex){}try {m.getSubMatrix(1,0,2,4);Assert.fail(""Expecting NumberIsTooSmallException"");}catch(NumberIsTooSmallException ex){}try {m.getSubMatrix(new int[]{},new int[]{0});Assert.fail(""Expecting NoDataException"");}catch(NoDataException ex){}try {m.getSubMatrix(new int[]{0},new int[]{4});Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testGetRowMatrix",0,"@Test public void testGetRowMatrix(){FieldMatrix<Fraction> m=createSparseMatrix(subTestData);FieldMatrix<Fraction> mRow0=createSparseMatrix(subRow0);FieldMatrix<Fraction> mRow3=createSparseMatrix(subRow3);Assert.assertEquals(""Row0"",mRow0,m.getRowMatrix(0));Assert.assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testGetColumnMatrix",0,"@Test public void testGetColumnMatrix(){FieldMatrix<Fraction> m=createSparseMatrix(subTestData);FieldMatrix<Fraction> mColumn1=createSparseMatrix(subColumn1);FieldMatrix<Fraction> mColumn3=createSparseMatrix(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testGetRowVector",0,"@Test public void testGetRowVector(){FieldMatrix<Fraction> m=createSparseMatrix(subTestData);FieldVector<Fraction> mRow0=new ArrayFieldVector<Fraction>(subRow0[0]);FieldVector<Fraction> mRow3=new ArrayFieldVector<Fraction>(subRow3[0]);Assert.assertEquals(""Row0"",mRow0,m.getRowVector(0));Assert.assertEquals(""Row3"",mRow3,m.getRowVector(3));try {m.getRowVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testGetColumnVector",0,"@Test public void testGetColumnVector(){FieldMatrix<Fraction> m=createSparseMatrix(subTestData);FieldVector<Fraction> mColumn1=columnToVector(subColumn1);FieldVector<Fraction> mColumn3=columnToVector(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnVector(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);SparseFieldMatrix<Fraction> m1=(SparseFieldMatrix<Fraction>)m.copy();SparseFieldMatrix<Fraction> mt=(SparseFieldMatrix<Fraction>)m.transpose();Assert.assertTrue(m.hashCode()!= mt.hashCode());Assert.assertEquals(m.hashCode(),m1.hashCode());Assert.assertEquals(m,m);Assert.assertEquals(m,m1);Assert.assertFalse(m.equals(null));Assert.assertFalse(m.equals(mt));Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));}"
"org.apache.commons.math3.linear.SparseFieldMatrixTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){SparseFieldMatrix<Fraction> m=createSparseMatrix(testData);m.setSubMatrix(detData2,1,1);FieldMatrix<Fraction> expected=createSparseMatrix(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(1),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});Assert.assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=createSparseMatrix(new Fraction[][]{{new Fraction(1),new Fraction(3),new Fraction(3)},{new Fraction(2),new Fraction(4),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});Assert.assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=createSparseMatrix(new Fraction[][]{{new Fraction(3),new Fraction(4),new Fraction(5)},{new Fraction(4),new Fraction(7),new Fraction(5)},{new Fraction(3),new Fraction(2),new Fraction(10)}});Assert.assertEquals(expected,m);SparseFieldMatrix<Fraction> matrix=createSparseMatrix(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6),new Fraction(7),new Fraction(8)},{new Fraction(9),new Fraction(0),new Fraction(1),new Fraction(2)}});matrix.setSubMatrix(new Fraction[][]{{new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6)}},1,1);expected=createSparseMatrix(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(3),new Fraction(4),new Fraction(8)},{new Fraction(9),new Fraction(5),new Fraction(6),new Fraction(2)}});Assert.assertEquals(expected,matrix);try {m.setSubMatrix(testData,1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,-1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,1,-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(null,1,1);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException e){}try {new SparseFieldMatrix<Fraction>(field,0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new Fraction[][]{{new Fraction(1)},{new Fraction(2),new Fraction(3)}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new Fraction[][]{{}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}}"
"org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaFValue",0,"@Test public void testAnovaFValue(){List<double[]> threeClasses=new ArrayList<double[]>();threeClasses.add(classA);threeClasses.add(classB);threeClasses.add(classC);Assert.assertEquals(""ANOVA F-value"",24.67361709460624,testStatistic.anovaFValue(threeClasses),1E-12);List<double[]> twoClasses=new ArrayList<double[]>();twoClasses.add(classA);twoClasses.add(classB);Assert.assertEquals(""ANOVA F-value"",0.0150579150579,testStatistic.anovaFValue(twoClasses),1E-12);List<double[]> emptyContents=new ArrayList<double[]>();emptyContents.add(emptyArray);emptyContents.add(classC);try {testStatistic.anovaFValue(emptyContents);Assert.fail(""empty array for key classX,MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}List<double[]> tooFew=new ArrayList<double[]>();tooFew.add(classA);try {testStatistic.anovaFValue(tooFew);Assert.fail(""less than two classes,MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValue",0,"@Test public void testAnovaPValue(){List<double[]> threeClasses=new ArrayList<double[]>();threeClasses.add(classA);threeClasses.add(classB);threeClasses.add(classC);Assert.assertEquals(""ANOVA P-value"",6.959446E-06,testStatistic.anovaPValue(threeClasses),1E-12);List<double[]> twoClasses=new ArrayList<double[]>();twoClasses.add(classA);twoClasses.add(classB);Assert.assertEquals(""ANOVA P-value"",0.904212960464,testStatistic.anovaPValue(twoClasses),1E-12);}"
"org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaPValueSummaryStatistics",0,"@Test public void testAnovaPValueSummaryStatistics(){List<SummaryStatistics> threeClasses=new ArrayList<SummaryStatistics>();SummaryStatistics statsA=new SummaryStatistics();for(double a : classA){statsA.addValue(a);}threeClasses.add(statsA);SummaryStatistics statsB=new SummaryStatistics();for(double b : classB){statsB.addValue(b);}threeClasses.add(statsB);SummaryStatistics statsC=new SummaryStatistics();for(double c : classC){statsC.addValue(c);}threeClasses.add(statsC);Assert.assertEquals(""ANOVA P-value"",6.959446E-06,testStatistic.anovaPValue(threeClasses,true),1E-12);List<SummaryStatistics> twoClasses=new ArrayList<SummaryStatistics>();twoClasses.add(statsA);twoClasses.add(statsB);Assert.assertEquals(""ANOVA P-value"",0.904212960464,testStatistic.anovaPValue(twoClasses,false),1E-12);}"
"org.apache.commons.math3.stat.inference.OneWayAnovaTest.testAnovaTest",0,"@Test public void testAnovaTest(){List<double[]> threeClasses=new ArrayList<double[]>();threeClasses.add(classA);threeClasses.add(classB);threeClasses.add(classC);Assert.assertTrue(""ANOVA Test P<0.01"",testStatistic.anovaTest(threeClasses,0.01));List<double[]> twoClasses=new ArrayList<double[]>();twoClasses.add(classA);twoClasses.add(classB);Assert.assertFalse(""ANOVA Test P>0.01"",testStatistic.anovaTest(twoClasses,0.01));}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){CholeskyDecomposition llt=new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));Assert.assertEquals(testData.length,llt.getL().getRowDimension());Assert.assertEquals(testData.length,llt.getL().getColumnDimension());Assert.assertEquals(testData.length,llt.getLT().getRowDimension());Assert.assertEquals(testData.length,llt.getLT().getColumnDimension());}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testNonSquare",0,"/** * test non-square matrix */@Test(expected=NonSquareMatrixException.class)public void testNonSquare(){new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[3][2]));}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testNotSymmetricMatrixException",0,"/** * test non-symmetric matrix */@Test(expected=NonSymmetricMatrixException.class)public void testNotSymmetricMatrixException(){double[][]changed=testData.clone();changed[0][changed[0].length - 1]+=1.0e-5;new CholeskyDecomposition(MatrixUtils.createRealMatrix(changed));}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testNotPositiveDefinite",0,"/** * test non positive definite matrix */@Test(expected=NonPositiveDefiniteMatrixException.class)public void testNotPositiveDefinite(){new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][]{{14,11,13,15,24},{11,34,13,8,25},{13,13,14,15,21},{15,8,15,18,23},{24,25,21,23,45}}));}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testMath274",0,"@Test(expected=NonPositiveDefiniteMatrixException.class)public void testMath274(){new CholeskyDecomposition(MatrixUtils.createRealMatrix(new double[][]{{0.40434286,-0.09376327,0.30328980,0.04909388},{-0.09376327,0.10400408,0.07137959,0.04762857},{0.30328980,0.07137959,0.30458776,0.04882449},{0.04909388,0.04762857,0.04882449,0.07543265}}));}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testAEqualLLT",0,"/** * test A = LLT */@Test public void testAEqualLLT(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);CholeskyDecomposition llt=new CholeskyDecomposition(matrix);RealMatrix l=llt.getL();RealMatrix lt=llt.getLT();double norm=l.multiply(lt).subtract(matrix).getNorm();Assert.assertEquals(0,norm,1.0e-15);}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testLLowerTriangular",0,"/** * test that L is lower triangular */@Test public void testLLowerTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix l=new CholeskyDecomposition(matrix).getL();for (int i=0;i < l.getRowDimension();i++){for (int j=i + 1;j < l.getColumnDimension();j++){Assert.assertEquals(0.0,l.getEntry(i,j),0.0);}}}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testLTTransposed",0,"/** * test that LT is transpose of L */@Test public void testLTTransposed(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);CholeskyDecomposition llt=new CholeskyDecomposition(matrix);RealMatrix l=llt.getL();RealMatrix lt=llt.getLT();double norm=l.subtract(lt.transpose()).getNorm();Assert.assertEquals(0,norm,1.0e-15);}"
"org.apache.commons.math3.linear.CholeskyDecompositionTest.testMatricesValues",0,"/** * test matrices values */@Test public void testMatricesValues(){RealMatrix lRef=MatrixUtils.createRealMatrix(new double[][]{{1,0,0,0,0},{2,3,0,0,0},{4,5,6,0,0},{7,8,9,10,0},{11,12,13,14,15}});CholeskyDecomposition llt=new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData));RealMatrix l=llt.getL();Assert.assertEquals(0,l.subtract(lRef).getNorm(),1.0e-13);RealMatrix lt=llt.getLT();Assert.assertEquals(0,lt.subtract(lRef.transpose()).getNorm(),1.0e-13);Assert.assertTrue(l == llt.getL());Assert.assertTrue(lt == llt.getLT());}"
"org.apache.commons.math3.special.ErfTest.testErf0",0,"@Test public void testErf0(){double actual=Erf.erf(0.0);double expected=0.0;Assert.assertEquals(expected,actual,1.0e-15);Assert.assertEquals(1 - expected,Erf.erfc(0.0),1.0e-15);}"
"org.apache.commons.math3.special.ErfTest.testErf1960",0,"@Test public void testErf1960(){double x=1.960 / FastMath.sqrt(2.0);double actual=Erf.erf(x);double expected=0.95;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - actual,Erf.erfc(x),1.0e-15);actual=Erf.erf(-x);expected=-expected;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - actual,Erf.erfc(-x),1.0e-15);}"
"org.apache.commons.math3.special.ErfTest.testErf2576",0,"@Test public void testErf2576(){double x=2.576 / FastMath.sqrt(2.0);double actual=Erf.erf(x);double expected=0.99;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - actual,Erf.erfc(x),1e-15);actual=Erf.erf(-x);expected=-expected;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - actual,Erf.erfc(-x),1.0e-15);}"
"org.apache.commons.math3.special.ErfTest.testErf2807",0,"@Test public void testErf2807(){double x=2.807 / FastMath.sqrt(2.0);double actual=Erf.erf(x);double expected=0.995;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - actual,Erf.erfc(x),1.0e-15);actual=Erf.erf(-x);expected=-expected;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - actual,Erf.erfc(-x),1.0e-15);}"
"org.apache.commons.math3.special.ErfTest.testErf3291",0,"@Test public void testErf3291(){double x=3.291 / FastMath.sqrt(2.0);double actual=Erf.erf(x);double expected=0.999;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - expected,Erf.erfc(x),1.0e-5);actual=Erf.erf(-x);expected=-expected;Assert.assertEquals(expected,actual,1.0e-5);Assert.assertEquals(1 - expected,Erf.erfc(-x),1.0e-5);}"
"org.apache.commons.math3.special.ErfTest.testLargeValues",0,"/** * MATH-301,MATH-456*/@Test public void testLargeValues(){for (int i=1;i < 200;i*=10){double result=Erf.erf(i);Assert.assertFalse(Double.isNaN(result));Assert.assertTrue(result > 0 && result <= 1);result=Erf.erf(-i);Assert.assertFalse(Double.isNaN(result));Assert.assertTrue(result >= -1 && result < 0);result=Erf.erfc(i);Assert.assertFalse(Double.isNaN(result));Assert.assertTrue(result >= 0 && result < 1);result=Erf.erfc(-i);Assert.assertFalse(Double.isNaN(result));Assert.assertTrue(result >= 1 && result <= 2);}Assert.assertEquals(-1,Erf.erf(Double.NEGATIVE_INFINITY),0);Assert.assertEquals(1,Erf.erf(Double.POSITIVE_INFINITY),0);Assert.assertEquals(2,Erf.erfc(Double.NEGATIVE_INFINITY),0);Assert.assertEquals(0,Erf.erfc(Double.POSITIVE_INFINITY),0);}"
"org.apache.commons.math3.special.ErfTest.testErfGnu",0,"/** * Compare Erf.erf against reference values computed using GCC 4.2.1 (Apple OSX packaged version)erfl (extended precision erf).*/@Test public void testErfGnu(){final double tol=1E-15;final double[]gnuValues=new double[]{-1,-1,-1,-1,-1,-1,-1,-1,-0.99999999999999997848,-0.99999999999999264217,-0.99999999999846254017,-0.99999999980338395581,-0.99999998458274209971,-0.9999992569016276586,-0.99997790950300141459,-0.99959304798255504108,-0.99532226501895273415,-0.96610514647531072711,-0.84270079294971486948,-0.52049987781304653809,0,0.52049987781304653809,0.84270079294971486948,0.96610514647531072711,0.99532226501895273415,0.99959304798255504108,0.99997790950300141459,0.9999992569016276586,0.99999998458274209971,0.99999999980338395581,0.99999999999846254017,0.99999999999999264217,0.99999999999999997848,1,1,1,1,1,1,1,1};double x=-10d;for (int i=0;i < 41;i++){Assert.assertEquals(gnuValues[i],Erf.erf(x),tol);x+=0.5d;}}"
"org.apache.commons.math3.special.ErfTest.testErfcGnu",0,"/** * Compare Erf.erfc against reference values computed using GCC 4.2.1 (Apple OSX packaged version)erfcl (extended precision erfc).*/@Test public void testErfcGnu(){final double tol=1E-15;final double[]gnuValues=new double[]{2,2,2,2,2,2,2,2,1.9999999999999999785,1.9999999999999926422,1.9999999999984625402,1.9999999998033839558,1.9999999845827420998,1.9999992569016276586,1.9999779095030014146,1.9995930479825550411,1.9953222650189527342,1.9661051464753107271,1.8427007929497148695,1.5204998778130465381,1,0.47950012218695346194,0.15729920705028513051,0.033894853524689272893,0.0046777349810472658333,0.00040695201744495893941,2.2090496998585441366E-05,7.4309837234141274516E-07,1.5417257900280018858E-08,1.966160441542887477E-10,1.5374597944280348501E-12,7.3578479179743980661E-15,2.1519736712498913103E-17,3.8421483271206474691E-20,4.1838256077794144006E-23,2.7766493860305691016E-26,1.1224297172982927079E-29,2.7623240713337714448E-33,4.1370317465138102353E-37,3.7692144856548799402E-41,2.0884875837625447567E-45};double x=-10d;for (int i=0;i < 41;i++){Assert.assertEquals(gnuValues[i],Erf.erfc(x),tol);x+=0.5d;}}"
"org.apache.commons.math3.special.ErfTest.testErfcMaple",0,"/** * Tests erfc against reference data computed using Maple reported in Marsaglia,G,,""Evaluating the Normal Distribution,"" Journal of Statistical Software,July,2004. http//www.jstatsoft.org/v11/a05/paper*/@Test public void testErfcMaple(){double[][]ref=new double[][]{{0.1,4.60172162722971e-01},{1.2,1.15069670221708e-01},{2.3,1.07241100216758e-02},{3.4,3.36929265676881e-04},{4.5,3.39767312473006e-06},{5.6,1.07175902583109e-08},{6.7,1.04209769879652e-11},{7.8,3.09535877195870e-15},{8.9,2.79233437493966e-19},{10.0,7.61985302416053e-24},{11.1,6.27219439321703e-29},{12.2,1.55411978638959e-34},{13.3,1.15734162836904e-40},{14.4,2.58717592540226e-47},{15.5,1.73446079179387e-54},{16.6,3.48454651995041e-62}};for (int i=0;i < 15;i++){final double result=0.5 * Erf.erfc(ref[i][0]/ Math.sqrt(2));Assert.assertEquals(ref[i][1],result,1E-15);TestUtils.assertRelativelyEquals(ref[i][1],result,1E-13);}}"
"org.apache.commons.math3.special.ErfTest.testTwoArgumentErf",0,"/** * Test the implementation of Erf.erf(double,double)for consistency with results obtained from Erf.erf(double)and Erf.erfc(double).*/@Test public void testTwoArgumentErf(){double[]xi=new double[]{-2.0,-1.0,-0.9,-0.1,0.0,0.1,0.9,1.0,2.0};for(double x1 : xi){for(double x2 : xi){double a=Erf.erf(x1,x2);double b=Erf.erf(x2)- Erf.erf(x1);double c=Erf.erfc(x1)- Erf.erfc(x2);Assert.assertEquals(a,b,1E-15);Assert.assertEquals(a,c,1E-15);}}}"
"org.apache.commons.math3.special.ErfTest.testErfInvNaN",0,"@Test public void testErfInvNaN(){Assert.assertTrue(Double.isNaN(Erf.erfInv(-1.001)));Assert.assertTrue(Double.isNaN(Erf.erfInv(+1.001)));}"
"org.apache.commons.math3.special.ErfTest.testErfInvInfinite",0,"@Test public void testErfInvInfinite(){Assert.assertTrue(Double.isInfinite(Erf.erfInv(-1)));Assert.assertTrue(Erf.erfInv(-1)< 0);Assert.assertTrue(Double.isInfinite(Erf.erfInv(+1)));Assert.assertTrue(Erf.erfInv(+1)> 0);}"
"org.apache.commons.math3.special.ErfTest.testErfInv",0,"@Test public void testErfInv(){for (double x=-5.9;x < 5.9;x+=0.01){final double y=Erf.erf(x);final double dydx=2 * FastMath.exp(-x * x)/ FastMath.sqrt(FastMath.PI);Assert.assertEquals(x,Erf.erfInv(y),1.0e-15 / dydx);}}"
"org.apache.commons.math3.special.ErfTest.testErfcInvNaN",0,"@Test public void testErfcInvNaN(){Assert.assertTrue(Double.isNaN(Erf.erfcInv(-0.001)));Assert.assertTrue(Double.isNaN(Erf.erfcInv(+2.001)));}"
"org.apache.commons.math3.special.ErfTest.testErfcInvInfinite",0,"@Test public void testErfcInvInfinite(){Assert.assertTrue(Double.isInfinite(Erf.erfcInv(-0)));Assert.assertTrue(Erf.erfcInv(0)> 0);Assert.assertTrue(Double.isInfinite(Erf.erfcInv(+2)));Assert.assertTrue(Erf.erfcInv(+2)< 0);}"
"org.apache.commons.math3.special.ErfTest.testErfcInv",0,"@Test public void testErfcInv(){for (double x=-5.85;x < 5.9;x+=0.01){final double y=Erf.erfc(x);final double dydxAbs=2 * FastMath.exp(-x * x)/ FastMath.sqrt(FastMath.PI);Assert.assertEquals(x,Erf.erfcInv(y),1.0e-15 / dydxAbs);}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCreateRealMatrix",0,"@Test public void testCreateRealMatrix(){Assert.assertEquals(new BlockRealMatrix(testData),MatrixUtils.createRealMatrix(testData));try {MatrixUtils.createRealMatrix(new double[][]{{1},{1,2}});Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createRealMatrix(new double[][]{{},{}});Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createRealMatrix(null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testcreateFieldMatrix",0,"@Test public void testcreateFieldMatrix(){Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(asFraction(testData)),MatrixUtils.createFieldMatrix(asFraction(testData)));Assert.assertEquals(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),fractionColMatrix),MatrixUtils.createFieldMatrix(fractionColMatrix));try {MatrixUtils.createFieldMatrix(asFraction(new double[][]{{1},{1,2}}));Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createFieldMatrix(asFraction(new double[][]{{},{}}));Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createFieldMatrix((Fraction[][])null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCreateRowRealMatrix",0,"@Test public void testCreateRowRealMatrix(){Assert.assertEquals(MatrixUtils.createRowRealMatrix(row),new BlockRealMatrix(rowMatrix));try {MatrixUtils.createRowRealMatrix(new double[]{});Assert.fail(""Expecting NotStrictlyPositiveException"");}catch(NotStrictlyPositiveException ex){}try {MatrixUtils.createRowRealMatrix(null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCreateRowFieldMatrix",0,"@Test public void testCreateRowFieldMatrix(){Assert.assertEquals(MatrixUtils.createRowFieldMatrix(asFraction(row)),new Array2DRowFieldMatrix<Fraction>(asFraction(rowMatrix)));Assert.assertEquals(MatrixUtils.createRowFieldMatrix(fractionRow),new Array2DRowFieldMatrix<Fraction>(fractionRowMatrix));try {MatrixUtils.createRowFieldMatrix(new Fraction[]{});Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createRowFieldMatrix((Fraction[])null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCreateColumnRealMatrix",0,"@Test public void testCreateColumnRealMatrix(){Assert.assertEquals(MatrixUtils.createColumnRealMatrix(col),new BlockRealMatrix(colMatrix));try {MatrixUtils.createColumnRealMatrix(new double[]{});Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createColumnRealMatrix(null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCreateColumnFieldMatrix",0,"@Test public void testCreateColumnFieldMatrix(){Assert.assertEquals(MatrixUtils.createColumnFieldMatrix(asFraction(col)),new Array2DRowFieldMatrix<Fraction>(asFraction(colMatrix)));Assert.assertEquals(MatrixUtils.createColumnFieldMatrix(fractionCol),new Array2DRowFieldMatrix<Fraction>(fractionColMatrix));try {MatrixUtils.createColumnFieldMatrix(new Fraction[]{});Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MatrixUtils.createColumnFieldMatrix((Fraction[])null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCreateIdentityMatrix",0,"@Test public void testCreateIdentityMatrix(){checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(3));checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(2));checkIdentityMatrix(MatrixUtils.createRealIdentityMatrix(1));try {MatrixUtils.createRealIdentityMatrix(0);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testcreateFieldIdentityMatrix",0,"@Test public void testcreateFieldIdentityMatrix(){checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(),3));checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(),2));checkIdentityFieldMatrix(MatrixUtils.createFieldIdentityMatrix(FractionField.getInstance(),1));try {MatrixUtils.createRealIdentityMatrix(0);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testBigFractionConverter",0,"@Test public void testBigFractionConverter(){BigFraction[][]bfData={{new BigFraction(1),new BigFraction(2),new BigFraction(3)},{new BigFraction(2),new BigFraction(5),new BigFraction(3)},{new BigFraction(1),new BigFraction(0),new BigFraction(8)}};FieldMatrix<BigFraction> m=new Array2DRowFieldMatrix<BigFraction>(bfData,false);RealMatrix converted=MatrixUtils.bigFractionMatrixToRealMatrix(m);RealMatrix reference=new Array2DRowRealMatrix(testData,false);Assert.assertEquals(0.0,converted.subtract(reference).getNorm(),0.0);}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testFractionConverter",0,"@Test public void testFractionConverter(){Fraction[][]fData={{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(5),new Fraction(3)},{new Fraction(1),new Fraction(0),new Fraction(8)}};FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(fData,false);RealMatrix converted=MatrixUtils.fractionMatrixToRealMatrix(m);RealMatrix reference=new Array2DRowRealMatrix(testData,false);Assert.assertEquals(0.0,converted.subtract(reference).getNorm(),0.0);}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testSolveLowerTriangularSystem",0,"@Test public void testSolveLowerTriangularSystem(){RealMatrix rm=new Array2DRowRealMatrix(new double[][]{{2,0,0,0},{1,1,0,0},{3,3,3,0},{3,3,3,4}},false);RealVector b=new ArrayRealVector(new double[]{2,3,4,8},false);MatrixUtils.solveLowerTriangularSystem(rm,b);TestUtils.assertEquals(new double[]{1,2,-1.66666666666667,1.0},b.toArray(),1.0e-12);}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testSolveUpperTriangularSystem",0,"@Test public void testSolveUpperTriangularSystem(){RealMatrix rm=new Array2DRowRealMatrix(new double[][]{{1,2,3},{0,1,1},{0,0,2}},false);RealVector b=new ArrayRealVector(new double[]{8,4,2},false);MatrixUtils.solveUpperTriangularSystem(rm,b);TestUtils.assertEquals(new double[]{-1,3,1},b.toArray(),1.0e-12);}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testBlockInverse",0,"/** * This test should probably be replaced by one that could show whether this algorithm can sometimes perform better (precision- or performance-wise)than the direct inversion of the whole matrix.*/@Test public void testBlockInverse(){final double[][]data={{-1,0,123,4},{-56,78.9,-0.1,-23.4},{5.67,8,-9,1011},{12,345,-67.8,9}};final RealMatrix m=new Array2DRowRealMatrix(data);final int len=data.length;final double tol=1e-14;for (int splitIndex=0;splitIndex < 3;splitIndex++){final RealMatrix mInv=MatrixUtils.blockInverse(m,splitIndex);final RealMatrix id=m.multiply(mInv);for (int i=0;i < len;i++){for (int j=0;j < len;j++){final double entry=id.getEntry(i,j);if (i == j){Assert.assertEquals(""["" + i + ""][""+ j+ ""]"",1,entry,tol);}else {Assert.assertEquals(""["" + i + ""][""+ j+ ""]"",0,entry,tol);}}}}}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testBlockInverseNonInvertible",0,"@Test(expected=SingularMatrixException.class)public void testBlockInverseNonInvertible(){final double[][]data={{-1,0,123,4},{-56,78.9,-0.1,-23.4},{5.67,8,-9,1011},{5.67,8,-9,1011}};MatrixUtils.blockInverse(new Array2DRowRealMatrix(data),2);}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testIsSymmetric",0,"@Test public void testIsSymmetric(){final double eps=Math.ulp(1d);final double[][]dataSym={{1,2,3},{2,2,5},{3,5,6}};Assert.assertTrue(MatrixUtils.isSymmetric(MatrixUtils.createRealMatrix(dataSym),eps));final double[][]dataNonSym={{1,2,-3},{2,2,5},{3,5,6}};Assert.assertFalse(MatrixUtils.isSymmetric(MatrixUtils.createRealMatrix(dataNonSym),eps));}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testIsSymmetricTolerance",0,"@Test public void testIsSymmetricTolerance(){final double eps=1e-4;final double[][]dataSym1={{1,1,1.00009},{1,1,1},{1.0,1,1}};Assert.assertTrue(MatrixUtils.isSymmetric(MatrixUtils.createRealMatrix(dataSym1),eps));final double[][]dataSym2={{1,1,0.99990},{1,1,1},{1.0,1,1}};Assert.assertTrue(MatrixUtils.isSymmetric(MatrixUtils.createRealMatrix(dataSym2),eps));final double[][]dataNonSym1={{1,1,1.00011},{1,1,1},{1.0,1,1}};Assert.assertFalse(MatrixUtils.isSymmetric(MatrixUtils.createRealMatrix(dataNonSym1),eps));final double[][]dataNonSym2={{1,1,0.99989},{1,1,1},{1.0,1,1}};Assert.assertFalse(MatrixUtils.isSymmetric(MatrixUtils.createRealMatrix(dataNonSym2),eps));}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCheckSymmetric1",0,"@Test public void testCheckSymmetric1(){final double[][]dataSym={{1,2,3},{2,2,5},{3,5,6}};MatrixUtils.checkSymmetric(MatrixUtils.createRealMatrix(dataSym),Math.ulp(1d));}"
"org.apache.commons.math3.linear.MatrixUtilsTest.testCheckSymmetric2",0,"@Test(expected=NonSymmetricMatrixException.class)public void testCheckSymmetric2(){final double[][]dataNonSym={{1,2,-3},{2,2,5},{3,5,6}};MatrixUtils.checkSymmetric(MatrixUtils.createRealMatrix(dataNonSym),Math.ulp(1d));}"
"org.apache.commons.math3.ml.distance.CanberraDistanceTest.testZero",0,"@Test public void testZero(){final double[]a={0,1,-2,3.4,5,-6.7,89};Assert.assertEquals(0,distance.compute(a,a),0d);}"
"org.apache.commons.math3.ml.distance.CanberraDistanceTest.testZero2",0,"@Test public void testZero2(){final double[]a={0,0};Assert.assertEquals(0,distance.compute(a,a),0d);}"
"org.apache.commons.math3.ml.distance.CanberraDistanceTest.test",0,"@Test public void test(){final double[]a={1,2,3,4,9};final double[]b={-5,-6,7,4,3};final double expected=2.9;Assert.assertEquals(expected,distance.compute(a,b),0d);Assert.assertEquals(expected,distance.compute(b,a),0d);}"
"org.apache.commons.math3.util.MathUtilsTest.testHash",0,"@Test public void testHash(){double[]testArray={Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d,1E-14,(1 + 1E-14),Double.MIN_VALUE,Double.MAX_VALUE};for (int i=0;i < testArray.length;i++){for (int j=0;j < testArray.length;j++){if (i == j){Assert.assertEquals(MathUtils.hash(testArray[i]),MathUtils.hash(testArray[j]));Assert.assertEquals(MathUtils.hash(testArray[j]),MathUtils.hash(testArray[i]));}else {Assert.assertTrue(MathUtils.hash(testArray[i])!= MathUtils.hash(testArray[j]));Assert.assertTrue(MathUtils.hash(testArray[j])!= MathUtils.hash(testArray[i]));}}}}"
"org.apache.commons.math3.util.MathUtilsTest.testArrayHash",0,"@Test public void testArrayHash(){Assert.assertEquals(0,MathUtils.hash((double[])null));Assert.assertEquals(MathUtils.hash(new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}),MathUtils.hash(new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}));Assert.assertFalse(MathUtils.hash(new double[]{1d})== MathUtils.hash(new double[]{FastMath.nextAfter(1d,2d)}));Assert.assertFalse(MathUtils.hash(new double[]{1d})== MathUtils.hash(new double[]{1d,1d}));}"
"org.apache.commons.math3.util.MathUtilsTest.testPermutedArrayHash",0,"/** * Make sure that permuted arrays do not hash to the same value.*/@Test public void testPermutedArrayHash(){double[]original=new double[10];double[]permuted=new double[10];RandomDataImpl random=new RandomDataImpl();for (int i=0;i < 10;i++){final RealDistribution u=new UniformRealDistribution(i + 0.5,i + 0.75);original[i]=u.sample();}boolean isIdentity=true;do {int[]permutation=random.nextPermutation(10,10);for (int i=0;i < 10;i++){if (i != permutation[i]){isIdentity=false;}permuted[i]=original[permutation[i]];}}while (isIdentity);Assert.assertFalse(MathUtils.hash(original)== MathUtils.hash(permuted));}"
"org.apache.commons.math3.util.MathUtilsTest.testIndicatorByte",0,"@Test public void testIndicatorByte(){Assert.assertEquals((byte)1,MathUtils.copySign((byte)1,(byte)2));Assert.assertEquals((byte)1,MathUtils.copySign((byte)1,(byte)0));Assert.assertEquals((byte)(-1),MathUtils.copySign((byte)1,(byte)(-2)));}"
"org.apache.commons.math3.util.MathUtilsTest.testIndicatorInt",0,"@Test public void testIndicatorInt(){Assert.assertEquals(1,MathUtils.copySign(1,2));Assert.assertEquals(1,MathUtils.copySign(1,0));Assert.assertEquals((-1),MathUtils.copySign(1,-2));}"
"org.apache.commons.math3.util.MathUtilsTest.testIndicatorLong",0,"@Test public void testIndicatorLong(){Assert.assertEquals(1L,MathUtils.copySign(1L,2L));Assert.assertEquals(1L,MathUtils.copySign(1L,0L));Assert.assertEquals(-1L,MathUtils.copySign(1L,-2L));}"
"org.apache.commons.math3.util.MathUtilsTest.testIndicatorShort",0,"@Test public void testIndicatorShort(){Assert.assertEquals((short)1,MathUtils.copySign((short)1,(short)2));Assert.assertEquals((short)1,MathUtils.copySign((short)1,(short)0));Assert.assertEquals((short)(-1),MathUtils.copySign((short)1,(short)(-2)));}"
"org.apache.commons.math3.util.MathUtilsTest.testNormalizeAngle",0,"@Test public void testNormalizeAngle(){for (double a=-15.0;a <= 15.0;a+=0.1){for (double b=-15.0;b <= 15.0;b+=0.2){double c=MathUtils.normalizeAngle(a,b);Assert.assertTrue((b - FastMath.PI)<= c);Assert.assertTrue(c <= (b + FastMath.PI));double twoK=FastMath.rint((a - c)/ FastMath.PI);Assert.assertEquals(c,a - twoK * FastMath.PI,1.0e-14);}}}"
"org.apache.commons.math3.util.MathUtilsTest.testReduce",0,"@Test public void testReduce(){final double period=-12.222;final double offset=13;final double delta=1.5;double orig=offset + 122456789 * period + delta;double expected=delta;Assert.assertEquals(expected,MathUtils.reduce(orig,period,offset),1e-7);Assert.assertEquals(expected,MathUtils.reduce(orig,-period,offset),1e-7);orig=offset - 123356789 * period - delta;expected=Math.abs(period)- delta;Assert.assertEquals(expected,MathUtils.reduce(orig,period,offset),1e-6);Assert.assertEquals(expected,MathUtils.reduce(orig,-period,offset),1e-6);orig=offset - 123446789 * period + delta;expected=delta;Assert.assertEquals(expected,MathUtils.reduce(orig,period,offset),1e-6);Assert.assertEquals(expected,MathUtils.reduce(orig,-period,offset),1e-6);Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,Double.NaN,offset)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.NaN,period,offset)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,period,Double.NaN)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,period,Double.POSITIVE_INFINITY)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,period,offset)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,Double.POSITIVE_INFINITY,offset)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(orig,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,period,Double.POSITIVE_INFINITY)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,offset)));Assert.assertTrue(Double.isNaN(MathUtils.reduce(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY)));}"
"org.apache.commons.math3.util.MathUtilsTest.testReduceComparedWithNormalizeAngle",0,"@Test public void testReduceComparedWithNormalizeAngle(){final double tol=Math.ulp(1d);final double period=2 * Math.PI;for (double a=-15;a <= 15;a+=0.5){for (double center=-15;center <= 15;center+=1){final double nA=MathUtils.normalizeAngle(a,center);final double offset=center - Math.PI;final double r=MathUtils.reduce(a,period,offset);Assert.assertEquals(nA,r + offset,tol);}}}"
"org.apache.commons.math3.util.MathUtilsTest.testSignByte",0,"@Test public void testSignByte(){final byte one=(byte)1;Assert.assertEquals((byte)1,MathUtils.copySign(one,(byte)2));Assert.assertEquals((byte)(-1),MathUtils.copySign(one,(byte)(-2)));}"
"org.apache.commons.math3.util.MathUtilsTest.testSignInt",0,"@Test public void testSignInt(){final int one=1;Assert.assertEquals(1,MathUtils.copySign(one,2));Assert.assertEquals((-1),MathUtils.copySign(one,-2));}"
"org.apache.commons.math3.util.MathUtilsTest.testSignLong",0,"@Test public void testSignLong(){final long one=1L;Assert.assertEquals(1L,MathUtils.copySign(one,2L));Assert.assertEquals(-1L,MathUtils.copySign(one,-2L));}"
"org.apache.commons.math3.util.MathUtilsTest.testSignShort",0,"@Test public void testSignShort(){final short one=(short)1;Assert.assertEquals((short)1,MathUtils.copySign(one,(short)2));Assert.assertEquals((short)(-1),MathUtils.copySign(one,(short)(-2)));}"
"org.apache.commons.math3.util.MathUtilsTest.testCheckFinite",0,"@Test public void testCheckFinite(){try {MathUtils.checkFinite(Double.POSITIVE_INFINITY);Assert.fail(""an exception should have been thrown"");}catch(NotFiniteNumberException e){}try {MathUtils.checkFinite(Double.NEGATIVE_INFINITY);Assert.fail(""an exception should have been thrown"");}catch(NotFiniteNumberException e){}try {MathUtils.checkFinite(Double.NaN);Assert.fail(""an exception should have been thrown"");}catch(NotFiniteNumberException e){}try {MathUtils.checkFinite(new double[]{0,-1,Double.POSITIVE_INFINITY,-2,3});Assert.fail(""an exception should have been thrown"");}catch(NotFiniteNumberException e){}try {MathUtils.checkFinite(new double[]{1,Double.NEGATIVE_INFINITY,-2,3});Assert.fail(""an exception should have been thrown"");}catch(NotFiniteNumberException e){}try {MathUtils.checkFinite(new double[]{4,3,-1,Double.NaN,-2,1});Assert.fail(""an exception should have been thrown"");}catch(NotFiniteNumberException e){}}"
"org.apache.commons.math3.util.MathUtilsTest.testCheckNotNull1",0,"@Test public void testCheckNotNull1(){try {Object obj=null;MathUtils.checkNotNull(obj);}catch(NullArgumentException e){}}"
"org.apache.commons.math3.util.MathUtilsTest.testCheckNotNull2",0,"@Test public void testCheckNotNull2(){try {double[]array=null;MathUtils.checkNotNull(array,LocalizedFormats.INPUT_ARRAY);}catch(NullArgumentException e){}}"
"org.apache.commons.math3.util.MathUtilsTest.testCopySignByte",0,"@Test public void testCopySignByte(){byte a=MathUtils.copySign(Byte.MIN_VALUE,(byte)-1);Assert.assertEquals(Byte.MIN_VALUE,a);final byte minValuePlusOne=Byte.MIN_VALUE + (byte)1;a=MathUtils.copySign(minValuePlusOne,(byte)1);Assert.assertEquals(Byte.MAX_VALUE,a);a=MathUtils.copySign(Byte.MAX_VALUE,(byte)-1);Assert.assertEquals(minValuePlusOne,a);final byte one=1;byte val=-2;a=MathUtils.copySign(val,one);Assert.assertEquals(-val,a);final byte minusOne=-one;val=2;a=MathUtils.copySign(val,minusOne);Assert.assertEquals(-val,a);val=0;a=MathUtils.copySign(val,minusOne);Assert.assertEquals(val,a);val=0;a=MathUtils.copySign(val,one);Assert.assertEquals(val,a);}"
"org.apache.commons.math3.util.MathUtilsTest.testCopySignByte2",0,"@Test(expected=MathArithmeticException.class)public void testCopySignByte2(){MathUtils.copySign(Byte.MIN_VALUE,(byte)1);}"
"org.apache.commons.math3.stat.descriptive.summary.SumSqTest.testSpecialValues",0,"@Test public void testSpecialValues(){SumOfSquares sumSq=new SumOfSquares();Assert.assertEquals(0,sumSq.getResult(),0);sumSq.increment(2d);Assert.assertEquals(4d,sumSq.getResult(),0);sumSq.increment(Double.POSITIVE_INFINITY);Assert.assertEquals(Double.POSITIVE_INFINITY,sumSq.getResult(),0);sumSq.increment(Double.NEGATIVE_INFINITY);Assert.assertEquals(Double.POSITIVE_INFINITY,sumSq.getResult(),0);sumSq.increment(Double.NaN);Assert.assertTrue(Double.isNaN(sumSq.getResult()));sumSq.increment(1);Assert.assertTrue(Double.isNaN(sumSq.getResult()));}"
"org.apache.commons.math3.genetics.NPointCrossoverTest.testCrossoverDimensionMismatchException",0,"@Test(expected=DimensionMismatchException.class)public void testCrossoverDimensionMismatchException(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final Integer[]p2=new Integer[]{0,1,1,0,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final BinaryChromosome p2c=new DummyBinaryChromosome(p2);final CrossoverPolicy cp=new NPointCrossover<Integer>(1);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.NPointCrossoverTest.testNumberIsTooLargeException",0,"@Test(expected=NumberIsTooLargeException.class)public void testNumberIsTooLargeException(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final Integer[]p2=new Integer[]{0,1,1,0,1,0,1,1,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final BinaryChromosome p2c=new DummyBinaryChromosome(p2);final CrossoverPolicy cp=new NPointCrossover<Integer>(15);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.NPointCrossoverTest.testCrossoverInvalidFixedLengthChromosomeFirst",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeFirst(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final Chromosome p2c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new NPointCrossover<Integer>(1);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.NPointCrossoverTest.testCrossoverInvalidFixedLengthChromosomeSecond",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeSecond(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p2c=new DummyBinaryChromosome(p1);final Chromosome p1c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new NPointCrossover<Integer>(1);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.NPointCrossoverTest.testCrossover",0,"@Test public void testCrossover(){Integer[]p1=new Integer[]{1,0,1,0,1,0,1,0,1};Integer[]p2=new Integer[]{0,1,0,1,0,1,0,1,0};BinaryChromosome p1c=new DummyBinaryChromosome(p1);BinaryChromosome p2c=new DummyBinaryChromosome(p2);final int order=3;NPointCrossover<Integer> npc=new NPointCrossover<Integer>(order);for (int i=0;i < 20;i++){ChromosomePair pair=npc.crossover(p1c,p2c);Integer[]c1=new Integer[p1.length];Integer[]c2=new Integer[p2.length];c1=((BinaryChromosome)pair.getFirst()).getRepresentation().toArray(c1);c2=((BinaryChromosome)pair.getSecond()).getRepresentation().toArray(c2);Assert.assertEquals(order,detectCrossoverPoints(p1c,p2c,(BinaryChromosome)pair.getFirst()));Assert.assertEquals(order,detectCrossoverPoints(p2c,p1c,(BinaryChromosome)pair.getSecond()));}}"
"org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimpleUnivariateValueChecker(1e-1,1e-2,0);}"
"org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimpleUnivariateValueChecker checker=new SimpleUnivariateValueChecker(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optim.univariate.SimpleUnivariateValueCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimpleUnivariateValueChecker checker=new SimpleUnivariateValueChecker(1e-8,1e-8);final UnivariatePointValuePair a=new UnivariatePointValuePair(1d,1d);final UnivariatePointValuePair b=new UnivariatePointValuePair(10d,10d);Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.analysis.integration.gauss.HermiteTest.testNormalDistribution",0,"@Test public void testNormalDistribution(){final double oneOverSqrtPi=1 / FastMath.sqrt(Math.PI);final double mu=12345.6789;final double sigma=987.654321;final int numPoints=1;final UnivariateFunction f=new UnivariateFunction(){public double value(double y){return oneOverSqrtPi;}};final GaussIntegrator integrator=factory.hermite(numPoints);final double result=integrator.integrate(f);final double expected=1;Assert.assertEquals(expected,result,Math.ulp(expected));}"
"org.apache.commons.math3.analysis.integration.gauss.HermiteTest.testNormalMean",0,"@Test public void testNormalMean(){final double sqrtTwo=FastMath.sqrt(2);final double oneOverSqrtPi=1 / FastMath.sqrt(Math.PI);final double mu=12345.6789;final double sigma=987.654321;final int numPoints=5;final UnivariateFunction f=new UnivariateFunction(){public double value(double y){return oneOverSqrtPi * (sqrtTwo * sigma * y + mu);}};final GaussIntegrator integrator=factory.hermite(numPoints);final double result=integrator.integrate(f);final double expected=mu;Assert.assertEquals(expected,result,Math.ulp(expected));}"
"org.apache.commons.math3.analysis.integration.gauss.HermiteTest.testNormalVariance",0,"@Test public void testNormalVariance(){final double twoOverSqrtPi=2 / FastMath.sqrt(Math.PI);final double mu=12345.6789;final double sigma=987.654321;final double sigma2=sigma * sigma;final int numPoints=5;final UnivariateFunction f=new UnivariateFunction(){public double value(double y){return twoOverSqrtPi * sigma2 * y* y;}};final GaussIntegrator integrator=factory.hermite(numPoints);final double result=integrator.integrate(f);final double expected=sigma2;Assert.assertEquals(expected,result,10 * Math.ulp(expected));}"
"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregation",0,"/** * Tests the standard aggregation behavior*/@Test public void testAggregation(){AggregateSummaryStatistics aggregate=new AggregateSummaryStatistics();SummaryStatistics setOneStats=aggregate.createContributingStatistics();SummaryStatistics setTwoStats=aggregate.createContributingStatistics();Assert.assertNotNull(""The set one contributing stats are null"",setOneStats);Assert.assertNotNull(""The set two contributing stats are null"",setTwoStats);Assert.assertNotSame(""Contributing stats objects are the same"",setOneStats,setTwoStats);setOneStats.addValue(2);setOneStats.addValue(3);setOneStats.addValue(5);setOneStats.addValue(7);setOneStats.addValue(11);Assert.assertEquals(""Wrong number of set one values"",5,setOneStats.getN());Assert.assertTrue(""Wrong sum of set one values"",Precision.equals(28.0,setOneStats.getSum(),1));setTwoStats.addValue(2);setTwoStats.addValue(4);setTwoStats.addValue(8);Assert.assertEquals(""Wrong number of set two values"",3,setTwoStats.getN());Assert.assertTrue(""Wrong sum of set two values"",Precision.equals(14.0,setTwoStats.getSum(),1));Assert.assertEquals(""Wrong number of aggregate values"",8,aggregate.getN());Assert.assertTrue(""Wrong aggregate sum"",Precision.equals(42.0,aggregate.getSum(),1));}"
"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregationConsistency",0,"/** * Verify that aggregating over a partition gives the same results as direct computation. 1)Randomly generate a dataset of 10-100 values from [-100,100]2)Divide the dataset it into 2-5 partitions 3)Create an AggregateSummaryStatistic and ContributingStatistics for each partition 4)Compare results from the AggregateSummaryStatistic with values returned by a single SummaryStatistics instance that is provided the full dataset*/@Test public void testAggregationConsistency(){double[]totalSample=generateSample();double[][]subSamples=generatePartition(totalSample);int nSamples=subSamples.length;AggregateSummaryStatistics aggregate=new AggregateSummaryStatistics();SummaryStatistics totalStats=new SummaryStatistics();SummaryStatistics componentStats[]=new SummaryStatistics[nSamples];for (int i=0;i < nSamples;i++){componentStats[i]=aggregate.createContributingStatistics();for (int j=0;j < subSamples[i].length;j++){componentStats[i].addValue(subSamples[i][j]);}}for (int i=0;i < totalSample.length;i++){totalStats.addValue(totalSample[i]);}Assert.assertEquals(totalStats.getSummary(),aggregate.getSummary());}"
"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregate",0,"/** * Test aggregate function by randomly generating a dataset of 10-100 values from [-100,100],dividing it into 2-5 partitions,computing stats for each partition and comparing the result of aggregate(...)applied to the collection of per-partition SummaryStatistics with a single SummaryStatistics computed over the full sample.*/@Test public void testAggregate(){double[]totalSample=generateSample();double[][]subSamples=generatePartition(totalSample);int nSamples=subSamples.length;SummaryStatistics totalStats=new SummaryStatistics();for (int i=0;i < totalSample.length;i++){totalStats.addValue(totalSample[i]);}SummaryStatistics[]subSampleStats=new SummaryStatistics[nSamples];for (int i=0;i < nSamples;i++){subSampleStats[i]=new SummaryStatistics();}Collection<SummaryStatistics> aggregate=new ArrayList<SummaryStatistics>();for (int i=0;i < nSamples;i++){for (int j=0;j < subSamples[i].length;j++){subSampleStats[i].addValue(subSamples[i][j]);}aggregate.add(subSampleStats[i]);}StatisticalSummary aggregatedStats=AggregateSummaryStatistics.aggregate(aggregate);assertEquals(totalStats.getSummary(),aggregatedStats,10E-12);}"
"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregateDegenerate",0,"@Test public void testAggregateDegenerate(){double[]totalSample={1,2,3,4,5};double[][]subSamples={{1},{2},{3},{4},{5}};SummaryStatistics totalStats=new SummaryStatistics();for (int i=0;i < totalSample.length;i++){totalStats.addValue(totalSample[i]);}SummaryStatistics[]subSampleStats=new SummaryStatistics[5];for (int i=0;i < 5;i++){subSampleStats[i]=new SummaryStatistics();}Collection<SummaryStatistics> aggregate=new ArrayList<SummaryStatistics>();for (int i=0;i < 5;i++){for (int j=0;j < subSamples[i].length;j++){subSampleStats[i].addValue(subSamples[i][j]);}aggregate.add(subSampleStats[i]);}StatisticalSummaryValues aggregatedStats=AggregateSummaryStatistics.aggregate(aggregate);assertEquals(totalStats.getSummary(),aggregatedStats,10E-12);}"
"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatisticsTest.testAggregateSpecialValues",0,"@Test public void testAggregateSpecialValues(){double[]totalSample={Double.POSITIVE_INFINITY,2,3,Double.NaN,5};double[][]subSamples={{Double.POSITIVE_INFINITY,2},{3},{Double.NaN},{5}};SummaryStatistics totalStats=new SummaryStatistics();for (int i=0;i < totalSample.length;i++){totalStats.addValue(totalSample[i]);}SummaryStatistics[]subSampleStats=new SummaryStatistics[5];for (int i=0;i < 4;i++){subSampleStats[i]=new SummaryStatistics();}Collection<SummaryStatistics> aggregate=new ArrayList<SummaryStatistics>();for (int i=0;i < 4;i++){for (int j=0;j < subSamples[i].length;j++){subSampleStats[i].addValue(subSamples[i][j]);}aggregate.add(subSampleStats[i]);}StatisticalSummaryValues aggregatedStats=AggregateSummaryStatistics.aggregate(aggregate);assertEquals(totalStats.getSummary(),aggregatedStats,10E-12);}"
"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest.testMissingMaxEval",0,"@Test(expected=MathIllegalStateException.class)public void testMissingMaxEval(){UnivariateOptimizer underlying=new BrentOptimizer(1e-10,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(44428400075l);MultiStartUnivariateOptimizer optimizer=new MultiStartUnivariateOptimizer(underlying,10,g);optimizer.optimize(new UnivariateObjectiveFunction(new Sin()),GoalType.MINIMIZE,new SearchInterval(-1,1));}"
"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest.testMissingSearchInterval",0,"@Test(expected=MathIllegalStateException.class)public void testMissingSearchInterval(){UnivariateOptimizer underlying=new BrentOptimizer(1e-10,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(44428400075l);MultiStartUnivariateOptimizer optimizer=new MultiStartUnivariateOptimizer(underlying,10,g);optimizer.optimize(new MaxEval(300),new UnivariateObjectiveFunction(new Sin()),GoalType.MINIMIZE);}"
"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest.testSinMin",0,"@Test public void testSinMin(){UnivariateFunction f=new Sin();UnivariateOptimizer underlying=new BrentOptimizer(1e-10,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(44428400075l);MultiStartUnivariateOptimizer optimizer=new MultiStartUnivariateOptimizer(underlying,10,g);optimizer.optimize(new MaxEval(300),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(-100.0,100.0));UnivariatePointValuePair[]optima=optimizer.getOptima();for (int i=1;i < optima.length;++i){double d=(optima[i].getPoint()- optima[i - 1].getPoint())/ (2 * FastMath.PI);Assert.assertTrue(FastMath.abs(d - FastMath.rint(d))< 1.0e-8);Assert.assertEquals(-1.0,f.value(optima[i].getPoint()),1.0e-10);Assert.assertEquals(f.value(optima[i].getPoint()),optima[i].getValue(),1.0e-10);}Assert.assertTrue(optimizer.getEvaluations()> 200);Assert.assertTrue(optimizer.getEvaluations()< 300);}"
"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest.testQuinticMin",0,"@Test public void testQuinticMin(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer underlying=new BrentOptimizer(1e-9,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(4312000053L);MultiStartUnivariateOptimizer optimizer=new MultiStartUnivariateOptimizer(underlying,5,g);UnivariatePointValuePair optimum=optimizer.optimize(new MaxEval(300),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(-0.3,-0.2));Assert.assertEquals(-0.27195613,optimum.getPoint(),1e-9);Assert.assertEquals(-0.0443342695,optimum.getValue(),1e-9);UnivariatePointValuePair[]optima=optimizer.getOptima();for (int i=0;i < optima.length;++i){Assert.assertEquals(f.value(optima[i].getPoint()),optima[i].getValue(),1e-9);}Assert.assertTrue(optimizer.getEvaluations()>= 50);Assert.assertTrue(optimizer.getEvaluations()<= 100);}"
"org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizerTest.testBadFunction",0,"@Test public void testBadFunction(){UnivariateFunction f=new UnivariateFunction(){public double value(double x){if (x < 0){throw new LocalException();}return 0;}};UnivariateOptimizer underlying=new BrentOptimizer(1e-9,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(4312000053L);MultiStartUnivariateOptimizer optimizer=new MultiStartUnivariateOptimizer(underlying,5,g);try {optimizer.optimize(new MaxEval(300),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(-0.3,-0.2));Assert.fail();}catch(LocalException e){}Assert.assertTrue(optimizer.getOptima()[0]== null);}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testInsufficientOrder1",0,"@Test(expected=NumberIsTooSmallException.class)public void testInsufficientOrder1(){new BracketingNthOrderBrentSolver(1.0e-10,1);}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testInsufficientOrder2",0,"@Test(expected=NumberIsTooSmallException.class)public void testInsufficientOrder2(){new BracketingNthOrderBrentSolver(1.0e-10,1.0e-10,1);}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testInsufficientOrder3",0,"@Test(expected=NumberIsTooSmallException.class)public void testInsufficientOrder3(){new BracketingNthOrderBrentSolver(1.0e-10,1.0e-10,1.0e-10,1);}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testConstructorsOK",0,"@Test public void testConstructorsOK(){Assert.assertEquals(2,new BracketingNthOrderBrentSolver(1.0e-10,2).getMaximalOrder());Assert.assertEquals(2,new BracketingNthOrderBrentSolver(1.0e-10,1.0e-10,2).getMaximalOrder());Assert.assertEquals(2,new BracketingNthOrderBrentSolver(1.0e-10,1.0e-10,1.0e-10,2).getMaximalOrder());}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testConvergenceOnFunctionAccuracy",0,"@Test public void testConvergenceOnFunctionAccuracy(){BracketingNthOrderBrentSolver solver=new BracketingNthOrderBrentSolver(1.0e-12,1.0e-10,0.001,3);QuinticFunction f=new QuinticFunction();double result=solver.solve(20,f,0.2,0.9,0.4,AllowedSolution.BELOW_SIDE);Assert.assertEquals(0,f.value(result),solver.getFunctionValueAccuracy());Assert.assertTrue(f.value(result)<= 0);Assert.assertTrue(result - 0.5 > solver.getAbsoluteAccuracy());result=solver.solve(20,f,-0.9,-0.2,-0.4,AllowedSolution.ABOVE_SIDE);Assert.assertEquals(0,f.value(result),solver.getFunctionValueAccuracy());Assert.assertTrue(f.value(result)>= 0);Assert.assertTrue(result + 0.5 < -solver.getAbsoluteAccuracy());}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testIssue716",0,"@Test public void testIssue716(){BracketingNthOrderBrentSolver solver=new BracketingNthOrderBrentSolver(1.0e-12,1.0e-10,1.0e-22,5);UnivariateFunction sharpTurn=new UnivariateFunction(){public double value(double x){return (2 * x + 1)/ (1.0e9 * (x + 1));}};double result=solver.solve(100,sharpTurn,-0.9999999,30,15,AllowedSolution.RIGHT_SIDE);Assert.assertEquals(0,sharpTurn.value(result),solver.getFunctionValueAccuracy());Assert.assertTrue(sharpTurn.value(result)>= 0);Assert.assertEquals(-0.5,result,1.0e-10);}"
"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolverTest.testFasterThanNewton",0,"@Test public void testFasterThanNewton(){compare(new TestFunction(0.0,-2,2){@Override public DerivativeStructure value(DerivativeStructure x){return x.sin().subtract(x.multiply(0.5));}});compare(new TestFunction(6.3087771299726890947,-5,10){@Override public DerivativeStructure value(DerivativeStructure x){return x.pow(5).add(x).subtract(10000);}});compare(new TestFunction(9.6335955628326951924,0.001,10){@Override public DerivativeStructure value(DerivativeStructure x){return x.sqrt().subtract(x.reciprocal()).subtract(3);}});compare(new TestFunction(2.8424389537844470678,-5,5){@Override public DerivativeStructure value(DerivativeStructure x){return x.exp().add(x).subtract(20);}});compare(new TestFunction(8.3094326942315717953,0.001,10){@Override public DerivativeStructure value(DerivativeStructure x){return x.log().add(x.sqrt()).subtract(5);}});compare(new TestFunction(1.4655712318767680266,-0.5,1.5){@Override public DerivativeStructure value(DerivativeStructure x){return x.subtract(1).multiply(x).multiply(x).subtract(1);}});}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMin",0,"@Test public void testSinMin(){UnivariateFunction f=new Sin();UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14);Assert.assertEquals(3 * Math.PI / 2,optimizer.optimize(200,f,GoalType.MINIMIZE,4,5).getPoint(),1e-8);Assert.assertTrue(optimizer.getEvaluations()<= 50);Assert.assertEquals(200,optimizer.getMaxEvaluations());Assert.assertEquals(3 * Math.PI / 2,optimizer.optimize(200,f,GoalType.MINIMIZE,1,5).getPoint(),1e-8);Assert.assertTrue(optimizer.getEvaluations()<= 100);Assert.assertTrue(optimizer.getEvaluations()>= 15);try {optimizer.optimize(10,f,GoalType.MINIMIZE,4,5);Assert.fail(""an exception should have been thrown"");}catch(TooManyEvaluationsException fee){}}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testSinMinWithValueChecker",0,"@Test public void testSinMinWithValueChecker(){final UnivariateFunction f=new Sin();final ConvergenceChecker<UnivariatePointValuePair> checker=new SimpleUnivariateValueChecker(1e-5,1e-14);final UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14,checker);final UnivariatePointValuePair result=optimizer.optimize(200,f,GoalType.MINIMIZE,4,5);Assert.assertEquals(3 * Math.PI / 2,result.getPoint(),1e-3);}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testBoundaries",0,"@Test public void testBoundaries(){final double lower=-1.0;final double upper=+1.0;UnivariateFunction f=new UnivariateFunction(){public double value(double x){if (x < lower){throw new NumberIsTooSmallException(x,lower,true);}else       if (x > upper){throw new NumberIsTooLargeException(x,upper,true);}else {return x;}}};UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14);Assert.assertEquals(lower,optimizer.optimize(100,f,GoalType.MINIMIZE,lower,upper).getPoint(),1.0e-8);Assert.assertEquals(upper,optimizer.optimize(100,f,GoalType.MAXIMIZE,lower,upper).getPoint(),1.0e-8);}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMin",0,"@Test public void testQuinticMin(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14);Assert.assertEquals(-0.27195613,optimizer.optimize(200,f,GoalType.MINIMIZE,-0.3,-0.2).getPoint(),1.0e-8);Assert.assertEquals(0.82221643,optimizer.optimize(200,f,GoalType.MINIMIZE,0.3,0.9).getPoint(),1.0e-8);Assert.assertTrue(optimizer.getEvaluations()<= 50);Assert.assertEquals(-0.27195613,optimizer.optimize(200,f,GoalType.MINIMIZE,-1.0,0.2).getPoint(),1.0e-8);Assert.assertTrue(optimizer.getEvaluations()<= 50);}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMinStatistics",0,"@Test public void testQuinticMinStatistics(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer optimizer=new BrentOptimizer(1e-11,1e-14);final DescriptiveStatistics[]stat=new DescriptiveStatistics[2];for (int i=0;i < stat.length;i++){stat[i]=new DescriptiveStatistics();}final double min=-0.75;final double max=0.25;final int nSamples=200;final double delta=(max - min)/ nSamples;for (int i=0;i < nSamples;i++){final double start=min + i * delta;stat[0].addValue(optimizer.optimize(40,f,GoalType.MINIMIZE,min,max,start).getPoint());stat[1].addValue(optimizer.getEvaluations());}final double meanOptValue=stat[0].getMean();final double medianEval=stat[1].getPercentile(50);Assert.assertTrue(meanOptValue > -0.2719561281);Assert.assertTrue(meanOptValue < -0.2719561280);Assert.assertEquals(23,(int)medianEval);}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testQuinticMax",0,"@Test public void testQuinticMax(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer optimizer=new BrentOptimizer(1e-12,1e-14);Assert.assertEquals(0.27195613,optimizer.optimize(100,f,GoalType.MAXIMIZE,0.2,0.3).getPoint(),1e-8);try {optimizer.optimize(5,f,GoalType.MAXIMIZE,0.2,0.3);Assert.fail(""an exception should have been thrown"");}catch(TooManyEvaluationsException miee){}}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMinEndpoints",0,"@Test public void testMinEndpoints(){UnivariateFunction f=new Sin();UnivariateOptimizer optimizer=new BrentOptimizer(1e-8,1e-14);double result=optimizer.optimize(50,f,GoalType.MINIMIZE,3 * Math.PI / 2,5).getPoint();Assert.assertEquals(3 * Math.PI / 2,result,1e-6);result=optimizer.optimize(50,f,GoalType.MINIMIZE,4,3 * Math.PI / 2).getPoint();Assert.assertEquals(3 * Math.PI / 2,result,1e-6);}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath832",0,"@Test public void testMath832(){final UnivariateFunction f=new UnivariateFunction(){public double value(double x){final double sqrtX=FastMath.sqrt(x);final double a=1e2 * sqrtX;final double b=1e6 / x;final double c=1e4 / sqrtX;return a + b + c;}};UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-8);final double result=optimizer.optimize(1483,f,GoalType.MINIMIZE,Double.MIN_VALUE,Double.MAX_VALUE).getPoint();Assert.assertEquals(804.9355825,result,1e-6);}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testKeepInitIfBest",0,"/** * Contrived example showing that prior to the resolution of MATH-855 (second revision),the algorithm would not return the best point if it happened to be the initial guess.*/@Test public void testKeepInitIfBest(){final double minSin=3 * Math.PI / 2;final double offset=1e-8;final double delta=1e-7;final UnivariateFunction f1=new Sin();final UnivariateFunction f2=new StepFunction(new double[]{minSin,minSin + offset,minSin + 2 * offset},new double[]{0,-1,0});final UnivariateFunction f=FunctionUtils.add(f1,f2);final double relTol=1e-8;final UnivariateOptimizer optimizer=new BrentOptimizer(relTol,1e-100);final double init=minSin + 1.5 * offset;final UnivariatePointValuePair result=optimizer.optimize(200,f,GoalType.MINIMIZE,minSin - 6.789 * delta,minSin + 9.876 * delta,init);final int numEval=optimizer.getEvaluations();final double sol=result.getPoint();final double expected=init;Assert.assertTrue(""Best point not reported"",f.value(sol)<= f.value(expected));}"
"org.apache.commons.math3.optimization.univariate.BrentOptimizerTest.testMath855",0,"/** * Contrived example showing that prior to the resolution of MATH-855,the algorithm,by always returning the last evaluated point,would sometimes not report the best point it had found.*/@Test public void testMath855(){final double minSin=3 * Math.PI / 2;final double offset=1e-8;final double delta=1e-7;final UnivariateFunction f1=new Sin();final UnivariateFunction f2=new StepFunction(new double[]{minSin,minSin + offset,minSin + 5 * offset},new double[]{0,-1,0});final UnivariateFunction f=FunctionUtils.add(f1,f2);final UnivariateOptimizer optimizer=new BrentOptimizer(1e-8,1e-100);final UnivariatePointValuePair result=optimizer.optimize(200,f,GoalType.MINIMIZE,minSin - 6.789 * delta,minSin + 9.876 * delta);final int numEval=optimizer.getEvaluations();final double sol=result.getPoint();final double expected=4.712389027602411;Assert.assertTrue(""Best point not reported"",f.value(sol)<= f.value(expected));}"
"org.apache.commons.math3.util.TransformerMapTest.testPutTransformer",0,"/** */@Test public void testPutTransformer(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertEquals(expected,map.getTransformer(TransformerMapTest.class));}"
"org.apache.commons.math3.util.TransformerMapTest.testContainsClass",0,"/** */@Test public void testContainsClass(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertTrue(map.containsClass(TransformerMapTest.class));}"
"org.apache.commons.math3.util.TransformerMapTest.testContainsTransformer",0,"/** */@Test public void testContainsTransformer(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertTrue(map.containsTransformer(expected));}"
"org.apache.commons.math3.util.TransformerMapTest.testRemoveTransformer",0,"/** */@Test public void testRemoveTransformer(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertTrue(map.containsClass(TransformerMapTest.class));Assert.assertTrue(map.containsTransformer(expected));map.removeTransformer(TransformerMapTest.class);Assert.assertFalse(map.containsClass(TransformerMapTest.class));Assert.assertFalse(map.containsTransformer(expected));}"
"org.apache.commons.math3.util.TransformerMapTest.testClear",0,"/** */@Test public void testClear(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertTrue(map.containsClass(TransformerMapTest.class));map.clear();Assert.assertFalse(map.containsClass(TransformerMapTest.class));}"
"org.apache.commons.math3.util.TransformerMapTest.testClasses",0,"/** */@Test public void testClasses(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertTrue(map.classes().contains(TransformerMapTest.class));}"
"org.apache.commons.math3.util.TransformerMapTest.testTransformers",0,"/** */@Test public void testTransformers(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertTrue(map.transformers().contains(expected));}"
"org.apache.commons.math3.util.TransformerMapTest.testSerial",0,"@Test public void testSerial(){NumberTransformer expected=new DefaultTransformer();TransformerMap map=new TransformerMap();map.putTransformer(TransformerMapTest.class,expected);Assert.assertEquals(map,TestUtils.serializeAndRecover(map));}"
"org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.testDerivativesConsistency",0,"@Test public void testDerivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;GillIntegrator integ=new GillIntegrator(step);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.GillStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;GillIntegrator integ=new GillIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 880000);Assert.assertTrue(bos.size()< 900000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 0.003);}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testParameters",0,"@Test public void testParameters(){LevyDistribution d=makeDistribution();Assert.assertEquals(1.2,d.getLocation(),Precision.EPSILON);Assert.assertEquals(0.4,d.getScale(),Precision.EPSILON);}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testSupport",0,"@Test public void testSupport(){LevyDistribution d=makeDistribution();Assert.assertEquals(d.getLocation(),d.getSupportLowerBound(),Precision.EPSILON);Assert.assertTrue(Double.isInfinite(d.getSupportUpperBound()));Assert.assertTrue(d.isSupportConnected());}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.LevyDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testSumSinc",0,"@Test public void testSumSinc(){final MultivariateFunction func=new SumSincFunction(-1);int dim=2;final double[]minPoint=new double[dim];for (int i=0;i < dim;i++){minPoint[i]=0;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=minPoint[i];}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-9);for (int i=0;i < dim;i++){init[i]=minPoint[i]+ 3;}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-5);doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-9,1e-7);}"
"org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testQuadratic",0,"@Test public void testQuadratic(){final MultivariateFunction func=new MultivariateFunction(){public double value(double[]x){final double a=x[0]- 1;final double b=x[1]- 1;return a * a + b * b + 1;}};int dim=2;final double[]minPoint=new double[dim];for (int i=0;i < dim;i++){minPoint[i]=1;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=minPoint[i];}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-8);for (int i=0;i < dim;i++){init[i]=minPoint[i]- 20;}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-8);}"
"org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testMaximizeQuadratic",0,"@Test public void testMaximizeQuadratic(){final MultivariateFunction func=new MultivariateFunction(){public double value(double[]x){final double a=x[0]- 1;final double b=x[1]- 1;return -a * a - b * b + 1;}};int dim=2;final double[]maxPoint=new double[dim];for (int i=0;i < dim;i++){maxPoint[i]=1;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=maxPoint[i];}doTest(func,maxPoint,init,GoalType.MAXIMIZE,1e-9,1e-8);for (int i=0;i < dim;i++){init[i]=maxPoint[i]- 20;}doTest(func,maxPoint,init,GoalType.MAXIMIZE,1e-9,1e-8);}"
"org.apache.commons.math3.optimization.direct.PowellOptimizerTest.testRelativeToleranceOnScaledValues",0,"/** * Ensure that we do not increase the number of function evaluations when the function values are scaled up. Note that the tolerances parameters passed to the constructor must still hold sensible values because they are used to set the line search tolerances.*/@Test public void testRelativeToleranceOnScaledValues(){final MultivariateFunction func=new MultivariateFunction(){public double value(double[]x){final double a=x[0]- 1;final double b=x[1]- 1;return a * a * FastMath.sqrt(FastMath.abs(a))+ b * b + 1;}};int dim=2;final double[]minPoint=new double[dim];for (int i=0;i < dim;i++){minPoint[i]=1;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=minPoint[i]- 20;}final double relTol=1e-10;final int maxEval=1000;final MultivariateOptimizer optim=new PowellOptimizer(relTol,1e-100);final PointValuePair funcResult=optim.optimize(maxEval,func,GoalType.MINIMIZE,init);final double funcValue=func.value(funcResult.getPoint());final int funcEvaluations=optim.getEvaluations();final double scale=1e10;final MultivariateFunction funcScaled=new MultivariateFunction(){public double value(double[]x){return scale * func.value(x);}};final PointValuePair funcScaledResult=optim.optimize(maxEval,funcScaled,GoalType.MINIMIZE,init);final double funcScaledValue=funcScaled.value(funcScaledResult.getPoint());final int funcScaledEvaluations=optim.getEvaluations();Assert.assertEquals(1,funcScaledValue / (scale * funcValue),relTol);Assert.assertEquals(funcEvaluations,funcScaledEvaluations);}"
"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest.testLinearFunction2D",0,"/** * Test of interpolator for a plane. <p> y = 2 x<sub>1</sub> - 3 x<sub>2</sub> + 5*/@Test public void testLinearFunction2D(){MultivariateFunction f=new MultivariateFunction(){public double value(double[]x){if (x.length != 2){throw new IllegalArgumentException();}return 2 * x[0]- 3 * x[1]+ 5;}};MultivariateInterpolator interpolator=new MicrosphereInterpolator();final int n=9;final int dim=2;double[][]x=new double[n][dim];double[]y=new double[n];int index=0;for (int i=-1;i <= 1;i++){for (int j=-1;j <= 1;j++){x[index][0]=i;x[index][1]=j;y[index]=f.value(x[index]);++index;}}MultivariateFunction p=interpolator.interpolate(x,y);double[]c=new double[dim];double expected,result;c[0]=0;c[1]=0;expected=f.value(c);result=p.value(c);Assert.assertEquals(""On sample point"",expected,result,FastMath.ulp(1d));c[0]=0 + 1e-5;c[1]=1 - 1e-5;expected=f.value(c);result=p.value(c);Assert.assertEquals(""1e-5 away from sample point"",expected,result,1e-4);}"
"org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatorTest.testParaboloid2D",0,"/** * Test of interpolator for a quadratic function. <p> y = 2 x<sub>1</sub><sup>2</sup> - 3 x<sub>2</sub><sup>2</sup> + 4 x<sub>1</sub> x<sub>2</sub> - 5*/@Test public void testParaboloid2D(){MultivariateFunction f=new MultivariateFunction(){public double value(double[]x){if (x.length != 2){throw new IllegalArgumentException();}return 2 * x[0]* x[0]- 3 * x[1]* x[1]+ 4 * x[0]* x[1]- 5;}};MultivariateInterpolator interpolator=new MicrosphereInterpolator();final int n=121;final int dim=2;double[][]x=new double[n][dim];double[]y=new double[n];int index=0;for (int i=-10;i <= 10;i+=2){for (int j=-10;j <= 10;j+=2){x[index][0]=i;x[index][1]=j;y[index]=f.value(x[index]);++index;}}MultivariateFunction p=interpolator.interpolate(x,y);double[]c=new double[dim];double expected,result;c[0]=0;c[1]=0;expected=f.value(c);result=p.value(c);Assert.assertEquals(""On sample point"",expected,result,FastMath.ulp(1d));c[0]=2 + 1e-5;c[1]=2 - 1e-5;expected=f.value(c);result=p.value(c);Assert.assertEquals(""1e-5 away from sample point"",expected,result,1e-3);}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.testPreconditions1",0,"@Test(expected=NumberIsTooSmallException.class)public void testPreconditions1(){HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());fitter.fit();}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.testNoError",0,"@Test public void testNoError(){final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 1.3;x+=0.01){fitter.addObservedPoint(1,x,f.value(x));}final double[]fitted=fitter.fit();Assert.assertEquals(a,fitted[0],1.0e-13);Assert.assertEquals(w,fitted[1],1.0e-13);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1e-13);HarmonicOscillator ff=new HarmonicOscillator(fitted[0],fitted[1],fitted[2]);for (double x=-1.0;x < 1.0;x+=0.01){Assert.assertTrue(FastMath.abs(f.value(x)- ff.value(x))< 1e-13);}}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.test1PercentError",0,"@Test public void test1PercentError(){Random randomizer=new Random(64925784252l);final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 10.0;x+=0.1){fitter.addObservedPoint(1,x,f.value(x)+ 0.01 * randomizer.nextGaussian());}final double[]fitted=fitter.fit();Assert.assertEquals(a,fitted[0],7.6e-4);Assert.assertEquals(w,fitted[1],2.7e-3);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1.3e-2);}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.testTinyVariationsData",0,"@Test public void testTinyVariationsData(){Random randomizer=new Random(64925784252l);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 10.0;x+=0.1){fitter.addObservedPoint(1,x,1e-7 * randomizer.nextGaussian());}fitter.fit();}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.testInitialGuess",0,"@Test public void testInitialGuess(){Random randomizer=new Random(45314242l);final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());for (double x=0.0;x < 10.0;x+=0.1){fitter.addObservedPoint(1,x,f.value(x)+ 0.01 * randomizer.nextGaussian());}final double[]fitted=fitter.fit(new double[]{0.15,3.6,4.5});Assert.assertEquals(a,fitted[0],1.2e-3);Assert.assertEquals(w,fitted[1],3.3e-3);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1.7e-2);}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.testUnsorted",0,"@Test public void testUnsorted(){Random randomizer=new Random(64925784252l);final double a=0.2;final double w=3.4;final double p=4.1;HarmonicOscillator f=new HarmonicOscillator(a,w,p);HarmonicFitter fitter=new HarmonicFitter(new LevenbergMarquardtOptimizer());int size=100;double[]xTab=new double[size];double[]yTab=new double[size];for (int i=0;i < size;++i){xTab[i]=0.1 * i;yTab[i]=f.value(xTab[i])+ 0.01 * randomizer.nextGaussian();}for (int i=0;i < size;++i){int i1=randomizer.nextInt(size);int i2=randomizer.nextInt(size);double xTmp=xTab[i1];double yTmp=yTab[i1];xTab[i1]=xTab[i2];yTab[i1]=yTab[i2];xTab[i2]=xTmp;yTab[i2]=yTmp;}for (int i=0;i < size;++i){fitter.addObservedPoint(1,xTab[i],yTab[i]);}final double[]fitted=fitter.fit();Assert.assertEquals(a,fitted[0],7.6e-4);Assert.assertEquals(w,fitted[1],3.5e-3);Assert.assertEquals(p,MathUtils.normalizeAngle(fitted[2],p),1.5e-2);}"
"org.apache.commons.math3.fitting.HarmonicFitterTest.testMath844",0,"@Test(expected=MathIllegalStateException.class)public void testMath844(){final double[]y={0,1,2,3,2,1,0,-1,-2,-3,-2,-1,0,1,2,3,2,1,0,-1,-2,-3,-2,-1,0,1,2,3,2,1,0};final int len=y.length;final WeightedObservedPoint[]points=new WeightedObservedPoint[len];for (int i=0;i < len;i++){points[i]=new WeightedObservedPoint(1,i,y[i]);}new HarmonicFitter.ParameterGuesser(points);}"
"org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest.testArrayIsReference",0,"@Test public void testArrayIsReference(){int[]array={-3,-2,-1,0,1};Assert.assertTrue(array == new EuclideanIntegerPoint(array).getPoint());}"
"org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest.testDistance",0,"@Test public void testDistance(){EuclideanIntegerPoint e1=new EuclideanIntegerPoint(new int[]{-3,-2,-1,0,1});EuclideanIntegerPoint e2=new EuclideanIntegerPoint(new int[]{1,0,-1,1,1});Assert.assertEquals(FastMath.sqrt(21.0),e1.distanceFrom(e2),1.0e-15);Assert.assertEquals(0.0,e1.distanceFrom(e1),1.0e-15);Assert.assertEquals(0.0,e2.distanceFrom(e2),1.0e-15);}"
"org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest.testCentroid",0,"@Test public void testCentroid(){List<EuclideanIntegerPoint> list=new ArrayList<EuclideanIntegerPoint>();list.add(new EuclideanIntegerPoint(new int[]{1,3}));list.add(new EuclideanIntegerPoint(new int[]{2,2}));list.add(new EuclideanIntegerPoint(new int[]{3,3}));list.add(new EuclideanIntegerPoint(new int[]{2,4}));EuclideanIntegerPoint c=list.get(0).centroidOf(list);Assert.assertEquals(2,c.getPoint()[0]);Assert.assertEquals(3,c.getPoint()[1]);}"
"org.apache.commons.math3.stat.clustering.EuclideanIntegerPointTest.testSerial",0,"@Test public void testSerial(){EuclideanIntegerPoint p=new EuclideanIntegerPoint(new int[]{-3,-2,-1,0,1});Assert.assertEquals(p,TestUtils.serializeAndRecover(p));}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testQuantiles",0,"@Test public void testQuantiles(){setDensityTestValues(new double[]{0.0385649760808,0.172836231799,0.284958771715,0.172836231799,0.0385649760808,0.00316560600853,9.55930184035e-05,1.06194251052e-06});verifyQuantiles();verifyDensities();setDistribution(new NormalDistribution(0,1));setDensityTestValues(new double[]{0.0539909665132,0.241970724519,0.398942280401,0.241970724519,0.0539909665132,0.00443184841194,0.000133830225765,1.48671951473e-06});verifyQuantiles();verifyDensities();setDistribution(new NormalDistribution(0,0.1));setDensityTestValues(new double[]{0.539909665132,2.41970724519,3.98942280401,2.41970724519,0.539909665132,0.0443184841194,0.00133830225765,1.48671951473e-05});verifyQuantiles();verifyDensities();}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testGetMean",0,"@Test public void testGetMean(){NormalDistribution distribution=(NormalDistribution)getDistribution();Assert.assertEquals(2.1,distribution.getMean(),0);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testGetStandardDeviation",0,"@Test public void testGetStandardDeviation(){NormalDistribution distribution=(NormalDistribution)getDistribution();Assert.assertEquals(1.4,distribution.getStandardDeviation(),0);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testPreconditions",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions(){new NormalDistribution(1,0);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testDensity",0,"@Test public void testDensity(){double[]x=new double[]{-2,-1,0,1,2};checkDensity(0,1,x,new double[]{0.05399096651,0.24197072452,0.39894228040,0.24197072452,0.05399096651});checkDensity(1.1,1,x,new double[]{0.003266819056,0.043983595980,0.217852177033,0.396952547477,0.266085249899});}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testExtremeValues",0,"/** * Check to make sure top-coding of extreme values works correctly. Verifies fixes for JIRA MATH-167,MATH-414*/@Test public void testExtremeValues(){NormalDistribution distribution=new NormalDistribution(0,1);for (int i=0;i < 100;i++){double lowerTail=distribution.cumulativeProbability(-i);double upperTail=distribution.cumulativeProbability(i);if (i < 9){Assert.assertTrue(lowerTail > 0.0d);Assert.assertTrue(upperTail < 1.0d);}else {Assert.assertTrue(lowerTail < 0.00001);Assert.assertTrue(upperTail > 0.99999);}}Assert.assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE),1,0);Assert.assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE),0,0);Assert.assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY),1,0);Assert.assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY),0,0);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testMath280",0,"@Test public void testMath280(){NormalDistribution normal=new NormalDistribution(0,1);double result=normal.inverseCumulativeProbability(0.9986501019683698);Assert.assertEquals(3.0,result,defaultTolerance);result=normal.inverseCumulativeProbability(0.841344746068543);Assert.assertEquals(1.0,result,defaultTolerance);result=normal.inverseCumulativeProbability(0.9999683287581673);Assert.assertEquals(4.0,result,defaultTolerance);result=normal.inverseCumulativeProbability(0.9772498680518209);Assert.assertEquals(2.0,result,defaultTolerance);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;NormalDistribution dist;dist=new NormalDistribution(0,1);Assert.assertEquals(dist.getNumericalMean(),0,tol);Assert.assertEquals(dist.getNumericalVariance(),1,tol);dist=new NormalDistribution(2.2,1.4);Assert.assertEquals(dist.getNumericalMean(),2.2,tol);Assert.assertEquals(dist.getNumericalVariance(),1.4 * 1.4,tol);dist=new NormalDistribution(-2000.9,10.4);Assert.assertEquals(dist.getNumericalMean(),-2000.9,tol);Assert.assertEquals(dist.getNumericalVariance(),10.4 * 10.4,tol);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.NormalDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.genetics.ChromosomeTest.testCompareTo",0,"@Test public void testCompareTo(){Chromosome c1=new Chromosome(){public double fitness(){return 0;}};Chromosome c2=new Chromosome(){public double fitness(){return 10;}};Chromosome c3=new Chromosome(){public double fitness(){return 10;}};Assert.assertTrue(c1.compareTo(c2)< 0);Assert.assertTrue(c2.compareTo(c1)> 0);Assert.assertEquals(0,c3.compareTo(c2));Assert.assertEquals(0,c2.compareTo(c3));}"
"org.apache.commons.math3.genetics.ChromosomeTest.testFindSameChromosome",0,"@Test public void testFindSameChromosome(){Chromosome c1=new DummyChromosome(1){public double fitness(){return 1;}};Chromosome c2=new DummyChromosome(2){public double fitness(){return 2;}};Chromosome c3=new DummyChromosome(3){public double fitness(){return 3;}};Chromosome c4=new DummyChromosome(1){public double fitness(){return 5;}};Chromosome c5=new DummyChromosome(15){public double fitness(){return 15;}};List<Chromosome> popChr=new ArrayList<Chromosome>();popChr.add(c1);popChr.add(c2);popChr.add(c3);Population pop=new ListPopulation(popChr,3){public Population nextGeneration(){return null;}};Assert.assertNull(c5.findSameChromosome(pop));Assert.assertEquals(c1,c4.findSameChromosome(pop));c4.searchForFitnessUpdate(pop);Assert.assertEquals(1,c4.getFitness(),0);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest.testStartSimplexInsideRange",0,"@Test public void testStartSimplexInsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(2.0,2.5,1.0,3.0,2.0,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{1.0,0.5}));final PointValuePair optimum=optimizer.optimize(300,wrapped,GoalType.MINIMIZE,new double[]{1.5,2.25});Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest.testStartSimplexOutsideRange",0,"@Test public void testStartSimplexOutsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(2.0,2.5,1.0,3.0,2.0,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{1.0,0.5}));final PointValuePair optimum=optimizer.optimize(300,wrapped,GoalType.MINIMIZE,new double[]{-1.5,4.0});Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest.testOptimumOutsideRange",0,"@Test public void testOptimumOutsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,1.0,3.0,2.0,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(new SimplePointChecker<PointValuePair>(1.0e-11,1.0e-20));optimizer.setSimplex(new NelderMeadSimplex(new double[]{1.0,0.5}));final PointValuePair optimum=optimizer.optimize(600,wrapped,GoalType.MINIMIZE,new double[]{-1.5,4.0});Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest.testUnbounded",0,"@Test public void testUnbounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{1.0,0.5}));final PointValuePair optimum=optimizer.optimize(300,wrapped,GoalType.MINIMIZE,new double[]{-1.5,4.0});Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapterTest.testHalfBounded",0,"@Test public void testHalfBounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,4.0,1.0,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(new SimplePointChecker<PointValuePair>(1.0e-10,1.0e-20));optimizer.setSimplex(new NelderMeadSimplex(new double[]{1.0,0.5}));final PointValuePair optimum=optimizer.optimize(400,wrapped,GoalType.MINIMIZE,new double[]{-1.5,4.0});Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testParameterAccessors",0,"@Test public void testParameterAccessors(){GammaDistribution distribution=(GammaDistribution)getDistribution();Assert.assertEquals(4d,distribution.getAlpha(),0);Assert.assertEquals(2d,distribution.getBeta(),0);}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testPreconditions",0,"@Test public void testPreconditions(){try {new GammaDistribution(0,1);Assert.fail(""Expecting NotStrictlyPositiveException for alpha = 0"");}catch(NotStrictlyPositiveException ex){}try {new GammaDistribution(1,0);Assert.fail(""Expecting NotStrictlyPositiveException for alpha = 0"");}catch(NotStrictlyPositiveException ex){}}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testProbabilities",0,"@Test public void testProbabilities(){testProbability(-1.000,4.0,2.0,.0000);testProbability(15.501,4.0,2.0,.9499);testProbability(0.504,4.0,1.0,.0018);testProbability(10.011,1.0,2.0,.9933);testProbability(5.000,2.0,2.0,.7127);}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testValues",0,"@Test public void testValues(){testValue(15.501,4.0,2.0,.9499);testValue(0.504,4.0,1.0,.0018);testValue(10.011,1.0,2.0,.9933);testValue(5.000,2.0,2.0,.7127);}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testDensity",0,"@Test public void testDensity(){double[]x=new double[]{-0.1,1e-6,0.5,1,2,5};checkDensity(1,1,x,new double[]{0.000000000000,0.999999000001,0.606530659713,0.367879441171,0.135335283237,0.006737946999});checkDensity(2,1,x,new double[]{0.000000000000,0.000000999999,0.303265329856,0.367879441171,0.270670566473,0.033689734995});checkDensity(4,1,x,new double[]{0.000000000e+00,1.666665000e-19,1.263605541e-02,6.131324020e-02,1.804470443e-01,1.403738958e-01});checkDensity(4,10,x,new double[]{0.000000000e+00,1.666650000e-15,1.403738958e+00,7.566654960e-02,2.748204830e-05,4.018228850e-17});checkDensity(0.1,10,x,new double[]{0.000000000e+00,3.323953832e+04,1.663849010e-03,6.007786726e-06,1.461647647e-10,5.996008322e-24});checkDensity(0.1,20,x,new double[]{0.000000000e+00,3.562489883e+04,1.201557345e-05,2.923295295e-10,3.228910843e-19,1.239484589e-45});checkDensity(0.1,4,x,new double[]{0.000000000e+00,3.032938388e+04,3.049322494e-02,2.211502311e-03,2.170613371e-05,5.846590589e-11});checkDensity(0.1,1,x,new double[]{0.000000000e+00,2.640334143e+04,1.189704437e-01,3.866916944e-02,7.623306235e-03,1.663849010e-04});}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;GammaDistribution dist;dist=new GammaDistribution(1,2);Assert.assertEquals(dist.getNumericalMean(),2,tol);Assert.assertEquals(dist.getNumericalVariance(),4,tol);dist=new GammaDistribution(1.1,4.2);Assert.assertEquals(dist.getNumericalMean(),1.1d * 4.2d,tol);Assert.assertEquals(dist.getNumericalVariance(),1.1d * 4.2d * 4.2d,tol);}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape1",0,"@Test public void testMath753Shape1()throws IOException {doTestMath753(1.0,1.5,0.5,0.0,0.0,""gamma-distribution-shape-1.csv"");}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape8",0,"@Test public void testMath753Shape8()throws IOException {doTestMath753(8.0,1.5,1.0,0.0,0.0,""gamma-distribution-shape-8.csv"");}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape10",0,"@Test public void testMath753Shape10()throws IOException {doTestMath753(10.0,1.0,1.0,0.0,0.0,""gamma-distribution-shape-10.csv"");}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape100",0,"@Test public void testMath753Shape100()throws IOException {doTestMath753(100.0,1.5,1.0,0.0,0.0,""gamma-distribution-shape-100.csv"");}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape142",0,"@Test public void testMath753Shape142()throws IOException {doTestMath753(142.0,0.5,1.5,40.0,40.0,""gamma-distribution-shape-142.csv"");}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testMath753Shape1000",0,"@Test public void testMath753Shape1000()throws IOException {doTestMath753(1000.0,1.0,1.0,160.0,220.0,""gamma-distribution-shape-1000.csv"");}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.GammaDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.fraction.BigFractionTest.testConstructor",0,"@Test public void testConstructor(){assertFraction(0,1,new BigFraction(0,1));assertFraction(0,1,new BigFraction(0l,2l));assertFraction(0,1,new BigFraction(0,-1));assertFraction(1,2,new BigFraction(1,2));assertFraction(1,2,new BigFraction(2,4));assertFraction(-1,2,new BigFraction(-1,2));assertFraction(-1,2,new BigFraction(1,-2));assertFraction(-1,2,new BigFraction(-2,4));assertFraction(-1,2,new BigFraction(2,-4));assertFraction(11,1,new BigFraction(11));assertFraction(11,1,new BigFraction(11l));assertFraction(11,1,new BigFraction(new BigInteger(""11"")));assertFraction(0,1,new BigFraction(0.00000000000001,1.0e-5,100));assertFraction(2,5,new BigFraction(0.40000000000001,1.0e-5,100));assertFraction(15,1,new BigFraction(15.0000000000001,1.0e-5,100));Assert.assertEquals(0.00000000000001,new BigFraction(0.00000000000001).doubleValue(),0.0);Assert.assertEquals(0.40000000000001,new BigFraction(0.40000000000001).doubleValue(),0.0);Assert.assertEquals(15.0000000000001,new BigFraction(15.0000000000001).doubleValue(),0.0);assertFraction(3602879701896487l,9007199254740992l,new BigFraction(0.40000000000001));assertFraction(1055531162664967l,70368744177664l,new BigFraction(15.0000000000001));try {new BigFraction(null,BigInteger.ONE);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException npe){}try {new BigFraction(BigInteger.ONE,null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException npe){}try {new BigFraction(BigInteger.ONE,BigInteger.ZERO);Assert.fail(""Expecting ZeroException"");}catch(ZeroException npe){}try {new BigFraction(2.0 * Integer.MAX_VALUE,1.0e-5,100000);Assert.fail(""Expecting FractionConversionException"");}catch(FractionConversionException fce){}}"
"org.apache.commons.math3.fraction.BigFractionTest.testGoldenRatio",0,"@Test(expected=ConvergenceException.class)public void testGoldenRatio(){new BigFraction((1 + FastMath.sqrt(5))/ 2,1.0e-12,25);}"
"org.apache.commons.math3.fraction.BigFractionTest.testDoubleConstructor",0,"@Test public void testDoubleConstructor()throws ConvergenceException {assertFraction(1,2,new BigFraction((double)1 / (double)2,1.0e-5,100));assertFraction(1,3,new BigFraction((double)1 / (double)3,1.0e-5,100));assertFraction(2,3,new BigFraction((double)2 / (double)3,1.0e-5,100));assertFraction(1,4,new BigFraction((double)1 / (double)4,1.0e-5,100));assertFraction(3,4,new BigFraction((double)3 / (double)4,1.0e-5,100));assertFraction(1,5,new BigFraction((double)1 / (double)5,1.0e-5,100));assertFraction(2,5,new BigFraction((double)2 / (double)5,1.0e-5,100));assertFraction(3,5,new BigFraction((double)3 / (double)5,1.0e-5,100));assertFraction(4,5,new BigFraction((double)4 / (double)5,1.0e-5,100));assertFraction(1,6,new BigFraction((double)1 / (double)6,1.0e-5,100));assertFraction(5,6,new BigFraction((double)5 / (double)6,1.0e-5,100));assertFraction(1,7,new BigFraction((double)1 / (double)7,1.0e-5,100));assertFraction(2,7,new BigFraction((double)2 / (double)7,1.0e-5,100));assertFraction(3,7,new BigFraction((double)3 / (double)7,1.0e-5,100));assertFraction(4,7,new BigFraction((double)4 / (double)7,1.0e-5,100));assertFraction(5,7,new BigFraction((double)5 / (double)7,1.0e-5,100));assertFraction(6,7,new BigFraction((double)6 / (double)7,1.0e-5,100));assertFraction(1,8,new BigFraction((double)1 / (double)8,1.0e-5,100));assertFraction(3,8,new BigFraction((double)3 / (double)8,1.0e-5,100));assertFraction(5,8,new BigFraction((double)5 / (double)8,1.0e-5,100));assertFraction(7,8,new BigFraction((double)7 / (double)8,1.0e-5,100));assertFraction(1,9,new BigFraction((double)1 / (double)9,1.0e-5,100));assertFraction(2,9,new BigFraction((double)2 / (double)9,1.0e-5,100));assertFraction(4,9,new BigFraction((double)4 / (double)9,1.0e-5,100));assertFraction(5,9,new BigFraction((double)5 / (double)9,1.0e-5,100));assertFraction(7,9,new BigFraction((double)7 / (double)9,1.0e-5,100));assertFraction(8,9,new BigFraction((double)8 / (double)9,1.0e-5,100));assertFraction(1,10,new BigFraction((double)1 / (double)10,1.0e-5,100));assertFraction(3,10,new BigFraction((double)3 / (double)10,1.0e-5,100));assertFraction(7,10,new BigFraction((double)7 / (double)10,1.0e-5,100));assertFraction(9,10,new BigFraction((double)9 / (double)10,1.0e-5,100));assertFraction(1,11,new BigFraction((double)1 / (double)11,1.0e-5,100));assertFraction(2,11,new BigFraction((double)2 / (double)11,1.0e-5,100));assertFraction(3,11,new BigFraction((double)3 / (double)11,1.0e-5,100));assertFraction(4,11,new BigFraction((double)4 / (double)11,1.0e-5,100));assertFraction(5,11,new BigFraction((double)5 / (double)11,1.0e-5,100));assertFraction(6,11,new BigFraction((double)6 / (double)11,1.0e-5,100));assertFraction(7,11,new BigFraction((double)7 / (double)11,1.0e-5,100));assertFraction(8,11,new BigFraction((double)8 / (double)11,1.0e-5,100));assertFraction(9,11,new BigFraction((double)9 / (double)11,1.0e-5,100));assertFraction(10,11,new BigFraction((double)10 / (double)11,1.0e-5,100));}"
"org.apache.commons.math3.fraction.BigFractionTest.testDigitLimitConstructor",0,"@Test public void testDigitLimitConstructor()throws ConvergenceException {assertFraction(2,5,new BigFraction(0.4,9));assertFraction(2,5,new BigFraction(0.4,99));assertFraction(2,5,new BigFraction(0.4,999));assertFraction(3,5,new BigFraction(0.6152,9));assertFraction(8,13,new BigFraction(0.6152,99));assertFraction(510,829,new BigFraction(0.6152,999));assertFraction(769,1250,new BigFraction(0.6152,9999));}"
"org.apache.commons.math3.fraction.BigFractionTest.testEpsilonLimitConstructor",0,"@Test public void testEpsilonLimitConstructor()throws ConvergenceException {assertFraction(2,5,new BigFraction(0.4,1.0e-5,100));assertFraction(3,5,new BigFraction(0.6152,0.02,100));assertFraction(8,13,new BigFraction(0.6152,1.0e-3,100));assertFraction(251,408,new BigFraction(0.6152,1.0e-4,100));assertFraction(251,408,new BigFraction(0.6152,1.0e-5,100));assertFraction(510,829,new BigFraction(0.6152,1.0e-6,100));assertFraction(769,1250,new BigFraction(0.6152,1.0e-7,100));}"
"org.apache.commons.math3.fraction.BigFractionTest.testCompareTo",0,"@Test public void testCompareTo(){BigFraction first=new BigFraction(1,2);BigFraction second=new BigFraction(1,3);BigFraction third=new BigFraction(1,2);Assert.assertEquals(0,first.compareTo(first));Assert.assertEquals(0,first.compareTo(third));Assert.assertEquals(1,first.compareTo(second));Assert.assertEquals(-1,second.compareTo(first));BigFraction pi1=new BigFraction(1068966896,340262731);BigFraction pi2=new BigFraction(411557987,131002976);Assert.assertEquals(-1,pi1.compareTo(pi2));Assert.assertEquals(1,pi2.compareTo(pi1));Assert.assertEquals(0.0,pi1.doubleValue()- pi2.doubleValue(),1.0e-20);}"
"org.apache.commons.math3.fraction.BigFractionTest.testDoubleValue",0,"@Test public void testDoubleValue(){BigFraction first=new BigFraction(1,2);BigFraction second=new BigFraction(1,3);Assert.assertEquals(0.5,first.doubleValue(),0.0);Assert.assertEquals(1.0 / 3.0,second.doubleValue(),0.0);}"
"org.apache.commons.math3.fraction.BigFractionTest.testDoubleValueForLargeNumeratorAndDenominator",0,"@Test public void testDoubleValueForLargeNumeratorAndDenominator(){final BigInteger pow400=BigInteger.TEN.pow(400);final BigInteger pow401=BigInteger.TEN.pow(401);final BigInteger two=new BigInteger(""2"");final BigFraction large=new BigFraction(pow401.add(BigInteger.ONE),pow400.multiply(two));Assert.assertEquals(5,large.doubleValue(),1e-15);}"
"org.apache.commons.math3.fraction.BigFractionTest.testFloatValueForLargeNumeratorAndDenominator",0,"@Test public void testFloatValueForLargeNumeratorAndDenominator(){final BigInteger pow400=BigInteger.TEN.pow(400);final BigInteger pow401=BigInteger.TEN.pow(401);final BigInteger two=new BigInteger(""2"");final BigFraction large=new BigFraction(pow401.add(BigInteger.ONE),pow400.multiply(two));Assert.assertEquals(5,large.floatValue(),1e-15);}"
"org.apache.commons.math3.fraction.BigFractionTest.testFloatValue",0,"@Test public void testFloatValue(){BigFraction first=new BigFraction(1,2);BigFraction second=new BigFraction(1,3);Assert.assertEquals(0.5f,first.floatValue(),0.0f);Assert.assertEquals((float)(1.0 / 3.0),second.floatValue(),0.0f);}"
"org.apache.commons.math3.fraction.BigFractionTest.testIntValue",0,"@Test public void testIntValue(){BigFraction first=new BigFraction(1,2);BigFraction second=new BigFraction(3,2);Assert.assertEquals(0,first.intValue());Assert.assertEquals(1,second.intValue());}"
"org.apache.commons.math3.fraction.BigFractionTest.testLongValue",0,"@Test public void testLongValue(){BigFraction first=new BigFraction(1,2);BigFraction second=new BigFraction(3,2);Assert.assertEquals(0L,first.longValue());Assert.assertEquals(1L,second.longValue());}"
"org.apache.commons.math3.fraction.BigFractionTest.testConstructorDouble",0,"@Test public void testConstructorDouble(){assertFraction(1,2,new BigFraction(0.5));assertFraction(6004799503160661l,18014398509481984l,new BigFraction(1.0 / 3.0));assertFraction(6124895493223875l,36028797018963968l,new BigFraction(17.0 / 100.0));assertFraction(1784551352345559l,562949953421312l,new BigFraction(317.0 / 100.0));assertFraction(-1,2,new BigFraction(-0.5));assertFraction(-6004799503160661l,18014398509481984l,new BigFraction(-1.0 / 3.0));assertFraction(-6124895493223875l,36028797018963968l,new BigFraction(17.0 / -100.0));assertFraction(-1784551352345559l,562949953421312l,new BigFraction(-317.0 / 100.0));for(double v : new double[]{Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY}){try {new BigFraction(v);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException iae){}}Assert.assertEquals(1l,new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());Assert.assertEquals(1l,new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong());Assert.assertEquals(1l,new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());}"
"org.apache.commons.math3.fraction.BigFractionTest.testAbs",0,"@Test public void testAbs(){BigFraction a=new BigFraction(10,21);BigFraction b=new BigFraction(-10,21);BigFraction c=new BigFraction(10,-21);assertFraction(10,21,a.abs());assertFraction(10,21,b.abs());assertFraction(10,21,c.abs());}"
"org.apache.commons.math3.fraction.BigFractionTest.testReciprocal",0,"@Test public void testReciprocal(){BigFraction f=null;f=new BigFraction(50,75);f=f.reciprocal();Assert.assertEquals(3,f.getNumeratorAsInt());Assert.assertEquals(2,f.getDenominatorAsInt());f=new BigFraction(4,3);f=f.reciprocal();Assert.assertEquals(3,f.getNumeratorAsInt());Assert.assertEquals(4,f.getDenominatorAsInt());f=new BigFraction(-15,47);f=f.reciprocal();Assert.assertEquals(-47,f.getNumeratorAsInt());Assert.assertEquals(15,f.getDenominatorAsInt());f=new BigFraction(0,3);try {f=f.reciprocal();Assert.fail(""expecting ZeroException"");}catch(ZeroException ex){}f=new BigFraction(Integer.MAX_VALUE,1);f=f.reciprocal();Assert.assertEquals(1,f.getNumeratorAsInt());Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());}"
"org.apache.commons.math3.fraction.BigFractionTest.testNegate",0,"@Test public void testNegate(){BigFraction f=null;f=new BigFraction(50,75);f=f.negate();Assert.assertEquals(-2,f.getNumeratorAsInt());Assert.assertEquals(3,f.getDenominatorAsInt());f=new BigFraction(-50,75);f=f.negate();Assert.assertEquals(2,f.getNumeratorAsInt());Assert.assertEquals(3,f.getDenominatorAsInt());f=new BigFraction(Integer.MAX_VALUE - 1,Integer.MAX_VALUE);f=f.negate();Assert.assertEquals(Integer.MIN_VALUE + 2,f.getNumeratorAsInt());Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());}"
"org.apache.commons.math3.fraction.BigFractionTest.testAdd",0,"@Test public void testAdd(){BigFraction a=new BigFraction(1,2);BigFraction b=new BigFraction(2,3);assertFraction(1,1,a.add(a));assertFraction(7,6,a.add(b));assertFraction(7,6,b.add(a));assertFraction(4,3,b.add(b));BigFraction f1=new BigFraction(Integer.MAX_VALUE - 1,1);BigFraction f2=BigFraction.ONE;BigFraction f=f1.add(f2);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f1=new BigFraction(-1,13 * 13 * 2* 2);f2=new BigFraction(-2,13 * 17 * 2);f=f1.add(f2);Assert.assertEquals(13 * 13 * 17* 2* 2,f.getDenominatorAsInt());Assert.assertEquals(-17 - 2 * 13 * 2,f.getNumeratorAsInt());try {f.add((BigFraction)null);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException ex){}f1=new BigFraction(1,32768 * 3);f2=new BigFraction(1,59049);f=f1.add(f2);Assert.assertEquals(52451,f.getNumeratorAsInt());Assert.assertEquals(1934917632,f.getDenominatorAsInt());f1=new BigFraction(Integer.MIN_VALUE,3);f2=new BigFraction(1,3);f=f1.add(f2);Assert.assertEquals(Integer.MIN_VALUE + 1,f.getNumeratorAsInt());Assert.assertEquals(3,f.getDenominatorAsInt());f1=new BigFraction(Integer.MAX_VALUE - 1,1);f=f1.add(BigInteger.ONE);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f=f.add(BigInteger.ZERO);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f1=new BigFraction(Integer.MAX_VALUE - 1,1);f=f1.add(1);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f=f.add(0);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f1=new BigFraction(Integer.MAX_VALUE - 1,1);f=f1.add(1l);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f=f.add(0l);Assert.assertEquals(Integer.MAX_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());}"
"org.apache.commons.math3.fraction.BigFractionTest.testDivide",0,"@Test public void testDivide(){BigFraction a=new BigFraction(1,2);BigFraction b=new BigFraction(2,3);assertFraction(1,1,a.divide(a));assertFraction(3,4,a.divide(b));assertFraction(4,3,b.divide(a));assertFraction(1,1,b.divide(b));BigFraction f1=new BigFraction(3,5);BigFraction f2=BigFraction.ZERO;try {f1.divide(f2);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f1=new BigFraction(0,5);f2=new BigFraction(2,7);BigFraction f=f1.divide(f2);Assert.assertSame(BigFraction.ZERO,f);f1=new BigFraction(2,7);f2=BigFraction.ONE;f=f1.divide(f2);Assert.assertEquals(2,f.getNumeratorAsInt());Assert.assertEquals(7,f.getDenominatorAsInt());f1=new BigFraction(1,Integer.MAX_VALUE);f=f1.divide(f1);Assert.assertEquals(1,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f2=new BigFraction(1,Integer.MAX_VALUE);f=f1.divide(f2);Assert.assertEquals(Integer.MIN_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());try {f.divide((BigFraction)null);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException ex){}f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f=f1.divide(BigInteger.valueOf(Integer.MIN_VALUE));Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());Assert.assertEquals(1,f.getNumeratorAsInt());f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f=f1.divide(Integer.MIN_VALUE);Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());Assert.assertEquals(1,f.getNumeratorAsInt());f1=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f=f1.divide((long)Integer.MIN_VALUE);Assert.assertEquals(Integer.MAX_VALUE,f.getDenominatorAsInt());Assert.assertEquals(1,f.getNumeratorAsInt());}"
"org.apache.commons.math3.fraction.BigFractionTest.testMultiply",0,"@Test public void testMultiply(){BigFraction a=new BigFraction(1,2);BigFraction b=new BigFraction(2,3);assertFraction(1,4,a.multiply(a));assertFraction(1,3,a.multiply(b));assertFraction(1,3,b.multiply(a));assertFraction(4,9,b.multiply(b));BigFraction f1=new BigFraction(Integer.MAX_VALUE,1);BigFraction f2=new BigFraction(Integer.MIN_VALUE,Integer.MAX_VALUE);BigFraction f=f1.multiply(f2);Assert.assertEquals(Integer.MIN_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f=f2.multiply(Integer.MAX_VALUE);Assert.assertEquals(Integer.MIN_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());f=f2.multiply((long)Integer.MAX_VALUE);Assert.assertEquals(Integer.MIN_VALUE,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());try {f.multiply((BigFraction)null);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.fraction.BigFractionTest.testSubtract",0,"@Test public void testSubtract(){BigFraction a=new BigFraction(1,2);BigFraction b=new BigFraction(2,3);assertFraction(0,1,a.subtract(a));assertFraction(-1,6,a.subtract(b));assertFraction(1,6,b.subtract(a));assertFraction(0,1,b.subtract(b));BigFraction f=new BigFraction(1,1);try {f.subtract((BigFraction)null);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException ex){}BigFraction f1=new BigFraction(1,32768 * 3);BigFraction f2=new BigFraction(1,59049);f=f1.subtract(f2);Assert.assertEquals(-13085,f.getNumeratorAsInt());Assert.assertEquals(1934917632,f.getDenominatorAsInt());f1=new BigFraction(Integer.MIN_VALUE,3);f2=new BigFraction(1,3).negate();f=f1.subtract(f2);Assert.assertEquals(Integer.MIN_VALUE + 1,f.getNumeratorAsInt());Assert.assertEquals(3,f.getDenominatorAsInt());f1=new BigFraction(Integer.MAX_VALUE,1);f2=BigFraction.ONE;f=f1.subtract(f2);Assert.assertEquals(Integer.MAX_VALUE - 1,f.getNumeratorAsInt());Assert.assertEquals(1,f.getDenominatorAsInt());}"
"org.apache.commons.math3.fraction.BigFractionTest.testBigDecimalValue",0,"@Test public void testBigDecimalValue(){Assert.assertEquals(new BigDecimal(0.5),new BigFraction(1,2).bigDecimalValue());Assert.assertEquals(new BigDecimal(""0.0003""),new BigFraction(3,10000).bigDecimalValue());Assert.assertEquals(new BigDecimal(""0""),new BigFraction(1,3).bigDecimalValue(BigDecimal.ROUND_DOWN));Assert.assertEquals(new BigDecimal(""0.333""),new BigFraction(1,3).bigDecimalValue(3,BigDecimal.ROUND_DOWN));}"
"org.apache.commons.math3.fraction.BigFractionTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){BigFraction zero=new BigFraction(0,1);BigFraction nullFraction=null;Assert.assertTrue(zero.equals(zero));Assert.assertFalse(zero.equals(nullFraction));Assert.assertFalse(zero.equals(Double.valueOf(0)));BigFraction zero2=new BigFraction(0,2);Assert.assertTrue(zero.equals(zero2));Assert.assertEquals(zero.hashCode(),zero2.hashCode());BigFraction one=new BigFraction(1,1);Assert.assertFalse((one.equals(zero)|| zero.equals(one)));Assert.assertTrue(one.equals(BigFraction.ONE));}"
"org.apache.commons.math3.fraction.BigFractionTest.testGetReducedFraction",0,"@Test public void testGetReducedFraction(){BigFraction threeFourths=new BigFraction(3,4);Assert.assertTrue(threeFourths.equals(BigFraction.getReducedFraction(6,8)));Assert.assertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0,-1)));try {BigFraction.getReducedFraction(1,0);Assert.fail(""expecting ZeroException"");}catch(ZeroException ex){}Assert.assertEquals(BigFraction.getReducedFraction(2,Integer.MIN_VALUE).getNumeratorAsInt(),-1);Assert.assertEquals(BigFraction.getReducedFraction(1,-1).getNumeratorAsInt(),-1);}"
"org.apache.commons.math3.fraction.BigFractionTest.testPercentage",0,"@Test public void testPercentage(){Assert.assertEquals(50.0,new BigFraction(1,2).percentageValue(),1.0e-15);}"
"org.apache.commons.math3.fraction.BigFractionTest.testPow",0,"@Test public void testPow(){Assert.assertEquals(new BigFraction(8192,1594323),new BigFraction(2,3).pow(13));Assert.assertEquals(new BigFraction(8192,1594323),new BigFraction(2,3).pow(13l));Assert.assertEquals(new BigFraction(8192,1594323),new BigFraction(2,3).pow(BigInteger.valueOf(13l)));Assert.assertEquals(BigFraction.ONE,new BigFraction(2,3).pow(0));Assert.assertEquals(BigFraction.ONE,new BigFraction(2,3).pow(0l));Assert.assertEquals(BigFraction.ONE,new BigFraction(2,3).pow(BigInteger.valueOf(0l)));Assert.assertEquals(new BigFraction(1594323,8192),new BigFraction(2,3).pow(-13));Assert.assertEquals(new BigFraction(1594323,8192),new BigFraction(2,3).pow(-13l));Assert.assertEquals(new BigFraction(1594323,8192),new BigFraction(2,3).pow(BigInteger.valueOf(-13l)));}"
"org.apache.commons.math3.fraction.BigFractionTest.testMath340",0,"@Test public void testMath340(){BigFraction fractionA=new BigFraction(0.00131);BigFraction fractionB=new BigFraction(.37).reciprocal();BigFraction errorResult=fractionA.multiply(fractionB);BigFraction correctResult=new BigFraction(fractionA.getNumerator().multiply(fractionB.getNumerator()),fractionA.getDenominator().multiply(fractionB.getDenominator()));Assert.assertEquals(correctResult,errorResult);}"
"org.apache.commons.math3.fraction.BigFractionTest.testSerial",0,"@Test public void testSerial()throws FractionConversionException {BigFraction[]fractions={new BigFraction(3,4),BigFraction.ONE,BigFraction.ZERO,new BigFraction(17),new BigFraction(FastMath.PI,1000),new BigFraction(-5,2)};for(BigFraction fraction : fractions){Assert.assertEquals(fraction,TestUtils.serializeAndRecover(fraction));}}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testSimplyConnected",0,"@Test public void testSimplyConnected(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(36.0,22.0),new Vector2D(39.0,32.0),new Vector2D(19.0,32.0),new Vector2D(6.0,16.0),new Vector2D(31.0,10.0),new Vector2D(42.0,16.0),new Vector2D(34.0,20.0),new Vector2D(29.0,19.0),new Vector2D(23.0,22.0),new Vector2D(33.0,25.0)}};PolygonsSet set=buildSet(vertices);Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector2D(50.0,30.0)));checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(30.0,15.0),new Vector2D(15.0,20.0),new Vector2D(24.0,25.0),new Vector2D(35.0,30.0),new Vector2D(19.0,17.0)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(50.0,30.0),new Vector2D(30.0,35.0),new Vector2D(10.0,25.0),new Vector2D(10.0,10.0),new Vector2D(40.0,10.0),new Vector2D(50.0,15.0),new Vector2D(30.0,22.0)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(30.0,32.0),new Vector2D(34.0,20.0)});checkVertices(set.getVertices(),vertices);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testStair",0,"@Test public void testStair(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(0.0,2.0),new Vector2D(-0.1,2.0),new Vector2D(-0.1,1.0),new Vector2D(-0.3,1.0),new Vector2D(-0.3,1.5),new Vector2D(-1.3,1.5),new Vector2D(-1.3,2.0),new Vector2D(-1.8,2.0),new Vector2D(-1.8 - 1.0 / FastMath.sqrt(2.0),2.0 - 1.0 / FastMath.sqrt(2.0))}};PolygonsSet set=buildSet(vertices);checkVertices(set.getVertices(),vertices);Assert.assertEquals(1.1 + 0.95 * FastMath.sqrt(2.0),set.getSize(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testHole",0,"@Test public void testHole(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(3.0,0.0),new Vector2D(3.0,3.0),new Vector2D(0.0,3.0)},new Vector2D[]{new Vector2D(1.0,2.0),new Vector2D(2.0,2.0),new Vector2D(2.0,1.0),new Vector2D(1.0,1.0)}};PolygonsSet set=buildSet(vertices);checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(0.5,0.5),new Vector2D(1.5,0.5),new Vector2D(2.5,0.5),new Vector2D(0.5,1.5),new Vector2D(2.5,1.5),new Vector2D(0.5,2.5),new Vector2D(1.5,2.5),new Vector2D(2.5,2.5),new Vector2D(0.5,1.0)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(1.5,1.5),new Vector2D(3.5,1.0),new Vector2D(4.0,1.5),new Vector2D(6.0,6.0)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(1.5,0.0),new Vector2D(1.5,1.0),new Vector2D(1.5,2.0),new Vector2D(1.5,3.0),new Vector2D(3.0,3.0)});checkVertices(set.getVertices(),vertices);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testDisjointPolygons",0,"@Test public void testDisjointPolygons(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,1.0),new Vector2D(2.0,1.0),new Vector2D(1.0,2.0)},new Vector2D[]{new Vector2D(4.0,0.0),new Vector2D(5.0,1.0),new Vector2D(3.0,1.0)}};PolygonsSet set=buildSet(vertices);Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new Vector2D(1.0,1.5)));checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(1.0,1.5),new Vector2D(4.5,0.8)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(1.0,0.0),new Vector2D(3.5,1.2),new Vector2D(2.5,1.0),new Vector2D(3.0,4.0)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(3.5,0.5),new Vector2D(0.0,1.0)});checkVertices(set.getVertices(),vertices);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testOppositeHyperplanes",0,"@Test public void testOppositeHyperplanes(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,0.0),new Vector2D(2.0,1.0),new Vector2D(3.0,1.0),new Vector2D(2.0,2.0),new Vector2D(1.0,1.0),new Vector2D(0.0,1.0)}};PolygonsSet set=buildSet(vertices);checkVertices(set.getVertices(),vertices);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testSingularPoint",0,"@Test public void testSingularPoint(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(1.0,0.0),new Vector2D(1.0,1.0),new Vector2D(0.0,1.0),new Vector2D(0.0,0.0),new Vector2D(-1.0,0.0),new Vector2D(-1.0,-1.0),new Vector2D(0.0,-1.0)}};PolygonsSet set=buildSet(vertices);checkVertices(set.getVertices(),vertices);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testLineIntersection",0,"@Test public void testLineIntersection(){Vector2D[][]vertices=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0),new Vector2D(1.0,2.0),new Vector2D(0.0,2.0)}};PolygonsSet set=buildSet(vertices);Line l1=new Line(new Vector2D(-1.5,0.0),FastMath.PI / 4);SubLine s1=(SubLine)set.intersection(l1.wholeHyperplane());List<Interval> i1=((IntervalsSet)s1.getRemainingRegion()).asList();Assert.assertEquals(2,i1.size());Interval v10=i1.get(0);Vector2D p10Lower=l1.toSpace(new Vector1D(v10.getInf()));Assert.assertEquals(0.0,p10Lower.getX(),1.0e-10);Assert.assertEquals(1.5,p10Lower.getY(),1.0e-10);Vector2D p10Upper=l1.toSpace(new Vector1D(v10.getSup()));Assert.assertEquals(0.5,p10Upper.getX(),1.0e-10);Assert.assertEquals(2.0,p10Upper.getY(),1.0e-10);Interval v11=i1.get(1);Vector2D p11Lower=l1.toSpace(new Vector1D(v11.getInf()));Assert.assertEquals(1.0,p11Lower.getX(),1.0e-10);Assert.assertEquals(2.5,p11Lower.getY(),1.0e-10);Vector2D p11Upper=l1.toSpace(new Vector1D(v11.getSup()));Assert.assertEquals(1.5,p11Upper.getX(),1.0e-10);Assert.assertEquals(3.0,p11Upper.getY(),1.0e-10);Line l2=new Line(new Vector2D(-1.0,2.0),0);SubLine s2=(SubLine)set.intersection(l2.wholeHyperplane());List<Interval> i2=((IntervalsSet)s2.getRemainingRegion()).asList();Assert.assertEquals(1,i2.size());Interval v20=i2.get(0);Vector2D p20Lower=l2.toSpace(new Vector1D(v20.getInf()));Assert.assertEquals(1.0,p20Lower.getX(),1.0e-10);Assert.assertEquals(2.0,p20Lower.getY(),1.0e-10);Vector2D p20Upper=l2.toSpace(new Vector1D(v20.getSup()));Assert.assertEquals(3.0,p20Upper.getX(),1.0e-10);Assert.assertEquals(2.0,p20Upper.getY(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testUnlimitedSubHyperplane",0,"@Test public void testUnlimitedSubHyperplane(){Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(4.0,0.0),new Vector2D(1.4,1.5),new Vector2D(0.0,3.5)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(1.4,0.2),new Vector2D(2.8,-1.2),new Vector2D(2.5,0.6)}};PolygonsSet set2=buildSet(vertices2);PolygonsSet set=(PolygonsSet)new RegionFactory<Euclidean2D>().union(set1.copySelf(),set2.copySelf());checkVertices(set1.getVertices(),vertices1);checkVertices(set2.getVertices(),vertices2);checkVertices(set.getVertices(),new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(1.6,0.0),new Vector2D(2.8,-1.2),new Vector2D(2.6,0.0),new Vector2D(4.0,0.0),new Vector2D(1.4,1.5),new Vector2D(0.0,3.5)}});}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testUnion",0,"@Test public void testUnion(){Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,2.0),new Vector2D(0.0,2.0)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0)}};PolygonsSet set2=buildSet(vertices2);PolygonsSet set=(PolygonsSet)new RegionFactory<Euclidean2D>().union(set1.copySelf(),set2.copySelf());checkVertices(set1.getVertices(),vertices1);checkVertices(set2.getVertices(),vertices2);checkVertices(set.getVertices(),new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0),new Vector2D(1.0,2.0),new Vector2D(0.0,2.0)}});checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(0.5,0.5),new Vector2D(2.0,2.0),new Vector2D(2.5,2.5),new Vector2D(0.5,1.5),new Vector2D(1.5,1.5),new Vector2D(1.5,0.5),new Vector2D(1.5,2.5),new Vector2D(2.5,1.5),new Vector2D(2.5,2.5)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(-0.5,0.5),new Vector2D(0.5,2.5),new Vector2D(2.5,0.5),new Vector2D(3.5,2.5)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(0.5,2.0),new Vector2D(2.0,0.5),new Vector2D(2.5,1.0),new Vector2D(3.0,2.5)});}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testIntersection",0,"@Test public void testIntersection(){Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,2.0),new Vector2D(0.0,2.0)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0)}};PolygonsSet set2=buildSet(vertices2);PolygonsSet set=(PolygonsSet)new RegionFactory<Euclidean2D>().intersection(set1.copySelf(),set2.copySelf());checkVertices(set1.getVertices(),vertices1);checkVertices(set2.getVertices(),vertices2);checkVertices(set.getVertices(),new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(2.0,1.0),new Vector2D(2.0,2.0),new Vector2D(1.0,2.0)}});checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(1.5,1.5)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(0.5,1.5),new Vector2D(2.5,1.5),new Vector2D(1.5,0.5),new Vector2D(0.5,0.5)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(2.0,2.0),new Vector2D(1.0,1.5),new Vector2D(1.5,2.0)});}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testXor",0,"@Test public void testXor(){Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,2.0),new Vector2D(0.0,2.0)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0)}};PolygonsSet set2=buildSet(vertices2);PolygonsSet set=(PolygonsSet)new RegionFactory<Euclidean2D>().xor(set1.copySelf(),set2.copySelf());checkVertices(set1.getVertices(),vertices1);checkVertices(set2.getVertices(),vertices2);checkVertices(set.getVertices(),new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0),new Vector2D(1.0,2.0),new Vector2D(0.0,2.0)},new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(1.0,2.0),new Vector2D(2.0,2.0),new Vector2D(2.0,1.0)}});checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(0.5,0.5),new Vector2D(2.5,2.5),new Vector2D(0.5,1.5),new Vector2D(1.5,0.5),new Vector2D(1.5,2.5),new Vector2D(2.5,1.5),new Vector2D(2.5,2.5)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(-0.5,0.5),new Vector2D(0.5,2.5),new Vector2D(2.5,0.5),new Vector2D(1.5,1.5),new Vector2D(3.5,2.5)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(2.0,2.0),new Vector2D(1.5,1.0),new Vector2D(2.0,1.5),new Vector2D(0.0,0.0),new Vector2D(0.5,2.0),new Vector2D(2.0,0.5),new Vector2D(2.5,1.0),new Vector2D(3.0,2.5)});}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testDifference",0,"@Test public void testDifference(){Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,2.0),new Vector2D(0.0,2.0)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(3.0,1.0),new Vector2D(3.0,3.0),new Vector2D(1.0,3.0)}};PolygonsSet set2=buildSet(vertices2);PolygonsSet set=(PolygonsSet)new RegionFactory<Euclidean2D>().difference(set1.copySelf(),set2.copySelf());checkVertices(set1.getVertices(),vertices1);checkVertices(set2.getVertices(),vertices2);checkVertices(set.getVertices(),new Vector2D[][]{new Vector2D[]{new Vector2D(0.0,0.0),new Vector2D(2.0,0.0),new Vector2D(2.0,1.0),new Vector2D(1.0,1.0),new Vector2D(1.0,2.0),new Vector2D(0.0,2.0)}});checkPoints(Region.Location.INSIDE,set,new Vector2D[]{new Vector2D(0.5,0.5),new Vector2D(0.5,1.5),new Vector2D(1.5,0.5)});checkPoints(Region.Location.OUTSIDE,set,new Vector2D[]{new Vector2D(2.5,2.5),new Vector2D(-0.5,0.5),new Vector2D(0.5,2.5),new Vector2D(2.5,0.5),new Vector2D(1.5,1.5),new Vector2D(3.5,2.5),new Vector2D(1.5,2.5),new Vector2D(2.5,1.5),new Vector2D(2.0,1.5),new Vector2D(2.0,2.0),new Vector2D(2.5,1.0),new Vector2D(2.5,2.5),new Vector2D(3.0,2.5)});checkPoints(Region.Location.BOUNDARY,set,new Vector2D[]{new Vector2D(1.0,1.0),new Vector2D(1.5,1.0),new Vector2D(0.0,0.0),new Vector2D(0.5,2.0),new Vector2D(2.0,0.5)});}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testEmptyDifference",0,"@Test public void testEmptyDifference(){Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.5,3.5),new Vector2D(0.5,4.5),new Vector2D(-0.5,4.5),new Vector2D(-0.5,3.5)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(1.0,2.0),new Vector2D(1.0,8.0),new Vector2D(-1.0,8.0),new Vector2D(-1.0,2.0)}};PolygonsSet set2=buildSet(vertices2);Assert.assertTrue(new RegionFactory<Euclidean2D>().difference(set1.copySelf(),set2.copySelf()).isEmpty());}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testChoppedHexagon",0,"@Test public void testChoppedHexagon(){double pi6=FastMath.PI / 6.0;double sqrt3=FastMath.sqrt(3.0);SubLine[]hyp={new Line(new Vector2D(0.0,1.0),5 * pi6).wholeHyperplane(),new Line(new Vector2D(-sqrt3,1.0),7 * pi6).wholeHyperplane(),new Line(new Vector2D(-sqrt3,1.0),9 * pi6).wholeHyperplane(),new Line(new Vector2D(-sqrt3,0.0),11 * pi6).wholeHyperplane(),new Line(new Vector2D(0.0,0.0),13 * pi6).wholeHyperplane(),new Line(new Vector2D(0.0,1.0),3 * pi6).wholeHyperplane(),new Line(new Vector2D(-5.0 * sqrt3 / 6.0,0.0),9 * pi6).wholeHyperplane()};hyp[1]=(SubLine)hyp[1].split(hyp[0].getHyperplane()).getMinus();hyp[2]=(SubLine)hyp[2].split(hyp[1].getHyperplane()).getMinus();hyp[3]=(SubLine)hyp[3].split(hyp[2].getHyperplane()).getMinus();hyp[4]=(SubLine)hyp[4].split(hyp[3].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();hyp[5]=(SubLine)hyp[5].split(hyp[4].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();hyp[6]=(SubLine)hyp[6].split(hyp[3].getHyperplane()).getMinus().split(hyp[1].getHyperplane()).getMinus();BSPTree<Euclidean2D> tree=new BSPTree<Euclidean2D>(Boolean.TRUE);for (int i=hyp.length - 1;i >= 0;--i){tree=new BSPTree<Euclidean2D>(hyp[i],new BSPTree<Euclidean2D>(Boolean.FALSE),tree,null);}PolygonsSet set=new PolygonsSet(tree);SubLine splitter=new Line(new Vector2D(-2.0 * sqrt3 / 3.0,0.0),9 * pi6).wholeHyperplane();PolygonsSet slice=new PolygonsSet(new BSPTree<Euclidean2D>(splitter,set.getTree(false).split(splitter).getPlus(),new BSPTree<Euclidean2D>(Boolean.FALSE),null));Assert.assertEquals(Region.Location.OUTSIDE,slice.checkPoint(new Vector2D(0.1,0.5)));Assert.assertEquals(11.0 / 3.0,slice.getBoundarySize(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testConcentric",0,"@Test public void testConcentric(){double h=FastMath.sqrt(3.0)/ 2.0;Vector2D[][]vertices1=new Vector2D[][]{new Vector2D[]{new Vector2D(0.00,0.1 * h),new Vector2D(0.05,0.1 * h),new Vector2D(0.10,0.2 * h),new Vector2D(0.05,0.3 * h),new Vector2D(-0.05,0.3 * h),new Vector2D(-0.10,0.2 * h),new Vector2D(-0.05,0.1 * h)}};PolygonsSet set1=buildSet(vertices1);Vector2D[][]vertices2=new Vector2D[][]{new Vector2D[]{new Vector2D(0.00,0.0 * h),new Vector2D(0.10,0.0 * h),new Vector2D(0.20,0.2 * h),new Vector2D(0.10,0.4 * h),new Vector2D(-0.10,0.4 * h),new Vector2D(-0.20,0.2 * h),new Vector2D(-0.10,0.0 * h)}};PolygonsSet set2=buildSet(vertices2);Assert.assertTrue(set2.contains(set1));}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testBug20040520",0,"@Test public void testBug20040520(){BSPTree<Euclidean2D> a0=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85,-0.05),new Vector2D(0.90,-0.10)),new BSPTree<Euclidean2D>(Boolean.FALSE),new BSPTree<Euclidean2D>(Boolean.TRUE),null);BSPTree<Euclidean2D> a1=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85,-0.10),new Vector2D(0.90,-0.10)),new BSPTree<Euclidean2D>(Boolean.FALSE),a0,null);BSPTree<Euclidean2D> a2=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.90,-0.05),new Vector2D(0.85,-0.05)),new BSPTree<Euclidean2D>(Boolean.FALSE),a1,null);BSPTree<Euclidean2D> a3=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.82,-0.05),new Vector2D(0.82,-0.08)),new BSPTree<Euclidean2D>(Boolean.FALSE),new BSPTree<Euclidean2D>(Boolean.TRUE),null);BSPTree<Euclidean2D> a4=new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85,-0.05),new Vector2D(0.80,-0.05),false),new BSPTree<Euclidean2D>(Boolean.FALSE),a3,null);BSPTree<Euclidean2D> a5=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.82,-0.08),new Vector2D(0.82,-0.18)),new BSPTree<Euclidean2D>(Boolean.FALSE),new BSPTree<Euclidean2D>(Boolean.TRUE),null);BSPTree<Euclidean2D> a6=new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.82,-0.18),new Vector2D(0.85,-0.15),true),new BSPTree<Euclidean2D>(Boolean.FALSE),a5,null);BSPTree<Euclidean2D> a7=new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85,-0.05),new Vector2D(0.82,-0.08),false),a4,a6,null);BSPTree<Euclidean2D> a8=new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.85,-0.25),new Vector2D(0.85,0.05)),a2,a7,null);BSPTree<Euclidean2D> a9=new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.90,0.05),new Vector2D(0.90,-0.50)),a8,new BSPTree<Euclidean2D>(Boolean.FALSE),null);BSPTree<Euclidean2D> b0=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.92,-0.12),new Vector2D(0.92,-0.08)),new BSPTree<Euclidean2D>(Boolean.FALSE),new BSPTree<Euclidean2D>(Boolean.TRUE),null);BSPTree<Euclidean2D> b1=new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.92,-0.08),new Vector2D(0.90,-0.10),true),new BSPTree<Euclidean2D>(Boolean.FALSE),b0,null);BSPTree<Euclidean2D> b2=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.92,-0.18),new Vector2D(0.92,-0.12)),new BSPTree<Euclidean2D>(Boolean.FALSE),new BSPTree<Euclidean2D>(Boolean.TRUE),null);BSPTree<Euclidean2D> b3=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85,-0.15),new Vector2D(0.90,-0.20)),new BSPTree<Euclidean2D>(Boolean.FALSE),b2,null);BSPTree<Euclidean2D> b4=new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.95,-0.15),new Vector2D(0.85,-0.05)),b1,b3,null);BSPTree<Euclidean2D> b5=new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85,-0.05),new Vector2D(0.85,-0.25),true),new BSPTree<Euclidean2D>(Boolean.FALSE),b4,null);BSPTree<Euclidean2D> b6=new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.0,-1.10),new Vector2D(1.0,-0.10)),new BSPTree<Euclidean2D>(Boolean.FALSE),b5,null);PolygonsSet c=(PolygonsSet)new RegionFactory<Euclidean2D>().union(new PolygonsSet(a9),new PolygonsSet(b6));checkPoints(Region.Location.INSIDE,c,new Vector2D[]{new Vector2D(0.83,-0.06),new Vector2D(0.83,-0.15),new Vector2D(0.88,-0.15),new Vector2D(0.88,-0.09),new Vector2D(0.88,-0.07),new Vector2D(0.91,-0.18),new Vector2D(0.91,-0.10)});checkPoints(Region.Location.OUTSIDE,c,new Vector2D[]{new Vector2D(0.80,-0.10),new Vector2D(0.83,-0.50),new Vector2D(0.83,-0.20),new Vector2D(0.83,-0.02),new Vector2D(0.87,-0.50),new Vector2D(0.87,-0.20),new Vector2D(0.87,-0.02),new Vector2D(0.91,-0.20),new Vector2D(0.91,-0.08),new Vector2D(0.93,-0.15)});checkVertices(c.getVertices(),new Vector2D[][]{new Vector2D[]{new Vector2D(0.85,-0.15),new Vector2D(0.90,-0.20),new Vector2D(0.92,-0.18),new Vector2D(0.92,-0.08),new Vector2D(0.90,-0.10),new Vector2D(0.90,-0.05),new Vector2D(0.82,-0.05),new Vector2D(0.82,-0.18)}});}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testBug20041003",0,"@Test public void testBug20041003(){Line[]l={new Line(new Vector2D(0.0,0.625000007541172),new Vector2D(1.0,0.625000007541172)),new Line(new Vector2D(-0.19204433621902645,0.0),new Vector2D(-0.19204433621902645,1.0)),new Line(new Vector2D(-0.40303524786887,0.4248364535319128),new Vector2D(-1.12851149797877,-0.2634107480798909)),new Line(new Vector2D(0.0,2.0),new Vector2D(1.0,2.0))};BSPTree<Euclidean2D> node1=new BSPTree<Euclidean2D>(new SubLine(l[0],new IntervalsSet(intersectionAbscissa(l[0],l[1]),intersectionAbscissa(l[0],l[2]))),new BSPTree<Euclidean2D>(Boolean.TRUE),new BSPTree<Euclidean2D>(Boolean.FALSE),null);BSPTree<Euclidean2D> node2=new BSPTree<Euclidean2D>(new SubLine(l[1],new IntervalsSet(intersectionAbscissa(l[1],l[2]),intersectionAbscissa(l[1],l[3]))),node1,new BSPTree<Euclidean2D>(Boolean.FALSE),null);BSPTree<Euclidean2D> node3=new BSPTree<Euclidean2D>(new SubLine(l[2],new IntervalsSet(intersectionAbscissa(l[2],l[3]),Double.POSITIVE_INFINITY)),node2,new BSPTree<Euclidean2D>(Boolean.FALSE),null);BSPTree<Euclidean2D> node4=new BSPTree<Euclidean2D>(l[3].wholeHyperplane(),node3,new BSPTree<Euclidean2D>(Boolean.FALSE),null);PolygonsSet set=new PolygonsSet(node4);Assert.assertEquals(0,set.getVertices().length);}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testSqueezedHexa",0,"@Test public void testSqueezedHexa(){PolygonsSet set=new PolygonsSet(1.0e-10,new Vector2D(-6,-4),new Vector2D(-8,-8),new Vector2D(8,-8),new Vector2D(6,-4),new Vector2D(10,4),new Vector2D(-10,4));Assert.assertEquals(Location.OUTSIDE,set.checkPoint(new Vector2D(0,6)));}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testIssue880Simplified",0,"@Test public void testIssue880Simplified(){Vector2D[]vertices1=new Vector2D[]{new Vector2D(90.13595870833188,38.33604606376991),new Vector2D(90.14047850603913,38.34600084496253),new Vector2D(90.11045289492762,38.36801537312368),new Vector2D(90.10871471476526,38.36878044144294),new Vector2D(90.10424901707671,38.374300101757),new Vector2D(90.0979455456843,38.373578376172475),new Vector2D(90.09081227075944,38.37526295920463),new Vector2D(90.09081378927135,38.375193883266434)};PolygonsSet set1=new PolygonsSet(1.0e-10,vertices1);Assert.assertEquals(Location.OUTSIDE,set1.checkPoint(new Vector2D(90.12,38.32)));Assert.assertEquals(Location.OUTSIDE,set1.checkPoint(new Vector2D(90.135,38.355)));}"
"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSetTest.testIssue880Complete",0,"@Test public void testIssue880Complete(){Vector2D[]vertices1=new Vector2D[]{new Vector2D(90.08714908223715,38.370299337260235),new Vector2D(90.08709517675004,38.3702895991413),new Vector2D(90.08401538704919,38.368849330127944),new Vector2D(90.08258210430711,38.367634558585564),new Vector2D(90.08251455106665,38.36763409247078),new Vector2D(90.08106599752608,38.36761621664249),new Vector2D(90.08249585300035,38.36753627557965),new Vector2D(90.09075743352184,38.35914647644972),new Vector2D(90.09099945896571,38.35896264724079),new Vector2D(90.09269383800086,38.34595756121246),new Vector2D(90.09638631543191,38.3457988093121),new Vector2D(90.09666417351019,38.34523360999418),new Vector2D(90.1297082145872,38.337670454923625),new Vector2D(90.12971687748956,38.337669827794684),new Vector2D(90.1240820219179,38.34328502001131),new Vector2D(90.13084259656404,38.34017811765017),new Vector2D(90.13378567942857,38.33860579180606),new Vector2D(90.13519557833206,38.33621054663689),new Vector2D(90.13545616732307,38.33614965452864),new Vector2D(90.13553111202748,38.33613962818305),new Vector2D(90.1356903436448,38.33610227127048),new Vector2D(90.13576283227428,38.33609255422783),new Vector2D(90.13595870833188,38.33604606376991),new Vector2D(90.1361556630693,38.3360024198866),new Vector2D(90.13622408795709,38.335987048115726),new Vector2D(90.13696189099994,38.33581914328681),new Vector2D(90.13746655304897,38.33616706665265),new Vector2D(90.13845973716064,38.33650776167099),new Vector2D(90.13950901827667,38.3368469456463),new Vector2D(90.14393814424852,38.337591835857495),new Vector2D(90.14483839716831,38.337076122362475),new Vector2D(90.14565474433601,38.33769000964429),new Vector2D(90.14569421179482,38.3377117256905),new Vector2D(90.14577067124333,38.33770883625908),new Vector2D(90.14600350631684,38.337714326520995),new Vector2D(90.14600355139731,38.33771435193319),new Vector2D(90.14600369112401,38.33771443882085),new Vector2D(90.14600382486884,38.33771453466096),new Vector2D(90.14600395205912,38.33771463904344),new Vector2D(90.14600407214999,38.337714751520764),new Vector2D(90.14600418462749,38.337714871611695),new Vector2D(90.14600422249327,38.337714915811034),new Vector2D(90.14867838361471,38.34113888210675),new Vector2D(90.14923750157374,38.341582537502575),new Vector2D(90.14877083250991,38.34160685841391),new Vector2D(90.14816667319519,38.34244232585684),new Vector2D(90.14797696744586,38.34248455284745),new Vector2D(90.14484318014337,38.34385573215269),new Vector2D(90.14477919958296,38.3453797747614),new Vector2D(90.14202393306448,38.34464324839456),new Vector2D(90.14198920640195,38.344651155237216),new Vector2D(90.14155207025175,38.34486424263724),new Vector2D(90.1415196143314,38.344871730519),new Vector2D(90.14128611910814,38.34500196593859),new Vector2D(90.14047850603913,38.34600084496253),new Vector2D(90.14045907000337,38.34601860032171),new Vector2D(90.14039496493928,38.346223030432384),new Vector2D(90.14037626063737,38.346240203360026),new Vector2D(90.14030005823724,38.34646920000705),new Vector2D(90.13799164754806,38.34903093011013),new Vector2D(90.11045289492762,38.36801537312368),new Vector2D(90.10871471476526,38.36878044144294),new Vector2D(90.10424901707671,38.374300101757),new Vector2D(90.10263482039932,38.37310041316073),new Vector2D(90.09834601753448,38.373615053823414),new Vector2D(90.0979455456843,38.373578376172475),new Vector2D(90.09086514328669,38.37527884194668),new Vector2D(90.09084931407364,38.37590801712463),new Vector2D(90.09081227075944,38.37526295920463),new Vector2D(90.09081378927135,38.375193883266434)};PolygonsSet set1=new PolygonsSet(1.0e-8,vertices1);Assert.assertEquals(Location.OUTSIDE,set1.checkPoint(new Vector2D(90.0905,38.3755)));Assert.assertEquals(Location.INSIDE,set1.checkPoint(new Vector2D(90.09084,38.3755)));Assert.assertEquals(Location.OUTSIDE,set1.checkPoint(new Vector2D(90.0913,38.3755)));Assert.assertEquals(Location.INSIDE,set1.checkPoint(new Vector2D(90.1042,38.3739)));Assert.assertEquals(Location.INSIDE,set1.checkPoint(new Vector2D(90.1111,38.3673)));Assert.assertEquals(Location.OUTSIDE,set1.checkPoint(new Vector2D(90.0959,38.3457)));Vector2D[]vertices2=new Vector2D[]{new Vector2D(90.13067558880044,38.36977255037573),new Vector2D(90.12907570488,38.36817308242706),new Vector2D(90.1342774136516,38.356886880294724),new Vector2D(90.13090330629757,38.34664392676211),new Vector2D(90.13078571364593,38.344904617518466),new Vector2D(90.1315602208914,38.3447185040846),new Vector2D(90.1316336226821,38.34470643148342),new Vector2D(90.134020944832,38.340936644972885),new Vector2D(90.13912536387306,38.335497255122334),new Vector2D(90.1396178806582,38.334878075552126),new Vector2D(90.14083049696671,38.33316530644106),new Vector2D(90.14145252901329,38.33152722916191),new Vector2D(90.1404779335565,38.32863516047786),new Vector2D(90.14282712131586,38.327504432532066),new Vector2D(90.14616669875488,38.3237354115015),new Vector2D(90.14860976050608,38.315714862457924),new Vector2D(90.14999277782437,38.3164932507504),new Vector2D(90.15005207194997,38.316534677663356),new Vector2D(90.15508513859612,38.31878731691609),new Vector2D(90.15919938519221,38.31852743183782),new Vector2D(90.16093758658837,38.31880662005153),new Vector2D(90.16099420184912,38.318825953291594),new Vector2D(90.1665411125756,38.31859497874757),new Vector2D(90.16999653861313,38.32505772048029),new Vector2D(90.17475243391698,38.32594398441148),new Vector2D(90.17940844844992,38.327427213761325),new Vector2D(90.20951909541378,38.330616833491774),new Vector2D(90.2155400467941,38.331746223670336),new Vector2D(90.21559881391778,38.33175551425302),new Vector2D(90.21916646426041,38.332584299620805),new Vector2D(90.23863749852285,38.34778978875795),new Vector2D(90.25459855175802,38.357790570608984),new Vector2D(90.25964298227257,38.356918010203174),new Vector2D(90.26024593994703,38.361692743151366),new Vector2D(90.26146187570015,38.36311080550837),new Vector2D(90.26614159359622,38.36510808579902),new Vector2D(90.26621342936448,38.36507942500333),new Vector2D(90.26652190211962,38.36494042196722),new Vector2D(90.26621240678867,38.365113172030874),new Vector2D(90.26614057102057,38.365141832826794),new Vector2D(90.26380080055299,38.3660381760273),new Vector2D(90.26315345241,38.36670658276421),new Vector2D(90.26251574942881,38.367490323488084),new Vector2D(90.26247873448426,38.36755266444749),new Vector2D(90.26234628016698,38.36787989125406),new Vector2D(90.26214559424784,38.36945909356126),new Vector2D(90.25861728442555,38.37200753430875),new Vector2D(90.23905557537864,38.375405314295904),new Vector2D(90.22517251874075,38.38984691662256),new Vector2D(90.22549955153215,38.3911564273979),new Vector2D(90.22434386063355,38.391476432092134),new Vector2D(90.22147729457276,38.39134652252034),new Vector2D(90.22142070120117,38.391349167741964),new Vector2D(90.20665060751588,38.39475580900313),new Vector2D(90.20042268367109,38.39842558622888),new Vector2D(90.17423771242085,38.402727751805344),new Vector2D(90.16756796257476,38.40913898597597),new Vector2D(90.16728283954308,38.411255399912875),new Vector2D(90.16703538220418,38.41136059866693),new Vector2D(90.16725865657685,38.41013618805954),new Vector2D(90.16746107640665,38.40902614307544),new Vector2D(90.16122795307462,38.39773101873203)};PolygonsSet set2=new PolygonsSet(1.0e-8,vertices2);PolygonsSet set=(PolygonsSet)new RegionFactory<Euclidean2D>().difference(set1.copySelf(),set2.copySelf());Vector2D[][]verticies=set.getVertices();Assert.assertTrue(verticies[0][0]!= null);Assert.assertEquals(1,verticies.length);}"
"org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest.testNoReset",0,"@Test public void testNoReset()throws MaxCountExceededException {double[]y={0.0,1.0,-2.0};DummyStepInterpolator interpolator=new DummyStepInterpolator(y,new double[y.length],true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest.testFixedState",0,"@Test public void testFixedState()throws MaxCountExceededException {double[]y={1.0,3.0,-4.0};DummyStepInterpolator interpolator=new DummyStepInterpolator(y,new double[y.length],true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);interpolator.setInterpolatedTime(0.1);double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y[i])< 1.0e-10);}interpolator.setInterpolatedTime(0.5);result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest.testSerialization",0,"@Test public void testSerialization()throws IOException,ClassNotFoundException,MaxCountExceededException {double[]y={0.0,1.0,-2.0};DummyStepInterpolator interpolator=new DummyStepInterpolator(y,new double[y.length],true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);oos.writeObject(interpolator);Assert.assertTrue(bos.size()> 300);Assert.assertTrue(bos.size()< 500);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);DummyStepInterpolator dsi=(DummyStepInterpolator)ois.readObject();dsi.setInterpolatedTime(0.5);double[]result=dsi.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math3.ode.sampling.DummyStepInterpolatorTest.testImpossibleSerialization",0,"@Test public void testImpossibleSerialization()throws IOException {double[]y={0.0,1.0,-2.0};AbstractStepInterpolator interpolator=new BadStepInterpolator(y,true);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);try {oos.writeObject(interpolator);Assert.fail(""an exception should have been thrown"");}catch(LocalException le){}}"
"org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest.testSerialization",0,"@Test public void testSerialization(){StatisticalSummaryValues u=new StatisticalSummaryValues(1,2,3,4,5,6);TestUtils.checkSerializedEquality(u);StatisticalSummaryValues t=(StatisticalSummaryValues)TestUtils.serializeAndRecover(u);verifyEquality(u,t);}"
"org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){StatisticalSummaryValues u=new StatisticalSummaryValues(1,2,3,4,5,6);StatisticalSummaryValues t=null;Assert.assertTrue(""reflexive"",u.equals(u));Assert.assertFalse(""non-null compared to null"",u.equals(t));Assert.assertFalse(""wrong type"",u.equals(Double.valueOf(0)));t=new StatisticalSummaryValues(1,2,3,4,5,6);Assert.assertTrue(""instances with same data should be equal"",t.equals(u));Assert.assertEquals(""hash code"",u.hashCode(),t.hashCode());u=new StatisticalSummaryValues(Double.NaN,2,3,4,5,6);t=new StatisticalSummaryValues(1,Double.NaN,3,4,5,6);Assert.assertFalse(""instances based on different data should be different"",(u.equals(t)|| t.equals(u)));}"
"org.apache.commons.math3.stat.descriptive.StatisticalSummaryValuesTest.testToString",0,"@Test public void testToString(){StatisticalSummaryValues u=new StatisticalSummaryValues(4.5,16,10,5,4,45);Locale d=Locale.getDefault();Locale.setDefault(Locale.US);Assert.assertEquals(""StatisticalSummaryValues:\n"" + ""n: 10\n"" + ""min: 4.0\n""+ ""max: 5.0\n""+ ""mean: 4.5\n""+ ""std dev: 4.0\n""+ ""variance: 16.0\n""+ ""sum: 45.0\n"",u.toString());Locale.setDefault(d);}"
"org.apache.commons.math3.analysis.integration.gauss.LegendreTest.testCos",0,"@Test public void testCos(){final UnivariateFunction cos=new Cos();final GaussIntegrator integrator=factory.legendre(7,0,Math.PI / 2);final double s=integrator.integrate(cos);Assert.assertEquals(1,s,Math.ulp(1d));}"
"org.apache.commons.math3.analysis.integration.gauss.LegendreTest.testInverse",0,"@Test public void testInverse(){final UnivariateFunction inv=new Inverse();final UnivariateFunction log=new Log();final double lo=12.34;final double hi=456.78;final GaussIntegrator integrator=factory.legendre(60,lo,hi);final double s=integrator.integrate(inv);final double expected=log.value(hi)- log.value(lo);Assert.assertEquals(expected,s,1e-14);}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testMoments",0,"/** * Test mean/variance. */@Test public void testMoments(){UniformIntegerDistribution dist;dist=new UniformIntegerDistribution(0,5);Assert.assertEquals(dist.getNumericalMean(),2.5,0);Assert.assertEquals(dist.getNumericalVariance(),35 / 12.0,0);dist=new UniformIntegerDistribution(0,1);Assert.assertEquals(dist.getNumericalMean(),0.5,0);Assert.assertEquals(dist.getNumericalVariance(),3 / 12.0,0);}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.UniformIntegerDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testTransformComplexSizeNotAPowerOfTwo",0,"@Test public void testTransformComplexSizeNotAPowerOfTwo(){final int n=127;final Complex[]x=createComplexData(n);final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){final FastFourierTransformer fft;fft=new FastFourierTransformer(norm[i]);try {fft.transform(x,type[j]);Assert.fail(norm[i]+ "","" + type[j]+ "": MathIllegalArgumentException was expected"");}catch(MathIllegalArgumentException e){}}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testTransformRealSizeNotAPowerOfTwo",0,"@Test public void testTransformRealSizeNotAPowerOfTwo(){final int n=127;final double[]x=createRealData(n);final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){final FastFourierTransformer fft;fft=new FastFourierTransformer(norm[i]);try {fft.transform(x,type[j]);Assert.fail(norm[i]+ "","" + type[j]+ "": MathIllegalArgumentException was expected"");}catch(MathIllegalArgumentException e){}}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testTransformFunctionSizeNotAPowerOfTwo",0,"@Test public void testTransformFunctionSizeNotAPowerOfTwo(){final int n=127;final UnivariateFunction f=new Sin();final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){final FastFourierTransformer fft;fft=new FastFourierTransformer(norm[i]);try {fft.transform(f,0.0,Math.PI,n,type[j]);Assert.fail(norm[i]+ "","" + type[j]+ "": MathIllegalArgumentException was expected"");}catch(MathIllegalArgumentException e){}}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testTransformFunctionNotStrictlyPositiveNumberOfSamples",0,"@Test public void testTransformFunctionNotStrictlyPositiveNumberOfSamples(){final int n=-128;final UnivariateFunction f=new Sin();final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){final FastFourierTransformer fft;fft=new FastFourierTransformer(norm[i]);try {fft.transform(f,0.0,Math.PI,n,type[j]);fft.transform(f,0.0,Math.PI,n,type[j]);Assert.fail(norm[i]+ "","" + type[j]+ "": NotStrictlyPositiveException was expected"");}catch(NotStrictlyPositiveException e){}}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testTransformFunctionInvalidBounds",0,"@Test public void testTransformFunctionInvalidBounds(){final int n=128;final UnivariateFunction f=new Sin();final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){final FastFourierTransformer fft;fft=new FastFourierTransformer(norm[i]);try {fft.transform(f,Math.PI,0.0,n,type[j]);Assert.fail(norm[i]+ "","" + type[j]+ "": NumberIsTooLargeException was expected"");}catch(NumberIsTooLargeException e){}}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testTransformComplex",0,"@Test public void testTransformComplex(){final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){doTestTransformComplex(2,1.0E-15,norm[i],type[j]);doTestTransformComplex(4,1.0E-14,norm[i],type[j]);doTestTransformComplex(8,1.0E-14,norm[i],type[j]);doTestTransformComplex(16,1.0E-13,norm[i],type[j]);doTestTransformComplex(32,1.0E-13,norm[i],type[j]);doTestTransformComplex(64,1.0E-12,norm[i],type[j]);doTestTransformComplex(128,1.0E-12,norm[i],type[j]);}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testStandardTransformReal",0,"@Test public void testStandardTransformReal(){final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){doTestTransformReal(2,1.0E-15,norm[i],type[j]);doTestTransformReal(4,1.0E-14,norm[i],type[j]);doTestTransformReal(8,1.0E-14,norm[i],type[j]);doTestTransformReal(16,1.0E-13,norm[i],type[j]);doTestTransformReal(32,1.0E-13,norm[i],type[j]);doTestTransformReal(64,1.0E-13,norm[i],type[j]);doTestTransformReal(128,1.0E-11,norm[i],type[j]);}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testStandardTransformFunction",0,"@Test public void testStandardTransformFunction(){final UnivariateFunction f=new Sinc();final double min=-FastMath.PI;final double max=FastMath.PI;final DftNormalization[]norm;norm=DftNormalization.values();final TransformType[]type;type=TransformType.values();for (int i=0;i < norm.length;i++){for (int j=0;j < type.length;j++){doTestTransformFunction(f,min,max,2,1.0E-15,norm[i],type[j]);doTestTransformFunction(f,min,max,4,1.0E-14,norm[i],type[j]);doTestTransformFunction(f,min,max,8,1.0E-14,norm[i],type[j]);doTestTransformFunction(f,min,max,16,1.0E-13,norm[i],type[j]);doTestTransformFunction(f,min,max,32,1.0E-13,norm[i],type[j]);doTestTransformFunction(f,min,max,64,1.0E-12,norm[i],type[j]);doTestTransformFunction(f,min,max,128,1.0E-11,norm[i],type[j]);}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testAdHocData",0,"/** * Test of transformer for the ad hoc data taken from Mathematica.*/@Test public void testAdHocData(){FastFourierTransformer transformer;transformer=new FastFourierTransformer(DftNormalization.STANDARD);Complex result[];double tolerance=1E-12;double x[]={1.3,2.4,1.7,4.1,2.9,1.7,5.1,2.7};Complex y[]={new Complex(21.9,0.0),new Complex(-2.09497474683058,1.91507575950825),new Complex(-2.6,2.7),new Complex(-1.10502525316942,-4.88492424049175),new Complex(0.1,0.0),new Complex(-1.10502525316942,4.88492424049175),new Complex(-2.6,-2.7),new Complex(-2.09497474683058,-1.91507575950825)};result=transformer.transform(x,TransformType.FORWARD);for (int i=0;i < result.length;i++){Assert.assertEquals(y[i].getReal(),result[i].getReal(),tolerance);Assert.assertEquals(y[i].getImaginary(),result[i].getImaginary(),tolerance);}result=transformer.transform(y,TransformType.INVERSE);for (int i=0;i < result.length;i++){Assert.assertEquals(x[i],result[i].getReal(),tolerance);Assert.assertEquals(0.0,result[i].getImaginary(),tolerance);}double x2[]={10.4,21.6,40.8,13.6,23.2,32.8,13.6,19.2};TransformUtils.scaleArray(x2,1.0 / FastMath.sqrt(x2.length));Complex y2[]=y;transformer=new FastFourierTransformer(DftNormalization.UNITARY);result=transformer.transform(y2,TransformType.FORWARD);for (int i=0;i < result.length;i++){Assert.assertEquals(x2[i],result[i].getReal(),tolerance);Assert.assertEquals(0.0,result[i].getImaginary(),tolerance);}result=transformer.transform(x2,TransformType.INVERSE);for (int i=0;i < result.length;i++){Assert.assertEquals(y2[i].getReal(),result[i].getReal(),tolerance);Assert.assertEquals(y2[i].getImaginary(),result[i].getImaginary(),tolerance);}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.testSinFunction",0,"/** * Test of transformer for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();FastFourierTransformer transformer;transformer=new FastFourierTransformer(DftNormalization.STANDARD);Complex result[];int N=1 << 8;double min,max,tolerance=1E-12;min=0.0;max=2.0 * FastMath.PI;result=transformer.transform(f,min,max,N,TransformType.FORWARD);Assert.assertEquals(0.0,result[1].getReal(),tolerance);Assert.assertEquals(-(N >> 1),result[1].getImaginary(),tolerance);Assert.assertEquals(0.0,result[N - 1].getReal(),tolerance);Assert.assertEquals(N >> 1,result[N - 1].getImaginary(),tolerance);for (int i=0;i < N - 1;i+=(i == 0 ? 2 : 1)){Assert.assertEquals(0.0,result[i].getReal(),tolerance);Assert.assertEquals(0.0,result[i].getImaginary(),tolerance);}min=-FastMath.PI;max=FastMath.PI;result=transformer.transform(f,min,max,N,TransformType.INVERSE);Assert.assertEquals(0.0,result[1].getReal(),tolerance);Assert.assertEquals(-0.5,result[1].getImaginary(),tolerance);Assert.assertEquals(0.0,result[N - 1].getReal(),tolerance);Assert.assertEquals(0.5,result[N - 1].getImaginary(),tolerance);for (int i=0;i < N - 1;i+=(i == 0 ? 2 : 1)){Assert.assertEquals(0.0,result[i].getReal(),tolerance);Assert.assertEquals(0.0,result[i].getImaginary(),tolerance);}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.test2DData",0,"@Test public void test2DData(){FastFourierTransformer transformer;transformer=new FastFourierTransformer(DftNormalization.STANDARD);double tolerance=1E-12;Complex[][]input=new Complex[][]{new Complex[]{new Complex(1,0),new Complex(2,0)},new Complex[]{new Complex(3,1),new Complex(4,2)}};Complex[][]goodOutput=new Complex[][]{new Complex[]{new Complex(5,1.5),new Complex(-1,-.5)},new Complex[]{new Complex(-2,-1.5),new Complex(0,.5)}};for (int i=0;i < goodOutput.length;i++){TransformUtils.scaleArray(goodOutput[i],FastMath.sqrt(goodOutput[i].length)* FastMath.sqrt(goodOutput.length));}Complex[][]output=(Complex[][])transformer.mdfft(input,TransformType.FORWARD);Complex[][]output2=(Complex[][])transformer.mdfft(output,TransformType.INVERSE);Assert.assertEquals(input.length,output.length);Assert.assertEquals(input.length,output2.length);Assert.assertEquals(input[0].length,output[0].length);Assert.assertEquals(input[0].length,output2[0].length);Assert.assertEquals(input[1].length,output[1].length);Assert.assertEquals(input[1].length,output2[1].length);for (int i=0;i < input.length;i++){for (int j=0;j < input[0].length;j++){Assert.assertEquals(input[i][j].getImaginary(),output2[i][j].getImaginary(),tolerance);Assert.assertEquals(input[i][j].getReal(),output2[i][j].getReal(),tolerance);Assert.assertEquals(goodOutput[i][j].getImaginary(),output[i][j].getImaginary(),tolerance);Assert.assertEquals(goodOutput[i][j].getReal(),output[i][j].getReal(),tolerance);}}}"
"org.apache.commons.math3.transform.FastFourierTransformerTest.test2DDataUnitary",0,"@Test public void test2DDataUnitary(){FastFourierTransformer transformer;transformer=new FastFourierTransformer(DftNormalization.UNITARY);double tolerance=1E-12;Complex[][]input=new Complex[][]{new Complex[]{new Complex(1,0),new Complex(2,0)},new Complex[]{new Complex(3,1),new Complex(4,2)}};Complex[][]goodOutput=new Complex[][]{new Complex[]{new Complex(5,1.5),new Complex(-1,-.5)},new Complex[]{new Complex(-2,-1.5),new Complex(0,.5)}};Complex[][]output=(Complex[][])transformer.mdfft(input,TransformType.FORWARD);Complex[][]output2=(Complex[][])transformer.mdfft(output,TransformType.INVERSE);Assert.assertEquals(input.length,output.length);Assert.assertEquals(input.length,output2.length);Assert.assertEquals(input[0].length,output[0].length);Assert.assertEquals(input[0].length,output2[0].length);Assert.assertEquals(input[1].length,output[1].length);Assert.assertEquals(input[1].length,output2[1].length);for (int i=0;i < input.length;i++){for (int j=0;j < input[0].length;j++){Assert.assertEquals(input[i][j].getImaginary(),output2[i][j].getImaginary(),tolerance);Assert.assertEquals(input[i][j].getReal(),output2[i][j].getReal(),tolerance);Assert.assertEquals(goodOutput[i][j].getImaginary(),output[i][j].getImaginary(),tolerance);Assert.assertEquals(goodOutput[i][j].getReal(),output[i][j].getReal(),tolerance);}}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testConstructor1",0,"@Test public void testConstructor1(){final int dim=3;final DiagonalMatrix m=new DiagonalMatrix(dim);Assert.assertEquals(dim,m.getRowDimension());Assert.assertEquals(dim,m.getColumnDimension());}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testConstructor2",0,"@Test public void testConstructor2(){final double[]d={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(d);for (int i=0;i < m.getRowDimension();i++){for (int j=0;j < m.getRowDimension();j++){if (i == j){Assert.assertEquals(d[i],m.getEntry(i,j),0d);}else {Assert.assertEquals(0d,m.getEntry(i,j),0d);}}}d[0]=0;Assert.assertFalse(d[0]== m.getEntry(0,0));}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testConstructor3",0,"@Test public void testConstructor3(){final double[]d={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(d,false);for (int i=0;i < m.getRowDimension();i++){for (int j=0;j < m.getRowDimension();j++){if (i == j){Assert.assertEquals(d[i],m.getEntry(i,j),0d);}else {Assert.assertEquals(0d,m.getEntry(i,j),0d);}}}d[0]=0;Assert.assertTrue(d[0]== m.getEntry(0,0));}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testCreateError",0,"@Test(expected=DimensionMismatchException.class)public void testCreateError(){final double[]d={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(d,false);m.createMatrix(5,3);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testCreate",0,"@Test public void testCreate(){final double[]d={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(d,false);final RealMatrix p=m.createMatrix(5,5);Assert.assertTrue(p instanceof DiagonalMatrix);Assert.assertEquals(5,p.getRowDimension());Assert.assertEquals(5,p.getColumnDimension());}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testCopy",0,"@Test public void testCopy(){final double[]d={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(d,false);final DiagonalMatrix p=(DiagonalMatrix)m.copy();for (int i=0;i < m.getRowDimension();++i){Assert.assertEquals(m.getEntry(i,i),p.getEntry(i,i),1.0e-20);}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testGetData",0,"@Test public void testGetData(){final double[]data={-1.2,3.4,5};final int dim=3;final DiagonalMatrix m=new DiagonalMatrix(dim);for (int i=0;i < dim;i++){m.setEntry(i,i,data[i]);}final double[][]out=m.getData();Assert.assertEquals(dim,out.length);for (int i=0;i < m.getRowDimension();i++){Assert.assertEquals(dim,out[i].length);for (int j=0;j < m.getRowDimension();j++){if (i == j){Assert.assertEquals(data[i],out[i][j],0d);}else {Assert.assertEquals(0d,out[i][j],0d);}}}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testAdd",0,"@Test public void testAdd(){final double[]data1={-1.2,3.4,5};final DiagonalMatrix m1=new DiagonalMatrix(data1);final double[]data2={10.1,2.3,45};final DiagonalMatrix m2=new DiagonalMatrix(data2);final DiagonalMatrix result=m1.add(m2);Assert.assertEquals(m1.getRowDimension(),result.getRowDimension());for (int i=0;i < result.getRowDimension();i++){for (int j=0;j < result.getRowDimension();j++){if (i == j){Assert.assertEquals(data1[i]+ data2[i],result.getEntry(i,j),0d);}else {Assert.assertEquals(0d,result.getEntry(i,j),0d);}}}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testSubtract",0,"@Test public void testSubtract(){final double[]data1={-1.2,3.4,5};final DiagonalMatrix m1=new DiagonalMatrix(data1);final double[]data2={10.1,2.3,45};final DiagonalMatrix m2=new DiagonalMatrix(data2);final DiagonalMatrix result=m1.subtract(m2);Assert.assertEquals(m1.getRowDimension(),result.getRowDimension());for (int i=0;i < result.getRowDimension();i++){for (int j=0;j < result.getRowDimension();j++){if (i == j){Assert.assertEquals(data1[i]- data2[i],result.getEntry(i,j),0d);}else {Assert.assertEquals(0d,result.getEntry(i,j),0d);}}}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testAddToEntry",0,"@Test public void testAddToEntry(){final double[]data={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(data);for (int i=0;i < m.getRowDimension();i++){m.addToEntry(i,i,i);Assert.assertEquals(data[i]+ i,m.getEntry(i,i),0d);}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testMultiplyEntry",0,"@Test public void testMultiplyEntry(){final double[]data={-1.2,3.4,5};final DiagonalMatrix m=new DiagonalMatrix(data);for (int i=0;i < m.getRowDimension();i++){m.multiplyEntry(i,i,i);Assert.assertEquals(data[i]* i,m.getEntry(i,i),0d);}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testMultiply1",0,"@Test public void testMultiply1(){final double[]data1={-1.2,3.4,5};final DiagonalMatrix m1=new DiagonalMatrix(data1);final double[]data2={10.1,2.3,45};final DiagonalMatrix m2=new DiagonalMatrix(data2);final DiagonalMatrix result=(DiagonalMatrix)m1.multiply((RealMatrix)m2);Assert.assertEquals(m1.getRowDimension(),result.getRowDimension());for (int i=0;i < result.getRowDimension();i++){for (int j=0;j < result.getRowDimension();j++){if (i == j){Assert.assertEquals(data1[i]* data2[i],result.getEntry(i,j),0d);}else {Assert.assertEquals(0d,result.getEntry(i,j),0d);}}}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testMultiply2",0,"@Test public void testMultiply2(){final double[]data1={-1.2,3.4,5};final DiagonalMatrix diag1=new DiagonalMatrix(data1);final double[][]data2={{-1.2,3.4},{-5.6,7.8},{9.1,2.3}};final RealMatrix dense2=new Array2DRowRealMatrix(data2);final RealMatrix dense1=new Array2DRowRealMatrix(diag1.getData());final RealMatrix diagResult=diag1.multiply(dense2);final RealMatrix denseResult=dense1.multiply(dense2);for (int i=0;i < dense1.getRowDimension();i++){for (int j=0;j < dense2.getColumnDimension();j++){Assert.assertEquals(denseResult.getEntry(i,j),diagResult.getEntry(i,j),0d);}}}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testOperate",0,"@Test public void testOperate(){final double[]data={-1.2,3.4,5};final DiagonalMatrix diag=new DiagonalMatrix(data);final RealMatrix dense=new Array2DRowRealMatrix(diag.getData());final double[]v={6.7,890.1,23.4};final double[]diagResult=diag.operate(v);final double[]denseResult=dense.operate(v);TestUtils.assertEquals(diagResult,denseResult,0d);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testPreMultiply",0,"@Test public void testPreMultiply(){final double[]data={-1.2,3.4,5};final DiagonalMatrix diag=new DiagonalMatrix(data);final RealMatrix dense=new Array2DRowRealMatrix(diag.getData());final double[]v={6.7,890.1,23.4};final double[]diagResult=diag.preMultiply(v);final double[]denseResult=dense.preMultiply(v);TestUtils.assertEquals(diagResult,denseResult,0d);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testSetNonDiagonalEntry",0,"@Test(expected=NumberIsTooLargeException.class)public void testSetNonDiagonalEntry(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.setEntry(1,2,3.4);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testSetNonDiagonalZero",0,"@Test public void testSetNonDiagonalZero(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.setEntry(1,2,0.0);Assert.assertEquals(0.0,diag.getEntry(1,2),Precision.SAFE_MIN);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testAddNonDiagonalEntry",0,"@Test(expected=NumberIsTooLargeException.class)public void testAddNonDiagonalEntry(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.addToEntry(1,2,3.4);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testAddNonDiagonalZero",0,"@Test public void testAddNonDiagonalZero(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.addToEntry(1,2,0.0);Assert.assertEquals(0.0,diag.getEntry(1,2),Precision.SAFE_MIN);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testMultiplyNonDiagonalEntry",0,"@Test public void testMultiplyNonDiagonalEntry(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.multiplyEntry(1,2,3.4);Assert.assertEquals(0.0,diag.getEntry(1,2),Precision.SAFE_MIN);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testMultiplyNonDiagonalZero",0,"@Test public void testMultiplyNonDiagonalZero(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.multiplyEntry(1,2,0.0);Assert.assertEquals(0.0,diag.getEntry(1,2),Precision.SAFE_MIN);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testSetEntryOutOfRange",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryOutOfRange(){final DiagonalMatrix diag=new DiagonalMatrix(3);diag.setEntry(3,3,3.4);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testNull",0,"@Test(expected=NullArgumentException.class)public void testNull(){new DiagonalMatrix(null,false);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testSetSubMatrixError",0,"@Test(expected=NumberIsTooLargeException.class)public void testSetSubMatrixError(){final double[]data={-1.2,3.4,5};final DiagonalMatrix diag=new DiagonalMatrix(data);diag.setSubMatrix(new double[][]{{1.0,1.0},{1.0,1.0}},1,1);}"
"org.apache.commons.math3.linear.DiagonalMatrixTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){final double[]data={-1.2,3.4,5};final DiagonalMatrix diag=new DiagonalMatrix(data);diag.setSubMatrix(new double[][]{{0.0,5.0,0.0},{0.0,0.0,6.0}},1,0);Assert.assertEquals(-1.2,diag.getEntry(0,0),1.0e-20);Assert.assertEquals(5.0,diag.getEntry(1,1),1.0e-20);Assert.assertEquals(6.0,diag.getEntry(2,2),1.0e-20);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoFailures",0,"/** * Verify that if there are no failures,mass is concentrated on sampleSize */@Test public void testDegenerateNoFailures(){HypergeometricDistribution dist=new HypergeometricDistribution(5,5,3);setDistribution(dist);setCumulativeTestPoints(new int[]{-1,0,1,3,10});setCumulativeTestValues(new double[]{0d,0d,0d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,3,10});setDensityTestValues(new double[]{0d,0d,0d,1d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{3,3});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();Assert.assertEquals(dist.getSupportLowerBound(),3);Assert.assertEquals(dist.getSupportUpperBound(),3);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateNoSuccesses",0,"/** * Verify that if there are no successes,mass is concentrated on 0 */@Test public void testDegenerateNoSuccesses(){HypergeometricDistribution dist=new HypergeometricDistribution(5,0,3);setDistribution(dist);setCumulativeTestPoints(new int[]{-1,0,1,3,10});setCumulativeTestValues(new double[]{0d,1d,1d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,3,10});setDensityTestValues(new double[]{0d,1d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{0,0});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();Assert.assertEquals(dist.getSupportLowerBound(),0);Assert.assertEquals(dist.getSupportUpperBound(),0);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDegenerateFullSample",0,"/** * Verify that if sampleSize = populationSize,mass is concentrated on numberOfSuccesses */@Test public void testDegenerateFullSample(){HypergeometricDistribution dist=new HypergeometricDistribution(5,3,5);setDistribution(dist);setCumulativeTestPoints(new int[]{-1,0,1,3,10});setCumulativeTestValues(new double[]{0d,0d,0d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,3,10});setDensityTestValues(new double[]{0d,0d,0d,1d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{3,3});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();Assert.assertEquals(dist.getSupportLowerBound(),3);Assert.assertEquals(dist.getSupportUpperBound(),3);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testPreconditions",0,"@Test public void testPreconditions(){try {new HypergeometricDistribution(0,3,5);Assert.fail(""negative population size. NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException ex){}try {new HypergeometricDistribution(5,-1,5);Assert.fail(""negative number of successes. NotPositiveException expected"");}catch(NotPositiveException ex){}try {new HypergeometricDistribution(5,3,-1);Assert.fail(""negative sample size. NotPositiveException expected"");}catch(NotPositiveException ex){}try {new HypergeometricDistribution(5,6,5);Assert.fail(""numberOfSuccesses > populationSize. NumberIsTooLargeException expected"");}catch(NumberIsTooLargeException ex){}try {new HypergeometricDistribution(5,3,6);Assert.fail(""sampleSize > populationSize. NumberIsTooLargeException expected"");}catch(NumberIsTooLargeException ex){}}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testAccessors",0,"@Test public void testAccessors(){HypergeometricDistribution dist=new HypergeometricDistribution(5,3,4);Assert.assertEquals(5,dist.getPopulationSize());Assert.assertEquals(3,dist.getNumberOfSuccesses());Assert.assertEquals(4,dist.getSampleSize());}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testLargeValues",0,"@Test public void testLargeValues(){int populationSize=3456;int sampleSize=789;int numberOfSucceses=101;double[][]data={{0.0,2.75646034603961e-12,2.75646034603961e-12,1.0},{1.0,8.55705370142386e-11,8.83269973602783e-11,0.999999999997244},{2.0,1.31288129219665e-9,1.40120828955693e-9,0.999999999911673},{3.0,1.32724172984193e-8,1.46736255879763e-8,0.999999998598792},{4.0,9.94501711734089e-8,1.14123796761385e-7,0.999999985326375},{5.0,5.89080768883643e-7,7.03204565645028e-7,0.999999885876203},{20.0,0.0760051397707708,0.27349758476299,0.802507555007781},{21.0,0.087144222047629,0.360641806810619,0.72650241523701},{22.0,0.0940378846881819,0.454679691498801,0.639358193189381},{23.0,0.0956897500614809,0.550369441560282,0.545320308501199},{24.0,0.0919766921922999,0.642346133752582,0.449630558439718},{25.0,0.083641637261095,0.725987771013677,0.357653866247418},{96.0,5.93849188852098e-57,1.0,6.01900244560712e-57},{97.0,7.96593036832547e-59,1.0,8.05105570861321e-59},{98.0,8.44582921934367e-61,1.0,8.5125340287733e-61},{99.0,6.63604297068222e-63,1.0,6.670480942963e-63},{100.0,3.43501099007557e-65,1.0,3.4437972280786e-65},{101.0,8.78623800302957e-68,1.0,8.78623800302957e-68}};testHypergeometricDistributionProbabilities(populationSize,sampleSize,numberOfSucceses,data);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoreLargeValues",0,"@Test public void testMoreLargeValues(){int populationSize=26896;int sampleSize=895;int numberOfSucceses=55;double[][]data={{0.0,0.155168304750504,0.155168304750504,1.0},{1.0,0.29437545000746,0.449543754757964,0.844831695249496},{2.0,0.273841321577003,0.723385076334967,0.550456245242036},{3.0,0.166488572570786,0.889873648905753,0.276614923665033},{4.0,0.0743969744713231,0.964270623377076,0.110126351094247},{5.0,0.0260542785784855,0.990324901955562,0.0357293766229237},{20.0,3.57101101678792e-16,1.0,3.78252101622096e-16},{21.0,2.00551638598312e-17,1.0,2.11509999433041e-17},{22.0,1.04317070180562e-18,1.0,1.09583608347287e-18},{23.0,5.03153504903308e-20,1.0,5.266538166725e-20},{24.0,2.2525984149695e-21,1.0,2.35003117691919e-21},{25.0,9.3677424515947e-23,1.0,9.74327619496943e-23},{50.0,9.83633962945521e-69,1.0,9.8677629437617e-69},{51.0,3.13448949497553e-71,1.0,3.14233143064882e-71},{52.0,7.82755221928122e-74,1.0,7.84193567329055e-74},{53.0,1.43662126065532e-76,1.0,1.43834540093295e-76},{54.0,1.72312692517348e-79,1.0,1.7241402776278e-79},{55.0,1.01335245432581e-82,1.0,1.01335245432581e-82}};testHypergeometricDistributionProbabilities(populationSize,sampleSize,numberOfSucceses,data);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;HypergeometricDistribution dist;dist=new HypergeometricDistribution(1500,40,100);Assert.assertEquals(dist.getNumericalMean(),40d * 100d / 1500d,tol);Assert.assertEquals(dist.getNumericalVariance(),(100d * 40d * (1500d - 100d)* (1500d - 40d))/ ((1500d * 1500d * 1499d)),tol);dist=new HypergeometricDistribution(3000,55,200);Assert.assertEquals(dist.getNumericalMean(),55d * 200d / 3000d,tol);Assert.assertEquals(dist.getNumericalVariance(),(200d * 55d * (3000d - 200d)* (3000d - 55d))/ ((3000d * 3000d * 2999d)),tol);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testMath644",0,"@Test public void testMath644(){int N=14761461;int m=1035;int n=1841;int k=0;final HypergeometricDistribution dist=new HypergeometricDistribution(N,m,n);Assert.assertTrue(Precision.compareTo(1.0,dist.upperCumulativeProbability(k),1)== 0);Assert.assertTrue(Precision.compareTo(dist.cumulativeProbability(k),0.0,1)> 0);double upper=1.0 - dist.cumulativeProbability(k)+ dist.probability(k);Assert.assertTrue(Precision.compareTo(1.0,upper,1)== 0);}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.HypergeometricDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.stat.correlation.CovarianceTest.testLongly",0,"/** * Test Longley dataset against R. Data Source: J. Longley (1967)""An Appraisal of Least Squares Programs for the Electronic Computer from the Point of View of the User"" Journal of the American Statistical Association,vol. 62. September,pp. 819-841. Data are from NIST: http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat*/@Test public void testLongly(){RealMatrix matrix=createRealMatrix(longleyData,16,7);RealMatrix covarianceMatrix=new Covariance(matrix).getCovarianceMatrix();double[]rData=new double[]{12333921.73333333246,3.679666000000000e+04,343330206.333333313,1649102.666666666744,1117681.066666666651,23461965.733333334,16240.93333333333248,36796.66000000000,1.164576250000000e+02,1063604.115416667,6258.666250000000,3490.253750000000,73503.000000000,50.92333333333334,343330206.33333331347,1.063604115416667e+06,9879353659.329166412,56124369.854166664183,30880428.345833335072,685240944.600000024,470977.90000000002328,1649102.66666666674,6.258666250000000e+03,56124369.854166664,873223.429166666698,-115378.762499999997,4462741.533333333,2973.03333333333330,1117681.06666666665,3.490253750000000e+03,30880428.345833335,-115378.762499999997,484304.095833333326,1764098.133333333,1382.43333333333339,23461965.73333333433,7.350300000000000e+04,685240944.600000024,4462741.533333333209,1764098.133333333302,48387348.933333330,32917.40000000000146,16240.93333333333,5.092333333333334e+01,470977.900000000,2973.033333333333,1382.433333333333,32917.40000000,22.66666666666667};TestUtils.assertEquals(""covariance matrix"",createRealMatrix(rData,7,7),covarianceMatrix,10E-9);}"
"org.apache.commons.math3.stat.correlation.CovarianceTest.testSwissFertility",0,"/** * Test R Swiss fertility dataset against R. Data Source: R datasets package*/@Test public void testSwissFertility(){RealMatrix matrix=createRealMatrix(swissData,47,5);RealMatrix covarianceMatrix=new Covariance(matrix).getCovarianceMatrix();double[]rData=new double[]{156.0424976873265,100.1691489361702,-64.36692876965772,-79.7295097132285,241.5632030527289,100.169148936170251,515.7994172062905,-124.39283071230344,-139.6574005550416,379.9043755781684,-64.3669287696577,-124.3928307123034,63.64662349676226,53.5758556891767,-190.5606105457909,-79.7295097132285,-139.6574005550416,53.57585568917669,92.4560592044403,-61.6988297872340,241.5632030527289,379.9043755781684,-190.56061054579092,-61.6988297872340,1739.2945371877890};TestUtils.assertEquals(""covariance matrix"",createRealMatrix(rData,5,5),covarianceMatrix,10E-13);}"
"org.apache.commons.math3.stat.correlation.CovarianceTest.testConstant",0,"/** * Constant column*/@Test public void testConstant(){double[]noVariance=new double[]{1,1,1,1};double[]values=new double[]{1,2,3,4};Assert.assertEquals(0d,new Covariance().covariance(noVariance,values,true),Double.MIN_VALUE);Assert.assertEquals(0d,new Covariance().covariance(noVariance,noVariance,true),Double.MIN_VALUE);}"
"org.apache.commons.math3.stat.correlation.CovarianceTest.testOneColumn",0,"/** * One column*/@Test public void testOneColumn(){RealMatrix cov=new Covariance(new double[][]{{1},{2}},false).getCovarianceMatrix();Assert.assertEquals(1,cov.getRowDimension());Assert.assertEquals(1,cov.getColumnDimension());Assert.assertEquals(0.25,cov.getEntry(0,0),1.0e-15);}"
"org.apache.commons.math3.stat.correlation.CovarianceTest.testInsufficientData",0,"/** * Insufficient data*/@Test public void testInsufficientData(){double[]one=new double[]{1};double[]two=new double[]{2};try {new Covariance().covariance(one,two,false);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {new Covariance(new double[][]{{},{}});Assert.fail(""Expecting NotStrictlyPositiveException"");}catch(NotStrictlyPositiveException ex){}}"
"org.apache.commons.math3.stat.correlation.CovarianceTest.testConsistency",0,"/** * Verify that diagonal entries are consistent with Variance computation and matrix matches column-by-column covariances*/@Test public void testConsistency(){final RealMatrix matrix=createRealMatrix(swissData,47,5);final RealMatrix covarianceMatrix=new Covariance(matrix).getCovarianceMatrix();Variance variance=new Variance();for (int i=0;i < 5;i++){Assert.assertEquals(variance.evaluate(matrix.getColumn(i)),covarianceMatrix.getEntry(i,i),10E-14);}Assert.assertEquals(covarianceMatrix.getEntry(2,3),new Covariance().covariance(matrix.getColumn(2),matrix.getColumn(3),true),10E-14);Assert.assertEquals(covarianceMatrix.getEntry(2,3),covarianceMatrix.getEntry(3,2),Double.MIN_VALUE);RealMatrix repeatedColumns=new Array2DRowRealMatrix(47,3);for (int i=0;i < 3;i++){repeatedColumns.setColumnMatrix(i,matrix.getColumnMatrix(0));}RealMatrix repeatedCovarianceMatrix=new Covariance(repeatedColumns).getCovarianceMatrix();double columnVariance=variance.evaluate(matrix.getColumn(0));for (int i=0;i < 3;i++){for (int j=0;j < 3;j++){Assert.assertEquals(columnVariance,repeatedCovarianceMatrix.getEntry(i,j),10E-14);}}double[][]data=matrix.getData();TestUtils.assertEquals(""Covariances"",covarianceMatrix,new Covariance().computeCovarianceMatrix(data),Double.MIN_VALUE);TestUtils.assertEquals(""Covariances"",covarianceMatrix,new Covariance().computeCovarianceMatrix(data,true),Double.MIN_VALUE);double[]x=data[0];double[]y=data[1];Assert.assertEquals(new Covariance().covariance(x,y),new Covariance().covariance(x,y,true),Double.MIN_VALUE);}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0.0,1.0});setInverseCumulativeTestValues(new double[]{0.0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testAlpha",0,"@Test public void testAlpha(){WeibullDistribution dist=new WeibullDistribution(1,2);Assert.assertEquals(1,dist.getShape(),0);try {new WeibullDistribution(0,2);Assert.fail(""NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException e){}}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testBeta",0,"@Test public void testBeta(){WeibullDistribution dist=new WeibullDistribution(1,2);Assert.assertEquals(2,dist.getScale(),0);try {new WeibullDistribution(1,0);Assert.fail(""NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException e){}}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;WeibullDistribution dist;dist=new WeibullDistribution(2.5,3.5);Assert.assertEquals(dist.getNumericalMean(),3.5 * FastMath.exp(Gamma.logGamma(1 + (1 / 2.5))),tol);Assert.assertEquals(dist.getNumericalVariance(),(3.5 * 3.5)* FastMath.exp(Gamma.logGamma(1 + (2 / 2.5)))- (dist.getNumericalMean()* dist.getNumericalMean()),tol);dist=new WeibullDistribution(10.4,2.222);Assert.assertEquals(dist.getNumericalMean(),2.222 * FastMath.exp(Gamma.logGamma(1 + (1 / 10.4))),tol);Assert.assertEquals(dist.getNumericalVariance(),(2.222 * 2.222)* FastMath.exp(Gamma.logGamma(1 + (2 / 10.4)))- (dist.getNumericalMean()* dist.getNumericalMean()),tol);}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testSampling",0,"@Test public void testSampling(){}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.WeibullDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.stat.inference.TTestTest.testOneSampleT",0,"@Test public void testOneSampleT(){double[]observed={93.0,103.0,95.0,101.0,91.0,105.0,96.0,94.0,101.0,88.0,98.0,94.0,101.0,92.0,95.0};double mu=100.0;SummaryStatistics sampleStats=null;sampleStats=new SummaryStatistics();for (int i=0;i < observed.length;i++){sampleStats.addValue(observed[i]);}Assert.assertEquals(""t statistic"",-2.81976445346,testStatistic.t(mu,observed),10E-10);Assert.assertEquals(""t statistic"",-2.81976445346,testStatistic.t(mu,sampleStats),10E-10);Assert.assertEquals(""p value"",0.0136390585873,testStatistic.tTest(mu,observed),10E-10);Assert.assertEquals(""p value"",0.0136390585873,testStatistic.tTest(mu,sampleStats),10E-10);try {testStatistic.t(mu,(double[])null);Assert.fail(""arguments too short,NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.t(mu,(SummaryStatistics)null);Assert.fail(""arguments too short,NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.t(mu,emptyObs);Assert.fail(""arguments too short,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.t(mu,emptyStats);Assert.fail(""arguments too short,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.t(mu,tooShortObs);Assert.fail(""insufficient data to compute t statistic,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.tTest(mu,tooShortObs);Assert.fail(""insufficient data to perform t test,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.t(mu,tooShortStats);Assert.fail(""insufficient data to compute t statistic,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.tTest(mu,tooShortStats);Assert.fail(""insufficient data to perform t test,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}}"
"org.apache.commons.math3.stat.inference.TTestTest.testOneSampleTTest",0,"@Test public void testOneSampleTTest(){double[]oneSidedP={2d,0d,6d,6d,3d,3d,2d,3d,-6d,6d,6d,6d,3d,0d,1d,1d,0d,2d,3d,3d};SummaryStatistics oneSidedPStats=new SummaryStatistics();for (int i=0;i < oneSidedP.length;i++){oneSidedPStats.addValue(oneSidedP[i]);}Assert.assertEquals(""one sample t stat"",3.86485535541,testStatistic.t(0d,oneSidedP),10E-10);Assert.assertEquals(""one sample t stat"",3.86485535541,testStatistic.t(0d,oneSidedPStats),1E-10);Assert.assertEquals(""one sample p value"",0.000521637019637,testStatistic.tTest(0d,oneSidedP)/ 2d,10E-10);Assert.assertEquals(""one sample p value"",0.000521637019637,testStatistic.tTest(0d,oneSidedPStats)/ 2d,10E-5);Assert.assertTrue(""one sample t-test reject"",testStatistic.tTest(0d,oneSidedP,0.01));Assert.assertTrue(""one sample t-test reject"",testStatistic.tTest(0d,oneSidedPStats,0.01));Assert.assertTrue(""one sample t-test accept"",!testStatistic.tTest(0d,oneSidedP,0.0001));Assert.assertTrue(""one sample t-test accept"",!testStatistic.tTest(0d,oneSidedPStats,0.0001));try {testStatistic.tTest(0d,oneSidedP,95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}try {testStatistic.tTest(0d,oneSidedPStats,95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHeterscedastic",0,"@Test public void testTwoSampleTHeterscedastic(){double[]sample1={7d,-4d,18d,17d,-3d,-5d,1d,10d,11d,-2d};double[]sample2={-1d,12d,-1d,-3d,3d,-5d,5d,2d,-11d,-1d,-3d};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}Assert.assertEquals(""two sample heteroscedastic t stat"",1.60371728768,testStatistic.t(sample1,sample2),1E-10);Assert.assertEquals(""two sample heteroscedastic t stat"",1.60371728768,testStatistic.t(sampleStats1,sampleStats2),1E-10);Assert.assertEquals(""two sample heteroscedastic p value"",0.128839369622,testStatistic.tTest(sample1,sample2),1E-10);Assert.assertEquals(""two sample heteroscedastic p value"",0.128839369622,testStatistic.tTest(sampleStats1,sampleStats2),1E-10);Assert.assertTrue(""two sample heteroscedastic t-test reject"",testStatistic.tTest(sample1,sample2,0.2));Assert.assertTrue(""two sample heteroscedastic t-test reject"",testStatistic.tTest(sampleStats1,sampleStats2,0.2));Assert.assertTrue(""two sample heteroscedastic t-test accept"",!testStatistic.tTest(sample1,sample2,0.1));Assert.assertTrue(""two sample heteroscedastic t-test accept"",!testStatistic.tTest(sampleStats1,sampleStats2,0.1));try {testStatistic.tTest(sample1,sample2,.95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}try {testStatistic.tTest(sampleStats1,sampleStats2,.95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}try {testStatistic.tTest(sample1,tooShortObs,.01);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.tTest(sampleStats1,tooShortStats,.01);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.tTest(sample1,tooShortObs);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.tTest(sampleStats1,tooShortStats);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.t(sample1,tooShortObs);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {testStatistic.t(sampleStats1,tooShortStats);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}}"
"org.apache.commons.math3.stat.inference.TTestTest.testTwoSampleTHomoscedastic",0,"@Test public void testTwoSampleTHomoscedastic(){double[]sample1={2,4,6,8,10,97};double[]sample2={4,6,8,10,16};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}Assert.assertEquals(""two sample homoscedastic t stat"",0.73096310086,testStatistic.homoscedasticT(sample1,sample2),10E-11);Assert.assertEquals(""two sample homoscedastic p value"",0.4833963785,testStatistic.homoscedasticTTest(sampleStats1,sampleStats2),1E-10);Assert.assertTrue(""two sample homoscedastic t-test reject"",testStatistic.homoscedasticTTest(sample1,sample2,0.49));Assert.assertTrue(""two sample homoscedastic t-test accept"",!testStatistic.homoscedasticTTest(sample1,sample2,0.48));}"
"org.apache.commons.math3.stat.inference.TTestTest.testSmallSamples",0,"@Test public void testSmallSamples(){double[]sample1={1d,3d};double[]sample2={4d,5d};Assert.assertEquals(-2.2360679775,testStatistic.t(sample1,sample2),1E-10);Assert.assertEquals(0.198727388935,testStatistic.tTest(sample1,sample2),1E-10);}"
"org.apache.commons.math3.stat.inference.TTestTest.testPaired",0,"@Test public void testPaired(){double[]sample1={1d,3d,5d,7d};double[]sample2={0d,6d,11d,2d};double[]sample3={5d,7d,8d,10d};Assert.assertEquals(-0.3133,testStatistic.pairedT(sample1,sample2),1E-4);Assert.assertEquals(0.774544295819,testStatistic.pairedTTest(sample1,sample2),1E-10);Assert.assertEquals(0.001208,testStatistic.pairedTTest(sample1,sample3),1E-6);Assert.assertFalse(testStatistic.pairedTTest(sample1,sample3,.001));Assert.assertTrue(testStatistic.pairedTTest(sample1,sample3,.002));}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound",0,"/** * Test lower bound getter. */@Test public void testGetLowerBound(){UniformRealDistribution distribution=makeDistribution();Assert.assertEquals(-0.5,distribution.getSupportLowerBound(),0);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound",0,"/** * Test upper bound getter. */@Test public void testGetUpperBound(){UniformRealDistribution distribution=makeDistribution();Assert.assertEquals(1.25,distribution.getSupportUpperBound(),0);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions1",0,"/** * Test pre-condition for equal lower/upper bound. */@Test(expected=NumberIsTooLargeException.class)public void testPreconditions1(){new UniformRealDistribution(0,0);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions2",0,"/** * Test pre-condition for lower bound larger than upper bound. */@Test(expected=NumberIsTooLargeException.class)public void testPreconditions2(){new UniformRealDistribution(1,0);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance",0,"/** * Test mean/variance. */@Test public void testMeanVariance(){UniformRealDistribution dist;dist=new UniformRealDistribution(0,1);Assert.assertEquals(dist.getNumericalMean(),0.5,0);Assert.assertEquals(dist.getNumericalVariance(),1 / 12.0,0);dist=new UniformRealDistribution(-1.5,0.6);Assert.assertEquals(dist.getNumericalMean(),-0.45,0);Assert.assertEquals(dist.getNumericalVariance(),0.3675,0);dist=new UniformRealDistribution(-0.5,1.25);Assert.assertEquals(dist.getNumericalMean(),0.375,0);Assert.assertEquals(dist.getNumericalVariance(),0.2552083333333333,0);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeDistribution",0,"/** * Check accuracy of analytical inverse CDF. Fails if a solver is used  with the default accuracy. */@Test public void testInverseCumulativeDistribution(){UniformRealDistribution dist=new UniformRealDistribution(0,1e-9);Assert.assertEquals(2.5e-10,dist.inverseCumulativeProbability(0.25),0);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.UniformRealDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimpleUnivariateValueChecker(1e-1,1e-2,0);}"
"org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimpleUnivariateValueChecker checker=new SimpleUnivariateValueChecker(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimpleUnivariateValueChecker checker=new SimpleUnivariateValueChecker(1e-8,1e-8);final UnivariatePointValuePair a=new UnivariatePointValuePair(1d,1d);final UnivariatePointValuePair b=new UnivariatePointValuePair(10d,10d);Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testWrongVariableIndex",0,"@Test(expected=NumberIsTooLargeException.class)public void testWrongVariableIndex(){new DerivativeStructure(3,1,3,1.0);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testMissingOrders",0,"@Test(expected=DimensionMismatchException.class)public void testMissingOrders(){new DerivativeStructure(3,1,0,1.0).getPartialDerivative(0,1);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTooLargeOrder",0,"@Test(expected=NumberIsTooLargeException.class)public void testTooLargeOrder(){new DerivativeStructure(3,1,0,1.0).getPartialDerivative(1,1,2);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testVariableWithoutDerivative0",0,"@Test public void testVariableWithoutDerivative0(){DerivativeStructure v=new DerivativeStructure(1,0,0,1.0);Assert.assertEquals(1.0,v.getValue(),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testVariableWithoutDerivative1",0,"@Test(expected=NumberIsTooLargeException.class)public void testVariableWithoutDerivative1(){DerivativeStructure v=new DerivativeStructure(1,0,0,1.0);Assert.assertEquals(1.0,v.getPartialDerivative(1),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testVariable",0,"@Test public void testVariable(){for (int maxOrder=1;maxOrder < 5;++maxOrder){checkF0F1(new DerivativeStructure(3,maxOrder,0,1.0),1.0,1.0,0.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,1,2.0),2.0,0.0,1.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,2,3.0),3.0,0.0,0.0,1.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testConstant",0,"@Test public void testConstant(){for (int maxOrder=1;maxOrder < 5;++maxOrder){checkF0F1(new DerivativeStructure(3,maxOrder,FastMath.PI),FastMath.PI,0.0,0.0,0.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveAdd",0,"@Test public void testPrimitiveAdd(){for (int maxOrder=1;maxOrder < 5;++maxOrder){checkF0F1(new DerivativeStructure(3,maxOrder,0,1.0).add(5),6.0,1.0,0.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,1,2.0).add(5),7.0,0.0,1.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,2,3.0).add(5),8.0,0.0,0.0,1.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAdd",0,"@Test public void testAdd(){for (int maxOrder=1;maxOrder < 5;++maxOrder){DerivativeStructure x=new DerivativeStructure(3,maxOrder,0,1.0);DerivativeStructure y=new DerivativeStructure(3,maxOrder,1,2.0);DerivativeStructure z=new DerivativeStructure(3,maxOrder,2,3.0);DerivativeStructure xyz=x.add(y.add(z));checkF0F1(xyz,x.getValue()+ y.getValue()+ z.getValue(),1.0,1.0,1.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveSubtract",0,"@Test public void testPrimitiveSubtract(){for (int maxOrder=1;maxOrder < 5;++maxOrder){checkF0F1(new DerivativeStructure(3,maxOrder,0,1.0).subtract(5),-4.0,1.0,0.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,1,2.0).subtract(5),-3.0,0.0,1.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,2,3.0).subtract(5),-2.0,0.0,0.0,1.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSubtract",0,"@Test public void testSubtract(){for (int maxOrder=1;maxOrder < 5;++maxOrder){DerivativeStructure x=new DerivativeStructure(3,maxOrder,0,1.0);DerivativeStructure y=new DerivativeStructure(3,maxOrder,1,2.0);DerivativeStructure z=new DerivativeStructure(3,maxOrder,2,3.0);DerivativeStructure xyz=x.subtract(y.subtract(z));checkF0F1(xyz,x.getValue()- (y.getValue()- z.getValue()),1.0,-1.0,1.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveMultiply",0,"@Test public void testPrimitiveMultiply(){for (int maxOrder=1;maxOrder < 5;++maxOrder){checkF0F1(new DerivativeStructure(3,maxOrder,0,1.0).multiply(5),5.0,5.0,0.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,1,2.0).multiply(5),10.0,0.0,5.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,2,3.0).multiply(5),15.0,0.0,0.0,5.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testMultiply",0,"@Test public void testMultiply(){for (int maxOrder=1;maxOrder < 5;++maxOrder){DerivativeStructure x=new DerivativeStructure(3,maxOrder,0,1.0);DerivativeStructure y=new DerivativeStructure(3,maxOrder,1,2.0);DerivativeStructure z=new DerivativeStructure(3,maxOrder,2,3.0);DerivativeStructure xyz=x.multiply(y.multiply(z));for (int i=0;i <= maxOrder;++i){for (int j=0;j <= maxOrder;++j){for (int k=0;k <= maxOrder;++k){if (i + j + k <= maxOrder){Assert.assertEquals((i == 0 ? x.getValue(): (i == 1 ? 1.0 : 0.0))* (j == 0 ? y.getValue(): (j == 1 ? 1.0 : 0.0))* (k == 0 ? z.getValue(): (k == 1 ? 1.0 : 0.0)),xyz.getPartialDerivative(i,j,k),1.0e-15);}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testNegate",0,"@Test public void testNegate(){for (int maxOrder=1;maxOrder < 5;++maxOrder){checkF0F1(new DerivativeStructure(3,maxOrder,0,1.0).negate(),-1.0,-1.0,0.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,1,2.0).negate(),-2.0,0.0,-1.0,0.0);checkF0F1(new DerivativeStructure(3,maxOrder,2,3.0).negate(),-3.0,0.0,0.0,-1.0);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testReciprocal",0,"@Test public void testReciprocal(){for (double x=0.1;x < 1.2;x+=0.1){DerivativeStructure r=new DerivativeStructure(1,6,0,x).reciprocal();Assert.assertEquals(1 / x,r.getValue(),1.0e-15);for (int i=1;i < r.getOrder();++i){double expected=ArithmeticUtils.pow(-1,i)* ArithmeticUtils.factorial(i)/ FastMath.pow(x,i + 1);Assert.assertEquals(expected,r.getPartialDerivative(i),1.0e-15 * FastMath.abs(expected));}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPow",0,"@Test public void testPow(){for (int maxOrder=1;maxOrder < 5;++maxOrder){for (int n=0;n < 10;++n){DerivativeStructure x=new DerivativeStructure(3,maxOrder,0,1.0);DerivativeStructure y=new DerivativeStructure(3,maxOrder,1,2.0);DerivativeStructure z=new DerivativeStructure(3,maxOrder,2,3.0);List<DerivativeStructure> list=Arrays.asList(x,y,z,x.add(y).add(z),x.multiply(y).multiply(z));if (n == 0){for(DerivativeStructure ds : list){checkEquals(ds.getField().getOne(),ds.pow(n),1.0e-15);}}else       if (n == 1){for(DerivativeStructure ds : list){checkEquals(ds,ds.pow(n),1.0e-15);}}else {for(DerivativeStructure ds : list){DerivativeStructure p=ds.getField().getOne();for (int i=0;i < n;++i){p=p.multiply(ds);}checkEquals(p,ds.pow(n),1.0e-15);}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testExpression",0,"@Test public void testExpression(){double epsilon=2.5e-13;for (double x=0;x < 2;x+=0.2){DerivativeStructure dsX=new DerivativeStructure(3,5,0,x);for (double y=0;y < 2;y+=0.2){DerivativeStructure dsY=new DerivativeStructure(3,5,1,y);for (double z=0;z > -2;z-=0.2){DerivativeStructure dsZ=new DerivativeStructure(3,5,2,z);DerivativeStructure ds=new DerivativeStructure(1,dsX,5,dsX.multiply(dsY),-2,dsZ,1,new DerivativeStructure(8,dsZ.multiply(dsX),-1,dsY).pow(3));DerivativeStructure dsOther=new DerivativeStructure(1,dsX,5,dsX.multiply(dsY),-2,dsZ).add(new DerivativeStructure(8,dsZ.multiply(dsX),-1,dsY).pow(3));double f=x + 5 * x * y - 2 * z + FastMath.pow(8 * z * x - y,3);Assert.assertEquals(f,ds.getValue(),FastMath.abs(epsilon * f));Assert.assertEquals(f,dsOther.getValue(),FastMath.abs(epsilon * f));double dfdx=1 + 5 * y + 24 * z * FastMath.pow(8 * z * x - y,2);Assert.assertEquals(dfdx,ds.getPartialDerivative(1,0,0),FastMath.abs(epsilon * dfdx));Assert.assertEquals(dfdx,dsOther.getPartialDerivative(1,0,0),FastMath.abs(epsilon * dfdx));double dfdxdy=5 + 48 * z * (y - 8 * z * x);Assert.assertEquals(dfdxdy,ds.getPartialDerivative(1,1,0),FastMath.abs(epsilon * dfdxdy));Assert.assertEquals(dfdxdy,dsOther.getPartialDerivative(1,1,0),FastMath.abs(epsilon * dfdxdy));double dfdxdydz=48 * (y - 16 * z * x);Assert.assertEquals(dfdxdydz,ds.getPartialDerivative(1,1,1),FastMath.abs(epsilon * dfdxdydz));Assert.assertEquals(dfdxdydz,dsOther.getPartialDerivative(1,1,1),FastMath.abs(epsilon * dfdxdydz));}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCompositionOneVariableX",0,"@Test public void testCompositionOneVariableX(){double epsilon=1.0e-13;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);for (double y=0.1;y < 1.2;y+=0.1){DerivativeStructure dsY=new DerivativeStructure(1,maxOrder,y);DerivativeStructure f=dsX.divide(dsY).sqrt();double f0=FastMath.sqrt(x / y);Assert.assertEquals(f0,f.getValue(),FastMath.abs(epsilon * f0));if (f.getOrder()> 0){double f1=1 / (2 * FastMath.sqrt(x * y));Assert.assertEquals(f1,f.getPartialDerivative(1),FastMath.abs(epsilon * f1));if (f.getOrder()> 1){double f2=-f1 / (2 * x);Assert.assertEquals(f2,f.getPartialDerivative(2),FastMath.abs(epsilon * f2));if (f.getOrder()> 2){double f3=(f0 + x / (2 * y * f0))/ (4 * x * x* x);Assert.assertEquals(f3,f.getPartialDerivative(3),FastMath.abs(epsilon * f3));}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTrigo",0,"@Test public void testTrigo(){double epsilon=2.0e-12;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(3,maxOrder,0,x);for (double y=0.1;y < 1.2;y+=0.1){DerivativeStructure dsY=new DerivativeStructure(3,maxOrder,1,y);for (double z=0.1;z < 1.2;z+=0.1){DerivativeStructure dsZ=new DerivativeStructure(3,maxOrder,2,z);DerivativeStructure f=dsX.divide(dsY.cos().add(dsZ.tan())).sin();double a=FastMath.cos(y)+ FastMath.tan(z);double f0=FastMath.sin(x / a);Assert.assertEquals(f0,f.getValue(),FastMath.abs(epsilon * f0));if (f.getOrder()> 0){double dfdx=FastMath.cos(x / a)/ a;Assert.assertEquals(dfdx,f.getPartialDerivative(1,0,0),FastMath.abs(epsilon * dfdx));double dfdy=x * FastMath.sin(y)* dfdx / a;Assert.assertEquals(dfdy,f.getPartialDerivative(0,1,0),FastMath.abs(epsilon * dfdy));double cz=FastMath.cos(z);double cz2=cz * cz;double dfdz=-x * dfdx / (a * cz2);Assert.assertEquals(dfdz,f.getPartialDerivative(0,0,1),FastMath.abs(epsilon * dfdz));if (f.getOrder()> 1){double df2dx2=-(f0 / (a * a));Assert.assertEquals(df2dx2,f.getPartialDerivative(2,0,0),FastMath.abs(epsilon * df2dx2));double df2dy2=x * FastMath.cos(y)* dfdx / a - x * x * FastMath.sin(y)* FastMath.sin(y)* f0 / (a * a * a* a)+ 2 * FastMath.sin(y)* dfdy / a;Assert.assertEquals(df2dy2,f.getPartialDerivative(0,2,0),FastMath.abs(epsilon * df2dy2));double c4=cz2 * cz2;double df2dz2=x * (2 * a * (1 - a * cz * FastMath.sin(z))* dfdx - x * f0 / a)/ (a * a * a* c4);Assert.assertEquals(df2dz2,f.getPartialDerivative(0,0,2),FastMath.abs(epsilon * df2dz2));double df2dxdy=dfdy / x - x * FastMath.sin(y)* f0 / (a * a * a);Assert.assertEquals(df2dxdy,f.getPartialDerivative(1,1,0),FastMath.abs(epsilon * df2dxdy));}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSqrtDefinition",0,"@Test public void testSqrtDefinition(){double[]epsilon=new double[]{5.0e-16,5.0e-16,2.0e-15,5.0e-14,2.0e-12};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure sqrt1=dsX.pow(0.5);DerivativeStructure sqrt2=dsX.sqrt();DerivativeStructure zero=sqrt1.subtract(sqrt2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testRootNSingularity",0,"@Test public void testRootNSingularity(){for (int n=2;n < 10;++n){for (int maxOrder=0;maxOrder < 12;++maxOrder){DerivativeStructure dsZero=new DerivativeStructure(1,maxOrder,0,0.0);DerivativeStructure rootN=dsZero.rootN(n);Assert.assertEquals(0.0,rootN.getValue(),1.0e-20);if (maxOrder > 0){Assert.assertTrue(Double.isInfinite(rootN.getPartialDerivative(1)));Assert.assertTrue(rootN.getPartialDerivative(1)> 0);for (int order=2;order <= maxOrder;++order){Assert.assertTrue(Double.isNaN(rootN.getPartialDerivative(order)));}}double[]gDerivatives=new double[1 + maxOrder];gDerivatives[0]=0.0;for (int k=1;k <= maxOrder;++k){gDerivatives[k]=FastMath.pow(-1.0,k + 1);}DerivativeStructure correctRoot=new DerivativeStructure(1,maxOrder,gDerivatives).rootN(n);Assert.assertEquals(0.0,correctRoot.getValue(),1.0e-20);if (maxOrder > 0){Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(1)));Assert.assertTrue(correctRoot.getPartialDerivative(1)> 0);for (int order=2;order <= maxOrder;++order){Assert.assertTrue(Double.isInfinite(correctRoot.getPartialDerivative(order)));if ((order % 2)== 0){Assert.assertTrue(correctRoot.getPartialDerivative(order)< 0);}else {Assert.assertTrue(correctRoot.getPartialDerivative(order)> 0);}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSqrtPow2",0,"@Test public void testSqrtPow2(){double[]epsilon=new double[]{1.0e-16,3.0e-16,2.0e-15,6.0e-14,6.0e-12};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.multiply(dsX).sqrt();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCbrtDefinition",0,"@Test public void testCbrtDefinition(){double[]epsilon=new double[]{4.0e-16,9.0e-16,6.0e-15,2.0e-13,4.0e-12};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure cbrt1=dsX.pow(1.0 / 3.0);DerivativeStructure cbrt2=dsX.cbrt();DerivativeStructure zero=cbrt1.subtract(cbrt2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCbrtPow3",0,"@Test public void testCbrtPow3(){double[]epsilon=new double[]{1.0e-16,5.0e-16,8.0e-15,3.0e-13,4.0e-11};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.multiply(dsX.multiply(dsX)).cbrt();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPowReciprocalPow",0,"@Test public void testPowReciprocalPow(){double[]epsilon=new double[]{2.0e-15,2.0e-14,3.0e-13,8.0e-12,3.0e-10};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.01){DerivativeStructure dsX=new DerivativeStructure(2,maxOrder,0,x);for (double y=0.1;y < 1.2;y+=0.01){DerivativeStructure dsY=new DerivativeStructure(2,maxOrder,1,y);DerivativeStructure rebuiltX=dsX.pow(dsY).pow(dsY.reciprocal());DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){for (int m=0;m <= maxOrder;++m){if (n + m <= maxOrder){Assert.assertEquals(0.0,zero.getPartialDerivative(n,m),epsilon[n + m]);}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testHypotDefinition",0,"@Test public void testHypotDefinition(){double epsilon=1.0e-20;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=-1.7;x < 2;x+=0.2){DerivativeStructure dsX=new DerivativeStructure(2,maxOrder,0,x);for (double y=-1.7;y < 2;y+=0.2){DerivativeStructure dsY=new DerivativeStructure(2,maxOrder,1,y);DerivativeStructure hypot=DerivativeStructure.hypot(dsY,dsX);DerivativeStructure ref=dsX.multiply(dsX).add(dsY.multiply(dsY)).sqrt();DerivativeStructure zero=hypot.subtract(ref);for (int n=0;n <= maxOrder;++n){for (int m=0;m <= maxOrder;++m){if (n + m <= maxOrder){Assert.assertEquals(0,zero.getPartialDerivative(n,m),epsilon);}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testHypotNoOverflow",0,"@Test public void testHypotNoOverflow(){DerivativeStructure dsX=new DerivativeStructure(2,5,0,+3.0e250);DerivativeStructure dsY=new DerivativeStructure(2,5,1,-4.0e250);DerivativeStructure hypot=DerivativeStructure.hypot(dsX,dsY);Assert.assertEquals(5.0e250,hypot.getValue(),1.0e235);Assert.assertEquals(dsX.getValue()/ hypot.getValue(),hypot.getPartialDerivative(1,0),1.0e-10);Assert.assertEquals(dsY.getValue()/ hypot.getValue(),hypot.getPartialDerivative(0,1),1.0e-10);DerivativeStructure sqrt=dsX.multiply(dsX).add(dsY.multiply(dsY)).sqrt();Assert.assertTrue(Double.isInfinite(sqrt.getValue()));}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testHypotNeglectible",0,"@Test public void testHypotNeglectible(){DerivativeStructure dsSmall=new DerivativeStructure(2,5,0,+3.0e-10);DerivativeStructure dsLarge=new DerivativeStructure(2,5,1,-4.0e25);Assert.assertEquals(dsLarge.abs().getValue(),DerivativeStructure.hypot(dsSmall,dsLarge).getValue(),1.0e-10);Assert.assertEquals(0,DerivativeStructure.hypot(dsSmall,dsLarge).getPartialDerivative(1,0),1.0e-10);Assert.assertEquals(-1,DerivativeStructure.hypot(dsSmall,dsLarge).getPartialDerivative(0,1),1.0e-10);Assert.assertEquals(dsLarge.abs().getValue(),DerivativeStructure.hypot(dsLarge,dsSmall).getValue(),1.0e-10);Assert.assertEquals(0,DerivativeStructure.hypot(dsLarge,dsSmall).getPartialDerivative(1,0),1.0e-10);Assert.assertEquals(-1,DerivativeStructure.hypot(dsLarge,dsSmall).getPartialDerivative(0,1),1.0e-10);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testHypotSpecial",0,"@Test public void testHypotSpecial(){Assert.assertTrue(Double.isNaN(DerivativeStructure.hypot(new DerivativeStructure(2,5,0,Double.NaN),new DerivativeStructure(2,5,0,+3.0e250)).getValue()));Assert.assertTrue(Double.isNaN(DerivativeStructure.hypot(new DerivativeStructure(2,5,0,+3.0e250),new DerivativeStructure(2,5,0,Double.NaN)).getValue()));Assert.assertTrue(Double.isInfinite(DerivativeStructure.hypot(new DerivativeStructure(2,5,0,Double.POSITIVE_INFINITY),new DerivativeStructure(2,5,0,+3.0e250)).getValue()));Assert.assertTrue(Double.isInfinite(DerivativeStructure.hypot(new DerivativeStructure(2,5,0,+3.0e250),new DerivativeStructure(2,5,0,Double.POSITIVE_INFINITY)).getValue()));}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testPrimitiveRemainder",0,"@Test public void testPrimitiveRemainder(){double epsilon=1.0e-15;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=-1.7;x < 2;x+=0.2){DerivativeStructure dsX=new DerivativeStructure(2,maxOrder,0,x);for (double y=-1.7;y < 2;y+=0.2){DerivativeStructure remainder=dsX.remainder(y);DerivativeStructure ref=dsX.subtract(x - FastMath.IEEEremainder(x,y));DerivativeStructure zero=remainder.subtract(ref);for (int n=0;n <= maxOrder;++n){for (int m=0;m <= maxOrder;++m){if (n + m <= maxOrder){Assert.assertEquals(0,zero.getPartialDerivative(n,m),epsilon);}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testRemainder",0,"@Test public void testRemainder(){double epsilon=2.0e-15;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=-1.7;x < 2;x+=0.2){DerivativeStructure dsX=new DerivativeStructure(2,maxOrder,0,x);for (double y=-1.7;y < 2;y+=0.2){DerivativeStructure dsY=new DerivativeStructure(2,maxOrder,1,y);DerivativeStructure remainder=dsX.remainder(dsY);DerivativeStructure ref=dsX.subtract(dsY.multiply((x - FastMath.IEEEremainder(x,y))/ y));DerivativeStructure zero=remainder.subtract(ref);for (int n=0;n <= maxOrder;++n){for (int m=0;m <= maxOrder;++m){if (n + m <= maxOrder){Assert.assertEquals(0,zero.getPartialDerivative(n,m),epsilon);}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testExp",0,"@Test public void testExp(){double[]epsilon=new double[]{1.0e-16,1.0e-16,1.0e-16,1.0e-16,1.0e-16};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){double refExp=FastMath.exp(x);DerivativeStructure exp=new DerivativeStructure(1,maxOrder,0,x).exp();for (int n=0;n <= maxOrder;++n){Assert.assertEquals(refExp,exp.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testExpm1Definition",0,"@Test public void testExpm1Definition(){double epsilon=3.0e-16;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure expm11=dsX.expm1();DerivativeStructure expm12=dsX.exp().subtract(dsX.getField().getOne());DerivativeStructure zero=expm11.subtract(expm12);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog",0,"@Test public void testLog(){double[]epsilon=new double[]{1.0e-16,1.0e-16,3.0e-14,7.0e-13,3.0e-11};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure log=new DerivativeStructure(1,maxOrder,0,x).log();Assert.assertEquals(FastMath.log(x),log.getValue(),epsilon[0]);for (int n=1;n <= maxOrder;++n){double refDer=-ArithmeticUtils.factorial(n - 1)/ FastMath.pow(-x,n);Assert.assertEquals(refDer,log.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog1pDefinition",0,"@Test public void testLog1pDefinition(){double epsilon=3.0e-16;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure log1p1=dsX.log1p();DerivativeStructure log1p2=dsX.add(dsX.getField().getOne()).log();DerivativeStructure zero=log1p1.subtract(log1p2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog10Definition",0,"@Test public void testLog10Definition(){double[]epsilon=new double[]{3.0e-16,3.0e-16,8.0e-15,3.0e-13,8.0e-12};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure log101=dsX.log10();DerivativeStructure log102=dsX.log().divide(FastMath.log(10.0));DerivativeStructure zero=log101.subtract(log102);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLogExp",0,"@Test public void testLogExp(){double[]epsilon=new double[]{2.0e-16,2.0e-16,3.0e-16,2.0e-15,6.0e-15};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.exp().log();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog1pExpm1",0,"@Test public void testLog1pExpm1(){double[]epsilon=new double[]{6.0e-17,3.0e-16,5.0e-16,9.0e-16,6.0e-15};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.expm1().log1p();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLog10Power",0,"@Test public void testLog10Power(){double[]epsilon=new double[]{3.0e-16,3.0e-16,9.0e-16,6.0e-15,6.0e-14};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=new DerivativeStructure(1,maxOrder,10.0).pow(dsX).log10();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinCos",0,"@Test public void testSinCos(){double epsilon=5.0e-16;for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure sin=dsX.sin();DerivativeStructure cos=dsX.cos();double s=FastMath.sin(x);double c=FastMath.cos(x);for (int n=0;n <= maxOrder;++n){switch (n % 4){case 0:          Assert.assertEquals(s,sin.getPartialDerivative(n),epsilon);Assert.assertEquals(c,cos.getPartialDerivative(n),epsilon);break;case 1:    Assert.assertEquals(c,sin.getPartialDerivative(n),epsilon);Assert.assertEquals(-s,cos.getPartialDerivative(n),epsilon);break;case 2:Assert.assertEquals(-s,sin.getPartialDerivative(n),epsilon);Assert.assertEquals(-c,cos.getPartialDerivative(n),epsilon);break;default:Assert.assertEquals(-c,sin.getPartialDerivative(n),epsilon);Assert.assertEquals(s,cos.getPartialDerivative(n),epsilon);break;}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinAsin",0,"@Test public void testSinAsin(){double[]epsilon=new double[]{3.0e-16,5.0e-16,3.0e-15,2.0e-14,4.0e-13};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.sin().asin();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCosAcos",0,"@Test public void testCosAcos(){double[]epsilon=new double[]{6.0e-16,6.0e-15,2.0e-13,4.0e-12,2.0e-10};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.cos().acos();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTanAtan",0,"@Test public void testTanAtan(){double[]epsilon=new double[]{6.0e-17,2.0e-16,2.0e-15,4.0e-14,2.0e-12};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.tan().atan();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTangentDefinition",0,"@Test public void testTangentDefinition(){double[]epsilon=new double[]{5.0e-16,2.0e-15,3.0e-14,5.0e-13,2.0e-11};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure tan1=dsX.sin().divide(dsX.cos());DerivativeStructure tan2=dsX.tan();DerivativeStructure zero=tan1.subtract(tan2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2",0,"@Test public void testAtan2(){double[]epsilon=new double[]{5.0e-16,3.0e-15,2.2e-14,1.0e-12,8.0e-11};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=-1.7;x < 2;x+=0.2){DerivativeStructure dsX=new DerivativeStructure(2,maxOrder,0,x);for (double y=-1.7;y < 2;y+=0.2){DerivativeStructure dsY=new DerivativeStructure(2,maxOrder,1,y);DerivativeStructure atan2=DerivativeStructure.atan2(dsY,dsX);DerivativeStructure ref=dsY.divide(dsX).atan();if (x < 0){ref=(y < 0)? ref.subtract(FastMath.PI): ref.add(FastMath.PI);}DerivativeStructure zero=atan2.subtract(ref);for (int n=0;n <= maxOrder;++n){for (int m=0;m <= maxOrder;++m){if (n + m <= maxOrder){Assert.assertEquals(0,zero.getPartialDerivative(n,m),epsilon[n + m]);}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAtan2SpecialCases",0,"@Test public void testAtan2SpecialCases(){DerivativeStructure pp=DerivativeStructure.atan2(new DerivativeStructure(2,2,1,+0.0),new DerivativeStructure(2,2,1,+0.0));Assert.assertEquals(0,pp.getValue(),1.0e-15);Assert.assertEquals(+1,FastMath.copySign(1,pp.getValue()),1.0e-15);DerivativeStructure pn=DerivativeStructure.atan2(new DerivativeStructure(2,2,1,+0.0),new DerivativeStructure(2,2,1,-0.0));Assert.assertEquals(FastMath.PI,pn.getValue(),1.0e-15);DerivativeStructure np=DerivativeStructure.atan2(new DerivativeStructure(2,2,1,-0.0),new DerivativeStructure(2,2,1,+0.0));Assert.assertEquals(0,np.getValue(),1.0e-15);Assert.assertEquals(-1,FastMath.copySign(1,np.getValue()),1.0e-15);DerivativeStructure nn=DerivativeStructure.atan2(new DerivativeStructure(2,2,1,-0.0),new DerivativeStructure(2,2,1,-0.0));Assert.assertEquals(-FastMath.PI,nn.getValue(),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinhDefinition",0,"@Test public void testSinhDefinition(){double[]epsilon=new double[]{3.0e-16,3.0e-16,5.0e-16,2.0e-15,6.0e-15};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure sinh1=dsX.exp().subtract(dsX.exp().reciprocal()).multiply(0.5);DerivativeStructure sinh2=dsX.sinh();DerivativeStructure zero=sinh1.subtract(sinh2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCoshDefinition",0,"@Test public void testCoshDefinition(){double[]epsilon=new double[]{3.0e-16,3.0e-16,5.0e-16,2.0e-15,6.0e-15};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure cosh1=dsX.exp().add(dsX.exp().reciprocal()).multiply(0.5);DerivativeStructure cosh2=dsX.cosh();DerivativeStructure zero=cosh1.subtract(cosh2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTanhDefinition",0,"@Test public void testTanhDefinition(){double[]epsilon=new double[]{3.0e-16,5.0e-16,7.0e-16,3.0e-15,2.0e-14};for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure tanh1=dsX.exp().subtract(dsX.exp().reciprocal()).divide(dsX.exp().add(dsX.exp().reciprocal()));DerivativeStructure tanh2=dsX.tanh();DerivativeStructure zero=tanh1.subtract(tanh2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSinhAsinh",0,"@Test public void testSinhAsinh(){double[]epsilon=new double[]{3.0e-16,3.0e-16,4.0e-16,7.0e-16,3.0e-15,8.0e-15};for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.sinh().asinh();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCoshAcosh",0,"@Test public void testCoshAcosh(){double[]epsilon=new double[]{2.0e-15,1.0e-14,2.0e-13,6.0e-12,3.0e-10,2.0e-8};for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.cosh().acosh();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTanhAtanh",0,"@Test public void testTanhAtanh(){double[]epsilon=new double[]{3.0e-16,2.0e-16,7.0e-16,4.0e-15,3.0e-14,4.0e-13};for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.tanh().atanh();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCompositionOneVariableY",0,"@Test public void testCompositionOneVariableY(){double epsilon=1.0e-13;for (int maxOrder=0;maxOrder < 5;++maxOrder){for (double x=0.1;x < 1.2;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,x);for (double y=0.1;y < 1.2;y+=0.1){DerivativeStructure dsY=new DerivativeStructure(1,maxOrder,0,y);DerivativeStructure f=dsX.divide(dsY).sqrt();double f0=FastMath.sqrt(x / y);Assert.assertEquals(f0,f.getValue(),FastMath.abs(epsilon * f0));if (f.getOrder()> 0){double f1=-x / (2 * y * y* f0);Assert.assertEquals(f1,f.getPartialDerivative(1),FastMath.abs(epsilon * f1));if (f.getOrder()> 1){double f2=(f0 - x / (4 * y * f0))/ (y * y);Assert.assertEquals(f2,f.getPartialDerivative(2),FastMath.abs(epsilon * f2));if (f.getOrder()> 2){double f3=(x / (8 * y * f0)- 2 * f0)/ (y * y * y);Assert.assertEquals(f3,f.getPartialDerivative(3),FastMath.abs(epsilon * f3));}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTaylorPolynomial",0,"@Test public void testTaylorPolynomial(){for (double x=0;x < 1.2;x+=0.1){DerivativeStructure dsX=new DerivativeStructure(3,4,0,x);for (double y=0;y < 1.2;y+=0.2){DerivativeStructure dsY=new DerivativeStructure(3,4,1,y);for (double z=0;z < 1.2;z+=0.2){DerivativeStructure dsZ=new DerivativeStructure(3,4,2,z);DerivativeStructure f=dsX.multiply(dsY).add(dsZ).multiply(dsX).multiply(dsY);for (double dx=-0.2;dx < 0.2;dx+=0.2){for (double dy=-0.2;dy < 0.2;dy+=0.1){for (double dz=-0.2;dz < 0.2;dz+=0.1){double ref=(x + dx)* (y + dy)* ((x + dx)* (y + dy)+ (z + dz));Assert.assertEquals(ref,f.taylor(dx,dy,dz),2.0e-15);}}}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testTaylorAtan2",0,"@Test public void testTaylorAtan2(){double[]expected=new double[]{0.214,0.0241,0.00422,6.48e-4,8.04e-5};double x0=0.1;double y0=-0.3;for (int maxOrder=0;maxOrder < 5;++maxOrder){DerivativeStructure dsX=new DerivativeStructure(2,maxOrder,0,x0);DerivativeStructure dsY=new DerivativeStructure(2,maxOrder,1,y0);DerivativeStructure atan2=DerivativeStructure.atan2(dsY,dsX);double maxError=0;for (double dx=-0.05;dx < 0.05;dx+=0.001){for (double dy=-0.05;dy < 0.05;dy+=0.001){double ref=FastMath.atan2(y0 + dy,x0 + dx);maxError=FastMath.max(maxError,FastMath.abs(ref - atan2.taylor(dx,dy)));}}Assert.assertEquals(0.0,expected[maxOrder]- maxError,0.01 * expected[maxOrder]);}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testAbs",0,"@Test public void testAbs(){DerivativeStructure minusOne=new DerivativeStructure(1,1,0,-1.0);Assert.assertEquals(+1.0,minusOne.abs().getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,minusOne.abs().getPartialDerivative(1),1.0e-15);DerivativeStructure plusOne=new DerivativeStructure(1,1,0,+1.0);Assert.assertEquals(+1.0,plusOne.abs().getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,plusOne.abs().getPartialDerivative(1),1.0e-15);DerivativeStructure minusZero=new DerivativeStructure(1,1,0,-0.0);Assert.assertEquals(+0.0,minusZero.abs().getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,minusZero.abs().getPartialDerivative(1),1.0e-15);DerivativeStructure plusZero=new DerivativeStructure(1,1,0,+0.0);Assert.assertEquals(+0.0,plusZero.abs().getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,plusZero.abs().getPartialDerivative(1),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSignum",0,"@Test public void testSignum(){DerivativeStructure minusOne=new DerivativeStructure(1,1,0,-1.0);Assert.assertEquals(-1.0,minusOne.signum().getPartialDerivative(0),1.0e-15);Assert.assertEquals(0.0,minusOne.signum().getPartialDerivative(1),1.0e-15);DerivativeStructure plusOne=new DerivativeStructure(1,1,0,+1.0);Assert.assertEquals(+1.0,plusOne.signum().getPartialDerivative(0),1.0e-15);Assert.assertEquals(0.0,plusOne.signum().getPartialDerivative(1),1.0e-15);DerivativeStructure minusZero=new DerivativeStructure(1,1,0,-0.0);Assert.assertEquals(-0.0,minusZero.signum().getPartialDerivative(0),1.0e-15);Assert.assertTrue(Double.doubleToLongBits(minusZero.signum().getValue())< 0);Assert.assertEquals(0.0,minusZero.signum().getPartialDerivative(1),1.0e-15);DerivativeStructure plusZero=new DerivativeStructure(1,1,0,+0.0);Assert.assertEquals(+0.0,plusZero.signum().getPartialDerivative(0),1.0e-15);Assert.assertTrue(Double.doubleToLongBits(plusZero.signum().getValue())== 0);Assert.assertEquals(0.0,plusZero.signum().getPartialDerivative(1),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCeilFloorRintLong",0,"@Test public void testCeilFloorRintLong(){DerivativeStructure x=new DerivativeStructure(1,1,0,-1.5);Assert.assertEquals(-1.5,x.getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,x.getPartialDerivative(1),1.0e-15);Assert.assertEquals(-1.0,x.ceil().getPartialDerivative(0),1.0e-15);Assert.assertEquals(+0.0,x.ceil().getPartialDerivative(1),1.0e-15);Assert.assertEquals(-2.0,x.floor().getPartialDerivative(0),1.0e-15);Assert.assertEquals(+0.0,x.floor().getPartialDerivative(1),1.0e-15);Assert.assertEquals(-2.0,x.rint().getPartialDerivative(0),1.0e-15);Assert.assertEquals(+0.0,x.rint().getPartialDerivative(1),1.0e-15);Assert.assertEquals(-2.0,x.subtract(x.getField().getOne()).rint().getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1l,x.round());}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCopySign",0,"@Test public void testCopySign(){DerivativeStructure minusOne=new DerivativeStructure(1,1,0,-1.0);Assert.assertEquals(+1.0,minusOne.copySign(+1.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,minusOne.copySign(+1.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(-1.0,minusOne.copySign(-1.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,minusOne.copySign(-1.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(+1.0,minusOne.copySign(+0.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,minusOne.copySign(+0.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(-1.0,minusOne.copySign(-0.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,minusOne.copySign(-0.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(+1.0,minusOne.copySign(Double.NaN).getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,minusOne.copySign(Double.NaN).getPartialDerivative(1),1.0e-15);DerivativeStructure plusOne=new DerivativeStructure(1,1,0,+1.0);Assert.assertEquals(+1.0,plusOne.copySign(+1.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,plusOne.copySign(+1.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(-1.0,plusOne.copySign(-1.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,plusOne.copySign(-1.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(+1.0,plusOne.copySign(+0.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,plusOne.copySign(+0.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(-1.0,plusOne.copySign(-0.0).getPartialDerivative(0),1.0e-15);Assert.assertEquals(-1.0,plusOne.copySign(-0.0).getPartialDerivative(1),1.0e-15);Assert.assertEquals(+1.0,plusOne.copySign(Double.NaN).getPartialDerivative(0),1.0e-15);Assert.assertEquals(+1.0,plusOne.copySign(Double.NaN).getPartialDerivative(1),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testToDegreesDefinition",0,"@Test public void testToDegreesDefinition(){double epsilon=3.0e-16;for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);Assert.assertEquals(FastMath.toDegrees(x),dsX.toDegrees().getValue(),epsilon);for (int n=1;n <= maxOrder;++n){if (n == 1){Assert.assertEquals(180 / FastMath.PI,dsX.toDegrees().getPartialDerivative(1),epsilon);}else {Assert.assertEquals(0.0,dsX.toDegrees().getPartialDerivative(n),epsilon);}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testToRadiansDefinition",0,"@Test public void testToRadiansDefinition(){double epsilon=3.0e-16;for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);Assert.assertEquals(FastMath.toRadians(x),dsX.toRadians().getValue(),epsilon);for (int n=1;n <= maxOrder;++n){if (n == 1){Assert.assertEquals(FastMath.PI / 180,dsX.toRadians().getPartialDerivative(1),epsilon);}else {Assert.assertEquals(0.0,dsX.toRadians().getPartialDerivative(n),epsilon);}}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testDegRad",0,"@Test public void testDegRad(){double epsilon=3.0e-16;for (int maxOrder=0;maxOrder < 6;++maxOrder){for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure rebuiltX=dsX.toDegrees().toRadians();DerivativeStructure zero=rebuiltX.subtract(dsX);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testComposeMismatchedDimensions",0,"@Test(expected=DimensionMismatchException.class)public void testComposeMismatchedDimensions(){new DerivativeStructure(1,3,0,1.2).compose(new double[3]);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testCompose",0,"@Test public void testCompose(){double[]epsilon=new double[]{1.0e-20,5.0e-14,2.0e-13,3.0e-13,2.0e-13,1.0e-20};PolynomialFunction poly=new PolynomialFunction(new double[]{1.0,2.0,3.0,4.0,5.0,6.0});for (int maxOrder=0;maxOrder < 6;++maxOrder){PolynomialFunction[]p=new PolynomialFunction[maxOrder + 1];p[0]=poly;for (int i=1;i <= maxOrder;++i){p[i]=p[i - 1].polynomialDerivative();}for (double x=0.1;x < 1.2;x+=0.001){DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);DerivativeStructure dsY1=dsX.getField().getZero();for (int i=poly.degree();i >= 0;--i){dsY1=dsY1.multiply(dsX).add(poly.getCoefficients()[i]);}double[]f=new double[maxOrder + 1];for (int i=0;i < f.length;++i){f[i]=p[i].value(x);}DerivativeStructure dsY2=dsX.compose(f);DerivativeStructure zero=dsY1.subtract(dsY2);for (int n=0;n <= maxOrder;++n){Assert.assertEquals(0.0,zero.getPartialDerivative(n),epsilon[n]);}}}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testField",0,"@Test public void testField(){for (int maxOrder=1;maxOrder < 5;++maxOrder){DerivativeStructure x=new DerivativeStructure(3,maxOrder,0,1.0);checkF0F1(x.getField().getZero(),0.0,0.0,0.0,0.0);checkF0F1(x.getField().getOne(),1.0,0.0,0.0,0.0);Assert.assertEquals(maxOrder,x.getField().getZero().getOrder());Assert.assertEquals(3,x.getField().getZero().getFreeParameters());Assert.assertEquals(DerivativeStructure.class,x.getField().getRuntimeClass());}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testOneParameterConstructor",0,"@Test public void testOneParameterConstructor(){double x=1.2;double cos=FastMath.cos(x);double sin=FastMath.sin(x);DerivativeStructure yRef=new DerivativeStructure(1,4,0,x).cos();try {new DerivativeStructure(1,4,0.0,0.0);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException dme){}catch(Exception e){Assert.fail(""wrong exceptionc caught "" + e.getClass().getName());}double[]derivatives=new double[]{cos,-sin,-cos,sin,cos};DerivativeStructure y=new DerivativeStructure(1,4,derivatives);checkEquals(yRef,y,1.0e-15);TestUtils.assertEquals(derivatives,y.getAllDerivatives(),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testOneOrderConstructor",0,"@Test public void testOneOrderConstructor(){double x=1.2;double y=2.4;double z=12.5;DerivativeStructure xRef=new DerivativeStructure(3,1,0,x);DerivativeStructure yRef=new DerivativeStructure(3,1,1,y);DerivativeStructure zRef=new DerivativeStructure(3,1,2,z);try {new DerivativeStructure(3,1,x + y - z,1.0,1.0);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException dme){}catch(Exception e){Assert.fail(""wrong exceptionc caught "" + e.getClass().getName());}double[]derivatives=new double[]{x + y - z,1.0,1.0,-1.0};DerivativeStructure t=new DerivativeStructure(3,1,derivatives);checkEquals(xRef.add(yRef.subtract(zRef)),t,1.0e-15);TestUtils.assertEquals(derivatives,xRef.add(yRef.subtract(zRef)).getAllDerivatives(),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination1DSDS",0,"@Test public void testLinearCombination1DSDS(){final DerivativeStructure[]a=new DerivativeStructure[]{new DerivativeStructure(6,1,0,-1321008684645961.0 / 268435456.0),new DerivativeStructure(6,1,1,-5774608829631843.0 / 268435456.0),new DerivativeStructure(6,1,2,-7645843051051357.0 / 8589934592.0)};final DerivativeStructure[]b=new DerivativeStructure[]{new DerivativeStructure(6,1,3,-5712344449280879.0 / 2097152.0),new DerivativeStructure(6,1,4,-4550117129121957.0 / 2097152.0),new DerivativeStructure(6,1,5,8846951984510141.0 / 131072.0)};final DerivativeStructure abSumInline=a[0].linearCombination(a[0],b[0],a[1],b[1],a[2],b[2]);final DerivativeStructure abSumArray=a[0].linearCombination(a,b);Assert.assertEquals(abSumInline.getValue(),abSumArray.getValue(),0);Assert.assertEquals(-1.8551294182586248737720779899,abSumInline.getValue(),1.0e-15);Assert.assertEquals(b[0].getValue(),abSumInline.getPartialDerivative(1,0,0,0,0,0),1.0e-15);Assert.assertEquals(b[1].getValue(),abSumInline.getPartialDerivative(0,1,0,0,0,0),1.0e-15);Assert.assertEquals(b[2].getValue(),abSumInline.getPartialDerivative(0,0,1,0,0,0),1.0e-15);Assert.assertEquals(a[0].getValue(),abSumInline.getPartialDerivative(0,0,0,1,0,0),1.0e-15);Assert.assertEquals(a[1].getValue(),abSumInline.getPartialDerivative(0,0,0,0,1,0),1.0e-15);Assert.assertEquals(a[2].getValue(),abSumInline.getPartialDerivative(0,0,0,0,0,1),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination1DoubleDS",0,"@Test public void testLinearCombination1DoubleDS(){final double[]a=new double[]{-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0};final DerivativeStructure[]b=new DerivativeStructure[]{new DerivativeStructure(3,1,0,-5712344449280879.0 / 2097152.0),new DerivativeStructure(3,1,1,-4550117129121957.0 / 2097152.0),new DerivativeStructure(3,1,2,8846951984510141.0 / 131072.0)};final DerivativeStructure abSumInline=b[0].linearCombination(a[0],b[0],a[1],b[1],a[2],b[2]);final DerivativeStructure abSumArray=b[0].linearCombination(a,b);Assert.assertEquals(abSumInline.getValue(),abSumArray.getValue(),0);Assert.assertEquals(-1.8551294182586248737720779899,abSumInline.getValue(),1.0e-15);Assert.assertEquals(a[0],abSumInline.getPartialDerivative(1,0,0),1.0e-15);Assert.assertEquals(a[1],abSumInline.getPartialDerivative(0,1,0),1.0e-15);Assert.assertEquals(a[2],abSumInline.getPartialDerivative(0,0,1),1.0e-15);}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination2DSDS",0,"@Test public void testLinearCombination2DSDS(){Well1024a random=new Well1024a(0xc6af886975069f11l);for (int i=0;i < 10000;++i){final DerivativeStructure[]u=new DerivativeStructure[4];final DerivativeStructure[]v=new DerivativeStructure[4];for (int j=0;j < u.length;++j){u[j]=new DerivativeStructure(u.length,1,j,1e17 * random.nextDouble());v[j]=new DerivativeStructure(u.length,1,1e17 * random.nextDouble());}DerivativeStructure lin=u[0].linearCombination(u[0],v[0],u[1],v[1]);double ref=u[0].getValue()* v[0].getValue()+ u[1].getValue()* v[1].getValue();Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));Assert.assertEquals(v[0].getValue(),lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));Assert.assertEquals(v[1].getValue(),lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));lin=u[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2]);ref=u[0].getValue()* v[0].getValue()+ u[1].getValue()* v[1].getValue()+ u[2].getValue()* v[2].getValue();Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));Assert.assertEquals(v[0].getValue(),lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));Assert.assertEquals(v[1].getValue(),lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));Assert.assertEquals(v[2].getValue(),lin.getPartialDerivative(0,0,1,0),1.0e-15 * FastMath.abs(v[2].getValue()));lin=u[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2],u[3],v[3]);ref=u[0].getValue()* v[0].getValue()+ u[1].getValue()* v[1].getValue()+ u[2].getValue()* v[2].getValue()+ u[3].getValue()* v[3].getValue();Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));Assert.assertEquals(v[0].getValue(),lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));Assert.assertEquals(v[1].getValue(),lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));Assert.assertEquals(v[2].getValue(),lin.getPartialDerivative(0,0,1,0),1.0e-15 * FastMath.abs(v[2].getValue()));Assert.assertEquals(v[3].getValue(),lin.getPartialDerivative(0,0,0,1),1.0e-15 * FastMath.abs(v[3].getValue()));}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testLinearCombination2DoubleDS",0,"@Test public void testLinearCombination2DoubleDS(){Well1024a random=new Well1024a(0xc6af886975069f11l);for (int i=0;i < 10000;++i){final double[]u=new double[4];final DerivativeStructure[]v=new DerivativeStructure[4];for (int j=0;j < u.length;++j){u[j]=1e17 * random.nextDouble();v[j]=new DerivativeStructure(u.length,1,j,1e17 * random.nextDouble());}DerivativeStructure lin=v[0].linearCombination(u[0],v[0],u[1],v[1]);double ref=u[0]* v[0].getValue()+ u[1]* v[1].getValue();Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));Assert.assertEquals(u[0],lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));Assert.assertEquals(u[1],lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));lin=v[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2]);ref=u[0]* v[0].getValue()+ u[1]* v[1].getValue()+ u[2]* v[2].getValue();Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));Assert.assertEquals(u[0],lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));Assert.assertEquals(u[1],lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));Assert.assertEquals(u[2],lin.getPartialDerivative(0,0,1,0),1.0e-15 * FastMath.abs(v[2].getValue()));lin=v[0].linearCombination(u[0],v[0],u[1],v[1],u[2],v[2],u[3],v[3]);ref=u[0]* v[0].getValue()+ u[1]* v[1].getValue()+ u[2]* v[2].getValue()+ u[3]* v[3].getValue();Assert.assertEquals(ref,lin.getValue(),1.0e-15 * FastMath.abs(ref));Assert.assertEquals(u[0],lin.getPartialDerivative(1,0,0,0),1.0e-15 * FastMath.abs(v[0].getValue()));Assert.assertEquals(u[1],lin.getPartialDerivative(0,1,0,0),1.0e-15 * FastMath.abs(v[1].getValue()));Assert.assertEquals(u[2],lin.getPartialDerivative(0,0,1,0),1.0e-15 * FastMath.abs(v[2].getValue()));Assert.assertEquals(u[3],lin.getPartialDerivative(0,0,0,1),1.0e-15 * FastMath.abs(v[3].getValue()));}}"
"org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest.testSerialization",0,"@Test public void testSerialization(){DerivativeStructure a=new DerivativeStructure(3,2,0,1.3);DerivativeStructure b=(DerivativeStructure)TestUtils.serializeAndRecover(a);Assert.assertEquals(a.getFreeParameters(),b.getFreeParameters());Assert.assertEquals(a.getOrder(),b.getOrder());checkEquals(a,b,1.0e-15);}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions1",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions1(){new ZipfDistribution(0,1);}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testPreconditions2",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions2(){new ZipfDistribution(1,0);}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;ZipfDistribution dist;dist=new ZipfDistribution(2,0.5);Assert.assertEquals(dist.getNumericalMean(),FastMath.sqrt(2),tol);Assert.assertEquals(dist.getNumericalVariance(),0.24264068711928521,tol);}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.ZipfDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.analysis.integration.MidPointIntegratorTest.testLowAccuracy",0,"/** * Test of integrator for the sine function.*/@Test public void testLowAccuracy(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new MidPointIntegrator(0.01,1.0e-10,2,4);double min=-10;double max=-9;double expected=-3697001.0 / 48.0;double tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());double result=integrator.integrate(Integer.MAX_VALUE,f,min,max);Assert.assertTrue(integrator.getEvaluations()< Integer.MAX_VALUE / 2);Assert.assertTrue(integrator.getIterations()< MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.MidPointIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateIntegrator integrator=new MidPointIntegrator();double min=0;double max=FastMath.PI;double expected=2;double tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());double result=integrator.integrate(Integer.MAX_VALUE,f,min,max);Assert.assertTrue(integrator.getEvaluations()< Integer.MAX_VALUE / 2);Assert.assertTrue(integrator.getIterations()< MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);Assert.assertEquals(expected,result,tolerance);min=-FastMath.PI / 3;max=0;expected=-0.5;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(Integer.MAX_VALUE,f,min,max);Assert.assertTrue(integrator.getEvaluations()< Integer.MAX_VALUE / 2);Assert.assertTrue(integrator.getIterations()< MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.MidPointIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new MidPointIntegrator();double min=0;double max=1;double expected=-1.0 / 48;double tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());double result=integrator.integrate(Integer.MAX_VALUE,f,min,max);Assert.assertTrue(integrator.getEvaluations()< Integer.MAX_VALUE / 2);Assert.assertTrue(integrator.getIterations()< MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);Assert.assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(Integer.MAX_VALUE,f,min,max);Assert.assertTrue(integrator.getEvaluations()< Integer.MAX_VALUE / 2);Assert.assertTrue(integrator.getIterations()< MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);Assert.assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(Integer.MAX_VALUE,f,min,max);Assert.assertTrue(integrator.getEvaluations()< Integer.MAX_VALUE / 2);Assert.assertTrue(integrator.getIterations()< MidPointIntegrator.MIDPOINT_MAX_ITERATIONS_COUNT / 2);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.MidPointIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/@Test public void testParameters(){UnivariateFunction f=new Sin();try {new MidPointIntegrator().integrate(1000,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {new MidPointIntegrator(5,4);Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");}catch(NumberIsTooSmallException ex){}try {new MidPointIntegrator(10,99);Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");}catch(NumberIsTooLargeException ex){}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testZero",0,"@Test public void testZero(){FieldHermiteInterpolator<BigFraction> interpolator=new FieldHermiteInterpolator<BigFraction>();interpolator.addSamplePoint(new BigFraction(0),new BigFraction[]{new BigFraction(0)});for (int x=-10;x < 10;x++){BigFraction y=interpolator.value(new BigFraction(x))[0];Assert.assertEquals(BigFraction.ZERO,y);BigFraction[][]derivatives=interpolator.derivatives(new BigFraction(x),1);Assert.assertEquals(BigFraction.ZERO,derivatives[0][0]);Assert.assertEquals(BigFraction.ZERO,derivatives[1][0]);}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testQuadratic",0,"@Test public void testQuadratic(){FieldHermiteInterpolator<BigFraction> interpolator=new FieldHermiteInterpolator<BigFraction>();interpolator.addSamplePoint(new BigFraction(0),new BigFraction[]{new BigFraction(2)});interpolator.addSamplePoint(new BigFraction(1),new BigFraction[]{new BigFraction(0)});interpolator.addSamplePoint(new BigFraction(2),new BigFraction[]{new BigFraction(0)});for (double x=-10;x < 10;x+=1.0){BigFraction y=interpolator.value(new BigFraction(x))[0];Assert.assertEquals((x - 1)* (x - 2),y.doubleValue(),1.0e-15);BigFraction[][]derivatives=interpolator.derivatives(new BigFraction(x),3);Assert.assertEquals((x - 1)* (x - 2),derivatives[0][0].doubleValue(),1.0e-15);Assert.assertEquals(2 * x - 3,derivatives[1][0].doubleValue(),1.0e-15);Assert.assertEquals(2,derivatives[2][0].doubleValue(),1.0e-15);Assert.assertEquals(0,derivatives[3][0].doubleValue(),1.0e-15);}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testMixedDerivatives",0,"@Test public void testMixedDerivatives(){FieldHermiteInterpolator<BigFraction> interpolator=new FieldHermiteInterpolator<BigFraction>();interpolator.addSamplePoint(new BigFraction(0),new BigFraction[]{new BigFraction(1)},new BigFraction[]{new BigFraction(2)});interpolator.addSamplePoint(new BigFraction(1),new BigFraction[]{new BigFraction(4)});interpolator.addSamplePoint(new BigFraction(2),new BigFraction[]{new BigFraction(5)},new BigFraction[]{new BigFraction(2)});BigFraction[][]derivatives=interpolator.derivatives(new BigFraction(0),5);Assert.assertEquals(new BigFraction(1),derivatives[0][0]);Assert.assertEquals(new BigFraction(2),derivatives[1][0]);Assert.assertEquals(new BigFraction(8),derivatives[2][0]);Assert.assertEquals(new BigFraction(-24),derivatives[3][0]);Assert.assertEquals(new BigFraction(24),derivatives[4][0]);Assert.assertEquals(new BigFraction(0),derivatives[5][0]);derivatives=interpolator.derivatives(new BigFraction(1),5);Assert.assertEquals(new BigFraction(4),derivatives[0][0]);Assert.assertEquals(new BigFraction(2),derivatives[1][0]);Assert.assertEquals(new BigFraction(-4),derivatives[2][0]);Assert.assertEquals(new BigFraction(0),derivatives[3][0]);Assert.assertEquals(new BigFraction(24),derivatives[4][0]);Assert.assertEquals(new BigFraction(0),derivatives[5][0]);derivatives=interpolator.derivatives(new BigFraction(2),5);Assert.assertEquals(new BigFraction(5),derivatives[0][0]);Assert.assertEquals(new BigFraction(2),derivatives[1][0]);Assert.assertEquals(new BigFraction(8),derivatives[2][0]);Assert.assertEquals(new BigFraction(24),derivatives[3][0]);Assert.assertEquals(new BigFraction(24),derivatives[4][0]);Assert.assertEquals(new BigFraction(0),derivatives[5][0]);}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testRandomPolynomialsValuesOnly",0,"@Test public void testRandomPolynomialsValuesOnly(){Random random=new Random(0x42b1e7dbd361a932l);for (int i=0;i < 100;++i){int maxDegree=0;PolynomialFunction[]p=new PolynomialFunction[5];for (int k=0;k < p.length;++k){int degree=random.nextInt(7);p[k]=randomPolynomial(degree,random);maxDegree=FastMath.max(maxDegree,degree);}DfpField field=new DfpField(30);Dfp step=field.getOne().divide(field.newDfp(10));FieldHermiteInterpolator<Dfp> interpolator=new FieldHermiteInterpolator<Dfp>();for (int j=0;j < 1 + maxDegree;++j){Dfp x=field.newDfp(j).multiply(step);Dfp[]values=new Dfp[p.length];for (int k=0;k < p.length;++k){values[k]=field.newDfp(p[k].value(x.getReal()));}interpolator.addSamplePoint(x,values);}for (int j=0;j < 20;++j){Dfp x=field.newDfp(j).multiply(step);Dfp[]values=interpolator.value(x);Assert.assertEquals(p.length,values.length);for (int k=0;k < p.length;++k){Assert.assertEquals(p[k].value(x.getReal()),values[k].getReal(),1.0e-8 * FastMath.abs(p[k].value(x.getReal())));}}}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testRandomPolynomialsFirstDerivative",0,"@Test public void testRandomPolynomialsFirstDerivative(){Random random=new Random(0x570803c982ca5d3bl);for (int i=0;i < 100;++i){int maxDegree=0;PolynomialFunction[]p=new PolynomialFunction[5];PolynomialFunction[]pPrime=new PolynomialFunction[5];for (int k=0;k < p.length;++k){int degree=random.nextInt(7);p[k]=randomPolynomial(degree,random);pPrime[k]=p[k].polynomialDerivative();maxDegree=FastMath.max(maxDegree,degree);}DfpField field=new DfpField(30);Dfp step=field.getOne().divide(field.newDfp(10));FieldHermiteInterpolator<Dfp> interpolator=new FieldHermiteInterpolator<Dfp>();for (int j=0;j < 1 + maxDegree / 2;++j){Dfp x=field.newDfp(j).multiply(step);Dfp[]values=new Dfp[p.length];Dfp[]derivatives=new Dfp[p.length];for (int k=0;k < p.length;++k){values[k]=field.newDfp(p[k].value(x.getReal()));derivatives[k]=field.newDfp(pPrime[k].value(x.getReal()));}interpolator.addSamplePoint(x,values,derivatives);}Dfp h=step.divide(field.newDfp(100000));for (int j=0;j < 20;++j){Dfp x=field.newDfp(j).multiply(step);Dfp[]y=interpolator.value(x);Dfp[]yP=interpolator.value(x.add(h));Dfp[]yM=interpolator.value(x.subtract(h));Assert.assertEquals(p.length,y.length);for (int k=0;k < p.length;++k){Assert.assertEquals(p[k].value(x.getReal()),y[k].getReal(),1.0e-8 * FastMath.abs(p[k].value(x.getReal())));Assert.assertEquals(pPrime[k].value(x.getReal()),yP[k].subtract(yM[k]).divide(h.multiply(2)).getReal(),4.0e-8 * FastMath.abs(p[k].value(x.getReal())));}}}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testSine",0,"@Test public void testSine(){DfpField field=new DfpField(30);FieldHermiteInterpolator<Dfp> interpolator=new FieldHermiteInterpolator<Dfp>();for (Dfp x=field.getZero();x.getReal()< FastMath.PI;x=x.add(0.5)){interpolator.addSamplePoint(x,new Dfp[]{x.sin()});}for (Dfp x=field.newDfp(0.1);x.getReal()< 2.9;x=x.add(0.01)){Dfp y=interpolator.value(x)[0];Assert.assertEquals(x.sin().getReal(),y.getReal(),3.5e-5);}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testSquareRoot",0,"@Test public void testSquareRoot(){DfpField field=new DfpField(30);FieldHermiteInterpolator<Dfp> interpolator=new FieldHermiteInterpolator<Dfp>();for (Dfp x=field.getOne();x.getReal()< 3.6;x=x.add(0.5)){interpolator.addSamplePoint(x,new Dfp[]{x.sqrt()});}for (Dfp x=field.newDfp(1.1);x.getReal()< 3.5;x=x.add(0.01)){Dfp y=interpolator.value(x)[0];Assert.assertEquals(x.sqrt().getReal(),y.getReal(),1.5e-4);}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testWikipedia",0,"@Test public void testWikipedia(){FieldHermiteInterpolator<BigFraction> interpolator=new FieldHermiteInterpolator<BigFraction>();interpolator.addSamplePoint(new BigFraction(-1),new BigFraction[]{new BigFraction(2)},new BigFraction[]{new BigFraction(-8)},new BigFraction[]{new BigFraction(56)});interpolator.addSamplePoint(new BigFraction(0),new BigFraction[]{new BigFraction(1)},new BigFraction[]{new BigFraction(0)},new BigFraction[]{new BigFraction(0)});interpolator.addSamplePoint(new BigFraction(1),new BigFraction[]{new BigFraction(2)},new BigFraction[]{new BigFraction(8)},new BigFraction[]{new BigFraction(56)});for (BigFraction x=new BigFraction(-1);x.doubleValue()<= 1.0;x=x.add(new BigFraction(1,8))){BigFraction y=interpolator.value(x)[0];BigFraction x2=x.multiply(x);BigFraction x4=x2.multiply(x2);BigFraction x8=x4.multiply(x4);Assert.assertEquals(x8.add(new BigFraction(1)),y);}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testOnePointParabola",0,"@Test public void testOnePointParabola(){FieldHermiteInterpolator<BigFraction> interpolator=new FieldHermiteInterpolator<BigFraction>();interpolator.addSamplePoint(new BigFraction(0),new BigFraction[]{new BigFraction(1)},new BigFraction[]{new BigFraction(1)},new BigFraction[]{new BigFraction(2)});for (BigFraction x=new BigFraction(-1);x.doubleValue()<= 1.0;x=x.add(new BigFraction(1,8))){BigFraction y=interpolator.value(x)[0];Assert.assertEquals(BigFraction.ONE.add(x.multiply(BigFraction.ONE.add(x))),y);}}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testEmptySampleValue",0,"@Test(expected=NoDataException.class)public void testEmptySampleValue(){new FieldHermiteInterpolator<BigFraction>().value(BigFraction.ZERO);}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testEmptySampleDerivative",0,"@Test(expected=NoDataException.class)public void testEmptySampleDerivative(){new FieldHermiteInterpolator<BigFraction>().derivatives(BigFraction.ZERO,1);}"
"org.apache.commons.math3.analysis.interpolation.FieldHermiteInterpolatorTest.testDuplicatedAbscissa",0,"@Test(expected=IllegalArgumentException.class)public void testDuplicatedAbscissa(){FieldHermiteInterpolator<BigFraction> interpolator=new FieldHermiteInterpolator<BigFraction>();interpolator.addSamplePoint(new BigFraction(1),new BigFraction[]{new BigFraction(0)});interpolator.addSamplePoint(new BigFraction(1),new BigFraction[]{new BigFraction(1)});}"
"org.apache.commons.math3.optim.SimplePointCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimplePointChecker<PointValuePair>(1e-1,1e-2,0);}"
"org.apache.commons.math3.optim.SimplePointCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimplePointChecker<PointValuePair> checker=new SimplePointChecker<PointValuePair>(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optim.SimplePointCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimplePointChecker<PointValuePair> checker=new SimplePointChecker<PointValuePair>(1e-8,1e-8);final PointValuePair a=new PointValuePair(new double[]{1d},1d);final PointValuePair b=new PointValuePair(new double[]{10d},10d);Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate0",0,"/** * Test degenerate case p = 0   */@Test public void testDegenerate0(){setDistribution(new PascalDistribution(5,0.0d));setCumulativeTestPoints(new int[]{-1,0,1,5,10});setCumulativeTestValues(new double[]{0d,0d,0d,0d,0d});setDensityTestPoints(new int[]{-1,0,1,10,11});setDensityTestValues(new double[]{0d,0d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{Integer.MAX_VALUE,Integer.MAX_VALUE});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testDegenerate1",0,"/** * Test degenerate case p = 1   */@Test public void testDegenerate1(){setDistribution(new PascalDistribution(5,1.0d));setCumulativeTestPoints(new int[]{-1,0,1,2,5,10});setCumulativeTestValues(new double[]{0d,1d,1d,1d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,2,5,10});setDensityTestValues(new double[]{0d,1d,0d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{0,0});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;PascalDistribution dist;dist=new PascalDistribution(10,0.5);Assert.assertEquals(dist.getNumericalMean(),(10d * 0.5d)/ 0.5d,tol);Assert.assertEquals(dist.getNumericalVariance(),(10d * 0.5d)/ (0.5d * 0.5d),tol);dist=new PascalDistribution(25,0.7);Assert.assertEquals(dist.getNumericalMean(),(25d * 0.3d)/ 0.7d,tol);Assert.assertEquals(dist.getNumericalVariance(),(25d * 0.3d)/ (0.7d * 0.7d),tol);}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.PascalDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.util.FastMathTest.testMinMaxDouble",0,"@Test public void testMinMaxDouble(){double[][]pairs={{-50.0,50.0},{Double.POSITIVE_INFINITY,1.0},{Double.NEGATIVE_INFINITY,1.0},{Double.NaN,1.0},{Double.POSITIVE_INFINITY,0.0},{Double.NEGATIVE_INFINITY,0.0},{Double.NaN,0.0},{Double.NaN,Double.NEGATIVE_INFINITY},{Double.NaN,Double.POSITIVE_INFINITY},{Precision.SAFE_MIN,Precision.EPSILON}};for(double[]pair : pairs){Assert.assertEquals(""min("" + pair[0]+ "",""+ pair[1]+ "")"",Math.min(pair[0],pair[1]),FastMath.min(pair[0],pair[1]),Precision.EPSILON);Assert.assertEquals(""min("" + pair[1]+ "",""+ pair[0]+ "")"",Math.min(pair[1],pair[0]),FastMath.min(pair[1],pair[0]),Precision.EPSILON);Assert.assertEquals(""max("" + pair[0]+ "",""+ pair[1]+ "")"",Math.max(pair[0],pair[1]),FastMath.max(pair[0],pair[1]),Precision.EPSILON);Assert.assertEquals(""max("" + pair[1]+ "",""+ pair[0]+ "")"",Math.max(pair[1],pair[0]),FastMath.max(pair[1],pair[0]),Precision.EPSILON);}}"
"org.apache.commons.math3.util.FastMathTest.testMinMaxFloat",0,"@Test public void testMinMaxFloat(){float[][]pairs={{-50.0f,50.0f},{Float.POSITIVE_INFINITY,1.0f},{Float.NEGATIVE_INFINITY,1.0f},{Float.NaN,1.0f},{Float.POSITIVE_INFINITY,0.0f},{Float.NEGATIVE_INFINITY,0.0f},{Float.NaN,0.0f},{Float.NaN,Float.NEGATIVE_INFINITY},{Float.NaN,Float.POSITIVE_INFINITY}};for(float[]pair : pairs){Assert.assertEquals(""min("" + pair[0]+ "",""+ pair[1]+ "")"",Math.min(pair[0],pair[1]),FastMath.min(pair[0],pair[1]),Precision.EPSILON);Assert.assertEquals(""min("" + pair[1]+ "",""+ pair[0]+ "")"",Math.min(pair[1],pair[0]),FastMath.min(pair[1],pair[0]),Precision.EPSILON);Assert.assertEquals(""max("" + pair[0]+ "",""+ pair[1]+ "")"",Math.max(pair[0],pair[1]),FastMath.max(pair[0],pair[1]),Precision.EPSILON);Assert.assertEquals(""max("" + pair[1]+ "",""+ pair[0]+ "")"",Math.max(pair[1],pair[0]),FastMath.max(pair[1],pair[0]),Precision.EPSILON);}}"
"org.apache.commons.math3.util.FastMathTest.testConstants",0,"@Test public void testConstants(){Assert.assertEquals(Math.PI,FastMath.PI,1.0e-20);Assert.assertEquals(Math.E,FastMath.E,1.0e-20);}"
"org.apache.commons.math3.util.FastMathTest.testAtan2",0,"@Test public void testAtan2(){double y1=1.2713504628280707e10;double x1=-5.674940885228782e-10;Assert.assertEquals(Math.atan2(y1,x1),FastMath.atan2(y1,x1),2 * Precision.EPSILON);double y2=0.0;double x2=Double.POSITIVE_INFINITY;Assert.assertEquals(Math.atan2(y2,x2),FastMath.atan2(y2,x2),Precision.SAFE_MIN);}"
"org.apache.commons.math3.util.FastMathTest.testHyperbolic",0,"@Test public void testHyperbolic(){double maxErr=0;for (double x=-30;x < 30;x+=0.001){double tst=FastMath.sinh(x);double ref=Math.sinh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,2);maxErr=0;for (double x=-30;x < 30;x+=0.001){double tst=FastMath.cosh(x);double ref=Math.cosh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,2);maxErr=0;for (double x=-0.5;x < 0.5;x+=0.001){double tst=FastMath.tanh(x);double ref=Math.tanh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,4);}"
"org.apache.commons.math3.util.FastMathTest.testMath904",0,"@Test public void testMath904(){final double x=-1;final double y=(5 + 1e-15)* 1e15;Assert.assertEquals(Math.pow(x,y),FastMath.pow(x,y),0);Assert.assertEquals(Math.pow(x,-y),FastMath.pow(x,-y),0);}"
"org.apache.commons.math3.util.FastMathTest.testMath905LargePositive",0,"@Test public void testMath905LargePositive(){final double start=StrictMath.log(Double.MAX_VALUE);final double endT=StrictMath.sqrt(2)* StrictMath.sqrt(Double.MAX_VALUE);final double end=2 * StrictMath.log(endT);double maxErr=0;for (double x=start;x < end;x+=1e-3){final double tst=FastMath.cosh(x);final double ref=Math.cosh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,3);for (double x=start;x < end;x+=1e-3){final double tst=FastMath.sinh(x);final double ref=Math.sinh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,3);}"
"org.apache.commons.math3.util.FastMathTest.testMath905LargeNegative",0,"@Test public void testMath905LargeNegative(){final double start=-StrictMath.log(Double.MAX_VALUE);final double endT=StrictMath.sqrt(2)* StrictMath.sqrt(Double.MAX_VALUE);final double end=-2 * StrictMath.log(endT);double maxErr=0;for (double x=start;x > end;x-=1e-3){final double tst=FastMath.cosh(x);final double ref=Math.cosh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,3);for (double x=start;x > end;x-=1e-3){final double tst=FastMath.sinh(x);final double ref=Math.sinh(x);maxErr=FastMath.max(maxErr,FastMath.abs(ref - tst)/ FastMath.ulp(ref));}Assert.assertEquals(0,maxErr,3);}"
"org.apache.commons.math3.util.FastMathTest.testHyperbolicInverses",0,"@Test public void testHyperbolicInverses(){double maxErr=0;for (double x=-30;x < 30;x+=0.01){maxErr=FastMath.max(maxErr,FastMath.abs(x - FastMath.sinh(FastMath.asinh(x)))/ (2 * FastMath.ulp(x)));}Assert.assertEquals(0,maxErr,3);maxErr=0;for (double x=1;x < 30;x+=0.01){maxErr=FastMath.max(maxErr,FastMath.abs(x - FastMath.cosh(FastMath.acosh(x)))/ (2 * FastMath.ulp(x)));}Assert.assertEquals(0,maxErr,2);maxErr=0;for (double x=-1 + Precision.EPSILON;x < 1 - Precision.EPSILON;x+=0.0001){maxErr=FastMath.max(maxErr,FastMath.abs(x - FastMath.tanh(FastMath.atanh(x)))/ (2 * FastMath.ulp(x)));}Assert.assertEquals(0,maxErr,2);}"
"org.apache.commons.math3.util.FastMathTest.testLogAccuracy",0,"@Test public void testLogAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=Math.exp(generator.nextDouble()* 1416.0 - 708.0)* generator.nextDouble();double tst=FastMath.log(x);double ref=DfpMath.log(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0.0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""log()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testLog10Accuracy",0,"@Test public void testLog10Accuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=Math.exp(generator.nextDouble()* 1416.0 - 708.0)* generator.nextDouble();double tst=FastMath.log10(x);double ref=DfpMath.log(field.newDfp(x)).divide(DfpMath.log(field.newDfp(""10""))).toDouble();double err=(tst - ref)/ ref;if (err != 0.0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x)).divide(DfpMath.log(field.newDfp(""10"")))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""log10()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testLog1pAccuracy",0,"@Test public void testLog1pAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=Math.exp(generator.nextDouble()* 10.0 - 5.0)* generator.nextDouble();double tst=FastMath.log1p(x);double ref=DfpMath.log(field.newDfp(x).add(field.getOne())).toDouble();double err=(tst - ref)/ ref;if (err != 0.0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.log(field.newDfp(x).add(field.getOne()))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""log1p()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testLog1pSpecialCases",0,"@Test public void testLog1pSpecialCases(){Assert.assertTrue(""Logp of -1.0 should be -Inf"",Double.isInfinite(FastMath.log1p(-1.0)));}"
"org.apache.commons.math3.util.FastMathTest.testLogSpecialCases",0,"@Test public void testLogSpecialCases(){Assert.assertTrue(""Log of zero should be -Inf"",Double.isInfinite(FastMath.log(0.0)));Assert.assertTrue(""Log of -zero should be -Inf"",Double.isInfinite(FastMath.log(-0.0)));Assert.assertTrue(""Log of NaN should be NaN"",Double.isNaN(FastMath.log(Double.NaN)));Assert.assertTrue(""Log of negative number should be NaN"",Double.isNaN(FastMath.log(-1.0)));Assert.assertEquals(""Log of Double.MIN_VALUE should be -744.4400719213812"",-744.4400719213812,FastMath.log(Double.MIN_VALUE),Precision.EPSILON);Assert.assertTrue(""Log of infinity should be infinity"",Double.isInfinite(FastMath.log(Double.POSITIVE_INFINITY)));}"
"org.apache.commons.math3.util.FastMathTest.testExpSpecialCases",0,"@Test public void testExpSpecialCases(){Assert.assertEquals(Double.MIN_VALUE,FastMath.exp(-745.1332191019411),Precision.EPSILON);Assert.assertEquals(""exp(-745.1332191019412)should be 0.0"",0.0,FastMath.exp(-745.1332191019412),Precision.EPSILON);Assert.assertTrue(""exp of NaN should be NaN"",Double.isNaN(FastMath.exp(Double.NaN)));Assert.assertTrue(""exp of infinity should be infinity"",Double.isInfinite(FastMath.exp(Double.POSITIVE_INFINITY)));Assert.assertEquals(""exp of -infinity should be 0.0"",0.0,FastMath.exp(Double.NEGATIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""exp(1)should be Math.E"",Math.E,FastMath.exp(1.0),Precision.EPSILON);}"
"org.apache.commons.math3.util.FastMathTest.testPowSpecialCases",0,"@Test public void testPowSpecialCases(){Assert.assertEquals(""pow(-1,0)should be 1.0"",1.0,FastMath.pow(-1.0,0.0),Precision.EPSILON);Assert.assertEquals(""pow(-1,-0)should be 1.0"",1.0,FastMath.pow(-1.0,-0.0),Precision.EPSILON);Assert.assertEquals(""pow(PI,1.0)should be PI"",FastMath.PI,FastMath.pow(FastMath.PI,1.0),Precision.EPSILON);Assert.assertEquals(""pow(-PI,1.0)should be -PI"",-FastMath.PI,FastMath.pow(-FastMath.PI,1.0),Precision.EPSILON);Assert.assertTrue(""pow(PI,NaN)should be NaN"",Double.isNaN(FastMath.pow(Math.PI,Double.NaN)));Assert.assertTrue(""pow(NaN,PI)should be NaN"",Double.isNaN(FastMath.pow(Double.NaN,Math.PI)));Assert.assertTrue(""pow(2.0,Infinity)should be Infinity"",Double.isInfinite(FastMath.pow(2.0,Double.POSITIVE_INFINITY)));Assert.assertTrue(""pow(0.5,-Infinity)should be Infinity"",Double.isInfinite(FastMath.pow(0.5,Double.NEGATIVE_INFINITY)));Assert.assertEquals(""pow(0.5,Infinity)should be 0.0"",0.0,FastMath.pow(0.5,Double.POSITIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""pow(2.0,-Infinity)should be 0.0"",0.0,FastMath.pow(2.0,Double.NEGATIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""pow(0.0,0.5)should be 0.0"",0.0,FastMath.pow(0.0,0.5),Precision.EPSILON);Assert.assertEquals(""pow(Infinity,-0.5)should be 0.0"",0.0,FastMath.pow(Double.POSITIVE_INFINITY,-0.5),Precision.EPSILON);Assert.assertTrue(""pow(0.0,-0.5)should be Inf"",Double.isInfinite(FastMath.pow(0.0,-0.5)));Assert.assertTrue(""pow(Inf,0.5)should be Inf"",Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY,0.5)));Assert.assertTrue(""pow(-0.0,-3.0)should be -Inf"",Double.isInfinite(FastMath.pow(-0.0,-3.0)));Assert.assertTrue(""pow(-Inf,-3.0)should be -Inf"",Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY,3.0)));Assert.assertTrue(""pow(-0.0,-3.5)should be Inf"",Double.isInfinite(FastMath.pow(-0.0,-3.5)));Assert.assertTrue(""pow(Inf,3.5)should be Inf"",Double.isInfinite(FastMath.pow(Double.POSITIVE_INFINITY,3.5)));Assert.assertEquals(""pow(-2.0,3.0)should be -8.0"",-8.0,FastMath.pow(-2.0,3.0),Precision.EPSILON);Assert.assertTrue(""pow(-2.0,3.5)should be NaN"",Double.isNaN(FastMath.pow(-2.0,3.5)));Assert.assertTrue(""pow(+Inf,NaN)should be NaN"",Double.isNaN(FastMath.pow(Double.POSITIVE_INFINITY,Double.NaN)));Assert.assertTrue(""pow(1.0,+Inf)should be NaN"",Double.isNaN(FastMath.pow(1.0,Double.POSITIVE_INFINITY)));Assert.assertTrue(""pow(-Inf,NaN)should be NaN"",Double.isNaN(FastMath.pow(Double.NEGATIVE_INFINITY,Double.NaN)));Assert.assertEquals(""pow(-Inf,-1.0)should be 0.0"",0.0,FastMath.pow(Double.NEGATIVE_INFINITY,-1.0),Precision.EPSILON);Assert.assertEquals(""pow(-Inf,-2.0)should be 0.0"",0.0,FastMath.pow(Double.NEGATIVE_INFINITY,-2.0),Precision.EPSILON);Assert.assertTrue(""pow(-Inf,1.0)should be -Inf"",Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY,1.0)));Assert.assertTrue(""pow(-Inf,2.0)should be +Inf"",Double.isInfinite(FastMath.pow(Double.NEGATIVE_INFINITY,2.0)));Assert.assertTrue(""pow(1.0,-Inf)should be NaN"",Double.isNaN(FastMath.pow(1.0,Double.NEGATIVE_INFINITY)));}"
"org.apache.commons.math3.util.FastMathTest.testAtan2SpecialCases",0,"@Test public void testAtan2SpecialCases(){Assert.assertTrue(""atan2(NaN,0.0)should be NaN"",Double.isNaN(FastMath.atan2(Double.NaN,0.0)));Assert.assertTrue(""atan2(0.0,NaN)should be NaN"",Double.isNaN(FastMath.atan2(0.0,Double.NaN)));Assert.assertEquals(""atan2(0.0,0.0)should be 0.0"",0.0,FastMath.atan2(0.0,0.0),Precision.EPSILON);Assert.assertEquals(""atan2(0.0,0.001)should be 0.0"",0.0,FastMath.atan2(0.0,0.001),Precision.EPSILON);Assert.assertEquals(""atan2(0.1,+Inf)should be 0.0"",0.0,FastMath.atan2(0.1,Double.POSITIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(-0.0,0.0)should be -0.0"",-0.0,FastMath.atan2(-0.0,0.0),Precision.EPSILON);Assert.assertEquals(""atan2(-0.0,0.001)should be -0.0"",-0.0,FastMath.atan2(-0.0,0.001),Precision.EPSILON);Assert.assertEquals(""atan2(-0.0,+Inf)should be -0.0"",-0.0,FastMath.atan2(-0.1,Double.POSITIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(0.0,-0.0)should be PI"",FastMath.PI,FastMath.atan2(0.0,-0.0),Precision.EPSILON);Assert.assertEquals(""atan2(0.1,-Inf)should be PI"",FastMath.PI,FastMath.atan2(0.1,Double.NEGATIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(-0.0,-0.0)should be -PI"",-FastMath.PI,FastMath.atan2(-0.0,-0.0),Precision.EPSILON);Assert.assertEquals(""atan2(0.1,-Inf)should be -PI"",-FastMath.PI,FastMath.atan2(-0.1,Double.NEGATIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(0.1,0.0)should be PI/2"",FastMath.PI / 2.0,FastMath.atan2(0.1,0.0),Precision.EPSILON);Assert.assertEquals(""atan2(0.1,-0.0)should be PI/2"",FastMath.PI / 2.0,FastMath.atan2(0.1,-0.0),Precision.EPSILON);Assert.assertEquals(""atan2(Inf,0.1)should be PI/2"",FastMath.PI / 2.0,FastMath.atan2(Double.POSITIVE_INFINITY,0.1),Precision.EPSILON);Assert.assertEquals(""atan2(Inf,-0.1)should be PI/2"",FastMath.PI / 2.0,FastMath.atan2(Double.POSITIVE_INFINITY,-0.1),Precision.EPSILON);Assert.assertEquals(""atan2(-0.1,0.0)should be -PI/2"",-FastMath.PI / 2.0,FastMath.atan2(-0.1,0.0),Precision.EPSILON);Assert.assertEquals(""atan2(-0.1,-0.0)should be -PI/2"",-FastMath.PI / 2.0,FastMath.atan2(-0.1,-0.0),Precision.EPSILON);Assert.assertEquals(""atan2(-Inf,0.1)should be -PI/2"",-FastMath.PI / 2.0,FastMath.atan2(Double.NEGATIVE_INFINITY,0.1),Precision.EPSILON);Assert.assertEquals(""atan2(-Inf,-0.1)should be -PI/2"",-FastMath.PI / 2.0,FastMath.atan2(Double.NEGATIVE_INFINITY,-0.1),Precision.EPSILON);Assert.assertEquals(""atan2(Inf,Inf)should be PI/4"",FastMath.PI / 4.0,FastMath.atan2(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(Inf,-Inf)should be PI * 3/4"",FastMath.PI * 3.0 / 4.0,FastMath.atan2(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(-Inf,Inf)should be -PI/4"",-FastMath.PI / 4.0,FastMath.atan2(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY),Precision.EPSILON);Assert.assertEquals(""atan2(-Inf,-Inf)should be -PI * 3/4"",-FastMath.PI * 3.0 / 4.0,FastMath.atan2(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY),Precision.EPSILON);}"
"org.apache.commons.math3.util.FastMathTest.testPowAccuracy",0,"@Test public void testPowAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=(generator.nextDouble()* 2.0 + 0.25);double y=(generator.nextDouble()* 1200.0 - 600.0)* generator.nextDouble();double tst=FastMath.pow(x,y);double ref=DfpMath.pow(field.newDfp(x),field.newDfp(y)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.pow(field.newDfp(x),field.newDfp(y))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""pow()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testExpAccuracy",0,"@Test public void testExpAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=((generator.nextDouble()* 1416.0)- 708.0)* generator.nextDouble();double tst=FastMath.exp(x);double ref=DfpMath.exp(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""exp()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testSinAccuracy",0,"@Test public void testSinAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=((generator.nextDouble()* Math.PI)- Math.PI / 2.0)* Math.pow(2,21)* generator.nextDouble();double tst=FastMath.sin(x);double ref=DfpMath.sin(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.sin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""sin()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testCosAccuracy",0,"@Test public void testCosAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=((generator.nextDouble()* Math.PI)- Math.PI / 2.0)* Math.pow(2,21)* generator.nextDouble();double tst=FastMath.cos(x);double ref=DfpMath.cos(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.cos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""cos()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testTanAccuracy",0,"@Test public void testTanAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=((generator.nextDouble()* Math.PI)- Math.PI / 2.0)* Math.pow(2,12)* generator.nextDouble();double tst=FastMath.tan(x);double ref=DfpMath.tan(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.tan(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""tan()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testAtanAccuracy",0,"@Test public void testAtanAccuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=((generator.nextDouble()* 16.0)- 8.0)* generator.nextDouble();double tst=FastMath.atan(x);double ref=DfpMath.atan(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.atan(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""atan()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testAtan2Accuracy",0,"@Test public void testAtan2Accuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=generator.nextDouble()- 0.5;double y=generator.nextDouble()- 0.5;double tst=FastMath.atan2(y,x);Dfp refdfp=DfpMath.atan(field.newDfp(y).divide(field.newDfp(x)));if (x < 0.0){if (y > 0.0)refdfp=field.getPi().add(refdfp);else       refdfp=refdfp.subtract(field.getPi());}double ref=refdfp.toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(refdfp).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""atan2()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testExpm1Accuracy",0,"@Test public void testExpm1Accuracy(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=((generator.nextDouble()* 16.0)- 8.0)* generator.nextDouble();double tst=FastMath.expm1(x);double ref=DfpMath.exp(field.newDfp(x)).subtract(field.getOne()).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""expm1()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testAsinAccuracy",0,"@Test public void testAsinAccuracy(){double maxerrulp=0.0;for (int i=0;i < 10000;i++){double x=((generator.nextDouble()* 2.0)- 1.0)* generator.nextDouble();double tst=FastMath.asin(x);double ref=DfpMath.asin(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.asin(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""asin()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testAcosAccuracy",0,"@Test public void testAcosAccuracy(){double maxerrulp=0.0;for (int i=0;i < 10000;i++){double x=((generator.nextDouble()* 2.0)- 1.0)* generator.nextDouble();double tst=FastMath.acos(x);double ref=DfpMath.acos(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.acos(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""acos()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testAcosSpecialCases",0,"/** * Added tests for a 100% coverage of acos().*/@Test public void testAcosSpecialCases(){Assert.assertTrue(""acos(NaN)should be NaN"",Double.isNaN(FastMath.acos(Double.NaN)));Assert.assertTrue(""acos(-1.1)should be NaN"",Double.isNaN(FastMath.acos(-1.1)));Assert.assertTrue(""acos(-1.1)should be NaN"",Double.isNaN(FastMath.acos(1.1)));Assert.assertEquals(""acos(-1.0)should be PI"",FastMath.acos(-1.0),FastMath.PI,Precision.EPSILON);Assert.assertEquals(""acos(1.0)should be 0.0"",FastMath.acos(1.0),0.0,Precision.EPSILON);Assert.assertEquals(""acos(0.0)should be PI/2"",FastMath.acos(0.0),FastMath.PI / 2.0,Precision.EPSILON);}"
"org.apache.commons.math3.util.FastMathTest.testAsinSpecialCases",0,"/** * Added tests for a 100% coverage of asin().*/@Test public void testAsinSpecialCases(){Assert.assertTrue(""asin(NaN)should be NaN"",Double.isNaN(FastMath.asin(Double.NaN)));Assert.assertTrue(""asin(1.1)should be NaN"",Double.isNaN(FastMath.asin(1.1)));Assert.assertTrue(""asin(-1.1)should be NaN"",Double.isNaN(FastMath.asin(-1.1)));Assert.assertEquals(""asin(1.0)should be PI/2"",FastMath.asin(1.0),FastMath.PI / 2.0,Precision.EPSILON);Assert.assertEquals(""asin(-1.0)should be -PI/2"",FastMath.asin(-1.0),-FastMath.PI / 2.0,Precision.EPSILON);Assert.assertEquals(""asin(0.0)should be 0.0"",FastMath.asin(0.0),0.0,Precision.EPSILON);}"
"org.apache.commons.math3.util.FastMathTest.testSinhAccuracy",0,"@Test public void testSinhAccuracy(){double maxerrulp=0.0;for (int i=0;i < 10000;i++){double x=((generator.nextDouble()* 16.0)- 8.0)* generator.nextDouble();double tst=FastMath.sinh(x);double ref=sinh(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(sinh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""sinh()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testCoshAccuracy",0,"@Test public void testCoshAccuracy(){double maxerrulp=0.0;for (int i=0;i < 10000;i++){double x=((generator.nextDouble()* 16.0)- 8.0)* generator.nextDouble();double tst=FastMath.cosh(x);double ref=cosh(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(cosh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""cosh()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testTanhAccuracy",0,"@Test public void testTanhAccuracy(){double maxerrulp=0.0;for (int i=0;i < 10000;i++){double x=((generator.nextDouble()* 16.0)- 8.0)* generator.nextDouble();double tst=FastMath.tanh(x);double ref=tanh(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(tanh(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""tanh()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testCbrtAccuracy",0,"@Test public void testCbrtAccuracy(){double maxerrulp=0.0;for (int i=0;i < 10000;i++){double x=((generator.nextDouble()* 200.0)- 100.0)* generator.nextDouble();double tst=FastMath.cbrt(x);double ref=cbrt(field.newDfp(x)).toDouble();double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(cbrt(field.newDfp(x))).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""cbrt()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testToDegrees",0,"@Test public void testToDegrees(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=generator.nextDouble();double tst=field.newDfp(x).multiply(180).divide(field.getPi()).toDouble();double ref=FastMath.toDegrees(x);double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""toDegrees()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testToRadians",0,"@Test public void testToRadians(){double maxerrulp=0.0;for (int i=0;i < NUMBER_OF_TRIALS;i++){double x=generator.nextDouble();double tst=field.newDfp(x).multiply(field.getPi()).divide(180).toDouble();double ref=FastMath.toRadians(x);double err=(tst - ref)/ ref;if (err != 0){double ulp=Math.abs(ref - Double.longBitsToDouble((Double.doubleToLongBits(ref)^ 1)));double errulp=field.newDfp(tst).subtract(DfpMath.exp(field.newDfp(x)).subtract(field.getOne())).divide(field.newDfp(ulp)).toDouble();maxerrulp=Math.max(maxerrulp,Math.abs(errulp));}}Assert.assertTrue(""toRadians()had errors in excess of "" + MAX_ERROR_ULP + "" ULP"",maxerrulp < MAX_ERROR_ULP);}"
"org.apache.commons.math3.util.FastMathTest.testNextAfter",0,"@Test public void testNextAfter(){Assert.assertEquals(16.0,FastMath.nextAfter(15.999999999999998,34.27555555555555),0.0);Assert.assertEquals(-15.999999999999996,FastMath.nextAfter(-15.999999999999998,34.27555555555555),0.0);Assert.assertEquals(15.999999999999996,FastMath.nextAfter(15.999999999999998,2.142222222222222),0.0);Assert.assertEquals(-15.999999999999996,FastMath.nextAfter(-15.999999999999998,2.142222222222222),0.0);Assert.assertEquals(8.000000000000002,FastMath.nextAfter(8.0,34.27555555555555),0.0);Assert.assertEquals(-7.999999999999999,FastMath.nextAfter(-8.0,34.27555555555555),0.0);Assert.assertEquals(7.999999999999999,FastMath.nextAfter(8.0,2.142222222222222),0.0);Assert.assertEquals(-7.999999999999999,FastMath.nextAfter(-8.0,2.142222222222222),0.0);Assert.assertEquals(2.308922399667661E-4,FastMath.nextAfter(2.3089223996676606E-4,2.308922399667661E-4),0.0);Assert.assertEquals(2.3089223996676606E-4,FastMath.nextAfter(2.3089223996676606E-4,2.3089223996676606E-4),0.0);Assert.assertEquals(2.3089223996676603E-4,FastMath.nextAfter(2.3089223996676606E-4,2.3089223996676603E-4),0.0);Assert.assertEquals(2.3089223996676603E-4,FastMath.nextAfter(2.3089223996676606E-4,-2.308922399667661E-4),0.0);Assert.assertEquals(2.3089223996676603E-4,FastMath.nextAfter(2.3089223996676606E-4,-2.3089223996676606E-4),0.0);Assert.assertEquals(2.3089223996676603E-4,FastMath.nextAfter(2.3089223996676606E-4,-2.3089223996676603E-4),0.0);Assert.assertEquals(-2.3089223996676603E-4,FastMath.nextAfter(-2.3089223996676606E-4,2.308922399667661E-4),0.0);Assert.assertEquals(-2.3089223996676603E-4,FastMath.nextAfter(-2.3089223996676606E-4,2.3089223996676606E-4),0.0);Assert.assertEquals(-2.3089223996676603E-4,FastMath.nextAfter(-2.3089223996676606E-4,2.3089223996676603E-4),0.0);Assert.assertEquals(-2.308922399667661E-4,FastMath.nextAfter(-2.3089223996676606E-4,-2.308922399667661E-4),0.0);Assert.assertEquals(-2.3089223996676606E-4,FastMath.nextAfter(-2.3089223996676606E-4,-2.3089223996676606E-4),0.0);Assert.assertEquals(-2.3089223996676603E-4,FastMath.nextAfter(-2.3089223996676606E-4,-2.3089223996676603E-4),0.0);}"
"org.apache.commons.math3.util.FastMathTest.testDoubleNextAfterSpecialCases",0,"@Test public void testDoubleNextAfterSpecialCases(){Assert.assertEquals(-Double.MAX_VALUE,FastMath.nextAfter(Double.NEGATIVE_INFINITY,0D),0D);Assert.assertEquals(Double.MAX_VALUE,FastMath.nextAfter(Double.POSITIVE_INFINITY,0D),0D);Assert.assertEquals(Double.NaN,FastMath.nextAfter(Double.NaN,0D),0D);Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.nextAfter(Double.MAX_VALUE,Double.POSITIVE_INFINITY),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.nextAfter(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY),0D);Assert.assertEquals(Double.MIN_VALUE,FastMath.nextAfter(0D,1D),0D);Assert.assertEquals(-Double.MIN_VALUE,FastMath.nextAfter(0D,-1D),0D);Assert.assertEquals(0D,FastMath.nextAfter(Double.MIN_VALUE,-1),0D);Assert.assertEquals(0D,FastMath.nextAfter(-Double.MIN_VALUE,1),0D);}"
"org.apache.commons.math3.util.FastMathTest.testFloatNextAfterSpecialCases",0,"@Test public void testFloatNextAfterSpecialCases(){Assert.assertEquals(-Float.MAX_VALUE,FastMath.nextAfter(Float.NEGATIVE_INFINITY,0F),0F);Assert.assertEquals(Float.MAX_VALUE,FastMath.nextAfter(Float.POSITIVE_INFINITY,0F),0F);Assert.assertEquals(Float.NaN,FastMath.nextAfter(Float.NaN,0F),0F);Assert.assertEquals(Float.POSITIVE_INFINITY,FastMath.nextAfter(Float.MAX_VALUE,Float.POSITIVE_INFINITY),0F);Assert.assertEquals(Float.NEGATIVE_INFINITY,FastMath.nextAfter(-Float.MAX_VALUE,Float.NEGATIVE_INFINITY),0F);Assert.assertEquals(Float.MIN_VALUE,FastMath.nextAfter(0F,1F),0F);Assert.assertEquals(-Float.MIN_VALUE,FastMath.nextAfter(0F,-1F),0F);Assert.assertEquals(0F,FastMath.nextAfter(Float.MIN_VALUE,-1F),0F);Assert.assertEquals(0F,FastMath.nextAfter(-Float.MIN_VALUE,1F),0F);}"
"org.apache.commons.math3.util.FastMathTest.testDoubleScalbSpecialCases",0,"@Test public void testDoubleScalbSpecialCases(){Assert.assertEquals(2.5269841324701218E-175,FastMath.scalb(2.2250738585072014E-308,442),0D);Assert.assertEquals(1.307993905256674E297,FastMath.scalb(1.1102230246251565E-16,1040),0D);Assert.assertEquals(7.2520887996488946E-217,FastMath.scalb(Double.MIN_VALUE,356),0D);Assert.assertEquals(8.98846567431158E307,FastMath.scalb(Double.MIN_VALUE,2097),0D);Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(Double.MIN_VALUE,2098),0D);Assert.assertEquals(1.1125369292536007E-308,FastMath.scalb(2.225073858507201E-308,-1),0D);Assert.assertEquals(1.0E-323,FastMath.scalb(Double.MAX_VALUE,-2097),0D);Assert.assertEquals(Double.MIN_VALUE,FastMath.scalb(Double.MAX_VALUE,-2098),0D);Assert.assertEquals(0,FastMath.scalb(Double.MAX_VALUE,-2099),0D);Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(Double.POSITIVE_INFINITY,-1000000),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.1102230246251565E-16,1078),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.1102230246251565E-16,1079),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-2.2250738585072014E-308,2047),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-2.2250738585072014E-308,2048),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.7976931348623157E308,2147483647),0D);Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(1.7976931348623157E308,2147483647),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-1.1102230246251565E-16,2147483647),0D);Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(1.1102230246251565E-16,2147483647),0D);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.scalb(-2.2250738585072014E-308,2147483647),0D);Assert.assertEquals(Double.POSITIVE_INFINITY,FastMath.scalb(2.2250738585072014E-308,2147483647),0D);}"
"org.apache.commons.math3.util.FastMathTest.testFloatScalbSpecialCases",0,"@Test public void testFloatScalbSpecialCases(){Assert.assertEquals(0f,FastMath.scalb(Float.MIN_VALUE,-30),0F);Assert.assertEquals(2 * Float.MIN_VALUE,FastMath.scalb(Float.MIN_VALUE,1),0F);Assert.assertEquals(7.555786e22f,FastMath.scalb(Float.MAX_VALUE,-52),0F);Assert.assertEquals(1.7014118e38f,FastMath.scalb(Float.MIN_VALUE,276),0F);Assert.assertEquals(Float.POSITIVE_INFINITY,FastMath.scalb(Float.MIN_VALUE,277),0F);Assert.assertEquals(5.8774718e-39f,FastMath.scalb(1.1754944e-38f,-1),0F);Assert.assertEquals(2 * Float.MIN_VALUE,FastMath.scalb(Float.MAX_VALUE,-276),0F);Assert.assertEquals(Float.MIN_VALUE,FastMath.scalb(Float.MAX_VALUE,-277),0F);Assert.assertEquals(0,FastMath.scalb(Float.MAX_VALUE,-278),0F);Assert.assertEquals(Float.POSITIVE_INFINITY,FastMath.scalb(Float.POSITIVE_INFINITY,-1000000),0F);Assert.assertEquals(-3.13994498e38f,FastMath.scalb(-1.1e-7f,151),0F);Assert.assertEquals(Float.NEGATIVE_INFINITY,FastMath.scalb(-1.1e-7f,152),0F);Assert.assertEquals(Float.POSITIVE_INFINITY,FastMath.scalb(3.4028235E38f,2147483647),0F);Assert.assertEquals(Float.NEGATIVE_INFINITY,FastMath.scalb(-3.4028235E38f,2147483647),0F);}"
"org.apache.commons.math3.util.FastMathTest.checkMissingFastMathClasses",0,"@Test public void checkMissingFastMathClasses(){}"
"org.apache.commons.math3.util.FastMathTest.checkExtraFastMathClasses",0,"@Ignore @Test public void checkExtraFastMathClasses(){compareClassMethods(FastMath.class,StrictMath.class);}"
"org.apache.commons.math3.util.FastMathTest.testSignumDouble",0,"@Test public void testSignumDouble(){final double delta=0.0;Assert.assertEquals(1.0,FastMath.signum(2.0),delta);Assert.assertEquals(0.0,FastMath.signum(0.0),delta);Assert.assertEquals(-1.0,FastMath.signum(-2.0),delta);TestUtils.assertSame(-0. / 0.,FastMath.signum(Double.NaN));}"
"org.apache.commons.math3.util.FastMathTest.testSignumFloat",0,"@Test public void testSignumFloat(){final float delta=0.0F;Assert.assertEquals(1.0F,FastMath.signum(2.0F),delta);Assert.assertEquals(0.0F,FastMath.signum(0.0F),delta);Assert.assertEquals(-1.0F,FastMath.signum(-2.0F),delta);TestUtils.assertSame(Float.NaN,FastMath.signum(Float.NaN));}"
"org.apache.commons.math3.util.FastMathTest.testLogWithBase",0,"@Test public void testLogWithBase(){Assert.assertEquals(2.0,FastMath.log(2,4),0);Assert.assertEquals(3.0,FastMath.log(2,8),0);Assert.assertTrue(Double.isNaN(FastMath.log(-1,1)));Assert.assertTrue(Double.isNaN(FastMath.log(1,-1)));Assert.assertTrue(Double.isNaN(FastMath.log(0,0)));Assert.assertEquals(0,FastMath.log(0,10),0);Assert.assertEquals(Double.NEGATIVE_INFINITY,FastMath.log(10,0),0);}"
"org.apache.commons.math3.util.FastMathTest.testIndicatorDouble",0,"@Test public void testIndicatorDouble(){double delta=0.0;Assert.assertEquals(1.0,FastMath.copySign(1d,2.0),delta);Assert.assertEquals(1.0,FastMath.copySign(1d,0.0),delta);Assert.assertEquals(-1.0,FastMath.copySign(1d,-0.0),delta);Assert.assertEquals(1.0,FastMath.copySign(1d,Double.POSITIVE_INFINITY),delta);Assert.assertEquals(-1.0,FastMath.copySign(1d,Double.NEGATIVE_INFINITY),delta);Assert.assertEquals(1.0,FastMath.copySign(1d,Double.NaN),delta);Assert.assertEquals(-1.0,FastMath.copySign(1d,-2.0),delta);}"
"org.apache.commons.math3.util.FastMathTest.testIndicatorFloat",0,"@Test public void testIndicatorFloat(){float delta=0.0F;Assert.assertEquals(1.0F,FastMath.copySign(1d,2.0F),delta);Assert.assertEquals(1.0F,FastMath.copySign(1d,0.0F),delta);Assert.assertEquals(-1.0F,FastMath.copySign(1d,-0.0F),delta);Assert.assertEquals(1.0F,FastMath.copySign(1d,Float.POSITIVE_INFINITY),delta);Assert.assertEquals(-1.0F,FastMath.copySign(1d,Float.NEGATIVE_INFINITY),delta);Assert.assertEquals(1.0F,FastMath.copySign(1d,Float.NaN),delta);Assert.assertEquals(-1.0F,FastMath.copySign(1d,-2.0F),delta);}"
"org.apache.commons.math3.util.FastMathTest.testIntPow",0,"@Test public void testIntPow(){final int maxExp=300;DfpField field=new DfpField(40);final double base=1.23456789;Dfp baseDfp=field.newDfp(base);Dfp dfpPower=field.getOne();for (int i=0;i < maxExp;i++){Assert.assertEquals(""exp="" + i,dfpPower.toDouble(),FastMath.pow(base,i),0.6 * FastMath.ulp(dfpPower.toDouble()));dfpPower=dfpPower.multiply(baseDfp);}}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0.0,1.0});setInverseCumulativeTestValues(new double[]{Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testMedian",0,"@Test public void testMedian(){CauchyDistribution distribution=(CauchyDistribution)getDistribution();Assert.assertEquals(1.2,distribution.getMedian(),0.0);}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testScale",0,"@Test public void testScale(){CauchyDistribution distribution=(CauchyDistribution)getDistribution();Assert.assertEquals(2.1,distribution.getScale(),0.0);}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testPreconditions",0,"@Test public void testPreconditions(){try {new CauchyDistribution(0,0);Assert.fail(""Cannot have zero scale"");}catch(NotStrictlyPositiveException ex){}try {new CauchyDistribution(0,-1);Assert.fail(""Cannot have negative scale"");}catch(NotStrictlyPositiveException ex){}}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testMoments",0,"@Test public void testMoments(){CauchyDistribution dist;dist=new CauchyDistribution(10.2,0.15);Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));dist=new CauchyDistribution(23.12,2.12);Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.CauchyDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testMinimize1",0,"@Test public void testMinimize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-11,1e-30);optimizer.setSimplex(new MultiDirectionalSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(200,fourExtrema,GoalType.MINIMIZE,new double[]{-3,0});Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],4e-6);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXmYp,optimum.getValue(),8e-13);Assert.assertTrue(optimizer.getEvaluations()> 120);Assert.assertTrue(optimizer.getEvaluations()< 150);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testMinimize2",0,"@Test public void testMinimize2(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-11,1e-30);optimizer.setSimplex(new MultiDirectionalSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(200,fourExtrema,GoalType.MINIMIZE,new double[]{1,0});Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],2e-8);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXpYm,optimum.getValue(),2e-12);Assert.assertTrue(optimizer.getEvaluations()> 120);Assert.assertTrue(optimizer.getEvaluations()< 150);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testMaximize1",0,"@Test public void testMaximize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-11,1e-30);optimizer.setSimplex(new MultiDirectionalSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(200,fourExtrema,GoalType.MAXIMIZE,new double[]{-3.0,0.0});Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],7e-7);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],3e-7);Assert.assertEquals(fourExtrema.valueXmYm,optimum.getValue(),2e-14);Assert.assertTrue(optimizer.getEvaluations()> 120);Assert.assertTrue(optimizer.getEvaluations()< 150);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testMaximize2",0,"@Test public void testMaximize2(){SimplexOptimizer optimizer=new SimplexOptimizer(new SimpleValueChecker(1e-15,1e-30));optimizer.setSimplex(new MultiDirectionalSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(200,fourExtrema,GoalType.MAXIMIZE,new double[]{1,0});Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],2e-8);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXpYp,optimum.getValue(),2e-12);Assert.assertTrue(optimizer.getEvaluations()> 180);Assert.assertTrue(optimizer.getEvaluations()< 220);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testRosenbrock",0,"@Test public void testRosenbrock(){MultivariateFunction rosenbrock=new MultivariateFunction(){public double value(double[]x){++count;double a=x[1]- x[0]* x[0];double b=1.0 - x[0];return 100 * a * a + b * b;}};count=0;SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);optimizer.setSimplex(new MultiDirectionalSimplex(new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}}));PointValuePair optimum=optimizer.optimize(100,rosenbrock,GoalType.MINIMIZE,new double[]{-1.2,1});Assert.assertEquals(count,optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 50);Assert.assertTrue(optimizer.getEvaluations()< 100);Assert.assertTrue(optimum.getValue()> 1e-2);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testPowell",0,"@Test public void testPowell(){MultivariateFunction powell=new MultivariateFunction(){public double value(double[]x){++count;double a=x[0]+ 10 * x[1];double b=x[2]- x[3];double c=x[1]- 2 * x[2];double d=x[0]- x[3];return a * a + 5 * b * b + c * c * c* c + 10 * d * d* d* d;}};count=0;SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);optimizer.setSimplex(new MultiDirectionalSimplex(4));PointValuePair optimum=optimizer.optimize(1000,powell,GoalType.MINIMIZE,new double[]{3,-1,0,1});Assert.assertEquals(count,optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 800);Assert.assertTrue(optimizer.getEvaluations()< 900);Assert.assertTrue(optimum.getValue()> 1e-2);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerMultiDirectionalTest.testMath283",0,"@Test public void testMath283(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-14,1e-14);optimizer.setSimplex(new MultiDirectionalSimplex(2));final Gaussian2D function=new Gaussian2D(0,0,1);PointValuePair estimate=optimizer.optimize(1000,function,GoalType.MAXIMIZE,function.getMaximumPosition());final double EPSILON=1e-5;final double expectedMaximum=function.getMaximum();final double actualMaximum=estimate.getValue();Assert.assertEquals(expectedMaximum,actualMaximum,EPSILON);final double[]expectedPosition=function.getMaximumPosition();final double[]actualPosition=estimate.getPoint();Assert.assertEquals(expectedPosition[0],actualPosition[0],EPSILON);Assert.assertEquals(expectedPosition[1],actualPosition[1],EPSILON);}"
"org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n = 0*/@Test public void testNaN(){StandardDeviation std=new StandardDeviation();Assert.assertTrue(Double.isNaN(std.getResult()));std.increment(1d);Assert.assertEquals(0d,std.getResult(),0);}"
"org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testPopulation",0,"/** * Test population version of variance*/@Test public void testPopulation(){double[]values={-1.0d,3.1d,4.0d,-2.1d,22d,11.7d,3d,14d};SecondMoment m=new SecondMoment();m.evaluate(values);Variance v1=new Variance();v1.setBiasCorrected(false);Assert.assertEquals(populationVariance(values),v1.evaluate(values),1E-14);v1.incrementAll(values);Assert.assertEquals(populationVariance(values),v1.getResult(),1E-14);v1=new Variance(false,m);Assert.assertEquals(populationVariance(values),v1.getResult(),1E-14);v1=new Variance(false);Assert.assertEquals(populationVariance(values),v1.evaluate(values),1E-14);v1.incrementAll(values);Assert.assertEquals(populationVariance(values),v1.getResult(),1E-14);}"
"org.apache.commons.math3.stat.descriptive.moment.VarianceTest.testWeightedVariance",0,"@Test public void testWeightedVariance(){Variance variance=new Variance();Assert.assertEquals(expectedWeightedValue(),variance.evaluate(testArray,testWeightsArray,0,testArray.length),getTolerance());Assert.assertEquals(expectedValue(),variance.evaluate(testArray,unitWeightsArray,0,testArray.length),getTolerance());Assert.assertEquals(expectedValue(),variance.evaluate(testArray,MathArrays.normalizeArray(identicalWeightsArray,testArray.length),0,testArray.length),getTolerance());}"
"org.apache.commons.math3.optimization.SimplePointCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimplePointChecker<PointValuePair>(1e-1,1e-2,0);}"
"org.apache.commons.math3.optimization.SimplePointCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimplePointChecker<PointValuePair> checker=new SimplePointChecker<PointValuePair>(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optimization.SimplePointCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimplePointChecker<PointValuePair> checker=new SimplePointChecker<PointValuePair>(1e-8,1e-8);final PointValuePair a=new PointValuePair(new double[]{1d},1d);final PointValuePair b=new PointValuePair(new double[]{10d},10d);Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.exception.MaxCountExceededExceptionTest.testAccessors",0,"@Test public void testAccessors(){final MaxCountExceededException e=new MaxCountExceededException(10);Assert.assertEquals(10,e.getMax());}"
"org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest.dimension2",0,"@Test public void dimension2(){KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer=new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l));EuclideanIntegerPoint[]points=new EuclideanIntegerPoint[]{new EuclideanIntegerPoint(new int[]{-15,3}),new EuclideanIntegerPoint(new int[]{-15,4}),new EuclideanIntegerPoint(new int[]{-15,5}),new EuclideanIntegerPoint(new int[]{-14,3}),new EuclideanIntegerPoint(new int[]{-14,5}),new EuclideanIntegerPoint(new int[]{-13,3}),new EuclideanIntegerPoint(new int[]{-13,4}),new EuclideanIntegerPoint(new int[]{-13,5}),new EuclideanIntegerPoint(new int[]{-1,0}),new EuclideanIntegerPoint(new int[]{-1,-1}),new EuclideanIntegerPoint(new int[]{0,-1}),new EuclideanIntegerPoint(new int[]{1,-1}),new EuclideanIntegerPoint(new int[]{1,-2}),new EuclideanIntegerPoint(new int[]{13,3}),new EuclideanIntegerPoint(new int[]{13,4}),new EuclideanIntegerPoint(new int[]{14,4}),new EuclideanIntegerPoint(new int[]{14,7}),new EuclideanIntegerPoint(new int[]{16,5}),new EuclideanIntegerPoint(new int[]{16,6}),new EuclideanIntegerPoint(new int[]{17,4}),new EuclideanIntegerPoint(new int[]{17,7})};List<Cluster<EuclideanIntegerPoint>> clusters=transformer.cluster(Arrays.asList(points),3,5,10);Assert.assertEquals(3,clusters.size());boolean cluster1Found=false;boolean cluster2Found=false;boolean cluster3Found=false;for(Cluster<EuclideanIntegerPoint> cluster : clusters){int[]center=cluster.getCenter().getPoint();if (center[0]< 0){cluster1Found=true;Assert.assertEquals(8,cluster.getPoints().size());Assert.assertEquals(-14,center[0]);Assert.assertEquals(4,center[1]);}else     if (center[1]< 0){cluster2Found=true;Assert.assertEquals(5,cluster.getPoints().size());Assert.assertEquals(0,center[0]);Assert.assertEquals(-1,center[1]);}else {cluster3Found=true;Assert.assertEquals(8,cluster.getPoints().size());Assert.assertEquals(15,center[0]);Assert.assertEquals(5,center[1]);}}Assert.assertTrue(cluster1Found);Assert.assertTrue(cluster2Found);Assert.assertTrue(cluster3Found);}"
"org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate",0,"/** * JIRA: MATH-305 Two points,one cluster,one iteration*/@Test public void testPerformClusterAnalysisDegenerate(){KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer=new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l));EuclideanIntegerPoint[]points=new EuclideanIntegerPoint[]{new EuclideanIntegerPoint(new int[]{1959,325100}),new EuclideanIntegerPoint(new int[]{1960,373200})};List<Cluster<EuclideanIntegerPoint>> clusters=transformer.cluster(Arrays.asList(points),1,1);Assert.assertEquals(1,clusters.size());Assert.assertEquals(2,(clusters.get(0).getPoints().size()));EuclideanIntegerPoint pt1=new EuclideanIntegerPoint(new int[]{1959,325100});EuclideanIntegerPoint pt2=new EuclideanIntegerPoint(new int[]{1960,373200});Assert.assertTrue(clusters.get(0).getPoints().contains(pt1));Assert.assertTrue(clusters.get(0).getPoints().contains(pt2));}"
"org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest.testCertainSpace",0,"@Test public void testCertainSpace(){KMeansPlusPlusClusterer.EmptyClusterStrategy[]strategies={KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE,KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER,KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT};for(KMeansPlusPlusClusterer.EmptyClusterStrategy strategy : strategies){KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer=new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l),strategy);int numberOfVariables=27;int position1=1;int position2=position1 + numberOfVariables;int position3=position2 + numberOfVariables;int position4=position3 + numberOfVariables;int multiplier=1000000;EuclideanIntegerPoint[]breakingPoints=new EuclideanIntegerPoint[numberOfVariables];for (int i=0;i < numberOfVariables;i++){int points[]={position1,position2,position3,position4};for (int j=0;j < points.length;j++){points[j]=points[j]* multiplier;}EuclideanIntegerPoint euclideanIntegerPoint=new EuclideanIntegerPoint(points);breakingPoints[i]=euclideanIntegerPoint;position1=position1 + numberOfVariables;position2=position2 + numberOfVariables;position3=position3 + numberOfVariables;position4=position4 + numberOfVariables;}for (int n=2;n < 27;++n){List<Cluster<EuclideanIntegerPoint>> clusters=transformer.cluster(Arrays.asList(breakingPoints),n,100);Assert.assertEquals(n,clusters.size());int sum=0;for(Cluster<EuclideanIntegerPoint> cluster : clusters){sum+=cluster.getPoints().size();}Assert.assertEquals(numberOfVariables,sum);}}}"
"org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest.testSmallDistances",0,"/** * Test points that are very close together. See issue MATH-546.*/@Test public void testSmallDistances(){int[]repeatedArray={0};int[]uniqueArray={1};CloseIntegerPoint repeatedPoint=new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));CloseIntegerPoint uniquePoint=new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));Collection<CloseIntegerPoint> points=new ArrayList<CloseIntegerPoint>();final int NUM_REPEATED_POINTS=10 * 1000;for (int i=0;i < NUM_REPEATED_POINTS;++i){points.add(repeatedPoint);}points.add(uniquePoint);final long RANDOM_SEED=0;final int NUM_CLUSTERS=2;final int NUM_ITERATIONS=0;KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer=new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));List<Cluster<CloseIntegerPoint>> clusters=clusterer.cluster(points,NUM_CLUSTERS,NUM_ITERATIONS);boolean uniquePointIsCenter=false;for(Cluster<CloseIntegerPoint> cluster : clusters){if (cluster.getCenter().equals(uniquePoint)){uniquePointIsCenter=true;}}Assert.assertTrue(uniquePointIsCenter);}"
"org.apache.commons.math3.stat.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisToManyClusters",0,"/** * 2 variables cannot be clustered into 3 clusters. See issue MATH-436.*/@Test(expected=NumberIsTooSmallException.class)public void testPerformClusterAnalysisToManyClusters(){KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer=new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(new Random(1746432956321l));EuclideanIntegerPoint[]points=new EuclideanIntegerPoint[]{new EuclideanIntegerPoint(new int[]{1959,325100}),new EuclideanIntegerPoint(new int[]{1960,373200})};transformer.cluster(Arrays.asList(points),3,1);}"
"org.apache.commons.math3.stat.CertifiedDataTest.testSummaryStatistics",0,"/** * Test SummaryStatistics - implementations that do not store the data and use single pass algorithms to compute statistics*/@Test public void testSummaryStatistics()throws Exception {SummaryStatistics u=new SummaryStatistics();loadStats(""data/PiDigits.txt"",u);Assert.assertEquals(""PiDigits: std"",std,u.getStandardDeviation(),1E-13);Assert.assertEquals(""PiDigits: mean"",mean,u.getMean(),1E-13);loadStats(""data/Mavro.txt"",u);Assert.assertEquals(""Mavro: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""Mavro: mean"",mean,u.getMean(),1E-14);loadStats(""data/Michelso.txt"",u);Assert.assertEquals(""Michelso: std"",std,u.getStandardDeviation(),1E-13);Assert.assertEquals(""Michelso: mean"",mean,u.getMean(),1E-13);loadStats(""data/NumAcc1.txt"",u);Assert.assertEquals(""NumAcc1: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""NumAcc1: mean"",mean,u.getMean(),1E-14);loadStats(""data/NumAcc2.txt"",u);Assert.assertEquals(""NumAcc2: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""NumAcc2: mean"",mean,u.getMean(),1E-14);}"
"org.apache.commons.math3.stat.CertifiedDataTest.testDescriptiveStatistics",0,"/** * Test DescriptiveStatistics - implementations that store full array of values and execute multi-pass algorithms*/@Test public void testDescriptiveStatistics()throws Exception {DescriptiveStatistics u=new DescriptiveStatistics();loadStats(""data/PiDigits.txt"",u);Assert.assertEquals(""PiDigits: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""PiDigits: mean"",mean,u.getMean(),1E-14);loadStats(""data/Mavro.txt"",u);Assert.assertEquals(""Mavro: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""Mavro: mean"",mean,u.getMean(),1E-14);loadStats(""data/Michelso.txt"",u);Assert.assertEquals(""Michelso: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""Michelso: mean"",mean,u.getMean(),1E-14);loadStats(""data/NumAcc1.txt"",u);Assert.assertEquals(""NumAcc1: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""NumAcc1: mean"",mean,u.getMean(),1E-14);loadStats(""data/NumAcc2.txt"",u);Assert.assertEquals(""NumAcc2: std"",std,u.getStandardDeviation(),1E-14);Assert.assertEquals(""NumAcc2: mean"",mean,u.getMean(),1E-14);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaNanPositivePositive",0,"@Test public void testRegularizedBetaNanPositivePositive(){testRegularizedBeta(Double.NaN,Double.NaN,1.0,1.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositiveNanPositive",0,"@Test public void testRegularizedBetaPositiveNanPositive(){testRegularizedBeta(Double.NaN,0.5,Double.NaN,1.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositivePositiveNan",0,"@Test public void testRegularizedBetaPositivePositiveNan(){testRegularizedBeta(Double.NaN,0.5,1.0,Double.NaN);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaNegativePositivePositive",0,"@Test public void testRegularizedBetaNegativePositivePositive(){testRegularizedBeta(Double.NaN,-0.5,1.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositiveNegativePositive",0,"@Test public void testRegularizedBetaPositiveNegativePositive(){testRegularizedBeta(Double.NaN,0.5,-1.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositivePositiveNegative",0,"@Test public void testRegularizedBetaPositivePositiveNegative(){testRegularizedBeta(Double.NaN,0.5,1.0,-2.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaZeroPositivePositive",0,"@Test public void testRegularizedBetaZeroPositivePositive(){testRegularizedBeta(0.0,0.0,1.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositiveZeroPositive",0,"@Test public void testRegularizedBetaPositiveZeroPositive(){testRegularizedBeta(Double.NaN,0.5,0.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositivePositiveZero",0,"@Test public void testRegularizedBetaPositivePositiveZero(){testRegularizedBeta(Double.NaN,0.5,1.0,0.0);}"
"org.apache.commons.math3.special.BetaTest.testRegularizedBetaPositivePositivePositive",0,"@Test public void testRegularizedBetaPositivePositivePositive(){testRegularizedBeta(0.75,0.5,1.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaNanPositive",0,"@Test public void testLogBetaNanPositive(){testLogBeta(Double.NaN,Double.NaN,2.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaPositiveNan",0,"@Test public void testLogBetaPositiveNan(){testLogBeta(Double.NaN,1.0,Double.NaN);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaNegativePositive",0,"@Test public void testLogBetaNegativePositive(){testLogBeta(Double.NaN,-1.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaPositiveNegative",0,"@Test public void testLogBetaPositiveNegative(){testLogBeta(Double.NaN,1.0,-2.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaZeroPositive",0,"@Test public void testLogBetaZeroPositive(){testLogBeta(Double.NaN,0.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaPositiveZero",0,"@Test public void testLogBetaPositiveZero(){testLogBeta(Double.NaN,1.0,0.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBetaPositivePositive",0,"@Test public void testLogBetaPositivePositive(){testLogBeta(-0.693147180559945,1.0,2.0);}"
"org.apache.commons.math3.special.BetaTest.testLogGammaSum",0,"@Test public void testLogGammaSum(){final int ulps=2;for (int i=0;i < LOG_GAMMA_SUM_REF.length;i++){final double[]ref=LOG_GAMMA_SUM_REF[i];final double a=ref[0];final double b=ref[1];final double expected=ref[2];final double actual=logGammaSum(a,b);final double tol=ulps * FastMath.ulp(expected);final StringBuilder builder=new StringBuilder();builder.append(a).append("","").append(b);Assert.assertEquals(builder.toString(),expected,actual,tol);}}"
"org.apache.commons.math3.special.BetaTest.testLogGammaSumPrecondition1",0,"@Test(expected=OutOfRangeException.class)public void testLogGammaSumPrecondition1(){logGammaSum(0.0,1.0);}"
"org.apache.commons.math3.special.BetaTest.testLogGammaSumPrecondition2",0,"@Test(expected=OutOfRangeException.class)public void testLogGammaSumPrecondition2(){logGammaSum(3.0,1.0);}"
"org.apache.commons.math3.special.BetaTest.testLogGammaSumPrecondition3",0,"@Test(expected=OutOfRangeException.class)public void testLogGammaSumPrecondition3(){logGammaSum(1.0,0.0);}"
"org.apache.commons.math3.special.BetaTest.testLogGammaSumPrecondition4",0,"@Test(expected=OutOfRangeException.class)public void testLogGammaSumPrecondition4(){logGammaSum(1.0,3.0);}"
"org.apache.commons.math3.special.BetaTest.testLogGammaMinusLogGammaSum",0,"@Test public void testLogGammaMinusLogGammaSum(){final int ulps=4;for (int i=0;i < LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF.length;i++){final double[]ref=LOG_GAMMA_MINUS_LOG_GAMMA_SUM_REF[i];final double a=ref[0];final double b=ref[1];final double expected=ref[2];final double actual=logGammaMinusLogGammaSum(a,b);final double tol=ulps * FastMath.ulp(expected);final StringBuilder builder=new StringBuilder();builder.append(a).append("","").append(b);Assert.assertEquals(builder.toString(),expected,actual,tol);}}"
"org.apache.commons.math3.special.BetaTest.testLogGammaMinusLogGammaSumPrecondition1",0,"@Test(expected=NumberIsTooSmallException.class)public void testLogGammaMinusLogGammaSumPrecondition1(){logGammaMinusLogGammaSum(-1.0,8.0);}"
"org.apache.commons.math3.special.BetaTest.testLogGammaMinusLogGammaSumPrecondition2",0,"@Test(expected=NumberIsTooSmallException.class)public void testLogGammaMinusLogGammaSumPrecondition2(){logGammaMinusLogGammaSum(1.0,7.0);}"
"org.apache.commons.math3.special.BetaTest.testSumDeltaMinusDeltaSum",0,"@Test public void testSumDeltaMinusDeltaSum(){final int ulps=3;for (int i=0;i < SUM_DELTA_MINUS_DELTA_SUM_REF.length;i++){final double[]ref=SUM_DELTA_MINUS_DELTA_SUM_REF[i];final double a=ref[0];final double b=ref[1];final double expected=ref[2];final double actual=sumDeltaMinusDeltaSum(a,b);final double tol=ulps * FastMath.ulp(expected);final StringBuilder builder=new StringBuilder();builder.append(a).append("","").append(b);Assert.assertEquals(builder.toString(),expected,actual,tol);}}"
"org.apache.commons.math3.special.BetaTest.testSumDeltaMinusDeltaSumPrecondition1",0,"@Test(expected=NumberIsTooSmallException.class)public void testSumDeltaMinusDeltaSumPrecondition1(){sumDeltaMinusDeltaSum(9.0,10.0);}"
"org.apache.commons.math3.special.BetaTest.testSumDeltaMinusDeltaSumPrecondition2",0,"@Test(expected=NumberIsTooSmallException.class)public void testSumDeltaMinusDeltaSumPrecondition2(){sumDeltaMinusDeltaSum(10.0,9.0);}"
"org.apache.commons.math3.special.BetaTest.testLogBeta",0,"@Test public void testLogBeta(){final int ulps=3;for (int i=0;i < LOG_BETA_REF.length;i++){final double[]ref=LOG_BETA_REF[i];final double a=ref[0];final double b=ref[1];final double expected=ref[2];final double actual=Beta.logBeta(a,b);final double tol=ulps * FastMath.ulp(expected);final StringBuilder builder=new StringBuilder();builder.append(a).append("","").append(b);Assert.assertEquals(builder.toString(),expected,actual,tol);}}"
"org.apache.commons.math3.complex.QuaternionTest.testAccessors1",0,"@Test public final void testAccessors1(){final double q0=2;final double q1=5.4;final double q2=17;final double q3=0.0005;final Quaternion q=new Quaternion(q0,q1,q2,q3);Assert.assertEquals(q0,q.getQ0(),0);Assert.assertEquals(q1,q.getQ1(),0);Assert.assertEquals(q2,q.getQ2(),0);Assert.assertEquals(q3,q.getQ3(),0);}"
"org.apache.commons.math3.complex.QuaternionTest.testAccessors2",0,"@Test public final void testAccessors2(){final double q0=2;final double q1=5.4;final double q2=17;final double q3=0.0005;final Quaternion q=new Quaternion(q0,q1,q2,q3);final double sP=q.getScalarPart();final double[]vP=q.getVectorPart();Assert.assertEquals(q0,sP,0);Assert.assertEquals(q1,vP[0],0);Assert.assertEquals(q2,vP[1],0);Assert.assertEquals(q3,vP[2],0);}"
"org.apache.commons.math3.complex.QuaternionTest.testAccessors3",0,"@Test public final void testAccessors3(){final double q0=2;final double q1=5.4;final double q2=17;final double q3=0.0005;final Quaternion q=new Quaternion(q0,new double[]{q1,q2,q3});final double sP=q.getScalarPart();final double[]vP=q.getVectorPart();Assert.assertEquals(q0,sP,0);Assert.assertEquals(q1,vP[0],0);Assert.assertEquals(q2,vP[1],0);Assert.assertEquals(q3,vP[2],0);}"
"org.apache.commons.math3.complex.QuaternionTest.testWrongDimension",0,"@Test(expected=DimensionMismatchException.class)public void testWrongDimension(){new Quaternion(new double[]{1,2});}"
"org.apache.commons.math3.complex.QuaternionTest.testConjugate",0,"@Test public final void testConjugate(){final double q0=2;final double q1=5.4;final double q2=17;final double q3=0.0005;final Quaternion q=new Quaternion(q0,q1,q2,q3);final Quaternion qConjugate=q.getConjugate();Assert.assertEquals(q0,qConjugate.getQ0(),0);Assert.assertEquals(-q1,qConjugate.getQ1(),0);Assert.assertEquals(-q2,qConjugate.getQ2(),0);Assert.assertEquals(-q3,qConjugate.getQ3(),0);}"
"org.apache.commons.math3.complex.QuaternionTest.testProductQuaternionQuaternion",0,"@Test public final void testProductQuaternionQuaternion(){final Quaternion qA=new Quaternion(1,0.5,-3,4);final Quaternion qB=new Quaternion(6,2,1,-9);final Quaternion qResult=Quaternion.multiply(qA,qB);Assert.assertEquals(44,qResult.getQ0(),EPS);Assert.assertEquals(28,qResult.getQ1(),EPS);Assert.assertEquals(-4.5,qResult.getQ2(),EPS);Assert.assertEquals(21.5,qResult.getQ3(),EPS);final Vector3D vectorA=new Vector3D(qA.getVectorPart());final Vector3D vectorB=new Vector3D(qB.getVectorPart());final Vector3D vectorResult=new Vector3D(qResult.getVectorPart());final double scalarPartRef=qA.getScalarPart()* qB.getScalarPart()- Vector3D.dotProduct(vectorA,vectorB);Assert.assertEquals(scalarPartRef,qResult.getScalarPart(),EPS);final Vector3D vectorPartRef=((vectorA.scalarMultiply(qB.getScalarPart())).add(vectorB.scalarMultiply(qA.getScalarPart()))).add(Vector3D.crossProduct(vectorA,vectorB));final double norm=(vectorResult.subtract(vectorPartRef)).getNorm();Assert.assertEquals(0,norm,EPS);final Quaternion conjugateOfProduct=qB.getConjugate().multiply(qA.getConjugate());final Quaternion productOfConjugate=(qA.multiply(qB)).getConjugate();Assert.assertEquals(conjugateOfProduct.getQ0(),productOfConjugate.getQ0(),EPS);Assert.assertEquals(conjugateOfProduct.getQ1(),productOfConjugate.getQ1(),EPS);Assert.assertEquals(conjugateOfProduct.getQ2(),productOfConjugate.getQ2(),EPS);Assert.assertEquals(conjugateOfProduct.getQ3(),productOfConjugate.getQ3(),EPS);}"
"org.apache.commons.math3.complex.QuaternionTest.testProductQuaternionVector",0,"@Test public final void testProductQuaternionVector(){final Quaternion quaternion=new Quaternion(4,7,-1,2);final double[]vector={2.0,1.0,3.0};final Quaternion qResultQxV=Quaternion.multiply(quaternion,new Quaternion(vector));Assert.assertEquals(-19,qResultQxV.getQ0(),EPS);Assert.assertEquals(3,qResultQxV.getQ1(),EPS);Assert.assertEquals(-13,qResultQxV.getQ2(),EPS);Assert.assertEquals(21,qResultQxV.getQ3(),EPS);final double[]vectorQ=quaternion.getVectorPart();final double[]vectorResultQxV=qResultQxV.getVectorPart();final double scalarPartRefQxV=-Vector3D.dotProduct(new Vector3D(vectorQ),new Vector3D(vector));Assert.assertEquals(scalarPartRefQxV,qResultQxV.getScalarPart(),EPS);final Vector3D vectorPartRefQxV=(new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D.crossProduct(new Vector3D(vectorQ),new Vector3D(vector)));final double normQxV=(new Vector3D(vectorResultQxV).subtract(vectorPartRefQxV)).getNorm();Assert.assertEquals(0,normQxV,EPS);final Quaternion qResultVxQ=Quaternion.multiply(new Quaternion(vector),quaternion);Assert.assertEquals(-19,qResultVxQ.getQ0(),EPS);Assert.assertEquals(13,qResultVxQ.getQ1(),EPS);Assert.assertEquals(21,qResultVxQ.getQ2(),EPS);Assert.assertEquals(3,qResultVxQ.getQ3(),EPS);final double[]vectorResultVxQ=qResultVxQ.getVectorPart();final double scalarPartRefVxQ=-Vector3D.dotProduct(new Vector3D(vectorQ),new Vector3D(vector));Assert.assertEquals(scalarPartRefVxQ,qResultVxQ.getScalarPart(),EPS);final Vector3D vectorPartRefVxQ=(new Vector3D(vector).scalarMultiply(quaternion.getScalarPart())).add(Vector3D.crossProduct(new Vector3D(vector),new Vector3D(vectorQ)));final double normVxQ=(new Vector3D(vectorResultVxQ).subtract(vectorPartRefVxQ)).getNorm();Assert.assertEquals(0,normVxQ,EPS);}"
"org.apache.commons.math3.complex.QuaternionTest.testDotProductQuaternionQuaternion",0,"@Test public final void testDotProductQuaternionQuaternion(){final double expected=-6.;final Quaternion q1=new Quaternion(1,2,2,1);final Quaternion q2=new Quaternion(3,-2,-1,-3);final double actual1=Quaternion.dotProduct(q1,q2);final double actual2=q1.dotProduct(q2);Assert.assertEquals(expected,actual1,EPS);Assert.assertEquals(expected,actual2,EPS);}"
"org.apache.commons.math3.complex.QuaternionTest.testScalarMultiplyDouble",0,"@Test public final void testScalarMultiplyDouble(){final double w=1.6;final double x=-4.8;final double y=11.20;final double z=2.56;final Quaternion q1=new Quaternion(0.5,-1.5,3.5,0.8);final double a=3.2;final Quaternion q=q1.multiply(a);Assert.assertEquals(w,q.getQ0(),COMPARISON_EPS);Assert.assertEquals(x,q.getQ1(),COMPARISON_EPS);Assert.assertEquals(y,q.getQ2(),COMPARISON_EPS);Assert.assertEquals(z,q.getQ3(),COMPARISON_EPS);}"
"org.apache.commons.math3.complex.QuaternionTest.testAddQuaternionQuaternion",0,"@Test public final void testAddQuaternionQuaternion(){final double w=4;final double x=-1;final double y=2;final double z=-4;final Quaternion q1=new Quaternion(1.,2.,-2.,-1.);final Quaternion q2=new Quaternion(3.,-3.,4.,-3.);final Quaternion qa=Quaternion.add(q1,q2);final Quaternion qb=q1.add(q2);Assert.assertEquals(w,qa.getQ0(),EPS);Assert.assertEquals(x,qa.getQ1(),EPS);Assert.assertEquals(y,qa.getQ2(),EPS);Assert.assertEquals(z,qa.getQ3(),EPS);Assert.assertEquals(w,qb.getQ0(),EPS);Assert.assertEquals(x,qb.getQ1(),EPS);Assert.assertEquals(y,qb.getQ2(),EPS);Assert.assertEquals(z,qb.getQ3(),EPS);}"
"org.apache.commons.math3.complex.QuaternionTest.testSubtractQuaternionQuaternion",0,"@Test public final void testSubtractQuaternionQuaternion(){final double w=-2.;final double x=5.;final double y=-6.;final double z=2.;final Quaternion q1=new Quaternion(1.,2.,-2.,-1.);final Quaternion q2=new Quaternion(3.,-3.,4.,-3.);final Quaternion qa=Quaternion.subtract(q1,q2);final Quaternion qb=q1.subtract(q2);Assert.assertEquals(w,qa.getQ0(),EPS);Assert.assertEquals(x,qa.getQ1(),EPS);Assert.assertEquals(y,qa.getQ2(),EPS);Assert.assertEquals(z,qa.getQ3(),EPS);Assert.assertEquals(w,qb.getQ0(),EPS);Assert.assertEquals(x,qb.getQ1(),EPS);Assert.assertEquals(y,qb.getQ2(),EPS);Assert.assertEquals(z,qb.getQ3(),EPS);}"
"org.apache.commons.math3.complex.QuaternionTest.testNorm",0,"@Test public final void testNorm(){final double q0=2;final double q1=1;final double q2=-4;final double q3=3;final Quaternion q=new Quaternion(q0,q1,q2,q3);final double norm=q.getNorm();Assert.assertEquals(Math.sqrt(30),norm,0);final double normSquareRef=Quaternion.multiply(q,q.getConjugate()).getScalarPart();Assert.assertEquals(Math.sqrt(normSquareRef),norm,0);}"
"org.apache.commons.math3.complex.QuaternionTest.testNormalize",0,"@Test public final void testNormalize(){final Quaternion q=new Quaternion(2,1,-4,-2);final Quaternion versor=q.normalize();Assert.assertEquals(2.0 / 5.0,versor.getQ0(),0);Assert.assertEquals(1.0 / 5.0,versor.getQ1(),0);Assert.assertEquals(-4.0 / 5.0,versor.getQ2(),0);Assert.assertEquals(-2.0 / 5.0,versor.getQ3(),0);Assert.assertEquals(1,versor.getNorm(),0);}"
"org.apache.commons.math3.complex.QuaternionTest.testNormalizeFail",0,"@Test(expected=ZeroException.class)public final void testNormalizeFail(){final Quaternion zeroQ=new Quaternion(0,0,0,0);zeroQ.normalize();}"
"org.apache.commons.math3.complex.QuaternionTest.testObjectEquals",0,"@Test public final void testObjectEquals(){final double one=1;final Quaternion q1=new Quaternion(one,one,one,one);Assert.assertTrue(q1.equals(q1));final Quaternion q2=new Quaternion(one,one,one,one);Assert.assertTrue(q2.equals(q1));final Quaternion q3=new Quaternion(one,FastMath.nextUp(one),one,one);Assert.assertFalse(q3.equals(q1));}"
"org.apache.commons.math3.complex.QuaternionTest.testQuaternionEquals",0,"@Test public final void testQuaternionEquals(){final double inc=1e-5;final Quaternion q1=new Quaternion(2,1,-4,-2);final Quaternion q2=new Quaternion(q1.getQ0()+ inc,q1.getQ1(),q1.getQ2(),q1.getQ3());final Quaternion q3=new Quaternion(q1.getQ0(),q1.getQ1()+ inc,q1.getQ2(),q1.getQ3());final Quaternion q4=new Quaternion(q1.getQ0(),q1.getQ1(),q1.getQ2()+ inc,q1.getQ3());final Quaternion q5=new Quaternion(q1.getQ0(),q1.getQ1(),q1.getQ2(),q1.getQ3()+ inc);Assert.assertFalse(q1.equals(q2,0.9 * inc));Assert.assertFalse(q1.equals(q3,0.9 * inc));Assert.assertFalse(q1.equals(q4,0.9 * inc));Assert.assertFalse(q1.equals(q5,0.9 * inc));Assert.assertTrue(q1.equals(q2,1.1 * inc));Assert.assertTrue(q1.equals(q3,1.1 * inc));Assert.assertTrue(q1.equals(q4,1.1 * inc));Assert.assertTrue(q1.equals(q5,1.1 * inc));}"
"org.apache.commons.math3.complex.QuaternionTest.testQuaternionEquals2",0,"@Test public final void testQuaternionEquals2(){final Quaternion q1=new Quaternion(1,4,2,3);final double gap=1e-5;final Quaternion q2=new Quaternion(1 + gap,4 + gap,2 + gap,3 + gap);Assert.assertTrue(q1.equals(q2,10 * gap));Assert.assertFalse(q1.equals(q2,gap));Assert.assertFalse(q1.equals(q2,gap / 10));}"
"org.apache.commons.math3.complex.QuaternionTest.testIsUnitQuaternion",0,"@Test public final void testIsUnitQuaternion(){final Random r=new Random(48);final int numberOfTrials=1000;for (int i=0;i < numberOfTrials;i++){final Quaternion q1=new Quaternion(r.nextDouble(),r.nextDouble(),r.nextDouble(),r.nextDouble());final Quaternion q2=q1.normalize();Assert.assertTrue(q2.isUnitQuaternion(COMPARISON_EPS));}final Quaternion q=new Quaternion(1,1,1,1);Assert.assertFalse(q.isUnitQuaternion(COMPARISON_EPS));}"
"org.apache.commons.math3.complex.QuaternionTest.testIsPureQuaternion",0,"@Test public final void testIsPureQuaternion(){final Quaternion q1=new Quaternion(0,5,4,8);Assert.assertTrue(q1.isPureQuaternion(EPS));final Quaternion q2=new Quaternion(0 - EPS,5,4,8);Assert.assertTrue(q2.isPureQuaternion(EPS));final Quaternion q3=new Quaternion(0 - 1.1 * EPS,5,4,8);Assert.assertFalse(q3.isPureQuaternion(EPS));final Random r=new Random(48);final double[]v={r.nextDouble(),r.nextDouble(),r.nextDouble()};final Quaternion q4=new Quaternion(v);Assert.assertTrue(q4.isPureQuaternion(0));final Quaternion q5=new Quaternion(0,v);Assert.assertTrue(q5.isPureQuaternion(0));}"
"org.apache.commons.math3.complex.QuaternionTest.testPolarForm",0,"@Test public final void testPolarForm(){final Random r=new Random(48);final int numberOfTrials=1000;for (int i=0;i < numberOfTrials;i++){final Quaternion q=new Quaternion(2 * (r.nextDouble()- 0.5),2 * (r.nextDouble()- 0.5),2 * (r.nextDouble()- 0.5),2 * (r.nextDouble()- 0.5));final Quaternion qP=q.getPositivePolarForm();Assert.assertTrue(qP.isUnitQuaternion(COMPARISON_EPS));Assert.assertTrue(qP.getQ0()>= 0);final Rotation rot=new Rotation(q.getQ0(),q.getQ1(),q.getQ2(),q.getQ3(),true);final Rotation rotP=new Rotation(qP.getQ0(),qP.getQ1(),qP.getQ2(),qP.getQ3(),true);Assert.assertEquals(rot.getAngle(),rotP.getAngle(),COMPARISON_EPS);Assert.assertEquals(rot.getAxis().getX(),rot.getAxis().getX(),COMPARISON_EPS);Assert.assertEquals(rot.getAxis().getY(),rot.getAxis().getY(),COMPARISON_EPS);Assert.assertEquals(rot.getAxis().getZ(),rot.getAxis().getZ(),COMPARISON_EPS);}}"
"org.apache.commons.math3.complex.QuaternionTest.testGetInverse",0,"@Test public final void testGetInverse(){final Quaternion q=new Quaternion(1.5,4,2,-2.5);final Quaternion inverseQ=q.getInverse();Assert.assertEquals(1.5 / 28.5,inverseQ.getQ0(),0);Assert.assertEquals(-4.0 / 28.5,inverseQ.getQ1(),0);Assert.assertEquals(-2.0 / 28.5,inverseQ.getQ2(),0);Assert.assertEquals(2.5 / 28.5,inverseQ.getQ3(),0);final Quaternion product=Quaternion.multiply(inverseQ,q);Assert.assertEquals(1,product.getQ0(),EPS);Assert.assertEquals(0,product.getQ1(),EPS);Assert.assertEquals(0,product.getQ2(),EPS);Assert.assertEquals(0,product.getQ3(),EPS);final Quaternion qNul=new Quaternion(0,0,0,0);try {final Quaternion inverseQNul=qNul.getInverse();Assert.fail(""expecting ZeroException but got : "" + inverseQNul);}catch(ZeroException ex){}}"
"org.apache.commons.math3.complex.QuaternionTest.testToString",0,"@Test public final void testToString(){final Quaternion q=new Quaternion(1,2,3,4);Assert.assertTrue(q.toString().equals(""[1.0 2.0 3.0 4.0]""));}"
"org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest.testSinFunction",0,"/** * Test of interpolator for the sine function. <p> |sin^(n)(zeta)| <= 1.0,zeta in [0,2*PI]*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateInterpolator interpolator=new DividedDifferenceInterpolator();double x[],y[],z,expected,result,tolerance;int n=6;double min=0.0,max=2 * FastMath.PI;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=1.0;UnivariateFunction p=interpolator.interpolate(x,y);z=FastMath.PI / 4;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);z=FastMath.PI * 1.5;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest.testExpm1Function",0,"/** * Test of interpolator for the exponential function. <p> |expm1^(n)(zeta)| <= e,zeta in [-1,1]*/@Test public void testExpm1Function(){UnivariateFunction f=new Expm1();UnivariateInterpolator interpolator=new DividedDifferenceInterpolator();double x[],y[],z,expected,result,tolerance;int n=5;double min=-1.0,max=1.0;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=FastMath.E;UnivariateFunction p=interpolator.interpolate(x,y);z=0.0;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);z=0.5;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);z=-0.5;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolatorTest.testParameters",0,"/** * Test of parameters for the interpolator.*/@Test public void testParameters(){UnivariateInterpolator interpolator=new DividedDifferenceInterpolator();try {double x[]={1.0,2.0,2.0,4.0};double y[]={0.0,4.0,4.0,2.5};UnivariateFunction p=interpolator.interpolate(x,y);p.value(0.0);Assert.fail(""Expecting NonMonotonicSequenceException - bad abscissas array"");}catch(NonMonotonicSequenceException ex){}}"
"org.apache.commons.math3.stat.correlation.StorelessCovarianceTest.testLonglySimpleVar",0,"@Test public void testLonglySimpleVar(){double rCov=12333921.73333333246;StorelessBivariateCovariance cov=new StorelessBivariateCovariance();for (int i=0;i < longleyDataSimple.length;i++){cov.increment(longleyDataSimple[i][0],longleyDataSimple[i][0]);}TestUtils.assertEquals(""simple covariance test"",rCov,cov.getResult(),10E-7);}"
"org.apache.commons.math3.stat.correlation.StorelessCovarianceTest.testLonglySimpleCov",0,"@Test public void testLonglySimpleCov(){double rCov=36796.660000;StorelessBivariateCovariance cov=new StorelessBivariateCovariance();for (int i=0;i < longleyDataSimple.length;i++){cov.increment(longleyDataSimple[i][0],longleyDataSimple[i][1]);}TestUtils.assertEquals(""simple covariance test"",rCov,cov.getResult(),10E-7);}"
"org.apache.commons.math3.stat.correlation.StorelessCovarianceTest.testLonglyByRow",0,"/** * Test Longley dataset against R. Data Source: J. Longley (1967)""An Appraisal of Least Squares Programs for the Electronic Computer from the Point of View of the User"" Journal of the American Statistical Association,vol. 62. September,pp. 819-841. Data are from NIST: http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat*/@Test public void testLonglyByRow(){RealMatrix matrix=createRealMatrix(longleyData,16,7);double[]rData=new double[]{12333921.73333333246,3.679666000000000e+04,343330206.333333313,1649102.666666666744,1117681.066666666651,23461965.733333334,16240.93333333333248,36796.66000000000,1.164576250000000e+02,1063604.115416667,6258.666250000000,3490.253750000000,73503.000000000,50.92333333333334,343330206.33333331347,1.063604115416667e+06,9879353659.329166412,56124369.854166664183,30880428.345833335072,685240944.600000024,470977.90000000002328,1649102.66666666674,6.258666250000000e+03,56124369.854166664,873223.429166666698,-115378.762499999997,4462741.533333333,2973.03333333333330,1117681.06666666665,3.490253750000000e+03,30880428.345833335,-115378.762499999997,484304.095833333326,1764098.133333333,1382.43333333333339,23461965.73333333433,7.350300000000000e+04,685240944.600000024,4462741.533333333209,1764098.133333333302,48387348.933333330,32917.40000000000146,16240.93333333333,5.092333333333334e+01,470977.900000000,2973.033333333333,1382.433333333333,32917.40000000,22.66666666666667};StorelessCovariance covMatrix=new StorelessCovariance(7);for (int i=0;i < matrix.getRowDimension();i++){covMatrix.increment(matrix.getRow(i));}RealMatrix covarianceMatrix=covMatrix.getCovarianceMatrix();TestUtils.assertEquals(""covariance matrix"",createRealMatrix(rData,7,7),covarianceMatrix,10E-7);}"
"org.apache.commons.math3.stat.correlation.StorelessCovarianceTest.testSwissFertilityByRow",0,"/** * Test R Swiss fertility dataset against R. Data Source: R datasets package*/@Test public void testSwissFertilityByRow(){RealMatrix matrix=createRealMatrix(swissData,47,5);double[]rData=new double[]{156.0424976873265,100.1691489361702,-64.36692876965772,-79.7295097132285,241.5632030527289,100.169148936170251,515.7994172062905,-124.39283071230344,-139.6574005550416,379.9043755781684,-64.3669287696577,-124.3928307123034,63.64662349676226,53.5758556891767,-190.5606105457909,-79.7295097132285,-139.6574005550416,53.57585568917669,92.4560592044403,-61.6988297872340,241.5632030527289,379.9043755781684,-190.56061054579092,-61.6988297872340,1739.2945371877890};StorelessCovariance covMatrix=new StorelessCovariance(5);for (int i=0;i < matrix.getRowDimension();i++){covMatrix.increment(matrix.getRow(i));}RealMatrix covarianceMatrix=covMatrix.getCovarianceMatrix();TestUtils.assertEquals(""covariance matrix"",createRealMatrix(rData,5,5),covarianceMatrix,10E-13);}"
"org.apache.commons.math3.stat.correlation.StorelessCovarianceTest.testSymmetry",0,"/** * Test symmetry of the covariance matrix*/@Test public void testSymmetry(){RealMatrix matrix=createRealMatrix(swissData,47,5);final int dimension=5;StorelessCovariance storelessCov=new StorelessCovariance(dimension);for (int i=0;i < matrix.getRowDimension();i++){storelessCov.increment(matrix.getRow(i));}double[][]covMatrix=storelessCov.getData();for (int i=0;i < dimension;i++){for (int j=i;j < dimension;j++){Assert.assertEquals(covMatrix[i][j],covMatrix[j][i],10e-9);}}}"
"org.apache.commons.math3.stat.correlation.StorelessCovarianceTest.testEquivalence",0,"/** * Test equality of covariance. chk: covariance of two samples separately and adds them together. cov: computes covariance of the combined sample showing both are equal.*/@Test public void testEquivalence(){int num_sets=2;StorelessBivariateCovariance cov=new StorelessBivariateCovariance();StorelessBivariateCovariance chk=new StorelessBivariateCovariance();ISAACRandom rand=new ISAACRandom(10L);for (int s=0;s < num_sets;s++){StorelessBivariateCovariance covs=new StorelessBivariateCovariance();for (int i=0;i < 5;i++){double x=rand.nextDouble();double y=rand.nextDouble();covs.increment(x,y);cov.increment(x,y);}chk.append(covs);}TestUtils.assertEquals(""covariance subset test"",chk.getResult(),cov.getResult(),10E-7);}"
"org.apache.commons.math3.stat.descriptive.summary.SumTest.testSpecialValues",0,"@Test public void testSpecialValues(){Sum sum=new Sum();Assert.assertEquals(0,sum.getResult(),0);sum.increment(1);Assert.assertEquals(1,sum.getResult(),0);sum.increment(Double.POSITIVE_INFINITY);Assert.assertEquals(Double.POSITIVE_INFINITY,sum.getResult(),0);sum.increment(Double.NEGATIVE_INFINITY);Assert.assertTrue(Double.isNaN(sum.getResult()));sum.increment(1);Assert.assertTrue(Double.isNaN(sum.getResult()));}"
"org.apache.commons.math3.stat.descriptive.summary.SumTest.testWeightedSum",0,"@Test public void testWeightedSum(){Sum sum=new Sum();Assert.assertEquals(expectedWeightedValue(),sum.evaluate(testArray,testWeightsArray,0,testArray.length),getTolerance());Assert.assertEquals(expectedValue(),sum.evaluate(testArray,unitWeightsArray,0,testArray.length),getTolerance());}"
"org.apache.commons.math3.stat.descriptive.summary.SumTest.testWeightedConsistency",0,"@Test public void testWeightedConsistency(){}"
"org.apache.commons.math3.stat.descriptive.summary.ProductTest.testSpecialValues",0,"@Test public void testSpecialValues(){Product product=new Product();Assert.assertEquals(1,product.getResult(),0);product.increment(1);Assert.assertEquals(1,product.getResult(),0);product.increment(Double.POSITIVE_INFINITY);Assert.assertEquals(Double.POSITIVE_INFINITY,product.getResult(),0);product.increment(Double.NEGATIVE_INFINITY);Assert.assertEquals(Double.NEGATIVE_INFINITY,product.getResult(),0);product.increment(Double.NaN);Assert.assertTrue(Double.isNaN(product.getResult()));product.increment(1);Assert.assertTrue(Double.isNaN(product.getResult()));}"
"org.apache.commons.math3.stat.descriptive.summary.ProductTest.testWeightedProduct",0,"@Test public void testWeightedProduct(){Product product=new Product();Assert.assertEquals(expectedWeightedValue(),product.evaluate(testArray,testWeightsArray,0,testArray.length),getTolerance());Assert.assertEquals(expectedValue(),product.evaluate(testArray,unitWeightsArray,0,testArray.length),getTolerance());}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testContains",0,"@Test public void testContains(){Line l=new Line(new Vector2D(0,1),new Vector2D(1,2));Assert.assertTrue(l.contains(new Vector2D(0,1)));Assert.assertTrue(l.contains(new Vector2D(1,2)));Assert.assertTrue(l.contains(new Vector2D(7,8)));Assert.assertTrue(!l.contains(new Vector2D(8,7)));}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testAbscissa",0,"@Test public void testAbscissa(){Line l=new Line(new Vector2D(2,1),new Vector2D(-2,-2));Assert.assertEquals(0.0,(l.toSubSpace(new Vector2D(-3,4))).getX(),1.0e-10);Assert.assertEquals(0.0,(l.toSubSpace(new Vector2D(3,-4))).getX(),1.0e-10);Assert.assertEquals(-5.0,(l.toSubSpace(new Vector2D(7,-1))).getX(),1.0e-10);Assert.assertEquals(5.0,(l.toSubSpace(new Vector2D(-1,-7))).getX(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testOffset",0,"@Test public void testOffset(){Line l=new Line(new Vector2D(2,1),new Vector2D(-2,-2));Assert.assertEquals(-5.0,l.getOffset(new Vector2D(5,-3)),1.0e-10);Assert.assertEquals(+5.0,l.getOffset(new Vector2D(-5,2)),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testDistance",0,"@Test public void testDistance(){Line l=new Line(new Vector2D(2,1),new Vector2D(-2,-2));Assert.assertEquals(+5.0,l.distance(new Vector2D(5,-3)),1.0e-10);Assert.assertEquals(+5.0,l.distance(new Vector2D(-5,2)),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testPointAt",0,"@Test public void testPointAt(){Line l=new Line(new Vector2D(2,1),new Vector2D(-2,-2));for (double a=-2.0;a < 2.0;a+=0.2){Vector1D pA=new Vector1D(a);Vector2D point=l.toSpace(pA);Assert.assertEquals(a,(l.toSubSpace(point)).getX(),1.0e-10);Assert.assertEquals(0.0,l.getOffset(point),1.0e-10);for (double o=-2.0;o < 2.0;o+=0.2){point=l.getPointAt(pA,o);Assert.assertEquals(a,(l.toSubSpace(point)).getX(),1.0e-10);Assert.assertEquals(o,l.getOffset(point),1.0e-10);}}}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testOriginOffset",0,"@Test public void testOriginOffset(){Line l1=new Line(new Vector2D(0,1),new Vector2D(1,2));Assert.assertEquals(FastMath.sqrt(0.5),l1.getOriginOffset(),1.0e-10);Line l2=new Line(new Vector2D(1,2),new Vector2D(0,1));Assert.assertEquals(-FastMath.sqrt(0.5),l2.getOriginOffset(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testParallel",0,"@Test public void testParallel(){Line l1=new Line(new Vector2D(0,1),new Vector2D(1,2));Line l2=new Line(new Vector2D(2,2),new Vector2D(3,3));Assert.assertTrue(l1.isParallelTo(l2));Line l3=new Line(new Vector2D(1,0),new Vector2D(0.5,-0.5));Assert.assertTrue(l1.isParallelTo(l3));Line l4=new Line(new Vector2D(1,0),new Vector2D(0.5,-0.51));Assert.assertTrue(!l1.isParallelTo(l4));}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testTransform",0,"@Test public void testTransform()throws MathIllegalArgumentException {Line l1=new Line(new Vector2D(1.0,1.0),new Vector2D(4.0,1.0));Transform<Euclidean2D,Euclidean1D> t1=Line.getTransform(new AffineTransform(0.0,0.5,-1.0,0.0,1.0,1.5));Assert.assertEquals(0.5 * FastMath.PI,((Line)t1.apply(l1)).getAngle(),1.0e-10);Line l2=new Line(new Vector2D(0.0,0.0),new Vector2D(1.0,1.0));Transform<Euclidean2D,Euclidean1D> t2=Line.getTransform(new AffineTransform(0.0,0.5,-1.0,0.0,1.0,1.5));Assert.assertEquals(FastMath.atan2(1.0,-2.0),((Line)t2.apply(l2)).getAngle(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.LineTest.testIntersection",0,"@Test public void testIntersection(){Line l1=new Line(new Vector2D(0,1),new Vector2D(1,2));Line l2=new Line(new Vector2D(-1,2),new Vector2D(2,1));Vector2D p=l1.intersection(l2);Assert.assertEquals(0.5,p.getX(),1.0e-10);Assert.assertEquals(1.5,p.getY(),1.0e-10);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testPreconditions1",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions1(){new Logistic(1,0,1,1,0,-1);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testPreconditions2",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions2(){new Logistic(1,0,1,1,0,0);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testCompareSigmoid",0,"@Test public void testCompareSigmoid(){final UnivariateFunction sig=new Sigmoid();final UnivariateFunction sigL=new Logistic(1,0,1,1,0,1);final double min=-2;final double max=2;final int n=100;final double delta=(max - min)/ n;for (int i=0;i < n;i++){final double x=min + i * delta;Assert.assertEquals(""x="" + x,sig.value(x),sigL.value(x),EPS);}}"
"org.apache.commons.math3.analysis.function.LogisticTest.testSomeValues",0,"@Test public void testSomeValues(){final double k=4;final double m=5;final double b=2;final double q=3;final double a=-1;final double n=2;final UnivariateFunction f=new Logistic(k,m,b,q,a,n);double x;x=m;Assert.assertEquals(""x="" + x,a + (k - a)/ FastMath.sqrt(1 + q),f.value(x),EPS);x=Double.NEGATIVE_INFINITY;Assert.assertEquals(""x="" + x,a,f.value(x),EPS);x=Double.POSITIVE_INFINITY;Assert.assertEquals(""x="" + x,k,f.value(x),EPS);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testCompareDerivativeSigmoid",0,"@Test public void testCompareDerivativeSigmoid(){final double k=3;final double a=2;final Logistic f=new Logistic(k,0,1,1,a,1);final Sigmoid g=new Sigmoid(a,k);final double min=-10;final double max=10;final double n=20;final double delta=(max - min)/ n;for (int i=0;i < n;i++){final DerivativeStructure x=new DerivativeStructure(1,5,0,min + i * delta);for (int order=0;order <= x.getOrder();++order){Assert.assertEquals(""x="" + x.getValue(),g.value(x).getPartialDerivative(order),f.value(x).getPartialDerivative(order),3.0e-15);}}}"
"org.apache.commons.math3.analysis.function.LogisticTest.testParametricUsage1",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage1(){final Logistic.Parametric g=new Logistic.Parametric();g.value(0,null);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testParametricUsage2",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage2(){final Logistic.Parametric g=new Logistic.Parametric();g.value(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.LogisticTest.testParametricUsage3",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage3(){final Logistic.Parametric g=new Logistic.Parametric();g.gradient(0,null);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testParametricUsage4",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage4(){final Logistic.Parametric g=new Logistic.Parametric();g.gradient(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.LogisticTest.testParametricUsage5",0,"@Test(expected=NotStrictlyPositiveException.class)public void testParametricUsage5(){final Logistic.Parametric g=new Logistic.Parametric();g.value(0,new double[]{1,0,1,1,0,0});}"
"org.apache.commons.math3.analysis.function.LogisticTest.testParametricUsage6",0,"@Test(expected=NotStrictlyPositiveException.class)public void testParametricUsage6(){final Logistic.Parametric g=new Logistic.Parametric();g.gradient(0,new double[]{1,0,1,1,0,0});}"
"org.apache.commons.math3.analysis.function.LogisticTest.testGradientComponent0Component4",0,"@Test public void testGradientComponent0Component4(){final double k=3;final double a=2;final Logistic.Parametric f=new Logistic.Parametric();final Sigmoid.Parametric g=new Sigmoid.Parametric();final double x=0.12345;final double[]gf=f.gradient(x,new double[]{k,0,1,1,a,1});final double[]gg=g.gradient(x,new double[]{a,k});Assert.assertEquals(gg[0],gf[4],EPS);Assert.assertEquals(gg[1],gf[0],EPS);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testGradientComponent5",0,"@Test public void testGradientComponent5(){final double m=1.2;final double k=3.4;final double a=2.3;final double q=0.567;final double b=-FastMath.log(q);final double n=3.4;final Logistic.Parametric f=new Logistic.Parametric();final double x=m - 1;final double qExp1=2;final double[]gf=f.gradient(x,new double[]{k,m,b,q,a,n});Assert.assertEquals((k - a)* FastMath.log(qExp1)/ (n * n * FastMath.pow(qExp1,1 / n)),gf[5],EPS);}"
"org.apache.commons.math3.analysis.function.LogisticTest.testGradientComponent1Component2Component3",0,"@Test public void testGradientComponent1Component2Component3(){final double m=1.2;final double k=3.4;final double a=2.3;final double b=0.567;final double q=1 / FastMath.exp(b * m);final double n=3.4;final Logistic.Parametric f=new Logistic.Parametric();final double x=0;final double qExp1=2;final double[]gf=f.gradient(x,new double[]{k,m,b,q,a,n});final double factor=(a - k)/ (n * FastMath.pow(qExp1,1 / n + 1));Assert.assertEquals(factor * b,gf[1],EPS);Assert.assertEquals(factor * m,gf[2],EPS);Assert.assertEquals(factor / q,gf[3],EPS);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-8;double relTolerance=1.0e-8;GraggBulirschStoerIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-8);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-8;double relTolerance=1.0e-8;GraggBulirschStoerIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 35000);Assert.assertTrue(bos.size()< 36000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 5.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest.checklone",0,"@Test public void checklone()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;GraggBulirschStoerIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast)throws MaxCountExceededException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=FastMath.abs(tB - tA)/ 2;Assert.assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);Assert.assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);Assert.assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){Assert.assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public void init(double t0,double[]y0,double t){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.linear.EigenSolverTest.testNonInvertible",0,"/** * test non invertible matrix */@Test public void testNonInvertible(){Random r=new Random(9994100315209l);RealMatrix m=EigenDecompositionTest.createTestMatrix(r,new double[]{1.0,0.0,-1.0,-2.0,-3.0});DecompositionSolver es=new EigenDecomposition(m).getSolver();Assert.assertFalse(es.isNonSingular());try {es.getInverse();Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException ime){}}"
"org.apache.commons.math3.linear.EigenSolverTest.testInvertible",0,"/** * test invertible matrix */@Test public void testInvertible(){Random r=new Random(9994100315209l);RealMatrix m=EigenDecompositionTest.createTestMatrix(r,new double[]{1.0,0.5,-1.0,-2.0,-3.0});DecompositionSolver es=new EigenDecomposition(m).getSolver();Assert.assertTrue(es.isNonSingular());RealMatrix inverse=es.getInverse();RealMatrix error=m.multiply(inverse).subtract(MatrixUtils.createRealIdentityMatrix(m.getRowDimension()));Assert.assertEquals(0,error.getNorm(),4.0e-15);}"
"org.apache.commons.math3.linear.EigenSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){final double[]refValues=new double[]{2.003,2.002,2.001,1.001,1.000,0.001};final RealMatrix matrix=EigenDecompositionTest.createTestMatrix(new Random(35992629946426l),refValues);DecompositionSolver es=new EigenDecomposition(matrix).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {es.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {es.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {es.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.EigenSolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){RealMatrix m=MatrixUtils.createRealMatrix(new double[][]{{91,5,29,32,40,14},{5,34,-1,0,2,-1},{29,-1,12,9,21,8},{32,0,9,14,9,0},{40,2,21,9,51,19},{14,-1,8,0,19,14}});DecompositionSolver es=new EigenDecomposition(m).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{1561,269,188},{69,-21,70},{739,108,63},{324,86,59},{1624,194,107},{796,69,36}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{1,2,1},{2,-1,2},{4,2,3},{8,-1,0},{16,2,0},{32,-1,0}});RealMatrix solution=es.solve(b);Assert.assertEquals(0,solution.subtract(xRef).getNorm(),2.5e-12);for (int i=0;i < b.getColumnDimension();++i){Assert.assertEquals(0,es.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),2.0e-11);}for (int i=0;i < b.getColumnDimension();++i){ArrayRealVectorTest.RealVectorTestImpl v=new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));Assert.assertEquals(0,es.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),2.0e-11);}}"
"org.apache.commons.math3.analysis.function.GaussianTest.testPreconditions",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions(){new Gaussian(1,2,-1);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testSomeValues",0,"@Test public void testSomeValues(){final UnivariateFunction f=new Gaussian();Assert.assertEquals(1 / FastMath.sqrt(2 * Math.PI),f.value(0),EPS);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testLargeArguments",0,"@Test public void testLargeArguments(){final UnivariateFunction f=new Gaussian();Assert.assertEquals(0,f.value(Double.NEGATIVE_INFINITY),0);Assert.assertEquals(0,f.value(-Double.MAX_VALUE),0);Assert.assertEquals(0,f.value(-1e2),0);Assert.assertEquals(0,f.value(1e2),0);Assert.assertEquals(0,f.value(Double.MAX_VALUE),0);Assert.assertEquals(0,f.value(Double.POSITIVE_INFINITY),0);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testDerivatives",0,"@Test public void testDerivatives(){final UnivariateDifferentiableFunction gaussian=new Gaussian(2.0,0.9,3.0);final DerivativeStructure dsX=new DerivativeStructure(1,4,0,1.1);final DerivativeStructure dsY=gaussian.value(dsX);Assert.assertEquals(1.9955604901712128349,dsY.getValue(),EPS);Assert.assertEquals(-0.044345788670471396332,dsY.getPartialDerivative(1),EPS);Assert.assertEquals(-0.22074348138190206174,dsY.getPartialDerivative(2),EPS);Assert.assertEquals(0.014760030401924800557,dsY.getPartialDerivative(3),EPS);Assert.assertEquals(0.073253159785035691678,dsY.getPartialDerivative(4),EPS);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testDerivativeLargeArguments",0,"@Test public void testDerivativeLargeArguments(){final Gaussian f=new Gaussian(0,1e-50);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,Double.NEGATIVE_INFINITY)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,-Double.MAX_VALUE)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,-1e50)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,-1e2)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,1e2)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,1e50)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,Double.MAX_VALUE)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,Double.POSITIVE_INFINITY)).getPartialDerivative(1),0);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testDerivativesNaN",0,"@Test public void testDerivativesNaN(){final Gaussian f=new Gaussian(0,1e-50);final DerivativeStructure fx=f.value(new DerivativeStructure(1,5,0,Double.NaN));for (int i=0;i <= fx.getOrder();++i){Assert.assertTrue(Double.isNaN(fx.getPartialDerivative(i)));}}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricUsage1",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage1(){final Gaussian.Parametric g=new Gaussian.Parametric();g.value(0,null);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricUsage2",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage2(){final Gaussian.Parametric g=new Gaussian.Parametric();g.value(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricUsage3",0,"@Test(expected=NotStrictlyPositiveException.class)public void testParametricUsage3(){final Gaussian.Parametric g=new Gaussian.Parametric();g.value(0,new double[]{0,1,0});}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricUsage4",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage4(){final Gaussian.Parametric g=new Gaussian.Parametric();g.gradient(0,null);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricUsage5",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage5(){final Gaussian.Parametric g=new Gaussian.Parametric();g.gradient(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricUsage6",0,"@Test(expected=NotStrictlyPositiveException.class)public void testParametricUsage6(){final Gaussian.Parametric g=new Gaussian.Parametric();g.gradient(0,new double[]{0,1,0});}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricValue",0,"@Test public void testParametricValue(){final double norm=2;final double mean=3;final double sigma=4;final Gaussian f=new Gaussian(norm,mean,sigma);final Gaussian.Parametric g=new Gaussian.Parametric();Assert.assertEquals(f.value(-1),g.value(-1,new double[]{norm,mean,sigma}),0);Assert.assertEquals(f.value(0),g.value(0,new double[]{norm,mean,sigma}),0);Assert.assertEquals(f.value(2),g.value(2,new double[]{norm,mean,sigma}),0);}"
"org.apache.commons.math3.analysis.function.GaussianTest.testParametricGradient",0,"@Test public void testParametricGradient(){final double norm=2;final double mean=3;final double sigma=4;final Gaussian.Parametric f=new Gaussian.Parametric();final double x=1;final double[]grad=f.gradient(1,new double[]{norm,mean,sigma});final double diff=x - mean;final double n=FastMath.exp(-diff * diff / (2 * sigma * sigma));Assert.assertEquals(n,grad[0],EPS);final double m=norm * n * diff / (sigma * sigma);Assert.assertEquals(m,grad[1],EPS);final double s=m * diff / sigma;Assert.assertEquals(s,grad[2],EPS);}"
"org.apache.commons.math3.util.BigRealFieldTest.testZero",0,"@Test public void testZero(){Assert.assertEquals(BigReal.ZERO,BigRealField.getInstance().getZero());}"
"org.apache.commons.math3.util.BigRealFieldTest.testOne",0,"@Test public void testOne(){Assert.assertEquals(BigReal.ONE,BigRealField.getInstance().getOne());}"
"org.apache.commons.math3.util.BigRealFieldTest.testSerial",0,"@Test public void testSerial(){BigRealField field=BigRealField.getInstance();Assert.assertTrue(field == TestUtils.serializeAndRecover(field));}"
"org.apache.commons.math3.stat.descriptive.moment.GeometricMeanTest.testSpecialValues",0,"@Test public void testSpecialValues(){GeometricMean mean=new GeometricMean();Assert.assertTrue(Double.isNaN(mean.getResult()));mean.increment(1d);Assert.assertFalse(Double.isNaN(mean.getResult()));mean.increment(0d);Assert.assertEquals(0d,mean.getResult(),0);mean.increment(Double.POSITIVE_INFINITY);Assert.assertTrue(Double.isNaN(mean.getResult()));mean.clear();Assert.assertTrue(Double.isNaN(mean.getResult()));mean.increment(Double.POSITIVE_INFINITY);Assert.assertEquals(Double.POSITIVE_INFINITY,mean.getResult(),0);mean.increment(-2d);Assert.assertTrue(Double.isNaN(mean.getResult()));}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testGetLowerBound",0,"/** * Test lower bound getter. */@Test public void testGetLowerBound(){TriangularDistribution distribution=makeDistribution();Assert.assertEquals(-3.0,distribution.getSupportLowerBound(),0);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testGetUpperBound",0,"/** * Test upper bound getter. */@Test public void testGetUpperBound(){TriangularDistribution distribution=makeDistribution();Assert.assertEquals(12.0,distribution.getSupportUpperBound(),0);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions1",0,"/** * Test pre-condition for equal lower/upper limit. */@Test(expected=NumberIsTooLargeException.class)public void testPreconditions1(){new TriangularDistribution(0,0,0);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions2",0,"/** * Test pre-condition for lower limit larger than upper limit. */@Test(expected=NumberIsTooLargeException.class)public void testPreconditions2(){new TriangularDistribution(1,1,0);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions3",0,"/** * Test pre-condition for mode larger than upper limit. */@Test(expected=NumberIsTooLargeException.class)public void testPreconditions3(){new TriangularDistribution(0,2,1);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testPreconditions4",0,"/** * Test pre-condition for mode smaller than lower limit. */@Test(expected=NumberIsTooSmallException.class)public void testPreconditions4(){new TriangularDistribution(2,1,3);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testMeanVariance",0,"/** * Test mean/variance. */@Test public void testMeanVariance(){TriangularDistribution dist;dist=new TriangularDistribution(0,0.5,1.0);Assert.assertEquals(dist.getNumericalMean(),0.5,0);Assert.assertEquals(dist.getNumericalVariance(),1 / 24.0,0);dist=new TriangularDistribution(0,1,1);Assert.assertEquals(dist.getNumericalMean(),2 / 3.0,0);Assert.assertEquals(dist.getNumericalVariance(),1 / 18.0,0);dist=new TriangularDistribution(-3,2,12);Assert.assertEquals(dist.getNumericalMean(),3 + (2 / 3.0),0);Assert.assertEquals(dist.getNumericalVariance(),175 / 18.0,0);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.TriangularDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testConstraintsUnsupported",0,"@Test(expected=MathUnsupportedOperationException.class)public void testConstraintsUnsupported(){createOptimizer().optimize(new MaxEval(100),new Target(new double[]{2}),new Weight(new double[]{1}),new InitialGuess(new double[]{1,2}),new SimpleBounds(new double[]{-10,0},new double[]{20,30}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testNonInvertible",0,"@Override @Test(expected=SingularMatrixException.class)public void testNonInvertible(){LinearProblem problem=new LinearProblem(new double[][]{{1,2,-3},{2,1,3},{-3,0,-9}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));Assert.assertTrue(FastMath.sqrt(optimizer.getTargetSize())* optimizer.getRMS()> 0.6);optimizer.computeCovariances(optimum.getPoint(),1.5e-14);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testControlParameters",0,"@Test public void testControlParameters(){CircleVectorial circle=new CircleVectorial();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);checkEstimate(circle.getModelFunction(),circle.getModelFunctionJacobian(),0.1,10,1.0e-14,1.0e-16,1.0e-10,false);checkEstimate(circle.getModelFunction(),circle.getModelFunctionJacobian(),0.1,10,1.0e-15,1.0e-17,1.0e-10,true);checkEstimate(circle.getModelFunction(),circle.getModelFunctionJacobian(),0.1,5,1.0e-15,1.0e-16,1.0e-10,true);circle.addPoint(300,-300);checkEstimate(circle.getModelFunction(),circle.getModelFunctionJacobian(),0.1,20,1.0e-18,1.0e-16,1.0e-10,true);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testBevington",0,"/** * Non-linear test case: fitting of decay curve (from Chapter 8 of Bevington's textbook,""Data reduction and analysis for the physical sciences""). XXX The expected (""reference"")values may not be accurate and the tolerance too relaxed for this test to be currently really useful (the issue is under investigation).*/@Test public void testBevington(){final double[][]dataPoints={{15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,255,270,285,300,315,330,345,360,375,390,405,420,435,450,465,480,495,510,525,540,555,570,585,600,615,630,645,660,675,690,705,720,735,750,765,780,795,810,825,840,855,870,885},{775,479,380,302,185,157,137,119,110,89,74,61,66,68,48,54,51,46,55,29,28,37,49,26,35,29,31,24,25,35,24,30,26,28,21,18,20,27,17,17,14,17,24,11,22,17,12,10,13,16,9,9,14,21,17,13,12,18,10}};final BevingtonProblem problem=new BevingtonProblem();final int len=dataPoints[0].length;final double[]weights=new double[len];for (int i=0;i < len;i++){problem.addPoint(dataPoints[0][i],dataPoints[1][i]);weights[i]=1 / dataPoints[1][i];}final LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();final PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),new Target(dataPoints[1]),new Weight(weights),new InitialGuess(new double[]{10,900,80,27,225}));final double[]solution=optimum.getPoint();final double[]expectedSolution={10.4,958.3,131.4,33.9,205.0};final double[][]covarMatrix=optimizer.computeCovariances(solution,1e-14);final double[][]expectedCovarMatrix={{3.38,-3.69,27.98,-2.34,-49.24},{-3.69,2492.26,81.89,-69.21,-8.9},{27.98,81.89,468.99,-44.22,-615.44},{-2.34,-69.21,-44.22,6.39,53.80},{-49.24,-8.9,-615.44,53.8,929.45}};final int numParams=expectedSolution.length;for (int i=0;i < numParams;i++){final double error=FastMath.sqrt(expectedCovarMatrix[i][i]);Assert.assertEquals(""Parameter "" + i,expectedSolution[i],solution[i],error);}for (int i=0;i < numParams;i++){for (int j=0;j < numParams;j++){Assert.assertEquals(""Covariance matrix ["" + i + ""][""+ j+ ""]"",expectedCovarMatrix[i][j],covarMatrix[i][j],FastMath.abs(0.1 * expectedCovarMatrix[i][j]));}}}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testCircleFitting2",0,"@Test public void testCircleFitting2(){final double xCenter=123.456;final double yCenter=654.321;final double xSigma=10;final double ySigma=15;final double radius=111.111;final long seed=59421061L;final RandomCirclePointGenerator factory=new RandomCirclePointGenerator(xCenter,yCenter,radius,xSigma,ySigma,seed);final CircleProblem circle=new CircleProblem(xSigma,ySigma);final int numPoints=10;for(Vector2D p : factory.generate(numPoints)){circle.addPoint(p.getX(),p.getY());}final double[]init={90,659,115};final LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();final PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(circle.target()),new Weight(circle.weight()),new InitialGuess(init));final double[]paramFound=optimum.getPoint();final double[]asymptoticStandardErrorFound=optimizer.computeSigma(paramFound,1e-14);Assert.assertEquals(xCenter,paramFound[0],asymptoticStandardErrorFound[0]);Assert.assertEquals(yCenter,paramFound[1],asymptoticStandardErrorFound[1]);Assert.assertEquals(radius,paramFound[2],asymptoticStandardErrorFound[2]);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testGetIterations",0,"@Test public void testGetIterations(){AbstractLeastSquaresOptimizer optim=createOptimizer();optim.optimize(new MaxEval(100),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{3}),new ModelFunction(new MultivariateVectorFunction(){public double[]value(double[]point){return new double[]{FastMath.pow(point[0],4)};}}),new ModelFunctionJacobian(new MultivariateMatrixFunction(){public double[][]value(double[]point){return new double[][]{{0.25 * FastMath.pow(point[0],3)}};}}));Assert.assertTrue(optim.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1.5,optimum.getPoint()[0],1e-10);Assert.assertEquals(3.0,optimum.getValue()[0],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testQRColumnsPermutation",0,"@Test public void testQRColumnsPermutation(){LinearProblem problem=new LinearProblem(new double[][]{{1,-1},{0,2},{1,-2}},new double[]{4,6,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(7,optimum.getPoint()[0],1e-10);Assert.assertEquals(3,optimum.getPoint()[1],1e-10);Assert.assertEquals(4,optimum.getValue()[0],1e-10);Assert.assertEquals(6,optimum.getValue()[1],1e-10);Assert.assertEquals(1,optimum.getValue()[2],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testNoDependency",0,"@Test public void testNoDependency(){LinearProblem problem=new LinearProblem(new double[][]{{2,0,0,0,0,0},{0,2,0,0,0,0},{0,0,2,0,0,0},{0,0,0,2,0,0},{0,0,0,0,2,0},{0,0,0,0,0,2}},new double[]{0,1.1,2.2,3.3,4.4,5.5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);for (int i=0;i < problem.target.length;++i){Assert.assertEquals(0.55 * i,optimum.getPoint()[i],1e-10);}}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testOneSet",0,"@Test public void testOneSet(){LinearProblem problem=new LinearProblem(new double[][]{{1,0,0},{-1,1,0},{0,-1,1}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum.getPoint()[0],1e-10);Assert.assertEquals(2,optimum.getPoint()[1],1e-10);Assert.assertEquals(3,optimum.getPoint()[2],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testTwoSets",0,"@Test public void testTwoSets(){double epsilon=1e-7;LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(3,optimum.getPoint()[0],1e-10);Assert.assertEquals(4,optimum.getPoint()[1],1e-10);Assert.assertEquals(-1,optimum.getPoint()[2],1e-10);Assert.assertEquals(-2,optimum.getPoint()[3],1e-10);Assert.assertEquals(1 + epsilon,optimum.getPoint()[4],1e-10);Assert.assertEquals(1 - epsilon,optimum.getPoint()[5],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testIllConditioned",0,"@Test public void testIllConditioned(){LinearProblem problem1=new LinearProblem(new double[][]{{10,7,8,7},{7,5,6,5},{8,6,10,9},{7,5,9,10}},new double[]{32,23,33,31});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum1=optimizer.optimize(new MaxEval(100),problem1.getModelFunction(),problem1.getModelFunctionJacobian(),problem1.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum1.getPoint()[0],1e-10);Assert.assertEquals(1,optimum1.getPoint()[1],1e-10);Assert.assertEquals(1,optimum1.getPoint()[2],1e-10);Assert.assertEquals(1,optimum1.getPoint()[3],1e-10);LinearProblem problem2=new LinearProblem(new double[][]{{10.00,7.00,8.10,7.20},{7.08,5.04,6.00,5.00},{8.00,5.98,9.89,9.00},{6.99,4.99,9.00,9.98}},new double[]{32,23,33,31});PointVectorValuePair optimum2=optimizer.optimize(new MaxEval(100),problem2.getModelFunction(),problem2.getModelFunctionJacobian(),problem2.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-81,optimum2.getPoint()[0],1e-8);Assert.assertEquals(137,optimum2.getPoint()[1],1e-8);Assert.assertEquals(-34,optimum2.getPoint()[2],1e-8);Assert.assertEquals(22,optimum2.getPoint()[3],1e-8);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testMoreEstimatedParametersSimple",0,"@Test public void testMoreEstimatedParametersSimple(){LinearProblem problem=new LinearProblem(new double[][]{{3,2,0,0},{0,1,-1,1},{2,0,1,0}},new double[]{7,3,5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{7,6,5,4}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testMoreEstimatedParametersUnsorted",0,"@Test public void testMoreEstimatedParametersUnsorted(){LinearProblem problem=new LinearProblem(new double[][]{{1,1,0,0,0,0},{0,0,1,1,1,0},{0,0,0,0,1,-1},{0,0,-1,1,0,1},{0,0,0,-1,1,0}},new double[]{3,12,-1,7,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{2,2,2,2,2,2}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(3,optimum.getPointRef()[2],1e-10);Assert.assertEquals(4,optimum.getPointRef()[3],1e-10);Assert.assertEquals(5,optimum.getPointRef()[4],1e-10);Assert.assertEquals(6,optimum.getPointRef()[5],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testRedundantEquations",0,"@Test public void testRedundantEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(2,optimum.getPointRef()[0],1e-10);Assert.assertEquals(1,optimum.getPointRef()[1],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testInconsistentEquations",0,"@Test public void testInconsistentEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,4});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertTrue(optimizer.getRMS()> 0.1);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testInconsistentSizes1",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes1(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testInconsistentSizes2",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes2(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleVectorial circle=new CircleVectorial();circle.addPoint(30,68);circle.addPoint(50,-6);circle.addPoint(110,-20);circle.addPoint(35,15);circle.addPoint(45,97);AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(new double[]{0,0,0,0,0}),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{98.680,47.345}));Assert.assertTrue(optimizer.getEvaluations()< 10);double rms=optimizer.getRMS();Assert.assertEquals(1.768262623567235,FastMath.sqrt(circle.getN())* rms,1e-10);Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertEquals(69.96016176931406,circle.getRadius(center),1e-6);Assert.assertEquals(96.07590211815305,center.getX(),1e-6);Assert.assertEquals(48.13516790438953,center.getY(),1e-6);double[][]cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(1.839,cov[0][0],0.001);Assert.assertEquals(0.731,cov[0][1],0.001);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.786,cov[1][1],0.001);double r=circle.getRadius(center);for (double d=0;d < 2 * FastMath.PI;d+=0.01){circle.addPoint(center.getX()+ r * FastMath.cos(d),center.getY()+ r * FastMath.sin(d));}double[]target=new double[circle.getN()];Arrays.fill(target,0);double[]weights=new double[circle.getN()];Arrays.fill(weights,2);optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{98.680,47.345}));cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(0.0016,cov[0][0],0.001);Assert.assertEquals(3.2e-7,cov[0][1],1e-9);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.0016,cov[1][1],0.001);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testCircleFittingBadInit",0,"@Test public void testCircleFittingBadInit(){CircleVectorial circle=new CircleVectorial();double[][]points=circlePoints;double[]target=new double[points.length];Arrays.fill(target,0);double[]weights=new double[points.length];Arrays.fill(weights,2);for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{-12,-12}));Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertTrue(optimizer.getEvaluations()< 25);Assert.assertEquals(0.043,optimizer.getRMS(),1e-3);Assert.assertEquals(0.292235,circle.getRadius(center),1e-6);Assert.assertEquals(-0.151738,center.getX(),1e-6);Assert.assertEquals(0.2075001,center.getY(),1e-6);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testCircleFittingGoodInit",0,"@Test public void testCircleFittingGoodInit(){CircleVectorial circle=new CircleVectorial();double[][]points=circlePoints;double[]target=new double[points.length];Arrays.fill(target,0);double[]weights=new double[points.length];Arrays.fill(weights,2);for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{0,0}));Assert.assertEquals(-0.1517383071957963,optimum.getPointRef()[0],1e-6);Assert.assertEquals(0.2074999736353867,optimum.getPointRef()[1],1e-6);Assert.assertEquals(0.04268731682389561,optimizer.getRMS(),1e-8);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testKirby2",0,"@Test public void testKirby2()throws IOException {doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(),1E-7,1E-7);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest.testHahn1",0,"@Test public void testHahn1()throws IOException {doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(),1E-7,1E-4);}"
"org.apache.commons.math3.ode.ContinuousOutputModelTest.testBoundaries",0,"@Test public void testBoundaries()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ContinuousOutputModel cm=(ContinuousOutputModel)integ.getStepHandlers().iterator().next();cm.setInterpolatedTime(2.0 * pb.getInitialTime()- pb.getFinalTime());cm.setInterpolatedTime(2.0 * pb.getFinalTime()- pb.getInitialTime());cm.setInterpolatedTime(0.5 * (pb.getFinalTime()+ pb.getInitialTime()));}"
"org.apache.commons.math3.ode.ContinuousOutputModelTest.testRandomAccess",0,"@Test public void testRandomAccess()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {ContinuousOutputModel cm=new ContinuousOutputModel();integ.addStepHandler(cm);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 1.0e-9);}"
"org.apache.commons.math3.ode.ContinuousOutputModelTest.testModelsMerging",0,"@Test public void testModelsMerging()throws MaxCountExceededException,MathIllegalArgumentException {FirstOrderDifferentialEquations problem=new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=-y[1];dot[1]=y[0];}public int getDimension(){return 2;}};ContinuousOutputModel cm1=new ContinuousOutputModel();FirstOrderIntegrator integ1=new DormandPrince853Integrator(0,1.0,1.0e-8,1.0e-8);integ1.addStepHandler(cm1);integ1.integrate(problem,FastMath.PI,new double[]{-1.0,0.0},0,new double[2]);ContinuousOutputModel cm2=new ContinuousOutputModel();FirstOrderIntegrator integ2=new DormandPrince853Integrator(0,0.1,1.0e-12,1.0e-12);integ2.addStepHandler(cm2);integ2.integrate(problem,2.0 * FastMath.PI,new double[]{1.0,0.0},FastMath.PI,new double[2]);ContinuousOutputModel cm=new ContinuousOutputModel();cm.append(cm2);cm.append(new ContinuousOutputModel());cm.append(cm1);Assert.assertEquals(2.0 * FastMath.PI,cm.getInitialTime(),1.0e-12);Assert.assertEquals(0,cm.getFinalTime(),1.0e-12);Assert.assertEquals(cm.getFinalTime(),cm.getInterpolatedTime(),1.0e-12);for (double t=0;t < 2.0 * FastMath.PI;t+=0.1){cm.setInterpolatedTime(t);double[]y=cm.getInterpolatedState();Assert.assertEquals(FastMath.cos(t),y[0],1.0e-7);Assert.assertEquals(FastMath.sin(t),y[1],1.0e-7);}}"
"org.apache.commons.math3.ode.ContinuousOutputModelTest.testErrorConditions",0,"@Test public void testErrorConditions()throws MaxCountExceededException,MathIllegalArgumentException {ContinuousOutputModel cm=new ContinuousOutputModel();cm.handleStep(buildInterpolator(0,new double[]{0.0,1.0,-2.0},1),true);Assert.assertTrue(checkAppendError(cm,1.0,new double[]{0.0,1.0},2.0));Assert.assertTrue(checkAppendError(cm,10.0,new double[]{0.0,1.0,-2.0},20.0));Assert.assertTrue(checkAppendError(cm,1.0,new double[]{0.0,1.0,-2.0},0.0));Assert.assertFalse(checkAppendError(cm,1.0,new double[]{0.0,1.0,-2.0},2.0));}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testConstants",0,"/** * tests the value of a constant polynomial. <p>value of this is 2.5 everywhere.</p>*/@Test public void testConstants(){double[]c={2.5};PolynomialFunction f=new PolynomialFunction(c);Assert.assertEquals(f.value(0),c[0],tolerance);Assert.assertEquals(f.value(-1),c[0],tolerance);Assert.assertEquals(f.value(-123.5),c[0],tolerance);Assert.assertEquals(f.value(3),c[0],tolerance);Assert.assertEquals(f.value(456.89),c[0],tolerance);Assert.assertEquals(f.degree(),0);Assert.assertEquals(f.derivative().value(0),0,tolerance);Assert.assertEquals(f.polynomialDerivative().derivative().value(0),0,tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testLinear",0,"/** * tests the value of a linear polynomial. <p>This will test the function f(x)= 3*x - 1.5</p> <p>This will have the values <tt>f(0)= -1.5,f(-1)= -4.5,f(-2.5)= -9,f(0.5)= 0,f(1.5)= 3</tt> and <tt>f(3)= 7.5</tt> </p>*/@Test public void testLinear(){double[]c={-1.5,3};PolynomialFunction f=new PolynomialFunction(c);Assert.assertEquals(f.value(0),c[0],tolerance);Assert.assertEquals(-4.5,f.value(-1),tolerance);Assert.assertEquals(-9,f.value(-2.5),tolerance);Assert.assertEquals(0,f.value(0.5),tolerance);Assert.assertEquals(3,f.value(1.5),tolerance);Assert.assertEquals(7.5,f.value(3),tolerance);Assert.assertEquals(f.degree(),1);Assert.assertEquals(f.polynomialDerivative().derivative().value(0),0,tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testQuadratic",0,"/** * Tests a second order polynomial. <p> This will test the function f(x)= 2x^2 - 3x -2 = (2x+1)(x-2)</p>*/@Test public void testQuadratic(){double[]c={-2,-3,2};PolynomialFunction f=new PolynomialFunction(c);Assert.assertEquals(f.value(0),c[0],tolerance);Assert.assertEquals(0,f.value(-0.5),tolerance);Assert.assertEquals(0,f.value(2),tolerance);Assert.assertEquals(-2,f.value(1.5),tolerance);Assert.assertEquals(7,f.value(-1.5),tolerance);Assert.assertEquals(265.5312,f.value(12.34),tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testQuintic",0,"/** * This will test the quintic function f(x)= x^2(x-5)(x+3)(x-1)= x^5 - 3x^4 -13x^3 + 15x^2</p>*/@Test public void testQuintic(){double[]c={0,0,15,-13,-3,1};PolynomialFunction f=new PolynomialFunction(c);Assert.assertEquals(f.value(0),c[0],tolerance);Assert.assertEquals(0,f.value(5),tolerance);Assert.assertEquals(0,f.value(1),tolerance);Assert.assertEquals(0,f.value(-3),tolerance);Assert.assertEquals(54.84375,f.value(-1.5),tolerance);Assert.assertEquals(-8.06637,f.value(1.3),tolerance);Assert.assertEquals(f.degree(),5);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testfirstDerivativeComparison",0,"/** * tests the firstDerivative function by comparison <p>This will test the functions <tt>f(x)= x^3 - 2x^2 + 6x + 3,g(x)= 3x^2 - 4x + 6</tt> and <tt>h(x)= 6x - 4</tt>*/@Test public void testfirstDerivativeComparison(){double[]f_coeff={3,6,-2,1};double[]g_coeff={6,-4,3};double[]h_coeff={-4,6};PolynomialFunction f=new PolynomialFunction(f_coeff);PolynomialFunction g=new PolynomialFunction(g_coeff);PolynomialFunction h=new PolynomialFunction(h_coeff);Assert.assertEquals(f.derivative().value(0),g.value(0),tolerance);Assert.assertEquals(f.derivative().value(1),g.value(1),tolerance);Assert.assertEquals(f.derivative().value(100),g.value(100),tolerance);Assert.assertEquals(f.derivative().value(4.1),g.value(4.1),tolerance);Assert.assertEquals(f.derivative().value(-3.25),g.value(-3.25),tolerance);Assert.assertEquals(g.derivative().value(FastMath.PI),h.value(FastMath.PI),tolerance);Assert.assertEquals(g.derivative().value(FastMath.E),h.value(FastMath.E),tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testString",0,"@Test public void testString(){PolynomialFunction p=new PolynomialFunction(new double[]{-5,3,1});checkPolynomial(p,""-5 + 3 x + x^2"");checkPolynomial(new PolynomialFunction(new double[]{0,-2,3}),""-2 x + 3 x^2"");checkPolynomial(new PolynomialFunction(new double[]{1,-2,3}),""1 - 2 x + 3 x^2"");checkPolynomial(new PolynomialFunction(new double[]{0,2,3}),""2 x + 3 x^2"");checkPolynomial(new PolynomialFunction(new double[]{1,2,3}),""1 + 2 x + 3 x^2"");checkPolynomial(new PolynomialFunction(new double[]{1,0,3}),""1 + 3 x^2"");checkPolynomial(new PolynomialFunction(new double[]{0}),""0"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testAddition",0,"@Test public void testAddition(){PolynomialFunction p1=new PolynomialFunction(new double[]{-2,1});PolynomialFunction p2=new PolynomialFunction(new double[]{2,-1,0});checkNullPolynomial(p1.add(p2));p2=p1.add(p1);checkPolynomial(p2,""-4 + 2 x"");p1=new PolynomialFunction(new double[]{1,-4,2});p2=new PolynomialFunction(new double[]{-1,3,-2});p1=p1.add(p2);Assert.assertEquals(1,p1.degree());checkPolynomial(p1,""-x"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testSubtraction",0,"@Test public void testSubtraction(){PolynomialFunction p1=new PolynomialFunction(new double[]{-2,1});checkNullPolynomial(p1.subtract(p1));PolynomialFunction p2=new PolynomialFunction(new double[]{-2,6});p2=p2.subtract(p1);checkPolynomial(p2,""5 x"");p1=new PolynomialFunction(new double[]{1,-4,2});p2=new PolynomialFunction(new double[]{-1,3,2});p1=p1.subtract(p2);Assert.assertEquals(1,p1.degree());checkPolynomial(p1,""2 - 7 x"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testMultiplication",0,"@Test public void testMultiplication(){PolynomialFunction p1=new PolynomialFunction(new double[]{-3,2});PolynomialFunction p2=new PolynomialFunction(new double[]{3,2,1});checkPolynomial(p1.multiply(p2),""-9 + x^2 + 2 x^3"");p1=new PolynomialFunction(new double[]{0,1});p2=p1;for (int i=2;i < 10;++i){p2=p2.multiply(p1);checkPolynomial(p2,""x^"" + i);}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testSerial",0,"@Test public void testSerial(){PolynomialFunction p2=new PolynomialFunction(new double[]{3,2,1});Assert.assertEquals(p2,TestUtils.serializeAndRecover(p2));}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionTest.testMath341",0,"/** * tests the firstDerivative function by comparison <p>This will test the functions <tt>f(x)= x^3 - 2x^2 + 6x + 3,g(x)= 3x^2 - 4x + 6</tt> and <tt>h(x)= 6x - 4</tt>*/@Test public void testMath341(){double[]f_coeff={3,6,-2,1};double[]g_coeff={6,-4,3};double[]h_coeff={-4,6};PolynomialFunction f=new PolynomialFunction(f_coeff);PolynomialFunction g=new PolynomialFunction(g_coeff);PolynomialFunction h=new PolynomialFunction(h_coeff);Assert.assertEquals(f.derivative().value(0),g.value(0),tolerance);Assert.assertEquals(f.derivative().value(1),g.value(1),tolerance);Assert.assertEquals(f.derivative().value(100),g.value(100),tolerance);Assert.assertEquals(f.derivative().value(4.1),g.value(4.1),tolerance);Assert.assertEquals(f.derivative().value(-3.25),g.value(-3.25),tolerance);Assert.assertEquals(g.derivative().value(FastMath.PI),h.value(FastMath.PI),tolerance);Assert.assertEquals(g.derivative().value(FastMath.E),h.value(FastMath.E),tolerance);}"
"org.apache.commons.math3.genetics.CycleCrossoverTest.testCrossoverExample",0,"@Test public void testCrossoverExample(){final Integer[]p1=new Integer[]{8,4,7,3,6,2,5,1,9,0};final Integer[]p2=new Integer[]{0,1,2,3,4,5,6,7,8,9};final DummyListChromosome p1c=new DummyListChromosome(p1);final DummyListChromosome p2c=new DummyListChromosome(p2);final CrossoverPolicy cp=new CycleCrossover<Integer>();final ChromosomePair pair=cp.crossover(p1c,p2c);final Integer[]c1=((DummyListChromosome)pair.getFirst()).getRepresentation().toArray(new Integer[p1.length]);final Integer[]c2=((DummyListChromosome)pair.getSecond()).getRepresentation().toArray(new Integer[p2.length]);final Integer[]c1e=new Integer[]{8,1,2,3,4,5,6,7,9,0};final Integer[]c2e=new Integer[]{0,4,7,3,6,2,5,1,8,9};Assert.assertArrayEquals(c1e,c1);Assert.assertArrayEquals(c2e,c2);}"
"org.apache.commons.math3.genetics.CycleCrossoverTest.testCrossoverExample2",0,"@Test public void testCrossoverExample2(){final Integer[]p1=new Integer[]{1,2,3,4,5,6,7,8,9};final Integer[]p2=new Integer[]{9,3,7,8,2,6,5,1,4};final DummyListChromosome p1c=new DummyListChromosome(p1);final DummyListChromosome p2c=new DummyListChromosome(p2);final CrossoverPolicy cp=new CycleCrossover<Integer>();final ChromosomePair pair=cp.crossover(p1c,p2c);final Integer[]c1=((DummyListChromosome)pair.getFirst()).getRepresentation().toArray(new Integer[p1.length]);final Integer[]c2=((DummyListChromosome)pair.getSecond()).getRepresentation().toArray(new Integer[p2.length]);final Integer[]c1e=new Integer[]{1,3,7,4,2,6,5,8,9};final Integer[]c2e=new Integer[]{9,2,3,8,5,6,7,1,4};Assert.assertArrayEquals(c1e,c1);Assert.assertArrayEquals(c2e,c2);}"
"org.apache.commons.math3.genetics.CycleCrossoverTest.testCrossover",0,"@Test public void testCrossover(){final Integer[]p1=new Integer[]{1,2,3,4,5,6,7,8,9,10};final Integer[]p2=new Integer[]{10,9,8,7,6,5,4,3,2,1};final DummyListChromosome p1c=new DummyListChromosome(p1);final DummyListChromosome p2c=new DummyListChromosome(p2);final CrossoverPolicy cp=new CycleCrossover<Integer>(true);for (int i=0;i < 20;i++){final ChromosomePair pair=cp.crossover(p1c,p2c);final Integer[]c1=((DummyListChromosome)pair.getFirst()).getRepresentation().toArray(new Integer[p1.length]);final Integer[]c2=((DummyListChromosome)pair.getSecond()).getRepresentation().toArray(new Integer[p2.length]);int index=0;for(final Integer j : c1){if (!p1[index].equals(j)){Assert.assertEquals(j,p2[index]);}else {Assert.assertEquals(j,p1[index]);}index++;}index=0;for(final Integer k : c2){if (p2[index]!= k){Assert.assertEquals(k,p1[index]);}else {Assert.assertEquals(k,p2[index]);}index++;}}}"
"org.apache.commons.math3.genetics.CycleCrossoverTest.testCrossoverDimensionMismatchException",0,"@Test(expected=DimensionMismatchException.class)public void testCrossoverDimensionMismatchException(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final Integer[]p2=new Integer[]{0,1,1,0,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final BinaryChromosome p2c=new DummyBinaryChromosome(p2);final CrossoverPolicy cp=new CycleCrossover<Integer>();cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.CycleCrossoverTest.testCrossoverInvalidFixedLengthChromosomeFirst",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeFirst(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final Chromosome p2c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new CycleCrossover<Integer>();cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.CycleCrossoverTest.testCrossoverInvalidFixedLengthChromosomeSecond",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeSecond(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p2c=new DummyBinaryChromosome(p1);final Chromosome p1c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new CycleCrossover<Integer>();cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.optimization.MultivariateMultiStartOptimizerTest.testRosenbrock",0,"@Test public void testRosenbrock(){Rosenbrock rosenbrock=new Rosenbrock();SimplexOptimizer underlying=new SimplexOptimizer(new SimpleValueChecker(-1,1.0e-3));NelderMeadSimplex simplex=new NelderMeadSimplex(new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}});underlying.setSimplex(simplex);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(16069223052l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(2,new GaussianRandomGenerator(g));MultivariateMultiStartOptimizer optimizer=new MultivariateMultiStartOptimizer(underlying,10,generator);PointValuePair optimum=optimizer.optimize(1100,rosenbrock,GoalType.MINIMIZE,new double[]{-1.2,1.0});Assert.assertEquals(rosenbrock.getCount(),optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 900);Assert.assertTrue(optimizer.getEvaluations()< 1200);Assert.assertTrue(optimum.getValue()< 8.0e-4);}"
"org.apache.commons.math3.ode.JacobianMatricesTest.testLowAccuracyExternalDifferentiation",0,"@Test public void testLowAccuracyExternalDifferentiation()throws NumberIsTooSmallException,DimensionMismatchException,MaxCountExceededException,NoBracketingException {FirstOrderIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-4,1.0e-4},new double[]{1.0e-4,1.0e-4});double hP=1.0e-12;SummaryStatistics residualsP0=new SummaryStatistics();SummaryStatistics residualsP1=new SummaryStatistics();for (double b=2.88;b < 3.08;b+=0.001){Brusselator brusselator=new Brusselator(b);double[]y={1.3,b};integ.integrate(brusselator,0,y,20.0,y);double[]yP={1.3,b + hP};integ.integrate(brusselator,0,yP,20.0,yP);residualsP0.addValue((yP[0]- y[0])/ hP - brusselator.dYdP0());residualsP1.addValue((yP[1]- y[1])/ hP - brusselator.dYdP1());}Assert.assertTrue((residualsP0.getMax()- residualsP0.getMin())> 500);Assert.assertTrue(residualsP0.getStandardDeviation()> 30);Assert.assertTrue((residualsP1.getMax()- residualsP1.getMin())> 700);Assert.assertTrue(residualsP1.getStandardDeviation()> 40);}"
"org.apache.commons.math3.ode.JacobianMatricesTest.testHighAccuracyExternalDifferentiation",0,"@Test public void testHighAccuracyExternalDifferentiation()throws NumberIsTooSmallException,DimensionMismatchException,MaxCountExceededException,NoBracketingException,UnknownParameterException {FirstOrderIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-10,1.0e-10},new double[]{1.0e-10,1.0e-10});double hP=1.0e-12;SummaryStatistics residualsP0=new SummaryStatistics();SummaryStatistics residualsP1=new SummaryStatistics();for (double b=2.88;b < 3.08;b+=0.001){ParamBrusselator brusselator=new ParamBrusselator(b);double[]y={1.3,b};integ.integrate(brusselator,0,y,20.0,y);double[]yP={1.3,b + hP};brusselator.setParameter(""b"",b + hP);integ.integrate(brusselator,0,yP,20.0,yP);residualsP0.addValue((yP[0]- y[0])/ hP - brusselator.dYdP0());residualsP1.addValue((yP[1]- y[1])/ hP - brusselator.dYdP1());}Assert.assertTrue((residualsP0.getMax()- residualsP0.getMin())> 0.02);Assert.assertTrue((residualsP0.getMax()- residualsP0.getMin())< 0.03);Assert.assertTrue(residualsP0.getStandardDeviation()> 0.003);Assert.assertTrue(residualsP0.getStandardDeviation()< 0.004);Assert.assertTrue((residualsP1.getMax()- residualsP1.getMin())> 0.04);Assert.assertTrue((residualsP1.getMax()- residualsP1.getMin())< 0.05);Assert.assertTrue(residualsP1.getStandardDeviation()> 0.007);Assert.assertTrue(residualsP1.getStandardDeviation()< 0.008);}"
"org.apache.commons.math3.ode.JacobianMatricesTest.testInternalDifferentiation",0,"@Test public void testInternalDifferentiation()throws NumberIsTooSmallException,DimensionMismatchException,MaxCountExceededException,NoBracketingException,UnknownParameterException,MismatchedEquations {AbstractIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-4,1.0e-4},new double[]{1.0e-4,1.0e-4});double hP=1.0e-12;double hY=1.0e-12;SummaryStatistics residualsP0=new SummaryStatistics();SummaryStatistics residualsP1=new SummaryStatistics();for (double b=2.88;b < 3.08;b+=0.001){ParamBrusselator brusselator=new ParamBrusselator(b);brusselator.setParameter(ParamBrusselator.B,b);double[]z={1.3,b};double[][]dZdZ0=new double[2][2];double[]dZdP=new double[2];JacobianMatrices jacob=new JacobianMatrices(brusselator,new double[]{hY,hY},ParamBrusselator.B);jacob.setParameterizedODE(brusselator);jacob.setParameterStep(ParamBrusselator.B,hP);jacob.setInitialParameterJacobian(ParamBrusselator.B,new double[]{0.0,1.0});ExpandableStatefulODE efode=new ExpandableStatefulODE(brusselator);efode.setTime(0);efode.setPrimaryState(z);jacob.registerVariationalEquations(efode);integ.setMaxEvaluations(5000);integ.integrate(efode,20.0);jacob.getCurrentMainSetJacobian(dZdZ0);jacob.getCurrentParameterJacobian(ParamBrusselator.B,dZdP);residualsP0.addValue(dZdP[0]- brusselator.dYdP0());residualsP1.addValue(dZdP[1]- brusselator.dYdP1());}Assert.assertTrue((residualsP0.getMax()- residualsP0.getMin())< 0.02);Assert.assertTrue(residualsP0.getStandardDeviation()< 0.003);Assert.assertTrue((residualsP1.getMax()- residualsP1.getMin())< 0.05);Assert.assertTrue(residualsP1.getStandardDeviation()< 0.01);}"
"org.apache.commons.math3.ode.JacobianMatricesTest.testAnalyticalDifferentiation",0,"@Test public void testAnalyticalDifferentiation()throws MaxCountExceededException,DimensionMismatchException,NumberIsTooSmallException,NoBracketingException,UnknownParameterException,MismatchedEquations {AbstractIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-4,1.0e-4},new double[]{1.0e-4,1.0e-4});SummaryStatistics residualsP0=new SummaryStatistics();SummaryStatistics residualsP1=new SummaryStatistics();for (double b=2.88;b < 3.08;b+=0.001){Brusselator brusselator=new Brusselator(b);double[]z={1.3,b};double[][]dZdZ0=new double[2][2];double[]dZdP=new double[2];JacobianMatrices jacob=new JacobianMatrices(brusselator,Brusselator.B);jacob.addParameterJacobianProvider(brusselator);jacob.setInitialParameterJacobian(Brusselator.B,new double[]{0.0,1.0});ExpandableStatefulODE efode=new ExpandableStatefulODE(brusselator);efode.setTime(0);efode.setPrimaryState(z);jacob.registerVariationalEquations(efode);integ.setMaxEvaluations(5000);integ.integrate(efode,20.0);jacob.getCurrentMainSetJacobian(dZdZ0);jacob.getCurrentParameterJacobian(Brusselator.B,dZdP);residualsP0.addValue(dZdP[0]- brusselator.dYdP0());residualsP1.addValue(dZdP[1]- brusselator.dYdP1());}Assert.assertTrue((residualsP0.getMax()- residualsP0.getMin())< 0.014);Assert.assertTrue(residualsP0.getStandardDeviation()< 0.003);Assert.assertTrue((residualsP1.getMax()- residualsP1.getMin())< 0.05);Assert.assertTrue(residualsP1.getStandardDeviation()< 0.01);}"
"org.apache.commons.math3.ode.JacobianMatricesTest.testFinalResult",0,"@Test public void testFinalResult()throws MaxCountExceededException,DimensionMismatchException,NumberIsTooSmallException,NoBracketingException,UnknownParameterException,MismatchedEquations {AbstractIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-10,1.0e-10},new double[]{1.0e-10,1.0e-10});double[]y=new double[]{0.0,1.0};Circle circle=new Circle(y,1.0,1.0,0.1);JacobianMatrices jacob=new JacobianMatrices(circle,Circle.CX,Circle.CY,Circle.OMEGA);jacob.addParameterJacobianProvider(circle);jacob.setInitialMainStateJacobian(circle.exactDyDy0(0));jacob.setInitialParameterJacobian(Circle.CX,circle.exactDyDcx(0));jacob.setInitialParameterJacobian(Circle.CY,circle.exactDyDcy(0));jacob.setInitialParameterJacobian(Circle.OMEGA,circle.exactDyDom(0));ExpandableStatefulODE efode=new ExpandableStatefulODE(circle);efode.setTime(0);efode.setPrimaryState(y);jacob.registerVariationalEquations(efode);integ.setMaxEvaluations(5000);double t=18 * FastMath.PI;integ.integrate(efode,t);y=efode.getPrimaryState();for (int i=0;i < y.length;++i){Assert.assertEquals(circle.exactY(t)[i],y[i],1.0e-9);}double[][]dydy0=new double[2][2];jacob.getCurrentMainSetJacobian(dydy0);for (int i=0;i < dydy0.length;++i){for (int j=0;j < dydy0[i].length;++j){Assert.assertEquals(circle.exactDyDy0(t)[i][j],dydy0[i][j],1.0e-9);}}double[]dydcx=new double[2];jacob.getCurrentParameterJacobian(Circle.CX,dydcx);for (int i=0;i < dydcx.length;++i){Assert.assertEquals(circle.exactDyDcx(t)[i],dydcx[i],1.0e-7);}double[]dydcy=new double[2];jacob.getCurrentParameterJacobian(Circle.CY,dydcy);for (int i=0;i < dydcy.length;++i){Assert.assertEquals(circle.exactDyDcy(t)[i],dydcy[i],1.0e-7);}double[]dydom=new double[2];jacob.getCurrentParameterJacobian(Circle.OMEGA,dydom);for (int i=0;i < dydom.length;++i){Assert.assertEquals(circle.exactDyDom(t)[i],dydom[i],1.0e-7);}}"
"org.apache.commons.math3.ode.JacobianMatricesTest.testParameterizable",0,"@Test public void testParameterizable()throws MaxCountExceededException,DimensionMismatchException,NumberIsTooSmallException,NoBracketingException,UnknownParameterException,MismatchedEquations {AbstractIntegrator integ=new DormandPrince54Integrator(1.0e-8,100.0,new double[]{1.0e-10,1.0e-10},new double[]{1.0e-10,1.0e-10});double[]y=new double[]{0.0,1.0};ParameterizedCircle pcircle=new ParameterizedCircle(y,1.0,1.0,0.1);double hP=1.0e-12;double hY=1.0e-12;JacobianMatrices jacob=new JacobianMatrices(pcircle,new double[]{hY,hY},ParameterizedCircle.CX,ParameterizedCircle.CY,ParameterizedCircle.OMEGA);jacob.setParameterizedODE(pcircle);jacob.setParameterStep(ParameterizedCircle.CX,hP);jacob.setParameterStep(ParameterizedCircle.CY,hP);jacob.setParameterStep(ParameterizedCircle.OMEGA,hP);jacob.setInitialMainStateJacobian(pcircle.exactDyDy0(0));jacob.setInitialParameterJacobian(ParameterizedCircle.CX,pcircle.exactDyDcx(0));jacob.setInitialParameterJacobian(ParameterizedCircle.CY,pcircle.exactDyDcy(0));jacob.setInitialParameterJacobian(ParameterizedCircle.OMEGA,pcircle.exactDyDom(0));ExpandableStatefulODE efode=new ExpandableStatefulODE(pcircle);efode.setTime(0);efode.setPrimaryState(y);jacob.registerVariationalEquations(efode);integ.setMaxEvaluations(50000);double t=18 * FastMath.PI;integ.integrate(efode,t);y=efode.getPrimaryState();for (int i=0;i < y.length;++i){Assert.assertEquals(pcircle.exactY(t)[i],y[i],1.0e-9);}double[][]dydy0=new double[2][2];jacob.getCurrentMainSetJacobian(dydy0);for (int i=0;i < dydy0.length;++i){for (int j=0;j < dydy0[i].length;++j){Assert.assertEquals(pcircle.exactDyDy0(t)[i][j],dydy0[i][j],5.0e-4);}}double[]dydp0=new double[2];jacob.getCurrentParameterJacobian(ParameterizedCircle.CX,dydp0);for (int i=0;i < dydp0.length;++i){Assert.assertEquals(pcircle.exactDyDcx(t)[i],dydp0[i],5.0e-4);}double[]dydp1=new double[2];jacob.getCurrentParameterJacobian(ParameterizedCircle.OMEGA,dydp1);for (int i=0;i < dydp1.length;++i){Assert.assertEquals(pcircle.exactDyDom(t)[i],dydp1[i],1.0e-2);}}"
"org.apache.commons.math3.ml.clustering.FuzzyKMeansClustererTest.testCluster",0,"@Test public void testCluster(){final List<DoublePoint> points=new ArrayList<DoublePoint>();for (int i=1;i <= 10;i++){final DoublePoint p=new DoublePoint(new double[]{i});points.add(p);}final FuzzyKMeansClusterer<DoublePoint> transformer=new FuzzyKMeansClusterer<DoublePoint>(3,2.0);final List<CentroidCluster<DoublePoint>> clusters=transformer.cluster(points);final List<DoublePoint> clusterOne=Arrays.asList(points.get(0),points.get(1),points.get(2));final List<DoublePoint> clusterTwo=Arrays.asList(points.get(3),points.get(4),points.get(5),points.get(6));final List<DoublePoint> clusterThree=Arrays.asList(points.get(7),points.get(8),points.get(9));boolean cluster1Found=false;boolean cluster2Found=false;boolean cluster3Found=false;Assert.assertEquals(3,clusters.size());for(final Cluster<DoublePoint> cluster : clusters){if (cluster.getPoints().containsAll(clusterOne)){cluster1Found=true;}if (cluster.getPoints().containsAll(clusterTwo)){cluster2Found=true;}if (cluster.getPoints().containsAll(clusterThree)){cluster3Found=true;}}Assert.assertTrue(cluster1Found);Assert.assertTrue(cluster2Found);Assert.assertTrue(cluster3Found);}"
"org.apache.commons.math3.ml.clustering.FuzzyKMeansClustererTest.testTooSmallFuzzynessFactor",0,"@Test(expected=MathIllegalArgumentException.class)public void testTooSmallFuzzynessFactor(){new FuzzyKMeansClusterer<DoublePoint>(3,1.0);}"
"org.apache.commons.math3.ml.clustering.FuzzyKMeansClustererTest.testNullDataset",0,"@Test(expected=NullArgumentException.class)public void testNullDataset(){final FuzzyKMeansClusterer<DoublePoint> clusterer=new FuzzyKMeansClusterer<DoublePoint>(3,2.0);clusterer.cluster(null);}"
"org.apache.commons.math3.ml.clustering.FuzzyKMeansClustererTest.testGetters",0,"@Test public void testGetters(){final DistanceMeasure measure=new CanberraDistance();final RandomGenerator random=new JDKRandomGenerator();final FuzzyKMeansClusterer<DoublePoint> clusterer=new FuzzyKMeansClusterer<DoublePoint>(3,2.0,100,measure,1e-6,random);Assert.assertEquals(3,clusterer.getK());Assert.assertEquals(2.0,clusterer.getFuzziness(),1e-6);Assert.assertEquals(100,clusterer.getMaxIterations());Assert.assertEquals(1e-6,clusterer.getEpsilon(),1e-12);Assert.assertThat(clusterer.getDistanceMeasure(),CoreMatchers.is(measure));Assert.assertThat(clusterer.getRandomGenerator(),CoreMatchers.is(random));}"
"org.apache.commons.math3.exception.NotStrictlyPositiveExceptionTest.testAccessors",0,"@Test public void testAccessors(){final NotStrictlyPositiveException e=new NotStrictlyPositiveException(0);Assert.assertEquals(0,e.getArgument());Assert.assertEquals(0,e.getMin());Assert.assertFalse(e.getBoundIsAllowed());}"
"org.apache.commons.math3.stat.StatUtilsTest.testStats",0,"/** * test stats */@Test public void testStats(){double[]values=new double[]{ONE,TWO,TWO,THREE};Assert.assertEquals(""sum"",SUM,StatUtils.sum(values),TOLERANCE);Assert.assertEquals(""sumsq"",SUMSQ,StatUtils.sumSq(values),TOLERANCE);Assert.assertEquals(""var"",VAR,StatUtils.variance(values),TOLERANCE);Assert.assertEquals(""var with mean"",VAR,StatUtils.variance(values,MEAN),TOLERANCE);Assert.assertEquals(""mean"",MEAN,StatUtils.mean(values),TOLERANCE);Assert.assertEquals(""min"",MIN,StatUtils.min(values),TOLERANCE);Assert.assertEquals(""max"",MAX,StatUtils.max(values),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){double[]values=new double[0];Assert.assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(StatUtils.mean(values)));Assert.assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(StatUtils.variance(values)));values=new double[]{ONE};Assert.assertTrue(""Mean of n = 1 set should be value of single item n1"",StatUtils.mean(values)== ONE);Assert.assertTrue(""Variance of n = 1 set should be zero"",StatUtils.variance(values)== 0);}"
"org.apache.commons.math3.stat.StatUtilsTest.testArrayIndexConditions",0,"@Test public void testArrayIndexConditions(){double[]values={1.0,2.0,3.0,4.0};Assert.assertEquals(""Sum not expected"",5.0,StatUtils.sum(values,1,2),Double.MIN_VALUE);Assert.assertEquals(""Sum not expected"",3.0,StatUtils.sum(values,0,2),Double.MIN_VALUE);Assert.assertEquals(""Sum not expected"",7.0,StatUtils.sum(values,2,2),Double.MIN_VALUE);try {StatUtils.sum(values,2,3);Assert.fail(""Expected RuntimeException"");}catch(RuntimeException e){}try {StatUtils.sum(values,-1,2);Assert.fail(""Expected RuntimeException"");}catch(RuntimeException e){}}"
"org.apache.commons.math3.stat.StatUtilsTest.testSumSq",0,"@Test public void testSumSq(){double[]x=null;try {StatUtils.sumSq(x);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}try {StatUtils.sumSq(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(0,StatUtils.sumSq(x),TOLERANCE);TestUtils.assertEquals(0,StatUtils.sumSq(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(4,StatUtils.sumSq(x),TOLERANCE);TestUtils.assertEquals(4,StatUtils.sumSq(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(18,StatUtils.sumSq(x),TOLERANCE);TestUtils.assertEquals(8,StatUtils.sumSq(x,1,2),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testProduct",0,"@Test public void testProduct(){double[]x=null;try {StatUtils.product(x);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}try {StatUtils.product(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(1,StatUtils.product(x),TOLERANCE);TestUtils.assertEquals(1,StatUtils.product(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(TWO,StatUtils.product(x),TOLERANCE);TestUtils.assertEquals(TWO,StatUtils.product(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(12,StatUtils.product(x),TOLERANCE);TestUtils.assertEquals(4,StatUtils.product(x,1,2),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testSumLog",0,"@Test public void testSumLog(){double[]x=null;try {StatUtils.sumLog(x);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}try {StatUtils.sumLog(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(0,StatUtils.sumLog(x),TOLERANCE);TestUtils.assertEquals(0,StatUtils.sumLog(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(FastMath.log(TWO),StatUtils.sumLog(x),TOLERANCE);TestUtils.assertEquals(FastMath.log(TWO),StatUtils.sumLog(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(FastMath.log(ONE)+ 2.0 * FastMath.log(TWO)+ FastMath.log(THREE),StatUtils.sumLog(x),TOLERANCE);TestUtils.assertEquals(2.0 * FastMath.log(TWO),StatUtils.sumLog(x,1,2),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testMean",0,"@Test public void testMean(){double[]x=null;try {StatUtils.mean(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.mean(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(TWO,StatUtils.mean(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(2.5,StatUtils.mean(x,2,2),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testVariance",0,"@Test public void testVariance(){double[]x=null;try {StatUtils.variance(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.variance(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(0.0,StatUtils.variance(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(0.5,StatUtils.variance(x,2,2),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(0.5,StatUtils.variance(x,2.5,2,2),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testPopulationVariance",0,"@Test public void testPopulationVariance(){double[]x=null;try {StatUtils.variance(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.populationVariance(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(0.0,StatUtils.populationVariance(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(0.25,StatUtils.populationVariance(x,0,2),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(0.25,StatUtils.populationVariance(x,2.5,2,2),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testMax",0,"@Test public void testMax(){double[]x=null;try {StatUtils.max(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.max(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(TWO,StatUtils.max(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(THREE,StatUtils.max(x,1,3),TOLERANCE);x=new double[]{NAN,TWO,THREE};TestUtils.assertEquals(THREE,StatUtils.max(x),TOLERANCE);x=new double[]{ONE,NAN,THREE};TestUtils.assertEquals(THREE,StatUtils.max(x),TOLERANCE);x=new double[]{ONE,TWO,NAN};TestUtils.assertEquals(TWO,StatUtils.max(x),TOLERANCE);x=new double[]{NAN,NAN,NAN};TestUtils.assertEquals(NAN,StatUtils.max(x),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testMin",0,"@Test public void testMin(){double[]x=null;try {StatUtils.min(x,0,4);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.min(x,0,0),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(TWO,StatUtils.min(x,0,1),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(TWO,StatUtils.min(x,1,3),TOLERANCE);x=new double[]{NAN,TWO,THREE};TestUtils.assertEquals(TWO,StatUtils.min(x),TOLERANCE);x=new double[]{ONE,NAN,THREE};TestUtils.assertEquals(ONE,StatUtils.min(x),TOLERANCE);x=new double[]{ONE,TWO,NAN};TestUtils.assertEquals(ONE,StatUtils.min(x),TOLERANCE);x=new double[]{NAN,NAN,NAN};TestUtils.assertEquals(NAN,StatUtils.min(x),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testPercentile",0,"@Test public void testPercentile(){double[]x=null;try {StatUtils.percentile(x,.25);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}try {StatUtils.percentile(x,0,4,0.25);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException ex){}x=new double[]{};TestUtils.assertEquals(Double.NaN,StatUtils.percentile(x,25),TOLERANCE);TestUtils.assertEquals(Double.NaN,StatUtils.percentile(x,0,0,25),TOLERANCE);x=new double[]{TWO};TestUtils.assertEquals(TWO,StatUtils.percentile(x,25),TOLERANCE);TestUtils.assertEquals(TWO,StatUtils.percentile(x,0,1,25),TOLERANCE);x=new double[]{ONE,TWO,TWO,THREE};TestUtils.assertEquals(2.5,StatUtils.percentile(x,70),TOLERANCE);TestUtils.assertEquals(2.5,StatUtils.percentile(x,1,3,62.5),TOLERANCE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testDifferenceStats",0,"@Test public void testDifferenceStats(){double sample1[]={1d,2d,3d,4d};double sample2[]={1d,3d,4d,2d};double diff[]={0d,-1d,-1d,2d};double small[]={1d,4d};double meanDifference=StatUtils.meanDifference(sample1,sample2);Assert.assertEquals(StatUtils.sumDifference(sample1,sample2),StatUtils.sum(diff),TOLERANCE);Assert.assertEquals(meanDifference,StatUtils.mean(diff),TOLERANCE);Assert.assertEquals(StatUtils.varianceDifference(sample1,sample2,meanDifference),StatUtils.variance(diff),TOLERANCE);try {StatUtils.meanDifference(sample1,small);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {StatUtils.varianceDifference(sample1,small,meanDifference);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {double[]single={1.0};StatUtils.varianceDifference(single,single,meanDifference);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.StatUtilsTest.testGeometricMean",0,"@Test public void testGeometricMean(){double[]test=null;try {StatUtils.geometricMean(test);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}test=new double[]{2,4,6,8};Assert.assertEquals(FastMath.exp(0.25d * StatUtils.sumLog(test)),StatUtils.geometricMean(test),Double.MIN_VALUE);Assert.assertEquals(FastMath.exp(0.5 * StatUtils.sumLog(test,0,2)),StatUtils.geometricMean(test,0,2),Double.MIN_VALUE);}"
"org.apache.commons.math3.stat.StatUtilsTest.testNormalize1",0,"/** * Run the test with the values 50 and 100 and assume standardized values    */@Test public void testNormalize1(){double sample[]={50,100};double expectedSample[]={-25 / Math.sqrt(1250),25 / Math.sqrt(1250)};double[]out=StatUtils.normalize(sample);for (int i=0;i < out.length;i++){Assert.assertTrue(Precision.equals(out[i],expectedSample[i],1));}}"
"org.apache.commons.math3.stat.StatUtilsTest.testNormalize2",0,"/** * Run with 77 random values,assuming that the outcome has a mean of 0 and a standard deviation of 1 with a precision of 1E-10.*/@Test public void testNormalize2(){int length=77;double sample[]=new double[length];for (int i=0;i < length;i++){sample[i]=Math.random();}double standardizedSample[]=StatUtils.normalize(sample);DescriptiveStatistics stats=new DescriptiveStatistics();for (int i=0;i < length;i++){stats.addValue(standardizedSample[i]);}double distance=1E-10;Assert.assertEquals(0.0,stats.getMean(),distance);Assert.assertEquals(1.0,stats.getStandardDeviation(),distance);}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testExceptions",0,"/** * Tests if the EnumeratedIntegerDistribution constructor throws exceptions for invalid data.*/@Test public void testExceptions(){EnumeratedIntegerDistribution invalid=null;try {new EnumeratedIntegerDistribution(new int[]{1,2},new double[]{0.0});Assert.fail(""Expected DimensionMismatchException"");}catch(DimensionMismatchException e){}try {new EnumeratedIntegerDistribution(new int[]{1,2},new double[]{0.0,-1.0});Assert.fail(""Expected NotPositiveException"");}catch(NotPositiveException e){}try {new EnumeratedIntegerDistribution(new int[]{1,2},new double[]{0.0,0.0});Assert.fail(""Expected MathArithmeticException"");}catch(MathArithmeticException e){}try {new EnumeratedIntegerDistribution(new int[]{1,2},new double[]{0.0,Double.NaN});Assert.fail(""Expected NotANumberException"");}catch(NotANumberException e){}try {new EnumeratedIntegerDistribution(new int[]{1,2},new double[]{0.0,Double.POSITIVE_INFINITY});Assert.fail(""Expected NotFiniteNumberException"");}catch(NotFiniteNumberException e){}Assert.assertNull(""Expected non-initialized DiscreteRealDistribution"",invalid);}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testProbability",0,"/** * Tests if the distribution returns proper probability values.*/@Test public void testProbability(){int[]points=new int[]{-2,-1,0,1,2,3,4,5,6,7,8};double[]results=new double[]{0,0.2,0,0,0,0.5,0,0,0,0.3,0};for (int p=0;p < points.length;p++){double probability=testDistribution.probability(points[p]);Assert.assertEquals(results[p],probability,0.0);}}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testCumulativeProbability",0,"/** * Tests if the distribution returns proper cumulative probability values.*/@Test public void testCumulativeProbability(){int[]points=new int[]{-2,-1,0,1,2,3,4,5,6,7,8};double[]results=new double[]{0,0.2,0.2,0.2,0.2,0.7,0.7,0.7,0.7,1.0,1.0};for (int p=0;p < points.length;p++){double probability=testDistribution.cumulativeProbability(points[p]);Assert.assertEquals(results[p],probability,1e-10);}}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalMean",0,"/** * Tests if the distribution returns proper mean value.*/@Test public void testGetNumericalMean(){Assert.assertEquals(3.4,testDistribution.getNumericalMean(),1e-10);}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetNumericalVariance",0,"/** * Tests if the distribution returns proper variance.*/@Test public void testGetNumericalVariance(){Assert.assertEquals(7.84,testDistribution.getNumericalVariance(),1e-10);}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportLowerBound",0,"/** * Tests if the distribution returns proper lower bound.*/@Test public void testGetSupportLowerBound(){Assert.assertEquals(-1,testDistribution.getSupportLowerBound());}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testGetSupportUpperBound",0,"/** * Tests if the distribution returns proper upper bound.*/@Test public void testGetSupportUpperBound(){Assert.assertEquals(7,testDistribution.getSupportUpperBound());}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testIsSupportConnected",0,"/** * Tests if the distribution returns properly that the support is connected.*/@Test public void testIsSupportConnected(){Assert.assertTrue(testDistribution.isSupportConnected());}"
"org.apache.commons.math3.distribution.EnumeratedIntegerDistributionTest.testSample",0,"/** * Tests sampling.*/@Test public void testSample(){final int n=1000000;testDistribution.reseedRandomGenerator(-334759360);final int[]samples=testDistribution.sample(n);Assert.assertEquals(n,samples.length);double sum=0;double sumOfSquares=0;for (int i=0;i < samples.length;i++){sum+=samples[i];sumOfSquares+=samples[i]* samples[i];}Assert.assertEquals(testDistribution.getNumericalMean(),sum / n,1e-2);Assert.assertEquals(testDistribution.getNumericalVariance(),sumOfSquares / n - FastMath.pow(sum / n,2),1e-2);}"
"org.apache.commons.math3.complex.ComplexFieldTest.testZero",0,"@Test public void testZero(){Assert.assertEquals(Complex.ZERO,ComplexField.getInstance().getZero());}"
"org.apache.commons.math3.complex.ComplexFieldTest.testOne",0,"@Test public void testOne(){Assert.assertEquals(Complex.ONE,ComplexField.getInstance().getOne());}"
"org.apache.commons.math3.complex.ComplexFieldTest.testSerial",0,"@Test public void testSerial(){ComplexField field=ComplexField.getInstance();Assert.assertTrue(field == TestUtils.serializeAndRecover(field));}"
"org.apache.commons.math3.analysis.differentiation.GradientFunctionTest.test2DDistance",0,"@Test public void test2DDistance(){EuclideanDistance f=new EuclideanDistance();GradientFunction g=new GradientFunction(f);for (double x=-10;x < 10;x+=0.5){for (double y=-10;y < 10;y+=0.5){double[]point=new double[]{x,y};TestUtils.assertEquals(f.gradient(point),g.value(point),1.0e-15);}}}"
"org.apache.commons.math3.analysis.differentiation.GradientFunctionTest.test3DDistance",0,"@Test public void test3DDistance(){EuclideanDistance f=new EuclideanDistance();GradientFunction g=new GradientFunction(f);for (double x=-10;x < 10;x+=0.5){for (double y=-10;y < 10;y+=0.5){for (double z=-10;z < 10;z+=0.5){double[]point=new double[]{x,y,z};TestUtils.assertEquals(f.gradient(point),g.value(point),1.0e-15);}}}}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testNormalApproximateProbability",0,"/** * Test the normal approximation of the Poisson distribution by calculating P(90 &le;X &le;110)for X = Po(100)and P(9900 &le;X &le;10200)for X  = Po(10000)*/@Test public void testNormalApproximateProbability(){PoissonDistribution dist=new PoissonDistribution(100);double result=dist.normalApproximateProbability(110)- dist.normalApproximateProbability(89);Assert.assertEquals(0.706281887248,result,1E-10);dist=new PoissonDistribution(10000);result=dist.normalApproximateProbability(10200)- dist.normalApproximateProbability(9899);Assert.assertEquals(0.820070051552,result,1E-10);}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testDegenerateInverseCumulativeProbability",0,"/** * Test the degenerate cases of a 0.0 and 1.0 inverse cumulative probability.*/@Test public void testDegenerateInverseCumulativeProbability(){PoissonDistribution dist=new PoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);Assert.assertEquals(Integer.MAX_VALUE,dist.inverseCumulativeProbability(1.0d));Assert.assertEquals(0,dist.inverseCumulativeProbability(0d));}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testNegativeMean",0,"@Test(expected=NotStrictlyPositiveException.class)public void testNegativeMean(){new PoissonDistribution(-1);}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testMean",0,"@Test public void testMean(){PoissonDistribution dist=new PoissonDistribution(10.0);Assert.assertEquals(10.0,dist.getMean(),0.0);}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanCumulativeProbability",0,"@Test public void testLargeMeanCumulativeProbability(){double mean=1.0;while (mean <= 10000000.0){PoissonDistribution dist=new PoissonDistribution(mean);double x=mean * 2.0;double dx=x / 10.0;double p=Double.NaN;double sigma=FastMath.sqrt(mean);while (x >= 0){try {p=dist.cumulativeProbability((int)x);Assert.assertFalse(""NaN cumulative probability returned for mean = "" + mean + "" x = ""+ x,Double.isNaN(p));if (x > mean - 2 * sigma){Assert.assertTrue(""Zero cum probaility returned for mean = "" + mean + "" x = ""+ x,p > 0);}}catch(Exception ex){Assert.fail(""mean of "" + mean + "" and x of ""+ x+ "" caused ""+ ex.getMessage());}x-=dx;}mean*=10.0;}}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilitySpecial",0,"/** * JIRA: MATH-282*/@Test public void testCumulativeProbabilitySpecial(){PoissonDistribution dist;dist=new PoissonDistribution(9120);checkProbability(dist,9075);checkProbability(dist,9102);dist=new PoissonDistribution(5058);checkProbability(dist,5044);dist=new PoissonDistribution(6986);checkProbability(dist,6950);}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testLargeMeanInverseCumulativeProbability",0,"@Test public void testLargeMeanInverseCumulativeProbability(){double mean=1.0;while (mean <= 100000.0){PoissonDistribution dist=new PoissonDistribution(mean);double p=0.1;double dp=p;while (p < .99){try {int ret=dist.inverseCumulativeProbability(p);Assert.assertTrue(p <= dist.cumulativeProbability(ret));Assert.assertTrue(p > dist.cumulativeProbability(ret - 1));}catch(Exception ex){Assert.fail(""mean of "" + mean + "" and p of ""+ p+ "" caused ""+ ex.getMessage());}p+=dp;}mean*=10.0;}}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;PoissonDistribution dist;dist=new PoissonDistribution(1);Assert.assertEquals(dist.getNumericalMean(),1,tol);Assert.assertEquals(dist.getNumericalVariance(),1,tol);dist=new PoissonDistribution(11.23);Assert.assertEquals(dist.getNumericalMean(),11.23,tol);Assert.assertEquals(dist.getNumericalVariance(),11.23,tol);}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.PoissonDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testMinimize1",0,"@Test public void testMinimize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(100,fourExtrema,GoalType.MINIMIZE,new double[]{-3,0});Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],2e-7);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],2e-5);Assert.assertEquals(fourExtrema.valueXmYp,optimum.getValue(),6e-12);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testMinimize2",0,"@Test public void testMinimize2(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(100,fourExtrema,GoalType.MINIMIZE,new double[]{1,0});Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],5e-6);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],6e-6);Assert.assertEquals(fourExtrema.valueXpYm,optimum.getValue(),1e-11);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testMaximize1",0,"@Test public void testMaximize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(100,fourExtrema,GoalType.MAXIMIZE,new double[]{-3,0});Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],1e-5);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXmYm,optimum.getValue(),3e-12);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testMaximize2",0,"@Test public void testMaximize2(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[]{0.2,0.2}));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(100,fourExtrema,GoalType.MAXIMIZE,new double[]{1,0});Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],4e-6);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],5e-6);Assert.assertEquals(fourExtrema.valueXpYp,optimum.getValue(),7e-12);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testRosenbrock",0,"@Test public void testRosenbrock(){Rosenbrock rosenbrock=new Rosenbrock();SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);optimizer.setSimplex(new NelderMeadSimplex(new double[][]{{-1.2,1},{0.9,1.2},{3.5,-2.3}}));PointValuePair optimum=optimizer.optimize(100,rosenbrock,GoalType.MINIMIZE,new double[]{-1.2,1});Assert.assertEquals(rosenbrock.getCount(),optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 40);Assert.assertTrue(optimizer.getEvaluations()< 50);Assert.assertTrue(optimum.getValue()< 8e-4);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testPowell",0,"@Test public void testPowell(){Powell powell=new Powell();SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);optimizer.setSimplex(new NelderMeadSimplex(4));PointValuePair optimum=optimizer.optimize(200,powell,GoalType.MINIMIZE,new double[]{3,-1,0,1});Assert.assertEquals(powell.getCount(),optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 110);Assert.assertTrue(optimizer.getEvaluations()< 130);Assert.assertTrue(optimum.getValue()< 2e-3);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testLeastSquares1",0,"@Test public void testLeastSquares1(){final RealMatrix factors=new Array2DRowRealMatrix(new double[][]{{1,0},{0,1}},false);LeastSquaresConverter ls=new LeastSquaresConverter(new MultivariateVectorFunction(){public double[]value(double[]variables){return factors.operate(variables);}},new double[]{2.0,-3.0});SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-6);optimizer.setSimplex(new NelderMeadSimplex(2));PointValuePair optimum=optimizer.optimize(200,ls,GoalType.MINIMIZE,new double[]{10,10});Assert.assertEquals(2,optimum.getPointRef()[0],3e-5);Assert.assertEquals(-3,optimum.getPointRef()[1],4e-4);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 80);Assert.assertTrue(optimum.getValue()< 1.0e-6);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testLeastSquares2",0,"@Test public void testLeastSquares2(){final RealMatrix factors=new Array2DRowRealMatrix(new double[][]{{1,0},{0,1}},false);LeastSquaresConverter ls=new LeastSquaresConverter(new MultivariateVectorFunction(){public double[]value(double[]variables){return factors.operate(variables);}},new double[]{2,-3},new double[]{10,0.1});SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-6);optimizer.setSimplex(new NelderMeadSimplex(2));PointValuePair optimum=optimizer.optimize(200,ls,GoalType.MINIMIZE,new double[]{10,10});Assert.assertEquals(2,optimum.getPointRef()[0],5e-5);Assert.assertEquals(-3,optimum.getPointRef()[1],8e-4);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 80);Assert.assertTrue(optimum.getValue()< 1e-6);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testLeastSquares3",0,"@Test public void testLeastSquares3(){final RealMatrix factors=new Array2DRowRealMatrix(new double[][]{{1,0},{0,1}},false);LeastSquaresConverter ls=new LeastSquaresConverter(new MultivariateVectorFunction(){public double[]value(double[]variables){return factors.operate(variables);}},new double[]{2,-3},new Array2DRowRealMatrix(new double[][]{{1,1.2},{1.2,2}}));SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-6);optimizer.setSimplex(new NelderMeadSimplex(2));PointValuePair optimum=optimizer.optimize(200,ls,GoalType.MINIMIZE,new double[]{10,10});Assert.assertEquals(2,optimum.getPointRef()[0],2e-3);Assert.assertEquals(-3,optimum.getPointRef()[1],8e-4);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 80);Assert.assertTrue(optimum.getValue()< 1e-6);}"
"org.apache.commons.math3.optimization.direct.SimplexOptimizerNelderMeadTest.testMaxIterations",0,"@Test(expected=TooManyEvaluationsException.class)public void testMaxIterations(){Powell powell=new Powell();SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);optimizer.setSimplex(new NelderMeadSimplex(4));optimizer.optimize(20,powell,GoalType.MINIMIZE,new double[]{3,-1,0,1});}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest.testMismatch",0,"@Test public void testMismatch(){try {new VectorialCovariance(8,true).increment(new double[5]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException dme){Assert.assertEquals(5,dme.getArgument());Assert.assertEquals(8,dme.getDimension());}}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest.testSimplistic",0,"@Test public void testSimplistic(){VectorialCovariance stat=new VectorialCovariance(2,true);stat.increment(new double[]{-1.0,1.0});stat.increment(new double[]{1.0,-1.0});RealMatrix c=stat.getResult();Assert.assertEquals(2.0,c.getEntry(0,0),1.0e-12);Assert.assertEquals(-2.0,c.getEntry(1,0),1.0e-12);Assert.assertEquals(2.0,c.getEntry(1,1),1.0e-12);}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest.testBasicStats",0,"@Test public void testBasicStats(){VectorialCovariance stat=new VectorialCovariance(points[0].length,true);for (int i=0;i < points.length;++i){stat.increment(points[i]);}Assert.assertEquals(points.length,stat.getN());RealMatrix c=stat.getResult();double[][]refC=new double[][]{{8.0470,-1.9195,-3.4445},{-1.9195,1.0470,3.2795},{-3.4445,3.2795,12.2070}};for (int i=0;i < c.getRowDimension();++i){for (int j=0;j <= i;++j){Assert.assertEquals(refC[i][j],c.getEntry(i,j),1.0e-12);}}}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialCovarianceTest.testSerial",0,"@Test public void testSerial(){VectorialCovariance stat=new VectorialCovariance(points[0].length,true);Assert.assertEquals(stat,TestUtils.serializeAndRecover(stat));}"
"org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n = 0*/@Test public void testNaN(){StandardDeviation std=new StandardDeviation();Assert.assertTrue(Double.isNaN(std.getResult()));std.increment(1d);Assert.assertEquals(0d,std.getResult(),0);}"
"org.apache.commons.math3.stat.descriptive.moment.StandardDeviationTest.testPopulation",0,"/** * Test population version of variance*/@Test public void testPopulation(){double[]values={-1.0d,3.1d,4.0d,-2.1d,22d,11.7d,3d,14d};double sigma=populationStandardDeviation(values);SecondMoment m=new SecondMoment();m.evaluate(values);StandardDeviation s1=new StandardDeviation();s1.setBiasCorrected(false);Assert.assertEquals(sigma,s1.evaluate(values),1E-14);s1.incrementAll(values);Assert.assertEquals(sigma,s1.getResult(),1E-14);s1=new StandardDeviation(false,m);Assert.assertEquals(sigma,s1.getResult(),1E-14);s1=new StandardDeviation(false);Assert.assertEquals(sigma,s1.evaluate(values),1E-14);s1.incrementAll(values);Assert.assertEquals(sigma,s1.getResult(),1E-14);}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testSize",0,"@Test public void testSize(){for (int i=0;i < 6;++i){for (int j=0;j < 6;++j){long expected=ArithmeticUtils.binomialCoefficient(i + j,i);Assert.assertEquals(expected,DSCompiler.getCompiler(i,j).getSize());Assert.assertEquals(expected,DSCompiler.getCompiler(j,i).getSize());}}}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testIndices",0,"@Test public void testIndices(){DSCompiler c=DSCompiler.getCompiler(0,0);checkIndices(c.getPartialDerivativeOrders(0),new int[0]);c=DSCompiler.getCompiler(0,1);checkIndices(c.getPartialDerivativeOrders(0),new int[0]);c=DSCompiler.getCompiler(1,0);checkIndices(c.getPartialDerivativeOrders(0),0);c=DSCompiler.getCompiler(1,1);checkIndices(c.getPartialDerivativeOrders(0),0);checkIndices(c.getPartialDerivativeOrders(1),1);c=DSCompiler.getCompiler(1,2);checkIndices(c.getPartialDerivativeOrders(0),0);checkIndices(c.getPartialDerivativeOrders(1),1);checkIndices(c.getPartialDerivativeOrders(2),2);c=DSCompiler.getCompiler(2,1);checkIndices(c.getPartialDerivativeOrders(0),0,0);checkIndices(c.getPartialDerivativeOrders(1),1,0);checkIndices(c.getPartialDerivativeOrders(2),0,1);c=DSCompiler.getCompiler(1,3);checkIndices(c.getPartialDerivativeOrders(0),0);checkIndices(c.getPartialDerivativeOrders(1),1);checkIndices(c.getPartialDerivativeOrders(2),2);checkIndices(c.getPartialDerivativeOrders(3),3);c=DSCompiler.getCompiler(2,2);checkIndices(c.getPartialDerivativeOrders(0),0,0);checkIndices(c.getPartialDerivativeOrders(1),1,0);checkIndices(c.getPartialDerivativeOrders(2),2,0);checkIndices(c.getPartialDerivativeOrders(3),0,1);checkIndices(c.getPartialDerivativeOrders(4),1,1);checkIndices(c.getPartialDerivativeOrders(5),0,2);c=DSCompiler.getCompiler(3,1);checkIndices(c.getPartialDerivativeOrders(0),0,0,0);checkIndices(c.getPartialDerivativeOrders(1),1,0,0);checkIndices(c.getPartialDerivativeOrders(2),0,1,0);checkIndices(c.getPartialDerivativeOrders(3),0,0,1);c=DSCompiler.getCompiler(1,4);checkIndices(c.getPartialDerivativeOrders(0),0);checkIndices(c.getPartialDerivativeOrders(1),1);checkIndices(c.getPartialDerivativeOrders(2),2);checkIndices(c.getPartialDerivativeOrders(3),3);checkIndices(c.getPartialDerivativeOrders(4),4);c=DSCompiler.getCompiler(2,3);checkIndices(c.getPartialDerivativeOrders(0),0,0);checkIndices(c.getPartialDerivativeOrders(1),1,0);checkIndices(c.getPartialDerivativeOrders(2),2,0);checkIndices(c.getPartialDerivativeOrders(3),3,0);checkIndices(c.getPartialDerivativeOrders(4),0,1);checkIndices(c.getPartialDerivativeOrders(5),1,1);checkIndices(c.getPartialDerivativeOrders(6),2,1);checkIndices(c.getPartialDerivativeOrders(7),0,2);checkIndices(c.getPartialDerivativeOrders(8),1,2);checkIndices(c.getPartialDerivativeOrders(9),0,3);c=DSCompiler.getCompiler(3,2);checkIndices(c.getPartialDerivativeOrders(0),0,0,0);checkIndices(c.getPartialDerivativeOrders(1),1,0,0);checkIndices(c.getPartialDerivativeOrders(2),2,0,0);checkIndices(c.getPartialDerivativeOrders(3),0,1,0);checkIndices(c.getPartialDerivativeOrders(4),1,1,0);checkIndices(c.getPartialDerivativeOrders(5),0,2,0);checkIndices(c.getPartialDerivativeOrders(6),0,0,1);checkIndices(c.getPartialDerivativeOrders(7),1,0,1);checkIndices(c.getPartialDerivativeOrders(8),0,1,1);checkIndices(c.getPartialDerivativeOrders(9),0,0,2);c=DSCompiler.getCompiler(4,1);checkIndices(c.getPartialDerivativeOrders(0),0,0,0,0);checkIndices(c.getPartialDerivativeOrders(1),1,0,0,0);checkIndices(c.getPartialDerivativeOrders(2),0,1,0,0);checkIndices(c.getPartialDerivativeOrders(3),0,0,1,0);checkIndices(c.getPartialDerivativeOrders(4),0,0,0,1);}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testIncompatibleParams",0,"@Test(expected=DimensionMismatchException.class)public void testIncompatibleParams(){DSCompiler.getCompiler(3,2).checkCompatibility(DSCompiler.getCompiler(4,2));}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testIncompatibleOrder",0,"@Test(expected=DimensionMismatchException.class)public void testIncompatibleOrder(){DSCompiler.getCompiler(3,3).checkCompatibility(DSCompiler.getCompiler(3,2));}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testSymmetry",0,"@Test public void testSymmetry(){for (int i=0;i < 6;++i){for (int j=0;j < 6;++j){DSCompiler c=DSCompiler.getCompiler(i,j);for (int k=0;k < c.getSize();++k){Assert.assertEquals(k,c.getPartialDerivativeIndex(c.getPartialDerivativeOrders(k)));}}}}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testMultiplicationRules",0,"@Test public void testMultiplicationRules()throws SecurityException,NoSuchFieldException,IllegalArgumentException,IllegalAccessException {Map<String,String> referenceRules=new HashMap<String,String>();referenceRules.put(""(f*g)"",""f * g"");referenceRules.put(""d(f*g)/dx"",""f * dg/dx + df/dx * g"");referenceRules.put(""d(f*g)/dy"",referenceRules.get(""d(f*g)/dx"").replaceAll(""x"",""y""));referenceRules.put(""d(f*g)/dz"",referenceRules.get(""d(f*g)/dx"").replaceAll(""x"",""z""));referenceRules.put(""d(f*g)/dt"",referenceRules.get(""d(f*g)/dx"").replaceAll(""x"",""t""));referenceRules.put(""d2(f*g)/dx2"",""f * d2g/dx2 + 2 * df/dx * dg/dx + d2f/dx2 * g"");referenceRules.put(""d2(f*g)/dy2"",referenceRules.get(""d2(f*g)/dx2"").replaceAll(""x"",""y""));referenceRules.put(""d2(f*g)/dz2"",referenceRules.get(""d2(f*g)/dx2"").replaceAll(""x"",""z""));referenceRules.put(""d2(f*g)/dt2"",referenceRules.get(""d2(f*g)/dx2"").replaceAll(""x"",""t""));referenceRules.put(""d2(f*g)/dxdy"",""f * d2g/dxdy + df/dy * dg/dx + df/dx * dg/dy + d2f/dxdy * g"");referenceRules.put(""d2(f*g)/dxdz"",referenceRules.get(""d2(f*g)/dxdy"").replaceAll(""y"",""z""));referenceRules.put(""d2(f*g)/dxdt"",referenceRules.get(""d2(f*g)/dxdy"").replaceAll(""y"",""t""));referenceRules.put(""d2(f*g)/dydz"",referenceRules.get(""d2(f*g)/dxdz"").replaceAll(""x"",""y""));referenceRules.put(""d2(f*g)/dydt"",referenceRules.get(""d2(f*g)/dxdt"").replaceAll(""x"",""y""));referenceRules.put(""d2(f*g)/dzdt"",referenceRules.get(""d2(f*g)/dxdt"").replaceAll(""x"",""z""));referenceRules.put(""d3(f*g)/dx3"",""f * d3g/dx3 +"" + "" 3 * df/dx * d2g/dx2 +"" + "" 3 * d2f/dx2 * dg/dx +""+ "" d3f/dx3 * g"");referenceRules.put(""d3(f*g)/dy3"",referenceRules.get(""d3(f*g)/dx3"").replaceAll(""x"",""y""));referenceRules.put(""d3(f*g)/dz3"",referenceRules.get(""d3(f*g)/dx3"").replaceAll(""x"",""z""));referenceRules.put(""d3(f*g)/dt3"",referenceRules.get(""d3(f*g)/dx3"").replaceAll(""x"",""t""));referenceRules.put(""d3(f*g)/dx2dy"",""f * d3g/dx2dy +"" + "" df/dy * d2g/dx2 +"" + "" 2 * df/dx * d2g/dxdy +""+ "" 2 * d2f/dxdy * dg/dx +""+ "" d2f/dx2 * dg/dy +""+ "" d3f/dx2dy * g"");referenceRules.put(""d3(f*g)/dxdy2"",""f * d3g/dxdy2 +"" + "" 2 * df/dy * d2g/dxdy +"" + "" d2f/dy2 * dg/dx +""+ "" df/dx * d2g/dy2 +""+ "" 2 * d2f/dxdy * dg/dy +""+ "" d3f/dxdy2 * g"");referenceRules.put(""d3(f*g)/dx2dz"",referenceRules.get(""d3(f*g)/dx2dy"").replaceAll(""y"",""z""));referenceRules.put(""d3(f*g)/dy2dz"",referenceRules.get(""d3(f*g)/dx2dz"").replaceAll(""x"",""y""));referenceRules.put(""d3(f*g)/dxdz2"",referenceRules.get(""d3(f*g)/dxdy2"").replaceAll(""y"",""z""));referenceRules.put(""d3(f*g)/dydz2"",referenceRules.get(""d3(f*g)/dxdz2"").replaceAll(""x"",""y""));referenceRules.put(""d3(f*g)/dx2dt"",referenceRules.get(""d3(f*g)/dx2dz"").replaceAll(""z"",""t""));referenceRules.put(""d3(f*g)/dy2dt"",referenceRules.get(""d3(f*g)/dx2dt"").replaceAll(""x"",""y""));referenceRules.put(""d3(f*g)/dz2dt"",referenceRules.get(""d3(f*g)/dx2dt"").replaceAll(""x"",""z""));referenceRules.put(""d3(f*g)/dxdt2"",referenceRules.get(""d3(f*g)/dxdy2"").replaceAll(""y"",""t""));referenceRules.put(""d3(f*g)/dydt2"",referenceRules.get(""d3(f*g)/dxdt2"").replaceAll(""x"",""y""));referenceRules.put(""d3(f*g)/dzdt2"",referenceRules.get(""d3(f*g)/dxdt2"").replaceAll(""x"",""z""));referenceRules.put(""d3(f*g)/dxdydz"",""f * d3g/dxdydz +"" + "" df/dz * d2g/dxdy +"" + "" df/dy * d2g/dxdz +""+ "" d2f/dydz * dg/dx +""+ "" df/dx * d2g/dydz +""+ "" d2f/dxdz * dg/dy +""+ "" d2f/dxdy * dg/dz +""+ "" d3f/dxdydz * g"");referenceRules.put(""d3(f*g)/dxdydt"",referenceRules.get(""d3(f*g)/dxdydz"").replaceAll(""z"",""t""));referenceRules.put(""d3(f*g)/dxdzdt"",referenceRules.get(""d3(f*g)/dxdydt"").replaceAll(""y"",""z""));referenceRules.put(""d3(f*g)/dydzdt"",referenceRules.get(""d3(f*g)/dxdzdt"").replaceAll(""x"",""y""));Field multFieldArrayField=DSCompiler.class.getDeclaredField(""multIndirection"");multFieldArrayField.setAccessible(true);for (int i=0;i < 5;++i){for (int j=0;j < 4;++j){DSCompiler compiler=DSCompiler.getCompiler(i,j);int[][][]multIndirection=(int[][][])multFieldArrayField.get(compiler);for (int k=0;k < multIndirection.length;++k){String product=ordersToString(compiler.getPartialDerivativeOrders(k),""(f*g)"",""x"",""y"",""z"",""t"");StringBuilder rule=new StringBuilder();for(int[]term : multIndirection[k]){if (rule.length()> 0){rule.append("" + "");}if (term[0]> 1){rule.append(term[0]).append("" * "");}rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[1]),""f"",""x"",""y"",""z"",""t""));rule.append("" * "");rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[2]),""g"",""x"",""y"",""z"",""t""));}Assert.assertEquals(product,referenceRules.get(product),rule.toString());}}}}"
"org.apache.commons.math3.analysis.differentiation.DSCompilerTest.testCompositionRules",0,"@Test public void testCompositionRules()throws SecurityException,NoSuchFieldException,IllegalArgumentException,IllegalAccessException {Map<String,String> referenceRules=new HashMap<String,String>();referenceRules.put(""(f(g))"",""(f(g))"");referenceRules.put(""d(f(g))/dx"",""d(f(g))/dg * dg/dx"");referenceRules.put(""d(f(g))/dy"",referenceRules.get(""d(f(g))/dx"").replaceAll(""x"",""y""));referenceRules.put(""d(f(g))/dz"",referenceRules.get(""d(f(g))/dx"").replaceAll(""x"",""z""));referenceRules.put(""d(f(g))/dt"",referenceRules.get(""d(f(g))/dx"").replaceAll(""x"",""t""));referenceRules.put(""d2(f(g))/dx2"",""d2(f(g))/dg2 * dg/dx * dg/dx + d(f(g))/dg * d2g/dx2"");referenceRules.put(""d2(f(g))/dy2"",referenceRules.get(""d2(f(g))/dx2"").replaceAll(""x"",""y""));referenceRules.put(""d2(f(g))/dz2"",referenceRules.get(""d2(f(g))/dx2"").replaceAll(""x"",""z""));referenceRules.put(""d2(f(g))/dt2"",referenceRules.get(""d2(f(g))/dx2"").replaceAll(""x"",""t""));referenceRules.put(""d2(f(g))/dxdy"",""d2(f(g))/dg2 * dg/dx * dg/dy + d(f(g))/dg * d2g/dxdy"");referenceRules.put(""d2(f(g))/dxdz"",referenceRules.get(""d2(f(g))/dxdy"").replaceAll(""y"",""z""));referenceRules.put(""d2(f(g))/dxdt"",referenceRules.get(""d2(f(g))/dxdy"").replaceAll(""y"",""t""));referenceRules.put(""d2(f(g))/dydz"",referenceRules.get(""d2(f(g))/dxdz"").replaceAll(""x"",""y""));referenceRules.put(""d2(f(g))/dydt"",referenceRules.get(""d2(f(g))/dxdt"").replaceAll(""x"",""y""));referenceRules.put(""d2(f(g))/dzdt"",referenceRules.get(""d2(f(g))/dxdt"").replaceAll(""x"",""z""));referenceRules.put(""d3(f(g))/dx3"",""d3(f(g))/dg3 * dg/dx * dg/dx * dg/dx +"" + "" 3 * d2(f(g))/dg2 * dg/dx * d2g/dx2 +"" + "" d(f(g))/dg * d3g/dx3"");referenceRules.put(""d3(f(g))/dy3"",referenceRules.get(""d3(f(g))/dx3"").replaceAll(""x"",""y""));referenceRules.put(""d3(f(g))/dz3"",referenceRules.get(""d3(f(g))/dx3"").replaceAll(""x"",""z""));referenceRules.put(""d3(f(g))/dt3"",referenceRules.get(""d3(f(g))/dx3"").replaceAll(""x"",""t""));referenceRules.put(""d3(f(g))/dxdy2"",""d3(f(g))/dg3 * dg/dx * dg/dy * dg/dy +"" + "" 2 * d2(f(g))/dg2 * dg/dy * d2g/dxdy +"" + "" d2(f(g))/dg2 * dg/dx * d2g/dy2 +""+ "" d(f(g))/dg * d3g/dxdy2"");referenceRules.put(""d3(f(g))/dxdz2"",referenceRules.get(""d3(f(g))/dxdy2"").replaceAll(""y"",""z""));referenceRules.put(""d3(f(g))/dxdt2"",referenceRules.get(""d3(f(g))/dxdy2"").replaceAll(""y"",""t""));referenceRules.put(""d3(f(g))/dydz2"",referenceRules.get(""d3(f(g))/dxdz2"").replaceAll(""x"",""y""));referenceRules.put(""d3(f(g))/dydt2"",referenceRules.get(""d3(f(g))/dxdt2"").replaceAll(""x"",""y""));referenceRules.put(""d3(f(g))/dzdt2"",referenceRules.get(""d3(f(g))/dxdt2"").replaceAll(""x"",""z""));referenceRules.put(""d3(f(g))/dx2dy"",""d3(f(g))/dg3 * dg/dx * dg/dx * dg/dy +"" + "" 2 * d2(f(g))/dg2 * dg/dx * d2g/dxdy +"" + "" d2(f(g))/dg2 * d2g/dx2 * dg/dy +""+ "" d(f(g))/dg * d3g/dx2dy"");referenceRules.put(""d3(f(g))/dx2dz"",referenceRules.get(""d3(f(g))/dx2dy"").replaceAll(""y"",""z""));referenceRules.put(""d3(f(g))/dx2dt"",referenceRules.get(""d3(f(g))/dx2dy"").replaceAll(""y"",""t""));referenceRules.put(""d3(f(g))/dy2dz"",referenceRules.get(""d3(f(g))/dx2dz"").replaceAll(""x"",""y""));referenceRules.put(""d3(f(g))/dy2dt"",referenceRules.get(""d3(f(g))/dx2dt"").replaceAll(""x"",""y""));referenceRules.put(""d3(f(g))/dz2dt"",referenceRules.get(""d3(f(g))/dx2dt"").replaceAll(""x"",""z""));referenceRules.put(""d3(f(g))/dxdydz"",""d3(f(g))/dg3 * dg/dx * dg/dy * dg/dz +"" + "" d2(f(g))/dg2 * dg/dy * d2g/dxdz +"" + "" d2(f(g))/dg2 * dg/dx * d2g/dydz +""+ "" d2(f(g))/dg2 * d2g/dxdy * dg/dz +""+ "" d(f(g))/dg * d3g/dxdydz"");referenceRules.put(""d3(f(g))/dxdydt"",referenceRules.get(""d3(f(g))/dxdydz"").replaceAll(""z"",""t""));referenceRules.put(""d3(f(g))/dxdzdt"",referenceRules.get(""d3(f(g))/dxdydt"").replaceAll(""y"",""z""));referenceRules.put(""d3(f(g))/dydzdt"",referenceRules.get(""d3(f(g))/dxdzdt"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dx4"",""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dx +"" + "" 6 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dx2 +"" + "" 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dx2 +""+ "" 4 * d2(f(g))/dg2 * dg/dx * d3g/dx3 +""+ "" d(f(g))/dg * d4g/dx4"");referenceRules.put(""d4(f(g))/dy4"",referenceRules.get(""d4(f(g))/dx4"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dz4"",referenceRules.get(""d4(f(g))/dx4"").replaceAll(""x"",""z""));referenceRules.put(""d4(f(g))/dt4"",referenceRules.get(""d4(f(g))/dx4"").replaceAll(""x"",""t""));referenceRules.put(""d4(f(g))/dx3dy"",""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dx * dg/dy +"" + "" 3 * d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dxdy +"" + "" 3 * d3(f(g))/dg3 * dg/dx * d2g/dx2 * dg/dy +""+ "" 3 * d2(f(g))/dg2 * d2g/dx2 * d2g/dxdy +""+ "" 3 * d2(f(g))/dg2 * dg/dx * d3g/dx2dy +""+ "" d2(f(g))/dg2 * d3g/dx3 * dg/dy +""+ "" d(f(g))/dg * d4g/dx3dy"");referenceRules.put(""d4(f(g))/dx3dz"",referenceRules.get(""d4(f(g))/dx3dy"").replaceAll(""y"",""z""));referenceRules.put(""d4(f(g))/dx3dt"",referenceRules.get(""d4(f(g))/dx3dy"").replaceAll(""y"",""t""));referenceRules.put(""d4(f(g))/dxdy3"",""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dy +"" + "" 3 * d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdy +"" + "" 3 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dy2 +""+ "" 3 * d2(f(g))/dg2 * d2g/dxdy * d2g/dy2 +""+ "" 3 * d2(f(g))/dg2 * dg/dy * d3g/dxdy2 +""+ "" d2(f(g))/dg2 * dg/dx * d3g/dy3 +""+ "" d(f(g))/dg * d4g/dxdy3"");referenceRules.put(""d4(f(g))/dxdz3"",referenceRules.get(""d4(f(g))/dxdy3"").replaceAll(""y"",""z""));referenceRules.put(""d4(f(g))/dxdt3"",referenceRules.get(""d4(f(g))/dxdy3"").replaceAll(""y"",""t""));referenceRules.put(""d4(f(g))/dy3dz"",referenceRules.get(""d4(f(g))/dx3dz"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dy3dt"",referenceRules.get(""d4(f(g))/dx3dt"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dydz3"",referenceRules.get(""d4(f(g))/dxdz3"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dydt3"",referenceRules.get(""d4(f(g))/dxdt3"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dz3dt"",referenceRules.get(""d4(f(g))/dx3dt"").replaceAll(""x"",""z""));referenceRules.put(""d4(f(g))/dzdt3"",referenceRules.get(""d4(f(g))/dxdt3"").replaceAll(""x"",""z""));referenceRules.put(""d4(f(g))/dx2dy2"",""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dy +"" + "" 4 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdy +"" + "" d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dy2 +""+ "" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdy +""+ "" 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdy2 +""+ "" d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dy +""+ "" 2 * d2(f(g))/dg2 * dg/dy * d3g/dx2dy +""+ "" d2(f(g))/dg2 * d2g/dx2 * d2g/dy2 +""+ "" d(f(g))/dg * d4g/dx2dy2"");referenceRules.put(""d4(f(g))/dx2dz2"",referenceRules.get(""d4(f(g))/dx2dy2"").replaceAll(""y"",""z""));referenceRules.put(""d4(f(g))/dx2dt2"",referenceRules.get(""d4(f(g))/dx2dy2"").replaceAll(""y"",""t""));referenceRules.put(""d4(f(g))/dy2dz2"",referenceRules.get(""d4(f(g))/dx2dz2"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dy2dt2"",referenceRules.get(""d4(f(g))/dx2dt2"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dz2dt2"",referenceRules.get(""d4(f(g))/dx2dt2"").replaceAll(""x"",""z""));referenceRules.put(""d4(f(g))/dx2dydz"",""d4(f(g))/dg4 * dg/dx * dg/dx * dg/dy * dg/dz +"" + "" 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dxdz +"" + "" d3(f(g))/dg3 * dg/dx * dg/dx * d2g/dydz +""+ "" 2 * d3(f(g))/dg3 * dg/dx * d2g/dxdy * dg/dz +""+ "" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dxdz +""+ "" 2 * d2(f(g))/dg2 * dg/dx * d3g/dxdydz +""+ "" d3(f(g))/dg3 * d2g/dx2 * dg/dy * dg/dz +""+ "" d2(f(g))/dg2 * dg/dy * d3g/dx2dz +""+ "" d2(f(g))/dg2 * d2g/dx2 * d2g/dydz +""+ "" d2(f(g))/dg2 * d3g/dx2dy * dg/dz +""+ "" d(f(g))/dg * d4g/dx2dydz"");referenceRules.put(""d4(f(g))/dx2dydt"",referenceRules.get(""d4(f(g))/dx2dydz"").replaceAll(""z"",""t""));referenceRules.put(""d4(f(g))/dx2dzdt"",referenceRules.get(""d4(f(g))/dx2dydt"").replaceAll(""y"",""z""));referenceRules.put(""d4(f(g))/dxdy2dz"",""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dy * dg/dz +"" + "" d3(f(g))/dg3 * dg/dy * dg/dy * d2g/dxdz +"" + "" 2 * d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dydz +""+ "" 2 * d3(f(g))/dg3 * dg/dy * d2g/dxdy * dg/dz +""+ "" 2 * d2(f(g))/dg2 * d2g/dxdy * d2g/dydz +""+ "" 2 * d2(f(g))/dg2 * dg/dy * d3g/dxdydz +""+ "" d3(f(g))/dg3 * dg/dx * d2g/dy2 * dg/dz +""+ "" d2(f(g))/dg2 * d2g/dy2 * d2g/dxdz +""+ "" d2(f(g))/dg2 * dg/dx * d3g/dy2dz +""+ "" d2(f(g))/dg2 * d3g/dxdy2 * dg/dz +""+ "" d(f(g))/dg * d4g/dxdy2dz"");referenceRules.put(""d4(f(g))/dxdy2dt"",referenceRules.get(""d4(f(g))/dxdy2dz"").replaceAll(""z"",""t""));referenceRules.put(""d4(f(g))/dy2dzdt"",referenceRules.get(""d4(f(g))/dx2dzdt"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dxdydz2"",""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dz +"" + "" 2 * d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdz +"" + "" 2 * d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydz +""+ "" d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dz2 +""+ "" 2 * d2(f(g))/dg2 * d2g/dxdz * d2g/dydz +""+ "" d2(f(g))/dg2 * dg/dy * d3g/dxdz2 +""+ "" d2(f(g))/dg2 * dg/dx * d3g/dydz2 +""+ "" d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dz +""+ "" 2 * d2(f(g))/dg2 * dg/dz * d3g/dxdydz +""+ "" d2(f(g))/dg2 * d2g/dxdy * d2g/dz2 +""+ "" d(f(g))/dg * d4g/dxdydz2"");referenceRules.put(""d4(f(g))/dxdz2dt"",referenceRules.get(""d4(f(g))/dxdy2dt"").replaceAll(""y"",""z""));referenceRules.put(""d4(f(g))/dydz2dt"",referenceRules.get(""d4(f(g))/dxdz2dt"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dxdydt2"",referenceRules.get(""d4(f(g))/dxdydz2"").replaceAll(""z"",""t""));referenceRules.put(""d4(f(g))/dxdzdt2"",referenceRules.get(""d4(f(g))/dxdydt2"").replaceAll(""y"",""z""));referenceRules.put(""d4(f(g))/dydzdt2"",referenceRules.get(""d4(f(g))/dxdzdt2"").replaceAll(""x"",""y""));referenceRules.put(""d4(f(g))/dxdydzdt"",""d4(f(g))/dg4 * dg/dx * dg/dy * dg/dz * dg/dt +"" + "" d3(f(g))/dg3 * dg/dy * dg/dz * d2g/dxdt +"" + "" d3(f(g))/dg3 * dg/dx * dg/dz * d2g/dydt +""+ "" d3(f(g))/dg3 * dg/dx * dg/dy * d2g/dzdt +""+ "" d3(f(g))/dg3 * dg/dy * d2g/dxdz * dg/dt +""+ "" d2(f(g))/dg2 * d2g/dxdz * d2g/dydt +""+ "" d2(f(g))/dg2 * dg/dy * d3g/dxdzdt +""+ "" d3(f(g))/dg3 * dg/dx * d2g/dydz * dg/dt +""+ "" d2(f(g))/dg2 * d2g/dydz * d2g/dxdt +""+ "" d2(f(g))/dg2 * dg/dx * d3g/dydzdt +""+ "" d3(f(g))/dg3 * d2g/dxdy * dg/dz * dg/dt +""+ "" d2(f(g))/dg2 * dg/dz * d3g/dxdydt +""+ "" d2(f(g))/dg2 * d2g/dxdy * d2g/dzdt +""+ "" d2(f(g))/dg2 * d3g/dxdydz * dg/dt +""+ "" d(f(g))/dg * d4g/dxdydzdt"");Field compFieldArrayField=DSCompiler.class.getDeclaredField(""compIndirection"");compFieldArrayField.setAccessible(true);for (int i=0;i < 5;++i){for (int j=0;j < 5;++j){DSCompiler compiler=DSCompiler.getCompiler(i,j);int[][][]compIndirection=(int[][][])compFieldArrayField.get(compiler);for (int k=0;k < compIndirection.length;++k){String product=ordersToString(compiler.getPartialDerivativeOrders(k),""(f(g))"",""x"",""y"",""z"",""t"");StringBuilder rule=new StringBuilder();for(int[]term : compIndirection[k]){if (rule.length()> 0){rule.append("" + "");}if (term[0]> 1){rule.append(term[0]).append("" * "");}rule.append(orderToString(term[1],""(f(g))"",""g""));for (int l=2;l < term.length;++l){rule.append("" * "");rule.append(ordersToString(compiler.getPartialDerivativeOrders(term[l]),""g"",""x"",""y"",""z"",""t""));}}Assert.assertEquals(product,referenceRules.get(product),rule.toString());}}}}"
"org.apache.commons.math3.fraction.FractionTest.testConstructor",0,"@Test public void testConstructor(){assertFraction(0,1,new Fraction(0,1));assertFraction(0,1,new Fraction(0,2));assertFraction(0,1,new Fraction(0,-1));assertFraction(1,2,new Fraction(1,2));assertFraction(1,2,new Fraction(2,4));assertFraction(-1,2,new Fraction(-1,2));assertFraction(-1,2,new Fraction(1,-2));assertFraction(-1,2,new Fraction(-2,4));assertFraction(-1,2,new Fraction(2,-4));try {new Fraction(Integer.MIN_VALUE,-1);Assert.fail();}catch(MathArithmeticException ex){}try {new Fraction(1,Integer.MIN_VALUE);Assert.fail();}catch(MathArithmeticException ex){}assertFraction(0,1,new Fraction(0.00000000000001));assertFraction(2,5,new Fraction(0.40000000000001));assertFraction(15,1,new Fraction(15.0000000000001));}"
"org.apache.commons.math3.fraction.FractionTest.testGoldenRatio",0,"@Test(expected=ConvergenceException.class)public void testGoldenRatio(){new Fraction((1 + FastMath.sqrt(5))/ 2,1.0e-12,25);}"
"org.apache.commons.math3.fraction.FractionTest.testDoubleConstructor",0,"@Test public void testDoubleConstructor()throws ConvergenceException {assertFraction(1,2,new Fraction((double)1 / (double)2));assertFraction(1,3,new Fraction((double)1 / (double)3));assertFraction(2,3,new Fraction((double)2 / (double)3));assertFraction(1,4,new Fraction((double)1 / (double)4));assertFraction(3,4,new Fraction((double)3 / (double)4));assertFraction(1,5,new Fraction((double)1 / (double)5));assertFraction(2,5,new Fraction((double)2 / (double)5));assertFraction(3,5,new Fraction((double)3 / (double)5));assertFraction(4,5,new Fraction((double)4 / (double)5));assertFraction(1,6,new Fraction((double)1 / (double)6));assertFraction(5,6,new Fraction((double)5 / (double)6));assertFraction(1,7,new Fraction((double)1 / (double)7));assertFraction(2,7,new Fraction((double)2 / (double)7));assertFraction(3,7,new Fraction((double)3 / (double)7));assertFraction(4,7,new Fraction((double)4 / (double)7));assertFraction(5,7,new Fraction((double)5 / (double)7));assertFraction(6,7,new Fraction((double)6 / (double)7));assertFraction(1,8,new Fraction((double)1 / (double)8));assertFraction(3,8,new Fraction((double)3 / (double)8));assertFraction(5,8,new Fraction((double)5 / (double)8));assertFraction(7,8,new Fraction((double)7 / (double)8));assertFraction(1,9,new Fraction((double)1 / (double)9));assertFraction(2,9,new Fraction((double)2 / (double)9));assertFraction(4,9,new Fraction((double)4 / (double)9));assertFraction(5,9,new Fraction((double)5 / (double)9));assertFraction(7,9,new Fraction((double)7 / (double)9));assertFraction(8,9,new Fraction((double)8 / (double)9));assertFraction(1,10,new Fraction((double)1 / (double)10));assertFraction(3,10,new Fraction((double)3 / (double)10));assertFraction(7,10,new Fraction((double)7 / (double)10));assertFraction(9,10,new Fraction((double)9 / (double)10));assertFraction(1,11,new Fraction((double)1 / (double)11));assertFraction(2,11,new Fraction((double)2 / (double)11));assertFraction(3,11,new Fraction((double)3 / (double)11));assertFraction(4,11,new Fraction((double)4 / (double)11));assertFraction(5,11,new Fraction((double)5 / (double)11));assertFraction(6,11,new Fraction((double)6 / (double)11));assertFraction(7,11,new Fraction((double)7 / (double)11));assertFraction(8,11,new Fraction((double)8 / (double)11));assertFraction(9,11,new Fraction((double)9 / (double)11));assertFraction(10,11,new Fraction((double)10 / (double)11));}"
"org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor",0,"@Test public void testDigitLimitConstructor()throws ConvergenceException {assertFraction(2,5,new Fraction(0.4,9));assertFraction(2,5,new Fraction(0.4,99));assertFraction(2,5,new Fraction(0.4,999));assertFraction(3,5,new Fraction(0.6152,9));assertFraction(8,13,new Fraction(0.6152,99));assertFraction(510,829,new Fraction(0.6152,999));assertFraction(769,1250,new Fraction(0.6152,9999));}"
"org.apache.commons.math3.fraction.FractionTest.testIntegerOverflow",0,"@Test public void testIntegerOverflow(){checkIntegerOverflow(0.75000000001455192);checkIntegerOverflow(1.0e10);checkIntegerOverflow(-1.0e10);checkIntegerOverflow(-43979.60679604749);}"
"org.apache.commons.math3.fraction.FractionTest.testEpsilonLimitConstructor",0,"@Test public void testEpsilonLimitConstructor()throws ConvergenceException {assertFraction(2,5,new Fraction(0.4,1.0e-5,100));assertFraction(3,5,new Fraction(0.6152,0.02,100));assertFraction(8,13,new Fraction(0.6152,1.0e-3,100));assertFraction(251,408,new Fraction(0.6152,1.0e-4,100));assertFraction(251,408,new Fraction(0.6152,1.0e-5,100));assertFraction(510,829,new Fraction(0.6152,1.0e-6,100));assertFraction(769,1250,new Fraction(0.6152,1.0e-7,100));}"
"org.apache.commons.math3.fraction.FractionTest.testCompareTo",0,"@Test public void testCompareTo(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(1,3);Fraction third=new Fraction(1,2);Assert.assertEquals(0,first.compareTo(first));Assert.assertEquals(0,first.compareTo(third));Assert.assertEquals(1,first.compareTo(second));Assert.assertEquals(-1,second.compareTo(first));Fraction pi1=new Fraction(1068966896,340262731);Fraction pi2=new Fraction(411557987,131002976);Assert.assertEquals(-1,pi1.compareTo(pi2));Assert.assertEquals(1,pi2.compareTo(pi1));Assert.assertEquals(0.0,pi1.doubleValue()- pi2.doubleValue(),1.0e-20);}"
"org.apache.commons.math3.fraction.FractionTest.testDoubleValue",0,"@Test public void testDoubleValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(1,3);Assert.assertEquals(0.5,first.doubleValue(),0.0);Assert.assertEquals(1.0 / 3.0,second.doubleValue(),0.0);}"
"org.apache.commons.math3.fraction.FractionTest.testFloatValue",0,"@Test public void testFloatValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(1,3);Assert.assertEquals(0.5f,first.floatValue(),0.0f);Assert.assertEquals((float)(1.0 / 3.0),second.floatValue(),0.0f);}"
"org.apache.commons.math3.fraction.FractionTest.testIntValue",0,"@Test public void testIntValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(3,2);Assert.assertEquals(0,first.intValue());Assert.assertEquals(1,second.intValue());}"
"org.apache.commons.math3.fraction.FractionTest.testLongValue",0,"@Test public void testLongValue(){Fraction first=new Fraction(1,2);Fraction second=new Fraction(3,2);Assert.assertEquals(0L,first.longValue());Assert.assertEquals(1L,second.longValue());}"
"org.apache.commons.math3.fraction.FractionTest.testConstructorDouble",0,"@Test public void testConstructorDouble(){assertFraction(1,2,new Fraction(0.5));assertFraction(1,3,new Fraction(1.0 / 3.0));assertFraction(17,100,new Fraction(17.0 / 100.0));assertFraction(317,100,new Fraction(317.0 / 100.0));assertFraction(-1,2,new Fraction(-0.5));assertFraction(-1,3,new Fraction(-1.0 / 3.0));assertFraction(-17,100,new Fraction(17.0 / -100.0));assertFraction(-317,100,new Fraction(-317.0 / 100.0));}"
"org.apache.commons.math3.fraction.FractionTest.testAbs",0,"@Test public void testAbs(){Fraction a=new Fraction(10,21);Fraction b=new Fraction(-10,21);Fraction c=new Fraction(10,-21);assertFraction(10,21,a.abs());assertFraction(10,21,b.abs());assertFraction(10,21,c.abs());}"
"org.apache.commons.math3.fraction.FractionTest.testPercentage",0,"@Test public void testPercentage(){Assert.assertEquals(50.0,new Fraction(1,2).percentageValue(),1.0e-15);}"
"org.apache.commons.math3.fraction.FractionTest.testMath835",0,"@Test public void testMath835(){final int numer=Integer.MAX_VALUE / 99;final int denom=1;final double percentage=100 * ((double)numer)/ denom;final Fraction frac=new Fraction(numer,denom);Assert.assertEquals(percentage,frac.percentageValue(),Math.ulp(percentage));}"
"org.apache.commons.math3.fraction.FractionTest.testReciprocal",0,"@Test public void testReciprocal(){Fraction f=null;f=new Fraction(50,75);f=f.reciprocal();Assert.assertEquals(3,f.getNumerator());Assert.assertEquals(2,f.getDenominator());f=new Fraction(4,3);f=f.reciprocal();Assert.assertEquals(3,f.getNumerator());Assert.assertEquals(4,f.getDenominator());f=new Fraction(-15,47);f=f.reciprocal();Assert.assertEquals(-47,f.getNumerator());Assert.assertEquals(15,f.getDenominator());f=new Fraction(0,3);try {f=f.reciprocal();Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f=new Fraction(Integer.MAX_VALUE,1);f=f.reciprocal();Assert.assertEquals(1,f.getNumerator());Assert.assertEquals(Integer.MAX_VALUE,f.getDenominator());}"
"org.apache.commons.math3.fraction.FractionTest.testNegate",0,"@Test public void testNegate(){Fraction f=null;f=new Fraction(50,75);f=f.negate();Assert.assertEquals(-2,f.getNumerator());Assert.assertEquals(3,f.getDenominator());f=new Fraction(-50,75);f=f.negate();Assert.assertEquals(2,f.getNumerator());Assert.assertEquals(3,f.getDenominator());f=new Fraction(Integer.MAX_VALUE - 1,Integer.MAX_VALUE);f=f.negate();Assert.assertEquals(Integer.MIN_VALUE + 2,f.getNumerator());Assert.assertEquals(Integer.MAX_VALUE,f.getDenominator());f=new Fraction(Integer.MIN_VALUE,1);try {f=f.negate();Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}}"
"org.apache.commons.math3.fraction.FractionTest.testAdd",0,"@Test public void testAdd(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(1,1,a.add(a));assertFraction(7,6,a.add(b));assertFraction(7,6,b.add(a));assertFraction(4,3,b.add(b));Fraction f1=new Fraction(Integer.MAX_VALUE - 1,1);Fraction f2=Fraction.ONE;Fraction f=f1.add(f2);Assert.assertEquals(Integer.MAX_VALUE,f.getNumerator());Assert.assertEquals(1,f.getDenominator());f=f1.add(1);Assert.assertEquals(Integer.MAX_VALUE,f.getNumerator());Assert.assertEquals(1,f.getDenominator());f1=new Fraction(-1,13 * 13 * 2* 2);f2=new Fraction(-2,13 * 17 * 2);f=f1.add(f2);Assert.assertEquals(13 * 13 * 17* 2* 2,f.getDenominator());Assert.assertEquals(-17 - 2 * 13 * 2,f.getNumerator());try {f.add(null);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}f1=new Fraction(1,32768 * 3);f2=new Fraction(1,59049);f=f1.add(f2);Assert.assertEquals(52451,f.getNumerator());Assert.assertEquals(1934917632,f.getDenominator());f1=new Fraction(Integer.MIN_VALUE,3);f2=new Fraction(1,3);f=f1.add(f2);Assert.assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());Assert.assertEquals(3,f.getDenominator());f1=new Fraction(Integer.MAX_VALUE - 1,1);f2=Fraction.ONE;f=f1.add(f2);Assert.assertEquals(Integer.MAX_VALUE,f.getNumerator());Assert.assertEquals(1,f.getDenominator());try {f=f.add(Fraction.ONE);Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());}catch(MathArithmeticException ex){}f1=new Fraction(Integer.MIN_VALUE,5);f2=new Fraction(-1,5);try {f=f1.add(f2);Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());}catch(MathArithmeticException ex){}try {f=new Fraction(-Integer.MAX_VALUE,1);f=f.add(f);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {f=new Fraction(-Integer.MAX_VALUE,1);f=f.add(f);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f1=new Fraction(3,327680);f2=new Fraction(2,59049);try {f=f1.add(f2);Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());}catch(MathArithmeticException ex){}}"
"org.apache.commons.math3.fraction.FractionTest.testDivide",0,"@Test public void testDivide(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(1,1,a.divide(a));assertFraction(3,4,a.divide(b));assertFraction(4,3,b.divide(a));assertFraction(1,1,b.divide(b));Fraction f1=new Fraction(3,5);Fraction f2=Fraction.ZERO;try {f1.divide(f2);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f1=new Fraction(0,5);f2=new Fraction(2,7);Fraction f=f1.divide(f2);Assert.assertSame(Fraction.ZERO,f);f1=new Fraction(2,7);f2=Fraction.ONE;f=f1.divide(f2);Assert.assertEquals(2,f.getNumerator());Assert.assertEquals(7,f.getDenominator());f1=new Fraction(1,Integer.MAX_VALUE);f=f1.divide(f1);Assert.assertEquals(1,f.getNumerator());Assert.assertEquals(1,f.getDenominator());f1=new Fraction(Integer.MIN_VALUE,Integer.MAX_VALUE);f2=new Fraction(1,Integer.MAX_VALUE);f=f1.divide(f2);Assert.assertEquals(Integer.MIN_VALUE,f.getNumerator());Assert.assertEquals(1,f.getDenominator());try {f.divide(null);Assert.fail(""MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {f1=new Fraction(1,Integer.MAX_VALUE);f=f1.divide(f1.reciprocal());Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {f1=new Fraction(1,-Integer.MAX_VALUE);f=f1.divide(f1.reciprocal());Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f1=new Fraction(6,35);f=f1.divide(15);Assert.assertEquals(2,f.getNumerator());Assert.assertEquals(175,f.getDenominator());}"
"org.apache.commons.math3.fraction.FractionTest.testMultiply",0,"@Test public void testMultiply(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(1,4,a.multiply(a));assertFraction(1,3,a.multiply(b));assertFraction(1,3,b.multiply(a));assertFraction(4,9,b.multiply(b));Fraction f1=new Fraction(Integer.MAX_VALUE,1);Fraction f2=new Fraction(Integer.MIN_VALUE,Integer.MAX_VALUE);Fraction f=f1.multiply(f2);Assert.assertEquals(Integer.MIN_VALUE,f.getNumerator());Assert.assertEquals(1,f.getDenominator());try {f.multiply(null);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}f1=new Fraction(6,35);f=f1.multiply(15);Assert.assertEquals(18,f.getNumerator());Assert.assertEquals(7,f.getDenominator());}"
"org.apache.commons.math3.fraction.FractionTest.testSubtract",0,"@Test public void testSubtract(){Fraction a=new Fraction(1,2);Fraction b=new Fraction(2,3);assertFraction(0,1,a.subtract(a));assertFraction(-1,6,a.subtract(b));assertFraction(1,6,b.subtract(a));assertFraction(0,1,b.subtract(b));Fraction f=new Fraction(1,1);try {f.subtract(null);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}Fraction f1=new Fraction(1,32768 * 3);Fraction f2=new Fraction(1,59049);f=f1.subtract(f2);Assert.assertEquals(-13085,f.getNumerator());Assert.assertEquals(1934917632,f.getDenominator());f1=new Fraction(Integer.MIN_VALUE,3);f2=new Fraction(1,3).negate();f=f1.subtract(f2);Assert.assertEquals(Integer.MIN_VALUE + 1,f.getNumerator());Assert.assertEquals(3,f.getDenominator());f1=new Fraction(Integer.MAX_VALUE,1);f2=Fraction.ONE;f=f1.subtract(f2);Assert.assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());Assert.assertEquals(1,f.getDenominator());f=f1.subtract(1);Assert.assertEquals(Integer.MAX_VALUE - 1,f.getNumerator());Assert.assertEquals(1,f.getDenominator());try {f1=new Fraction(1,Integer.MAX_VALUE);f2=new Fraction(1,Integer.MAX_VALUE - 1);f=f1.subtract(f2);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f1=new Fraction(Integer.MIN_VALUE,5);f2=new Fraction(1,5);try {f=f1.subtract(f2);Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());}catch(MathArithmeticException ex){}try {f=new Fraction(Integer.MIN_VALUE,1);f=f.subtract(Fraction.ONE);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {f=new Fraction(Integer.MAX_VALUE,1);f=f.subtract(Fraction.ONE.negate());Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}f1=new Fraction(3,327680);f2=new Fraction(2,59049);try {f=f1.subtract(f2);Assert.fail(""expecting MathArithmeticException but got: "" + f.toString());}catch(MathArithmeticException ex){}}"
"org.apache.commons.math3.fraction.FractionTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){Fraction zero=new Fraction(0,1);Fraction nullFraction=null;Assert.assertTrue(zero.equals(zero));Assert.assertFalse(zero.equals(nullFraction));Assert.assertFalse(zero.equals(Double.valueOf(0)));Fraction zero2=new Fraction(0,2);Assert.assertTrue(zero.equals(zero2));Assert.assertEquals(zero.hashCode(),zero2.hashCode());Fraction one=new Fraction(1,1);Assert.assertFalse((one.equals(zero)|| zero.equals(one)));}"
"org.apache.commons.math3.fraction.FractionTest.testGetReducedFraction",0,"@Test public void testGetReducedFraction(){Fraction threeFourths=new Fraction(3,4);Assert.assertTrue(threeFourths.equals(Fraction.getReducedFraction(6,8)));Assert.assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0,-1)));try {Fraction.getReducedFraction(1,0);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}Assert.assertEquals(Fraction.getReducedFraction(2,Integer.MIN_VALUE).getNumerator(),-1);Assert.assertEquals(Fraction.getReducedFraction(1,-1).getNumerator(),-1);}"
"org.apache.commons.math3.fraction.FractionTest.testToString",0,"@Test public void testToString(){Assert.assertEquals(""0"",new Fraction(0,3).toString());Assert.assertEquals(""3"",new Fraction(6,2).toString());Assert.assertEquals(""2 / 3"",new Fraction(18,27).toString());}"
"org.apache.commons.math3.fraction.FractionTest.testSerial",0,"@Test public void testSerial()throws FractionConversionException {Fraction[]fractions={new Fraction(3,4),Fraction.ONE,Fraction.ZERO,new Fraction(17),new Fraction(FastMath.PI,1000),new Fraction(-5,2)};for(Fraction fraction : fractions){Assert.assertEquals(fraction,TestUtils.serializeAndRecover(fraction));}}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;ThreeEighthesIntegrator integ=new ThreeEighthesIntegrator(step);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;ThreeEighthesIntegrator integ=new ThreeEighthesIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 880000);Assert.assertTrue(bos.size()< 900000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError > 0.005);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackLinearFullRank",0,"@Test public void testMinpackLinearFullRank(){minpackTest(new LinearFullRankFunction(10,5,1.0,5.0,2.23606797749979),false);minpackTest(new LinearFullRankFunction(50,5,1.0,8.06225774829855,6.70820393249937),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackLinearRank1",0,"@Test public void testMinpackLinearRank1(){minpackTest(new LinearRank1Function(10,5,1.0,291.521868819476,1.4638501094228),false);minpackTest(new LinearRank1Function(50,5,1.0,3101.60039334535,3.48263016573496),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackLinearRank1ZeroColsAndRows",0,"@Test public void testMinpackLinearRank1ZeroColsAndRows(){minpackTest(new LinearRank1ZeroColsAndRowsFunction(10,5,1.0),false);minpackTest(new LinearRank1ZeroColsAndRowsFunction(50,5,1.0),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackRosenbrok",0,"@Test public void testMinpackRosenbrok(){minpackTest(new RosenbrockFunction(new double[]{-1.2,1.0},FastMath.sqrt(24.2)),false);minpackTest(new RosenbrockFunction(new double[]{-12.0,10.0},FastMath.sqrt(1795769.0)),false);minpackTest(new RosenbrockFunction(new double[]{-120.0,100.0},11.0 * FastMath.sqrt(169000121.0)),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackHelicalValley",0,"@Test public void testMinpackHelicalValley(){minpackTest(new HelicalValleyFunction(new double[]{-1.0,0.0,0.0},50.0),false);minpackTest(new HelicalValleyFunction(new double[]{-10.0,0.0,0.0},102.95630140987),false);minpackTest(new HelicalValleyFunction(new double[]{-100.0,0.0,0.0},991.261822123701),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackPowellSingular",0,"@Test public void testMinpackPowellSingular(){minpackTest(new PowellSingularFunction(new double[]{3.0,-1.0,0.0,1.0},14.6628782986152),false);minpackTest(new PowellSingularFunction(new double[]{30.0,-10.0,0.0,10.0},1270.9838708654),false);minpackTest(new PowellSingularFunction(new double[]{300.0,-100.0,0.0,100.0},126887.903284750),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackFreudensteinRoth",0,"@Test public void testMinpackFreudensteinRoth(){minpackTest(new FreudensteinRothFunction(new double[]{0.5,-2.0},20.0124960961895,6.99887517584575,new double[]{11.4124844654993,-0.896827913731509}),false);minpackTest(new FreudensteinRothFunction(new double[]{5.0,-20.0},12432.833948863,6.9988751744895,new double[]{11.41300466147456,-0.896796038685959}),false);minpackTest(new FreudensteinRothFunction(new double[]{50.0,-200.0},11426454.595762,6.99887517242903,new double[]{11.412781785788564,-0.8968051074920405}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackBard",0,"@Test public void testMinpackBard(){minpackTest(new BardFunction(1.0,6.45613629515967,0.0906359603390466,new double[]{0.0824105765758334,1.1330366534715,2.34369463894115}),false);minpackTest(new BardFunction(10.0,36.1418531596785,4.17476870138539,new double[]{0.840666673818329,-158848033.259565,-164378671.653535}),false);minpackTest(new BardFunction(100.0,384.114678637399,4.17476870135969,new double[]{0.840666673867645,-158946167.205518,-164464906.857771}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackKowalikOsborne",0,"@Test public void testMinpackKowalikOsborne(){minpackTest(new KowalikOsborneFunction(new double[]{0.25,0.39,0.415,0.39},0.0728915102882945,0.017535837721129,new double[]{0.192807810476249,0.191262653354071,0.123052801046931,0.136053221150517}),false);minpackTest(new KowalikOsborneFunction(new double[]{2.5,3.9,4.15,3.9},2.97937007555202,0.032052192917937,new double[]{728675.473768287,-14.0758803129393,-32977797.7841797,-20571594.1977912}),false);minpackTest(new KowalikOsborneFunction(new double[]{25.0,39.0,41.5,39.0},29.9590617016037,0.0175364017658228,new double[]{0.192948328597594,0.188053165007911,0.122430604321144,0.134575665392506}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackMeyer",0,"@Test public void testMinpackMeyer(){minpackTest(new MeyerFunction(new double[]{0.02,4000.0,250.0},41153.4665543031,9.37794514651874,new double[]{0.00560963647102661,6181.34634628659,345.223634624144}),false);minpackTest(new MeyerFunction(new double[]{0.2,40000.0,2500.0},4168216.89130846,792.917871779501,new double[]{1.42367074157994e-11,33695.7133432541,901.268527953801}),true);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackWatson",0,"@Test public void testMinpackWatson(){minpackTest(new WatsonFunction(6,0.0,5.47722557505166,0.0478295939097601,new double[]{-0.0157249615083782,1.01243488232965,-0.232991722387673,1.26043101102818,-1.51373031394421,0.99299727291842}),false);minpackTest(new WatsonFunction(6,10.0,6433.12578950026,0.0478295939096951,new double[]{-0.0157251901386677,1.01243485860105,-0.232991545843829,1.26042932089163,-1.51372776706575,0.99299573426328}),false);minpackTest(new WatsonFunction(6,100.0,674256.040605213,0.047829593911544,new double[]{-0.0157247019712586,1.01243490925658,-0.232991922761641,1.26043292929555,-1.51373320452707,0.99299901922322}),false);minpackTest(new WatsonFunction(9,0.0,5.47722557505166,0.00118311459212420,new double[]{-0.153070644166722e-4,0.999789703934597,0.0147639634910978,0.146342330145992,1.00082109454817,-2.61773112070507,4.10440313943354,-3.14361226236241,1.05262640378759}),false);minpackTest(new WatsonFunction(9,10.0,12088.127069307,0.00118311459212513,new double[]{-0.153071334849279e-4,0.999789703941234,0.0147639629786217,0.146342334818836,1.00082107321386,-2.61773107084722,4.10440307655564,-3.14361222178686,1.05262639322589}),false);minpackTest(new WatsonFunction(9,100.0,1269109.29043834,0.00118311459212384,new double[]{-0.153069523352176e-4,0.999789703958371,0.0147639625185392,0.146342341096326,1.00082104729164,-2.61773101573645,4.10440301427286,-3.14361218602503,1.05262638516774}),false);minpackTest(new WatsonFunction(12,0.0,5.47722557505166,0.217310402535861e-4,new double[]{-0.660266001396382e-8,1.00000164411833,-0.000563932146980154,0.347820540050756,-0.156731500244233,1.05281515825593,-3.24727109519451,7.2884347837505,-10.271848098614,9.07411353715783,-4.54137541918194,1.01201187975044}),false);minpackTest(new WatsonFunction(12,10.0,19220.7589790951,0.217310402518509e-4,new double[]{-0.663710223017410e-8,1.00000164411787,-0.000563932208347327,0.347820540486998,-0.156731503955652,1.05281517654573,-3.2472711515214,7.28843489430665,-10.2718482369638,9.07411364383733,-4.54137546533666,1.01201188830857}),false);minpackTest(new WatsonFunction(12,100.0,2018918.04462367,0.217310402539845e-4,new double[]{-0.663806046485249e-8,1.00000164411786,-0.000563932210324959,0.347820540503588,-0.156731504091375,1.05281517718031,-3.24727115337025,7.28843489775302,-10.2718482410813,9.07411364688464,-4.54137546660822,1.0120118885369}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackBox3Dimensional",0,"@Test public void testMinpackBox3Dimensional(){minpackTest(new Box3DimensionalFunction(10,new double[]{0.0,10.0,20.0},32.1115837449572),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackJennrichSampson",0,"@Test public void testMinpackJennrichSampson(){minpackTest(new JennrichSampsonFunction(10,new double[]{0.3,0.4},64.5856498144943,11.1517793413499,new double[]{0.2578199266368004,0.25782997676455244}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackBrownDennis",0,"@Test public void testMinpackBrownDennis(){minpackTest(new BrownDennisFunction(20,new double[]{25.0,5.0,-5.0,-1.0},2815.43839161816,292.954288244866,new double[]{-11.59125141003,13.2024883984741,-0.403574643314272,0.236736269844604}),false);minpackTest(new BrownDennisFunction(20,new double[]{250.0,50.0,-50.0,-10.0},555073.354173069,292.954270581415,new double[]{-11.5959274272203,13.2041866926242,-0.403417362841545,0.236771143410386}),false);minpackTest(new BrownDennisFunction(20,new double[]{2500.0,500.0,-500.0,-100.0},61211252.2338581,292.954306151134,new double[]{-11.5902596937374,13.2020628854665,-0.403688070279258,0.236665033746463}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackChebyquad",0,"@Test public void testMinpackChebyquad(){minpackTest(new ChebyquadFunction(1,8,1.0,1.88623796907732,1.88623796907732,new double[]{0.5}),false);minpackTest(new ChebyquadFunction(1,8,10.0,5383344372.34005,1.88424820499951,new double[]{0.9817314924684}),false);minpackTest(new ChebyquadFunction(1,8,100.0,0.118088726698392e19,1.88424820499347,new double[]{0.9817314852934}),false);minpackTest(new ChebyquadFunction(8,8,1.0,0.196513862833975,0.0593032355046727,new double[]{0.0431536648587336,0.193091637843267,0.266328593812698,0.499999334628884,0.500000665371116,0.733671406187302,0.806908362156733,0.956846335141266}),false);minpackTest(new ChebyquadFunction(9,9,1.0,0.16994993465202,0.0,new double[]{0.0442053461357828,0.199490672309881,0.23561910847106,0.416046907892598,0.5,0.583953092107402,0.764380891528940,0.800509327690119,0.955794653864217}),false);minpackTest(new ChebyquadFunction(10,10,1.0,0.183747831178711,0.0806471004038253,new double[]{0.0596202671753563,0.166708783805937,0.239171018813509,0.398885290346268,0.398883667870681,0.601116332129320,0.60111470965373,0.760828981186491,0.833291216194063,0.940379732824644}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackBrownAlmostLinear",0,"@Test public void testMinpackBrownAlmostLinear(){minpackTest(new BrownAlmostLinearFunction(10,0.5,16.5302162063499,0.0,new double[]{0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,1.20569696650138}),false);minpackTest(new BrownAlmostLinearFunction(10,5.0,9765624.00089211,0.0,new double[]{0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,1.20569696650135}),false);minpackTest(new BrownAlmostLinearFunction(10,50.0,0.9765625e17,0.0,new double[]{1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0}),false);minpackTest(new BrownAlmostLinearFunction(30,0.5,83.476044467848,0.0,new double[]{}),false);minpackTest(new BrownAlmostLinearFunction(40,0.5,128.026364472323,0.0,new double[]{}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackOsborne1",0,"@Test public void testMinpackOsborne1(){minpackTest(new Osborne1Function(new double[]{0.5,1.5,-1.0,0.01,0.02},0.937564021037838,0.00739249260904843,new double[]{0.375410049244025,1.93584654543108,-1.46468676748716,0.0128675339110439,0.0221227011813076}),false);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest.testMinpackOsborne2",0,"@Test public void testMinpackOsborne2(){minpackTest(new Osborne2Function(new double[]{1.3,0.65,0.65,0.7,0.6,3.0,5.0,7.0,2.0,4.5,5.5},1.44686540984712,0.20034404483314,new double[]{1.30997663810096,0.43155248076,0.633661261602859,0.599428560991695,0.754179768272449,0.904300082378518,1.36579949521007,4.82373199748107,2.39868475104871,4.56887554791452,5.67534206273052}),false);}"
"org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest.testSine",0,"@Test public void testSine(){final int n=30;final double[]xval=new double[n];final double[]yval=new double[n];final double period=12.3;final double offset=45.67;double delta=0;for (int i=0;i < n;i++){delta+=rng.nextDouble()* period / n;xval[i]=offset + delta;yval[i]=FastMath.sin(xval[i]);}final UnivariateInterpolator inter=new LinearInterpolator();final UnivariateFunction f=inter.interpolate(xval,yval);final UnivariateInterpolator interP=new UnivariatePeriodicInterpolator(new LinearInterpolator(),period,1);final UnivariateFunction fP=interP.interpolate(xval,yval);final double xMin=xval[0];final double xMax=xval[n - 1];for (int i=0;i < n;i++){final double x=xMin + (xMax - xMin)* rng.nextDouble();final double y=f.value(x);final double yP=fP.value(x);Assert.assertEquals(""x="" + x,y,yP,Math.ulp(1d));}for (int i=0;i < n;i++){final double xIn=offset + rng.nextDouble()* period;final double xOut=xIn + rng.nextInt(123456789)* period;final double yIn=fP.value(xIn);final double yOut=fP.value(xOut);Assert.assertEquals(yIn,yOut,1e-7);}}"
"org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest.testLessThanOnePeriodCoverage",0,"@Test public void testLessThanOnePeriodCoverage(){final int n=30;final double[]xval=new double[n];final double[]yval=new double[n];final double period=12.3;final double offset=45.67;double delta=period / 2;for (int i=0;i < n;i++){delta+=period / (2 * n)* rng.nextDouble();xval[i]=offset + delta;yval[i]=FastMath.sin(xval[i]);}final UnivariateInterpolator interP=new UnivariatePeriodicInterpolator(new LinearInterpolator(),period,1);final UnivariateFunction fP=interP.interpolate(xval,yval);for (int i=0;i < n;i++){final double xIn=offset + rng.nextDouble()* period;final double xOut=xIn + rng.nextInt(123456789)* period;final double yIn=fP.value(xIn);final double yOut=fP.value(xOut);Assert.assertEquals(yIn,yOut,1e-7);}}"
"org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest.testMoreThanOnePeriodCoverage",0,"@Test public void testMoreThanOnePeriodCoverage(){final int n=30;final double[]xval=new double[n];final double[]yval=new double[n];final double period=12.3;final double offset=45.67;double delta=period / 2;for (int i=0;i < n;i++){delta+=10 * period / n * rng.nextDouble();xval[i]=offset + delta;yval[i]=FastMath.sin(xval[i]);}final UnivariateInterpolator interP=new UnivariatePeriodicInterpolator(new LinearInterpolator(),period,1);final UnivariateFunction fP=interP.interpolate(xval,yval);for (int i=0;i < n;i++){final double xIn=offset + rng.nextDouble()* period;final double xOut=xIn + rng.nextInt(123456789)* period;final double yIn=fP.value(xIn);final double yOut=fP.value(xOut);Assert.assertEquals(yIn,yOut,1e-6);}}"
"org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest.testTooFewSamples",0,"@Test(expected=NumberIsTooSmallException.class)public void testTooFewSamples(){final double[]xval={2,3,7};final double[]yval={1,6,5};final double period=10;final UnivariateInterpolator interpolator=new UnivariatePeriodicInterpolator(new LinearInterpolator(),period);interpolator.interpolate(xval,yval);}"
"org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolatorTest.testUnsortedSamples",0,"@Test(expected=NonMonotonicSequenceException.class)public void testUnsortedSamples(){final double[]xval={2,3,7,4,6};final double[]yval={1,6,5,-1,-2};final double period=10;final UnivariateInterpolator interpolator=new UnivariatePeriodicInterpolator(new LinearInterpolator(),period);interpolator.interpolate(xval,yval);}"
"org.apache.commons.math3.transform.FastSineTransformerTest.testTransformRealFirstElementNotZero",0,"@Test public void testTransformRealFirstElementNotZero(){final TransformType[]type=TransformType.values();final double[]data=new double[]{1.0,1.0,1.0,1.0};final RealTransformer transformer=createRealTransformer();for (int j=0;j < type.length;j++){try {transformer.transform(data,type[j]);Assert.fail(type[j].toString());}catch(MathIllegalArgumentException e){}}}"
"org.apache.commons.math3.transform.FastSineTransformerTest.testAdHocData",0,"/** * Test of transformer for the ad hoc data.*/@Test public void testAdHocData(){FastSineTransformer transformer;transformer=new FastSineTransformer(DstNormalization.STANDARD_DST_I);double result[],tolerance=1E-12;double x[]={0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0};double y[]={0.0,20.1093579685034,-9.65685424949238,5.98642305066196,-4.0,2.67271455167720,-1.65685424949238,0.795649469518633};result=transformer.transform(x,TransformType.FORWARD);for (int i=0;i < result.length;i++){Assert.assertEquals(y[i],result[i],tolerance);}result=transformer.transform(y,TransformType.INVERSE);for (int i=0;i < result.length;i++){Assert.assertEquals(x[i],result[i],tolerance);}TransformUtils.scaleArray(x,FastMath.sqrt(x.length / 2.0));transformer=new FastSineTransformer(DstNormalization.ORTHOGONAL_DST_I);result=transformer.transform(y,TransformType.FORWARD);for (int i=0;i < result.length;i++){Assert.assertEquals(x[i],result[i],tolerance);}result=transformer.transform(x,TransformType.INVERSE);for (int i=0;i < result.length;i++){Assert.assertEquals(y[i],result[i],tolerance);}}"
"org.apache.commons.math3.transform.FastSineTransformerTest.testSinFunction",0,"/** * Test of transformer for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();FastSineTransformer transformer;transformer=new FastSineTransformer(DstNormalization.STANDARD_DST_I);double min,max,result[],tolerance=1E-12;int N=1 << 8;min=0.0;max=2.0 * FastMath.PI;result=transformer.transform(f,min,max,N,TransformType.FORWARD);Assert.assertEquals(N >> 1,result[2],tolerance);for (int i=0;i < N;i+=(i == 1 ? 2 : 1)){Assert.assertEquals(0.0,result[i],tolerance);}min=-FastMath.PI;max=FastMath.PI;result=transformer.transform(f,min,max,N,TransformType.FORWARD);Assert.assertEquals(-(N >> 1),result[2],tolerance);for (int i=0;i < N;i+=(i == 1 ? 2 : 1)){Assert.assertEquals(0.0,result[i],tolerance);}}"
"org.apache.commons.math3.transform.FastSineTransformerTest.testParameters",0,"/** * Test of parameters for the transformer.*/@Test public void testParameters()throws Exception {UnivariateFunction f=new Sin();FastSineTransformer transformer;transformer=new FastSineTransformer(DstNormalization.STANDARD_DST_I);try {transformer.transform(f,1,-1,64,TransformType.FORWARD);Assert.fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,0,TransformType.FORWARD);Assert.fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,100,TransformType.FORWARD);Assert.fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.optimization.univariate.BracketFinderTest.testCubicMin",0,"@Test public void testCubicMin(){final BracketFinder bFind=new BracketFinder();final UnivariateFunction func=new UnivariateFunction(){public double value(double x){if (x < -2){return value(-2);}else {return (x - 1)* (x + 2)* (x + 3);}}};bFind.search(func,GoalType.MINIMIZE,-2,-1);final double tol=1e-15;Assert.assertEquals(-2,bFind.getLo(),tol);Assert.assertEquals(-1,bFind.getMid(),tol);Assert.assertEquals(0.61803399999999997,bFind.getHi(),tol);}"
"org.apache.commons.math3.optimization.univariate.BracketFinderTest.testCubicMax",0,"@Test public void testCubicMax(){final BracketFinder bFind=new BracketFinder();final UnivariateFunction func=new UnivariateFunction(){public double value(double x){if (x < -2){return value(-2);}else {return -(x - 1)* (x + 2)* (x + 3);}}};bFind.search(func,GoalType.MAXIMIZE,-2,-1);final double tol=1e-15;Assert.assertEquals(-2,bFind.getLo(),tol);Assert.assertEquals(-1,bFind.getMid(),tol);Assert.assertEquals(0.61803399999999997,bFind.getHi(),tol);}"
"org.apache.commons.math3.optimization.univariate.BracketFinderTest.testMinimumIsOnIntervalBoundary",0,"@Test public void testMinimumIsOnIntervalBoundary(){final UnivariateFunction func=new UnivariateFunction(){public double value(double x){return x * x;}};final BracketFinder bFind=new BracketFinder();bFind.search(func,GoalType.MINIMIZE,0,1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,-1,0);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());}"
"org.apache.commons.math3.optimization.univariate.BracketFinderTest.testIntervalBoundsOrdering",0,"@Test public void testIntervalBoundsOrdering(){final UnivariateFunction func=new UnivariateFunction(){public double value(double x){return x * x;}};final BracketFinder bFind=new BracketFinder();bFind.search(func,GoalType.MINIMIZE,-1,1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,1,-1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,1,2);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,2,1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());}"
"org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilityExtremes",0,"@Test public void testCumulativeProbabilityExtremes(){setCumulativeTestPoints(new double[]{-2,0});setCumulativeTestValues(new double[]{0,0});verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.FDistributionTest.testDfAccessors",0,"@Test public void testDfAccessors(){FDistribution dist=(FDistribution)getDistribution();Assert.assertEquals(5d,dist.getNumeratorDegreesOfFreedom(),Double.MIN_VALUE);Assert.assertEquals(6d,dist.getDenominatorDegreesOfFreedom(),Double.MIN_VALUE);}"
"org.apache.commons.math3.distribution.FDistributionTest.testPreconditions",0,"@Test public void testPreconditions(){try {new FDistribution(0,1);Assert.fail(""Expecting NotStrictlyPositiveException for df = 0"");}catch(NotStrictlyPositiveException ex){}try {new FDistribution(1,0);Assert.fail(""Expecting NotStrictlyPositiveException for df = 0"");}catch(NotStrictlyPositiveException ex){}}"
"org.apache.commons.math3.distribution.FDistributionTest.testLargeDegreesOfFreedom",0,"@Test public void testLargeDegreesOfFreedom(){FDistribution fd=new FDistribution(100000,100000);double p=fd.cumulativeProbability(.999);double x=fd.inverseCumulativeProbability(p);Assert.assertEquals(.999,x,1.0e-5);}"
"org.apache.commons.math3.distribution.FDistributionTest.testSmallDegreesOfFreedom",0,"@Test public void testSmallDegreesOfFreedom(){FDistribution fd=new FDistribution(1,1);double p=fd.cumulativeProbability(0.975);double x=fd.inverseCumulativeProbability(p);Assert.assertEquals(0.975,x,1.0e-5);fd=new FDistribution(1,2);p=fd.cumulativeProbability(0.975);x=fd.inverseCumulativeProbability(p);Assert.assertEquals(0.975,x,1.0e-5);}"
"org.apache.commons.math3.distribution.FDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;FDistribution dist;dist=new FDistribution(1,2);Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));dist=new FDistribution(1,3);Assert.assertEquals(dist.getNumericalMean(),3d / (3d - 2d),tol);Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));dist=new FDistribution(1,5);Assert.assertEquals(dist.getNumericalMean(),5d / (5d - 2d),tol);Assert.assertEquals(dist.getNumericalVariance(),(2d * 5d * 5d* 4d)/ 9d,tol);}"
"org.apache.commons.math3.distribution.FDistributionTest.testMath785",0,"@Test public void testMath785(){try {double prob=0.01;FDistribution f=new FDistribution(200000,200000);double result=f.inverseCumulativeProbability(prob);Assert.assertTrue(result < 1.0);}catch(Exception e){Assert.fail(""Failing to calculate inverse cumulative probability"");}}"
"org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.FDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.FDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.FDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.FDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.FDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.FDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.FDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.FDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();new EulerIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testDecreasingSteps",0,"@Test public void testDecreasingSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousValueError=Double.NaN;double previousTimeError=Double.NaN;for (int i=4;i < 8;++i){TestProblemAbstract pb=problems[k].copy();double step=(pb.getFinalTime()- pb.getInitialTime())* FastMath.pow(2.0,-i);FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double valueError=handler.getMaximalValueError();if (i > 4){Assert.assertTrue(valueError < FastMath.abs(previousValueError));}previousValueError=valueError;double timeError=handler.getMaximalTimeError();if (i > 4){Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));}previousTimeError=timeError;}}}"
"org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testSmallStep",0,"@Test public void testSmallStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 2.0e-4);Assert.assertTrue(handler.getMaximalValueError()< 1.0e-3);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Euler"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testBigStep",0,"@Test public void testBigStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()> 0.01);Assert.assertTrue(handler.getMaximalValueError()> 0.2);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double step=FastMath.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new EulerIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 0.45);Assert.assertTrue(handler.getMaximalValueError()< 0.45);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Euler"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.EulerIntegratorTest.testStepSize",0,"@Test public void testStepSize()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double step=1.23456;FirstOrderIntegrator integ=new EulerIntegrator(step);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){Assert.assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public void init(double t0,double[]y0,double t){}});integ.integrate(new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math3.distribution.BetaDistributionTest.testCumulative",0,"@Test public void testCumulative(){double[]x=new double[]{-0.1,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1};checkCumulative(0.1,0.1,x,new double[]{0.0000000000,0.0000000000,0.4063850939,0.4397091902,0.4628041861,0.4821200456,0.5000000000,0.5178799544,0.5371958139,0.5602908098,0.5936149061,1.0000000000,1.0000000000});checkCumulative(0.1,0.5,x,new double[]{0.0000000000,0.0000000000,0.7048336221,0.7593042194,0.7951765304,0.8234948385,0.8480017124,0.8706034370,0.8926585878,0.9156406404,0.9423662883,1.0000000000,1.0000000000});checkCumulative(0.1,1.0,x,new double[]{0.0000000000,0.0000000000,0.7943282347,0.8513399225,0.8865681506,0.9124435366,0.9330329915,0.9502002165,0.9649610951,0.9779327685,0.9895192582,1.0000000000,1.0000000000});checkCumulative(0.1,2.0,x,new double[]{0.0000000000,0.0000000000,0.8658177758,0.9194471163,0.9486279211,0.9671901487,0.9796846411,0.9882082252,0.9939099280,0.9974914239,0.9994144508,1.0000000000,1.0000000000});checkCumulative(0.1,4.0,x,new double[]{0.0000000000,0.0000000000,0.9234991121,0.9661958941,0.9842285085,0.9928444112,0.9970040660,0.9989112804,0.9996895625,0.9999440793,0.9999967829,1.0000000000,1.0000000000});checkCumulative(0.5,0.1,x,new double[]{0.00000000000,0.00000000000,0.05763371168,0.08435935962,0.10734141216,0.12939656302,0.15199828760,0.17650516146,0.20482346963,0.24069578055,0.29516637795,1.00000000000,1.00000000000});checkCumulative(0.5,0.5,x,new double[]{0.0000000000,0.0000000000,0.2048327647,0.2951672353,0.3690101196,0.4359057832,0.5000000000,0.5640942168,0.6309898804,0.7048327647,0.7951672353,1.0000000000,1.0000000000});checkCumulative(0.5,1.0,x,new double[]{0.0000000000,0.0000000000,0.3162277660,0.4472135955,0.5477225575,0.6324555320,0.7071067812,0.7745966692,0.8366600265,0.8944271910,0.9486832981,1.0000000000,1.0000000000});checkCumulative(0.5,2.0,x,new double[]{0.0000000000,0.0000000000,0.4585302607,0.6260990337,0.7394254526,0.8221921916,0.8838834765,0.9295160031,0.9621590305,0.9838699101,0.9961174630,1.0000000000,1.0000000000});checkCumulative(0.5,4.0,x,new double[]{0.0000000000,0.0000000000,0.6266250826,0.8049844719,0.8987784842,0.9502644369,0.9777960959,0.9914837366,0.9974556254,0.9995223859,0.9999714889,1.0000000000,1.0000000000});checkCumulative(1.0,0.1,x,new double[]{0.00000000000,0.00000000000,0.01048074179,0.02206723146,0.03503890488,0.04979978349,0.06696700846,0.08755646344,0.11343184943,0.14866007748,0.20567176528,1.00000000000,1.00000000000});checkCumulative(1.0,0.5,x,new double[]{0.00000000000,0.00000000000,0.05131670195,0.10557280900,0.16333997347,0.22540333076,0.29289321881,0.36754446797,0.45227744249,0.55278640450,0.68377223398,1.00000000000,1.00000000000});checkCumulative(1,1,x,new double[]{0.0,0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.0});checkCumulative(1,2,x,new double[]{0.00,0.00,0.19,0.36,0.51,0.64,0.75,0.84,0.91,0.96,0.99,1.00,1.00});checkCumulative(1,4,x,new double[]{0.0000,0.0000,0.3439,0.5904,0.7599,0.8704,0.9375,0.9744,0.9919,0.9984,0.9999,1.0000,1.0000});checkCumulative(2.0,0.1,x,new double[]{0.0000000000000,0.0000000000000,0.0005855492117,0.0025085760862,0.0060900720266,0.0117917748341,0.0203153588864,0.0328098512512,0.0513720788952,0.0805528836776,0.1341822241505,1.0000000000000,1.0000000000000});checkCumulative(2,1,x,new double[]{0.00,0.00,0.01,0.04,0.09,0.16,0.25,0.36,0.49,0.64,0.81,1.00,1.00});checkCumulative(2.0,0.5,x,new double[]{0.000000000000,0.000000000000,0.003882537047,0.016130089900,0.037840969486,0.070483996910,0.116116523517,0.177807808356,0.260574547368,0.373900966300,0.541469739276,1.000000000000,1.000000000000});checkCumulative(2,2,x,new double[]{0.000,0.000,0.028,0.104,0.216,0.352,0.500,0.648,0.784,0.896,0.972,1.000,1.000});checkCumulative(2,4,x,new double[]{0.00000,0.00000,0.08146,0.26272,0.47178,0.66304,0.81250,0.91296,0.96922,0.99328,0.99954,1.00000,1.00000});checkCumulative(4.0,0.1,x,new double[]{0.000000000e+00,0.000000000e+00,3.217128269e-06,5.592070271e-05,3.104375474e-04,1.088719595e-03,2.995933981e-03,7.155588777e-03,1.577149153e-02,3.380410585e-02,7.650088789e-02,1.000000000e+00,1.000000000e+00});checkCumulative(4.0,0.5,x,new double[]{0.000000000e+00,0.000000000e+00,2.851114863e-05,4.776140576e-04,2.544374616e-03,8.516263371e-03,2.220390414e-02,4.973556312e-02,1.012215158e-01,1.950155281e-01,3.733749174e-01,1.000000000e+00,1.000000000e+00});checkCumulative(4,1,x,new double[]{0.0000,0.0000,0.0001,0.0016,0.0081,0.0256,0.0625,0.1296,0.2401,0.4096,0.6561,1.0000,1.0000});checkCumulative(4,2,x,new double[]{0.00000,0.00000,0.00046,0.00672,0.03078,0.08704,0.18750,0.33696,0.52822,0.73728,0.91854,1.00000,1.00000});checkCumulative(4,4,x,new double[]{0.000000,0.000000,0.002728,0.033344,0.126036,0.289792,0.500000,0.710208,0.873964,0.966656,0.997272,1.000000,1.000000});}"
"org.apache.commons.math3.distribution.BetaDistributionTest.testDensity",0,"@Test public void testDensity(){double[]x=new double[]{1e-6,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9};checkDensity(0.1,0.1,x,new double[]{12741.2357380649,0.4429889586665234,2.639378715e-01,2.066393611e-01,1.832401831e-01,1.766302780e-01,1.832404579e-01,2.066400696e-01,2.639396531e-01,4.429925026e-01});checkDensity(0.1,0.5,x,new double[]{2.218377102e+04,7.394524202e-01,4.203020268e-01,3.119435533e-01,2.600787829e-01,2.330648626e-01,2.211408259e-01,2.222728708e-01,2.414013907e-01,3.070567405e-01});checkDensity(0.1,1.0,x,new double[]{2.511886432e+04,7.943210858e-01,4.256680458e-01,2.955218303e-01,2.281103709e-01,1.866062624e-01,1.583664652e-01,1.378514078e-01,1.222414585e-01,1.099464743e-01});checkDensity(0.1,2.0,x,new double[]{2.763072312e+04,7.863770012e-01,3.745874120e-01,2.275514842e-01,1.505525939e-01,1.026332391e-01,6.968107049e-02,4.549081293e-02,2.689298641e-02,1.209399123e-02});checkDensity(0.1,4.0,x,new double[]{2.997927462e+04,6.911058917e-01,2.601128486e-01,1.209774010e-01,5.880564714e-02,2.783915474e-02,1.209657335e-02,4.442148268e-03,1.167143939e-03,1.312171805e-04});checkDensity(0.5,0.1,x,new double[]{88.3152184726,0.3070542841,0.2414007269,0.2222727015,0.2211409364,0.2330652355,0.2600795198,0.3119449793,0.4203052841,0.7394649088});checkDensity(0.5,0.5,x,new double[]{318.3100453389,1.0610282383,0.7957732234,0.6946084565,0.6497470636,0.6366197724,0.6497476051,0.6946097796,0.7957762075,1.0610376697});checkDensity(0.5,1.0,x,new double[]{500.0000000000,1.5811309244,1.1180311937,0.9128694077,0.7905684268,0.7071060741,0.6454966865,0.5976138778,0.5590166450,0.5270459839});checkDensity(0.5,2.0,x,new double[]{749.99925000000,2.134537420613655,1.34163575536,0.95851150881,0.71151039830,0.53032849490,0.38729704363,0.26892534859,0.16770415497,0.07905610701});checkDensity(0.5,4.0,x,new double[]{1.093746719e+03,2.52142232809988,1.252190241e+00,6.849343920e-01,3.735417140e-01,1.933481570e-01,9.036885833e-02,3.529621669e-02,9.782644546e-03,1.152878503e-03});checkDensity(1.0,0.1,x,new double[]{0.1000000900,0.1099466942,0.1222417336,0.1378517623,0.1583669403,0.1866069342,0.2281113974,0.2955236034,0.4256718768,0.7943353837});checkDensity(1.0,0.5,x,new double[]{0.5000002500,0.5270465695,0.5590173438,0.5976147315,0.6454977623,0.7071074883,0.7905704033,0.9128724506,1.1180367838,1.5811467358});checkDensity(1,1,x,new double[]{1,1,1,1,1,1,1,1,1,1});checkDensity(1,2,x,new double[]{1.999998,1.799998,1.599998,1.399998,1.199998,0.999998,0.799998,0.599998,0.399998,0.199998});checkDensity(1,4,x,new double[]{3.999988000012,2.915990280011,2.047992320010,1.371994120008,0.863995680007,0.499997000006,0.255998080005,0.107998920004,0.031999520002,0.003999880001});checkDensity(2.0,0.1,x,new double[]{1.100000990e-07,1.209425730e-02,2.689331586e-02,4.549123318e-02,6.968162794e-02,1.026340191e-01,1.505537732e-01,2.275534997e-01,3.745917198e-01,7.863929037e-01});checkDensity(2.0,0.5,x,new double[]{7.500003750e-07,7.905777599e-02,1.677060417e-01,2.689275256e-01,3.872996256e-01,5.303316769e-01,7.115145488e-01,9.585174425e-01,1.341645818e+00,2.134537420613655});checkDensity(2,1,x,new double[]{0.000002,0.200002,0.400002,0.600002,0.800002,1.000002,1.200002,1.400002,1.600002,1.800002});checkDensity(2,2,x,new double[]{5.9999940e-06,5.4000480e-01,9.6000360e-01,1.2600024e+00,1.4400012e+00,1.5000000e+00,1.4399988e+00,1.2599976e+00,9.5999640e-01,5.3999520e-01});checkDensity(2,4,x,new double[]{0.00001999994,1.45800971996,2.04800255997,2.05799803998,1.72799567999,1.24999500000,0.76799552000,0.37799676001,0.12799824001,0.01799948000});checkDensity(4.0,0.1,x,new double[]{1.193501074e-19,1.312253162e-04,1.167181580e-03,4.442248535e-03,1.209679109e-02,2.783958903e-02,5.880649983e-02,1.209791638e-01,2.601171405e-01,6.911229392e-01});checkDensity(4.0,0.5,x,new double[]{1.093750547e-18,1.152948959e-03,9.782950259e-03,3.529697305e-02,9.037036449e-02,1.933508639e-01,3.735463833e-01,6.849425461e-01,1.252205894e+00,2.52142232809988});checkDensity(4,1,x,new double[]{4.000000000e-18,4.000120001e-03,3.200048000e-02,1.080010800e-01,2.560019200e-01,5.000030000e-01,8.640043200e-01,1.372005880e+00,2.048007680e+00,2.916009720e+00});checkDensity(4,2,x,new double[]{1.999998000e-17,1.800052000e-02,1.280017600e-01,3.780032400e-01,7.680044800e-01,1.250005000e+00,1.728004320e+00,2.058001960e+00,2.047997440e+00,1.457990280e+00});checkDensity(4,4,x,new double[]{1.399995800e-16,1.020627216e-01,5.734464512e-01,1.296547409e+00,1.935364838e+00,2.187500000e+00,1.935355162e+00,1.296532591e+00,5.734335488e-01,1.020572784e-01});}"
"org.apache.commons.math3.distribution.BetaDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;BetaDistribution dist;dist=new BetaDistribution(1,1);Assert.assertEquals(dist.getNumericalMean(),0.5,tol);Assert.assertEquals(dist.getNumericalVariance(),1.0 / 12.0,tol);dist=new BetaDistribution(2,5);Assert.assertEquals(dist.getNumericalMean(),2.0 / 7.0,tol);Assert.assertEquals(dist.getNumericalVariance(),10.0 / (49.0 * 8.0),tol);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testIdentity",0,"@Test public void testIdentity(){FieldRotation<Dfp> r=createRotation(1,0,0,0,false);checkVector(r.applyTo(createVector(1,0,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,0,1));checkAngle(r.getAngle(),0);r=createRotation(-1,0,0,0,false);checkVector(r.applyTo(createVector(1,0,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,0,1));checkAngle(r.getAngle(),0);r=createRotation(42,0,0,0,true);checkVector(r.applyTo(createVector(1,0,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,0,1));checkAngle(r.getAngle(),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testAxisAngle",0,"@Test public void testAxisAngle()throws MathIllegalArgumentException {FieldRotation<Dfp> r=new FieldRotation<Dfp>(createAxis(10,10,10),createAngle(2 * FastMath.PI / 3));checkVector(r.applyTo(createVector(1,0,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,0,1));checkVector(r.applyTo(createVector(0,0,1)),createVector(1,0,0));double s=1 / FastMath.sqrt(3);checkVector(r.getAxis(),createVector(s,s,s));checkAngle(r.getAngle(),2 * FastMath.PI / 3);try {new FieldRotation<Dfp>(createAxis(0,0,0),createAngle(2 * FastMath.PI / 3));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}r=new FieldRotation<Dfp>(createAxis(0,0,1),createAngle(1.5 * FastMath.PI));checkVector(r.getAxis(),createVector(0,0,-1));checkAngle(r.getAngle(),0.5 * FastMath.PI);r=new FieldRotation<Dfp>(createAxis(0,1,0),createAngle(FastMath.PI));checkVector(r.getAxis(),createVector(0,1,0));checkAngle(r.getAngle(),FastMath.PI);checkVector(createRotation(1,0,0,0,false).getAxis(),createVector(1,0,0));}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testRevert",0,"@Test public void testRevert(){double a=0.001;double b=0.36;double c=0.48;double d=0.8;FieldRotation<Dfp> r=createRotation(a,b,c,d,true);FieldRotation<Dfp> reverted=r.revert();FieldRotation<Dfp> rrT=r.applyTo(reverted);checkRotationDS(rrT,1,0,0,0);FieldRotation<Dfp> rTr=reverted.applyTo(r);checkRotationDS(rTr,1,0,0,0);Assert.assertEquals(r.getAngle().getReal(),reverted.getAngle().getReal(),1.0e-15);Assert.assertEquals(-1,FieldVector3D.dotProduct(r.getAxis(),reverted.getAxis()).getReal(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testVectorOnePair",0,"@Test public void testVectorOnePair()throws MathArithmeticException {FieldVector3D<Dfp> u=createVector(3,2,1);FieldVector3D<Dfp> v=createVector(-4,2,2);FieldRotation<Dfp> r=new FieldRotation<Dfp>(u,v);checkVector(r.applyTo(u.scalarMultiply(v.getNorm())),v.scalarMultiply(u.getNorm()));checkAngle(new FieldRotation<Dfp>(u,u.negate()).getAngle(),FastMath.PI);try {new FieldRotation<Dfp>(u,createVector(0,0,0));Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testVectorTwoPairs",0,"@Test public void testVectorTwoPairs()throws MathArithmeticException {FieldVector3D<Dfp> u1=createVector(3,0,0);FieldVector3D<Dfp> u2=createVector(0,5,0);FieldVector3D<Dfp> v1=createVector(0,0,2);FieldVector3D<Dfp> v2=createVector(-2,0,2);FieldRotation<Dfp> r=new FieldRotation<Dfp>(u1,u2,v1,v2);checkVector(r.applyTo(createVector(1,0,0)),createVector(0,0,1));checkVector(r.applyTo(createVector(0,1,0)),createVector(-1,0,0));r=new FieldRotation<Dfp>(u1,u2,u1.negate(),u2.negate());FieldVector3D<Dfp> axis=r.getAxis();if (FieldVector3D.dotProduct(axis,createVector(0,0,1)).getReal()> 0){checkVector(axis,createVector(0,0,1));}else {checkVector(axis,createVector(0,0,-1));}checkAngle(r.getAngle(),FastMath.PI);double sqrt=FastMath.sqrt(2)/ 2;r=new FieldRotation<Dfp>(createVector(1,0,0),createVector(0,1,0),createVector(0.5,0.5,sqrt),createVector(0.5,0.5,-sqrt));checkRotationDS(r,sqrt,0.5,0.5,0);r=new FieldRotation<Dfp>(u1,u2,u1,FieldVector3D.crossProduct(u1,u2));checkRotationDS(r,sqrt,-sqrt,0,0);checkRotationDS(new FieldRotation<Dfp>(u1,u2,u1,u2),1,0,0,0);try {new FieldRotation<Dfp>(u1,u2,createVector(0,0,0),v2);Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testMatrix",0,"@Test public void testMatrix()throws NotARotationMatrixException {try {createRotation(new double[][]{{0.0,1.0,0.0},{1.0,0.0,0.0}},1.0e-7);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}try {createRotation(new double[][]{{0.445888,0.797184,-0.407040},{0.821760,-0.184320,0.539200},{-0.354816,0.574912,0.737280}},1.0e-7);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}try {createRotation(new double[][]{{0.4,0.8,-0.4},{-0.4,0.6,0.7},{0.8,-0.2,0.5}},1.0e-15);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}checkRotationDS(createRotation(new double[][]{{0.445888,0.797184,-0.407040},{-0.354816,0.574912,0.737280},{0.821760,-0.184320,0.539200}},1.0e-10),0.8,0.288,0.384,0.36);checkRotationDS(createRotation(new double[][]{{0.539200,0.737280,0.407040},{0.184320,-0.574912,0.797184},{0.821760,-0.354816,-0.445888}},1.0e-10),0.36,0.8,0.288,0.384);checkRotationDS(createRotation(new double[][]{{-0.445888,0.797184,-0.407040},{0.354816,0.574912,0.737280},{0.821760,0.184320,-0.539200}},1.0e-10),0.384,0.36,0.8,0.288);checkRotationDS(createRotation(new double[][]{{-0.539200,0.737280,0.407040},{-0.184320,-0.574912,0.797184},{0.821760,0.354816,0.445888}},1.0e-10),0.288,0.384,0.36,0.8);double[][]m1={{0.0,1.0,0.0},{0.0,0.0,1.0},{1.0,0.0,0.0}};FieldRotation<Dfp> r=createRotation(m1,1.0e-7);checkVector(r.applyTo(createVector(1,0,0)),createVector(0,0,1));checkVector(r.applyTo(createVector(0,1,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,1,0));double[][]m2={{0.83203,-0.55012,-0.07139},{0.48293,0.78164,-0.39474},{0.27296,0.29396,0.91602}};r=createRotation(m2,1.0e-12);Dfp[][]m3=r.getMatrix();double d00=m2[0][0]- m3[0][0].getReal();double d01=m2[0][1]- m3[0][1].getReal();double d02=m2[0][2]- m3[0][2].getReal();double d10=m2[1][0]- m3[1][0].getReal();double d11=m2[1][1]- m3[1][1].getReal();double d12=m2[1][2]- m3[1][2].getReal();double d20=m2[2][0]- m3[2][0].getReal();double d21=m2[2][1]- m3[2][1].getReal();double d22=m2[2][2]- m3[2][2].getReal();Assert.assertTrue(FastMath.abs(d00)< 6.0e-6);Assert.assertTrue(FastMath.abs(d01)< 6.0e-6);Assert.assertTrue(FastMath.abs(d02)< 6.0e-6);Assert.assertTrue(FastMath.abs(d10)< 6.0e-6);Assert.assertTrue(FastMath.abs(d11)< 6.0e-6);Assert.assertTrue(FastMath.abs(d12)< 6.0e-6);Assert.assertTrue(FastMath.abs(d20)< 6.0e-6);Assert.assertTrue(FastMath.abs(d21)< 6.0e-6);Assert.assertTrue(FastMath.abs(d22)< 6.0e-6);Assert.assertTrue(FastMath.abs(d00)> 4.0e-7);Assert.assertTrue(FastMath.abs(d01)> 4.0e-7);Assert.assertTrue(FastMath.abs(d02)> 4.0e-7);Assert.assertTrue(FastMath.abs(d10)> 4.0e-7);Assert.assertTrue(FastMath.abs(d11)> 4.0e-7);Assert.assertTrue(FastMath.abs(d12)> 4.0e-7);Assert.assertTrue(FastMath.abs(d20)> 4.0e-7);Assert.assertTrue(FastMath.abs(d21)> 4.0e-7);Assert.assertTrue(FastMath.abs(d22)> 4.0e-7);for (int i=0;i < 3;++i){for (int j=0;j < 3;++j){double m3tm3=m3[i][0].getReal()* m3[j][0].getReal()+ m3[i][1].getReal()* m3[j][1].getReal()+ m3[i][2].getReal()* m3[j][2].getReal();if (i == j){Assert.assertTrue(FastMath.abs(m3tm3 - 1.0)< 1.0e-10);}else {Assert.assertTrue(FastMath.abs(m3tm3)< 1.0e-10);}}}checkVector(r.applyTo(createVector(1,0,0)),new FieldVector3D<Dfp>(m3[0][0],m3[1][0],m3[2][0]));checkVector(r.applyTo(createVector(0,1,0)),new FieldVector3D<Dfp>(m3[0][1],m3[1][1],m3[2][1]));checkVector(r.applyTo(createVector(0,0,1)),new FieldVector3D<Dfp>(m3[0][2],m3[1][2],m3[2][2]));double[][]m4={{1.0,0.0,0.0},{0.0,-1.0,0.0},{0.0,0.0,-1.0}};r=createRotation(m4,1.0e-7);checkAngle(r.getAngle(),FastMath.PI);try {double[][]m5={{0.0,0.0,1.0},{0.0,1.0,0.0},{1.0,0.0,0.0}};r=createRotation(m5,1.0e-7);Assert.fail(""got "" + r + "",should have caught an exception"");}catch(NotARotationMatrixException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testAngles",0,"@Test public void testAngles()throws CardanEulerSingularityException {DfpField field=new DfpField(15);RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};for (int i=0;i < CardanOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=2.0){for (double alpha2=-1.55;alpha2 < 1.55;alpha2+=0.8){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=2.0){FieldRotation<Dfp> r=new FieldRotation<Dfp>(CardanOrders[i],field.newDfp(alpha1),field.newDfp(alpha2),field.newDfp(alpha3));Dfp[]angles=r.getAngles(CardanOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};for (int i=0;i < EulerOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=2.0){for (double alpha2=0.05;alpha2 < 3.1;alpha2+=0.8){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=2.0){FieldRotation<Dfp> r=new FieldRotation<Dfp>(EulerOrders[i],field.newDfp(alpha1),field.newDfp(alpha2),field.newDfp(alpha3));Dfp[]angles=r.getAngles(EulerOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testSingularities",0,"@Test public void testSingularities(){DfpField field=new DfpField(20);RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};double[]singularCardanAngle={FastMath.PI / 2,-FastMath.PI / 2};for (int i=0;i < CardanOrders.length;++i){for (int j=0;j < singularCardanAngle.length;++j){FieldRotation<Dfp> r=new FieldRotation<Dfp>(CardanOrders[i],field.newDfp(0.1),field.newDfp(singularCardanAngle[j]),field.newDfp(0.3));try {r.getAngles(CardanOrders[i]);Assert.fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};double[]singularEulerAngle={0,FastMath.PI};for (int i=0;i < EulerOrders.length;++i){for (int j=0;j < singularEulerAngle.length;++j){FieldRotation<Dfp> r=new FieldRotation<Dfp>(EulerOrders[i],field.newDfp(0.1),field.newDfp(singularEulerAngle[j]),field.newDfp(0.3));try {r.getAngles(EulerOrders[i]);Assert.fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testQuaternion",0,"@Test public void testQuaternion()throws MathIllegalArgumentException {FieldRotation<Dfp> r1=new FieldRotation<Dfp>(createVector(2,-3,5),createAngle(1.7));double n=23.5;FieldRotation<Dfp> r2=new FieldRotation<Dfp>(r1.getQ0().multiply(n),r1.getQ1().multiply(n),r1.getQ2().multiply(n),r1.getQ3().multiply(n),true);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<Dfp> u=createVector(x,y,z);checkVector(r2.applyTo(u),r1.applyTo(u));}}}r1=createRotation(0.288,0.384,0.36,0.8,false);checkRotationDS(r1,-r1.getQ0().getReal(),-r1.getQ1().getReal(),-r1.getQ2().getReal(),-r1.getQ3().getReal());}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testCompose",0,"@Test public void testCompose()throws MathIllegalArgumentException {FieldRotation<Dfp> r1=new FieldRotation<Dfp>(createVector(2,-3,5),createAngle(1.7));FieldRotation<Dfp> r2=new FieldRotation<Dfp>(createVector(-1,3,2),createAngle(0.3));FieldRotation<Dfp> r3=r2.applyTo(r1);FieldRotation<Dfp> r3Double=r2.applyTo(new Rotation(r1.getQ0().getReal(),r1.getQ1().getReal(),r1.getQ2().getReal(),r1.getQ3().getReal(),false));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<Dfp> u=createVector(x,y,z);checkVector(r2.applyTo(r1.applyTo(u)),r3.applyTo(u));checkVector(r2.applyTo(r1.applyTo(u)),r3Double.applyTo(u));}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testComposeInverse",0,"@Test public void testComposeInverse()throws MathIllegalArgumentException {FieldRotation<Dfp> r1=new FieldRotation<Dfp>(createVector(2,-3,5),createAngle(1.7));FieldRotation<Dfp> r2=new FieldRotation<Dfp>(createVector(-1,3,2),createAngle(0.3));FieldRotation<Dfp> r3=r2.applyInverseTo(r1);FieldRotation<Dfp> r3Double=r2.applyInverseTo(new Rotation(r1.getQ0().getReal(),r1.getQ1().getReal(),r1.getQ2().getReal(),r1.getQ3().getReal(),false));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<Dfp> u=createVector(x,y,z);checkVector(r2.applyInverseTo(r1.applyTo(u)),r3.applyTo(u));checkVector(r2.applyInverseTo(r1.applyTo(u)),r3Double.applyTo(u));}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testDoubleVectors",0,"@Test public void testDoubleVectors()throws MathIllegalArgumentException {Well1024a random=new Well1024a(0x180b41cfeeffaf67l);UnitSphereRandomVectorGenerator g=new UnitSphereRandomVectorGenerator(3,random);for (int i=0;i < 10;++i){double[]unit=g.nextVector();FieldRotation<Dfp> r=new FieldRotation<Dfp>(createVector(unit[0],unit[1],unit[2]),createAngle(random.nextDouble()));for (double x=-0.9;x < 0.9;x+=0.4){for (double y=-0.9;y < 0.9;y+=0.4){for (double z=-0.9;z < 0.9;z+=0.4){FieldVector3D<Dfp> uds=createVector(x,y,z);FieldVector3D<Dfp> ruds=r.applyTo(uds);FieldVector3D<Dfp> rIuds=r.applyInverseTo(uds);Vector3D u=new Vector3D(x,y,z);FieldVector3D<Dfp> ru=r.applyTo(u);FieldVector3D<Dfp> rIu=r.applyInverseTo(u);Dfp[]ruArray=new Dfp[3];r.applyTo(new double[]{x,y,z},ruArray);Dfp[]rIuArray=new Dfp[3];r.applyInverseTo(new double[]{x,y,z},rIuArray);checkVector(ruds,ru);checkVector(ruds,new FieldVector3D<Dfp>(ruArray));checkVector(rIuds,rIu);checkVector(rIuds,new FieldVector3D<Dfp>(rIuArray));}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testDoubleRotations",0,"@Test public void testDoubleRotations()throws MathIllegalArgumentException {DfpField field=new DfpField(20);Well1024a random=new Well1024a(0x180b41cfeeffaf67l);UnitSphereRandomVectorGenerator g=new UnitSphereRandomVectorGenerator(3,random);for (int i=0;i < 10;++i){double[]unit1=g.nextVector();Rotation r1=new Rotation(new Vector3D(unit1[0],unit1[1],unit1[2]),random.nextDouble());FieldRotation<Dfp> r1Prime=new FieldRotation<Dfp>(field.newDfp(r1.getQ0()),field.newDfp(r1.getQ1()),field.newDfp(r1.getQ2()),field.newDfp(r1.getQ3()),false);double[]unit2=g.nextVector();FieldRotation<Dfp> r2=new FieldRotation<Dfp>(createVector(unit2[0],unit2[1],unit2[2]),createAngle(random.nextDouble()));FieldRotation<Dfp> rA=FieldRotation.applyTo(r1,r2);FieldRotation<Dfp> rB=r1Prime.applyTo(r2);FieldRotation<Dfp> rC=FieldRotation.applyInverseTo(r1,r2);FieldRotation<Dfp> rD=r1Prime.applyInverseTo(r2);for (double x=-0.9;x < 0.9;x+=0.4){for (double y=-0.9;y < 0.9;y+=0.4){for (double z=-0.9;z < 0.9;z+=0.4){FieldVector3D<Dfp> uds=createVector(x,y,z);checkVector(r1Prime.applyTo(uds),FieldRotation.applyTo(r1,uds));checkVector(r1Prime.applyInverseTo(uds),FieldRotation.applyInverseTo(r1,uds));checkVector(rA.applyTo(uds),rB.applyTo(uds));checkVector(rA.applyInverseTo(uds),rB.applyInverseTo(uds));checkVector(rC.applyTo(uds),rD.applyTo(uds));checkVector(rC.applyInverseTo(uds),rD.applyInverseTo(uds));}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testArray",0,"@Test public void testArray()throws MathIllegalArgumentException {FieldRotation<Dfp> r=new FieldRotation<Dfp>(createAxis(2,-3,5),createAngle(1.7));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<Dfp> u=createVector(x,y,z);FieldVector3D<Dfp> v=r.applyTo(u);Dfp[]out=new Dfp[3];r.applyTo(new Dfp[]{u.getX(),u.getY(),u.getZ()},out);Assert.assertEquals(v.getX().getReal(),out[0].getReal(),1.0e-10);Assert.assertEquals(v.getY().getReal(),out[1].getReal(),1.0e-10);Assert.assertEquals(v.getZ().getReal(),out[2].getReal(),1.0e-10);r.applyInverseTo(out,out);Assert.assertEquals(u.getX().getReal(),out[0].getReal(),1.0e-10);Assert.assertEquals(u.getY().getReal(),out[1].getReal(),1.0e-10);Assert.assertEquals(u.getZ().getReal(),out[2].getReal(),1.0e-10);}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testApplyInverseTo",0,"@Test public void testApplyInverseTo()throws MathIllegalArgumentException {Dfp[]in=new Dfp[3];Dfp[]out=new Dfp[3];Dfp[]rebuilt=new Dfp[3];FieldRotation<Dfp> r=new FieldRotation<Dfp>(createVector(2,-3,5),createAngle(1.7));for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){FieldVector3D<Dfp> u=createVector(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));r.applyInverseTo(r.applyTo(u));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));in[0]=u.getX();in[1]=u.getY();in[2]=u.getZ();r.applyTo(in,out);r.applyInverseTo(out,rebuilt);Assert.assertEquals(in[0].getReal(),rebuilt[0].getReal(),1.0e-12);Assert.assertEquals(in[1].getReal(),rebuilt[1].getReal(),1.0e-12);Assert.assertEquals(in[2].getReal(),rebuilt[2].getReal(),1.0e-12);}}r=createRotation(1,0,0,0,false);for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){FieldVector3D<Dfp> u=createVector(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}r=new FieldRotation<Dfp>(createVector(0,0,1),createAngle(FastMath.PI));for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){FieldVector3D<Dfp> u=createVector(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testIssue639",0,"@Test public void testIssue639()throws MathArithmeticException {FieldVector3D<Dfp> u1=createVector(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-3822921525525679.0 / 4294967296.0);FieldVector3D<Dfp> u2=createVector(-5712344449280879.0 / 2097152.0,-2275058564560979.0 / 1048576.0,4423475992255071.0 / 65536.0);FieldRotation<Dfp> rot=new FieldRotation<Dfp>(u1,u2,createVector(1,0,0),createVector(0,0,1));Assert.assertEquals(0.6228370359608200639829222,rot.getQ0().getReal(),1.0e-15);Assert.assertEquals(0.0257707621456498790029987,rot.getQ1().getReal(),1.0e-15);Assert.assertEquals(-0.0000000002503012255839931,rot.getQ2().getReal(),1.0e-15);Assert.assertEquals(-0.7819270390861109450724902,rot.getQ3().getReal(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDfpTest.testIssue801",0,"@Test public void testIssue801()throws MathArithmeticException {FieldVector3D<Dfp> u1=createVector(0.9999988431610581,-0.0015210774290851095,0.0);FieldVector3D<Dfp> u2=createVector(0.0,0.0,1.0);FieldVector3D<Dfp> v1=createVector(0.9999999999999999,0.0,0.0);FieldVector3D<Dfp> v2=createVector(0.0,0.0,-1.0);FieldRotation<Dfp> quat=new FieldRotation<Dfp>(u1,u2,v1,v2);double q2=quat.getQ0().getReal()* quat.getQ0().getReal()+ quat.getQ1().getReal()* quat.getQ1().getReal()+ quat.getQ2().getReal()* quat.getQ2().getReal()+ quat.getQ3().getReal()* quat.getQ3().getReal();Assert.assertEquals(1.0,q2,1.0e-14);Assert.assertEquals(0.0,FieldVector3D.angle(v1,quat.applyTo(u1)).getReal(),1.0e-14);Assert.assertEquals(0.0,FieldVector3D.angle(v2,quat.applyTo(u2)).getReal(),1.0e-14);}"
"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest.testPreconditions",0,"/** * Test preconditions.*/@Test public void testPreconditions(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2.5};double[]zval=new double[]{-12,-8,-5.5,-3,0,2.5};double[][][]fval=new double[xval.length][yval.length][zval.length];@SuppressWarnings(""unused"")TrivariateFunction tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,fval,fval);double[]wxval=new double[]{3,2,5,6.5};try {tcf=new TricubicSplineInterpolatingFunction(wxval,yval,zval,fval,fval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wyval=new double[]{-4,-1,-1,2.5};try {tcf=new TricubicSplineInterpolatingFunction(xval,wyval,zval,fval,fval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wzval=new double[]{-12,-8,-9,-3,0,2.5};try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,wzval,fval,fval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[][][]wfval=new double[xval.length - 1][yval.length - 1][zval.length];try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,wfval,fval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,wfval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,wfval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,wfval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,wfval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,wfval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,wfval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,fval,wfval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wfval=new double[xval.length][yval.length - 1][zval.length];try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,wfval,fval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,wfval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,wfval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,wfval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,wfval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,wfval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,wfval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,fval,wfval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wfval=new double[xval.length][yval.length][zval.length - 1];try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,wfval,fval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,wfval,fval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,wfval,fval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,wfval,fval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,wfval,fval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,wfval,fval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,wfval,fval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,fval,fval,fval,fval,fval,fval,wfval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}}"
"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest.testPlane",0,"/** * Test for a plane. <p> f(x,y,z)= 2 x - 3 y - 4 z + 5 </p>*/@Test public void testPlane(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};double[]zval=new double[]{-12,-8,-5.5,-3,0,2.5};TrivariateFunction f=new TrivariateFunction(){public double value(double x,double y,double z){return 2 * x - 3 * y - 4 * z + 5;}};double[][][]fval=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){fval[i][j][k]=f.value(xval[i],yval[j],zval[k]);}}}double[][][]dFdX=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){dFdX[i][j][k]=2;}}}double[][][]dFdY=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){dFdY[i][j][k]=-3;}}}double[][][]dFdZ=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){dFdZ[i][j][k]=-4;}}}double[][][]d2FdXdY=new double[xval.length][yval.length][zval.length];double[][][]d2FdXdZ=new double[xval.length][yval.length][zval.length];double[][][]d2FdYdZ=new double[xval.length][yval.length][zval.length];double[][][]d3FdXdYdZ=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){d2FdXdY[i][j][k]=0;d2FdXdZ[i][j][k]=0;d2FdYdZ[i][j][k]=0;d3FdXdYdZ[i][j][k]=0;}}}TrivariateFunction tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,dFdX,dFdY,dFdZ,d2FdXdY,d2FdXdZ,d2FdYdZ,d3FdXdYdZ);double x,y,z;double expected,result;x=4;y=-3;z=0;expected=f.value(x,y,z);result=tcf.value(x,y,z);Assert.assertEquals(""On sample point"",expected,result,1e-15);x=4.5;y=-1.5;z=-4.25;expected=f.value(x,y,z);result=tcf.value(x,y,z);Assert.assertEquals(""Half-way between sample points (middle of the patch)"",expected,result,0.3);x=3.5;y=-3.5;z=-10;expected=f.value(x,y,z);result=tcf.value(x,y,z);Assert.assertEquals(""Half-way between sample points (border of the patch)"",expected,result,0.3);}"
"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunctionTest.testWave",0,"/** * Sine wave. <p> f(x,y,z)= a cos [&omega;z - k<sub>y</sub> x - k<sub>y</sub> y]</p> with A = 0.2,&omega;= 0.5,k<sub>x</sub> = 2,k<sub>y</sub> = 1.*/@Test public void testWave(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};double[]zval=new double[]{-12,-8,-5.5,-3,0,4};final double a=0.2;final double omega=0.5;final double kx=2;final double ky=1;TrivariateFunction f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.cos(omega * z - kx * x - ky * y);}};double[][][]fval=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){fval[i][j][k]=f.value(xval[i],yval[j],zval[k]);}}}double[][][]dFdX=new double[xval.length][yval.length][zval.length];TrivariateFunction dFdX_f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.sin(omega * z - kx * x - ky * y)* kx;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){dFdX[i][j][k]=dFdX_f.value(xval[i],yval[j],zval[k]);}}}double[][][]dFdY=new double[xval.length][yval.length][zval.length];TrivariateFunction dFdY_f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.sin(omega * z - kx * x - ky * y)* ky;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){dFdY[i][j][k]=dFdY_f.value(xval[i],yval[j],zval[k]);}}}double[][][]dFdZ=new double[xval.length][yval.length][zval.length];TrivariateFunction dFdZ_f=new TrivariateFunction(){public double value(double x,double y,double z){return -a * FastMath.sin(omega * z - kx * x - ky * y)* omega;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){dFdZ[i][j][k]=dFdZ_f.value(xval[i],yval[j],zval[k]);}}}double[][][]d2FdXdY=new double[xval.length][yval.length][zval.length];TrivariateFunction d2FdXdY_f=new TrivariateFunction(){public double value(double x,double y,double z){return -a * FastMath.cos(omega * z - kx * x - ky * y)* kx* ky;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){d2FdXdY[i][j][k]=d2FdXdY_f.value(xval[i],yval[j],zval[k]);}}}double[][][]d2FdXdZ=new double[xval.length][yval.length][zval.length];TrivariateFunction d2FdXdZ_f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.cos(omega * z - kx * x - ky * y)* kx* omega;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){d2FdXdZ[i][j][k]=d2FdXdZ_f.value(xval[i],yval[j],zval[k]);}}}double[][][]d2FdYdZ=new double[xval.length][yval.length][zval.length];TrivariateFunction d2FdYdZ_f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.cos(omega * z - kx * x - ky * y)* ky* omega;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){d2FdYdZ[i][j][k]=d2FdYdZ_f.value(xval[i],yval[j],zval[k]);}}}double[][][]d3FdXdYdZ=new double[xval.length][yval.length][zval.length];TrivariateFunction d3FdXdYdZ_f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.sin(omega * z - kx * x - ky * y)* kx* ky* omega;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){d3FdXdYdZ[i][j][k]=d3FdXdYdZ_f.value(xval[i],yval[j],zval[k]);}}}TrivariateFunction tcf=new TricubicSplineInterpolatingFunction(xval,yval,zval,fval,dFdX,dFdY,dFdZ,d2FdXdY,d2FdXdZ,d2FdYdZ,d3FdXdYdZ);double x,y,z;double expected,result;x=4;y=-3;z=0;expected=f.value(x,y,z);result=tcf.value(x,y,z);Assert.assertEquals(""On sample point"",expected,result,1e-14);x=4.5;y=-1.5;z=-4.25;expected=f.value(x,y,z);result=tcf.value(x,y,z);Assert.assertEquals(""Half-way between sample points (middle of the patch)"",expected,result,0.1);x=3.5;y=-3.5;z=-10;expected=f.value(x,y,z);result=tcf.value(x,y,z);Assert.assertEquals(""Half-way between sample points (border of the patch)"",expected,result,0.1);}"
"org.apache.commons.math3.util.IncrementorTest.testConstructor1",0,"@Test public void testConstructor1(){final Incrementor i=new Incrementor();Assert.assertEquals(0,i.getMaximalCount());Assert.assertEquals(0,i.getCount());}"
"org.apache.commons.math3.util.IncrementorTest.testConstructor2",0,"@Test public void testConstructor2(){final Incrementor i=new Incrementor(10);Assert.assertEquals(10,i.getMaximalCount());Assert.assertEquals(0,i.getCount());}"
"org.apache.commons.math3.util.IncrementorTest.testCanIncrement1",0,"@Test public void testCanIncrement1(){final Incrementor i=new Incrementor(3);Assert.assertTrue(i.canIncrement());i.incrementCount();Assert.assertTrue(i.canIncrement());i.incrementCount();Assert.assertTrue(i.canIncrement());i.incrementCount();Assert.assertFalse(i.canIncrement());}"
"org.apache.commons.math3.util.IncrementorTest.testCanIncrement2",0,"@Test public void testCanIncrement2(){final Incrementor i=new Incrementor(3);while (i.canIncrement()){i.incrementCount();}try {i.incrementCount();Assert.fail(""MaxCountExceededException expected"");}catch(MaxCountExceededException e){}}"
"org.apache.commons.math3.util.IncrementorTest.testAccessor",0,"@Test public void testAccessor(){final Incrementor i=new Incrementor();i.setMaximalCount(10);Assert.assertEquals(10,i.getMaximalCount());Assert.assertEquals(0,i.getCount());}"
"org.apache.commons.math3.util.IncrementorTest.testBelowMaxCount",0,"@Test public void testBelowMaxCount(){final Incrementor i=new Incrementor();i.setMaximalCount(3);i.incrementCount();i.incrementCount();i.incrementCount();Assert.assertEquals(3,i.getCount());}"
"org.apache.commons.math3.util.IncrementorTest.testAboveMaxCount",0,"@Test(expected=MaxCountExceededException.class)public void testAboveMaxCount(){final Incrementor i=new Incrementor();i.setMaximalCount(3);i.incrementCount();i.incrementCount();i.incrementCount();i.incrementCount();}"
"org.apache.commons.math3.util.IncrementorTest.testAlternateException",0,"@Test(expected=TooManyEvaluationsException.class)public void testAlternateException(){final Incrementor.MaxCountExceededCallback cb=new Incrementor.MaxCountExceededCallback(){/** * {@inheritDoc}*/public void trigger(int max){throw new TooManyEvaluationsException(max);}};final Incrementor i=new Incrementor(0,cb);i.incrementCount();}"
"org.apache.commons.math3.util.IncrementorTest.testReset",0,"@Test public void testReset(){final Incrementor i=new Incrementor();i.setMaximalCount(3);i.incrementCount();i.incrementCount();i.incrementCount();Assert.assertEquals(3,i.getCount());i.resetCount();Assert.assertEquals(0,i.getCount());}"
"org.apache.commons.math3.util.IncrementorTest.testBulkIncrement",0,"@Test public void testBulkIncrement(){final Incrementor i=new Incrementor();i.setMaximalCount(3);i.incrementCount(2);Assert.assertEquals(2,i.getCount());i.incrementCount(1);Assert.assertEquals(3,i.getCount());}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testLongly",0,"/** * Test Longley dataset against R.*/@Override @Test public void testLongly(){RealMatrix matrix=createRealMatrix(longleyData,16,7);SpearmansCorrelation corrInstance=new SpearmansCorrelation(matrix);RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();double[]rData=new double[]{1,0.982352941176471,0.985294117647059,0.564705882352941,0.2264705882352941,0.976470588235294,0.976470588235294,0.982352941176471,1,0.997058823529412,0.664705882352941,0.2205882352941176,0.997058823529412,0.997058823529412,0.985294117647059,0.997058823529412,1,0.638235294117647,0.2235294117647059,0.9941176470588236,0.9941176470588236,0.564705882352941,0.664705882352941,0.638235294117647,1,-0.3411764705882353,0.685294117647059,0.685294117647059,0.2264705882352941,0.2205882352941176,0.2235294117647059,-0.3411764705882353,1,0.2264705882352941,0.2264705882352941,0.976470588235294,0.997058823529412,0.9941176470588236,0.685294117647059,0.2264705882352941,1,1,0.976470588235294,0.997058823529412,0.9941176470588236,0.685294117647059,0.2264705882352941,1,1};TestUtils.assertEquals(""Spearman's correlation matrix"",createRealMatrix(rData,7,7),correlationMatrix,10E-15);}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testSwiss",0,"/** * Test R swiss fertility dataset.*/@Test public void testSwiss(){RealMatrix matrix=createRealMatrix(swissData,47,5);SpearmansCorrelation corrInstance=new SpearmansCorrelation(matrix);RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();double[]rData=new double[]{1,0.2426642769364176,-0.660902996352354,-0.443257690360988,0.4136455623012432,0.2426642769364176,1,-0.598859938748963,-0.650463814145816,0.2886878090882852,-0.660902996352354,-0.598859938748963,1,0.674603831406147,-0.4750575257171745,-0.443257690360988,-0.650463814145816,0.674603831406147,1,-0.1444163088302244,0.4136455623012432,0.2886878090882852,-0.4750575257171745,-0.1444163088302244,1};TestUtils.assertEquals(""Spearman's correlation matrix"",createRealMatrix(rData,5,5),correlationMatrix,10E-15);}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testConstant",0,"/** * Constant column*/@Override @Test public void testConstant(){double[]noVariance=new double[]{1,1,1,1};double[]values=new double[]{1,2,3,4};Assert.assertTrue(Double.isNaN(new SpearmansCorrelation().correlation(noVariance,values)));}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testInsufficientData",0,"/** * Insufficient data*/@Override @Test public void testInsufficientData(){double[]one=new double[]{1};double[]two=new double[]{2};try {new SpearmansCorrelation().correlation(one,two);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}RealMatrix matrix=new BlockRealMatrix(new double[][]{{0},{1}});try {new SpearmansCorrelation(matrix);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testConsistency",0,"@Override @Test public void testConsistency(){RealMatrix matrix=createRealMatrix(longleyData,16,7);SpearmansCorrelation corrInstance=new SpearmansCorrelation(matrix);double[][]data=matrix.getData();double[]x=matrix.getColumn(0);double[]y=matrix.getColumn(1);Assert.assertEquals(new SpearmansCorrelation().correlation(x,y),corrInstance.getCorrelationMatrix().getEntry(0,1),Double.MIN_VALUE);TestUtils.assertEquals(""Correlation matrix"",corrInstance.getCorrelationMatrix(),new SpearmansCorrelation().computeCorrelationMatrix(data),Double.MIN_VALUE);}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testMath891Array",0,"@Test public void testMath891Array(){final double[]xArray=new double[]{Double.NaN,1.9,2,100,3};final double[]yArray=new double[]{10,2,10,Double.NaN,4};NaturalRanking ranking=new NaturalRanking(NaNStrategy.REMOVED);SpearmansCorrelation spearman=new SpearmansCorrelation(ranking);Assert.assertEquals(0.5,spearman.correlation(xArray,yArray),Double.MIN_VALUE);}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testMath891Matrix",0,"@Test public void testMath891Matrix(){final double[]xArray=new double[]{Double.NaN,1.9,2,100,3};final double[]yArray=new double[]{10,2,10,Double.NaN,4};RealMatrix matrix=MatrixUtils.createRealMatrix(xArray.length,2);for (int i=0;i < xArray.length;i++){matrix.addToEntry(i,0,xArray[i]);matrix.addToEntry(i,1,yArray[i]);}NaturalRanking ranking=new NaturalRanking(NaNStrategy.REMOVED);SpearmansCorrelation spearman=new SpearmansCorrelation(matrix,ranking);Assert.assertEquals(0.5,spearman.getCorrelationMatrix().getEntry(0,1),Double.MIN_VALUE);}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testStdErrorConsistency",0,"@Override @Test public void testStdErrorConsistency(){}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testCovarianceConsistency",0,"@Override @Test public void testCovarianceConsistency(){}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testSwissFertility",0,"/** * Test R Swiss fertility dataset against R.*/@Test public void testSwissFertility(){RealMatrix matrix=createRealMatrix(swissData,47,5);PearsonsCorrelation corrInstance=new PearsonsCorrelation(matrix);RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();double[]rData=new double[]{1.0000000000000000,0.3530791836199747,-0.6458827064572875,-0.6637888570350691,0.4636847006517939,0.3530791836199747,1.0000000000000000,-0.6865422086171366,-0.6395225189483201,0.4010950530487398,-0.6458827064572875,-0.6865422086171366,1.0000000000000000,0.6984152962884830,-0.5727418060641666,-0.6637888570350691,-0.6395225189483201,0.6984152962884830,1.0000000000000000,-0.1538589170909148,0.4636847006517939,0.4010950530487398,-0.5727418060641666,-0.1538589170909148,1.0000000000000000};TestUtils.assertEquals(""correlation matrix"",createRealMatrix(rData,5,5),correlationMatrix,10E-15);double[]rPvalues=new double[]{0.01491720061472623,9.45043734069043e-07,9.95151527133974e-08,3.658616965962355e-07,1.304590105694471e-06,4.811397236181847e-08,0.001028523190118147,0.005204433539191644,2.588307925380906e-05,0.301807756132683};RealMatrix rPMatrix=createLowerTriangularRealMatrix(rPvalues,5);fillUpper(rPMatrix,0d);TestUtils.assertEquals(""correlation p values"",rPMatrix,corrInstance.getCorrelationPValues(),10E-15);}"
"org.apache.commons.math3.stat.correlation.SpearmansRankCorrelationTest.testPValueNearZero",0,"/** * Test p-value near 0. JIRA: MATH-371*/@Test public void testPValueNearZero(){int dimension=120;double[][]data=new double[dimension][2];for (int i=0;i < dimension;i++){data[i][0]=i;data[i][1]=i + 1 / ((double)i + 1);}PearsonsCorrelation corrInstance=new PearsonsCorrelation(data);Assert.assertTrue(corrInstance.getCorrelationPValues().getEntry(0,1)> 0);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testStats",0,"/** * test stats */@Test public void testStats(){SummaryStatistics u=createSummaryStatistics();Assert.assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(twoF);u.addValue(twoL);u.addValue(three);Assert.assertEquals(""N"",n,u.getN(),tolerance);Assert.assertEquals(""sum"",sum,u.getSum(),tolerance);Assert.assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);Assert.assertEquals(""var"",var,u.getVariance(),tolerance);Assert.assertEquals(""population var"",popVar,u.getPopulationVariance(),tolerance);Assert.assertEquals(""std"",std,u.getStandardDeviation(),tolerance);Assert.assertEquals(""mean"",mean,u.getMean(),tolerance);Assert.assertEquals(""min"",min,u.getMin(),tolerance);Assert.assertEquals(""max"",max,u.getMax(),tolerance);u.clear();Assert.assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){SummaryStatistics u=createSummaryStatistics();Assert.assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));Assert.assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));Assert.assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));u.addValue(one);Assert.assertTrue(""mean should be one (n = 1)"",u.getMean()== one);Assert.assertTrue(""geometric should be one (n = 1)instead it is "" + u.getGeometricMean(),u.getGeometricMean()== one);Assert.assertTrue(""Std should be zero (n = 1)"",u.getStandardDeviation()== 0.0);Assert.assertTrue(""variance should be zero (n = 1)"",u.getVariance()== 0.0);u.addValue(twoF);Assert.assertTrue(""Std should not be zero (n = 2)"",u.getStandardDeviation()!= 0.0);Assert.assertTrue(""variance should not be zero (n = 2)"",u.getVariance()!= 0.0);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testProductAndGeometricMean",0,"@Test public void testProductAndGeometricMean(){SummaryStatistics u=createSummaryStatistics();u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);Assert.assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testNaNContracts",0,"@Test public void testNaNContracts(){SummaryStatistics u=createSummaryStatistics();Assert.assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));Assert.assertTrue(""min not NaN"",Double.isNaN(u.getMin()));Assert.assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));Assert.assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(1.0);Assert.assertEquals(""mean not expected"",1.0,u.getMean(),Double.MIN_VALUE);Assert.assertEquals(""variance not expected"",0.0,u.getVariance(),Double.MIN_VALUE);Assert.assertEquals(""geometric mean not expected"",1.0,u.getGeometricMean(),Double.MIN_VALUE);u.addValue(-1.0);Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(0.0);Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testGetSummary",0,"@Test public void testGetSummary(){SummaryStatistics u=createSummaryStatistics();StatisticalSummary summary=u.getSummary();verifySummary(u,summary);u.addValue(1d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testSerialization",0,"@Test public void testSerialization(){SummaryStatistics u=createSummaryStatistics();TestUtils.checkSerializedEquality(u);SummaryStatistics s=(SummaryStatistics)TestUtils.serializeAndRecover(u);StatisticalSummary summary=s.getSummary();verifySummary(u,summary);u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);u.addValue(5d);TestUtils.checkSerializedEquality(u);s=(SummaryStatistics)TestUtils.serializeAndRecover(u);summary=s.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){SummaryStatistics u=createSummaryStatistics();SummaryStatistics t=null;int emptyHash=u.hashCode();Assert.assertTrue(""reflexive"",u.equals(u));Assert.assertFalse(""non-null compared to null"",u.equals(t));Assert.assertFalse(""wrong type"",u.equals(Double.valueOf(0)));t=createSummaryStatistics();Assert.assertTrue(""empty instances should be equal"",t.equals(u));Assert.assertTrue(""empty instances should be equal"",u.equals(t));Assert.assertEquals(""empty hash code"",emptyHash,t.hashCode());u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);Assert.assertFalse(""different n's should make instances not equal"",t.equals(u));Assert.assertFalse(""different n's should make instances not equal"",u.equals(t));Assert.assertTrue(""different n's should make hashcodes different"",u.hashCode()!= t.hashCode());t.addValue(2d);t.addValue(1d);t.addValue(3d);t.addValue(4d);Assert.assertTrue(""summaries based on same data should be equal"",t.equals(u));Assert.assertTrue(""summaries based on same data should be equal"",u.equals(t));Assert.assertEquals(""summaries based on same data should have same hashcodes"",u.hashCode(),t.hashCode());u.clear();t.clear();Assert.assertTrue(""empty instances should be equal"",t.equals(u));Assert.assertTrue(""empty instances should be equal"",u.equals(t));Assert.assertEquals(""empty hash code"",emptyHash,t.hashCode());Assert.assertEquals(""empty hash code"",emptyHash,u.hashCode());}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testCopy",0,"@Test public void testCopy(){SummaryStatistics u=createSummaryStatistics();u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);SummaryStatistics v=new SummaryStatistics(u);Assert.assertEquals(u,v);Assert.assertEquals(v,u);u.addValue(7d);u.addValue(9d);u.addValue(11d);u.addValue(23d);v.addValue(7d);v.addValue(9d);v.addValue(11d);v.addValue(23d);Assert.assertEquals(u,v);Assert.assertEquals(v,u);u.clear();u.setSumImpl(new Sum());SummaryStatistics.copy(u,v);Assert.assertEquals(u.getSumImpl(),v.getSumImpl());}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testSetterInjection",0,"@Test public void testSetterInjection(){SummaryStatistics u=createSummaryStatistics();u.setMeanImpl(new Sum());u.setSumLogImpl(new Sum());u.addValue(1);u.addValue(3);Assert.assertEquals(4,u.getMean(),1E-14);Assert.assertEquals(4,u.getSumOfLogs(),1E-14);Assert.assertEquals(FastMath.exp(2),u.getGeometricMean(),1E-14);u.clear();u.addValue(1);u.addValue(2);Assert.assertEquals(3,u.getMean(),1E-14);u.clear();u.setMeanImpl(new Mean());}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testSetterIllegalState",0,"@Test public void testSetterIllegalState(){SummaryStatistics u=createSummaryStatistics();u.addValue(1);u.addValue(3);try {u.setMeanImpl(new Sum());Assert.fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testOverrideVarianceWithMathClass",0,"/** * JIRA: MATH-691*/@Test public void testOverrideVarianceWithMathClass(){double[]scores={1,2,3,4};SummaryStatistics stats=new SummaryStatistics();stats.setVarianceImpl(new Variance(false));for(double i : scores){stats.addValue(i);}Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(),0);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testOverrideMeanWithMathClass",0,"@Test public void testOverrideMeanWithMathClass(){double[]scores={1,2,3,4};SummaryStatistics stats=new SummaryStatistics();stats.setMeanImpl(new Mean());for(double i : scores){stats.addValue(i);}Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(),0);}"
"org.apache.commons.math3.stat.descriptive.SummaryStatisticsTest.testOverrideGeoMeanWithMathClass",0,"@Test public void testOverrideGeoMeanWithMathClass(){double[]scores={1,2,3,4};SummaryStatistics stats=new SummaryStatistics();stats.setGeoMeanImpl(new GeometricMean());for(double i : scores){stats.addValue(i);}Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testIdentity",0,"@Test public void testIdentity(){Rotation r=Rotation.IDENTITY;checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_K);checkAngle(r.getAngle(),0);r=new Rotation(-1,0,0,0,false);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_K);checkAngle(r.getAngle(),0);r=new Rotation(42,0,0,0,true);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_K);checkAngle(r.getAngle(),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testAxisAngle",0,"@Test public void testAxisAngle()throws MathIllegalArgumentException {Rotation r=new Rotation(new Vector3D(10,10,10),2 * FastMath.PI / 3);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_J);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_K);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_I);double s=1 / FastMath.sqrt(3);checkVector(r.getAxis(),new Vector3D(s,s,s));checkAngle(r.getAngle(),2 * FastMath.PI / 3);try {new Rotation(new Vector3D(0,0,0),2 * FastMath.PI / 3);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}r=new Rotation(Vector3D.PLUS_K,1.5 * FastMath.PI);checkVector(r.getAxis(),new Vector3D(0,0,-1));checkAngle(r.getAngle(),0.5 * FastMath.PI);r=new Rotation(Vector3D.PLUS_J,FastMath.PI);checkVector(r.getAxis(),Vector3D.PLUS_J);checkAngle(r.getAngle(),FastMath.PI);checkVector(Rotation.IDENTITY.getAxis(),Vector3D.PLUS_I);}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testRevert",0,"@Test public void testRevert(){Rotation r=new Rotation(0.001,0.36,0.48,0.8,true);Rotation reverted=r.revert();checkRotation(r.applyTo(reverted),1,0,0,0);checkRotation(reverted.applyTo(r),1,0,0,0);Assert.assertEquals(r.getAngle(),reverted.getAngle(),1.0e-12);Assert.assertEquals(-1,Vector3D.dotProduct(r.getAxis(),reverted.getAxis()),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testVectorOnePair",0,"@Test public void testVectorOnePair()throws MathArithmeticException {Vector3D u=new Vector3D(3,2,1);Vector3D v=new Vector3D(-4,2,2);Rotation r=new Rotation(u,v);checkVector(r.applyTo(u.scalarMultiply(v.getNorm())),v.scalarMultiply(u.getNorm()));checkAngle(new Rotation(u,u.negate()).getAngle(),FastMath.PI);try {new Rotation(u,Vector3D.ZERO);Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testVectorTwoPairs",0,"@Test public void testVectorTwoPairs()throws MathArithmeticException {Vector3D u1=new Vector3D(3,0,0);Vector3D u2=new Vector3D(0,5,0);Vector3D v1=new Vector3D(0,0,2);Vector3D v2=new Vector3D(-2,0,2);Rotation r=new Rotation(u1,u2,v1,v2);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_K);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.MINUS_I);r=new Rotation(u1,u2,u1.negate(),u2.negate());Vector3D axis=r.getAxis();if (Vector3D.dotProduct(axis,Vector3D.PLUS_K)> 0){checkVector(axis,Vector3D.PLUS_K);}else {checkVector(axis,Vector3D.MINUS_K);}checkAngle(r.getAngle(),FastMath.PI);double sqrt=FastMath.sqrt(2)/ 2;r=new Rotation(Vector3D.PLUS_I,Vector3D.PLUS_J,new Vector3D(0.5,0.5,sqrt),new Vector3D(0.5,0.5,-sqrt));checkRotation(r,sqrt,0.5,0.5,0);r=new Rotation(u1,u2,u1,Vector3D.crossProduct(u1,u2));checkRotation(r,sqrt,-sqrt,0,0);checkRotation(new Rotation(u1,u2,u1,u2),1,0,0,0);try {new Rotation(u1,u2,Vector3D.ZERO,v2);Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testMatrix",0,"@Test public void testMatrix()throws NotARotationMatrixException {try {new Rotation(new double[][]{{0.0,1.0,0.0},{1.0,0.0,0.0}},1.0e-7);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}try {new Rotation(new double[][]{{0.445888,0.797184,-0.407040},{0.821760,-0.184320,0.539200},{-0.354816,0.574912,0.737280}},1.0e-7);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}try {new Rotation(new double[][]{{0.4,0.8,-0.4},{-0.4,0.6,0.7},{0.8,-0.2,0.5}},1.0e-15);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}checkRotation(new Rotation(new double[][]{{0.445888,0.797184,-0.407040},{-0.354816,0.574912,0.737280},{0.821760,-0.184320,0.539200}},1.0e-10),0.8,0.288,0.384,0.36);checkRotation(new Rotation(new double[][]{{0.539200,0.737280,0.407040},{0.184320,-0.574912,0.797184},{0.821760,-0.354816,-0.445888}},1.0e-10),0.36,0.8,0.288,0.384);checkRotation(new Rotation(new double[][]{{-0.445888,0.797184,-0.407040},{0.354816,0.574912,0.737280},{0.821760,0.184320,-0.539200}},1.0e-10),0.384,0.36,0.8,0.288);checkRotation(new Rotation(new double[][]{{-0.539200,0.737280,0.407040},{-0.184320,-0.574912,0.797184},{0.821760,0.354816,0.445888}},1.0e-10),0.288,0.384,0.36,0.8);double[][]m1={{0.0,1.0,0.0},{0.0,0.0,1.0},{1.0,0.0,0.0}};Rotation r=new Rotation(m1,1.0e-7);checkVector(r.applyTo(Vector3D.PLUS_I),Vector3D.PLUS_K);checkVector(r.applyTo(Vector3D.PLUS_J),Vector3D.PLUS_I);checkVector(r.applyTo(Vector3D.PLUS_K),Vector3D.PLUS_J);double[][]m2={{0.83203,-0.55012,-0.07139},{0.48293,0.78164,-0.39474},{0.27296,0.29396,0.91602}};r=new Rotation(m2,1.0e-12);double[][]m3=r.getMatrix();double d00=m2[0][0]- m3[0][0];double d01=m2[0][1]- m3[0][1];double d02=m2[0][2]- m3[0][2];double d10=m2[1][0]- m3[1][0];double d11=m2[1][1]- m3[1][1];double d12=m2[1][2]- m3[1][2];double d20=m2[2][0]- m3[2][0];double d21=m2[2][1]- m3[2][1];double d22=m2[2][2]- m3[2][2];Assert.assertTrue(FastMath.abs(d00)< 6.0e-6);Assert.assertTrue(FastMath.abs(d01)< 6.0e-6);Assert.assertTrue(FastMath.abs(d02)< 6.0e-6);Assert.assertTrue(FastMath.abs(d10)< 6.0e-6);Assert.assertTrue(FastMath.abs(d11)< 6.0e-6);Assert.assertTrue(FastMath.abs(d12)< 6.0e-6);Assert.assertTrue(FastMath.abs(d20)< 6.0e-6);Assert.assertTrue(FastMath.abs(d21)< 6.0e-6);Assert.assertTrue(FastMath.abs(d22)< 6.0e-6);Assert.assertTrue(FastMath.abs(d00)> 4.0e-7);Assert.assertTrue(FastMath.abs(d01)> 4.0e-7);Assert.assertTrue(FastMath.abs(d02)> 4.0e-7);Assert.assertTrue(FastMath.abs(d10)> 4.0e-7);Assert.assertTrue(FastMath.abs(d11)> 4.0e-7);Assert.assertTrue(FastMath.abs(d12)> 4.0e-7);Assert.assertTrue(FastMath.abs(d20)> 4.0e-7);Assert.assertTrue(FastMath.abs(d21)> 4.0e-7);Assert.assertTrue(FastMath.abs(d22)> 4.0e-7);for (int i=0;i < 3;++i){for (int j=0;j < 3;++j){double m3tm3=m3[i][0]* m3[j][0]+ m3[i][1]* m3[j][1]+ m3[i][2]* m3[j][2];if (i == j){Assert.assertTrue(FastMath.abs(m3tm3 - 1.0)< 1.0e-10);}else {Assert.assertTrue(FastMath.abs(m3tm3)< 1.0e-10);}}}checkVector(r.applyTo(Vector3D.PLUS_I),new Vector3D(m3[0][0],m3[1][0],m3[2][0]));checkVector(r.applyTo(Vector3D.PLUS_J),new Vector3D(m3[0][1],m3[1][1],m3[2][1]));checkVector(r.applyTo(Vector3D.PLUS_K),new Vector3D(m3[0][2],m3[1][2],m3[2][2]));double[][]m4={{1.0,0.0,0.0},{0.0,-1.0,0.0},{0.0,0.0,-1.0}};r=new Rotation(m4,1.0e-7);checkAngle(r.getAngle(),FastMath.PI);try {double[][]m5={{0.0,0.0,1.0},{0.0,1.0,0.0},{1.0,0.0,0.0}};r=new Rotation(m5,1.0e-7);Assert.fail(""got "" + r + "",should have caught an exception"");}catch(NotARotationMatrixException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testAngles",0,"@Test public void testAngles()throws CardanEulerSingularityException {RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};for (int i=0;i < CardanOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=0.3){for (double alpha2=-1.55;alpha2 < 1.55;alpha2+=0.3){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=0.3){Rotation r=new Rotation(CardanOrders[i],alpha1,alpha2,alpha3);double[]angles=r.getAngles(CardanOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};for (int i=0;i < EulerOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=0.3){for (double alpha2=0.05;alpha2 < 3.1;alpha2+=0.3){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=0.3){Rotation r=new Rotation(EulerOrders[i],alpha1,alpha2,alpha3);double[]angles=r.getAngles(EulerOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testSingularities",0,"@Test public void testSingularities(){RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};double[]singularCardanAngle={FastMath.PI / 2,-FastMath.PI / 2};for (int i=0;i < CardanOrders.length;++i){for (int j=0;j < singularCardanAngle.length;++j){Rotation r=new Rotation(CardanOrders[i],0.1,singularCardanAngle[j],0.3);try {r.getAngles(CardanOrders[i]);Assert.fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};double[]singularEulerAngle={0,FastMath.PI};for (int i=0;i < EulerOrders.length;++i){for (int j=0;j < singularEulerAngle.length;++j){Rotation r=new Rotation(EulerOrders[i],0.1,singularEulerAngle[j],0.3);try {r.getAngles(EulerOrders[i]);Assert.fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testQuaternion",0,"@Test public void testQuaternion()throws MathIllegalArgumentException {Rotation r1=new Rotation(new Vector3D(2,-3,5),1.7);double n=23.5;Rotation r2=new Rotation(n * r1.getQ0(),n * r1.getQ1(),n * r1.getQ2(),n * r1.getQ3(),true);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);checkVector(r2.applyTo(u),r1.applyTo(u));}}}r1=new Rotation(0.288,0.384,0.36,0.8,false);checkRotation(r1,-r1.getQ0(),-r1.getQ1(),-r1.getQ2(),-r1.getQ3());}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testCompose",0,"@Test public void testCompose()throws MathIllegalArgumentException {Rotation r1=new Rotation(new Vector3D(2,-3,5),1.7);Rotation r2=new Rotation(new Vector3D(-1,3,2),0.3);Rotation r3=r2.applyTo(r1);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);checkVector(r2.applyTo(r1.applyTo(u)),r3.applyTo(u));}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testComposeInverse",0,"@Test public void testComposeInverse()throws MathIllegalArgumentException {Rotation r1=new Rotation(new Vector3D(2,-3,5),1.7);Rotation r2=new Rotation(new Vector3D(-1,3,2),0.3);Rotation r3=r2.applyInverseTo(r1);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);checkVector(r2.applyInverseTo(r1.applyTo(u)),r3.applyTo(u));}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testArray",0,"@Test public void testArray()throws MathIllegalArgumentException {Rotation r=new Rotation(new Vector3D(2,-3,5),1.7);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);Vector3D v=r.applyTo(u);double[]inOut=new double[]{x,y,z};r.applyTo(inOut,inOut);Assert.assertEquals(v.getX(),inOut[0],1.0e-10);Assert.assertEquals(v.getY(),inOut[1],1.0e-10);Assert.assertEquals(v.getZ(),inOut[2],1.0e-10);r.applyInverseTo(inOut,inOut);Assert.assertEquals(u.getX(),inOut[0],1.0e-10);Assert.assertEquals(u.getY(),inOut[1],1.0e-10);Assert.assertEquals(u.getZ(),inOut[2],1.0e-10);}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testApplyInverseTo",0,"@Test public void testApplyInverseTo()throws MathIllegalArgumentException {Rotation r=new Rotation(new Vector3D(2,-3,5),1.7);for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){Vector3D u=new Vector3D(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));r.applyInverseTo(r.applyTo(u));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}r=Rotation.IDENTITY;for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){Vector3D u=new Vector3D(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}r=new Rotation(Vector3D.PLUS_K,FastMath.PI);for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){Vector3D u=new Vector3D(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testIssue639",0,"@Test public void testIssue639()throws MathArithmeticException {Vector3D u1=new Vector3D(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-3822921525525679.0 / 4294967296.0);Vector3D u2=new Vector3D(-5712344449280879.0 / 2097152.0,-2275058564560979.0 / 1048576.0,4423475992255071.0 / 65536.0);Rotation rot=new Rotation(u1,u2,Vector3D.PLUS_I,Vector3D.PLUS_K);Assert.assertEquals(0.6228370359608200639829222,rot.getQ0(),1.0e-15);Assert.assertEquals(0.0257707621456498790029987,rot.getQ1(),1.0e-15);Assert.assertEquals(-0.0000000002503012255839931,rot.getQ2(),1.0e-15);Assert.assertEquals(-0.7819270390861109450724902,rot.getQ3(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationTest.testIssue801",0,"@Test public void testIssue801()throws MathArithmeticException {Vector3D u1=new Vector3D(0.9999988431610581,-0.0015210774290851095,0.0);Vector3D u2=new Vector3D(0.0,0.0,1.0);Vector3D v1=new Vector3D(0.9999999999999999,0.0,0.0);Vector3D v2=new Vector3D(0.0,0.0,-1.0);Rotation quat=new Rotation(u1,u2,v1,v2);double q2=quat.getQ0()* quat.getQ0()+ quat.getQ1()* quat.getQ1()+ quat.getQ2()* quat.getQ2()+ quat.getQ3()* quat.getQ3();Assert.assertEquals(1.0,q2,1.0e-14);Assert.assertEquals(0.0,Vector3D.angle(v1,quat.applyTo(u1)),1.0e-14);Assert.assertEquals(0.0,Vector3D.angle(v2,quat.applyTo(u2)),1.0e-14);}"
"org.apache.commons.math3.analysis.solvers.MullerSolver2Test.testSinFunction",0,"/** * Test of solver for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateSolver solver=new MullerSolver2();double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=FastMath.PI;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.MullerSolver2Test.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateSolver solver=new MullerSolver2();double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.MullerSolver2Test.testExpm1Function",0,"/** * Test of solver for the exponential function. <p> It takes 25 to 50 iterations for the last two tests to converge.*/@Test public void testExpm1Function(){UnivariateFunction f=new Expm1();UnivariateSolver solver=new MullerSolver2();double min,max,expected,result,tolerance;min=-1.0;max=2.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-20.0;max=10.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-50.0;max=100.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.MullerSolver2Test.testParameters",0,"/** * Test of parameters for the solver.*/@Test public void testParameters(){UnivariateFunction f=new Sin();UnivariateSolver solver=new MullerSolver2();try {solver.solve(100,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {solver.solve(100,f,2,3);Assert.fail(""Expecting NoBracketingException - no bracketing"");}catch(NoBracketingException ex){}}"
"org.apache.commons.math3.util.MultidimensionalCounterTest.testPreconditions",0,"@Test public void testPreconditions(){MultidimensionalCounter c;try {c=new MultidimensionalCounter(0,1);Assert.fail(""NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException e){}try {c=new MultidimensionalCounter(2,0);Assert.fail(""NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException e){}try {c=new MultidimensionalCounter(-1,1);Assert.fail(""NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException e){}c=new MultidimensionalCounter(2,3);try {c.getCount(1,1,1);Assert.fail(""DimensionMismatchException expected"");}catch(DimensionMismatchException e){}try {c.getCount(3,1);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException e){}try {c.getCount(0,-1);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException e){}try {c.getCounts(-1);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException e){}try {c.getCounts(6);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException e){}}"
"org.apache.commons.math3.util.MultidimensionalCounterTest.testIteratorPreconditions",0,"@Test public void testIteratorPreconditions(){MultidimensionalCounter.Iterator iter=(new MultidimensionalCounter(2,3)).iterator();try {iter.getCount(-1);Assert.fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}try {iter.getCount(2);Assert.fail(""IndexOutOfBoundsException expected"");}catch(IndexOutOfBoundsException e){}}"
"org.apache.commons.math3.util.MultidimensionalCounterTest.testMulti2UniConversion",0,"@Test public void testMulti2UniConversion(){final MultidimensionalCounter c=new MultidimensionalCounter(2,4,5);Assert.assertEquals(c.getCount(1,2,3),33);}"
"org.apache.commons.math3.util.MultidimensionalCounterTest.testAccessors",0,"@Test public void testAccessors(){final int[]originalSize=new int[]{2,6,5};final MultidimensionalCounter c=new MultidimensionalCounter(originalSize);final int nDim=c.getDimension();Assert.assertEquals(nDim,originalSize.length);final int[]size=c.getSizes();for (int i=0;i < nDim;i++){Assert.assertEquals(originalSize[i],size[i]);}}"
"org.apache.commons.math3.util.MultidimensionalCounterTest.testIterationConsistency",0,"@Test public void testIterationConsistency(){final MultidimensionalCounter c=new MultidimensionalCounter(2,3,4);final int[][]expected=new int[][]{{0,0,0},{0,0,1},{0,0,2},{0,0,3},{0,1,0},{0,1,1},{0,1,2},{0,1,3},{0,2,0},{0,2,1},{0,2,2},{0,2,3},{1,0,0},{1,0,1},{1,0,2},{1,0,3},{1,1,0},{1,1,1},{1,1,2},{1,1,3},{1,2,0},{1,2,1},{1,2,2},{1,2,3}};final int totalSize=c.getSize();final int nDim=c.getDimension();final MultidimensionalCounter.Iterator iter=c.iterator();for (int i=0;i < totalSize;i++){if (!iter.hasNext()){Assert.fail(""Too short"");}final int uniDimIndex=iter.next();Assert.assertEquals(""Wrong iteration at "" + i,i,uniDimIndex);for (int dimIndex=0;dimIndex < nDim;dimIndex++){Assert.assertEquals(""Wrong multidimensional index for ["" + i + ""][""+ dimIndex+ ""]"",expected[i][dimIndex],iter.getCount(dimIndex));}Assert.assertEquals(""Wrong unidimensional index for ["" + i + ""]"",c.getCount(expected[i]),uniDimIndex);final int[]indices=c.getCounts(uniDimIndex);for (int dimIndex=0;dimIndex < nDim;dimIndex++){Assert.assertEquals(""Wrong multidimensional index for ["" + i + ""][""+ dimIndex+ ""]"",expected[i][dimIndex],indices[dimIndex]);}}if (iter.hasNext()){Assert.fail(""Too long"");}}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testEndPoints",0,"@Test public void testEndPoints(){Vector2D p1=new Vector2D(-1,-7);Vector2D p2=new Vector2D(7,-1);Segment segment=new Segment(p1,p2,new Line(p1,p2));SubLine sub=new SubLine(segment);List<Segment> segments=sub.getSegments();Assert.assertEquals(1,segments.size());Assert.assertEquals(0.0,new Vector2D(-1,-7).distance(segments.get(0).getStart()),1.0e-10);Assert.assertEquals(0.0,new Vector2D(7,-1).distance(segments.get(0).getEnd()),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testNoEndPoints",0,"@Test public void testNoEndPoints(){SubLine wholeLine=new Line(new Vector2D(-1,7),new Vector2D(7,1)).wholeHyperplane();List<Segment> segments=wholeLine.getSegments();Assert.assertEquals(1,segments.size());Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX())&& segments.get(0).getStart().getX()< 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY())&& segments.get(0).getStart().getY()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX())&& segments.get(0).getEnd().getX()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY())&& segments.get(0).getEnd().getY()< 0);}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testNoSegments",0,"@Test public void testNoSegments(){SubLine empty=new SubLine(new Line(new Vector2D(-1,-7),new Vector2D(7,-1)),new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));List<Segment> segments=empty.getSegments();Assert.assertEquals(0,segments.size());}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testSeveralSegments",0,"@Test public void testSeveralSegments(){SubLine twoSubs=new SubLine(new Line(new Vector2D(-1,-7),new Vector2D(7,-1)),new RegionFactory<Euclidean1D>().union(new IntervalsSet(1,2),new IntervalsSet(3,4)));List<Segment> segments=twoSubs.getSegments();Assert.assertEquals(2,segments.size());}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testHalfInfiniteNeg",0,"@Test public void testHalfInfiniteNeg(){SubLine empty=new SubLine(new Line(new Vector2D(-1,-7),new Vector2D(7,-1)),new IntervalsSet(Double.NEGATIVE_INFINITY,0.0));List<Segment> segments=empty.getSegments();Assert.assertEquals(1,segments.size());Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX())&& segments.get(0).getStart().getX()< 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY())&& segments.get(0).getStart().getY()< 0);Assert.assertEquals(0.0,new Vector2D(3,-4).distance(segments.get(0).getEnd()),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testHalfInfinitePos",0,"@Test public void testHalfInfinitePos(){SubLine empty=new SubLine(new Line(new Vector2D(-1,-7),new Vector2D(7,-1)),new IntervalsSet(0.0,Double.POSITIVE_INFINITY));List<Segment> segments=empty.getSegments();Assert.assertEquals(1,segments.size());Assert.assertEquals(0.0,new Vector2D(3,-4).distance(segments.get(0).getStart()),1.0e-10);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX())&& segments.get(0).getEnd().getX()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY())&& segments.get(0).getEnd().getY()> 0);}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionInsideInside",0,"@Test public void testIntersectionInsideInside(){SubLine sub1=new SubLine(new Vector2D(1,1),new Vector2D(3,1));SubLine sub2=new SubLine(new Vector2D(2,0),new Vector2D(2,2));Assert.assertEquals(0.0,new Vector2D(2,1).distance(sub1.intersection(sub2,true)),1.0e-12);Assert.assertEquals(0.0,new Vector2D(2,1).distance(sub1.intersection(sub2,false)),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionInsideBoundary",0,"@Test public void testIntersectionInsideBoundary(){SubLine sub1=new SubLine(new Vector2D(1,1),new Vector2D(3,1));SubLine sub2=new SubLine(new Vector2D(2,0),new Vector2D(2,1));Assert.assertEquals(0.0,new Vector2D(2,1).distance(sub1.intersection(sub2,true)),1.0e-12);Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionInsideOutside",0,"@Test public void testIntersectionInsideOutside(){SubLine sub1=new SubLine(new Vector2D(1,1),new Vector2D(3,1));SubLine sub2=new SubLine(new Vector2D(2,0),new Vector2D(2,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionBoundaryBoundary",0,"@Test public void testIntersectionBoundaryBoundary(){SubLine sub1=new SubLine(new Vector2D(1,1),new Vector2D(2,1));SubLine sub2=new SubLine(new Vector2D(2,0),new Vector2D(2,1));Assert.assertEquals(0.0,new Vector2D(2,1).distance(sub1.intersection(sub2,true)),1.0e-12);Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionBoundaryOutside",0,"@Test public void testIntersectionBoundaryOutside(){SubLine sub1=new SubLine(new Vector2D(1,1),new Vector2D(2,1));SubLine sub2=new SubLine(new Vector2D(2,0),new Vector2D(2,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionOutsideOutside",0,"@Test public void testIntersectionOutsideOutside(){SubLine sub1=new SubLine(new Vector2D(1,1),new Vector2D(1.5,1));SubLine sub2=new SubLine(new Vector2D(2,0),new Vector2D(2,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.twod.SubLineTest.testIntersectionParallel",0,"@Test public void testIntersectionParallel(){final SubLine sub1=new SubLine(new Vector2D(0,1),new Vector2D(0,2));final SubLine sub2=new SubLine(new Vector2D(66,3),new Vector2D(66,4));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix m2=createSparseMatrix(testData2);Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());Assert.assertTrue(""testData is square"",m.isSquare());Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);Assert.assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testCopyFunctions",0,"/** * test copy functions */@Test public void testCopyFunctions(){OpenMapRealMatrix m1=createSparseMatrix(testData);RealMatrix m2=m1.copy();Assert.assertEquals(m1.getClass(),m2.getClass());Assert.assertEquals((m2),m1);OpenMapRealMatrix m3=createSparseMatrix(testData);RealMatrix m4=m3.copy();Assert.assertEquals(m3.getClass(),m4.getClass());Assert.assertEquals((m4),m3);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testAdd",0,"/** * test add */@Test public void testAdd(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix mInv=createSparseMatrix(testDataInv);OpenMapRealMatrix mDataPlusInv=createSparseMatrix(testDataPlusInv);RealMatrix mPlusMInv=m.add(mInv);for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){Assert.assertEquals(""sum entry entry"",mDataPlusInv.getEntry(row,col),mPlusMInv.getEntry(row,col),entryTolerance);}}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testAddFail",0,"/** * test add failure */@Test public void testAddFail(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix m2=createSparseMatrix(testData2);try {m.add(m2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testNorm",0,"/** * test norm */@Test public void testNorm(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix m2=createSparseMatrix(testData2);Assert.assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);Assert.assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */@Test public void testPlusMinus(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix n=createSparseMatrix(testDataInv);assertClose(""m-n = m + -n"",m.subtract(n),n.scalarMultiply(-1d).add(m),entryTolerance);try {m.subtract(createSparseMatrix(testData2));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testMultiply",0,"/** * test multiply */@Test public void testMultiply(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix mInv=createSparseMatrix(testDataInv);OpenMapRealMatrix identity=createSparseMatrix(id);OpenMapRealMatrix m2=createSparseMatrix(testData2);assertClose(""inverse multiply"",m.multiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",m.multiply(new BlockRealMatrix(testDataInv)),identity,entryTolerance);assertClose(""inverse multiply"",mInv.multiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.multiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.multiply(mInv),mInv,entryTolerance);assertClose(""identity multiply"",m2.multiply(identity),m2,entryTolerance);try {m.multiply(createSparseMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testMultiply2",0,"@Test public void testMultiply2(){RealMatrix m3=createSparseMatrix(d3);RealMatrix m4=createSparseMatrix(d4);RealMatrix m5=createSparseMatrix(d5);assertClose(""m3*m4=m5"",m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testTrace",0,"/** * test trace */@Test public void testTrace(){RealMatrix m=createSparseMatrix(id);Assert.assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);m=createSparseMatrix(testData2);try {m.getTrace();Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testScalarAdd",0,"/** * test sclarAdd */@Test public void testScalarAdd(){RealMatrix m=createSparseMatrix(testData);assertClose(""scalar add"",createSparseMatrix(testDataPlus2),m.scalarAdd(2d),entryTolerance);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testOperate",0,"/** * test operate */@Test public void testOperate(){RealMatrix m=createSparseMatrix(id);assertClose(""identity operate"",testVector,m.operate(testVector),entryTolerance);assertClose(""identity operate"",testVector,m.operate(new ArrayRealVector(testVector)).toArray(),entryTolerance);m=createSparseMatrix(bigSingular);try {m.operate(testVector);Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testMath209",0,"/** * test issue MATH-209 */@Test public void testMath209(){RealMatrix a=createSparseMatrix(new double[][]{{1,2},{3,4},{5,6}});double[]b=a.operate(new double[]{1,1});Assert.assertEquals(a.getRowDimension(),b.length);Assert.assertEquals(3.0,b[0],1.0e-12);Assert.assertEquals(7.0,b[1],1.0e-12);Assert.assertEquals(11.0,b[2],1.0e-12);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testTranspose",0,"/** * test transpose */@Test public void testTranspose(){RealMatrix m=createSparseMatrix(testData);RealMatrix mIT=new LUDecomposition(m).getSolver().getInverse().transpose();RealMatrix mTI=new LUDecomposition(m.transpose()).getSolver().getInverse();assertClose(""inverse-transpose"",mIT,mTI,normTolerance);m=createSparseMatrix(testData2);RealMatrix mt=createSparseMatrix(testData2T);assertClose(""transpose"",mt,m.transpose(),normTolerance);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */@Test public void testPremultiplyVector(){RealMatrix m=createSparseMatrix(testData);assertClose(""premultiply"",m.preMultiply(testVector),preMultTest,normTolerance);assertClose(""premultiply"",m.preMultiply(new ArrayRealVector(testVector).toArray()),preMultTest,normTolerance);m=createSparseMatrix(bigSingular);try {m.preMultiply(testVector);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testPremultiply",0,"@Test public void testPremultiply(){RealMatrix m3=createSparseMatrix(d3);RealMatrix m4=createSparseMatrix(d4);RealMatrix m5=createSparseMatrix(d5);assertClose(""m3*m4=m5"",m4.preMultiply(m3),m5,entryTolerance);OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix mInv=createSparseMatrix(testDataInv);OpenMapRealMatrix identity=createSparseMatrix(id);assertClose(""inverse multiply"",m.preMultiply(mInv),identity,entryTolerance);assertClose(""inverse multiply"",mInv.preMultiply(m),identity,entryTolerance);assertClose(""identity multiply"",m.preMultiply(identity),m,entryTolerance);assertClose(""identity multiply"",identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(createSparseMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testGetVectors",0,"@Test public void testGetVectors(){RealMatrix m=createSparseMatrix(testData);assertClose(""get row"",m.getRow(0),testDataRow1,entryTolerance);assertClose(""get col"",m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testGetEntry",0,"@Test public void testGetEntry(){RealMatrix m=createSparseMatrix(testData);Assert.assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);try {m.getEntry(10,4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testExamples",0,"/** * test examples in user guide */@Test public void testExamples(){double[][]matrixData={{1d,2d,3d},{2d,5d,3d}};RealMatrix m=createSparseMatrix(matrixData);double[][]matrixData2={{1d,2d},{2d,5d},{1d,7d}};RealMatrix n=createSparseMatrix(matrixData2);RealMatrix p=m.multiply(n);Assert.assertEquals(2,p.getRowDimension());Assert.assertEquals(2,p.getColumnDimension());RealMatrix pInverse=new LUDecomposition(p).getSolver().getInverse();Assert.assertEquals(2,pInverse.getRowDimension());Assert.assertEquals(2,pInverse.getColumnDimension());double[][]coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};RealMatrix coefficients=createSparseMatrix(coefficientsData);RealVector constants=new ArrayRealVector(new double[]{1,-2,1},false);RealVector solution=new LUDecomposition(coefficients).getSolver().solve(constants);final double cst0=constants.getEntry(0);final double cst1=constants.getEntry(1);final double cst2=constants.getEntry(2);final double sol0=solution.getEntry(0);final double sol1=solution.getEntry(1);final double sol2=solution.getEntry(2);Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2,cst0,1E-12);Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2,cst1,1E-12);Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2,cst2,1E-12);}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testSubMatrix",0,"@Test public void testSubMatrix(){RealMatrix m=createSparseMatrix(subTestData);RealMatrix mRows23Cols00=createSparseMatrix(subRows23Cols00);RealMatrix mRows00Cols33=createSparseMatrix(subRows00Cols33);RealMatrix mRows01Cols23=createSparseMatrix(subRows01Cols23);RealMatrix mRows02Cols13=createSparseMatrix(subRows02Cols13);RealMatrix mRows03Cols12=createSparseMatrix(subRows03Cols12);RealMatrix mRows03Cols123=createSparseMatrix(subRows03Cols123);RealMatrix mRows20Cols123=createSparseMatrix(subRows20Cols123);RealMatrix mRows31Cols31=createSparseMatrix(subRows31Cols31);Assert.assertEquals(""Rows23Cols00"",mRows23Cols00,m.getSubMatrix(2,3,0,0));Assert.assertEquals(""Rows00Cols33"",mRows00Cols33,m.getSubMatrix(0,0,3,3));Assert.assertEquals(""Rows01Cols23"",mRows01Cols23,m.getSubMatrix(0,1,2,3));Assert.assertEquals(""Rows02Cols13"",mRows02Cols13,m.getSubMatrix(new int[]{0,2},new int[]{1,3}));Assert.assertEquals(""Rows03Cols12"",mRows03Cols12,m.getSubMatrix(new int[]{0,3},new int[]{1,2}));Assert.assertEquals(""Rows03Cols123"",mRows03Cols123,m.getSubMatrix(new int[]{0,3},new int[]{1,2,3}));Assert.assertEquals(""Rows20Cols123"",mRows20Cols123,m.getSubMatrix(new int[]{2,0},new int[]{1,2,3}));Assert.assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));Assert.assertEquals(""Rows31Cols31"",mRows31Cols31,m.getSubMatrix(new int[]{3,1},new int[]{3,1}));try {m.getSubMatrix(1,0,2,4);Assert.fail(""Expecting NumberIsTooSmallException"");}catch(NumberIsTooSmallException ex){}try {m.getSubMatrix(-1,1,2,2);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getSubMatrix(1,0,2,2);Assert.fail(""Expecting NumberIsTooSmallException"");}catch(NumberIsTooSmallException ex){}try {m.getSubMatrix(1,0,2,4);Assert.fail(""Expecting NumberIsTooSmallException"");}catch(NumberIsTooSmallException ex){}try {m.getSubMatrix(new int[]{},new int[]{0});Assert.fail(""Expecting NoDataException"");}catch(NoDataException ex){}try {m.getSubMatrix(new int[]{0},new int[]{4});Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testGetRowMatrix",0,"@Test public void testGetRowMatrix(){RealMatrix m=createSparseMatrix(subTestData);RealMatrix mRow0=createSparseMatrix(subRow0);RealMatrix mRow3=createSparseMatrix(subRow3);Assert.assertEquals(""Row0"",mRow0,m.getRowMatrix(0));Assert.assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testGetColumnMatrix",0,"@Test public void testGetColumnMatrix(){RealMatrix m=createSparseMatrix(subTestData);RealMatrix mColumn1=createSparseMatrix(subColumn1);RealMatrix mColumn3=createSparseMatrix(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testGetRowVector",0,"@Test public void testGetRowVector(){RealMatrix m=createSparseMatrix(subTestData);RealVector mRow0=new ArrayRealVector(subRow0[0]);RealVector mRow3=new ArrayRealVector(subRow3[0]);Assert.assertEquals(""Row0"",mRow0,m.getRowVector(0));Assert.assertEquals(""Row3"",mRow3,m.getRowVector(3));try {m.getRowVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testGetColumnVector",0,"@Test public void testGetColumnVector(){RealMatrix m=createSparseMatrix(subTestData);RealVector mColumn1=columnToVector(subColumn1);RealVector mColumn3=columnToVector(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnVector(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){OpenMapRealMatrix m=createSparseMatrix(testData);OpenMapRealMatrix m1=m.copy();OpenMapRealMatrix mt=(OpenMapRealMatrix)m.transpose();Assert.assertTrue(m.hashCode()!= mt.hashCode());Assert.assertEquals(m.hashCode(),m1.hashCode());Assert.assertEquals(m,m);Assert.assertEquals(m,m1);Assert.assertFalse(m.equals(null));Assert.assertFalse(m.equals(mt));Assert.assertFalse(m.equals(createSparseMatrix(bigSingular)));}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testToString",0,"@Test public void testToString(){OpenMapRealMatrix m=createSparseMatrix(testData);Assert.assertEquals(""OpenMapRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"",m.toString());m=new OpenMapRealMatrix(1,1);Assert.assertEquals(""OpenMapRealMatrix{{0.0}}"",m.toString());}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){OpenMapRealMatrix m=createSparseMatrix(testData);m.setSubMatrix(detData2,1,1);RealMatrix expected=createSparseMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});Assert.assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=createSparseMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});Assert.assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=createSparseMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});Assert.assertEquals(expected,m);OpenMapRealMatrix matrix=createSparseMatrix(new double[][]{{1,2,3,4},{5,6,7,8},{9,0,1,2}});matrix.setSubMatrix(new double[][]{{3,4},{5,6}},1,1);expected=createSparseMatrix(new double[][]{{1,2,3,4},{5,3,4,8},{9,5,6,2}});Assert.assertEquals(expected,matrix);try {m.setSubMatrix(testData,1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,-1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,1,-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(null,1,1);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException e){}try {new OpenMapRealMatrix(0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{1},{2,3}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}}"
"org.apache.commons.math3.linear.SparseRealMatrixTest.testSerial",0,"@Test public void testSerial(){OpenMapRealMatrix m=createSparseMatrix(testData);Assert.assertEquals(m,TestUtils.serializeAndRecover(m));}"
"org.apache.commons.math3.ml.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisDegenerate",0,"/** * JIRA: MATH-305 Two points,one cluster,one iteration*/@Test public void testPerformClusterAnalysisDegenerate(){KMeansPlusPlusClusterer<DoublePoint> transformer=new KMeansPlusPlusClusterer<DoublePoint>(1,1);DoublePoint[]points=new DoublePoint[]{new DoublePoint(new int[]{1959,325100}),new DoublePoint(new int[]{1960,373200})};List<? extends Cluster<DoublePoint>> clusters=transformer.cluster(Arrays.asList(points));Assert.assertEquals(1,clusters.size());Assert.assertEquals(2,(clusters.get(0).getPoints().size()));DoublePoint pt1=new DoublePoint(new int[]{1959,325100});DoublePoint pt2=new DoublePoint(new int[]{1960,373200});Assert.assertTrue(clusters.get(0).getPoints().contains(pt1));Assert.assertTrue(clusters.get(0).getPoints().contains(pt2));}"
"org.apache.commons.math3.ml.clustering.KMeansPlusPlusClustererTest.testCertainSpace",0,"@Test public void testCertainSpace(){KMeansPlusPlusClusterer.EmptyClusterStrategy[]strategies={KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE,KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_POINTS_NUMBER,KMeansPlusPlusClusterer.EmptyClusterStrategy.FARTHEST_POINT};for(KMeansPlusPlusClusterer.EmptyClusterStrategy strategy : strategies){int numberOfVariables=27;int position1=1;int position2=position1 + numberOfVariables;int position3=position2 + numberOfVariables;int position4=position3 + numberOfVariables;int multiplier=1000000;DoublePoint[]breakingPoints=new DoublePoint[numberOfVariables];for (int i=0;i < numberOfVariables;i++){int points[]={position1,position2,position3,position4};for (int j=0;j < points.length;j++){points[j]=points[j]* multiplier;}DoublePoint DoublePoint=new DoublePoint(points);breakingPoints[i]=DoublePoint;position1=position1 + numberOfVariables;position2=position2 + numberOfVariables;position3=position3 + numberOfVariables;position4=position4 + numberOfVariables;}for (int n=2;n < 27;++n){KMeansPlusPlusClusterer<DoublePoint> transformer=new KMeansPlusPlusClusterer<DoublePoint>(n,100,new EuclideanDistance(),random,strategy);List<? extends Cluster<DoublePoint>> clusters=transformer.cluster(Arrays.asList(breakingPoints));Assert.assertEquals(n,clusters.size());int sum=0;for(Cluster<DoublePoint> cluster : clusters){sum+=cluster.getPoints().size();}Assert.assertEquals(numberOfVariables,sum);}}}"
"org.apache.commons.math3.ml.clustering.KMeansPlusPlusClustererTest.testSmallDistances",0,"/** * Test points that are very close together. See issue MATH-546.*/@Test public void testSmallDistances(){int[]repeatedArray={0};int[]uniqueArray={1};DoublePoint repeatedPoint=new DoublePoint(repeatedArray);DoublePoint uniquePoint=new DoublePoint(uniqueArray);Collection<DoublePoint> points=new ArrayList<DoublePoint>();final int NUM_REPEATED_POINTS=10 * 1000;for (int i=0;i < NUM_REPEATED_POINTS;++i){points.add(repeatedPoint);}points.add(uniquePoint);final long RANDOM_SEED=0;final int NUM_CLUSTERS=2;final int NUM_ITERATIONS=0;random.setSeed(RANDOM_SEED);KMeansPlusPlusClusterer<DoublePoint> clusterer=new KMeansPlusPlusClusterer<DoublePoint>(NUM_CLUSTERS,NUM_ITERATIONS,new CloseDistance(),random);List<CentroidCluster<DoublePoint>> clusters=clusterer.cluster(points);boolean uniquePointIsCenter=false;for(CentroidCluster<DoublePoint> cluster : clusters){if (cluster.getCenter().equals(uniquePoint)){uniquePointIsCenter=true;}}Assert.assertTrue(uniquePointIsCenter);}"
"org.apache.commons.math3.ml.clustering.KMeansPlusPlusClustererTest.testPerformClusterAnalysisToManyClusters",0,"/** * 2 variables cannot be clustered into 3 clusters. See issue MATH-436.*/@Test(expected=NumberIsTooSmallException.class)public void testPerformClusterAnalysisToManyClusters(){KMeansPlusPlusClusterer<DoublePoint> transformer=new KMeansPlusPlusClusterer<DoublePoint>(3,1,new EuclideanDistance(),random);DoublePoint[]points=new DoublePoint[]{new DoublePoint(new int[]{1959,325100}),new DoublePoint(new int[]{1960,373200})};transformer.cluster(Arrays.asList(points));}"
"org.apache.commons.math3.genetics.OnePointCrossoverTest.testCrossover",0,"@Test public void testCrossover(){Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};Integer[]p2=new Integer[]{0,1,1,0,1,0,1,1,1};BinaryChromosome p1c=new DummyBinaryChromosome(p1);BinaryChromosome p2c=new DummyBinaryChromosome(p2);OnePointCrossover<Integer> opc=new OnePointCrossover<Integer>();for (int i=0;i < 20;i++){ChromosomePair pair=opc.crossover(p1c,p2c);Integer[]c1=new Integer[p1.length];Integer[]c2=new Integer[p2.length];c1=((BinaryChromosome)pair.getFirst()).getRepresentation().toArray(c1);c2=((BinaryChromosome)pair.getSecond()).getRepresentation().toArray(c2);Assert.assertEquals((int)p1[0],(int)c1[0]);Assert.assertEquals((int)p2[0],(int)c2[0]);Assert.assertEquals((int)p1[p1.length - 1],(int)c1[c1.length - 1]);Assert.assertEquals((int)p2[p2.length - 1],(int)c2[c2.length - 1]);Assert.assertEquals((int)p1[2],(int)c1[2]);Assert.assertEquals((int)p2[2],(int)c2[2]);Assert.assertEquals((int)p1[3],(int)c1[3]);Assert.assertEquals((int)p2[3],(int)c2[3]);Assert.assertEquals((int)p1[7],(int)c1[7]);Assert.assertEquals((int)p2[7],(int)c2[7]);}}"
"org.apache.commons.math3.ode.events.EventFilterTest.testHistoryIncreasingForward",0,"@Test public void testHistoryIncreasingForward(){testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS,0.5 * FastMath.PI,30.5 * FastMath.PI,FastMath.PI,-1);testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS,0,30.5 * FastMath.PI,FastMath.PI,-1);testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS,1.5 * FastMath.PI,30.5 * FastMath.PI,FastMath.PI,+1);}"
"org.apache.commons.math3.ode.events.EventFilterTest.testHistoryIncreasingBackward",0,"@Test public void testHistoryIncreasingBackward(){testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS,0.5 * FastMath.PI,-30.5 * FastMath.PI,FastMath.PI,-1);testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS,0,-30.5 * FastMath.PI,FastMath.PI,+1);testHistory(FilterType.TRIGGER_ONLY_INCREASING_EVENTS,1.5 * FastMath.PI,-30.5 * FastMath.PI,FastMath.PI,-1);}"
"org.apache.commons.math3.ode.events.EventFilterTest.testHistoryDecreasingForward",0,"@Test public void testHistoryDecreasingForward(){testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS,0.5 * FastMath.PI,30.5 * FastMath.PI,0,+1);testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS,0,30.5 * FastMath.PI,0,+1);testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS,1.5 * FastMath.PI,30.5 * FastMath.PI,0,+1);}"
"org.apache.commons.math3.ode.events.EventFilterTest.testHistoryDecreasingBackward",0,"@Test public void testHistoryDecreasingBackward(){testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS,0.5 * FastMath.PI,-30.5 * FastMath.PI,0,-1);testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS,0,-30.5 * FastMath.PI,0,-1);testHistory(FilterType.TRIGGER_ONLY_DECREASING_EVENTS,1.5 * FastMath.PI,-30.5 * FastMath.PI,0,+1);}"
"org.apache.commons.math3.ode.events.EventFilterTest.testHistory",0,"public void testHistory(FilterType type,double t0,double t1,double refSwitch,double signEven){Event onlyIncreasing=new Event(false,true);EventFilter eventFilter=new EventFilter(onlyIncreasing,type);eventFilter.init(t0,new double[]{1.0,0.0},t1);double h=FastMath.copySign(0.05,t1 - t0);double n=(int)FastMath.floor((t1 - t0)/ h);for (int i=0;i < n;++i){double t=t0 + i * h;eventFilter.g(t,new double[]{FastMath.sin(t),FastMath.cos(t)});}RandomGenerator rng=new Well19937a(0xb0e7401265af8cd3l);for (int i=0;i < 5000;i++){double t=t0 + (t1 - t0)* rng.nextDouble();double g=eventFilter.g(t,new double[]{FastMath.sin(t),FastMath.cos(t)});int turn=(int)FastMath.floor((t - refSwitch)/ (2 * FastMath.PI));if (turn % 2 == 0){Assert.assertEquals(signEven * FastMath.sin(t),g,1.0e-10);}else {Assert.assertEquals(-signEven * FastMath.sin(t),g,1.0e-10);}}}"
"org.apache.commons.math3.ode.events.EventFilterTest.testIncreasingOnly",0,"@Test public void testIncreasingOnly()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double e=1e-15;FirstOrderIntegrator integrator;integrator=new DormandPrince853Integrator(1.0e-3,100.0,1e-7,1e-7);Event allEvents=new Event(true,true);integrator.addEventHandler(allEvents,0.1,e,1000,new BracketingNthOrderBrentSolver(1.0e-7,5));Event onlyIncreasing=new Event(false,true);integrator.addEventHandler(new EventFilter(onlyIncreasing,FilterType.TRIGGER_ONLY_INCREASING_EVENTS),0.1,e,100,new BracketingNthOrderBrentSolver(1.0e-7,5));double t0=0.5 * FastMath.PI;double tEnd=5.5 * FastMath.PI;double[]y={0.0,1.0};Assert.assertEquals(tEnd,integrator.integrate(new SineCosine(),t0,y,tEnd,y),1.0e-7);Assert.assertEquals(5,allEvents.getEventCount());Assert.assertEquals(2,onlyIncreasing.getEventCount());}"
"org.apache.commons.math3.ode.events.EventFilterTest.testDecreasingOnly",0,"@Test public void testDecreasingOnly()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double e=1e-15;FirstOrderIntegrator integrator;integrator=new DormandPrince853Integrator(1.0e-3,100.0,1e-7,1e-7);Event allEvents=new Event(true,true);integrator.addEventHandler(allEvents,0.1,e,1000,new BracketingNthOrderBrentSolver(1.0e-7,5));Event onlyDecreasing=new Event(true,false);integrator.addEventHandler(new EventFilter(onlyDecreasing,FilterType.TRIGGER_ONLY_DECREASING_EVENTS),0.1,e,1000,new BracketingNthOrderBrentSolver(1.0e-7,5));double t0=0.5 * FastMath.PI;double tEnd=5.5 * FastMath.PI;double[]y={0.0,1.0};Assert.assertEquals(tEnd,integrator.integrate(new SineCosine(),t0,y,tEnd,y),1.0e-7);Assert.assertEquals(5,allEvents.getEventCount());Assert.assertEquals(3,onlyDecreasing.getEventCount());}"
"org.apache.commons.math3.ode.events.EventFilterTest.testTwoOppositeFilters",0,"@Test public void testTwoOppositeFilters()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double e=1e-15;FirstOrderIntegrator integrator;integrator=new DormandPrince853Integrator(1.0e-3,100.0,1e-7,1e-7);Event allEvents=new Event(true,true);integrator.addEventHandler(allEvents,0.1,e,1000,new BracketingNthOrderBrentSolver(1.0e-7,5));Event onlyIncreasing=new Event(false,true);integrator.addEventHandler(new EventFilter(onlyIncreasing,FilterType.TRIGGER_ONLY_INCREASING_EVENTS),0.1,e,1000,new BracketingNthOrderBrentSolver(1.0e-7,5));Event onlyDecreasing=new Event(true,false);integrator.addEventHandler(new EventFilter(onlyDecreasing,FilterType.TRIGGER_ONLY_DECREASING_EVENTS),0.1,e,1000,new BracketingNthOrderBrentSolver(1.0e-7,5));double t0=0.5 * FastMath.PI;double tEnd=5.5 * FastMath.PI;double[]y={0.0,1.0};Assert.assertEquals(tEnd,integrator.integrate(new SineCosine(),t0,y,tEnd,y),1.0e-7);Assert.assertEquals(5,allEvents.getEventCount());Assert.assertEquals(2,onlyIncreasing.getEventCount());Assert.assertEquals(3,onlyDecreasing.getEventCount());}"
"org.apache.commons.math3.analysis.function.SincTest.testShortcut",0,"@Test public void testShortcut(){final Sinc s=new Sinc();final UnivariateFunction f=new UnivariateFunction(){public double value(double x){Dfp dfpX=new DfpField(25).newDfp(x);return DfpMath.sin(dfpX).divide(dfpX).toDouble();}};for (double x=1e-30;x < 1e10;x*=2){final double fX=f.value(x);final double sX=s.value(x);Assert.assertEquals(""x="" + x,fX,sX,2.0e-16);}}"
"org.apache.commons.math3.analysis.function.SincTest.testCrossings",0,"@Test public void testCrossings(){final Sinc s=new Sinc(true);final int numCrossings=1000;final double tol=2e-16;for (int i=1;i <= numCrossings;i++){Assert.assertEquals(""i="" + i,0,s.value(i),tol);}}"
"org.apache.commons.math3.analysis.function.SincTest.testZero",0,"@Test public void testZero(){final Sinc s=new Sinc();Assert.assertEquals(1d,s.value(0),0);}"
"org.apache.commons.math3.analysis.function.SincTest.testEuler",0,"@Test public void testEuler(){final Sinc s=new Sinc();final double x=123456.789;double prod=1;double xOverPow2=x / 2;while (xOverPow2 > 0){prod*=FastMath.cos(xOverPow2);xOverPow2/=2;}Assert.assertEquals(prod,s.value(x),1e-13);}"
"org.apache.commons.math3.analysis.function.SincTest.testDerivativeZero",0,"@Test public void testDerivativeZero(){final DerivativeStructure s0=new Sinc(true).value(new DerivativeStructure(1,1,0,0.0));Assert.assertEquals(0,s0.getPartialDerivative(1),0);}"
"org.apache.commons.math3.analysis.function.SincTest.testDerivatives1Dot2Unnormalized",0,"@Test public void testDerivatives1Dot2Unnormalized(){DerivativeStructure s=new Sinc(false).value(new DerivativeStructure(1,5,0,1.2));Assert.assertEquals(0.77669923830602195806,s.getPartialDerivative(0),1.0e-16);Assert.assertEquals(-0.34528456985779031701,s.getPartialDerivative(1),1.0e-16);Assert.assertEquals(-0.2012249552097047631,s.getPartialDerivative(2),1.0e-16);Assert.assertEquals(0.2010975926270339262,s.getPartialDerivative(3),4.0e-16);Assert.assertEquals(0.106373929549242204,s.getPartialDerivative(4),1.0e-15);Assert.assertEquals(-0.1412599110579478695,s.getPartialDerivative(5),3.0e-15);}"
"org.apache.commons.math3.analysis.function.SincTest.testDerivatives1Dot2Normalized",0,"@Test public void testDerivatives1Dot2Normalized(){DerivativeStructure s=new Sinc(true).value(new DerivativeStructure(1,5,0,1.2));Assert.assertEquals(-0.15591488063143983888,s.getPartialDerivative(0),6.0e-17);Assert.assertEquals(-0.54425176145292298767,s.getPartialDerivative(1),2.0e-16);Assert.assertEquals(2.4459044611635856107,s.getPartialDerivative(2),9.0e-16);Assert.assertEquals(0.5391369206235909586,s.getPartialDerivative(3),7.0e-16);Assert.assertEquals(-16.984649869728849865,s.getPartialDerivative(4),8.0e-15);Assert.assertEquals(5.0980327462666316586,s.getPartialDerivative(5),9.0e-15);}"
"org.apache.commons.math3.analysis.function.SincTest.testDerivativeShortcut",0,"@Test public void testDerivativeShortcut(){final Sinc sinc=new Sinc();final UnivariateFunction f=new UnivariateFunction(){public double value(double x){Dfp dfpX=new DfpField(25).newDfp(x);return DfpMath.cos(dfpX).subtract(DfpMath.sin(dfpX).divide(dfpX)).divide(dfpX).toDouble();}};for (double x=1e-30;x < 1e10;x*=2){final double fX=f.value(x);final DerivativeStructure sX=sinc.value(new DerivativeStructure(1,1,0,x));Assert.assertEquals(""x="" + x,fX,sX.getPartialDerivative(1),3.0e-13);}}"
"org.apache.commons.math3.exception.util.ArgUtilsTest.testFlatten",0,"@Test public void testFlatten(){final List<Object> orig=new ArrayList<Object>();final Object[]struct=new Object[]{new Object[]{new Object[]{create(orig),create(orig)},create(orig),new Object[]{create(orig)}},create(orig),new Object[]{create(orig),new Object[]{create(orig),create(orig)}},create(orig)};Object[]flat=ArgUtils.flatten(struct);Assert.assertEquals(flat.length,orig.size());for (int i=0,max=orig.size();i < max;i++){Assert.assertEquals(orig.get(i),flat[i]);}}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testQuantiles",0,"@Test public void testQuantiles(){setCumulativeTestValues(new double[]{0,0,0,0.510884134236,0.694625688662,0.785201995008,0.837811522357,0.871634279326});setDensityTestValues(new double[]{0,0,0.666666666,0.195646346305,0.0872498032394,0.0477328899983,0.0294888141169,0.0197485724114});verifyQuantiles();verifyDensities();setDistribution(new ParetoDistribution(1,1));setCumulativeTestValues(new double[]{0,0,0,0.5,0.666666666667,0.75,0.8,0.833333333333});setDensityTestValues(new double[]{0,0,1.0,0.25,0.111111111111,0.0625,0.04,0.0277777777778});verifyQuantiles();verifyDensities();setDistribution(new ParetoDistribution(0.1,0.1));setCumulativeTestValues(new double[]{0,0,0,0.0669670084632,0.104041540159,0.129449436704,0.148660077479,0.164041197922});setDensityTestValues(new double[]{0,0,1.0,0.466516495768,0.298652819947,0.217637640824,0.170267984504,0.139326467013});verifyQuantiles();verifyDensities();}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{2.1,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testGetScale",0,"@Test public void testGetScale(){ParetoDistribution distribution=(ParetoDistribution)getDistribution();Assert.assertEquals(2.1,distribution.getScale(),0);}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testGetShape",0,"@Test public void testGetShape(){ParetoDistribution distribution=(ParetoDistribution)getDistribution();Assert.assertEquals(1.4,distribution.getShape(),0);}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testPreconditions",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions(){new ParetoDistribution(1,0);}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testDensity",0,"@Test public void testDensity(){double[]x=new double[]{-2,-1,0,1,2};checkDensity(1,1,x,new double[]{0.00,0.00,0.00,1.00,0.25});checkDensity(1.1,1,x,new double[]{0.000,0.000,0.000,0.000,0.275});}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testExtremeValues",0,"/** * Check to make sure top-coding of extreme values works correctly.*/@Test public void testExtremeValues(){ParetoDistribution d=new ParetoDistribution(1,1);for (int i=0;i < 1e5;i++){double upperTail=d.cumulativeProbability(i);if (i <= 1000){Assert.assertTrue(upperTail < 1.0d);}else {Assert.assertTrue(upperTail > 0.999);}}Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE),1,0);Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE),0,0);Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY),1,0);Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY),0,0);}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testMeanVariance",0,"@Test public void testMeanVariance(){final double tol=1e-9;ParetoDistribution dist;dist=new ParetoDistribution(1,1);Assert.assertEquals(dist.getNumericalMean(),Double.POSITIVE_INFINITY,tol);Assert.assertEquals(dist.getNumericalVariance(),Double.POSITIVE_INFINITY,tol);dist=new ParetoDistribution(2.2,2.4);Assert.assertEquals(dist.getNumericalMean(),3.771428571428,tol);Assert.assertEquals(dist.getNumericalVariance(),14.816326530,tol);}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.ParetoDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testConstructors",0,"@Test public void testConstructors()throws DimensionMismatchException {double cosAlpha=1 / 2.0;double sinAlpha=FastMath.sqrt(3)/ 2.0;double cosDelta=FastMath.sqrt(2)/ 2.0;double sinDelta=-FastMath.sqrt(2)/ 2.0;FieldVector3D<DerivativeStructure> u=new FieldVector3D<DerivativeStructure>(2,new FieldVector3D<DerivativeStructure>(new DerivativeStructure(2,1,0,FastMath.PI / 3),new DerivativeStructure(2,1,1,-FastMath.PI / 4)));checkVector(u,2 * cosAlpha * cosDelta,2 * sinAlpha * cosDelta,2 * sinDelta);Assert.assertEquals(-2 * sinAlpha * cosDelta,u.getX().getPartialDerivative(1,0),1.0e-12);Assert.assertEquals(+2 * cosAlpha * cosDelta,u.getY().getPartialDerivative(1,0),1.0e-12);Assert.assertEquals(0,u.getZ().getPartialDerivative(1,0),1.0e-12);Assert.assertEquals(-2 * cosAlpha * sinDelta,u.getX().getPartialDerivative(0,1),1.0e-12);Assert.assertEquals(-2 * sinAlpha * sinDelta,u.getY().getPartialDerivative(0,1),1.0e-12);Assert.assertEquals(2 * cosDelta,u.getZ().getPartialDerivative(0,1),1.0e-12);checkVector(new FieldVector3D<DerivativeStructure>(2,createVector(1,0,0,3)),2,0,0,2,0,0,0,2,0,0,0,2);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),createVector(1,0,0,4)),2,0,0,2,0,0,1,0,2,0,0,0,0,2,0);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),new Vector3D(1,0,0)),2,0,0,0,0,0,1,0,0,0,0,0,0,0,0);checkVector(new FieldVector3D<DerivativeStructure>(2,createVector(1,0,0,3),-3,createVector(0,0,-1,3)),2,0,3,-1,0,0,0,-1,0,0,0,-1);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),createVector(1,0,0,4),new DerivativeStructure(4,1,3,-3.0),createVector(0,0,-1,4)),2,0,3,-1,0,0,1,0,-1,0,0,0,0,-1,-1);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),new Vector3D(1,0,0),new DerivativeStructure(4,1,3,-3.0),new Vector3D(0,0,-1)),2,0,3,0,0,0,1,0,0,0,0,0,0,0,-1);checkVector(new FieldVector3D<DerivativeStructure>(2,createVector(1,0,0,3),5,createVector(0,1,0,3),-3,createVector(0,0,-1,3)),2,5,3,4,0,0,0,4,0,0,0,4);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),createVector(1,0,0,4),new DerivativeStructure(4,1,3,5.0),createVector(0,1,0,4),new DerivativeStructure(4,1,3,-3.0),createVector(0,0,-1,4)),2,5,3,4,0,0,1,0,4,0,1,0,0,4,-1);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),new Vector3D(1,0,0),new DerivativeStructure(4,1,3,5.0),new Vector3D(0,1,0),new DerivativeStructure(4,1,3,-3.0),new Vector3D(0,0,-1)),2,5,3,0,0,0,1,0,0,0,1,0,0,0,-1);checkVector(new FieldVector3D<DerivativeStructure>(2,createVector(1,0,0,3),5,createVector(0,1,0,3),5,createVector(0,-1,0,3),-3,createVector(0,0,-1,3)),2,0,3,9,0,0,0,9,0,0,0,9);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),createVector(1,0,0,4),new DerivativeStructure(4,1,3,5.0),createVector(0,1,0,4),new DerivativeStructure(4,1,3,5.0),createVector(0,-1,0,4),new DerivativeStructure(4,1,3,-3.0),createVector(0,0,-1,4)),2,0,3,9,0,0,1,0,9,0,0,0,0,9,-1);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(4,1,3,2.0),new Vector3D(1,0,0),new DerivativeStructure(4,1,3,5.0),new Vector3D(0,1,0),new DerivativeStructure(4,1,3,5.0),new Vector3D(0,-1,0),new DerivativeStructure(4,1,3,-3.0),new Vector3D(0,0,-1)),2,0,3,0,0,0,1,0,0,0,0,0,0,0,-1);checkVector(new FieldVector3D<DerivativeStructure>(new DerivativeStructure[]{new DerivativeStructure(3,1,2,2),new DerivativeStructure(3,1,1,5),new DerivativeStructure(3,1,0,-3)}),2,5,-3,0,0,1,0,1,0,1,0,0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testEquals",0,"@Test public void testEquals(){FieldVector3D<DerivativeStructure> u1=createVector(1,2,3,3);FieldVector3D<DerivativeStructure> v=createVector(1,2,3 + 10 * Precision.EPSILON,3);Assert.assertTrue(u1.equals(u1));Assert.assertTrue(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3,1,0,1.0),new DerivativeStructure(3,1,1,2.0),new DerivativeStructure(3,1,2,3.0))));Assert.assertFalse(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3,1,1.0),new DerivativeStructure(3,1,1,2.0),new DerivativeStructure(3,1,2,3.0))));Assert.assertFalse(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3,1,0,1.0),new DerivativeStructure(3,1,2.0),new DerivativeStructure(3,1,2,3.0))));Assert.assertFalse(u1.equals(new FieldVector3D<DerivativeStructure>(new DerivativeStructure(3,1,0,1.0),new DerivativeStructure(3,1,1,2.0),new DerivativeStructure(3,1,3.0))));Assert.assertFalse(u1.equals(v));Assert.assertFalse(u1.equals(u1.toVector3D()));Assert.assertTrue(createVector(0,Double.NaN,0,3).equals(createVector(0,0,Double.NaN,3)));}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testHash",0,"@Test public void testHash(){Assert.assertEquals(createVector(0,Double.NaN,0,3).hashCode(),createVector(0,0,Double.NaN,3).hashCode());FieldVector3D<DerivativeStructure> u=createVector(1,2,3,3);FieldVector3D<DerivativeStructure> v=createVector(1,2,3 + 10 * Precision.EPSILON,3);Assert.assertTrue(u.hashCode()!= v.hashCode());}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testInfinite",0,"@Test public void testInfinite(){Assert.assertTrue(createVector(1,1,Double.NEGATIVE_INFINITY,3).isInfinite());Assert.assertTrue(createVector(1,Double.NEGATIVE_INFINITY,1,3).isInfinite());Assert.assertTrue(createVector(Double.NEGATIVE_INFINITY,1,1,3).isInfinite());Assert.assertFalse(createVector(1,1,2,3).isInfinite());Assert.assertFalse(createVector(1,Double.NaN,Double.NEGATIVE_INFINITY,3).isInfinite());}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNaN",0,"@Test public void testNaN(){Assert.assertTrue(createVector(1,1,Double.NaN,3).isNaN());Assert.assertTrue(createVector(1,Double.NaN,1,3).isNaN());Assert.assertTrue(createVector(Double.NaN,1,1,3).isNaN());Assert.assertFalse(createVector(1,1,2,3).isNaN());Assert.assertFalse(createVector(1,1,Double.NEGATIVE_INFINITY,3).isNaN());}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testToString",0,"@Test public void testToString(){Assert.assertEquals(""{3;2;1}"",createVector(3,2,1,3).toString());NumberFormat format=new DecimalFormat(""0.000"",new DecimalFormatSymbols(Locale.US));Assert.assertEquals(""{3.000;2.000;1.000}"",createVector(3,2,1,3).toString(format));}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testWrongDimension",0,"@Test(expected=DimensionMismatchException.class)public void testWrongDimension()throws DimensionMismatchException {new FieldVector3D<DerivativeStructure>(new DerivativeStructure[]{new DerivativeStructure(3,1,0,2),new DerivativeStructure(3,1,0,5)});}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testCoordinates",0,"@Test public void testCoordinates(){FieldVector3D<DerivativeStructure> v=createVector(1,2,3,3);Assert.assertTrue(FastMath.abs(v.getX().getReal()- 1)< 1.0e-12);Assert.assertTrue(FastMath.abs(v.getY().getReal()- 2)< 1.0e-12);Assert.assertTrue(FastMath.abs(v.getZ().getReal()- 3)< 1.0e-12);DerivativeStructure[]coordinates=v.toArray();Assert.assertTrue(FastMath.abs(coordinates[0].getReal()- 1)< 1.0e-12);Assert.assertTrue(FastMath.abs(coordinates[1].getReal()- 2)< 1.0e-12);Assert.assertTrue(FastMath.abs(coordinates[2].getReal()- 3)< 1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNorm1",0,"@Test public void testNorm1(){Assert.assertEquals(0.0,createVector(0,0,0,3).getNorm1().getReal(),0);Assert.assertEquals(6.0,createVector(1,-2,3,3).getNorm1().getReal(),0);Assert.assertEquals(1.0,createVector(1,-2,3,3).getNorm1().getPartialDerivative(1,0,0),0);Assert.assertEquals(-1.0,createVector(1,-2,3,3).getNorm1().getPartialDerivative(0,1,0),0);Assert.assertEquals(1.0,createVector(1,-2,3,3).getNorm1().getPartialDerivative(0,0,1),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNorm",0,"@Test public void testNorm(){double r=FastMath.sqrt(14);Assert.assertEquals(0.0,createVector(0,0,0,3).getNorm().getReal(),0);Assert.assertEquals(r,createVector(1,2,3,3).getNorm().getReal(),1.0e-12);Assert.assertEquals(1.0 / r,createVector(1,2,3,3).getNorm().getPartialDerivative(1,0,0),0);Assert.assertEquals(2.0 / r,createVector(1,2,3,3).getNorm().getPartialDerivative(0,1,0),0);Assert.assertEquals(3.0 / r,createVector(1,2,3,3).getNorm().getPartialDerivative(0,0,1),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNormSq",0,"@Test public void testNormSq(){Assert.assertEquals(0.0,createVector(0,0,0,3).getNormSq().getReal(),0);Assert.assertEquals(14,createVector(1,2,3,3).getNormSq().getReal(),1.0e-12);Assert.assertEquals(2,createVector(1,2,3,3).getNormSq().getPartialDerivative(1,0,0),0);Assert.assertEquals(4,createVector(1,2,3,3).getNormSq().getPartialDerivative(0,1,0),0);Assert.assertEquals(6,createVector(1,2,3,3).getNormSq().getPartialDerivative(0,0,1),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNormInf",0,"@Test public void testNormInf(){Assert.assertEquals(0.0,createVector(0,0,0,3).getNormInf().getReal(),0);Assert.assertEquals(3.0,createVector(1,-2,3,3).getNormInf().getReal(),0);Assert.assertEquals(0.0,createVector(1,-2,3,3).getNormInf().getPartialDerivative(1,0,0),0);Assert.assertEquals(0.0,createVector(1,-2,3,3).getNormInf().getPartialDerivative(0,1,0),0);Assert.assertEquals(1.0,createVector(1,-2,3,3).getNormInf().getPartialDerivative(0,0,1),0);Assert.assertEquals(3.0,createVector(2,-1,3,3).getNormInf().getReal(),0);Assert.assertEquals(0.0,createVector(2,-1,3,3).getNormInf().getPartialDerivative(1,0,0),0);Assert.assertEquals(0.0,createVector(2,-1,3,3).getNormInf().getPartialDerivative(0,1,0),0);Assert.assertEquals(1.0,createVector(2,-1,3,3).getNormInf().getPartialDerivative(0,0,1),0);Assert.assertEquals(3.0,createVector(1,-3,2,3).getNormInf().getReal(),0);Assert.assertEquals(0.0,createVector(1,-3,2,3).getNormInf().getPartialDerivative(1,0,0),0);Assert.assertEquals(-1.0,createVector(1,-3,2,3).getNormInf().getPartialDerivative(0,1,0),0);Assert.assertEquals(0.0,createVector(1,-3,2,3).getNormInf().getPartialDerivative(0,0,1),0);Assert.assertEquals(3.0,createVector(2,-3,1,3).getNormInf().getReal(),0);Assert.assertEquals(0.0,createVector(2,-3,1,3).getNormInf().getPartialDerivative(1,0,0),0);Assert.assertEquals(-1.0,createVector(2,-3,1,3).getNormInf().getPartialDerivative(0,1,0),0);Assert.assertEquals(0.0,createVector(2,-3,1,3).getNormInf().getPartialDerivative(0,0,1),0);Assert.assertEquals(3.0,createVector(3,-1,2,3).getNormInf().getReal(),0);Assert.assertEquals(1.0,createVector(3,-1,2,3).getNormInf().getPartialDerivative(1,0,0),0);Assert.assertEquals(0.0,createVector(3,-1,2,3).getNormInf().getPartialDerivative(0,1,0),0);Assert.assertEquals(0.0,createVector(3,-1,2,3).getNormInf().getPartialDerivative(0,0,1),0);Assert.assertEquals(3.0,createVector(3,-2,1,3).getNormInf().getReal(),0);Assert.assertEquals(1.0,createVector(3,-2,1,3).getNormInf().getPartialDerivative(1,0,0),0);Assert.assertEquals(0.0,createVector(3,-2,1,3).getNormInf().getPartialDerivative(0,1,0),0);Assert.assertEquals(0.0,createVector(3,-2,1,3).getNormInf().getPartialDerivative(0,0,1),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testDistance1",0,"@Test public void testDistance1(){FieldVector3D<DerivativeStructure> v1=createVector(1,-2,3,3);FieldVector3D<DerivativeStructure> v2=createVector(-4,2,0,3);Assert.assertEquals(0.0,FieldVector3D.distance1(createVector(-1,0,0,3),createVector(-1,0,0,3)).getReal(),0);DerivativeStructure distance=FieldVector3D.distance1(v1,v2);Assert.assertEquals(12.0,distance.getReal(),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,0,1),1.0e-12);distance=FieldVector3D.distance1(v1,new Vector3D(-4,2,0));Assert.assertEquals(12.0,distance.getReal(),1.0e-12);Assert.assertEquals(1,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(-1,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(1,distance.getPartialDerivative(0,0,1),1.0e-12);distance=FieldVector3D.distance1(new Vector3D(-4,2,0),v1);Assert.assertEquals(12.0,distance.getReal(),1.0e-12);Assert.assertEquals(1,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(-1,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(1,distance.getPartialDerivative(0,0,1),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testDistance",0,"@Test public void testDistance(){FieldVector3D<DerivativeStructure> v1=createVector(1,-2,3,3);FieldVector3D<DerivativeStructure> v2=createVector(-4,2,0,3);Assert.assertEquals(0.0,FieldVector3D.distance(createVector(-1,0,0,3),createVector(-1,0,0,3)).getReal(),0);DerivativeStructure distance=FieldVector3D.distance(v1,v2);Assert.assertEquals(FastMath.sqrt(50),distance.getReal(),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,0,1),1.0e-12);distance=FieldVector3D.distance(v1,new Vector3D(-4,2,0));Assert.assertEquals(FastMath.sqrt(50),distance.getReal(),1.0e-12);Assert.assertEquals(5 / FastMath.sqrt(50),distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(-4 / FastMath.sqrt(50),distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(3 / FastMath.sqrt(50),distance.getPartialDerivative(0,0,1),1.0e-12);distance=FieldVector3D.distance(new Vector3D(-4,2,0),v1);Assert.assertEquals(FastMath.sqrt(50),distance.getReal(),1.0e-12);Assert.assertEquals(5 / FastMath.sqrt(50),distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(-4 / FastMath.sqrt(50),distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(3 / FastMath.sqrt(50),distance.getPartialDerivative(0,0,1),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testDistanceSq",0,"@Test public void testDistanceSq(){FieldVector3D<DerivativeStructure> v1=createVector(1,-2,3,3);FieldVector3D<DerivativeStructure> v2=createVector(-4,2,0,3);Assert.assertEquals(0.0,FieldVector3D.distanceSq(createVector(-1,0,0,3),createVector(-1,0,0,3)).getReal(),0);DerivativeStructure distanceSq=FieldVector3D.distanceSq(v1,v2);Assert.assertEquals(50.0,distanceSq.getReal(),1.0e-12);Assert.assertEquals(0,distanceSq.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(0,distanceSq.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(0,distanceSq.getPartialDerivative(0,0,1),1.0e-12);distanceSq=FieldVector3D.distanceSq(v1,new Vector3D(-4,2,0));Assert.assertEquals(50.0,distanceSq.getReal(),1.0e-12);Assert.assertEquals(10,distanceSq.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(-8,distanceSq.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(6,distanceSq.getPartialDerivative(0,0,1),1.0e-12);distanceSq=FieldVector3D.distanceSq(new Vector3D(-4,2,0),v1);Assert.assertEquals(50.0,distanceSq.getReal(),1.0e-12);Assert.assertEquals(10,distanceSq.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(-8,distanceSq.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(6,distanceSq.getPartialDerivative(0,0,1),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testDistanceInf",0,"@Test public void testDistanceInf(){FieldVector3D<DerivativeStructure> v1=createVector(1,-2,3,3);FieldVector3D<DerivativeStructure> v2=createVector(-4,2,0,3);Assert.assertEquals(0.0,FieldVector3D.distanceInf(createVector(-1,0,0,3),createVector(-1,0,0,3)).getReal(),0);DerivativeStructure distance=FieldVector3D.distanceInf(v1,v2);Assert.assertEquals(5.0,distance.getReal(),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,0,1),1.0e-12);distance=FieldVector3D.distanceInf(v1,new Vector3D(-4,2,0));Assert.assertEquals(5.0,distance.getReal(),1.0e-12);Assert.assertEquals(1,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,0,1),1.0e-12);distance=FieldVector3D.distanceInf(new Vector3D(-4,2,0),v1);Assert.assertEquals(5.0,distance.getReal(),1.0e-12);Assert.assertEquals(1,distance.getPartialDerivative(1,0,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,1,0),1.0e-12);Assert.assertEquals(0,distance.getPartialDerivative(0,0,1),1.0e-12);Assert.assertEquals(v1.subtract(v2).getNormInf().getReal(),FieldVector3D.distanceInf(v1,v2).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(1,-2,3,3),createVector(-4,2,0,3)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(1,3,-2,3),createVector(-4,0,2,3)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(-2,1,3,3),createVector(2,-4,0,3)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(-2,3,1,3),createVector(2,0,-4,3)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(3,-2,1,3),createVector(0,2,-4,3)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(3,1,-2,3),createVector(0,-4,2,3)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(1,-2,3,3),new Vector3D(-4,2,0)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(1,3,-2,3),new Vector3D(-4,0,2)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(-2,1,3,3),new Vector3D(2,-4,0)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(-2,3,1,3),new Vector3D(2,0,-4)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(3,-2,1,3),new Vector3D(0,2,-4)).getReal(),1.0e-12);Assert.assertEquals(5.0,FieldVector3D.distanceInf(createVector(3,1,-2,3),new Vector3D(0,-4,2)).getReal(),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testSubtract",0,"@Test public void testSubtract(){FieldVector3D<DerivativeStructure> v1=createVector(1,2,3,3);FieldVector3D<DerivativeStructure> v2=createVector(-3,-2,-1,3);v1=v1.subtract(v2);checkVector(v1,4,4,4,0,0,0,0,0,0,0,0,0);checkVector(v2.subtract(v1),-7,-6,-5,1,0,0,0,1,0,0,0,1);checkVector(v2.subtract(new Vector3D(4,4,4)),-7,-6,-5,1,0,0,0,1,0,0,0,1);checkVector(v2.subtract(3,v1),-15,-14,-13,1,0,0,0,1,0,0,0,1);checkVector(v2.subtract(3,new Vector3D(4,4,4)),-15,-14,-13,1,0,0,0,1,0,0,0,1);checkVector(v2.subtract(new DerivativeStructure(3,1,2,3),new Vector3D(4,4,4)),-15,-14,-13,1,0,-4,0,1,-4,0,0,-3);checkVector(createVector(1,2,3,4).subtract(new DerivativeStructure(4,1,3,5.0),createVector(3,-2,1,4)),-14,12,-2,-4,0,0,-3,0,-4,0,2,0,0,-4,-1);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testAdd",0,"@Test public void testAdd(){FieldVector3D<DerivativeStructure> v1=createVector(1,2,3,3);FieldVector3D<DerivativeStructure> v2=createVector(-3,-2,-1,3);v1=v1.add(v2);checkVector(v1,-2,0,2,2,0,0,0,2,0,0,0,2);checkVector(v2.add(v1),-5,-2,1,3,0,0,0,3,0,0,0,3);checkVector(v2.add(new Vector3D(-2,0,2)),-5,-2,1,1,0,0,0,1,0,0,0,1);checkVector(v2.add(3,v1),-9,-2,5,7,0,0,0,7,0,0,0,7);checkVector(v2.add(3,new Vector3D(-2,0,2)),-9,-2,5,1,0,0,0,1,0,0,0,1);checkVector(v2.add(new DerivativeStructure(3,1,2,3),new Vector3D(-2,0,2)),-9,-2,5,1,0,-2,0,1,0,0,0,3);checkVector(createVector(1,2,3,4).add(new DerivativeStructure(4,1,3,5.0),createVector(3,-2,1,4)),16,-8,8,6,0,0,3,0,6,0,-2,0,0,6,1);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testScalarProduct",0,"@Test public void testScalarProduct(){FieldVector3D<DerivativeStructure> v=createVector(1,2,3,3);v=v.scalarMultiply(3);checkVector(v,3,6,9);checkVector(v.scalarMultiply(0.5),1.5,3,4.5);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testVectorialProducts",0,"@Test public void testVectorialProducts(){FieldVector3D<DerivativeStructure> v1=createVector(2,1,-4,3);FieldVector3D<DerivativeStructure> v2=createVector(3,1,-1,3);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1,v2).getReal()- 11)< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1,v2.toVector3D()).getReal()- 11)< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1.toVector3D(),v2).getReal()- 11)< 1.0e-12);FieldVector3D<DerivativeStructure> v3=FieldVector3D.crossProduct(v1,v2);checkVector(v3,3,-10,-1);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1,v3).getReal())< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v2,v3).getReal())< 1.0e-12);v3=FieldVector3D.crossProduct(v1,v2.toVector3D());checkVector(v3,3,-10,-1);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1,v3).getReal())< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v2,v3).getReal())< 1.0e-12);v3=FieldVector3D.crossProduct(v1.toVector3D(),v2);checkVector(v3,3,-10,-1);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v1,v3).getReal())< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.dotProduct(v2,v3).getReal())< 1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testCrossProductCancellation",0,"@Test public void testCrossProductCancellation(){FieldVector3D<DerivativeStructure> v1=createVector(9070467121.0,4535233560.0,1,3);FieldVector3D<DerivativeStructure> v2=createVector(9070467123.0,4535233561.0,1,3);checkVector(FieldVector3D.crossProduct(v1,v2),-1,2,1);double scale=FastMath.scalb(1.0,100);FieldVector3D<DerivativeStructure> big1=new FieldVector3D<DerivativeStructure>(scale,v1);FieldVector3D<DerivativeStructure> small2=new FieldVector3D<DerivativeStructure>(1 / scale,v2);checkVector(FieldVector3D.crossProduct(big1,small2),-1,2,1);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testAngular",0,"@Test public void testAngular(){Assert.assertEquals(0,createVector(1,0,0,3).getAlpha().getReal(),1.0e-10);Assert.assertEquals(0,createVector(1,0,0,3).getDelta().getReal(),1.0e-10);Assert.assertEquals(FastMath.PI / 2,createVector(0,1,0,3).getAlpha().getReal(),1.0e-10);Assert.assertEquals(0,createVector(0,1,0,3).getDelta().getReal(),1.0e-10);Assert.assertEquals(FastMath.PI / 2,createVector(0,0,1,3).getDelta().getReal(),1.0e-10);FieldVector3D<DerivativeStructure> u=createVector(-1,1,-1,3);Assert.assertEquals(3 * FastMath.PI / 4,u.getAlpha().getReal(),1.0e-10);Assert.assertEquals(-1.0 / FastMath.sqrt(3),u.getDelta().sin().getReal(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testAngularSeparation",0,"@Test public void testAngularSeparation()throws MathArithmeticException {FieldVector3D<DerivativeStructure> v1=createVector(2,-1,4,3);FieldVector3D<DerivativeStructure> k=v1.normalize();FieldVector3D<DerivativeStructure> i=k.orthogonal();FieldVector3D<DerivativeStructure> v2=k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));Assert.assertTrue(FastMath.abs(FieldVector3D.angle(v1,v2).getReal()- 1.2)< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.angle(v1,v2.toVector3D()).getReal()- 1.2)< 1.0e-12);Assert.assertTrue(FastMath.abs(FieldVector3D.angle(v1.toVector3D(),v2).getReal()- 1.2)< 1.0e-12);try {FieldVector3D.angle(v1,Vector3D.ZERO);Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException mae){}Assert.assertEquals(0.0,FieldVector3D.angle(v1,v1.toVector3D()).getReal(),1.0e-15);Assert.assertEquals(FastMath.PI,FieldVector3D.angle(v1,v1.negate().toVector3D()).getReal(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNormalize",0,"@Test public void testNormalize()throws MathArithmeticException {Assert.assertEquals(1.0,createVector(5,-4,2,3).normalize().getNorm().getReal(),1.0e-12);try {createVector(0,0,0,3).normalize();Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException ae){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testNegate",0,"@Test public void testNegate(){checkVector(createVector(0.1,2.5,1.3,3).negate(),-0.1,-2.5,-1.3,-1,0,0,0,-1,0,0,0,-1);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testOrthogonal",0,"@Test public void testOrthogonal()throws MathArithmeticException {FieldVector3D<DerivativeStructure> v1=createVector(0.1,2.5,1.3,3);Assert.assertEquals(0.0,FieldVector3D.dotProduct(v1,v1.orthogonal()).getReal(),1.0e-12);FieldVector3D<DerivativeStructure> v2=createVector(2.3,-0.003,7.6,3);Assert.assertEquals(0.0,FieldVector3D.dotProduct(v2,v2.orthogonal()).getReal(),1.0e-12);FieldVector3D<DerivativeStructure> v3=createVector(-1.7,1.4,0.2,3);Assert.assertEquals(0.0,FieldVector3D.dotProduct(v3,v3.orthogonal()).getReal(),1.0e-12);FieldVector3D<DerivativeStructure> v4=createVector(4.2,0.1,-1.8,3);Assert.assertEquals(0.0,FieldVector3D.dotProduct(v4,v4.orthogonal()).getReal(),1.0e-12);try {createVector(0,0,0,3).orthogonal();Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException ae){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testAngle",0,"@Test public void testAngle()throws MathArithmeticException {Assert.assertEquals(0.22572612855273393616,FieldVector3D.angle(createVector(1,2,3,3),createVector(4,5,6,3)).getReal(),1.0e-12);Assert.assertEquals(7.98595620686106654517199e-8,FieldVector3D.angle(createVector(1,2,3,3),createVector(2,4,6.000001,3)).getReal(),1.0e-12);Assert.assertEquals(3.14159257373023116985197793156,FieldVector3D.angle(createVector(1,2,3,3),createVector(-2,-4,-6.000001,3)).getReal(),1.0e-12);try {FieldVector3D.angle(createVector(0,0,0,3),createVector(1,0,0,3));Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException ae){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testAccurateDotProduct",0,"@Test public void testAccurateDotProduct(){FieldVector3D<DerivativeStructure> u1=createVector(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0,3);FieldVector3D<DerivativeStructure> u2=createVector(-5712344449280879.0 / 2097152.0,-4550117129121957.0 / 2097152.0,8846951984510141.0 / 131072.0,3);DerivativeStructure sNaive=u1.getX().multiply(u2.getX()).add(u1.getY().multiply(u2.getY())).add(u1.getZ().multiply(u2.getZ()));DerivativeStructure sAccurate=FieldVector3D.dotProduct(u1,u2);Assert.assertEquals(0.0,sNaive.getReal(),1.0e-30);Assert.assertEquals(-2088690039198397.0 / 1125899906842624.0,sAccurate.getReal(),1.0e-16);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testDotProduct",0,"@Test public void testDotProduct(){Well1024a random=new Well1024a(553267312521321234l);for (int i=0;i < 10000;++i){double ux=10000 * random.nextDouble();double uy=10000 * random.nextDouble();double uz=10000 * random.nextDouble();double vx=10000 * random.nextDouble();double vy=10000 * random.nextDouble();double vz=10000 * random.nextDouble();double sNaive=ux * vx + uy * vy + uz * vz;FieldVector3D<DerivativeStructure> uds=createVector(ux,uy,uz,3);FieldVector3D<DerivativeStructure> vds=createVector(vx,vy,vz,3);Vector3D v=new Vector3D(vx,vy,vz);DerivativeStructure sAccurate=FieldVector3D.dotProduct(uds,vds);Assert.assertEquals(sNaive,sAccurate.getReal(),2.5e-16 * sNaive);Assert.assertEquals(ux + vx,sAccurate.getPartialDerivative(1,0,0),2.5e-16 * sNaive);Assert.assertEquals(uy + vy,sAccurate.getPartialDerivative(0,1,0),2.5e-16 * sNaive);Assert.assertEquals(uz + vz,sAccurate.getPartialDerivative(0,0,1),2.5e-16 * sNaive);sAccurate=FieldVector3D.dotProduct(uds,v);Assert.assertEquals(sNaive,sAccurate.getReal(),2.5e-16 * sNaive);Assert.assertEquals(vx,sAccurate.getPartialDerivative(1,0,0),2.5e-16 * sNaive);Assert.assertEquals(vy,sAccurate.getPartialDerivative(0,1,0),2.5e-16 * sNaive);Assert.assertEquals(vz,sAccurate.getPartialDerivative(0,0,1),2.5e-16 * sNaive);}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testAccurateCrossProduct",0,"@Test public void testAccurateCrossProduct(){final FieldVector3D<DerivativeStructure> u1=createVector(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0,3);final FieldVector3D<DerivativeStructure> u2=createVector(1796571811118507.0 / 2147483648.0,7853468008299307.0 / 2147483648.0,2599586637357461.0 / 17179869184.0,3);final FieldVector3D<DerivativeStructure> u3=createVector(12753243807587107.0 / 18446744073709551616.0,-2313766922703915.0 / 18446744073709551616.0,-227970081415313.0 / 288230376151711744.0,3);FieldVector3D<DerivativeStructure> cNaive=new FieldVector3D<DerivativeStructure>(u1.getY().multiply(u2.getZ()).subtract(u1.getZ().multiply(u2.getY())),u1.getZ().multiply(u2.getX()).subtract(u1.getX().multiply(u2.getZ())),u1.getX().multiply(u2.getY()).subtract(u1.getY().multiply(u2.getX())));FieldVector3D<DerivativeStructure> cAccurate=FieldVector3D.crossProduct(u1,u2);Assert.assertTrue(FieldVector3D.distance(u3,cNaive).getReal()> 2.9 * u3.getNorm().getReal());Assert.assertEquals(0.0,FieldVector3D.distance(u3,cAccurate).getReal(),1.0e-30 * cAccurate.getNorm().getReal());}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldVector3DTest.testCrossProduct",0,"@Test public void testCrossProduct(){Well1024a random=new Well1024a(885362227452043214l);for (int i=0;i < 10000;++i){double ux=random.nextDouble();double uy=random.nextDouble();double uz=random.nextDouble();double vx=random.nextDouble();double vy=random.nextDouble();double vz=random.nextDouble();Vector3D cNaive=new Vector3D(uy * vz - uz * vy,uz * vx - ux * vz,ux * vy - uy * vx);FieldVector3D<DerivativeStructure> uds=createVector(ux,uy,uz,3);FieldVector3D<DerivativeStructure> vds=createVector(vx,vy,vz,3);Vector3D v=new Vector3D(vx,vy,vz);checkVector(FieldVector3D.crossProduct(uds,vds),cNaive.getX(),cNaive.getY(),cNaive.getZ(),0,vz - uz,uy - vy,uz - vz,0,vx - ux,vy - uy,ux - vx,0);checkVector(FieldVector3D.crossProduct(uds,v),cNaive.getX(),cNaive.getY(),cNaive.getZ(),0,vz,-vy,-vz,0,vx,vy,-vx,0);}}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.cannotAddSampleDataWithSizeMismatch",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddSampleDataWithSizeMismatch(){double[]y=new double[]{1.0,2.0};double[][]x=new double[1][];x[0]=new double[]{1.0,0};createRegression().newSampleData(y,x);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testPerfectFit",0,"@Test public void testPerfectFit(){double[]betaHat=regression.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{11.0,1.0 / 2.0,2.0 / 3.0,3.0 / 4.0,4.0 / 5.0,5.0 / 6.0},1e-14);double[]residuals=regression.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{0d,0d,0d,0d,0d,0d},1e-14);RealMatrix errors=new Array2DRowRealMatrix(regression.estimateRegressionParametersVariance(),false);final double[]s={1.0,-1.0 / 2.0,-1.0 / 3.0,-1.0 / 4.0,-1.0 / 5.0,-1.0 / 6.0};RealMatrix referenceVariance=new Array2DRowRealMatrix(s.length,s.length);referenceVariance.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){@Override public double visit(int row,int column,double value){if (row == 0){return s[column];}double x=s[row]* s[column];return (row == column)? 2 * x : x;}});Assert.assertEquals(0.0,errors.subtract(referenceVariance).getNorm(),5.0e-16 * referenceVariance.getNorm());Assert.assertEquals(1,((OLSMultipleLinearRegression)regression).calculateRSquared(),1E-12);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testLongly",0,"/** * Test Longley dataset against certified values provided by NIST. Data Source: J. Longley (1967)""An Appraisal of Least Squares Programs for the Electronic Computer from the Point of View of the User"" Journal of the American Statistical Association,vol. 62. September,pp. 819-841. Certified values (and data)are from NIST: http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat*/@Test public void testLongly(){double[]design=new double[]{60323,83.0,234289,2356,1590,107608,1947,61122,88.5,259426,2325,1456,108632,1948,60171,88.2,258054,3682,1616,109773,1949,61187,89.5,284599,3351,1650,110929,1950,63221,96.2,328975,2099,3099,112075,1951,63639,98.1,346999,1932,3594,113270,1952,64989,99.0,365385,1870,3547,115094,1953,63761,100.0,363112,3578,3350,116219,1954,66019,101.2,397469,2904,3048,117388,1955,67857,104.6,419180,2822,2857,118734,1956,68169,108.4,442769,2936,2798,120445,1957,66513,110.8,444546,4681,2637,121950,1958,68655,112.6,482704,3813,2552,123366,1959,69564,114.2,502601,3931,2514,125368,1960,69331,115.7,518173,4806,2572,127852,1961,70551,116.9,554894,4007,2827,130081,1962};final int nobs=16;final int nvars=6;OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(design,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{-3482258.63459582,15.0618722713733,-0.358191792925910E-01,-2.02022980381683,-1.03322686717359,-0.511041056535807E-01,1829.15146461355},2E-8);double[]residuals=model.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{267.340029759711,-94.0139423988359,46.28716775752924,-410.114621930906,309.7145907602313,-249.3112153297231,-164.0489563956039,-13.18035686637081,14.30477260005235,455.394094551857,-17.26892711483297,-39.0550425226967,-155.5499735953195,-85.6713080421283,341.9315139607727,-206.7578251937366},1E-8);double[]errors=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(new double[]{890420.383607373,84.9149257747669,0.334910077722432E-01,0.488399681651699,0.214274163161675,0.226073200069370,455.478499142212},errors,1E-6);Assert.assertEquals(304.8540735619638,model.estimateRegressionStandardError(),1E-10);Assert.assertEquals(0.995479004577296,model.calculateRSquared(),1E-12);Assert.assertEquals(0.992465007628826,model.calculateAdjustedRSquared(),1E-12);checkVarianceConsistency(model);model.setNoIntercept(true);model.newSampleData(design,nobs,nvars);betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{-52.99357013868291,0.07107319907358,-0.42346585566399,-0.57256866841929,-0.41420358884978,48.41786562001326},1E-11);errors=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(new double[]{129.54486693117232,0.03016640003786,0.41773654056612,0.27899087467676,0.32128496193363,17.68948737819961},errors,1E-11);residuals=model.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{279.90274927293092,-130.32465380836874,90.73228661967445,-401.31252201634948,-440.46768772620027,-543.54512853774793,201.32111639536299,215.90889365977932,73.09368242049943,913.21694494481869,424.82484953610174,-8.56475876776709,-361.32974610842876,27.34560497213464,151.28955976355002,-492.49937355336846},1E-10);Assert.assertEquals(475.1655079819517,model.estimateRegressionStandardError(),1E-10);Assert.assertEquals(0.9999670130706,model.calculateRSquared(),1E-12);Assert.assertEquals(0.999947220913,model.calculateAdjustedRSquared(),1E-12);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testSwissFertility",0,"/** * Test R Swiss fertility dataset against R. Data Source: R datasets package*/@Test public void testSwissFertility(){double[]design=new double[]{80.2,17.0,15,12,9.96,83.1,45.1,6,9,84.84,92.5,39.7,5,5,93.40,85.8,36.5,12,7,33.77,76.9,43.5,17,15,5.16,76.1,35.3,9,7,90.57,83.8,70.2,16,7,92.85,92.4,67.8,14,8,97.16,82.4,53.3,12,7,97.67,82.9,45.2,16,13,91.38,87.1,64.5,14,6,98.61,64.1,62.0,21,12,8.52,66.9,67.5,14,7,2.27,68.9,60.7,19,12,4.43,61.7,69.3,22,5,2.82,68.3,72.6,18,2,24.20,71.7,34.0,17,8,3.30,55.7,19.4,26,28,12.11,54.3,15.2,31,20,2.15,65.1,73.0,19,9,2.84,65.5,59.8,22,10,5.23,65.0,55.1,14,3,4.52,56.6,50.9,22,12,15.14,57.4,54.1,20,6,4.20,72.5,71.2,12,1,2.40,74.2,58.1,14,8,5.23,72.0,63.5,6,3,2.56,60.5,60.8,16,10,7.72,58.3,26.8,25,19,18.46,65.4,49.5,15,8,6.10,75.5,85.9,3,2,99.71,69.3,84.9,7,6,99.68,77.3,89.7,5,2,100.00,70.5,78.2,12,6,98.96,79.4,64.9,7,3,98.22,65.0,75.9,9,9,99.06,92.2,84.6,3,3,99.46,79.3,63.1,13,13,96.83,70.4,38.4,26,12,5.62,65.7,7.7,29,11,13.79,72.7,16.7,22,13,11.22,64.4,17.6,35,32,16.92,77.6,37.6,15,7,4.97,67.6,18.7,25,7,8.65,35.0,1.2,37,53,42.34,44.7,46.6,16,29,50.43,42.8,27.7,22,29,58.33};final int nobs=47;final int nvars=4;OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(design,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{91.05542390271397,-0.22064551045715,-0.26058239824328,-0.96161238456030,0.12441843147162},1E-12);double[]residuals=model.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{7.1044267859730512,1.6580347433531366,4.6944952770029644,8.4548022690166160,13.6547432343186212,-9.3586864458500774,7.5822446330520386,15.5568995563859289,0.8113090736598980,7.1186762732484308,7.4251378771228724,2.6761316873234109,0.8351584810309354,7.1769991119615177,-3.8746753206299553,-3.1337779476387251,-0.1412575244091504,1.1186809170469780,-6.3588097346816594,3.4039270429434074,2.3374058329820175,-7.9272368576900503,-7.8361010968497959,-11.2597369269357070,0.9445333697827101,6.6544245101380328,-0.9146136301118665,-4.3152449403848570,-4.3536932047009183,-3.8907885169304661,-6.3027643926302188,-7.8308982189289091,-3.1792280015332750,-6.7167298771158226,-4.8469946718041754,-10.6335664353633685,11.1031134362036958,6.0084032641811733,5.4326230830188482,-7.2375578629692230,2.1671550814448222,15.0147574652763112,4.8625103516321015,-7.1597256413907706,-0.4515205619767598,-10.2916870903837587,-15.7812984571900063},1E-12);double[]errors=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(new double[]{6.94881329475087,0.07360008972340,0.27410957467466,0.19454551679325,0.03726654773803},errors,1E-10);Assert.assertEquals(7.73642194433223,model.estimateRegressionStandardError(),1E-12);Assert.assertEquals(0.649789742860228,model.calculateRSquared(),1E-12);Assert.assertEquals(0.6164363850373927,model.calculateAdjustedRSquared(),1E-12);checkVarianceConsistency(model);model=new OLSMultipleLinearRegression();model.setNoIntercept(true);model.newSampleData(design,nobs,nvars);betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{0.52191832900513,2.36588087917963,-0.94770353802795,0.30851985863609},1E-12);residuals=model.estimateResiduals();TestUtils.assertEquals(residuals,new double[]{44.138759883538249,27.720705122356215,35.873200836126799,34.574619581211977,26.600168342080213,15.074636243026923,-12.704904871199814,1.497443824078134,2.691972687079431,5.582798774291231,-4.422986561283165,-9.198581600334345,4.481765170730647,2.273520207553216,-22.649827853221336,-17.747900013943308,20.298314638496436,6.861405135329779,-8.684712790954924,-10.298639278062371,-9.896618896845819,4.568568616351242,-15.313570491727944,-13.762961360873966,7.156100301980509,16.722282219843990,26.716200609071898,-1.991466398777079,-2.523342564719335,9.776486693095093,-5.297535127628603,-16.639070567471094,-10.302057295211819,-23.549487860816846,1.506624392156384,-17.939174438345930,13.105792202765040,-1.943329906928462,-1.516005841666695,-0.759066561832886,20.793137744128977,-2.485236153005426,27.588238710486976,2.658333257106881,-15.998337823623046,-5.550742066720694,-14.219077806826615},1E-12);errors=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(new double[]{0.10470063765677,0.41684100584290,0.43370143099691,0.07694953606522},errors,1E-10);Assert.assertEquals(17.24710630547,model.estimateRegressionStandardError(),1E-10);Assert.assertEquals(0.946350722085,model.calculateRSquared(),1E-12);Assert.assertEquals(0.9413600915813,model.calculateAdjustedRSquared(),1E-12);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testHat",0,"/** * Test hat matrix computation*/@Test public void testHat(){double[]design=new double[]{11.14,.499,11.1,12.74,.558,8.9,13.13,.604,8.8,11.51,.441,8.9,12.38,.550,8.8,12.60,.528,9.9,11.13,.418,10.7,11.7,.480,10.5,11.02,.406,10.5,11.41,.467,10.7};int nobs=10;int nvars=2;OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(design,nobs,nvars);RealMatrix hat=model.calculateHat();double[]referenceData=new double[]{.418,-.002,.079,-.274,-.046,.181,.128,.222,.050,.242,.242,.292,.136,.243,.128,-.041,.033,-.035,.004,.417,-.019,.273,.187,-.126,.044,-.153,.004,.604,.197,-.038,.168,-.022,.275,-.028,.252,.111,-.030,.019,-.010,-.010,.148,.042,.117,.012,.111,.262,.145,.277,.174,.154,.120,.168,.315,.148,.187};int k=0;for (int i=0;i < 10;i++){for (int j=i;j < 10;j++){Assert.assertEquals(referenceData[k],hat.getEntry(i,j),10e-3);Assert.assertEquals(hat.getEntry(i,j),hat.getEntry(j,i),10e-12);k++;}}double[]residuals=model.estimateResiduals();RealMatrix I=MatrixUtils.createRealIdentityMatrix(10);double[]hatResiduals=I.subtract(hat).operate(model.getY()).toArray();TestUtils.assertEquals(residuals,hatResiduals,10e-12);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testYVariance",0,"/** * test calculateYVariance*/@Test public void testYVariance(){OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();model.newSampleData(y,x);TestUtils.assertEquals(model.calculateYVariance(),3.5,0);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testNewSample2",0,"/** * Verifies that setting X and Y separately has the same effect as newSample(X,Y).*/@Test public void testNewSample2(){double[]y=new double[]{1,2,3,4};double[][]x=new double[][]{{19,22,33},{20,30,40},{25,35,45},{27,37,47}};OLSMultipleLinearRegression regression=new OLSMultipleLinearRegression();regression.newSampleData(y,x);RealMatrix combinedX=regression.getX().copy();RealVector combinedY=regression.getY().copy();regression.newXSampleData(x);regression.newYSampleData(y);Assert.assertEquals(combinedX,regression.getX());Assert.assertEquals(combinedY,regression.getY());regression.setNoIntercept(true);regression.newSampleData(y,x);combinedX=regression.getX().copy();combinedY=regression.getY().copy();regression.newXSampleData(x);regression.newYSampleData(y);Assert.assertEquals(combinedX,regression.getX());Assert.assertEquals(combinedY,regression.getY());}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testNewSampleDataYNull",0,"@Test(expected=IllegalArgumentException.class)public void testNewSampleDataYNull(){createRegression().newSampleData(null,new double[][]{});}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testNewSampleDataXNull",0,"@Test(expected=IllegalArgumentException.class)public void testNewSampleDataXNull(){createRegression().newSampleData(new double[]{},null);}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testWampler1",0,"@Test public void testWampler1(){double[]data=new double[]{1,0,6,1,63,2,364,3,1365,4,3906,5,9331,6,19608,7,37449,8,66430,9,111111,10,177156,11,271453,12,402234,13,579195,14,813616,15,1118481,16,1508598,17,2000719,18,2613660,19,3368421,20};OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();final int nvars=5;final int nobs=21;double[]tmp=new double[(nvars + 1)* nobs];int off=0;int off2=0;for (int i=0;i < nobs;i++){tmp[off2]=data[off];tmp[off2 + 1]=data[off + 1];tmp[off2 + 2]=tmp[off2 + 1]* tmp[off2 + 1];tmp[off2 + 3]=tmp[off2 + 1]* tmp[off2 + 2];tmp[off2 + 4]=tmp[off2 + 1]* tmp[off2 + 3];tmp[off2 + 5]=tmp[off2 + 1]* tmp[off2 + 4];off2+=(nvars + 1);off+=2;}model.newSampleData(tmp,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-8);double[]se=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(se,new double[]{0.0,0.0,0.0,0.0,0.0,0.0},1E-8);TestUtils.assertEquals(1.0,model.calculateRSquared(),1.0e-10);TestUtils.assertEquals(0,model.estimateErrorVariance(),1.0e-7);TestUtils.assertEquals(0.00,model.calculateResidualSumOfSquares(),1.0e-6);return;}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testWampler2",0,"@Test public void testWampler2(){double[]data=new double[]{1.00000,0,1.11111,1,1.24992,2,1.42753,3,1.65984,4,1.96875,5,2.38336,6,2.94117,7,3.68928,8,4.68559,9,6.00000,10,7.71561,11,9.92992,12,12.75603,13,16.32384,14,20.78125,15,26.29536,16,33.05367,17,41.26528,18,51.16209,19,63.00000,20};OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();final int nvars=5;final int nobs=21;double[]tmp=new double[(nvars + 1)* nobs];int off=0;int off2=0;for (int i=0;i < nobs;i++){tmp[off2]=data[off];tmp[off2 + 1]=data[off + 1];tmp[off2 + 2]=tmp[off2 + 1]* tmp[off2 + 1];tmp[off2 + 3]=tmp[off2 + 1]* tmp[off2 + 2];tmp[off2 + 4]=tmp[off2 + 1]* tmp[off2 + 3];tmp[off2 + 5]=tmp[off2 + 1]* tmp[off2 + 4];off2+=(nvars + 1);off+=2;}model.newSampleData(tmp,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0e-1,1.0e-2,1.0e-3,1.0e-4,1.0e-5},1E-8);double[]se=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(se,new double[]{0.0,0.0,0.0,0.0,0.0,0.0},1E-8);TestUtils.assertEquals(1.0,model.calculateRSquared(),1.0e-10);TestUtils.assertEquals(0,model.estimateErrorVariance(),1.0e-7);TestUtils.assertEquals(0.00,model.calculateResidualSumOfSquares(),1.0e-6);return;}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testWampler3",0,"@Test public void testWampler3(){double[]data=new double[]{760,0,-2042,1,2111,2,-1684,3,3888,4,1858,5,11379,6,17560,7,39287,8,64382,9,113159,10,175108,11,273291,12,400186,13,581243,14,811568,15,1121004,16,1506550,17,2002767,18,2611612,19,3369180,20};OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();final int nvars=5;final int nobs=21;double[]tmp=new double[(nvars + 1)* nobs];int off=0;int off2=0;for (int i=0;i < nobs;i++){tmp[off2]=data[off];tmp[off2 + 1]=data[off + 1];tmp[off2 + 2]=tmp[off2 + 1]* tmp[off2 + 1];tmp[off2 + 3]=tmp[off2 + 1]* tmp[off2 + 2];tmp[off2 + 4]=tmp[off2 + 1]* tmp[off2 + 3];tmp[off2 + 5]=tmp[off2 + 1]* tmp[off2 + 4];off2+=(nvars + 1);off+=2;}model.newSampleData(tmp,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-8);double[]se=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(se,new double[]{2152.32624678170,2363.55173469681,779.343524331583,101.475507550350,5.64566512170752,0.112324854679312},1E-8);TestUtils.assertEquals(.999995559025820,model.calculateRSquared(),1.0e-10);TestUtils.assertEquals(5570284.53333333,model.estimateErrorVariance(),1.0e-6);TestUtils.assertEquals(83554268.0000000,model.calculateResidualSumOfSquares(),1.0e-5);return;}"
"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegressionTest.testWampler4",0,"@Test public void testWampler4(){double[]data=new double[]{75901,0,-204794,1,204863,2,-204436,3,253665,4,-200894,5,214131,6,-185192,7,221249,8,-138370,9,315911,10,-27644,11,455253,12,197434,13,783995,14,608816,15,1370781,16,1303798,17,2205519,18,2408860,19,3444321,20};OLSMultipleLinearRegression model=new OLSMultipleLinearRegression();final int nvars=5;final int nobs=21;double[]tmp=new double[(nvars + 1)* nobs];int off=0;int off2=0;for (int i=0;i < nobs;i++){tmp[off2]=data[off];tmp[off2 + 1]=data[off + 1];tmp[off2 + 2]=tmp[off2 + 1]* tmp[off2 + 1];tmp[off2 + 3]=tmp[off2 + 1]* tmp[off2 + 2];tmp[off2 + 4]=tmp[off2 + 1]* tmp[off2 + 3];tmp[off2 + 5]=tmp[off2 + 1]* tmp[off2 + 4];off2+=(nvars + 1);off+=2;}model.newSampleData(tmp,nobs,nvars);double[]betaHat=model.estimateRegressionParameters();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-6);double[]se=model.estimateRegressionParametersStandardErrors();TestUtils.assertEquals(se,new double[]{215232.624678170,236355.173469681,77934.3524331583,10147.5507550350,564.566512170752,11.2324854679312},1E-8);TestUtils.assertEquals(.957478440825662,model.calculateRSquared(),1.0e-10);TestUtils.assertEquals(55702845333.3333,model.estimateErrorVariance(),1.0e-4);TestUtils.assertEquals(835542680000.000,model.calculateResidualSumOfSquares(),1.0e-3);return;}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testNonSquareOperator",0,"@Test(expected=NonSquareOperatorException.class)public void testNonSquareOperator(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,3);final IterativeLinearSolver solver;solver=new ConjugateGradient(10,0.,false);final ArrayRealVector b=new ArrayRealVector(a.getRowDimension());final ArrayRealVector x=new ArrayRealVector(a.getColumnDimension());solver.solve(a,b,x);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testDimensionMismatchRightHandSide",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionMismatchRightHandSide(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(3,3);final IterativeLinearSolver solver;solver=new ConjugateGradient(10,0.,false);final ArrayRealVector b=new ArrayRealVector(2);final ArrayRealVector x=new ArrayRealVector(3);solver.solve(a,b,x);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testDimensionMismatchSolution",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionMismatchSolution(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(3,3);final IterativeLinearSolver solver;solver=new ConjugateGradient(10,0.,false);final ArrayRealVector b=new ArrayRealVector(3);final ArrayRealVector x=new ArrayRealVector(2);solver.solve(a,b,x);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testNonPositiveDefiniteLinearOperator",0,"@Test(expected=NonPositiveDefiniteOperatorException.class)public void testNonPositiveDefiniteLinearOperator(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);a.setEntry(0,0,-1.);a.setEntry(0,1,2.);a.setEntry(1,0,3.);a.setEntry(1,1,4.);final IterativeLinearSolver solver;solver=new ConjugateGradient(10,0.,true);final ArrayRealVector b=new ArrayRealVector(2);b.setEntry(0,-1.);b.setEntry(1,-1.);final ArrayRealVector x=new ArrayRealVector(2);solver.solve(a,b,x);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testUnpreconditionedSolution",0,"@Test public void testUnpreconditionedSolution(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final IterativeLinearSolver solver;solver=new ConjugateGradient(maxIterations,1E-10,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x=solver.solve(a,b);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-10 * Math.abs(expected);final String msg=String.format(""entry[%d][%d]"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testUnpreconditionedInPlaceSolutionWithInitialGuess",0,"@Test public void testUnpreconditionedInPlaceSolutionWithInitialGuess(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final IterativeLinearSolver solver;solver=new ConjugateGradient(maxIterations,1E-10,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x0=new ArrayRealVector(n);x0.set(1.);final RealVector x=solver.solveInPlace(a,b,x0);Assert.assertSame(""x should be a reference to x0"",x0,x);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-10 * Math.abs(expected);final String msg=String.format(""entry[%d][%d)"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testUnpreconditionedSolutionWithInitialGuess",0,"@Test public void testUnpreconditionedSolutionWithInitialGuess(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final IterativeLinearSolver solver;solver=new ConjugateGradient(maxIterations,1E-10,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x0=new ArrayRealVector(n);x0.set(1.);final RealVector x=solver.solve(a,b,x0);Assert.assertNotSame(""x should not be a reference to x0"",x0,x);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-10 * Math.abs(expected);final String msg=String.format(""entry[%d][%d]"",i,j);Assert.assertEquals(msg,expected,actual,delta);Assert.assertEquals(msg,x0.getEntry(i),1.,Math.ulp(1.));}}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testUnpreconditionedResidual",0,"/** * Check whether the estimate of the (updated)residual corresponds to the exact residual. This fails to be true for a large number of iterations,due to the loss of orthogonality of the successive search directions. Therefore,in the present test,the number of iterations is limited.*/@Test public void testUnpreconditionedResidual(){final int n=10;final int maxIterations=n;final RealLinearOperator a=new HilbertMatrix(n);final ConjugateGradient solver;solver=new ConjugateGradient(maxIterations,1E-15,true);final RealVector r=new ArrayRealVector(n);final RealVector x=new ArrayRealVector(n);final IterationListener listener=new IterationListener(){public void terminationPerformed(final IterationEvent e){}public void iterationStarted(final IterationEvent e){}public void iterationPerformed(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;RealVector v=evt.getResidual();r.setSubVector(0,v);v=evt.getSolution();x.setSubVector(0,v);}public void initializationPerformed(final IterationEvent e){}};solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);boolean caught=false;try {solver.solve(a,b);}catch(MaxCountExceededException e){caught=true;final RealVector y=a.operate(x);for (int i=0;i < n;i++){final double actual=b.getEntry(i)- y.getEntry(i);final double expected=r.getEntry(i);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""column %d,residual %d"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}Assert.assertTrue(""MaxCountExceededException should have been caught"",caught);}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testNonSquarePreconditioner",0,"@Test(expected=NonSquareOperatorException.class)public void testNonSquarePreconditioner(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);final RealLinearOperator m=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){throw new UnsupportedOperationException();}@Override public int getRowDimension(){return 2;}@Override public int getColumnDimension(){return 3;}};final PreconditionedIterativeLinearSolver solver;solver=new ConjugateGradient(10,0d,false);final ArrayRealVector b=new ArrayRealVector(a.getRowDimension());solver.solve(a,m,b);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testMismatchedOperatorDimensions",0,"@Test(expected=DimensionMismatchException.class)public void testMismatchedOperatorDimensions(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);final RealLinearOperator m=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){throw new UnsupportedOperationException();}@Override public int getRowDimension(){return 3;}@Override public int getColumnDimension(){return 3;}};final PreconditionedIterativeLinearSolver solver;solver=new ConjugateGradient(10,0d,false);final ArrayRealVector b=new ArrayRealVector(a.getRowDimension());solver.solve(a,m,b);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testNonPositiveDefinitePreconditioner",0,"@Test(expected=NonPositiveDefiniteOperatorException.class)public void testNonPositiveDefinitePreconditioner(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);a.setEntry(0,0,1d);a.setEntry(0,1,2d);a.setEntry(1,0,3d);a.setEntry(1,1,4d);final RealLinearOperator m=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){final ArrayRealVector y=new ArrayRealVector(2);y.setEntry(0,-x.getEntry(0));y.setEntry(1,x.getEntry(1));return y;}@Override public int getRowDimension(){return 2;}@Override public int getColumnDimension(){return 2;}};final PreconditionedIterativeLinearSolver solver;solver=new ConjugateGradient(10,0d,true);final ArrayRealVector b=new ArrayRealVector(2);b.setEntry(0,-1d);b.setEntry(1,-1d);solver.solve(a,m,b);}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testPreconditionedSolution",0,"@Test public void testPreconditionedSolution(){final int n=8;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final RealLinearOperator m=JacobiPreconditioner.create(a);final PreconditionedIterativeLinearSolver solver;solver=new ConjugateGradient(maxIterations,1E-15,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x=solver.solve(a,m,b);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""coefficient (%d,%d)"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testPreconditionedResidual",0,"@Test public void testPreconditionedResidual(){final int n=10;final int maxIterations=n;final RealLinearOperator a=new HilbertMatrix(n);final RealLinearOperator m=JacobiPreconditioner.create(a);final ConjugateGradient solver;solver=new ConjugateGradient(maxIterations,1E-15,true);final RealVector r=new ArrayRealVector(n);final RealVector x=new ArrayRealVector(n);final IterationListener listener=new IterationListener(){public void terminationPerformed(final IterationEvent e){}public void iterationStarted(final IterationEvent e){}public void iterationPerformed(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;RealVector v=evt.getResidual();r.setSubVector(0,v);v=evt.getSolution();x.setSubVector(0,v);}public void initializationPerformed(final IterationEvent e){}};solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);boolean caught=false;try {solver.solve(a,m,b);}catch(MaxCountExceededException e){caught=true;final RealVector y=a.operate(x);for (int i=0;i < n;i++){final double actual=b.getEntry(i)- y.getEntry(i);final double expected=r.getEntry(i);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""column %d,residual %d"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}Assert.assertTrue(""MaxCountExceededException should have been caught"",caught);}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testPreconditionedSolution2",0,"@Test public void testPreconditionedSolution2(){final int n=100;final int maxIterations=100000;final Array2DRowRealMatrix a=new Array2DRowRealMatrix(n,n);double daux=1.;for (int i=0;i < n;i++){a.setEntry(i,i,daux);daux*=1.2;for (int j=i + 1;j < n;j++){if (i == j){}else {final double value=1.0;a.setEntry(i,j,value);a.setEntry(j,i,value);}}}final RealLinearOperator m=JacobiPreconditioner.create(a);final PreconditionedIterativeLinearSolver pcg;final IterativeLinearSolver cg;pcg=new ConjugateGradient(maxIterations,1E-6,true);cg=new ConjugateGradient(maxIterations,1E-6,true);final RealVector b=new ArrayRealVector(n);final String pattern=""preconditioned gradient (%d iterations)should"" + "" have been faster than unpreconditioned (%d iterations)"";String msg;for (int j=0;j < 1;j++){b.set(0.);b.setEntry(j,1.);final RealVector px=pcg.solve(a,m,b);final RealVector x=cg.solve(a,b);final int npcg=pcg.getIterationManager().getIterations();final int ncg=cg.getIterationManager().getIterations();msg=String.format(pattern,npcg,ncg);Assert.assertTrue(msg,npcg < ncg);for (int i=0;i < n;i++){msg=String.format(""row %d,column %d"",i,j);final double expected=x.getEntry(i);final double actual=px.getEntry(i);final double delta=1E-6 * Math.abs(expected);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testEventManagement",0,"@Test public void testEventManagement(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final IterativeLinearSolver solver;final int[]count=new int[]{0,0,0,0};final IterationListener listener=new IterationListener(){private void doTestVectorsAreUnmodifiable(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;try {evt.getResidual().set(0.0);Assert.fail(""r is modifiable"");}catch(MathUnsupportedOperationException exc){}try {evt.getRightHandSideVector().set(0.0);Assert.fail(""b is modifiable"");}catch(MathUnsupportedOperationException exc){}try {evt.getSolution().set(0.0);Assert.fail(""x is modifiable"");}catch(MathUnsupportedOperationException exc){}}public void initializationPerformed(final IterationEvent e){++count[0];doTestVectorsAreUnmodifiable(e);}public void iterationPerformed(final IterationEvent e){++count[2];Assert.assertEquals(""iteration performed"",count[2],e.getIterations()- 1);doTestVectorsAreUnmodifiable(e);}public void iterationStarted(final IterationEvent e){++count[1];Assert.assertEquals(""iteration started"",count[1],e.getIterations()- 1);doTestVectorsAreUnmodifiable(e);}public void terminationPerformed(final IterationEvent e){++count[3];doTestVectorsAreUnmodifiable(e);}};solver=new ConjugateGradient(maxIterations,1E-10,true);solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){Arrays.fill(count,0);b.set(0.);b.setEntry(j,1.);solver.solve(a,b);String msg=String.format(""column %d (initialization)"",j);Assert.assertEquals(msg,1,count[0]);msg=String.format(""column %d (finalization)"",j);Assert.assertEquals(msg,1,count[3]);}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testUnpreconditionedNormOfResidual",0,"@Test public void testUnpreconditionedNormOfResidual(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final IterativeLinearSolver solver;final IterationListener listener=new IterationListener(){private void doTestNormOfResidual(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;final RealVector x=evt.getSolution();final RealVector b=evt.getRightHandSideVector();final RealVector r=b.subtract(a.operate(x));final double rnorm=r.getNorm();Assert.assertEquals(""iteration performed (residual)"",rnorm,evt.getNormOfResidual(),FastMath.max(1E-5 * rnorm,1E-10));}public void initializationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationStarted(final IterationEvent e){doTestNormOfResidual(e);}public void terminationPerformed(final IterationEvent e){doTestNormOfResidual(e);}};solver=new ConjugateGradient(maxIterations,1E-10,true);solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);solver.solve(a,b);}}"
"org.apache.commons.math3.linear.ConjugateGradientTest.testPreconditionedNormOfResidual",0,"@Test public void testPreconditionedNormOfResidual(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final RealLinearOperator m=JacobiPreconditioner.create(a);final PreconditionedIterativeLinearSolver solver;final IterationListener listener=new IterationListener(){private void doTestNormOfResidual(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;final RealVector x=evt.getSolution();final RealVector b=evt.getRightHandSideVector();final RealVector r=b.subtract(a.operate(x));final double rnorm=r.getNorm();Assert.assertEquals(""iteration performed (residual)"",rnorm,evt.getNormOfResidual(),FastMath.max(1E-5 * rnorm,1E-10));}public void initializationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationStarted(final IterationEvent e){doTestNormOfResidual(e);}public void terminationPerformed(final IterationEvent e){doTestNormOfResidual(e);}};solver=new ConjugateGradient(maxIterations,1E-10,true);solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);solver.solve(a,m,b);}}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testContains",0,"@Test public void testContains()throws MathArithmeticException {Plane p=new Plane(new Vector3D(0,0,1),new Vector3D(0,0,1));Assert.assertTrue(p.contains(new Vector3D(0,0,1)));Assert.assertTrue(p.contains(new Vector3D(17,-32,1)));Assert.assertTrue(!p.contains(new Vector3D(17,-32,1.001)));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testOffset",0,"@Test public void testOffset()throws MathArithmeticException {Vector3D p1=new Vector3D(1,1,1);Plane p=new Plane(p1,new Vector3D(0.2,0,0));Assert.assertEquals(-5.0,p.getOffset(new Vector3D(-4,0,0)),1.0e-10);Assert.assertEquals(+5.0,p.getOffset(new Vector3D(6,10,-12)),1.0e-10);Assert.assertEquals(0.3,p.getOffset(new Vector3D(1.0,p1,0.3,p.getNormal())),1.0e-10);Assert.assertEquals(-0.3,p.getOffset(new Vector3D(1.0,p1,-0.3,p.getNormal())),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testPoint",0,"@Test public void testPoint()throws MathArithmeticException {Plane p=new Plane(new Vector3D(2,-3,1),new Vector3D(1,4,9));Assert.assertTrue(p.contains(p.getOrigin()));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testThreePoints",0,"@Test public void testThreePoints()throws MathArithmeticException {Vector3D p1=new Vector3D(1.2,3.4,-5.8);Vector3D p2=new Vector3D(3.4,-5.8,1.2);Vector3D p3=new Vector3D(-2.0,4.3,0.7);Plane p=new Plane(p1,p2,p3);Assert.assertTrue(p.contains(p1));Assert.assertTrue(p.contains(p2));Assert.assertTrue(p.contains(p3));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testRotate",0,"@Test public void testRotate()throws MathArithmeticException,MathIllegalArgumentException {Vector3D p1=new Vector3D(1.2,3.4,-5.8);Vector3D p2=new Vector3D(3.4,-5.8,1.2);Vector3D p3=new Vector3D(-2.0,4.3,0.7);Plane p=new Plane(p1,p2,p3);Vector3D oldNormal=p.getNormal();p=p.rotate(p2,new Rotation(p2.subtract(p1),1.7));Assert.assertTrue(p.contains(p1));Assert.assertTrue(p.contains(p2));Assert.assertTrue(!p.contains(p3));p=p.rotate(p2,new Rotation(oldNormal,0.1));Assert.assertTrue(!p.contains(p1));Assert.assertTrue(p.contains(p2));Assert.assertTrue(!p.contains(p3));p=p.rotate(p1,new Rotation(oldNormal,0.1));Assert.assertTrue(!p.contains(p1));Assert.assertTrue(!p.contains(p2));Assert.assertTrue(!p.contains(p3));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testTranslate",0,"@Test public void testTranslate()throws MathArithmeticException {Vector3D p1=new Vector3D(1.2,3.4,-5.8);Vector3D p2=new Vector3D(3.4,-5.8,1.2);Vector3D p3=new Vector3D(-2.0,4.3,0.7);Plane p=new Plane(p1,p2,p3);p=p.translate(new Vector3D(2.0,p.getU(),-1.5,p.getV()));Assert.assertTrue(p.contains(p1));Assert.assertTrue(p.contains(p2));Assert.assertTrue(p.contains(p3));p=p.translate(new Vector3D(-1.2,p.getNormal()));Assert.assertTrue(!p.contains(p1));Assert.assertTrue(!p.contains(p2));Assert.assertTrue(!p.contains(p3));p=p.translate(new Vector3D(+1.2,p.getNormal()));Assert.assertTrue(p.contains(p1));Assert.assertTrue(p.contains(p2));Assert.assertTrue(p.contains(p3));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testIntersection",0,"@Test public void testIntersection()throws MathArithmeticException,MathIllegalArgumentException {Plane p=new Plane(new Vector3D(1,2,3),new Vector3D(-4,1,-5));Line l=new Line(new Vector3D(0.2,-3.5,0.7),new Vector3D(1.2,-2.5,-0.3));Vector3D point=p.intersection(l);Assert.assertTrue(p.contains(point));Assert.assertTrue(l.contains(point));Assert.assertNull(p.intersection(new Line(new Vector3D(10,10,10),new Vector3D(10,10,10).add(p.getNormal().orthogonal()))));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testIntersection2",0,"@Test public void testIntersection2()throws MathArithmeticException {Vector3D p1=new Vector3D(1.2,3.4,-5.8);Vector3D p2=new Vector3D(3.4,-5.8,1.2);Plane pA=new Plane(p1,p2,new Vector3D(-2.0,4.3,0.7));Plane pB=new Plane(p1,new Vector3D(11.4,-3.8,5.1),p2);Line l=pA.intersection(pB);Assert.assertTrue(l.contains(p1));Assert.assertTrue(l.contains(p2));Assert.assertNull(pA.intersection(pA));}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testIntersection3",0,"@Test public void testIntersection3()throws MathArithmeticException {Vector3D reference=new Vector3D(1.2,3.4,-5.8);Plane p1=new Plane(reference,new Vector3D(1,3,3));Plane p2=new Plane(reference,new Vector3D(-2,4,0));Plane p3=new Plane(reference,new Vector3D(7,0,-4));Vector3D p=Plane.intersection(p1,p2,p3);Assert.assertEquals(reference.getX(),p.getX(),1.0e-10);Assert.assertEquals(reference.getY(),p.getY(),1.0e-10);Assert.assertEquals(reference.getZ(),p.getZ(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.PlaneTest.testSimilar",0,"@Test public void testSimilar()throws MathArithmeticException {Vector3D p1=new Vector3D(1.2,3.4,-5.8);Vector3D p2=new Vector3D(3.4,-5.8,1.2);Vector3D p3=new Vector3D(-2.0,4.3,0.7);Plane pA=new Plane(p1,p2,p3);Plane pB=new Plane(p1,new Vector3D(11.4,-3.8,5.1),p2);Assert.assertTrue(!pA.isSimilarTo(pB));Assert.assertTrue(pA.isSimilarTo(pA));Assert.assertTrue(pA.isSimilarTo(new Plane(p1,p3,p2)));Vector3D shift=new Vector3D(0.3,pA.getNormal());Assert.assertTrue(!pA.isSimilarTo(new Plane(p1.add(shift),p3.add(shift),p2.add(shift))));}"
"org.apache.commons.math3.optim.SimpleVectorValueCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimpleVectorValueChecker(1e-1,1e-2,0);}"
"org.apache.commons.math3.optim.SimpleVectorValueCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optim.SimpleVectorValueCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(1e-8,1e-8);final PointVectorValuePair a=new PointVectorValuePair(new double[]{1d},new double[]{1d});final PointVectorValuePair b=new PointVectorValuePair(new double[]{10d},new double[]{10d});Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.analysis.function.LogitTest.testPreconditions1",0,"@Test(expected=OutOfRangeException.class)public void testPreconditions1(){final double lo=-1;final double hi=2;final UnivariateFunction f=new Logit(lo,hi);f.value(lo - 1);}"
"org.apache.commons.math3.analysis.function.LogitTest.testPreconditions2",0,"@Test(expected=OutOfRangeException.class)public void testPreconditions2(){final double lo=-1;final double hi=2;final UnivariateFunction f=new Logit(lo,hi);f.value(hi + 1);}"
"org.apache.commons.math3.analysis.function.LogitTest.testSomeValues",0,"@Test public void testSomeValues(){final double lo=1;final double hi=2;final UnivariateFunction f=new Logit(lo,hi);Assert.assertEquals(Double.NEGATIVE_INFINITY,f.value(1),EPS);Assert.assertEquals(Double.POSITIVE_INFINITY,f.value(2),EPS);Assert.assertEquals(0,f.value(1.5),EPS);}"
"org.apache.commons.math3.analysis.function.LogitTest.testDerivative",0,"@Test public void testDerivative(){final double lo=1;final double hi=2;final Logit f=new Logit(lo,hi);final DerivativeStructure f15=f.value(new DerivativeStructure(1,1,0,1.5));Assert.assertEquals(4,f15.getPartialDerivative(1),EPS);}"
"org.apache.commons.math3.analysis.function.LogitTest.testDerivativeLargeArguments",0,"@Test public void testDerivativeLargeArguments(){final Logit f=new Logit(1,2);for(double arg : new double[]{Double.NEGATIVE_INFINITY,-Double.MAX_VALUE,-1e155,1e155,Double.MAX_VALUE,Double.POSITIVE_INFINITY}){try {f.value(new DerivativeStructure(1,1,0,arg));Assert.fail(""an exception should have been thrown"");}catch(OutOfRangeException ore){}catch(Exception e){Assert.fail(""wrong exception caught: "" + e.getMessage());}}}"
"org.apache.commons.math3.analysis.function.LogitTest.testDerivativesHighOrder",0,"@Test public void testDerivativesHighOrder(){DerivativeStructure l=new Logit(1,3).value(new DerivativeStructure(1,5,0,1.2));Assert.assertEquals(-2.1972245773362193828,l.getPartialDerivative(0),1.0e-16);Assert.assertEquals(5.5555555555555555555,l.getPartialDerivative(1),9.0e-16);Assert.assertEquals(-24.691358024691358025,l.getPartialDerivative(2),2.0e-14);Assert.assertEquals(250.34293552812071331,l.getPartialDerivative(3),2.0e-13);Assert.assertEquals(-3749.4284407864654778,l.getPartialDerivative(4),4.0e-12);Assert.assertEquals(75001.270131585632282,l.getPartialDerivative(5),8.0e-11);}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricUsage1",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage1(){final Logit.Parametric g=new Logit.Parametric();g.value(0,null);}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricUsage2",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage2(){final Logit.Parametric g=new Logit.Parametric();g.value(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricUsage3",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage3(){final Logit.Parametric g=new Logit.Parametric();g.gradient(0,null);}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricUsage4",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage4(){final Logit.Parametric g=new Logit.Parametric();g.gradient(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricUsage5",0,"@Test(expected=OutOfRangeException.class)public void testParametricUsage5(){final Logit.Parametric g=new Logit.Parametric();g.value(-1,new double[]{0,1});}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricUsage6",0,"@Test(expected=OutOfRangeException.class)public void testParametricUsage6(){final Logit.Parametric g=new Logit.Parametric();g.value(2,new double[]{0,1});}"
"org.apache.commons.math3.analysis.function.LogitTest.testParametricValue",0,"@Test public void testParametricValue(){final double lo=2;final double hi=3;final Logit f=new Logit(lo,hi);final Logit.Parametric g=new Logit.Parametric();Assert.assertEquals(f.value(2),g.value(2,new double[]{lo,hi}),0);Assert.assertEquals(f.value(2.34567),g.value(2.34567,new double[]{lo,hi}),0);Assert.assertEquals(f.value(3),g.value(3,new double[]{lo,hi}),0);}"
"org.apache.commons.math3.analysis.function.LogitTest.testValueWithInverseFunction",0,"@Test public void testValueWithInverseFunction(){final double lo=2;final double hi=3;final Logit f=new Logit(lo,hi);final Sigmoid g=new Sigmoid(lo,hi);RandomGenerator random=new Well1024a(0x49914cdd9f0b8db5l);final UnivariateDifferentiableFunction id=FunctionUtils.compose((UnivariateDifferentiableFunction)g,(UnivariateDifferentiableFunction)f);for (int i=0;i < 10;i++){final double x=lo + random.nextDouble()* (hi - lo);Assert.assertEquals(x,id.value(new DerivativeStructure(1,1,0,x)).getValue(),EPS);}Assert.assertEquals(lo,id.value(new DerivativeStructure(1,1,0,lo)).getValue(),EPS);Assert.assertEquals(hi,id.value(new DerivativeStructure(1,1,0,hi)).getValue(),EPS);}"
"org.apache.commons.math3.analysis.function.LogitTest.testDerivativesWithInverseFunction",0,"@Test public void testDerivativesWithInverseFunction(){double[]epsilon=new double[]{1.0e-20,4.0e-16,3.0e-15,2.0e-11,3.0e-9,1.0e-6};final double lo=2;final double hi=3;final Logit f=new Logit(lo,hi);final Sigmoid g=new Sigmoid(lo,hi);RandomGenerator random=new Well1024a(0x96885e9c1f81cea5l);final UnivariateDifferentiableFunction id=FunctionUtils.compose((UnivariateDifferentiableFunction)g,(UnivariateDifferentiableFunction)f);for (int maxOrder=0;maxOrder < 6;++maxOrder){double max=0;for (int i=0;i < 10;i++){final double x=lo + random.nextDouble()* (hi - lo);final DerivativeStructure dsX=new DerivativeStructure(1,maxOrder,0,x);max=FastMath.max(max,FastMath.abs(dsX.getPartialDerivative(maxOrder)- id.value(dsX).getPartialDerivative(maxOrder)));Assert.assertEquals(dsX.getPartialDerivative(maxOrder),id.value(dsX).getPartialDerivative(maxOrder),epsilon[maxOrder]);}final DerivativeStructure dsLo=new DerivativeStructure(1,maxOrder,0,lo);if (maxOrder == 0){Assert.assertTrue(Double.isInfinite(f.value(dsLo).getPartialDerivative(maxOrder)));Assert.assertEquals(lo,id.value(dsLo).getPartialDerivative(maxOrder),epsilon[maxOrder]);}else     if (maxOrder == 1){Assert.assertTrue(Double.isInfinite(f.value(dsLo).getPartialDerivative(maxOrder)));Assert.assertTrue(Double.isNaN(id.value(dsLo).getPartialDerivative(maxOrder)));}else {Assert.assertTrue(Double.isNaN(f.value(dsLo).getPartialDerivative(maxOrder)));Assert.assertTrue(Double.isNaN(id.value(dsLo).getPartialDerivative(maxOrder)));}final DerivativeStructure dsHi=new DerivativeStructure(1,maxOrder,0,hi);if (maxOrder == 0){Assert.assertTrue(Double.isInfinite(f.value(dsHi).getPartialDerivative(maxOrder)));Assert.assertEquals(hi,id.value(dsHi).getPartialDerivative(maxOrder),epsilon[maxOrder]);}else     if (maxOrder == 1){Assert.assertTrue(Double.isInfinite(f.value(dsHi).getPartialDerivative(maxOrder)));Assert.assertTrue(Double.isNaN(id.value(dsHi).getPartialDerivative(maxOrder)));}else {Assert.assertTrue(Double.isNaN(f.value(dsHi).getPartialDerivative(maxOrder)));Assert.assertTrue(Double.isNaN(id.value(dsHi).getPartialDerivative(maxOrder)));}}}"
"org.apache.commons.math3.stat.descriptive.summary.SumLogTest.testSpecialValues",0,"@Test public void testSpecialValues(){SumOfLogs sum=new SumOfLogs();Assert.assertEquals(0,sum.getResult(),0);sum.increment(1d);Assert.assertFalse(Double.isNaN(sum.getResult()));sum.increment(0d);Assert.assertEquals(Double.NEGATIVE_INFINITY,sum.getResult(),0);sum.increment(Double.POSITIVE_INFINITY);Assert.assertTrue(Double.isNaN(sum.getResult()));sum.clear();Assert.assertEquals(0,sum.getResult(),0);sum.increment(Double.POSITIVE_INFINITY);Assert.assertEquals(Double.POSITIVE_INFINITY,sum.getResult(),0);sum.increment(-2d);Assert.assertTrue(Double.isNaN(sum.getResult()));}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquare",0,"@Test public void testChiSquare(){long[]observed={10,9,11};double[]expected={10,10,10};Assert.assertEquals(""chi-square statistic"",0.2,TestUtils.chiSquare(expected,observed),10E-12);Assert.assertEquals(""chi-square p-value"",0.904837418036,TestUtils.chiSquareTest(expected,observed),1E-10);long[]observed1={500,623,72,70,31};double[]expected1={485,541,82,61,37};Assert.assertEquals(""chi-square test statistic"",9.023307936427388,TestUtils.chiSquare(expected1,observed1),1E-10);Assert.assertEquals(""chi-square p-value"",0.06051952647453607,TestUtils.chiSquareTest(expected1,observed1),1E-9);Assert.assertTrue(""chi-square test reject"",TestUtils.chiSquareTest(expected1,observed1,0.07));Assert.assertTrue(""chi-square test accept"",!TestUtils.chiSquareTest(expected1,observed1,0.05));try {TestUtils.chiSquareTest(expected1,observed1,95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}long[]tooShortObs={0};double[]tooShortEx={1};try {TestUtils.chiSquare(tooShortEx,tooShortObs);Assert.fail(""arguments too short,DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}long[]unMatchedObs={0,1,2,3};double[]unMatchedEx={1,1,2};try {TestUtils.chiSquare(unMatchedEx,unMatchedObs);Assert.fail(""arrays have different lengths,DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}expected[0]=0;try {TestUtils.chiSquareTest(expected,observed,.01);Assert.fail(""bad expected count,NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException ex){}expected[0]=1;observed[0]=-1;try {TestUtils.chiSquareTest(expected,observed,.01);Assert.fail(""bad expected count,NotPositiveException expected"");}catch(NotPositiveException ex){}}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareIndependence",0,"@Test public void testChiSquareIndependence(){long[][]counts={{40,22,43},{91,21,28},{60,10,22}};Assert.assertEquals(""chi-square test statistic"",22.709027688,TestUtils.chiSquare(counts),1E-9);Assert.assertEquals(""chi-square p-value"",0.000144751460134,TestUtils.chiSquareTest(counts),1E-9);Assert.assertTrue(""chi-square test reject"",TestUtils.chiSquareTest(counts,0.0002));Assert.assertTrue(""chi-square test accept"",!TestUtils.chiSquareTest(counts,0.0001));long[][]counts2={{10,15},{30,40},{60,90}};Assert.assertEquals(""chi-square test statistic"",0.168965517241,TestUtils.chiSquare(counts2),1E-9);Assert.assertEquals(""chi-square p-value"",0.918987499852,TestUtils.chiSquareTest(counts2),1E-9);Assert.assertTrue(""chi-square test accept"",!TestUtils.chiSquareTest(counts2,0.1));long[][]counts3={{40,22,43},{91,21,28},{60,10}};try {TestUtils.chiSquare(counts3);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}long[][]counts4={{40,22,43}};try {TestUtils.chiSquare(counts4);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}long[][]counts5={{40},{40},{30},{10}};try {TestUtils.chiSquare(counts5);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}long[][]counts6={{10,-2},{30,40},{60,90}};try {TestUtils.chiSquare(counts6);Assert.fail(""Expecting NotPositiveException"");}catch(NotPositiveException ex){}try {TestUtils.chiSquareTest(counts,0);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareLargeTestStatistic",0,"@Test public void testChiSquareLargeTestStatistic(){double[]exp=new double[]{3389119.5,649136.6,285745.4,25357364.76,11291189.78,543628.0,232921.0,437665.75};long[]obs=new long[]{2372383,584222,257170,17750155,7903832,489265,209628,393899};org.apache.commons.math3.stat.inference.ChiSquareTest csti=new org.apache.commons.math3.stat.inference.ChiSquareTest();double cst=csti.chiSquareTest(exp,obs);Assert.assertEquals(""chi-square p-value"",0.0,cst,1E-3);Assert.assertEquals(""chi-square test statistic"",114875.90421929007,TestUtils.chiSquare(exp,obs),1E-9);}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testChiSquareZeroCount",0,"/** * Contingency table containing zeros - PR # 32531 */@Test public void testChiSquareZeroCount(){long[][]counts={{40,0,4},{91,1,2},{60,2,0}};Assert.assertEquals(""chi-square test statistic"",9.67444662263,TestUtils.chiSquare(counts),1E-9);Assert.assertEquals(""chi-square p-value"",0.0462835770603,TestUtils.chiSquareTest(counts),1E-9);}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleT",0,"@Test public void testOneSampleT(){double[]observed={93.0,103.0,95.0,101.0,91.0,105.0,96.0,94.0,101.0,88.0,98.0,94.0,101.0,92.0,95.0};double mu=100.0;SummaryStatistics sampleStats=null;sampleStats=new SummaryStatistics();for (int i=0;i < observed.length;i++){sampleStats.addValue(observed[i]);}Assert.assertEquals(""t statistic"",-2.81976445346,TestUtils.t(mu,observed),10E-10);Assert.assertEquals(""t statistic"",-2.81976445346,TestUtils.t(mu,sampleStats),10E-10);Assert.assertEquals(""p value"",0.0136390585873,TestUtils.tTest(mu,observed),10E-10);Assert.assertEquals(""p value"",0.0136390585873,TestUtils.tTest(mu,sampleStats),10E-10);try {TestUtils.t(mu,(double[])null);Assert.fail(""arguments too short,NullArgumentException expected"");}catch(NullArgumentException ex){}try {TestUtils.t(mu,(SummaryStatistics)null);Assert.fail(""arguments too short,NullArgumentException expected"");}catch(NullArgumentException ex){}try {TestUtils.t(mu,emptyObs);Assert.fail(""arguments too short,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.t(mu,emptyStats);Assert.fail(""arguments too short,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.t(mu,tooShortObs);Assert.fail(""insufficient data to compute t statistic,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.tTest(mu,tooShortObs);Assert.fail(""insufficient data to perform t test,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.t(mu,(SummaryStatistics)null);Assert.fail(""insufficient data to compute t statistic,NullArgumentException expected"");}catch(NullArgumentException ex){}try {TestUtils.tTest(mu,(SummaryStatistics)null);Assert.fail(""insufficient data to perform t test,NullArgumentException expected"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testOneSampleTTest",0,"@Test public void testOneSampleTTest(){double[]oneSidedP={2d,0d,6d,6d,3d,3d,2d,3d,-6d,6d,6d,6d,3d,0d,1d,1d,0d,2d,3d,3d};SummaryStatistics oneSidedPStats=new SummaryStatistics();for (int i=0;i < oneSidedP.length;i++){oneSidedPStats.addValue(oneSidedP[i]);}Assert.assertEquals(""one sample t stat"",3.86485535541,TestUtils.t(0d,oneSidedP),10E-10);Assert.assertEquals(""one sample t stat"",3.86485535541,TestUtils.t(0d,oneSidedPStats),1E-10);Assert.assertEquals(""one sample p value"",0.000521637019637,TestUtils.tTest(0d,oneSidedP)/ 2d,10E-10);Assert.assertEquals(""one sample p value"",0.000521637019637,TestUtils.tTest(0d,oneSidedPStats)/ 2d,10E-5);Assert.assertTrue(""one sample t-test reject"",TestUtils.tTest(0d,oneSidedP,0.01));Assert.assertTrue(""one sample t-test reject"",TestUtils.tTest(0d,oneSidedPStats,0.01));Assert.assertTrue(""one sample t-test accept"",!TestUtils.tTest(0d,oneSidedP,0.0001));Assert.assertTrue(""one sample t-test accept"",!TestUtils.tTest(0d,oneSidedPStats,0.0001));try {TestUtils.tTest(0d,oneSidedP,95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}try {TestUtils.tTest(0d,oneSidedPStats,95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHeterscedastic",0,"@Test public void testTwoSampleTHeterscedastic(){double[]sample1={7d,-4d,18d,17d,-3d,-5d,1d,10d,11d,-2d};double[]sample2={-1d,12d,-1d,-3d,3d,-5d,5d,2d,-11d,-1d,-3d};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}Assert.assertEquals(""two sample heteroscedastic t stat"",1.60371728768,TestUtils.t(sample1,sample2),1E-10);Assert.assertEquals(""two sample heteroscedastic t stat"",1.60371728768,TestUtils.t(sampleStats1,sampleStats2),1E-10);Assert.assertEquals(""two sample heteroscedastic p value"",0.128839369622,TestUtils.tTest(sample1,sample2),1E-10);Assert.assertEquals(""two sample heteroscedastic p value"",0.128839369622,TestUtils.tTest(sampleStats1,sampleStats2),1E-10);Assert.assertTrue(""two sample heteroscedastic t-test reject"",TestUtils.tTest(sample1,sample2,0.2));Assert.assertTrue(""two sample heteroscedastic t-test reject"",TestUtils.tTest(sampleStats1,sampleStats2,0.2));Assert.assertTrue(""two sample heteroscedastic t-test accept"",!TestUtils.tTest(sample1,sample2,0.1));Assert.assertTrue(""two sample heteroscedastic t-test accept"",!TestUtils.tTest(sampleStats1,sampleStats2,0.1));try {TestUtils.tTest(sample1,sample2,.95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}try {TestUtils.tTest(sampleStats1,sampleStats2,.95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}try {TestUtils.tTest(sample1,tooShortObs,.01);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.tTest(sampleStats1,(SummaryStatistics)null,.01);Assert.fail(""insufficient data,NullArgumentException expected"");}catch(NullArgumentException ex){}try {TestUtils.tTest(sample1,tooShortObs);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.tTest(sampleStats1,(SummaryStatistics)null);Assert.fail(""insufficient data,NullArgumentException expected"");}catch(NullArgumentException ex){}try {TestUtils.t(sample1,tooShortObs);Assert.fail(""insufficient data,NumberIsTooSmallException expected"");}catch(NumberIsTooSmallException ex){}try {TestUtils.t(sampleStats1,(SummaryStatistics)null);Assert.fail(""insufficient data,NullArgumentException expected"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testTwoSampleTHomoscedastic",0,"@Test public void testTwoSampleTHomoscedastic(){double[]sample1={2,4,6,8,10,97};double[]sample2={4,6,8,10,16};SummaryStatistics sampleStats1=new SummaryStatistics();for (int i=0;i < sample1.length;i++){sampleStats1.addValue(sample1[i]);}SummaryStatistics sampleStats2=new SummaryStatistics();for (int i=0;i < sample2.length;i++){sampleStats2.addValue(sample2[i]);}Assert.assertEquals(""two sample homoscedastic t stat"",0.73096310086,TestUtils.homoscedasticT(sample1,sample2),10E-11);Assert.assertEquals(""two sample homoscedastic p value"",0.4833963785,TestUtils.homoscedasticTTest(sampleStats1,sampleStats2),1E-10);Assert.assertTrue(""two sample homoscedastic t-test reject"",TestUtils.homoscedasticTTest(sample1,sample2,0.49));Assert.assertTrue(""two sample homoscedastic t-test accept"",!TestUtils.homoscedasticTTest(sample1,sample2,0.48));}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testSmallSamples",0,"@Test public void testSmallSamples(){double[]sample1={1d,3d};double[]sample2={4d,5d};Assert.assertEquals(-2.2360679775,TestUtils.t(sample1,sample2),1E-10);Assert.assertEquals(0.198727388935,TestUtils.tTest(sample1,sample2),1E-10);}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testPaired",0,"@Test public void testPaired(){double[]sample1={1d,3d,5d,7d};double[]sample2={0d,6d,11d,2d};double[]sample3={5d,7d,8d,10d};Assert.assertEquals(-0.3133,TestUtils.pairedT(sample1,sample2),1E-4);Assert.assertEquals(0.774544295819,TestUtils.pairedTTest(sample1,sample2),1E-10);Assert.assertEquals(0.001208,TestUtils.pairedTTest(sample1,sample3),1E-6);Assert.assertFalse(TestUtils.pairedTTest(sample1,sample3,.001));Assert.assertTrue(TestUtils.pairedTTest(sample1,sample3,.002));}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testOneWayAnovaUtils",0,"@Test public void testOneWayAnovaUtils(){classes.add(classA);classes.add(classB);classes.add(classC);Assert.assertEquals(oneWayAnova.anovaFValue(classes),TestUtils.oneWayAnovaFValue(classes),10E-12);Assert.assertEquals(oneWayAnova.anovaPValue(classes),TestUtils.oneWayAnovaPValue(classes),10E-12);Assert.assertEquals(oneWayAnova.anovaTest(classes,0.01),TestUtils.oneWayAnovaTest(classes,0.01));}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestGoodnesOfFit",0,"@Test public void testGTestGoodnesOfFit()throws Exception {double[]exp=new double[]{0.54d,0.40d,0.05d,0.01d};long[]obs=new long[]{70,79,3,4};Assert.assertEquals(""G test statistic"",13.144799,TestUtils.g(exp,obs),1E-5);double p_gtgf=TestUtils.gTest(exp,obs);Assert.assertEquals(""g-Test p-value"",0.004333,p_gtgf,1E-5);Assert.assertTrue(TestUtils.gTest(exp,obs,0.05));}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testGTestIndependance",0,"@Test public void testGTestIndependance()throws Exception {long[]obs1=new long[]{268,199,42};long[]obs2=new long[]{807,759,184};double g=TestUtils.gDataSetsComparison(obs1,obs2);Assert.assertEquals(""G test statistic"",7.3008170,g,1E-4);double p_gti=TestUtils.gTestDataSetsComparison(obs1,obs2);Assert.assertEquals(""g-Test p-value"",0.0259805,p_gti,1E-4);Assert.assertTrue(TestUtils.gTestDataSetsComparison(obs1,obs2,0.05));}"
"org.apache.commons.math3.stat.inference.TestUtilsTest.testRootLogLikelihood",0,"@Test public void testRootLogLikelihood(){Assert.assertTrue(TestUtils.rootLogLikelihoodRatio(904,21060,1144,283012)> 0.0);Assert.assertTrue(TestUtils.rootLogLikelihoodRatio(36,21928,60280,623876)< 0.0);Assert.assertEquals(Math.sqrt(2.772589),TestUtils.rootLogLikelihoodRatio(1,0,0,1),0.000001);Assert.assertEquals(-Math.sqrt(2.772589),TestUtils.rootLogLikelihoodRatio(0,1,1,0),0.000001);Assert.assertEquals(Math.sqrt(27.72589),TestUtils.rootLogLikelihoodRatio(10,0,0,10),0.00001);Assert.assertEquals(Math.sqrt(39.33052),TestUtils.rootLogLikelihoodRatio(5,1995,0,100000),0.00001);Assert.assertEquals(-Math.sqrt(39.33052),TestUtils.rootLogLikelihoodRatio(0,100000,5,1995),0.00001);Assert.assertEquals(Math.sqrt(4730.737),TestUtils.rootLogLikelihoodRatio(1000,1995,1000,100000),0.001);Assert.assertEquals(-Math.sqrt(4730.737),TestUtils.rootLogLikelihoodRatio(1000,100000,1000,1995),0.001);Assert.assertEquals(Math.sqrt(5734.343),TestUtils.rootLogLikelihoodRatio(1000,1000,1000,100000),0.001);Assert.assertEquals(Math.sqrt(5714.932),TestUtils.rootLogLikelihoodRatio(1000,1000,1000,99000),0.001);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix m2=new BlockRealMatrix(testData2);Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());Assert.assertTrue(""testData is square"",m.isSquare());Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);Assert.assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testCopyFunctions",0,"/** * test copy functions */@Test public void testCopyFunctions(){Random r=new Random(66636328996002l);BlockRealMatrix m1=createRandomMatrix(r,47,83);BlockRealMatrix m2=new BlockRealMatrix(m1.getData());Assert.assertEquals(m1,m2);BlockRealMatrix m3=new BlockRealMatrix(testData);BlockRealMatrix m4=new BlockRealMatrix(m3.getData());Assert.assertEquals(m3,m4);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testAdd",0,"/** * test add */@Test public void testAdd(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix mInv=new BlockRealMatrix(testDataInv);RealMatrix mPlusMInv=m.add(mInv);double[][]sumEntries=mPlusMInv.getData();for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){Assert.assertEquals(""sum entry entry"",testDataPlusInv[row][col],sumEntries[row][col],entryTolerance);}}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testAddFail",0,"/** * test add failure */@Test public void testAddFail(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix m2=new BlockRealMatrix(testData2);try {m.add(m2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testNorm",0,"/** * test norm */@Test public void testNorm(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix m2=new BlockRealMatrix(testData2);Assert.assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);Assert.assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testFrobeniusNorm",0,"/** * test Frobenius norm */@Test public void testFrobeniusNorm(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix m2=new BlockRealMatrix(testData2);Assert.assertEquals(""testData Frobenius norm"",FastMath.sqrt(117.0),m.getFrobeniusNorm(),entryTolerance);Assert.assertEquals(""testData2 Frobenius norm"",FastMath.sqrt(52.0),m2.getFrobeniusNorm(),entryTolerance);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */@Test public void testPlusMinus(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix m2=new BlockRealMatrix(testDataInv);assertClose(m.subtract(m2),m2.scalarMultiply(-1d).add(m),entryTolerance);try {m.subtract(new BlockRealMatrix(testData2));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testMultiply",0,"/** * test multiply */@Test public void testMultiply(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix mInv=new BlockRealMatrix(testDataInv);BlockRealMatrix identity=new BlockRealMatrix(id);BlockRealMatrix m2=new BlockRealMatrix(testData2);assertClose(m.multiply(mInv),identity,entryTolerance);assertClose(mInv.multiply(m),identity,entryTolerance);assertClose(m.multiply(identity),m,entryTolerance);assertClose(identity.multiply(mInv),mInv,entryTolerance);assertClose(m2.multiply(identity),m2,entryTolerance);try {m.multiply(new BlockRealMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSeveralBlocks",0,"@Test public void testSeveralBlocks(){RealMatrix m=new BlockRealMatrix(35,71);for (int i=0;i < m.getRowDimension();++i){for (int j=0;j < m.getColumnDimension();++j){m.setEntry(i,j,i + j / 1024.0);}}RealMatrix mT=m.transpose();Assert.assertEquals(m.getRowDimension(),mT.getColumnDimension());Assert.assertEquals(m.getColumnDimension(),mT.getRowDimension());for (int i=0;i < mT.getRowDimension();++i){for (int j=0;j < mT.getColumnDimension();++j){Assert.assertEquals(m.getEntry(j,i),mT.getEntry(i,j),0);}}RealMatrix mPm=m.add(m);for (int i=0;i < mPm.getRowDimension();++i){for (int j=0;j < mPm.getColumnDimension();++j){Assert.assertEquals(2 * m.getEntry(i,j),mPm.getEntry(i,j),0);}}RealMatrix mPmMm=mPm.subtract(m);for (int i=0;i < mPmMm.getRowDimension();++i){for (int j=0;j < mPmMm.getColumnDimension();++j){Assert.assertEquals(m.getEntry(i,j),mPmMm.getEntry(i,j),0);}}RealMatrix mTm=mT.multiply(m);for (int i=0;i < mTm.getRowDimension();++i){for (int j=0;j < mTm.getColumnDimension();++j){double sum=0;for (int k=0;k < mT.getColumnDimension();++k){sum+=(k + i / 1024.0)* (k + j / 1024.0);}Assert.assertEquals(sum,mTm.getEntry(i,j),0);}}RealMatrix mmT=m.multiply(mT);for (int i=0;i < mmT.getRowDimension();++i){for (int j=0;j < mmT.getColumnDimension();++j){double sum=0;for (int k=0;k < m.getColumnDimension();++k){sum+=(i + k / 1024.0)* (j + k / 1024.0);}Assert.assertEquals(sum,mmT.getEntry(i,j),0);}}RealMatrix sub1=m.getSubMatrix(2,9,5,20);for (int i=0;i < sub1.getRowDimension();++i){for (int j=0;j < sub1.getColumnDimension();++j){Assert.assertEquals((i + 2)+ (j + 5)/ 1024.0,sub1.getEntry(i,j),0);}}RealMatrix sub2=m.getSubMatrix(10,12,3,70);for (int i=0;i < sub2.getRowDimension();++i){for (int j=0;j < sub2.getColumnDimension();++j){Assert.assertEquals((i + 10)+ (j + 3)/ 1024.0,sub2.getEntry(i,j),0);}}RealMatrix sub3=m.getSubMatrix(30,34,0,5);for (int i=0;i < sub3.getRowDimension();++i){for (int j=0;j < sub3.getColumnDimension();++j){Assert.assertEquals((i + 30)+ (j + 0)/ 1024.0,sub3.getEntry(i,j),0);}}RealMatrix sub4=m.getSubMatrix(30,32,62,65);for (int i=0;i < sub4.getRowDimension();++i){for (int j=0;j < sub4.getColumnDimension();++j){Assert.assertEquals((i + 30)+ (j + 62)/ 1024.0,sub4.getEntry(i,j),0);}}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testMultiply2",0,"@Test public void testMultiply2(){RealMatrix m3=new BlockRealMatrix(d3);RealMatrix m4=new BlockRealMatrix(d4);RealMatrix m5=new BlockRealMatrix(d5);assertClose(m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testTrace",0,"/** * test trace */@Test public void testTrace(){RealMatrix m=new BlockRealMatrix(id);Assert.assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);m=new BlockRealMatrix(testData2);try {m.getTrace();Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testScalarAdd",0,"/** * test scalarAdd */@Test public void testScalarAdd(){RealMatrix m=new BlockRealMatrix(testData);assertClose(new BlockRealMatrix(testDataPlus2),m.scalarAdd(2d),entryTolerance);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testOperate",0,"/** * test operate */@Test public void testOperate(){RealMatrix m=new BlockRealMatrix(id);assertClose(testVector,m.operate(testVector),entryTolerance);assertClose(testVector,m.operate(new ArrayRealVector(testVector)).toArray(),entryTolerance);m=new BlockRealMatrix(bigSingular);try {m.operate(testVector);Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testOperateLarge",0,"@Test public void testOperateLarge(){int p=(7 * BlockRealMatrix.BLOCK_SIZE)/ 2;int q=(5 * BlockRealMatrix.BLOCK_SIZE)/ 2;int r=3 * BlockRealMatrix.BLOCK_SIZE;Random random=new Random(111007463902334l);RealMatrix m1=createRandomMatrix(random,p,q);RealMatrix m2=createRandomMatrix(random,q,r);RealMatrix m1m2=m1.multiply(m2);for (int i=0;i < r;++i){checkArrays(m1m2.getColumn(i),m1.operate(m2.getColumn(i)));}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testOperatePremultiplyLarge",0,"@Test public void testOperatePremultiplyLarge(){int p=(7 * BlockRealMatrix.BLOCK_SIZE)/ 2;int q=(5 * BlockRealMatrix.BLOCK_SIZE)/ 2;int r=3 * BlockRealMatrix.BLOCK_SIZE;Random random=new Random(111007463902334l);RealMatrix m1=createRandomMatrix(random,p,q);RealMatrix m2=createRandomMatrix(random,q,r);RealMatrix m1m2=m1.multiply(m2);for (int i=0;i < p;++i){checkArrays(m1m2.getRow(i),m2.preMultiply(m1.getRow(i)));}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testMath209",0,"/** * test issue MATH-209 */@Test public void testMath209(){RealMatrix a=new BlockRealMatrix(new double[][]{{1,2},{3,4},{5,6}});double[]b=a.operate(new double[]{1,1});Assert.assertEquals(a.getRowDimension(),b.length);Assert.assertEquals(3.0,b[0],1.0e-12);Assert.assertEquals(7.0,b[1],1.0e-12);Assert.assertEquals(11.0,b[2],1.0e-12);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testTranspose",0,"/** * test transpose */@Test public void testTranspose(){RealMatrix m=new BlockRealMatrix(testData);RealMatrix mIT=new LUDecomposition(m).getSolver().getInverse().transpose();RealMatrix mTI=new LUDecomposition(m.transpose()).getSolver().getInverse();assertClose(mIT,mTI,normTolerance);m=new BlockRealMatrix(testData2);RealMatrix mt=new BlockRealMatrix(testData2T);assertClose(mt,m.transpose(),normTolerance);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */@Test public void testPremultiplyVector(){RealMatrix m=new BlockRealMatrix(testData);assertClose(m.preMultiply(testVector),preMultTest,normTolerance);assertClose(m.preMultiply(new ArrayRealVector(testVector).toArray()),preMultTest,normTolerance);m=new BlockRealMatrix(bigSingular);try {m.preMultiply(testVector);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testPremultiply",0,"@Test public void testPremultiply(){RealMatrix m3=new BlockRealMatrix(d3);RealMatrix m4=new BlockRealMatrix(d4);RealMatrix m5=new BlockRealMatrix(d5);assertClose(m4.preMultiply(m3),m5,entryTolerance);BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix mInv=new BlockRealMatrix(testDataInv);BlockRealMatrix identity=new BlockRealMatrix(id);assertClose(m.preMultiply(mInv),identity,entryTolerance);assertClose(mInv.preMultiply(m),identity,entryTolerance);assertClose(m.preMultiply(identity),m,entryTolerance);assertClose(identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(new BlockRealMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetVectors",0,"@Test public void testGetVectors(){RealMatrix m=new BlockRealMatrix(testData);assertClose(m.getRow(0),testDataRow1,entryTolerance);assertClose(m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetEntry",0,"@Test public void testGetEntry(){RealMatrix m=new BlockRealMatrix(testData);Assert.assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);try {m.getEntry(10,4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testExamples",0,"/** * test examples in user guide */@Test public void testExamples(){double[][]matrixData={{1d,2d,3d},{2d,5d,3d}};RealMatrix m=new BlockRealMatrix(matrixData);double[][]matrixData2={{1d,2d},{2d,5d},{1d,7d}};RealMatrix n=new BlockRealMatrix(matrixData2);RealMatrix p=m.multiply(n);Assert.assertEquals(2,p.getRowDimension());Assert.assertEquals(2,p.getColumnDimension());RealMatrix pInverse=new LUDecomposition(p).getSolver().getInverse();Assert.assertEquals(2,pInverse.getRowDimension());Assert.assertEquals(2,pInverse.getColumnDimension());double[][]coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};RealMatrix coefficients=new BlockRealMatrix(coefficientsData);RealVector constants=new ArrayRealVector(new double[]{1,-2,1},false);RealVector solution=new LUDecomposition(coefficients).getSolver().solve(constants);final double cst0=constants.getEntry(0);final double cst1=constants.getEntry(1);final double cst2=constants.getEntry(2);final double sol0=solution.getEntry(0);final double sol1=solution.getEntry(1);final double sol2=solution.getEntry(2);Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2,cst0,1E-12);Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2,cst1,1E-12);Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2,cst2,1E-12);}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSubMatrix",0,"@Test public void testGetSubMatrix(){RealMatrix m=new BlockRealMatrix(subTestData);checkGetSubMatrix(m,subRows23Cols00,2,3,0,0);checkGetSubMatrix(m,subRows00Cols33,0,0,3,3);checkGetSubMatrix(m,subRows01Cols23,0,1,2,3);checkGetSubMatrix(m,subRows02Cols13,new int[]{0,2},new int[]{1,3});checkGetSubMatrix(m,subRows03Cols12,new int[]{0,3},new int[]{1,2});checkGetSubMatrix(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3});checkGetSubMatrix(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3});checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkGetSubMatrix(m,null,1,0,2,4);checkGetSubMatrix(m,null,-1,1,2,2);checkGetSubMatrix(m,null,1,0,2,2);checkGetSubMatrix(m,null,1,0,2,4);checkGetSubMatrix(m,null,new int[]{},new int[]{0});checkGetSubMatrix(m,null,new int[]{0},new int[]{4});}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetMatrixLarge",0,"@Test public void testGetSetMatrixLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);RealMatrix sub=new BlockRealMatrix(n - 4,n - 4).scalarAdd(1);m.setSubMatrix(sub.getData(),2,2);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if ((i < 2)|| (i > n - 3)|| (j < 2)|| (j > n - 3)){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}Assert.assertEquals(sub,m.getSubMatrix(2,n - 3,2,n - 3));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testCopySubMatrix",0,"@Test public void testCopySubMatrix(){RealMatrix m=new BlockRealMatrix(subTestData);checkCopy(m,subRows23Cols00,2,3,0,0);checkCopy(m,subRows00Cols33,0,0,3,3);checkCopy(m,subRows01Cols23,0,1,2,3);checkCopy(m,subRows02Cols13,new int[]{0,2},new int[]{1,3});checkCopy(m,subRows03Cols12,new int[]{0,3},new int[]{1,2});checkCopy(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3});checkCopy(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3});checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkCopy(m,null,1,0,2,4);checkCopy(m,null,-1,1,2,2);checkCopy(m,null,1,0,2,2);checkCopy(m,null,1,0,2,4);checkCopy(m,null,new int[]{},new int[]{0});checkCopy(m,null,new int[]{0},new int[]{4});}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetRowMatrix",0,"@Test public void testGetRowMatrix(){RealMatrix m=new BlockRealMatrix(subTestData);RealMatrix mRow0=new BlockRealMatrix(subRow0);RealMatrix mRow3=new BlockRealMatrix(subRow3);Assert.assertEquals(""Row0"",mRow0,m.getRowMatrix(0));Assert.assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetRowMatrix",0,"@Test public void testSetRowMatrix(){RealMatrix m=new BlockRealMatrix(subTestData);RealMatrix mRow3=new BlockRealMatrix(subRow3);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowMatrix(0,mRow3);Assert.assertEquals(mRow3,m.getRowMatrix(0));try {m.setRowMatrix(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetRowMatrixLarge",0,"@Test public void testGetSetRowMatrixLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);RealMatrix sub=new BlockRealMatrix(1,n).scalarAdd(1);m.setRowMatrix(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}Assert.assertEquals(sub,m.getRowMatrix(2));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetColumnMatrix",0,"@Test public void testGetColumnMatrix(){RealMatrix m=new BlockRealMatrix(subTestData);RealMatrix mColumn1=new BlockRealMatrix(subColumn1);RealMatrix mColumn3=new BlockRealMatrix(subColumn3);Assert.assertEquals(mColumn1,m.getColumnMatrix(1));Assert.assertEquals(mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetColumnMatrix",0,"@Test public void testSetColumnMatrix(){RealMatrix m=new BlockRealMatrix(subTestData);RealMatrix mColumn3=new BlockRealMatrix(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnMatrix(1));m.setColumnMatrix(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnMatrix(1));try {m.setColumnMatrix(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetColumnMatrixLarge",0,"@Test public void testGetSetColumnMatrixLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);RealMatrix sub=new BlockRealMatrix(n,1).scalarAdd(1);m.setColumnMatrix(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}Assert.assertEquals(sub,m.getColumnMatrix(2));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetRowVector",0,"@Test public void testGetRowVector(){RealMatrix m=new BlockRealMatrix(subTestData);RealVector mRow0=new ArrayRealVector(subRow0[0]);RealVector mRow3=new ArrayRealVector(subRow3[0]);Assert.assertEquals(mRow0,m.getRowVector(0));Assert.assertEquals(mRow3,m.getRowVector(3));try {m.getRowVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetRowVector",0,"@Test public void testSetRowVector(){RealMatrix m=new BlockRealMatrix(subTestData);RealVector mRow3=new ArrayRealVector(subRow3[0]);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowVector(0,mRow3);Assert.assertEquals(mRow3,m.getRowVector(0));try {m.setRowVector(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowVector(0,new ArrayRealVector(5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetRowVectorLarge",0,"@Test public void testGetSetRowVectorLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);RealVector sub=new ArrayRealVector(n,1.0);m.setRowVector(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}Assert.assertEquals(sub,m.getRowVector(2));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetColumnVector",0,"@Test public void testGetColumnVector(){RealMatrix m=new BlockRealMatrix(subTestData);RealVector mColumn1=columnToVector(subColumn1);RealVector mColumn3=columnToVector(subColumn3);Assert.assertEquals(mColumn1,m.getColumnVector(1));Assert.assertEquals(mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetColumnVector",0,"@Test public void testSetColumnVector(){RealMatrix m=new BlockRealMatrix(subTestData);RealVector mColumn3=columnToVector(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnVector(1));m.setColumnVector(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnVector(1));try {m.setColumnVector(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnVector(0,new ArrayRealVector(5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetColumnVectorLarge",0,"@Test public void testGetSetColumnVectorLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);RealVector sub=new ArrayRealVector(n,1.0);m.setColumnVector(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}Assert.assertEquals(sub,m.getColumnVector(2));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetRow",0,"@Test public void testGetRow(){RealMatrix m=new BlockRealMatrix(subTestData);checkArrays(subRow0[0],m.getRow(0));checkArrays(subRow3[0],m.getRow(3));try {m.getRow(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRow(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetRow",0,"@Test public void testSetRow(){RealMatrix m=new BlockRealMatrix(subTestData);Assert.assertTrue(subRow3[0][0]!= m.getRow(0)[0]);m.setRow(0,subRow3[0]);checkArrays(subRow3[0],m.getRow(0));try {m.setRow(-1,subRow3[0]);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRow(0,new double[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetRowLarge",0,"@Test public void testGetSetRowLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);double[]sub=new double[n];Arrays.fill(sub,1.0);m.setRow(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}checkArrays(sub,m.getRow(2));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetColumn",0,"@Test public void testGetColumn(){RealMatrix m=new BlockRealMatrix(subTestData);double[]mColumn1=columnToArray(subColumn1);double[]mColumn3=columnToArray(subColumn3);checkArrays(mColumn1,m.getColumn(1));checkArrays(mColumn3,m.getColumn(3));try {m.getColumn(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetColumn",0,"@Test public void testSetColumn(){RealMatrix m=new BlockRealMatrix(subTestData);double[]mColumn3=columnToArray(subColumn3);Assert.assertTrue(mColumn3[0]!= m.getColumn(1)[0]);m.setColumn(1,mColumn3);checkArrays(mColumn3,m.getColumn(1));try {m.setColumn(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumn(0,new double[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testGetSetColumnLarge",0,"@Test public void testGetSetColumnLarge(){int n=3 * BlockRealMatrix.BLOCK_SIZE;RealMatrix m=new BlockRealMatrix(n,n);double[]sub=new double[n];Arrays.fill(sub,1.0);m.setColumn(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){Assert.assertEquals(0.0,m.getEntry(i,j),0.0);}else {Assert.assertEquals(1.0,m.getEntry(i,j),0.0);}}}checkArrays(sub,m.getColumn(2));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){BlockRealMatrix m=new BlockRealMatrix(testData);BlockRealMatrix m1=m.copy();BlockRealMatrix mt=m.transpose();Assert.assertTrue(m.hashCode()!= mt.hashCode());Assert.assertEquals(m.hashCode(),m1.hashCode());Assert.assertEquals(m,m);Assert.assertEquals(m,m1);Assert.assertFalse(m.equals(null));Assert.assertFalse(m.equals(mt));Assert.assertFalse(m.equals(new BlockRealMatrix(bigSingular)));}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testToString",0,"@Test public void testToString(){BlockRealMatrix m=new BlockRealMatrix(testData);Assert.assertEquals(""BlockRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"",m.toString());}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){BlockRealMatrix m=new BlockRealMatrix(testData);m.setSubMatrix(detData2,1,1);RealMatrix expected=new BlockRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});Assert.assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=new BlockRealMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});Assert.assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=new BlockRealMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});Assert.assertEquals(expected,m);BlockRealMatrix matrix=new BlockRealMatrix(new double[][]{{1,2,3,4},{5,6,7,8},{9,0,1,2}});matrix.setSubMatrix(new double[][]{{3,4},{5,6}},1,1);expected=new BlockRealMatrix(new double[][]{{1,2,3,4},{5,3,4,8},{9,5,6,2}});Assert.assertEquals(expected,matrix);try {m.setSubMatrix(testData,1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,-1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,1,-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(null,1,1);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException e){}try {m.setSubMatrix(new double[][]{{1},{2,3}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testWalk",0,"@Test public void testWalk(){int rows=150;int columns=75;RealMatrix m=new BlockRealMatrix(rows,columns);m.walkInRowOrder(new SetVisitor());GetVisitor getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockRealMatrix(rows,columns);m.walkInRowOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new BlockRealMatrix(rows,columns);m.walkInColumnOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockRealMatrix(rows,columns);m.walkInColumnOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new BlockRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new BlockRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}}"
"org.apache.commons.math3.linear.BlockRealMatrixTest.testSerial",0,"@Test public void testSerial(){BlockRealMatrix m=new BlockRealMatrix(testData);Assert.assertEquals(m,TestUtils.serializeAndRecover(m));}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testFit",0,"@Test public void testFit(){final RealDistribution rng=new UniformRealDistribution(-100,100);rng.reseedRandomGenerator(64925784252L);final LevenbergMarquardtOptimizer optim=new LevenbergMarquardtOptimizer();final PolynomialFitter fitter=new PolynomialFitter(optim);final double[]coeff={12.9,-3.4,2.1};final PolynomialFunction f=new PolynomialFunction(coeff);for (int i=0;i < 100;i++){final double x=rng.sample();fitter.addObservedPoint(x,f.value(x));}final double[]best=fitter.fit(new double[]{-1e-20,3e15,-5e25});TestUtils.assertEquals(""best != coeff"",coeff,best,1e-12);}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testNoError",0,"@Test public void testNoError(){Random randomizer=new Random(64925784252l);for (int degree=1;degree < 10;++degree){PolynomialFunction p=buildRandomPolynomial(degree,randomizer);PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());for (int i=0;i <= degree;++i){fitter.addObservedPoint(1.0,i,p.value(i));}final double[]init=new double[degree + 1];PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));for (double x=-1.0;x < 1.0;x+=0.01){double error=FastMath.abs(p.value(x)- fitted.value(x))/ (1.0 + FastMath.abs(p.value(x)));Assert.assertEquals(0.0,error,1.0e-6);}}}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testSmallError",0,"@Test public void testSmallError(){Random randomizer=new Random(53882150042l);double maxError=0;for (int degree=0;degree < 10;++degree){PolynomialFunction p=buildRandomPolynomial(degree,randomizer);PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());for (double x=-1.0;x < 1.0;x+=0.01){fitter.addObservedPoint(1.0,x,p.value(x)+ 0.1 * randomizer.nextGaussian());}final double[]init=new double[degree + 1];PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));for (double x=-1.0;x < 1.0;x+=0.01){double error=FastMath.abs(p.value(x)- fitted.value(x))/ (1.0 + FastMath.abs(p.value(x)));maxError=FastMath.max(maxError,error);Assert.assertTrue(FastMath.abs(error)< 0.1);}}Assert.assertTrue(maxError > 0.01);}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testMath798",0,"@Test public void testMath798(){final double tol=1e-14;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(tol,tol);final double[]init=new double[]{0,0};final int maxEval=3;final double[]lm=doMath798(new LevenbergMarquardtOptimizer(checker),maxEval,init);final double[]gn=doMath798(new GaussNewtonOptimizer(checker),maxEval,init);for (int i=0;i <= 1;i++){Assert.assertEquals(lm[i],gn[i],tol);}}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testMath798WithToleranceTooLow",0,"/** * This test shows that the user can set the maximum number of iterations to avoid running for too long. But in the test case,the real problem is that the tolerance is way too stringent.*/@Test(expected=TooManyEvaluationsException.class)public void testMath798WithToleranceTooLow(){final double tol=1e-100;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(tol,tol);final double[]init=new double[]{0,0};final int maxEval=10000;@SuppressWarnings(""unused"")final double[]gn=doMath798(new GaussNewtonOptimizer(checker),maxEval,init);}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testMath798WithToleranceTooLowButNoException",0,"/** * This test shows that the user can set the maximum number of iterations to avoid running for too long. Even if the real problem is that the tolerance is way too stringent,it is possible to get the best solution so far,i.e. a checker will return the point when the maximum iteration count has been reached.*/@Test public void testMath798WithToleranceTooLowButNoException(){final double tol=1e-100;final double[]init=new double[]{0,0};final int maxEval=10000;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(tol,tol,maxEval);final double[]lm=doMath798(new LevenbergMarquardtOptimizer(checker),maxEval,init);final double[]gn=doMath798(new GaussNewtonOptimizer(checker),maxEval,init);for (int i=0;i <= 1;i++){Assert.assertEquals(lm[i],gn[i],1e-15);}}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testRedundantSolvable",0,"@Test public void testRedundantSolvable(){checkUnsolvableProblem(new LevenbergMarquardtOptimizer(),true);}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testRedundantUnsolvable",0,"@Test public void testRedundantUnsolvable(){checkUnsolvableProblem(new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-15,1e-15)),false);}"
"org.apache.commons.math3.fitting.PolynomialFitterTest.testLargeSample",0,"@Test public void testLargeSample(){Random randomizer=new Random(0x5551480dca5b369bl);double maxError=0;for (int degree=0;degree < 10;++degree){PolynomialFunction p=buildRandomPolynomial(degree,randomizer);PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());for (int i=0;i < 40000;++i){double x=-1.0 + i / 20000.0;fitter.addObservedPoint(1.0,x,p.value(x)+ 0.1 * randomizer.nextGaussian());}final double[]init=new double[degree + 1];PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));for (double x=-1.0;x < 1.0;x+=0.01){double error=FastMath.abs(p.value(x)- fitted.value(x))/ (1.0 + FastMath.abs(p.value(x)));maxError=FastMath.max(maxError,error);Assert.assertTrue(FastMath.abs(error)< 0.01);}}Assert.assertTrue(maxError > 0.001);}"
"org.apache.commons.math3.fraction.BigFractionFieldTest.testZero",0,"@Test public void testZero(){Assert.assertEquals(BigFraction.ZERO,BigFractionField.getInstance().getZero());}"
"org.apache.commons.math3.fraction.BigFractionFieldTest.testOne",0,"@Test public void testOne(){Assert.assertEquals(BigFraction.ONE,BigFractionField.getInstance().getOne());}"
"org.apache.commons.math3.fraction.BigFractionFieldTest.testSerial",0,"@Test public void testSerial(){BigFractionField field=BigFractionField.getInstance();Assert.assertTrue(field == TestUtils.serializeAndRecover(field));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> m2=new BlockFieldMatrix<Fraction>(testData2);Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());Assert.assertTrue(""testData is square"",m.isSquare());Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);Assert.assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testCopyFunctions",0,"/** * test copy functions */@Test public void testCopyFunctions(){Random r=new Random(66636328996002l);BlockFieldMatrix<Fraction> m1=createRandomMatrix(r,47,83);BlockFieldMatrix<Fraction> m2=new BlockFieldMatrix<Fraction>(m1.getData());Assert.assertEquals(m1,m2);BlockFieldMatrix<Fraction> m3=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> m4=new BlockFieldMatrix<Fraction>(m3.getData());Assert.assertEquals(m3,m4);}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testAdd",0,"/** * test add */@Test public void testAdd(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> mInv=new BlockFieldMatrix<Fraction>(testDataInv);FieldMatrix<Fraction> mPlusMInv=m.add(mInv);Fraction[][]sumEntries=mPlusMInv.getData();for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){Assert.assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);}}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testAddFail",0,"/** * test add failure */@Test public void testAddFail(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> m2=new BlockFieldMatrix<Fraction>(testData2);try {m.add(m2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */@Test public void testPlusMinus(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> m2=new BlockFieldMatrix<Fraction>(testDataInv);TestUtils.assertEquals(m.subtract(m2),m2.scalarMultiply(new Fraction(-1)).add(m));try {m.subtract(new BlockFieldMatrix<Fraction>(testData2));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testMultiply",0,"/** * test multiply */@Test public void testMultiply(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> mInv=new BlockFieldMatrix<Fraction>(testDataInv);BlockFieldMatrix<Fraction> identity=new BlockFieldMatrix<Fraction>(id);BlockFieldMatrix<Fraction> m2=new BlockFieldMatrix<Fraction>(testData2);TestUtils.assertEquals(m.multiply(mInv),identity);TestUtils.assertEquals(mInv.multiply(m),identity);TestUtils.assertEquals(m.multiply(identity),m);TestUtils.assertEquals(identity.multiply(mInv),mInv);TestUtils.assertEquals(m2.multiply(identity),m2);try {m.multiply(new BlockFieldMatrix<Fraction>(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSeveralBlocks",0,"@Test public void testSeveralBlocks(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),37,41);for (int i=0;i < m.getRowDimension();++i){for (int j=0;j < m.getColumnDimension();++j){m.setEntry(i,j,new Fraction(i * 11 + j,11));}}FieldMatrix<Fraction> mT=m.transpose();Assert.assertEquals(m.getRowDimension(),mT.getColumnDimension());Assert.assertEquals(m.getColumnDimension(),mT.getRowDimension());for (int i=0;i < mT.getRowDimension();++i){for (int j=0;j < mT.getColumnDimension();++j){Assert.assertEquals(m.getEntry(j,i),mT.getEntry(i,j));}}FieldMatrix<Fraction> mPm=m.add(m);for (int i=0;i < mPm.getRowDimension();++i){for (int j=0;j < mPm.getColumnDimension();++j){Assert.assertEquals(m.getEntry(i,j).multiply(new Fraction(2)),mPm.getEntry(i,j));}}FieldMatrix<Fraction> mPmMm=mPm.subtract(m);for (int i=0;i < mPmMm.getRowDimension();++i){for (int j=0;j < mPmMm.getColumnDimension();++j){Assert.assertEquals(m.getEntry(i,j),mPmMm.getEntry(i,j));}}FieldMatrix<Fraction> mTm=mT.multiply(m);for (int i=0;i < mTm.getRowDimension();++i){for (int j=0;j < mTm.getColumnDimension();++j){Fraction sum=Fraction.ZERO;for (int k=0;k < mT.getColumnDimension();++k){sum=sum.add(new Fraction(k * 11 + i,11).multiply(new Fraction(k * 11 + j,11)));}Assert.assertEquals(sum,mTm.getEntry(i,j));}}FieldMatrix<Fraction> mmT=m.multiply(mT);for (int i=0;i < mmT.getRowDimension();++i){for (int j=0;j < mmT.getColumnDimension();++j){Fraction sum=Fraction.ZERO;for (int k=0;k < m.getColumnDimension();++k){sum=sum.add(new Fraction(i * 11 + k,11).multiply(new Fraction(j * 11 + k,11)));}Assert.assertEquals(sum,mmT.getEntry(i,j));}}FieldMatrix<Fraction> sub1=m.getSubMatrix(2,9,5,20);for (int i=0;i < sub1.getRowDimension();++i){for (int j=0;j < sub1.getColumnDimension();++j){Assert.assertEquals(new Fraction((i + 2)* 11 + (j + 5),11),sub1.getEntry(i,j));}}FieldMatrix<Fraction> sub2=m.getSubMatrix(10,12,3,40);for (int i=0;i < sub2.getRowDimension();++i){for (int j=0;j < sub2.getColumnDimension();++j){Assert.assertEquals(new Fraction((i + 10)* 11 + (j + 3),11),sub2.getEntry(i,j));}}FieldMatrix<Fraction> sub3=m.getSubMatrix(30,34,0,5);for (int i=0;i < sub3.getRowDimension();++i){for (int j=0;j < sub3.getColumnDimension();++j){Assert.assertEquals(new Fraction((i + 30)* 11 + (j + 0),11),sub3.getEntry(i,j));}}FieldMatrix<Fraction> sub4=m.getSubMatrix(30,32,32,35);for (int i=0;i < sub4.getRowDimension();++i){for (int j=0;j < sub4.getColumnDimension();++j){Assert.assertEquals(new Fraction((i + 30)* 11 + (j + 32),11),sub4.getEntry(i,j));}}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testMultiply2",0,"@Test public void testMultiply2(){FieldMatrix<Fraction> m3=new BlockFieldMatrix<Fraction>(d3);FieldMatrix<Fraction> m4=new BlockFieldMatrix<Fraction>(d4);FieldMatrix<Fraction> m5=new BlockFieldMatrix<Fraction>(d5);TestUtils.assertEquals(m3.multiply(m4),m5);}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testTrace",0,"/** * test trace */@Test public void testTrace(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(id);Assert.assertEquals(new Fraction(3),m.getTrace());m=new BlockFieldMatrix<Fraction>(testData2);try {m.getTrace();Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testScalarAdd",0,"/** * test scalarAdd */@Test public void testScalarAdd(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);TestUtils.assertEquals(new BlockFieldMatrix<Fraction>(testDataPlus2),m.scalarAdd(new Fraction(2)));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testOperate",0,"/** * test operate */@Test public void testOperate(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(id);TestUtils.assertEquals(testVector,m.operate(testVector));TestUtils.assertEquals(testVector,m.operate(new ArrayFieldVector<Fraction>(testVector)).getData());m=new BlockFieldMatrix<Fraction>(bigSingular);try {m.operate(testVector);Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testOperateLarge",0,"@Test public void testOperateLarge(){int p=(11 * BlockFieldMatrix.BLOCK_SIZE)/ 10;int q=(11 * BlockFieldMatrix.BLOCK_SIZE)/ 10;int r=BlockFieldMatrix.BLOCK_SIZE / 2;Random random=new Random(111007463902334l);FieldMatrix<Fraction> m1=createRandomMatrix(random,p,q);FieldMatrix<Fraction> m2=createRandomMatrix(random,q,r);FieldMatrix<Fraction> m1m2=m1.multiply(m2);for (int i=0;i < r;++i){TestUtils.assertEquals(m1m2.getColumn(i),m1.operate(m2.getColumn(i)));}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testOperatePremultiplyLarge",0,"@Test public void testOperatePremultiplyLarge(){int p=(11 * BlockFieldMatrix.BLOCK_SIZE)/ 10;int q=(11 * BlockFieldMatrix.BLOCK_SIZE)/ 10;int r=BlockFieldMatrix.BLOCK_SIZE / 2;Random random=new Random(111007463902334l);FieldMatrix<Fraction> m1=createRandomMatrix(random,p,q);FieldMatrix<Fraction> m2=createRandomMatrix(random,q,r);FieldMatrix<Fraction> m1m2=m1.multiply(m2);for (int i=0;i < p;++i){TestUtils.assertEquals(m1m2.getRow(i),m2.preMultiply(m1.getRow(i)));}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testMath209",0,"/** * test issue MATH-209 */@Test public void testMath209(){FieldMatrix<Fraction> a=new BlockFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2)},{new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6)}});Fraction[]b=a.operate(new Fraction[]{new Fraction(1),new Fraction(1)});Assert.assertEquals(a.getRowDimension(),b.length);Assert.assertEquals(new Fraction(3),b[0]);Assert.assertEquals(new Fraction(7),b[1]);Assert.assertEquals(new Fraction(11),b[2]);}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testTranspose",0,"/** * test transpose */@Test public void testTranspose(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);FieldMatrix<Fraction> mIT=new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose();FieldMatrix<Fraction> mTI=new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse();TestUtils.assertEquals(mIT,mTI);m=new BlockFieldMatrix<Fraction>(testData2);FieldMatrix<Fraction> mt=new BlockFieldMatrix<Fraction>(testData2T);TestUtils.assertEquals(mt,m.transpose());}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */@Test public void testPremultiplyVector(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);TestUtils.assertEquals(m.preMultiply(testVector),preMultTest);TestUtils.assertEquals(m.preMultiply(new ArrayFieldVector<Fraction>(testVector).getData()),preMultTest);m=new BlockFieldMatrix<Fraction>(bigSingular);try {m.preMultiply(testVector);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testPremultiply",0,"@Test public void testPremultiply(){FieldMatrix<Fraction> m3=new BlockFieldMatrix<Fraction>(d3);FieldMatrix<Fraction> m4=new BlockFieldMatrix<Fraction>(d4);FieldMatrix<Fraction> m5=new BlockFieldMatrix<Fraction>(d5);TestUtils.assertEquals(m4.preMultiply(m3),m5);BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> mInv=new BlockFieldMatrix<Fraction>(testDataInv);BlockFieldMatrix<Fraction> identity=new BlockFieldMatrix<Fraction>(id);TestUtils.assertEquals(m.preMultiply(mInv),identity);TestUtils.assertEquals(mInv.preMultiply(m),identity);TestUtils.assertEquals(m.preMultiply(identity),m);TestUtils.assertEquals(identity.preMultiply(mInv),mInv);try {m.preMultiply(new BlockFieldMatrix<Fraction>(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetVectors",0,"@Test public void testGetVectors(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);TestUtils.assertEquals(m.getRow(0),testDataRow1);TestUtils.assertEquals(m.getColumn(2),testDataCol3);try {m.getRow(10);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetEntry",0,"@Test public void testGetEntry(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);Assert.assertEquals(m.getEntry(0,1),new Fraction(2));try {m.getEntry(10,4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testExamples",0,"/** * test examples in user guide */@Test public void testExamples(){Fraction[][]matrixData={{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(5),new Fraction(3)}};FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(matrixData);Fraction[][]matrixData2={{new Fraction(1),new Fraction(2)},{new Fraction(2),new Fraction(5)},{new Fraction(1),new Fraction(7)}};FieldMatrix<Fraction> n=new BlockFieldMatrix<Fraction>(matrixData2);FieldMatrix<Fraction> p=m.multiply(n);Assert.assertEquals(2,p.getRowDimension());Assert.assertEquals(2,p.getColumnDimension());FieldMatrix<Fraction> pInverse=new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();Assert.assertEquals(2,pInverse.getRowDimension());Assert.assertEquals(2,pInverse.getColumnDimension());Fraction[][]coefficientsData={{new Fraction(2),new Fraction(3),new Fraction(-2)},{new Fraction(-1),new Fraction(7),new Fraction(6)},{new Fraction(4),new Fraction(-3),new Fraction(-5)}};FieldMatrix<Fraction> coefficients=new BlockFieldMatrix<Fraction>(coefficientsData);Fraction[]constants={new Fraction(1),new Fraction(-2),new Fraction(1)};Fraction[]solution;solution=new FieldLUDecomposition<Fraction>(coefficients).getSolver().solve(new ArrayFieldVector<Fraction>(constants,false)).toArray();Assert.assertEquals(new Fraction(2).multiply(solution[0]).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2])),constants[0]);Assert.assertEquals(new Fraction(-1).multiply(solution[0]).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2])),constants[1]);Assert.assertEquals(new Fraction(4).multiply(solution[0]).subtract(new Fraction(3).multiply(solution[1])).subtract(new Fraction(5).multiply(solution[2])),constants[2]);}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSubMatrix",0,"@Test public void testGetSubMatrix(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);checkGetSubMatrix(m,subRows23Cols00,2,3,0,0);checkGetSubMatrix(m,subRows00Cols33,0,0,3,3);checkGetSubMatrix(m,subRows01Cols23,0,1,2,3);checkGetSubMatrix(m,subRows02Cols13,new int[]{0,2},new int[]{1,3});checkGetSubMatrix(m,subRows03Cols12,new int[]{0,3},new int[]{1,2});checkGetSubMatrix(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3});checkGetSubMatrix(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3});checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkGetSubMatrix(m,null,1,0,2,4);checkGetSubMatrix(m,null,-1,1,2,2);checkGetSubMatrix(m,null,1,0,2,2);checkGetSubMatrix(m,null,1,0,2,4);checkGetSubMatrix(m,null,new int[]{},new int[]{0});checkGetSubMatrix(m,null,new int[]{0},new int[]{4});}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetMatrixLarge",0,"@Test public void testGetSetMatrixLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);FieldMatrix<Fraction> sub=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n - 4,n - 4).scalarAdd(new Fraction(1));m.setSubMatrix(sub.getData(),2,2);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if ((i < 2)|| (i > n - 3)|| (j < 2)|| (j > n - 3)){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}Assert.assertEquals(sub,m.getSubMatrix(2,n - 3,2,n - 3));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testCopySubMatrix",0,"@Test public void testCopySubMatrix(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);checkCopy(m,subRows23Cols00,2,3,0,0);checkCopy(m,subRows00Cols33,0,0,3,3);checkCopy(m,subRows01Cols23,0,1,2,3);checkCopy(m,subRows02Cols13,new int[]{0,2},new int[]{1,3});checkCopy(m,subRows03Cols12,new int[]{0,3},new int[]{1,2});checkCopy(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3});checkCopy(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3});checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkCopy(m,null,1,0,2,4);checkCopy(m,null,-1,1,2,2);checkCopy(m,null,1,0,2,2);checkCopy(m,null,1,0,2,4);checkCopy(m,null,new int[]{},new int[]{0});checkCopy(m,null,new int[]{0},new int[]{4});}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetRowMatrix",0,"@Test public void testGetRowMatrix(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mRow0=new BlockFieldMatrix<Fraction>(subRow0);FieldMatrix<Fraction> mRow3=new BlockFieldMatrix<Fraction>(subRow3);Assert.assertEquals(""Row0"",mRow0,m.getRowMatrix(0));Assert.assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetRowMatrix",0,"@Test public void testSetRowMatrix(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mRow3=new BlockFieldMatrix<Fraction>(subRow3);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowMatrix(0,mRow3);Assert.assertEquals(mRow3,m.getRowMatrix(0));try {m.setRowMatrix(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetRowMatrixLarge",0,"@Test public void testGetSetRowMatrixLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);FieldMatrix<Fraction> sub=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),1,n).scalarAdd(new Fraction(1));m.setRowMatrix(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}Assert.assertEquals(sub,m.getRowMatrix(2));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetColumnMatrix",0,"@Test public void testGetColumnMatrix(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mColumn1=new BlockFieldMatrix<Fraction>(subColumn1);FieldMatrix<Fraction> mColumn3=new BlockFieldMatrix<Fraction>(subColumn3);Assert.assertEquals(mColumn1,m.getColumnMatrix(1));Assert.assertEquals(mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetColumnMatrix",0,"@Test public void testSetColumnMatrix(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mColumn3=new BlockFieldMatrix<Fraction>(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnMatrix(1));m.setColumnMatrix(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnMatrix(1));try {m.setColumnMatrix(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetColumnMatrixLarge",0,"@Test public void testGetSetColumnMatrixLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);FieldMatrix<Fraction> sub=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,1).scalarAdd(new Fraction(1));m.setColumnMatrix(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}Assert.assertEquals(sub,m.getColumnMatrix(2));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetRowVector",0,"@Test public void testGetRowVector(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mRow0=new ArrayFieldVector<Fraction>(subRow0[0]);FieldVector<Fraction> mRow3=new ArrayFieldVector<Fraction>(subRow3[0]);Assert.assertEquals(mRow0,m.getRowVector(0));Assert.assertEquals(mRow3,m.getRowVector(3));try {m.getRowVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetRowVector",0,"@Test public void testSetRowVector(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mRow3=new ArrayFieldVector<Fraction>(subRow3[0]);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowVector(0,mRow3);Assert.assertEquals(mRow3,m.getRowVector(0));try {m.setRowVector(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowVector(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetRowVectorLarge",0,"@Test public void testGetSetRowVectorLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);FieldVector<Fraction> sub=new ArrayFieldVector<Fraction>(n,new Fraction(1));m.setRowVector(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}Assert.assertEquals(sub,m.getRowVector(2));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetColumnVector",0,"@Test public void testGetColumnVector(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mColumn1=columnToVector(subColumn1);FieldVector<Fraction> mColumn3=columnToVector(subColumn3);Assert.assertEquals(mColumn1,m.getColumnVector(1));Assert.assertEquals(mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetColumnVector",0,"@Test public void testSetColumnVector(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mColumn3=columnToVector(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnVector(1));m.setColumnVector(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnVector(1));try {m.setColumnVector(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnVector(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetColumnVectorLarge",0,"@Test public void testGetSetColumnVectorLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);FieldVector<Fraction> sub=new ArrayFieldVector<Fraction>(n,new Fraction(1));m.setColumnVector(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}Assert.assertEquals(sub,m.getColumnVector(2));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetRow",0,"@Test public void testGetRow(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);checkArrays(subRow0[0],m.getRow(0));checkArrays(subRow3[0],m.getRow(3));try {m.getRow(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRow(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetRow",0,"@Test public void testSetRow(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);Assert.assertTrue(subRow3[0][0]!= m.getRow(0)[0]);m.setRow(0,subRow3[0]);checkArrays(subRow3[0],m.getRow(0));try {m.setRow(-1,subRow3[0]);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRow(0,new Fraction[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetRowLarge",0,"@Test public void testGetSetRowLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);Fraction[]sub=new Fraction[n];Arrays.fill(sub,new Fraction(1));m.setRow(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (i != 2){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}checkArrays(sub,m.getRow(2));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetColumn",0,"@Test public void testGetColumn(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);Fraction[]mColumn1=columnToArray(subColumn1);Fraction[]mColumn3=columnToArray(subColumn3);checkArrays(mColumn1,m.getColumn(1));checkArrays(mColumn3,m.getColumn(3));try {m.getColumn(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetColumn",0,"@Test public void testSetColumn(){FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(subTestData);Fraction[]mColumn3=columnToArray(subColumn3);Assert.assertTrue(mColumn3[0]!= m.getColumn(1)[0]);m.setColumn(1,mColumn3);checkArrays(mColumn3,m.getColumn(1));try {m.setColumn(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumn(0,new Fraction[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testGetSetColumnLarge",0,"@Test public void testGetSetColumnLarge(){int n=3 * BlockFieldMatrix.BLOCK_SIZE;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),n,n);Fraction[]sub=new Fraction[n];Arrays.fill(sub,new Fraction(1));m.setColumn(2,sub);for (int i=0;i < n;++i){for (int j=0;j < n;++j){if (j != 2){Assert.assertEquals(new Fraction(0),m.getEntry(i,j));}else {Assert.assertEquals(new Fraction(1),m.getEntry(i,j));}}}checkArrays(sub,m.getColumn(2));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);BlockFieldMatrix<Fraction> m1=(BlockFieldMatrix<Fraction>)m.copy();BlockFieldMatrix<Fraction> mt=(BlockFieldMatrix<Fraction>)m.transpose();Assert.assertTrue(m.hashCode()!= mt.hashCode());Assert.assertEquals(m.hashCode(),m1.hashCode());Assert.assertEquals(m,m);Assert.assertEquals(m,m1);Assert.assertFalse(m.equals(null));Assert.assertFalse(m.equals(mt));Assert.assertFalse(m.equals(new BlockFieldMatrix<Fraction>(bigSingular)));}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testToString",0,"@Test public void testToString(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);Assert.assertEquals(""BlockFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"",m.toString());}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);m.setSubMatrix(detData2,1,1);FieldMatrix<Fraction> expected=new BlockFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(1),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});Assert.assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=new BlockFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(3),new Fraction(3)},{new Fraction(2),new Fraction(4),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});Assert.assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=new BlockFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(3),new Fraction(4),new Fraction(5)},{new Fraction(4),new Fraction(7),new Fraction(5)},{new Fraction(3),new Fraction(2),new Fraction(10)}});Assert.assertEquals(expected,m);BlockFieldMatrix<Fraction> matrix=new BlockFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6),new Fraction(7),new Fraction(8)},{new Fraction(9),new Fraction(0),new Fraction(1),new Fraction(2)}});matrix.setSubMatrix(new Fraction[][]{{new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6)}},1,1);expected=new BlockFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(3),new Fraction(4),new Fraction(8)},{new Fraction(9),new Fraction(5),new Fraction(6),new Fraction(2)}});Assert.assertEquals(expected,matrix);try {m.setSubMatrix(testData,1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,-1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,1,-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(null,1,1);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException e){}try {m.setSubMatrix(new Fraction[][]{{new Fraction(1)},{new Fraction(2),new Fraction(3)}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new Fraction[][]{{}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testWalk",0,"@Test public void testWalk(){int rows=150;int columns=75;FieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInRowOrder(new SetVisitor());GetVisitor getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInRowOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInColumnOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInColumnOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new BlockFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}}"
"org.apache.commons.math3.linear.BlockFieldMatrixTest.testSerial",0,"@Test public void testSerial(){BlockFieldMatrix<Fraction> m=new BlockFieldMatrix<Fraction>(testData);Assert.assertEquals(m,TestUtils.serializeAndRecover(m));}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testLongly",0,"/** * Test Longley dataset against R.*/@Test public void testLongly(){RealMatrix matrix=createRealMatrix(longleyData,16,7);PearsonsCorrelation corrInstance=new PearsonsCorrelation(matrix);RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();double[]rData=new double[]{1.000000000000000,0.9708985250610560,0.9835516111796693,0.5024980838759942,0.4573073999764817,0.960390571594376,0.9713294591921188,0.970898525061056,1.0000000000000000,0.9915891780247822,0.6206333925590966,0.4647441876006747,0.979163432977498,0.9911491900672053,0.983551611179669,0.9915891780247822,1.0000000000000000,0.6042609398895580,0.4464367918926265,0.991090069458478,0.9952734837647849,0.502498083875994,0.6206333925590966,0.6042609398895580,1.0000000000000000,-0.1774206295018783,0.686551516365312,0.6682566045621746,0.457307399976482,0.4647441876006747,0.4464367918926265,-0.1774206295018783,1.0000000000000000,0.364416267189032,0.4172451498349454,0.960390571594376,0.9791634329774981,0.9910900694584777,0.6865515163653120,0.3644162671890320,1.000000000000000,0.9939528462329257,0.971329459192119,0.9911491900672053,0.9952734837647849,0.6682566045621746,0.4172451498349454,0.993952846232926,1.0000000000000000};TestUtils.assertEquals(""correlation matrix"",createRealMatrix(rData,7,7),correlationMatrix,10E-15);double[]rPvalues=new double[]{4.38904690369668e-10,8.36353208910623e-12,7.8159700933611e-14,0.0472894097790304,0.01030636128354301,0.01316878049026582,0.0749178049642416,0.06971758330341182,0.0830166169296545,0.510948586323452,3.693245043123738e-09,4.327782576751815e-11,1.167954621905665e-13,0.00331028281967516,0.1652293725106684,3.95834476307755e-10,1.114663916723657e-13,1.332267629550188e-15,0.00466039138541463,0.1078477071581498,7.771561172376096e-15};RealMatrix rPMatrix=createLowerTriangularRealMatrix(rPvalues,7);fillUpper(rPMatrix,0d);TestUtils.assertEquals(""correlation p values"",rPMatrix,corrInstance.getCorrelationPValues(),10E-15);}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testSwissFertility",0,"/** * Test R Swiss fertility dataset against R.*/@Test public void testSwissFertility(){RealMatrix matrix=createRealMatrix(swissData,47,5);PearsonsCorrelation corrInstance=new PearsonsCorrelation(matrix);RealMatrix correlationMatrix=corrInstance.getCorrelationMatrix();double[]rData=new double[]{1.0000000000000000,0.3530791836199747,-0.6458827064572875,-0.6637888570350691,0.4636847006517939,0.3530791836199747,1.0000000000000000,-0.6865422086171366,-0.6395225189483201,0.4010950530487398,-0.6458827064572875,-0.6865422086171366,1.0000000000000000,0.6984152962884830,-0.5727418060641666,-0.6637888570350691,-0.6395225189483201,0.6984152962884830,1.0000000000000000,-0.1538589170909148,0.4636847006517939,0.4010950530487398,-0.5727418060641666,-0.1538589170909148,1.0000000000000000};TestUtils.assertEquals(""correlation matrix"",createRealMatrix(rData,5,5),correlationMatrix,10E-15);double[]rPvalues=new double[]{0.01491720061472623,9.45043734069043e-07,9.95151527133974e-08,3.658616965962355e-07,1.304590105694471e-06,4.811397236181847e-08,0.001028523190118147,0.005204433539191644,2.588307925380906e-05,0.301807756132683};RealMatrix rPMatrix=createLowerTriangularRealMatrix(rPvalues,5);fillUpper(rPMatrix,0d);TestUtils.assertEquals(""correlation p values"",rPMatrix,corrInstance.getCorrelationPValues(),10E-15);}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testPValueNearZero",0,"/** * Test p-value near 0. JIRA: MATH-371*/@Test public void testPValueNearZero(){int dimension=120;double[][]data=new double[dimension][2];for (int i=0;i < dimension;i++){data[i][0]=i;data[i][1]=i + 1 / ((double)i + 1);}PearsonsCorrelation corrInstance=new PearsonsCorrelation(data);Assert.assertTrue(corrInstance.getCorrelationPValues().getEntry(0,1)> 0);}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testConstant",0,"/** * Constant column*/@Test public void testConstant(){double[]noVariance=new double[]{1,1,1,1};double[]values=new double[]{1,2,3,4};Assert.assertTrue(Double.isNaN(new PearsonsCorrelation().correlation(noVariance,values)));}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testInsufficientData",0,"/** * Insufficient data*/@Test public void testInsufficientData(){double[]one=new double[]{1};double[]two=new double[]{2};try {new PearsonsCorrelation().correlation(one,two);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}RealMatrix matrix=new BlockRealMatrix(new double[][]{{0},{1}});try {new PearsonsCorrelation(matrix);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testStdErrorConsistency",0,"/** * Verify that direct t-tests using standard error estimates are consistent with reported p-values*/@Test public void testStdErrorConsistency(){TDistribution tDistribution=new TDistribution(45);RealMatrix matrix=createRealMatrix(swissData,47,5);PearsonsCorrelation corrInstance=new PearsonsCorrelation(matrix);RealMatrix rValues=corrInstance.getCorrelationMatrix();RealMatrix pValues=corrInstance.getCorrelationPValues();RealMatrix stdErrors=corrInstance.getCorrelationStandardErrors();for (int i=0;i < 5;i++){for (int j=0;j < i;j++){double t=FastMath.abs(rValues.getEntry(i,j))/ stdErrors.getEntry(i,j);double p=2 * (1 - tDistribution.cumulativeProbability(t));Assert.assertEquals(p,pValues.getEntry(i,j),10E-15);}}}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testCovarianceConsistency",0,"/** * Verify that creating correlation from covariance gives same results as direct computation from the original matrix*/@Test public void testCovarianceConsistency(){RealMatrix matrix=createRealMatrix(longleyData,16,7);PearsonsCorrelation corrInstance=new PearsonsCorrelation(matrix);Covariance covInstance=new Covariance(matrix);PearsonsCorrelation corrFromCovInstance=new PearsonsCorrelation(covInstance);TestUtils.assertEquals(""correlation values"",corrInstance.getCorrelationMatrix(),corrFromCovInstance.getCorrelationMatrix(),10E-15);TestUtils.assertEquals(""p values"",corrInstance.getCorrelationPValues(),corrFromCovInstance.getCorrelationPValues(),10E-15);TestUtils.assertEquals(""standard errors"",corrInstance.getCorrelationStandardErrors(),corrFromCovInstance.getCorrelationStandardErrors(),10E-15);PearsonsCorrelation corrFromCovInstance2=new PearsonsCorrelation(covInstance.getCovarianceMatrix(),16);TestUtils.assertEquals(""correlation values"",corrInstance.getCorrelationMatrix(),corrFromCovInstance2.getCorrelationMatrix(),10E-15);TestUtils.assertEquals(""p values"",corrInstance.getCorrelationPValues(),corrFromCovInstance2.getCorrelationPValues(),10E-15);TestUtils.assertEquals(""standard errors"",corrInstance.getCorrelationStandardErrors(),corrFromCovInstance2.getCorrelationStandardErrors(),10E-15);}"
"org.apache.commons.math3.stat.correlation.PearsonsCorrelationTest.testConsistency",0,"@Test public void testConsistency(){RealMatrix matrix=createRealMatrix(longleyData,16,7);PearsonsCorrelation corrInstance=new PearsonsCorrelation(matrix);double[][]data=matrix.getData();double[]x=matrix.getColumn(0);double[]y=matrix.getColumn(1);Assert.assertEquals(new PearsonsCorrelation().correlation(x,y),corrInstance.getCorrelationMatrix().getEntry(0,1),Double.MIN_VALUE);TestUtils.assertEquals(""Correlation matrix"",corrInstance.getCorrelationMatrix(),new PearsonsCorrelation().computeCorrelationMatrix(data),Double.MIN_VALUE);}"
"org.apache.commons.math3.optimization.PointValuePairTest.testSerial",0,"@Test public void testSerial(){PointValuePair pv1=new PointValuePair(new double[]{1.0,2.0,3.0},4.0);PointValuePair pv2=(PointValuePair)TestUtils.serializeAndRecover(pv1);Assert.assertEquals(pv1.getKey().length,pv2.getKey().length);for (int i=0;i < pv1.getKey().length;++i){Assert.assertEquals(pv1.getKey()[i],pv2.getKey()[i],1.0e-15);}Assert.assertEquals(pv1.getValue(),pv2.getValue(),1.0e-15);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828",0,"@Test public void testMath828(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},0.0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{0.0,39.0,23.0,96.0,15.0,48.0,9.0,21.0,48.0,36.0,76.0,19.0,88.0,17.0,16.0,36.0},Relationship.GEQ,15.0));constraints.add(new LinearConstraint(new double[]{0.0,59.0,93.0,12.0,29.0,78.0,73.0,87.0,32.0,70.0,68.0,24.0,11.0,26.0,65.0,25.0},Relationship.GEQ,29.0));constraints.add(new LinearConstraint(new double[]{0.0,74.0,5.0,82.0,6.0,97.0,55.0,44.0,52.0,54.0,5.0,93.0,91.0,8.0,20.0,97.0},Relationship.GEQ,6.0));constraints.add(new LinearConstraint(new double[]{8.0,-3.0,-28.0,-72.0,-8.0,-31.0,-31.0,-74.0,-47.0,-59.0,-24.0,-57.0,-56.0,-16.0,-92.0,-59.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{25.0,-7.0,-99.0,-78.0,-25.0,-14.0,-16.0,-89.0,-39.0,-56.0,-53.0,-9.0,-18.0,-26.0,-11.0,-61.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{33.0,-95.0,-15.0,-4.0,-33.0,-3.0,-20.0,-96.0,-27.0,-13.0,-80.0,-24.0,-3.0,-13.0,-57.0,-76.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{7.0,-95.0,-39.0,-93.0,-7.0,-94.0,-94.0,-62.0,-76.0,-26.0,-53.0,-57.0,-31.0,-76.0,-53.0,-52.0},Relationship.GEQ,0.0));double epsilon=1e-6;PointValuePair solution=new SimplexSolver().optimize(f,constraints,GoalType.MINIMIZE,true);Assert.assertEquals(1.0d,solution.getValue(),epsilon);Assert.assertTrue(validSolution(solution,constraints,epsilon));}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath828Cycle",0,"@Test public void testMath828Cycle(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},0.0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{0.0,16.0,14.0,69.0,1.0,85.0,52.0,43.0,64.0,97.0,14.0,74.0,89.0,28.0,94.0,58.0,13.0,22.0,21.0,17.0,30.0,25.0,1.0,59.0,91.0,78.0,12.0,74.0,56.0,3.0,88.0},Relationship.GEQ,91.0));constraints.add(new LinearConstraint(new double[]{0.0,60.0,40.0,81.0,71.0,72.0,46.0,45.0,38.0,48.0,40.0,17.0,33.0,85.0,64.0,32.0,84.0,3.0,54.0,44.0,71.0,67.0,90.0,95.0,54.0,99.0,99.0,29.0,52.0,98.0,9.0},Relationship.GEQ,54.0));constraints.add(new LinearConstraint(new double[]{0.0,41.0,12.0,86.0,90.0,61.0,31.0,41.0,23.0,89.0,17.0,74.0,44.0,27.0,16.0,47.0,80.0,32.0,11.0,56.0,68.0,82.0,11.0,62.0,62.0,53.0,39.0,16.0,48.0,1.0,63.0},Relationship.GEQ,62.0));constraints.add(new LinearConstraint(new double[]{83.0,-76.0,-94.0,-19.0,-15.0,-70.0,-72.0,-57.0,-63.0,-65.0,-22.0,-94.0,-22.0,-88.0,-86.0,-89.0,-72.0,-16.0,-80.0,-49.0,-70.0,-93.0,-95.0,-17.0,-83.0,-97.0,-31.0,-47.0,-31.0,-13.0,-23.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{41.0,-96.0,-41.0,-48.0,-70.0,-43.0,-43.0,-43.0,-97.0,-37.0,-85.0,-70.0,-45.0,-67.0,-87.0,-69.0,-94.0,-54.0,-54.0,-92.0,-79.0,-10.0,-35.0,-20.0,-41.0,-41.0,-65.0,-25.0,-12.0,-8.0,-46.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{27.0,-42.0,-65.0,-49.0,-53.0,-42.0,-17.0,-2.0,-61.0,-31.0,-76.0,-47.0,-8.0,-93.0,-86.0,-62.0,-65.0,-63.0,-22.0,-43.0,-27.0,-23.0,-32.0,-74.0,-27.0,-63.0,-47.0,-78.0,-29.0,-95.0,-73.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{15.0,-46.0,-41.0,-83.0,-98.0,-99.0,-21.0,-35.0,-7.0,-14.0,-80.0,-63.0,-18.0,-42.0,-5.0,-34.0,-56.0,-70.0,-16.0,-18.0,-74.0,-61.0,-47.0,-41.0,-15.0,-79.0,-18.0,-47.0,-88.0,-68.0,-55.0},Relationship.GEQ,0.0));double epsilon=1e-6;PointValuePair solution=new SimplexSolver().optimize(f,constraints,GoalType.MINIMIZE,true);Assert.assertEquals(1.0d,solution.getValue(),epsilon);Assert.assertTrue(validSolution(solution,constraints,epsilon));}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath781",0,"@Test public void testMath781(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{2,6,7},0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,2,1},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{-1,1,1},Relationship.LEQ,-1));constraints.add(new LinearConstraint(new double[]{2,-3,1},Relationship.LEQ,-1));double epsilon=1e-6;SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,false);Assert.assertTrue(Precision.compareTo(solution.getPoint()[0],0.0d,epsilon)> 0);Assert.assertTrue(Precision.compareTo(solution.getPoint()[1],0.0d,epsilon)> 0);Assert.assertTrue(Precision.compareTo(solution.getPoint()[2],0.0d,epsilon)< 0);Assert.assertEquals(2.0d,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath713NegativeVariable",0,"@Test public void testMath713NegativeVariable(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,1.0},0.0d);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.EQ,1));double epsilon=1e-6;SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,true);Assert.assertTrue(Precision.compareTo(solution.getPoint()[0],0.0d,epsilon)>= 0);Assert.assertTrue(Precision.compareTo(solution.getPoint()[1],0.0d,epsilon)>= 0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434NegativeVariable",0,"@Test public void testMath434NegativeVariable(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.0,0.0,1.0},0.0d);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1,0},Relationship.EQ,5));constraints.add(new LinearConstraint(new double[]{0,0,1},Relationship.GEQ,-10));double epsilon=1e-6;SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,false);Assert.assertEquals(5.0,solution.getPoint()[0]+ solution.getPoint()[1],epsilon);Assert.assertEquals(-10.0,solution.getPoint()[2],epsilon);Assert.assertEquals(-10.0,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434UnfeasibleSolution",0,"@Test(expected=NoFeasibleSolutionException.class)public void testMath434UnfeasibleSolution(){double epsilon=1e-6;LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,0.0},0.0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{epsilon / 2,0.5},Relationship.EQ,0));constraints.add(new LinearConstraint(new double[]{1e-3,0.1},Relationship.EQ,10));SimplexSolver solver=new SimplexSolver();solver.optimize(f,constraints,GoalType.MINIMIZE,true);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434PivotRowSelection",0,"@Test public void testMath434PivotRowSelection(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0},0.0);double epsilon=1e-6;ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{200},Relationship.GEQ,1));constraints.add(new LinearConstraint(new double[]{100},Relationship.GEQ,0.499900001));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,false);Assert.assertTrue(Precision.compareTo(solution.getPoint()[0]* 200.d,1.d,epsilon)>= 0);Assert.assertEquals(0.0050,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath434PivotRowSelection2",0,"@Test public void testMath434PivotRowSelection2(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.0d,1.0d,1.0d,0.0d,0.0d,0.0d,0.0d},0.0d);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1.0d,-0.1d,0.0d,0.0d,0.0d,0.0d,0.0d},Relationship.EQ,-0.1d));constraints.add(new LinearConstraint(new double[]{1.0d,0.0d,0.0d,0.0d,0.0d,0.0d,0.0d},Relationship.GEQ,-1e-18d));constraints.add(new LinearConstraint(new double[]{0.0d,1.0d,0.0d,0.0d,0.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,0.0d,1.0d,0.0d,-0.0128588d,1e-5d},Relationship.EQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,0.0d,0.0d,1.0d,1e-5d,-0.0128586d},Relationship.EQ,1e-10d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,-1.0d,0.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,1.0d,0.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,0.0d,-1.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,0.0d,1.0d,0.0d,0.0d},Relationship.GEQ,0.0d));double epsilon=1e-7;SimplexSolver simplex=new SimplexSolver();PointValuePair solution=simplex.optimize(f,constraints,GoalType.MINIMIZE,false);Assert.assertTrue(Precision.compareTo(solution.getPoint()[0],-1e-18d,epsilon)>= 0);Assert.assertEquals(1.0d,solution.getPoint()[1],epsilon);Assert.assertEquals(0.0d,solution.getPoint()[2],epsilon);Assert.assertEquals(1.0d,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath272",0,"@Test public void testMath272(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{2,2,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1,0},Relationship.GEQ,1));constraints.add(new LinearConstraint(new double[]{1,0,1},Relationship.GEQ,1));constraints.add(new LinearConstraint(new double[]{0,1,0},Relationship.GEQ,1));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,true);Assert.assertEquals(0.0,solution.getPoint()[0],.0000001);Assert.assertEquals(1.0,solution.getPoint()[1],.0000001);Assert.assertEquals(1.0,solution.getPoint()[2],.0000001);Assert.assertEquals(3.0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath286",0,"@Test public void testMath286(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.8,0.2,0.7,0.3,0.6,0.4},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0,1,0,1,0},Relationship.EQ,23.0));constraints.add(new LinearConstraint(new double[]{0,1,0,1,0,1},Relationship.EQ,23.0));constraints.add(new LinearConstraint(new double[]{1,0,0,0,0,0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0,0,1,0,0,0},Relationship.GEQ,8.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,1,0},Relationship.GEQ,5.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(25.8,solution.getValue(),.0000001);Assert.assertEquals(23.0,solution.getPoint()[0]+ solution.getPoint()[2]+ solution.getPoint()[4],0.0000001);Assert.assertEquals(23.0,solution.getPoint()[1]+ solution.getPoint()[3]+ solution.getPoint()[5],0.0000001);Assert.assertTrue(solution.getPoint()[0]>= 10.0 - 0.0000001);Assert.assertTrue(solution.getPoint()[2]>= 8.0 - 0.0000001);Assert.assertTrue(solution.getPoint()[4]>= 5.0 - 0.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testDegeneracy",0,"@Test public void testDegeneracy(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.8,0.7},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1},Relationship.LEQ,18.0));constraints.add(new LinearConstraint(new double[]{1,0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.GEQ,8.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(13.6,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath288",0,"@Test public void testMath288(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{7,3,0,0},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{3,0,-5,0},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{2,0,0,-5},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,3,0,-5},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{1,0,0,0},Relationship.LEQ,1.0));constraints.add(new LinearConstraint(new double[]{0,1,0,0},Relationship.LEQ,1.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(10.0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath290GEQ",0,"@Test public void testMath290GEQ(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1,5},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{2,0},Relationship.GEQ,-1.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,true);Assert.assertEquals(0,solution.getValue(),.0000001);Assert.assertEquals(0,solution.getPoint()[0],.0000001);Assert.assertEquals(0,solution.getPoint()[1],.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath290LEQ",0,"@Test(expected=NoFeasibleSolutionException.class)public void testMath290LEQ(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1,5},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{2,0},Relationship.LEQ,-1.0));SimplexSolver solver=new SimplexSolver();solver.optimize(f,constraints,GoalType.MINIMIZE,true);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMath293",0,"@Test public void testMath293(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.8,0.2,0.7,0.3,0.4,0.6},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0,1,0,1,0},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0,1,0,1,0,1},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0.8,0.2,0.0,0.0,0.0,0.0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.7,0.3,0.0,0.0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.0,0.0,0.4,0.6},Relationship.GEQ,10.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution1=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(15.7143,solution1.getPoint()[0],.0001);Assert.assertEquals(0.0,solution1.getPoint()[1],.0001);Assert.assertEquals(14.2857,solution1.getPoint()[2],.0001);Assert.assertEquals(0.0,solution1.getPoint()[3],.0001);Assert.assertEquals(0.0,solution1.getPoint()[4],.0001);Assert.assertEquals(30.0,solution1.getPoint()[5],.0001);Assert.assertEquals(40.57143,solution1.getValue(),.0001);double valA=0.8 * solution1.getPoint()[0]+ 0.2 * solution1.getPoint()[1];double valB=0.7 * solution1.getPoint()[2]+ 0.3 * solution1.getPoint()[3];double valC=0.4 * solution1.getPoint()[4]+ 0.6 * solution1.getPoint()[5];f=new LinearObjectiveFunction(new double[]{0.8,0.2,0.7,0.3,0.4,0.6},0);constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0,1,0,1,0},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0,1,0,1,0,1},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0.8,0.2,0.0,0.0,0.0,0.0},Relationship.GEQ,valA));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.7,0.3,0.0,0.0},Relationship.GEQ,valB));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.0,0.0,0.4,0.6},Relationship.GEQ,valC));PointValuePair solution2=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(40.57143,solution2.getValue(),.0001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testSimplexSolver",0,"@Test public void testSimplexSolver(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},7);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.LEQ,3));constraints.add(new LinearConstraint(new double[]{1,1},Relationship.EQ,4));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,false);Assert.assertEquals(2.0,solution.getPoint()[0],0.0);Assert.assertEquals(2.0,solution.getPoint()[1],0.0);Assert.assertEquals(57.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testSingleVariableAndConstraint",0,"@Test public void testSingleVariableAndConstraint(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{3},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1},Relationship.LEQ,10));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,false);Assert.assertEquals(10.0,solution.getPoint()[0],0.0);Assert.assertEquals(30.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testModelWithNoArtificialVars",0,"/** * With no artificial variables needed (no equals and no greater than constraints)we can go straight to Phase 2.*/@Test public void testModelWithNoArtificialVars(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.LEQ,3));constraints.add(new LinearConstraint(new double[]{1,1},Relationship.LEQ,4));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,false);Assert.assertEquals(2.0,solution.getPoint()[0],0.0);Assert.assertEquals(2.0,solution.getPoint()[1],0.0);Assert.assertEquals(50.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testMinimization",0,"@Test public void testMinimization(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{-2,1},-5);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,2},Relationship.LEQ,6));constraints.add(new LinearConstraint(new double[]{3,2},Relationship.LEQ,12));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.GEQ,0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,false);Assert.assertEquals(4.0,solution.getPoint()[0],0.0);Assert.assertEquals(0.0,solution.getPoint()[1],0.0);Assert.assertEquals(-13.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable",0,"@Test public void testSolutionWithNegativeDecisionVariable(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{-2,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1},Relationship.GEQ,6));constraints.add(new LinearConstraint(new double[]{1,2},Relationship.LEQ,14));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,false);Assert.assertEquals(-2.0,solution.getPoint()[0],0.0);Assert.assertEquals(8.0,solution.getPoint()[1],0.0);Assert.assertEquals(12.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testInfeasibleSolution",0,"@Test(expected=NoFeasibleSolutionException.class)public void testInfeasibleSolution(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1},Relationship.LEQ,1));constraints.add(new LinearConstraint(new double[]{1},Relationship.GEQ,3));SimplexSolver solver=new SimplexSolver();solver.optimize(f,constraints,GoalType.MAXIMIZE,false);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testUnboundedSolution",0,"@Test(expected=UnboundedSolutionException.class)public void testUnboundedSolution(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.EQ,2));SimplexSolver solver=new SimplexSolver();solver.optimize(f,constraints,GoalType.MAXIMIZE,false);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testRestrictVariablesToNonNegative",0,"@Test public void testRestrictVariablesToNonNegative(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{409,523,70,204,339},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{43,56,345,56,5},Relationship.LEQ,4567456));constraints.add(new LinearConstraint(new double[]{12,45,7,56,23},Relationship.LEQ,56454));constraints.add(new LinearConstraint(new double[]{8,768,0,34,7456},Relationship.LEQ,1923421));constraints.add(new LinearConstraint(new double[]{12342,2342,34,678,2342},Relationship.GEQ,4356));constraints.add(new LinearConstraint(new double[]{45,678,76,52,23},Relationship.EQ,456356));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(2902.92783505155,solution.getPoint()[0],.0000001);Assert.assertEquals(480.419243986254,solution.getPoint()[1],.0000001);Assert.assertEquals(0.0,solution.getPoint()[2],.0000001);Assert.assertEquals(0.0,solution.getPoint()[3],.0000001);Assert.assertEquals(0.0,solution.getPoint()[4],.0000001);Assert.assertEquals(1438556.7491409,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testEpsilon",0,"@Test public void testEpsilon(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{10,5,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{9,8,0},Relationship.EQ,17));constraints.add(new LinearConstraint(new double[]{0,7,8},Relationship.LEQ,7));constraints.add(new LinearConstraint(new double[]{10,0,2},Relationship.LEQ,10));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,false);Assert.assertEquals(1.0,solution.getPoint()[0],0.0);Assert.assertEquals(1.0,solution.getPoint()[1],0.0);Assert.assertEquals(0.0,solution.getPoint()[2],0.0);Assert.assertEquals(15.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testTrivialModel",0,"@Test public void testTrivialModel(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1},Relationship.EQ,0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MAXIMIZE,true);Assert.assertEquals(0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optimization.linear.SimplexSolverTest.testLargeModel",0,"@Test public void testLargeModel(){double[]objective=new double[]{1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};LinearObjectiveFunction f=new LinearObjectiveFunction(objective,0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(equationFromString(objective.length,""x0 + x1 + x2 + x3 - x12 = 0""));constraints.add(equationFromString(objective.length,""x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0""));constraints.add(equationFromString(objective.length,""x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 >= 49""));constraints.add(equationFromString(objective.length,""x0 + x1 + x2 + x3 >= 42""));constraints.add(equationFromString(objective.length,""x14 + x15 + x16 + x17 - x26 = 0""));constraints.add(equationFromString(objective.length,""x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0""));constraints.add(equationFromString(objective.length,""x14 + x15 + x16 + x17 - x12 = 0""));constraints.add(equationFromString(objective.length,""x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0""));constraints.add(equationFromString(objective.length,""x28 + x29 + x30 + x31 - x40 = 0""));constraints.add(equationFromString(objective.length,""x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0""));constraints.add(equationFromString(objective.length,""x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 >= 49""));constraints.add(equationFromString(objective.length,""x28 + x29 + x30 + x31 >= 42""));constraints.add(equationFromString(objective.length,""x42 + x43 + x44 + x45 - x54 = 0""));constraints.add(equationFromString(objective.length,""x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0""));constraints.add(equationFromString(objective.length,""x42 + x43 + x44 + x45 - x40 = 0""));constraints.add(equationFromString(objective.length,""x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0""));constraints.add(equationFromString(objective.length,""x56 + x57 + x58 + x59 - x68 = 0""));constraints.add(equationFromString(objective.length,""x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0""));constraints.add(equationFromString(objective.length,""x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 >= 51""));constraints.add(equationFromString(objective.length,""x56 + x57 + x58 + x59 >= 44""));constraints.add(equationFromString(objective.length,""x70 + x71 + x72 + x73 - x82 = 0""));constraints.add(equationFromString(objective.length,""x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0""));constraints.add(equationFromString(objective.length,""x70 + x71 + x72 + x73 - x68 = 0""));constraints.add(equationFromString(objective.length,""x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0""));constraints.add(equationFromString(objective.length,""x84 + x85 + x86 + x87 - x96 = 0""));constraints.add(equationFromString(objective.length,""x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0""));constraints.add(equationFromString(objective.length,""x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 >= 51""));constraints.add(equationFromString(objective.length,""x84 + x85 + x86 + x87 >= 44""));constraints.add(equationFromString(objective.length,""x98 + x99 + x100 + x101 - x110 = 0""));constraints.add(equationFromString(objective.length,""x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0""));constraints.add(equationFromString(objective.length,""x98 + x99 + x100 + x101 - x96 = 0""));constraints.add(equationFromString(objective.length,""x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0""));constraints.add(equationFromString(objective.length,""x112 + x113 + x114 + x115 - x124 = 0""));constraints.add(equationFromString(objective.length,""x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0""));constraints.add(equationFromString(objective.length,""x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 >= 49""));constraints.add(equationFromString(objective.length,""x112 + x113 + x114 + x115 >= 42""));constraints.add(equationFromString(objective.length,""x126 + x127 + x128 + x129 - x138 = 0""));constraints.add(equationFromString(objective.length,""x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0""));constraints.add(equationFromString(objective.length,""x126 + x127 + x128 + x129 - x124 = 0""));constraints.add(equationFromString(objective.length,""x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0""));constraints.add(equationFromString(objective.length,""x140 + x141 + x142 + x143 - x152 = 0""));constraints.add(equationFromString(objective.length,""x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0""));constraints.add(equationFromString(objective.length,""x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 >= 59""));constraints.add(equationFromString(objective.length,""x140 + x141 + x142 + x143 >= 42""));constraints.add(equationFromString(objective.length,""x154 + x155 + x156 + x157 - x166 = 0""));constraints.add(equationFromString(objective.length,""x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0""));constraints.add(equationFromString(objective.length,""x154 + x155 + x156 + x157 - x152 = 0""));constraints.add(equationFromString(objective.length,""x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0""));constraints.add(equationFromString(objective.length,""x83 + x82 - x168 = 0""));constraints.add(equationFromString(objective.length,""x111 + x110 - x169 = 0""));constraints.add(equationFromString(objective.length,""x170 - x182 = 0""));constraints.add(equationFromString(objective.length,""x171 - x183 = 0""));constraints.add(equationFromString(objective.length,""x172 - x184 = 0""));constraints.add(equationFromString(objective.length,""x173 - x185 = 0""));constraints.add(equationFromString(objective.length,""x174 - x186 = 0""));constraints.add(equationFromString(objective.length,""x175 + x176 - x187 = 0""));constraints.add(equationFromString(objective.length,""x177 - x188 = 0""));constraints.add(equationFromString(objective.length,""x178 - x189 = 0""));constraints.add(equationFromString(objective.length,""x179 - x190 = 0""));constraints.add(equationFromString(objective.length,""x180 - x191 = 0""));constraints.add(equationFromString(objective.length,""x181 - x192 = 0""));constraints.add(equationFromString(objective.length,""x170 - x26 = 0""));constraints.add(equationFromString(objective.length,""x171 - x27 = 0""));constraints.add(equationFromString(objective.length,""x172 - x54 = 0""));constraints.add(equationFromString(objective.length,""x173 - x55 = 0""));constraints.add(equationFromString(objective.length,""x174 - x168 = 0""));constraints.add(equationFromString(objective.length,""x177 - x169 = 0""));constraints.add(equationFromString(objective.length,""x178 - x138 = 0""));constraints.add(equationFromString(objective.length,""x179 - x139 = 0""));constraints.add(equationFromString(objective.length,""x180 - x166 = 0""));constraints.add(equationFromString(objective.length,""x181 - x167 = 0""));constraints.add(equationFromString(objective.length,""x193 - x205 = 0""));constraints.add(equationFromString(objective.length,""x194 - x206 = 0""));constraints.add(equationFromString(objective.length,""x195 - x207 = 0""));constraints.add(equationFromString(objective.length,""x196 - x208 = 0""));constraints.add(equationFromString(objective.length,""x197 - x209 = 0""));constraints.add(equationFromString(objective.length,""x198 + x199 - x210 = 0""));constraints.add(equationFromString(objective.length,""x200 - x211 = 0""));constraints.add(equationFromString(objective.length,""x201 - x212 = 0""));constraints.add(equationFromString(objective.length,""x202 - x213 = 0""));constraints.add(equationFromString(objective.length,""x203 - x214 = 0""));constraints.add(equationFromString(objective.length,""x204 - x215 = 0""));constraints.add(equationFromString(objective.length,""x193 - x182 = 0""));constraints.add(equationFromString(objective.length,""x194 - x183 = 0""));constraints.add(equationFromString(objective.length,""x195 - x184 = 0""));constraints.add(equationFromString(objective.length,""x196 - x185 = 0""));constraints.add(equationFromString(objective.length,""x197 - x186 = 0""));constraints.add(equationFromString(objective.length,""x198 + x199 - x187 = 0""));constraints.add(equationFromString(objective.length,""x200 - x188 = 0""));constraints.add(equationFromString(objective.length,""x201 - x189 = 0""));constraints.add(equationFromString(objective.length,""x202 - x190 = 0""));constraints.add(equationFromString(objective.length,""x203 - x191 = 0""));constraints.add(equationFromString(objective.length,""x204 - x192 = 0""));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(f,constraints,GoalType.MINIMIZE,true);Assert.assertEquals(7518.0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit1",0,"@Test public void testGTestGoodnesOfFit1()throws Exception {final double[]exp=new double[]{3d,1d};final long[]obs=new long[]{423,133};Assert.assertEquals(""G test statistic"",0.348721,testStatistic.g(exp,obs),1E-6);final double p_gtgf=testStatistic.gTest(exp,obs);Assert.assertEquals(""g-Test p-value"",0.55483,p_gtgf,1E-5);Assert.assertFalse(testStatistic.gTest(exp,obs,0.05));}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit2",0,"@Test public void testGTestGoodnesOfFit2()throws Exception {final double[]exp=new double[]{0.54d,0.40d,0.05d,0.01d};final long[]obs=new long[]{70,79,3,4};Assert.assertEquals(""G test statistic"",13.144799,testStatistic.g(exp,obs),1E-6);final double p_gtgf=testStatistic.gTest(exp,obs);Assert.assertEquals(""g-Test p-value"",0.004333,p_gtgf,1E-5);Assert.assertTrue(testStatistic.gTest(exp,obs,0.05));}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestGoodnesOfFit3",0,"@Test public void testGTestGoodnesOfFit3()throws Exception {final double[]exp=new double[]{0.167d,0.483d,0.350d};final long[]obs=new long[]{14,21,25};Assert.assertEquals(""G test statistic"",4.5554,testStatistic.g(exp,obs),1E-4);final double p_gtgf=testStatistic.gTestIntrinsic(exp,obs);Assert.assertEquals(""g-Test p-value"",0.0328,p_gtgf,1E-4);Assert.assertFalse(testStatistic.gTest(exp,obs,0.05));}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance1",0,"@Test public void testGTestIndependance1()throws Exception {final long[]obs1=new long[]{268,199,42};final long[]obs2=new long[]{807,759,184};final double g=testStatistic.gDataSetsComparison(obs1,obs2);Assert.assertEquals(""G test statistic"",7.3008170,g,1E-6);final double p_gti=testStatistic.gTestDataSetsComparison(obs1,obs2);Assert.assertEquals(""g-Test p-value"",0.0259805,p_gti,1E-6);Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1,obs2,0.05));}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance2",0,"@Test public void testGTestIndependance2()throws Exception {final long[]obs1=new long[]{127,99,264};final long[]obs2=new long[]{116,67,161};final double g=testStatistic.gDataSetsComparison(obs1,obs2);Assert.assertEquals(""G test statistic"",6.227288,g,1E-6);final double p_gti=testStatistic.gTestDataSetsComparison(obs1,obs2);Assert.assertEquals(""g-Test p-value"",0.04443,p_gti,1E-5);Assert.assertTrue(testStatistic.gTestDataSetsComparison(obs1,obs2,0.05));}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestIndependance3",0,"@Test public void testGTestIndependance3()throws Exception {final long[]obs1=new long[]{190,149};final long[]obs2=new long[]{42,49};final double g=testStatistic.gDataSetsComparison(obs1,obs2);Assert.assertEquals(""G test statistic"",2.8187,g,1E-4);final double p_gti=testStatistic.gTestDataSetsComparison(obs1,obs2);Assert.assertEquals(""g-Test p-value"",0.09317325,p_gti,1E-6);Assert.assertFalse(testStatistic.gTestDataSetsComparison(obs1,obs2,0.05));}"
"org.apache.commons.math3.stat.inference.GTestTest.testGTestSetsComparisonBadCounts",0,"@Test public void testGTestSetsComparisonBadCounts(){long[]observed1={10,-1,12,10,15};long[]observed2={15,10,10,15,5};try {testStatistic.gTestDataSetsComparison(observed1,observed2);Assert.fail(""Expecting NotPositiveException - negative count"");}catch(NotPositiveException ex){}long[]observed3={10,0,12,10,15};long[]observed4={15,0,10,15,5};try {testStatistic.gTestDataSetsComparison(observed3,observed4);Assert.fail(""Expecting ZeroException - double 0's"");}catch(ZeroException ex){}long[]observed5={10,10,12,10,15};long[]observed6={0,0,0,0,0};try {testStatistic.gTestDataSetsComparison(observed5,observed6);Assert.fail(""Expecting ZeroException - vanishing counts"");}catch(ZeroException ex){}}"
"org.apache.commons.math3.stat.inference.GTestTest.testUnmatchedArrays",0,"@Test public void testUnmatchedArrays(){final long[]observed={0,1,2,3};final double[]expected={1,1,2};final long[]observed2={3,4};try {testStatistic.gTest(expected,observed);Assert.fail(""arrays have different lengths,DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}try {testStatistic.gTestDataSetsComparison(observed,observed2);Assert.fail(""arrays have different lengths,DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}}"
"org.apache.commons.math3.stat.inference.GTestTest.testNegativeObservedCounts",0,"@Test public void testNegativeObservedCounts(){final long[]observed={0,1,2,-3};final double[]expected={1,1,2,3};final long[]observed2={3,4,5,0};try {testStatistic.gTest(expected,observed);Assert.fail(""negative observed count,NotPositiveException expected"");}catch(NotPositiveException ex){}try {testStatistic.gTestDataSetsComparison(observed,observed2);Assert.fail(""negative observed count,NotPositiveException expected"");}catch(NotPositiveException ex){}}"
"org.apache.commons.math3.stat.inference.GTestTest.testZeroExpectedCounts",0,"@Test public void testZeroExpectedCounts(){final long[]observed={0,1,2,-3};final double[]expected={1,0,2,3};try {testStatistic.gTest(expected,observed);Assert.fail(""zero expected count,NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException ex){}}"
"org.apache.commons.math3.stat.inference.GTestTest.testBadAlpha",0,"@Test public void testBadAlpha(){final long[]observed={0,1,2,3};final double[]expected={1,2,2,3};final long[]observed2={0,2,2,3};try {testStatistic.gTest(expected,observed,0.8);Assert.fail(""zero expected count,NotStrictlyPositiveException expected"");}catch(OutOfRangeException ex){}try {testStatistic.gTestDataSetsComparison(observed,observed2,-0.5);Assert.fail(""zero expected count,NotStrictlyPositiveException expected"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.stat.inference.GTestTest.testScaling",0,"@Test public void testScaling(){final long[]observed={9,11,10,8,12};final double[]expected1={10,10,10,10,10};final double[]expected2={1000,1000,1000,1000,1000};final double[]expected3={1,1,1,1,1};final double tol=1E-15;Assert.assertEquals(testStatistic.gTest(expected1,observed),testStatistic.gTest(expected2,observed),tol);Assert.assertEquals(testStatistic.gTest(expected1,observed),testStatistic.gTest(expected3,observed),tol);}"
"org.apache.commons.math3.stat.inference.GTestTest.testRootLogLikelihood",0,"@Test public void testRootLogLikelihood(){Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(904,21060,1144,283012)> 0.0);Assert.assertTrue(testStatistic.rootLogLikelihoodRatio(36,21928,60280,623876)< 0.0);Assert.assertEquals(Math.sqrt(2.772589),testStatistic.rootLogLikelihoodRatio(1,0,0,1),0.000001);Assert.assertEquals(-Math.sqrt(2.772589),testStatistic.rootLogLikelihoodRatio(0,1,1,0),0.000001);Assert.assertEquals(Math.sqrt(27.72589),testStatistic.rootLogLikelihoodRatio(10,0,0,10),0.00001);Assert.assertEquals(Math.sqrt(39.33052),testStatistic.rootLogLikelihoodRatio(5,1995,0,100000),0.00001);Assert.assertEquals(-Math.sqrt(39.33052),testStatistic.rootLogLikelihoodRatio(0,100000,5,1995),0.00001);Assert.assertEquals(Math.sqrt(4730.737),testStatistic.rootLogLikelihoodRatio(1000,1995,1000,100000),0.001);Assert.assertEquals(-Math.sqrt(4730.737),testStatistic.rootLogLikelihoodRatio(1000,100000,1000,1995),0.001);Assert.assertEquals(Math.sqrt(5734.343),testStatistic.rootLogLikelihoodRatio(1000,1000,1000,100000),0.001);Assert.assertEquals(Math.sqrt(5714.932),testStatistic.rootLogLikelihoodRatio(1000,1000,1000,99000),0.001);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testInitOutOfBounds",0,"@Test(expected=NumberIsTooLargeException.class)public void testInitOutOfBounds(){double[]startPoint=point(DIM,3);double[][]boundaries=boundaries(DIM,-1,2);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,null);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testBoundariesDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testBoundariesDimensionMismatch(){double[]startPoint=point(DIM,0.5);double[][]boundaries=boundaries(DIM + 1,-1,2);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,null);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testProblemDimensionTooSmall",0,"@Test(expected=NumberIsTooSmallException.class)public void testProblemDimensionTooSmall(){double[]startPoint=point(1,0.5);doTest(new Rosen(),startPoint,null,GoalType.MINIMIZE,1e-13,1e-6,2000,null);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testMaxEvaluations",0,"@Test(expected=TooManyEvaluationsException.class)public void testMaxEvaluations(){final int lowMaxEval=2;double[]startPoint=point(DIM,0.1);double[][]boundaries=null;doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,lowMaxEval,null);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testRosen",0,"@Test public void testRosen(){double[]startPoint=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testMaximize",0,"@Test public void testMaximize(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),1.0);doTest(new MinusElli(),startPoint,boundaries,GoalType.MAXIMIZE,2e-10,5e-6,1000,expected);boundaries=boundaries(DIM,-0.3,0.3);startPoint=point(DIM,0.1);doTest(new MinusElli(),startPoint,boundaries,GoalType.MAXIMIZE,2e-10,5e-6,1000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testEllipse",0,"@Test public void testEllipse(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Elli(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,1000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testElliRotated",0,"@Test public void testElliRotated(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new ElliRotated(),startPoint,boundaries,GoalType.MINIMIZE,1e-12,1e-6,10000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testCigar",0,"@Test public void testCigar(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Cigar(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testTwoAxes",0,"@Test public void testTwoAxes(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new TwoAxes(),startPoint,boundaries,GoalType.MINIMIZE,2 * 1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testCigTab",0,"@Test public void testCigTab(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new CigTab(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,5e-5,100,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testSphere",0,"@Test public void testSphere(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Sphere(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testTablet",0,"@Test public void testTablet(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Tablet(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testDiffPow",0,"@Test public void testDiffPow(){}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testSsDiffPow",0,"@Test public void testSsDiffPow(){double[]startPoint=point(DIM / 2,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM / 2,0.0),0.0);doTest(new SsDiffPow(),startPoint,boundaries,GoalType.MINIMIZE,1e-2,1.3e-1,50000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testAckley",0,"@Test public void testAckley(){}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testRastrigin",0,"@Test public void testRastrigin(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Rastrigin(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,1000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testConstrainedRosen",0,"@Test public void testConstrainedRosen(){double[]startPoint=point(DIM,0.1);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizerTest.testConstrainedRosenWithMoreInterpolationPoints",0,"@Ignore @Test public void testConstrainedRosenWithMoreInterpolationPoints(){final double[]startPoint=point(DIM,0.1);final double[][]boundaries=boundaries(DIM,-1,2);final PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);final int maxAdditionalPoints=47;for (int num=1;num <= maxAdditionalPoints;num++){doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-12,1e-6,2000,num,expected,""num="" + num);}}"
"org.apache.commons.math3.util.Decimal64Test.testAdd",0,"@Test public void testAdd(){Decimal64 expected,actual;expected=new Decimal64(X + Y);actual=PLUS_X.add(PLUS_Y);Assert.assertEquals(expected,actual);actual=PLUS_Y.add(PLUS_X);Assert.assertEquals(expected,actual);expected=new Decimal64(X + (-Y));actual=PLUS_X.add(MINUS_Y);Assert.assertEquals(expected,actual);actual=MINUS_Y.add(PLUS_X);Assert.assertEquals(expected,actual);expected=new Decimal64((-X)+ (-Y));actual=MINUS_X.add(MINUS_Y);Assert.assertEquals(expected,actual);actual=MINUS_Y.add(MINUS_X);Assert.assertEquals(expected,actual);expected=Decimal64.POSITIVE_INFINITY;actual=PLUS_X.add(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.add(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.add(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.add(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);expected=Decimal64.NEGATIVE_INFINITY;actual=PLUS_X.add(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.add(PLUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=MINUS_X.add(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.add(MINUS_X);Assert.assertEquals(expected,actual);expected=Decimal64.NAN;actual=Decimal64.POSITIVE_INFINITY.add(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.add(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=PLUS_X.add(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.add(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.add(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.add(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.add(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.add(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.add(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.add(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.add(Decimal64.NAN);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.util.Decimal64Test.testSubtract",0,"@Test public void testSubtract(){Decimal64 expected,actual;expected=new Decimal64(X - Y);actual=PLUS_X.subtract(PLUS_Y);Assert.assertEquals(expected,actual);expected=new Decimal64(X - (-Y));actual=PLUS_X.subtract(MINUS_Y);Assert.assertEquals(expected,actual);expected=new Decimal64((-X)- Y);actual=MINUS_X.subtract(PLUS_Y);Assert.assertEquals(expected,actual);expected=new Decimal64((-X)- (-Y));actual=MINUS_X.subtract(MINUS_Y);Assert.assertEquals(expected,actual);expected=Decimal64.NEGATIVE_INFINITY;actual=PLUS_X.subtract(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=MINUS_X.subtract(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);expected=Decimal64.POSITIVE_INFINITY;actual=PLUS_X.subtract(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=MINUS_X.subtract(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.subtract(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);expected=Decimal64.NAN;actual=Decimal64.POSITIVE_INFINITY.subtract(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=PLUS_X.subtract(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.subtract(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.subtract(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.subtract(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.subtract(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.subtract(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.subtract(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.subtract(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.subtract(Decimal64.NAN);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.util.Decimal64Test.testNegate",0,"@Test public void testNegate(){Decimal64 expected,actual;expected=MINUS_X;actual=PLUS_X.negate();Assert.assertEquals(expected,actual);expected=PLUS_X;actual=MINUS_X.negate();Assert.assertEquals(expected,actual);expected=MINUS_ZERO;actual=PLUS_ZERO.negate();Assert.assertEquals(expected,actual);expected=PLUS_ZERO;actual=MINUS_ZERO.negate();Assert.assertEquals(expected,actual);expected=Decimal64.POSITIVE_INFINITY;actual=Decimal64.NEGATIVE_INFINITY.negate();Assert.assertEquals(expected,actual);expected=Decimal64.NEGATIVE_INFINITY;actual=Decimal64.POSITIVE_INFINITY.negate();Assert.assertEquals(expected,actual);expected=Decimal64.NAN;actual=Decimal64.NAN.negate();Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.util.Decimal64Test.testMultiply",0,"@Test public void testMultiply(){Decimal64 expected,actual;expected=new Decimal64(X * Y);actual=PLUS_X.multiply(PLUS_Y);Assert.assertEquals(expected,actual);actual=PLUS_Y.multiply(PLUS_X);Assert.assertEquals(expected,actual);expected=new Decimal64(X * (-Y));actual=PLUS_X.multiply(MINUS_Y);Assert.assertEquals(expected,actual);actual=MINUS_Y.multiply(PLUS_X);Assert.assertEquals(expected,actual);expected=new Decimal64((-X)* (-Y));actual=MINUS_X.multiply(MINUS_Y);Assert.assertEquals(expected,actual);actual=MINUS_Y.multiply(MINUS_X);Assert.assertEquals(expected,actual);expected=Decimal64.POSITIVE_INFINITY;actual=PLUS_X.multiply(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.multiply(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.multiply(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.multiply(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.multiply(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);expected=Decimal64.NEGATIVE_INFINITY;actual=PLUS_X.multiply(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.multiply(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.multiply(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.multiply(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);expected=Decimal64.NAN;actual=PLUS_X.multiply(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.multiply(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.multiply(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.multiply(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.multiply(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.multiply(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.multiply(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.multiply(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.multiply(Decimal64.NAN);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.util.Decimal64Test.testDivide",0,"@Test public void testDivide(){Decimal64 expected,actual;expected=new Decimal64(X / Y);actual=PLUS_X.divide(PLUS_Y);Assert.assertEquals(expected,actual);expected=new Decimal64(X / (-Y));actual=PLUS_X.divide(MINUS_Y);Assert.assertEquals(expected,actual);expected=new Decimal64((-X)/ Y);actual=MINUS_X.divide(PLUS_Y);Assert.assertEquals(expected,actual);expected=new Decimal64((-X)/ (-Y));actual=MINUS_X.divide(MINUS_Y);Assert.assertEquals(expected,actual);expected=PLUS_ZERO;actual=PLUS_X.divide(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=MINUS_X.divide(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);expected=MINUS_ZERO;actual=MINUS_X.divide(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=PLUS_X.divide(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);expected=Decimal64.POSITIVE_INFINITY;actual=Decimal64.POSITIVE_INFINITY.divide(PLUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.divide(MINUS_X);Assert.assertEquals(expected,actual);actual=PLUS_X.divide(PLUS_ZERO);Assert.assertEquals(expected,actual);actual=MINUS_X.divide(MINUS_ZERO);Assert.assertEquals(expected,actual);expected=Decimal64.NEGATIVE_INFINITY;actual=Decimal64.POSITIVE_INFINITY.divide(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.divide(PLUS_X);Assert.assertEquals(expected,actual);actual=PLUS_X.divide(MINUS_ZERO);Assert.assertEquals(expected,actual);actual=MINUS_X.divide(PLUS_ZERO);Assert.assertEquals(expected,actual);expected=Decimal64.NAN;actual=Decimal64.POSITIVE_INFINITY.divide(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.divide(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.divide(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=PLUS_X.divide(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.divide(PLUS_X);Assert.assertEquals(expected,actual);actual=MINUS_X.divide(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.divide(MINUS_X);Assert.assertEquals(expected,actual);actual=Decimal64.POSITIVE_INFINITY.divide(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.divide(Decimal64.POSITIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NEGATIVE_INFINITY.divide(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.divide(Decimal64.NEGATIVE_INFINITY);Assert.assertEquals(expected,actual);actual=Decimal64.NAN.divide(Decimal64.NAN);Assert.assertEquals(expected,actual);actual=PLUS_ZERO.divide(PLUS_ZERO);Assert.assertEquals(expected,actual);actual=PLUS_ZERO.divide(MINUS_ZERO);Assert.assertEquals(expected,actual);actual=MINUS_ZERO.divide(PLUS_ZERO);Assert.assertEquals(expected,actual);actual=MINUS_ZERO.divide(MINUS_ZERO);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.util.Decimal64Test.testReciprocal",0,"@Test public void testReciprocal(){Decimal64 expected,actual;expected=new Decimal64(1.0 / X);actual=PLUS_X.reciprocal();Assert.assertEquals(expected,actual);expected=new Decimal64(1.0 / (-X));actual=MINUS_X.reciprocal();Assert.assertEquals(expected,actual);expected=PLUS_ZERO;actual=Decimal64.POSITIVE_INFINITY.reciprocal();Assert.assertEquals(expected,actual);expected=MINUS_ZERO;actual=Decimal64.NEGATIVE_INFINITY.reciprocal();Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.util.Decimal64Test.testIsInfinite",0,"@Test public void testIsInfinite(){Assert.assertFalse(MINUS_X.isInfinite());Assert.assertFalse(PLUS_X.isInfinite());Assert.assertFalse(MINUS_Y.isInfinite());Assert.assertFalse(PLUS_Y.isInfinite());Assert.assertFalse(Decimal64.NAN.isInfinite());Assert.assertTrue(Decimal64.NEGATIVE_INFINITY.isInfinite());Assert.assertTrue(Decimal64.POSITIVE_INFINITY.isInfinite());}"
"org.apache.commons.math3.util.Decimal64Test.testIsNaN",0,"@Test public void testIsNaN(){Assert.assertFalse(MINUS_X.isNaN());Assert.assertFalse(PLUS_X.isNaN());Assert.assertFalse(MINUS_Y.isNaN());Assert.assertFalse(PLUS_Y.isNaN());Assert.assertFalse(Decimal64.NEGATIVE_INFINITY.isNaN());Assert.assertFalse(Decimal64.POSITIVE_INFINITY.isNaN());Assert.assertTrue(Decimal64.NAN.isNaN());}"
"org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest.testInsert",0,"@Test public void testInsert(){int[]array={16,13,15,14,2,0,12,9,8,5,11,18,19,17,4,7,1,3,6,10};AVLTree<Integer> tree=buildTree(array);Assert.assertEquals(array.length,tree.size());for (int i=0;i < array.length;++i){Assert.assertEquals(array[i],value(tree.getNotSmaller(new Integer(array[i]))));}checkOrder(tree);}"
"org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest.testDelete1",0,"@Test public void testDelete1(){int[][][]arrays={{{16,13,15,14,2,0,12,9,8,5,11,18,19,17,4,7,1,3,6,10},{11,10,9,12,16,15,13,18,5,0,3,2,14,6,19,17,8,4,7,1}},{{16,13,15,14,2,0,12,9,8,5,11,18,19,17,4,7,1,3,6,10},{0,17,14,15,16,18,6}},{{6,2,7,8,1,4,3,5},{8}},{{6,2,7,8,1,4,5},{8}},{{3,7,2,1,5,8,4},{1}},{{3,7,2,1,5,8,6},{1}}};for (int i=0;i < arrays.length;++i){AVLTree<Integer> tree=buildTree(arrays[i][0]);Assert.assertTrue(!tree.delete(new Integer(-2000)));for (int j=0;j < arrays[i][1].length;++j){Assert.assertTrue(tree.delete(tree.getNotSmaller(new Integer(arrays[i][1][j])).getElement()));Assert.assertEquals(arrays[i][0].length - j - 1,tree.size());}}}"
"org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest.testNavigation",0,"@Test public void testNavigation(){int[]array={1,2,3,4,5,6,7,8,9,10};AVLTree<Integer> tree=buildTree(array);AVLTree<Integer>.Node node=tree.getSmallest();Assert.assertEquals(array[0],value(node));for (int i=0;i < array.length;++i){Assert.assertEquals(array[i],value(node));node=node.getNext();}Assert.assertNull(node);node=tree.getLargest();Assert.assertEquals(array[array.length - 1],value(node));for (int i=array.length - 1;i >= 0;--i){Assert.assertEquals(array[i],value(node));node=node.getPrevious();}Assert.assertNull(node);checkOrder(tree);}"
"org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest.testSearch",0,"@Test public void testSearch(){int[]array={2,4,6,8,10,12,14};AVLTree<Integer> tree=buildTree(array);Assert.assertNull(tree.getNotLarger(new Integer(array[0]- 1)));Assert.assertNull(tree.getNotSmaller(new Integer(array[array.length - 1]+ 1)));for (int i=0;i < array.length;++i){Assert.assertEquals(array[i],value(tree.getNotSmaller(new Integer(array[i]- 1))));Assert.assertEquals(array[i],value(tree.getNotLarger(new Integer(array[i]+ 1))));}checkOrder(tree);}"
"org.apache.commons.math3.geometry.partitioning.utilities.AVLTreeTest.testRepetition",0,"@Test public void testRepetition(){int[]array={1,1,3,3,4,5,6,7,7,7,7,7};AVLTree<Integer> tree=buildTree(array);Assert.assertEquals(array.length,tree.size());AVLTree<Integer>.Node node=tree.getNotSmaller(new Integer(3));Assert.assertEquals(3,value(node));Assert.assertEquals(1,value(node.getPrevious()));Assert.assertEquals(3,value(node.getNext()));Assert.assertEquals(4,value(node.getNext().getNext()));node=tree.getNotLarger(new Integer(2));Assert.assertEquals(1,value(node));Assert.assertEquals(1,value(node.getPrevious()));Assert.assertEquals(3,value(node.getNext()));Assert.assertNull(node.getPrevious().getPrevious());AVLTree<Integer>.Node otherNode=tree.getNotSmaller(new Integer(1));Assert.assertTrue(node != otherNode);Assert.assertEquals(1,value(otherNode));Assert.assertNull(otherNode.getPrevious());node=tree.getNotLarger(new Integer(10));Assert.assertEquals(7,value(node));Assert.assertNull(node.getNext());node=node.getPrevious();Assert.assertEquals(7,value(node));node=node.getPrevious();Assert.assertEquals(7,value(node));node=node.getPrevious();Assert.assertEquals(7,value(node));node=node.getPrevious();Assert.assertEquals(7,value(node));node=node.getPrevious();Assert.assertEquals(6,value(node));checkOrder(tree);}"
"org.apache.commons.math3.optim.PointVectorValuePairTest.testSerial",0,"@Test public void testSerial(){PointVectorValuePair pv1=new PointVectorValuePair(new double[]{1.0,2.0,3.0},new double[]{4.0,5.0});PointVectorValuePair pv2=(PointVectorValuePair)TestUtils.serializeAndRecover(pv1);Assert.assertEquals(pv1.getKey().length,pv2.getKey().length);for (int i=0;i < pv1.getKey().length;++i){Assert.assertEquals(pv1.getKey()[i],pv2.getKey()[i],1.0e-15);}Assert.assertEquals(pv1.getValue().length,pv2.getValue().length);for (int i=0;i < pv1.getValue().length;++i){Assert.assertEquals(pv1.getValue()[i],pv2.getValue()[i],1.0e-15);}}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaNanPositive",0,"@Test public void testRegularizedGammaNanPositive(){testRegularizedGamma(Double.NaN,Double.NaN,1.0);}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaPositiveNan",0,"@Test public void testRegularizedGammaPositiveNan(){testRegularizedGamma(Double.NaN,1.0,Double.NaN);}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaNegativePositive",0,"@Test public void testRegularizedGammaNegativePositive(){testRegularizedGamma(Double.NaN,-1.5,1.0);}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaPositiveNegative",0,"@Test public void testRegularizedGammaPositiveNegative(){testRegularizedGamma(Double.NaN,1.0,-1.0);}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaZeroPositive",0,"@Test public void testRegularizedGammaZeroPositive(){testRegularizedGamma(Double.NaN,0.0,1.0);}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaPositiveZero",0,"@Test public void testRegularizedGammaPositiveZero(){testRegularizedGamma(0.0,1.0,0.0);}"
"org.apache.commons.math3.special.GammaTest.testRegularizedGammaPositivePositive",0,"@Test public void testRegularizedGammaPositivePositive(){testRegularizedGamma(0.632120558828558,1.0,1.0);}"
"org.apache.commons.math3.special.GammaTest.testLogGammaNan",0,"@Test public void testLogGammaNan(){testLogGamma(Double.NaN,Double.NaN);}"
"org.apache.commons.math3.special.GammaTest.testLogGammaNegative",0,"@Test public void testLogGammaNegative(){testLogGamma(Double.NaN,-1.0);}"
"org.apache.commons.math3.special.GammaTest.testLogGammaZero",0,"@Test public void testLogGammaZero(){testLogGamma(Double.NaN,0.0);}"
"org.apache.commons.math3.special.GammaTest.testLogGammaPositive",0,"@Test public void testLogGammaPositive(){testLogGamma(0.6931471805599457,3.0);}"
"org.apache.commons.math3.special.GammaTest.testDigammaLargeArgs",0,"@Test public void testDigammaLargeArgs(){double eps=1e-8;Assert.assertEquals(4.6001618527380874002,Gamma.digamma(100),eps);Assert.assertEquals(3.9019896734278921970,Gamma.digamma(50),eps);Assert.assertEquals(2.9705239922421490509,Gamma.digamma(20),eps);Assert.assertEquals(2.9958363947076465821,Gamma.digamma(20.5),eps);Assert.assertEquals(2.2622143570941481605,Gamma.digamma(10.1),eps);Assert.assertEquals(2.1168588189004379233,Gamma.digamma(8.8),eps);Assert.assertEquals(1.8727843350984671394,Gamma.digamma(7),eps);Assert.assertEquals(0.42278433509846713939,Gamma.digamma(2),eps);Assert.assertEquals(-100.56088545786867450,Gamma.digamma(0.01),eps);Assert.assertEquals(-4.0390398965921882955,Gamma.digamma(-0.8),eps);Assert.assertEquals(4.2003210041401844726,Gamma.digamma(-6.3),eps);}"
"org.apache.commons.math3.special.GammaTest.testDigammaSmallArgs",0,"@Test public void testDigammaSmallArgs(){double[]expected={-10.423754940411076795,-100.56088545786867450,-1000.5755719318103005,-10000.577051183514335,-100000.57719921568107,-1.0000005772140199687e6,-1.0000000577215500408e7,-1.0000000057721564845e8,-1.0000000005772156633e9,-1.0000000000577215665e10,-1.0000000000057721566e11,-1.0000000000005772157e12,-1.0000000000000577216e13,-1.0000000000000057722e14,-1.0000000000000005772e15,-1e+16,-1e+17,-1e+18,-1e+19,-1e+20,-1e+21,-1e+22,-1e+23,-1e+24,-1e+25,-1e+26,-1e+27,-1e+28,-1e+29,-1e+30};for (double n=1;n < 30;n++){checkRelativeError(String.format(""Test %.0f: "",n),expected[(int)(n - 1)],Gamma.digamma(FastMath.pow(10.0,-n)),1e-8);}}"
"org.apache.commons.math3.special.GammaTest.testTrigamma",0,"@Test public void testTrigamma(){double eps=1e-8;double[]data={1e-4,1.0000000164469368793e8,1e-3,1.0000016425331958690e6,1e-2,10001.621213528313220,1e-1,101.43329915079275882,1,1.6449340668482264365,2,0.64493406684822643647,3,0.39493406684822643647,4,0.28382295573711532536,5,0.22132295573711532536,10,0.10516633568168574612,20,0.051270822935203119832,50,0.020201333226697125806,100,0.010050166663333571395};for (int i=data.length - 2;i >= 0;i-=2){Assert.assertEquals(String.format(""trigamma %.0f"",data[i]),data[i + 1],Gamma.trigamma(data[i]),eps);}}"
"org.apache.commons.math3.special.GammaTest.testLogGamma",0,"@Test public void testLogGamma(){final int ulps=3;for (int i=0;i < LOG_GAMMA_REF.length;i++){final double[]data=LOG_GAMMA_REF[i];final double x=data[0];final double expected=data[1];final double actual=Gamma.logGamma(x);final double tol;if (expected == 0.0){tol=1E-15;}else {tol=ulps * FastMath.ulp(expected);}Assert.assertEquals(Double.toString(x),expected,actual,tol);}}"
"org.apache.commons.math3.special.GammaTest.testLogGammaPrecondition1",0,"@Test public void testLogGammaPrecondition1(){Assert.assertTrue(Double.isNaN(Gamma.logGamma(0.0)));}"
"org.apache.commons.math3.special.GammaTest.testLogGammaPrecondition2",0,"@Test public void testLogGammaPrecondition2(){Assert.assertTrue(Double.isNaN(Gamma.logGamma(-1.0)));}"
"org.apache.commons.math3.special.GammaTest.testInvGamma1pm1",0,"@Test public void testInvGamma1pm1(){final int ulps=3;for (int i=0;i < INV_GAMMA1P_M1_REF.length;i++){final double[]ref=INV_GAMMA1P_M1_REF[i];final double x=ref[0];final double expected=ref[1];final double actual=Gamma.invGamma1pm1(x);final double tol=ulps * FastMath.ulp(expected);Assert.assertEquals(Double.toString(x),expected,actual,tol);}}"
"org.apache.commons.math3.special.GammaTest.testInvGamma1pm1Precondition1",0,"@Test(expected=NumberIsTooSmallException.class)public void testInvGamma1pm1Precondition1(){Gamma.invGamma1pm1(-0.51);}"
"org.apache.commons.math3.special.GammaTest.testInvGamma1pm1Precondition2",0,"@Test(expected=NumberIsTooLargeException.class)public void testInvGamma1pm1Precondition2(){Gamma.invGamma1pm1(1.51);}"
"org.apache.commons.math3.special.GammaTest.testLogGamma1p",0,"@Test public void testLogGamma1p(){final int ulps=3;for (int i=0;i < LOG_GAMMA1P_REF.length;i++){final double[]ref=LOG_GAMMA1P_REF[i];final double x=ref[0];final double expected=ref[1];final double actual=Gamma.logGamma1p(x);final double tol=ulps * FastMath.ulp(expected);Assert.assertEquals(Double.toString(x),expected,actual,tol);}}"
"org.apache.commons.math3.special.GammaTest.testLogGamma1pPrecondition1",0,"@Test(expected=NumberIsTooSmallException.class)public void testLogGamma1pPrecondition1(){Gamma.logGamma1p(-0.51);}"
"org.apache.commons.math3.special.GammaTest.testLogGamma1pPrecondition2",0,"@Test(expected=NumberIsTooLargeException.class)public void testLogGamma1pPrecondition2(){Gamma.logGamma1p(1.51);}"
"org.apache.commons.math3.special.GammaTest.testGamma",0,"@Test public void testGamma(){for (int i=0;i < GAMMA_REF.length;i++){final double[]ref=GAMMA_REF[i];final double x=ref[0];final double expected=ref[1];final double actual=Gamma.gamma(x);final double absX=FastMath.abs(x);final int ulps;if (absX <= 8.0){ulps=3;}else     if (absX <= 20.0){ulps=5;}else     if (absX <= 30.0){ulps=50;}else     if (absX <= 50.0){ulps=180;}else {ulps=500;}final double tol=ulps * FastMath.ulp(expected);Assert.assertEquals(Double.toString(x),expected,actual,tol);}}"
"org.apache.commons.math3.special.GammaTest.testGammaNegativeInteger",0,"@Test public void testGammaNegativeInteger(){for (int i=-100;i <= 0;i++){Assert.assertTrue(Integer.toString(i),Double.isNaN(Gamma.gamma(i)));}}"
"org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testLinearFunction",0,"/** * Test of solver for the linear function.*/@Test public void testLinearFunction(){double min,max,expected,result,tolerance;double coefficients[]={-1.0,4.0};PolynomialFunction f=new PolynomialFunction(coefficients);LaguerreSolver solver=new LaguerreSolver();min=0.0;max=1.0;expected=0.25;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuadraticFunction",0,"/** * Test of solver for the quadratic function.*/@Test public void testQuadraticFunction(){double min,max,expected,result,tolerance;double coefficients[]={-3.0,5.0,2.0};PolynomialFunction f=new PolynomialFunction(coefficients);LaguerreSolver solver=new LaguerreSolver();min=0.0;max=2.0;expected=0.5;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-4.0;max=-1.0;expected=-3.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/@Test public void testQuinticFunction(){double min,max,expected,result,tolerance;double coefficients[]={-12.0,-1.0,1.0,-12.0,-1.0,1.0};PolynomialFunction f=new PolynomialFunction(coefficients);LaguerreSolver solver=new LaguerreSolver();min=-2.0;max=2.0;expected=-1.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-5.0;max=-2.5;expected=-3.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=3.0;max=6.0;expected=4.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testQuinticFunction2",0,"/** * Test of solver for the quintic function using {@link LaguerreSolver#solveAllComplex(double[],double)solveAllComplex}.*/@Test public void testQuinticFunction2(){final double[]coefficients={4.0,0.0,1.0,4.0,0.0,1.0};final LaguerreSolver solver=new LaguerreSolver();final Complex[]result=solver.solveAllComplex(coefficients,0);for(Complex expected : new Complex[]{new Complex(0,-2),new Complex(0,2),new Complex(0.5,0.5 * FastMath.sqrt(3)),new Complex(-1,0),new Complex(0.5,-0.5 * FastMath.sqrt(3.0))}){final double tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected.abs()* solver.getRelativeAccuracy()));TestUtils.assertContains(result,expected,tolerance);}}"
"org.apache.commons.math3.analysis.solvers.LaguerreSolverTest.testParameters",0,"/** * Test of parameters for the solver.*/@Test public void testParameters(){double coefficients[]={-3.0,5.0,2.0};PolynomialFunction f=new PolynomialFunction(coefficients);LaguerreSolver solver=new LaguerreSolver();try {solver.solve(100,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {solver.solve(100,f,2,3);Assert.fail(""Expecting NoBracketingException - no bracketing"");}catch(NoBracketingException ex){}}"
"org.apache.commons.math3.exception.TooManyEvaluationsExceptionTest.testMessage",0,"@Test public void testMessage(){final int max=12345;final TooManyEvaluationsException e=new TooManyEvaluationsException(max);final String msg=e.getLocalizedMessage();Assert.assertTrue(msg,msg.matches("".*?"" + MessageFormat.format(""{0}"",max)+ "".*""));}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{0});Assert.assertEquals(1.5,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(0.0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testColumnsPermutation",0,"@Test public void testColumnsPermutation(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,-1.0},{0.0,2.0},{1.0,-2.0}},new double[]{4.0,6.0,1.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{0,0});Assert.assertEquals(7.0,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(3.0,optimum.getPoint()[1],1.0e-10);Assert.assertEquals(0.0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testNoDependency",0,"@Test public void testNoDependency(){LinearProblem problem=new LinearProblem(new double[][]{{2,0,0,0,0,0},{0,2,0,0,0,0},{0,0,2,0,0,0},{0,0,0,2,0,0},{0,0,0,0,2,0},{0,0,0,0,0,2}},new double[]{0.0,1.1,2.2,3.3,4.4,5.5});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{0,0,0,0,0,0});for (int i=0;i < problem.target.length;++i){Assert.assertEquals(0.55 * i,optimum.getPoint()[i],1.0e-10);}}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testOneSet",0,"@Test public void testOneSet(){LinearProblem problem=new LinearProblem(new double[][]{{1,0,0},{-1,1,0},{0,-1,1}},new double[]{1,1,1});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{0,0,0});Assert.assertEquals(1.0,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(2.0,optimum.getPoint()[1],1.0e-10);Assert.assertEquals(3.0,optimum.getPoint()[2],1.0e-10);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testTwoSets",0,"@Test public void testTwoSets(){final double epsilon=1.0e-7;LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});final Preconditioner preconditioner=new Preconditioner(){public double[]precondition(double[]point,double[]r){double[]d=r.clone();d[0]/=72.0;d[1]/=30.0;d[2]/=314.0;d[3]/=260.0;d[4]/=2 * (1 + epsilon * epsilon);d[5]/=4.0;return d;}};NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-13,1e-13),new BrentSolver(),preconditioner);PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{0,0,0,0,0,0});Assert.assertEquals(3.0,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(4.0,optimum.getPoint()[1],1.0e-10);Assert.assertEquals(-1.0,optimum.getPoint()[2],1.0e-10);Assert.assertEquals(-2.0,optimum.getPoint()[3],1.0e-10);Assert.assertEquals(1.0 + epsilon,optimum.getPoint()[4],1.0e-10);Assert.assertEquals(1.0 - epsilon,optimum.getPoint()[5],1.0e-10);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testNonInversible",0,"@Test public void testNonInversible(){LinearProblem problem=new LinearProblem(new double[][]{{1,2,-3},{2,1,3},{-3,0,-9}},new double[]{1,1,1});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{0,0,0});Assert.assertTrue(optimum.getValue()> 0.5);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testIllConditioned",0,"@Test public void testIllConditioned(){LinearProblem problem1=new LinearProblem(new double[][]{{10.0,7.0,8.0,7.0},{7.0,5.0,6.0,5.0},{8.0,6.0,10.0,9.0},{7.0,5.0,9.0,10.0}},new double[]{32,23,33,31});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-13,1e-13),new BrentSolver(1e-15,1e-15));PointValuePair optimum1=optimizer.optimize(200,problem1,GoalType.MINIMIZE,new double[]{0,1,2,3});Assert.assertEquals(1.0,optimum1.getPoint()[0],1.0e-4);Assert.assertEquals(1.0,optimum1.getPoint()[1],1.0e-4);Assert.assertEquals(1.0,optimum1.getPoint()[2],1.0e-4);Assert.assertEquals(1.0,optimum1.getPoint()[3],1.0e-4);LinearProblem problem2=new LinearProblem(new double[][]{{10.00,7.00,8.10,7.20},{7.08,5.04,6.00,5.00},{8.00,5.98,9.89,9.00},{6.99,4.99,9.00,9.98}},new double[]{32,23,33,31});PointValuePair optimum2=optimizer.optimize(200,problem2,GoalType.MINIMIZE,new double[]{0,1,2,3});Assert.assertEquals(-81.0,optimum2.getPoint()[0],1.0e-1);Assert.assertEquals(137.0,optimum2.getPoint()[1],1.0e-1);Assert.assertEquals(-34.0,optimum2.getPoint()[2],1.0e-1);Assert.assertEquals(22.0,optimum2.getPoint()[3],1.0e-1);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testMoreEstimatedParametersSimple",0,"@Test public void testMoreEstimatedParametersSimple(){LinearProblem problem=new LinearProblem(new double[][]{{3.0,2.0,0.0,0.0},{0.0,1.0,-1.0,1.0},{2.0,0.0,1.0,0.0}},new double[]{7.0,3.0,5.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{7,6,5,4});Assert.assertEquals(0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testMoreEstimatedParametersUnsorted",0,"@Test public void testMoreEstimatedParametersUnsorted(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,1.0,0.0,0.0,0.0,0.0},{0.0,0.0,1.0,1.0,1.0,0.0},{0.0,0.0,0.0,0.0,1.0,-1.0},{0.0,0.0,-1.0,1.0,0.0,1.0},{0.0,0.0,0.0,-1.0,1.0,0.0}},new double[]{3.0,12.0,-1.0,7.0,1.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{2,2,2,2,2,2});Assert.assertEquals(0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testRedundantEquations",0,"@Test public void testRedundantEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,1.0},{1.0,-1.0},{1.0,3.0}},new double[]{3.0,1.0,5.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{1,1});Assert.assertEquals(2.0,optimum.getPoint()[0],1.0e-8);Assert.assertEquals(1.0,optimum.getPoint()[1],1.0e-8);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testInconsistentEquations",0,"@Test public void testInconsistentEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,1.0},{1.0,-1.0},{1.0,3.0}},new double[]{3.0,1.0,4.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(100,problem,GoalType.MINIMIZE,new double[]{1,1});Assert.assertTrue(optimum.getValue()> 0.1);}"
"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleScalar circle=new CircleScalar();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1e-30,1e-30),new BrentSolver(1e-15,1e-13));PointValuePair optimum=optimizer.optimize(100,circle,GoalType.MINIMIZE,new double[]{98.680,47.345});Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertEquals(69.960161753,circle.getRadius(center),1.0e-8);Assert.assertEquals(96.075902096,center.getX(),1.0e-8);Assert.assertEquals(48.135167894,center.getY(),1.0e-8);}"
"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.testDerivativesConsistency",0,"@Test public void testDerivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;MidpointIntegrator integ=new MidpointIntegrator(step);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.MidpointStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;MidpointIntegrator integ=new MidpointIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 135000);Assert.assertTrue(bos.size()< 145000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 1.0e-6);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testInsufficientData",0,"@Test public void testInsufficientData(){double[]nothing=null;SemiVariance sv=new SemiVariance();try {sv.evaluate(nothing);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException iae){}try {sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);sv.evaluate(nothing);Assert.fail(""null is not a valid data array."");}catch(MathIllegalArgumentException iae){}nothing=new double[]{};Assert.assertTrue(Double.isNaN(sv.evaluate(nothing)));}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testSingleDown",0,"@Test public void testSingleDown(){SemiVariance sv=new SemiVariance();double[]values={50.0d};double singletest=sv.evaluate(values);Assert.assertEquals(0.0d,singletest,0);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testSingleUp",0,"@Test public void testSingleUp(){SemiVariance sv=new SemiVariance(SemiVariance.UPSIDE_VARIANCE);double[]values={50.0d};double singletest=sv.evaluate(values);Assert.assertEquals(0.0d,singletest,0);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testSample",0,"@Test public void testSample(){final double[]values={-2.0d,2.0d,4.0d,-2.0d,22.0d,11.0d,3.0d,14.0d,5.0d};final int length=values.length;final double mean=StatUtils.mean(values);final SemiVariance sv=new SemiVariance();final double downsideSemiVariance=sv.evaluate(values);Assert.assertEquals(TestUtils.sumSquareDev(new double[]{-2d,2d,4d,-2d,3d,5d},mean)/ (length - 1),downsideSemiVariance,1E-14);sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);final double upsideSemiVariance=sv.evaluate(values);Assert.assertEquals(TestUtils.sumSquareDev(new double[]{22d,11d,14d},mean)/ (length - 1),upsideSemiVariance,1E-14);Assert.assertEquals(StatUtils.variance(values),downsideSemiVariance + upsideSemiVariance,10e-12);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testPopulation",0,"@Test public void testPopulation(){double[]values={-2.0d,2.0d,4.0d,-2.0d,22.0d,11.0d,3.0d,14.0d,5.0d};SemiVariance sv=new SemiVariance(false);double singletest=sv.evaluate(values);Assert.assertEquals(19.556d,singletest,0.01d);sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);singletest=sv.evaluate(values);Assert.assertEquals(36.222d,singletest,0.01d);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testNonMeanCutoffs",0,"@Test public void testNonMeanCutoffs(){double[]values={-2.0d,2.0d,4.0d,-2.0d,22.0d,11.0d,3.0d,14.0d,5.0d};SemiVariance sv=new SemiVariance(false);double singletest=sv.evaluate(values,1.0d,SemiVariance.DOWNSIDE_VARIANCE,false,0,values.length);Assert.assertEquals(TestUtils.sumSquareDev(new double[]{-2d,-2d},1.0d)/ values.length,singletest,0.01d);singletest=sv.evaluate(values,3.0d,SemiVariance.UPSIDE_VARIANCE,false,0,values.length);Assert.assertEquals(TestUtils.sumSquareDev(new double[]{4d,22d,11d,14d,5d},3.0d)/ values.length,singletest,0.01d);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testVarianceDecompMeanCutoff",0,"/** * Check that the lower + upper semivariance against the mean sum to the variance.*/@Test public void testVarianceDecompMeanCutoff(){double[]values={-2.0d,2.0d,4.0d,-2.0d,22.0d,11.0d,3.0d,14.0d,5.0d};double variance=StatUtils.variance(values);SemiVariance sv=new SemiVariance(true);sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE);final double lower=sv.evaluate(values);sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);final double upper=sv.evaluate(values);Assert.assertEquals(variance,lower + upper,10e-12);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testVarianceDecompNonMeanCutoff",0,"/** * Check that upper and lower semivariances against a cutoff sum to the sum of squared deviations of the full set of values against the cutoff divided by df = length - 1 (assuming bias-corrected).*/@Test public void testVarianceDecompNonMeanCutoff(){double[]values={-2.0d,2.0d,4.0d,-2.0d,22.0d,11.0d,3.0d,14.0d,5.0d};double target=0;double totalSumOfSquares=TestUtils.sumSquareDev(values,target);SemiVariance sv=new SemiVariance(true);sv.setVarianceDirection(SemiVariance.DOWNSIDE_VARIANCE);double lower=sv.evaluate(values,target);sv.setVarianceDirection(SemiVariance.UPSIDE_VARIANCE);double upper=sv.evaluate(values,target);Assert.assertEquals(totalSumOfSquares / (values.length - 1),lower + upper,10e-12);}"
"org.apache.commons.math3.stat.descriptive.moment.SemiVarianceTest.testNoVariance",0,"@Test public void testNoVariance(){final double[]values={100d,100d,100d,100d};SemiVariance sv=new SemiVariance();Assert.assertEquals(0,sv.evaluate(values),10E-12);Assert.assertEquals(0,sv.evaluate(values,100d),10E-12);Assert.assertEquals(0,sv.evaluate(values,100d,SemiVariance.UPSIDE_VARIANCE,false,0,values.length),10E-12);}"
"org.apache.commons.math3.genetics.GeneticAlgorithmTestBinary.test",0,"@Test public void test(){GeneticAlgorithm ga=new GeneticAlgorithm(new OnePointCrossover<Integer>(),CROSSOVER_RATE,new BinaryMutation(),MUTATION_RATE,new TournamentSelection(TOURNAMENT_ARITY));Assert.assertEquals(0,ga.getGenerationsEvolved());Population initial=randomPopulation();StoppingCondition stopCond=new FixedGenerationCount(NUM_GENERATIONS);Chromosome bestInitial=initial.getFittestChromosome();Population finalPopulation=ga.evolve(initial,stopCond);Chromosome bestFinal=finalPopulation.getFittestChromosome();Assert.assertTrue(bestFinal.compareTo(bestInitial)> 0);Assert.assertEquals(NUM_GENERATIONS,ga.getGenerationsEvolved());}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackLinearFullRank",0,"@Test public void testMinpackLinearFullRank(){minpackTest(new LinearFullRankFunction(10,5,1.0,5.0,2.23606797749979),false);minpackTest(new LinearFullRankFunction(50,5,1.0,8.06225774829855,6.70820393249937),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackLinearRank1",0,"@Test public void testMinpackLinearRank1(){minpackTest(new LinearRank1Function(10,5,1.0,291.521868819476,1.4638501094228),false);minpackTest(new LinearRank1Function(50,5,1.0,3101.60039334535,3.48263016573496),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackLinearRank1ZeroColsAndRows",0,"@Test public void testMinpackLinearRank1ZeroColsAndRows(){minpackTest(new LinearRank1ZeroColsAndRowsFunction(10,5,1.0),false);minpackTest(new LinearRank1ZeroColsAndRowsFunction(50,5,1.0),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackRosenbrok",0,"@Test public void testMinpackRosenbrok(){minpackTest(new RosenbrockFunction(new double[]{-1.2,1.0},FastMath.sqrt(24.2)),false);minpackTest(new RosenbrockFunction(new double[]{-12.0,10.0},FastMath.sqrt(1795769.0)),false);minpackTest(new RosenbrockFunction(new double[]{-120.0,100.0},11.0 * FastMath.sqrt(169000121.0)),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackHelicalValley",0,"@Test public void testMinpackHelicalValley(){minpackTest(new HelicalValleyFunction(new double[]{-1.0,0.0,0.0},50.0),false);minpackTest(new HelicalValleyFunction(new double[]{-10.0,0.0,0.0},102.95630140987),false);minpackTest(new HelicalValleyFunction(new double[]{-100.0,0.0,0.0},991.261822123701),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackPowellSingular",0,"@Test public void testMinpackPowellSingular(){minpackTest(new PowellSingularFunction(new double[]{3.0,-1.0,0.0,1.0},14.6628782986152),false);minpackTest(new PowellSingularFunction(new double[]{30.0,-10.0,0.0,10.0},1270.9838708654),false);minpackTest(new PowellSingularFunction(new double[]{300.0,-100.0,0.0,100.0},126887.903284750),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackFreudensteinRoth",0,"@Test public void testMinpackFreudensteinRoth(){minpackTest(new FreudensteinRothFunction(new double[]{0.5,-2.0},20.0124960961895,6.99887517584575,new double[]{11.4124844654993,-0.896827913731509}),false);minpackTest(new FreudensteinRothFunction(new double[]{5.0,-20.0},12432.833948863,6.9988751744895,new double[]{11.41300466147456,-0.896796038685959}),false);minpackTest(new FreudensteinRothFunction(new double[]{50.0,-200.0},11426454.595762,6.99887517242903,new double[]{11.412781785788564,-0.8968051074920405}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackBard",0,"@Test public void testMinpackBard(){minpackTest(new BardFunction(1.0,6.45613629515967,0.0906359603390466,new double[]{0.0824105765758334,1.1330366534715,2.34369463894115}),false);minpackTest(new BardFunction(10.0,36.1418531596785,4.17476870138539,new double[]{0.840666673818329,-158848033.259565,-164378671.653535}),false);minpackTest(new BardFunction(100.0,384.114678637399,4.17476870135969,new double[]{0.840666673867645,-158946167.205518,-164464906.857771}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackKowalikOsborne",0,"@Test public void testMinpackKowalikOsborne(){minpackTest(new KowalikOsborneFunction(new double[]{0.25,0.39,0.415,0.39},0.0728915102882945,0.017535837721129,new double[]{0.192807810476249,0.191262653354071,0.123052801046931,0.136053221150517}),false);minpackTest(new KowalikOsborneFunction(new double[]{2.5,3.9,4.15,3.9},2.97937007555202,0.032052192917937,new double[]{728675.473768287,-14.0758803129393,-32977797.7841797,-20571594.1977912}),false);minpackTest(new KowalikOsborneFunction(new double[]{25.0,39.0,41.5,39.0},29.9590617016037,0.0175364017658228,new double[]{0.192948328597594,0.188053165007911,0.122430604321144,0.134575665392506}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackMeyer",0,"@Test public void testMinpackMeyer(){minpackTest(new MeyerFunction(new double[]{0.02,4000.0,250.0},41153.4665543031,9.37794514651874,new double[]{0.00560963647102661,6181.34634628659,345.223634624144}),false);minpackTest(new MeyerFunction(new double[]{0.2,40000.0,2500.0},4168216.89130846,792.917871779501,new double[]{1.42367074157994e-11,33695.7133432541,901.268527953801}),true);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackWatson",0,"@Test public void testMinpackWatson(){minpackTest(new WatsonFunction(6,0.0,5.47722557505166,0.0478295939097601,new double[]{-0.0157249615083782,1.01243488232965,-0.232991722387673,1.26043101102818,-1.51373031394421,0.99299727291842}),false);minpackTest(new WatsonFunction(6,10.0,6433.12578950026,0.0478295939096951,new double[]{-0.0157251901386677,1.01243485860105,-0.232991545843829,1.26042932089163,-1.51372776706575,0.99299573426328}),false);minpackTest(new WatsonFunction(6,100.0,674256.040605213,0.047829593911544,new double[]{-0.0157247019712586,1.01243490925658,-0.232991922761641,1.26043292929555,-1.51373320452707,0.99299901922322}),false);minpackTest(new WatsonFunction(9,0.0,5.47722557505166,0.00118311459212420,new double[]{-0.153070644166722e-4,0.999789703934597,0.0147639634910978,0.146342330145992,1.00082109454817,-2.61773112070507,4.10440313943354,-3.14361226236241,1.05262640378759}),false);minpackTest(new WatsonFunction(9,10.0,12088.127069307,0.00118311459212513,new double[]{-0.153071334849279e-4,0.999789703941234,0.0147639629786217,0.146342334818836,1.00082107321386,-2.61773107084722,4.10440307655564,-3.14361222178686,1.05262639322589}),false);minpackTest(new WatsonFunction(9,100.0,1269109.29043834,0.00118311459212384,new double[]{-0.153069523352176e-4,0.999789703958371,0.0147639625185392,0.146342341096326,1.00082104729164,-2.61773101573645,4.10440301427286,-3.14361218602503,1.05262638516774}),false);minpackTest(new WatsonFunction(12,0.0,5.47722557505166,0.217310402535861e-4,new double[]{-0.660266001396382e-8,1.00000164411833,-0.000563932146980154,0.347820540050756,-0.156731500244233,1.05281515825593,-3.24727109519451,7.2884347837505,-10.271848098614,9.07411353715783,-4.54137541918194,1.01201187975044}),false);minpackTest(new WatsonFunction(12,10.0,19220.7589790951,0.217310402518509e-4,new double[]{-0.663710223017410e-8,1.00000164411787,-0.000563932208347327,0.347820540486998,-0.156731503955652,1.05281517654573,-3.2472711515214,7.28843489430665,-10.2718482369638,9.07411364383733,-4.54137546533666,1.01201188830857}),false);minpackTest(new WatsonFunction(12,100.0,2018918.04462367,0.217310402539845e-4,new double[]{-0.663806046485249e-8,1.00000164411786,-0.000563932210324959,0.347820540503588,-0.156731504091375,1.05281517718031,-3.24727115337025,7.28843489775302,-10.2718482410813,9.07411364688464,-4.54137546660822,1.0120118885369}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackBox3Dimensional",0,"@Test public void testMinpackBox3Dimensional(){minpackTest(new Box3DimensionalFunction(10,new double[]{0.0,10.0,20.0},32.1115837449572),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackJennrichSampson",0,"@Test public void testMinpackJennrichSampson(){minpackTest(new JennrichSampsonFunction(10,new double[]{0.3,0.4},64.5856498144943,11.1517793413499,new double[]{0.2578199266368004,0.25782997676455244}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackBrownDennis",0,"@Test public void testMinpackBrownDennis(){minpackTest(new BrownDennisFunction(20,new double[]{25.0,5.0,-5.0,-1.0},2815.43839161816,292.954288244866,new double[]{-11.59125141003,13.2024883984741,-0.403574643314272,0.236736269844604}),false);minpackTest(new BrownDennisFunction(20,new double[]{250.0,50.0,-50.0,-10.0},555073.354173069,292.954270581415,new double[]{-11.5959274272203,13.2041866926242,-0.403417362841545,0.236771143410386}),false);minpackTest(new BrownDennisFunction(20,new double[]{2500.0,500.0,-500.0,-100.0},61211252.2338581,292.954306151134,new double[]{-11.5902596937374,13.2020628854665,-0.403688070279258,0.236665033746463}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackChebyquad",0,"@Test public void testMinpackChebyquad(){minpackTest(new ChebyquadFunction(1,8,1.0,1.88623796907732,1.88623796907732,new double[]{0.5}),false);minpackTest(new ChebyquadFunction(1,8,10.0,5383344372.34005,1.88424820499951,new double[]{0.9817314924684}),false);minpackTest(new ChebyquadFunction(1,8,100.0,0.118088726698392e19,1.88424820499347,new double[]{0.9817314852934}),false);minpackTest(new ChebyquadFunction(8,8,1.0,0.196513862833975,0.0593032355046727,new double[]{0.0431536648587336,0.193091637843267,0.266328593812698,0.499999334628884,0.500000665371116,0.733671406187302,0.806908362156733,0.956846335141266}),false);minpackTest(new ChebyquadFunction(9,9,1.0,0.16994993465202,0.0,new double[]{0.0442053461357828,0.199490672309881,0.23561910847106,0.416046907892598,0.5,0.583953092107402,0.764380891528940,0.800509327690119,0.955794653864217}),false);minpackTest(new ChebyquadFunction(10,10,1.0,0.183747831178711,0.0806471004038253,new double[]{0.0596202671753563,0.166708783805937,0.239171018813509,0.398885290346268,0.398883667870681,0.601116332129320,0.60111470965373,0.760828981186491,0.833291216194063,0.940379732824644}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackBrownAlmostLinear",0,"@Test public void testMinpackBrownAlmostLinear(){minpackTest(new BrownAlmostLinearFunction(10,0.5,16.5302162063499,0.0,new double[]{0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,0.979430303349862,1.20569696650138}),false);minpackTest(new BrownAlmostLinearFunction(10,5.0,9765624.00089211,0.0,new double[]{0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,0.979430303349865,1.20569696650135}),false);minpackTest(new BrownAlmostLinearFunction(10,50.0,0.9765625e17,0.0,new double[]{1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0}),false);minpackTest(new BrownAlmostLinearFunction(30,0.5,83.476044467848,0.0,new double[]{}),false);minpackTest(new BrownAlmostLinearFunction(40,0.5,128.026364472323,0.0,new double[]{}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackOsborne1",0,"@Test public void testMinpackOsborne1(){minpackTest(new Osborne1Function(new double[]{0.5,1.5,-1.0,0.01,0.02},0.937564021037838,0.00739249260904843,new double[]{0.375410049244025,1.93584654543108,-1.46468676748716,0.0128675339110439,0.0221227011813076}),false);}"
"org.apache.commons.math3.optimization.general.MinpackTest.testMinpackOsborne2",0,"@Test public void testMinpackOsborne2(){minpackTest(new Osborne2Function(new double[]{1.3,0.65,0.65,0.7,0.6,3.0,5.0,7.0,2.0,4.5,5.5},1.44686540984712,0.20034404483314,new double[]{1.30997663810096,0.43155248076,0.633661261602859,0.599428560991695,0.754179768272449,0.904300082378518,1.36579949521007,4.82373199748107,2.39868475104871,4.56887554791452,5.67534206273052}),false);}"
"org.apache.commons.math3.util.DefaultTransformerTest.testTransformDouble",0,"/** */@Test public void testTransformDouble()throws Exception {double expected=1.0;Double input=Double.valueOf(expected);DefaultTransformer t=new DefaultTransformer();Assert.assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math3.util.DefaultTransformerTest.testTransformNull",0,"/** */@Test public void testTransformNull()throws Exception {DefaultTransformer t=new DefaultTransformer();try {t.transform(null);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException e){}}"
"org.apache.commons.math3.util.DefaultTransformerTest.testTransformInteger",0,"/** */@Test public void testTransformInteger()throws Exception {double expected=1.0;Integer input=Integer.valueOf(1);DefaultTransformer t=new DefaultTransformer();Assert.assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math3.util.DefaultTransformerTest.testTransformBigDecimal",0,"/** */@Test public void testTransformBigDecimal()throws Exception {double expected=1.0;BigDecimal input=new BigDecimal(""1.0"");DefaultTransformer t=new DefaultTransformer();Assert.assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math3.util.DefaultTransformerTest.testTransformString",0,"/** */@Test public void testTransformString()throws Exception {double expected=1.0;String input=""1.0"";DefaultTransformer t=new DefaultTransformer();Assert.assertEquals(expected,t.transform(input),1.0e-4);}"
"org.apache.commons.math3.util.DefaultTransformerTest.testTransformObject",0,"/** */@Test(expected=MathIllegalArgumentException.class)public void testTransformObject(){Boolean input=Boolean.TRUE;DefaultTransformer t=new DefaultTransformer();t.transform(input);}"
"org.apache.commons.math3.util.DefaultTransformerTest.testSerial",0,"@Test public void testSerial(){Assert.assertEquals(new DefaultTransformer(),TestUtils.serializeAndRecover(new DefaultTransformer()));}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testSetterInjection",0,"@Test public void testSetterInjection(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);u.setMeanImpl(new StorelessUnivariateStatistic[]{new sumMean(),new sumMean()});u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});Assert.assertEquals(4,u.getMean()[0],1E-14);Assert.assertEquals(6,u.getMean()[1],1E-14);u.clear();u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});Assert.assertEquals(4,u.getMean()[0],1E-14);Assert.assertEquals(6,u.getMean()[1],1E-14);u.clear();u.setMeanImpl(new StorelessUnivariateStatistic[]{new Mean(),new Mean()});u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});Assert.assertEquals(2,u.getMean()[0],1E-14);Assert.assertEquals(3,u.getMean()[1],1E-14);Assert.assertEquals(2,u.getDimension());}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testSetterIllegalState",0,"@Test public void testSetterIllegalState(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});try {u.setMeanImpl(new StorelessUnivariateStatistic[]{new sumMean(),new sumMean()});Assert.fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testToString",0,"@Test public void testToString(){MultivariateSummaryStatistics stats=createMultivariateSummaryStatistics(2,true);stats.addValue(new double[]{1,3});stats.addValue(new double[]{2,2});stats.addValue(new double[]{3,1});Locale d=Locale.getDefault();Locale.setDefault(Locale.US);final String suffix=System.getProperty(""line.separator"");Assert.assertEquals(""MultivariateSummaryStatistics:"" + suffix + ""n: 3""+ suffix+ ""min: 1.0,1.0""+ suffix+ ""max: 3.0,3.0""+ suffix+ ""mean: 2.0,2.0""+ suffix+ ""geometric mean: 1.817...,1.817...""+ suffix+ ""sum of squares: 14.0,14.0""+ suffix+ ""sum of logarithms: 1.791...,1.791...""+ suffix+ ""standard deviation: 1.0,1.0""+ suffix+ ""covariance: Array2DRowRealMatrix{{1.0,-1.0},{-1.0,1.0}}""+ suffix,stats.toString().replaceAll(""([0-9]+\\.[0-9][0-9][0-9])[0-9]+"",""$1...""));Locale.setDefault(d);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testShuffledStatistics",0,"@Test public void testShuffledStatistics(){MultivariateSummaryStatistics reference=createMultivariateSummaryStatistics(2,true);MultivariateSummaryStatistics shuffled=createMultivariateSummaryStatistics(2,true);StorelessUnivariateStatistic[]tmp=shuffled.getGeoMeanImpl();shuffled.setGeoMeanImpl(shuffled.getMeanImpl());shuffled.setMeanImpl(shuffled.getMaxImpl());shuffled.setMaxImpl(shuffled.getMinImpl());shuffled.setMinImpl(shuffled.getSumImpl());shuffled.setSumImpl(shuffled.getSumsqImpl());shuffled.setSumsqImpl(shuffled.getSumLogImpl());shuffled.setSumLogImpl(tmp);for (int i=100;i > 0;--i){reference.addValue(new double[]{i,i});shuffled.addValue(new double[]{i,i});}TestUtils.assertEquals(reference.getMean(),shuffled.getGeometricMean(),1.0e-10);TestUtils.assertEquals(reference.getMax(),shuffled.getMean(),1.0e-10);TestUtils.assertEquals(reference.getMin(),shuffled.getMax(),1.0e-10);TestUtils.assertEquals(reference.getSum(),shuffled.getMin(),1.0e-10);TestUtils.assertEquals(reference.getSumSq(),shuffled.getSum(),1.0e-10);TestUtils.assertEquals(reference.getSumLog(),shuffled.getSumSq(),1.0e-10);TestUtils.assertEquals(reference.getGeometricMean(),shuffled.getSumLog(),1.0e-10);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testDimension",0,"@Test public void testDimension(){try {createMultivariateSummaryStatistics(2,true).addValue(new double[3]);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException dme){}}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testStats",0,"/** * test stats */@Test public void testStats(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);Assert.assertEquals(0,u.getN());u.addValue(new double[]{1,2});u.addValue(new double[]{2,3});u.addValue(new double[]{2,3});u.addValue(new double[]{3,4});Assert.assertEquals(4,u.getN());Assert.assertEquals(8,u.getSum()[0],1.0e-10);Assert.assertEquals(12,u.getSum()[1],1.0e-10);Assert.assertEquals(18,u.getSumSq()[0],1.0e-10);Assert.assertEquals(38,u.getSumSq()[1],1.0e-10);Assert.assertEquals(1,u.getMin()[0],1.0e-10);Assert.assertEquals(2,u.getMin()[1],1.0e-10);Assert.assertEquals(3,u.getMax()[0],1.0e-10);Assert.assertEquals(4,u.getMax()[1],1.0e-10);Assert.assertEquals(2.4849066497880003102,u.getSumLog()[0],1.0e-10);Assert.assertEquals(4.276666119016055311,u.getSumLog()[1],1.0e-10);Assert.assertEquals(1.8612097182041991979,u.getGeometricMean()[0],1.0e-10);Assert.assertEquals(2.9129506302439405217,u.getGeometricMean()[1],1.0e-10);Assert.assertEquals(2,u.getMean()[0],1.0e-10);Assert.assertEquals(3,u.getMean()[1],1.0e-10);Assert.assertEquals(FastMath.sqrt(2.0 / 3.0),u.getStandardDeviation()[0],1.0e-10);Assert.assertEquals(FastMath.sqrt(2.0 / 3.0),u.getStandardDeviation()[1],1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(0,0),1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(0,1),1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(1,0),1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(1,1),1.0e-10);u.clear();Assert.assertEquals(0,u.getN());}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(1,true);Assert.assertTrue(Double.isNaN(u.getMean()[0]));Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));u.addValue(new double[]{1});Assert.assertEquals(1.0,u.getMean()[0],1.0e-10);Assert.assertEquals(1.0,u.getGeometricMean()[0],1.0e-10);Assert.assertEquals(0.0,u.getStandardDeviation()[0],1.0e-10);u.addValue(new double[]{2});Assert.assertTrue(u.getStandardDeviation()[0]> 0);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testNaNContracts",0,"@Test public void testNaNContracts(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(1,true);Assert.assertTrue(Double.isNaN(u.getMean()[0]));Assert.assertTrue(Double.isNaN(u.getMin()[0]));Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));Assert.assertTrue(Double.isNaN(u.getGeometricMean()[0]));u.addValue(new double[]{1.0});Assert.assertFalse(Double.isNaN(u.getMean()[0]));Assert.assertFalse(Double.isNaN(u.getMin()[0]));Assert.assertFalse(Double.isNaN(u.getStandardDeviation()[0]));Assert.assertFalse(Double.isNaN(u.getGeometricMean()[0]));}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testSerialization",0,"@Test public void testSerialization(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);TestUtils.checkSerializedEquality(u);MultivariateSummaryStatistics s=(MultivariateSummaryStatistics)TestUtils.serializeAndRecover(u);Assert.assertEquals(u,s);u.addValue(new double[]{2d,1d});u.addValue(new double[]{1d,1d});u.addValue(new double[]{3d,1d});u.addValue(new double[]{4d,1d});u.addValue(new double[]{5d,1d});TestUtils.checkSerializedEquality(u);s=(MultivariateSummaryStatistics)TestUtils.serializeAndRecover(u);Assert.assertEquals(u,s);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);MultivariateSummaryStatistics t=null;int emptyHash=u.hashCode();Assert.assertTrue(u.equals(u));Assert.assertFalse(u.equals(t));Assert.assertFalse(u.equals(Double.valueOf(0)));t=createMultivariateSummaryStatistics(2,true);Assert.assertTrue(t.equals(u));Assert.assertTrue(u.equals(t));Assert.assertEquals(emptyHash,t.hashCode());u.addValue(new double[]{2d,1d});u.addValue(new double[]{1d,1d});u.addValue(new double[]{3d,1d});u.addValue(new double[]{4d,1d});u.addValue(new double[]{5d,1d});Assert.assertFalse(t.equals(u));Assert.assertFalse(u.equals(t));Assert.assertTrue(u.hashCode()!= t.hashCode());t.addValue(new double[]{2d,1d});t.addValue(new double[]{1d,1d});t.addValue(new double[]{3d,1d});t.addValue(new double[]{4d,1d});t.addValue(new double[]{5d,1d});Assert.assertTrue(t.equals(u));Assert.assertTrue(u.equals(t));Assert.assertEquals(u.hashCode(),t.hashCode());u.clear();t.clear();Assert.assertTrue(t.equals(u));Assert.assertTrue(u.equals(t));Assert.assertEquals(emptyHash,t.hashCode());Assert.assertEquals(emptyHash,u.hashCode());}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testBoundsUnsupported",0,"@Test(expected=MathUnsupportedOperationException.class)public void testBoundsUnsupported(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0}),new SimpleBounds(new double[]{-1},new double[]{1}));}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0}));Assert.assertEquals(1.5,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(0.0,optimum.getValue(),1.0e-10);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testColumnsPermutation",0,"@Test public void testColumnsPermutation(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,-1.0},{0.0,2.0},{1.0,-2.0}},new double[]{4.0,6.0,1.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,0}));Assert.assertEquals(7.0,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(3.0,optimum.getPoint()[1],1.0e-10);Assert.assertEquals(0.0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testNoDependency",0,"@Test public void testNoDependency(){LinearProblem problem=new LinearProblem(new double[][]{{2,0,0,0,0,0},{0,2,0,0,0,0},{0,0,2,0,0,0},{0,0,0,2,0,0},{0,0,0,0,2,0},{0,0,0,0,0,2}},new double[]{0.0,1.1,2.2,3.3,4.4,5.5});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,0,0,0,0,0}));for (int i=0;i < problem.target.length;++i){Assert.assertEquals(0.55 * i,optimum.getPoint()[i],1.0e-10);}}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testOneSet",0,"@Test public void testOneSet(){LinearProblem problem=new LinearProblem(new double[][]{{1,0,0},{-1,1,0},{0,-1,1}},new double[]{1,1,1});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,0,0}));Assert.assertEquals(1.0,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(2.0,optimum.getPoint()[1],1.0e-10);Assert.assertEquals(3.0,optimum.getPoint()[2],1.0e-10);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testTwoSets",0,"@Test public void testTwoSets(){final double epsilon=1.0e-7;LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});final Preconditioner preconditioner=new Preconditioner(){public double[]precondition(double[]point,double[]r){double[]d=r.clone();d[0]/=72.0;d[1]/=30.0;d[2]/=314.0;d[3]/=260.0;d[4]/=2 * (1 + epsilon * epsilon);d[5]/=4.0;return d;}};NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-13,1e-13),new BrentSolver(),preconditioner);PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(3.0,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(4.0,optimum.getPoint()[1],1.0e-10);Assert.assertEquals(-1.0,optimum.getPoint()[2],1.0e-10);Assert.assertEquals(-2.0,optimum.getPoint()[3],1.0e-10);Assert.assertEquals(1.0 + epsilon,optimum.getPoint()[4],1.0e-10);Assert.assertEquals(1.0 - epsilon,optimum.getPoint()[5],1.0e-10);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testNonInversible",0,"@Test public void testNonInversible(){LinearProblem problem=new LinearProblem(new double[][]{{1,2,-3},{2,1,3},{-3,0,-9}},new double[]{1,1,1});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,0,0}));Assert.assertTrue(optimum.getValue()> 0.5);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testIllConditioned",0,"@Test public void testIllConditioned(){LinearProblem problem1=new LinearProblem(new double[][]{{10.0,7.0,8.0,7.0},{7.0,5.0,6.0,5.0},{8.0,6.0,10.0,9.0},{7.0,5.0,9.0,10.0}},new double[]{32,23,33,31});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-13,1e-13),new BrentSolver(1e-15,1e-15));PointValuePair optimum1=optimizer.optimize(new MaxEval(200),problem1.getObjectiveFunction(),problem1.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(1.0,optimum1.getPoint()[0],1.0e-4);Assert.assertEquals(1.0,optimum1.getPoint()[1],1.0e-4);Assert.assertEquals(1.0,optimum1.getPoint()[2],1.0e-4);Assert.assertEquals(1.0,optimum1.getPoint()[3],1.0e-4);LinearProblem problem2=new LinearProblem(new double[][]{{10.00,7.00,8.10,7.20},{7.08,5.04,6.00,5.00},{8.00,5.98,9.89,9.00},{6.99,4.99,9.00,9.98}},new double[]{32,23,33,31});PointValuePair optimum2=optimizer.optimize(new MaxEval(200),problem2.getObjectiveFunction(),problem2.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(-81.0,optimum2.getPoint()[0],1.0e-1);Assert.assertEquals(137.0,optimum2.getPoint()[1],1.0e-1);Assert.assertEquals(-34.0,optimum2.getPoint()[2],1.0e-1);Assert.assertEquals(22.0,optimum2.getPoint()[3],1.0e-1);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testMoreEstimatedParametersSimple",0,"@Test public void testMoreEstimatedParametersSimple(){LinearProblem problem=new LinearProblem(new double[][]{{3.0,2.0,0.0,0.0},{0.0,1.0,-1.0,1.0},{2.0,0.0,1.0,0.0}},new double[]{7.0,3.0,5.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{7,6,5,4}));Assert.assertEquals(0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testMoreEstimatedParametersUnsorted",0,"@Test public void testMoreEstimatedParametersUnsorted(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,1.0,0.0,0.0,0.0,0.0},{0.0,0.0,1.0,1.0,1.0,0.0},{0.0,0.0,0.0,0.0,1.0,-1.0},{0.0,0.0,-1.0,1.0,0.0,1.0},{0.0,0.0,0.0,-1.0,1.0,0.0}},new double[]{3.0,12.0,-1.0,7.0,1.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{2,2,2,2,2,2}));Assert.assertEquals(0,optimum.getValue(),1.0e-10);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testRedundantEquations",0,"@Test public void testRedundantEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,1.0},{1.0,-1.0},{1.0,3.0}},new double[]{3.0,1.0,5.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{1,1}));Assert.assertEquals(2.0,optimum.getPoint()[0],1.0e-8);Assert.assertEquals(1.0,optimum.getPoint()[1],1.0e-8);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testInconsistentEquations",0,"@Test public void testInconsistentEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1.0,1.0},{1.0,-1.0},{1.0,3.0}},new double[]{3.0,1.0,4.0});NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-6,1e-6));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{1,1}));Assert.assertTrue(optimum.getValue()> 0.1);}"
"org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleScalar problem=new CircleScalar();problem.addPoint(30.0,68.0);problem.addPoint(50.0,-6.0);problem.addPoint(110.0,-20.0);problem.addPoint(35.0,15.0);problem.addPoint(45.0,97.0);NonLinearConjugateGradientOptimizer optimizer=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-30,1e-30),new BrentSolver(1e-15,1e-13));PointValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getObjectiveFunction(),problem.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{98.680,47.345}));Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertEquals(69.960161753,problem.getRadius(center),1.0e-8);Assert.assertEquals(96.075902096,center.getX(),1.0e-8);Assert.assertEquals(48.135167894,center.getY(),1.0e-8);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testZero",0,"@Test public void testZero(){HermiteInterpolator interpolator=new HermiteInterpolator();interpolator.addSamplePoint(0.0,new double[]{0.0});for (double x=-10;x < 10;x+=1.0){DerivativeStructure y=interpolator.value(new DerivativeStructure(1,1,0,x))[0];Assert.assertEquals(0.0,y.getValue(),1.0e-15);Assert.assertEquals(0.0,y.getPartialDerivative(1),1.0e-15);}checkPolynomial(new PolynomialFunction(new double[]{0.0}),interpolator.getPolynomials()[0]);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testQuadratic",0,"@Test public void testQuadratic(){HermiteInterpolator interpolator=new HermiteInterpolator();interpolator.addSamplePoint(0.0,new double[]{2.0});interpolator.addSamplePoint(1.0,new double[]{0.0});interpolator.addSamplePoint(2.0,new double[]{0.0});for (double x=-10;x < 10;x+=1.0){DerivativeStructure y=interpolator.value(new DerivativeStructure(1,1,0,x))[0];Assert.assertEquals((x - 1.0)* (x - 2.0),y.getValue(),1.0e-15);Assert.assertEquals(2 * x - 3.0,y.getPartialDerivative(1),1.0e-15);}checkPolynomial(new PolynomialFunction(new double[]{2.0,-3.0,1.0}),interpolator.getPolynomials()[0]);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testMixedDerivatives",0,"@Test public void testMixedDerivatives(){HermiteInterpolator interpolator=new HermiteInterpolator();interpolator.addSamplePoint(0.0,new double[]{1.0},new double[]{2.0});interpolator.addSamplePoint(1.0,new double[]{4.0});interpolator.addSamplePoint(2.0,new double[]{5.0},new double[]{2.0});Assert.assertEquals(4,interpolator.getPolynomials()[0].degree());DerivativeStructure y0=interpolator.value(new DerivativeStructure(1,1,0,0.0))[0];Assert.assertEquals(1.0,y0.getValue(),1.0e-15);Assert.assertEquals(2.0,y0.getPartialDerivative(1),1.0e-15);Assert.assertEquals(4.0,interpolator.value(1.0)[0],1.0e-15);DerivativeStructure y2=interpolator.value(new DerivativeStructure(1,1,0,2.0))[0];Assert.assertEquals(5.0,y2.getValue(),1.0e-15);Assert.assertEquals(2.0,y2.getPartialDerivative(1),1.0e-15);checkPolynomial(new PolynomialFunction(new double[]{1.0,2.0,4.0,-4.0,1.0}),interpolator.getPolynomials()[0]);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testRandomPolynomialsValuesOnly",0,"@Test public void testRandomPolynomialsValuesOnly(){Random random=new Random(0x42b1e7dbd361a932l);for (int i=0;i < 100;++i){int maxDegree=0;PolynomialFunction[]p=new PolynomialFunction[5];for (int k=0;k < p.length;++k){int degree=random.nextInt(7);p[k]=randomPolynomial(degree,random);maxDegree=FastMath.max(maxDegree,degree);}HermiteInterpolator interpolator=new HermiteInterpolator();for (int j=0;j < 1 + maxDegree;++j){double x=0.1 * j;double[]values=new double[p.length];for (int k=0;k < p.length;++k){values[k]=p[k].value(x);}interpolator.addSamplePoint(x,values);}for (double x=0;x < 2;x+=0.1){double[]values=interpolator.value(x);Assert.assertEquals(p.length,values.length);for (int k=0;k < p.length;++k){Assert.assertEquals(p[k].value(x),values[k],1.0e-8 * FastMath.abs(p[k].value(x)));}}PolynomialFunction[]result=interpolator.getPolynomials();for (int k=0;k < p.length;++k){checkPolynomial(p[k],result[k]);}}}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testRandomPolynomialsFirstDerivative",0,"@Test public void testRandomPolynomialsFirstDerivative(){Random random=new Random(0x570803c982ca5d3bl);for (int i=0;i < 100;++i){int maxDegree=0;PolynomialFunction[]p=new PolynomialFunction[5];PolynomialFunction[]pPrime=new PolynomialFunction[5];for (int k=0;k < p.length;++k){int degree=random.nextInt(7);p[k]=randomPolynomial(degree,random);pPrime[k]=p[k].polynomialDerivative();maxDegree=FastMath.max(maxDegree,degree);}HermiteInterpolator interpolator=new HermiteInterpolator();for (int j=0;j < 1 + maxDegree / 2;++j){double x=0.1 * j;double[]values=new double[p.length];double[]derivatives=new double[p.length];for (int k=0;k < p.length;++k){values[k]=p[k].value(x);derivatives[k]=pPrime[k].value(x);}interpolator.addSamplePoint(x,values,derivatives);}for (double x=0;x < 2;x+=0.1){DerivativeStructure[]y=interpolator.value(new DerivativeStructure(1,1,0,x));Assert.assertEquals(p.length,y.length);for (int k=0;k < p.length;++k){Assert.assertEquals(p[k].value(x),y[k].getValue(),1.0e-8 * FastMath.abs(p[k].value(x)));Assert.assertEquals(pPrime[k].value(x),y[k].getPartialDerivative(1),4.0e-8 * FastMath.abs(p[k].value(x)));}}PolynomialFunction[]result=interpolator.getPolynomials();for (int k=0;k < p.length;++k){checkPolynomial(p[k],result[k]);}}}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testSine",0,"@Test public void testSine(){HermiteInterpolator interpolator=new HermiteInterpolator();for (double x=0;x < FastMath.PI;x+=0.5){interpolator.addSamplePoint(x,new double[]{FastMath.sin(x)});}for (double x=0.1;x <= 2.9;x+=0.01){DerivativeStructure y=interpolator.value(new DerivativeStructure(1,2,0,x))[0];Assert.assertEquals(FastMath.sin(x),y.getValue(),3.5e-5);Assert.assertEquals(FastMath.cos(x),y.getPartialDerivative(1),1.3e-4);Assert.assertEquals(-FastMath.sin(x),y.getPartialDerivative(2),2.9e-3);}}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testSquareRoot",0,"@Test public void testSquareRoot(){HermiteInterpolator interpolator=new HermiteInterpolator();for (double x=1.0;x < 3.6;x+=0.5){interpolator.addSamplePoint(x,new double[]{FastMath.sqrt(x)});}for (double x=1.1;x < 3.5;x+=0.01){DerivativeStructure y=interpolator.value(new DerivativeStructure(1,1,0,x))[0];Assert.assertEquals(FastMath.sqrt(x),y.getValue(),1.5e-4);Assert.assertEquals(0.5 / FastMath.sqrt(x),y.getPartialDerivative(1),8.5e-4);}}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testWikipedia",0,"@Test public void testWikipedia(){HermiteInterpolator interpolator=new HermiteInterpolator();interpolator.addSamplePoint(-1,new double[]{2},new double[]{-8},new double[]{56});interpolator.addSamplePoint(0,new double[]{1},new double[]{0},new double[]{0});interpolator.addSamplePoint(1,new double[]{2},new double[]{8},new double[]{56});for (double x=-1.0;x <= 1.0;x+=0.125){DerivativeStructure y=interpolator.value(new DerivativeStructure(1,1,0,x))[0];double x2=x * x;double x4=x2 * x2;double x8=x4 * x4;Assert.assertEquals(x8 + 1,y.getValue(),1.0e-15);Assert.assertEquals(8 * x4 * x2* x,y.getPartialDerivative(1),1.0e-15);}checkPolynomial(new PolynomialFunction(new double[]{1,0,0,0,0,0,0,0,1}),interpolator.getPolynomials()[0]);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testOnePointParabola",0,"@Test public void testOnePointParabola(){HermiteInterpolator interpolator=new HermiteInterpolator();interpolator.addSamplePoint(0,new double[]{1},new double[]{1},new double[]{2});for (double x=-1.0;x <= 1.0;x+=0.125){DerivativeStructure y=interpolator.value(new DerivativeStructure(1,1,0,x))[0];Assert.assertEquals(1 + x * (1 + x),y.getValue(),1.0e-15);Assert.assertEquals(1 + 2 * x,y.getPartialDerivative(1),1.0e-15);}checkPolynomial(new PolynomialFunction(new double[]{1,1,1}),interpolator.getPolynomials()[0]);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testEmptySample",0,"@Test(expected=NoDataException.class)public void testEmptySample(){new HermiteInterpolator().value(0.0);}"
"org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest.testDuplicatedAbscissa",0,"@Test(expected=IllegalArgumentException.class)public void testDuplicatedAbscissa(){HermiteInterpolator interpolator=new HermiteInterpolator();interpolator.addSamplePoint(1.0,new double[]{0.0});interpolator.addSamplePoint(1.0,new double[]{1.0});}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInitOutofbounds1",0,"@Test(expected=NumberIsTooLargeException.class)public void testInitOutofbounds1(){double[]startPoint=point(DIM,3);double[]insigma=point(DIM,0.3);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInitOutofbounds2",0,"@Test(expected=NumberIsTooSmallException.class)public void testInitOutofbounds2(){double[]startPoint=point(DIM,-2);double[]insigma=point(DIM,0.3);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testBoundariesDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testBoundariesDimensionMismatch(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM,0.3);double[][]boundaries=boundaries(DIM + 1,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaNegative",0,"@Test(expected=NotPositiveException.class)public void testInputSigmaNegative(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM,-0.5);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaOutOfRange",0,"@Test(expected=OutOfRangeException.class)public void testInputSigmaOutOfRange(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM,1.1);double[][]boundaries=boundaries(DIM,-0.5,0.5);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testInputSigmaDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testInputSigmaDimensionMismatch(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM + 1,0.5);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRosen",0,"@Test @Retry(3)public void testRosen(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMaximize",0,"@Test @Retry(3)public void testMaximize(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),1.0);doTest(new MinusElli(),startPoint,insigma,boundaries,GoalType.MAXIMIZE,LAMBDA,true,0,1.0 - 1e-13,2e-10,5e-6,100000,expected);doTest(new MinusElli(),startPoint,insigma,boundaries,GoalType.MAXIMIZE,LAMBDA,false,0,1.0 - 1e-13,2e-10,5e-6,100000,expected);boundaries=boundaries(DIM,-0.3,0.3);startPoint=point(DIM,0.1);doTest(new MinusElli(),startPoint,insigma,boundaries,GoalType.MAXIMIZE,LAMBDA,true,0,1.0 - 1e-13,2e-10,5e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testEllipse",0,"@Test public void testEllipse(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Elli(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Elli(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testElliRotated",0,"@Test public void testElliRotated(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new ElliRotated(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new ElliRotated(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigar",0,"@Test public void testCigar(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigarWithBoundaries",0,"@Test public void testCigarWithBoundaries(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=boundaries(DIM,-1e100,Double.POSITIVE_INFINITY);PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTwoAxes",0,"@Test public void testTwoAxes(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new TwoAxes(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new TwoAxes(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,false,0,1e-13,1e-8,1e-3,200000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testCigTab",0,"@Test public void testCigTab(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.3);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new CigTab(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,5e-5,100000,expected);doTest(new CigTab(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,5e-5,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSphere",0,"@Test public void testSphere(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Sphere(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Sphere(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testTablet",0,"@Test public void testTablet(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Tablet(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Tablet(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiffPow",0,"@Test public void testDiffPow(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new DiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,true,0,1e-13,1e-8,1e-1,100000,expected);doTest(new DiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,false,0,1e-13,1e-8,2e-1,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testSsDiffPow",0,"@Test public void testSsDiffPow(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new SsDiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,true,0,1e-13,1e-4,1e-1,200000,expected);doTest(new SsDiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,false,0,1e-13,1e-4,1e-1,200000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testAckley",0,"@Test public void testAckley(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Ackley(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,true,0,1e-13,1e-9,1e-5,100000,expected);doTest(new Ackley(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,false,0,1e-13,1e-9,1e-5,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testRastrigin",0,"@Test public void testRastrigin(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Rastrigin(),startPoint,insigma,boundaries,GoalType.MINIMIZE,(int)(200 * Math.sqrt(DIM)),true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new Rastrigin(),startPoint,insigma,boundaries,GoalType.MINIMIZE,(int)(200 * Math.sqrt(DIM)),false,0,1e-13,1e-13,1e-6,200000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testConstrainedRosen",0,"@Test public void testConstrainedRosen(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testDiagonalRosen",0,"@Test public void testDiagonalRosen(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,1,1e-13,1e-10,1e-4,1000000,expected);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testMath864",0,"@Test public void testMath864(){final CMAESOptimizer optimizer=new CMAESOptimizer(30000,0,true,10,0,new MersenneTwister(),false,null);final MultivariateFunction fitnessFunction=new MultivariateFunction(){public double value(double[]parameters){final double target=1;final double error=target - parameters[0];return error * error;}};final double[]start={0};final double[]lower={-1e6};final double[]upper={1.5};final double[]sigma={1e-1};final double[]result=optimizer.optimize(new MaxEval(10000),new ObjectiveFunction(fitnessFunction),GoalType.MINIMIZE,new CMAESOptimizer.PopulationSize(5),new CMAESOptimizer.Sigma(sigma),new InitialGuess(start),new SimpleBounds(lower,upper)).getPoint();Assert.assertTrue(""Out of bounds ("" + result[0]+ "" > ""+ upper[0]+ "")"",result[0]<= upper[0]);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary",0,"/** * Cf. MATH-867*/@Test public void testFitAccuracyDependsOnBoundary(){final CMAESOptimizer optimizer=new CMAESOptimizer(30000,0,true,10,0,new MersenneTwister(),false,null);final MultivariateFunction fitnessFunction=new MultivariateFunction(){public double value(double[]parameters){final double target=11.1;final double error=target - parameters[0];return error * error;}};final double[]start={1};PointValuePair result=optimizer.optimize(new MaxEval(100000),new ObjectiveFunction(fitnessFunction),GoalType.MINIMIZE,SimpleBounds.unbounded(1),new CMAESOptimizer.PopulationSize(5),new CMAESOptimizer.Sigma(new double[]{1e-1}),new InitialGuess(start));final double resNoBound=result.getPoint()[0];final double[]lower={-20};final double[]upper={5e16};final double[]sigma={10};result=optimizer.optimize(new MaxEval(100000),new ObjectiveFunction(fitnessFunction),GoalType.MINIMIZE,new CMAESOptimizer.PopulationSize(5),new CMAESOptimizer.Sigma(sigma),new InitialGuess(start),new SimpleBounds(lower,upper));final double resNearLo=result.getPoint()[0];lower[0]=-5e16;upper[0]=20;result=optimizer.optimize(new MaxEval(100000),new ObjectiveFunction(fitnessFunction),GoalType.MINIMIZE,new CMAESOptimizer.PopulationSize(5),new CMAESOptimizer.Sigma(sigma),new InitialGuess(start),new SimpleBounds(lower,upper));final double resNearHi=result.getPoint()[0];Assert.assertEquals(resNoBound,resNearLo,1e-3);Assert.assertEquals(resNoBound,resNearHi,1e-3);}"
"org.apache.commons.math3.analysis.differentiation.JacobianFunctionTest.testSphere",0,"@Test public void testSphere(){SphereMapping f=new SphereMapping(10.0);JacobianFunction j=new JacobianFunction(f);for (double latitude=-1.5;latitude < 1.5;latitude+=0.1){for (double longitude=-3.1;longitude < 3.1;longitude+=0.1){double[]point=new double[]{latitude,longitude};double[][]referenceJacobian=f.jacobian(point);double[][]testJacobian=j.value(point);Assert.assertEquals(referenceJacobian.length,testJacobian.length);for (int i=0;i < 3;++i){TestUtils.assertEquals(referenceJacobian[i],testJacobian[i],2.0e-15);}}}}"
"org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetMean",0,"/** * Test the ability of the distribution to report its mean value parameter.*/@Test public void testGetMean(){final double[]mu={-1.5,2};final double[][]sigma={{2,-1.1},{-1.1,2}};final MultivariateNormalDistribution d=new MultivariateNormalDistribution(mu,sigma);final double[]m=d.getMeans();for (int i=0;i < m.length;i++){Assert.assertEquals(mu[i],m[i],0);}}"
"org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testGetCovarianceMatrix",0,"/** * Test the ability of the distribution to report its covariance matrix parameter.*/@Test public void testGetCovarianceMatrix(){final double[]mu={-1.5,2};final double[][]sigma={{2,-1.1},{-1.1,2}};final MultivariateNormalDistribution d=new MultivariateNormalDistribution(mu,sigma);final RealMatrix s=d.getCovariances();final int dim=d.getDimension();for (int i=0;i < dim;i++){for (int j=0;j < dim;j++){Assert.assertEquals(sigma[i][j],s.getEntry(i,j),0);}}}"
"org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testSampling",0,"/** * Test the accuracy of sampling from the distribution.*/@Test public void testSampling(){final double[]mu={-1.5,2};final double[][]sigma={{2,-1.1},{-1.1,2}};final MultivariateNormalDistribution d=new MultivariateNormalDistribution(mu,sigma);d.reseedRandomGenerator(50);final int n=500000;final double[][]samples=d.sample(n);final int dim=d.getDimension();final double[]sampleMeans=new double[dim];for (int i=0;i < samples.length;i++){for (int j=0;j < dim;j++){sampleMeans[j]+=samples[i][j];}}final double sampledValueTolerance=1e-2;for (int j=0;j < dim;j++){sampleMeans[j]/=samples.length;Assert.assertEquals(mu[j],sampleMeans[j],sampledValueTolerance);}final double[][]sampleSigma=new Covariance(samples).getCovarianceMatrix().getData();for (int i=0;i < dim;i++){for (int j=0;j < dim;j++){Assert.assertEquals(sigma[i][j],sampleSigma[i][j],sampledValueTolerance);}}}"
"org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testDensities",0,"/** * Test the accuracy of the distribution when calculating densities.*/@Test public void testDensities(){final double[]mu={-1.5,2};final double[][]sigma={{2,-1.1},{-1.1,2}};final MultivariateNormalDistribution d=new MultivariateNormalDistribution(mu,sigma);final double[][]testValues={{-1.5,2},{4,4},{1.5,-2},{0,0}};final double[]densities=new double[testValues.length];for (int i=0;i < densities.length;i++){densities[i]=d.density(testValues[i]);}final double[]correctDensities={0.09528357207691344,5.80932710124009e-09,0.001387448895173267,0.03309922090210541};for (int i=0;i < testValues.length;i++){Assert.assertEquals(correctDensities[i],densities[i],1e-16);}}"
"org.apache.commons.math3.distribution.MultivariateNormalDistributionTest.testUnivariateDistribution",0,"/** * Test the accuracy of the distribution when calculating densities.*/@Test public void testUnivariateDistribution(){final double[]mu={-1.5};final double[][]sigma={{1}};final MultivariateNormalDistribution multi=new MultivariateNormalDistribution(mu,sigma);final NormalDistribution uni=new NormalDistribution(mu[0],sigma[0][0]);final Random rng=new Random();final int numCases=100;final double tol=Math.ulp(1d);for (int i=0;i < numCases;i++){final double v=rng.nextDouble()* 10 - 5;Assert.assertEquals(uni.density(v),multi.density(new double[]{v}),tol);}}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest.testMismatch",0,"@Test public void testMismatch(){try {new VectorialMean(8).increment(new double[5]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException dme){Assert.assertEquals(5,dme.getArgument());Assert.assertEquals(8,dme.getDimension());}}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest.testSimplistic",0,"@Test public void testSimplistic(){VectorialMean stat=new VectorialMean(2);stat.increment(new double[]{-1.0,1.0});stat.increment(new double[]{1.0,-1.0});double[]mean=stat.getResult();Assert.assertEquals(0.0,mean[0],1.0e-12);Assert.assertEquals(0.0,mean[1],1.0e-12);}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest.testBasicStats",0,"@Test public void testBasicStats(){VectorialMean stat=new VectorialMean(points[0].length);for (int i=0;i < points.length;++i){stat.increment(points[i]);}Assert.assertEquals(points.length,stat.getN());double[]mean=stat.getResult();double[]refMean=new double[]{1.78,1.62,3.12};for (int i=0;i < mean.length;++i){Assert.assertEquals(refMean[i],mean[i],1.0e-12);}}"
"org.apache.commons.math3.stat.descriptive.moment.VectorialMeanTest.testSerial",0,"@Test public void testSerial(){VectorialMean stat=new VectorialMean(points[0].length);for (int i=0;i < points.length;++i){stat.increment(points[i]);}Assert.assertEquals(stat,TestUtils.serializeAndRecover(stat));}"
"org.apache.commons.math3.analysis.solvers.NewtonSolverTest.testSinZero",0,"/** */@Test public void testSinZero(){DifferentiableUnivariateFunction f=new Sin();double result;NewtonSolver solver=new NewtonSolver();result=solver.solve(100,f,3,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());result=solver.solve(100,f,1,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()> 0);}"
"org.apache.commons.math3.analysis.solvers.NewtonSolverTest.testQuinticZero",0,"/** */@Test public void testQuinticZero(){final UnivariateDifferentiableFunction q=new QuinticFunction();DifferentiableUnivariateFunction f=new DifferentiableUnivariateFunction(){public double value(double x){return q.value(x);}public UnivariateFunction derivative(){return new UnivariateFunction(){public double value(double x){return q.value(new DerivativeStructure(1,1,0,x)).getPartialDerivative(1);}};}};double result;NewtonSolver solver=new NewtonSolver();result=solver.solve(100,f,-0.2,0.2);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,-0.1,0.3);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,-0.3,0.45);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.3,0.7);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.2,0.6);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.05,0.95);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,1.25);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.8,1.2);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,1.75);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.55,1.45);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,5);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math3.util.ContinuedFractionTest.testGoldenRatio",0,"@Test public void testGoldenRatio()throws Exception {ContinuedFraction cf=new ContinuedFraction(){@Override public double getA(int n,double x){return 1.0;}@Override public double getB(int n,double x){return 1.0;}};double gr=cf.evaluate(0.0,10e-9);Assert.assertEquals(1.61803399,gr,10e-9);}"
"org.apache.commons.math3.exception.util.LocalizedFormatsTest.testMessageNumber",0,"@Test public void testMessageNumber(){Assert.assertEquals(313,LocalizedFormats.values().length);}"
"org.apache.commons.math3.exception.util.LocalizedFormatsTest.testAllKeysPresentInPropertiesFiles",0,"@Test public void testAllKeysPresentInPropertiesFiles(){final String path=LocalizedFormats.class.getName().replaceAll(""\\."",""/"");for(final String language : new String[]{""fr""}){ResourceBundle bundle=ResourceBundle.getBundle(""assets/"" + path,new Locale(language));for(LocalizedFormats message : LocalizedFormats.values()){final String messageKey=message.toString();boolean keyPresent=false;for (final Enumeration<String> keys=bundle.getKeys();keys.hasMoreElements();){keyPresent|=messageKey.equals(keys.nextElement());}Assert.assertTrue(""missing key \"""" + message.name()+ ""\"" for language ""+ language,keyPresent);}Assert.assertEquals(language,bundle.getLocale().getLanguage());}}"
"org.apache.commons.math3.exception.util.LocalizedFormatsTest.testAllPropertiesCorrespondToKeys",0,"@Test public void testAllPropertiesCorrespondToKeys(){final String path=LocalizedFormats.class.getName().replaceAll(""\\."",""/"");for(final String language : new String[]{""fr""}){ResourceBundle bundle=ResourceBundle.getBundle(""assets/"" + path,new Locale(language));for (final Enumeration<String> keys=bundle.getKeys();keys.hasMoreElements();){final String propertyKey=keys.nextElement();try {Assert.assertNotNull(LocalizedFormats.valueOf(propertyKey));}catch(IllegalArgumentException iae){Assert.fail(""unknown key \"""" + propertyKey + ""\"" in language ""+ language);}}Assert.assertEquals(language,bundle.getLocale().getLanguage());}}"
"org.apache.commons.math3.exception.util.LocalizedFormatsTest.testNoMissingFrenchTranslation",0,"@Test public void testNoMissingFrenchTranslation(){for(LocalizedFormats message : LocalizedFormats.values()){String translated=message.getLocalizedString(Locale.FRENCH);Assert.assertFalse(message.name(),translated.toLowerCase().contains(""missing translation""));}}"
"org.apache.commons.math3.exception.util.LocalizedFormatsTest.testNoOpEnglishTranslation",0,"@Test public void testNoOpEnglishTranslation(){for(LocalizedFormats message : LocalizedFormats.values()){String translated=message.getLocalizedString(Locale.ENGLISH);Assert.assertEquals(message.getSourceString(),translated);}}"
"org.apache.commons.math3.exception.util.LocalizedFormatsTest.testVariablePartsConsistency",0,"@Test public void testVariablePartsConsistency(){for(final String language : new String[]{""fr""}){Locale locale=new Locale(language);for(LocalizedFormats message : LocalizedFormats.values()){MessageFormat source=new MessageFormat(message.getSourceString());MessageFormat translated=new MessageFormat(message.getLocalizedString(locale));Assert.assertEquals(message.name()+ "" ("" + language+ "")"",source.getFormatsByArgumentIndex().length,translated.getFormatsByArgumentIndex().length);}}}"
"org.apache.commons.math3.distribution.KolmogorovSmirnovDistributionTest.testCumulativeDensityFunction",0,"@Test public void testCumulativeDensityFunction(){KolmogorovSmirnovDistribution dist;dist=new KolmogorovSmirnovDistribution(200);Assert.assertEquals(4.907829957616471622388047046469198862537e-86,dist.cdf(0.005,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(200);Assert.assertEquals(5.151982014280041957199687829849210629618e-06,dist.cdf(0.02,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(200);Assert.assertEquals(0.01291614648162886340443389343590752105229,dist.cdf(0.031111,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(200);Assert.assertEquals(0.1067137011362679355208626930107129737735,dist.cdf(0.04,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(341);Assert.assertEquals(1.914734701559404553985102395145063418825e-53,dist.cdf(0.005,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(341);Assert.assertEquals(0.001171328985781981343872182321774744195864,dist.cdf(0.02,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(341);Assert.assertEquals(0.1142955196267499418105728636874118819833,dist.cdf(0.031111,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(341);Assert.assertEquals(0.3685529520496805266915885113121476024389,dist.cdf(0.04,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(389);Assert.assertEquals(1.810657144595055888918455512707637574637e-47,dist.cdf(0.005,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(389);Assert.assertEquals(0.003068542559702356568168690742481885536108,dist.cdf(0.02,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(389);Assert.assertEquals(0.1658291700122746237244797384846606291831,dist.cdf(0.031111,false),TOLERANCE);dist=new KolmogorovSmirnovDistribution(389);Assert.assertEquals(0.4513143712128902529379104180407011881471,dist.cdf(0.04,false),TOLERANCE);}"
"org.apache.commons.math3.RetryRunnerTest.testRetryFailAlways",0,"/** * Shows that an always failing test will fail even if it is retried.*/@Test(expected=MathIllegalStateException.class)@Retry public void testRetryFailAlways(){throw new MathIllegalStateException();}"
"org.apache.commons.math3.RetryRunnerTest.testRetryFailSometimes",0,"/** * Shows that a test that sometimes fail might succeed if it is retried. In this case the high number of retries makes it quite unlikely that the exception will be thrown by all of the calls.*/@Test @Retry(100)public void testRetryFailSometimes(){if (rng.nextBoolean()){throw new MathIllegalStateException();}}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testHasIntercept",0,"/** * Test of hasIntercept method,of class MillerUpdatingRegression.*/@Test public void testHasIntercept(){MillerUpdatingRegression instance=new MillerUpdatingRegression(10,false);if (instance.hasIntercept()){Assert.fail(""Should not have intercept"");}instance=new MillerUpdatingRegression(10,true);if (!instance.hasIntercept()){Assert.fail(""Should have intercept"");}}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testAddObsGetNClear",0,"/** * Test of getN method,of class MillerUpdatingRegression.*/@Test public void testAddObsGetNClear(){MillerUpdatingRegression instance=new MillerUpdatingRegression(3,true);double[][]xAll=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){xAll[i]=new double[3];xAll[i][0]=Math.log(airdata[3][i]);xAll[i][1]=Math.log(airdata[4][i]);xAll[i][2]=airdata[5][i];y[i]=Math.log(airdata[2][i]);}instance.addObservations(xAll,y);if (instance.getN()!= xAll.length){Assert.fail(""Number of observations not correct in bulk addition"");}instance.clear();for (int i=0;i < xAll.length;i++){instance.addObservation(xAll[i],y[i]);}if (instance.getN()!= xAll.length){Assert.fail(""Number of observations not correct in drip addition"");}return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testNegativeTestAddObs",0,"@Test public void testNegativeTestAddObs(){MillerUpdatingRegression instance=new MillerUpdatingRegression(3,true);try {instance.addObservation(new double[]{1.0},0.0);Assert.fail(""Should throw IllegalArgumentException"");}catch(IllegalArgumentException iae){}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException"");}try {instance.addObservation(new double[]{1.0,1.0,1.0,1.0,1.0,1.0,1.0},0.0);Assert.fail(""Should throw IllegalArgumentException"");}catch(IllegalArgumentException iae){}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException"");}try {instance.addObservation(new double[]{1.0,1.0,1.0},0.0);}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException"");}instance=new MillerUpdatingRegression(3,false);try {instance.addObservation(new double[]{1.0},0.0);Assert.fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");}catch(IllegalArgumentException iae){}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");}try {instance.addObservation(new double[]{1.0,1.0,1.0,1.0,1.0,1.0,1.0},0.0);Assert.fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");}catch(IllegalArgumentException iae){}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");}try {instance.addObservation(new double[]{1.0,1.0,1.0},0.0);}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException [NOINTERCEPT]"");}}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testNegativeTestAddMultipleObs",0,"@Test public void testNegativeTestAddMultipleObs(){MillerUpdatingRegression instance=new MillerUpdatingRegression(3,true);try {double[][]tst={{1.0,1.0,1.0},{1.20,2.0,2.1}};double[]y={1.0};instance.addObservations(tst,y);Assert.fail(""Should throw IllegalArgumentException"");}catch(IllegalArgumentException iae){}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException"");}try {double[][]tst={{1.0,1.0,1.0},{1.20,2.0,2.1}};double[]y={1.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0};instance.addObservations(tst,y);Assert.fail(""Should throw IllegalArgumentException"");}catch(IllegalArgumentException iae){}catch(Exception e){Assert.fail(""Should throw IllegalArgumentException"");}}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testRegressAirlineConstantExternal",0,"@Test public void testRegressAirlineConstantExternal(){MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);double[][]x=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[4];x[i][0]=1.0;x[i][1]=Math.log(airdata[3][i]);x[i][2]=Math.log(airdata[4][i]);x[i][3]=airdata[5][i];y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);try {RegressionResults result=instance.regress();Assert.assertNotNull(""The test case is a prototype."",result);TestUtils.assertEquals(new double[]{9.5169,0.8827,0.4540,-1.6275},result.getParameterEstimates(),1e-4);TestUtils.assertEquals(new double[]{.2292445,.0132545,.0203042,.345302},result.getStdErrorOfEstimates(),1.0e-4);TestUtils.assertEquals(0.01552839,result.getMeanSquareError(),1.0e-8);}catch(Exception e){Assert.fail(""Should not throw exception but does"");}}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testRegressAirlineConstantInternal",0,"@Test public void testRegressAirlineConstantInternal(){MillerUpdatingRegression instance=new MillerUpdatingRegression(3,true);double[][]x=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[3];x[i][0]=Math.log(airdata[3][i]);x[i][1]=Math.log(airdata[4][i]);x[i][2]=airdata[5][i];y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);try {RegressionResults result=instance.regress();Assert.assertNotNull(""The test case is a prototype."",result);TestUtils.assertEquals(new double[]{9.5169,0.8827,0.4540,-1.6275},result.getParameterEstimates(),1e-4);TestUtils.assertEquals(new double[]{.2292445,.0132545,.0203042,.345302},result.getStdErrorOfEstimates(),1.0e-4);TestUtils.assertEquals(0.9883,result.getRSquared(),1.0e-4);TestUtils.assertEquals(0.01552839,result.getMeanSquareError(),1.0e-8);}catch(Exception e){Assert.fail(""Should not throw exception but does"");}}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testFilippelli",0,"@Test public void testFilippelli(){double[]data=new double[]{0.8116,-6.860120914,0.9072,-4.324130045,0.9052,-4.358625055,0.9039,-4.358426747,0.8053,-6.955852379,0.8377,-6.661145254,0.8667,-6.355462942,0.8809,-6.118102026,0.7975,-7.115148017,0.8162,-6.815308569,0.8515,-6.519993057,0.8766,-6.204119983,0.8885,-5.853871964,0.8859,-6.109523091,0.8959,-5.79832982,0.8913,-5.482672118,0.8959,-5.171791386,0.8971,-4.851705903,0.9021,-4.517126416,0.909,-4.143573228,0.9139,-3.709075441,0.9199,-3.499489089,0.8692,-6.300769497,0.8872,-5.953504836,0.89,-5.642065153,0.891,-5.031376979,0.8977,-4.680685696,0.9035,-4.329846955,0.9078,-3.928486195,0.7675,-8.56735134,0.7705,-8.363211311,0.7713,-8.107682739,0.7736,-7.823908741,0.7775,-7.522878745,0.7841,-7.218819279,0.7971,-6.920818754,0.8329,-6.628932138,0.8641,-6.323946875,0.8804,-5.991399828,0.7668,-8.781464495,0.7633,-8.663140179,0.7678,-8.473531488,0.7697,-8.247337057,0.77,-7.971428747,0.7749,-7.676129393,0.7796,-7.352812702,0.7897,-7.072065318,0.8131,-6.774174009,0.8498,-6.478861916,0.8741,-6.159517513,0.8061,-6.835647144,0.846,-6.53165267,0.8751,-6.224098421,0.8856,-5.910094889,0.8919,-5.598599459,0.8934,-5.290645224,0.894,-4.974284616,0.8957,-4.64454848,0.9047,-4.290560426,0.9129,-3.885055584,0.9209,-3.408378962,0.9219,-3.13200249,0.7739,-8.726767166,0.7681,-8.66695597,0.7665,-8.511026475,0.7703,-8.165388579,0.7702,-7.886056648,0.7761,-7.588043762,0.7809,-7.283412422,0.7961,-6.995678626,0.8253,-6.691862621,0.8602,-6.392544977,0.8809,-6.067374056,0.8301,-6.684029655,0.8664,-6.378719832,0.8834,-6.065855188,0.8898,-5.752272167,0.8964,-5.132414673,0.8963,-4.811352704,0.9074,-4.098269308,0.9119,-3.66174277,0.9228,-3.2644011};MillerUpdatingRegression model=new MillerUpdatingRegression(10,true);int off=0;double[]tmp=new double[10];int nobs=82;for (int i=0;i < nobs;i++){tmp[0]=data[off + 1];tmp[1]=tmp[0]* tmp[0];tmp[2]=tmp[0]* tmp[1];tmp[3]=tmp[0]* tmp[2];tmp[4]=tmp[0]* tmp[3];tmp[5]=tmp[0]* tmp[4];tmp[6]=tmp[0]* tmp[5];tmp[7]=tmp[0]* tmp[6];tmp[8]=tmp[0]* tmp[7];tmp[9]=tmp[0]* tmp[8];model.addObservation(tmp,data[off]);off+=2;}RegressionResults result=model.regress();double[]betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{-1467.48961422980,-2772.17959193342,-2316.37108160893,-1127.97394098372,-354.478233703349,-75.1242017393757,-10.8753180355343,-1.06221498588947,-0.670191154593408E-01,-0.246781078275479E-02,-0.402962525080404E-04},1E-5);double[]se=result.getStdErrorOfEstimates();TestUtils.assertEquals(se,new double[]{298.084530995537,559.779865474950,466.477572127796,227.204274477751,71.6478660875927,15.2897178747400,2.23691159816033,0.221624321934227,0.142363763154724E-01,0.535617408889821E-03,0.896632837373868E-05},1E-5);TestUtils.assertEquals(0.996727416185620,result.getRSquared(),1.0e-8);TestUtils.assertEquals(0.112091743968020E-04,result.getMeanSquareError(),1.0e-10);TestUtils.assertEquals(0.795851382172941E-03,result.getErrorSumSquares(),1.0e-10);}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testWampler1",0,"@Test public void testWampler1(){double[]data=new double[]{1,0,6,1,63,2,364,3,1365,4,3906,5,9331,6,19608,7,37449,8,66430,9,111111,10,177156,11,271453,12,402234,13,579195,14,813616,15,1118481,16,1508598,17,2000719,18,2613660,19,3368421,20};MillerUpdatingRegression model=new MillerUpdatingRegression(5,true);int off=0;double[]tmp=new double[5];int nobs=21;for (int i=0;i < nobs;i++){tmp[0]=data[off + 1];tmp[1]=tmp[0]* tmp[0];tmp[2]=tmp[0]* tmp[1];tmp[3]=tmp[0]* tmp[2];tmp[4]=tmp[0]* tmp[3];model.addObservation(tmp,data[off]);off+=2;}RegressionResults result=model.regress();double[]betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-8);double[]se=result.getStdErrorOfEstimates();TestUtils.assertEquals(se,new double[]{0.0,0.0,0.0,0.0,0.0,0.0},1E-8);TestUtils.assertEquals(1.0,result.getRSquared(),1.0e-10);TestUtils.assertEquals(0,result.getMeanSquareError(),1.0e-7);TestUtils.assertEquals(0.00,result.getErrorSumSquares(),1.0e-6);return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testWampler2",0,"@Test public void testWampler2(){double[]data=new double[]{1.00000,0,1.11111,1,1.24992,2,1.42753,3,1.65984,4,1.96875,5,2.38336,6,2.94117,7,3.68928,8,4.68559,9,6.00000,10,7.71561,11,9.92992,12,12.75603,13,16.32384,14,20.78125,15,26.29536,16,33.05367,17,41.26528,18,51.16209,19,63.00000,20};MillerUpdatingRegression model=new MillerUpdatingRegression(5,true);int off=0;double[]tmp=new double[5];int nobs=21;for (int i=0;i < nobs;i++){tmp[0]=data[off + 1];tmp[1]=tmp[0]* tmp[0];tmp[2]=tmp[0]* tmp[1];tmp[3]=tmp[0]* tmp[2];tmp[4]=tmp[0]* tmp[3];model.addObservation(tmp,data[off]);off+=2;}RegressionResults result=model.regress();double[]betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0e-1,1.0e-2,1.0e-3,1.0e-4,1.0e-5},1E-8);double[]se=result.getStdErrorOfEstimates();TestUtils.assertEquals(se,new double[]{0.0,0.0,0.0,0.0,0.0,0.0},1E-8);TestUtils.assertEquals(1.0,result.getRSquared(),1.0e-10);TestUtils.assertEquals(0,result.getMeanSquareError(),1.0e-7);TestUtils.assertEquals(0.00,result.getErrorSumSquares(),1.0e-6);return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testWampler3",0,"@Test public void testWampler3(){double[]data=new double[]{760,0,-2042,1,2111,2,-1684,3,3888,4,1858,5,11379,6,17560,7,39287,8,64382,9,113159,10,175108,11,273291,12,400186,13,581243,14,811568,15,1121004,16,1506550,17,2002767,18,2611612,19,3369180,20};MillerUpdatingRegression model=new MillerUpdatingRegression(5,true);int off=0;double[]tmp=new double[5];int nobs=21;for (int i=0;i < nobs;i++){tmp[0]=data[off + 1];tmp[1]=tmp[0]* tmp[0];tmp[2]=tmp[0]* tmp[1];tmp[3]=tmp[0]* tmp[2];tmp[4]=tmp[0]* tmp[3];model.addObservation(tmp,data[off]);off+=2;}RegressionResults result=model.regress();double[]betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-8);double[]se=result.getStdErrorOfEstimates();TestUtils.assertEquals(se,new double[]{2152.32624678170,2363.55173469681,779.343524331583,101.475507550350,5.64566512170752,0.112324854679312},1E-8);TestUtils.assertEquals(.999995559025820,result.getRSquared(),1.0e-10);TestUtils.assertEquals(5570284.53333333,result.getMeanSquareError(),1.0e-7);TestUtils.assertEquals(83554268.0000000,result.getErrorSumSquares(),1.0e-6);return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testWampler4",0,"public void testWampler4(){double[]data=new double[]{75901,0,-204794,1,204863,2,-204436,3,253665,4,-200894,5,214131,6,-185192,7,221249,8,-138370,9,315911,10,-27644,11,455253,12,197434,13,783995,14,608816,15,1370781,16,1303798,17,2205519,18,2408860,19,3444321,20};MillerUpdatingRegression model=new MillerUpdatingRegression(5,true);int off=0;double[]tmp=new double[5];int nobs=21;for (int i=0;i < nobs;i++){tmp[0]=data[off + 1];tmp[1]=tmp[0]* tmp[0];tmp[2]=tmp[0]* tmp[1];tmp[3]=tmp[0]* tmp[2];tmp[4]=tmp[0]* tmp[3];model.addObservation(tmp,data[off]);off+=2;}RegressionResults result=model.regress();double[]betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{1.0,1.0,1.0,1.0,1.0,1.0},1E-8);double[]se=result.getStdErrorOfEstimates();TestUtils.assertEquals(se,new double[]{215232.624678170,236355.173469681,77934.3524331583,10147.5507550350,564.566512170752,11.2324854679312},1E-8);TestUtils.assertEquals(.957478440825662,result.getRSquared(),1.0e-10);TestUtils.assertEquals(55702845333.3333,result.getMeanSquareError(),1.0e-4);TestUtils.assertEquals(835542680000.000,result.getErrorSumSquares(),1.0e-3);return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testLongly",0,"/** * Test Longley dataset against certified values provided by NIST. Data Source: J. Longley (1967)""An Appraisal of Least Squares Programs for the Electronic Computer from the Point of View of the User"" Journal of the American Statistical Association,vol. 62. September,pp. 819-841. Certified values (and data)are from NIST: http://www.itl.nist.gov/div898/strd/lls/data/LINKS/DATA/Longley.dat*/@Test public void testLongly(){double[]design=new double[]{60323,83.0,234289,2356,1590,107608,1947,61122,88.5,259426,2325,1456,108632,1948,60171,88.2,258054,3682,1616,109773,1949,61187,89.5,284599,3351,1650,110929,1950,63221,96.2,328975,2099,3099,112075,1951,63639,98.1,346999,1932,3594,113270,1952,64989,99.0,365385,1870,3547,115094,1953,63761,100.0,363112,3578,3350,116219,1954,66019,101.2,397469,2904,3048,117388,1955,67857,104.6,419180,2822,2857,118734,1956,68169,108.4,442769,2936,2798,120445,1957,66513,110.8,444546,4681,2637,121950,1958,68655,112.6,482704,3813,2552,123366,1959,69564,114.2,502601,3931,2514,125368,1960,69331,115.7,518173,4806,2572,127852,1961,70551,116.9,554894,4007,2827,130081,1962};final int nobs=16;final int nvars=6;MillerUpdatingRegression model=new MillerUpdatingRegression(6,true);int off=0;double[]tmp=new double[6];for (int i=0;i < nobs;i++){System.arraycopy(design,off + 1,tmp,0,nvars);model.addObservation(tmp,design[off]);off+=nvars + 1;}RegressionResults result=model.regress();double[]betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{-3482258.63459582,15.0618722713733,-0.358191792925910E-01,-2.02022980381683,-1.03322686717359,-0.511041056535807E-01,1829.15146461355},1E-8);double[]errors=result.getStdErrorOfEstimates();TestUtils.assertEquals(new double[]{890420.383607373,84.9149257747669,0.334910077722432E-01,0.488399681651699,0.214274163161675,0.226073200069370,455.478499142212},errors,1E-6);TestUtils.assertEquals(0.995479004577296,result.getRSquared(),1E-12);TestUtils.assertEquals(0.992465007628826,result.getAdjustedRSquared(),1E-12);model=new MillerUpdatingRegression(6,false);off=0;for (int i=0;i < nobs;i++){System.arraycopy(design,off + 1,tmp,0,nvars);model.addObservation(tmp,design[off]);off+=nvars + 1;}result=model.regress();betaHat=result.getParameterEstimates();TestUtils.assertEquals(betaHat,new double[]{-52.99357013868291,0.07107319907358,-0.42346585566399,-0.57256866841929,-0.41420358884978,48.41786562001326},1E-11);errors=result.getStdErrorOfEstimates();TestUtils.assertEquals(new double[]{129.54486693117232,0.03016640003786,0.41773654056612,0.27899087467676,0.32128496193363,17.68948737819961},errors,1E-11);TestUtils.assertEquals(0.9999670130706,result.getRSquared(),1E-12);TestUtils.assertEquals(0.999947220913,result.getAdjustedRSquared(),1E-12);}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testOneRedundantColumn",0,"@Test public void testOneRedundantColumn(){MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);MillerUpdatingRegression instance2=new MillerUpdatingRegression(5,false);double[][]x=new double[airdata[0].length][];double[][]x2=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[4];x2[i]=new double[5];x[i][0]=1.0;x[i][1]=Math.log(airdata[3][i]);x[i][2]=Math.log(airdata[4][i]);x[i][3]=airdata[5][i];x2[i][0]=x[i][0];x2[i][1]=x[i][1];x2[i][2]=x[i][2];x2[i][3]=x[i][3];x2[i][4]=x[i][3];y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);RegressionResults result=instance.regress();Assert.assertNotNull(""Could not estimate initial regression"",result);instance2.addObservations(x2,y);RegressionResults resultRedundant=instance2.regress();Assert.assertNotNull(""Could not estimate redundant regression"",resultRedundant);double[]beta=result.getParameterEstimates();double[]betar=resultRedundant.getParameterEstimates();double[]se=result.getStdErrorOfEstimates();double[]ser=resultRedundant.getStdErrorOfEstimates();for (int i=0;i < beta.length;i++){if (Math.abs(beta[i]- betar[i])> 1.0e-8){Assert.fail(""Parameters not correctly estimated"");}if (Math.abs(se[i]- ser[i])> 1.0e-8){Assert.fail(""Standard errors not correctly estimated"");}for (int j=0;j < i;j++){if (Math.abs(result.getCovarianceOfParameters(i,j)- resultRedundant.getCovarianceOfParameters(i,j))> 1.0e-8){Assert.fail(""Variance Covariance not correct"");}}}TestUtils.assertEquals(result.getAdjustedRSquared(),resultRedundant.getAdjustedRSquared(),1.0e-8);TestUtils.assertEquals(result.getErrorSumSquares(),resultRedundant.getErrorSumSquares(),1.0e-8);TestUtils.assertEquals(result.getMeanSquareError(),resultRedundant.getMeanSquareError(),1.0e-8);TestUtils.assertEquals(result.getRSquared(),resultRedundant.getRSquared(),1.0e-8);return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testThreeRedundantColumn",0,"@Test public void testThreeRedundantColumn(){MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);MillerUpdatingRegression instance2=new MillerUpdatingRegression(7,false);double[][]x=new double[airdata[0].length][];double[][]x2=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[4];x2[i]=new double[7];x[i][0]=1.0;x[i][1]=Math.log(airdata[3][i]);x[i][2]=Math.log(airdata[4][i]);x[i][3]=airdata[5][i];x2[i][0]=x[i][0];x2[i][1]=x[i][0];x2[i][2]=x[i][1];x2[i][3]=x[i][2];x2[i][4]=x[i][1];x2[i][5]=x[i][3];x2[i][6]=x[i][2];y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);RegressionResults result=instance.regress();Assert.assertNotNull(""Could not estimate initial regression"",result);instance2.addObservations(x2,y);RegressionResults resultRedundant=instance2.regress();Assert.assertNotNull(""Could not estimate redundant regression"",resultRedundant);double[]beta=result.getParameterEstimates();double[]betar=resultRedundant.getParameterEstimates();double[]se=result.getStdErrorOfEstimates();double[]ser=resultRedundant.getStdErrorOfEstimates();if (Math.abs(beta[0]- betar[0])> 1.0e-8){Assert.fail(""Parameters not correct after reorder (0,3)"");}if (Math.abs(beta[1]- betar[2])> 1.0e-8){Assert.fail(""Parameters not correct after reorder (1,2)"");}if (Math.abs(beta[2]- betar[3])> 1.0e-8){Assert.fail(""Parameters not correct after reorder (2,1)"");}if (Math.abs(beta[3]- betar[5])> 1.0e-8){Assert.fail(""Parameters not correct after reorder (3,0)"");}if (Math.abs(se[0]- ser[0])> 1.0e-8){Assert.fail(""Se not correct after reorder (0,3)"");}if (Math.abs(se[1]- ser[2])> 1.0e-8){Assert.fail(""Se not correct after reorder (1,2)"");}if (Math.abs(se[2]- ser[3])> 1.0e-8){Assert.fail(""Se not correct after reorder (2,1)"");}if (Math.abs(se[3]- ser[5])> 1.0e-8){Assert.fail(""Se not correct after reorder (3,0)"");}if (Math.abs(result.getCovarianceOfParameters(0,0)- resultRedundant.getCovarianceOfParameters(0,0))> 1.0e-8){Assert.fail(""VCV not correct after reorder (0,0)"");}if (Math.abs(result.getCovarianceOfParameters(0,1)- resultRedundant.getCovarianceOfParameters(0,2))> 1.0e-8){Assert.fail(""VCV not correct after reorder (0,1)<->(0,2)"");}if (Math.abs(result.getCovarianceOfParameters(0,2)- resultRedundant.getCovarianceOfParameters(0,3))> 1.0e-8){Assert.fail(""VCV not correct after reorder (0,2)<->(0,1)"");}if (Math.abs(result.getCovarianceOfParameters(0,3)- resultRedundant.getCovarianceOfParameters(0,5))> 1.0e-8){Assert.fail(""VCV not correct after reorder (0,3)<->(0,3)"");}if (Math.abs(result.getCovarianceOfParameters(1,0)- resultRedundant.getCovarianceOfParameters(2,0))> 1.0e-8){Assert.fail(""VCV not correct after reorder (1,0)<->(2,0)"");}if (Math.abs(result.getCovarianceOfParameters(1,1)- resultRedundant.getCovarianceOfParameters(2,2))> 1.0e-8){Assert.fail(""VCV not correct  (1,1)<->(2,1)"");}if (Math.abs(result.getCovarianceOfParameters(1,2)- resultRedundant.getCovarianceOfParameters(2,3))> 1.0e-8){Assert.fail(""VCV not correct  (1,2)<->(2,2)"");}if (Math.abs(result.getCovarianceOfParameters(2,0)- resultRedundant.getCovarianceOfParameters(3,0))> 1.0e-8){Assert.fail(""VCV not correct  (2,0)<->(1,0)"");}if (Math.abs(result.getCovarianceOfParameters(2,1)- resultRedundant.getCovarianceOfParameters(3,2))> 1.0e-8){Assert.fail(""VCV not correct  (2,1)<->(1,2)"");}if (Math.abs(result.getCovarianceOfParameters(3,3)- resultRedundant.getCovarianceOfParameters(5,5))> 1.0e-8){Assert.fail(""VCV not correct  (3,3)<->(3,2)"");}TestUtils.assertEquals(result.getAdjustedRSquared(),resultRedundant.getAdjustedRSquared(),1.0e-8);TestUtils.assertEquals(result.getErrorSumSquares(),resultRedundant.getErrorSumSquares(),1.0e-8);TestUtils.assertEquals(result.getMeanSquareError(),resultRedundant.getMeanSquareError(),1.0e-8);TestUtils.assertEquals(result.getRSquared(),resultRedundant.getRSquared(),1.0e-8);return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testPCorr",0,"@Test public void testPCorr(){MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);double[][]x=new double[airdata[0].length][];double[]y=new double[airdata[0].length];double[]cp=new double[10];double[]yxcorr=new double[4];double[]diag=new double[4];double sumysq=0.0;int off=0;for (int i=0;i < airdata[0].length;i++){x[i]=new double[4];x[i][0]=1.0;x[i][1]=Math.log(airdata[3][i]);x[i][2]=Math.log(airdata[4][i]);x[i][3]=airdata[5][i];y[i]=Math.log(airdata[2][i]);off=0;for (int j=0;j < 4;j++){double tmp=x[i][j];for (int k=0;k <= j;k++,off++){cp[off]+=tmp * x[i][k];}yxcorr[j]+=tmp * y[i];}sumysq+=y[i]* y[i];}PearsonsCorrelation pearson=new PearsonsCorrelation(x);RealMatrix corr=pearson.getCorrelationMatrix();off=0;for (int i=0;i < 4;i++,off+=(i + 1)){diag[i]=FastMath.sqrt(cp[off]);}instance.addObservations(x,y);double[]pc=instance.getPartialCorrelations(0);int idx=0;off=0;int off2=6;for (int i=0;i < 4;i++){for (int j=0;j < i;j++){if (Math.abs(pc[idx]- cp[off]/ (diag[i]* diag[j]))> 1.0e-8){Assert.fail(""Failed cross products... i = "" + i + "" j = ""+ j);}++idx;++off;}++off;if (Math.abs(pc[i + off2]- yxcorr[i]/ (FastMath.sqrt(sumysq)* diag[i]))> 1.0e-8){Assert.fail(""Assert.failed cross product i = "" + i + "" y"");}}double[]pc2=instance.getPartialCorrelations(1);idx=0;for (int i=1;i < 4;i++){for (int j=1;j < i;j++){if (Math.abs(pc2[idx]- corr.getEntry(j,i))> 1.0e-8){Assert.fail(""Failed cross products... i = "" + i + "" j = ""+ j);}++idx;}}double[]pc3=instance.getPartialCorrelations(2);if (pc3 == null){Assert.fail(""Should not be null"");}return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testHdiag",0,"@Test public void testHdiag(){MillerUpdatingRegression instance=new MillerUpdatingRegression(4,false);double[][]x=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[4];x[i][0]=1.0;x[i][1]=Math.log(airdata[3][i]);x[i][2]=Math.log(airdata[4][i]);x[i][3]=airdata[5][i];y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);OLSMultipleLinearRegression ols=new OLSMultipleLinearRegression();ols.setNoIntercept(true);ols.newSampleData(y,x);RealMatrix rm=ols.calculateHat();for (int i=0;i < x.length;i++){TestUtils.assertEquals(instance.getDiagonalOfHatMatrix(x[i]),rm.getEntry(i,i),1.0e-8);}return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testHdiagConstant",0,"@Test public void testHdiagConstant(){MillerUpdatingRegression instance=new MillerUpdatingRegression(3,true);double[][]x=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[3];x[i][0]=Math.log(airdata[3][i]);x[i][1]=Math.log(airdata[4][i]);x[i][2]=airdata[5][i];y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);OLSMultipleLinearRegression ols=new OLSMultipleLinearRegression();ols.setNoIntercept(false);ols.newSampleData(y,x);RealMatrix rm=ols.calculateHat();for (int i=0;i < x.length;i++){TestUtils.assertEquals(instance.getDiagonalOfHatMatrix(x[i]),rm.getEntry(i,i),1.0e-8);}return;}"
"org.apache.commons.math3.stat.regression.MillerUpdatingRegressionTest.testSubsetRegression",0,"@Test public void testSubsetRegression(){MillerUpdatingRegression instance=new MillerUpdatingRegression(3,true);MillerUpdatingRegression redRegression=new MillerUpdatingRegression(2,true);double[][]x=new double[airdata[0].length][];double[][]xReduced=new double[airdata[0].length][];double[]y=new double[airdata[0].length];for (int i=0;i < airdata[0].length;i++){x[i]=new double[3];x[i][0]=Math.log(airdata[3][i]);x[i][1]=Math.log(airdata[4][i]);x[i][2]=airdata[5][i];xReduced[i]=new double[2];xReduced[i][0]=Math.log(airdata[3][i]);xReduced[i][1]=Math.log(airdata[4][i]);y[i]=Math.log(airdata[2][i]);}instance.addObservations(x,y);redRegression.addObservations(xReduced,y);RegressionResults resultsInstance=instance.regress(new int[]{0,1,2});RegressionResults resultsReduced=redRegression.regress();TestUtils.assertEquals(resultsInstance.getParameterEstimates(),resultsReduced.getParameterEstimates(),1.0e-12);TestUtils.assertEquals(resultsInstance.getStdErrorOfEstimates(),resultsReduced.getStdErrorOfEstimates(),1.0e-12);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testQuantiles",0,"@Test public void testQuantiles(){setCumulativeTestValues(new double[]{0,0.0396495152787,0.16601209243,0.272533253269,0.357618409638,0.426488363093,0.483255136841,0.530823013877});setDensityTestValues(new double[]{0,0.0873055825147,0.0847676303432,0.0677935186237,0.0544105523058,0.0444614628804,0.0369750288945,0.0312206409653});verifyQuantiles();verifyDensities();setDistribution(new LogNormalDistribution(0,1));setCumulativeTestValues(new double[]{0,0,0,0.5,0.755891404214,0.864031392359,0.917171480998,0.946239689548});setDensityTestValues(new double[]{0,0,0,0.398942280401,0.156874019279,0.07272825614,0.0381534565119,0.0218507148303});verifyQuantiles();verifyDensities();setDistribution(new LogNormalDistribution(0,0.1));setCumulativeTestValues(new double[]{0,0,0,1.28417563064e-117,1.39679883412e-58,1.09839325447e-33,2.52587961726e-20,2.0824223487e-12});setDensityTestValues(new double[]{0,0,0,2.96247992535e-114,1.1283370232e-55,4.43812313223e-31,5.85346445002e-18,2.9446618076e-10});verifyQuantiles();verifyDensities();}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetScale",0,"@Test public void testGetScale(){LogNormalDistribution distribution=(LogNormalDistribution)getDistribution();Assert.assertEquals(2.1,distribution.getScale(),0);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testGetShape",0,"@Test public void testGetShape(){LogNormalDistribution distribution=(LogNormalDistribution)getDistribution();Assert.assertEquals(1.4,distribution.getShape(),0);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testPreconditions",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions(){new LogNormalDistribution(1,0);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensity",0,"@Test public void testDensity(){double[]x=new double[]{-2,-1,0,1,2};checkDensity(0,1,x,new double[]{0.0000000000,0.0000000000,0.0000000000,0.3989422804,0.1568740193});checkDensity(1.1,1,x,new double[]{0.0000000000,0.0000000000,0.0000000000,0.2178521770,0.1836267118});}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testExtremeValues",0,"/** * Check to make sure top-coding of extreme values works correctly. Verifies fixes for JIRA MATH-167,MATH-414*/@Test public void testExtremeValues(){LogNormalDistribution d=new LogNormalDistribution(0,1);for (int i=0;i < 1e5;i++){double upperTail=d.cumulativeProbability(i);if (i <= 72){Assert.assertTrue(upperTail < 1.0d);}else {Assert.assertTrue(upperTail > 0.99999);}}Assert.assertEquals(d.cumulativeProbability(Double.MAX_VALUE),1,0);Assert.assertEquals(d.cumulativeProbability(-Double.MAX_VALUE),0,0);Assert.assertEquals(d.cumulativeProbability(Double.POSITIVE_INFINITY),1,0);Assert.assertEquals(d.cumulativeProbability(Double.NEGATIVE_INFINITY),0,0);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testMeanVariance",0,"@Test public void testMeanVariance(){final double tol=1e-9;LogNormalDistribution dist;dist=new LogNormalDistribution(0,1);Assert.assertEquals(dist.getNumericalMean(),1.6487212707001282,tol);Assert.assertEquals(dist.getNumericalVariance(),4.670774270471604,tol);dist=new LogNormalDistribution(2.2,1.4);Assert.assertEquals(dist.getNumericalMean(),24.046753552064498,tol);Assert.assertEquals(dist.getNumericalVariance(),3526.913651880464,tol);dist=new LogNormalDistribution(-2000.9,10.4);Assert.assertEquals(dist.getNumericalMean(),0.0,tol);Assert.assertEquals(dist.getNumericalVariance(),0.0,tol);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.LogNormalDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorTest.testGetWeights",0,"@Test public void testGetWeights(){final double[]points={0,1.2,3.4};final double[]weights={9.8,7.6,5.4};final GaussIntegrator integrator=new GaussIntegrator(new Pair<double[],double[]>(points,weights));Assert.assertEquals(weights.length,integrator.getNumberOfPoints());for (int i=0;i < integrator.getNumberOfPoints();i++){Assert.assertEquals(weights[i],integrator.getWeight(i),0d);}}"
"org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorTest.testGetPoints",0,"@Test public void testGetPoints(){final double[]points={0,1.2,3.4};final double[]weights={9.8,7.6,5.4};final GaussIntegrator integrator=new GaussIntegrator(new Pair<double[],double[]>(points,weights));Assert.assertEquals(points.length,integrator.getNumberOfPoints());for (int i=0;i < integrator.getNumberOfPoints();i++){Assert.assertEquals(points[i],integrator.getPoint(i),0d);}}"
"org.apache.commons.math3.analysis.integration.gauss.GaussIntegratorTest.testIntegrate",0,"@Test public void testIntegrate(){final double[]points={0,1,2,3,4,5};final double[]weights={1,1,1,1,1,1};final GaussIntegrator integrator=new GaussIntegrator(new Pair<double[],double[]>(points,weights));final double val=123.456;final UnivariateFunction c=new Constant(val);final double s=integrator.integrate(c);Assert.assertEquals(points.length * val,s,0d);}"
"org.apache.commons.math3.stat.descriptive.moment.MeanTest.testSmallSamples",0,"@Test public void testSmallSamples(){Mean mean=new Mean();Assert.assertTrue(Double.isNaN(mean.getResult()));mean.increment(1d);Assert.assertEquals(1d,mean.getResult(),0);}"
"org.apache.commons.math3.stat.descriptive.moment.MeanTest.testWeightedMean",0,"@Test public void testWeightedMean(){Mean mean=new Mean();Assert.assertEquals(expectedWeightedValue(),mean.evaluate(testArray,testWeightsArray,0,testArray.length),getTolerance());Assert.assertEquals(expectedValue(),mean.evaluate(testArray,identicalWeightsArray,0,testArray.length),getTolerance());}"
"org.apache.commons.math3.stat.descriptive.moment.InteractionTest.testInteraction",0,"@Test public void testInteraction(){FourthMoment m4=new FourthMoment();Mean m=new Mean(m4);Variance v=new Variance(m4);Skewness s=new Skewness(m4);Kurtosis k=new Kurtosis(m4);for (int i=0;i < testArray.length;i++){m4.increment(testArray[i]);}Assert.assertEquals(mean,m.getResult(),tolerance);Assert.assertEquals(var,v.getResult(),tolerance);Assert.assertEquals(skew,s.getResult(),tolerance);Assert.assertEquals(kurt,k.getResult(),tolerance);}"
"org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testDecomposition3x3",0,"@Test public void testDecomposition3x3(){RealMatrix m=MatrixUtils.createRealMatrix(new double[][]{{1,9,9},{9,225,225},{9,225,625}});RectangularCholeskyDecomposition d=new RectangularCholeskyDecomposition(m,1.0e-6);Assert.assertEquals(0.8,d.getRootMatrix().getEntry(0,2),1.0e-15);Assert.assertEquals(25.0,d.getRootMatrix().getEntry(2,0),1.0e-15);Assert.assertEquals(0.0,d.getRootMatrix().getEntry(2,2),1.0e-15);RealMatrix root=d.getRootMatrix();RealMatrix rebuiltM=root.multiply(root.transpose());Assert.assertEquals(0.0,m.subtract(rebuiltM).getNorm(),1.0e-15);}"
"org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testFullRank",0,"@Test public void testFullRank(){RealMatrix base=MatrixUtils.createRealMatrix(new double[][]{{0.1159548705,0.,0.,0.},{0.0896442724,0.1223540781,0.,0.},{0.0852155322,4.558668e-3,0.1083577299,0.},{0.0905486674,0.0213768077,0.0128878333,0.1014155693}});RealMatrix m=base.multiply(base.transpose());RectangularCholeskyDecomposition d=new RectangularCholeskyDecomposition(m,1.0e-10);RealMatrix root=d.getRootMatrix();RealMatrix rebuiltM=root.multiply(root.transpose());Assert.assertEquals(0.0,m.subtract(rebuiltM).getNorm(),1.0e-15);Assert.assertTrue(root.subtract(base).getNorm()> 0.3);}"
"org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest.testMath789",0,"@Test public void testMath789(){final RealMatrix m1=MatrixUtils.createRealMatrix(new double[][]{{0.013445532,0.010394690,0.009881156,0.010499559},{0.010394690,0.023006616,0.008196856,0.010732709},{0.009881156,0.008196856,0.019023866,0.009210099},{0.010499559,0.010732709,0.009210099,0.019107243}});composeAndTest(m1,4);final RealMatrix m2=MatrixUtils.createRealMatrix(new double[][]{{0.0,0.0,0.0,0.0,0.0},{0.0,0.013445532,0.010394690,0.009881156,0.010499559},{0.0,0.010394690,0.023006616,0.008196856,0.010732709},{0.0,0.009881156,0.008196856,0.019023866,0.009210099},{0.0,0.010499559,0.010732709,0.009210099,0.019107243}});composeAndTest(m2,4);final RealMatrix m3=MatrixUtils.createRealMatrix(new double[][]{{0.013445532,0.010394690,0.0,0.009881156,0.010499559},{0.010394690,0.023006616,0.0,0.008196856,0.010732709},{0.0,0.0,0.0,0.0,0.0},{0.009881156,0.008196856,0.0,0.019023866,0.009210099},{0.010499559,0.010732709,0.0,0.009210099,0.019107243}});composeAndTest(m3,4);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest.testStartSimplexInsideRange",0,"@Test public void testStartSimplexInsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(2.0,2.5,1.0,3.0,2.0,3.0);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})});final PointValuePair optimum=optimizer.optimize(new MaxEval(300),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(wrapped.boundedToUnbounded(new double[]{1.5,2.25})));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest.testOptimumOutsideRange",0,"@Test public void testOptimumOutsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,1.0,3.0,2.0,3.0);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})});final PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(wrapped.boundedToUnbounded(new double[]{1.5,2.25})));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest.testUnbounded",0,"@Test public void testUnbounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})});final PointValuePair optimum=optimizer.optimize(new MaxEval(300),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(wrapped.boundedToUnbounded(new double[]{1.5,2.25})));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest.testHalfBounded",0,"@Test public void testHalfBounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,4.0,1.0,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,3.0);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-13,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})});final PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(wrapped.boundedToUnbounded(new double[]{1.5,2.25})));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],1e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],1e-7);}"
"org.apache.commons.math3.optimization.fitting.CurveFitterTest.testMath303",0,"@Test public void testMath303(){LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();CurveFitter<ParametricUnivariateFunction> fitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);fitter.addObservedPoint(2.805d,0.6934785852953367d);fitter.addObservedPoint(2.74333333333333d,0.6306772025518496d);fitter.addObservedPoint(1.655d,0.9474675497289684);fitter.addObservedPoint(1.725d,0.9013594835804194d);ParametricUnivariateFunction sif=new SimpleInverseFunction();double[]initialguess1=new double[1];initialguess1[0]=1.0d;Assert.assertEquals(1,fitter.fit(sif,initialguess1).length);double[]initialguess2=new double[2];initialguess2[0]=1.0d;initialguess2[1]=.5d;Assert.assertEquals(2,fitter.fit(sif,initialguess2).length);}"
"org.apache.commons.math3.optimization.fitting.CurveFitterTest.testMath304",0,"@Test public void testMath304(){LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();CurveFitter<ParametricUnivariateFunction> fitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);fitter.addObservedPoint(2.805d,0.6934785852953367d);fitter.addObservedPoint(2.74333333333333d,0.6306772025518496d);fitter.addObservedPoint(1.655d,0.9474675497289684);fitter.addObservedPoint(1.725d,0.9013594835804194d);ParametricUnivariateFunction sif=new SimpleInverseFunction();double[]initialguess1=new double[1];initialguess1[0]=1.0d;Assert.assertEquals(1.6357215104109237,fitter.fit(sif,initialguess1)[0],1.0e-14);double[]initialguess2=new double[1];initialguess2[0]=10.0d;Assert.assertEquals(1.6357215104109237,fitter.fit(sif,initialguess1)[0],1.0e-14);}"
"org.apache.commons.math3.optimization.fitting.CurveFitterTest.testMath372",0,"@Test public void testMath372(){LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();CurveFitter<ParametricUnivariateFunction> curveFitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);curveFitter.addObservedPoint(15,4443);curveFitter.addObservedPoint(31,8493);curveFitter.addObservedPoint(62,17586);curveFitter.addObservedPoint(125,30582);curveFitter.addObservedPoint(250,45087);curveFitter.addObservedPoint(500,50683);ParametricUnivariateFunction f=new ParametricUnivariateFunction(){public double value(double x,double... parameters){double a=parameters[0];double b=parameters[1];double c=parameters[2];double d=parameters[3];return d + ((a - d)/ (1 + FastMath.pow(x / c,b)));}public double[]gradient(double x,double... parameters){double a=parameters[0];double b=parameters[1];double c=parameters[2];double d=parameters[3];double[]gradients=new double[4];double den=1 + FastMath.pow(x / c,b);gradients[0]=1 / den;gradients[1]=-((a - d)* FastMath.pow(x / c,b)* FastMath.log(x / c))/ (den * den);gradients[2]=(b * FastMath.pow(x / c,b - 1)* (x / (c * c))* (a - d))/ (den * den);gradients[3]=1 - (1 / den);return gradients;}};double[]initialGuess=new double[]{1500,0.95,65,35000};double[]estimatedParameters=curveFitter.fit(f,initialGuess);Assert.assertEquals(2411.00,estimatedParameters[0],500.00);Assert.assertEquals(1.62,estimatedParameters[1],0.04);Assert.assertEquals(111.22,estimatedParameters[2],0.30);Assert.assertEquals(55347.47,estimatedParameters[3],300.00);Assert.assertTrue(optimizer.getRMS()< 600.0);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testNonInvertible",0,"@Override @Test(expected=SingularMatrixException.class)public void testNonInvertible(){LinearProblem problem=new LinearProblem(new double[][]{{1,2,-3},{2,1,3},{-3,0,-9}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(100,problem,problem.target,new double[]{1,1,1},new double[]{0,0,0});Assert.assertTrue(FastMath.sqrt(problem.target.length)* optimizer.getRMS()> 0.6);optimizer.computeCovariances(optimum.getPoint(),1.5e-14);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testControlParameters",0,"@Test public void testControlParameters(){CircleVectorial circle=new CircleVectorial();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);checkEstimate(circle,0.1,10,1.0e-14,1.0e-16,1.0e-10,false);checkEstimate(circle,0.1,10,1.0e-15,1.0e-17,1.0e-10,true);checkEstimate(circle,0.1,5,1.0e-15,1.0e-16,1.0e-10,true);circle.addPoint(300,-300);checkEstimate(circle,0.1,20,1.0e-18,1.0e-16,1.0e-10,true);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testMath199",0,"@Ignore @Test public void testMath199(){try {QuadraticProblem problem=new QuadraticProblem();problem.addPoint(0,-3.182591015485607);problem.addPoint(1,-2.5581184967730577);problem.addPoint(2,-2.1488478161387325);problem.addPoint(3,-1.9122489313410047);problem.addPoint(4,1.7785661310051026);LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer(100,1e-10,1e-10,1e-10,0);optimizer.optimize(100,problem,new double[]{0,0,0,0,0},new double[]{0.0,4.4e-323,1.0,4.4e-323,0.0},new double[]{0,0,0});Assert.fail(""an exception should have been thrown"");}catch(ConvergenceException ee){}}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testBevington",0,"/** * Non-linear test case: fitting of decay curve (from Chapter 8 of Bevington's textbook,""Data reduction and analysis for the physical sciences""). XXX The expected (""reference"")values may not be accurate and the tolerance too relaxed for this test to be currently really useful (the issue is under investigation).*/@Test public void testBevington(){final double[][]dataPoints={{15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,255,270,285,300,315,330,345,360,375,390,405,420,435,450,465,480,495,510,525,540,555,570,585,600,615,630,645,660,675,690,705,720,735,750,765,780,795,810,825,840,855,870,885},{775,479,380,302,185,157,137,119,110,89,74,61,66,68,48,54,51,46,55,29,28,37,49,26,35,29,31,24,25,35,24,30,26,28,21,18,20,27,17,17,14,17,24,11,22,17,12,10,13,16,9,9,14,21,17,13,12,18,10}};final BevingtonProblem problem=new BevingtonProblem();final int len=dataPoints[0].length;final double[]weights=new double[len];for (int i=0;i < len;i++){problem.addPoint(dataPoints[0][i],dataPoints[1][i]);weights[i]=1 / dataPoints[1][i];}final LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();final PointVectorValuePair optimum=optimizer.optimize(100,problem,dataPoints[1],weights,new double[]{10,900,80,27,225});final double[]solution=optimum.getPoint();final double[]expectedSolution={10.4,958.3,131.4,33.9,205.0};final double[][]covarMatrix=optimizer.computeCovariances(solution,1e-14);final double[][]expectedCovarMatrix={{3.38,-3.69,27.98,-2.34,-49.24},{-3.69,2492.26,81.89,-69.21,-8.9},{27.98,81.89,468.99,-44.22,-615.44},{-2.34,-69.21,-44.22,6.39,53.80},{-49.24,-8.9,-615.44,53.8,929.45}};final int numParams=expectedSolution.length;for (int i=0;i < numParams;i++){final double error=FastMath.sqrt(expectedCovarMatrix[i][i]);Assert.assertEquals(""Parameter "" + i,expectedSolution[i],solution[i],error);}for (int i=0;i < numParams;i++){for (int j=0;j < numParams;j++){Assert.assertEquals(""Covariance matrix ["" + i + ""][""+ j+ ""]"",expectedCovarMatrix[i][j],covarMatrix[i][j],FastMath.abs(0.1 * expectedCovarMatrix[i][j]));}}}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting2",0,"@Test public void testCircleFitting2(){final double xCenter=123.456;final double yCenter=654.321;final double xSigma=10;final double ySigma=15;final double radius=111.111;final long seed=59421061L;final RandomCirclePointGenerator factory=new RandomCirclePointGenerator(xCenter,yCenter,radius,xSigma,ySigma,seed);final CircleProblem circle=new CircleProblem(xSigma,ySigma);final int numPoints=10;for(Vector2D p : factory.generate(numPoints)){circle.addPoint(p);}final double[]init={90,659,115};final LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();final PointVectorValuePair optimum=optimizer.optimize(100,circle,circle.target(),circle.weight(),init);final double[]paramFound=optimum.getPoint();final double[][]covMatrix=optimizer.computeCovariances(paramFound,1e-14);final double[]asymptoticStandardErrorFound=optimizer.guessParametersErrors();final double[]sigmaFound=new double[covMatrix.length];for (int i=0;i < covMatrix.length;i++){sigmaFound[i]=FastMath.sqrt(covMatrix[i][i]);}Assert.assertEquals(xCenter,paramFound[0],asymptoticStandardErrorFound[0]);Assert.assertEquals(yCenter,paramFound[1],asymptoticStandardErrorFound[1]);Assert.assertEquals(radius,paramFound[2],asymptoticStandardErrorFound[2]);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testGetIterations",0,"@Test public void testGetIterations(){AbstractLeastSquaresOptimizer optim=createOptimizer();optim.optimize(new MaxEval(100),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{3}),new ModelFunction(new MultivariateVectorFunction(){public double[]value(double[]point){return new double[]{FastMath.pow(point[0],4)};}}),new ModelFunctionJacobian(new MultivariateMatrixFunction(){public double[][]value(double[]point){return new double[][]{{0.25 * FastMath.pow(point[0],3)}};}}));Assert.assertTrue(optim.getIterations()> 0);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1.5,optimum.getPoint()[0],1e-10);Assert.assertEquals(3.0,optimum.getValue()[0],1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testQRColumnsPermutation",0,"@Test public void testQRColumnsPermutation(){LinearProblem problem=new LinearProblem(new double[][]{{1,-1},{0,2},{1,-2}},new double[]{4,6,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(7,optimum.getPoint()[0],1e-10);Assert.assertEquals(3,optimum.getPoint()[1],1e-10);Assert.assertEquals(4,optimum.getValue()[0],1e-10);Assert.assertEquals(6,optimum.getValue()[1],1e-10);Assert.assertEquals(1,optimum.getValue()[2],1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testNoDependency",0,"@Test public void testNoDependency(){LinearProblem problem=new LinearProblem(new double[][]{{2,0,0,0,0,0},{0,2,0,0,0,0},{0,0,2,0,0,0},{0,0,0,2,0,0},{0,0,0,0,2,0},{0,0,0,0,0,2}},new double[]{0,1.1,2.2,3.3,4.4,5.5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);for (int i=0;i < problem.target.length;++i){Assert.assertEquals(0.55 * i,optimum.getPoint()[i],1e-10);}}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testOneSet",0,"@Test public void testOneSet(){LinearProblem problem=new LinearProblem(new double[][]{{1,0,0},{-1,1,0},{0,-1,1}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum.getPoint()[0],1e-10);Assert.assertEquals(2,optimum.getPoint()[1],1e-10);Assert.assertEquals(3,optimum.getPoint()[2],1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testTwoSets",0,"@Test public void testTwoSets(){double epsilon=1e-7;LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(3,optimum.getPoint()[0],1e-10);Assert.assertEquals(4,optimum.getPoint()[1],1e-10);Assert.assertEquals(-1,optimum.getPoint()[2],1e-10);Assert.assertEquals(-2,optimum.getPoint()[3],1e-10);Assert.assertEquals(1 + epsilon,optimum.getPoint()[4],1e-10);Assert.assertEquals(1 - epsilon,optimum.getPoint()[5],1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testIllConditioned",0,"@Test public void testIllConditioned(){LinearProblem problem1=new LinearProblem(new double[][]{{10,7,8,7},{7,5,6,5},{8,6,10,9},{7,5,9,10}},new double[]{32,23,33,31});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum1=optimizer.optimize(new MaxEval(100),problem1.getModelFunction(),problem1.getModelFunctionJacobian(),problem1.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum1.getPoint()[0],1e-10);Assert.assertEquals(1,optimum1.getPoint()[1],1e-10);Assert.assertEquals(1,optimum1.getPoint()[2],1e-10);Assert.assertEquals(1,optimum1.getPoint()[3],1e-10);LinearProblem problem2=new LinearProblem(new double[][]{{10.00,7.00,8.10,7.20},{7.08,5.04,6.00,5.00},{8.00,5.98,9.89,9.00},{6.99,4.99,9.00,9.98}},new double[]{32,23,33,31});PointVectorValuePair optimum2=optimizer.optimize(new MaxEval(100),problem2.getModelFunction(),problem2.getModelFunctionJacobian(),problem2.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-81,optimum2.getPoint()[0],1e-8);Assert.assertEquals(137,optimum2.getPoint()[1],1e-8);Assert.assertEquals(-34,optimum2.getPoint()[2],1e-8);Assert.assertEquals(22,optimum2.getPoint()[3],1e-8);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testMoreEstimatedParametersSimple",0,"@Test public void testMoreEstimatedParametersSimple(){LinearProblem problem=new LinearProblem(new double[][]{{3,2,0,0},{0,1,-1,1},{2,0,1,0}},new double[]{7,3,5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{7,6,5,4}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testMoreEstimatedParametersUnsorted",0,"@Test public void testMoreEstimatedParametersUnsorted(){LinearProblem problem=new LinearProblem(new double[][]{{1,1,0,0,0,0},{0,0,1,1,1,0},{0,0,0,0,1,-1},{0,0,-1,1,0,1},{0,0,0,-1,1,0}},new double[]{3,12,-1,7,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{2,2,2,2,2,2}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(3,optimum.getPointRef()[2],1e-10);Assert.assertEquals(4,optimum.getPointRef()[3],1e-10);Assert.assertEquals(5,optimum.getPointRef()[4],1e-10);Assert.assertEquals(6,optimum.getPointRef()[5],1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testRedundantEquations",0,"@Test public void testRedundantEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(2,optimum.getPointRef()[0],1e-10);Assert.assertEquals(1,optimum.getPointRef()[1],1e-10);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testInconsistentEquations",0,"@Test public void testInconsistentEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,4});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertTrue(optimizer.getRMS()> 0.1);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testInconsistentSizes1",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes1(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testInconsistentSizes2",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes2(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleVectorial circle=new CircleVectorial();circle.addPoint(30,68);circle.addPoint(50,-6);circle.addPoint(110,-20);circle.addPoint(35,15);circle.addPoint(45,97);AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(new double[]{0,0,0,0,0}),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{98.680,47.345}));Assert.assertTrue(optimizer.getEvaluations()< 10);double rms=optimizer.getRMS();Assert.assertEquals(1.768262623567235,FastMath.sqrt(circle.getN())* rms,1e-10);Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertEquals(69.96016176931406,circle.getRadius(center),1e-6);Assert.assertEquals(96.07590211815305,center.getX(),1e-6);Assert.assertEquals(48.13516790438953,center.getY(),1e-6);double[][]cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(1.839,cov[0][0],0.001);Assert.assertEquals(0.731,cov[0][1],0.001);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.786,cov[1][1],0.001);double r=circle.getRadius(center);for (double d=0;d < 2 * FastMath.PI;d+=0.01){circle.addPoint(center.getX()+ r * FastMath.cos(d),center.getY()+ r * FastMath.sin(d));}double[]target=new double[circle.getN()];Arrays.fill(target,0);double[]weights=new double[circle.getN()];Arrays.fill(weights,2);optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{98.680,47.345}));cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(0.0016,cov[0][0],0.001);Assert.assertEquals(3.2e-7,cov[0][1],1e-9);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.0016,cov[1][1],0.001);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFittingBadInit",0,"@Test public void testCircleFittingBadInit(){CircleVectorial circle=new CircleVectorial();double[][]points=circlePoints;double[]target=new double[points.length];Arrays.fill(target,0);double[]weights=new double[points.length];Arrays.fill(weights,2);for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{-12,-12}));Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertTrue(optimizer.getEvaluations()< 25);Assert.assertEquals(0.043,optimizer.getRMS(),1e-3);Assert.assertEquals(0.292235,circle.getRadius(center),1e-6);Assert.assertEquals(-0.151738,center.getX(),1e-6);Assert.assertEquals(0.2075001,center.getY(),1e-6);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testCircleFittingGoodInit",0,"@Test public void testCircleFittingGoodInit(){CircleVectorial circle=new CircleVectorial();double[][]points=circlePoints;double[]target=new double[points.length];Arrays.fill(target,0);double[]weights=new double[points.length];Arrays.fill(weights,2);for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{0,0}));Assert.assertEquals(-0.1517383071957963,optimum.getPointRef()[0],1e-6);Assert.assertEquals(0.2074999736353867,optimum.getPointRef()[1],1e-6);Assert.assertEquals(0.04268731682389561,optimizer.getRMS(),1e-8);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testKirby2",0,"@Test public void testKirby2()throws IOException {doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(),1E-7,1E-7);}"
"org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizerTest.testHahn1",0,"@Test public void testHahn1()throws IOException {doTestStRD(StatisticalReferenceDatasetFactory.createHahn1(),1E-7,1E-4);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit01",0,"/** * Basic.*/@Test public void testFit01(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET1,fitter);double[]parameters=fitter.fit();Assert.assertEquals(3496978.1837704973,parameters[0],1e-4);Assert.assertEquals(4.054933085999146,parameters[1],1e-4);Assert.assertEquals(0.015039355620304326,parameters[2],1e-4);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit02",0,"/** * Zero points is not enough observed points.*/@Test(expected=MathIllegalArgumentException.class)public void testFit02(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());fitter.fit();}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit03",0,"/** * Two points is not enough observed points.*/@Test(expected=MathIllegalArgumentException.class)public void testFit03(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(new double[][]{{4.0254623,531026.0},{4.02804905,664002.0}},fitter);fitter.fit();}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit04",0,"/** * Poor data: right of peak not symmetric with left of peak.*/@Test public void testFit04(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET2,fitter);double[]parameters=fitter.fit();Assert.assertEquals(233003.2967252038,parameters[0],1e-4);Assert.assertEquals(-10.654887521095983,parameters[1],1e-4);Assert.assertEquals(4.335937353196641,parameters[2],1e-4);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit05",0,"/** * Poor data: long tails.*/@Test public void testFit05(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET3,fitter);double[]parameters=fitter.fit();Assert.assertEquals(283863.81929180305,parameters[0],1e-4);Assert.assertEquals(-13.29641995105174,parameters[1],1e-4);Assert.assertEquals(1.7297330293549908,parameters[2],1e-4);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit06",0,"/** * Poor data: right of peak is missing.*/@Test public void testFit06(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET4,fitter);double[]parameters=fitter.fit();Assert.assertEquals(285250.66754309234,parameters[0],1e-4);Assert.assertEquals(-13.528375695228455,parameters[1],1e-4);Assert.assertEquals(1.5204344894331614,parameters[2],1e-4);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testFit07",0,"/** * Basic with smaller dataset.*/@Test public void testFit07(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET5,fitter);double[]parameters=fitter.fit();Assert.assertEquals(3514384.729342235,parameters[0],1e-4);Assert.assertEquals(4.054970307455625,parameters[1],1e-4);Assert.assertEquals(0.015029412832160017,parameters[2],1e-4);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testMath519",0,"@Test public void testMath519(){final double[]data={1.1143831578403364E-29,4.95281403484594E-28,1.1171347211930288E-26,1.7044813962636277E-25,1.9784716574832164E-24,1.8630236407866774E-23,1.4820532905097742E-22,1.0241963854632831E-21,6.275077366673128E-21,3.461808994532493E-20,1.7407124684715706E-19,8.056687953553974E-19,3.460193945992071E-18,1.3883326374011525E-17,5.233894983671116E-17,1.8630791465263745E-16,6.288759227922111E-16,2.0204433920597856E-15,6.198768938576155E-15,1.821419346860626E-14,5.139176445538471E-14,1.3956427429045787E-13,3.655705706448139E-13,9.253753324779779E-13,2.267636001476696E-12,5.3880460095836855E-12,1.2431632654852931E-11};GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());for (int i=0;i < data.length;i++){fitter.addObservedPoint(i,data[i]);}final double[]p=fitter.fit();Assert.assertEquals(53.1572792,p[1],1e-7);Assert.assertEquals(5.75214622,p[2],1e-8);}"
"org.apache.commons.math3.optimization.fitting.GaussianFitterTest.testMath798",0,"@Test public void testMath798(){final GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());fitter.addObservedPoint(0.23,395.0);fitter.addObservedPoint(1.14,376.0);fitter.addObservedPoint(2.05,163.0);fitter.addObservedPoint(2.95,49.0);fitter.addObservedPoint(3.86,16.0);fitter.addObservedPoint(4.77,1.0);final double[]p=fitter.fit();Assert.assertEquals(420.8397296167364,p[0],1e-12);Assert.assertEquals(0.603770729862231,p[1],1e-15);Assert.assertEquals(1.0786447936766612,p[2],1e-14);}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testCluster",0,"@Test public void testCluster(){final DoublePoint[]points=new DoublePoint[]{new DoublePoint(new double[]{83.08303244924173,58.83387754182331}),new DoublePoint(new double[]{45.05445510940626,23.469642649637535}),new DoublePoint(new double[]{14.96417921432294,69.0264096390456}),new DoublePoint(new double[]{73.53189604333602,34.896145021310076}),new DoublePoint(new double[]{73.28498173551634,33.96860806993209}),new DoublePoint(new double[]{73.45828098873608,33.92584423092194}),new DoublePoint(new double[]{73.9657889183145,35.73191006924026}),new DoublePoint(new double[]{74.0074097183533,36.81735596177168}),new DoublePoint(new double[]{73.41247541410848,34.27314856695011}),new DoublePoint(new double[]{73.9156256353017,36.83206791547127}),new DoublePoint(new double[]{74.81499205809087,37.15682749846019}),new DoublePoint(new double[]{74.03144880081527,37.57399178552441}),new DoublePoint(new double[]{74.51870941207744,38.674258946906775}),new DoublePoint(new double[]{74.50754595105536,35.58903978415765}),new DoublePoint(new double[]{74.51322752749547,36.030572259100154}),new DoublePoint(new double[]{59.27900996617973,46.41091720294207}),new DoublePoint(new double[]{59.73744793841615,46.20015558367595}),new DoublePoint(new double[]{58.81134076672606,45.71150126331486}),new DoublePoint(new double[]{58.52225539437495,47.416083617601544}),new DoublePoint(new double[]{58.218626647023484,47.36228902172297}),new DoublePoint(new double[]{60.27139669447206,46.606106348801404}),new DoublePoint(new double[]{60.894962462363765,46.976924697402865}),new DoublePoint(new double[]{62.29048673878424,47.66970563563518}),new DoublePoint(new double[]{61.03857608977705,46.212924720020965}),new DoublePoint(new double[]{60.16916214139201,45.18193661351688}),new DoublePoint(new double[]{59.90036905976012,47.555364347063005}),new DoublePoint(new double[]{62.33003634144552,47.83941489877179}),new DoublePoint(new double[]{57.86035536718555,47.31117930193432}),new DoublePoint(new double[]{58.13715479685925,48.985960494028404}),new DoublePoint(new double[]{56.131923963548616,46.8508904252667}),new DoublePoint(new double[]{55.976329887053,47.46384037658572}),new DoublePoint(new double[]{56.23245975235477,47.940035191131756}),new DoublePoint(new double[]{58.51687048212625,46.622885352699086}),new DoublePoint(new double[]{57.85411081905477,45.95394361577928}),new DoublePoint(new double[]{56.445776311447844,45.162093662656844}),new DoublePoint(new double[]{57.36691949656233,47.50097194337286}),new DoublePoint(new double[]{58.243626387557015,46.114052729681134}),new DoublePoint(new double[]{56.27224595635198,44.799080066150054}),new DoublePoint(new double[]{57.606924816500396,46.94291057763621}),new DoublePoint(new double[]{30.18714230041951,13.877149710431695}),new DoublePoint(new double[]{30.449448810657486,13.490778346545994}),new DoublePoint(new double[]{30.295018390286714,13.264889000216499}),new DoublePoint(new double[]{30.160201832884923,11.89278262341395}),new DoublePoint(new double[]{31.341509791789576,15.282655921997502}),new DoublePoint(new double[]{31.68601630325429,14.756873246748}),new DoublePoint(new double[]{29.325963742565364,12.097849250072613}),new DoublePoint(new double[]{29.54820742388256,13.613295356975868}),new DoublePoint(new double[]{28.79359608888626,10.36352064087987}),new DoublePoint(new double[]{31.01284597092308,12.788479208014905}),new DoublePoint(new double[]{27.58509216737002,11.47570110601373}),new DoublePoint(new double[]{28.593799561727792,10.780998203903437}),new DoublePoint(new double[]{31.356105766724795,15.080316198524088}),new DoublePoint(new double[]{31.25948503636755,13.674329151166603}),new DoublePoint(new double[]{32.31590076372959,14.95261758659035}),new DoublePoint(new double[]{30.460413702763617,15.88402809202671}),new DoublePoint(new double[]{32.56178203062154,14.586076852632686}),new DoublePoint(new double[]{32.76138648530468,16.239837325178087}),new DoublePoint(new double[]{30.1829453331884,14.709592407103628}),new DoublePoint(new double[]{29.55088173528202,15.0651247180067}),new DoublePoint(new double[]{29.004155302187428,14.089665298582986}),new DoublePoint(new double[]{29.339624439831823,13.29096065578051}),new DoublePoint(new double[]{30.997460327576846,14.551914158277214}),new DoublePoint(new double[]{30.66784126125276,16.269703107886016})};final DBSCANClusterer<DoublePoint> transformer=new DBSCANClusterer<DoublePoint>(2.0,5);final List<Cluster<DoublePoint>> clusters=transformer.cluster(Arrays.asList(points));final List<DoublePoint> clusterOne=Arrays.asList(points[3],points[4],points[5],points[6],points[7],points[8],points[9],points[10],points[11],points[12],points[13],points[14]);final List<DoublePoint> clusterTwo=Arrays.asList(points[15],points[16],points[17],points[18],points[19],points[20],points[21],points[22],points[23],points[24],points[25],points[26],points[27],points[28],points[29],points[30],points[31],points[32],points[33],points[34],points[35],points[36],points[37],points[38]);final List<DoublePoint> clusterThree=Arrays.asList(points[39],points[40],points[41],points[42],points[43],points[44],points[45],points[46],points[47],points[48],points[49],points[50],points[51],points[52],points[53],points[54],points[55],points[56],points[57],points[58],points[59],points[60],points[61],points[62]);boolean cluster1Found=false;boolean cluster2Found=false;boolean cluster3Found=false;Assert.assertEquals(3,clusters.size());for(final Cluster<DoublePoint> cluster : clusters){if (cluster.getPoints().containsAll(clusterOne)){cluster1Found=true;}if (cluster.getPoints().containsAll(clusterTwo)){cluster2Found=true;}if (cluster.getPoints().containsAll(clusterThree)){cluster3Found=true;}}Assert.assertTrue(cluster1Found);Assert.assertTrue(cluster2Found);Assert.assertTrue(cluster3Found);}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testSingleLink",0,"@Test public void testSingleLink(){final DoublePoint[]points={new DoublePoint(new int[]{10,10}),new DoublePoint(new int[]{12,9}),new DoublePoint(new int[]{10,8}),new DoublePoint(new int[]{8,8}),new DoublePoint(new int[]{8,6}),new DoublePoint(new int[]{7,7}),new DoublePoint(new int[]{5,6}),new DoublePoint(new int[]{14,8}),new DoublePoint(new int[]{7,15}),new DoublePoint(new int[]{17,8})};final DBSCANClusterer<DoublePoint> clusterer=new DBSCANClusterer<DoublePoint>(3,3);List<Cluster<DoublePoint>> clusters=clusterer.cluster(Arrays.asList(points));Assert.assertEquals(1,clusters.size());final List<DoublePoint> clusterOne=Arrays.asList(points[0],points[1],points[2],points[3],points[4],points[5],points[6],points[7]);Assert.assertTrue(clusters.get(0).getPoints().containsAll(clusterOne));}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testGetEps",0,"@Test public void testGetEps(){final DBSCANClusterer<DoublePoint> transformer=new DBSCANClusterer<DoublePoint>(2.0,5);Assert.assertEquals(2.0,transformer.getEps(),0.0);}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testGetMinPts",0,"@Test public void testGetMinPts(){final DBSCANClusterer<DoublePoint> transformer=new DBSCANClusterer<DoublePoint>(2.0,5);Assert.assertEquals(5,transformer.getMinPts());}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testNegativeEps",0,"@Test(expected=MathIllegalArgumentException.class)public void testNegativeEps(){new DBSCANClusterer<DoublePoint>(-2.0,5);}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testNegativeMinPts",0,"@Test(expected=MathIllegalArgumentException.class)public void testNegativeMinPts(){new DBSCANClusterer<DoublePoint>(2.0,-5);}"
"org.apache.commons.math3.ml.clustering.DBSCANClustererTest.testNullDataset",0,"@Test(expected=NullArgumentException.class)public void testNullDataset(){DBSCANClusterer<DoublePoint> clusterer=new DBSCANClusterer<DoublePoint>(2.0,5);clusterer.cluster(null);}"
"org.apache.commons.math3.analysis.solvers.BisectionSolverTest.testSinZero",0,"@Test public void testSinZero(){UnivariateFunction f=new Sin();double result;BisectionSolver solver=new BisectionSolver();result=solver.solve(100,f,3,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());result=solver.solve(100,f,1,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math3.analysis.solvers.BisectionSolverTest.testQuinticZero",0,"@Test public void testQuinticZero(){UnivariateFunction f=new QuinticFunction();double result;BisectionSolver solver=new BisectionSolver();result=solver.solve(100,f,-0.2,0.2);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,-0.1,0.3);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,-0.3,0.45);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.3,0.7);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.2,0.6);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.05,0.95);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,1.25);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.8,1.2);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,1.75);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.55,1.45);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,5);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()> 0);}"
"org.apache.commons.math3.analysis.solvers.BisectionSolverTest.testMath369",0,"@Test public void testMath369(){UnivariateFunction f=new Sin();BisectionSolver solver=new BisectionSolver();Assert.assertEquals(FastMath.PI,solver.solve(100,f,3.0,3.2,3.1),solver.getAbsoluteAccuracy());}"
"org.apache.commons.math3.optimization.SimpleValueCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimpleValueChecker(1e-1,1e-2,0);}"
"org.apache.commons.math3.optimization.SimpleValueCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimpleValueChecker checker=new SimpleValueChecker(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optimization.SimpleValueCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimpleValueChecker checker=new SimpleValueChecker(1e-8,1e-8);final PointValuePair a=new PointValuePair(new double[]{1d},1d);final PointValuePair b=new PointValuePair(new double[]{10d},10d);Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testPreconditions",0,"/** * Test preconditions.*/@Test public void testPreconditions(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2.5};double[][]zval=new double[xval.length][yval.length];@SuppressWarnings(""unused"")BivariateFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,zval,zval,zval);double[]wxval=new double[]{3,2,5,6.5};try {bcf=new BicubicSplineInterpolatingFunction(wxval,yval,zval,zval,zval,zval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wyval=new double[]{-4,-1,-1,2.5};try {bcf=new BicubicSplineInterpolatingFunction(xval,wyval,zval,zval,zval,zval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[][]wzval=new double[xval.length][yval.length - 1];try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,wzval,zval,zval,zval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,wzval,zval,zval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,zval,wzval,zval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,zval,zval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wzval=new double[xval.length - 1][yval.length];try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,wzval,zval,zval,zval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,wzval,zval,zval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,zval,wzval,zval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}try {bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,zval,zval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testPlane",0,"/** * Test for a plane. <p> z = 2 x - 3 y + 5*/@Ignore @Test public void testPlane(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x - 3 * y + 5;}};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}double[][]dZdX=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdX[i][j]=2;}}double[][]dZdY=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdY[i][j]=-3;}}double[][]dZdXdY=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdXdY[i][j]=0;}}BivariateFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,dZdX,dZdY,dZdXdY);double x,y;double expected,result;x=4;y=-3;expected=f.value(x,y);result=bcf.value(x,y);Assert.assertEquals(""On sample point"",expected,result,1e-15);x=4.5;y=-1.5;expected=f.value(x,y);result=bcf.value(x,y);Assert.assertEquals(""Half-way between sample points (middle of the patch)"",expected,result,0.3);x=3.5;y=-3.5;expected=f.value(x,y);result=bcf.value(x,y);Assert.assertEquals(""Half-way between sample points (border of the patch)"",expected,result,0.3);}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testParaboloid",0,"/** * Test for a paraboloid. <p> z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5*/@Ignore @Test public void testParaboloid(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x * x - 3 * y * y + 4 * x * y - 5;}};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}double[][]dZdX=new double[xval.length][yval.length];BivariateFunction dfdX=new BivariateFunction(){public double value(double x,double y){return 4 * (x + y);}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdX[i][j]=dfdX.value(xval[i],yval[j]);}}double[][]dZdY=new double[xval.length][yval.length];BivariateFunction dfdY=new BivariateFunction(){public double value(double x,double y){return 4 * x - 6 * y;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdY[i][j]=dfdY.value(xval[i],yval[j]);}}double[][]dZdXdY=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdXdY[i][j]=4;}}BivariateFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,dZdX,dZdY,dZdXdY);double x,y;double expected,result;x=4;y=-3;expected=f.value(x,y);result=bcf.value(x,y);Assert.assertEquals(""On sample point"",expected,result,1e-15);x=4.5;y=-1.5;expected=f.value(x,y);result=bcf.value(x,y);Assert.assertEquals(""Half-way between sample points (middle of the patch)"",expected,result,2);x=3.5;y=-3.5;expected=f.value(x,y);result=bcf.value(x,y);Assert.assertEquals(""Half-way between sample points (border of the patch)"",expected,result,2);}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testSplinePartialDerivatives",0,"/** * Test for partial derivatives of  {@link BicubicSplineFunction}. <p> f(x,y)= &Sigma;<sub>i</sub>&Sigma;<sub>j</sub> (i+1)(j+2)x<sup>i</sup> y<sup>j</sup>*/@Ignore @Test public void testSplinePartialDerivatives(){final int N=4;final double[]coeff=new double[16];for (int i=0;i < N;i++){for (int j=0;j < N;j++){coeff[i + N * j]=(i + 1)* (j + 2);}}final BicubicSplineFunction f=new BicubicSplineFunction(coeff);BivariateFunction derivative;final double x=0.435;final double y=0.776;final double tol=1e-13;derivative=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double y2=y * y;final double y3=y2 * y;final double yFactor=2 + 3 * y + 4 * y2 + 5 * y3;return yFactor * (2 + 6 * x + 12 * x2);}};Assert.assertEquals(""dFdX"",derivative.value(x,y),f.partialDerivativeX().value(x,y),tol);derivative=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double x3=x2 * x;final double y2=y * y;final double xFactor=1 + 2 * x + 3 * x2 + 4 * x3;return xFactor * (3 + 8 * y + 15 * y2);}};Assert.assertEquals(""dFdY"",derivative.value(x,y),f.partialDerivativeY().value(x,y),tol);derivative=new BivariateFunction(){public double value(double x,double y){final double y2=y * y;final double y3=y2 * y;final double yFactor=2 + 3 * y + 4 * y2 + 5 * y3;return yFactor * (6 + 24 * x);}};Assert.assertEquals(""d2FdX2"",derivative.value(x,y),f.partialDerivativeXX().value(x,y),tol);derivative=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double x3=x2 * x;final double xFactor=1 + 2 * x + 3 * x2 + 4 * x3;return xFactor * (8 + 30 * y);}};Assert.assertEquals(""d2FdY2"",derivative.value(x,y),f.partialDerivativeYY().value(x,y),tol);derivative=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double y2=y * y;final double yFactor=3 + 8 * y + 15 * y2;return yFactor * (2 + 6 * x + 12 * x2);}};Assert.assertEquals(""d2FdXdY"",derivative.value(x,y),f.partialDerivativeXY().value(x,y),tol);}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testMatchingPartialDerivatives",0,"/** * Test that the partial derivatives computed from a {@link BicubicSplineInterpolatingFunction}match the input data.<p> f(x,y)= 5 - 3 x + 2 y - x y + 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x<sup>2</sup> y - x y<sup>2</sup> - 3 x<sup>3</sup> + y<sup>3</sup>*/@Ignore @Test public void testMatchingPartialDerivatives(){final int sz=21;double[]val=new double[sz];final double delta=1d / (sz - 1);for (int i=0;i < sz;i++){val[i]=i * delta;}BivariateFunction f=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double x3=x2 * x;final double y2=y * y;final double y3=y2 * y;return 5 - 3 * x + 2 * y - x * y + 2 * x2 - 3 * y2 + 4 * x2 * y - x * y2 - 3 * x3 + y3;}};double[][]fval=new double[sz][sz];for (int i=0;i < sz;i++){for (int j=0;j < sz;j++){fval[i][j]=f.value(val[i],val[j]);}}double[][]dFdX=new double[sz][sz];BivariateFunction dfdX=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double y2=y * y;return -3 - y + 4 * x + 8 * x * y - y2 - 9 * x2;}};for (int i=0;i < sz;i++){for (int j=0;j < sz;j++){dFdX[i][j]=dfdX.value(val[i],val[j]);}}double[][]dFdY=new double[sz][sz];BivariateFunction dfdY=new BivariateFunction(){public double value(double x,double y){final double x2=x * x;final double y2=y * y;return 2 - x - 6 * y + 4 * x2 - 2 * x * y + 3 * y2;}};for (int i=0;i < sz;i++){for (int j=0;j < sz;j++){dFdY[i][j]=dfdY.value(val[i],val[j]);}}double[][]d2FdXdY=new double[sz][sz];BivariateFunction d2fdXdY=new BivariateFunction(){public double value(double x,double y){return -1 + 8 * x - 2 * y;}};for (int i=0;i < sz;i++){for (int j=0;j < sz;j++){d2FdXdY[i][j]=d2fdXdY.value(val[i],val[j]);}}BicubicSplineInterpolatingFunction bcf=new BicubicSplineInterpolatingFunction(val,val,fval,dFdX,dFdY,d2FdXdY);double x,y;double expected,result;final double tol=1e-12;for (int i=0;i < sz;i++){x=val[i];for (int j=0;j < sz;j++){y=val[j];expected=dfdX.value(x,y);result=bcf.partialDerivativeX(x,y);Assert.assertEquals(x + "" "" + y+ "" dFdX"",expected,result,tol);expected=dfdY.value(x,y);result=bcf.partialDerivativeY(x,y);Assert.assertEquals(x + "" "" + y+ "" dFdY"",expected,result,tol);expected=d2fdXdY.value(x,y);result=bcf.partialDerivativeXY(x,y);Assert.assertEquals(x + "" "" + y+ "" d2FdXdY"",expected,result,tol);}}}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testInterpolation1",0,"/** * Interpolating a plane. <p> z = 2 x - 3 y + 5*/@Test public void testInterpolation1(){final int sz=21;double[]xval=new double[sz];double[]yval=new double[sz];final double delta=1d / (sz - 1);for (int i=0;i < sz;i++){xval[i]=-1 + 15 * i * delta;yval[i]=-20 + 30 * i * delta;}BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x - 3 * y + 5;}};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}double[][]dZdX=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdX[i][j]=2;}}double[][]dZdY=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdY[i][j]=-3;}}double[][]dZdXdY=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdXdY[i][j]=0;}}final BivariateFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,dZdX,dZdY,dZdXdY);double x,y;final RandomGenerator rng=new Well19937c(1234567L);final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);final int numSamples=50;final double tol=6;for (int i=0;i < numSamples;i++){x=distX.sample();for (int j=0;j < numSamples;j++){y=distY.sample();Assert.assertEquals(f.value(x,y),bcf.value(x,y),tol);}}}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testInterpolation2",0,"/** * Interpolating a paraboloid. <p> z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5*/@Test public void testInterpolation2(){final int sz=21;double[]xval=new double[sz];double[]yval=new double[sz];final double delta=1d / (sz - 1);for (int i=0;i < sz;i++){xval[i]=-1 + 15 * i * delta;yval[i]=-20 + 30 * i * delta;}BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x * x - 3 * y * y + 4 * x * y - 5;}};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}double[][]dZdX=new double[xval.length][yval.length];BivariateFunction dfdX=new BivariateFunction(){public double value(double x,double y){return 4 * (x + y);}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdX[i][j]=dfdX.value(xval[i],yval[j]);}}double[][]dZdY=new double[xval.length][yval.length];BivariateFunction dfdY=new BivariateFunction(){public double value(double x,double y){return 4 * x - 6 * y;}};for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdY[i][j]=dfdY.value(xval[i],yval[j]);}}double[][]dZdXdY=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){dZdXdY[i][j]=4;}}BivariateFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,zval,dZdX,dZdY,dZdXdY);double x,y;final RandomGenerator rng=new Well19937c(1234567L);final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);final double tol=224;double max=0;for (int i=0;i < sz;i++){x=distX.sample();for (int j=0;j < sz;j++){y=distY.sample();Assert.assertEquals(f.value(x,y),bcf.value(x,y),tol);}}}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest.testIsValidPoint",0,"@Test public void testIsValidPoint(){final double xMin=-12;final double xMax=34;final double yMin=5;final double yMax=67;final double[]xval=new double[]{xMin,xMax};final double[]yval=new double[]{yMin,yMax};final double[][]f=new double[][]{{1,2},{3,4}};final double[][]dFdX=f;final double[][]dFdY=f;final double[][]dFdXdY=f;final BicubicSplineInterpolatingFunction bcf=new BicubicSplineInterpolatingFunction(xval,yval,f,dFdX,dFdY,dFdXdY);double x,y;x=xMin;y=yMin;Assert.assertTrue(bcf.isValidPoint(x,y));bcf.value(x,y);x=xMax;y=yMax;Assert.assertTrue(bcf.isValidPoint(x,y));bcf.value(x,y);final double xRange=xMax - xMin;final double yRange=yMax - yMin;x=xMin + xRange / 3.4;y=yMin + yRange / 1.2;Assert.assertTrue(bcf.isValidPoint(x,y));bcf.value(x,y);final double small=1e-8;x=xMin - small;y=yMax;Assert.assertFalse(bcf.isValidPoint(x,y));try {bcf.value(x,y);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException expected){}x=xMin;y=yMax + small;Assert.assertFalse(bcf.isValidPoint(x,y));try {bcf.value(x,y);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException expected){}}"
"org.apache.commons.math3.linear.QRSolverTest.testRank",0,"/** * test rank */@Test public void testRank(){DecompositionSolver solver=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();Assert.assertTrue(solver.isNonSingular());solver=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();Assert.assertFalse(solver.isNonSingular());solver=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x4)).getSolver();Assert.assertTrue(solver.isNonSingular());solver=new QRDecomposition(MatrixUtils.createRealMatrix(testData4x3)).getSolver();Assert.assertTrue(solver.isNonSingular());}"
"org.apache.commons.math3.linear.QRSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){DecompositionSolver solver=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.QRSolverTest.testSolveRankErrors",0,"/** * test solve rank errors */@Test public void testSolveRankErrors(){DecompositionSolver solver=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[3][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException iae){}}"
"org.apache.commons.math3.linear.QRSolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){QRDecomposition decomposition=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));DecompositionSolver solver=decomposition.getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{-102,12250},{544,24500},{167,-36750}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{1,2515},{2,422},{-3,898}});Assert.assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),2.0e-16 * xRef.getNorm());for (int i=0;i < b.getColumnDimension();++i){final RealVector x=solver.solve(b.getColumnVector(i));final double error=x.subtract(xRef.getColumnVector(i)).getNorm();Assert.assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}for (int i=0;i < b.getColumnDimension();++i){ArrayRealVectorTest.RealVectorTestImpl v=new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));final RealVector x=solver.solve(v);final double error=x.subtract(xRef.getColumnVector(i)).getNorm();Assert.assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}}"
"org.apache.commons.math3.linear.QRSolverTest.testOverdetermined",0,"@Test public void testOverdetermined(){final Random r=new Random(5559252868205245l);int p=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;RealMatrix a=createTestMatrix(r,p,q);RealMatrix xRef=createTestMatrix(r,q,BlockRealMatrix.BLOCK_SIZE + 3);RealMatrix b=a.multiply(xRef);final double noise=0.001;b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){@Override public double visit(int row,int column,double value){return value * (1.0 + noise * (2 * r.nextDouble()- 1));}});RealMatrix x=new QRDecomposition(a).getSolver().solve(b);Assert.assertEquals(0,x.subtract(xRef).getNorm(),0.01 * noise * p* q);}"
"org.apache.commons.math3.linear.QRSolverTest.testUnderdetermined",0,"@Test public void testUnderdetermined(){final Random r=new Random(42185006424567123l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;RealMatrix a=createTestMatrix(r,p,q);RealMatrix xRef=createTestMatrix(r,q,BlockRealMatrix.BLOCK_SIZE + 3);RealMatrix b=a.multiply(xRef);RealMatrix x=new QRDecomposition(a).getSolver().solve(b);Assert.assertTrue(x.subtract(xRef).getNorm()/ (p * q)> 0.01);Assert.assertEquals(0.0,x.getSubMatrix(p,q - 1,0,x.getColumnDimension()- 1).getNorm(),0);}"
"org.apache.commons.math3.genetics.FixedElapsedTimeTest.testIsSatisfied",0,"@Test public void testIsSatisfied(){final Population pop=new Population(){public void addChromosome(final Chromosome chromosome){}public Chromosome getFittestChromosome(){return null;}public int getPopulationLimit(){return 0;}public int getPopulationSize(){return 0;}public Population nextGeneration(){return null;}public Iterator<Chromosome> iterator(){return null;}};final long start=System.nanoTime();final long duration=3;final FixedElapsedTime tec=new FixedElapsedTime(duration,TimeUnit.SECONDS);while (!tec.isSatisfied(pop)){try {Thread.sleep(50);}catch(InterruptedException e){}}final long end=System.nanoTime();final long elapsedTime=end - start;final long diff=FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testExceptions",0,"/** * Tests if the  {@link EnumeratedRealDistribution}constructor throwsexceptions for invalid data.*/@Test public void testExceptions(){EnumeratedRealDistribution invalid=null;try {invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0});Assert.fail(""Expected DimensionMismatchException"");}catch(DimensionMismatchException e){}try {invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,-1.0});Assert.fail(""Expected NotPositiveException"");}catch(NotPositiveException e){}try {invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,0.0});Assert.fail(""Expected MathArithmeticException"");}catch(MathArithmeticException e){}try {invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,Double.NaN});Assert.fail(""Expected NotANumberException"");}catch(NotANumberException e){}try {invalid=new EnumeratedRealDistribution(new double[]{1.0,2.0},new double[]{0.0,Double.POSITIVE_INFINITY});Assert.fail(""Expected NotFiniteNumberException"");}catch(NotFiniteNumberException e){}Assert.assertNull(""Expected non-initialized DiscreteRealDistribution"",invalid);}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testProbability",0,"/** * Tests if the distribution returns proper probability values.*/@Test public void testProbability(){double[]points=new double[]{-2.0,-1.0,0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0};double[]results=new double[]{0,0.2,0,0,0,0.5,0,0,0,0.3,0};for (int p=0;p < points.length;p++){double density=testDistribution.probability(points[p]);Assert.assertEquals(results[p],density,0.0);}}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testDensity",0,"/** * Tests if the distribution returns proper density values.*/@Test public void testDensity(){double[]points=new double[]{-2.0,-1.0,0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0};double[]results=new double[]{0,0.2,0,0,0,0.5,0,0,0,0.3,0};for (int p=0;p < points.length;p++){double density=testDistribution.density(points[p]);Assert.assertEquals(results[p],density,0.0);}}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testCumulativeProbability",0,"/** * Tests if the distribution returns proper cumulative probability values.*/@Test public void testCumulativeProbability(){double[]points=new double[]{-2.0,-1.0,0.0,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0};double[]results=new double[]{0,0.2,0.2,0.2,0.2,0.7,0.7,0.7,0.7,1.0,1.0};for (int p=0;p < points.length;p++){double probability=testDistribution.cumulativeProbability(points[p]);Assert.assertEquals(results[p],probability,1e-10);}}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalMean",0,"/** * Tests if the distribution returns proper mean value.*/@Test public void testGetNumericalMean(){Assert.assertEquals(3.4,testDistribution.getNumericalMean(),1e-10);}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetNumericalVariance",0,"/** * Tests if the distribution returns proper variance.*/@Test public void testGetNumericalVariance(){Assert.assertEquals(7.84,testDistribution.getNumericalVariance(),1e-10);}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportLowerBound",0,"/** * Tests if the distribution returns proper lower bound.*/@Test public void testGetSupportLowerBound(){Assert.assertEquals(-1,testDistribution.getSupportLowerBound(),0);}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testGetSupportUpperBound",0,"/** * Tests if the distribution returns proper upper bound.*/@Test public void testGetSupportUpperBound(){Assert.assertEquals(7,testDistribution.getSupportUpperBound(),0);}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Tests if the distribution returns properly that the support includes the lower bound.*/@Test public void testIsSupportLowerBoundInclusive(){Assert.assertTrue(testDistribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Tests if the distribution returns properly that the support includes the upper bound.*/@Test public void testIsSupportUpperBoundInclusive(){Assert.assertTrue(testDistribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIsSupportConnected",0,"/** * Tests if the distribution returns properly that the support is connected.*/@Test public void testIsSupportConnected(){Assert.assertTrue(testDistribution.isSupportConnected());}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testSample",0,"/** * Tests sampling.*/@Test public void testSample(){final int n=1000000;testDistribution.reseedRandomGenerator(-334759360);final double[]samples=testDistribution.sample(n);Assert.assertEquals(n,samples.length);double sum=0;double sumOfSquares=0;for (int i=0;i < samples.length;i++){sum+=samples[i];sumOfSquares+=samples[i]* samples[i];}Assert.assertEquals(testDistribution.getNumericalMean(),sum / n,1e-2);Assert.assertEquals(testDistribution.getNumericalVariance(),sumOfSquares / n - FastMath.pow(sum / n,2),1e-2);}"
"org.apache.commons.math3.distribution.EnumeratedRealDistributionTest.testIssue942",0,"@Test public void testIssue942(){List<Pair<Object,Double>> list=new ArrayList<Pair<Object,Double>>();list.add(new Pair<Object,Double>(new Object(){},new Double(0)));list.add(new Pair<Object,Double>(new Object(){},new Double(1)));Assert.assertEquals(1,new EnumeratedDistribution<Object>(list).sample(1).length);}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkDimension(MatrixUtils.createRealMatrix(testData4x3));checkDimension(MatrixUtils.createRealMatrix(testData3x4));Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;checkDimension(createTestMatrix(r,p,q));checkDimension(createTestMatrix(r,q,p));}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testAPEqualQR",0,"/** * test AP = QR */@Test public void testAPEqualQR(){checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));checkAPEqualQR(MatrixUtils.createRealMatrix(testData3x4));checkAPEqualQR(MatrixUtils.createRealMatrix(testData4x3));Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;checkAPEqualQR(createTestMatrix(r,p,q));checkAPEqualQR(createTestMatrix(r,q,p));}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testQOrthogonal",0,"/** * test the orthogonality of Q */@Test public void testQOrthogonal(){checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4));checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3));Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;checkQOrthogonal(createTestMatrix(r,p,q));checkQOrthogonal(createTestMatrix(r,q,p));}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testRUpperTriangular",0,"/** * test that R is upper triangular */@Test public void testRUpperTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData3x3NonSingular);checkUpperTriangular(new RRQRDecomposition(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData3x3Singular);checkUpperTriangular(new RRQRDecomposition(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData3x4);checkUpperTriangular(new RRQRDecomposition(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData4x3);checkUpperTriangular(new RRQRDecomposition(matrix).getR());Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;matrix=createTestMatrix(r,p,q);checkUpperTriangular(new RRQRDecomposition(matrix).getR());matrix=createTestMatrix(r,p,q);checkUpperTriangular(new RRQRDecomposition(matrix).getR());}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testHTrapezoidal",0,"/** * test that H is trapezoidal */@Test public void testHTrapezoidal(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData3x3NonSingular);checkTrapezoidal(new RRQRDecomposition(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData3x3Singular);checkTrapezoidal(new RRQRDecomposition(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData3x4);checkTrapezoidal(new RRQRDecomposition(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData4x3);checkTrapezoidal(new RRQRDecomposition(matrix).getH());Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;matrix=createTestMatrix(r,p,q);checkTrapezoidal(new RRQRDecomposition(matrix).getH());matrix=createTestMatrix(r,p,q);checkTrapezoidal(new RRQRDecomposition(matrix).getH());}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testNonInvertible",0,"@Test(expected=SingularMatrixException.class)public void testNonInvertible(){RRQRDecomposition qr=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular),3.0e-16);qr.getSolver().getInverse();}"
"org.apache.commons.math3.linear.RRQRDecompositionTest.testRank",0,"/** * test the rank is returned correctly */@Test public void testRank(){double[][]d={{1,1,1},{0,0,0},{1,2,3}};RealMatrix m=new Array2DRowRealMatrix(d);RRQRDecomposition qr=new RRQRDecomposition(m);Assert.assertEquals(2,qr.getRank(1.0e-16));}"
"org.apache.commons.math3.exception.NumberIsTooSmallExceptionTest.testAccessors",0,"@Test public void testAccessors(){final NumberIsTooSmallException e=new NumberIsTooSmallException(0,0,false);Assert.assertEquals(0,e.getArgument());Assert.assertEquals(0,e.getMin());Assert.assertFalse(e.getBoundIsAllowed());}"
"org.apache.commons.math3.optim.SimpleValueCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimpleValueChecker(1e-1,1e-2,0);}"
"org.apache.commons.math3.optim.SimpleValueCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimpleValueChecker checker=new SimpleValueChecker(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optim.SimpleValueCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimpleValueChecker checker=new SimpleValueChecker(1e-8,1e-8);final PointValuePair a=new PointValuePair(new double[]{1d},1d);final PointValuePair b=new PointValuePair(new double[]{10d},10d);Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testConstructors",0,"@Test public void testConstructors(){ArrayFieldVector<Fraction> v0=new ArrayFieldVector<Fraction>(FractionField.getInstance());Assert.assertEquals(0,v0.getDimension());ArrayFieldVector<Fraction> v1=new ArrayFieldVector<Fraction>(FractionField.getInstance(),7);Assert.assertEquals(7,v1.getDimension());Assert.assertEquals(new Fraction(0),v1.getEntry(6));ArrayFieldVector<Fraction> v2=new ArrayFieldVector<Fraction>(5,new Fraction(123,100));Assert.assertEquals(5,v2.getDimension());Assert.assertEquals(new Fraction(123,100),v2.getEntry(4));ArrayFieldVector<Fraction> v3=new ArrayFieldVector<Fraction>(FractionField.getInstance(),vec1);Assert.assertEquals(3,v3.getDimension());Assert.assertEquals(new Fraction(2),v3.getEntry(1));ArrayFieldVector<Fraction> v4=new ArrayFieldVector<Fraction>(FractionField.getInstance(),vec4,3,2);Assert.assertEquals(2,v4.getDimension());Assert.assertEquals(new Fraction(4),v4.getEntry(0));try {new ArrayFieldVector<Fraction>(vec4,8,3);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}FieldVector<Fraction> v5_i=new ArrayFieldVector<Fraction>(dvec1);Assert.assertEquals(9,v5_i.getDimension());Assert.assertEquals(new Fraction(9),v5_i.getEntry(8));ArrayFieldVector<Fraction> v5=new ArrayFieldVector<Fraction>(dvec1);Assert.assertEquals(9,v5.getDimension());Assert.assertEquals(new Fraction(9),v5.getEntry(8));ArrayFieldVector<Fraction> v6=new ArrayFieldVector<Fraction>(dvec1,3,2);Assert.assertEquals(2,v6.getDimension());Assert.assertEquals(new Fraction(4),v6.getEntry(0));try {new ArrayFieldVector<Fraction>(dvec1,8,3);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}ArrayFieldVector<Fraction> v7=new ArrayFieldVector<Fraction>(v1);Assert.assertEquals(7,v7.getDimension());Assert.assertEquals(new Fraction(0),v7.getEntry(6));FieldVectorTestImpl<Fraction> v7_i=new FieldVectorTestImpl<Fraction>(vec1);ArrayFieldVector<Fraction> v7_2=new ArrayFieldVector<Fraction>(v7_i);Assert.assertEquals(3,v7_2.getDimension());Assert.assertEquals(new Fraction(2),v7_2.getEntry(1));ArrayFieldVector<Fraction> v8=new ArrayFieldVector<Fraction>(v1,true);Assert.assertEquals(7,v8.getDimension());Assert.assertEquals(new Fraction(0),v8.getEntry(6));Assert.assertNotSame(""testData not same object "",v1.getDataRef(),v8.getDataRef());ArrayFieldVector<Fraction> v8_2=new ArrayFieldVector<Fraction>(v1,false);Assert.assertEquals(7,v8_2.getDimension());Assert.assertEquals(new Fraction(0),v8_2.getEntry(6));Assert.assertArrayEquals(v1.getDataRef(),v8_2.getDataRef());ArrayFieldVector<Fraction> v9=new ArrayFieldVector<Fraction>(v1,v3);Assert.assertEquals(10,v9.getDimension());Assert.assertEquals(new Fraction(1),v9.getEntry(7));}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testDataInOut",0,"@Test public void testDataInOut(){ArrayFieldVector<Fraction> v1=new ArrayFieldVector<Fraction>(vec1);ArrayFieldVector<Fraction> v2=new ArrayFieldVector<Fraction>(vec2);ArrayFieldVector<Fraction> v4=new ArrayFieldVector<Fraction>(vec4);FieldVectorTestImpl<Fraction> v2_t=new FieldVectorTestImpl<Fraction>(vec2);FieldVector<Fraction> v_append_1=v1.append(v2);Assert.assertEquals(6,v_append_1.getDimension());Assert.assertEquals(new Fraction(4),v_append_1.getEntry(3));FieldVector<Fraction> v_append_2=v1.append(new Fraction(2));Assert.assertEquals(4,v_append_2.getDimension());Assert.assertEquals(new Fraction(2),v_append_2.getEntry(3));FieldVector<Fraction> v_append_4=v1.append(v2_t);Assert.assertEquals(6,v_append_4.getDimension());Assert.assertEquals(new Fraction(4),v_append_4.getEntry(3));FieldVector<Fraction> v_copy=v1.copy();Assert.assertEquals(3,v_copy.getDimension());Assert.assertNotSame(""testData not same object "",v1.getDataRef(),v_copy.getData());Fraction[]a_frac=v1.toArray();Assert.assertEquals(3,a_frac.length);Assert.assertNotSame(""testData not same object "",v1.getDataRef(),a_frac);FieldVector<Fraction> vout5=v4.getSubVector(3,3);Assert.assertEquals(3,vout5.getDimension());Assert.assertEquals(new Fraction(5),vout5.getEntry(1));try {v4.getSubVector(3,7);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException ex){}ArrayFieldVector<Fraction> v_set1=(ArrayFieldVector<Fraction>)v1.copy();v_set1.setEntry(1,new Fraction(11));Assert.assertEquals(new Fraction(11),v_set1.getEntry(1));try {v_set1.setEntry(3,new Fraction(11));Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException ex){}ArrayFieldVector<Fraction> v_set2=(ArrayFieldVector<Fraction>)v4.copy();v_set2.set(3,v1);Assert.assertEquals(new Fraction(1),v_set2.getEntry(3));Assert.assertEquals(new Fraction(7),v_set2.getEntry(6));try {v_set2.set(7,v1);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException ex){}ArrayFieldVector<Fraction> v_set3=(ArrayFieldVector<Fraction>)v1.copy();v_set3.set(new Fraction(13));Assert.assertEquals(new Fraction(13),v_set3.getEntry(2));try {v_set3.getEntry(23);Assert.fail(""ArrayIndexOutOfBoundsException expected"");}catch(ArrayIndexOutOfBoundsException ex){}ArrayFieldVector<Fraction> v_set4=(ArrayFieldVector<Fraction>)v4.copy();v_set4.setSubVector(3,v2_t);Assert.assertEquals(new Fraction(4),v_set4.getEntry(3));Assert.assertEquals(new Fraction(7),v_set4.getEntry(6));try {v_set4.setSubVector(7,v2_t);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException ex){}ArrayFieldVector<Fraction> vout10=(ArrayFieldVector<Fraction>)v1.copy();ArrayFieldVector<Fraction> vout10_2=(ArrayFieldVector<Fraction>)v1.copy();Assert.assertEquals(vout10,vout10_2);vout10_2.setEntry(0,new Fraction(11,10));Assert.assertNotSame(vout10,vout10_2);}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testMapFunctions",0,"@Test public void testMapFunctions(){ArrayFieldVector<Fraction> v1=new ArrayFieldVector<Fraction>(vec1);FieldVector<Fraction> v_mapAdd=v1.mapAdd(new Fraction(2));Fraction[]result_mapAdd={new Fraction(3),new Fraction(4),new Fraction(5)};checkArray(""compare vectors"",result_mapAdd,v_mapAdd.getData());FieldVector<Fraction> v_mapAddToSelf=v1.copy();v_mapAddToSelf.mapAddToSelf(new Fraction(2));Fraction[]result_mapAddToSelf={new Fraction(3),new Fraction(4),new Fraction(5)};checkArray(""compare vectors"",result_mapAddToSelf,v_mapAddToSelf.getData());FieldVector<Fraction> v_mapSubtract=v1.mapSubtract(new Fraction(2));Fraction[]result_mapSubtract={new Fraction(-1),new Fraction(0),new Fraction(1)};checkArray(""compare vectors"",result_mapSubtract,v_mapSubtract.getData());FieldVector<Fraction> v_mapSubtractToSelf=v1.copy();v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));Fraction[]result_mapSubtractToSelf={new Fraction(-1),new Fraction(0),new Fraction(1)};checkArray(""compare vectors"",result_mapSubtractToSelf,v_mapSubtractToSelf.getData());FieldVector<Fraction> v_mapMultiply=v1.mapMultiply(new Fraction(2));Fraction[]result_mapMultiply={new Fraction(2),new Fraction(4),new Fraction(6)};checkArray(""compare vectors"",result_mapMultiply,v_mapMultiply.getData());FieldVector<Fraction> v_mapMultiplyToSelf=v1.copy();v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));Fraction[]result_mapMultiplyToSelf={new Fraction(2),new Fraction(4),new Fraction(6)};checkArray(""compare vectors"",result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());FieldVector<Fraction> v_mapDivide=v1.mapDivide(new Fraction(2));Fraction[]result_mapDivide={new Fraction(1,2),new Fraction(1),new Fraction(3,2)};checkArray(""compare vectors"",result_mapDivide,v_mapDivide.getData());FieldVector<Fraction> v_mapDivideToSelf=v1.copy();v_mapDivideToSelf.mapDivideToSelf(new Fraction(2));Fraction[]result_mapDivideToSelf={new Fraction(1,2),new Fraction(1),new Fraction(3,2)};checkArray(""compare vectors"",result_mapDivideToSelf,v_mapDivideToSelf.getData());FieldVector<Fraction> v_mapInv=v1.mapInv();Fraction[]result_mapInv={new Fraction(1),new Fraction(1,2),new Fraction(1,3)};checkArray(""compare vectors"",result_mapInv,v_mapInv.getData());FieldVector<Fraction> v_mapInvToSelf=v1.copy();v_mapInvToSelf.mapInvToSelf();Fraction[]result_mapInvToSelf={new Fraction(1),new Fraction(1,2),new Fraction(1,3)};checkArray(""compare vectors"",result_mapInvToSelf,v_mapInvToSelf.getData());}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testBasicFunctions",0,"@Test public void testBasicFunctions(){ArrayFieldVector<Fraction> v1=new ArrayFieldVector<Fraction>(vec1);ArrayFieldVector<Fraction> v2=new ArrayFieldVector<Fraction>(vec2);new ArrayFieldVector<Fraction>(vec_null);FieldVectorTestImpl<Fraction> v2_t=new FieldVectorTestImpl<Fraction>(vec2);ArrayFieldVector<Fraction> v_add=v1.add(v2);Fraction[]result_add={new Fraction(5),new Fraction(7),new Fraction(9)};checkArray(""compare vect"",v_add.getData(),result_add);FieldVectorTestImpl<Fraction> vt2=new FieldVectorTestImpl<Fraction>(vec2);FieldVector<Fraction> v_add_i=v1.add(vt2);Fraction[]result_add_i={new Fraction(5),new Fraction(7),new Fraction(9)};checkArray(""compare vect"",v_add_i.getData(),result_add_i);ArrayFieldVector<Fraction> v_subtract=v1.subtract(v2);Fraction[]result_subtract={new Fraction(-3),new Fraction(-3),new Fraction(-3)};checkArray(""compare vect"",v_subtract.getData(),result_subtract);FieldVector<Fraction> v_subtract_i=v1.subtract(vt2);Fraction[]result_subtract_i={new Fraction(-3),new Fraction(-3),new Fraction(-3)};checkArray(""compare vect"",v_subtract_i.getData(),result_subtract_i);ArrayFieldVector<Fraction> v_ebeMultiply=v1.ebeMultiply(v2);Fraction[]result_ebeMultiply={new Fraction(4),new Fraction(10),new Fraction(18)};checkArray(""compare vect"",v_ebeMultiply.getData(),result_ebeMultiply);FieldVector<Fraction> v_ebeMultiply_2=v1.ebeMultiply(v2_t);Fraction[]result_ebeMultiply_2={new Fraction(4),new Fraction(10),new Fraction(18)};checkArray(""compare vect"",v_ebeMultiply_2.getData(),result_ebeMultiply_2);ArrayFieldVector<Fraction> v_ebeDivide=v1.ebeDivide(v2);Fraction[]result_ebeDivide={new Fraction(1,4),new Fraction(2,5),new Fraction(1,2)};checkArray(""compare vect"",v_ebeDivide.getData(),result_ebeDivide);FieldVector<Fraction> v_ebeDivide_2=v1.ebeDivide(v2_t);Fraction[]result_ebeDivide_2={new Fraction(1,4),new Fraction(2,5),new Fraction(1,2)};checkArray(""compare vect"",v_ebeDivide_2.getData(),result_ebeDivide_2);Fraction dot=v1.dotProduct(v2);Assert.assertEquals(""compare val "",new Fraction(32),dot);Fraction dot_2=v1.dotProduct(v2_t);Assert.assertEquals(""compare val "",new Fraction(32),dot_2);FieldMatrix<Fraction> m_outerProduct=v1.outerProduct(v2);Assert.assertEquals(""compare val "",new Fraction(4),m_outerProduct.getEntry(0,0));FieldMatrix<Fraction> m_outerProduct_2=v1.outerProduct(v2_t);Assert.assertEquals(""compare val "",new Fraction(4),m_outerProduct_2.getEntry(0,0));ArrayFieldVector<Fraction> v_projection=v1.projection(v2);Fraction[]result_projection={new Fraction(128,77),new Fraction(160,77),new Fraction(192,77)};checkArray(""compare vect"",v_projection.getData(),result_projection);FieldVector<Fraction> v_projection_2=v1.projection(v2_t);Fraction[]result_projection_2={new Fraction(128,77),new Fraction(160,77),new Fraction(192,77)};checkArray(""compare vect"",v_projection_2.getData(),result_projection_2);}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testMisc",0,"@Test public void testMisc(){ArrayFieldVector<Fraction> v1=new ArrayFieldVector<Fraction>(vec1);ArrayFieldVector<Fraction> v4=new ArrayFieldVector<Fraction>(vec4);FieldVector<Fraction> v4_2=new ArrayFieldVector<Fraction>(vec4);String out1=v1.toString();Assert.assertTrue(""some output "",out1.length()!= 0);try {v1.checkVectorDimensions(2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}try {v1.checkVectorDimensions(v4);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}try {v1.checkVectorDimensions(v4_2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testSerial",0,"@Test public void testSerial(){ArrayFieldVector<Fraction> v=new ArrayFieldVector<Fraction>(vec1);Assert.assertEquals(v,TestUtils.serializeAndRecover(v));}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testZeroVectors",0,"@Test public void testZeroVectors(){try {new ArrayFieldVector<Fraction>(new Fraction[0]);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}try {new ArrayFieldVector<Fraction>(new Fraction[0],true);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}try {new ArrayFieldVector<Fraction>(new Fraction[0],false);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}Assert.assertEquals(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),new Fraction[0]).getDimension());Assert.assertEquals(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),new Fraction[0],true).getDimension());Assert.assertEquals(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),new Fraction[0],false).getDimension());}"
"org.apache.commons.math3.linear.ArrayFieldVectorTest.testOuterProduct",0,"@Test public void testOuterProduct(){final ArrayFieldVector<Fraction> u=new ArrayFieldVector<Fraction>(FractionField.getInstance(),new Fraction[]{new Fraction(1),new Fraction(2),new Fraction(-3)});final ArrayFieldVector<Fraction> v=new ArrayFieldVector<Fraction>(FractionField.getInstance(),new Fraction[]{new Fraction(4),new Fraction(-2)});final FieldMatrix<Fraction> uv=u.outerProduct(v);final double tol=Math.ulp(1d);Assert.assertEquals(new Fraction(4).doubleValue(),uv.getEntry(0,0).doubleValue(),tol);Assert.assertEquals(new Fraction(-2).doubleValue(),uv.getEntry(0,1).doubleValue(),tol);Assert.assertEquals(new Fraction(8).doubleValue(),uv.getEntry(1,0).doubleValue(),tol);Assert.assertEquals(new Fraction(-4).doubleValue(),uv.getEntry(1,1).doubleValue(),tol);Assert.assertEquals(new Fraction(-12).doubleValue(),uv.getEntry(2,0).doubleValue(),tol);Assert.assertEquals(new Fraction(6).doubleValue(),uv.getEntry(2,1).doubleValue(),tol);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.1);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince853Integrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince853Integrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 90000);Assert.assertTrue(bos.size()< 100000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 2.4e-10);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853StepInterpolatorTest.checklone",0,"@Test public void checklone()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince853Integrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast)throws MaxCountExceededException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=FastMath.abs(tB - tA)/ 2;Assert.assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);Assert.assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);Assert.assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){Assert.assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public void init(double t0,double[]y0,double t){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.stat.FrequencyTest.testCounts",0,"/** * test freq counts */@Test public void testCounts(){Assert.assertEquals(""total count"",0,f.getSumFreq());f.addValue(ONE_LONG);f.addValue(TWO_LONG);f.addValue(1);f.addValue(ONE);Assert.assertEquals(""one frequency count"",3,f.getCount(1));Assert.assertEquals(""two frequency count"",1,f.getCount(2));Assert.assertEquals(""three frequency count"",0,f.getCount(3));Assert.assertEquals(""total count"",4,f.getSumFreq());Assert.assertEquals(""zero cumulative frequency"",0,f.getCumFreq(0));Assert.assertEquals(""one cumulative frequency"",3,f.getCumFreq(1));Assert.assertEquals(""two cumulative frequency"",4,f.getCumFreq(2));Assert.assertEquals(""Integer argument cum freq"",4,f.getCumFreq(Integer.valueOf(2)));Assert.assertEquals(""five cumulative frequency"",4,f.getCumFreq(5));Assert.assertEquals(""foo cumulative frequency"",0,f.getCumFreq(""foo""));f.clear();Assert.assertEquals(""total count"",0,f.getSumFreq());f.addValue(""one"");f.addValue(""One"");f.addValue(""oNe"");f.addValue(""Z"");Assert.assertEquals(""one cumulative frequency"",1,f.getCount(""one""));Assert.assertEquals(""Z cumulative pct"",0.5,f.getCumPct(""Z""),TOLERANCE);Assert.assertEquals(""z cumulative pct"",1.0,f.getCumPct(""z""),TOLERANCE);Assert.assertEquals(""Ot cumulative pct"",0.25,f.getCumPct(""Ot""),TOLERANCE);f.clear();f=null;Frequency f=new Frequency();f.addValue(1);f.addValue(Integer.valueOf(1));f.addValue(Long.valueOf(1));f.addValue(2);f.addValue(Integer.valueOf(-1));Assert.assertEquals(""1 count"",3,f.getCount(1));Assert.assertEquals(""1 count"",3,f.getCount(Integer.valueOf(1)));Assert.assertEquals(""0 cum pct"",0.2,f.getCumPct(0),TOLERANCE);Assert.assertEquals(""1 pct"",0.6,f.getPct(Integer.valueOf(1)),TOLERANCE);Assert.assertEquals(""-2 cum pct"",0,f.getCumPct(-2),TOLERANCE);Assert.assertEquals(""10 cum pct"",1,f.getCumPct(10),TOLERANCE);f=null;f=new Frequency(String.CASE_INSENSITIVE_ORDER);f.addValue(""one"");f.addValue(""One"");f.addValue(""oNe"");f.addValue(""Z"");Assert.assertEquals(""one count"",3,f.getCount(""one""));Assert.assertEquals(""Z cumulative pct -- case insensitive"",1,f.getCumPct(""Z""),TOLERANCE);Assert.assertEquals(""z cumulative pct -- case insensitive"",1,f.getCumPct(""z""),TOLERANCE);f=null;f=new Frequency();Assert.assertEquals(0L,f.getCount('a'));Assert.assertEquals(0L,f.getCumFreq('b'));TestUtils.assertEquals(Double.NaN,f.getPct('a'),0.0);TestUtils.assertEquals(Double.NaN,f.getCumPct('b'),0.0);f.addValue('a');f.addValue('b');f.addValue('c');f.addValue('d');Assert.assertEquals(1L,f.getCount('a'));Assert.assertEquals(2L,f.getCumFreq('b'));Assert.assertEquals(0.25,f.getPct('a'),0.0);Assert.assertEquals(0.5,f.getCumPct('b'),0.0);Assert.assertEquals(1.0,f.getCumPct('e'),0.0);}"
"org.apache.commons.math3.stat.FrequencyTest.testPcts",0,"/** * test pcts */@Test public void testPcts(){f.addValue(ONE_LONG);f.addValue(TWO_LONG);f.addValue(ONE);f.addValue(TWO);f.addValue(THREE_LONG);f.addValue(THREE_LONG);f.addValue(3);f.addValue(THREEE);Assert.assertEquals(""one pct"",0.25,f.getPct(1),TOLERANCE);Assert.assertEquals(""two pct"",0.25,f.getPct(Long.valueOf(2)),TOLERANCE);Assert.assertEquals(""three pct"",0.5,f.getPct(THREE_LONG),TOLERANCE);Assert.assertEquals(""five pct"",0,f.getPct(5),TOLERANCE);Assert.assertEquals(""foo pct"",0,f.getPct(""foo""),TOLERANCE);Assert.assertEquals(""one cum pct"",0.25,f.getCumPct(1),TOLERANCE);Assert.assertEquals(""two cum pct"",0.50,f.getCumPct(Long.valueOf(2)),TOLERANCE);Assert.assertEquals(""Integer argument"",0.50,f.getCumPct(Integer.valueOf(2)),TOLERANCE);Assert.assertEquals(""three cum pct"",1.0,f.getCumPct(THREE_LONG),TOLERANCE);Assert.assertEquals(""five cum pct"",1.0,f.getCumPct(5),TOLERANCE);Assert.assertEquals(""zero cum pct"",0.0,f.getCumPct(0),TOLERANCE);Assert.assertEquals(""foo cum pct"",0,f.getCumPct(""foo""),TOLERANCE);}"
"org.apache.commons.math3.stat.FrequencyTest.testAdd",0,"/** * test adding incomparable values */@Test public void testAdd(){char aChar='a';char bChar='b';String aString=""a"";f.addValue(aChar);f.addValue(bChar);try {f.addValue(aString);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}try {f.addValue(2);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}Assert.assertEquals(""a pct"",0.5,f.getPct(aChar),TOLERANCE);Assert.assertEquals(""b cum pct"",1.0,f.getCumPct(bChar),TOLERANCE);Assert.assertEquals(""a string pct"",0.0,f.getPct(aString),TOLERANCE);Assert.assertEquals(""a string cum pct"",0.0,f.getCumPct(aString),TOLERANCE);f=new Frequency();f.addValue(""One"");try {f.addValue(new Integer(""One""));Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.FrequencyTest.testEmptyTable",0,"/** * test empty table */@Test public void testEmptyTable(){Assert.assertEquals(""freq sum,empty table"",0,f.getSumFreq());Assert.assertEquals(""count,empty table"",0,f.getCount(0));Assert.assertEquals(""count,empty table"",0,f.getCount(Integer.valueOf(0)));Assert.assertEquals(""cum freq,empty table"",0,f.getCumFreq(0));Assert.assertEquals(""cum freq,empty table"",0,f.getCumFreq(""x""));Assert.assertTrue(""pct,empty table"",Double.isNaN(f.getPct(0)));Assert.assertTrue(""pct,empty table"",Double.isNaN(f.getPct(Integer.valueOf(0))));Assert.assertTrue(""cum pct,empty table"",Double.isNaN(f.getCumPct(0)));Assert.assertTrue(""cum pct,empty table"",Double.isNaN(f.getCumPct(Integer.valueOf(0))));}"
"org.apache.commons.math3.stat.FrequencyTest.testToString",0,"/** * Tests toString()*/@Test public void testToString()throws Exception {f.addValue(ONE_LONG);f.addValue(TWO_LONG);f.addValue(ONE);f.addValue(TWO);String s=f.toString();Assert.assertNotNull(s);BufferedReader reader=new BufferedReader(new StringReader(s));String line=reader.readLine();Assert.assertNotNull(line);line=reader.readLine();Assert.assertNotNull(line);line=reader.readLine();Assert.assertNotNull(line);line=reader.readLine();Assert.assertNull(line);}"
"org.apache.commons.math3.stat.FrequencyTest.testIntegerValues",0,"@Test public void testIntegerValues(){Comparable<?> obj1=null;obj1=Integer.valueOf(1);Integer int1=Integer.valueOf(1);f.addValue(obj1);f.addValue(int1);f.addValue(2);f.addValue(Long.valueOf(2));Assert.assertEquals(""Integer 1 count"",2,f.getCount(1));Assert.assertEquals(""Integer 1 count"",2,f.getCount(Integer.valueOf(1)));Assert.assertEquals(""Integer 1 count"",2,f.getCount(Long.valueOf(1)));Assert.assertEquals(""Integer 1 cumPct"",0.5,f.getCumPct(1),TOLERANCE);Assert.assertEquals(""Integer 1 cumPct"",0.5,f.getCumPct(Long.valueOf(1)),TOLERANCE);Assert.assertEquals(""Integer 1 cumPct"",0.5,f.getCumPct(Integer.valueOf(1)),TOLERANCE);Iterator<?> it=f.valuesIterator();while (it.hasNext()){Assert.assertTrue(it.next()instanceof Long);}}"
"org.apache.commons.math3.stat.FrequencyTest.testSerial",0,"@Test public void testSerial(){f.addValue(ONE_LONG);f.addValue(TWO_LONG);f.addValue(ONE);f.addValue(TWO);Assert.assertEquals(f,TestUtils.serializeAndRecover(f));}"
"org.apache.commons.math3.stat.FrequencyTest.testGetUniqueCount",0,"@Test public void testGetUniqueCount(){Assert.assertEquals(0,f.getUniqueCount());f.addValue(ONE_LONG);Assert.assertEquals(1,f.getUniqueCount());f.addValue(ONE_LONG);Assert.assertEquals(1,f.getUniqueCount());f.addValue(TWO);Assert.assertEquals(2,f.getUniqueCount());}"
"org.apache.commons.math3.stat.FrequencyTest.testIncrement",0,"@Test public void testIncrement(){Assert.assertEquals(0,f.getUniqueCount());f.incrementValue(ONE_LONG,1);Assert.assertEquals(1,f.getCount(ONE_LONG));f.incrementValue(ONE_LONG,4);Assert.assertEquals(5,f.getCount(ONE_LONG));f.incrementValue(ONE_LONG,-5);Assert.assertEquals(0,f.getCount(ONE_LONG));}"
"org.apache.commons.math3.stat.FrequencyTest.testMerge",0,"@Test public void testMerge(){Assert.assertEquals(0,f.getUniqueCount());f.addValue(ONE_LONG);f.addValue(TWO_LONG);f.addValue(ONE);f.addValue(TWO);Assert.assertEquals(2,f.getUniqueCount());Assert.assertEquals(2,f.getCount(ONE));Assert.assertEquals(2,f.getCount(TWO));Frequency g=new Frequency();g.addValue(ONE_LONG);g.addValue(THREE_LONG);g.addValue(THREEE);Assert.assertEquals(2,g.getUniqueCount());Assert.assertEquals(1,g.getCount(ONE));Assert.assertEquals(2,g.getCount(THREEE));f.merge(g);Assert.assertEquals(3,f.getUniqueCount());Assert.assertEquals(3,f.getCount(ONE));Assert.assertEquals(2,f.getCount(TWO));Assert.assertEquals(2,f.getCount(THREEE));}"
"org.apache.commons.math3.stat.FrequencyTest.testMergeCollection",0,"@Test public void testMergeCollection(){Assert.assertEquals(0,f.getUniqueCount());f.addValue(ONE_LONG);Assert.assertEquals(1,f.getUniqueCount());Assert.assertEquals(1,f.getCount(ONE));Assert.assertEquals(0,f.getCount(TWO));Frequency g=new Frequency();g.addValue(TWO_LONG);Frequency h=new Frequency();h.addValue(THREE_LONG);List<Frequency> coll=new ArrayList<Frequency>();coll.add(g);coll.add(h);f.merge(coll);Assert.assertEquals(3,f.getUniqueCount());Assert.assertEquals(1,f.getCount(ONE));Assert.assertEquals(1,f.getCount(TWO));Assert.assertEquals(1,f.getCount(THREEE));}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testDimensions",0,"@Test public void testDimensions(){checkdimensions(MatrixUtils.createRealMatrix(testSquare));checkdimensions(MatrixUtils.createRealMatrix(testNonSquare));checkdimensions(MatrixUtils.createRealMatrix(testNonSquare).transpose());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testAEqualUSVt",0,"@Test public void testAEqualUSVt(){checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testUOrthogonal",0,"@Test public void testUOrthogonal(){checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getU());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getU());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testVOrthogonal",0,"@Test public void testVOrthogonal(){checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getV());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getV());checkOrthogonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testBBiDiagonal",0,"@Test public void testBBiDiagonal(){checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).getB());checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).getB());checkBiDiagonal(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getB());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testSingularMatrix",0,"@Test public void testSingularMatrix(){BiDiagonalTransformer transformer=new BiDiagonalTransformer(MatrixUtils.createRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,3.0,4.0},{3.0,5.0,7.0}}));final double s3=FastMath.sqrt(3.0);final double s14=FastMath.sqrt(14.0);final double s1553=FastMath.sqrt(1553.0);RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{-1.0 / s14,5.0 / (s3 * s14),1.0 / s3},{-2.0 / s14,-4.0 / (s3 * s14),1.0 / s3},{-3.0 / s14,1.0 / (s3 * s14),-1.0 / s3}});RealMatrix bRef=MatrixUtils.createRealMatrix(new double[][]{{-s14,s1553 / s14,0.0},{0.0,-87 * s3 / (s14 * s1553),-s3 * s14 / s1553},{0.0,0.0,0.0}});RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0,0.0},{0.0,-23 / s1553,32 / s1553},{0.0,-32 / s1553,-23 / s1553}});RealMatrix u=transformer.getU();Assert.assertEquals(0,u.subtract(uRef).getNorm(),1.0e-14);RealMatrix b=transformer.getB();Assert.assertEquals(0,b.subtract(bRef).getNorm(),1.0e-14);RealMatrix v=transformer.getV();Assert.assertEquals(0,v.subtract(vRef).getNorm(),1.0e-14);Assert.assertTrue(u == transformer.getU());Assert.assertTrue(b == transformer.getB());Assert.assertTrue(v == transformer.getV());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testMatricesValues",0,"@Test public void testMatricesValues(){BiDiagonalTransformer transformer=new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare));final double s17=FastMath.sqrt(17.0);RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{-8 / (5 * s17),19 / (5 * s17)},{-19 / (5 * s17),-8 / (5 * s17)}});RealMatrix bRef=MatrixUtils.createRealMatrix(new double[][]{{-3 * s17 / 5,32 * s17 / 85},{0.0,-5 * s17 / 17}});RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0},{0.0,-1.0}});RealMatrix u=transformer.getU();Assert.assertEquals(0,u.subtract(uRef).getNorm(),1.0e-14);RealMatrix b=transformer.getB();Assert.assertEquals(0,b.subtract(bRef).getNorm(),1.0e-14);RealMatrix v=transformer.getV();Assert.assertEquals(0,v.subtract(vRef).getNorm(),1.0e-14);Assert.assertTrue(u == transformer.getU());Assert.assertTrue(b == transformer.getB());Assert.assertTrue(v == transformer.getV());}"
"org.apache.commons.math3.linear.BiDiagonalTransformerTest.testUpperOrLower",0,"@Test public void testUpperOrLower(){Assert.assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare)).isUpperBiDiagonal());Assert.assertTrue(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare)).isUpperBiDiagonal());Assert.assertFalse(new BiDiagonalTransformer(MatrixUtils.createRealMatrix(testNonSquare).transpose()).isUpperBiDiagonal());}"
"org.apache.commons.math3.linear.RRQRSolverTest.testRank",0,"/** * test rank */@Test public void testRank(){DecompositionSolver solver=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular),1.0e-16).getSolver();Assert.assertTrue(solver.isNonSingular());solver=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular),1.0e-16).getSolver();Assert.assertFalse(solver.isNonSingular());solver=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x4),1.0e-16).getSolver();Assert.assertTrue(solver.isNonSingular());solver=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData4x3),1.0e-16).getSolver();Assert.assertTrue(solver.isNonSingular());}"
"org.apache.commons.math3.linear.RRQRSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){DecompositionSolver solver=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.RRQRSolverTest.testSolveRankErrors",0,"/** * test solve rank errors */@Test public void testSolveRankErrors(){DecompositionSolver solver=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular),1.0e-16).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[3][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException iae){}}"
"org.apache.commons.math3.linear.RRQRSolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{-102,12250},{544,24500},{167,-36750}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{1,2515},{2,422},{-3,898}});RRQRDecomposition decomposition=new RRQRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));DecompositionSolver solver=decomposition.getSolver();Assert.assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),3.0e-16 * xRef.getNorm());for (int i=0;i < b.getColumnDimension();++i){final RealVector x=solver.solve(b.getColumnVector(i));final double error=x.subtract(xRef.getColumnVector(i)).getNorm();Assert.assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}for (int i=0;i < b.getColumnDimension();++i){ArrayRealVectorTest.RealVectorTestImpl v=new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));final RealVector x=solver.solve(v);final double error=x.subtract(xRef.getColumnVector(i)).getNorm();Assert.assertEquals(0,error,3.0e-16 * xRef.getColumnVector(i).getNorm());}}"
"org.apache.commons.math3.linear.RRQRSolverTest.testOverdetermined",0,"@Test public void testOverdetermined(){final Random r=new Random(5559252868205245l);int p=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;RealMatrix a=createTestMatrix(r,p,q);RealMatrix xRef=createTestMatrix(r,q,BlockRealMatrix.BLOCK_SIZE + 3);RealMatrix b=a.multiply(xRef);final double noise=0.001;b.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor(){@Override public double visit(int row,int column,double value){return value * (1.0 + noise * (2 * r.nextDouble()- 1));}});RealMatrix x=new RRQRDecomposition(a).getSolver().solve(b);Assert.assertEquals(0,x.subtract(xRef).getNorm(),0.01 * noise * p* q);}"
"org.apache.commons.math3.linear.RRQRSolverTest.testUnderdetermined",0,"@Test public void testUnderdetermined(){final Random r=new Random(42185006424567123l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;RealMatrix a=createTestMatrix(r,p,q);RealMatrix xRef=createTestMatrix(r,q,BlockRealMatrix.BLOCK_SIZE + 3);RealMatrix b=a.multiply(xRef);RRQRDecomposition rrqrd=new RRQRDecomposition(a);RealMatrix x=rrqrd.getSolver().solve(b);Assert.assertTrue(x.subtract(xRef).getNorm()/ (p * q)> 0.01);RealMatrix permuted=rrqrd.getP().transpose().multiply(x);Assert.assertEquals(0.0,permuted.getSubMatrix(p,q - 1,0,permuted.getColumnDimension()- 1).getNorm(),0);}"
"org.apache.commons.math3.ode.events.ReappearingEventTest.testDormandPrince",0,"@Test public void testDormandPrince()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double tEnd=test(1);Assert.assertEquals(10.0,tEnd,1e-7);}"
"org.apache.commons.math3.ode.events.ReappearingEventTest.testGragg",0,"@Test public void testGragg()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double tEnd=test(2);Assert.assertEquals(10.0,tEnd,1e-7);}"
"org.apache.commons.math3.ode.events.ReappearingEventTest.test",0,"public double test(int integratorType)throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double e=1e-15;FirstOrderIntegrator integrator;integrator=(integratorType == 1)? new DormandPrince853Integrator(e,100.0,1e-7,1e-7): new GraggBulirschStoerIntegrator(e,100.0,1e-7,1e-7);PegasusSolver rootSolver=new PegasusSolver(e,e);integrator.addEventHandler(new Event(),0.1,e,1000,rootSolver);double t0=6.0;double tEnd=10.0;double[]y={2.0,2.0,2.0,4.0,2.0,7.0,15.0};return integrator.integrate(new Ode(),t0,y,tEnd,y);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testDefault",0,"@Test public void testDefault(){NaturalRanking ranking=new NaturalRanking();double[]ranks;try {ranks=ranking.rank(exampleData);Assert.fail(""expected NotANumberException due to NaNStrategy.FAILED"");}catch(NotANumberException e){}ranks=ranking.rank(tiesFirst);double[]correctRanks=new double[]{1.5,1.5,4,3,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesLast);correctRanks=new double[]{3.5,3.5,2,1};TestUtils.assertEquals(correctRanks,ranks,0d);try {ranks=ranking.rank(multipleNaNs);Assert.fail(""expected NotANumberException due to NaNStrategy.FAILED"");}catch(NotANumberException e){}ranks=ranking.rank(multipleTies);correctRanks=new double[]{3,2,4.5,4.5,6.5,6.5,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(allSame);correctRanks=new double[]{2.5,2.5,2.5,2.5};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsMaximalTiesMinimum",0,"@Test public void testNaNsMaximalTiesMinimum(){NaturalRanking ranking=new NaturalRanking(NaNStrategy.MAXIMAL,TiesStrategy.MINIMUM);double[]ranks=ranking.rank(exampleData);double[]correctRanks={5,2,6,7,2,8,9,1,2};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesFirst);correctRanks=new double[]{1,1,4,3,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesLast);correctRanks=new double[]{3,3,2,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleNaNs);correctRanks=new double[]{1,2,3,3};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleTies);correctRanks=new double[]{3,2,4,4,6,6,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(allSame);correctRanks=new double[]{1,1,1,1};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsRemovedTiesSequential",0,"@Test public void testNaNsRemovedTiesSequential(){NaturalRanking ranking=new NaturalRanking(NaNStrategy.REMOVED,TiesStrategy.SEQUENTIAL);double[]ranks=ranking.rank(exampleData);double[]correctRanks={5,2,6,7,3,8,1,4};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesFirst);correctRanks=new double[]{1,2,4,3,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesLast);correctRanks=new double[]{3,4,2,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleNaNs);correctRanks=new double[]{1,2};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleTies);correctRanks=new double[]{3,2,4,5,6,7,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(allSame);correctRanks=new double[]{1,2,3,4};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsMinimalTiesMaximum",0,"@Test public void testNaNsMinimalTiesMaximum(){NaturalRanking ranking=new NaturalRanking(NaNStrategy.MINIMAL,TiesStrategy.MAXIMUM);double[]ranks=ranking.rank(exampleData);double[]correctRanks={6,5,7,8,5,9,2,2,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesFirst);correctRanks=new double[]{2,2,4,3,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesLast);correctRanks=new double[]{4,4,2,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleNaNs);correctRanks=new double[]{3,4,2,2};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleTies);correctRanks=new double[]{3,2,5,5,7,7,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(allSame);correctRanks=new double[]{4,4,4,4};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsMinimalTiesAverage",0,"@Test public void testNaNsMinimalTiesAverage(){NaturalRanking ranking=new NaturalRanking(NaNStrategy.MINIMAL);double[]ranks=ranking.rank(exampleData);double[]correctRanks={6,4,7,8,4,9,1.5,1.5,4};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesFirst);correctRanks=new double[]{1.5,1.5,4,3,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesLast);correctRanks=new double[]{3.5,3.5,2,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleNaNs);correctRanks=new double[]{3,4,1.5,1.5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleTies);correctRanks=new double[]{3,2,4.5,4.5,6.5,6.5,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(allSame);correctRanks=new double[]{2.5,2.5,2.5,2.5};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsFixedTiesRandom",0,"@Test public void testNaNsFixedTiesRandom(){RandomGenerator randomGenerator=new JDKRandomGenerator();randomGenerator.setSeed(1000);NaturalRanking ranking=new NaturalRanking(NaNStrategy.FIXED,randomGenerator);double[]ranks=ranking.rank(exampleData);double[]correctRanks={5,3,6,7,3,8,Double.NaN,1,2};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesFirst);correctRanks=new double[]{1,2,4,3,5};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(tiesLast);correctRanks=new double[]{3,3,2,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleNaNs);correctRanks=new double[]{1,2,Double.NaN,Double.NaN};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(multipleTies);correctRanks=new double[]{3,2,4,4,6,7,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranks=ranking.rank(allSame);correctRanks=new double[]{2,3,3,3};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsAndInfs",0,"@Test public void testNaNsAndInfs(){double[]data={0,Double.POSITIVE_INFINITY,Double.NaN,Double.NEGATIVE_INFINITY};NaturalRanking ranking=new NaturalRanking(NaNStrategy.MAXIMAL);double[]ranks=ranking.rank(data);double[]correctRanks=new double[]{2,3.5,3.5,1};TestUtils.assertEquals(correctRanks,ranks,0d);ranking=new NaturalRanking(NaNStrategy.MINIMAL);ranks=ranking.rank(data);correctRanks=new double[]{3,4,1.5,1.5};TestUtils.assertEquals(correctRanks,ranks,0d);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNaNsFailed",0,"@Test(expected=NotANumberException.class)public void testNaNsFailed(){double[]data={0,Double.POSITIVE_INFINITY,Double.NaN,Double.NEGATIVE_INFINITY};NaturalRanking ranking=new NaturalRanking(NaNStrategy.FAILED);ranking.rank(data);}"
"org.apache.commons.math3.stat.ranking.NaturalRankingTest.testNoNaNsFailed",0,"@Test public void testNoNaNsFailed(){double[]data={1,2,3,4};NaturalRanking ranking=new NaturalRanking(NaNStrategy.FAILED);double[]ranks=ranking.rank(data);TestUtils.assertEquals(data,ranks,0d);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testFormat",0,"@Test public void testFormat(){Fraction c=new Fraction(1,2);String expected=""1 / 2"";String actual=properFormat.format(c);Assert.assertEquals(expected,actual);actual=improperFormat.format(c);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testFormatNegative",0,"@Test public void testFormatNegative(){Fraction c=new Fraction(-1,2);String expected=""-1 / 2"";String actual=properFormat.format(c);Assert.assertEquals(expected,actual);actual=improperFormat.format(c);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testFormatZero",0,"@Test public void testFormatZero(){Fraction c=new Fraction(0,1);String expected=""0 / 1"";String actual=properFormat.format(c);Assert.assertEquals(expected,actual);actual=improperFormat.format(c);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testFormatImproper",0,"@Test public void testFormatImproper(){Fraction c=new Fraction(5,3);String actual=properFormat.format(c);Assert.assertEquals(""1 2 / 3"",actual);actual=improperFormat.format(c);Assert.assertEquals(""5 / 3"",actual);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testFormatImproperNegative",0,"@Test public void testFormatImproperNegative(){Fraction c=new Fraction(-5,3);String actual=properFormat.format(c);Assert.assertEquals(""-1 2 / 3"",actual);actual=improperFormat.format(c);Assert.assertEquals(""-5 / 3"",actual);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParse",0,"@Test public void testParse(){String source=""1 / 2"";try {Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(1,c.getNumerator());Assert.assertEquals(2,c.getDenominator());c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(1,c.getNumerator());Assert.assertEquals(2,c.getDenominator());}catch(MathParseException ex){Assert.fail(ex.getMessage());}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseInteger",0,"@Test public void testParseInteger(){String source=""10"";{Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(10,c.getNumerator());Assert.assertEquals(1,c.getDenominator());}{Fraction c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(10,c.getNumerator());Assert.assertEquals(1,c.getDenominator());}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseOne1",0,"@Test public void testParseOne1(){String source=""1 / 1"";Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(1,c.getNumerator());Assert.assertEquals(1,c.getDenominator());}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseOne2",0,"@Test public void testParseOne2(){String source=""10 / 10"";Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(1,c.getNumerator());Assert.assertEquals(1,c.getDenominator());}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseZero1",0,"@Test public void testParseZero1(){String source=""0 / 1"";Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(0,c.getNumerator());Assert.assertEquals(1,c.getDenominator());}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseZero2",0,"@Test public void testParseZero2(){String source=""-0 / 1"";Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(0,c.getNumerator());Assert.assertEquals(1,c.getDenominator());Assert.assertEquals(Double.POSITIVE_INFINITY,1d / c.doubleValue(),0);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseInvalid",0,"@Test public void testParseInvalid(){String source=""a"";String msg=""should not be able to parse '10 / a'."";try {properFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}try {improperFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseInvalidDenominator",0,"@Test public void testParseInvalidDenominator(){String source=""10 / a"";String msg=""should not be able to parse '10 / a'."";try {properFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}try {improperFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseNegative",0,"@Test public void testParseNegative(){{String source=""-1 / 2"";Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumerator());Assert.assertEquals(2,c.getDenominator());c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumerator());Assert.assertEquals(2,c.getDenominator());source=""1 / -2"";c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumerator());Assert.assertEquals(2,c.getDenominator());c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumerator());Assert.assertEquals(2,c.getDenominator());}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseProper",0,"@Test public void testParseProper(){String source=""1 2 / 3"";{Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(5,c.getNumerator());Assert.assertEquals(3,c.getDenominator());}try {improperFormat.parse(source);Assert.fail(""invalid improper fraction."");}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseProperNegative",0,"@Test public void testParseProperNegative(){String source=""-1 2 / 3"";{Fraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-5,c.getNumerator());Assert.assertEquals(3,c.getDenominator());}try {improperFormat.parse(source);Assert.fail(""invalid improper fraction."");}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testParseProperInvalidMinus",0,"@Test public void testParseProperInvalidMinus(){String source=""2 -2 / 3"";try {properFormat.parse(source);Assert.fail(""invalid minus in improper fraction."");}catch(MathParseException ex){}source=""2 2 / -3"";try {properFormat.parse(source);Assert.fail(""invalid minus in improper fraction."");}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.FractionFormatTest.testNumeratorFormat",0,"@Test public void testNumeratorFormat(){NumberFormat old=properFormat.getNumeratorFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);properFormat.setNumeratorFormat(nf);Assert.assertEquals(nf,properFormat.getNumeratorFormat());properFormat.setNumeratorFormat(old);old=improperFormat.getNumeratorFormat();nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);improperFormat.setNumeratorFormat(nf);Assert.assertEquals(nf,improperFormat.getNumeratorFormat());improperFormat.setNumeratorFormat(old);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testDenominatorFormat",0,"@Test public void testDenominatorFormat(){NumberFormat old=properFormat.getDenominatorFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);properFormat.setDenominatorFormat(nf);Assert.assertEquals(nf,properFormat.getDenominatorFormat());properFormat.setDenominatorFormat(old);old=improperFormat.getDenominatorFormat();nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);improperFormat.setDenominatorFormat(nf);Assert.assertEquals(nf,improperFormat.getDenominatorFormat());improperFormat.setDenominatorFormat(old);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testWholeFormat",0,"@Test public void testWholeFormat(){ProperFractionFormat format=(ProperFractionFormat)properFormat;NumberFormat old=format.getWholeFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);format.setWholeFormat(nf);Assert.assertEquals(nf,format.getWholeFormat());format.setWholeFormat(old);}"
"org.apache.commons.math3.fraction.FractionFormatTest.testLongFormat",0,"@Test public void testLongFormat(){Assert.assertEquals(""10 / 1"",improperFormat.format(10l));}"
"org.apache.commons.math3.fraction.FractionFormatTest.testDoubleFormat",0,"@Test public void testDoubleFormat(){Assert.assertEquals(""355 / 113"",improperFormat.format(FastMath.PI));}"
"org.apache.commons.math3.complex.ComplexTest.testConstructor",0,"@Test public void testConstructor(){Complex z=new Complex(3.0,4.0);Assert.assertEquals(3.0,z.getReal(),1.0e-5);Assert.assertEquals(4.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testConstructorNaN",0,"@Test public void testConstructorNaN(){Complex z=new Complex(3.0,Double.NaN);Assert.assertTrue(z.isNaN());z=new Complex(nan,4.0);Assert.assertTrue(z.isNaN());z=new Complex(3.0,4.0);Assert.assertFalse(z.isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testAbs",0,"@Test public void testAbs(){Complex z=new Complex(3.0,4.0);Assert.assertEquals(5.0,z.abs(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testAbsNaN",0,"@Test public void testAbsNaN(){Assert.assertTrue(Double.isNaN(Complex.NaN.abs()));Complex z=new Complex(inf,nan);Assert.assertTrue(Double.isNaN(z.abs()));}"
"org.apache.commons.math3.complex.ComplexTest.testAbsInfinite",0,"@Test public void testAbsInfinite(){Complex z=new Complex(inf,0);Assert.assertEquals(inf,z.abs(),0);z=new Complex(0,neginf);Assert.assertEquals(inf,z.abs(),0);z=new Complex(inf,neginf);Assert.assertEquals(inf,z.abs(),0);}"
"org.apache.commons.math3.complex.ComplexTest.testAdd",0,"@Test public void testAdd(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.add(y);Assert.assertEquals(8.0,z.getReal(),1.0e-5);Assert.assertEquals(10.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testAddNaN",0,"@Test public void testAddNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.add(Complex.NaN);Assert.assertSame(Complex.NaN,z);z=new Complex(1,nan);Complex w=x.add(z);Assert.assertSame(Complex.NaN,w);}"
"org.apache.commons.math3.complex.ComplexTest.testAddInf",0,"@Test public void testAddInf(){Complex x=new Complex(1,1);Complex z=new Complex(inf,0);Complex w=x.add(z);Assert.assertEquals(w.getImaginary(),1,0);Assert.assertEquals(inf,w.getReal(),0);x=new Complex(neginf,0);Assert.assertTrue(Double.isNaN(x.add(z).getReal()));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarAdd",0,"@Test public void testScalarAdd(){Complex x=new Complex(3.0,4.0);double yDouble=2.0;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.add(yComplex),x.add(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarAddNaN",0,"@Test public void testScalarAddNaN(){Complex x=new Complex(3.0,4.0);double yDouble=Double.NaN;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.add(yComplex),x.add(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarAddInf",0,"@Test public void testScalarAddInf(){Complex x=new Complex(1,1);double yDouble=Double.POSITIVE_INFINITY;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.add(yComplex),x.add(yDouble));x=new Complex(neginf,0);Assert.assertEquals(x.add(yComplex),x.add(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testConjugate",0,"@Test public void testConjugate(){Complex x=new Complex(3.0,4.0);Complex z=x.conjugate();Assert.assertEquals(3.0,z.getReal(),1.0e-5);Assert.assertEquals(-4.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testConjugateNaN",0,"@Test public void testConjugateNaN(){Complex z=Complex.NaN.conjugate();Assert.assertTrue(z.isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testConjugateInfiinite",0,"@Test public void testConjugateInfiinite(){Complex z=new Complex(0,inf);Assert.assertEquals(neginf,z.conjugate().getImaginary(),0);z=new Complex(0,neginf);Assert.assertEquals(inf,z.conjugate().getImaginary(),0);}"
"org.apache.commons.math3.complex.ComplexTest.testDivide",0,"@Test public void testDivide(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.divide(y);Assert.assertEquals(39.0 / 61.0,z.getReal(),1.0e-5);Assert.assertEquals(2.0 / 61.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testDivideReal",0,"@Test public void testDivideReal(){Complex x=new Complex(2d,3d);Complex y=new Complex(2d,0d);Assert.assertEquals(new Complex(1d,1.5),x.divide(y));}"
"org.apache.commons.math3.complex.ComplexTest.testDivideImaginary",0,"@Test public void testDivideImaginary(){Complex x=new Complex(2d,3d);Complex y=new Complex(0d,2d);Assert.assertEquals(new Complex(1.5d,-1d),x.divide(y));}"
"org.apache.commons.math3.complex.ComplexTest.testDivideInf",0,"@Test public void testDivideInf(){Complex x=new Complex(3,4);Complex w=new Complex(neginf,inf);Assert.assertTrue(x.divide(w).equals(Complex.ZERO));Complex z=w.divide(x);Assert.assertTrue(Double.isNaN(z.getReal()));Assert.assertEquals(inf,z.getImaginary(),0);w=new Complex(inf,inf);z=w.divide(x);Assert.assertTrue(Double.isNaN(z.getImaginary()));Assert.assertEquals(inf,z.getReal(),0);w=new Complex(1,inf);z=w.divide(w);Assert.assertTrue(Double.isNaN(z.getReal()));Assert.assertTrue(Double.isNaN(z.getImaginary()));}"
"org.apache.commons.math3.complex.ComplexTest.testDivideZero",0,"@Test public void testDivideZero(){Complex x=new Complex(3.0,4.0);Complex z=x.divide(Complex.ZERO);Assert.assertEquals(z,Complex.NaN);}"
"org.apache.commons.math3.complex.ComplexTest.testDivideZeroZero",0,"@Test public void testDivideZeroZero(){Complex x=new Complex(0.0,0.0);Complex z=x.divide(Complex.ZERO);Assert.assertEquals(z,Complex.NaN);}"
"org.apache.commons.math3.complex.ComplexTest.testDivideNaN",0,"@Test public void testDivideNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.divide(Complex.NaN);Assert.assertTrue(z.isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testDivideNaNInf",0,"@Test public void testDivideNaNInf(){Complex z=oneInf.divide(Complex.ONE);Assert.assertTrue(Double.isNaN(z.getReal()));Assert.assertEquals(inf,z.getImaginary(),0);z=negInfNegInf.divide(oneNaN);Assert.assertTrue(Double.isNaN(z.getReal()));Assert.assertTrue(Double.isNaN(z.getImaginary()));z=negInfInf.divide(Complex.ONE);Assert.assertTrue(Double.isNaN(z.getReal()));Assert.assertTrue(Double.isNaN(z.getImaginary()));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarDivide",0,"@Test public void testScalarDivide(){Complex x=new Complex(3.0,4.0);double yDouble=2.0;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.divide(yComplex),x.divide(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarDivideNaN",0,"@Test public void testScalarDivideNaN(){Complex x=new Complex(3.0,4.0);double yDouble=Double.NaN;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.divide(yComplex),x.divide(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarDivideInf",0,"@Test public void testScalarDivideInf(){Complex x=new Complex(1,1);double yDouble=Double.POSITIVE_INFINITY;Complex yComplex=new Complex(yDouble);TestUtils.assertEquals(x.divide(yComplex),x.divide(yDouble),0);yDouble=Double.NEGATIVE_INFINITY;yComplex=new Complex(yDouble);TestUtils.assertEquals(x.divide(yComplex),x.divide(yDouble),0);x=new Complex(1,Double.NEGATIVE_INFINITY);TestUtils.assertEquals(x.divide(yComplex),x.divide(yDouble),0);}"
"org.apache.commons.math3.complex.ComplexTest.testScalarDivideZero",0,"@Test public void testScalarDivideZero(){Complex x=new Complex(1,1);TestUtils.assertEquals(x.divide(Complex.ZERO),x.divide(0),0);}"
"org.apache.commons.math3.complex.ComplexTest.testReciprocal",0,"@Test public void testReciprocal(){Complex z=new Complex(5.0,6.0);Complex act=z.reciprocal();double expRe=5.0 / 61.0;double expIm=-6.0 / 61.0;Assert.assertEquals(expRe,act.getReal(),FastMath.ulp(expRe));Assert.assertEquals(expIm,act.getImaginary(),FastMath.ulp(expIm));}"
"org.apache.commons.math3.complex.ComplexTest.testReciprocalReal",0,"@Test public void testReciprocalReal(){Complex z=new Complex(-2.0,0.0);Assert.assertEquals(new Complex(-0.5,0.0),z.reciprocal());}"
"org.apache.commons.math3.complex.ComplexTest.testReciprocalImaginary",0,"@Test public void testReciprocalImaginary(){Complex z=new Complex(0.0,-2.0);Assert.assertEquals(new Complex(0.0,0.5),z.reciprocal());}"
"org.apache.commons.math3.complex.ComplexTest.testReciprocalInf",0,"@Test public void testReciprocalInf(){Complex z=new Complex(neginf,inf);Assert.assertTrue(z.reciprocal().equals(Complex.ZERO));z=new Complex(1,inf).reciprocal();Assert.assertEquals(z,Complex.ZERO);}"
"org.apache.commons.math3.complex.ComplexTest.testReciprocalZero",0,"@Test public void testReciprocalZero(){Assert.assertEquals(Complex.ZERO.reciprocal(),Complex.INF);}"
"org.apache.commons.math3.complex.ComplexTest.testReciprocalNaN",0,"@Test public void testReciprocalNaN(){Assert.assertTrue(Complex.NaN.reciprocal().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testMultiply",0,"@Test public void testMultiply(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.multiply(y);Assert.assertEquals(-9.0,z.getReal(),1.0e-5);Assert.assertEquals(38.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testMultiplyNaN",0,"@Test public void testMultiplyNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.multiply(Complex.NaN);Assert.assertSame(Complex.NaN,z);z=Complex.NaN.multiply(5);Assert.assertSame(Complex.NaN,z);}"
"org.apache.commons.math3.complex.ComplexTest.testMultiplyInfInf",0,"@Test public void testMultiplyInfInf(){Assert.assertTrue(infInf.multiply(infInf).isInfinite());}"
"org.apache.commons.math3.complex.ComplexTest.testMultiplyNaNInf",0,"@Test public void testMultiplyNaNInf(){Complex z=new Complex(1,1);Complex w=z.multiply(infOne);Assert.assertEquals(w.getReal(),inf,0);Assert.assertEquals(w.getImaginary(),inf,0);Assert.assertTrue(new Complex(1,0).multiply(infInf).equals(Complex.INF));Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));Assert.assertTrue(new Complex(1,0).multiply(negInfZero).equals(Complex.INF));w=oneInf.multiply(oneNegInf);Assert.assertEquals(w.getReal(),inf,0);Assert.assertEquals(w.getImaginary(),inf,0);w=negInfNegInf.multiply(oneNaN);Assert.assertTrue(Double.isNaN(w.getReal()));Assert.assertTrue(Double.isNaN(w.getImaginary()));z=new Complex(1,neginf);Assert.assertSame(Complex.INF,z.multiply(z));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarMultiply",0,"@Test public void testScalarMultiply(){Complex x=new Complex(3.0,4.0);double yDouble=2.0;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.multiply(yComplex),x.multiply(yDouble));int zInt=-5;Complex zComplex=new Complex(zInt);Assert.assertEquals(x.multiply(zComplex),x.multiply(zInt));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarMultiplyNaN",0,"@Test public void testScalarMultiplyNaN(){Complex x=new Complex(3.0,4.0);double yDouble=Double.NaN;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.multiply(yComplex),x.multiply(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarMultiplyInf",0,"@Test public void testScalarMultiplyInf(){Complex x=new Complex(1,1);double yDouble=Double.POSITIVE_INFINITY;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.multiply(yComplex),x.multiply(yDouble));yDouble=Double.NEGATIVE_INFINITY;yComplex=new Complex(yDouble);Assert.assertEquals(x.multiply(yComplex),x.multiply(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testNegate",0,"@Test public void testNegate(){Complex x=new Complex(3.0,4.0);Complex z=x.negate();Assert.assertEquals(-3.0,z.getReal(),1.0e-5);Assert.assertEquals(-4.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testNegateNaN",0,"@Test public void testNegateNaN(){Complex z=Complex.NaN.negate();Assert.assertTrue(z.isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testSubtract",0,"@Test public void testSubtract(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(5.0,6.0);Complex z=x.subtract(y);Assert.assertEquals(-2.0,z.getReal(),1.0e-5);Assert.assertEquals(-2.0,z.getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSubtractNaN",0,"@Test public void testSubtractNaN(){Complex x=new Complex(3.0,4.0);Complex z=x.subtract(Complex.NaN);Assert.assertSame(Complex.NaN,z);z=new Complex(1,nan);Complex w=x.subtract(z);Assert.assertSame(Complex.NaN,w);}"
"org.apache.commons.math3.complex.ComplexTest.testSubtractInf",0,"@Test public void testSubtractInf(){Complex x=new Complex(1,1);Complex z=new Complex(neginf,0);Complex w=x.subtract(z);Assert.assertEquals(w.getImaginary(),1,0);Assert.assertEquals(inf,w.getReal(),0);x=new Complex(neginf,0);Assert.assertTrue(Double.isNaN(x.subtract(z).getReal()));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarSubtract",0,"@Test public void testScalarSubtract(){Complex x=new Complex(3.0,4.0);double yDouble=2.0;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.subtract(yComplex),x.subtract(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarSubtractNaN",0,"@Test public void testScalarSubtractNaN(){Complex x=new Complex(3.0,4.0);double yDouble=Double.NaN;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.subtract(yComplex),x.subtract(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarSubtractInf",0,"@Test public void testScalarSubtractInf(){Complex x=new Complex(1,1);double yDouble=Double.POSITIVE_INFINITY;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.subtract(yComplex),x.subtract(yDouble));x=new Complex(neginf,0);Assert.assertEquals(x.subtract(yComplex),x.subtract(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsNull",0,"@Test public void testEqualsNull(){Complex x=new Complex(3.0,4.0);Assert.assertFalse(x.equals(null));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsClass",0,"@Test public void testEqualsClass(){Complex x=new Complex(3.0,4.0);Assert.assertFalse(x.equals(this));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsSame",0,"@Test public void testEqualsSame(){Complex x=new Complex(3.0,4.0);Assert.assertTrue(x.equals(x));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsTrue",0,"@Test public void testEqualsTrue(){Complex x=new Complex(3.0,4.0);Complex y=new Complex(3.0,4.0);Assert.assertTrue(x.equals(y));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsRealDifference",0,"@Test public void testEqualsRealDifference(){Complex x=new Complex(0.0,0.0);Complex y=new Complex(0.0 + Double.MIN_VALUE,0.0);Assert.assertFalse(x.equals(y));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsImaginaryDifference",0,"@Test public void testEqualsImaginaryDifference(){Complex x=new Complex(0.0,0.0);Complex y=new Complex(0.0,0.0 + Double.MIN_VALUE);Assert.assertFalse(x.equals(y));}"
"org.apache.commons.math3.complex.ComplexTest.testEqualsNaN",0,"@Test public void testEqualsNaN(){Complex realNaN=new Complex(Double.NaN,0.0);Complex imaginaryNaN=new Complex(0.0,Double.NaN);Complex complexNaN=Complex.NaN;Assert.assertTrue(realNaN.equals(imaginaryNaN));Assert.assertTrue(imaginaryNaN.equals(complexNaN));Assert.assertTrue(realNaN.equals(complexNaN));}"
"org.apache.commons.math3.complex.ComplexTest.testHashCode",0,"@Test public void testHashCode(){Complex x=new Complex(0.0,0.0);Complex y=new Complex(0.0,0.0 + Double.MIN_VALUE);Assert.assertFalse(x.hashCode()== y.hashCode());y=new Complex(0.0 + Double.MIN_VALUE,0.0);Assert.assertFalse(x.hashCode()== y.hashCode());Complex realNaN=new Complex(Double.NaN,0.0);Complex imaginaryNaN=new Complex(0.0,Double.NaN);Assert.assertEquals(realNaN.hashCode(),imaginaryNaN.hashCode());Assert.assertEquals(imaginaryNaN.hashCode(),Complex.NaN.hashCode());}"
"org.apache.commons.math3.complex.ComplexTest.testAcos",0,"@Test public void testAcos(){Complex z=new Complex(3,4);Complex expected=new Complex(0.936812,-2.30551);TestUtils.assertEquals(expected,z.acos(),1.0e-5);TestUtils.assertEquals(new Complex(FastMath.acos(0),0),Complex.ZERO.acos(),1.0e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testAcosInf",0,"@Test public void testAcosInf(){TestUtils.assertSame(Complex.NaN,oneInf.acos());TestUtils.assertSame(Complex.NaN,oneNegInf.acos());TestUtils.assertSame(Complex.NaN,infOne.acos());TestUtils.assertSame(Complex.NaN,negInfOne.acos());TestUtils.assertSame(Complex.NaN,infInf.acos());TestUtils.assertSame(Complex.NaN,infNegInf.acos());TestUtils.assertSame(Complex.NaN,negInfInf.acos());TestUtils.assertSame(Complex.NaN,negInfNegInf.acos());}"
"org.apache.commons.math3.complex.ComplexTest.testAcosNaN",0,"@Test public void testAcosNaN(){Assert.assertTrue(Complex.NaN.acos().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testAsin",0,"@Test public void testAsin(){Complex z=new Complex(3,4);Complex expected=new Complex(0.633984,2.30551);TestUtils.assertEquals(expected,z.asin(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testAsinNaN",0,"@Test public void testAsinNaN(){Assert.assertTrue(Complex.NaN.asin().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testAsinInf",0,"@Test public void testAsinInf(){TestUtils.assertSame(Complex.NaN,oneInf.asin());TestUtils.assertSame(Complex.NaN,oneNegInf.asin());TestUtils.assertSame(Complex.NaN,infOne.asin());TestUtils.assertSame(Complex.NaN,negInfOne.asin());TestUtils.assertSame(Complex.NaN,infInf.asin());TestUtils.assertSame(Complex.NaN,infNegInf.asin());TestUtils.assertSame(Complex.NaN,negInfInf.asin());TestUtils.assertSame(Complex.NaN,negInfNegInf.asin());}"
"org.apache.commons.math3.complex.ComplexTest.testAtan",0,"@Test public void testAtan(){Complex z=new Complex(3,4);Complex expected=new Complex(1.44831,0.158997);TestUtils.assertEquals(expected,z.atan(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testAtanInf",0,"@Test public void testAtanInf(){TestUtils.assertSame(Complex.NaN,oneInf.atan());TestUtils.assertSame(Complex.NaN,oneNegInf.atan());TestUtils.assertSame(Complex.NaN,infOne.atan());TestUtils.assertSame(Complex.NaN,negInfOne.atan());TestUtils.assertSame(Complex.NaN,infInf.atan());TestUtils.assertSame(Complex.NaN,infNegInf.atan());TestUtils.assertSame(Complex.NaN,negInfInf.atan());TestUtils.assertSame(Complex.NaN,negInfNegInf.atan());}"
"org.apache.commons.math3.complex.ComplexTest.testAtanI",0,"@Test public void testAtanI(){Assert.assertTrue(Complex.I.atan().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testAtanNaN",0,"@Test public void testAtanNaN(){Assert.assertTrue(Complex.NaN.atan().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testCos",0,"@Test public void testCos(){Complex z=new Complex(3,4);Complex expected=new Complex(-27.03495,-3.851153);TestUtils.assertEquals(expected,z.cos(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testCosNaN",0,"@Test public void testCosNaN(){Assert.assertTrue(Complex.NaN.cos().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testCosInf",0,"@Test public void testCosInf(){TestUtils.assertSame(infNegInf,oneInf.cos());TestUtils.assertSame(infInf,oneNegInf.cos());TestUtils.assertSame(Complex.NaN,infOne.cos());TestUtils.assertSame(Complex.NaN,negInfOne.cos());TestUtils.assertSame(Complex.NaN,infInf.cos());TestUtils.assertSame(Complex.NaN,infNegInf.cos());TestUtils.assertSame(Complex.NaN,negInfInf.cos());TestUtils.assertSame(Complex.NaN,negInfNegInf.cos());}"
"org.apache.commons.math3.complex.ComplexTest.testCosh",0,"@Test public void testCosh(){Complex z=new Complex(3,4);Complex expected=new Complex(-6.58066,-7.58155);TestUtils.assertEquals(expected,z.cosh(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testCoshNaN",0,"@Test public void testCoshNaN(){Assert.assertTrue(Complex.NaN.cosh().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testCoshInf",0,"@Test public void testCoshInf(){TestUtils.assertSame(Complex.NaN,oneInf.cosh());TestUtils.assertSame(Complex.NaN,oneNegInf.cosh());TestUtils.assertSame(infInf,infOne.cosh());TestUtils.assertSame(infNegInf,negInfOne.cosh());TestUtils.assertSame(Complex.NaN,infInf.cosh());TestUtils.assertSame(Complex.NaN,infNegInf.cosh());TestUtils.assertSame(Complex.NaN,negInfInf.cosh());TestUtils.assertSame(Complex.NaN,negInfNegInf.cosh());}"
"org.apache.commons.math3.complex.ComplexTest.testExp",0,"@Test public void testExp(){Complex z=new Complex(3,4);Complex expected=new Complex(-13.12878,-15.20078);TestUtils.assertEquals(expected,z.exp(),1.0e-5);TestUtils.assertEquals(Complex.ONE,Complex.ZERO.exp(),10e-12);Complex iPi=Complex.I.multiply(new Complex(pi,0));TestUtils.assertEquals(Complex.ONE.negate(),iPi.exp(),10e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testExpNaN",0,"@Test public void testExpNaN(){Assert.assertTrue(Complex.NaN.exp().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testExpInf",0,"@Test public void testExpInf(){TestUtils.assertSame(Complex.NaN,oneInf.exp());TestUtils.assertSame(Complex.NaN,oneNegInf.exp());TestUtils.assertSame(infInf,infOne.exp());TestUtils.assertSame(Complex.ZERO,negInfOne.exp());TestUtils.assertSame(Complex.NaN,infInf.exp());TestUtils.assertSame(Complex.NaN,infNegInf.exp());TestUtils.assertSame(Complex.NaN,negInfInf.exp());TestUtils.assertSame(Complex.NaN,negInfNegInf.exp());}"
"org.apache.commons.math3.complex.ComplexTest.testLog",0,"@Test public void testLog(){Complex z=new Complex(3,4);Complex expected=new Complex(1.60944,0.927295);TestUtils.assertEquals(expected,z.log(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testLogNaN",0,"@Test public void testLogNaN(){Assert.assertTrue(Complex.NaN.log().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testLogInf",0,"@Test public void testLogInf(){TestUtils.assertEquals(new Complex(inf,pi / 2),oneInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,-pi / 2),oneNegInf.log(),10e-12);TestUtils.assertEquals(infZero,infOne.log(),10e-12);TestUtils.assertEquals(new Complex(inf,pi),negInfOne.log(),10e-12);TestUtils.assertEquals(new Complex(inf,pi / 4),infInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,-pi / 4),infNegInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,3d * pi / 4),negInfInf.log(),10e-12);TestUtils.assertEquals(new Complex(inf,-3d * pi / 4),negInfNegInf.log(),10e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testLogZero",0,"@Test public void testLogZero(){TestUtils.assertSame(negInfZero,Complex.ZERO.log());}"
"org.apache.commons.math3.complex.ComplexTest.testPow",0,"@Test public void testPow(){Complex x=new Complex(3,4);Complex y=new Complex(5,6);Complex expected=new Complex(-1.860893,11.83677);TestUtils.assertEquals(expected,x.pow(y),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testPowNaNBase",0,"@Test public void testPowNaNBase(){Complex x=new Complex(3,4);Assert.assertTrue(Complex.NaN.pow(x).isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testPowNaNExponent",0,"@Test public void testPowNaNExponent(){Complex x=new Complex(3,4);Assert.assertTrue(x.pow(Complex.NaN).isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testPowInf",0,"@Test public void testPowInf(){TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));}"
"org.apache.commons.math3.complex.ComplexTest.testPowZero",0,"@Test public void testPowZero(){TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(Complex.ONE));TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(Complex.ZERO));TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(Complex.I));TestUtils.assertEquals(Complex.ONE,Complex.ONE.pow(Complex.ZERO),10e-12);TestUtils.assertEquals(Complex.ONE,Complex.I.pow(Complex.ZERO),10e-12);TestUtils.assertEquals(Complex.ONE,new Complex(-1,3).pow(Complex.ZERO),10e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testScalarPow",0,"@Test public void testScalarPow(){Complex x=new Complex(3,4);double yDouble=5.0;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.pow(yComplex),x.pow(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarPowNaNBase",0,"@Test public void testScalarPowNaNBase(){Complex x=Complex.NaN;double yDouble=5.0;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.pow(yComplex),x.pow(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarPowNaNExponent",0,"@Test public void testScalarPowNaNExponent(){Complex x=new Complex(3,4);double yDouble=Double.NaN;Complex yComplex=new Complex(yDouble);Assert.assertEquals(x.pow(yComplex),x.pow(yDouble));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarPowInf",0,"@Test public void testScalarPowInf(){TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.POSITIVE_INFINITY));TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(Double.NEGATIVE_INFINITY));TestUtils.assertSame(Complex.NaN,infOne.pow(1.0));TestUtils.assertSame(Complex.NaN,negInfOne.pow(1.0));TestUtils.assertSame(Complex.NaN,infInf.pow(1.0));TestUtils.assertSame(Complex.NaN,infNegInf.pow(1.0));TestUtils.assertSame(Complex.NaN,negInfInf.pow(10));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(1.0));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Double.POSITIVE_INFINITY));TestUtils.assertSame(Complex.NaN,infInf.pow(Double.POSITIVE_INFINITY));TestUtils.assertSame(Complex.NaN,infInf.pow(Double.NEGATIVE_INFINITY));TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.NEGATIVE_INFINITY));TestUtils.assertSame(Complex.NaN,infNegInf.pow(Double.POSITIVE_INFINITY));}"
"org.apache.commons.math3.complex.ComplexTest.testScalarPowZero",0,"@Test public void testScalarPowZero(){TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(1.0));TestUtils.assertSame(Complex.NaN,Complex.ZERO.pow(0.0));TestUtils.assertEquals(Complex.ONE,Complex.ONE.pow(0.0),10e-12);TestUtils.assertEquals(Complex.ONE,Complex.I.pow(0.0),10e-12);TestUtils.assertEquals(Complex.ONE,new Complex(-1,3).pow(0.0),10e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testpowNull",0,"@Test(expected=NullArgumentException.class)public void testpowNull(){Complex.ONE.pow(null);}"
"org.apache.commons.math3.complex.ComplexTest.testSin",0,"@Test public void testSin(){Complex z=new Complex(3,4);Complex expected=new Complex(3.853738,-27.01681);TestUtils.assertEquals(expected,z.sin(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSinInf",0,"@Test public void testSinInf(){TestUtils.assertSame(infInf,oneInf.sin());TestUtils.assertSame(infNegInf,oneNegInf.sin());TestUtils.assertSame(Complex.NaN,infOne.sin());TestUtils.assertSame(Complex.NaN,negInfOne.sin());TestUtils.assertSame(Complex.NaN,infInf.sin());TestUtils.assertSame(Complex.NaN,infNegInf.sin());TestUtils.assertSame(Complex.NaN,negInfInf.sin());TestUtils.assertSame(Complex.NaN,negInfNegInf.sin());}"
"org.apache.commons.math3.complex.ComplexTest.testSinNaN",0,"@Test public void testSinNaN(){Assert.assertTrue(Complex.NaN.sin().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testSinh",0,"@Test public void testSinh(){Complex z=new Complex(3,4);Complex expected=new Complex(-6.54812,-7.61923);TestUtils.assertEquals(expected,z.sinh(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSinhNaN",0,"@Test public void testSinhNaN(){Assert.assertTrue(Complex.NaN.sinh().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testSinhInf",0,"@Test public void testSinhInf(){TestUtils.assertSame(Complex.NaN,oneInf.sinh());TestUtils.assertSame(Complex.NaN,oneNegInf.sinh());TestUtils.assertSame(infInf,infOne.sinh());TestUtils.assertSame(negInfInf,negInfOne.sinh());TestUtils.assertSame(Complex.NaN,infInf.sinh());TestUtils.assertSame(Complex.NaN,infNegInf.sinh());TestUtils.assertSame(Complex.NaN,negInfInf.sinh());TestUtils.assertSame(Complex.NaN,negInfNegInf.sinh());}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtRealPositive",0,"@Test public void testSqrtRealPositive(){Complex z=new Complex(3,4);Complex expected=new Complex(2,1);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtRealZero",0,"@Test public void testSqrtRealZero(){Complex z=new Complex(0.0,4);Complex expected=new Complex(1.41421,1.41421);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtRealNegative",0,"@Test public void testSqrtRealNegative(){Complex z=new Complex(-3.0,4);Complex expected=new Complex(1,2);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtImaginaryZero",0,"@Test public void testSqrtImaginaryZero(){Complex z=new Complex(-3.0,0.0);Complex expected=new Complex(0.0,1.73205);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtImaginaryNegative",0,"@Test public void testSqrtImaginaryNegative(){Complex z=new Complex(-3.0,-4.0);Complex expected=new Complex(1.0,-2.0);TestUtils.assertEquals(expected,z.sqrt(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtPolar",0,"@Test public void testSqrtPolar(){double r=1;for (int i=0;i < 5;i++){r+=i;double theta=0;for (int j=0;j < 11;j++){theta+=pi / 12;Complex z=ComplexUtils.polar2Complex(r,theta);Complex sqrtz=ComplexUtils.polar2Complex(FastMath.sqrt(r),theta / 2);TestUtils.assertEquals(sqrtz,z.sqrt(),10e-12);}}}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtNaN",0,"@Test public void testSqrtNaN(){Assert.assertTrue(Complex.NaN.sqrt().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testSqrtInf",0,"@Test public void testSqrtInf(){TestUtils.assertSame(infNaN,oneInf.sqrt());TestUtils.assertSame(infNaN,oneNegInf.sqrt());TestUtils.assertSame(infZero,infOne.sqrt());TestUtils.assertSame(zeroInf,negInfOne.sqrt());TestUtils.assertSame(infNaN,infInf.sqrt());TestUtils.assertSame(infNaN,infNegInf.sqrt());TestUtils.assertSame(nanInf,negInfInf.sqrt());TestUtils.assertSame(nanNegInf,negInfNegInf.sqrt());}"
"org.apache.commons.math3.complex.ComplexTest.testSqrt1z",0,"@Test public void testSqrt1z(){Complex z=new Complex(3,4);Complex expected=new Complex(4.08033,-2.94094);TestUtils.assertEquals(expected,z.sqrt1z(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testSqrt1zNaN",0,"@Test public void testSqrt1zNaN(){Assert.assertTrue(Complex.NaN.sqrt1z().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testTan",0,"@Test public void testTan(){Complex z=new Complex(3,4);Complex expected=new Complex(-0.000187346,0.999356);TestUtils.assertEquals(expected,z.tan(),1.0e-5);Complex actual=new Complex(3.0,1E10).tan();expected=new Complex(0,1);TestUtils.assertEquals(expected,actual,1.0e-5);actual=new Complex(3.0,-1E10).tan();expected=new Complex(0,-1);TestUtils.assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testTanNaN",0,"@Test public void testTanNaN(){Assert.assertTrue(Complex.NaN.tan().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testTanInf",0,"@Test public void testTanInf(){TestUtils.assertSame(Complex.valueOf(0.0,1.0),oneInf.tan());TestUtils.assertSame(Complex.valueOf(0.0,-1.0),oneNegInf.tan());TestUtils.assertSame(Complex.NaN,infOne.tan());TestUtils.assertSame(Complex.NaN,negInfOne.tan());TestUtils.assertSame(Complex.NaN,infInf.tan());TestUtils.assertSame(Complex.NaN,infNegInf.tan());TestUtils.assertSame(Complex.NaN,negInfInf.tan());TestUtils.assertSame(Complex.NaN,negInfNegInf.tan());}"
"org.apache.commons.math3.complex.ComplexTest.testTanCritical",0,"@Test public void testTanCritical(){TestUtils.assertSame(infNaN,new Complex(pi / 2,0).tan());TestUtils.assertSame(negInfNaN,new Complex(-pi / 2,0).tan());}"
"org.apache.commons.math3.complex.ComplexTest.testTanh",0,"@Test public void testTanh(){Complex z=new Complex(3,4);Complex expected=new Complex(1.00071,0.00490826);TestUtils.assertEquals(expected,z.tanh(),1.0e-5);Complex actual=new Complex(1E10,3.0).tanh();expected=new Complex(1,0);TestUtils.assertEquals(expected,actual,1.0e-5);actual=new Complex(-1E10,3.0).tanh();expected=new Complex(-1,0);TestUtils.assertEquals(expected,actual,1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testTanhNaN",0,"@Test public void testTanhNaN(){Assert.assertTrue(Complex.NaN.tanh().isNaN());}"
"org.apache.commons.math3.complex.ComplexTest.testTanhInf",0,"@Test public void testTanhInf(){TestUtils.assertSame(Complex.NaN,oneInf.tanh());TestUtils.assertSame(Complex.NaN,oneNegInf.tanh());TestUtils.assertSame(Complex.valueOf(1.0,0.0),infOne.tanh());TestUtils.assertSame(Complex.valueOf(-1.0,0.0),negInfOne.tanh());TestUtils.assertSame(Complex.NaN,infInf.tanh());TestUtils.assertSame(Complex.NaN,infNegInf.tanh());TestUtils.assertSame(Complex.NaN,negInfInf.tanh());TestUtils.assertSame(Complex.NaN,negInfNegInf.tanh());}"
"org.apache.commons.math3.complex.ComplexTest.testTanhCritical",0,"@Test public void testTanhCritical(){TestUtils.assertSame(nanInf,new Complex(0,pi / 2).tanh());}"
"org.apache.commons.math3.complex.ComplexTest.testMath221",0,"/** * test issue MATH-221 */@Test public void testMath221(){Assert.assertEquals(new Complex(0,-1),new Complex(0,1).multiply(new Complex(-1,0)));}"
"org.apache.commons.math3.complex.ComplexTest.testNthRoot_normal_thirdRoot",0,"/** * Test: computing <b>third roots</b> of z. <pre> <code> <b>z = -2 + 2 * i</b> => z_0 =  1      +          i => z_1 = -1.3660 + 0.3660 * i => z_2 =  0.3660 - 1.3660 * i </code> </pre>*/@Test public void testNthRoot_normal_thirdRoot(){Complex z=new Complex(-2,2);Complex[]thirdRootsOfZ=z.nthRoot(3).toArray(new Complex[0]);Assert.assertEquals(3,thirdRootsOfZ.length);Assert.assertEquals(1.0,thirdRootsOfZ[0].getReal(),1.0e-5);Assert.assertEquals(1.0,thirdRootsOfZ[0].getImaginary(),1.0e-5);Assert.assertEquals(-1.3660254037844386,thirdRootsOfZ[1].getReal(),1.0e-5);Assert.assertEquals(0.36602540378443843,thirdRootsOfZ[1].getImaginary(),1.0e-5);Assert.assertEquals(0.366025403784439,thirdRootsOfZ[2].getReal(),1.0e-5);Assert.assertEquals(-1.3660254037844384,thirdRootsOfZ[2].getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testNthRoot_normal_fourthRoot",0,"/** * Test: computing <b>fourth roots</b> of z. <pre> <code> <b>z = 5 - 2 * i</b> => z_0 =  1.5164 - 0.1446 * i => z_1 =  0.1446 + 1.5164 * i => z_2 = -1.5164 + 0.1446 * i => z_3 = -1.5164 - 0.1446 * i </code> </pre>*/@Test public void testNthRoot_normal_fourthRoot(){Complex z=new Complex(5,-2);Complex[]fourthRootsOfZ=z.nthRoot(4).toArray(new Complex[0]);Assert.assertEquals(4,fourthRootsOfZ.length);Assert.assertEquals(1.5164629308487783,fourthRootsOfZ[0].getReal(),1.0e-5);Assert.assertEquals(-0.14469266210702247,fourthRootsOfZ[0].getImaginary(),1.0e-5);Assert.assertEquals(0.14469266210702256,fourthRootsOfZ[1].getReal(),1.0e-5);Assert.assertEquals(1.5164629308487783,fourthRootsOfZ[1].getImaginary(),1.0e-5);Assert.assertEquals(-1.5164629308487783,fourthRootsOfZ[2].getReal(),1.0e-5);Assert.assertEquals(0.14469266210702267,fourthRootsOfZ[2].getImaginary(),1.0e-5);Assert.assertEquals(-0.14469266210702275,fourthRootsOfZ[3].getReal(),1.0e-5);Assert.assertEquals(-1.5164629308487783,fourthRootsOfZ[3].getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty",0,"/** * Test: computing <b>third roots</b> of z. <pre> <code> <b>z = 8</b> => z_0 =  2 => z_1 = -1 + 1.73205 * i => z_2 = -1 - 1.73205 * i </code> </pre>*/@Test public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty(){Complex z=new Complex(8,0);Complex[]thirdRootsOfZ=z.nthRoot(3).toArray(new Complex[0]);Assert.assertEquals(3,thirdRootsOfZ.length);Assert.assertEquals(2.0,thirdRootsOfZ[0].getReal(),1.0e-5);Assert.assertEquals(0.0,thirdRootsOfZ[0].getImaginary(),1.0e-5);Assert.assertEquals(-1.0,thirdRootsOfZ[1].getReal(),1.0e-5);Assert.assertEquals(1.7320508075688774,thirdRootsOfZ[1].getImaginary(),1.0e-5);Assert.assertEquals(-1.0,thirdRootsOfZ[2].getReal(),1.0e-5);Assert.assertEquals(-1.732050807568877,thirdRootsOfZ[2].getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_realPartZero",0,"/** * Test: computing <b>third roots</b> of z with real part 0. <pre> <code> <b>z = 2 * i</b> => z_0 =  1.0911 + 0.6299 * i => z_1 = -1.0911 + 0.6299 * i => z_2 = -2.3144 - 1.2599 * i </code> </pre>*/@Test public void testNthRoot_cornercase_thirdRoot_realPartZero(){Complex z=new Complex(0,2);Complex[]thirdRootsOfZ=z.nthRoot(3).toArray(new Complex[0]);Assert.assertEquals(3,thirdRootsOfZ.length);Assert.assertEquals(1.0911236359717216,thirdRootsOfZ[0].getReal(),1.0e-5);Assert.assertEquals(0.6299605249474365,thirdRootsOfZ[0].getImaginary(),1.0e-5);Assert.assertEquals(-1.0911236359717216,thirdRootsOfZ[1].getReal(),1.0e-5);Assert.assertEquals(0.6299605249474365,thirdRootsOfZ[1].getImaginary(),1.0e-5);Assert.assertEquals(-2.3144374213981936E-16,thirdRootsOfZ[2].getReal(),1.0e-5);Assert.assertEquals(-1.2599210498948732,thirdRootsOfZ[2].getImaginary(),1.0e-5);}"
"org.apache.commons.math3.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf",0,"/** * Test cornercases with NaN and Infinity.*/@Test public void testNthRoot_cornercase_NAN_Inf(){List<Complex> roots=oneNaN.nthRoot(3);Assert.assertEquals(1,roots.size());Assert.assertEquals(Complex.NaN,roots.get(0));roots=nanZero.nthRoot(3);Assert.assertEquals(1,roots.size());Assert.assertEquals(Complex.NaN,roots.get(0));roots=nanInf.nthRoot(3);Assert.assertEquals(1,roots.size());Assert.assertEquals(Complex.NaN,roots.get(0));roots=oneInf.nthRoot(3);Assert.assertEquals(1,roots.size());Assert.assertEquals(Complex.INF,roots.get(0));roots=negInfInf.nthRoot(3);Assert.assertEquals(1,roots.size());Assert.assertEquals(Complex.INF,roots.get(0));}"
"org.apache.commons.math3.complex.ComplexTest.testGetArgument",0,"/** * Test standard values*/@Test public void testGetArgument(){Complex z=new Complex(1,0);Assert.assertEquals(0.0,z.getArgument(),1.0e-12);z=new Complex(1,1);Assert.assertEquals(FastMath.PI / 4,z.getArgument(),1.0e-12);z=new Complex(0,1);Assert.assertEquals(FastMath.PI / 2,z.getArgument(),1.0e-12);z=new Complex(-1,1);Assert.assertEquals(3 * FastMath.PI / 4,z.getArgument(),1.0e-12);z=new Complex(-1,0);Assert.assertEquals(FastMath.PI,z.getArgument(),1.0e-12);z=new Complex(-1,-1);Assert.assertEquals(-3 * FastMath.PI / 4,z.getArgument(),1.0e-12);z=new Complex(0,-1);Assert.assertEquals(-FastMath.PI / 2,z.getArgument(),1.0e-12);z=new Complex(1,-1);Assert.assertEquals(-FastMath.PI / 4,z.getArgument(),1.0e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testGetArgumentInf",0,"/** * Verify atan2-style handling of infinite parts*/@Test public void testGetArgumentInf(){Assert.assertEquals(FastMath.PI / 4,infInf.getArgument(),1.0e-12);Assert.assertEquals(FastMath.PI / 2,oneInf.getArgument(),1.0e-12);Assert.assertEquals(0.0,infOne.getArgument(),1.0e-12);Assert.assertEquals(FastMath.PI / 2,zeroInf.getArgument(),1.0e-12);Assert.assertEquals(0.0,infZero.getArgument(),1.0e-12);Assert.assertEquals(FastMath.PI,negInfOne.getArgument(),1.0e-12);Assert.assertEquals(-3.0 * FastMath.PI / 4,negInfNegInf.getArgument(),1.0e-12);Assert.assertEquals(-FastMath.PI / 2,oneNegInf.getArgument(),1.0e-12);}"
"org.apache.commons.math3.complex.ComplexTest.testGetArgumentNaN",0,"/** * Verify that either part NaN results in NaN*/@Test public void testGetArgumentNaN(){Assert.assertTrue(Double.isNaN(nanZero.getArgument()));Assert.assertTrue(Double.isNaN(zeroNaN.getArgument()));Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument()));}"
"org.apache.commons.math3.complex.ComplexTest.testSerial",0,"@Test public void testSerial(){Complex z=new Complex(3.0,4.0);Assert.assertEquals(z,TestUtils.serializeAndRecover(z));Complex ncmplx=(Complex)TestUtils.serializeAndRecover(oneNaN);Assert.assertEquals(nanZero,ncmplx);Assert.assertTrue(ncmplx.isNaN());Complex infcmplx=(Complex)TestUtils.serializeAndRecover(infInf);Assert.assertEquals(infInf,infcmplx);Assert.assertTrue(infcmplx.isInfinite());TestComplex tz=new TestComplex(3.0,4.0);Assert.assertEquals(tz,TestUtils.serializeAndRecover(tz));TestComplex ntcmplx=(TestComplex)TestUtils.serializeAndRecover(new TestComplex(oneNaN));Assert.assertEquals(nanZero,ntcmplx);Assert.assertTrue(ntcmplx.isNaN());TestComplex inftcmplx=(TestComplex)TestUtils.serializeAndRecover(new TestComplex(infInf));Assert.assertEquals(infInf,inftcmplx);Assert.assertTrue(inftcmplx.isInfinite());}"
"org.apache.commons.math3.exception.util.ExceptionContextTest.testMessageChain",0,"@Test public void testMessageChain(){final ExceptionContext c=new ExceptionContext(new Exception(""oops""));final String sep="" | "";final String m1=""column index (0)"";c.addMessage(LocalizedFormats.COLUMN_INDEX,0);final String m2=""got 1x2 but expected 3x4"";c.addMessage(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,1,2,3,4);final String m3=""It didn't work out"";c.addMessage(LocalizedFormats.SIMPLE_MESSAGE,m3);Assert.assertEquals(c.getMessage(Locale.US,sep),m1 + sep + m2+ sep+ m3);}"
"org.apache.commons.math3.exception.util.ExceptionContextTest.testNoArgAddMessage",0,"@Test public void testNoArgAddMessage(){final ExceptionContext c=new ExceptionContext(new Exception(""hello""));c.addMessage(LocalizedFormats.SIMPLE_MESSAGE);Assert.assertEquals(c.getMessage(),""{0}"");}"
"org.apache.commons.math3.exception.util.ExceptionContextTest.testContext",0,"@Test public void testContext(){final ExceptionContext c=new ExceptionContext(new Exception(""bye""));final String[]keys={""Key 1"",""Key 2""};final Object[]values={""Value 1"",Integer.valueOf(2)};for (int i=0;i < keys.length;i++){c.setValue(keys[i],values[i]);}Assert.assertTrue(c.getKeys().containsAll(Arrays.asList(keys)));for (int i=0;i < keys.length;i++){Assert.assertEquals(values[i],c.getValue(keys[i]));}Assert.assertNull(c.getValue(""xyz""));}"
"org.apache.commons.math3.exception.util.ExceptionContextTest.testSerialize",0,"@Test public void testSerialize()throws IOException,ClassNotFoundException {final ExceptionContext cOut=new ExceptionContext(new Exception(""Apache""));cOut.addMessage(LocalizedFormats.COLUMN_INDEX,0);cOut.setValue(""Key 1"",Integer.valueOf(0));ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);oos.writeObject(cOut);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ExceptionContext cIn=(ExceptionContext)ois.readObject();Assert.assertTrue(cOut.getMessage().equals(cIn.getMessage()));for(String key : cIn.getKeys()){Assert.assertTrue(cOut.getValue(key).equals(cIn.getValue(key)));}}"
"org.apache.commons.math3.exception.util.ExceptionContextTest.testSerializeUnserializable",0,"@Test public void testSerializeUnserializable()throws Exception {final ExceptionContext cOut=new ExceptionContext(new Exception(""Apache Commons Math""));cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE,""OK"");cOut.addMessage(LocalizedFormats.SIMPLE_MESSAGE,new Unserializable());String key=""Key 1"";cOut.setValue(key,new Unserializable());{ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);oos.writeObject(cOut);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ExceptionContext cIn=(ExceptionContext)ois.readObject();String nsObjStr=(String)cIn.getValue(key);Assert.assertTrue(nsObjStr.matches("".*could not be serialized.*""));}}"
"org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateIntegrator integrator=new TrapezoidIntegrator();double min,max,expected,result,tolerance;min=0;max=FastMath.PI;expected=2;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(10000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 2500);Assert.assertTrue(integrator.getIterations()< 15);Assert.assertEquals(expected,result,tolerance);min=-FastMath.PI / 3;max=0;expected=-0.5;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(10000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 2500);Assert.assertTrue(integrator.getIterations()< 15);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new TrapezoidIntegrator();double min,max,expected,result,tolerance;min=0;max=1;expected=-1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(10000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 5000);Assert.assertTrue(integrator.getIterations()< 15);Assert.assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(10000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 2500);Assert.assertTrue(integrator.getIterations()< 15);Assert.assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(10000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 5000);Assert.assertTrue(integrator.getIterations()< 15);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.TrapezoidIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/@Test public void testParameters(){UnivariateFunction f=new Sin();try {new TrapezoidIntegrator().integrate(1000,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {new TrapezoidIntegrator(5,4);Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");}catch(NumberIsTooSmallException ex){}try {new TrapezoidIntegrator(10,99);Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");}catch(NumberIsTooLargeException ex){}}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testNonEmptyData",0,"@Test(expected=NotStrictlyPositiveException.class)public void testNonEmptyData(){new MultivariateNormalMixtureExpectationMaximization(new double[][]{});}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testNonJaggedData",0,"@Test(expected=DimensionMismatchException.class)public void testNonJaggedData(){double[][]data=new double[][]{{1,2,3},{4,5,6,7}};new MultivariateNormalMixtureExpectationMaximization(data);}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testMultipleColumnsRequired",0,"@Test(expected=NumberIsTooSmallException.class)public void testMultipleColumnsRequired(){double[][]data=new double[][]{{1},{2}};new MultivariateNormalMixtureExpectationMaximization(data);}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testMaxIterationsPositive",0,"@Test(expected=NotStrictlyPositiveException.class)public void testMaxIterationsPositive(){double[][]data=getTestSamples();MultivariateNormalMixtureExpectationMaximization fitter=new MultivariateNormalMixtureExpectationMaximization(data);MixtureMultivariateNormalDistribution initialMix=MultivariateNormalMixtureExpectationMaximization.estimate(data,2);fitter.fit(initialMix,0,1E-5);}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testThresholdPositive",0,"@Test(expected=NotStrictlyPositiveException.class)public void testThresholdPositive(){double[][]data=getTestSamples();MultivariateNormalMixtureExpectationMaximization fitter=new MultivariateNormalMixtureExpectationMaximization(data);MixtureMultivariateNormalDistribution initialMix=MultivariateNormalMixtureExpectationMaximization.estimate(data,2);fitter.fit(initialMix,1000,0);}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testConvergenceException",0,"@Test(expected=ConvergenceException.class)public void testConvergenceException(){double[][]data=getTestSamples();MultivariateNormalMixtureExpectationMaximization fitter=new MultivariateNormalMixtureExpectationMaximization(data);MixtureMultivariateNormalDistribution initialMix=MultivariateNormalMixtureExpectationMaximization.estimate(data,2);fitter.fit(initialMix,5,1E-5);}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testIncompatibleIntialMixture",0,"@Test(expected=DimensionMismatchException.class)public void testIncompatibleIntialMixture(){double[][]data=new double[][]{{1,2,3},{4,5,6},{7,8,9}};double[]weights=new double[]{0.5,0.5};MultivariateNormalDistribution[]mvns=new MultivariateNormalDistribution[2];mvns[0]=new MultivariateNormalDistribution(new double[]{-0.0021722935000328823,3.5432892936887908},new double[][]{{4.537422569229048,3.5266152281729304},{3.5266152281729304,6.175448814169779}});mvns[1]=new MultivariateNormalDistribution(new double[]{5.090902706507635,8.68540656355283},new double[][]{{2.886778573963039,1.5257474543463154},{1.5257474543463154,3.3794567673616918}});List<Pair<Double,MultivariateNormalDistribution>> components=new ArrayList<Pair<Double,MultivariateNormalDistribution>>();components.add(new Pair<Double,MultivariateNormalDistribution>(weights[0],mvns[0]));components.add(new Pair<Double,MultivariateNormalDistribution>(weights[1],mvns[1]));MixtureMultivariateNormalDistribution badInitialMix=new MixtureMultivariateNormalDistribution(components);MultivariateNormalMixtureExpectationMaximization fitter=new MultivariateNormalMixtureExpectationMaximization(data);fitter.fit(badInitialMix);}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testInitialMixture",0,"@Test public void testInitialMixture(){final double[]correctWeights=new double[]{0.5,0.5};final double[][]correctMeans=new double[][]{{-0.0021722935000328823,3.5432892936887908},{5.090902706507635,8.68540656355283}};final RealMatrix[]correctCovMats=new Array2DRowRealMatrix[2];correctCovMats[0]=new Array2DRowRealMatrix(new double[][]{{4.537422569229048,3.5266152281729304},{3.5266152281729304,6.175448814169779}});correctCovMats[1]=new Array2DRowRealMatrix(new double[][]{{2.886778573963039,1.5257474543463154},{1.5257474543463154,3.3794567673616918}});final MultivariateNormalDistribution[]correctMVNs=new MultivariateNormalDistribution[2];correctMVNs[0]=new MultivariateNormalDistribution(correctMeans[0],correctCovMats[0].getData());correctMVNs[1]=new MultivariateNormalDistribution(correctMeans[1],correctCovMats[1].getData());final MixtureMultivariateNormalDistribution initialMix=MultivariateNormalMixtureExpectationMaximization.estimate(getTestSamples(),2);int i=0;for(Pair<Double,MultivariateNormalDistribution> component : initialMix.getComponents()){Assert.assertEquals(correctWeights[i],component.getFirst(),Math.ulp(1d));final double[]means=component.getValue().getMeans();Assert.assertTrue(Arrays.equals(correctMeans[i],means));final RealMatrix covMat=component.getValue().getCovariances();Assert.assertEquals(correctCovMats[i],covMat);i++;}}"
"org.apache.commons.math3.distribution.fitting.MultivariateNormalMixtureExpectationMaximizationTest.testFit",0,"@Test public void testFit(){final double[][]data=getTestSamples();final double correctLogLikelihood=-4.292431006791994;final double[]correctWeights=new double[]{0.2962324189652912,0.7037675810347089};final double[][]correctMeans=new double[][]{{-1.4213112715121132,1.6924690505757753},{4.213612224374709,7.975621325853645}};final RealMatrix[]correctCovMats=new Array2DRowRealMatrix[2];correctCovMats[0]=new Array2DRowRealMatrix(new double[][]{{1.739356907285747,-0.5867644251487614},{-0.5867644251487614,1.0232932029324642}});correctCovMats[1]=new Array2DRowRealMatrix(new double[][]{{4.245384898007161,2.5797798966382155},{2.5797798966382155,3.9200272522448367}});final MultivariateNormalDistribution[]correctMVNs=new MultivariateNormalDistribution[2];correctMVNs[0]=new MultivariateNormalDistribution(correctMeans[0],correctCovMats[0].getData());correctMVNs[1]=new MultivariateNormalDistribution(correctMeans[1],correctCovMats[1].getData());MultivariateNormalMixtureExpectationMaximization fitter=new MultivariateNormalMixtureExpectationMaximization(data);MixtureMultivariateNormalDistribution initialMix=MultivariateNormalMixtureExpectationMaximization.estimate(data,2);fitter.fit(initialMix);MixtureMultivariateNormalDistribution fittedMix=fitter.getFittedModel();List<Pair<Double,MultivariateNormalDistribution>> components=fittedMix.getComponents();Assert.assertEquals(correctLogLikelihood,fitter.getLogLikelihood(),Math.ulp(1d));int i=0;for(Pair<Double,MultivariateNormalDistribution> component : components){final double weight=component.getFirst();final MultivariateNormalDistribution mvn=component.getSecond();final double[]mean=mvn.getMeans();final RealMatrix covMat=mvn.getCovariances();Assert.assertEquals(correctWeights[i],weight,Math.ulp(1d));Assert.assertTrue(Arrays.equals(correctMeans[i],mean));Assert.assertEquals(correctCovMats[i],covMat);i++;}}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest.testStartSimplexInsideRange",0,"@Test public void testStartSimplexInsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(2.0,2.5,1.0,3.0,2.0,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[]{1.0,0.5});final PointValuePair optimum=optimizer.optimize(new MaxEval(300),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(new double[]{1.5,2.25}));Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest.testStartSimplexOutsideRange",0,"@Test public void testStartSimplexOutsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(2.0,2.5,1.0,3.0,2.0,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[]{1.0,0.5});final PointValuePair optimum=optimizer.optimize(new MaxEval(300),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(new double[]{-1.5,4.0}));Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest.testOptimumOutsideRange",0,"@Test public void testOptimumOutsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,1.0,3.0,2.0,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(new SimplePointChecker<PointValuePair>(1.0e-11,1.0e-20));final AbstractSimplex simplex=new NelderMeadSimplex(new double[]{1.0,0.5});final PointValuePair optimum=optimizer.optimize(new MaxEval(600),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(new double[]{-1.5,4.0}));Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest.testUnbounded",0,"@Test public void testUnbounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final AbstractSimplex simplex=new NelderMeadSimplex(new double[]{1.0,0.5});final PointValuePair optimum=optimizer.optimize(new MaxEval(300),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(new double[]{-1.5,4.0}));Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest.testHalfBounded",0,"@Test public void testHalfBounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,4.0,1.0,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,3.0);final MultivariateFunctionPenaltyAdapter wrapped=new MultivariateFunctionPenaltyAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper(),1000.0,new double[]{100.0,100.0});SimplexOptimizer optimizer=new SimplexOptimizer(new SimplePointChecker<PointValuePair>(1.0e-10,1.0e-20));final AbstractSimplex simplex=new NelderMeadSimplex(new double[]{1.0,0.5});final PointValuePair optimum=optimizer.optimize(new MaxEval(400),new ObjectiveFunction(wrapped),simplex,GoalType.MINIMIZE,new InitialGuess(new double[]{-1.5,4.0}));Assert.assertEquals(biQuadratic.getBoundedXOptimum(),optimum.getPoint()[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),optimum.getPoint()[1],2e-7);}"
"org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest.testStats",0,"/** * test stats */@Test public void testStats(){List<Object> externalList=new ArrayList<Object>();DescriptiveStatistics u=new ListUnivariateImpl(externalList,transformers);Assert.assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(two);u.addValue(two);u.addValue(three);Assert.assertEquals(""N"",n,u.getN(),tolerance);Assert.assertEquals(""sum"",sum,u.getSum(),tolerance);Assert.assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);Assert.assertEquals(""var"",var,u.getVariance(),tolerance);Assert.assertEquals(""std"",std,u.getStandardDeviation(),tolerance);Assert.assertEquals(""mean"",mean,u.getMean(),tolerance);Assert.assertEquals(""min"",min,u.getMin(),tolerance);Assert.assertEquals(""max"",max,u.getMax(),tolerance);u.clear();Assert.assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){DescriptiveStatistics u=new ListUnivariateImpl(new ArrayList<Object>(),transformers);Assert.assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));Assert.assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));Assert.assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));u.addValue(one);Assert.assertTrue(""Mean of n = 1 set should be value of single item n1,instead it is "" + u.getMean(),u.getMean()== one);Assert.assertTrue(""StdDev of n = 1 set should be zero,instead it is: "" + u.getStandardDeviation(),u.getStandardDeviation()== 0);Assert.assertTrue(""Variance of n = 1 set should be zero"",u.getVariance()== 0);}"
"org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest.testSkewAndKurtosis",0,"@Test public void testSkewAndKurtosis(){ListUnivariateImpl u=new ListUnivariateImpl(new ArrayList<Object>(),transformers);u.addObject(""12.5"");u.addObject(Integer.valueOf(12));u.addObject(""11.8"");u.addObject(""14.2"");u.addObject(new Foo());u.addObject(""14.5"");u.addObject(Long.valueOf(21));u.addObject(""8.2"");u.addObject(""10.3"");u.addObject(""11.3"");u.addObject(Float.valueOf(14.1f));u.addObject(""9.9"");u.addObject(""12.2"");u.addObject(new Bar());u.addObject(""12.1"");u.addObject(""11"");u.addObject(Double.valueOf(19.8));u.addObject(""11"");u.addObject(""10"");u.addObject(""8.8"");u.addObject(""9"");u.addObject(""12.3"");Assert.assertEquals(""mean"",12.40455,u.getMean(),0.0001);Assert.assertEquals(""variance"",10.00236,u.getVariance(),0.0001);Assert.assertEquals(""skewness"",1.437424,u.getSkewness(),0.0001);Assert.assertEquals(""kurtosis"",2.37719,u.getKurtosis(),0.0001);}"
"org.apache.commons.math3.stat.descriptive.MixedListUnivariateImplTest.testProductAndGeometricMean",0,"@Test public void testProductAndGeometricMean(){ListUnivariateImpl u=new ListUnivariateImpl(new ArrayList<Object>(),transformers);u.setWindowSize(10);u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);Assert.assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);for (int i=0;i < 10;i++){u.addValue(i + 2);}Assert.assertEquals(""Geometric mean not expected"",5.755931,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math3.genetics.FitnessCachingTest.testFitnessCaching",0,"@Test public void testFitnessCaching(){GeneticAlgorithm ga=new GeneticAlgorithm(new OnePointCrossover<Integer>(),CROSSOVER_RATE,new BinaryMutation(),MUTATION_RATE,new TournamentSelection(TOURNAMENT_ARITY));Population initial=randomPopulation();StoppingCondition stopCond=new FixedGenerationCount(NUM_GENERATIONS);ga.evolve(initial,stopCond);int neededCalls=POPULATION_SIZE + (NUM_GENERATIONS - 1)* (int)(POPULATION_SIZE * (1.0 - ELITISM_RATE));Assert.assertTrue(fitnessCalls <= neededCalls);}"
"org.apache.commons.math3.genetics.RandomKeyMutationTest.testMutate",0,"@Test public void testMutate(){MutationPolicy mutation=new RandomKeyMutation();int l=10;for (int i=0;i < 20;i++){DummyRandomKey origRk=new DummyRandomKey(RandomKey.randomPermutation(l));Chromosome mutated=mutation.mutate(origRk);DummyRandomKey mutatedRk=(DummyRandomKey)mutated;int changes=0;for (int j=0;j < origRk.getLength();j++){if (origRk.getRepresentation().get(j)!= mutatedRk.getRepresentation().get(j)){changes++;}}Assert.assertEquals(1,changes);}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutAndGetWith0ExpectedSize",0,"@Test public void testPutAndGetWith0ExpectedSize(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field,0);assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutAndGetWithExpectedSize",0,"@Test public void testPutAndGetWithExpectedSize(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field,500);assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutAndGet",0,"@Test public void testPutAndGet(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field);assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutAbsentOnExisting",0,"@Test public void testPutAbsentOnExisting(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);int size=javaMap.size();for(Map.Entry<Integer,Fraction> mapEntry : generateAbsent().entrySet()){map.put(mapEntry.getKey(),mapEntry.getValue());Assert.assertEquals(++size,map.size());Assert.assertEquals(mapEntry.getValue(),map.get(mapEntry.getKey()));}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutOnExisting",0,"@Test public void testPutOnExisting(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);for(Map.Entry<Integer,Fraction> mapEntry : javaMap.entrySet()){map.put(mapEntry.getKey(),mapEntry.getValue());Assert.assertEquals(javaMap.size(),map.size());Assert.assertEquals(mapEntry.getValue(),map.get(mapEntry.getKey()));}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testGetAbsent",0,"@Test public void testGetAbsent(){Map<Integer,Fraction> generated=generateAbsent();OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);for(Map.Entry<Integer,Fraction> mapEntry : generated.entrySet())Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testGetFromEmpty",0,"@Test public void testGetFromEmpty(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field);Assert.assertTrue(field.getZero().equals(map.get(5)));Assert.assertTrue(field.getZero().equals(map.get(0)));Assert.assertTrue(field.getZero().equals(map.get(50)));}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testRemove",0,"@Test public void testRemove(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);int mapSize=javaMap.size();Assert.assertEquals(mapSize,map.size());for(Map.Entry<Integer,Fraction> mapEntry : javaMap.entrySet()){map.remove(mapEntry.getKey());Assert.assertEquals(--mapSize,map.size());Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));}assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testRemove2",0,"@Test public void testRemove2(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);int mapSize=javaMap.size();int count=0;Set<Integer> keysInMap=new HashSet<Integer>(javaMap.keySet());for(Map.Entry<Integer,Fraction> mapEntry : javaMap.entrySet()){keysInMap.remove(mapEntry.getKey());map.remove(mapEntry.getKey());Assert.assertEquals(--mapSize,map.size());Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));if (count++ > 5)break;}assertPutAndGet(map,mapSize,keysInMap);}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testRemoveFromEmpty",0,"@Test public void testRemoveFromEmpty(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field);Assert.assertTrue(field.getZero().equals(map.remove(50)));}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testRemoveAbsent",0,"@Test public void testRemoveAbsent(){Map<Integer,Fraction> generated=generateAbsent();OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);int mapSize=map.size();for(Map.Entry<Integer,Fraction> mapEntry : generated.entrySet()){map.remove(mapEntry.getKey());Assert.assertEquals(mapSize,map.size());Assert.assertTrue(field.getZero().equals(map.get(mapEntry.getKey())));}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testCopy",0,"@Test public void testCopy(){OpenIntToFieldHashMap<Fraction> copy=new OpenIntToFieldHashMap<Fraction>(createFromJavaMap(field));Assert.assertEquals(javaMap.size(),copy.size());for(Map.Entry<Integer,Fraction> mapEntry : javaMap.entrySet())Assert.assertEquals(mapEntry.getValue(),copy.get(mapEntry.getKey()));}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testContainsKey",0,"@Test public void testContainsKey(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);for(Entry<Integer,Fraction> mapEntry : javaMap.entrySet()){Assert.assertTrue(map.containsKey(mapEntry.getKey()));}for(Map.Entry<Integer,Fraction> mapEntry : generateAbsent().entrySet()){Assert.assertFalse(map.containsKey(mapEntry.getKey()));}for(Entry<Integer,Fraction> mapEntry : javaMap.entrySet()){int key=mapEntry.getKey();Assert.assertTrue(map.containsKey(key));map.remove(key);Assert.assertFalse(map.containsKey(key));}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testIterator",0,"@Test public void testIterator(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);OpenIntToFieldHashMap<Fraction>.Iterator iterator=map.iterator();for (int i=0;i < map.size();++i){Assert.assertTrue(iterator.hasNext());iterator.advance();int key=iterator.key();Assert.assertTrue(map.containsKey(key));Assert.assertEquals(javaMap.get(key),map.get(key));Assert.assertEquals(javaMap.get(key),iterator.value());Assert.assertTrue(javaMap.containsKey(key));}Assert.assertFalse(iterator.hasNext());try {iterator.advance();Assert.fail(""an exception should have been thrown"");}catch(NoSuchElementException nsee){}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testConcurrentModification",0,"@Test public void testConcurrentModification(){OpenIntToFieldHashMap<Fraction> map=createFromJavaMap(field);OpenIntToFieldHashMap<Fraction>.Iterator iterator=map.iterator();map.put(3,new Fraction(3));try {iterator.advance();Assert.fail(""an exception should have been thrown"");}catch(ConcurrentModificationException cme){}}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutKeysWithCollisions",0,"/** * Regression test for a bug in findInsertionIndex where the hashing in the second probing loop was inconsistent with the first causing duplicate keys after the right sequence of puts and removes.*/@Test public void testPutKeysWithCollisions(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field);int key1=-1996012590;Fraction value1=new Fraction(1);map.put(key1,value1);int key2=835099822;map.put(key2,value1);int key3=1008859686;map.put(key3,value1);Assert.assertEquals(value1,map.get(key3));Assert.assertEquals(3,map.size());map.remove(key2);Fraction value2=new Fraction(2);map.put(key3,value2);Assert.assertEquals(value2,map.get(key3));Assert.assertEquals(2,map.size());}"
"org.apache.commons.math3.util.OpenIntToFieldTest.testPutKeysWithCollision2",0,"/** * Similar to testPutKeysWithCollisions()but exercises the codepaths in a slightly different manner.*/@Test public void testPutKeysWithCollision2(){OpenIntToFieldHashMap<Fraction> map=new OpenIntToFieldHashMap<Fraction>(field);int key1=837989881;Fraction value1=new Fraction(1);map.put(key1,value1);int key2=476463321;map.put(key2,value1);Assert.assertEquals(2,map.size());Assert.assertEquals(value1,map.get(key2));map.remove(key1);Fraction value2=new Fraction(2);map.put(key2,value2);Assert.assertEquals(1,map.size());Assert.assertEquals(value2,map.get(key2));}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();AdaptiveStepsizeIntegrator integrator=new GraggBulirschStoerIntegrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testNullIntervalCheck",0,"@Test(expected=NumberIsTooSmallException.class)public void testNullIntervalCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();GraggBulirschStoerIntegrator integrator=new GraggBulirschStoerIntegrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()],0.0,new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testMinStep",0,"@Test(expected=NumberIsTooSmallException.class)public void testMinStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double minStep=0.1 * FastMath.abs(pb.getFinalTime()- pb.getInitialTime());double maxStep=FastMath.abs(pb.getFinalTime()- pb.getInitialTime());double[]vecAbsoluteTolerance={1.0e-20,1.0e-21};double[]vecRelativeTolerance={1.0e-20,1.0e-21};FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 7.5e-9);Assert.assertTrue(handler.getMaximalValueError()< 8.1e-9);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Gragg-Bulirsch-Stoer"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIncreasingTolerance",0,"@Test public void testIncreasingTolerance()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -4;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=FastMath.pow(10.0,i);double relTolerance=absTolerance;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);double ratio=handler.getMaximalValueError()/ absTolerance;Assert.assertTrue(ratio < 2.4);Assert.assertTrue(ratio > 0.02);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();Assert.assertEquals(integ.getEvaluations(),calls);Assert.assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIntegratorControls",0,"@Test public void testIntegratorControls()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.999);GraggBulirschStoerIntegrator integ=new GraggBulirschStoerIntegrator(0,pb.getFinalTime()- pb.getInitialTime(),1.0e-8,1.0e-10);double errorWithDefaultSettings=getMaxError(integ,pb);integ.setStabilityCheck(true,2,1,0.99);Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ,pb));integ.setStabilityCheck(true,-1,-1,-1);integ.setControlFactors(0.5,0.99,0.1,2.5);Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ,pb));integ.setControlFactors(-1,-1,-1,-1);integ.setOrderControl(10,0.7,0.95);Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ,pb));integ.setOrderControl(-1,-1,-1);integ.setInterpolationControl(true,3);Assert.assertTrue(errorWithDefaultSettings < getMaxError(integ,pb));integ.setInterpolationControl(true,-1);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testEvents",0,"@Test public void testEvents()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-10;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();double convergence=1.0e-8 * maxStep;for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,convergence,1000);}Assert.assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()< 4.0e-7);Assert.assertEquals(0,handler.getMaximalTimeError(),convergence);Assert.assertEquals(12.0,handler.getLastTime(),convergence);integ.clearEventHandlers();Assert.assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-6;double relTolerance=1.0e-6;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);integ.addStepHandler(new KeplerStepHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(integ.getEvaluations(),pb.getCalls());Assert.assertTrue(pb.getCalls()< 2150);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testVariableSteps",0,"@Test public void testVariableSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double absTolerance=1.0e-8;double relTolerance=1.0e-8;FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(minStep,maxStep,absTolerance,relTolerance);integ.addStepHandler(new VariableStepHandler());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);Assert.assertEquals(""Gragg-Bulirsch-Stoer"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testTooLargeFirstStep",0,"@Test public void testTooLargeFirstStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {AdaptiveStepsizeIntegrator integ=new GraggBulirschStoerIntegrator(0,Double.POSITIVE_INFINITY,Double.NaN,Double.NaN);final double start=0.0;final double end=0.001;FirstOrderDifferentialEquations equations=new FirstOrderDifferentialEquations(){public int getDimension(){return 1;}public void computeDerivatives(double t,double[]y,double[]yDot){Assert.assertTrue(t >= FastMath.nextAfter(start,Double.NEGATIVE_INFINITY));Assert.assertTrue(t <= FastMath.nextAfter(end,Double.POSITIVE_INFINITY));yDot[0]=-100.0 * y[0];}};integ.setStepSizeControl(0,1.0,1.0e-6,1.0e-8);integ.integrate(equations,start,new double[]{1.0},end,new double[1]);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testUnstableDerivative",0,"@Test public void testUnstableDerivative()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final StepProblem stepProblem=new StepProblem(0.0,1.0,2.0);FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(0.1,10,1.0e-12,0.0);integ.addEventHandler(stepProblem,1.0,1.0e-12,1000);double[]y={Double.NaN};integ.integrate(stepProblem,0.0,new double[]{0.0},10.0,y);Assert.assertEquals(8.0,y[0],1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegratorTest.testIssue596",0,"@Test public void testIssue596()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {FirstOrderIntegrator integ=new GraggBulirschStoerIntegrator(1e-10,100.0,1e-7,1e-7);integ.addStepHandler(new StepHandler(){public void init(double t0,double[]y0,double t){}public void handleStep(StepInterpolator interpolator,boolean isLast)throws MaxCountExceededException {double t=interpolator.getCurrentTime();interpolator.setInterpolatedTime(t);double[]y=interpolator.getInterpolatedState();double[]yDot=interpolator.getInterpolatedDerivatives();Assert.assertEquals(3.0 * t - 5.0,y[0],1.0e-14);Assert.assertEquals(3.0,yDot[0],1.0e-14);}});double[]y={4.0};double t0=3.0;double tend=10.0;integ.integrate(new FirstOrderDifferentialEquations(){public int getDimension(){return 1;}public void computeDerivatives(double t,double[]y,double[]yDot){yDot[0]=3.0;}},t0,y,tend,y);}"
"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest.testWilcoxonSignedRankSimple",0,"@Test public void testWilcoxonSignedRankSimple(){final double x[]={1.83,0.50,1.62,2.48,1.68,1.88,1.55,3.06,1.30};final double y[]={0.878,0.647,0.598,2.05,1.06,1.29,1.06,3.14,1.29};Assert.assertEquals(40,testStatistic.wilcoxonSignedRank(x,y),1e-10);Assert.assertEquals(0.03906,testStatistic.wilcoxonSignedRankTest(x,y,true),1e-5);Assert.assertEquals(40,testStatistic.wilcoxonSignedRank(x,y),1e-10);Assert.assertEquals(0.0329693812,testStatistic.wilcoxonSignedRankTest(x,y,false),1e-10);}"
"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTestTest.testWilcoxonSignedRankInputValidation",0,"@Test public void testWilcoxonSignedRankInputValidation(){final double[]x1=new double[30];final double[]x2=new double[31];final double[]y1=new double[30];final double[]y2=new double[31];for (int i=0;i < 30;++i){x1[i]=x2[i]=y1[i]=y2[i]=i;}try {testStatistic.wilcoxonSignedRankTest(x2,y2,true);Assert.fail(""More than 30 samples and exact chosen,NumberIsTooLargeException expected"");}catch(NumberIsTooLargeException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{},new double[]{1.0},true);Assert.fail(""x does not contain samples (exact),NoDataException expected"");}catch(NoDataException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{},new double[]{1.0},false);Assert.fail(""x does not contain samples (asymptotic),NoDataException expected"");}catch(NoDataException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{1.0},new double[]{},true);Assert.fail(""y does not contain samples (exact),NoDataException expected"");}catch(NoDataException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{1.0},new double[]{},false);Assert.fail(""y does not contain samples (asymptotic),NoDataException expected"");}catch(NoDataException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{1.0,2.0},new double[]{3.0},true);Assert.fail(""x and y not same size (exact),DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{1.0,2.0},new double[]{3.0},false);Assert.fail(""x and y not same size (asymptotic),DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}try {testStatistic.wilcoxonSignedRankTest(null,null,true);Assert.fail(""x and y is null (exact),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.wilcoxonSignedRankTest(null,null,false);Assert.fail(""x and y is null (asymptotic),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.wilcoxonSignedRankTest(null,new double[]{1.0},true);Assert.fail(""x is null (exact),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.wilcoxonSignedRankTest(null,new double[]{1.0},false);Assert.fail(""x is null (asymptotic),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{1.0},null,true);Assert.fail(""y is null (exact),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.wilcoxonSignedRankTest(new double[]{1.0},null,false);Assert.fail(""y is null (asymptotic),NullArgumentException expected"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.genetics.BinaryMutationTest.testMutate",0,"@Test public void testMutate(){BinaryMutation mutation=new BinaryMutation();for (int i=0;i < 20;i++){DummyBinaryChromosome original=new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10));DummyBinaryChromosome mutated=(DummyBinaryChromosome)mutation.mutate(original);int numDifferent=0;for (int j=0;j < original.getRepresentation().size();j++){if (original.getRepresentation().get(j)!= mutated.getRepresentation().get(j))numDifferent++;}Assert.assertEquals(1,numDifferent);}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testFirstChebyshevPolynomials",0,"@Test public void testFirstChebyshevPolynomials(){checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(3),""-3 x + 4 x^3"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(2),""-1 + 2 x^2"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(1),""x"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(0),""1"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(7),""-7 x + 56 x^3 - 112 x^5 + 64 x^7"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(6),""-1 + 18 x^2 - 48 x^4 + 32 x^6"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(5),""5 x - 20 x^3 + 16 x^5"");checkPolynomial(PolynomialsUtils.createChebyshevPolynomial(4),""1 - 8 x^2 + 8 x^4"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testChebyshevBounds",0,"@Test public void testChebyshevBounds(){for (int k=0;k < 12;++k){PolynomialFunction Tk=PolynomialsUtils.createChebyshevPolynomial(k);for (double x=-1;x <= 1;x+=0.02){Assert.assertTrue(k + "" "" + Tk.value(x),FastMath.abs(Tk.value(x))< (1 + 1e-12));}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testChebyshevDifferentials",0,"@Test public void testChebyshevDifferentials(){for (int k=0;k < 12;++k){PolynomialFunction Tk0=PolynomialsUtils.createChebyshevPolynomial(k);PolynomialFunction Tk1=Tk0.polynomialDerivative();PolynomialFunction Tk2=Tk1.polynomialDerivative();PolynomialFunction g0=new PolynomialFunction(new double[]{k * k});PolynomialFunction g1=new PolynomialFunction(new double[]{0,-1});PolynomialFunction g2=new PolynomialFunction(new double[]{1,0,-1});PolynomialFunction Tk0g0=Tk0.multiply(g0);PolynomialFunction Tk1g1=Tk1.multiply(g1);PolynomialFunction Tk2g2=Tk2.multiply(g2);checkNullPolynomial(Tk0g0.add(Tk1g1.add(Tk2g2)));}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testChebyshevOrthogonality",0,"@Test public void testChebyshevOrthogonality(){UnivariateFunction weight=new UnivariateFunction(){public double value(double x){return 1 / FastMath.sqrt(1 - x * x);}};for (int i=0;i < 10;++i){PolynomialFunction pi=PolynomialsUtils.createChebyshevPolynomial(i);for (int j=0;j <= i;++j){PolynomialFunction pj=PolynomialsUtils.createChebyshevPolynomial(j);checkOrthogonality(pi,pj,weight,-0.9999,0.9999,1.5,0.03);}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testFirstHermitePolynomials",0,"@Test public void testFirstHermitePolynomials(){checkPolynomial(PolynomialsUtils.createHermitePolynomial(3),""-12 x + 8 x^3"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(2),""-2 + 4 x^2"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(1),""2 x"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(0),""1"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(7),""-1680 x + 3360 x^3 - 1344 x^5 + 128 x^7"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(6),""-120 + 720 x^2 - 480 x^4 + 64 x^6"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(5),""120 x - 160 x^3 + 32 x^5"");checkPolynomial(PolynomialsUtils.createHermitePolynomial(4),""12 - 48 x^2 + 16 x^4"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testHermiteDifferentials",0,"@Test public void testHermiteDifferentials(){for (int k=0;k < 12;++k){PolynomialFunction Hk0=PolynomialsUtils.createHermitePolynomial(k);PolynomialFunction Hk1=Hk0.polynomialDerivative();PolynomialFunction Hk2=Hk1.polynomialDerivative();PolynomialFunction g0=new PolynomialFunction(new double[]{2 * k});PolynomialFunction g1=new PolynomialFunction(new double[]{0,-2});PolynomialFunction g2=new PolynomialFunction(new double[]{1});PolynomialFunction Hk0g0=Hk0.multiply(g0);PolynomialFunction Hk1g1=Hk1.multiply(g1);PolynomialFunction Hk2g2=Hk2.multiply(g2);checkNullPolynomial(Hk0g0.add(Hk1g1.add(Hk2g2)));}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testHermiteOrthogonality",0,"@Test public void testHermiteOrthogonality(){UnivariateFunction weight=new UnivariateFunction(){public double value(double x){return FastMath.exp(-x * x);}};for (int i=0;i < 10;++i){PolynomialFunction pi=PolynomialsUtils.createHermitePolynomial(i);for (int j=0;j <= i;++j){PolynomialFunction pj=PolynomialsUtils.createHermitePolynomial(j);checkOrthogonality(pi,pj,weight,-50,50,1.5,1.0e-8);}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testFirstLaguerrePolynomials",0,"@Test public void testFirstLaguerrePolynomials(){checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(3),6l,""6 - 18 x + 9 x^2 - x^3"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(2),2l,""2 - 4 x + x^2"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(1),1l,""1 - x"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(0),1l,""1"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(7),5040l,""5040 - 35280 x + 52920 x^2 - 29400 x^3"" + "" + 7350 x^4 - 882 x^5 + 49 x^6 - x^7"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(6),720l,""720 - 4320 x + 5400 x^2 - 2400 x^3 + 450 x^4"" + "" - 36 x^5 + x^6"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(5),120l,""120 - 600 x + 600 x^2 - 200 x^3 + 25 x^4 - x^5"");checkPolynomial(PolynomialsUtils.createLaguerrePolynomial(4),24l,""24 - 96 x + 72 x^2 - 16 x^3 + x^4"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testLaguerreDifferentials",0,"@Test public void testLaguerreDifferentials(){for (int k=0;k < 12;++k){PolynomialFunction Lk0=PolynomialsUtils.createLaguerrePolynomial(k);PolynomialFunction Lk1=Lk0.polynomialDerivative();PolynomialFunction Lk2=Lk1.polynomialDerivative();PolynomialFunction g0=new PolynomialFunction(new double[]{k});PolynomialFunction g1=new PolynomialFunction(new double[]{1,-1});PolynomialFunction g2=new PolynomialFunction(new double[]{0,1});PolynomialFunction Lk0g0=Lk0.multiply(g0);PolynomialFunction Lk1g1=Lk1.multiply(g1);PolynomialFunction Lk2g2=Lk2.multiply(g2);checkNullPolynomial(Lk0g0.add(Lk1g1.add(Lk2g2)));}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testLaguerreOrthogonality",0,"@Test public void testLaguerreOrthogonality(){UnivariateFunction weight=new UnivariateFunction(){public double value(double x){return FastMath.exp(-x);}};for (int i=0;i < 10;++i){PolynomialFunction pi=PolynomialsUtils.createLaguerrePolynomial(i);for (int j=0;j <= i;++j){PolynomialFunction pj=PolynomialsUtils.createLaguerrePolynomial(j);checkOrthogonality(pi,pj,weight,0.0,100.0,0.99999,1.0e-13);}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testFirstLegendrePolynomials",0,"@Test public void testFirstLegendrePolynomials(){checkPolynomial(PolynomialsUtils.createLegendrePolynomial(3),2l,""-3 x + 5 x^3"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(2),2l,""-1 + 3 x^2"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(1),1l,""x"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(0),1l,""1"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(7),16l,""-35 x + 315 x^3 - 693 x^5 + 429 x^7"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(6),16l,""-5 + 105 x^2 - 315 x^4 + 231 x^6"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(5),8l,""15 x - 70 x^3 + 63 x^5"");checkPolynomial(PolynomialsUtils.createLegendrePolynomial(4),8l,""3 - 30 x^2 + 35 x^4"");}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testLegendreDifferentials",0,"@Test public void testLegendreDifferentials(){for (int k=0;k < 12;++k){PolynomialFunction Pk0=PolynomialsUtils.createLegendrePolynomial(k);PolynomialFunction Pk1=Pk0.polynomialDerivative();PolynomialFunction Pk2=Pk1.polynomialDerivative();PolynomialFunction g0=new PolynomialFunction(new double[]{k * (k + 1)});PolynomialFunction g1=new PolynomialFunction(new double[]{0,-2});PolynomialFunction g2=new PolynomialFunction(new double[]{1,0,-1});PolynomialFunction Pk0g0=Pk0.multiply(g0);PolynomialFunction Pk1g1=Pk1.multiply(g1);PolynomialFunction Pk2g2=Pk2.multiply(g2);checkNullPolynomial(Pk0g0.add(Pk1g1.add(Pk2g2)));}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testLegendreOrthogonality",0,"@Test public void testLegendreOrthogonality(){UnivariateFunction weight=new UnivariateFunction(){public double value(double x){return 1;}};for (int i=0;i < 10;++i){PolynomialFunction pi=PolynomialsUtils.createLegendrePolynomial(i);for (int j=0;j <= i;++j){PolynomialFunction pj=PolynomialsUtils.createLegendrePolynomial(j);checkOrthogonality(pi,pj,weight,-1,1,0.1,1.0e-13);}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testHighDegreeLegendre",0,"@Test public void testHighDegreeLegendre(){PolynomialsUtils.createLegendrePolynomial(40);double[]l40=PolynomialsUtils.createLegendrePolynomial(40).getCoefficients();double denominator=274877906944d;double[]numerators=new double[]{+34461632205d,-28258538408100d,+3847870979902950d,-207785032914759300d,+5929294332103310025d,-103301483474866556880d,+1197358103913226000200d,-9763073770369381232400d,+58171647881784229843050d,-260061484647976556945400d,+888315281771246239250340d,-2345767627188139419665400d,+4819022625419112503443050d,-7710436200670580005508880d,+9566652323054238154983240d,-9104813935044723209570256d,+6516550296251767619752905d,-3391858621221953912598660d,+1211378079007840683070950d,-265365894974690562152100d,+26876802183334044115405d};for (int i=0;i < l40.length;++i){if (i % 2 == 0){double ci=numerators[i / 2]/ denominator;Assert.assertEquals(ci,l40[i],FastMath.abs(ci)* 1e-15);}else {Assert.assertEquals(0,l40[i],0);}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testJacobiLegendre",0,"@Test public void testJacobiLegendre(){for (int i=0;i < 10;++i){PolynomialFunction legendre=PolynomialsUtils.createLegendrePolynomial(i);PolynomialFunction jacobi=PolynomialsUtils.createJacobiPolynomial(i,0,0);checkNullPolynomial(legendre.subtract(jacobi));}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testJacobiEvaluationAt1",0,"@Test public void testJacobiEvaluationAt1(){for (int v=0;v < 10;++v){for (int w=0;w < 10;++w){for (int i=0;i < 10;++i){PolynomialFunction jacobi=PolynomialsUtils.createJacobiPolynomial(i,v,w);double binomial=ArithmeticUtils.binomialCoefficient(v + i,i);Assert.assertTrue(Precision.equals(binomial,jacobi.value(1.0),1));}}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testJacobiOrthogonality",0,"@Test public void testJacobiOrthogonality(){for (int v=0;v < 5;++v){for (int w=v;w < 5;++w){final int vv=v;final int ww=w;UnivariateFunction weight=new UnivariateFunction(){public double value(double x){return FastMath.pow(1 - x,vv)* FastMath.pow(1 + x,ww);}};for (int i=0;i < 10;++i){PolynomialFunction pi=PolynomialsUtils.createJacobiPolynomial(i,v,w);for (int j=0;j <= i;++j){PolynomialFunction pj=PolynomialsUtils.createJacobiPolynomial(j,v,w);checkOrthogonality(pi,pj,weight,-1,1,0.1,1.0e-12);}}}}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialsUtilsTest.testShift",0,"@Test public void testShift(){PolynomialFunction f1x=new PolynomialFunction(new double[]{1,1,2});PolynomialFunction f1x1=new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(),1));checkPolynomial(f1x1,""4 + 5 x + 2 x^2"");PolynomialFunction f1xM1=new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(),-1));checkPolynomial(f1xM1,""2 - 3 x + 2 x^2"");PolynomialFunction f1x3=new PolynomialFunction(PolynomialsUtils.shift(f1x.getCoefficients(),3));checkPolynomial(f1x3,""22 + 13 x + 2 x^2"");PolynomialFunction f2x=new PolynomialFunction(new double[]{2,0,3,8,0,121});PolynomialFunction f2x1=new PolynomialFunction(PolynomialsUtils.shift(f2x.getCoefficients(),1));checkPolynomial(f2x1,""134 + 635 x + 1237 x^2 + 1218 x^3 + 605 x^4 + 121 x^5"");PolynomialFunction f2x3=new PolynomialFunction(PolynomialsUtils.shift(f2x.getCoefficients(),3));checkPolynomial(f2x3,""29648 + 49239 x + 32745 x^2 + 10898 x^3 + 1815 x^4 + 121 x^5"");}"
"org.apache.commons.math3.optimization.PointVectorValuePairTest.testSerial",0,"@Test public void testSerial(){PointVectorValuePair pv1=new PointVectorValuePair(new double[]{1.0,2.0,3.0},new double[]{4.0,5.0});PointVectorValuePair pv2=(PointVectorValuePair)TestUtils.serializeAndRecover(pv1);Assert.assertEquals(pv1.getKey().length,pv2.getKey().length);for (int i=0;i < pv1.getKey().length;++i){Assert.assertEquals(pv1.getKey()[i],pv2.getKey()[i],1.0e-15);}Assert.assertEquals(pv1.getValue().length,pv2.getValue().length);for (int i=0;i < pv1.getValue().length;++i){Assert.assertEquals(pv1.getValue()[i],pv2.getValue()[i],1.0e-15);}}"
"org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest.testSinFunction",0,"@Test public void testSinFunction(){UnivariateFunction f=new Sin();BaseAbstractUnivariateIntegrator integrator=new LegendreGaussIntegrator(5,1.0e-14,1.0e-10,2,15);double min,max,expected,result,tolerance;min=0;max=FastMath.PI;expected=2;tolerance=FastMath.max(integrator.getAbsoluteAccuracy(),FastMath.abs(expected * integrator.getRelativeAccuracy()));result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-FastMath.PI / 3;max=0;expected=-0.5;tolerance=FastMath.max(integrator.getAbsoluteAccuracy(),FastMath.abs(expected * integrator.getRelativeAccuracy()));result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest.testQuinticFunction",0,"@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new LegendreGaussIntegrator(3,BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,64);double min,max,expected,result;min=0;max=1;expected=-1.0 / 48;result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,1.0e-16);min=0;max=0.5;expected=11.0 / 768;result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,1.0e-16);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,1.0e-16);}"
"org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest.testExactIntegration",0,"@Test public void testExactIntegration(){Random random=new Random(86343623467878363l);for (int n=2;n < 6;++n){LegendreGaussIntegrator integrator=new LegendreGaussIntegrator(n,BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,64);for (int degree=0;degree <= 2 * n - 1;++degree){for (int i=0;i < 10;++i){double[]coeff=new double[degree + 1];for (int k=0;k < coeff.length;++k){coeff[k]=2 * random.nextDouble()- 1;}PolynomialFunction p=new PolynomialFunction(coeff);double result=integrator.integrate(10000,p,-5.0,15.0);double reference=exactIntegration(p,-5.0,15.0);Assert.assertEquals(n + "" "" + degree+ "" ""+ i,reference,result,1.0e-12 * (1.0 + FastMath.abs(reference)));}}}}"
"org.apache.commons.math3.analysis.integration.LegendreGaussIntegratorTest.testIssue464",0,"@Test public void testIssue464(){final double value=0.2;UnivariateFunction f=new UnivariateFunction(){public double value(double x){return (x >= 0 && x <= 5)? value : 0.0;}};LegendreGaussIntegrator gauss=new LegendreGaussIntegrator(5,3,100);double maxX=0.32462367623786328;Assert.assertEquals(maxX * value,gauss.integrate(Integer.MAX_VALUE,f,-10,maxX),1.0e-7);Assert.assertTrue(gauss.getEvaluations()> 37000000);Assert.assertTrue(gauss.getIterations()< 30);try {gauss.integrate(1000,f,-10,maxX);Assert.fail(""expected TooManyEvaluationsException"");}catch(TooManyEvaluationsException tmee){Assert.assertEquals(1000,tmee.getMax());}double sum1=gauss.integrate(1000,f,-10,0);int eval1=gauss.getEvaluations();double sum2=gauss.integrate(1000,f,0,maxX);int eval2=gauss.getEvaluations();Assert.assertEquals(maxX * value,sum1 + sum2,1.0e-7);Assert.assertTrue(eval1 + eval2 < 200);}"
"org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest.testStats",0,"/** * test stats */@Test public void testStats(){List<Object> externalList=new ArrayList<Object>();DescriptiveStatistics u=new ListUnivariateImpl(externalList);Assert.assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(two);u.addValue(two);u.addValue(three);Assert.assertEquals(""N"",n,u.getN(),tolerance);Assert.assertEquals(""sum"",sum,u.getSum(),tolerance);Assert.assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);Assert.assertEquals(""var"",var,u.getVariance(),tolerance);Assert.assertEquals(""std"",std,u.getStandardDeviation(),tolerance);Assert.assertEquals(""mean"",mean,u.getMean(),tolerance);Assert.assertEquals(""min"",min,u.getMin(),tolerance);Assert.assertEquals(""max"",max,u.getMax(),tolerance);u.clear();Assert.assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){List<Object> list=new ArrayList<Object>();DescriptiveStatistics u=new ListUnivariateImpl(list);Assert.assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));Assert.assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));Assert.assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));list.add(Double.valueOf(one));Assert.assertTrue(""Mean of n = 1 set should be value of single item n1"",u.getMean()== one);Assert.assertTrue(""StdDev of n = 1 set should be zero,instead it is: "" + u.getStandardDeviation(),u.getStandardDeviation()== 0);Assert.assertTrue(""Variance of n = 1 set should be zero"",u.getVariance()== 0);}"
"org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest.testSkewAndKurtosis",0,"@Test public void testSkewAndKurtosis(){DescriptiveStatistics u=new DescriptiveStatistics();double[]testArray={12.5,12,11.8,14.2,14.9,14.5,21,8.2,10.3,11.3,14.1,9.9,12.2,12,12.1,11,19.8,11,10,8.8,9,12.3};for (int i=0;i < testArray.length;i++){u.addValue(testArray[i]);}Assert.assertEquals(""mean"",12.40455,u.getMean(),0.0001);Assert.assertEquals(""variance"",10.00236,u.getVariance(),0.0001);Assert.assertEquals(""skewness"",1.437424,u.getSkewness(),0.0001);Assert.assertEquals(""kurtosis"",2.37719,u.getKurtosis(),0.0001);}"
"org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest.testProductAndGeometricMean",0,"@Test public void testProductAndGeometricMean(){ListUnivariateImpl u=new ListUnivariateImpl(new ArrayList<Object>());u.setWindowSize(10);u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);Assert.assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);for (int i=0;i < 10;i++){u.addValue(i + 2);}Assert.assertEquals(""Geometric mean not expected"",5.755931,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math3.stat.descriptive.ListUnivariateImplTest.testSerialization",0,"/** * test stats */@Test public void testSerialization(){DescriptiveStatistics u=new ListUnivariateImpl();Assert.assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(two);DescriptiveStatistics u2=(DescriptiveStatistics)TestUtils.serializeAndRecover(u);u2.addValue(two);u2.addValue(three);Assert.assertEquals(""N"",n,u2.getN(),tolerance);Assert.assertEquals(""sum"",sum,u2.getSum(),tolerance);Assert.assertEquals(""sumsq"",sumSq,u2.getSumsq(),tolerance);Assert.assertEquals(""var"",var,u2.getVariance(),tolerance);Assert.assertEquals(""std"",std,u2.getStandardDeviation(),tolerance);Assert.assertEquals(""mean"",mean,u2.getMean(),tolerance);Assert.assertEquals(""min"",min,u2.getMin(),tolerance);Assert.assertEquals(""max"",max,u2.getMax(),tolerance);u2.clear();Assert.assertEquals(""total count"",0,u2.getN(),tolerance);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testInitOutOfBounds",0,"@Test(expected=NumberIsTooLargeException.class)public void testInitOutOfBounds(){double[]startPoint=point(DIM,3);double[][]boundaries=boundaries(DIM,-1,2);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,null);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testBoundariesDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testBoundariesDimensionMismatch(){double[]startPoint=point(DIM,0.5);double[][]boundaries=boundaries(DIM + 1,-1,2);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,null);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testProblemDimensionTooSmall",0,"@Test(expected=NumberIsTooSmallException.class)public void testProblemDimensionTooSmall(){double[]startPoint=point(1,0.5);doTest(new Rosen(),startPoint,null,GoalType.MINIMIZE,1e-13,1e-6,2000,null);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testMaxEvaluations",0,"@Test(expected=TooManyEvaluationsException.class)public void testMaxEvaluations(){final int lowMaxEval=2;double[]startPoint=point(DIM,0.1);double[][]boundaries=null;doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,lowMaxEval,null);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testRosen",0,"@Test public void testRosen(){double[]startPoint=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testMaximize",0,"@Test public void testMaximize(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),1.0);doTest(new MinusElli(),startPoint,boundaries,GoalType.MAXIMIZE,2e-10,5e-6,1000,expected);boundaries=boundaries(DIM,-0.3,0.3);startPoint=point(DIM,0.1);doTest(new MinusElli(),startPoint,boundaries,GoalType.MAXIMIZE,2e-10,5e-6,1000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testEllipse",0,"@Test public void testEllipse(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Elli(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,1000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testElliRotated",0,"@Test public void testElliRotated(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new ElliRotated(),startPoint,boundaries,GoalType.MINIMIZE,1e-12,1e-6,10000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testCigar",0,"@Test public void testCigar(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Cigar(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testTwoAxes",0,"@Test public void testTwoAxes(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new TwoAxes(),startPoint,boundaries,GoalType.MINIMIZE,2 * 1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testCigTab",0,"@Test public void testCigTab(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new CigTab(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,5e-5,100,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testSphere",0,"@Test public void testSphere(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Sphere(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testTablet",0,"@Test public void testTablet(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Tablet(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,100,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testDiffPow",0,"@Test public void testDiffPow(){}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testSsDiffPow",0,"@Test public void testSsDiffPow(){double[]startPoint=point(DIM / 2,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM / 2,0.0),0.0);doTest(new SsDiffPow(),startPoint,boundaries,GoalType.MINIMIZE,1e-2,1.3e-1,50000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testAckley",0,"@Test public void testAckley(){}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testRastrigin",0,"@Test public void testRastrigin(){double[]startPoint=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Rastrigin(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,1000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testConstrainedRosen",0,"@Test public void testConstrainedRosen(){double[]startPoint=point(DIM,0.1);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-13,1e-6,2000,expected);}"
"org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest.testConstrainedRosenWithMoreInterpolationPoints",0,"@Ignore @Test public void testConstrainedRosenWithMoreInterpolationPoints(){final double[]startPoint=point(DIM,0.1);final double[][]boundaries=boundaries(DIM,-1,2);final PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);final int maxAdditionalPoints=47;for (int num=1;num <= maxAdditionalPoints;num++){doTest(new Rosen(),startPoint,boundaries,GoalType.MINIMIZE,1e-12,1e-6,2000,num,expected,""num="" + num);}}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testSomeValues",0,"@Test public void testSomeValues(){final double a=-1.2;final double w=0.34;final double p=5.6;final UnivariateFunction f=new HarmonicOscillator(a,w,p);final double d=0.12345;for (int i=0;i < 10;i++){final double v=i * d;Assert.assertEquals(a * FastMath.cos(w * v + p),f.value(v),0);}}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testDerivative",0,"@Test public void testDerivative(){final double a=-1.2;final double w=0.34;final double p=5.6;final HarmonicOscillator f=new HarmonicOscillator(a,w,p);for (int maxOrder=0;maxOrder < 6;++maxOrder){final double d=0.12345;for (int i=0;i < 10;i++){final double v=i * d;final DerivativeStructure h=f.value(new DerivativeStructure(1,maxOrder,0,v));for (int k=0;k <= maxOrder;++k){final double trigo;switch (k % 4){case 0:          trigo=+FastMath.cos(w * v + p);break;case 1:      trigo=-FastMath.sin(w * v + p);break;case 2:  trigo=-FastMath.cos(w * v + p);break;default:trigo=+FastMath.sin(w * v + p);break;}Assert.assertEquals(a * FastMath.pow(w,k)* trigo,h.getPartialDerivative(k),Precision.EPSILON);}}}}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testParametricUsage1",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage1(){final HarmonicOscillator.Parametric g=new HarmonicOscillator.Parametric();g.value(0,null);}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testParametricUsage2",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage2(){final HarmonicOscillator.Parametric g=new HarmonicOscillator.Parametric();g.value(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testParametricUsage3",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage3(){final HarmonicOscillator.Parametric g=new HarmonicOscillator.Parametric();g.gradient(0,null);}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testParametricUsage4",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage4(){final HarmonicOscillator.Parametric g=new HarmonicOscillator.Parametric();g.gradient(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testParametricValue",0,"@Test public void testParametricValue(){final double amplitude=2;final double omega=3;final double phase=4;final HarmonicOscillator f=new HarmonicOscillator(amplitude,omega,phase);final HarmonicOscillator.Parametric g=new HarmonicOscillator.Parametric();Assert.assertEquals(f.value(-1),g.value(-1,new double[]{amplitude,omega,phase}),0);Assert.assertEquals(f.value(0),g.value(0,new double[]{amplitude,omega,phase}),0);Assert.assertEquals(f.value(2),g.value(2,new double[]{amplitude,omega,phase}),0);}"
"org.apache.commons.math3.analysis.function.HarmonicOscillatorTest.testParametricGradient",0,"@Test public void testParametricGradient(){final double amplitude=2;final double omega=3;final double phase=4;final HarmonicOscillator.Parametric f=new HarmonicOscillator.Parametric();final double x=1;final double[]grad=f.gradient(1,new double[]{amplitude,omega,phase});final double xTimesOmegaPlusPhase=omega * x + phase;final double a=FastMath.cos(xTimesOmegaPlusPhase);Assert.assertEquals(a,grad[0],EPS);final double w=-amplitude * x * FastMath.sin(xTimesOmegaPlusPhase);Assert.assertEquals(w,grad[1],EPS);final double p=-amplitude * FastMath.sin(xTimesOmegaPlusPhase);Assert.assertEquals(p,grad[2],EPS);}"
"org.apache.commons.math3.genetics.UniformCrossoverTest.testRatioTooLow",0,"@Test(expected=OutOfRangeException.class)public void testRatioTooLow(){new UniformCrossover<Integer>(-0.5d);}"
"org.apache.commons.math3.genetics.UniformCrossoverTest.testRatioTooHigh",0,"@Test(expected=OutOfRangeException.class)public void testRatioTooHigh(){new UniformCrossover<Integer>(1.5d);}"
"org.apache.commons.math3.genetics.UniformCrossoverTest.testCrossover",0,"@Test public void testCrossover(){performCrossover(0.5);performCrossover(0.7);performCrossover(0.2);}"
"org.apache.commons.math3.genetics.UniformCrossoverTest.testCrossoverDimensionMismatchException",0,"@Test(expected=DimensionMismatchException.class)public void testCrossoverDimensionMismatchException(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final Integer[]p2=new Integer[]{0,1,1,0,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final BinaryChromosome p2c=new DummyBinaryChromosome(p2);final CrossoverPolicy cp=new UniformCrossover<Integer>(0.5d);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.UniformCrossoverTest.testCrossoverInvalidFixedLengthChromosomeFirst",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeFirst(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final Chromosome p2c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new UniformCrossover<Integer>(0.5d);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.UniformCrossoverTest.testCrossoverInvalidFixedLengthChromosomeSecond",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeSecond(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p2c=new DummyBinaryChromosome(p1);final Chromosome p1c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new UniformCrossover<Integer>(0.5d);cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath828",0,"@Test public void testMath828(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},0.0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{0.0,39.0,23.0,96.0,15.0,48.0,9.0,21.0,48.0,36.0,76.0,19.0,88.0,17.0,16.0,36.0},Relationship.GEQ,15.0));constraints.add(new LinearConstraint(new double[]{0.0,59.0,93.0,12.0,29.0,78.0,73.0,87.0,32.0,70.0,68.0,24.0,11.0,26.0,65.0,25.0},Relationship.GEQ,29.0));constraints.add(new LinearConstraint(new double[]{0.0,74.0,5.0,82.0,6.0,97.0,55.0,44.0,52.0,54.0,5.0,93.0,91.0,8.0,20.0,97.0},Relationship.GEQ,6.0));constraints.add(new LinearConstraint(new double[]{8.0,-3.0,-28.0,-72.0,-8.0,-31.0,-31.0,-74.0,-47.0,-59.0,-24.0,-57.0,-56.0,-16.0,-92.0,-59.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{25.0,-7.0,-99.0,-78.0,-25.0,-14.0,-16.0,-89.0,-39.0,-56.0,-53.0,-9.0,-18.0,-26.0,-11.0,-61.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{33.0,-95.0,-15.0,-4.0,-33.0,-3.0,-20.0,-96.0,-27.0,-13.0,-80.0,-24.0,-3.0,-13.0,-57.0,-76.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{7.0,-95.0,-39.0,-93.0,-7.0,-94.0,-94.0,-62.0,-76.0,-26.0,-53.0,-57.0,-31.0,-76.0,-53.0,-52.0},Relationship.GEQ,0.0));double epsilon=1e-6;PointValuePair solution=new SimplexSolver().optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(1.0d,solution.getValue(),epsilon);Assert.assertTrue(validSolution(solution,constraints,epsilon));}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath828Cycle",0,"@Test public void testMath828Cycle(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},0.0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{0.0,16.0,14.0,69.0,1.0,85.0,52.0,43.0,64.0,97.0,14.0,74.0,89.0,28.0,94.0,58.0,13.0,22.0,21.0,17.0,30.0,25.0,1.0,59.0,91.0,78.0,12.0,74.0,56.0,3.0,88.0},Relationship.GEQ,91.0));constraints.add(new LinearConstraint(new double[]{0.0,60.0,40.0,81.0,71.0,72.0,46.0,45.0,38.0,48.0,40.0,17.0,33.0,85.0,64.0,32.0,84.0,3.0,54.0,44.0,71.0,67.0,90.0,95.0,54.0,99.0,99.0,29.0,52.0,98.0,9.0},Relationship.GEQ,54.0));constraints.add(new LinearConstraint(new double[]{0.0,41.0,12.0,86.0,90.0,61.0,31.0,41.0,23.0,89.0,17.0,74.0,44.0,27.0,16.0,47.0,80.0,32.0,11.0,56.0,68.0,82.0,11.0,62.0,62.0,53.0,39.0,16.0,48.0,1.0,63.0},Relationship.GEQ,62.0));constraints.add(new LinearConstraint(new double[]{83.0,-76.0,-94.0,-19.0,-15.0,-70.0,-72.0,-57.0,-63.0,-65.0,-22.0,-94.0,-22.0,-88.0,-86.0,-89.0,-72.0,-16.0,-80.0,-49.0,-70.0,-93.0,-95.0,-17.0,-83.0,-97.0,-31.0,-47.0,-31.0,-13.0,-23.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{41.0,-96.0,-41.0,-48.0,-70.0,-43.0,-43.0,-43.0,-97.0,-37.0,-85.0,-70.0,-45.0,-67.0,-87.0,-69.0,-94.0,-54.0,-54.0,-92.0,-79.0,-10.0,-35.0,-20.0,-41.0,-41.0,-65.0,-25.0,-12.0,-8.0,-46.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{27.0,-42.0,-65.0,-49.0,-53.0,-42.0,-17.0,-2.0,-61.0,-31.0,-76.0,-47.0,-8.0,-93.0,-86.0,-62.0,-65.0,-63.0,-22.0,-43.0,-27.0,-23.0,-32.0,-74.0,-27.0,-63.0,-47.0,-78.0,-29.0,-95.0,-73.0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{15.0,-46.0,-41.0,-83.0,-98.0,-99.0,-21.0,-35.0,-7.0,-14.0,-80.0,-63.0,-18.0,-42.0,-5.0,-34.0,-56.0,-70.0,-16.0,-18.0,-74.0,-61.0,-47.0,-41.0,-15.0,-79.0,-18.0,-47.0,-88.0,-68.0,-55.0},Relationship.GEQ,0.0));double epsilon=1e-6;PointValuePair solution=new SimplexSolver().optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(1.0d,solution.getValue(),epsilon);Assert.assertTrue(validSolution(solution,constraints,epsilon));}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath781",0,"@Test public void testMath781(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{2,6,7},0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,2,1},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{-1,1,1},Relationship.LEQ,-1));constraints.add(new LinearConstraint(new double[]{2,-3,1},Relationship.LEQ,-1));double epsilon=1e-6;SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));Assert.assertTrue(Precision.compareTo(solution.getPoint()[0],0.0d,epsilon)> 0);Assert.assertTrue(Precision.compareTo(solution.getPoint()[1],0.0d,epsilon)> 0);Assert.assertTrue(Precision.compareTo(solution.getPoint()[2],0.0d,epsilon)< 0);Assert.assertEquals(2.0d,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath713NegativeVariable",0,"@Test public void testMath713NegativeVariable(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,1.0},0.0d);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.EQ,1));double epsilon=1e-6;SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertTrue(Precision.compareTo(solution.getPoint()[0],0.0d,epsilon)>= 0);Assert.assertTrue(Precision.compareTo(solution.getPoint()[1],0.0d,epsilon)>= 0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath434NegativeVariable",0,"@Test public void testMath434NegativeVariable(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.0,0.0,1.0},0.0d);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1,0},Relationship.EQ,5));constraints.add(new LinearConstraint(new double[]{0,0,1},Relationship.GEQ,-10));double epsilon=1e-6;SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(false));Assert.assertEquals(5.0,solution.getPoint()[0]+ solution.getPoint()[1],epsilon);Assert.assertEquals(-10.0,solution.getPoint()[2],epsilon);Assert.assertEquals(-10.0,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath434UnfeasibleSolution",0,"@Test(expected=NoFeasibleSolutionException.class)public void testMath434UnfeasibleSolution(){double epsilon=1e-6;LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0,0.0},0.0);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{epsilon / 2,0.5},Relationship.EQ,0));constraints.add(new LinearConstraint(new double[]{1e-3,0.1},Relationship.EQ,10));SimplexSolver solver=new SimplexSolver();solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath434PivotRowSelection",0,"@Test public void testMath434PivotRowSelection(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1.0},0.0);double epsilon=1e-6;ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{200},Relationship.GEQ,1));constraints.add(new LinearConstraint(new double[]{100},Relationship.GEQ,0.499900001));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(false));Assert.assertTrue(Precision.compareTo(solution.getPoint()[0]* 200.d,1.d,epsilon)>= 0);Assert.assertEquals(0.0050,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath434PivotRowSelection2",0,"@Test public void testMath434PivotRowSelection2(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.0d,1.0d,1.0d,0.0d,0.0d,0.0d,0.0d},0.0d);ArrayList<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1.0d,-0.1d,0.0d,0.0d,0.0d,0.0d,0.0d},Relationship.EQ,-0.1d));constraints.add(new LinearConstraint(new double[]{1.0d,0.0d,0.0d,0.0d,0.0d,0.0d,0.0d},Relationship.GEQ,-1e-18d));constraints.add(new LinearConstraint(new double[]{0.0d,1.0d,0.0d,0.0d,0.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,0.0d,1.0d,0.0d,-0.0128588d,1e-5d},Relationship.EQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,0.0d,0.0d,1.0d,1e-5d,-0.0128586d},Relationship.EQ,1e-10d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,-1.0d,0.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,1.0d,0.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,0.0d,-1.0d,0.0d,0.0d},Relationship.GEQ,0.0d));constraints.add(new LinearConstraint(new double[]{0.0d,0.0d,1.0d,0.0d,1.0d,0.0d,0.0d},Relationship.GEQ,0.0d));double epsilon=1e-7;SimplexSolver simplex=new SimplexSolver();PointValuePair solution=simplex.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(false));Assert.assertTrue(Precision.compareTo(solution.getPoint()[0],-1e-18d,epsilon)>= 0);Assert.assertEquals(1.0d,solution.getPoint()[1],epsilon);Assert.assertEquals(0.0d,solution.getPoint()[2],epsilon);Assert.assertEquals(1.0d,solution.getValue(),epsilon);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath272",0,"@Test public void testMath272(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{2,2,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1,0},Relationship.GEQ,1));constraints.add(new LinearConstraint(new double[]{1,0,1},Relationship.GEQ,1));constraints.add(new LinearConstraint(new double[]{0,1,0},Relationship.GEQ,1));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(0.0,solution.getPoint()[0],.0000001);Assert.assertEquals(1.0,solution.getPoint()[1],.0000001);Assert.assertEquals(1.0,solution.getPoint()[2],.0000001);Assert.assertEquals(3.0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath286",0,"@Test public void testMath286(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.8,0.2,0.7,0.3,0.6,0.4},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0,1,0,1,0},Relationship.EQ,23.0));constraints.add(new LinearConstraint(new double[]{0,1,0,1,0,1},Relationship.EQ,23.0));constraints.add(new LinearConstraint(new double[]{1,0,0,0,0,0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0,0,1,0,0,0},Relationship.GEQ,8.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,1,0},Relationship.GEQ,5.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(25.8,solution.getValue(),.0000001);Assert.assertEquals(23.0,solution.getPoint()[0]+ solution.getPoint()[2]+ solution.getPoint()[4],0.0000001);Assert.assertEquals(23.0,solution.getPoint()[1]+ solution.getPoint()[3]+ solution.getPoint()[5],0.0000001);Assert.assertTrue(solution.getPoint()[0]>= 10.0 - 0.0000001);Assert.assertTrue(solution.getPoint()[2]>= 8.0 - 0.0000001);Assert.assertTrue(solution.getPoint()[4]>= 5.0 - 0.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testDegeneracy",0,"@Test public void testDegeneracy(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.8,0.7},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1},Relationship.LEQ,18.0));constraints.add(new LinearConstraint(new double[]{1,0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.GEQ,8.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(13.6,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath288",0,"@Test public void testMath288(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{7,3,0,0},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{3,0,-5,0},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{2,0,0,-5},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,3,0,-5},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{1,0,0,0},Relationship.LEQ,1.0));constraints.add(new LinearConstraint(new double[]{0,1,0,0},Relationship.LEQ,1.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(10.0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath290GEQ",0,"@Test public void testMath290GEQ(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1,5},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{2,0},Relationship.GEQ,-1.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(0,solution.getValue(),.0000001);Assert.assertEquals(0,solution.getPoint()[0],.0000001);Assert.assertEquals(0,solution.getPoint()[1],.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath290LEQ",0,"@Test(expected=NoFeasibleSolutionException.class)public void testMath290LEQ(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1,5},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{2,0},Relationship.LEQ,-1.0));SimplexSolver solver=new SimplexSolver();solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath293",0,"@Test public void testMath293(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{0.8,0.2,0.7,0.3,0.4,0.6},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0,1,0,1,0},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0,1,0,1,0,1},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0.8,0.2,0.0,0.0,0.0,0.0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.7,0.3,0.0,0.0},Relationship.GEQ,10.0));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.0,0.0,0.4,0.6},Relationship.GEQ,10.0));SimplexSolver solver=new SimplexSolver();PointValuePair solution1=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(15.7143,solution1.getPoint()[0],.0001);Assert.assertEquals(0.0,solution1.getPoint()[1],.0001);Assert.assertEquals(14.2857,solution1.getPoint()[2],.0001);Assert.assertEquals(0.0,solution1.getPoint()[3],.0001);Assert.assertEquals(0.0,solution1.getPoint()[4],.0001);Assert.assertEquals(30.0,solution1.getPoint()[5],.0001);Assert.assertEquals(40.57143,solution1.getValue(),.0001);double valA=0.8 * solution1.getPoint()[0]+ 0.2 * solution1.getPoint()[1];double valB=0.7 * solution1.getPoint()[2]+ 0.3 * solution1.getPoint()[3];double valC=0.4 * solution1.getPoint()[4]+ 0.6 * solution1.getPoint()[5];f=new LinearObjectiveFunction(new double[]{0.8,0.2,0.7,0.3,0.4,0.6},0);constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0,1,0,1,0},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0,1,0,1,0,1},Relationship.EQ,30.0));constraints.add(new LinearConstraint(new double[]{0.8,0.2,0.0,0.0,0.0,0.0},Relationship.GEQ,valA));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.7,0.3,0.0,0.0},Relationship.GEQ,valB));constraints.add(new LinearConstraint(new double[]{0.0,0.0,0.0,0.0,0.4,0.6},Relationship.GEQ,valC));PointValuePair solution2=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(40.57143,solution2.getValue(),.0001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMath930",0,"@Test public void testMath930(){Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,-1,-1,1,-1,1,1,-1,-1,1,1,-1,1,-1,-1,1,-1,1,1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,1,0,-1,0,-1,0,1,0,-1,0,1,0,1,0,-1,0,-1,0,1,0,1,0,-1,0,1,0,-1,0,-1,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.628803},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.676993},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,1,-1,0,0,-1,1,0,0,-1,1,0,0,1,-1,0,0,-1,1,0,0,1,-1,0,0,1,-1,0,0,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.136677},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.444434},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,1,0,0,0,-1,0,0,0,-1,0,0,0,1,0,0,0,-1,0,0,0,1,0,0,0,1,0,0,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.254028},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.302218},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,1,-1,-1,1,0,0,0,0,-1,1,1,-1,0,0,0,0,-1,1,1,-1,0,0,0,0,1,-1,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.653981},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.690437},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,1,0,-1,0,0,0,0,0,-1,0,1,0,0,0,0,0,-1,0,1,0,0,0,0,0,1,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.423786},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.486717},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,1,-1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.049232},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.304747},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.129826},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.205625},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,1,-1,-1,1,-1,1,1,-1,0,0,0,0,0,0,0,0,-1,1,1,-1,1,-1,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.621944},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.764385},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,1,0,-1,0,-1,0,1,0,0,0,0,0,0,0,0,0,-1,0,1,0,1,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.432572},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.480762},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.055983},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.11378},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.009607},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.057797},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.407308},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.452749},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.269677},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.321806},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.049232},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.06902},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.028754},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,1,-1,1,1,-1,-1,1,1,-1,1,-1,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.484254},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.524607},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,0,-1,0,1,0,-1,0,1,0,1,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.385492},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.430134},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,1,0,0,-1,1,0,0,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.34983},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.375781},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0,0,0,-1,0,0,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-0.254028},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-0.281308},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,1,0,0,0,0,-1,1,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-0.304995},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,-0.345347},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,0,0,0,0,0,-1,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,-0.288899},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,-0.332212},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,0,0,0,0,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-0.14351},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,-0.17057},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,-0.129826},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,-0.157435},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,1,-1,1,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-1},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,0,-1,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-0.141071},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,-0.232574},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0,0,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-1},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,-0.009607},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,-0.057797},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,-1,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,-1},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-0.091644},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,-0.203531},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,-1},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},Relationship.GEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,-0.028754},Relationship.LEQ,0.0));constraints.add(new LinearConstraint(new double[]{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},Relationship.EQ,1.0));double[]objFunctionCoeff=new double[33];objFunctionCoeff[3]=1;LinearObjectiveFunction f=new LinearObjectiveFunction(objFunctionCoeff,0);SimplexSolver solver=new SimplexSolver(1e-4,10,1e-6);PointValuePair solution=solver.optimize(new MaxIter(1000),f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(0.3752298,solution.getValue(),1e-4);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testSimplexSolver",0,"@Test public void testSimplexSolver(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},7);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.LEQ,3));constraints.add(new LinearConstraint(new double[]{1,1},Relationship.EQ,4));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(2.0,solution.getPoint()[0],0.0);Assert.assertEquals(2.0,solution.getPoint()[1],0.0);Assert.assertEquals(57.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testSingleVariableAndConstraint",0,"@Test public void testSingleVariableAndConstraint(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{3},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1},Relationship.LEQ,10));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));Assert.assertEquals(10.0,solution.getPoint()[0],0.0);Assert.assertEquals(30.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testModelWithNoArtificialVars",0,"/** * With no artificial variables needed (no equals and no greater than constraints)we can go straight to Phase 2.*/@Test public void testModelWithNoArtificialVars(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.LEQ,3));constraints.add(new LinearConstraint(new double[]{1,1},Relationship.LEQ,4));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));Assert.assertEquals(2.0,solution.getPoint()[0],0.0);Assert.assertEquals(2.0,solution.getPoint()[1],0.0);Assert.assertEquals(50.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testMinimization",0,"@Test public void testMinimization(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{-2,1},-5);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,2},Relationship.LEQ,6));constraints.add(new LinearConstraint(new double[]{3,2},Relationship.LEQ,12));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.GEQ,0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(false));Assert.assertEquals(4.0,solution.getPoint()[0],0.0);Assert.assertEquals(0.0,solution.getPoint()[1],0.0);Assert.assertEquals(-13.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testSolutionWithNegativeDecisionVariable",0,"@Test public void testSolutionWithNegativeDecisionVariable(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{-2,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1},Relationship.GEQ,6));constraints.add(new LinearConstraint(new double[]{1,2},Relationship.LEQ,14));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));Assert.assertEquals(-2.0,solution.getPoint()[0],0.0);Assert.assertEquals(8.0,solution.getPoint()[1],0.0);Assert.assertEquals(12.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testInfeasibleSolution",0,"@Test(expected=NoFeasibleSolutionException.class)public void testInfeasibleSolution(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1},Relationship.LEQ,1));constraints.add(new LinearConstraint(new double[]{1},Relationship.GEQ,3));SimplexSolver solver=new SimplexSolver();solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testUnboundedSolution",0,"@Test(expected=UnboundedSolutionException.class)public void testUnboundedSolution(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.EQ,2));SimplexSolver solver=new SimplexSolver();solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testRestrictVariablesToNonNegative",0,"@Test public void testRestrictVariablesToNonNegative(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{409,523,70,204,339},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{43,56,345,56,5},Relationship.LEQ,4567456));constraints.add(new LinearConstraint(new double[]{12,45,7,56,23},Relationship.LEQ,56454));constraints.add(new LinearConstraint(new double[]{8,768,0,34,7456},Relationship.LEQ,1923421));constraints.add(new LinearConstraint(new double[]{12342,2342,34,678,2342},Relationship.GEQ,4356));constraints.add(new LinearConstraint(new double[]{45,678,76,52,23},Relationship.EQ,456356));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(2902.92783505155,solution.getPoint()[0],.0000001);Assert.assertEquals(480.419243986254,solution.getPoint()[1],.0000001);Assert.assertEquals(0.0,solution.getPoint()[2],.0000001);Assert.assertEquals(0.0,solution.getPoint()[3],.0000001);Assert.assertEquals(0.0,solution.getPoint()[4],.0000001);Assert.assertEquals(1438556.7491409,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testEpsilon",0,"@Test public void testEpsilon(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{10,5,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{9,8,0},Relationship.EQ,17));constraints.add(new LinearConstraint(new double[]{0,7,8},Relationship.LEQ,7));constraints.add(new LinearConstraint(new double[]{10,0,2},Relationship.LEQ,10));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(false));Assert.assertEquals(1.0,solution.getPoint()[0],0.0);Assert.assertEquals(1.0,solution.getPoint()[1],0.0);Assert.assertEquals(0.0,solution.getPoint()[2],0.0);Assert.assertEquals(15.0,solution.getValue(),0.0);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testTrivialModel",0,"@Test public void testTrivialModel(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{1,1},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,1},Relationship.EQ,0));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MAXIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.optim.linear.SimplexSolverTest.testLargeModel",0,"@Test public void testLargeModel(){double[]objective=new double[]{1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};LinearObjectiveFunction f=new LinearObjectiveFunction(objective,0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(equationFromString(objective.length,""x0 + x1 + x2 + x3 - x12 = 0""));constraints.add(equationFromString(objective.length,""x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 - x13 = 0""));constraints.add(equationFromString(objective.length,""x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 >= 49""));constraints.add(equationFromString(objective.length,""x0 + x1 + x2 + x3 >= 42""));constraints.add(equationFromString(objective.length,""x14 + x15 + x16 + x17 - x26 = 0""));constraints.add(equationFromString(objective.length,""x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x27 = 0""));constraints.add(equationFromString(objective.length,""x14 + x15 + x16 + x17 - x12 = 0""));constraints.add(equationFromString(objective.length,""x18 + x19 + x20 + x21 + x22 + x23 + x24 + x25 - x13 = 0""));constraints.add(equationFromString(objective.length,""x28 + x29 + x30 + x31 - x40 = 0""));constraints.add(equationFromString(objective.length,""x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 - x41 = 0""));constraints.add(equationFromString(objective.length,""x32 + x33 + x34 + x35 + x36 + x37 + x38 + x39 >= 49""));constraints.add(equationFromString(objective.length,""x28 + x29 + x30 + x31 >= 42""));constraints.add(equationFromString(objective.length,""x42 + x43 + x44 + x45 - x54 = 0""));constraints.add(equationFromString(objective.length,""x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x55 = 0""));constraints.add(equationFromString(objective.length,""x42 + x43 + x44 + x45 - x40 = 0""));constraints.add(equationFromString(objective.length,""x46 + x47 + x48 + x49 + x50 + x51 + x52 + x53 - x41 = 0""));constraints.add(equationFromString(objective.length,""x56 + x57 + x58 + x59 - x68 = 0""));constraints.add(equationFromString(objective.length,""x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 - x69 = 0""));constraints.add(equationFromString(objective.length,""x60 + x61 + x62 + x63 + x64 + x65 + x66 + x67 >= 51""));constraints.add(equationFromString(objective.length,""x56 + x57 + x58 + x59 >= 44""));constraints.add(equationFromString(objective.length,""x70 + x71 + x72 + x73 - x82 = 0""));constraints.add(equationFromString(objective.length,""x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x83 = 0""));constraints.add(equationFromString(objective.length,""x70 + x71 + x72 + x73 - x68 = 0""));constraints.add(equationFromString(objective.length,""x74 + x75 + x76 + x77 + x78 + x79 + x80 + x81 - x69 = 0""));constraints.add(equationFromString(objective.length,""x84 + x85 + x86 + x87 - x96 = 0""));constraints.add(equationFromString(objective.length,""x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 - x97 = 0""));constraints.add(equationFromString(objective.length,""x88 + x89 + x90 + x91 + x92 + x93 + x94 + x95 >= 51""));constraints.add(equationFromString(objective.length,""x84 + x85 + x86 + x87 >= 44""));constraints.add(equationFromString(objective.length,""x98 + x99 + x100 + x101 - x110 = 0""));constraints.add(equationFromString(objective.length,""x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x111 = 0""));constraints.add(equationFromString(objective.length,""x98 + x99 + x100 + x101 - x96 = 0""));constraints.add(equationFromString(objective.length,""x102 + x103 + x104 + x105 + x106 + x107 + x108 + x109 - x97 = 0""));constraints.add(equationFromString(objective.length,""x112 + x113 + x114 + x115 - x124 = 0""));constraints.add(equationFromString(objective.length,""x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 - x125 = 0""));constraints.add(equationFromString(objective.length,""x116 + x117 + x118 + x119 + x120 + x121 + x122 + x123 >= 49""));constraints.add(equationFromString(objective.length,""x112 + x113 + x114 + x115 >= 42""));constraints.add(equationFromString(objective.length,""x126 + x127 + x128 + x129 - x138 = 0""));constraints.add(equationFromString(objective.length,""x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x139 = 0""));constraints.add(equationFromString(objective.length,""x126 + x127 + x128 + x129 - x124 = 0""));constraints.add(equationFromString(objective.length,""x130 + x131 + x132 + x133 + x134 + x135 + x136 + x137 - x125 = 0""));constraints.add(equationFromString(objective.length,""x140 + x141 + x142 + x143 - x152 = 0""));constraints.add(equationFromString(objective.length,""x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 - x153 = 0""));constraints.add(equationFromString(objective.length,""x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 >= 59""));constraints.add(equationFromString(objective.length,""x140 + x141 + x142 + x143 >= 42""));constraints.add(equationFromString(objective.length,""x154 + x155 + x156 + x157 - x166 = 0""));constraints.add(equationFromString(objective.length,""x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x167 = 0""));constraints.add(equationFromString(objective.length,""x154 + x155 + x156 + x157 - x152 = 0""));constraints.add(equationFromString(objective.length,""x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 - x153 = 0""));constraints.add(equationFromString(objective.length,""x83 + x82 - x168 = 0""));constraints.add(equationFromString(objective.length,""x111 + x110 - x169 = 0""));constraints.add(equationFromString(objective.length,""x170 - x182 = 0""));constraints.add(equationFromString(objective.length,""x171 - x183 = 0""));constraints.add(equationFromString(objective.length,""x172 - x184 = 0""));constraints.add(equationFromString(objective.length,""x173 - x185 = 0""));constraints.add(equationFromString(objective.length,""x174 - x186 = 0""));constraints.add(equationFromString(objective.length,""x175 + x176 - x187 = 0""));constraints.add(equationFromString(objective.length,""x177 - x188 = 0""));constraints.add(equationFromString(objective.length,""x178 - x189 = 0""));constraints.add(equationFromString(objective.length,""x179 - x190 = 0""));constraints.add(equationFromString(objective.length,""x180 - x191 = 0""));constraints.add(equationFromString(objective.length,""x181 - x192 = 0""));constraints.add(equationFromString(objective.length,""x170 - x26 = 0""));constraints.add(equationFromString(objective.length,""x171 - x27 = 0""));constraints.add(equationFromString(objective.length,""x172 - x54 = 0""));constraints.add(equationFromString(objective.length,""x173 - x55 = 0""));constraints.add(equationFromString(objective.length,""x174 - x168 = 0""));constraints.add(equationFromString(objective.length,""x177 - x169 = 0""));constraints.add(equationFromString(objective.length,""x178 - x138 = 0""));constraints.add(equationFromString(objective.length,""x179 - x139 = 0""));constraints.add(equationFromString(objective.length,""x180 - x166 = 0""));constraints.add(equationFromString(objective.length,""x181 - x167 = 0""));constraints.add(equationFromString(objective.length,""x193 - x205 = 0""));constraints.add(equationFromString(objective.length,""x194 - x206 = 0""));constraints.add(equationFromString(objective.length,""x195 - x207 = 0""));constraints.add(equationFromString(objective.length,""x196 - x208 = 0""));constraints.add(equationFromString(objective.length,""x197 - x209 = 0""));constraints.add(equationFromString(objective.length,""x198 + x199 - x210 = 0""));constraints.add(equationFromString(objective.length,""x200 - x211 = 0""));constraints.add(equationFromString(objective.length,""x201 - x212 = 0""));constraints.add(equationFromString(objective.length,""x202 - x213 = 0""));constraints.add(equationFromString(objective.length,""x203 - x214 = 0""));constraints.add(equationFromString(objective.length,""x204 - x215 = 0""));constraints.add(equationFromString(objective.length,""x193 - x182 = 0""));constraints.add(equationFromString(objective.length,""x194 - x183 = 0""));constraints.add(equationFromString(objective.length,""x195 - x184 = 0""));constraints.add(equationFromString(objective.length,""x196 - x185 = 0""));constraints.add(equationFromString(objective.length,""x197 - x186 = 0""));constraints.add(equationFromString(objective.length,""x198 + x199 - x187 = 0""));constraints.add(equationFromString(objective.length,""x200 - x188 = 0""));constraints.add(equationFromString(objective.length,""x201 - x189 = 0""));constraints.add(equationFromString(objective.length,""x202 - x190 = 0""));constraints.add(equationFromString(objective.length,""x203 - x191 = 0""));constraints.add(equationFromString(objective.length,""x204 - x192 = 0""));SimplexSolver solver=new SimplexSolver();PointValuePair solution=solver.optimize(DEFAULT_MAX_ITER,f,new LinearConstraintSet(constraints),GoalType.MINIMIZE,new NonNegativeConstraint(true));Assert.assertEquals(7518.0,solution.getValue(),.0000001);}"
"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.dimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void dimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();FirstOrderIntegrator integ=new AdamsMoultonIntegrator(2,0.0,1.0,1.0e-10,1.0e-10);integ.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);}"
"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.testMinStep",0,"@Test(expected=NumberIsTooSmallException.class)public void testMinStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new AdamsMoultonIntegrator(4,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.testIncreasingTolerance",0,"@Test public void testIncreasingTolerance()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=FastMath.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new AdamsMoultonIntegrator(4,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()> (0.5 * scalAbsoluteTolerance));Assert.assertTrue(handler.getMaximalValueError()< (11.0 * scalAbsoluteTolerance));Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-16);int calls=pb.getCalls();Assert.assertEquals(integ.getEvaluations(),calls);Assert.assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.exceedMaxEvaluations",0,"@Test(expected=MaxCountExceededException.class)public void exceedMaxEvaluations()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double range=pb.getFinalTime()- pb.getInitialTime();AdamsMoultonIntegrator integ=new AdamsMoultonIntegrator(2,0,range,1.0e-12,1.0e-12);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.setMaxEvaluations(650);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.backward",0,"@Test public void backward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double range=FastMath.abs(pb.getFinalTime()- pb.getInitialTime());FirstOrderIntegrator integ=new AdamsMoultonIntegrator(4,0,range,1.0e-12,1.0e-12);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 1.0e-9);Assert.assertTrue(handler.getMaximalValueError()< 1.0e-9);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-16);Assert.assertEquals(""Adams-Moulton"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegratorTest.polynomial",0,"@Test public void polynomial()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem6 pb=new TestProblem6();double range=FastMath.abs(pb.getFinalTime()- pb.getInitialTime());for (int nSteps=2;nSteps < 8;++nSteps){AdamsMoultonIntegrator integ=new AdamsMoultonIntegrator(nSteps,1.0e-6 * range,0.1 * range,1.0e-5,1.0e-5);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (nSteps < 4){Assert.assertTrue(handler.getMaximalValueError()> 7.0e-04);}else {Assert.assertTrue(handler.getMaximalValueError()< 3.0e-13);}}}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit01",0,"/** * Basic.*/@Test public void testFit01(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET1,fitter);double[]parameters=fitter.fit();Assert.assertEquals(3496978.1837704973,parameters[0],1e-4);Assert.assertEquals(4.054933085999146,parameters[1],1e-4);Assert.assertEquals(0.015039355620304326,parameters[2],1e-4);}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit02",0,"/** * Zero points is not enough observed points.*/@Test(expected=MathIllegalArgumentException.class)public void testFit02(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());fitter.fit();}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit03",0,"/** * Two points is not enough observed points.*/@Test(expected=MathIllegalArgumentException.class)public void testFit03(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(new double[][]{{4.0254623,531026.0},{4.02804905,664002.0}},fitter);fitter.fit();}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit04",0,"/** * Poor data: right of peak not symmetric with left of peak.*/@Test public void testFit04(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET2,fitter);double[]parameters=fitter.fit();Assert.assertEquals(233003.2967252038,parameters[0],1e-4);Assert.assertEquals(-10.654887521095983,parameters[1],1e-4);Assert.assertEquals(4.335937353196641,parameters[2],1e-4);}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit05",0,"/** * Poor data: long tails.*/@Test public void testFit05(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET3,fitter);double[]parameters=fitter.fit();Assert.assertEquals(283863.81929180305,parameters[0],1e-4);Assert.assertEquals(-13.29641995105174,parameters[1],1e-4);Assert.assertEquals(1.7297330293549908,parameters[2],1e-4);}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit06",0,"/** * Poor data: right of peak is missing.*/@Test public void testFit06(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET4,fitter);double[]parameters=fitter.fit();Assert.assertEquals(285250.66754309234,parameters[0],1e-4);Assert.assertEquals(-13.528375695228455,parameters[1],1e-4);Assert.assertEquals(1.5204344894331614,parameters[2],1e-4);}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testFit07",0,"/** * Basic with smaller dataset.*/@Test public void testFit07(){GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());addDatasetToGaussianFitter(DATASET5,fitter);double[]parameters=fitter.fit();Assert.assertEquals(3514384.729342235,parameters[0],1e-4);Assert.assertEquals(4.054970307455625,parameters[1],1e-4);Assert.assertEquals(0.015029412832160017,parameters[2],1e-4);}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testMath519",0,"@Test public void testMath519(){final double[]data={1.1143831578403364E-29,4.95281403484594E-28,1.1171347211930288E-26,1.7044813962636277E-25,1.9784716574832164E-24,1.8630236407866774E-23,1.4820532905097742E-22,1.0241963854632831E-21,6.275077366673128E-21,3.461808994532493E-20,1.7407124684715706E-19,8.056687953553974E-19,3.460193945992071E-18,1.3883326374011525E-17,5.233894983671116E-17,1.8630791465263745E-16,6.288759227922111E-16,2.0204433920597856E-15,6.198768938576155E-15,1.821419346860626E-14,5.139176445538471E-14,1.3956427429045787E-13,3.655705706448139E-13,9.253753324779779E-13,2.267636001476696E-12,5.3880460095836855E-12,1.2431632654852931E-11};GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());for (int i=0;i < data.length;i++){fitter.addObservedPoint(i,data[i]);}final double[]p=fitter.fit();Assert.assertEquals(53.1572792,p[1],1e-7);Assert.assertEquals(5.75214622,p[2],1e-8);}"
"org.apache.commons.math3.fitting.GaussianFitterTest.testMath798",0,"@Test public void testMath798(){final GaussianFitter fitter=new GaussianFitter(new LevenbergMarquardtOptimizer());fitter.addObservedPoint(0.23,395.0);fitter.addObservedPoint(1.14,376.0);fitter.addObservedPoint(2.05,163.0);fitter.addObservedPoint(2.95,49.0);fitter.addObservedPoint(3.86,16.0);fitter.addObservedPoint(4.77,1.0);final double[]p=fitter.fit();Assert.assertEquals(420.8397296167364,p[0],1e-12);Assert.assertEquals(0.603770729862231,p[1],1e-15);Assert.assertEquals(1.0786447936766612,p[2],1e-14);}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testContains",0,"@Test public void testContains()throws MathIllegalArgumentException,MathArithmeticException {Vector3D p1=new Vector3D(0,0,1);Line l=new Line(p1,new Vector3D(0,0,2));Assert.assertTrue(l.contains(p1));Assert.assertTrue(l.contains(new Vector3D(1.0,p1,0.3,l.getDirection())));Vector3D u=l.getDirection().orthogonal();Vector3D v=Vector3D.crossProduct(l.getDirection(),u);for (double alpha=0;alpha < 2 * FastMath.PI;alpha+=0.3){Assert.assertTrue(!l.contains(p1.add(new Vector3D(FastMath.cos(alpha),u,FastMath.sin(alpha),v))));}}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testSimilar",0,"@Test public void testSimilar()throws MathIllegalArgumentException,MathArithmeticException {Vector3D p1=new Vector3D(1.2,3.4,-5.8);Vector3D p2=new Vector3D(3.4,-5.8,1.2);Line lA=new Line(p1,p2);Line lB=new Line(p2,p1);Assert.assertTrue(lA.isSimilarTo(lB));Assert.assertTrue(!lA.isSimilarTo(new Line(p1,p1.add(lA.getDirection().orthogonal()))));}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testPointDistance",0,"@Test public void testPointDistance()throws MathIllegalArgumentException {Line l=new Line(new Vector3D(0,1,1),new Vector3D(0,2,2));Assert.assertEquals(FastMath.sqrt(3.0 / 2.0),l.distance(new Vector3D(1,0,1)),1.0e-10);Assert.assertEquals(0,l.distance(new Vector3D(0,-4,-4)),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testLineDistance",0,"@Test public void testLineDistance()throws MathIllegalArgumentException {Line l=new Line(new Vector3D(0,1,1),new Vector3D(0,2,2));Assert.assertEquals(1.0,l.distance(new Line(new Vector3D(1,0,1),new Vector3D(1,0,2))),1.0e-10);Assert.assertEquals(0.5,l.distance(new Line(new Vector3D(-0.5,0,0),new Vector3D(-0.5,-1,-1))),1.0e-10);Assert.assertEquals(0.0,l.distance(l),1.0e-10);Assert.assertEquals(0.0,l.distance(new Line(new Vector3D(0,-4,-4),new Vector3D(0,-5,-5))),1.0e-10);Assert.assertEquals(0.0,l.distance(new Line(new Vector3D(0,-4,-4),new Vector3D(0,-3,-4))),1.0e-10);Assert.assertEquals(0.0,l.distance(new Line(new Vector3D(0,-4,-4),new Vector3D(1,-4,-4))),1.0e-10);Assert.assertEquals(FastMath.sqrt(8),l.distance(new Line(new Vector3D(0,-4,0),new Vector3D(1,-4,0))),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testClosest",0,"@Test public void testClosest()throws MathIllegalArgumentException {Line l=new Line(new Vector3D(0,1,1),new Vector3D(0,2,2));Assert.assertEquals(0.0,l.closestPoint(new Line(new Vector3D(1,0,1),new Vector3D(1,0,2))).distance(new Vector3D(0,0,0)),1.0e-10);Assert.assertEquals(0.5,l.closestPoint(new Line(new Vector3D(-0.5,0,0),new Vector3D(-0.5,-1,-1))).distance(new Vector3D(-0.5,0,0)),1.0e-10);Assert.assertEquals(0.0,l.closestPoint(l).distance(new Vector3D(0,0,0)),1.0e-10);Assert.assertEquals(0.0,l.closestPoint(new Line(new Vector3D(0,-4,-4),new Vector3D(0,-5,-5))).distance(new Vector3D(0,0,0)),1.0e-10);Assert.assertEquals(0.0,l.closestPoint(new Line(new Vector3D(0,-4,-4),new Vector3D(0,-3,-4))).distance(new Vector3D(0,-4,-4)),1.0e-10);Assert.assertEquals(0.0,l.closestPoint(new Line(new Vector3D(0,-4,-4),new Vector3D(1,-4,-4))).distance(new Vector3D(0,-4,-4)),1.0e-10);Assert.assertEquals(0.0,l.closestPoint(new Line(new Vector3D(0,-4,0),new Vector3D(1,-4,0))).distance(new Vector3D(0,-2,-2)),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testIntersection",0,"@Test public void testIntersection()throws MathIllegalArgumentException {Line l=new Line(new Vector3D(0,1,1),new Vector3D(0,2,2));Assert.assertNull(l.intersection(new Line(new Vector3D(1,0,1),new Vector3D(1,0,2))));Assert.assertNull(l.intersection(new Line(new Vector3D(-0.5,0,0),new Vector3D(-0.5,-1,-1))));Assert.assertEquals(0.0,l.intersection(l).distance(new Vector3D(0,0,0)),1.0e-10);Assert.assertEquals(0.0,l.intersection(new Line(new Vector3D(0,-4,-4),new Vector3D(0,-5,-5))).distance(new Vector3D(0,0,0)),1.0e-10);Assert.assertEquals(0.0,l.intersection(new Line(new Vector3D(0,-4,-4),new Vector3D(0,-3,-4))).distance(new Vector3D(0,-4,-4)),1.0e-10);Assert.assertEquals(0.0,l.intersection(new Line(new Vector3D(0,-4,-4),new Vector3D(1,-4,-4))).distance(new Vector3D(0,-4,-4)),1.0e-10);Assert.assertNull(l.intersection(new Line(new Vector3D(0,-4,0),new Vector3D(1,-4,0))));}"
"org.apache.commons.math3.geometry.euclidean.threed.LineTest.testRevert",0,"@Test public void testRevert(){Line line=new Line(new Vector3D(1653345.6696423641,6170370.041579291,90000),new Vector3D(1650757.5050732433,6160710.879908984,0.9));Vector3D expected=line.getDirection().negate();Line reverted=line.revert();Assert.assertArrayEquals(expected.toArray(),reverted.getDirection().toArray(),0);}"
"org.apache.commons.math3.exception.NumberIsTooLargeExceptionTest.testAccessors",0,"@Test public void testAccessors(){final NumberIsTooLargeException e=new NumberIsTooLargeException(1,0,true);Assert.assertEquals(1,e.getArgument());Assert.assertEquals(0,e.getMax());Assert.assertTrue(e.getBoundIsAllowed());}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testConstraintsUnsupported",0,"@Test(expected=MathUnsupportedOperationException.class)public void testConstraintsUnsupported(){createOptimizer().optimize(new MaxEval(100),new Target(new double[]{2}),new Weight(new double[]{1}),new InitialGuess(new double[]{1,2}),new SimpleBounds(new double[]{-10,0},new double[]{20,30}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testMoreEstimatedParametersSimple",0,"@Override @Test(expected=ConvergenceException.class)public void testMoreEstimatedParametersSimple(){super.testMoreEstimatedParametersSimple();}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testMoreEstimatedParametersUnsorted",0,"@Override @Test(expected=ConvergenceException.class)public void testMoreEstimatedParametersUnsorted(){super.testMoreEstimatedParametersUnsorted();}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testMaxEvaluations",0,"@Test(expected=TooManyEvaluationsException.class)public void testMaxEvaluations()throws Exception {CircleVectorial circle=new CircleVectorial();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);GaussNewtonOptimizer optimizer=new GaussNewtonOptimizer(new SimpleVectorValueChecker(1e-30,1e-30));optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(new double[]{0,0,0,0,0}),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{98.680,47.345}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testCircleFittingBadInit",0,"@Override @Test(expected=ConvergenceException.class)public void testCircleFittingBadInit(){super.testCircleFittingBadInit();}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testHahn1",0,"@Override @Test(expected=ConvergenceException.class)public void testHahn1()throws IOException {super.testHahn1();}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testGetIterations",0,"@Test public void testGetIterations(){AbstractLeastSquaresOptimizer optim=createOptimizer();optim.optimize(new MaxEval(100),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{3}),new ModelFunction(new MultivariateVectorFunction(){public double[]value(double[]point){return new double[]{FastMath.pow(point[0],4)};}}),new ModelFunctionJacobian(new MultivariateMatrixFunction(){public double[][]value(double[]point){return new double[][]{{0.25 * FastMath.pow(point[0],3)}};}}));Assert.assertTrue(optim.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1.5,optimum.getPoint()[0],1e-10);Assert.assertEquals(3.0,optimum.getValue()[0],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testQRColumnsPermutation",0,"@Test public void testQRColumnsPermutation(){LinearProblem problem=new LinearProblem(new double[][]{{1,-1},{0,2},{1,-2}},new double[]{4,6,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(7,optimum.getPoint()[0],1e-10);Assert.assertEquals(3,optimum.getPoint()[1],1e-10);Assert.assertEquals(4,optimum.getValue()[0],1e-10);Assert.assertEquals(6,optimum.getValue()[1],1e-10);Assert.assertEquals(1,optimum.getValue()[2],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testNoDependency",0,"@Test public void testNoDependency(){LinearProblem problem=new LinearProblem(new double[][]{{2,0,0,0,0,0},{0,2,0,0,0,0},{0,0,2,0,0,0},{0,0,0,2,0,0},{0,0,0,0,2,0},{0,0,0,0,0,2}},new double[]{0,1.1,2.2,3.3,4.4,5.5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);for (int i=0;i < problem.target.length;++i){Assert.assertEquals(0.55 * i,optimum.getPoint()[i],1e-10);}}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testOneSet",0,"@Test public void testOneSet(){LinearProblem problem=new LinearProblem(new double[][]{{1,0,0},{-1,1,0},{0,-1,1}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum.getPoint()[0],1e-10);Assert.assertEquals(2,optimum.getPoint()[1],1e-10);Assert.assertEquals(3,optimum.getPoint()[2],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testTwoSets",0,"@Test public void testTwoSets(){double epsilon=1e-7;LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(3,optimum.getPoint()[0],1e-10);Assert.assertEquals(4,optimum.getPoint()[1],1e-10);Assert.assertEquals(-1,optimum.getPoint()[2],1e-10);Assert.assertEquals(-2,optimum.getPoint()[3],1e-10);Assert.assertEquals(1 + epsilon,optimum.getPoint()[4],1e-10);Assert.assertEquals(1 - epsilon,optimum.getPoint()[5],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testNonInvertible",0,"@Test(expected=ConvergenceException.class)public void testNonInvertible()throws Exception {LinearProblem problem=new LinearProblem(new double[][]{{1,2,-3},{2,1,3},{-3,0,-9}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testIllConditioned",0,"@Test public void testIllConditioned(){LinearProblem problem1=new LinearProblem(new double[][]{{10,7,8,7},{7,5,6,5},{8,6,10,9},{7,5,9,10}},new double[]{32,23,33,31});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum1=optimizer.optimize(new MaxEval(100),problem1.getModelFunction(),problem1.getModelFunctionJacobian(),problem1.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum1.getPoint()[0],1e-10);Assert.assertEquals(1,optimum1.getPoint()[1],1e-10);Assert.assertEquals(1,optimum1.getPoint()[2],1e-10);Assert.assertEquals(1,optimum1.getPoint()[3],1e-10);LinearProblem problem2=new LinearProblem(new double[][]{{10.00,7.00,8.10,7.20},{7.08,5.04,6.00,5.00},{8.00,5.98,9.89,9.00},{6.99,4.99,9.00,9.98}},new double[]{32,23,33,31});PointVectorValuePair optimum2=optimizer.optimize(new MaxEval(100),problem2.getModelFunction(),problem2.getModelFunctionJacobian(),problem2.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-81,optimum2.getPoint()[0],1e-8);Assert.assertEquals(137,optimum2.getPoint()[1],1e-8);Assert.assertEquals(-34,optimum2.getPoint()[2],1e-8);Assert.assertEquals(22,optimum2.getPoint()[3],1e-8);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testRedundantEquations",0,"@Test public void testRedundantEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(2,optimum.getPointRef()[0],1e-10);Assert.assertEquals(1,optimum.getPointRef()[1],1e-10);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testInconsistentEquations",0,"@Test public void testInconsistentEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,4});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertTrue(optimizer.getRMS()> 0.1);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testInconsistentSizes1",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes1(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testInconsistentSizes2",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes2(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleVectorial circle=new CircleVectorial();circle.addPoint(30,68);circle.addPoint(50,-6);circle.addPoint(110,-20);circle.addPoint(35,15);circle.addPoint(45,97);AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(new double[]{0,0,0,0,0}),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{98.680,47.345}));Assert.assertTrue(optimizer.getEvaluations()< 10);double rms=optimizer.getRMS();Assert.assertEquals(1.768262623567235,FastMath.sqrt(circle.getN())* rms,1e-10);Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertEquals(69.96016176931406,circle.getRadius(center),1e-6);Assert.assertEquals(96.07590211815305,center.getX(),1e-6);Assert.assertEquals(48.13516790438953,center.getY(),1e-6);double[][]cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(1.839,cov[0][0],0.001);Assert.assertEquals(0.731,cov[0][1],0.001);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.786,cov[1][1],0.001);double r=circle.getRadius(center);for (double d=0;d < 2 * FastMath.PI;d+=0.01){circle.addPoint(center.getX()+ r * FastMath.cos(d),center.getY()+ r * FastMath.sin(d));}double[]target=new double[circle.getN()];Arrays.fill(target,0);double[]weights=new double[circle.getN()];Arrays.fill(weights,2);optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{98.680,47.345}));cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(0.0016,cov[0][0],0.001);Assert.assertEquals(3.2e-7,cov[0][1],1e-9);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.0016,cov[1][1],0.001);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testCircleFittingGoodInit",0,"@Test public void testCircleFittingGoodInit(){CircleVectorial circle=new CircleVectorial();double[][]points=circlePoints;double[]target=new double[points.length];Arrays.fill(target,0);double[]weights=new double[points.length];Arrays.fill(weights,2);for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{0,0}));Assert.assertEquals(-0.1517383071957963,optimum.getPointRef()[0],1e-6);Assert.assertEquals(0.2074999736353867,optimum.getPointRef()[1],1e-6);Assert.assertEquals(0.04268731682389561,optimizer.getRMS(),1e-8);}"
"org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest.testKirby2",0,"@Test public void testKirby2()throws IOException {doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(),1E-7,1E-7);}"
"org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilityAgainstStackOverflow",0,"/** * @see <a href=""http://issues.apache.org/bugzilla/show_bug.cgi?id=27243"">*      Bug report that prompted this unit test.</a>*/@Test public void testCumulativeProbabilityAgainstStackOverflow(){TDistribution td=new TDistribution(5.);td.cumulativeProbability(.1);td.cumulativeProbability(.01);}"
"org.apache.commons.math3.distribution.TDistributionTest.testSmallDf",0,"@Test public void testSmallDf(){setDistribution(new TDistribution(1d));setCumulativeTestPoints(new double[]{-318.308838986,-31.8205159538,-12.7062047362,-6.31375151468,-3.07768353718,318.308838986,31.8205159538,12.7062047362,6.31375151468,3.07768353718});setDensityTestValues(new double[]{3.14158231817e-06,0.000314055924703,0.00195946145194,0.00778959736375,0.0303958893917,3.14158231817e-06,0.000314055924703,0.00195946145194,0.00778959736375,0.0303958893917});setInverseCumulativeTestValues(getCumulativeTestPoints());verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();verifyDensities();}"
"org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.TDistributionTest.testDfAccessors",0,"@Test public void testDfAccessors(){TDistribution dist=(TDistribution)getDistribution();Assert.assertEquals(5d,dist.getDegreesOfFreedom(),Double.MIN_VALUE);}"
"org.apache.commons.math3.distribution.TDistributionTest.testPreconditions",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions(){new TDistribution(0);}"
"org.apache.commons.math3.distribution.TDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;TDistribution dist;dist=new TDistribution(1);Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));dist=new TDistribution(1.5);Assert.assertEquals(dist.getNumericalMean(),0,tol);Assert.assertTrue(Double.isInfinite(dist.getNumericalVariance()));dist=new TDistribution(5);Assert.assertEquals(dist.getNumericalMean(),0,tol);Assert.assertEquals(dist.getNumericalVariance(),5d / (5d - 2d),tol);}"
"org.apache.commons.math3.distribution.TDistributionTest.nistData",0,"@Test public void nistData(){double[]prob=new double[]{0.10,0.05,0.025,0.01,0.005,0.001};double[]args2=new double[]{1.886,2.920,4.303,6.965,9.925,22.327};double[]args10=new double[]{1.372,1.812,2.228,2.764,3.169,4.143};double[]args30=new double[]{1.310,1.697,2.042,2.457,2.750,3.385};double[]args100=new double[]{1.290,1.660,1.984,2.364,2.626,3.174};TestUtils.assertEquals(prob,makeNistResults(args2,2),1.0e-4);TestUtils.assertEquals(prob,makeNistResults(args10,10),1.0e-4);TestUtils.assertEquals(prob,makeNistResults(args30,30),1.0e-4);TestUtils.assertEquals(prob,makeNistResults(args100,100),1.0e-4);return;}"
"org.apache.commons.math3.distribution.TDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.TDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.TDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.TDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.TDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.TDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.TDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.TDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.TDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.TDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.transform.FastHadamardTransformerTest.test8Points",0,"/** * Test of transformer for the a 8-point FHT (means n=8)*/@Test public void test8Points(){checkAllTransforms(new int[]{1,4,-2,3,0,1,4,-1},new int[]{10,-4,2,-4,2,-12,6,8});}"
"org.apache.commons.math3.transform.FastHadamardTransformerTest.test4Points",0,"/** * Test of transformer for the a 4-points FHT (means n=4)*/@Test public void test4Points(){checkAllTransforms(new int[]{1,2,3,4},new int[]{10,-2,-4,0});}"
"org.apache.commons.math3.transform.FastHadamardTransformerTest.testNoIntInverse",0,"/** * Test the inverse transform of an integer vector is not always an integer vector*/@Test public void testNoIntInverse(){FastHadamardTransformer transformer=new FastHadamardTransformer();double[]x=transformer.transform(new double[]{0,1,0,1},TransformType.INVERSE);Assert.assertEquals(0.5,x[0],0);Assert.assertEquals(-0.5,x[1],0);Assert.assertEquals(0.0,x[2],0);Assert.assertEquals(0.0,x[3],0);}"
"org.apache.commons.math3.transform.FastHadamardTransformerTest.test3Points",0,"/** * Test of transformer for wrong number of points*/@Test public void test3Points(){try {new FastHadamardTransformer().transform(new double[3],TransformType.FORWARD);Assert.fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}}"
"org.apache.commons.math3.ode.sampling.StepNormalizerTest.testBoundaries",0,"@Test public void testBoundaries()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double range=pb.getFinalTime()- pb.getInitialTime();setLastSeen(false);integ.addStepHandler(new StepNormalizer(range / 10.0,new FixedStepHandler(){private boolean firstCall=true;public void init(double t0,double[]y0,double t){}public void handleStep(double t,double[]y,double[]yDot,boolean isLast){if (firstCall){checkValue(t,pb.getInitialTime());firstCall=false;}if (isLast){setLastSeen(true);checkValue(t,pb.getFinalTime());}}}));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(lastSeen);}"
"org.apache.commons.math3.ode.sampling.StepNormalizerTest.testBeforeEnd",0,"@Test public void testBeforeEnd()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double range=pb.getFinalTime()- pb.getInitialTime();setLastSeen(false);integ.addStepHandler(new StepNormalizer(range / 10.5,new FixedStepHandler(){public void init(double t0,double[]y0,double t){}public void handleStep(double t,double[]y,double[]yDot,boolean isLast){if (isLast){setLastSeen(true);checkValue(t,pb.getFinalTime()- range / 21.0);}}}));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(lastSeen);}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testWrongDerivative",0,"@Test public void testWrongDerivative()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {HighamHall54Integrator integrator=new HighamHall54Integrator(0.0,1.0,1.0e-10,1.0e-10);FirstOrderDifferentialEquations equations=new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){if (t < -0.5){throw new LocalException();}else {throw new RuntimeException(""oops"");}}public int getDimension(){return 1;}};try {integrator.integrate(equations,-1.0,new double[1],0.0,new double[1]);Assert.fail(""an exception should have been thrown"");}catch(LocalException de){}try {integrator.integrate(equations,0.0,new double[1],1.0,new double[1]);Assert.fail(""an exception should have been thrown"");}catch(RuntimeException de){}}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testMinStep",0,"@Test(expected=NumberIsTooSmallException.class)public void testMinStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testIncreasingTolerance",0,"@Test public void testIncreasingTolerance()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=FastMath.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()< (1.3 * scalAbsoluteTolerance));Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();Assert.assertEquals(integ.getEvaluations(),calls);Assert.assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 5.0e-7);Assert.assertTrue(handler.getMaximalValueError()< 5.0e-7);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Higham-Hall 5(4)"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEvents",0,"@Test public void testEvents()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();double convergence=1.0e-8 * maxStep;for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,convergence,1000);}Assert.assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()< 1.0e-7);Assert.assertEquals(0,handler.getMaximalTimeError(),convergence);Assert.assertEquals(12.0,handler.getLastTime(),convergence);integ.clearEventHandlers();Assert.assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEventsErrors",0,"@Test(expected=LocalException.class)public void testEventsErrors()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.addEventHandler(new EventHandler(){public void init(double t0,double[]y0,double t){}public Action eventOccurred(double t,double[]y,boolean increasing){return Action.CONTINUE;}public double g(double t,double[]y){double middle=(pb.getInitialTime()+ pb.getFinalTime())/ 2;double offset=t - middle;if (offset > 0){throw new LocalException();}return offset;}public void resetState(double t,double[]y){}},Double.POSITIVE_INFINITY,1.0e-8 * maxStep,1000);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testEventsNoConvergence",0,"@Test public void testEventsNoConvergence()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.addEventHandler(new EventHandler(){public void init(double t0,double[]y0,double t){}public Action eventOccurred(double t,double[]y,boolean increasing){return Action.CONTINUE;}public double g(double t,double[]y){double middle=(pb.getInitialTime()+ pb.getFinalTime())/ 2;double offset=t - middle;return (offset > 0)? (offset + 0.5): (offset - 0.5);}public void resetState(double t,double[]y){}},Double.POSITIVE_INFINITY,1.0e-8 * maxStep,3);try {integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(TooManyEvaluationsException tmee){}}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testSanityChecks",0,"@Test public void testSanityChecks()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);integ.integrate(pb,pb.getInitialTime(),new double[6],pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[6]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[2],new double[4]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[2]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException ie){}try {FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,new double[4],new double[4]);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getInitialTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(NumberIsTooSmallException ie){}}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54IntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-8,1.0e-8,1.0e-10,1.0e-10};double[]vecRelativeTolerance={1.0e-10,1.0e-10,1.0e-8,1.0e-8};FirstOrderIntegrator integ=new HighamHall54Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(0.0,handler.getMaximalValueError(),1.5e-4);Assert.assertEquals(""Higham-Hall 5(4)"",integ.getName());}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.cannotAddXSampleData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddXSampleData(){createRegression().newSampleData(new double[]{},null,null);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.cannotAddNullYSampleData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddNullYSampleData(){createRegression().newSampleData(null,new double[][]{},null);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.cannotAddSampleDataWithSizeMismatch",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddSampleDataWithSizeMismatch(){double[]y=new double[]{1.0,2.0};double[][]x=new double[1][];x[0]=new double[]{1.0,0};createRegression().newSampleData(y,x,null);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.cannotAddNullCovarianceData",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddNullCovarianceData(){createRegression().newSampleData(new double[]{},new double[][]{},null);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.notEnoughData",0,"@Test(expected=IllegalArgumentException.class)public void notEnoughData(){double[]reducedY=new double[y.length - 1];double[][]reducedX=new double[x.length - 1][];double[][]reducedO=new double[omega.length - 1][];System.arraycopy(y,0,reducedY,0,reducedY.length);System.arraycopy(x,0,reducedX,0,reducedX.length);System.arraycopy(omega,0,reducedO,0,reducedO.length);createRegression().newSampleData(reducedY,reducedX,reducedO);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.cannotAddCovarianceDataWithSampleSizeMismatch",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddCovarianceDataWithSampleSizeMismatch(){double[]y=new double[]{1.0,2.0};double[][]x=new double[2][];x[0]=new double[]{1.0,0};x[1]=new double[]{0,1.0};double[][]omega=new double[1][];omega[0]=new double[]{1.0,0};createRegression().newSampleData(y,x,omega);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.cannotAddCovarianceDataThatIsNotSquare",0,"@Test(expected=IllegalArgumentException.class)public void cannotAddCovarianceDataThatIsNotSquare(){double[]y=new double[]{1.0,2.0};double[][]x=new double[2][];x[0]=new double[]{1.0,0};x[1]=new double[]{0,1.0};double[][]omega=new double[3][];omega[0]=new double[]{1.0,0};omega[1]=new double[]{0,1.0};omega[2]=new double[]{0,2.0};createRegression().newSampleData(y,x,omega);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.testYVariance",0,"/** * test calculateYVariance*/@Test public void testYVariance(){GLSMultipleLinearRegression model=new GLSMultipleLinearRegression();model.newSampleData(y,x,omega);TestUtils.assertEquals(model.calculateYVariance(),3.5,0);}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.testNewSample2",0,"/** * Verifies that setting X,Y and covariance separately has the same effect as newSample(X,Y,cov).*/@Test public void testNewSample2(){double[]y=new double[]{1,2,3,4};double[][]x=new double[][]{{19,22,33},{20,30,40},{25,35,45},{27,37,47}};double[][]covariance=MatrixUtils.createRealIdentityMatrix(4).scalarMultiply(2).getData();GLSMultipleLinearRegression regression=new GLSMultipleLinearRegression();regression.newSampleData(y,x,covariance);RealMatrix combinedX=regression.getX().copy();RealVector combinedY=regression.getY().copy();RealMatrix combinedCovInv=regression.getOmegaInverse();regression.newXSampleData(x);regression.newYSampleData(y);Assert.assertEquals(combinedX,regression.getX());Assert.assertEquals(combinedY,regression.getY());Assert.assertEquals(combinedCovInv,regression.getOmegaInverse());}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.testGLSOLSConsistency",0,"/** * Verifies that GLS with identity covariance matrix gives the same results as OLS.*/@Test public void testGLSOLSConsistency(){RealMatrix identityCov=MatrixUtils.createRealIdentityMatrix(16);GLSMultipleLinearRegression glsModel=new GLSMultipleLinearRegression();OLSMultipleLinearRegression olsModel=new OLSMultipleLinearRegression();glsModel.newSampleData(longley,16,6);olsModel.newSampleData(longley,16,6);glsModel.newCovarianceData(identityCov.getData());double[]olsBeta=olsModel.calculateBeta().toArray();double[]glsBeta=glsModel.calculateBeta().toArray();for (int i=0;i < olsBeta.length;i++){TestUtils.assertRelativelyEquals(olsBeta[i],glsBeta[i],10E-7);}}"
"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegressionTest.testGLSEfficiency",0,"/** * Generate an error covariance matrix and sample data representing models with this error structure. Then verify that GLS estimated coefficients,on average,perform better than OLS.*/@Test public void testGLSEfficiency(){RandomGenerator rg=new JDKRandomGenerator();rg.setSeed(200);final int nObs=16;double[]sigma=new double[nObs];for (int i=0;i < nObs;i++){sigma[i]=10 * rg.nextDouble();}final int numSeeds=1000;RealMatrix errorSeeds=MatrixUtils.createRealMatrix(numSeeds,nObs);for (int i=0;i < numSeeds;i++){for (int j=0;j < nObs;j++){errorSeeds.setEntry(i,j,rg.nextGaussian()* sigma[j]);}}RealMatrix cov=(new Covariance(errorSeeds)).getCovarianceMatrix();GaussianRandomGenerator rawGenerator=new GaussianRandomGenerator(rg);double[]errorMeans=new double[nObs];CorrelatedRandomVectorGenerator gen=new CorrelatedRandomVectorGenerator(errorMeans,cov,1.0e-12 * cov.getNorm(),rawGenerator);OLSMultipleLinearRegression ols=new OLSMultipleLinearRegression();ols.newSampleData(longley,nObs,6);final RealVector b=ols.calculateBeta().copy();final RealMatrix x=ols.getX().copy();GLSMultipleLinearRegression gls=new GLSMultipleLinearRegression();gls.newSampleData(longley,nObs,6);gls.newCovarianceData(cov.getData());DescriptiveStatistics olsBetaStats=new DescriptiveStatistics();DescriptiveStatistics glsBetaStats=new DescriptiveStatistics();final int nModels=10000;for (int i=0;i < nModels;i++){RealVector u=MatrixUtils.createRealVector(gen.nextVector());double[]y=u.add(x.operate(b)).toArray();ols.newYSampleData(y);RealVector olsBeta=ols.calculateBeta();gls.newYSampleData(y);RealVector glsBeta=gls.calculateBeta();double dist=olsBeta.getDistance(b);olsBetaStats.addValue(dist * dist);dist=glsBeta.getDistance(b);glsBetaStats.addValue(dist * dist);}assert(olsBetaStats.getMean()> 1.5 * glsBetaStats.getMean());assert(olsBetaStats.getStandardDeviation()> glsBetaStats.getStandardDeviation());}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testNonSquare",0,"@Test public void testNonSquare(){try {new HessenbergTransformer(MatrixUtils.createRealMatrix(new double[3][2]));Assert.fail(""an exception should have been thrown"");}catch(NonSquareMatrixException ime){}}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testAEqualPHPt",0,"@Test public void testAEqualPHPt(){checkAEqualPHPt(MatrixUtils.createRealMatrix(testSquare5));checkAEqualPHPt(MatrixUtils.createRealMatrix(testSquare3));checkAEqualPHPt(MatrixUtils.createRealMatrix(testRandom));}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testPOrthogonal",0,"@Test public void testPOrthogonal(){checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP());}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testPTOrthogonal",0,"@Test public void testPTOrthogonal(){checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT());checkOrthogonal(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT());}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testHessenbergForm",0,"@Test public void testHessenbergForm(){checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare5)).getH());checkHessenbergForm(new HessenbergTransformer(MatrixUtils.createRealMatrix(testSquare3)).getH());}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomData",0,"@Test public void testRandomData(){for (int run=0;run < 100;run++){Random r=new Random(System.currentTimeMillis());int size=r.nextInt(20)+ 4;double[][]data=new double[size][size];for (int i=0;i < size;i++){for (int j=0;j < size;j++){data[i][j]=r.nextInt(100);}}RealMatrix m=MatrixUtils.createRealMatrix(data);RealMatrix h=checkAEqualPHPt(m);checkHessenbergForm(h);}}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testRandomDataNormalDistribution",0,"@Test public void testRandomDataNormalDistribution(){for (int run=0;run < 100;run++){Random r=new Random(System.currentTimeMillis());NormalDistribution dist=new NormalDistribution(0.0,r.nextDouble()* 5);int size=r.nextInt(20)+ 4;double[][]data=new double[size][size];for (int i=0;i < size;i++){for (int j=0;j < size;j++){data[i][j]=dist.sample();}}RealMatrix m=MatrixUtils.createRealMatrix(data);RealMatrix h=checkAEqualPHPt(m);checkHessenbergForm(h);}}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testMatricesValues5",0,"@Test public void testMatricesValues5(){checkMatricesValues(testSquare5,new double[][]{{1.0,0.0,0.0,0.0,0.0},{0.0,-0.182574185835055,0.784218758628863,0.395029040913988,-0.442289115981669},{0.0,-0.365148371670111,-0.337950625265477,-0.374110794088820,-0.782621974707823},{0.0,-0.547722557505166,0.402941130124223,-0.626468266309003,0.381019628053472},{0.0,-0.730296743340221,-0.329285224617644,0.558149336547665,0.216118545309225}},new double[][]{{5.0,-3.65148371670111,2.59962019434982,-0.237003414680848,-3.13886458663398},{-5.47722557505166,6.9,-2.29164066120599,0.207283564429169,0.703858369151728},{0.0,-4.21386600008432,2.30555659846067,2.74935928725112,0.857569835914113},{0.0,0.0,2.86406180891882,-1.11582249161595,0.817995267184158},{0.0,0.0,0.0,0.683518597386085,1.91026589315528}});}"
"org.apache.commons.math3.linear.HessenbergTransformerTest.testMatricesValues3",0,"@Test public void testMatricesValues3(){checkMatricesValues(testSquare3,new double[][]{{1.0,0.0,0.0},{0.0,-0.707106781186547,0.707106781186547},{0.0,0.707106781186547,0.707106781186548}},new double[][]{{2.0,1.41421356237309,0.0},{1.41421356237310,2.0,-1.0},{0.0,1.0,2.0}});}"
"org.apache.commons.math3.ode.FirstOrderConverterTest.testDoubleDimension",0,"@Test public void testDoubleDimension(){for (int i=1;i < 10;++i){SecondOrderDifferentialEquations eqn2=new Equations(i,0.2);FirstOrderConverter eqn1=new FirstOrderConverter(eqn2);Assert.assertTrue(eqn1.getDimension()== (2 * eqn2.getDimension()));}}"
"org.apache.commons.math3.ode.FirstOrderConverterTest.testDecreasingSteps",0,"@Test public void testDecreasingSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double previousError=Double.NaN;for (int i=0;i < 10;++i){double step=FastMath.pow(2.0,-(i + 1));double error=integrateWithSpecifiedStep(4.0,0.0,1.0,step)- FastMath.sin(4.0);if (i > 0){Assert.assertTrue(FastMath.abs(error)< FastMath.abs(previousError));}previousError=error;}}"
"org.apache.commons.math3.ode.FirstOrderConverterTest.testSmallStep",0,"@Test public void testSmallStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double error=integrateWithSpecifiedStep(4.0,0.0,1.0,1.0e-4)- FastMath.sin(4.0);Assert.assertTrue(FastMath.abs(error)< 1.0e-10);}"
"org.apache.commons.math3.ode.FirstOrderConverterTest.testBigStep",0,"@Test public void testBigStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double error=integrateWithSpecifiedStep(4.0,0.0,1.0,0.5)- FastMath.sin(4.0);Assert.assertTrue(FastMath.abs(error)> 0.1);}"
"org.apache.commons.math3.complex.ComplexUtilsTest.testPolar2Complex",0,"@Test public void testPolar2Complex(){TestUtils.assertEquals(Complex.ONE,ComplexUtils.polar2Complex(1,0),10e-12);TestUtils.assertEquals(Complex.ZERO,ComplexUtils.polar2Complex(0,1),10e-12);TestUtils.assertEquals(Complex.ZERO,ComplexUtils.polar2Complex(0,-1),10e-12);TestUtils.assertEquals(Complex.I,ComplexUtils.polar2Complex(1,pi / 2),10e-12);TestUtils.assertEquals(Complex.I.negate(),ComplexUtils.polar2Complex(1,-pi / 2),10e-12);double r=0;for (int i=0;i < 5;i++){r+=i;double theta=0;for (int j=0;j < 20;j++){theta+=pi / 6;TestUtils.assertEquals(altPolar(r,theta),ComplexUtils.polar2Complex(r,theta),10e-12);}theta=-2 * pi;for (int j=0;j < 20;j++){theta-=pi / 6;TestUtils.assertEquals(altPolar(r,theta),ComplexUtils.polar2Complex(r,theta),10e-12);}}}"
"org.apache.commons.math3.complex.ComplexUtilsTest.testPolar2ComplexIllegalModulus",0,"@Test(expected=IllegalArgumentException.class)public void testPolar2ComplexIllegalModulus(){ComplexUtils.polar2Complex(-1,0);}"
"org.apache.commons.math3.complex.ComplexUtilsTest.testPolar2ComplexNaN",0,"@Test public void testPolar2ComplexNaN(){TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(nan,1));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(1,nan));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(nan,nan));}"
"org.apache.commons.math3.complex.ComplexUtilsTest.testPolar2ComplexInf",0,"@Test public void testPolar2ComplexInf(){TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(1,inf));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(1,negInf));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(inf,inf));TestUtils.assertSame(Complex.NaN,ComplexUtils.polar2Complex(inf,negInf));TestUtils.assertSame(infInf,ComplexUtils.polar2Complex(inf,pi / 4));TestUtils.assertSame(infNaN,ComplexUtils.polar2Complex(inf,0));TestUtils.assertSame(infNegInf,ComplexUtils.polar2Complex(inf,-pi / 4));TestUtils.assertSame(negInfInf,ComplexUtils.polar2Complex(inf,3 * pi / 4));TestUtils.assertSame(negInfNegInf,ComplexUtils.polar2Complex(inf,5 * pi / 4));}"
"org.apache.commons.math3.complex.ComplexUtilsTest.testConvertToComplex",0,"@Test public void testConvertToComplex(){final double[]real=new double[]{negInf,-123.45,0,1,234.56,pi,inf};final Complex[]complex=ComplexUtils.convertToComplex(real);for (int i=0;i < real.length;i++){Assert.assertEquals(real[i],complex[i].getReal(),0d);}}"
"org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateIntegrator integrator=new SimpsonIntegrator();double min,max,expected,result,tolerance;min=0;max=FastMath.PI;expected=2;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(1000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 100);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);min=-FastMath.PI / 3;max=0;expected=-0.5;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(1000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 50);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new SimpsonIntegrator();double min,max,expected,result,tolerance;min=0;max=1;expected=-1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(1000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 150);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(1000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 100);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(1000,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 150);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.SimpsonIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/@Test public void testParameters(){UnivariateFunction f=new Sin();try {new SimpsonIntegrator().integrate(1000,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {new SimpsonIntegrator(5,4);Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");}catch(NumberIsTooSmallException ex){}try {new SimpsonIntegrator(10,99);Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");}catch(NumberIsTooLargeException ex){}}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveNull",0,"@Test(expected=MathIllegalArgumentException.class)public void testSolveNull(){UnivariateSolverUtils.solve(null,0.0,4.0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveBadEndpoints",0,"@Test(expected=MathIllegalArgumentException.class)public void testSolveBadEndpoints(){double root=UnivariateSolverUtils.solve(sin,4.0,-0.1,1e-6);System.out.println(""root="" + root);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveBadAccuracy",0,"@Test public void testSolveBadAccuracy(){try {UnivariateSolverUtils.solve(sin,0.0,4.0,0.0);}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveSin",0,"@Test public void testSolveSin(){double x=UnivariateSolverUtils.solve(sin,1.0,4.0);Assert.assertEquals(FastMath.PI,x,1.0e-4);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveAccuracyNull",0,"@Test(expected=MathIllegalArgumentException.class)public void testSolveAccuracyNull(){double accuracy=1.0e-6;UnivariateSolverUtils.solve(null,0.0,4.0,accuracy);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveAccuracySin",0,"@Test public void testSolveAccuracySin(){double accuracy=1.0e-6;double x=UnivariateSolverUtils.solve(sin,1.0,4.0,accuracy);Assert.assertEquals(FastMath.PI,x,accuracy);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testSolveNoRoot",0,"@Test(expected=MathIllegalArgumentException.class)public void testSolveNoRoot(){UnivariateSolverUtils.solve(sin,1.0,1.5);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testBracketSin",0,"@Test public void testBracketSin(){double[]result=UnivariateSolverUtils.bracket(sin,0.0,-2.0,2.0);Assert.assertTrue(sin.value(result[0])< 0);Assert.assertTrue(sin.value(result[1])> 0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testBracketEndpointRoot",0,"@Test public void testBracketEndpointRoot(){double[]result=UnivariateSolverUtils.bracket(sin,1.5,0,2.0);Assert.assertEquals(0.0,sin.value(result[0]),1.0e-15);Assert.assertTrue(sin.value(result[1])> 0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testNullFunction",0,"@Test(expected=MathIllegalArgumentException.class)public void testNullFunction(){UnivariateSolverUtils.bracket(null,1.5,0,2.0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testBadInitial",0,"@Test(expected=MathIllegalArgumentException.class)public void testBadInitial(){UnivariateSolverUtils.bracket(sin,2.5,0,2.0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testBadEndpoints",0,"@Test(expected=MathIllegalArgumentException.class)public void testBadEndpoints(){UnivariateSolverUtils.bracket(sin,1.5,2.0,1.0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testBadMaximumIterations",0,"@Test(expected=MathIllegalArgumentException.class)public void testBadMaximumIterations(){UnivariateSolverUtils.bracket(sin,1.5,0,2.0,0);}"
"org.apache.commons.math3.analysis.solvers.UnivariateSolverUtilsTest.testMisc",0,"@Test public void testMisc(){UnivariateFunction f=new QuinticFunction();double result;result=UnivariateSolverUtils.solve(f,-0.2,0.2);Assert.assertEquals(result,0,1E-8);result=UnivariateSolverUtils.solve(f,-0.1,0.3);Assert.assertEquals(result,0,1E-8);result=UnivariateSolverUtils.solve(f,-0.3,0.45);Assert.assertEquals(result,0,1E-6);result=UnivariateSolverUtils.solve(f,0.3,0.7);Assert.assertEquals(result,0.5,1E-6);result=UnivariateSolverUtils.solve(f,0.2,0.6);Assert.assertEquals(result,0.5,1E-6);result=UnivariateSolverUtils.solve(f,0.05,0.95);Assert.assertEquals(result,0.5,1E-6);result=UnivariateSolverUtils.solve(f,0.85,1.25);Assert.assertEquals(result,1.0,1E-6);result=UnivariateSolverUtils.solve(f,0.8,1.2);Assert.assertEquals(result,1.0,1E-6);result=UnivariateSolverUtils.solve(f,0.85,1.75);Assert.assertEquals(result,1.0,1E-6);result=UnivariateSolverUtils.solve(f,0.55,1.45);Assert.assertEquals(result,1.0,1E-6);result=UnivariateSolverUtils.solve(f,0.85,5);Assert.assertEquals(result,1.0,1E-6);}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(testData2);Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());Assert.assertTrue(""testData is square"",m.isSquare());Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);Assert.assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testCopyFunctions",0,"/** * test copy functions */@Test public void testCopyFunctions(){Array2DRowFieldMatrix<Fraction> m1=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(m1.getData());Assert.assertEquals(m2,m1);Array2DRowFieldMatrix<Fraction> m3=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> m4=new Array2DRowFieldMatrix<Fraction>(m3.getData(),false);Assert.assertEquals(m4,m3);}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testAdd",0,"/** * test add */@Test public void testAdd(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> mInv=new Array2DRowFieldMatrix<Fraction>(testDataInv);FieldMatrix<Fraction> mPlusMInv=m.add(mInv);Fraction[][]sumEntries=mPlusMInv.getData();for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){Assert.assertEquals(testDataPlusInv[row][col],sumEntries[row][col]);}}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testAddFail",0,"/** * test add failure */@Test public void testAddFail(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(testData2);try {m.add(m2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testPlusMinus",0,"/** * test m-n = m + -n */@Test public void testPlusMinus(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(testDataInv);TestUtils.assertEquals(m.subtract(m2),m2.scalarMultiply(new Fraction(-1)).add(m));try {m.subtract(new Array2DRowFieldMatrix<Fraction>(testData2));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testMultiply",0,"/** * test multiply */@Test public void testMultiply(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> mInv=new Array2DRowFieldMatrix<Fraction>(testDataInv);Array2DRowFieldMatrix<Fraction> identity=new Array2DRowFieldMatrix<Fraction>(id);Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(testData2);TestUtils.assertEquals(m.multiply(mInv),identity);TestUtils.assertEquals(mInv.multiply(m),identity);TestUtils.assertEquals(m.multiply(identity),m);TestUtils.assertEquals(identity.multiply(mInv),mInv);TestUtils.assertEquals(m2.multiply(identity),m2);try {m.multiply(new Array2DRowFieldMatrix<Fraction>(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testMultiply2",0,"@Test public void testMultiply2(){FieldMatrix<Fraction> m3=new Array2DRowFieldMatrix<Fraction>(d3);FieldMatrix<Fraction> m4=new Array2DRowFieldMatrix<Fraction>(d4);FieldMatrix<Fraction> m5=new Array2DRowFieldMatrix<Fraction>(d5);TestUtils.assertEquals(m3.multiply(m4),m5);}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testPower",0,"@Test public void testPower(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);FieldMatrix<Fraction> mInv=new Array2DRowFieldMatrix<Fraction>(testDataInv);FieldMatrix<Fraction> mPlusInv=new Array2DRowFieldMatrix<Fraction>(testDataPlusInv);FieldMatrix<Fraction> identity=new Array2DRowFieldMatrix<Fraction>(id);TestUtils.assertEquals(m.power(0),identity);TestUtils.assertEquals(mInv.power(0),identity);TestUtils.assertEquals(mPlusInv.power(0),identity);TestUtils.assertEquals(m.power(1),m);TestUtils.assertEquals(mInv.power(1),mInv);TestUtils.assertEquals(mPlusInv.power(1),mPlusInv);FieldMatrix<Fraction> C1=m.copy();FieldMatrix<Fraction> C2=mInv.copy();FieldMatrix<Fraction> C3=mPlusInv.copy();for (int i=2;i <= 5;++i){C1=C1.multiply(m);C2=C2.multiply(mInv);C3=C3.multiply(mPlusInv);TestUtils.assertEquals(m.power(i),C1);TestUtils.assertEquals(mInv.power(i),C2);TestUtils.assertEquals(mPlusInv.power(i),C3);}try {FieldMatrix<Fraction> mNotSquare=new Array2DRowFieldMatrix<Fraction>(testData2T);mNotSquare.power(2);Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}try {m.power(-1);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testTrace",0,"/** * test trace */@Test public void testTrace(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(id);Assert.assertEquals(""identity trace"",new Fraction(3),m.getTrace());m=new Array2DRowFieldMatrix<Fraction>(testData2);try {m.getTrace();Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testScalarAdd",0,"/** * test sclarAdd */@Test public void testScalarAdd(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);TestUtils.assertEquals(new Array2DRowFieldMatrix<Fraction>(testDataPlus2),m.scalarAdd(new Fraction(2)));}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testOperate",0,"/** * test operate */@Test public void testOperate(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(id);TestUtils.assertEquals(testVector,m.operate(testVector));TestUtils.assertEquals(testVector,m.operate(new ArrayFieldVector<Fraction>(testVector)).getData());m=new Array2DRowFieldMatrix<Fraction>(bigSingular);try {m.operate(testVector);Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testMath209",0,"/** * test issue MATH-209 */@Test public void testMath209(){FieldMatrix<Fraction> a=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2)},{new Fraction(3),new Fraction(4)},{new Fraction(5),new Fraction(6)}},false);Fraction[]b=a.operate(new Fraction[]{new Fraction(1),new Fraction(1)});Assert.assertEquals(a.getRowDimension(),b.length);Assert.assertEquals(new Fraction(3),b[0]);Assert.assertEquals(new Fraction(7),b[1]);Assert.assertEquals(new Fraction(11),b[2]);}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testTranspose",0,"/** * test transpose */@Test public void testTranspose(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);FieldMatrix<Fraction> mIT=new FieldLUDecomposition<Fraction>(m).getSolver().getInverse().transpose();FieldMatrix<Fraction> mTI=new FieldLUDecomposition<Fraction>(m.transpose()).getSolver().getInverse();TestUtils.assertEquals(mIT,mTI);m=new Array2DRowFieldMatrix<Fraction>(testData2);FieldMatrix<Fraction> mt=new Array2DRowFieldMatrix<Fraction>(testData2T);TestUtils.assertEquals(mt,m.transpose());}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testPremultiplyVector",0,"/** * test preMultiply by vector */@Test public void testPremultiplyVector(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);TestUtils.assertEquals(m.preMultiply(testVector),preMultTest);TestUtils.assertEquals(m.preMultiply(new ArrayFieldVector<Fraction>(testVector).getData()),preMultTest);m=new Array2DRowFieldMatrix<Fraction>(bigSingular);try {m.preMultiply(testVector);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testPremultiply",0,"@Test public void testPremultiply(){FieldMatrix<Fraction> m3=new Array2DRowFieldMatrix<Fraction>(d3);FieldMatrix<Fraction> m4=new Array2DRowFieldMatrix<Fraction>(d4);FieldMatrix<Fraction> m5=new Array2DRowFieldMatrix<Fraction>(d5);TestUtils.assertEquals(m4.preMultiply(m3),m5);Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> mInv=new Array2DRowFieldMatrix<Fraction>(testDataInv);Array2DRowFieldMatrix<Fraction> identity=new Array2DRowFieldMatrix<Fraction>(id);TestUtils.assertEquals(m.preMultiply(mInv),identity);TestUtils.assertEquals(mInv.preMultiply(m),identity);TestUtils.assertEquals(m.preMultiply(identity),m);TestUtils.assertEquals(identity.preMultiply(mInv),mInv);try {m.preMultiply(new Array2DRowFieldMatrix<Fraction>(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetVectors",0,"@Test public void testGetVectors(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);TestUtils.assertEquals(m.getRow(0),testDataRow1);TestUtils.assertEquals(m.getColumn(2),testDataCol3);try {m.getRow(10);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetEntry",0,"@Test public void testGetEntry(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Assert.assertEquals(""get entry"",m.getEntry(0,1),new Fraction(2));try {m.getEntry(10,4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testExamples",0,"/** * test examples in user guide */@Test public void testExamples(){Fraction[][]matrixData={{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(5),new Fraction(3)}};FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(matrixData);Fraction[][]matrixData2={{new Fraction(1),new Fraction(2)},{new Fraction(2),new Fraction(5)},{new Fraction(1),new Fraction(7)}};FieldMatrix<Fraction> n=new Array2DRowFieldMatrix<Fraction>(matrixData2);FieldMatrix<Fraction> p=m.multiply(n);Assert.assertEquals(2,p.getRowDimension());Assert.assertEquals(2,p.getColumnDimension());FieldMatrix<Fraction> pInverse=new FieldLUDecomposition<Fraction>(p).getSolver().getInverse();Assert.assertEquals(2,pInverse.getRowDimension());Assert.assertEquals(2,pInverse.getColumnDimension());Fraction[][]coefficientsData={{new Fraction(2),new Fraction(3),new Fraction(-2)},{new Fraction(-1),new Fraction(7),new Fraction(6)},{new Fraction(4),new Fraction(-3),new Fraction(-5)}};FieldMatrix<Fraction> coefficients=new Array2DRowFieldMatrix<Fraction>(coefficientsData);Fraction[]constants={new Fraction(1),new Fraction(-2),new Fraction(1)};Fraction[]solution;solution=new FieldLUDecomposition<Fraction>(coefficients).getSolver().solve(new ArrayFieldVector<Fraction>(constants,false)).toArray();Assert.assertEquals(new Fraction(2).multiply(solution[0]).add(new Fraction(3).multiply(solution[1])).subtract(new Fraction(2).multiply(solution[2])),constants[0]);Assert.assertEquals(new Fraction(-1).multiply(solution[0]).add(new Fraction(7).multiply(solution[1])).add(new Fraction(6).multiply(solution[2])),constants[1]);Assert.assertEquals(new Fraction(4).multiply(solution[0]).subtract(new Fraction(3).multiply(solution[1])).subtract(new Fraction(5).multiply(solution[2])),constants[2]);}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetSubMatrix",0,"@Test public void testGetSubMatrix(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);checkGetSubMatrix(m,subRows23Cols00,2,3,0,0);checkGetSubMatrix(m,subRows00Cols33,0,0,3,3);checkGetSubMatrix(m,subRows01Cols23,0,1,2,3);checkGetSubMatrix(m,subRows02Cols13,new int[]{0,2},new int[]{1,3});checkGetSubMatrix(m,subRows03Cols12,new int[]{0,3},new int[]{1,2});checkGetSubMatrix(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3});checkGetSubMatrix(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3});checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkGetSubMatrix(m,null,1,0,2,4);checkGetSubMatrix(m,null,-1,1,2,2);checkGetSubMatrix(m,null,1,0,2,2);checkGetSubMatrix(m,null,1,0,2,4);checkGetSubMatrix(m,null,new int[]{},new int[]{0});checkGetSubMatrix(m,null,new int[]{0},new int[]{4});}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testCopySubMatrix",0,"@Test public void testCopySubMatrix(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);checkCopy(m,subRows23Cols00,2,3,0,0);checkCopy(m,subRows00Cols33,0,0,3,3);checkCopy(m,subRows01Cols23,0,1,2,3);checkCopy(m,subRows02Cols13,new int[]{0,2},new int[]{1,3});checkCopy(m,subRows03Cols12,new int[]{0,3},new int[]{1,2});checkCopy(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3});checkCopy(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3});checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1});checkCopy(m,null,1,0,2,4);checkCopy(m,null,-1,1,2,2);checkCopy(m,null,1,0,2,2);checkCopy(m,null,1,0,2,4);checkCopy(m,null,new int[]{},new int[]{0});checkCopy(m,null,new int[]{0},new int[]{4});}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetRowMatrix",0,"@Test public void testGetRowMatrix(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mRow0=new Array2DRowFieldMatrix<Fraction>(subRow0);FieldMatrix<Fraction> mRow3=new Array2DRowFieldMatrix<Fraction>(subRow3);Assert.assertEquals(""Row0"",mRow0,m.getRowMatrix(0));Assert.assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetRowMatrix",0,"@Test public void testSetRowMatrix(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mRow3=new Array2DRowFieldMatrix<Fraction>(subRow3);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowMatrix(0,mRow3);Assert.assertEquals(mRow3,m.getRowMatrix(0));try {m.setRowMatrix(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetColumnMatrix",0,"@Test public void testGetColumnMatrix(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mColumn1=new Array2DRowFieldMatrix<Fraction>(subColumn1);FieldMatrix<Fraction> mColumn3=new Array2DRowFieldMatrix<Fraction>(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetColumnMatrix",0,"@Test public void testSetColumnMatrix(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldMatrix<Fraction> mColumn3=new Array2DRowFieldMatrix<Fraction>(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnMatrix(1));m.setColumnMatrix(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnMatrix(1));try {m.setColumnMatrix(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetRowVector",0,"@Test public void testGetRowVector(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mRow0=new ArrayFieldVector<Fraction>(subRow0[0]);FieldVector<Fraction> mRow3=new ArrayFieldVector<Fraction>(subRow3[0]);Assert.assertEquals(""Row0"",mRow0,m.getRowVector(0));Assert.assertEquals(""Row3"",mRow3,m.getRowVector(3));try {m.getRowVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetRowVector",0,"@Test public void testSetRowVector(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mRow3=new ArrayFieldVector<Fraction>(subRow3[0]);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowVector(0,mRow3);Assert.assertEquals(mRow3,m.getRowVector(0));try {m.setRowVector(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowVector(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetColumnVector",0,"@Test public void testGetColumnVector(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mColumn1=columnToVector(subColumn1);FieldVector<Fraction> mColumn3=columnToVector(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnVector(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetColumnVector",0,"@Test public void testSetColumnVector(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);FieldVector<Fraction> mColumn3=columnToVector(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnVector(1));m.setColumnVector(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnVector(1));try {m.setColumnVector(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnVector(0,new ArrayFieldVector<Fraction>(FractionField.getInstance(),5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetRow",0,"@Test public void testGetRow(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);checkArrays(subRow0[0],m.getRow(0));checkArrays(subRow3[0],m.getRow(3));try {m.getRow(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRow(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetRow",0,"@Test public void testSetRow(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);Assert.assertTrue(subRow3[0][0]!= m.getRow(0)[0]);m.setRow(0,subRow3[0]);checkArrays(subRow3[0],m.getRow(0));try {m.setRow(-1,subRow3[0]);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRow(0,new Fraction[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testGetColumn",0,"@Test public void testGetColumn(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);Fraction[]mColumn1=columnToArray(subColumn1);Fraction[]mColumn3=columnToArray(subColumn3);checkArrays(mColumn1,m.getColumn(1));checkArrays(mColumn3,m.getColumn(3));try {m.getColumn(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetColumn",0,"@Test public void testSetColumn(){FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(subTestData);Fraction[]mColumn3=columnToArray(subColumn3);Assert.assertTrue(mColumn3[0]!= m.getColumn(1)[0]);m.setColumn(1,mColumn3);checkArrays(mColumn3,m.getColumn(1));try {m.setColumn(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumn(0,new Fraction[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Array2DRowFieldMatrix<Fraction> m1=(Array2DRowFieldMatrix<Fraction>)m.copy();Array2DRowFieldMatrix<Fraction> mt=(Array2DRowFieldMatrix<Fraction>)m.transpose();Assert.assertTrue(m.hashCode()!= mt.hashCode());Assert.assertEquals(m.hashCode(),m1.hashCode());Assert.assertEquals(m,m);Assert.assertEquals(m,m1);Assert.assertFalse(m.equals(null));Assert.assertFalse(m.equals(mt));Assert.assertFalse(m.equals(new Array2DRowFieldMatrix<Fraction>(bigSingular)));}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testToString",0,"@Test public void testToString(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Assert.assertEquals(""Array2DRowFieldMatrix{{1,2,3},{2,5,3},{1,0,8}}"",m.toString());m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance());Assert.assertEquals(""Array2DRowFieldMatrix{}"",m.toString());}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);m.setSubMatrix(detData2,1,1);FieldMatrix<Fraction> expected=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(2),new Fraction(1),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});Assert.assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(1),new Fraction(3),new Fraction(3)},{new Fraction(2),new Fraction(4),new Fraction(3)},{new Fraction(1),new Fraction(2),new Fraction(4)}});Assert.assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{new Fraction(3),new Fraction(4),new Fraction(5)},{new Fraction(4),new Fraction(7),new Fraction(5)},{new Fraction(3),new Fraction(2),new Fraction(10)}});Assert.assertEquals(expected,m);try {m.setSubMatrix(testData,1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,-1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,1,-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(null,1,1);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException e){}Array2DRowFieldMatrix<Fraction> m2=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance());try {m2.setSubMatrix(testData,0,1);Assert.fail(""expecting MathIllegalStateException"");}catch(MathIllegalStateException e){}try {m2.setSubMatrix(testData,1,0);Assert.fail(""expecting MathIllegalStateException"");}catch(MathIllegalStateException e){}try {m.setSubMatrix(new Fraction[][]{{new Fraction(1)},{new Fraction(2),new Fraction(3)}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new Fraction[][]{{}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testWalk",0,"@Test public void testWalk(){int rows=150;int columns=75;FieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInRowOrder(new SetVisitor());GetVisitor getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInRowOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInColumnOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInColumnOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(new Fraction(0),m.getEntry(i,0));Assert.assertEquals(new Fraction(0),m.getEntry(i,columns - 1));}for (int j=0;j < columns;++j){Assert.assertEquals(new Fraction(0),m.getEntry(0,j));Assert.assertEquals(new Fraction(0),m.getEntry(rows - 1,j));}}"
"org.apache.commons.math3.linear.FieldMatrixImplTest.testSerial",0,"@Test public void testSerial(){Array2DRowFieldMatrix<Fraction> m=new Array2DRowFieldMatrix<Fraction>(testData);Assert.assertEquals(m,TestUtils.serializeAndRecover(m));}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.1);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince54Integrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince54Integrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 135000);Assert.assertTrue(bos.size()< 145000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 7.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54StepInterpolatorTest.checkClone",0,"@Test public void checkClone()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;DormandPrince54Integrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast)throws MaxCountExceededException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=FastMath.abs(tB - tA)/ 2;Assert.assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);Assert.assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);Assert.assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){Assert.assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public void init(double t0,double[]y0,double t){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.linear.CholeskySolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){DecompositionSolver solver=new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.CholeskySolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){DecompositionSolver solver=new CholeskyDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{78,-13,1},{414,-62,-1},{1312,-202,-37},{2989,-542,145},{5510,-1465,201}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{1,0,1},{0,1,1},{2,1,-4},{2,2,2},{5,-3,0}});Assert.assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),1.0e-13);for (int i=0;i < b.getColumnDimension();++i){Assert.assertEquals(0,solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){ArrayRealVectorTest.RealVectorTestImpl v=new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));Assert.assertEquals(0,solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}}"
"org.apache.commons.math3.linear.CholeskySolverTest.testDeterminant",0,"/** * test determinant */@Test public void testDeterminant(){Assert.assertEquals(7290000.0,getDeterminant(MatrixUtils.createRealMatrix(testData)),1.0e-15);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.test0Choose0",0,"/** * Verify that b(0,0)= 1 */@Test public void test0Choose0(){Assert.assertEquals(ArithmeticUtils.binomialCoefficientDouble(0,0),1d,0);Assert.assertEquals(ArithmeticUtils.binomialCoefficientLog(0,0),0d,0);Assert.assertEquals(ArithmeticUtils.binomialCoefficient(0,0),1);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testAddAndCheck",0,"@Test public void testAddAndCheck(){int big=Integer.MAX_VALUE;int bigNeg=Integer.MIN_VALUE;Assert.assertEquals(big,ArithmeticUtils.addAndCheck(big,0));try {ArithmeticUtils.addAndCheck(big,1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {ArithmeticUtils.addAndCheck(bigNeg,-1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testAddAndCheckLong",0,"@Test public void testAddAndCheckLong(){long max=Long.MAX_VALUE;long min=Long.MIN_VALUE;Assert.assertEquals(max,ArithmeticUtils.addAndCheck(max,0L));Assert.assertEquals(min,ArithmeticUtils.addAndCheck(min,0L));Assert.assertEquals(max,ArithmeticUtils.addAndCheck(0L,max));Assert.assertEquals(min,ArithmeticUtils.addAndCheck(0L,min));Assert.assertEquals(1,ArithmeticUtils.addAndCheck(-1L,2L));Assert.assertEquals(1,ArithmeticUtils.addAndCheck(2L,-1L));Assert.assertEquals(-3,ArithmeticUtils.addAndCheck(-2L,-1L));Assert.assertEquals(min,ArithmeticUtils.addAndCheck(min + 1,-1L));testAddAndCheckLongFailure(max,1L);testAddAndCheckLongFailure(min,-1L);testAddAndCheckLongFailure(1L,max);testAddAndCheckLongFailure(-1L,min);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testBinomialCoefficient",0,"@Test public void testBinomialCoefficient(){long[]bcoef5={1,5,10,10,5,1};long[]bcoef6={1,6,15,20,15,6,1};for (int i=0;i < 6;i++){Assert.assertEquals(""5 choose "" + i,bcoef5[i],ArithmeticUtils.binomialCoefficient(5,i));}for (int i=0;i < 7;i++){Assert.assertEquals(""6 choose "" + i,bcoef6[i],ArithmeticUtils.binomialCoefficient(6,i));}for (int n=1;n < 10;n++){for (int k=0;k <= n;k++){Assert.assertEquals(n + "" choose "" + k,binomialCoefficient(n,k),ArithmeticUtils.binomialCoefficient(n,k));Assert.assertEquals(n + "" choose "" + k,binomialCoefficient(n,k),ArithmeticUtils.binomialCoefficientDouble(n,k),Double.MIN_VALUE);Assert.assertEquals(n + "" choose "" + k,FastMath.log(binomialCoefficient(n,k)),ArithmeticUtils.binomialCoefficientLog(n,k),10E-12);}}int[]n={34,66,100,1500,1500};int[]k={17,33,10,1500 - 4,4};for (int i=0;i < n.length;i++){long expected=binomialCoefficient(n[i],k[i]);Assert.assertEquals(n[i]+ "" choose "" + k[i],expected,ArithmeticUtils.binomialCoefficient(n[i],k[i]));Assert.assertEquals(n[i]+ "" choose "" + k[i],expected,ArithmeticUtils.binomialCoefficientDouble(n[i],k[i]),0.0);Assert.assertEquals(""log("" + n[i]+ "" choose ""+ k[i]+ "")"",FastMath.log(expected),ArithmeticUtils.binomialCoefficientLog(n[i],k[i]),0.0);}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testBinomialCoefficientFail",0,"@Test public void testBinomialCoefficientFail(){try {ArithmeticUtils.binomialCoefficient(4,5);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.binomialCoefficientDouble(4,5);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.binomialCoefficientLog(4,5);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.binomialCoefficient(-1,-2);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.binomialCoefficientDouble(-1,-2);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.binomialCoefficientLog(-1,-2);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.binomialCoefficient(67,30);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {ArithmeticUtils.binomialCoefficient(67,34);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}double x=ArithmeticUtils.binomialCoefficientDouble(1030,515);Assert.assertTrue(""expecting infinite binomial coefficient"",Double.isInfinite(x));}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testBinomialCoefficientLarge",0,"/** * Tests correctness for large n and sharpness of upper bound in API doc JIRA: MATH-241*/@Test public void testBinomialCoefficientLarge()throws Exception {for (int n=0;n <= 200;n++){for (int k=0;k <= n;k++){long ourResult=-1;long exactResult=-1;boolean shouldThrow=false;boolean didThrow=false;try {ourResult=ArithmeticUtils.binomialCoefficient(n,k);}catch(MathArithmeticException ex){didThrow=true;}try {exactResult=binomialCoefficient(n,k);}catch(MathArithmeticException ex){shouldThrow=true;}Assert.assertEquals(n + "" choose "" + k,exactResult,ourResult);Assert.assertEquals(n + "" choose "" + k,shouldThrow,didThrow);Assert.assertTrue(n + "" choose "" + k,(n > 66 || !didThrow));if (!shouldThrow && exactResult > 1){Assert.assertEquals(n + "" choose "" + k,1.,ArithmeticUtils.binomialCoefficientDouble(n,k)/ exactResult,1e-10);Assert.assertEquals(n + "" choose "" + k,1,ArithmeticUtils.binomialCoefficientLog(n,k)/ FastMath.log(exactResult),1e-10);}}}long ourResult=ArithmeticUtils.binomialCoefficient(300,3);long exactResult=binomialCoefficient(300,3);Assert.assertEquals(exactResult,ourResult);ourResult=ArithmeticUtils.binomialCoefficient(700,697);exactResult=binomialCoefficient(700,697);Assert.assertEquals(exactResult,ourResult);try {ArithmeticUtils.binomialCoefficient(700,300);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}int n=10000;ourResult=ArithmeticUtils.binomialCoefficient(n,3);exactResult=binomialCoefficient(n,3);Assert.assertEquals(exactResult,ourResult);Assert.assertEquals(1,ArithmeticUtils.binomialCoefficientDouble(n,3)/ exactResult,1e-10);Assert.assertEquals(1,ArithmeticUtils.binomialCoefficientLog(n,3)/ FastMath.log(exactResult),1e-10);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testFactorial",0,"@Test public void testFactorial(){for (int i=1;i < 21;i++){Assert.assertEquals(i + ""! "",factorial(i),ArithmeticUtils.factorial(i));Assert.assertEquals(i + ""! "",factorial(i),ArithmeticUtils.factorialDouble(i),Double.MIN_VALUE);Assert.assertEquals(i + ""! "",FastMath.log(factorial(i)),ArithmeticUtils.factorialLog(i),10E-12);}Assert.assertEquals(""0"",1,ArithmeticUtils.factorial(0));Assert.assertEquals(""0"",1.0d,ArithmeticUtils.factorialDouble(0),1E-14);Assert.assertEquals(""0"",0.0d,ArithmeticUtils.factorialLog(0),1E-14);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testFactorialFail",0,"@Test public void testFactorialFail(){try {ArithmeticUtils.factorial(-1);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.factorialDouble(-1);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.factorialLog(-1);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {ArithmeticUtils.factorial(21);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}Assert.assertTrue(""expecting infinite factorial value"",Double.isInfinite(ArithmeticUtils.factorialDouble(171)));}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testGcd",0,"@Test public void testGcd(){int a=30;int b=50;int c=77;Assert.assertEquals(0,ArithmeticUtils.gcd(0,0));Assert.assertEquals(b,ArithmeticUtils.gcd(0,b));Assert.assertEquals(a,ArithmeticUtils.gcd(a,0));Assert.assertEquals(b,ArithmeticUtils.gcd(0,-b));Assert.assertEquals(a,ArithmeticUtils.gcd(-a,0));Assert.assertEquals(10,ArithmeticUtils.gcd(a,b));Assert.assertEquals(10,ArithmeticUtils.gcd(-a,b));Assert.assertEquals(10,ArithmeticUtils.gcd(a,-b));Assert.assertEquals(10,ArithmeticUtils.gcd(-a,-b));Assert.assertEquals(1,ArithmeticUtils.gcd(a,c));Assert.assertEquals(1,ArithmeticUtils.gcd(-a,c));Assert.assertEquals(1,ArithmeticUtils.gcd(a,-c));Assert.assertEquals(1,ArithmeticUtils.gcd(-a,-c));Assert.assertEquals(3 * (1 << 15),ArithmeticUtils.gcd(3 * (1 << 20),9 * (1 << 15)));Assert.assertEquals(Integer.MAX_VALUE,ArithmeticUtils.gcd(Integer.MAX_VALUE,0));Assert.assertEquals(Integer.MAX_VALUE,ArithmeticUtils.gcd(-Integer.MAX_VALUE,0));Assert.assertEquals(1 << 30,ArithmeticUtils.gcd(1 << 30,-Integer.MIN_VALUE));try {ArithmeticUtils.gcd(Integer.MIN_VALUE,0);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.gcd(0,Integer.MIN_VALUE);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.gcd(Integer.MIN_VALUE,Integer.MIN_VALUE);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException expected){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testGcdConsistency",0,"@Test public void testGcdConsistency(){int[]primeList={19,23,53,67,73,79,101,103,111,131};ArrayList<Integer> primes=new ArrayList<Integer>();for (int i=0;i < primeList.length;i++){primes.add(Integer.valueOf(primeList[i]));}RandomDataImpl randomData=new RandomDataImpl();for (int i=0;i < 20;i++){Object[]sample=randomData.nextSample(primes,4);int p1=((Integer)sample[0]).intValue();int p2=((Integer)sample[1]).intValue();int p3=((Integer)sample[2]).intValue();int p4=((Integer)sample[3]).intValue();int i1=p1 * p2 * p3;int i2=p1 * p2 * p4;int gcd=p1 * p2;Assert.assertEquals(gcd,ArithmeticUtils.gcd(i1,i2));long l1=i1;long l2=i2;Assert.assertEquals(gcd,ArithmeticUtils.gcd(l1,l2));}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testGcdLong",0,"@Test public void testGcdLong(){long a=30;long b=50;long c=77;Assert.assertEquals(0,ArithmeticUtils.gcd(0L,0));Assert.assertEquals(b,ArithmeticUtils.gcd(0,b));Assert.assertEquals(a,ArithmeticUtils.gcd(a,0));Assert.assertEquals(b,ArithmeticUtils.gcd(0,-b));Assert.assertEquals(a,ArithmeticUtils.gcd(-a,0));Assert.assertEquals(10,ArithmeticUtils.gcd(a,b));Assert.assertEquals(10,ArithmeticUtils.gcd(-a,b));Assert.assertEquals(10,ArithmeticUtils.gcd(a,-b));Assert.assertEquals(10,ArithmeticUtils.gcd(-a,-b));Assert.assertEquals(1,ArithmeticUtils.gcd(a,c));Assert.assertEquals(1,ArithmeticUtils.gcd(-a,c));Assert.assertEquals(1,ArithmeticUtils.gcd(a,-c));Assert.assertEquals(1,ArithmeticUtils.gcd(-a,-c));Assert.assertEquals(3L * (1L << 45),ArithmeticUtils.gcd(3L * (1L << 50),9L * (1L << 45)));Assert.assertEquals(1L << 45,ArithmeticUtils.gcd(1L << 45,Long.MIN_VALUE));Assert.assertEquals(Long.MAX_VALUE,ArithmeticUtils.gcd(Long.MAX_VALUE,0L));Assert.assertEquals(Long.MAX_VALUE,ArithmeticUtils.gcd(-Long.MAX_VALUE,0L));Assert.assertEquals(1,ArithmeticUtils.gcd(60247241209L,153092023L));try {ArithmeticUtils.gcd(Long.MIN_VALUE,0);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.gcd(0,Long.MIN_VALUE);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.gcd(Long.MIN_VALUE,Long.MIN_VALUE);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException expected){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testLcm",0,"@Test public void testLcm(){int a=30;int b=50;int c=77;Assert.assertEquals(0,ArithmeticUtils.lcm(0,b));Assert.assertEquals(0,ArithmeticUtils.lcm(a,0));Assert.assertEquals(b,ArithmeticUtils.lcm(1,b));Assert.assertEquals(a,ArithmeticUtils.lcm(a,1));Assert.assertEquals(150,ArithmeticUtils.lcm(a,b));Assert.assertEquals(150,ArithmeticUtils.lcm(-a,b));Assert.assertEquals(150,ArithmeticUtils.lcm(a,-b));Assert.assertEquals(150,ArithmeticUtils.lcm(-a,-b));Assert.assertEquals(2310,ArithmeticUtils.lcm(a,c));Assert.assertEquals((1 << 20)* 15,ArithmeticUtils.lcm((1 << 20)* 3,(1 << 20)* 5));Assert.assertEquals(0,ArithmeticUtils.lcm(0,0));try {ArithmeticUtils.lcm(Integer.MIN_VALUE,1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.lcm(Integer.MIN_VALUE,1 << 20);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.lcm(Integer.MAX_VALUE,Integer.MAX_VALUE - 1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException expected){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testLcmLong",0,"@Test public void testLcmLong(){long a=30;long b=50;long c=77;Assert.assertEquals(0,ArithmeticUtils.lcm(0,b));Assert.assertEquals(0,ArithmeticUtils.lcm(a,0));Assert.assertEquals(b,ArithmeticUtils.lcm(1,b));Assert.assertEquals(a,ArithmeticUtils.lcm(a,1));Assert.assertEquals(150,ArithmeticUtils.lcm(a,b));Assert.assertEquals(150,ArithmeticUtils.lcm(-a,b));Assert.assertEquals(150,ArithmeticUtils.lcm(a,-b));Assert.assertEquals(150,ArithmeticUtils.lcm(-a,-b));Assert.assertEquals(2310,ArithmeticUtils.lcm(a,c));Assert.assertEquals(Long.MAX_VALUE,ArithmeticUtils.lcm(60247241209L,153092023L));Assert.assertEquals((1L << 50)* 15,ArithmeticUtils.lcm((1L << 45)* 3,(1L << 50)* 5));Assert.assertEquals(0L,ArithmeticUtils.lcm(0L,0L));try {ArithmeticUtils.lcm(Long.MIN_VALUE,1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException expected){}try {ArithmeticUtils.lcm(Long.MIN_VALUE,1 << 20);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException expected){}Assert.assertEquals((long)Integer.MAX_VALUE * (Integer.MAX_VALUE - 1),ArithmeticUtils.lcm((long)Integer.MAX_VALUE,Integer.MAX_VALUE - 1));try {ArithmeticUtils.lcm(Long.MAX_VALUE,Long.MAX_VALUE - 1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException expected){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testMulAndCheck",0,"@Test public void testMulAndCheck(){int big=Integer.MAX_VALUE;int bigNeg=Integer.MIN_VALUE;Assert.assertEquals(big,ArithmeticUtils.mulAndCheck(big,1));try {ArithmeticUtils.mulAndCheck(big,2);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {ArithmeticUtils.mulAndCheck(bigNeg,2);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testMulAndCheckLong",0,"@Test public void testMulAndCheckLong(){long max=Long.MAX_VALUE;long min=Long.MIN_VALUE;Assert.assertEquals(max,ArithmeticUtils.mulAndCheck(max,1L));Assert.assertEquals(min,ArithmeticUtils.mulAndCheck(min,1L));Assert.assertEquals(0L,ArithmeticUtils.mulAndCheck(max,0L));Assert.assertEquals(0L,ArithmeticUtils.mulAndCheck(min,0L));Assert.assertEquals(max,ArithmeticUtils.mulAndCheck(1L,max));Assert.assertEquals(min,ArithmeticUtils.mulAndCheck(1L,min));Assert.assertEquals(0L,ArithmeticUtils.mulAndCheck(0L,max));Assert.assertEquals(0L,ArithmeticUtils.mulAndCheck(0L,min));Assert.assertEquals(1L,ArithmeticUtils.mulAndCheck(-1L,-1L));Assert.assertEquals(min,ArithmeticUtils.mulAndCheck(min / 2,2));testMulAndCheckLongFailure(max,2L);testMulAndCheckLongFailure(2L,max);testMulAndCheckLongFailure(min,2L);testMulAndCheckLongFailure(2L,min);testMulAndCheckLongFailure(min,-1L);testMulAndCheckLongFailure(-1L,min);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testSubAndCheck",0,"@Test public void testSubAndCheck(){int big=Integer.MAX_VALUE;int bigNeg=Integer.MIN_VALUE;Assert.assertEquals(big,ArithmeticUtils.subAndCheck(big,0));Assert.assertEquals(bigNeg + 1,ArithmeticUtils.subAndCheck(bigNeg,-1));Assert.assertEquals(-1,ArithmeticUtils.subAndCheck(bigNeg,-big));try {ArithmeticUtils.subAndCheck(big,-1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}try {ArithmeticUtils.subAndCheck(bigNeg,1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testSubAndCheckErrorMessage",0,"@Test public void testSubAndCheckErrorMessage(){int big=Integer.MAX_VALUE;try {ArithmeticUtils.subAndCheck(big,-1);Assert.fail(""Expecting MathArithmeticException"");}catch(MathArithmeticException ex){Assert.assertTrue(ex.getMessage().length()> 1);}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testSubAndCheckLong",0,"@Test public void testSubAndCheckLong(){long max=Long.MAX_VALUE;long min=Long.MIN_VALUE;Assert.assertEquals(max,ArithmeticUtils.subAndCheck(max,0));Assert.assertEquals(min,ArithmeticUtils.subAndCheck(min,0));Assert.assertEquals(-max,ArithmeticUtils.subAndCheck(0,max));Assert.assertEquals(min + 1,ArithmeticUtils.subAndCheck(min,-1));Assert.assertEquals(-1,ArithmeticUtils.subAndCheck(-max - 1,-max));Assert.assertEquals(max,ArithmeticUtils.subAndCheck(-1,-1 - max));testSubAndCheckLongFailure(0L,min);testSubAndCheckLongFailure(max,-1L);testSubAndCheckLongFailure(min,1L);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testPow",0,"@Test public void testPow(){Assert.assertEquals(1801088541,ArithmeticUtils.pow(21,7));Assert.assertEquals(1,ArithmeticUtils.pow(21,0));try {ArithmeticUtils.pow(21,-7);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}Assert.assertEquals(1801088541,ArithmeticUtils.pow(21,7l));Assert.assertEquals(1,ArithmeticUtils.pow(21,0l));try {ArithmeticUtils.pow(21,-7l);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}Assert.assertEquals(1801088541l,ArithmeticUtils.pow(21l,7));Assert.assertEquals(1l,ArithmeticUtils.pow(21l,0));try {ArithmeticUtils.pow(21l,-7);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}Assert.assertEquals(1801088541l,ArithmeticUtils.pow(21l,7l));Assert.assertEquals(1l,ArithmeticUtils.pow(21l,0l));try {ArithmeticUtils.pow(21l,-7l);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}BigInteger twentyOne=BigInteger.valueOf(21l);Assert.assertEquals(BigInteger.valueOf(1801088541l),ArithmeticUtils.pow(twentyOne,7));Assert.assertEquals(BigInteger.ONE,ArithmeticUtils.pow(twentyOne,0));try {ArithmeticUtils.pow(twentyOne,-7);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}Assert.assertEquals(BigInteger.valueOf(1801088541l),ArithmeticUtils.pow(twentyOne,7l));Assert.assertEquals(BigInteger.ONE,ArithmeticUtils.pow(twentyOne,0l));try {ArithmeticUtils.pow(twentyOne,-7l);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}Assert.assertEquals(BigInteger.valueOf(1801088541l),ArithmeticUtils.pow(twentyOne,BigInteger.valueOf(7l)));Assert.assertEquals(BigInteger.ONE,ArithmeticUtils.pow(twentyOne,BigInteger.ZERO));try {ArithmeticUtils.pow(twentyOne,BigInteger.valueOf(-7l));Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}BigInteger bigOne=new BigInteger(""1543786922199448028351389769265814882661837148"" + ""4763915343722775611762713982220306372888519211"" + ""560905579993523402015636025177602059044911261"");Assert.assertEquals(bigOne,ArithmeticUtils.pow(twentyOne,103));Assert.assertEquals(bigOne,ArithmeticUtils.pow(twentyOne,103l));Assert.assertEquals(bigOne,ArithmeticUtils.pow(twentyOne,BigInteger.valueOf(103l)));}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testIsPowerOfTwo",0,"@Test public void testIsPowerOfTwo(){final int n=1025;final boolean[]expected=new boolean[n];Arrays.fill(expected,false);for (int i=1;i < expected.length;i*=2){expected[i]=true;}for (int i=0;i < expected.length;i++){final boolean actual=ArithmeticUtils.isPowerOfTwo(i);Assert.assertTrue(Integer.toString(i),actual == expected[i]);}}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testStirlingS2",0,"@Test public void testStirlingS2(){Assert.assertEquals(1,ArithmeticUtils.stirlingS2(0,0));for (int n=1;n < 30;++n){Assert.assertEquals(0,ArithmeticUtils.stirlingS2(n,0));Assert.assertEquals(1,ArithmeticUtils.stirlingS2(n,1));if (n > 2){Assert.assertEquals((1l << (n - 1))- 1l,ArithmeticUtils.stirlingS2(n,2));Assert.assertEquals(ArithmeticUtils.binomialCoefficient(n,2),ArithmeticUtils.stirlingS2(n,n - 1));}Assert.assertEquals(1,ArithmeticUtils.stirlingS2(n,n));}Assert.assertEquals(536870911l,ArithmeticUtils.stirlingS2(30,2));Assert.assertEquals(576460752303423487l,ArithmeticUtils.stirlingS2(60,2));Assert.assertEquals(25,ArithmeticUtils.stirlingS2(5,3));Assert.assertEquals(90,ArithmeticUtils.stirlingS2(6,3));Assert.assertEquals(65,ArithmeticUtils.stirlingS2(6,4));Assert.assertEquals(301,ArithmeticUtils.stirlingS2(7,3));Assert.assertEquals(350,ArithmeticUtils.stirlingS2(7,4));Assert.assertEquals(140,ArithmeticUtils.stirlingS2(7,5));Assert.assertEquals(966,ArithmeticUtils.stirlingS2(8,3));Assert.assertEquals(1701,ArithmeticUtils.stirlingS2(8,4));Assert.assertEquals(1050,ArithmeticUtils.stirlingS2(8,5));Assert.assertEquals(266,ArithmeticUtils.stirlingS2(8,6));Assert.assertEquals(3025,ArithmeticUtils.stirlingS2(9,3));Assert.assertEquals(7770,ArithmeticUtils.stirlingS2(9,4));Assert.assertEquals(6951,ArithmeticUtils.stirlingS2(9,5));Assert.assertEquals(2646,ArithmeticUtils.stirlingS2(9,6));Assert.assertEquals(462,ArithmeticUtils.stirlingS2(9,7));Assert.assertEquals(9330,ArithmeticUtils.stirlingS2(10,3));Assert.assertEquals(34105,ArithmeticUtils.stirlingS2(10,4));Assert.assertEquals(42525,ArithmeticUtils.stirlingS2(10,5));Assert.assertEquals(22827,ArithmeticUtils.stirlingS2(10,6));Assert.assertEquals(5880,ArithmeticUtils.stirlingS2(10,7));Assert.assertEquals(750,ArithmeticUtils.stirlingS2(10,8));}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testStirlingS2NegativeN",0,"@Test(expected=NotPositiveException.class)public void testStirlingS2NegativeN(){ArithmeticUtils.stirlingS2(3,-1);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testStirlingS2LargeK",0,"@Test(expected=NumberIsTooLargeException.class)public void testStirlingS2LargeK(){ArithmeticUtils.stirlingS2(3,4);}"
"org.apache.commons.math3.util.ArithmeticUtilsTest.testStirlingS2Overflow",0,"@Test(expected=MathArithmeticException.class)public void testStirlingS2Overflow(){ArithmeticUtils.stirlingS2(26,9);}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testCluster",0,"@Test public void testCluster(){final EuclideanDoublePoint[]points=new EuclideanDoublePoint[]{new EuclideanDoublePoint(new double[]{83.08303244924173,58.83387754182331}),new EuclideanDoublePoint(new double[]{45.05445510940626,23.469642649637535}),new EuclideanDoublePoint(new double[]{14.96417921432294,69.0264096390456}),new EuclideanDoublePoint(new double[]{73.53189604333602,34.896145021310076}),new EuclideanDoublePoint(new double[]{73.28498173551634,33.96860806993209}),new EuclideanDoublePoint(new double[]{73.45828098873608,33.92584423092194}),new EuclideanDoublePoint(new double[]{73.9657889183145,35.73191006924026}),new EuclideanDoublePoint(new double[]{74.0074097183533,36.81735596177168}),new EuclideanDoublePoint(new double[]{73.41247541410848,34.27314856695011}),new EuclideanDoublePoint(new double[]{73.9156256353017,36.83206791547127}),new EuclideanDoublePoint(new double[]{74.81499205809087,37.15682749846019}),new EuclideanDoublePoint(new double[]{74.03144880081527,37.57399178552441}),new EuclideanDoublePoint(new double[]{74.51870941207744,38.674258946906775}),new EuclideanDoublePoint(new double[]{74.50754595105536,35.58903978415765}),new EuclideanDoublePoint(new double[]{74.51322752749547,36.030572259100154}),new EuclideanDoublePoint(new double[]{59.27900996617973,46.41091720294207}),new EuclideanDoublePoint(new double[]{59.73744793841615,46.20015558367595}),new EuclideanDoublePoint(new double[]{58.81134076672606,45.71150126331486}),new EuclideanDoublePoint(new double[]{58.52225539437495,47.416083617601544}),new EuclideanDoublePoint(new double[]{58.218626647023484,47.36228902172297}),new EuclideanDoublePoint(new double[]{60.27139669447206,46.606106348801404}),new EuclideanDoublePoint(new double[]{60.894962462363765,46.976924697402865}),new EuclideanDoublePoint(new double[]{62.29048673878424,47.66970563563518}),new EuclideanDoublePoint(new double[]{61.03857608977705,46.212924720020965}),new EuclideanDoublePoint(new double[]{60.16916214139201,45.18193661351688}),new EuclideanDoublePoint(new double[]{59.90036905976012,47.555364347063005}),new EuclideanDoublePoint(new double[]{62.33003634144552,47.83941489877179}),new EuclideanDoublePoint(new double[]{57.86035536718555,47.31117930193432}),new EuclideanDoublePoint(new double[]{58.13715479685925,48.985960494028404}),new EuclideanDoublePoint(new double[]{56.131923963548616,46.8508904252667}),new EuclideanDoublePoint(new double[]{55.976329887053,47.46384037658572}),new EuclideanDoublePoint(new double[]{56.23245975235477,47.940035191131756}),new EuclideanDoublePoint(new double[]{58.51687048212625,46.622885352699086}),new EuclideanDoublePoint(new double[]{57.85411081905477,45.95394361577928}),new EuclideanDoublePoint(new double[]{56.445776311447844,45.162093662656844}),new EuclideanDoublePoint(new double[]{57.36691949656233,47.50097194337286}),new EuclideanDoublePoint(new double[]{58.243626387557015,46.114052729681134}),new EuclideanDoublePoint(new double[]{56.27224595635198,44.799080066150054}),new EuclideanDoublePoint(new double[]{57.606924816500396,46.94291057763621}),new EuclideanDoublePoint(new double[]{30.18714230041951,13.877149710431695}),new EuclideanDoublePoint(new double[]{30.449448810657486,13.490778346545994}),new EuclideanDoublePoint(new double[]{30.295018390286714,13.264889000216499}),new EuclideanDoublePoint(new double[]{30.160201832884923,11.89278262341395}),new EuclideanDoublePoint(new double[]{31.341509791789576,15.282655921997502}),new EuclideanDoublePoint(new double[]{31.68601630325429,14.756873246748}),new EuclideanDoublePoint(new double[]{29.325963742565364,12.097849250072613}),new EuclideanDoublePoint(new double[]{29.54820742388256,13.613295356975868}),new EuclideanDoublePoint(new double[]{28.79359608888626,10.36352064087987}),new EuclideanDoublePoint(new double[]{31.01284597092308,12.788479208014905}),new EuclideanDoublePoint(new double[]{27.58509216737002,11.47570110601373}),new EuclideanDoublePoint(new double[]{28.593799561727792,10.780998203903437}),new EuclideanDoublePoint(new double[]{31.356105766724795,15.080316198524088}),new EuclideanDoublePoint(new double[]{31.25948503636755,13.674329151166603}),new EuclideanDoublePoint(new double[]{32.31590076372959,14.95261758659035}),new EuclideanDoublePoint(new double[]{30.460413702763617,15.88402809202671}),new EuclideanDoublePoint(new double[]{32.56178203062154,14.586076852632686}),new EuclideanDoublePoint(new double[]{32.76138648530468,16.239837325178087}),new EuclideanDoublePoint(new double[]{30.1829453331884,14.709592407103628}),new EuclideanDoublePoint(new double[]{29.55088173528202,15.0651247180067}),new EuclideanDoublePoint(new double[]{29.004155302187428,14.089665298582986}),new EuclideanDoublePoint(new double[]{29.339624439831823,13.29096065578051}),new EuclideanDoublePoint(new double[]{30.997460327576846,14.551914158277214}),new EuclideanDoublePoint(new double[]{30.66784126125276,16.269703107886016})};final DBSCANClusterer<EuclideanDoublePoint> transformer=new DBSCANClusterer<EuclideanDoublePoint>(2.0,5);final List<Cluster<EuclideanDoublePoint>> clusters=transformer.cluster(Arrays.asList(points));final List<EuclideanDoublePoint> clusterOne=Arrays.asList(points[3],points[4],points[5],points[6],points[7],points[8],points[9],points[10],points[11],points[12],points[13],points[14]);final List<EuclideanDoublePoint> clusterTwo=Arrays.asList(points[15],points[16],points[17],points[18],points[19],points[20],points[21],points[22],points[23],points[24],points[25],points[26],points[27],points[28],points[29],points[30],points[31],points[32],points[33],points[34],points[35],points[36],points[37],points[38]);final List<EuclideanDoublePoint> clusterThree=Arrays.asList(points[39],points[40],points[41],points[42],points[43],points[44],points[45],points[46],points[47],points[48],points[49],points[50],points[51],points[52],points[53],points[54],points[55],points[56],points[57],points[58],points[59],points[60],points[61],points[62]);boolean cluster1Found=false;boolean cluster2Found=false;boolean cluster3Found=false;Assert.assertEquals(3,clusters.size());for(final Cluster<EuclideanDoublePoint> cluster : clusters){if (cluster.getPoints().containsAll(clusterOne)){cluster1Found=true;}if (cluster.getPoints().containsAll(clusterTwo)){cluster2Found=true;}if (cluster.getPoints().containsAll(clusterThree)){cluster3Found=true;}}Assert.assertTrue(cluster1Found);Assert.assertTrue(cluster2Found);Assert.assertTrue(cluster3Found);}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testSingleLink",0,"@Test public void testSingleLink(){final EuclideanIntegerPoint[]points={new EuclideanIntegerPoint(new int[]{10,10}),new EuclideanIntegerPoint(new int[]{12,9}),new EuclideanIntegerPoint(new int[]{10,8}),new EuclideanIntegerPoint(new int[]{8,8}),new EuclideanIntegerPoint(new int[]{8,6}),new EuclideanIntegerPoint(new int[]{7,7}),new EuclideanIntegerPoint(new int[]{5,6}),new EuclideanIntegerPoint(new int[]{14,8}),new EuclideanIntegerPoint(new int[]{7,15}),new EuclideanIntegerPoint(new int[]{17,8})};final DBSCANClusterer<EuclideanIntegerPoint> clusterer=new DBSCANClusterer<EuclideanIntegerPoint>(3,3);List<Cluster<EuclideanIntegerPoint>> clusters=clusterer.cluster(Arrays.asList(points));Assert.assertEquals(1,clusters.size());final List<EuclideanIntegerPoint> clusterOne=Arrays.asList(points[0],points[1],points[2],points[3],points[4],points[5],points[6],points[7]);Assert.assertTrue(clusters.get(0).getPoints().containsAll(clusterOne));}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testGetEps",0,"@Test public void testGetEps(){final DBSCANClusterer<EuclideanDoublePoint> transformer=new DBSCANClusterer<EuclideanDoublePoint>(2.0,5);Assert.assertEquals(2.0,transformer.getEps(),0.0);}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testGetMinPts",0,"@Test public void testGetMinPts(){final DBSCANClusterer<EuclideanDoublePoint> transformer=new DBSCANClusterer<EuclideanDoublePoint>(2.0,5);Assert.assertEquals(5,transformer.getMinPts());}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testNegativeEps",0,"@Test(expected=MathIllegalArgumentException.class)public void testNegativeEps(){new DBSCANClusterer<EuclideanDoublePoint>(-2.0,5);}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testNegativeMinPts",0,"@Test(expected=MathIllegalArgumentException.class)public void testNegativeMinPts(){new DBSCANClusterer<EuclideanDoublePoint>(2.0,-5);}"
"org.apache.commons.math3.stat.clustering.DBSCANClustererTest.testNullDataset",0,"@Test(expected=NullArgumentException.class)public void testNullDataset(){DBSCANClusterer<EuclideanDoublePoint> clusterer=new DBSCANClusterer<EuclideanDoublePoint>(2.0,5);clusterer.cluster(null);}"
"org.apache.commons.math3.analysis.solvers.BrentSolverTest.testSinZero",0,"@Test public void testSinZero(){UnivariateFunction f=new Sin();double result;UnivariateSolver solver=new BrentSolver();result=solver.solve(100,f,3,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 7);result=solver.solve(100,f,1,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 8);}"
"org.apache.commons.math3.analysis.solvers.BrentSolverTest.testQuinticZero",0,"@Test public void testQuinticZero(){UnivariateFunction f=new QuinticFunction();double result;UnivariateSolver solver=new BrentSolver();result=solver.solve(100,f,-0.2,0.2);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 3);result=solver.solve(100,f,-0.1,0.3);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 7);result=solver.solve(100,f,-0.3,0.45);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 8);result=solver.solve(100,f,0.3,0.7);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 9);result=solver.solve(100,f,0.2,0.6);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 10);result=solver.solve(100,f,0.05,0.95);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 11);result=solver.solve(100,f,0.85,1.25);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 11);result=solver.solve(100,f,0.8,1.2);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 11);result=solver.solve(100,f,0.85,1.75);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 13);result=solver.solve(100,f,0.55,1.45);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 10);result=solver.solve(100,f,0.85,5);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()<= 15);try {result=solver.solve(5,f,0.85,5);Assert.fail(""Expected TooManyEvaluationsException"");}catch(TooManyEvaluationsException e){}}"
"org.apache.commons.math3.analysis.solvers.BrentSolverTest.testRootEndpoints",0,"@Test public void testRootEndpoints(){UnivariateFunction f=new Sin();BrentSolver solver=new BrentSolver();double result=solver.solve(100,f,FastMath.PI,4);Assert.assertEquals(FastMath.PI,result,solver.getAbsoluteAccuracy());result=solver.solve(100,f,3,FastMath.PI);Assert.assertEquals(FastMath.PI,result,solver.getAbsoluteAccuracy());result=solver.solve(100,f,FastMath.PI,4,3.5);Assert.assertEquals(FastMath.PI,result,solver.getAbsoluteAccuracy());result=solver.solve(100,f,3,FastMath.PI,3.07);Assert.assertEquals(FastMath.PI,result,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math3.analysis.solvers.BrentSolverTest.testBadEndpoints",0,"@Test public void testBadEndpoints(){UnivariateFunction f=new Sin();BrentSolver solver=new BrentSolver();try {solver.solve(100,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {solver.solve(100,f,1,1.5);Assert.fail(""Expecting NoBracketingException - non-bracketing"");}catch(NoBracketingException ex){}try {solver.solve(100,f,1,1.5,1.2);Assert.fail(""Expecting NoBracketingException - non-bracketing"");}catch(NoBracketingException ex){}}"
"org.apache.commons.math3.analysis.solvers.BrentSolverTest.testInitialGuess",0,"@Test public void testInitialGuess(){MonitoredFunction f=new MonitoredFunction(new QuinticFunction());BrentSolver solver=new BrentSolver();double result;result=solver.solve(100,f,0.6,7.0);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());int referenceCallsCount=f.getCallsCount();Assert.assertTrue(referenceCallsCount >= 13);try {result=solver.solve(100,f,0.6,7.0,0.0);Assert.fail(""a NumberIsTooLargeException was expected"");}catch(NumberIsTooLargeException iae){}f.setCallsCount(0);result=solver.solve(100,f,0.6,7.0,0.61);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(f.getCallsCount()> referenceCallsCount);f.setCallsCount(0);result=solver.solve(100,f,0.6,7.0,0.999999);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertTrue(f.getCallsCount()< referenceCallsCount);f.setCallsCount(0);result=solver.solve(100,f,0.6,7.0,1.0);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());Assert.assertEquals(1,solver.getEvaluations());Assert.assertEquals(1,f.getCallsCount());}"
"org.apache.commons.math3.analysis.solvers.BrentSolverTest.testMath832",0,"@Test public void testMath832(){final UnivariateFunction f=new UnivariateFunction(){private final UnivariateDifferentiableFunction sqrt=new Sqrt();private final UnivariateDifferentiableFunction inv=new Inverse();private final UnivariateDifferentiableFunction func=FunctionUtils.add(FunctionUtils.multiply(new Constant(1e2),sqrt),FunctionUtils.multiply(new Constant(1e6),inv),FunctionUtils.multiply(new Constant(1e4),FunctionUtils.compose(inv,sqrt)));public double value(double x){return func.value(new DerivativeStructure(1,1,0,x)).getPartialDerivative(1);}};BrentSolver solver=new BrentSolver();final double result=solver.solve(99,f,1,1e30,1 + 1e-10);Assert.assertEquals(804.93558250,result,1e-8);}"
"org.apache.commons.math3.optim.linear.SimplexTableauTest.testInitialization",0,"@Test public void testInitialization(){LinearObjectiveFunction f=createFunction();Collection<LinearConstraint> constraints=createConstraints();SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);double[][]expectedInitialTableau={{-1,0,-1,-1,2,0,0,0,-4},{0,1,-15,-10,25,0,0,0,0},{0,0,1,0,-1,1,0,0,2},{0,0,0,1,-1,0,1,0,3},{0,0,1,1,-2,0,0,1,4}};assertMatrixEquals(expectedInitialTableau,tableau.getData());}"
"org.apache.commons.math3.optim.linear.SimplexTableauTest.testDropPhase1Objective",0,"@Test public void testDropPhase1Objective(){LinearObjectiveFunction f=createFunction();Collection<LinearConstraint> constraints=createConstraints();SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);double[][]expectedTableau={{1,-15,-10,0,0,0,0},{0,1,0,1,0,0,2},{0,0,1,0,1,0,3},{0,1,1,0,0,1,4}};tableau.dropPhase1Objective();assertMatrixEquals(expectedTableau,tableau.getData());}"
"org.apache.commons.math3.optim.linear.SimplexTableauTest.testTableauWithNoArtificialVars",0,"@Test public void testTableauWithNoArtificialVars(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.LEQ,3));constraints.add(new LinearConstraint(new double[]{1,1},Relationship.LEQ,4));SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);double[][]initialTableau={{1,-15,-10,25,0,0,0,0},{0,1,0,-1,1,0,0,2},{0,0,1,-1,0,1,0,3},{0,1,1,-2,0,0,1,4}};assertMatrixEquals(initialTableau,tableau.getData());}"
"org.apache.commons.math3.optim.linear.SimplexTableauTest.testSerial",0,"@Test public void testSerial(){LinearObjectiveFunction f=createFunction();Collection<LinearConstraint> constraints=createConstraints();SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);Assert.assertEquals(tableau,TestUtils.serializeAndRecover(tableau));}"
"org.apache.commons.math3.util.MathArraysTest.testScale",0,"@Test public void testScale(){final double[]test=new double[]{-2.5,-1,0,1,2.5};final double[]correctTest=MathArrays.copyOf(test);final double[]correctScaled=new double[]{5.25,2.1,0,-2.1,-5.25};final double[]scaled=MathArrays.scale(-2.1,test);for (int i=0;i < test.length;i++){Assert.assertEquals(correctTest[i],test[i],0);}for (int i=0;i < scaled.length;i++){Assert.assertEquals(correctScaled[i],scaled[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testScaleInPlace",0,"@Test public void testScaleInPlace(){final double[]test=new double[]{-2.5,-1,0,1,2.5};final double[]correctScaled=new double[]{5.25,2.1,0,-2.1,-5.25};MathArrays.scaleInPlace(-2.1,test);for (int i=0;i < test.length;i++){Assert.assertEquals(correctScaled[i],test[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testEbeAddPrecondition",0,"@Test(expected=DimensionMismatchException.class)public void testEbeAddPrecondition(){MathArrays.ebeAdd(new double[3],new double[4]);}"
"org.apache.commons.math3.util.MathArraysTest.testEbeSubtractPrecondition",0,"@Test(expected=DimensionMismatchException.class)public void testEbeSubtractPrecondition(){MathArrays.ebeSubtract(new double[3],new double[4]);}"
"org.apache.commons.math3.util.MathArraysTest.testEbeMultiplyPrecondition",0,"@Test(expected=DimensionMismatchException.class)public void testEbeMultiplyPrecondition(){MathArrays.ebeMultiply(new double[3],new double[4]);}"
"org.apache.commons.math3.util.MathArraysTest.testEbeDividePrecondition",0,"@Test(expected=DimensionMismatchException.class)public void testEbeDividePrecondition(){MathArrays.ebeDivide(new double[3],new double[4]);}"
"org.apache.commons.math3.util.MathArraysTest.testEbeAdd",0,"@Test public void testEbeAdd(){final double[]a={0,1,2};final double[]b={3,5,7};final double[]r=MathArrays.ebeAdd(a,b);for (int i=0;i < a.length;i++){Assert.assertEquals(a[i]+ b[i],r[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testEbeSubtract",0,"@Test public void testEbeSubtract(){final double[]a={0,1,2};final double[]b={3,5,7};final double[]r=MathArrays.ebeSubtract(a,b);for (int i=0;i < a.length;i++){Assert.assertEquals(a[i]- b[i],r[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testEbeMultiply",0,"@Test public void testEbeMultiply(){final double[]a={0,1,2};final double[]b={3,5,7};final double[]r=MathArrays.ebeMultiply(a,b);for (int i=0;i < a.length;i++){Assert.assertEquals(a[i]* b[i],r[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testEbeDivide",0,"@Test public void testEbeDivide(){final double[]a={0,1,2};final double[]b={3,5,7};final double[]r=MathArrays.ebeDivide(a,b);for (int i=0;i < a.length;i++){Assert.assertEquals(a[i]/ b[i],r[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testL1DistanceDouble",0,"@Test public void testL1DistanceDouble(){double[]p1={2.5,0.0};double[]p2={-0.5,4.0};Assert.assertTrue(Precision.equals(7.0,MathArrays.distance1(p1,p2),1));}"
"org.apache.commons.math3.util.MathArraysTest.testL1DistanceInt",0,"@Test public void testL1DistanceInt(){int[]p1={3,0};int[]p2={0,4};Assert.assertEquals(7,MathArrays.distance1(p1,p2));}"
"org.apache.commons.math3.util.MathArraysTest.testL2DistanceDouble",0,"@Test public void testL2DistanceDouble(){double[]p1={2.5,0.0};double[]p2={-0.5,4.0};Assert.assertTrue(Precision.equals(5.0,MathArrays.distance(p1,p2),1));}"
"org.apache.commons.math3.util.MathArraysTest.testL2DistanceInt",0,"@Test public void testL2DistanceInt(){int[]p1={3,0};int[]p2={0,4};Assert.assertTrue(Precision.equals(5,MathArrays.distance(p1,p2),1));}"
"org.apache.commons.math3.util.MathArraysTest.testLInfDistanceDouble",0,"@Test public void testLInfDistanceDouble(){double[]p1={2.5,0.0};double[]p2={-0.5,4.0};Assert.assertTrue(Precision.equals(4.0,MathArrays.distanceInf(p1,p2),1));}"
"org.apache.commons.math3.util.MathArraysTest.testLInfDistanceInt",0,"@Test public void testLInfDistanceInt(){int[]p1={3,0};int[]p2={0,4};Assert.assertEquals(4,MathArrays.distanceInf(p1,p2));}"
"org.apache.commons.math3.util.MathArraysTest.testCheckOrder",0,"@Test public void testCheckOrder(){MathArrays.checkOrder(new double[]{-15,-5.5,-1,2,15},MathArrays.OrderDirection.INCREASING,true);MathArrays.checkOrder(new double[]{-15,-5.5,-1,2,2},MathArrays.OrderDirection.INCREASING,false);MathArrays.checkOrder(new double[]{3,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,true);MathArrays.checkOrder(new double[]{3,0,0,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,false);try {MathArrays.checkOrder(new double[]{-15,-5.5,-1,-1,2,15},MathArrays.OrderDirection.INCREASING,true);Assert.fail(""an exception should have been thrown"");}catch(NonMonotonicSequenceException e){}try {MathArrays.checkOrder(new double[]{-15,-5.5,-1,-2,2},MathArrays.OrderDirection.INCREASING,false);Assert.fail(""an exception should have been thrown"");}catch(NonMonotonicSequenceException e){}try {MathArrays.checkOrder(new double[]{3,3,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,true);Assert.fail(""an exception should have been thrown"");}catch(NonMonotonicSequenceException e){}try {MathArrays.checkOrder(new double[]{3,-1,0,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,false);Assert.fail(""an exception should have been thrown"");}catch(NonMonotonicSequenceException e){}try {MathArrays.checkOrder(new double[]{3,0,-5.5,-11,-10},MathArrays.OrderDirection.DECREASING,false);Assert.fail(""an exception should have been thrown"");}catch(NonMonotonicSequenceException e){}}"
"org.apache.commons.math3.util.MathArraysTest.testIsMonotonic",0,"@Test public void testIsMonotonic(){Assert.assertFalse(MathArrays.isMonotonic(new double[]{-15,-5.5,-1,-1,2,15},MathArrays.OrderDirection.INCREASING,true));Assert.assertTrue(MathArrays.isMonotonic(new double[]{-15,-5.5,-1,0,2,15},MathArrays.OrderDirection.INCREASING,true));Assert.assertFalse(MathArrays.isMonotonic(new double[]{-15,-5.5,-1,-2,2},MathArrays.OrderDirection.INCREASING,false));Assert.assertTrue(MathArrays.isMonotonic(new double[]{-15,-5.5,-1,-1,2},MathArrays.OrderDirection.INCREASING,false));Assert.assertFalse(MathArrays.isMonotonic(new double[]{3,3,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,true));Assert.assertTrue(MathArrays.isMonotonic(new double[]{3,2,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,true));Assert.assertFalse(MathArrays.isMonotonic(new double[]{3,-1,0,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,false));Assert.assertTrue(MathArrays.isMonotonic(new double[]{3,0,0,-5.5,-11,-27.5},MathArrays.OrderDirection.DECREASING,false));}"
"org.apache.commons.math3.util.MathArraysTest.testIsMonotonicComparable",0,"@Test public void testIsMonotonicComparable(){Assert.assertFalse(MathArrays.isMonotonic(new Double[]{new Double(-15),new Double(-5.5),new Double(-1),new Double(-1),new Double(2),new Double(15)},MathArrays.OrderDirection.INCREASING,true));Assert.assertTrue(MathArrays.isMonotonic(new Double[]{new Double(-15),new Double(-5.5),new Double(-1),new Double(0),new Double(2),new Double(15)},MathArrays.OrderDirection.INCREASING,true));Assert.assertFalse(MathArrays.isMonotonic(new Double[]{new Double(-15),new Double(-5.5),new Double(-1),new Double(-2),new Double(2)},MathArrays.OrderDirection.INCREASING,false));Assert.assertTrue(MathArrays.isMonotonic(new Double[]{new Double(-15),new Double(-5.5),new Double(-1),new Double(-1),new Double(2)},MathArrays.OrderDirection.INCREASING,false));Assert.assertFalse(MathArrays.isMonotonic(new Double[]{new Double(3),new Double(3),new Double(-5.5),new Double(-11),new Double(-27.5)},MathArrays.OrderDirection.DECREASING,true));Assert.assertTrue(MathArrays.isMonotonic(new Double[]{new Double(3),new Double(2),new Double(-5.5),new Double(-11),new Double(-27.5)},MathArrays.OrderDirection.DECREASING,true));Assert.assertFalse(MathArrays.isMonotonic(new Double[]{new Double(3),new Double(-1),new Double(0),new Double(-5.5),new Double(-11),new Double(-27.5)},MathArrays.OrderDirection.DECREASING,false));Assert.assertTrue(MathArrays.isMonotonic(new Double[]{new Double(3),new Double(0),new Double(0),new Double(-5.5),new Double(-11),new Double(-27.5)},MathArrays.OrderDirection.DECREASING,false));}"
"org.apache.commons.math3.util.MathArraysTest.testCheckRectangular",0,"@Test public void testCheckRectangular(){final long[][]rect=new long[][]{{0,1},{2,3}};final long[][]ragged=new long[][]{{0,1},{2}};final long[][]nullArray=null;final long[][]empty=new long[][]{};MathArrays.checkRectangular(rect);MathArrays.checkRectangular(empty);try {MathArrays.checkRectangular(ragged);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}try {MathArrays.checkRectangular(nullArray);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.util.MathArraysTest.testCheckPositive",0,"@Test public void testCheckPositive(){final double[]positive=new double[]{1,2,3};final double[]nonNegative=new double[]{0,1,2};final double[]nullArray=null;final double[]empty=new double[]{};MathArrays.checkPositive(positive);MathArrays.checkPositive(empty);try {MathArrays.checkPositive(nullArray);Assert.fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}try {MathArrays.checkPositive(nonNegative);Assert.fail(""Expecting NotStrictlyPositiveException"");}catch(NotStrictlyPositiveException ex){}}"
"org.apache.commons.math3.util.MathArraysTest.testCheckNonNegative",0,"@Test public void testCheckNonNegative(){final long[]nonNegative=new long[]{0,1};final long[]hasNegative=new long[]{-1};final long[]nullArray=null;final long[]empty=new long[]{};MathArrays.checkNonNegative(nonNegative);MathArrays.checkNonNegative(empty);try {MathArrays.checkNonNegative(nullArray);Assert.fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}try {MathArrays.checkNonNegative(hasNegative);Assert.fail(""Expecting NotPositiveException"");}catch(NotPositiveException ex){}}"
"org.apache.commons.math3.util.MathArraysTest.testCheckNonNegative2D",0,"@Test public void testCheckNonNegative2D(){final long[][]nonNegative=new long[][]{{0,1},{1,0}};final long[][]hasNegative=new long[][]{{-1},{0}};final long[][]nullArray=null;final long[][]empty=new long[][]{};MathArrays.checkNonNegative(nonNegative);MathArrays.checkNonNegative(empty);try {MathArrays.checkNonNegative(nullArray);Assert.fail(""Expecting NullPointerException"");}catch(NullPointerException ex){}try {MathArrays.checkNonNegative(hasNegative);Assert.fail(""Expecting NotPositiveException"");}catch(NotPositiveException ex){}}"
"org.apache.commons.math3.util.MathArraysTest.testSortInPlace",0,"@Test public void testSortInPlace(){final double[]x1={2,5,-3,1,4};final double[]x2={4,25,9,1,16};final double[]x3={8,125,-27,1,64};MathArrays.sortInPlace(x1,x2,x3);Assert.assertEquals(-3,x1[0],Math.ulp(1d));Assert.assertEquals(9,x2[0],Math.ulp(1d));Assert.assertEquals(-27,x3[0],Math.ulp(1d));Assert.assertEquals(1,x1[1],Math.ulp(1d));Assert.assertEquals(1,x2[1],Math.ulp(1d));Assert.assertEquals(1,x3[1],Math.ulp(1d));Assert.assertEquals(2,x1[2],Math.ulp(1d));Assert.assertEquals(4,x2[2],Math.ulp(1d));Assert.assertEquals(8,x3[2],Math.ulp(1d));Assert.assertEquals(4,x1[3],Math.ulp(1d));Assert.assertEquals(16,x2[3],Math.ulp(1d));Assert.assertEquals(64,x3[3],Math.ulp(1d));Assert.assertEquals(5,x1[4],Math.ulp(1d));Assert.assertEquals(25,x2[4],Math.ulp(1d));Assert.assertEquals(125,x3[4],Math.ulp(1d));}"
"org.apache.commons.math3.util.MathArraysTest.testSortInPlaceDecresasingOrder",0,"@Test public void testSortInPlaceDecresasingOrder(){final double[]x1={2,5,-3,1,4};final double[]x2={4,25,9,1,16};final double[]x3={8,125,-27,1,64};MathArrays.sortInPlace(x1,MathArrays.OrderDirection.DECREASING,x2,x3);Assert.assertEquals(-3,x1[4],Math.ulp(1d));Assert.assertEquals(9,x2[4],Math.ulp(1d));Assert.assertEquals(-27,x3[4],Math.ulp(1d));Assert.assertEquals(1,x1[3],Math.ulp(1d));Assert.assertEquals(1,x2[3],Math.ulp(1d));Assert.assertEquals(1,x3[3],Math.ulp(1d));Assert.assertEquals(2,x1[2],Math.ulp(1d));Assert.assertEquals(4,x2[2],Math.ulp(1d));Assert.assertEquals(8,x3[2],Math.ulp(1d));Assert.assertEquals(4,x1[1],Math.ulp(1d));Assert.assertEquals(16,x2[1],Math.ulp(1d));Assert.assertEquals(64,x3[1],Math.ulp(1d));Assert.assertEquals(5,x1[0],Math.ulp(1d));Assert.assertEquals(25,x2[0],Math.ulp(1d));Assert.assertEquals(125,x3[0],Math.ulp(1d));}"
"org.apache.commons.math3.util.MathArraysTest.testSortInPlaceExample",0,"@Test public void testSortInPlaceExample(){final double[]x={3,1,2};final double[]y={1,2,3};final double[]z={0,5,7};MathArrays.sortInPlace(x,y,z);final double[]sx={1,2,3};final double[]sy={2,3,1};final double[]sz={5,7,0};Assert.assertTrue(Arrays.equals(sx,x));Assert.assertTrue(Arrays.equals(sy,y));Assert.assertTrue(Arrays.equals(sz,z));}"
"org.apache.commons.math3.util.MathArraysTest.testSortInPlaceFailures",0,"@Test public void testSortInPlaceFailures(){final double[]nullArray=null;final double[]one={1};final double[]two={1,2};final double[]onep={2};try {MathArrays.sortInPlace(one,two);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}try {MathArrays.sortInPlace(one,nullArray);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}try {MathArrays.sortInPlace(one,onep,nullArray);Assert.fail(""Expecting NullArgumentException"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.util.MathArraysTest.testCopyOfInt",0,"@Test public void testCopyOfInt(){final int[]source={Integer.MIN_VALUE,-1,0,1,3,113,4769,Integer.MAX_VALUE};final int[]dest=MathArrays.copyOf(source);Assert.assertEquals(dest.length,source.length);for (int i=0;i < source.length;i++){Assert.assertEquals(source[i],dest[i]);}}"
"org.apache.commons.math3.util.MathArraysTest.testCopyOfInt2",0,"@Test public void testCopyOfInt2(){final int[]source={Integer.MIN_VALUE,-1,0,1,3,113,4769,Integer.MAX_VALUE};final int offset=3;final int[]dest=MathArrays.copyOf(source,source.length - offset);Assert.assertEquals(dest.length,source.length - offset);for (int i=0;i < source.length - offset;i++){Assert.assertEquals(source[i],dest[i]);}}"
"org.apache.commons.math3.util.MathArraysTest.testCopyOfInt3",0,"@Test public void testCopyOfInt3(){final int[]source={Integer.MIN_VALUE,-1,0,1,3,113,4769,Integer.MAX_VALUE};final int offset=3;final int[]dest=MathArrays.copyOf(source,source.length + offset);Assert.assertEquals(dest.length,source.length + offset);for (int i=0;i < source.length;i++){Assert.assertEquals(source[i],dest[i]);}for (int i=source.length;i < source.length + offset;i++){Assert.assertEquals(0,dest[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testCopyOfDouble",0,"@Test public void testCopyOfDouble(){final double[]source={Double.NEGATIVE_INFINITY,-Double.MAX_VALUE,-1,0,Double.MIN_VALUE,Math.ulp(1d),1,3,113,4769,Double.MAX_VALUE,Double.POSITIVE_INFINITY};final double[]dest=MathArrays.copyOf(source);Assert.assertEquals(dest.length,source.length);for (int i=0;i < source.length;i++){Assert.assertEquals(source[i],dest[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testCopyOfDouble2",0,"@Test public void testCopyOfDouble2(){final double[]source={Double.NEGATIVE_INFINITY,-Double.MAX_VALUE,-1,0,Double.MIN_VALUE,Math.ulp(1d),1,3,113,4769,Double.MAX_VALUE,Double.POSITIVE_INFINITY};final int offset=3;final double[]dest=MathArrays.copyOf(source,source.length - offset);Assert.assertEquals(dest.length,source.length - offset);for (int i=0;i < source.length - offset;i++){Assert.assertEquals(source[i],dest[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testCopyOfDouble3",0,"@Test public void testCopyOfDouble3(){final double[]source={Double.NEGATIVE_INFINITY,-Double.MAX_VALUE,-1,0,Double.MIN_VALUE,Math.ulp(1d),1,3,113,4769,Double.MAX_VALUE,Double.POSITIVE_INFINITY};final int offset=3;final double[]dest=MathArrays.copyOf(source,source.length + offset);Assert.assertEquals(dest.length,source.length + offset);for (int i=0;i < source.length;i++){Assert.assertEquals(source[i],dest[i],0);}for (int i=source.length;i < source.length + offset;i++){Assert.assertEquals(0,dest[i],0);}}"
"org.apache.commons.math3.util.MathArraysTest.testLinearCombinationWithSingleElementArray",1,"@Test public void testLinearCombinationWithSingleElementArray(){final double[]a={1.23456789};final double[]b={98765432.1};Assert.assertEquals(a[0]* b[0],MathArrays.linearCombination(a,b),0d);}"
"org.apache.commons.math3.util.MathArraysTest.testLinearCombination1",0,"@Test public void testLinearCombination1(){final double[]a=new double[]{-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0};final double[]b=new double[]{-5712344449280879.0 / 2097152.0,-4550117129121957.0 / 2097152.0,8846951984510141.0 / 131072.0};final double abSumInline=MathArrays.linearCombination(a[0],b[0],a[1],b[1],a[2],b[2]);final double abSumArray=MathArrays.linearCombination(a,b);Assert.assertEquals(abSumInline,abSumArray,0);Assert.assertEquals(-1.8551294182586248737720779899,abSumInline,1.0e-15);final double naive=a[0]* b[0]+ a[1]* b[1]+ a[2]* b[2];Assert.assertTrue(FastMath.abs(naive - abSumInline)> 1.5);}"
"org.apache.commons.math3.util.MathArraysTest.testLinearCombination2",0,"@Test public void testLinearCombination2(){Well1024a random=new Well1024a(553267312521321234l);for (int i=0;i < 10000;++i){final double ux=1e17 * random.nextDouble();final double uy=1e17 * random.nextDouble();final double uz=1e17 * random.nextDouble();final double vx=1e17 * random.nextDouble();final double vy=1e17 * random.nextDouble();final double vz=1e17 * random.nextDouble();final double sInline=MathArrays.linearCombination(ux,vx,uy,vy,uz,vz);final double sArray=MathArrays.linearCombination(new double[]{ux,uy,uz},new double[]{vx,vy,vz});Assert.assertEquals(sInline,sArray,0);}}"
"org.apache.commons.math3.util.MathArraysTest.testLinearCombinationInfinite",0,"@Test public void testLinearCombinationInfinite(){final double[][]a=new double[][]{{1,2,3,4},{1,Double.POSITIVE_INFINITY,3,4},{1,2,Double.POSITIVE_INFINITY,4},{1,Double.POSITIVE_INFINITY,3,Double.NEGATIVE_INFINITY},{1,2,3,4},{1,2,3,4},{1,2,3,4},{1,2,3,4}};final double[][]b=new double[][]{{1,-2,3,4},{1,-2,3,4},{1,-2,3,4},{1,-2,3,4},{1,Double.POSITIVE_INFINITY,3,4},{1,-2,Double.POSITIVE_INFINITY,4},{1,Double.POSITIVE_INFINITY,3,Double.NEGATIVE_INFINITY},{Double.NaN,-2,3,4}};Assert.assertEquals(-3,MathArrays.linearCombination(a[0][0],b[0][0],a[0][1],b[0][1]),1.0e-10);Assert.assertEquals(6,MathArrays.linearCombination(a[0][0],b[0][0],a[0][1],b[0][1],a[0][2],b[0][2]),1.0e-10);Assert.assertEquals(22,MathArrays.linearCombination(a[0][0],b[0][0],a[0][1],b[0][1],a[0][2],b[0][2],a[0][3],b[0][3]),1.0e-10);Assert.assertEquals(22,MathArrays.linearCombination(a[0],b[0]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[1][0],b[1][0],a[1][1],b[1][1]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[1][0],b[1][0],a[1][1],b[1][1],a[1][2],b[1][2]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[1][0],b[1][0],a[1][1],b[1][1],a[1][2],b[1][2],a[1][3],b[1][3]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[1],b[1]),1.0e-10);Assert.assertEquals(-3,MathArrays.linearCombination(a[2][0],b[2][0],a[2][1],b[2][1]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[2][0],b[2][0],a[2][1],b[2][1],a[2][2],b[2][2]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[2][0],b[2][0],a[2][1],b[2][1],a[2][2],b[2][2],a[2][3],b[2][3]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[2],b[2]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[3][0],b[3][0],a[3][1],b[3][1]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[3][0],b[3][0],a[3][1],b[3][1],a[3][2],b[3][2]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[3][0],b[3][0],a[3][1],b[3][1],a[3][2],b[3][2],a[3][3],b[3][3]),1.0e-10);Assert.assertEquals(Double.NEGATIVE_INFINITY,MathArrays.linearCombination(a[3],b[3]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[4][0],b[4][0],a[4][1],b[4][1]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[4][0],b[4][0],a[4][1],b[4][1],a[4][2],b[4][2]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[4][0],b[4][0],a[4][1],b[4][1],a[4][2],b[4][2],a[4][3],b[4][3]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[4],b[4]),1.0e-10);Assert.assertEquals(-3,MathArrays.linearCombination(a[5][0],b[5][0],a[5][1],b[5][1]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[5][0],b[5][0],a[5][1],b[5][1],a[5][2],b[5][2]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[5][0],b[5][0],a[5][1],b[5][1],a[5][2],b[5][2],a[5][3],b[5][3]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[5],b[5]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[6][0],b[6][0],a[6][1],b[6][1]),1.0e-10);Assert.assertEquals(Double.POSITIVE_INFINITY,MathArrays.linearCombination(a[6][0],b[6][0],a[6][1],b[6][1],a[6][2],b[6][2]),1.0e-10);Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[6][0],b[6][0],a[6][1],b[6][1],a[6][2],b[6][2],a[6][3],b[6][3])));Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[6],b[6])));Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0],b[7][0],a[7][1],b[7][1])));Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0],b[7][0],a[7][1],b[7][1],a[7][2],b[7][2])));Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7][0],b[7][0],a[7][1],b[7][1],a[7][2],b[7][2],a[7][3],b[7][3])));Assert.assertTrue(Double.isNaN(MathArrays.linearCombination(a[7],b[7])));}"
"org.apache.commons.math3.util.MathArraysTest.testArrayEquals",0,"@Test public void testArrayEquals(){Assert.assertFalse(MathArrays.equals(new double[]{1d},null));Assert.assertFalse(MathArrays.equals(null,new double[]{1d}));Assert.assertTrue(MathArrays.equals((double[])null,(double[])null));Assert.assertFalse(MathArrays.equals(new double[]{1d},new double[0]));Assert.assertTrue(MathArrays.equals(new double[]{1d},new double[]{1d}));Assert.assertTrue(MathArrays.equals(new double[]{Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d},new double[]{Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}));Assert.assertFalse(MathArrays.equals(new double[]{Double.NaN},new double[]{Double.NaN}));Assert.assertFalse(MathArrays.equals(new double[]{Double.POSITIVE_INFINITY},new double[]{Double.NEGATIVE_INFINITY}));Assert.assertFalse(MathArrays.equals(new double[]{1d},new double[]{FastMath.nextAfter(FastMath.nextAfter(1d,2d),2d)}));}"
"org.apache.commons.math3.util.MathArraysTest.testArrayEqualsIncludingNaN",0,"@Test public void testArrayEqualsIncludingNaN(){Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[]{1d},null));Assert.assertFalse(MathArrays.equalsIncludingNaN(null,new double[]{1d}));Assert.assertTrue(MathArrays.equalsIncludingNaN((double[])null,(double[])null));Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[]{1d},new double[0]));Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[]{1d},new double[]{1d}));Assert.assertTrue(MathArrays.equalsIncludingNaN(new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d},new double[]{Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d}));Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[]{Double.POSITIVE_INFINITY},new double[]{Double.NEGATIVE_INFINITY}));Assert.assertFalse(MathArrays.equalsIncludingNaN(new double[]{1d},new double[]{FastMath.nextAfter(FastMath.nextAfter(1d,2d),2d)}));}"
"org.apache.commons.math3.util.MathArraysTest.testNormalizeArray",0,"@Test public void testNormalizeArray(){double[]testValues1=new double[]{1,1,2};TestUtils.assertEquals(new double[]{.25,.25,.5},MathArrays.normalizeArray(testValues1,1),Double.MIN_VALUE);double[]testValues2=new double[]{-1,-1,1};TestUtils.assertEquals(new double[]{1,1,-1},MathArrays.normalizeArray(testValues2,1),Double.MIN_VALUE);double[]testValues3=new double[]{-1,-1,Double.NaN,1,Double.NaN};TestUtils.assertEquals(new double[]{1,1,Double.NaN,-1,Double.NaN},MathArrays.normalizeArray(testValues3,1),Double.MIN_VALUE);double[]zeroSum=new double[]{-1,1};try {MathArrays.normalizeArray(zeroSum,1);Assert.fail(""expecting MathArithmeticException"");}catch(MathArithmeticException ex){}double[]hasInf=new double[]{1,2,1,Double.NEGATIVE_INFINITY};try {MathArrays.normalizeArray(hasInf,1);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MathArrays.normalizeArray(testValues1,Double.POSITIVE_INFINITY);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {MathArrays.normalizeArray(testValues1,Double.NaN);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.util.MathArraysTest.testConvolve",0,"@Test public void testConvolve(){double[]x1={1.2,-1.8,1.4};double[]h1={1,0.8,0.5,0.3};double[]y1={1.2,-0.84,0.56,0.58,0.16,0.42};double tolerance=1e-13;double[]yActual=MathArrays.convolve(x1,h1);Assert.assertArrayEquals(y1,yActual,tolerance);double[]x2={1,2,3};double[]h2={0,1,0.5};double[]y2={0,1,2.5,4,1.5};yActual=MathArrays.convolve(x2,h2);Assert.assertArrayEquals(y2,yActual,tolerance);try {MathArrays.convolve(new double[]{1,2},null);Assert.fail(""an exception should have been thrown"");}catch(NullArgumentException e){}try {MathArrays.convolve(null,new double[]{1,2});Assert.fail(""an exception should have been thrown"");}catch(NullArgumentException e){}try {MathArrays.convolve(new double[]{1,2},new double[]{});Assert.fail(""an exception should have been thrown"");}catch(NoDataException e){}try {MathArrays.convolve(new double[]{},new double[]{1,2});Assert.fail(""an exception should have been thrown"");}catch(NoDataException e){}try {MathArrays.convolve(new double[]{},new double[]{});Assert.fail(""an exception should have been thrown"");}catch(NoDataException e){}}"
"org.apache.commons.math3.stat.descriptive.rank.MinTest.testSpecialValues",0,"@Test public void testSpecialValues(){double[]testArray={0d,Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY};Min min=new Min();Assert.assertTrue(Double.isNaN(min.getResult()));min.increment(testArray[0]);Assert.assertEquals(0d,min.getResult(),0);min.increment(testArray[1]);Assert.assertEquals(0d,min.getResult(),0);min.increment(testArray[2]);Assert.assertEquals(0d,min.getResult(),0);min.increment(testArray[3]);Assert.assertEquals(Double.NEGATIVE_INFINITY,min.getResult(),0);Assert.assertEquals(Double.NEGATIVE_INFINITY,min.evaluate(testArray),0);}"
"org.apache.commons.math3.stat.descriptive.rank.MinTest.testNaNs",0,"@Test public void testNaNs(){Min min=new Min();double nan=Double.NaN;Assert.assertEquals(2d,min.evaluate(new double[]{nan,2d,3d}),0);Assert.assertEquals(1d,min.evaluate(new double[]{1d,nan,3d}),0);Assert.assertEquals(1d,min.evaluate(new double[]{1d,2d,nan}),0);Assert.assertTrue(Double.isNaN(min.evaluate(new double[]{nan,nan,nan})));}"
"org.apache.commons.math3.analysis.function.SqrtTest.testComparison",0,"@Test public void testComparison(){final Sqrt s=new Sqrt();final UnivariateFunction f=new UnivariateFunction(){public double value(double x){return Math.sqrt(x);}};for (double x=1e-30;x < 1e10;x*=2){final double fX=f.value(x);final double sX=s.value(x);Assert.assertEquals(""x="" + x,fX,sX,0);}}"
"org.apache.commons.math3.analysis.function.SqrtTest.testDerivativeComparison",0,"@Test public void testDerivativeComparison(){final UnivariateDifferentiableFunction sPrime=new Sqrt();final UnivariateFunction f=new UnivariateFunction(){public double value(double x){return 1 / (2 * Math.sqrt(x));}};for (double x=1e-30;x < 1e10;x*=2){final double fX=f.value(x);final double sX=sPrime.value(new DerivativeStructure(1,1,0,x)).getPartialDerivative(1);Assert.assertEquals(""x="" + x,fX,sX,FastMath.ulp(fX));}}"
"org.apache.commons.math3.analysis.function.SqrtTest.testDerivativesHighOrder",0,"@Test public void testDerivativesHighOrder(){DerivativeStructure s=new Sqrt().value(new DerivativeStructure(1,5,0,1.2));Assert.assertEquals(1.0954451150103322269,s.getPartialDerivative(0),1.0e-16);Assert.assertEquals(0.45643546458763842789,s.getPartialDerivative(1),1.0e-16);Assert.assertEquals(-0.1901814435781826783,s.getPartialDerivative(2),1.0e-16);Assert.assertEquals(0.23772680447272834785,s.getPartialDerivative(3),1.0e-16);Assert.assertEquals(-0.49526417598485072465,s.getPartialDerivative(4),1.0e-16);Assert.assertEquals(1.4445205132891479465,s.getPartialDerivative(5),5.0e-16);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testBoundsUnsupported",0,"@Test(expected=MathUnsupportedOperationException.class)public void testBoundsUnsupported(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final FourExtrema fourExtrema=new FourExtrema();optimizer.optimize(new MaxEval(100),new ObjectiveFunction(fourExtrema),GoalType.MINIMIZE,new InitialGuess(new double[]{-3,0}),new NelderMeadSimplex(new double[]{0.2,0.2}),new SimpleBounds(new double[]{-5,-1},new double[]{5,1}));}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize1",0,"@Test public void testMinimize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-11,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(fourExtrema),GoalType.MINIMIZE,new InitialGuess(new double[]{-3,0}),new MultiDirectionalSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],4e-6);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXmYp,optimum.getValue(),8e-13);Assert.assertTrue(optimizer.getEvaluations()> 120);Assert.assertTrue(optimizer.getEvaluations()< 150);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMinimize2",0,"@Test public void testMinimize2(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-11,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(fourExtrema),GoalType.MINIMIZE,new InitialGuess(new double[]{1,0}),new MultiDirectionalSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],2e-8);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXpYm,optimum.getValue(),2e-12);Assert.assertTrue(optimizer.getEvaluations()> 120);Assert.assertTrue(optimizer.getEvaluations()< 150);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize1",0,"@Test public void testMaximize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-11,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(fourExtrema),GoalType.MAXIMIZE,new InitialGuess(new double[]{-3.0,0.0}),new MultiDirectionalSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],7e-7);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],3e-7);Assert.assertEquals(fourExtrema.valueXmYm,optimum.getValue(),2e-14);Assert.assertTrue(optimizer.getEvaluations()> 120);Assert.assertTrue(optimizer.getEvaluations()< 150);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMaximize2",0,"@Test public void testMaximize2(){SimplexOptimizer optimizer=new SimplexOptimizer(new SimpleValueChecker(1e-15,1e-30));final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(fourExtrema),GoalType.MAXIMIZE,new InitialGuess(new double[]{1,0}),new MultiDirectionalSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],2e-8);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXpYp,optimum.getValue(),2e-12);Assert.assertTrue(optimizer.getEvaluations()> 180);Assert.assertTrue(optimizer.getEvaluations()< 220);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testRosenbrock",0,"@Test public void testRosenbrock(){MultivariateFunction rosenbrock=new MultivariateFunction(){public double value(double[]x){++count;double a=x[1]- x[0]* x[0];double b=1.0 - x[0];return 100 * a * a + b * b;}};count=0;SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(rosenbrock),GoalType.MINIMIZE,new InitialGuess(new double[]{-1.2,1}),new MultiDirectionalSimplex(new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}}));Assert.assertEquals(count,optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 50);Assert.assertTrue(optimizer.getEvaluations()< 100);Assert.assertTrue(optimum.getValue()> 1e-2);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testPowell",0,"@Test public void testPowell(){MultivariateFunction powell=new MultivariateFunction(){public double value(double[]x){++count;double a=x[0]+ 10 * x[1];double b=x[2]- x[3];double c=x[1]- 2 * x[2];double d=x[0]- x[3];return a * a + 5 * b * b + c * c * c* c + 10 * d * d* d* d;}};count=0;SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);PointValuePair optimum=optimizer.optimize(new MaxEval(1000),new ObjectiveFunction(powell),GoalType.MINIMIZE,new InitialGuess(new double[]{3,-1,0,1}),new MultiDirectionalSimplex(4));Assert.assertEquals(count,optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 800);Assert.assertTrue(optimizer.getEvaluations()< 900);Assert.assertTrue(optimum.getValue()> 1e-2);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest.testMath283",0,"@Test public void testMath283(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-14,1e-14);final Gaussian2D function=new Gaussian2D(0,0,1);PointValuePair estimate=optimizer.optimize(new MaxEval(1000),new ObjectiveFunction(function),GoalType.MAXIMIZE,new InitialGuess(function.getMaximumPosition()),new MultiDirectionalSimplex(2));final double EPSILON=1e-5;final double expectedMaximum=function.getMaximum();final double actualMaximum=estimate.getValue();Assert.assertEquals(expectedMaximum,actualMaximum,EPSILON);final double[]expectedPosition=function.getMaximumPosition();final double[]actualPosition=estimate.getPoint();Assert.assertEquals(expectedPosition[0],actualPosition[0],EPSILON);Assert.assertEquals(expectedPosition[1],actualPosition[1],EPSILON);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testIdentity",0,"@Test public void testIdentity(){FieldRotation<DerivativeStructure> r=createRotation(1,0,0,0,false);checkVector(r.applyTo(createVector(1,0,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,0,1));checkAngle(r.getAngle(),0);r=createRotation(-1,0,0,0,false);checkVector(r.applyTo(createVector(1,0,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,0,1));checkAngle(r.getAngle(),0);r=createRotation(42,0,0,0,true);checkVector(r.applyTo(createVector(1,0,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,0,1));checkAngle(r.getAngle(),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testAxisAngle",0,"@Test public void testAxisAngle()throws MathIllegalArgumentException {FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(createAxis(10,10,10),createAngle(2 * FastMath.PI / 3));checkVector(r.applyTo(createVector(1,0,0)),createVector(0,1,0));checkVector(r.applyTo(createVector(0,1,0)),createVector(0,0,1));checkVector(r.applyTo(createVector(0,0,1)),createVector(1,0,0));double s=1 / FastMath.sqrt(3);checkVector(r.getAxis(),createVector(s,s,s));checkAngle(r.getAngle(),2 * FastMath.PI / 3);try {new FieldRotation<DerivativeStructure>(createAxis(0,0,0),createAngle(2 * FastMath.PI / 3));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}r=new FieldRotation<DerivativeStructure>(createAxis(0,0,1),createAngle(1.5 * FastMath.PI));checkVector(r.getAxis(),createVector(0,0,-1));checkAngle(r.getAngle(),0.5 * FastMath.PI);r=new FieldRotation<DerivativeStructure>(createAxis(0,1,0),createAngle(FastMath.PI));checkVector(r.getAxis(),createVector(0,1,0));checkAngle(r.getAngle(),FastMath.PI);checkVector(createRotation(1,0,0,0,false).getAxis(),createVector(1,0,0));}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testRevert",0,"@Test public void testRevert(){double a=0.001;double b=0.36;double c=0.48;double d=0.8;FieldRotation<DerivativeStructure> r=createRotation(a,b,c,d,true);double a2=a * a;double b2=b * b;double c2=c * c;double d2=d * d;double den=(a2 + b2 + c2+ d2)* FastMath.sqrt(a2 + b2 + c2+ d2);Assert.assertEquals((b2 + c2 + d2)/ den,r.getQ0().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(-a * b / den,r.getQ0().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(-a * c / den,r.getQ0().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(-a * d / den,r.getQ0().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(-b * a / den,r.getQ1().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals((a2 + c2 + d2)/ den,r.getQ1().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(-b * c / den,r.getQ1().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(-b * d / den,r.getQ1().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(-c * a / den,r.getQ2().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(-c * b / den,r.getQ2().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals((a2 + b2 + d2)/ den,r.getQ2().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(-c * d / den,r.getQ2().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(-d * a / den,r.getQ3().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(-d * b / den,r.getQ3().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(-d * c / den,r.getQ3().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals((a2 + b2 + c2)/ den,r.getQ3().getPartialDerivative(0,0,0,1),1.0e-15);FieldRotation<DerivativeStructure> reverted=r.revert();FieldRotation<DerivativeStructure> rrT=r.applyTo(reverted);checkRotationDS(rrT,1,0,0,0);Assert.assertEquals(0,rrT.getQ0().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ0().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ0().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rrT.getQ0().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(0,rrT.getQ1().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ1().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ1().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rrT.getQ1().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(0,rrT.getQ2().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ2().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ2().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rrT.getQ2().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(0,rrT.getQ3().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ3().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rrT.getQ3().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rrT.getQ3().getPartialDerivative(0,0,0,1),1.0e-15);FieldRotation<DerivativeStructure> rTr=reverted.applyTo(r);checkRotationDS(rTr,1,0,0,0);Assert.assertEquals(0,rTr.getQ0().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ0().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ0().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rTr.getQ0().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(0,rTr.getQ1().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ1().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ1().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rTr.getQ1().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(0,rTr.getQ2().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ2().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ2().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rTr.getQ2().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(0,rTr.getQ3().getPartialDerivative(1,0,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ3().getPartialDerivative(0,1,0,0),1.0e-15);Assert.assertEquals(0,rTr.getQ3().getPartialDerivative(0,0,1,0),1.0e-15);Assert.assertEquals(0,rTr.getQ3().getPartialDerivative(0,0,0,1),1.0e-15);Assert.assertEquals(r.getAngle().getReal(),reverted.getAngle().getReal(),1.0e-15);Assert.assertEquals(-1,FieldVector3D.dotProduct(r.getAxis(),reverted.getAxis()).getReal(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testVectorOnePair",0,"@Test public void testVectorOnePair()throws MathArithmeticException {FieldVector3D<DerivativeStructure> u=createVector(3,2,1);FieldVector3D<DerivativeStructure> v=createVector(-4,2,2);FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(u,v);checkVector(r.applyTo(u.scalarMultiply(v.getNorm())),v.scalarMultiply(u.getNorm()));checkAngle(new FieldRotation<DerivativeStructure>(u,u.negate()).getAngle(),FastMath.PI);try {new FieldRotation<DerivativeStructure>(u,createVector(0,0,0));Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testVectorTwoPairs",0,"@Test public void testVectorTwoPairs()throws MathArithmeticException {FieldVector3D<DerivativeStructure> u1=createVector(3,0,0);FieldVector3D<DerivativeStructure> u2=createVector(0,5,0);FieldVector3D<DerivativeStructure> v1=createVector(0,0,2);FieldVector3D<DerivativeStructure> v2=createVector(-2,0,2);FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(u1,u2,v1,v2);checkVector(r.applyTo(createVector(1,0,0)),createVector(0,0,1));checkVector(r.applyTo(createVector(0,1,0)),createVector(-1,0,0));r=new FieldRotation<DerivativeStructure>(u1,u2,u1.negate(),u2.negate());FieldVector3D<DerivativeStructure> axis=r.getAxis();if (FieldVector3D.dotProduct(axis,createVector(0,0,1)).getReal()> 0){checkVector(axis,createVector(0,0,1));}else {checkVector(axis,createVector(0,0,-1));}checkAngle(r.getAngle(),FastMath.PI);double sqrt=FastMath.sqrt(2)/ 2;r=new FieldRotation<DerivativeStructure>(createVector(1,0,0),createVector(0,1,0),createVector(0.5,0.5,sqrt),createVector(0.5,0.5,-sqrt));checkRotationDS(r,sqrt,0.5,0.5,0);r=new FieldRotation<DerivativeStructure>(u1,u2,u1,FieldVector3D.crossProduct(u1,u2));checkRotationDS(r,sqrt,-sqrt,0,0);checkRotationDS(new FieldRotation<DerivativeStructure>(u1,u2,u1,u2),1,0,0,0);try {new FieldRotation<DerivativeStructure>(u1,u2,createVector(0,0,0),v2);Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testMatrix",0,"@Test public void testMatrix()throws NotARotationMatrixException {try {createRotation(new double[][]{{0.0,1.0,0.0},{1.0,0.0,0.0}},1.0e-7);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}try {createRotation(new double[][]{{0.445888,0.797184,-0.407040},{0.821760,-0.184320,0.539200},{-0.354816,0.574912,0.737280}},1.0e-7);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}try {createRotation(new double[][]{{0.4,0.8,-0.4},{-0.4,0.6,0.7},{0.8,-0.2,0.5}},1.0e-15);Assert.fail(""Expecting NotARotationMatrixException"");}catch(NotARotationMatrixException nrme){}checkRotationDS(createRotation(new double[][]{{0.445888,0.797184,-0.407040},{-0.354816,0.574912,0.737280},{0.821760,-0.184320,0.539200}},1.0e-10),0.8,0.288,0.384,0.36);checkRotationDS(createRotation(new double[][]{{0.539200,0.737280,0.407040},{0.184320,-0.574912,0.797184},{0.821760,-0.354816,-0.445888}},1.0e-10),0.36,0.8,0.288,0.384);checkRotationDS(createRotation(new double[][]{{-0.445888,0.797184,-0.407040},{0.354816,0.574912,0.737280},{0.821760,0.184320,-0.539200}},1.0e-10),0.384,0.36,0.8,0.288);checkRotationDS(createRotation(new double[][]{{-0.539200,0.737280,0.407040},{-0.184320,-0.574912,0.797184},{0.821760,0.354816,0.445888}},1.0e-10),0.288,0.384,0.36,0.8);double[][]m1={{0.0,1.0,0.0},{0.0,0.0,1.0},{1.0,0.0,0.0}};FieldRotation<DerivativeStructure> r=createRotation(m1,1.0e-7);checkVector(r.applyTo(createVector(1,0,0)),createVector(0,0,1));checkVector(r.applyTo(createVector(0,1,0)),createVector(1,0,0));checkVector(r.applyTo(createVector(0,0,1)),createVector(0,1,0));double[][]m2={{0.83203,-0.55012,-0.07139},{0.48293,0.78164,-0.39474},{0.27296,0.29396,0.91602}};r=createRotation(m2,1.0e-12);DerivativeStructure[][]m3=r.getMatrix();double d00=m2[0][0]- m3[0][0].getReal();double d01=m2[0][1]- m3[0][1].getReal();double d02=m2[0][2]- m3[0][2].getReal();double d10=m2[1][0]- m3[1][0].getReal();double d11=m2[1][1]- m3[1][1].getReal();double d12=m2[1][2]- m3[1][2].getReal();double d20=m2[2][0]- m3[2][0].getReal();double d21=m2[2][1]- m3[2][1].getReal();double d22=m2[2][2]- m3[2][2].getReal();Assert.assertTrue(FastMath.abs(d00)< 6.0e-6);Assert.assertTrue(FastMath.abs(d01)< 6.0e-6);Assert.assertTrue(FastMath.abs(d02)< 6.0e-6);Assert.assertTrue(FastMath.abs(d10)< 6.0e-6);Assert.assertTrue(FastMath.abs(d11)< 6.0e-6);Assert.assertTrue(FastMath.abs(d12)< 6.0e-6);Assert.assertTrue(FastMath.abs(d20)< 6.0e-6);Assert.assertTrue(FastMath.abs(d21)< 6.0e-6);Assert.assertTrue(FastMath.abs(d22)< 6.0e-6);Assert.assertTrue(FastMath.abs(d00)> 4.0e-7);Assert.assertTrue(FastMath.abs(d01)> 4.0e-7);Assert.assertTrue(FastMath.abs(d02)> 4.0e-7);Assert.assertTrue(FastMath.abs(d10)> 4.0e-7);Assert.assertTrue(FastMath.abs(d11)> 4.0e-7);Assert.assertTrue(FastMath.abs(d12)> 4.0e-7);Assert.assertTrue(FastMath.abs(d20)> 4.0e-7);Assert.assertTrue(FastMath.abs(d21)> 4.0e-7);Assert.assertTrue(FastMath.abs(d22)> 4.0e-7);for (int i=0;i < 3;++i){for (int j=0;j < 3;++j){double m3tm3=m3[i][0].getReal()* m3[j][0].getReal()+ m3[i][1].getReal()* m3[j][1].getReal()+ m3[i][2].getReal()* m3[j][2].getReal();if (i == j){Assert.assertTrue(FastMath.abs(m3tm3 - 1.0)< 1.0e-10);}else {Assert.assertTrue(FastMath.abs(m3tm3)< 1.0e-10);}}}checkVector(r.applyTo(createVector(1,0,0)),new FieldVector3D<DerivativeStructure>(m3[0][0],m3[1][0],m3[2][0]));checkVector(r.applyTo(createVector(0,1,0)),new FieldVector3D<DerivativeStructure>(m3[0][1],m3[1][1],m3[2][1]));checkVector(r.applyTo(createVector(0,0,1)),new FieldVector3D<DerivativeStructure>(m3[0][2],m3[1][2],m3[2][2]));double[][]m4={{1.0,0.0,0.0},{0.0,-1.0,0.0},{0.0,0.0,-1.0}};r=createRotation(m4,1.0e-7);checkAngle(r.getAngle(),FastMath.PI);try {double[][]m5={{0.0,0.0,1.0},{0.0,1.0,0.0},{1.0,0.0,0.0}};r=createRotation(m5,1.0e-7);Assert.fail(""got "" + r + "",should have caught an exception"");}catch(NotARotationMatrixException e){}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testAngles",0,"@Test public void testAngles()throws CardanEulerSingularityException {RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};for (int i=0;i < CardanOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=0.3){for (double alpha2=-1.55;alpha2 < 1.55;alpha2+=0.3){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=0.3){FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(CardanOrders[i],new DerivativeStructure(3,1,0,alpha1),new DerivativeStructure(3,1,1,alpha2),new DerivativeStructure(3,1,2,alpha3));DerivativeStructure[]angles=r.getAngles(CardanOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};for (int i=0;i < EulerOrders.length;++i){for (double alpha1=0.1;alpha1 < 6.2;alpha1+=0.3){for (double alpha2=0.05;alpha2 < 3.1;alpha2+=0.3){for (double alpha3=0.1;alpha3 < 6.2;alpha3+=0.3){FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(EulerOrders[i],new DerivativeStructure(3,1,0,alpha1),new DerivativeStructure(3,1,1,alpha2),new DerivativeStructure(3,1,2,alpha3));DerivativeStructure[]angles=r.getAngles(EulerOrders[i]);checkAngle(angles[0],alpha1);checkAngle(angles[1],alpha2);checkAngle(angles[2],alpha3);}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testSingularities",0,"@Test public void testSingularities(){RotationOrder[]CardanOrders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX};double[]singularCardanAngle={FastMath.PI / 2,-FastMath.PI / 2};for (int i=0;i < CardanOrders.length;++i){for (int j=0;j < singularCardanAngle.length;++j){FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(CardanOrders[i],new DerivativeStructure(3,1,0,0.1),new DerivativeStructure(3,1,1,singularCardanAngle[j]),new DerivativeStructure(3,1,2,0.3));try {r.getAngles(CardanOrders[i]);Assert.fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}}}RotationOrder[]EulerOrders={RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};double[]singularEulerAngle={0,FastMath.PI};for (int i=0;i < EulerOrders.length;++i){for (int j=0;j < singularEulerAngle.length;++j){FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(EulerOrders[i],new DerivativeStructure(3,1,0,0.1),new DerivativeStructure(3,1,1,singularEulerAngle[j]),new DerivativeStructure(3,1,2,0.3));try {r.getAngles(EulerOrders[i]);Assert.fail(""an exception should have been caught"");}catch(CardanEulerSingularityException cese){}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testQuaternion",0,"@Test public void testQuaternion()throws MathIllegalArgumentException {FieldRotation<DerivativeStructure> r1=new FieldRotation<DerivativeStructure>(createVector(2,-3,5),createAngle(1.7));double n=23.5;FieldRotation<DerivativeStructure> r2=new FieldRotation<DerivativeStructure>(r1.getQ0().multiply(n),r1.getQ1().multiply(n),r1.getQ2().multiply(n),r1.getQ3().multiply(n),true);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<DerivativeStructure> u=createVector(x,y,z);checkVector(r2.applyTo(u),r1.applyTo(u));}}}r1=createRotation(0.288,0.384,0.36,0.8,false);checkRotationDS(r1,-r1.getQ0().getReal(),-r1.getQ1().getReal(),-r1.getQ2().getReal(),-r1.getQ3().getReal());Assert.assertEquals(0.288,r1.toRotation().getQ0(),1.0e-15);Assert.assertEquals(0.384,r1.toRotation().getQ1(),1.0e-15);Assert.assertEquals(0.36,r1.toRotation().getQ2(),1.0e-15);Assert.assertEquals(0.8,r1.toRotation().getQ3(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testCompose",0,"@Test public void testCompose()throws MathIllegalArgumentException {FieldRotation<DerivativeStructure> r1=new FieldRotation<DerivativeStructure>(createVector(2,-3,5),createAngle(1.7));FieldRotation<DerivativeStructure> r2=new FieldRotation<DerivativeStructure>(createVector(-1,3,2),createAngle(0.3));FieldRotation<DerivativeStructure> r3=r2.applyTo(r1);FieldRotation<DerivativeStructure> r3Double=r2.applyTo(new Rotation(r1.getQ0().getReal(),r1.getQ1().getReal(),r1.getQ2().getReal(),r1.getQ3().getReal(),false));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<DerivativeStructure> u=createVector(x,y,z);checkVector(r2.applyTo(r1.applyTo(u)),r3.applyTo(u));checkVector(r2.applyTo(r1.applyTo(u)),r3Double.applyTo(u));}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testComposeInverse",0,"@Test public void testComposeInverse()throws MathIllegalArgumentException {FieldRotation<DerivativeStructure> r1=new FieldRotation<DerivativeStructure>(createVector(2,-3,5),createAngle(1.7));FieldRotation<DerivativeStructure> r2=new FieldRotation<DerivativeStructure>(createVector(-1,3,2),createAngle(0.3));FieldRotation<DerivativeStructure> r3=r2.applyInverseTo(r1);FieldRotation<DerivativeStructure> r3Double=r2.applyInverseTo(new Rotation(r1.getQ0().getReal(),r1.getQ1().getReal(),r1.getQ2().getReal(),r1.getQ3().getReal(),false));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<DerivativeStructure> u=createVector(x,y,z);checkVector(r2.applyInverseTo(r1.applyTo(u)),r3.applyTo(u));checkVector(r2.applyInverseTo(r1.applyTo(u)),r3Double.applyTo(u));}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testDoubleVectors",0,"@Test public void testDoubleVectors()throws MathIllegalArgumentException {Well1024a random=new Well1024a(0x180b41cfeeffaf67l);UnitSphereRandomVectorGenerator g=new UnitSphereRandomVectorGenerator(3,random);for (int i=0;i < 10;++i){double[]unit=g.nextVector();FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(createVector(unit[0],unit[1],unit[2]),createAngle(random.nextDouble()));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<DerivativeStructure> uds=createVector(x,y,z);FieldVector3D<DerivativeStructure> ruds=r.applyTo(uds);FieldVector3D<DerivativeStructure> rIuds=r.applyInverseTo(uds);Vector3D u=new Vector3D(x,y,z);FieldVector3D<DerivativeStructure> ru=r.applyTo(u);FieldVector3D<DerivativeStructure> rIu=r.applyInverseTo(u);DerivativeStructure[]ruArray=new DerivativeStructure[3];r.applyTo(new double[]{x,y,z},ruArray);DerivativeStructure[]rIuArray=new DerivativeStructure[3];r.applyInverseTo(new double[]{x,y,z},rIuArray);checkVector(ruds,ru);checkVector(ruds,new FieldVector3D<DerivativeStructure>(ruArray));checkVector(rIuds,rIu);checkVector(rIuds,new FieldVector3D<DerivativeStructure>(rIuArray));}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testDoubleRotations",0,"@Test public void testDoubleRotations()throws MathIllegalArgumentException {Well1024a random=new Well1024a(0x180b41cfeeffaf67l);UnitSphereRandomVectorGenerator g=new UnitSphereRandomVectorGenerator(3,random);for (int i=0;i < 10;++i){double[]unit1=g.nextVector();Rotation r1=new Rotation(new Vector3D(unit1[0],unit1[1],unit1[2]),random.nextDouble());FieldRotation<DerivativeStructure> r1Prime=new FieldRotation<DerivativeStructure>(new DerivativeStructure(4,1,0,r1.getQ0()),new DerivativeStructure(4,1,1,r1.getQ1()),new DerivativeStructure(4,1,2,r1.getQ2()),new DerivativeStructure(4,1,3,r1.getQ3()),false);double[]unit2=g.nextVector();FieldRotation<DerivativeStructure> r2=new FieldRotation<DerivativeStructure>(createVector(unit2[0],unit2[1],unit2[2]),createAngle(random.nextDouble()));FieldRotation<DerivativeStructure> rA=FieldRotation.applyTo(r1,r2);FieldRotation<DerivativeStructure> rB=r1Prime.applyTo(r2);FieldRotation<DerivativeStructure> rC=FieldRotation.applyInverseTo(r1,r2);FieldRotation<DerivativeStructure> rD=r1Prime.applyInverseTo(r2);for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<DerivativeStructure> uds=createVector(x,y,z);checkVector(r1Prime.applyTo(uds),FieldRotation.applyTo(r1,uds));checkVector(r1Prime.applyInverseTo(uds),FieldRotation.applyInverseTo(r1,uds));checkVector(rA.applyTo(uds),rB.applyTo(uds));checkVector(rA.applyInverseTo(uds),rB.applyInverseTo(uds));checkVector(rC.applyTo(uds),rD.applyTo(uds));checkVector(rC.applyInverseTo(uds),rD.applyInverseTo(uds));}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testDerivatives",0,"@Test public void testDerivatives(){double eps=5.0e-16;double kx=2;double ky=-3;double kz=5;double n2=kx * kx + ky * ky + kz * kz;double n=FastMath.sqrt(n2);double theta=1.7;double cosTheta=FastMath.cos(theta);double sinTheta=FastMath.sin(theta);FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(createAxis(kx,ky,kz),createAngle(theta));Vector3D a=new Vector3D(kx / n,ky / n,kz / n);RealMatrix dadk=MatrixUtils.createRealMatrix(new double[][]{{(ky * ky + kz * kz)/ (n * n2),-kx * ky / (n * n2),-kx * kz / (n * n2)},{-kx * ky / (n * n2),(kx * kx + kz * kz)/ (n * n2),-ky * kz / (n * n2)},{-kx * kz / (n * n2),-ky * kz / (n * n2),(kx * kx + ky * ky)/ (n * n2)}});for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){Vector3D u=new Vector3D(x,y,z);FieldVector3D<DerivativeStructure> v=r.applyTo(createVector(x,y,z));double dot=Vector3D.dotProduct(u,a);Vector3D cross=Vector3D.crossProduct(a,u);double c1=1 - cosTheta;double c2=c1 * dot;Vector3D rt=new Vector3D(cosTheta,u,c2,a,sinTheta,cross);Assert.assertEquals(rt.getX(),v.getX().getReal(),eps);Assert.assertEquals(rt.getY(),v.getY().getReal(),eps);Assert.assertEquals(rt.getZ(),v.getZ().getReal(),eps);RealMatrix dvda=MatrixUtils.createRealMatrix(new double[][]{{c1 * x * a.getX()+ c2,c1 * y * a.getX()+ sinTheta * z,c1 * z * a.getX()- sinTheta * y},{c1 * x * a.getY()- sinTheta * z,c1 * y * a.getY()+ c2,c1 * z * a.getY()+ sinTheta * x},{c1 * x * a.getZ()+ sinTheta * y,c1 * y * a.getZ()- sinTheta * x,c1 * z * a.getZ()+ c2}});RealMatrix dvdk=dvda.multiply(dadk);Assert.assertEquals(dvdk.getEntry(0,0),v.getX().getPartialDerivative(1,0,0,0),eps);Assert.assertEquals(dvdk.getEntry(0,1),v.getX().getPartialDerivative(0,1,0,0),eps);Assert.assertEquals(dvdk.getEntry(0,2),v.getX().getPartialDerivative(0,0,1,0),eps);Assert.assertEquals(dvdk.getEntry(1,0),v.getY().getPartialDerivative(1,0,0,0),eps);Assert.assertEquals(dvdk.getEntry(1,1),v.getY().getPartialDerivative(0,1,0,0),eps);Assert.assertEquals(dvdk.getEntry(1,2),v.getY().getPartialDerivative(0,0,1,0),eps);Assert.assertEquals(dvdk.getEntry(2,0),v.getZ().getPartialDerivative(1,0,0,0),eps);Assert.assertEquals(dvdk.getEntry(2,1),v.getZ().getPartialDerivative(0,1,0,0),eps);Assert.assertEquals(dvdk.getEntry(2,2),v.getZ().getPartialDerivative(0,0,1,0),eps);Vector3D dvdTheta=new Vector3D(-sinTheta,u,sinTheta * dot,a,cosTheta,cross);Assert.assertEquals(dvdTheta.getX(),v.getX().getPartialDerivative(0,0,0,1),eps);Assert.assertEquals(dvdTheta.getY(),v.getY().getPartialDerivative(0,0,0,1),eps);Assert.assertEquals(dvdTheta.getZ(),v.getZ().getPartialDerivative(0,0,0,1),eps);}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testArray",0,"@Test public void testArray()throws MathIllegalArgumentException {FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(createAxis(2,-3,5),createAngle(1.7));for (double x=-0.9;x < 0.9;x+=0.2){for (double y=-0.9;y < 0.9;y+=0.2){for (double z=-0.9;z < 0.9;z+=0.2){FieldVector3D<DerivativeStructure> u=createVector(x,y,z);FieldVector3D<DerivativeStructure> v=r.applyTo(u);DerivativeStructure[]out=new DerivativeStructure[3];r.applyTo(new DerivativeStructure[]{u.getX(),u.getY(),u.getZ()},out);Assert.assertEquals(v.getX().getReal(),out[0].getReal(),1.0e-10);Assert.assertEquals(v.getY().getReal(),out[1].getReal(),1.0e-10);Assert.assertEquals(v.getZ().getReal(),out[2].getReal(),1.0e-10);r.applyInverseTo(out,out);Assert.assertEquals(u.getX().getReal(),out[0].getReal(),1.0e-10);Assert.assertEquals(u.getY().getReal(),out[1].getReal(),1.0e-10);Assert.assertEquals(u.getZ().getReal(),out[2].getReal(),1.0e-10);}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testApplyInverseTo",0,"@Test public void testApplyInverseTo()throws MathIllegalArgumentException {DerivativeStructure[]in=new DerivativeStructure[3];DerivativeStructure[]out=new DerivativeStructure[3];DerivativeStructure[]rebuilt=new DerivativeStructure[3];FieldRotation<DerivativeStructure> r=new FieldRotation<DerivativeStructure>(createVector(2,-3,5),createAngle(1.7));for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){FieldVector3D<DerivativeStructure> u=createVector(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));r.applyInverseTo(r.applyTo(u));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));in[0]=u.getX();in[1]=u.getY();in[2]=u.getZ();r.applyTo(in,out);r.applyInverseTo(out,rebuilt);Assert.assertEquals(in[0].getReal(),rebuilt[0].getReal(),1.0e-12);Assert.assertEquals(in[1].getReal(),rebuilt[1].getReal(),1.0e-12);Assert.assertEquals(in[2].getReal(),rebuilt[2].getReal(),1.0e-12);}}r=createRotation(1,0,0,0,false);for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){FieldVector3D<DerivativeStructure> u=createVector(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}r=new FieldRotation<DerivativeStructure>(createVector(0,0,1),createAngle(FastMath.PI));for (double lambda=0;lambda < 6.2;lambda+=0.2){for (double phi=-1.55;phi < 1.55;phi+=0.2){FieldVector3D<DerivativeStructure> u=createVector(FastMath.cos(lambda)* FastMath.cos(phi),FastMath.sin(lambda)* FastMath.cos(phi),FastMath.sin(phi));checkVector(u,r.applyInverseTo(r.applyTo(u)));checkVector(u,r.applyTo(r.applyInverseTo(u)));}}}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testIssue639",0,"@Test public void testIssue639()throws MathArithmeticException {FieldVector3D<DerivativeStructure> u1=createVector(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-3822921525525679.0 / 4294967296.0);FieldVector3D<DerivativeStructure> u2=createVector(-5712344449280879.0 / 2097152.0,-2275058564560979.0 / 1048576.0,4423475992255071.0 / 65536.0);FieldRotation<DerivativeStructure> rot=new FieldRotation<DerivativeStructure>(u1,u2,createVector(1,0,0),createVector(0,0,1));Assert.assertEquals(0.6228370359608200639829222,rot.getQ0().getReal(),1.0e-15);Assert.assertEquals(0.0257707621456498790029987,rot.getQ1().getReal(),1.0e-15);Assert.assertEquals(-0.0000000002503012255839931,rot.getQ2().getReal(),1.0e-15);Assert.assertEquals(-0.7819270390861109450724902,rot.getQ3().getReal(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.FieldRotationDSTest.testIssue801",0,"@Test public void testIssue801()throws MathArithmeticException {FieldVector3D<DerivativeStructure> u1=createVector(0.9999988431610581,-0.0015210774290851095,0.0);FieldVector3D<DerivativeStructure> u2=createVector(0.0,0.0,1.0);FieldVector3D<DerivativeStructure> v1=createVector(0.9999999999999999,0.0,0.0);FieldVector3D<DerivativeStructure> v2=createVector(0.0,0.0,-1.0);FieldRotation<DerivativeStructure> quat=new FieldRotation<DerivativeStructure>(u1,u2,v1,v2);double q2=quat.getQ0().getReal()* quat.getQ0().getReal()+ quat.getQ1().getReal()* quat.getQ1().getReal()+ quat.getQ2().getReal()* quat.getQ2().getReal()+ quat.getQ3().getReal()* quat.getQ3().getReal();Assert.assertEquals(1.0,q2,1.0e-14);Assert.assertEquals(0.0,FieldVector3D.angle(v1,quat.applyTo(u1)).getReal(),1.0e-14);Assert.assertEquals(0.0,FieldVector3D.angle(v2,quat.applyTo(u2)).getReal(),1.0e-14);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testConstructors",0,"@Test public void testConstructors()throws DimensionMismatchException {double r=FastMath.sqrt(2)/ 2;checkVector(new Vector3D(2,new Vector3D(FastMath.PI / 3,-FastMath.PI / 4)),r,r * FastMath.sqrt(3),-2 * r);checkVector(new Vector3D(2,Vector3D.PLUS_I,-3,Vector3D.MINUS_K),2,0,3);checkVector(new Vector3D(2,Vector3D.PLUS_I,5,Vector3D.PLUS_J,-3,Vector3D.MINUS_K),2,5,3);checkVector(new Vector3D(2,Vector3D.PLUS_I,5,Vector3D.PLUS_J,5,Vector3D.MINUS_J,-3,Vector3D.MINUS_K),2,0,3);checkVector(new Vector3D(new double[]{2,5,-3}),2,5,-3);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testSpace",0,"@Test public void testSpace(){Space space=new Vector3D(1,2,2).getSpace();Assert.assertEquals(3,space.getDimension());Assert.assertEquals(2,space.getSubSpace().getDimension());Space deserialized=(Space)TestUtils.serializeAndRecover(space);Assert.assertTrue(space == deserialized);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testZero",0,"@Test public void testZero(){Assert.assertEquals(0,new Vector3D(1,2,2).getZero().getNorm(),1.0e-15);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testEquals",0,"@Test public void testEquals(){Vector3D u1=new Vector3D(1,2,3);Vector3D u2=new Vector3D(1,2,3);Assert.assertTrue(u1.equals(u1));Assert.assertTrue(u1.equals(u2));Assert.assertFalse(u1.equals(new Rotation(1,0,0,0,false)));Assert.assertFalse(u1.equals(new Vector3D(1,2,3 + 10 * Precision.EPSILON)));Assert.assertFalse(u1.equals(new Vector3D(1,2 + 10 * Precision.EPSILON,3)));Assert.assertFalse(u1.equals(new Vector3D(1 + 10 * Precision.EPSILON,2,3)));Assert.assertTrue(new Vector3D(0,Double.NaN,0).equals(new Vector3D(0,0,Double.NaN)));}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testHash",0,"@Test public void testHash(){Assert.assertEquals(new Vector3D(0,Double.NaN,0).hashCode(),new Vector3D(0,0,Double.NaN).hashCode());Vector3D u=new Vector3D(1,2,3);Vector3D v=new Vector3D(1,2,3 + 10 * Precision.EPSILON);Assert.assertTrue(u.hashCode()!= v.hashCode());}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testInfinite",0,"@Test public void testInfinite(){Assert.assertTrue(new Vector3D(1,1,Double.NEGATIVE_INFINITY).isInfinite());Assert.assertTrue(new Vector3D(1,Double.NEGATIVE_INFINITY,1).isInfinite());Assert.assertTrue(new Vector3D(Double.NEGATIVE_INFINITY,1,1).isInfinite());Assert.assertFalse(new Vector3D(1,1,2).isInfinite());Assert.assertFalse(new Vector3D(1,Double.NaN,Double.NEGATIVE_INFINITY).isInfinite());}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNaN",0,"@Test public void testNaN(){Assert.assertTrue(new Vector3D(1,1,Double.NaN).isNaN());Assert.assertTrue(new Vector3D(1,Double.NaN,1).isNaN());Assert.assertTrue(new Vector3D(Double.NaN,1,1).isNaN());Assert.assertFalse(new Vector3D(1,1,2).isNaN());Assert.assertFalse(new Vector3D(1,1,Double.NEGATIVE_INFINITY).isNaN());}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testToString",0,"@Test public void testToString(){Assert.assertEquals(""{3;2;1}"",new Vector3D(3,2,1).toString());NumberFormat format=new DecimalFormat(""0.000"",new DecimalFormatSymbols(Locale.US));Assert.assertEquals(""{3.000;2.000;1.000}"",new Vector3D(3,2,1).toString(format));}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testWrongDimension",0,"@Test(expected=DimensionMismatchException.class)public void testWrongDimension()throws DimensionMismatchException {new Vector3D(new double[]{2,5});}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testCoordinates",0,"@Test public void testCoordinates(){Vector3D v=new Vector3D(1,2,3);Assert.assertTrue(FastMath.abs(v.getX()- 1)< 1.0e-12);Assert.assertTrue(FastMath.abs(v.getY()- 2)< 1.0e-12);Assert.assertTrue(FastMath.abs(v.getZ()- 3)< 1.0e-12);double[]coordinates=v.toArray();Assert.assertTrue(FastMath.abs(coordinates[0]- 1)< 1.0e-12);Assert.assertTrue(FastMath.abs(coordinates[1]- 2)< 1.0e-12);Assert.assertTrue(FastMath.abs(coordinates[2]- 3)< 1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNorm1",0,"@Test public void testNorm1(){Assert.assertEquals(0.0,Vector3D.ZERO.getNorm1(),0);Assert.assertEquals(6.0,new Vector3D(1,-2,3).getNorm1(),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNorm",0,"@Test public void testNorm(){Assert.assertEquals(0.0,Vector3D.ZERO.getNorm(),0);Assert.assertEquals(FastMath.sqrt(14),new Vector3D(1,2,3).getNorm(),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNormSq",0,"@Test public void testNormSq(){Assert.assertEquals(0.0,new Vector3D(0,0,0).getNormSq(),0);Assert.assertEquals(14,new Vector3D(1,2,3).getNormSq(),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNormInf",0,"@Test public void testNormInf(){Assert.assertEquals(0.0,Vector3D.ZERO.getNormInf(),0);Assert.assertEquals(3.0,new Vector3D(1,-2,3).getNormInf(),0);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testDistance1",0,"@Test public void testDistance1(){Vector3D v1=new Vector3D(1,-2,3);Vector3D v2=new Vector3D(-4,2,0);Assert.assertEquals(0.0,Vector3D.distance1(Vector3D.MINUS_I,Vector3D.MINUS_I),0);Assert.assertEquals(12.0,Vector3D.distance1(v1,v2),1.0e-12);Assert.assertEquals(v1.subtract(v2).getNorm1(),Vector3D.distance1(v1,v2),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testDistance",0,"@Test public void testDistance(){Vector3D v1=new Vector3D(1,-2,3);Vector3D v2=new Vector3D(-4,2,0);Assert.assertEquals(0.0,Vector3D.distance(Vector3D.MINUS_I,Vector3D.MINUS_I),0);Assert.assertEquals(FastMath.sqrt(50),Vector3D.distance(v1,v2),1.0e-12);Assert.assertEquals(v1.subtract(v2).getNorm(),Vector3D.distance(v1,v2),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testDistanceSq",0,"@Test public void testDistanceSq(){Vector3D v1=new Vector3D(1,-2,3);Vector3D v2=new Vector3D(-4,2,0);Assert.assertEquals(0.0,Vector3D.distanceSq(Vector3D.MINUS_I,Vector3D.MINUS_I),0);Assert.assertEquals(50.0,Vector3D.distanceSq(v1,v2),1.0e-12);Assert.assertEquals(Vector3D.distance(v1,v2)* Vector3D.distance(v1,v2),Vector3D.distanceSq(v1,v2),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testDistanceInf",0,"@Test public void testDistanceInf(){Vector3D v1=new Vector3D(1,-2,3);Vector3D v2=new Vector3D(-4,2,0);Assert.assertEquals(0.0,Vector3D.distanceInf(Vector3D.MINUS_I,Vector3D.MINUS_I),0);Assert.assertEquals(5.0,Vector3D.distanceInf(v1,v2),1.0e-12);Assert.assertEquals(v1.subtract(v2).getNormInf(),Vector3D.distanceInf(v1,v2),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testSubtract",0,"@Test public void testSubtract(){Vector3D v1=new Vector3D(1,2,3);Vector3D v2=new Vector3D(-3,-2,-1);v1=v1.subtract(v2);checkVector(v1,4,4,4);checkVector(v2.subtract(v1),-7,-6,-5);checkVector(v2.subtract(3,v1),-15,-14,-13);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testAdd",0,"@Test public void testAdd(){Vector3D v1=new Vector3D(1,2,3);Vector3D v2=new Vector3D(-3,-2,-1);v1=v1.add(v2);checkVector(v1,-2,0,2);checkVector(v2.add(v1),-5,-2,1);checkVector(v2.add(3,v1),-9,-2,5);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testScalarProduct",0,"@Test public void testScalarProduct(){Vector3D v=new Vector3D(1,2,3);v=v.scalarMultiply(3);checkVector(v,3,6,9);checkVector(v.scalarMultiply(0.5),1.5,3,4.5);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testVectorialProducts",0,"@Test public void testVectorialProducts(){Vector3D v1=new Vector3D(2,1,-4);Vector3D v2=new Vector3D(3,1,-1);Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1,v2)- 11)< 1.0e-12);Vector3D v3=Vector3D.crossProduct(v1,v2);checkVector(v3,3,-10,-1);Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v1,v3))< 1.0e-12);Assert.assertTrue(FastMath.abs(Vector3D.dotProduct(v2,v3))< 1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testCrossProductCancellation",0,"@Test public void testCrossProductCancellation(){Vector3D v1=new Vector3D(9070467121.0,4535233560.0,1);Vector3D v2=new Vector3D(9070467123.0,4535233561.0,1);checkVector(Vector3D.crossProduct(v1,v2),-1,2,1);double scale=FastMath.scalb(1.0,100);Vector3D big1=new Vector3D(scale,v1);Vector3D small2=new Vector3D(1 / scale,v2);checkVector(Vector3D.crossProduct(big1,small2),-1,2,1);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testAngular",0,"@Test public void testAngular(){Assert.assertEquals(0,Vector3D.PLUS_I.getAlpha(),1.0e-10);Assert.assertEquals(0,Vector3D.PLUS_I.getDelta(),1.0e-10);Assert.assertEquals(FastMath.PI / 2,Vector3D.PLUS_J.getAlpha(),1.0e-10);Assert.assertEquals(0,Vector3D.PLUS_J.getDelta(),1.0e-10);Assert.assertEquals(0,Vector3D.PLUS_K.getAlpha(),1.0e-10);Assert.assertEquals(FastMath.PI / 2,Vector3D.PLUS_K.getDelta(),1.0e-10);Vector3D u=new Vector3D(-1,1,-1);Assert.assertEquals(3 * FastMath.PI / 4,u.getAlpha(),1.0e-10);Assert.assertEquals(-1.0 / FastMath.sqrt(3),FastMath.sin(u.getDelta()),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testAngularSeparation",0,"@Test public void testAngularSeparation()throws MathArithmeticException {Vector3D v1=new Vector3D(2,-1,4);Vector3D k=v1.normalize();Vector3D i=k.orthogonal();Vector3D v2=k.scalarMultiply(FastMath.cos(1.2)).add(i.scalarMultiply(FastMath.sin(1.2)));Assert.assertTrue(FastMath.abs(Vector3D.angle(v1,v2)- 1.2)< 1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNormalize",0,"@Test public void testNormalize()throws MathArithmeticException {Assert.assertEquals(1.0,new Vector3D(5,-4,2).normalize().getNorm(),1.0e-12);try {Vector3D.ZERO.normalize();Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException ae){}}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testNegate",0,"@Test public void testNegate(){checkVector(new Vector3D(0.1,2.5,1.3).negate(),-0.1,-2.5,-1.3);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testOrthogonal",0,"@Test public void testOrthogonal()throws MathArithmeticException {Vector3D v1=new Vector3D(0.1,2.5,1.3);Assert.assertEquals(0.0,Vector3D.dotProduct(v1,v1.orthogonal()),1.0e-12);Vector3D v2=new Vector3D(2.3,-0.003,7.6);Assert.assertEquals(0.0,Vector3D.dotProduct(v2,v2.orthogonal()),1.0e-12);Vector3D v3=new Vector3D(-1.7,1.4,0.2);Assert.assertEquals(0.0,Vector3D.dotProduct(v3,v3.orthogonal()),1.0e-12);Vector3D v4=new Vector3D(4.2,0.1,-1.8);Assert.assertEquals(0.0,Vector3D.dotProduct(v4,v4.orthogonal()),1.0e-12);try {new Vector3D(0,0,0).orthogonal();Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException ae){}}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testAngle",0,"@Test public void testAngle()throws MathArithmeticException {Assert.assertEquals(0.22572612855273393616,Vector3D.angle(new Vector3D(1,2,3),new Vector3D(4,5,6)),1.0e-12);Assert.assertEquals(7.98595620686106654517199e-8,Vector3D.angle(new Vector3D(1,2,3),new Vector3D(2,4,6.000001)),1.0e-12);Assert.assertEquals(3.14159257373023116985197793156,Vector3D.angle(new Vector3D(1,2,3),new Vector3D(-2,-4,-6.000001)),1.0e-12);try {Vector3D.angle(Vector3D.ZERO,Vector3D.PLUS_I);Assert.fail(""an exception should have been thrown"");}catch(MathArithmeticException ae){}}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testAccurateDotProduct",0,"@Test public void testAccurateDotProduct(){Vector3D u1=new Vector3D(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0);Vector3D u2=new Vector3D(-5712344449280879.0 / 2097152.0,-4550117129121957.0 / 2097152.0,8846951984510141.0 / 131072.0);double sNaive=u1.getX()* u2.getX()+ u1.getY()* u2.getY()+ u1.getZ()* u2.getZ();double sAccurate=u1.dotProduct(u2);Assert.assertEquals(0.0,sNaive,1.0e-30);Assert.assertEquals(-2088690039198397.0 / 1125899906842624.0,sAccurate,1.0e-16);}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testDotProduct",0,"@Test public void testDotProduct(){Well1024a random=new Well1024a(553267312521321234l);for (int i=0;i < 10000;++i){double ux=10000 * random.nextDouble();double uy=10000 * random.nextDouble();double uz=10000 * random.nextDouble();double vx=10000 * random.nextDouble();double vy=10000 * random.nextDouble();double vz=10000 * random.nextDouble();double sNaive=ux * vx + uy * vy + uz * vz;double sAccurate=new Vector3D(ux,uy,uz).dotProduct(new Vector3D(vx,vy,vz));Assert.assertEquals(sNaive,sAccurate,2.5e-16 * sAccurate);}}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testAccurateCrossProduct",0,"@Test public void testAccurateCrossProduct(){final Vector3D u1=new Vector3D(-1321008684645961.0 / 268435456.0,-5774608829631843.0 / 268435456.0,-7645843051051357.0 / 8589934592.0);final Vector3D u2=new Vector3D(1796571811118507.0 / 2147483648.0,7853468008299307.0 / 2147483648.0,2599586637357461.0 / 17179869184.0);final Vector3D u3=new Vector3D(12753243807587107.0 / 18446744073709551616.0,-2313766922703915.0 / 18446744073709551616.0,-227970081415313.0 / 288230376151711744.0);Vector3D cNaive=new Vector3D(u1.getY()* u2.getZ()- u1.getZ()* u2.getY(),u1.getZ()* u2.getX()- u1.getX()* u2.getZ(),u1.getX()* u2.getY()- u1.getY()* u2.getX());Vector3D cAccurate=u1.crossProduct(u2);Assert.assertTrue(u3.distance(cNaive)> 2.9 * u3.getNorm());Assert.assertEquals(0.0,u3.distance(cAccurate),1.0e-30 * cAccurate.getNorm());}"
"org.apache.commons.math3.geometry.euclidean.threed.Vector3DTest.testCrossProduct",0,"@Test public void testCrossProduct(){Well1024a random=new Well1024a(885362227452043214l);for (int i=0;i < 10000;++i){double ux=10000 * random.nextDouble();double uy=10000 * random.nextDouble();double uz=10000 * random.nextDouble();double vx=10000 * random.nextDouble();double vy=10000 * random.nextDouble();double vz=10000 * random.nextDouble();Vector3D cNaive=new Vector3D(uy * vz - uz * vy,uz * vx - ux * vz,ux * vy - uy * vx);Vector3D cAccurate=new Vector3D(ux,uy,uz).crossProduct(new Vector3D(vx,vy,vz));Assert.assertEquals(0.0,cAccurate.distance(cNaive),6.0e-15 * cAccurate.getNorm());}}"
"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBox",0,"@Test public void testBox(){PolyhedronsSet tree=new PolyhedronsSet(0,1,0,1,0,1);Assert.assertEquals(1.0,tree.getSize(),1.0e-10);Assert.assertEquals(6.0,tree.getBoundarySize(),1.0e-10);Vector3D barycenter=(Vector3D)tree.getBarycenter();Assert.assertEquals(0.5,barycenter.getX(),1.0e-10);Assert.assertEquals(0.5,barycenter.getY(),1.0e-10);Assert.assertEquals(0.5,barycenter.getZ(),1.0e-10);for (double x=-0.25;x < 1.25;x+=0.1){boolean xOK=(x >= 0.0)&& (x <= 1.0);for (double y=-0.25;y < 1.25;y+=0.1){boolean yOK=(y >= 0.0)&& (y <= 1.0);for (double z=-0.25;z < 1.25;z+=0.1){boolean zOK=(z >= 0.0)&& (z <= 1.0);Region.Location expected=(xOK && yOK && zOK)? Region.Location.INSIDE : Region.Location.OUTSIDE;Assert.assertEquals(expected,tree.checkPoint(new Vector3D(x,y,z)));}}}checkPoints(Region.Location.BOUNDARY,tree,new Vector3D[]{new Vector3D(0.0,0.5,0.5),new Vector3D(1.0,0.5,0.5),new Vector3D(0.5,0.0,0.5),new Vector3D(0.5,1.0,0.5),new Vector3D(0.5,0.5,0.0),new Vector3D(0.5,0.5,1.0)});checkPoints(Region.Location.OUTSIDE,tree,new Vector3D[]{new Vector3D(0.0,1.2,1.2),new Vector3D(1.0,1.2,1.2),new Vector3D(1.2,0.0,1.2),new Vector3D(1.2,1.0,1.2),new Vector3D(1.2,1.2,0.0),new Vector3D(1.2,1.2,1.0)});}"
"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testTetrahedron",0,"@Test public void testTetrahedron()throws MathArithmeticException {Vector3D vertex1=new Vector3D(1,2,3);Vector3D vertex2=new Vector3D(2,2,4);Vector3D vertex3=new Vector3D(2,3,3);Vector3D vertex4=new Vector3D(1,3,4);@SuppressWarnings(""unchecked"")PolyhedronsSet tree=(PolyhedronsSet)new RegionFactory<Euclidean3D>().buildConvex(new Plane(vertex3,vertex2,vertex1),new Plane(vertex2,vertex3,vertex4),new Plane(vertex4,vertex3,vertex1),new Plane(vertex1,vertex2,vertex4));Assert.assertEquals(1.0 / 3.0,tree.getSize(),1.0e-10);Assert.assertEquals(2.0 * FastMath.sqrt(3.0),tree.getBoundarySize(),1.0e-10);Vector3D barycenter=(Vector3D)tree.getBarycenter();Assert.assertEquals(1.5,barycenter.getX(),1.0e-10);Assert.assertEquals(2.5,barycenter.getY(),1.0e-10);Assert.assertEquals(3.5,barycenter.getZ(),1.0e-10);double third=1.0 / 3.0;checkPoints(Region.Location.BOUNDARY,tree,new Vector3D[]{vertex1,vertex2,vertex3,vertex4,new Vector3D(third,vertex1,third,vertex2,third,vertex3),new Vector3D(third,vertex2,third,vertex3,third,vertex4),new Vector3D(third,vertex3,third,vertex4,third,vertex1),new Vector3D(third,vertex4,third,vertex1,third,vertex2)});checkPoints(Region.Location.OUTSIDE,tree,new Vector3D[]{new Vector3D(1,2,4),new Vector3D(2,2,3),new Vector3D(2,3,4),new Vector3D(1,3,3)});}"
"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIsometry",0,"@Test public void testIsometry()throws MathArithmeticException,MathIllegalArgumentException {Vector3D vertex1=new Vector3D(1.1,2.2,3.3);Vector3D vertex2=new Vector3D(2.0,2.4,4.2);Vector3D vertex3=new Vector3D(2.8,3.3,3.7);Vector3D vertex4=new Vector3D(1.0,3.6,4.5);@SuppressWarnings(""unchecked"")PolyhedronsSet tree=(PolyhedronsSet)new RegionFactory<Euclidean3D>().buildConvex(new Plane(vertex3,vertex2,vertex1),new Plane(vertex2,vertex3,vertex4),new Plane(vertex4,vertex3,vertex1),new Plane(vertex1,vertex2,vertex4));Vector3D barycenter=(Vector3D)tree.getBarycenter();Vector3D s=new Vector3D(10.2,4.3,-6.7);Vector3D c=new Vector3D(-0.2,2.1,-3.2);Rotation r=new Rotation(new Vector3D(6.2,-4.4,2.1),0.12);tree=tree.rotate(c,r).translate(s);Vector3D newB=new Vector3D(1.0,s,1.0,c,1.0,r.applyTo(barycenter.subtract(c)));Assert.assertEquals(0.0,newB.subtract(tree.getBarycenter()).getNorm(),1.0e-10);final Vector3D[]expectedV=new Vector3D[]{new Vector3D(1.0,s,1.0,c,1.0,r.applyTo(vertex1.subtract(c))),new Vector3D(1.0,s,1.0,c,1.0,r.applyTo(vertex2.subtract(c))),new Vector3D(1.0,s,1.0,c,1.0,r.applyTo(vertex3.subtract(c))),new Vector3D(1.0,s,1.0,c,1.0,r.applyTo(vertex4.subtract(c)))};tree.getTree(true).visit(new BSPTreeVisitor<Euclidean3D>(){public Order visitOrder(BSPTree<Euclidean3D> node){return Order.MINUS_SUB_PLUS;}public void visitInternalNode(BSPTree<Euclidean3D> node){@SuppressWarnings(""unchecked"")BoundaryAttribute<Euclidean3D> attribute=(BoundaryAttribute<Euclidean3D>)node.getAttribute();if (attribute.getPlusOutside()!= null){checkFacet((SubPlane)attribute.getPlusOutside());}if (attribute.getPlusInside()!= null){checkFacet((SubPlane)attribute.getPlusInside());}}public void visitLeafNode(BSPTree<Euclidean3D> node){}private void checkFacet(SubPlane facet){Plane plane=(Plane)facet.getHyperplane();Vector2D[][]vertices=((PolygonsSet)facet.getRemainingRegion()).getVertices();Assert.assertEquals(1,vertices.length);for (int i=0;i < vertices[0].length;++i){Vector3D v=plane.toSpace(vertices[0][i]);double d=Double.POSITIVE_INFINITY;for (int k=0;k < expectedV.length;++k){d=FastMath.min(d,v.subtract(expectedV[k]).getNorm());}Assert.assertEquals(0,d,1.0e-10);}}});}"
"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testBuildBox",0,"@Test public void testBuildBox(){double x=1.0;double y=2.0;double z=3.0;double w=0.1;double l=1.0;PolyhedronsSet tree=new PolyhedronsSet(x - l,x + l,y - w,y + w,z - w,z + w);Vector3D barycenter=(Vector3D)tree.getBarycenter();Assert.assertEquals(x,barycenter.getX(),1.0e-10);Assert.assertEquals(y,barycenter.getY(),1.0e-10);Assert.assertEquals(z,barycenter.getZ(),1.0e-10);Assert.assertEquals(8 * l * w* w,tree.getSize(),1.0e-10);Assert.assertEquals(8 * w * (2 * l + w),tree.getBoundarySize(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testCross",0,"@Test public void testCross(){double x=1.0;double y=2.0;double z=3.0;double w=0.1;double l=1.0;PolyhedronsSet xBeam=new PolyhedronsSet(x - l,x + l,y - w,y + w,z - w,z + w);PolyhedronsSet yBeam=new PolyhedronsSet(x - w,x + w,y - l,y + l,z - w,z + w);PolyhedronsSet zBeam=new PolyhedronsSet(x - w,x + w,y - w,y + w,z - l,z + l);RegionFactory<Euclidean3D> factory=new RegionFactory<Euclidean3D>();PolyhedronsSet tree=(PolyhedronsSet)factory.union(xBeam,factory.union(yBeam,zBeam));Vector3D barycenter=(Vector3D)tree.getBarycenter();Assert.assertEquals(x,barycenter.getX(),1.0e-10);Assert.assertEquals(y,barycenter.getY(),1.0e-10);Assert.assertEquals(z,barycenter.getZ(),1.0e-10);Assert.assertEquals(8 * w * w* (3 * l - 2 * w),tree.getSize(),1.0e-10);Assert.assertEquals(24 * w * (2 * l - w),tree.getBoundarySize(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest.testIssue780",0,"@Test public void testIssue780()throws MathArithmeticException {float[]coords={1.000000f,-1.000000f,-1.000000f,1.000000f,-1.000000f,1.000000f,-1.000000f,-1.000000f,1.000000f,-1.000000f,-1.000000f,-1.000000f,1.000000f,1.000000f,-1f,0.999999f,1.000000f,1.000000f,-1.000000f,1.000000f,1.000000f,-1.000000f,1.000000f,-1.000000f};int[]indices={0,1,2,0,2,3,4,7,6,4,6,5,0,4,5,0,5,1,1,5,6,1,6,2,2,6,7,2,7,3,4,0,3,4,3,7};ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList=new ArrayList<SubHyperplane<Euclidean3D>>();for (int idx=0;idx < indices.length;idx+=3){int idxA=indices[idx]* 3;int idxB=indices[idx + 1]* 3;int idxC=indices[idx + 2]* 3;Vector3D v_1=new Vector3D(coords[idxA],coords[idxA + 1],coords[idxA + 2]);Vector3D v_2=new Vector3D(coords[idxB],coords[idxB + 1],coords[idxB + 2]);Vector3D v_3=new Vector3D(coords[idxC],coords[idxC + 1],coords[idxC + 2]);Vector3D[]vertices={v_1,v_2,v_3};Plane polyPlane=new Plane(v_1,v_2,v_3);ArrayList<SubHyperplane<Euclidean2D>> lines=new ArrayList<SubHyperplane<Euclidean2D>>();Vector2D[]projPts=new Vector2D[vertices.length];for (int ptIdx=0;ptIdx < projPts.length;ptIdx++){projPts[ptIdx]=polyPlane.toSubSpace(vertices[ptIdx]);}SubLine lineInPlane=null;for (int ptIdx=0;ptIdx < projPts.length;ptIdx++){lineInPlane=new SubLine(projPts[ptIdx],projPts[(ptIdx + 1)% projPts.length]);lines.add(lineInPlane);}Region<Euclidean2D> polyRegion=new PolygonsSet(lines);SubPlane polygon=new SubPlane(polyPlane,polyRegion);subHyperplaneList.add(polygon);}PolyhedronsSet polyhedronsSet=new PolyhedronsSet(subHyperplaneList);Assert.assertEquals(8.0,polyhedronsSet.getSize(),3.0e-6);Assert.assertEquals(24.0,polyhedronsSet.getBoundarySize(),5.0e-6);}"
"org.apache.commons.math3.exception.OutOfRangeExceptionTest.testAccessors",0,"@Test public void testAccessors(){final OutOfRangeException e=new OutOfRangeException(-1,0,2);Assert.assertEquals(-1,e.getArgument());Assert.assertEquals(0,e.getLo());Assert.assertEquals(2,e.getHi());}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest.testPreconditions",0,"/** * Test preconditions.*/@Test public void testPreconditions(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2.5};double[][]zval=new double[xval.length][yval.length];BivariateGridInterpolator interpolator=new BicubicSplineInterpolator();@SuppressWarnings(""unused"")BivariateFunction p=interpolator.interpolate(xval,yval,zval);double[]wxval=new double[]{3,2,5,6.5};try {p=interpolator.interpolate(wxval,yval,zval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wyval=new double[]{-4,-3,-1,-1};try {p=interpolator.interpolate(xval,wyval,zval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[][]wzval=new double[xval.length][yval.length + 1];try {p=interpolator.interpolate(xval,yval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wzval=new double[xval.length - 1][yval.length];try {p=interpolator.interpolate(xval,yval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest.testInterpolation1",0,"/** * Interpolating a plane. <p> z = 2 x - 3 y + 5*/@Test public void testInterpolation1(){final int sz=21;double[]xval=new double[sz];double[]yval=new double[sz];final double delta=1d / (sz - 1);for (int i=0;i < sz;i++){xval[i]=-1 + 15 * i * delta;yval[i]=-20 + 30 * i * delta;}BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x - 3 * y + 5;}};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}BivariateGridInterpolator interpolator=new BicubicSplineInterpolator();BivariateFunction p=interpolator.interpolate(xval,yval,zval);double x,y;final RandomGenerator rng=new Well19937c(1234567L);final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);final int numSamples=50;final double tol=6;for (int i=0;i < numSamples;i++){x=distX.sample();for (int j=0;j < numSamples;j++){y=distY.sample();Assert.assertEquals(f.value(x,y),p.value(x,y),tol);}}}"
"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest.testInterpolation2",0,"/** * Interpolating a paraboloid. <p> z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5*/@Test public void testInterpolation2(){final int sz=21;double[]xval=new double[sz];double[]yval=new double[sz];final double delta=1d / (sz - 1);for (int i=0;i < sz;i++){xval[i]=-1 + 15 * i * delta;yval[i]=-20 + 30 * i * delta;}BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x * x - 3 * y * y + 4 * x * y - 5;}};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}BivariateGridInterpolator interpolator=new BicubicSplineInterpolator();BivariateFunction p=interpolator.interpolate(xval,yval,zval);double x,y;final RandomGenerator rng=new Well19937c(1234567L);final UniformRealDistribution distX=new UniformRealDistribution(rng,xval[0],xval[xval.length - 1]);final UniformRealDistribution distY=new UniformRealDistribution(rng,yval[0],yval[yval.length - 1]);final int numSamples=50;final double tol=251;for (int i=0;i < numSamples;i++){x=distX.sample();for (int j=0;j < numSamples;j++){y=distY.sample();Assert.assertEquals(f.value(x,y),p.value(x,y),tol);}}}"
"org.apache.commons.math3.genetics.TournamentSelectionTest.testSelect",0,"@Test public void testSelect(){TournamentSelection ts=new TournamentSelection(2);ElitisticListPopulation pop=new ElitisticListPopulation(100,0.203);for (int i=0;i < pop.getPopulationLimit();i++){pop.addChromosome(new DummyChromosome());}for (int i=0;i < 20;i++){ChromosomePair pair=ts.select(pop);Assert.assertTrue(pair.getFirst().getFitness()> 0);Assert.assertTrue(pair.getSecond().getFitness()> 0);}}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testSinMin",0,"@Test public void testSinMin(){UnivariateFunction f=new Sin();UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14);Assert.assertEquals(3 * Math.PI / 2,optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(4,5)).getPoint(),1e-8);Assert.assertTrue(optimizer.getEvaluations()<= 50);Assert.assertEquals(200,optimizer.getMaxEvaluations());Assert.assertEquals(3 * Math.PI / 2,optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(1,5)).getPoint(),1e-8);Assert.assertTrue(optimizer.getEvaluations()<= 100);Assert.assertTrue(optimizer.getEvaluations()>= 15);try {optimizer.optimize(new MaxEval(10),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(4,5));Assert.fail(""an exception should have been thrown"");}catch(TooManyEvaluationsException fee){}}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testSinMinWithValueChecker",0,"@Test public void testSinMinWithValueChecker(){final UnivariateFunction f=new Sin();final ConvergenceChecker<UnivariatePointValuePair> checker=new SimpleUnivariateValueChecker(1e-5,1e-14);final UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14,checker);final UnivariatePointValuePair result=optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(4,5));Assert.assertEquals(3 * Math.PI / 2,result.getPoint(),1e-3);}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testBoundaries",0,"@Test public void testBoundaries(){final double lower=-1.0;final double upper=+1.0;UnivariateFunction f=new UnivariateFunction(){public double value(double x){if (x < lower){throw new NumberIsTooSmallException(x,lower,true);}else       if (x > upper){throw new NumberIsTooLargeException(x,upper,true);}else {return x;}}};UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14);Assert.assertEquals(lower,optimizer.optimize(new MaxEval(100),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(lower,upper)).getPoint(),1.0e-8);Assert.assertEquals(upper,optimizer.optimize(new MaxEval(100),new UnivariateObjectiveFunction(f),GoalType.MAXIMIZE,new SearchInterval(lower,upper)).getPoint(),1.0e-8);}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMin",0,"@Test public void testQuinticMin(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-14);Assert.assertEquals(-0.27195613,optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(-0.3,-0.2)).getPoint(),1.0e-8);Assert.assertEquals(0.82221643,optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(0.3,0.9)).getPoint(),1.0e-8);Assert.assertTrue(optimizer.getEvaluations()<= 50);Assert.assertEquals(-0.27195613,optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(-1.0,0.2)).getPoint(),1.0e-8);Assert.assertTrue(optimizer.getEvaluations()<= 50);}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMinStatistics",0,"@Test public void testQuinticMinStatistics(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer optimizer=new BrentOptimizer(1e-11,1e-14);final DescriptiveStatistics[]stat=new DescriptiveStatistics[2];for (int i=0;i < stat.length;i++){stat[i]=new DescriptiveStatistics();}final double min=-0.75;final double max=0.25;final int nSamples=200;final double delta=(max - min)/ nSamples;for (int i=0;i < nSamples;i++){final double start=min + i * delta;stat[0].addValue(optimizer.optimize(new MaxEval(40),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(min,max,start)).getPoint());stat[1].addValue(optimizer.getEvaluations());}final double meanOptValue=stat[0].getMean();final double medianEval=stat[1].getPercentile(50);Assert.assertTrue(meanOptValue > -0.2719561281);Assert.assertTrue(meanOptValue < -0.2719561280);Assert.assertEquals(23,(int)medianEval);}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testQuinticMax",0,"@Test public void testQuinticMax(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer optimizer=new BrentOptimizer(1e-12,1e-14);Assert.assertEquals(0.27195613,optimizer.optimize(new MaxEval(100),new UnivariateObjectiveFunction(f),GoalType.MAXIMIZE,new SearchInterval(0.2,0.3)).getPoint(),1e-8);try {optimizer.optimize(new MaxEval(5),new UnivariateObjectiveFunction(f),GoalType.MAXIMIZE,new SearchInterval(0.2,0.3));Assert.fail(""an exception should have been thrown"");}catch(TooManyEvaluationsException miee){}}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testMinEndpoints",0,"@Test public void testMinEndpoints(){UnivariateFunction f=new Sin();UnivariateOptimizer optimizer=new BrentOptimizer(1e-8,1e-14);double result=optimizer.optimize(new MaxEval(50),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(3 * Math.PI / 2,5)).getPoint();Assert.assertEquals(3 * Math.PI / 2,result,1e-6);result=optimizer.optimize(new MaxEval(50),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(4,3 * Math.PI / 2)).getPoint();Assert.assertEquals(3 * Math.PI / 2,result,1e-6);}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testMath832",0,"@Test public void testMath832(){final UnivariateFunction f=new UnivariateFunction(){public double value(double x){final double sqrtX=FastMath.sqrt(x);final double a=1e2 * sqrtX;final double b=1e6 / x;final double c=1e4 / sqrtX;return a + b + c;}};UnivariateOptimizer optimizer=new BrentOptimizer(1e-10,1e-8);final double result=optimizer.optimize(new MaxEval(1483),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(Double.MIN_VALUE,Double.MAX_VALUE)).getPoint();Assert.assertEquals(804.9355825,result,1e-6);}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testKeepInitIfBest",0,"/** * Contrived example showing that prior to the resolution of MATH-855 (second revision),the algorithm would not return the best point if it happened to be the initial guess.*/@Test public void testKeepInitIfBest(){final double minSin=3 * Math.PI / 2;final double offset=1e-8;final double delta=1e-7;final UnivariateFunction f1=new Sin();final UnivariateFunction f2=new StepFunction(new double[]{minSin,minSin + offset,minSin + 2 * offset},new double[]{0,-1,0});final UnivariateFunction f=FunctionUtils.add(f1,f2);final double relTol=1e-8;final UnivariateOptimizer optimizer=new BrentOptimizer(relTol,1e-100);final double init=minSin + 1.5 * offset;final UnivariatePointValuePair result=optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(minSin - 6.789 * delta,minSin + 9.876 * delta,init));final int numEval=optimizer.getEvaluations();final double sol=result.getPoint();final double expected=init;Assert.assertTrue(""Best point not reported"",f.value(sol)<= f.value(expected));}"
"org.apache.commons.math3.optim.univariate.BrentOptimizerTest.testMath855",0,"/** * Contrived example showing that prior to the resolution of MATH-855,the algorithm,by always returning the last evaluated point,would sometimes not report the best point it had found.*/@Test public void testMath855(){final double minSin=3 * Math.PI / 2;final double offset=1e-8;final double delta=1e-7;final UnivariateFunction f1=new Sin();final UnivariateFunction f2=new StepFunction(new double[]{minSin,minSin + offset,minSin + 5 * offset},new double[]{0,-1,0});final UnivariateFunction f=FunctionUtils.add(f1,f2);final UnivariateOptimizer optimizer=new BrentOptimizer(1e-8,1e-100);final UnivariatePointValuePair result=optimizer.optimize(new MaxEval(200),new UnivariateObjectiveFunction(f),GoalType.MINIMIZE,new SearchInterval(minSin - 6.789 * delta,minSin + 9.876 * delta));final int numEval=optimizer.getEvaluations();final double sol=result.getPoint();final double expected=4.712389027602411;Assert.assertTrue(""Best point not reported"",f.value(sol)<= f.value(expected));}"
"org.apache.commons.math3.exception.NotPositiveExceptionTest.testAccessors",0,"@Test public void testAccessors(){final NotPositiveException e=new NotPositiveException(-1);Assert.assertEquals(-1,e.getArgument());Assert.assertEquals(0,e.getMin());Assert.assertTrue(e.getBoundIsAllowed());}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testFit",0,"@Test public void testFit(){final RealDistribution rng=new UniformRealDistribution(-100,100);rng.reseedRandomGenerator(64925784252L);final LevenbergMarquardtOptimizer optim=new LevenbergMarquardtOptimizer();final PolynomialFitter fitter=new PolynomialFitter(optim);final double[]coeff={12.9,-3.4,2.1};final PolynomialFunction f=new PolynomialFunction(coeff);for (int i=0;i < 100;i++){final double x=rng.sample();fitter.addObservedPoint(x,f.value(x));}final double[]best=fitter.fit(new double[]{-1e-20,3e15,-5e25});TestUtils.assertEquals(""best != coeff"",coeff,best,1e-12);}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testNoError",0,"@Test public void testNoError(){Random randomizer=new Random(64925784252l);for (int degree=1;degree < 10;++degree){PolynomialFunction p=buildRandomPolynomial(degree,randomizer);PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());for (int i=0;i <= degree;++i){fitter.addObservedPoint(1.0,i,p.value(i));}final double[]init=new double[degree + 1];PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));for (double x=-1.0;x < 1.0;x+=0.01){double error=FastMath.abs(p.value(x)- fitted.value(x))/ (1.0 + FastMath.abs(p.value(x)));Assert.assertEquals(0.0,error,1.0e-6);}}}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testSmallError",0,"@Test public void testSmallError(){Random randomizer=new Random(53882150042l);double maxError=0;for (int degree=0;degree < 10;++degree){PolynomialFunction p=buildRandomPolynomial(degree,randomizer);PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());for (double x=-1.0;x < 1.0;x+=0.01){fitter.addObservedPoint(1.0,x,p.value(x)+ 0.1 * randomizer.nextGaussian());}final double[]init=new double[degree + 1];PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));for (double x=-1.0;x < 1.0;x+=0.01){double error=FastMath.abs(p.value(x)- fitted.value(x))/ (1.0 + FastMath.abs(p.value(x)));maxError=FastMath.max(maxError,error);Assert.assertTrue(FastMath.abs(error)< 0.1);}}Assert.assertTrue(maxError > 0.01);}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testMath798",0,"@Test public void testMath798(){final double tol=1e-14;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(tol,tol);final double[]init=new double[]{0,0};final int maxEval=3;final double[]lm=doMath798(new LevenbergMarquardtOptimizer(checker),maxEval,init);final double[]gn=doMath798(new GaussNewtonOptimizer(checker),maxEval,init);for (int i=0;i <= 1;i++){Assert.assertEquals(lm[i],gn[i],tol);}}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testMath798WithToleranceTooLow",0,"/** * This test shows that the user can set the maximum number of iterations to avoid running for too long. But in the test case,the real problem is that the tolerance is way too stringent.*/@Test(expected=TooManyEvaluationsException.class)public void testMath798WithToleranceTooLow(){final double tol=1e-100;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(tol,tol);final double[]init=new double[]{0,0};final int maxEval=10000;final double[]gn=doMath798(new GaussNewtonOptimizer(checker),maxEval,init);}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testMath798WithToleranceTooLowButNoException",0,"/** * This test shows that the user can set the maximum number of iterations to avoid running for too long. Even if the real problem is that the tolerance is way too stringent,it is possible to get the best solution so far,i.e. a checker will return the point when the maximum iteration count has been reached.*/@Test public void testMath798WithToleranceTooLowButNoException(){final double tol=1e-100;final double[]init=new double[]{0,0};final int maxEval=10000;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(tol,tol,maxEval);final double[]lm=doMath798(new LevenbergMarquardtOptimizer(checker),maxEval,init);final double[]gn=doMath798(new GaussNewtonOptimizer(checker),maxEval,init);for (int i=0;i <= 1;i++){Assert.assertEquals(lm[i],gn[i],1e-15);}}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testRedundantSolvable",0,"@Test public void testRedundantSolvable(){checkUnsolvableProblem(new LevenbergMarquardtOptimizer(),true);}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testRedundantUnsolvable",0,"@Test public void testRedundantUnsolvable(){checkUnsolvableProblem(new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-15,1e-15)),false);}"
"org.apache.commons.math3.optimization.fitting.PolynomialFitterTest.testLargeSample",0,"@Test public void testLargeSample(){Random randomizer=new Random(0x5551480dca5b369bl);double maxError=0;for (int degree=0;degree < 10;++degree){PolynomialFunction p=buildRandomPolynomial(degree,randomizer);PolynomialFitter fitter=new PolynomialFitter(new LevenbergMarquardtOptimizer());for (int i=0;i < 40000;++i){double x=-1.0 + i / 20000.0;fitter.addObservedPoint(1.0,x,p.value(x)+ 0.1 * randomizer.nextGaussian());}final double[]init=new double[degree + 1];PolynomialFunction fitted=new PolynomialFunction(fitter.fit(init));for (double x=-1.0;x < 1.0;x+=0.01){double error=FastMath.abs(p.value(x)- fitted.value(x))/ (1.0 + FastMath.abs(p.value(x)));maxError=FastMath.max(maxError,error);Assert.assertTrue(FastMath.abs(error)< 0.01);}}Assert.assertTrue(maxError > 0.001);}"
"org.apache.commons.math3.linear.MatrixDimensionMismatchExceptionTest.testAccessors",0,"@Test public void testAccessors(){final MatrixDimensionMismatchException e=new MatrixDimensionMismatchException(1,2,3,4);Assert.assertEquals(1,e.getWrongRowDimension());Assert.assertEquals(2,e.getWrongColumnDimension());Assert.assertEquals(3,e.getExpectedRowDimension());Assert.assertEquals(4,e.getExpectedColumnDimension());}"
"org.apache.commons.math3.linear.LUDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);LUDecomposition LU=new LUDecomposition(matrix);Assert.assertEquals(testData.length,LU.getL().getRowDimension());Assert.assertEquals(testData.length,LU.getL().getColumnDimension());Assert.assertEquals(testData.length,LU.getU().getRowDimension());Assert.assertEquals(testData.length,LU.getU().getColumnDimension());Assert.assertEquals(testData.length,LU.getP().getRowDimension());Assert.assertEquals(testData.length,LU.getP().getColumnDimension());}"
"org.apache.commons.math3.linear.LUDecompositionTest.testNonSquare",0,"/** * test non-square matrix */@Test public void testNonSquare(){try {new LUDecomposition(MatrixUtils.createRealMatrix(new double[3][2]));Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ime){}}"
"org.apache.commons.math3.linear.LUDecompositionTest.testPAEqualLU",0,"/** * test PA = LU */@Test public void testPAEqualLU(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);LUDecomposition lu=new LUDecomposition(matrix);RealMatrix l=lu.getL();RealMatrix u=lu.getU();RealMatrix p=lu.getP();double norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();Assert.assertEquals(0,norm,normTolerance);matrix=MatrixUtils.createRealMatrix(testDataMinus);lu=new LUDecomposition(matrix);l=lu.getL();u=lu.getU();p=lu.getP();norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();Assert.assertEquals(0,norm,normTolerance);matrix=MatrixUtils.createRealIdentityMatrix(17);lu=new LUDecomposition(matrix);l=lu.getL();u=lu.getU();p=lu.getP();norm=l.multiply(u).subtract(p.multiply(matrix)).getNorm();Assert.assertEquals(0,norm,normTolerance);matrix=MatrixUtils.createRealMatrix(singular);lu=new LUDecomposition(matrix);Assert.assertFalse(lu.getSolver().isNonSingular());Assert.assertNull(lu.getL());Assert.assertNull(lu.getU());Assert.assertNull(lu.getP());matrix=MatrixUtils.createRealMatrix(bigSingular);lu=new LUDecomposition(matrix);Assert.assertFalse(lu.getSolver().isNonSingular());Assert.assertNull(lu.getL());Assert.assertNull(lu.getU());Assert.assertNull(lu.getP());}"
"org.apache.commons.math3.linear.LUDecompositionTest.testLLowerTriangular",0,"/** * test that L is lower triangular with unit diagonal */@Test public void testLLowerTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix l=new LUDecomposition(matrix).getL();for (int i=0;i < l.getRowDimension();i++){Assert.assertEquals(l.getEntry(i,i),1,entryTolerance);for (int j=i + 1;j < l.getColumnDimension();j++){Assert.assertEquals(l.getEntry(i,j),0,entryTolerance);}}}"
"org.apache.commons.math3.linear.LUDecompositionTest.testUUpperTriangular",0,"/** * test that U is upper triangular */@Test public void testUUpperTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix u=new LUDecomposition(matrix).getU();for (int i=0;i < u.getRowDimension();i++){for (int j=0;j < i;j++){Assert.assertEquals(u.getEntry(i,j),0,entryTolerance);}}}"
"org.apache.commons.math3.linear.LUDecompositionTest.testPPermutation",0,"/** * test that P is a permutation matrix */@Test public void testPPermutation(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData);RealMatrix p=new LUDecomposition(matrix).getP();RealMatrix ppT=p.multiply(p.transpose());RealMatrix id=MatrixUtils.createRealIdentityMatrix(p.getRowDimension());Assert.assertEquals(0,ppT.subtract(id).getNorm(),normTolerance);for (int i=0;i < p.getRowDimension();i++){int zeroCount=0;int oneCount=0;int otherCount=0;for (int j=0;j < p.getColumnDimension();j++){final double e=p.getEntry(i,j);if (e == 0){++zeroCount;}else       if (e == 1){++oneCount;}else {++otherCount;}}Assert.assertEquals(p.getColumnDimension()- 1,zeroCount);Assert.assertEquals(1,oneCount);Assert.assertEquals(0,otherCount);}for (int j=0;j < p.getColumnDimension();j++){int zeroCount=0;int oneCount=0;int otherCount=0;for (int i=0;i < p.getRowDimension();i++){final double e=p.getEntry(i,j);if (e == 0){++zeroCount;}else       if (e == 1){++oneCount;}else {++otherCount;}}Assert.assertEquals(p.getRowDimension()- 1,zeroCount);Assert.assertEquals(1,oneCount);Assert.assertEquals(0,otherCount);}}"
"org.apache.commons.math3.linear.LUDecompositionTest.testSingular",0,"/** * test singular */@Test public void testSingular(){LUDecomposition lu=new LUDecomposition(MatrixUtils.createRealMatrix(testData));Assert.assertTrue(lu.getSolver().isNonSingular());lu=new LUDecomposition(MatrixUtils.createRealMatrix(singular));Assert.assertFalse(lu.getSolver().isNonSingular());lu=new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular));Assert.assertFalse(lu.getSolver().isNonSingular());}"
"org.apache.commons.math3.linear.LUDecompositionTest.testMatricesValues1",0,"/** * test matrices values */@Test public void testMatricesValues1(){LUDecomposition lu=new LUDecomposition(MatrixUtils.createRealMatrix(testData));RealMatrix lRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0,0.0},{0.5,1.0,0.0},{0.5,0.2,1.0}});RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{2.0,5.0,3.0},{0.0,-2.5,6.5},{0.0,0.0,0.2}});RealMatrix pRef=MatrixUtils.createRealMatrix(new double[][]{{0.0,1.0,0.0},{0.0,0.0,1.0},{1.0,0.0,0.0}});int[]pivotRef={1,2,0};RealMatrix l=lu.getL();Assert.assertEquals(0,l.subtract(lRef).getNorm(),1.0e-13);RealMatrix u=lu.getU();Assert.assertEquals(0,u.subtract(uRef).getNorm(),1.0e-13);RealMatrix p=lu.getP();Assert.assertEquals(0,p.subtract(pRef).getNorm(),1.0e-13);int[]pivot=lu.getPivot();for (int i=0;i < pivotRef.length;++i){Assert.assertEquals(pivotRef[i],pivot[i]);}Assert.assertTrue(l == lu.getL());Assert.assertTrue(u == lu.getU());Assert.assertTrue(p == lu.getP());}"
"org.apache.commons.math3.linear.LUDecompositionTest.testMatricesValues2",0,"/** * test matrices values */@Test public void testMatricesValues2(){LUDecomposition lu=new LUDecomposition(MatrixUtils.createRealMatrix(luData));RealMatrix lRef=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0,0.0},{0.0,1.0,0.0},{1.0 / 3.0,0.0,1.0}});RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{6.0,9.0,8.0},{0.0,5.0,7.0},{0.0,0.0,1.0 / 3.0}});RealMatrix pRef=MatrixUtils.createRealMatrix(new double[][]{{0.0,0.0,1.0},{0.0,1.0,0.0},{1.0,0.0,0.0}});int[]pivotRef={2,1,0};RealMatrix l=lu.getL();Assert.assertEquals(0,l.subtract(lRef).getNorm(),1.0e-13);RealMatrix u=lu.getU();Assert.assertEquals(0,u.subtract(uRef).getNorm(),1.0e-13);RealMatrix p=lu.getP();Assert.assertEquals(0,p.subtract(pRef).getNorm(),1.0e-13);int[]pivot=lu.getPivot();for (int i=0;i < pivotRef.length;++i){Assert.assertEquals(pivotRef[i],pivot[i]);}Assert.assertTrue(l == lu.getL());Assert.assertTrue(u == lu.getU());Assert.assertTrue(p == lu.getP());}"
"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest.testCoordinatesStoC",0,"@Test public void testCoordinatesStoC()throws DimensionMismatchException {double piO2=0.5 * FastMath.PI;SphericalCoordinates sc1=new SphericalCoordinates(2.0,0,piO2);Assert.assertEquals(0,sc1.getCartesian().distance(new Vector3D(2,0,0)),1.0e-10);SphericalCoordinates sc2=new SphericalCoordinates(2.0,piO2,piO2);Assert.assertEquals(0,sc2.getCartesian().distance(new Vector3D(0,2,0)),1.0e-10);SphericalCoordinates sc3=new SphericalCoordinates(2.0,FastMath.PI,piO2);Assert.assertEquals(0,sc3.getCartesian().distance(new Vector3D(-2,0,0)),1.0e-10);SphericalCoordinates sc4=new SphericalCoordinates(2.0,-piO2,piO2);Assert.assertEquals(0,sc4.getCartesian().distance(new Vector3D(0,-2,0)),1.0e-10);SphericalCoordinates sc5=new SphericalCoordinates(2.0,1.23456,0);Assert.assertEquals(0,sc5.getCartesian().distance(new Vector3D(0,0,2)),1.0e-10);SphericalCoordinates sc6=new SphericalCoordinates(2.0,6.54321,FastMath.PI);Assert.assertEquals(0,sc6.getCartesian().distance(new Vector3D(0,0,-2)),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest.testCoordinatesCtoS",0,"@Test public void testCoordinatesCtoS()throws DimensionMismatchException {double piO2=0.5 * FastMath.PI;SphericalCoordinates sc1=new SphericalCoordinates(new Vector3D(2,0,0));Assert.assertEquals(2,sc1.getR(),1.0e-10);Assert.assertEquals(0,sc1.getTheta(),1.0e-10);Assert.assertEquals(piO2,sc1.getPhi(),1.0e-10);SphericalCoordinates sc2=new SphericalCoordinates(new Vector3D(0,2,0));Assert.assertEquals(2,sc2.getR(),1.0e-10);Assert.assertEquals(piO2,sc2.getTheta(),1.0e-10);Assert.assertEquals(piO2,sc2.getPhi(),1.0e-10);SphericalCoordinates sc3=new SphericalCoordinates(new Vector3D(-2,0,0));Assert.assertEquals(2,sc3.getR(),1.0e-10);Assert.assertEquals(FastMath.PI,sc3.getTheta(),1.0e-10);Assert.assertEquals(piO2,sc3.getPhi(),1.0e-10);SphericalCoordinates sc4=new SphericalCoordinates(new Vector3D(0,-2,0));Assert.assertEquals(2,sc4.getR(),1.0e-10);Assert.assertEquals(-piO2,sc4.getTheta(),1.0e-10);Assert.assertEquals(piO2,sc4.getPhi(),1.0e-10);SphericalCoordinates sc5=new SphericalCoordinates(new Vector3D(0,0,2));Assert.assertEquals(2,sc5.getR(),1.0e-10);Assert.assertEquals(0,sc5.getPhi(),1.0e-10);SphericalCoordinates sc6=new SphericalCoordinates(new Vector3D(0,0,-2));Assert.assertEquals(2,sc6.getR(),1.0e-10);Assert.assertEquals(FastMath.PI,sc6.getPhi(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest.testGradient",0,"@Test public void testGradient(){for (double r=0.2;r < 10;r+=0.5){for (double theta=0;theta < 2 * FastMath.PI;theta+=0.1){for (double phi=0.1;phi < FastMath.PI;phi+=0.1){SphericalCoordinates sc=new SphericalCoordinates(r,theta,phi);DerivativeStructure svalue=valueSpherical(new DerivativeStructure(3,1,0,r),new DerivativeStructure(3,1,1,theta),new DerivativeStructure(3,1,2,phi));double[]sGradient=new double[]{svalue.getPartialDerivative(1,0,0),svalue.getPartialDerivative(0,1,0),svalue.getPartialDerivative(0,0,1)};DerivativeStructure cvalue=valueCartesian(new DerivativeStructure(3,1,0,sc.getCartesian().getX()),new DerivativeStructure(3,1,1,sc.getCartesian().getY()),new DerivativeStructure(3,1,2,sc.getCartesian().getZ()));Vector3D refCGradient=new Vector3D(cvalue.getPartialDerivative(1,0,0),cvalue.getPartialDerivative(0,1,0),cvalue.getPartialDerivative(0,0,1));Vector3D testCGradient=new Vector3D(sc.toCartesianGradient(sGradient));Assert.assertEquals(0,testCGradient.distance(refCGradient)/ refCGradient.getNorm(),5.0e-14);}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest.testHessian",0,"@Test public void testHessian(){for (double r=0.2;r < 10;r+=0.5){for (double theta=0;theta < 2 * FastMath.PI;theta+=0.2){for (double phi=0.1;phi < FastMath.PI;phi+=0.2){SphericalCoordinates sc=new SphericalCoordinates(r,theta,phi);DerivativeStructure svalue=valueSpherical(new DerivativeStructure(3,2,0,r),new DerivativeStructure(3,2,1,theta),new DerivativeStructure(3,2,2,phi));double[]sGradient=new double[]{svalue.getPartialDerivative(1,0,0),svalue.getPartialDerivative(0,1,0),svalue.getPartialDerivative(0,0,1)};double[][]sHessian=new double[3][3];sHessian[0][0]=svalue.getPartialDerivative(2,0,0);sHessian[1][0]=svalue.getPartialDerivative(1,1,0);sHessian[2][0]=svalue.getPartialDerivative(1,0,1);sHessian[0][1]=Double.NaN;sHessian[1][1]=svalue.getPartialDerivative(0,2,0);sHessian[2][1]=svalue.getPartialDerivative(0,1,1);sHessian[0][2]=Double.NaN;sHessian[1][2]=Double.NaN;sHessian[2][2]=svalue.getPartialDerivative(0,0,2);DerivativeStructure cvalue=valueCartesian(new DerivativeStructure(3,2,0,sc.getCartesian().getX()),new DerivativeStructure(3,2,1,sc.getCartesian().getY()),new DerivativeStructure(3,2,2,sc.getCartesian().getZ()));double[][]refCHessian=new double[3][3];refCHessian[0][0]=cvalue.getPartialDerivative(2,0,0);refCHessian[1][0]=cvalue.getPartialDerivative(1,1,0);refCHessian[2][0]=cvalue.getPartialDerivative(1,0,1);refCHessian[0][1]=refCHessian[1][0];refCHessian[1][1]=cvalue.getPartialDerivative(0,2,0);refCHessian[2][1]=cvalue.getPartialDerivative(0,1,1);refCHessian[0][2]=refCHessian[2][0];refCHessian[1][2]=refCHessian[2][1];refCHessian[2][2]=cvalue.getPartialDerivative(0,0,2);double norm=0;for (int i=0;i < 3;++i){for (int j=0;j < 3;++j){norm=FastMath.max(norm,FastMath.abs(refCHessian[i][j]));}}double[][]testCHessian=sc.toCartesianHessian(sHessian,sGradient);for (int i=0;i < 3;++i){for (int j=0;j < 3;++j){Assert.assertEquals("""" + FastMath.abs((refCHessian[i][j]- testCHessian[i][j])/ norm),refCHessian[i][j],testCHessian[i][j],1.0e-14 * norm);}}}}}}"
"org.apache.commons.math3.geometry.euclidean.threed.SphericalCoordinatesTest.testSerialization",0,"@Test public void testSerialization(){SphericalCoordinates a=new SphericalCoordinates(3,2,1);SphericalCoordinates b=(SphericalCoordinates)TestUtils.serializeAndRecover(a);Assert.assertEquals(0,a.getCartesian().distance(b.getCartesian()),1.0e-10);Assert.assertEquals(a.getR(),b.getR(),1.0e-10);Assert.assertEquals(a.getTheta(),b.getTheta(),1.0e-10);Assert.assertEquals(a.getPhi(),b.getPhi(),1.0e-10);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testConstructors",0,"@Test public void testConstructors(){final double[]vec1={1d,2d,3d};final Double[]dvec1={1d,2d,3d,4d,5d,6d,7d,8d,9d};OpenMapRealVector v0=new OpenMapRealVector();Assert.assertEquals(""testData len"",0,v0.getDimension());OpenMapRealVector v1=new OpenMapRealVector(7);Assert.assertEquals(""testData len"",7,v1.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v1.getEntry(6),0);OpenMapRealVector v3=new OpenMapRealVector(vec1);Assert.assertEquals(""testData len"",3,v3.getDimension());Assert.assertEquals(""testData is 2.0 "",2.0,v3.getEntry(1),0);RealVector v5_i=new OpenMapRealVector(dvec1);Assert.assertEquals(""testData len"",9,v5_i.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v5_i.getEntry(8),0);OpenMapRealVector v5=new OpenMapRealVector(dvec1);Assert.assertEquals(""testData len"",9,v5.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v5.getEntry(8),0);OpenMapRealVector v7=new OpenMapRealVector(v1);Assert.assertEquals(""testData len"",7,v7.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v7.getEntry(6),0);RealVectorTestImpl v7_i=new RealVectorTestImpl(vec1);OpenMapRealVector v7_2=new OpenMapRealVector(v7_i);Assert.assertEquals(""testData len"",3,v7_2.getDimension());Assert.assertEquals(""testData is 0.0 "",2.0d,v7_2.getEntry(1),0);OpenMapRealVector v8=new OpenMapRealVector(v1);Assert.assertEquals(""testData len"",7,v8.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v8.getEntry(6),0);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testConcurrentModification",0,"@Test public void testConcurrentModification(){final RealVector u=new OpenMapRealVector(3,1e-6);u.setEntry(0,1);u.setEntry(1,0);u.setEntry(2,2);final RealVector v1=new OpenMapRealVector(3,1e-6);v1.setEntry(0,0);v1.setEntry(1,3);v1.setEntry(2,0);u.ebeMultiply(v1);u.ebeDivide(v1);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMap",0,"/** * XXX This test is disabled because it currently fails. The bug must still be fixed in the sparse vector implementation. When this is done,this override should be deleted.*/@Test @Override @Ignore(""This test is skipped until MATH-821 is fixed"")public void testMap(){}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapToSelf",0,"/** * XXX This test is disabled because it currently fails. The bug must still be fixed in the sparse vector implementation. When this is done,this override should be deleted.*/@Test @Override @Ignore(""This test is skipped until MATH-821 is fixed"")public void testMapToSelf(){}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetDimension",0,"@Test public void testGetDimension(){final double x=getPreferredEntryValue();final double[]data1={x,x,x,x};Assert.assertEquals(data1.length,create(data1).getDimension());final double y=x + 1;final double[]data2={y,y,y,y};Assert.assertEquals(data2.length,create(data2).getDimension());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetEntry",0,"@Test public void testGetEntry(){final double x=getPreferredEntryValue();final double[]data={x,1d,2d,x,x};final RealVector v=create(data);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,data[i],v.getEntry(i),0d);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testGetEntryInvalidIndex1(){create(new double[4]).getEntry(-1);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testGetEntryInvalidIndex2(){create(new double[4]).getEntry(4);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetEntry",0,"@Test public void testSetEntry(){final double x=getPreferredEntryValue();final double[]data={x,1d,2d,x,x};final double[]expected=MathArrays.copyOf(data);final RealVector actual=create(data);for (int i=0;i < data.length;i++){final double oldValue=data[i];final double newValue=oldValue + 1d;expected[i]=newValue;actual.setEntry(i,newValue);TestUtils.assertEquals(""while setting entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}for (int i=0;i < data.length;i++){final double oldValue=data[i];final double newValue=x;expected[i]=newValue;actual.setEntry(i,newValue);TestUtils.assertEquals(""while setting entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryInvalidIndex1(){create(new double[4]).setEntry(-1,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryInvalidIndex2(){create(new double[4]).setEntry(4,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAddToEntry",0,"@Test public void testAddToEntry(){final double x=getPreferredEntryValue();final double[]data1={x,1d,2d,x,x};final double[]data2={x,x,3d,x,4d,x};final double[]expected=MathArrays.copyOf(data1);final RealVector actual=create(data1);double increment=1d;for (int i=0;i < data1.length;i++){final double oldValue=data1[i];expected[i]+=increment;actual.addToEntry(i,increment);TestUtils.assertEquals(""while incrementing entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}for (int i=0;i < data1.length;i++){final double oldValue=data1[i];increment=x - oldValue;expected[i]=x;actual.addToEntry(i,increment);TestUtils.assertEquals(""while incrementing entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAddToEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testAddToEntryInvalidIndex1(){create(new double[3]).addToEntry(-1,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAddToEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testAddToEntryInvalidIndex2(){create(new double[3]).addToEntry(4,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAppendVector",0,"@Test public void testAppendVector(){final double x=getPreferredEntryValue();final double[]data1={x,1d,2d,x,x};final double[]data2={x,x,3d,x,4d,x};doTestAppendVector(""same type"",create(data1),create(data2),0d);doTestAppendVector(""mixed types"",create(data1),createAlien(data2),0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAppendScalar",0,"@Test public void testAppendScalar(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,1d,2d,x,x};doTestAppendScalar("""",create(data),1d,0d);doTestAppendScalar("""",create(data),x,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetSubVector",0,"@Test public void testGetSubVector(){final double x=getPreferredEntryValue();final double[]data={x,x,x,1d,x,2d,x,x,3d,x,x,x,4d,x,x,x};final int index=1;final int n=data.length - 5;final RealVector actual=create(data).getSubVector(index,n);final double[]expected=new double[n];System.arraycopy(data,index,expected,0,n);TestUtils.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetSubVectorInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testGetSubVectorInvalidIndex1(){final int n=10;create(new double[n]).getSubVector(-1,2);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetSubVectorInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testGetSubVectorInvalidIndex2(){final int n=10;create(new double[n]).getSubVector(n,2);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetSubVectorInvalidIndex3",0,"@Test(expected=OutOfRangeException.class)public void testGetSubVectorInvalidIndex3(){final int n=10;create(new double[n]).getSubVector(0,n + 1);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetSubVectorInvalidIndex4",0,"@Test(expected=NotPositiveException.class)public void testGetSubVectorInvalidIndex4(){final int n=10;create(new double[n]).getSubVector(3,-2);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetSubVectorSameType",0,"@Test public void testSetSubVectorSameType(){final double x=getPreferredEntryValue();final double[]expected={x,x,x,1d,x,2d,x,x,3d,x,x,x,4d,x,x,x};final double[]sub={5d,x,6d,7d,8d};final RealVector actual=create(expected);final int index=2;actual.setSubVector(index,create(sub));for (int i=0;i < sub.length;i++){expected[index + i]=sub[i];}TestUtils.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetSubVectorMixedType",0,"@Test public void testSetSubVectorMixedType(){final double x=getPreferredEntryValue();final double[]expected={x,x,x,1d,x,2d,x,x,3d,x,x,x,4d,x,x,x};final double[]sub={5d,x,6d,7d,8d};final RealVector actual=create(expected);final int index=2;actual.setSubVector(index,createAlien(sub));for (int i=0;i < sub.length;i++){expected[index + i]=sub[i];}TestUtils.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetSubVectorInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testSetSubVectorInvalidIndex1(){create(new double[10]).setSubVector(-1,create(new double[2]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetSubVectorInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testSetSubVectorInvalidIndex2(){create(new double[10]).setSubVector(10,create(new double[2]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSetSubVectorInvalidIndex3",0,"@Test(expected=OutOfRangeException.class)public void testSetSubVectorInvalidIndex3(){create(new double[10]).setSubVector(9,create(new double[2]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testIsNaN",0,"@Test public void testIsNaN(){final RealVector v=create(new double[]{0,1,2});Assert.assertFalse(v.isNaN());v.setEntry(1,Double.NaN);Assert.assertTrue(v.isNaN());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testIsInfinite",0,"@Test public void testIsInfinite(){final RealVector v=create(new double[]{0,1,2});Assert.assertFalse(v.isInfinite());v.setEntry(0,Double.POSITIVE_INFINITY);Assert.assertTrue(v.isInfinite());v.setEntry(1,Double.NaN);Assert.assertFalse(v.isInfinite());}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAddSameType",0,"@Test public void testAddSameType(){doTestEbeBinaryOperation(BinaryOperation.ADD,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAddMixedTypes",0,"@Test public void testAddMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.ADD,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testAddDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testAddDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.ADD);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSubtractSameType",0,"@Test public void testSubtractSameType(){doTestEbeBinaryOperation(BinaryOperation.SUB,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSubtractMixedTypes",0,"@Test public void testSubtractMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.SUB,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSubtractDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testSubtractDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.SUB);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplySameType",0,"@Ignore(""ebeMultiply(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeMultiplySameType(){doTestEbeBinaryOperation(BinaryOperation.MUL,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplyMixedTypes",0,"@Ignore(""ebeMultiply(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeMultiplyMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.MUL,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEbeMultiplyDimensionMismatch",0,"@Ignore(""ebeMultiply(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test(expected=DimensionMismatchException.class)public void testEbeMultiplyDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.MUL);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEbeDivideSameType",0,"@Ignore(""ebeDivide(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeDivideSameType(){doTestEbeBinaryOperation(BinaryOperation.DIV,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEbeDivideMixedTypes",0,"@Ignore(""ebeDivide(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeDivideMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.DIV,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEbeDivideDimensionMismatch",0,"@Ignore(""ebeDivide(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test(expected=DimensionMismatchException.class)public void testEbeDivideDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.DIV);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetDistanceSameType",0,"@Test public void testGetDistanceSameType(){doTestGetDistance(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetDistanceMixedTypes",0,"@Test public void testGetDistanceMixedTypes(){doTestGetDistance(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetDistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetDistanceDimensionMismatch(){create(new double[4]).getDistance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetNorm",0,"@Test public void testGetNorm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getNorm();double expected=0d;for (int i=0;i < data.length;i++){expected+=data[i]* data[i];}expected=FastMath.sqrt(expected);Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetL1DistanceSameType",0,"@Test public void testGetL1DistanceSameType(){doTestGetL1Distance(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetL1DistanceMixedTypes",0,"@Test public void testGetL1DistanceMixedTypes(){doTestGetL1Distance(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetL1DistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetL1DistanceDimensionMismatch(){create(new double[4]).getL1Distance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetL1Norm",0,"@Test public void testGetL1Norm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getL1Norm();double expected=0d;for (int i=0;i < data.length;i++){expected+=FastMath.abs(data[i]);}Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetLInfDistanceSameType",0,"@Test public void testGetLInfDistanceSameType(){doTestGetLInfDistance(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetLInfDistanceMixedTypes",0,"@Test public void testGetLInfDistanceMixedTypes(){doTestGetLInfDistance(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetLInfDistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetLInfDistanceDimensionMismatch(){create(new double[4]).getLInfDistance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testGetLInfNorm",0,"@Test public void testGetLInfNorm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getLInfNorm();double expected=0d;for (int i=0;i < data.length;i++){expected=FastMath.max(expected,FastMath.abs(data[i]));}Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapAdd",0,"@Test public void testMapAdd(){doTestMapBinaryOperation(BinaryOperation.ADD,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapAddToSelf",0,"@Test public void testMapAddToSelf(){doTestMapBinaryOperation(BinaryOperation.ADD,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapSubtract",0,"@Test public void testMapSubtract(){doTestMapBinaryOperation(BinaryOperation.SUB,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapSubtractToSelf",0,"@Test public void testMapSubtractToSelf(){doTestMapBinaryOperation(BinaryOperation.SUB,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapMultiply",0,"@Test public void testMapMultiply(){doTestMapBinaryOperation(BinaryOperation.MUL,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapMultiplyToSelf",0,"@Test public void testMapMultiplyToSelf(){doTestMapBinaryOperation(BinaryOperation.MUL,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapDivide",0,"@Test public void testMapDivide(){doTestMapBinaryOperation(BinaryOperation.DIV,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMapDivideToSelf",0,"@Test public void testMapDivideToSelf(){doTestMapBinaryOperation(BinaryOperation.DIV,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testOuterProductSameType",0,"@Test public void testOuterProductSameType(){doTestOuterProduct(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testOuterProductMixedTypes",0,"@Test public void testOuterProductMixedTypes(){doTestOuterProduct(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testProjectionSameType",0,"@Test public void testProjectionSameType(){doTestProjection(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testProjectionMixedTypes",0,"@Test public void testProjectionMixedTypes(){doTestProjection(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testProjectionNullVector",0,"@Test(expected=MathArithmeticException.class)public void testProjectionNullVector(){create(new double[4]).projection(create(new double[4]));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testProjectionDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testProjectionDimensionMismatch(){final RealVector v1=create(new double[4]);final RealVector v2=create(new double[5]);v2.set(1.0);v1.projection(v2);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSet",0,"@Test public void testSet(){for (int i=0;i < values.length;i++){final double expected=values[i];final RealVector v=create(values);v.set(expected);for (int j=0;j < values.length;j++){Assert.assertEquals(""entry #"" + j,expected,v.getEntry(j),0);}}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testToArray",0,"@Test public void testToArray(){final double[]data=create(values).toArray();Assert.assertNotSame(values,data);for (int i=0;i < values.length;i++){Assert.assertEquals(""entry #"" + i,values[i],data[i],0);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testUnitVector",0,"@Test public void testUnitVector(){doTestUnitVector(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testUnitize",0,"@Test public void testUnitize(){doTestUnitVector(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testUnitVectorNullVector",0,"@Test(expected=ArithmeticException.class)public void testUnitVectorNullVector(){doTestUnitVectorNullVector(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testUnitizeNullVector",0,"@Test(expected=ArithmeticException.class)public void testUnitizeNullVector(){doTestUnitVectorNullVector(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testIterator",0,"@Test public void testIterator(){final RealVector v=create(values);final Iterator<RealVector.Entry> it=v.iterator();for (int i=0;i < values.length;i++){Assert.assertTrue(""entry #"" + i,it.hasNext());final RealVector.Entry e=it.next();Assert.assertEquals("""",i,e.getIndex());Assert.assertEquals("""",values[i],e.getValue(),0d);try {it.remove();Assert.fail(""UnsupportedOperationException should have been thrown"");}catch(UnsupportedOperationException exc){}}Assert.assertFalse(it.hasNext());try {it.next();Assert.fail(""NoSuchElementException should have been thrown"");}catch(NoSuchElementException e){}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineSameType",0,"@Test public void testCombineSameType(){doTestCombine(false,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineMixedTypes",0,"@Test public void testCombineMixedTypes(){doTestCombine(false,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testCombineDimensionMismatchSameType(){doTestCombineDimensionMismatch(false,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testCombineDimensionMismatchMixedTypes(){doTestCombineDimensionMismatch(false,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineToSelfSameType",0,"@Test public void testCombineToSelfSameType(){doTestCombine(true,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineToSelfMixedTypes",0,"@Test public void testCombineToSelfMixedTypes(){doTestCombine(true,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineToSelfDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testCombineToSelfDimensionMismatchSameType(){doTestCombineDimensionMismatch(true,false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCombineToSelfDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testCombineToSelfDimensionMismatchMixedTypes(){doTestCombineDimensionMismatch(true,true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCopy",0,"@Test public void testCopy(){final RealVector v=create(values);final RealVector w=v.copy();Assert.assertNotSame(v,w);TestUtils.assertEquals("""",values,w,0d);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testDotProductSameType",0,"@Test public void testDotProductSameType(){doTestDotProductRegularValues(false);doTestDotProductSpecialValues(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testDotProductDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testDotProductDimensionMismatchSameType(){doTestDotProductDimensionMismatch(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testDotProductMixedTypes",0,"@Test public void testDotProductMixedTypes(){doTestDotProductRegularValues(true);doTestDotProductSpecialValues(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testDotProductDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testDotProductDimensionMismatchMixedTypes(){doTestDotProductDimensionMismatch(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCosineSameType",0,"@Test public void testCosineSameType(){doTestCosine(false);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCosineMixedTypes",0,"@Test public void testCosineMixedTypes(){doTestCosine(true);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCosineLeftNullVector",0,"@Test(expected=MathArithmeticException.class)public void testCosineLeftNullVector(){final RealVector v=create(new double[]{0,0,0});final RealVector w=create(new double[]{1,0,0});v.cosine(w);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCosineRightNullVector",0,"@Test(expected=MathArithmeticException.class)public void testCosineRightNullVector(){final RealVector v=create(new double[]{0,0,0});final RealVector w=create(new double[]{1,0,0});w.cosine(v);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testCosineDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testCosineDimensionMismatch(){final RealVector v=create(new double[]{1,2,3});final RealVector w=create(new double[]{1,2,3,4});v.cosine(w);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testEquals",0,"@Test public void testEquals(){final RealVector v=create(new double[]{0,1,2});Assert.assertTrue(v.equals(v));Assert.assertTrue(v.equals(v.copy()));Assert.assertFalse(v.equals(null));Assert.assertFalse(v.equals(v.getSubVector(0,v.getDimension()- 1)));Assert.assertTrue(v.equals(v.getSubVector(0,v.getDimension())));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testSerial",0,"@Test public void testSerial(){RealVector v=create(new double[]{0,1,2});Assert.assertEquals(v,TestUtils.serializeAndRecover(v));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testMinMax",0,"@Test public void testMinMax(){final RealVector v1=create(new double[]{0,-6,4,12,7});Assert.assertEquals(1,v1.getMinIndex());Assert.assertEquals(-6,v1.getMinValue(),1.0e-12);Assert.assertEquals(3,v1.getMaxIndex());Assert.assertEquals(12,v1.getMaxValue(),1.0e-12);final RealVector v2=create(new double[]{Double.NaN,3,Double.NaN,-2});Assert.assertEquals(3,v2.getMinIndex());Assert.assertEquals(-2,v2.getMinValue(),1.0e-12);Assert.assertEquals(1,v2.getMaxIndex());Assert.assertEquals(3,v2.getMaxValue(),1.0e-12);final RealVector v3=create(new double[]{Double.NaN,Double.NaN});Assert.assertEquals(-1,v3.getMinIndex());Assert.assertTrue(Double.isNaN(v3.getMinValue()));Assert.assertEquals(-1,v3.getMaxIndex());Assert.assertTrue(Double.isNaN(v3.getMaxValue()));final RealVector v4=create(new double[0]);Assert.assertEquals(-1,v4.getMinIndex());Assert.assertTrue(Double.isNaN(v4.getMinValue()));Assert.assertEquals(-1,v4.getMaxIndex());Assert.assertTrue(Double.isNaN(v4.getMaxValue()));}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInDefaultOrderPreservingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInDefaultOrderPreservingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private int expectedIndex;public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);expectedIndex=0;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInDefaultOrderPreservingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInDefaultOrderPreservingVisitor2(){final RealVector v=create(new double[5]);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){public void visit(int index,double value){}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInDefaultOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInDefaultOrderPreservingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInDefaultOrderPreservingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private int expectedIndex;public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);expectedIndex=expectedStart;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInOptimizedOrderPreservingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInOptimizedOrderPreservingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private final boolean[]visited=new boolean[data.length];public void visit(final int actualIndex,final double actualValue){visited[actualIndex]=true;Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);Arrays.fill(visited,false);}public double end(){for (int i=0;i < data.length;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInOptimizedOrderPreservingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInOptimizedOrderPreservingVisitor2(){final RealVector v=create(new double[5]);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){public void visit(int index,double value){}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInOptimizedOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInOptimizedOrderPreservingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInOptimizedOrderPreservingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private final boolean[]visited=new boolean[data.length];public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);visited[actualIndex]=true;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);Arrays.fill(visited,true);}public double end(){for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor,expectedStart,expectedEnd);}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInDefaultOrderChangingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInDefaultOrderChangingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private int expectedIndex;public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);expectedIndex=0;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInDefaultOrderChangingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInDefaultOrderChangingVisitor2(){final RealVector v=create(new double[5]);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){public double visit(int index,double value){return 0.0;}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInDefaultOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInDefaultOrderChangingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInDefaultOrderChangingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private int expectedIndex;public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);expectedIndex=expectedStart;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInOptimizedOrderChangingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInOptimizedOrderChangingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private final boolean[]visited=new boolean[data.length];public double visit(final int actualIndex,final double actualValue){visited[actualIndex]=true;Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);Arrays.fill(visited,false);}public double end(){for (int i=0;i < data.length;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInOptimizedOrderChangingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInOptimizedOrderChangingVisitor2(){final RealVector v=create(new double[5]);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){public double visit(int index,double value){return 0.0;}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInOptimizedOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.SparseRealVectorTest.testWalkInOptimizedOrderChangingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInOptimizedOrderChangingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private final boolean[]visited=new boolean[data.length];public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);visited[actualIndex]=true;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);Arrays.fill(visited,true);}public double end(){for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor,expectedStart,expectedEnd);for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.util.BigRealTest.testConstructor",0,"@Test public void testConstructor(){Assert.assertEquals(1.625,new BigReal(new BigDecimal(""1.625"")).doubleValue(),1.0e-15);Assert.assertEquals(-5.0,new BigReal(new BigInteger(""-5"")).doubleValue(),1.0e-15);Assert.assertEquals(-5.0,new BigReal(new BigInteger(""-5""),MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(0.125,new BigReal(new BigInteger(""125""),3).doubleValue(),1.0e-15);Assert.assertEquals(0.125,new BigReal(new BigInteger(""125""),3,MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(new char[]{'1','.','6','2','5'}).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(new char[]{'A','A','1','.','6','2','5','9'},2,5).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(new char[]{'A','A','1','.','6','2','5','9'},2,5,MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(new char[]{'1','.','6','2','5'},MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(1.625).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(1.625,MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(-5.0,new BigReal(-5).doubleValue(),1.0e-15);Assert.assertEquals(-5.0,new BigReal(-5,MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(-5.0,new BigReal(-5l).doubleValue(),1.0e-15);Assert.assertEquals(-5.0,new BigReal(-5l,MathContext.DECIMAL64).doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(""1.625"").doubleValue(),1.0e-15);Assert.assertEquals(1.625,new BigReal(""1.625"",MathContext.DECIMAL64).doubleValue(),1.0e-15);}"
"org.apache.commons.math3.util.BigRealTest.testCompareTo",0,"@Test public void testCompareTo(){BigReal first=new BigReal(1.0 / 2.0);BigReal second=new BigReal(1.0 / 3.0);BigReal third=new BigReal(1.0 / 2.0);Assert.assertEquals(0,first.compareTo(first));Assert.assertEquals(0,first.compareTo(third));Assert.assertEquals(1,first.compareTo(second));Assert.assertEquals(-1,second.compareTo(first));}"
"org.apache.commons.math3.util.BigRealTest.testAdd",0,"@Test public void testAdd(){BigReal a=new BigReal(""1.2345678"");BigReal b=new BigReal(""8.7654321"");Assert.assertEquals(9.9999999,a.add(b).doubleValue(),1.0e-15);}"
"org.apache.commons.math3.util.BigRealTest.testSubtract",0,"@Test public void testSubtract(){BigReal a=new BigReal(""1.2345678"");BigReal b=new BigReal(""8.7654321"");Assert.assertEquals(-7.5308643,a.subtract(b).doubleValue(),1.0e-15);}"
"org.apache.commons.math3.util.BigRealTest.testNegate",0,"@Test public void testNegate(){BigReal a=new BigReal(""1.2345678"");BigReal zero=new BigReal(""0.0000000"");Assert.assertEquals(a.negate().add(a),zero);Assert.assertEquals(a.add(a.negate()),zero);Assert.assertEquals(zero,zero.negate());}"
"org.apache.commons.math3.util.BigRealTest.testDivide",0,"@Test public void testDivide(){BigReal a=new BigReal(""1.0000000000"");BigReal b=new BigReal(""0.0009765625"");Assert.assertEquals(1024.0,a.divide(b).doubleValue(),1.0e-15);}"
"org.apache.commons.math3.util.BigRealTest.testDivisionByZero",0,"@Test(expected=MathArithmeticException.class)public void testDivisionByZero(){final BigReal a=BigReal.ONE;final BigReal b=BigReal.ZERO;a.divide(b);}"
"org.apache.commons.math3.util.BigRealTest.testReciprocal",0,"@Test public void testReciprocal(){BigReal a=new BigReal(""1.2345678"");double eps=FastMath.pow(10.,-a.getScale());BigReal one=new BigReal(""1.0000000"");BigReal b=a.reciprocal();BigReal r=one.subtract(a.multiply(b));Assert.assertTrue(FastMath.abs(r.doubleValue())<= eps);r=one.subtract(b.multiply(a));Assert.assertTrue(FastMath.abs(r.doubleValue())<= eps);}"
"org.apache.commons.math3.util.BigRealTest.testReciprocalOfZero",0,"@Test(expected=MathArithmeticException.class)public void testReciprocalOfZero(){BigReal.ZERO.reciprocal();}"
"org.apache.commons.math3.util.BigRealTest.testMultiply",0,"@Test public void testMultiply(){BigReal a=new BigReal(""1024.0"");BigReal b=new BigReal(""0.0009765625"");Assert.assertEquals(1.0,a.multiply(b).doubleValue(),1.0e-15);int n=1024;Assert.assertEquals(1.0,b.multiply(n).doubleValue(),1.0e-15);}"
"org.apache.commons.math3.util.BigRealTest.testDoubleValue",0,"@Test public void testDoubleValue(){Assert.assertEquals(0.5,new BigReal(0.5).doubleValue(),1.0e-15);}"
"org.apache.commons.math3.util.BigRealTest.testBigDecimalValue",0,"@Test public void testBigDecimalValue(){BigDecimal pi=new BigDecimal(""3.1415926535897932384626433832795028841971693993751"");Assert.assertEquals(pi,new BigReal(pi).bigDecimalValue());Assert.assertEquals(new BigDecimal(0.5),new BigReal(1.0 / 2.0).bigDecimalValue());}"
"org.apache.commons.math3.util.BigRealTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){BigReal zero=new BigReal(0.0);BigReal nullReal=null;Assert.assertTrue(zero.equals(zero));Assert.assertFalse(zero.equals(nullReal));Assert.assertFalse(zero.equals(Double.valueOf(0)));BigReal zero2=new BigReal(0.0);Assert.assertTrue(zero.equals(zero2));Assert.assertEquals(zero.hashCode(),zero2.hashCode());BigReal one=new BigReal(1.0);Assert.assertFalse((one.equals(zero)|| zero.equals(one)));Assert.assertTrue(one.equals(BigReal.ONE));}"
"org.apache.commons.math3.util.BigRealTest.testSerial",0,"@Test public void testSerial(){BigReal[]Reals={new BigReal(3.0),BigReal.ONE,BigReal.ZERO,new BigReal(17),new BigReal(FastMath.PI),new BigReal(-2.5)};for(BigReal Real : Reals){Assert.assertEquals(Real,TestUtils.serializeAndRecover(Real));}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testFormat",0,"@Test public void testFormat(){BigFraction c=new BigFraction(1,2);String expected=""1 / 2"";String actual=properFormat.format(c);Assert.assertEquals(expected,actual);actual=improperFormat.format(c);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testFormatNegative",0,"@Test public void testFormatNegative(){BigFraction c=new BigFraction(-1,2);String expected=""-1 / 2"";String actual=properFormat.format(c);Assert.assertEquals(expected,actual);actual=improperFormat.format(c);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testFormatZero",0,"@Test public void testFormatZero(){BigFraction c=new BigFraction(0,1);String expected=""0 / 1"";String actual=properFormat.format(c);Assert.assertEquals(expected,actual);actual=improperFormat.format(c);Assert.assertEquals(expected,actual);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testFormatImproper",0,"@Test public void testFormatImproper(){BigFraction c=new BigFraction(5,3);String actual=properFormat.format(c);Assert.assertEquals(""1 2 / 3"",actual);actual=improperFormat.format(c);Assert.assertEquals(""5 / 3"",actual);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testFormatImproperNegative",0,"@Test public void testFormatImproperNegative(){BigFraction c=new BigFraction(-5,3);String actual=properFormat.format(c);Assert.assertEquals(""-1 2 / 3"",actual);actual=improperFormat.format(c);Assert.assertEquals(""-5 / 3"",actual);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParse",0,"@Test public void testParse(){String source=""1 / 2"";{BigFraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(BigInteger.ONE,c.getNumerator());Assert.assertEquals(BigInteger.valueOf(2l),c.getDenominator());c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(BigInteger.ONE,c.getNumerator());Assert.assertEquals(BigInteger.valueOf(2l),c.getDenominator());}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseInteger",0,"@Test public void testParseInteger(){String source=""10"";{BigFraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(BigInteger.TEN,c.getNumerator());Assert.assertEquals(BigInteger.ONE,c.getDenominator());}{BigFraction c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(BigInteger.TEN,c.getNumerator());Assert.assertEquals(BigInteger.ONE,c.getDenominator());}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseInvalid",0,"@Test public void testParseInvalid(){String source=""a"";String msg=""should not be able to parse '10 / a'."";try {properFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}try {improperFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseInvalidDenominator",0,"@Test public void testParseInvalidDenominator(){String source=""10 / a"";String msg=""should not be able to parse '10 / a'."";try {properFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}try {improperFormat.parse(source);Assert.fail(msg);}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseNegative",0,"@Test public void testParseNegative(){{String source=""-1 / 2"";BigFraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumeratorAsInt());Assert.assertEquals(2,c.getDenominatorAsInt());c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumeratorAsInt());Assert.assertEquals(2,c.getDenominatorAsInt());source=""1 / -2"";c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumeratorAsInt());Assert.assertEquals(2,c.getDenominatorAsInt());c=improperFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-1,c.getNumeratorAsInt());Assert.assertEquals(2,c.getDenominatorAsInt());}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseProper",0,"@Test public void testParseProper(){String source=""1 2 / 3"";{BigFraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(5,c.getNumeratorAsInt());Assert.assertEquals(3,c.getDenominatorAsInt());}try {improperFormat.parse(source);Assert.fail(""invalid improper fraction."");}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseProperNegative",0,"@Test public void testParseProperNegative(){String source=""-1 2 / 3"";{BigFraction c=properFormat.parse(source);Assert.assertNotNull(c);Assert.assertEquals(-5,c.getNumeratorAsInt());Assert.assertEquals(3,c.getDenominatorAsInt());}try {improperFormat.parse(source);Assert.fail(""invalid improper fraction."");}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseProperInvalidMinus",0,"@Test public void testParseProperInvalidMinus(){String source=""2 -2 / 3"";try {properFormat.parse(source);Assert.fail(""invalid minus in improper fraction."");}catch(MathParseException ex){}source=""2 2 / -3"";try {properFormat.parse(source);Assert.fail(""invalid minus in improper fraction."");}catch(MathParseException ex){}}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testParseBig",0,"@Test public void testParseBig(){BigFraction f1=improperFormat.parse(""167213075789791382630275400487886041651764456874403"" + "" / "" + ""53225575123090058458126718248444563466137046489291"");Assert.assertEquals(FastMath.PI,f1.doubleValue(),0.0);BigFraction f2=properFormat.parse(""3 "" + ""7536350420521207255895245742552351253353317406530"" + "" / ""+ ""53225575123090058458126718248444563466137046489291"");Assert.assertEquals(FastMath.PI,f2.doubleValue(),0.0);Assert.assertEquals(f1,f2);BigDecimal pi=new BigDecimal(""3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068"");Assert.assertEquals(pi,f1.bigDecimalValue(99,BigDecimal.ROUND_HALF_EVEN));}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testNumeratorFormat",0,"@Test public void testNumeratorFormat(){NumberFormat old=properFormat.getNumeratorFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);properFormat.setNumeratorFormat(nf);Assert.assertEquals(nf,properFormat.getNumeratorFormat());properFormat.setNumeratorFormat(old);old=improperFormat.getNumeratorFormat();nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);improperFormat.setNumeratorFormat(nf);Assert.assertEquals(nf,improperFormat.getNumeratorFormat());improperFormat.setNumeratorFormat(old);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testDenominatorFormat",0,"@Test public void testDenominatorFormat(){NumberFormat old=properFormat.getDenominatorFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);properFormat.setDenominatorFormat(nf);Assert.assertEquals(nf,properFormat.getDenominatorFormat());properFormat.setDenominatorFormat(old);old=improperFormat.getDenominatorFormat();nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);improperFormat.setDenominatorFormat(nf);Assert.assertEquals(nf,improperFormat.getDenominatorFormat());improperFormat.setDenominatorFormat(old);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testWholeFormat",0,"@Test public void testWholeFormat(){ProperBigFractionFormat format=(ProperBigFractionFormat)properFormat;NumberFormat old=format.getWholeFormat();NumberFormat nf=NumberFormat.getInstance();nf.setParseIntegerOnly(true);format.setWholeFormat(nf);Assert.assertEquals(nf,format.getWholeFormat());format.setWholeFormat(old);}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testLongFormat",0,"@Test public void testLongFormat(){Assert.assertEquals(""10 / 1"",improperFormat.format(10l));}"
"org.apache.commons.math3.fraction.BigFractionFormatTest.testDoubleFormat",0,"@Test public void testDoubleFormat(){Assert.assertEquals(""1 / 16"",improperFormat.format(0.0625));}"
"org.apache.commons.math3.transform.FastCosineTransformerTest.testAdHocData",0,"/** * Test of transformer for the ad hoc data. */@Test public void testAdHocData(){FastCosineTransformer transformer;transformer=new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);double result[],tolerance=1E-12;double x[]={0.0,1.0,4.0,9.0,16.0,25.0,36.0,49.0,64.0};double y[]={172.0,-105.096569476353,27.3137084989848,-12.9593152353742,8.0,-5.78585076868676,4.68629150101524,-4.15826451958632,4.0};result=transformer.transform(x,TransformType.FORWARD);for (int i=0;i < result.length;i++){Assert.assertEquals(y[i],result[i],tolerance);}result=transformer.transform(y,TransformType.INVERSE);for (int i=0;i < result.length;i++){Assert.assertEquals(x[i],result[i],tolerance);}TransformUtils.scaleArray(x,FastMath.sqrt(0.5 * (x.length - 1)));transformer=new FastCosineTransformer(DctNormalization.ORTHOGONAL_DCT_I);result=transformer.transform(y,TransformType.FORWARD);for (int i=0;i < result.length;i++){Assert.assertEquals(x[i],result[i],tolerance);}result=transformer.transform(x,TransformType.INVERSE);for (int i=0;i < result.length;i++){Assert.assertEquals(y[i],result[i],tolerance);}}"
"org.apache.commons.math3.transform.FastCosineTransformerTest.testParameters",0,"/** * Test of parameters for the transformer. */@Test public void testParameters()throws Exception {UnivariateFunction f=new Sin();FastCosineTransformer transformer;transformer=new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);try {transformer.transform(f,1,-1,65,TransformType.FORWARD);Assert.fail(""Expecting IllegalArgumentException - bad interval"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,1,TransformType.FORWARD);Assert.fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}try {transformer.transform(f,-1,1,64,TransformType.FORWARD);Assert.fail(""Expecting IllegalArgumentException - bad samples number"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.transform.FastCosineTransformerTest.testSinFunction",0,"/** * Test of transformer for the sine function. */@Test public void testSinFunction(){UnivariateFunction f=new Sin();FastCosineTransformer transformer;transformer=new FastCosineTransformer(DctNormalization.STANDARD_DCT_I);double min,max,result[],tolerance=1E-12;int N=9;double expected[]={0.0,3.26197262739567,0.0,-2.17958042710327,0.0,-0.648846697642915,0.0,-0.433545502649478,0.0};min=0.0;max=2.0 * FastMath.PI * N / (N - 1);result=transformer.transform(f,min,max,N,TransformType.FORWARD);for (int i=0;i < N;i++){Assert.assertEquals(expected[i],result[i],tolerance);}min=-FastMath.PI;max=FastMath.PI * (N + 1)/ (N - 1);result=transformer.transform(f,min,max,N,TransformType.FORWARD);for (int i=0;i < N;i++){Assert.assertEquals(-expected[i],result[i],tolerance);}}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate0",0,"/** * Test degenerate case p = 0 */@Test public void testDegenerate0(){BinomialDistribution dist=new BinomialDistribution(5,0.0d);setDistribution(dist);setCumulativeTestPoints(new int[]{-1,0,1,5,10});setCumulativeTestValues(new double[]{0d,1d,1d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,10,11});setDensityTestValues(new double[]{0d,1d,0d,0d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{0,0});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();Assert.assertEquals(dist.getSupportLowerBound(),0);Assert.assertEquals(dist.getSupportUpperBound(),0);}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testDegenerate1",0,"/** * Test degenerate case p = 1 */@Test public void testDegenerate1(){BinomialDistribution dist=new BinomialDistribution(5,1.0d);setDistribution(dist);setCumulativeTestPoints(new int[]{-1,0,1,2,5,10});setCumulativeTestValues(new double[]{0d,0d,0d,0d,1d,1d});setDensityTestPoints(new int[]{-1,0,1,2,5,10});setDensityTestValues(new double[]{0d,0d,0d,0d,1d,0d});setInverseCumulativeTestPoints(new double[]{0.1d,0.5d});setInverseCumulativeTestValues(new int[]{5,5});verifyDensities();verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();Assert.assertEquals(dist.getSupportLowerBound(),5);Assert.assertEquals(dist.getSupportUpperBound(),5);}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;BinomialDistribution dist;dist=new BinomialDistribution(10,0.5);Assert.assertEquals(dist.getNumericalMean(),10d * 0.5d,tol);Assert.assertEquals(dist.getNumericalVariance(),10d * 0.5d * 0.5d,tol);dist=new BinomialDistribution(30,0.3);Assert.assertEquals(dist.getNumericalMean(),30d * 0.3d,tol);Assert.assertEquals(dist.getNumericalVariance(),30d * 0.3d * (1d - 0.3d),tol);}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testMath718",0,"@Test public void testMath718(){for (int trials=500000;trials < 20000000;trials+=100000){BinomialDistribution dist=new BinomialDistribution(trials,0.5);int p=dist.inverseCumulativeProbability(0.5);Assert.assertEquals(trials / 2,p);}}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.BinomialDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.util.PairTest.testAccessor",0,"@Test public void testAccessor(){final Pair<Integer,Double> p=new Pair<Integer,Double>(new Integer(1),new Double(2));Assert.assertEquals(new Integer(1),p.getKey());Assert.assertEquals(new Double(2),p.getValue(),Math.ulp(1d));}"
"org.apache.commons.math3.util.PairTest.testAccessor2",0,"@Test public void testAccessor2(){final Pair<Integer,Double> p=new Pair<Integer,Double>(new Integer(1),new Double(2));Assert.assertTrue(p.getFirst()== p.getKey());Assert.assertTrue(p.getSecond()== p.getValue());}"
"org.apache.commons.math3.util.PairTest.testEquals",0,"@Test public void testEquals(){Pair<Integer,Double> p1=new Pair<Integer,Double>(null,null);Assert.assertFalse(p1.equals(null));Pair<Integer,Double> p2=new Pair<Integer,Double>(null,null);Assert.assertTrue(p1.equals(p2));p1=new Pair<Integer,Double>(new Integer(1),new Double(2));Assert.assertFalse(p1.equals(p2));p2=new Pair<Integer,Double>(new Integer(1),new Double(2));Assert.assertTrue(p1.equals(p2));Pair<Integer,Float> p3=new Pair<Integer,Float>(new Integer(1),new Float(2));Assert.assertFalse(p1.equals(p3));}"
"org.apache.commons.math3.util.PairTest.testHashCode",0,"@Test public void testHashCode(){final MyInteger m1=new MyInteger(1);final MyInteger m2=new MyInteger(1);final Pair<MyInteger,MyInteger> p1=new Pair<MyInteger,MyInteger>(m1,m1);final Pair<MyInteger,MyInteger> p2=new Pair<MyInteger,MyInteger>(m2,m2);Assert.assertTrue(p1.hashCode()== p2.hashCode());m2.set(2);Assert.assertFalse(p1.hashCode()== p2.hashCode());}"
"org.apache.commons.math3.linear.SchurTransformerTest.testNonSquare",0,"@Test public void testNonSquare(){try {new SchurTransformer(MatrixUtils.createRealMatrix(new double[3][2]));Assert.fail(""an exception should have been thrown"");}catch(NonSquareMatrixException ime){}}"
"org.apache.commons.math3.linear.SchurTransformerTest.testAEqualPTPt",0,"@Test public void testAEqualPTPt(){checkAEqualPTPt(MatrixUtils.createRealMatrix(testSquare5));checkAEqualPTPt(MatrixUtils.createRealMatrix(testSquare3));checkAEqualPTPt(MatrixUtils.createRealMatrix(testRandom));}"
"org.apache.commons.math3.linear.SchurTransformerTest.testPOrthogonal",0,"@Test public void testPOrthogonal(){checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getP());checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getP());checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getP());}"
"org.apache.commons.math3.linear.SchurTransformerTest.testPTOrthogonal",0,"@Test public void testPTOrthogonal(){checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getPT());checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getPT());checkOrthogonal(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getPT());}"
"org.apache.commons.math3.linear.SchurTransformerTest.testSchurForm",0,"@Test public void testSchurForm(){checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT());checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT());checkSchurForm(new SchurTransformer(MatrixUtils.createRealMatrix(testRandom)).getT());}"
"org.apache.commons.math3.linear.SchurTransformerTest.testRandomData",0,"@Test public void testRandomData(){for (int run=0;run < 100;run++){Random r=new Random(System.currentTimeMillis());int size=r.nextInt(20)+ 4;double[][]data=new double[size][size];for (int i=0;i < size;i++){for (int j=0;j < size;j++){data[i][j]=r.nextInt(100);}}RealMatrix m=MatrixUtils.createRealMatrix(data);RealMatrix s=checkAEqualPTPt(m);checkSchurForm(s);}}"
"org.apache.commons.math3.linear.SchurTransformerTest.testRandomDataNormalDistribution",0,"@Test public void testRandomDataNormalDistribution(){for (int run=0;run < 100;run++){Random r=new Random(System.currentTimeMillis());NormalDistribution dist=new NormalDistribution(0.0,r.nextDouble()* 5);int size=r.nextInt(20)+ 4;double[][]data=new double[size][size];for (int i=0;i < size;i++){for (int j=0;j < size;j++){data[i][j]=dist.sample();}}RealMatrix m=MatrixUtils.createRealMatrix(data);RealMatrix s=checkAEqualPTPt(m);checkSchurForm(s);}}"
"org.apache.commons.math3.linear.SchurTransformerTest.testMath848",0,"@Test public void testMath848(){double[][]data={{0.1849449280,-0.0646971046,0.0774755812,-0.0969651755,-0.0692648806,0.3282344352,-0.0177423074,0.2063136340},{-0.0742700134,-0.0289063030,-0.0017269460,-0.0375550146,-0.0487737922,-0.2616837868,-0.0821201295,-0.2530000167},{0.2549910127,0.0995733692,-0.0009718388,0.0149282808,0.1791878897,-0.0823182816,0.0582629256,0.3219545182},{-0.0694747557,-0.1880649148,-0.2740630911,0.0720096468,-0.1800836914,-0.3518996425,0.2486747833,0.6257938167},{0.0536360918,-0.1339297778,0.2241579764,-0.0195327484,-0.0054103808,0.0347564518,0.5120802482,-0.0329902864},{-0.5933332356,-0.2488721082,0.2357173629,0.0177285473,0.0856630593,-0.3567126300,-0.1600668126,-0.1010899621},{-0.0514349819,-0.0854319435,0.1125050061,0.0063453560,-0.2250000688,-0.2209343090,0.1964623477,-0.1512329924},{0.0197395947,-0.1997170581,-0.1425959019,-0.2749477910,-0.0969467073,0.0603688520,-0.2826905192,0.1794315473}};RealMatrix m=MatrixUtils.createRealMatrix(data);RealMatrix s=checkAEqualPTPt(m);checkSchurForm(s);}"
"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.noReset",0,"@Test public void noReset()throws MaxCountExceededException {double[]y={0.0,1.0,-2.0};double[][]yDot={{1.0,2.0,-2.0}};EulerStepInterpolator interpolator=new EulerStepInterpolator();interpolator.reinitialize(new DummyIntegrator(interpolator),y,yDot,true,new EquationsMapper(0,y.length),new EquationsMapper[0]);interpolator.storeTime(0);interpolator.shift();interpolator.storeTime(1);double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.interpolationAtBounds",0,"@Test public void interpolationAtBounds()throws MaxCountExceededException {double t0=0;double[]y0={0.0,1.0,-2.0};double[]y=y0.clone();double[][]yDot={new double[y0.length]};EulerStepInterpolator interpolator=new EulerStepInterpolator();interpolator.reinitialize(new DummyIntegrator(interpolator),y,yDot,true,new EquationsMapper(0,y.length),new EquationsMapper[0]);interpolator.storeTime(t0);double dt=1.0;interpolator.shift();y[0]=1.0;y[1]=3.0;y[2]=-4.0;yDot[0][0]=(y[0]- y0[0])/ dt;yDot[0][1]=(y[1]- y0[1])/ dt;yDot[0][2]=(y[2]- y0[2])/ dt;interpolator.storeTime(t0 + dt);interpolator.setInterpolatedTime(interpolator.getPreviousTime());double[]result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y0[i])< 1.0e-10);}interpolator.setInterpolatedTime(interpolator.getCurrentTime());result=interpolator.getInterpolatedState();for (int i=0;i < result.length;++i){Assert.assertTrue(FastMath.abs(result[i]- y[i])< 1.0e-10);}}"
"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.interpolationInside",0,"@Test public void interpolationInside()throws MaxCountExceededException {double[]y={0.0,1.0,-2.0};double[][]yDot={{1.0,2.0,-2.0}};EulerStepInterpolator interpolator=new EulerStepInterpolator();interpolator.reinitialize(new DummyIntegrator(interpolator),y,yDot,true,new EquationsMapper(0,y.length),new EquationsMapper[0]);interpolator.storeTime(0);interpolator.shift();y[0]=1.0;y[1]=3.0;y[2]=-4.0;interpolator.storeTime(1);interpolator.setInterpolatedTime(0.1);double[]result=interpolator.getInterpolatedState();Assert.assertTrue(FastMath.abs(result[0]- 0.1)< 1.0e-10);Assert.assertTrue(FastMath.abs(result[1]- 1.2)< 1.0e-10);Assert.assertTrue(FastMath.abs(result[2]+ 2.2)< 1.0e-10);interpolator.setInterpolatedTime(0.5);result=interpolator.getInterpolatedState();Assert.assertTrue(FastMath.abs(result[0]- 0.5)< 1.0e-10);Assert.assertTrue(FastMath.abs(result[1]- 2.0)< 1.0e-10);Assert.assertTrue(FastMath.abs(result[2]+ 3.0)< 1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;EulerIntegrator integ=new EulerIntegrator(step);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.0e-10);}"
"org.apache.commons.math3.ode.nonstiff.EulerStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;EulerIntegrator integ=new EulerIntegrator(step);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 0.001);}"
"org.apache.commons.math3.linear.SingularValueSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){DecompositionSolver solver=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[3][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.SingularValueSolverTest.testLeastSquareSolve",0,"/** * test least square solve */@Test public void testLeastSquareSolve(){RealMatrix m=MatrixUtils.createRealMatrix(new double[][]{{1.0,0.0},{0.0,0.0}});DecompositionSolver solver=new SingularValueDecomposition(m).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{11,12},{21,22}});RealMatrix xMatrix=solver.solve(b);Assert.assertEquals(11,xMatrix.getEntry(0,0),1.0e-15);Assert.assertEquals(12,xMatrix.getEntry(0,1),1.0e-15);Assert.assertEquals(0,xMatrix.getEntry(1,0),1.0e-15);Assert.assertEquals(0,xMatrix.getEntry(1,1),1.0e-15);RealVector xColVec=solver.solve(b.getColumnVector(0));Assert.assertEquals(11,xColVec.getEntry(0),1.0e-15);Assert.assertEquals(0,xColVec.getEntry(1),1.0e-15);RealVector xColOtherVec=solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));Assert.assertEquals(11,xColOtherVec.getEntry(0),1.0e-15);Assert.assertEquals(0,xColOtherVec.getEntry(1),1.0e-15);}"
"org.apache.commons.math3.linear.SingularValueSolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){DecompositionSolver solver=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{1,2,3},{0,-5,1}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{-8.0 / 25.0,-263.0 / 75.0,-29.0 / 75.0},{19.0 / 25.0,78.0 / 25.0,49.0 / 25.0}});Assert.assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),normTolerance);for (int i=0;i < b.getColumnDimension();++i){Assert.assertEquals(0,solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){ArrayRealVectorTest.RealVectorTestImpl v=new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));Assert.assertEquals(0,solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}}"
"org.apache.commons.math3.linear.SingularValueSolverTest.testConditionNumber",0,"/** * test condition number */@Test public void testConditionNumber(){SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare));Assert.assertEquals(3.0,svd.getConditionNumber(),1.5e-15);}"
"org.apache.commons.math3.linear.SingularValueSolverTest.testMath320B",0,"@Test public void testMath320B(){RealMatrix rm=new Array2DRowRealMatrix(new double[][]{{1.0,2.0},{1.0,2.0}});SingularValueDecomposition svd=new SingularValueDecomposition(rm);RealMatrix recomposed=svd.getU().multiply(svd.getS()).multiply(svd.getVT());Assert.assertEquals(0.0,recomposed.subtract(rm).getNorm(),2.0e-15);}"
"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest.testCos",0,"@Test public void testCos(){final UnivariateFunction cos=new Cos();final GaussIntegrator integrator=factory.legendreHighPrecision(7,0,Math.PI / 2);final double s=integrator.integrate(cos);Assert.assertEquals(1,s,Math.ulp(1d));}"
"org.apache.commons.math3.analysis.integration.gauss.LegendreHighPrecisionTest.testInverse",0,"@Test public void testInverse(){final UnivariateFunction inv=new Inverse();final UnivariateFunction log=new Log();final double lo=12.34;final double hi=456.78;final GaussIntegrator integrator=factory.legendreHighPrecision(60,lo,hi);final double s=integrator.integrate(inv);final double expected=log.value(hi)- log.value(lo);Assert.assertEquals(expected,s,1e-15);}"
"org.apache.commons.math3.exception.NonMonotonicSequenceExceptionTest.testAccessors",0,"@Test public void testAccessors(){NonMonotonicSequenceException e=new NonMonotonicSequenceException(0,-1,1,MathArrays.OrderDirection.DECREASING,false);Assert.assertEquals(0,e.getArgument());Assert.assertEquals(-1,e.getPrevious());Assert.assertEquals(1,e.getIndex());Assert.assertTrue(e.getDirection()== MathArrays.OrderDirection.DECREASING);Assert.assertFalse(e.getStrict());e=new NonMonotonicSequenceException(-1,0,1);Assert.assertEquals(-1,e.getArgument());Assert.assertEquals(0,e.getPrevious());Assert.assertEquals(1,e.getIndex());Assert.assertTrue(e.getDirection()== MathArrays.OrderDirection.INCREASING);Assert.assertTrue(e.getStrict());}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimension1",0,"@Test public void testDimension1(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{1.5}});EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(1.5,ed.getRealEigenvalue(0),1.0e-15);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimension2",0,"@Test public void testDimension2(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{59.0,12.0},{12.0,66.0}});EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(75.0,ed.getRealEigenvalue(0),1.0e-15);Assert.assertEquals(50.0,ed.getRealEigenvalue(1),1.0e-15);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimension3",0,"@Test public void testDimension3(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{39632.0,-4824.0,-16560.0},{-4824.0,8693.0,7920.0},{-16560.0,7920.0,17300.0}});EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(50000.0,ed.getRealEigenvalue(0),3.0e-11);Assert.assertEquals(12500.0,ed.getRealEigenvalue(1),3.0e-11);Assert.assertEquals(3125.0,ed.getRealEigenvalue(2),3.0e-11);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimension3MultipleRoot",0,"@Test public void testDimension3MultipleRoot(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{5,10,15},{10,20,30},{15,30,45}});EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(70.0,ed.getRealEigenvalue(0),3.0e-11);Assert.assertEquals(0.0,ed.getRealEigenvalue(1),3.0e-11);Assert.assertEquals(0.0,ed.getRealEigenvalue(2),3.0e-11);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimension4WithSplit",0,"@Test public void testDimension4WithSplit(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{0.784,-0.288,0.000,0.000},{-0.288,0.616,0.000,0.000},{0.000,0.000,0.164,-0.048},{0.000,0.000,-0.048,0.136}});EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(1.0,ed.getRealEigenvalue(0),1.0e-15);Assert.assertEquals(0.4,ed.getRealEigenvalue(1),1.0e-15);Assert.assertEquals(0.2,ed.getRealEigenvalue(2),1.0e-15);Assert.assertEquals(0.1,ed.getRealEigenvalue(3),1.0e-15);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimension4WithoutSplit",0,"@Test public void testDimension4WithoutSplit(){RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{0.5608,-0.2016,0.1152,-0.2976},{-0.2016,0.4432,-0.2304,0.1152},{0.1152,-0.2304,0.3088,-0.1344},{-0.2976,0.1152,-0.1344,0.3872}});EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(1.0,ed.getRealEigenvalue(0),1.0e-15);Assert.assertEquals(0.4,ed.getRealEigenvalue(1),1.0e-15);Assert.assertEquals(0.2,ed.getRealEigenvalue(2),1.0e-15);Assert.assertEquals(0.1,ed.getRealEigenvalue(3),1.0e-15);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testMath308",0,"@Test public void testMath308(){double[]mainTridiagonal={22.330154644539597,46.65485522478641,17.393672330044705,54.46687435351116,80.17800767709437};double[]secondaryTridiagonal={13.04450406501361,-5.977590941539671,2.9040909856707517,7.1570352792841225};double[]refEigenValues={82.044413207204002,53.456697699894512,52.536278520113882,18.847969733754262,14.138204224043099};RealVector[]refEigenVectors={new ArrayRealVector(new double[]{-0.000462690386766,-0.002118073109055,0.011530080757413,0.252322434584915,0.967572088232592}),new ArrayRealVector(new double[]{0.314647769490148,0.750806415553905,-0.167700312025760,-0.537092972407375,0.143854968127780}),new ArrayRealVector(new double[]{0.222368839324646,0.514921891363332,-0.021377019336614,0.801196801016305,-0.207446991247740}),new ArrayRealVector(new double[]{-0.713933751051495,0.190582113553930,-0.671410443368332,0.056056055955050,-0.006541576993581}),new ArrayRealVector(new double[]{-0.584677060845929,0.367177264979103,0.721453187784497,-0.052971054621812,0.005740715188257})};EigenDecomposition decomposition;decomposition=new EigenDecomposition(mainTridiagonal,secondaryTridiagonal);double[]eigenValues=decomposition.getRealEigenvalues();for (int i=0;i < refEigenValues.length;++i){Assert.assertEquals(refEigenValues[i],eigenValues[i],1.0e-5);Assert.assertEquals(0,refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(),2.0e-7);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testMathpbx02",0,"@Test public void testMathpbx02(){double[]mainTridiagonal={7484.860960227216,18405.28129035345,13855.225609560746,10016.708722343366,559.8117399576674,6750.190788301587,71.21428769782159};double[]secondaryTridiagonal={-4175.088570476366,1975.7955858241994,5193.178422374075,1995.286659169179,75.34535882933804,-234.0808002076056};double[]refEigenValues={20654.744890306974412,16828.208208485466457,6893.155912634994820,6757.083016675340332,5887.799885688558788,64.309089923240379,57.992628792736340};RealVector[]refEigenVectors={new ArrayRealVector(new double[]{-0.270356342026904,0.852811091326997,0.399639490702077,0.198794657813990,0.019739323307666,0.000106983022327,-0.000001216636321}),new ArrayRealVector(new double[]{0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),new ArrayRealVector(new double[]{-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),new ArrayRealVector(new double[]{0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),new ArrayRealVector(new double[]{0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),new ArrayRealVector(new double[]{-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),new ArrayRealVector(new double[]{-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})};EigenDecomposition decomposition;decomposition=new EigenDecomposition(mainTridiagonal,secondaryTridiagonal);double[]eigenValues=decomposition.getRealEigenvalues();for (int i=0;i < refEigenValues.length;++i){Assert.assertEquals(refEigenValues[i],eigenValues[i],1.0e-3);if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i))< 0){Assert.assertEquals(0,refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(),1.0e-5);}else {Assert.assertEquals(0,refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(),1.0e-5);}}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testMathpbx03",0,"@Test public void testMathpbx03(){double[]mainTridiagonal={1809.0978259647177,3395.4763425956166,1832.1894584712693,3804.364873592377,806.0482458637571,2403.656427234185,28.48691431556015};double[]secondaryTridiagonal={-656.8932064545833,-469.30804108920734,-1021.7714889369421,-1152.540497328983,-939.9765163817368,-12.885877015422391};double[]refEigenValues={4603.121913685183245,3691.195818048970978,2743.442955402465032,1657.596442107321764,1336.797819095331306,30.129865209677519,17.035352085224986};RealVector[]refEigenVectors={new ArrayRealVector(new double[]{-0.036249830202337,0.154184732411519,-0.346016328392363,0.867540105133093,-0.294483395433451,0.125854235969548,-0.000354507444044}),new ArrayRealVector(new double[]{-0.318654191697157,0.912992309960507,-0.129270874079777,-0.184150038178035,0.096521712579439,-0.070468788536461,0.000247918177736}),new ArrayRealVector(new double[]{-0.051394668681147,0.073102235876933,0.173502042943743,-0.188311980310942,-0.327158794289386,0.905206581432676,-0.004296342252659}),new ArrayRealVector(new double[]{0.838150199198361,0.193305209055716,-0.457341242126146,-0.166933875895419,0.094512811358535,0.119062381338757,-0.000941755685226}),new ArrayRealVector(new double[]{0.438071395458547,0.314969169786246,0.768480630802146,0.227919171600705,-0.193317045298647,-0.170305467485594,0.001677380536009}),new ArrayRealVector(new double[]{-0.003726503878741,-0.010091946369146,-0.067152015137611,-0.113798146542187,-0.313123000097908,-0.118940107954918,0.932862311396062}),new ArrayRealVector(new double[]{0.009373003194332,0.025570377559400,0.170955836081348,0.291954519805750,0.807824267665706,0.320108347088646,0.360202112392266})};EigenDecomposition decomposition;decomposition=new EigenDecomposition(mainTridiagonal,secondaryTridiagonal);double[]eigenValues=decomposition.getRealEigenvalues();for (int i=0;i < refEigenValues.length;++i){Assert.assertEquals(refEigenValues[i],eigenValues[i],1.0e-4);if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i))< 0){Assert.assertEquals(0,refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(),1.0e-5);}else {Assert.assertEquals(0,refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(),1.0e-5);}}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testTridiagonal",0,"/** * test a matrix already in tridiagonal form. */@Test public void testTridiagonal(){Random r=new Random(4366663527842l);double[]ref=new double[30];for (int i=0;i < ref.length;++i){if (i < 5){ref[i]=2 * r.nextDouble()- 1;}else {ref[i]=0.0001 * r.nextDouble()+ 6;}}Arrays.sort(ref);TriDiagonalTransformer t=new TriDiagonalTransformer(createTestMatrix(r,ref));EigenDecomposition ed;ed=new EigenDecomposition(t.getMainDiagonalRef(),t.getSecondaryDiagonalRef());double[]eigenValues=ed.getRealEigenvalues();Assert.assertEquals(ref.length,eigenValues.length);for (int i=0;i < ref.length;++i){Assert.assertEquals(ref[ref.length - i - 1],eigenValues[i],2.0e-14);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){final int m=matrix.getRowDimension();EigenDecomposition ed;ed=new EigenDecomposition(matrix);Assert.assertEquals(m,ed.getV().getRowDimension());Assert.assertEquals(m,ed.getV().getColumnDimension());Assert.assertEquals(m,ed.getD().getColumnDimension());Assert.assertEquals(m,ed.getD().getColumnDimension());Assert.assertEquals(m,ed.getVT().getRowDimension());Assert.assertEquals(m,ed.getVT().getColumnDimension());}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testEigenvalues",0,"/** * test eigenvalues */@Test public void testEigenvalues(){EigenDecomposition ed;ed=new EigenDecomposition(matrix);double[]eigenValues=ed.getRealEigenvalues();Assert.assertEquals(refValues.length,eigenValues.length);for (int i=0;i < refValues.length;++i){Assert.assertEquals(refValues[i],eigenValues[i],3.0e-15);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testBigMatrix",0,"/** * test eigenvalues for a big matrix. */@Test public void testBigMatrix(){Random r=new Random(17748333525117l);double[]bigValues=new double[200];for (int i=0;i < bigValues.length;++i){bigValues[i]=2 * r.nextDouble()- 1;}Arrays.sort(bigValues);EigenDecomposition ed;ed=new EigenDecomposition(createTestMatrix(r,bigValues));double[]eigenValues=ed.getRealEigenvalues();Assert.assertEquals(bigValues.length,eigenValues.length);for (int i=0;i < bigValues.length;++i){Assert.assertEquals(bigValues[bigValues.length - i - 1],eigenValues[i],2.0e-14);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testSymmetric",0,"@Test public void testSymmetric(){RealMatrix symmetric=MatrixUtils.createRealMatrix(new double[][]{{4,1,1},{1,2,3},{1,3,6}});EigenDecomposition ed;ed=new EigenDecomposition(symmetric);RealMatrix d=ed.getD();RealMatrix v=ed.getV();RealMatrix vT=ed.getVT();double norm=v.multiply(d).multiply(vT).subtract(symmetric).getNorm();Assert.assertEquals(0,norm,6.0e-13);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testSquareRoot",0,"@Test public void testSquareRoot(){final double[][]data={{33,24,7},{24,57,11},{7,11,9}};final EigenDecomposition dec=new EigenDecomposition(MatrixUtils.createRealMatrix(data));final RealMatrix sqrtM=dec.getSquareRoot();final RealMatrix m=sqrtM.multiply(sqrtM);final int dim=data.length;for (int r=0;r < dim;r++){for (int c=0;c < dim;c++){Assert.assertEquals(""m["" + r + ""][""+ c+ ""]"",data[r][c],m.getEntry(r,c),1e-13);}}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testSquareRootNonSymmetric",0,"@Test(expected=MathUnsupportedOperationException.class)public void testSquareRootNonSymmetric(){final double[][]data={{1,2,4},{2,3,5},{11,5,9}};final EigenDecomposition dec=new EigenDecomposition(MatrixUtils.createRealMatrix(data));@SuppressWarnings(""unused"")final RealMatrix sqrtM=dec.getSquareRoot();}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testSquareRootNonPositiveDefinite",0,"@Test(expected=MathUnsupportedOperationException.class)public void testSquareRootNonPositiveDefinite(){final double[][]data={{1,2,4},{2,3,5},{4,5,-9}};final EigenDecomposition dec=new EigenDecomposition(MatrixUtils.createRealMatrix(data));@SuppressWarnings(""unused"")final RealMatrix sqrtM=dec.getSquareRoot();}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testUnsymmetric",0,"@Test public void testUnsymmetric(){double[][]vData={{-1.0,1.0,-1.0,1.0},{-8.0,4.0,-2.0,1.0},{27.0,9.0,3.0,1.0},{64.0,16.0,4.0,1.0}};checkUnsymmetricMatrix(MatrixUtils.createRealMatrix(vData));RealMatrix randMatrix=MatrixUtils.createRealMatrix(new double[][]{{0,1,0,0},{1,0,2.e-7,0},{0,-2.e-7,0,1},{0,0,1,0}});checkUnsymmetricMatrix(randMatrix);double[][]randData2={{0.680,-0.3300,-0.2700,-0.717,-0.687,0.0259},{-0.211,0.5360,0.0268,0.214,-0.198,0.6780},{0.566,-0.4440,0.9040,-0.967,-0.740,0.2250},{0.597,0.1080,0.8320,-0.514,-0.782,-0.4080},{0.823,-0.0452,0.2710,-0.726,0.998,0.2750},{-0.605,0.2580,0.4350,0.608,-0.563,0.0486}};checkUnsymmetricMatrix(MatrixUtils.createRealMatrix(randData2));}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testRandomUnsymmetricMatrix",0,"@Test @Ignore public void testRandomUnsymmetricMatrix(){for (int run=0;run < 100;run++){Random r=new Random(System.currentTimeMillis());int size=r.nextInt(20)+ 4;double[][]data=new double[size][size];for (int i=0;i < size;i++){for (int j=0;j < size;j++){data[i][j]=r.nextInt(100);}}RealMatrix m=MatrixUtils.createRealMatrix(data);checkUnsymmetricMatrix(m);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testNormalDistributionUnsymmetricMatrix",0,"@Test @Ignore public void testNormalDistributionUnsymmetricMatrix(){for (int run=0;run < 100;run++){Random r=new Random(System.currentTimeMillis());NormalDistribution dist=new NormalDistribution(0.0,r.nextDouble()* 5);int size=r.nextInt(20)+ 4;double[][]data=new double[size][size];for (int i=0;i < size;i++){for (int j=0;j < size;j++){data[i][j]=dist.sample();}}RealMatrix m=MatrixUtils.createRealMatrix(data);checkUnsymmetricMatrix(m);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testMath848",0,"@Test public void testMath848(){double[][]data={{0.1849449280,-0.0646971046,0.0774755812,-0.0969651755,-0.0692648806,0.3282344352,-0.0177423074,0.2063136340},{-0.0742700134,-0.0289063030,-0.0017269460,-0.0375550146,-0.0487737922,-0.2616837868,-0.0821201295,-0.2530000167},{0.2549910127,0.0995733692,-0.0009718388,0.0149282808,0.1791878897,-0.0823182816,0.0582629256,0.3219545182},{-0.0694747557,-0.1880649148,-0.2740630911,0.0720096468,-0.1800836914,-0.3518996425,0.2486747833,0.6257938167},{0.0536360918,-0.1339297778,0.2241579764,-0.0195327484,-0.0054103808,0.0347564518,0.5120802482,-0.0329902864},{-0.5933332356,-0.2488721082,0.2357173629,0.0177285473,0.0856630593,-0.3567126300,-0.1600668126,-0.1010899621},{-0.0514349819,-0.0854319435,0.1125050061,0.0063453560,-0.2250000688,-0.2209343090,0.1964623477,-0.1512329924},{0.0197395947,-0.1997170581,-0.1425959019,-0.2749477910,-0.0969467073,0.0603688520,-0.2826905192,0.1794315473}};RealMatrix m=MatrixUtils.createRealMatrix(data);checkUnsymmetricMatrix(m);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testEigenvectors",0,"/** * test eigenvectors */@Test public void testEigenvectors(){EigenDecomposition ed;ed=new EigenDecomposition(matrix);for (int i=0;i < matrix.getRowDimension();++i){double lambda=ed.getRealEigenvalue(i);RealVector v=ed.getEigenvector(i);RealVector mV=matrix.operate(v);Assert.assertEquals(0,mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(),1.0e-13);}}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testAEqualVDVt",0,"/** * test A = VDVt */@Test public void testAEqualVDVt(){EigenDecomposition ed;ed=new EigenDecomposition(matrix);RealMatrix v=ed.getV();RealMatrix d=ed.getD();RealMatrix vT=ed.getVT();double norm=v.multiply(d).multiply(vT).subtract(matrix).getNorm();Assert.assertEquals(0,norm,6.0e-13);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testVOrthogonal",0,"/** * test that V is orthogonal */@Test public void testVOrthogonal(){RealMatrix v=new EigenDecomposition(matrix).getV();RealMatrix vTv=v.transpose().multiply(v);RealMatrix id=MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension());Assert.assertEquals(0,vTv.subtract(id).getNorm(),2.0e-13);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDiagonal",0,"/** * test diagonal matrix */@Test public void testDiagonal(){double[]diagonal=new double[]{-3.0,-2.0,2.0,5.0};RealMatrix m=MatrixUtils.createRealDiagonalMatrix(diagonal);EigenDecomposition ed;ed=new EigenDecomposition(m);Assert.assertEquals(diagonal[0],ed.getRealEigenvalue(3),2.0e-15);Assert.assertEquals(diagonal[1],ed.getRealEigenvalue(2),2.0e-15);Assert.assertEquals(diagonal[2],ed.getRealEigenvalue(1),2.0e-15);Assert.assertEquals(diagonal[3],ed.getRealEigenvalue(0),2.0e-15);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testRepeatedEigenvalue",0,"/** * Matrix with eigenvalues {8,-1,-1}*/@Test public void testRepeatedEigenvalue(){RealMatrix repeated=MatrixUtils.createRealMatrix(new double[][]{{3,2,4},{2,0,2},{4,2,3}});EigenDecomposition ed;ed=new EigenDecomposition(repeated);checkEigenValues((new double[]{8,-1,-1}),ed,1E-12);checkEigenVector((new double[]{2,1,2}),ed,1E-12);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testDistinctEigenvalues",0,"/** * Matrix with eigenvalues {2,0,12}*/@Test public void testDistinctEigenvalues(){RealMatrix distinct=MatrixUtils.createRealMatrix(new double[][]{{3,1,-4},{1,3,-4},{-4,-4,8}});EigenDecomposition ed;ed=new EigenDecomposition(distinct);checkEigenValues((new double[]{2,0,12}),ed,1E-12);checkEigenVector((new double[]{1,-1,0}),ed,1E-12);checkEigenVector((new double[]{1,1,1}),ed,1E-12);checkEigenVector((new double[]{-1,-1,2}),ed,1E-12);}"
"org.apache.commons.math3.linear.EigenDecompositionTest.testZeroDivide",0,"/** * Verifies operation on indefinite matrix*/@Test public void testZeroDivide(){RealMatrix indefinite=MatrixUtils.createRealMatrix(new double[][]{{0.0,1.0,-1.0},{1.0,1.0,0.0},{-1.0,0.0,1.0}});EigenDecomposition ed;ed=new EigenDecomposition(indefinite);checkEigenValues((new double[]{2,1,-1}),ed,1E-12);double isqrt3=1 / FastMath.sqrt(3.0);checkEigenVector((new double[]{isqrt3,isqrt3,-isqrt3}),ed,1E-12);double isqrt2=1 / FastMath.sqrt(2.0);checkEigenVector((new double[]{0.0,-isqrt2,-isqrt2}),ed,1E-12);double isqrt6=1 / FastMath.sqrt(6.0);checkEigenVector((new double[]{2 * isqrt6,-isqrt6,isqrt6}),ed,1E-12);}"
"org.apache.commons.math3.analysis.solvers.RegulaFalsiSolverTest.testIssue631",0,"@Test(expected=ConvergenceException.class)public void testIssue631(){final UnivariateFunction f=new UnivariateFunction(){/** * {@inheritDoc}*/public double value(double x){return Math.exp(x)- Math.pow(Math.PI,3.0);}};final UnivariateSolver solver=new RegulaFalsiSolver();final double root=solver.solve(3624,f,1,10);Assert.assertEquals(3.4341896575482003,root,1e-15);}"
"org.apache.commons.math3.stat.descriptive.moment.SkewnessTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n < 3*/@Test public void testNaN(){Skewness skew=new Skewness();Assert.assertTrue(Double.isNaN(skew.getResult()));skew.increment(1d);Assert.assertTrue(Double.isNaN(skew.getResult()));skew.increment(1d);Assert.assertTrue(Double.isNaN(skew.getResult()));skew.increment(1d);Assert.assertFalse(Double.isNaN(skew.getResult()));}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testMoreRows",0,"@Test public void testMoreRows(){final double[]singularValues={123.456,2.3,1.001,0.999};final int rows=singularValues.length + 2;final int columns=singularValues.length;Random r=new Random(15338437322523l);SingularValueDecomposition svd=new SingularValueDecomposition(createTestMatrix(r,rows,columns,singularValues));double[]computedSV=svd.getSingularValues();Assert.assertEquals(singularValues.length,computedSV.length);for (int i=0;i < singularValues.length;++i){Assert.assertEquals(singularValues[i],computedSV[i],1.0e-10);}}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testMoreColumns",0,"@Test public void testMoreColumns(){final double[]singularValues={123.456,2.3,1.001,0.999};final int rows=singularValues.length;final int columns=singularValues.length + 2;Random r=new Random(732763225836210l);SingularValueDecomposition svd=new SingularValueDecomposition(createTestMatrix(r,rows,columns,singularValues));double[]computedSV=svd.getSingularValues();Assert.assertEquals(singularValues.length,computedSV.length);for (int i=0;i < singularValues.length;++i){Assert.assertEquals(singularValues[i],computedSV[i],1.0e-10);}}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){RealMatrix matrix=MatrixUtils.createRealMatrix(testSquare);final int m=matrix.getRowDimension();final int n=matrix.getColumnDimension();SingularValueDecomposition svd=new SingularValueDecomposition(matrix);Assert.assertEquals(m,svd.getU().getRowDimension());Assert.assertEquals(m,svd.getU().getColumnDimension());Assert.assertEquals(m,svd.getS().getColumnDimension());Assert.assertEquals(n,svd.getS().getColumnDimension());Assert.assertEquals(n,svd.getV().getRowDimension());Assert.assertEquals(n,svd.getV().getColumnDimension());}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testHadamard",0,"/** * Test based on a dimension 4 Hadamard matrix. */@Test public void testHadamard(){RealMatrix matrix=new Array2DRowRealMatrix(new double[][]{{15.0 / 2.0,5.0 / 2.0,9.0 / 2.0,3.0 / 2.0},{5.0 / 2.0,15.0 / 2.0,3.0 / 2.0,9.0 / 2.0},{9.0 / 2.0,3.0 / 2.0,15.0 / 2.0,5.0 / 2.0},{3.0 / 2.0,9.0 / 2.0,5.0 / 2.0,15.0 / 2.0}},false);SingularValueDecomposition svd=new SingularValueDecomposition(matrix);Assert.assertEquals(16.0,svd.getSingularValues()[0],1.0e-14);Assert.assertEquals(8.0,svd.getSingularValues()[1],1.0e-14);Assert.assertEquals(4.0,svd.getSingularValues()[2],1.0e-14);Assert.assertEquals(2.0,svd.getSingularValues()[3],1.0e-14);RealMatrix fullCovariance=new Array2DRowRealMatrix(new double[][]{{85.0 / 1024,-51.0 / 1024,-75.0 / 1024,45.0 / 1024},{-51.0 / 1024,85.0 / 1024,45.0 / 1024,-75.0 / 1024},{-75.0 / 1024,45.0 / 1024,85.0 / 1024,-51.0 / 1024},{45.0 / 1024,-75.0 / 1024,-51.0 / 1024,85.0 / 1024}},false);Assert.assertEquals(0.0,fullCovariance.subtract(svd.getCovariance(0.0)).getNorm(),1.0e-14);RealMatrix halfCovariance=new Array2DRowRealMatrix(new double[][]{{5.0 / 1024,-3.0 / 1024,5.0 / 1024,-3.0 / 1024},{-3.0 / 1024,5.0 / 1024,-3.0 / 1024,5.0 / 1024},{5.0 / 1024,-3.0 / 1024,5.0 / 1024,-3.0 / 1024},{-3.0 / 1024,5.0 / 1024,-3.0 / 1024,5.0 / 1024}},false);Assert.assertEquals(0.0,halfCovariance.subtract(svd.getCovariance(6.0)).getNorm(),1.0e-14);}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testAEqualUSVt",0,"/** * test A = USVt */@Test public void testAEqualUSVt(){checkAEqualUSVt(MatrixUtils.createRealMatrix(testSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare));checkAEqualUSVt(MatrixUtils.createRealMatrix(testNonSquare).transpose());}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testUOrthogonal",0,"/** * test that U is orthogonal */@Test public void testUOrthogonal(){checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getU());checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare)).getU());checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getU());}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testVOrthogonal",0,"/** * test that V is orthogonal */@Test public void testVOrthogonal(){checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare)).getV());checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare)).getV());checkOrthogonal(new SingularValueDecomposition(MatrixUtils.createRealMatrix(testNonSquare).transpose()).getV());}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testMatricesValues1",0,"/** * test matrices values */public void testMatricesValues1(){SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare));RealMatrix uRef=MatrixUtils.createRealMatrix(new double[][]{{3.0 / 5.0,-4.0 / 5.0},{4.0 / 5.0,3.0 / 5.0}});RealMatrix sRef=MatrixUtils.createRealMatrix(new double[][]{{3.0,0.0},{0.0,1.0}});RealMatrix vRef=MatrixUtils.createRealMatrix(new double[][]{{4.0 / 5.0,3.0 / 5.0},{3.0 / 5.0,-4.0 / 5.0}});RealMatrix u=svd.getU();Assert.assertEquals(0,u.subtract(uRef).getNorm(),normTolerance);RealMatrix s=svd.getS();Assert.assertEquals(0,s.subtract(sRef).getNorm(),normTolerance);RealMatrix v=svd.getV();Assert.assertEquals(0,v.subtract(vRef).getNorm(),normTolerance);Assert.assertTrue(u == svd.getU());Assert.assertTrue(s == svd.getS());Assert.assertTrue(v == svd.getV());}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testRank",0,"/** * test MATH-465 */@Test public void testRank(){double[][]d={{1,1,1},{0,0,0},{1,2,3}};RealMatrix m=new Array2DRowRealMatrix(d);SingularValueDecomposition svd=new SingularValueDecomposition(m);Assert.assertEquals(2,svd.getRank());}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testStability1",0,"/** * test MATH-583 */@Test public void testStability1(){RealMatrix m=new Array2DRowRealMatrix(201,201);loadRealMatrix(m,""matrix1.csv"");try {new SingularValueDecomposition(m);}catch(Exception e){Assert.fail(""Exception whilst constructing SVD"");}}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testStability2",0,"/** * test MATH-327 */@Test public void testStability2(){RealMatrix m=new Array2DRowRealMatrix(7,168);loadRealMatrix(m,""matrix2.csv"");try {new SingularValueDecomposition(m);}catch(Throwable e){Assert.fail(""Exception whilst constructing SVD"");}}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testConditionNumber",0,"/** * test condition number */@Test public void testConditionNumber(){SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare));Assert.assertEquals(3.0,svd.getConditionNumber(),1.5e-15);}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testInverseConditionNumber",0,"@Test public void testInverseConditionNumber(){SingularValueDecomposition svd=new SingularValueDecomposition(MatrixUtils.createRealMatrix(testSquare));Assert.assertEquals(1.0 / 3.0,svd.getInverseConditionNumber(),1.5e-15);}"
"org.apache.commons.math3.linear.SingularValueDecompositionTest.testIssue947",0,"@Test public void testIssue947(){double[][]nans=new double[][]{{Double.NaN,Double.NaN},{Double.NaN,Double.NaN}};RealMatrix m=new Array2DRowRealMatrix(nans,false);SingularValueDecomposition svd=new SingularValueDecomposition(m);Assert.assertTrue(Double.isNaN(svd.getSingularValues()[0]));Assert.assertTrue(Double.isNaN(svd.getSingularValues()[1]));}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testSetterInjection",0,"@Test public void testSetterInjection(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(3);Assert.assertEquals(2,stats.getMean(),1E-10);stats.setMeanImpl(new deepMean());Assert.assertEquals(42,stats.getMean(),1E-10);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testCopy",0,"@Test public void testCopy(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(3);DescriptiveStatistics copy=new DescriptiveStatistics(stats);Assert.assertEquals(2,copy.getMean(),1E-10);stats.setMeanImpl(new deepMean());copy=stats.copy();Assert.assertEquals(42,copy.getMean(),1E-10);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testWindowSize",0,"@Test public void testWindowSize(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.setWindowSize(300);for (int i=0;i < 100;++i){stats.addValue(i + 1);}int refSum=(100 * 101)/ 2;Assert.assertEquals(refSum / 100.0,stats.getMean(),1E-10);Assert.assertEquals(300,stats.getWindowSize());try {stats.setWindowSize(-3);Assert.fail(""an exception should have been thrown"");}catch(IllegalArgumentException iae){}Assert.assertEquals(300,stats.getWindowSize());stats.setWindowSize(50);Assert.assertEquals(50,stats.getWindowSize());int refSum2=refSum - (50 * 51)/ 2;Assert.assertEquals(refSum2 / 50.0,stats.getMean(),1E-10);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testGetValues",0,"@Test public void testGetValues(){DescriptiveStatistics stats=createDescriptiveStatistics();for (int i=100;i > 0;--i){stats.addValue(i);}int refSum=(100 * 101)/ 2;Assert.assertEquals(refSum / 100.0,stats.getMean(),1E-10);double[]v=stats.getValues();for (int i=0;i < v.length;++i){Assert.assertEquals(100.0 - i,v[i],1.0e-10);}double[]s=stats.getSortedValues();for (int i=0;i < s.length;++i){Assert.assertEquals(i + 1.0,s[i],1.0e-10);}Assert.assertEquals(12.0,stats.getElement(88),1.0e-10);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testToString",0,"@Test public void testToString(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(2);stats.addValue(3);Locale d=Locale.getDefault();Locale.setDefault(Locale.US);Assert.assertEquals(""DescriptiveStatistics:\n"" + ""n: 3\n"" + ""min: 1.0\n""+ ""max: 3.0\n""+ ""mean: 2.0\n""+ ""std dev: 1.0\n""+ ""median: 2.0\n""+ ""skewness: 0.0\n""+ ""kurtosis: NaN\n"",stats.toString());Locale.setDefault(d);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testShuffledStatistics",0,"@Test public void testShuffledStatistics(){DescriptiveStatistics reference=createDescriptiveStatistics();DescriptiveStatistics shuffled=createDescriptiveStatistics();UnivariateStatistic tmp=shuffled.getGeometricMeanImpl();shuffled.setGeometricMeanImpl(shuffled.getMeanImpl());shuffled.setMeanImpl(shuffled.getKurtosisImpl());shuffled.setKurtosisImpl(shuffled.getSkewnessImpl());shuffled.setSkewnessImpl(shuffled.getVarianceImpl());shuffled.setVarianceImpl(shuffled.getMaxImpl());shuffled.setMaxImpl(shuffled.getMinImpl());shuffled.setMinImpl(shuffled.getSumImpl());shuffled.setSumImpl(shuffled.getSumsqImpl());shuffled.setSumsqImpl(tmp);for (int i=100;i > 0;--i){reference.addValue(i);shuffled.addValue(i);}Assert.assertEquals(reference.getMean(),shuffled.getGeometricMean(),1.0e-10);Assert.assertEquals(reference.getKurtosis(),shuffled.getMean(),1.0e-10);Assert.assertEquals(reference.getSkewness(),shuffled.getKurtosis(),1.0e-10);Assert.assertEquals(reference.getVariance(),shuffled.getSkewness(),1.0e-10);Assert.assertEquals(reference.getMax(),shuffled.getVariance(),1.0e-10);Assert.assertEquals(reference.getMin(),shuffled.getMax(),1.0e-10);Assert.assertEquals(reference.getSum(),shuffled.getMin(),1.0e-10);Assert.assertEquals(reference.getSumsq(),shuffled.getSum(),1.0e-10);Assert.assertEquals(reference.getGeometricMean(),shuffled.getSumsq(),1.0e-10);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testPercentileSetter",0,"@Test public void testPercentileSetter(){DescriptiveStatistics stats=createDescriptiveStatistics();stats.addValue(1);stats.addValue(2);stats.addValue(3);Assert.assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new goodPercentile());Assert.assertEquals(2,stats.getPercentile(50.0),1E-10);stats.setPercentileImpl(new subPercentile());Assert.assertEquals(10.0,stats.getPercentile(10.0),1E-10);try {stats.setPercentileImpl(new badPercentile());Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.test20090720",0,"@Test public void test20090720(){DescriptiveStatistics descriptiveStatistics=new DescriptiveStatistics(100);for (int i=0;i < 161;i++){descriptiveStatistics.addValue(1.2);}descriptiveStatistics.clear();descriptiveStatistics.addValue(1.2);Assert.assertEquals(1,descriptiveStatistics.getN());}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testRemoval",0,"@Test public void testRemoval(){final DescriptiveStatistics dstat=createDescriptiveStatistics();checkremoval(dstat,1,6.0,0.0,Double.NaN);checkremoval(dstat,3,5.0,3.0,4.5);checkremoval(dstat,6,3.5,2.5,3.0);checkremoval(dstat,9,3.5,2.5,3.0);checkremoval(dstat,DescriptiveStatistics.INFINITE_WINDOW,3.5,2.5,3.0);}"
"org.apache.commons.math3.stat.descriptive.DescriptiveStatisticsTest.testSummaryConsistency",0,"@Test public void testSummaryConsistency(){final DescriptiveStatistics dstats=new DescriptiveStatistics();final SummaryStatistics sstats=new SummaryStatistics();final int windowSize=5;dstats.setWindowSize(windowSize);final double tol=1E-12;for (int i=0;i < 20;i++){dstats.addValue(i);sstats.clear();double[]values=dstats.getValues();for (int j=0;j < values.length;j++){sstats.addValue(values[j]);}TestUtils.assertEquals(dstats.getMean(),sstats.getMean(),tol);TestUtils.assertEquals(new Mean().evaluate(values),dstats.getMean(),tol);TestUtils.assertEquals(dstats.getMax(),sstats.getMax(),tol);TestUtils.assertEquals(new Max().evaluate(values),dstats.getMax(),tol);TestUtils.assertEquals(dstats.getGeometricMean(),sstats.getGeometricMean(),tol);TestUtils.assertEquals(new GeometricMean().evaluate(values),dstats.getGeometricMean(),tol);TestUtils.assertEquals(dstats.getMin(),sstats.getMin(),tol);TestUtils.assertEquals(new Min().evaluate(values),dstats.getMin(),tol);TestUtils.assertEquals(dstats.getStandardDeviation(),sstats.getStandardDeviation(),tol);TestUtils.assertEquals(dstats.getVariance(),sstats.getVariance(),tol);TestUtils.assertEquals(new Variance().evaluate(values),dstats.getVariance(),tol);TestUtils.assertEquals(dstats.getSum(),sstats.getSum(),tol);TestUtils.assertEquals(new Sum().evaluate(values),dstats.getSum(),tol);TestUtils.assertEquals(dstats.getSumsq(),sstats.getSumsq(),tol);TestUtils.assertEquals(new SumOfSquares().evaluate(values),dstats.getSumsq(),tol);TestUtils.assertEquals(dstats.getPopulationVariance(),sstats.getPopulationVariance(),tol);TestUtils.assertEquals(new Variance(false).evaluate(values),dstats.getPopulationVariance(),tol);}}"
"org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});MultivariateDifferentiableVectorOptimizer underlyingOptimizer=new MultivariateDifferentiableVectorOptimizer(){private GaussNewtonOptimizer gn=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1.0e-6,1.0e-6));public PointVectorValuePair optimize(int maxEval,MultivariateDifferentiableVectorFunction f,double[]target,double[]weight,double[]startPoint){return gn.optimize(maxEval,f,target,weight,startPoint);}public int getMaxEvaluations(){return gn.getMaxEvaluations();}public int getEvaluations(){return gn.getEvaluations();}public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker(){return gn.getConvergenceChecker();}};JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(16069223052l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));MultivariateDifferentiableVectorMultiStartOptimizer optimizer=new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,10,generator);try {optimizer.getOptima();Assert.fail(""an exception should have been thrown"");}catch(MathIllegalStateException ise){}PointVectorValuePair optimum=optimizer.optimize(100,problem,problem.target,new double[]{1},new double[]{0});Assert.assertEquals(1.5,optimum.getPoint()[0],1.0e-10);Assert.assertEquals(3.0,optimum.getValue()[0],1.0e-10);PointVectorValuePair[]optima=optimizer.getOptima();Assert.assertEquals(10,optima.length);for (int i=0;i < optima.length;++i){Assert.assertEquals(1.5,optima[i].getPoint()[0],1.0e-10);Assert.assertEquals(3.0,optima[i].getValue()[0],1.0e-10);}Assert.assertTrue(optimizer.getEvaluations()> 20);Assert.assertTrue(optimizer.getEvaluations()< 50);Assert.assertEquals(100,optimizer.getMaxEvaluations());}"
"org.apache.commons.math3.optimization.MultivariateDifferentiableVectorMultiStartOptimizerTest.testNoOptimum",0,"@Test(expected=TestException.class)public void testNoOptimum(){MultivariateDifferentiableVectorOptimizer underlyingOptimizer=new MultivariateDifferentiableVectorOptimizer(){private GaussNewtonOptimizer gn=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1.0e-6,1.0e-6));public PointVectorValuePair optimize(int maxEval,MultivariateDifferentiableVectorFunction f,double[]target,double[]weight,double[]startPoint){return gn.optimize(maxEval,f,target,weight,startPoint);}public int getMaxEvaluations(){return gn.getMaxEvaluations();}public int getEvaluations(){return gn.getEvaluations();}public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker(){return gn.getConvergenceChecker();}};JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(12373523445l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));MultivariateDifferentiableVectorMultiStartOptimizer optimizer=new MultivariateDifferentiableVectorMultiStartOptimizer(underlyingOptimizer,10,generator);optimizer.optimize(100,new MultivariateDifferentiableVectorFunction(){public double[]value(double[]point){throw new TestException();}public DerivativeStructure[]value(DerivativeStructure[]point){return point;}},new double[]{2},new double[]{1},new double[]{0});}"
"org.apache.commons.math3.genetics.BinaryChromosomeTest.testInvalidConstructor",0,"@Test public void testInvalidConstructor(){Integer[][]reprs=new Integer[][]{new Integer[]{0,1,0,1,2},new Integer[]{0,1,0,1,-1}};for(Integer[]repr : reprs){try {new DummyBinaryChromosome(repr);Assert.fail(""Exception not caught"");}catch(IllegalArgumentException e){}}}"
"org.apache.commons.math3.genetics.BinaryChromosomeTest.testRandomConstructor",0,"@Test public void testRandomConstructor(){for (int i=0;i < 20;i++){new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(10));}}"
"org.apache.commons.math3.genetics.BinaryChromosomeTest.testIsSame",0,"@Test public void testIsSame(){Chromosome c1=new DummyBinaryChromosome(new Integer[]{0,1,0,1,0,1});Chromosome c2=new DummyBinaryChromosome(new Integer[]{0,1,1,0,1});Chromosome c3=new DummyBinaryChromosome(new Integer[]{0,1,0,1,0,1,1});Chromosome c4=new DummyBinaryChromosome(new Integer[]{1,1,0,1,0,1});Chromosome c5=new DummyBinaryChromosome(new Integer[]{0,1,0,1,0,0});Chromosome c6=new DummyBinaryChromosome(new Integer[]{0,1,0,1,0,1});Assert.assertFalse(c1.isSame(c2));Assert.assertFalse(c1.isSame(c3));Assert.assertFalse(c1.isSame(c4));Assert.assertFalse(c1.isSame(c5));Assert.assertTrue(c1.isSame(c6));}"
"org.apache.commons.math3.linear.LUSolverTest.testThreshold",0,"/** * test threshold impact */@Test public void testThreshold(){final RealMatrix matrix=MatrixUtils.createRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,5.0,3.0},{4.000001,9.0,9.0}});Assert.assertFalse(new LUDecomposition(matrix,1.0e-5).getSolver().isNonSingular());Assert.assertTrue(new LUDecomposition(matrix,1.0e-10).getSolver().isNonSingular());}"
"org.apache.commons.math3.linear.LUSolverTest.testSingular",0,"/** * test singular */@Test public void testSingular(){DecompositionSolver solver=new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();Assert.assertTrue(solver.isNonSingular());solver=new LUDecomposition(MatrixUtils.createRealMatrix(singular)).getSolver();Assert.assertFalse(solver.isNonSingular());solver=new LUDecomposition(MatrixUtils.createRealMatrix(bigSingular)).getSolver();Assert.assertFalse(solver.isNonSingular());}"
"org.apache.commons.math3.linear.LUSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){DecompositionSolver solver=new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.LUSolverTest.testSolveSingularityErrors",0,"/** * test solve singularity errors */@Test public void testSolveSingularityErrors(){DecompositionSolver solver=new LUDecomposition(MatrixUtils.createRealMatrix(singular)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException ime){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException ime){}try {solver.solve(new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(0)));Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException ime){}}"
"org.apache.commons.math3.linear.LUSolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){DecompositionSolver solver=new LUDecomposition(MatrixUtils.createRealMatrix(testData)).getSolver();RealMatrix b=MatrixUtils.createRealMatrix(new double[][]{{1,0},{2,-5},{3,1}});RealMatrix xRef=MatrixUtils.createRealMatrix(new double[][]{{19,-71},{-6,22},{-2,9}});Assert.assertEquals(0,solver.solve(b).subtract(xRef).getNorm(),1.0e-13);for (int i=0;i < b.getColumnDimension();++i){Assert.assertEquals(0,solver.solve(b.getColumnVector(i)).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}for (int i=0;i < b.getColumnDimension();++i){ArrayRealVectorTest.RealVectorTestImpl v=new ArrayRealVectorTest.RealVectorTestImpl(b.getColumn(i));Assert.assertEquals(0,solver.solve(v).subtract(xRef.getColumnVector(i)).getNorm(),1.0e-13);}}"
"org.apache.commons.math3.linear.LUSolverTest.testDeterminant",0,"/** * test determinant */@Test public void testDeterminant(){Assert.assertEquals(-1,getDeterminant(MatrixUtils.createRealMatrix(testData)),1.0e-15);Assert.assertEquals(-10,getDeterminant(MatrixUtils.createRealMatrix(luData)),1.0e-14);Assert.assertEquals(0,getDeterminant(MatrixUtils.createRealMatrix(singular)),1.0e-17);Assert.assertEquals(0,getDeterminant(MatrixUtils.createRealMatrix(bigSingular)),1.0e-10);}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){FieldMatrix<Fraction> matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData);FieldLUDecomposition<Fraction> LU=new FieldLUDecomposition<Fraction>(matrix);Assert.assertEquals(testData.length,LU.getL().getRowDimension());Assert.assertEquals(testData.length,LU.getL().getColumnDimension());Assert.assertEquals(testData.length,LU.getU().getRowDimension());Assert.assertEquals(testData.length,LU.getU().getColumnDimension());Assert.assertEquals(testData.length,LU.getP().getRowDimension());Assert.assertEquals(testData.length,LU.getP().getColumnDimension());}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testNonSquare",0,"/** * test non-square matrix */@Test public void testNonSquare(){try {new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(new Fraction[][]{{Fraction.ZERO,Fraction.ZERO},{Fraction.ZERO,Fraction.ZERO},{Fraction.ZERO,Fraction.ZERO}}));Assert.fail(""Expected NonSquareMatrixException"");}catch(NonSquareMatrixException ime){}}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testPAEqualLU",0,"/** * test PA = LU */@Test public void testPAEqualLU(){FieldMatrix<Fraction> matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData);FieldLUDecomposition<Fraction> lu=new FieldLUDecomposition<Fraction>(matrix);FieldMatrix<Fraction> l=lu.getL();FieldMatrix<Fraction> u=lu.getU();FieldMatrix<Fraction> p=lu.getP();TestUtils.assertEquals(p.multiply(matrix),l.multiply(u));matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testDataMinus);lu=new FieldLUDecomposition<Fraction>(matrix);l=lu.getL();u=lu.getU();p=lu.getP();TestUtils.assertEquals(p.multiply(matrix),l.multiply(u));matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),17,17);for (int i=0;i < matrix.getRowDimension();++i){matrix.setEntry(i,i,Fraction.ONE);}lu=new FieldLUDecomposition<Fraction>(matrix);l=lu.getL();u=lu.getU();p=lu.getP();TestUtils.assertEquals(p.multiply(matrix),l.multiply(u));matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),singular);lu=new FieldLUDecomposition<Fraction>(matrix);Assert.assertFalse(lu.getSolver().isNonSingular());Assert.assertNull(lu.getL());Assert.assertNull(lu.getU());Assert.assertNull(lu.getP());matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),bigSingular);lu=new FieldLUDecomposition<Fraction>(matrix);Assert.assertFalse(lu.getSolver().isNonSingular());Assert.assertNull(lu.getL());Assert.assertNull(lu.getU());Assert.assertNull(lu.getP());}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testLLowerTriangular",0,"/** * test that L is lower triangular with unit diagonal */@Test public void testLLowerTriangular(){FieldMatrix<Fraction> matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData);FieldMatrix<Fraction> l=new FieldLUDecomposition<Fraction>(matrix).getL();for (int i=0;i < l.getRowDimension();i++){Assert.assertEquals(Fraction.ONE,l.getEntry(i,i));for (int j=i + 1;j < l.getColumnDimension();j++){Assert.assertEquals(Fraction.ZERO,l.getEntry(i,j));}}}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testUUpperTriangular",0,"/** * test that U is upper triangular */@Test public void testUUpperTriangular(){FieldMatrix<Fraction> matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData);FieldMatrix<Fraction> u=new FieldLUDecomposition<Fraction>(matrix).getU();for (int i=0;i < u.getRowDimension();i++){for (int j=0;j < i;j++){Assert.assertEquals(Fraction.ZERO,u.getEntry(i,j));}}}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testPPermutation",0,"/** * test that P is a permutation matrix */@Test public void testPPermutation(){FieldMatrix<Fraction> matrix=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData);FieldMatrix<Fraction> p=new FieldLUDecomposition<Fraction>(matrix).getP();FieldMatrix<Fraction> ppT=p.multiply(p.transpose());FieldMatrix<Fraction> id=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),p.getRowDimension(),p.getRowDimension());for (int i=0;i < id.getRowDimension();++i){id.setEntry(i,i,Fraction.ONE);}TestUtils.assertEquals(id,ppT);for (int i=0;i < p.getRowDimension();i++){int zeroCount=0;int oneCount=0;int otherCount=0;for (int j=0;j < p.getColumnDimension();j++){final Fraction e=p.getEntry(i,j);if (e.equals(Fraction.ZERO)){++zeroCount;}else       if (e.equals(Fraction.ONE)){++oneCount;}else {++otherCount;}}Assert.assertEquals(p.getColumnDimension()- 1,zeroCount);Assert.assertEquals(1,oneCount);Assert.assertEquals(0,otherCount);}for (int j=0;j < p.getColumnDimension();j++){int zeroCount=0;int oneCount=0;int otherCount=0;for (int i=0;i < p.getRowDimension();i++){final Fraction e=p.getEntry(i,j);if (e.equals(Fraction.ZERO)){++zeroCount;}else       if (e.equals(Fraction.ONE)){++oneCount;}else {++otherCount;}}Assert.assertEquals(p.getRowDimension()- 1,zeroCount);Assert.assertEquals(1,oneCount);Assert.assertEquals(0,otherCount);}}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testSingular",0,"/** * test singular */@Test public void testSingular(){FieldLUDecomposition<Fraction> lu=new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData));Assert.assertTrue(lu.getSolver().isNonSingular());lu=new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),singular));Assert.assertFalse(lu.getSolver().isNonSingular());lu=new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),bigSingular));Assert.assertFalse(lu.getSolver().isNonSingular());}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testMatricesValues1",0,"/** * test matrices values */@Test public void testMatricesValues1(){FieldLUDecomposition<Fraction> lu=new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),testData));FieldMatrix<Fraction> lRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(0),new Fraction(0)},{new Fraction(2),new Fraction(1),new Fraction(0)},{new Fraction(1),new Fraction(-2),new Fraction(1)}});FieldMatrix<Fraction> uRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(2),new Fraction(3)},{new Fraction(0),new Fraction(1),new Fraction(-3)},{new Fraction(0),new Fraction(0),new Fraction(-1)}});FieldMatrix<Fraction> pRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(0),new Fraction(0)},{new Fraction(0),new Fraction(1),new Fraction(0)},{new Fraction(0),new Fraction(0),new Fraction(1)}});int[]pivotRef={0,1,2};FieldMatrix<Fraction> l=lu.getL();TestUtils.assertEquals(lRef,l);FieldMatrix<Fraction> u=lu.getU();TestUtils.assertEquals(uRef,u);FieldMatrix<Fraction> p=lu.getP();TestUtils.assertEquals(pRef,p);int[]pivot=lu.getPivot();for (int i=0;i < pivotRef.length;++i){Assert.assertEquals(pivotRef[i],pivot[i]);}Assert.assertTrue(l == lu.getL());Assert.assertTrue(u == lu.getU());Assert.assertTrue(p == lu.getP());}"
"org.apache.commons.math3.linear.FieldLUDecompositionTest.testMatricesValues2",0,"/** * test matrices values */@Test public void testMatricesValues2(){FieldLUDecomposition<Fraction> lu=new FieldLUDecomposition<Fraction>(new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),luData));FieldMatrix<Fraction> lRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(0),new Fraction(0)},{new Fraction(3),new Fraction(1),new Fraction(0)},{new Fraction(1),new Fraction(0),new Fraction(1)}});FieldMatrix<Fraction> uRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(2),new Fraction(3),new Fraction(3)},{new Fraction(0),new Fraction(-3),new Fraction(-1)},{new Fraction(0),new Fraction(0),new Fraction(4)}});FieldMatrix<Fraction> pRef=new Array2DRowFieldMatrix<Fraction>(FractionField.getInstance(),new Fraction[][]{{new Fraction(1),new Fraction(0),new Fraction(0)},{new Fraction(0),new Fraction(0),new Fraction(1)},{new Fraction(0),new Fraction(1),new Fraction(0)}});int[]pivotRef={0,2,1};FieldMatrix<Fraction> l=lu.getL();TestUtils.assertEquals(lRef,l);FieldMatrix<Fraction> u=lu.getU();TestUtils.assertEquals(uRef,u);FieldMatrix<Fraction> p=lu.getP();TestUtils.assertEquals(pRef,p);int[]pivot=lu.getPivot();for (int i=0;i < pivotRef.length;++i){Assert.assertEquals(pivotRef[i],pivot[i]);}Assert.assertTrue(l == lu.getL());Assert.assertTrue(u == lu.getU());Assert.assertTrue(p == lu.getP());}"
"org.apache.commons.math3.geometry.euclidean.twod.SegmentTest.testDistance",0,"@Test public void testDistance(){Vector2D start=new Vector2D(2,2);Vector2D end=new Vector2D(-2,-2);Segment segment=new Segment(start,end,new Line(start,end));Assert.assertEquals(FastMath.sqrt(2),segment.distance(new Vector2D(1,-1)),1.0e-10);Assert.assertEquals(FastMath.sin(Math.PI / 4.0),segment.distance(new Vector2D(0,-1)),1.0e-10);Assert.assertEquals(FastMath.sqrt(8),segment.distance(new Vector2D(0,4)),1.0e-10);Assert.assertEquals(FastMath.sqrt(8),segment.distance(new Vector2D(0,-4)),1.0e-10);}"
"org.apache.commons.math3.util.PrecisionTest.testEqualsWithRelativeTolerance",0,"@Test public void testEqualsWithRelativeTolerance(){Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d,0d,0d));Assert.assertTrue(Precision.equalsWithRelativeTolerance(0d,1 / Double.NEGATIVE_INFINITY,0d));final double eps=1e-14;Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654988,eps));Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654987,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654948,eps));Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.987654687654968,1.987654687654949,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(Precision.SAFE_MIN,0.0,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(1.0000000000001e-300,1e-300,eps));Assert.assertTrue(Precision.equalsWithRelativeTolerance(1.00000000000001e-300,1e-300,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY,1.23,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY,1.23,eps));Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,eps));Assert.assertTrue(Precision.equalsWithRelativeTolerance(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN,1.23,eps));Assert.assertFalse(Precision.equalsWithRelativeTolerance(Double.NaN,Double.NaN,eps));}"
"org.apache.commons.math3.util.PrecisionTest.testEqualsIncludingNaN",0,"@Test public void testEqualsIncludingNaN(){double[]testArray={Double.NaN,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1d,0d};for (int i=0;i < testArray.length;i++){for (int j=0;j < testArray.length;j++){if (i == j){Assert.assertTrue(Precision.equalsIncludingNaN(testArray[i],testArray[j]));Assert.assertTrue(Precision.equalsIncludingNaN(testArray[j],testArray[i]));}else {Assert.assertTrue(!Precision.equalsIncludingNaN(testArray[i],testArray[j]));Assert.assertTrue(!Precision.equalsIncludingNaN(testArray[j],testArray[i]));}}}}"
"org.apache.commons.math3.util.PrecisionTest.testEqualsWithAllowedDelta",0,"@Test public void testEqualsWithAllowedDelta(){Assert.assertTrue(Precision.equals(153.0000,153.0000,.0625));Assert.assertTrue(Precision.equals(153.0000,153.0625,.0625));Assert.assertTrue(Precision.equals(152.9375,153.0000,.0625));Assert.assertFalse(Precision.equals(153.0000,153.0625,.0624));Assert.assertFalse(Precision.equals(152.9374,153.0000,.0625));Assert.assertFalse(Precision.equals(Double.NaN,Double.NaN,1.0));Assert.assertTrue(Precision.equals(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,1.0));Assert.assertTrue(Precision.equals(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,1.0));Assert.assertFalse(Precision.equals(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,1.0));}"
"org.apache.commons.math3.util.PrecisionTest.testMath475",0,"@Test public void testMath475(){final double a=1.7976931348623182E16;final double b=FastMath.nextUp(a);double diff=FastMath.abs(a - b);Assert.assertTrue(Precision.equals(a,b,0.5 * diff));final double c=FastMath.nextUp(b);diff=FastMath.abs(a - c);Assert.assertTrue(Precision.equals(a,c,diff));Assert.assertFalse(Precision.equals(a,c,(1 - 1e-16)* diff));}"
"org.apache.commons.math3.util.PrecisionTest.testEqualsIncludingNaNWithAllowedDelta",0,"@Test public void testEqualsIncludingNaNWithAllowedDelta(){Assert.assertTrue(Precision.equalsIncludingNaN(153.0000,153.0000,.0625));Assert.assertTrue(Precision.equalsIncludingNaN(153.0000,153.0625,.0625));Assert.assertTrue(Precision.equalsIncludingNaN(152.9375,153.0000,.0625));Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN,Double.NaN,1.0));Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,1.0));Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,1.0));Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,1.0));Assert.assertFalse(Precision.equalsIncludingNaN(153.0000,153.0625,.0624));Assert.assertFalse(Precision.equalsIncludingNaN(152.9374,153.0000,.0625));}"
"org.apache.commons.math3.util.PrecisionTest.testFloatEqualsWithAllowedUlps",0,"@Test public void testFloatEqualsWithAllowedUlps(){Assert.assertTrue(""+0.0f == -0.0f"",Precision.equals(0.0f,-0.0f));Assert.assertTrue(""+0.0f == -0.0f (1 ulp)"",Precision.equals(0.0f,-0.0f,1));float oneFloat=1.0f;Assert.assertTrue(""1.0f == 1.0f + 1 ulp"",Precision.equals(oneFloat,Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat))));Assert.assertTrue(""1.0f == 1.0f + 1 ulp (1 ulp)"",Precision.equals(oneFloat,Float.intBitsToFloat(1 + Float.floatToIntBits(oneFloat)),1));Assert.assertFalse(""1.0f != 1.0f + 2 ulp (1 ulp)"",Precision.equals(oneFloat,Float.intBitsToFloat(2 + Float.floatToIntBits(oneFloat)),1));Assert.assertTrue(Precision.equals(153.0f,153.0f,1));Assert.assertTrue(Precision.equals(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,1));Assert.assertTrue(Precision.equals(Double.MAX_VALUE,Float.POSITIVE_INFINITY,1));Assert.assertTrue(Precision.equals(Float.NEGATIVE_INFINITY,Float.NEGATIVE_INFINITY,1));Assert.assertTrue(Precision.equals(-Float.MAX_VALUE,Float.NEGATIVE_INFINITY,1));Assert.assertFalse(Precision.equals(Float.NaN,Float.NaN,1));Assert.assertFalse(Precision.equals(Float.NaN,Float.NaN,0));Assert.assertFalse(Precision.equals(Float.NaN,0,0));Assert.assertFalse(Precision.equals(Float.NaN,Float.POSITIVE_INFINITY,0));Assert.assertFalse(Precision.equals(Float.NaN,Float.NEGATIVE_INFINITY,0));Assert.assertFalse(Precision.equals(Float.NEGATIVE_INFINITY,Float.POSITIVE_INFINITY,100000));}"
"org.apache.commons.math3.util.PrecisionTest.testEqualsWithAllowedUlps",0,"@Test public void testEqualsWithAllowedUlps(){Assert.assertTrue(Precision.equals(0.0,-0.0,1));Assert.assertTrue(Precision.equals(1.0,1 + FastMath.ulp(1d),1));Assert.assertFalse(Precision.equals(1.0,1 + 2 * FastMath.ulp(1d),1));final double nUp1=FastMath.nextAfter(1d,Double.POSITIVE_INFINITY);final double nnUp1=FastMath.nextAfter(nUp1,Double.POSITIVE_INFINITY);Assert.assertTrue(Precision.equals(1.0,nUp1,1));Assert.assertTrue(Precision.equals(nUp1,nnUp1,1));Assert.assertFalse(Precision.equals(1.0,nnUp1,1));Assert.assertTrue(Precision.equals(0.0,FastMath.ulp(0d),1));Assert.assertTrue(Precision.equals(0.0,-FastMath.ulp(0d),1));Assert.assertTrue(Precision.equals(153.0,153.0,1));Assert.assertTrue(Precision.equals(153.0,153.00000000000003,1));Assert.assertFalse(Precision.equals(153.0,153.00000000000006,1));Assert.assertTrue(Precision.equals(153.0,152.99999999999997,1));Assert.assertFalse(Precision.equals(153,152.99999999999994,1));Assert.assertTrue(Precision.equals(-128.0,-127.99999999999999,1));Assert.assertFalse(Precision.equals(-128.0,-127.99999999999997,1));Assert.assertTrue(Precision.equals(-128.0,-128.00000000000003,1));Assert.assertFalse(Precision.equals(-128.0,-128.00000000000006,1));Assert.assertTrue(Precision.equals(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,1));Assert.assertTrue(Precision.equals(Double.MAX_VALUE,Double.POSITIVE_INFINITY,1));Assert.assertTrue(Precision.equals(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,1));Assert.assertTrue(Precision.equals(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY,1));Assert.assertFalse(Precision.equals(Double.NaN,Double.NaN,1));Assert.assertFalse(Precision.equals(Double.NaN,Double.NaN,0));Assert.assertFalse(Precision.equals(Double.NaN,0,0));Assert.assertFalse(Precision.equals(Double.NaN,Double.POSITIVE_INFINITY,0));Assert.assertFalse(Precision.equals(Double.NaN,Double.NEGATIVE_INFINITY,0));Assert.assertFalse(Precision.equals(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,100000));}"
"org.apache.commons.math3.util.PrecisionTest.testEqualsIncludingNaNWithAllowedUlps",0,"@Test public void testEqualsIncludingNaNWithAllowedUlps(){Assert.assertTrue(Precision.equalsIncludingNaN(0.0,-0.0,1));Assert.assertTrue(Precision.equalsIncludingNaN(1.0,1 + FastMath.ulp(1d),1));Assert.assertFalse(Precision.equalsIncludingNaN(1.0,1 + 2 * FastMath.ulp(1d),1));final double nUp1=FastMath.nextAfter(1d,Double.POSITIVE_INFINITY);final double nnUp1=FastMath.nextAfter(nUp1,Double.POSITIVE_INFINITY);Assert.assertTrue(Precision.equalsIncludingNaN(1.0,nUp1,1));Assert.assertTrue(Precision.equalsIncludingNaN(nUp1,nnUp1,1));Assert.assertFalse(Precision.equalsIncludingNaN(1.0,nnUp1,1));Assert.assertTrue(Precision.equalsIncludingNaN(0.0,FastMath.ulp(0d),1));Assert.assertTrue(Precision.equalsIncludingNaN(0.0,-FastMath.ulp(0d),1));Assert.assertTrue(Precision.equalsIncludingNaN(153.0,153.0,1));Assert.assertTrue(Precision.equalsIncludingNaN(153.0,153.00000000000003,1));Assert.assertFalse(Precision.equalsIncludingNaN(153.0,153.00000000000006,1));Assert.assertTrue(Precision.equalsIncludingNaN(153.0,152.99999999999997,1));Assert.assertFalse(Precision.equalsIncludingNaN(153,152.99999999999994,1));Assert.assertTrue(Precision.equalsIncludingNaN(-128.0,-127.99999999999999,1));Assert.assertFalse(Precision.equalsIncludingNaN(-128.0,-127.99999999999997,1));Assert.assertTrue(Precision.equalsIncludingNaN(-128.0,-128.00000000000003,1));Assert.assertFalse(Precision.equalsIncludingNaN(-128.0,-128.00000000000006,1));Assert.assertTrue(Precision.equalsIncludingNaN(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,1));Assert.assertTrue(Precision.equalsIncludingNaN(Double.MAX_VALUE,Double.POSITIVE_INFINITY,1));Assert.assertTrue(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY,Double.NEGATIVE_INFINITY,1));Assert.assertTrue(Precision.equalsIncludingNaN(-Double.MAX_VALUE,Double.NEGATIVE_INFINITY,1));Assert.assertTrue(Precision.equalsIncludingNaN(Double.NaN,Double.NaN,1));Assert.assertFalse(Precision.equalsIncludingNaN(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,100000));}"
"org.apache.commons.math3.util.PrecisionTest.testCompareToEpsilon",0,"@Test public void testCompareToEpsilon(){Assert.assertEquals(0,Precision.compareTo(152.33,152.32,.011));Assert.assertTrue(Precision.compareTo(152.308,152.32,.011)< 0);Assert.assertTrue(Precision.compareTo(152.33,152.318,.011)> 0);Assert.assertEquals(0,Precision.compareTo(Double.MIN_VALUE,+0.0,Double.MIN_VALUE));Assert.assertEquals(0,Precision.compareTo(Double.MIN_VALUE,-0.0,Double.MIN_VALUE));}"
"org.apache.commons.math3.util.PrecisionTest.testCompareToMaxUlps",0,"@Test public void testCompareToMaxUlps(){double a=152.32;double delta=FastMath.ulp(a);for (int i=0;i <= 10;++i){if (i <= 5){Assert.assertEquals(0,Precision.compareTo(a,a + i * delta,5));Assert.assertEquals(0,Precision.compareTo(a,a - i * delta,5));}else {Assert.assertEquals(-1,Precision.compareTo(a,a + i * delta,5));Assert.assertEquals(+1,Precision.compareTo(a,a - i * delta,5));}}Assert.assertEquals(0,Precision.compareTo(-0.0,0.0,0));Assert.assertEquals(-1,Precision.compareTo(-Double.MIN_VALUE,-0.0,0));Assert.assertEquals(0,Precision.compareTo(-Double.MIN_VALUE,-0.0,1));Assert.assertEquals(-1,Precision.compareTo(-Double.MIN_VALUE,+0.0,0));Assert.assertEquals(0,Precision.compareTo(-Double.MIN_VALUE,+0.0,1));Assert.assertEquals(+1,Precision.compareTo(Double.MIN_VALUE,-0.0,0));Assert.assertEquals(0,Precision.compareTo(Double.MIN_VALUE,-0.0,1));Assert.assertEquals(+1,Precision.compareTo(Double.MIN_VALUE,+0.0,0));Assert.assertEquals(0,Precision.compareTo(Double.MIN_VALUE,+0.0,1));Assert.assertEquals(-1,Precision.compareTo(-Double.MIN_VALUE,Double.MIN_VALUE,0));Assert.assertEquals(-1,Precision.compareTo(-Double.MIN_VALUE,Double.MIN_VALUE,1));Assert.assertEquals(0,Precision.compareTo(-Double.MIN_VALUE,Double.MIN_VALUE,2));Assert.assertEquals(0,Precision.compareTo(Double.MAX_VALUE,Double.POSITIVE_INFINITY,1));Assert.assertEquals(-1,Precision.compareTo(Double.MAX_VALUE,Double.POSITIVE_INFINITY,0));Assert.assertEquals(+1,Precision.compareTo(Double.MAX_VALUE,Double.NaN,Integer.MAX_VALUE));Assert.assertEquals(+1,Precision.compareTo(Double.NaN,Double.MAX_VALUE,Integer.MAX_VALUE));}"
"org.apache.commons.math3.util.PrecisionTest.testRoundDouble",0,"@Test public void testRoundDouble(){double x=1.234567890;Assert.assertEquals(1.23,Precision.round(x,2),0.0);Assert.assertEquals(1.235,Precision.round(x,3),0.0);Assert.assertEquals(1.2346,Precision.round(x,4),0.0);Assert.assertEquals(39.25,Precision.round(39.245,2),0.0);Assert.assertEquals(39.24,Precision.round(39.245,2,BigDecimal.ROUND_DOWN),0.0);double xx=39.0;xx=xx + 245d / 1000d;Assert.assertEquals(39.25,Precision.round(xx,2),0.0);Assert.assertEquals(30.1d,Precision.round(30.095d,2),0.0d);Assert.assertEquals(30.1d,Precision.round(30.095d,1),0.0d);Assert.assertEquals(33.1d,Precision.round(33.095d,1),0.0d);Assert.assertEquals(33.1d,Precision.round(33.095d,2),0.0d);Assert.assertEquals(50.09d,Precision.round(50.085d,2),0.0d);Assert.assertEquals(50.19d,Precision.round(50.185d,2),0.0d);Assert.assertEquals(50.01d,Precision.round(50.005d,2),0.0d);Assert.assertEquals(30.01d,Precision.round(30.005d,2),0.0d);Assert.assertEquals(30.65d,Precision.round(30.645d,2),0.0d);Assert.assertEquals(1.24,Precision.round(x,2,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(1.235,Precision.round(x,3,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(1.2346,Precision.round(x,4,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(-1.23,Precision.round(-x,2,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(-1.234,Precision.round(-x,3,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(-1.2345,Precision.round(-x,4,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(1.23,Precision.round(x,2,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(1.234,Precision.round(x,3,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(1.2345,Precision.round(x,4,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(-1.23,Precision.round(-x,2,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(-1.234,Precision.round(-x,3,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(-1.2345,Precision.round(-x,4,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(1.23,Precision.round(x,2,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(1.234,Precision.round(x,3,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(1.2345,Precision.round(x,4,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(-1.24,Precision.round(-x,2,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(-1.235,Precision.round(-x,3,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(-1.2346,Precision.round(-x,4,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(1.23,Precision.round(x,2,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.235,Precision.round(x,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.2346,Precision.round(x,4,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.23,Precision.round(-x,2,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.235,Precision.round(-x,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.2346,Precision.round(-x,4,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.234,Precision.round(1.2345,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.234,Precision.round(-1.2345,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.23,Precision.round(x,2,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.235,Precision.round(x,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.2346,Precision.round(x,4,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.23,Precision.round(-x,2,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.235,Precision.round(-x,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.2346,Precision.round(-x,4,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.234,Precision.round(1.2345,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.234,Precision.round(-1.2345,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.236,Precision.round(1.2355,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.236,Precision.round(-1.2355,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.23,Precision.round(x,2,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(1.235,Precision.round(x,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(1.2346,Precision.round(x,4,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.23,Precision.round(-x,2,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.235,Precision.round(-x,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.2346,Precision.round(-x,4,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(1.235,Precision.round(1.2345,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.235,Precision.round(-1.2345,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.23,Precision.round(-1.23,2,BigDecimal.ROUND_UNNECESSARY),0.0);Assert.assertEquals(1.23,Precision.round(1.23,2,BigDecimal.ROUND_UNNECESSARY),0.0);try {Precision.round(1.234,2,BigDecimal.ROUND_UNNECESSARY);Assert.fail();}catch(ArithmeticException ex){}Assert.assertEquals(1.24,Precision.round(x,2,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(1.235,Precision.round(x,3,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(1.2346,Precision.round(x,4,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(-1.24,Precision.round(-x,2,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(-1.235,Precision.round(-x,3,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(-1.2346,Precision.round(-x,4,BigDecimal.ROUND_UP),0.0);try {Precision.round(1.234,2,1923);Assert.fail();}catch(IllegalArgumentException ex){}Assert.assertEquals(39.25,Precision.round(39.245,2,BigDecimal.ROUND_HALF_UP),0.0);TestUtils.assertEquals(Double.NaN,Precision.round(Double.NaN,2),0.0);Assert.assertEquals(0.0,Precision.round(0.0,2),0.0);Assert.assertEquals(Double.POSITIVE_INFINITY,Precision.round(Double.POSITIVE_INFINITY,2),0.0);Assert.assertEquals(Double.NEGATIVE_INFINITY,Precision.round(Double.NEGATIVE_INFINITY,2),0.0);}"
"org.apache.commons.math3.util.PrecisionTest.testRoundFloat",0,"@Test public void testRoundFloat(){float x=1.234567890f;Assert.assertEquals(1.23f,Precision.round(x,2),0.0);Assert.assertEquals(1.235f,Precision.round(x,3),0.0);Assert.assertEquals(1.2346f,Precision.round(x,4),0.0);Assert.assertEquals(30.1f,Precision.round(30.095f,2),0.0f);Assert.assertEquals(30.1f,Precision.round(30.095f,1),0.0f);Assert.assertEquals(50.09f,Precision.round(50.085f,2),0.0f);Assert.assertEquals(50.19f,Precision.round(50.185f,2),0.0f);Assert.assertEquals(50.01f,Precision.round(50.005f,2),0.0f);Assert.assertEquals(30.01f,Precision.round(30.005f,2),0.0f);Assert.assertEquals(30.65f,Precision.round(30.645f,2),0.0f);Assert.assertEquals(1.24f,Precision.round(x,2,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(-1.234f,Precision.round(-x,3,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(-1.2345f,Precision.round(-x,4,BigDecimal.ROUND_CEILING),0.0);Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(1.234f,Precision.round(x,3,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(1.2345f,Precision.round(x,4,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(-1.234f,Precision.round(-x,3,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(-1.2345f,Precision.round(-x,4,BigDecimal.ROUND_DOWN),0.0);Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(1.234f,Precision.round(x,3,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(1.2345f,Precision.round(x,4,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(-1.24f,Precision.round(-x,2,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_FLOOR),0.0);Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.234f,Precision.round(1.2345f,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(-1.234f,Precision.round(-1.2345f,3,BigDecimal.ROUND_HALF_DOWN),0.0);Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.234f,Precision.round(1.2345f,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.234f,Precision.round(-1.2345f,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.236f,Precision.round(1.2355f,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(-1.236f,Precision.round(-1.2355f,3,BigDecimal.ROUND_HALF_EVEN),0.0);Assert.assertEquals(1.23f,Precision.round(x,2,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.23f,Precision.round(-x,2,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(1.235f,Precision.round(1.2345f,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.235f,Precision.round(-1.2345f,3,BigDecimal.ROUND_HALF_UP),0.0);Assert.assertEquals(-1.23f,Precision.round(-1.23f,2,BigDecimal.ROUND_UNNECESSARY),0.0);Assert.assertEquals(1.23f,Precision.round(1.23f,2,BigDecimal.ROUND_UNNECESSARY),0.0);try {Precision.round(1.234f,2,BigDecimal.ROUND_UNNECESSARY);Assert.fail();}catch(MathArithmeticException ex){}Assert.assertEquals(1.24f,Precision.round(x,2,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(1.235f,Precision.round(x,3,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(1.2346f,Precision.round(x,4,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(-1.24f,Precision.round(-x,2,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(-1.235f,Precision.round(-x,3,BigDecimal.ROUND_UP),0.0);Assert.assertEquals(-1.2346f,Precision.round(-x,4,BigDecimal.ROUND_UP),0.0);try {Precision.round(1.234f,2,1923);Assert.fail();}catch(MathIllegalArgumentException ex){}TestUtils.assertEquals(Float.NaN,Precision.round(Float.NaN,2),0.0f);Assert.assertEquals(0.0f,Precision.round(0.0f,2),0.0f);Assert.assertEquals(Float.POSITIVE_INFINITY,Precision.round(Float.POSITIVE_INFINITY,2),0.0f);Assert.assertEquals(Float.NEGATIVE_INFINITY,Precision.round(Float.NEGATIVE_INFINITY,2),0.0f);}"
"org.apache.commons.math3.util.PrecisionTest.testIssue721",0,"@Test public void testIssue721(){Assert.assertEquals(-53,FastMath.getExponent(Precision.EPSILON));Assert.assertEquals(-1022,FastMath.getExponent(Precision.SAFE_MIN));}"
"org.apache.commons.math3.util.PrecisionTest.testRepresentableDelta",0,"@Test public void testRepresentableDelta(){int nonRepresentableCount=0;final double x=100;final int numTrials=10000;for (int i=0;i < numTrials;i++){final double originalDelta=Math.random();final double delta=Precision.representableDelta(x,originalDelta);if (delta != originalDelta){++nonRepresentableCount;}}Assert.assertTrue(nonRepresentableCount / (double)numTrials > 0.9);}"
"org.apache.commons.math3.util.PrecisionTest.testMath843",0,"@Test public void testMath843(){final double afterEpsilon=FastMath.nextAfter(Precision.EPSILON,Double.POSITIVE_INFINITY);Assert.assertTrue(1 + Precision.EPSILON == 1);Assert.assertFalse(1 + afterEpsilon == 1);}"
"org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest.testInterpolateLinearDegenerateTwoSegment",0,"@Test public void testInterpolateLinearDegenerateTwoSegment(){double x[]={0.0,0.5,1.0};double y[]={0.0,0.5,1.0};UnivariateInterpolator i=new SplineInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);verifyConsistency((PolynomialSplineFunction)f,x);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],1d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);Assert.assertEquals(0.0,f.value(0.0),interpolationTolerance);Assert.assertEquals(0.4,f.value(0.4),interpolationTolerance);Assert.assertEquals(1.0,f.value(1.0),interpolationTolerance);}"
"org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest.testInterpolateLinearDegenerateThreeSegment",0,"@Test public void testInterpolateLinearDegenerateThreeSegment(){double x[]={0.0,0.5,1.0,1.5};double y[]={0.0,0.5,1.0,1.5};UnivariateInterpolator i=new SplineInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],1d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);target=new double[]{y[2],1d};TestUtils.assertEquals(polynomials[2].getCoefficients(),target,coefficientTolerance);Assert.assertEquals(0,f.value(0),interpolationTolerance);Assert.assertEquals(1.4,f.value(1.4),interpolationTolerance);Assert.assertEquals(1.5,f.value(1.5),interpolationTolerance);}"
"org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest.testInterpolateLinear",0,"@Test public void testInterpolateLinear(){double x[]={0.0,0.5,1.0};double y[]={0.0,0.5,0.0};UnivariateInterpolator i=new SplineInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);verifyConsistency((PolynomialSplineFunction)f,x);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1.5d,0d,-2d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],0d,-3d,2d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);}"
"org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest.testInterpolateSin",0,"@Test public void testInterpolateSin(){double x[]={0.0,FastMath.PI / 6d,FastMath.PI / 2d,5d * FastMath.PI / 6d,FastMath.PI,7d * FastMath.PI / 6d,3d * FastMath.PI / 2d,11d * FastMath.PI / 6d,2.d * FastMath.PI};double y[]={0d,0.5d,1d,0.5d,0d,-0.5d,-1d,-0.5d,0d};UnivariateInterpolator i=new SplineInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);verifyConsistency((PolynomialSplineFunction)f,x);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1.002676d,0d,-0.17415829d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],8.594367e-01,-2.735672e-01,-0.08707914};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);target=new double[]{y[2],1.471804e-17,-5.471344e-01,0.08707914};TestUtils.assertEquals(polynomials[2].getCoefficients(),target,coefficientTolerance);target=new double[]{y[3],-8.594367e-01,-2.735672e-01,0.17415829};TestUtils.assertEquals(polynomials[3].getCoefficients(),target,coefficientTolerance);target=new double[]{y[4],-1.002676,6.548562e-17,0.17415829};TestUtils.assertEquals(polynomials[4].getCoefficients(),target,coefficientTolerance);target=new double[]{y[5],-8.594367e-01,2.735672e-01,0.08707914};TestUtils.assertEquals(polynomials[5].getCoefficients(),target,coefficientTolerance);target=new double[]{y[6],3.466465e-16,5.471344e-01,-0.08707914};TestUtils.assertEquals(polynomials[6].getCoefficients(),target,coefficientTolerance);target=new double[]{y[7],8.594367e-01,2.735672e-01,-0.17415829};TestUtils.assertEquals(polynomials[7].getCoefficients(),target,coefficientTolerance);Assert.assertEquals(FastMath.sqrt(2d)/ 2d,f.value(FastMath.PI / 4d),interpolationTolerance);Assert.assertEquals(FastMath.sqrt(2d)/ 2d,f.value(3d * FastMath.PI / 4d),interpolationTolerance);}"
"org.apache.commons.math3.analysis.interpolation.SplineInterpolatorTest.testIllegalArguments",0,"@Test public void testIllegalArguments(){UnivariateInterpolator i=new SplineInterpolator();try {double xval[]={0.0,1.0};double yval[]={0.0,1.0,2.0};i.interpolate(xval,yval);Assert.fail(""Failed to detect data set array with different sizes."");}catch(DimensionMismatchException iae){}try {double xval[]={0.0,1.0,0.5};double yval[]={0.0,1.0,2.0};i.interpolate(xval,yval);Assert.fail(""Failed to detect unsorted arguments."");}catch(NonMonotonicSequenceException iae){}try {double xval[]={0.0,1.0};double yval[]={0.0,1.0};i.interpolate(xval,yval);Assert.fail(""Failed to detect unsorted arguments."");}catch(NumberIsTooSmallException iae){}}"
"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest.testInsufficientOrder3",0,"@Test(expected=NumberIsTooSmallException.class)public void testInsufficientOrder3(){new BracketingNthOrderBrentSolverDFP(relativeAccuracy,absoluteAccuracy,functionValueAccuracy,1);}"
"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest.testConstructorOK",0,"@Test public void testConstructorOK(){BracketingNthOrderBrentSolverDFP solver=new BracketingNthOrderBrentSolverDFP(relativeAccuracy,absoluteAccuracy,functionValueAccuracy,2);Assert.assertEquals(2,solver.getMaximalOrder());}"
"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest.testConvergenceOnFunctionAccuracy",0,"@Test public void testConvergenceOnFunctionAccuracy(){BracketingNthOrderBrentSolverDFP solver=new BracketingNthOrderBrentSolverDFP(relativeAccuracy,absoluteAccuracy,field.newDfp(1.0e-20),20);UnivariateDfpFunction f=new UnivariateDfpFunction(){public Dfp value(Dfp x){Dfp one=field.getOne();Dfp oneHalf=one.divide(2);Dfp xMo=x.subtract(one);Dfp xMh=x.subtract(oneHalf);Dfp xPh=x.add(oneHalf);Dfp xPo=x.add(one);return xMo.multiply(xMh).multiply(x).multiply(xPh).multiply(xPo);}};Dfp result=solver.solve(20,f,field.newDfp(0.2),field.newDfp(0.9),field.newDfp(0.4),AllowedSolution.BELOW_SIDE);Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy()));Assert.assertTrue(f.value(result).negativeOrNull());Assert.assertTrue(result.subtract(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).positiveOrNull());result=solver.solve(20,f,field.newDfp(-0.9),field.newDfp(-0.2),field.newDfp(-0.4),AllowedSolution.ABOVE_SIDE);Assert.assertTrue(f.value(result).abs().lessThan(solver.getFunctionValueAccuracy()));Assert.assertTrue(f.value(result).positiveOrNull());Assert.assertTrue(result.add(field.newDfp(0.5)).subtract(solver.getAbsoluteAccuracy()).negativeOrNull());}"
"org.apache.commons.math3.dfp.BracketingNthOrderBrentSolverDFPTest.testNeta",0,"@Test public void testNeta(){for(AllowedSolution allowed : AllowedSolution.values()){check(new UnivariateDfpFunction(){public Dfp value(Dfp x){return DfpMath.sin(x).subtract(x.divide(2));}},200,-2.0,2.0,allowed);check(new UnivariateDfpFunction(){public Dfp value(Dfp x){return DfpMath.pow(x,5).add(x).subtract(field.newDfp(10000));}},200,-5.0,10.0,allowed);check(new UnivariateDfpFunction(){public Dfp value(Dfp x){return x.sqrt().subtract(field.getOne().divide(x)).subtract(field.newDfp(3));}},200,0.001,10.0,allowed);check(new UnivariateDfpFunction(){public Dfp value(Dfp x){return DfpMath.exp(x).add(x).subtract(field.newDfp(20));}},200,-5.0,5.0,allowed);check(new UnivariateDfpFunction(){public Dfp value(Dfp x){return DfpMath.log(x).add(x.sqrt()).subtract(field.newDfp(5));}},200,0.001,10.0,allowed);check(new UnivariateDfpFunction(){public Dfp value(Dfp x){return x.subtract(field.getOne()).multiply(x).multiply(x).subtract(field.getOne());}},200,-0.5,1.5,allowed);}}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testEndPoints",0,"@Test public void testEndPoints()throws MathIllegalArgumentException {Vector3D p1=new Vector3D(-1,-7,2);Vector3D p2=new Vector3D(7,-1,0);Segment segment=new Segment(p1,p2,new Line(p1,p2));SubLine sub=new SubLine(segment);List<Segment> segments=sub.getSegments();Assert.assertEquals(1,segments.size());Assert.assertEquals(0.0,new Vector3D(-1,-7,2).distance(segments.get(0).getStart()),1.0e-10);Assert.assertEquals(0.0,new Vector3D(7,-1,0).distance(segments.get(0).getEnd()),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testNoEndPoints",0,"@Test public void testNoEndPoints()throws MathIllegalArgumentException {SubLine wholeLine=new Line(new Vector3D(-1,7,2),new Vector3D(7,1,0)).wholeLine();List<Segment> segments=wholeLine.getSegments();Assert.assertEquals(1,segments.size());Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX())&& segments.get(0).getStart().getX()< 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY())&& segments.get(0).getStart().getY()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ())&& segments.get(0).getStart().getZ()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX())&& segments.get(0).getEnd().getX()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY())&& segments.get(0).getEnd().getY()< 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ())&& segments.get(0).getEnd().getZ()< 0);}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testNoSegments",0,"@Test public void testNoSegments()throws MathIllegalArgumentException {SubLine empty=new SubLine(new Line(new Vector3D(-1,-7,2),new Vector3D(7,-1,0)),(IntervalsSet)new RegionFactory<Euclidean1D>().getComplement(new IntervalsSet()));List<Segment> segments=empty.getSegments();Assert.assertEquals(0,segments.size());}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testSeveralSegments",0,"@Test public void testSeveralSegments()throws MathIllegalArgumentException {SubLine twoSubs=new SubLine(new Line(new Vector3D(-1,-7,2),new Vector3D(7,-1,0)),(IntervalsSet)new RegionFactory<Euclidean1D>().union(new IntervalsSet(1,2),new IntervalsSet(3,4)));List<Segment> segments=twoSubs.getSegments();Assert.assertEquals(2,segments.size());}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testHalfInfiniteNeg",0,"@Test public void testHalfInfiniteNeg()throws MathIllegalArgumentException {SubLine empty=new SubLine(new Line(new Vector3D(-1,-7,2),new Vector3D(7,-1,-2)),new IntervalsSet(Double.NEGATIVE_INFINITY,0.0));List<Segment> segments=empty.getSegments();Assert.assertEquals(1,segments.size());Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getX())&& segments.get(0).getStart().getX()< 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getY())&& segments.get(0).getStart().getY()< 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getStart().getZ())&& segments.get(0).getStart().getZ()> 0);Assert.assertEquals(0.0,new Vector3D(3,-4,0).distance(segments.get(0).getEnd()),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testHalfInfinitePos",0,"@Test public void testHalfInfinitePos()throws MathIllegalArgumentException {SubLine empty=new SubLine(new Line(new Vector3D(-1,-7,2),new Vector3D(7,-1,-2)),new IntervalsSet(0.0,Double.POSITIVE_INFINITY));List<Segment> segments=empty.getSegments();Assert.assertEquals(1,segments.size());Assert.assertEquals(0.0,new Vector3D(3,-4,0).distance(segments.get(0).getStart()),1.0e-10);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getX())&& segments.get(0).getEnd().getX()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getY())&& segments.get(0).getEnd().getY()> 0);Assert.assertTrue(Double.isInfinite(segments.get(0).getEnd().getZ())&& segments.get(0).getEnd().getZ()< 0);}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionInsideInside",0,"@Test public void testIntersectionInsideInside()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(3,1,1));SubLine sub2=new SubLine(new Vector3D(2,0,0),new Vector3D(2,2,2));Assert.assertEquals(0.0,new Vector3D(2,1,1).distance(sub1.intersection(sub2,true)),1.0e-12);Assert.assertEquals(0.0,new Vector3D(2,1,1).distance(sub1.intersection(sub2,false)),1.0e-12);}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionInsideBoundary",0,"@Test public void testIntersectionInsideBoundary()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(3,1,1));SubLine sub2=new SubLine(new Vector3D(2,0,0),new Vector3D(2,1,1));Assert.assertEquals(0.0,new Vector3D(2,1,1).distance(sub1.intersection(sub2,true)),1.0e-12);Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionInsideOutside",0,"@Test public void testIntersectionInsideOutside()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(3,1,1));SubLine sub2=new SubLine(new Vector3D(2,0,0),new Vector3D(2,0.5,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionBoundaryBoundary",0,"@Test public void testIntersectionBoundaryBoundary()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(2,1,1));SubLine sub2=new SubLine(new Vector3D(2,0,0),new Vector3D(2,1,1));Assert.assertEquals(0.0,new Vector3D(2,1,1).distance(sub1.intersection(sub2,true)),1.0e-12);Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionBoundaryOutside",0,"@Test public void testIntersectionBoundaryOutside()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(2,1,1));SubLine sub2=new SubLine(new Vector3D(2,0,0),new Vector3D(2,0.5,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionOutsideOutside",0,"@Test public void testIntersectionOutsideOutside()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(1.5,1,1));SubLine sub2=new SubLine(new Vector3D(2,0,0),new Vector3D(2,0.5,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.geometry.euclidean.threed.SubLineTest.testIntersectionNotIntersecting",0,"@Test public void testIntersectionNotIntersecting()throws MathIllegalArgumentException {SubLine sub1=new SubLine(new Vector3D(1,1,1),new Vector3D(1.5,1,1));SubLine sub2=new SubLine(new Vector3D(2,3,0),new Vector3D(2,3,0.5));Assert.assertNull(sub1.intersection(sub2,true));Assert.assertNull(sub1.intersection(sub2,false));}"
"org.apache.commons.math3.analysis.integration.gauss.BaseRuleFactoryTest.testConcurrentCreation",0,"/** * Tests that a given rule rule will be computed and added once to the cache whatever the number of times this rule is called concurrently.*/@Test public void testConcurrentCreation()throws InterruptedException,ExecutionException {final int numTasks=20;final ThreadPoolExecutor exec=new ThreadPoolExecutor(3,numTasks,1,TimeUnit.SECONDS,new ArrayBlockingQueue<Runnable>(2));final List<Future<Pair<double[],double[]>>> results=new ArrayList<Future<Pair<double[],double[]>>>();for (int i=0;i < numTasks;i++){results.add(exec.submit(new RuleBuilder()));}for(Future<Pair<double[],double[]>> f : results){f.get();}final int n=RuleBuilder.getNumberOfCalls();Assert.assertEquals(""Rule computation was called "" + n + "" times"",1,n);}"
"org.apache.commons.math3.fraction.FractionFieldTest.testZero",0,"@Test public void testZero(){Assert.assertEquals(Fraction.ZERO,FractionField.getInstance().getZero());}"
"org.apache.commons.math3.fraction.FractionFieldTest.testOne",0,"@Test public void testOne(){Assert.assertEquals(Fraction.ONE,FractionField.getInstance().getOne());}"
"org.apache.commons.math3.fraction.FractionFieldTest.testSerial",0,"@Test public void testSerial(){FractionField field=FractionField.getInstance();Assert.assertTrue(field == TestUtils.serializeAndRecover(field));}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSmallDf",0,"@Test public void testSmallDf(){setDistribution(new ChiSquaredDistribution(0.1d));setTolerance(1E-4);setCumulativeTestPoints(new double[]{1.168926E-60,1.168926E-40,1.063132E-32,1.144775E-26,1.168926E-20,5.472917,2.175255,1.13438,0.5318646,0.1526342});setInverseCumulativeTestValues(getCumulativeTestPoints());setInverseCumulativeTestPoints(getCumulativeTestValues());verifyCumulativeProbabilities();verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDfAccessors",0,"@Test public void testDfAccessors(){ChiSquaredDistribution distribution=(ChiSquaredDistribution)getDistribution();Assert.assertEquals(5d,distribution.getDegreesOfFreedom(),Double.MIN_VALUE);}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensity",0,"@Test public void testDensity(){double[]x=new double[]{-0.1,1e-6,0.5,1,2,5};checkDensity(1,x,new double[]{0.00000000000,398.94208093034,0.43939128947,0.24197072452,0.10377687436,0.01464498256});checkDensity(0.1,x,new double[]{0.000000000e+00,2.486453997e+04,7.464238732e-02,3.009077718e-02,9.447299159e-03,8.827199396e-04});checkDensity(2,x,new double[]{0.00000000000,0.49999975000,0.38940039154,0.30326532986,0.18393972059,0.04104249931});checkDensity(10,x,new double[]{0.000000000e+00,1.302082682e-27,6.337896998e-05,7.897534632e-04,7.664155024e-03,6.680094289e-02});}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;ChiSquaredDistribution dist;dist=new ChiSquaredDistribution(1500);Assert.assertEquals(dist.getNumericalMean(),1500,tol);Assert.assertEquals(dist.getNumericalVariance(),3000,tol);dist=new ChiSquaredDistribution(1.12);Assert.assertEquals(dist.getNumericalMean(),1.12,tol);Assert.assertEquals(dist.getNumericalVariance(),2.24,tol);}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.ChiSquaredDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.util.FastMathStrictComparisonTest.test1",0,"@Test public void test1()throws Exception {setupMethodCall(mathMethod,fastMethod,types,valueArrays);}"
"org.apache.commons.math3.optimization.linear.SimplexTableauTest.testInitialization",0,"@Test public void testInitialization(){LinearObjectiveFunction f=createFunction();Collection<LinearConstraint> constraints=createConstraints();SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);double[][]expectedInitialTableau={{-1,0,-1,-1,2,0,0,0,-4},{0,1,-15,-10,25,0,0,0,0},{0,0,1,0,-1,1,0,0,2},{0,0,0,1,-1,0,1,0,3},{0,0,1,1,-2,0,0,1,4}};assertMatrixEquals(expectedInitialTableau,tableau.getData());}"
"org.apache.commons.math3.optimization.linear.SimplexTableauTest.testDropPhase1Objective",0,"@Test public void testDropPhase1Objective(){LinearObjectiveFunction f=createFunction();Collection<LinearConstraint> constraints=createConstraints();SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);double[][]expectedTableau={{1,-15,-10,0,0,0,0},{0,1,0,1,0,0,2},{0,0,1,0,1,0,3},{0,1,1,0,0,1,4}};tableau.dropPhase1Objective();assertMatrixEquals(expectedTableau,tableau.getData());}"
"org.apache.commons.math3.optimization.linear.SimplexTableauTest.testTableauWithNoArtificialVars",0,"@Test public void testTableauWithNoArtificialVars(){LinearObjectiveFunction f=new LinearObjectiveFunction(new double[]{15,10},0);Collection<LinearConstraint> constraints=new ArrayList<LinearConstraint>();constraints.add(new LinearConstraint(new double[]{1,0},Relationship.LEQ,2));constraints.add(new LinearConstraint(new double[]{0,1},Relationship.LEQ,3));constraints.add(new LinearConstraint(new double[]{1,1},Relationship.LEQ,4));SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);double[][]initialTableau={{1,-15,-10,25,0,0,0,0},{0,1,0,-1,1,0,0,2},{0,0,1,-1,0,1,0,3},{0,1,1,-2,0,0,1,4}};assertMatrixEquals(initialTableau,tableau.getData());}"
"org.apache.commons.math3.optimization.linear.SimplexTableauTest.testSerial",0,"@Test public void testSerial(){LinearObjectiveFunction f=createFunction();Collection<LinearConstraint> constraints=createConstraints();SimplexTableau tableau=new SimplexTableau(f,constraints,GoalType.MAXIMIZE,false,1.0e-6);Assert.assertEquals(tableau,TestUtils.serializeAndRecover(tableau));}"
"org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testMannWhitneyUSimple",0,"@Test public void testMannWhitneyUSimple(){final double x[]={19,22,16,29,24};final double y[]={20,11,17,12};Assert.assertEquals(17,testStatistic.mannWhitneyU(x,y),1e-10);Assert.assertEquals(0.08641,testStatistic.mannWhitneyUTest(x,y),1e-5);}"
"org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testMannWhitneyUInputValidation",0,"@Test public void testMannWhitneyUInputValidation(){try {testStatistic.mannWhitneyUTest(new double[]{},new double[]{1.0});Assert.fail(""x does not contain samples (exact),NoDataException expected"");}catch(NoDataException ex){}try {testStatistic.mannWhitneyUTest(new double[]{1.0},new double[]{});Assert.fail(""y does not contain samples (exact),NoDataException expected"");}catch(NoDataException ex){}try {testStatistic.mannWhitneyUTest(null,null);Assert.fail(""x and y is null (exact),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.mannWhitneyUTest(null,null);Assert.fail(""x and y is null (asymptotic),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.mannWhitneyUTest(null,new double[]{1.0});Assert.fail(""x is null (exact),NullArgumentException expected"");}catch(NullArgumentException ex){}try {testStatistic.mannWhitneyUTest(new double[]{1.0},null);Assert.fail(""y is null (exact),NullArgumentException expected"");}catch(NullArgumentException ex){}}"
"org.apache.commons.math3.stat.inference.MannWhitneyUTestTest.testBigDataSet",0,"@Test public void testBigDataSet(){double[]d1=new double[1500];double[]d2=new double[1500];for (int i=0;i < 1500;i++){d1[i]=2 * i;d2[i]=2 * i + 1;}double result=testStatistic.mannWhitneyUTest(d1,d2);Assert.assertTrue(result > 0.1);}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testConstructors",0,"@Test public void testConstructors(){float defaultExpansionFactor=2.0f;float defaultContractionCriteria=2.5f;int defaultMode=ResizableDoubleArray.MULTIPLICATIVE_MODE;ResizableDoubleArray testDa=new ResizableDoubleArray(2);Assert.assertEquals(0,testDa.getNumElements());Assert.assertEquals(2,testDa.getCapacity());Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);Assert.assertEquals(defaultContractionCriteria,testDa.getContractionCriteria(),0);Assert.assertEquals(defaultMode,testDa.getExpansionMode());try {da=new ResizableDoubleArray(-1);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray((double[])null);Assert.assertEquals(0,testDa.getNumElements());double[]initialArray=new double[]{0,1,2};testDa=new ResizableDoubleArray(initialArray);Assert.assertEquals(3,testDa.getNumElements());testDa=new ResizableDoubleArray(2,2.0f);Assert.assertEquals(0,testDa.getNumElements());Assert.assertEquals(2,testDa.getCapacity());Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);Assert.assertEquals(defaultContractionCriteria,testDa.getContractionCriteria(),0);Assert.assertEquals(defaultMode,testDa.getExpansionMode());try {da=new ResizableDoubleArray(2,0.5f);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,3.0f);Assert.assertEquals(3.0f,testDa.getExpansionFactor(),0);Assert.assertEquals(3.5f,testDa.getContractionCriteria(),0);testDa=new ResizableDoubleArray(2,2.0f,3.0f);Assert.assertEquals(0,testDa.getNumElements());Assert.assertEquals(2,testDa.getCapacity());Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);Assert.assertEquals(3.0f,testDa.getContractionCriteria(),0);Assert.assertEquals(defaultMode,testDa.getExpansionMode());try {da=new ResizableDoubleArray(2,2.0f,1.5f);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,2.0f,3.0f,ResizableDoubleArray.ADDITIVE_MODE);Assert.assertEquals(0,testDa.getNumElements());Assert.assertEquals(2,testDa.getCapacity());Assert.assertEquals(defaultExpansionFactor,testDa.getExpansionFactor(),0);Assert.assertEquals(3.0f,testDa.getContractionCriteria(),0);Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE,testDa.getExpansionMode());try {da=new ResizableDoubleArray(2,2.0f,2.5f,-1);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}testDa=new ResizableDoubleArray(2,2.0f,3.0f,ResizableDoubleArray.ADDITIVE_MODE);testDa.addElement(2.0);testDa.addElement(3.2);ResizableDoubleArray copyDa=new ResizableDoubleArray(testDa);Assert.assertEquals(copyDa,testDa);Assert.assertEquals(testDa,copyDa);}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion1",0,"@Test public void testSetElementArbitraryExpansion1(){da.addElement(2.0);da.addElement(4.0);da.addElement(6.0);da.setElement(1,3.0);da.setElement(1000,3.4);Assert.assertEquals(""The number of elements should now be 1001,it isn't"",da.getNumElements(),1001);Assert.assertEquals(""Uninitialized Elements are default value of 0.0,index 766 wasn't"",0.0,da.getElement(760),Double.MIN_VALUE);Assert.assertEquals(""The 1000th index should be 3.4,it isn't"",3.4,da.getElement(1000),Double.MIN_VALUE);Assert.assertEquals(""The 0th index should be 2.0,it isn't"",2.0,da.getElement(0),Double.MIN_VALUE);}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testSetElementArbitraryExpansion2",0,"@Test public void testSetElementArbitraryExpansion2(){da.addElement(2.0);da.addElement(4.0);da.addElement(6.0);Assert.assertEquals(16,((ResizableDoubleArray)da).getCapacity());Assert.assertEquals(3,da.getNumElements());da.setElement(3,7.0);Assert.assertEquals(16,((ResizableDoubleArray)da).getCapacity());Assert.assertEquals(4,da.getNumElements());da.setElement(10,10.0);Assert.assertEquals(16,((ResizableDoubleArray)da).getCapacity());Assert.assertEquals(11,da.getNumElements());da.setElement(9,10.0);Assert.assertEquals(16,((ResizableDoubleArray)da).getCapacity());Assert.assertEquals(11,da.getNumElements());try {da.setElement(-2,3);Assert.fail(""Expecting ArrayIndexOutOfBoundsException for negative index"");}catch(ArrayIndexOutOfBoundsException ex){}ResizableDoubleArray testDa=new ResizableDoubleArray(2,2.0f,3.0f,ResizableDoubleArray.ADDITIVE_MODE);Assert.assertEquals(2,testDa.getCapacity());testDa.addElement(1d);testDa.addElement(1d);Assert.assertEquals(2,testDa.getCapacity());testDa.addElement(1d);Assert.assertEquals(4,testDa.getCapacity());}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testAdd1000",0,"@Override @Test public void testAdd1000(){super.testAdd1000();Assert.assertEquals(""Internal Storage length should be 1024 if we started out with initial capacity of "" + ""16 and an expansion factor of 2.0"",1024,((ResizableDoubleArray)da).getCapacity());}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testAddElements",0,"@Test public void testAddElements(){ResizableDoubleArray testDa=new ResizableDoubleArray();testDa.addElements(new double[]{4,5,6});Assert.assertEquals(3,testDa.getNumElements(),0);Assert.assertEquals(4,testDa.getElement(0),0);Assert.assertEquals(5,testDa.getElement(1),0);Assert.assertEquals(6,testDa.getElement(2),0);testDa.addElements(new double[]{4,5,6});Assert.assertEquals(6,testDa.getNumElements());testDa=new ResizableDoubleArray(2,2.0f,2.5f,ResizableDoubleArray.ADDITIVE_MODE);Assert.assertEquals(2,testDa.getCapacity());testDa.addElements(new double[]{1d});testDa.addElements(new double[]{2d});testDa.addElements(new double[]{3d});Assert.assertEquals(1d,testDa.getElement(0),0);Assert.assertEquals(2d,testDa.getElement(1),0);Assert.assertEquals(3d,testDa.getElement(2),0);Assert.assertEquals(4,testDa.getCapacity());Assert.assertEquals(3,testDa.getNumElements());}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testAddElementRolling",0,"@Override @Test public void testAddElementRolling(){super.testAddElementRolling();da.clear();da.addElement(1);da.addElement(2);da.addElementRolling(3);Assert.assertEquals(3,da.getElement(1),0);da.addElementRolling(4);Assert.assertEquals(3,da.getElement(0),0);Assert.assertEquals(4,da.getElement(1),0);da.addElement(5);Assert.assertEquals(5,da.getElement(2),0);da.addElementRolling(6);Assert.assertEquals(4,da.getElement(0),0);Assert.assertEquals(5,da.getElement(1),0);Assert.assertEquals(6,da.getElement(2),0);ResizableDoubleArray testDa=new ResizableDoubleArray(2,2.0f,2.5f,ResizableDoubleArray.ADDITIVE_MODE);Assert.assertEquals(2,testDa.getCapacity());testDa.addElement(1d);testDa.addElement(2d);testDa.addElement(3d);Assert.assertEquals(1d,testDa.getElement(0),0);Assert.assertEquals(2d,testDa.getElement(1),0);Assert.assertEquals(3d,testDa.getElement(2),0);Assert.assertEquals(4,testDa.getCapacity());Assert.assertEquals(3,testDa.getNumElements());testDa.addElementRolling(4d);Assert.assertEquals(2d,testDa.getElement(0),0);Assert.assertEquals(3d,testDa.getElement(1),0);Assert.assertEquals(4d,testDa.getElement(2),0);Assert.assertEquals(4,testDa.getCapacity());Assert.assertEquals(3,testDa.getNumElements());testDa.addElementRolling(5d);Assert.assertEquals(3d,testDa.getElement(0),0);Assert.assertEquals(4d,testDa.getElement(1),0);Assert.assertEquals(5d,testDa.getElement(2),0);Assert.assertEquals(4,testDa.getCapacity());Assert.assertEquals(3,testDa.getNumElements());try {testDa.getElement(4);Assert.fail(""Expecting ArrayIndexOutOfBoundsException"");}catch(ArrayIndexOutOfBoundsException ex){}try {testDa.getElement(-1);Assert.fail(""Expecting ArrayIndexOutOfBoundsException"");}catch(ArrayIndexOutOfBoundsException ex){}}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testSetNumberOfElements",0,"@Test public void testSetNumberOfElements(){da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);da.addElement(1.0);Assert.assertEquals(""Number of elements should equal 6"",da.getNumElements(),6);((ResizableDoubleArray)da).setNumElements(3);Assert.assertEquals(""Number of elements should equal 3"",da.getNumElements(),3);try {((ResizableDoubleArray)da).setNumElements(-3);Assert.fail(""Setting number of elements to negative should've thrown an exception"");}catch(IllegalArgumentException iae){}((ResizableDoubleArray)da).setNumElements(1024);Assert.assertEquals(""Number of elements should now be 1024"",da.getNumElements(),1024);Assert.assertEquals(""Element 453 should be a default double"",da.getElement(453),0.0,Double.MIN_VALUE);}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacity",0,"@Test public void testWithInitialCapacity(){ResizableDoubleArray eDA2=new ResizableDoubleArray(2);Assert.assertEquals(""Initial number of elements should be 0"",0,eDA2.getNumElements());final IntegerDistribution randomData=new UniformIntegerDistribution(100,1000);final int iterations=randomData.sample();for (int i=0;i < iterations;i++){eDA2.addElement(i);}Assert.assertEquals(""Number of elements should be equal to "" + iterations,iterations,eDA2.getNumElements());eDA2.addElement(2.0);Assert.assertEquals(""Number of elements should be equals to "" + (iterations + 1),iterations + 1,eDA2.getNumElements());}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testWithInitialCapacityAndExpansionFactor",0,"@Test public void testWithInitialCapacityAndExpansionFactor(){ResizableDoubleArray eDA3=new ResizableDoubleArray(3,3.0f,3.5f);Assert.assertEquals(""Initial number of elements should be 0"",0,eDA3.getNumElements());final IntegerDistribution randomData=new UniformIntegerDistribution(100,3000);final int iterations=randomData.sample();for (int i=0;i < iterations;i++){eDA3.addElement(i);}Assert.assertEquals(""Number of elements should be equal to "" + iterations,iterations,eDA3.getNumElements());eDA3.addElement(2.0);Assert.assertEquals(""Number of elements should be equals to "" + (iterations + 1),iterations + 1,eDA3.getNumElements());Assert.assertEquals(""Expansion factor should equal 3.0"",3.0f,eDA3.getExpansionFactor(),Double.MIN_VALUE);}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testDiscard",0,"@Test public void testDiscard(){da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);Assert.assertEquals(""Number of elements should be 11"",11,da.getNumElements());((ResizableDoubleArray)da).discardFrontElements(5);Assert.assertEquals(""Number of elements should be 6"",6,da.getNumElements());da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);Assert.assertEquals(""Number of elements should be 10"",10,da.getNumElements());((ResizableDoubleArray)da).discardMostRecentElements(2);Assert.assertEquals(""Number of elements should be 8"",8,da.getNumElements());try {((ResizableDoubleArray)da).discardFrontElements(-1);Assert.fail(""Trying to discard a negative number of element is not allowed"");}catch(Exception e){}try {((ResizableDoubleArray)da).discardMostRecentElements(-1);Assert.fail(""Trying to discard a negative number of element is not allowed"");}catch(Exception e){}try {((ResizableDoubleArray)da).discardFrontElements(10000);Assert.fail(""You can't discard more elements than the array contains"");}catch(Exception e){}try {((ResizableDoubleArray)da).discardMostRecentElements(10000);Assert.fail(""You can't discard more elements than the array contains"");}catch(Exception e){}}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testSubstitute",0,"@Test public void testSubstitute(){da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);da.addElement(2.0);Assert.assertEquals(""Number of elements should be 11"",11,da.getNumElements());((ResizableDoubleArray)da).substituteMostRecentElement(24);Assert.assertEquals(""Number of elements should be 11"",11,da.getNumElements());try {((ResizableDoubleArray)da).discardMostRecentElements(10);}catch(Exception e){Assert.fail(""Trying to discard a negative number of element is not allowed"");}((ResizableDoubleArray)da).substituteMostRecentElement(24);Assert.assertEquals(""Number of elements should be 1"",1,da.getNumElements());}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testMutators",0,"@Test public void testMutators(){((ResizableDoubleArray)da).setContractionCriteria(10f);Assert.assertEquals(10f,((ResizableDoubleArray)da).getContractionCriteria(),0);((ResizableDoubleArray)da).setExpansionFactor(8f);Assert.assertEquals(8f,((ResizableDoubleArray)da).getExpansionFactor(),0);try {((ResizableDoubleArray)da).setExpansionFactor(11f);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}((ResizableDoubleArray)da).setExpansionMode(ResizableDoubleArray.ADDITIVE_MODE);Assert.assertEquals(ResizableDoubleArray.ADDITIVE_MODE,((ResizableDoubleArray)da).getExpansionMode());try {((ResizableDoubleArray)da).setExpansionMode(-1);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode()throws Exception {ResizableDoubleArray first=new ResizableDoubleArray();Double other=new Double(2);Assert.assertFalse(first.equals(other));other=null;Assert.assertFalse(first.equals(other));Assert.assertTrue(first.equals(first));ResizableDoubleArray second=new ResizableDoubleArray();verifyEquality(first,second);ResizableDoubleArray third=new ResizableDoubleArray(3,2.0f,2.0f);verifyInequality(third,first);ResizableDoubleArray fourth=new ResizableDoubleArray(3,2.0f,2.0f);ResizableDoubleArray fifth=new ResizableDoubleArray(2,2.0f,2.0f);verifyEquality(third,fourth);verifyInequality(third,fifth);third.addElement(4.1);third.addElement(4.2);third.addElement(4.3);fourth.addElement(4.1);fourth.addElement(4.2);fourth.addElement(4.3);verifyEquality(third,fourth);fourth.addElement(4.4);verifyInequality(third,fourth);third.addElement(4.4);verifyEquality(third,fourth);fourth.addElement(4.4);verifyInequality(third,fourth);third.addElement(4.4);verifyEquality(third,fourth);fourth.addElementRolling(4.5);third.addElementRolling(4.5);verifyEquality(third,fourth);third.discardFrontElements(1);verifyInequality(third,fourth);fourth.discardFrontElements(1);verifyEquality(third,fourth);third.discardMostRecentElements(2);fourth.discardMostRecentElements(2);verifyEquality(third,fourth);third.addElement(18);fourth.addElement(17);third.addElement(17);fourth.addElement(18);verifyInequality(third,fourth);ResizableDoubleArray.copy(fourth,fifth);verifyEquality(fourth,fifth);verifyEquality(fourth,new ResizableDoubleArray(fourth));verifyEquality(fourth,fourth.copy());}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testGetArrayRef",0,"@Test public void testGetArrayRef(){final ResizableDoubleArray a=new ResizableDoubleArray();final int index=20;final double v1=1.2;a.setElement(index,v1);final double v2=v1 + 3.4;final double[]aInternalArray=a.getArrayRef();aInternalArray[a.getStartIndex()+ index]=v2;Assert.assertEquals(v2,a.getElement(index),0d);}"
"org.apache.commons.math3.util.ResizableDoubleArrayTest.testCompute",0,"@Test public void testCompute(){final ResizableDoubleArray a=new ResizableDoubleArray();final int max=20;for (int i=1;i <= max;i++){a.setElement(i,i);}final MathArrays.Function add=new MathArrays.Function(){public double evaluate(double[]a,int index,int num){double sum=0;final int max=index + num;for (int i=index;i < max;i++){sum+=a[i];}return sum;}public double evaluate(double[]a){return evaluate(a,0,a.length);}};final double sum=a.compute(add);Assert.assertEquals(0.5 * max * (max + 1),sum,0);}"
"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws NumberIsTooSmallException,DimensionMismatchException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3();AdamsBashforthIntegrator integ=new AdamsBashforthIntegrator(4,0.0,1.0,1.0e-10,1.0e-10);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,5e-9);}"
"org.apache.commons.math3.ode.sampling.NordsieckStepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,NumberIsTooSmallException,DimensionMismatchException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();AdamsBashforthIntegrator integ=new AdamsBashforthIntegrator(4,0.0,1.0,1.0e-10,1.0e-10);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 25500);Assert.assertTrue(bos.size()< 26500);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 1.0e-6);}"
"org.apache.commons.math3.primes.PrimesTest.testNextPrime",0,"@Test public void testNextPrime(){Assert.assertEquals(2,Primes.nextPrime(0));Assert.assertEquals(2,Primes.nextPrime(1));Assert.assertEquals(2,Primes.nextPrime(2));Assert.assertEquals(3,Primes.nextPrime(3));Assert.assertEquals(5,Primes.nextPrime(4));Assert.assertEquals(5,Primes.nextPrime(5));for (int i=0;i < SmallPrimes.PRIMES.length - 1;i++){for (int j=SmallPrimes.PRIMES[i]+ 1;j <= SmallPrimes.PRIMES[i + 1];j++){Assert.assertEquals(SmallPrimes.PRIMES[i + 1],Primes.nextPrime(j));}}Assert.assertEquals(25325981,Primes.nextPrime(25325981));for (int i=25325981 + 1;i <= 25326023;i++){Assert.assertEquals(25326023,Primes.nextPrime(i));}Assert.assertEquals(Integer.MAX_VALUE,Primes.nextPrime(Integer.MAX_VALUE - 10));Assert.assertEquals(Integer.MAX_VALUE,Primes.nextPrime(Integer.MAX_VALUE - 1));Assert.assertEquals(Integer.MAX_VALUE,Primes.nextPrime(Integer.MAX_VALUE));assertNextPrimeException(Integer.MIN_VALUE,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,Integer.MIN_VALUE,0));assertNextPrimeException(-1,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-1,0));assertNextPrimeException(-13,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,-13,0));}"
"org.apache.commons.math3.primes.PrimesTest.testIsPrime",0,"@Test public void testIsPrime()throws Exception {for(int i : BELOW_2){Assert.assertEquals(false,Primes.isPrime(i));}for(int i : NOT_PRIMES){Assert.assertEquals(false,Primes.isPrime(i));}for(int i : PRIMES){Assert.assertEquals(true,Primes.isPrime(i));}}"
"org.apache.commons.math3.primes.PrimesTest.testPrimeFactors",0,"@Test public void testPrimeFactors()throws Exception {for(int i : BELOW_2){assertPrimeFactorsException(i,new MathIllegalArgumentException(LocalizedFormats.NUMBER_TOO_SMALL,i,2));}for(int i : NOT_PRIMES){List<Integer> factors=Primes.primeFactors(i);checkPrimeFactors(factors);int prod=product(factors);Assert.assertEquals(i,prod);}for(int i : PRIMES){List<Integer> factors=Primes.primeFactors(i);Assert.assertEquals(i,(int)factors.get(0));Assert.assertEquals(1,factors.size());}}"
"org.apache.commons.math3.geometry.euclidean.threed.RotationOrderTest.testName",0,"@Test public void testName(){RotationOrder[]orders={RotationOrder.XYZ,RotationOrder.XZY,RotationOrder.YXZ,RotationOrder.YZX,RotationOrder.ZXY,RotationOrder.ZYX,RotationOrder.XYX,RotationOrder.XZX,RotationOrder.YXY,RotationOrder.YZY,RotationOrder.ZXZ,RotationOrder.ZYZ};for (int i=0;i < orders.length;++i){Assert.assertEquals(getFieldName(orders[i]),orders[i].toString());}}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;GeometricDistribution dist;dist=new GeometricDistribution(0.5);Assert.assertEquals(dist.getNumericalMean(),(1.0d - 0.5d)/ 0.5d,tol);Assert.assertEquals(dist.getNumericalVariance(),(1.0d - 0.5d)/ (0.5d * 0.5d),tol);dist=new GeometricDistribution(0.3);Assert.assertEquals(dist.getNumericalMean(),(1.0d - 0.3d)/ 0.3d,tol);Assert.assertEquals(dist.getNumericalVariance(),(1.0d - 0.3d)/ (0.3d * 0.3d),tol);}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testDensities",0,"/** * Verifies that probability density calculations match expected values using default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testConsistencyAtSupportBounds",0,"@Test public void testConsistencyAtSupportBounds(){final int lower=distribution.getSupportLowerBound();Assert.assertEquals(""Cumulative probability mmust be 0 below support lower bound."",0.0,distribution.cumulativeProbability(lower - 1),0.0);Assert.assertEquals(""Cumulative probability of support lower bound must be equal to probability mass at this point."",distribution.probability(lower),distribution.cumulativeProbability(lower),tolerance);Assert.assertEquals(""Inverse cumulative probability of 0 must be equal to support lower bound."",lower,distribution.inverseCumulativeProbability(0.0));final int upper=distribution.getSupportUpperBound();if (upper != Integer.MAX_VALUE)Assert.assertEquals(""Cumulative probability of support upper bound must be equal to 1."",1.0,distribution.cumulativeProbability(upper),0.0);Assert.assertEquals(""Inverse cumulative probability of 1 must be equal to support upper bound."",upper,distribution.inverseCumulativeProbability(1.0));}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.GeometricDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){int[]densityPoints=makeDensityTestPoints();double[]densityValues=makeDensityTestValues();int sampleSize=1000;int length=TestUtils.eliminateZeroMassPoints(densityPoints,densityValues);AbstractIntegerDistribution distribution=(AbstractIntegerDistribution)makeDistribution();double[]expectedCounts=new double[length];long[]observedCounts=new long[length];for (int i=0;i < length;i++){expectedCounts[i]=sampleSize * densityValues[i];}distribution.reseedRandomGenerator(1000);int[]sample=distribution.sample(sampleSize);for (int i=0;i < sampleSize;i++){for (int j=0;j < length;j++){if (sample[i]== densityPoints[j]){observedCounts[j]++;}}}TestUtils.assertChiSquareAccept(densityPoints,expectedCounts,observedCounts,.001);}"
"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.dimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void dimensionCheck()throws NumberIsTooSmallException,DimensionMismatchException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();FirstOrderIntegrator integ=new AdamsBashforthIntegrator(2,0.0,1.0,1.0e-10,1.0e-10);integ.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);}"
"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.testMinStep",0,"@Test(expected=NumberIsTooSmallException.class)public void testMinStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new AdamsBashforthIntegrator(4,minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.testIncreasingTolerance",0,"@Test public void testIncreasingTolerance()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -5;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=FastMath.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new AdamsBashforthIntegrator(4,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()> (50.0 * scalAbsoluteTolerance));Assert.assertTrue(handler.getMaximalValueError()< (300.0 * scalAbsoluteTolerance));Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-16);int calls=pb.getCalls();Assert.assertEquals(integ.getEvaluations(),calls);Assert.assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.exceedMaxEvaluations",0,"@Test(expected=MaxCountExceededException.class)public void exceedMaxEvaluations()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double range=pb.getFinalTime()- pb.getInitialTime();AdamsBashforthIntegrator integ=new AdamsBashforthIntegrator(2,0,range,1.0e-12,1.0e-12);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.setMaxEvaluations(650);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.backward",0,"@Test public void backward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double range=FastMath.abs(pb.getFinalTime()- pb.getInitialTime());FirstOrderIntegrator integ=new AdamsBashforthIntegrator(4,0,range,1.0e-12,1.0e-12);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 1.5e-8);Assert.assertTrue(handler.getMaximalValueError()< 1.5e-8);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-16);Assert.assertEquals(""Adams-Bashforth"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegratorTest.polynomial",0,"@Test public void polynomial()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem6 pb=new TestProblem6();double range=FastMath.abs(pb.getFinalTime()- pb.getInitialTime());for (int nSteps=2;nSteps < 8;++nSteps){AdamsBashforthIntegrator integ=new AdamsBashforthIntegrator(nSteps,1.0e-6 * range,0.1 * range,1.0e-5,1.0e-5);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (nSteps < 4){Assert.assertTrue(handler.getMaximalValueError()> 1.0e-03);}else {Assert.assertTrue(handler.getMaximalValueError()< 4.0e-12);}}}"
"org.apache.commons.math3.optim.PointValuePairTest.testSerial",0,"@Test public void testSerial(){PointValuePair pv1=new PointValuePair(new double[]{1.0,2.0,3.0},4.0);PointValuePair pv2=(PointValuePair)TestUtils.serializeAndRecover(pv1);Assert.assertEquals(pv1.getKey().length,pv2.getKey().length);for (int i=0;i < pv1.getKey().length;++i){Assert.assertEquals(pv1.getKey()[i],pv2.getKey()[i],1.0e-15);}Assert.assertEquals(pv1.getValue(),pv2.getValue(),1.0e-15);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest.testConstructor",0,"@Test public void testConstructor(){PolynomialSplineFunction spline=new PolynomialSplineFunction(knots,polynomials);Assert.assertTrue(Arrays.equals(knots,spline.getKnots()));Assert.assertEquals(1d,spline.getPolynomials()[0].getCoefficients()[2],0);Assert.assertEquals(3,spline.getN());try {new PolynomialSplineFunction(new double[]{0},polynomials);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {new PolynomialSplineFunction(new double[]{0,1,2,3,4},polynomials);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}try {new PolynomialSplineFunction(new double[]{0,1,3,2},polynomials);Assert.fail(""Expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest.testValues",0,"@Test public void testValues(){PolynomialSplineFunction spline=new PolynomialSplineFunction(knots,polynomials);UnivariateFunction dSpline=spline.derivative();double x=-1;int index=0;for (int i=0;i < 10;i++){x+=0.25;index=findKnot(knots,x);Assert.assertEquals(""spline function evaluation failed for x="" + x,polynomials[index].value(x - knots[index]),spline.value(x),tolerance);Assert.assertEquals(""spline derivative evaluation failed for x="" + x,dp.value(x - knots[index]),dSpline.value(x),tolerance);}for (int i=0;i < 3;i++){Assert.assertEquals(""spline function evaluation failed for knot="" + knots[i],polynomials[i].value(0),spline.value(knots[i]),tolerance);Assert.assertEquals(""spline function evaluation failed for knot="" + knots[i],dp.value(0),dSpline.value(knots[i]),tolerance);}try {x=spline.value(-1.5);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {x=spline.value(2.5);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunctionTest.testIsValidPoint",0,"@Test public void testIsValidPoint(){final PolynomialSplineFunction spline=new PolynomialSplineFunction(knots,polynomials);final double xMin=knots[0];final double xMax=knots[knots.length - 1];double x;x=xMin;Assert.assertTrue(spline.isValidPoint(x));spline.value(x);x=xMax;Assert.assertTrue(spline.isValidPoint(x));spline.value(x);final double xRange=xMax - xMin;x=xMin + xRange / 3.4;Assert.assertTrue(spline.isValidPoint(x));spline.value(x);final double small=1e-8;x=xMin - small;Assert.assertFalse(spline.isValidPoint(x));try {spline.value(x);Assert.fail(""OutOfRangeException expected"");}catch(OutOfRangeException expected){}}"
"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest.testSinFunction",0,"@Test public void testSinFunction(){UnivariateFunction f=new Sin();BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-14,1.0e-10,2,15);double min,max,expected,result,tolerance;min=0;max=FastMath.PI;expected=2;tolerance=FastMath.max(integrator.getAbsoluteAccuracy(),FastMath.abs(expected * integrator.getRelativeAccuracy()));result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-FastMath.PI / 3;max=0;expected=-0.5;tolerance=FastMath.max(integrator.getAbsoluteAccuracy(),FastMath.abs(expected * integrator.getRelativeAccuracy()));result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest.testQuinticFunction",0,"@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(3,BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,64);double min,max,expected,result;min=0;max=1;expected=-1.0 / 48;result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,1.0e-16);min=0;max=0.5;expected=11.0 / 768;result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,1.0e-16);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;result=integrator.integrate(10000,f,min,max);Assert.assertEquals(expected,result,1.0e-16);}"
"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest.testExactIntegration",0,"@Test public void testExactIntegration(){Random random=new Random(86343623467878363l);for (int n=2;n < 6;++n){IterativeLegendreGaussIntegrator integrator=new IterativeLegendreGaussIntegrator(n,BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,64);for (int degree=0;degree <= 2 * n - 1;++degree){for (int i=0;i < 10;++i){double[]coeff=new double[degree + 1];for (int k=0;k < coeff.length;++k){coeff[k]=2 * random.nextDouble()- 1;}PolynomialFunction p=new PolynomialFunction(coeff);double result=integrator.integrate(10000,p,-5.0,15.0);double reference=exactIntegration(p,-5.0,15.0);Assert.assertEquals(n + "" "" + degree+ "" ""+ i,reference,result,1.0e-12 * (1.0 + FastMath.abs(reference)));}}}}"
"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest.testNormalDistributionWithLargeSigma",0,"@Test public void testNormalDistributionWithLargeSigma(){final double sigma=1000;final double mean=0;final double factor=1 / (sigma * FastMath.sqrt(2 * FastMath.PI));final UnivariateFunction normal=new Gaussian(factor,mean,sigma);final double tol=1e-2;final IterativeLegendreGaussIntegrator integrator=new IterativeLegendreGaussIntegrator(5,tol,tol);final double a=-5000;final double b=5000;final double s=integrator.integrate(50,normal,a,b);Assert.assertEquals(1,s,1e-5);}"
"org.apache.commons.math3.analysis.integration.IterativeLegendreGaussIntegratorTest.testIssue464",0,"@Test public void testIssue464(){final double value=0.2;UnivariateFunction f=new UnivariateFunction(){public double value(double x){return (x >= 0 && x <= 5)? value : 0.0;}};IterativeLegendreGaussIntegrator gauss=new IterativeLegendreGaussIntegrator(5,3,100);double maxX=0.32462367623786328;Assert.assertEquals(maxX * value,gauss.integrate(Integer.MAX_VALUE,f,-10,maxX),1.0e-7);Assert.assertTrue(gauss.getEvaluations()> 37000000);Assert.assertTrue(gauss.getIterations()< 30);try {gauss.integrate(1000,f,-10,maxX);Assert.fail(""expected TooManyEvaluationsException"");}catch(TooManyEvaluationsException tmee){Assert.assertEquals(1000,tmee.getMax());}double sum1=gauss.integrate(1000,f,-10,0);int eval1=gauss.getEvaluations();double sum2=gauss.integrate(1000,f,0,maxX);int eval2=gauss.getEvaluations();Assert.assertEquals(maxX * value,sum1 + sum2,1.0e-7);Assert.assertTrue(eval1 + eval2 < 200);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testBoundsUnsupported",0,"@Test(expected=MathUnsupportedOperationException.class)public void testBoundsUnsupported(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final FourExtrema fourExtrema=new FourExtrema();optimizer.optimize(new MaxEval(100),new ObjectiveFunction(fourExtrema),GoalType.MINIMIZE,new InitialGuess(new double[]{-3,0}),new NelderMeadSimplex(new double[]{0.2,0.2}),new SimpleBounds(new double[]{-5,-1},new double[]{5,1}));}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize1",0,"@Test public void testMinimize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(fourExtrema),GoalType.MINIMIZE,new InitialGuess(new double[]{-3,0}),new NelderMeadSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],2e-7);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],2e-5);Assert.assertEquals(fourExtrema.valueXmYp,optimum.getValue(),6e-12);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMinimize2",0,"@Test public void testMinimize2(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(fourExtrema),GoalType.MINIMIZE,new InitialGuess(new double[]{1,0}),new NelderMeadSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],5e-6);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],6e-6);Assert.assertEquals(fourExtrema.valueXpYm,optimum.getValue(),1e-11);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize1",0,"@Test public void testMaximize1(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(fourExtrema),GoalType.MAXIMIZE,new InitialGuess(new double[]{-3,0}),new NelderMeadSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xM,optimum.getPoint()[0],1e-5);Assert.assertEquals(fourExtrema.yM,optimum.getPoint()[1],3e-6);Assert.assertEquals(fourExtrema.valueXmYm,optimum.getValue(),3e-12);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaximize2",0,"@Test public void testMaximize2(){SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);final FourExtrema fourExtrema=new FourExtrema();final PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(fourExtrema),GoalType.MAXIMIZE,new InitialGuess(new double[]{1,0}),new NelderMeadSimplex(new double[]{0.2,0.2}));Assert.assertEquals(fourExtrema.xP,optimum.getPoint()[0],4e-6);Assert.assertEquals(fourExtrema.yP,optimum.getPoint()[1],5e-6);Assert.assertEquals(fourExtrema.valueXpYp,optimum.getValue(),7e-12);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 90);Assert.assertTrue(optimizer.getIterations()> 0);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testRosenbrock",0,"@Test public void testRosenbrock(){Rosenbrock rosenbrock=new Rosenbrock();SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);PointValuePair optimum=optimizer.optimize(new MaxEval(100),new ObjectiveFunction(rosenbrock),GoalType.MINIMIZE,new InitialGuess(new double[]{-1.2,1}),new NelderMeadSimplex(new double[][]{{-1.2,1},{0.9,1.2},{3.5,-2.3}}));Assert.assertEquals(rosenbrock.getCount(),optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 40);Assert.assertTrue(optimizer.getEvaluations()< 50);Assert.assertTrue(optimum.getValue()< 8e-4);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testPowell",0,"@Test public void testPowell(){Powell powell=new Powell();SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(powell),GoalType.MINIMIZE,new InitialGuess(new double[]{3,-1,0,1}),new NelderMeadSimplex(4));Assert.assertEquals(powell.getCount(),optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 110);Assert.assertTrue(optimizer.getEvaluations()< 130);Assert.assertTrue(optimum.getValue()< 2e-3);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testLeastSquares1",0,"@Test public void testLeastSquares1(){final RealMatrix factors=new Array2DRowRealMatrix(new double[][]{{1,0},{0,1}},false);LeastSquaresConverter ls=new LeastSquaresConverter(new MultivariateVectorFunction(){public double[]value(double[]variables){return factors.operate(variables);}},new double[]{2.0,-3.0});SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-6);PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(ls),GoalType.MINIMIZE,new InitialGuess(new double[]{10,10}),new NelderMeadSimplex(2));Assert.assertEquals(2,optimum.getPointRef()[0],3e-5);Assert.assertEquals(-3,optimum.getPointRef()[1],4e-4);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 80);Assert.assertTrue(optimum.getValue()< 1.0e-6);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testLeastSquares2",0,"@Test public void testLeastSquares2(){final RealMatrix factors=new Array2DRowRealMatrix(new double[][]{{1,0},{0,1}},false);LeastSquaresConverter ls=new LeastSquaresConverter(new MultivariateVectorFunction(){public double[]value(double[]variables){return factors.operate(variables);}},new double[]{2,-3},new double[]{10,0.1});SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-6);PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(ls),GoalType.MINIMIZE,new InitialGuess(new double[]{10,10}),new NelderMeadSimplex(2));Assert.assertEquals(2,optimum.getPointRef()[0],5e-5);Assert.assertEquals(-3,optimum.getPointRef()[1],8e-4);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 80);Assert.assertTrue(optimum.getValue()< 1e-6);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testLeastSquares3",0,"@Test public void testLeastSquares3(){final RealMatrix factors=new Array2DRowRealMatrix(new double[][]{{1,0},{0,1}},false);LeastSquaresConverter ls=new LeastSquaresConverter(new MultivariateVectorFunction(){public double[]value(double[]variables){return factors.operate(variables);}},new double[]{2,-3},new Array2DRowRealMatrix(new double[][]{{1,1.2},{1.2,2}}));SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-6);PointValuePair optimum=optimizer.optimize(new MaxEval(200),new ObjectiveFunction(ls),GoalType.MINIMIZE,new InitialGuess(new double[]{10,10}),new NelderMeadSimplex(2));Assert.assertEquals(2,optimum.getPointRef()[0],2e-3);Assert.assertEquals(-3,optimum.getPointRef()[1],8e-4);Assert.assertTrue(optimizer.getEvaluations()> 60);Assert.assertTrue(optimizer.getEvaluations()< 80);Assert.assertTrue(optimum.getValue()< 1e-6);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest.testMaxIterations",0,"@Test(expected=TooManyEvaluationsException.class)public void testMaxIterations(){Powell powell=new Powell();SimplexOptimizer optimizer=new SimplexOptimizer(-1,1e-3);optimizer.optimize(new MaxEval(20),new ObjectiveFunction(powell),GoalType.MINIMIZE,new InitialGuess(new double[]{3,-1,0,1}),new NelderMeadSimplex(4));}"
"org.apache.commons.math3.fitting.CurveFitterTest.testMath303",0,"@Test public void testMath303(){LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();CurveFitter<ParametricUnivariateFunction> fitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);fitter.addObservedPoint(2.805d,0.6934785852953367d);fitter.addObservedPoint(2.74333333333333d,0.6306772025518496d);fitter.addObservedPoint(1.655d,0.9474675497289684);fitter.addObservedPoint(1.725d,0.9013594835804194d);ParametricUnivariateFunction sif=new SimpleInverseFunction();double[]initialguess1=new double[1];initialguess1[0]=1.0d;Assert.assertEquals(1,fitter.fit(sif,initialguess1).length);double[]initialguess2=new double[2];initialguess2[0]=1.0d;initialguess2[1]=.5d;Assert.assertEquals(2,fitter.fit(sif,initialguess2).length);}"
"org.apache.commons.math3.fitting.CurveFitterTest.testMath304",0,"@Test public void testMath304(){LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();CurveFitter<ParametricUnivariateFunction> fitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);fitter.addObservedPoint(2.805d,0.6934785852953367d);fitter.addObservedPoint(2.74333333333333d,0.6306772025518496d);fitter.addObservedPoint(1.655d,0.9474675497289684);fitter.addObservedPoint(1.725d,0.9013594835804194d);ParametricUnivariateFunction sif=new SimpleInverseFunction();double[]initialguess1=new double[1];initialguess1[0]=1.0d;Assert.assertEquals(1.6357215104109237,fitter.fit(sif,initialguess1)[0],1.0e-14);double[]initialguess2=new double[1];initialguess2[0]=10.0d;Assert.assertEquals(1.6357215104109237,fitter.fit(sif,initialguess1)[0],1.0e-14);}"
"org.apache.commons.math3.fitting.CurveFitterTest.testMath372",0,"@Test public void testMath372(){LevenbergMarquardtOptimizer optimizer=new LevenbergMarquardtOptimizer();CurveFitter<ParametricUnivariateFunction> curveFitter=new CurveFitter<ParametricUnivariateFunction>(optimizer);curveFitter.addObservedPoint(15,4443);curveFitter.addObservedPoint(31,8493);curveFitter.addObservedPoint(62,17586);curveFitter.addObservedPoint(125,30582);curveFitter.addObservedPoint(250,45087);curveFitter.addObservedPoint(500,50683);ParametricUnivariateFunction f=new ParametricUnivariateFunction(){public double value(double x,double... parameters){double a=parameters[0];double b=parameters[1];double c=parameters[2];double d=parameters[3];return d + ((a - d)/ (1 + FastMath.pow(x / c,b)));}public double[]gradient(double x,double... parameters){double a=parameters[0];double b=parameters[1];double c=parameters[2];double d=parameters[3];double[]gradients=new double[4];double den=1 + FastMath.pow(x / c,b);gradients[0]=1 / den;gradients[1]=-((a - d)* FastMath.pow(x / c,b)* FastMath.log(x / c))/ (den * den);gradients[2]=(b * FastMath.pow(x / c,b - 1)* (x / (c * c))* (a - d))/ (den * den);gradients[3]=1 - (1 / den);return gradients;}};double[]initialGuess=new double[]{1500,0.95,65,35000};double[]estimatedParameters=curveFitter.fit(f,initialGuess);Assert.assertEquals(2411.00,estimatedParameters[0],500.00);Assert.assertEquals(1.62,estimatedParameters[1],0.04);Assert.assertEquals(111.22,estimatedParameters[2],0.30);Assert.assertEquals(55347.47,estimatedParameters[3],300.00);Assert.assertTrue(optimizer.getRMS()< 600.0);}"
"org.apache.commons.math3.dfp.DfpTest.testByteConstructor",0,"@Test public void testByteConstructor(){Assert.assertEquals(""0."",new Dfp(field,(byte)0).toString());Assert.assertEquals(""1."",new Dfp(field,(byte)1).toString());Assert.assertEquals(""-1."",new Dfp(field,(byte)-1).toString());Assert.assertEquals(""-128."",new Dfp(field,Byte.MIN_VALUE).toString());Assert.assertEquals(""127."",new Dfp(field,Byte.MAX_VALUE).toString());}"
"org.apache.commons.math3.dfp.DfpTest.testIntConstructor",0,"@Test public void testIntConstructor(){Assert.assertEquals(""0."",new Dfp(field,0).toString());Assert.assertEquals(""1."",new Dfp(field,1).toString());Assert.assertEquals(""-1."",new Dfp(field,-1).toString());Assert.assertEquals(""1234567890."",new Dfp(field,1234567890).toString());Assert.assertEquals(""-1234567890."",new Dfp(field,-1234567890).toString());Assert.assertEquals(""-2147483648."",new Dfp(field,Integer.MIN_VALUE).toString());Assert.assertEquals(""2147483647."",new Dfp(field,Integer.MAX_VALUE).toString());}"
"org.apache.commons.math3.dfp.DfpTest.testLongConstructor",0,"@Test public void testLongConstructor(){Assert.assertEquals(""0."",new Dfp(field,0l).toString());Assert.assertEquals(""1."",new Dfp(field,1l).toString());Assert.assertEquals(""-1."",new Dfp(field,-1l).toString());Assert.assertEquals(""1234567890."",new Dfp(field,1234567890l).toString());Assert.assertEquals(""-1234567890."",new Dfp(field,-1234567890l).toString());Assert.assertEquals(""-9223372036854775808."",new Dfp(field,Long.MIN_VALUE).toString());Assert.assertEquals(""9223372036854775807."",new Dfp(field,Long.MAX_VALUE).toString());}"
"org.apache.commons.math3.dfp.DfpTest.testAdd",0,"@Test public void testAdd(){test(field.newDfp(""1"").add(field.newDfp(""1"")),field.newDfp(""2""),0,""Add #1"");test(field.newDfp(""1"").add(field.newDfp(""-1"")),field.newDfp(""0""),0,""Add #2"");test(field.newDfp(""-1"").add(field.newDfp(""1"")),field.newDfp(""0""),0,""Add #3"");test(field.newDfp(""-1"").add(field.newDfp(""-1"")),field.newDfp(""-2""),0,""Add #4"");test(field.newDfp(""1"").add(field.newDfp(""1e-16"")),field.newDfp(""1.0000000000000001""),0,""Add #5"");test(field.newDfp(""1"").add(field.newDfp(""1e-17"")),field.newDfp(""1""),DfpField.FLAG_INEXACT,""Add #6"");test(field.newDfp(""0.90999999999999999999"").add(field.newDfp(""0.1"")),field.newDfp(""1.01""),DfpField.FLAG_INEXACT,""Add #7"");test(field.newDfp("".10000000000000005000"").add(field.newDfp("".9"")),field.newDfp(""1.""),DfpField.FLAG_INEXACT,""Add #8"");test(field.newDfp("".10000000000000015000"").add(field.newDfp("".9"")),field.newDfp(""1.0000000000000002""),DfpField.FLAG_INEXACT,""Add #9"");test(field.newDfp("".10000000000000014999"").add(field.newDfp("".9"")),field.newDfp(""1.0000000000000001""),DfpField.FLAG_INEXACT,""Add #10"");test(field.newDfp("".10000000000000015001"").add(field.newDfp("".9"")),field.newDfp(""1.0000000000000002""),DfpField.FLAG_INEXACT,""Add #11"");test(field.newDfp("".11111111111111111111"").add(field.newDfp(""11.1111111111111111"")),field.newDfp(""11.22222222222222222222""),DfpField.FLAG_INEXACT,""Add #12"");test(field.newDfp("".11111111111111111111"").add(field.newDfp(""1111111111111111.1111"")),field.newDfp(""1111111111111111.2222""),DfpField.FLAG_INEXACT,""Add #13"");test(field.newDfp("".11111111111111111111"").add(field.newDfp(""11111111111111111111"")),field.newDfp(""11111111111111111111""),DfpField.FLAG_INEXACT,""Add #14"");test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""-1e131052"")),field.newDfp(""9.9999999999999999998e131071""),0,""Add #15"");test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""1e131052"")),pinf,DfpField.FLAG_OVERFLOW,""Add #16"");test(field.newDfp(""-9.9999999999999999999e131071"").add(field.newDfp(""-1e131052"")),ninf,DfpField.FLAG_OVERFLOW,""Add #17"");test(field.newDfp(""-9.9999999999999999999e131071"").add(field.newDfp(""1e131052"")),field.newDfp(""-9.9999999999999999998e131071""),0,""Add #18"");test(field.newDfp(""1e-131072"").add(field.newDfp(""1e-131072"")),field.newDfp(""2e-131072""),0,""Add #19"");test(field.newDfp(""1.0000000000000001e-131057"").add(field.newDfp(""-1e-131057"")),field.newDfp(""1e-131073""),DfpField.FLAG_UNDERFLOW,""Add #20"");test(field.newDfp(""1.1e-131072"").add(field.newDfp(""-1e-131072"")),field.newDfp(""1e-131073""),DfpField.FLAG_UNDERFLOW,""Add #21"");test(field.newDfp(""1.0000000000000001e-131072"").add(field.newDfp(""-1e-131072"")),field.newDfp(""1e-131088""),DfpField.FLAG_UNDERFLOW,""Add #22"");test(field.newDfp(""1.0000000000000001e-131078"").add(field.newDfp(""-1e-131078"")),field.newDfp(""0""),DfpField.FLAG_UNDERFLOW,""Add #23"");test(field.newDfp(""1.0"").add(field.newDfp(""-1e-20"")),field.newDfp(""0.99999999999999999999""),0,""Add #23.1"");test(field.newDfp(""-0.99999999999999999999"").add(field.newDfp(""1"")),field.newDfp(""0.00000000000000000001""),0,""Add #23.2"");test(field.newDfp(""1"").add(field.newDfp(""0"")),field.newDfp(""1""),0,""Add #24"");test(field.newDfp(""0"").add(field.newDfp(""0"")),field.newDfp(""0""),0,""Add #25"");test(field.newDfp(""-0"").add(field.newDfp(""0"")),field.newDfp(""0""),0,""Add #26"");test(field.newDfp(""0"").add(field.newDfp(""-0"")),field.newDfp(""0""),0,""Add #27"");test(field.newDfp(""-0"").add(field.newDfp(""-0"")),field.newDfp(""-0""),0,""Add #28"");test(field.newDfp(""1e-20"").add(field.newDfp(""0"")),field.newDfp(""1e-20""),0,""Add #29"");test(field.newDfp(""1e-40"").add(field.newDfp(""0"")),field.newDfp(""1e-40""),0,""Add #30"");test(pinf.add(ninf),nan,DfpField.FLAG_INVALID,""Add #31"");test(ninf.add(pinf),nan,DfpField.FLAG_INVALID,""Add #32"");test(ninf.add(ninf),ninf,0,""Add #33"");test(pinf.add(pinf),pinf,0,""Add #34"");test(pinf.add(field.newDfp(""0"")),pinf,0,""Add #35"");test(pinf.add(field.newDfp(""-1e131071"")),pinf,0,""Add #36"");test(pinf.add(field.newDfp(""1e131071"")),pinf,0,""Add #37"");test(field.newDfp(""0"").add(pinf),pinf,0,""Add #38"");test(field.newDfp(""-1e131071"").add(pinf),pinf,0,""Add #39"");test(field.newDfp(""1e131071"").add(pinf),pinf,0,""Add #40"");test(ninf.add(field.newDfp(""0"")),ninf,0,""Add #41"");test(ninf.add(field.newDfp(""-1e131071"")),ninf,0,""Add #42"");test(ninf.add(field.newDfp(""1e131071"")),ninf,0,""Add #43"");test(field.newDfp(""0"").add(ninf),ninf,0,""Add #44"");test(field.newDfp(""-1e131071"").add(ninf),ninf,0,""Add #45"");test(field.newDfp(""1e131071"").add(ninf),ninf,0,""Add #46"");test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""5e131051"")),pinf,DfpField.FLAG_OVERFLOW,""Add #47"");test(field.newDfp(""9.9999999999999999999e131071"").add(field.newDfp(""4.9999999999999999999e131051"")),field.newDfp(""9.9999999999999999999e131071""),DfpField.FLAG_INEXACT,""Add #48"");test(nan.add(field.newDfp(""1"")),nan,0,""Add #49"");test(field.newDfp(""1"").add(nan),nan,0,""Add #50"");test(field.newDfp(""12345678123456781234"").add(field.newDfp(""0.12345678123456781234"")),field.newDfp(""12345678123456781234""),DfpField.FLAG_INEXACT,""Add #51"");test(field.newDfp(""12345678123456781234"").add(field.newDfp(""123.45678123456781234"")),field.newDfp(""12345678123456781357""),DfpField.FLAG_INEXACT,""Add #52"");test(field.newDfp(""123.45678123456781234"").add(field.newDfp(""12345678123456781234"")),field.newDfp(""12345678123456781357""),DfpField.FLAG_INEXACT,""Add #53"");test(field.newDfp(""12345678123456781234"").add(field.newDfp("".00001234567812345678"")),field.newDfp(""12345678123456781234""),DfpField.FLAG_INEXACT,""Add #54"");test(field.newDfp(""12345678123456781234"").add(field.newDfp("".00000000123456781234"")),field.newDfp(""12345678123456781234""),DfpField.FLAG_INEXACT,""Add #55"");test(field.newDfp(""-0"").add(field.newDfp(""-0"")),field.newDfp(""-0""),0,""Add #56"");test(field.newDfp(""0"").add(field.newDfp(""-0"")),field.newDfp(""0""),0,""Add #57"");test(field.newDfp(""-0"").add(field.newDfp(""0"")),field.newDfp(""0""),0,""Add #58"");test(field.newDfp(""0"").add(field.newDfp(""0"")),field.newDfp(""0""),0,""Add #59"");}"
"org.apache.commons.math3.dfp.DfpTest.testCompare",0,"@Test public void testCompare(){field.clearIEEEFlags();cmptst(field.newDfp(""0""),field.newDfp(""0""),""equal"",true,1);cmptst(field.newDfp(""0""),field.newDfp(""-0""),""equal"",true,2);cmptst(field.newDfp(""-0""),field.newDfp(""-0""),""equal"",true,3);cmptst(field.newDfp(""-0""),field.newDfp(""0""),""equal"",true,4);cmptst(field.newDfp(""0""),field.newDfp(""1""),""equal"",false,5);cmptst(field.newDfp(""1""),field.newDfp(""0""),""equal"",false,6);cmptst(field.newDfp(""-1""),field.newDfp(""0""),""equal"",false,7);cmptst(field.newDfp(""0""),field.newDfp(""-1""),""equal"",false,8);cmptst(field.newDfp(""0""),field.newDfp(""1e-131072""),""equal"",false,9);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0""),field.newDfp(""1e-131078""),""equal"",false,10);if (field.getIEEEFlags()!= DfpField.FLAG_UNDERFLOW)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());field.clearIEEEFlags();cmptst(field.newDfp(""0""),field.newDfp(""1e+131071""),""equal"",false,11);cmptst(field.newDfp(""0""),pinf,""equal"",false,12);cmptst(field.newDfp(""0""),ninf,""equal"",false,13);cmptst(field.newDfp(""-0""),pinf,""equal"",false,14);cmptst(field.newDfp(""-0""),ninf,""equal"",false,15);cmptst(pinf,field.newDfp(""0""),""equal"",false,16);cmptst(ninf,field.newDfp(""0""),""equal"",false,17);cmptst(pinf,field.newDfp(""-0""),""equal"",false,18);cmptst(ninf,field.newDfp(""-0""),""equal"",false,19);cmptst(ninf,pinf,""equal"",false,19.10);cmptst(pinf,ninf,""equal"",false,19.11);cmptst(pinf,pinf,""equal"",true,19.12);cmptst(ninf,ninf,""equal"",true,19.13);cmptst(field.newDfp(""1""),field.newDfp(""1""),""equal"",true,20);cmptst(field.newDfp(""1""),field.newDfp(""-1""),""equal"",false,21);cmptst(field.newDfp(""-1""),field.newDfp(""-1""),""equal"",true,22);cmptst(field.newDfp(""1""),field.newDfp(""1.0000000000000001""),""equal"",false,23);cmptst(field.newDfp(""1e20""),field.newDfp(""1.0000000000000001""),""equal"",false,24);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0.000001""),field.newDfp(""1e-6""),""equal"",true,25);cmptst(snan,snan,""equal"",false,27);cmptst(qnan,qnan,""equal"",false,28);cmptst(snan,qnan,""equal"",false,29);cmptst(qnan,snan,""equal"",false,30);cmptst(qnan,field.newDfp(""0""),""equal"",false,31);cmptst(snan,field.newDfp(""0""),""equal"",false,32);cmptst(field.newDfp(""0""),snan,""equal"",false,33);cmptst(field.newDfp(""0""),qnan,""equal"",false,34);cmptst(qnan,pinf,""equal"",false,35);cmptst(snan,pinf,""equal"",false,36);cmptst(pinf,snan,""equal"",false,37);cmptst(pinf,qnan,""equal"",false,38);cmptst(qnan,ninf,""equal"",false,39);cmptst(snan,ninf,""equal"",false,40);cmptst(ninf,snan,""equal"",false,41);cmptst(ninf,qnan,""equal"",false,42);cmptst(qnan,field.newDfp(""-1""),""equal"",false,43);cmptst(snan,field.newDfp(""-1""),""equal"",false,44);cmptst(field.newDfp(""-1""),snan,""equal"",false,45);cmptst(field.newDfp(""-1""),qnan,""equal"",false,46);cmptst(qnan,field.newDfp(""1""),""equal"",false,47);cmptst(snan,field.newDfp(""1""),""equal"",false,48);cmptst(field.newDfp(""1""),snan,""equal"",false,49);cmptst(field.newDfp(""1""),qnan,""equal"",false,50);cmptst(snan.negate(),snan,""equal"",false,51);cmptst(qnan.negate(),qnan,""equal"",false,52);cmptst(field.newDfp(""0""),field.newDfp(""0""),""unequal"",false,1);cmptst(field.newDfp(""0""),field.newDfp(""-0""),""unequal"",false,2);cmptst(field.newDfp(""-0""),field.newDfp(""-0""),""unequal"",false,3);cmptst(field.newDfp(""-0""),field.newDfp(""0""),""unequal"",false,4);cmptst(field.newDfp(""0""),field.newDfp(""1""),""unequal"",true,5);cmptst(field.newDfp(""1""),field.newDfp(""0""),""unequal"",true,6);cmptst(field.newDfp(""-1""),field.newDfp(""0""),""unequal"",true,7);cmptst(field.newDfp(""0""),field.newDfp(""-1""),""unequal"",true,8);cmptst(field.newDfp(""0""),field.newDfp(""1e-131072""),""unequal"",true,9);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0""),field.newDfp(""1e-131078""),""unequal"",true,10);if (field.getIEEEFlags()!= DfpField.FLAG_UNDERFLOW)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());field.clearIEEEFlags();cmptst(field.newDfp(""0""),field.newDfp(""1e+131071""),""unequal"",true,11);cmptst(field.newDfp(""0""),pinf,""unequal"",true,12);cmptst(field.newDfp(""0""),ninf,""unequal"",true,13);cmptst(field.newDfp(""-0""),pinf,""unequal"",true,14);cmptst(field.newDfp(""-0""),ninf,""unequal"",true,15);cmptst(pinf,field.newDfp(""0""),""unequal"",true,16);cmptst(ninf,field.newDfp(""0""),""unequal"",true,17);cmptst(pinf,field.newDfp(""-0""),""unequal"",true,18);cmptst(ninf,field.newDfp(""-0""),""unequal"",true,19);cmptst(ninf,pinf,""unequal"",true,19.10);cmptst(pinf,ninf,""unequal"",true,19.11);cmptst(pinf,pinf,""unequal"",false,19.12);cmptst(ninf,ninf,""unequal"",false,19.13);cmptst(field.newDfp(""1""),field.newDfp(""1""),""unequal"",false,20);cmptst(field.newDfp(""1""),field.newDfp(""-1""),""unequal"",true,21);cmptst(field.newDfp(""-1""),field.newDfp(""-1""),""unequal"",false,22);cmptst(field.newDfp(""1""),field.newDfp(""1.0000000000000001""),""unequal"",true,23);cmptst(field.newDfp(""1e20""),field.newDfp(""1.0000000000000001""),""unequal"",true,24);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0.000001""),field.newDfp(""1e-6""),""unequal"",false,25);cmptst(snan,snan,""unequal"",false,27);cmptst(qnan,qnan,""unequal"",false,28);cmptst(snan,qnan,""unequal"",false,29);cmptst(qnan,snan,""unequal"",false,30);cmptst(qnan,field.newDfp(""0""),""unequal"",false,31);cmptst(snan,field.newDfp(""0""),""unequal"",false,32);cmptst(field.newDfp(""0""),snan,""unequal"",false,33);cmptst(field.newDfp(""0""),qnan,""unequal"",false,34);cmptst(qnan,pinf,""unequal"",false,35);cmptst(snan,pinf,""unequal"",false,36);cmptst(pinf,snan,""unequal"",false,37);cmptst(pinf,qnan,""unequal"",false,38);cmptst(qnan,ninf,""unequal"",false,39);cmptst(snan,ninf,""unequal"",false,40);cmptst(ninf,snan,""unequal"",false,41);cmptst(ninf,qnan,""unequal"",false,42);cmptst(qnan,field.newDfp(""-1""),""unequal"",false,43);cmptst(snan,field.newDfp(""-1""),""unequal"",false,44);cmptst(field.newDfp(""-1""),snan,""unequal"",false,45);cmptst(field.newDfp(""-1""),qnan,""unequal"",false,46);cmptst(qnan,field.newDfp(""1""),""unequal"",false,47);cmptst(snan,field.newDfp(""1""),""unequal"",false,48);cmptst(field.newDfp(""1""),snan,""unequal"",false,49);cmptst(field.newDfp(""1""),qnan,""unequal"",false,50);cmptst(snan.negate(),snan,""unequal"",false,51);cmptst(qnan.negate(),qnan,""unequal"",false,52);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare unequal flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0""),field.newDfp(""0""),""lessThan"",false,1);cmptst(field.newDfp(""0""),field.newDfp(""-0""),""lessThan"",false,2);cmptst(field.newDfp(""-0""),field.newDfp(""-0""),""lessThan"",false,3);cmptst(field.newDfp(""-0""),field.newDfp(""0""),""lessThan"",false,4);cmptst(field.newDfp(""0""),field.newDfp(""1""),""lessThan"",true,5);cmptst(field.newDfp(""1""),field.newDfp(""0""),""lessThan"",false,6);cmptst(field.newDfp(""-1""),field.newDfp(""0""),""lessThan"",true,7);cmptst(field.newDfp(""0""),field.newDfp(""-1""),""lessThan"",false,8);cmptst(field.newDfp(""0""),field.newDfp(""1e-131072""),""lessThan"",true,9);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0""),field.newDfp(""1e-131078""),""lessThan"",true,10);if (field.getIEEEFlags()!= DfpField.FLAG_UNDERFLOW)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());field.clearIEEEFlags();cmptst(field.newDfp(""0""),field.newDfp(""1e+131071""),""lessThan"",true,11);cmptst(field.newDfp(""0""),pinf,""lessThan"",true,12);cmptst(field.newDfp(""0""),ninf,""lessThan"",false,13);cmptst(field.newDfp(""-0""),pinf,""lessThan"",true,14);cmptst(field.newDfp(""-0""),ninf,""lessThan"",false,15);cmptst(pinf,field.newDfp(""0""),""lessThan"",false,16);cmptst(ninf,field.newDfp(""0""),""lessThan"",true,17);cmptst(pinf,field.newDfp(""-0""),""lessThan"",false,18);cmptst(ninf,field.newDfp(""-0""),""lessThan"",true,19);cmptst(ninf,pinf,""lessThan"",true,19.10);cmptst(pinf,ninf,""lessThan"",false,19.11);cmptst(pinf,pinf,""lessThan"",false,19.12);cmptst(ninf,ninf,""lessThan"",false,19.13);cmptst(field.newDfp(""1""),field.newDfp(""1""),""lessThan"",false,20);cmptst(field.newDfp(""1""),field.newDfp(""-1""),""lessThan"",false,21);cmptst(field.newDfp(""-1""),field.newDfp(""-1""),""lessThan"",false,22);cmptst(field.newDfp(""1""),field.newDfp(""1.0000000000000001""),""lessThan"",true,23);cmptst(field.newDfp(""1e20""),field.newDfp(""1.0000000000000001""),""lessThan"",false,24);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0.000001""),field.newDfp(""1e-6""),""lessThan"",false,25);cmptst(snan,snan,""lessThan"",false,27);cmptst(qnan,qnan,""lessThan"",false,28);cmptst(snan,qnan,""lessThan"",false,29);cmptst(qnan,snan,""lessThan"",false,30);cmptst(qnan,field.newDfp(""0""),""lessThan"",false,31);cmptst(snan,field.newDfp(""0""),""lessThan"",false,32);cmptst(field.newDfp(""0""),snan,""lessThan"",false,33);cmptst(field.newDfp(""0""),qnan,""lessThan"",false,34);cmptst(qnan,pinf,""lessThan"",false,35);cmptst(snan,pinf,""lessThan"",false,36);cmptst(pinf,snan,""lessThan"",false,37);cmptst(pinf,qnan,""lessThan"",false,38);cmptst(qnan,ninf,""lessThan"",false,39);cmptst(snan,ninf,""lessThan"",false,40);cmptst(ninf,snan,""lessThan"",false,41);cmptst(ninf,qnan,""lessThan"",false,42);cmptst(qnan,field.newDfp(""-1""),""lessThan"",false,43);cmptst(snan,field.newDfp(""-1""),""lessThan"",false,44);cmptst(field.newDfp(""-1""),snan,""lessThan"",false,45);cmptst(field.newDfp(""-1""),qnan,""lessThan"",false,46);cmptst(qnan,field.newDfp(""1""),""lessThan"",false,47);cmptst(snan,field.newDfp(""1""),""lessThan"",false,48);cmptst(field.newDfp(""1""),snan,""lessThan"",false,49);cmptst(field.newDfp(""1""),qnan,""lessThan"",false,50);cmptst(snan.negate(),snan,""lessThan"",false,51);cmptst(qnan.negate(),qnan,""lessThan"",false,52);if (field.getIEEEFlags()!= DfpField.FLAG_INVALID)Assert.fail(""assersion failed.  compare lessThan flags = "" + field.getIEEEFlags());field.clearIEEEFlags();cmptst(field.newDfp(""0""),field.newDfp(""0""),""greaterThan"",false,1);cmptst(field.newDfp(""0""),field.newDfp(""-0""),""greaterThan"",false,2);cmptst(field.newDfp(""-0""),field.newDfp(""-0""),""greaterThan"",false,3);cmptst(field.newDfp(""-0""),field.newDfp(""0""),""greaterThan"",false,4);cmptst(field.newDfp(""0""),field.newDfp(""1""),""greaterThan"",false,5);cmptst(field.newDfp(""1""),field.newDfp(""0""),""greaterThan"",true,6);cmptst(field.newDfp(""-1""),field.newDfp(""0""),""greaterThan"",false,7);cmptst(field.newDfp(""0""),field.newDfp(""-1""),""greaterThan"",true,8);cmptst(field.newDfp(""0""),field.newDfp(""1e-131072""),""greaterThan"",false,9);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0""),field.newDfp(""1e-131078""),""greaterThan"",false,10);if (field.getIEEEFlags()!= DfpField.FLAG_UNDERFLOW)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());field.clearIEEEFlags();cmptst(field.newDfp(""0""),field.newDfp(""1e+131071""),""greaterThan"",false,11);cmptst(field.newDfp(""0""),pinf,""greaterThan"",false,12);cmptst(field.newDfp(""0""),ninf,""greaterThan"",true,13);cmptst(field.newDfp(""-0""),pinf,""greaterThan"",false,14);cmptst(field.newDfp(""-0""),ninf,""greaterThan"",true,15);cmptst(pinf,field.newDfp(""0""),""greaterThan"",true,16);cmptst(ninf,field.newDfp(""0""),""greaterThan"",false,17);cmptst(pinf,field.newDfp(""-0""),""greaterThan"",true,18);cmptst(ninf,field.newDfp(""-0""),""greaterThan"",false,19);cmptst(ninf,pinf,""greaterThan"",false,19.10);cmptst(pinf,ninf,""greaterThan"",true,19.11);cmptst(pinf,pinf,""greaterThan"",false,19.12);cmptst(ninf,ninf,""greaterThan"",false,19.13);cmptst(field.newDfp(""1""),field.newDfp(""1""),""greaterThan"",false,20);cmptst(field.newDfp(""1""),field.newDfp(""-1""),""greaterThan"",true,21);cmptst(field.newDfp(""-1""),field.newDfp(""-1""),""greaterThan"",false,22);cmptst(field.newDfp(""1""),field.newDfp(""1.0000000000000001""),""greaterThan"",false,23);cmptst(field.newDfp(""1e20""),field.newDfp(""1.0000000000000001""),""greaterThan"",true,24);if (field.getIEEEFlags()!= 0)Assert.fail(""assersion failed.  compare flags = "" + field.getIEEEFlags());cmptst(field.newDfp(""0.000001""),field.newDfp(""1e-6""),""greaterThan"",false,25);cmptst(snan,snan,""greaterThan"",false,27);cmptst(qnan,qnan,""greaterThan"",false,28);cmptst(snan,qnan,""greaterThan"",false,29);cmptst(qnan,snan,""greaterThan"",false,30);cmptst(qnan,field.newDfp(""0""),""greaterThan"",false,31);cmptst(snan,field.newDfp(""0""),""greaterThan"",false,32);cmptst(field.newDfp(""0""),snan,""greaterThan"",false,33);cmptst(field.newDfp(""0""),qnan,""greaterThan"",false,34);cmptst(qnan,pinf,""greaterThan"",false,35);cmptst(snan,pinf,""greaterThan"",false,36);cmptst(pinf,snan,""greaterThan"",false,37);cmptst(pinf,qnan,""greaterThan"",false,38);cmptst(qnan,ninf,""greaterThan"",false,39);cmptst(snan,ninf,""greaterThan"",false,40);cmptst(ninf,snan,""greaterThan"",false,41);cmptst(ninf,qnan,""greaterThan"",false,42);cmptst(qnan,field.newDfp(""-1""),""greaterThan"",false,43);cmptst(snan,field.newDfp(""-1""),""greaterThan"",false,44);cmptst(field.newDfp(""-1""),snan,""greaterThan"",false,45);cmptst(field.newDfp(""-1""),qnan,""greaterThan"",false,46);cmptst(qnan,field.newDfp(""1""),""greaterThan"",false,47);cmptst(snan,field.newDfp(""1""),""greaterThan"",false,48);cmptst(field.newDfp(""1""),snan,""greaterThan"",false,49);cmptst(field.newDfp(""1""),qnan,""greaterThan"",false,50);cmptst(snan.negate(),snan,""greaterThan"",false,51);cmptst(qnan.negate(),qnan,""greaterThan"",false,52);if (field.getIEEEFlags()!= DfpField.FLAG_INVALID)Assert.fail(""assersion failed.  compare greaterThan flags = "" + field.getIEEEFlags());field.clearIEEEFlags();}"
"org.apache.commons.math3.dfp.DfpTest.testMultiply",0,"@Test public void testMultiply(){test(field.newDfp(""1"").multiply(field.newDfp(""1"")),field.newDfp(""1""),0,""Multiply #1"");test(field.newDfp(""1"").multiply(1),field.newDfp(""1""),0,""Multiply #2"");test(field.newDfp(""-1"").multiply(field.newDfp(""1"")),field.newDfp(""-1""),0,""Multiply #3"");test(field.newDfp(""-1"").multiply(1),field.newDfp(""-1""),0,""Multiply #4"");test(field.newDfp(""2"").multiply(field.newDfp(""3"")),field.newDfp(""6""),0,""Multiply #5"");test(field.newDfp(""2"").multiply(3),field.newDfp(""6""),0,""Multiply #6"");test(field.newDfp(""-2"").multiply(field.newDfp(""3"")),field.newDfp(""-6""),0,""Multiply #7"");test(field.newDfp(""-2"").multiply(3),field.newDfp(""-6""),0,""Multiply #8"");test(field.newDfp(""2"").multiply(field.newDfp(""-3"")),field.newDfp(""-6""),0,""Multiply #9"");test(field.newDfp(""-2"").multiply(field.newDfp(""-3"")),field.newDfp(""6""),0,""Multiply #10"");test(field.newDfp(""-2"").multiply(field.newDfp(""0"")),field.newDfp(""-0""),0,""Multiply #11"");test(field.newDfp(""-2"").multiply(0),field.newDfp(""-0""),0,""Multiply #12"");test(field.newDfp(""2"").multiply(field.newDfp(""0"")),field.newDfp(""0""),0,""Multiply #13"");test(field.newDfp(""2"").multiply(0),field.newDfp(""0""),0,""Multiply #14"");test(field.newDfp(""2"").multiply(pinf),pinf,0,""Multiply #15"");test(field.newDfp(""2"").multiply(ninf),ninf,0,""Multiply #16"");test(field.newDfp(""-2"").multiply(pinf),ninf,0,""Multiply #17"");test(field.newDfp(""-2"").multiply(ninf),pinf,0,""Multiply #18"");test(ninf.multiply(field.newDfp(""-2"")),pinf,0,""Multiply #18.1"");test(field.newDfp(""5e131071"").multiply(2),pinf,DfpField.FLAG_OVERFLOW,""Multiply #19"");test(field.newDfp(""5e131071"").multiply(field.newDfp(""1.999999999999999"")),field.newDfp(""9.9999999999999950000e131071""),0,""Multiply #20"");test(field.newDfp(""-5e131071"").multiply(2),ninf,DfpField.FLAG_OVERFLOW,""Multiply #22"");test(field.newDfp(""-5e131071"").multiply(field.newDfp(""1.999999999999999"")),field.newDfp(""-9.9999999999999950000e131071""),0,""Multiply #23"");test(field.newDfp(""1e-65539"").multiply(field.newDfp(""1e-65539"")),field.newDfp(""1e-131078""),DfpField.FLAG_UNDERFLOW,""Multiply #24"");test(field.newDfp(""1"").multiply(nan),nan,0,""Multiply #25"");test(nan.multiply(field.newDfp(""1"")),nan,0,""Multiply #26"");test(nan.multiply(pinf),nan,0,""Multiply #27"");test(pinf.multiply(nan),nan,0,""Multiply #27"");test(pinf.multiply(field.newDfp(""0"")),nan,DfpField.FLAG_INVALID,""Multiply #28"");test(field.newDfp(""0"").multiply(pinf),nan,DfpField.FLAG_INVALID,""Multiply #29"");test(pinf.multiply(pinf),pinf,0,""Multiply #30"");test(ninf.multiply(pinf),ninf,0,""Multiply #31"");test(pinf.multiply(ninf),ninf,0,""Multiply #32"");test(ninf.multiply(ninf),pinf,0,""Multiply #33"");test(pinf.multiply(1),pinf,0,""Multiply #34"");test(pinf.multiply(0),nan,DfpField.FLAG_INVALID,""Multiply #35"");test(nan.multiply(1),nan,0,""Multiply #36"");test(field.newDfp(""1"").multiply(10000),field.newDfp(""10000""),0,""Multiply #37"");test(field.newDfp(""2"").multiply(1000000),field.newDfp(""2000000""),0,""Multiply #38"");test(field.newDfp(""1"").multiply(-1),field.newDfp(""-1""),0,""Multiply #39"");}"
"org.apache.commons.math3.dfp.DfpTest.testDivide",0,"@Test public void testDivide(){test(field.newDfp(""1"").divide(nan),nan,0,""Divide #1"");test(nan.divide(field.newDfp(""1"")),nan,0,""Divide #2"");test(pinf.divide(field.newDfp(""1"")),pinf,0,""Divide #3"");test(pinf.divide(field.newDfp(""-1"")),ninf,0,""Divide #4"");test(pinf.divide(pinf),nan,DfpField.FLAG_INVALID,""Divide #5"");test(ninf.divide(pinf),nan,DfpField.FLAG_INVALID,""Divide #6"");test(pinf.divide(ninf),nan,DfpField.FLAG_INVALID,""Divide #7"");test(ninf.divide(ninf),nan,DfpField.FLAG_INVALID,""Divide #8"");test(field.newDfp(""0"").divide(field.newDfp(""0"")),nan,DfpField.FLAG_DIV_ZERO,""Divide #9"");test(field.newDfp(""1"").divide(field.newDfp(""0"")),pinf,DfpField.FLAG_DIV_ZERO,""Divide #10"");test(field.newDfp(""1"").divide(field.newDfp(""-0"")),ninf,DfpField.FLAG_DIV_ZERO,""Divide #11"");test(field.newDfp(""-1"").divide(field.newDfp(""0"")),ninf,DfpField.FLAG_DIV_ZERO,""Divide #12"");test(field.newDfp(""-1"").divide(field.newDfp(""-0"")),pinf,DfpField.FLAG_DIV_ZERO,""Divide #13"");test(field.newDfp(""1"").divide(field.newDfp(""3"")),field.newDfp(""0.33333333333333333333""),DfpField.FLAG_INEXACT,""Divide #14"");test(field.newDfp(""1"").divide(field.newDfp(""6"")),field.newDfp(""0.16666666666666666667""),DfpField.FLAG_INEXACT,""Divide #15"");test(field.newDfp(""10"").divide(field.newDfp(""6"")),field.newDfp(""1.6666666666666667""),DfpField.FLAG_INEXACT,""Divide #16"");test(field.newDfp(""100"").divide(field.newDfp(""6"")),field.newDfp(""16.6666666666666667""),DfpField.FLAG_INEXACT,""Divide #17"");test(field.newDfp(""1000"").divide(field.newDfp(""6"")),field.newDfp(""166.6666666666666667""),DfpField.FLAG_INEXACT,""Divide #18"");test(field.newDfp(""10000"").divide(field.newDfp(""6"")),field.newDfp(""1666.6666666666666667""),DfpField.FLAG_INEXACT,""Divide #19"");test(field.newDfp(""1"").divide(field.newDfp(""1"")),field.newDfp(""1""),0,""Divide #20"");test(field.newDfp(""1"").divide(field.newDfp(""-1"")),field.newDfp(""-1""),0,""Divide #21"");test(field.newDfp(""-1"").divide(field.newDfp(""1"")),field.newDfp(""-1""),0,""Divide #22"");test(field.newDfp(""-1"").divide(field.newDfp(""-1"")),field.newDfp(""1""),0,""Divide #23"");test(field.newDfp(""1e-65539"").divide(field.newDfp(""1e65539"")),field.newDfp(""1e-131078""),DfpField.FLAG_UNDERFLOW,""Divide #24"");test(field.newDfp(""1e65539"").divide(field.newDfp(""1e-65539"")),pinf,DfpField.FLAG_OVERFLOW,""Divide #24"");test(field.newDfp(""2"").divide(field.newDfp(""1.5"")),field.newDfp(""1.3333333333333333""),DfpField.FLAG_INEXACT,""Divide #25"");test(field.newDfp(""2"").divide(pinf),field.newDfp(""0""),0,""Divide #26"");test(field.newDfp(""2"").divide(ninf),field.newDfp(""-0""),0,""Divide #27"");test(field.newDfp(""0"").divide(field.newDfp(""1"")),field.newDfp(""0""),0,""Divide #28"");}"
"org.apache.commons.math3.dfp.DfpTest.testReciprocal",0,"@Test public void testReciprocal(){test(nan.reciprocal(),nan,0,""Reciprocal #1"");test(field.newDfp(""0"").reciprocal(),pinf,DfpField.FLAG_DIV_ZERO,""Reciprocal #2"");test(field.newDfp(""-0"").reciprocal(),ninf,DfpField.FLAG_DIV_ZERO,""Reciprocal #3"");test(field.newDfp(""3"").reciprocal(),field.newDfp(""0.33333333333333333333""),DfpField.FLAG_INEXACT,""Reciprocal #4"");test(field.newDfp(""6"").reciprocal(),field.newDfp(""0.16666666666666666667""),DfpField.FLAG_INEXACT,""Reciprocal #5"");test(field.newDfp(""1"").reciprocal(),field.newDfp(""1""),0,""Reciprocal #6"");test(field.newDfp(""-1"").reciprocal(),field.newDfp(""-1""),0,""Reciprocal #7"");test(pinf.reciprocal(),field.newDfp(""0""),0,""Reciprocal #8"");test(ninf.reciprocal(),field.newDfp(""-0""),0,""Reciprocal #9"");}"
"org.apache.commons.math3.dfp.DfpTest.testDivideInt",0,"@Test public void testDivideInt(){test(nan.divide(1),nan,0,""DivideInt #1"");test(pinf.divide(1),pinf,0,""DivideInt #2"");test(field.newDfp(""0"").divide(0),nan,DfpField.FLAG_DIV_ZERO,""DivideInt #3"");test(field.newDfp(""1"").divide(0),pinf,DfpField.FLAG_DIV_ZERO,""DivideInt #4"");test(field.newDfp(""-1"").divide(0),ninf,DfpField.FLAG_DIV_ZERO,""DivideInt #5"");test(field.newDfp(""1"").divide(3),field.newDfp(""0.33333333333333333333""),DfpField.FLAG_INEXACT,""DivideInt #6"");test(field.newDfp(""1"").divide(6),field.newDfp(""0.16666666666666666667""),DfpField.FLAG_INEXACT,""DivideInt #7"");test(field.newDfp(""10"").divide(6),field.newDfp(""1.6666666666666667""),DfpField.FLAG_INEXACT,""DivideInt #8"");test(field.newDfp(""100"").divide(6),field.newDfp(""16.6666666666666667""),DfpField.FLAG_INEXACT,""DivideInt #9"");test(field.newDfp(""1000"").divide(6),field.newDfp(""166.6666666666666667""),DfpField.FLAG_INEXACT,""DivideInt #10"");test(field.newDfp(""10000"").divide(6),field.newDfp(""1666.6666666666666667""),DfpField.FLAG_INEXACT,""DivideInt #20"");test(field.newDfp(""1"").divide(1),field.newDfp(""1""),0,""DivideInt #21"");test(field.newDfp(""1e-131077"").divide(10),field.newDfp(""1e-131078""),DfpField.FLAG_UNDERFLOW,""DivideInt #22"");test(field.newDfp(""0"").divide(1),field.newDfp(""0""),0,""DivideInt #23"");test(field.newDfp(""1"").divide(10000),nan,DfpField.FLAG_INVALID,""DivideInt #24"");test(field.newDfp(""1"").divide(-1),nan,DfpField.FLAG_INVALID,""DivideInt #25"");}"
"org.apache.commons.math3.dfp.DfpTest.testNextAfter",0,"@Test public void testNextAfter(){test(field.newDfp(""1"").nextAfter(pinf),field.newDfp(""1.0000000000000001""),0,""NextAfter #1"");test(field.newDfp(""1.0000000000000001"").nextAfter(ninf),field.newDfp(""1""),0,""NextAfter #1.5"");test(field.newDfp(""1"").nextAfter(ninf),field.newDfp(""0.99999999999999999999""),0,""NextAfter #2"");test(field.newDfp(""0.99999999999999999999"").nextAfter(field.newDfp(""2"")),field.newDfp(""1""),0,""NextAfter #3"");test(field.newDfp(""-1"").nextAfter(ninf),field.newDfp(""-1.0000000000000001""),0,""NextAfter #4"");test(field.newDfp(""-1"").nextAfter(pinf),field.newDfp(""-0.99999999999999999999""),0,""NextAfter #5"");test(field.newDfp(""-0.99999999999999999999"").nextAfter(field.newDfp(""-2"")),field.newDfp(""-1""),0,""NextAfter #6"");test(field.newDfp(""2"").nextAfter(field.newDfp(""2"")),field.newDfp(""2""),0,""NextAfter #7"");test(field.newDfp(""0"").nextAfter(field.newDfp(""0"")),field.newDfp(""0""),0,""NextAfter #8"");test(field.newDfp(""-2"").nextAfter(field.newDfp(""-2"")),field.newDfp(""-2""),0,""NextAfter #9"");test(field.newDfp(""0"").nextAfter(field.newDfp(""1"")),field.newDfp(""1e-131092""),DfpField.FLAG_UNDERFLOW,""NextAfter #10"");test(field.newDfp(""0"").nextAfter(field.newDfp(""-1"")),field.newDfp(""-1e-131092""),DfpField.FLAG_UNDERFLOW,""NextAfter #11"");test(field.newDfp(""-1e-131092"").nextAfter(pinf),field.newDfp(""-0""),DfpField.FLAG_UNDERFLOW | DfpField.FLAG_INEXACT,""Next After #12"");test(field.newDfp(""1e-131092"").nextAfter(ninf),field.newDfp(""0""),DfpField.FLAG_UNDERFLOW | DfpField.FLAG_INEXACT,""Next After #13"");test(field.newDfp(""9.9999999999999999999e131078"").nextAfter(pinf),pinf,DfpField.FLAG_OVERFLOW | DfpField.FLAG_INEXACT,""Next After #14"");}"
"org.apache.commons.math3.dfp.DfpTest.testToString",0,"@Test public void testToString(){Assert.assertEquals(""toString #1"",""Infinity"",pinf.toString());Assert.assertEquals(""toString #2"",""-Infinity"",ninf.toString());Assert.assertEquals(""toString #3"",""NaN"",nan.toString());Assert.assertEquals(""toString #4"",""NaN"",field.newDfp((byte)1,Dfp.QNAN).toString());Assert.assertEquals(""toString #5"",""NaN"",field.newDfp((byte)1,Dfp.SNAN).toString());Assert.assertEquals(""toString #6"",""1.2300000000000000e100"",field.newDfp(""1.23e100"").toString());Assert.assertEquals(""toString #7"",""-1.2300000000000000e100"",field.newDfp(""-1.23e100"").toString());Assert.assertEquals(""toString #8"",""12345678.1234"",field.newDfp(""12345678.1234"").toString());Assert.assertEquals(""toString #9"",""0.00001234"",field.newDfp(""0.00001234"").toString());}"
"org.apache.commons.math3.dfp.DfpTest.testRound",0,"@Test public void testRound(){field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.9"")),field.newDfp(""12345678901234567890""),DfpField.FLAG_INEXACT,""Round #1"");test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.99999999"")),field.newDfp(""12345678901234567890""),DfpField.FLAG_INEXACT,""Round #2"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.99999999"")),field.newDfp(""-12345678901234567890""),DfpField.FLAG_INEXACT,""Round #3"");field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.1"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #4"");test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.0001"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #5"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.1"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #6"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.0001"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #7"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.4999"")),field.newDfp(""12345678901234567890""),DfpField.FLAG_INEXACT,""Round #8"");test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #9"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.4999"")),field.newDfp(""-12345678901234567890""),DfpField.FLAG_INEXACT,""Round #10"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #11"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5001"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #12"");test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),field.newDfp(""12345678901234567890""),DfpField.FLAG_INEXACT,""Round #13"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5001"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #14"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),field.newDfp(""-12345678901234567890""),DfpField.FLAG_INEXACT,""Round #15"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.5000"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #16"");test(field.newDfp(""12345678901234567891"").add(field.newDfp(""0.5000"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #17"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.5000"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #18"");test(field.newDfp(""-12345678901234567891"").add(field.newDfp(""-0.5000"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #19"");field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.0001"")),field.newDfp(""12345678901234567891""),DfpField.FLAG_INEXACT,""Round #20"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.9999"")),field.newDfp(""-12345678901234567890""),DfpField.FLAG_INEXACT,""Round #21"");field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);test(field.newDfp(""12345678901234567890"").add(field.newDfp(""0.9999"")),field.newDfp(""12345678901234567890""),DfpField.FLAG_INEXACT,""Round #22"");test(field.newDfp(""-12345678901234567890"").add(field.newDfp(""-0.0001"")),field.newDfp(""-12345678901234567891""),DfpField.FLAG_INEXACT,""Round #23"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);}"
"org.apache.commons.math3.dfp.DfpTest.testCeil",0,"@Test public void testCeil(){test(field.newDfp(""1234.0000000000000001"").ceil(),field.newDfp(""1235""),DfpField.FLAG_INEXACT,""Ceil #1"");}"
"org.apache.commons.math3.dfp.DfpTest.testFloor",0,"@Test public void testFloor(){test(field.newDfp(""1234.9999999999999999"").floor(),field.newDfp(""1234""),DfpField.FLAG_INEXACT,""Floor #1"");}"
"org.apache.commons.math3.dfp.DfpTest.testRint",0,"@Test public void testRint(){test(field.newDfp(""1234.50000000001"").rint(),field.newDfp(""1235""),DfpField.FLAG_INEXACT,""Rint #1"");test(field.newDfp(""1234.5000"").rint(),field.newDfp(""1234""),DfpField.FLAG_INEXACT,""Rint #2"");test(field.newDfp(""1235.5000"").rint(),field.newDfp(""1236""),DfpField.FLAG_INEXACT,""Rint #3"");}"
"org.apache.commons.math3.dfp.DfpTest.testCopySign",0,"@Test public void testCopySign(){test(Dfp.copysign(field.newDfp(""1234.""),field.newDfp(""-1"")),field.newDfp(""-1234""),0,""CopySign #1"");test(Dfp.copysign(field.newDfp(""-1234.""),field.newDfp(""-1"")),field.newDfp(""-1234""),0,""CopySign #2"");test(Dfp.copysign(field.newDfp(""-1234.""),field.newDfp(""1"")),field.newDfp(""1234""),0,""CopySign #3"");test(Dfp.copysign(field.newDfp(""1234.""),field.newDfp(""1"")),field.newDfp(""1234""),0,""CopySign #4"");}"
"org.apache.commons.math3.dfp.DfpTest.testIntValue",0,"@Test public void testIntValue(){Assert.assertEquals(""intValue #1"",1234,field.newDfp(""1234"").intValue());Assert.assertEquals(""intValue #2"",-1234,field.newDfp(""-1234"").intValue());Assert.assertEquals(""intValue #3"",1234,field.newDfp(""1234.5"").intValue());Assert.assertEquals(""intValue #4"",1235,field.newDfp(""1234.500001"").intValue());Assert.assertEquals(""intValue #5"",2147483647,field.newDfp(""1e1000"").intValue());Assert.assertEquals(""intValue #6"",-2147483648,field.newDfp(""-1e1000"").intValue());}"
"org.apache.commons.math3.dfp.DfpTest.testLog10K",0,"@Test public void testLog10K(){Assert.assertEquals(""log10K #1"",1,field.newDfp(""123456"").log10K());Assert.assertEquals(""log10K #2"",2,field.newDfp(""123456789"").log10K());Assert.assertEquals(""log10K #3"",0,field.newDfp(""2"").log10K());Assert.assertEquals(""log10K #3"",0,field.newDfp(""1"").log10K());Assert.assertEquals(""log10K #4"",-1,field.newDfp(""0.1"").log10K());}"
"org.apache.commons.math3.dfp.DfpTest.testPower10K",0,"@Test public void testPower10K(){Dfp d=field.newDfp();test(d.power10K(0),field.newDfp(""1""),0,""Power10 #1"");test(d.power10K(1),field.newDfp(""10000""),0,""Power10 #2"");test(d.power10K(2),field.newDfp(""100000000""),0,""Power10 #3"");test(d.power10K(-1),field.newDfp(""0.0001""),0,""Power10 #4"");test(d.power10K(-2),field.newDfp(""0.00000001""),0,""Power10 #5"");test(d.power10K(-3),field.newDfp(""0.000000000001""),0,""Power10 #6"");}"
"org.apache.commons.math3.dfp.DfpTest.testLog10",0,"@Test public void testLog10(){Assert.assertEquals(""log10 #1"",1,field.newDfp(""12"").intLog10());Assert.assertEquals(""log10 #2"",2,field.newDfp(""123"").intLog10());Assert.assertEquals(""log10 #3"",3,field.newDfp(""1234"").intLog10());Assert.assertEquals(""log10 #4"",4,field.newDfp(""12345"").intLog10());Assert.assertEquals(""log10 #5"",5,field.newDfp(""123456"").intLog10());Assert.assertEquals(""log10 #6"",6,field.newDfp(""1234567"").intLog10());Assert.assertEquals(""log10 #6"",7,field.newDfp(""12345678"").intLog10());Assert.assertEquals(""log10 #7"",8,field.newDfp(""123456789"").intLog10());Assert.assertEquals(""log10 #8"",9,field.newDfp(""1234567890"").intLog10());Assert.assertEquals(""log10 #9"",10,field.newDfp(""12345678901"").intLog10());Assert.assertEquals(""log10 #10"",11,field.newDfp(""123456789012"").intLog10());Assert.assertEquals(""log10 #11"",12,field.newDfp(""1234567890123"").intLog10());Assert.assertEquals(""log10 #12"",0,field.newDfp(""2"").intLog10());Assert.assertEquals(""log10 #13"",0,field.newDfp(""1"").intLog10());Assert.assertEquals(""log10 #14"",-1,field.newDfp(""0.12"").intLog10());Assert.assertEquals(""log10 #15"",-2,field.newDfp(""0.012"").intLog10());}"
"org.apache.commons.math3.dfp.DfpTest.testPower10",0,"@Test public void testPower10(){Dfp d=field.newDfp();test(d.power10(0),field.newDfp(""1""),0,""Power10 #1"");test(d.power10(1),field.newDfp(""10""),0,""Power10 #2"");test(d.power10(2),field.newDfp(""100""),0,""Power10 #3"");test(d.power10(3),field.newDfp(""1000""),0,""Power10 #4"");test(d.power10(4),field.newDfp(""10000""),0,""Power10 #5"");test(d.power10(5),field.newDfp(""100000""),0,""Power10 #6"");test(d.power10(6),field.newDfp(""1000000""),0,""Power10 #7"");test(d.power10(7),field.newDfp(""10000000""),0,""Power10 #8"");test(d.power10(8),field.newDfp(""100000000""),0,""Power10 #9"");test(d.power10(9),field.newDfp(""1000000000""),0,""Power10 #10"");test(d.power10(-1),field.newDfp("".1""),0,""Power10 #11"");test(d.power10(-2),field.newDfp("".01""),0,""Power10 #12"");test(d.power10(-3),field.newDfp("".001""),0,""Power10 #13"");test(d.power10(-4),field.newDfp("".0001""),0,""Power10 #14"");test(d.power10(-5),field.newDfp("".00001""),0,""Power10 #15"");test(d.power10(-6),field.newDfp("".000001""),0,""Power10 #16"");test(d.power10(-7),field.newDfp("".0000001""),0,""Power10 #17"");test(d.power10(-8),field.newDfp("".00000001""),0,""Power10 #18"");test(d.power10(-9),field.newDfp("".000000001""),0,""Power10 #19"");test(d.power10(-10),field.newDfp("".0000000001""),0,""Power10 #20"");}"
"org.apache.commons.math3.dfp.DfpTest.testRemainder",0,"@Test public void testRemainder(){test(field.newDfp(""10"").remainder(field.newDfp(""3"")),field.newDfp(""1""),DfpField.FLAG_INEXACT,""Remainder #1"");test(field.newDfp(""9"").remainder(field.newDfp(""3"")),field.newDfp(""0""),0,""Remainder #2"");test(field.newDfp(""-9"").remainder(field.newDfp(""3"")),field.newDfp(""-0""),0,""Remainder #3"");}"
"org.apache.commons.math3.dfp.DfpTest.testSqrt",0,"@Test public void testSqrt(){test(field.newDfp(""0"").sqrt(),field.newDfp(""0""),0,""Sqrt #1"");test(field.newDfp(""-0"").sqrt(),field.newDfp(""-0""),0,""Sqrt #2"");test(field.newDfp(""1"").sqrt(),field.newDfp(""1""),0,""Sqrt #3"");test(field.newDfp(""2"").sqrt(),field.newDfp(""1.4142135623730950""),DfpField.FLAG_INEXACT,""Sqrt #4"");test(field.newDfp(""3"").sqrt(),field.newDfp(""1.7320508075688773""),DfpField.FLAG_INEXACT,""Sqrt #5"");test(field.newDfp(""5"").sqrt(),field.newDfp(""2.2360679774997897""),DfpField.FLAG_INEXACT,""Sqrt #6"");test(field.newDfp(""500"").sqrt(),field.newDfp(""22.3606797749978970""),DfpField.FLAG_INEXACT,""Sqrt #6.2"");test(field.newDfp(""50000"").sqrt(),field.newDfp(""223.6067977499789696""),DfpField.FLAG_INEXACT,""Sqrt #6.3"");test(field.newDfp(""-1"").sqrt(),nan,DfpField.FLAG_INVALID,""Sqrt #7"");test(pinf.sqrt(),pinf,0,""Sqrt #8"");test(field.newDfp((byte)1,Dfp.QNAN).sqrt(),nan,0,""Sqrt #9"");test(field.newDfp((byte)1,Dfp.SNAN).sqrt(),nan,DfpField.FLAG_INVALID,""Sqrt #9"");}"
"org.apache.commons.math3.dfp.DfpTest.testIssue567",0,"@Test public void testIssue567(){DfpField field=new DfpField(100);Assert.assertEquals(0.0,field.getZero().toDouble(),Precision.SAFE_MIN);Assert.assertEquals(0.0,field.newDfp(0.0).toDouble(),Precision.SAFE_MIN);Assert.assertEquals(-1,FastMath.copySign(1,field.newDfp(-0.0).toDouble()),Precision.EPSILON);Assert.assertEquals(+1,FastMath.copySign(1,field.newDfp(+0.0).toDouble()),Precision.EPSILON);}"
"org.apache.commons.math3.dfp.DfpTest.testIsZero",0,"@Test public void testIsZero(){Assert.assertTrue(field.getZero().isZero());Assert.assertTrue(field.getZero().negate().isZero());Assert.assertTrue(field.newDfp(+0.0).isZero());Assert.assertTrue(field.newDfp(-0.0).isZero());Assert.assertFalse(field.newDfp(1.0e-90).isZero());Assert.assertFalse(nan.isZero());Assert.assertFalse(nan.negate().isZero());Assert.assertFalse(pinf.isZero());Assert.assertFalse(pinf.negate().isZero());Assert.assertFalse(ninf.isZero());Assert.assertFalse(ninf.negate().isZero());}"
"org.apache.commons.math3.dfp.DfpTest.testSignPredicates",0,"@Test public void testSignPredicates(){Assert.assertTrue(field.getZero().negativeOrNull());Assert.assertTrue(field.getZero().positiveOrNull());Assert.assertFalse(field.getZero().strictlyNegative());Assert.assertFalse(field.getZero().strictlyPositive());Assert.assertTrue(field.getZero().negate().negativeOrNull());Assert.assertTrue(field.getZero().negate().positiveOrNull());Assert.assertFalse(field.getZero().negate().strictlyNegative());Assert.assertFalse(field.getZero().negate().strictlyPositive());Assert.assertFalse(field.getOne().negativeOrNull());Assert.assertTrue(field.getOne().positiveOrNull());Assert.assertFalse(field.getOne().strictlyNegative());Assert.assertTrue(field.getOne().strictlyPositive());Assert.assertTrue(field.getOne().negate().negativeOrNull());Assert.assertFalse(field.getOne().negate().positiveOrNull());Assert.assertTrue(field.getOne().negate().strictlyNegative());Assert.assertFalse(field.getOne().negate().strictlyPositive());Assert.assertFalse(nan.negativeOrNull());Assert.assertFalse(nan.positiveOrNull());Assert.assertFalse(nan.strictlyNegative());Assert.assertFalse(nan.strictlyPositive());Assert.assertFalse(nan.negate().negativeOrNull());Assert.assertFalse(nan.negate().positiveOrNull());Assert.assertFalse(nan.negate().strictlyNegative());Assert.assertFalse(nan.negate().strictlyPositive());Assert.assertFalse(pinf.negativeOrNull());Assert.assertTrue(pinf.positiveOrNull());Assert.assertFalse(pinf.strictlyNegative());Assert.assertTrue(pinf.strictlyPositive());Assert.assertTrue(pinf.negate().negativeOrNull());Assert.assertFalse(pinf.negate().positiveOrNull());Assert.assertTrue(pinf.negate().strictlyNegative());Assert.assertFalse(pinf.negate().strictlyPositive());Assert.assertTrue(ninf.negativeOrNull());Assert.assertFalse(ninf.positiveOrNull());Assert.assertTrue(ninf.strictlyNegative());Assert.assertFalse(ninf.strictlyPositive());Assert.assertFalse(ninf.negate().negativeOrNull());Assert.assertTrue(ninf.negate().positiveOrNull());Assert.assertFalse(ninf.negate().strictlyNegative());Assert.assertTrue(ninf.negate().strictlyPositive());}"
"org.apache.commons.math3.dfp.DfpTest.testSpecialConstructors",0,"@Test public void testSpecialConstructors(){Assert.assertEquals(ninf,field.newDfp(Double.NEGATIVE_INFINITY));Assert.assertEquals(ninf,field.newDfp(""-Infinity""));Assert.assertEquals(pinf,field.newDfp(Double.POSITIVE_INFINITY));Assert.assertEquals(pinf,field.newDfp(""Infinity""));Assert.assertTrue(field.newDfp(Double.NaN).isNaN());Assert.assertTrue(field.newDfp(""NaN"").isNaN());}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.derivativesConsistency",0,"@Test public void derivativesConsistency()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.1);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;HighamHall54Integrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);StepInterpolatorTestUtils.checkDerivativesConsistency(integ,pb,1.1e-10);}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.serialization",0,"@Test public void serialization()throws IOException,ClassNotFoundException,DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;HighamHall54Integrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new ContinuousOutputModel());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(bos);for(StepHandler handler : integ.getStepHandlers()){oos.writeObject(handler);}Assert.assertTrue(bos.size()> 185000);Assert.assertTrue(bos.size()< 195000);ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());ObjectInputStream ois=new ObjectInputStream(bis);ContinuousOutputModel cm=(ContinuousOutputModel)ois.readObject();Random random=new Random(347588535632l);double maxError=0.0;for (int i=0;i < 1000;++i){double r=random.nextDouble();double time=r * pb.getInitialTime()+ (1.0 - r)* pb.getFinalTime();cm.setInterpolatedTime(time);double[]interpolatedY=cm.getInterpolatedState();double[]theoreticalY=pb.computeTheoreticalState(time);double dx=interpolatedY[0]- theoreticalY[0];double dy=interpolatedY[1]- theoreticalY[1];double error=dx * dx + dy * dy;if (error > maxError){maxError=error;}}Assert.assertTrue(maxError < 1.6e-10);}"
"org.apache.commons.math3.ode.nonstiff.HighamHall54StepInterpolatorTest.checkClone",0,"@Test public void checkClone()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;HighamHall54Integrator integ=new HighamHall54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast)throws MaxCountExceededException {StepInterpolator cloned=interpolator.copy();double tA=cloned.getPreviousTime();double tB=cloned.getCurrentTime();double halfStep=FastMath.abs(tB - tA)/ 2;Assert.assertEquals(interpolator.getPreviousTime(),tA,1.0e-12);Assert.assertEquals(interpolator.getCurrentTime(),tB,1.0e-12);for (int i=0;i < 10;++i){double t=(i * tB + (9 - i)* tA)/ 9;interpolator.setInterpolatedTime(t);Assert.assertTrue(FastMath.abs(cloned.getInterpolatedTime()- t)> (halfStep / 10));cloned.setInterpolatedTime(t);Assert.assertEquals(t,cloned.getInterpolatedTime(),1.0e-12);double[]referenceState=interpolator.getInterpolatedState();double[]cloneState=cloned.getInterpolatedState();for (int j=0;j < referenceState.length;++j){Assert.assertEquals(referenceState[j],cloneState[j],1.0e-12);}}}public void init(double t0,double[]y0,double t){}});integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.complex.RootsOfUnityTest.testMathIllegalState1",0,"@Test(expected=MathIllegalStateException.class)public void testMathIllegalState1(){final RootsOfUnity roots=new RootsOfUnity();roots.getReal(0);}"
"org.apache.commons.math3.complex.RootsOfUnityTest.testMathIllegalState2",0,"@Test(expected=MathIllegalStateException.class)public void testMathIllegalState2(){final RootsOfUnity roots=new RootsOfUnity();roots.getImaginary(0);}"
"org.apache.commons.math3.complex.RootsOfUnityTest.testMathIllegalState3",0,"@Test(expected=MathIllegalStateException.class)public void testMathIllegalState3(){final RootsOfUnity roots=new RootsOfUnity();roots.isCounterClockWise();}"
"org.apache.commons.math3.complex.RootsOfUnityTest.testZeroNumberOfRoots",0,"@Test(expected=ZeroException.class)public void testZeroNumberOfRoots(){final RootsOfUnity roots=new RootsOfUnity();roots.computeRoots(0);}"
"org.apache.commons.math3.complex.RootsOfUnityTest.testGetNumberOfRoots",0,"@Test public void testGetNumberOfRoots(){final RootsOfUnity roots=new RootsOfUnity();Assert.assertEquals("""",0,roots.getNumberOfRoots());roots.computeRoots(5);Assert.assertEquals("""",5,roots.getNumberOfRoots());roots.computeRoots(-5);Assert.assertEquals("""",5,roots.getNumberOfRoots());roots.computeRoots(6);Assert.assertEquals("""",6,roots.getNumberOfRoots());}"
"org.apache.commons.math3.complex.RootsOfUnityTest.testComputeRoots",0,"@Test public void testComputeRoots(){final RootsOfUnity roots=new RootsOfUnity();for (int n=-10;n < 11;n++){if (n != 0){roots.computeRoots(n);doTestComputeRoots(roots);roots.computeRoots(-n);doTestComputeRoots(roots);}}}"
"org.apache.commons.math3.linear.FieldLUSolverTest.testSingular",0,"/** * test singular */@Test public void testSingular(){FieldDecompositionSolver<Fraction> solver;solver=new FieldLUDecomposition<Fraction>(createFractionMatrix(testData)).getSolver();Assert.assertTrue(solver.isNonSingular());solver=new FieldLUDecomposition<Fraction>(createFractionMatrix(singular)).getSolver();Assert.assertFalse(solver.isNonSingular());solver=new FieldLUDecomposition<Fraction>(createFractionMatrix(bigSingular)).getSolver();Assert.assertFalse(solver.isNonSingular());}"
"org.apache.commons.math3.linear.FieldLUSolverTest.testSolveDimensionErrors",0,"/** * test solve dimension errors */@Test public void testSolveDimensionErrors(){FieldDecompositionSolver<Fraction> solver;solver=new FieldLUDecomposition<Fraction>(createFractionMatrix(testData)).getSolver();FieldMatrix<Fraction> b=createFractionMatrix(new int[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException iae){}}"
"org.apache.commons.math3.linear.FieldLUSolverTest.testSolveSingularityErrors",0,"/** * test solve singularity errors */@Test public void testSolveSingularityErrors(){FieldDecompositionSolver<Fraction> solver;solver=new FieldLUDecomposition<Fraction>(createFractionMatrix(singular)).getSolver();FieldMatrix<Fraction> b=createFractionMatrix(new int[2][2]);try {solver.solve(b);Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException ime){}try {solver.solve(b.getColumnVector(0));Assert.fail(""an exception should have been thrown"");}catch(SingularMatrixException ime){}}"
"org.apache.commons.math3.linear.FieldLUSolverTest.testSolve",0,"/** * test solve */@Test public void testSolve(){FieldDecompositionSolver<Fraction> solver;solver=new FieldLUDecomposition<Fraction>(createFractionMatrix(testData)).getSolver();FieldMatrix<Fraction> b=createFractionMatrix(new int[][]{{1,0},{2,-5},{3,1}});FieldMatrix<Fraction> xRef=createFractionMatrix(new int[][]{{19,-71},{-6,22},{-2,9}});FieldMatrix<Fraction> x=solver.solve(b);for (int i=0;i < x.getRowDimension();i++){for (int j=0;j < x.getColumnDimension();j++){Assert.assertEquals(""("" + i + "",""+ j+ "")"",xRef.getEntry(i,j),x.getEntry(i,j));}}for (int j=0;j < b.getColumnDimension();j++){final FieldVector<Fraction> xj=solver.solve(b.getColumnVector(j));for (int i=0;i < xj.getDimension();i++){Assert.assertEquals(""("" + i + "",""+ j+ "")"",xRef.getEntry(i,j),xj.getEntry(i));}}for (int j=0;j < b.getColumnDimension();j++){final SparseFieldVector<Fraction> bj;bj=new SparseFieldVector<Fraction>(FractionField.getInstance(),b.getColumn(j));final FieldVector<Fraction> xj=solver.solve(bj);for (int i=0;i < xj.getDimension();i++){Assert.assertEquals(""("" + i + "",""+ j+ "")"",xRef.getEntry(i,j),xj.getEntry(i));}}}"
"org.apache.commons.math3.linear.FieldLUSolverTest.testDeterminant",0,"/** * test determinant */@Test public void testDeterminant(){Assert.assertEquals(-1,getDeterminant(createFractionMatrix(testData)),1E-15);Assert.assertEquals(-10,getDeterminant(createFractionMatrix(luData)),1E-14);Assert.assertEquals(0,getDeterminant(createFractionMatrix(singular)),1E-15);Assert.assertEquals(0,getDeterminant(createFractionMatrix(bigSingular)),1E-15);}"
"org.apache.commons.math3.genetics.RandomKeyTest.testConstructor1",0,"@Test(expected=IllegalArgumentException.class)public void testConstructor1(){new DummyRandomKey(new Double[]{0.2,0.3,1.2});}"
"org.apache.commons.math3.genetics.RandomKeyTest.testConstructor2",0,"@Test(expected=IllegalArgumentException.class)public void testConstructor2(){new DummyRandomKey(new Double[]{0.2,0.3,-0.2});}"
"org.apache.commons.math3.genetics.RandomKeyTest.testIsSame",0,"@Test public void testIsSame(){DummyRandomKey drk1=new DummyRandomKey(new Double[]{0.4,0.1,0.5,0.8,0.2});DummyRandomKey drk2=new DummyRandomKey(new Double[]{0.4,0.1,0.5,0.8,0.2});DummyRandomKey drk3=new DummyRandomKey(new Double[]{0.4,0.15,0.5,0.8,0.2});DummyRandomKey drk4=new DummyRandomKey(new Double[]{0.4,0.25,0.5,0.8,0.2});DummyRandomKey drk5=new DummyRandomKey(new Double[]{0.4,0.25,0.5,0.8,0.2,0.5});Assert.assertTrue(drk1.isSame(drk2));Assert.assertTrue(drk2.isSame(drk3));Assert.assertFalse(drk3.isSame(drk4));Assert.assertFalse(drk4.isSame(drk5));}"
"org.apache.commons.math3.genetics.RandomKeyTest.testDecode",0,"@Test public void testDecode(){DummyRandomKey drk=new DummyRandomKey(new Double[]{0.4,0.1,0.5,0.8,0.2});List<String> decoded=drk.decode(Arrays.asList(new String[]{""a"",""b"",""c"",""d"",""e""}));Assert.assertEquals(""b"",decoded.get(0));Assert.assertEquals(""e"",decoded.get(1));Assert.assertEquals(""a"",decoded.get(2));Assert.assertEquals(""c"",decoded.get(3));Assert.assertEquals(""d"",decoded.get(4));}"
"org.apache.commons.math3.genetics.RandomKeyTest.testInvalidRepresentation",0,"@Test(expected=IllegalArgumentException.class)public void testInvalidRepresentation(){new DummyRandomKey(new Double[]{0.1,0.1,2d,0.8,0.2});}"
"org.apache.commons.math3.genetics.RandomKeyTest.testRandomPermutation",0,"@Test public void testRandomPermutation(){for (int i=0;i < 10;i++){DummyRandomKey drk=new DummyRandomKey(RandomKey.randomPermutation(20));Assert.assertNotNull(drk);}}"
"org.apache.commons.math3.genetics.RandomKeyTest.testIdentityPermutation",0,"@Test public void testIdentityPermutation(){DummyRandomKey drk=new DummyRandomKey(RandomKey.identityPermutation(5));List<String> decoded=drk.decode(Arrays.asList(new String[]{""a"",""b"",""c"",""d"",""e""}));Assert.assertEquals(""a"",decoded.get(0));Assert.assertEquals(""b"",decoded.get(1));Assert.assertEquals(""c"",decoded.get(2));Assert.assertEquals(""d"",decoded.get(3));Assert.assertEquals(""e"",decoded.get(4));}"
"org.apache.commons.math3.genetics.RandomKeyTest.testComparatorPermutation",0,"@Test public void testComparatorPermutation(){List<String> data=Arrays.asList(new String[]{""x"",""b"",""c"",""z"",""b""});List<Double> permutation=RandomKey.comparatorPermutation(data,new Comparator<String>(){public int compare(String o1,String o2){return o1.compareTo(o2);}});Double[]permArr=new Double[data.size()];permArr=permutation.toArray(permArr);Assert.assertArrayEquals(new Double[]{0.6,0.0,0.4,0.8,0.2},permArr);List<String> decodedData=new DummyRandomKey(permutation).decode(data);Assert.assertEquals(""b"",decodedData.get(0));Assert.assertEquals(""b"",decodedData.get(1));Assert.assertEquals(""c"",decodedData.get(2));Assert.assertEquals(""x"",decodedData.get(3));Assert.assertEquals(""z"",decodedData.get(4));permutation=RandomKey.comparatorPermutation(data,new Comparator<String>(){public int compare(String o1,String o2){return o2.compareTo(o1);}});permArr=new Double[data.size()];permArr=permutation.toArray(permArr);Assert.assertArrayEquals(new Double[]{0.2,0.6,0.4,0.0,0.8},permArr);decodedData=new DummyRandomKey(permutation).decode(data);Assert.assertEquals(""z"",decodedData.get(0));Assert.assertEquals(""x"",decodedData.get(1));Assert.assertEquals(""c"",decodedData.get(2));Assert.assertEquals(""b"",decodedData.get(3));Assert.assertEquals(""b"",decodedData.get(4));}"
"org.apache.commons.math3.genetics.RandomKeyTest.testInducedPermutation",0,"@Test public void testInducedPermutation(){List<String> origData=Arrays.asList(new String[]{""a"",""b"",""c"",""d"",""d""});List<String> permutedData=Arrays.asList(new String[]{""d"",""b"",""c"",""a"",""d""});DummyRandomKey drk=new DummyRandomKey(RandomKey.inducedPermutation(origData,permutedData));List<String> decoded=drk.decode(origData);Assert.assertEquals(""d"",decoded.get(0));Assert.assertEquals(""b"",decoded.get(1));Assert.assertEquals(""c"",decoded.get(2));Assert.assertEquals(""a"",decoded.get(3));Assert.assertEquals(""d"",decoded.get(4));try {RandomKey.inducedPermutation(Arrays.asList(new String[]{""a"",""b"",""c"",""d"",""d""}),Arrays.asList(new String[]{""a"",""b"",""c"",""d""}));Assert.fail(""Uncaught exception"");}catch(IllegalArgumentException e){}try {RandomKey.inducedPermutation(Arrays.asList(new String[]{""a"",""b"",""c"",""d"",""d""}),Arrays.asList(new String[]{""a"",""b"",""c"",""d"",""f""}));Assert.fail(""Uncaught exception"");}catch(IllegalArgumentException e){}}"
"org.apache.commons.math3.genetics.RandomKeyTest.testEqualRepr",0,"@Test public void testEqualRepr(){DummyRandomKey drk=new DummyRandomKey(new Double[]{0.2,0.2,0.5});List<String> decodedData=drk.decode(Arrays.asList(new String[]{""a"",""b"",""c""}));Assert.assertEquals(""a"",decodedData.get(0));Assert.assertEquals(""b"",decodedData.get(1));Assert.assertEquals(""c"",decodedData.get(2));}"
"org.apache.commons.math3.ml.distance.ChebyshevDistanceTest.testZero",0,"@Test public void testZero(){final double[]a={0,1,-2,3.4,5,-6.7,89};Assert.assertEquals(0,distance.compute(a,a),0d);}"
"org.apache.commons.math3.ml.distance.ChebyshevDistanceTest.test",0,"@Test public void test(){final double[]a={1,2,3,4};final double[]b={-5,-6,7,8};final double expected=8;Assert.assertEquals(expected,distance.compute(a,b),0d);Assert.assertEquals(expected,distance.compute(b,a),0d);}"
"org.apache.commons.math3.stat.descriptive.rank.MaxTest.testSpecialValues",0,"@Test public void testSpecialValues(){double[]testArray={0d,Double.NaN,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY};Max max=new Max();Assert.assertTrue(Double.isNaN(max.getResult()));max.increment(testArray[0]);Assert.assertEquals(0d,max.getResult(),0);max.increment(testArray[1]);Assert.assertEquals(0d,max.getResult(),0);max.increment(testArray[2]);Assert.assertEquals(0d,max.getResult(),0);max.increment(testArray[3]);Assert.assertEquals(Double.POSITIVE_INFINITY,max.getResult(),0);Assert.assertEquals(Double.POSITIVE_INFINITY,max.evaluate(testArray),0);}"
"org.apache.commons.math3.stat.descriptive.rank.MaxTest.testNaNs",0,"@Test public void testNaNs(){Max max=new Max();double nan=Double.NaN;Assert.assertEquals(3d,max.evaluate(new double[]{nan,2d,3d}),0);Assert.assertEquals(3d,max.evaluate(new double[]{1d,nan,3d}),0);Assert.assertEquals(2d,max.evaluate(new double[]{1d,2d,nan}),0);Assert.assertTrue(Double.isNaN(max.evaluate(new double[]{nan,nan,nan})));}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testPreconditions1",0,"@Test(expected=NullArgumentException.class)public void testPreconditions1(){new StepFunction(null,new double[]{0,-1,-2});}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testPreconditions2",0,"@Test(expected=NullArgumentException.class)public void testPreconditions2(){new StepFunction(new double[]{0,1},null);}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testPreconditions3",0,"@Test(expected=NoDataException.class)public void testPreconditions3(){new StepFunction(new double[]{0},new double[]{});}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testPreconditions4",0,"@Test(expected=NoDataException.class)public void testPreconditions4(){new StepFunction(new double[]{},new double[]{0});}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testPreconditions5",0,"@Test(expected=DimensionMismatchException.class)public void testPreconditions5(){new StepFunction(new double[]{0,1},new double[]{0,-1,-2});}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testPreconditions6",0,"@Test(expected=NonMonotonicSequenceException.class)public void testPreconditions6(){new StepFunction(new double[]{1,0,1},new double[]{0,-1,-2});}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testSomeValues",0,"@Test public void testSomeValues(){final double[]x={-2,-0.5,0,1.9,7.4,21.3};final double[]y={4,-1,-5.5,0.4,5.8,51.2};final UnivariateFunction f=new StepFunction(x,y);Assert.assertEquals(4,f.value(Double.NEGATIVE_INFINITY),EPS);Assert.assertEquals(4,f.value(-10),EPS);Assert.assertEquals(-1,f.value(-0.4),EPS);Assert.assertEquals(-5.5,f.value(0),EPS);Assert.assertEquals(0.4,f.value(2),EPS);Assert.assertEquals(5.8,f.value(10),EPS);Assert.assertEquals(51.2,f.value(30),EPS);Assert.assertEquals(51.2,f.value(Double.POSITIVE_INFINITY),EPS);}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testEndpointBehavior",0,"@Test public void testEndpointBehavior(){final double[]x={0,1,2,3};final double[]xp={-8,1,2,3};final double[]y={1,2,3,4};final UnivariateFunction f=new StepFunction(x,y);final UnivariateFunction fp=new StepFunction(xp,y);Assert.assertEquals(f.value(-8),fp.value(-8),EPS);Assert.assertEquals(f.value(-10),fp.value(-10),EPS);Assert.assertEquals(f.value(0),fp.value(0),EPS);Assert.assertEquals(f.value(0.5),fp.value(0.5),EPS);for (int i=0;i < x.length;i++){Assert.assertEquals(y[i],f.value(x[i]),EPS);if (i > 0){Assert.assertEquals(y[i - 1],f.value(x[i]- 0.5),EPS);}else {Assert.assertEquals(y[0],f.value(x[i]- 0.5),EPS);}}}"
"org.apache.commons.math3.analysis.function.StepFunctionTest.testHeaviside",0,"@Test public void testHeaviside(){final UnivariateFunction h=new StepFunction(new double[]{-1,0},new double[]{0,1});Assert.assertEquals(0,h.value(Double.NEGATIVE_INFINITY),0);Assert.assertEquals(0,h.value(-Double.MAX_VALUE),0);Assert.assertEquals(0,h.value(-2),0);Assert.assertEquals(0,h.value(-Double.MIN_VALUE),0);Assert.assertEquals(1,h.value(0),0);Assert.assertEquals(1,h.value(2),0);Assert.assertEquals(1,h.value(Double.POSITIVE_INFINITY),0);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testMoreEstimatedParametersSimple",0,"@Override @Test(expected=ConvergenceException.class)public void testMoreEstimatedParametersSimple(){super.testMoreEstimatedParametersSimple();}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testMoreEstimatedParametersUnsorted",0,"@Override @Test(expected=ConvergenceException.class)public void testMoreEstimatedParametersUnsorted(){super.testMoreEstimatedParametersUnsorted();}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testMaxEvaluations",0,"@Test(expected=TooManyEvaluationsException.class)public void testMaxEvaluations()throws Exception {CircleVectorial circle=new CircleVectorial();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);GaussNewtonOptimizer optimizer=new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-30,1.0e-30));optimizer.optimize(100,circle,new double[]{0,0,0,0,0},new double[]{1,1,1,1,1},new double[]{98.680,47.345});}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testCircleFittingBadInit",0,"@Override @Test(expected=ConvergenceException.class)public void testCircleFittingBadInit(){super.testCircleFittingBadInit();}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testHahn1",0,"@Override @Test(expected=ConvergenceException.class)public void testHahn1()throws IOException {super.testHahn1();}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testGetIterations",0,"@Test public void testGetIterations(){AbstractLeastSquaresOptimizer optim=createOptimizer();optim.optimize(new MaxEval(100),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{3}),new ModelFunction(new MultivariateVectorFunction(){public double[]value(double[]point){return new double[]{FastMath.pow(point[0],4)};}}),new ModelFunctionJacobian(new MultivariateMatrixFunction(){public double[][]value(double[]point){return new double[][]{{0.25 * FastMath.pow(point[0],3)}};}}));Assert.assertTrue(optim.getIterations()> 0);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1.5,optimum.getPoint()[0],1e-10);Assert.assertEquals(3.0,optimum.getValue()[0],1e-10);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testQRColumnsPermutation",0,"@Test public void testQRColumnsPermutation(){LinearProblem problem=new LinearProblem(new double[][]{{1,-1},{0,2},{1,-2}},new double[]{4,6,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(7,optimum.getPoint()[0],1e-10);Assert.assertEquals(3,optimum.getPoint()[1],1e-10);Assert.assertEquals(4,optimum.getValue()[0],1e-10);Assert.assertEquals(6,optimum.getValue()[1],1e-10);Assert.assertEquals(1,optimum.getValue()[2],1e-10);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testNoDependency",0,"@Test public void testNoDependency(){LinearProblem problem=new LinearProblem(new double[][]{{2,0,0,0,0,0},{0,2,0,0,0,0},{0,0,2,0,0,0},{0,0,0,2,0,0},{0,0,0,0,2,0},{0,0,0,0,0,2}},new double[]{0,1.1,2.2,3.3,4.4,5.5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);for (int i=0;i < problem.target.length;++i){Assert.assertEquals(0.55 * i,optimum.getPoint()[i],1e-10);}}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testOneSet",0,"@Test public void testOneSet(){LinearProblem problem=new LinearProblem(new double[][]{{1,0,0},{-1,1,0},{0,-1,1}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum.getPoint()[0],1e-10);Assert.assertEquals(2,optimum.getPoint()[1],1e-10);Assert.assertEquals(3,optimum.getPoint()[2],1e-10);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testTwoSets",0,"@Test public void testTwoSets(){double epsilon=1e-7;LinearProblem problem=new LinearProblem(new double[][]{{2,1,0,4,0,0},{-4,-2,3,-7,0,0},{4,1,-2,8,0,0},{0,-3,-12,-1,0,0},{0,0,0,0,epsilon,1},{0,0,0,0,1,1}},new double[]{2,-9,2,2,1 + epsilon * epsilon,2});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1,1,1,1}),new InitialGuess(new double[]{0,0,0,0,0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(3,optimum.getPoint()[0],1e-10);Assert.assertEquals(4,optimum.getPoint()[1],1e-10);Assert.assertEquals(-1,optimum.getPoint()[2],1e-10);Assert.assertEquals(-2,optimum.getPoint()[3],1e-10);Assert.assertEquals(1 + epsilon,optimum.getPoint()[4],1e-10);Assert.assertEquals(1 - epsilon,optimum.getPoint()[5],1e-10);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testNonInvertible",0,"@Test(expected=ConvergenceException.class)public void testNonInvertible()throws Exception {LinearProblem problem=new LinearProblem(new double[][]{{1,2,-3},{2,1,3},{-3,0,-9}},new double[]{1,1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{0,0,0}));}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testIllConditioned",0,"@Test public void testIllConditioned(){LinearProblem problem1=new LinearProblem(new double[][]{{10,7,8,7},{7,5,6,5},{8,6,10,9},{7,5,9,10}},new double[]{32,23,33,31});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum1=optimizer.optimize(new MaxEval(100),problem1.getModelFunction(),problem1.getModelFunctionJacobian(),problem1.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(1,optimum1.getPoint()[0],1e-10);Assert.assertEquals(1,optimum1.getPoint()[1],1e-10);Assert.assertEquals(1,optimum1.getPoint()[2],1e-10);Assert.assertEquals(1,optimum1.getPoint()[3],1e-10);LinearProblem problem2=new LinearProblem(new double[][]{{10.00,7.00,8.10,7.20},{7.08,5.04,6.00,5.00},{8.00,5.98,9.89,9.00},{6.99,4.99,9.00,9.98}},new double[]{32,23,33,31});PointVectorValuePair optimum2=optimizer.optimize(new MaxEval(100),problem2.getModelFunction(),problem2.getModelFunctionJacobian(),problem2.getTarget(),new Weight(new double[]{1,1,1,1}),new InitialGuess(new double[]{0,1,2,3}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-81,optimum2.getPoint()[0],1e-8);Assert.assertEquals(137,optimum2.getPoint()[1],1e-8);Assert.assertEquals(-34,optimum2.getPoint()[2],1e-8);Assert.assertEquals(22,optimum2.getPoint()[3],1e-8);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testRedundantEquations",0,"@Test public void testRedundantEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,5});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(2,optimum.getPointRef()[0],1e-10);Assert.assertEquals(1,optimum.getPointRef()[1],1e-10);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testInconsistentEquations",0,"@Test public void testInconsistentEquations(){LinearProblem problem=new LinearProblem(new double[][]{{1,1},{1,-1},{1,3}},new double[]{3,1,4});AbstractLeastSquaresOptimizer optimizer=createOptimizer();optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1,1}),new InitialGuess(new double[]{1,1}));Assert.assertTrue(optimizer.getRMS()> 0.1);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testInconsistentSizes1",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes1(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testInconsistentSizes2",0,"@Test(expected=DimensionMismatchException.class)public void testInconsistentSizes2(){LinearProblem problem=new LinearProblem(new double[][]{{1,0},{0,1}},new double[]{-1,1});AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1,1}),new InitialGuess(new double[]{0,0}));Assert.assertEquals(0,optimizer.getRMS(),1e-10);Assert.assertEquals(-1,optimum.getPoint()[0],1e-10);Assert.assertEquals(1,optimum.getPoint()[1],1e-10);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),new Target(new double[]{1}),new Weight(new double[]{1}),new InitialGuess(new double[]{0,0}));}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleVectorial circle=new CircleVectorial();circle.addPoint(30,68);circle.addPoint(50,-6);circle.addPoint(110,-20);circle.addPoint(35,15);circle.addPoint(45,97);AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(new double[]{0,0,0,0,0}),new Weight(new double[]{1,1,1,1,1}),new InitialGuess(new double[]{98.680,47.345}));Assert.assertTrue(optimizer.getEvaluations()< 10);double rms=optimizer.getRMS();Assert.assertEquals(1.768262623567235,FastMath.sqrt(circle.getN())* rms,1e-10);Vector2D center=new Vector2D(optimum.getPointRef()[0],optimum.getPointRef()[1]);Assert.assertEquals(69.96016176931406,circle.getRadius(center),1e-6);Assert.assertEquals(96.07590211815305,center.getX(),1e-6);Assert.assertEquals(48.13516790438953,center.getY(),1e-6);double[][]cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(1.839,cov[0][0],0.001);Assert.assertEquals(0.731,cov[0][1],0.001);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.786,cov[1][1],0.001);double r=circle.getRadius(center);for (double d=0;d < 2 * FastMath.PI;d+=0.01){circle.addPoint(center.getX()+ r * FastMath.cos(d),center.getY()+ r * FastMath.sin(d));}double[]target=new double[circle.getN()];Arrays.fill(target,0);double[]weights=new double[circle.getN()];Arrays.fill(weights,2);optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{98.680,47.345}));cov=optimizer.computeCovariances(optimum.getPoint(),1e-14);Assert.assertEquals(0.0016,cov[0][0],0.001);Assert.assertEquals(3.2e-7,cov[0][1],1e-9);Assert.assertEquals(cov[0][1],cov[1][0],1e-14);Assert.assertEquals(0.0016,cov[1][1],0.001);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testCircleFittingGoodInit",0,"@Test public void testCircleFittingGoodInit(){CircleVectorial circle=new CircleVectorial();double[][]points=circlePoints;double[]target=new double[points.length];Arrays.fill(target,0);double[]weights=new double[points.length];Arrays.fill(weights,2);for (int i=0;i < points.length;++i){circle.addPoint(points[i][0],points[i][1]);}AbstractLeastSquaresOptimizer optimizer=createOptimizer();PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),circle.getModelFunction(),circle.getModelFunctionJacobian(),new Target(target),new Weight(weights),new InitialGuess(new double[]{0,0}));Assert.assertEquals(-0.1517383071957963,optimum.getPointRef()[0],1e-6);Assert.assertEquals(0.2074999736353867,optimum.getPointRef()[1],1e-6);Assert.assertEquals(0.04268731682389561,optimizer.getRMS(),1e-8);}"
"org.apache.commons.math3.optimization.general.GaussNewtonOptimizerTest.testKirby2",0,"@Test public void testKirby2()throws IOException {doTestStRD(StatisticalReferenceDatasetFactory.createKirby2(),1E-7,1E-7);}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalTest.testInterval",0,"@Test public void testInterval(){Interval interval=new Interval(2.3,5.7);Assert.assertEquals(3.4,interval.getSize(),1.0e-10);Assert.assertEquals(4.0,interval.getBarycenter(),1.0e-10);Assert.assertEquals(Region.Location.BOUNDARY,interval.checkPoint(2.3,1.0e-10));Assert.assertEquals(Region.Location.BOUNDARY,interval.checkPoint(5.7,1.0e-10));Assert.assertEquals(Region.Location.OUTSIDE,interval.checkPoint(1.2,1.0e-10));Assert.assertEquals(Region.Location.OUTSIDE,interval.checkPoint(8.7,1.0e-10));Assert.assertEquals(Region.Location.INSIDE,interval.checkPoint(3.0,1.0e-10));Assert.assertEquals(2.3,interval.getInf(),1.0e-10);Assert.assertEquals(5.7,interval.getSup(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalTest.testTolerance",0,"@Test public void testTolerance(){Interval interval=new Interval(2.3,5.7);Assert.assertEquals(Region.Location.OUTSIDE,interval.checkPoint(1.2,1.0));Assert.assertEquals(Region.Location.BOUNDARY,interval.checkPoint(1.2,1.2));Assert.assertEquals(Region.Location.OUTSIDE,interval.checkPoint(8.7,2.9));Assert.assertEquals(Region.Location.BOUNDARY,interval.checkPoint(8.7,3.1));Assert.assertEquals(Region.Location.INSIDE,interval.checkPoint(3.0,0.6));Assert.assertEquals(Region.Location.BOUNDARY,interval.checkPoint(3.0,0.8));}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalTest.testInfinite",0,"@Test public void testInfinite(){Interval interval=new Interval(9.0,Double.POSITIVE_INFINITY);Assert.assertEquals(Region.Location.BOUNDARY,interval.checkPoint(9.0,1.0e-10));Assert.assertEquals(Region.Location.OUTSIDE,interval.checkPoint(8.4,1.0e-10));for (double e=1.0;e <= 6.0;e+=1.0){Assert.assertEquals(Region.Location.INSIDE,interval.checkPoint(FastMath.pow(10.0,e),1.0e-10));}Assert.assertTrue(Double.isInfinite(interval.getSize()));Assert.assertEquals(9.0,interval.getInf(),1.0e-10);Assert.assertTrue(Double.isInfinite(interval.getSup()));}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalTest.testSinglePoint",0,"@Test public void testSinglePoint(){Interval interval=new Interval(1.0,1.0);Assert.assertEquals(0.0,interval.getSize(),Precision.SAFE_MIN);Assert.assertEquals(1.0,interval.getBarycenter(),Precision.EPSILON);}"
"org.apache.commons.math3.linear.QRDecompositionTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){checkDimension(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkDimension(MatrixUtils.createRealMatrix(testData4x3));checkDimension(MatrixUtils.createRealMatrix(testData3x4));Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;checkDimension(createTestMatrix(r,p,q));checkDimension(createTestMatrix(r,q,p));}"
"org.apache.commons.math3.linear.QRDecompositionTest.testAEqualQR",0,"/** * test A = QR */@Test public void testAEqualQR(){checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkAEqualQR(MatrixUtils.createRealMatrix(testData3x3Singular));checkAEqualQR(MatrixUtils.createRealMatrix(testData3x4));checkAEqualQR(MatrixUtils.createRealMatrix(testData4x3));Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;checkAEqualQR(createTestMatrix(r,p,q));checkAEqualQR(createTestMatrix(r,q,p));}"
"org.apache.commons.math3.linear.QRDecompositionTest.testQOrthogonal",0,"/** * test the orthogonality of Q */@Test public void testQOrthogonal(){checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3NonSingular));checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x3Singular));checkQOrthogonal(MatrixUtils.createRealMatrix(testData3x4));checkQOrthogonal(MatrixUtils.createRealMatrix(testData4x3));Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;checkQOrthogonal(createTestMatrix(r,p,q));checkQOrthogonal(createTestMatrix(r,q,p));}"
"org.apache.commons.math3.linear.QRDecompositionTest.testRUpperTriangular",0,"/** * test that R is upper triangular */@Test public void testRUpperTriangular(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData3x3NonSingular);checkUpperTriangular(new QRDecomposition(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData3x3Singular);checkUpperTriangular(new QRDecomposition(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData3x4);checkUpperTriangular(new QRDecomposition(matrix).getR());matrix=MatrixUtils.createRealMatrix(testData4x3);checkUpperTriangular(new QRDecomposition(matrix).getR());Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;matrix=createTestMatrix(r,p,q);checkUpperTriangular(new QRDecomposition(matrix).getR());matrix=createTestMatrix(r,p,q);checkUpperTriangular(new QRDecomposition(matrix).getR());}"
"org.apache.commons.math3.linear.QRDecompositionTest.testHTrapezoidal",0,"/** * test that H is trapezoidal */@Test public void testHTrapezoidal(){RealMatrix matrix=MatrixUtils.createRealMatrix(testData3x3NonSingular);checkTrapezoidal(new QRDecomposition(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData3x3Singular);checkTrapezoidal(new QRDecomposition(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData3x4);checkTrapezoidal(new QRDecomposition(matrix).getH());matrix=MatrixUtils.createRealMatrix(testData4x3);checkTrapezoidal(new QRDecomposition(matrix).getH());Random r=new Random(643895747384642l);int p=(5 * BlockRealMatrix.BLOCK_SIZE)/ 4;int q=(7 * BlockRealMatrix.BLOCK_SIZE)/ 4;matrix=createTestMatrix(r,p,q);checkTrapezoidal(new QRDecomposition(matrix).getH());matrix=createTestMatrix(r,p,q);checkTrapezoidal(new QRDecomposition(matrix).getH());}"
"org.apache.commons.math3.linear.QRDecompositionTest.testMatricesValues",0,"/** * test matrices values */@Test public void testMatricesValues(){QRDecomposition qr=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3NonSingular));RealMatrix qRef=MatrixUtils.createRealMatrix(new double[][]{{-12.0 / 14.0,69.0 / 175.0,-58.0 / 175.0},{-6.0 / 14.0,-158.0 / 175.0,6.0 / 175.0},{4.0 / 14.0,-30.0 / 175.0,-165.0 / 175.0}});RealMatrix rRef=MatrixUtils.createRealMatrix(new double[][]{{-14.0,-21.0,14.0},{0.0,-175.0,70.0},{0.0,0.0,35.0}});RealMatrix hRef=MatrixUtils.createRealMatrix(new double[][]{{26.0 / 14.0,0.0,0.0},{6.0 / 14.0,648.0 / 325.0,0.0},{-4.0 / 14.0,36.0 / 325.0,2.0}});RealMatrix q=qr.getQ();Assert.assertEquals(0,q.subtract(qRef).getNorm(),1.0e-13);RealMatrix qT=qr.getQT();Assert.assertEquals(0,qT.subtract(qRef.transpose()).getNorm(),1.0e-13);RealMatrix r=qr.getR();Assert.assertEquals(0,r.subtract(rRef).getNorm(),1.0e-13);RealMatrix h=qr.getH();Assert.assertEquals(0,h.subtract(hRef).getNorm(),1.0e-13);Assert.assertTrue(q == qr.getQ());Assert.assertTrue(r == qr.getR());Assert.assertTrue(h == qr.getH());}"
"org.apache.commons.math3.linear.QRDecompositionTest.testNonInvertible",0,"@Test(expected=SingularMatrixException.class)public void testNonInvertible(){QRDecomposition qr=new QRDecomposition(MatrixUtils.createRealMatrix(testData3x3Singular));qr.getSolver().getInverse();}"
"org.apache.commons.math3.linear.RealVectorTest.testAppendVector",0,"@Test @Ignore(""Abstract class RealVector does not implement append(RealVector)."")@Override public void testAppendVector(){}"
"org.apache.commons.math3.linear.RealVectorTest.testAppendScalar",0,"@Test @Ignore(""Abstract class RealVector does not implement append(double)"")@Override public void testAppendScalar(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetSubVector",0,"@Test @Ignore(""Abstract class RealVector does not implement getSubvector(int,int)"")@Override public void testGetSubVector(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetSubVectorInvalidIndex1",0,"@Test @Ignore(""Abstract class RealVector does not implement getSubvector(int,int)"")@Override public void testGetSubVectorInvalidIndex1(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetSubVectorInvalidIndex2",0,"@Test @Ignore(""Abstract class RealVector does not implement getSubvector(int,int)"")@Override public void testGetSubVectorInvalidIndex2(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetSubVectorInvalidIndex3",0,"@Test @Ignore(""Abstract class RealVector does not implement getSubvector(int,int)"")@Override public void testGetSubVectorInvalidIndex3(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetSubVectorInvalidIndex4",0,"@Test @Ignore(""Abstract class RealVector does not implement getSubvector(int,int)"")@Override public void testGetSubVectorInvalidIndex4(){}"
"org.apache.commons.math3.linear.RealVectorTest.testSetSubVectorSameType",0,"@Test @Ignore(""Abstract class RealVector does not implement setSubvector(int,RealVector)"")@Override public void testSetSubVectorSameType(){}"
"org.apache.commons.math3.linear.RealVectorTest.testSetSubVectorMixedType",0,"@Test @Ignore(""Abstract class RealVector does not implement setSubvector(int,RealVector)"")@Override public void testSetSubVectorMixedType(){}"
"org.apache.commons.math3.linear.RealVectorTest.testSetSubVectorInvalidIndex1",0,"@Test @Ignore(""Abstract class RealVector does not implement setSubvector(int,RealVector)"")@Override public void testSetSubVectorInvalidIndex1(){}"
"org.apache.commons.math3.linear.RealVectorTest.testSetSubVectorInvalidIndex2",0,"@Test @Ignore(""Abstract class RealVector does not implement setSubvector(int,RealVector)"")@Override public void testSetSubVectorInvalidIndex2(){}"
"org.apache.commons.math3.linear.RealVectorTest.testSetSubVectorInvalidIndex3",0,"@Test @Ignore(""Abstract class RealVector does not implement setSubvector(int,RealVector)"")@Override public void testSetSubVectorInvalidIndex3(){}"
"org.apache.commons.math3.linear.RealVectorTest.testIsNaN",0,"@Test @Ignore(""Abstract class RealVector does not implement isNaN()"")@Override public void testIsNaN(){}"
"org.apache.commons.math3.linear.RealVectorTest.testIsInfinite",0,"@Test @Ignore(""Abstract class RealVector does not implement isNaN()"")@Override public void testIsInfinite(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEbeMultiplySameType",0,"@Test @Ignore(""Abstract class RealVector does not implement ebeMultiply(RealVector)"")@Override public void testEbeMultiplySameType(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEbeMultiplyMixedTypes",0,"@Test @Ignore(""Abstract class RealVector does not implement ebeMultiply(RealVector)"")@Override public void testEbeMultiplyMixedTypes(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEbeMultiplyDimensionMismatch",0,"@Test @Ignore(""Abstract class RealVector does not implement ebeMultiply(RealVector)"")@Override public void testEbeMultiplyDimensionMismatch(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEbeDivideSameType",0,"@Test @Ignore(""Abstract class RealVector does not implement ebeDivide(RealVector)"")@Override public void testEbeDivideSameType(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEbeDivideMixedTypes",0,"@Test @Ignore(""Abstract class RealVector does not implement ebeDivide(RealVector)"")@Override public void testEbeDivideMixedTypes(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEbeDivideDimensionMismatch",0,"@Test @Ignore(""Abstract class RealVector does not implement ebeDivide(RealVector)"")@Override public void testEbeDivideDimensionMismatch(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetL1Norm",0,"@Test @Ignore(""Abstract class RealVector does not implement getL1Norm()"")@Override public void testGetL1Norm(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetLInfNorm",0,"@Test @Ignore(""Abstract class RealVector does not implement getLInfNorm()"")@Override public void testGetLInfNorm(){}"
"org.apache.commons.math3.linear.RealVectorTest.testSparseIterator",0,"@Test public void testSparseIterator(){final double x=getPreferredEntryValue();final double[]data={x,x + 1d,x,x,x + 2d,x + 3d,x + 4d,x,x,x,x + 5d,x + 6d,x};RealVector v=create(data);Entry e;int i=0;final double[]nonDefault={x + 1d,x + 2d,x + 3d,x + 4d,x + 5d,x + 6d};for (Iterator<Entry> it=v.sparseIterator();it.hasNext();i++){e=it.next();Assert.assertEquals(nonDefault[i],e.getValue(),0);}double[]onlyOne={x,x + 1d,x};v=create(onlyOne);for (Iterator<Entry> it=v.sparseIterator();it.hasNext();){e=it.next();Assert.assertEquals(onlyOne[1],e.getValue(),0);}}"
"org.apache.commons.math3.linear.RealVectorTest.testSerial",0,"@Test @Ignore(""Abstract class RealVector is not serializable."")@Override public void testSerial(){}"
"org.apache.commons.math3.linear.RealVectorTest.testEquals",0,"@Test @Ignore(""Abstract class RealVector does not override equals(Object)."")@Override public void testEquals(){}"
"org.apache.commons.math3.linear.RealVectorTest.testGetDimension",0,"@Test public void testGetDimension(){final double x=getPreferredEntryValue();final double[]data1={x,x,x,x};Assert.assertEquals(data1.length,create(data1).getDimension());final double y=x + 1;final double[]data2={y,y,y,y};Assert.assertEquals(data2.length,create(data2).getDimension());}"
"org.apache.commons.math3.linear.RealVectorTest.testGetEntry",0,"@Test public void testGetEntry(){final double x=getPreferredEntryValue();final double[]data={x,1d,2d,x,x};final RealVector v=create(data);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,data[i],v.getEntry(i),0d);}}"
"org.apache.commons.math3.linear.RealVectorTest.testGetEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testGetEntryInvalidIndex1(){create(new double[4]).getEntry(-1);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testGetEntryInvalidIndex2(){create(new double[4]).getEntry(4);}"
"org.apache.commons.math3.linear.RealVectorTest.testSetEntry",0,"@Test public void testSetEntry(){final double x=getPreferredEntryValue();final double[]data={x,1d,2d,x,x};final double[]expected=MathArrays.copyOf(data);final RealVector actual=create(data);for (int i=0;i < data.length;i++){final double oldValue=data[i];final double newValue=oldValue + 1d;expected[i]=newValue;actual.setEntry(i,newValue);TestUtils.assertEquals(""while setting entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}for (int i=0;i < data.length;i++){final double oldValue=data[i];final double newValue=x;expected[i]=newValue;actual.setEntry(i,newValue);TestUtils.assertEquals(""while setting entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}}"
"org.apache.commons.math3.linear.RealVectorTest.testSetEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryInvalidIndex1(){create(new double[4]).setEntry(-1,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.RealVectorTest.testSetEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryInvalidIndex2(){create(new double[4]).setEntry(4,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.RealVectorTest.testAddToEntry",0,"@Test public void testAddToEntry(){final double x=getPreferredEntryValue();final double[]data1={x,1d,2d,x,x};final double[]data2={x,x,3d,x,4d,x};final double[]expected=MathArrays.copyOf(data1);final RealVector actual=create(data1);double increment=1d;for (int i=0;i < data1.length;i++){final double oldValue=data1[i];expected[i]+=increment;actual.addToEntry(i,increment);TestUtils.assertEquals(""while incrementing entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}for (int i=0;i < data1.length;i++){final double oldValue=data1[i];increment=x - oldValue;expected[i]=x;actual.addToEntry(i,increment);TestUtils.assertEquals(""while incrementing entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}}"
"org.apache.commons.math3.linear.RealVectorTest.testAddToEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testAddToEntryInvalidIndex1(){create(new double[3]).addToEntry(-1,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.RealVectorTest.testAddToEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testAddToEntryInvalidIndex2(){create(new double[3]).addToEntry(4,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.RealVectorTest.testAddSameType",0,"@Test public void testAddSameType(){doTestEbeBinaryOperation(BinaryOperation.ADD,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testAddMixedTypes",0,"@Test public void testAddMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.ADD,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testAddDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testAddDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.ADD);}"
"org.apache.commons.math3.linear.RealVectorTest.testSubtractSameType",0,"@Test public void testSubtractSameType(){doTestEbeBinaryOperation(BinaryOperation.SUB,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testSubtractMixedTypes",0,"@Test public void testSubtractMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.SUB,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testSubtractDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testSubtractDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.SUB);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetDistanceSameType",0,"@Test public void testGetDistanceSameType(){doTestGetDistance(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetDistanceMixedTypes",0,"@Test public void testGetDistanceMixedTypes(){doTestGetDistance(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetDistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetDistanceDimensionMismatch(){create(new double[4]).getDistance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.RealVectorTest.testGetNorm",0,"@Test public void testGetNorm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getNorm();double expected=0d;for (int i=0;i < data.length;i++){expected+=data[i]* data[i];}expected=FastMath.sqrt(expected);Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetL1DistanceSameType",0,"@Test public void testGetL1DistanceSameType(){doTestGetL1Distance(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetL1DistanceMixedTypes",0,"@Test public void testGetL1DistanceMixedTypes(){doTestGetL1Distance(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetL1DistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetL1DistanceDimensionMismatch(){create(new double[4]).getL1Distance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.RealVectorTest.testGetLInfDistanceSameType",0,"@Test public void testGetLInfDistanceSameType(){doTestGetLInfDistance(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetLInfDistanceMixedTypes",0,"@Test public void testGetLInfDistanceMixedTypes(){doTestGetLInfDistance(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testGetLInfDistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetLInfDistanceDimensionMismatch(){create(new double[4]).getLInfDistance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.RealVectorTest.testMapAdd",0,"@Test public void testMapAdd(){doTestMapBinaryOperation(BinaryOperation.ADD,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapAddToSelf",0,"@Test public void testMapAddToSelf(){doTestMapBinaryOperation(BinaryOperation.ADD,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapSubtract",0,"@Test public void testMapSubtract(){doTestMapBinaryOperation(BinaryOperation.SUB,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapSubtractToSelf",0,"@Test public void testMapSubtractToSelf(){doTestMapBinaryOperation(BinaryOperation.SUB,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapMultiply",0,"@Test public void testMapMultiply(){doTestMapBinaryOperation(BinaryOperation.MUL,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapMultiplyToSelf",0,"@Test public void testMapMultiplyToSelf(){doTestMapBinaryOperation(BinaryOperation.MUL,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapDivide",0,"@Test public void testMapDivide(){doTestMapBinaryOperation(BinaryOperation.DIV,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testMapDivideToSelf",0,"@Test public void testMapDivideToSelf(){doTestMapBinaryOperation(BinaryOperation.DIV,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testMap",0,"@Test public void testMap(){final UnivariateFunction[]functions=createFunctions();for(UnivariateFunction f : functions){doTestMapFunction(f,false);}}"
"org.apache.commons.math3.linear.RealVectorTest.testMapToSelf",0,"@Test public void testMapToSelf(){final UnivariateFunction[]functions=createFunctions();for(UnivariateFunction f : functions){doTestMapFunction(f,true);}}"
"org.apache.commons.math3.linear.RealVectorTest.testOuterProductSameType",0,"@Test public void testOuterProductSameType(){doTestOuterProduct(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testOuterProductMixedTypes",0,"@Test public void testOuterProductMixedTypes(){doTestOuterProduct(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testProjectionSameType",0,"@Test public void testProjectionSameType(){doTestProjection(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testProjectionMixedTypes",0,"@Test public void testProjectionMixedTypes(){doTestProjection(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testProjectionNullVector",0,"@Test(expected=MathArithmeticException.class)public void testProjectionNullVector(){create(new double[4]).projection(create(new double[4]));}"
"org.apache.commons.math3.linear.RealVectorTest.testProjectionDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testProjectionDimensionMismatch(){final RealVector v1=create(new double[4]);final RealVector v2=create(new double[5]);v2.set(1.0);v1.projection(v2);}"
"org.apache.commons.math3.linear.RealVectorTest.testSet",0,"@Test public void testSet(){for (int i=0;i < values.length;i++){final double expected=values[i];final RealVector v=create(values);v.set(expected);for (int j=0;j < values.length;j++){Assert.assertEquals(""entry #"" + j,expected,v.getEntry(j),0);}}}"
"org.apache.commons.math3.linear.RealVectorTest.testToArray",0,"@Test public void testToArray(){final double[]data=create(values).toArray();Assert.assertNotSame(values,data);for (int i=0;i < values.length;i++){Assert.assertEquals(""entry #"" + i,values[i],data[i],0);}}"
"org.apache.commons.math3.linear.RealVectorTest.testUnitVector",0,"@Test public void testUnitVector(){doTestUnitVector(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testUnitize",0,"@Test public void testUnitize(){doTestUnitVector(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testUnitVectorNullVector",0,"@Test(expected=ArithmeticException.class)public void testUnitVectorNullVector(){doTestUnitVectorNullVector(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testUnitizeNullVector",0,"@Test(expected=ArithmeticException.class)public void testUnitizeNullVector(){doTestUnitVectorNullVector(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testIterator",0,"@Test public void testIterator(){final RealVector v=create(values);final Iterator<RealVector.Entry> it=v.iterator();for (int i=0;i < values.length;i++){Assert.assertTrue(""entry #"" + i,it.hasNext());final RealVector.Entry e=it.next();Assert.assertEquals("""",i,e.getIndex());Assert.assertEquals("""",values[i],e.getValue(),0d);try {it.remove();Assert.fail(""UnsupportedOperationException should have been thrown"");}catch(UnsupportedOperationException exc){}}Assert.assertFalse(it.hasNext());try {it.next();Assert.fail(""NoSuchElementException should have been thrown"");}catch(NoSuchElementException e){}}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineSameType",0,"@Test public void testCombineSameType(){doTestCombine(false,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineMixedTypes",0,"@Test public void testCombineMixedTypes(){doTestCombine(false,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testCombineDimensionMismatchSameType(){doTestCombineDimensionMismatch(false,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testCombineDimensionMismatchMixedTypes(){doTestCombineDimensionMismatch(false,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineToSelfSameType",0,"@Test public void testCombineToSelfSameType(){doTestCombine(true,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineToSelfMixedTypes",0,"@Test public void testCombineToSelfMixedTypes(){doTestCombine(true,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineToSelfDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testCombineToSelfDimensionMismatchSameType(){doTestCombineDimensionMismatch(true,false);}"
"org.apache.commons.math3.linear.RealVectorTest.testCombineToSelfDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testCombineToSelfDimensionMismatchMixedTypes(){doTestCombineDimensionMismatch(true,true);}"
"org.apache.commons.math3.linear.RealVectorTest.testCopy",0,"@Test public void testCopy(){final RealVector v=create(values);final RealVector w=v.copy();Assert.assertNotSame(v,w);TestUtils.assertEquals("""",values,w,0d);}"
"org.apache.commons.math3.linear.RealVectorTest.testDotProductSameType",0,"@Test public void testDotProductSameType(){doTestDotProductRegularValues(false);doTestDotProductSpecialValues(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testDotProductDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testDotProductDimensionMismatchSameType(){doTestDotProductDimensionMismatch(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testDotProductMixedTypes",0,"@Test public void testDotProductMixedTypes(){doTestDotProductRegularValues(true);doTestDotProductSpecialValues(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testDotProductDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testDotProductDimensionMismatchMixedTypes(){doTestDotProductDimensionMismatch(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testCosineSameType",0,"@Test public void testCosineSameType(){doTestCosine(false);}"
"org.apache.commons.math3.linear.RealVectorTest.testCosineMixedTypes",0,"@Test public void testCosineMixedTypes(){doTestCosine(true);}"
"org.apache.commons.math3.linear.RealVectorTest.testCosineLeftNullVector",0,"@Test(expected=MathArithmeticException.class)public void testCosineLeftNullVector(){final RealVector v=create(new double[]{0,0,0});final RealVector w=create(new double[]{1,0,0});v.cosine(w);}"
"org.apache.commons.math3.linear.RealVectorTest.testCosineRightNullVector",0,"@Test(expected=MathArithmeticException.class)public void testCosineRightNullVector(){final RealVector v=create(new double[]{0,0,0});final RealVector w=create(new double[]{1,0,0});w.cosine(v);}"
"org.apache.commons.math3.linear.RealVectorTest.testCosineDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testCosineDimensionMismatch(){final RealVector v=create(new double[]{1,2,3});final RealVector w=create(new double[]{1,2,3,4});v.cosine(w);}"
"org.apache.commons.math3.linear.RealVectorTest.testMinMax",0,"@Test public void testMinMax(){final RealVector v1=create(new double[]{0,-6,4,12,7});Assert.assertEquals(1,v1.getMinIndex());Assert.assertEquals(-6,v1.getMinValue(),1.0e-12);Assert.assertEquals(3,v1.getMaxIndex());Assert.assertEquals(12,v1.getMaxValue(),1.0e-12);final RealVector v2=create(new double[]{Double.NaN,3,Double.NaN,-2});Assert.assertEquals(3,v2.getMinIndex());Assert.assertEquals(-2,v2.getMinValue(),1.0e-12);Assert.assertEquals(1,v2.getMaxIndex());Assert.assertEquals(3,v2.getMaxValue(),1.0e-12);final RealVector v3=create(new double[]{Double.NaN,Double.NaN});Assert.assertEquals(-1,v3.getMinIndex());Assert.assertTrue(Double.isNaN(v3.getMinValue()));Assert.assertEquals(-1,v3.getMaxIndex());Assert.assertTrue(Double.isNaN(v3.getMaxValue()));final RealVector v4=create(new double[0]);Assert.assertEquals(-1,v4.getMinIndex());Assert.assertTrue(Double.isNaN(v4.getMinValue()));Assert.assertEquals(-1,v4.getMaxIndex());Assert.assertTrue(Double.isNaN(v4.getMaxValue()));}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInDefaultOrderPreservingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInDefaultOrderPreservingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private int expectedIndex;public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);expectedIndex=0;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor);}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInDefaultOrderPreservingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInDefaultOrderPreservingVisitor2(){final RealVector v=create(new double[5]);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){public void visit(int index,double value){}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInDefaultOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInDefaultOrderPreservingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInDefaultOrderPreservingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private int expectedIndex;public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);expectedIndex=expectedStart;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInOptimizedOrderPreservingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInOptimizedOrderPreservingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private final boolean[]visited=new boolean[data.length];public void visit(final int actualIndex,final double actualValue){visited[actualIndex]=true;Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);Arrays.fill(visited,false);}public double end(){for (int i=0;i < data.length;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor);}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInOptimizedOrderPreservingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInOptimizedOrderPreservingVisitor2(){final RealVector v=create(new double[5]);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){public void visit(int index,double value){}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInOptimizedOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInOptimizedOrderPreservingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInOptimizedOrderPreservingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private final boolean[]visited=new boolean[data.length];public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);visited[actualIndex]=true;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);Arrays.fill(visited,true);}public double end(){for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor,expectedStart,expectedEnd);}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInDefaultOrderChangingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInDefaultOrderChangingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private int expectedIndex;public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);expectedIndex=0;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInDefaultOrderChangingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInDefaultOrderChangingVisitor2(){final RealVector v=create(new double[5]);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){public double visit(int index,double value){return 0.0;}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInDefaultOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInDefaultOrderChangingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInDefaultOrderChangingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private int expectedIndex;public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);expectedIndex=expectedStart;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInOptimizedOrderChangingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInOptimizedOrderChangingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private final boolean[]visited=new boolean[data.length];public double visit(final int actualIndex,final double actualValue){visited[actualIndex]=true;Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);Arrays.fill(visited,false);}public double end(){for (int i=0;i < data.length;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInOptimizedOrderChangingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInOptimizedOrderChangingVisitor2(){final RealVector v=create(new double[5]);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){public double visit(int index,double value){return 0.0;}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInOptimizedOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.RealVectorTest.testWalkInOptimizedOrderChangingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInOptimizedOrderChangingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private final boolean[]visited=new boolean[data.length];public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);visited[actualIndex]=true;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);Arrays.fill(visited,true);}public double end(){for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor,expectedStart,expectedEnd);for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testSinMin",0,"@Test public void testSinMin(){UnivariateFunction f=new Sin();UnivariateOptimizer underlying=new BrentOptimizer(1e-10,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(44428400075l);UnivariateMultiStartOptimizer<UnivariateFunction> optimizer=new UnivariateMultiStartOptimizer<UnivariateFunction>(underlying,10,g);optimizer.optimize(300,f,GoalType.MINIMIZE,-100.0,100.0);UnivariatePointValuePair[]optima=optimizer.getOptima();for (int i=1;i < optima.length;++i){double d=(optima[i].getPoint()- optima[i - 1].getPoint())/ (2 * FastMath.PI);Assert.assertTrue(FastMath.abs(d - FastMath.rint(d))< 1.0e-8);Assert.assertEquals(-1.0,f.value(optima[i].getPoint()),1.0e-10);Assert.assertEquals(f.value(optima[i].getPoint()),optima[i].getValue(),1.0e-10);}Assert.assertTrue(optimizer.getEvaluations()> 200);Assert.assertTrue(optimizer.getEvaluations()< 300);}"
"org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testQuinticMin",0,"@Test public void testQuinticMin(){UnivariateFunction f=new QuinticFunction();UnivariateOptimizer underlying=new BrentOptimizer(1e-9,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(4312000053L);UnivariateMultiStartOptimizer<UnivariateFunction> optimizer=new UnivariateMultiStartOptimizer<UnivariateFunction>(underlying,5,g);UnivariatePointValuePair optimum=optimizer.optimize(300,f,GoalType.MINIMIZE,-0.3,-0.2);Assert.assertEquals(-0.2719561293,optimum.getPoint(),1e-9);Assert.assertEquals(-0.0443342695,optimum.getValue(),1e-9);UnivariatePointValuePair[]optima=optimizer.getOptima();for (int i=0;i < optima.length;++i){Assert.assertEquals(f.value(optima[i].getPoint()),optima[i].getValue(),1e-9);}Assert.assertTrue(optimizer.getEvaluations()>= 50);Assert.assertTrue(optimizer.getEvaluations()<= 100);}"
"org.apache.commons.math3.optimization.univariate.UnivariateMultiStartOptimizerTest.testBadFunction",0,"@Test public void testBadFunction(){UnivariateFunction f=new UnivariateFunction(){public double value(double x){if (x < 0){throw new LocalException();}return 0;}};UnivariateOptimizer underlying=new BrentOptimizer(1e-9,1e-14);JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(4312000053L);UnivariateMultiStartOptimizer<UnivariateFunction> optimizer=new UnivariateMultiStartOptimizer<UnivariateFunction>(underlying,5,g);try {optimizer.optimize(300,f,GoalType.MINIMIZE,-0.3,-0.2);Assert.fail();}catch(LocalException e){}Assert.assertTrue(optimizer.getOptima()[0]== null);}"
"org.apache.commons.math3.analysis.solvers.RiddersSolverTest.testSinFunction",0,"/** * Test of solver for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateSolver solver=new RiddersSolver();double min,max,expected,result,tolerance;min=3.0;max=4.0;expected=FastMath.PI;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-1.0;max=1.5;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.RiddersSolverTest.testQuinticFunction",0,"/** * Test of solver for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateSolver solver=new RiddersSolver();double min,max,expected,result,tolerance;min=-0.4;max=0.2;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=0.75;max=1.5;expected=1.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-0.9;max=-0.2;expected=-0.5;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.RiddersSolverTest.testExpm1Function",0,"/** * Test of solver for the exponential function.*/@Test public void testExpm1Function(){UnivariateFunction f=new Expm1();UnivariateSolver solver=new RiddersSolver();double min,max,expected,result,tolerance;min=-1.0;max=2.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-20.0;max=10.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);min=-50.0;max=100.0;expected=0.0;tolerance=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(expected * solver.getRelativeAccuracy()));result=solver.solve(100,f,min,max);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.solvers.RiddersSolverTest.testParameters",0,"/** * Test of parameters for the solver.*/@Test public void testParameters(){UnivariateFunction f=new Sin();UnivariateSolver solver=new RiddersSolver();try {solver.solve(100,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {solver.solve(100,f,2,3);Assert.fail(""Expecting NoBracketingException - no bracketing"");}catch(NoBracketingException ex){}}"
"org.apache.commons.math3.filter.KalmanFilterTest.testTransitionMeasurementMatrixMismatch",0,"@Test(expected=MatrixDimensionMismatchException.class)public void testTransitionMeasurementMatrixMismatch(){RealMatrix A=new Array2DRowRealMatrix(new double[]{1d});RealMatrix B=null;RealMatrix H=new Array2DRowRealMatrix(new double[]{1d,1d});RealMatrix Q=new Array2DRowRealMatrix(new double[]{0});RealMatrix R=new Array2DRowRealMatrix(new double[]{0});ProcessModel pm=new DefaultProcessModel(A,B,Q,new ArrayRealVector(new double[]{0}),null);MeasurementModel mm=new DefaultMeasurementModel(H,R);new KalmanFilter(pm,mm);Assert.fail(""transition and measurement matrix should not be compatible"");}"
"org.apache.commons.math3.filter.KalmanFilterTest.testTransitionControlMatrixMismatch",0,"@Test(expected=MatrixDimensionMismatchException.class)public void testTransitionControlMatrixMismatch(){RealMatrix A=new Array2DRowRealMatrix(new double[]{1d});RealMatrix B=new Array2DRowRealMatrix(new double[]{1d,1d});RealMatrix H=new Array2DRowRealMatrix(new double[]{1d});RealMatrix Q=new Array2DRowRealMatrix(new double[]{0});RealMatrix R=new Array2DRowRealMatrix(new double[]{0});ProcessModel pm=new DefaultProcessModel(A,B,Q,new ArrayRealVector(new double[]{0}),null);MeasurementModel mm=new DefaultMeasurementModel(H,R);new KalmanFilter(pm,mm);Assert.fail(""transition and control matrix should not be compatible"");}"
"org.apache.commons.math3.filter.KalmanFilterTest.testConstant",0,"@Test public void testConstant(){double constantValue=10d;double measurementNoise=0.1d;double processNoise=1e-5d;RealMatrix A=new Array2DRowRealMatrix(new double[]{1d});RealMatrix B=null;RealMatrix H=new Array2DRowRealMatrix(new double[]{1d});RealVector x=new ArrayRealVector(new double[]{constantValue});RealMatrix Q=new Array2DRowRealMatrix(new double[]{processNoise});RealMatrix R=new Array2DRowRealMatrix(new double[]{measurementNoise});ProcessModel pm=new DefaultProcessModel(A,B,Q,new ArrayRealVector(new double[]{constantValue}),null);MeasurementModel mm=new DefaultMeasurementModel(H,R);KalmanFilter filter=new KalmanFilter(pm,mm);Assert.assertEquals(1,filter.getMeasurementDimension());Assert.assertEquals(1,filter.getStateDimension());assertMatrixEquals(Q.getData(),filter.getErrorCovariance());double[]expectedInitialState=new double[]{constantValue};assertVectorEquals(expectedInitialState,filter.getStateEstimation());RealVector pNoise=new ArrayRealVector(1);RealVector mNoise=new ArrayRealVector(1);RandomGenerator rand=new JDKRandomGenerator();for (int i=0;i < 60;i++){filter.predict();pNoise.setEntry(0,processNoise * rand.nextGaussian());x=A.operate(x).add(pNoise);mNoise.setEntry(0,measurementNoise * rand.nextGaussian());RealVector z=H.operate(x).add(mNoise);filter.correct(z);double diff=Math.abs(constantValue - filter.getStateEstimation()[0]);Assert.assertTrue(Precision.compareTo(diff,measurementNoise,1e-6)< 0);}Assert.assertTrue(Precision.compareTo(filter.getErrorCovariance()[0][0],0.02d,1e-6)< 0);}"
"org.apache.commons.math3.filter.KalmanFilterTest.testConstantAcceleration",0,"@Test public void testConstantAcceleration(){double dt=0.1d;double measurementNoise=10d;double accelNoise=0.2d;RealMatrix A=new Array2DRowRealMatrix(new double[][]{{1,dt},{0,1}});RealMatrix B=new Array2DRowRealMatrix(new double[][]{{Math.pow(dt,2d)/ 2d},{dt}});RealMatrix H=new Array2DRowRealMatrix(new double[][]{{1d,0d}});RealVector x=new ArrayRealVector(new double[]{0,0});RealMatrix tmp=new Array2DRowRealMatrix(new double[][]{{Math.pow(dt,4d)/ 4d,Math.pow(dt,3d)/ 2d},{Math.pow(dt,3d)/ 2d,Math.pow(dt,2d)}});RealMatrix Q=tmp.scalarMultiply(Math.pow(accelNoise,2));RealMatrix P0=new Array2DRowRealMatrix(new double[][]{{1,1},{1,1}});RealMatrix R=new Array2DRowRealMatrix(new double[]{Math.pow(measurementNoise,2)});RealVector u=new ArrayRealVector(new double[]{0.1d});ProcessModel pm=new DefaultProcessModel(A,B,Q,x,P0);MeasurementModel mm=new DefaultMeasurementModel(H,R);KalmanFilter filter=new KalmanFilter(pm,mm);Assert.assertEquals(1,filter.getMeasurementDimension());Assert.assertEquals(2,filter.getStateDimension());assertMatrixEquals(P0.getData(),filter.getErrorCovariance());double[]expectedInitialState=new double[]{0.0,0.0};assertVectorEquals(expectedInitialState,filter.getStateEstimation());RandomGenerator rand=new JDKRandomGenerator();RealVector tmpPNoise=new ArrayRealVector(new double[]{Math.pow(dt,2d)/ 2d,dt});RealVector mNoise=new ArrayRealVector(1);for (int i=0;i < 60;i++){filter.predict(u);RealVector pNoise=tmpPNoise.mapMultiply(accelNoise * rand.nextGaussian());x=A.operate(x).add(B.operate(u)).add(pNoise);mNoise.setEntry(0,measurementNoise * rand.nextGaussian());RealVector z=H.operate(x).add(mNoise);filter.correct(z);double diff=Math.abs(x.getEntry(0)- filter.getStateEstimation()[0]);Assert.assertTrue(Precision.compareTo(diff,measurementNoise,1e-6)< 0);}Assert.assertTrue(Precision.compareTo(filter.getErrorCovariance()[1][1],0.1d,1e-6)< 0);}"
"org.apache.commons.math3.ode.events.EventStateTest.closeEvents",0,"@Test public void closeEvents()throws MaxCountExceededException,NoBracketingException {final double r1=90.0;final double r2=135.0;final double gap=r2 - r1;EventHandler closeEventsGenerator=new EventHandler(){public void init(double t0,double[]y0,double t){}public void resetState(double t,double[]y){}public double g(double t,double[]y){return (t - r1)* (r2 - t);}public Action eventOccurred(double t,double[]y,boolean increasing){return Action.CONTINUE;}};final double tolerance=0.1;EventState es=new EventState(closeEventsGenerator,1.5 * gap,tolerance,100,new BrentSolver(tolerance));es.setExpandable(new ExpandableStatefulODE(new FirstOrderDifferentialEquations(){public int getDimension(){return 0;}public void computeDerivatives(double t,double[]y,double[]yDot){}}));AbstractStepInterpolator interpolator=new DummyStepInterpolator(new double[0],new double[0],true);interpolator.storeTime(r1 - 2.5 * gap);interpolator.shift();interpolator.storeTime(r1 - 1.5 * gap);es.reinitializeBegin(interpolator);interpolator.shift();interpolator.storeTime(r1 - 0.5 * gap);Assert.assertFalse(es.evaluateStep(interpolator));interpolator.shift();interpolator.storeTime(0.5 * (r1 + r2));Assert.assertTrue(es.evaluateStep(interpolator));Assert.assertEquals(r1,es.getEventTime(),tolerance);es.stepAccepted(es.getEventTime(),new double[0]);interpolator.shift();interpolator.storeTime(r2 + 0.4 * gap);Assert.assertTrue(es.evaluateStep(interpolator));Assert.assertEquals(r2,es.getEventTime(),tolerance);}"
"org.apache.commons.math3.ode.events.EventStateTest.testIssue695",0,"@Test public void testIssue695()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {FirstOrderDifferentialEquations equation=new FirstOrderDifferentialEquations(){public int getDimension(){return 1;}public void computeDerivatives(double t,double[]y,double[]yDot){yDot[0]=1.0;}};DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.001,1000,1.0e-14,1.0e-14);integrator.addEventHandler(new ResettingEvent(10.99),0.1,1.0e-9,1000);integrator.addEventHandler(new ResettingEvent(11.01),0.1,1.0e-9,1000);integrator.setInitialStepSize(3.0);double target=30.0;double[]y=new double[1];double tEnd=integrator.integrate(equation,0.0,y,target,y);Assert.assertEquals(target,tEnd,1.0e-10);Assert.assertEquals(32.0,y[0],1.0e-10);}"
"org.apache.commons.math3.ode.events.EventStateTest.testIssue965",0,"@Test public void testIssue965()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {ExpandableStatefulODE equation=new ExpandableStatefulODE(new FirstOrderDifferentialEquations(){public int getDimension(){return 1;}public void computeDerivatives(double t,double[]y,double[]yDot){yDot[0]=2.0;}});equation.setTime(0.0);equation.setPrimaryState(new double[1]);equation.addSecondaryEquations(new SecondaryEquations(){public int getDimension(){return 1;}public void computeDerivatives(double t,double[]primary,double[]primaryDot,double[]secondary,double[]secondaryDot){secondaryDot[0]=-3.0;}});int index=equation.getSecondaryMappers()[0].getFirstIndex();DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.001,1000,1.0e-14,1.0e-14);integrator.addEventHandler(new SecondaryStateEvent(index,-3.0),0.1,1.0e-9,1000);integrator.setInitialStepSize(3.0);integrator.integrate(equation,30.0);Assert.assertEquals(1.0,equation.getTime(),1.0e-10);Assert.assertEquals(2.0,equation.getPrimaryState()[0],1.0e-10);Assert.assertEquals(-3.0,equation.getSecondaryState(0)[0],1.0e-10);}"
"org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest.testSinFunction",0,"/** * Test of interpolator for the sine function. <p> |sin^(n)(zeta)| <= 1.0,zeta in [0,2*PI]*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateInterpolator interpolator=new NevilleInterpolator();double x[],y[],z,expected,result,tolerance;int n=6;double min=0.0,max=2 * FastMath.PI;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=1.0;UnivariateFunction p=interpolator.interpolate(x,y);z=FastMath.PI / 4;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);z=FastMath.PI * 1.5;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest.testExpm1Function",0,"/** * Test of interpolator for the exponential function. <p> |expm1^(n)(zeta)| <= e,zeta in [-1,1]*/@Test public void testExpm1Function(){UnivariateFunction f=new Expm1();UnivariateInterpolator interpolator=new NevilleInterpolator();double x[],y[],z,expected,result,tolerance;int n=5;double min=-1.0,max=1.0;x=new double[n];y=new double[n];for (int i=0;i < n;i++){x[i]=min + i * (max - min)/ n;y[i]=f.value(x[i]);}double derivativebound=FastMath.E;UnivariateFunction p=interpolator.interpolate(x,y);z=0.0;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);z=0.5;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);z=-0.5;expected=f.value(z);result=p.value(z);tolerance=FastMath.abs(derivativebound * partialerror(x,z));Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.interpolation.NevilleInterpolatorTest.testParameters",0,"/** * Test of parameters for the interpolator.*/@Test public void testParameters(){UnivariateInterpolator interpolator=new NevilleInterpolator();try {double x[]={1.0,2.0,2.0,4.0};double y[]={0.0,4.0,4.0,2.5};UnivariateFunction p=interpolator.interpolate(x,y);p.value(0.0);Assert.fail(""Expecting NonMonotonicSequenceException - bad abscissas array"");}catch(NonMonotonicSequenceException ex){}}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilityExtremes",0,"@Test public void testCumulativeProbabilityExtremes(){setCumulativeTestPoints(new double[]{-2,0});setCumulativeTestValues(new double[]{0,0});verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilityExtremes",0,"@Test public void testInverseCumulativeProbabilityExtremes(){setInverseCumulativeTestPoints(new double[]{0,1});setInverseCumulativeTestValues(new double[]{0,Double.POSITIVE_INFINITY});verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbability2",0,"@Test public void testCumulativeProbability2(){double actual=getDistribution().cumulativeProbability(0.25,0.75);Assert.assertEquals(0.0905214,actual,10e-4);}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensity",0,"@Test public void testDensity(){ExponentialDistribution d1=new ExponentialDistribution(1);Assert.assertTrue(Precision.equals(0.0,d1.density(-1e-9),1));Assert.assertTrue(Precision.equals(1.0,d1.density(0.0),1));Assert.assertTrue(Precision.equals(0.0,d1.density(1000.0),1));Assert.assertTrue(Precision.equals(FastMath.exp(-1),d1.density(1.0),1));Assert.assertTrue(Precision.equals(FastMath.exp(-2),d1.density(2.0),1));ExponentialDistribution d2=new ExponentialDistribution(3);Assert.assertTrue(Precision.equals(1 / 3.0,d2.density(0.0),1));Assert.assertEquals(0.2388437702,d2.density(1.0),1e-8);Assert.assertEquals(0.1711390397,d2.density(2.0),1e-8);}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testMeanAccessors",0,"@Test public void testMeanAccessors(){ExponentialDistribution distribution=(ExponentialDistribution)getDistribution();Assert.assertEquals(5d,distribution.getMean(),Double.MIN_VALUE);}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testPreconditions",0,"@Test(expected=NotStrictlyPositiveException.class)public void testPreconditions(){new ExponentialDistribution(0);}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testMoments",0,"@Test public void testMoments(){final double tol=1e-9;ExponentialDistribution dist;dist=new ExponentialDistribution(11d);Assert.assertEquals(dist.getNumericalMean(),11d,tol);Assert.assertEquals(dist.getNumericalVariance(),11d * 11d,tol);dist=new ExponentialDistribution(10.5d);Assert.assertEquals(dist.getNumericalMean(),10.5d,tol);Assert.assertEquals(dist.getNumericalVariance(),10.5d * 10.5d,tol);}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testCumulativeProbabilities",0,"/** * Verifies that cumulative probability density calculations match expected values using default test instance data*/@Test public void testCumulativeProbabilities(){verifyCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testInverseCumulativeProbabilities",0,"/** * Verifies that inverse cumulative probability density calculations match expected values using default test instance data*/@Test public void testInverseCumulativeProbabilities(){verifyInverseCumulativeProbabilities();}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensities",0,"/** * Verifies that density calculations return expected values for default test instance data*/@Test public void testDensities(){verifyDensities();}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testConsistency",0,"/** * Verifies that probability computations are consistent*/@Test public void testConsistency(){for (int i=1;i < cumulativeTestPoints.length;i++){TestUtils.assertEquals(0d,distribution.cumulativeProbability(cumulativeTestPoints[i],cumulativeTestPoints[i]),tolerance);double upper=FastMath.max(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double lower=FastMath.min(cumulativeTestPoints[i],cumulativeTestPoints[i - 1]);double diff=distribution.cumulativeProbability(upper)- distribution.cumulativeProbability(lower);double direct=distribution.cumulativeProbability(lower,upper);TestUtils.assertEquals(""Inconsistent cumulative probabilities for ("" + lower + "",""+ upper+ "")"",diff,direct,tolerance);}}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testIllegalArguments",0,"/** * Verifies that illegal arguments are correctly handled*/@Test public void testIllegalArguments(){try {distribution.cumulativeProbability(1,0);Assert.fail(""Expecting MathIllegalArgumentException for bad cumulativeProbability interval"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(-1);Assert.fail(""Expecting MathIllegalArgumentException for p = -1"");}catch(MathIllegalArgumentException ex){}try {distribution.inverseCumulativeProbability(2);Assert.fail(""Expecting MathIllegalArgumentException for p = 2"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testSampling",0,"/** * Test sampling*/@Test public void testSampling(){final int sampleSize=1000;distribution.reseedRandomGenerator(1000);double[]sample=distribution.sample(sampleSize);double[]quartiles=TestUtils.getDistributionQuartiles(distribution);double[]expected={250,250,250,250};long[]counts=new long[4];for (int i=0;i < sampleSize;i++){TestUtils.updateCounts(sample[i],counts,quartiles);}TestUtils.assertChiSquareAccept(expected,counts,0.001);}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testDensityIntegrals",0,"/** * Verify that density integrals match the distribution. The (filtered,sorted)cumulativeTestPoints array is used to source integration limits. The integral of the density (estimated using a Legendre-Gauss integrator)is compared with the cdf over the same interval. Test points outside of the domain of the density function are discarded.*/@Test public void testDensityIntegrals(){final double tol=1.0e-9;final BaseAbstractUnivariateIntegrator integrator=new IterativeLegendreGaussIntegrator(5,1.0e-12,1.0e-10);final UnivariateFunction d=new UnivariateFunction(){public double value(double x){return distribution.density(x);}};final ArrayList<Double> integrationTestPoints=new ArrayList<Double>();for (int i=0;i < cumulativeTestPoints.length;i++){if (Double.isNaN(cumulativeTestValues[i])|| cumulativeTestValues[i]< 1.0e-5 || cumulativeTestValues[i]> 1 - 1.0e-5){continue;}integrationTestPoints.add(cumulativeTestPoints[i]);}Collections.sort(integrationTestPoints);for (int i=1;i < integrationTestPoints.size();i++){Assert.assertEquals(distribution.cumulativeProbability(integrationTestPoints.get(0),integrationTestPoints.get(i)),integrator.integrate(1000000,d,integrationTestPoints.get(0),integrationTestPoints.get(i)),tol);}}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportLowerBoundInclusive",0,"/** * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportLowerBoundInclusive(){final double lowerBound=distribution.getSupportLowerBound();double result=Double.NaN;result=distribution.density(lowerBound);Assert.assertEquals(!Double.isInfinite(lowerBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportLowerBoundInclusive());}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testIsSupportUpperBoundInclusive",0,"/** * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound is finite and density is non-NaN,non-infinite there.*/@Test public void testIsSupportUpperBoundInclusive(){final double upperBound=distribution.getSupportUpperBound();double result=Double.NaN;result=distribution.density(upperBound);Assert.assertEquals(!Double.isInfinite(upperBound)&& !Double.isNaN(result)&& !Double.isInfinite(result),distribution.isSupportUpperBoundInclusive());}"
"org.apache.commons.math3.distribution.ExponentialDistributionTest.testDistributionClone",0,"@Test public void testDistributionClone()throws IOException,ClassNotFoundException {distribution.reseedRandomGenerator(123);distribution.sample();final RealDistribution cloned=deepClone();final double s1=distribution.sample();final double s2=cloned.sample();Assert.assertEquals(s1,s2,0d);}"
"org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest.testPreconditions",0,"/** * Test preconditions.*/@Test public void testPreconditions(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2.5};double[][]zval=new double[xval.length][yval.length];BivariateGridInterpolator interpolator=new SmoothingPolynomialBicubicSplineInterpolator(0);@SuppressWarnings(""unused"")BivariateFunction p=interpolator.interpolate(xval,yval,zval);double[]wxval=new double[]{3,2,5,6.5};try {p=interpolator.interpolate(wxval,yval,zval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wyval=new double[]{-4,-3,-1,-1};try {p=interpolator.interpolate(xval,wyval,zval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[][]wzval=new double[xval.length][yval.length + 1];try {p=interpolator.interpolate(xval,yval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wzval=new double[xval.length - 1][yval.length];try {p=interpolator.interpolate(xval,yval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wzval=new double[xval.length][yval.length - 1];try {p=interpolator.interpolate(xval,yval,wzval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}}"
"org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest.testPlane",0,"/** * Test of interpolator for a plane. <p> z = 2 x - 3 y + 5*/@Test public void testPlane(){BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x - 3 * y + 5 + ((int)(FastMath.abs(5 * x + 3 * y))% 2 == 0 ? 1 : -1);}};BivariateGridInterpolator interpolator=new SmoothingPolynomialBicubicSplineInterpolator(1);double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}BivariateFunction p=interpolator.interpolate(xval,yval,zval);double x,y;double expected,result;x=4;y=-3;expected=f.value(x,y);result=p.value(x,y);Assert.assertEquals(""On sample point"",expected,result,2);x=4.5;y=-1.5;expected=f.value(x,y);result=p.value(x,y);Assert.assertEquals(""half-way between sample points (middle of the patch)"",expected,result,2);x=3.5;y=-3.5;expected=f.value(x,y);result=p.value(x,y);Assert.assertEquals(""half-way between sample points (border of the patch)"",expected,result,2);}"
"org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest.testParaboloid",0,"/** * Test of interpolator for a paraboloid. <p> z = 2 x<sup>2</sup> - 3 y<sup>2</sup> + 4 x y - 5*/@Test public void testParaboloid(){BivariateFunction f=new BivariateFunction(){public double value(double x,double y){return 2 * x * x - 3 * y * y + 4 * x * y - 5 + ((int)(FastMath.abs(5 * x + 3 * y))% 2 == 0 ? 1 : -1);}};BivariateGridInterpolator interpolator=new SmoothingPolynomialBicubicSplineInterpolator(4);double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-2,-1,0.5,2.5};double[][]zval=new double[xval.length][yval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){zval[i][j]=f.value(xval[i],yval[j]);}}BivariateFunction p=interpolator.interpolate(xval,yval,zval);double x,y;double expected,result;x=5;y=0.5;expected=f.value(x,y);result=p.value(x,y);Assert.assertEquals(""On sample point"",expected,result,2);x=4.5;y=-1.5;expected=f.value(x,y);result=p.value(x,y);Assert.assertEquals(""half-way between sample points (middle of the patch)"",expected,result,2);x=3.5;y=-3.5;expected=f.value(x,y);result=p.value(x,y);Assert.assertEquals(""half-way between sample points (border of the patch)"",expected,result,2);}"
"org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest.testSinZero",0,"/** */@Test public void testSinZero(){UnivariateDifferentiableFunction f=new Sin();double result;NewtonRaphsonSolver solver=new NewtonRaphsonSolver();result=solver.solve(100,f,3,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());result=solver.solve(100,f,1,4);Assert.assertEquals(result,FastMath.PI,solver.getAbsoluteAccuracy());Assert.assertTrue(solver.getEvaluations()> 0);}"
"org.apache.commons.math3.analysis.solvers.NewtonRaphsonSolverTest.testQuinticZero",0,"/** */@Test public void testQuinticZero(){final UnivariateDifferentiableFunction f=new QuinticFunction();double result;NewtonRaphsonSolver solver=new NewtonRaphsonSolver();result=solver.solve(100,f,-0.2,0.2);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,-0.1,0.3);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,-0.3,0.45);Assert.assertEquals(result,0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.3,0.7);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.2,0.6);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.05,0.95);Assert.assertEquals(result,0.5,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,1.25);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.8,1.2);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,1.75);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.55,1.45);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());result=solver.solve(100,f,0.85,5);Assert.assertEquals(result,1.0,solver.getAbsoluteAccuracy());}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds1",0,"@Test(expected=NumberIsTooLargeException.class)public void testInitOutofbounds1(){double[]startPoint=point(DIM,3);double[]insigma=point(DIM,0.3);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInitOutofbounds2",0,"@Test(expected=NumberIsTooSmallException.class)public void testInitOutofbounds2(){double[]startPoint=point(DIM,-2);double[]insigma=point(DIM,0.3);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testBoundariesDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testBoundariesDimensionMismatch(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM,0.3);double[][]boundaries=boundaries(DIM + 1,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaNegative",0,"@Test(expected=NotPositiveException.class)public void testInputSigmaNegative(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM,-0.5);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaOutOfRange",0,"@Test(expected=OutOfRangeException.class)public void testInputSigmaOutOfRange(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM,1.1);double[][]boundaries=boundaries(DIM,-0.5,0.5);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testInputSigmaDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testInputSigmaDimensionMismatch(){double[]startPoint=point(DIM,0.5);double[]insigma=point(DIM + 1,0.5);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRosen",0,"@Test @Retry(3)public void testRosen(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMaximize",0,"@Test @Retry(3)public void testMaximize(){}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testEllipse",0,"@Test public void testEllipse(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Elli(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Elli(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testElliRotated",0,"@Test public void testElliRotated(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new ElliRotated(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new ElliRotated(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigar",0,"@Test public void testCigar(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigarWithBoundaries",0,"@Test public void testCigarWithBoundaries(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=boundaries(DIM,-1e100,Double.POSITIVE_INFINITY);PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new Cigar(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTwoAxes",0,"@Test public void testTwoAxes(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new TwoAxes(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new TwoAxes(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,false,0,1e-13,1e-8,1e-3,200000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testCigTab",0,"@Test public void testCigTab(){}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSphere",0,"@Test public void testSphere(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Sphere(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Sphere(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testTablet",0,"@Test public void testTablet(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Tablet(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Tablet(),startPoint,insigma,boundaries,GoalType.MINIMIZE,LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiffPow",0,"@Test public void testDiffPow(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new DiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,true,0,1e-13,1e-8,1e-1,100000,expected);doTest(new DiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,false,0,1e-13,1e-8,2e-1,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testSsDiffPow",0,"@Test public void testSsDiffPow(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new SsDiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,true,0,1e-13,1e-4,1e-1,200000,expected);doTest(new SsDiffPow(),startPoint,insigma,boundaries,GoalType.MINIMIZE,10,false,0,1e-13,1e-4,1e-1,200000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testAckley",0,"@Test public void testAckley(){double[]startPoint=point(DIM,1.0);double[]insigma=point(DIM,1.0);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Ackley(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,true,0,1e-13,1e-9,1e-5,100000,expected);doTest(new Ackley(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,false,0,1e-13,1e-9,1e-5,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testRastrigin",0,"@Test public void testRastrigin(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=null;PointValuePair expected=new PointValuePair(point(DIM,0.0),0.0);doTest(new Rastrigin(),startPoint,insigma,boundaries,GoalType.MINIMIZE,(int)(200 * Math.sqrt(DIM)),true,0,1e-13,1e-13,1e-6,200000,expected);doTest(new Rastrigin(),startPoint,insigma,boundaries,GoalType.MINIMIZE,(int)(200 * Math.sqrt(DIM)),false,0,1e-13,1e-13,1e-6,200000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testConstrainedRosen",0,"@Test public void testConstrainedRosen(){double[]startPoint=point(DIM,0.1);double[]insigma=point(DIM,0.1);double[][]boundaries=boundaries(DIM,-1,2);PointValuePair expected=new PointValuePair(point(DIM,1.0),0.0);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,true,0,1e-13,1e-13,1e-6,100000,expected);doTest(new Rosen(),startPoint,insigma,boundaries,GoalType.MINIMIZE,2 * LAMBDA,false,0,1e-13,1e-13,1e-6,100000,expected);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testDiagonalRosen",0,"@Test public void testDiagonalRosen(){}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testMath864",0,"@Test public void testMath864(){final CMAESOptimizer optimizer=new CMAESOptimizer();final MultivariateFunction fitnessFunction=new MultivariateFunction(){public double value(double[]parameters){final double target=1;final double error=target - parameters[0];return error * error;}};final double[]start={0};final double[]lower={-1e6};final double[]upper={1.5};final double[]result=optimizer.optimize(10000,fitnessFunction,GoalType.MINIMIZE,start,lower,upper).getPoint();Assert.assertTrue(""Out of bounds ("" + result[0]+ "" > ""+ upper[0]+ "")"",result[0]<= upper[0]);}"
"org.apache.commons.math3.optimization.direct.CMAESOptimizerTest.testFitAccuracyDependsOnBoundary",0,"/** * Cf. MATH-867*/@Test public void testFitAccuracyDependsOnBoundary(){final CMAESOptimizer optimizer=new CMAESOptimizer();final MultivariateFunction fitnessFunction=new MultivariateFunction(){public double value(double[]parameters){final double target=11.1;final double error=target - parameters[0];return error * error;}};final double[]start={1};PointValuePair result=optimizer.optimize(100000,fitnessFunction,GoalType.MINIMIZE,start);final double resNoBound=result.getPoint()[0];final double[]lower={-20};final double[]upper={5e16};result=optimizer.optimize(100000,fitnessFunction,GoalType.MINIMIZE,start,lower,upper);final double resNearLo=result.getPoint()[0];lower[0]=-5e16;upper[0]=20;result=optimizer.optimize(100000,fitnessFunction,GoalType.MINIMIZE,start,lower,upper);final double resNearHi=result.getPoint()[0];Assert.assertEquals(resNoBound,resNearLo,1e-3);Assert.assertEquals(resNoBound,resNearHi,1e-3);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testAppend",0,"/** * Test that the SimpleRegression objects generated from combining two SimpleRegression objects created from subsets of data are identical to SimpleRegression objects created from the combined data.*/@Test public void testAppend(){check(false);check(true);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRegressIfaceMethod",0,"@Test public void testRegressIfaceMethod(){final SimpleRegression regression=new SimpleRegression(true);final UpdatingMultipleLinearRegression iface=regression;final SimpleRegression regressionNoint=new SimpleRegression(false);final SimpleRegression regressionIntOnly=new SimpleRegression(false);for (int i=0;i < data.length;i++){iface.addObservation(new double[]{data[i][1]},data[i][0]);regressionNoint.addData(data[i][1],data[i][0]);regressionIntOnly.addData(1.0,data[i][0]);}final RegressionResults fullReg=iface.regress();Assert.assertNotNull(fullReg);Assert.assertEquals(""intercept"",regression.getIntercept(),fullReg.getParameterEstimate(0),1.0e-16);Assert.assertEquals(""intercept std err"",regression.getInterceptStdErr(),fullReg.getStdErrorOfEstimate(0),1.0E-16);Assert.assertEquals(""slope"",regression.getSlope(),fullReg.getParameterEstimate(1),1.0e-16);Assert.assertEquals(""slope std err"",regression.getSlopeStdErr(),fullReg.getStdErrorOfEstimate(1),1.0E-16);Assert.assertEquals(""number of observations"",regression.getN(),fullReg.getN());Assert.assertEquals(""r-square"",regression.getRSquare(),fullReg.getRSquared(),1.0E-16);Assert.assertEquals(""SSR"",regression.getRegressionSumSquares(),fullReg.getRegressionSumSquares(),1.0E-16);Assert.assertEquals(""MSE"",regression.getMeanSquareError(),fullReg.getMeanSquareError(),1.0E-16);Assert.assertEquals(""SSE"",regression.getSumSquaredErrors(),fullReg.getErrorSumSquares(),1.0E-16);final RegressionResults noInt=iface.regress(new int[]{1});Assert.assertNotNull(noInt);Assert.assertEquals(""slope"",regressionNoint.getSlope(),noInt.getParameterEstimate(0),1.0e-12);Assert.assertEquals(""slope std err"",regressionNoint.getSlopeStdErr(),noInt.getStdErrorOfEstimate(0),1.0E-16);Assert.assertEquals(""number of observations"",regressionNoint.getN(),noInt.getN());Assert.assertEquals(""r-square"",regressionNoint.getRSquare(),noInt.getRSquared(),1.0E-16);Assert.assertEquals(""SSR"",regressionNoint.getRegressionSumSquares(),noInt.getRegressionSumSquares(),1.0E-8);Assert.assertEquals(""MSE"",regressionNoint.getMeanSquareError(),noInt.getMeanSquareError(),1.0E-16);Assert.assertEquals(""SSE"",regressionNoint.getSumSquaredErrors(),noInt.getErrorSumSquares(),1.0E-16);final RegressionResults onlyInt=iface.regress(new int[]{0});Assert.assertNotNull(onlyInt);Assert.assertEquals(""slope"",regressionIntOnly.getSlope(),onlyInt.getParameterEstimate(0),1.0e-12);Assert.assertEquals(""slope std err"",regressionIntOnly.getSlopeStdErr(),onlyInt.getStdErrorOfEstimate(0),1.0E-12);Assert.assertEquals(""number of observations"",regressionIntOnly.getN(),onlyInt.getN());Assert.assertEquals(""r-square"",regressionIntOnly.getRSquare(),onlyInt.getRSquared(),1.0E-14);Assert.assertEquals(""SSE"",regressionIntOnly.getSumSquaredErrors(),onlyInt.getErrorSumSquares(),1.0E-8);Assert.assertEquals(""SSR"",regressionIntOnly.getRegressionSumSquares(),onlyInt.getRegressionSumSquares(),1.0E-8);Assert.assertEquals(""MSE"",regressionIntOnly.getMeanSquareError(),onlyInt.getMeanSquareError(),1.0E-8);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRegressExceptions",0,"/** * Verify that regress generates exceptions as advertised for bad model specifications.*/@Test public void testRegressExceptions(){final SimpleRegression noIntRegression=new SimpleRegression(false);noIntRegression.addData(noint2[0][1],noint2[0][0]);noIntRegression.addData(noint2[1][1],noint2[1][0]);noIntRegression.addData(noint2[2][1],noint2[2][0]);try {noIntRegression.regress(null);Assert.fail(""Expecting MathIllegalArgumentException for null array"");}catch(MathIllegalArgumentException ex){}try {noIntRegression.regress(new int[]{});Assert.fail(""Expecting MathIllegalArgumentException for empty array"");}catch(MathIllegalArgumentException ex){}try {noIntRegression.regress(new int[]{0,1});Assert.fail(""Expecting ModelSpecificationException - too many regressors"");}catch(ModelSpecificationException ex){}try {noIntRegression.regress(new int[]{1});Assert.fail(""Expecting OutOfRangeException - invalid regression"");}catch(OutOfRangeException ex){}final SimpleRegression regression=new SimpleRegression(true);regression.addData(noint2[0][1],noint2[0][0]);regression.addData(noint2[1][1],noint2[1][0]);regression.addData(noint2[2][1],noint2[2][0]);try {regression.regress(null);Assert.fail(""Expecting MathIllegalArgumentException for null array"");}catch(MathIllegalArgumentException ex){}try {regression.regress(new int[]{});Assert.fail(""Expecting MathIllegalArgumentException for empty array"");}catch(MathIllegalArgumentException ex){}try {regression.regress(new int[]{0,1,2});Assert.fail(""Expecting ModelSpecificationException - too many regressors"");}catch(ModelSpecificationException ex){}try {regression.regress(new int[]{1,0});Assert.fail(""Expecting ModelSpecificationException - invalid regression"");}catch(ModelSpecificationException ex){}try {regression.regress(new int[]{3,4});Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {regression.regress(new int[]{0,2});Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {regression.regress(new int[]{2});Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testNoInterceot_noint2",0,"@Test public void testNoInterceot_noint2(){SimpleRegression regression=new SimpleRegression(false);regression.addData(noint2[0][1],noint2[0][0]);regression.addData(noint2[1][1],noint2[1][0]);regression.addData(noint2[2][1],noint2[2][0]);Assert.assertEquals(""intercept"",0,regression.getIntercept(),0);Assert.assertEquals(""slope"",0.727272727272727,regression.getSlope(),10E-12);Assert.assertEquals(""slope std err"",0.420827318078432E-01,regression.getSlopeStdErr(),10E-12);Assert.assertEquals(""number of observations"",3,regression.getN());Assert.assertEquals(""r-square"",0.993348115299335,regression.getRSquare(),10E-12);Assert.assertEquals(""SSR"",40.7272727272727,regression.getRegressionSumSquares(),10E-9);Assert.assertEquals(""MSE"",0.136363636363636,regression.getMeanSquareError(),10E-10);Assert.assertEquals(""SSE"",0.272727272727273,regression.getSumSquaredErrors(),10E-9);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testNoIntercept_noint1",0,"@Test public void testNoIntercept_noint1(){SimpleRegression regression=new SimpleRegression(false);for (int i=0;i < noint1.length;i++){regression.addData(noint1[i][1],noint1[i][0]);}Assert.assertEquals(""intercept"",0,regression.getIntercept(),0);Assert.assertEquals(""slope"",2.07438016528926,regression.getSlope(),10E-12);Assert.assertEquals(""slope std err"",0.165289256198347E-01,regression.getSlopeStdErr(),10E-12);Assert.assertEquals(""number of observations"",11,regression.getN());Assert.assertEquals(""r-square"",0.999365492298663,regression.getRSquare(),10E-12);Assert.assertEquals(""SSR"",200457.727272727,regression.getRegressionSumSquares(),10E-9);Assert.assertEquals(""MSE"",12.7272727272727,regression.getMeanSquareError(),10E-10);Assert.assertEquals(""SSE"",127.272727272727,regression.getSumSquaredErrors(),10E-9);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testNorris",0,"@Test public void testNorris(){SimpleRegression regression=new SimpleRegression();for (int i=0;i < data.length;i++){regression.addData(data[i][1],data[i][0]);}Assert.assertEquals(""slope"",1.00211681802045,regression.getSlope(),10E-12);Assert.assertEquals(""slope std err"",0.429796848199937E-03,regression.getSlopeStdErr(),10E-12);Assert.assertEquals(""number of observations"",36,regression.getN());Assert.assertEquals(""intercept"",-0.262323073774029,regression.getIntercept(),10E-12);Assert.assertEquals(""std err intercept"",0.232818234301152,regression.getInterceptStdErr(),10E-12);Assert.assertEquals(""r-square"",0.999993745883712,regression.getRSquare(),10E-12);Assert.assertEquals(""SSR"",4255954.13232369,regression.getRegressionSumSquares(),10E-9);Assert.assertEquals(""MSE"",0.782864662630069,regression.getMeanSquareError(),10E-10);Assert.assertEquals(""SSE"",26.6173985294224,regression.getSumSquaredErrors(),10E-9);Assert.assertEquals(""predict(0)"",-0.262323073774029,regression.predict(0),10E-12);Assert.assertEquals(""predict(1)"",1.00211681802045 - 0.262323073774029,regression.predict(1),10E-12);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testCorr",0,"@Test public void testCorr(){SimpleRegression regression=new SimpleRegression();regression.addData(corrData);Assert.assertEquals(""number of observations"",17,regression.getN());Assert.assertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);Assert.assertEquals(""r"",-0.94663767742,regression.getR(),1E-10);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testNaNs",0,"@Test public void testNaNs(){SimpleRegression regression=new SimpleRegression();Assert.assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));Assert.assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));Assert.assertTrue(""slope std err not NaN"",Double.isNaN(regression.getSlopeStdErr()));Assert.assertTrue(""intercept std err not NaN"",Double.isNaN(regression.getInterceptStdErr()));Assert.assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));Assert.assertTrue(""e not NaN"",Double.isNaN(regression.getR()));Assert.assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));Assert.assertTrue(""RSS not NaN"",Double.isNaN(regression.getRegressionSumSquares()));Assert.assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));Assert.assertTrue(""SSTO not NaN"",Double.isNaN(regression.getTotalSumSquares()));Assert.assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));regression.addData(1,2);regression.addData(1,3);Assert.assertTrue(""intercept not NaN"",Double.isNaN(regression.getIntercept()));Assert.assertTrue(""slope not NaN"",Double.isNaN(regression.getSlope()));Assert.assertTrue(""slope std err not NaN"",Double.isNaN(regression.getSlopeStdErr()));Assert.assertTrue(""intercept std err not NaN"",Double.isNaN(regression.getInterceptStdErr()));Assert.assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));Assert.assertTrue(""e not NaN"",Double.isNaN(regression.getR()));Assert.assertTrue(""r-square not NaN"",Double.isNaN(regression.getRSquare()));Assert.assertTrue(""RSS not NaN"",Double.isNaN(regression.getRegressionSumSquares()));Assert.assertTrue(""SSE not NaN"",Double.isNaN(regression.getSumSquaredErrors()));Assert.assertTrue(""predict not NaN"",Double.isNaN(regression.predict(0)));Assert.assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));regression=new SimpleRegression();regression.addData(1,2);regression.addData(3,3);Assert.assertTrue(""interceptNaN"",!Double.isNaN(regression.getIntercept()));Assert.assertTrue(""slope NaN"",!Double.isNaN(regression.getSlope()));Assert.assertTrue(""slope std err not NaN"",Double.isNaN(regression.getSlopeStdErr()));Assert.assertTrue(""intercept std err not NaN"",Double.isNaN(regression.getInterceptStdErr()));Assert.assertTrue(""MSE not NaN"",Double.isNaN(regression.getMeanSquareError()));Assert.assertTrue(""r NaN"",!Double.isNaN(regression.getR()));Assert.assertTrue(""r-square NaN"",!Double.isNaN(regression.getRSquare()));Assert.assertTrue(""RSS NaN"",!Double.isNaN(regression.getRegressionSumSquares()));Assert.assertTrue(""SSE NaN"",!Double.isNaN(regression.getSumSquaredErrors()));Assert.assertTrue(""SSTO NaN"",!Double.isNaN(regression.getTotalSumSquares()));Assert.assertTrue(""predict NaN"",!Double.isNaN(regression.predict(0)));regression.addData(1,4);Assert.assertTrue(""MSE NaN"",!Double.isNaN(regression.getMeanSquareError()));Assert.assertTrue(""slope std err NaN"",!Double.isNaN(regression.getSlopeStdErr()));Assert.assertTrue(""intercept std err NaN"",!Double.isNaN(regression.getInterceptStdErr()));}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testClear",0,"@Test public void testClear(){SimpleRegression regression=new SimpleRegression();regression.addData(corrData);Assert.assertEquals(""number of observations"",17,regression.getN());regression.clear();Assert.assertEquals(""number of observations"",0,regression.getN());regression.addData(corrData);Assert.assertEquals(""r-square"",.896123,regression.getRSquare(),10E-6);regression.addData(data);Assert.assertEquals(""number of observations"",53,regression.getN());}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testInference",0,"@Test public void testInference(){SimpleRegression regression=new SimpleRegression();regression.addData(infData);Assert.assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);Assert.assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);Assert.assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);Assert.assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);regression=new SimpleRegression();regression.addData(infData2);Assert.assertEquals(""slope std err"",1.07260253,regression.getSlopeStdErr(),1E-8);Assert.assertEquals(""std err intercept"",4.17718672,regression.getInterceptStdErr(),1E-8);Assert.assertEquals(""significance"",0.261829133982,regression.getSignificance(),1E-11);Assert.assertEquals(""slope conf interval half-width"",2.97802204827,regression.getSlopeConfidenceInterval(),1E-8);Assert.assertTrue(""tighter means wider"",regression.getSlopeConfidenceInterval()< regression.getSlopeConfidenceInterval(0.01));try {regression.getSlopeConfidenceInterval(1);Assert.fail(""expecting MathIllegalArgumentException for alpha = 1"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfect",0,"@Test public void testPerfect(){SimpleRegression regression=new SimpleRegression();int n=100;for (int i=0;i < n;i++){regression.addData(((double)i)/ (n - 1),i);}Assert.assertEquals(0.0,regression.getSignificance(),1.0e-5);Assert.assertTrue(regression.getSlope()> 0.0);Assert.assertTrue(regression.getSumSquaredErrors()>= 0.0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testPerfectNegative",0,"@Test public void testPerfectNegative(){SimpleRegression regression=new SimpleRegression();int n=100;for (int i=0;i < n;i++){regression.addData(-((double)i)/ (n - 1),i);}Assert.assertEquals(0.0,regression.getSignificance(),1.0e-5);Assert.assertTrue(regression.getSlope()< 0.0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRandom",0,"@Test public void testRandom(){SimpleRegression regression=new SimpleRegression();Random random=new Random(1);int n=100;for (int i=0;i < n;i++){regression.addData(((double)i)/ (n - 1),random.nextDouble());}Assert.assertTrue(0.0 < regression.getSignificance()&& regression.getSignificance()< 1.0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testSSENonNegative",0,"@Test public void testSSENonNegative(){double[]y={8915.102,8919.302,8923.502};double[]x={1.107178495E2,1.107264895E2,1.107351295E2};SimpleRegression reg=new SimpleRegression();for (int i=0;i < x.length;i++){reg.addData(x[i],y[i]);}Assert.assertTrue(reg.getSumSquaredErrors()>= 0.0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveXY",0,"@Test public void testRemoveXY(){SimpleRegression regression=new SimpleRegression();regression.addData(infData);regression.removeData(removeX,removeY);regression.addData(removeX,removeY);Assert.assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);Assert.assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);Assert.assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);Assert.assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveSingle",0,"@Test public void testRemoveSingle(){SimpleRegression regression=new SimpleRegression();regression.addData(infData);regression.removeData(removeSingle);regression.addData(removeSingle);Assert.assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);Assert.assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);Assert.assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);Assert.assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultiple",0,"@Test public void testRemoveMultiple(){SimpleRegression regression=new SimpleRegression();regression.addData(infData);regression.removeData(removeMultiple);regression.addData(removeMultiple);Assert.assertEquals(""slope std err"",0.011448491,regression.getSlopeStdErr(),1E-10);Assert.assertEquals(""std err intercept"",0.286036932,regression.getInterceptStdErr(),1E-8);Assert.assertEquals(""significance"",4.596e-07,regression.getSignificance(),1E-8);Assert.assertEquals(""slope conf interval half-width"",0.0270713794287,regression.getSlopeConfidenceInterval(),1E-8);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveObsFromEmpty",0,"@Test public void testRemoveObsFromEmpty(){SimpleRegression regression=new SimpleRegression();regression.removeData(removeX,removeY);Assert.assertEquals(regression.getN(),0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveObsFromSingle",0,"@Test public void testRemoveObsFromSingle(){SimpleRegression regression=new SimpleRegression();regression.addData(removeX,removeY);regression.removeData(removeX,removeY);Assert.assertEquals(regression.getN(),0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultipleToEmpty",0,"@Test public void testRemoveMultipleToEmpty(){SimpleRegression regression=new SimpleRegression();regression.addData(removeMultiple);regression.removeData(removeMultiple);Assert.assertEquals(regression.getN(),0);}"
"org.apache.commons.math3.stat.regression.SimpleRegressionTest.testRemoveMultiplePastEmpty",0,"@Test public void testRemoveMultiplePastEmpty(){SimpleRegression regression=new SimpleRegression();regression.addData(removeX,removeY);regression.removeData(removeMultiple);Assert.assertEquals(regression.getN(),0);}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testNonSquare",0,"@Test public void testNonSquare(){try {new TriDiagonalTransformer(MatrixUtils.createRealMatrix(new double[3][2]));Assert.fail(""an exception should have been thrown"");}catch(NonSquareMatrixException ime){}}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testAEqualQTQt",0,"@Test public void testAEqualQTQt(){checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare5));checkAEqualQTQt(MatrixUtils.createRealMatrix(testSquare3));}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testNoAccessBelowDiagonal",0,"@Test public void testNoAccessBelowDiagonal(){checkNoAccessBelowDiagonal(testSquare5);checkNoAccessBelowDiagonal(testSquare3);}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testQOrthogonal",0,"@Test public void testQOrthogonal(){checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQ());checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQ());}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testQTOrthogonal",0,"@Test public void testQTOrthogonal(){checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getQT());checkOrthogonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getQT());}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testTTriDiagonal",0,"@Test public void testTTriDiagonal(){checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare5)).getT());checkTriDiagonal(new TriDiagonalTransformer(MatrixUtils.createRealMatrix(testSquare3)).getT());}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testMatricesValues5",0,"@Test public void testMatricesValues5(){checkMatricesValues(testSquare5,new double[][]{{1.0,0.0,0.0,0.0,0.0},{0.0,-0.5163977794943222,0.016748280772542083,0.839800693771262,0.16669620021405473},{0.0,-0.7745966692414833,-0.4354553000860955,-0.44989322880603355,-0.08930153582895772},{0.0,-0.2581988897471611,0.6364346693566014,-0.30263204032131164,0.6608313651342882},{0.0,-0.2581988897471611,0.6364346693566009,-0.027289660803112598,-0.7263191580755246}},new double[]{1,4.4,1.433099579242636,-0.89537362758743,2.062274048344794},new double[]{-FastMath.sqrt(15),-3.0832882879592476,0.6082710842351517,1.1786086405912128});}"
"org.apache.commons.math3.linear.TriDiagonalTransformerTest.testMatricesValues3",0,"@Test public void testMatricesValues3(){checkMatricesValues(testSquare3,new double[][]{{1.0,0.0,0.0},{0.0,-0.6,0.8},{0.0,-0.8,-0.6}},new double[]{1,2.64,-0.64},new double[]{-5,-1.52});}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest.testLinearFunction",0,"/** * Test of polynomial for the linear function.*/@Test public void testLinearFunction(){PolynomialFunctionLagrangeForm p;double c[],z,expected,result,tolerance=1E-12;double x[]={0.0,3.0};double y[]={-4.0,0.5};p=new PolynomialFunctionLagrangeForm(x,y);z=2.0;expected=-1.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=4.5;expected=2.75;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=6.0;expected=5.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);Assert.assertEquals(1,p.degree());c=p.getCoefficients();Assert.assertEquals(2,c.length);Assert.assertEquals(-4.0,c[0],tolerance);Assert.assertEquals(1.5,c[1],tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest.testQuadraticFunction",0,"/** * Test of polynomial for the quadratic function.*/@Test public void testQuadraticFunction(){PolynomialFunctionLagrangeForm p;double c[],z,expected,result,tolerance=1E-12;double x[]={0.0,-1.0,0.5};double y[]={-3.0,-6.0,0.0};p=new PolynomialFunctionLagrangeForm(x,y);z=1.0;expected=4.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=2.5;expected=22.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=-2.0;expected=-5.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);Assert.assertEquals(2,p.degree());c=p.getCoefficients();Assert.assertEquals(3,c.length);Assert.assertEquals(-3.0,c[0],tolerance);Assert.assertEquals(5.0,c[1],tolerance);Assert.assertEquals(2.0,c[2],tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest.testQuinticFunction",0,"/** * Test of polynomial for the quintic function.*/@Test public void testQuinticFunction(){PolynomialFunctionLagrangeForm p;double c[],z,expected,result,tolerance=1E-12;double x[]={1.0,-1.0,2.0,3.0,-3.0,0.5};double y[]={0.0,0.0,-24.0,0.0,-144.0,2.34375};p=new PolynomialFunctionLagrangeForm(x,y);z=0.0;expected=0.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=-2.0;expected=0.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=4.0;expected=360.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);Assert.assertEquals(5,p.degree());c=p.getCoefficients();Assert.assertEquals(6,c.length);Assert.assertEquals(0.0,c[0],tolerance);Assert.assertEquals(6.0,c[1],tolerance);Assert.assertEquals(1.0,c[2],tolerance);Assert.assertEquals(-7.0,c[3],tolerance);Assert.assertEquals(-1.0,c[4],tolerance);Assert.assertEquals(1.0,c[5],tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeFormTest.testParameters",0,"/** * Test of parameters for the polynomial.*/@Test public void testParameters(){try {double x[]={1.0};double y[]={2.0};new PolynomialFunctionLagrangeForm(x,y);Assert.fail(""Expecting MathIllegalArgumentException - bad input array length"");}catch(MathIllegalArgumentException ex){}try {double x[]={1.0,2.0,3.0,4.0};double y[]={0.0,-4.0,-24.0};new PolynomialFunctionLagrangeForm(x,y);Assert.fail(""Expecting MathIllegalArgumentException - mismatch input arrays"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleScalar circle=new CircleScalar();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);GradientMultivariateOptimizer underlying=new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,new SimpleValueChecker(1e-10,1e-10));JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(753289573253l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(new double[]{50,50},new double[]{10,10},new GaussianRandomGenerator(g));MultiStartMultivariateOptimizer optimizer=new MultiStartMultivariateOptimizer(underlying,10,generator);PointValuePair optimum=optimizer.optimize(new MaxEval(200),circle.getObjectiveFunction(),circle.getObjectiveFunctionGradient(),GoalType.MINIMIZE,new InitialGuess(new double[]{98.680,47.345}));Assert.assertEquals(200,optimizer.getMaxEvaluations());PointValuePair[]optima=optimizer.getOptima();for(PointValuePair o : optima){Vector2D center=new Vector2D(o.getPointRef()[0],o.getPointRef()[1]);Assert.assertEquals(69.960161753,circle.getRadius(center),1e-8);Assert.assertEquals(96.075902096,center.getX(),1e-8);Assert.assertEquals(48.135167894,center.getY(),1e-8);}Assert.assertTrue(optimizer.getEvaluations()> 70);Assert.assertTrue(optimizer.getEvaluations()< 90);Assert.assertEquals(3.1267527,optimum.getValue(),1e-8);}"
"org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest.testRosenbrock",0,"@Test public void testRosenbrock(){Rosenbrock rosenbrock=new Rosenbrock();SimplexOptimizer underlying=new SimplexOptimizer(new SimpleValueChecker(-1,1e-3));NelderMeadSimplex simplex=new NelderMeadSimplex(new double[][]{{-1.2,1.0},{0.9,1.2},{3.5,-2.3}});JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(16069223052l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(2,new GaussianRandomGenerator(g));MultiStartMultivariateOptimizer optimizer=new MultiStartMultivariateOptimizer(underlying,10,generator);PointValuePair optimum=optimizer.optimize(new MaxEval(1100),new ObjectiveFunction(rosenbrock),GoalType.MINIMIZE,simplex,new InitialGuess(new double[]{-1.2,1.0}));Assert.assertEquals(rosenbrock.getCount(),optimizer.getEvaluations());Assert.assertTrue(optimizer.getEvaluations()> 900);Assert.assertTrue(optimizer.getEvaluations()< 1200);Assert.assertTrue(optimum.getValue()< 8e-4);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testBoundsUnsupported",0,"@Test(expected=MathUnsupportedOperationException.class)public void testBoundsUnsupported(){final MultivariateFunction func=new SumSincFunction(-1);final PowellOptimizer optim=new PowellOptimizer(1e-8,1e-5,1e-4,1e-4);optim.optimize(new MaxEval(100),new ObjectiveFunction(func),GoalType.MINIMIZE,new InitialGuess(new double[]{-3,0}),new SimpleBounds(new double[]{-5,-1},new double[]{5,1}));}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testSumSinc",0,"@Test public void testSumSinc(){final MultivariateFunction func=new SumSincFunction(-1);int dim=2;final double[]minPoint=new double[dim];for (int i=0;i < dim;i++){minPoint[i]=0;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=minPoint[i];}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-9);for (int i=0;i < dim;i++){init[i]=minPoint[i]+ 3;}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-5);doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-9,1e-7);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testQuadratic",0,"@Test public void testQuadratic(){final MultivariateFunction func=new MultivariateFunction(){public double value(double[]x){final double a=x[0]- 1;final double b=x[1]- 1;return a * a + b * b + 1;}};int dim=2;final double[]minPoint=new double[dim];for (int i=0;i < dim;i++){minPoint[i]=1;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=minPoint[i];}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-8);for (int i=0;i < dim;i++){init[i]=minPoint[i]- 20;}doTest(func,minPoint,init,GoalType.MINIMIZE,1e-9,1e-8);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testMaximizeQuadratic",0,"@Test public void testMaximizeQuadratic(){final MultivariateFunction func=new MultivariateFunction(){public double value(double[]x){final double a=x[0]- 1;final double b=x[1]- 1;return -a * a - b * b + 1;}};int dim=2;final double[]maxPoint=new double[dim];for (int i=0;i < dim;i++){maxPoint[i]=1;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=maxPoint[i];}doTest(func,maxPoint,init,GoalType.MAXIMIZE,1e-9,1e-8);for (int i=0;i < dim;i++){init[i]=maxPoint[i]- 20;}doTest(func,maxPoint,init,GoalType.MAXIMIZE,1e-9,1e-8);}"
"org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest.testRelativeToleranceOnScaledValues",0,"/** * Ensure that we do not increase the number of function evaluations when the function values are scaled up. Note that the tolerances parameters passed to the constructor must still hold sensible values because they are used to set the line search tolerances.*/@Test public void testRelativeToleranceOnScaledValues(){final MultivariateFunction func=new MultivariateFunction(){public double value(double[]x){final double a=x[0]- 1;final double b=x[1]- 1;return a * a * FastMath.sqrt(FastMath.abs(a))+ b * b + 1;}};int dim=2;final double[]minPoint=new double[dim];for (int i=0;i < dim;i++){minPoint[i]=1;}double[]init=new double[dim];for (int i=0;i < dim;i++){init[i]=minPoint[i]- 20;}final double relTol=1e-10;final int maxEval=1000;final PowellOptimizer optim=new PowellOptimizer(relTol,1e-100);final PointValuePair funcResult=optim.optimize(new MaxEval(maxEval),new ObjectiveFunction(func),GoalType.MINIMIZE,new InitialGuess(init));final double funcValue=func.value(funcResult.getPoint());final int funcEvaluations=optim.getEvaluations();final double scale=1e10;final MultivariateFunction funcScaled=new MultivariateFunction(){public double value(double[]x){return scale * func.value(x);}};final PointValuePair funcScaledResult=optim.optimize(new MaxEval(maxEval),new ObjectiveFunction(funcScaled),GoalType.MINIMIZE,new InitialGuess(init));final double funcScaledValue=funcScaled.value(funcScaledResult.getPoint());final int funcScaledEvaluations=optim.getEvaluations();Assert.assertEquals(1,funcScaledValue / (scale * funcValue),relTol);Assert.assertEquals(funcEvaluations,funcScaledEvaluations);}"
"org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest.testIterationCheckPrecondition",0,"@Test(expected=NotStrictlyPositiveException.class)public void testIterationCheckPrecondition(){new SimpleVectorValueChecker(1e-1,1e-2,0);}"
"org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest.testIterationCheck",0,"@Test public void testIterationCheck(){final int max=10;final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(1e-1,1e-2,max);Assert.assertTrue(checker.converged(max,null,null));Assert.assertTrue(checker.converged(max + 1,null,null));}"
"org.apache.commons.math3.optimization.SimpleVectorValueCheckerTest.testIterationCheckDisabled",0,"@Test public void testIterationCheckDisabled(){final SimpleVectorValueChecker checker=new SimpleVectorValueChecker(1e-8,1e-8);final PointVectorValuePair a=new PointVectorValuePair(new double[]{1d},new double[]{1d});final PointVectorValuePair b=new PointVectorValuePair(new double[]{10d},new double[]{10d});Assert.assertFalse(checker.converged(-1,a,b));Assert.assertFalse(checker.converged(0,a,b));Assert.assertFalse(checker.converged(1000000,a,b));Assert.assertTrue(checker.converged(-1,a,a));Assert.assertTrue(checker.converged(-1,b,b));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testConstructors",0,"@Test public void testConstructors(){final double[]vec1={1d,2d,3d};final double[]vec3={7d,8d,9d};final double[]vec4={1d,2d,3d,4d,5d,6d,7d,8d,9d};final Double[]dvec1={1d,2d,3d,4d,5d,6d,7d,8d,9d};ArrayRealVector v0=new ArrayRealVector();Assert.assertEquals(""testData len"",0,v0.getDimension());ArrayRealVector v1=new ArrayRealVector(7);Assert.assertEquals(""testData len"",7,v1.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v1.getEntry(6),0);ArrayRealVector v2=new ArrayRealVector(5,1.23);Assert.assertEquals(""testData len"",5,v2.getDimension());Assert.assertEquals(""testData is 1.23 "",1.23,v2.getEntry(4),0);ArrayRealVector v3=new ArrayRealVector(vec1);Assert.assertEquals(""testData len"",3,v3.getDimension());Assert.assertEquals(""testData is 2.0 "",2.0,v3.getEntry(1),0);ArrayRealVector v3_bis=new ArrayRealVector(vec1,true);Assert.assertEquals(""testData len"",3,v3_bis.getDimension());Assert.assertEquals(""testData is 2.0 "",2.0,v3_bis.getEntry(1),0);Assert.assertNotSame(v3_bis.getDataRef(),vec1);Assert.assertNotSame(v3_bis.toArray(),vec1);ArrayRealVector v3_ter=new ArrayRealVector(vec1,false);Assert.assertEquals(""testData len"",3,v3_ter.getDimension());Assert.assertEquals(""testData is 2.0 "",2.0,v3_ter.getEntry(1),0);Assert.assertSame(v3_ter.getDataRef(),vec1);Assert.assertNotSame(v3_ter.toArray(),vec1);ArrayRealVector v4=new ArrayRealVector(vec4,3,2);Assert.assertEquals(""testData len"",2,v4.getDimension());Assert.assertEquals(""testData is 4.0 "",4.0,v4.getEntry(0),0);try {new ArrayRealVector(vec4,8,3);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}RealVector v5_i=new ArrayRealVector(dvec1);Assert.assertEquals(""testData len"",9,v5_i.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v5_i.getEntry(8),0);ArrayRealVector v5=new ArrayRealVector(dvec1);Assert.assertEquals(""testData len"",9,v5.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v5.getEntry(8),0);ArrayRealVector v6=new ArrayRealVector(dvec1,3,2);Assert.assertEquals(""testData len"",2,v6.getDimension());Assert.assertEquals(""testData is 4.0 "",4.0,v6.getEntry(0),0);try {new ArrayRealVector(dvec1,8,3);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}ArrayRealVector v7=new ArrayRealVector(v1);Assert.assertEquals(""testData len"",7,v7.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v7.getEntry(6),0);RealVectorTestImpl v7_i=new RealVectorTestImpl(vec1);ArrayRealVector v7_2=new ArrayRealVector(v7_i);Assert.assertEquals(""testData len"",3,v7_2.getDimension());Assert.assertEquals(""testData is 0.0 "",2.0d,v7_2.getEntry(1),0);ArrayRealVector v8=new ArrayRealVector(v1,true);Assert.assertEquals(""testData len"",7,v8.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v8.getEntry(6),0);Assert.assertNotSame(""testData not same object "",v1.getDataRef(),v8.getDataRef());ArrayRealVector v8_2=new ArrayRealVector(v1,false);Assert.assertEquals(""testData len"",7,v8_2.getDimension());Assert.assertEquals(""testData is 0.0 "",0.0,v8_2.getEntry(6),0);Assert.assertEquals(""testData same object "",v1.getDataRef(),v8_2.getDataRef());ArrayRealVector v9=new ArrayRealVector(v1,v3);Assert.assertEquals(""testData len"",10,v9.getDimension());Assert.assertEquals(""testData is 1.0 "",1.0,v9.getEntry(7),0);ArrayRealVector v10=new ArrayRealVector(v2,new RealVectorTestImpl(vec3));Assert.assertEquals(""testData len"",8,v10.getDimension());Assert.assertEquals(""testData is 1.23 "",1.23,v10.getEntry(4),0);Assert.assertEquals(""testData is 7.0 "",7.0,v10.getEntry(5),0);ArrayRealVector v11=new ArrayRealVector(new RealVectorTestImpl(vec3),v2);Assert.assertEquals(""testData len"",8,v11.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v11.getEntry(2),0);Assert.assertEquals(""testData is 1.23 "",1.23,v11.getEntry(3),0);ArrayRealVector v12=new ArrayRealVector(v2,vec3);Assert.assertEquals(""testData len"",8,v12.getDimension());Assert.assertEquals(""testData is 1.23 "",1.23,v12.getEntry(4),0);Assert.assertEquals(""testData is 7.0 "",7.0,v12.getEntry(5),0);ArrayRealVector v13=new ArrayRealVector(vec3,v2);Assert.assertEquals(""testData len"",8,v13.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v13.getEntry(2),0);Assert.assertEquals(""testData is 1.23 "",1.23,v13.getEntry(3),0);ArrayRealVector v14=new ArrayRealVector(vec3,vec4);Assert.assertEquals(""testData len"",12,v14.getDimension());Assert.assertEquals(""testData is 9.0 "",9.0,v14.getEntry(2),0);Assert.assertEquals(""testData is 1.0 "",1.0,v14.getEntry(3),0);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetDataRef",0,"@Test public void testGetDataRef(){final double[]data={1d,2d,3d,4d};final ArrayRealVector v=new ArrayRealVector(data);v.getDataRef()[0]=0d;Assert.assertEquals("""",0d,v.getEntry(0),0);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testPredicates",0,"@Test public void testPredicates(){Assert.assertEquals(create(new double[]{Double.NaN,1,2}).hashCode(),create(new double[]{0,Double.NaN,2}).hashCode());Assert.assertTrue(create(new double[]{Double.NaN,1,2}).hashCode()!= create(new double[]{0,1,2}).hashCode());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testZeroVectors",0,"@Test public void testZeroVectors(){Assert.assertEquals(0,new ArrayRealVector(new double[0]).getDimension());Assert.assertEquals(0,new ArrayRealVector(new double[0],true).getDimension());Assert.assertEquals(0,new ArrayRealVector(new double[0],false).getDimension());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetDimension",0,"@Test public void testGetDimension(){final double x=getPreferredEntryValue();final double[]data1={x,x,x,x};Assert.assertEquals(data1.length,create(data1).getDimension());final double y=x + 1;final double[]data2={y,y,y,y};Assert.assertEquals(data2.length,create(data2).getDimension());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetEntry",0,"@Test public void testGetEntry(){final double x=getPreferredEntryValue();final double[]data={x,1d,2d,x,x};final RealVector v=create(data);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,data[i],v.getEntry(i),0d);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testGetEntryInvalidIndex1(){create(new double[4]).getEntry(-1);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testGetEntryInvalidIndex2(){create(new double[4]).getEntry(4);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetEntry",0,"@Test public void testSetEntry(){final double x=getPreferredEntryValue();final double[]data={x,1d,2d,x,x};final double[]expected=MathArrays.copyOf(data);final RealVector actual=create(data);for (int i=0;i < data.length;i++){final double oldValue=data[i];final double newValue=oldValue + 1d;expected[i]=newValue;actual.setEntry(i,newValue);TestUtils.assertEquals(""while setting entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}for (int i=0;i < data.length;i++){final double oldValue=data[i];final double newValue=x;expected[i]=newValue;actual.setEntry(i,newValue);TestUtils.assertEquals(""while setting entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryInvalidIndex1(){create(new double[4]).setEntry(-1,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testSetEntryInvalidIndex2(){create(new double[4]).setEntry(4,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAddToEntry",0,"@Test public void testAddToEntry(){final double x=getPreferredEntryValue();final double[]data1={x,1d,2d,x,x};final double[]data2={x,x,3d,x,4d,x};final double[]expected=MathArrays.copyOf(data1);final RealVector actual=create(data1);double increment=1d;for (int i=0;i < data1.length;i++){final double oldValue=data1[i];expected[i]+=increment;actual.addToEntry(i,increment);TestUtils.assertEquals(""while incrementing entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}for (int i=0;i < data1.length;i++){final double oldValue=data1[i];increment=x - oldValue;expected[i]=x;actual.addToEntry(i,increment);TestUtils.assertEquals(""while incrementing entry #"" + i,expected,actual,0d);expected[i]=oldValue;actual.setEntry(i,oldValue);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAddToEntryInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testAddToEntryInvalidIndex1(){create(new double[3]).addToEntry(-1,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAddToEntryInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testAddToEntryInvalidIndex2(){create(new double[3]).addToEntry(4,getPreferredEntryValue());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAppendVector",0,"@Test public void testAppendVector(){final double x=getPreferredEntryValue();final double[]data1={x,1d,2d,x,x};final double[]data2={x,x,3d,x,4d,x};doTestAppendVector(""same type"",create(data1),create(data2),0d);doTestAppendVector(""mixed types"",create(data1),createAlien(data2),0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAppendScalar",0,"@Test public void testAppendScalar(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,1d,2d,x,x};doTestAppendScalar("""",create(data),1d,0d);doTestAppendScalar("""",create(data),x,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetSubVector",0,"@Test public void testGetSubVector(){final double x=getPreferredEntryValue();final double[]data={x,x,x,1d,x,2d,x,x,3d,x,x,x,4d,x,x,x};final int index=1;final int n=data.length - 5;final RealVector actual=create(data).getSubVector(index,n);final double[]expected=new double[n];System.arraycopy(data,index,expected,0,n);TestUtils.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetSubVectorInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testGetSubVectorInvalidIndex1(){final int n=10;create(new double[n]).getSubVector(-1,2);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetSubVectorInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testGetSubVectorInvalidIndex2(){final int n=10;create(new double[n]).getSubVector(n,2);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetSubVectorInvalidIndex3",0,"@Test(expected=OutOfRangeException.class)public void testGetSubVectorInvalidIndex3(){final int n=10;create(new double[n]).getSubVector(0,n + 1);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetSubVectorInvalidIndex4",0,"@Test(expected=NotPositiveException.class)public void testGetSubVectorInvalidIndex4(){final int n=10;create(new double[n]).getSubVector(3,-2);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetSubVectorSameType",0,"@Test public void testSetSubVectorSameType(){final double x=getPreferredEntryValue();final double[]expected={x,x,x,1d,x,2d,x,x,3d,x,x,x,4d,x,x,x};final double[]sub={5d,x,6d,7d,8d};final RealVector actual=create(expected);final int index=2;actual.setSubVector(index,create(sub));for (int i=0;i < sub.length;i++){expected[index + i]=sub[i];}TestUtils.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetSubVectorMixedType",0,"@Test public void testSetSubVectorMixedType(){final double x=getPreferredEntryValue();final double[]expected={x,x,x,1d,x,2d,x,x,3d,x,x,x,4d,x,x,x};final double[]sub={5d,x,6d,7d,8d};final RealVector actual=create(expected);final int index=2;actual.setSubVector(index,createAlien(sub));for (int i=0;i < sub.length;i++){expected[index + i]=sub[i];}TestUtils.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetSubVectorInvalidIndex1",0,"@Test(expected=OutOfRangeException.class)public void testSetSubVectorInvalidIndex1(){create(new double[10]).setSubVector(-1,create(new double[2]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetSubVectorInvalidIndex2",0,"@Test(expected=OutOfRangeException.class)public void testSetSubVectorInvalidIndex2(){create(new double[10]).setSubVector(10,create(new double[2]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSetSubVectorInvalidIndex3",0,"@Test(expected=OutOfRangeException.class)public void testSetSubVectorInvalidIndex3(){create(new double[10]).setSubVector(9,create(new double[2]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testIsNaN",0,"@Test public void testIsNaN(){final RealVector v=create(new double[]{0,1,2});Assert.assertFalse(v.isNaN());v.setEntry(1,Double.NaN);Assert.assertTrue(v.isNaN());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testIsInfinite",0,"@Test public void testIsInfinite(){final RealVector v=create(new double[]{0,1,2});Assert.assertFalse(v.isInfinite());v.setEntry(0,Double.POSITIVE_INFINITY);Assert.assertTrue(v.isInfinite());v.setEntry(1,Double.NaN);Assert.assertFalse(v.isInfinite());}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAddSameType",0,"@Test public void testAddSameType(){doTestEbeBinaryOperation(BinaryOperation.ADD,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAddMixedTypes",0,"@Test public void testAddMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.ADD,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testAddDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testAddDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.ADD);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSubtractSameType",0,"@Test public void testSubtractSameType(){doTestEbeBinaryOperation(BinaryOperation.SUB,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSubtractMixedTypes",0,"@Test public void testSubtractMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.SUB,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSubtractDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testSubtractDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.SUB);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEbeMultiplySameType",0,"@Ignore(""ebeMultiply(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeMultiplySameType(){doTestEbeBinaryOperation(BinaryOperation.MUL,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEbeMultiplyMixedTypes",0,"@Ignore(""ebeMultiply(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeMultiplyMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.MUL,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEbeMultiplyDimensionMismatch",0,"@Ignore(""ebeMultiply(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test(expected=DimensionMismatchException.class)public void testEbeMultiplyDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.MUL);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEbeDivideSameType",0,"@Ignore(""ebeDivide(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeDivideSameType(){doTestEbeBinaryOperation(BinaryOperation.DIV,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEbeDivideMixedTypes",0,"@Ignore(""ebeDivide(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test public void testEbeDivideMixedTypes(){doTestEbeBinaryOperation(BinaryOperation.DIV,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEbeDivideDimensionMismatch",0,"@Ignore(""ebeDivide(RealVector)is known to be faulty (MATH-803)and is deprecated."")@Test(expected=DimensionMismatchException.class)public void testEbeDivideDimensionMismatch(){doTestEbeBinaryOperationDimensionMismatch(BinaryOperation.DIV);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetDistanceSameType",0,"@Test public void testGetDistanceSameType(){doTestGetDistance(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetDistanceMixedTypes",0,"@Test public void testGetDistanceMixedTypes(){doTestGetDistance(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetDistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetDistanceDimensionMismatch(){create(new double[4]).getDistance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetNorm",0,"@Test public void testGetNorm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getNorm();double expected=0d;for (int i=0;i < data.length;i++){expected+=data[i]* data[i];}expected=FastMath.sqrt(expected);Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetL1DistanceSameType",0,"@Test public void testGetL1DistanceSameType(){doTestGetL1Distance(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetL1DistanceMixedTypes",0,"@Test public void testGetL1DistanceMixedTypes(){doTestGetL1Distance(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetL1DistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetL1DistanceDimensionMismatch(){create(new double[4]).getL1Distance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetL1Norm",0,"@Test public void testGetL1Norm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getL1Norm();double expected=0d;for (int i=0;i < data.length;i++){expected+=FastMath.abs(data[i]);}Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetLInfDistanceSameType",0,"@Test public void testGetLInfDistanceSameType(){doTestGetLInfDistance(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetLInfDistanceMixedTypes",0,"@Test public void testGetLInfDistanceMixedTypes(){doTestGetLInfDistance(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetLInfDistanceDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testGetLInfDistanceDimensionMismatch(){create(new double[4]).getLInfDistance(createAlien(new double[5]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testGetLInfNorm",0,"@Test public void testGetLInfNorm(){final double x=getPreferredEntryValue();final double[]data=new double[]{x,x,1d,x,2d,x,x,3d,x};final RealVector v=create(data);final double actual=v.getLInfNorm();double expected=0d;for (int i=0;i < data.length;i++){expected=FastMath.max(expected,FastMath.abs(data[i]));}Assert.assertEquals("""",expected,actual,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapAdd",0,"@Test public void testMapAdd(){doTestMapBinaryOperation(BinaryOperation.ADD,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapAddToSelf",0,"@Test public void testMapAddToSelf(){doTestMapBinaryOperation(BinaryOperation.ADD,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapSubtract",0,"@Test public void testMapSubtract(){doTestMapBinaryOperation(BinaryOperation.SUB,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapSubtractToSelf",0,"@Test public void testMapSubtractToSelf(){doTestMapBinaryOperation(BinaryOperation.SUB,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapMultiply",0,"@Test public void testMapMultiply(){doTestMapBinaryOperation(BinaryOperation.MUL,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapMultiplyToSelf",0,"@Test public void testMapMultiplyToSelf(){doTestMapBinaryOperation(BinaryOperation.MUL,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapDivide",0,"@Test public void testMapDivide(){doTestMapBinaryOperation(BinaryOperation.DIV,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapDivideToSelf",0,"@Test public void testMapDivideToSelf(){doTestMapBinaryOperation(BinaryOperation.DIV,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMap",0,"@Test public void testMap(){final UnivariateFunction[]functions=createFunctions();for(UnivariateFunction f : functions){doTestMapFunction(f,false);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMapToSelf",0,"@Test public void testMapToSelf(){final UnivariateFunction[]functions=createFunctions();for(UnivariateFunction f : functions){doTestMapFunction(f,true);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testOuterProductSameType",0,"@Test public void testOuterProductSameType(){doTestOuterProduct(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testOuterProductMixedTypes",0,"@Test public void testOuterProductMixedTypes(){doTestOuterProduct(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testProjectionSameType",0,"@Test public void testProjectionSameType(){doTestProjection(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testProjectionMixedTypes",0,"@Test public void testProjectionMixedTypes(){doTestProjection(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testProjectionNullVector",0,"@Test(expected=MathArithmeticException.class)public void testProjectionNullVector(){create(new double[4]).projection(create(new double[4]));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testProjectionDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testProjectionDimensionMismatch(){final RealVector v1=create(new double[4]);final RealVector v2=create(new double[5]);v2.set(1.0);v1.projection(v2);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSet",0,"@Test public void testSet(){for (int i=0;i < values.length;i++){final double expected=values[i];final RealVector v=create(values);v.set(expected);for (int j=0;j < values.length;j++){Assert.assertEquals(""entry #"" + j,expected,v.getEntry(j),0);}}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testToArray",0,"@Test public void testToArray(){final double[]data=create(values).toArray();Assert.assertNotSame(values,data);for (int i=0;i < values.length;i++){Assert.assertEquals(""entry #"" + i,values[i],data[i],0);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testUnitVector",0,"@Test public void testUnitVector(){doTestUnitVector(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testUnitize",0,"@Test public void testUnitize(){doTestUnitVector(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testUnitVectorNullVector",0,"@Test(expected=ArithmeticException.class)public void testUnitVectorNullVector(){doTestUnitVectorNullVector(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testUnitizeNullVector",0,"@Test(expected=ArithmeticException.class)public void testUnitizeNullVector(){doTestUnitVectorNullVector(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testIterator",0,"@Test public void testIterator(){final RealVector v=create(values);final Iterator<RealVector.Entry> it=v.iterator();for (int i=0;i < values.length;i++){Assert.assertTrue(""entry #"" + i,it.hasNext());final RealVector.Entry e=it.next();Assert.assertEquals("""",i,e.getIndex());Assert.assertEquals("""",values[i],e.getValue(),0d);try {it.remove();Assert.fail(""UnsupportedOperationException should have been thrown"");}catch(UnsupportedOperationException exc){}}Assert.assertFalse(it.hasNext());try {it.next();Assert.fail(""NoSuchElementException should have been thrown"");}catch(NoSuchElementException e){}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineSameType",0,"@Test public void testCombineSameType(){doTestCombine(false,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineMixedTypes",0,"@Test public void testCombineMixedTypes(){doTestCombine(false,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testCombineDimensionMismatchSameType(){doTestCombineDimensionMismatch(false,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testCombineDimensionMismatchMixedTypes(){doTestCombineDimensionMismatch(false,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineToSelfSameType",0,"@Test public void testCombineToSelfSameType(){doTestCombine(true,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineToSelfMixedTypes",0,"@Test public void testCombineToSelfMixedTypes(){doTestCombine(true,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineToSelfDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testCombineToSelfDimensionMismatchSameType(){doTestCombineDimensionMismatch(true,false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCombineToSelfDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testCombineToSelfDimensionMismatchMixedTypes(){doTestCombineDimensionMismatch(true,true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCopy",0,"@Test public void testCopy(){final RealVector v=create(values);final RealVector w=v.copy();Assert.assertNotSame(v,w);TestUtils.assertEquals("""",values,w,0d);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testDotProductSameType",0,"@Test public void testDotProductSameType(){doTestDotProductRegularValues(false);doTestDotProductSpecialValues(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testDotProductDimensionMismatchSameType",0,"@Test(expected=DimensionMismatchException.class)public void testDotProductDimensionMismatchSameType(){doTestDotProductDimensionMismatch(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testDotProductMixedTypes",0,"@Test public void testDotProductMixedTypes(){doTestDotProductRegularValues(true);doTestDotProductSpecialValues(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testDotProductDimensionMismatchMixedTypes",0,"@Test(expected=DimensionMismatchException.class)public void testDotProductDimensionMismatchMixedTypes(){doTestDotProductDimensionMismatch(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCosineSameType",0,"@Test public void testCosineSameType(){doTestCosine(false);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCosineMixedTypes",0,"@Test public void testCosineMixedTypes(){doTestCosine(true);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCosineLeftNullVector",0,"@Test(expected=MathArithmeticException.class)public void testCosineLeftNullVector(){final RealVector v=create(new double[]{0,0,0});final RealVector w=create(new double[]{1,0,0});v.cosine(w);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCosineRightNullVector",0,"@Test(expected=MathArithmeticException.class)public void testCosineRightNullVector(){final RealVector v=create(new double[]{0,0,0});final RealVector w=create(new double[]{1,0,0});w.cosine(v);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testCosineDimensionMismatch",0,"@Test(expected=DimensionMismatchException.class)public void testCosineDimensionMismatch(){final RealVector v=create(new double[]{1,2,3});final RealVector w=create(new double[]{1,2,3,4});v.cosine(w);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testEquals",0,"@Test public void testEquals(){final RealVector v=create(new double[]{0,1,2});Assert.assertTrue(v.equals(v));Assert.assertTrue(v.equals(v.copy()));Assert.assertFalse(v.equals(null));Assert.assertFalse(v.equals(v.getSubVector(0,v.getDimension()- 1)));Assert.assertTrue(v.equals(v.getSubVector(0,v.getDimension())));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testSerial",0,"@Test public void testSerial(){RealVector v=create(new double[]{0,1,2});Assert.assertEquals(v,TestUtils.serializeAndRecover(v));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testMinMax",0,"@Test public void testMinMax(){final RealVector v1=create(new double[]{0,-6,4,12,7});Assert.assertEquals(1,v1.getMinIndex());Assert.assertEquals(-6,v1.getMinValue(),1.0e-12);Assert.assertEquals(3,v1.getMaxIndex());Assert.assertEquals(12,v1.getMaxValue(),1.0e-12);final RealVector v2=create(new double[]{Double.NaN,3,Double.NaN,-2});Assert.assertEquals(3,v2.getMinIndex());Assert.assertEquals(-2,v2.getMinValue(),1.0e-12);Assert.assertEquals(1,v2.getMaxIndex());Assert.assertEquals(3,v2.getMaxValue(),1.0e-12);final RealVector v3=create(new double[]{Double.NaN,Double.NaN});Assert.assertEquals(-1,v3.getMinIndex());Assert.assertTrue(Double.isNaN(v3.getMinValue()));Assert.assertEquals(-1,v3.getMaxIndex());Assert.assertTrue(Double.isNaN(v3.getMaxValue()));final RealVector v4=create(new double[0]);Assert.assertEquals(-1,v4.getMinIndex());Assert.assertTrue(Double.isNaN(v4.getMinValue()));Assert.assertEquals(-1,v4.getMaxIndex());Assert.assertTrue(Double.isNaN(v4.getMaxValue()));}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInDefaultOrderPreservingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInDefaultOrderPreservingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private int expectedIndex;public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);expectedIndex=0;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInDefaultOrderPreservingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInDefaultOrderPreservingVisitor2(){final RealVector v=create(new double[5]);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){public void visit(int index,double value){}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInDefaultOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInDefaultOrderPreservingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInDefaultOrderPreservingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private int expectedIndex;public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);expectedIndex=expectedStart;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInOptimizedOrderPreservingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInOptimizedOrderPreservingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private final boolean[]visited=new boolean[data.length];public void visit(final int actualIndex,final double actualValue){visited[actualIndex]=true;Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);Arrays.fill(visited,false);}public double end(){for (int i=0;i < data.length;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInOptimizedOrderPreservingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInOptimizedOrderPreservingVisitor2(){final RealVector v=create(new double[5]);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){public void visit(int index,double value){}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInOptimizedOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInOptimizedOrderPreservingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInOptimizedOrderPreservingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorPreservingVisitor visitor;visitor=new RealVectorPreservingVisitor(){private final boolean[]visited=new boolean[data.length];public void visit(final int actualIndex,final double actualValue){Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);visited[actualIndex]=true;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);Arrays.fill(visited,true);}public double end(){for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor,expectedStart,expectedEnd);}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInDefaultOrderChangingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInDefaultOrderChangingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private int expectedIndex;public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);expectedIndex=0;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInDefaultOrderChangingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInDefaultOrderChangingVisitor2(){final RealVector v=create(new double[5]);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){public double visit(int index,double value){return 0.0;}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInDefaultOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInDefaultOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInDefaultOrderChangingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInDefaultOrderChangingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private int expectedIndex;public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(expectedIndex,actualIndex);Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);++expectedIndex;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);expectedIndex=expectedStart;}public double end(){return 0.0;}};v.walkInDefaultOrder(visitor,expectedStart,expectedEnd);for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInOptimizedOrderChangingVisitor1",0,"/** * The whole vector is visited. */@Test public void testWalkInOptimizedOrderChangingVisitor1(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private final boolean[]visited=new boolean[data.length];public double visit(final int actualIndex,final double actualValue){visited[actualIndex]=true;Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(0,actualStart);Assert.assertEquals(data.length - 1,actualEnd);Arrays.fill(visited,false);}public double end(){for (int i=0;i < data.length;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor);for (int i=0;i < data.length;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInOptimizedOrderChangingVisitor2",0,"/** * Visiting an invalid subvector. */@Test public void testWalkInOptimizedOrderChangingVisitor2(){final RealVector v=create(new double[5]);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){public double visit(int index,double value){return 0.0;}public void start(int dimension,int start,int end){}public double end(){return 0.0;}};try {v.walkInOptimizedOrder(visitor,-1,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,5,4);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,-1);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,0,5);Assert.fail();}catch(OutOfRangeException e){}try {v.walkInOptimizedOrder(visitor,4,0);Assert.fail();}catch(NumberIsTooSmallException e){}}"
"org.apache.commons.math3.linear.ArrayRealVectorTest.testWalkInOptimizedOrderChangingVisitor3",0,"/** * Visiting a valid subvector. */@Test public void testWalkInOptimizedOrderChangingVisitor3(){final double[]data=new double[]{0d,1d,0d,0d,2d,0d,0d,0d,3d};final int expectedStart=2;final int expectedEnd=7;final RealVector v=create(data);final RealVectorChangingVisitor visitor;visitor=new RealVectorChangingVisitor(){private final boolean[]visited=new boolean[data.length];public double visit(final int actualIndex,final double actualValue){Assert.assertEquals(Integer.toString(actualIndex),data[actualIndex],actualValue,0d);visited[actualIndex]=true;return actualIndex + actualValue;}public void start(final int actualSize,final int actualStart,final int actualEnd){Assert.assertEquals(data.length,actualSize);Assert.assertEquals(expectedStart,actualStart);Assert.assertEquals(expectedEnd,actualEnd);Arrays.fill(visited,true);}public double end(){for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertTrue(""entry "" + i + ""has not been visited"",visited[i]);}return 0.0;}};v.walkInOptimizedOrder(visitor,expectedStart,expectedEnd);for (int i=expectedStart;i <= expectedEnd;i++){Assert.assertEquals(""entry "" + i,i + data[i],v.getEntry(i),0.0);}}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest.testInterval",0,"@Test public void testInterval(){IntervalsSet set=new IntervalsSet(2.3,5.7);Assert.assertEquals(3.4,set.getSize(),1.0e-10);Assert.assertEquals(4.0,((Vector1D)set.getBarycenter()).getX(),1.0e-10);Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new Vector1D(2.3)));Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new Vector1D(5.7)));Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(1.2)));Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(8.7)));Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new Vector1D(3.0)));Assert.assertEquals(2.3,set.getInf(),1.0e-10);Assert.assertEquals(5.7,set.getSup(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest.testInfinite",0,"@Test public void testInfinite(){IntervalsSet set=new IntervalsSet(9.0,Double.POSITIVE_INFINITY);Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new Vector1D(9.0)));Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(8.4)));for (double e=1.0;e <= 6.0;e+=1.0){Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new Vector1D(FastMath.pow(10.0,e))));}Assert.assertTrue(Double.isInfinite(set.getSize()));Assert.assertEquals(9.0,set.getInf(),1.0e-10);Assert.assertTrue(Double.isInfinite(set.getSup()));set=(IntervalsSet)new RegionFactory<Euclidean1D>().getComplement(set);Assert.assertEquals(9.0,set.getSup(),1.0e-10);Assert.assertTrue(Double.isInfinite(set.getInf()));}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest.testMultiple",0,"@Test public void testMultiple(){RegionFactory<Euclidean1D> factory=new RegionFactory<Euclidean1D>();IntervalsSet set=(IntervalsSet)factory.intersection(factory.union(factory.difference(new IntervalsSet(1.0,6.0),new IntervalsSet(3.0,5.0)),new IntervalsSet(9.0,Double.POSITIVE_INFINITY)),new IntervalsSet(Double.NEGATIVE_INFINITY,11.0));Assert.assertEquals(5.0,set.getSize(),1.0e-10);Assert.assertEquals(5.9,((Vector1D)set.getBarycenter()).getX(),1.0e-10);Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(0.0)));Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(4.0)));Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(8.0)));Assert.assertEquals(Region.Location.OUTSIDE,set.checkPoint(new Vector1D(12.0)));Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new Vector1D(1.2)));Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new Vector1D(5.9)));Assert.assertEquals(Region.Location.INSIDE,set.checkPoint(new Vector1D(9.01)));Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new Vector1D(5.0)));Assert.assertEquals(Region.Location.BOUNDARY,set.checkPoint(new Vector1D(11.0)));Assert.assertEquals(1.0,set.getInf(),1.0e-10);Assert.assertEquals(11.0,set.getSup(),1.0e-10);List<Interval> list=set.asList();Assert.assertEquals(3,list.size());Assert.assertEquals(1.0,list.get(0).getInf(),1.0e-10);Assert.assertEquals(3.0,list.get(0).getSup(),1.0e-10);Assert.assertEquals(5.0,list.get(1).getInf(),1.0e-10);Assert.assertEquals(6.0,list.get(1).getSup(),1.0e-10);Assert.assertEquals(9.0,list.get(2).getInf(),1.0e-10);Assert.assertEquals(11.0,list.get(2).getSup(),1.0e-10);}"
"org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest.testSinglePoint",0,"@Test public void testSinglePoint(){IntervalsSet set=new IntervalsSet(1.0,1.0);Assert.assertEquals(0.0,set.getSize(),Precision.SAFE_MIN);Assert.assertEquals(1.0,((Vector1D)set.getBarycenter()).getX(),Precision.EPSILON);}"
"org.apache.commons.math3.ml.distance.ManhattanDistanceTest.testZero",0,"@Test public void testZero(){final double[]a={0,1,-2,3.4,5,-6.7,89};Assert.assertEquals(0,distance.compute(a,a),0d);}"
"org.apache.commons.math3.ml.distance.ManhattanDistanceTest.test",0,"@Test public void test(){final double[]a={1,-2,3,4};final double[]b={-5,-6,7,8};final double expected=18;Assert.assertEquals(expected,distance.compute(a,b),0d);Assert.assertEquals(expected,distance.compute(b,a),0d);}"
"org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest.testGetOptimaBeforeOptimize",0,"@Test(expected=NullPointerException.class)public void testGetOptimaBeforeOptimize(){JacobianMultivariateVectorOptimizer underlyingOptimizer=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-6,1e-6));JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(16069223052l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));MultiStartMultivariateVectorOptimizer optimizer=new MultiStartMultivariateVectorOptimizer(underlyingOptimizer,10,generator);optimizer.getOptima();}"
"org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest.testTrivial",0,"@Test public void testTrivial(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});JacobianMultivariateVectorOptimizer underlyingOptimizer=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-6,1e-6));JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(16069223052l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));MultiStartMultivariateVectorOptimizer optimizer=new MultiStartMultivariateVectorOptimizer(underlyingOptimizer,10,generator);PointVectorValuePair optimum=optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}));Assert.assertEquals(1.5,optimum.getPoint()[0],1e-10);Assert.assertEquals(3.0,optimum.getValue()[0],1e-10);PointVectorValuePair[]optima=optimizer.getOptima();Assert.assertEquals(10,optima.length);for (int i=0;i < optima.length;i++){Assert.assertEquals(1.5,optima[i].getPoint()[0],1e-10);Assert.assertEquals(3.0,optima[i].getValue()[0],1e-10);}Assert.assertTrue(optimizer.getEvaluations()> 20);Assert.assertTrue(optimizer.getEvaluations()< 50);Assert.assertEquals(100,optimizer.getMaxEvaluations());}"
"org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest.testIssue914",0,"@Test public void testIssue914(){LinearProblem problem=new LinearProblem(new double[][]{{2}},new double[]{3});JacobianMultivariateVectorOptimizer underlyingOptimizer=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-6,1e-6)){public PointVectorValuePair optimize(OptimizationData... optData){OptimizationData[]filtered=optData.clone();for (int i=0;i < filtered.length;++i){if (filtered[i]instanceof SimpleBounds){filtered[i]=null;}}return super.optimize(filtered);}};JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(16069223052l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));MultiStartMultivariateVectorOptimizer optimizer=new MultiStartMultivariateVectorOptimizer(underlyingOptimizer,10,generator);optimizer.optimize(new MaxEval(100),problem.getModelFunction(),problem.getModelFunctionJacobian(),problem.getTarget(),new Weight(new double[]{1}),new InitialGuess(new double[]{0}),new SimpleBounds(new double[]{-1.0e-10},new double[]{1.0e-10}));PointVectorValuePair[]optima=optimizer.getOptima();Assert.assertEquals(1,optima.length);}"
"org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest.testNoOptimum",0,"/** * Test demonstrating that the user exception is finally thrown if none of the runs succeed.*/@Test(expected=TestException.class)public void testNoOptimum(){JacobianMultivariateVectorOptimizer underlyingOptimizer=new GaussNewtonOptimizer(true,new SimpleVectorValueChecker(1e-6,1e-6));JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(12373523445l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(1,new GaussianRandomGenerator(g));MultiStartMultivariateVectorOptimizer optimizer=new MultiStartMultivariateVectorOptimizer(underlyingOptimizer,10,generator);optimizer.optimize(new MaxEval(100),new Target(new double[]{0}),new Weight(new double[]{1}),new InitialGuess(new double[]{0}),new ModelFunction(new MultivariateVectorFunction(){public double[]value(double[]point){throw new TestException();}}));}"
"org.apache.commons.math3.genetics.ListPopulationTest.testGetFittestChromosome",0,"@Test public void testGetFittestChromosome(){Chromosome c1=new Chromosome(){public double fitness(){return 0;}};Chromosome c2=new Chromosome(){public double fitness(){return 10;}};Chromosome c3=new Chromosome(){public double fitness(){return 15;}};ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(c1);chromosomes.add(c2);chromosomes.add(c3);ListPopulation population=new ListPopulation(chromosomes,10){public Population nextGeneration(){return null;}};Assert.assertEquals(c3,population.getFittestChromosome());}"
"org.apache.commons.math3.genetics.ListPopulationTest.testChromosomes",0,"@Test public void testChromosomes(){final ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));final ListPopulation population=new ListPopulation(10){public Population nextGeneration(){return null;}};population.addChromosomes(chromosomes);Assert.assertEquals(chromosomes,population.getChromosomes());Assert.assertEquals(chromosomes.toString(),population.toString());population.setPopulationLimit(50);Assert.assertEquals(50,population.getPopulationLimit());}"
"org.apache.commons.math3.genetics.ListPopulationTest.testSetPopulationLimit",0,"@Test(expected=NotPositiveException.class)public void testSetPopulationLimit(){final ListPopulation population=new ListPopulation(10){public Population nextGeneration(){return null;}};population.setPopulationLimit(-50);}"
"org.apache.commons.math3.genetics.ListPopulationTest.testConstructorPopulationLimitNotPositive",0,"@Test(expected=NotPositiveException.class)public void testConstructorPopulationLimitNotPositive(){new ListPopulation(-10){public Population nextGeneration(){return null;}};}"
"org.apache.commons.math3.genetics.ListPopulationTest.testChromosomeListConstructorPopulationLimitNotPositive",0,"@Test(expected=NotPositiveException.class)public void testChromosomeListConstructorPopulationLimitNotPositive(){final ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));new ListPopulation(chromosomes,-10){public Population nextGeneration(){return null;}};}"
"org.apache.commons.math3.genetics.ListPopulationTest.testConstructorListOfChromosomesBiggerThanPopulationSize",0,"@Test(expected=NumberIsTooLargeException.class)public void testConstructorListOfChromosomesBiggerThanPopulationSize(){final ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));new ListPopulation(chromosomes,1){public Population nextGeneration(){return null;}};}"
"org.apache.commons.math3.genetics.ListPopulationTest.testAddTooManyChromosomes",0,"@Test(expected=NumberIsTooLargeException.class)public void testAddTooManyChromosomes(){final ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));final ListPopulation population=new ListPopulation(2){public Population nextGeneration(){return null;}};population.addChromosomes(chromosomes);}"
"org.apache.commons.math3.genetics.ListPopulationTest.testAddTooManyChromosomesSingleCall",0,"@Test(expected=NumberIsTooLargeException.class)public void testAddTooManyChromosomesSingleCall(){final ListPopulation population=new ListPopulation(2){public Population nextGeneration(){return null;}};for (int i=0;i <= population.getPopulationLimit();i++){population.addChromosome(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));}}"
"org.apache.commons.math3.genetics.ListPopulationTest.testIterator",0,"@Test(expected=UnsupportedOperationException.class)public void testIterator(){final ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));final ListPopulation population=new ListPopulation(10){public Population nextGeneration(){return null;}};population.addChromosomes(chromosomes);final Iterator<Chromosome> iter=population.iterator();while (iter.hasNext()){iter.next();iter.remove();}}"
"org.apache.commons.math3.genetics.ListPopulationTest.testSetPopulationLimitTooSmall",0,"@Test(expected=NumberIsTooSmallException.class)public void testSetPopulationLimitTooSmall(){final ArrayList<Chromosome> chromosomes=new ArrayList<Chromosome>();chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));final ListPopulation population=new ListPopulation(chromosomes,3){public Population nextGeneration(){return null;}};population.setPopulationLimit(2);}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();new GillIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testDecreasingSteps",0,"@Test public void testDecreasingSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousValueError=Double.NaN;double previousTimeError=Double.NaN;for (int i=5;i < 10;++i){TestProblemAbstract pb=problems[k].copy();double step=(pb.getFinalTime()- pb.getInitialTime())* FastMath.pow(2.0,-i);FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double valueError=handler.getMaximalValueError();if (i > 5){Assert.assertTrue(valueError < 1.01 * FastMath.abs(previousValueError));}previousValueError=valueError;double timeError=handler.getMaximalTimeError();if (i > 5){Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));}previousTimeError=timeError;}}}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testSmallStep",0,"@Test public void testSmallStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 2.0e-13);Assert.assertTrue(handler.getMaximalValueError()< 4.0e-12);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Gill"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testBigStep",0,"@Test public void testBigStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()> 0.0004);Assert.assertTrue(handler.getMaximalValueError()> 0.005);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double step=FastMath.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new GillIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 5.0e-10);Assert.assertTrue(handler.getMaximalValueError()< 7.0e-10);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Gill"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;FirstOrderIntegrator integ=new GillIntegrator(step);integ.addStepHandler(new KeplerStepHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testUnstableDerivative",0,"@Test public void testUnstableDerivative()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final StepProblem stepProblem=new StepProblem(0.0,1.0,2.0);FirstOrderIntegrator integ=new GillIntegrator(0.3);integ.addEventHandler(stepProblem,1.0,1.0e-12,1000);double[]y={Double.NaN};integ.integrate(stepProblem,0.0,new double[]{0.0},10.0,y);Assert.assertEquals(8.0,y[0],1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.GillIntegratorTest.testStepSize",0,"@Test public void testStepSize()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double step=1.23456;FirstOrderIntegrator integ=new GillIntegrator(step);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){Assert.assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public void init(double t0,double[]y0,double t){}});integ.integrate(new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math3.linear.SparseFieldVectorTest.testMapFunctions",0,"@Test public void testMapFunctions()throws FractionConversionException {SparseFieldVector<Fraction> v1=new SparseFieldVector<Fraction>(field,vec1);FieldVector<Fraction> v_mapAdd=v1.mapAdd(new Fraction(2));Fraction[]result_mapAdd={new Fraction(3),new Fraction(4),new Fraction(5)};Assert.assertArrayEquals(""compare vectors"",result_mapAdd,v_mapAdd.getData());FieldVector<Fraction> v_mapAddToSelf=v1.copy();v_mapAddToSelf.mapAddToSelf(new Fraction(2));Fraction[]result_mapAddToSelf={new Fraction(3),new Fraction(4),new Fraction(5)};Assert.assertArrayEquals(""compare vectors"",result_mapAddToSelf,v_mapAddToSelf.getData());FieldVector<Fraction> v_mapSubtract=v1.mapSubtract(new Fraction(2));Fraction[]result_mapSubtract={new Fraction(-1),new Fraction(0),new Fraction(1)};Assert.assertArrayEquals(""compare vectors"",result_mapSubtract,v_mapSubtract.getData());FieldVector<Fraction> v_mapSubtractToSelf=v1.copy();v_mapSubtractToSelf.mapSubtractToSelf(new Fraction(2));Fraction[]result_mapSubtractToSelf={new Fraction(-1),new Fraction(0),new Fraction(1)};Assert.assertArrayEquals(""compare vectors"",result_mapSubtractToSelf,v_mapSubtractToSelf.getData());FieldVector<Fraction> v_mapMultiply=v1.mapMultiply(new Fraction(2));Fraction[]result_mapMultiply={new Fraction(2),new Fraction(4),new Fraction(6)};Assert.assertArrayEquals(""compare vectors"",result_mapMultiply,v_mapMultiply.getData());FieldVector<Fraction> v_mapMultiplyToSelf=v1.copy();v_mapMultiplyToSelf.mapMultiplyToSelf(new Fraction(2));Fraction[]result_mapMultiplyToSelf={new Fraction(2),new Fraction(4),new Fraction(6)};Assert.assertArrayEquals(""compare vectors"",result_mapMultiplyToSelf,v_mapMultiplyToSelf.getData());FieldVector<Fraction> v_mapDivide=v1.mapDivide(new Fraction(2));Fraction[]result_mapDivide={new Fraction(.5d),new Fraction(1),new Fraction(1.5d)};Assert.assertArrayEquals(""compare vectors"",result_mapDivide,v_mapDivide.getData());FieldVector<Fraction> v_mapDivideToSelf=v1.copy();v_mapDivideToSelf.mapDivideToSelf(new Fraction(2));Fraction[]result_mapDivideToSelf={new Fraction(.5d),new Fraction(1),new Fraction(1.5d)};Assert.assertArrayEquals(""compare vectors"",result_mapDivideToSelf,v_mapDivideToSelf.getData());FieldVector<Fraction> v_mapInv=v1.mapInv();Fraction[]result_mapInv={new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};Assert.assertArrayEquals(""compare vectors"",result_mapInv,v_mapInv.getData());FieldVector<Fraction> v_mapInvToSelf=v1.copy();v_mapInvToSelf.mapInvToSelf();Fraction[]result_mapInvToSelf={new Fraction(1),new Fraction(0.5d),new Fraction(3.333333333333333e-01d)};Assert.assertArrayEquals(""compare vectors"",result_mapInvToSelf,v_mapInvToSelf.getData());}"
"org.apache.commons.math3.linear.SparseFieldVectorTest.testBasicFunctions",0,"@Test public void testBasicFunctions()throws FractionConversionException {SparseFieldVector<Fraction> v1=new SparseFieldVector<Fraction>(field,vec1);SparseFieldVector<Fraction> v2=new SparseFieldVector<Fraction>(field,vec2);FieldVector<Fraction> v2_t=new ArrayFieldVectorTest.FieldVectorTestImpl<Fraction>(vec2);FieldVector<Fraction> v_add=v1.add(v2);Fraction[]result_add={new Fraction(5),new Fraction(7),new Fraction(9)};Assert.assertArrayEquals(""compare vect"",v_add.getData(),result_add);FieldVector<Fraction> vt2=new ArrayFieldVectorTest.FieldVectorTestImpl<Fraction>(vec2);FieldVector<Fraction> v_add_i=v1.add(vt2);Fraction[]result_add_i={new Fraction(5),new Fraction(7),new Fraction(9)};Assert.assertArrayEquals(""compare vect"",v_add_i.getData(),result_add_i);SparseFieldVector<Fraction> v_subtract=v1.subtract(v2);Fraction[]result_subtract={new Fraction(-3),new Fraction(-3),new Fraction(-3)};assertClose(""compare vect"",v_subtract.getData(),result_subtract,normTolerance);FieldVector<Fraction> v_subtract_i=v1.subtract(vt2);Fraction[]result_subtract_i={new Fraction(-3),new Fraction(-3),new Fraction(-3)};assertClose(""compare vect"",v_subtract_i.getData(),result_subtract_i,normTolerance);FieldVector<Fraction> v_ebeMultiply=v1.ebeMultiply(v2);Fraction[]result_ebeMultiply={new Fraction(4),new Fraction(10),new Fraction(18)};assertClose(""compare vect"",v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);FieldVector<Fraction> v_ebeMultiply_2=v1.ebeMultiply(v2_t);Fraction[]result_ebeMultiply_2={new Fraction(4),new Fraction(10),new Fraction(18)};assertClose(""compare vect"",v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);FieldVector<Fraction> v_ebeDivide=v1.ebeDivide(v2);Fraction[]result_ebeDivide={new Fraction(0.25d),new Fraction(0.4d),new Fraction(0.5d)};assertClose(""compare vect"",v_ebeDivide.getData(),result_ebeDivide,normTolerance);FieldVector<Fraction> v_ebeDivide_2=v1.ebeDivide(v2_t);Fraction[]result_ebeDivide_2={new Fraction(0.25d),new Fraction(0.4d),new Fraction(0.5d)};assertClose(""compare vect"",v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);Fraction dot=v1.dotProduct(v2);Assert.assertEquals(""compare val "",new Fraction(32),dot);Fraction dot_2=v1.dotProduct(v2_t);Assert.assertEquals(""compare val "",new Fraction(32),dot_2);FieldMatrix<Fraction> m_outerProduct=v1.outerProduct(v2);Assert.assertEquals(""compare val "",new Fraction(4),m_outerProduct.getEntry(0,0));FieldMatrix<Fraction> m_outerProduct_2=v1.outerProduct(v2_t);Assert.assertEquals(""compare val "",new Fraction(4),m_outerProduct_2.getEntry(0,0));}"
"org.apache.commons.math3.linear.SparseFieldVectorTest.testOuterProduct",0,"@Test public void testOuterProduct(){final SparseFieldVector<Fraction> u=new SparseFieldVector<Fraction>(FractionField.getInstance(),new Fraction[]{new Fraction(1),new Fraction(2),new Fraction(-3)});final SparseFieldVector<Fraction> v=new SparseFieldVector<Fraction>(FractionField.getInstance(),new Fraction[]{new Fraction(4),new Fraction(-2)});final FieldMatrix<Fraction> uv=u.outerProduct(v);final double tol=Math.ulp(1d);Assert.assertEquals(new Fraction(4).doubleValue(),uv.getEntry(0,0).doubleValue(),tol);Assert.assertEquals(new Fraction(-2).doubleValue(),uv.getEntry(0,1).doubleValue(),tol);Assert.assertEquals(new Fraction(8).doubleValue(),uv.getEntry(1,0).doubleValue(),tol);Assert.assertEquals(new Fraction(-4).doubleValue(),uv.getEntry(1,1).doubleValue(),tol);Assert.assertEquals(new Fraction(-12).doubleValue(),uv.getEntry(2,0).doubleValue(),tol);Assert.assertEquals(new Fraction(6).doubleValue(),uv.getEntry(2,1).doubleValue(),tol);}"
"org.apache.commons.math3.linear.SparseFieldVectorTest.testMisc",0,"@Test public void testMisc(){SparseFieldVector<Fraction> v1=new SparseFieldVector<Fraction>(field,vec1);String out1=v1.toString();Assert.assertTrue(""some output "",out1.length()!= 0);try {v1.checkVectorDimensions(2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SparseFieldVectorTest.testPredicates",0,"@Test public void testPredicates(){SparseFieldVector<Fraction> v=new SparseFieldVector<Fraction>(field,new Fraction[]{new Fraction(0),new Fraction(1),new Fraction(2)});v.setEntry(0,field.getZero());Assert.assertEquals(v,new SparseFieldVector<Fraction>(field,new Fraction[]{new Fraction(0),new Fraction(1),new Fraction(2)}));Assert.assertNotSame(v,new SparseFieldVector<Fraction>(field,new Fraction[]{new Fraction(0),new Fraction(1),new Fraction(2),new Fraction(3)}));}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquare",0,"@Test public void testChiSquare(){long[]observed={10,9,11};double[]expected={10,10,10};Assert.assertEquals(""chi-square statistic"",0.2,testStatistic.chiSquare(expected,observed),10E-12);Assert.assertEquals(""chi-square p-value"",0.904837418036,testStatistic.chiSquareTest(expected,observed),1E-10);long[]observed1={500,623,72,70,31};double[]expected1={485,541,82,61,37};Assert.assertEquals(""chi-square test statistic"",9.023307936427388,testStatistic.chiSquare(expected1,observed1),1E-10);Assert.assertEquals(""chi-square p-value"",0.06051952647453607,testStatistic.chiSquareTest(expected1,observed1),1E-9);Assert.assertTrue(""chi-square test reject"",testStatistic.chiSquareTest(expected1,observed1,0.08));Assert.assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(expected1,observed1,0.05));try {testStatistic.chiSquareTest(expected1,observed1,95);Assert.fail(""alpha out of range,OutOfRangeException expected"");}catch(OutOfRangeException ex){}long[]tooShortObs={0};double[]tooShortEx={1};try {testStatistic.chiSquare(tooShortEx,tooShortObs);Assert.fail(""arguments too short,DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}long[]unMatchedObs={0,1,2,3};double[]unMatchedEx={1,1,2};try {testStatistic.chiSquare(unMatchedEx,unMatchedObs);Assert.fail(""arrays have different lengths,DimensionMismatchException expected"");}catch(DimensionMismatchException ex){}expected[0]=0;try {testStatistic.chiSquareTest(expected,observed,.01);Assert.fail(""bad expected count,NotStrictlyPositiveException expected"");}catch(NotStrictlyPositiveException ex){}expected[0]=1;observed[0]=-1;try {testStatistic.chiSquareTest(expected,observed,.01);Assert.fail(""bad expected count,NotPositiveException expected"");}catch(NotPositiveException ex){}}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareIndependence",0,"@Test public void testChiSquareIndependence(){long[][]counts={{40,22,43},{91,21,28},{60,10,22}};Assert.assertEquals(""chi-square test statistic"",22.709027688,testStatistic.chiSquare(counts),1E-9);Assert.assertEquals(""chi-square p-value"",0.000144751460134,testStatistic.chiSquareTest(counts),1E-9);Assert.assertTrue(""chi-square test reject"",testStatistic.chiSquareTest(counts,0.0002));Assert.assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(counts,0.0001));long[][]counts2={{10,15},{30,40},{60,90}};Assert.assertEquals(""chi-square test statistic"",0.168965517241,testStatistic.chiSquare(counts2),1E-9);Assert.assertEquals(""chi-square p-value"",0.918987499852,testStatistic.chiSquareTest(counts2),1E-9);Assert.assertTrue(""chi-square test accept"",!testStatistic.chiSquareTest(counts2,0.1));long[][]counts3={{40,22,43},{91,21,28},{60,10}};try {testStatistic.chiSquare(counts3);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}long[][]counts4={{40,22,43}};try {testStatistic.chiSquare(counts4);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}long[][]counts5={{40},{40},{30},{10}};try {testStatistic.chiSquare(counts5);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException ex){}long[][]counts6={{10,-2},{30,40},{60,90}};try {testStatistic.chiSquare(counts6);Assert.fail(""Expecting NotPositiveException"");}catch(NotPositiveException ex){}try {testStatistic.chiSquareTest(counts,0);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareLargeTestStatistic",0,"@Test public void testChiSquareLargeTestStatistic(){double[]exp=new double[]{3389119.5,649136.6,285745.4,25357364.76,11291189.78,543628.0,232921.0,437665.75};long[]obs=new long[]{2372383,584222,257170,17750155,7903832,489265,209628,393899};org.apache.commons.math3.stat.inference.ChiSquareTest csti=new org.apache.commons.math3.stat.inference.ChiSquareTest();double cst=csti.chiSquareTest(exp,obs);Assert.assertEquals(""chi-square p-value"",0.0,cst,1E-3);Assert.assertEquals(""chi-square test statistic"",114875.90421929007,testStatistic.chiSquare(exp,obs),1E-9);}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareZeroCount",0,"/** * Contingency table containing zeros - PR # 32531 */@Test public void testChiSquareZeroCount(){long[][]counts={{40,0,4},{91,1,2},{60,2,0}};Assert.assertEquals(""chi-square test statistic"",9.67444662263,testStatistic.chiSquare(counts),1E-9);Assert.assertEquals(""chi-square p-value"",0.0462835770603,testStatistic.chiSquareTest(counts),1E-9);}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonEqualCounts",0,"/** * Target values verified using DATAPLOT version 2006.3 */@Test public void testChiSquareDataSetsComparisonEqualCounts(){long[]observed1={10,12,12,10};long[]observed2={5,15,14,10};Assert.assertEquals(""chi-square p value"",0.541096,testStatistic.chiSquareTestDataSetsComparison(observed1,observed2),1E-6);Assert.assertEquals(""chi-square test statistic"",2.153846,testStatistic.chiSquareDataSetsComparison(observed1,observed2),1E-6);Assert.assertFalse(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.4));}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonUnEqualCounts",0,"/** * Target values verified using DATAPLOT version 2006.3 */@Test public void testChiSquareDataSetsComparisonUnEqualCounts(){long[]observed1={10,12,12,10,15};long[]observed2={15,10,10,15,5};Assert.assertEquals(""chi-square p value"",0.124115,testStatistic.chiSquareTestDataSetsComparison(observed1,observed2),1E-6);Assert.assertEquals(""chi-square test statistic"",7.232189,testStatistic.chiSquareDataSetsComparison(observed1,observed2),1E-6);Assert.assertTrue(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.13));Assert.assertFalse(""chi-square test result"",testStatistic.chiSquareTestDataSetsComparison(observed1,observed2,0.12));}"
"org.apache.commons.math3.stat.inference.ChiSquareTestTest.testChiSquareDataSetsComparisonBadCounts",0,"@Test public void testChiSquareDataSetsComparisonBadCounts(){long[]observed1={10,-1,12,10,15};long[]observed2={15,10,10,15,5};try {testStatistic.chiSquareTestDataSetsComparison(observed1,observed2);Assert.fail(""Expecting NotPositiveException - negative count"");}catch(NotPositiveException ex){}long[]observed3={10,0,12,10,15};long[]observed4={15,0,10,15,5};try {testStatistic.chiSquareTestDataSetsComparison(observed3,observed4);Assert.fail(""Expecting ZeroException - double 0's"");}catch(ZeroException ex){}long[]observed5={10,10,12,10,15};long[]observed6={0,0,0,0,0};try {testStatistic.chiSquareTestDataSetsComparison(observed5,observed6);Assert.fail(""Expecting ZeroException - vanishing counts"");}catch(ZeroException ex){}}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();new ThreeEighthesIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testDecreasingSteps",0,"@Test public void testDecreasingSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousValueError=Double.NaN;double previousTimeError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=problems[k].copy();double step=(pb.getFinalTime()- pb.getInitialTime())* FastMath.pow(2.0,-i);FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 4){Assert.assertTrue(error < 1.01 * FastMath.abs(previousValueError));}previousValueError=error;double timeError=handler.getMaximalTimeError();if (i > 4){Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));}previousTimeError=timeError;}}}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testSmallStep",0,"@Test public void testSmallStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 2.0e-13);Assert.assertTrue(handler.getMaximalValueError()< 4.0e-12);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""3/8"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testBigStep",0,"@Test public void testBigStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()> 0.0004);Assert.assertTrue(handler.getMaximalValueError()> 0.005);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double step=FastMath.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 5.0e-10);Assert.assertTrue(handler.getMaximalValueError()< 7.0e-10);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""3/8"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegratorTest.testStepSize",0,"@Test public void testStepSize()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double step=1.23456;FirstOrderIntegrator integ=new ThreeEighthesIntegrator(step);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){Assert.assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public void init(double t0,double[]y0,double t){}});integ.integrate(new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest.testPreconditions",0,"/** * Test preconditions.*/@Test public void testPreconditions(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2.5};double[]zval=new double[]{-12,-8,-5.5,-3,0,2.5};double[][][]fval=new double[xval.length][yval.length][zval.length];TrivariateGridInterpolator interpolator=new TricubicSplineInterpolator();@SuppressWarnings(""unused"")TrivariateFunction p=interpolator.interpolate(xval,yval,zval,fval);double[]wxval=new double[]{3,2,5,6.5};try {p=interpolator.interpolate(wxval,yval,zval,fval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wyval=new double[]{-4,-3,-1,-1};try {p=interpolator.interpolate(xval,wyval,zval,fval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[]wzval=new double[]{-12,-8,-5.5,-3,-4,2.5};try {p=interpolator.interpolate(xval,yval,wzval,fval);Assert.fail(""an exception should have been thrown"");}catch(MathIllegalArgumentException e){}double[][][]wfval=new double[xval.length][yval.length + 1][zval.length];try {p=interpolator.interpolate(xval,yval,zval,wfval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wfval=new double[xval.length - 1][yval.length][zval.length];try {p=interpolator.interpolate(xval,yval,zval,wfval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}wfval=new double[xval.length][yval.length][zval.length - 1];try {p=interpolator.interpolate(xval,yval,zval,wfval);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException e){}}"
"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest.testPlane",0,"/** * Test of interpolator for a plane. <p> f(x,y,z)= 2 x - 3 y - z + 5*/@Ignore @Test public void testPlane(){TrivariateFunction f=new TrivariateFunction(){public double value(double x,double y,double z){return 2 * x - 3 * y - z + 5;}};TrivariateGridInterpolator interpolator=new TricubicSplineInterpolator();double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};double[]zval=new double[]{-12,-8,-5.5,-3,0,2.5};double[][][]fval=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){fval[i][j][k]=f.value(xval[i],yval[j],zval[k]);}}}TrivariateFunction p=interpolator.interpolate(xval,yval,zval,fval);double x,y,z;double expected,result;x=4;y=-3;z=0;expected=f.value(x,y,z);result=p.value(x,y,z);Assert.assertEquals(""On sample point"",expected,result,1e-15);x=4.5;y=-1.5;z=-4.25;expected=f.value(x,y,z);result=p.value(x,y,z);Assert.assertEquals(""half-way between sample points (middle of the patch)"",expected,result,0.3);x=3.5;y=-3.5;z=-10;expected=f.value(x,y,z);result=p.value(x,y,z);Assert.assertEquals(""half-way between sample points (border of the patch)"",expected,result,0.3);}"
"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest.testWave",0,"/** * Test of interpolator for a sine wave. <p> <p> f(x,y,z)= a cos [&omega;z - k<sub>y</sub> x - k<sub>y</sub> y]</p> with A = 0.2,&omega;= 0.5,k<sub>x</sub> = 2,k<sub>y</sub> = 1.*/@Ignore @Test public void testWave(){double[]xval=new double[]{3,4,5,6.5};double[]yval=new double[]{-4,-3,-1,2,2.5};double[]zval=new double[]{-12,-8,-5.5,-3,0,4};final double a=0.2;final double omega=0.5;final double kx=2;final double ky=1;TrivariateFunction f=new TrivariateFunction(){public double value(double x,double y,double z){return a * FastMath.cos(omega * z - kx * x - ky * y);}};double[][][]fval=new double[xval.length][yval.length][zval.length];for (int i=0;i < xval.length;i++){for (int j=0;j < yval.length;j++){for (int k=0;k < zval.length;k++){fval[i][j][k]=f.value(xval[i],yval[j],zval[k]);}}}TrivariateGridInterpolator interpolator=new TricubicSplineInterpolator();TrivariateFunction p=interpolator.interpolate(xval,yval,zval,fval);double x,y,z;double expected,result;x=4;y=-3;z=0;expected=f.value(x,y,z);result=p.value(x,y,z);Assert.assertEquals(""On sample point"",expected,result,1e-12);x=4.5;y=-1.5;z=-4.25;expected=f.value(x,y,z);result=p.value(x,y,z);Assert.assertEquals(""Half-way between sample points (middle of the patch)"",expected,result,0.1);x=3.5;y=-3.5;z=-10;expected=f.value(x,y,z);result=p.value(x,y,z);Assert.assertEquals(""Half-way between sample points (border of the patch)"",expected,result,0.1);}"
"org.apache.commons.math3.dfp.DfpDecTest.testRound",0,"@Test public void testRound(){field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);test(new DfpDec(field,""12345678901234567890""),new DfpDec(field,""12345678901234568000""),DfpField.FLAG_INEXACT,""Round #1"");test(new DfpDec(field,""0.12345678901234567890""),new DfpDec(field,""0.12345678901234568""),DfpField.FLAG_INEXACT,""Round #2"");test(new DfpDec(field,""0.12345678901234567500""),new DfpDec(field,""0.12345678901234568""),DfpField.FLAG_INEXACT,""Round #3"");test(new DfpDec(field,""0.12345678901234568500""),new DfpDec(field,""0.12345678901234568""),DfpField.FLAG_INEXACT,""Round #4"");test(new DfpDec(field,""0.12345678901234568501""),new DfpDec(field,""0.12345678901234569""),DfpField.FLAG_INEXACT,""Round #5"");test(new DfpDec(field,""0.12345678901234568499""),new DfpDec(field,""0.12345678901234568""),DfpField.FLAG_INEXACT,""Round #6"");test(new DfpDec(field,""1.2345678901234567890""),new DfpDec(field,""1.2345678901234568""),DfpField.FLAG_INEXACT,""Round #7"");test(new DfpDec(field,""1.2345678901234567500""),new DfpDec(field,""1.2345678901234568""),DfpField.FLAG_INEXACT,""Round #8"");test(new DfpDec(field,""1.2345678901234568500""),new DfpDec(field,""1.2345678901234568""),DfpField.FLAG_INEXACT,""Round #9"");test(new DfpDec(field,""1.2345678901234568000"").add(new DfpDec(field,"".0000000000000000501"")),new DfpDec(field,""1.2345678901234569""),DfpField.FLAG_INEXACT,""Round #10"");test(new DfpDec(field,""1.2345678901234568499""),new DfpDec(field,""1.2345678901234568""),DfpField.FLAG_INEXACT,""Round #11"");test(new DfpDec(field,""12.345678901234567890""),new DfpDec(field,""12.345678901234568""),DfpField.FLAG_INEXACT,""Round #12"");test(new DfpDec(field,""12.345678901234567500""),new DfpDec(field,""12.345678901234568""),DfpField.FLAG_INEXACT,""Round #13"");test(new DfpDec(field,""12.345678901234568500""),new DfpDec(field,""12.345678901234568""),DfpField.FLAG_INEXACT,""Round #14"");test(new DfpDec(field,""12.345678901234568"").add(new DfpDec(field,"".000000000000000501"")),new DfpDec(field,""12.345678901234569""),DfpField.FLAG_INEXACT,""Round #15"");test(new DfpDec(field,""12.345678901234568499""),new DfpDec(field,""12.345678901234568""),DfpField.FLAG_INEXACT,""Round #16"");test(new DfpDec(field,""123.45678901234567890""),new DfpDec(field,""123.45678901234568""),DfpField.FLAG_INEXACT,""Round #17"");test(new DfpDec(field,""123.45678901234567500""),new DfpDec(field,""123.45678901234568""),DfpField.FLAG_INEXACT,""Round #18"");test(new DfpDec(field,""123.45678901234568500""),new DfpDec(field,""123.45678901234568""),DfpField.FLAG_INEXACT,""Round #19"");test(new DfpDec(field,""123.456789012345685"").add(new DfpDec(field,"".00000000000000501"")),new DfpDec(field,""123.45678901234569""),DfpField.FLAG_INEXACT,""Round #20"");test(new DfpDec(field,""123.45678901234568499""),new DfpDec(field,""123.45678901234568""),DfpField.FLAG_INEXACT,""Round #21"");field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.9"")),new DfpDec(field,""12345678901234567""),DfpField.FLAG_INEXACT,""Round #22"");test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.99999999"")),new DfpDec(field,""12345678901234567""),DfpField.FLAG_INEXACT,""Round #23"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.99999999"")),new DfpDec(field,""-12345678901234567""),DfpField.FLAG_INEXACT,""Round #24"");field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.1"")),new DfpDec(field,""12345678901234568""),DfpField.FLAG_INEXACT,""Round #25"");test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.0001"")),new DfpDec(field,""12345678901234568""),DfpField.FLAG_INEXACT,""Round #26"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.1"")),new DfpDec(field,""-12345678901234568""),DfpField.FLAG_INEXACT,""Round #27"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.0001"")),new DfpDec(field,""-12345678901234568""),DfpField.FLAG_INEXACT,""Round #28"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""0"")),new DfpDec(field,""-12345678901234567""),0,""Round #28.5"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.499999999999"")),new DfpDec(field,""12345678901234567""),DfpField.FLAG_INEXACT,""Round #29"");test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.50000001"")),new DfpDec(field,""12345678901234568""),DfpField.FLAG_INEXACT,""Round #30"");test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.5"")),new DfpDec(field,""12345678901234568""),DfpField.FLAG_INEXACT,""Round #30.5"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.499999999999"")),new DfpDec(field,""-12345678901234567""),DfpField.FLAG_INEXACT,""Round #31"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.50000001"")),new DfpDec(field,""-12345678901234568""),DfpField.FLAG_INEXACT,""Round #32"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.5001"")),new DfpDec(field,""12345678901234568""),DfpField.FLAG_INEXACT,""Round #33"");test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.5000"")),new DfpDec(field,""12345678901234567""),DfpField.FLAG_INEXACT,""Round #34"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.5001"")),new DfpDec(field,""-12345678901234568""),DfpField.FLAG_INEXACT,""Round #35"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.6"")),new DfpDec(field,""-12345678901234568""),DfpField.FLAG_INEXACT,""Round #35.5"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.5000"")),new DfpDec(field,""-12345678901234567""),DfpField.FLAG_INEXACT,""Round #36"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);test(new DfpDec(field,""12345678901234568"").add(new DfpDec(field,""0.5000"")),new DfpDec(field,""12345678901234569""),DfpField.FLAG_INEXACT,""Round #37"");test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.5000"")),new DfpDec(field,""12345678901234567""),DfpField.FLAG_INEXACT,""Round #38"");test(new DfpDec(field,""-12345678901234568"").add(new DfpDec(field,""-0.5000"")),new DfpDec(field,""-12345678901234569""),DfpField.FLAG_INEXACT,""Round #39"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.5000"")),new DfpDec(field,""-12345678901234567""),DfpField.FLAG_INEXACT,""Round #40"");field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.0001"")),new DfpDec(field,""12345678901234568""),DfpField.FLAG_INEXACT,""Round #41"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.9999"")),new DfpDec(field,""-12345678901234567""),DfpField.FLAG_INEXACT,""Round #42"");field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);test(new DfpDec(field,""12345678901234567"").add(new DfpDec(field,""0.9999"")),new DfpDec(field,""12345678901234567""),DfpField.FLAG_INEXACT,""Round #43"");test(new DfpDec(field,""-12345678901234567"").add(new DfpDec(field,""-0.0001"")),new DfpDec(field,""-12345678901234568""),DfpField.FLAG_INEXACT,""Round #44"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);}"
"org.apache.commons.math3.dfp.DfpDecTest.testRoundDecimal10",0,"@Test public void testRoundDecimal10(){field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);test(new Decimal10(field,""1234567891234567890""),new Decimal10(field,""1234567891000000000""),DfpField.FLAG_INEXACT,""RoundDecimal10 #1"");test(new Decimal10(field,""0.1234567891634567890""),new Decimal10(field,""0.1234567892""),DfpField.FLAG_INEXACT,""RoundDecimal10 #2"");test(new Decimal10(field,""0.1234567891500000000""),new Decimal10(field,""0.1234567892""),DfpField.FLAG_INEXACT,""RoundDecimal10 #3"");test(new Decimal10(field,""0.1234567890500""),new Decimal10(field,""0.1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #4"");test(new Decimal10(field,""0.1234567890501""),new Decimal10(field,""0.1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #5"");test(new Decimal10(field,""0.1234567890499""),new Decimal10(field,""0.1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #6"");test(new Decimal10(field,""1.234567890890""),new Decimal10(field,""1.234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #7"");test(new Decimal10(field,""1.234567891500""),new Decimal10(field,""1.234567892""),DfpField.FLAG_INEXACT,""RoundDecimal10 #8"");test(new Decimal10(field,""1.234567890500""),new Decimal10(field,""1.234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #9"");test(new Decimal10(field,""1.234567890000"").add(new Decimal10(field,"".000000000501"")),new Decimal10(field,""1.234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #10"");test(new Decimal10(field,""1.234567890499""),new Decimal10(field,""1.234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #11"");test(new Decimal10(field,""12.34567890890""),new Decimal10(field,""12.34567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #12"");test(new Decimal10(field,""12.34567891500""),new Decimal10(field,""12.34567892""),DfpField.FLAG_INEXACT,""RoundDecimal10 #13"");test(new Decimal10(field,""12.34567890500""),new Decimal10(field,""12.34567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #14"");test(new Decimal10(field,""12.34567890"").add(new Decimal10(field,"".00000000501"")),new Decimal10(field,""12.34567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #15"");test(new Decimal10(field,""12.34567890499""),new Decimal10(field,""12.34567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #16"");test(new Decimal10(field,""123.4567890890""),new Decimal10(field,""123.4567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #17"");test(new Decimal10(field,""123.4567891500""),new Decimal10(field,""123.4567892""),DfpField.FLAG_INEXACT,""RoundDecimal10 #18"");test(new Decimal10(field,""123.4567890500""),new Decimal10(field,""123.4567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #19"");test(new Decimal10(field,""123.4567890"").add(new Decimal10(field,"".0000000501"")),new Decimal10(field,""123.4567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #20"");test(new Decimal10(field,""123.4567890499""),new Decimal10(field,""123.4567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #21"");field.setRoundingMode(DfpField.RoundingMode.ROUND_DOWN);test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.9"")),new Decimal10(field,""1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #22"");test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.99999999"")),new Decimal10(field,""1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #23"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.99999999"")),new Decimal10(field,""-1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #24"");field.setRoundingMode(DfpField.RoundingMode.ROUND_UP);test(new Decimal10(field,1234567890).add(new Decimal10(field,""0.1"")),new Decimal10(field,1234567891l),DfpField.FLAG_INEXACT,""RoundDecimal10 #25"");test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.0001"")),new Decimal10(field,""1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #26"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.1"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #27"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.0001"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #28"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""0"")),new Decimal10(field,""-1234567890""),0,""RoundDecimal10 #28.5"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_UP);test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.4999999999"")),new Decimal10(field,""1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #29"");test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.50000001"")),new Decimal10(field,""1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #30"");test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.5"")),new Decimal10(field,""1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #30.5"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.4999999999"")),new Decimal10(field,""-1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #31"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.50000001"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #32"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_DOWN);test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.5001"")),new Decimal10(field,""1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #33"");test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.5000"")),new Decimal10(field,""1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #34"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.5001"")),new Decimal10(field,""-1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #35"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.6"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #35.5"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.5000"")),new Decimal10(field,""-1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #36"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_ODD);test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.5000"")),new Decimal10(field,""1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #37"");test(new Decimal10(field,""1234567891"").add(new Decimal10(field,""0.5000"")),new Decimal10(field,""1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #38"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.5000"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #39"");test(new Decimal10(field,""-1234567891"").add(new Decimal10(field,""-0.5000"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #40"");field.setRoundingMode(DfpField.RoundingMode.ROUND_CEIL);test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.0001"")),new Decimal10(field,""1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #41"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.9999"")),new Decimal10(field,""-1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #42"");field.setRoundingMode(DfpField.RoundingMode.ROUND_FLOOR);test(new Decimal10(field,""1234567890"").add(new Decimal10(field,""0.9999"")),new Decimal10(field,""1234567890""),DfpField.FLAG_INEXACT,""RoundDecimal10 #43"");test(new Decimal10(field,""-1234567890"").add(new Decimal10(field,""-0.0001"")),new Decimal10(field,""-1234567891""),DfpField.FLAG_INEXACT,""RoundDecimal10 #44"");field.setRoundingMode(DfpField.RoundingMode.ROUND_HALF_EVEN);}"
"org.apache.commons.math3.dfp.DfpDecTest.testNextAfter",0,"@Test public void testNextAfter(){test(new DfpDec(field,1).nextAfter(pinf),new DfpDec(field,""1.0000000000000001""),0,""NextAfter #1"");test(new DfpDec(field,""1.0000000000000001"").nextAfter(ninf),new DfpDec(field,1),0,""NextAfter #1.5"");test(new DfpDec(field,1).nextAfter(ninf),new DfpDec(field,""0.99999999999999999""),0,""NextAfter #2"");test(new DfpDec(field,""0.99999999999999999"").nextAfter(new DfpDec(field,2)),new DfpDec(field,1),0,""NextAfter #3"");test(new DfpDec(field,-1).nextAfter(ninf),new DfpDec(field,""-1.0000000000000001""),0,""NextAfter #4"");test(new DfpDec(field,-1).nextAfter(pinf),new DfpDec(field,""-0.99999999999999999""),0,""NextAfter #5"");test(new DfpDec(field,""-0.99999999999999999"").nextAfter(new DfpDec(field,-2)),new DfpDec(field,(byte)-1),0,""NextAfter #6"");test(new DfpDec(field,(byte)2).nextAfter(new DfpDec(field,2)),new DfpDec(field,2l),0,""NextAfter #7"");test(new DfpDec(field,0).nextAfter(new DfpDec(field,0)),new DfpDec(field,0),0,""NextAfter #8"");test(new DfpDec(field,-2).nextAfter(new DfpDec(field,-2)),new DfpDec(field,-2),0,""NextAfter #9"");test(new DfpDec(field,0).nextAfter(new DfpDec(field,1)),new DfpDec(field,""1e-131092""),DfpField.FLAG_UNDERFLOW,""NextAfter #10"");test(new DfpDec(field,0).nextAfter(new DfpDec(field,-1)),new DfpDec(field,""-1e-131092""),DfpField.FLAG_UNDERFLOW,""NextAfter #11"");test(new DfpDec(field,""-1e-131092"").nextAfter(pinf),new DfpDec(field,""-0""),DfpField.FLAG_UNDERFLOW | DfpField.FLAG_INEXACT,""Next After #12"");test(new DfpDec(field,""1e-131092"").nextAfter(ninf),new DfpDec(field,""0""),DfpField.FLAG_UNDERFLOW | DfpField.FLAG_INEXACT,""Next After #13"");test(new DfpDec(field,""9.9999999999999999e131078"").nextAfter(pinf),pinf,DfpField.FLAG_OVERFLOW | DfpField.FLAG_INEXACT,""Next After #14"");}"
"org.apache.commons.math3.exception.DimensionMismatchExceptionTest.testAccessors",0,"@Test public void testAccessors(){final DimensionMismatchException e=new DimensionMismatchException(1,2);Assert.assertEquals(1,e.getArgument());Assert.assertEquals(2,e.getDimension());}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testOnOnePoint",0,"@Test public void testOnOnePoint(){double[]xval={0.5};double[]yval={0.7};double[]res=new LoessInterpolator().smooth(xval,yval);Assert.assertEquals(1,res.length);Assert.assertEquals(0.7,res[0],0.0);}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testOnTwoPoints",0,"@Test public void testOnTwoPoints(){double[]xval={0.5,0.6};double[]yval={0.7,0.8};double[]res=new LoessInterpolator().smooth(xval,yval);Assert.assertEquals(2,res.length);Assert.assertEquals(0.7,res[0],0.0);Assert.assertEquals(0.8,res[1],0.0);}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testOnStraightLine",0,"@Test public void testOnStraightLine(){double[]xval={1,2,3,4,5};double[]yval={2,4,6,8,10};LoessInterpolator li=new LoessInterpolator(0.6,2,1e-12);double[]res=li.smooth(xval,yval);Assert.assertEquals(5,res.length);for (int i=0;i < 5;++i){Assert.assertEquals(yval[i],res[i],1e-8);}}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testOnDistortedSine",0,"@Test public void testOnDistortedSine(){int numPoints=100;double[]xval=new double[numPoints];double[]yval=new double[numPoints];double xnoise=0.1;double ynoise=0.2;generateSineData(xval,yval,xnoise,ynoise);LoessInterpolator li=new LoessInterpolator(0.3,4,1e-12);double[]res=li.smooth(xval,yval);double noisyResidualSum=0;double fitResidualSum=0;for (int i=0;i < numPoints;++i){double expected=FastMath.sin(xval[i]);double noisy=yval[i];double fit=res[i];noisyResidualSum+=FastMath.pow(noisy - expected,2);fitResidualSum+=FastMath.pow(fit - expected,2);}Assert.assertTrue(fitResidualSum < noisyResidualSum);}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testIncreasingBandwidthIncreasesSmoothness",0,"@Test public void testIncreasingBandwidthIncreasesSmoothness(){int numPoints=100;double[]xval=new double[numPoints];double[]yval=new double[numPoints];double xnoise=0.1;double ynoise=0.1;generateSineData(xval,yval,xnoise,ynoise);double[]bandwidths={0.1,0.5,1.0};double[]variances=new double[bandwidths.length];for (int i=0;i < bandwidths.length;i++){double bw=bandwidths[i];LoessInterpolator li=new LoessInterpolator(bw,4,1e-12);double[]res=li.smooth(xval,yval);for (int j=1;j < res.length;++j){variances[i]+=FastMath.pow(res[j]- res[j - 1],2);}}for (int i=1;i < variances.length;++i){Assert.assertTrue(variances[i]< variances[i - 1]);}}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers",0,"@Test public void testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers(){int numPoints=100;double[]xval=new double[numPoints];double[]yval=new double[numPoints];double xnoise=0.1;double ynoise=0.1;generateSineData(xval,yval,xnoise,ynoise);yval[numPoints / 3]*=100;yval[2 * numPoints / 3]*=-100;double[]variances=new double[4];for (int i=0;i < 4;i++){LoessInterpolator li=new LoessInterpolator(0.3,i,1e-12);double[]res=li.smooth(xval,yval);for (int j=1;j < res.length;++j){variances[i]+=FastMath.abs(res[j]- res[j - 1]);}}for (int i=1;i < variances.length;++i){Assert.assertTrue(variances[i]< variances[i - 1]);}}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testUnequalSizeArguments",0,"@Test(expected=DimensionMismatchException.class)public void testUnequalSizeArguments(){new LoessInterpolator().smooth(new double[]{1,2,3},new double[]{1,2,3,4});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testEmptyData",0,"@Test(expected=NoDataException.class)public void testEmptyData(){new LoessInterpolator().smooth(new double[]{},new double[]{});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNonStrictlyIncreasing1",0,"@Test(expected=NonMonotonicSequenceException.class)public void testNonStrictlyIncreasing1(){new LoessInterpolator().smooth(new double[]{4,3,1,2},new double[]{3,4,5,6});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNonStrictlyIncreasing2",0,"@Test(expected=NonMonotonicSequenceException.class)public void testNonStrictlyIncreasing2(){new LoessInterpolator().smooth(new double[]{1,2,2,3},new double[]{3,4,5,6});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNotAllFiniteReal1",0,"@Test(expected=NotFiniteNumberException.class)public void testNotAllFiniteReal1(){new LoessInterpolator().smooth(new double[]{1,2,Double.NaN},new double[]{3,4,5});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNotAllFiniteReal2",0,"@Test(expected=NotFiniteNumberException.class)public void testNotAllFiniteReal2(){new LoessInterpolator().smooth(new double[]{1,2,Double.POSITIVE_INFINITY},new double[]{3,4,5});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNotAllFiniteReal3",0,"@Test(expected=NotFiniteNumberException.class)public void testNotAllFiniteReal3(){new LoessInterpolator().smooth(new double[]{1,2,Double.NEGATIVE_INFINITY},new double[]{3,4,5});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNotAllFiniteReal4",0,"@Test(expected=NotFiniteNumberException.class)public void testNotAllFiniteReal4(){new LoessInterpolator().smooth(new double[]{3,4,5},new double[]{1,2,Double.NaN});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNotAllFiniteReal5",0,"@Test(expected=NotFiniteNumberException.class)public void testNotAllFiniteReal5(){new LoessInterpolator().smooth(new double[]{3,4,5},new double[]{1,2,Double.POSITIVE_INFINITY});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testNotAllFiniteReal6",0,"@Test(expected=NotFiniteNumberException.class)public void testNotAllFiniteReal6(){new LoessInterpolator().smooth(new double[]{3,4,5},new double[]{1,2,Double.NEGATIVE_INFINITY});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testInsufficientBandwidth",0,"@Test(expected=NumberIsTooSmallException.class)public void testInsufficientBandwidth(){LoessInterpolator li=new LoessInterpolator(0.1,3,1e-12);li.smooth(new double[]{1,2,3,4,5,6,7,8,9,10,11,12},new double[]{1,2,3,4,5,6,7,8,9,10,11,12});}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testCompletelyIncorrectBandwidth1",0,"@Test(expected=OutOfRangeException.class)public void testCompletelyIncorrectBandwidth1(){new LoessInterpolator(-0.2,3,1e-12);}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testCompletelyIncorrectBandwidth2",0,"@Test(expected=OutOfRangeException.class)public void testCompletelyIncorrectBandwidth2(){new LoessInterpolator(1.1,3,1e-12);}"
"org.apache.commons.math3.analysis.interpolation.LoessInterpolatorTest.testMath296withoutWeights",0,"@Test public void testMath296withoutWeights(){double[]xval={0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0};double[]yval={0.47,0.48,0.55,0.56,-0.08,-0.04,-0.07,-0.07,-0.56,-0.46,-0.56,-0.52,-3.03,-3.08,-3.09,-3.04,3.54,3.46,3.36,3.35};double[]yref={0.461,0.499,0.541,0.308,0.175,-0.042,-0.072,-0.196,-0.311,-0.446,-0.557,-1.497,-2.133,-3.08,-3.09,-0.621,0.982,3.449,3.389,3.336};LoessInterpolator li=new LoessInterpolator(0.3,4,1e-12);double[]res=li.smooth(xval,yval);Assert.assertEquals(xval.length,res.length);for (int i=0;i < res.length;++i){Assert.assertEquals(yref[i],res[i],0.02);}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest.testLinearFunction",0,"/** * Test of polynomial for the linear function.*/@Test public void testLinearFunction(){PolynomialFunctionNewtonForm p;double coefficients[],z,expected,result,tolerance=1E-12;double a[]={2.0,1.5};double c[]={4.0};p=new PolynomialFunctionNewtonForm(a,c);z=2.0;expected=-1.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=4.5;expected=2.75;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=6.0;expected=5.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);Assert.assertEquals(1,p.degree());coefficients=p.getCoefficients();Assert.assertEquals(2,coefficients.length);Assert.assertEquals(-4.0,coefficients[0],tolerance);Assert.assertEquals(1.5,coefficients[1],tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest.testQuadraticFunction",0,"/** * Test of polynomial for the quadratic function.*/@Test public void testQuadraticFunction(){PolynomialFunctionNewtonForm p;double coefficients[],z,expected,result,tolerance=1E-12;double a[]={4.0,3.0,2.0};double c[]={1.0,-2.0};p=new PolynomialFunctionNewtonForm(a,c);z=1.0;expected=4.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=2.5;expected=22.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=-2.0;expected=-5.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);Assert.assertEquals(2,p.degree());coefficients=p.getCoefficients();Assert.assertEquals(3,coefficients.length);Assert.assertEquals(-3.0,coefficients[0],tolerance);Assert.assertEquals(5.0,coefficients[1],tolerance);Assert.assertEquals(2.0,coefficients[2],tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest.testQuinticFunction",0,"/** * Test of polynomial for the quintic function.*/@Test public void testQuinticFunction(){PolynomialFunctionNewtonForm p;double coefficients[],z,expected,result,tolerance=1E-12;double a[]={0.0,6.0,-6.0,-6.0,1.0,1.0};double c[]={0.0,0.0,1.0,-1.0,2.0};p=new PolynomialFunctionNewtonForm(a,c);z=0.0;expected=0.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=-2.0;expected=0.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);z=4.0;expected=360.0;result=p.value(z);Assert.assertEquals(expected,result,tolerance);Assert.assertEquals(5,p.degree());coefficients=p.getCoefficients();Assert.assertEquals(6,coefficients.length);Assert.assertEquals(0.0,coefficients[0],tolerance);Assert.assertEquals(6.0,coefficients[1],tolerance);Assert.assertEquals(1.0,coefficients[2],tolerance);Assert.assertEquals(-7.0,coefficients[3],tolerance);Assert.assertEquals(-1.0,coefficients[4],tolerance);Assert.assertEquals(1.0,coefficients[5],tolerance);}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest.testDerivative",0,"/** * Test for derivatives.*/@Test public void testDerivative(){PolynomialFunctionNewtonForm p=new PolynomialFunctionNewtonForm(new double[]{0,1,3,1},new double[]{0,1,2});double eps=2.0e-14;for (double t=0.0;t < 10.0;t+=0.1){DerivativeStructure x=new DerivativeStructure(1,4,0,t);DerivativeStructure y=p.value(x);Assert.assertEquals(t * t * t,y.getValue(),eps * t * t* t);Assert.assertEquals(3.0 * t * t,y.getPartialDerivative(1),eps * 3.0 * t* t);Assert.assertEquals(6.0 * t,y.getPartialDerivative(2),eps * 6.0 * t);Assert.assertEquals(6.0,y.getPartialDerivative(3),eps * 6.0);Assert.assertEquals(0.0,y.getPartialDerivative(4),eps);}}"
"org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonFormTest.testParameters",0,"/** * Test of parameters for the polynomial.*/@Test public void testParameters(){try {double a[]={1.0};double c[]={2.0};new PolynomialFunctionNewtonForm(a,c);Assert.fail(""Expecting MathIllegalArgumentException - bad input array length"");}catch(MathIllegalArgumentException ex){}try {double a[]={1.0,2.0,3.0,4.0};double c[]={4.0,3.0,2.0,1.0};new PolynomialFunctionNewtonForm(a,c);Assert.fail(""Expecting MathIllegalArgumentException - mismatch input arrays"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.SymmLQTest.saundersTest",0,"public void saundersTest(final int n,final boolean goodb,final boolean precon,final double shift,final double pertbn){final RealLinearOperator a=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){if (x.getDimension()!= n){throw new DimensionMismatchException(x.getDimension(),n);}final double[]y=new double[n];for (int i=0;i < n;i++){y[i]=(i + 1)* 1.1 / n * x.getEntry(i);}return new ArrayRealVector(y,false);}@Override public int getRowDimension(){return n;}@Override public int getColumnDimension(){return n;}};final double shiftm=shift;final double pertm=FastMath.abs(pertbn);final RealLinearOperator minv;if (precon){minv=new RealLinearOperator(){@Override public int getRowDimension(){return n;}@Override public int getColumnDimension(){return n;}@Override public RealVector operate(final RealVector x){if (x.getDimension()!= n){throw new DimensionMismatchException(x.getDimension(),n);}final double[]y=new double[n];for (int i=0;i < n;i++){double d=(i + 1)* 1.1 / n;d=FastMath.abs(d - shiftm);if (i % 10 == 0){d+=pertm;}y[i]=x.getEntry(i)/ d;}return new ArrayRealVector(y,false);}};}else {minv=null;}final RealVector xtrue=new ArrayRealVector(n);for (int i=0;i < n;i++){xtrue.setEntry(i,n - i);}final RealVector b=a.operate(xtrue);b.combineToSelf(1.0,-shift,xtrue);final SymmLQ solver=new SymmLQ(2 * n,1E-12,true);final RealVector x=solver.solve(a,minv,b,goodb,shift);final RealVector y=a.operate(x);final RealVector r1=new ArrayRealVector(n);for (int i=0;i < n;i++){final double bi=b.getEntry(i);final double yi=y.getEntry(i);final double xi=x.getEntry(i);r1.setEntry(i,bi - yi + shift * xi);}final double enorm=x.subtract(xtrue).getNorm()/ xtrue.getNorm();final double etol=1E-5;Assert.assertTrue(""enorm="" + enorm + "",""+ solver.getIterationManager().getIterations(),enorm <= etol);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders1",0,"@Test public void testSolveSaunders1(){saundersTest(1,false,false,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders2",0,"@Test public void testSolveSaunders2(){saundersTest(2,false,false,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders3",0,"@Test public void testSolveSaunders3(){saundersTest(1,false,true,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders4",0,"@Test public void testSolveSaunders4(){saundersTest(2,false,true,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders5",0,"@Test public void testSolveSaunders5(){saundersTest(5,false,true,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders6",0,"@Test public void testSolveSaunders6(){saundersTest(5,false,true,0.25,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders7",0,"@Test public void testSolveSaunders7(){saundersTest(50,false,false,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders8",0,"@Test public void testSolveSaunders8(){saundersTest(50,false,false,0.25,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders9",0,"@Test public void testSolveSaunders9(){saundersTest(50,false,true,0.,0.10);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders10",0,"@Test public void testSolveSaunders10(){saundersTest(50,false,true,0.25,0.10);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders11",0,"@Test public void testSolveSaunders11(){saundersTest(1,true,false,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders12",0,"@Test public void testSolveSaunders12(){saundersTest(2,true,false,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders13",0,"@Test public void testSolveSaunders13(){saundersTest(1,true,true,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders14",0,"@Test public void testSolveSaunders14(){saundersTest(2,true,true,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders15",0,"@Test public void testSolveSaunders15(){saundersTest(5,true,true,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders16",0,"@Test public void testSolveSaunders16(){saundersTest(5,true,true,0.25,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders17",0,"@Test public void testSolveSaunders17(){saundersTest(50,true,false,0.,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders18",0,"@Test public void testSolveSaunders18(){saundersTest(50,true,false,0.25,0.);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders19",0,"@Test public void testSolveSaunders19(){saundersTest(50,true,true,0.,0.10);}"
"org.apache.commons.math3.linear.SymmLQTest.testSolveSaunders20",0,"@Test public void testSolveSaunders20(){saundersTest(50,true,true,0.25,0.10);}"
"org.apache.commons.math3.linear.SymmLQTest.testNonSquareOperator",0,"@Test(expected=NonSquareOperatorException.class)public void testNonSquareOperator(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,3);final IterativeLinearSolver solver;solver=new SymmLQ(10,0.,false);final ArrayRealVector b=new ArrayRealVector(a.getRowDimension());final ArrayRealVector x=new ArrayRealVector(a.getColumnDimension());solver.solve(a,b,x);}"
"org.apache.commons.math3.linear.SymmLQTest.testDimensionMismatchRightHandSide",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionMismatchRightHandSide(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(3,3);final IterativeLinearSolver solver;solver=new SymmLQ(10,0.,false);final ArrayRealVector b=new ArrayRealVector(2);solver.solve(a,b);}"
"org.apache.commons.math3.linear.SymmLQTest.testDimensionMismatchSolution",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionMismatchSolution(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(3,3);final IterativeLinearSolver solver;solver=new SymmLQ(10,0.,false);final ArrayRealVector b=new ArrayRealVector(3);final ArrayRealVector x=new ArrayRealVector(2);solver.solve(a,b,x);}"
"org.apache.commons.math3.linear.SymmLQTest.testUnpreconditionedSolution",0,"@Test public void testUnpreconditionedSolution(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final IterativeLinearSolver solver;solver=new SymmLQ(maxIterations,1E-10,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x=solver.solve(a,b);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""entry[%d][%d]"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.SymmLQTest.testUnpreconditionedInPlaceSolutionWithInitialGuess",0,"@Test public void testUnpreconditionedInPlaceSolutionWithInitialGuess(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final IterativeLinearSolver solver;solver=new SymmLQ(maxIterations,1E-10,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x0=new ArrayRealVector(n);x0.set(1.);final RealVector x=solver.solveInPlace(a,b,x0);Assert.assertSame(""x should be a reference to x0"",x0,x);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""entry[%d][%d)"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.SymmLQTest.testUnpreconditionedSolutionWithInitialGuess",0,"@Test public void testUnpreconditionedSolutionWithInitialGuess(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final IterativeLinearSolver solver;solver=new SymmLQ(maxIterations,1E-10,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x0=new ArrayRealVector(n);x0.set(1.);final RealVector x=solver.solve(a,b,x0);Assert.assertNotSame(""x should not be a reference to x0"",x0,x);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""entry[%d][%d]"",i,j);Assert.assertEquals(msg,expected,actual,delta);Assert.assertEquals(msg,x0.getEntry(i),1.,Math.ulp(1.));}}}"
"org.apache.commons.math3.linear.SymmLQTest.testNonSquarePreconditioner",0,"@Test(expected=NonSquareOperatorException.class)public void testNonSquarePreconditioner(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);final RealLinearOperator m=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){throw new UnsupportedOperationException();}@Override public int getRowDimension(){return 2;}@Override public int getColumnDimension(){return 3;}};final PreconditionedIterativeLinearSolver solver;solver=new SymmLQ(10,0.,false);final ArrayRealVector b=new ArrayRealVector(a.getRowDimension());solver.solve(a,m,b);}"
"org.apache.commons.math3.linear.SymmLQTest.testMismatchedOperatorDimensions",0,"@Test(expected=DimensionMismatchException.class)public void testMismatchedOperatorDimensions(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);final RealLinearOperator m=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){throw new UnsupportedOperationException();}@Override public int getRowDimension(){return 3;}@Override public int getColumnDimension(){return 3;}};final PreconditionedIterativeLinearSolver solver;solver=new SymmLQ(10,0d,false);final ArrayRealVector b=new ArrayRealVector(a.getRowDimension());solver.solve(a,m,b);}"
"org.apache.commons.math3.linear.SymmLQTest.testNonPositiveDefinitePreconditioner",0,"@Test(expected=NonPositiveDefiniteOperatorException.class)public void testNonPositiveDefinitePreconditioner(){final Array2DRowRealMatrix a=new Array2DRowRealMatrix(2,2);a.setEntry(0,0,1d);a.setEntry(0,1,2d);a.setEntry(1,0,3d);a.setEntry(1,1,4d);final RealLinearOperator m=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){final ArrayRealVector y=new ArrayRealVector(2);y.setEntry(0,-x.getEntry(0));y.setEntry(1,-x.getEntry(1));return y;}@Override public int getRowDimension(){return 2;}@Override public int getColumnDimension(){return 2;}};final PreconditionedIterativeLinearSolver solver;solver=new SymmLQ(10,0d,true);final ArrayRealVector b=new ArrayRealVector(2);b.setEntry(0,-1d);b.setEntry(1,-1d);solver.solve(a,m,b);}"
"org.apache.commons.math3.linear.SymmLQTest.testPreconditionedSolution",0,"@Test public void testPreconditionedSolution(){final int n=8;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final InverseHilbertMatrix ainv=new InverseHilbertMatrix(n);final RealLinearOperator m=JacobiPreconditioner.create(a);final PreconditionedIterativeLinearSolver solver;solver=new SymmLQ(maxIterations,1E-15,true);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);final RealVector x=solver.solve(a,m,b);for (int i=0;i < n;i++){final double actual=x.getEntry(i);final double expected=ainv.getEntry(i,j);final double delta=1E-6 * Math.abs(expected);final String msg=String.format(""coefficient (%d,%d)"",i,j);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.SymmLQTest.testPreconditionedSolution2",0,"@Test public void testPreconditionedSolution2(){final int n=100;final int maxIterations=100000;final Array2DRowRealMatrix a=new Array2DRowRealMatrix(n,n);double daux=1.;for (int i=0;i < n;i++){a.setEntry(i,i,daux);daux*=1.2;for (int j=i + 1;j < n;j++){if (i == j){}else {final double value=1.0;a.setEntry(i,j,value);a.setEntry(j,i,value);}}}final RealLinearOperator m=JacobiPreconditioner.create(a);final PreconditionedIterativeLinearSolver prec;final IterativeLinearSolver unprec;prec=new SymmLQ(maxIterations,1E-15,true);unprec=new SymmLQ(maxIterations,1E-15,true);final RealVector b=new ArrayRealVector(n);final String pattern=""preconditioned SymmLQ (%d iterations)should"" + "" have been faster than unpreconditioned (%d iterations)"";String msg;for (int j=0;j < 1;j++){b.set(0.);b.setEntry(j,1.);final RealVector px=prec.solve(a,m,b);final RealVector x=unprec.solve(a,b);final int np=prec.getIterationManager().getIterations();final int nup=unprec.getIterationManager().getIterations();msg=String.format(pattern,np,nup);for (int i=0;i < n;i++){msg=String.format(""row %d,column %d"",i,j);final double expected=x.getEntry(i);final double actual=px.getEntry(i);final double delta=5E-5 * Math.abs(expected);Assert.assertEquals(msg,expected,actual,delta);}}}"
"org.apache.commons.math3.linear.SymmLQTest.testEventManagement",0,"@Test public void testEventManagement(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final IterativeLinearSolver solver;final int[]count=new int[]{0,0,0,0};final RealVector xFromListener=new ArrayRealVector(n);final IterationListener listener=new IterationListener(){public void initializationPerformed(final IterationEvent e){++count[0];}public void iterationPerformed(final IterationEvent e){++count[2];Assert.assertEquals(""iteration performed"",count[2],e.getIterations()- 1);}public void iterationStarted(final IterationEvent e){++count[1];Assert.assertEquals(""iteration started"",count[1],e.getIterations()- 1);}public void terminationPerformed(final IterationEvent e){++count[3];final IterativeLinearSolverEvent ilse;ilse=(IterativeLinearSolverEvent)e;xFromListener.setSubVector(0,ilse.getSolution());}};solver=new SymmLQ(maxIterations,1E-10,true);solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){Arrays.fill(count,0);b.set(0.);b.setEntry(j,1.);final RealVector xFromSolver=solver.solve(a,b);String msg=String.format(""column %d (initialization)"",j);Assert.assertEquals(msg,1,count[0]);msg=String.format(""column %d (finalization)"",j);Assert.assertEquals(msg,1,count[3]);for (int i=0;i < n;i++){msg=String.format(""row %d,column %d"",i,j);final double expected=xFromSolver.getEntry(i);final double actual=xFromListener.getEntry(i);Assert.assertEquals(msg,expected,actual,0.0);}}}"
"org.apache.commons.math3.linear.SymmLQTest.testNonSelfAdjointOperator",0,"@Test(expected=NonSelfAdjointOperatorException.class)public void testNonSelfAdjointOperator(){final RealLinearOperator a;a=new Array2DRowRealMatrix(new double[][]{{1.,2.,3.},{2.,4.,5.},{2.999,5.,6.}});final RealVector b;b=new ArrayRealVector(new double[]{1.,1.,1.});new SymmLQ(100,1.,true).solve(a,b);}"
"org.apache.commons.math3.linear.SymmLQTest.testNonSelfAdjointPreconditioner",0,"@Test(expected=NonSelfAdjointOperatorException.class)public void testNonSelfAdjointPreconditioner(){final RealLinearOperator a=new Array2DRowRealMatrix(new double[][]{{1.,2.,3.},{2.,4.,5.},{3.,5.,6.}});final Array2DRowRealMatrix mMat;mMat=new Array2DRowRealMatrix(new double[][]{{1.,0.,1.},{0.,1.,0.},{0.,0.,1.}});final DecompositionSolver mSolver;mSolver=new LUDecomposition(mMat).getSolver();final RealLinearOperator minv=new RealLinearOperator(){@Override public RealVector operate(final RealVector x){return mSolver.solve(x);}@Override public int getRowDimension(){return mMat.getRowDimension();}@Override public int getColumnDimension(){return mMat.getColumnDimension();}};final RealVector b=new ArrayRealVector(new double[]{1.,1.,1.});new SymmLQ(100,1.,true).solve(a,minv,b);}"
"org.apache.commons.math3.linear.SymmLQTest.testUnpreconditionedNormOfResidual",0,"@Test public void testUnpreconditionedNormOfResidual(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final IterativeLinearSolver solver;final IterationListener listener=new IterationListener(){private void doTestNormOfResidual(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;final RealVector x=evt.getSolution();final RealVector b=evt.getRightHandSideVector();final RealVector r=b.subtract(a.operate(x));final double rnorm=r.getNorm();Assert.assertEquals(""iteration performed (residual)"",rnorm,evt.getNormOfResidual(),FastMath.max(1E-5 * rnorm,1E-10));}public void initializationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationStarted(final IterationEvent e){doTestNormOfResidual(e);}public void terminationPerformed(final IterationEvent e){doTestNormOfResidual(e);}};solver=new SymmLQ(maxIterations,1E-10,true);solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);solver.solve(a,b);}}"
"org.apache.commons.math3.linear.SymmLQTest.testPreconditionedNormOfResidual",0,"@Test public void testPreconditionedNormOfResidual(){final int n=5;final int maxIterations=100;final RealLinearOperator a=new HilbertMatrix(n);final JacobiPreconditioner m=JacobiPreconditioner.create(a);final RealLinearOperator p=m.sqrt();final PreconditionedIterativeLinearSolver solver;final IterationListener listener=new IterationListener(){private void doTestNormOfResidual(final IterationEvent e){final IterativeLinearSolverEvent evt;evt=(IterativeLinearSolverEvent)e;final RealVector x=evt.getSolution();final RealVector b=evt.getRightHandSideVector();final RealVector r=b.subtract(a.operate(x));final double rnorm=p.operate(r).getNorm();Assert.assertEquals(""iteration performed (residual)"",rnorm,evt.getNormOfResidual(),FastMath.max(1E-5 * rnorm,1E-10));}public void initializationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationPerformed(final IterationEvent e){doTestNormOfResidual(e);}public void iterationStarted(final IterationEvent e){doTestNormOfResidual(e);}public void terminationPerformed(final IterationEvent e){doTestNormOfResidual(e);}};solver=new SymmLQ(maxIterations,1E-10,true);solver.getIterationManager().addIterationListener(listener);final RealVector b=new ArrayRealVector(n);for (int j=0;j < n;j++){b.set(0.);b.setEntry(j,1.);solver.solve(a,m,b);}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testDimensions",0,"/** * test dimensions */@Test public void testDimensions(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(testData2);Assert.assertEquals(""testData row dimension"",3,m.getRowDimension());Assert.assertEquals(""testData column dimension"",3,m.getColumnDimension());Assert.assertTrue(""testData is square"",m.isSquare());Assert.assertEquals(""testData2 row dimension"",m2.getRowDimension(),2);Assert.assertEquals(""testData2 column dimension"",m2.getColumnDimension(),3);Assert.assertTrue(""testData2 is not square"",!m2.isSquare());}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testCopyFunctions",0,"/** * test copy functions */@Test public void testCopyFunctions(){Array2DRowRealMatrix m1=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(m1.getData());Assert.assertEquals(m2,m1);Array2DRowRealMatrix m3=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m4=new Array2DRowRealMatrix(m3.getData(),false);Assert.assertEquals(m4,m3);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testAdd",0,"/** * test add */@Test public void testAdd(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix mInv=new Array2DRowRealMatrix(testDataInv);RealMatrix mPlusMInv=m.add(mInv);double[][]sumEntries=mPlusMInv.getData();for (int row=0;row < m.getRowDimension();row++){for (int col=0;col < m.getColumnDimension();col++){Assert.assertEquals(""sum entry entry"",testDataPlusInv[row][col],sumEntries[row][col],entryTolerance);}}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testAddFail",0,"/** * test add failure */@Test public void testAddFail(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(testData2);try {m.add(m2);Assert.fail(""MathIllegalArgumentException expected"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testNorm",0,"/** * test norm */@Test public void testNorm(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(testData2);Assert.assertEquals(""testData norm"",14d,m.getNorm(),entryTolerance);Assert.assertEquals(""testData2 norm"",7d,m2.getNorm(),entryTolerance);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testFrobeniusNorm",0,"/** * test Frobenius norm */@Test public void testFrobeniusNorm(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(testData2);Assert.assertEquals(""testData Frobenius norm"",FastMath.sqrt(117.0),m.getFrobeniusNorm(),entryTolerance);Assert.assertEquals(""testData2 Frobenius norm"",FastMath.sqrt(52.0),m2.getFrobeniusNorm(),entryTolerance);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testPlusMinus",0,"/** * test m-n = m + -n */@Test public void testPlusMinus(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(testDataInv);TestUtils.assertEquals(""m-n = m + -n"",m.subtract(m2),m2.scalarMultiply(-1d).add(m),entryTolerance);try {m.subtract(new Array2DRowRealMatrix(testData2));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testMultiply",0,"/** * test multiply */@Test public void testMultiply(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix mInv=new Array2DRowRealMatrix(testDataInv);Array2DRowRealMatrix identity=new Array2DRowRealMatrix(id);Array2DRowRealMatrix m2=new Array2DRowRealMatrix(testData2);TestUtils.assertEquals(""inverse multiply"",m.multiply(mInv),identity,entryTolerance);TestUtils.assertEquals(""inverse multiply"",mInv.multiply(m),identity,entryTolerance);TestUtils.assertEquals(""identity multiply"",m.multiply(identity),m,entryTolerance);TestUtils.assertEquals(""identity multiply"",identity.multiply(mInv),mInv,entryTolerance);TestUtils.assertEquals(""identity multiply"",m2.multiply(identity),m2,entryTolerance);try {m.multiply(new Array2DRowRealMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testMultiply2",0,"@Test public void testMultiply2(){RealMatrix m3=new Array2DRowRealMatrix(d3);RealMatrix m4=new Array2DRowRealMatrix(d4);RealMatrix m5=new Array2DRowRealMatrix(d5);TestUtils.assertEquals(""m3*m4=m5"",m3.multiply(m4),m5,entryTolerance);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testPower",0,"@Test public void testPower(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix mInv=new Array2DRowRealMatrix(testDataInv);Array2DRowRealMatrix mPlusInv=new Array2DRowRealMatrix(testDataPlusInv);Array2DRowRealMatrix identity=new Array2DRowRealMatrix(id);TestUtils.assertEquals(""m^0"",m.power(0),identity,entryTolerance);TestUtils.assertEquals(""mInv^0"",mInv.power(0),identity,entryTolerance);TestUtils.assertEquals(""mPlusInv^0"",mPlusInv.power(0),identity,entryTolerance);TestUtils.assertEquals(""m^1"",m.power(1),m,entryTolerance);TestUtils.assertEquals(""mInv^1"",mInv.power(1),mInv,entryTolerance);TestUtils.assertEquals(""mPlusInv^1"",mPlusInv.power(1),mPlusInv,entryTolerance);RealMatrix C1=m.copy();RealMatrix C2=mInv.copy();RealMatrix C3=mPlusInv.copy();for (int i=2;i <= 10;++i){C1=C1.multiply(m);C2=C2.multiply(mInv);C3=C3.multiply(mPlusInv);TestUtils.assertEquals(""m^"" + i,m.power(i),C1,entryTolerance);TestUtils.assertEquals(""mInv^"" + i,mInv.power(i),C2,entryTolerance);TestUtils.assertEquals(""mPlusInv^"" + i,mPlusInv.power(i),C3,entryTolerance);}try {Array2DRowRealMatrix mNotSquare=new Array2DRowRealMatrix(testData2T);mNotSquare.power(2);Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}try {m.power(-1);Assert.fail(""Expecting IllegalArgumentException"");}catch(IllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testTrace",0,"/** * test trace */@Test public void testTrace(){RealMatrix m=new Array2DRowRealMatrix(id);Assert.assertEquals(""identity trace"",3d,m.getTrace(),entryTolerance);m=new Array2DRowRealMatrix(testData2);try {m.getTrace();Assert.fail(""Expecting NonSquareMatrixException"");}catch(NonSquareMatrixException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testScalarAdd",0,"/** * test sclarAdd */@Test public void testScalarAdd(){RealMatrix m=new Array2DRowRealMatrix(testData);TestUtils.assertEquals(""scalar add"",new Array2DRowRealMatrix(testDataPlus2),m.scalarAdd(2d),entryTolerance);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testOperate",0,"/** * test operate */@Test public void testOperate(){RealMatrix m=new Array2DRowRealMatrix(id);TestUtils.assertEquals(""identity operate"",testVector,m.operate(testVector),entryTolerance);TestUtils.assertEquals(""identity operate"",testVector,m.operate(new ArrayRealVector(testVector)).toArray(),entryTolerance);m=new Array2DRowRealMatrix(bigSingular);try {m.operate(testVector);Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testMath209",0,"/** * test issue MATH-209 */@Test public void testMath209(){RealMatrix a=new Array2DRowRealMatrix(new double[][]{{1,2},{3,4},{5,6}},false);double[]b=a.operate(new double[]{1,1});Assert.assertEquals(a.getRowDimension(),b.length);Assert.assertEquals(3.0,b[0],1.0e-12);Assert.assertEquals(7.0,b[1],1.0e-12);Assert.assertEquals(11.0,b[2],1.0e-12);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testTranspose",0,"/** * test transpose */@Test public void testTranspose(){RealMatrix m=new Array2DRowRealMatrix(testData);RealMatrix mIT=new LUDecomposition(m).getSolver().getInverse().transpose();RealMatrix mTI=new LUDecomposition(m.transpose()).getSolver().getInverse();TestUtils.assertEquals(""inverse-transpose"",mIT,mTI,normTolerance);m=new Array2DRowRealMatrix(testData2);RealMatrix mt=new Array2DRowRealMatrix(testData2T);TestUtils.assertEquals(""transpose"",mt,m.transpose(),normTolerance);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testPremultiplyVector",0,"/** * test preMultiply by vector */@Test public void testPremultiplyVector(){RealMatrix m=new Array2DRowRealMatrix(testData);TestUtils.assertEquals(""premultiply"",m.preMultiply(testVector),preMultTest,normTolerance);TestUtils.assertEquals(""premultiply"",m.preMultiply(new ArrayRealVector(testVector).toArray()),preMultTest,normTolerance);m=new Array2DRowRealMatrix(bigSingular);try {m.preMultiply(testVector);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testPremultiply",0,"@Test public void testPremultiply(){RealMatrix m3=new Array2DRowRealMatrix(d3);RealMatrix m4=new Array2DRowRealMatrix(d4);RealMatrix m5=new Array2DRowRealMatrix(d5);TestUtils.assertEquals(""m3*m4=m5"",m4.preMultiply(m3),m5,entryTolerance);Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix mInv=new Array2DRowRealMatrix(testDataInv);Array2DRowRealMatrix identity=new Array2DRowRealMatrix(id);TestUtils.assertEquals(""inverse multiply"",m.preMultiply(mInv),identity,entryTolerance);TestUtils.assertEquals(""inverse multiply"",mInv.preMultiply(m),identity,entryTolerance);TestUtils.assertEquals(""identity multiply"",m.preMultiply(identity),m,entryTolerance);TestUtils.assertEquals(""identity multiply"",identity.preMultiply(mInv),mInv,entryTolerance);try {m.preMultiply(new Array2DRowRealMatrix(bigSingular));Assert.fail(""Expecting illegalArgumentException"");}catch(MathIllegalArgumentException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetVectors",0,"@Test public void testGetVectors(){RealMatrix m=new Array2DRowRealMatrix(testData);TestUtils.assertEquals(""get row"",m.getRow(0),testDataRow1,entryTolerance);TestUtils.assertEquals(""get col"",m.getColumn(2),testDataCol3,entryTolerance);try {m.getRow(10);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetEntry",0,"@Test public void testGetEntry(){RealMatrix m=new Array2DRowRealMatrix(testData);Assert.assertEquals(""get entry"",m.getEntry(0,1),2d,entryTolerance);try {m.getEntry(10,4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testExamples",0,"/** * test examples in user guide */@Test public void testExamples(){double[][]matrixData={{1d,2d,3d},{2d,5d,3d}};RealMatrix m=new Array2DRowRealMatrix(matrixData);double[][]matrixData2={{1d,2d},{2d,5d},{1d,7d}};RealMatrix n=new Array2DRowRealMatrix(matrixData2);RealMatrix p=m.multiply(n);Assert.assertEquals(2,p.getRowDimension());Assert.assertEquals(2,p.getColumnDimension());RealMatrix pInverse=new LUDecomposition(p).getSolver().getInverse();Assert.assertEquals(2,pInverse.getRowDimension());Assert.assertEquals(2,pInverse.getColumnDimension());double[][]coefficientsData={{2,3,-2},{-1,7,6},{4,-3,-5}};RealMatrix coefficients=new Array2DRowRealMatrix(coefficientsData);RealVector constants=new ArrayRealVector(new double[]{1,-2,1},false);RealVector solution=new LUDecomposition(coefficients).getSolver().solve(constants);final double cst0=constants.getEntry(0);final double cst1=constants.getEntry(1);final double cst2=constants.getEntry(2);final double sol0=solution.getEntry(0);final double sol1=solution.getEntry(1);final double sol2=solution.getEntry(2);Assert.assertEquals(2 * sol0 + 3 * sol1 - 2 * sol2,cst0,1E-12);Assert.assertEquals(-1 * sol0 + 7 * sol1 + 6 * sol2,cst1,1E-12);Assert.assertEquals(4 * sol0 - 3 * sol1 - 5 * sol2,cst2,1E-12);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetSubMatrix",0,"@Test public void testGetSubMatrix(){RealMatrix m=new Array2DRowRealMatrix(subTestData);checkGetSubMatrix(m,subRows23Cols00,2,3,0,0,false);checkGetSubMatrix(m,subRows00Cols33,0,0,3,3,false);checkGetSubMatrix(m,subRows01Cols23,0,1,2,3,false);checkGetSubMatrix(m,subRows02Cols13,new int[]{0,2},new int[]{1,3},false);checkGetSubMatrix(m,subRows03Cols12,new int[]{0,3},new int[]{1,2},false);checkGetSubMatrix(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3},false);checkGetSubMatrix(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3},false);checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkGetSubMatrix(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkGetSubMatrix(m,null,1,0,2,4,true);checkGetSubMatrix(m,null,-1,1,2,2,true);checkGetSubMatrix(m,null,1,0,2,2,true);checkGetSubMatrix(m,null,1,0,2,4,true);checkGetSubMatrix(m,null,new int[]{},new int[]{0},true);checkGetSubMatrix(m,null,new int[]{0},new int[]{4},true);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testCopySubMatrix",0,"@Test public void testCopySubMatrix(){RealMatrix m=new Array2DRowRealMatrix(subTestData);checkCopy(m,subRows23Cols00,2,3,0,0,false);checkCopy(m,subRows00Cols33,0,0,3,3,false);checkCopy(m,subRows01Cols23,0,1,2,3,false);checkCopy(m,subRows02Cols13,new int[]{0,2},new int[]{1,3},false);checkCopy(m,subRows03Cols12,new int[]{0,3},new int[]{1,2},false);checkCopy(m,subRows03Cols123,new int[]{0,3},new int[]{1,2,3},false);checkCopy(m,subRows20Cols123,new int[]{2,0},new int[]{1,2,3},false);checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkCopy(m,subRows31Cols31,new int[]{3,1},new int[]{3,1},false);checkCopy(m,null,1,0,2,4,true);checkCopy(m,null,-1,1,2,2,true);checkCopy(m,null,1,0,2,2,true);checkCopy(m,null,1,0,2,4,true);checkCopy(m,null,new int[]{},new int[]{0},true);checkCopy(m,null,new int[]{0},new int[]{4},true);double[][]copy=new double[][]{{0,0,0},{0,0}};checkCopy(m,copy,0,1,0,2,true);checkCopy(m,copy,new int[]{0,1},new int[]{0,1,2},true);}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetRowMatrix",0,"@Test public void testGetRowMatrix(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealMatrix mRow0=new Array2DRowRealMatrix(subRow0);RealMatrix mRow3=new Array2DRowRealMatrix(subRow3);Assert.assertEquals(""Row0"",mRow0,m.getRowMatrix(0));Assert.assertEquals(""Row3"",mRow3,m.getRowMatrix(3));try {m.getRowMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetRowMatrix",0,"@Test public void testSetRowMatrix(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealMatrix mRow3=new Array2DRowRealMatrix(subRow3);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowMatrix(0,mRow3);Assert.assertEquals(mRow3,m.getRowMatrix(0));try {m.setRowMatrix(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetColumnMatrix",0,"@Test public void testGetColumnMatrix(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealMatrix mColumn1=new Array2DRowRealMatrix(subColumn1);RealMatrix mColumn3=new Array2DRowRealMatrix(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnMatrix(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnMatrix(3));try {m.getColumnMatrix(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnMatrix(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetColumnMatrix",0,"@Test public void testSetColumnMatrix(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealMatrix mColumn3=new Array2DRowRealMatrix(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnMatrix(1));m.setColumnMatrix(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnMatrix(1));try {m.setColumnMatrix(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnMatrix(0,m);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetRowVector",0,"@Test public void testGetRowVector(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealVector mRow0=new ArrayRealVector(subRow0[0]);RealVector mRow3=new ArrayRealVector(subRow3[0]);Assert.assertEquals(""Row0"",mRow0,m.getRowVector(0));Assert.assertEquals(""Row3"",mRow3,m.getRowVector(3));try {m.getRowVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRowVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetRowVector",0,"@Test public void testSetRowVector(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealVector mRow3=new ArrayRealVector(subRow3[0]);Assert.assertNotSame(mRow3,m.getRowMatrix(0));m.setRowVector(0,mRow3);Assert.assertEquals(mRow3,m.getRowVector(0));try {m.setRowVector(-1,mRow3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRowVector(0,new ArrayRealVector(5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetColumnVector",0,"@Test public void testGetColumnVector(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealVector mColumn1=columnToVector(subColumn1);RealVector mColumn3=columnToVector(subColumn3);Assert.assertEquals(""Column1"",mColumn1,m.getColumnVector(1));Assert.assertEquals(""Column3"",mColumn3,m.getColumnVector(3));try {m.getColumnVector(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumnVector(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetColumnVector",0,"@Test public void testSetColumnVector(){RealMatrix m=new Array2DRowRealMatrix(subTestData);RealVector mColumn3=columnToVector(subColumn3);Assert.assertNotSame(mColumn3,m.getColumnVector(1));m.setColumnVector(1,mColumn3);Assert.assertEquals(mColumn3,m.getColumnVector(1));try {m.setColumnVector(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumnVector(0,new ArrayRealVector(5));Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetRow",0,"@Test public void testGetRow(){RealMatrix m=new Array2DRowRealMatrix(subTestData);checkArrays(subRow0[0],m.getRow(0));checkArrays(subRow3[0],m.getRow(3));try {m.getRow(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getRow(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetRow",0,"@Test public void testSetRow(){RealMatrix m=new Array2DRowRealMatrix(subTestData);Assert.assertTrue(subRow3[0][0]!= m.getRow(0)[0]);m.setRow(0,subRow3[0]);checkArrays(subRow3[0],m.getRow(0));try {m.setRow(-1,subRow3[0]);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setRow(0,new double[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testGetColumn",0,"@Test public void testGetColumn(){RealMatrix m=new Array2DRowRealMatrix(subTestData);double[]mColumn1=columnToArray(subColumn1);double[]mColumn3=columnToArray(subColumn3);checkArrays(mColumn1,m.getColumn(1));checkArrays(mColumn3,m.getColumn(3));try {m.getColumn(-1);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.getColumn(4);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetColumn",0,"@Test public void testSetColumn(){RealMatrix m=new Array2DRowRealMatrix(subTestData);double[]mColumn3=columnToArray(subColumn3);Assert.assertTrue(mColumn3[0]!= m.getColumn(1)[0]);m.setColumn(1,mColumn3);checkArrays(mColumn3,m.getColumn(1));try {m.setColumn(-1,mColumn3);Assert.fail(""Expecting OutOfRangeException"");}catch(OutOfRangeException ex){}try {m.setColumn(0,new double[5]);Assert.fail(""Expecting MatrixDimensionMismatchException"");}catch(MatrixDimensionMismatchException ex){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Array2DRowRealMatrix m1=(Array2DRowRealMatrix)m.copy();Array2DRowRealMatrix mt=(Array2DRowRealMatrix)m.transpose();Assert.assertTrue(m.hashCode()!= mt.hashCode());Assert.assertEquals(m.hashCode(),m1.hashCode());Assert.assertEquals(m,m);Assert.assertEquals(m,m1);Assert.assertFalse(m.equals(null));Assert.assertFalse(m.equals(mt));Assert.assertFalse(m.equals(new Array2DRowRealMatrix(bigSingular)));}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testToString",0,"@Test public void testToString(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Assert.assertEquals(""Array2DRowRealMatrix{{1.0,2.0,3.0},{2.0,5.0,3.0},{1.0,0.0,8.0}}"",m.toString());m=new Array2DRowRealMatrix();Assert.assertEquals(""Array2DRowRealMatrix{}"",m.toString());}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSetSubMatrix",0,"@Test public void testSetSubMatrix(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);m.setSubMatrix(detData2,1,1);RealMatrix expected=MatrixUtils.createRealMatrix(new double[][]{{1.0,2.0,3.0},{2.0,1.0,3.0},{1.0,2.0,4.0}});Assert.assertEquals(expected,m);m.setSubMatrix(detData2,0,0);expected=MatrixUtils.createRealMatrix(new double[][]{{1.0,3.0,3.0},{2.0,4.0,3.0},{1.0,2.0,4.0}});Assert.assertEquals(expected,m);m.setSubMatrix(testDataPlus2,0,0);expected=MatrixUtils.createRealMatrix(new double[][]{{3.0,4.0,5.0},{4.0,7.0,5.0},{3.0,2.0,10.0}});Assert.assertEquals(expected,m);try {m.setSubMatrix(testData,1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,-1,1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(testData,1,-1);Assert.fail(""expecting OutOfRangeException"");}catch(OutOfRangeException e){}try {m.setSubMatrix(null,1,1);Assert.fail(""expecting NullArgumentException"");}catch(NullArgumentException e){}Array2DRowRealMatrix m2=new Array2DRowRealMatrix();try {m2.setSubMatrix(testData,0,1);Assert.fail(""expecting MathIllegalStateException"");}catch(MathIllegalStateException e){}try {m2.setSubMatrix(testData,1,0);Assert.fail(""expecting MathIllegalStateException"");}catch(MathIllegalStateException e){}try {m.setSubMatrix(new double[][]{{1},{2,3}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}try {m.setSubMatrix(new double[][]{{}},0,0);Assert.fail(""expecting MathIllegalArgumentException"");}catch(MathIllegalArgumentException e){}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testWalk",0,"@Test public void testWalk(){int rows=150;int columns=75;RealMatrix m=new Array2DRowRealMatrix(rows,columns);m.walkInRowOrder(new SetVisitor());GetVisitor getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowRealMatrix(rows,columns);m.walkInRowOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new Array2DRowRealMatrix(rows,columns);m.walkInColumnOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowRealMatrix(rows,columns);m.walkInColumnOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInOptimizedOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new Array2DRowRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInRowOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}m=new Array2DRowRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor());getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor);Assert.assertEquals(rows * columns,getVisitor.getCount());m=new Array2DRowRealMatrix(rows,columns);m.walkInOptimizedOrder(new SetVisitor(),1,rows - 2,1,columns - 2);getVisitor=new GetVisitor();m.walkInColumnOrder(getVisitor,1,rows - 2,1,columns - 2);Assert.assertEquals((rows - 2)* (columns - 2),getVisitor.getCount());for (int i=0;i < rows;++i){Assert.assertEquals(0.0,m.getEntry(i,0),0);Assert.assertEquals(0.0,m.getEntry(i,columns - 1),0);}for (int j=0;j < columns;++j){Assert.assertEquals(0.0,m.getEntry(0,j),0);Assert.assertEquals(0.0,m.getEntry(rows - 1,j),0);}}"
"org.apache.commons.math3.linear.Array2DRowRealMatrixTest.testSerial",0,"@Test public void testSerial(){Array2DRowRealMatrix m=new Array2DRowRealMatrix(testData);Assert.assertEquals(m,TestUtils.serializeAndRecover(m));}"
"org.apache.commons.math3.stat.descriptive.moment.KurtosisTest.testNaN",0,"/** * Make sure Double.NaN is returned iff n < 4*/@Test public void testNaN(){Kurtosis kurt=new Kurtosis();Assert.assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);Assert.assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);Assert.assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);Assert.assertTrue(Double.isNaN(kurt.getResult()));kurt.increment(1d);Assert.assertFalse(Double.isNaN(kurt.getResult()));}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testSomeValues",0,"@Test public void testSomeValues(){final UnivariateFunction f=new Sigmoid();Assert.assertEquals(0.5,f.value(0),EPS);Assert.assertEquals(0,f.value(Double.NEGATIVE_INFINITY),EPS);Assert.assertEquals(1,f.value(Double.POSITIVE_INFINITY),EPS);}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testDerivative",0,"@Test public void testDerivative(){final Sigmoid f=new Sigmoid();final DerivativeStructure f0=f.value(new DerivativeStructure(1,1,0,0.0));Assert.assertEquals(0.25,f0.getPartialDerivative(1),0);}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testDerivativesHighOrder",0,"@Test public void testDerivativesHighOrder(){DerivativeStructure s=new Sigmoid(1,3).value(new DerivativeStructure(1,5,0,1.2));Assert.assertEquals(2.5370495669980352859,s.getPartialDerivative(0),5.0e-16);Assert.assertEquals(0.35578888129361140441,s.getPartialDerivative(1),6.0e-17);Assert.assertEquals(-0.19107626464144938116,s.getPartialDerivative(2),6.0e-17);Assert.assertEquals(-0.02396830286286711696,s.getPartialDerivative(3),4.0e-17);Assert.assertEquals(0.21682059798981049049,s.getPartialDerivative(4),3.0e-17);Assert.assertEquals(-0.19186320234632658055,s.getPartialDerivative(5),2.0e-16);}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testDerivativeLargeArguments",0,"@Test public void testDerivativeLargeArguments(){final Sigmoid f=new Sigmoid(1,2);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,Double.NEGATIVE_INFINITY)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,-Double.MAX_VALUE)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,-1e50)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,-1e3)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,1e3)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,1e50)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,Double.MAX_VALUE)).getPartialDerivative(1),0);Assert.assertEquals(0,f.value(new DerivativeStructure(1,1,0,Double.POSITIVE_INFINITY)).getPartialDerivative(1),0);}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testParametricUsage1",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage1(){final Sigmoid.Parametric g=new Sigmoid.Parametric();g.value(0,null);}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testParametricUsage2",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage2(){final Sigmoid.Parametric g=new Sigmoid.Parametric();g.value(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testParametricUsage3",0,"@Test(expected=NullArgumentException.class)public void testParametricUsage3(){final Sigmoid.Parametric g=new Sigmoid.Parametric();g.gradient(0,null);}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testParametricUsage4",0,"@Test(expected=DimensionMismatchException.class)public void testParametricUsage4(){final Sigmoid.Parametric g=new Sigmoid.Parametric();g.gradient(0,new double[]{0});}"
"org.apache.commons.math3.analysis.function.SigmoidTest.testParametricValue",0,"@Test public void testParametricValue(){final double lo=2;final double hi=3;final Sigmoid f=new Sigmoid(lo,hi);final Sigmoid.Parametric g=new Sigmoid.Parametric();Assert.assertEquals(f.value(-1),g.value(-1,new double[]{lo,hi}),0);Assert.assertEquals(f.value(0),g.value(0,new double[]{lo,hi}),0);Assert.assertEquals(f.value(2),g.value(2,new double[]{lo,hi}),0);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest.testStartSimplexInsideRange",0,"@Test public void testStartSimplexInsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(2.0,2.5,1.0,3.0,2.0,3.0);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})}));final PointValuePair optimum=optimizer.optimize(300,wrapped,GoalType.MINIMIZE,wrapped.boundedToUnbounded(new double[]{1.5,2.25}));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest.testOptimumOutsideRange",0,"@Test public void testOptimumOutsideRange(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,1.0,3.0,2.0,3.0);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})}));final PointValuePair optimum=optimizer.optimize(100,wrapped,GoalType.MINIMIZE,wrapped.boundedToUnbounded(new double[]{1.5,2.25}));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest.testUnbounded",0,"@Test public void testUnbounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,0.0,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-10,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})}));final PointValuePair optimum=optimizer.optimize(300,wrapped,GoalType.MINIMIZE,wrapped.boundedToUnbounded(new double[]{1.5,2.25}));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],2e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],2e-7);}"
"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapterTest.testHalfBounded",0,"@Test public void testHalfBounded(){final BiQuadratic biQuadratic=new BiQuadratic(4.0,4.0,1.0,Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,3.0);final MultivariateFunctionMappingAdapter wrapped=new MultivariateFunctionMappingAdapter(biQuadratic,biQuadratic.getLower(),biQuadratic.getUpper());SimplexOptimizer optimizer=new SimplexOptimizer(1e-13,1e-30);optimizer.setSimplex(new NelderMeadSimplex(new double[][]{wrapped.boundedToUnbounded(new double[]{1.5,2.75}),wrapped.boundedToUnbounded(new double[]{1.5,2.95}),wrapped.boundedToUnbounded(new double[]{1.7,2.90})}));final PointValuePair optimum=optimizer.optimize(200,wrapped,GoalType.MINIMIZE,wrapped.boundedToUnbounded(new double[]{1.5,2.25}));final double[]bounded=wrapped.unboundedToBounded(optimum.getPoint());Assert.assertEquals(biQuadratic.getBoundedXOptimum(),bounded[0],1e-7);Assert.assertEquals(biQuadratic.getBoundedYOptimum(),bounded[1],1e-7);}"
"org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();new MidpointIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testDecreasingSteps",0,"@Test public void testDecreasingSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousValueError=Double.NaN;double previousTimeError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=problems[k].copy();double step=(pb.getFinalTime()- pb.getInitialTime())* FastMath.pow(2.0,-i);FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double valueError=handler.getMaximalValueError();if (i > 4){Assert.assertTrue(valueError < FastMath.abs(previousValueError));}previousValueError=valueError;double timeError=handler.getMaximalTimeError();if (i > 4){Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));}previousTimeError=timeError;}}}"
"org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testSmallStep",0,"@Test public void testSmallStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 2.0e-7);Assert.assertTrue(handler.getMaximalValueError()< 1.0e-6);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""midpoint"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testBigStep",0,"@Test public void testBigStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()> 0.01);Assert.assertTrue(handler.getMaximalValueError()> 0.05);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double step=FastMath.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new MidpointIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 6.0e-4);Assert.assertTrue(handler.getMaximalValueError()< 6.0e-4);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""midpoint"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.MidpointIntegratorTest.testStepSize",0,"@Test public void testStepSize()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double step=1.23456;FirstOrderIntegrator integ=new MidpointIntegrator(step);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){Assert.assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public void init(double t0,double[]y0,double t){}});integ.integrate(new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testNextGeneration",0,"@Test public void testNextGeneration(){ElitisticListPopulation pop=new ElitisticListPopulation(100,0.203);for (int i=0;i < pop.getPopulationLimit();i++){pop.addChromosome(new DummyChromosome());}Population nextGeneration=pop.nextGeneration();Assert.assertEquals(20,nextGeneration.getPopulationSize());}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testSetElitismRate",0,"@Test public void testSetElitismRate(){final double rate=0.25;final ElitisticListPopulation pop=new ElitisticListPopulation(100,0.203);pop.setElitismRate(rate);Assert.assertEquals(rate,pop.getElitismRate(),1e-6);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testSetElitismRateTooLow",0,"@Test(expected=OutOfRangeException.class)public void testSetElitismRateTooLow(){final double rate=-0.25;final ElitisticListPopulation pop=new ElitisticListPopulation(100,0.203);pop.setElitismRate(rate);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testSetElitismRateTooHigh",0,"@Test(expected=OutOfRangeException.class)public void testSetElitismRateTooHigh(){final double rate=1.25;final ElitisticListPopulation pop=new ElitisticListPopulation(100,0.203);pop.setElitismRate(rate);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooLow",0,"@Test(expected=OutOfRangeException.class)public void testConstructorTooLow(){final double rate=-0.25;new ElitisticListPopulation(100,rate);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooHigh",0,"@Test(expected=OutOfRangeException.class)public void testConstructorTooHigh(){final double rate=1.25;new ElitisticListPopulation(100,rate);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooLow",0,"@Test(expected=OutOfRangeException.class)public void testChromosomeListConstructorTooLow(){final List<Chromosome> chromosomes=Collections.emptyList();final double rate=-0.25;new ElitisticListPopulation(chromosomes,100,rate);}"
"org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooHigh",0,"@Test(expected=OutOfRangeException.class)public void testChromosomeListConstructorTooHigh(){final List<Chromosome> chromosomes=Collections.emptyList();final double rate=1.25;new ElitisticListPopulation(chromosomes,100,rate);}"
"org.apache.commons.math3.genetics.FixedGenerationCountTest.testIsSatisfied",0,"@Test public void testIsSatisfied(){FixedGenerationCount fgc=new FixedGenerationCount(20);int cnt=0;Population pop=new Population(){public void addChromosome(Chromosome chromosome){}public Chromosome getFittestChromosome(){return null;}public int getPopulationLimit(){return 0;}public int getPopulationSize(){return 0;}public Population nextGeneration(){return null;}public Iterator<Chromosome> iterator(){return null;}};while (!fgc.isSatisfied(pop)){cnt++;}Assert.assertEquals(20,cnt);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testStats",0,"/** * test stats */@Test public void testStats(){SummaryStatistics u=createSummaryStatistics();Assert.assertEquals(""total count"",0,u.getN(),tolerance);u.addValue(one);u.addValue(twoF);u.addValue(twoL);u.addValue(three);Assert.assertEquals(""N"",n,u.getN(),tolerance);Assert.assertEquals(""sum"",sum,u.getSum(),tolerance);Assert.assertEquals(""sumsq"",sumSq,u.getSumsq(),tolerance);Assert.assertEquals(""var"",var,u.getVariance(),tolerance);Assert.assertEquals(""population var"",popVar,u.getPopulationVariance(),tolerance);Assert.assertEquals(""std"",std,u.getStandardDeviation(),tolerance);Assert.assertEquals(""mean"",mean,u.getMean(),tolerance);Assert.assertEquals(""min"",min,u.getMin(),tolerance);Assert.assertEquals(""max"",max,u.getMax(),tolerance);u.clear();Assert.assertEquals(""total count"",0,u.getN(),tolerance);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){SummaryStatistics u=createSummaryStatistics();Assert.assertTrue(""Mean of n = 0 set should be NaN"",Double.isNaN(u.getMean()));Assert.assertTrue(""Standard Deviation of n = 0 set should be NaN"",Double.isNaN(u.getStandardDeviation()));Assert.assertTrue(""Variance of n = 0 set should be NaN"",Double.isNaN(u.getVariance()));u.addValue(one);Assert.assertTrue(""mean should be one (n = 1)"",u.getMean()== one);Assert.assertTrue(""geometric should be one (n = 1)instead it is "" + u.getGeometricMean(),u.getGeometricMean()== one);Assert.assertTrue(""Std should be zero (n = 1)"",u.getStandardDeviation()== 0.0);Assert.assertTrue(""variance should be zero (n = 1)"",u.getVariance()== 0.0);u.addValue(twoF);Assert.assertTrue(""Std should not be zero (n = 2)"",u.getStandardDeviation()!= 0.0);Assert.assertTrue(""variance should not be zero (n = 2)"",u.getVariance()!= 0.0);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testProductAndGeometricMean",0,"@Test public void testProductAndGeometricMean(){SummaryStatistics u=createSummaryStatistics();u.addValue(1.0);u.addValue(2.0);u.addValue(3.0);u.addValue(4.0);Assert.assertEquals(""Geometric mean not expected"",2.213364,u.getGeometricMean(),0.00001);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testNaNContracts",0,"@Test public void testNaNContracts(){SummaryStatistics u=createSummaryStatistics();Assert.assertTrue(""mean not NaN"",Double.isNaN(u.getMean()));Assert.assertTrue(""min not NaN"",Double.isNaN(u.getMin()));Assert.assertTrue(""std dev not NaN"",Double.isNaN(u.getStandardDeviation()));Assert.assertTrue(""var not NaN"",Double.isNaN(u.getVariance()));Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(1.0);Assert.assertEquals(""mean not expected"",1.0,u.getMean(),Double.MIN_VALUE);Assert.assertEquals(""variance not expected"",0.0,u.getVariance(),Double.MIN_VALUE);Assert.assertEquals(""geometric mean not expected"",1.0,u.getGeometricMean(),Double.MIN_VALUE);u.addValue(-1.0);Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));u.addValue(0.0);Assert.assertTrue(""geom mean not NaN"",Double.isNaN(u.getGeometricMean()));}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testGetSummary",0,"@Test public void testGetSummary(){SummaryStatistics u=createSummaryStatistics();StatisticalSummary summary=u.getSummary();verifySummary(u,summary);u.addValue(1d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);u.addValue(2d);summary=u.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testSerialization",0,"@Test public void testSerialization(){SummaryStatistics u=createSummaryStatistics();TestUtils.checkSerializedEquality(u);SummaryStatistics s=(SummaryStatistics)TestUtils.serializeAndRecover(u);StatisticalSummary summary=s.getSummary();verifySummary(u,summary);u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);u.addValue(5d);TestUtils.checkSerializedEquality(u);s=(SummaryStatistics)TestUtils.serializeAndRecover(u);summary=s.getSummary();verifySummary(u,summary);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){SummaryStatistics u=createSummaryStatistics();SummaryStatistics t=null;int emptyHash=u.hashCode();Assert.assertTrue(""reflexive"",u.equals(u));Assert.assertFalse(""non-null compared to null"",u.equals(t));Assert.assertFalse(""wrong type"",u.equals(Double.valueOf(0)));t=createSummaryStatistics();Assert.assertTrue(""empty instances should be equal"",t.equals(u));Assert.assertTrue(""empty instances should be equal"",u.equals(t));Assert.assertEquals(""empty hash code"",emptyHash,t.hashCode());u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);Assert.assertFalse(""different n's should make instances not equal"",t.equals(u));Assert.assertFalse(""different n's should make instances not equal"",u.equals(t));Assert.assertTrue(""different n's should make hashcodes different"",u.hashCode()!= t.hashCode());t.addValue(2d);t.addValue(1d);t.addValue(3d);t.addValue(4d);Assert.assertTrue(""summaries based on same data should be equal"",t.equals(u));Assert.assertTrue(""summaries based on same data should be equal"",u.equals(t));Assert.assertEquals(""summaries based on same data should have same hashcodes"",u.hashCode(),t.hashCode());u.clear();t.clear();Assert.assertTrue(""empty instances should be equal"",t.equals(u));Assert.assertTrue(""empty instances should be equal"",u.equals(t));Assert.assertEquals(""empty hash code"",emptyHash,t.hashCode());Assert.assertEquals(""empty hash code"",emptyHash,u.hashCode());}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testCopy",0,"@Test public void testCopy(){SummaryStatistics u=createSummaryStatistics();u.addValue(2d);u.addValue(1d);u.addValue(3d);u.addValue(4d);SummaryStatistics v=new SummaryStatistics(u);Assert.assertEquals(u,v);Assert.assertEquals(v,u);u.addValue(7d);u.addValue(9d);u.addValue(11d);u.addValue(23d);v.addValue(7d);v.addValue(9d);v.addValue(11d);v.addValue(23d);Assert.assertEquals(u,v);Assert.assertEquals(v,u);u.clear();u.setSumImpl(new Sum());SummaryStatistics.copy(u,v);Assert.assertEquals(u.getSumImpl(),v.getSumImpl());}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testSetterInjection",0,"@Test public void testSetterInjection(){SummaryStatistics u=createSummaryStatistics();u.setMeanImpl(new Sum());u.setSumLogImpl(new Sum());u.addValue(1);u.addValue(3);Assert.assertEquals(4,u.getMean(),1E-14);Assert.assertEquals(4,u.getSumOfLogs(),1E-14);Assert.assertEquals(FastMath.exp(2),u.getGeometricMean(),1E-14);u.clear();u.addValue(1);u.addValue(2);Assert.assertEquals(3,u.getMean(),1E-14);u.clear();u.setMeanImpl(new Mean());}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testSetterIllegalState",0,"@Test public void testSetterIllegalState(){SummaryStatistics u=createSummaryStatistics();u.addValue(1);u.addValue(3);try {u.setMeanImpl(new Sum());Assert.fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testOverrideVarianceWithMathClass",0,"/** * JIRA: MATH-691*/@Test public void testOverrideVarianceWithMathClass(){double[]scores={1,2,3,4};SummaryStatistics stats=new SummaryStatistics();stats.setVarianceImpl(new Variance(false));for(double i : scores){stats.addValue(i);}Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(),0);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testOverrideMeanWithMathClass",0,"@Test public void testOverrideMeanWithMathClass(){double[]scores={1,2,3,4};SummaryStatistics stats=new SummaryStatistics();stats.setMeanImpl(new Mean());for(double i : scores){stats.addValue(i);}Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(),0);}"
"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatisticsTest.testOverrideGeoMeanWithMathClass",0,"@Test public void testOverrideGeoMeanWithMathClass(){double[]scores={1,2,3,4};SummaryStatistics stats=new SummaryStatistics();stats.setGeoMeanImpl(new GeometricMean());for(double i : scores){stats.addValue(i);}Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(),0);}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testSetterInjection",0,"@Test public void testSetterInjection(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);u.setMeanImpl(new StorelessUnivariateStatistic[]{new sumMean(),new sumMean()});u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});Assert.assertEquals(4,u.getMean()[0],1E-14);Assert.assertEquals(6,u.getMean()[1],1E-14);u.clear();u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});Assert.assertEquals(4,u.getMean()[0],1E-14);Assert.assertEquals(6,u.getMean()[1],1E-14);u.clear();u.setMeanImpl(new StorelessUnivariateStatistic[]{new Mean(),new Mean()});u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});Assert.assertEquals(2,u.getMean()[0],1E-14);Assert.assertEquals(3,u.getMean()[1],1E-14);Assert.assertEquals(2,u.getDimension());}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testSetterIllegalState",0,"@Test public void testSetterIllegalState(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);u.addValue(new double[]{1,2});u.addValue(new double[]{3,4});try {u.setMeanImpl(new StorelessUnivariateStatistic[]{new sumMean(),new sumMean()});Assert.fail(""Expecting IllegalStateException"");}catch(IllegalStateException ex){}}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testToString",0,"@Test public void testToString(){MultivariateSummaryStatistics stats=createMultivariateSummaryStatistics(2,true);stats.addValue(new double[]{1,3});stats.addValue(new double[]{2,2});stats.addValue(new double[]{3,1});Locale d=Locale.getDefault();Locale.setDefault(Locale.US);final String suffix=System.getProperty(""line.separator"");Assert.assertEquals(""MultivariateSummaryStatistics:"" + suffix + ""n: 3""+ suffix+ ""min: 1.0,1.0""+ suffix+ ""max: 3.0,3.0""+ suffix+ ""mean: 2.0,2.0""+ suffix+ ""geometric mean: 1.817...,1.817...""+ suffix+ ""sum of squares: 14.0,14.0""+ suffix+ ""sum of logarithms: 1.791...,1.791...""+ suffix+ ""standard deviation: 1.0,1.0""+ suffix+ ""covariance: Array2DRowRealMatrix{{1.0,-1.0},{-1.0,1.0}}""+ suffix,stats.toString().replaceAll(""([0-9]+\\.[0-9][0-9][0-9])[0-9]+"",""$1...""));Locale.setDefault(d);}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testShuffledStatistics",0,"@Test public void testShuffledStatistics(){MultivariateSummaryStatistics reference=createMultivariateSummaryStatistics(2,true);MultivariateSummaryStatistics shuffled=createMultivariateSummaryStatistics(2,true);StorelessUnivariateStatistic[]tmp=shuffled.getGeoMeanImpl();shuffled.setGeoMeanImpl(shuffled.getMeanImpl());shuffled.setMeanImpl(shuffled.getMaxImpl());shuffled.setMaxImpl(shuffled.getMinImpl());shuffled.setMinImpl(shuffled.getSumImpl());shuffled.setSumImpl(shuffled.getSumsqImpl());shuffled.setSumsqImpl(shuffled.getSumLogImpl());shuffled.setSumLogImpl(tmp);for (int i=100;i > 0;--i){reference.addValue(new double[]{i,i});shuffled.addValue(new double[]{i,i});}TestUtils.assertEquals(reference.getMean(),shuffled.getGeometricMean(),1.0e-10);TestUtils.assertEquals(reference.getMax(),shuffled.getMean(),1.0e-10);TestUtils.assertEquals(reference.getMin(),shuffled.getMax(),1.0e-10);TestUtils.assertEquals(reference.getSum(),shuffled.getMin(),1.0e-10);TestUtils.assertEquals(reference.getSumSq(),shuffled.getSum(),1.0e-10);TestUtils.assertEquals(reference.getSumLog(),shuffled.getSumSq(),1.0e-10);TestUtils.assertEquals(reference.getGeometricMean(),shuffled.getSumLog(),1.0e-10);}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testDimension",0,"@Test public void testDimension(){try {createMultivariateSummaryStatistics(2,true).addValue(new double[3]);Assert.fail(""Expecting DimensionMismatchException"");}catch(DimensionMismatchException dme){}}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testStats",0,"/** * test stats */@Test public void testStats(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);Assert.assertEquals(0,u.getN());u.addValue(new double[]{1,2});u.addValue(new double[]{2,3});u.addValue(new double[]{2,3});u.addValue(new double[]{3,4});Assert.assertEquals(4,u.getN());Assert.assertEquals(8,u.getSum()[0],1.0e-10);Assert.assertEquals(12,u.getSum()[1],1.0e-10);Assert.assertEquals(18,u.getSumSq()[0],1.0e-10);Assert.assertEquals(38,u.getSumSq()[1],1.0e-10);Assert.assertEquals(1,u.getMin()[0],1.0e-10);Assert.assertEquals(2,u.getMin()[1],1.0e-10);Assert.assertEquals(3,u.getMax()[0],1.0e-10);Assert.assertEquals(4,u.getMax()[1],1.0e-10);Assert.assertEquals(2.4849066497880003102,u.getSumLog()[0],1.0e-10);Assert.assertEquals(4.276666119016055311,u.getSumLog()[1],1.0e-10);Assert.assertEquals(1.8612097182041991979,u.getGeometricMean()[0],1.0e-10);Assert.assertEquals(2.9129506302439405217,u.getGeometricMean()[1],1.0e-10);Assert.assertEquals(2,u.getMean()[0],1.0e-10);Assert.assertEquals(3,u.getMean()[1],1.0e-10);Assert.assertEquals(FastMath.sqrt(2.0 / 3.0),u.getStandardDeviation()[0],1.0e-10);Assert.assertEquals(FastMath.sqrt(2.0 / 3.0),u.getStandardDeviation()[1],1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(0,0),1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(0,1),1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(1,0),1.0e-10);Assert.assertEquals(2.0 / 3.0,u.getCovariance().getEntry(1,1),1.0e-10);u.clear();Assert.assertEquals(0,u.getN());}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testN0andN1Conditions",0,"@Test public void testN0andN1Conditions(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(1,true);Assert.assertTrue(Double.isNaN(u.getMean()[0]));Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));u.addValue(new double[]{1});Assert.assertEquals(1.0,u.getMean()[0],1.0e-10);Assert.assertEquals(1.0,u.getGeometricMean()[0],1.0e-10);Assert.assertEquals(0.0,u.getStandardDeviation()[0],1.0e-10);u.addValue(new double[]{2});Assert.assertTrue(u.getStandardDeviation()[0]> 0);}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testNaNContracts",0,"@Test public void testNaNContracts(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(1,true);Assert.assertTrue(Double.isNaN(u.getMean()[0]));Assert.assertTrue(Double.isNaN(u.getMin()[0]));Assert.assertTrue(Double.isNaN(u.getStandardDeviation()[0]));Assert.assertTrue(Double.isNaN(u.getGeometricMean()[0]));u.addValue(new double[]{1.0});Assert.assertFalse(Double.isNaN(u.getMean()[0]));Assert.assertFalse(Double.isNaN(u.getMin()[0]));Assert.assertFalse(Double.isNaN(u.getStandardDeviation()[0]));Assert.assertFalse(Double.isNaN(u.getGeometricMean()[0]));}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testSerialization",0,"@Test public void testSerialization(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);TestUtils.checkSerializedEquality(u);MultivariateSummaryStatistics s=(MultivariateSummaryStatistics)TestUtils.serializeAndRecover(u);Assert.assertEquals(u,s);u.addValue(new double[]{2d,1d});u.addValue(new double[]{1d,1d});u.addValue(new double[]{3d,1d});u.addValue(new double[]{4d,1d});u.addValue(new double[]{5d,1d});TestUtils.checkSerializedEquality(u);s=(MultivariateSummaryStatistics)TestUtils.serializeAndRecover(u);Assert.assertEquals(u,s);}"
"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatisticsTest.testEqualsAndHashCode",0,"@Test public void testEqualsAndHashCode(){MultivariateSummaryStatistics u=createMultivariateSummaryStatistics(2,true);MultivariateSummaryStatistics t=null;int emptyHash=u.hashCode();Assert.assertTrue(u.equals(u));Assert.assertFalse(u.equals(t));Assert.assertFalse(u.equals(Double.valueOf(0)));t=createMultivariateSummaryStatistics(2,true);Assert.assertTrue(t.equals(u));Assert.assertTrue(u.equals(t));Assert.assertEquals(emptyHash,t.hashCode());u.addValue(new double[]{2d,1d});u.addValue(new double[]{1d,1d});u.addValue(new double[]{3d,1d});u.addValue(new double[]{4d,1d});u.addValue(new double[]{5d,1d});Assert.assertFalse(t.equals(u));Assert.assertFalse(u.equals(t));Assert.assertTrue(u.hashCode()!= t.hashCode());t.addValue(new double[]{2d,1d});t.addValue(new double[]{1d,1d});t.addValue(new double[]{3d,1d});t.addValue(new double[]{4d,1d});t.addValue(new double[]{5d,1d});Assert.assertTrue(t.equals(u));Assert.assertTrue(u.equals(t));Assert.assertEquals(u.hashCode(),t.hashCode());u.clear();t.clear();Assert.assertTrue(t.equals(u));Assert.assertTrue(u.equals(t));Assert.assertEquals(emptyHash,t.hashCode());Assert.assertEquals(emptyHash,u.hashCode());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();DormandPrince54Integrator integrator=new DormandPrince54Integrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testMinStep",0,"@Test(expected=NumberIsTooSmallException.class)public void testMinStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testSmallLastStep",0,"@Test public void testSmallLastStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblemAbstract pb=new TestProblem5();double minStep=1.25;double maxStep=FastMath.abs(pb.getFinalTime()- pb.getInitialTime());double scalAbsoluteTolerance=6.0e-4;double scalRelativeTolerance=6.0e-4;AdaptiveStepsizeIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);DP54SmallLastHandler handler=new DP54SmallLastHandler(minStep);integ.addStepHandler(handler);integ.setInitialStepSize(1.7);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.wasLastSeen());Assert.assertEquals(""Dormand-Prince 5(4)"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 2.0e-7);Assert.assertTrue(handler.getMaximalValueError()< 2.0e-7);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Dormand-Prince 5(4)"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testIncreasingTolerance",0,"@Test public void testIncreasingTolerance()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {int previousCalls=Integer.MAX_VALUE;for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=FastMath.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;EmbeddedRungeKuttaIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.setSafety(0.8);integ.setMaxGrowth(5.0);integ.setMinReduction(0.3);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(0.8,integ.getSafety(),1.0e-12);Assert.assertEquals(5.0,integ.getMaxGrowth(),1.0e-12);Assert.assertEquals(0.3,integ.getMinReduction(),1.0e-12);Assert.assertTrue(handler.getMaximalValueError()< (0.7 * scalAbsoluteTolerance));Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();Assert.assertEquals(integ.getEvaluations(),calls);Assert.assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testEvents",0,"@Test public void testEvents()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();double convergence=1.0e-8 * maxStep;for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,convergence,1000);}Assert.assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()< 5.0e-6);Assert.assertEquals(0,handler.getMaximalTimeError(),convergence);Assert.assertEquals(12.0,handler.getLastTime(),convergence);integ.clearEventHandlers();Assert.assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(integ.getEvaluations(),pb.getCalls());Assert.assertTrue(pb.getCalls()< 2800);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince54IntegratorTest.testVariableSteps",0,"@Test public void testVariableSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince54Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new VariableHandler());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}"
"org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest.testArrayIsReference",0,"@Test public void testArrayIsReference(){final double[]array={-3.0,-2.0,-1.0,0.0,1.0};Assert.assertArrayEquals(array,new EuclideanDoublePoint(array).getPoint(),1.0e-15);}"
"org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest.testDistance",0,"@Test public void testDistance(){final EuclideanDoublePoint e1=new EuclideanDoublePoint(new double[]{-3.0,-2.0,-1.0,0.0,1.0});final EuclideanDoublePoint e2=new EuclideanDoublePoint(new double[]{1.0,0.0,-1.0,1.0,1.0});Assert.assertEquals(FastMath.sqrt(21.0),e1.distanceFrom(e2),1.0e-15);Assert.assertEquals(0.0,e1.distanceFrom(e1),1.0e-15);Assert.assertEquals(0.0,e2.distanceFrom(e2),1.0e-15);}"
"org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest.testCentroid",0,"@Test public void testCentroid(){final List<EuclideanDoublePoint> list=new ArrayList<EuclideanDoublePoint>();list.add(new EuclideanDoublePoint(new double[]{1.0,3.0}));list.add(new EuclideanDoublePoint(new double[]{2.0,2.0}));list.add(new EuclideanDoublePoint(new double[]{3.0,3.0}));list.add(new EuclideanDoublePoint(new double[]{2.0,4.0}));final EuclideanDoublePoint c=list.get(0).centroidOf(list);Assert.assertEquals(2.0,c.getPoint()[0],1.0e-15);Assert.assertEquals(3.0,c.getPoint()[1],1.0e-15);}"
"org.apache.commons.math3.stat.clustering.EuclideanDoublePointTest.testSerial",0,"@Test public void testSerial(){final EuclideanDoublePoint p=new EuclideanDoublePoint(new double[]{-3.0,-2.0,-1.0,0.0,1.0});Assert.assertEquals(p,TestUtils.serializeAndRecover(p));}"
"org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testNonUnitWeightSum",0,"@Test public void testNonUnitWeightSum(){final double[]weights={1,2};final double[][]means={{-1.5,2.0},{4.0,8.2}};final double[][][]covariances={{{2.0,-1.1},{-1.1,2.0}},{{3.5,1.5},{1.5,3.5}}};final MultivariateNormalMixtureModelDistribution d=create(weights,means,covariances);final List<Pair<Double,MultivariateNormalDistribution>> comp=d.getComponents();Assert.assertEquals(1d / 3,comp.get(0).getFirst(),Math.ulp(1d));Assert.assertEquals(2d / 3,comp.get(1).getFirst(),Math.ulp(1d));}"
"org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testWeightSumOverFlow",0,"@Test(expected=MathArithmeticException.class)public void testWeightSumOverFlow(){final double[]weights={0.5 * Double.MAX_VALUE,0.51 * Double.MAX_VALUE};final double[][]means={{-1.5,2.0},{4.0,8.2}};final double[][][]covariances={{{2.0,-1.1},{-1.1,2.0}},{{3.5,1.5},{1.5,3.5}}};final MultivariateNormalMixtureModelDistribution d=create(weights,means,covariances);}"
"org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testPreconditionPositiveWeights",0,"@Test(expected=NotPositiveException.class)public void testPreconditionPositiveWeights(){final double[]negativeWeights={-0.5,1.5};final double[][]means={{-1.5,2.0},{4.0,8.2}};final double[][][]covariances={{{2.0,-1.1},{-1.1,2.0}},{{3.5,1.5},{1.5,3.5}}};final MultivariateNormalMixtureModelDistribution d=create(negativeWeights,means,covariances);}"
"org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testDensities",0,"/** * Test the accuracy of the density calculation.*/@Test public void testDensities(){final double[]weights={0.3,0.7};final double[][]means={{-1.5,2.0},{4.0,8.2}};final double[][][]covariances={{{2.0,-1.1},{-1.1,2.0}},{{3.5,1.5},{1.5,3.5}}};final MultivariateNormalMixtureModelDistribution d=create(weights,means,covariances);final double[][]testValues={{-1.5,2},{4,8.2},{1.5,-2},{0,0}};final double[]correctDensities={0.02862037278930575,0.03523044847314091,0.000416241365629767,0.009932042831700297};for (int i=0;i < testValues.length;i++){Assert.assertEquals(correctDensities[i],d.density(testValues[i]),Math.ulp(1d));}}"
"org.apache.commons.math3.distribution.MultivariateNormalMixtureModelDistributionTest.testSampling",0,"/** * Test the accuracy of sampling from the distribution.*/@Test public void testSampling(){final double[]weights={0.3,0.7};final double[][]means={{-1.5,2.0},{4.0,8.2}};final double[][][]covariances={{{2.0,-1.1},{-1.1,2.0}},{{3.5,1.5},{1.5,3.5}}};final MultivariateNormalMixtureModelDistribution d=create(weights,means,covariances);d.reseedRandomGenerator(50);final double[][]correctSamples=getCorrectSamples();final int n=correctSamples.length;final double[][]samples=d.sample(n);for (int i=0;i < n;i++){for (int j=0;j < samples[i].length;j++){Assert.assertEquals(correctSamples[i][j],samples[i][j],1e-16);}}}"
"org.apache.commons.math3.optimization.MultivariateDifferentiableMultiStartOptimizerTest.testCircleFitting",0,"@Test public void testCircleFitting(){CircleScalar circle=new CircleScalar();circle.addPoint(30.0,68.0);circle.addPoint(50.0,-6.0);circle.addPoint(110.0,-20.0);circle.addPoint(35.0,15.0);circle.addPoint(45.0,97.0);MultivariateDifferentiableOptimizer underlying=new MultivariateDifferentiableOptimizer(){private final NonLinearConjugateGradientOptimizer cg=new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,new SimpleValueChecker(1.0e-10,1.0e-10));public PointValuePair optimize(int maxEval,MultivariateDifferentiableFunction f,GoalType goalType,double[]startPoint){return cg.optimize(maxEval,f,goalType,startPoint);}public int getMaxEvaluations(){return cg.getMaxEvaluations();}public int getEvaluations(){return cg.getEvaluations();}public ConvergenceChecker<PointValuePair> getConvergenceChecker(){return cg.getConvergenceChecker();}};JDKRandomGenerator g=new JDKRandomGenerator();g.setSeed(753289573253l);RandomVectorGenerator generator=new UncorrelatedRandomVectorGenerator(new double[]{50.0,50.0},new double[]{10.0,10.0},new GaussianRandomGenerator(g));MultivariateDifferentiableMultiStartOptimizer optimizer=new MultivariateDifferentiableMultiStartOptimizer(underlying,10,generator);PointValuePair optimum=optimizer.optimize(200,circle,GoalType.MINIMIZE,new double[]{98.680,47.345});Assert.assertEquals(200,optimizer.getMaxEvaluations());PointValuePair[]optima=optimizer.getOptima();for(PointValuePair o : optima){Vector2D center=new Vector2D(o.getPointRef()[0],o.getPointRef()[1]);Assert.assertEquals(69.960161753,circle.getRadius(center),1.0e-8);Assert.assertEquals(96.075902096,center.getX(),1.0e-8);Assert.assertEquals(48.135167894,center.getY(),1.0e-8);}Assert.assertTrue(optimizer.getEvaluations()> 70);Assert.assertTrue(optimizer.getEvaluations()< 90);Assert.assertEquals(3.1267527,optimum.getValue(),1.0e-8);}"
"org.apache.commons.math3.genetics.OrderedCrossoverTest.testCrossover",0,"@Test public void testCrossover(){final Integer[]p1=new Integer[]{8,4,7,3,6,2,5,1,9,0};final Integer[]p2=new Integer[]{0,1,2,3,4,5,6,7,8,9};final DummyListChromosome p1c=new DummyListChromosome(p1);final DummyListChromosome p2c=new DummyListChromosome(p2);final CrossoverPolicy cp=new OrderedCrossover<Integer>();for (int i=0;i < 20;i++){final Set<Integer> parentSet1=new HashSet<Integer>(Arrays.asList(p1));final Set<Integer> parentSet2=new HashSet<Integer>(Arrays.asList(p2));final ChromosomePair pair=cp.crossover(p1c,p2c);final Integer[]c1=((DummyListChromosome)pair.getFirst()).getRepresentation().toArray(new Integer[p1.length]);final Integer[]c2=((DummyListChromosome)pair.getSecond()).getRepresentation().toArray(new Integer[p2.length]);Assert.assertNotSame(p1c,pair.getFirst());Assert.assertNotSame(p2c,pair.getSecond());for (int j=0;j < c1.length;j++){Assert.assertTrue(parentSet1.contains(c1[j]));parentSet1.remove(c1[j]);Assert.assertTrue(parentSet2.contains(c2[j]));parentSet2.remove(c2[j]);}}}"
"org.apache.commons.math3.genetics.OrderedCrossoverTest.testCrossoverDimensionMismatchException",0,"@Test(expected=DimensionMismatchException.class)public void testCrossoverDimensionMismatchException(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final Integer[]p2=new Integer[]{0,1,1,0,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final BinaryChromosome p2c=new DummyBinaryChromosome(p2);final CrossoverPolicy cp=new OrderedCrossover<Integer>();cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.OrderedCrossoverTest.testCrossoverInvalidFixedLengthChromosomeFirst",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeFirst(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p1c=new DummyBinaryChromosome(p1);final Chromosome p2c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new OrderedCrossover<Integer>();cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.genetics.OrderedCrossoverTest.testCrossoverInvalidFixedLengthChromosomeSecond",0,"@Test(expected=MathIllegalArgumentException.class)public void testCrossoverInvalidFixedLengthChromosomeSecond(){final Integer[]p1=new Integer[]{1,0,1,0,0,1,0,1,1};final BinaryChromosome p2c=new DummyBinaryChromosome(p1);final Chromosome p1c=new Chromosome(){public double fitness(){return 0;}};final CrossoverPolicy cp=new OrderedCrossover<Integer>();cp.crossover(p1c,p2c);}"
"org.apache.commons.math3.optim.univariate.BracketFinderTest.testCubicMin",0,"@Test public void testCubicMin(){final BracketFinder bFind=new BracketFinder();final UnivariateFunction func=new UnivariateFunction(){public double value(double x){if (x < -2){return value(-2);}else {return (x - 1)* (x + 2)* (x + 3);}}};bFind.search(func,GoalType.MINIMIZE,-2,-1);final double tol=1e-15;Assert.assertEquals(-2,bFind.getLo(),tol);Assert.assertEquals(-1,bFind.getMid(),tol);Assert.assertEquals(0.61803399999999997,bFind.getHi(),tol);}"
"org.apache.commons.math3.optim.univariate.BracketFinderTest.testCubicMax",0,"@Test public void testCubicMax(){final BracketFinder bFind=new BracketFinder();final UnivariateFunction func=new UnivariateFunction(){public double value(double x){if (x < -2){return value(-2);}else {return -(x - 1)* (x + 2)* (x + 3);}}};bFind.search(func,GoalType.MAXIMIZE,-2,-1);final double tol=1e-15;Assert.assertEquals(-2,bFind.getLo(),tol);Assert.assertEquals(-1,bFind.getMid(),tol);Assert.assertEquals(0.61803399999999997,bFind.getHi(),tol);}"
"org.apache.commons.math3.optim.univariate.BracketFinderTest.testMinimumIsOnIntervalBoundary",0,"@Test public void testMinimumIsOnIntervalBoundary(){final UnivariateFunction func=new UnivariateFunction(){public double value(double x){return x * x;}};final BracketFinder bFind=new BracketFinder();bFind.search(func,GoalType.MINIMIZE,0,1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,-1,0);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());}"
"org.apache.commons.math3.optim.univariate.BracketFinderTest.testIntervalBoundsOrdering",0,"@Test public void testIntervalBoundsOrdering(){final UnivariateFunction func=new UnivariateFunction(){public double value(double x){return x * x;}};final BracketFinder bFind=new BracketFinder();bFind.search(func,GoalType.MINIMIZE,-1,1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,1,-1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,1,2);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());bFind.search(func,GoalType.MINIMIZE,2,1);Assert.assertTrue(bFind.getLo()<= 0);Assert.assertTrue(0 <= bFind.getHi());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent",0,"@Test public void testMissedEndEvent()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double t0=1878250320.0000029;final double tEvent=1878250379.9999986;final double[]k={1.0e-4,1.0e-5,1.0e-6};FirstOrderDifferentialEquations ode=new FirstOrderDifferentialEquations(){public int getDimension(){return k.length;}public void computeDerivatives(double t,double[]y,double[]yDot){for (int i=0;i < y.length;++i){yDot[i]=k[i]* y[i];}}};DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.0,100.0,1.0e-10,1.0e-10);double[]y0=new double[k.length];for (int i=0;i < y0.length;++i){y0[i]=i + 1;}double[]y=new double[k.length];integrator.setInitialStepSize(60.0);double finalT=integrator.integrate(ode,t0,y0,tEvent,y);Assert.assertEquals(tEvent,finalT,5.0e-6);for (int i=0;i < y.length;++i){Assert.assertEquals(y0[i]* FastMath.exp(k[i]* (finalT - t0)),y[i],1.0e-9);}integrator.setInitialStepSize(60.0);integrator.addEventHandler(new EventHandler(){public void init(double t0,double[]y0,double t){}public void resetState(double t,double[]y){}public double g(double t,double[]y){return t - tEvent;}public Action eventOccurred(double t,double[]y,boolean increasing){Assert.assertEquals(tEvent,t,5.0e-6);return Action.CONTINUE;}},Double.POSITIVE_INFINITY,1.0e-20,100);finalT=integrator.integrate(ode,t0,y0,tEvent + 120,y);Assert.assertEquals(tEvent + 120,finalT,5.0e-6);for (int i=0;i < y.length;++i){Assert.assertEquals(y0[i]* FastMath.exp(k[i]* (finalT - t0)),y[i],1.0e-9);}}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testDimensionCheck",0,"@Test(expected=DimensionMismatchException.class)public void testDimensionCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()+ 10]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testNullIntervalCheck",0,"@Test(expected=NumberIsTooSmallException.class)public void testNullIntervalCheck()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();DormandPrince853Integrator integrator=new DormandPrince853Integrator(0.0,1.0,1.0e-10,1.0e-10);integrator.integrate(pb,0.0,new double[pb.getDimension()],0.0,new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testMinStep",0,"@Test(expected=NumberIsTooSmallException.class)public void testMinStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double minStep=0.1 * (pb.getFinalTime()- pb.getInitialTime());double maxStep=pb.getFinalTime()- pb.getInitialTime();double[]vecAbsoluteTolerance={1.0e-15,1.0e-16};double[]vecRelativeTolerance={1.0e-15,1.0e-16};FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,vecAbsoluteTolerance,vecRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance",0,"@Test public void testIncreasingTolerance()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {int previousCalls=Integer.MAX_VALUE;AdaptiveStepsizeIntegrator integ=new DormandPrince853Integrator(0,Double.POSITIVE_INFINITY,Double.NaN,Double.NaN);for (int i=-12;i < -2;++i){TestProblem1 pb=new TestProblem1();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=FastMath.pow(10.0,i);double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;integ.setStepSizeControl(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getMaximalValueError()< (1.3 * scalAbsoluteTolerance));Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);int calls=pb.getCalls();Assert.assertEquals(integ.getEvaluations(),calls);Assert.assertTrue(calls <= previousCalls);previousCalls=calls;}}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testTooLargeFirstStep",0,"@Test public void testTooLargeFirstStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {AdaptiveStepsizeIntegrator integ=new DormandPrince853Integrator(0,Double.POSITIVE_INFINITY,Double.NaN,Double.NaN);final double start=0.0;final double end=0.001;FirstOrderDifferentialEquations equations=new FirstOrderDifferentialEquations(){public int getDimension(){return 1;}public void computeDerivatives(double t,double[]y,double[]yDot){Assert.assertTrue(t >= FastMath.nextAfter(start,Double.NEGATIVE_INFINITY));Assert.assertTrue(t <= FastMath.nextAfter(end,Double.POSITIVE_INFINITY));yDot[0]=-100.0 * y[0];}};integ.setStepSizeControl(0,1.0,1.0e-6,1.0e-8);integ.integrate(equations,start,new double[]{1.0},end,new double[1]);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 1.1e-7);Assert.assertTrue(handler.getMaximalValueError()< 1.1e-7);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""Dormand-Prince 8 (5,3)"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testEvents",0,"@Test public void testEvents()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem4 pb=new TestProblem4();double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-9;double scalRelativeTolerance=0.01 * scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();double convergence=1.0e-8 * maxStep;for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,convergence,1000);}Assert.assertEquals(functions.length,integ.getEventHandlers().size());integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(0,handler.getMaximalValueError(),2.1e-7);Assert.assertEquals(0,handler.getMaximalTimeError(),convergence);Assert.assertEquals(12.0,handler.getLastTime(),convergence);integ.clearEventHandlers();Assert.assertEquals(0,integ.getEventHandlers().size());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(integ.getEvaluations(),pb.getCalls());Assert.assertTrue(pb.getCalls()< 3300);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps",0,"@Test public void testVariableSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double minStep=0;double maxStep=pb.getFinalTime()- pb.getInitialTime();double scalAbsoluteTolerance=1.0e-8;double scalRelativeTolerance=scalAbsoluteTolerance;FirstOrderIntegrator integ=new DormandPrince853Integrator(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);integ.addStepHandler(new VariableHandler());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);Assert.assertEquals(""Dormand-Prince 8 (5,3)"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative",0,"@Test public void testUnstableDerivative()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final StepProblem stepProblem=new StepProblem(0.0,1.0,2.0);FirstOrderIntegrator integ=new DormandPrince853Integrator(0.1,10,1.0e-12,0.0);integ.addEventHandler(stepProblem,1.0,1.0e-12,1000);double[]y={Double.NaN};integ.integrate(stepProblem,0.0,new double[]{0.0},10.0,y);Assert.assertEquals(8.0,y[0],1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testEventsScheduling",0,"@Test public void testEventsScheduling(){FirstOrderDifferentialEquations sincos=new FirstOrderDifferentialEquations(){public int getDimension(){return 2;}public void computeDerivatives(double t,double[]y,double[]yDot){yDot[0]=y[1];yDot[1]=-y[0];}};SchedulingChecker sinChecker=new SchedulingChecker(0);SchedulingChecker cosChecker=new SchedulingChecker(1);FirstOrderIntegrator integ=new DormandPrince853Integrator(0.001,1.0,1.0e-12,0.0);integ.addEventHandler(sinChecker,0.01,1.0e-7,100);integ.addStepHandler(sinChecker);integ.addEventHandler(cosChecker,0.01,1.0e-7,100);integ.addStepHandler(cosChecker);double t0=0.5;double[]y0=new double[]{FastMath.sin(t0),FastMath.cos(t0)};double t=10.0;double[]y=new double[2];integ.integrate(sincos,t0,y0,t,y);}"
"org.apache.commons.math3.ml.distance.EuclideanDistanceTest.testZero",0,"@Test public void testZero(){final double[]a={0,1,-2,3.4,5,-6.7,89};Assert.assertEquals(0,distance.compute(a,a),0d);}"
"org.apache.commons.math3.ml.distance.EuclideanDistanceTest.test",0,"@Test public void test(){final double[]a={1,-2,3,4};final double[]b={-5,-6,7,8};final double expected=FastMath.sqrt(84);Assert.assertEquals(expected,distance.compute(a,b),0d);Assert.assertEquals(expected,distance.compute(b,a),0d);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testCompose",0,"@Test public void testCompose(){UnivariateFunction id=new Identity();Assert.assertEquals(3,FunctionUtils.compose(id,id,id).value(3),EPS);UnivariateFunction c=new Constant(4);Assert.assertEquals(4,FunctionUtils.compose(id,c).value(3),EPS);Assert.assertEquals(4,FunctionUtils.compose(c,id).value(3),EPS);UnivariateFunction m=new Minus();Assert.assertEquals(-3,FunctionUtils.compose(m).value(3),EPS);Assert.assertEquals(3,FunctionUtils.compose(m,m).value(3),EPS);UnivariateFunction inv=new Inverse();Assert.assertEquals(-0.25,FunctionUtils.compose(inv,m,c,id).value(3),EPS);UnivariateFunction pow=new Power(2);Assert.assertEquals(81,FunctionUtils.compose(pow,pow).value(3),EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testComposeDifferentiable",0,"@Test public void testComposeDifferentiable(){UnivariateDifferentiableFunction id=new Identity();Assert.assertEquals(1,FunctionUtils.compose(id,id,id).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction c=new Constant(4);Assert.assertEquals(0,FunctionUtils.compose(id,c).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);Assert.assertEquals(0,FunctionUtils.compose(c,id).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction m=new Minus();Assert.assertEquals(-1,FunctionUtils.compose(m).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);Assert.assertEquals(1,FunctionUtils.compose(m,m).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction inv=new Inverse();Assert.assertEquals(0.25,FunctionUtils.compose(inv,m,id).value(new DerivativeStructure(1,1,0,2)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction pow=new Power(2);Assert.assertEquals(108,FunctionUtils.compose(pow,pow).value(new DerivativeStructure(1,1,0,3)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction log=new Log();double a=9876.54321;Assert.assertEquals(pow.value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1)/ pow.value(a),FunctionUtils.compose(log,pow).value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1),EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testAdd",0,"@Test public void testAdd(){UnivariateFunction id=new Identity();UnivariateFunction c=new Constant(4);UnivariateFunction m=new Minus();UnivariateFunction inv=new Inverse();Assert.assertEquals(4.5,FunctionUtils.add(inv,m,c,id).value(2),EPS);Assert.assertEquals(4 + 2,FunctionUtils.add(c,id).value(2),EPS);Assert.assertEquals(4 - 2,FunctionUtils.add(c,FunctionUtils.compose(m,id)).value(2),EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testAddDifferentiable",0,"@Test public void testAddDifferentiable(){UnivariateDifferentiableFunction sin=new Sin();UnivariateDifferentiableFunction c=new Constant(4);UnivariateDifferentiableFunction m=new Minus();UnivariateDifferentiableFunction inv=new Inverse();final double a=123.456;Assert.assertEquals(-1 / (a * a)- 1 + Math.cos(a),FunctionUtils.add(inv,m,c,sin).value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1),EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testMultiply",0,"@Test public void testMultiply(){UnivariateFunction c=new Constant(4);Assert.assertEquals(16,FunctionUtils.multiply(c,c).value(12345),EPS);UnivariateFunction inv=new Inverse();UnivariateFunction pow=new Power(2);Assert.assertEquals(1,FunctionUtils.multiply(FunctionUtils.compose(inv,pow),pow).value(3.5),EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testMultiplyDifferentiable",0,"@Test public void testMultiplyDifferentiable(){UnivariateDifferentiableFunction c=new Constant(4);UnivariateDifferentiableFunction id=new Identity();final double a=1.2345678;Assert.assertEquals(8 * a,FunctionUtils.multiply(c,id,id).value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction inv=new Inverse();UnivariateDifferentiableFunction pow=new Power(2.5);UnivariateDifferentiableFunction cos=new Cos();Assert.assertEquals(1.5 * Math.sqrt(a)* Math.cos(a)- Math.pow(a,1.5)* Math.sin(a),FunctionUtils.multiply(inv,pow,cos).value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1),EPS);UnivariateDifferentiableFunction cosh=new Cosh();Assert.assertEquals(1.5 * Math.sqrt(a)* Math.cosh(a)+ Math.pow(a,1.5)* Math.sinh(a),FunctionUtils.multiply(inv,pow,cosh).value(new DerivativeStructure(1,1,0,a)).getPartialDerivative(1),8 * EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testCombine",0,"@Test public void testCombine(){BivariateFunction bi=new Add();UnivariateFunction id=new Identity();UnivariateFunction m=new Minus();UnivariateFunction c=FunctionUtils.combine(bi,id,m);Assert.assertEquals(0,c.value(2.3456),EPS);bi=new Multiply();UnivariateFunction inv=new Inverse();c=FunctionUtils.combine(bi,id,inv);Assert.assertEquals(1,c.value(2.3456),EPS);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testCollector",0,"@Test public void testCollector(){BivariateFunction bi=new Add();MultivariateFunction coll=FunctionUtils.collector(bi,0);Assert.assertEquals(10,coll.value(new double[]{1,2,3,4}),EPS);bi=new Multiply();coll=FunctionUtils.collector(bi,1);Assert.assertEquals(24,coll.value(new double[]{1,2,3,4}),EPS);bi=new Max();coll=FunctionUtils.collector(bi,Double.NEGATIVE_INFINITY);Assert.assertEquals(10,coll.value(new double[]{1,-2,7.5,10,-24,9.99}),0);bi=new Min();coll=FunctionUtils.collector(bi,Double.POSITIVE_INFINITY);Assert.assertEquals(-24,coll.value(new double[]{1,-2,7.5,10,-24,9.99}),0);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testSinc",0,"@Test public void testSinc(){BivariateFunction div=new Divide();UnivariateFunction sin=new Sin();UnivariateFunction id=new Identity();UnivariateFunction sinc1=FunctionUtils.combine(div,sin,id);UnivariateFunction sinc2=new Sinc();for (int i=0;i < 10;i++){double x=Math.random();Assert.assertEquals(sinc1.value(x),sinc2.value(x),EPS);}}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testFixingArguments",0,"@Test public void testFixingArguments(){UnivariateFunction scaler=FunctionUtils.fix1stArgument(new Multiply(),10);Assert.assertEquals(1.23456,scaler.value(0.123456),EPS);UnivariateFunction pow1=new Power(2);UnivariateFunction pow2=FunctionUtils.fix2ndArgument(new Pow(),2);for (int i=0;i < 10;i++){double x=Math.random()* 10;Assert.assertEquals(pow1.value(x),pow2.value(x),0);}}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testSampleWrongBounds",0,"@Test(expected=NumberIsTooLargeException.class)public void testSampleWrongBounds(){FunctionUtils.sample(new Sin(),Math.PI,0.0,10);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testSampleNegativeNumberOfPoints",0,"@Test(expected=NotStrictlyPositiveException.class)public void testSampleNegativeNumberOfPoints(){FunctionUtils.sample(new Sin(),0.0,Math.PI,-1);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testSampleNullNumberOfPoints",0,"@Test(expected=NotStrictlyPositiveException.class)public void testSampleNullNumberOfPoints(){FunctionUtils.sample(new Sin(),0.0,Math.PI,0);}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testSample",0,"@Test public void testSample(){final int n=11;final double min=0.0;final double max=Math.PI;final double[]actual=FunctionUtils.sample(new Sin(),min,max,n);for (int i=0;i < n;i++){final double x=min + (max - min)/ n * i;Assert.assertEquals(""x = "" + x,FastMath.sin(x),actual[i],0.0);}}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testToDifferentiableUnivariateFunction",0,"@Test @Deprecated public void testToDifferentiableUnivariateFunction(){Sin sin=new Sin();DifferentiableUnivariateFunction converted=FunctionUtils.toDifferentiableUnivariateFunction(sin);for (double x=0.1;x < 0.5;x+=0.01){Assert.assertEquals(sin.value(x),converted.value(x),1.0e-10);Assert.assertEquals(sin.derivative().value(x),converted.derivative().value(x),1.0e-10);}}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testToUnivariateDifferential",0,"@Test @Deprecated public void testToUnivariateDifferential(){Sin sin=new Sin();UnivariateDifferentiableFunction converted=FunctionUtils.toUnivariateDifferential(sin);for (double x=0.1;x < 0.5;x+=0.01){DerivativeStructure t=new DerivativeStructure(2,1,x,1.0,2.0);Assert.assertEquals(sin.value(t).getValue(),converted.value(t).getValue(),1.0e-10);Assert.assertEquals(sin.value(t).getPartialDerivative(1,0),converted.value(t).getPartialDerivative(1,0),1.0e-10);Assert.assertEquals(sin.value(t).getPartialDerivative(0,1),converted.value(t).getPartialDerivative(0,1),1.0e-10);}}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testToDifferentiableMultivariateFunction",0,"@Test @Deprecated public void testToDifferentiableMultivariateFunction(){MultivariateDifferentiableFunction hypot=new MultivariateDifferentiableFunction(){public double value(double[]point){return FastMath.hypot(point[0],point[1]);}public DerivativeStructure value(DerivativeStructure[]point){return DerivativeStructure.hypot(point[0],point[1]);}};DifferentiableMultivariateFunction converted=FunctionUtils.toDifferentiableMultivariateFunction(hypot);for (double x=0.1;x < 0.5;x+=0.01){for (double y=0.1;y < 0.5;y+=0.01){double[]point=new double[]{x,y};Assert.assertEquals(hypot.value(point),converted.value(point),1.0e-10);Assert.assertEquals(x / hypot.value(point),converted.gradient().value(point)[0],1.0e-10);Assert.assertEquals(y / hypot.value(point),converted.gradient().value(point)[1],1.0e-10);}}}"
"org.apache.commons.math3.analysis.FunctionUtilsTest.testToMultivariateDifferentiableFunction",0,"@Test @Deprecated public void testToMultivariateDifferentiableFunction(){DifferentiableMultivariateFunction hypot=new DifferentiableMultivariateFunction(){public double value(double[]point){return FastMath.hypot(point[0],point[1]);}public MultivariateFunction partialDerivative(final int k){return new MultivariateFunction(){public double value(double[]point){return point[k]/ FastMath.hypot(point[0],point[1]);}};}public MultivariateVectorFunction gradient(){return new MultivariateVectorFunction(){public double[]value(double[]point){final double h=FastMath.hypot(point[0],point[1]);return new double[]{point[0]/ h,point[1]/ h};}};}};MultivariateDifferentiableFunction converted=FunctionUtils.toMultivariateDifferentiableFunction(hypot);for (double x=0.1;x < 0.5;x+=0.01){for (double y=0.1;y < 0.5;y+=0.01){DerivativeStructure[]t=new DerivativeStructure[]{new DerivativeStructure(3,1,x,1.0,2.0,3.0),new DerivativeStructure(3,1,y,4.0,5.0,6.0)};DerivativeStructure h=DerivativeStructure.hypot(t[0],t[1]);Assert.assertEquals(h.getValue(),converted.value(t).getValue(),1.0e-10);Assert.assertEquals(h.getPartialDerivative(1,0,0),converted.value(t).getPartialDerivative(1,0,0),1.0e-10);Assert.assertEquals(h.getPartialDerivative(0,1,0),converted.value(t).getPartialDerivative(0,1,0),1.0e-10);Assert.assertEquals(h.getPartialDerivative(0,0,1),converted.value(t).getPartialDerivative(0,0,1),1.0e-10);}}}"
"org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest.testInterpolateLinearDegenerateTwoSegment",0,"@Test public void testInterpolateLinearDegenerateTwoSegment(){double x[]={0.0,0.5,1.0};double y[]={0.0,0.5,1.0};UnivariateInterpolator i=new LinearInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],1d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);Assert.assertEquals(0.0,f.value(0.0),interpolationTolerance);Assert.assertEquals(0.4,f.value(0.4),interpolationTolerance);Assert.assertEquals(1.0,f.value(1.0),interpolationTolerance);}"
"org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest.testInterpolateLinearDegenerateThreeSegment",0,"@Test public void testInterpolateLinearDegenerateThreeSegment(){double x[]={0.0,0.5,1.0,1.5};double y[]={0.0,0.5,1.0,1.5};UnivariateInterpolator i=new LinearInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],1d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);target=new double[]{y[2],1d};TestUtils.assertEquals(polynomials[2].getCoefficients(),target,coefficientTolerance);Assert.assertEquals(0,f.value(0),interpolationTolerance);Assert.assertEquals(1.4,f.value(1.4),interpolationTolerance);Assert.assertEquals(1.5,f.value(1.5),interpolationTolerance);}"
"org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest.testInterpolateLinear",0,"@Test public void testInterpolateLinear(){double x[]={0.0,0.5,1.0};double y[]={0.0,0.5,0.0};UnivariateInterpolator i=new LinearInterpolator();UnivariateFunction f=i.interpolate(x,y);verifyInterpolation(f,x,y);PolynomialFunction polynomials[]=((PolynomialSplineFunction)f).getPolynomials();double target[]={y[0],1d};TestUtils.assertEquals(polynomials[0].getCoefficients(),target,coefficientTolerance);target=new double[]{y[1],-1d};TestUtils.assertEquals(polynomials[1].getCoefficients(),target,coefficientTolerance);}"
"org.apache.commons.math3.analysis.interpolation.LinearInterpolatorTest.testIllegalArguments",0,"@Test public void testIllegalArguments(){UnivariateInterpolator i=new LinearInterpolator();try {double xval[]={0.0,1.0};double yval[]={0.0,1.0,2.0};i.interpolate(xval,yval);Assert.fail(""Failed to detect data set array with different sizes."");}catch(DimensionMismatchException iae){}try {double xval[]={0.0,1.0,0.5};double yval[]={0.0,1.0,2.0};i.interpolate(xval,yval);Assert.fail(""Failed to detect unsorted arguments."");}catch(NonMonotonicSequenceException iae){}try {double xval[]={0.0};double yval[]={0.0};i.interpolate(xval,yval);Assert.fail(""Failed to detect unsorted arguments."");}catch(NumberIsTooSmallException iae){}}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testMissedEndEvent",0,"@Test public void testMissedEndEvent()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double t0=1878250320.0000029;final double tEvent=1878250379.9999986;final double[]k={1.0e-4,1.0e-5,1.0e-6};FirstOrderDifferentialEquations ode=new FirstOrderDifferentialEquations(){public int getDimension(){return k.length;}public void computeDerivatives(double t,double[]y,double[]yDot){for (int i=0;i < y.length;++i){yDot[i]=k[i]* y[i];}}};ClassicalRungeKuttaIntegrator integrator=new ClassicalRungeKuttaIntegrator(60.0);double[]y0=new double[k.length];for (int i=0;i < y0.length;++i){y0[i]=i + 1;}double[]y=new double[k.length];double finalT=integrator.integrate(ode,t0,y0,tEvent,y);Assert.assertEquals(tEvent,finalT,5.0e-6);for (int i=0;i < y.length;++i){Assert.assertEquals(y0[i]* FastMath.exp(k[i]* (finalT - t0)),y[i],1.0e-9);}integrator.addEventHandler(new EventHandler(){public void init(double t0,double[]y0,double t){}public void resetState(double t,double[]y){}public double g(double t,double[]y){return t - tEvent;}public Action eventOccurred(double t,double[]y,boolean increasing){Assert.assertEquals(tEvent,t,5.0e-6);return Action.CONTINUE;}},Double.POSITIVE_INFINITY,1.0e-20,100);finalT=integrator.integrate(ode,t0,y0,tEvent + 120,y);Assert.assertEquals(tEvent + 120,finalT,5.0e-6);for (int i=0;i < y.length;++i){Assert.assertEquals(y0[i]* FastMath.exp(k[i]* (finalT - t0)),y[i],1.0e-9);}}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSanityChecks",0,"@Test public void testSanityChecks()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {try {TestProblem1 pb=new TestProblem1();new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()+ 10],1.0,new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException ie){}try {TestProblem1 pb=new TestProblem1();new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()],1.0,new double[pb.getDimension()+ 10]);Assert.fail(""an exception should have been thrown"");}catch(DimensionMismatchException ie){}try {TestProblem1 pb=new TestProblem1();new ClassicalRungeKuttaIntegrator(0.01).integrate(pb,0.0,new double[pb.getDimension()],0.0,new double[pb.getDimension()]);Assert.fail(""an exception should have been thrown"");}catch(NumberIsTooSmallException ie){}}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testDecreasingSteps",0,"@Test public void testDecreasingSteps()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblemAbstract[]problems=TestProblemFactory.getProblems();for (int k=0;k < problems.length;++k){double previousValueError=Double.NaN;double previousTimeError=Double.NaN;for (int i=4;i < 10;++i){TestProblemAbstract pb=problems[k].copy();double step=(pb.getFinalTime()- pb.getInitialTime())* FastMath.pow(2.0,-i);FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);EventHandler[]functions=pb.getEventsHandlers();for (int l=0;l < functions.length;++l){integ.addEventHandler(functions[l],Double.POSITIVE_INFINITY,1.0e-6 * step,1000);}Assert.assertEquals(functions.length,integ.getEventHandlers().size());double stopTime=integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);if (functions.length == 0){Assert.assertEquals(pb.getFinalTime(),stopTime,1.0e-10);}double error=handler.getMaximalValueError();if (i > 4){Assert.assertTrue(error < 1.01 * FastMath.abs(previousValueError));}previousValueError=error;double timeError=handler.getMaximalTimeError();if (i > 4){Assert.assertTrue(timeError <= FastMath.abs(previousTimeError));}previousTimeError=timeError;integ.clearEventHandlers();Assert.assertEquals(0,integ.getEventHandlers().size());}}}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testSmallStep",0,"@Test public void testSmallStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 2.0e-13);Assert.assertTrue(handler.getMaximalValueError()< 4.0e-12);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""classical Runge-Kutta"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBigStep",0,"@Test public void testBigStep()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem1 pb=new TestProblem1();double step=(pb.getFinalTime()- pb.getInitialTime())* 0.2;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()> 0.0004);Assert.assertTrue(handler.getMaximalValueError()> 0.005);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testBackward",0,"@Test public void testBackward()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {TestProblem5 pb=new TestProblem5();double step=FastMath.abs(pb.getFinalTime()- pb.getInitialTime())* 0.001;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);TestProblemHandler handler=new TestProblemHandler(pb,integ);integ.addStepHandler(handler);integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);Assert.assertTrue(handler.getLastError()< 5.0e-10);Assert.assertTrue(handler.getMaximalValueError()< 7.0e-10);Assert.assertEquals(0,handler.getMaximalTimeError(),1.0e-12);Assert.assertEquals(""classical Runge-Kutta"",integ.getName());}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testKepler",0,"@Test public void testKepler()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final TestProblem3 pb=new TestProblem3(0.9);double step=(pb.getFinalTime()- pb.getInitialTime())* 0.0003;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);integ.addStepHandler(new KeplerHandler(pb));integ.integrate(pb,pb.getInitialTime(),pb.getInitialState(),pb.getFinalTime(),new double[pb.getDimension()]);}"
"org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegratorTest.testStepSize",0,"@Test public void testStepSize()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {final double step=1.23456;FirstOrderIntegrator integ=new ClassicalRungeKuttaIntegrator(step);integ.addStepHandler(new StepHandler(){public void handleStep(StepInterpolator interpolator,boolean isLast){if (!isLast){Assert.assertEquals(step,interpolator.getCurrentTime()- interpolator.getPreviousTime(),1.0e-12);}}public void init(double t0,double[]y0,double t){}});integ.integrate(new FirstOrderDifferentialEquations(){public void computeDerivatives(double t,double[]y,double[]dot){dot[0]=1.0;}public int getDimension(){return 1;}},0.0,new double[]{0.0},5.0,new double[1]);}"
"org.apache.commons.math3.analysis.integration.RombergIntegratorTest.testSinFunction",0,"/** * Test of integrator for the sine function.*/@Test public void testSinFunction(){UnivariateFunction f=new Sin();UnivariateIntegrator integrator=new RombergIntegrator();double min,max,expected,result,tolerance;min=0;max=FastMath.PI;expected=2;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(100,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 50);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);min=-FastMath.PI / 3;max=0;expected=-0.5;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(100,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 50);Assert.assertTrue(integrator.getIterations()< 10);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.RombergIntegratorTest.testQuinticFunction",0,"/** * Test of integrator for the quintic function.*/@Test public void testQuinticFunction(){UnivariateFunction f=new QuinticFunction();UnivariateIntegrator integrator=new RombergIntegrator();double min,max,expected,result,tolerance;min=0;max=1;expected=-1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(100,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 10);Assert.assertTrue(integrator.getIterations()< 5);Assert.assertEquals(expected,result,tolerance);min=0;max=0.5;expected=11.0 / 768;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(100,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 10);Assert.assertTrue(integrator.getIterations()< 5);Assert.assertEquals(expected,result,tolerance);min=-1;max=4;expected=2048 / 3.0 - 78 + 1.0 / 48;tolerance=FastMath.abs(expected * integrator.getRelativeAccuracy());result=integrator.integrate(100,f,min,max);Assert.assertTrue(integrator.getEvaluations()< 10);Assert.assertTrue(integrator.getIterations()< 5);Assert.assertEquals(expected,result,tolerance);}"
"org.apache.commons.math3.analysis.integration.RombergIntegratorTest.testParameters",0,"/** * Test of parameters for the integrator.*/@Test public void testParameters(){UnivariateFunction f=new Sin();try {new RombergIntegrator().integrate(1000,f,1,-1);Assert.fail(""Expecting NumberIsTooLargeException - bad interval"");}catch(NumberIsTooLargeException ex){}try {new RombergIntegrator(5,4);Assert.fail(""Expecting NumberIsTooSmallException - bad iteration limits"");}catch(NumberIsTooSmallException ex){}try {new RombergIntegrator(10,50);Assert.fail(""Expecting NumberIsTooLargeException - bad iteration limits"");}catch(NumberIsTooLargeException ex){}}"
"org.apache.commons.math3.linear.OpenMapRealMatrixTest.testMath679",0,"@Test(expected=NumberIsTooLargeException.class)public void testMath679(){new OpenMapRealMatrix(3,Integer.MAX_VALUE);}"
"org.apache.commons.math3.ode.events.OverlappingEventsTest.testOverlappingEvents0",0,"/** * Test for events that occur at the exact same time,but due to numerical calculations occur very close together instead. Uses event type 0. See {@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double,double[])}.*/@Test public void testOverlappingEvents0()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {test(0);}"
"org.apache.commons.math3.ode.events.OverlappingEventsTest.testOverlappingEvents1",0,"/** * Test for events that occur at the exact same time,but due to numerical calculations occur very close together instead. Uses event type 1. See {@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double,double[])}.*/@Test public void testOverlappingEvents1()throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {test(1);}"
"org.apache.commons.math3.ode.events.OverlappingEventsTest.test",0,"/** * Test for events that occur at the exact same time,but due to numerical calculations occur very close together instead.* @param eventType the type of events to use. See{@link org.apache.commons.math3.ode.events.EventHandler#g(double,double[])EventHandler.g(double,double[])}.*/public void test(int eventType)throws DimensionMismatchException,NumberIsTooSmallException,MaxCountExceededException,NoBracketingException {double e=1e-15;FirstOrderIntegrator integrator=new DormandPrince853Integrator(e,100.0,1e-7,1e-7);BaseSecantSolver rootSolver=new PegasusSolver(e,e);EventHandler evt1=new Event(0,eventType);EventHandler evt2=new Event(1,eventType);integrator.addEventHandler(evt1,0.1,e,999,rootSolver);integrator.addEventHandler(evt2,0.1,e,999,rootSolver);double t=0.0;double tEnd=10.0;double[]y={0.0,0.0};List<Double> events1=new ArrayList<Double>();List<Double> events2=new ArrayList<Double>();while (t < tEnd){t=integrator.integrate(this,t,y,tEnd,y);if (y[0]>= 1.0){y[0]=0.0;events1.add(t);}if (y[1]>= 1.0){y[1]=0.0;events2.add(t);}}Assert.assertEquals(EVENT_TIMES1.length,events1.size());Assert.assertEquals(EVENT_TIMES2.length,events2.size());for (int i=0;i < EVENT_TIMES1.length;i++){Assert.assertEquals(EVENT_TIMES1[i],events1.get(i),1e-7);}for (int i=0;i < EVENT_TIMES2.length;i++){Assert.assertEquals(EVENT_TIMES2[i],events2.get(i),1e-7);}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutAndGetWith0ExpectedSize",0,"@Test public void testPutAndGetWith0ExpectedSize(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap(0);assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutAndGetWithExpectedSize",0,"@Test public void testPutAndGetWithExpectedSize(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap(500);assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutAndGet",0,"@Test public void testPutAndGet(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutAbsentOnExisting",0,"@Test public void testPutAbsentOnExisting(){OpenIntToDoubleHashMap map=createFromJavaMap();int size=javaMap.size();for(Map.Entry<Integer,Double> mapEntry : generateAbsent().entrySet()){map.put(mapEntry.getKey(),mapEntry.getValue());Assert.assertEquals(++size,map.size());Assert.assertTrue(Precision.equals(mapEntry.getValue(),map.get(mapEntry.getKey()),1));}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutOnExisting",0,"@Test public void testPutOnExisting(){OpenIntToDoubleHashMap map=createFromJavaMap();for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){map.put(mapEntry.getKey(),mapEntry.getValue());Assert.assertEquals(javaMap.size(),map.size());Assert.assertTrue(Precision.equals(mapEntry.getValue(),map.get(mapEntry.getKey()),1));}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testGetAbsent",0,"@Test public void testGetAbsent(){Map<Integer,Double> generated=generateAbsent();OpenIntToDoubleHashMap map=createFromJavaMap();for(Map.Entry<Integer,Double> mapEntry : generated.entrySet())Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testGetFromEmpty",0,"@Test public void testGetFromEmpty(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();Assert.assertTrue(Double.isNaN(map.get(5)));Assert.assertTrue(Double.isNaN(map.get(0)));Assert.assertTrue(Double.isNaN(map.get(50)));}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testRemove",0,"@Test public void testRemove(){OpenIntToDoubleHashMap map=createFromJavaMap();int mapSize=javaMap.size();Assert.assertEquals(mapSize,map.size());for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){map.remove(mapEntry.getKey());Assert.assertEquals(--mapSize,map.size());Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));}assertPutAndGet(map);}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testRemove2",0,"@Test public void testRemove2(){OpenIntToDoubleHashMap map=createFromJavaMap();int mapSize=javaMap.size();int count=0;Set<Integer> keysInMap=new HashSet<Integer>(javaMap.keySet());for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){keysInMap.remove(mapEntry.getKey());map.remove(mapEntry.getKey());Assert.assertEquals(--mapSize,map.size());Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));if (count++ > 5)break;}assertPutAndGet(map,mapSize,keysInMap);}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testRemoveFromEmpty",0,"@Test public void testRemoveFromEmpty(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();Assert.assertTrue(Double.isNaN(map.remove(50)));}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testRemoveAbsent",0,"@Test public void testRemoveAbsent(){Map<Integer,Double> generated=generateAbsent();OpenIntToDoubleHashMap map=createFromJavaMap();int mapSize=map.size();for(Map.Entry<Integer,Double> mapEntry : generated.entrySet()){map.remove(mapEntry.getKey());Assert.assertEquals(mapSize,map.size());Assert.assertTrue(Double.isNaN(map.get(mapEntry.getKey())));}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testCopy",0,"@Test public void testCopy(){OpenIntToDoubleHashMap copy=new OpenIntToDoubleHashMap(createFromJavaMap());Assert.assertEquals(javaMap.size(),copy.size());for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet())Assert.assertTrue(Precision.equals(mapEntry.getValue(),copy.get(mapEntry.getKey()),1));}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testContainsKey",0,"@Test public void testContainsKey(){OpenIntToDoubleHashMap map=createFromJavaMap();for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){Assert.assertTrue(map.containsKey(mapEntry.getKey()));}for(Map.Entry<Integer,Double> mapEntry : generateAbsent().entrySet()){Assert.assertFalse(map.containsKey(mapEntry.getKey()));}for(Map.Entry<Integer,Double> mapEntry : javaMap.entrySet()){int key=mapEntry.getKey();Assert.assertTrue(map.containsKey(key));map.remove(key);Assert.assertFalse(map.containsKey(key));}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testIterator",0,"@Test public void testIterator(){OpenIntToDoubleHashMap map=createFromJavaMap();OpenIntToDoubleHashMap.Iterator iterator=map.iterator();for (int i=0;i < map.size();++i){Assert.assertTrue(iterator.hasNext());iterator.advance();int key=iterator.key();Assert.assertTrue(map.containsKey(key));Assert.assertEquals(javaMap.get(key),map.get(key),0);Assert.assertEquals(javaMap.get(key),iterator.value(),0);Assert.assertTrue(javaMap.containsKey(key));}Assert.assertFalse(iterator.hasNext());try {iterator.advance();Assert.fail(""an exception should have been thrown"");}catch(NoSuchElementException nsee){}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testConcurrentModification",0,"@Test public void testConcurrentModification(){OpenIntToDoubleHashMap map=createFromJavaMap();OpenIntToDoubleHashMap.Iterator iterator=map.iterator();map.put(3,3);try {iterator.advance();Assert.fail(""an exception should have been thrown"");}catch(ConcurrentModificationException cme){}}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollisions",0,"/** * Regression test for a bug in findInsertionIndex where the hashing in the second probing loop was inconsistent with the first causing duplicate keys after the right sequence of puts and removes.*/@Test public void testPutKeysWithCollisions(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();int key1=-1996012590;double value1=1.0;map.put(key1,value1);int key2=835099822;map.put(key2,value1);int key3=1008859686;map.put(key3,value1);Assert.assertTrue(Precision.equals(value1,map.get(key3),1));Assert.assertEquals(3,map.size());map.remove(key2);double value2=2.0;map.put(key3,value2);Assert.assertTrue(Precision.equals(value2,map.get(key3),1));Assert.assertEquals(2,map.size());}"
"org.apache.commons.math3.util.OpenIntToDoubleHashMapTest.testPutKeysWithCollision2",0,"/** * Similar to testPutKeysWithCollisions()but exercises the codepaths in a slightly different manner.*/@Test public void testPutKeysWithCollision2(){OpenIntToDoubleHashMap map=new OpenIntToDoubleHashMap();int key1=837989881;double value1=1.0;map.put(key1,value1);int key2=476463321;map.put(key2,value1);Assert.assertEquals(2,map.size());Assert.assertTrue(Precision.equals(value1,map.get(key2),1));map.remove(key1);double value2=2.0;map.put(key2,value2);Assert.assertEquals(1,map.size());Assert.assertTrue(Precision.equals(value2,map.get(key2),1));}"
